 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 11/27/2021 22:13:13


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT MARSIANO
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; for cells w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$0                 paddingSoFar set 0
(1)   33/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   34/       0 :                     
(1)   35/       0 :                     ; -------------------------------------
(1)   36/       0 :                     ; Reserve memory section
(1)   37/       0 :                     ;
(1)   38/       0 :                     ; NOTE: This doesn't work for Z80
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     
(1)   41/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   42/       0 :                     GLBL_LASTPC	set *
(1)   43/       0 :                     		dephase
(1)   44/       0 :                     GLBL_LASTORG	set *
(1)   45/       0 :                     		phase thisinput
(1)   46/       0 :                     		endm
(1)   47/       0 :                     		
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Finish
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     finish		macro				; Then finish custom struct.
(1)   53/       0 :                     		!org GLBL_LASTORG
(1)   54/       0 :                     		phase GLBL_LASTPC
(1)   55/       0 :                     		endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; -------------------------------------
(1)   58/       0 :                     ; Custom ORG
(1)   59/       0 :                     ;
(1)   60/       0 :                     ; (from s2disasm)
(1)   61/       0 :                     ; -------------------------------------
(1)   62/       0 :                     
(1)   63/       0 :                     org macro address
(1)   64/       0 :                     	if notZ80(MOMCPU)
(1)   65/       0 :                     		if address < *
(1)   66/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   67/       0 :                     		elseif address > *
(1)   68/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   69/       0 :                     			!org address
(1)   70/       0 :                     		endif
(1)   71/       0 :                     	else
(1)   72/       0 :                     		if address < $
(1)   73/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			while address > $
(1)   76/       0 :                     				db 0
(1)   77/       0 :                     			endm
(1)   78/       0 :                     		endif
(1)   79/       0 :                     	endif
(1)   80/       0 :                         endm
(1)   81/       0 :                     
       7/       0 :                     		include	"system/md/const.asm"	; MD and MARS Variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/MARS shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; MD to MARS Task transfer settings
(1)    7/       0 : =$8                 MAX_MDTSKARG	equ 8			; MAX MD task arguments (FIXED)
(1)    8/       0 : =$10                MAX_MDTASKS	equ 16			; MAX requests from MD to here
(1)    9/       0 :                     
(1)   10/       0 :                     ; ====================================================================
(1)   11/       0 :                     ; ----------------------------------------------------------------
(1)   12/       0 :                     ; MD Sound
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ----------------------------------------------------------------
(1)   17/       0 :                     ; MD Video
(1)   18/       0 :                     ; ----------------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; ------------------------------------------------
(1)   21/       0 :                     ; vdp_ctrl READ bits
(1)   22/       0 :                     ; ------------------------------------------------
(1)   23/       0 :                     
(1)   24/       0 : =$2                 bitHint		equ 2
(1)   25/       0 : =$3                 bitVint		equ 3
(1)   26/       0 : =$1                 bitDma		equ 1
(1)   27/       0 :                     
(1)   28/       0 :                     ; ------------------------------------------------
(1)   29/       0 :                     ; VDP register variables
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; Register $80
(1)   33/       0 : =$2                 HVStop		equ $02
(1)   34/       0 : =$10                HintEnbl	equ $10
(1)   35/       0 : =$1                 bitHVStop	equ 1
(1)   36/       0 : =$4                 bitHintEnbl	equ 4
(1)   37/       0 :                     
(1)   38/       0 :                     ; Register $81
(1)   39/       0 : =$40                DispEnbl 	equ $40
(1)   40/       0 : =$20                VintEnbl 	equ $20
(1)   41/       0 : =$10                DmaEnbl		equ $10
(1)   42/       0 : =$6                 bitDispEnbl	equ 6
(1)   43/       0 : =$5                 bitVintEnbl	equ 5
(1)   44/       0 : =$4                 bitDmaEnbl	equ 4
(1)   45/       0 : =$3                 bitV30		equ 3
(1)   46/       0 :                     
(1)   47/       0 :                     ; ====================================================================
(1)   48/       0 :                     ; --------------------------------------------------------
(1)   49/       0 :                     ; Contoller reading (call System_Input first)
(1)   50/       0 :                     ; --------------------------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     ; structure is below
(1)   53/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   54/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   55/       0 :                     
(1)   56/       0 :                     ; read as full WORD (on_hold or on_press)
(1)   57/       0 : =$1                 JoyUp		equ $0001
(1)   58/       0 : =$2                 JoyDown		equ $0002
(1)   59/       0 : =$4                 JoyLeft		equ $0004
(1)   60/       0 : =$8                 JoyRight	equ $0008
(1)   61/       0 : =$10                JoyB		equ $0010
(1)   62/       0 : =$20                JoyC		equ $0020
(1)   63/       0 : =$40                JoyA		equ $0040
(1)   64/       0 : =$80                JoyStart	equ $0080
(1)   65/       0 : =$100               JoyZ		equ $0100
(1)   66/       0 : =$200               JoyY		equ $0200
(1)   67/       0 : =$400               JoyX		equ $0400
(1)   68/       0 : =$800               JoyMode		equ $0800
(1)   69/       0 :                     
(1)   70/       0 :                     ; right byte $00xx
(1)   71/       0 : =$0                 bitJoyUp	equ 0
(1)   72/       0 : =$1                 bitJoyDown	equ 1
(1)   73/       0 : =$2                 bitJoyLeft	equ 2
(1)   74/       0 : =$3                 bitJoyRight	equ 3
(1)   75/       0 : =$4                 bitJoyB		equ 4
(1)   76/       0 : =$5                 bitJoyC		equ 5
(1)   77/       0 : =$6                 bitJoyA		equ 6
(1)   78/       0 : =$7                 bitJoyStart	equ 7
(1)   79/       0 :                     
(1)   80/       0 :                     ; left byte $xx00
(1)   81/       0 : =$0                 bitJoyZ		equ 0
(1)   82/       0 : =$1                 bitJoyY		equ 1
(1)   83/       0 : =$2                 bitJoyX		equ 2
(1)   84/       0 : =$3                 bitJoyMode	equ 3
(1)   85/       0 :                     
(1)   86/       0 :                     ; ====================================================================
(1)   87/       0 :                     ; --------------------------------------------------------
(1)   88/       0 :                     ; Settings
(1)   89/       0 :                     ; --------------------------------------------------------
(1)   90/       0 :                     
(1)   91/       0 : =$FFFF8800          MDRAM_START	equ $FFFF8800		; Start of working MD RAM (below it is free for CODE or decompression output)
(1)   92/       0 : =$800               MAX_MDERAM	equ $800		; MAX RAM for current screen mode (title,menu,or gameplay...)
(1)   93/       0 : =$7FF               varNullVram	equ $7FF		; Default Blank tile for some video routines
(1)   94/       0 :                     
(1)   95/       0 :                     ; ====================================================================
(1)   96/       0 :                     ; ----------------------------------------------------------------
(1)   97/       0 :                     ; Structures
(1)   98/       0 :                     ; ----------------------------------------------------------------
(1)   99/       0 :                     
(1)  100/       0 :                     ; Controller buffer data (after calling System_Input)
(1)  101/       0 : (MACRO)             		struct 0
(1)  101/       0 : =$0                 GLBL_LASTPC     set *
(1)  101/       0 :                                     dephase
(1)  101/       0 : =$0                 GLBL_LASTORG    set *
(1)  101/       0 :                                     phase 0
(1)  102/       0 :                     pad_id		ds.b 1			; Controller ID
(1)  103/       1 :                     pad_ver		ds.b 1			; Controller type/revision: (ex. 0-3button 1-6button)
(1)  104/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)  105/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)  106/       6 :                     sizeof_input	ds.l 0
(1)  107/       8 : (MACRO)             		finish
(1)  107/       0 :                                     !org GLBL_LASTORG
(1)  107/       0 :                                     phase GLBL_LASTPC
(1)  108/       0 :                     
(1)  109/       0 :                     ; ====================================================================
(1)  110/       0 :                     ; ----------------------------------------------------------------
(1)  111/       0 :                     ; System RAM
(1)  112/       0 :                     ; ----------------------------------------------------------------
(1)  113/       0 :                     
(1)  114/       0 : (MACRO)             		struct RAM_MdSystem
(1)  114/       0 : =$0                 GLBL_LASTPC     set *
(1)  114/       0 :                                     dephase
(1)  114/       0 : =$0                 GLBL_LASTORG    set *
(1)  114/FFFFFFFFFFFF91BA :                                     phase RAM_MDSYSTEM
(1)  115/FFFFFFFFFFFF91BA :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)  116/FFFFFFFFFFFF91D2 :                     RAM_SaveData	ds.b $200			; Save data cache (for SRAM)
(1)  117/FFFFFFFFFFFF93D2 :                     RAM_MdMarsTskM	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Queue task list for MASTER SH2
(1)  118/FFFFFFFFFFFF95D2 :                     RAM_MdMarsTskS	ds.l MAX_MDTSKARG*MAX_MDTASKS	; Queue task list for SLAVE SH2
(1)  119/FFFFFFFFFFFF97D2 :                     RAM_MdMarsTsSgl	ds.l MAX_MDTSKARG		; Single task request for 32X, shared for both Mst and Slv
(1)  120/FFFFFFFFFFFF97F2 :                     RAM_FrameCount	ds.l 1				; Global frame counter
(1)  121/FFFFFFFFFFFF97F6 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  122/FFFFFFFFFFFF97FA :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  123/FFFFFFFFFFFF97FE :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)  124/FFFFFFFFFFFF9802 :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  125/FFFFFFFFFFFF9808 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  126/FFFFFFFFFFFF980E :                     RAM_MdMarsTCntM	ds.w 1				; Counter for MASTER CPU's task list
(1)  127/FFFFFFFFFFFF9810 :                     RAM_MdMarsTCntS	ds.w 1				; Counter for SLAVE CPU's task list
(1)  128/FFFFFFFFFFFF9812 :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)  129/FFFFFFFFFFFF9814 :                     sizeof_mdsys	ds.l 0
(1)  130/FFFFFFFFFFFF9816 : (MACRO)             		finish
(1)  130/FFFFFFFFFFFF91BA :                                     !org GLBL_LASTORG
(1)  130/       0 :                                     phase GLBL_LASTPC
(1)  131/       0 :                     
(1)  132/       0 :                     ; ====================================================================
(1)  133/       0 :                     ; ----------------------------------------------------------------
(1)  134/       0 :                     ; Sound 68k RAM
(1)  135/       0 :                     ; ----------------------------------------------------------------
(1)  136/       0 :                     
(1)  137/       0 : (MACRO)             		struct RAM_MdSound
(1)  137/       0 : =$0                 GLBL_LASTPC     set *
(1)  137/       0 :                                     dephase
(1)  137/       0 : =$0                 GLBL_LASTORG    set *
(1)  137/FFFFFFFFFFFF9000 :                                     phase RAM_MDSOUND
(1)  138/FFFFFFFFFFFF9000 :                     RAM_SndSaveReg	ds.l 8
(1)  139/FFFFFFFFFFFF9020 :                     sizeof_mdsnd	ds.l 0
(1)  140/FFFFFFFFFFFF9020 : (MACRO)             		finish
(1)  140/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  140/       0 :                                     phase GLBL_LASTPC
(1)  141/       0 :                     		
(1)  142/       0 :                     ; ====================================================================
(1)  143/       0 :                     ; ----------------------------------------------------------------
(1)  144/       0 :                     ; Video RAM
(1)  145/       0 :                     ; ----------------------------------------------------------------
(1)  146/       0 :                     
(1)  147/       0 : (MACRO)             		struct RAM_MdVideo
(1)  147/       0 : =$0                 GLBL_LASTPC     set *
(1)  147/       0 :                                     dephase
(1)  147/       0 : =$0                 GLBL_LASTORG    set *
(1)  147/FFFFFFFFFFFF9020 :                                     phase RAM_MDVIDEO
(1)  148/FFFFFFFFFFFF9020 :                     RAM_VidPrntVram	ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  149/FFFFFFFFFFFF9022 :                     RAM_VidPrntList	ds.w 3*64		; Video_Print list: Address, Type
(1)  150/FFFFFFFFFFFF91A2 :                     RAM_VdpRegs	ds.b 24			; VDP Register cache
(1)  151/FFFFFFFFFFFF91BA :                     sizeof_mdvid	ds.l 0
(1)  152/FFFFFFFFFFFF91BC : (MACRO)             		finish
(1)  152/FFFFFFFFFFFF9020 :                                     !org GLBL_LASTORG
(1)  152/       0 :                                     phase GLBL_LASTPC
(1)  153/       0 :                     
(1)  154/       0 :                     ; ====================================================================
(1)  155/       0 :                     ; ----------------------------------------------------------------
(1)  156/       0 :                     ; MD RAM
(1)  157/       0 :                     ;
(1)  158/       0 :                     ; NOTE: If using MCD Uses $FFFD00-$FFFDFF, and
(1)  159/       0 :                     ; stack point is $FFFD00
(1)  160/       0 :                     ; ----------------------------------------------------------------
(1)  161/       0 :                     
(1)  162/       0 : (MACRO)             		struct MDRAM_START
(1)  162/       0 : =$0                 GLBL_LASTPC     set *
(1)  162/       0 :                                     dephase
(1)  162/       0 : =$0                 GLBL_LASTORG    set *
(1)  162/FFFFFFFFFFFF8800 :                                     phase MDRAM_START
(1)  171/FFFFFFFFFFFF8800 :                     RAM_ModeBuff	ds.b MAX_MDERAM			; Second pass: sizes are set
(1)  172/FFFFFFFFFFFF9000 :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  173/FFFFFFFFFFFF9020 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  174/FFFFFFFFFFFF91BA :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  175/FFFFFFFFFFFF9814 :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  176/FFFFFFFFFFFF883F :                     sizeof_mdram	ds.l 0
(1)  178/FFFFFFFFFFFF8840 :                     
MD RAM ends at: FF883F
(1)  180/FFFFFFFFFFFF8840 :                     		message "MD RAM ends at: \{((sizeof_mdram)&$FFFFFF)}"
(1)  182/FFFFFFFFFFFF8840 : (MACRO)             		finish
(1)  182/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)  182/       0 :                                     phase GLBL_LASTPC
(1)  183/       0 :                     
       8/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK 24bits, %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID String: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
       9/       0 :                     		include	"system/mars/map.asm"	; MARS map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer section
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; Cache-thru OR|value
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers, for MD: sysmars_reg
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer, first 240 are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite, $00-byte writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register
(1)   31/       0 : =$1                 intmask		equ	$01		; interrupts mask
(1)   32/       0 : =$2                 standby		equ	$02		; CMD interrupt request bit by MD side (slave|master)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports
(1)   45/       0 : =$22                comm2		equ	$22		; (If 2 CPUs either SH2 or 68K writes to
(1)   46/       0 : =$24                comm4		equ	$24		; the same location, it will freeze the
(1)   47/       0 : =$26                comm6		equ	$26		; system)
(1)   48/       0 : =$28                comm8		equ	$28		;
(1)   49/       0 : =$2A                comm10		equ	$2A		;
(1)   50/       0 : =$2C                comm12		equ	$2C		;
(1)   51/       0 : =$2E                comm14		equ	$2E		;
(1)   52/       0 : =$2F                comm15		equ	$2F		;
(1)   53/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   54/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   55/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   56/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   57/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   58/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   59/       0 :                     
(1)   60/       0 :                     ; _sysreg
(1)   61/       0 :                     ; adapter
(1)   62/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   63/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   64/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   65/       0 :                     ; framectl
(1)   66/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   67/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   68/       0 :                     ; vdpsts
(1)   69/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   70/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   71/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   72/       0 :                     ; intmask
(1)   73/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   74/       0 : =$4                 HIRQ_ON		equ	$04
(1)   75/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   76/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   77/       0 :                     
(1)   78/       0 :                     ; _vdpreg
(1)   79/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   80/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   81/       0 : =$2                 shift		equ	$02		; Shift Control register
(1)   82/       0 : =$5                 filllength	equ	$05		; Auto Fill Length register
(1)   83/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   84/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   85/       0 : =$A                 vdpsts		equ	$0a		; VDP Status register
(1)   86/       0 : =$B                 framectl	equ	$0b		; Frame Buffer Control register
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   90/       0 :                     ; --------------------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 :                     ; DMA Channel 0: General data transfer
(1)   93/       0 :                     ; DMA Channel 1: PWM exclusive
(1)   94/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)   95/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)   96/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)   97/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)   98/       0 : =$2                 _FRC_H		equ	$02		; free running counter High
(1)   99/       0 : =$3                 _FRC_L		equ	$03		; free running counter Low
(1)  100/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  101/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  102/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  103/       0 : =$7                 _TOCR		equ	$07		; timer output compare control register
(1)  104/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92
(1)  105/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  106/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or LOW Result if read
(1)  107/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result, HIGH
(1)  108/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result, LOW
(1)  109/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  110/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  111/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  112/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  113/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  114/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  115/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  116/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  117/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  118/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  119/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  120/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  121/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  122/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  123/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  124/       0 :                     
      10/       0 :                     		include	"system/head.asm"	; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; These labels still work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point (always $3F0)
(1)   10/       8 : 0000 0898           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0898           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0898           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0898           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0898           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0898           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0898           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0898           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0898           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0898           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0898           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0898           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0898           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0898           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0898           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0898           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0898           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0898           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0898           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0898           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0898           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0898           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0898           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0898           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0898           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0898           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF 9808           		dc.l RAM_MdMarsHInt		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 0898           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF 9802           		dc.l RAM_MdMarsVInt		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 0898           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0898           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0898           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0898           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0898           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0898           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0898           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0898           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0898           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0898           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0898           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0898           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0898           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0898           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0898           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2022.???"
                    3230 3232 2E3F 3F3F 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto MARSIANO                               "
                    204D 4152 5349 414E 
                    4F20 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO                                "
                    4D41 5253 4941 4E4F 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 0007 BB08           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ; 
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently
(1)   94/     200 :                     ; active.
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   98/     206 : 4EF9 0088 0898      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)   99/     20C : 4EF9 0088 0898      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  100/     212 : 4EF9 0088 0898      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  101/     218 : 4EF9 0088 0898      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  102/     21E : 4EF9 0088 0898      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  103/     224 : 4EF9 0088 0898      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  104/     22A : 4EF9 0088 0898      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  105/     230 : 4EF9 0088 0898      		jmp	($880000|MD_Trace).l			; Trace
(1)  106/     236 : 4EF9 0088 0898      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  107/     23C : 4EF9 0088 0898      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  108/     242 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  109/     248 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  110/     24E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  111/     254 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  112/     25A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l	
(1)  113/     260 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  114/     266 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  115/     26C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  116/     272 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  117/     278 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  118/     27E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  119/     284 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  120/     28A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l		
(1)  121/     290 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  122/     296 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     29C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2A2 : 4EF9 FFFF 9808      		jmp	(RAM_MdMarsHInt).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  125/     2A8 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2AE : 4EF9 FFFF 9802      		jmp	(RAM_MdMarsVInt).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  127/     2B4 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2BA : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2C0 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C6 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2CC : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2D2 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D8 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2DE : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2E4 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2EA : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2F0 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F6 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2FC : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     302 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     308 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     30E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     314 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     31A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     320 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     326 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     32C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     332 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     338 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     33E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     344 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     34A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     350 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     356 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     35C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     362 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     368 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     36E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     374 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     37A :                     
(1)  161/     37A :                     ; ----------------------------------------------------------------
(1)  162/     37A :                     
(1)  163/     37A :                     		align $3C0
(1)  164/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  165/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  166/     3D4 : 0004 3300           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  167/     3D8 : 0000 0000           		dc.l 0					; Zero.
(1)  168/     3DC : 0000 46F0           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  169/     3E0 : 0600 0BAC           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map area)
(1)  170/     3E4 : 0600 12B4           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map area)
(1)  171/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default vector table (vbr)
(1)  172/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default vector table (vbr)
(1)  173/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  174/     800 :                     
(1)  175/     800 :                     ; ====================================================================
(1)  176/     800 :                     ; ----------------------------------------------------------------
(1)  177/     800 :                     ; Entry point, this must be located at $3F0
(1)  178/     800 :                     ; 
(1)  179/     800 :                     ; After the 32X's internal initialization finishes,
(1)  180/     800 :                     ; It returns the following bits:
(1)  181/     800 :                     ; 
(1)  182/     800 :                     ; d0: %h0000000 rsc000ti
(1)  183/     800 :                     ; 	h - Cold start / Hot Start
(1)  184/     800 :                     ; 	r - SDRAM Self Check pass or error
(1)  185/     800 :                     ; 	s - Security check pass or error
(1)  186/     800 :                     ; 	c - Checksum pass or error
(1)  187/     800 :                     ; 	t - TV mode pass or error
(1)  188/     800 :                     ; 	i - MARS ID pass or error
(1)  189/     800 :                     ; 
(1)  190/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  191/     800 :                     ; 	m - MARS TV mode
(1)  192/     800 :                     ; 	j - Country: Japan / Overseas
(1)  193/     800 :                     ; 	d - MD TV mode
(1)  194/     800 :                     ; 	k - DISK connected: Yes / No
(1)  195/     800 :                     ; 	v - Version
(1)  196/     800 :                     ; 
(1)  197/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  198/     800 :                     ; 	cc: Test passed
(1)  199/     800 :                     ; 	cs: Test failed
(1)  200/     800 :                     ; ----------------------------------------------------------------
(1)  201/     800 :                     
(1)  202/     800 :                     MARS_Entry:
(1)  203/     800 : 657E                		bcs	.no_mars			; if Carry set, 32X is not present
(1)  204/     802 : 23FC 0000 0000 FFFF 		move.l	#0,(RAM_initflug).l		; Reset "INIT" flag
                    97FE                
(1)  205/     80C : 0800 000F           		btst	#15,d0				; Soft reset?	
(1)  206/     810 : 6700 0088           		beq	MD_Init
(1)  207/     814 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5		; a5 - MARS register
(1)  208/     81A : 0815 0000           		btst.b	#0,adapter(a5)			; 32X enabled?
(1)  209/     81E : 6652                		bne	.adapterenable			; If yes, start booting
(1)  210/     820 : 2B7C 0000 0000 0028 		move.l	#0,comm8(a5)			; If not, we can't use 32X or something went wrong
(1)  211/     828 : 41FA 0020           		lea	.ramcode(pc),a0			; Copy the adapter-retry code to RAM
(1)  212/     82C : 43F9 00FF 0000      		lea	($FF0000).l,a1			; and jump there.
(1)  213/     832 : 22D8                		move.l	(a0)+,(a1)+
(1)  214/     834 : 22D8                		move.l	(a0)+,(a1)+
(1)  215/     836 : 22D8                		move.l	(a0)+,(a1)+
(1)  216/     838 : 22D8                		move.l	(a0)+,(a1)+
(1)  217/     83A : 22D8                		move.l	(a0)+,(a1)+
(1)  218/     83C : 22D8                		move.l	(a0)+,(a1)+
(1)  219/     83E : 22D8                		move.l	(a0)+,(a1)+
(1)  220/     840 : 22D8                		move.l	(a0)+,(a1)+
(1)  221/     842 : 41F9 00FF 0000      		lea	($FF0000).l,a0
(1)  222/     848 : 4ED0                		jmp	(a0)
(1)  223/     84A :                     .ramcode:
(1)  224/     84A : 1ABC 0001           		move.b	#1,adapter(a5)			; Enable adapter.
(1)  225/     84E : 41FA 000A           		lea	.restarticd(pc),a0		; JUMP to the following code in
(1)  226/     852 : D1FC 0088 0000      		adda.l	#$880000,a0			; the new 68k location
(1)  227/     858 : 4ED0                		jmp	(a0)
(1)  228/     85A :                     .restarticd:
(1)  229/     85A : 4BF9 00A1 0000      		lea	($A10000).l,a5			; a5 - MD's I/O area base
(1)  230/     860 : 287C FFFF FFC0      		move.l	#-64,a4				; a4 - $FFFFFF9C
(1)  231/     866 : 3E3C 0F3C           		move.w	#3900,d7			; d7 - loop this many times
(1)  232/     86A : 43F9 0088 06E4      		lea	($880000+$6E4),a1		; Jump to ?res_wait (check ICD_MARS.PRG)
(1)  233/     870 : 4ED1                		jmp	(a1)
(1)  234/     872 :                     .adapterenable:
(1)  235/     872 : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  236/     878 : 0815 0001           		btst.b	#1,adapter(a5)			; SH2 Reset request?
(1)  237/     87C : 665A                		bne.s	MD_HotStart			; If not, we are on hotstart
(1)  238/     87E : 60DA                		bra.s	.restarticd
(1)  239/     880 :                     
(1)  240/     880 :                     ; ====================================================================
(1)  241/     880 :                     ; ----------------------------------------------------------------
(1)  242/     880 :                     ; If 32X is not detected...
(1)  243/     880 :                     ;
(1)  244/     880 :                     ; This only works in emulators, though.
(1)  245/     880 :                     ; ----------------------------------------------------------------
(1)  246/     880 :                     
(1)  247/     880 :                     .no_mars:
(1)  248/     880 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  249/     884 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  250/     88E : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l		; Write blue
(1)  251/     896 : 60FE                		bra.s	*				; Infinite loop.
(1)  252/     898 :                     
(1)  253/     898 :                     ; ====================================================================
(1)  254/     898 :                     ; ----------------------------------------------------------------
(1)  255/     898 :                     ; Error traps
(1)  256/     898 :                     ; ----------------------------------------------------------------
(1)  257/     898 :                     
(1)  258/     898 :                     MD_ErrBus:		; Bus error
(1)  259/     898 :                     MD_ErrAddr:		; Address error
(1)  260/     898 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  261/     898 :                     MD_ErrZDiv:		; Divide by 0
(1)  262/     898 :                     MD_ErrChk:		; CHK Instruction
(1)  263/     898 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  264/     898 :                     MD_ErrPrivl:		; Privilege violation
(1)  265/     898 :                     MD_Trace:		; Trace
(1)  266/     898 :                     MD_Line1010:		; Line 1010 Emulator
(1)  267/     898 :                     MD_Line1111:		; Line 1111 Emulator
(1)  268/     898 :                     MD_ErrorEx:		; Error exception
(1)  269/     898 :                     MD_ErrorTrap:
(1)  270/     898 : 4E73                		rte
(1)  271/     89A :                     
(1)  272/     89A :                     ; ------------------------------------------------
(1)  273/     89A :                     ; Init
(1)  274/     89A :                     ; ------------------------------------------------
(1)  275/     89A :                     
(1)  276/     89A :                     MD_Init:
(1)  277/     89A : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  278/     89E : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  279/     8A4 : 2B7C 3638 5550 002C 		move.l	#"68UP",comm12(a5)		; comm12: Report to SH2 that we are active.
(1)  280/     8AC : 0CAD 4D5F 4F4B 0020 .wm:		cmp.l	#"M_OK",comm0(a5)		; SH2 Master active?
(1)  281/     8B4 : 66F6                		bne.s	.wm
(1)  282/     8B6 : 0CAD 535F 4F4B 0024 .ws:		cmp.l	#"S_OK",comm4(a5)		; SH2 Slave active?
(1)  283/     8BE : 66F6                		bne.s	.ws
(1)  284/     8C0 : 7000                		moveq	#0,d0				; Reset comm values
(1)  285/     8C2 : 2B40 0020           		move.l	d0,comm0(a5)
(1)  286/     8C6 : 2B40 0024           		move.l	d0,comm4(a5)
(1)  287/     8CA : 2B40 002C           		move.l	d0,comm12(a5)
(1)  288/     8CE : 23FC 494E 4954 FFFF 		move.l	#"INIT",(RAM_initflug).l	; Set "INIT" as our boot flag
                    97FE                
(1)  289/     8D8 :                     MD_HotStart:
(1)  290/     8D8 : 0CB9 494E 4954 FFFF 		cmp.l	#"INIT",(RAM_initflug).l	; Did it write?
                    97FE                
(1)  291/     8E2 : 66B6                		bne.s	MD_Init				; If not, restart everything and try again.
(1)  292/     8E4 : 7000                		moveq	#0,d0				; Clear USP
(1)  293/     8E6 : 2C40                		movea.l	d0,a6
(1)  294/     8E8 : 4E66                		move.l	a6,usp
(1)  295/     8EA : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait a frame
(1)  296/     8F0 : 0800 0003           		btst	#bitVint,d0
(1)  297/     8F4 : 67F4                		beq.s	.waitframe
(1)  298/     8F6 : 23FC 8004 8144 00C0 		move.l	#$80048144,(vdp_ctrl).l		; Keep display
                    0004                
(1)  299/     900 : 41F9 00FF 0000      		lea	($FF0000),a0			; Clear RAM until $FFF000
(1)  300/     906 : 303C 3BFF           		move.w	#($F000/4)-1,d0
(1)  301/     90A :                     .clrram:
(1)  302/     90A : 4298                		clr.l	(a0)+
(1)  303/     90C : 51C8 FFFC           		dbf	d0,.clrram
(1)  304/     910 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Clear registers (using zeros from RAM)
(1)  305/     918 :                     
      11/     918 :                     
      12/     918 :                     ; ====================================================================
      13/     918 :                     ; ----------------------------------------------------------------
      14/     918 :                     ; Main boot code
      15/     918 :                     ; ----------------------------------------------------------------
      16/     918 :                     
      17/     918 : 41FA 001E           		lea	MdRamCode(pc),a0
      18/     91C : 43F9 00FF 0000      		lea	($FF0000),a1
      19/     922 : 303C 1BE7           		move.w	#((MdRamCode_end-MdRamCode))-1,d0
      20/     926 :                     .copyme:
      21/     926 : 12D8                		move.b	(a0)+,(a1)+
      22/     928 : 51C8 FFFC           		dbf	d0,.copyme
      23/     92C : 203C 0002 F320      		move.l	#RamCode_Default,d0
      24/     932 : 4EF9 00FF 1B9A      		jmp	(System_JumpRamCode).l
      25/     938 :                     
      26/     938 :                     ; --------------------------------------------------------
      27/     938 :                     ; Top-common code stored on RAM
      28/     938 :                     ; --------------------------------------------------------
      29/     938 :                     
      30/     938 :                     MdRamCode:
      31/  FF0000 :                     		phase $FF0000
      32/  FF0000 :                     minfo_ram_s:
      33/  FF0000 :                     		include	"system/md/sound.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; ----------------------------------------------------------------
(1)    3/  FF0000 :                     ; MD Sound
(1)    4/  FF0000 :                     ; ----------------------------------------------------------------
(1)    5/  FF0000 :                     
(1)    6/  FF0000 :                     ; --------------------------------------------------------
(1)    7/  FF0000 :                     ; Init Sound
(1)    8/  FF0000 :                     ;
(1)    9/  FF0000 :                     ; Uses:
(1)   10/  FF0000 :                     ; a0-a1,d0-d1
(1)   11/  FF0000 :                     ; --------------------------------------------------------
(1)   12/  FF0000 :                     
(1)   13/  FF0000 :                     		align $80				; (GENS emulator only)
(1)   14/  FF0048 :                     Sound_Init:
(1)   15/  FF0048 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   16/  FF0050 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   17/  FF0058 :                     .wait:
(1)   18/  FF0058 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   19/  FF0060 : 66F6                		bne.s	.wait
(1)   20/  FF0062 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0
(1)   21/  FF0068 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   22/  FF006C : 7200                		moveq	#0,d1
(1)   23/  FF006E :                     .cleanup:
(1)   24/  FF006E : 10C1                		move.b	d1,(a0)+
(1)   25/  FF0070 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   26/  FF0074 : 41F9 0088 2520      		lea	(Z80_CODE|$880000).l,a0		; a0 - Z80 code (on $880000 area)
(1)   27/  FF007A : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 area
(1)   28/  FF0080 : 303C 1FFF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   29/  FF0084 :                     .copy:
(1)   30/  FF0084 : 12D8                		move.b	(a0)+,(a1)+
(1)   31/  FF0086 : 51C8 FFFC           		dbf	d0,.copy
(1)   32/  FF008A : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset
(1)   33/  FF0092 : 4E71                		nop
(1)   34/  FF0094 : 4E71                		nop
(1)   35/  FF0096 : 4E71                		nop
(1)   36/  FF0098 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   37/  FF00A0 : 4E75                		rts
(1)   38/  FF00A2 :                     
(1)   39/  FF00A2 :                     ; ====================================================================
(1)   40/  FF00A2 :                     ; ----------------------------------------------------------------
(1)   41/  FF00A2 :                     ; Subroutines
(1)   42/  FF00A2 :                     ; ----------------------------------------------------------------
(1)   43/  FF00A2 :                     
(1)   44/  FF00A2 :                     ; ------------------------------------------------
(1)   45/  FF00A2 :                     ; Lock Z80, get bus
(1)   46/  FF00A2 :                     ; ------------------------------------------------
(1)   47/  FF00A2 :                     
(1)   48/  FF00A2 :                     sndLockZ80:
(1)   49/  FF00A2 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   50/  FF00AA :                     .wait:
(1)   51/  FF00AA : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for it
(1)   52/  FF00B2 : 66F6                		bne.s	.wait
(1)   53/  FF00B4 : 4E75                		rts
(1)   54/  FF00B6 :                     
(1)   55/  FF00B6 :                     ; ------------------------------------------------
(1)   56/  FF00B6 :                     ; Unlock Z80, return bus
(1)   57/  FF00B6 :                     ; ------------------------------------------------
(1)   58/  FF00B6 :                     
(1)   59/  FF00B6 :                     sndUnlockZ80:
(1)   60/  FF00B6 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   61/  FF00BE : 4E75                		rts
(1)   62/  FF00C0 :                     
(1)   63/  FF00C0 :                     ; ------------------------------------------------
(1)   64/  FF00C0 :                     ; 68k-to-z80 Sound request
(1)   65/  FF00C0 :                     ; enter/exit routines
(1)   66/  FF00C0 :                     ;
(1)   67/  FF00C0 :                     ; d6 - commFifo index
(1)   68/  FF00C0 :                     ; ------------------------------------------------
(1)   69/  FF00C0 :                     
(1)   70/  FF00C0 :                     sndReq_Enter:
(1)   71/  FF00C0 : 48F9 60C0 FFFF 9000 		movem.l	d6-d7/a5-a6,(RAM_SndSaveReg).l
(1)   72/  FF00C8 : 7C00                		moveq	#0,d6
(1)   73/  FF00CA : 40C6                		move.w	sr,d6
(1)   74/  FF00CC : 4846                		swap	d6
(1)   75/  FF00CE : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Stop Z80
(1)   76/  FF00D6 : 007C 0700           		or.w	#$0700,sr			; disable ints
(1)   77/  FF00DA : 4BF9 00A0 001F      		lea	(z80_cpu+commZWrite),a5		; a5 - commZWrite
(1)   78/  FF00E0 : 4DF9 00A0 1920      		lea	(z80_cpu+commZfifo),a6		; a6 - fifo command list
(1)   79/  FF00E6 :                     .wait:
(1)   80/  FF00E6 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)   81/  FF00EE : 66F6                		bne.s	.wait
(1)   82/  FF00F0 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)   83/  FF00F2 : 4886                		ext.w	d6				; extend to 16 bits
(1)   84/  FF00F4 : 4E75                		rts
(1)   85/  FF00F6 :                     ; JUMP ONLY
(1)   86/  FF00F6 :                     sndReq_Exit:
(1)   87/  FF00F6 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   88/  FF00FE : 4846                		swap	d6
(1)   89/  FF0100 : 46C6                		move.w	d6,sr
(1)   90/  FF0102 : 4CF9 60C0 FFFF 9000 		movem.l	(RAM_SndSaveReg).l,d6-d7/a5-a6
(1)   91/  FF010A : 4E75                		rts
(1)   92/  FF010C :                     
(1)   93/  FF010C :                     ; ------------------------------------------------
(1)   94/  FF010C :                     ; Send request id and arguments
(1)   95/  FF010C :                     ;
(1)   96/  FF010C :                     ; Input:
(1)   97/  FF010C :                     ; d7 - byte to write
(1)   98/  FF010C :                     ; d6 - index pointer
(1)   99/  FF010C :                     ; a5 - commZWrite, update index
(1)  100/  FF010C :                     ; a6 - commZfifo command list
(1)  101/  FF010C :                     ;
(1)  102/  FF010C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  103/  FF010C :                     ; ------------------------------------------------
(1)  104/  FF010C :                     
(1)  105/  FF010C :                     sndReq_scmd:
(1)  106/  FF010C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  107/  FF0112 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  108/  FF0114 : 0206 003F           		andi.b	#$3F,d6
(1)  109/  FF0118 : 600C                		bra.s	sndReq_sbyte
(1)  110/  FF011A :                     sndReq_slong:
(1)  111/  FF011A : 610A                		bsr	sndReq_sbyte
(1)  112/  FF011C : E09F                		ror.l	#8,d7
(1)  113/  FF011E :                     sndReq_saddr:
(1)  114/  FF011E : 6106                		bsr	sndReq_sbyte
(1)  115/  FF0120 : E09F                		ror.l	#8,d7
(1)  116/  FF0122 :                     sndReq_sword:
(1)  117/  FF0122 : 6102                		bsr	sndReq_sbyte
(1)  118/  FF0124 : E09F                		ror.l	#8,d7
(1)  119/  FF0126 :                     sndReq_sbyte:
(1)  120/  FF0126 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  121/  FF012A : 5206                		addq.b	#1,d6				; next fifo pos
(1)  122/  FF012C : 0206 003F           		andi.b	#$3F,d6
(1)  123/  FF0130 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  124/  FF0132 : 4E75                		rts
(1)  125/  FF0134 :                     
(1)  126/  FF0134 :                     ; --------------------------------------------------------
(1)  127/  FF0134 :                     ; Sound_DMA_Pause
(1)  128/  FF0134 :                     ;
(1)  129/  FF0134 :                     ; Call this BEFORE doing any DMA task
(1)  130/  FF0134 :                     ; --------------------------------------------------------
(1)  131/  FF0134 :                     
(1)  132/  FF0134 :                     Sound_DMA_Pause:
(1)  133/  FF0134 :                     
(1)  134/  FF0134 :                     .retry:
(1)  135/  FF0134 : 6100 FF6C           		bsr	sndLockZ80
(1)  136/  FF0138 : 1E39 00A0 001D      		move.b	(z80_cpu+commZRomRd),d7		; Get mid-read bit
(1)  137/  FF013E : 6100 FF76           		bsr	sndUnlockZ80
(1)  138/  FF0142 : 4A07                		tst.b	d7
(1)  139/  FF0144 : 6708                		beq.s	.safe
(1)  140/  FF0146 : 7E44                		moveq	#68,d7
(1)  141/  FF0148 : 51CF FFFE           		dbf	d7,*
(1)  142/  FF014C : 60E6                		bra.s	.retry
(1)  143/  FF014E :                     .safe:
(1)  144/  FF014E : 6100 FF52           		bsr	sndLockZ80
(1)  145/  FF0152 : 13FC 0001 00A0 001C 		move.b	#1,(z80_cpu+commZRomBlk)	; Block flag for Z80
(1)  146/  FF015A : 6100 FF5A           		bsr	sndUnlockZ80
(1)  147/  FF015E :                     .wait_z80:
(1)  148/  FF015E : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7		; Wait for
(1)  149/  FF0164 : CE7C 00D0           		and.w	#%11010000,d7			; BUSY/CLOCK
(1)  150/  FF0168 : 66F4                		bne.s	.wait_z80
(1)  151/  FF016A : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7		; Request PWM Backup
(1)  152/  FF0170 : 08C7 0005           		bset	#5,d7
(1)  153/  FF0174 : 13C7 00A1 512F      		move.b	d7,(sysmars_reg+comm15)
(1)  154/  FF017A : 4E71                		nop
(1)  155/  FF017C : 4E71                		nop
(1)  156/  FF017E : 1E39 00A1 512F      .wait_mars:	move.b	(sysmars_reg+comm15),d7		; Wait for BUSY/CLOCK and
(1)  157/  FF0184 : CE7C 00E0           		and.w	#%11100000,d7			; BACKUP
(1)  158/  FF0188 : 66F4                		bne.s	.wait_mars
(1)  159/  FF018A : 4E75                		rts
(1)  160/  FF018C :                     
(1)  161/  FF018C :                     ; --------------------------------------------------------
(1)  162/  FF018C :                     ; Sound_DMA_Resume
(1)  163/  FF018C :                     ;
(1)  164/  FF018C :                     ; Call this AFTER finishing DMA
(1)  165/  FF018C :                     ; --------------------------------------------------------
(1)  166/  FF018C :                     
(1)  167/  FF018C :                     Sound_DMA_Resume:
(1)  168/  FF018C : 6100 FF14           		bsr	sndLockZ80
(1)  169/  FF0190 : 13FC 0000 00A0 001C 		move.b	#0,(z80_cpu+commZRomBlk)
(1)  170/  FF0198 : 6100 FF1C           		bsr	sndUnlockZ80
(1)  171/  FF019C : 1E39 00A1 512F      .wait_z80:	move.b	(sysmars_reg+comm15),d7		; Wait for BUSY/CLOCK/BACKUP
(1)  172/  FF01A2 : CE7C 00E0           		and.w	#%11100000,d7
(1)  173/  FF01A6 : 66F4                		bne.s	.wait_z80
(1)  174/  FF01A8 : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7		; Request PWM Restore
(1)  175/  FF01AE : 08C7 0004           		bset	#4,d7
(1)  176/  FF01B2 : 13C7 00A1 512F      		move.b	d7,(sysmars_reg+comm15)
(1)  177/  FF01B8 : 4E71                		nop
(1)  178/  FF01BA : 4E71                		nop
(1)  179/  FF01BC : 1E39 00A1 512F      .wait_mars:	move.b	(sysmars_reg+comm15),d7		; Wait for BUSY/CLOCK and
(1)  180/  FF01C2 : CE7C 00D0           		and.w	#%11010000,d7			; RESTORE
(1)  181/  FF01C6 : 66F4                		bne.s	.wait_mars
(1)  182/  FF01C8 : 4E75                		rts
(1)  183/  FF01CA :                     
(1)  184/  FF01CA :                     ; --------------------------------------------------------
(1)  185/  FF01CA :                     ; SoundReq_SetTrack
(1)  186/  FF01CA :                     ;
(1)  187/  FF01CA :                     ; a0:
(1)  188/  FF01CA :                     ;  dc.l pattern_data
(1)  189/  FF01CA :                     ;  dc.l block_data
(1)  190/  FF01CA :                     ;  dc.l instrument_data
(1)  191/  FF01CA :                     ;
(1)  192/  FF01CA :                     ; d0 - Slot
(1)  193/  FF01CA :                     ; d1 - Ticks
(1)  194/  FF01CA :                     ; d2 - From block
(1)  195/  FF01CA :                     ; d3 - Flags: %00004321
(1)  196/  FF01CA :                     ; 	1234 - Use global tempos 1,2,3 or 4
(1)  197/  FF01CA :                     ; --------------------------------------------------------
(1)  198/  FF01CA :                     
(1)  199/  FF01CA :                     Sound_TrkPlay:
(1)  200/  FF01CA : 6100 FEF4           		bsr	sndReq_Enter
(1)  201/  FF01CE : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  202/  FF01D2 : 6100 FF38           		bsr	sndReq_scmd
(1)  203/  FF01D6 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  204/  FF01D8 : 6100 FF4C           		bsr	sndReq_sbyte
(1)  205/  FF01DC : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  206/  FF01DE : 6100 FF46           		bsr	sndReq_sbyte
(1)  207/  FF01E2 : 1E02                		move.b	d2,d7		; d2 - Start block
(1)  208/  FF01E4 : 6100 FF40           		bsr	sndReq_sbyte
(1)  209/  FF01E8 : 1E03                		move.b	d3,d7		; d3 - Flags
(1)  210/  FF01EA : 6100 FF3A           		bsr	sndReq_sbyte
(1)  211/  FF01EE : 2E18                		move.l	(a0)+,d7	; Patt data point
(1)  212/  FF01F0 : 6100 FF2C           		bsr	sndReq_saddr
(1)  213/  FF01F4 : 2E18                		move.l	(a0)+,d7	; Block data point
(1)  214/  FF01F6 : 6100 FF26           		bsr	sndReq_saddr
(1)  215/  FF01FA : 2E18                		move.l	(a0)+,d7	; Intrument data
(1)  216/  FF01FC : 6100 FF20           		bsr	sndReq_saddr
(1)  217/  FF0200 : 6000 FEF4           		bra 	sndReq_Exit
(1)  218/  FF0204 :                     
(1)  219/  FF0204 :                     ; --------------------------------------------------------
(1)  220/  FF0204 :                     ; SoundReq_StopTrack
(1)  221/  FF0204 :                     ;
(1)  222/  FF0204 :                     ; d0 - Slot
(1)  223/  FF0204 :                     ; --------------------------------------------------------
(1)  224/  FF0204 :                     
(1)  225/  FF0204 :                     Sound_TrkStop:
(1)  226/  FF0204 : 6100 FEBA           		bsr	sndReq_Enter
(1)  227/  FF0208 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  228/  FF020C : 6100 FEFE           		bsr	sndReq_scmd
(1)  229/  FF0210 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  230/  FF0212 : 6100 FF12           		bsr	sndReq_sbyte
(1)  231/  FF0216 : 6000 FEDE           		bra 	sndReq_Exit
(1)  232/  FF021A :                     
(1)  233/  FF021A :                     ; --------------------------------------------------------
(1)  234/  FF021A :                     ; Sound_TrkPause
(1)  235/  FF021A :                     ;
(1)  236/  FF021A :                     ; d0 - Slot
(1)  237/  FF021A :                     ; --------------------------------------------------------
(1)  238/  FF021A :                     
(1)  239/  FF021A :                     Sound_TrkPause:
(1)  240/  FF021A : 6100 FEA4           		bsr	sndReq_Enter
(1)  241/  FF021E : 3E3C 0002           		move.w	#$02,d7		; Command $01
(1)  242/  FF0222 : 6100 FEE8           		bsr	sndReq_scmd
(1)  243/  FF0226 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  244/  FF0228 : 6100 FEFC           		bsr	sndReq_sbyte
(1)  245/  FF022C : 6000 FEC8           		bra 	sndReq_Exit
(1)  246/  FF0230 :                     
(1)  247/  FF0230 :                     ; --------------------------------------------------------
(1)  248/  FF0230 :                     ; Sound_TrkResume
(1)  249/  FF0230 :                     ;
(1)  250/  FF0230 :                     ; d0 - Slot
(1)  251/  FF0230 :                     ; --------------------------------------------------------
(1)  252/  FF0230 :                     
(1)  253/  FF0230 :                     Sound_TrkResume:
(1)  254/  FF0230 : 6100 FE8E           		bsr	sndReq_Enter
(1)  255/  FF0234 : 3E3C 0003           		move.w	#$03,d7		; Command $01
(1)  256/  FF0238 : 6100 FED2           		bsr	sndReq_scmd
(1)  257/  FF023C : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  258/  FF023E : 6100 FEE6           		bsr	sndReq_sbyte
(1)  259/  FF0242 : 6000 FEB2           		bra 	sndReq_Exit
(1)  260/  FF0246 :                     
(1)  261/  FF0246 :                     ; --------------------------------------------------------
(1)  262/  FF0246 :                     ; Sound_TrkTicks
(1)  263/  FF0246 :                     ;
(1)  264/  FF0246 :                     ; d0 - Slot
(1)  265/  FF0246 :                     ; d1 - Ticks
(1)  266/  FF0246 :                     ; --------------------------------------------------------
(1)  267/  FF0246 :                     
(1)  268/  FF0246 :                     Sound_TrkTicks:
(1)  269/  FF0246 : 6100 FE78           		bsr	sndReq_Enter
(1)  270/  FF024A : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  271/  FF024E : 6100 FEBC           		bsr	sndReq_scmd
(1)  272/  FF0252 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  273/  FF0254 : 6100 FED0           		bsr	sndReq_sbyte
(1)  274/  FF0258 : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  275/  FF025A : 6100 FECA           		bsr	sndReq_sbyte
(1)  276/  FF025E : 6000 FE96           		bra 	sndReq_Exit
(1)  277/  FF0262 :                     
(1)  278/  FF0262 :                     ; --------------------------------------------------------
(1)  279/  FF0262 :                     ; Sound_GlbTempo
(1)  280/  FF0262 :                     ;
(1)  281/  FF0262 :                     ; d0 - Slot
(1)  282/  FF0262 :                     ; d1 - Tempo (WORD)
(1)  283/  FF0262 :                     ; --------------------------------------------------------
(1)  284/  FF0262 :                     
(1)  285/  FF0262 :                     Sound_GlbTempo:
(1)  286/  FF0262 : 6100 FE5C           		bsr	sndReq_Enter
(1)  287/  FF0266 : 3E3C 0010           		move.w	#$10,d7		; Command $10
(1)  288/  FF026A : 6100 FEA0           		bsr	sndReq_scmd
(1)  289/  FF026E : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  290/  FF0270 : 6100 FEB4           		bsr	sndReq_sbyte
(1)  291/  FF0274 : 3E01                		move.w	d1,d7		; d1 - Tempo MSB
(1)  292/  FF0276 : 6100 FEAA           		bsr	sndReq_sword
(1)  293/  FF027A : 6000 FE7A           		bra 	sndReq_Exit
(1)  294/  FF027E :                     
      34/  FF027E :                     		include	"system/md/video.asm"
(1)    1/  FF027E :                     ; ====================================================================
(1)    2/  FF027E :                     ; ----------------------------------------------------------------
(1)    3/  FF027E :                     ; MD Video
(1)    4/  FF027E :                     ; ----------------------------------------------------------------
(1)    5/  FF027E :                     
(1)    6/  FF027E :                     ; --------------------------------------------------------
(1)    7/  FF027E :                     ; Init Video
(1)    8/  FF027E :                     ; 
(1)    9/  FF027E :                     ; Uses:
(1)   10/  FF027E :                     ; a0-a2,d0-d1
(1)   11/  FF027E :                     ; --------------------------------------------------------
(1)   12/  FF027E :                     
(1)   13/  FF027E :                     Video_Init:		
(1)   14/  FF027E : 41F8 9020           		lea	(RAM_MdVideo),a0	; Clear RAM
(1)   15/  FF0282 : 7000                		moveq	#0,d0
(1)   16/  FF0284 : 323C 0199           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d1
(1)   17/  FF0288 :                     .clrram:
(1)   18/  FF0288 : 10C0                		move.b	d0,(a0)+
(1)   19/  FF028A : 51C9 FFFC           		dbf	d1,.clrram
(1)   20/  FF028E :                     
(1)   21/  FF028E : 41FA 0580           		lea	list_vdpregs(pc),a0	; Init registers
(1)   22/  FF0292 : 43F8 91A2           		lea	(RAM_VdpRegs).w,a1
(1)   23/  FF0296 : 45F9 00C0 0004      		lea	(vdp_ctrl),a2
(1)   24/  FF029C : 303C 8000           		move.w	#$8000,d0
(1)   25/  FF02A0 : 323C 0012           		move.w	#19-1,d1
(1)   26/  FF02A4 :                     .loop:
(1)   27/  FF02A4 : 1018                		move.b	(a0)+,d0
(1)   28/  FF02A6 : 12C0                		move.b	d0,(a1)+
(1)   29/  FF02A8 : 3480                		move.w	d0,(a2)
(1)   30/  FF02AA : D07C 0100           		add.w	#$100,d0
(1)   31/  FF02AE : 51C9 FFF4           		dbf	d1,.loop
(1)   32/  FF02B2 :                     .exit:
(1)   33/  FF02B2 : 4E75                		rts
(1)   34/  FF02B4 :                     
(1)   35/  FF02B4 :                     ; ====================================================================
(1)   36/  FF02B4 :                     ; ----------------------------------------------------------------
(1)   37/  FF02B4 :                     ; Video subroutines
(1)   38/  FF02B4 :                     ; ----------------------------------------------------------------
(1)   39/  FF02B4 :                     
(1)   40/  FF02B4 :                     ; --------------------------------------------------------
(1)   41/  FF02B4 :                     ; Video_Clear
(1)   42/  FF02B4 :                     ; 
(1)   43/  FF02B4 :                     ; Clear all video data
(1)   44/  FF02B4 :                     ; --------------------------------------------------------
(1)   45/  FF02B4 :                     
(1)   46/  FF02B4 :                     Video_Clear:
(1)   47/  FF02B4 : 303C 0000           		move.w	#0,d0			; Clear until $57F
(1)   48/  FF02B8 : 323C AFE0           		move.w	#$57F*$20,d1
(1)   49/  FF02BC : 343C 0000           		move.w	#0,d2
(1)   50/  FF02C0 : 6100 038C           		bsr	Video_Fill
(1)   51/  FF02C4 : 323C 0FFF           		move.w	#$FFF,d1		; FG/BG size
(1)   52/  FF02C8 : 1439 FFFF 91A4      		move.b	(RAM_VdpRegs+2).l,d2	; FG
(1)   53/  FF02CE : 0242 0038           		andi.w	#%111000,d2
(1)   54/  FF02D2 : E14A                		lsl.w	#8,d2
(1)   55/  FF02D4 : E54A                		lsl.w	#2,d2
(1)   56/  FF02D6 : 6100 0376           		bsr	Video_Fill
(1)   57/  FF02DA : 1439 FFFF 91A5      		move.b	(RAM_VdpRegs+3).l,d2	; BG
(1)   58/  FF02E0 : 0242 0007           		andi.w	#%000111,d2
(1)   59/  FF02E4 : E14A                		lsl.w	#8,d2
(1)   60/  FF02E6 : EB4A                		lsl.w	#5,d2
(1)   61/  FF02E8 : 6100 0364           		bsr	Video_Fill	
(1)   62/  FF02EC : 323C 0FFF           		move.w	#$FFF,d1		; WD Size
(1)   63/  FF02F0 : 1439 FFFF 91A6      		move.b	(RAM_VdpRegs+4).l,d2	; Window
(1)   64/  FF02F6 : 0242 003E           		andi.w	#%111110,d2
(1)   65/  FF02FA : E14A                		lsl.w	#8,d2
(1)   66/  FF02FC : E54A                		lsl.w	#2,d2
(1)   67/  FF02FE : 6000 034E           		bra	Video_Fill
(1)   68/  FF0302 :                     		
(1)   69/  FF0302 :                     ; ---------------------------------
(1)   70/  FF0302 :                     ; Video_Update
(1)   71/  FF0302 :                     ; 
(1)   72/  FF0302 :                     ; Copy our RAM reg settings to
(1)   73/  FF0302 :                     ; VDP from $80 to $90
(1)   74/  FF0302 :                     ; 
(1)   75/  FF0302 :                     ; Uses:
(1)   76/  FF0302 :                     ; d4-d5,a4-a5
(1)   77/  FF0302 :                     ; ---------------------------------
(1)   78/  FF0302 :                     
(1)   79/  FF0302 :                     Video_Update:
(1)   80/  FF0302 : 49F8 91A2           		lea	(RAM_VdpRegs).w,a4
(1)   81/  FF0306 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)   82/  FF030C : 383C 8000           		move.w	#$8000,d4
(1)   83/  FF0310 : 3A3C 0010           		move.w	#17-1,d5
(1)   84/  FF0314 :                     .loop:
(1)   85/  FF0314 : 181C                		move.b	(a4)+,d4
(1)   86/  FF0316 : 3A84                		move.w	d4,(a5)
(1)   87/  FF0318 : D87C 0100           		add.w	#$100,d4
(1)   88/  FF031C : 51CD FFF6           		dbf	d5,.loop
(1)   89/  FF0320 :                     .exit:
(1)   90/  FF0320 : 4E75                		rts
(1)   91/  FF0322 :                     		
(1)   92/  FF0322 :                     ; --------------------------------------------------------
(1)   93/  FF0322 :                     ; Video_LoadPal
(1)   94/  FF0322 :                     ; Load palette to VDP directly, waits VBLANK
(1)   95/  FF0322 :                     ; 
(1)   96/  FF0322 :                     ; Input:
(1)   97/  FF0322 :                     ; a0 - Palette data
(1)   98/  FF0322 :                     ; d0 - Start at
(1)   99/  FF0322 :                     ; d1 - Num of colors - 1
(1)  100/  FF0322 :                     ; 
(1)  101/  FF0322 :                     ; Uses:
(1)  102/  FF0322 :                     ; a4,d4
(1)  103/  FF0322 :                     ; 
(1)  104/  FF0322 :                     ; Note:
(1)  105/  FF0322 :                     ; It will show dots on screen
(1)  106/  FF0322 :                     ; --------------------------------------------------------
(1)  107/  FF0322 :                     
(1)  108/  FF0322 :                     Video_LoadPal:
(1)  109/  FF0322 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  110/  FF0328 : 7800                		moveq	#0,d4
(1)  111/  FF032A : 3800                		move.w	d0,d4
(1)  112/  FF032C : D844                		add.w	d4,d4
(1)  113/  FF032E : 0044 C000           		ori.w	#$C000,d4
(1)  114/  FF0332 : 4844                		swap	d4
(1)  115/  FF0334 : 2944 0004           		move.l	d4,4(a4)
(1)  116/  FF0338 : 3801                		move.w	d1,d4
(1)  117/  FF033A : 3A2C 0004           .outv: 		move.w	4(a4),d5
(1)  118/  FF033E : 0805 0003           		btst	#bitVint,d5
(1)  119/  FF0342 : 67F6                		beq.s	.outv
(1)  120/  FF0344 :                     .loop:
(1)  121/  FF0344 : 3898                		move.w	(a0)+,(a4)
(1)  122/  FF0346 : 51CC FFFC           		dbf	d4,.loop
(1)  123/  FF034A : 4E75                		rts
(1)  124/  FF034C :                     		
(1)  125/  FF034C :                     ; --------------------------------------------------------
(1)  126/  FF034C :                     ; Video_LoadMap
(1)  127/  FF034C :                     ; 
(1)  128/  FF034C :                     ; Load map data, Horizontal order
(1)  129/  FF034C :                     ; 
(1)  130/  FF034C :                     ; a0 - Map data
(1)  131/  FF034C :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)  
(1)  132/  FF034C :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  133/  FF034C :                     ; d2 | WORD - VRAM
(1)  134/  FF034C :                     
(1)  135/  FF034C :                     ; Uses:
(1)  136/  FF034C :                     ; a4-a5,d4-d7
(1)  137/  FF034C :                     ; --------------------------------------------------------
(1)  138/  FF034C :                     
(1)  139/  FF034C :                     Video_LoadMap:
(1)  140/  FF034C : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  141/  FF0352 : 6100 025E           		bsr	vid_PickLayer
(1)  142/  FF0356 : 3A01                		move.w	d1,d5		; Start here
(1)  143/  FF0358 :                     .yloop:
(1)  144/  FF0358 : 4845                		swap	d5
(1)  145/  FF035A : 2944 0004           		move.l	d4,4(a4)
(1)  146/  FF035E : 2E01                		move.l	d1,d7
(1)  147/  FF0360 : 4847                		swap	d7
(1)  148/  FF0362 :                     .xloop:
(1)  149/  FF0362 : 3A18                		move.w	(a0)+,d5
(1)  150/  FF0364 : BA7C FFFF           		cmp.w	#-1,d5
(1)  151/  FF0368 : 6606                		bne.s	.nonull
(1)  152/  FF036A : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  153/  FF036E : 6002                		bra.s	.cont
(1)  154/  FF0370 :                     .nonull:
(1)  155/  FF0370 : DA42                		add.w	d2,d5
(1)  156/  FF0372 :                     .cont:
(1)  157/  FF0372 : 4847                		swap	d7
(1)  158/  FF0374 : 1E39 FFFF 91AE      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  159/  FF037A : CE7C 0006           		and.w	#%110,d7
(1)  160/  FF037E : BE7C 0006           		cmp.w	#%110,d7
(1)  161/  FF0382 : 660E                		bne.s	.nodble
(1)  162/  FF0384 : 3E05                		move.w	d5,d7
(1)  163/  FF0386 : E24F                		lsr.w	#1,d7
(1)  164/  FF0388 : CE7C 07FF           		and.w	#$7FF,d7
(1)  165/  FF038C : CA7C F800           		and.w	#$F800,d5
(1)  166/  FF0390 : 8A47                		or.w	d7,d5
(1)  167/  FF0392 :                     .nodble:
(1)  168/  FF0392 : 4847                		swap	d7
(1)  169/  FF0394 : 3885                		move.w	d5,(a4)
(1)  170/  FF0396 : 51CF FFCA           		dbf	d7,.xloop
(1)  171/  FF039A : D886                		add.l	d6,d4
(1)  172/  FF039C : 4845                		swap	d5
(1)  173/  FF039E : 51CD FFB8           		dbf	d5,.yloop
(1)  174/  FF03A2 : 4E75                		rts
(1)  175/  FF03A4 :                     
(1)  176/  FF03A4 :                     ; --------------------------------------------------------
(1)  177/  FF03A4 :                     ; Video_LoadMap_Vert
(1)  178/  FF03A4 :                     ; 
(1)  179/  FF03A4 :                     ; Load map data, Vertical order
(1)  180/  FF03A4 :                     ; 
(1)  181/  FF03A4 :                     ; a0 - Map data
(1)  182/  FF03A4 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  183/  FF03A4 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  184/  FF03A4 :                     ; d2 | WORD - VRAM
(1)  185/  FF03A4 :                     
(1)  186/  FF03A4 :                     ; Uses:
(1)  187/  FF03A4 :                     ; a4-a5,d4-d7
(1)  188/  FF03A4 :                     ; --------------------------------------------------------
(1)  189/  FF03A4 :                     
(1)  190/  FF03A4 :                     Video_LoadMap_Vert:
(1)  191/  FF03A4 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  192/  FF03AA : 6100 0206           		bsr	vid_PickLayer
(1)  193/  FF03AE : 2A01                		move.l	d1,d5		; Start here
(1)  194/  FF03B0 : 4845                		swap	d5
(1)  195/  FF03B2 :                     .xloop:
(1)  196/  FF03B2 : 4845                		swap	d5
(1)  197/  FF03B4 : 2F04                		move.l	d4,-(sp)
(1)  198/  FF03B6 : 3E01                		move.w	d1,d7
(1)  199/  FF03B8 : 0839 0002 FFFF 91AE 		btst	#2,(RAM_VdpRegs+$C).l
(1)  200/  FF03C0 : 6702                		beq.s	.yloop
(1)  201/  FF03C2 : E24F                		lsr.w	#1,d7
(1)  202/  FF03C4 :                     .yloop:
(1)  203/  FF03C4 : 2944 0004           		move.l	d4,4(a4)
(1)  204/  FF03C8 : 3A10                		move.w	(a0),d5
(1)  205/  FF03CA : BA7C FFFF           		cmp.w	#-1,d5
(1)  206/  FF03CE : 6606                		bne.s	.nonull
(1)  207/  FF03D0 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  208/  FF03D4 : 6002                		bra.s	.cont
(1)  209/  FF03D6 :                     .nonull:
(1)  210/  FF03D6 : DA42                		add.w	d2,d5
(1)  211/  FF03D8 :                     .cont:
(1)  212/  FF03D8 : 4847                		swap	d7
(1)  213/  FF03DA : D0FC 0002           		adda	#2,a0
(1)  214/  FF03DE : 0839 0002 FFFF 91AE 		btst	#2,(RAM_VdpRegs+$C).l
(1)  215/  FF03E6 : 6712                		beq.s	.nodble
(1)  216/  FF03E8 : D0FC 0002           		adda	#2,a0
(1)  217/  FF03EC : 3E05                		move.w	d5,d7
(1)  218/  FF03EE : E24F                		lsr.w	#1,d7
(1)  219/  FF03F0 : CE7C 07FF           		and.w	#$7FF,d7
(1)  220/  FF03F4 : CA7C F800           		and.w	#$F800,d5
(1)  221/  FF03F8 : 8A47                		or.w	d7,d5
(1)  222/  FF03FA :                     .nodble:
(1)  223/  FF03FA : 4847                		swap	d7
(1)  224/  FF03FC : 3885                		move.w	d5,(a4)
(1)  225/  FF03FE : D886                		add.l	d6,d4
(1)  226/  FF0400 : 51CF FFC2           		dbf	d7,.yloop
(1)  227/  FF0404 :                     .outdbl:
(1)  228/  FF0404 : 281F                		move.l	(sp)+,d4
(1)  229/  FF0406 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  230/  FF040C : 4845                		swap	d5
(1)  231/  FF040E : 51CD FFA2           		dbf	d5,.xloop
(1)  232/  FF0412 : 4E75                		rts
(1)  233/  FF0414 :                     		
(1)  234/  FF0414 :                     ; --------------------------------------------------------
(1)  235/  FF0414 :                     ; Video_AutoMap_Vert
(1)  236/  FF0414 :                     ; 
(1)  237/  FF0414 :                     ; Make automatic map, Vertical order
(1)  238/  FF0414 :                     ; 
(1)  239/  FF0414 :                     ; MCD: Use this to make a virtual screen
(1)  240/  FF0414 :                     ; for Stamps
(1)  241/  FF0414 :                     ; 
(1)  242/  FF0414 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  243/  FF0414 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  244/  FF0414 :                     ; d2 | WORD - VRAM
(1)  245/  FF0414 :                     
(1)  246/  FF0414 :                     ; Uses:
(1)  247/  FF0414 :                     ; a4-a5,d4-d7
(1)  248/  FF0414 :                     ; --------------------------------------------------------
(1)  249/  FF0414 :                     
(1)  250/  FF0414 :                     ; TODO: double interlace
(1)  251/  FF0414 :                     Video_AutoMap_Vert:
(1)  252/  FF0414 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  253/  FF041A : 6100 0196           		bsr	vid_PickLayer
(1)  254/  FF041E : 3E02                		move.w	d2,d7		; Start here
(1)  255/  FF0420 : 2A01                		move.l	d1,d5
(1)  256/  FF0422 : 4845                		swap	d5
(1)  257/  FF0424 :                     .xloop:
(1)  258/  FF0424 : 4845                		swap	d5
(1)  259/  FF0426 : 2F04                		move.l	d4,-(sp)
(1)  260/  FF0428 : 3A01                		move.w	d1,d5
(1)  261/  FF042A : 0839 0002 FFFF 91AE 		btst	#2,(RAM_VdpRegs+$C).l
(1)  262/  FF0432 : 6702                		beq.s	.yloop
(1)  263/  FF0434 : E24D                		lsr.w	#1,d5
(1)  264/  FF0436 :                     .yloop:
(1)  265/  FF0436 : 2944 0004           		move.l	d4,4(a4)
(1)  266/  FF043A : 3887                		move.w	d7,(a4)
(1)  267/  FF043C : DE7C 0001           		add.w	#1,d7
(1)  268/  FF0440 : D886                		add.l	d6,d4
(1)  269/  FF0442 : 51CD FFF2           		dbf	d5,.yloop
(1)  270/  FF0446 :                     
(1)  271/  FF0446 : 281F                		move.l	(sp)+,d4
(1)  272/  FF0448 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  273/  FF044E : 4845                		swap	d5
(1)  274/  FF0450 : 51CD FFD2           		dbf	d5,.xloop
(1)  275/  FF0454 : 4E75                		rts
(1)  276/  FF0456 :                     
(1)  277/  FF0456 :                     ; --------------------------------------------------------
(1)  278/  FF0456 :                     ; Video_PrintInit
(1)  279/  FF0456 :                     ; 
(1)  280/  FF0456 :                     ; Load palette and font for printing text
(1)  281/  FF0456 :                     ; --------------------------------------------------------
(1)  282/  FF0456 :                     
(1)  283/  FF0456 :                     Video_PrintInit:
(1)  284/  FF0456 : 41FA 03CC           		lea	ASCII_PAL(pc),a0
(1)  285/  FF045A : 7030                		moveq	#$30,d0
(1)  286/  FF045C : 323C 000F           		move.w	#$F,d1
(1)  287/  FF0460 : 6100 FEC0           		bsr	Video_LoadPal
(1)  288/  FF0464 : 203C 00FF 0844      		move.l	#ASCII_FONT,d0
(1)  289/  FF046A : 323C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d1
(1)  290/  FF046E : 343C 6580           		move.w	#$580|$6000,d2
(1)  291/  FF0472 : 31C2 9020           		move.w	d2,(RAM_VidPrntVram).w
(1)  292/  FF0476 : 6000 02D0           		bra	Video_LoadArt
(1)  293/  FF047A :                     
(1)  294/  FF047A :                     ; --------------------------------------------------------
(1)  295/  FF047A :                     ; Video_Print
(1)  296/  FF047A :                     ; 
(1)  297/  FF047A :                     ; Prints string to layer
(1)  298/  FF047A :                     ; requires ASCII font
(1)  299/  FF047A :                     ; 
(1)  300/  FF047A :                     ; a0 - string data
(1)  301/  FF047A :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(1)  302/  FF047A :                     ; 
(1)  303/  FF047A :                     ; Notes:
(1)  304/  FF047A :                     ; "//b" - Show BYTE value
(1)  305/  FF047A :                     ; "//w" - Show WORD value
(1)  306/  FF047A :                     ; "//l" - Show LONG value
(1)  307/  FF047A :                     ;   $0A - Next line
(1)  308/  FF047A :                     ;   $00 - End of line
(1)  309/  FF047A :                     ; 
(1)  310/  FF047A :                     ; Uses:
(1)  311/  FF047A :                     ; a4-a6,d4-d7
(1)  312/  FF047A :                     ; --------------------------------------------------------
(1)  313/  FF047A :                     
(1)  314/  FF047A :                     Video_Print:
(1)  315/  FF047A :                     ; 		movem.l	d3-d7,-(sp)
(1)  316/  FF047A :                     ; 		movem.l	a4-a6,-(sp)
(1)  317/  FF047A :                     		
(1)  318/  FF047A : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  319/  FF0480 : 6100 0130           		bsr	vid_PickLayer
(1)  320/  FF0484 : 4BF8 9022           		lea	(RAM_VidPrntList),a5
(1)  321/  FF0488 :                     .newjump:
(1)  322/  FF0488 : 2D44 0004           		move.l	d4,4(a6)
(1)  323/  FF048C : 2A04                		move.l	d4,d5
(1)  324/  FF048E :                     .loop:
(1)  325/  FF048E : 1E18                		move.b	(a0)+,d7
(1)  326/  FF0490 : 6772                		beq	.exit
(1)  327/  FF0492 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  328/  FF0496 : 6718                		beq.s	.next
(1)  329/  FF0498 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  330/  FF049C : 6716                		beq.s	.special
(1)  331/  FF049E : 0247 00FF           		andi.w	#$FF,d7
(1)  332/  FF04A2 :                     .puttext:
(1)  333/  FF04A2 : DE78 9020           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  334/  FF04A6 : 3C87                		move.w	d7,(a6)
(1)  335/  FF04A8 : DABC 0002 0000      		add.l	#$20000,d5
(1)  336/  FF04AE : 60DE                		bra.s	.loop
(1)  337/  FF04B0 :                     ; Next line
(1)  338/  FF04B0 :                     .next:
(1)  339/  FF04B0 : D886                		add.l	d6,d4
(1)  340/  FF04B2 : 60D4                		bra.s	.newjump
(1)  341/  FF04B4 :                     
(1)  342/  FF04B4 :                     ; Specials
(1)  343/  FF04B4 :                     .special:
(1)  344/  FF04B4 : 1E18                		move.b	(a0)+,d7
(1)  345/  FF04B6 : 0C07 0062           		cmpi.b	#"b",d7
(1)  346/  FF04BA : 6712                		beq.s	.isbyte
(1)  347/  FF04BC : 0C07 0077           		cmpi.b	#"w",d7
(1)  348/  FF04C0 : 671E                		beq.s	.isword
(1)  349/  FF04C2 : 0C07 006C           		cmpi.b	#"l",d7
(1)  350/  FF04C6 : 672A                		beq.s	.islong
(1)  351/  FF04C8 : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(1)  352/  FF04CC : 60D4                		bra.s	.puttext
(1)  353/  FF04CE :                     		
(1)  354/  FF04CE :                     	; TEMPORAL VALUES
(1)  355/  FF04CE :                     .isbyte:
(1)  356/  FF04CE : 2AC5                		move.l	d5,(a5)+
(1)  357/  FF04D0 : 3AFC 0001           		move.w	#1,(a5)+
(1)  358/  FF04D4 : DABC 0004 0000      		add.l	#$40000,d5
(1)  359/  FF04DA : 2D45 0004           		move.l	d5,4(a6)
(1)  360/  FF04DE : 60AE                		bra	.loop
(1)  361/  FF04E0 :                     .isword:
(1)  362/  FF04E0 : 2AC5                		move.l	d5,(a5)+
(1)  363/  FF04E2 : 3AFC 0002           		move.w	#2,(a5)+
(1)  364/  FF04E6 : DABC 0008 0000      		add.l	#$80000,d5
(1)  365/  FF04EC : 2D45 0004           		move.l	d5,4(a6)
(1)  366/  FF04F0 : 609C                		bra	.loop
(1)  367/  FF04F2 :                     .islong:
(1)  368/  FF04F2 : 2AC5                		move.l	d5,(a5)+
(1)  369/  FF04F4 : 3AFC 0003           		move.w	#3,(a5)+
(1)  370/  FF04F8 : DABC 0010 0000      		add.l	#$100000,d5
(1)  371/  FF04FE : 2D45 0004           		move.l	d5,4(a6)
(1)  372/  FF0502 : 608A                		bra	.loop
(1)  373/  FF0504 :                     .exit:
(1)  374/  FF0504 :                     
(1)  375/  FF0504 :                     ; --------------------------------------------------------
(1)  376/  FF0504 :                     ; Print values
(1)  377/  FF0504 :                     ; 
(1)  378/  FF0504 :                     ; vvvv vvvv tttt
(1)  379/  FF0504 :                     ; v - vdp pos
(1)  380/  FF0504 :                     ; t - value type
(1)  381/  FF0504 :                     ; --------------------------------------------------------
(1)  382/  FF0504 :                     
(1)  383/  FF0504 : 7800                		moveq	#0,d4
(1)  384/  FF0506 : 7A00                		moveq	#0,d5
(1)  385/  FF0508 : 7C00                		moveq	#0,d6
(1)  386/  FF050A : 4BF8 9022           		lea	(RAM_VidPrntList),a5
(1)  387/  FF050E :                     .nextv:
(1)  388/  FF050E : 4A95                		tst.l	(a5)
(1)  389/  FF0510 : 6700 009E           		beq	.nothing
(1)  390/  FF0514 :                     
(1)  391/  FF0514 :                     	; grab value
(1)  392/  FF0514 : 7800                		moveq	#0,d4
(1)  393/  FF0516 : 1818                		move.b	(a0)+,d4
(1)  394/  FF0518 : E19C                		rol.l	#8,d4
(1)  395/  FF051A : 1818                		move.b	(a0)+,d4
(1)  396/  FF051C : E19C                		rol.l	#8,d4
(1)  397/  FF051E : 1818                		move.b	(a0)+,d4
(1)  398/  FF0520 : E19C                		rol.l	#8,d4
(1)  399/  FF0522 : 1818                		move.b	(a0)+,d4
(1)  400/  FF0524 : 2844                		movea.l	d4,a4
(1)  401/  FF0526 : 7800                		moveq	#0,d4
(1)  402/  FF0528 :                     
(1)  403/  FF0528 :                     	; get value
(1)  404/  FF0528 : 3C2D 0004           		move.w	4(a5),d6
(1)  405/  FF052C :                     
(1)  406/  FF052C : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  407/  FF0530 : 660E                		bne.s	.vbyte
(1)  408/  FF0532 : 1814                		move.b	(a4),d4
(1)  409/  FF0534 : 2D55 0004           		move.l	(a5),4(a6)
(1)  410/  FF0538 : E91C                		rol.b	#4,d4
(1)  411/  FF053A : 6158                		bsr.s	.donibl
(1)  412/  FF053C : E91C                		rol.b	#4,d4
(1)  413/  FF053E : 6154                		bsr.s	.donibl
(1)  414/  FF0540 :                     .vbyte:
(1)  415/  FF0540 : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  416/  FF0544 : 661C                		bne.s	.vword
(1)  417/  FF0546 : 1814                		move.b	(a4),d4
(1)  418/  FF0548 : E15C                		rol.w	#8,d4
(1)  419/  FF054A : 182C 0001           		move.b	1(a4),d4
(1)  420/  FF054E : 2D55 0004           		move.l	(a5),4(a6)
(1)  421/  FF0552 : E95C                		rol.w	#4,d4
(1)  422/  FF0554 : 613E                		bsr.s	.donibl
(1)  423/  FF0556 : E95C                		rol.w	#4,d4
(1)  424/  FF0558 : 613A                		bsr.s	.donibl
(1)  425/  FF055A : E95C                		rol.w	#4,d4
(1)  426/  FF055C : 6136                		bsr.s	.donibl
(1)  427/  FF055E : E95C                		rol.w	#4,d4
(1)  428/  FF0560 : 6132                		bsr.s	.donibl
(1)  429/  FF0562 :                     .vword:
(1)  430/  FF0562 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  431/  FF0566 : 6624                		bne.s	.vlong
(1)  432/  FF0568 : 1814                		move.b	(a4),d4
(1)  433/  FF056A : E19C                		rol.l	#8,d4
(1)  434/  FF056C : 182C 0001           		move.b	1(a4),d4
(1)  435/  FF0570 : E19C                		rol.l	#8,d4
(1)  436/  FF0572 : 182C 0002           		move.b	2(a4),d4
(1)  437/  FF0576 : E19C                		rol.l	#8,d4
(1)  438/  FF0578 : 182C 0003           		move.b	3(a4),d4
(1)  439/  FF057C : 2D55 0004           		move.l	(a5),4(a6)
(1)  440/  FF0580 : 3C3C 0007           		move.w	#7,d6
(1)  441/  FF0584 : E99C                .lngloop:	rol.l	#4,d4
(1)  442/  FF0586 : 610C                		bsr.s	.donibl
(1)  443/  FF0588 : 51CE FFFA           		dbf	d6,.lngloop
(1)  444/  FF058C :                     .vlong:
(1)  445/  FF058C : 429D                		clr.l	(a5)+
(1)  446/  FF058E : 425D                		clr.w	(a5)+
(1)  447/  FF0590 : 6000 FF7C           		bra	.nextv
(1)  448/  FF0594 :                     
(1)  449/  FF0594 :                     ; make nibble byte
(1)  450/  FF0594 :                     .donibl:
(1)  451/  FF0594 : 3A04                		move.w	d4,d5
(1)  452/  FF0596 : 0245 000F           		andi.w	#%1111,d5
(1)  453/  FF059A : BA3C 000A           		cmp.b	#$A,d5
(1)  454/  FF059E : 6D04                		blt.s	.lowr
(1)  455/  FF05A0 : DA3C 0007           		add.b	#7,d5
(1)  456/  FF05A4 :                     .lowr:
(1)  457/  FF05A4 : DA7C 0030           		add.w	#"0",d5
(1)  458/  FF05A8 : DA78 9020           		add.w	(RAM_VidPrntVram),d5
(1)  459/  FF05AC : 3C85                		move.w	d5,(a6)
(1)  460/  FF05AE : 4E75                		rts
(1)  461/  FF05B0 :                     ; exit
(1)  462/  FF05B0 :                     .nothing:
(1)  463/  FF05B0 :                     ; 		movem.l	(sp)+,a4-a6
(1)  464/  FF05B0 :                     ; 		movem.l	(sp)+,d3-d7
(1)  465/  FF05B0 : 4E75                		rts
(1)  466/  FF05B2 :                     
(1)  467/  FF05B2 :                     ; --------------------------------------------------------
(1)  468/  FF05B2 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  469/  FF05B2 :                     ; --------------------------------------------------------
(1)  470/  FF05B2 :                     
(1)  471/  FF05B2 :                     vid_PickLayer:
(1)  472/  FF05B2 : 2C00                		move.l	d0,d6			; Pick layer
(1)  473/  FF05B4 : 4846                		swap	d6
(1)  474/  FF05B6 : 0806 0000           		btst	#0,d6
(1)  475/  FF05BA : 671E                		beq.s	.plawnd
(1)  476/  FF05BC : 1839 FFFF 91A6      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  477/  FF05C2 : 3A04                		move.w	d4,d5
(1)  478/  FF05C4 : E24D                		lsr.w	#1,d5
(1)  479/  FF05C6 : 0245 0003           		andi.w	#%11,d5
(1)  480/  FF05CA : 4844                		swap	d4
(1)  481/  FF05CC : 3805                		move.w	d5,d4
(1)  482/  FF05CE : 4844                		swap	d4
(1)  483/  FF05D0 : 0244 0001           		andi.w	#1,d4
(1)  484/  FF05D4 : E14C                		lsl.w	#8,d4
(1)  485/  FF05D6 : EB4C                		lsl.w	#5,d4
(1)  486/  FF05D8 : 6028                		bra.s	.golyr
(1)  487/  FF05DA :                     .plawnd:
(1)  488/  FF05DA : 1839 FFFF 91A4      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  489/  FF05E0 : 0806 0001           		btst	#1,d6
(1)  490/  FF05E4 : 6706                		beq.s	.nowd
(1)  491/  FF05E6 : 1839 FFFF 91A5      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  492/  FF05EC :                     .nowd:		
(1)  493/  FF05EC : 3A04                		move.w	d4,d5
(1)  494/  FF05EE : E84D                		lsr.w	#4,d5
(1)  495/  FF05F0 : 0245 0003           		andi.w	#%11,d5
(1)  496/  FF05F4 : 4844                		swap	d4
(1)  497/  FF05F6 : 3805                		move.w	d5,d4
(1)  498/  FF05F8 : 4844                		swap	d4
(1)  499/  FF05FA : 0244 000E           		andi.w	#%00001110,d4
(1)  500/  FF05FE : E14C                		lsl.w	#8,d4
(1)  501/  FF0600 : E54C                		lsl.w	#2,d4
(1)  502/  FF0602 :                     .golyr:
(1)  503/  FF0602 : 0044 4000           		ori.w	#$4000,d4
(1)  504/  FF0606 : 3A00                		move.w	d0,d5			; Y start pos
(1)  505/  FF0608 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  506/  FF060C : ED4D                		lsl.w	#6,d5			
(1)  507/  FF060E : 1C38 91B2           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  508/  FF0612 : 0246 0003           		andi.w	#%11,d6
(1)  509/  FF0616 : 670A                		beq.s	.thissz
(1)  510/  FF0618 : DA45                		add.w	d5,d5			; H64
(1)  511/  FF061A : 0246 0002           		andi.w	#%10,d6
(1)  512/  FF061E : 6702                		beq.s	.thissz
(1)  513/  FF0620 : DA45                		add.w	d5,d5			; H128		
(1)  514/  FF0622 :                     .thissz:
(1)  515/  FF0622 : D845                		add.w	d5,d4
(1)  516/  FF0624 : 3A00                		move.w	d0,d5
(1)  517/  FF0626 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  518/  FF062A : EE4D                		lsr.w	#7,d5
(1)  519/  FF062C : D845                		add.w	d5,d4			; X add
(1)  520/  FF062E : 4844                		swap	d4
(1)  521/  FF0630 : 7C00                		moveq	#0,d6
(1)  522/  FF0632 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  523/  FF0636 : 1A38 91B2           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  524/  FF063A : 0245 0003           		andi.w	#%11,d5
(1)  525/  FF063E : 670A                		beq.s	.thisszj
(1)  526/  FF0640 : DC46                		add.w	d6,d6			; H64
(1)  527/  FF0642 : 0245 0002           		andi.w	#%10,d5
(1)  528/  FF0646 : 6702                		beq.s	.thisszj
(1)  529/  FF0648 : DC46                		add.w	d6,d6			; H128		
(1)  530/  FF064A :                     .thisszj:
(1)  531/  FF064A : 4846                		swap	d6
(1)  532/  FF064C : 4E75                		rts
(1)  533/  FF064E :                     		
(1)  534/  FF064E :                     ; --------------------------------------------------------
(1)  535/  FF064E :                     ; Video_Fill
(1)  536/  FF064E :                     ; 
(1)  537/  FF064E :                     ; Fill data to VRAM
(1)  538/  FF064E :                     ;
(1)  539/  FF064E :                     ; d0 | WORD - Fill data
(1)  540/  FF064E :                     ; d1 | WORD - Size
(1)  541/  FF064E :                     ; d2 | WORD - VRAM
(1)  542/  FF064E :                     ; --------------------------------------------------------
(1)  543/  FF064E :                     
(1)  544/  FF064E :                     Video_Fill:
(1)  545/  FF064E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  546/  FF0654 :                     		
(1)  547/  FF0654 : 383C 8100           		move.w	#$8100,d4
(1)  548/  FF0658 : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  549/  FF065C : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  550/  FF0660 : 3884                		move.w	d4,(a4)
(1)  551/  FF0662 : 3814                .dmaw:		move.w	(a4),d4
(1)  552/  FF0664 : 0804 0001           		btst	#bitDma,d4
(1)  553/  FF0668 : 66F8                		bne.s	.dmaw
(1)  554/  FF066A : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  555/  FF066E :                     
(1)  556/  FF066E :                     	; SIZE
(1)  557/  FF066E : 3801                		move.w	d1,d4
(1)  558/  FF0670 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  559/  FF0676 : E24C                		lsr.w	#1,d4
(1)  560/  FF0678 : 1A04                		move.b	d4,d5
(1)  561/  FF067A : 4845                		swap	d5
(1)  562/  FF067C : E04C                		lsr.w	#8,d4
(1)  563/  FF067E : 1A04                		move.b	d4,d5
(1)  564/  FF0680 : 4845                		swap	d5
(1)  565/  FF0682 : 2885                		move.l	d5,(a4)
(1)  566/  FF0684 : 38BC 9780           		move.w	#$9780,(a4)		; DMA Fill bit
(1)  567/  FF0688 :                     
(1)  568/  FF0688 :                     	; DESTINATION
(1)  569/  FF0688 : 2802                		move.l	d2,d4
(1)  570/  FF068A :                     ; 		lsl.w	#5,d4
(1)  571/  FF068A : 3A04                		move.w	d4,d5
(1)  572/  FF068C : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  573/  FF0690 : 0045 4000           		ori.w	#$4000,d5
(1)  574/  FF0694 : 4845                		swap	d5
(1)  575/  FF0696 : 3A04                		move.w	d4,d5
(1)  576/  FF0698 : E04D                		lsr.w	#8,d5
(1)  577/  FF069A : EC4D                		lsr.w	#6,d5
(1)  578/  FF069C : 0245 0003           		andi.w	#%11,d5
(1)  579/  FF06A0 : 0045 0080           		ori.w	#$80,d5
(1)  580/  FF06A4 : 2885                		move.l	d5,(a4)
(1)  581/  FF06A6 : 3940 FFFC           		move.w	d0,-4(a4)
(1)  582/  FF06AA : 3814                .dmawe:		move.w	(a4),d4
(1)  583/  FF06AC : 0804 0001           		btst	#bitDma,d4
(1)  584/  FF06B0 : 66F8                		bne.s	.dmawe
(1)  585/  FF06B2 :                     
(1)  586/  FF06B2 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  587/  FF06B6 : 383C 8100           		move.w	#$8100,d4
(1)  588/  FF06BA : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  589/  FF06BE : 3884                		move.w	d4,(a4)
(1)  590/  FF06C0 : 4E75                		rts
(1)  591/  FF06C2 :                     
(1)  592/  FF06C2 :                     ; --------------------------------------------------------
(1)  593/  FF06C2 :                     ; Video_Copy
(1)  594/  FF06C2 :                     ; 
(1)  595/  FF06C2 :                     ; Copy VRAM data to another location
(1)  596/  FF06C2 :                     ;
(1)  597/  FF06C2 :                     ; d0 | WORD - VRAM Source
(1)  598/  FF06C2 :                     ; d1 | WORD - Size
(1)  599/  FF06C2 :                     ; d2 | WORD - VRAM Destination
(1)  600/  FF06C2 :                     ; --------------------------------------------------------
(1)  601/  FF06C2 :                     
(1)  602/  FF06C2 :                     Video_Copy:
(1)  603/  FF06C2 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  604/  FF06C8 :                     		
(1)  605/  FF06C8 : 383C 8100           		move.w	#$8100,d4
(1)  606/  FF06CC : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  607/  FF06D0 : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  608/  FF06D4 : 3884                		move.w	d4,(a4)
(1)  609/  FF06D6 : 3814                .dmaw:		move.w	(a4),d4
(1)  610/  FF06D8 : 0804 0001           		btst	#bitDma,d4
(1)  611/  FF06DC : 66F8                		bne.s	.dmaw
(1)  612/  FF06DE : 38BC 8F01           		move.w	#$8F01,(a4)		; Increment $01
(1)  613/  FF06E2 : 3801                		move.w	d1,d4			; SIZE
(1)  614/  FF06E4 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  615/  FF06EA : E24C                		lsr.w	#1,d4
(1)  616/  FF06EC : 1A04                		move.b	d4,d5
(1)  617/  FF06EE : 4845                		swap	d5
(1)  618/  FF06F0 : E04C                		lsr.w	#8,d4
(1)  619/  FF06F2 : 1A04                		move.b	d4,d5
(1)  620/  FF06F4 : 4845                		swap	d5
(1)  621/  FF06F6 : 2885                		move.l	d5,(a4)
(1)  622/  FF06F8 : 2A3C 9600 9500      		move.l	#$96009500,d5		; SOURCE
(1)  623/  FF06FE : 3800                		move.w	d0,d4
(1)  624/  FF0700 : 1A04                		move.b	d4,d5
(1)  625/  FF0702 : 4845                		swap	d5
(1)  626/  FF0704 : E04C                		lsr.w	#8,d4
(1)  627/  FF0706 : 1A04                		move.b	d4,d5
(1)  628/  FF0708 : 2885                		move.l	d5,(a4)
(1)  629/  FF070A : 38BC 97C0           		move.w	#$97C0,(a4)		; DMA Fill bit
(1)  630/  FF070E : 2802                		move.l	d2,d4			; DESTINATION
(1)  631/  FF0710 :                     ; 		lsl.w	#5,d4
(1)  632/  FF0710 : 3A04                		move.w	d4,d5
(1)  633/  FF0712 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  634/  FF0716 : 0045 4000           		ori.w	#$4000,d5
(1)  635/  FF071A : 4845                		swap	d5
(1)  636/  FF071C : 3A04                		move.w	d4,d5
(1)  637/  FF071E : E04D                		lsr.w	#8,d5
(1)  638/  FF0720 : EC4D                		lsr.w	#6,d5
(1)  639/  FF0722 : 0245 0003           		andi.w	#%11,d5
(1)  640/  FF0726 : 0045 00C0           		ori.w	#$C0,d5
(1)  641/  FF072A : 2885                		move.l	d5,(a4)
(1)  642/  FF072C : 3940 FFFC           		move.w	d0,-4(a4)
(1)  643/  FF0730 : 3814                .dmawe:		move.w	(a4),d4
(1)  644/  FF0732 : 0804 0001           		btst	#bitDma,d4
(1)  645/  FF0736 : 66F8                		bne.s	.dmawe
(1)  646/  FF0738 :                     
(1)  647/  FF0738 : 38BC 8F02           		move.w	#$8F02,(a4)		; Increment $02
(1)  648/  FF073C : 383C 8100           		move.w	#$8100,d4
(1)  649/  FF0740 : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  650/  FF0744 : 3884                		move.w	d4,(a4)
(1)  651/  FF0746 : 4E75                		rts
(1)  652/  FF0748 :                     
(1)  653/  FF0748 :                     
(1)  654/  FF0748 :                     ; ====================================================================
(1)  655/  FF0748 :                     ; --------------------------------------------------------
(1)  656/  FF0748 :                     ; DMA ROM to VDP Transfer, sets RV=1
(1)  657/  FF0748 :                     ; --------------------------------------------------------
(1)  658/  FF0748 :                     
(1)  659/  FF0748 :                     ; --------------------------------------------------------
(1)  660/  FF0748 :                     ; Load graphics using DMA
(1)  661/  FF0748 :                     ;
(1)  662/  FF0748 :                     ; d0 | LONG - Art data
(1)  663/  FF0748 :                     ; d1 | WORD - Size
(1)  664/  FF0748 :                     ; d2 | WORD - VRAM (cell)
(1)  665/  FF0748 :                     ; 
(1)  666/  FF0748 :                     ; Uses:
(1)  667/  FF0748 :                     ; d4-d5,a4
(1)  668/  FF0748 :                     ; --------------------------------------------------------
(1)  669/  FF0748 :                     
(1)  670/  FF0748 :                     Video_LoadArt:
(1)  671/  FF0748 : 40E7                		move.w	sr,-(sp)
(1)  672/  FF074A : 007C 0700           		or	#$700,sr
(1)  673/  FF074E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  674/  FF0754 : 383C 8100           		move.w	#$8100,d4		; DMA ON
(1)  675/  FF0758 : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  676/  FF075C : 08C4 0004           		bset	#bitDmaEnbl,d4
(1)  677/  FF0760 : 3884                		move.w	d4,(a4)
(1)  678/  FF0762 : 3801                		move.w	d1,d4			; LENGTH
(1)  679/  FF0764 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  680/  FF076A : E24C                		lsr.w	#1,d4
(1)  681/  FF076C : 1A04                		move.b	d4,d5
(1)  682/  FF076E : 4845                		swap	d5
(1)  683/  FF0770 : E04C                		lsr.w	#8,d4
(1)  684/  FF0772 : 1A04                		move.b	d4,d5
(1)  685/  FF0774 : 4845                		swap	d5
(1)  686/  FF0776 : 2885                		move.l	d5,(a4)
(1)  687/  FF0778 : 2800                		move.l	d0,d4			; SOURCE
(1)  688/  FF077A : E28C                  		lsr.l	#1,d4
(1)  689/  FF077C : 2A3C 9600 9500       		move.l	#$96009500,d5
(1)  690/  FF0782 : 1A04                 		move.b	d4,d5
(1)  691/  FF0784 : E08C                 		lsr.l	#8,d4
(1)  692/  FF0786 : 4845                 		swap	d5
(1)  693/  FF0788 : 1A04                 		move.b	d4,d5
(1)  694/  FF078A : 2885                 		move.l	d5,(a4)
(1)  695/  FF078C : 3A3C 9700            		move.w	#$9700,d5
(1)  696/  FF0790 : E08C                 		lsr.l	#8,d4
(1)  697/  FF0792 : 1A04                 		move.b	d4,d5
(1)  698/  FF0794 : 3885                 		move.w	d5,(a4)
(1)  699/  FF0796 : 3802                		move.w	d2,d4			; DESTINATION
(1)  700/  FF0798 : C87C 07FF           		and.w	#$7FF,d4
(1)  701/  FF079C : EB4C                		lsl.w	#5,d4
(1)  702/  FF079E : 3A04                		move.w	d4,d5
(1)  703/  FF07A0 : C8BC 0000 3FE0      		and.l	#$3FE0,d4
(1)  704/  FF07A6 : 0044 4000           		ori.w	#$4000,d4
(1)  705/  FF07AA :                     
(1)  706/  FF07AA :                     
(1)  707/  FF07AA :                     	; First write
(1)  708/  FF07AA :                     	; d5 -
(1)  709/  FF07AA : E04D                		lsr.w	#8,d5
(1)  710/  FF07AC : EC4D                		lsr.w	#6,d5
(1)  711/  FF07AE : 0245 0003           		andi.w	#%11,d5
(1)  712/  FF07B2 : 0045 0080           		ori.w	#$80,d5
(1)  713/  FF07B6 : 2E00                		move.l	d0,d7
(1)  714/  FF07B8 : 4847                		swap	d7
(1)  715/  FF07BA : E04F                		lsr.w	#8,d7
(1)  716/  FF07BC : BE3C 00FF           		cmp.b	#$FF,d7
(1)  717/  FF07C0 : 673A                		beq.s	.from_ram
(1)  718/  FF07C2 :                     
(1)  719/  FF07C2 : 6100 F970           		bsr	Sound_DMA_Pause
(1)  720/  FF07C6 : 3E39 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d7	; Set RV=1
(1)  721/  FF07CC : 8E7C 0001           		or.w	#%00000001,d7			; 68k ROM map moves to $000000, $880000/$900000=trash
(1)  722/  FF07D0 : 33C7 00A1 5106      		move.w	d7,(sysmars_reg+dreqctl).l
(1)  723/  FF07D6 : 3F05                 		move.w	d5,-(sp)
(1)  724/  FF07D8 : 3884                		move.w	d4,(a4)				; d4 - First word
(1)  725/  FF07DA : 389F                		move.w	(sp)+,(a4)			; *** Second write, CPU freezes until it DMA ends
(1)  726/  FF07DC : 3839 00A1 5106      		move.w	(sysmars_reg+dreqctl).l,d4	; Set RV=0
(1)  727/  FF07E2 : C87C 00FE           		and.w	#%11111110,d4			; 68k ROM map returns to $880000/$900000
(1)  728/  FF07E6 : 33C4 00A1 5106      		move.w	d4,(sysmars_reg+dreqctl).l
(1)  729/  FF07EC : 383C 8100           		move.w	#$8100,d4			; DMA OFF
(1)  730/  FF07F0 : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  731/  FF07F4 : 3884                		move.w	d4,(a4)
(1)  732/  FF07F6 : 46DF                		move.w	(sp)+,sr
(1)  733/  FF07F8 : 6000 F992           		bra	Sound_DMA_Resume
(1)  734/  FF07FC :                     
(1)  735/  FF07FC :                     .from_ram:
(1)  736/  FF07FC : 3884                		move.w	d4,(a4)
(1)  737/  FF07FE : 3F05                 		move.w	d5,-(sp)
(1)  738/  FF0800 : 389F                		move.w	(sp)+,(a4)			; Second write
(1)  739/  FF0802 : 383C 8100           		move.w	#$8100,d4
(1)  740/  FF0806 : 1838 91A3           		move.b	(RAM_VdpRegs+1),d4
(1)  741/  FF080A : 3884                		move.w	d4,(a4)
(1)  742/  FF080C : 46DF                		move.w	(sp)+,sr
(1)  743/  FF080E : 4E75                		rts
(1)  744/  FF0810 :                     
(1)  745/  FF0810 :                     ; ====================================================================
(1)  746/  FF0810 :                     ; --------------------------------------------------------
(1)  747/  FF0810 :                     ; Video data
(1)  748/  FF0810 :                     ; --------------------------------------------------------
(1)  749/  FF0810 :                     
(1)  750/  FF0810 :                     list_vdpregs:
(1)  751/  FF0810 : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1)  752/  FF0811 : 44                  		dc.b $44			; Display ON, VBlank int off
(1)  753/  FF0812 : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1)  754/  FF0813 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  755/  FF0814 : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1)  756/  FF0815 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  757/  FF0816 : 00                  		dc.b $00			; Nothing
(1)  758/  FF0817 : 00                  		dc.b $00			; Background color: 0
(1)  759/  FF0818 : 00                  		dc.b $00			; Nothing
(1)  760/  FF0819 : 00                  		dc.b $00			; Nothing
(1)  761/  FF081A : 00                  		dc.b $00			; HInt value
(1)  762/  FF081B : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  763/  FF081C : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  764/  FF081D : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  765/  FF081E : 00                  		dc.b $00			; Nothing
(1)  766/  FF081F : 02                  		dc.b $02			; VDP Auto increment by $02
(1)  767/  FF0820 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  768/  FF0821 : 00                  		dc.b $00
(1)  769/  FF0822 : 00                  		dc.b $00
(1)  770/  FF0823 :                     		align 2
(1)  771/  FF0824 :                     ASCII_PAL:	;binclude "engine/shared/ascii_pal.bin"
(1)  772/  FF0824 : 0000 0EEE 0CCC 0AAA 		dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  773/  FF0834 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  774/  FF0844 :                     ASCII_PAL_e:
(1)  775/  FF0844 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)  776/  FF1844 :                     ASCII_FONT_e:
(1)  777/  FF1844 :                     		align 2
(1)  778/  FF1844 :                     
      35/  FF1844 :                     		include	"system/md/system.asm"
(1)    1/  FF1844 :                     ; ====================================================================
(1)    2/  FF1844 :                     ; ----------------------------------------------------------------
(1)    3/  FF1844 :                     ; System
(1)    4/  FF1844 :                     ; ----------------------------------------------------------------
(1)    5/  FF1844 :                     
(1)    6/  FF1844 :                     ; --------------------------------------------------------
(1)    7/  FF1844 :                     ; Init System
(1)    8/  FF1844 :                     ; 
(1)    9/  FF1844 :                     ; Uses:
(1)   10/  FF1844 :                     ; a0-a2,d0-d1
(1)   11/  FF1844 :                     ; --------------------------------------------------------
(1)   12/  FF1844 :                     
(1)   13/  FF1844 :                     System_Init:
(1)   14/  FF1844 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   15/  FF1848 : 40E7                		move.w	sr,-(sp)
(1)   16/  FF184A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   17/  FF1852 :                     .wait:
(1)   18/  FF1852 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   19/  FF185A : 66F6                		bne.s	.wait
(1)   20/  FF185C : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   21/  FF185E : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   22/  FF1864 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   23/  FF186A : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   24/  FF1870 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   25/  FF1878 : 41F8 91BA           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   26/  FF187C : 323C 0006           		move.w	#sizeof_input-1/2,d1
(1)   27/  FF1880 : 7000                		moveq	#0,d0
(1)   28/  FF1882 :                     .clrinput:
(1)   29/  FF1882 : 30FC 0000           		move.w	#0,(a0)+
(1)   30/  FF1886 : 51C9 FFFA           		dbf	d1,.clrinput
(1)   31/  FF188A : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   32/  FF188E : 33C0 FFFF 9802       		move.w	d0,(RAM_MdMarsVInt).l
(1)   33/  FF1894 : 33C0 FFFF 9808      		move.w	d0,(RAM_MdMarsHInt).l
(1)   34/  FF189A : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)   35/  FF18A0 : 223C 9511 6102      		move.l	#$95116102,d1
(1)   36/  FF18A6 : 23C0 FFFF 97F6      		move.l	d0,(RAM_SysRandVal).l
(1)   37/  FF18AC : 23C1 FFFF 97FA      		move.l	d1,(RAM_SysRandSeed).l
(1)   38/  FF18B2 : 203C 00FF 1BCE      		move.l	#VInt_Default,d0	; Set default ints
(1)   39/  FF18B8 : 223C 00FF 1BE6      		move.l	#Hint_Default,d1
(1)   40/  FF18BE : 6100 0264           		bsr	System_SetInts
(1)   41/  FF18C2 : 46DF                		move.w	(sp)+,sr
(1)   42/  FF18C4 : 4E75                		rts
(1)   43/  FF18C6 :                     
(1)   44/  FF18C6 :                     ; ====================================================================
(1)   45/  FF18C6 :                     ; --------------------------------------------------------
(1)   46/  FF18C6 :                     ; System_Input (VBLANK ONLY)
(1)   47/  FF18C6 :                     ; 
(1)   48/  FF18C6 :                     ; Uses:
(1)   49/  FF18C6 :                     ; d4-d6,a4-a5
(1)   50/  FF18C6 :                     ; --------------------------------------------------------
(1)   51/  FF18C6 :                     
(1)   52/  FF18C6 :                     ; TODO: check if it still requires to turn OFF the Z80
(1)   53/  FF18C6 :                     ; while reading the controller
(1)   54/  FF18C6 :                     
(1)   55/  FF18C6 :                     System_Input:
(1)   56/  FF18C6 :                     ; 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   57/  FF18C6 :                     .wait:
(1)   58/  FF18C6 :                     ; 		btst	#0,(z80_bus).l		; Wait for it
(1)   59/  FF18C6 :                     ; 		bne.s	.wait
(1)   60/  FF18C6 : 49F9 00A1 0003      		lea	($A10003),a4
(1)   61/  FF18CC : 4BF8 91BA           		lea	(RAM_InputData),a5
(1)   62/  FF18D0 : 6108                		bsr.s	.this_one
(1)   63/  FF18D2 : D8FC 0002           		adda	#2,a4
(1)   64/  FF18D6 : DAFC 0006           		adda	#sizeof_input,a5
(1)   65/  FF18DA :                     ; 		bsr.s	.this_one
(1)   66/  FF18DA :                     ; 		move.w	#0,(z80_bus).l
(1)   67/  FF18DA :                     ; 		rts
(1)   68/  FF18DA :                     
(1)   69/  FF18DA :                     ; --------------------------------------------------------	
(1)   70/  FF18DA :                     ; Read port
(1)   71/  FF18DA :                     ; 
(1)   72/  FF18DA :                     ; a4 - Current port
(1)   73/  FF18DA :                     ; a5 - Output data
(1)   74/  FF18DA :                     ; --------------------------------------------------------
(1)   75/  FF18DA :                     
(1)   76/  FF18DA :                     .this_one:
(1)   77/  FF18DA : 6100 00BC           		bsr	.pick_id
(1)   78/  FF18DE : 1A84                		move.b	d4,pad_id(a5)
(1)   79/  FF18E0 : B87C 000F           		cmp.w	#$F,d4
(1)   80/  FF18E4 : 670E                		beq.s	.exit
(1)   81/  FF18E6 : C87C 000F           		and.w	#$F,d4
(1)   82/  FF18EA : D844                		add.w	d4,d4
(1)   83/  FF18EC : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)   84/  FF18F0 : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)   85/  FF18F4 :                     .exit:
(1)   86/  FF18F4 : 422D 0001           		clr.b	pad_ver(a5)
(1)   87/  FF18F8 : 4E75                		rts
(1)   88/  FF18FA :                     
(1)   89/  FF18FA :                     ; --------------------------------------------------------
(1)   90/  FF18FA :                     ; Grab ID
(1)   91/  FF18FA :                     ; --------------------------------------------------------
(1)   92/  FF18FA :                     
(1)   93/  FF18FA : FFFA                .list:		dc.w .exit-.list	; $0
(1)   94/  FF18FC : FFFA                		dc.w .exit-.list
(1)   95/  FF18FE : FFFA                		dc.w .exit-.list
(1)   96/  FF1900 : FFFA                		dc.w .exit-.list
(1)   97/  FF1902 : FFFA                		dc.w .exit-.list	; $4
(1)   98/  FF1904 : FFFA                		dc.w .exit-.list
(1)   99/  FF1906 : FFFA                		dc.w .exit-.list
(1)  100/  FF1908 : FFFA                		dc.w .exit-.list
(1)  101/  FF190A : FFFA                		dc.w .exit-.list	; $8
(1)  102/  FF190C : FFFA                		dc.w .exit-.list
(1)  103/  FF190E : FFFA                		dc.w .exit-.list
(1)  104/  FF1910 : FFFA                		dc.w .exit-.list
(1)  105/  FF1912 : FFFA                		dc.w .exit-.list	; $C
(1)  106/  FF1914 : 0020                		dc.w .id_0D-.list
(1)  107/  FF1916 : FFFA                		dc.w .exit-.list
(1)  108/  FF1918 : FFFA                		dc.w .exit-.list
(1)  109/  FF191A :                     
(1)  110/  FF191A :                     ; --------------------------------------------------------
(1)  111/  FF191A :                     ; ID $0D
(1)  112/  FF191A :                     ; 
(1)  113/  FF191A :                     ; Normal controller, Old or New
(1)  114/  FF191A :                     ; --------------------------------------------------------
(1)  115/  FF191A :                     
(1)  116/  FF191A :                     .id_0D:
(1)  117/  FF191A : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  118/  FF191E : 4E71                		nop
(1)  119/  FF1920 : 4E71                		nop
(1)  120/  FF1922 : 1A14                		move.b	(a4),d5
(1)  121/  FF1924 : CA7C 003F           		and.w	#%00111111,d5
(1)  122/  FF1928 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  123/  FF192C : 4E71                		nop
(1)  124/  FF192E : 4E71                		nop
(1)  125/  FF1930 : 1814                		move.b	(a4),d4
(1)  126/  FF1932 : E54C                		lsl.w	#2,d4
(1)  127/  FF1934 : C87C 00C0           		and.w	#%11000000,d4
(1)  128/  FF1938 : 8845                		or.w	d5,d4
(1)  129/  FF193A : 18BC 0040           		move.b	#$40,(a4)	; Show CB|RLDU
(1)  130/  FF193E : 4644                		not.w	d4
(1)  131/  FF1940 : 1A2D 0003           		move.b	on_hold+1(a5),d5
(1)  132/  FF1944 : B905                		eor.b	d4,d5
(1)  133/  FF1946 : 18BC 0000           		move.b	#$00,(a4)	; Show SA|RLDU
(1)  134/  FF194A : 1B44 0003           		move.b	d4,on_hold+1(a5)
(1)  135/  FF194E : CA04                		and.b	d4,d5
(1)  136/  FF1950 : 1B45 0005           		move.b	d5,on_press+1(a5)
(1)  137/  FF1954 : 18BC 0040           		move.b	#$40,(a4)	; 6 button responds
(1)  138/  FF1958 : 4E71                		nop
(1)  139/  FF195A : 4E71                		nop
(1)  140/  FF195C : 1814                		move.b	(a4),d4		; Grab ??|MXYZ
(1)  141/  FF195E : 18BC 0000            		move.b	#$00,(a4)
(1)  142/  FF1962 : 4E71                  		nop
(1)  143/  FF1964 : 4E71                  		nop
(1)  144/  FF1966 : 1C14                 		move.b	(a4),d6		; Type: $03 old, $0F new
(1)  145/  FF1968 : 18BC 0040            		move.b	#$40,(a4)
(1)  146/  FF196C : 4E71                 		nop
(1)  147/  FF196E : 4E71                 		nop
(1)  148/  FF1970 : CC7C 000F           		and.w	#$F,d6
(1)  149/  FF1974 : E44E                		lsr.w	#2,d6
(1)  150/  FF1976 : CC7C 0001           		and.w	#1,d6
(1)  151/  FF197A : 6716                		beq.s	.oldpad
(1)  152/  FF197C : 4604                		not.b	d4
(1)  153/  FF197E : C87C 000F            		and.w	#%1111,d4
(1)  154/  FF1982 : 1A2D 0002           		move.b	on_hold(a5),d5
(1)  155/  FF1986 : B905                		eor.b	d4,d5
(1)  156/  FF1988 : 1B44 0002           		move.b	d4,on_hold(a5)
(1)  157/  FF198C : CA04                		and.b	d4,d5
(1)  158/  FF198E : 1B45 0004           		move.b	d5,on_press(a5)
(1)  159/  FF1992 :                     .oldpad:
(1)  160/  FF1992 : 1B46 0001           		move.b	d6,pad_ver(a5)
(1)  161/  FF1996 : 4E75                		rts
(1)  162/  FF1998 :                     		
(1)  163/  FF1998 :                     ; --------------------------------------------------------
(1)  164/  FF1998 :                     ; Grab ID
(1)  165/  FF1998 :                     ; --------------------------------------------------------
(1)  166/  FF1998 :                     
(1)  167/  FF1998 :                     .pick_id:
(1)  168/  FF1998 : 7800                		moveq	#0,d4
(1)  169/  FF199A : 18BC 0070           		move.b	#%01110000,(a4)		; TH=1,TR=1,TL=1
(1)  170/  FF199E : 4E71                		nop
(1)  171/  FF19A0 : 4E71                		nop
(1)  172/  FF19A2 : 610A                		bsr	.read
(1)  173/  FF19A4 : 18BC 0030           		move.b	#%00110000,(a4)		; TH=0,TR=1,TL=1
(1)  174/  FF19A8 : 4E71                		nop
(1)  175/  FF19AA : 4E71                		nop
(1)  176/  FF19AC : D844                		add.w	d4,d4
(1)  177/  FF19AE :                     .read:
(1)  178/  FF19AE : 1A14                		move.b	(a4),d5
(1)  179/  FF19B0 : 1C05                		move.b	d5,d6
(1)  180/  FF19B2 : CC3C 000C           		and.b	#$C,d6
(1)  181/  FF19B6 : 6702                		beq.s	.step_1
(1)  182/  FF19B8 : 5244                		addq.w	#1,d4
(1)  183/  FF19BA :                     .step_1:
(1)  184/  FF19BA : D844                		add.w	d4,d4
(1)  185/  FF19BC : 1C05                		move.b	d5,d6
(1)  186/  FF19BE : CC7C 0003           		and.w	#3,d6
(1)  187/  FF19C2 : 6702                		beq.s	.step_2
(1)  188/  FF19C4 : 5244                		addq.w	#1,d4
(1)  189/  FF19C6 :                     .step_2:
(1)  190/  FF19C6 : 4E75                		rts
(1)  191/  FF19C8 :                     
(1)  192/  FF19C8 :                     ; --------------------------------------------------------
(1)  193/  FF19C8 :                     ; System_Random
(1)  194/  FF19C8 :                     ; 
(1)  195/  FF19C8 :                     ; Set random value
(1)  196/  FF19C8 :                     ; 
(1)  197/  FF19C8 :                     ; Output:
(1)  198/  FF19C8 :                     ; d0 | LONG
(1)  199/  FF19C8 :                     ; --------------------------------------------------------
(1)  200/  FF19C8 :                     
(1)  201/  FF19C8 :                     ; TODO: rewrite this
(1)  202/  FF19C8 :                     System_Random:
(1)  203/  FF19C8 : 2A38 97FA           		move.l	(RAM_SysRandSeed),d5
(1)  204/  FF19CC : 2838 97F6           		move.l	(RAM_SysRandVal),d4
(1)  205/  FF19D0 : E39D                		rol.l	#1,d5
(1)  206/  FF19D2 : E284                		asr.l	#1,d4
(1)  207/  FF19D4 : D885                		add.l	d5,d4
(1)  208/  FF19D6 : 23C5 FFFF 97FA      		move.l	d5,(RAM_SysRandSeed).l
(1)  209/  FF19DC : 23C4 FFFF 97F6      		move.l	d4,(RAM_SysRandVal).l
(1)  210/  FF19E2 : 2004                		move.l	d4,d0
(1)  211/  FF19E4 : 4E75                		rts
(1)  212/  FF19E6 :                     
(1)  213/  FF19E6 :                     ; --------------------------------------------------------
(1)  214/  FF19E6 :                     ; System_SineWave_Cos / System_SineWave
(1)  215/  FF19E6 :                     ;
(1)  216/  FF19E6 :                     ; Read sinewave value
(1)  217/  FF19E6 :                     ;
(1)  218/  FF19E6 :                     ; Input:
(1)  219/  FF19E6 :                     ; d0 | WORD - Tan
(1)  220/  FF19E6 :                     ; d1 | WORD - Multiply by
(1)  221/  FF19E6 :                     ;
(1)  222/  FF19E6 :                     ; Output:
(1)  223/  FF19E6 :                     ; d2 | WORD - Result
(1)  224/  FF19E6 :                     ; --------------------------------------------------------
(1)  225/  FF19E6 :                     
(1)  226/  FF19E6 :                     System_SineWave_Cos:
(1)  227/  FF19E6 : 48A7 8000           		movem.w	d0,-(sp)
(1)  228/  FF19EA : 7400                		moveq	#0,d2
(1)  229/  FF19EC : D03C 0040           		add.b	#$40,d0
(1)  230/  FF19F0 : 1400                		move.b	d0,d2
(1)  231/  FF19F2 : E302                		asl.b	#1,d2
(1)  232/  FF19F4 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  233/  FF19F8 : C4C1                		mulu.w	d1,d2
(1)  234/  FF19FA : 8000                		or.b	d0,d0
(1)  235/  FF19FC : 6A02                		bpl.s	.dont_neg
(1)  236/  FF19FE : 4482                		neg.l	d2
(1)  237/  FF1A00 :                     .dont_neg:
(1)  238/  FF1A00 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  239/  FF1A04 : 4E75                		rts
(1)  240/  FF1A06 :                     
(1)  241/  FF1A06 :                     System_SineWave:
(1)  242/  FF1A06 : 48A7 8000           		movem.w	d0,-(sp)
(1)  243/  FF1A0A : C07C 007F           		and.w	#$7F,d0
(1)  244/  FF1A0E : E340                		asl.w	#1,d0
(1)  245/  FF1A10 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  246/  FF1A14 : C4C1                		mulu.w	d1,d2
(1)  247/  FF1A16 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  248/  FF1A1A : 5182                		subq.l	#8,d2
(1)  249/  FF1A1C : 8000                		or.b	d0,d0
(1)  250/  FF1A1E : 6A02                		bpl.s	.dont_neg
(1)  251/  FF1A20 : 4482                		neg.l	d2
(1)  252/  FF1A22 :                     .dont_neg:
(1)  253/  FF1A22 : 4E75                		rts
(1)  254/  FF1A24 :                     
(1)  255/  FF1A24 : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  256/  FF1A3A : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  257/  FF1A4E : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  258/  FF1A62 : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  259/  FF1A76 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  260/  FF1A8A : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  261/  FF1A9E : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  262/  FF1AB0 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  263/  FF1AC4 : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  264/  FF1AD8 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  265/  FF1AEC : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  266/  FF1B00 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  267/  FF1B14 : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  268/  FF1B24 :                     
(1)  269/  FF1B24 :                     ; --------------------------------------------------------
(1)  270/  FF1B24 :                     ; System_SetInts
(1)  271/  FF1B24 :                     ;
(1)  272/  FF1B24 :                     ; Set new interrputs
(1)  273/  FF1B24 :                     ;
(1)  274/  FF1B24 :                     ; d0 | LONG - VBlank
(1)  275/  FF1B24 :                     ; d1 | LONG - HBlank
(1)  276/  FF1B24 :                     ;
(1)  277/  FF1B24 :                     ; Uses:
(1)  278/  FF1B24 :                     ; d4
(1)  279/  FF1B24 :                     ;
(1)  280/  FF1B24 :                     ; Notes:
(1)  281/  FF1B24 :                     ; Writing 0 or a negative number will skip change
(1)  282/  FF1B24 :                     ; to the interrupt pointer
(1)  283/  FF1B24 :                     ; --------------------------------------------------------
(1)  284/  FF1B24 :                     
(1)  285/  FF1B24 :                     System_SetInts:
(1)  286/  FF1B24 : 2800                		move.l	d0,d4
(1)  287/  FF1B26 : 670E                		beq.s	.novint
(1)  288/  FF1B28 : 6B0C                		bmi.s	.novint
(1)  289/  FF1B2A : 88BC 0088 0000      		or.l	#$880000,d4
(1)  290/  FF1B30 : 23C4 FFFF 9804       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  291/  FF1B36 :                     .novint:
(1)  292/  FF1B36 : 2801                		move.l	d1,d4
(1)  293/  FF1B38 : 670E                		beq.s	.nohint
(1)  294/  FF1B3A : 6B0C                		bmi.s	.nohint
(1)  295/  FF1B3C : 88BC 0088 0000      		or.l	#$880000,d4
(1)  296/  FF1B42 : 23C4 FFFF 980A      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  297/  FF1B48 :                     .nohint:
(1)  298/  FF1B48 : 4E75                		rts
(1)  299/  FF1B4A :                     
(1)  300/  FF1B4A :                     ; --------------------------------------------------------
(1)  301/  FF1B4A :                     ; System_SramInit
(1)  302/  FF1B4A :                     ; 
(1)  303/  FF1B4A :                     ; Init save data
(1)  304/  FF1B4A :                     ; 
(1)  305/  FF1B4A :                     ; Uses:
(1)  306/  FF1B4A :                     ; a4,d4-d5
(1)  307/  FF1B4A :                     ; --------------------------------------------------------
(1)  308/  FF1B4A :                     
(1)  309/  FF1B4A :                     ; TODO: Check if RV bit is needed here...
(1)  310/  FF1B4A :                     System_SramInit:
(1)  311/  FF1B4A : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  312/  FF1B52 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  313/  FF1B58 : 7800                		moveq	#0,d4
(1)  314/  FF1B5A : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  315/  FF1B5E :                     .initsave:
(1)  316/  FF1B5E : 1884                		move.b	d4,(a4)
(1)  317/  FF1B60 : D8FC 0002           		adda	#2,a4
(1)  318/  FF1B64 : 51CD FFF8           		dbf	d5,.initsave
(1)  319/  FF1B68 : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  320/  FF1B70 : 4E75                		rts
(1)  321/  FF1B72 :                     
(1)  322/  FF1B72 :                     ; --------------------------------------------------------
(1)  323/  FF1B72 :                     ; System_VSync
(1)  324/  FF1B72 :                     ; 
(1)  325/  FF1B72 :                     ; Waits for VBlank manually
(1)  326/  FF1B72 :                     ; 
(1)  327/  FF1B72 :                     ; Uses:
(1)  328/  FF1B72 :                     ; d4
(1)  329/  FF1B72 :                     ; --------------------------------------------------------
(1)  330/  FF1B72 :                     
(1)  331/  FF1B72 :                     System_VSync:
(1)  332/  FF1B72 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  333/  FF1B78 : 0804 0003           		btst	#bitVint,d4
(1)  334/  FF1B7C : 67F4                		beq.s	System_VSync
(1)  335/  FF1B7E : 6100 FD46           		bsr	System_Input
(1)  336/  FF1B82 :                     ; 		bsr	Sound_Update
(1)  337/  FF1B82 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    97F2                
(1)  338/  FF1B8C : 3839 00C0 0004      .inside:	move.w	(vdp_ctrl),d4
(1)  339/  FF1B92 : 0804 0003           		btst	#bitVint,d4
(1)  340/  FF1B96 : 66F4                		bne.s	.inside
(1)  341/  FF1B98 : 4E75                		rts
(1)  342/  FF1B9A :                     
(1)  343/  FF1B9A :                     ; --------------------------------------------------------
(1)  344/  FF1B9A :                     ; System_JumpRamCode
(1)  345/  FF1B9A :                     ;
(1)  346/  FF1B9A :                     ; Transfer user code to RAM and jump to it.
(1)  347/  FF1B9A :                     ;
(1)  348/  FF1B9A :                     ; Input:
(1)  349/  FF1B9A :                     ; d0 - Location of the RAM code
(1)  350/  FF1B9A :                     ; --------------------------------------------------------
(1)  351/  FF1B9A :                     
(1)  352/  FF1B9A :                     System_JumpRamCode:
(1)  353/  FF1B9A : 80BC 0088 0000      		or.l	#$880000,d0
(1)  354/  FF1BA0 : 2040                		move.l	d0,a0
(1)  355/  FF1BA2 : 43F9 00FF 1BE8      		lea	(RAMCODE_USER),a1
(1)  356/  FF1BA8 : 3E3C 3FFF           		move.w	#$4000-1,d7
(1)  357/  FF1BAC :                     .copyme2:
(1)  358/  FF1BAC : 12D8                		move.b	(a0)+,(a1)+
(1)  359/  FF1BAE : 51CF FFFC           		dbf	d7,.copyme2
(1)  360/  FF1BB2 : 4EF9 00FF 1BE8      		jmp	(RAMCODE_USER).l
(1)  361/  FF1BB8 :                     
(1)  362/  FF1BB8 :                     ; ====================================================================
(1)  363/  FF1BB8 :                     ; --------------------------------------------------------
(1)  364/  FF1BB8 :                     ; 32X Communication, using DREQ
(1)  365/  FF1BB8 :                     ; --------------------------------------------------------
(1)  366/  FF1BB8 :                     
(1)  367/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  368/  FF1BB8 :                     ; ; Add new task to the list
(1)  369/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  370/  FF1BB8 :                     ;
(1)  371/  FF1BB8 :                     ; System_MdMars_MstAddTask:
(1)  372/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTskM).w,a0
(1)  373/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTCntM).w,a1
(1)  374/  FF1BB8 :                     ; 		bra	sysMdMars_instask
(1)  375/  FF1BB8 :                     ;
(1)  376/  FF1BB8 :                     ; System_MdMars_SlvAddTask:
(1)  377/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTskS).w,a0
(1)  378/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTCntS).w,a1
(1)  379/  FF1BB8 :                     ; 		bra	sysMdMars_instask
(1)  380/  FF1BB8 :                     ;
(1)  381/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  382/  FF1BB8 :                     ; ; Single task
(1)  383/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  384/  FF1BB8 :                     ;
(1)  385/  FF1BB8 :                     ; System_MdMars_MstTask:
(1)  386/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTsSgl),a0
(1)  387/  FF1BB8 :                     ; 		lea	(sysmars_reg+comm14),a1
(1)  388/  FF1BB8 :                     ; 		movem.l	d0-d7,(a0)
(1)  389/  FF1BB8 :                     ; 		move.w	#(MAX_MDTSKARG*4),d0
(1)  390/  FF1BB8 :                     ; 		moveq	#1,d1
(1)  391/  FF1BB8 :                     ; 		moveq	#0,d2
(1)  392/  FF1BB8 :                     ; 		bra	sysMdMars_Transfer
(1)  393/  FF1BB8 :                     ;
(1)  394/  FF1BB8 :                     ; System_MdMars_SlvTask:
(1)  395/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTsSgl),a0
(1)  396/  FF1BB8 :                     ; 		lea	(sysmars_reg+comm15),a1
(1)  397/  FF1BB8 :                     ; 		movem.l	d0-d7,(a0)
(1)  398/  FF1BB8 :                     ; 		move.w	#(MAX_MDTSKARG*4),d0
(1)  399/  FF1BB8 :                     ; 		moveq	#1,d1
(1)  400/  FF1BB8 :                     ; 		moveq	#1,d2
(1)  401/  FF1BB8 :                     ; 		bra	sysMdMars_Transfer
(1)  402/  FF1BB8 :                     ;
(1)  403/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  404/  FF1BB8 :                     ; ; Queued tasks
(1)  405/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  406/  FF1BB8 :                     ;
(1)  407/  FF1BB8 :                     ; System_MdMars_MstSendAll:
(1)  408/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTskM),a0
(1)  409/  FF1BB8 :                     ; 		lea	(sysmars_reg+comm14),a1
(1)  410/  FF1BB8 :                     ; 		move.w	(RAM_MdMarsTCntM).w,d0
(1)  411/  FF1BB8 :                     ; 		clr.w	(RAM_MdMarsTCntM).w
(1)  412/  FF1BB8 :                     ; 		moveq	#1,d1
(1)  413/  FF1BB8 :                     ; 		moveq	#0,d2
(1)  414/  FF1BB8 :                     ; 		bra	sysMdMars_Transfer
(1)  415/  FF1BB8 :                     ;
(1)  416/  FF1BB8 :                     ; System_MdMars_SlvSendAll:
(1)  417/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTskS),a0
(1)  418/  FF1BB8 :                     ; 		lea	(sysmars_reg+comm15),a1
(1)  419/  FF1BB8 :                     ; 		move.w	(RAM_MdMarsTCntS).w,d0
(1)  420/  FF1BB8 :                     ; 		clr.w	(RAM_MdMarsTCntS).w
(1)  421/  FF1BB8 :                     ; 		moveq	#1,d1
(1)  422/  FF1BB8 :                     ; 		moveq	#1,d2
(1)  423/  FF1BB8 :                     ; 		bra.s	sysMdMars_Transfer
(1)  424/  FF1BB8 :                     ;
(1)  425/  FF1BB8 :                     ; System_MdMars_MstSendDrop:
(1)  426/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTskM),a0
(1)  427/  FF1BB8 :                     ; 		lea	(sysmars_reg+comm14),a1
(1)  428/  FF1BB8 :                     ; 		move.w	(RAM_MdMarsTCntM).w,d0
(1)  429/  FF1BB8 :                     ; 		moveq	#1,d1
(1)  430/  FF1BB8 :                     ; 		moveq	#0,d2
(1)  431/  FF1BB8 :                     ; 		nop
(1)  432/  FF1BB8 :                     ; 		nop
(1)  433/  FF1BB8 :                     ; 		move.b	(a1),d7
(1)  434/  FF1BB8 :                     ; 		and.w	#$80,d7
(1)  435/  FF1BB8 :                     ; 		beq.s	.go_m
(1)  436/  FF1BB8 :                     ; 		rts
(1)  437/  FF1BB8 :                     ; .go_m:		clr.w	(RAM_MdMarsTCntM).w
(1)  438/  FF1BB8 :                     ; 		bra	sysMdMars_Transfer
(1)  439/  FF1BB8 :                     ;
(1)  440/  FF1BB8 :                     ; System_MdMars_SlvSendDrop:
(1)  441/  FF1BB8 :                     ; 		lea	(RAM_MdMarsTskS),a0
(1)  442/  FF1BB8 :                     ; 		lea	(sysmars_reg+comm15),a1
(1)  443/  FF1BB8 :                     ; 		move.w	(RAM_MdMarsTCntS).w,d0
(1)  444/  FF1BB8 :                     ; 		moveq	#1,d1
(1)  445/  FF1BB8 :                     ; 		moveq	#1,d2
(1)  446/  FF1BB8 :                     ; 		nop
(1)  447/  FF1BB8 :                     ; 		nop
(1)  448/  FF1BB8 :                     ; 		move.b	(a1),d7
(1)  449/  FF1BB8 :                     ; 		and.w	#$80,d7
(1)  450/  FF1BB8 :                     ; 		beq.s	.go_s
(1)  451/  FF1BB8 :                     ; 		moveq	#-1,d7
(1)  452/  FF1BB8 :                     ; 		rts
(1)  453/  FF1BB8 :                     ; .go_s:		clr.w	(RAM_MdMarsTCntS).w
(1)  454/  FF1BB8 :                     ; 		bsr	sysMdMars_Transfer
(1)  455/  FF1BB8 :                     ; 		moveq	#0,d7
(1)  456/  FF1BB8 :                     ; 		rts
(1)  457/  FF1BB8 :                     ;
(1)  458/  FF1BB8 :                     ; ; a0 - task pointer and args
(1)  459/  FF1BB8 :                     ; ; a1 - task list counter
(1)  460/  FF1BB8 :                     ; sysMdMars_instask:
(1)  461/  FF1BB8 :                     ; 		cmp.w	#(MAX_MDTSKARG*MAX_MDTASKS)*4,(a1)
(1)  462/  FF1BB8 :                     ; 		bge.s	.ran_out
(1)  463/  FF1BB8 :                     ; 		adda.w	(a1),a0
(1)  464/  FF1BB8 :                     ; 		movem.l	d0-d7,(a0)		; Set variables to RAM (d0 is the label to jump)
(1)  465/  FF1BB8 :                     ; 		add.w	#MAX_MDTSKARG*4,(a1)
(1)  466/  FF1BB8 :                     ; .ran_out:
(1)  467/  FF1BB8 :                     ; 		rts
(1)  468/  FF1BB8 :                     ;
(1)  469/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  470/  FF1BB8 :                     ; ; sysMdMars_Transfer
(1)  471/  FF1BB8 :                     ; ;
(1)  472/  FF1BB8 :                     ; ; a0 - Data to transfer
(1)  473/  FF1BB8 :                     ; ; a1 - Status byte from the target CPU
(1)  474/  FF1BB8 :                     ; ; d0 - Num of LONGS(4bytes) to transfer
(1)  475/  FF1BB8 :                     ; ; d1 - Transfer type ID
(1)  476/  FF1BB8 :                     ; ; d2 - CMD Interrupt bitset value
(1)  477/  FF1BB8 :                     ; ; 	($00-Master/$01-Slave)
(1)  478/  FF1BB8 :                     ; ; ------------------------------------------------
(1)  479/  FF1BB8 :                     ;
(1)  480/  FF1BB8 :                     ; sysMdMars_Transfer:
(1)  481/  FF1BB8 :                     ; 		nop
(1)  482/  FF1BB8 :                     ; 		nop
(1)  483/  FF1BB8 :                     ; 		move.b	(a1),d4
(1)  484/  FF1BB8 :                     ; 		and.w	#$80,d4
(1)  485/  FF1BB8 :                     ; 		bne.s	sysMdMars_Transfer
(1)  486/  FF1BB8 :                     ; 		lea	(sysmars_reg),a4
(1)  487/  FF1BB8 :                     ; 		move.w	sr,d5
(1)  488/  FF1BB8 :                     ; 		move.w	#$2700,sr		; Disable interrupts
(1)  489/  FF1BB8 :                     ; 		lea	comm8(a4),a3		; comm transfer method
(1)  490/  FF1BB8 :                     ; 		move.b	d1,(a3)			; Set MD task ID
(1)  491/  FF1BB8 :                     ; 		move.b	#$01,1(a3)		; Set SH as busy first
(1)  492/  FF1BB8 :                     ; 		move.w	standby(a4),d4		; Request CMD interrupt
(1)  493/  FF1BB8 :                     ; 		bset	d2,d4
(1)  494/  FF1BB8 :                     ; 		move.w	d4,standby(a4)
(1)  495/  FF1BB8 :                     ; .wait_cmd:	move.w	standby(a4),d4		; CMD cleared?
(1)  496/  FF1BB8 :                     ; 		btst    d2,d4
(1)  497/  FF1BB8 :                     ; 		bne.s   .wait_cmd
(1)  498/  FF1BB8 :                     ; .loop:
(1)  499/  FF1BB8 :                     ; 		cmpi.b	#2,1(a3)		; SH ready?
(1)  500/  FF1BB8 :                     ; 		bne.s	.loop
(1)  501/  FF1BB8 :                     ; 		move.w	d1,d4
(1)  502/  FF1BB8 :                     ; 		or.w	#$80,d4
(1)  503/  FF1BB8 :                     ; 		move.b	d4,(a3)			; MD is busy
(1)  504/  FF1BB8 :                     ; 		tst.w	d0
(1)  505/  FF1BB8 :                     ; 		beq.s	.exit
(1)  506/  FF1BB8 :                     ; 		bmi.s	.exit
(1)  507/  FF1BB8 :                     ; 		move.l	(a0),d4
(1)  508/  FF1BB8 :                     ; 		clr.l	(a0)+
(1)  509/  FF1BB8 :                     ; 		move.w	d4,4(a3)
(1)  510/  FF1BB8 :                     ; 		swap	d4
(1)  511/  FF1BB8 :                     ; 		move.w	d4,2(a3)
(1)  512/  FF1BB8 :                     ; 		move.w	d1,d4
(1)  513/  FF1BB8 :                     ; 		or.w	#$40,d4
(1)  514/  FF1BB8 :                     ; 		move.b	d4,(a3)			; MD is ready
(1)  515/  FF1BB8 :                     ; 		sub.w	#4,d0
(1)  516/  FF1BB8 :                     ; 		bra.s	.loop
(1)  517/  FF1BB8 :                     ; .exit:
(1)  518/  FF1BB8 :                     ; 		move.b	#0,(a3)			; MD finished
(1)  519/  FF1BB8 :                     ; 		move.w	d5,sr
(1)  520/  FF1BB8 :                     ; .mid_write:
(1)  521/  FF1BB8 :                     ; 		rts
(1)  522/  FF1BB8 :                     
(1)  523/  FF1BB8 :                     ; --------------------------------------------------------
(1)  524/  FF1BB8 :                     ; Initialize current screen mode
(1)  525/  FF1BB8 :                     ; --------------------------------------------------------
(1)  526/  FF1BB8 :                     
(1)  527/  FF1BB8 :                     Mode_Init:
(1)  528/  FF1BB8 : 6100 E6FA           		bsr	Video_Clear
(1)  529/  FF1BBC : 49F8 8800           		lea	(RAM_ModeBuff),a4
(1)  530/  FF1BC0 : 3A3C 03FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  531/  FF1BC4 : 7800                		moveq	#0,d4
(1)  532/  FF1BC6 :                     .clr:
(1)  533/  FF1BC6 : 38C4                		move.w	d4,(a4)+
(1)  534/  FF1BC8 : 51CD FFFC           		dbf	d5,.clr
(1)  535/  FF1BCC : 4E75                		rts
(1)  536/  FF1BCE :                     
(1)  537/  FF1BCE :                     ; MdMars_FIFO:
(1)  538/  FF1BCE :                     ; 		move.w	#$100,d4
(1)  539/  FF1BCE :                     ; 		move.w	d4,($A15110).l
(1)  540/  FF1BCE :                     ; 		move.b	#%100,($A15107).l
(1)  541/  FF1BCE :                     ; loc_0_28E2:
(1)  542/  FF1BCE :                     ; 		btst	#1,(sysmars_reg+comm14).l
(1)  543/  FF1BCE :                     ; 		beq.s	loc_0_28E2
(1)  544/  FF1BCE :                     ; 		bclr	#1,(sysmars_reg+comm14).l
(1)  545/  FF1BCE :                     ; 		lea	($FF0000).l,a4
(1)  546/  FF1BCE :                     ; 		lea	($A15112).l,a5
(1)  547/  FF1BCE :                     ; 		lsr.w	#2,d4
(1)  548/  FF1BCE :                     ; 		beq.s	.exit
(1)  549/  FF1BCE :                     ; .fifo_blast:
(1)  550/  FF1BCE :                     ; 		btst	#7,($A15107).l
(1)  551/  FF1BCE :                     ; 		bne.s	.fifo_blast
(1)  552/  FF1BCE :                     ; 		move.w	(a4)+,(a5)
(1)  553/  FF1BCE :                     ; 		dbf	d4,.fifo_blast
(1)  554/  FF1BCE :                     ; .exit:
(1)  555/  FF1BCE :                     ; 		rts
(1)  556/  FF1BCE :                     
(1)  557/  FF1BCE :                     ; ====================================================================
(1)  558/  FF1BCE :                     ; ----------------------------------------------------------------
(1)  559/  FF1BCE :                     ; Default interrupts
(1)  560/  FF1BCE :                     ; ----------------------------------------------------------------
(1)  561/  FF1BCE :                     
(1)  562/  FF1BCE :                     ; --------------------------------------------------------
(1)  563/  FF1BCE :                     ; VBlank
(1)  564/  FF1BCE :                     ; --------------------------------------------------------
(1)  565/  FF1BCE :                     
(1)  566/  FF1BCE :                     VInt_Default:
(1)  567/  FF1BCE : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  568/  FF1BD2 : 6100 FCF2           		bsr	System_Input
(1)  569/  FF1BD6 :                     ; 		bsr	Sound_Update
(1)  570/  FF1BD6 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    97F2                
(1)  571/  FF1BE0 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  572/  FF1BE4 : 4E73                		rte
(1)  573/  FF1BE6 :                     
(1)  574/  FF1BE6 :                     ; --------------------------------------------------------
(1)  575/  FF1BE6 :                     ; HBlank
(1)  576/  FF1BE6 :                     ; --------------------------------------------------------
(1)  577/  FF1BE6 :                     
(1)  578/  FF1BE6 :                     HInt_Default:
(1)  579/  FF1BE6 : 4E73                		rte
(1)  580/  FF1BE8 :                     		
(1)  581/  FF1BE8 :                     ; ====================================================================
(1)  582/  FF1BE8 :                     ; ----------------------------------------------------------------
(1)  583/  FF1BE8 :                     ; System data
(1)  584/  FF1BE8 :                     ; ----------------------------------------------------------------
(1)  585/  FF1BE8 :                     
(1)  586/  FF1BE8 :                     
(1)  587/  FF1BE8 :                     
      36/  FF1BE8 :                     ; 	if MOMPASS=6
      37/  FF1BE8 :                     .here:
      38/  FF1BE8 :                     ; 		message "MD TOP RAM-CODE uses: \{.here-minfo_ram_s}"
      39/  FF1BE8 :                     ; 	endif
      40/  FF1BE8 :                     RAMCODE_USER:
      41/    2520 :                     		dephase
      42/    2520 :                     MdRamCode_end:
      43/    2520 :                     		align 2
      44/    2520 :                     
      45/    2520 :                     ; ----------------------------------------------------------------
      46/    2520 :                     ; Z80 code
      47/    2520 :                     ; Located at the 880000 area
      48/    2520 :                     ; ----------------------------------------------------------------
      49/    2520 :                     
      50/    2520 :                     		align 4
      51/    2520 :                     Z80_CODE:
      52/    2520 :                     		include "system/md/z_driver.asm"
(1)    1/    2520 :                     ; --------------------------------------------------------
(1)    2/    2520 :                     ; GEMA sound driver, inspired by GEMS (kinda)
(1)    3/    2520 :                     ;
(1)    4/    2520 :                     ; Two playable track slots: BGM(0) and SFX(1)
(1)    5/    2520 :                     ;
(1)    6/    2520 :                     ; Slot 1 can either overwrite chip channels or
(1)    7/    2520 :                     ; if possible grab unused slots
(1)    8/    2520 :                     ;
(1)    9/    2520 :                     ; WARNING: DAC sample playback has to be sync'd manually
(1)   10/    2520 :                     ; on every code change, sample rate is at the
(1)   11/    2520 :                     ; 18000hz range
(1)   12/    2520 :                     ; --------------------------------------------------------
(1)   13/    2520 :                     
(1)   14/    2520 :                     		cpu Z80			; Set Z80 here
(1)   15/       0 :                     		phase 0			; And set PC to 0
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; User settings
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : =11H                MAX_TRKCHN	equ 17		; Max internal tracker channels (4PSG + 6FM + 7PWM)
(1)   22/       0 : =FFFFFFFFFFF..      ZSET_WTUNE	equ -24		; Manual frequency adjustment for DAC WAVE playback
(1)   23/       0 : =0H                 ZSET_TESTME	equ 0		; ***TESTING*** Set to 1 to hear-test DAC playback
(1)   24/       0 :                     
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     ; Structs
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; NOTE: struct doesn't work here. use equs instead
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 :                     ; trkBuff struct
(1)   32/       0 :                     ; LIMIT: 20h (32) bytes
(1)   33/       0 : =0H                 trk_romBlk	equ 0		; 24-bit base block data
(1)   34/       0 : =3H                 trk_romPatt	equ 3		; 24-bit base patt data
(1)   35/       0 : =6H                 trk_romIns	equ 6		; 24-bit ROM instrument pointers
(1)   36/       0 : =9H                 trk_romPattRd	equ 9		; same but for reading
(1)   37/       0 : =CH                 trk_Read	equ 12		; Current track position (in cache)
(1)   38/       0 : =EH                 trk_Rows	equ 14		; Current track length
(1)   39/       0 : =10H                trk_Halfway	equ 16		; Only 00h or 80h
(1)   40/       0 : =11H                trk_currBlk	equ 17		; Current block
(1)   41/       0 : =12H                trk_setBlk	equ 18		; Start on this block
(1)   42/       0 : =13H                trk_status	equ 19		; %ERBx xxxx | E-enabled / R-Init|Restart track / B-use global beats
(1)   43/       0 : =14H                trk_tickTmr	equ 20		; Ticks timer
(1)   44/       0 : =15H                trk_tickSet	equ 21		; Ticks set for this track
(1)   45/       0 : =16H                trk_numTrks	equ 22		; Max tracks used
(1)   46/       0 : =17H                trk_sizeIns	equ 23		; Max instruments used
(1)   47/       0 : =18H                trk_rowPause	equ 24
(1)   48/       0 : =19H                trk_HdHalfway	equ 25		; Track heads reload byte
(1)   49/       0 : =1AH                trk_CachNotes	equ 26		; Buff'd Track (100h bytes)
(1)   50/       0 : =1CH                trk_CachHeads	equ 28		; Buff'd Track heads
(1)   51/       0 : =1EH                trk_CachIns	equ 30
(1)   52/       0 :                     
(1)   53/       0 :                     ; Track data: 8 bytes only
(1)   54/       0 : =0H                 chnl_Chip	equ 0		; MUST BE at 0
(1)   55/       0 : =1H                 chnl_Note	equ 1
(1)   56/       0 : =2H                 chnl_Ins	equ 2
(1)   57/       0 : =3H                 chnl_Vol	equ 3
(1)   58/       0 : =4H                 chnl_EffId	equ 4
(1)   59/       0 : =5H                 chnl_EffArg	equ 5
(1)   60/       0 : =6H                 chnl_Type	equ 6		; Impulse-note bits
(1)   61/       0 : =7H                 chnl_Flags	equ 7		; playback requests and other specific bits
(1)   62/       0 :                     
(1)   63/       0 :                     ; --------------------------------------------------------
(1)   64/       0 :                     ; Variables
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     
(1)   67/       0 :                     ; To brute force DAC playback
(1)   68/       0 :                     ; on or off
(1)   69/       0 : =0H                 zopcNop		equ	00h
(1)   70/       0 : =8H                 zopcEx		equ	08h
(1)   71/       0 : =C9H                zopcRet		equ 	0C9h
(1)   72/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)   73/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)   74/       0 :                     
(1)   75/       0 :                     ; PSG external control
(1)   76/       0 : =0H                 COM		equ	0
(1)   77/       0 : =4H                 LEV		equ	4
(1)   78/       0 : =8H                 ATK		equ	8
(1)   79/       0 : =CH                 DKY		equ	12
(1)   80/       0 : =10H                SLV		equ	16
(1)   81/       0 : =14H                RRT		equ	20
(1)   82/       0 : =18H                MODE		equ	24
(1)   83/       0 : =1CH                DTL		equ	28
(1)   84/       0 : =20H                DTH		equ	32
(1)   85/       0 : =24H                ALV		equ	36
(1)   86/       0 : =28H                FLG		equ	40
(1)   87/       0 : =2CH                TMR		equ	44
(1)   88/       0 : =30H                PVOL		equ	48
(1)   89/       0 :                     
(1)   90/       0 :                     ; FMCOM		equ	0
(1)   91/       0 : =6H                 FMKEYS		equ	6
(1)   92/       0 : =CH                 FMVOL		equ	12
(1)   93/       0 : =12H                FMPAN 		equ	18
(1)   94/       0 : =18H                FMFRQH		equ	24
(1)   95/       0 : =1EH                FMFRQL		equ	30
(1)   96/       0 :                     
(1)   97/       0 : =0H                 PWCOM		equ	0
(1)   98/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB
(1)   99/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  100/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | SH2 section (ROM $02 or SDRAM $06)
(1)  101/       0 : =20H                PWINSH		equ	32	; 24-bit sample address
(1)  102/       0 : =28H                PWINSM		equ	40
(1)  103/       0 : =30H                PWINSL		equ	48
(1)  104/       0 :                     
(1)  105/       0 :                     ; ====================================================================
(1)  106/       0 :                     ; --------------------------------------------------------
(1)  107/       0 :                     ; Code starts here
(1)  108/       0 :                     ; --------------------------------------------------------
(1)  109/       0 :                     
(1)  110/       0 : F3                  		di			; Disable interrputs
(1)  111/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  112/       3 : 31 00 1B            		ld	sp,zStack	; Set stack at the end of Z80
(1)  113/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  114/       8 :                     
(1)  115/       8 :                     ; --------------------------------------------------------
(1)  116/       8 :                     ; RST 8 (dac_me)
(1)  117/       8 :                     ;
(1)  118/       8 :                     ; Writes wave data to DAC using the data stored
(1)  119/       8 :                     ; on the wave buffer.
(1)  120/       8 :                     ; call this routine every 6 or more lines of code to
(1)  121/       8 :                     ; keep playing the sample while processing code
(1)  122/       8 :                     ;
(1)  123/       8 :                     ; Input (EXX):
(1)  124/       8 :                     ;  c - WAVEFIFO MSB
(1)  125/       8 :                     ; de - Pitch (xx.00)
(1)  126/       8 :                     ; h  - WAVEFIFO LSB (as xx.00)
(1)  127/       8 :                     ;
(1)  128/       8 :                     ; Uses (EXX):
(1)  129/       8 :                     ; b
(1)  130/       8 :                     ;
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ; call dac_on to enable WAVE playback
(1)  133/       8 :                     ; or
(1)  134/       8 :                     ; call dac_off to disable it
(1)  135/       8 :                     ; (check for FM6 manually)
(1)  136/       8 :                     ; --------------------------------------------------------
(1)  137/       8 :                     
(1)  138/       8 :                     ; NOTE: This plays at 18000hz
(1)  139/       8 : (MACRO)             		org	8
(1)  140/       8 : D9                  dac_me:		exx			; <-- opcode changes between EXX(play) and RET(stop)
(1)  141/       9 : 08                  		ex	af,af'		; get our alt A/F
(1)  142/       A : 45                  		ld	b,l		; save l to b
(1)  143/       B : 3E 2A               		ld	a,2Ah		; Prepare DAC register
(1)  144/       D : 32 00 40            		ld	(Zym_ctrl_1),a
(1)  145/      10 : 6C                  		ld	l,h		; xx.00 to 00xx
(1)  146/      11 : 61                  		ld	h,c		; Buffer MSB | 00xx
(1)  147/      12 : 7E                  		ld	a,(hl)		; Write WAVE byte
(1)  148/      13 : 32 01 40            		ld	(Zym_data_1),a
(1)  149/      16 : 65                  		ld	h,l		; get hl back
(1)  150/      17 : 68                  		ld	l,b
(1)  151/      18 : 19                  		add	hl,de		; Add pitch for next byte
(1)  152/      19 : 08                  		ex	af,af'
(1)  153/      1A : D9                  		exx
(1)  154/      1B : C9                  		ret
(1)  155/      1C : 00                  commZRomBlk	db 0			; 68k ROM block flag
(1)  156/      1D : 00                  commZRomRd	db 0			; Z80 ROM reading flag
(1)  157/      1E : 00                  commZRead	db 0			; cmd read pointer (here)
(1)  158/      1F : 00                  commZWrite	db 0			; cmd fifo wptr (from 68k)
(1)  159/      20 : 00 00               wave_Start	dw 0			; START: 68k 24-bit pointer
(1)  160/      22 : 00                  		db 0
(1)  161/      23 : 00 00               wave_Len	dw 0			; LENGTH 24-bit
(1)  162/      25 : 00                  		db 0
(1)  163/      26 : 00 00               wave_Loop	dw 0			; LOOP POINT 24-bit (MUST BE BELOW wave_Len)
(1)  164/      28 : 00                  		db 0
(1)  165/      29 : 00 01               wave_Pitch	dw 0100h		; 01.00h
(1)  166/      2B : 00                  wave_Flags	db 0			; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1)  167/      2C : 00                  palMode		db 0
(1)  168/      2D : 00                  marsBlock	db 0		; 1 - to disable PWM comm
(1)  169/      2E : 00                  marsUpd		db 0		; update PWM sound
(1)  170/      2F : E0 00               sbeatPtck	dw 224	; Sub beats per tick (8frac), default is 120bpm
(1)  171/      31 : 00 00               sbeatAcc	dw 0		; Accumulates ^^ each tick to track sub beats
(1)  172/      33 :                     
(1)  173/      33 :                     ; --------------------------------------------------------
(1)  174/      33 :                     ; Z80 Interrupt at 0038h
(1)  175/      33 :                     ;
(1)  176/      33 :                     ; Sets the TICK flag
(1)  177/      33 :                     ; --------------------------------------------------------
(1)  178/      33 :                     
(1)  179/      33 : (MACRO)             		org 38h			; Align 38h
(1)  179/      33 : 00                                                  db 0
(1)  179/      34 : 00                                                  db 0
(1)  179/      35 : 00                                                  db 0
(1)  179/      36 : 00                                                  db 0
(1)  179/      37 : 00                                                  db 0
(1)  179/      38 :                     
(1)  180/      38 : ED 73 60 19         		ld	(tickFlag),sp	; Use sp to set TICK flag (xx1F, read as tickFlag+1)
(1)  181/      3C : F3                  		di			; Disable interrupt until next request
(1)  182/      3D : C9                  		ret
(1)  183/      3E :                     
(1)  184/      3E :                     ; --------------------------------------------------------
(1)  185/      3E :                     ; Initilize
(1)  186/      3E :                     ; --------------------------------------------------------
(1)  187/      3E :                     
(1)  188/      3E :                     z80_init:
(1)  189/      3E : CD F3 0E            		call	gema_init	; Initilize VBLANK sound driver
(1)  190/      41 : FB                  		ei
(1)  191/      42 :                     
(1)  192/      42 :                     ; --------------------------------------------------------
(1)  193/      42 :                     ; MAIN LOOP
(1)  194/      42 :                     ; --------------------------------------------------------
(1)  195/      42 :                     
(1)  196/      42 :                     drv_loop:
(1)  197/      42 : CF                  		rst	8
(1)  198/      43 : CD 54 0F            		call	get_tick	; Check for tick on VBlank
(1)  199/      46 : CD 2F 14            		call	dac_fill
(1)  200/      49 : CF                  		rst	8
(1)  201/      4A : 06 00               		ld	b,0		; b - Reset current flags (beat|tick)
(1)  202/      4C : 3A 62 19            		ld	a,(tickCnt)
(1)  203/      4F : D6 01               		sub	1
(1)  204/      51 : 38 0C               		jr	c,.noticks
(1)  205/      53 : 32 62 19            		ld	(tickCnt),a
(1)  206/      56 : CF                  		rst	8
(1)  207/      57 : CD 5F 10            		call	chip_env	; Process PSG volume and freqs manually
(1)  208/      5A : CD 54 0F            		call	get_tick	; Check for another tick
(1)  209/      5D : 06 01               		ld 	b,01b		; Set TICK (01b) flag, and clear BEAT
(1)  210/      5F :                     .noticks:
(1)  211/      5F : 3A 32 00            		ld	a,(sbeatAcc+1)	; check beat counter (scaled by tempo)
(1)  212/      62 : D6 01               		sub	1
(1)  213/      64 : 38 06               		jr	c,.nobeats
(1)  214/      66 : 32 32 00            		ld	(sbeatAcc+1),a	; 1/24 beat passed.
(1)  215/      69 : CB C8               		set	1,b		; Set BEAT (10b) flag
(1)  216/      6B : CF                  		rst	8
(1)  217/      6C :                     .nobeats:
(1)  218/      6C : CF                  		rst	8
(1)  219/      6D : 78                  		ld	a,b
(1)  220/      6E : B7                  		or	a
(1)  221/      6F : 28 13               		jr	z,.neither
(1)  222/      71 : 32 6D 1A            		ld	(currTickBits),a; Save BEAT/TICK bits
(1)  223/      74 : CD 54 0F            		call	get_tick
(1)  224/      77 : CD 9A 05            		call	setupchip	; Setup note changes to soundchips
(1)  225/      7A : CD 54 0F            		call	get_tick
(1)  226/      7D : CD D0 01            		call	updtrack	; Update track data
(1)  227/      80 : CD 54 0F            		call	get_tick
(1)  228/      83 : CF                  		rst	8
(1)  229/      84 :                     .neither:
(1)  230/      84 : CD 16 05            		call	mars_scomm
(1)  231/      87 : CD 54 0F            		call	get_tick
(1)  232/      8A : CF                  		rst	8
(1)  233/      8B :                     .next_cmd:
(1)  234/      8B :                     ; 		call	dac_fill	; Critical for syncing wave
(1)  235/      8B : 3A 1F 00            		ld	a,(commZWrite)
(1)  236/      8E : 47                  		ld	b,a
(1)  237/      8F : 3A 1E 00            		ld	a,(commZRead)
(1)  238/      92 : B8                  		cp	b
(1)  239/      93 : 28 AD               		jr	z,drv_loop
(1)  240/      95 : CD AF 01            		call	get_cmdbyte
(1)  241/      98 : FE FF               		cp	-1		; Get -1 (Start of command)
(1)  242/      9A : 20 A6               		jr	nz,drv_loop
(1)  243/      9C : CD AF 01            		call	get_cmdbyte	; Read cmd number
(1)  244/      9F : 87                  		add	a,a
(1)  245/      A0 : 21 AC 00            		ld	hl,.list
(1)  246/      A3 : 16 00               		ld	d,0
(1)  247/      A5 : 5F                  		ld	e,a
(1)  248/      A6 : 19                  		add	hl,de
(1)  249/      A7 :                     ; 		call	dac_fill
(1)  250/      A7 : 7E                  		ld	a,(hl)
(1)  251/      A8 : 23                  		inc	hl
(1)  252/      A9 : 66                  		ld	h,(hl)
(1)  253/      AA : 6F                  		ld	l,a
(1)  254/      AB : E9                  		jp	(hl)
(1)  255/      AC :                     .list:
(1)  256/      AC : F0 00               		dw .cmnd_trkplay	; $00 - Play
(1)  257/      AE : 49 01               		dw .cmnd_trkstop	; $01 - Stop
(1)  258/      B0 : 59 01               		dw .cmnd_trkpause	; $02 - Pause
(1)  259/      B2 : 66 01               		dw .cmnd_trkresume	; $03 - Resume
(1)  260/      B4 : EC 00               		dw .cmnd_0		; $04 - Fade out
(1)  261/      B6 : EC 00               		dw .cmnd_0		; $05 - Fade in
(1)  262/      B8 : EC 00               		dw .cmnd_0		; $06 - Set master volume
(1)  263/      BA : EC 00               		dw .cmnd_0		; $07 -
(1)  264/      BC : 73 01               		dw .cmnd_trkticks	; $08 - Set ticks
(1)  265/      BE : EC 00               		dw .cmnd_0		; $09 -
(1)  266/      C0 : EC 00               		dw .cmnd_0		; $0A -
(1)  267/      C2 : EC 00               		dw .cmnd_0		; $0B -
(1)  268/      C4 : EC 00               		dw .cmnd_0		; $0C -
(1)  269/      C6 : EC 00               		dw .cmnd_0		; $0D -
(1)  270/      C8 : EC 00               		dw .cmnd_0		; $0E -
(1)  271/      CA : EC 00               		dw .cmnd_0		; $0F -
(1)  272/      CC : 85 01               		dw .cmnd_trktempo	; $10 - Set global tempo
(1)  273/      CE : EC 00               		dw .cmnd_0
(1)  274/      D0 : EC 00               		dw .cmnd_0
(1)  275/      D2 : EC 00               		dw .cmnd_0
(1)  276/      D4 : EC 00               		dw .cmnd_0		; $14
(1)  277/      D6 : EC 00               		dw .cmnd_0
(1)  278/      D8 : EC 00               		dw .cmnd_0
(1)  279/      DA : EC 00               		dw .cmnd_0
(1)  280/      DC : EC 00               		dw .cmnd_0		; $18
(1)  281/      DE : EC 00               		dw .cmnd_0
(1)  282/      E0 : EC 00               		dw .cmnd_0
(1)  283/      E2 : EC 00               		dw .cmnd_0
(1)  284/      E4 : EC 00               		dw .cmnd_0		; $1C
(1)  285/      E6 : EC 00               		dw .cmnd_0
(1)  286/      E8 : EC 00               		dw .cmnd_0
(1)  287/      EA : EC 00               		dw .cmnd_0
(1)  288/      EC :                     
(1)  289/      EC :                     ; --------------------------------------------------------
(1)  290/      EC :                     ; Command list
(1)  291/      EC :                     ; --------------------------------------------------------
(1)  292/      EC :                     
(1)  293/      EC :                     .cmnd_0:
(1)  294/      EC : 18 FE               		jr	$
(1)  295/      EE : 18 9B               		jr	.next_cmd
(1)  296/      F0 :                     
(1)  297/      F0 :                     ; --------------------------------------------------------
(1)  298/      F0 :                     ; $01 - Set NEW track
(1)  299/      F0 :                     ; --------------------------------------------------------
(1)  300/      F0 :                     
(1)  301/      F0 :                     ; Slot
(1)  302/      F0 :                     ; Ticks
(1)  303/      F0 :                     ; 24-bit patt data
(1)  304/      F0 :                     ; 24-bit block data
(1)  305/      F0 :                     .cmnd_trkplay:
(1)  306/      F0 : CD AF 01            		call	get_cmdbyte		; Get track slot
(1)  307/      F3 : CD 9A 01            		call	get_trkindx		; and read index iy
(1)  308/      F6 : CD AF 01            		call	get_cmdbyte		; Get ticks
(1)  309/      F9 : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  310/      FC : CD AF 01            		call	get_cmdbyte		; Start block
(1)  311/      FF : FD 77 12            		ld	(iy+trk_setBlk),a
(1)  312/     102 : CD AF 01            		call	get_cmdbyte		; Flag bits
(1)  313/     105 : F6 C0               		or	11000000b		; Enable + First fill bits
(1)  314/     107 : FD 77 13            		ld	(iy+trk_status),a
(1)  315/     10A : CD AF 01            		call	get_cmdbyte		; Pattern data
(1)  316/     10D : FD 77 03            		ld	(iy+trk_romPatt),a
(1)  317/     110 : CD AF 01            		call	get_cmdbyte
(1)  318/     113 : FD 77 04            		ld	(iy+(trk_romPatt+1)),a
(1)  319/     116 : CD AF 01            		call	get_cmdbyte
(1)  320/     119 : FD 77 05            		ld	(iy+(trk_romPatt+2)),a
(1)  321/     11C : CD AF 01            		call	get_cmdbyte		; Block data
(1)  322/     11F : FD 77 00            		ld	(iy+trk_romBlk),a
(1)  323/     122 : CD AF 01            		call	get_cmdbyte
(1)  324/     125 : FD 77 01            		ld	(iy+(trk_romBlk+1)),a
(1)  325/     128 : CD AF 01            		call	get_cmdbyte
(1)  326/     12B : FD 77 02            		ld	(iy+(trk_romBlk+2)),a
(1)  327/     12E : CD AF 01            		call	get_cmdbyte		; Instrument data
(1)  328/     131 : FD 77 06            		ld	(iy+trk_romIns),a
(1)  329/     134 : CD AF 01            		call	get_cmdbyte
(1)  330/     137 : FD 77 07            		ld	(iy+(trk_romIns+1)),a
(1)  331/     13A : CD AF 01            		call	get_cmdbyte
(1)  332/     13D : FD 77 08            		ld	(iy+(trk_romIns+2)),a
(1)  333/     140 : 3E 01               		ld	a,1
(1)  334/     142 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  335/     145 : CF                  		rst	8
(1)  336/     146 : C3 8B 00            		jp	.next_cmd
(1)  337/     149 :                     
(1)  338/     149 :                     ; --------------------------------------------------------
(1)  339/     149 :                     ; $02 - STOP track
(1)  340/     149 :                     ; --------------------------------------------------------
(1)  341/     149 :                     
(1)  342/     149 :                     .cmnd_trkstop:
(1)  343/     149 : CD AF 01            		call	get_cmdbyte		; Get track slot
(1)  344/     14C : CD 9A 01            		call	get_trkindx		; and read index iy
(1)  345/     14F : FD 36 13 00         		ld	(iy+trk_status),0
(1)  346/     153 : CD 7A 04            		call	track_out
(1)  347/     156 : C3 8B 00            		jp	.next_cmd
(1)  348/     159 :                     
(1)  349/     159 :                     ; --------------------------------------------------------
(1)  350/     159 :                     ; $03 - Pause track
(1)  351/     159 :                     ; --------------------------------------------------------
(1)  352/     159 :                     
(1)  353/     159 :                     .cmnd_trkpause:
(1)  354/     159 : CD AF 01            		call	get_cmdbyte		; Get track slot
(1)  355/     15C : CD 9A 01            		call	get_trkindx		; and read index iy
(1)  356/     15F : FD CB 13 BE         		res	7,(iy+trk_status)
(1)  357/     163 :                     ; 		call	track_out
(1)  358/     163 : C3 8B 00            		jp	.next_cmd
(1)  359/     166 :                     
(1)  360/     166 :                     ; --------------------------------------------------------
(1)  361/     166 :                     ; $04 - Resume track
(1)  362/     166 :                     ; --------------------------------------------------------
(1)  363/     166 :                     
(1)  364/     166 :                     .cmnd_trkresume:
(1)  365/     166 : CD AF 01            		call	get_cmdbyte		; Get track slot
(1)  366/     169 : CD 9A 01            		call	get_trkindx		; and read index iy
(1)  367/     16C : FD CB 13 FE         		set	7,(iy+trk_status)
(1)  368/     170 :                     ; 		call	track_out
(1)  369/     170 : C3 8B 00            		jp	.next_cmd
(1)  370/     173 :                     
(1)  371/     173 :                     ; --------------------------------------------------------
(1)  372/     173 :                     ; $08 - Set tricks
(1)  373/     173 :                     ; --------------------------------------------------------
(1)  374/     173 :                     
(1)  375/     173 :                     .cmnd_trkticks:
(1)  376/     173 : CD AF 01            		call	get_cmdbyte		; Get track slot
(1)  377/     176 : CD 9A 01            		call	get_trkindx		; and read index iyc
(1)  378/     179 : CD AF 01            		call	get_cmdbyte
(1)  379/     17C : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  380/     17F : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  381/     182 : C3 8B 00            		jp	.next_cmd
(1)  382/     185 :                     
(1)  383/     185 :                     ; --------------------------------------------------------
(1)  384/     185 :                     ; $10 - Set global tempo
(1)  385/     185 :                     ; --------------------------------------------------------
(1)  386/     185 :                     
(1)  387/     185 :                     .cmnd_trktempo:
(1)  388/     185 : CD AF 01            		call	get_cmdbyte		; Get track slot
(1)  389/     188 : CD 9A 01            		call	get_trkindx		; and read index iyc
(1)  390/     18B : CD AF 01            		call	get_cmdbyte
(1)  391/     18E : 32 2F 00            		ld	(sbeatPtck),a
(1)  392/     191 : CD AF 01            		call	get_cmdbyte
(1)  393/     194 : 32 30 00            		ld	(sbeatPtck+1),a
(1)  394/     197 : C3 8B 00            		jp	.next_cmd
(1)  395/     19A :                     
(1)  396/     19A :                     ; --------------------------------------------------------
(1)  397/     19A :                     ; a - track index
(1)  398/     19A :                     
(1)  399/     19A :                     get_trkindx:
(1)  400/     19A : 21 AB 01            		ld	hl,.trkpos
(1)  401/     19D : 87                  		add	a,a
(1)  402/     19E : 16 00               		ld	d,0
(1)  403/     1A0 : 5F                  		ld	e,a
(1)  404/     1A1 : CF                  		rst	8
(1)  405/     1A2 : 19                  		add	hl,de
(1)  406/     1A3 : 7E                  		ld	a,(hl)
(1)  407/     1A4 : 23                  		inc	hl
(1)  408/     1A5 : 66                  		ld	h,(hl)
(1)  409/     1A6 : 6F                  		ld	l,a
(1)  410/     1A7 : E5                  		push	hl
(1)  411/     1A8 : FD E1               		pop	iy
(1)  412/     1AA : C9                  		ret
(1)  413/     1AB :                     .trkpos:
(1)  414/     1AB : 00 1C               		dw trkBuff_0
(1)  415/     1AD : 00 1D               		dw trkBuff_1
(1)  416/     1AF :                     
(1)  417/     1AF :                     ; --------------------------------------------------------
(1)  418/     1AF :                     ; Read cmd byte, auto re-aligns to 7Fh
(1)  419/     1AF :                     ; --------------------------------------------------------
(1)  420/     1AF :                     
(1)  421/     1AF :                     get_cmdbyte:
(1)  422/     1AF : C5                  		push	bc
(1)  423/     1B0 : D5                  		push	de
(1)  424/     1B1 : E5                  		push	hl
(1)  425/     1B2 :                     .getcbytel:
(1)  426/     1B2 : 3A 1F 00            		ld	a,(commZWrite)
(1)  427/     1B5 : 47                  		ld	b,a
(1)  428/     1B6 : 3A 1E 00            		ld	a,(commZRead)
(1)  429/     1B9 : B8                  		cp	b
(1)  430/     1BA : 28 F6               		jr	z,.getcbytel	; wait for a command from 68k
(1)  431/     1BC : CF                  		rst	8
(1)  432/     1BD : 06 00               		ld	b,0
(1)  433/     1BF : 4F                  		ld	c,a
(1)  434/     1C0 : 21 20 19            		ld	hl,commZfifo
(1)  435/     1C3 : 09                  		add	hl,bc
(1)  436/     1C4 : 3C                  		inc	a
(1)  437/     1C5 : E6 3F               		and	3Fh		; command list limit
(1)  438/     1C7 : CF                  		rst	8
(1)  439/     1C8 : 32 1E 00            		ld	(commZRead),a
(1)  440/     1CB : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  441/     1CC : E1                  		pop	hl
(1)  442/     1CD : D1                  		pop	de
(1)  443/     1CE : C1                  		pop	bc
(1)  444/     1CF : C9                  		ret
(1)  445/     1D0 :                     
(1)  446/     1D0 :                     ; ====================================================================
(1)  447/     1D0 :                     ; ----------------------------------------------------------------
(1)  448/     1D0 :                     ; Sound playback code
(1)  449/     1D0 :                     ; ----------------------------------------------------------------
(1)  450/     1D0 :                     
(1)  451/     1D0 :                     ; --------------------------------------------------------
(1)  452/     1D0 :                     ; Read track data
(1)  453/     1D0 :                     ; --------------------------------------------------------
(1)  454/     1D0 :                     
(1)  455/     1D0 :                     updtrack:
(1)  456/     1D0 : CD 2F 14            		call	dac_fill
(1)  457/     1D3 : FD 21 00 1C         		ld	iy,trkBuff_0		; BGM
(1)  458/     1D7 : CF                  		rst	8
(1)  459/     1D8 : 11 66 19            		ld	de,insDataC_0
(1)  460/     1DB : CD EA 01            		call	.read_track
(1)  461/     1DE : FD 21 00 1D         		ld	iy,trkBuff_1		; SFX
(1)  462/     1E2 : 11 E6 19            		ld	de,insDataC_1
(1)  463/     1E5 : CF                  		rst	8
(1)  464/     1E6 : CD EA 01            		call	.read_track
(1)  465/     1E9 : C9                  		ret
(1)  466/     1EA :                     
(1)  467/     1EA :                     ; ----------------------------------------
(1)  468/     1EA :                     ; Read current track
(1)  469/     1EA :                     ;
(1)  470/     1EA :                     ; iy - Track control
(1)  471/     1EA :                     ; ix - Track channels
(1)  472/     1EA :                     ; de - Instrument CACHE point
(1)  473/     1EA :                     ; ----------------------------------------
(1)  474/     1EA :                     
(1)  475/     1EA :                     .read_track:
(1)  476/     1EA : FD 46 13            		ld	b,(iy+trk_status)	; b - Track status
(1)  477/     1ED : CB 78               		bit	7,b			; Active?
(1)  478/     1EF : C8                  		ret	z
(1)  479/     1F0 : ED 53 6E 1A         		ld	(currInsData),de	; save temporal InsData for loading
(1)  480/     1F4 : CF                  		rst	8
(1)  481/     1F5 : 3A 6D 1A            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  482/     1F8 : CB 40               		bit	0,b			; This track uses Beats?
(1)  483/     1FA : 28 03               		jr	z,.sfxmd		; Nope
(1)  484/     1FC : CB 4F               		bit	1,a			; BEAT passed?
(1)  485/     1FE : C8                  		ret	z
(1)  486/     1FF :                     .sfxmd:
(1)  487/     1FF : CB 47               		bit	0,a			; TICK passed?
(1)  488/     201 : C8                  		ret	z
(1)  489/     202 : FD 7E 14            		ld	a,(iy+trk_tickTmr)	; TICK timer for this track
(1)  490/     205 : 3D                  		dec	a
(1)  491/     206 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  492/     209 : CF                  		rst	8
(1)  493/     20A : B7                  		or	a
(1)  494/     20B : C0                  		ret	nz			; If != 0, exit
(1)  495/     20C : CB 68               		bit	5,b			; Effect-requested track set?
(1)  496/     20E : C4 E5 03            		call	nz,.effect_fill
(1)  497/     211 : CB 70               		bit	6,b			; Restart/First time?
(1)  498/     213 : C4 F1 03            		call	nz,.first_fill
(1)  499/     216 : FD 7E 15            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  500/     219 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  501/     21C : CF                  		rst	8
(1)  502/     21D : FD 6E 0C            		ld	l,(iy+trk_Read)		; hl - Pattern data to read in cache
(1)  503/     220 : FD 66 0D            		ld	h,(iy+((trk_Read+1)))
(1)  504/     223 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  505/     226 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1)  506/     229 : 79                  		ld	a,c
(1)  507/     22A : B0                  		or	b
(1)  508/     22B : CC 59 03            		call	z,.next_track		; If rowtimer == 0, get next track data
(1)  509/     22E : FE FF               		cp	-1			; or exit.
(1)  510/     230 : C8                  		ret	z
(1)  511/     231 : CF                  		rst	8
(1)  512/     232 :                     
(1)  513/     232 :                     ; --------------------------------
(1)  514/     232 :                     ; Main reading loop
(1)  515/     232 :                     ; --------------------------------
(1)  516/     232 :                     
(1)  517/     232 :                     .next_note:
(1)  518/     232 : FD 7E 18            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  519/     235 : B7                  		or	a
(1)  520/     236 : 20 17               		jr	nz,.decrow
(1)  521/     238 : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  522/     239 : B7                  		or	a
(1)  523/     23A : 28 08               		jr	z,.exit			; If == 00h: exit
(1)  524/     23C : FA 5B 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  525/     23F : FD 77 18            		ld	(iy+trk_rowPause),a
(1)  526/     242 : 18 00               		jr	.exit			; make row-timer, set hl+1
(1)  527/     244 :                     
(1)  528/     244 :                     ; --------------------------------
(1)  529/     244 :                     ; Exit
(1)  530/     244 :                     ; --------------------------------
(1)  531/     244 :                     
(1)  532/     244 :                     .exit:
(1)  533/     244 : CD F3 02            		call	.inc_cpatt
(1)  534/     247 : FD 75 0C            		ld	(iy+trk_Read),l		; Update read location
(1)  535/     24A : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  536/     24D : 18 03               		jr	.decrow_e
(1)  537/     24F :                     .decrow:
(1)  538/     24F : FD 35 18            		dec	(iy+trk_rowPause)
(1)  539/     252 :                     .decrow_e:
(1)  540/     252 : CF                  		rst	8
(1)  541/     253 : 0B                  		dec	bc			; Decrement this row
(1)  542/     254 : FD 71 0E            		ld	(iy+trk_Rows),c		; And update it
(1)  543/     257 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1)  544/     25A : C9                  		ret
(1)  545/     25B :                     
(1)  546/     25B :                     ; --------------------------------
(1)  547/     25B :                     ; New note request
(1)  548/     25B :                     ; --------------------------------
(1)  549/     25B :                     
(1)  550/     25B :                     .has_note:
(1)  551/     25B : C5                  		push	bc		; Save rowcount
(1)  552/     25C : 4F                  		ld	c,a		; c - Copy of control+channel
(1)  553/     25D : CD F3 02            		call	.inc_cpatt
(1)  554/     260 : 79                  		ld	a,c
(1)  555/     261 : FD E5               		push	iy
(1)  556/     263 : DD E1               		pop	ix
(1)  557/     265 : 11 20 00            		ld	de,20h		; Point to track-data
(1)  558/     268 : DD 19               		add	ix,de
(1)  559/     26A : CF                  		rst	8
(1)  560/     26B : 16 00               		ld 	d,0
(1)  561/     26D : E6 3F               		and	00111111b
(1)  562/     26F : 87                  		add	a,a		; * 8
(1)  563/     270 : 87                  		add	a,a
(1)  564/     271 : 87                  		add	a,a
(1)  565/     272 : 5F                  		ld	e,a
(1)  566/     273 : DD 19               		add	ix,de
(1)  567/     275 : CF                  		rst	8
(1)  568/     276 : DD 46 06            		ld	b,(ix+chnl_Type); b - our current Note type
(1)  569/     279 : CB 71               		bit	6,c		; Next byte is new type?
(1)  570/     27B : 28 06               		jr	z,.old_type
(1)  571/     27D : 7E                  		ld	a,(hl)
(1)  572/     27E : DD 77 06            		ld	(ix+chnl_Type),a
(1)  573/     281 : 47                  		ld	b,a
(1)  574/     282 : 2C                  		inc 	l
(1)  575/     283 :                     .old_type:
(1)  576/     283 :                     	; b - evinEVIN
(1)  577/     283 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  578/     283 :                     	;     evin: byte is already stored on track-channel buffer
(1)  579/     283 :                     	;     EVIN: next byte(s) contain a new value, for eff:2 bytes
(1)  580/     283 : CF                  		rst	8
(1)  581/     284 : CB 40               		bit	0,b
(1)  582/     286 : 28 07               		jr	z,.no_note
(1)  583/     288 : 7E                  		ld	a,(hl)
(1)  584/     289 : DD 77 01            		ld	(ix+chnl_Note),a
(1)  585/     28C : CD F3 02            		call	.inc_cpatt
(1)  586/     28F :                     .no_note:
(1)  587/     28F : CB 48               		bit	1,b
(1)  588/     291 : 28 07               		jr	z,.no_ins
(1)  589/     293 : 7E                  		ld	a,(hl)
(1)  590/     294 : DD 77 02            		ld	(ix+chnl_Ins),a
(1)  591/     297 : CD F3 02            		call	.inc_cpatt
(1)  592/     29A :                     .no_ins:
(1)  593/     29A : CF                  		rst	8
(1)  594/     29B : CB 50               		bit	2,b
(1)  595/     29D : 28 07               		jr	z,.no_vol
(1)  596/     29F : 7E                  		ld	a,(hl)
(1)  597/     2A0 : DD 77 03            		ld	(ix+chnl_Vol),a
(1)  598/     2A3 : CD F3 02            		call	.inc_cpatt
(1)  599/     2A6 :                     .no_vol:
(1)  600/     2A6 : CB 58               		bit	3,b
(1)  601/     2A8 : 28 0E               		jr	z,.no_eff
(1)  602/     2AA : 7E                  		ld	a,(hl)
(1)  603/     2AB : DD 77 04            		ld	(ix+chnl_EffId),a
(1)  604/     2AE : CD F3 02            		call	.inc_cpatt
(1)  605/     2B1 : 7E                  		ld	a,(hl)
(1)  606/     2B2 : DD 77 05            		ld	(ix+chnl_EffArg),a
(1)  607/     2B5 : CD F3 02            		call	.inc_cpatt
(1)  608/     2B8 :                     .no_eff:
(1)  609/     2B8 : CF                  		rst	8
(1)  610/     2B9 : 78                  		ld	a,b		; Merge Impulse recycle bits to main bits
(1)  611/     2BA : CB 3F               		srl	a
(1)  612/     2BC : CB 3F               		srl	a
(1)  613/     2BE : CB 3F               		srl	a
(1)  614/     2C0 : CB 3F               		srl	a
(1)  615/     2C2 : E6 0F               		and	00001111b
(1)  616/     2C4 : 4F                  		ld	c,a
(1)  617/     2C5 : CF                  		rst	8
(1)  618/     2C6 : 78                  		ld	a,b
(1)  619/     2C7 : E6 0F               		and	00001111b
(1)  620/     2C9 : B1                  		or	c
(1)  621/     2CA : 4F                  		ld	c,a
(1)  622/     2CB : DD 7E 07            		ld	a,(ix+chnl_Flags)
(1)  623/     2CE : B1                  		or	c
(1)  624/     2CF : DD 77 07            		ld	(ix+chnl_Flags),a
(1)  625/     2D2 : CF                  		rst	8
(1)  626/     2D3 : C1                  		pop	bc			; Restore rowcount
(1)  627/     2D4 :                     
(1)  628/     2D4 :                     	; Check for effects that change things
(1)  629/     2D4 :                     	; to internal playback (jump, tempo, etc.)
(1)  630/     2D4 : E6 08               		and	1000b		; Filter EFFECT bit only
(1)  631/     2D6 : B7                  		or	a
(1)  632/     2D7 : CA 32 02            		jp	z,.next_note
(1)  633/     2DA : DD 7E 04            		ld	a,(ix+chnl_EffId)
(1)  634/     2DD : B7                  		or	a		; 00h = invalid effect
(1)  635/     2DE : CA 32 02            		jp	z,.next_note
(1)  636/     2E1 : FE 01               		cp	1		; Effect A: Tick set
(1)  637/     2E3 : CC 2A 03            		call	z,.eff_A
(1)  638/     2E6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  639/     2E8 : CC 34 03            		call	z,.eff_B	; *** a is trashed after this
(1)  640/     2EB : FE 03               		cp	3		; Effect C: Pattern break
(1)  641/     2ED : CC 4E 03            		call	z,.eff_C
(1)  642/     2F0 : C3 32 02            		jp	.next_note
(1)  643/     2F3 :                     
(1)  644/     2F3 :                     ; ----------------------------------------
(1)  645/     2F3 :                     ; Call this to increment the
(1)  646/     2F3 :                     ; cache pattern read pointer (iy+trk_Read)
(1)  647/     2F3 :                     ; it also refills the next section to
(1)  648/     2F3 :                     ; read if needed.
(1)  649/     2F3 :                     ;
(1)  650/     2F3 :                     ; NOTE: breaks A
(1)  651/     2F3 :                     ; ----------------------------------------
(1)  652/     2F3 :                     
(1)  653/     2F3 :                     .inc_cpatt:
(1)  654/     2F3 : 2C                  		inc	l
(1)  655/     2F4 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1)  656/     2F7 : AD                  		xor	l
(1)  657/     2F8 : E6 80               		and	080h			; Check for 00h/80h
(1)  658/     2FA : C8                  		ret	z
(1)  659/     2FB : CD 2F 14            		call	dac_fill		; refill requested
(1)  660/     2FE : FD 7E 10            		ld	a,(iy+trk_Halfway)	; +80h to halfway
(1)  661/     301 : 54                  		ld	d,h
(1)  662/     302 : 5F                  		ld	e,a
(1)  663/     303 : C6 80               		add 	a,080h
(1)  664/     305 : FD 77 10            		ld	(iy+trk_Halfway),a
(1)  665/     308 : E5                  		push	hl
(1)  666/     309 : C5                  		push	bc
(1)  667/     30A : 01 80 00            		ld	bc,80h			; 80h size + increment value
(1)  668/     30D : CF                  		rst	8
(1)  669/     30E : FD 6E 09            		ld	l,(iy+trk_romPattRd)
(1)  670/     311 : FD 66 0A            		ld	h,(iy+(trk_romPattRd+1))
(1)  671/     314 : FD 7E 0B            		ld	a,(iy+(trk_romPattRd+2))
(1)  672/     317 : 09                  		add	hl,bc
(1)  673/     318 : CE 00               		adc	a,0
(1)  674/     31A : FD 75 09            		ld	(iy+trk_romPattRd),l
(1)  675/     31D : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1)  676/     320 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1)  677/     323 : CD C4 0F            		call	transferRom
(1)  678/     326 : CF                  		rst	8
(1)  679/     327 : C1                  		pop	bc
(1)  680/     328 : E1                  		pop	hl
(1)  681/     329 : C9                  		ret
(1)  682/     32A :                     
(1)  683/     32A :                     ; ----------------------------------------
(1)  684/     32A :                     ; Effect A: Set ticks
(1)  685/     32A :                     ; ----------------------------------------
(1)  686/     32A :                     
(1)  687/     32A :                     .eff_A:
(1)  688/     32A : DD 5E 05            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  689/     32D : FD 73 15            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  690/     330 : FD 73 14            		ld	(iy+trk_tickTmr),e
(1)  691/     333 : C9                  		ret
(1)  692/     334 :                     
(1)  693/     334 :                     ; ----------------------------------------
(1)  694/     334 :                     ; Effect B: jump to a new block
(1)  695/     334 :                     ; ----------------------------------------
(1)  696/     334 :                     
(1)  697/     334 :                     .eff_B:
(1)  698/     334 : F5                  		push	af
(1)  699/     335 : DD 5E 05            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  700/     338 : FD 73 11            		ld 	(iy+trk_currBlk),e
(1)  701/     33B : CF                  		rst	8
(1)  702/     33C :                     ; 		ld	e,(iy+trk_tickSet)	; Reset our Tick timer
(1)  703/     33C :                     ; 		ld	(iy+trk_tickTmr),e
(1)  704/     33C : FD 36 18 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  705/     340 : DD 36 04 00         		ld	(ix+chnl_EffId),0	; (failsafe)
(1)  706/     344 : DD 36 05 00         		ld	(ix+chnl_EffArg),0
(1)  707/     348 : FD CB 13 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  708/     34C : F1                  		pop	af
(1)  709/     34D : C9                  		ret
(1)  710/     34E :                     
(1)  711/     34E :                     ; ----------------------------------------
(1)  712/     34E :                     ; Effect C: Pattern break/exit (custom)
(1)  713/     34E :                     ; ***Not exactly as in Impulse but
(1)  714/     34E :                     ; moves to the next block
(1)  715/     34E :                     ;
(1)  716/     34E :                     ; If set to -1 it will end the track,
(1)  717/     34E :                     ; so you can put multiple SFX into the
(1)  718/     34E :                     ; track file and call them by block.
(1)  719/     34E :                     ;
(1)  720/     34E :                     ; USE THE EFFECT ONLY
(1)  721/     34E :                     ; ----------------------------------------
(1)  722/     34E :                     
(1)  723/     34E :                     .eff_C:
(1)  724/     34E : 01 00 00            		ld	bc,0			; clear rowcount
(1)  725/     351 : DD 7E 05            		ld	a,(ix+chnl_EffArg)	; Arg is 0FFh?
(1)  726/     354 : FE FF               		cp	-1			; Use it as track-end (for SFX)
(1)  727/     356 : CA 64 04            		jp	z,.trkend_effC
(1)  728/     359 :                     
(1)  729/     359 :                     ; ----------------------------------------
(1)  730/     359 :                     ; If pattern finished, load the next one
(1)  731/     359 :                     ; ----------------------------------------
(1)  732/     359 :                     
(1)  733/     359 :                     .next_track:
(1)  734/     359 : FD 7E 11            		ld	a,(iy+trk_currBlk)	; Increment next block
(1)  735/     35C : 3C                  		inc	a
(1)  736/     35D : FD 77 11            		ld 	(iy+trk_currBlk),a
(1)  737/     360 :                     
(1)  738/     360 :                     ; Load track data to cache
(1)  739/     360 :                     ; a - Block
(1)  740/     360 :                     ;
(1)  741/     360 :                     ; hl - trk_read on halfway
(1)  742/     360 :                     .set_track:
(1)  743/     360 : CF                  		rst	8
(1)  744/     361 : FD 36 10 00         		ld	(iy+trk_Halfway),0	; Reset halfway
(1)  745/     365 :                     ; 		ld	l,(iy+trk_CachNotes)	; Set trk_read point on halfway
(1)  746/     365 :                     ; 		ld	h,(iy+(trk_CachNotes+1))
(1)  747/     365 :                     ; 		ld	de,80h
(1)  748/     365 :                     ; 		add	hl,de
(1)  749/     365 : 2E 80               		ld	l,80h			; quick reset trk_read
(1)  750/     367 : FD 75 0C            		ld	(iy+trk_Read),l
(1)  751/     36A : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  752/     36D :                     
(1)  753/     36D : E5                  		push	hl			; Save hl
(1)  754/     36E : 11 00 00            		ld	de,0
(1)  755/     371 : 5F                  		ld	e,a
(1)  756/     372 : CF                  		rst	8
(1)  757/     373 : FD 6E 00            		ld	l,(iy+trk_romBlk)	; Get block position
(1)  758/     376 : FD 66 01            		ld	h,(iy+(trk_romBlk+1))	; directly from ROM
(1)  759/     379 : FD 7E 02            		ld	a,(iy+(trk_romBlk+2))
(1)  760/     37C : 19                  		add	hl,de
(1)  761/     37D : CE 00               		adc	a,0
(1)  762/     37F : 47                  		ld	b,a
(1)  763/     380 : CF                  		rst	8
(1)  764/     381 : CD 75 0F            		call	showRom
(1)  765/     384 : CD 97 0F            		call	readRomB
(1)  766/     387 : FE FF               		cp	-1			; if block == -1, end
(1)  767/     389 : CA 63 04            		jp	z,.track_end
(1)  768/     38C : CD 2F 14            		call	dac_fill
(1)  769/     38F :                     
(1)  770/     38F :                     	; a - head index
(1)  771/     38F : 87                  		add	a,a
(1)  772/     390 : 87                  		add	a,a
(1)  773/     391 : 16 00               		ld	d,0
(1)  774/     393 : 5F                  		ld	e,a
(1)  775/     394 : FD 6E 03            		ld	l,(iy+trk_romPatt)
(1)  776/     397 : CF                  		rst	8
(1)  777/     398 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1)  778/     39B : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1)  779/     39E : 19                  		add	hl,de
(1)  780/     39F : CE 00               		adc	a,0
(1)  781/     3A1 : 11 78 1A            		ld	de,trkHdOut
(1)  782/     3A4 : D5                  		push	de
(1)  783/     3A5 : 01 04 00            		ld	bc,4
(1)  784/     3A8 : CD C4 0F            		call	transferRom
(1)  785/     3AB : E1                  		pop	hl
(1)  786/     3AC : 4E                  		ld	c,(hl)			; bc - new rows to process
(1)  787/     3AD : 23                  		inc	hl
(1)  788/     3AE : 46                  		ld	b,(hl)
(1)  789/     3AF : 23                  		inc	hl
(1)  790/     3B0 : 5E                  		ld	e,(hl)			; de - pointer increment (+increment by this)
(1)  791/     3B1 : 23                  		inc	hl
(1)  792/     3B2 : 56                  		ld	d,(hl)
(1)  793/     3B3 : CF                  		rst	8
(1)  794/     3B4 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows to buffer
(1)  795/     3B7 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b	; on Tick pauses
(1)  796/     3BA : C5                  		push	bc			; Save bc
(1)  797/     3BB : CD 2F 14            		call	dac_fill
(1)  798/     3BE :                     
(1)  799/     3BE :                     	; Recieve data to a half-section
(1)  800/     3BE :                     	; of the notes cache
(1)  801/     3BE : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - ROM pattern data pointer
(1)  802/     3C1 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1)  803/     3C4 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1)  804/     3C7 : 19                  		add	hl,de			; hl + de
(1)  805/     3C8 : CE 00               		adc	a,0			; and highest byte too.
(1)  806/     3CA : CF                  		rst	8
(1)  807/     3CB : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer for READ
(1)  808/     3CE : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1)  809/     3D1 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1)  810/     3D4 : FD 56 0D            		ld	d,(iy+(trk_Read+1))	; de - destination to data CACHE
(1)  811/     3D7 : FD 5E 0C            		ld	e,(iy+trk_Read)
(1)  812/     3DA : 01 80 00            		ld	bc,080h			; bc - 080h
(1)  813/     3DD : CD C4 0F            		call	transferRom
(1)  814/     3E0 : CF                  		rst	8
(1)  815/     3E1 : C1                  		pop	bc			; Get bc back
(1)  816/     3E2 : E1                  		pop	hl			; hl too.
(1)  817/     3E3 : AF                  		xor	a			; return 0
(1)  818/     3E4 : C9                  		ret
(1)  819/     3E5 :                     
(1)  820/     3E5 :                     ; ----------------------------------------
(1)  821/     3E5 :                     ; First time playing or moving
(1)  822/     3E5 :                     ; to next track.
(1)  823/     3E5 :                     ; ----------------------------------------
(1)  824/     3E5 :                     
(1)  825/     3E5 :                     .effect_fill:
(1)  826/     3E5 : CD 2F 14            		call	dac_fill
(1)  827/     3E8 : CB A8               		res	5,b			; Reset FILL flag
(1)  828/     3EA : FD 70 13            		ld	(iy+trk_status),b
(1)  829/     3ED : CD 33 04            		call	.go_effect
(1)  830/     3F0 : C9                  		ret
(1)  831/     3F1 :                     
(1)  832/     3F1 :                     ; returns bc as row counter
(1)  833/     3F1 :                     .first_fill:
(1)  834/     3F1 : CD 2F 14            		call	dac_fill
(1)  835/     3F4 : CB B0               		res	6,b			; Reset FILL flag
(1)  836/     3F6 : FD 70 13            		ld	(iy+trk_status),b
(1)  837/     3F9 : FD E5               		push	iy
(1)  838/     3FB : DD E1               		pop	ix			; copy iy to ix
(1)  839/     3FD : 11 20 00            		ld	de,20h			; go to channel data
(1)  840/     400 : DD 19               		add	ix,de
(1)  841/     402 : CF                  		rst	8
(1)  842/     403 : 01 00 00            		ld	bc,0
(1)  843/     406 : 11 08 00            		ld	de,8
(1)  844/     409 : 06 11               		ld	b,MAX_TRKCHN
(1)  845/     40B :                     .clrf:
(1)  846/     40B : D5                  		push	de
(1)  847/     40C : C5                  		push	bc
(1)  848/     40D : CF                  		rst	8
(1)  849/     40E : CD A8 04            		call	trkout_unlk		; search and unlink last used channels
(1)  850/     411 : DD 36 02 00         		ld	(ix+chnl_Ins),0
(1)  851/     415 : DD 36 01 FE         		ld	(ix+chnl_Note),-2
(1)  852/     419 : DD 36 07 01         		ld	(ix+chnl_Flags),1
(1)  853/     41D : CF                  		rst	8
(1)  854/     41E : C1                  		pop	bc
(1)  855/     41F : D1                  		pop	de
(1)  856/     420 :                     .dntslnce:
(1)  857/     420 : DD 19               		add	ix,de
(1)  858/     422 : 10 E7               		djnz	.clrf
(1)  859/     424 : 3E 01               		ld	a,1			; Request chip cleanup
(1)  860/     426 : 32 65 19            		ld	(flagResChip),a
(1)  861/     429 : FD 36 18 00         		ld	(iy+trk_rowPause),0	; Reset row timer
(1)  862/     42D : FD 7E 12            		ld	a,(iy+trk_setBlk)	; Set current block
(1)  863/     430 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1)  864/     433 :                     
(1)  865/     433 :                     .go_effect:
(1)  866/     433 : CF                  		rst	8			; First cache fills
(1)  867/     434 : FD 6E 06            		ld	l,(iy+trk_romIns)	; Recieve almost 100h of instrument pointers
(1)  868/     437 : FD 66 07            		ld	h,(iy+(trk_romIns+1))	; NOTE: transferRom can't do 100h
(1)  869/     43A : FD 7E 08            		ld	a,(iy+(trk_romIns+2))
(1)  870/     43D : ED 5B 6E 1A         		ld	de,(currInsData)
(1)  871/     441 : 06 00               		ld	b,0
(1)  872/     443 : FD 4E 17            		ld	c,(iy+trk_sizeIns)
(1)  873/     446 : CD C4 0F            		call	transferRom
(1)  874/     449 : CF                  		rst	8
(1)  875/     44A :                     ; 		ld	e,(iy+trk_CachHeads)	; de - Cache headers
(1)  876/     44A :                     ; 		ld	d,(iy+(trk_CachHeads+1))
(1)  877/     44A :                     ; 		ld	l,(iy+trk_romPatt)	; hl - ROM pattern data BASE
(1)  878/     44A :                     ; 		ld	h,(iy+(trk_romPatt+1))
(1)  879/     44A :                     ; 		ld	a,(iy+(trk_romPatt+2))
(1)  880/     44A :                     ; 		ld	bc,MAX_TRKHEADS
(1)  881/     44A :                     ; 		call	transferRom
(1)  882/     44A : FD 6E 1A            		ld	l,(iy+trk_CachNotes)	; Read first cache notes
(1)  883/     44D : FD 66 1B            		ld	h,(iy+(trk_CachNotes+1))
(1)  884/     450 : 11 80 00            		ld	de,80h
(1)  885/     453 : 19                  		add	hl,de
(1)  886/     454 : FD 75 0C            		ld	(iy+trk_Read),l
(1)  887/     457 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  888/     45A : CD 2F 14            		call	dac_fill
(1)  889/     45D : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1)  890/     460 : C3 60 03            		jp	.set_track
(1)  891/     463 :                     
(1)  892/     463 :                     ; If -1, track ends
(1)  893/     463 :                     ; Automutes channels too.
(1)  894/     463 :                     .track_end:
(1)  895/     463 : E1                  		pop	hl			; Get hl back
(1)  896/     464 :                     .trkend_effC:
(1)  897/     464 : CD 7A 04            		call	track_out
(1)  898/     467 : CF                  		rst	8
(1)  899/     468 : FD 36 13 00         		ld	(iy+trk_status),0	; Track status
(1)  900/     46C : FD 36 18 00         		ld	(iy+trk_rowPause),0
(1)  901/     470 : FD 36 14 00         		ld	(iy+trk_tickTmr),0
(1)  902/     474 : 01 00 00            		ld	bc,0			; Set bc rowcount to 0
(1)  903/     477 : 3E FF               		ld	a,-1			; Return -1
(1)  904/     479 : C9                  		ret
(1)  905/     47A :                     
(1)  906/     47A :                     ; ----------------------------------------
(1)  907/     47A :                     ; Delete all track data
(1)  908/     47A :                     ; ----------------------------------------
(1)  909/     47A :                     
(1)  910/     47A :                     track_out:
(1)  911/     47A : FD E5               		push	iy
(1)  912/     47C : DD E1               		pop	ix
(1)  913/     47E : 11 20 00            		ld	de,20h
(1)  914/     481 : DD 19               		add	ix,de
(1)  915/     483 : CF                  		rst	8
(1)  916/     484 : 11 08 00            		ld	de,8
(1)  917/     487 : 06 11               		ld	b,MAX_TRKCHN
(1)  918/     489 :                     .clrfe:
(1)  919/     489 : D5                  		push	de
(1)  920/     48A : C5                  		push	bc
(1)  921/     48B : CD A8 04            		call	trkout_unlk
(1)  922/     48E : DD 36 01 FE         		ld	(ix+chnl_Note),-2
(1)  923/     492 : DD 7E 07            		ld	a,(ix+chnl_Flags)
(1)  924/     495 : E6 F0               		and	11110000b
(1)  925/     497 : F6 01               		or	1
(1)  926/     499 : DD 77 07            		ld	(ix+chnl_Flags),a
(1)  927/     49C : C1                  		pop	bc
(1)  928/     49D : D1                  		pop	de
(1)  929/     49E : DD 19               		add	ix,de
(1)  930/     4A0 : 10 E7               		djnz	.clrfe
(1)  931/     4A2 : 3E 01               		ld	a,1			; Request chip cleanup
(1)  932/     4A4 : 32 65 19            		ld	(flagResChip),a
(1)  933/     4A7 : C9                  		ret
(1)  934/     4A8 :                     
(1)  935/     4A8 :                     ; ----------------------------------------
(1)  936/     4A8 :                     ; Unlink current channel
(1)  937/     4A8 :                     ; ----------------------------------------
(1)  938/     4A8 :                     
(1)  939/     4A8 :                     trkout_unlk:
(1)  940/     4A8 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1)  941/     4AB : B7                  		or	a
(1)  942/     4AC : C8                  		ret	z
(1)  943/     4AD : F0                  		ret	p
(1)  944/     4AE : DD E5               		push	ix
(1)  945/     4B0 : D1                  		pop	de
(1)  946/     4B1 : 4F                  		ld	c,a
(1)  947/     4B2 : E6 F0               		and	11110000b
(1)  948/     4B4 : FE 80               		cp	80h
(1)  949/     4B6 : 28 15               		jr	z,.is_psg
(1)  950/     4B8 : FE 90               		cp	90h
(1)  951/     4BA : 28 22               		jr	z,.is_psgn
(1)  952/     4BC : FE A0               		cp	0A0h		;
(1)  953/     4BE : 28 39               		jr	z,.is_fm
(1)  954/     4C0 : FE B0               		cp	0B0h		; For FM3 special
(1)  955/     4C2 : 28 35               		jr	z,.is_fm
(1)  956/     4C4 : FE C0               		cp	0C0h		; For FM6 DAC
(1)  957/     4C6 : 28 31               		jr	z,.is_fm
(1)  958/     4C8 : FE D0               		cp	0D0h		; For PWM
(1)  959/     4CA : 28 28               		jr	z,.is_pwm
(1)  960/     4CC : C9                  		ret
(1)  961/     4CD :                     ; PSG/PSGN
(1)  962/     4CD :                     .is_psg:
(1)  963/     4CD : 06 00               		ld	b,0
(1)  964/     4CF : 79                  		ld	a,c
(1)  965/     4D0 : E6 03               		and	011b
(1)  966/     4D2 : 21 03 17            		ld	hl,tblPSG
(1)  967/     4D5 : CF                  		rst	8
(1)  968/     4D6 : 87                  		add	a,a		; *08h
(1)  969/     4D7 : 87                  		add	a,a
(1)  970/     4D8 : 87                  		add	a,a
(1)  971/     4D9 : 4F                  		ld	c,a
(1)  972/     4DA : CF                  		rst	8
(1)  973/     4DB : 09                  		add	hl,bc
(1)  974/     4DC : 18 03               		jr	.ispsg_c
(1)  975/     4DE :                     .is_psgn:
(1)  976/     4DE : 21 1D 17            		ld	hl,tblPSGN
(1)  977/     4E1 :                     .ispsg_c:
(1)  978/     4E1 : 7E                  		ld	a,(hl)
(1)  979/     4E2 : BB                  		cp	e
(1)  980/     4E3 : C0                  		ret	nz
(1)  981/     4E4 : CF                  		rst	8
(1)  982/     4E5 : 23                  		inc	hl
(1)  983/     4E6 : 7E                  		ld	a,(hl)
(1)  984/     4E7 : BA                  		cp	d
(1)  985/     4E8 : C0                  		ret	nz
(1)  986/     4E9 : 36 00               		ld	(hl),0
(1)  987/     4EB : 2B                  		dec	hl
(1)  988/     4EC : 36 00               		ld	(hl),0
(1)  989/     4EE : 79                  		ld	a,c
(1)  990/     4EF : FE 90               		cp	90h
(1)  991/     4F1 : C8                  		ret	z
(1)  992/     4F2 : CF                  		rst	8
(1)  993/     4F3 : C9                  		ret
(1)  994/     4F4 :                     ; FM
(1)  995/     4F4 :                     .is_pwm:
(1)  996/     4F4 : 21 57 17            		ld	hl,tblPWM
(1)  997/     4F7 : 18 03               		jr	.tlb_cont
(1)  998/     4F9 :                     .is_fm:
(1)  999/     4F9 : 21 25 17            		ld	hl,tblFM
(1) 1000/     4FC :                     .tlb_cont:
(1) 1001/     4FC : 79                  		ld	a,c
(1) 1002/     4FD : E6 07               		and	000111b
(1) 1003/     4FF : CF                  		rst	8
(1) 1004/     500 : 87                  		add	a,a		; *08h
(1) 1005/     501 : 87                  		add	a,a
(1) 1006/     502 : 87                  		add	a,a
(1) 1007/     503 : 06 00               		ld	b,0
(1) 1008/     505 : 4F                  		ld	c,a
(1) 1009/     506 : CF                  		rst	8
(1) 1010/     507 : 09                  		add	hl,bc
(1) 1011/     508 : 7E                  		ld	a,(hl)
(1) 1012/     509 : BB                  		cp	e
(1) 1013/     50A : C0                  		ret	nz
(1) 1014/     50B : CF                  		rst	8
(1) 1015/     50C : 23                  		inc	hl
(1) 1016/     50D : 7E                  		ld	a,(hl)
(1) 1017/     50E : BA                  		cp	d
(1) 1018/     50F : C0                  		ret	nz
(1) 1019/     510 : 36 00               		ld	(hl),0
(1) 1020/     512 : 2B                  		dec	hl
(1) 1021/     513 : 36 00               		ld	(hl),0
(1) 1022/     515 : C9                  		ret
(1) 1023/     516 :                     
(1) 1024/     516 :                     ; --------------------------------------------------------
(1) 1025/     516 :                     ; ** 32X ONLY ***
(1) 1026/     516 :                     ; Communicate to Slave SH2 to play
(1) 1027/     516 :                     ; PWM sound channels
(1) 1028/     516 :                     ; --------------------------------------------------------
(1) 1029/     516 :                     
(1) 1030/     516 :                     mars_scomm:
(1) 1031/     516 : 21 00 60            		ld	hl,6000h	; Point BANK closely
(1) 1032/     519 : CF                  		rst	8		; to the 32X area
(1) 1033/     51A : 36 00               		ld	(hl),0
(1) 1034/     51C : 36 01               		ld	(hl),1
(1) 1035/     51E : 36 00               		ld	(hl),0
(1) 1036/     520 : 36 00               		ld	(hl),0
(1) 1037/     522 : CF                  		rst	8
(1) 1038/     523 : 36 00               		ld	(hl),0
(1) 1039/     525 : 36 00               		ld	(hl),0
(1) 1040/     527 : 36 01               		ld	(hl),1
(1) 1041/     529 : 36 00               		ld	(hl),0
(1) 1042/     52B : 36 01               		ld	(hl),1
(1) 1043/     52D : CF                  		rst	8
(1) 1044/     52E : FD 21 00 D1         		ld	iy,5100h|8000h	; iy - mars sysreg
(1) 1045/     532 : DD 21 E8 18         		ld	ix,pwmcom
(1) 1046/     536 : 3A 2D 00            		ld	a,(marsBlock)	; block MARS requests?
(1) 1047/     539 : B7                  		or	a
(1) 1048/     53A : 20 53               		jr	nz,.blocked
(1) 1049/     53C : 3A 2E 00            		ld	a,(marsUpd)	; update?
(1) 1050/     53F : B7                  		or	a
(1) 1051/     540 : C8                  		ret	z
(1) 1052/     541 : CF                  		rst	8
(1) 1053/     542 : AF                  		xor	a
(1) 1054/     543 : 32 2E 00            		ld	(marsUpd),a
(1) 1055/     546 :                     .wait_enter:
(1) 1056/     546 : 00                  		nop
(1) 1057/     547 : FD 7E 2F            		ld	a,(iy+comm15)	; check if we got mid-process
(1) 1058/     54A : E6 B0               		and	10110000b
(1) 1059/     54C : B7                  		or	a
(1) 1060/     54D : 20 F7               		jr	nz,.wait_enter
(1) 1061/     54F : CB FF               		set	7,a
(1) 1062/     551 : FD 77 2F            		ld	(iy+comm15),a
(1) 1063/     554 : 00                  		nop
(1) 1064/     555 : 00                  		nop
(1) 1065/     556 :                     .wait_other:
(1) 1066/     556 : 00                  		nop
(1) 1067/     557 : FD 7E 2F            		ld	a,(iy+comm15)
(1) 1068/     55A : E6 30               		and	00110000b
(1) 1069/     55C : B7                  		or	a
(1) 1070/     55D : 20 F7               		jr	nz,.wait_other
(1) 1071/     55F : 0E 04               		ld	c,4		; c - Passes
(1) 1072/     561 :                     .next_pass:
(1) 1073/     561 : FD E5               		push	iy
(1) 1074/     563 : E1                  		pop	hl
(1) 1075/     564 : CF                  		rst	8
(1) 1076/     565 : 11 20 00            		ld	de,comm0
(1) 1077/     568 : 19                  		add	hl,de
(1) 1078/     569 : 06 07               		ld	b,7
(1) 1079/     56B :                     .next_comm:
(1) 1080/     56B : DD 56 00            		ld	d,(ix)
(1) 1081/     56E : DD 5E 01            		ld	e,(ix+1)
(1) 1082/     571 : DD 23               		inc	ix
(1) 1083/     573 : DD 23               		inc	ix
(1) 1084/     575 : CF                  		rst	8
(1) 1085/     576 : 72                  		ld	(hl),d
(1) 1086/     577 : 23                  		inc	hl
(1) 1087/     578 : 73                  		ld	(hl),e
(1) 1088/     579 : 23                  		inc	hl
(1) 1089/     57A : 10 EF               		djnz	.next_comm
(1) 1090/     57C : FD 7E 2F            		ld	a,(iy+comm15)	; Send CLK to Slave CMD
(1) 1091/     57F : CB F7               		set	6,a
(1) 1092/     581 : FD 77 2F            		ld	(iy+comm15),a
(1) 1093/     584 : CF                  		rst	8
(1) 1094/     585 :                     .w_pass2:
(1) 1095/     585 : FD 7E 2F            		ld	a,(iy+comm15)	; CLK cleared?
(1) 1096/     588 : CB 77               		bit	6,a
(1) 1097/     58A : 20 F9               		jr	nz,.w_pass2
(1) 1098/     58C : 0D                  		dec	c
(1) 1099/     58D : 20 D2               		jr	nz,.next_pass
(1) 1100/     58F :                     
(1) 1101/     58F :                     ; clear COM bits
(1) 1102/     58F :                     .blocked:
(1) 1103/     58F : 21 E8 18            		ld	hl,pwmcom
(1) 1104/     592 : 06 07               		ld	b,7
(1) 1105/     594 :                     .clrcom:
(1) 1106/     594 : 36 00               		ld	(hl),0
(1) 1107/     596 : 23                  		inc	hl
(1) 1108/     597 : 10 FB               		djnz	.clrcom
(1) 1109/     599 : C9                  		ret
(1) 1110/     59A :                     
(1) 1111/     59A :                     ; --------------------------------------------------------
(1) 1112/     59A :                     ; Set and play instruments in their respective channels
(1) 1113/     59A :                     ; --------------------------------------------------------
(1) 1114/     59A :                     
(1) 1115/     59A :                     setupchip:
(1) 1116/     59A : 21 66 19            		ld	hl,insDataC_0
(1) 1117/     59D : FD 21 00 1C         		ld	iy,trkBuff_0		; iy - Tracker channels
(1) 1118/     5A1 : CD F4 05            		call	.mk_chip
(1) 1119/     5A4 : 21 E6 19            		ld	hl,insDataC_1
(1) 1120/     5A7 : FD 21 00 1D         		ld	iy,trkBuff_1
(1) 1121/     5AB : CD F4 05            		call	.mk_chip
(1) 1122/     5AE :                     
(1) 1123/     5AE :                     	; Check if there's floating
(1) 1124/     5AE :                     	; channels to auto-mute by request
(1) 1125/     5AE : 3A 65 19            		ld	a,(flagResChip)
(1) 1126/     5B1 : B7                  		or	a
(1) 1127/     5B2 : C8                  		ret	z
(1) 1128/     5B3 : AF                  		xor	a
(1) 1129/     5B4 : 32 65 19            		ld	(flagResChip),a
(1) 1130/     5B7 : FD 21 57 17         		ld	iy,tblPWM	; 32X only
(1) 1131/     5BB : DD 21 E8 18         		ld	ix,pwmcom
(1) 1132/     5BF :                     ; 		ld	b,0D0h
(1) 1133/     5BF : CD 40 06            		call	.silnc_list
(1) 1134/     5C2 : 3E 01               		ld	a,1
(1) 1135/     5C4 : CF                  		rst	8
(1) 1136/     5C5 : 32 2E 00            		ld	(marsUpd),a
(1) 1137/     5C8 : FD 21 4D 17         		ld	iy,tblFM6
(1) 1138/     5CC : DD 21 E5 18         		ld	ix,daccom
(1) 1139/     5D0 :                     ; 		ld	b,0C0h
(1) 1140/     5D0 : CD 19 06            		call	.silnc_singl
(1) 1141/     5D3 : FD 21 1D 17         		ld	iy,tblPSGN
(1) 1142/     5D7 : DD 21 94 17         		ld	ix,psgcom+3
(1) 1143/     5DB :                     ; 		ld	b,90h
(1) 1144/     5DB : CD 19 06            		call	.silnc_singl
(1) 1145/     5DE : CF                  		rst	8
(1) 1146/     5DF : FD 21 25 17         		ld	iy,tblFM	; silence floating channels
(1) 1147/     5E3 : DD 21 C5 17         		ld	ix,fmcom	; includes FM3 special
(1) 1148/     5E7 :                     ; 		ld	b,0A0h
(1) 1149/     5E7 : CD 40 06            		call	.silnc_list
(1) 1150/     5EA : FD 21 03 17         		ld	iy,tblPSG
(1) 1151/     5EE : DD 21 91 17         		ld	ix,psgcom
(1) 1152/     5F2 :                     ; 		ld	b,080h
(1) 1153/     5F2 : 18 4C               		jr	.silnc_list
(1) 1154/     5F4 :                     .mk_chip:
(1) 1155/     5F4 : FD 7E 13            		ld	a,(iy+trk_status)
(1) 1156/     5F7 : B7                  		or	a
(1) 1157/     5F8 : F0                  		ret	p
(1) 1158/     5F9 : 22 6E 1A            		ld	(currInsData),hl
(1) 1159/     5FC : FD 22 74 1A         		ld	(currTrkCtrl),iy
(1) 1160/     600 :                     ; 		rst	8
(1) 1161/     600 : 11 20 00            		ld	de,20h
(1) 1162/     603 : FD 19               		add	iy,de
(1) 1163/     605 : 06 11               		ld	b,MAX_TRKCHN
(1) 1164/     607 :                     .nxt_chnl:
(1) 1165/     607 : FD 7E 07            		ld	a,(iy+chnl_Flags)	; Get status bits
(1) 1166/     60A : E6 0F               		and	00001111b
(1) 1167/     60C : B7                  		or	a			; Check for non-zero
(1) 1168/     60D : C4 78 06            		call	nz,.do_chnl
(1) 1169/     610 : CF                  		rst	8
(1) 1170/     611 : 11 08 00            		ld	de,8			; Next CHANNEL
(1) 1171/     614 : FD 19               		add	iy,de
(1) 1172/     616 : 10 EF               		djnz	.nxt_chnl
(1) 1173/     618 : C9                  		ret
(1) 1174/     619 :                     
(1) 1175/     619 :                     ; ----------------------------------------
(1) 1176/     619 :                     ; iy - table
(1) 1177/     619 :                     ; ix - chip com port
(1) 1178/     619 :                     ;  b - target ID
(1) 1179/     619 :                     ;  c - ignore ID
(1) 1180/     619 :                     .silnc_singl:
(1) 1181/     619 : FD 7E 01            		ld	a,(iy+1)	; Get link MSB
(1) 1182/     61C : CF                  		rst	8
(1) 1183/     61D : 67                  		ld	h,a		; hl - link
(1) 1184/     61E : FD 6E 00            		ld	l,(iy)
(1) 1185/     621 : 7E                  		ld	a,(hl)		; *** DIRECT chnl_Chip
(1) 1186/     622 : 5F                  		ld	e,a
(1) 1187/     623 : B7                  		or	a
(1) 1188/     624 : 28 06               		jr	z,.fltin_s
(1) 1189/     626 : CF                  		rst	8
(1) 1190/     627 : 7B                  		ld	a,e
(1) 1191/     628 : E6 F0               		and	11110000b
(1) 1192/     62A : B8                  		cp	b
(1) 1193/     62B : C0                  		ret 	nz
(1) 1194/     62C :                     .fltin_s:
(1) 1195/     62C : DD E5               		push	ix
(1) 1196/     62E : E1                  		pop	hl
(1) 1197/     62F : 19                  		add	hl,de
(1) 1198/     630 : 7E                  		ld	a,(hl)		; already set?
(1) 1199/     631 : E6 07               		and	0111b
(1) 1200/     633 : B7                  		or	a
(1) 1201/     634 : C0                  		ret	nz
(1) 1202/     635 : 36 04               		ld	(hl),100b
(1) 1203/     637 : FD 36 00 00         		ld	(iy),0
(1) 1204/     63B : FD 36 01 00         		ld	(iy+1),0
(1) 1205/     63F :                     ; 		ld	(iy+3),0
(1) 1206/     63F :                     ; 		ld	(iy+4),0
(1) 1207/     63F :                     ; 		ld	(iy+5),0
(1) 1208/     63F :                     ; 		ld	(iy+6),0
(1) 1209/     63F :                     ; 		ld	(iy+7),0
(1) 1210/     63F : C9                  		ret
(1) 1211/     640 :                     .silnc_list:
(1) 1212/     640 : FD 7E 01            		ld	a,(iy+1)	; Get link MSB
(1) 1213/     643 : FE FF               		cp	-1		; if 0FFxxh, end
(1) 1214/     645 : C8                  		ret	z
(1) 1215/     646 : B7                  		or	a		; if 00xx, mute it
(1) 1216/     647 : 28 0A               		jr	z,.flotin
(1) 1217/     649 : 67                  		ld	h,a		; hl - link
(1) 1218/     64A : FD 6E 00            		ld	l,(iy)
(1) 1219/     64D : 7E                  		ld	a,(hl)		; *** DIRECT chnl_Chip
(1) 1220/     64E : E6 F0               		and	11110000b
(1) 1221/     650 : B7                  		or	a
(1) 1222/     651 : 20 1E               		jr	nz,.busy
(1) 1223/     653 :                     ; 		and	11110000b
(1) 1224/     653 :                     ; 		cp	b
(1) 1225/     653 :                     ; 		jr	z,.busy
(1) 1226/     653 :                     
(1) 1227/     653 :                     .flotin:
(1) 1228/     653 : CF                  		rst	8
(1) 1229/     654 : FD 7E 02            		ld	a,(iy+2)
(1) 1230/     657 : E6 07               		and	000111b		;
(1) 1231/     659 : 16 00               		ld	d,0
(1) 1232/     65B : 5F                  		ld	e,a
(1) 1233/     65C : CF                  		rst	8
(1) 1234/     65D : DD E5               		push	ix
(1) 1235/     65F : E1                  		pop	hl
(1) 1236/     660 : 19                  		add	hl,de
(1) 1237/     661 : 7E                  		ld	a,(hl)		; already set?
(1) 1238/     662 : E6 07               		and	0111b
(1) 1239/     664 : B7                  		or	a
(1) 1240/     665 : 20 0A               		jr	nz,.busy
(1) 1241/     667 : 36 04               		ld	(hl),100b
(1) 1242/     669 : FD 36 00 00         		ld	(iy),0
(1) 1243/     66D : FD 36 01 00         		ld	(iy+1),0
(1) 1244/     671 :                     ; 		ld	(iy+3),0
(1) 1245/     671 :                     ; 		ld	(iy+4),0
(1) 1246/     671 :                     ; 		ld	(iy+5),0
(1) 1247/     671 :                     ; 		ld	(iy+6),0
(1) 1248/     671 :                     ; 		ld	(iy+7),0
(1) 1249/     671 :                     .busy:
(1) 1250/     671 : 11 08 00            		ld	de,8
(1) 1251/     674 : FD 19               		add	iy,de
(1) 1252/     676 : 18 C8               		jr	.silnc_list
(1) 1253/     678 :                     
(1) 1254/     678 :                     ; ----------------------------------------
(1) 1255/     678 :                     ; Channel requested update
(1) 1256/     678 :                     ;
(1) 1257/     678 :                     ; iy - Current channel
(1) 1258/     678 :                     ; ----------------------------------------
(1) 1259/     678 :                     
(1) 1260/     678 :                     .do_chnl:
(1) 1261/     678 : C5                  		push	bc
(1) 1262/     679 : CD 29 0E            		call	.check_ins
(1) 1263/     67C : FE FF               		cp	-1
(1) 1264/     67E : 28 3B               		jr	z,.no_chnl
(1) 1265/     680 : CD 39 0D            		call	.chip_swap	; check if tracker channel swapped chip
(1) 1266/     683 : CD 3C 0E            		call	.check_chnl	; a - chip requested
(1) 1267/     686 : FE FF               		cp	-1		; Ran out of chip channels.
(1) 1268/     688 : 28 27               		jr	z,.ran_out
(1) 1269/     68A : 22 72 1A            		ld	(currInsPos),hl
(1) 1270/     68D : DD 22 70 1A         		ld	(currTblPos),ix
(1) 1271/     691 : CD 2F 14            		call	dac_fill
(1) 1272/     694 : FD CB 07 4E         		bit	1,(iy+chnl_Flags)
(1) 1273/     698 : C4 C4 06            		call	nz,.req_ins
(1) 1274/     69B : FD CB 07 56         		bit	2,(iy+chnl_Flags)
(1) 1275/     69F : C4 21 08            		call	nz,.req_vol
(1) 1276/     6A2 : CF                  		rst	8
(1) 1277/     6A3 : FD CB 07 5E         		bit	3,(iy+chnl_Flags)
(1) 1278/     6A7 : C4 BC 08            		call	nz,.req_eff
(1) 1279/     6AA : FD CB 07 46         		bit	0,(iy+chnl_Flags)
(1) 1280/     6AE : C4 DE 0A            		call	nz,.req_note
(1) 1281/     6B1 :                     ; 		ld	a,(iy+chnl_Flags)	; Instrument+effect also allowed.
(1) 1282/     6B1 :                     ; 		and	1010b
(1) 1283/     6B1 :                     ; 		or	a
(1) 1284/     6B1 :                     ; 		call	nz,.req_note
(1) 1285/     6B1 :                     
(1) 1286/     6B1 :                     .ran_out:
(1) 1287/     6B1 : FD 7E 07            		ld	a,(iy+chnl_Flags)	; Clear status bits
(1) 1288/     6B4 : E6 F0               		and	11110000b
(1) 1289/     6B6 : FD 77 07            		ld	(iy+chnl_Flags),a
(1) 1290/     6B9 : C1                  		pop	bc
(1) 1291/     6BA : C9                  		ret
(1) 1292/     6BB :                     .no_chnl:
(1) 1293/     6BB : CD 39 0D            		call	.chip_swap		; TODO: check if this breaks.
(1) 1294/     6BE : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1295/     6C2 :                     ; 		ld	(ix+chnl_Flags),0
(1) 1296/     6C2 : C1                  		pop	bc
(1) 1297/     6C3 : C9                  		ret
(1) 1298/     6C4 :                     
(1) 1299/     6C4 :                     ; ----------------------------------------
(1) 1300/     6C4 :                     ; bit 1: Intrument
(1) 1301/     6C4 :                     ; ----------------------------------------
(1) 1302/     6C4 :                     
(1) 1303/     6C4 :                     .req_ins:
(1) 1304/     6C4 : 2A 72 1A            		ld	hl,(currInsPos)
(1) 1305/     6C7 : DD 2A 70 1A         		ld	ix,(currTblPos)
(1) 1306/     6CB : 7E                  		ld	a,(hl)
(1) 1307/     6CC : E6 F0               		and	11110000b
(1) 1308/     6CE : FE 80               		cp	80h		; PSG normal
(1) 1309/     6D0 : 28 5A               		jr	z,.ins_psg
(1) 1310/     6D2 : FE 90               		cp	90h		; PSG noise
(1) 1311/     6D4 : 28 50               		jr	z,.ins_psgn
(1) 1312/     6D6 : CF                  		rst	8
(1) 1313/     6D7 : FE A0               		cp	0A0h		; FM normal
(1) 1314/     6D9 : CA A4 07            		jp	z,.ins_fm
(1) 1315/     6DC : FE B0               		cp	0B0h		; FM special
(1) 1316/     6DE : CA 95 07            		jp	z,.ins_fm3
(1) 1317/     6E1 : FE C0               		cp	0C0h		; DAC
(1) 1318/     6E3 : 28 76               		jr	z,.ins_dac
(1) 1319/     6E5 : FE D0               		cp	0D0h		; PWM
(1) 1320/     6E7 : CA EB 06            		jp	z,.ins_pwm
(1) 1321/     6EA : C9                  		ret
(1) 1322/     6EB :                     
(1) 1323/     6EB :                     ; --------------------------------
(1) 1324/     6EB :                     ; FM,FM3,FM6
(1) 1325/     6EB :                     ; --------------------------------
(1) 1326/     6EB :                     
(1) 1327/     6EB :                     .ins_pwm:
(1) 1328/     6EB : 56                  		ld	d,(hl)		; d - Flags
(1) 1329/     6EC : 23                  		inc	hl
(1) 1330/     6ED : 7E                  		ld	a,(hl)		; Save pitch
(1) 1331/     6EE : 23                  		inc	hl
(1) 1332/     6EF : DD 77 03            		ld	(ix+3),a
(1) 1333/     6F2 : DD 7E 02            		ld	a,(ix+2)
(1) 1334/     6F5 : DD 21 E8 18         		ld	ix,pwmcom	; ix - pwmcom
(1) 1335/     6F9 : E6 07               		and	000111b
(1) 1336/     6FB : 06 00               		ld	b,0
(1) 1337/     6FD : 4F                  		ld	c,a
(1) 1338/     6FE : DD 09               		add	ix,bc
(1) 1339/     700 : 7E                  		ld	a,(hl)		; SH2 BANK
(1) 1340/     701 : 23                  		inc	hl
(1) 1341/     702 : E6 0F               		and	00001111b
(1) 1342/     704 : 47                  		ld	b,a		; b - Section, ROM or SDRAM
(1) 1343/     705 : DD 7E 18            		ld	a,(ix+PWOUTF)
(1) 1344/     708 : E6 30               		and	00110000b	; keep flag LR
(1) 1345/     70A : 4F                  		ld	c,a		; save them as C
(1) 1346/     70B : 7A                  		ld	a,d
(1) 1347/     70C : E6 03               		and	00000011b	; Stereo|Loop bits
(1) 1348/     70E : 0F                  		rrca			; carry...
(1) 1349/     70F : 0F                  		rrca
(1) 1350/     710 : B1                  		or	c
(1) 1351/     711 : B0                  		or	b
(1) 1352/     712 : DD 77 18            		ld	(ix+PWOUTF),a
(1) 1353/     715 : 7E                  		ld	a,(hl)		; Grab the 24-bit address (BIG endian)
(1) 1354/     716 : 23                  		inc	hl
(1) 1355/     717 : DD 77 20            		ld	(ix+PWINSH),a
(1) 1356/     71A : CF                  		rst	8
(1) 1357/     71B : 7E                  		ld	a,(hl)
(1) 1358/     71C : 23                  		inc	hl
(1) 1359/     71D : DD 77 28            		ld	(ix+PWINSM),a
(1) 1360/     720 : 7E                  		ld	a,(hl)
(1) 1361/     721 : 23                  		inc	hl
(1) 1362/     722 : DD 77 30            		ld	(ix+PWINSL),a
(1) 1363/     725 : C9                  		ret
(1) 1364/     726 :                     
(1) 1365/     726 :                     ; --------------------------------
(1) 1366/     726 :                     ; PSG1-3,PSGN
(1) 1367/     726 :                     ; --------------------------------
(1) 1368/     726 :                     
(1) 1369/     726 :                     .ins_psgn:
(1) 1370/     726 : 7E                  		ld	a,(hl)
(1) 1371/     727 : E6 07               		and	111b
(1) 1372/     729 : DD 77 04            		ld	(ix+4),a
(1) 1373/     72C :                     .ins_psg:
(1) 1374/     72C : CF                  		rst	8
(1) 1375/     72D : 23                  		inc	hl		; Skip ID
(1) 1376/     72E : 7E                  		ld	a,(hl)
(1) 1377/     72F : DD 77 03            		ld	(ix+3),a	; Save pitch
(1) 1378/     732 : 23                  		inc	hl
(1) 1379/     733 : DD 7E 02            		ld	a,(ix+2)
(1) 1380/     736 : E6 03               		and	11b
(1) 1381/     738 : 16 00               		ld	d,0
(1) 1382/     73A : 5F                  		ld	e,a
(1) 1383/     73B : DD 21 91 17         		ld	ix,psgcom
(1) 1384/     73F : DD 19               		add	ix,de
(1) 1385/     741 : 7E                  		ld	a,(hl)
(1) 1386/     742 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 1387/     745 : 23                  		inc	hl
(1) 1388/     746 : 7E                  		ld	a,(hl)
(1) 1389/     747 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 1390/     74A : 23                  		inc	hl
(1) 1391/     74B : CF                  		rst	8
(1) 1392/     74C : 7E                  		ld	a,(hl)
(1) 1393/     74D : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 1394/     750 : 23                  		inc	hl
(1) 1395/     751 : 7E                  		ld	a,(hl)
(1) 1396/     752 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 1397/     755 : 23                  		inc	hl
(1) 1398/     756 : 7E                  		ld	a,(hl)
(1) 1399/     757 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 1400/     75A : C9                  		ret
(1) 1401/     75B :                     
(1) 1402/     75B :                     ; --------------------------------
(1) 1403/     75B :                     ; FM,FM3,FM6
(1) 1404/     75B :                     ; --------------------------------
(1) 1405/     75B :                     
(1) 1406/     75B :                     .ins_dac:
(1) 1407/     75B : DD 36 04 01         		ld	(ix+4),1	; e - alternate mode flag (FM6 as DAC)
(1) 1408/     75F : 7E                  		ld	a,(hl)		; Grab flags from ID
(1) 1409/     760 : E6 01               		and	001b
(1) 1410/     762 : 32 2B 00            		ld	(wave_Flags),a
(1) 1411/     765 : 23                  		inc	hl
(1) 1412/     766 : 7E                  		ld	a,(hl)		; Save pitch
(1) 1413/     767 : DD 77 03            		ld	(ix+3),a
(1) 1414/     76A : 23                  		inc	hl
(1) 1415/     76B : 4E                  		ld	c,(hl)		; Grab the 24-bit address
(1) 1416/     76C : 23                  		inc	hl		; big endian this time.
(1) 1417/     76D : CF                  		rst	8
(1) 1418/     76E : 56                  		ld	d,(hl)
(1) 1419/     76F : 23                  		inc	hl
(1) 1420/     770 : 5E                  		ld	e,(hl)
(1) 1421/     771 :                     
(1) 1422/     771 : CF                  		rst	8
(1) 1423/     772 : 6B                  		ld	l,e
(1) 1424/     773 : 62                  		ld	h,d
(1) 1425/     774 : 79                  		ld	a,c
(1) 1426/     775 : E5                  		push	hl		; Recieve LEN and LOOP
(1) 1427/     776 : F5                  		push	af		; from the WAVE itself
(1) 1428/     777 : 11 23 00            		ld	de,wave_Len
(1) 1429/     77A : 01 06 00            		ld	bc,6
(1) 1430/     77D : CF                  		rst	8
(1) 1431/     77E : CD C4 0F            		call	transferRom
(1) 1432/     781 : F1                  		pop	af
(1) 1433/     782 : E1                  		pop	hl
(1) 1434/     783 : 01 06 00            		ld	bc,6		; skip LEN point
(1) 1435/     786 : 09                  		add	hl,bc
(1) 1436/     787 : CE 00               		adc	a,0
(1) 1437/     789 : 22 20 00            		ld	(wave_Start),hl	; save START point
(1) 1438/     78C : 32 22 00            		ld	(wave_Start+2),a
(1) 1439/     78F : 3E 04               		ld	a,100b		; Force FM6 off
(1) 1440/     791 : 32 CA 17            		ld	(fmcom+5),a
(1) 1441/     794 : C9                  		ret
(1) 1442/     795 :                     
(1) 1443/     795 :                     ; FM3 special mode
(1) 1444/     795 :                     .ins_fm3:
(1) 1445/     795 : 3E 02               		ld	a,2		; manual index
(1) 1446/     797 : 1E 01               		ld	e,1		; set as alternate FM
(1) 1447/     799 : CD CF 07            		call	.rd_fmins
(1) 1448/     79C : 21 C7 17            		ld	hl,fmcom+2
(1) 1449/     79F : 7E                  		ld	a,(hl)		; instrument update bit
(1) 1450/     7A0 : F6 10               		or	00010000b	; flag
(1) 1451/     7A2 : 77                  		ld	(hl),a
(1) 1452/     7A3 : C9                  		ret
(1) 1453/     7A4 :                     ; Regular FM
(1) 1454/     7A4 :                     .ins_fm:
(1) 1455/     7A4 : CF                  		rst	8
(1) 1456/     7A5 : 1E 00               		ld	e,0		; Set as normal FM
(1) 1457/     7A7 : DD 7E 02            		ld	a,(ix+2)
(1) 1458/     7AA : E6 07               		and	00000111b
(1) 1459/     7AC : FE 05               		cp	5		; Check if we are on FM6
(1) 1460/     7AE : 20 08               		jr	nz,.not_prdac
(1) 1461/     7B0 : 57                  		ld	d,a
(1) 1462/     7B1 : 3E 04               		ld	a,100b		; Force DAC stop
(1) 1463/     7B3 : CF                  		rst	8
(1) 1464/     7B4 : 32 E5 18            		ld	(daccom),a
(1) 1465/     7B7 : 7A                  		ld	a,d
(1) 1466/     7B8 :                     .not_prdac:
(1) 1467/     7B8 : 1E 00               		ld	e,0		; Set as Normal
(1) 1468/     7BA : CD CF 07            		call	.rd_fmins
(1) 1469/     7BD : DD 7E 02            		ld	a,(ix+2)
(1) 1470/     7C0 : E6 07               		and	00000111b
(1) 1471/     7C2 : 16 00               		ld	d,0
(1) 1472/     7C4 : CF                  		rst	8
(1) 1473/     7C5 : 5F                  		ld	e,a
(1) 1474/     7C6 : 21 C5 17            		ld	hl,fmcom
(1) 1475/     7C9 : 19                  		add	hl,de
(1) 1476/     7CA : 7E                  		ld	a,(hl)		; instrument update bit
(1) 1477/     7CB : F6 10               		or	00010000b	; flag
(1) 1478/     7CD : 77                  		ld	(hl),a
(1) 1479/     7CE : C9                  		ret
(1) 1480/     7CF :                     
(1) 1481/     7CF :                     ; Read FM instrument
(1) 1482/     7CF :                     ;
(1) 1483/     7CF :                     ; e - alternate mode flag
(1) 1484/     7CF :                     .rd_fmins:
(1) 1485/     7CF : DD 73 04            		ld	(ix+4),e	; e - alternate mode flag
(1) 1486/     7D2 : 23                  		inc	hl		; skip ID and pitch
(1) 1487/     7D3 : 5E                  		ld	e,(hl)
(1) 1488/     7D4 : DD 73 03            		ld	(ix+3),e	; save pitch
(1) 1489/     7D7 : 23                  		inc	hl
(1) 1490/     7D8 : 87                  		add	a,a
(1) 1491/     7D9 : 16 00               		ld	d,0
(1) 1492/     7DB : 5F                  		ld	e,a
(1) 1493/     7DC : CF                  		rst	8
(1) 1494/     7DD : E5                  		push	hl		; save ins hl
(1) 1495/     7DE : 21 15 08            		ld	hl,.fmpickins
(1) 1496/     7E1 : 19                  		add	hl,de
(1) 1497/     7E2 : 5E                  		ld	e,(hl)		; get output location
(1) 1498/     7E3 : 23                  		inc	hl		; from list
(1) 1499/     7E4 : 56                  		ld	d,(hl)
(1) 1500/     7E5 : CF                  		rst	8
(1) 1501/     7E6 : E1                  		pop	hl
(1) 1502/     7E7 : 7E                  		ld	a,(hl)		; a - xx0000
(1) 1503/     7E8 : 23                  		inc	hl
(1) 1504/     7E9 : 4E                  		ld	c,(hl)		; c - 00xx00
(1) 1505/     7EA : 23                  		inc	hl
(1) 1506/     7EB : 6E                  		ld	l,(hl)		; l - 0000xx
(1) 1507/     7EC : 61                  		ld	h,c		; c to h
(1) 1508/     7ED : D5                  		push	de
(1) 1509/     7EE : CF                  		rst	8
(1) 1510/     7EF : 4F                  		ld	c,a
(1) 1511/     7F0 : DD 7E 07            		ld	a,(ix+7)
(1) 1512/     7F3 : B9                  		cp	c
(1) 1513/     7F4 : 20 0C               		jr	nz,.confm_rd
(1) 1514/     7F6 : DD 7E 06            		ld	a,(ix+6)
(1) 1515/     7F9 : BC                  		cp	h
(1) 1516/     7FA : 20 06               		jr	nz,.confm_rd
(1) 1517/     7FC : DD 7E 05            		ld	a,(ix+5)
(1) 1518/     7FF : BD                  		cp	l
(1) 1519/     800 : 28 11               		jr	z,.fmsame_ins
(1) 1520/     802 :                     .confm_rd:
(1) 1521/     802 : CF                  		rst	8
(1) 1522/     803 : DD 75 05            		ld	(ix+5),l
(1) 1523/     806 : DD 74 06            		ld	(ix+6),h
(1) 1524/     809 : DD 71 07            		ld	(ix+7),c
(1) 1525/     80C : 79                  		ld	a,c
(1) 1526/     80D : 01 28 00            		ld	bc,028h		; 28h bytes
(1) 1527/     810 : CD C4 0F            		call	transferRom	; Transfer instrument data from ROM
(1) 1528/     813 :                     .fmsame_ins:
(1) 1529/     813 : E1                  		pop	hl
(1) 1530/     814 : C9                  		ret
(1) 1531/     815 :                     
(1) 1532/     815 :                     ; manual location for each instr cache
(1) 1533/     815 :                     ; 28h bytes each
(1) 1534/     815 :                     .fmpickins:
(1) 1535/     815 : E9 17               		dw fmins_com
(1) 1536/     817 : 11 18               		dw fmins_com2
(1) 1537/     819 : 39 18               		dw fmins_com3
(1) 1538/     81B : 61 18               		dw fmins_com4
(1) 1539/     81D : 89 18               		dw fmins_com5
(1) 1540/     81F : B1 18               		dw fmins_com6
(1) 1541/     821 :                     
(1) 1542/     821 :                     ; ----------------------------------------
(1) 1543/     821 :                     ; bit 2
(1) 1544/     821 :                     ; ----------------------------------------
(1) 1545/     821 :                     
(1) 1546/     821 :                     .req_vol:
(1) 1547/     821 : 2A 72 1A            		ld	hl,(currInsPos)
(1) 1548/     824 : DD 2A 70 1A         		ld	ix,(currTblPos)
(1) 1549/     828 : 7E                  		ld	a,(hl)
(1) 1550/     829 : E6 F0               		and	11110000b
(1) 1551/     82B : FE 80               		cp	80h		; PSG normal
(1) 1552/     82D : 28 45               		jr	z,.vol_psg
(1) 1553/     82F : FE 90               		cp	90h		; PSG noise
(1) 1554/     831 : 28 41               		jr	z,.vol_psg
(1) 1555/     833 : CF                  		rst	8
(1) 1556/     834 : FE A0               		cp	0A0h		; FM normal
(1) 1557/     836 : 28 5F               		jr	z,.vol_fm
(1) 1558/     838 : FE B0               		cp	0B0h		; FM special (same thing)
(1) 1559/     83A : 28 5B               		jr	z,.vol_fm
(1) 1560/     83C :                     ; 		cp	0C0h		; DAC
(1) 1561/     83C :                     ; 		jr	z,.vol_dac
(1) 1562/     83C : FE D0               		cp	0D0h		; PWM
(1) 1563/     83E : 28 01               		jr	z,.vol_pwm
(1) 1564/     840 : C9                  		ret
(1) 1565/     841 :                     
(1) 1566/     841 :                     ; --------------------------------
(1) 1567/     841 :                     ; FM,FM3,FM6
(1) 1568/     841 :                     .vol_pwm:
(1) 1569/     841 : 01 00 00            		ld	bc,0
(1) 1570/     844 : DD 7E 02            		ld	a,(ix+2)
(1) 1571/     847 : E6 07               		and	00000111b
(1) 1572/     849 : 4F                  		ld	c,a
(1) 1573/     84A : CF                  		rst	8
(1) 1574/     84B : DD 21 E8 18         		ld	ix,pwmcom
(1) 1575/     84F : DD 09               		add	ix,bc
(1) 1576/     851 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1577/     854 : E6 03               		and	00000011b
(1) 1578/     856 : 4F                  		ld	c,a		; c - MSB Pitch bits
(1) 1579/     857 : FD 7E 03            		ld	a,(iy+chnl_Vol)
(1) 1580/     85A : D6 40               		sub	a,40h
(1) 1581/     85C : CF                  		rst	8
(1) 1582/     85D : ED 44               		neg	a		; reverse impulse volume
(1) 1583/     85F : 87                  		add	a,a
(1) 1584/     860 : 87                  		add	a,a
(1) 1585/     861 : 30 03               		jr	nc,.pvmuch
(1) 1586/     863 : 3E FF               		ld	a,-1
(1) 1587/     865 : CF                  		rst	8
(1) 1588/     866 :                     .pvmuch:
(1) 1589/     866 : B1                  		or	c
(1) 1590/     867 : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1591/     86A : DD CB 00 EE         		set	5,(ix)		; set volume update bit
(1) 1592/     86E : 3E 01               		ld	a,1
(1) 1593/     870 : 32 2E 00            		ld	(marsUpd),a
(1) 1594/     873 : C9                  		ret
(1) 1595/     874 :                     
(1) 1596/     874 :                     ; --------------------------------
(1) 1597/     874 :                     ; PSG1-3,PSGN
(1) 1598/     874 :                     
(1) 1599/     874 :                     .vol_psg:
(1) 1600/     874 : DD 7E 02            		ld	a,(ix+2)
(1) 1601/     877 : DD 21 91 17         		ld	ix,psgcom
(1) 1602/     87B : E6 03               		and	11b
(1) 1603/     87D : 16 00               		ld	d,0
(1) 1604/     87F : 5F                  		ld	e,a
(1) 1605/     880 : DD 19               		add	ix,de
(1) 1606/     882 : FD 7E 03            		ld	a,(iy+chnl_Vol)
(1) 1607/     885 : D6 40               		sub	a,40h
(1) 1608/     887 : ED 44               		neg	a
(1) 1609/     889 : 4F                  		ld	c,a
(1) 1610/     88A : FE 40               		cp	40h
(1) 1611/     88C : 20 02               		jr	nz,.vmuch
(1) 1612/     88E : 0E FF               		ld	c,-1
(1) 1613/     890 :                     .vmuch:
(1) 1614/     890 : 79                  		ld	a,c
(1) 1615/     891 : 87                  		add	a,a
(1) 1616/     892 : 87                  		add	a,a
(1) 1617/     893 : DD 77 30            		ld	(ix+PVOL),a
(1) 1618/     896 :                     ; 		ld	a,(ix)
(1) 1619/     896 :                     ; 		or	00100000b	; Set volume
(1) 1620/     896 :                     ; 		ld	(ix),a		; update flag
(1) 1621/     896 : C9                  		ret
(1) 1622/     897 :                     
(1) 1623/     897 :                     ; --------------------------------
(1) 1624/     897 :                     ; FM,FM3,FM6
(1) 1625/     897 :                     .vol_fm:
(1) 1626/     897 : 01 00 00            		ld	bc,0
(1) 1627/     89A : DD 7E 02            		ld	a,(ix+2)
(1) 1628/     89D : E6 07               		and	00000111b
(1) 1629/     89F : 4F                  		ld	c,a
(1) 1630/     8A0 : DD 21 C5 17         		ld	ix,fmcom
(1) 1631/     8A4 : DD 09               		add	ix,bc
(1) 1632/     8A6 : FD 7E 03            		ld	a,(iy+chnl_Vol)
(1) 1633/     8A9 : D6 40               		sub	a,40h
(1) 1634/     8AB : CF                  		rst	8
(1) 1635/     8AC : ED 44               		neg	a		; reverse impulse volume
(1) 1636/     8AE : CB 3F               		srl	a		; /2
(1) 1637/     8B0 : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1638/     8B3 : DD 7E 00            		ld	a,(ix)		; volume update
(1) 1639/     8B6 : F6 20               		or	00100000b	; flag, plus keyon
(1) 1640/     8B8 : DD 77 00            		ld	(ix),a
(1) 1641/     8BB : C9                  		ret
(1) 1642/     8BC :                     
(1) 1643/     8BC :                     ; ----------------------------------------
(1) 1644/     8BC :                     ; bit 3
(1) 1645/     8BC :                     ; ----------------------------------------
(1) 1646/     8BC :                     
(1) 1647/     8BC :                     .req_eff:
(1) 1648/     8BC : 2A 72 1A            		ld	hl,(currInsPos)
(1) 1649/     8BF : DD 2A 70 1A         		ld	ix,(currTblPos)
(1) 1650/     8C3 : FD 7E 04            		ld	a,(iy+chnl_EffId)	; effect id == 0?
(1) 1651/     8C6 : B7                  		or	a
(1) 1652/     8C7 : C8                  		ret	z
(1) 1653/     8C8 : 57                  		ld	d,a
(1) 1654/     8C9 : 7E                  		ld	a,(hl)
(1) 1655/     8CA : E6 F0               		and	11110000b
(1) 1656/     8CC : FD 5E 05            		ld	e,(iy+chnl_EffArg)
(1) 1657/     8CF : CF                  		rst	8
(1) 1658/     8D0 : FE 80               		cp	80h			; PSG normal
(1) 1659/     8D2 : 28 16               		jr	z,.eff_psg
(1) 1660/     8D4 : FE 90               		cp	90h			; PSG noise
(1) 1661/     8D6 : 28 12               		jr	z,.eff_psg
(1) 1662/     8D8 : FE A0               		cp	0A0h			; FM Normal
(1) 1663/     8DA : 28 21               		jr	z,.eff_fm
(1) 1664/     8DC : CF                  		rst	8
(1) 1665/     8DD : FE B0               		cp	0B0h			; FM Special
(1) 1666/     8DF : 28 1C               		jr	z,.eff_fm
(1) 1667/     8E1 : FE C0               		cp	0C0h			; DAC
(1) 1668/     8E3 : 28 2F               		jr	z,.eff_dac
(1) 1669/     8E5 : FE D0               		cp	0D0h			; PWM
(1) 1670/     8E7 : 28 3D               		jr	z,.eff_pwm
(1) 1671/     8E9 : C9                  		ret
(1) 1672/     8EA :                     
(1) 1673/     8EA :                     ; --------------------------------
(1) 1674/     8EA :                     
(1) 1675/     8EA :                     .eff_psg:
(1) 1676/     8EA : 7A                  		ld	a,d
(1) 1677/     8EB : FE 04               		cp	4		; Effect D?
(1) 1678/     8ED : CA 3D 09            		jp	z,.effPsg_D
(1) 1679/     8F0 : FE 05               		cp	5		; Effect E?
(1) 1680/     8F2 : CA BD 09            		jp	z,.effPsg_E
(1) 1681/     8F5 : CF                  		rst	8
(1) 1682/     8F6 : FE 06               		cp	6		; Effect F?
(1) 1683/     8F8 : CA EF 09            		jp	z,.effPsg_F
(1) 1684/     8FB : CF                  		rst	8
(1) 1685/     8FC : C9                  		ret
(1) 1686/     8FD :                     .eff_fm:
(1) 1687/     8FD : 7A                  		ld	a,d
(1) 1688/     8FE : FE 04               		cp	4		; Effect D?
(1) 1689/     900 : CA 6B 09            		jp	z,.effFm_D
(1) 1690/     903 : FE 05               		cp	5		; Effect E?
(1) 1691/     905 : CA C7 09            		jp	z,.effFm_E
(1) 1692/     908 : CF                  		rst	8
(1) 1693/     909 : FE 06               		cp	6		; Effect F?
(1) 1694/     90B : CA FD 09            		jp	z,.effFm_F
(1) 1695/     90E : FE 18               		cp	24		; Effect X?
(1) 1696/     910 : CA C1 0A            		jp	z,.effFm_X
(1) 1697/     913 : C9                  		ret
(1) 1698/     914 :                     .eff_dac:
(1) 1699/     914 : 7A                  		ld	a,d
(1) 1700/     915 : FE 05               		cp	5		; Effect E?
(1) 1701/     917 : CA D5 09            		jp	z,.effDac_E
(1) 1702/     91A : FE 06               		cp	6		; Effect F?
(1) 1703/     91C : CA 04 0A            		jp	z,.effDac_F
(1) 1704/     91F : CF                  		rst	8
(1) 1705/     920 : FE 18               		cp	24		; Effect X?
(1) 1706/     922 : CA C1 0A            		jp	z,.effFm_X
(1) 1707/     925 : C9                  		ret
(1) 1708/     926 :                     .eff_pwm:
(1) 1709/     926 : 3E 01               		ld	a,1
(1) 1710/     928 : 32 2E 00            		ld	(marsUpd),a
(1) 1711/     92B : 7A                  		ld	a,d
(1) 1712/     92C :                     ; 		cp	4		; Effect D?
(1) 1713/     92C :                     ; 		jp	z,.effFm_D
(1) 1714/     92C : FE 05               		cp	5		; Effect E?
(1) 1715/     92E : CA E2 09            		jp	z,.effPwm_E
(1) 1716/     931 : CF                  		rst	8
(1) 1717/     932 : FE 06               		cp	6		; Effect F?
(1) 1718/     934 : CA 0A 0A            		jp	z,.effPwm_F
(1) 1719/     937 : FE 18               		cp	24		; Effect X?
(1) 1720/     939 : CA C1 0A            		jp	z,.effFm_X	; recycle FM's panning
(1) 1721/     93C : C9                  		ret
(1) 1722/     93D :                     
(1) 1723/     93D :                     ; --------------------------------
(1) 1724/     93D :                     ; Effect D
(1) 1725/     93D :                     ; --------------------------------
(1) 1726/     93D :                     
(1) 1727/     93D :                     .effPsg_D:
(1) 1728/     93D : 7B                  		ld	a,e
(1) 1729/     93E : B7                  		or	a
(1) 1730/     93F : C8                  		ret	z
(1) 1731/     940 : 06 00               		ld	b,0
(1) 1732/     942 : DD 7E 02            		ld	a,(ix+2)
(1) 1733/     945 : E6 03               		and	011b
(1) 1734/     947 : 4F                  		ld	c,a
(1) 1735/     948 : DD 21 91 17         		ld	ix,psgcom
(1) 1736/     94C : DD 09               		add	ix,bc
(1) 1737/     94E : CD 9A 09            		call	.grab_dval
(1) 1738/     951 : 87                  		add	a,a
(1) 1739/     952 : 87                  		add	a,a
(1) 1740/     953 : 87                  		add	a,a
(1) 1741/     954 : 4F                  		ld	c,a
(1) 1742/     955 : CB 79               		bit	7,c
(1) 1743/     957 : 20 09               		jr	nz,.lowp
(1) 1744/     959 : DD 7E 30            		ld	a,(ix+PVOL)
(1) 1745/     95C : 81                  		add	a,c
(1) 1746/     95D : D8                  		ret	c
(1) 1747/     95E : DD 77 30            		ld	(ix+PVOL),a
(1) 1748/     961 : C9                  		ret
(1) 1749/     962 :                     .lowp:
(1) 1750/     962 : DD 7E 30            		ld	a,(ix+PVOL)
(1) 1751/     965 : 81                  		add	a,c
(1) 1752/     966 : D0                  		ret	nc
(1) 1753/     967 : DD 77 30            		ld	(ix+PVOL),a
(1) 1754/     96A : C9                  		ret
(1) 1755/     96B :                     .effFm_D:
(1) 1756/     96B : 7B                  		ld	a,e
(1) 1757/     96C : B7                  		or	a
(1) 1758/     96D : C8                  		ret	z
(1) 1759/     96E : 06 00               		ld	b,0
(1) 1760/     970 : DD 7E 02            		ld	a,(ix+2)
(1) 1761/     973 : E6 07               		and	111b
(1) 1762/     975 : 4F                  		ld	c,a
(1) 1763/     976 : DD 21 C5 17         		ld	ix,fmcom
(1) 1764/     97A : DD 09               		add	ix,bc
(1) 1765/     97C : CD 9A 09            		call	.grab_dval
(1) 1766/     97F :                     ; 		srl	a		; TODO: checar que tanto
(1) 1767/     97F :                     ; 		srl	a		; shifteo esto
(1) 1768/     97F : 4F                  		ld	c,a
(1) 1769/     980 : DD CB 00 EE         		set	5,(ix)
(1) 1770/     984 : CB 79               		bit	7,c
(1) 1771/     986 : 20 09               		jr	nz,.lowpf
(1) 1772/     988 : DD 7E 0C            		ld	a,(ix+FMVOL)
(1) 1773/     98B : 81                  		add	a,c
(1) 1774/     98C : D8                  		ret	c
(1) 1775/     98D : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1776/     990 : C9                  		ret
(1) 1777/     991 :                     .lowpf:
(1) 1778/     991 : DD 7E 0C            		ld	a,(ix+FMVOL)
(1) 1779/     994 : 81                  		add	a,c
(1) 1780/     995 : D0                  		ret	nc
(1) 1781/     996 : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1782/     999 : C9                  		ret
(1) 1783/     99A :                     
(1) 1784/     99A :                     ; a - increment/decrement value
(1) 1785/     99A :                     .grab_dval:
(1) 1786/     99A : 7B                  		ld	a,e
(1) 1787/     99B : E6 F0               		and	11110000b
(1) 1788/     99D : FE F0               		cp	11110000b
(1) 1789/     99F : 28 03               		jr	z,.go_down
(1) 1790/     9A1 : B7                  		or	a
(1) 1791/     9A2 : 20 09               		jr	nz,.go_up
(1) 1792/     9A4 :                     .go_down:
(1) 1793/     9A4 : 7B                  		ld	a,e
(1) 1794/     9A5 : E6 0F               		and	00001111b
(1) 1795/     9A7 : CB 7B               		bit	7,e
(1) 1796/     9A9 : C0                  		ret	nz
(1) 1797/     9AA : 87                  		add	a,a
(1) 1798/     9AB : CF                  		rst	8
(1) 1799/     9AC : C9                  		ret
(1) 1800/     9AD :                     .go_up:
(1) 1801/     9AD : 7B                  		ld	a,e
(1) 1802/     9AE : 0F                  		rrca
(1) 1803/     9AF : 0F                  		rrca
(1) 1804/     9B0 : 0F                  		rrca
(1) 1805/     9B1 : 0F                  		rrca
(1) 1806/     9B2 : CF                  		rst	8
(1) 1807/     9B3 : E6 0F               		and	00001111b
(1) 1808/     9B5 : ED 44               		neg	a
(1) 1809/     9B7 : CB 5B               		bit	3,e
(1) 1810/     9B9 : C0                  		ret	nz
(1) 1811/     9BA : 87                  		add	a,a
(1) 1812/     9BB : CF                  		rst	8
(1) 1813/     9BC : C9                  		ret
(1) 1814/     9BD :                     
(1) 1815/     9BD :                     ; --------------------------------
(1) 1816/     9BD :                     ; Effect E
(1) 1817/     9BD :                     ; --------------------------------
(1) 1818/     9BD :                     
(1) 1819/     9BD :                     .effPsg_E:
(1) 1820/     9BD : CD A2 0A            		call	.grab_prtm
(1) 1821/     9C0 : 16 00               		ld	d,0
(1) 1822/     9C2 : 87                  		add	a,a
(1) 1823/     9C3 : 5F                  		ld	e,a
(1) 1824/     9C4 : C3 78 0A            		jp	.freqinc_psg
(1) 1825/     9C7 :                     .effFm_E:
(1) 1826/     9C7 : CD A2 0A            		call	.grab_prtm
(1) 1827/     9CA : ED 44               		neg	a
(1) 1828/     9CC : B7                  		or	a
(1) 1829/     9CD : 28 02               		jr	z,.e_neg
(1) 1830/     9CF : 16 FF               		ld	d,-1
(1) 1831/     9D1 :                     .e_neg:
(1) 1832/     9D1 : 5F                  		ld	e,a
(1) 1833/     9D2 : C3 52 0A            		jp	.freqinc_fm
(1) 1834/     9D5 :                     .effDac_E:
(1) 1835/     9D5 : CD A2 0A            		call	.grab_prtm
(1) 1836/     9D8 : ED 44               		neg	a
(1) 1837/     9DA : B7                  		or	a
(1) 1838/     9DB : 28 02               		jr	z,.e_negd
(1) 1839/     9DD : 16 FF               		ld	d,-1
(1) 1840/     9DF :                     .e_negd:
(1) 1841/     9DF : 5F                  		ld	e,a
(1) 1842/     9E0 : 18 60               		jr	.freqinc_dac
(1) 1843/     9E2 :                     
(1) 1844/     9E2 :                     .effPwm_E:
(1) 1845/     9E2 : CD A2 0A            		call	.grab_prtm
(1) 1846/     9E5 :                     ; 		sra	a
(1) 1847/     9E5 :                     ; 		sra	a
(1) 1848/     9E5 : ED 44               		neg	a
(1) 1849/     9E7 : B7                  		or	a
(1) 1850/     9E8 : 28 02               		jr	z,.e_fnegd2
(1) 1851/     9EA : 16 FF               		ld	d,-1
(1) 1852/     9EC :                     .e_fnegd2:
(1) 1853/     9EC : 5F                  		ld	e,a
(1) 1854/     9ED : 18 1F               		jr	.freqinc_pwm
(1) 1855/     9EF :                     
(1) 1856/     9EF :                     ; --------------------------------
(1) 1857/     9EF :                     ; Effect F
(1) 1858/     9EF :                     ; --------------------------------
(1) 1859/     9EF :                     
(1) 1860/     9EF :                     ; PSG
(1) 1861/     9EF :                     .effPsg_F:
(1) 1862/     9EF : CD A2 0A            		call	.grab_prtm
(1) 1863/     9F2 : 87                  		add	a,a
(1) 1864/     9F3 : ED 44               		neg	a
(1) 1865/     9F5 : B7                  		or	a
(1) 1866/     9F6 : 28 02               		jr	z,.e_negp
(1) 1867/     9F8 : 16 FF               		ld	d,-1
(1) 1868/     9FA :                     .e_negp:
(1) 1869/     9FA : 5F                  		ld	e,a
(1) 1870/     9FB : 18 7B               		jr	.freqinc_psg
(1) 1871/     9FD :                     .effFm_F:
(1) 1872/     9FD : CD A2 0A            		call	.grab_prtm
(1) 1873/     A00 : 87                  		add	a,a
(1) 1874/     A01 : 5F                  		ld	e,a
(1) 1875/     A02 : 18 4E               		jr	.freqinc_fm
(1) 1876/     A04 :                     .effDac_F:
(1) 1877/     A04 : CD A2 0A            		call	.grab_prtm
(1) 1878/     A07 : 5F                  		ld	e,a
(1) 1879/     A08 : 18 38               		jr	.freqinc_dac
(1) 1880/     A0A :                     .effPwm_F:
(1) 1881/     A0A : CD A2 0A            		call	.grab_prtm
(1) 1882/     A0D :                     ; 		sra	a
(1) 1883/     A0D :                     ; 		sra	a
(1) 1884/     A0D : 5F                  		ld	e,a
(1) 1885/     A0E :                     
(1) 1886/     A0E :                     ; --------------------------------
(1) 1887/     A0E :                     ; For effects E and F:
(1) 1888/     A0E :                     ;
(1) 1889/     A0E :                     ; de - freq incr/decr
(1) 1890/     A0E :                     
(1) 1891/     A0E :                     .freqinc_pwm:
(1) 1892/     A0E : DD 7E 02            		ld	a,(ix+2)
(1) 1893/     A11 : E6 07               		and	111b
(1) 1894/     A13 : DD 21 E8 18         		ld	ix,pwmcom
(1) 1895/     A17 : 06 00               		ld	b,0
(1) 1896/     A19 : 4F                  		ld	c,a
(1) 1897/     A1A : CF                  		rst	8
(1) 1898/     A1B : DD 09               		add	ix,bc
(1) 1899/     A1D : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1900/     A20 : E6 03               		and	00000011b
(1) 1901/     A22 : 67                  		ld	h,a
(1) 1902/     A23 : DD 6E 10            		ld	l,(ix+PWPHL)
(1) 1903/     A26 : 19                  		add	hl,de
(1) 1904/     A27 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1905/     A2A : E6 FC               		and	11111100b
(1) 1906/     A2C : CF                  		rst	8
(1) 1907/     A2D : B4                  		or	h
(1) 1908/     A2E : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1909/     A31 : DD 75 10            		ld	(ix+PWPHL),l
(1) 1910/     A34 : DD 7E 00            		ld	a,(ix)			; pitch bend request
(1) 1911/     A37 : F6 10               		or	00010000b
(1) 1912/     A39 : DD 77 00            		ld	(ix),a
(1) 1913/     A3C : 3E 01               		ld	a,1
(1) 1914/     A3E : 32 2E 00            		ld	(marsUpd),a
(1) 1915/     A41 : C9                  		ret
(1) 1916/     A42 :                     
(1) 1917/     A42 :                     .freqinc_dac:
(1) 1918/     A42 : 2A 29 00            		ld	hl,(wave_Pitch)		; tricky one...
(1) 1919/     A45 : 19                  		add	hl,de
(1) 1920/     A46 : 22 29 00            		ld	(wave_Pitch),hl
(1) 1921/     A49 : 3A E5 18            		ld	a,(daccom)
(1) 1922/     A4C : F6 10               		or	00010000b
(1) 1923/     A4E : 32 E5 18            		ld	(daccom),a
(1) 1924/     A51 : C9                  		ret
(1) 1925/     A52 :                     
(1) 1926/     A52 :                     .freqinc_fm:
(1) 1927/     A52 : DD 7E 02            		ld	a,(ix+2)
(1) 1928/     A55 : E6 07               		and	111b
(1) 1929/     A57 : DD 21 C5 17         		ld	ix,fmcom
(1) 1930/     A5B : 06 00               		ld	b,0
(1) 1931/     A5D : 4F                  		ld	c,a
(1) 1932/     A5E : CF                  		rst	8
(1) 1933/     A5F : DD 09               		add	ix,bc
(1) 1934/     A61 : DD 66 18            		ld	h,(ix+FMFRQH)
(1) 1935/     A64 : DD 6E 1E            		ld	l,(ix+FMFRQL)
(1) 1936/     A67 : 19                  		add	hl,de
(1) 1937/     A68 : DD 74 18            		ld	(ix+FMFRQH),h
(1) 1938/     A6B : CF                  		rst	8
(1) 1939/     A6C : DD 75 1E            		ld	(ix+FMFRQL),l
(1) 1940/     A6F : DD 7E 00            		ld	a,(ix)
(1) 1941/     A72 : F6 01               		or	00000001b
(1) 1942/     A74 : DD 77 00            		ld	(ix),a
(1) 1943/     A77 : C9                  		ret
(1) 1944/     A78 :                     .freqinc_psg:
(1) 1945/     A78 : DD 7E 02            		ld	a,(ix+2)
(1) 1946/     A7B : E6 03               		and	011b
(1) 1947/     A7D : DD 21 91 17         		ld	ix,psgcom
(1) 1948/     A81 : 06 00               		ld	b,0
(1) 1949/     A83 : 4F                  		ld	c,a
(1) 1950/     A84 : DD 09               		add	ix,bc
(1) 1951/     A86 : CF                  		rst	8
(1) 1952/     A87 : DD 66 20            		ld	h,(ix+DTH)
(1) 1953/     A8A : DD 6E 1C            		ld	l,(ix+DTL)
(1) 1954/     A8D : 19                  		add	hl,de
(1) 1955/     A8E : 7C                  		ld	a,h
(1) 1956/     A8F : E6 07               		and	00000111b
(1) 1957/     A91 : 67                  		ld	h,a
(1) 1958/     A92 : CF                  		rst	8
(1) 1959/     A93 : DD 74 20            		ld	(ix+DTH),h
(1) 1960/     A96 : DD 75 1C            		ld	(ix+DTL),l
(1) 1961/     A99 : DD 7E 00            		ld	a,(ix)
(1) 1962/     A9C : F6 01               		or	00000001b
(1) 1963/     A9E : DD 77 00            		ld	(ix),a
(1) 1964/     AA1 : C9                  		ret
(1) 1965/     AA2 :                     ; grab portametro value
(1) 1966/     AA2 :                     .grab_prtm:
(1) 1967/     AA2 : 16 00               		ld	d,0
(1) 1968/     AA4 : 7B                  		ld	a,e
(1) 1969/     AA5 : E6 F0               		and	11110000b
(1) 1970/     AA7 : FE F0               		cp	0F0h
(1) 1971/     AA9 : 20 07               		jr	nz,.e_nof
(1) 1972/     AAB : CF                  		rst	8
(1) 1973/     AAC : 7B                  		ld	a,e
(1) 1974/     AAD : E6 0F               		and	0Fh
(1) 1975/     AAF : 87                  		add	a,a
(1) 1976/     AB0 : 18 0E               		jr	.e_go
(1) 1977/     AB2 :                     .e_nof:
(1) 1978/     AB2 : CF                  		rst	8
(1) 1979/     AB3 : FE E0               		cp	0E0h
(1) 1980/     AB5 : 20 05               		jr	nz,.e_noef
(1) 1981/     AB7 : 7B                  		ld	a,e
(1) 1982/     AB8 : E6 0F               		and	0Fh
(1) 1983/     ABA : 18 04               		jr	.e_go
(1) 1984/     ABC :                     .e_noef:
(1) 1985/     ABC : CF                  		rst	8
(1) 1986/     ABD : 7B                  		ld	a,e
(1) 1987/     ABE : 87                  		add	a,a
(1) 1988/     ABF : 87                  		add	a,a
(1) 1989/     AC0 :                     .e_go:
(1) 1990/     AC0 : C9                  		ret
(1) 1991/     AC1 :                     
(1) 1992/     AC1 :                     ; --------------------------------
(1) 1993/     AC1 :                     ; Effect X: Panning
(1) 1994/     AC1 :                     ; --------------------------------
(1) 1995/     AC1 :                     
(1) 1996/     AC1 :                     ; PWM points here too.
(1) 1997/     AC1 :                     .effFm_X:
(1) 1998/     AC1 : 7B                  		ld	a,e
(1) 1999/     AC2 : 07                  		rlca
(1) 2000/     AC3 : 07                  		rlca
(1) 2001/     AC4 : E6 03               		and	00000011b
(1) 2002/     AC6 : 21 DA 0A            		ld	hl,.fmpan_list
(1) 2003/     AC9 : 11 00 00            		ld	de,0
(1) 2004/     ACC : 5F                  		ld	e,a
(1) 2005/     ACD : CF                  		rst	8
(1) 2006/     ACE : 19                  		add	hl,de
(1) 2007/     ACF : 5E                  		ld	e,(hl)
(1) 2008/     AD0 : FD 7E 07            		ld	a,(iy+chnl_Flags)
(1) 2009/     AD3 : E6 CF               		and	11001111b
(1) 2010/     AD5 : B3                  		or	e
(1) 2011/     AD6 : FD 77 07            		ld	(iy+chnl_Flags),a
(1) 2012/     AD9 : C9                  		ret
(1) 2013/     ADA :                     .fmpan_list:
(1) 2014/     ADA : 10                  		db 00010000b	; 000h
(1) 2015/     ADB : 10                  		db 00010000b	; 040h
(1) 2016/     ADC : 00                  		db 00000000b	; 080h
(1) 2017/     ADD : 20                  		db 00100000b	; 0C0h
(1) 2018/     ADE :                     
(1) 2019/     ADE :                     ; ----------------------------------------
(1) 2020/     ADE :                     ; bit 0
(1) 2021/     ADE :                     ; ----------------------------------------
(1) 2022/     ADE :                     
(1) 2023/     ADE :                     .req_note:
(1) 2024/     ADE : 2A 72 1A            		ld	hl,(currInsPos)
(1) 2025/     AE1 : DD 2A 70 1A         		ld	ix,(currTblPos)
(1) 2026/     AE5 : 7E                  		ld	a,(hl)
(1) 2027/     AE6 : 4F                  		ld	c,a		; special copy
(1) 2028/     AE7 : E6 F0               		and	11110000b
(1) 2029/     AE9 : FE 80               		cp	80h		; PSG normal
(1) 2030/     AEB : CA C7 0B            		jp	z,.note_psg
(1) 2031/     AEE : FE 90               		cp	90h		; PSG noise
(1) 2032/     AF0 : CA 9A 0B            		jp	z,.note_psgn
(1) 2033/     AF3 : FE A0               		cp	0A0h
(1) 2034/     AF5 : CA 98 0C            		jp	z,.note_fm
(1) 2035/     AF8 : CF                  		rst	8
(1) 2036/     AF9 : FE B0               		cp	0B0h
(1) 2037/     AFB : CA 74 0C            		jp	z,.note_fm3
(1) 2038/     AFE : FE C0               		cp	0C0h
(1) 2039/     B00 : CA 31 0C            		jp	z,.note_dac
(1) 2040/     B03 : FE D0               		cp	0D0h
(1) 2041/     B05 : CA 09 0B            		jp	z,.note_pwm
(1) 2042/     B08 : C9                  		ret
(1) 2043/     B09 :                     
(1) 2044/     B09 :                     ; --------------------------------
(1) 2045/     B09 :                     ; Note: PWM
(1) 2046/     B09 :                     ; --------------------------------
(1) 2047/     B09 :                     
(1) 2048/     B09 :                     .note_pwm:
(1) 2049/     B09 : 3E 01               		ld	a,1			; Send MARS request
(1) 2050/     B0B : 32 2E 00            		ld	(marsUpd),a
(1) 2051/     B0E : 21 E8 18            		ld	hl,pwmcom
(1) 2052/     B11 : DD 7E 02            		ld	a,(ix+2)
(1) 2053/     B14 : E6 07               		and	000111b
(1) 2054/     B16 : 06 00               		ld	b,0
(1) 2055/     B18 : 4F                  		ld	c,a
(1) 2056/     B19 : 09                  		add	hl,bc
(1) 2057/     B1A : CF                  		rst	8
(1) 2058/     B1B : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2059/     B1E : FE FF               		cp	-1
(1) 2060/     B20 : CA 6B 0B            		jp	z,.pwm_keyoff
(1) 2061/     B23 : FE FE               		cp	-2
(1) 2062/     B25 : CA 6F 0B            		jp	z,.pwm_keycut
(1) 2063/     B28 : 11 00 00            		ld	de,0
(1) 2064/     B2B : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(1) 2065/     B2E : 83                  		add	a,e
(1) 2066/     B2F : 87                  		add	a,a
(1) 2067/     B30 : CF                  		rst	8
(1) 2068/     B31 : 5F                  		ld	e,a
(1) 2069/     B32 : 79                  		ld	a,c
(1) 2070/     B33 : F6 D0               		or	0D0h
(1) 2071/     B35 : FD 77 00            		ld	(iy+chnl_Chip),a	; Set as PWM
(1) 2072/     B38 : E5                  		push	hl
(1) 2073/     B39 : DD E1               		pop	ix
(1) 2074/     B3B : 21 13 16            		ld	hl,wavFreq_List
(1) 2075/     B3E : 19                  		add	hl,de
(1) 2076/     B3F : 5E                  		ld	e,(hl)
(1) 2077/     B40 : 23                  		inc	hl
(1) 2078/     B41 : 56                  		ld	d,(hl)			; note: max 111b
(1) 2079/     B42 : CF                  		rst	8
(1) 2080/     B43 : DD CB 00 C6         		set	0,(ix)			; Note-on
(1) 2081/     B47 : 7A                  		ld	a,d
(1) 2082/     B48 : FD CB 07 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(1) 2083/     B4C : 28 06               		jr	z,.pwmn_kpv
(1) 2084/     B4E : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 2085/     B51 : E6 FC               		and	11111100b
(1) 2086/     B53 : B2                  		or	d
(1) 2087/     B54 :                     .pwmn_kpv:
(1) 2088/     B54 : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 2089/     B57 : DD 73 10            		ld	(ix+PWPHL),e
(1) 2090/     B5A : DD 7E 18            		ld	a,(ix+PWOUTF)
(1) 2091/     B5D : E6 CF               		and	11001111b		; Keep other bits
(1) 2092/     B5F : 4F                  		ld	c,a
(1) 2093/     B60 : FD 7E 07            		ld	a,(iy+chnl_Flags)	; 00LR 0000
(1) 2094/     B63 : 2F                  		cpl
(1) 2095/     B64 : E6 30               		and	00110000b
(1) 2096/     B66 : B1                  		or	c
(1) 2097/     B67 : DD 77 18            		ld	(ix+PWOUTF),a
(1) 2098/     B6A : C9                  		ret
(1) 2099/     B6B :                     
(1) 2100/     B6B :                     ; PSG Keyoff
(1) 2101/     B6B :                     .pwm_keyoff:
(1) 2102/     B6B : 0E 02               		ld	c,010b
(1) 2103/     B6D : 71                  		ld	(hl),c
(1) 2104/     B6E : C9                  		ret
(1) 2105/     B6F :                     .pwm_keycut:
(1) 2106/     B6F : 0E 04               		ld	c,100b
(1) 2107/     B71 : 18 06               		jr	.chnl_unlink
(1) 2108/     B73 :                     
(1) 2109/     B73 :                     ; 		ld	a,100b			; Request DAC stop
(1) 2110/     B73 :                     ; 		ld	(daccom),a
(1) 2111/     B73 :                     ; .doff:
(1) 2112/     B73 :                     ; 		ld	hl,0
(1) 2113/     B73 :                     ; 		ld	(tblFM6),hl
(1) 2114/     B73 :                     ; 		ld	(iy+chnl_Chip),0
(1) 2115/     B73 :                     ; 		ret
(1) 2116/     B73 :                     
(1) 2117/     B73 :                     ; --------------------------------
(1) 2118/     B73 :                     ; Note: PSG1-3,PSGN
(1) 2119/     B73 :                     ; --------------------------------
(1) 2120/     B73 :                     
(1) 2121/     B73 :                     ; PSG Keyoff
(1) 2122/     B73 :                     .poff:
(1) 2123/     B73 : 0E 02               		ld	c,010b
(1) 2124/     B75 : 71                  		ld	(hl),c
(1) 2125/     B76 : C9                  		ret
(1) 2126/     B77 :                     ; PSG Keycut
(1) 2127/     B77 :                     .pcut:
(1) 2128/     B77 : 0E 04               		ld	c,100b
(1) 2129/     B79 :                     .chnl_unlink:
(1) 2130/     B79 : CF                  		rst	8
(1) 2131/     B7A : FD E5               		push	iy
(1) 2132/     B7C : D1                  		pop	de
(1) 2133/     B7D : DD 7E 00            		ld	a,(ix)
(1) 2134/     B80 : BB                  		cp	e
(1) 2135/     B81 : C0                  		ret	nz
(1) 2136/     B82 : DD 7E 01            		ld	a,(ix+1)
(1) 2137/     B85 : BA                  		cp	d
(1) 2138/     B86 : C0                  		ret	nz
(1) 2139/     B87 : CF                  		rst	8
(1) 2140/     B88 : 71                  		ld	(hl),c
(1) 2141/     B89 : DD 36 00 00         		ld	(ix),0
(1) 2142/     B8D : DD 36 01 00         		ld	(ix+1),0
(1) 2143/     B91 : DD 36 03 00         		ld	(ix+3),0	; pitch zero
(1) 2144/     B95 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 2145/     B99 :                     ; 		ld	a,(iy+chnl_Flags)
(1) 2146/     B99 :                     ; 		and	11001111b
(1) 2147/     B99 :                     ; 		ld	(iy+chnl_Flags),a
(1) 2148/     B99 : C9                  		ret
(1) 2149/     B9A :                     
(1) 2150/     B9A :                     ; Play PSG note
(1) 2151/     B9A :                     .note_psgn:
(1) 2152/     B9A : DD 7E 02            		ld	a,(ix+2)
(1) 2153/     B9D : F6 90               		or	90h
(1) 2154/     B9F : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2155/     BA2 : 21 94 17            		ld 	hl,psgcom+3
(1) 2156/     BA5 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2157/     BA8 : FE FE               		cp	-2
(1) 2158/     BAA : CA 77 0B            		jp	z,.pcut
(1) 2159/     BAD : FE FF               		cp	-1
(1) 2160/     BAF : CA 73 0B            		jp	z,.poff
(1) 2161/     BB2 : 5F                  		ld	e,a
(1) 2162/     BB3 : DD 7E 04            		ld 	a,(ix+4)
(1) 2163/     BB6 : 32 63 19            		ld	(psgHatMode),a
(1) 2164/     BB9 : E6 03               		and	011b
(1) 2165/     BBB : FE 03               		cp	011b
(1) 2166/     BBD : 20 05               		jr	nz,.np2_n
(1) 2167/     BBF : 3E 04               		ld	a,100b
(1) 2168/     BC1 : 32 93 17            		ld	(psgcom+2),a
(1) 2169/     BC4 :                     .np2_n:
(1) 2170/     BC4 : 7B                  		ld	a,e
(1) 2171/     BC5 : 18 32               		jr	.notepsg_fn
(1) 2172/     BC7 :                     .note_psg:
(1) 2173/     BC7 : DD 7E 02            		ld	a,(ix+2)
(1) 2174/     BCA : F6 80               		or	80h
(1) 2175/     BCC : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2176/     BCF : DD 7E 02            		ld	a,(ix+2)
(1) 2177/     BD2 : CF                  		rst	8
(1) 2178/     BD3 : E6 03               		and	11b
(1) 2179/     BD5 : 16 00               		ld	d,0
(1) 2180/     BD7 : 5F                  		ld	e,a
(1) 2181/     BD8 : 21 91 17            		ld 	hl,psgcom
(1) 2182/     BDB : 19                  		add	hl,de
(1) 2183/     BDC : FE 02               		cp	2
(1) 2184/     BDE : 20 0C               		jr	nz,.notepsg_c
(1) 2185/     BE0 : 3A 63 19            		ld	a,(psgHatMode)
(1) 2186/     BE3 : E6 03               		and	011b
(1) 2187/     BE5 : FE 03               		cp	011b
(1) 2188/     BE7 : 20 03               		jr	nz,.notepsg_c
(1) 2189/     BE9 : 36 04               		ld	(hl),100b	; key-cut PSG3 but dont unlink
(1) 2190/     BEB : C9                  		ret
(1) 2191/     BEC :                     .notepsg_c:
(1) 2192/     BEC : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2193/     BEF : FE FE               		cp	-2
(1) 2194/     BF1 : CA 77 0B            		jp	z,.pcut
(1) 2195/     BF4 : FE FF               		cp	-1
(1) 2196/     BF6 : CA 73 0B            		jp	z,.poff
(1) 2197/     BF9 :                     .notepsg_fn:
(1) 2198/     BF9 : CF                  		rst	8
(1) 2199/     BFA : E5                  		push	hl		; save psgcom
(1) 2200/     BFB : 21 21 15            		ld	hl,psgFreq_List
(1) 2201/     BFE : DD 4E 03            		ld	c,(ix+3)
(1) 2202/     C01 : 81                  		add	a,c
(1) 2203/     C02 : 87                  		add	a,a
(1) 2204/     C03 : 11 00 00            		ld	de,0
(1) 2205/     C06 : 5F                  		ld	e,a
(1) 2206/     C07 : 19                  		add	hl,de
(1) 2207/     C08 : 5E                  		ld	e,(hl)
(1) 2208/     C09 : 23                  		inc	hl
(1) 2209/     C0A : 56                  		ld	d,(hl)
(1) 2210/     C0B : 01 00 00            		ld	bc,0
(1) 2211/     C0E : E6 03               		and	11b
(1) 2212/     C10 : 4F                  		ld	c,a
(1) 2213/     C11 : DD E5               		push	ix		; swap ix to hl
(1) 2214/     C13 : E1                  		pop	hl
(1) 2215/     C14 : CF                  		rst	8
(1) 2216/     C15 : 23                  		inc	hl		; skip link
(1) 2217/     C16 : 23                  		inc	hl
(1) 2218/     C17 : 23                  		inc 	hl		; channel id
(1) 2219/     C18 : 23                  		inc	hl		; pitch
(1) 2220/     C19 :                     ; 		ld	a,c
(1) 2221/     C19 :                     ; 		cp	3
(1) 2222/     C19 :                     ; 		jr	nz,.npsg2
(1) 2223/     C19 :                     ; 		ld 	a,(ix+4)
(1) 2224/     C19 :                     ; 		ld	(psgHatMode),a
(1) 2225/     C19 :                     ; .npsg2:
(1) 2226/     C19 : DD E1               		pop	ix			; restore psgcom as ix
(1) 2227/     C1B : FD 7E 07            		ld	a,(iy+chnl_Flags)	; Check is volume bit
(1) 2228/     C1E : CB 57               		bit	2,a			; is being used
(1) 2229/     C20 : 20 04               		jr	nz,.nodefv
(1) 2230/     C22 : DD 36 30 00         		ld	(ix+PVOL),0		; if not, set max volume
(1) 2231/     C26 :                     .nodefv:
(1) 2232/     C26 : DD 73 1C            		ld	(ix+DTL),e
(1) 2233/     C29 : DD 72 20            		ld	(ix+DTH),d
(1) 2234/     C2C : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 2235/     C30 : C9                  		ret
(1) 2236/     C31 :                     
(1) 2237/     C31 :                     ; --------------------------------
(1) 2238/     C31 :                     ; Note: FM,FM3,FM6
(1) 2239/     C31 :                     ; --------------------------------
(1) 2240/     C31 :                     
(1) 2241/     C31 :                     .note_dac:
(1) 2242/     C31 : 21 E5 18            		ld	hl,daccom
(1) 2243/     C34 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2244/     C37 : FE FF               		cp	-1
(1) 2245/     C39 : CA 30 0D            		jp	z,.fm_keyoff
(1) 2246/     C3C : FE FE               		cp	-2
(1) 2247/     C3E : CA 34 0D            		jp	z,.fm_keycut
(1) 2248/     C41 : FD 36 00 C0         		ld	(iy+chnl_Chip),0C0h	; Set as DAC
(1) 2249/     C45 : 11 00 00            		ld	de,0
(1) 2250/     C48 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(1) 2251/     C4B : 83                  		add	a,e
(1) 2252/     C4C : 87                  		add	a,a
(1) 2253/     C4D : 5F                  		ld	e,a
(1) 2254/     C4E : 21 13 16            		ld	hl,wavFreq_List
(1) 2255/     C51 : 19                  		add	hl,de
(1) 2256/     C52 : 7E                  		ld	a,(hl)
(1) 2257/     C53 : 23                  		inc	hl
(1) 2258/     C54 : 66                  		ld	h,(hl)
(1) 2259/     C55 : CF                  		rst	8
(1) 2260/     C56 : 6F                  		ld	l,a
(1) 2261/     C57 : 11 E8 FF            		ld	de,ZSET_WTUNE		; Fine-tune to desired
(1) 2262/     C5A : 19                  		add	hl,de			; WAVE frequency
(1) 2263/     C5B : 22 29 00            		ld	(wave_Pitch),hl
(1) 2264/     C5E :                     ; 		ld	a,1
(1) 2265/     C5E :                     ; 		and	001b
(1) 2266/     C5E :                     ; 		ld	(wave_Flags),a
(1) 2267/     C5E : 3E 01               		ld	a,001b			; Request DAC play
(1) 2268/     C60 : 32 E5 18            		ld	(daccom),a
(1) 2269/     C63 : C9                  		ret
(1) 2270/     C64 :                     .dcut:
(1) 2271/     C64 : 3E 04               		ld	a,100b			; Request DAC stop
(1) 2272/     C66 : 32 E5 18            		ld	(daccom),a
(1) 2273/     C69 :                     .doff:
(1) 2274/     C69 : 21 00 00            		ld	hl,0
(1) 2275/     C6C : 22 4D 17            		ld	(tblFM6),hl
(1) 2276/     C6F : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 2277/     C73 : C9                  		ret
(1) 2278/     C74 :                     ; FM3 special
(1) 2279/     C74 :                     .note_fm3:
(1) 2280/     C74 : 21 C7 17            		ld	hl,fmcom+2		; Channel 3 fmcom
(1) 2281/     C77 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2282/     C7A : FE FF               		cp	-1
(1) 2283/     C7C : CA 30 0D            		jp	z,.fm_keyoff
(1) 2284/     C7F : FE FE               		cp	-2
(1) 2285/     C81 : CA 34 0D            		jp	z,.fm_keycut
(1) 2286/     C84 : FD 36 00 B0         		ld	(iy+chnl_Chip),0B0h	; Set as FM3 special
(1) 2287/     C88 : 16 27               		ld	d,27h
(1) 2288/     C8A : 3E 40               		ld	a,01000000b
(1) 2289/     C8C : 32 64 19            		ld	(fmSpcMode),a
(1) 2290/     C8F : 5F                  		ld	e,a
(1) 2291/     C90 : CD BB 13            		call	fm_send_1
(1) 2292/     C93 : E5                  		push	hl
(1) 2293/     C94 : DD E1               		pop	ix
(1) 2294/     C96 : 18 74               		jr	.fm_setkon
(1) 2295/     C98 :                     ; Normal FM
(1) 2296/     C98 :                     .note_fm:
(1) 2297/     C98 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2298/     C9B : 57                  		ld	d,a
(1) 2299/     C9C : DD 5E 03            		ld	e,(ix+3)
(1) 2300/     C9F : 83                  		add	a,e
(1) 2301/     CA0 : CF                  		rst	8
(1) 2302/     CA1 : 4F                  		ld	c,a			; c - Note+pitch
(1) 2303/     CA2 : DD 7E 02            		ld	a,(ix+2)
(1) 2304/     CA5 : 47                  		ld	b,a
(1) 2305/     CA6 : E6 07               		and	00000111b
(1) 2306/     CA8 : 21 C5 17            		ld	hl,fmcom		; hl - fmcom list
(1) 2307/     CAB : 11 00 00            		ld	de,0
(1) 2308/     CAE : E6 07               		and	111b
(1) 2309/     CB0 : 5F                  		ld	e,a
(1) 2310/     CB1 : 19                  		add	hl,de
(1) 2311/     CB2 : CF                  		rst	8
(1) 2312/     CB3 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2313/     CB6 : FE FF               		cp	-1
(1) 2314/     CB8 : 28 76               		jr	z,.fm_keyoff
(1) 2315/     CBA : FE FE               		cp	-2
(1) 2316/     CBC : 28 76               		jr	z,.fm_keycut
(1) 2317/     CBE : 78                  		ld	a,b			; Set chip as FM
(1) 2318/     CBF : E6 07               		and	111b
(1) 2319/     CC1 : FE 02               		cp	2			; Check if we got into channel 3
(1) 2320/     CC3 : 20 0E               		jr	nz,.rd_nt3
(1) 2321/     CC5 : 47                  		ld	b,a
(1) 2322/     CC6 : 16 27               		ld	d,27h			; Disable CH3 special mode
(1) 2323/     CC8 : 3E 00               		ld	a,00000000b
(1) 2324/     CCA : 32 64 19            		ld	(fmSpcMode),a
(1) 2325/     CCD : CF                  		rst	8
(1) 2326/     CCE : 5F                  		ld	e,a
(1) 2327/     CCF : CD BB 13            		call	fm_send_1
(1) 2328/     CD2 : 78                  		ld	a,b
(1) 2329/     CD3 :                     .rd_nt3:
(1) 2330/     CD3 : F6 A0               		or	0A0h
(1) 2331/     CD5 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2332/     CD8 : 79                  		ld	a,c
(1) 2333/     CD9 : CF                  		rst	8
(1) 2334/     CDA : 06 00               		ld	b,0			; b - octave
(1) 2335/     CDC : 1E 07               		ld	e,7
(1) 2336/     CDE :                     .get_oct:
(1) 2337/     CDE : 4F                  		ld	c,a
(1) 2338/     CDF : D6 0C               		sub	12
(1) 2339/     CE1 : B7                  		or	a
(1) 2340/     CE2 : FA E9 0C            		jp	m,.fnd_oct
(1) 2341/     CE5 : 04                  		inc	b
(1) 2342/     CE6 : 1D                  		dec	e
(1) 2343/     CE7 : 20 F5               		jr	nz,.get_oct
(1) 2344/     CE9 :                     .fnd_oct:
(1) 2345/     CE9 :                     	; b - octave / c - note
(1) 2346/     CE9 : D5                  		push	de
(1) 2347/     CEA : CF                  		rst	8		; ix - current fmcom
(1) 2348/     CEB : 79                  		ld	a,c
(1) 2349/     CEC : 87                  		add	a,a
(1) 2350/     CED : 4F                  		ld	c,a		; c - freq word
(1) 2351/     CEE : 78                  		ld	a,b
(1) 2352/     CEF : 87                  		add	a,a
(1) 2353/     CF0 : 87                  		add	a,a
(1) 2354/     CF1 : 87                  		add	a,a
(1) 2355/     CF2 : 06 00               		ld	b,0
(1) 2356/     CF4 : E5                  		push	hl
(1) 2357/     CF5 : CF                  		rst	8
(1) 2358/     CF6 : DD E1               		pop	ix
(1) 2359/     CF8 : 21 09 15            		ld	hl,fmFreq_List
(1) 2360/     CFB : 09                  		add	hl,bc
(1) 2361/     CFC : 23                  		inc	hl
(1) 2362/     CFD : 4F                  		ld	c,a		; c - octave << 3
(1) 2363/     CFE : 7E                  		ld	a,(hl)		; Note MSB
(1) 2364/     CFF : B1                  		or	c		; add octave
(1) 2365/     D00 : 57                  		ld	d,a
(1) 2366/     D01 : 2B                  		dec	hl
(1) 2367/     D02 : CF                  		rst	8
(1) 2368/     D03 : 7E                  		ld	a,(hl)
(1) 2369/     D04 : 5F                  		ld	e,a
(1) 2370/     D05 : DD 72 18            		ld	(ix+FMFRQH),d	; Save freq MSB
(1) 2371/     D08 : DD 73 1E            		ld	(ix+FMFRQL),e	; Save freq LSB
(1) 2372/     D0B : D1                  		pop	de
(1) 2373/     D0C :                     .fm_setkon:
(1) 2374/     D0C : FD 7E 07            		ld	a,(iy+chnl_Flags)
(1) 2375/     D0F : 87                  		add	a,a		; move LR bits
(1) 2376/     D10 : 87                  		add	a,a
(1) 2377/     D11 : 2F                  		cpl
(1) 2378/     D12 : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(1) 2379/     D14 : DD 77 12            		ld	(ix+FMPAN),a
(1) 2380/     D17 : 1E F0               		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(1) 2381/     D19 : CF                  		rst	8
(1) 2382/     D1A : DD 73 06            		ld	(ix+FMKEYS),e
(1) 2383/     D1D : DD 7E 00            		ld	a,(ix)		; key on
(1) 2384/     D20 : F6 01               		or	00000001b
(1) 2385/     D22 : DD 77 00            		ld	(ix),a
(1) 2386/     D25 : FD CB 07 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(1) 2387/     D29 : 20 04               		jr	nz,.fm_kpv
(1) 2388/     D2B : DD 36 0C 00         		ld	(ix+FMVOL),0
(1) 2389/     D2F :                     .fm_kpv:
(1) 2390/     D2F : C9                  		ret
(1) 2391/     D30 :                     .fm_keyoff:
(1) 2392/     D30 : 0E 02               		ld	c,010b
(1) 2393/     D32 : 71                  		ld	(hl),c
(1) 2394/     D33 : C9                  		ret
(1) 2395/     D34 :                     .fm_keycut:
(1) 2396/     D34 : 0E 04               		ld	c,100b
(1) 2397/     D36 :                     .fm_dlink:
(1) 2398/     D36 : C3 79 0B            		jp	.chnl_unlink
(1) 2399/     D39 :                     
(1) 2400/     D39 :                     ; ----------------------------------------
(1) 2401/     D39 :                     ; Channel chip swap
(1) 2402/     D39 :                     ; ----------------------------------------
(1) 2403/     D39 :                     
(1) 2404/     D39 :                     .chip_swap:
(1) 2405/     D39 : 4F                  		ld	c,a		; c - New chip ID
(1) 2406/     D3A : E6 F0               		and	11110000b
(1) 2407/     D3C : 47                  		ld	b,a
(1) 2408/     D3D : FD 7E 00            		ld	a,(iy+chnl_Chip)
(1) 2409/     D40 : CF                  		rst	8
(1) 2410/     D41 : 5F                  		ld	e,a		; e - Old chip ID
(1) 2411/     D42 : E6 F0               		and	11110000b
(1) 2412/     D44 : B8                  		cp	b
(1) 2413/     D45 : 28 2E               		jr	z,.chip_out
(1) 2414/     D47 : 57                  		ld	d,a		; d - reuse last ID
(1) 2415/     D48 : 79                  		ld	a,c		; New chip-ins is null?
(1) 2416/     D49 : FE FF               		cp	-1
(1) 2417/     D4B : 20 05               		jr	nz,.from_nl
(1) 2418/     D4D : 7B                  		ld	a,e		; Reuse OLD ID
(1) 2419/     D4E : CF                  		rst	8
(1) 2420/     D4F : E6 F0               		and	11110000b
(1) 2421/     D51 : 57                  		ld	d,a		; new id to check
(1) 2422/     D52 :                     .from_nl:
(1) 2423/     D52 : 7A                  		ld	a,d
(1) 2424/     D53 : 16 00               		ld	d,0
(1) 2425/     D55 : FE 80               		cp	80h
(1) 2426/     D57 : CC C4 0D            		call	z,.psg_out
(1) 2427/     D5A : FE 90               		cp	90h
(1) 2428/     D5C : CC B6 0D            		call	z,.psgn_out
(1) 2429/     D5F : CF                  		rst	8
(1) 2430/     D60 : FE A0               		cp	0A0h
(1) 2431/     D62 : CC E4 0D            		call	z,.fm_out
(1) 2432/     D65 : FE B0               		cp	0B0h
(1) 2433/     D67 : CC A8 0D            		call	z,.fm3_out
(1) 2434/     D6A : FE C0               		cp	0C0h
(1) 2435/     D6C : CC 9A 0D            		call	z,.dac_out
(1) 2436/     D6F : FE D0               		cp	0D0h
(1) 2437/     D71 : CC 77 0D            		call	z,.pwm_out
(1) 2438/     D74 : CF                  		rst	8
(1) 2439/     D75 :                     .chip_out:
(1) 2440/     D75 : 79                  		ld	a,c
(1) 2441/     D76 : C9                  		ret
(1) 2442/     D77 :                     
(1) 2443/     D77 :                     .pwm_out:
(1) 2444/     D77 : E5                  		push	hl
(1) 2445/     D78 : 7B                  		ld	a,e
(1) 2446/     D79 : E6 07               		and	111b
(1) 2447/     D7B : 47                  		ld	b,a
(1) 2448/     D7C : 5F                  		ld	e,a
(1) 2449/     D7D : CF                  		rst	8
(1) 2450/     D7E : 87                  		add	a,a
(1) 2451/     D7F : 87                  		add	a,a
(1) 2452/     D80 : 87                  		add	a,a
(1) 2453/     D81 : 5F                  		ld	e,a
(1) 2454/     D82 : 21 57 17            		ld	hl,tblPWM
(1) 2455/     D85 : 19                  		add	hl,de
(1) 2456/     D86 : CD 02 0E            		call	.chp_unlk
(1) 2457/     D89 : CF                  		rst	8
(1) 2458/     D8A : 16 00               		ld	d,0
(1) 2459/     D8C : 58                  		ld	e,b
(1) 2460/     D8D : 21 E8 18            		ld	hl,pwmcom
(1) 2461/     D90 : 19                  		add	hl,de
(1) 2462/     D91 : 36 04               		ld	(hl),100b
(1) 2463/     D93 : 3E 01               		ld	a,1
(1) 2464/     D95 : 32 2E 00            		ld	(marsUpd),a
(1) 2465/     D98 : 18 48               		jr	.p_out
(1) 2466/     D9A :                     
(1) 2467/     D9A :                     .dac_out:
(1) 2468/     D9A : E5                  		push	hl
(1) 2469/     D9B : 21 4D 17            		ld	hl,tblFM6
(1) 2470/     D9E : CD 02 0E            		call	.chp_unlk
(1) 2471/     DA1 : 21 E5 18            		ld	hl,daccom
(1) 2472/     DA4 : 36 04               		ld	(hl),100b
(1) 2473/     DA6 : E1                  		pop	hl
(1) 2474/     DA7 : C9                  		ret
(1) 2475/     DA8 :                     .fm3_out:
(1) 2476/     DA8 : E5                  		push	hl
(1) 2477/     DA9 : 21 45 17            		ld	hl,tblFM3
(1) 2478/     DAC : CD 02 0E            		call	.chp_unlk
(1) 2479/     DAF : 21 C7 17            		ld	hl,fmcom+2
(1) 2480/     DB2 : 36 04               		ld	(hl),100b
(1) 2481/     DB4 : E1                  		pop	hl
(1) 2482/     DB5 : C9                  		ret
(1) 2483/     DB6 :                     .psgn_out:
(1) 2484/     DB6 : E5                  		push	hl
(1) 2485/     DB7 : 21 1D 17            		ld	hl,tblPSGN
(1) 2486/     DBA : CD 02 0E            		call	.chp_unlk
(1) 2487/     DBD : 21 94 17            		ld	hl,psgcom+3
(1) 2488/     DC0 : 36 04               		ld	(hl),100b
(1) 2489/     DC2 : E1                  		pop	hl
(1) 2490/     DC3 : C9                  		ret
(1) 2491/     DC4 :                     .psg_out:
(1) 2492/     DC4 : E5                  		push	hl
(1) 2493/     DC5 : 7B                  		ld	a,e
(1) 2494/     DC6 : E6 03               		and	011b
(1) 2495/     DC8 : 47                  		ld	b,a
(1) 2496/     DC9 : 5F                  		ld	e,a
(1) 2497/     DCA : 87                  		add	a,a
(1) 2498/     DCB : CF                  		rst	8
(1) 2499/     DCC : 87                  		add	a,a
(1) 2500/     DCD : 87                  		add	a,a
(1) 2501/     DCE : 5F                  		ld	e,a
(1) 2502/     DCF : 21 03 17            		ld	hl,tblPSG
(1) 2503/     DD2 : 19                  		add	hl,de
(1) 2504/     DD3 : CD 02 0E            		call	.chp_unlk
(1) 2505/     DD6 : 20 0A               		jr	nz,.p_out
(1) 2506/     DD8 : CF                  		rst	8
(1) 2507/     DD9 : 16 00               		ld	d,0
(1) 2508/     DDB : 58                  		ld	e,b
(1) 2509/     DDC : 21 91 17            		ld	hl,psgcom
(1) 2510/     DDF : 19                  		add	hl,de
(1) 2511/     DE0 : 36 04               		ld	(hl),100b
(1) 2512/     DE2 :                     .p_out:
(1) 2513/     DE2 : E1                  		pop	hl
(1) 2514/     DE3 : C9                  		ret
(1) 2515/     DE4 :                     .fm_out:
(1) 2516/     DE4 : E5                  		push	hl
(1) 2517/     DE5 : 7B                  		ld	a,e
(1) 2518/     DE6 : E6 07               		and	111b
(1) 2519/     DE8 : 47                  		ld	b,a
(1) 2520/     DE9 : 5F                  		ld	e,a
(1) 2521/     DEA : CF                  		rst	8
(1) 2522/     DEB : 87                  		add	a,a
(1) 2523/     DEC : 87                  		add	a,a
(1) 2524/     DED : 87                  		add	a,a
(1) 2525/     DEE : 5F                  		ld	e,a
(1) 2526/     DEF : 21 25 17            		ld	hl,tblFM
(1) 2527/     DF2 : 19                  		add	hl,de
(1) 2528/     DF3 : CD 02 0E            		call	.chp_unlk
(1) 2529/     DF6 : CF                  		rst	8
(1) 2530/     DF7 : 16 00               		ld	d,0
(1) 2531/     DF9 : 58                  		ld	e,b
(1) 2532/     DFA : 21 C5 17            		ld	hl,fmcom
(1) 2533/     DFD : 19                  		add	hl,de
(1) 2534/     DFE : 36 04               		ld	(hl),100b
(1) 2535/     E00 : 18 E0               		jr	.p_out
(1) 2536/     E02 :                     
(1) 2537/     E02 :                     .chp_unlk:
(1) 2538/     E02 : FD E5               		push	iy
(1) 2539/     E04 : D1                  		pop	de
(1) 2540/     E05 : CF                  		rst	8
(1) 2541/     E06 : 7E                  		ld	a,(hl)
(1) 2542/     E07 : BB                  		cp	e
(1) 2543/     E08 : C0                  		ret	nz
(1) 2544/     E09 : 23                  		inc	hl
(1) 2545/     E0A : 7E                  		ld	a,(hl)
(1) 2546/     E0B : BA                  		cp	d
(1) 2547/     E0C : C0                  		ret	nz
(1) 2548/     E0D : 2B                  		dec	hl
(1) 2549/     E0E : CF                  		rst	8
(1) 2550/     E0F : 36 00               		ld	(hl),0
(1) 2551/     E11 : 23                  		inc	hl
(1) 2552/     E12 : 36 00               		ld	(hl),0
(1) 2553/     E14 : 23                  		inc	hl
(1) 2554/     E15 : 5E                  		ld	e,(hl)	; c - ID
(1) 2555/     E16 : 23                  		inc	hl
(1) 2556/     E17 : 36 00               		ld	(hl),0	; reset 5 bytes of settings
(1) 2557/     E19 : CF                  		rst	8
(1) 2558/     E1A : 23                  		inc	hl
(1) 2559/     E1B : 36 00               		ld	(hl),0
(1) 2560/     E1D : 23                  		inc	hl
(1) 2561/     E1E : 36 00               		ld	(hl),0
(1) 2562/     E20 : 23                  		inc	hl
(1) 2563/     E21 : 36 00               		ld	(hl),0
(1) 2564/     E23 : 23                  		inc	hl
(1) 2565/     E24 : 36 00               		ld	(hl),0
(1) 2566/     E26 : AF                  		xor	a
(1) 2567/     E27 : B7                  		or	a
(1) 2568/     E28 : C9                  		ret
(1) 2569/     E29 :                     
(1) 2570/     E29 :                     ; ----------------------------------------
(1) 2571/     E29 :                     ; Sets current instrument data
(1) 2572/     E29 :                     ;
(1) 2573/     E29 :                     ;   -1 - Null instrument
(1) 2574/     E29 :                     ;  80h - PSG
(1) 2575/     E29 :                     ;  90h - PSG Noise
(1) 2576/     E29 :                     ; 0A0h - FM
(1) 2577/     E29 :                     ; 0B0h - FM3 Special
(1) 2578/     E29 :                     ; 0C0h - FM6 Sample
(1) 2579/     E29 :                     ; 0D0h - PWM (or extra)
(1) 2580/     E29 :                     ; ----------------------------------------
(1) 2581/     E29 :                     
(1) 2582/     E29 :                     .check_ins:
(1) 2583/     E29 : FD 7E 02            		ld	a,(iy+chnl_Ins)
(1) 2584/     E2C : 3D                  		dec	a		; minus 1
(1) 2585/     E2D : F8                  		ret	m		; return as -1 if no ins is used.
(1) 2586/     E2E : 87                  		add	a,a		; * 08h
(1) 2587/     E2F : 87                  		add	a,a
(1) 2588/     E30 : CF                  		rst	8
(1) 2589/     E31 : 87                  		add	a,a
(1) 2590/     E32 : 2A 6E 1A            		ld	hl,(currInsData)
(1) 2591/     E35 : 11 00 00            		ld	de,0
(1) 2592/     E38 : 5F                  		ld	e,a
(1) 2593/     E39 : 19                  		add	hl,de
(1) 2594/     E3A : 7E                  		ld	a,(hl)
(1) 2595/     E3B : C9                  		ret
(1) 2596/     E3C :                     
(1) 2597/     E3C :                     ; ----------------------------------------
(1) 2598/     E3C :                     ; Checks which channel type is using
(1) 2599/     E3C :                     ; auto-set channel
(1) 2600/     E3C :                     ;
(1) 2601/     E3C :                     ; a - sound chip
(1) 2602/     E3C :                     ; ----------------------------------------
(1) 2603/     E3C :                     
(1) 2604/     E3C :                     .check_chnl:
(1) 2605/     E3C : FE FF               		cp	-1		; if -1: Null
(1) 2606/     E3E : C8                  		ret	z
(1) 2607/     E3F : CF                  		rst	8
(1) 2608/     E40 : 4F                  		ld	c,a		; save copy to c
(1) 2609/     E41 : 87                  		add	a,a		; * 2
(1) 2610/     E42 : 16 00               		ld	d,0
(1) 2611/     E44 : 0F                  		rrca
(1) 2612/     E45 : 0F                  		rrca
(1) 2613/     E46 : 0F                  		rrca
(1) 2614/     E47 : 0F                  		rrca
(1) 2615/     E48 : E6 0F               		and	00001111b
(1) 2616/     E4A : 5F                  		ld	e,a
(1) 2617/     E4B : DD 21 6D 0E         		ld	ix,.tbllist	; get table from list
(1) 2618/     E4F : DD 19               		add	ix,de
(1) 2619/     E51 : DD 5E 00            		ld	e,(ix)
(1) 2620/     E54 : DD 56 01            		ld	d,(ix+1)
(1) 2621/     E57 : CF                  		rst	8
(1) 2622/     E58 : D5                  		push	de
(1) 2623/     E59 : DD E1               		pop	ix
(1) 2624/     E5B : 79                  		ld	a,c		; restore from c
(1) 2625/     E5C : FE 90               		cp	90h		; type PSGN?
(1) 2626/     E5E : 28 19               		jr	z,.chk_tbln
(1) 2627/     E60 : FE B0               		cp	0B0h		; type FM3?
(1) 2628/     E62 : 28 15               		jr	z,.chk_tbln
(1) 2629/     E64 : FE C0               		cp	0C0h		; type DAC?
(1) 2630/     E66 : 28 11               		jr	z,.chk_tbln
(1) 2631/     E68 : 18 2A               		jr	.chk_tbl
(1) 2632/     E6A :                     .bad_ins:
(1) 2633/     E6A : 3E FF               		ld	a,-1
(1) 2634/     E6C : C9                  		ret
(1) 2635/     E6D :                     
(1) 2636/     E6D :                     ; --------------------------------------------
(1) 2637/     E6D :                     
(1) 2638/     E6D :                     .tbllist:
(1) 2639/     E6D : 03 17               		dw tblPSG	;  80h
(1) 2640/     E6F : 1D 17               		dw tblPSGN	;  90h
(1) 2641/     E71 : 25 17               		dw tblFM	; 0A0h
(1) 2642/     E73 : 45 17               		dw tblFM3	; 0B0h
(1) 2643/     E75 : 4D 17               		dw tblFM6	; 0C0h
(1) 2644/     E77 : 57 17               		dw tblPWM	; 0D0h
(1) 2645/     E79 :                     
(1) 2646/     E79 :                     ; --------------------------------------------
(1) 2647/     E79 :                     ; Check SINGLE channel table
(1) 2648/     E79 :                     ; (FM3,FM6,PSGN)
(1) 2649/     E79 :                     ; --------------------------------------------
(1) 2650/     E79 :                     
(1) 2651/     E79 :                     ; This auto-replaces the LINKED channel
(1) 2652/     E79 :                     .chk_tbln:
(1) 2653/     E79 : FD E5               		push	iy
(1) 2654/     E7B : D1                  		pop	de		; de - Copy of curr track-channel
(1) 2655/     E7C : CF                  		rst	8
(1) 2656/     E7D : DD 7E 01            		ld	a,(ix+1)
(1) 2657/     E80 : B7                  		or	a
(1) 2658/     E81 : 28 05               		jr	z,.new
(1) 2659/     E83 : BA                  		cp	d		; Same Channel MSB?
(1) 2660/     E84 : 28 02               		jr	z,.new
(1) 2661/     E86 : 30 09               		jr	nc,.busy_s	; If not, skip
(1) 2662/     E88 :                     .new:
(1) 2663/     E88 : CF                  		rst	8
(1) 2664/     E89 : DD 73 00            		ld	(ix),e		; NEW slot
(1) 2665/     E8C : DD 72 01            		ld	(ix+1),d
(1) 2666/     E8F : AF                  		xor	a		; Found free slot, pick it.
(1) 2667/     E90 : C9                  		ret
(1) 2668/     E91 :                     .busy_s:
(1) 2669/     E91 : 3E FF               		ld	a,-1
(1) 2670/     E93 : C9                  		ret
(1) 2671/     E94 :                     
(1) 2672/     E94 :                     ; --------------------------------------------
(1) 2673/     E94 :                     ; Check available channel slot from list
(1) 2674/     E94 :                     ; --------------------------------------------
(1) 2675/     E94 :                     
(1) 2676/     E94 :                     .chk_tbl:
(1) 2677/     E94 : 01 00 00            		ld	bc,0		; bc - Free slot point
(1) 2678/     E97 :                     .next:
(1) 2679/     E97 : DD 7E 01            		ld	a,(ix+1)	; Check MSB first
(1) 2680/     E9A : FE FF               		cp	-1		; End of list? (as WORD: 0FFxxh)
(1) 2681/     E9C : 28 3F               		jr	z,.chkfree
(1) 2682/     E9E : FD E5               		push	iy
(1) 2683/     EA0 : D1                  		pop	de		; de - Copy of curr track-channel
(1) 2684/     EA1 : CF                  		rst	8
(1) 2685/     EA2 : BA                  		cp	d
(1) 2686/     EA3 : 20 08               		jr	nz,.diffr
(1) 2687/     EA5 : DD 7E 00            		ld	a,(ix)
(1) 2688/     EA8 : BB                  		cp	e
(1) 2689/     EA9 : 20 02               		jr	nz,.diffr
(1) 2690/     EAB : AF                  		xor	a		; return 0
(1) 2691/     EAC : C9                  		ret
(1) 2692/     EAD :                     
(1) 2693/     EAD :                     ; d - MSB to check for auto-priority
(1) 2694/     EAD :                     .diffr:
(1) 2695/     EAD : 79                  		ld	a,c		; already found link at bc?
(1) 2696/     EAE : B0                  		or	b
(1) 2697/     EAF : 20 25               		jr	nz,.alrdfnd
(1) 2698/     EB1 : CF                  		rst	8
(1) 2699/     EB2 : DD 5E 01            		ld	e,(ix+1)	; Check if this link == 0
(1) 2700/     EB5 : DD 7E 00            		ld	a,(ix)
(1) 2701/     EB8 : B3                  		or	e
(1) 2702/     EB9 : 28 17               		jr	z,.fndlink
(1) 2703/     EBB : D5                  		push	de		; Check if this link is
(1) 2704/     EBC : DD 56 01            		ld	d,(ix+1)	; floating.
(1) 2705/     EBF : DD 5E 00            		ld	e,(ix)
(1) 2706/     EC2 : 13                  		inc	de
(1) 2707/     EC3 : CF                  		rst	8
(1) 2708/     EC4 : 1A                  		ld	a,(de)
(1) 2709/     EC5 : D1                  		pop	de
(1) 2710/     EC6 : FE FE               		cp	-2
(1) 2711/     EC8 : 28 08               		jr	z,.fndlink
(1) 2712/     ECA : FE FF               		cp	-1
(1) 2713/     ECC : 28 04               		jr	z,.fndlink
(1) 2714/     ECE : 7B                  		ld	a,e		; Check if MSB is higher
(1) 2715/     ECF : BA                  		cp	d
(1) 2716/     ED0 : 30 04               		jr	nc,.alrdfnd
(1) 2717/     ED2 :                     .fndlink:
(1) 2718/     ED2 : DD E5               		push	ix		; bc - got new link
(1) 2719/     ED4 : C1                  		pop	bc
(1) 2720/     ED5 : CF                  		rst	8
(1) 2721/     ED6 :                     .alrdfnd:
(1) 2722/     ED6 : 11 08 00            		ld	de,8		; Next channel table
(1) 2723/     ED9 : DD 19               		add	ix,de
(1) 2724/     EDB : 18 BA               		jr	.next
(1) 2725/     EDD :                     
(1) 2726/     EDD :                     ; free link slot
(1) 2727/     EDD :                     .chkfree:
(1) 2728/     EDD : 79                  		ld	a,c		; found free link?
(1) 2729/     EDE : B0                  		or	b
(1) 2730/     EDF : 28 0F               		jr	z,.fndslot
(1) 2731/     EE1 :                     
(1) 2732/     EE1 :                     
(1) 2733/     EE1 :                     ; 		cp	d		; Same Channel MSB?
(1) 2734/     EE1 :                     ; 		jr	z,.fndslot	; If not, skip
(1) 2735/     EE1 :                     ; 		jr	c,.fndslot
(1) 2736/     EE1 : C5                  		push	bc
(1) 2737/     EE2 : DD E1               		pop	ix		; tell ix is the new slot
(1) 2738/     EE4 : FD E5               		push	iy
(1) 2739/     EE6 : D1                  		pop	de		; and mark it on buffer
(1) 2740/     EE7 : CF                  		rst	8
(1) 2741/     EE8 : DD 73 00            		ld	(ix),e
(1) 2742/     EEB : DD 72 01            		ld	(ix+1),d
(1) 2743/     EEE : AF                  		xor	a
(1) 2744/     EEF : C9                  		ret
(1) 2745/     EF0 :                     .fndslot:
(1) 2746/     EF0 : 3E FF               		ld	a,-1		; linksteal check goes here
(1) 2747/     EF2 : C9                  		ret
(1) 2748/     EF3 :                     
(1) 2749/     EF3 :                     ; ====================================================================
(1) 2750/     EF3 :                     ; ----------------------------------------------------------------
(1) 2751/     EF3 :                     ; Subroutines
(1) 2752/     EF3 :                     ; ----------------------------------------------------------------
(1) 2753/     EF3 :                     
(1) 2754/     EF3 :                     ; --------------------------------------------------------
(1) 2755/     EF3 :                     ; Init sound engine
(1) 2756/     EF3 :                     ; --------------------------------------------------------
(1) 2757/     EF3 :                     
(1) 2758/     EF3 :                     gema_init:
(1) 2759/     EF3 : CD E6 13            		call	dac_off
(1) 2760/     EF6 : 21 00 1B            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2761/     EF9 : 11 01 1B            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2762/     EFC : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2763/     EFF : 36 80               		ld	(hl),80h	; Set first byte
(1) 2764/     F01 : ED B0               		ldir			; Start copying
(1) 2765/     F03 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2766/     F06 : 36 9F               		ld	(hl),09Fh
(1) 2767/     F08 : 36 BF               		ld	(hl),0BFh
(1) 2768/     F0A : 36 DF               		ld	(hl),0DFh
(1) 2769/     F0C : 36 FF               		ld	(hl),0FFh
(1) 2770/     F0E : 11 0B 22            		ld	de,2208h|3	; Set default LFO
(1) 2771/     F11 : CD BB 13            		call	fm_send_1
(1) 2772/     F14 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2773/     F17 : CD BB 13            		call	fm_send_1
(1) 2774/     F1A : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2775/     F1D : CD BB 13            		call	fm_send_1
(1) 2776/     F20 : 1C                  		inc	e
(1) 2777/     F21 : CD BB 13            		call	fm_send_1
(1) 2778/     F24 : 1C                  		inc	e
(1) 2779/     F25 : CD BB 13            		call	fm_send_1
(1) 2780/     F28 : 1C                  		inc	e
(1) 2781/     F29 : 1C                  		inc	e
(1) 2782/     F2A : CD BB 13            		call	fm_send_1
(1) 2783/     F2D : 1C                  		inc	e
(1) 2784/     F2E : CD BB 13            		call	fm_send_1
(1) 2785/     F31 : 1C                  		inc	e
(1) 2786/     F32 : CD BB 13            		call	fm_send_1
(1) 2787/     F35 :                     
(1) 2788/     F35 :                     	; set each tracks' settings
(1) 2789/     F35 : FD 21 00 1C         		ld	iy,trkBuff_0
(1) 2790/     F39 : 21 00 1E            		ld	hl,trkData_0
(1) 2791/     F3C : 3E 80               		ld	a,8*16			; maximum size
(1) 2792/     F3E : CD 4A 0F            		call	.set_it
(1) 2793/     F41 : FD 21 00 1D         		ld	iy,trkBuff_1
(1) 2794/     F45 : 21 00 1F            		ld	hl,trkData_1
(1) 2795/     F48 : 3E 80               		ld	a,8*16
(1) 2796/     F4A :                     .set_it:
(1) 2797/     F4A : FD 75 1A            		ld	(iy+trk_CachNotes),l
(1) 2798/     F4D : FD 74 1B            		ld	(iy+(trk_CachNotes+1)),h
(1) 2799/     F50 : FD 77 17            		ld	(iy+trk_sizeIns),a
(1) 2800/     F53 :                     
(1) 2801/     F53 :                     	; a - priority
(1) 2802/     F53 : C9                  		ret
(1) 2803/     F54 :                     
(1) 2804/     F54 :                     ; --------------------------------------------------------
(1) 2805/     F54 :                     ; get_tick
(1) 2806/     F54 :                     ;
(1) 2807/     F54 :                     ; Checks if VBlank triggred a TICK
(1) 2808/     F54 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 2809/     F54 :                     ; --------------------------------------------------------
(1) 2810/     F54 :                     
(1) 2811/     F54 :                     get_tick:
(1) 2812/     F54 : F3                  		di				; Disable ints
(1) 2813/     F55 : F5                  		push	af
(1) 2814/     F56 : E5                  		push	hl
(1) 2815/     F57 : 21 61 19            		ld	hl,tickFlag+1		; read last TICK flag
(1) 2816/     F5A : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 2817/     F5B : B7                  		or 	a
(1) 2818/     F5C : 28 13               		jr	z,.ctnotick
(1) 2819/     F5E : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2820/     F60 : 23                  		inc	hl			; Move to tickCnt
(1) 2821/     F61 : 34                  		inc	(hl)			; and increment
(1) 2822/     F62 : CF                  		rst	8
(1) 2823/     F63 : D5                  		push	de
(1) 2824/     F64 : 2A 31 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2825/     F67 : ED 5B 2F 00         		ld	de,(sbeatPtck)
(1) 2826/     F6B : CF                  		rst	8
(1) 2827/     F6C : 19                  		add	hl,de
(1) 2828/     F6D : 22 31 00            		ld	(sbeatAcc),hl
(1) 2829/     F70 : D1                  		pop	de
(1) 2830/     F71 :                     .ctnotick:
(1) 2831/     F71 : E1                  		pop	hl
(1) 2832/     F72 : F1                  		pop	af
(1) 2833/     F73 : FB                  		ei				; Enable ints again
(1) 2834/     F74 : C9                  		ret
(1) 2835/     F75 :                     
(1) 2836/     F75 :                     ; --------------------------------------------------------
(1) 2837/     F75 :                     ; showRom:
(1) 2838/     F75 :                     ; Get ROM position visible for reading
(1) 2839/     F75 :                     ;
(1) 2840/     F75 :                     ; Input:
(1) 2841/     F75 :                     ;  b - ROM address $xx0000
(1) 2842/     F75 :                     ; hl - ROM address $00xxxx
(1) 2843/     F75 :                     ;
(1) 2844/     F75 :                     ; Output:
(1) 2845/     F75 :                     ; hl - ROM position ready to use for reading
(1) 2846/     F75 :                     ; --------------------------------------------------------
(1) 2847/     F75 :                     
(1) 2848/     F75 :                     showRom:
(1) 2849/     F75 : CF                  		rst	8
(1) 2850/     F76 : D5                  		push	de
(1) 2851/     F77 : C5                  		push	bc
(1) 2852/     F78 : 11 00 60            		ld	de,6000h
(1) 2853/     F7B : 7C                  		ld	a,h
(1) 2854/     F7C : CB 07               		rlc	a
(1) 2855/     F7E : CF                  		rst	8
(1) 2856/     F7F : 12                  		ld	(de),a
(1) 2857/     F80 : 78                  		ld	a,b
(1) 2858/     F81 : 12                  		ld	(de),a
(1) 2859/     F82 : 1F                  		rra
(1) 2860/     F83 : 12                  		ld	(de),a
(1) 2861/     F84 : 1F                  		rra
(1) 2862/     F85 : 12                  		ld	(de),a
(1) 2863/     F86 : 1F                  		rra
(1) 2864/     F87 : CF                  		rst	8
(1) 2865/     F88 : 12                  		ld	(de),a
(1) 2866/     F89 : 1F                  		rra
(1) 2867/     F8A : 12                  		ld	(de),a
(1) 2868/     F8B : 1F                  		rra
(1) 2869/     F8C : 12                  		ld	(de),a
(1) 2870/     F8D : 1F                  		rra
(1) 2871/     F8E : 12                  		ld	(de),a
(1) 2872/     F8F : 1F                  		rra
(1) 2873/     F90 : 12                  		ld	(de),a
(1) 2874/     F91 : CF                  		rst	8
(1) 2875/     F92 : C1                  		pop	bc
(1) 2876/     F93 : D1                  		pop	de
(1) 2877/     F94 : CB FC               		set	7,h
(1) 2878/     F96 : C9                  		ret
(1) 2879/     F97 :                     
(1) 2880/     F97 :                     ; --------------------------------------------------------
(1) 2881/     F97 :                     ; readRomB:
(1) 2882/     F97 :                     ; Reads a byte from ROM safetly, for a single and quick
(1) 2883/     F97 :                     ; byte-read only, NOT autoswitchable.
(1) 2884/     F97 :                     ; CALL showRom FIRST, DO NOT CALL dac_fill BEFORE
(1) 2885/     F97 :                     ; GETTING HERE
(1) 2886/     F97 :                     ;
(1) 2887/     F97 :                     ; Input:
(1) 2888/     F97 :                     ; hl - ROM position in Z80's area
(1) 2889/     F97 :                     ;      (BANK must be set already)
(1) 2890/     F97 :                     ;
(1) 2891/     F97 :                     ; Output:
(1) 2892/     F97 :                     ; a - byte recieved
(1) 2893/     F97 :                     ; --------------------------------------------------------
(1) 2894/     F97 :                     
(1) 2895/     F97 :                     ; ALL this code just to read one byte without bothering
(1) 2896/     F97 :                     ; the DMA from the 68k side
(1) 2897/     F97 :                     
(1) 2898/     F97 :                     readRomB:
(1) 2899/     F97 : DD E5               		push	ix
(1) 2900/     F99 : DD 21 1C 00         		ld	ix,commZRomBlk
(1) 2901/     F9D : DD CB 01 C6         		set	0,(ix+1)	; ROM read request
(1) 2902/     FA1 : DD CB 00 46         		bit	0,(ix)		; 68k is on DMA?
(1) 2903/     FA5 : 20 09               		jr	nz,.wait
(1) 2904/     FA7 : 7E                  .imback:	ld	a,(hl)		; Read the byte.
(1) 2905/     FA8 : DD CB 01 86         		res	0,(ix+1)
(1) 2906/     FAC : CF                  		rst	8
(1) 2907/     FAD : DD E1               		pop	ix
(1) 2908/     FAF : C9                  		ret
(1) 2909/     FB0 :                     .wait:
(1) 2910/     FB0 : DD CB 01 86         		res	0,(ix+1)	; Not reading ROM
(1) 2911/     FB4 :                     .w2:
(1) 2912/     FB4 : CF                  		rst	8
(1) 2913/     FB5 : 00                  		nop
(1) 2914/     FB6 : 00                  		nop
(1) 2915/     FB7 : CF                  		rst	8
(1) 2916/     FB8 : DD CB 00 46         		bit	0,(ix)		; Is ROM free from 68K?
(1) 2917/     FBC : 20 F6               		jr	nz,.w2
(1) 2918/     FBE : DD CB 01 C6         		set	0,(ix+1)	; Reading ROM again.
(1) 2919/     FC2 : 18 E3               		jr	.imback
(1) 2920/     FC4 :                     
(1) 2921/     FC4 :                     ; --------------------------------------------------------
(1) 2922/     FC4 :                     ; transferRom
(1) 2923/     FC4 :                     ;
(1) 2924/     FC4 :                     ; Transfer bytes from ROM to Z80, this also tells
(1) 2925/     FC4 :                     ; to 68k that we are reading fom ROM
(1) 2926/     FC4 :                     ;
(1) 2927/     FC4 :                     ; Input:
(1) 2928/     FC4 :                     ; a  - Source ROM address $xx0000
(1) 2929/     FC4 :                     ; bc - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 2930/     FC4 :                     ; hl - Source ROM address $00xxxx
(1) 2931/     FC4 :                     ; de - Destination address
(1) 2932/     FC4 :                     ;
(1) 2933/     FC4 :                     ; Uses:
(1) 2934/     FC4 :                     ; b, ix
(1) 2935/     FC4 :                     ;
(1) 2936/     FC4 :                     ; Notes:
(1) 2937/     FC4 :                     ; call dac_fill first if transfering anything other than
(1) 2938/     FC4 :                     ; sample data, just to be safe
(1) 2939/     FC4 :                     ; --------------------------------------------------------
(1) 2940/     FC4 :                     
(1) 2941/     FC4 :                     ; Note: taken from GEMS...
(1) 2942/     FC4 :                     ; one day i'll do better.
(1) 2943/     FC4 :                     
(1) 2944/     FC4 :                     transferRom:
(1) 2945/     FC4 : CF                  		rst	8
(1) 2946/     FC5 : DD E5               		push	ix
(1) 2947/     FC7 : DD 21 1C 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 2948/     FCB : 22 76 1A            		ld	(x68ksrclsb),hl	; save hl copy
(1) 2949/     FCE : CB BC               		res	7,h
(1) 2950/     FD0 : 06 00               		ld	b,0
(1) 2951/     FD2 : 0B                  		dec	bc
(1) 2952/     FD3 : 09                  		add	hl,bc
(1) 2953/     FD4 : CB 7C               		bit	7,h
(1) 2954/     FD6 : 20 0B               		jr	nz,.double
(1) 2955/     FD8 : 2A 76 1A            		ld	hl,(x68ksrclsb)	; single transfer
(1) 2956/     FDB : 0C                  		inc	c
(1) 2957/     FDC : 47                  		ld	b,a
(1) 2958/     FDD : CD 08 10            		call	.transfer
(1) 2959/     FE0 : DD E1               		pop	ix
(1) 2960/     FE2 : C9                  		ret
(1) 2961/     FE3 :                     .double:
(1) 2962/     FE3 : CF                  		rst	8
(1) 2963/     FE4 : 47                  		ld	b,a		; double transfer
(1) 2964/     FE5 : C5                  		push	bc
(1) 2965/     FE6 : E5                  		push	hl
(1) 2966/     FE7 : 79                  		ld	a,c
(1) 2967/     FE8 : 95                  		sub	a,l
(1) 2968/     FE9 : 4F                  		ld	c,a
(1) 2969/     FEA : 2A 76 1A            		ld	hl,(x68ksrclsb)
(1) 2970/     FED : CD 08 10            		call	.transfer
(1) 2971/     FF0 : E1                  		pop	hl
(1) 2972/     FF1 : C1                  		pop	bc
(1) 2973/     FF2 : CF                  		rst	8
(1) 2974/     FF3 : 4D                  		ld	c,l
(1) 2975/     FF4 : 0C                  		inc	c
(1) 2976/     FF5 : 3A 77 1A            		ld	a,(x68ksrcmid)
(1) 2977/     FF8 : E6 80               		and	80h
(1) 2978/     FFA : C6 80               		add	a,80h
(1) 2979/     FFC : 67                  		ld	h,a
(1) 2980/     FFD : 2E 00               		ld	l,0
(1) 2981/     FFF : 30 01               		jr	nc,.x68knocarry
(1) 2982/    1001 : 04                  		inc	b
(1) 2983/    1002 :                     .x68knocarry:
(1) 2984/    1002 : CD 08 10            		call	.transfer
(1) 2985/    1005 : DD E1               		pop	ix
(1) 2986/    1007 : C9                  		ret
(1) 2987/    1008 :                     
(1) 2988/    1008 :                     ; ------------------------------------------------
(1) 2989/    1008 :                     ; b  - Source ROM xx0000
(1) 2990/    1008 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 2991/    1008 :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 2992/    1008 :                     ; de - Destination address
(1) 2993/    1008 :                     ;
(1) 2994/    1008 :                     ; Uses:
(1) 2995/    1008 :                     ; a
(1) 2996/    1008 :                     ; ------------------------------------------------
(1) 2997/    1008 :                     
(1) 2998/    1008 :                     .transfer:
(1) 2999/    1008 : CD 75 0F            		call	showRom
(1) 3000/    100B :                     
(1) 3001/    100B :                     	; Transfer data in packs of bytes
(1) 3002/    100B :                     	; while playing cache WAV in the process
(1) 3003/    100B :                     	; *** CRITICAL PROCESS FOR WAV PLAYBACK ***
(1) 3004/    100B :                     	;
(1) 3005/    100B :                     	; pseudo-ref for ldir:
(1) 3006/    100B :                     	; ld (de),(hl)
(1) 3007/    100B :                     	; inc de
(1) 3008/    100B :                     	; inc hl
(1) 3009/    100B :                     	; dec bc
(1) 3010/    100B :                     	;
(1) 3011/    100B : 06 00               		ld	b,0
(1) 3012/    100D : 79                  		ld	a,c		; a - pieces counter
(1) 3013/    100E : DD CB 01 C6         		set	0,(ix+1)	; Tell to 68k that we are reading from ROM
(1) 3014/    1012 : D6 06               		sub	6		; LENGHT lower than 6?
(1) 3015/    1014 : 38 11               		jr	c,.x68klast	; Process single piece only
(1) 3016/    1016 :                     .x68kloop:
(1) 3017/    1016 : CF                  		rst	8
(1) 3018/    1017 : 0E 05               		ld	c,6-1
(1) 3019/    1019 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 3020/    101D : 20 1A               		jr	nz,.x68klpwt
(1) 3021/    101F :                     .x68klpcont:
(1) 3022/    101F : CF                  		rst	8
(1) 3023/    1020 : ED B0               		ldir			; (de) to (hl) until bc==0
(1) 3024/    1022 : D6 05               		sub	a,6-1
(1) 3025/    1024 : D2 16 10            		jp	nc,.x68kloop
(1) 3026/    1027 :                     ; last block
(1) 3027/    1027 :                     .x68klast:
(1) 3028/    1027 : C6 06               		add	a,6
(1) 3029/    1029 : 4F                  		ld	c,a
(1) 3030/    102A : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 3031/    102E : C2 4C 10            		jp	nz,.x68klstwt
(1) 3032/    1031 :                     .x68klstcont:
(1) 3033/    1031 : CF                  		rst	8
(1) 3034/    1032 : ED B0               		ldir
(1) 3035/    1034 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are done reading
(1) 3036/    1038 : C9                  		ret
(1) 3037/    1039 :                     
(1) 3038/    1039 :                     ; If Genesis wants to do DMA, loop indef here until it finishes.
(1) 3039/    1039 :                     ; if on mid-loop
(1) 3040/    1039 :                     .x68klpwt:
(1) 3041/    1039 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(1) 3042/    103D :                     .x68kpwtlp:
(1) 3043/    103D : CF                  		rst	8
(1) 3044/    103E : 00                  		nop
(1) 3045/    103F : CF                  		rst	8
(1) 3046/    1040 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3047/    1044 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3048/    1046 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(1) 3049/    104A : 18 D3               		jr	.x68klpcont
(1) 3050/    104C :                     
(1) 3051/    104C :                     ; or in the last piece
(1) 3052/    104C :                     .x68klstwt:
(1) 3053/    104C : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(1) 3054/    1050 :                     .x68klstwtlp:
(1) 3055/    1050 : CF                  		rst	8
(1) 3056/    1051 : 00                  		nop
(1) 3057/    1052 : CF                  		rst	8
(1) 3058/    1053 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3059/    1057 : 20 F7               		jr	nz,.x68klstwtlp
(1) 3060/    1059 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(1) 3061/    105D : 18 D2               		jr	.x68klstcont
(1) 3062/    105F :                     
(1) 3063/    105F :                     ; ====================================================================
(1) 3064/    105F :                     ; ----------------------------------------------------------------
(1) 3065/    105F :                     ; Sound chip routines
(1) 3066/    105F :                     ; ----------------------------------------------------------------
(1) 3067/    105F :                     
(1) 3068/    105F :                     ; --------------------------------------------------------
(1) 3069/    105F :                     ; chip_env
(1) 3070/    105F :                     ;
(1) 3071/    105F :                     ; Process PSG and FM
(1) 3072/    105F :                     ; --------------------------------------------------------
(1) 3073/    105F :                     
(1) 3074/    105F :                     ; Read PSG list backwards so it autodetects
(1) 3075/    105F :                     ; Tone3 mode
(1) 3076/    105F :                     
(1) 3077/    105F :                     chip_env:
(1) 3078/    105F : FD 21 94 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3079/    1063 : 21 11 7F            		ld	hl,Zpsg_ctrl
(1) 3080/    1066 : 16 E0               		ld	d,0E0h			; PSG first ctrl command
(1) 3081/    1068 : 1E 04               		ld	e,4			; 4 channels
(1) 3082/    106A :                     .vloop:
(1) 3083/    106A : CF                  		rst	8
(1) 3084/    106B : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(1) 3085/    106E : FD 36 00 00         		ld	(iy+COM),0
(1) 3086/    1072 : CB 51               		bit	2,c			; bit 2 - stop sound
(1) 3087/    1074 : 28 17               		jr	z,.ckof
(1) 3088/    1076 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3089/    107A : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3090/    107E : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3091/    1082 : 7B                  		ld	a,e
(1) 3092/    1083 : FE 04               		cp	4
(1) 3093/    1085 : 20 06               		jr	nz,.ckof
(1) 3094/    1087 : 3E 00               		ld	a,0
(1) 3095/    1089 : 32 63 19            		ld	(psgHatMode),a
(1) 3096/    108C : CF                  		rst	8
(1) 3097/    108D :                     .ckof:
(1) 3098/    108D : CB 49               		bit	1,c			; bit 1 - key off
(1) 3099/    108F : 28 19               		jr      z,.ckon
(1) 3100/    1091 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3101/    1094 : B7                  		or	a
(1) 3102/    1095 : 28 13               		jr	z,.ckon
(1) 3103/    1097 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3104/    109B : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3105/    109F : 7B                  		ld	a,e
(1) 3106/    10A0 : FE 04               		cp	4
(1) 3107/    10A2 : 20 06               		jr	nz,.ckon
(1) 3108/    10A4 : 3E 00               		ld	a,0
(1) 3109/    10A6 : 32 63 19            		ld	(psgHatMode),a
(1) 3110/    10A9 : CF                  		rst	8
(1) 3111/    10AA :                     .ckon:
(1) 3112/    10AA : CB 41               		bit	0,c			; bit 0 - key on
(1) 3113/    10AC : 28 57               		jr	z,.envproc
(1) 3114/    10AE : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3115/    10B2 : 3A 63 19            		ld	a,(psgHatMode)		; check if using tone3 mode.
(1) 3116/    10B5 : 4F                  		ld	c,a
(1) 3117/    10B6 : E6 03               		and	11b
(1) 3118/    10B8 : FE 03               		cp	11b
(1) 3119/    10BA : 28 24               		jr	z,.tnmode
(1) 3120/    10BC :                     .wrfreq:
(1) 3121/    10BC : 7B                  		ld	a,e
(1) 3122/    10BD : FE 04               		cp	4
(1) 3123/    10BF : 28 35               		jr	z,.sethat
(1) 3124/    10C1 : CF                  		rst	8
(1) 3125/    10C2 :                     
(1) 3126/    10C2 : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 right bits
(1) 3127/    10C5 : E6 0F               		and	00001111b
(1) 3128/    10C7 : B2                  		or	d		; OR with current channel
(1) 3129/    10C8 : 77                  		ld	(hl),a		; write it
(1) 3130/    10C9 : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 left bits
(1) 3131/    10CC : 0F                  		rrca
(1) 3132/    10CD : 0F                  		rrca
(1) 3133/    10CE : 0F                  		rrca
(1) 3134/    10CF : 0F                  		rrca
(1) 3135/    10D0 : E6 0F               		and	00001111b
(1) 3136/    10D2 : 4F                  		ld	c,a
(1) 3137/    10D3 : FD 7E 20            		ld	a,(iy+DTH)	; Grab MSB bits
(1) 3138/    10D6 : 07                  		rlca
(1) 3139/    10D7 : 07                  		rlca
(1) 3140/    10D8 : 07                  		rlca
(1) 3141/    10D9 : 07                  		rlca
(1) 3142/    10DA : E6 30               		and	00110000b
(1) 3143/    10DC : B1                  		or	c
(1) 3144/    10DD : 77                  		ld	(hl),a
(1) 3145/    10DE :                     
(1) 3146/    10DE : 18 1C               		jr	.nskip
(1) 3147/    10E0 :                     ; Tone3 mode
(1) 3148/    10E0 :                     .tnmode:
(1) 3149/    10E0 : 7B                  		ld	a,e
(1) 3150/    10E1 : FE 04               		cp	4			; NOISE
(1) 3151/    10E3 : 28 06               		jr	z,.psteal
(1) 3152/    10E5 : FE 03               		cp	3			; PSG3, can't play
(1) 3153/    10E7 : 28 13               		jr	z,.nskip
(1) 3154/    10E9 : 18 D1               		jr	.wrfreq
(1) 3155/    10EB :                     .psteal:
(1) 3156/    10EB : CF                  		rst	8
(1) 3157/    10EC : FD 7E 1C            		ld	a,(iy+DTL)		; Steal PSG3's freq
(1) 3158/    10EF : F6 C0               		or	0C0h
(1) 3159/    10F1 : 77                  		ld	(hl),a
(1) 3160/    10F2 : FD 7E 20            		ld	a,(iy+DTH)
(1) 3161/    10F5 : 77                  		ld	(hl),a
(1) 3162/    10F6 :                     .sethat:
(1) 3163/    10F6 : CF                  		rst	8
(1) 3164/    10F7 : 3A 63 19            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3165/    10FA : B2                  		or	d
(1) 3166/    10FB : 77                  		ld	(hl),a
(1) 3167/    10FC :                     .nskip:
(1) 3168/    10FC : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3169/    1100 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3170/    1104 : CF                  		rst	8
(1) 3171/    1105 :                     
(1) 3172/    1105 :                     ; ----------------------------
(1) 3173/    1105 :                     ; Process effects
(1) 3174/    1105 :                     ; ----------------------------
(1) 3175/    1105 :                     
(1) 3176/    1105 :                     .envproc:
(1) 3177/    1105 : CF                  		rst	8
(1) 3178/    1106 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3179/    1109 : B7                  		or	a			; no modes
(1) 3180/    110A : CA 90 11            		jp	z,.vedlp
(1) 3181/    110D : FE 01               		cp 	001b			; Attack mode
(1) 3182/    110F : 20 2C               		jr	nz,.chk2
(1) 3183/    1111 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3184/    1115 : FD 46 24            		ld	b,(iy+ALV)
(1) 3185/    1118 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3186/    111B : B7                  		or	a
(1) 3187/    111C : 28 16               		jr	z,.atkend
(1) 3188/    111E : 4F                  		ld	c,a			; c - attack rate
(1) 3189/    111F : 78                  		ld	a,b			; a - attack level
(1) 3190/    1120 : CF                  		rst	8
(1) 3191/    1121 : FD 46 24            		ld	b,(iy+ALV)		; b - OLD attack level
(1) 3192/    1124 : 91                  		sub	a,c			; (attack rate) - (level)
(1) 3193/    1125 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3194/    1127 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3195/    1129 : B8                  		cp	b			; attack rate == level?
(1) 3196/    112A : 38 08               		jr	c,.atkend
(1) 3197/    112C : 28 06               		jr	z,.atkend
(1) 3198/    112E : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3199/    1131 : CF                  		rst	8
(1) 3200/    1132 : 18 5C               		jr	.vedlp
(1) 3201/    1134 :                     .atkend:
(1) 3202/    1134 : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(1) 3203/    1137 :                     .atkzero:
(1) 3204/    1137 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3205/    113B : 18 53               		jr	.vedlp
(1) 3206/    113D :                     .chk2:
(1) 3207/    113D :                     
(1) 3208/    113D : FE 02               		cp	010b			; Decay mode
(1) 3209/    113F : 20 31               		jr	nz,.chk4
(1) 3210/    1141 :                     .dectmr:
(1) 3211/    1141 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3212/    1145 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3213/    1148 : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(1) 3214/    114B : B8                  		cp	b
(1) 3215/    114C : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3216/    114E : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3217/    1150 : CF                  		rst	8
(1) 3218/    1151 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3219/    1154 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3220/    1156 : B8                  		cp	b			; compare level
(1) 3221/    1157 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3222/    1159 : 18 08               		jr	.dksav
(1) 3223/    115B :                     .dkadd:
(1) 3224/    115B : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3225/    115E : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3226/    1160 : B8                  		cp	b			; compare level
(1) 3227/    1161 : 30 05               		jr	nc,.dkyend
(1) 3228/    1163 :                     .dksav:
(1) 3229/    1163 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3230/    1166 : 18 28               		jr	.vedlp
(1) 3231/    1168 :                     .dkyend:
(1) 3232/    1168 : CF                  		rst	8
(1) 3233/    1169 : FD 70 04            		ld	(iy+LEV),b		; save last attack
(1) 3234/    116C : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3235/    1170 : 18 1E               		jr	.vedlp
(1) 3236/    1172 :                     .chk4:
(1) 3237/    1172 : FE 04               		cp	100b			; Sustain phase
(1) 3238/    1174 : 20 1A               		jr	nz,.vedlp
(1) 3239/    1176 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3240/    117A : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3241/    117D : CF                  		rst	8
(1) 3242/    117E : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3243/    1181 : 38 05               		jr	c,.killenv		; release done
(1) 3244/    1183 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3245/    1186 : 18 08               		jr	.vedlp
(1) 3246/    1188 :                     .killenv:
(1) 3247/    1188 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3248/    118C : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3249/    1190 :                     .vedlp:
(1) 3250/    1190 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3251/    1193 : B7                  		or	a
(1) 3252/    1194 : 28 1E               		jr	z,.noupd
(1) 3253/    1196 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3254/    119A : CF                  		rst	8
(1) 3255/    119B : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(1) 3256/    119E : FD 86 30            		add	a,(iy+PVOL)	; Level + master volume
(1) 3257/    11A1 : 30 02               		jr	nc,.vlmuch
(1) 3258/    11A3 : 3E FF               		ld	a,-1
(1) 3259/    11A5 :                     .vlmuch:
(1) 3260/    11A5 : CB 3F               		srl	a		; (Level >> 4)
(1) 3261/    11A7 : CB 3F               		srl	a
(1) 3262/    11A9 : CB 3F               		srl	a
(1) 3263/    11AB : CF                  		rst	8
(1) 3264/    11AC : CB 3F               		srl	a
(1) 3265/    11AE : E6 0F               		and	00001111b
(1) 3266/    11B0 : F6 90               		or	90h		; Set volume-set mode
(1) 3267/    11B2 : B2                  		or	d		; add current channel
(1) 3269/    11B3 : 77                  		ld	(hl),a		; Write volume
(1) 3271/    11B4 :                     
(1) 3272/    11B4 :                     .noupd:
(1) 3273/    11B4 : FD 2B               		dec	iy		; next COM to check
(1) 3274/    11B6 : 7A                  		ld	a,d
(1) 3275/    11B7 : CF                  		rst	8
(1) 3276/    11B8 : D6 20               		sub	a,20h		; next PSG (backwards)
(1) 3277/    11BA : 57                  		ld	d,a
(1) 3278/    11BB : 1D                  		dec	e
(1) 3279/    11BC : C2 6A 10            		jp	nz,.vloop
(1) 3280/    11BF :                     
(1) 3281/    11BF :                     ; ----------------------------
(1) 3282/    11BF :                     ; FM section
(1) 3283/    11BF :                     ; ----------------------------
(1) 3284/    11BF :                     
(1) 3285/    11BF :                     	; Read FM channels
(1) 3286/    11BF :                     	; iy - FM com
(1) 3287/    11BF :                     	; ix - FM current instrument data
(1) 3288/    11BF :                     	;  c - FM channel ID
(1) 3289/    11BF : FD 21 C5 17         		ld	iy,fmcom
(1) 3290/    11C3 : DD 21 E9 17         		ld	ix,fmins_com
(1) 3291/    11C7 : 01 00 00            		ld	bc,0
(1) 3292/    11CA : CD 3E 12            		call	.fm_set		; Channel 1
(1) 3293/    11CD : CF                  		rst	8
(1) 3294/    11CE : 11 28 00            		ld	de,28h
(1) 3295/    11D1 : DD 19               		add	ix,de		; Next ins data
(1) 3296/    11D3 : FD 23               		inc	iy		; Next com
(1) 3297/    11D5 : 0C                  		inc	c		; Next id
(1) 3298/    11D6 : CD 3E 12            		call	.fm_set		; Channel 2
(1) 3299/    11D9 : 11 28 00            		ld	de,28h
(1) 3300/    11DC : DD 19               		add	ix,de
(1) 3301/    11DE : FD 23               		inc	iy
(1) 3302/    11E0 : 0C                  		inc	c
(1) 3303/    11E1 : CF                  		rst	8
(1) 3304/    11E2 : CD 3E 12            		call	.fm_set		; Channel 3
(1) 3305/    11E5 : 11 28 00            		ld	de,28h
(1) 3306/    11E8 : DD 19               		add	ix,de
(1) 3307/    11EA : FD 23               		inc	iy
(1) 3308/    11EC :                     
(1) 3309/    11EC : 01 04 00            		ld	bc,4
(1) 3310/    11EF : CD 3E 12            		call	.fm_set		; Channel 4
(1) 3311/    11F2 : 11 28 00            		ld	de,28h
(1) 3312/    11F5 : DD 19               		add	ix,de
(1) 3313/    11F7 : FD 23               		inc	iy
(1) 3314/    11F9 : 0C                  		inc	c
(1) 3315/    11FA : CD 3E 12            		call	.fm_set		; Channel 5
(1) 3316/    11FD : CF                  		rst	8
(1) 3317/    11FE : 3A E5 18            		ld	a,(daccom)	; Channel 6 / DAC
(1) 3318/    1201 : 5F                  		ld	e,a
(1) 3319/    1202 : AF                  		xor	a
(1) 3320/    1203 : 32 E5 18            		ld	(daccom),a
(1) 3321/    1206 : CB 43               		bit	0,e		; WAVE sample request
(1) 3322/    1208 : 20 21               		jr	nz,.req_dac
(1) 3323/    120A : CB 63               		bit	4,e
(1) 3324/    120C : 20 2A               		jr	nz,.req_pitch
(1) 3325/    120E : CF                  		rst	8
(1) 3326/    120F : CB 53               		bit	2,e		; key-cut?
(1) 3327/    1211 : C2 E6 13            		jp	nz,dac_off
(1) 3328/    1214 : CB 4B               		bit	1,e		; key-off?
(1) 3329/    1216 : C0                  		ret	nz
(1) 3330/    1217 : 3A 08 00            		ld 	a,(dac_me)	; manually check if
(1) 3331/    121A : FE D9               		cp	zopcExx		; WAVE playback is active
(1) 3332/    121C : C8                  		ret	z
(1) 3333/    121D : 11 28 00            		ld	de,28h
(1) 3334/    1220 : DD 19               		add	ix,de
(1) 3335/    1222 : CF                  		rst	8
(1) 3336/    1223 : DD 7E 00            		ld	a,(ix)
(1) 3337/    1226 : FD 23               		inc	iy
(1) 3338/    1228 : 0C                  		inc	c
(1) 3339/    1229 : 18 13               		jr	.fm_set			; Channel 6 (normal)
(1) 3340/    122B :                     .req_dac:
(1) 3341/    122B : 16 B6               		ld	d,0B6h			; Panning for DAC
(1) 3342/    122D : 3A DC 17            		ld	a,((fmcom+5)+FMPAN)	; Reuse FM6's panning
(1) 3343/    1230 : 1E C0               		ld	e,11000000b
(1) 3344/    1232 : CD C6 13            		call	fm_send_2
(1) 3345/    1235 : C3 FB 13            		jp	dac_play		; Set playback
(1) 3346/    1238 :                     .req_pitch:
(1) 3347/    1238 : D9                  		exx
(1) 3348/    1239 : 2A 29 00            		ld	hl,(wave_Pitch)
(1) 3349/    123C : D9                  		exx
(1) 3350/    123D :                     ; 		bit	4,c
(1) 3351/    123D :                     ; 		ret	nz
(1) 3352/    123D :                     ; 		exx
(1) 3353/    123D :                     ; 		push	de
(1) 3354/    123D :                     ; 		exx
(1) 3355/    123D :                     ; 		pop	hl
(1) 3356/    123D :                     ; 		rst	8
(1) 3357/    123D :                     ; 		add	hl,de
(1) 3358/    123D :                     ; 		push	hl
(1) 3359/    123D :                     ; 		exx
(1) 3360/    123D :                     ; 		pop	de
(1) 3361/    123D :                     ; 		exx
(1) 3362/    123D : C9                  		ret
(1) 3363/    123E :                     
(1) 3364/    123E :                     ; ----------------------------------------
(1) 3365/    123E :                     ; Control current FM channel
(1) 3366/    123E :                     ;
(1) 3367/    123E :                     ; iy - fmcom
(1) 3368/    123E :                     ; ix - Instrument data pointer
(1) 3369/    123E :                     ;  c - FM chip ID
(1) 3370/    123E :                     ; ----------------------------------------
(1) 3371/    123E :                     
(1) 3372/    123E :                     	; 00vi 0cop
(1) 3373/    123E :                     	; v - volume update
(1) 3374/    123E :                     	; i - instrument update
(1) 3375/    123E :                     	;
(1) 3376/    123E :                     	; c/o/p key cut, key off, key on
(1) 3377/    123E :                     .fm_set:
(1) 3378/    123E : FD 7E 00            		ld	a,(iy)		; Get comm bits
(1) 3379/    1241 : B7                  		or	a
(1) 3380/    1242 : C8                  		ret	z
(1) 3381/    1243 : FD 36 00 00         		ld	(iy),0		; Reset
(1) 3382/    1247 :                     
(1) 3383/    1247 : CB 57               		bit	2,a		; Key-cut (010b) bit?
(1) 3384/    1249 : C2 DE 12            		jp	nz,.fm_keycut
(1) 3385/    124C : CB 4F               		bit	1,a		; Key-off (100b) bit?
(1) 3386/    124E : C2 F3 12            		jp	nz,.fm_keyoff
(1) 3387/    1251 : 47                  		ld	b,a		; b - other update bits
(1) 3388/    1252 : 79                  		ld	a,c		; check for Channel 6
(1) 3389/    1253 : FE 06               		cp	6
(1) 3390/    1255 : CC E6 13            		call	z,dac_off	; auto-mute WAVE playback
(1) 3391/    1258 : CF                  		rst	8
(1) 3392/    1259 : CB 60               		bit	4,b		; Instrument-update bit?  (%0001xxxx)
(1) 3393/    125B : C4 FA 12            		call	nz,.fm_insupd
(1) 3394/    125E : CB 68               		bit	5,b		; Volume-update bit? (%0010xxxx)
(1) 3395/    1260 : C4 61 13            		call	nz,.fm_volupd	;
(1) 3396/    1263 : CB 40               		bit	0,b		; Key-on (001b) bit?
(1) 3397/    1265 : C8                  		ret	z
(1) 3398/    1266 :                     	; freq update
(1) 3399/    1266 :                     	; all this code is for OP4 (if FM3 is in special)
(1) 3400/    1266 : CF                  		rst	8
(1) 3401/    1267 : 79                  		ld	a,c
(1) 3402/    1268 : E6 03               		and	11b
(1) 3403/    126A : F6 A4               		or	0A4h
(1) 3404/    126C : 57                  		ld	d,a
(1) 3405/    126D : FD 5E 18            		ld	e,(iy+FMFRQH)
(1) 3406/    1270 : CB 51               		bit	2,c
(1) 3407/    1272 : C4 C6 13            		call	nz,fm_send_2
(1) 3408/    1275 : CC BB 13            		call	z,fm_send_1
(1) 3409/    1278 : CF                  		rst	8
(1) 3410/    1279 : 15                  		dec	d
(1) 3411/    127A : 15                  		dec	d
(1) 3412/    127B : 15                  		dec	d
(1) 3413/    127C : 15                  		dec	d
(1) 3414/    127D : FD 5E 1E            		ld	e,(iy+FMFRQL)
(1) 3415/    1280 : CB 51               		bit	2,c
(1) 3416/    1282 : C4 C6 13            		call	nz,fm_send_2
(1) 3417/    1285 : CC BB 13            		call	z,fm_send_1
(1) 3418/    1288 : CF                  		rst	8
(1) 3419/    1289 : 79                  		ld	a,c
(1) 3420/    128A : E6 03               		and	11b
(1) 3421/    128C : F6 B0               		or	0B0h
(1) 3422/    128E : 57                  		ld	d,a
(1) 3423/    128F : DD 5E 1C            		ld	e,(ix+1Ch)
(1) 3424/    1292 : CB 51               		bit	2,c
(1) 3425/    1294 : C4 C6 13            		call	nz,fm_send_2
(1) 3426/    1297 : CC BB 13            		call	z,fm_send_1
(1) 3427/    129A : 14                  		inc	d
(1) 3428/    129B : 14                  		inc	d
(1) 3429/    129C : CF                  		rst	8
(1) 3430/    129D : 14                  		inc	d
(1) 3431/    129E : 14                  		inc	d
(1) 3432/    129F : DD 5E 1D            		ld	e,(ix+1Dh)
(1) 3433/    12A2 : FD 7E 12            		ld	a,(iy+FMPAN)
(1) 3434/    12A5 : E6 C0               		and	11000000b
(1) 3435/    12A7 : B3                  		or	e
(1) 3436/    12A8 : 5F                  		ld	e,a
(1) 3437/    12A9 : CB 51               		bit	2,c
(1) 3438/    12AB : C4 C6 13            		call	nz,fm_send_2
(1) 3439/    12AE : CC BB 13            		call	z,fm_send_1
(1) 3440/    12B1 :                     	; For Special FM3 mode it just copy-pastes regs
(1) 3441/    12B1 :                     	; from a separate list
(1) 3442/    12B1 : 79                  		ld	a,c		; FM3 special check
(1) 3443/    12B2 : FE 02               		cp	2
(1) 3444/    12B4 : 20 19               		jr	nz,.notfm3
(1) 3445/    12B6 : 3A 64 19            		ld	a,(fmSpcMode)
(1) 3446/    12B9 : E6 40               		and	01000000b
(1) 3447/    12BB : B7                  		or	a
(1) 3448/    12BC : 28 11               		jr	z,.notfm3
(1) 3449/    12BE : CF                  		rst	8
(1) 3450/    12BF : 21 D9 18            		ld	hl,fm3reg
(1) 3451/    12C2 : 06 06               		ld	b,3*2
(1) 3452/    12C4 :                     .copyops:
(1) 3453/    12C4 : 5E                  		ld	e,(hl)
(1) 3454/    12C5 : 23                  		inc	hl
(1) 3455/    12C6 : 56                  		ld	d,(hl)
(1) 3456/    12C7 : 23                  		inc	hl
(1) 3457/    12C8 : 00                  		nop
(1) 3458/    12C9 : CF                  		rst	8
(1) 3459/    12CA : CD BB 13            		call	fm_send_1
(1) 3460/    12CD : 10 F5               		djnz	.copyops
(1) 3461/    12CF :                     .notfm3:
(1) 3462/    12CF :                     
(1) 3463/    12CF : CF                  		rst	8
(1) 3464/    12D0 : 16 28               		ld	d,28h		; Keys
(1) 3465/    12D2 : DD 7E 1F            		ld	a,(ix+01Fh)	; a - Read this ins keys
(1) 3466/    12D5 : FD 46 06            		ld	b,(iy+FMKEYS)	; b - ALLOWED bits from fmcom
(1) 3467/    12D8 : A0                  		and	b
(1) 3468/    12D9 : B1                  		or	c
(1) 3469/    12DA : 5F                  		ld	e,a
(1) 3473/    12DB : C3 BB 13            		jp	fm_send_1
(1) 3474/    12DE :                     
(1) 3475/    12DE :                     .fm_keycut:
(1) 3476/    12DE : 79                  		ld	a,c
(1) 3477/    12DF : E6 03               		and	11b
(1) 3478/    12E1 : F6 B4               		or	0B4h
(1) 3479/    12E3 : 57                  		ld	d,a
(1) 3480/    12E4 : CF                  		rst	8
(1) 3481/    12E5 : DD 7E 1D            		ld	a,(ix+1Dh)
(1) 3482/    12E8 : E6 07               		and	00000111b
(1) 3483/    12EA : 5F                  		ld	e,a
(1) 3484/    12EB : CB 51               		bit	2,c
(1) 3485/    12ED : CC BB 13            		call	z,fm_send_1
(1) 3486/    12F0 : C4 C6 13            		call	nz,fm_send_2
(1) 3487/    12F3 :                     .fm_keyoff:
(1) 3488/    12F3 : CF                  		rst	8
(1) 3489/    12F4 : 59                  		ld	e,c
(1) 3490/    12F5 : 16 28               		ld	d,28h
(1) 3491/    12F7 : C3 BB 13            		jp	fm_send_1
(1) 3492/    12FA :                     
(1) 3493/    12FA :                     ; CPU-intense
(1) 3494/    12FA :                     ; only call this if needed
(1) 3495/    12FA :                     .fm_insupd:
(1) 3496/    12FA : C5                  		push	bc
(1) 3497/    12FB : CD F3 12            		call	.fm_keyoff	; restart chip channel
(1) 3498/    12FE : CD 2F 14            		call	dac_fill	; TODO: check if it slowdowns here...
(1) 3499/    1301 : DD E5               		push	ix		; copy ix to hl
(1) 3500/    1303 : E1                  		pop	hl
(1) 3501/    1304 : 79                  		ld	a,c
(1) 3502/    1305 : E6 03               		and	011b
(1) 3503/    1307 : F6 30               		or	30h
(1) 3504/    1309 : CF                  		rst	8
(1) 3505/    130A : 57                  		ld	d,a
(1) 3506/    130B : 06 1C               		ld	b,4*7
(1) 3507/    130D :                     .copy_1:
(1) 3508/    130D : CF                  		rst	8
(1) 3509/    130E : 5E                  		ld	e,(hl)
(1) 3510/    130F : CB 51               		bit	2,c
(1) 3511/    1311 : CC BB 13            		call	z,fm_send_1
(1) 3512/    1314 : C4 C6 13            		call	nz,fm_send_2
(1) 3513/    1317 : 23                  		inc	hl
(1) 3514/    1318 : 14                  		inc	d
(1) 3515/    1319 : CF                  		rst	8
(1) 3516/    131A : 00                  		nop
(1) 3517/    131B : 14                  		inc	d
(1) 3518/    131C : 14                  		inc	d
(1) 3519/    131D : 14                  		inc	d
(1) 3520/    131E : 10 ED               		djnz	.copy_1
(1) 3521/    1320 : 11 04 00            		ld	de,4		; skip AMS, FMS,
(1) 3522/    1323 : 19                  		add	hl,de		; old FM3 check (oops) and keys
(1) 3523/    1324 : 79                  		ld	a,c		; check for Channel 3
(1) 3524/    1325 : FE 02               		cp	2
(1) 3525/    1327 : 20 36               		jr	nz,.fm_ins_ex
(1) 3526/    1329 : CF                  		rst	8
(1) 3527/    132A : 3A 64 19            		ld	a,(fmSpcMode)	; Is it in special mode?
(1) 3528/    132D : CB 77               		bit	6,a
(1) 3529/    132F : 28 2E               		jr	z,.fm_ins_ex
(1) 3530/    1331 : DD E5               		push	ix
(1) 3531/    1333 : DD 21 D9 18         		ld	ix,fm3reg
(1) 3532/    1337 : 06 03               		ld	b,3
(1) 3533/    1339 :                     .copyops3:
(1) 3534/    1339 : 56                  		ld	d,(hl)		; Read OP1-3 freqs
(1) 3535/    133A : 23                  		inc	hl
(1) 3536/    133B : CF                  		rst	8
(1) 3537/    133C : 5E                  		ld	e,(hl)
(1) 3538/    133D : 23                  		inc	hl
(1) 3539/    133E : DD 72 00            		ld	(ix),d
(1) 3540/    1341 : DD 73 02            		ld	(ix+2),e
(1) 3541/    1344 : DD 23               		inc	ix
(1) 3542/    1346 : CF                  		rst	8
(1) 3543/    1347 : DD 23               		inc	ix
(1) 3544/    1349 : DD 23               		inc	ix
(1) 3545/    134B : DD 23               		inc	ix
(1) 3546/    134D : 10 EA               		djnz	.copyops3
(1) 3547/    134F : DD 21 C7 17         		ld	ix,fmcom+2	; Read OP4 freq
(1) 3548/    1353 : 56                  		ld	d,(hl)
(1) 3549/    1354 : 23                  		inc	hl
(1) 3550/    1355 : CF                  		rst	8
(1) 3551/    1356 : 5E                  		ld	e,(hl)
(1) 3552/    1357 : DD 72 18            		ld	(ix+FMFRQH),d
(1) 3553/    135A : DD 73 1E            		ld	(ix+FMFRQL),e
(1) 3554/    135D : DD E1               		pop	ix
(1) 3555/    135F :                     .fm_ins_ex:
(1) 3556/    135F : C1                  		pop	bc
(1) 3557/    1360 : C9                  		ret
(1) 3558/    1361 :                     
(1) 3559/    1361 :                     ; b - Volume decrement
(1) 3560/    1361 :                     ; c - Channel id
(1) 3561/    1361 :                     ; d - 40h+ base reg
(1) 3562/    1361 :                     ; h - Algorithm
(1) 3563/    1361 :                     .fm_volupd:
(1) 3564/    1361 : C5                  		push	bc
(1) 3565/    1362 : FD 46 0C            		ld	b,(iy+FMVOL)
(1) 3566/    1365 :                     .fm_setvol:
(1) 3567/    1365 : DD E5               		push	ix
(1) 3568/    1367 : DD 7E 1C            		ld	a,(ix+1Ch)
(1) 3569/    136A : E6 07               		and	111b
(1) 3570/    136C : 67                  		ld	h,a
(1) 3571/    136D : 11 04 00            		ld	de,4
(1) 3572/    1370 : DD 19               		add	ix,de
(1) 3573/    1372 : 79                  		ld	a,c
(1) 3574/    1373 : E6 03               		and	11b
(1) 3575/    1375 : CF                  		rst	8
(1) 3576/    1376 : F6 40               		or	40h
(1) 3577/    1378 : 57                  		ld	d,a
(1) 3578/    1379 : 7C                  		ld	a,h		; Check 40h
(1) 3579/    137A : FE 07               		cp	7		; Algorithm == 07h?
(1) 3580/    137C : CC A7 13            		call	z,.do_vol
(1) 3581/    137F : 7A                  		ld	a,d
(1) 3582/    1380 : C6 04               		add	a,4
(1) 3583/    1382 : CF                  		rst	8
(1) 3584/    1383 : 57                  		ld	d,a
(1) 3585/    1384 : DD 23               		inc	ix
(1) 3586/    1386 : 7C                  		ld	a,h		; Check 44h
(1) 3587/    1387 : FE 05               		cp	5		; Algorithm > 05h?
(1) 3588/    1389 : D4 A7 13            		call	nc,.do_vol
(1) 3589/    138C : 7A                  		ld	a,d
(1) 3590/    138D : C6 04               		add	a,4
(1) 3591/    138F : 57                  		ld	d,a
(1) 3592/    1390 : DD 23               		inc	ix
(1) 3593/    1392 : CF                  		rst	8
(1) 3594/    1393 : 7C                  		ld	a,h		; Check 48h
(1) 3595/    1394 : FE 04               		cp	4		; Algorithm > 04h?
(1) 3596/    1396 : D4 A7 13            		call	nc,.do_vol
(1) 3597/    1399 : 7A                  		ld	a,d
(1) 3598/    139A : C6 04               		add	a,4
(1) 3599/    139C : 57                  		ld	d,a
(1) 3600/    139D : DD 23               		inc	ix
(1) 3601/    139F : CD A7 13            		call	.do_vol		; Do 4Ch
(1) 3602/    13A2 : DD E1               		pop	ix
(1) 3603/    13A4 : C1                  		pop	bc
(1) 3604/    13A5 : CF                  		rst	8
(1) 3605/    13A6 : C9                  		ret
(1) 3606/    13A7 :                     .do_vol:
(1) 3607/    13A7 : DD 7E 00            		ld	a,(ix)
(1) 3608/    13AA : 80                  		add	a,b
(1) 3609/    13AB : FE 7F               		cp	7Fh
(1) 3610/    13AD : 38 02               		jr	c,.vmuch
(1) 3611/    13AF : 3E 7F               		ld	a,7Fh
(1) 3612/    13B1 :                     .vmuch:
(1) 3613/    13B1 : 5F                  		ld	e,a
(1) 3614/    13B2 : CB 51               		bit	2,c
(1) 3615/    13B4 : CC BB 13            		call	z,fm_send_1
(1) 3616/    13B7 : C4 C6 13            		call	nz,fm_send_2
(1) 3617/    13BA : C9                  		ret
(1) 3618/    13BB :                     
(1) 3619/    13BB :                     ; ---------------------------------------------
(1) 3620/    13BB :                     ; FM send registers
(1) 3621/    13BB :                     ;
(1) 3622/    13BB :                     ; Input:
(1) 3623/    13BB :                     ; d - ctrl
(1) 3624/    13BB :                     ; e - data
(1) 3625/    13BB :                     ; ---------------------------------------------
(1) 3626/    13BB :                     
(1) 3627/    13BB :                     ; Channels 1-3 and global registers
(1) 3628/    13BB :                     fm_send_1:
(1) 3629/    13BB : 7A                  		ld	a,d
(1) 3630/    13BC : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3631/    13BF : 00                  		nop
(1) 3632/    13C0 : 7B                  		ld	a,e
(1) 3633/    13C1 : 32 01 40            		ld	(Zym_data_1),a
(1) 3634/    13C4 : 00                  		nop
(1) 3635/    13C5 : C9                  		ret
(1) 3636/    13C6 :                     ; Channels 4-6
(1) 3637/    13C6 :                     fm_send_2:
(1) 3638/    13C6 : 7A                  		ld	a,d
(1) 3639/    13C7 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3640/    13CA : 00                  		nop
(1) 3641/    13CB : 7B                  		ld	a,e
(1) 3642/    13CC : 32 03 40            		ld	(Zym_data_2),a
(1) 3643/    13CF : 00                  		nop
(1) 3644/    13D0 : C9                  		ret
(1) 3645/    13D1 :                     
(1) 3646/    13D1 :                     ; --------------------------------------------------------
(1) 3647/    13D1 :                     ; brute-force WAVE ON/OFF playback
(1) 3648/    13D1 :                     ; --------------------------------------------------------
(1) 3649/    13D1 :                     
(1) 3650/    13D1 :                     dac_on:
(1) 3651/    13D1 : 3E 2B               		ld	a,2Bh
(1) 3652/    13D3 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3653/    13D6 : 3E 80               		ld	a,80h
(1) 3654/    13D8 : 32 01 40            		ld	(Zym_data_1),a
(1) 3655/    13DB : 3E D9               		ld 	a,zopcExx
(1) 3656/    13DD : 32 08 00            		ld	(dac_me),a
(1) 3657/    13E0 : 3E F5               		ld 	a,zopcPushAf
(1) 3658/    13E2 : 32 2F 14            		ld	(dac_fill),a
(1) 3659/    13E5 : C9                  		ret
(1) 3660/    13E6 :                     dac_off:
(1) 3661/    13E6 : 3E 2B               		ld	a,2Bh
(1) 3662/    13E8 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3663/    13EB : 3E 00               		ld	a,00h
(1) 3664/    13ED : 32 01 40            		ld	(Zym_data_1),a
(1) 3665/    13F0 : 3E C9               		ld 	a,zopcRet
(1) 3666/    13F2 : 32 08 00            		ld	(dac_me),a
(1) 3667/    13F5 : 3E C9               		ld 	a,zopcRet
(1) 3668/    13F7 : 32 2F 14            		ld	(dac_fill),a
(1) 3669/    13FA : C9                  		ret
(1) 3670/    13FB :                     
(1) 3671/    13FB :                     ; --------------------------------------------------------
(1) 3672/    13FB :                     ; dac_play
(1) 3673/    13FB :                     ;
(1) 3674/    13FB :                     ; Plays a new sample
(1) 3675/    13FB :                     ; --------------------------------------------------------
(1) 3676/    13FB :                     
(1) 3677/    13FB :                     dac_play:
(1) 3678/    13FB : F3                  		di
(1) 3679/    13FC : CD E6 13            		call	dac_off
(1) 3680/    13FF : D9                  		exx				; get exx regs
(1) 3681/    1400 : 01 1B 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3682/    1403 : ED 5B 29 00         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3683/    1407 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3684/    140A : D9                  		exx				; move them back
(1) 3685/    140B : 2A 20 00            		ld	hl,(wave_Start)
(1) 3686/    140E : 3A 22 00            		ld 	a,(wave_Start+2)
(1) 3687/    1411 : 22 66 1A            		ld	(dDacPntr),hl
(1) 3688/    1414 : 32 68 1A            		ld	(dDacPntr+2),a
(1) 3689/    1417 : 2A 23 00            		ld	hl,(wave_Len)
(1) 3690/    141A : 3A 25 00            		ld 	a,(wave_Len+2)
(1) 3691/    141D : 22 69 1A            		ld	(dDacCntr),hl
(1) 3692/    1420 : 32 6B 1A            		ld	(dDacCntr+2),a
(1) 3693/    1423 : AF                  		xor	a
(1) 3694/    1424 : 32 6C 1A            		ld	(dDacFifoMid),a
(1) 3695/    1427 : CD 3D 14            		call	dac_firstfill
(1) 3696/    142A : CD D1 13            		call	dac_on
(1) 3697/    142D : FB                  		ei
(1) 3698/    142E : C9                  		ret
(1) 3699/    142F :                     
(1) 3700/    142F :                     ; --------------------------------------------------------
(1) 3701/    142F :                     ; dac_fill
(1) 3702/    142F :                     ;
(1) 3703/    142F :                     ; Refills a half of the WAVE FIFO data, automatic
(1) 3704/    142F :                     ;
(1) 3705/    142F :                     ; *** self-modifiable code ***
(1) 3706/    142F :                     ; --------------------------------------------------------
(1) 3707/    142F :                     
(1) 3708/    142F : F5                  dac_fill:	push	af		; <-- code changes between PUSH AF(playing) and RET(stopped)
(1) 3709/    1430 : 3A 6C 1A            		ld	a,(dDacFifoMid)
(1) 3710/    1433 : D9                  		exx
(1) 3711/    1434 : AC                  		xor	h		; xx.00
(1) 3712/    1435 : D9                  		exx
(1) 3713/    1436 : E6 80               		and	80h
(1) 3714/    1438 : C2 41 14            		jp	nz,dac_refill
(1) 3715/    143B : F1                  		pop	af
(1) 3716/    143C : C9                  		ret
(1) 3717/    143D :                     
(1) 3718/    143D :                     ; First wave fill
(1) 3719/    143D :                     dac_firstfill:
(1) 3720/    143D : CD 54 0F            		call	get_tick
(1) 3721/    1440 : F5                  		push	af
(1) 3722/    1441 :                     
(1) 3723/    1441 :                     ; Auto-fill
(1) 3724/    1441 :                     ; Got this from GEMS, but I changed it to play
(1) 3725/    1441 :                     ; larger samples (7FFFFFh maximum)
(1) 3726/    1441 :                     dac_refill:
(1) 3727/    1441 : CF                  		rst	8
(1) 3728/    1442 : C5                  		push	bc
(1) 3729/    1443 : D5                  		push	de
(1) 3730/    1444 : E5                  		push	hl
(1) 3731/    1445 : 3A 2B 00            		ld	a,(wave_Flags)
(1) 3732/    1448 : FE 07               		cp	111b
(1) 3733/    144A : D2 01 15            		jp	nc,.FDF7
(1) 3734/    144D : 3A 6B 1A            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3735/    1450 : 2A 69 1A            		ld	hl,(dDacCntr)
(1) 3736/    1453 : 01 80 00            		ld	bc,80h
(1) 3737/    1456 : 37                  		scf
(1) 3738/    1457 : 3F                  		ccf
(1) 3739/    1458 : ED 42               		sbc	hl,bc
(1) 3740/    145A : DE 00               		sbc	a,0
(1) 3741/    145C : 32 6B 1A            		ld	(dDacCntr+2),a
(1) 3742/    145F : 22 69 1A            		ld	(dDacCntr),hl
(1) 3743/    1462 : 16 1B               		ld	d,dWaveBuff>>8
(1) 3744/    1464 : B7                  		or	a
(1) 3745/    1465 : FA 8F 14            		jp	m,.dac_over
(1) 3746/    1468 :                     .keepcntr:
(1) 3747/    1468 : 3A 6C 1A            		ld	a,(dDacFifoMid)
(1) 3748/    146B : 5F                  		ld	e,a
(1) 3749/    146C : C6 80               		add 	a,80h
(1) 3750/    146E : 32 6C 1A            		ld	(dDacFifoMid),a
(1) 3751/    1471 : 2A 66 1A            		ld	hl,(dDacPntr)
(1) 3752/    1474 : 3A 68 1A            		ld	a,(dDacPntr+2)
(1) 3753/    1477 : CD C4 0F            		call	transferRom
(1) 3754/    147A : 2A 66 1A            		ld	hl,(dDacPntr)
(1) 3755/    147D : 3A 68 1A            		ld	a,(dDacPntr+2)
(1) 3756/    1480 : 01 80 00            		ld	bc,80h
(1) 3757/    1483 : 09                  		add	hl,bc
(1) 3758/    1484 : CE 00               		adc	a,0
(1) 3759/    1486 : 22 66 1A            		ld	(dDacPntr),hl
(1) 3760/    1489 : 32 68 1A            		ld	(dDacPntr+2),a
(1) 3761/    148C : C3 04 15            		jp	.FDFreturn
(1) 3762/    148F :                     
(1) 3763/    148F :                     ; if wav's len-timer finished:
(1) 3764/    148F :                     .dac_over:
(1) 3765/    148F : 16 1B               		ld	d,dWaveBuff>>8
(1) 3766/    1491 : 3A 2B 00            		ld	a,(wave_Flags)
(1) 3767/    1494 : E6 01               		and	01b
(1) 3768/    1496 : B7                  		or	a
(1) 3769/    1497 : C2 BA 14            		jp	nz,.FDF72
(1) 3770/    149A : 7D                  		ld	a,l
(1) 3771/    149B : C6 80               		add	a,80h
(1) 3772/    149D : 4F                  		ld	c,a
(1) 3773/    149E : 06 00               		ld	b,0
(1) 3774/    14A0 : C5                  		push	bc
(1) 3775/    14A1 : 3A 6C 1A            		ld	a,(dDacFifoMid)
(1) 3776/    14A4 : 5F                  		ld	e,a
(1) 3777/    14A5 : C6 80               		add	a,80h
(1) 3778/    14A7 : 32 6C 1A            		ld	(dDacFifoMid),a
(1) 3779/    14AA : C1                  		pop	bc			; C <- # just xfered
(1) 3780/    14AB : 79                  		ld	a,c
(1) 3781/    14AC : B0                  		or	b
(1) 3782/    14AD : 28 52               		jr	z,.FDF7
(1) 3783/    14AF : 2A 66 1A            		ld	hl,(dDacPntr)
(1) 3784/    14B2 : 3A 68 1A            		ld	a,(dDacPntr+2)
(1) 3785/    14B5 : CD C4 0F            		call	transferRom
(1) 3786/    14B8 : 18 47               		jr	.FDF7
(1) 3787/    14BA :                     .FDF72:
(1) 3788/    14BA :                     
(1) 3789/    14BA :                     	; loop sample
(1) 3790/    14BA : C5                  		push	bc
(1) 3791/    14BB : D5                  		push	de
(1) 3792/    14BC : 3A 28 00            		ld	a,(wave_Loop+2)
(1) 3793/    14BF : 4F                  		ld	c,a
(1) 3794/    14C0 : ED 5B 26 00         		ld	de,(wave_Loop)
(1) 3795/    14C4 : 2A 20 00            		ld	hl,(wave_Start)
(1) 3796/    14C7 : 3A 22 00            		ld 	a,(wave_Start+2)
(1) 3797/    14CA : 81                  		add	a,c
(1) 3798/    14CB : 19                  		add	hl,de
(1) 3799/    14CC : CE 00               		adc	a,0
(1) 3800/    14CE : 22 66 1A            		ld	(dDacPntr),hl
(1) 3801/    14D1 : 32 68 1A            		ld	(dDacPntr+2),a
(1) 3802/    14D4 : 2A 23 00            		ld	hl,(wave_Len)
(1) 3803/    14D7 : 3A 25 00            		ld 	a,(wave_Len+2)
(1) 3804/    14DA : 91                  		sub	a,c
(1) 3805/    14DB : 37                  		scf
(1) 3806/    14DC : 3F                  		ccf
(1) 3807/    14DD : ED 52               		sbc	hl,de
(1) 3808/    14DF : DE 00               		sbc	a,0
(1) 3809/    14E1 : 22 69 1A            		ld	(dDacCntr),hl
(1) 3810/    14E4 : 32 6B 1A            		ld	(dDacCntr+2),a
(1) 3811/    14E7 : D1                  		pop	de
(1) 3812/    14E8 : C1                  		pop	bc
(1) 3813/    14E9 : 78                  		ld	a,b
(1) 3814/    14EA : B1                  		or	c
(1) 3815/    14EB : 28 17               		jr	z,.FDFreturn
(1) 3816/    14ED : 3A 6C 1A            		ld	a,(dDacFifoMid)
(1) 3817/    14F0 : 5F                  		ld	e,a
(1) 3818/    14F1 : C6 80               		add	a,80h
(1) 3819/    14F3 : 32 6C 1A            		ld	(dDacFifoMid),a
(1) 3820/    14F6 : 2A 66 1A            		ld	hl,(dDacPntr)
(1) 3821/    14F9 : 3A 68 1A            		ld	a,(dDacPntr+2)
(1) 3822/    14FC : CD C4 0F            		call	transferRom
(1) 3823/    14FF : 18 03               		jr	.FDFreturn
(1) 3824/    1501 :                     .FDF7:
(1) 3825/    1501 : CD E6 13            		call	dac_off		; DAC finished
(1) 3826/    1504 :                     .FDFreturn:
(1) 3827/    1504 : E1                  		pop	hl
(1) 3828/    1505 : D1                  		pop	de
(1) 3829/    1506 : C1                  		pop	bc
(1) 3830/    1507 : F1                  		pop	af
(1) 3831/    1508 : C9                  		ret
(1) 3832/    1509 :                     
(1) 3833/    1509 :                     ; ====================================================================
(1) 3834/    1509 :                     ; ----------------------------------------------------------------
(1) 3835/    1509 :                     ; Tables
(1) 3836/    1509 :                     ; ----------------------------------------------------------------
(1) 3837/    1509 :                     
(1) 3838/    1509 : 84 02               fmFreq_List:	dw 644
(1) 3839/    150B : A9 02               		dw 681
(1) 3840/    150D : D2 02               		dw 722
(1) 3841/    150F : FD 02               		dw 765
(1) 3842/    1511 : 2A 03               		dw 810
(1) 3843/    1513 : 5A 03               		dw 858
(1) 3844/    1515 : 8E 03               		dw 910
(1) 3845/    1517 : C4 03               		dw 964
(1) 3846/    1519 : FD 03               		dw 1021
(1) 3847/    151B : 39 04               		dw 1081
(1) 3848/    151D : 7A 04               		dw 1146
(1) 3849/    151F : BE 04               		dw 1214
(1) 3850/    1521 :                     
(1) 3851/    1521 :                     psgFreq_List:
(1) 3852/    1521 : FF FF               		dw -1		; C-0 $0
(1) 3853/    1523 : FF FF               		dw -1
(1) 3854/    1525 : FF FF               		dw -1
(1) 3855/    1527 : FF FF               		dw -1
(1) 3856/    1529 : FF FF               		dw -1
(1) 3857/    152B : FF FF               		dw -1
(1) 3858/    152D : FF FF               		dw -1
(1) 3859/    152F : FF FF               		dw -1
(1) 3860/    1531 : FF FF               		dw -1
(1) 3861/    1533 : FF FF               		dw -1
(1) 3862/    1535 : FF FF               		dw -1
(1) 3863/    1537 : FF FF               		dw -1
(1) 3864/    1539 : FF FF               		dw -1		; C-1 $C
(1) 3865/    153B : FF FF               		dw -1
(1) 3866/    153D : FF FF               		dw -1
(1) 3867/    153F : FF FF               		dw -1
(1) 3868/    1541 : FF FF               		dw -1
(1) 3869/    1543 : FF FF               		dw -1
(1) 3870/    1545 : FF FF               		dw -1
(1) 3871/    1547 : FF FF               		dw -1
(1) 3872/    1549 : FF FF               		dw -1
(1) 3873/    154B : FF FF               		dw -1
(1) 3874/    154D : FF FF               		dw -1
(1) 3875/    154F : FF FF               		dw -1
(1) 3876/    1551 : FF FF               		dw -1		; C-2 $18
(1) 3877/    1553 : FF FF               		dw -1
(1) 3878/    1555 : FF FF               		dw -1
(1) 3879/    1557 : FF FF               		dw -1
(1) 3880/    1559 : FF FF               		dw -1
(1) 3881/    155B : FF FF               		dw -1
(1) 3882/    155D : FF FF               		dw -1
(1) 3883/    155F : FF FF               		dw -1
(1) 3884/    1561 : FF FF               		dw -1
(1) 3885/    1563 : FF FF               		dw -1
(1) 3886/    1565 : FF FF               		dw -1
(1) 3887/    1567 : FF FF               		dw -1
(1) 3888/    1569 : FF FF               		dw -1		; C-3 $24
(1) 3889/    156B : FF FF               		dw -1
(1) 3890/    156D : FF FF               		dw -1
(1) 3891/    156F : FF FF               		dw -1
(1) 3892/    1571 : FF FF               		dw -1
(1) 3893/    1573 : FF FF               		dw -1
(1) 3894/    1575 : FF FF               		dw -1
(1) 3895/    1577 : FF FF               		dw -1
(1) 3896/    1579 : FF FF               		dw -1
(1) 3897/    157B : F8 03               		dw 3F8h
(1) 3898/    157D : BF 03               		dw 3BFh
(1) 3899/    157F : 89 03               		dw 389h
(1) 3900/    1581 : 56 03               		dw 356h		;C-4 30
(1) 3901/    1583 : 26 03               		dw 326h
(1) 3902/    1585 : F9 02               		dw 2F9h
(1) 3903/    1587 : CE 02               		dw 2CEh
(1) 3904/    1589 : A5 02               		dw 2A5h
(1) 3905/    158B : 80 02               		dw 280h
(1) 3906/    158D : 5C 02               		dw 25Ch
(1) 3907/    158F : 3A 02               		dw 23Ah
(1) 3908/    1591 : 1A 02               		dw 21Ah
(1) 3909/    1593 : FB 01               		dw 1FBh
(1) 3910/    1595 : DF 01               		dw 1DFh
(1) 3911/    1597 : C4 01               		dw 1C4h
(1) 3912/    1599 : AB 01               		dw 1ABh		;C-5 3C
(1) 3913/    159B : 93 01               		dw 193h
(1) 3914/    159D : 7D 01               		dw 17Dh
(1) 3915/    159F : 67 01               		dw 167h
(1) 3916/    15A1 : 53 01               		dw 153h
(1) 3917/    15A3 : 40 01               		dw 140h
(1) 3918/    15A5 : 2E 01               		dw 12Eh
(1) 3919/    15A7 : 1D 01               		dw 11Dh
(1) 3920/    15A9 : 0D 01               		dw 10Dh
(1) 3921/    15AB : FE 00               		dw 0FEh
(1) 3922/    15AD : EF 00               		dw 0EFh
(1) 3923/    15AF : E2 00               		dw 0E2h
(1) 3924/    15B1 : D6 00               		dw 0D6h		;C-6 48
(1) 3925/    15B3 : C9 00               		dw 0C9h
(1) 3926/    15B5 : BE 00               		dw 0BEh
(1) 3927/    15B7 : B4 00               		dw 0B4h
(1) 3928/    15B9 : A9 00               		dw 0A9h
(1) 3929/    15BB : A0 00               		dw 0A0h
(1) 3930/    15BD : 97 00               		dw 97h
(1) 3931/    15BF : 8F 00               		dw 8Fh
(1) 3932/    15C1 : 87 00               		dw 87h
(1) 3933/    15C3 : 7F 00               		dw 7Fh
(1) 3934/    15C5 : 78 00               		dw 78h
(1) 3935/    15C7 : 71 00               		dw 71h
(1) 3936/    15C9 : 6B 00               		dw 6Bh		; C-7 54
(1) 3937/    15CB : 65 00               		dw 65h
(1) 3938/    15CD : 5F 00               		dw 5Fh
(1) 3939/    15CF : 5A 00               		dw 5Ah
(1) 3940/    15D1 : 55 00               		dw 55h
(1) 3941/    15D3 : 50 00               		dw 50h
(1) 3942/    15D5 : 4B 00               		dw 4Bh
(1) 3943/    15D7 : 47 00               		dw 47h
(1) 3944/    15D9 : 43 00               		dw 43h
(1) 3945/    15DB : 40 00               		dw 40h
(1) 3946/    15DD : 3C 00               		dw 3Ch
(1) 3947/    15DF : 39 00               		dw 39h
(1) 3948/    15E1 : 36 00               		dw 36h		; C-8 $60
(1) 3949/    15E3 : 33 00               		dw 33h
(1) 3950/    15E5 : 30 00               		dw 30h
(1) 3951/    15E7 : 2D 00               		dw 2Dh
(1) 3952/    15E9 : 2B 00               		dw 2Bh
(1) 3953/    15EB : 28 00               		dw 28h
(1) 3954/    15ED : 26 00               		dw 26h
(1) 3955/    15EF : 24 00               		dw 24h
(1) 3956/    15F1 : 22 00               		dw 22h
(1) 3957/    15F3 : 20 00               		dw 20h
(1) 3958/    15F5 : 1F 00               		dw 1Fh
(1) 3959/    15F7 : 1D 00               		dw 1Dh
(1) 3960/    15F9 : 1B 00               		dw 1Bh		; C-9 $6C
(1) 3961/    15FB : 1A 00               		dw 1Ah
(1) 3962/    15FD : 18 00               		dw 18h
(1) 3963/    15FF : 17 00               		dw 17h
(1) 3964/    1601 : 16 00               		dw 16h
(1) 3965/    1603 : 15 00               		dw 15h
(1) 3966/    1605 : 13 00               		dw 13h
(1) 3967/    1607 : 12 00               		dw 12h
(1) 3968/    1609 : 11 00               		dw 11h
(1) 3969/    160B : 10 00                		dw 10h
(1) 3970/    160D : 09 00                		dw 9h
(1) 3971/    160F : 08 00                		dw 8h
(1) 3972/    1611 : 00 00               		dw 0
(1) 3973/    1613 :                     
(1) 3974/    1613 :                     ; TODO: some of these freqs sound
(1) 3975/    1613 :                     ; wrong.
(1) 3976/    1613 : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3977/    1615 : 00 01               		dw 100h
(1) 3978/    1617 : 00 01               		dw 100h
(1) 3979/    1619 : 00 01               		dw 100h
(1) 3980/    161B : 00 01               		dw 100h
(1) 3981/    161D : 00 01               		dw 100h
(1) 3982/    161F : 00 01               		dw 100h
(1) 3983/    1621 : 00 01               		dw 100h
(1) 3984/    1623 : 00 01               		dw 100h
(1) 3985/    1625 : 00 01               		dw 100h
(1) 3986/    1627 : 00 01               		dw 100h
(1) 3987/    1629 : 00 01               		dw 100h
(1) 3988/    162B : 00 01               		dw 100h		; C-1
(1) 3989/    162D : 00 01               		dw 100h
(1) 3990/    162F : 00 01               		dw 100h
(1) 3991/    1631 : 00 01               		dw 100h
(1) 3992/    1633 : 00 01               		dw 100h
(1) 3993/    1635 : 00 01               		dw 100h
(1) 3994/    1637 : 00 01               		dw 100h
(1) 3995/    1639 : 00 01               		dw 100h
(1) 3996/    163B : 00 01               		dw 100h
(1) 3997/    163D : 00 01               		dw 100h
(1) 3998/    163F : 00 01               		dw 100h
(1) 3999/    1641 : 00 01               		dw 100h
(1) 4000/    1643 : 00 01               		dw 100h		; C-2
(1) 4001/    1645 : 00 01               		dw 100h
(1) 4002/    1647 : 00 01               		dw 100h
(1) 4003/    1649 : 00 01               		dw 100h
(1) 4004/    164B : 00 01               		dw 100h
(1) 4005/    164D : 00 01               		dw 100h
(1) 4006/    164F : 00 01               		dw 100h
(1) 4007/    1651 : 00 01               		dw 100h
(1) 4008/    1653 : 00 01               		dw 100h
(1) 4009/    1655 : 00 01               		dw 100h
(1) 4010/    1657 : 36 00               		dw 036h
(1) 4011/    1659 : 3B 00               		dw 03Bh
(1) 4012/    165B : 3E 00               		dw 03Eh		; C-3 5512
(1) 4013/    165D : 43 00               		dw 043h		; C#3
(1) 4014/    165F : 46 00               		dw 046h		; D-3
(1) 4015/    1661 : 49 00               		dw 049h		; D#3
(1) 4016/    1663 : 4E 00               		dw 04Eh		; E-3
(1) 4017/    1665 : 54 00               		dw 054h		; F-3
(1) 4018/    1667 : 58 00               		dw 058h		; F#3
(1) 4019/    1669 : 5E 00               		dw 05Eh		; G-3 8363 -17
(1) 4020/    166B : 63 00               		dw 063h		; G#3
(1) 4021/    166D : 68 00               		dw 068h		; A-3
(1) 4022/    166F : 70 00               		dw 070h		; A#3
(1) 4023/    1671 : 75 00               		dw 075h		; B-3
(1) 4024/    1673 : 81 00               		dw 081h		; C-4 11025 -12
(1) 4025/    1675 : 87 00               		dw 087h		; C#4
(1) 4026/    1677 : 8C 00               		dw 08Ch		; D-4
(1) 4027/    1679 : 9A 00               		dw 09Ah		; D#4
(1) 4028/    167B : 9E 00               		dw 09Eh		; E-4
(1) 4029/    167D : AD 00               		dw 0ADh		; F-4
(1) 4030/    167F : B2 00               		dw 0B2h		; F#4
(1) 4031/    1681 : C0 00               		dw 0C0h		; G-4
(1) 4032/    1683 : CC 00               		dw 0CCh		; G#4
(1) 4033/    1685 : D7 00               		dw 0D7h		; A-4
(1) 4034/    1687 : E6 00               		dw 0E6h		; A#4
(1) 4035/    1689 : F0 00               		dw 0F0h		; B-4
(1) 4036/    168B : 00 01               		dw 100h		; C-5 22050
(1) 4037/    168D : 10 01               		dw 110h		; C#5
(1) 4038/    168F : 20 01               		dw 120h		; D-5
(1) 4039/    1691 : 2C 01               		dw 12Ch		; D#5
(1) 4040/    1693 : 42 01               		dw 142h		; E-5
(1) 4041/    1695 : 58 01               		dw 158h		; F-5
(1) 4042/    1697 : 6A 01               		dw 16Ah		; F#5 32000 +6
(1) 4043/    1699 : 7E 01               		dw 17Eh		; G-5
(1) 4044/    169B : 90 01               		dw 190h		; G#5
(1) 4045/    169D : AC 01               		dw 1ACh		; A-5
(1) 4046/    169F : C2 01               		dw 1C2h		; A#5
(1) 4047/    16A1 : E0 01               		dw 1E0h		; B-5
(1) 4048/    16A3 : F8 01               		dw 1F8h		; C-6 44100 +12
(1) 4049/    16A5 : 10 02               		dw 210h		; C#6
(1) 4050/    16A7 : 40 02               		dw 240h		; D-6
(1) 4051/    16A9 : 60 02               		dw 260h		; D#6
(1) 4052/    16AB : 80 02               		dw 280h		; E-6
(1) 4053/    16AD : A0 02               		dw 2A0h		; F-6
(1) 4054/    16AF : D0 02               		dw 2D0h		; F#6
(1) 4055/    16B1 : F8 02               		dw 2F8h		; G-6
(1) 4056/    16B3 : 20 03               		dw 320h		; G#6
(1) 4057/    16B5 : 50 03               		dw 350h		; A-6
(1) 4058/    16B7 : 80 03               		dw 380h		; A#6
(1) 4059/    16B9 : C0 03               		dw 3C0h		; B-6
(1) 4060/    16BB : 00 04               		dw 400h		; C-7 88200
(1) 4061/    16BD : 00 01               		dw 100h
(1) 4062/    16BF : 00 01               		dw 100h
(1) 4063/    16C1 : 00 01               		dw 100h
(1) 4064/    16C3 : 00 01               		dw 100h
(1) 4065/    16C5 : 00 01               		dw 100h
(1) 4066/    16C7 : 00 01               		dw 100h
(1) 4067/    16C9 : 00 01               		dw 100h
(1) 4068/    16CB : 00 01               		dw 100h
(1) 4069/    16CD : 00 01               		dw 100h
(1) 4070/    16CF : 00 01               		dw 100h
(1) 4071/    16D1 : 00 01               		dw 100h
(1) 4072/    16D3 : 00 01               		dw 100h		; C-8
(1) 4073/    16D5 : 00 01               		dw 100h
(1) 4074/    16D7 : 00 01               		dw 100h
(1) 4075/    16D9 : 00 01               		dw 100h
(1) 4076/    16DB : 00 01               		dw 100h
(1) 4077/    16DD : 00 01               		dw 100h
(1) 4078/    16DF : 00 01               		dw 100h
(1) 4079/    16E1 : 00 01               		dw 100h
(1) 4080/    16E3 : 00 01               		dw 100h
(1) 4081/    16E5 : 00 01               		dw 100h
(1) 4082/    16E7 : 00 01               		dw 100h
(1) 4083/    16E9 : 00 01               		dw 100h
(1) 4084/    16EB : 00 01               		dw 100h		; C-9
(1) 4085/    16ED : 00 01               		dw 100h
(1) 4086/    16EF : 00 01               		dw 100h
(1) 4087/    16F1 : 00 01               		dw 100h
(1) 4088/    16F3 : 00 01               		dw 100h
(1) 4089/    16F5 : 00 01               		dw 100h
(1) 4090/    16F7 : 00 01               		dw 100h
(1) 4091/    16F9 : 00 01               		dw 100h
(1) 4092/    16FB : 00 01               		dw 100h
(1) 4093/    16FD : 00 01               		dw 100h
(1) 4094/    16FF : 00 01               		dw 100h
(1) 4095/    1701 : 00 01               		dw 100h
(1) 4096/    1703 :                     
(1) 4097/    1703 :                     ; --------------------------------------------------------
(1) 4098/    1703 :                     
(1) 4099/    1703 :                     	; Channel tables: 10h bytes
(1) 4100/    1703 :                     	; 0  - Link addr (0000h = free, used chnls start from +0020h)
(1) 4101/    1703 :                     	; 2  - Channel index (ID is set extrenally)
(1) 4102/    1703 :                     	; 3  - Pitch
(1) 4103/    1703 :                     	; 4+ - Channel specific...
(1) 4104/    1703 :                     
(1) 4105/    1703 :                     	; PSG (80h+)
(1) 4106/    1703 :                     	;  4 - psgNoise mode
(1) 4107/    1703 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4108/    170B : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4109/    1713 : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4110/    171B : FF FF               		dw -1	; end-of-list
(1) 4111/    171D : 00 00 03 00 00 00   tblPSGN:	db 00h,00h,03h,00h,00h,00h,00h,00h	; Noise (DIRECT CHECK only)
                    00 00 
(1) 4112/    1725 :                     
(1) 4113/    1725 :                     	; FM: 90h+ FM3: 0A0h DAC: 0B0h
(1) 4114/    1725 :                     	;  4 - Special mode (FM3: Special, FM6: DAC)
(1) 4115/    1725 :                     	;  5 - 24-bit copy of ROM instrument pointer
(1) 4116/    1725 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4117/    172D : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4118/    1735 : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(1) 4119/    173D : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(1) 4120/    1745 : 00 00 02 00 00 00   tblFM3:		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4121/    174D : 00 00 05 00 00 00   tblFM6:		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(1) 4122/    1755 : FF FF               		dw -1	; end-of-list
(1) 4123/    1757 :                     
(1) 4124/    1757 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4125/    175F : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4126/    1767 : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4127/    176F : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(1) 4128/    1777 : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(1) 4129/    177F : 00 00 05 00 00 00   		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(1) 4130/    1787 : 00 00 06 00 00 00   		db 00h,00h,06h,00h,00h,00h,00h,00h	; Channel 7
                    00 00 
(1) 4131/    178F : FF FF               		dw -1
(1) 4132/    1791 :                     
(1) 4133/    1791 :                     	; PSG psuedo-controls
(1) 4134/    1791 : 00 00 00 00         psgcom		db 00h,00h,00h,00h	;  0 command 1 = key on, 2 = key off, 4 = stop snd
(1) 4135/    1795 : FF FF FF FF         psglev		db -1, -1, -1, -1	;  4 output level attenuation (%llll.0000, -1 = silent)
(1) 4136/    1799 : 00 00 00 00         psgatk		db 00h,00h,00h,00h	;  8 attack rate
(1) 4137/    179D : 00 00 00 00         psgdec		db 00h,00h,00h,00h	; 12 decay rate
(1) 4138/    17A1 : 00 00 00 00         psgslv		db 00h,00h,00h,00h	; 16 sustain level attenuation
(1) 4139/    17A5 : 00 00 00 00         psgrrt		db 00h,00h,00h,00h	; 20 release rate
(1) 4140/    17A9 : 00 00 00 00         psgenv		db 00h,00h,00h,00h	; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(1) 4141/    17AD : 00 00 00 00         psgdtl		db 00h,00h,00h,00h	; 28 tone bottom 4 bits
(1) 4142/    17B1 : 00 00 00 00         psgdth		db 00h,00h,00h,00h	; 32 tone upper 6 bits
(1) 4143/    17B5 : 00 00 00 00         psgalv		db 00h,00h,00h,00h	; 36 attack level attenuation
(1) 4144/    17B9 : 00 00 00 00         whdflg		db 00h,00h,00h,00h	; 40 flags to indicate hardware should be updated
(1) 4145/    17BD : 00 00 00 00         psgtim		db 00h,00h,00h,00h	; 44 timer for sustain
(1) 4146/    17C1 : 00 00 00 00         psgvol		db 00h,00h,00h,00h
(1) 4147/    17C5 :                     
(1) 4148/    17C5 : 00 00 00 00 00 00   fmcom:		db 00h,00h,00h,00h,00h,00h	;  0 - play bits: 2-cut 1-off 0-play
(1) 4149/    17CB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	;  6 - keys xxxx0000b
(1) 4150/    17D1 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 12 - volume (for 40h+)
(1) 4151/    17D7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 18 - panning (%LR000000)
(1) 4152/    17DD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 24 - A4h+ (MSB FIRST)
(1) 4153/    17E3 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 30 - A0h+
(1) 4154/    17E9 :                     fmins_com:	ds 028h			; Current instrument data for each FM
(1) 4155/    1811 :                     fmins_com2:	ds 028h
(1) 4156/    1839 :                     fmins_com3:	ds 028h
(1) 4157/    1861 :                     fmins_com4:	ds 028h
(1) 4158/    1889 :                     fmins_com5:	ds 028h
(1) 4159/    18B1 :                     fmins_com6:	ds 028h
(1) 4160/    18D9 : 00 AC 00 A8         fm3reg:		dw 0AC00h,0A800h	; S3-S1, S4 is at A6/A2
(1) 4161/    18DD : 00 AD 00 A9         		dw 0AD00h,0A900h
(1) 4162/    18E1 : 00 AE 00 AA         		dw 0AE00h,0AA00h
(1) 4163/    18E5 : 00                  daccom:		db 0			; single byte for key on, off and cut
(1) 4164/    18E6 :                     
(1) 4165/    18E6 :                     	; Format:
(1) 4166/    18E6 :                     	; %00VP0CFO 0000Lslr vvvvvvpp pppppppp
(1) 4167/    18E6 :                     	; $ii,$ii,$ii
(1) 4168/    18E6 :                     	;
(1) 4169/    18E6 :                     	; iiiiii - 24-bit ROM sample pointer
(1) 4170/    18E6 :                     	;          dc.l sample_end
(1) 4171/    18E6 :                     	;          dc.l sample_loop
(1) 4172/    18E6 :                     	;          dc.b (actual data)
(1) 4173/    18E6 :                     	;
(1) 4174/    18E6 :                     	; Request bits:
(1) 4175/    18E6 :                     	; V - volume change
(1) 4176/    18E6 :                     	; P - pitch change
(1) 4177/    18E6 :                     	; C - keycut
(1) 4178/    18E6 :                     	; F - keyoff
(1) 4179/    18E6 :                     	; O - keyon
(1) 4180/    18E6 :                     	;
(1) 4181/    18E6 :                     	;  p - Pitch/freq 0.00 (max 3.00)
(1) 4182/    18E6 :                     	;  i - Instrument ID
(1) 4183/    18E6 :                     	;  v - Volume, 0-max
(1) 4184/    18E6 :                     	; lr - Left/Right output
(1) 4185/    18E6 :                     	;  s - Mono/Stereo bit
(1) 4186/    18E6 :                     	;  L - Loop flag
(1) 4187/    18E6 :                     	;
(1) 4188/    18E6 :                     	 align 8
(1) 4189/    18E8 : 00 00 00 00 00 00   pwmcom:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Playback bits: KeyOn/KeyOff/KeyCut/other update bits
                    00 00 
(1) 4190/    18F0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; Playback flags: Stereo Mode/Left/Right
                    00 00 
(1) 4191/    18F8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; Volume | Pitch MSB
                    00 00 
(1) 4192/    1900 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; Pitch LSB
                    00 00 
(1) 4193/    1908 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 24-bit sample data location
                    00 00 
(1) 4194/    1910 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4195/    1918 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4196/    1920 :                     
(1) 4197/    1920 :                     ; ====================================================================
(1) 4198/    1920 :                     ; ----------------------------------------------------------------
(1) 4199/    1920 :                     ; Z80 RAM
(1) 4200/    1920 :                     ; ----------------------------------------------------------------
(1) 4201/    1920 :                     
(1) 4202/    1920 :                     commZfifo	ds 40h		; Buffer for command requests from 68k (40h bytes, loops)
(1) 4203/    1960 : 00 00               tickFlag	dw 0		; Tick flag from VBlank, Read as (tickFlag+1) for reading/reseting
(1) 4204/    1962 : 00                  tickCnt		db 0		; Tick counter (PUT THIS TAG AFTER tickFlag)
(1) 4205/    1963 : 00                  psgHatMode	db 0
(1) 4206/    1964 : 00                  fmSpcMode	db 0
(1) 4207/    1965 : 00                  flagResChip	db 0		; reset chips flag
(1) 4208/    1966 :                     insDataC_0	ds 8*16		; Instrument data for each Track slot
(1) 4209/    19E6 :                     insDataC_1	ds 8*16		; 8*MAX_INS
(1) 4210/    1A66 :                     
(1) 4211/    1A66 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4212/    1A69 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4213/    1A6C : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4214/    1A6D :                     
(1) 4215/    1A6D :                     ; Temporal variables
(1) 4216/    1A6D : 00                  currTickBits	db 0		; Current Tick/Tempo bitflags (000000BTb B-beat, T-tick)
(1) 4217/    1A6E : 00 00               currInsData	dw 0
(1) 4218/    1A70 : 00 00               currTblPos	dw 0
(1) 4219/    1A72 : 00 00               currInsPos	dw 0
(1) 4220/    1A74 : 00 00               currTrkCtrl	dw 0
(1) 4221/    1A76 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4222/    1A77 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4223/    1A78 :                     trkHdOut	ds 4		; temporal Header for reading Track position/row count
(1) 4224/    1A7C :                     
(1) 4225/    1A7C : (MACRO)             		org 1B00h
(1) 4225/    1A7C : 00                                                  db 0
(1) 4225/    1A7D : 00                                                  db 0
(1) 4225/    1A7E : 00                                                  db 0
(1) 4225/    1A7F : 00                                                  db 0
(1) 4225/    1A80 : 00                                                  db 0
(1) 4225/    1A81 : 00                                                  db 0
(1) 4225/    1A82 : 00                                                  db 0
(1) 4225/    1A83 : 00                                                  db 0
(1) 4225/    1A84 : 00                                                  db 0
(1) 4225/    1A85 : 00                                                  db 0
(1) 4225/    1A86 : 00                                                  db 0
(1) 4225/    1A87 : 00                                                  db 0
(1) 4225/    1A88 : 00                                                  db 0
(1) 4225/    1A89 : 00                                                  db 0
(1) 4225/    1A8A : 00                                                  db 0
(1) 4225/    1A8B : 00                                                  db 0
(1) 4225/    1A8C : 00                                                  db 0
(1) 4225/    1A8D : 00                                                  db 0
(1) 4225/    1A8E : 00                                                  db 0
(1) 4225/    1A8F : 00                                                  db 0
(1) 4225/    1A90 : 00                                                  db 0
(1) 4225/    1A91 : 00                                                  db 0
(1) 4225/    1A92 : 00                                                  db 0
(1) 4225/    1A93 : 00                                                  db 0
(1) 4225/    1A94 : 00                                                  db 0
(1) 4225/    1A95 : 00                                                  db 0
(1) 4225/    1A96 : 00                                                  db 0
(1) 4225/    1A97 : 00                                                  db 0
(1) 4225/    1A98 : 00                                                  db 0
(1) 4225/    1A99 : 00                                                  db 0
(1) 4225/    1A9A : 00                                                  db 0
(1) 4225/    1A9B : 00                                                  db 0
(1) 4225/    1A9C : 00                                                  db 0
(1) 4225/    1A9D : 00                                                  db 0
(1) 4225/    1A9E : 00                                                  db 0
(1) 4225/    1A9F : 00                                                  db 0
(1) 4225/    1AA0 : 00                                                  db 0
(1) 4225/    1AA1 : 00                                                  db 0
(1) 4225/    1AA2 : 00                                                  db 0
(1) 4225/    1AA3 : 00                                                  db 0
(1) 4225/    1AA4 : 00                                                  db 0
(1) 4225/    1AA5 : 00                                                  db 0
(1) 4225/    1AA6 : 00                                                  db 0
(1) 4225/    1AA7 : 00                                                  db 0
(1) 4225/    1AA8 : 00                                                  db 0
(1) 4225/    1AA9 : 00                                                  db 0
(1) 4225/    1AAA : 00                                                  db 0
(1) 4225/    1AAB : 00                                                  db 0
(1) 4225/    1AAC : 00                                                  db 0
(1) 4225/    1AAD : 00                                                  db 0
(1) 4225/    1AAE : 00                                                  db 0
(1) 4225/    1AAF : 00                                                  db 0
(1) 4225/    1AB0 : 00                                                  db 0
(1) 4225/    1AB1 : 00                                                  db 0
(1) 4225/    1AB2 : 00                                                  db 0
(1) 4225/    1AB3 : 00                                                  db 0
(1) 4225/    1AB4 : 00                                                  db 0
(1) 4225/    1AB5 : 00                                                  db 0
(1) 4225/    1AB6 : 00                                                  db 0
(1) 4225/    1AB7 : 00                                                  db 0
(1) 4225/    1AB8 : 00                                                  db 0
(1) 4225/    1AB9 : 00                                                  db 0
(1) 4225/    1ABA : 00                                                  db 0
(1) 4225/    1ABB : 00                                                  db 0
(1) 4225/    1ABC : 00                                                  db 0
(1) 4225/    1ABD : 00                                                  db 0
(1) 4225/    1ABE : 00                                                  db 0
(1) 4225/    1ABF : 00                                                  db 0
(1) 4225/    1AC0 : 00                                                  db 0
(1) 4225/    1AC1 : 00                                                  db 0
(1) 4225/    1AC2 : 00                                                  db 0
(1) 4225/    1AC3 : 00                                                  db 0
(1) 4225/    1AC4 : 00                                                  db 0
(1) 4225/    1AC5 : 00                                                  db 0
(1) 4225/    1AC6 : 00                                                  db 0
(1) 4225/    1AC7 : 00                                                  db 0
(1) 4225/    1AC8 : 00                                                  db 0
(1) 4225/    1AC9 : 00                                                  db 0
(1) 4225/    1ACA : 00                                                  db 0
(1) 4225/    1ACB : 00                                                  db 0
(1) 4225/    1ACC : 00                                                  db 0
(1) 4225/    1ACD : 00                                                  db 0
(1) 4225/    1ACE : 00                                                  db 0
(1) 4225/    1ACF : 00                                                  db 0
(1) 4225/    1AD0 : 00                                                  db 0
(1) 4225/    1AD1 : 00                                                  db 0
(1) 4225/    1AD2 : 00                                                  db 0
(1) 4225/    1AD3 : 00                                                  db 0
(1) 4225/    1AD4 : 00                                                  db 0
(1) 4225/    1AD5 : 00                                                  db 0
(1) 4225/    1AD6 : 00                                                  db 0
(1) 4225/    1AD7 : 00                                                  db 0
(1) 4225/    1AD8 : 00                                                  db 0
(1) 4225/    1AD9 : 00                                                  db 0
(1) 4225/    1ADA : 00                                                  db 0
(1) 4225/    1ADB : 00                                                  db 0
(1) 4225/    1ADC : 00                                                  db 0
(1) 4225/    1ADD : 00                                                  db 0
(1) 4225/    1ADE : 00                                                  db 0
(1) 4225/    1ADF : 00                                                  db 0
(1) 4225/    1AE0 : 00                                                  db 0
(1) 4225/    1AE1 : 00                                                  db 0
(1) 4225/    1AE2 : 00                                                  db 0
(1) 4225/    1AE3 : 00                                                  db 0
(1) 4225/    1AE4 : 00                                                  db 0
(1) 4225/    1AE5 : 00                                                  db 0
(1) 4225/    1AE6 : 00                                                  db 0
(1) 4225/    1AE7 : 00                                                  db 0
(1) 4225/    1AE8 : 00                                                  db 0
(1) 4225/    1AE9 : 00                                                  db 0
(1) 4225/    1AEA : 00                                                  db 0
(1) 4225/    1AEB : 00                                                  db 0
(1) 4225/    1AEC : 00                                                  db 0
(1) 4225/    1AED : 00                                                  db 0
(1) 4225/    1AEE : 00                                                  db 0
(1) 4225/    1AEF : 00                                                  db 0
(1) 4225/    1AF0 : 00                                                  db 0
(1) 4225/    1AF1 : 00                                                  db 0
(1) 4225/    1AF2 : 00                                                  db 0
(1) 4225/    1AF3 : 00                                                  db 0
(1) 4225/    1AF4 : 00                                                  db 0
(1) 4225/    1AF5 : 00                                                  db 0
(1) 4225/    1AF6 : 00                                                  db 0
(1) 4225/    1AF7 : 00                                                  db 0
(1) 4225/    1AF8 : 00                                                  db 0
(1) 4225/    1AF9 : 00                                                  db 0
(1) 4225/    1AFA : 00                                                  db 0
(1) 4225/    1AFB : 00                                                  db 0
(1) 4225/    1AFC : 00                                                  db 0
(1) 4225/    1AFD : 00                                                  db 0
(1) 4225/    1AFE : 00                                                  db 0
(1) 4225/    1AFF : 00                                                  db 0
(1) 4225/    1B00 :                     
(1) 4226/    1B00 :                     zStack:
(1) 4227/    1B00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4228/    1C00 :                     trkBuff_0	ds 100h		; Track control (first 20h) + channels (8h each)
(1) 4229/    1D00 :                     trkBuff_1	ds 100h		; Must be aligned so priority check works (TODO, use a flag instea)
(1) 4230/    1E00 :                     trkData_0	ds 100h		; Track note-cache buffers: 100h bytes, updates every 80h
(1) 4231/    1F00 :                     trkData_1	ds 100h
(1) 4232/    2000 :                     
      53/    2000 :                     		cpu 68000
      54/    2000 :                     		padding off
      55/    4520 :                     		phase Z80_CODE+*
      56/    4520 :                     Z80_CODE_END:
      57/    4520 :                     		align 2
      58/    4520 :                     		include "sound/instr.asm"
(1)    1/    4520 :                     ; ====================================================================
(1)    2/    4520 :                     ; ----------------------------------------------------------------
(1)    3/    4520 :                     ; PSG, FM, DAC and PWM instruments go here
(1)    4/    4520 :                     ;
(1)    5/    4520 :                     ; Any 68k BANK must be set externally if required.
(1)    6/    4520 :                     ; (macros add the bank automaticly)
(1)    7/    4520 :                     ; ----------------------------------------------------------------
(1)    8/    4520 :                     
(1)    9/    4520 :                     ; --------------------------------------------------------
(1)   10/    4520 :                     ; DAC samples
(1)   11/    4520 :                     ; --------------------------------------------------------
(1)   12/    4520 :                     
(1)   13/    4520 :                     ; Special include macro for samples
(1)   14/    4520 :                     ; Works for both DAC and PWM
(1)   15/    4520 :                     ;
(1)   16/    4520 :                     ; aligns by 4 at the end so the sample can be used on 32X
(1)   17/    4520 :                     gSmpl macro locate,loop
(1)   18/    4520 :                     .start
(1)   19/    4520 :                     	dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)	; length
(1)   20/    4520 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   21/    4520 :                     	binclude locate,$2C	; actual data
(1)   22/    4520 :                     .end
(1)   23/    4520 :                     	align 4		; align 4 for pwm's
(1)   24/    4520 :                     	endm
(1)   25/    4520 :                     
(1)   26/    4520 :                     	align 4		; FIRST ALIGN FOR PWMs
(1)   27/    4520 :                     DacIns_Magic2:
(1)   28/    4520 : (MACRO)             	gSmpl "sound/instr/smpl/magic_2.wav",0
(1)   28/    4520 :                     .start
(1)   28/    4520 : 3A8E 01                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   28/    4523 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/    4526 :                             binclude "sound/instr/smpl/magic_2.wav",$2C     ; actual data
(1)   28/   1D35A :                     .end
(1)   28/   1D35A :                             align 4         ; align 4 for pwm's
(1)   29/   1D35C :                     DacIns_Snare_Gem:
(1)   30/   1D35C : (MACRO)             	gSmpl "sound/instr/smpl/snare_lobo.wav",0
(1)   30/   1D35C :                     .start
(1)   30/   1D35C : 2A11 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   30/   1D35F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   30/   1D362 :                             binclude "sound/instr/smpl/snare_lobo.wav",$2C     ; actual data
(1)   30/   1E486 :                     .end
(1)   30/   1E486 :                             align 4         ; align 4 for pwm's
(1)   31/   1E488 :                     DacIns_CdSnare:
(1)   32/   1E488 : (MACRO)             	gSmpl "sound/instr/smpl/cd_snare.wav",0
(1)   32/   1E488 :                     .start
(1)   32/   1E488 : FA19 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   32/   1E48B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/   1E48E :                             binclude "sound/instr/smpl/cd_snare.wav",$2C     ; actual data
(1)   32/   1FE82 :                     .end
(1)   32/   1FE82 :                             align 4         ; align 4 for pwm's
(1)   33/   1FE84 :                     DacIns_SaurKick:
(1)   34/   1FE84 : (MACRO)             	gSmpl "sound/instr/smpl/sauron_kick.wav",0
(1)   34/   1FE84 :                     .start
(1)   34/   1FE84 : 940F 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   34/   1FE87 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/   1FE8A :                             binclude "sound/instr/smpl/sauron_kick.wav",$2C     ; actual data
(1)   34/   20E18 :                     .end
(1)   34/   20E18 :                             align 4         ; align 4 for pwm's
(1)   35/   20E18 :                     DacIns_SaurSnare:
(1)   36/   20E18 : (MACRO)             	gSmpl "sound/instr/smpl/sauron_snare.wav",0
(1)   36/   20E18 :                     .start
(1)   36/   20E18 : E60C 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   36/   20E1B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/   20E1E :                             binclude "sound/instr/smpl/sauron_snare.wav",$2C     ; actual data
(1)   36/   21AFE :                     .end
(1)   36/   21AFE :                             align 4         ; align 4 for pwm's
(1)   37/   21B00 :                     DacIns_String1:
(1)   38/   21B00 : (MACRO)             	gSmpl "sound/instr/smpl/string_1.wav",0
(1)   38/   21B00 :                     .start
(1)   38/   21B00 : 5C48 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   38/   21B03 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/   21B06 :                             binclude "sound/instr/smpl/string_1.wav",$2C     ; actual data
(1)   38/   2635C :                     .end
(1)   38/   2635C :                             align 4         ; align 4 for pwm's
(1)   39/   2635C :                     DacIns_LowString:
(1)   40/   2635C : (MACRO)             	gSmpl "sound/instr/smpl/lowstring.wav",1200
(1)   40/   2635C :                     .start
(1)   40/   2635C : 8A8B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   40/   2635F : B004 00                     dc.b ((1200)&$FF),(((1200)>>8)&$FF),(((1200)>>16)&$FF)
(1)   40/   26362 :                             binclude "sound/instr/smpl/lowstring.wav",$2C     ; actual data
(1)   40/   2EEE6 :                     .end
(1)   40/   2EEE6 :                             align 4         ; align 4 for pwm's
(1)   41/   2EEE8 :                     
(1)   42/   2EEE8 :                     ; --------------------------------------------------------
(1)   43/   2EEE8 :                     ; FM instruments/patches
(1)   44/   2EEE8 :                     ; --------------------------------------------------------
(1)   45/   2EEE8 :                     
(1)   46/   2EEE8 :                     ; Sizes
(1)   47/   2EEE8 :                     ; Normal FM ins: $20
(1)   48/   2EEE8 :                     ; Special FM ins: $28
(1)   49/   2EEE8 :                     ;
(1)   50/   2EEE8 :                     FmIns_Fm3_OpenHat:
(1)   51/   2EEE8 :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   52/   2EF10 :                     FmIns_Fm3_ClosedHat:
(1)   53/   2EF10 :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   54/   2EF38 :                     FmIns_Fm3_Explosion:
(1)   55/   2EF38 :                     		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   56/   2EF60 :                     
(1)   57/   2EF60 :                     FmIns_Guitar_gem:
(1)   58/   2EF60 :                     		binclude "sound/instr/fm/guitar_gem.gsx",$2478,$20
(1)   59/   2EF80 :                     Fmins_Guitar_Heavy:
(1)   60/   2EF80 :                     		binclude "sound/instr/fm/guitar_heavy.gsx",$2478,$20
(1)   61/   2EFA0 :                     Fmins_Guitar_puy:
(1)   62/   2EFA0 :                     		binclude "sound/instr/fm/guitar_puy.gsx",$2478,$20
(1)   63/   2EFC0 :                     Fmins_Guitar_puy_2:
(1)   64/   2EFC0 :                     		binclude "sound/instr/fm/guitar_puy_2.gsx",$2478,$20
(1)   65/   2EFE0 :                     FmIns_DrumKick_gem:
(1)   66/   2EFE0 :                     		binclude "sound/instr/fm/drum_kick_gem.gsx",$2478,$20
(1)   67/   2F000 :                     
(1)   68/   2F000 :                     
(1)   69/   2F000 :                     ; FmIns_DrumKick:
(1)   70/   2F000 :                     ; 		binclude "sound/instr/fm/drum_kick.gsx",$2478,$20
(1)   71/   2F000 :                     ; FmIns_DrumSnare:
(1)   72/   2F000 :                     ; 		binclude "sound/instr/fm/drum_snare.gsx",$2478,$20
(1)   73/   2F000 :                     ; ; ; FmIns_DrumCloseHat:
(1)   74/   2F000 :                     ; ; ; 		binclude "sound/instr/fm/drum_closehat.gsx",$2478,$20
(1)   75/   2F000 :                     FmIns_PianoM1:
(1)   76/   2F000 :                     		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)   77/   2F020 :                     ; FmIns_PianoM116:
(1)   78/   2F020 :                     ; 		binclude "sound/instr/fm/piano_m116.gsx",$2478,$20
(1)   79/   2F020 :                     
(1)   80/   2F020 :                     ; ;
(1)   81/   2F020 :                     ; ; ; FmIns_Bass_gum:
(1)   82/   2F020 :                     ; ; ; 		binclude "sound/instr/fm/bass_gum.gsx",$2478,$20
(1)   83/   2F020 :                     FmIns_Bass_calm:
(1)   84/   2F020 :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   85/   2F040 :                     FmIns_Bass_heavy:
(1)   86/   2F040 :                     		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)   87/   2F060 :                     ; FmIns_Bass_ambient:
(1)   88/   2F060 :                     ; 		binclude "sound/instr/fm/bass_ambient.gsx",$2478,$20
(1)   89/   2F060 :                     ; ; ; FmIns_Brass_gummy:
(1)   90/   2F060 :                     ; ; ; 		binclude "sound/instr/fm/brass_gummy.gsx",$2478,$20
(1)   91/   2F060 :                     ; ; ; FmIns_Flaute_1:
(1)   92/   2F060 :                     ; ; ; 		binclude "sound/instr/fm/flaute_1.gsx",$2478,$20
(1)   93/   2F060 :                     ; FmIns_Bass_1:
(1)   94/   2F060 :                     ; 		binclude "sound/instr/fm/bass_1.gsx",$2478,$20
(1)   95/   2F060 :                     ; FmIns_Bass_2:
(1)   96/   2F060 :                     ; 		binclude "sound/instr/fm/bass_2.gsx",$2478,$20
(1)   97/   2F060 :                     FmIns_Bass_3:
(1)   98/   2F060 :                     		binclude "sound/instr/fm/bass_3.gsx",$2478,$20
(1)   99/   2F080 :                     ; FmIns_Bass_4:
(1)  100/   2F080 :                     ; 		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)  101/   2F080 :                     ; FmIns_Bass_5:
(1)  102/   2F080 :                     ; 		binclude "sound/instr/fm/bass_5.gsx",$2478,$20
(1)  103/   2F080 :                     ; FmIns_Bass_6:
(1)  104/   2F080 :                     ; 		binclude "sound/instr/fm/bass_6.gsx",$2478,$20
(1)  105/   2F080 :                     FmIns_Bass_groove:
(1)  106/   2F080 :                     		binclude "sound/instr/fm/bass_groove.gsx",$2478,$20
(1)  107/   2F0A0 :                     FmIns_Bass_groove_2:
(1)  108/   2F0A0 :                     		binclude "sound/instr/fm/bass_groove_2.gsx",$2478,$20
(1)  109/   2F0C0 :                     FmIns_Bass_groove_gem:
(1)  110/   2F0C0 :                     		binclude "sound/instr/fm/bass_groove_gem.gsx",$2478,$20
(1)  111/   2F0E0 :                     FmIns_Bass_italo:
(1)  112/   2F0E0 :                     		binclude "sound/instr/fm/bass_italo.gsx",$2478,$20
(1)  113/   2F100 :                     FmIns_Bass_kon:
(1)  114/   2F100 :                     		binclude "sound/instr/fm/bass_kon.gsx",$2478,$20
(1)  115/   2F120 :                     
(1)  116/   2F120 :                     ; FmIns_Bass_mecan:
(1)  117/   2F120 :                     ; 		binclude "sound/instr/fm/bass_mecan.gsx",$2478,$20
(1)  118/   2F120 :                     ;
(1)  119/   2F120 :                     ; ; ; FmIns_Bass_heavy:
(1)  120/   2F120 :                     ; ; ; 		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)  121/   2F120 :                     ; ; ; FmIns_Bass_metal:
(1)  122/   2F120 :                     ; ; ; 		binclude "sound/instr/fm/bass_metal.gsx",$2478,$20
(1)  123/   2F120 :                     FmIns_Bass_synth:
(1)  124/   2F120 :                     		binclude "sound/instr/fm/bass_synth_1.gsx",$2478,$20
(1)  125/   2F140 :                     ; FmIns_Guitar_1:
(1)  126/   2F140 :                     ; 		binclude "sound/instr/fm/guitar_1.gsx",$2478,$20
(1)  127/   2F140 :                     ; ; ; FmIns_Horn_1:
(1)  128/   2F140 :                     ; ; ; 		binclude "sound/instr/fm/horn_1.gsx",$2478,$20
(1)  129/   2F140 :                     FmIns_Organ_M1:
(1)  130/   2F140 :                     		binclude "sound/instr/fm/organ_m1.gsx",$2478,$20
(1)  131/   2F160 :                     ; ; ; FmIns_Bass_Beach:
(1)  132/   2F160 :                     ; ; ; 		binclude "sound/instr/fm/bass_beach.gsx",$2478,$20
(1)  133/   2F160 :                     ; ; ; FmIns_Bass_Beach_2:
(1)  134/   2F160 :                     ; ; ; 		binclude "sound/instr/fm/bass_beach_2.gsx",$2478,$20
(1)  135/   2F160 :                     ; ; ; FmIns_Brass_Cave:
(1)  136/   2F160 :                     ; ; ; 		binclude "sound/instr/fm/brass_cave.gsx",$2478,$20
(1)  137/   2F160 :                     ; ; FmIns_Brass_Gem:
(1)  138/   2F160 :                     ; ; 		binclude "sound/instr/fm/brass_gem.gsx",$2478,$20
(1)  139/   2F160 :                     ; ; FmIns_Piano_Small:
(1)  140/   2F160 :                     ; ; 		binclude "sound/instr/fm/piano_small.gsx",$2478,$20
(1)  141/   2F160 :                     ; ; FmIns_Piano:
(1)  142/   2F160 :                     ; ; 		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)  143/   2F160 :                     FmIns_Trumpet_1:
(1)  144/   2F160 :                     		binclude "sound/instr/fm/trumpet_1.gsx",$2478,$20
(1)  145/   2F180 :                     FmIns_Trumpet_2:
(1)  146/   2F180 :                     		binclude "sound/instr/fm/trumpet_2.gsx",$2478,$20
(1)  147/   2F1A0 :                     FmIns_Trumpet_kon:
(1)  148/   2F1A0 :                     		binclude "sound/instr/fm/trumpet_kon.gsx",$2478,$20
(1)  149/   2F1C0 :                     FmIns_Trumpet_puy:
(1)  150/   2F1C0 :                     		binclude "sound/instr/fm/trumpet_puy.gsx",$2478,$20
(1)  151/   2F1E0 :                     FmIns_Trumpet_carnival:
(1)  152/   2F1E0 :                     		binclude "sound/instr/fm/trumpet_carnivl.gsx",$2478,$20
(1)  153/   2F200 :                     
(1)  154/   2F200 :                     ; ; ; FmIns_Bell_Glass:
(1)  155/   2F200 :                     ; ; ; 		binclude "sound/instr/fm/bell_glass.gsx",$2478,$20
(1)  156/   2F200 :                     ; ; ; FmIns_Marimba_1:
(1)  157/   2F200 :                     ; ; ; 		binclude "sound/instr/fm/marimba_1.gsx",$2478,$20
(1)  158/   2F200 :                     
(1)  159/   2F200 :                     FmIns_Ambient_dark:
(1)  160/   2F200 :                     		binclude "sound/instr/fm/ambient_dark.gsx",$2478,$20
(1)  161/   2F220 :                     FmIns_Ambient_spook:
(1)  162/   2F220 :                     		binclude "sound/instr/fm/ambient_spook.gsx",$2478,$20
(1)  163/   2F240 :                     ; FmIns_Ambient_3:
(1)  164/   2F240 :                     ; 		binclude "sound/instr/fm/ambient_3.gsx",$2478,$20
(1)  165/   2F240 :                     FmIns_Ding_toy:
(1)  166/   2F240 :                     		binclude "sound/instr/fm/ding_toy.gsx",$2478,$20
(1)  167/   2F260 :                     FmIns_Bell_China:
(1)  168/   2F260 :                     		binclude "sound/instr/fm/bell_china.gsx",$2478,$20
(1)  169/   2F280 :                     FmIns_Brass_Eur:
(1)  170/   2F280 :                     		binclude "sound/instr/fm/brass_eur.gsx",$2478,$20
(1)  171/   2F2A0 :                     FmIns_Brass_Puy:
(1)  172/   2F2A0 :                     		binclude "sound/instr/fm/brass_puy.gsx",$2478,$20
(1)  173/   2F2C0 :                     FmIns_Flaute_cave:
(1)  174/   2F2C0 :                     		binclude "sound/instr/fm/flaute_cave.gsx",$2478,$20
(1)  175/   2F2E0 :                     FmIns_Banjo_puy:
(1)  176/   2F2E0 :                     		binclude "sound/instr/fm/banjo_puy.gsx",$2478,$20
(1)  177/   2F300 :                     FmIns_Violin_gem:
(1)  178/   2F300 :                     		binclude "sound/instr/fm/violin_gem.gsx",$2478,$20
(1)  179/   2F320 :                     
(1)  180/   2F320 :                     
      59/   2F320 :                     
      60/   2F320 :                     ; ====================================================================
      61/   2F320 :                     ; ----------------------------------------------------------------
      62/   2F320 :                     ; 68k code-sections for RAM
      63/   2F320 :                     ; ----------------------------------------------------------------
      64/   2F320 :                     
      65/   2F320 :                     RamCode_Default:
      66/  FF1BE8 :                     		phase RAMCODE_USER
      67/  FF1BE8 :                     		include "code/default.asm"
(1)    1/  FF1BE8 :                     ; ====================================================================
(1)    2/  FF1BE8 :                     ; ----------------------------------------------------------------
(1)    3/  FF1BE8 :                     ; Default gamemode
(1)    4/  FF1BE8 :                     ; ----------------------------------------------------------------
(1)    5/  FF1BE8 :                     
(1)    6/  FF1BE8 :                     ; ====================================================================
(1)    7/  FF1BE8 :                     ; ------------------------------------------------------
(1)    8/  FF1BE8 :                     ; Variables
(1)    9/  FF1BE8 :                     ; ------------------------------------------------------
(1)   10/  FF1BE8 :                     
(1)   11/  FF1BE8 : =$4000              var_MoveSpd	equ	$4000
(1)   12/  FF1BE8 : =$3                 MAX_TSTTRKS	equ	3
(1)   13/  FF1BE8 : =$5                 MAX_TSTENTRY	equ	5
(1)   14/  FF1BE8 :                     
(1)   15/  FF1BE8 :                     ; ====================================================================
(1)   16/  FF1BE8 :                     ; ------------------------------------------------------
(1)   17/  FF1BE8 :                     ; Structs
(1)   18/  FF1BE8 :                     ; ------------------------------------------------------
(1)   19/  FF1BE8 :                     
(1)   20/  FF1BE8 :                     ; 		struct 0
(1)   21/  FF1BE8 :                     ; strc_xpos	ds.w 1
(1)   22/  FF1BE8 :                     ; strc_ypos	ds.w 1
(1)   23/  FF1BE8 :                     ; 		finish
(1)   24/  FF1BE8 :                     
(1)   25/  FF1BE8 :                     ; ====================================================================
(1)   26/  FF1BE8 :                     ; ------------------------------------------------------
(1)   27/  FF1BE8 :                     ; This mode's RAM
(1)   28/  FF1BE8 :                     ; ------------------------------------------------------
(1)   29/  FF1BE8 :                     
(1)   30/  FF1BE8 : (MACRO)             		struct RAM_ModeBuff
(1)   30/  FF1BE8 : =$FF1BE8            GLBL_LASTPC     set *
(1)   30/   2F320 :                                     dephase
(1)   30/   2F320 : =$2F320             GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFF8800 :                                     phase RAM_MODEBUFF
(1)   31/FFFFFFFFFFFF8800 :                     RAM_EmiPosX	ds.l 1
(1)   32/FFFFFFFFFFFF8804 :                     RAM_EmiPosY	ds.l 1
(1)   33/FFFFFFFFFFFF8808 :                     RAM_EmiMoveX	ds.l 1
(1)   34/FFFFFFFFFFFF880C :                     RAM_EmiMoveY	ds.l 1
(1)   35/FFFFFFFFFFFF8810 :                     RAM_EmiJumpSpd	ds.l 1
(1)   36/FFFFFFFFFFFF8814 :                     RAM_EmiJumpY	ds.l 1
(1)   37/FFFFFFFFFFFF8818 :                     RAM_EmiFlags	ds.w 1
(1)   38/FFFFFFFFFFFF881A :                     RAM_EmiBlockX	ds.w 1
(1)   39/FFFFFFFFFFFF881C :                     RAM_EmiBlockY	ds.w 1
(1)   40/FFFFFFFFFFFF881E :                     RAM_EmiChar	ds.w 1
(1)   41/FFFFFFFFFFFF8820 :                     RAM_EmiAnim	ds.w 1
(1)   42/FFFFFFFFFFFF8822 :                     RAM_EmiUpd	ds.w 1
(1)   43/FFFFFFFFFFFF8824 :                     RAM_EmiHide	ds.w 1
(1)   44/FFFFFFFFFFFF8826 :                     RAM_ShakeMe	ds.w 1
(1)   45/FFFFFFFFFFFF8828 :                     RAM_BoardUpd	ds.w 1
(1)   46/FFFFFFFFFFFF882A :                     RAM_CurrType	ds.w 1
(1)   47/FFFFFFFFFFFF882C :                     RAM_BgCamera	ds.w 1
(1)   48/FFFFFFFFFFFF882E :                     RAM_Xpos	ds.w 1
(1)   49/FFFFFFFFFFFF8830 :                     RAM_CurrSelc	ds.w 1
(1)   50/FFFFFFFFFFFF8832 :                     RAM_CurrIndx	ds.w 1
(1)   51/FFFFFFFFFFFF8834 :                     RAM_CurrTrack	ds.w 1
(1)   52/FFFFFFFFFFFF8836 :                     RAM_CurrTicks	ds.w 1
(1)   53/FFFFFFFFFFFF8838 :                     RAM_CurrTempo	ds.w 1
(1)   54/FFFFFFFFFFFF883A :                     RAM_WindowCurr	ds.w 1
(1)   55/FFFFFFFFFFFF883C :                     RAM_WindowNew	ds.w 1
(1)   56/FFFFFFFFFFFF883E : 24                  RAM_BoardBlocks	dc.b 6*6
(1)   57/FFFFFFFFFFFF883F :                     sizeof_mdglbl	ds.l 0
(1)   58/FFFFFFFFFFFF8840 : (MACRO)             		finish
(1)   58/FFFFFFFFFFFF8800 :                                     !org GLBL_LASTORG
(1)   58/  FF1BE8 :                                     phase GLBL_LASTPC
(1)   59/  FF1BE8 :                     
(1)   60/  FF1BE8 :                     ; ====================================================================
(1)   61/  FF1BE8 :                     ; ------------------------------------------------------
(1)   62/  FF1BE8 :                     ; Code start
(1)   63/  FF1BE8 :                     ; ------------------------------------------------------
(1)   64/  FF1BE8 :                     
(1)   65/  FF1BE8 :                     thisCode_Top:
(1)   66/  FF1BE8 : 46FC 2700           		move.w	#$2700,sr
(1)   67/  FF1BEC : 6100 E45A           		bsr	Sound_init
(1)   68/  FF1BF0 : 6100 E68C           		bsr	Video_init
(1)   69/  FF1BF4 : 6100 FC4E           		bsr	System_Init
(1)   70/  FF1BF8 : 61BE                		bsr	Mode_Init
(1)   71/  FF1BFA : 6100 E85A           		bsr	Video_PrintInit
(1)   72/  FF1BFE : 31FC 0000 882A      		move.w	#0,(RAM_CurrType).w
(1)   73/  FF1C04 : 31FC 00D0 8838      		move.w	#208,(RAM_CurrTempo).w
(1)   74/  FF1C0A : 303C 9200           		move.w	#$9200,d0
(1)   75/  FF1C0E : 31C0 883A           		move.w	d0,(RAM_WindowCurr).w
(1)   76/  FF1C12 : 31C0 883C           		move.w	d0,(RAM_WindowNew).w
(1)   77/  FF1C16 :                     
(1)   78/  FF1C16 :                     	; Default Emilie vars
(1)   79/  FF1C16 : 303C 0020           		move.w	#$20,d0
(1)   80/  FF1C1A : 31C0 8800           		move.w	d0,(RAM_EmiPosX).w
(1)   81/  FF1C1E : 31C0 8808           		move.w	d0,(RAM_EmiMoveX).w
(1)   82/  FF1C22 : 303C 0042           		move.w	#$42,d0
(1)   83/  FF1C26 : 31C0 8804           		move.w	d0,(RAM_EmiPosY).w
(1)   84/  FF1C2A : 31C0 880C           		move.w	d0,(RAM_EmiMoveY).w
(1)   85/  FF1C2E : 31FC FFFF 881A      		move.w	#-1,(RAM_EmiBlockX).w
(1)   86/  FF1C34 : 31FC 0002 881C      		move.w	#2,(RAM_EmiBlockY).w
(1)   87/  FF1C3A : 31FC 0001 8822      		move.w	#1,(RAM_EmiUpd).w
(1)   88/  FF1C40 :                     
(1)   89/  FF1C40 : 203C 0004 0000      		move.l	#ART_TESTBOARD,d0
(1)   90/  FF1C46 : 323C 0300           		move.w	#ART_TESTBOARD_e-ART_TESTBOARD,d1
(1)   91/  FF1C4A : 343C 0001           		move.w	#1,d2
(1)   92/  FF1C4E : 6100 EAF8           		bsr	Video_LoadArt
(1)   93/  FF1C52 : 41FA 0986           		lea	MAP_TESTBOARD(pc),a0
(1)   94/  FF1C56 : 203C 0000 0000      		move.l	#locate(0,0,0),d0
(1)   95/  FF1C5C : 223C 0027 001B      		move.l	#mapsize(320,224),d1
(1)   96/  FF1C62 : 343C 2001           		move.w	#1|$2000,d2
(1)   97/  FF1C66 : 6100 E6E4           		bsr	Video_LoadMap
(1)   98/  FF1C6A : 41FA 07DA           		lea	str_Title(pc),a0		; Main title
(1)   99/  FF1C6E : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  100/  FF1C74 : 6100 E804           		bsr	Video_Print
(1)  101/  FF1C78 : 41FA 0866           		lea	str_Gema(pc),a0			; GEMA tester text on WINDOW
(1)  102/  FF1C7C : 203C 0002 0202      		move.l	#locate(2,2,2),d0
(1)  103/  FF1C82 : 6100 E7F6           		bsr	Video_Print
(1)  104/  FF1C86 : 13FC 0080 00A1 512E 		move.b	#$80,(sysmars_reg+comm14)	; Unlock MASTER
(1)  105/  FF1C8E :                     
(1)  106/  FF1C8E : 41FA 0920           		lea	PAL_EMI(pc),a0
(1)  107/  FF1C92 : 7000                		moveq	#0,d0
(1)  108/  FF1C94 : 323C 000F           		move.w	#$F,d1
(1)  109/  FF1C98 : 6100 E688           		bsr	Video_LoadPal
(1)  110/  FF1C9C : 41FA 0928           		lea	PAL_TESTBOARD(pc),a0		; ON palette
(1)  111/  FF1CA0 : 7010                		moveq	#$10,d0
(1)  112/  FF1CA2 : 323C 000F           		move.w	#$F,d1
(1)  113/  FF1CA6 : 6100 E67A           		bsr	Video_LoadPal
(1)  114/  FF1CAA :                     
(1)  115/  FF1CAA : 08F9 0006 FFFF 91A3 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l	; Enable display
(1)  116/  FF1CB2 : 6100 E64E           		bsr	Video_Update
(1)  117/  FF1CB6 :                     
(1)  118/  FF1CB6 :                     ; 		move.b	(sysmars_reg+comm15),d7
(1)  119/  FF1CB6 :                     ; 		or.w	#1,d7
(1)  120/  FF1CB6 :                     ; 		move.b	d7,(sysmars_reg+comm15)
(1)  121/  FF1CB6 :                     
(1)  122/  FF1CB6 : 41FA 03C8           		lea	MasterTrkList+$10(pc),a0
(1)  123/  FF1CBA : 7000                		moveq	#0,d0
(1)  124/  FF1CBC : 323C 0007           		move.w	#7,d1
(1)  125/  FF1CC0 : 7400                		moveq	#0,d2
(1)  126/  FF1CC2 : 363C 0000           		move.w	#0,d3
(1)  127/  FF1CC6 : 6100 E502           		bsr	Sound_TrkPlay
(1)  128/  FF1CCA :                     
(1)  129/  FF1CCA :                     ; ====================================================================
(1)  130/  FF1CCA :                     ; ------------------------------------------------------
(1)  131/  FF1CCA :                     ; Loop
(1)  132/  FF1CCA :                     ; ------------------------------------------------------
(1)  133/  FF1CCA :                     
(1)  134/  FF1CCA :                     .loop:
(1)  135/  FF1CCA : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  136/  FF1CD0 : 0804 0003           		btst	#bitVint,d4
(1)  137/  FF1CD4 : 67F4                		beq.s	.loop
(1)  138/  FF1CD6 : 6100 FBEE           		bsr	System_Input
(1)  139/  FF1CDA :                     
(1)  140/  FF1CDA :                     	; Visual updates go here
(1)  141/  FF1CDA : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    97F2                
(1)  142/  FF1CE4 : 6100 0608           		bsr	Emilie_MkSprite
(1)  143/  FF1CE8 : 6100 04DA           		bsr	Board_SwapPos
(1)  144/  FF1CEC : 23FC 7C00 0003 00C0 		move.l	#$7C000003,(vdp_ctrl).l
                    0004                
(1)  145/  FF1CF6 : 2039 FFFF 882E      		move.l	(RAM_Xpos).l,d0
(1)  146/  FF1CFC : 23C0 00C0 0000      		move.l	d0,(vdp_data).l
(1)  147/  FF1D02 : 23FC 4000 0010 00C0 		move.l	#$40000010,(vdp_ctrl).l
                    0004                
(1)  148/  FF1D0C : 3638 8826           		move.w	(RAM_ShakeMe).w,d3
(1)  149/  FF1D10 : 3803                		move.w	d3,d4
(1)  150/  FF1D12 : E64B                		lsr.w	#3,d3
(1)  151/  FF1D14 : 0804 0001           		btst	#1,d4
(1)  152/  FF1D18 : 6602                		bne.s	.midshk
(1)  153/  FF1D1A : 4443                		neg.w	d3
(1)  154/  FF1D1C :                     .midshk:
(1)  155/  FF1D1C : 33C3 00C0 0000      		move.w	d3,(vdp_data).l
(1)  156/  FF1D22 :                     
(1)  157/  FF1D22 : 3438 883A           		move.w	(RAM_WindowCurr).w,d2
(1)  158/  FF1D26 : 3238 883C           		move.w	(RAM_WindowNew).w,d1
(1)  159/  FF1D2A : B242                		cmp.w	d2,d1
(1)  160/  FF1D2C : 6718                		beq.s	.same_w
(1)  161/  FF1D2E : 303C 0001           		move.w	#1,d0
(1)  162/  FF1D32 : 9242                		sub.w	d2,d1
(1)  163/  FF1D34 : 6A04                		bpl.s	.revers
(1)  164/  FF1D36 : 303C FFFF           		move.w	#-1,d0
(1)  165/  FF1D3A :                     .revers:
(1)  166/  FF1D3A : D178 883A           		add.w	d0,(RAM_WindowCurr).w
(1)  167/  FF1D3E : 33F8 883A 00C0 0004 		move.w	(RAM_WindowCurr).w,(vdp_ctrl).l
(1)  168/  FF1D46 :                     .same_w:
(1)  169/  FF1D46 : 3839 00C0 0004      .inside:	move.w	(vdp_ctrl),d4
(1)  170/  FF1D4C : 0804 0003           		btst	#bitVint,d4
(1)  171/  FF1D50 : 66F4                		bne.s	.inside
(1)  172/  FF1D52 :                     
(1)  173/  FF1D52 :                     
(1)  174/  FF1D52 :                     	; Main loop is back
(1)  175/  FF1D52 : 3038 882A           		move.w	(RAM_CurrType).w,d0
(1)  176/  FF1D56 : C07C 001F           		and.w	#%11111,d0
(1)  177/  FF1D5A : D040                		add.w	d0,d0
(1)  178/  FF1D5C : D040                		add.w	d0,d0
(1)  179/  FF1D5E : 4EBB 0006           		jsr	.list(pc,d0.w)
(1)  180/  FF1D62 : 6000 FF66           		bra	.loop
(1)  181/  FF1D66 :                     
(1)  182/  FF1D66 :                     ; ====================================================================
(1)  183/  FF1D66 :                     ; ------------------------------------------------------
(1)  184/  FF1D66 :                     ; Mode sections
(1)  185/  FF1D66 :                     ; ------------------------------------------------------
(1)  186/  FF1D66 :                     
(1)  187/  FF1D66 :                     .list:
(1)  188/  FF1D66 : 6000 000A           		bra.w	.mode0
(1)  189/  FF1D6A : 6000 0156           		bra.w	.mode1
(1)  190/  FF1D6E : 6000 0002           		bra.w	.mode0
(1)  191/  FF1D72 :                     
(1)  192/  FF1D72 :                     ; --------------------------------------------------
(1)  193/  FF1D72 :                     ; Mode 0
(1)  194/  FF1D72 :                     ; --------------------------------------------------
(1)  195/  FF1D72 :                     
(1)  196/  FF1D72 :                     .mode0:
(1)  197/  FF1D72 : 4A78 882A           		tst.w	(RAM_CurrType).w
(1)  198/  FF1D76 : 6B12                		bmi	.mode0_loop
(1)  199/  FF1D78 : 0078 8000 882A      		or.w	#$8000,(RAM_CurrType).w
(1)  200/  FF1D7E : 31FC 0000 8824      		move.w	#0,(RAM_EmiHide).w
(1)  201/  FF1D84 : 31FC 0001 8822      		move.w	#1,(RAM_EmiUpd).w
(1)  202/  FF1D8A :                     
(1)  203/  FF1D8A :                     ; Mode 0 mainloop
(1)  204/  FF1D8A :                     .mode0_loop:
(1)  205/  FF1D8A : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  206/  FF1D8E : E04F                		lsr.w	#8,d7
(1)  207/  FF1D90 : 0807 0003           		btst	#bitJoyMode,d7
(1)  208/  FF1D94 : 670C                		beq.s	.no_mode0
(1)  209/  FF1D96 : 31FC 0001 882A      		move.w	#1,(RAM_CurrType).w
(1)  210/  FF1D9C : 31FC 920D 883C      		move.w	#$920D,(RAM_WindowNew).w
(1)  211/  FF1DA2 :                     .no_mode0:
(1)  212/  FF1DA2 :                     
(1)  213/  FF1DA2 :                     ; 		lea	str_TempVal(pc),a0		; Main title
(1)  214/  FF1DA2 :                     ; 		move.l	#locate(0,0,0),d0
(1)  215/  FF1DA2 :                     ; 		bsr	Video_Print
(1)  216/  FF1DA2 :                     
(1)  217/  FF1DA2 :                     	; BOOM TEST
(1)  218/  FF1DA2 :                     ; 		move.w	(Controller_1+on_press),d7
(1)  219/  FF1DA2 :                     ; 		btst	#bitJoyA,d7
(1)  220/  FF1DA2 :                     ; 		beq.s	.noah
(1)  221/  FF1DA2 :                     ; 		move.w	#$20,(RAM_ShakeMe).w
(1)  222/  FF1DA2 :                     ; 		moveq	#0,d2
(1)  223/  FF1DA2 :                     ; 		bsr	PlayThisSfx
(1)  224/  FF1DA2 :                     ; .noah:
(1)  225/  FF1DA2 :                     
(1)  226/  FF1DA2 :                     	; Shake explosion
(1)  227/  FF1DA2 : 3E38 8826           		move.w	(RAM_ShakeMe),d7
(1)  228/  FF1DA6 : 4A78 8826           		tst.w	(RAM_ShakeMe).w
(1)  229/  FF1DAA : 671C                		beq.s	.no_shake
(1)  230/  FF1DAC : 0478 0001 8826      		sub.w	#1,(RAM_ShakeMe).w
(1)  231/  FF1DB2 : 31FC 0001 8822      		move.w	#1,(RAM_EmiUpd).w
(1)  232/  FF1DB8 : 08F8 0000 8828      		bset	#0,(RAM_BoardUpd).w
(1)  233/  FF1DBE : 4A78 8826           		tst.w	(RAM_ShakeMe).w
(1)  234/  FF1DC2 : 6604                		bne.s	.no_shake
(1)  235/  FF1DC4 : 6100 036E           		bsr	Board_Reset
(1)  236/  FF1DC8 :                     .no_shake:
(1)  237/  FF1DC8 :                     ; 		bset	#0,(RAM_BoardUpd).w
(1)  238/  FF1DC8 :                     
(1)  239/  FF1DC8 :                     	; Emilie player input
(1)  240/  FF1DC8 : 1E38 8818           		move.b	(RAM_EmiFlags).w,d7
(1)  241/  FF1DCC : 6100 04A2           		bsr	Emilie_Move
(1)  242/  FF1DD0 : 0838 0007 8818      		btst	#7,(RAM_EmiFlags).w
(1)  243/  FF1DD6 : 6600 00E8           		bne	.lockcontrl
(1)  244/  FF1DDA : 0807 0007           		btst	#7,d7
(1)  245/  FF1DDE : 673E                		beq.s	.after
(1)  246/  FF1DE0 : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  247/  FF1DE4 : 3E38 881A           		move.w	(RAM_EmiBlockX).w,d7
(1)  248/  FF1DE8 : 8E78 881C           		or.w	(RAM_EmiBlockY).w,d7
(1)  249/  FF1DEC : 6B30                		bmi.s	.after
(1)  250/  FF1DEE : 3038 881A           		move.w	(RAM_EmiBlockX).w,d0
(1)  251/  FF1DF2 : B07C 0006           		cmp.w	#6,d0
(1)  252/  FF1DF6 : 6C26                		bge.s	.after
(1)  253/  FF1DF8 : 3238 881C           		move.w	(RAM_EmiBlockY).w,d1
(1)  254/  FF1DFC : B27C 0006           		cmp.w	#6,d1
(1)  255/  FF1E00 : 6C1C                		bge.s	.after
(1)  256/  FF1E02 : C2FC 0006           		mulu.w	#6,d1
(1)  257/  FF1E06 : D041                		add.w	d1,d0
(1)  258/  FF1E08 : DCC0                		adda	d0,a6
(1)  259/  FF1E0A : 0856 0000           		bchg	#0,(a6)
(1)  260/  FF1E0E : 08F8 0000 8828      		bset	#0,(RAM_BoardUpd).w
(1)  261/  FF1E14 : 7401                		moveq	#1,d2
(1)  262/  FF1E16 : 6100 02A8           		bsr	PlayThisSfx
(1)  263/  FF1E1A : 6100 02B4           		bsr	Board_CheckMatch
(1)  264/  FF1E1E :                     .after:
(1)  265/  FF1E1E :                     
(1)  266/  FF1E1E :                     	; UDLR
(1)  267/  FF1E1E : 383C 0000           		move.w	#0,d4
(1)  268/  FF1E22 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  269/  FF1E26 : 0807 0001           		btst	#bitJoyDown,d7
(1)  270/  FF1E2A : 671A                		beq.s	.noz_down
(1)  271/  FF1E2C : 0678 0018 880C      		add.w	#$18,(RAM_EmiMoveY).w
(1)  272/  FF1E32 : 0678 0001 881C      		add.w	#1,(RAM_EmiBlockY).w
(1)  273/  FF1E38 : 31C4 881E           		move.w	d4,(RAM_EmiChar).w
(1)  274/  FF1E3C : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    8810                
(1)  275/  FF1E46 :                     .noz_down:
(1)  276/  FF1E46 : 383C 0004           		move.w	#4,d4
(1)  277/  FF1E4A : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  278/  FF1E4E : 0807 0000           		btst	#bitJoyUp,d7
(1)  279/  FF1E52 : 671A                		beq.s	.noz_up
(1)  280/  FF1E54 : 0678 FFE8 880C      		add.w	#-$18,(RAM_EmiMoveY).w
(1)  281/  FF1E5A : 0478 0001 881C      		sub.w	#1,(RAM_EmiBlockY).w
(1)  282/  FF1E60 : 31C4 881E           		move.w	d4,(RAM_EmiChar).w
(1)  283/  FF1E64 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    8810                
(1)  284/  FF1E6E :                     .noz_up:
(1)  285/  FF1E6E : 383C 0008           		move.w	#8,d4
(1)  286/  FF1E72 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  287/  FF1E76 : 0807 0003           		btst	#bitJoyRight,d7
(1)  288/  FF1E7A : 671A                		beq.s	.noz_r
(1)  289/  FF1E7C : 0678 0020 8808      		add.w	#$20,(RAM_EmiMoveX).w
(1)  290/  FF1E82 : 0678 0001 881A      		add.w	#1,(RAM_EmiBlockX).w
(1)  291/  FF1E88 : 31C4 881E           		move.w	d4,(RAM_EmiChar).w
(1)  292/  FF1E8C : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    8810                
(1)  293/  FF1E96 :                     .noz_r:
(1)  294/  FF1E96 : 383C 000C           		move.w	#$C,d4
(1)  295/  FF1E9A : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  296/  FF1E9E : 0807 0002           		btst	#bitJoyLeft,d7
(1)  297/  FF1EA2 : 671A                		beq.s	.noz_l
(1)  298/  FF1EA4 : 0678 FFE0 8808      		add.w	#-$20,(RAM_EmiMoveX).w
(1)  299/  FF1EAA : 0478 0001 881A      		sub.w	#1,(RAM_EmiBlockX).w
(1)  300/  FF1EB0 : 31C4 881E           		move.w	d4,(RAM_EmiChar).w
(1)  301/  FF1EB4 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    8810                
(1)  302/  FF1EBE :                     .noz_l:
(1)  303/  FF1EBE : 4E75                		rts
(1)  304/  FF1EC0 :                     
(1)  305/  FF1EC0 :                     .lockcontrl:
(1)  306/  FF1EC0 :                     ; 		add.w	#6,(RAM_EmiJumpTan).w
(1)  307/  FF1EC0 : 4E75                		rts
(1)  308/  FF1EC2 :                     
(1)  309/  FF1EC2 :                     ; --------------------------------------------------
(1)  310/  FF1EC2 :                     ; Mode 1
(1)  311/  FF1EC2 :                     ; --------------------------------------------------
(1)  312/  FF1EC2 :                     
(1)  313/  FF1EC2 :                     .mode1:
(1)  314/  FF1EC2 : 4A78 882A           		tst.w	(RAM_CurrType).w
(1)  315/  FF1EC6 : 6B16                		bmi	.mode1_loop
(1)  316/  FF1EC8 : 0078 8000 882A      		or.w	#$8000,(RAM_CurrType).w
(1)  317/  FF1ECE : 6100 012A           		bsr	.print_cursor
(1)  318/  FF1ED2 : 31FC 0001 8824      		move.w	#1,(RAM_EmiHide).w
(1)  319/  FF1ED8 : 31FC 0001 8822      		move.w	#1,(RAM_EmiUpd).w
(1)  320/  FF1EDE :                     
(1)  321/  FF1EDE :                     .mode1_loop:
(1)  322/  FF1EDE : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  323/  FF1EE2 : E04F                		lsr.w	#8,d7
(1)  324/  FF1EE4 : 0807 0003           		btst	#bitJoyMode,d7
(1)  325/  FF1EE8 : 670C                		beq.s	.no_mode1
(1)  326/  FF1EEA : 31FC 0000 882A      		move.w	#0,(RAM_CurrType).w
(1)  327/  FF1EF0 : 31FC 9200 883C      		move.w	#$9200,(RAM_WindowNew).w
(1)  328/  FF1EF6 :                     .no_mode1:
(1)  329/  FF1EF6 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  330/  FF1EFA : E04F                		lsr.w	#8,d7
(1)  331/  FF1EFC : 0807 0000           		btst	#bitJoyZ,d7
(1)  332/  FF1F00 : 671C                		beq.s	.noc_up
(1)  333/  FF1F02 : 1E39 00A1 512F      .wait:		move.b	(sysmars_reg+comm15),d7
(1)  334/  FF1F08 : CE7C 00F0           		and.w	#%11110000,d7
(1)  335/  FF1F0C : 66F4                		bne.s	.wait
(1)  336/  FF1F0E : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7
(1)  337/  FF1F14 : 8E7C 0001           		or.w	#1,d7
(1)  338/  FF1F18 : 13C7 00A1 512F      		move.b	d7,(sysmars_reg+comm15)
(1)  339/  FF1F1E :                     .noc_up:
(1)  340/  FF1F1E : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  341/  FF1F22 : E04F                		lsr.w	#8,d7
(1)  342/  FF1F24 : 0807 0001           		btst	#bitJoyY,d7
(1)  343/  FF1F28 : 6712                		beq.s	.noy2
(1)  344/  FF1F2A : 0C78 0001 8832      		cmp.w	#1,(RAM_CurrIndx).w
(1)  345/  FF1F30 : 670A                		beq.	.noy2
(1)  346/  FF1F32 : 0678 0001 8832      		add.w	#1,(RAM_CurrIndx).w
(1)  347/  FF1F38 : 6100 00C0           		bsr	.print_cursor
(1)  348/  FF1F3C :                     .noy2:
(1)  349/  FF1F3C : 3E38 91BC           		move.w	(Controller_1+on_hold),d7
(1)  350/  FF1F40 : E04F                		lsr.w	#8,d7
(1)  351/  FF1F42 : 0807 0002           		btst	#bitJoyX,d7
(1)  352/  FF1F46 : 6710                		beq.s	.nox2
(1)  353/  FF1F48 : 4A78 8832           		tst.w	(RAM_CurrIndx).w
(1)  354/  FF1F4C : 670A                		beq.s	.nox2
(1)  355/  FF1F4E : 0478 0001 8832      		sub.w	#1,(RAM_CurrIndx).w
(1)  356/  FF1F54 : 6100 00A4           		bsr	.print_cursor
(1)  357/  FF1F58 :                     .nox2:
(1)  358/  FF1F58 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  359/  FF1F5C : 0807 0000           		btst	#bitJoyUp,d7
(1)  360/  FF1F60 : 6710                		beq.s	.nou2
(1)  361/  FF1F62 : 4A78 8830           		tst.w	(RAM_CurrSelc).w
(1)  362/  FF1F66 : 670A                		beq.s	.nou2
(1)  363/  FF1F68 : 0478 0001 8830      		sub.w	#1,(RAM_CurrSelc).w
(1)  364/  FF1F6E : 6100 008A           		bsr	.print_cursor
(1)  365/  FF1F72 :                     .nou2:
(1)  366/  FF1F72 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  367/  FF1F76 : 0807 0001           		btst	#bitJoyDown,d7
(1)  368/  FF1F7A : 6710                		beq.s	.nod2
(1)  369/  FF1F7C : 0C78 0005 8830      		cmp.w	#MAX_TSTENTRY,(RAM_CurrSelc).w
(1)  370/  FF1F82 : 6C08                		bge.s	.nod2
(1)  371/  FF1F84 : 0678 0001 8830      		add.w	#1,(RAM_CurrSelc).w
(1)  372/  FF1F8A : 616E                		bsr	.print_cursor
(1)  373/  FF1F8C :                     .nod2:
(1)  374/  FF1F8C :                     
(1)  375/  FF1F8C :                     	; LEFT/RIGHT
(1)  376/  FF1F8C : 43F8 8834           		lea	(RAM_CurrTrack),a1
(1)  377/  FF1F90 : 0C78 0004 8830      		cmp.w	#4,(RAM_CurrSelc).w
(1)  378/  FF1F96 : 6604                		bne.s	.toptrk
(1)  379/  FF1F98 : D2FC 0002           		add	#2,a1
(1)  380/  FF1F9C :                     .toptrk:
(1)  381/  FF1F9C : 0C78 0005 8830      		cmp.w	#5,(RAM_CurrSelc).w
(1)  382/  FF1FA2 : 6604                		bne.s	.toptrk2
(1)  383/  FF1FA4 : D2FC 0004           		add	#2*2,a1
(1)  384/  FF1FA8 :                     .toptrk2:
(1)  385/  FF1FA8 :                     
(1)  386/  FF1FA8 : 3E38 91BC           		move.w	(Controller_1+on_hold),d7
(1)  387/  FF1FAC : CE7C 0010           		and.w	#JoyB,d7
(1)  388/  FF1FB0 : 6706                		beq.s	.nob
(1)  389/  FF1FB2 : 0651 0001           		add.w	#1,(a1)
(1)  390/  FF1FB6 : 6142                		bsr	.print_cursor
(1)  391/  FF1FB8 :                     .nob:
(1)  392/  FF1FB8 : 3E38 91BC           		move.w	(Controller_1+on_hold),d7
(1)  393/  FF1FBC : CE7C 0040           		and.w	#JoyA,d7
(1)  394/  FF1FC0 : 6706                		beq.s	.noa
(1)  395/  FF1FC2 : 0451 0001           		sub.w	#1,(a1)
(1)  396/  FF1FC6 : 6132                		bsr	.print_cursor
(1)  397/  FF1FC8 :                     .noa:
(1)  398/  FF1FC8 :                     
(1)  399/  FF1FC8 :                     
(1)  400/  FF1FC8 :                     
(1)  401/  FF1FC8 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  402/  FF1FCC : 0807 0002           		btst	#bitJoyLeft,d7
(1)  403/  FF1FD0 : 6706                		beq.s	.nol
(1)  404/  FF1FD2 :                     ; 		tst.w	(a1)
(1)  405/  FF1FD2 :                     ; 		beq.s	.nol
(1)  406/  FF1FD2 : 0451 0001           		sub.w	#1,(a1)
(1)  407/  FF1FD6 : 6122                		bsr	.print_cursor
(1)  408/  FF1FD8 :                     .nol:
(1)  409/  FF1FD8 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  410/  FF1FDC : 0807 0003           		btst	#bitJoyRight,d7
(1)  411/  FF1FE0 : 6706                		beq.s	.nor
(1)  412/  FF1FE2 :                     ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1)  413/  FF1FE2 :                     ; 		bge.s	.nor
(1)  414/  FF1FE2 : 0651 0001           		add.w	#1,(a1)
(1)  415/  FF1FE6 : 6112                		bsr	.print_cursor
(1)  416/  FF1FE8 :                     .nor:
(1)  417/  FF1FE8 :                     
(1)  418/  FF1FE8 : 3E38 91BE           		move.w	(Controller_1+on_press),d7
(1)  419/  FF1FEC : CE7C 0020           		and.w	#JoyC,d7
(1)  420/  FF1FF0 : 6706                		beq.s	.noc_c
(1)  421/  FF1FF2 : 3038 8832           		move.w	(RAM_CurrIndx).w,d0
(1)  422/  FF1FF6 : 6126                		bsr	.procs_task
(1)  423/  FF1FF8 :                     .noc_c:
(1)  424/  FF1FF8 :                     
(1)  425/  FF1FF8 :                     
(1)  426/  FF1FF8 :                     ; 		lea	str_COMM(pc),a0
(1)  427/  FF1FF8 :                     ; 		move.l	#locate(0,2,9),d0
(1)  428/  FF1FF8 :                     ; 		bsr	Video_Print
(1)  429/  FF1FF8 : 4E75                		rts
(1)  430/  FF1FFA :                     
(1)  431/  FF1FFA :                     ; --------------------------------------------------
(1)  432/  FF1FFA :                     
(1)  433/  FF1FFA :                     .print_cursor:
(1)  434/  FF1FFA : 41FA 04C4           		lea	str_Status(pc),a0
(1)  435/  FF1FFE : 203C 0002 1404      		move.l	#locate(2,20,4),d0
(1)  436/  FF2004 : 6100 E474           		bsr	Video_Print
(1)  437/  FF2008 : 41FA 04B0           		lea	str_Cursor(pc),a0
(1)  438/  FF200C : 7000                		moveq	#0,d0
(1)  439/  FF200E : 3038 8830           		move.w	(RAM_CurrSelc).w,d0
(1)  440/  FF2012 : D0BC 0002 0205      		add.l	#locate(2,2,5),d0
(1)  441/  FF2018 : 6100 E460           		bsr	Video_Print
(1)  442/  FF201C : 4E75                		rts
(1)  443/  FF201E :                     
(1)  444/  FF201E :                     ; d1 - Track slot
(1)  445/  FF201E :                     .procs_task:
(1)  446/  FF201E : 3E38 8830           		move.w	(RAM_CurrSelc).w,d7
(1)  447/  FF2022 : DE47                		add.w	d7,d7
(1)  448/  FF2024 : 3E3B 7006           		move.w	.tasklist(pc,d7.w),d7
(1)  449/  FF2028 : 4EFB 7002           		jmp	.tasklist(pc,d7.w)
(1)  450/  FF202C :                     .tasklist:
(1)  451/  FF202C : 000C                		dc.w .task_00-.tasklist
(1)  452/  FF202E : 0028                		dc.w .task_01-.tasklist
(1)  453/  FF2030 : 002C                		dc.w .task_02-.tasklist
(1)  454/  FF2032 : 0030                		dc.w .task_03-.tasklist
(1)  455/  FF2034 : 0034                		dc.w .task_04-.tasklist
(1)  456/  FF2036 : 003C                		dc.w .task_05-.tasklist
(1)  457/  FF2038 :                     
(1)  458/  FF2038 :                     ; d0 - Track slot
(1)  459/  FF2038 :                     .task_00:
(1)  460/  FF2038 : 41FA 0036           		lea	MasterTrkList(pc),a0
(1)  461/  FF203C : 3E38 8834           		move.w	(RAM_CurrTrack).w,d7
(1)  462/  FF2040 : E94F                		lsl.w	#4,d7
(1)  463/  FF2042 : 41F0 7000           		lea	(a0,d7.w),a0
(1)  464/  FF2046 : 3228 000C           		move.w	$C(a0),d1
(1)  465/  FF204A : 7400                		moveq	#0,d2
(1)  466/  FF204C : 3628 000E           		move.w	$E(a0),d3
(1)  467/  FF2050 : 6000 E178           		bra	Sound_TrkPlay
(1)  468/  FF2054 :                     .task_01:
(1)  469/  FF2054 : 6000 E1AE           		bra	Sound_TrkStop
(1)  470/  FF2058 :                     .task_02:
(1)  471/  FF2058 : 6000 E1C0           		bra	Sound_TrkPause
(1)  472/  FF205C :                     .task_03:
(1)  473/  FF205C : 6000 E1D2           		bra	Sound_TrkResume
(1)  474/  FF2060 :                     .task_04:
(1)  475/  FF2060 : 3238 8836           		move.w	(RAM_CurrTicks).w,d1
(1)  476/  FF2064 : 6000 E1E0           		bra	Sound_TrkTicks
(1)  477/  FF2068 :                     .task_05:
(1)  478/  FF2068 : 3238 8838           		move.w	(RAM_CurrTempo).w,d1
(1)  479/  FF206C : 6000 E1F4           		bra	Sound_GlbTempo
(1)  480/  FF2070 :                     
(1)  481/  FF2070 :                     ; test playlist
(1)  482/  FF2070 :                     MasterTrkList:
(1)  483/  FF2070 : 0093 1234 0093 1223 	dc.l GemaTrk_patt_bemine,GemaTrk_blk_bemine,GemaTrk_ins_bemine
                    0093 2324           
(1)  484/  FF207C : 0007 0000           	dc.w 7,0
(1)  485/  FF2080 : 0093 9F58 0093 9F4C 	dc.l GemaTrk_patt_HILLS,GemaTrk_blk_HILLS,GemaTrk_ins_HILLS
                    0093 AACB           
(1)  486/  FF208C : 0007 0000           	dc.w 7,0
(1)  487/  FF2090 : 0093 8BFE 0093 8BF6 	dc.l GemaTrk_patt_TEST2,GemaTrk_blk_TEST2,GemaTrk_ins_TEST2
                    0093 9E64           
(1)  488/  FF209C : 0002 0001           	dc.w 2,1
(1)  489/  FF20A0 : 0093 23F7 0093 23EC 	dc.l GemaTrk_patt_chrono,GemaTrk_blk_chrono,GemaTrk_ins_chrono
                    0093 8BB6           
(1)  490/  FF20AC : 0003 0001           	dc.w 3,1
(1)  491/  FF20B0 : 0093 AB54 0093 AB33 	dc.l GemaTrk_mecano_patt,GemaTrk_mecano_blk,GemaTrk_mecano_ins
                    0093 D0A5           
(1)  492/  FF20BC : 0001 0001           	dc.w 1,1
(1)  493/  FF20C0 :                     	align 2
(1)  494/  FF20C0 :                     
(1)  495/  FF20C0 :                     ; ====================================================================
(1)  496/  FF20C0 :                     ; ------------------------------------------------------
(1)  497/  FF20C0 :                     ; Subroutines
(1)  498/  FF20C0 :                     ; ------------------------------------------------------
(1)  499/  FF20C0 :                     
(1)  500/  FF20C0 :                     ; d2 - BLOCK
(1)  501/  FF20C0 :                     PlayThisSfx:
(1)  502/  FF20C0 : 41F9 0093 05D2      		lea	(GemaTrkData_Sfx),a0
(1)  503/  FF20C6 : 7001                		moveq	#1,d0
(1)  504/  FF20C8 : 7206                		moveq	#6,d1
(1)  505/  FF20CA :                     ; 		moveq	#0,d2
(1)  506/  FF20CA : 7600                		moveq	#0,d3
(1)  507/  FF20CC : 6000 E0FC           		bra	Sound_TrkPlay
(1)  508/  FF20D0 :                     
(1)  509/  FF20D0 :                     Board_CheckMatch:
(1)  510/  FF20D0 :                     	; horizontal
(1)  511/  FF20D0 : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  512/  FF20D4 : 7600                		moveq	#0,d3
(1)  513/  FF20D6 : 3C3C 0005           		move	#6-1,d6
(1)  514/  FF20DA :                     .x_chk_n:
(1)  515/  FF20DA : 3E3C 0005           		move.w	#6-1,d7
(1)  516/  FF20DE : 7A00                		moveq	#0,d5
(1)  517/  FF20E0 :                     .x_chk:
(1)  518/  FF20E0 : DA16                		add.b	(a6),d5
(1)  519/  FF20E2 : DCFC 0001           		adda	#1,a6
(1)  520/  FF20E6 : 51CF FFF8           		dbf	d7,.x_chk
(1)  521/  FF20EA : BA3C 0006           		cmp.b	#6,d5
(1)  522/  FF20EE : 6604                		bne.s	.x_off
(1)  523/  FF20F0 : D67C 0001           		add.w	#1,d3
(1)  524/  FF20F4 :                     .x_off:
(1)  525/  FF20F4 : 51CE FFE4           		dbf	d6,.x_chk_n
(1)  526/  FF20F8 :                     	; vertical
(1)  527/  FF20F8 : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  528/  FF20FC : 3C3C 0005           		move	#6-1,d6
(1)  529/  FF2100 :                     .y_chk_n:
(1)  530/  FF2100 : 2A4E                		move.l	a6,a5
(1)  531/  FF2102 : 3E3C 0005           		move.w	#6-1,d7
(1)  532/  FF2106 : 7A00                		moveq	#0,d5
(1)  533/  FF2108 :                     .y_chk:
(1)  534/  FF2108 : DA15                		add.b	(a5),d5
(1)  535/  FF210A : DAFC 0006           		adda	#6,a5
(1)  536/  FF210E : 51CF FFF8           		dbf	d7,.y_chk
(1)  537/  FF2112 : BA3C 0006           		cmp.b	#6,d5
(1)  538/  FF2116 : 6604                		bne.s	.y_off
(1)  539/  FF2118 : D67C 0001           		add.w	#1,d3
(1)  540/  FF211C :                     .y_off:
(1)  541/  FF211C : DCFC 0001           		adda	#1,a6
(1)  542/  FF2120 : 51CE FFDE           		dbf	d6,.y_chk_n
(1)  543/  FF2124 : 4A43                		tst.w	d3
(1)  544/  FF2126 : 670A                		beq.s	.xs_off
(1)  545/  FF2128 : 31FC 0020 8826      		move.w	#$20,(RAM_ShakeMe).w
(1)  546/  FF212E : 7400                		moveq	#0,d2
(1)  547/  FF2130 : 618E                		bsr	PlayThisSfx
(1)  548/  FF2132 :                     .xs_off:
(1)  549/  FF2132 : 4E75                		rts
(1)  550/  FF2134 :                     
(1)  551/  FF2134 :                     Board_Reset:
(1)  552/  FF2134 :                     	; horizontal
(1)  553/  FF2134 : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  554/  FF2138 : 7600                		moveq	#0,d3
(1)  555/  FF213A : 3C3C 0005           		move	#6-1,d6
(1)  556/  FF213E :                     .x_chk_n:
(1)  557/  FF213E : 2A4E                		move.l	a6,a5
(1)  558/  FF2140 : 3E3C 0005           		move.w	#6-1,d7
(1)  559/  FF2144 : 7A00                		moveq	#0,d5
(1)  560/  FF2146 :                     .x_chk:
(1)  561/  FF2146 : DA15                		add.b	(a5),d5
(1)  562/  FF2148 : DAFC 0001           		adda	#1,a5
(1)  563/  FF214C : 51CF FFF8           		dbf	d7,.x_chk
(1)  564/  FF2150 : BA3C 0006           		cmp.b	#6,d5
(1)  565/  FF2154 : 6610                		bne.s	.x_off
(1)  566/  FF2156 : 284E                		move.l	a6,a4
(1)  567/  FF2158 : 7605                		moveq	#6-1,d3
(1)  568/  FF215A :                     .x_clr:
(1)  569/  FF215A : 08D4 0002           		bset	#2,(a4)
(1)  570/  FF215E : D8FC 0001           		adda	#1,a4
(1)  571/  FF2162 : 51CB FFF6           		dbf	d3,.x_clr
(1)  572/  FF2166 :                     .x_off:
(1)  573/  FF2166 : DCFC 0006           		adda	#6,a6
(1)  574/  FF216A : 51CE FFD2           		dbf	d6,.x_chk_n
(1)  575/  FF216E :                     	; vertical
(1)  576/  FF216E : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  577/  FF2172 : 3C3C 0005           		move	#6-1,d6
(1)  578/  FF2176 :                     .y_chk_n:
(1)  579/  FF2176 : 2A4E                		move.l	a6,a5
(1)  580/  FF2178 : 3E3C 0005           		move.w	#6-1,d7
(1)  581/  FF217C : 7A00                		moveq	#0,d5
(1)  582/  FF217E :                     .y_chk:
(1)  583/  FF217E : 1415                		move.b	(a5),d2
(1)  584/  FF2180 : C47C 0001           		and	#1,d2
(1)  585/  FF2184 : DA02                		add.b	d2,d5
(1)  586/  FF2186 : DAFC 0006           		adda	#6,a5
(1)  587/  FF218A : 51CF FFF2           		dbf	d7,.y_chk
(1)  588/  FF218E : BA3C 0006           		cmp.b	#6,d5
(1)  589/  FF2192 : 6610                		bne.s	.y_off
(1)  590/  FF2194 : 284E                		move.l	a6,a4
(1)  591/  FF2196 : 7605                		moveq	#6-1,d3
(1)  592/  FF2198 :                     .y_clr:
(1)  593/  FF2198 : 08D4 0002           		bset	#2,(a4)
(1)  594/  FF219C : D8FC 0006           		adda	#6,a4
(1)  595/  FF21A0 : 51CB FFF6           		dbf	d3,.y_clr
(1)  596/  FF21A4 :                     .y_off:
(1)  597/  FF21A4 : DCFC 0001           		adda	#1,a6
(1)  598/  FF21A8 : 51CE FFCC           		dbf	d6,.y_chk_n
(1)  599/  FF21AC :                     
(1)  600/  FF21AC :                     	; clearall req
(1)  601/  FF21AC : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  602/  FF21B0 : 7E23                		moveq	#(6*6)-1,d7
(1)  603/  FF21B2 :                     .nxtclr:
(1)  604/  FF21B2 : 0816 0002           		btst	#2,(a6)
(1)  605/  FF21B6 : 6702                		beq.s	.noclrrq
(1)  606/  FF21B8 : 4216                		clr.b	(a6)
(1)  607/  FF21BA :                     .noclrrq:
(1)  608/  FF21BA : DCFC 0001           		adda	#1,a6
(1)  609/  FF21BE : 51CF FFF2           		dbf	d7,.nxtclr
(1)  610/  FF21C2 : 4E75                		rts
(1)  611/  FF21C4 :                     
(1)  612/  FF21C4 :                     Board_SwapPos:
(1)  613/  FF21C4 : 0838 0000 8828      		btst	#0,(RAM_BoardUpd).w
(1)  614/  FF21CA : 6708                		beq	.nbdw2
(1)  615/  FF21CC : 6108                		bsr	.draw_all
(1)  616/  FF21CE : 08B8 0000 8828      		bclr	#0,(RAM_BoardUpd).w
(1)  617/  FF21D4 :                     .nbdw2:
(1)  618/  FF21D4 : 4E75                		rts
(1)  619/  FF21D6 :                     
(1)  620/  FF21D6 :                     ; draw all
(1)  621/  FF21D6 :                     .draw_all:
(1)  622/  FF21D6 : 4DF8 883E           		lea	(RAM_BoardBlocks),a6
(1)  623/  FF21DA : 3E3C 4390           		move.w	#$4000|(8*$02)|(7*$80),d7
(1)  624/  FF21DE : 4847                		swap	d7
(1)  625/  FF21E0 : 3E3C 0003           		move.w	#3,d7
(1)  626/  FF21E4 : 7005                		moveq	#6-1,d0
(1)  627/  FF21E6 :                     .nxt_y:
(1)  628/  FF21E6 : 2C07                		move.l	d7,d6
(1)  629/  FF21E8 : 323C 0005           		move	#6-1,d1
(1)  630/  FF21EC :                     .nxt_x:
(1)  631/  FF21EC : 611A                		bsr	.this_blk
(1)  632/  FF21EE : DCFC 0001           		adda	#1,a6
(1)  633/  FF21F2 : DCBC 0008 0000      		add.l	#$80000,d6
(1)  634/  FF21F8 : 51C9 FFF2           		dbf	d1,.nxt_x
(1)  635/  FF21FC : DEBC 0180 0000      		add.l	#$1800000,d7
(1)  636/  FF2202 : 51C8 FFE2           		dbf	d0,.nxt_y
(1)  637/  FF2206 : 4E75                		rts
(1)  638/  FF2208 :                     .this_blk:
(1)  639/  FF2208 : 2A06                		move.l	d6,d5
(1)  640/  FF220A : 43FA 004C           		lea	.switch_vram(pc),a1
(1)  641/  FF220E : 283C 2001 2001      		move.l	#$20012001,d4
(1)  642/  FF2214 : 0816 0000           		btst	#0,(a6)
(1)  643/  FF2218 : 6706                		beq.s	.is_off2
(1)  644/  FF221A : D8BC 000C 000C      		add.l	#$000C000C,d4
(1)  645/  FF2220 :                     .is_off2:
(1)  646/  FF2220 : 2049                		move.l	a1,a0
(1)  647/  FF2222 : 343C 0002           		move.w	#3-1,d2
(1)  648/  FF2226 :                     .next_y2:
(1)  649/  FF2226 : 23C5 00C0 0004      		move.l	d5,(vdp_ctrl).l
(1)  650/  FF222C : 2618                		move.l	(a0)+,d3
(1)  651/  FF222E : D684                		add.l	d4,d3
(1)  652/  FF2230 : 23C3 00C0 0000      		move.l	d3,(vdp_data).l
(1)  653/  FF2236 : 2618                		move.l	(a0)+,d3
(1)  654/  FF2238 : D684                		add.l	d4,d3
(1)  655/  FF223A : 23C3 00C0 0000      		move.l	d3,(vdp_data).l
(1)  656/  FF2240 : DABC 0080 0000      		add.l	#$800000,d5
(1)  657/  FF2246 : 51CA FFDE           		dbf	d2,.next_y2
(1)  658/  FF224A : 4E75                		rts
(1)  659/  FF224C :                     
(1)  660/  FF224C :                     ; ; switched block
(1)  661/  FF224C :                     ; .block_draw:
(1)  662/  FF224C :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  663/  FF224C :                     ; 		or.w	(RAM_EmiBlockY).w,d7
(1)  664/  FF224C :                     ; 		bmi	.dont_upd
(1)  665/  FF224C :                     ; 		cmp.w	#6,(RAM_EmiBlockX).w
(1)  666/  FF224C :                     ; 		bge	.dont_upd
(1)  667/  FF224C :                     ; 		cmp.w	#6,(RAM_EmiBlockY).w
(1)  668/  FF224C :                     ; 		bge	.dont_upd
(1)  669/  FF224C :                     ;
(1)  670/  FF224C :                     ; 		lea	(RAM_BoardBlocks),a6
(1)  671/  FF224C :                     ; 		moveq	#0,d7
(1)  672/  FF224C :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  673/  FF224C :                     ; 		adda	d7,a6
(1)  674/  FF224C :                     ; 		add.w	d7,d7
(1)  675/  FF224C :                     ; 		add.w	d7,d7
(1)  676/  FF224C :                     ; 		move.w	(RAM_EmiBlockY).w,d6
(1)  677/  FF224C :                     ; 		move.w	d6,d5
(1)  678/  FF224C :                     ; 		add.w	d6,d6
(1)  679/  FF224C :                     ; 		move.w	.ypos_ex(pc,d6.w),d6
(1)  680/  FF224C :                     ; 		mulu.w	#6,d5
(1)  681/  FF224C :                     ; 		adda	d5,a6
(1)  682/  FF224C :                     ;
(1)  683/  FF224C :                     ; 		add.w	d7,d7
(1)  684/  FF224C :                     ; 		lsl.w	#7,d6			; *$80 size mode
(1)  685/  FF224C :                     ; 		add.w	d6,d7
(1)  686/  FF224C :                     ; 		add.w	#$4000|(8*$02)|(7*$80),d7
(1)  687/  FF224C :                     ; 		swap	d7
(1)  688/  FF224C :                     ; 		move.w	#3,d7
(1)  689/  FF224C :                     ; 		move.l	d7,d6
(1)  690/  FF224C :                     ; 		bchg	#0,(a6)
(1)  691/  FF224C :                     ; 		lea	.switch_vram(pc),a0
(1)  692/  FF224C :                     ; 		move.l	#$20012001,d4
(1)  693/  FF224C :                     ; 		btst	#0,(a6)
(1)  694/  FF224C :                     ; 		beq.s	.is_off
(1)  695/  FF224C :                     ; 		add.l	#$000C000C,d4
(1)  696/  FF224C :                     ; .is_off:
(1)  697/  FF224C :                     ; 		move.w	#3-1,d5
(1)  698/  FF224C :                     ; .next_y:
(1)  699/  FF224C :                     ; 		move.l	d7,(vdp_ctrl).l
(1)  700/  FF224C :                     ; 		move.l	(a0)+,d3
(1)  701/  FF224C :                     ; 		add.l	d4,d3
(1)  702/  FF224C :                     ; 		move.l	d3,(vdp_data).l
(1)  703/  FF224C :                     ; 		move.l	(a0)+,d3
(1)  704/  FF224C :                     ; 		add.l	d4,d3
(1)  705/  FF224C :                     ; 		move.l	d3,(vdp_data).l
(1)  706/  FF224C :                     ; 		add.l	#$800000,d7
(1)  707/  FF224C :                     ; 		dbf	d5,.next_y
(1)  708/  FF224C :                     ; .dont_upd:
(1)  709/  FF224C :                     ; 		rts
(1)  710/  FF224C :                     
(1)  711/  FF224C : 0000                .ypos_ex:	dc.w 0
(1)  712/  FF224E : 0003                		dc.w 3
(1)  713/  FF2250 : 0006                		dc.w 6
(1)  714/  FF2252 : 0009                		dc.w 9
(1)  715/  FF2254 : 000C                		dc.w 12
(1)  716/  FF2256 : 000F                		dc.w 15
(1)  717/  FF2258 :                     		align 2
(1)  718/  FF2258 :                     .switch_vram:
(1)  719/  FF2258 : 0000 0001 0001 0002 		dc.w $0000,$0001,$0001,$0002
(1)  720/  FF2260 : 0003 0004 0004 0005 		dc.w $0003,$0004,$0004,$0005
(1)  721/  FF2268 : 0006 0007 0007 0008 		dc.w $0006,$0007,$0007,$0008
(1)  722/  FF2270 :                     
(1)  723/  FF2270 :                     ; 		move.l	(RAM_EmiMoveX).w,d4
(1)  724/  FF2270 :                     ; 		add.l	d4,(RAM_EmiPosX).l
(1)  725/  FF2270 :                     ; 		move.l	d0,d5
(1)  726/  FF2270 :                     ; 		bsr.s	.floatpos
(1)  727/  FF2270 :                     ; 		tst.l	d4
(1)  728/  FF2270 :                     ; 		bne.s	.resx
(1)  729/  FF2270 :                     ; 		and.l	#$FFE00000,(RAM_EmiPosX).l
(1)  730/  FF2270 :                     ; .resx:
(1)  731/  FF2270 :                     ; 		move.l	d4,(RAM_EmiMoveX).w
(1)  732/  FF2270 :                     ; 		move.l	(RAM_EmiMoveY).w,d4
(1)  733/  FF2270 :                     ; 		add.l	d4,(RAM_EmiPosY).l
(1)  734/  FF2270 :                     ; 		move.l	d0,d5
(1)  735/  FF2270 :                     ; 		bsr.s	.floatpos
(1)  736/  FF2270 :                     ; 		tst.l	d4
(1)  737/  FF2270 :                     ; 		bne.s	.resy
(1)  738/  FF2270 :                     ; 		and.l	#$FFE00000,(RAM_EmiPosY).l
(1)  739/  FF2270 :                     ; .resy:
(1)  740/  FF2270 :                     ; 		move.l	d4,(RAM_EmiMoveY).w
(1)  741/  FF2270 :                     ;
(1)  742/  FF2270 :                     ; 		move.l	(RAM_EmiPosX).l,d7
(1)  743/  FF2270 :                     ; 		or.l	(RAM_EmiPosY).l,d7
(1)  744/  FF2270 :                     ; 		beq.s	.no_yspd
(1)  745/  FF2270 :                     ; 		move.w	#1,(RAM_EmiUpd).w
(1)  746/  FF2270 :                     ; .no_yspd:
(1)  747/  FF2270 :                     ; 		rts
(1)  748/  FF2270 :                     ;
(1)  749/  FF2270 :                     ; .floatpos:
(1)  750/  FF2270 :                     ; 		tst.l	d4
(1)  751/  FF2270 :                     ; 		bmi.s	.xleft
(1)  752/  FF2270 :                     ; 		sub.l	d5,d4
(1)  753/  FF2270 :                     ; 		bpl.s	.xstop
(1)  754/  FF2270 :                     ; 		clr.l	d4
(1)  755/  FF2270 :                     ; .xleft:
(1)  756/  FF2270 :                     ; 		tst.l	d4
(1)  757/  FF2270 :                     ; 		beq.s	.xstop
(1)  758/  FF2270 :                     ; 		add.l	d5,d4
(1)  759/  FF2270 :                     ; 		bmi.s	.xstop
(1)  760/  FF2270 :                     ; 		clr.l	d4
(1)  761/  FF2270 :                     ; .xstop:
(1)  762/  FF2270 :                     ; 		rts
(1)  763/  FF2270 :                     
(1)  764/  FF2270 :                     Emilie_Move:
(1)  765/  FF2270 :                     ; 		sub.l
(1)  766/  FF2270 : 1438 8818           		move.b	(RAM_EmiFlags),d2
(1)  767/  FF2274 : 0882 0007           		bclr	#7,d2
(1)  768/  FF2278 : 3038 8800           		move.w	(RAM_EmiPosX).w,d0
(1)  769/  FF227C : 3238 8808           		move.w	(RAM_EmiMoveX).w,d1
(1)  770/  FF2280 : 614A                		bsr	.move_it
(1)  771/  FF2282 : 31C0 8800           		move.w	d0,(RAM_EmiPosX).w
(1)  772/  FF2286 : 3038 8804           		move.w	(RAM_EmiPosY).w,d0
(1)  773/  FF228A : 3238 880C           		move.w	(RAM_EmiMoveY).w,d1
(1)  774/  FF228E : 613C                		bsr	.move_it
(1)  775/  FF2290 : 31C0 8804           		move.w	d0,(RAM_EmiPosY).w
(1)  776/  FF2294 : 11C2 8818           		move.b	d2,(RAM_EmiFlags).w
(1)  777/  FF2298 :                     
(1)  778/  FF2298 : 2A39 FFFF 8810      		move.l	(RAM_EmiJumpSpd).l,d5
(1)  779/  FF229E : 2C38 8814           		move.l	(RAM_EmiJumpY),d6
(1)  780/  FF22A2 : DC85                		add.l	d5,d6
(1)  781/  FF22A4 : 21C6 8814           		move.l	d6,(RAM_EmiJumpY)
(1)  782/  FF22A8 :                     
(1)  783/  FF22A8 : 2A39 FFFF 8810      		move.l	(RAM_EmiJumpSpd).l,d5
(1)  784/  FF22AE : DABC 0000 2000      		add.l	#$2000,d5
(1)  785/  FF22B4 :                     ; 		bmi.s	.toomuch
(1)  786/  FF22B4 : 2C38 8814           		move.l	(RAM_EmiJumpY),d6
(1)  787/  FF22B8 : 6B04                		bmi.s	.toomuch
(1)  788/  FF22BA : 4285                		clr.l	d5
(1)  789/  FF22BC : 6006                		bra.s	.eximuch
(1)  790/  FF22BE :                     .toomuch:
(1)  791/  FF22BE : 31FC 0001 8822      		move.w	#1,(RAM_EmiUpd).w
(1)  792/  FF22C4 :                     .eximuch:
(1)  793/  FF22C4 : 23C5 FFFF 8810      		move.l	d5,(RAM_EmiJumpSpd).l
(1)  794/  FF22CA : 4E75                		rts
(1)  795/  FF22CC :                     .move_it:
(1)  796/  FF22CC : 3A00                		move.w	d0,d5
(1)  797/  FF22CE : 3801                		move.w	d1,d4
(1)  798/  FF22D0 : B845                		cmp.w	d5,d4
(1)  799/  FF22D2 : 6718                		beq.s	.same_x
(1)  800/  FF22D4 : 3C3C 0001           		move.w	#1,d6
(1)  801/  FF22D8 : 9845                		sub.w	d5,d4
(1)  802/  FF22DA : 6A04                		bpl.s	.reversx
(1)  803/  FF22DC : 3C3C FFFF           		move.w	#-1,d6
(1)  804/  FF22E0 :                     .reversx:
(1)  805/  FF22E0 : 08C2 0007           		bset	#7,d2
(1)  806/  FF22E4 : 0678 0001 8820      		add.w	#1,(RAM_EmiAnim).w
(1)  807/  FF22EA : D046                		add.w	d6,d0
(1)  808/  FF22EC :                     .same_x:
(1)  809/  FF22EC : 4E75                		rts
(1)  810/  FF22EE :                     
(1)  811/  FF22EE :                     Emilie_MkSprite:
(1)  812/  FF22EE : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  813/  FF22F4 : 4A78 8824           		tst.w	(RAM_EmiHide).w
(1)  814/  FF22F8 : 6600 008A           		bne	.hidefuji
(1)  815/  FF22FC :                     
(1)  816/  FF22FC : 343C 0400           		move.w	#$400,d2
(1)  817/  FF2300 : 4A78 8822           		tst.w	(RAM_EmiUpd).w
(1)  818/  FF2304 : 6730                		beq	.no_updgfx
(1)  819/  FF2306 : 4278 8822           		clr.w	(RAM_EmiUpd).w
(1)  820/  FF230A : 3438 881E           		move.w	(RAM_EmiChar),d2
(1)  821/  FF230E : 3638 8820           		move.w	(RAM_EmiAnim),d3
(1)  822/  FF2312 : E64B                		lsr.w	#3,d3
(1)  823/  FF2314 : C67C 0003           		and.w	#3,d3
(1)  824/  FF2318 : D443                		add.w	d3,d2
(1)  825/  FF231A : 323C 0300           		move.w	#$20*$18,d1
(1)  826/  FF231E : C4C1                		mulu.w	d1,d2
(1)  827/  FF2320 : 203C 0004 0300      		move.l	#ART_EMI,d0
(1)  828/  FF2326 : D082                		add.l	d2,d0
(1)  829/  FF2328 : C0BC FFFF FFFE      		and.l	#-2,d0
(1)  830/  FF232E : 343C 0400           		move.w	#$400,d2
(1)  831/  FF2332 : 6100 E414           		bsr	Video_LoadArt
(1)  832/  FF2336 :                     .no_updgfx:
(1)  833/  FF2336 : 2D7C 7800 0003 0004 		move.l	#$78000003,4(a6)
(1)  834/  FF233E : 2038 8804           		move.l	(RAM_EmiPosY),d0
(1)  835/  FF2342 : D0B8 8814           		add.l	(RAM_EmiJumpY),d0
(1)  836/  FF2346 : 4840                		swap	d0
(1)  837/  FF2348 : 3238 8800           		move.w	(RAM_EmiPosX),d1
(1)  838/  FF234C : 3638 8826           		move.w	(RAM_ShakeMe).w,d3
(1)  839/  FF2350 : 3803                		move.w	d3,d4
(1)  840/  FF2352 : E64B                		lsr.w	#3,d3
(1)  841/  FF2354 : 0804 0000           		btst	#0,d4
(1)  842/  FF2358 : 6602                		bne.s	.midshk
(1)  843/  FF235A : 4443                		neg.w	d3
(1)  844/  FF235C :                     .midshk:
(1)  845/  FF235C : 9043                		sub.w	d3,d0
(1)  846/  FF235E :                     
(1)  847/  FF235E : D07C 0080           		add.w	#$80,d0
(1)  848/  FF2362 : D27C 0080           		add.w	#$80,d1
(1)  849/  FF2366 : 3C80                		move.w	d0,(a6)			; TOP 32x32
(1)  850/  FF2368 : 3CBC 0F01           		move.w	#$0F01,(a6)
(1)  851/  FF236C : 3C82                		move.w	d2,(a6)
(1)  852/  FF236E : 3C81                		move.w	d1,(a6)
(1)  853/  FF2370 : D07C 0020           		add.w	#$20,d0
(1)  854/  FF2374 : D47C 0010           		add.w	#$10,d2
(1)  855/  FF2378 : 3C80                		move.w	d0,(a6)			; BOT 32x24
(1)  856/  FF237A : 3CBC 0D00           		move.w	#$0D00,(a6)
(1)  857/  FF237E : 3C82                		move.w	d2,(a6)
(1)  858/  FF2380 : 3C81                		move.w	d1,(a6)
(1)  859/  FF2382 :                     .no_upd:
(1)  860/  FF2382 : 4E75                		rts
(1)  861/  FF2384 :                     
(1)  862/  FF2384 :                     .hidefuji:
(1)  863/  FF2384 : 2D7C 7800 0003 0004 		move.l	#$78000003,4(a6)
(1)  864/  FF238C : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  865/  FF2392 : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  866/  FF2398 : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  867/  FF239E : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  868/  FF23A4 : 4E75                		rts
(1)  869/  FF23A6 :                     
(1)  870/  FF23A6 :                     ; NORMAL
(1)  871/  FF23A6 :                     ; 		lea	(vdp_data),a6
(1)  872/  FF23A6 :                     ; 		move.l	#$78000003,4(a6)
(1)  873/  FF23A6 :                     ; 		move.w	(RAM_EmiPosY),d0
(1)  874/  FF23A6 :                     ; 		move.w	(RAM_EmiPosX),d1
(1)  875/  FF23A6 :                     ; 		move.w	(RAM_EmiChar),d2
(1)  876/  FF23A6 :                     ; 		move.w	(RAM_EmiAnim),d3
(1)  877/  FF23A6 :                     ; 		lsr.w	#3,d3
(1)  878/  FF23A6 :                     ; 		and.w	#3,d3
(1)  879/  FF23A6 :                     ; 		add.w	d3,d2
(1)  880/  FF23A6 :                     ; 		mulu.w	#$18,d2
(1)  881/  FF23A6 :                     ; 		add.w	#1,d2
(1)  882/  FF23A6 :                     ; 		add.w	#$80,d0
(1)  883/  FF23A6 :                     ; 		add.w	#$80,d1
(1)  884/  FF23A6 :                     ; 		move.w	d0,(a6)			; TOP 32x32
(1)  885/  FF23A6 :                     ; 		move.w	#$0F01,(a6)
(1)  886/  FF23A6 :                     ; 		move.w	d2,(a6)
(1)  887/  FF23A6 :                     ; 		move.w	d1,(a6)
(1)  888/  FF23A6 :                     ; 		add.w	#$20,d0
(1)  889/  FF23A6 :                     ; 		add.w	#$10,d2
(1)  890/  FF23A6 :                     ; 		move.w	d0,(a6)			; BOT 32x24
(1)  891/  FF23A6 :                     ; 		move.w	#$0D00,(a6)
(1)  892/  FF23A6 :                     ; 		move.w	d2,(a6)
(1)  893/  FF23A6 :                     ; 		move.w	d1,(a6)
(1)  894/  FF23A6 :                     ; 		rts
(1)  895/  FF23A6 :                     
(1)  896/  FF23A6 :                     ; ====================================================================
(1)  897/  FF23A6 :                     ; ------------------------------------------------------
(1)  898/  FF23A6 :                     ; FIFO TEST
(1)  899/  FF23A6 :                     ; ------------------------------------------------------
(1)  900/  FF23A6 :                     
(1)  901/  FF23A6 :                     ; TODO: ver como fregados consigo mandar
(1)  902/  FF23A6 :                     ; RAM al 32X sin que se trabe
(1)  903/  FF23A6 :                     
(1)  904/  FF23A6 :                     MD_FifoMars:
(1)  905/  FF23A6 : 4DF8 97F2           		lea	(RAM_FrameCount),a6
(1)  906/  FF23AA : 3C3C 0100           		move.w	#$100,d6
(1)  907/  FF23AE :                     
(1)  908/  FF23AE : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  909/  FF23B4 : 40C7                		move.w	sr,d7			; Backup current SR
(1)  910/  FF23B6 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  911/  FF23BA : 3A3C 000E           		move.w	#$00E,d5
(1)  912/  FF23BE :                     .retry:
(1)  913/  FF23BE : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l	; DEBUG ENTER
                    0004                
(1)  914/  FF23C8 : 33C5 00C0 0000      		move.w	d5,(vdp_data).l
(1)  915/  FF23CE : 13FC 0000 00A1 5107 		move.b	#%000,($A15107).l	; 68S bit
(1)  916/  FF23D6 : 33C6 00A1 5110      		move.w	d6,($A15110).l		; DREQ len
(1)  917/  FF23DC : 13FC 0004 00A1 5107 		move.b	#%100,($A15107).l	; 68S bit
(1)  918/  FF23E4 : 49F9 00A1 5112      		lea	($A15112).l,a4
(1)  919/  FF23EA : 4E71                		nop
(1)  920/  FF23EC : 4E71                		nop
(1)  921/  FF23EE : 4E71                		nop
(1)  922/  FF23F0 : 4E71                		nop
(1)  923/  FF23F2 : 4E71                		nop
(1)  924/  FF23F4 : 4E71                		nop
(1)  925/  FF23F6 : 4E71                		nop
(1)  926/  FF23F8 : 4E71                		nop
(1)  927/  FF23FA : 302D 0002           		move.w	standby(a5),d0		; Request SLAVE CMD interrupt
(1)  928/  FF23FE : 08C0 0001           		bset	#1,d0
(1)  929/  FF2402 : 3B40 0002           		move.w	d0,standby(a5)
(1)  930/  FF2406 : 302D 0002           .wait_cmd:	move.w	standby(a5),d0		; interrupt is ready?
(1)  931/  FF240A : 0800 0001           		btst    #1,d0
(1)  932/  FF240E : 66F6                		bne.s   .wait_cmd
(1)  933/  FF2410 :                     ; .wait_dma:	move.b	comm15(a5),d0		; Another flag to check
(1)  934/  FF2410 :                     ; 		btst	#6,d0
(1)  935/  FF2410 :                     ; 		beq.s	.wait_dma
(1)  936/  FF2410 :                     ; 		move.b	#1,d0
(1)  937/  FF2410 :                     ; 		move.b	d0,comm15(a5)
(1)  938/  FF2410 :                     
(1)  939/  FF2410 :                     ; 	; blast
(1)  940/  FF2410 :                     ; 	rept $200/128
(1)  941/  FF2410 :                     ; 		bsr.s	.blast
(1)  942/  FF2410 :                     ; 	endm
(1)  943/  FF2410 :                     ; 		move.l	#$C0000000,(vdp_ctrl).l	; DEBUG EXIT
(1)  944/  FF2410 :                     ; 		move.w	#$000,(vdp_data).l
(1)  945/  FF2410 :                     ; 		move.w	d7,sr			; Restore SR
(1)  946/  FF2410 :                     ; 		rts
(1)  947/  FF2410 :                     ; .blast:
(1)  948/  FF2410 :                     ; 	rept 128
(1)  949/  FF2410 :                     ; 		move.w	(a6)+,(a4)
(1)  950/  FF2410 :                     ; 	endm
(1)  951/  FF2410 :                     ; 		rts
(1)  952/  FF2410 :                     
(1)  953/  FF2410 :                     ; 	safer
(1)  954/  FF2410 : 389E                .l0:		move.w	(a6)+,(a4)		; Data Transfer
(1)  955/  FF2412 : 389E                		move.w	(a6)+,(a4)		;
(1)  956/  FF2414 : 389E                		move.w	(a6)+,(a4)		;
(1)  957/  FF2416 : 389E                		move.w	(a6)+,(a4)		;
(1)  958/  FF2418 : 082D 0007 0007      .l1:		btst	#7,dreqctl+1(a5)	; FIFO Full ?
(1)  959/  FF241E : 66F8                		bne.s	.l1
(1)  960/  FF2420 : 5946                		subq	#4,d6
(1)  961/  FF2422 : 64EC                		bcc.s	.l0
(1)  962/  FF2424 : 3A3C 0E00           		move.w	#$E00,d5
(1)  963/  FF2428 : 082D 0002 0006      		btst	#2,dreqctl(a5)		; DMA All OK ?
(1)  964/  FF242E : 668E                		bne.s	.retry
(1)  965/  FF2430 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l	; DEBUG EXIT
                    0004                
(1)  966/  FF243A : 33FC 0000 00C0 0000 		move.w	#$000,(vdp_data).l
(1)  967/  FF2442 : 46C7                		move.w	d7,sr			; Restore SR
(1)  968/  FF2444 : 4E75                		rts
(1)  969/  FF2446 :                     
(1)  970/  FF2446 :                     ; ====================================================================
(1)  971/  FF2446 :                     ; ------------------------------------------------------
(1)  972/  FF2446 :                     ; VBlank
(1)  973/  FF2446 :                     ; ------------------------------------------------------
(1)  974/  FF2446 :                     
(1)  975/  FF2446 :                     ; ------------------------------------------------------
(1)  976/  FF2446 :                     ; HBlank
(1)  977/  FF2446 :                     ; ------------------------------------------------------
(1)  978/  FF2446 :                     
(1)  979/  FF2446 :                     ; ====================================================================
(1)  980/  FF2446 :                     ; ------------------------------------------------------
(1)  981/  FF2446 :                     ; DATA
(1)  982/  FF2446 :                     ;
(1)  983/  FF2446 :                     ; Small stuff goes here
(1)  984/  FF2446 :                     ; ------------------------------------------------------
(1)  985/  FF2446 :                     
(1)  986/  FF2446 :                     str_Title:
(1)  987/  FF2446 : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO           (MODE)",$A
                    4D41 5253 4941 4E4F 
                    2020 2020 2020 2020 
                    2020 2028 4D4F 4445 
                    290A                
(1)  988/  FF2468 : 2020 2020 2020 2020 		dc.b "                         GEMA Tester",$A
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2047 454D 4120 5465 
                    7374 6572 0A        
(1)  989/  FF248D : 4368 6563 616E 646F 		dc.b "Checando cuanto aguanta",$A
                    2063 7561 6E74 6F20 
                    6167 7561 6E74 610A 
(1)  990/  FF24A5 : 656C 2064 7269 7665 		dc.b "el driver de sonido",0
                    7220 6465 2073 6F6E 
                    6964 6F00           
(1)  991/  FF24B9 :                     		align 2
(1)  992/  FF24BA :                     
(1)  993/  FF24BA : 200A                str_Cursor:	dc.b " ",$A
(1)  994/  FF24BC : 3E0A                		dc.b ">",$A
(1)  995/  FF24BE : 2000                		dc.b " ",0
(1)  996/  FF24C0 :                     
(1)  997/  FF24C0 :                     str_Status:
(1)  998/  FF24C0 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1)  999/  FF24C4 : 5C77 0A0A 0A0A      		dc.b "\\w",$A,$A,$A,$A
(1) 1000/  FF24CA : 5C77 0A             		dc.b "\\w",$A
(1) 1001/  FF24CD : 5C77 00             		dc.b "\\w",0
(1) 1002/  FF24D0 : FFFF 8832           		dc.l RAM_CurrIndx
(1) 1003/  FF24D4 : FFFF 8834           		dc.l RAM_CurrTrack
(1) 1004/  FF24D8 : FFFF 8836           		dc.l RAM_CurrTicks
(1) 1005/  FF24DC : FFFF 8838           		dc.l RAM_CurrTempo
(1) 1006/  FF24E0 :                     		align 2
(1) 1007/  FF24E0 :                     str_Gema:
(1) 1008/  FF24E0 : 4745 4D41 2053 4F55 		dc.b "GEMA SOUND DRIVER",$A
                    4E44 2044 5249 5645 
                    520A                
(1) 1009/  FF24F2 : 0A                  		dc.b $A
(1) 1010/  FF24F3 : 5472 6163 6B20 696E 		dc.b "Track index -----",$A,$A
                    6465 7820 2D2D 2D2D 
                    2D0A 0A             
(1) 1011/  FF2506 : 2020 536F 756E 645F 		dc.b "  Sound_TrkPlay",$A
                    5472 6B50 6C61 790A 
(1) 1012/  FF2516 : 2020 536F 756E 645F 		dc.b "  Sound_TrkStop",$A
                    5472 6B53 746F 700A 
(1) 1013/  FF2526 : 2020 536F 756E 645F 		dc.b "  Sound_TrkPause**",$A
                    5472 6B50 6175 7365 
                    2A2A 0A             
(1) 1014/  FF2539 : 2020 536F 756E 645F 		dc.b "  Sound_TrkResume**",$A
                    5472 6B52 6573 756D 
                    652A 2A0A           
(1) 1015/  FF254D : 2020 536F 756E 645F 		dc.b "  Sound_TrkTicks",$A
                    5472 6B54 6963 6B73 
                    0A                  
(1) 1016/  FF255E : 2020 536F 756E 645F 		dc.b "  Sound_GlbTempo",0
                    476C 6254 656D 706F 
                    00                  
(1) 1017/  FF256F :                     		align 2
(1) 1018/  FF2570 :                     str_COMM:
(1) 1019/  FF2570 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1) 1020/  FF257C : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",0
                    205C 7700           
(1) 1021/  FF2588 : 00A1 5120           		dc.l sysmars_reg+comm0
(1) 1022/  FF258C : 00A1 5122           		dc.l sysmars_reg+comm2
(1) 1023/  FF2590 : 00A1 5124           		dc.l sysmars_reg+comm4
(1) 1024/  FF2594 : 00A1 5126           		dc.l sysmars_reg+comm6
(1) 1025/  FF2598 : 00A1 5128           		dc.l sysmars_reg+comm8
(1) 1026/  FF259C : 00A1 512A           		dc.l sysmars_reg+comm10
(1) 1027/  FF25A0 : 00A1 512C           		dc.l sysmars_reg+comm12
(1) 1028/  FF25A4 : 00A1 512E           		dc.l sysmars_reg+comm14
(1) 1029/  FF25A8 :                     		align 2
(1) 1030/  FF25A8 :                     
(1) 1031/  FF25A8 :                     str_TempVal:
(1) 1032/  FF25A8 : 5C77 00             		dc.b "\\w",0
(1) 1033/  FF25AB : FFFF 8818           		dc.l RAM_EmiFlags
(1) 1034/  FF25AF :                     		align 2
(1) 1035/  FF25B0 :                     
(1) 1036/  FF25B0 :                     PAL_EMI:
(1) 1037/  FF25B0 : 0000                		dc.w 0
(1) 1038/  FF25B2 :                     		binclude "data/md/sprites/emi_pal.bin",2
(1) 1039/  FF25C6 :                     		align 2
(1) 1040/  FF25C6 :                     
(1) 1041/  FF25C6 : 0000 0000 0444 0888 PAL_TESTBOARD:	dc.w $0000,$0000,$0444,$0888,$0EEE,$0000,$0000,$0002,$0004,$0888
                    0EEE 0000 0000 0002 
                    0004 0888           
(1) 1042/  FF25DA :                     		align 2
(1) 1043/  FF25DA :                     ; 		binclude "data/md/bg/board_pal.bin"
(1) 1044/  FF25DA :                     ; 		align 2
(1) 1045/  FF25DA :                     MAP_TESTBOARD:
(1) 1046/  FF25DA :                     		binclude "data/md/bg/board_map.bin"
(1) 1047/  FF2E9A :                     		align 2
(1) 1048/  FF2E9A :                     
(1) 1049/  FF2E9A :                     ; ====================================================================
(1) 1050/  FF2E9A :                     ; Report size
(1) 1055/  FF2E9A :                     
      68/   305D2 :                     		dephase
      69/   305D2 :                     
      70/   305D2 :                     ; ====================================================================
      71/   305D2 :                     ; ----------------------------------------------------------------
      72/   305D2 :                     ; 68k DATA BANKs at $900000 1MB max
      73/   305D2 :                     ; ----------------------------------------------------------------
      74/   305D2 :                     
      75/   305D2 :                     	; First one is smaller than the rest...
      76/  9305D2 :                     		phase $900000+*				; Only one currently
      77/  9305D2 :                     		include "sound/tracks.asm"
(1)    1/  9305D2 :                     ; ================================================================
(1)    2/  9305D2 :                     ; ------------------------------------------------------------
(1)    3/  9305D2 :                     ; DATA SECTION
(1)    4/  9305D2 :                     ; 
(1)    5/  9305D2 :                     ; SOUND
(1)    6/  9305D2 :                     ; ------------------------------------------------------------
(1)    7/  9305D2 :                     
(1)    8/  9305D2 :                     ; Instrument macros
(1)    9/  9305D2 :                     ; do note that some 24-bit pointers add 90h to the MSB
(1)   10/  9305D2 :                     
(1)   11/  9305D2 :                     gInsNull macro
(1)   12/  9305D2 :                     	dc.b  -1,$00,$00,$00
(1)   13/  9305D2 :                     	dc.b $00,$00,$00,$00
(1)   14/  9305D2 :                     	endm
(1)   15/  9305D2 :                     
(1)   16/  9305D2 :                     ; alv: attack level (00=high)
(1)   17/  9305D2 :                     ; atk: attack rate
(1)   18/  9305D2 :                     ; slv: sustain (00=high)
(1)   19/  9305D2 :                     ; dky: decay rate (up)
(1)   20/  9305D2 :                     ; rrt: release rate (down)
(1)   21/  9305D2 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt
(1)   22/  9305D2 :                     	dc.b $80,pitch,alv,atk
(1)   23/  9305D2 :                     	dc.b slv,dky,rrt,$00
(1)   24/  9305D2 :                     	endm
(1)   25/  9305D2 :                     
(1)   26/  9305D2 :                     ; mode: noise mode %tmm (PSGN only)
(1)   27/  9305D2 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,mode
(1)   28/  9305D2 :                     	dc.b $90|mode,pitch,alv,atk
(1)   29/  9305D2 :                     	dc.b slv,dky,rrt,0
(1)   30/  9305D2 :                     	endm
(1)   31/  9305D2 :                     
(1)   32/  9305D2 :                     ; fmins - 24-bit ROM pointer to
(1)   33/  9305D2 :                     ; patch data
(1)   34/  9305D2 :                     gInsFm macro pitch,fmins
(1)   35/  9305D2 :                     	dc.b $A0,pitch,((fmins>>16)&$FF)|$90,((fmins>>8)&$FF)
(1)   36/  9305D2 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   37/  9305D2 :                     	endm
(1)   38/  9305D2 :                     
(1)   39/  9305D2 :                     ; Same but for Channel 3 special, the last
(1)   40/  9305D2 :                     ; 4 words set each OP's frequency in this order:
(1)   41/  9305D2 :                     ; OP1 OP2 OP3 OP4
(1)   42/  9305D2 :                     gInsFm3	macro pitch,fmins
(1)   43/  9305D2 :                     	dc.b $B0,pitch,((fmins>>16)&$FF)|$90,((fmins>>8)&$FF)
(1)   44/  9305D2 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   45/  9305D2 :                     	endm
(1)   46/  9305D2 :                     
(1)   47/  9305D2 :                     ; start: Pointer to sample data, the first 3 bytes of
(1)   48/  9305D2 :                     ;        the sample contains the LENGTH of the sample
(1)   49/  9305D2 :                     ; loop: Sample to jump to, 0-start
(1)   50/  9305D2 :                     ; flags: 0-dont loop, 1-loop
(1)   51/  9305D2 :                     gInsDac	macro pitch,start,flags
(1)   52/  9305D2 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF)|$90,((start>>8)&$FF)
(1)   53/  9305D2 :                     	dc.b start&$FF,0,0,0
(1)   54/  9305D2 :                     	endm
(1)   55/  9305D2 :                     
(1)   56/  9305D2 :                     ; flags:
(1)   57/  9305D2 :                     ; %00SL
(1)   58/  9305D2 :                     ; S - Sample is in stereo
(1)   59/  9305D2 :                     ; L - Loop sample
(1)   60/  9305D2 :                     gInsPwm	macro pitch,start,flags
(1)   61/  9305D2 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   62/  9305D2 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   63/  9305D2 :                     	endm
(1)   64/  9305D2 :                     
(1)   65/  9305D2 :                     ; ------------------------------------------------------------
(1)   66/  9305D2 :                     ; PWM pitches:
(1)   67/  9305D2 :                     ; -17 - 8000
(1)   68/  9305D2 :                     
(1)   69/  9305D2 :                     ; ------------------------------------------------------------
(1)   70/  9305D2 :                     ; SFX tracks
(1)   71/  9305D2 :                     ; ------------------------------------------------------------
(1)   72/  9305D2 :                     
(1)   73/  9305D2 :                     GemaTrkData_Sfx:
(1)   74/  9305D2 : 0093 05E1           	dc.l GemaSfxPat_Boom
(1)   75/  9305D6 : 0093 05DE           	dc.l GemaSfxBlk_Boom
(1)   76/  9305DA : 0093 0629           	dc.l GemaSfxIns_Boom
(1)   77/  9305DE :                     
(1)   78/  9305DE :                     GemaSfxBlk_Boom:
(1)   79/  9305DE :                     	binclude "sound/tracks/sfx_boom_blk.bin"
(1)   80/  9305E1 :                     GemaSfxPat_Boom:
(1)   81/  9305E1 :                     	binclude "sound/tracks/sfx_boom_patt.bin"
(1)   82/  930629 :                     GemaSfxIns_Boom:
(1)   83/  930629 : (MACRO)             	gInsFm3 0,FmIns_Fm3_Explosion
(1)   83/  930629 : B000 92EF                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF)|$90,((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)   83/  93062D : 3800 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)   84/  930631 : (MACRO)             	gInsFm 0,FmIns_Ding_toy
(1)   84/  930631 : A000 92F2                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF)|$90,((FMINS_DING_TOY>>8)&$FF)
(1)   84/  930635 : 4000 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)   85/  930639 :                     
(1)   86/  930639 :                     GemaTrk_blk_TEST:
(1)   87/  930639 :                     	binclude "sound/tracks/kid_blk.bin"
(1)   88/  930642 :                     GemaTrk_patt_TEST:
(1)   89/  930642 :                     	binclude "sound/tracks/kid_patt.bin"
(1)   90/  931163 :                     GemaTrk_ins_TEST:
(1)   91/  931163 : (MACRO)             	gInsFm -12,FmIns_Bass_groove_gem
(1)   91/  931163 : A0F4 92F0                   dc.b $A0,-12,((FMINS_BASS_GROOVE_GEM>>16)&$FF)|$90,((FMINS_BASS_GROOVE_GEM>>8)&$FF)
(1)   91/  931167 : C000 0000                   dc.b FMINS_BASS_GROOVE_GEM&$FF,$00,$00,$00
(1)   92/  93116B : (MACRO)             	gInsFm -12,FmIns_Guitar_gem
(1)   92/  93116B : A0F4 92EF                   dc.b $A0,-12,((FMINS_GUITAR_GEM>>16)&$FF)|$90,((FMINS_GUITAR_GEM>>8)&$FF)
(1)   92/  93116F : 6000 0000                   dc.b FMINS_GUITAR_GEM&$FF,$00,$00,$00
(1)   93/  931173 : (MACRO)             	gInsNull
(1)   93/  931173 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   93/  931177 : 0000 0000                   dc.b $00,$00,$00,$00
(1)   94/  93117B : (MACRO)             	gInsNull
(1)   94/  93117B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   94/  93117F : 0000 0000                   dc.b $00,$00,$00,$00
(1)   95/  931183 : (MACRO)             	gInsNull
(1)   95/  931183 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   95/  931187 : 0000 0000                   dc.b $00,$00,$00,$00
(1)   96/  93118B : (MACRO)             	gInsNull
(1)   96/  93118B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   96/  93118F : 0000 0000                   dc.b $00,$00,$00,$00
(1)   97/  931193 : (MACRO)             	gInsNull
(1)   97/  931193 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   97/  931197 : 0000 0000                   dc.b $00,$00,$00,$00
(1)   98/  93119B : (MACRO)             	gInsNull
(1)   98/  93119B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   98/  93119F : 0000 0000                   dc.b $00,$00,$00,$00
(1)   99/  9311A3 : (MACRO)             	gInsNull
(1)   99/  9311A3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)   99/  9311A7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  100/  9311AB : (MACRO)             	gInsNull
(1)  100/  9311AB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  100/  9311AF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  101/  9311B3 : (MACRO)             	gInsNull
(1)  101/  9311B3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  101/  9311B7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  102/  9311BB : (MACRO)             	gInsNull
(1)  102/  9311BB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  102/  9311BF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  103/  9311C3 : (MACRO)             	gInsNull
(1)  103/  9311C3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  103/  9311C7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  104/  9311CB : (MACRO)             	gInsNull
(1)  104/  9311CB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  104/  9311CF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  105/  9311D3 : (MACRO)             	gInsNull
(1)  105/  9311D3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  105/  9311D7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  106/  9311DB : (MACRO)             	gInsNull
(1)  106/  9311DB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  106/  9311DF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  107/  9311E3 : (MACRO)             	gInsNull
(1)  107/  9311E3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  107/  9311E7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  108/  9311EB : (MACRO)             	gInsNull
(1)  108/  9311EB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  108/  9311EF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  109/  9311F3 : (MACRO)             	gInsNull
(1)  109/  9311F3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  109/  9311F7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  110/  9311FB : (MACRO)             	gInsNull
(1)  110/  9311FB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  110/  9311FF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  111/  931203 : (MACRO)             	gInsNull
(1)  111/  931203 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  111/  931207 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  112/  93120B : (MACRO)             	gInsNull
(1)  112/  93120B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  112/  93120F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  113/  931213 : (MACRO)             	gInsNull
(1)  113/  931213 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  113/  931217 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  114/  93121B : (MACRO)             	gInsNull
(1)  114/  93121B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  114/  93121F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  115/  931223 :                     
(1)  116/  931223 :                     
(1)  117/  931223 :                     ; 	gInsPwm -17,SmpIns_Bell_Ice,0
(1)  118/  931223 :                     ; 	gInsPwm -17,SmpIns_Brass1_Hi,%01
(1)  119/  931223 :                     ; 	gInsPwm -17,SmpIns_Brass1_Low,%01
(1)  120/  931223 :                     ; 	gInsFm  -24,FmIns_Bass_groove
(1)  121/  931223 :                     ; 	gInsFm3   0,FmIns_Fm3_OpenHat
(1)  122/  931223 :                     ; 	gInsPwm -17,SmpIns_Snare_jam,0
(1)  123/  931223 :                     ; 	gInsPwm -17,SmpIns_Kick_jam,0
(1)  124/  931223 :                     ; 	gInsPwm -17,SmpIns_SnrTom_1,0
(1)  125/  931223 :                     ; 	gInsPwm -17,SmpIns_Forest_1,0
(1)  126/  931223 :                     
(1)  127/  931223 :                     GemaTrk_blk_BeMine:
(1)  128/  931223 :                     	binclude "sound/tracks/bemine_blk.bin"
(1)  129/  931234 :                     GemaTrk_patt_BeMine:
(1)  130/  931234 :                     	binclude "sound/tracks/bemine_patt.bin"
(1)  131/  932324 :                     GemaTrk_ins_BeMine:
(1)  132/  932324 : (MACRO)             	gInsPwm -17,SmpIns_Bell_Ice,0
(1)  132/  932324 : D0EF 0205                   dc.b $D0|0,-17,((SMPINS_BELL_ICE>>24)&$FF),((SMPINS_BELL_ICE>>16)&$FF)
(1)  132/  932328 : A7F0 0000                   dc.b ((SMPINS_BELL_ICE>>8)&$FF),SMPINS_BELL_ICE&$FF,0,0
(1)  133/  93232C : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Hi,%01
(1)  133/  93232C : D1EF 0205                   dc.b $D0|%01,-17,((SMPINS_BRASS1_HI>>24)&$FF),((SMPINS_BRASS1_HI>>16)&$FF)
(1)  133/  932330 : E31C 0000                   dc.b ((SMPINS_BRASS1_HI>>8)&$FF),SMPINS_BRASS1_HI&$FF,0,0
(1)  134/  932334 : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Low,%01
(1)  134/  932334 : D1EF 0206                   dc.b $D0|%01,-17,((SMPINS_BRASS1_LOW>>24)&$FF),((SMPINS_BRASS1_LOW>>16)&$FF)
(1)  134/  932338 : 5EE8 0000                   dc.b ((SMPINS_BRASS1_LOW>>8)&$FF),SMPINS_BRASS1_LOW&$FF,0,0
(1)  135/  93233C : (MACRO)             	gInsFm  -24,FmIns_Bass_groove
(1)  135/  93233C : A0E8 92F0                   dc.b $A0,-24,((FMINS_BASS_GROOVE>>16)&$FF)|$90,((FMINS_BASS_GROOVE>>8)&$FF)
(1)  135/  932340 : 8000 0000                   dc.b FMINS_BASS_GROOVE&$FF,$00,$00,$00
(1)  136/  932344 : (MACRO)             	gInsFm3   0,FmIns_Fm3_OpenHat
(1)  136/  932344 : B000 92EE                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF)|$90,((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  136/  932348 : E800 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  137/  93234C : (MACRO)             	gInsPwm -17,SmpIns_Snare_jam,0
(1)  137/  93234C : D0EF 0207                   dc.b $D0|0,-17,((SMPINS_SNARE_JAM>>24)&$FF),((SMPINS_SNARE_JAM>>16)&$FF)
(1)  137/  932350 : 2E6C 0000                   dc.b ((SMPINS_SNARE_JAM>>8)&$FF),SMPINS_SNARE_JAM&$FF,0,0
(1)  138/  932354 : (MACRO)             	gInsPwm -17,SmpIns_Kick_jam,0
(1)  138/  932354 : D0EF 0207                   dc.b $D0|0,-17,((SMPINS_KICK_JAM>>24)&$FF),((SMPINS_KICK_JAM>>16)&$FF)
(1)  138/  932358 : 23A0 0000                   dc.b ((SMPINS_KICK_JAM>>8)&$FF),SMPINS_KICK_JAM&$FF,0,0
(1)  139/  93235C : (MACRO)             	gInsPwm -17,SmpIns_SnrTom_1,0
(1)  139/  93235C : D0EF 0207                   dc.b $D0|0,-17,((SMPINS_SNRTOM_1>>24)&$FF),((SMPINS_SNRTOM_1>>16)&$FF)
(1)  139/  932360 : 37D8 0000                   dc.b ((SMPINS_SNRTOM_1>>8)&$FF),SMPINS_SNRTOM_1&$FF,0,0
(1)  140/  932364 : (MACRO)             	gInsPwm -17,SmpIns_Forest_1,0
(1)  140/  932364 : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_FOREST_1>>24)&$FF),((SMPINS_FOREST_1>>16)&$FF)
(1)  140/  932368 : DAB4 0000                   dc.b ((SMPINS_FOREST_1>>8)&$FF),SMPINS_FOREST_1&$FF,0,0
(1)  141/  93236C : (MACRO)             	gInsNull
(1)  141/  93236C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  141/  932370 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  142/  932374 : (MACRO)             	gInsNull
(1)  142/  932374 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  142/  932378 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  143/  93237C : (MACRO)             	gInsNull
(1)  143/  93237C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  143/  932380 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  144/  932384 : (MACRO)             	gInsNull
(1)  144/  932384 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  144/  932388 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  145/  93238C : (MACRO)             	gInsNull
(1)  145/  93238C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  145/  932390 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  146/  932394 : (MACRO)             	gInsNull
(1)  146/  932394 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  146/  932398 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  147/  93239C : (MACRO)             	gInsNull
(1)  147/  93239C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  147/  9323A0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  148/  9323A4 : (MACRO)             	gInsNull
(1)  148/  9323A4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  148/  9323A8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  149/  9323AC : (MACRO)             	gInsNull
(1)  149/  9323AC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  149/  9323B0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  150/  9323B4 : (MACRO)             	gInsNull
(1)  150/  9323B4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  150/  9323B8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  151/  9323BC : (MACRO)             	gInsNull
(1)  151/  9323BC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  151/  9323C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  152/  9323C4 : (MACRO)             	gInsNull
(1)  152/  9323C4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  152/  9323C8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  153/  9323CC : (MACRO)             	gInsNull
(1)  153/  9323CC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  153/  9323D0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  154/  9323D4 : (MACRO)             	gInsNull
(1)  154/  9323D4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  154/  9323D8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  155/  9323DC : (MACRO)             	gInsNull
(1)  155/  9323DC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  155/  9323E0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  156/  9323E4 : (MACRO)             	gInsNull
(1)  156/  9323E4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  156/  9323E8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  157/  9323EC :                     
(1)  158/  9323EC :                     ;  align $8000
(1)  159/  9323EC :                     
(1)  160/  9323EC :                     ; GemaTrk_cirno_blk:
(1)  161/  9323EC :                     ; 	binclude "sound/tracks/mecano_blk.bin"
(1)  162/  9323EC :                     ; GemaTrk_cirno_patt:
(1)  163/  9323EC :                     ; 	binclude "sound/tracks/mecano_patt.bin"
(1)  164/  9323EC :                     ; GemaTrk_cirno_ins:
(1)  165/  9323EC :                     ; 	gInsNull
(1)  166/  9323EC :                     ; 	gInsPsgN   0,$00,$00,$00,$00,$00,%100
(1)  167/  9323EC :                     ; 	gInsFm    0,FmIns_PianoM1
(1)  168/  9323EC :                     ; 	gInsNull;gInsPsg   0,$00,$00,$00,$00,$02
(1)  169/  9323EC :                     ; 	gInsFm    0,FmIns_Bass_italo
(1)  170/  9323EC :                     ; 	gInsDac   0,DacIns_SaurKick,DacIns_SaurKick_e,0,0
(1)  171/  9323EC :                     ; 	gInsNull
(1)  172/  9323EC :                     ; 	gInsDac   0,DacIns_CdSnare,DacIns_CdSnare_e,0,0
(1)  173/  9323EC :                     ; 	gInsNull
(1)  174/  9323EC :                     ; 	gInsNull
(1)  175/  9323EC :                     ; 	gInsNull
(1)  176/  9323EC :                     ; 	gInsNull
(1)  177/  9323EC :                     ; 	gInsNull
(1)  178/  9323EC :                     ; 	gInsNull
(1)  179/  9323EC :                     ; 	gInsNull
(1)  180/  9323EC :                     
(1)  181/  9323EC :                     ;
(1)  182/  9323EC :                     
(1)  183/  9323EC :                     
(1)  184/  9323EC :                     GemaTrk_blk_chrono:
(1)  185/  9323EC :                     	binclude "sound/tracks/chrono_blk.bin"
(1)  186/  9323F7 :                     GemaTrk_patt_chrono:
(1)  187/  9323F7 :                     	binclude "sound/tracks/chrono_patt.bin"
(1)  188/  938BB6 :                     GemaTrk_ins_chrono:
(1)  189/  938BB6 : (MACRO)             	gInsPsg  +12,$50,$20,$30,$10,$04
(1)  189/  938BB6 : 800C 5020                   dc.b $80,+12,$50,$20
(1)  189/  938BBA : 3010 0400                   dc.b $30,$10,$04,$00
(1)  190/  938BBE : (MACRO)             	gInsFm     0,FmIns_Bell_China
(1)  190/  938BBE : A000 92F2                   dc.b $A0,0,((FMINS_BELL_CHINA>>16)&$FF)|$90,((FMINS_BELL_CHINA>>8)&$FF)
(1)  190/  938BC2 : 6000 0000                   dc.b FMINS_BELL_CHINA&$FF,$00,$00,$00
(1)  191/  938BC6 : (MACRO)             	gInsFm     0,FmIns_Bass_calm
(1)  191/  938BC6 : A000 92F0                   dc.b $A0,0,((FMINS_BASS_CALM>>16)&$FF)|$90,((FMINS_BASS_CALM>>8)&$FF)
(1)  191/  938BCA : 2000 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  192/  938BCE : (MACRO)             	gInsPsgN   0,$00,$00,$00,$08,$08,%110
(1)  192/  938BCE : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  192/  938BD2 : 0008 0800                   dc.b $00,$08,$08,0
(1)  193/  938BD6 : (MACRO)             	gInsPsgN   0,$00,$00,$00,$08,$08,%101
(1)  193/  938BD6 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  193/  938BDA : 0008 0800                   dc.b $00,$08,$08,0
(1)  194/  938BDE : (MACRO)             	gInsPsgN   0,$00,$00,$00,$10,$10,%100
(1)  194/  938BDE : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  194/  938BE2 : 0010 1000                   dc.b $00,$10,$10,0
(1)  195/  938BE6 : (MACRO)             	gInsFm   -12,FmIns_Brass_Eur,0
(1)  195/  938BE6 : A0F4 92F2                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF)|$90,((FMINS_BRASS_EUR>>8)&$FF)
(1)  195/  938BEA : 8000 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  196/  938BEE : (MACRO)             	gInsNull
(1)  196/  938BEE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  196/  938BF2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/  938BF6 :                     
(1)  198/  938BF6 :                     GemaTrk_blk_TEST2:
(1)  199/  938BF6 :                     	binclude "sound/tracks/nokiaarab_blk.bin"
(1)  200/  938BFE :                     GemaTrk_patt_TEST2:
(1)  201/  938BFE :                     	binclude "sound/tracks/nokiaarab_patt.bin"
(1)  202/  939E64 :                     GemaTrk_ins_TEST2:
(1)  203/  939E64 : (MACRO)             	gInsNull
(1)  203/  939E64 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  203/  939E68 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  204/  939E6C : (MACRO)             	gInsFm -12,FmIns_Bass_calm
(1)  204/  939E6C : A0F4 92F0                   dc.b $A0,-12,((FMINS_BASS_CALM>>16)&$FF)|$90,((FMINS_BASS_CALM>>8)&$FF)
(1)  204/  939E70 : 2000 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  205/  939E74 : (MACRO)             	gInsPsg 0,$80,$00,$10,$40,$06
(1)  205/  939E74 : 8000 8000                   dc.b $80,0,$80,$00
(1)  205/  939E78 : 1040 0600                   dc.b $10,$40,$06,$00
(1)  206/  939E7C : (MACRO)             	gInsNull
(1)  206/  939E7C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  206/  939E80 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  207/  939E84 : (MACRO)             	gInsFm -12,FmIns_Violin_gem
(1)  207/  939E84 : A0F4 92F3                   dc.b $A0,-12,((FMINS_VIOLIN_GEM>>16)&$FF)|$90,((FMINS_VIOLIN_GEM>>8)&$FF)
(1)  207/  939E88 : 0000 0000                   dc.b FMINS_VIOLIN_GEM&$FF,$00,$00,$00
(1)  208/  939E8C : (MACRO)             	gInsNull
(1)  208/  939E8C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  208/  939E90 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  209/  939E94 : (MACRO)             	gInsNull
(1)  209/  939E94 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  209/  939E98 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  210/  939E9C : (MACRO)             	gInsNull
(1)  210/  939E9C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  210/  939EA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  211/  939EA4 : (MACRO)             	gInsFm -12,FmIns_Trumpet_1
(1)  211/  939EA4 : A0F4 92F1                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF)|$90,((FMINS_TRUMPET_1>>8)&$FF)
(1)  211/  939EA8 : 6000 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  212/  939EAC : (MACRO)             	gInsNull
(1)  212/  939EAC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  212/  939EB0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  213/  939EB4 : (MACRO)             	gInsNull
(1)  213/  939EB4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  213/  939EB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  214/  939EBC : (MACRO)             	gInsNull
(1)  214/  939EBC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  214/  939EC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  215/  939EC4 : (MACRO)             	gInsNull
(1)  215/  939EC4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  215/  939EC8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/  939ECC : (MACRO)             	gInsNull
(1)  216/  939ECC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  216/  939ED0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  217/  939ED4 : (MACRO)             	gInsNull
(1)  217/  939ED4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  217/  939ED8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  218/  939EDC : (MACRO)             	gInsNull
(1)  218/  939EDC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  218/  939EE0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  219/  939EE4 : (MACRO)             	gInsNull
(1)  219/  939EE4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  219/  939EE8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  220/  939EEC : (MACRO)             	gInsNull
(1)  220/  939EEC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  220/  939EF0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  221/  939EF4 : (MACRO)             	gInsNull
(1)  221/  939EF4 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  221/  939EF8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/  939EFC : (MACRO)             	gInsNull
(1)  222/  939EFC : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  222/  939F00 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  223/  939F04 : (MACRO)             	gInsNull
(1)  223/  939F04 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  223/  939F08 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  224/  939F0C : (MACRO)             	gInsNull
(1)  224/  939F0C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  224/  939F10 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  225/  939F14 : (MACRO)             	gInsNull
(1)  225/  939F14 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  225/  939F18 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  226/  939F1C : (MACRO)             	gInsNull
(1)  226/  939F1C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  226/  939F20 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  227/  939F24 : (MACRO)             	gInsNull
(1)  227/  939F24 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  227/  939F28 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  228/  939F2C : (MACRO)             	gInsNull
(1)  228/  939F2C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  228/  939F30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  229/  939F34 : (MACRO)             	gInsNull
(1)  229/  939F34 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  229/  939F38 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  230/  939F3C : (MACRO)             	gInsNull
(1)  230/  939F3C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  230/  939F40 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  231/  939F44 : (MACRO)             	gInsNull
(1)  231/  939F44 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  231/  939F48 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  232/  939F4C :                     
(1)  233/  939F4C :                     ; HILLS
(1)  234/  939F4C :                     GemaTrk_blk_HILLS:
(1)  235/  939F4C :                     	binclude "sound/tracks/hill_blk.bin"
(1)  236/  939F58 :                     GemaTrk_patt_HILLS:
(1)  237/  939F58 :                     	binclude "sound/tracks/hill_patt.bin"
(1)  238/  93AACB :                     GemaTrk_ins_HILLS:
(1)  239/  93AACB : (MACRO)             	gInsPsg +2,$40,$02,$30,$10,$00
(1)  239/  93AACB : 8002 4002                   dc.b $80,+2,$40,$02
(1)  239/  93AACF : 3010 0000                   dc.b $30,$10,$00,$00
(1)  240/  93AAD3 : (MACRO)             	gInsFm -10,FmIns_Trumpet_1
(1)  240/  93AAD3 : A0F6 92F1                   dc.b $A0,-10,((FMINS_TRUMPET_1>>16)&$FF)|$90,((FMINS_TRUMPET_1>>8)&$FF)
(1)  240/  93AAD7 : 6000 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  241/  93AADB : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$04,%110
(1)  241/  93AADB : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  241/  93AADF : 0000 0400                   dc.b $00,$00,$04,0
(1)  242/  93AAE3 : (MACRO)             	gInsDac -3,DacIns_LowString,1;gInsPwm -8,DacIns_LowString,1
(1)  242/  93AAE3 : C1FD 9263                   dc.b $C0|1,-3,((DACINS_LOWSTRING>>16)&$FF)|$90,((DACINS_LOWSTRING>>8)&$FF)
(1)  242/  93AAE7 : 5C00 0000                   dc.b DACINS_LOWSTRING&$FF,0,0,0
(1)  243/  93AAEB : (MACRO)             	gInsFm -8-12,FmIns_Ding_Toy
(1)  243/  93AAEB : A0EC 92F2                   dc.b $A0,-8-12,((FMINS_DING_TOY>>16)&$FF)|$90,((FMINS_DING_TOY>>8)&$FF)
(1)  243/  93AAEF : 4000 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  244/  93AAF3 : (MACRO)             	gInsFm -25,FmIns_Bass_3
(1)  244/  93AAF3 : A0E7 92F0                   dc.b $A0,-25,((FMINS_BASS_3>>16)&$FF)|$90,((FMINS_BASS_3>>8)&$FF)
(1)  244/  93AAF7 : 6000 0000                   dc.b FMINS_BASS_3&$FF,$00,$00,$00
(1)  245/  93AAFB : (MACRO)             	gInsNull
(1)  245/  93AAFB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  245/  93AAFF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  246/  93AB03 : (MACRO)             	gInsNull
(1)  246/  93AB03 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  246/  93AB07 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  247/  93AB0B : (MACRO)             	gInsNull
(1)  247/  93AB0B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  247/  93AB0F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  248/  93AB13 : (MACRO)             	gInsNull
(1)  248/  93AB13 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  248/  93AB17 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/  93AB1B : (MACRO)             	gInsNull
(1)  249/  93AB1B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  249/  93AB1F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  250/  93AB23 : (MACRO)             	gInsNull
(1)  250/  93AB23 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  250/  93AB27 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/  93AB2B : (MACRO)             	gInsNull
(1)  251/  93AB2B : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  251/  93AB2F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/  93AB33 :                     
(1)  253/  93AB33 :                     ; 	gInsDac +07,DacIns_Snare_Gem,0,0
(1)  254/  93AB33 :                     ; 	gInsFm -12,FmIns_Trumpet_2
(1)  255/  93AB33 :                     ; 	gInsFm -12,FmIns_Bass_groove
(1)  256/  93AB33 :                     ; 	gInsDac +20,DacIns_SaurKick,0,0
(1)  257/  93AB33 :                     ; 	gInsNull
(1)  258/  93AB33 :                     ; 	gInsFm -12,FmIns_PianoM1
(1)  259/  93AB33 :                     ; 	gInsPsg -12,$00,$00,$00,$02,$02
(1)  260/  93AB33 :                     ; 	gInsPsgN  0,$10,$10,$00,$10,$40,%100
(1)  261/  93AB33 :                     ; 	gInsNull
(1)  262/  93AB33 :                     ; 	gInsFm  -24,FmIns_Brass_Eur,0
(1)  263/  93AB33 :                     ; 	gInsNull
(1)  264/  93AB33 :                     ; 	gInsNull
(1)  265/  93AB33 :                     ; 	gInsNull
(1)  266/  93AB33 :                     ; 	gInsNull
(1)  267/  93AB33 :                     ; 	gInsNull
(1)  268/  93AB33 :                     ; 	gInsNull
(1)  269/  93AB33 :                     ; 	gInsNull
(1)  270/  93AB33 :                     ; 	gInsNull
(1)  271/  93AB33 :                     
(1)  272/  93AB33 :                     
(1)  273/  93AB33 :                     ; 	gInsPsg   0,$40,$FF,$00,$10,$01
(1)  274/  93AB33 :                     ; 	gInsDac +24,DacIns_SaurKick,0,0
(1)  275/  93AB33 :                     ;
(1)  276/  93AB33 :                     ; 	gInsFm 0,FmIns_Organ_M1
(1)  277/  93AB33 :                     ; 	gInsNull
(1)  278/  93AB33 :                     ; 	gInsDac +24,DacIns_CdSnare,0,0
(1)  279/  93AB33 :                     ; 	gInsNull
(1)  280/  93AB33 :                     ; 	gInsFm 0,FmIns_Trumpet_2
(1)  281/  93AB33 :                     ; 	gInsNull
(1)  282/  93AB33 :                     ; 	gInsNull
(1)  283/  93AB33 :                     ; 	gInsNull
(1)  284/  93AB33 :                     ; 	gInsNull
(1)  285/  93AB33 :                     ; 	gInsNull
(1)  286/  93AB33 :                     ; 	gInsNull
(1)  287/  93AB33 :                     ; 	gInsNull
(1)  288/  93AB33 :                     
(1)  289/  93AB33 :                     ; GemaTrk_doom_blk:
(1)  290/  93AB33 :                     ; 	binclude "sound/tracks/doom_blk.bin"
(1)  291/  93AB33 :                     ; GemaTrk_doom_patt:
(1)  292/  93AB33 :                     ; 	binclude "sound/tracks/doom_patt.bin"
(1)  293/  93AB33 :                     ; GemaTrk_doom_ins:
(1)  294/  93AB33 :                     ; 	gInsFm    0,FmIns_Bass_3,0
(1)  295/  93AB33 :                     ; 	gInsDac -12,DacIns_Snare_Gem,DacIns_Snare_Gem_e,0,0
(1)  296/  93AB33 :                     ; 	gInsFm  -36,FmIns_DrumKick_gem,0
(1)  297/  93AB33 :                     ; 	gInsDac -12,DacIns_Snare_Gem,DacIns_Snare_Gem_e,0,0
(1)  298/  93AB33 :                     ; 	gInsFm    0,FmIns_Bass_heavy,0
(1)  299/  93AB33 :                     ; 	gInsFm    0,FmIns_Guitar_1,0
(1)  300/  93AB33 :                     ; 	gInsFm3   0,FmIns_Fm3_OpenHat
(1)  301/  93AB33 :                     ;
(1)  302/  93AB33 :                     ;
(1)  303/  93AB33 :                     ; GemaTrk_moon_blk:
(1)  304/  93AB33 :                     ; 	binclude "sound/tracks/brinstar_blk.bin"
(1)  305/  93AB33 :                     ; GemaTrk_moon_patt:
(1)  306/  93AB33 :                     ; 	binclude "sound/tracks/brinstar_patt.bin"
(1)  307/  93AB33 :                     ; GemaTrk_moon_ins:
(1)  308/  93AB33 :                     ; 	gInsPsg   0,$40,$FF,$00,$10,$10
(1)  309/  93AB33 :                     ; 	gInsPsgN  0,$00,$FF,$20,$10,$10,%100
(1)  310/  93AB33 :                     ; 	gInsDac  +17,DacIns_CdSnare,0,0
(1)  311/  93AB33 :                     ; 	gInsDac  +17,DacIns_CdSnare,0,0
(1)  312/  93AB33 :                     ; 	gInsFm  -12,FmIns_Brass_Eur,0
(1)  313/  93AB33 :                     ; 	gInsNull
(1)  314/  93AB33 :                     ; 	gInsFm    0,FmIns_Bass_groove,0
(1)  315/  93AB33 :                     ; 	gInsNull
(1)  316/  93AB33 :                     ; 	gInsNull
(1)  317/  93AB33 :                     ; 	gInsNull
(1)  318/  93AB33 :                     ; 	gInsNull
(1)  319/  93AB33 :                     ; 	gInsFm  0,FmIns_Bass_calm,0
(1)  320/  93AB33 :                     ; 	gInsPsg   0,$20,$10,$80,$00,$00
(1)  321/  93AB33 :                     
(1)  322/  93AB33 :                     
(1)  323/  93AB33 :                     ; 	gInsFm  -24,FmIns_Bass_calm,0
(1)  324/  93AB33 :                     ; 	gInsPsg   0,$10,$80,$10,$20,$04
(1)  325/  93AB33 :                     ; 	gInsFm  -12,FmIns_Brass_Eur,0
(1)  326/  93AB33 :                     ; 	gInsPsg   0,$10,$80,$10,$F0,$01
(1)  327/  93AB33 :                     ; 	gInsDac -12,DacIns_SaurKick,DacIns_SaurKick_e,0,0
(1)  328/  93AB33 :                     ; 	gInsPsgN  0,$00,$FF,$00,$08,$08,%100
(1)  329/  93AB33 :                     ;
(1)  330/  93AB33 :                     ;
(1)  331/  93AB33 :                     ; GemaTrk_brinstr_blk:
(1)  332/  93AB33 :                     ; 	binclude "sound/tracks/brinstr_blk.bin"
(1)  333/  93AB33 :                     ; GemaTrk_brinstr_patt:
(1)  334/  93AB33 :                     ; 	binclude "sound/tracks/brinstr_patt.bin"
(1)  335/  93AB33 :                     ; GemaTrk_brinstr_ins:
(1)  336/  93AB33 :                     ; 	gInsPsg   0,$40,$70,$30,$F0,$01
(1)  337/  93AB33 :                     ; 	gInsPsgN  0,$00,$FF,$00,$01,$01,%011
(1)  338/  93AB33 :                     ;
(1)  339/  93AB33 :                     ; GemaTrk_gigalo_blk:
(1)  340/  93AB33 :                     ; 	binclude "sound/tracks/gigalo_blk.bin"
(1)  341/  93AB33 :                     ; GemaTrk_gigalo_patt:
(1)  342/  93AB33 :                     ; 	binclude "sound/tracks/gigalo_patt.bin"
(1)  343/  93AB33 :                     ; GemaTrk_gigalo_ins:
(1)  344/  93AB33 :                     ; 	gInsPsg   0,$20,$80,$40,$08,$08
(1)  345/  93AB33 :                     ; 	gInsPsgN  0,$00,$FF,$00,$10,$10,%100
(1)  346/  93AB33 :                     ; 	gInsPsgN  0,$00,$FF,$00,$10,$10,%101
(1)  347/  93AB33 :                     ; 	gInsPsgN  0,$00,$FF,$00,$10,$10,%110
(1)  348/  93AB33 :                     ; 	gInsNull
(1)  349/  93AB33 :                     ;
(1)  350/  93AB33 :                     GemaTrk_mecano_blk:
(1)  351/  93AB33 :                     	binclude "sound/tracks/ttzgf_blk.bin"
(1)  352/  93AB54 :                     GemaTrk_mecano_patt:
(1)  353/  93AB54 :                     	binclude "sound/tracks/ttzgf_patt.bin"
(1)  354/  93D0A5 :                     GemaTrk_mecano_ins:
(1)  355/  93D0A5 : (MACRO)             	gInsFm    0,FmIns_Bass_groove
(1)  355/  93D0A5 : A000 92F0                   dc.b $A0,0,((FMINS_BASS_GROOVE>>16)&$FF)|$90,((FMINS_BASS_GROOVE>>8)&$FF)
(1)  355/  93D0A9 : 8000 0000                   dc.b FMINS_BASS_GROOVE&$FF,$00,$00,$00
(1)  356/  93D0AD : (MACRO)             	gInsPsg   0,$40,$C0,$20,$10,$10
(1)  356/  93D0AD : 8000 40C0                   dc.b $80,0,$40,$C0
(1)  356/  93D0B1 : 2010 1000                   dc.b $20,$10,$10,$00
(1)  357/  93D0B5 : (MACRO)             	gInsPsg   0,$60,$80,$20,$F0,$01
(1)  357/  93D0B5 : 8000 6080                   dc.b $80,0,$60,$80
(1)  357/  93D0B9 : 20F0 0100                   dc.b $20,$F0,$01,$00
(1)  358/  93D0BD : (MACRO)             	gInsFm  -12,FmIns_Brass_Eur
(1)  358/  93D0BD : A0F4 92F2                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF)|$90,((FMINS_BRASS_EUR>>8)&$FF)
(1)  358/  93D0C1 : 8000 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  359/  93D0C5 : (MACRO)             	gInsPsgN 60,$00,$FF,$20,$10,$10,%111
(1)  359/  93D0C5 : 973C 00FF                   dc.b $90|%111,60,$00,$FF
(1)  359/  93D0C9 : 2010 1000                   dc.b $20,$10,$10,0
(1)  360/  93D0CD : (MACRO)             	gInsDac   0,DacIns_SaurKick,0,0
(1)  360/  93D0CD : C000 91FE                   dc.b $C0|0,0,((DACINS_SAURKICK>>16)&$FF)|$90,((DACINS_SAURKICK>>8)&$FF)
(1)  360/  93D0D1 : 8400 0000                   dc.b DACINS_SAURKICK&$FF,0,0,0
(1)  361/  93D0D5 : (MACRO)             	gInsDac   0,DacIns_CdSnare,0,0
(1)  361/  93D0D5 : C000 91E4                   dc.b $C0|0,0,((DACINS_CDSNARE>>16)&$FF)|$90,((DACINS_CDSNARE>>8)&$FF)
(1)  361/  93D0D9 : 8800 0000                   dc.b DACINS_CDSNARE&$FF,0,0,0
(1)  362/  93D0DD : (MACRO)             	gInsFm  -12,FmIns_Trumpet_2
(1)  362/  93D0DD : A0F4 92F1                   dc.b $A0,-12,((FMINS_TRUMPET_2>>16)&$FF)|$90,((FMINS_TRUMPET_2>>8)&$FF)
(1)  362/  93D0E1 : 8000 0000                   dc.b FMINS_TRUMPET_2&$FF,$00,$00,$00
(1)  363/  93D0E5 : (MACRO)             	gInsFm  -12,FmIns_Ding_toy
(1)  363/  93D0E5 : A0F4 92F2                   dc.b $A0,-12,((FMINS_DING_TOY>>16)&$FF)|$90,((FMINS_DING_TOY>>8)&$FF)
(1)  363/  93D0E9 : 4000 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  364/  93D0ED : (MACRO)             	gInsNull
(1)  364/  93D0ED : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  364/  93D0F1 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  365/  93D0F5 : (MACRO)             	gInsNull
(1)  365/  93D0F5 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  365/  93D0F9 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  366/  93D0FD : (MACRO)             	gInsNull
(1)  366/  93D0FD : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  366/  93D101 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  367/  93D105 : (MACRO)             	gInsNull
(1)  367/  93D105 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  367/  93D109 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  368/  93D10D : (MACRO)             	gInsNull
(1)  368/  93D10D : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  368/  93D111 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  369/  93D115 : (MACRO)             	gInsNull
(1)  369/  93D115 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  369/  93D119 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  370/  93D11D : (MACRO)             	gInsNull
(1)  370/  93D11D : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  370/  93D121 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  371/  93D125 : (MACRO)             	gInsNull
(1)  371/  93D125 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  371/  93D129 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  372/  93D12D : (MACRO)             	gInsNull
(1)  372/  93D12D : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  372/  93D131 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  373/  93D135 : (MACRO)             	gInsNull
(1)  373/  93D135 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  373/  93D139 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  374/  93D13D : (MACRO)             	gInsNull
(1)  374/  93D13D : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  374/  93D141 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  375/  93D145 :                     ;
(1)  376/  93D145 :                     ; ; 	gInsPsgN  0,$00,$00,$00,$08,$08,%100
(1)  377/  93D145 :                     ; ; 	gInsPsgN  0,$00,$00,$00,$10,$10,%100
(1)  378/  93D145 :                     ; ; 	gInsFm    0,FmIns_PianoM1,0
(1)  379/  93D145 :                     ; ; 	gInsPsg   0,$10,$00,$10,$02,$02
(1)  380/  93D145 :                     ; ; 	gInsFm    0,FmIns_Bass_mecan,0
(1)  381/  93D145 :                     ; ; 	gInsDac   0,DacIns_SaurKick,DacIns_SaurKick_e,0,0
(1)  382/  93D145 :                     ; ; 	gInsNull
(1)  383/  93D145 :                     ; ; 	gInsDac   0,DacIns_CdSnare,DacIns_CdSnare_e,0,0
(1)  384/  93D145 :                     ; ; 	gInsNull
(1)  385/  93D145 :                     ; ; 	gInsNull
(1)  386/  93D145 :                     ; ; 	gInsNull
(1)  387/  93D145 :                     ; ; 	gInsNull
(1)  388/  93D145 :                     ; ; 	gInsNull
(1)  389/  93D145 :                     ; ; 	gInsNull
(1)  390/  93D145 :                     ; ; 	gInsFm    0,FmIns_Trumpet_2,0
(1)  391/  93D145 :                     ; ; 	gInsNull
(1)  392/  93D145 :                     ;
(1)  393/  93D145 :                     GemaTrk_mars_blk:
(1)  394/  93D145 :                     	binclude "sound/tracks/mars_blk.bin"
(1)  395/  93D153 :                     GemaTrk_mars_patt:
(1)  396/  93D153 :                     	binclude "sound/tracks/mars_patt.bin"
(1)  397/  93F880 :                     GemaTrk_mars_ins:
(1)  398/  93F880 : (MACRO)             	gInsDac   0,DacIns_CdSnare,0,0
(1)  398/  93F880 : C000 91E4                   dc.b $C0|0,0,((DACINS_CDSNARE>>16)&$FF)|$90,((DACINS_CDSNARE>>8)&$FF)
(1)  398/  93F884 : 8800 0000                   dc.b DACINS_CDSNARE&$FF,0,0,0
(1)  399/  93F888 : (MACRO)             	gInsDac   0,DacIns_SaurKick,0,0
(1)  399/  93F888 : C000 91FE                   dc.b $C0|0,0,((DACINS_SAURKICK>>16)&$FF)|$90,((DACINS_SAURKICK>>8)&$FF)
(1)  399/  93F88C : 8400 0000                   dc.b DACINS_SAURKICK&$FF,0,0,0
(1)  400/  93F890 : (MACRO)             	gInsPsgN  0,$20,$FF,$00,$30,$30,%100
(1)  400/  93F890 : 9400 20FF                   dc.b $90|%100,0,$20,$FF
(1)  400/  93F894 : 0030 3000                   dc.b $00,$30,$30,0
(1)  401/  93F898 : (MACRO)             	gInsFm    0,FmIns_PianoM1,0
(1)  401/  93F898 : A000 92F0                   dc.b $A0,0,((FMINS_PIANOM1>>16)&$FF)|$90,((FMINS_PIANOM1>>8)&$FF)
(1)  401/  93F89C : 0000 0000                   dc.b FMINS_PIANOM1&$FF,$00,$00,$00
(1)  402/  93F8A0 : (MACRO)             	gInsPsg   0,$50,$20,$40,$00,$01
(1)  402/  93F8A0 : 8000 5020                   dc.b $80,0,$50,$20
(1)  402/  93F8A4 : 4000 0100                   dc.b $40,$00,$01,$00
(1)  403/  93F8A8 : (MACRO)             	gInsFm    0,FmIns_Bass_groove,0
(1)  403/  93F8A8 : A000 92F0                   dc.b $A0,0,((FMINS_BASS_GROOVE>>16)&$FF)|$90,((FMINS_BASS_GROOVE>>8)&$FF)
(1)  403/  93F8AC : 8000 0000                   dc.b FMINS_BASS_GROOVE&$FF,$00,$00,$00
(1)  404/  93F8B0 : (MACRO)             	gInsNull
(1)  404/  93F8B0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  404/  93F8B4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  405/  93F8B8 : (MACRO)             	gInsNull
(1)  405/  93F8B8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  405/  93F8BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  406/  93F8C0 : (MACRO)             	gInsFm    0,FmIns_Guitar_heavy,0
(1)  406/  93F8C0 : A000 92EF                   dc.b $A0,0,((FMINS_GUITAR_HEAVY>>16)&$FF)|$90,((FMINS_GUITAR_HEAVY>>8)&$FF)
(1)  406/  93F8C4 : 8000 0000                   dc.b FMINS_GUITAR_HEAVY&$FF,$00,$00,$00
(1)  407/  93F8C8 : (MACRO)             	gInsNull
(1)  407/  93F8C8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  407/  93F8CC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  408/  93F8D0 : (MACRO)             	gInsNull
(1)  408/  93F8D0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  408/  93F8D4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  409/  93F8D8 :                     
      78/  93F8D8 :                     		include "data/md_bank0.asm"
(1)    1/  93F8D8 :                     ; ====================================================================
(1)    2/  93F8D8 :                     ; ----------------------------------------------------------------
(1)    3/  93F8D8 :                     ; Single 68k DATA BANK for MD ($900000-$9FFFFF)
(1)    4/  93F8D8 :                     ; for stuff other than MD's DMA data
(1)    5/  93F8D8 :                     ; 
(1)    6/  93F8D8 :                     ; Maximum size: $0FFFFF bytes per bank
(1)    7/  93F8D8 :                     ; ----------------------------------------------------------------
(1)    8/  93F8D8 :                     
(1)    9/  93F8D8 :                     		align 2
(1)   10/  93F8D8 : 4F54 4845 5220 3638 		dc.b "OTHER 68K DATA GOES HERE"
                    4B20 4441 5441 2047 
                    4F45 5320 4845 5245 
(1)   11/  93F8F0 :                     
(1)   12/  93F8F0 :                     
      79/   3F8F0 :                     		dephase
      80/   3F8F0 :                     ; 		org $100000-4				; Fill this bank and
      81/   3F8F0 :                     ; 		dc.b "BNK0"				; add a tag at the end
      82/   3F8F0 :                     
      83/   3F8F0 :                     ; 		phase $900000+*
      84/   3F8F0 :                     ; 		include "data/md_bank1.asm"
      85/   3F8F0 :                     ; 		dephase
      86/   3F8F0 :                     ; 		org $200000-4
      87/   3F8F0 :                     ; 		dc.b "BNK1"
      88/   3F8F0 :                     
      89/   3F8F0 :                     ; 		phase $900000+*
      90/   3F8F0 :                     ; 		include "data/md_bank2.asm"
      91/   3F8F0 :                     ; 		dephase
      92/   3F8F0 :                     ; 		org $300000-4
      93/   3F8F0 :                     ; 		dc.b "BNK2"
      94/   3F8F0 :                     
      95/   3F8F0 :                     ; 		phase $900000+*
      96/   3F8F0 :                     ; 		include "data/md_bank3.asm"
      97/   3F8F0 :                     ; 		dephase
      98/   3F8F0 :                     ; 		org $400000-4
      99/   3F8F0 :                     ; 		dc.b "BNK3"
     100/   3F8F0 :                     
     101/   3F8F0 :                     ; ====================================================================
     102/   3F8F0 :                     ; ----------------------------------------------------------------
     103/   3F8F0 :                     ; MD DMA transfer data, Set RV=1 first.
     104/   3F8F0 :                     ; ----------------------------------------------------------------
     105/   3F8F0 :                     
     106/   3F8F0 :                     		align 4
     107/   3F8F0 :                     		include "data/md_dma.asm"
(1)    1/   3F8F0 :                     ; ====================================================================
(1)    2/   3F8F0 :                     ; ----------------------------------------------------------------
(1)    3/   3F8F0 :                     ; DMA ROM DATA Transfer section, no bank limitations
(1)    4/   3F8F0 :                     ; 
(1)    5/   3F8F0 :                     ; RV bit must be set to access here
(1)    6/   3F8F0 :                     ; ----------------------------------------------------------------
(1)    7/   3F8F0 :                     
(1)    8/   3F8F0 :                     		align $8000
(1)    9/   40000 :                     ART_TESTBOARD:	binclude "data/md/bg/board_art.bin"
(1)   10/   40300 :                     ART_TESTBOARD_e:
(1)   11/   40300 :                     ART_EMI:	binclude "data/md/sprites/emi_art.bin"
(1)   12/   43300 :                     ART_EMI_e:
(1)   13/   43300 :                     
(1)   14/   43300 :                     
     108/   43300 :                     
     109/   43300 :                     ; ====================================================================
     110/   43300 :                     ; ----------------------------------------------------------------
     111/   43300 :                     ; SH2 SECTION
     112/   43300 :                     ; ----------------------------------------------------------------
     113/   43300 :                     
     114/   43300 :                     		align 4
     115/   43300 :                     MARS_RAMDATA:
     116/   43300 :                     		include "system/mars/code.asm"
(1)    1/   43300 :                     ; ====================================================================
(1)    2/   43300 :                     ; ----------------------------------------------------------------
(1)    3/   43300 :                     ; MARS SH2 Section
(1)    4/   43300 :                     ;
(1)    5/   43300 :                     ; CODE for both CPUs
(1)    6/   43300 :                     ; RAM and some DATA go here
(1)    7/   43300 :                     ; ----------------------------------------------------------------
(1)    8/   43300 :                     
(1)    9/ 6000000 :                     		phase CS3		; now we are at SDRAM
(1)   10/ 6000000 :                     		cpu SH7600		; should be SH7095 but this works.
(1)   11/ 6000000 :                     
(1)   12/ 6000000 :                     ; ====================================================================
(1)   13/ 6000000 :                     ; ----------------------------------------------------------------
(1)   14/ 6000000 :                     ; User settings
(1)   15/ 6000000 :                     ; ----------------------------------------------------------------
(1)   16/ 6000000 :                     
(1)   17/ 6000000 :                     ; Third scrolling layer settings, For gfx mode 1
(1)   18/ 6000000 :                     ;
(1)   19/ 6000000 :                     ; The scrolling system only draws the new sections when the camera
(1)   20/ 6000000 :                     ; when it moves to new locations
(1)   21/ 6000000 :                     ; Do note that drawing the new sections takes TWO frames, because
(1)   22/ 6000000 :                     ; of how the framebuffer shows pixels on screen.
(1)   23/ 6000000 :                     ; (one buffer for drawing, one for show)
(1)   24/ 6000000 :                     ; The maximum moving speed is divided by 2 depending of
(1)   25/ 6000000 :                     ; the BLKSIZE setting. (BLKSIZE/2)
(1)   26/ 6000000 :                     ;
(1)   27/ 6000000 :                     ; Map data can be either ROM data or a RAM section,
(1)   28/ 6000000 :                     ; Background's WIDTH and HEIGHT are defined by gbr variables (BgWidth and BgHeight)
(1)   29/ 6000000 :                     ; but the sizes must be aligned by the same value as BLKSIZE
(1)   30/ 6000000 :                     ;
(1)   31/ 6000000 :                     ; SVDP FILL breaks because this scroll system manipulates the linetable.
(1)   32/ 6000000 :                     ; (unless I come up with a workaround)
(1)   33/ 6000000 :                     
(1)   34/ 6000000 : =$10                MSCRL_BLKSIZE		equ $10		; Block size for both directions, aligned by 4
(1)   35/ 6000000 : =$150               MSCRL_WIDTH		equ 320+$10	; Internal width for scrolldata
(1)   36/ 6000000 : =$100               MSCRL_HEIGHT		equ 240+$10	; Internal height for scrolldata
(1)   37/ 6000000 :                     
(1)   38/ 6000000 :                     ; ----------------------------------------
(1)   39/ 6000000 :                     ; Polygon settings
(1)   40/ 6000000 :                     ; (can manipulate 3 or 4 points)
(1)   41/ 6000000 :                     ; ----------------------------------------
(1)   42/ 6000000 :                     
(1)   43/ 6000000 : =$80                MAX_MPLGN	equ	128		; Maximum polygon faces to store on buffer(s)
(1)   44/ 6000000 : =$C0                MAX_SVDP_PZ	equ	128+64		; Polygon pieces r/w list, loops
(1)   45/ 6000000 :                     ; MAX_MODELS	equ	24		; Note: First 9 models are reserved for layout map
(1)   46/ 6000000 :                     ; MAX_ZDIST	equ	-$2400		; Max drawing distance (-Z max)
(1)   47/ 6000000 :                     ; LAY_WIDTH	equ	$20*2		; Layout data width * 2
(1)   48/ 6000000 :                     
(1)   49/ 6000000 :                     ; ----------------------------------------
(1)   50/ 6000000 :                     ; Normal sprite settings
(1)   51/ 6000000 :                     ; ----------------------------------------
(1)   52/ 6000000 :                     
(1)   53/ 6000000 : =$80                MAX_MSPR	equ	128		; Maximum sprites
(1)   54/ 6000000 :                     
(1)   55/ 6000000 :                     ; ====================================================================
(1)   56/ 6000000 :                     ; ----------------------------------------------------------------
(1)   57/ 6000000 :                     ; MARS GBR variables for both SH2
(1)   58/ 6000000 :                     ; ----------------------------------------------------------------
(1)   59/ 6000000 :                     
(1)   60/ 6000000 : (MACRO)             			struct 0
(1)   60/ 6000000 : =$6000000           GLBL_LASTPC     set *
(1)   60/   43300 :                                     dephase
(1)   60/   43300 : =$43300             GLBL_LASTORG    set *
(1)   60/       0 :                                     phase 0
(1)   61/       0 :                     marsGbl_BgData		ds.l 1		; Background pixel data location (ROM or RAM)
(1)   62/       4 :                     marsGbl_BgData_R	ds.l 1		; Background data pointer (Mode 2 only)
(1)   63/       8 :                     marsGbl_PlyPzList_R	ds.l 1		; Current graphic piece to draw
(1)   64/       C :                     marsGbl_PlyPzList_W	ds.l 1		; Current graphic piece to write
(1)   65/      10 :                     marsGbl_Plgn_Read	ds.l 1
(1)   66/      14 :                     marsGbl_Plgn_Write	ds.l 1
(1)   67/      18 :                     marsGbl_Bg_FbBase	ds.l 1		; X base position for Up/Down draw
(1)   68/      1C :                     marsGbl_Bg_FbCurrR	ds.l 1
(1)   69/      20 :                     marsGbl_Bg_Xpos		ds.l 1		; 00.00
(1)   70/      24 :                     marsGbl_Bg_Ypos		ds.l 1		; 00.00
(1)   71/      28 :                     marsGbl_Bg_Xpos_old	ds.w 1
(1)   72/      2A :                     marsGbl_Bg_Ypos_old	ds.w 1
(1)   73/      2C :                     marsGbl_Bg_XShift	ds.w 1
(1)   74/      2E :                     marsGbl_BgWidth		ds.w 1
(1)   75/      30 :                     marsGbl_BgHeight	ds.w 1
(1)   76/      32 :                     marsGbl_Bg_Xscale	ds.w 1
(1)   77/      34 :                     marsGbl_Bg_Yscale	ds.w 1
(1)   78/      36 :                     marsGbl_Bg_Xset		ds.w 1		; Redraw timers
(1)   79/      38 :                     marsGbl_Bg_Yset		ds.w 1		;
(1)   80/      3A :                     marsGbl_Bg_YFbPos_U	ds.w 1		; Y position for Up/Down drawing section
(1)   81/      3C :                     marsGbl_Bg_YFbPos_D	ds.w 1
(1)   82/      3E :                     marsGbl_Bg_YFbPos_LR	ds.w 1		; Y position only for L/R draw
(1)   83/      40 :                     marsGbl_Bg_XbgInc_L	ds.w 1		; Address X increment
(1)   84/      42 :                     marsGbl_Bg_XbgInc_R	ds.w 1		;
(1)   85/      44 :                     marsGbl_Bg_YbgInc_D	ds.w 1		; Address Y increment (Multiply with BGWIDTH externally)
(1)   86/      46 :                     marsGbl_Bg_YbgInc_U	ds.w 1		;
(1)   87/      48 :                     marsGbl_Bg_DrwReqU	ds.w 1		; Draw UP request, write 2
(1)   88/      4A :                     marsGbl_Bg_DrwReqD	ds.w 1		; Draw DOWN request, write 2
(1)   89/      4C :                     marsGbl_Bg_DrwReqL	ds.w 1		; Draw LEFT request, write 2
(1)   90/      4E :                     marsGbl_Bg_DrwReqR	ds.w 1		; Draw RIGHT request, write 2
(1)   91/      50 :                     marsGbl_Bg_DrwReqFull	ds.w 1		; FULL Draw, write 2
(1)   92/      52 :                     marsGbl_MdlFacesCntr	ds.w 1		; And the number of faces stored on that list
(1)   93/      54 :                     marsGbl_PlgnBuffNum	ds.w 1		; PolygonBuffer switch: READ/WRITE or WRITE/READ
(1)   94/      56 :                     marsGbl_MstrReqDraw	ds.w 1
(1)   95/      58 :                     marsGbl_CurrGfxMode	ds.w 1
(1)   96/      5A :                     marsGbl_PzListCntr	ds.w 1		; Number of graphic pieces to draw
(1)   97/      5C :                     marsGbl_VIntFlag_M	ds.w 1		; Sets to 0 if VBlank finished on Master CPU
(1)   98/      5E :                     marsGbl_VIntFlag_S	ds.w 1		; Same thing but for the Slave CPU
(1)   99/      60 :                     marsGbl_DivStop_M	ds.w 1		; Flag to tell Watchdog we are in the middle of hardware division
(1)  100/      62 :                     marsGbl_CurrFb		ds.w 1		; Current framebuffer number (byte)
(1)  101/      64 :                     marsGbl_PalDmaMidWr	ds.w 1		; Flag to tell we are in middle of transfering palette
(1)  102/      66 :                     marsGbl_FbMaxLines	ds.w 1		; Max lines to output to screen (MAX: 240 lines)
(1)  103/      68 :                     marsGbl_WdDrwTask	ds.w 1		; Current Drawing task for Watchdog
(1)  104/      6A :                     marsGbl_WdDrwPause	ds.w 1		; Pause background drawing
(1)  105/      6C :                     marsGbl_PwmCtrlUpd	ds.w 1		; Flag to update Pwm tracker channels
(1)  106/      6E :                     sizeof_MarsGbl		ds.l 0
(1)  107/      70 : (MACRO)             			finish
(1)  107/       0 :                                     !org GLBL_LASTORG
(1)  107/ 6000000 :                                     phase GLBL_LASTPC
(1)  108/ 6000000 :                     
(1)  109/ 6000000 :                     ; ====================================================================
(1)  110/ 6000000 :                     ; ----------------------------------------------------------------
(1)  111/ 6000000 :                     ; MASTER CPU HEADER (vbr)
(1)  112/ 6000000 :                     ; ----------------------------------------------------------------
(1)  113/ 6000000 :                     
(1)  114/ 6000000 :                     		align 4
(1)  115/ 6000000 :                     SH2_Master:
(1)  116/ 6000000 : 0600 0BAC 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Cold PC,SP
(1)  117/ 6000008 : 0600 0BAC 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Manual PC,SP
(1)  118/ 6000010 :                     
(1)  119/ 6000010 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(1)  120/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)  121/ 6000018 : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(1)  122/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)  123/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)  124/ 6000024 : 0600 030C           		dc.l SH2_Error			; CPU address error
(1)  125/ 6000028 : 0600 030C           		dc.l SH2_Error			; DMA address error
(1)  126/ 600002C : 0600 030C           		dc.l SH2_Error			; NMI vector
(1)  127/ 6000030 : 0600 030C           		dc.l SH2_Error			; User break vector
(1)  128/ 6000034 :                     
(1)  129/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(1)  130/ 600005C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  131/ 6000080 :                     
(1)  132/ 6000080 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(1)  133/ 6000088 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  134/ 6000090 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  135/ 6000098 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  136/ 60000A0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  137/ 60000A8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  138/ 60000B0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  139/ 60000B8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  140/ 60000C0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  141/ 60000C8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  142/ 60000D0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  143/ 60000D8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  144/ 60000E0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  145/ 60000E8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  146/ 60000F0 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  147/ 60000F8 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  148/ 6000100 :                     
(1)  149/ 6000100 : 0600 0248            		dc.l master_irq			; Level 1 IRQ
(1)  150/ 6000104 : 0600 0248           		dc.l master_irq			; Level 2 & 3 IRQ's
(1)  151/ 6000108 : 0600 0248           		dc.l master_irq			; Level 4 & 5 IRQ's
(1)  152/ 600010C : 0600 0248           		dc.l master_irq			; PWM interupt
(1)  153/ 6000110 : 0600 0248           		dc.l master_irq			; Command interupt
(1)  154/ 6000114 : 0600 0248           		dc.l master_irq			; H Blank interupt
(1)  155/ 6000118 : 0600 0248           		dc.l master_irq			; V Blank interupt
(1)  156/ 600011C : 0600 0248           		dc.l master_irq			; Reset Button
(1)  157/ 6000120 : 0600 0248           		dc.l master_irq			; (custom) Watchdog
(1)  158/ 6000124 :                     
(1)  159/ 6000124 :                     ; ====================================================================
(1)  160/ 6000124 :                     ; ----------------------------------------------------------------
(1)  161/ 6000124 :                     ; SLAVE CPU HEADER (vbr)
(1)  162/ 6000124 :                     ; ----------------------------------------------------------------
(1)  163/ 6000124 :                     
(1)  164/ 6000124 :                     		align 4
(1)  165/ 6000124 :                     SH2_Slave:
(1)  166/ 6000124 : 0600 12B4 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Cold PC,SP
(1)  167/ 600012C : 0600 12B4 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Manual PC,SP
(1)  168/ 6000134 :                     
(1)  169/ 6000134 : 0600 030C           		dc.l SH2_Error			; Illegal instruction
(1)  170/ 6000138 : 0000 0000           		dc.l 0				; reserved
(1)  171/ 600013C : 0600 030C           		dc.l SH2_Error			; Invalid slot instruction
(1)  172/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(1)  173/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(1)  174/ 6000148 : 0600 030C           		dc.l SH2_Error			; CPU address error
(1)  175/ 600014C : 0600 030C           		dc.l SH2_Error			; DMA address error
(1)  176/ 6000150 : 0600 030C           		dc.l SH2_Error			; NMI vector
(1)  177/ 6000154 : 0600 030C           		dc.l SH2_Error			; User break vector
(1)  178/ 6000158 :                     
(1)  179/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(1)  180/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  181/ 60001A4 :                     
(1)  182/ 60001A4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error	; Trap vectors
(1)  183/ 60001AC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  184/ 60001B4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  185/ 60001BC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  186/ 60001C4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  187/ 60001CC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  188/ 60001D4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  189/ 60001DC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  190/ 60001E4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  191/ 60001EC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  192/ 60001F4 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  193/ 60001FC : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  194/ 6000204 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  195/ 600020C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  196/ 6000214 : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  197/ 600021C : 0600 030C 0600 030C 		dc.l SH2_Error,SH2_Error
(1)  198/ 6000224 :                     
(1)  199/ 6000224 : 0600 02AC            		dc.l slave_irq			; Level 1 IRQ
(1)  200/ 6000228 : 0600 02AC           		dc.l slave_irq			; Level 2 & 3 IRQ's
(1)  201/ 600022C : 0600 02AC           		dc.l slave_irq			; Level 4 & 5 IRQ's
(1)  202/ 6000230 : 0600 02AC           		dc.l slave_irq			; PWM interupt
(1)  203/ 6000234 : 0600 02AC           		dc.l slave_irq			; Command interupt
(1)  204/ 6000238 : 0600 02AC           		dc.l slave_irq			; H Blank interupt
(1)  205/ 600023C : 0600 02AC           		dc.l slave_irq			; V Blank interupt
(1)  206/ 6000240 : 0600 02AC           		dc.l slave_irq			; Reset Button
(1)  207/ 6000244 : 0600 02AC           		dc.l slave_irq			; Watchdog
(1)  208/ 6000248 :                     
(1)  209/ 6000248 :                     ; ====================================================================
(1)  210/ 6000248 :                     ; ----------------------------------------------------------------
(1)  211/ 6000248 :                     ; irq
(1)  212/ 6000248 :                     ;
(1)  213/ 6000248 :                     ; r0-r1 are safe
(1)  214/ 6000248 :                     ; ----------------------------------------------------------------
(1)  215/ 6000248 :                     
(1)  216/ 6000248 :                     		align 4
(1)  217/ 6000248 :                     master_irq:
(1)  218/ 6000248 : 2F06                		mov.l	r0,@-r15
(1)  219/ 600024A : 2F16                		mov.l	r1,@-r15
(1)  220/ 600024C : 4F22                		sts.l	pr,@-r15
(1)  221/ 600024E :                     
(1)  222/ 600024E : 0002                		stc	sr,r0
(1)  223/ 6000250 : 4009                		shlr2	r0
(1)  224/ 6000252 : C93C                		and	#$3C,r0
(1)  225/ 6000254 : D104                		mov	#int_m_list,r1
(1)  226/ 6000256 : 301C                		add	r1,r0
(1)  227/ 6000258 : 6102                		mov	@r0,r1
(1)  228/ 600025A : 410B                		jsr	@r1
(1)  229/ 600025C : 0009                		nop
(1)  230/ 600025E :                     
(1)  231/ 600025E : 4F26                		lds.l	@r15+,pr
(1)  232/ 6000260 : 61F6                		mov.l	@r15+,r1
(1)  233/ 6000262 : 60F6                		mov.l	@r15+,r0
(1)  234/ 6000264 : 002B                		rte
(1)  235/ 6000266 : 0009                		nop
(1)  236/ 6000268 :                     		align 4
(1)  237/ 6000268 : 0600 026C           		ltorg
(1)  238/ 600026C :                     
(1)  239/ 600026C :                     ; ------------------------------------------------
(1)  240/ 600026C :                     ; irq list
(1)  241/ 600026C :                     ; ------------------------------------------------
(1)  242/ 600026C :                     
(1)  243/ 600026C :                     		align 4
(1)  244/ 600026C :                     int_m_list:
(1)  245/ 600026C : 0600 0318 0600 0318 		dc.l m_irq_bad,m_irq_bad
(1)  246/ 6000274 : 0600 0318 0600 0318 		dc.l m_irq_bad,m_irq_bad
(1)  247/ 600027C : 0600 0318 C000 0000 		dc.l m_irq_bad,m_irq_custom
(1)  248/ 6000284 : 0600 031C 0600 031C 		dc.l m_irq_pwm,m_irq_pwm
(1)  249/ 600028C : 0600 0338 0600 0338 		dc.l m_irq_cmd,m_irq_cmd
(1)  250/ 6000294 : 0600 0368 0600 0368 		dc.l m_irq_h,m_irq_h
(1)  251/ 600029C : 0600 0384 0600 0384 		dc.l m_irq_v,m_irq_v
(1)  252/ 60002A4 : 0600 044C 0600 044C 		dc.l m_irq_vres,m_irq_vres
(1)  253/ 60002AC :                     
(1)  254/ 60002AC :                     ; ====================================================================
(1)  255/ 60002AC :                     ; ----------------------------------------------------------------
(1)  256/ 60002AC :                     ; irq
(1)  257/ 60002AC :                     ;
(1)  258/ 60002AC :                     ; r0-r1 are safe
(1)  259/ 60002AC :                     ; ----------------------------------------------------------------
(1)  260/ 60002AC :                     
(1)  261/ 60002AC :                     slave_irq:
(1)  262/ 60002AC : 2F06                		mov.l	r0,@-r15
(1)  263/ 60002AE : 2F16                		mov.l	r1,@-r15
(1)  264/ 60002B0 : 4F22                		sts.l	pr,@-r15
(1)  265/ 60002B2 :                     
(1)  266/ 60002B2 : 0002                		stc	sr,r0
(1)  267/ 60002B4 : 4009                		shlr2	r0
(1)  268/ 60002B6 : C93C                		and	#$3C,r0
(1)  269/ 60002B8 : D126                		mov	#int_s_list,r1
(1)  270/ 60002BA : 301C                		add	r1,r0
(1)  271/ 60002BC : 6102                		mov	@r0,r1
(1)  272/ 60002BE : 410B                		jsr	@r1
(1)  273/ 60002C0 : 0009                		nop
(1)  274/ 60002C2 :                     
(1)  275/ 60002C2 : 4F26                		lds.l	@r15+,pr
(1)  276/ 60002C4 : 61F6                		mov.l	@r15+,r1
(1)  277/ 60002C6 : 60F6                		mov.l	@r15+,r0
(1)  278/ 60002C8 : 002B                		rte
(1)  279/ 60002CA : 0009                		nop
(1)  280/ 60002CC :                     		align 4
(1)  281/ 60002CC :                     
(1)  282/ 60002CC :                     ; ------------------------------------------------
(1)  283/ 60002CC :                     ; irq list
(1)  284/ 60002CC :                     ; ------------------------------------------------
(1)  285/ 60002CC :                     
(1)  286/ 60002CC :                     int_s_list:
(1)  287/ 60002CC : 0600 04CE 0600 04CE 		dc.l s_irq_bad,s_irq_bad
(1)  288/ 60002D4 : 0600 04CE 0600 04CE 		dc.l s_irq_bad,s_irq_bad
(1)  289/ 60002DC : 0600 04CE 0600 15A0 		dc.l s_irq_bad,s_irq_custom
(1)  290/ 60002E4 : 0600 04D4 0600 04D4 		dc.l s_irq_pwm,s_irq_pwm
(1)  291/ 60002EC : 0600 04F8 0600 04F8 		dc.l s_irq_cmd,s_irq_cmd
(1)  292/ 60002F4 : 0600 0546 0600 0546 		dc.l s_irq_h,s_irq_h
(1)  293/ 60002FC : 0600 0560 0600 0560 		dc.l s_irq_v,s_irq_v
(1)  294/ 6000304 : 0600 0574 0600 0574 		dc.l s_irq_vres,s_irq_vres
(1)  295/ 600030C :                     
(1)  296/ 600030C :                     ; ====================================================================
(1)  297/ 600030C :                     ; ----------------------------------------------------------------
(1)  298/ 600030C :                     ; Noraml error trap
(1)  299/ 600030C :                     ; ----------------------------------------------------------------
(1)  300/ 600030C :                     
(1)  301/ 600030C :                     SH2_Error:
(1)  302/ 600030C : D112                		mov	#_sysreg+comm14,r1
(1)  303/ 600030E : 9029                		mov	#$1234,r0
(1)  304/ 6000310 : 2101                		mov.w	r0,@r1
(1)  305/ 6000312 :                     
(1)  306/ 6000312 : 0009                .infin:		nop
(1)  307/ 6000314 : AFFD                		bra	.infin
(1)  308/ 6000316 : 0009                		nop
(1)  309/ 6000318 :                     		align 4
(1)  310/ 6000318 :                     
(1)  311/ 6000318 :                     ; ====================================================================
(1)  312/ 6000318 :                     ; ----------------------------------------------------------------
(1)  313/ 6000318 :                     ; MARS Interrupts
(1)  314/ 6000318 :                     ; ----------------------------------------------------------------
(1)  315/ 6000318 :                     
(1)  316/ 6000318 :                     ; =================================================================
(1)  317/ 6000318 :                     ; ------------------------------------------------
(1)  318/ 6000318 :                     ; Master | Unused interrupt
(1)  319/ 6000318 :                     ; ------------------------------------------------
(1)  320/ 6000318 :                     
(1)  321/ 6000318 :                     m_irq_bad:
(1)  322/ 6000318 : 000B                		rts
(1)  323/ 600031A : 0009                		nop
(1)  324/ 600031C :                     		align 4
(1)  325/ 600031C :                     
(1)  326/ 600031C :                     ; =================================================================
(1)  327/ 600031C :                     ; ------------------------------------------------
(1)  328/ 600031C :                     ; Master | PWM Interrupt
(1)  329/ 600031C :                     ; ------------------------------------------------
(1)  330/ 600031C :                     
(1)  331/ 600031C :                     m_irq_pwm:
(1)  332/ 600031C : 9123                		mov	#_FRT,r1
(1)  333/ 600031E : 8417                		mov.b	@(7,r1),r0
(1)  334/ 6000320 : CA02                		xor	#2,r0
(1)  335/ 6000322 : 8017                		mov.b	r0,@(7,r1)
(1)  336/ 6000324 : D10D                		mov	#_sysreg+pwmintclr,r1
(1)  337/ 6000326 : 2101                		mov.w	r0,@r1
(1)  338/ 6000328 : 0009                		nop
(1)  339/ 600032A : 0009                		nop
(1)  340/ 600032C : 0009                		nop
(1)  341/ 600032E : 0009                		nop
(1)  342/ 6000330 : 0009                		nop
(1)  343/ 6000332 : 000B                		rts
(1)  344/ 6000334 : 0009                		nop
(1)  345/ 6000336 :                     		align 4
(1)  346/ 6000338 :                     
(1)  347/ 6000338 :                     ; =================================================================
(1)  348/ 6000338 :                     ; ------------------------------------------------
(1)  349/ 6000338 :                     ; Master | CMD Interrupt
(1)  350/ 6000338 :                     ; ------------------------------------------------
(1)  351/ 6000338 :                     
(1)  352/ 6000338 :                     m_irq_cmd:
(1)  353/ 6000338 : 9115                		mov	#_FRT,r1
(1)  354/ 600033A : 8417                		mov.b	@(7,r1),r0
(1)  355/ 600033C : CA02                		xor	#2,r0
(1)  356/ 600033E : 8017                		mov.b	r0,@(7,r1)
(1)  357/ 6000340 : D107                		mov	#_sysreg+cmdintclr,r1
(1)  358/ 6000342 : 2101                		mov.w	r0,@r1
(1)  359/ 6000344 : 0009                		nop
(1)  360/ 6000346 : 0009                		nop
(1)  361/ 6000348 : 0009                		nop
(1)  362/ 600034A : 0009                		nop
(1)  363/ 600034C : 0009                		nop
(1)  364/ 600034E : 000B                		rts
(1)  365/ 6000350 : 0009                		nop
(1)  366/ 6000352 :                     		align 4
(1)  367/ 6000354 : 0600 02CC 2000 402E 		ltorg
                    2000 401C 2000 401A 
                    1234 FE10           
(1)  368/ 6000368 :                     
(1)  369/ 6000368 :                     ; =================================================================
(1)  370/ 6000368 :                     ; ------------------------------------------------
(1)  371/ 6000368 :                     ; Master | HBlank
(1)  372/ 6000368 :                     ; ------------------------------------------------
(1)  373/ 6000368 :                     
(1)  374/ 6000368 :                     m_irq_h:
(1)  375/ 6000368 : 916E                		mov	#_FRT,r1
(1)  376/ 600036A : 8417                		mov.b	@(7,r1),r0
(1)  377/ 600036C : CA02                		xor	#2,r0
(1)  378/ 600036E : 8017                		mov.b	r0,@(7,r1)
(1)  379/ 6000370 : D130                		mov	#_sysreg+hintclr,r1
(1)  380/ 6000372 : 2101                		mov.w	r0,@r1
(1)  381/ 6000374 : 0009                		nop
(1)  382/ 6000376 : 0009                		nop
(1)  383/ 6000378 : 0009                		nop
(1)  384/ 600037A : 0009                		nop
(1)  385/ 600037C : 0009                		nop
(1)  386/ 600037E : 000B                		rts
(1)  387/ 6000380 : 0009                		nop
(1)  388/ 6000382 :                     		align 4
(1)  389/ 6000384 :                     
(1)  390/ 6000384 :                     ; =================================================================
(1)  391/ 6000384 :                     ; ------------------------------------------------
(1)  392/ 6000384 :                     ; Master | VBlank
(1)  393/ 6000384 :                     ; ------------------------------------------------
(1)  394/ 6000384 :                     
(1)  395/ 6000384 :                     m_irq_v:
(1)  396/ 6000384 : 9160                		mov	#_FRT,r1
(1)  397/ 6000386 : 8417                		mov.b	@(7,r1),r0
(1)  398/ 6000388 : CA02                		xor	#2,r0
(1)  399/ 600038A : 8017                		mov.b	r0,@(7,r1)
(1)  400/ 600038C : D12A                		mov	#_sysreg+vintclr,r1
(1)  401/ 600038E : 2101                		mov.w	r0,@r1
(1)  402/ 6000390 :                     
(1)  403/ 6000390 : D12A                		mov	#_vdpreg,r1		; Wait for palette access
(1)  404/ 6000392 : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0		; Read status as WORD
(1)  405/ 6000394 : C802                		tst	#2,r0			; Framebuffer busy? (wait for FEN=1)
(1)  406/ 6000396 : 8BFC                		bf	.wait_fb
(1)  407/ 6000398 : 841A                .wait		mov.b	@(vdpsts,r1),r0		; Now read as a BYTE
(1)  408/ 600039A : C820                		tst	#$20,r0			; Palette unlocked? (wait for PEN=0)
(1)  409/ 600039C : 89FC                		bt	.wait
(1)  410/ 600039E : 4F03                		stc	sr,@-r15
(1)  411/ 60003A0 : 2F26                		mov	r2,@-r15
(1)  412/ 60003A2 : 2F36                		mov	r3,@-r15
(1)  413/ 60003A4 : 2F46                		mov	r4,@-r15
(1)  414/ 60003A6 : 2F56                		mov	r5,@-r15
(1)  415/ 60003A8 : 4F12                		sts	macl,@-r15
(1)  416/ 60003AA : 904E                		mov	#$F0,r0			; Disable interrupts
(1)  417/ 60003AC : 400E                		ldc	r0,sr
(1)  418/ 60003AE :                     
(1)  419/ 60003AE :                     	; Copy palette manually to SuperVDP
(1)  420/ 60003AE : E001                		mov	#1,r0
(1)  421/ 60003B0 : C132                		mov.w	r0,@(marsGbl_PalDmaMidWr,gbr)
(1)  422/ 60003B2 : D123                		mov	#RAM_Mars_Palette,r1
(1)  423/ 60003B4 : D223                		mov	#_palette,r2
(1)  424/ 60003B6 : E310                 		mov	#256/16,r3
(1)  425/ 60003B8 :                     .copy_pal:
(1)  426/ 60003B8 :                     	rept 16
(1)  427/ 60003B8 :                     		mov.w	@r1+,r0
(1)  428/ 60003B8 :                     		mov.w	r0,@r2
(1)  429/ 60003B8 :                     		add	#2,r2
(1)  430/ 60003B8 :                     	endm
(1)  427/ 60003B8 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003BA : 2201                		mov.w	r0,@r2
(1)  429/ 60003BC : 7202                		add	#2,r2
(1)  427/ 60003BE : 6015                		mov.w	@r1+,r0
(1)  428/ 60003C0 : 2201                		mov.w	r0,@r2
(1)  429/ 60003C2 : 7202                		add	#2,r2
(1)  427/ 60003C4 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003C6 : 2201                		mov.w	r0,@r2
(1)  429/ 60003C8 : 7202                		add	#2,r2
(1)  427/ 60003CA : 6015                		mov.w	@r1+,r0
(1)  428/ 60003CC : 2201                		mov.w	r0,@r2
(1)  429/ 60003CE : 7202                		add	#2,r2
(1)  427/ 60003D0 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003D2 : 2201                		mov.w	r0,@r2
(1)  429/ 60003D4 : 7202                		add	#2,r2
(1)  427/ 60003D6 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003D8 : 2201                		mov.w	r0,@r2
(1)  429/ 60003DA : 7202                		add	#2,r2
(1)  427/ 60003DC : 6015                		mov.w	@r1+,r0
(1)  428/ 60003DE : 2201                		mov.w	r0,@r2
(1)  429/ 60003E0 : 7202                		add	#2,r2
(1)  427/ 60003E2 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003E4 : 2201                		mov.w	r0,@r2
(1)  429/ 60003E6 : 7202                		add	#2,r2
(1)  427/ 60003E8 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003EA : 2201                		mov.w	r0,@r2
(1)  429/ 60003EC : 7202                		add	#2,r2
(1)  427/ 60003EE : 6015                		mov.w	@r1+,r0
(1)  428/ 60003F0 : 2201                		mov.w	r0,@r2
(1)  429/ 60003F2 : 7202                		add	#2,r2
(1)  427/ 60003F4 : 6015                		mov.w	@r1+,r0
(1)  428/ 60003F6 : 2201                		mov.w	r0,@r2
(1)  429/ 60003F8 : 7202                		add	#2,r2
(1)  427/ 60003FA : 6015                		mov.w	@r1+,r0
(1)  428/ 60003FC : 2201                		mov.w	r0,@r2
(1)  429/ 60003FE : 7202                		add	#2,r2
(1)  427/ 6000400 : 6015                		mov.w	@r1+,r0
(1)  428/ 6000402 : 2201                		mov.w	r0,@r2
(1)  429/ 6000404 : 7202                		add	#2,r2
(1)  427/ 6000406 : 6015                		mov.w	@r1+,r0
(1)  428/ 6000408 : 2201                		mov.w	r0,@r2
(1)  429/ 600040A : 7202                		add	#2,r2
(1)  427/ 600040C : 6015                		mov.w	@r1+,r0
(1)  428/ 600040E : 2201                		mov.w	r0,@r2
(1)  429/ 6000410 : 7202                		add	#2,r2
(1)  427/ 6000412 : 6015                		mov.w	@r1+,r0
(1)  428/ 6000414 : 2201                		mov.w	r0,@r2
(1)  429/ 6000416 : 7202                		add	#2,r2
(1)  431/ 6000418 : 4310                		dt	r3
(1)  432/ 600041A : 8BCD                		bf	.copy_pal
(1)  433/ 600041C : E000                		mov	#0,r0
(1)  434/ 600041E : C132                		mov.w	r0,@(marsGbl_PalDmaMidWr,gbr)
(1)  435/ 6000420 :                     
(1)  436/ 6000420 :                             ; OLD method: doesn't work on hardware
(1)  437/ 6000420 :                     ; 		mov	r4,@-r15
(1)  438/ 6000420 :                     ; 		mov	r5,@-r15
(1)  439/ 6000420 :                     ; 		mov	r6,@-r15
(1)  440/ 6000420 :                     ; 		mov	#RAM_Mars_Palette,r1		; Send palette stored on RAM
(1)  441/ 6000420 :                     ; 		mov	#_palette,r2
(1)  442/ 6000420 :                     ;  		mov	#256,r3
(1)  443/ 6000420 :                     ; 		mov	#%0101011011110001,r4		; transfer size 2 / burst
(1)  444/ 6000420 :                     ; 		mov	#_DMASOURCE0,r5 		; _DMASOURCE = $ffffff80
(1)  445/ 6000420 :                     ; 		mov	#_DMAOPERATION,r6 		; _DMAOPERATION = $ffffffb0
(1)  446/ 6000420 :                     ; 		mov	r1,@r5				; set source address
(1)  447/ 6000420 :                     ; 		mov	r2,@(4,r5)			; set destination address
(1)  448/ 6000420 :                     ; 		mov	r3,@(8,r5)			; set length
(1)  449/ 6000420 :                     ; 		xor	r0,r0
(1)  450/ 6000420 :                     ; 		mov	r0,@r6				; Stop OPERATION
(1)  451/ 6000420 :                     ; 		xor	r0,r0
(1)  452/ 6000420 :                     ; 		mov	r0,@($C,r5)			; clear TE bit
(1)  453/ 6000420 :                     ; 		mov	r4,@($C,r5)			; load mode
(1)  454/ 6000420 :                     ; 		add	#1,r0
(1)  455/ 6000420 :                     ; 		mov	r0,@r6				; Start OPERATION
(1)  456/ 6000420 :                     ; 		mov	@r15+,r6
(1)  457/ 6000420 :                     ; 		mov	@r15+,r5
(1)  458/ 6000420 :                     ; 		mov	@r15+,r4
(1)  459/ 6000420 :                     
(1)  460/ 6000420 : 4F16                		lds	@r15+,macl
(1)  461/ 6000422 : 65F6                		mov	@r15+,r5
(1)  462/ 6000424 : 64F6                		mov	@r15+,r4
(1)  463/ 6000426 : 63F6                		mov	@r15+,r3
(1)  464/ 6000428 : 62F6                		mov	@r15+,r2
(1)  465/ 600042A : 4F07                		ldc	@r15+,sr
(1)  466/ 600042C :                     .mid_pwrite:
(1)  467/ 600042C : E000                		mov 	#0,r0				; Clear VintFlag for Master
(1)  468/ 600042E : C12E                		mov.w	r0,@(marsGbl_VIntFlag_M,gbr)
(1)  469/ 6000430 : 000B                		rts
(1)  470/ 6000432 : 0009                		nop
(1)  471/ 6000434 :                     		align 4
(1)  472/ 6000434 : 2000 4018 2000 4016 		ltorg
                    2000 4100 0600 47CC 
                    2000 4200 FE10 00F0 
(1)  473/ 600044C :                     
(1)  474/ 600044C :                     ; =================================================================
(1)  475/ 600044C :                     ; ------------------------------------------------
(1)  476/ 600044C :                     ; Master | VRES Interrupt (RESET on Genesis)
(1)  477/ 600044C :                     ; ------------------------------------------------
(1)  478/ 600044C :                     
(1)  479/ 600044C :                     ; TODO: Breaks on many RESETs
(1)  480/ 600044C :                     
(1)  481/ 600044C :                     m_irq_vres:
(1)  482/ 600044C : D017                		mov.l	#_sysreg,r0
(1)  483/ 600044E : 401E                		ldc	r0,gbr
(1)  484/ 6000450 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  485/ 6000452 : 0009                		nop
(1)  486/ 6000454 : 0009                		nop
(1)  487/ 6000456 : 0009                		nop
(1)  488/ 6000458 : 0009                		nop
(1)  489/ 600045A : 9033                		mov	#$F0,r0
(1)  490/ 600045C : 400E                		ldc	r0,sr
(1)  491/ 600045E : C406                		mov.b	@(dreqctl,gbr),r0
(1)  492/ 6000460 : C801                		tst	#1,r0
(1)  493/ 6000462 : 8B1C                		bf	.mars_reset
(1)  494/ 6000464 :                     .md_reset:
(1)  495/ 6000464 : D112                		mov.l	#"68UP",r1		; wait for the 68K to show up
(1)  496/ 6000466 : C60B                		mov.l	@(comm12,gbr),r0
(1)  497/ 6000468 : 3100                		cmp/eq	r0,r1
(1)  498/ 600046A : 8BFB                		bf	.md_reset
(1)  499/ 600046C :                     .sh_wait:
(1)  500/ 600046C : D111                		mov.l	#"S_OK",r1		; wait for the Slave CPU to show up
(1)  501/ 600046E : C609                		mov.l	@(comm4,gbr),r0
(1)  502/ 6000470 : 3100                		cmp/eq	r0,r1
(1)  503/ 6000472 : 8BFB                		bf	.sh_wait
(1)  504/ 6000474 : D010                		mov.l	#"M_OK",r0		; let the others know master ready
(1)  505/ 6000476 : C208                		mov.l	r0,@(comm0,gbr)
(1)  506/ 6000478 : 9125                		mov.l   #$FFFFFE80,r1		; Stop watchdog
(1)  507/ 600047A : 9025                		mov.w   #$A518,r0
(1)  508/ 600047C : 2101                		mov.w   r0,@r1
(1)  509/ 600047E :                     ; 		mov	#_vdpreg,r1		; Framebuffer swap request
(1)  510/ 600047E :                     ; 		mov.b	@(framectl,r1),r0	; watchdog will check for it later
(1)  511/ 600047E :                     ; 		xor	#1,r0
(1)  512/ 600047E :                     ; 		mov.b	r0,@(framectl,r1)
(1)  513/ 600047E :                     ; 		mov	#RAM_Mars_Global+marsGbl_CurrFb,r1
(1)  514/ 600047E : 2100                		mov.b	r0,@r1
(1)  515/ 6000480 : DF0E                		mov.l	#CS3|$40000-8,r15	; Set reset values
(1)  516/ 6000482 : D00F                		mov.l	#SH2_M_HotStart,r0
(1)  517/ 6000484 : 2F02                		mov.l	r0,@r15
(1)  518/ 6000486 : 901D                		mov.w	#$F0,r0
(1)  519/ 6000488 : 1F01                		mov.l	r0,@(4,r15)
(1)  520/ 600048A : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  521/ 600048C : E000                		mov.l	#0,r0
(1)  522/ 600048E : 2102                		mov.l	r0,@r1			; Turn any DMA tasks OFF
(1)  523/ 6000490 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  524/ 6000492 : E000                		mov.l	#0,r0
(1)  525/ 6000494 : 2102                		mov.l	r0,@r1
(1)  526/ 6000496 : 9118                		mov.l	#%0100010011100000,r1
(1)  527/ 6000498 : 2102                		mov.l	r0,@r1			; Channel control
(1)  528/ 600049A : 002B                		rte
(1)  529/ 600049C : 0009                		nop
(1)  530/ 600049E :                     .mars_reset:
(1)  531/ 600049E : 9115                		mov	#_FRT,r1
(1)  532/ 60004A0 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  533/ 60004A2 : CB01                		or	#$01,r0
(1)  534/ 60004A4 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  535/ 60004A6 :                     .vresloop:
(1)  536/ 60004A6 : AFFE                		bra	.vresloop
(1)  537/ 60004A8 : 0009                		nop
(1)  538/ 60004AA :                     		align 4
(1)  539/ 60004AC : 2000 4000 3638 5550 		ltorg				; Save MASTER IRQ literals here
                    535F 4F4B 4D5F 4F4B 
                    0603 FFF8 0600 0BF2 
                    00F0 FE80 A518 44E0 
                    FE10                
(1)  540/ 60004CE :                     
(1)  541/ 60004CE :                     ; =================================================================
(1)  542/ 60004CE :                     ; ------------------------------------------------
(1)  543/ 60004CE :                     ; Unused
(1)  544/ 60004CE :                     ; ------------------------------------------------
(1)  545/ 60004CE :                     
(1)  546/ 60004CE :                     s_irq_bad:
(1)  547/ 60004CE : 000B                		rts
(1)  548/ 60004D0 : 0009                		nop
(1)  549/ 60004D2 :                     		align 4
(1)  550/ 60004D4 :                     
(1)  551/ 60004D4 :                     ; =================================================================
(1)  552/ 60004D4 :                     ; ------------------------------------------------
(1)  553/ 60004D4 :                     ; Slave | PWM Interrupt
(1)  554/ 60004D4 :                     ; ------------------------------------------------
(1)  555/ 60004D4 :                     
(1)  556/ 60004D4 :                     s_irq_pwm:
(1)  557/ 60004D4 : D117                		mov	#_sysreg+monowidth,r1
(1)  558/ 60004D6 : 6010                		mov.b	@r1,r0
(1)  559/ 60004D8 : C880                 		tst	#$80,r0
(1)  560/ 60004DA : 8B04                 		bf	.exit
(1)  561/ 60004DC : 4F22                		sts	pr,@-r15
(1)  562/ 60004DE : D016                		mov	#MarsSound_ReadPwm,r0
(1)  563/ 60004E0 : 400B                		jsr	@r0
(1)  564/ 60004E2 : 0009                		nop
(1)  565/ 60004E4 : 4F26                		lds	@r15+,pr
(1)  566/ 60004E6 : 912D                .exit:		mov	#_FRT,r1
(1)  567/ 60004E8 : 8417                		mov.b	@(7,r1),r0
(1)  568/ 60004EA : CA02                		xor	#2,r0
(1)  569/ 60004EC : 8017                		mov.b	r0,@(7,r1)
(1)  570/ 60004EE : D113                		mov	#_sysreg+pwmintclr,r1
(1)  571/ 60004F0 : 2101                		mov.w	r0,@r1
(1)  572/ 60004F2 : 000B                		rts
(1)  573/ 60004F4 : 0009                		nop
(1)  574/ 60004F6 :                     		align 4
(1)  575/ 60004F8 :                     
(1)  576/ 60004F8 :                     ; 		mov	#_FRT,r1
(1)  577/ 60004F8 :                     ; 		mov.b	@(7,r1),r0
(1)  578/ 60004F8 :                     ; 		xor	#2,r0
(1)  579/ 60004F8 :                     ; 		mov.b	r0,@(7,r1)
(1)  580/ 60004F8 :                     ; 		mov	#_sysreg+pwmintclr,r1
(1)  581/ 60004F8 :                     ; 		mov.w	r0,@r1
(1)  582/ 60004F8 :                     ; 		nop
(1)  583/ 60004F8 :                     ; 		nop
(1)  584/ 60004F8 :                     ; 		nop
(1)  585/ 60004F8 :                     ; 		nop
(1)  586/ 60004F8 :                     ; 		nop
(1)  587/ 60004F8 :                     ; 		rts
(1)  588/ 60004F8 :                     ; 		nop
(1)  589/ 60004F8 :                     ; 		align 4
(1)  590/ 60004F8 :                     
(1)  591/ 60004F8 :                     ; =================================================================
(1)  592/ 60004F8 :                     ; ------------------------------------------------
(1)  593/ 60004F8 :                     ; Slave | CMD Interrupt
(1)  594/ 60004F8 :                     ;
(1)  595/ 60004F8 :                     ; Recieve data from Genesis using DREQ
(1)  596/ 60004F8 :                     ; ------------------------------------------------
(1)  597/ 60004F8 :                     
(1)  598/ 60004F8 :                     s_irq_cmd:
(1)  599/ 60004F8 : 4F03                		stc	sr,@-r15
(1)  600/ 60004FA : 9123                		mov	#_FRT,r1
(1)  601/ 60004FC : 8417                		mov.b	@(7,r1),r0
(1)  602/ 60004FE : CA02                		xor	#2,r0
(1)  603/ 6000500 : 8017                		mov.b	r0,@(7,r1)
(1)  604/ 6000502 :                     
(1)  605/ 6000502 :                     ; ----------------------------------
(1)  606/ 6000502 :                     
(1)  607/ 6000502 : 2F26                		mov	r2,@-r15
(1)  608/ 6000504 : 2F36                		mov	r3,@-r15
(1)  609/ 6000506 : 2F46                		mov	r4,@-r15
(1)  610/ 6000508 : 2F56                		mov	r5,@-r15
(1)  611/ 600050A : 2F66                		mov	r6,@-r15
(1)  612/ 600050C : 2F76                		mov	r7,@-r15
(1)  613/ 600050E : 2F86                		mov	r8,@-r15
(1)  614/ 6000510 : 2F96                		mov	r9,@-r15
(1)  615/ 6000512 : 4F22                		sts	pr,@-r15
(1)  616/ 6000514 :                     ; 		mov	#MarsSnd_PwmControl,r9
(1)  617/ 6000514 :                     ; 		mov	#_sysreg+comm15,r7	; control comm
(1)  618/ 6000514 :                     ; 		mov	#4,r5			; number of passes
(1)  619/ 6000514 :                     ; .wait_1:
(1)  620/ 6000514 :                     ; 		nop
(1)  621/ 6000514 :                     ; 		nop
(1)  622/ 6000514 :                     ; 		mov.b	@r7,r0			; wait first CLOCK
(1)  623/ 6000514 :                     ; 		and	#%00100000,r0		; from Z80
(1)  624/ 6000514 :                     ; 		cmp/pl	r0
(1)  625/ 6000514 :                     ; 		bf	.wait_1
(1)  626/ 6000514 :                     ; 		mov	#7,r6
(1)  627/ 6000514 :                     ; 		mov	#_sysreg+comm0,r8
(1)  628/ 6000514 :                     ; .copy_1:
(1)  629/ 6000514 :                     ; 		mov.w	@r8+,r0
(1)  630/ 6000514 :                     ; 		mov.w	r0,@r9
(1)  631/ 6000514 :                     ; 		dt	r6
(1)  632/ 6000514 :                     ; 		bf/s	.copy_1
(1)  633/ 6000514 :                     ; 		add	#2,r9
(1)  634/ 6000514 :                     ; 		mov.b	@r7,r0			; tell Z80 CLK finished
(1)  635/ 6000514 :                     ; 		and	#%11011111,r0
(1)  636/ 6000514 :                     ; 		mov.b	r0,@r7
(1)  637/ 6000514 :                     ; 		dt	r5
(1)  638/ 6000514 :                     ; 		bf	.wait_1
(1)  639/ 6000514 :                     ; 		mov.w	#1,r0			; request SOUND update to main loop
(1)  640/ 6000514 :                     ; 		mov.w	r0,@(marsGbl_PwmCtrlUpd,gbr)
(1)  641/ 6000514 :                     .cantupd:
(1)  642/ 6000514 : D10A                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  643/ 6000516 : 2101                		mov.w	r0,@r1
(1)  644/ 6000518 : 6011                		mov.w	@r1,r0			; TODO: ver para que era este dummy read
(1)  645/ 600051A : 4F26                		lds	@r15+,pr
(1)  646/ 600051C : 69F6                		mov 	@r15+,r9
(1)  647/ 600051E : 68F6                		mov 	@r15+,r8
(1)  648/ 6000520 : 67F6                		mov 	@r15+,r7
(1)  649/ 6000522 : 66F6                		mov 	@r15+,r6
(1)  650/ 6000524 : 65F6                		mov 	@r15+,r5
(1)  651/ 6000526 : 64F6                		mov 	@r15+,r4
(1)  652/ 6000528 : 63F6                		mov 	@r15+,r3
(1)  653/ 600052A : 62F6                		mov 	@r15+,r2
(1)  654/ 600052C : 4F07                		ldc 	@r15+,sr
(1)  655/ 600052E : 000B                		rts
(1)  656/ 6000530 : 0009                		nop
(1)  657/ 6000532 :                     		align 4
(1)  658/ 6000534 : 2000 4038 C000 0380 		ltorg
                    2000 401C 2000 401A 
                    FE10                
(1)  659/ 6000546 :                     
(1)  660/ 6000546 :                     ; ; 		mov	#_sysreg+comm15,r1	; comm15 at bit 6
(1)  661/ 6000546 :                     ; ; 		mov.b	@r1,r0			; Clear DMA signal for MD
(1)  662/ 6000546 :                     ; ; 		and	#%10111111,r0
(1)  663/ 6000546 :                     ; ; 		mov.b	r0,@r1
(1)  664/ 6000546 :                     ; 		mov	#RAM_Mars_DREQ,r1	; r1 - Output destination
(1)  665/ 6000546 :                     ; 		mov	#$20004010,r2		; r2 - DREQ length address
(1)  666/ 6000546 :                     ; 		mov	#_DMASOURCE0,r3		; r3 - DMA Channel 0
(1)  667/ 6000546 :                     ; 		mov	#0,r0
(1)  668/ 6000546 :                     ; 		mov	r0,@($30,r3)		; DMA Stop (_DMAOPERATION)
(1)  669/ 6000546 :                     ; 		mov	r0,@($C,r3)		; _DMACHANNEL0
(1)  670/ 6000546 :                     ; 		mov	#%0100010011100000,r0
(1)  671/ 6000546 :                     ; 		mov	r0,@($C,r3)
(1)  672/ 6000546 :                     ; 		mov	#$20004012,r0		; Source data (DREQ FIFO)
(1)  673/ 6000546 :                     ; 		mov	r0,@(0,r3)
(1)  674/ 6000546 :                     ; 		mov	r1,@(4,r3)
(1)  675/ 6000546 :                     ; 		mov.w	@r2,r0
(1)  676/ 6000546 :                     ; 		mov	r0,@(8,r3)
(1)  677/ 6000546 :                     ; 		mov	#%0100010011100001,r0
(1)  678/ 6000546 :                     ; 		mov	r0,@($C,r3)
(1)  679/ 6000546 :                     ; 		mov	#1,r0
(1)  680/ 6000546 :                     ; 		mov	r0,@($30,r3)		; DMA Start (_DMAOPERATION)
(1)  681/ 6000546 :                     ; ; 		mov	#_sysreg+comm15,r1	; comm15 at bit 6
(1)  682/ 6000546 :                     ; ; 		mov.b	@r1,r0			; Tell MD to push FIFO
(1)  683/ 6000546 :                     ; ; 		or	#%01000000,r0
(1)  684/ 6000546 :                     ; ; 		mov.b	r0,@r1
(1)  685/ 6000546 :                     ;
(1)  686/ 6000546 :                     ; 		mov	#_sysreg+comm4,r2	; DEBUG
(1)  687/ 6000546 :                     ; 		mov	#RAM_Mars_DREQ,r1
(1)  688/ 6000546 :                     ; 		mov	@r1,r0
(1)  689/ 6000546 :                     ; 		mov	r0,@r2
(1)  690/ 6000546 :                     
(1)  691/ 6000546 :                     ; 		mov 	@r15+,r4
(1)  692/ 6000546 :                     ; 		mov 	@r15+,r3
(1)  693/ 6000546 :                     ; 		mov 	@r15+,r2
(1)  694/ 6000546 :                     
(1)  695/ 6000546 :                     ; =================================================================
(1)  696/ 6000546 :                     ; ------------------------------------------------
(1)  697/ 6000546 :                     ; Slave | HBlank
(1)  698/ 6000546 :                     ; ------------------------------------------------
(1)  699/ 6000546 :                     
(1)  700/ 6000546 :                     s_irq_h:
(1)  701/ 6000546 : 9151                		mov	#_FRT,r1
(1)  702/ 6000548 : 8417                		mov.b	@(7,r1),r0
(1)  703/ 600054A : CA02                		xor	#2,r0
(1)  704/ 600054C : 8017                		mov.b	r0,@(7,r1)
(1)  705/ 600054E : D11F                		mov	#_sysreg+hintclr,r1
(1)  706/ 6000550 : 2101                		mov.w	r0,@r1
(1)  707/ 6000552 : 0009                		nop
(1)  708/ 6000554 : 0009                		nop
(1)  709/ 6000556 : 0009                		nop
(1)  710/ 6000558 : 0009                		nop
(1)  711/ 600055A : 0009                		nop
(1)  712/ 600055C : 000B                		rts
(1)  713/ 600055E : 0009                		nop
(1)  714/ 6000560 :                     		align 4
(1)  715/ 6000560 :                     
(1)  716/ 6000560 :                     ; =================================================================
(1)  717/ 6000560 :                     ; ------------------------------------------------
(1)  718/ 6000560 :                     ; Slave | VBlank
(1)  719/ 6000560 :                     ; ------------------------------------------------
(1)  720/ 6000560 :                     
(1)  721/ 6000560 :                     s_irq_v:
(1)  722/ 6000560 : E000                		mov 	#0,r0				; Clear VintFlag for Slave
(1)  723/ 6000562 : C12F                		mov.w	r0,@(marsGbl_VIntFlag_S,gbr)
(1)  724/ 6000564 : 9142                		mov	#_FRT,r1
(1)  725/ 6000566 : 8417                		mov.b	@(7,r1),r0
(1)  726/ 6000568 : CA02                		xor	#2,r0
(1)  727/ 600056A : 8017                		mov.b	r0,@(7,r1)
(1)  728/ 600056C : D118                		mov	#_sysreg+vintclr,r1
(1)  729/ 600056E : 000B                		rts
(1)  730/ 6000570 : 2101                		mov.w	r0,@r1
(1)  731/ 6000572 :                     		align 4
(1)  732/ 6000574 :                     
(1)  733/ 6000574 :                     ; =================================================================
(1)  734/ 6000574 :                     ; ------------------------------------------------
(1)  735/ 6000574 :                     ; Slave | VRES Interrupt (Pressed RESET on Genesis)
(1)  736/ 6000574 :                     ; ------------------------------------------------
(1)  737/ 6000574 :                     
(1)  738/ 6000574 :                     s_irq_vres:
(1)  739/ 6000574 : D017                		mov.l	#_sysreg,r0
(1)  740/ 6000576 : 401E                		ldc	r0,gbr
(1)  741/ 6000578 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  742/ 600057A : 0009                		nop
(1)  743/ 600057C : 0009                		nop
(1)  744/ 600057E : 0009                		nop
(1)  745/ 6000580 : 0009                		nop
(1)  746/ 6000582 : 9034                		mov	#$F0,r0
(1)  747/ 6000584 : 400E                		ldc	r0,sr
(1)  748/ 6000586 : C406                		mov.b	@(dreqctl,gbr),r0
(1)  749/ 6000588 : C801                		tst	#1,r0
(1)  750/ 600058A : 8B18                		bf	.mars_reset
(1)  751/ 600058C :                     .md_reset:
(1)  752/ 600058C : D112                		mov.l	#"68UP",r1		; wait for the 68k to show up
(1)  753/ 600058E : C60B                		mov.l	@(comm12,gbr),r0
(1)  754/ 6000590 : 3100                		cmp/eq	r0,r1
(1)  755/ 6000592 : 8BFB                		bf	.md_reset
(1)  756/ 6000594 : D011                		mov.l	#"S_OK",r0		; tell the others slave is ready
(1)  757/ 6000596 : C209                		mov.l	r0,@(comm4,gbr)
(1)  758/ 6000598 :                     .sh_wait:
(1)  759/ 6000598 : D111                		mov.l	#"M_OK",r1		; wait for the slave to show up
(1)  760/ 600059A : C608                		mov.l	@(comm0,gbr),r0
(1)  761/ 600059C : 3100                		cmp/eq	r0,r1
(1)  762/ 600059E : 8BFB                		bf	.sh_wait
(1)  763/ 60005A0 : DF10                		mov.l	#CS3|$3F000-8,r15
(1)  764/ 60005A2 : D011                		mov.l	#SH2_S_HotStart,r0
(1)  765/ 60005A4 : 2F02                		mov.l	r0,@r15
(1)  766/ 60005A6 : 9022                		mov.w	#$F0,r0
(1)  767/ 60005A8 : 1F01                		mov.l	r0,@(4,r15)
(1)  768/ 60005AA : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  769/ 60005AC : E000                		mov.l	#0,r0
(1)  770/ 60005AE : 2102                		mov.l	r0,@r1			; DMA off
(1)  771/ 60005B0 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  772/ 60005B2 : E000                		mov.l	#0,r0
(1)  773/ 60005B4 : 2102                		mov.l	r0,@r1
(1)  774/ 60005B6 : 911B                		mov.l	#%0100010011100000,r1
(1)  775/ 60005B8 : 2102                		mov.l	r0,@r1			; Channel control
(1)  776/ 60005BA : 002B                		rte
(1)  777/ 60005BC : 0009                		nop
(1)  778/ 60005BE :                     .mars_reset:
(1)  779/ 60005BE : 9115                		mov	#_FRT,r1
(1)  780/ 60005C0 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  781/ 60005C2 : CB01                		or	#$01,r0
(1)  782/ 60005C4 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  783/ 60005C6 :                     .vresloop:
(1)  784/ 60005C6 : AFFE                		bra	.vresloop
(1)  785/ 60005C8 : 0009                		nop
(1)  786/ 60005CA :                     		align 4
(1)  787/ 60005CC : 2000 4018 2000 4016 		ltorg			; Save Slave IRQ literals
                    2000 4000 3638 5550 
                    535F 4F4B 4D5F 4F4B 
                    0603 EFF8 0600 12F0 
                    FE10 00F0 44E0      
(1)  788/ 60005F2 :                     
(1)  789/ 60005F2 :                     ; ====================================================================
(1)  790/ 60005F2 :                     ; ----------------------------------------------------------------
(1)  791/ 60005F2 :                     ; MARS System features
(1)  792/ 60005F2 :                     ; ----------------------------------------------------------------
(1)  793/ 60005F2 :                     
(1)  794/ 60005F2 :                     		include "system/mars/video.asm"
(2)    1/ 60005F2 :                     ; ====================================================================
(2)    2/ 60005F2 :                     ; ----------------------------------------------------------------
(2)    3/ 60005F2 :                     ; MARS Video
(2)    4/ 60005F2 :                     ; ----------------------------------------------------------------
(2)    5/ 60005F2 :                     
(2)    6/ 60005F2 :                     ; ----------------------------------------
(2)    7/ 60005F2 :                     ; Variables
(2)    8/ 60005F2 :                     ; ----------------------------------------
(2)    9/ 60005F2 :                     
(2)   10/ 60005F2 :                     ; 3D drawing area, affects 3D positions too.
(2)   11/ 60005F2 : =$140               SCREEN_WIDTH	equ	320
(2)   12/ 60005F2 : =$E0                SCREEN_HEIGHT	equ	224
(2)   13/ 60005F2 :                     
(2)   14/ 60005F2 :                     ; MSB
(2)   15/ 60005F2 : =$80                PLGN_TEXURE	equ	%10000000
(2)   16/ 60005F2 : =$40                PLGN_TRI	equ	%01000000
(2)   17/ 60005F2 :                     
(2)   18/ 60005F2 :                     ; ----------------------------------------
(2)   19/ 60005F2 :                     ; Structs
(2)   20/ 60005F2 :                     ; ----------------------------------------
(2)   21/ 60005F2 :                     
(2)   22/ 60005F2 :                     ; model objects
(2)   23/ 60005F2 : (MACRO)             		struct 0
(2)   23/ 60005F2 : =$60005F2           GLBL_LASTPC     set *
(2)   23/   438F2 :                                     dephase
(2)   23/   438F2 : =$438F2             GLBL_LASTORG    set *
(2)   23/       0 :                                     phase 0
(2)   24/       0 :                     mdl_data	ds.l 1			; Model data pointer, if zero: no model
(2)   25/       4 :                     mdl_option	ds.l 1			; Model options: pixelvalue add
(2)   26/       8 :                     mdl_x_pos	ds.l 1			; X position $000000.00
(2)   27/       C :                     mdl_y_pos	ds.l 1			; Y position $000000.00
(2)   28/      10 :                     mdl_z_pos	ds.l 1			; Z position $000000.00
(2)   29/      14 :                     mdl_x_rot	ds.l 1			; X rotation $000000.00
(2)   30/      18 :                     mdl_y_rot	ds.l 1			; Y rotation $000000.00
(2)   31/      1C :                     mdl_z_rot	ds.l 1			; Z rotation $000000.00
(2)   32/      20 :                     mdl_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   33/      24 :                     mdl_animframe	ds.l 1			; Current frame in animation
(2)   34/      28 :                     mdl_animtimer	ds.l 1			; Animation timer
(2)   35/      2C :                     mdl_animspd	ds.l 1			; Animation USER speed setting
(2)   36/      30 :                     sizeof_mdlobj	ds.l 0
(2)   37/      32 : (MACRO)             		finish
(2)   37/       0 :                                     !org GLBL_LASTORG
(2)   37/ 60005F2 :                                     phase GLBL_LASTPC
(2)   38/ 60005F2 :                     
(2)   39/ 60005F2 :                     ; field view camera
(2)   40/ 60005F2 : (MACRO)             		struct 0
(2)   40/ 60005F2 : =$60005F2           GLBL_LASTPC     set *
(2)   40/   438F2 :                                     dephase
(2)   40/   438F2 : =$438F2             GLBL_LASTORG    set *
(2)   40/       0 :                                     phase 0
(2)   41/       0 :                     cam_x_pos	ds.l 1			; X position $000000.00
(2)   42/       4 :                     cam_y_pos	ds.l 1			; Y position $000000.00
(2)   43/       8 :                     cam_z_pos	ds.l 1			; Z position $000000.00
(2)   44/       C :                     cam_x_rot	ds.l 1			; X rotation $000000.00
(2)   45/      10 :                     cam_y_rot	ds.l 1			; Y rotation $000000.00
(2)   46/      14 :                     cam_z_rot	ds.l 1			; Z rotation $000000.00
(2)   47/      18 :                     cam_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   48/      1C :                     cam_animframe	ds.l 1			; Current frame in animation
(2)   49/      20 :                     cam_animtimer	ds.l 1			; Animation timer
(2)   50/      24 :                     cam_animspd	ds.l 1			; Animation speed
(2)   51/      28 :                     sizeof_camera	ds.l 0
(2)   52/      2A : (MACRO)             		finish
(2)   52/       0 :                                     !org GLBL_LASTORG
(2)   52/ 60005F2 :                                     phase GLBL_LASTPC
(2)   53/ 60005F2 :                     
(2)   54/ 60005F2 : (MACRO)             		struct 0
(2)   54/ 60005F2 : =$60005F2           GLBL_LASTPC     set *
(2)   54/   438F2 :                                     dephase
(2)   54/   438F2 : =$438F2             GLBL_LASTORG    set *
(2)   54/       0 :                                     phase 0
(2)   55/       0 :                     mdllay_data	ds.l 1			; Model layout data, zero: Don't use layout
(2)   56/       4 :                     mdllay_x	ds.l 1			; X position
(2)   57/       8 :                     mdllay_y	ds.l 1			; Y position
(2)   58/       C :                     mdllay_z	ds.l 1			; Z position
(2)   59/      10 :                     mdllay_x_last	ds.l 1			; LAST saved X position
(2)   60/      14 :                     mdllay_y_last	ds.l 1			; LAST saved Y position
(2)   61/      18 :                     mdllay_z_last	ds.l 1			; LAST saved Z position
(2)   62/      1C :                     mdllay_xr_last	ds.l 1			; LAST saved X rotation
(2)   63/      20 :                     sizeof_layout	ds.l 0
(2)   64/      22 : (MACRO)             		finish
(2)   64/       0 :                                     !org GLBL_LASTORG
(2)   64/ 60005F2 :                                     phase GLBL_LASTPC
(2)   65/ 60005F2 :                     
(2)   66/ 60005F2 : (MACRO)             		struct 0
(2)   66/ 60005F2 : =$60005F2           GLBL_LASTPC     set *
(2)   66/   438F2 :                                     dephase
(2)   66/   438F2 : =$438F2             GLBL_LASTORG    set *
(2)   66/       0 :                                     phase 0
(2)   67/       0 :                     plypz_ypos	ds.l 1			; Ytop | Ybottom
(2)   68/       4 :                     plypz_xl	ds.l 1
(2)   69/       8 :                     plypz_xl_dx	ds.l 1
(2)   70/       C :                     plypz_xr	ds.l 1
(2)   71/      10 :                     plypz_xr_dx	ds.l 1
(2)   72/      14 :                     plypz_src_xl	ds.l 1
(2)   73/      18 :                     plypz_src_xl_dx	ds.l 1
(2)   74/      1C :                     plypz_src_yl	ds.l 1
(2)   75/      20 :                     plypz_src_yl_dx	ds.l 1
(2)   76/      24 :                     plypz_src_xr	ds.l 1
(2)   77/      28 :                     plypz_src_xr_dx	ds.l 1
(2)   78/      2C :                     plypz_src_yr	ds.l 1
(2)   79/      30 :                     plypz_src_yr_dx	ds.l 1
(2)   80/      34 :                     plypz_mtrl	ds.l 1
(2)   81/      38 :                     plypz_type	ds.l 1			; Type | Option
(2)   82/      3C :                     sizeof_plypz	ds.l 0
(2)   83/      3E : (MACRO)             		finish
(2)   83/       0 :                                     !org GLBL_LASTORG
(2)   83/ 60005F2 :                                     phase GLBL_LASTPC
(2)   84/ 60005F2 :                     
(2)   85/ 60005F2 : (MACRO)             		struct 0
(2)   85/ 60005F2 : =$60005F2           GLBL_LASTPC     set *
(2)   85/   438F2 :                                     dephase
(2)   85/   438F2 : =$438F2             GLBL_LASTORG    set *
(2)   85/       0 :                                     phase 0
(2)   86/       0 :                     polygn_type	ds.l 1	; %MST00000 iiiiiiii wwwwwwww wwwwwwww | Type and Material option (palinc|width)
(2)   87/       4 :                     polygn_mtrl	ds.l 1	; Material Type: Color (0-255) or Texture data address
(2)   88/       8 :                     polygn_points	ds.w 4*2; X/Y positions
(2)   89/      18 :                     polygn_srcpnts	ds.w 4*2; X/Y texture points (16-bit), ignored on solidcolor
(2)   90/      28 :                     sizeof_polygn	ds.l 0
(2)   91/      2A : (MACRO)             		finish
(2)   91/       0 :                                     !org GLBL_LASTORG
(2)   91/ 60005F2 :                                     phase GLBL_LASTPC
(2)   92/ 60005F2 :                     
(2)   93/ 60005F2 :                     ; ====================================================================
(2)   94/ 60005F2 :                     ; ----------------------------------------------------------------
(2)   95/ 60005F2 :                     ; Init MARS Video
(2)   96/ 60005F2 :                     ; ----------------------------------------------------------------
(2)   97/ 60005F2 :                     
(2)   98/ 60005F2 :                     MarsVideo_Init:
(2)   99/ 60005F2 : 4F22                		sts	pr,@-r15
(2)  100/ 60005F4 : D104                		mov	#_sysreg,r1
(2)  101/ 60005F6 : 900B                		mov 	#FM,r0			; Set SVDP permission to SH2
(2)  102/ 60005F8 : 8010                  		mov.b	r0,@(adapter,r1)
(2)  103/ 60005FA : D104                		mov 	#_vdpreg,r1
(2)  104/ 60005FC : E000                		mov	#0,r0			; Start at blank
(2)  105/ 60005FE : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)  106/ 6000600 : 4F26                		lds	@r15+,pr
(2)  107/ 6000602 : 000B                		rts
(2)  108/ 6000604 : 0009                		nop
(2)  109/ 6000606 :                     		align 4
(2)  110/ 6000608 : 2000 4000 2000 4100 		ltorg
                    0080                
(2)  111/ 6000612 :                     
(2)  112/ 6000612 :                     ; ; ------------------------------------------------
(2)  113/ 6000612 :                     ; ; Init current framebuffer
(2)  114/ 6000612 :                     ; ; ------------------------------------------------
(2)  115/ 6000612 :                     ;
(2)  116/ 6000612 :                     ; .this_fb:
(2)  117/ 6000612 :                     ;  		mov	#_framebuffer,r1
(2)  118/ 6000612 :                     ; 		mov	#$200/2,r0	; START line data
(2)  119/ 6000612 :                     ; 		mov	#240,r2		; Vertical lines to set
(2)  120/ 6000612 :                     ; 		mov	r0,r3		; Increment by (copy from r0)
(2)  121/ 6000612 :                     ; .loop:		mov.w	r0,@r1
(2)  122/ 6000612 :                     ; 		add	#2,r1
(2)  123/ 6000612 :                     ; 		add	r3,r0
(2)  124/ 6000612 :                     ; 		dt	r2
(2)  125/ 6000612 :                     ; 		bf	.loop
(2)  126/ 6000612 :                     ; .fb_wait1:	mov.w   @($A,r4),r0	; Swap for next table
(2)  127/ 6000612 :                     ; 		tst     #2,r0
(2)  128/ 6000612 :                     ; 		bf      .fb_wait1
(2)  129/ 6000612 :                     ; 		mov.w   @($A,r4), r0
(2)  130/ 6000612 :                     ; 		xor     #1,r0
(2)  131/ 6000612 :                     ; 		mov.w   r0,@($A,r4)
(2)  132/ 6000612 :                     ; 		and     #1,r0
(2)  133/ 6000612 :                     ; 		mov     r0,r1
(2)  134/ 6000612 :                     ; .wait_result:
(2)  135/ 6000612 :                     ; 		mov.w   @($A,r4),r0
(2)  136/ 6000612 :                     ; 		and     #1,r0
(2)  137/ 6000612 :                     ; 		cmp/eq  r0,r1
(2)  138/ 6000612 :                     ; 		bf      .wait_result
(2)  139/ 6000612 :                     ; 		rts
(2)  140/ 6000612 :                     ; 		nop
(2)  141/ 6000612 :                     ; 		align 4
(2)  142/ 6000612 :                     
(2)  143/ 6000612 :                     ; ------------------------------------------------
(2)  144/ 6000612 :                     ; Read polygon and build pieces
(2)  145/ 6000612 :                     ;
(2)  146/ 6000612 :                     ; Input:
(2)  147/ 6000612 :                     ; r14 - Polygon data
(2)  148/ 6000612 :                     ;
(2)  149/ 6000612 :                     ; polygn_type bits:
(2)  150/ 6000612 :                     ; %tsp----- -------- -------- --------
(2)  151/ 6000612 :                     ;
(2)  152/ 6000612 :                     ; p - Polygon type: Quad (0) or Triangle (1)
(2)  153/ 6000612 :                     ; s - Corrds are Normal (0) or Sprite (1) <-- Unused.
(2)  154/ 6000612 :                     ; t - Polygon has texture data (1):
(2)  155/ 6000612 :                     ;     polygn_mtrlopt: Texture width
(2)  156/ 6000612 :                     ;     polygn_mtrl   : Texture data address
(2)  157/ 6000612 :                     ;     polygn_srcpnts: Texture X/Y positions for
(2)  158/ 6000612 :                     ;                     each edge (3 or 4)
(2)  159/ 6000612 :                     ; ------------------------------------------------
(2)  160/ 6000612 :                     
(2)  161/ 6000612 :                     MarsVideo_SlicePlgn:
(2)  162/ 6000612 : 4F22                		sts	pr,@-r15
(2)  163/ 6000614 : DD30                		mov	#Cach_DDA_Last,r13		; r13 - DDA last point
(2)  164/ 6000616 : DC31                		mov	#Cach_DDA_Top,r12		; r12 - DDA first point
(2)  165/ 6000618 : 50E0                		mov	@(polygn_type,r14),r0
(2)  166/ 600061A : 4029                		shlr16	r0
(2)  167/ 600061C : 4019                		shlr8	r0
(2)  168/ 600061E : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  169/ 6000620 : 8B00                		bf	.tringl
(2)  170/ 6000622 : 7D08                		add	#8,r13				; If quad: add 8
(2)  171/ 6000624 :                     .tringl:
(2)  172/ 6000624 : 61E3                		mov	r14,r1
(2)  173/ 6000626 : 62C3                		mov	r12,r2
(2)  174/ 6000628 : D32D                		mov	#Cach_DDA_Src,r3
(2)  175/ 600062A : 7108                		add	#polygn_points,r1
(2)  176/ 600062C :                     ; 		tst	#PLGN_SPRITE,r0			; PLGN_SPRITE set?
(2)  177/ 600062C :                     ; 		bt	.plgn_pnts
(2)  178/ 600062C :                     ;
(2)  179/ 600062C :                     ; ; ----------------------------------------
(2)  180/ 600062C :                     ; ; Sprite points
(2)  181/ 600062C :                     ; ; ----------------------------------------
(2)  182/ 600062C :                     ;
(2)  183/ 600062C :                     ; ; TODO: rework or get rid of this
(2)  184/ 600062C :                     ; .spr_pnts:
(2)  185/ 600062C :                     ; 		mov.w	@r1+,r8		; X pos
(2)  186/ 600062C :                     ; 		mov.w	@r1+,r9		; Y pos
(2)  187/ 600062C :                     ;
(2)  188/ 600062C :                     ; 		mov.w	@r1+,r4
(2)  189/ 600062C :                     ; 		mov.w	@r1+,r6
(2)  190/ 600062C :                     ; 		mov.w	@r1+,r5
(2)  191/ 600062C :                     ; 		mov.w	@r1+,r7
(2)  192/ 600062C :                     ; 		add	#2*2,r1
(2)  193/ 600062C :                     ; 		add	r8,r4
(2)  194/ 600062C :                     ; 		add 	r8,r5
(2)  195/ 600062C :                     ; 		add	r9,r6
(2)  196/ 600062C :                     ; 		add 	r9,r7
(2)  197/ 600062C :                     ; 		mov	r5,@r2		; TR
(2)  198/ 600062C :                     ; 		add	#4,r2
(2)  199/ 600062C :                     ; 		mov	r6,@r2
(2)  200/ 600062C :                     ; 		add	#4,r2
(2)  201/ 600062C :                     ; 		mov	r4,@r2		; TL
(2)  202/ 600062C :                     ; 		add	#4,r2
(2)  203/ 600062C :                     ; 		mov	r6,@r2
(2)  204/ 600062C :                     ; 		add	#4,r2
(2)  205/ 600062C :                     ; 		mov	r4,@r2		; BL
(2)  206/ 600062C :                     ; 		add	#4,r2
(2)  207/ 600062C :                     ; 		mov	r7,@r2
(2)  208/ 600062C :                     ; 		add	#4,r2
(2)  209/ 600062C :                     ; 		mov	r5,@r2		; BR
(2)  210/ 600062C :                     ; 		add	#4,r2
(2)  211/ 600062C :                     ; 		mov	r7,@r2
(2)  212/ 600062C :                     ; 		add	#4,r2
(2)  213/ 600062C :                     ;
(2)  214/ 600062C :                     ; 		mov.w	@r1+,r4
(2)  215/ 600062C :                     ; 		mov.w	@r1+,r6
(2)  216/ 600062C :                     ; 		mov.w	@r1+,r5
(2)  217/ 600062C :                     ; 		mov.w	@r1+,r7
(2)  218/ 600062C :                     ; 		mov	r5,@r3		; TR
(2)  219/ 600062C :                     ; 		add	#4,r3
(2)  220/ 600062C :                     ; 		mov	r6,@r3
(2)  221/ 600062C :                     ; 		add	#4,r3
(2)  222/ 600062C :                     ; 		mov	r4,@r3		; TL
(2)  223/ 600062C :                     ; 		add	#4,r3
(2)  224/ 600062C :                     ; 		mov	r6,@r3
(2)  225/ 600062C :                     ; 		add	#4,r3
(2)  226/ 600062C :                     ; 		mov	r4,@r3		; BL
(2)  227/ 600062C :                     ; 		add	#4,r3
(2)  228/ 600062C :                     ; 		mov	r7,@r3
(2)  229/ 600062C :                     ; 		add	#4,r3
(2)  230/ 600062C :                     ; 		mov	r5,@r3		; BR
(2)  231/ 600062C :                     ; 		add	#4,r3
(2)  232/ 600062C :                     ; 		mov	r7,@r3
(2)  233/ 600062C :                     ; 		add	#4,r3
(2)  234/ 600062C :                     ; ; 		mov	#4*2,r0
(2)  235/ 600062C :                     ; ; .sprsrc_pnts:
(2)  236/ 600062C :                     ; ; 		mov.w	@r1+,r0
(2)  237/ 600062C :                     ; ; 		mov.w	@r1+,r4
(2)  238/ 600062C :                     ; ; 		mov	r0,@r3
(2)  239/ 600062C :                     ; ; 		mov	r4,@(4,r3)
(2)  240/ 600062C :                     ; ; 		dt	r0
(2)  241/ 600062C :                     ; ; 		bf/s	.sprsrc_pnts
(2)  242/ 600062C :                     ; ; 		add	#8,r3
(2)  243/ 600062C :                     ; 		bra	.start_math
(2)  244/ 600062C :                     ; 		nop
(2)  245/ 600062C :                     ;
(2)  246/ 600062C :                     ; ; ----------------------------------------
(2)  247/ 600062C :                     ; ; Polygon points
(2)  248/ 600062C :                     ; ; ----------------------------------------
(2)  249/ 600062C :                     ;
(2)  250/ 600062C :                     ; .plgn_pnts:
(2)  251/ 600062C :                     
(2)  252/ 600062C :                     	; Copy polygon points Cache's DDA
(2)  253/ 600062C : E804                		mov	#4,r8
(2)  254/ 600062E : 965F                		mov	#SCREEN_WIDTH/2,r6
(2)  255/ 6000630 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)  256/ 6000632 :                     .setpnts:
(2)  257/ 6000632 : 6415                		mov.w	@r1+,r4			; Get X
(2)  258/ 6000634 : 6515                		mov.w	@r1+,r5			; Get Y
(2)  259/ 6000636 : 346C                		add	r6,r4			; X + width
(2)  260/ 6000638 : 357C                		add	r7,r5			; Y + height
(2)  261/ 600063A : 2242                		mov	r4,@r2
(2)  262/ 600063C : 1251                		mov	r5,@(4,r2)
(2)  263/ 600063E : 4810                		dt	r8
(2)  264/ 6000640 : 8FF7                		bf/s	.setpnts
(2)  265/ 6000642 : 7208                		add	#8,r2
(2)  266/ 6000644 :                     
(2)  267/ 6000644 :                     	; Copy texture source points
(2)  268/ 6000644 :                     	; to Cache
(2)  269/ 6000644 : E804                		mov	#4,r8
(2)  270/ 6000646 :                     .src_pnts:
(2)  271/ 6000646 : 6415                		mov.w	@r1+,r4
(2)  272/ 6000648 : 6515                		mov.w	@r1+,r5
(2)  273/ 600064A : 2342                		mov	r4,@r3
(2)  274/ 600064C : 1351                		mov	r5,@(4,r3)
(2)  275/ 600064E : 4810                		dt	r8
(2)  276/ 6000650 : 8FF9                		bf/s	.src_pnts
(2)  277/ 6000652 : 7308                		add	#8,r3
(2)  278/ 6000654 :                     
(2)  279/ 6000654 :                     	; Here we search for the lowest Y point
(2)  280/ 6000654 :                     	; and highest Y
(2)  281/ 6000654 :                     	; r10 - Top Y
(2)  282/ 6000654 :                     	; r11 - Bottom Y
(2)  283/ 6000654 :                     .start_math:
(2)  284/ 6000654 : E903                		mov	#3,r9
(2)  285/ 6000656 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  286/ 6000658 : 8B00                		bf	.ytringl
(2)  287/ 600065A : 7901                		add	#1,r9
(2)  288/ 600065C :                     .ytringl:
(2)  289/ 600065C : DA21                		mov	#$7FFFFFFF,r10
(2)  290/ 600065E : EBFF                		mov	#$FFFFFFFF,r11
(2)  291/ 6000660 : 67C3                		mov 	r12,r7
(2)  292/ 6000662 : 68C3                		mov	r12,r8
(2)  293/ 6000664 :                     .find_top:
(2)  294/ 6000664 : 5071                		mov	@(4,r7),r0
(2)  295/ 6000666 : 30B7                		cmp/gt	r11,r0
(2)  296/ 6000668 : 8B00                		bf	.is_low
(2)  297/ 600066A : 6B03                		mov 	r0,r11
(2)  298/ 600066C :                     .is_low:
(2)  299/ 600066C : 5081                		mov	@(4,r8),r0
(2)  300/ 600066E : 30A7                		cmp/gt	r10,r0
(2)  301/ 6000670 : 8901                		bt	.is_high
(2)  302/ 6000672 : 6A03                		mov 	r0,r10
(2)  303/ 6000674 : 6183                		mov	r8,r1
(2)  304/ 6000676 :                     .is_high:
(2)  305/ 6000676 : 7708                		add 	#8,r7
(2)  306/ 6000678 : 4910                		dt	r9
(2)  307/ 600067A : 8FF3                		bf/s	.find_top
(2)  308/ 600067C : 7808                		add	#8,r8
(2)  309/ 600067E : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2)  310/ 6000680 : 8927                		bt	.exit
(2)  311/ 6000682 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  312/ 6000684 : 8B25                		bf	.exit
(2)  313/ 6000686 : 9034                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  314/ 6000688 : 3A03                		cmp/ge	r0,r10
(2)  315/ 600068A : 8922                		bt	.exit
(2)  316/ 600068C :                     
(2)  317/ 600068C :                     	; r2 - Left DDA READ pointer
(2)  318/ 600068C :                     	; r3 - Right DDA READ pointer
(2)  319/ 600068C :                     	; r4 - Left X
(2)  320/ 600068C :                     	; r5 - Left DX
(2)  321/ 600068C :                     	; r6 - Right X
(2)  322/ 600068C :                     	; r7 - Right DX
(2)  323/ 600068C :                     	; r8 - Left width
(2)  324/ 600068C :                     	; r9 - Right width
(2)  325/ 600068C :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  326/ 600068C :                     	; r11 - Bottom Y
(2)  327/ 600068C :                     	; r12 - First DST point
(2)  328/ 600068C :                     	; r13 - Last DST point
(2)  329/ 600068C : 6213                		mov	r1,r2				; r2 - X left to process
(2)  330/ 600068E : 6313                		mov	r1,r3				; r3 - X right to process
(2)  331/ 6000690 : B030                		bsr	set_left
(2)  332/ 6000692 : 0009                		nop
(2)  333/ 6000694 : B072                		bsr	set_right
(2)  334/ 6000696 : 0009                		nop
(2)  335/ 6000698 :                     .next_pz:
(2)  336/ 6000698 : 902B                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  337/ 600069A : 3A07                		cmp/gt	r0,r10
(2)  338/ 600069C : 8919                		bt	.exit
(2)  339/ 600069E : 3AB3                		cmp/ge	r11,r10				; Y top => Y bottom?
(2)  340/ 60006A0 : 8917                		bt	.exit
(2)  341/ 60006A2 : C603                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  342/ 60006A4 : 6103                		mov	r0,r1
(2)  343/ 60006A6 : D010                		mov	#RAM_Mars_VdpDrwList_e,r0	; pointer reached end of the list?
(2)  344/ 60006A8 : 3103                		cmp/ge	r0,r1
(2)  345/ 60006AA : 8B02                		bf	.dontreset
(2)  346/ 60006AC : D00F                		mov	#RAM_Mars_VdpDrwList,r0		; Return WRITE pointer to the top of the list
(2)  347/ 60006AE : 6103                		mov	r0,r1
(2)  348/ 60006B0 : C203                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  349/ 60006B2 :                     .dontreset:
(2)  350/ 60006B2 : E001                		mov	#1,r0
(2)  351/ 60006B4 : C135                		mov.w	r0,@(marsGbl_WdDrwPause,gbr)	; Tell watchdog we are mid-write
(2)  352/ 60006B6 : B0B2                		bsr	put_piece
(2)  353/ 60006B8 : 0009                		nop
(2)  354/ 60006BA : E000                		mov	#0,r0
(2)  355/ 60006BC : C135                		mov.w	r0,@(marsGbl_WdDrwPause,gbr)	; Unlock.
(2)  356/ 60006BE :                     
(2)  357/ 60006BE :                     	; X direction update
(2)  358/ 60006BE : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  359/ 60006C0 : 8B03                		bf	.lefth2
(2)  360/ 60006C2 : B05B                		bsr	set_right
(2)  361/ 60006C4 : 0009                		nop
(2)  362/ 60006C6 : AFE7                		bra	.next_pz
(2)  363/ 60006C8 : 0009                		nop
(2)  364/ 60006CA :                     .lefth2:
(2)  365/ 60006CA : B013                		bsr	set_left
(2)  366/ 60006CC : 0009                		nop
(2)  367/ 60006CE : AFE3                		bra	.next_pz
(2)  368/ 60006D0 : 0009                		nop
(2)  369/ 60006D2 :                     .exit:
(2)  370/ 60006D2 : 4F26                		lds	@r15+,pr
(2)  371/ 60006D4 : 000B                		rts
(2)  372/ 60006D6 : 0009                		nop
(2)  373/ 60006D8 :                     		align 4
(2)  374/ 60006D8 : C000 03D8 C000 03C8 		ltorg
                    C000 03E8 7FFF FFFF 
                    0600 A114 0600 7414 
                    00A0 00E0           
(2)  375/ 60006F4 :                     
(2)  376/ 60006F4 :                     ; --------------------------------
(2)  377/ 60006F4 :                     
(2)  378/ 60006F4 :                     set_left:
(2)  379/ 60006F4 : 6823                		mov	r2,r8			; Get a copy of Xleft pointer
(2)  380/ 60006F6 : 7820                		add	#$20,r8			; To read Texture SRC points
(2)  381/ 60006F8 : 6482                		mov	@r8,r4
(2)  382/ 60006FA : 5581                		mov	@(4,r8),r5
(2)  383/ 60006FC : D841                		mov	#Cach_DDA_Src_L,r8
(2)  384/ 60006FE : 6043                		mov	r4,r0
(2)  385/ 6000700 : 4028                		shll16	r0
(2)  386/ 6000702 : 2802                		mov	r0,@r8
(2)  387/ 6000704 : 6053                		mov	r5,r0
(2)  388/ 6000706 : 4028                		shll16	r0
(2)  389/ 6000708 : 1802                		mov	r0,@(8,r8)
(2)  390/ 600070A : 6122                		mov	@r2,r1
(2)  391/ 600070C : 5821                		mov	@(4,r2),r8
(2)  392/ 600070E : 7208                		add	#8,r2
(2)  393/ 6000710 : 32D7                		cmp/gt	r13,r2
(2)  394/ 6000712 : 8B00                		bf	.lft_ok
(2)  395/ 6000714 : 62C3                		mov 	r12,r2
(2)  396/ 6000716 :                     .lft_ok:
(2)  397/ 6000716 : 5021                		mov	@(4,r2),r0
(2)  398/ 6000718 : 3088                		sub	r8,r0
(2)  399/ 600071A : 8800                		cmp/eq	#0,r0
(2)  400/ 600071C : 89EA                		bt	set_left
(2)  401/ 600071E : 4011                		cmp/pz	r0
(2)  402/ 6000720 : 8B29                		bf	.lft_skip
(2)  403/ 6000722 :                     
(2)  404/ 6000722 : 400A                		lds	r0,mach
(2)  405/ 6000724 : 6823                		mov	r2,r8
(2)  406/ 6000726 : 7820                		add	#$20,r8
(2)  407/ 6000728 : 6082                		mov 	@r8,r0
(2)  408/ 600072A : 3048                		sub 	r4,r0
(2)  409/ 600072C : 5481                		mov 	@(4,r8),r4
(2)  410/ 600072E : 3458                		sub 	r5,r4
(2)  411/ 6000730 : 6503                		mov	r0,r5
(2)  412/ 6000732 : 4418                		shll8	r4
(2)  413/ 6000734 : 4518                		shll8	r5
(2)  414/ 6000736 : 080A                		sts	mach,r8
(2)  415/ 6000738 : E001                		mov	#1,r0				; Tell WD we are using
(2)  416/ 600073A : C130                		mov.w	r0,@(marsGbl_DivStop_M,gbr)	; HW Division
(2)  417/ 600073C : 906E                		mov	#_JR,r0
(2)  418/ 600073E : 2082                		mov	r8,@r0
(2)  419/ 6000740 : 1051                		mov	r5,@(4,r0)
(2)  420/ 6000742 : 0009                		nop
(2)  421/ 6000744 : 5501                		mov	@(4,r0),r5
(2)  422/ 6000746 : 9069                		mov	#_JR,r0
(2)  423/ 6000748 : 2082                		mov	r8,@r0
(2)  424/ 600074A : 1041                		mov	r4,@(4,r0)
(2)  425/ 600074C : 0009                		nop
(2)  426/ 600074E : 5401                		mov	@(4,r0),r4
(2)  427/ 6000750 : 4418                		shll8	r4
(2)  428/ 6000752 : 4518                		shll8	r5
(2)  429/ 6000754 : D02C                		mov	#Cach_DDA_Src_L+$C,r0
(2)  430/ 6000756 : 2042                		mov	r4,@r0
(2)  431/ 6000758 : D02C                		mov	#Cach_DDA_Src_L+4,r0
(2)  432/ 600075A : 2052                		mov	r5,@r0
(2)  433/ 600075C : 6522                		mov	@r2,r5
(2)  434/ 600075E : 3518                		sub 	r1,r5
(2)  435/ 6000760 : 6413                		mov 	r1,r4
(2)  436/ 6000762 : 4518                		shll8	r5
(2)  437/ 6000764 : 4428                		shll16	r4
(2)  438/ 6000766 : 9059                		mov	#_JR,r0
(2)  439/ 6000768 : 2082                		mov	r8,@r0
(2)  440/ 600076A : 1051                		mov	r5,@(4,r0)
(2)  441/ 600076C : 0009                		nop
(2)  442/ 600076E : 5501                		mov	@(4,r0),r5
(2)  443/ 6000770 : E000                		mov	#0,r0				; Unlock HW division
(2)  444/ 6000772 : C130                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  445/ 6000774 : 4518                		shll8	r5
(2)  446/ 6000776 :                     .lft_skip:
(2)  447/ 6000776 : 000B                		rts
(2)  448/ 6000778 : 0009                		nop
(2)  449/ 600077A :                     		align 4
(2)  450/ 600077C :                     
(2)  451/ 600077C :                     ; --------------------------------
(2)  452/ 600077C :                     
(2)  453/ 600077C :                     set_right:
(2)  454/ 600077C : 6933                		mov	r3,r9
(2)  455/ 600077E : 7920                		add	#$20,r9
(2)  456/ 6000780 : 6692                		mov	@r9,r6
(2)  457/ 6000782 : 5791                		mov	@(4,r9),r7
(2)  458/ 6000784 : D922                		mov	#Cach_DDA_Src_R,r9
(2)  459/ 6000786 : 6063                		mov	r6,r0
(2)  460/ 6000788 : 4028                		shll16	r0
(2)  461/ 600078A : 2902                		mov	r0,@r9
(2)  462/ 600078C : 6073                		mov	r7,r0
(2)  463/ 600078E : 4028                		shll16	r0
(2)  464/ 6000790 : 1902                		mov	r0,@(8,r9)
(2)  465/ 6000792 :                     
(2)  466/ 6000792 : 6132                		mov	@r3,r1
(2)  467/ 6000794 : 5931                		mov	@(4,r3),r9
(2)  468/ 6000796 : 73F8                		add	#-8,r3
(2)  469/ 6000798 : 33C3                		cmp/ge	r12,r3
(2)  470/ 600079A : 8900                		bt	.rgt_ok
(2)  471/ 600079C : 63D3                		mov 	r13,r3
(2)  472/ 600079E :                     .rgt_ok:
(2)  473/ 600079E : 5031                		mov	@(4,r3),r0
(2)  474/ 60007A0 : 3098                		sub	r9,r0
(2)  475/ 60007A2 : 8800                		cmp/eq	#0,r0
(2)  476/ 60007A4 : 89EA                		bt	set_right
(2)  477/ 60007A6 : 4011                		cmp/pz	r0
(2)  478/ 60007A8 : 8B29                		bf	.rgt_skip
(2)  479/ 60007AA : 400A                		lds	r0,mach
(2)  480/ 60007AC : 6933                		mov	r3,r9
(2)  481/ 60007AE : 7920                		add	#$20,r9
(2)  482/ 60007B0 : 6092                		mov 	@r9,r0
(2)  483/ 60007B2 : 3068                		sub 	r6,r0
(2)  484/ 60007B4 : 5691                		mov 	@(4,r9),r6
(2)  485/ 60007B6 : 3678                		sub 	r7,r6
(2)  486/ 60007B8 : 6703                		mov	r0,r7
(2)  487/ 60007BA : 4618                		shll8	r6
(2)  488/ 60007BC : 4718                		shll8	r7
(2)  489/ 60007BE : 090A                		sts	mach,r9
(2)  490/ 60007C0 : E001                		mov	#1,r0				; Tell WD we are using
(2)  491/ 60007C2 : C130                		mov.w	r0,@(marsGbl_DivStop_M,gbr)	; HW Division
(2)  492/ 60007C4 : 902A                		mov	#_JR,r0
(2)  493/ 60007C6 : 2092                		mov	r9,@r0
(2)  494/ 60007C8 : 1071                		mov	r7,@(4,r0)
(2)  495/ 60007CA : 0009                		nop
(2)  496/ 60007CC : 5701                		mov	@(4,r0),r7
(2)  497/ 60007CE : 9025                		mov	#_JR,r0
(2)  498/ 60007D0 : 2092                		mov	r9,@r0
(2)  499/ 60007D2 : 1061                		mov	r6,@(4,r0)
(2)  500/ 60007D4 : 0009                		nop
(2)  501/ 60007D6 : 5601                		mov	@(4,r0),r6
(2)  502/ 60007D8 : 4618                		shll8	r6
(2)  503/ 60007DA : 4718                		shll8	r7
(2)  504/ 60007DC : D00D                		mov	#Cach_DDA_Src_R+4,r0
(2)  505/ 60007DE : 2072                		mov	r7,@r0
(2)  506/ 60007E0 : D00D                		mov	#Cach_DDA_Src_R+$C,r0
(2)  507/ 60007E2 : 2062                		mov	r6,@r0
(2)  508/ 60007E4 : 6732                		mov	@r3,r7
(2)  509/ 60007E6 : 3718                		sub 	r1,r7
(2)  510/ 60007E8 : 6613                		mov 	r1,r6
(2)  511/ 60007EA : 4628                		shll16	r6
(2)  512/ 60007EC : 4718                		shll8	r7
(2)  513/ 60007EE : 9015                		mov	#_JR,r0
(2)  514/ 60007F0 : 2092                		mov	r9,@r0
(2)  515/ 60007F2 : 1071                		mov	r7,@(4,r0)
(2)  516/ 60007F4 : 0009                		nop
(2)  517/ 60007F6 : 5701                		mov	@(4,r0),r7
(2)  518/ 60007F8 : E000                		mov	#0,r0				; Unlock HW division
(2)  519/ 60007FA : C130                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  520/ 60007FC : 4718                		shll8	r7
(2)  521/ 60007FE :                     .rgt_skip:
(2)  522/ 60007FE : 000B                		rts
(2)  523/ 6000800 : 0009                		nop
(2)  524/ 6000802 :                     		align 4
(2)  525/ 6000804 : C000 0408 C000 0414 		ltorg
                    C000 040C C000 0418 
                    C000 041C C000 0424 
                    FF00                
(2)  526/ 600081E :                     
(2)  527/ 600081E :                     ; --------------------------------
(2)  528/ 600081E :                     ; Mark piece
(2)  529/ 600081E :                     ; --------------------------------
(2)  530/ 600081E :                     
(2)  531/ 600081E :                     put_piece:
(2)  532/ 600081E : 5821                		mov	@(4,r2),r8
(2)  533/ 6000820 : 5931                		mov	@(4,r3),r9
(2)  534/ 6000822 : 38A8                		sub	r10,r8
(2)  535/ 6000824 : 39A8                		sub	r10,r9
(2)  536/ 6000826 : 6083                		mov	r8,r0
(2)  537/ 6000828 : 3987                		cmp/gt	r8,r9
(2)  538/ 600082A : 8900                		bt	.lefth
(2)  539/ 600082C : 6093                		mov	r9,r0
(2)  540/ 600082E :                     .lefth:
(2)  541/ 600082E : 2F26                		mov	r2,@-r15
(2)  542/ 6000830 : 2F36                		mov	r3,@-r15
(2)  543/ 6000832 : 2F56                		mov	r5,@-r15
(2)  544/ 6000834 : 2F76                		mov	r7,@-r15
(2)  545/ 6000836 : 2F86                		mov	r8,@-r15
(2)  546/ 6000838 : 2F96                		mov	r9,@-r15
(2)  547/ 600083A : 1141                		mov 	r4,@(plypz_xl,r1)
(2)  548/ 600083C : 1152                		mov 	r5,@(plypz_xl_dx,r1)
(2)  549/ 600083E : 1163                		mov 	r6,@(plypz_xr,r1)
(2)  550/ 6000840 : 1174                		mov 	r7,@(plypz_xr_dx,r1)
(2)  551/ 6000842 : 350D                		dmuls	r0,r5
(2)  552/ 6000844 : 021A                		sts	macl,r2
(2)  553/ 6000846 : 370D                		dmuls	r0,r7
(2)  554/ 6000848 : 031A                		sts	macl,r3
(2)  555/ 600084A : 342C                		add 	r2,r4
(2)  556/ 600084C : 363C                		add	r3,r6
(2)  557/ 600084E : 62A3                		mov	r10,r2
(2)  558/ 6000850 : 3A0C                		add	r0,r10
(2)  559/ 6000852 : 63A3                		mov	r10,r3
(2)  560/ 6000854 : 4228                		shll16	r2
(2)  561/ 6000856 : 232B                		or	r2,r3
(2)  562/ 6000858 : 1130                		mov	r3,@(plypz_ypos,r1)
(2)  563/ 600085A : 2F36                		mov	r3,@-r15
(2)  564/ 600085C : D220                		mov	#Cach_DDA_Src_L,r2
(2)  565/ 600085E : 6522                		mov	@r2,r5
(2)  566/ 6000860 : 1155                		mov	r5,@(plypz_src_xl,r1)
(2)  567/ 6000862 : 5721                		mov	@(4,r2),r7
(2)  568/ 6000864 : 1176                		mov	r7,@(plypz_src_xl_dx,r1)
(2)  569/ 6000866 : 5822                		mov	@(8,r2),r8
(2)  570/ 6000868 : 1187                		mov	r8,@(plypz_src_yl,r1)
(2)  571/ 600086A : 5923                		mov	@($C,r2),r9
(2)  572/ 600086C : 1198                		mov	r9,@(plypz_src_yl_dx,r1)
(2)  573/ 600086E : 370D                		dmuls	r0,r7
(2)  574/ 6000870 : 021A                		sts	macl,r2
(2)  575/ 6000872 : 390D                		dmuls	r0,r9
(2)  576/ 6000874 : 031A                		sts	macl,r3
(2)  577/ 6000876 : 352C                		add 	r2,r5
(2)  578/ 6000878 : 383C                		add	r3,r8
(2)  579/ 600087A : D21A                		mov	#Cach_DDA_Src_L,r2
(2)  580/ 600087C : 2252                		mov	r5,@r2
(2)  581/ 600087E : 1282                		mov	r8,@(8,r2)
(2)  582/ 6000880 : D219                		mov	#Cach_DDA_Src_R,r2
(2)  583/ 6000882 : 6522                		mov	@r2,r5
(2)  584/ 6000884 : 1159                		mov	r5,@(plypz_src_xr,r1)
(2)  585/ 6000886 : 5721                		mov	@(4,r2),r7
(2)  586/ 6000888 : 117A                		mov	r7,@(plypz_src_xr_dx,r1)
(2)  587/ 600088A : 5822                		mov	@(8,r2),r8
(2)  588/ 600088C : 118B                		mov	r8,@(plypz_src_yr,r1)
(2)  589/ 600088E : 5923                		mov	@($C,r2),r9
(2)  590/ 6000890 : 119C                		mov	r9,@(plypz_src_yr_dx,r1)
(2)  591/ 6000892 : 370D                		dmuls	r0,r7
(2)  592/ 6000894 : 021A                		sts	macl,r2
(2)  593/ 6000896 : 390D                		dmuls	r0,r9
(2)  594/ 6000898 : 031A                		sts	macl,r3
(2)  595/ 600089A : 352C                		add 	r2,r5
(2)  596/ 600089C : 383C                		add	r3,r8
(2)  597/ 600089E : D213                		mov	#Cach_DDA_Src_R,r2
(2)  598/ 60008A0 : 2252                		mov	r5,@r2
(2)  599/ 60008A2 : 1282                		mov	r8,@(8,r2)
(2)  600/ 60008A4 : 63F6                		mov	@r15+,r3
(2)  601/ 60008A6 : 4315                		cmp/pl	r3			; TOP check, 2 steps
(2)  602/ 60008A8 : 8902                		bt	.top_neg
(2)  603/ 60008AA : 4328                		shll16	r3
(2)  604/ 60008AC : 4315                		cmp/pl	r3
(2)  605/ 60008AE : 8B0E                		bf	.bad_piece
(2)  606/ 60008B0 :                     .top_neg:
(2)  607/ 60008B0 : 50E1                		mov	@(polygn_mtrl,r14),r0
(2)  608/ 60008B2 : 110D                		mov 	r0,@(plypz_mtrl,r1)
(2)  609/ 60008B4 : 50E0                		mov	@(polygn_type,r14),r0
(2)  610/ 60008B6 : 110E                		mov 	r0,@(plypz_type,r1)
(2)  611/ 60008B8 : 713C                		add	#sizeof_plypz,r1
(2)  612/ 60008BA : 6013                		mov	r1,r0
(2)  613/ 60008BC : D80C                		mov	#RAM_Mars_VdpDrwList_e,r8
(2)  614/ 60008BE : 3083                		cmp/ge	r8,r0
(2)  615/ 60008C0 : 8B01                		bf	.dontreset_pz
(2)  616/ 60008C2 : D00C                		mov	#RAM_Mars_VdpDrwList,r0
(2)  617/ 60008C4 : 6103                		mov	r0,r1
(2)  618/ 60008C6 :                     .dontreset_pz:
(2)  619/ 60008C6 : C203                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  620/ 60008C8 : C52D                		mov.w	@(marsGbl_PzListCntr,gbr),r0
(2)  621/ 60008CA : 7001                		add	#1,r0
(2)  622/ 60008CC : C12D                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  623/ 60008CE :                     .bad_piece:
(2)  624/ 60008CE : 69F6                		mov	@r15+,r9
(2)  625/ 60008D0 : 68F6                		mov	@r15+,r8
(2)  626/ 60008D2 : 67F6                		mov	@r15+,r7
(2)  627/ 60008D4 : 65F6                		mov	@r15+,r5
(2)  628/ 60008D6 : 63F6                		mov	@r15+,r3
(2)  629/ 60008D8 : 62F6                		mov	@r15+,r2
(2)  630/ 60008DA : 000B                		rts
(2)  631/ 60008DC : 0009                		nop
(2)  632/ 60008DE :                     		align 4
(2)  633/ 60008E0 : C000 0408 C000 0408 		ltorg
                    C000 0418 C000 0418 
                    0600 A114 0600 7414 
(2)  634/ 60008F8 :                     
(2)  635/ 60008F8 :                     ; ; ------------------------------------
(2)  636/ 60008F8 :                     ; ; MarsVideo_ClearFrame
(2)  637/ 60008F8 :                     ; ;
(2)  638/ 60008F8 :                     ; ; Clear the current framebuffer
(2)  639/ 60008F8 :                     ; ; ------------------------------------
(2)  640/ 60008F8 :                     ;
(2)  641/ 60008F8 :                     ; MarsVideo_ClearFrame:
(2)  642/ 60008F8 :                     ; 		mov	#_vdpreg,r1
(2)  643/ 60008F8 :                     ; .wait2		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  644/ 60008F8 :                     ; 		and	#%10,r0
(2)  645/ 60008F8 :                     ; 		cmp/eq	#2,r0
(2)  646/ 60008F8 :                     ; 		bt	.wait2
(2)  647/ 60008F8 :                     ;
(2)  648/ 60008F8 :                     ; 		mov	#255,r2			; r2 - lenght: 256 words per pass
(2)  649/ 60008F8 :                     ; 		mov	#$200/2,r3		; r3 - Start address / 2
(2)  650/ 60008F8 :                     ; 		mov	#0,r4			; r4 - data (zero)
(2)  651/ 60008F8 :                     ; 		mov	#256,r5			; Increment address by 256
(2)  652/ 60008F8 :                     ; 		mov	#((512*240)/256)/2,r6	; 140 passes
(2)  653/ 60008F8 :                     ; .loop
(2)  654/ 60008F8 :                     ; 		mov	r2,r0
(2)  655/ 60008F8 :                     ; 		mov.w	r0,@(4,r1)		; Set length
(2)  656/ 60008F8 :                     ; 		mov	r3,r0
(2)  657/ 60008F8 :                     ; 		mov.w	r0,@(6,r1)		; Set address
(2)  658/ 60008F8 :                     ; 		mov	r4,r0
(2)  659/ 60008F8 :                     ; 		mov.w	r0,@(8,r1)		; Set data
(2)  660/ 60008F8 :                     ; 		add	r5,r3
(2)  661/ 60008F8 :                     ;
(2)  662/ 60008F8 :                     ; .wait		mov.w	@(10,r1),r0		; Wait for FEN to clear
(2)  663/ 60008F8 :                     ; 		and	#%10,r0
(2)  664/ 60008F8 :                     ; 		cmp/eq	#2,r0
(2)  665/ 60008F8 :                     ; 		bt	.wait
(2)  666/ 60008F8 :                     ; 		dt	r6
(2)  667/ 60008F8 :                     ; 		bf	.loop
(2)  668/ 60008F8 :                     ; 		rts
(2)  669/ 60008F8 :                     ; 		nop
(2)  670/ 60008F8 :                     ; 		align 4
(2)  671/ 60008F8 :                     
(2)  672/ 60008F8 :                     ; ------------------------------------
(2)  673/ 60008F8 :                     ; MarsVideo_FrameSwap
(2)  674/ 60008F8 :                     ; ------------------------------------
(2)  675/ 60008F8 :                     
(2)  676/ 60008F8 :                     ; MarsVideo_FrameSwap:
(2)  677/ 60008F8 :                     ; 		mov.l	#_vdpreg,r2
(2)  678/ 60008F8 :                     ; .wait_fb:
(2)  679/ 60008F8 :                     ; 		mov.w	@($A,r2),r0
(2)  680/ 60008F8 :                     ; 		tst	#2,r0
(2)  681/ 60008F8 :                     ; 		bf	.wait_fb
(2)  682/ 60008F8 :                     ; 		mov.w	@($A,r2),r0
(2)  683/ 60008F8 :                     ; 		xor	#1,r0
(2)  684/ 60008F8 :                     ; 		mov.w	r0,@($A,r2)
(2)  685/ 60008F8 :                     ; 		and	#1,r0
(2)  686/ 60008F8 :                     ; 		mov	r0,r1
(2)  687/ 60008F8 :                     ; .wait_result:
(2)  688/ 60008F8 :                     ; 		mov.w	@($A,r2),r0
(2)  689/ 60008F8 :                     ; 		and	#1,r0
(2)  690/ 60008F8 :                     ; 		cmp/eq	r0,r1
(2)  691/ 60008F8 :                     ; 		bf	.wait_result
(2)  692/ 60008F8 :                     ; 		rts
(2)  693/ 60008F8 :                     ; 		nop
(2)  694/ 60008F8 :                     ; 		align 4
(2)  695/ 60008F8 :                     
(2)  696/ 60008F8 :                     ; TODO: improve this
(2)  697/ 60008F8 :                     MarsVideo_DrawAllBg:
(2)  698/ 60008F8 : E4FE                		mov	#-2,r4
(2)  699/ 60008FA : C600                		mov	@(marsGbl_BgData,gbr),r0
(2)  700/ 60008FC : 6803                		mov	r0,r8
(2)  701/ 60008FE : 6903                		mov	r0,r9
(2)  702/ 6000900 : C518                		mov.w	@(marsGbl_BgHeight,gbr),r0
(2)  703/ 6000902 : 6103                		mov	r0,r1
(2)  704/ 6000904 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(2)  705/ 6000906 : 201E                		mulu	r1,r0
(2)  706/ 6000908 : 001A                		sts	macl,r0
(2)  707/ 600090A : 390C                		add	r0,r9
(2)  708/ 600090C :                     
(2)  709/ 600090C : C600                		mov	@(marsGbl_BgData,gbr),r0
(2)  710/ 600090E : 6103                		mov	r0,r1			; r1 - read
(2)  711/ 6000910 : 6203                		mov	r0,r2			; r2 - start
(2)  712/ 6000912 : 6303                		mov	r0,r3			; r3 - end
(2)  713/ 6000914 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(2)  714/ 6000916 : 330C                		add	r0,r3
(2)  715/ 6000918 : D515                		mov	#_framebuffer+$200,r5
(2)  716/ 600091A : 972D                		mov	#MSCRL_HEIGHT,r7
(2)  717/ 600091C :                     .y_next:
(2)  718/ 600091C : 6453                		mov	r5,r4
(2)  719/ 600091E : E654                		mov	#(MSCRL_WIDTH)/4,r6
(2)  720/ 6000920 :                     .x_next:
(2)  721/ 6000920 : 3133                		cmp/ge	r3,r1
(2)  722/ 6000922 : 8B00                		bf	.nolm
(2)  723/ 6000924 : 6123                		mov	r2,r1
(2)  724/ 6000926 :                     .nolm:
(2)  725/ 6000926 : 6016                		mov	@r1+,r0
(2)  726/ 6000928 : 2402                		mov	r0,@r4
(2)  727/ 600092A : 7404                		add	#4,r4
(2)  728/ 600092C : 4610                		dt	r6
(2)  729/ 600092E : 8BF7                		bf	.x_next
(2)  730/ 6000930 : 9023                		mov	#MSCRL_WIDTH,r0
(2)  731/ 6000932 : 350C                		add	r0,r5
(2)  732/ 6000934 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(2)  733/ 6000936 : 320C                		add	r0,r2
(2)  734/ 6000938 : 330C                		add	r0,r3
(2)  735/ 600093A : 3293                		cmp/ge	r9,r2
(2)  736/ 600093C : 8B02                		bf	.ylrge
(2)  737/ 600093E : 6283                		mov	r8,r2
(2)  738/ 6000940 : 6383                		mov	r8,r3
(2)  739/ 6000942 : 330C                		add	r0,r3
(2)  740/ 6000944 :                     .ylrge:
(2)  741/ 6000944 : 6123                		mov	r2,r1
(2)  742/ 6000946 : 4710                		dt	r7
(2)  743/ 6000948 : 8BE8                		bf	.y_next
(2)  744/ 600094A :                     
(2)  745/ 600094A :                     	; Copy-paste but for hidden line
(2)  746/ 600094A :                     	; (TODO: improve this)
(2)  747/ 600094A : C600                		mov	@(marsGbl_BgData,gbr),r0
(2)  748/ 600094C : 6103                		mov	r0,r1			; r1 - read
(2)  749/ 600094E : 6203                		mov	r0,r2			; r2 - start
(2)  750/ 6000950 : 6303                		mov	r0,r3			; r3 - end
(2)  751/ 6000952 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(2)  752/ 6000954 : 330C                		add	r0,r3
(2)  753/ 6000956 : D507                		mov	#(_framebuffer+$200)+(MSCRL_WIDTH*MSCRL_HEIGHT),r5
(2)  754/ 6000958 : 6453                		mov	r5,r4
(2)  755/ 600095A : E654                		mov	#(320+16)/4,r6
(2)  756/ 600095C :                     .x_next_l:
(2)  757/ 600095C : 3133                		cmp/ge	r3,r1
(2)  758/ 600095E : 8B00                		bf	.nolm_l
(2)  759/ 6000960 : 6123                		mov	r2,r1
(2)  760/ 6000962 :                     .nolm_l:
(2)  761/ 6000962 : 6016                		mov	@r1+,r0
(2)  762/ 6000964 : 2402                		mov	r0,@r4
(2)  763/ 6000966 : 7404                		add	#4,r4
(2)  764/ 6000968 : 4610                		dt	r6
(2)  765/ 600096A : 8BF7                		bf	.x_next_l
(2)  766/ 600096C :                     .stop:
(2)  767/ 600096C : 000B                		rts
(2)  768/ 600096E : 0009                		nop
(2)  769/ 6000970 :                     		align 4
(2)  770/ 6000970 : 2400 0200 2401 5200 		ltorg
                    0100 0150           
(2)  771/ 600097C :                     
(2)  772/ 600097C :                     ; ------------------------------------
(2)  773/ 600097C :                     ; MarsVdp_LoadPal
(2)  774/ 600097C :                     ;
(2)  775/ 600097C :                     ; Load palette to RAM
(2)  776/ 600097C :                     ; then the Palette will be transfered
(2)  777/ 600097C :                     ; on VBlank
(2)  778/ 600097C :                     ;
(2)  779/ 600097C :                     ; Input:
(2)  780/ 600097C :                     ; r1 - Palette data
(2)  781/ 600097C :                     ; r2 - Start index
(2)  782/ 600097C :                     ; r3 - Number of colors
(2)  783/ 600097C :                     ; r4 - OR value ($0000 or $8000)
(2)  784/ 600097C :                     ;
(2)  785/ 600097C :                     ; Uses:
(2)  786/ 600097C :                     ; r0,r4-r6
(2)  787/ 600097C :                     ; ------------------------------------
(2)  788/ 600097C :                     
(2)  789/ 600097C :                     MarsVideo_LoadPal:
(2)  790/ 600097C : C532                		mov.w	@(marsGbl_PalDmaMidWr,gbr),r0
(2)  791/ 600097E : 8801                		cmp/eq	#1,r0
(2)  792/ 6000980 : 89FC                		bt	MarsVideo_LoadPal
(2)  793/ 6000982 : 6513                		mov 	r1,r5
(2)  794/ 6000984 : D60A                		mov 	#RAM_Mars_Palette,r6
(2)  795/ 6000986 : 6023                		mov 	r2,r0
(2)  796/ 6000988 : 4000                		shll	r0
(2)  797/ 600098A : 360C                		add 	r0,r6
(2)  798/ 600098C : 6033                		mov 	r3,r0
(2)  799/ 600098E :                     ; 		and	#$FF,r0
(2)  800/ 600098E :                     ; 		cmp/pl	r0
(2)  801/ 600098E :                     ; 		bf	.badlen
(2)  802/ 600098E : 9713                		mov	#256,r7
(2)  803/ 6000990 : 3077                		cmp/gt	r7,r0
(2)  804/ 6000992 : 8900                		bt	.loop
(2)  805/ 6000994 : 6703                		mov	r0,r7
(2)  806/ 6000996 :                     .loop:
(2)  807/ 6000996 : 6055                		mov.w	@r5+,r0
(2)  808/ 6000998 : 204B                		or	r4,r0
(2)  809/ 600099A : 2601                		mov.w	r0,@r6
(2)  810/ 600099C : 4710                		dt	r7
(2)  811/ 600099E : 8FFA                		bf/s	.loop
(2)  812/ 60009A0 : 7602                		add 	#2,r6
(2)  813/ 60009A2 :                     .badlen:
(2)  814/ 60009A2 : D104                		mov	#RAM_Mars_Palette,r1	; lazy fix
(2)  815/ 60009A4 : 6011                		mov.w	@r1,r0			; for background
(2)  816/ 60009A6 : 9208                		mov	#$7FFF,r2
(2)  817/ 60009A8 : 2029                		and	r2,r0
(2)  818/ 60009AA : 2101                		mov.w	r0,@r1
(2)  819/ 60009AC : 000B                		rts
(2)  820/ 60009AE : 0009                		nop
(2)  821/ 60009B0 :                     		align 4
(2)  822/ 60009B0 : 0600 47CC 0600 47CC 		ltorg
                    0100 7FFF           
(2)  823/ 60009BC :                     
(2)  824/ 60009BC :                     ; ------------------------------------------------
(2)  825/ 60009BC :                     ; Sets SuperVDP's background settings
(2)  826/ 60009BC :                     ; ------------------------------------------------
(2)  827/ 60009BC :                     
(2)  828/ 60009BC :                     MarsVideo_SetBg:
(2)  829/ 60009BC : 6013                		mov	r1,r0
(2)  830/ 60009BE : C200                		mov	r0,@(marsGbl_BgData,gbr)
(2)  831/ 60009C0 : 6023                		mov	r2,r0
(2)  832/ 60009C2 : C117                		mov.w	r0,@(marsGbl_BgWidth,gbr)
(2)  833/ 60009C4 : 6033                		mov	r3,r0
(2)  834/ 60009C6 : C118                		mov.w	r0,@(marsGbl_BgHeight,gbr)
(2)  835/ 60009C8 :                     
(2)  836/ 60009C8 :                     	; Scroll setup values
(2)  837/ 60009C8 :                     	; TODO: very basic setup
(2)  838/ 60009C8 :                     	; needs extra checks for drawing from
(2)  839/ 60009C8 :                     	; specific X/Y point
(2)  840/ 60009C8 : E000                		mov	#0,r0
(2)  841/ 60009CA : C120                		mov.w	r0,@(marsGbl_Bg_XbgInc_L,gbr)
(2)  842/ 60009CC : C10C                		mov.w	r0,@(marsGbl_Bg_FbBase,gbr)
(2)  843/ 60009CE : 9009                		mov	#MSCRL_WIDTH-MSCRL_BLKSIZE,r0
(2)  844/ 60009D0 : C121                		mov.w	r0,@(marsGbl_Bg_XbgInc_R,gbr)
(2)  845/ 60009D2 : E000                		mov	#0,r0
(2)  846/ 60009D4 : C11D                		mov.w	r0,@(marsGbl_Bg_YFbPos_U,gbr)
(2)  847/ 60009D6 : C11D                		mov.w	r0,@(marsGbl_Bg_YFbPos_U,gbr)
(2)  848/ 60009D8 : 9005                		mov	#MSCRL_HEIGHT-MSCRL_BLKSIZE,r0
(2)  849/ 60009DA : C122                		mov.w	r0,@(marsGbl_Bg_YbgInc_D,gbr)
(2)  850/ 60009DC : C11E                		mov.w	r0,@(marsGbl_Bg_YFbPos_D,gbr)
(2)  851/ 60009DE : 000B                		rts
(2)  852/ 60009E0 : 0009                		nop
(2)  853/ 60009E2 :                     		align 4
(2)  854/ 60009E4 : 0140 00F0           		ltorg
(2)  855/ 60009E8 :                     
(2)  856/ 60009E8 :                     ; ------------------------------------------------
(2)  857/ 60009E8 :                     ; MarsVideo_SetWatchdog
(2)  858/ 60009E8 :                     ;
(2)  859/ 60009E8 :                     ; Initialize watchdog interrupt with
(2)  860/ 60009E8 :                     ; default settings
(2)  861/ 60009E8 :                     ; ------------------------------------------------
(2)  862/ 60009E8 :                     
(2)  863/ 60009E8 :                     MarsVideo_SetWatchdog:
(2)  864/ 60009E8 : 4F03                		stc	sr,@-r15			; Save interrupts
(2)  865/ 60009EA : 9041                		mov	#$F0,r0
(2)  866/ 60009EC : 400E                		ldc	r0,sr
(2)  867/ 60009EE :                     
(2)  868/ 60009EE :                     	; Polygon start-values
(2)  869/ 60009EE : D018                		mov	#RAM_Mars_VdpDrwList,r0		; Reset the piece-drawing pointer
(2)  870/ 60009F0 : C202                		mov	r0,@(marsGbl_PlyPzList_R,gbr)	; on both READ and WRITE pointers
(2)  871/ 60009F2 : C203                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  872/ 60009F4 : E000                		mov	#0,r0				; Reset polygon pieces counter
(2)  873/ 60009F6 : C12D                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  874/ 60009F8 :                     
(2)  875/ 60009F8 :                     	; Vars that require reset
(2)  876/ 60009F8 : 923B                		mov	#MSCRL_HEIGHT,r2
(2)  877/ 60009FA : C52C                		mov.w	@(marsGbl_CurrGfxMode,gbr),r0
(2)  878/ 60009FC : C97F                		and	#$7F,r0
(2)  879/ 60009FE : 8801                		cmp/eq	#1,r0
(2)  880/ 6000A00 : 8900                		bt	.mde1
(2)  881/ 6000A02 : 9237                		mov	#224,r2
(2)  882/ 6000A04 :                     .mde1:
(2)  883/ 6000A04 : D113                		mov	#Cach_LR_Lines,r1		; L/R lines to process
(2)  884/ 6000A06 : 2122                		mov	r2,@r1
(2)  885/ 6000A08 :                     
(2)  886/ 6000A08 :                     	; Mode2
(2)  887/ 6000A08 : D013                		mov	#_framebuffer+$200,r0
(2)  888/ 6000A0A : C207                		mov	r0,@(marsGbl_Bg_FbCurrR,gbr)
(2)  889/ 6000A0C : D113                		mov	#Cach_Xadd,r1
(2)  890/ 6000A0E : D214                		mov	#Cach_Yadd,r2
(2)  891/ 6000A10 : C519                		mov.w	@(marsGbl_Bg_Xscale,gbr),r0
(2)  892/ 6000A12 : 4018                		shll8	r0
(2)  893/ 6000A14 : 2102                		mov	r0,@r1
(2)  894/ 6000A16 : C51A                		mov.w	@(marsGbl_Bg_Yscale,gbr),r0
(2)  895/ 6000A18 : 4018                		shll8	r0
(2)  896/ 6000A1A : 2202                		mov	r0,@r2
(2)  897/ 6000A1C : C520                		mov.w	@(marsGbl_Bg_XbgInc_L,gbr),r0
(2)  898/ 6000A1E : D111                		mov	#Cach_Xpos,r1
(2)  899/ 6000A20 : 2102                		mov	r0,@r1
(2)  900/ 6000A22 : C523                		mov.w	@(marsGbl_Bg_YbgInc_U,gbr),r0
(2)  901/ 6000A24 : 4028                		shll16	r0
(2)  902/ 6000A26 : D110                		mov	#Cach_Ycurr,r1
(2)  903/ 6000A28 : 2102                		mov	r0,@r1
(2)  904/ 6000A2A :                     
(2)  905/ 6000A2A :                     	; X draw settings
(2)  906/ 6000A2A : C600                		mov	@(marsGbl_BgData,gbr),r0
(2)  907/ 6000A2C : C201                		mov	r0,@(marsGbl_BgData_R,gbr)
(2)  908/ 6000A2E :                     
(2)  909/ 6000A2E :                     
(2)  910/ 6000A2E :                     
(2)  911/ 6000A2E :                     	; Y draw settings
(2)  912/ 6000A2E : E001                		mov	#1,r0				; Set first task $01
(2)  913/ 6000A30 : C134                		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)  914/ 6000A32 : 4F07                		ldc	@r15+,sr			; Restore interrupts
(2)  915/ 6000A34 : 911F                		mov	#$FFFFFE80,r1
(2)  916/ 6000A36 : 901F                		mov.w	#$5A20,r0			; Watchdog timer
(2)  917/ 6000A38 : 2101                		mov.w	r0,@r1
(2)  918/ 6000A3A : 901E                		mov.w	#$A538,r0			; Enable this watchdog
(2)  919/ 6000A3C : 2101                		mov.w	r0,@r1
(2)  920/ 6000A3E : D10B                		mov	#_vdpreg,r1
(2)  921/ 6000A40 : 8515                .wait_fb:	mov.w	@($A,r1),r0			; Wait until framebuffer is unlocked
(2)  922/ 6000A42 : C802                		tst	#2,r0
(2)  923/ 6000A44 : 8BFC                		bf	.wait_fb
(2)  924/ 6000A46 : 9019                		mov.w	#$A1,r0				; ClearOnly: Pre-start at $A1
(2)  925/ 6000A48 :                     ; 		mov.w	#$100,r0			; BG: Pre-start at $100
(2)  926/ 6000A48 : 8113                		mov.w	r0,@(6,r1)			;
(2)  927/ 6000A4A :                     
(2)  928/ 6000A4A : 000B                		rts
(2)  929/ 6000A4C : 0009                		nop
(2)  930/ 6000A4E :                     		align 4
(2)  931/ 6000A50 : 0600 7414 C000 03C0 		ltorg
                    2400 0200 C000 0398 
                    C000 039C C000 0394 
                    C000 03A0 2000 4100 
                    00F0 0100 00E0 FE80 
                    5A20 A538 00A1      
(2)  932/ 6000A7E :                     
(2)  933/ 6000A7E :                     ; ====================================================================
(2)  934/ 6000A7E :                     ; ----------------------------------------------------------------
(2)  935/ 6000A7E :                     ; 3D MODELS SYSTEM
(2)  936/ 6000A7E :                     ; ----------------------------------------------------------------
(2)  937/ 6000A7E :                     
(2)  938/ 6000A7E :                     ; ; ------------------------------------------------
(2)  939/ 6000A7E :                     ; ; Object layout routines
(2)  940/ 6000A7E :                     ; ; ------------------------------------------------
(2)  941/ 6000A7E :                     ;
(2)  942/ 6000A7E :                     ; ; ----------------------------------------
(2)  943/ 6000A7E :                     ; ; Read layout
(2)  944/ 6000A7E :                     ; ; ----------------------------------------
(2)  945/ 6000A7E :                     ;
(2)  946/ 6000A7E :                     ; MarsLay_Read:
(2)  947/ 6000A7E :                     ; 		sts	pr,@-r15
(2)  948/ 6000A7E :                     ; 		mov	#RAM_Mars_ObjLayout,r14
(2)  949/ 6000A7E :                     ; 		mov	#RAM_Mars_ObjCamera,r13
(2)  950/ 6000A7E :                     ; 		mov	#RAM_Mars_Objects,r12
(2)  951/ 6000A7E :                     ; 		mov	@(mdllay_data,r14),r0
(2)  952/ 6000A7E :                     ; 		cmp/pl	r0
(2)  953/ 6000A7E :                     ; 		bf	.no_lay
(2)  954/ 6000A7E :                     ; 		mov	r0,r11
(2)  955/ 6000A7E :                     ;
(2)  956/ 6000A7E :                     ; 		mov	#0,r10				; r10 - Update counter
(2)  957/ 6000A7E :                     ; 		mov	#-$100000,r9			;  r9 - MAX Z block size
(2)  958/ 6000A7E :                     ; 		mov	#-$100000,r8			;  r8 - MAX Y block size
(2)  959/ 6000A7E :                     ; 		mov	#-$100000,r7			;  r7 - MAX X block size
(2)  960/ 6000A7E :                     ; 		mov	#-$8000,r6			;  r6 - X Rotation update point
(2)  961/ 6000A7E :                     ;
(2)  962/ 6000A7E :                     ; 		mov	@(mdllay_z_last,r14),r5
(2)  963/ 6000A7E :                     ; 		mov	@(cam_z_pos,r13),r0
(2)  964/ 6000A7E :                     ; 		and	r9,r0
(2)  965/ 6000A7E :                     ; 		and	r9,r5
(2)  966/ 6000A7E :                     ; 		cmp/eq	r0,r5
(2)  967/ 6000A7E :                     ; 		bt	.no_z_upd
(2)  968/ 6000A7E :                     ; ; 		add	r9,r5
(2)  969/ 6000A7E :                     ; ; 		neg	r5,r4
(2)  970/ 6000A7E :                     ; ; 		cmp/gt	r5,r0
(2)  971/ 6000A7E :                     ; ; 		bf	.set_z_upd
(2)  972/ 6000A7E :                     ; ; 		cmp/ge	r4,r0
(2)  973/ 6000A7E :                     ; ; 		bf	.no_z_upd
(2)  974/ 6000A7E :                     ; ; .set_z_upd:
(2)  975/ 6000A7E :                     ; 		and	r9,r0
(2)  976/ 6000A7E :                     ; 		mov	r0,@(mdllay_z_last,r14)
(2)  977/ 6000A7E :                     ; 		add	#1,r10
(2)  978/ 6000A7E :                     ; .no_z_upd:
(2)  979/ 6000A7E :                     ;
(2)  980/ 6000A7E :                     ; 		mov	@(mdllay_y_last,r14),r5
(2)  981/ 6000A7E :                     ; 		mov	@(cam_y_pos,r13),r0
(2)  982/ 6000A7E :                     ; 		and	r8,r0
(2)  983/ 6000A7E :                     ; 		and	r8,r5
(2)  984/ 6000A7E :                     ; 		cmp/eq	r0,r5
(2)  985/ 6000A7E :                     ; 		bt	.no_y_upd
(2)  986/ 6000A7E :                     ; ; 		add	r8,r5
(2)  987/ 6000A7E :                     ; ; 		neg	r5,r4
(2)  988/ 6000A7E :                     ; ; 		cmp/gt	r5,r0
(2)  989/ 6000A7E :                     ; ; 		bf	.set_y_upd
(2)  990/ 6000A7E :                     ; ; 		cmp/ge	r4,r0
(2)  991/ 6000A7E :                     ; ; 		bf	.no_y_upd
(2)  992/ 6000A7E :                     ; ; .set_y_upd:
(2)  993/ 6000A7E :                     ; 		and	r8,r0
(2)  994/ 6000A7E :                     ; 		mov	r0,@(mdllay_y_last,r14)
(2)  995/ 6000A7E :                     ; 		add	#1,r10
(2)  996/ 6000A7E :                     ; .no_y_upd:
(2)  997/ 6000A7E :                     ;
(2)  998/ 6000A7E :                     ; 		mov	@(mdllay_x_last,r14),r5
(2)  999/ 6000A7E :                     ; 		mov	@(cam_x_pos,r13),r0
(2) 1000/ 6000A7E :                     ; 		and	r7,r0
(2) 1001/ 6000A7E :                     ; 		and	r7,r5
(2) 1002/ 6000A7E :                     ; 		cmp/eq	r0,r5
(2) 1003/ 6000A7E :                     ; 		bt	.no_x_upd
(2) 1004/ 6000A7E :                     ; ; 		add	r7,r5
(2) 1005/ 6000A7E :                     ; ; 		neg	r5,r4
(2) 1006/ 6000A7E :                     ; ; 		cmp/gt	r5,r0
(2) 1007/ 6000A7E :                     ; ; 		bf	.set_x_upd
(2) 1008/ 6000A7E :                     ; ; 		cmp/ge	r4,r0
(2) 1009/ 6000A7E :                     ; ; 		bf	.no_x_upd
(2) 1010/ 6000A7E :                     ; ; .set_x_upd:
(2) 1011/ 6000A7E :                     ; 		and	r7,r0
(2) 1012/ 6000A7E :                     ; 		mov	r0,@(mdllay_x_last,r14)
(2) 1013/ 6000A7E :                     ; 		add	#1,r10
(2) 1014/ 6000A7E :                     ; .no_x_upd:
(2) 1015/ 6000A7E :                     ;
(2) 1016/ 6000A7E :                     ; 		mov	@(mdllay_xr_last,r14),r5
(2) 1017/ 6000A7E :                     ; 		mov	@(cam_x_rot,r13),r0
(2) 1018/ 6000A7E :                     ; 		and	r6,r0
(2) 1019/ 6000A7E :                     ; 		and	r6,r5
(2) 1020/ 6000A7E :                     ; 		cmp/eq	r0,r5
(2) 1021/ 6000A7E :                     ; 		bt	.no_xr_upd
(2) 1022/ 6000A7E :                     ; ; 		add	r6,r5
(2) 1023/ 6000A7E :                     ; ; 		neg	r5,r4
(2) 1024/ 6000A7E :                     ; ; 		cmp/gt	r5,r0
(2) 1025/ 6000A7E :                     ; ; 		bf	.set_xr_upd
(2) 1026/ 6000A7E :                     ; ; 		cmp/ge	r4,r0
(2) 1027/ 6000A7E :                     ; ; 		bf	.no_xr_upd
(2) 1028/ 6000A7E :                     ; ; .set_xr_upd:
(2) 1029/ 6000A7E :                     ; 		and	r6,r0
(2) 1030/ 6000A7E :                     ; 		mov	r0,@(mdllay_xr_last,r14)
(2) 1031/ 6000A7E :                     ; 		add	#1,r10
(2) 1032/ 6000A7E :                     ; .no_xr_upd:
(2) 1033/ 6000A7E :                     ;
(2) 1034/ 6000A7E :                     ; 		cmp/pl	r10
(2) 1035/ 6000A7E :                     ; 		bf	.no_lay
(2) 1036/ 6000A7E :                     ; 		bsr	MarsLay_Draw
(2) 1037/ 6000A7E :                     ; 		nop
(2) 1038/ 6000A7E :                     ; .no_lay:
(2) 1039/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1040/ 6000A7E :                     ; 		rts
(2) 1041/ 6000A7E :                     ; 		nop
(2) 1042/ 6000A7E :                     ; 		align 4
(2) 1043/ 6000A7E :                     ; 		ltorg
(2) 1044/ 6000A7E :                     ;
(2) 1045/ 6000A7E :                     ; ; r1 - layout data pointer
(2) 1046/ 6000A7E :                     ; MarsLay_Make:
(2) 1047/ 6000A7E :                     ; 		mov	#RAM_Mars_ObjLayout,r14
(2) 1048/ 6000A7E :                     ; 		mov	#RAM_Mars_ObjCamera,r13
(2) 1049/ 6000A7E :                     ; 		xor	r0,r0
(2) 1050/ 6000A7E :                     ; 		mov	r1,@(mdllay_data,r14)
(2) 1051/ 6000A7E :                     ; 		mov	r0,@(mdllay_x_last,r14)
(2) 1052/ 6000A7E :                     ; 		mov	r0,@(mdllay_y_last,r14)
(2) 1053/ 6000A7E :                     ; 		mov	r0,@(mdllay_z_last,r14)
(2) 1054/ 6000A7E :                     ; 		mov	r0,@(mdllay_x,r14)
(2) 1055/ 6000A7E :                     ; 		mov	r0,@(mdllay_y,r14)
(2) 1056/ 6000A7E :                     ; 		mov	r0,@(mdllay_z,r14)
(2) 1057/ 6000A7E :                     ; 		rts
(2) 1058/ 6000A7E :                     ; 		nop
(2) 1059/ 6000A7E :                     ; 		align 4
(2) 1060/ 6000A7E :                     ;
(2) 1061/ 6000A7E :                     ; MarsLay_Draw:
(2) 1062/ 6000A7E :                     ; 		mov	#RAM_Mars_Objects,r10
(2) 1063/ 6000A7E :                     ; 		mov	r10,r2
(2) 1064/ 6000A7E :                     ; 		mov	#sizeof_mdlobj,r3
(2) 1065/ 6000A7E :                     ; 		mov	#0,r0
(2) 1066/ 6000A7E :                     ; 		mov	#9,r4
(2) 1067/ 6000A7E :                     ; .clrold:
(2) 1068/ 6000A7E :                     ; 		mov	r0,@(mdl_data,r2)
(2) 1069/ 6000A7E :                     ; 		mov	r0,@(mdl_x_pos,r2)
(2) 1070/ 6000A7E :                     ; 		mov	r0,@(mdl_y_pos,r2)
(2) 1071/ 6000A7E :                     ; 		mov	r0,@(mdl_z_pos,r2)
(2) 1072/ 6000A7E :                     ; 		mov	r0,@(mdl_x_rot,r2)
(2) 1073/ 6000A7E :                     ; 		mov	r0,@(mdl_y_rot,r2)
(2) 1074/ 6000A7E :                     ; 		mov	r0,@(mdl_z_rot,r2)
(2) 1075/ 6000A7E :                     ; 		dt	r4
(2) 1076/ 6000A7E :                     ; 		bf/s	.clrold
(2) 1077/ 6000A7E :                     ; 		add	r3,r2
(2) 1078/ 6000A7E :                     ;
(2) 1079/ 6000A7E :                     ; 	; r13 - Layout Ids
(2) 1080/ 6000A7E :                     ; 	; r12 - Layout model list
(2) 1081/ 6000A7E :                     ; 		mov	#0,r4
(2) 1082/ 6000A7E :                     ; 		mov	@(mdllay_data,r14),r13
(2) 1083/ 6000A7E :                     ; 		mov	@r13+,r12
(2) 1084/ 6000A7E :                     ; 		mov	.center_val,r0			; list center point
(2) 1085/ 6000A7E :                     ; 		add	r0,r13
(2) 1086/ 6000A7E :                     ;
(2) 1087/ 6000A7E :                     ; 	; X/Y add
(2) 1088/ 6000A7E :                     ; 		mov	@(mdllay_x_last,r14),r1
(2) 1089/ 6000A7E :                     ; 		mov	@(mdllay_z_last,r14),r2
(2) 1090/ 6000A7E :                     ; 		mov	#LAY_WIDTH,r0
(2) 1091/ 6000A7E :                     ; 		shlr16	r1
(2) 1092/ 6000A7E :                     ; 		shlr16	r2
(2) 1093/ 6000A7E :                     ; 		exts	r1,r1
(2) 1094/ 6000A7E :                     ; 		exts	r2,r2
(2) 1095/ 6000A7E :                     ; 	rept 3
(2) 1096/ 6000A7E :                     ; 		shar	r1
(2) 1097/ 6000A7E :                     ; 		shar	r2
(2) 1098/ 6000A7E :                     ; 	endm
(2) 1099/ 6000A7E :                     ; 		shar	r2			; extra shift
(2) 1100/ 6000A7E :                     ; 		muls	r0,r2
(2) 1101/ 6000A7E :                     ; 		sts	macl,r0
(2) 1102/ 6000A7E :                     ; 		add	r1,r13			; X add
(2) 1103/ 6000A7E :                     ; 		sub	r0,r13			; Y add
(2) 1104/ 6000A7E :                     ;
(2) 1105/ 6000A7E :                     ; 	; Rotation
(2) 1106/ 6000A7E :                     ; 		mov	@(mdllay_xr_last,r14),r0
(2) 1107/ 6000A7E :                     ; 		shlr16	r0
(2) 1108/ 6000A7E :                     ; 		and	#$3F,r0
(2) 1109/ 6000A7E :                     ; 		shll2	r0
(2) 1110/ 6000A7E :                     ; 		mov	#.list,r1
(2) 1111/ 6000A7E :                     ; 		mov	@(r0,r1),r0
(2) 1112/ 6000A7E :                     ; 		jmp	@r0
(2) 1113/ 6000A7E :                     ; 		nop
(2) 1114/ 6000A7E :                     ; 		align 4
(2) 1115/ 6000A7E :                     ; .center_val:	dc.l ($E*LAY_WIDTH)+($C*2)
(2) 1116/ 6000A7E :                     ;
(2) 1117/ 6000A7E :                     ; .list:
(2) 1118/ 6000A7E :                     ; 		dc.l .front
(2) 1119/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1120/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1121/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1122/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1123/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1124/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1125/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1126/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1127/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1128/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1129/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1130/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1131/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1132/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1133/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1134/ 6000A7E :                     ;
(2) 1135/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1136/ 6000A7E :                     ; 		dc.l .front_fr
(2) 1137/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1138/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1139/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1140/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1141/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1142/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1143/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1144/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1145/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1146/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1147/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1148/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1149/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1150/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1151/ 6000A7E :                     ;
(2) 1152/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1153/ 6000A7E :                     ; 		dc.l .right_dw
(2) 1154/ 6000A7E :                     ; 		dc.l .down_left
(2) 1155/ 6000A7E :                     ; 		dc.l .down_left
(2) 1156/ 6000A7E :                     ; 		dc.l .down_left
(2) 1157/ 6000A7E :                     ; 		dc.l .down_left
(2) 1158/ 6000A7E :                     ; 		dc.l .down_left
(2) 1159/ 6000A7E :                     ; 		dc.l .down_left
(2) 1160/ 6000A7E :                     ; 		dc.l .down_left
(2) 1161/ 6000A7E :                     ; 		dc.l .down_left
(2) 1162/ 6000A7E :                     ; 		dc.l .down_left
(2) 1163/ 6000A7E :                     ; 		dc.l .down_left
(2) 1164/ 6000A7E :                     ; 		dc.l .down_left
(2) 1165/ 6000A7E :                     ; 		dc.l .down_left
(2) 1166/ 6000A7E :                     ; 		dc.l .down_left
(2) 1167/ 6000A7E :                     ; 		dc.l .down_left
(2) 1168/ 6000A7E :                     ;
(2) 1169/ 6000A7E :                     ; 		dc.l .down_left
(2) 1170/ 6000A7E :                     ; 		dc.l .down_left
(2) 1171/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1172/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1173/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1174/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1175/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1176/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1177/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1178/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1179/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1180/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1181/ 6000A7E :                     ; 		dc.l .front_lf
(2) 1182/ 6000A7E :                     ; 		dc.l .front
(2) 1183/ 6000A7E :                     ; 		dc.l .front
(2) 1184/ 6000A7E :                     ; 		dc.l .front
(2) 1185/ 6000A7E :                     ;
(2) 1186/ 6000A7E :                     ; ; r5 - numof pieces
(2) 1187/ 6000A7E :                     ; ; uses: r6,r7
(2) 1188/ 6000A7E :                     ; .do_piece:
(2) 1189/ 6000A7E :                     ; 		mov	r1,@-r15
(2) 1190/ 6000A7E :                     ; 		mov	r13,@-r15
(2) 1191/ 6000A7E :                     ; 		mov	#$100000,r6
(2) 1192/ 6000A7E :                     ; .nxt_one:
(2) 1193/ 6000A7E :                     ; 		xor	r4,r4
(2) 1194/ 6000A7E :                     ; 		mov.w	@r13+,r0
(2) 1195/ 6000A7E :                     ; 		cmp/pl 	r0
(2) 1196/ 6000A7E :                     ; 		bf	.blank_mdl
(2) 1197/ 6000A7E :                     ; ; 		mov	r0,r7
(2) 1198/ 6000A7E :                     ; ; 		shlr8	r0
(2) 1199/ 6000A7E :                     ; ; 		shlr2	r0
(2) 1200/ 6000A7E :                     ; ; 		shlr	r0
(2) 1201/ 6000A7E :                     ; ; 		and	#%11100,r0
(2) 1202/ 6000A7E :                     ; ; 		mov	#.xrotlist,r8
(2) 1203/ 6000A7E :                     ; ; 		mov	@(r8,r0),r8
(2) 1204/ 6000A7E :                     ; ; 		mov	r7,r0
(2) 1205/ 6000A7E :                     ; 		add	#-1,r0
(2) 1206/ 6000A7E :                     ; 		shll2	r0
(2) 1207/ 6000A7E :                     ; ; 		shll	r0
(2) 1208/ 6000A7E :                     ; ; 		mov	#$1FFF,r7
(2) 1209/ 6000A7E :                     ; ; 		and	r7,r0
(2) 1210/ 6000A7E :                     ; 		mov	@(r12,r0),r4
(2) 1211/ 6000A7E :                     ; 		mov	#$40000000,r0	; OR val: set special object mode
(2) 1212/ 6000A7E :                     ; 		or	r0,r4
(2) 1213/ 6000A7E :                     ; .blank_mdl:
(2) 1214/ 6000A7E :                     ; 		mov	r1,@(mdl_x_pos,r10)
(2) 1215/ 6000A7E :                     ; 		mov	r2,@(mdl_y_pos,r10)
(2) 1216/ 6000A7E :                     ; 		mov	r3,@(mdl_z_pos,r10)
(2) 1217/ 6000A7E :                     ; ; 		mov	r8,@(mdl_x_rot,r10)
(2) 1218/ 6000A7E :                     ; 		mov	r4,@(mdl_data,r10)
(2) 1219/ 6000A7E :                     ; 		add	#sizeof_mdlobj,r10
(2) 1220/ 6000A7E :                     ; 		dt	r5
(2) 1221/ 6000A7E :                     ; 		bf/s	.nxt_one
(2) 1222/ 6000A7E :                     ; 		add	r6,r1
(2) 1223/ 6000A7E :                     ; 		mov	@r15+,r13
(2) 1224/ 6000A7E :                     ; 		mov	@r15+,r1
(2) 1225/ 6000A7E :                     ; 		rts
(2) 1226/ 6000A7E :                     ; 		nop
(2) 1227/ 6000A7E :                     ; 		align 4
(2) 1228/ 6000A7E :                     ; ; .xrotlist:	dc.l 0
(2) 1229/ 6000A7E :                     ; ; 		dc.l $100000
(2) 1230/ 6000A7E :                     ; ; 		dc.l $200000
(2) 1231/ 6000A7E :                     ; ; 		dc.l $300000
(2) 1232/ 6000A7E :                     ;
(2) 1233/ 6000A7E :                     ; ; o X X X o
(2) 1234/ 6000A7E :                     ; ; o X X X o
(2) 1235/ 6000A7E :                     ; ; o X C X o
(2) 1236/ 6000A7E :                     ; ; o - - - o
(2) 1237/ 6000A7E :                     ; ; o o o o o
(2) 1238/ 6000A7E :                     ; .front:
(2) 1239/ 6000A7E :                     ; 		mov	#-$100000,r1
(2) 1240/ 6000A7E :                     ; 		mov	#0,r2
(2) 1241/ 6000A7E :                     ; 		mov	#-$200000,r3
(2) 1242/ 6000A7E :                     ; 		add	#(1*2),r13
(2) 1243/ 6000A7E :                     ; 		mov	#$100000,r11
(2) 1244/ 6000A7E :                     ;
(2) 1245/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1246/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1247/ 6000A7E :                     ; 		mov	#3,r5
(2) 1248/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1249/ 6000A7E :                     ; 		add	r11,r3
(2) 1250/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1251/ 6000A7E :                     ; 		mov	#3,r5
(2) 1252/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1253/ 6000A7E :                     ; 		add	r11,r3
(2) 1254/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1255/ 6000A7E :                     ; 		mov	#3,r5
(2) 1256/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1257/ 6000A7E :                     ; 		rts
(2) 1258/ 6000A7E :                     ; 		nop
(2) 1259/ 6000A7E :                     ; 		align 4
(2) 1260/ 6000A7E :                     ;
(2) 1261/ 6000A7E :                     ; ; front right view
(2) 1262/ 6000A7E :                     ; ; o o X X X
(2) 1263/ 6000A7E :                     ; ; o - X X X
(2) 1264/ 6000A7E :                     ; ; o - C X X
(2) 1265/ 6000A7E :                     ; ; o - - - o
(2) 1266/ 6000A7E :                     ; ; o o o o o
(2) 1267/ 6000A7E :                     ; .front_fr:
(2) 1268/ 6000A7E :                     ; 		mov	#0,r1
(2) 1269/ 6000A7E :                     ; 		mov	#0,r2
(2) 1270/ 6000A7E :                     ; 		mov	#-$200000,r3
(2) 1271/ 6000A7E :                     ; 		add	#(2*2),r13
(2) 1272/ 6000A7E :                     ; 		mov	#$100000,r11
(2) 1273/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1274/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1275/ 6000A7E :                     ; 		mov	#3,r5
(2) 1276/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1277/ 6000A7E :                     ; 		add	r11,r3
(2) 1278/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1279/ 6000A7E :                     ; 		mov	#3,r5
(2) 1280/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1281/ 6000A7E :                     ; 		add	r11,r3
(2) 1282/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1283/ 6000A7E :                     ; 		mov	#3,r5
(2) 1284/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1285/ 6000A7E :                     ; 		rts
(2) 1286/ 6000A7E :                     ; 		nop
(2) 1287/ 6000A7E :                     ; 		align 4
(2) 1288/ 6000A7E :                     ;
(2) 1289/ 6000A7E :                     ;
(2) 1290/ 6000A7E :                     ; ; right view/down
(2) 1291/ 6000A7E :                     ; ; o o o o o
(2) 1292/ 6000A7E :                     ; ; o - - - o
(2) 1293/ 6000A7E :                     ; ; o - C X X
(2) 1294/ 6000A7E :                     ; ; o - X X X
(2) 1295/ 6000A7E :                     ; ; o o X X X
(2) 1296/ 6000A7E :                     ; .right_dw:
(2) 1297/ 6000A7E :                     ; 		mov	#0,r1
(2) 1298/ 6000A7E :                     ; 		mov	#0,r2
(2) 1299/ 6000A7E :                     ; 		mov	#-$100000,r3
(2) 1300/ 6000A7E :                     ; 		mov	#(2*2)+(LAY_WIDTH),r0
(2) 1301/ 6000A7E :                     ; 		add	r0,r13
(2) 1302/ 6000A7E :                     ; 		mov	#$100000,r11
(2) 1303/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1304/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1305/ 6000A7E :                     ; 		mov	#3,r5
(2) 1306/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1307/ 6000A7E :                     ; 		add	r11,r3
(2) 1308/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1309/ 6000A7E :                     ; 		mov	#3,r5
(2) 1310/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1311/ 6000A7E :                     ; 		add	r11,r3
(2) 1312/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1313/ 6000A7E :                     ; 		mov	#3,r5
(2) 1314/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1315/ 6000A7E :                     ; 		rts
(2) 1316/ 6000A7E :                     ; 		nop
(2) 1317/ 6000A7E :                     ; 		align 4
(2) 1318/ 6000A7E :                     ;
(2) 1319/ 6000A7E :                     ; ; o o o o o
(2) 1320/ 6000A7E :                     ; ; o - - - o
(2) 1321/ 6000A7E :                     ; ; o X C X o
(2) 1322/ 6000A7E :                     ; ; o X X X o
(2) 1323/ 6000A7E :                     ; ; o X X X o
(2) 1324/ 6000A7E :                     ; .down:
(2) 1325/ 6000A7E :                     ; 		mov	#0,r1
(2) 1326/ 6000A7E :                     ; 		mov	#0,r2
(2) 1327/ 6000A7E :                     ; 		mov	#-$100000,r3
(2) 1328/ 6000A7E :                     ; 		mov	#(2*2)+(LAY_WIDTH*1),r0
(2) 1329/ 6000A7E :                     ; 		add	r0,r13
(2) 1330/ 6000A7E :                     ; 		mov	#$100000,r11
(2) 1331/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1332/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1333/ 6000A7E :                     ; 		mov	#3,r5
(2) 1334/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1335/ 6000A7E :                     ; 		add	r11,r3
(2) 1336/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1337/ 6000A7E :                     ; 		mov	#3,r5
(2) 1338/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1339/ 6000A7E :                     ; 		add	r11,r3
(2) 1340/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1341/ 6000A7E :                     ; 		mov	#3,r5
(2) 1342/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1343/ 6000A7E :                     ; 		rts
(2) 1344/ 6000A7E :                     ; 		nop
(2) 1345/ 6000A7E :                     ; 		align 4
(2) 1346/ 6000A7E :                     ;
(2) 1347/ 6000A7E :                     ; ; o o o o o
(2) 1348/ 6000A7E :                     ; ; o - - - o
(2) 1349/ 6000A7E :                     ; ; X X C - o
(2) 1350/ 6000A7E :                     ; ; X X X - o
(2) 1351/ 6000A7E :                     ; ; X X X o o
(2) 1352/ 6000A7E :                     ; .down_left:
(2) 1353/ 6000A7E :                     ; 		mov	#-$100000,r1
(2) 1354/ 6000A7E :                     ; 		mov	#0,r2
(2) 1355/ 6000A7E :                     ; 		mov	#-$100000,r3
(2) 1356/ 6000A7E :                     ; 		mov	#(1*2)+(LAY_WIDTH*1),r0
(2) 1357/ 6000A7E :                     ; 		add	r0,r13
(2) 1358/ 6000A7E :                     ; 		mov	#$100000,r11
(2) 1359/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1360/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1361/ 6000A7E :                     ; 		mov	#3,r5
(2) 1362/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1363/ 6000A7E :                     ; 		add	r11,r3
(2) 1364/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1365/ 6000A7E :                     ; 		mov	#3,r5
(2) 1366/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1367/ 6000A7E :                     ; 		add	r11,r3
(2) 1368/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1369/ 6000A7E :                     ; 		mov	#3,r5
(2) 1370/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1371/ 6000A7E :                     ; 		rts
(2) 1372/ 6000A7E :                     ; 		nop
(2) 1373/ 6000A7E :                     ; 		align 4
(2) 1374/ 6000A7E :                     ;
(2) 1375/ 6000A7E :                     ;
(2) 1376/ 6000A7E :                     ; ; X X X o o
(2) 1377/ 6000A7E :                     ; ; X X X - o
(2) 1378/ 6000A7E :                     ; ; X X C - o
(2) 1379/ 6000A7E :                     ; ; o - - - o
(2) 1380/ 6000A7E :                     ; ; o o o o o
(2) 1381/ 6000A7E :                     ; .front_lf:
(2) 1382/ 6000A7E :                     ; 		mov	#-$100000,r1
(2) 1383/ 6000A7E :                     ; 		mov	#0,r2
(2) 1384/ 6000A7E :                     ; 		mov	#-$200000,r3
(2) 1385/ 6000A7E :                     ; 		add	#(1*2),r13
(2) 1386/ 6000A7E :                     ; 		mov	#$100000,r11
(2) 1387/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1388/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1389/ 6000A7E :                     ; 		mov	#3,r5
(2) 1390/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1391/ 6000A7E :                     ; 		add	r11,r3
(2) 1392/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1393/ 6000A7E :                     ; 		mov	#3,r5
(2) 1394/ 6000A7E :                     ; 		add	#LAY_WIDTH,r13
(2) 1395/ 6000A7E :                     ; 		add	r11,r3
(2) 1396/ 6000A7E :                     ; 		bsr	.do_piece
(2) 1397/ 6000A7E :                     ; 		mov	#3,r5
(2) 1398/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1399/ 6000A7E :                     ; 		rts
(2) 1400/ 6000A7E :                     ; 		nop
(2) 1401/ 6000A7E :                     ; 		align 4
(2) 1402/ 6000A7E :                     ; 		ltorg
(2) 1403/ 6000A7E :                     ;
(2) 1404/ 6000A7E :                     ; ; ------------------------------------------------
(2) 1405/ 6000A7E :                     ; ; MarsMdl_Init
(2) 1406/ 6000A7E :                     ; ;
(2) 1407/ 6000A7E :                     ; ; Reset ALL objects
(2) 1408/ 6000A7E :                     ; ; ------------------------------------------------
(2) 1409/ 6000A7E :                     ;
(2) 1410/ 6000A7E :                     ; MarsMdl_Init:
(2) 1411/ 6000A7E :                     ; 		mov	#RAM_Mars_Objects,r1
(2) 1412/ 6000A7E :                     ; 		mov	#MAX_MODELS,r2
(2) 1413/ 6000A7E :                     ; 		mov	#0,r0
(2) 1414/ 6000A7E :                     ; .clnup:
(2) 1415/ 6000A7E :                     ; 		mov	r0,@(mdl_data,r1)
(2) 1416/ 6000A7E :                     ; 		mov	r0,@(mdl_animdata,r1)
(2) 1417/ 6000A7E :                     ; 		mov	r0,@(mdl_x_pos,r1)
(2) 1418/ 6000A7E :                     ; 		mov	r0,@(mdl_x_rot,r1)
(2) 1419/ 6000A7E :                     ; 		mov	r0,@(mdl_y_pos,r1)
(2) 1420/ 6000A7E :                     ; 		mov	r0,@(mdl_y_rot,r1)
(2) 1421/ 6000A7E :                     ; 		mov	r0,@(mdl_y_pos,r1)
(2) 1422/ 6000A7E :                     ; 		mov	r0,@(mdl_y_rot,r1)
(2) 1423/ 6000A7E :                     ; 		dt	r2
(2) 1424/ 6000A7E :                     ; 		bf/s	.clnup
(2) 1425/ 6000A7E :                     ; 		add	#sizeof_mdlobj,r1
(2) 1426/ 6000A7E :                     ; 		rts
(2) 1427/ 6000A7E :                     ; 		nop
(2) 1428/ 6000A7E :                     ; 		align 4
(2) 1429/ 6000A7E :                     ; 		ltorg
(2) 1430/ 6000A7E :                     ;
(2) 1431/ 6000A7E :                     ; ; ------------------------------------------------
(2) 1432/ 6000A7E :                     ; ; Read model
(2) 1433/ 6000A7E :                     ; ; ------------------------------------------------
(2) 1434/ 6000A7E :                     ;
(2) 1435/ 6000A7E :                     ; MarsMdl_ReadModel:
(2) 1436/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1437/ 6000A7E :                     ; 		mov	@(mdl_animdata,r14),r13
(2) 1438/ 6000A7E :                     ; 		cmp/pl	r13
(2) 1439/ 6000A7E :                     ; 		bf	.no_anim
(2) 1440/ 6000A7E :                     ; 		mov	@(mdl_animtimer,r14),r0
(2) 1441/ 6000A7E :                     ; 		add	#-1,r0
(2) 1442/ 6000A7E :                     ; 		cmp/pl 	r0
(2) 1443/ 6000A7E :                     ; 		bt	.wait_camanim
(2) 1444/ 6000A7E :                     ; 		mov	@r13+,r2
(2) 1445/ 6000A7E :                     ; 		mov	@(mdl_animframe,r14),r0
(2) 1446/ 6000A7E :                     ; 		add	#1,r0
(2) 1447/ 6000A7E :                     ; 		cmp/eq	r2,r0
(2) 1448/ 6000A7E :                     ; 		bf	.on_frames
(2) 1449/ 6000A7E :                     ; 		xor	r0,r0
(2) 1450/ 6000A7E :                     ; .on_frames:
(2) 1451/ 6000A7E :                     ; 		mov	r0,r1
(2) 1452/ 6000A7E :                     ; 		mov	r0,@(mdl_animframe,r14)
(2) 1453/ 6000A7E :                     ; 		mov	#$18,r0
(2) 1454/ 6000A7E :                     ; 		mulu	r0,r1
(2) 1455/ 6000A7E :                     ; 		sts	macl,r0
(2) 1456/ 6000A7E :                     ; 		add	r0,r13
(2) 1457/ 6000A7E :                     ; 		mov	@r13+,r1
(2) 1458/ 6000A7E :                     ; 		mov	@r13+,r2
(2) 1459/ 6000A7E :                     ; 		mov	@r13+,r3
(2) 1460/ 6000A7E :                     ; 		mov	@r13+,r4
(2) 1461/ 6000A7E :                     ; 		mov	@r13+,r5
(2) 1462/ 6000A7E :                     ; 		mov	@r13+,r6
(2) 1463/ 6000A7E :                     ; ; 		neg	r4,r4
(2) 1464/ 6000A7E :                     ; 		mov	r1,@(mdl_x_pos,r14)
(2) 1465/ 6000A7E :                     ; 		mov	r2,@(mdl_y_pos,r14)
(2) 1466/ 6000A7E :                     ; 		mov	r3,@(mdl_z_pos,r14)
(2) 1467/ 6000A7E :                     ; 		mov	r4,@(mdl_x_rot,r14)
(2) 1468/ 6000A7E :                     ; 		mov	r5,@(mdl_y_rot,r14)
(2) 1469/ 6000A7E :                     ; 		mov	r6,@(mdl_z_rot,r14)
(2) 1470/ 6000A7E :                     ; 		mov	@(mdl_animspd,r14),r0		; TODO: make a timer setting
(2) 1471/ 6000A7E :                     ; .wait_camanim:
(2) 1472/ 6000A7E :                     ; 		mov	r0,@(mdl_animtimer,r14)
(2) 1473/ 6000A7E :                     ; .no_anim:
(2) 1474/ 6000A7E :                     ; 	; Now start reading
(2) 1475/ 6000A7E :                     ; 		mov	#$3FFFFFFF,r0
(2) 1476/ 6000A7E :                     ; 		mov	#Cach_CurrPlygn,r13		; r13 - temporal face output
(2) 1477/ 6000A7E :                     ; 		mov	@(mdl_data,r14),r12		; r12 - model header
(2) 1478/ 6000A7E :                     ; 		and	r0,r12
(2) 1479/ 6000A7E :                     ; 		mov 	@(8,r12),r11			; r11 - face data
(2) 1480/ 6000A7E :                     ; 		mov 	@(4,r12),r10			; r10 - vertice data (X,Y,Z)
(2) 1481/ 6000A7E :                     ; 		mov.w	@r12,r9				;  r9 - Number of faces used on model
(2) 1482/ 6000A7E :                     ; 		mov	@(marsGbl_CurrZList,gbr),r0	;  r8 - Zlist for sorting
(2) 1483/ 6000A7E :                     ; 		mov	r0,r8
(2) 1484/ 6000A7E :                     ; .next_face:
(2) 1485/ 6000A7E :                     ; 		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Ran out of space to store faces?
(2) 1486/ 6000A7E :                     ; 		mov	.tag_maxfaces,r1
(2) 1487/ 6000A7E :                     ; 		cmp/ge	r1,r0
(2) 1488/ 6000A7E :                     ; 		bf	.can_build
(2) 1489/ 6000A7E :                     ; 		bra	.exit_model
(2) 1490/ 6000A7E :                     ; 		nop
(2) 1491/ 6000A7E :                     ; 		align 4
(2) 1492/ 6000A7E :                     ; .tag_maxfaces:	dc.l	MAX_FACES
(2) 1493/ 6000A7E :                     ;
(2) 1494/ 6000A7E :                     ; ; --------------------------------
(2) 1495/ 6000A7E :                     ;
(2) 1496/ 6000A7E :                     ; .can_build:
(2) 1497/ 6000A7E :                     ; 		mov.w	@r11+,r4		; Read type
(2) 1498/ 6000A7E :                     ; 		mov	#3,r7			; r7 - Current polygon type: triangle (3)
(2) 1499/ 6000A7E :                     ; 		mov	r4,r0
(2) 1500/ 6000A7E :                     ; 		shlr8	r0
(2) 1501/ 6000A7E :                     ; 		tst	#PLGN_TRI,r0		; Model face uses triangle?
(2) 1502/ 6000A7E :                     ; 		bf	.set_tri
(2) 1503/ 6000A7E :                     ; 		add	#1,r7			; Face is quad, r7 = 4 points
(2) 1504/ 6000A7E :                     ; .set_tri:
(2) 1505/ 6000A7E :                     ; 		cmp/pl	r4			; Faces uses texture? ($8xxx)
(2) 1506/ 6000A7E :                     ; 		bt	.solid_type
(2) 1507/ 6000A7E :                     ;
(2) 1508/ 6000A7E :                     ; ; --------------------------------
(2) 1509/ 6000A7E :                     ; ; Set texture material
(2) 1510/ 6000A7E :                     ; ; --------------------------------
(2) 1511/ 6000A7E :                     ;
(2) 1512/ 6000A7E :                     ; 		mov	@($C,r12),r6		; r6 - Material data
(2) 1513/ 6000A7E :                     ; 		mov	r13,r5			; r5 - Go to UV section
(2) 1514/ 6000A7E :                     ; 		add 	#polygn_srcpnts,r5
(2) 1515/ 6000A7E :                     ; 		mov	r7,r3			; r3 - copy of current face points (3 or 4)
(2) 1516/ 6000A7E :                     ;
(2) 1517/ 6000A7E :                     ; 	; New method
(2) 1518/ 6000A7E :                     ; 	rept 3
(2) 1519/ 6000A7E :                     ; 		mov.w	@r11+,r0			; Read UV index
(2) 1520/ 6000A7E :                     ; 		extu	r0,r0
(2) 1521/ 6000A7E :                     ; 		shll2	r0
(2) 1522/ 6000A7E :                     ; 		mov	@(r6,r0),r0
(2) 1523/ 6000A7E :                     ; 		mov.w	r0,@(2,r5)
(2) 1524/ 6000A7E :                     ; 		shlr16	r0
(2) 1525/ 6000A7E :                     ; 		mov.w	r0,@r5
(2) 1526/ 6000A7E :                     ; 		add	#4,r5
(2) 1527/ 6000A7E :                     ; 	endm
(2) 1528/ 6000A7E :                     ; 		mov	#3,r0			; Triangle?
(2) 1529/ 6000A7E :                     ; 		cmp/eq	r0,r7
(2) 1530/ 6000A7E :                     ; 		bt	.alluvdone		; If yes, skip this
(2) 1531/ 6000A7E :                     ; 		mov.w	@r11+,r0		; Read extra UV index
(2) 1532/ 6000A7E :                     ; 		extu	r0,r0
(2) 1533/ 6000A7E :                     ; 		shll2	r0
(2) 1534/ 6000A7E :                     ; 		mov	@(r6,r0),r0
(2) 1535/ 6000A7E :                     ; 		mov.w	r0,@(2,r5)
(2) 1536/ 6000A7E :                     ; 		shlr16	r0
(2) 1537/ 6000A7E :                     ; 		mov.w	r0,@r5
(2) 1538/ 6000A7E :                     ; .alluvdone:
(2) 1539/ 6000A7E :                     ;
(2) 1540/ 6000A7E :                     ; 		mov	@(mdl_option,r14),r0
(2) 1541/ 6000A7E :                     ; 		and	#$FF,r0
(2) 1542/ 6000A7E :                     ; 		mov	r0,r1
(2) 1543/ 6000A7E :                     ; 		mov	r4,r0
(2) 1544/ 6000A7E :                     ; 		mov	.tag_andmtrl,r5
(2) 1545/ 6000A7E :                     ; 		and	r5,r0
(2) 1546/ 6000A7E :                     ; 		shll2	r0
(2) 1547/ 6000A7E :                     ; 		shll	r0
(2) 1548/ 6000A7E :                     ; 		mov	@($10,r12),r6
(2) 1549/ 6000A7E :                     ; 		add	r0,r6
(2) 1550/ 6000A7E :                     ; 		mov	#$E000,r0		; grab special bits
(2) 1551/ 6000A7E :                     ; 		and	r0,r4
(2) 1552/ 6000A7E :                     ; 		shll16	r4
(2) 1553/ 6000A7E :                     ; 		mov	@(4,r6),r0
(2) 1554/ 6000A7E :                     ; 		or	r0,r4
(2) 1555/ 6000A7E :                     ; 		add	r1,r4
(2) 1556/ 6000A7E :                     ; 		mov	r4,@(polygn_type,r13)
(2) 1557/ 6000A7E :                     ; 		mov	@r6,r0
(2) 1558/ 6000A7E :                     ; 		mov	r0,@(polygn_mtrl,r13)
(2) 1559/ 6000A7E :                     ; 		bra	.go_faces
(2) 1560/ 6000A7E :                     ; 		nop
(2) 1561/ 6000A7E :                     ; 		align 4
(2) 1562/ 6000A7E :                     ; .tag_andmtrl:
(2) 1563/ 6000A7E :                     ; 		dc.l $1FFF
(2) 1564/ 6000A7E :                     ;
(2) 1565/ 6000A7E :                     ; ; --------------------------------
(2) 1566/ 6000A7E :                     ; ; Set texture material
(2) 1567/ 6000A7E :                     ; ; --------------------------------
(2) 1568/ 6000A7E :                     ;
(2) 1569/ 6000A7E :                     ; .solid_type:
(2) 1570/ 6000A7E :                     ; 		mov	@(mdl_option,r14),r0
(2) 1571/ 6000A7E :                     ; 		and	#$FF,r0
(2) 1572/ 6000A7E :                     ; 		mov	r0,r1
(2) 1573/ 6000A7E :                     ; 		mov	r4,r0
(2) 1574/ 6000A7E :                     ; 		mov	#$E000,r5
(2) 1575/ 6000A7E :                     ; 		and	r5,r4
(2) 1576/ 6000A7E :                     ; 		shll16	r4
(2) 1577/ 6000A7E :                     ; 		add	r1,r4
(2) 1578/ 6000A7E :                     ; 		mov	r4,@(polygn_type,r13)		; Set type 0 (tri) or quad (1)
(2) 1579/ 6000A7E :                     ; 		and	#$FF,r0
(2) 1580/ 6000A7E :                     ; 		mov	r0,@(polygn_mtrl,r13)		; Set pixel color (0-255)
(2) 1581/ 6000A7E :                     ;
(2) 1582/ 6000A7E :                     ; ; --------------------------------
(2) 1583/ 6000A7E :                     ; ; Read faces
(2) 1584/ 6000A7E :                     ; ; --------------------------------
(2) 1585/ 6000A7E :                     ;
(2) 1586/ 6000A7E :                     ; .go_faces:
(2) 1587/ 6000A7E :                     ; 		mov	r13,r1
(2) 1588/ 6000A7E :                     ; 		add 	#polygn_points,r1
(2) 1589/ 6000A7E :                     ; 		mov	r11,r6
(2) 1590/ 6000A7E :                     ; 		mov	r7,r0
(2) 1591/ 6000A7E :                     ; 		shll	r0
(2) 1592/ 6000A7E :                     ; 		add	r0,r11
(2) 1593/ 6000A7E :                     ; 		mov 	r8,@-r15
(2) 1594/ 6000A7E :                     ; 		mov 	r9,@-r15
(2) 1595/ 6000A7E :                     ; 		mov 	r11,@-r15
(2) 1596/ 6000A7E :                     ; 		mov 	r12,@-r15
(2) 1597/ 6000A7E :                     ; 		mov 	r13,@-r15
(2) 1598/ 6000A7E :                     ; 		mov	.tag_xl,r8
(2) 1599/ 6000A7E :                     ; 		neg	r8,r9
(2) 1600/ 6000A7E :                     ; 		mov	#-112,r11
(2) 1601/ 6000A7E :                     ; 		neg	r11,r12
(2) 1602/ 6000A7E :                     ; 		mov	#$7FFFFFFF,r5
(2) 1603/ 6000A7E :                     ; 		mov	#$FFFFFFFF,r13
(2) 1604/ 6000A7E :                     ;
(2) 1605/ 6000A7E :                     ; 	; Do 3 points
(2) 1606/ 6000A7E :                     ; 	rept 3
(2) 1607/ 6000A7E :                     ; 		mov	#0,r0
(2) 1608/ 6000A7E :                     ; 		mov.w 	@r6+,r0
(2) 1609/ 6000A7E :                     ; 		mov	#$C,r4
(2) 1610/ 6000A7E :                     ; 		mulu	r4,r0
(2) 1611/ 6000A7E :                     ; 		sts	macl,r0
(2) 1612/ 6000A7E :                     ; 		mov	r10,r4
(2) 1613/ 6000A7E :                     ; 		add 	r0,r4
(2) 1614/ 6000A7E :                     ; 		mov	@r4,r2
(2) 1615/ 6000A7E :                     ; 		mov	@(4,r4),r3
(2) 1616/ 6000A7E :                     ; 		mov	@(8,r4),r4
(2) 1617/ 6000A7E :                     ; 		bsr	mdlrd_setpoint
(2) 1618/ 6000A7E :                     ; 		nop
(2) 1619/ 6000A7E :                     ; 		mov	r2,@r1
(2) 1620/ 6000A7E :                     ; 		mov	r3,@(4,r1)
(2) 1621/ 6000A7E :                     ; 		add	#8,r1
(2) 1622/ 6000A7E :                     ; 	endm
(2) 1623/ 6000A7E :                     ; 		mov	#3,r0			; Triangle?
(2) 1624/ 6000A7E :                     ; 		cmp/eq	r0,r7
(2) 1625/ 6000A7E :                     ; 		bt	.alldone		; If yes, skip this
(2) 1626/ 6000A7E :                     ; 		mov	#0,r0
(2) 1627/ 6000A7E :                     ; 		mov.w 	@r6+,r0
(2) 1628/ 6000A7E :                     ; 		mov	#$C,r4
(2) 1629/ 6000A7E :                     ; 		mulu	r4,r0
(2) 1630/ 6000A7E :                     ; 		sts	macl,r0
(2) 1631/ 6000A7E :                     ; 		mov	r10,r4
(2) 1632/ 6000A7E :                     ; 		add 	r0,r4
(2) 1633/ 6000A7E :                     ; 		mov	@r4,r2
(2) 1634/ 6000A7E :                     ; 		mov	@(4,r4),r3
(2) 1635/ 6000A7E :                     ; 		mov	@(8,r4),r4
(2) 1636/ 6000A7E :                     ; 		bsr	mdlrd_setpoint
(2) 1637/ 6000A7E :                     ; 		nop
(2) 1638/ 6000A7E :                     ; 		mov	r2,@r1
(2) 1639/ 6000A7E :                     ; 		mov	r3,@(4,r1)
(2) 1640/ 6000A7E :                     ; .alldone:
(2) 1641/ 6000A7E :                     ; 		mov	r8,r1
(2) 1642/ 6000A7E :                     ; 		mov	r9,r2
(2) 1643/ 6000A7E :                     ; 		mov	r11,r3
(2) 1644/ 6000A7E :                     ; 		mov	r12,r4
(2) 1645/ 6000A7E :                     ; 		mov	r13,r6
(2) 1646/ 6000A7E :                     ; 		mov	@r15+,r13
(2) 1647/ 6000A7E :                     ; 		mov	@r15+,r12
(2) 1648/ 6000A7E :                     ; 		mov	@r15+,r11
(2) 1649/ 6000A7E :                     ; 		mov	@r15+,r9
(2) 1650/ 6000A7E :                     ; 		mov	@r15+,r8
(2) 1651/ 6000A7E :                     ;
(2) 1652/ 6000A7E :                     ; 	; NOTE: if you don't like how the perspective works
(2) 1653/ 6000A7E :                     ; 	; change this register depending how you want to ignore
(2) 1654/ 6000A7E :                     ; 	; faces closer to the camera:
(2) 1655/ 6000A7E :                     ; 	;
(2) 1656/ 6000A7E :                     ; 	; r5 - Back Z point, keep affine limitations
(2) 1657/ 6000A7E :                     ; 	; r6 - Front Z point, skip face but larger faces are affected
(2) 1658/ 6000A7E :                     ;
(2) 1659/ 6000A7E :                     ; 		cmp/pz	r5
(2) 1660/ 6000A7E :                     ; 		bt	.go_fout
(2) 1661/ 6000A7E :                     ; ; 		cmp/pz	r6
(2) 1662/ 6000A7E :                     ; ; 		bt	.go_fout
(2) 1663/ 6000A7E :                     ;
(2) 1664/ 6000A7E :                     ;
(2) 1665/ 6000A7E :                     ; ; 		mov	#RAM_Mars_ObjCamera,r0
(2) 1666/ 6000A7E :                     ; ; 		mov	@(cam_y_pos,r0),r7
(2) 1667/ 6000A7E :                     ; ; 		shlr2	r7
(2) 1668/ 6000A7E :                     ; ; 		shlr2	r7
(2) 1669/ 6000A7E :                     ; ; 		shlr2	r7
(2) 1670/ 6000A7E :                     ; ; 		shlr	r7
(2) 1671/ 6000A7E :                     ; ; 		exts	r7,r7
(2) 1672/ 6000A7E :                     ; ; 		cmp/pl	r7
(2) 1673/ 6000A7E :                     ; ; 		bf	.revrscam
(2) 1674/ 6000A7E :                     ; ; 		neg	r7,r7
(2) 1675/ 6000A7E :                     ; ; .revrscam:
(2) 1676/ 6000A7E :                     ; ; 		mov	#MAX_ZDIST,r0
(2) 1677/ 6000A7E :                     ; ; 		cmp/ge	r0,r7
(2) 1678/ 6000A7E :                     ; ; 		bt	.camlimit
(2) 1679/ 6000A7E :                     ; ; 		mov	r0,r7
(2) 1680/ 6000A7E :                     ; ; .camlimit:
(2) 1681/ 6000A7E :                     ; ; 		cmp/pl	r6
(2) 1682/ 6000A7E :                     ; ; 		bt	.face_out
(2) 1683/ 6000A7E :                     ; 		mov	#MAX_ZDIST,r0		; Draw distance
(2) 1684/ 6000A7E :                     ; ; 		add 	r7,r0
(2) 1685/ 6000A7E :                     ; 		cmp/ge	r0,r5
(2) 1686/ 6000A7E :                     ; 		bf	.go_fout
(2) 1687/ 6000A7E :                     ; 		mov	#-(SCREEN_WIDTH/2),r0
(2) 1688/ 6000A7E :                     ; 		cmp/gt	r0,r1
(2) 1689/ 6000A7E :                     ; 		bf	.go_fout
(2) 1690/ 6000A7E :                     ; 		neg	r0,r0
(2) 1691/ 6000A7E :                     ; 		cmp/ge	r0,r2
(2) 1692/ 6000A7E :                     ; 		bt	.go_fout
(2) 1693/ 6000A7E :                     ; 		mov	#-(SCREEN_HEIGHT/2),r0
(2) 1694/ 6000A7E :                     ; 		cmp/gt	r0,r3
(2) 1695/ 6000A7E :                     ; 		bf	.go_fout
(2) 1696/ 6000A7E :                     ; 		neg	r0,r0
(2) 1697/ 6000A7E :                     ; 		cmp/ge	r0,r4
(2) 1698/ 6000A7E :                     ; 		bf	.face_ok
(2) 1699/ 6000A7E :                     ; .go_fout:	bra	.face_out
(2) 1700/ 6000A7E :                     ; 		nop
(2) 1701/ 6000A7E :                     ; 		align 4
(2) 1702/ 6000A7E :                     ; .tag_xl:	dc.l -160
(2) 1703/ 6000A7E :                     ;
(2) 1704/ 6000A7E :                     ; ; --------------------------------
(2) 1705/ 6000A7E :                     ;
(2) 1706/ 6000A7E :                     ; .face_ok:
(2) 1707/ 6000A7E :                     ; 		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Add 1 face to the list
(2) 1708/ 6000A7E :                     ; 		add	#1,r0
(2) 1709/ 6000A7E :                     ; 		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(2) 1710/ 6000A7E :                     ; 		mov	@(marsGbl_CurrFacePos,gbr),r0
(2) 1711/ 6000A7E :                     ; 		mov	r0,r1
(2) 1712/ 6000A7E :                     ; 		mov	r13,r2
(2) 1713/ 6000A7E :                     ; 		mov	r5,@r8				; Store current Z to Zlist
(2) 1714/ 6000A7E :                     ; 		mov	r1,@(4,r8)			; And it's address
(2) 1715/ 6000A7E :                     ;
(2) 1716/ 6000A7E :                     ; ; 	Sort this face, SLOW
(2) 1717/ 6000A7E :                     ; ; 	r7 - Curr Z
(2) 1718/ 6000A7E :                     ; ; 	r6 - Past Z
(2) 1719/ 6000A7E :                     ; 		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(2) 1720/ 6000A7E :                     ; 		cmp/eq	#1,r0
(2) 1721/ 6000A7E :                     ; 		bt	.first_face
(2) 1722/ 6000A7E :                     ; 		cmp/eq	#2,r0
(2) 1723/ 6000A7E :                     ; 		bt	.first_face
(2) 1724/ 6000A7E :                     ; 		mov	r8,r7
(2) 1725/ 6000A7E :                     ; 		add	#-8,r7
(2) 1726/ 6000A7E :                     ; ; 		mov	@(marsGbl_CurrZList,gbr),r0
(2) 1727/ 6000A7E :                     ; ; 		mov	r0,r6
(2) 1728/ 6000A7E :                     ; 		mov	#RAM_Mars_Plgn_ZList_0,r6
(2) 1729/ 6000A7E :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0
(2) 1730/ 6000A7E :                     ; 		tst     #1,r0
(2) 1731/ 6000A7E :                     ; 		bt	.page_2
(2) 1732/ 6000A7E :                     ; 		mov	#RAM_Mars_Plgn_ZList_1,r6
(2) 1733/ 6000A7E :                     ; .page_2:
(2) 1734/ 6000A7E :                     ; 		cmp/ge	r6,r7
(2) 1735/ 6000A7E :                     ; 		bf	.first_face
(2) 1736/ 6000A7E :                     ; 		mov	@(8,r7),r4
(2) 1737/ 6000A7E :                     ; 		mov	@r7,r5
(2) 1738/ 6000A7E :                     ; 		cmp/eq	r4,r5
(2) 1739/ 6000A7E :                     ; 		bt	.first_face
(2) 1740/ 6000A7E :                     ; 		cmp/gt	r4,r5
(2) 1741/ 6000A7E :                     ; 		bf	.swap_me
(2) 1742/ 6000A7E :                     ; 		mov	@r7,r4
(2) 1743/ 6000A7E :                     ; 		mov	@(8,r7),r5
(2) 1744/ 6000A7E :                     ; 		mov	r5,@r7
(2) 1745/ 6000A7E :                     ; 		mov	r4,@(8,r7)
(2) 1746/ 6000A7E :                     ; 		mov	@(4,r7),r4
(2) 1747/ 6000A7E :                     ; 		mov	@($C,r7),r5
(2) 1748/ 6000A7E :                     ; 		mov	r5,@(4,r7)
(2) 1749/ 6000A7E :                     ; 		mov	r4,@($C,r7)
(2) 1750/ 6000A7E :                     ; .swap_me:
(2) 1751/ 6000A7E :                     ; 		bra	.page_2
(2) 1752/ 6000A7E :                     ; 		add	#-8,r7
(2) 1753/ 6000A7E :                     ; .first_face:
(2) 1754/ 6000A7E :                     ;
(2) 1755/ 6000A7E :                     ;
(2) 1756/ 6000A7E :                     ; 		add	#8,r8				; Next Zlist entry
(2) 1757/ 6000A7E :                     ; 	rept sizeof_polygn/2				; Copy words manually
(2) 1758/ 6000A7E :                     ; 		mov.w	@r2+,r0
(2) 1759/ 6000A7E :                     ; 		mov.w	r0,@r1
(2) 1760/ 6000A7E :                     ; 		add	#2,r1
(2) 1761/ 6000A7E :                     ; 	endm
(2) 1762/ 6000A7E :                     ; 		mov	r1,r0
(2) 1763/ 6000A7E :                     ; 		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2) 1764/ 6000A7E :                     ;
(2) 1765/ 6000A7E :                     ; ; 		mov	r0,r1
(2) 1766/ 6000A7E :                     ; ; 		mov	@(marsGbl_ZSortReq,gbr),r0
(2) 1767/ 6000A7E :                     ; ; 		cmp/eq	#1,r0
(2) 1768/ 6000A7E :                     ; ; 		bt	.face_out
(2) 1769/ 6000A7E :                     ; ; 		mov	#1,r0
(2) 1770/ 6000A7E :                     ; ; 		mov.w	r0,@(marsGbl_ZSortReq,gbr)
(2) 1771/ 6000A7E :                     ; .face_out:
(2) 1772/ 6000A7E :                     ; 		dt	r9
(2) 1773/ 6000A7E :                     ; 		bt	.finish_this
(2) 1774/ 6000A7E :                     ; 		bra	.next_face
(2) 1775/ 6000A7E :                     ; 		nop
(2) 1776/ 6000A7E :                     ; .finish_this:
(2) 1777/ 6000A7E :                     ; 		mov	r8,r0
(2) 1778/ 6000A7E :                     ; 		mov	r0,@(marsGbl_CurrZList,gbr)
(2) 1779/ 6000A7E :                     ;
(2) 1780/ 6000A7E :                     ; .exit_model:
(2) 1781/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1782/ 6000A7E :                     ; 		rts
(2) 1783/ 6000A7E :                     ; 		nop
(2) 1784/ 6000A7E :                     ; 		align 4
(2) 1785/ 6000A7E :                     ; 		ltorg
(2) 1786/ 6000A7E :                     ;
(2) 1787/ 6000A7E :                     ; ; ----------------------------------------
(2) 1788/ 6000A7E :                     ; ; Modify position to current point
(2) 1789/ 6000A7E :                     ; ; ----------------------------------------
(2) 1790/ 6000A7E :                     ;
(2) 1791/ 6000A7E :                     ; 		align 4
(2) 1792/ 6000A7E :                     ; mdlrd_setpoint:
(2) 1793/ 6000A7E :                     ; 		sts	pr,@-r15
(2) 1794/ 6000A7E :                     ; 		mov 	r5,@-r15
(2) 1795/ 6000A7E :                     ; 		mov 	r6,@-r15
(2) 1796/ 6000A7E :                     ; 		mov 	r7,@-r15
(2) 1797/ 6000A7E :                     ; 		mov 	r8,@-r15
(2) 1798/ 6000A7E :                     ; 		mov 	r9,@-r15
(2) 1799/ 6000A7E :                     ; 		mov 	r10,@-r15
(2) 1800/ 6000A7E :                     ; 		mov 	r11,@-r15
(2) 1801/ 6000A7E :                     ;
(2) 1802/ 6000A7E :                     ; 	; Object rotation
(2) 1803/ 6000A7E :                     ; 		mov	r2,r5			; r5 - X
(2) 1804/ 6000A7E :                     ; 		mov	r4,r6			; r6 - Z
(2) 1805/ 6000A7E :                     ;   		mov 	@(mdl_x_rot,r14),r0
(2) 1806/ 6000A7E :                     ;   		shlr2	r0
(2) 1807/ 6000A7E :                     ;   		shlr	r0
(2) 1808/ 6000A7E :                     ;   		bsr	mdlrd_rotate
(2) 1809/ 6000A7E :                     ; 		shlr8	r0
(2) 1810/ 6000A7E :                     ;    		mov	r7,r2
(2) 1811/ 6000A7E :                     ;    		mov	r3,r5
(2) 1812/ 6000A7E :                     ;   		mov	r8,r6
(2) 1813/ 6000A7E :                     ;   		mov 	@(mdl_y_rot,r14),r0
(2) 1814/ 6000A7E :                     ;   		shlr2	r0
(2) 1815/ 6000A7E :                     ;   		shlr	r0
(2) 1816/ 6000A7E :                     ;   		bsr	mdlrd_rotate
(2) 1817/ 6000A7E :                     ; 		shlr8	r0
(2) 1818/ 6000A7E :                     ;    		mov	r8,r4
(2) 1819/ 6000A7E :                     ;    		mov	r2,r5
(2) 1820/ 6000A7E :                     ;    		mov	r7,r6
(2) 1821/ 6000A7E :                     ;    		mov 	@(mdl_z_rot,r14),r0
(2) 1822/ 6000A7E :                     ;   		shlr2	r0
(2) 1823/ 6000A7E :                     ;   		shlr	r0
(2) 1824/ 6000A7E :                     ;   		bsr	mdlrd_rotate
(2) 1825/ 6000A7E :                     ; 		shlr8	r0
(2) 1826/ 6000A7E :                     ;    		mov	r7,r2
(2) 1827/ 6000A7E :                     ;    		mov	r8,r3
(2) 1828/ 6000A7E :                     ; 		mov	@(mdl_x_pos,r14),r5
(2) 1829/ 6000A7E :                     ; 		mov	@(mdl_y_pos,r14),r6
(2) 1830/ 6000A7E :                     ; 		mov	@(mdl_z_pos,r14),r7
(2) 1831/ 6000A7E :                     ; 		shlr8	r5
(2) 1832/ 6000A7E :                     ; 		shlr8	r6
(2) 1833/ 6000A7E :                     ; 		shlr8	r7
(2) 1834/ 6000A7E :                     ; 		exts	r5,r5
(2) 1835/ 6000A7E :                     ; 		exts	r6,r6
(2) 1836/ 6000A7E :                     ; 		exts	r7,r7
(2) 1837/ 6000A7E :                     ; 		add 	r5,r2
(2) 1838/ 6000A7E :                     ; 		add 	r6,r3
(2) 1839/ 6000A7E :                     ; 		add 	r7,r4
(2) 1840/ 6000A7E :                     ;
(2) 1841/ 6000A7E :                     ; 	; Include camera changes
(2) 1842/ 6000A7E :                     ; 		mov 	#RAM_Mars_ObjCamera,r11
(2) 1843/ 6000A7E :                     ; 		mov	@(cam_x_pos,r11),r5
(2) 1844/ 6000A7E :                     ; 		mov	@(cam_y_pos,r11),r6
(2) 1845/ 6000A7E :                     ; 		mov	@(cam_z_pos,r11),r7
(2) 1846/ 6000A7E :                     ; 		mov	@(mdl_data,r14),r0		; Layout object?
(2) 1847/ 6000A7E :                     ; 		shll	r0
(2) 1848/ 6000A7E :                     ; 		cmp/pl	r0
(2) 1849/ 6000A7E :                     ; 		bt	.lay_move
(2) 1850/ 6000A7E :                     ; 		mov	#$FFFFF,r0			; Limit camera movement
(2) 1851/ 6000A7E :                     ; 		and	r0,r5
(2) 1852/ 6000A7E :                     ; ; 		and	r0,r6
(2) 1853/ 6000A7E :                     ; 		and	r0,r7
(2) 1854/ 6000A7E :                     ; .lay_move:
(2) 1855/ 6000A7E :                     ; 		shlr8	r5
(2) 1856/ 6000A7E :                     ; 		shlr8	r6
(2) 1857/ 6000A7E :                     ; 		shlr8	r7
(2) 1858/ 6000A7E :                     ; 		exts	r5,r5
(2) 1859/ 6000A7E :                     ; 		exts	r6,r6
(2) 1860/ 6000A7E :                     ; 		exts	r7,r7
(2) 1861/ 6000A7E :                     ; 		sub 	r5,r2
(2) 1862/ 6000A7E :                     ; 		sub 	r6,r3
(2) 1863/ 6000A7E :                     ; 		add 	r7,r4
(2) 1864/ 6000A7E :                     ;
(2) 1865/ 6000A7E :                     ; 		mov	r2,r5
(2) 1866/ 6000A7E :                     ; 		mov	r4,r6
(2) 1867/ 6000A7E :                     ;   		mov 	@(cam_x_rot,r11),r0
(2) 1868/ 6000A7E :                     ;   		shlr2	r0
(2) 1869/ 6000A7E :                     ;   		shlr	r0
(2) 1870/ 6000A7E :                     ;   		bsr	mdlrd_rotate
(2) 1871/ 6000A7E :                     ; 		shlr8	r0
(2) 1872/ 6000A7E :                     ;    		mov	r7,r2
(2) 1873/ 6000A7E :                     ;    		mov	r8,r4
(2) 1874/ 6000A7E :                     ;    		mov	r3,r5
(2) 1875/ 6000A7E :                     ;   		mov	r8,r6
(2) 1876/ 6000A7E :                     ;   		mov 	@(cam_y_rot,r11),r0
(2) 1877/ 6000A7E :                     ;   		shlr2	r0
(2) 1878/ 6000A7E :                     ;   		shlr	r0
(2) 1879/ 6000A7E :                     ;   		bsr	mdlrd_rotate
(2) 1880/ 6000A7E :                     ; 		shlr8	r0
(2) 1881/ 6000A7E :                     ;    		mov	r8,r4
(2) 1882/ 6000A7E :                     ;    		mov	r2,r5
(2) 1883/ 6000A7E :                     ;    		mov	r7,r6
(2) 1884/ 6000A7E :                     ;    		mov 	@(cam_z_rot,r11),r0
(2) 1885/ 6000A7E :                     ;   		shlr2	r0
(2) 1886/ 6000A7E :                     ;   		shlr	r0
(2) 1887/ 6000A7E :                     ;   		bsr	mdlrd_rotate
(2) 1888/ 6000A7E :                     ; 		shlr8	r0
(2) 1889/ 6000A7E :                     ;    		mov	r7,r2
(2) 1890/ 6000A7E :                     ;    		mov	r8,r3
(2) 1891/ 6000A7E :                     ;
(2) 1892/ 6000A7E :                     ; ; 		mov	#-(SCREEN_WIDTH/2)<<4,r6
(2) 1893/ 6000A7E :                     ; ; 		cmp/ge	r6,r2
(2) 1894/ 6000A7E :                     ; ; 		bf	.x_forz
(2) 1895/ 6000A7E :                     ; ; 		neg	r6,r6
(2) 1896/ 6000A7E :                     ; ; 		cmp/ge	r6,r2
(2) 1897/ 6000A7E :                     ; ; 		bf	.x_rsd
(2) 1898/ 6000A7E :                     ; ; .x_forz:
(2) 1899/ 6000A7E :                     ; ; 		mov	r6,r2
(2) 1900/ 6000A7E :                     ; ; .x_rsd:
(2) 1901/ 6000A7E :                     ;
(2) 1902/ 6000A7E :                     ; ; 		mov	#-(SCREEN_HEIGHT/2),r6
(2) 1903/ 6000A7E :                     ; ; 		cmp/ge	r6,r3
(2) 1904/ 6000A7E :                     ; ; 		bf	.y_forz
(2) 1905/ 6000A7E :                     ; ; 		neg	r6,r6
(2) 1906/ 6000A7E :                     ; ; 		cmp/ge	r6,r3
(2) 1907/ 6000A7E :                     ; ; 		bf	.y_rsd
(2) 1908/ 6000A7E :                     ; ; .y_forz:
(2) 1909/ 6000A7E :                     ; ; 		mov	r6,r3
(2) 1910/ 6000A7E :                     ; ; .y_rsd:
(2) 1911/ 6000A7E :                     ;
(2) 1912/ 6000A7E :                     ; 	; Weak perspective projection
(2) 1913/ 6000A7E :                     ; 	; this is the best I got,
(2) 1914/ 6000A7E :                     ; 	; It breaks on large faces
(2) 1915/ 6000A7E :                     ; 		mov 	#_JR,r8
(2) 1916/ 6000A7E :                     ; 		mov	#320<<16,r7
(2) 1917/ 6000A7E :                     ; 		neg	r4,r0		; reverse Z
(2) 1918/ 6000A7E :                     ; ; 		add	#-16,r0
(2) 1919/ 6000A7E :                     ; 		cmp/pl	r0
(2) 1920/ 6000A7E :                     ; 		bt	.inside
(2) 1921/ 6000A7E :                     ; 		shlr	r7
(2) 1922/ 6000A7E :                     ;
(2) 1923/ 6000A7E :                     ; 		dmuls	r7,r2
(2) 1924/ 6000A7E :                     ; 		sts	mach,r0
(2) 1925/ 6000A7E :                     ; 		sts	macl,r2
(2) 1926/ 6000A7E :                     ; 		xtrct	r0,r2
(2) 1927/ 6000A7E :                     ; 		dmuls	r7,r3
(2) 1928/ 6000A7E :                     ; 		sts	mach,r0
(2) 1929/ 6000A7E :                     ; 		sts	macl,r3
(2) 1930/ 6000A7E :                     ; 		xtrct	r0,r3
(2) 1931/ 6000A7E :                     ; 		bra	.zmulti
(2) 1932/ 6000A7E :                     ; 		nop
(2) 1933/ 6000A7E :                     ; .inside:
(2) 1934/ 6000A7E :                     ; 		mov 	r0,@r8
(2) 1935/ 6000A7E :                     ; 		mov 	r7,@(4,r8)
(2) 1936/ 6000A7E :                     ; 		nop
(2) 1937/ 6000A7E :                     ; 		mov 	@(4,r8),r7
(2) 1938/ 6000A7E :                     ; 		dmuls	r7,r2
(2) 1939/ 6000A7E :                     ; 		sts	mach,r0
(2) 1940/ 6000A7E :                     ; 		sts	macl,r2
(2) 1941/ 6000A7E :                     ; 		xtrct	r0,r2
(2) 1942/ 6000A7E :                     ; 		dmuls	r7,r3
(2) 1943/ 6000A7E :                     ; 		sts	mach,r0
(2) 1944/ 6000A7E :                     ; 		sts	macl,r3
(2) 1945/ 6000A7E :                     ; 		xtrct	r0,r3
(2) 1946/ 6000A7E :                     ; .zmulti:
(2) 1947/ 6000A7E :                     ;
(2) 1948/ 6000A7E :                     ; 		mov	@r15+,r11
(2) 1949/ 6000A7E :                     ; 		mov	@r15+,r10
(2) 1950/ 6000A7E :                     ; 		mov	@r15+,r9
(2) 1951/ 6000A7E :                     ; 		mov	@r15+,r8
(2) 1952/ 6000A7E :                     ; 		mov	@r15+,r7
(2) 1953/ 6000A7E :                     ; 		mov	@r15+,r6
(2) 1954/ 6000A7E :                     ; 		mov	@r15+,r5
(2) 1955/ 6000A7E :                     ;
(2) 1956/ 6000A7E :                     ; 	; Set the most far points
(2) 1957/ 6000A7E :                     ; 	; for each direction (X,Y,Z)
(2) 1958/ 6000A7E :                     ; 		cmp/gt	r13,r4
(2) 1959/ 6000A7E :                     ; 		bf	.save_z2
(2) 1960/ 6000A7E :                     ; 		mov	r4,r13
(2) 1961/ 6000A7E :                     ; .save_z2:
(2) 1962/ 6000A7E :                     ; 		cmp/gt	r5,r4
(2) 1963/ 6000A7E :                     ; 		bt	.save_z
(2) 1964/ 6000A7E :                     ; 		mov	r4,r5
(2) 1965/ 6000A7E :                     ; .save_z:
(2) 1966/ 6000A7E :                     ; 		cmp/gt	r8,r2
(2) 1967/ 6000A7E :                     ; 		bf	.x_lw
(2) 1968/ 6000A7E :                     ; 		mov	r2,r8
(2) 1969/ 6000A7E :                     ; .x_lw:
(2) 1970/ 6000A7E :                     ; 		cmp/gt	r9,r2
(2) 1971/ 6000A7E :                     ; 		bt	.x_rw
(2) 1972/ 6000A7E :                     ; 		mov	r2,r9
(2) 1973/ 6000A7E :                     ; .x_rw:
(2) 1974/ 6000A7E :                     ; 		cmp/gt	r11,r3
(2) 1975/ 6000A7E :                     ; 		bf	.y_lw
(2) 1976/ 6000A7E :                     ; 		mov	r3,r11
(2) 1977/ 6000A7E :                     ; .y_lw:
(2) 1978/ 6000A7E :                     ; 		cmp/gt	r12,r3
(2) 1979/ 6000A7E :                     ; 		bt	.y_rw
(2) 1980/ 6000A7E :                     ; 		mov	r3,r12
(2) 1981/ 6000A7E :                     ; .y_rw:
(2) 1982/ 6000A7E :                     ;
(2) 1983/ 6000A7E :                     ; 		lds	@r15+,pr
(2) 1984/ 6000A7E :                     ; 		rts
(2) 1985/ 6000A7E :                     ; 		nop
(2) 1986/ 6000A7E :                     ; 		align 4
(2) 1987/ 6000A7E :                     ; 		ltorg
(2) 1988/ 6000A7E :                     ;
(2) 1989/ 6000A7E :                     ; ; ------------------------------
(2) 1990/ 6000A7E :                     ; ; Rotate point
(2) 1991/ 6000A7E :                     ; ;
(2) 1992/ 6000A7E :                     ; ; Entry:
(2) 1993/ 6000A7E :                     ; ; r5: x
(2) 1994/ 6000A7E :                     ; ; r6: y
(2) 1995/ 6000A7E :                     ; ; r0: theta
(2) 1996/ 6000A7E :                     ; ;
(2) 1997/ 6000A7E :                     ; ; Returns:
(2) 1998/ 6000A7E :                     ; ; r7: (x  cos @) + (y sin @)
(2) 1999/ 6000A7E :                     ; ; r8: (x -sin @) + (y cos @)
(2) 2000/ 6000A7E :                     ; ; ------------------------------
(2) 2001/ 6000A7E :                     ;
(2) 2002/ 6000A7E :                     ; mdlrd_rotate:
(2) 2003/ 6000A7E :                     ;     		mov	#$7FF,r7
(2) 2004/ 6000A7E :                     ;     		and	r7,r0
(2) 2005/ 6000A7E :                     ;    		shll2	r0
(2) 2006/ 6000A7E :                     ; 		mov	#sin_table,r7
(2) 2007/ 6000A7E :                     ; 		mov	#sin_table+$800,r8
(2) 2008/ 6000A7E :                     ; 		mov	@(r0,r7),r9
(2) 2009/ 6000A7E :                     ; 		mov	@(r0,r8),r10
(2) 2010/ 6000A7E :                     ;
(2) 2011/ 6000A7E :                     ; 		dmuls	r5,r10		; x cos @
(2) 2012/ 6000A7E :                     ; 		sts	macl,r7
(2) 2013/ 6000A7E :                     ; 		sts	mach,r0
(2) 2014/ 6000A7E :                     ; 		xtrct	r0,r7
(2) 2015/ 6000A7E :                     ; 		dmuls	r6,r9		; y sin @
(2) 2016/ 6000A7E :                     ; 		sts	macl,r8
(2) 2017/ 6000A7E :                     ; 		sts	mach,r0
(2) 2018/ 6000A7E :                     ; 		xtrct	r0,r8
(2) 2019/ 6000A7E :                     ; 		add	r8,r7
(2) 2020/ 6000A7E :                     ;
(2) 2021/ 6000A7E :                     ; 		neg	r9,r9
(2) 2022/ 6000A7E :                     ; 		dmuls	r5,r9		; x -sin @
(2) 2023/ 6000A7E :                     ; 		sts	macl,r8
(2) 2024/ 6000A7E :                     ; 		sts	mach,r0
(2) 2025/ 6000A7E :                     ; 		xtrct	r0,r8
(2) 2026/ 6000A7E :                     ; 		dmuls	r6,r10		; y cos @
(2) 2027/ 6000A7E :                     ; 		sts	macl,r9
(2) 2028/ 6000A7E :                     ; 		sts	mach,r0
(2) 2029/ 6000A7E :                     ; 		xtrct	r0,r9
(2) 2030/ 6000A7E :                     ; 		add	r9,r8
(2) 2031/ 6000A7E :                     ;  		rts
(2) 2032/ 6000A7E :                     ; 		nop
(2) 2033/ 6000A7E :                     ; 		align 4
(2) 2034/ 6000A7E :                     
(1)  795/ 6000A7E :                     		include "system/mars/sound.asm"
(2)    1/ 6000A7E :                     ; ====================================================================
(2)    2/ 6000A7E :                     ; ----------------------------------------------------------------
(2)    3/ 6000A7E :                     ; MARS Sound
(2)    4/ 6000A7E :                     ; ----------------------------------------------------------------
(2)    5/ 6000A7E :                     
(2)    6/ 6000A7E : =$7                 MAX_PWMCHNL	equ	7
(2)    7/ 6000A7E :                     
(2)    8/ 6000A7E :                     ; 32X sound channel
(2)    9/ 6000A7E : (MACRO)             		struct 0
(2)    9/ 6000A7E : =$6000A7E           GLBL_LASTPC     set *
(2)    9/   43D7E :                                     dephase
(2)    9/   43D7E : =$43D7E             GLBL_LASTORG    set *
(2)    9/       0 :                                     phase 0
(2)   10/       0 :                     mchnsnd_enbl	ds.l 1
(2)   11/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   12/       8 :                     mchnsnd_cchread	ds.l 1
(2)   13/       C :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   14/      10 :                     mchnsnd_start	ds.l 1
(2)   15/      14 :                     mchnsnd_end	ds.l 1
(2)   16/      18 :                     mchnsnd_loop	ds.l 1
(2)   17/      1C :                     mchnsnd_pitch	ds.l 1
(2)   18/      20 :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   19/      24 :                     mchnsnd_vol	ds.l 1
(2)   20/      28 :                     sizeof_sndchn	ds.l 0
(2)   21/      2A : (MACRO)             		finish
(2)   21/       0 :                                     !org GLBL_LASTORG
(2)   21/ 6000A7E :                                     phase GLBL_LASTPC
(2)   22/ 6000A7E :                     
(2)   23/ 6000A7E :                     ; *** PWM INTERRUPT MOVED TO SLAVE'S CACHE (see cache.asm)
(2)   24/ 6000A7E :                     ; Perfoms better in there.
(2)   25/ 6000A7E :                     
(2)   26/ 6000A7E :                     ; ====================================================================
(2)   27/ 6000A7E :                     ; ----------------------------------------------------------------
(2)   28/ 6000A7E :                     ; Subroutines
(2)   29/ 6000A7E :                     ; ----------------------------------------------------------------
(2)   30/ 6000A7E :                     
(2)   31/ 6000A7E :                     ; --------------------------------------------------------
(2)   32/ 6000A7E :                     ; Init Sound PWM
(2)   33/ 6000A7E :                     ;
(2)   34/ 6000A7E :                     ; Frequency values:
(2)   35/ 6000A7E :                     ; 23011361 NTSC
(2)   36/ 6000A7E :                     ; 22801467 PAL
(2)   37/ 6000A7E :                     ;
(2)   38/ 6000A7E :                     ; NOTE: cycle causes a CLICK to sound
(2)   39/ 6000A7E :                     ; --------------------------------------------------------
(2)   40/ 6000A7E :                     
(2)   41/ 6000A7E :                     MarsSound_Init:
(2)   42/ 6000A7E : 4F22                		sts	pr,@-r15
(2)   43/ 6000A80 : 4F13                		stc	gbr,@-r15
(2)   44/ 6000A82 : D03E                		mov	#_sysreg,r0
(2)   45/ 6000A84 : 401E                		ldc	r0,gbr
(2)   46/ 6000A86 : 908D                		mov	#$0105,r0
(2)   47/ 6000A88 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   48/ 6000A8A : 908C                		mov	#((((23011361<<1)/22050+1)>>1)+1),r0	; 22050 best
(2)   49/ 6000A8C : C119                		mov.w	r0,@(cycle,gbr)
(2)   50/ 6000A8E : E001                		mov	#1,r0
(2)   51/ 6000A90 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   52/ 6000A92 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   53/ 6000A94 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   54/ 6000A96 : E000                		mov	#0,r0
(2)   55/ 6000A98 : D139                		mov	#MarsSnd_PwmChnls,r1
(2)   56/ 6000A9A : E207                		mov	#MAX_PWMCHNL,r2
(2)   57/ 6000A9C : E328                		mov	#sizeof_sndchn,r3
(2)   58/ 6000A9E :                     .clr_enbl:
(2)   59/ 6000A9E : 1100                		mov	r0,@(mchnsnd_enbl,r1)
(2)   60/ 6000AA0 : 4210                		dt	r2
(2)   61/ 6000AA2 : 8FFC                		bf/s	.clr_enbl
(2)   62/ 6000AA4 : 313C                		add	r3,r1
(2)   63/ 6000AA6 : 4F17                		ldc	@r15+,gbr
(2)   64/ 6000AA8 : 4F26                		lds	@r15+,pr
(2)   65/ 6000AAA : 000B                		rts
(2)   66/ 6000AAC : 0009                		nop
(2)   67/ 6000AAE :                     		align 4
(2)   68/ 6000AB0 :                     
(2)   69/ 6000AB0 :                     ; --------------------------------------------------------
(2)   70/ 6000AB0 :                     ; MarsSound_SetPwm
(2)   71/ 6000AB0 :                     ;
(2)   72/ 6000AB0 :                     ; Set new sound data to a single channel
(2)   73/ 6000AB0 :                     ;
(2)   74/ 6000AB0 :                     ; Input:
(2)   75/ 6000AB0 :                     ; r1 | Channel
(2)   76/ 6000AB0 :                     ; r2 | Start address
(2)   77/ 6000AB0 :                     ; r3 | End address
(2)   78/ 6000AB0 :                     ; r4 | Loop address (ignored if loop flag isn't set)
(2)   79/ 6000AB0 :                     ; r5 | Pitch ($xxxxxx.xx)
(2)   80/ 6000AB0 :                     ; r6 | Volume
(2)   81/ 6000AB0 :                     ; r7 | Flags (Currently: %xxxxslLR)
(2)   82/ 6000AB0 :                     ;      LR - output
(2)   83/ 6000AB0 :                     ;      l - LOOP flag
(2)   84/ 6000AB0 :                     ;      s - Sample is in stereo
(2)   85/ 6000AB0 :                     ;
(2)   86/ 6000AB0 :                     ; Uses:
(2)   87/ 6000AB0 :                     ; r0,r8-r9
(2)   88/ 6000AB0 :                     ; --------------------------------------------------------
(2)   89/ 6000AB0 :                     
(2)   90/ 6000AB0 :                     MarsSound_SetPwm:
(2)   91/ 6000AB0 : D834                		mov	#MarsSnd_PwmChnls,r8
(2)   92/ 6000AB2 : E028                		mov 	#sizeof_sndchn,r0
(2)   93/ 6000AB4 : 201E                		mulu	r1,r0
(2)   94/ 6000AB6 : 001A                		sts	macl,r0
(2)   95/ 6000AB8 : 380C                		add 	r0,r8
(2)   96/ 6000ABA : E000                		mov 	#0,r0
(2)   97/ 6000ABC : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)   98/ 6000ABE :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)   99/ 6000ABE :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  100/ 6000ABE : 1857                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  101/ 6000AC0 : 1869                		mov 	r6,@(mchnsnd_vol,r8)
(2)  102/ 6000AC2 : 1878                		mov 	r7,@(mchnsnd_flags,r8)
(2)  103/ 6000AC4 : 6023                		mov 	r2,r0				; Set MSB
(2)  104/ 6000AC6 : D930                		mov 	#$FF000000,r9
(2)  105/ 6000AC8 : 2099                		and 	r9,r0
(2)  106/ 6000ACA : 1803                		mov 	r0,@(mchnsnd_bank,r8)
(2)  107/ 6000ACC : 6043                		mov 	r4,r0				; Set POINTS
(2)  108/ 6000ACE : 88FF                		cmp/eq	#-1,r0
(2)  109/ 6000AD0 : 8900                		bt	.endmrk
(2)  110/ 6000AD2 : 4018                		shll8	r0
(2)  111/ 6000AD4 :                     .endmrk:
(2)  112/ 6000AD4 : 1806                		mov	r0,@(mchnsnd_loop,r8)
(2)  113/ 6000AD6 : 6033                		mov 	r3,r0
(2)  114/ 6000AD8 : 4018                		shll8	r0
(2)  115/ 6000ADA : 1805                		mov	r0,@(mchnsnd_end,r8)
(2)  116/ 6000ADC : 6023                		mov 	r2,r0
(2)  117/ 6000ADE : 4018                		shll8	r0
(2)  118/ 6000AE0 : 1804                		mov 	r0,@(mchnsnd_start,r8)
(2)  119/ 6000AE2 : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  120/ 6000AE4 : E001                		mov 	#1,r0
(2)  121/ 6000AE6 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  122/ 6000AE8 : 000B                		rts
(2)  123/ 6000AEA : 0009                		nop
(2)  124/ 6000AEC :                     		align 4
(2)  125/ 6000AEC :                     
(2)  126/ 6000AEC :                     ; --------------------------------------------------------
(2)  127/ 6000AEC :                     ; MarsSound_MulPwmPitch
(2)  128/ 6000AEC :                     ;
(2)  129/ 6000AEC :                     ; Set pitch data to 8 consecutive sound channels
(2)  130/ 6000AEC :                     ; starting from specific slot
(2)  131/ 6000AEC :                     ;
(2)  132/ 6000AEC :                     ; Input:
(2)  133/ 6000AEC :                     ; r1 | Channel pitch slot 0
(2)  134/ 6000AEC :                     ; r2 | Pitch data
(2)  135/ 6000AEC :                     ;
(2)  136/ 6000AEC :                     ; Uses:
(2)  137/ 6000AEC :                     ; r3,r4
(2)  138/ 6000AEC :                     ; --------------------------------------------------------
(2)  139/ 6000AEC :                     
(2)  140/ 6000AEC :                     MarsSound_SetPwmPitch:
(2)  141/ 6000AEC : D827                		mov	#MarsSnd_PwmChnls,r8
(2)  142/ 6000AEE : E028                		mov 	#sizeof_sndchn,r0
(2)  143/ 6000AF0 : 201E                		mulu	r1,r0
(2)  144/ 6000AF2 : 001A                		sts	macl,r0
(2)  145/ 6000AF4 : 380C                		add 	r0,r8
(2)  146/ 6000AF6 : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  147/ 6000AF8 : 8801                		cmp/eq	#1,r0
(2)  148/ 6000AFA : 8B01                		bf	.off_1
(2)  149/ 6000AFC : 5081                		mov	@(mchnsnd_read,r8),r0
(2)  150/ 6000AFE : 1827                		mov	r2,@(mchnsnd_pitch,r8)
(2)  151/ 6000B00 :                     .off_1:
(2)  152/ 6000B00 : 000B                		rts
(2)  153/ 6000B02 : 0009                		nop
(2)  154/ 6000B04 :                     		align 4
(2)  155/ 6000B04 :                     
(2)  156/ 6000B04 :                     ; --------------------------------------------------------
(2)  157/ 6000B04 :                     ; MarsSound_SetVolume
(2)  158/ 6000B04 :                     ;
(2)  159/ 6000B04 :                     ; Input:
(2)  160/ 6000B04 :                     ; r1 | Channel pitch slot 0
(2)  161/ 6000B04 :                     ; r2 | Pitch data
(2)  162/ 6000B04 :                     ;
(2)  163/ 6000B04 :                     ; Uses:
(2)  164/ 6000B04 :                     ; r3,r4
(2)  165/ 6000B04 :                     ; --------------------------------------------------------
(2)  166/ 6000B04 :                     
(2)  167/ 6000B04 :                     MarsSound_SetVolume:
(2)  168/ 6000B04 : D822                		mov	#MarsSnd_PwmChnls,r8
(2)  169/ 6000B06 : E028                		mov 	#sizeof_sndchn,r0
(2)  170/ 6000B08 : 201E                		mulu	r1,r0
(2)  171/ 6000B0A : 001A                		sts	macl,r0
(2)  172/ 6000B0C : 380C                		add 	r0,r8
(2)  173/ 6000B0E : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  174/ 6000B10 : 8801                		cmp/eq	#1,r0
(2)  175/ 6000B12 : 8B01                		bf	.off_1
(2)  176/ 6000B14 : 6023                		mov	r2,r0
(2)  177/ 6000B16 : 1809                		mov	r0,@(mchnsnd_vol,r8)
(2)  178/ 6000B18 :                     .off_1:
(2)  179/ 6000B18 : 000B                		rts
(2)  180/ 6000B1A : 0009                		nop
(2)  181/ 6000B1C :                     		align 4
(2)  182/ 6000B1C :                     
(2)  183/ 6000B1C :                     ; --------------------------------------------------------
(2)  184/ 6000B1C :                     ; MarsSound_PwmEnable
(2)  185/ 6000B1C :                     ;
(2)  186/ 6000B1C :                     ; Turns ON or OFF Current PWM slot
(2)  187/ 6000B1C :                     ;
(2)  188/ 6000B1C :                     ; Input:
(2)  189/ 6000B1C :                     ; r1 | Slot
(2)  190/ 6000B1C :                     ; r2 | Enable/Disable
(2)  191/ 6000B1C :                     ;
(2)  192/ 6000B1C :                     ; Uses:
(2)  193/ 6000B1C :                     ; r8
(2)  194/ 6000B1C :                     ; --------------------------------------------------------
(2)  195/ 6000B1C :                     
(2)  196/ 6000B1C :                     MarsSound_PwmEnable:
(2)  197/ 6000B1C : D81D                		mov	#MarsSnd_PwmChnls,r8
(2)  198/ 6000B1E : E028                		mov 	#sizeof_sndchn,r0
(2)  199/ 6000B20 : 201E                		mulu	r1,r0
(2)  200/ 6000B22 : 001A                		sts	macl,r0
(2)  201/ 6000B24 : 380C                		add 	r0,r8
(2)  202/ 6000B26 : 1820                		mov 	r2,@(mchnsnd_enbl,r8)
(2)  203/ 6000B28 :                     ; 		mov 	#0,r0
(2)  204/ 6000B28 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  205/ 6000B28 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  206/ 6000B28 : 000B                		rts
(2)  207/ 6000B2A : 0009                		nop
(2)  208/ 6000B2C :                     		align 4
(2)  209/ 6000B2C :                     
(2)  210/ 6000B2C :                     ; --------------------------------------------------------
(2)  211/ 6000B2C :                     ; MarsSound_Refill
(2)  212/ 6000B2C :                     ;
(2)  213/ 6000B2C :                     ; Call this if MD wants to do DMA, which sets RV=1
(2)  214/ 6000B2C :                     ; starting from specific slot
(2)  215/ 6000B2C :                     ;
(2)  216/ 6000B2C :                     ; Uses:
(2)  217/ 6000B2C :                     ; r1-r8
(2)  218/ 6000B2C :                     ; --------------------------------------------------------
(2)  219/ 6000B2C :                     
(2)  220/ 6000B2C :                     ; PWM interrupt is still enabled while doing this.
(2)  221/ 6000B2C :                     
(2)  222/ 6000B2C :                     MarsSnd_Refill:
(2)  223/ 6000B2C : D81A                		mov	#MarsSnd_PwmChnls,r8
(2)  224/ 6000B2E : E607                		mov	#MAX_PWMCHNL,r6
(2)  225/ 6000B30 : E728                		mov	#sizeof_sndchn,r7
(2)  226/ 6000B32 : D51A                		mov	#MarsSnd_PwmCache,r5
(2)  227/ 6000B34 :                     .next_one:
(2)  228/ 6000B34 : 5080                		mov	@(mchnsnd_enbl,r8),r0	; Finished already?
(2)  229/ 6000B36 : 8801                		cmp/eq	#1,r0
(2)  230/ 6000B38 : 8B19                		bf	.not_enbl
(2)  231/ 6000B3A : 5083                		mov	@(mchnsnd_bank,r8),r0
(2)  232/ 6000B3C : D218                		mov	#CS1,r2
(2)  233/ 6000B3E : 3020                		cmp/eq	r2,r0
(2)  234/ 6000B40 : 8B15                		bf	.not_activ
(2)  235/ 6000B42 :                     
(2)  236/ 6000B42 : E100                		mov	#0,r1
(2)  237/ 6000B44 : 1812                		mov	r1,@(mchnsnd_cchread,r8)
(2)  238/ 6000B46 : 6153                		mov	r5,r1
(2)  239/ 6000B48 : E220                		mov	#$80/4,r2
(2)  240/ 6000B4A : 5481                		mov	@(mchnsnd_read,r8),r4	; r4 - OLD READ pos
(2)  241/ 6000B4C : 6343                		mov	r4,r3
(2)  242/ 6000B4E : 4319                		shlr8	r3
(2)  243/ 6000B50 : 330C                		add	r0,r3
(2)  244/ 6000B52 :                     .copy_now:
(2)  245/ 6000B52 : 6034                		mov.b	@r3+,r0
(2)  246/ 6000B54 : 2100                		mov.b	r0,@r1
(2)  247/ 6000B56 : 7101                		add	#1,r1
(2)  248/ 6000B58 : 6034                		mov.b	@r3+,r0
(2)  249/ 6000B5A : 2100                		mov.b	r0,@r1
(2)  250/ 6000B5C : 7101                		add	#1,r1
(2)  251/ 6000B5E : 6034                		mov.b	@r3+,r0
(2)  252/ 6000B60 : 2100                		mov.b	r0,@r1
(2)  253/ 6000B62 : 7101                		add	#1,r1
(2)  254/ 6000B64 : 6034                		mov.b	@r3+,r0
(2)  255/ 6000B66 : 2100                		mov.b	r0,@r1
(2)  256/ 6000B68 : 4210                		dt	r2
(2)  257/ 6000B6A : 8FF2                		bf/s	.copy_now
(2)  258/ 6000B6C : 7101                		add	#1,r1
(2)  259/ 6000B6E :                     
(2)  260/ 6000B6E :                     ; 		mov	#0,r1
(2)  261/ 6000B6E :                     ; 		mov	@(mchnsnd_enbl,r8),r0	; Finished already?
(2)  262/ 6000B6E :                     ; 		cmp/eq	#1,r0
(2)  263/ 6000B6E :                     ; 		bf	.got_low
(2)  264/ 6000B6E :                     ; 		mov	@(mchnsnd_read,r8),r1
(2)  265/ 6000B6E :                     ; 		sub	r4,r1
(2)  266/ 6000B6E :                     ; .got_low:
(2)  267/ 6000B6E :                     ; 		mov	r1,@(mchnsnd_cchread,r8)
(2)  268/ 6000B6E :                     .not_enbl:
(2)  269/ 6000B6E :                     
(2)  270/ 6000B6E :                     ; 		mov	#_DMASOURCE0,r1
(2)  271/ 6000B6E :                     ; 		mov	#_DMAOPERATION,r2
(2)  272/ 6000B6E :                     ; 		mov	r0,@r1			; set source address
(2)  273/ 6000B6E :                     ; 		add	#4,r1
(2)  274/ 6000B6E :                     ; 		mov	r5,@r1			; set destination address
(2)  275/ 6000B6E :                     ; 		add	#4,r1
(2)  276/ 6000B6E :                     ; 		mov	#$100,r0
(2)  277/ 6000B6E :                     ; 		mov	r0,@r1			; set length
(2)  278/ 6000B6E :                     ; 		add	#4,r1
(2)  279/ 6000B6E :                     ; 		mov	#0,r0
(2)  280/ 6000B6E :                     ; 		mov	r0,@r2			; Stop OPERATION
(2)  281/ 6000B6E :                     ; 		xor	r0,r0
(2)  282/ 6000B6E :                     ; 		mov	r0,@r1			; clear TE bit
(2)  283/ 6000B6E :                     ; 		mov	#%0101001011100001,r0	; transfer mode bits, ON
(2)  284/ 6000B6E :                     ; 		mov	r0,@r1			; load mode
(2)  285/ 6000B6E :                     ; 		stc	sr,@-r15
(2)  286/ 6000B6E :                     ; 		mov	#$F0,r0
(2)  287/ 6000B6E :                     ; 		ldc	r0,sr
(2)  288/ 6000B6E :                     ; 		mov	#1,r0
(2)  289/ 6000B6E :                     ; 		mov	r0,@r2			; Start OPERATION
(2)  290/ 6000B6E :                     ; .wait_dma:
(2)  291/ 6000B6E :                     ; 		mov	@r1,r0
(2)  292/ 6000B6E :                     ; 		and	#%10,r0
(2)  293/ 6000B6E :                     ; 		tst	r0,r0
(2)  294/ 6000B6E :                     ; 		bt	.wait_dma
(2)  295/ 6000B6E :                     ; 		ldc	@r15+,sr
(2)  296/ 6000B6E :                     ; 		mov	@r1,r0
(2)  297/ 6000B6E :                     ; 		mov	#-1,r2
(2)  298/ 6000B6E :                     ; 		and	r2,r0
(2)  299/ 6000B6E :                     ; 		mov	r0,@r1
(2)  300/ 6000B6E :                     .not_activ:
(2)  301/ 6000B6E : 901B                		mov	#$80,r0
(2)  302/ 6000B70 : 350C                		add	r0,r5
(2)  303/ 6000B72 : 4610                		dt	r6
(2)  304/ 6000B74 : 8FDE                		bf/s	.next_one
(2)  305/ 6000B76 : 387C                		add	r7,r8
(2)  306/ 6000B78 : 000B                		rts
(2)  307/ 6000B7A : 0009                		nop
(2)  308/ 6000B7C :                     		align 4
(2)  309/ 6000B7C : 2000 4000 0600 A918 		ltorg
                    0600 A918 FF00 0000 
                    0600 A918 0600 A918 
                    0600 A918 0600 A918 
                    C000 0000 0200 0000 
                    0105 0415 0080      
(2)  310/ 6000BAA :                     
(2)  311/ 6000BAA :                     ; 		mov 	#sizeof_sndchn,r0
(2)  312/ 6000BAA :                     ; 		mulu	r1,r0
(2)  313/ 6000BAA :                     ; 		sts	macl,r0
(2)  314/ 6000BAA :                     ; 		add 	r0,r8
(2)  315/ 6000BAA :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  316/ 6000BAA :                     ; 		cmp/eq	#1,r0
(2)  317/ 6000BAA :                     ; 		bf	.off_1
(2)  318/ 6000BAA :                     ; ; 		mov	@(mchnsnd_read,r8),r0
(2)  319/ 6000BAA :                     ; 		mov	r2,@(mchnsnd_pitch,r8)
(2)  320/ 6000BAA :                     ; .off_1:
(2)  321/ 6000BAA :                     ; ; 		ldc	@r15+,sr
(2)  322/ 6000BAA :                     ; 		rts
(2)  323/ 6000BAA :                     ; 		nop
(2)  324/ 6000BAA :                     ; 		align 4
(2)  325/ 6000BAA :                     
(2)  326/ 6000BAA :                     ; ====================================================================
(2)  327/ 6000BAA :                     
(2)  328/ 6000BAA :                     		ltorg			; Save literals
(2)  329/ 6000BAA :                     
(1)  796/ 6000BAA :                     		align 4
(1)  797/ 6000BAC :                     
(1)  798/ 6000BAC :                     ; ====================================================================
(1)  799/ 6000BAC :                     ; ----------------------------------------------------------------
(1)  800/ 6000BAC :                     ; Master entry
(1)  801/ 6000BAC :                     ; ----------------------------------------------------------------
(1)  802/ 6000BAC :                     
(1)  803/ 6000BAC :                     		align 4
(1)  804/ 6000BAC :                     SH2_M_Entry:
(1)  805/ 6000BAC : DF22                		mov	#CS3|$40000,r15			; Set default Stack for Master
(1)  806/ 6000BAE : 9155                		mov	#_FRT,r1
(1)  807/ 6000BB0 : E000                		mov     #0,r0
(1)  808/ 6000BB2 : 8010                		mov.b   r0,@(0,r1)
(1)  809/ 6000BB4 : E0E2                		mov     #$FFFFFFE2,r0
(1)  810/ 6000BB6 : 8017                		mov.b   r0,@(7,r1)
(1)  811/ 6000BB8 : E000                		mov     #0,r0
(1)  812/ 6000BBA : 8014                		mov.b   r0,@(4,r1)
(1)  813/ 6000BBC : E001                		mov     #1,r0
(1)  814/ 6000BBE : 8015                		mov.b   r0,@(5,r1)
(1)  815/ 6000BC0 : E000                		mov     #0,r0
(1)  816/ 6000BC2 : 8016                		mov.b   r0,@(6,r1)
(1)  817/ 6000BC4 : E001                		mov     #1,r0
(1)  818/ 6000BC6 : 8011                		mov.b   r0,@(1,r1)
(1)  819/ 6000BC8 : E000                		mov     #0,r0
(1)  820/ 6000BCA : 8013                		mov.b   r0,@(3,r1)
(1)  821/ 6000BCC : 8012                		mov.b   r0,@(2,r1)
(1)  822/ 6000BCE : 9046                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1)  823/ 6000BD0 : E150                		mov     #%0101<<4,r1
(1)  824/ 6000BD2 : 2011                		mov.w   r1,@r0
(1)  825/ 6000BD4 : 9044                		mov.l   #$FFFFFEE4,r0
(1)  826/ 6000BD6 : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1)  827/ 6000BD8 : 4118                		shll8   r1
(1)  828/ 6000BDA : 2011                		mov.w   r1,@r0
(1)  829/ 6000BDC :                     
(1)  830/ 6000BDC :                     ; ------------------------------------------------
(1)  831/ 6000BDC :                     ; Wait for Genesis and Slave CPU
(1)  832/ 6000BDC :                     ; ------------------------------------------------
(1)  833/ 6000BDC :                     
(1)  834/ 6000BDC :                     .wait_md:
(1)  835/ 6000BDC : D217                		mov 	#_sysreg+comm0,r2		; Wait for Genesis
(1)  836/ 6000BDE : 6022                		mov.l	@r2,r0
(1)  837/ 6000BE0 : 8800                		cmp/eq	#0,r0
(1)  838/ 6000BE2 : 8BFB                		bf	.wait_md
(1)  839/ 6000BE4 : D116                		mov.l	#"SLAV",r1
(1)  840/ 6000BE6 :                     .wait_slave:
(1)  841/ 6000BE6 : 5022                		mov.l	@(8,r2),r0			; Wait for Slave CPU to finish booting
(1)  842/ 6000BE8 : 3010                		cmp/eq	r1,r0
(1)  843/ 6000BEA : 8BFC                		bf	.wait_slave
(1)  844/ 6000BEC : E000                		mov	#0,r0				; clear "SLAV"
(1)  845/ 6000BEE : 1202                		mov	r0,@(8,r2)
(1)  846/ 6000BF0 : 2202                		mov	r0,@r2
(1)  847/ 6000BF2 :                     
(1)  848/ 6000BF2 :                     ; ====================================================================
(1)  849/ 6000BF2 :                     ; ----------------------------------------------------------------
(1)  850/ 6000BF2 :                     ; Master main code
(1)  851/ 6000BF2 :                     ;
(1)  852/ 6000BF2 :                     ; This CPU is exclusively used for visual tasks:
(1)  853/ 6000BF2 :                     ; Polygons, Sprites, Backgrounds...
(1)  854/ 6000BF2 :                     ;
(1)  855/ 6000BF2 :                     ; To interact with the models use the Slave CPU and request
(1)  856/ 6000BF2 :                     ; a drawing task there
(1)  857/ 6000BF2 :                     ; ----------------------------------------------------------------
(1)  858/ 6000BF2 :                     
(1)  859/ 6000BF2 :                     SH2_M_HotStart:
(1)  860/ 6000BF2 : DF11                		mov	#CS3|$40000,r15			; Stack again if coming from RESET
(1)  861/ 6000BF4 : DE13                		mov	#RAM_Mars_Global,r14		; GBR - Global values/variables go here.
(1)  862/ 6000BF6 : 4E1E                		ldc	r14,gbr
(1)  863/ 6000BF8 : 9033                		mov	#$F0,r0				; Interrupts OFF
(1)  864/ 6000BFA : 400E                		ldc	r0,sr
(1)  865/ 6000BFC : 9132                		mov.l	#_CCR,r1
(1)  866/ 6000BFE : E008                		mov	#%00001000,r0			; Cache OFF
(1)  867/ 6000C00 : 2101                		mov.w	r0,@r1
(1)  868/ 6000C02 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1)  869/ 6000C04 : 2101                		mov.w	r0,@r1
(1)  870/ 6000C06 : D110                		mov	#_sysreg,r1
(1)  871/ 6000C08 : E008                		mov	#VIRQ_ON,r0			; Enable usage of these interrupts
(1)  872/ 6000C0A : 8011                    		mov.b	r0,@(intmask,r1)		; (Watchdog is external)
(1)  873/ 6000C0C : D10F                		mov 	#CACHE_MASTER,r1		; Transfer Master's fast-code to CACHE
(1)  874/ 6000C0E : D210                		mov 	#$C0000000,r2
(1)  875/ 6000C10 : 9329                		mov 	#(CACHE_MASTER_E-CACHE_MASTER)/4,r3
(1)  876/ 6000C12 :                     .copy:
(1)  877/ 6000C12 : 6016                		mov 	@r1+,r0
(1)  878/ 6000C14 : 2202                		mov 	r0,@r2
(1)  879/ 6000C16 : 7204                		add 	#4,r2
(1)  880/ 6000C18 : 4310                		dt	r3
(1)  881/ 6000C1A : 8BFA                		bf	.copy
(1)  882/ 6000C1C : D00D                		mov	#MarsVideo_Init,r0		; Init Video
(1)  883/ 6000C1E : 400B                		jsr	@r0
(1)  884/ 6000C20 : 0009                		nop
(1)  885/ 6000C22 : E000                		mov	#0,r0
(1)  886/ 6000C24 : C12C                		mov.w	r0,@(marsGbl_CurrGfxMode,gbr)
(1)  887/ 6000C26 :                     
(1)  888/ 6000C26 : D10C                		mov	#_sysreg+comm14,r1
(1)  889/ 6000C28 : 6010                .lel:		mov.b	@r1,r0
(1)  890/ 6000C2A : 4011                		cmp/pz	r0
(1)  891/ 6000C2C : 89FC                		bt	.lel
(1)  892/ 6000C2E :                     
(1)  893/ 6000C2E : E020                		mov.l	#$20,r0				; Interrupts ON
(1)  894/ 6000C30 : 400E                		ldc	r0,sr
(1)  895/ 6000C32 : A019                		bra	master_loop
(1)  896/ 6000C34 : 0009                		nop
(1)  897/ 6000C36 :                     		align 4
(1)  898/ 6000C38 : 0604 0000 2000 4020 		ltorg
                    534C 4156 0600 46F0 
                    2000 4000 0600 15CC 
                    C000 0000 0600 05F2 
                    2000 402E FE10 FEE2 
                    FEE4 00F0 FE92 0118 
(1)  899/ 6000C68 :                     
(1)  900/ 6000C68 :                     ; ---------------------------------------
(1)  901/ 6000C68 :                     
(1)  902/ 6000C68 :                     master_loop:
(1)  903/ 6000C68 :                     ; 		mov	#_sysreg+comm0,r1
(1)  904/ 6000C68 :                     ; 		mov.w	@r1,r0
(1)  905/ 6000C68 :                     ; 		add	#1,r0
(1)  906/ 6000C68 :                     ; 		mov.w	r0,@r1
(1)  907/ 6000C68 :                     
(1)  908/ 6000C68 : C52C                		mov.w	@(marsGbl_CurrGfxMode,gbr),r0
(1)  909/ 6000C6A : 6103                		mov	r0,r1
(1)  910/ 6000C6C : 6013                		mov	r1,r0
(1)  911/ 6000C6E : C980                		and	#$80,r0
(1)  912/ 6000C70 : 8800                		cmp/eq	#0,r0
(1)  913/ 6000C72 : 8B15                		bf	mstr_gfx1_loop
(1)  914/ 6000C74 : 6013                		mov	r1,r0
(1)  915/ 6000C76 : CB80                		or	#$80,r0
(1)  916/ 6000C78 : C12C                		mov.w	r0,@(marsGbl_CurrGfxMode,gbr)
(1)  917/ 6000C7A :                     
(1)  918/ 6000C7A : 90C1                		mov	#240,r0
(1)  919/ 6000C7C : C133                		mov.w	r0,@(marsGbl_FbMaxLines,gbr)
(1)  920/ 6000C7E : D150                		mov	#TESTMARS_BG,r1			; SET image
(1)  921/ 6000C80 : 92BF                		mov	#320,r2
(1)  922/ 6000C82 : 93BD                		mov	#240,r3
(1)  923/ 6000C84 : BE9A                		bsr	MarsVideo_SetBg
(1)  924/ 6000C86 : 0009                		nop
(1)  925/ 6000C88 : D14E                		mov	#TESTMARS_BG_PAL,r1		; Load palette
(1)  926/ 6000C8A : E200                		mov	#0,r2
(1)  927/ 6000C8C : 93BA                		mov	#256,r3
(1)  928/ 6000C8E : E400                		mov	#$0000,r4
(1)  929/ 6000C90 : D04D                		mov	#MarsVideo_LoadPal,r0
(1)  930/ 6000C92 : 400B                		jsr	@r0
(1)  931/ 6000C94 : 0009                		nop
(1)  932/ 6000C96 : E002                		mov	#2,r0				; Request full draw on loop
(1)  933/ 6000C98 : C128                		mov.w	r0,@(marsGbl_Bg_DrwReqFull,gbr)
(1)  934/ 6000C9A : D14C                		mov 	#_vdpreg,r1
(1)  935/ 6000C9C : E001                		mov	#1,r0
(1)  936/ 6000C9E : 8011                		mov.b	r0,@(bitmapmd,r1)
(1)  937/ 6000CA0 :                     
(1)  938/ 6000CA0 :                     ; ---------------------------------------
(1)  939/ 6000CA0 :                     ; Mode0 loop
(1)  940/ 6000CA0 :                     ; ---------------------------------------
(1)  941/ 6000CA0 :                     
(1)  942/ 6000CA0 :                     mstr_gfx1_loop:
(1)  943/ 6000CA0 : C462                		mov.b	@(marsGbl_CurrFb,gbr),r0
(1)  944/ 6000CA2 : 6303                		mov	r0,r3
(1)  945/ 6000CA4 : D449                		mov	#_vdpreg,r4			; Wait if frameswap is done
(1)  946/ 6000CA6 : 844B                .wait_frmswp:	mov.b	@(framectl,r4),r0
(1)  947/ 6000CA8 : 3300                		cmp/eq	r0,r3
(1)  948/ 6000CAA : 8BFC                		bf	.wait_frmswp
(1)  949/ 6000CAC : C516                 		mov.w	@(marsGbl_Bg_XShift,gbr),r0	; Set SHIFT bit first
(1)  950/ 6000CAE : D148                		mov	#_vdpreg+shift,r1
(1)  951/ 6000CB0 : C901                		and	#1,r0
(1)  952/ 6000CB2 : 2101                		mov.w	r0,@r1				; Write OLD value & 1
(1)  953/ 6000CB4 :                     
(1)  954/ 6000CB4 : C528                		mov.w	@(marsGbl_Bg_DrwReqFull,gbr),r0
(1)  955/ 6000CB6 : 4015                		cmp/pl	r0
(1)  956/ 6000CB8 : 8B03                		bf	.no_redraw
(1)  957/ 6000CBA : 4010                		dt	r0
(1)  958/ 6000CBC : C128                		mov.w	r0,@(marsGbl_Bg_DrwReqFull,gbr)
(1)  959/ 6000CBE : BE1B                		bsr	MarsVideo_DrawAllBg
(1)  960/ 6000CC0 : 0009                		nop
(1)  961/ 6000CC2 :                     .no_redraw:
(1)  962/ 6000CC2 :                     ; 		mov.w	@(marsGbl_MstrReqDraw,gbr),r0
(1)  963/ 6000CC2 :                     ; 		cmp/eq	#0,r0
(1)  964/ 6000CC2 :                     ; 		bt	.no_num
(1)  965/ 6000CC2 :                     ; 		mov	@(marsGbl_BgData,gbr),r0	; Background data?
(1)  966/ 6000CC2 :                     ; 		cmp/pl	r0
(1)  967/ 6000CC2 :                     ; 		bf	.no_num				; No BG: swap only
(1)  968/ 6000CC2 :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1)  969/ 6000CC2 :                     ; 		tst     #1,r0				; Check for which buffer to use
(1)  970/ 6000CC2 :                     ; 		bt	.p2_rfl
(1)  971/ 6000CC2 :                     ; 		mov 	#RAM_Mars_Plgn_ZList_0,r14
(1)  972/ 6000CC2 :                     ; 		mov	#RAM_Mars_PlgnNum_0,r13
(1)  973/ 6000CC2 :                     ; 		bra	.go_rfll
(1)  974/ 6000CC2 :                     ; 		nop
(1)  975/ 6000CC2 :                     ; .p2_rfl:
(1)  976/ 6000CC2 :                     ; 		mov 	#RAM_Mars_Plgn_ZList_1,r14
(1)  977/ 6000CC2 :                     ; 		mov	#RAM_Mars_PlgnNum_1,r13
(1)  978/ 6000CC2 :                     ; 		nop
(1)  979/ 6000CC2 :                     ; 		nop
(1)  980/ 6000CC2 :                     ; .go_rfll:
(1)  981/ 6000CC2 :                     ; 		mov.w	@r13,r13			; r13 - get numof_plgn
(1)  982/ 6000CC2 :                     ; 		cmp/pl	r13
(1)  983/ 6000CC2 :                     ; 		bf	.no_num
(1)  984/ 6000CC2 :                     ; .nxt_rfll:
(1)  985/ 6000CC2 :                     ; 		mov	@r14,r12			; Get location of the polygon
(1)  986/ 6000CC2 :                     ; 		cmp/pl	r12
(1)  987/ 6000CC2 :                     ; 		bf	.badp
(1)  988/ 6000CC2 :                     ; 		mov	r12,r11
(1)  989/ 6000CC2 :                     ; 		add	#polygn_points,r11
(1)  990/ 6000CC2 :                     ; 		mov	r12,r0
(1)  991/ 6000CC2 :                     ; 		mov	@(polygn_type,r12),r0
(1)  992/ 6000CC2 :                     ; 		shlr16	r0
(1)  993/ 6000CC2 :                     ; 		shlr8	r0
(1)  994/ 6000CC2 :                     ; 		mov	#3,r7
(1)  995/ 6000CC2 :                     ; 		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(1)  996/ 6000CC2 :                     ; 		bf	.tringl
(1)  997/ 6000CC2 :                     ; 		add	#1,r7
(1)  998/ 6000CC2 :                     ; .tringl:
(1)  999/ 6000CC2 :                     ; 		mov	r7,r6
(1) 1000/ 6000CC2 :                     ; 		mov	#0,r1		; r1 - X left
(1) 1001/ 6000CC2 :                     ; 		mov	#0,r2		; r2 - X right
(1) 1002/ 6000CC2 :                     ; 		mov 	r11,r8
(1) 1003/ 6000CC2 :                     ; 		mov	r11,r9
(1) 1004/ 6000CC2 :                     ; .find_x:
(1) 1005/ 6000CC2 :                     ; 		mov.w	@r8,r0
(1) 1006/ 6000CC2 :                     ; 		cmp/gt	r2,r0
(1) 1007/ 6000CC2 :                     ; 		bf	.xis_low
(1) 1008/ 6000CC2 :                     ; 		mov 	r0,r2
(1) 1009/ 6000CC2 :                     ; .xis_low:
(1) 1010/ 6000CC2 :                     ; 		mov.w	@r9,r0
(1) 1011/ 6000CC2 :                     ; 		cmp/gt	r1,r0
(1) 1012/ 6000CC2 :                     ; 		bt	.xis_high
(1) 1013/ 6000CC2 :                     ; 		mov 	r0,r1
(1) 1014/ 6000CC2 :                     ; .xis_high:
(1) 1015/ 6000CC2 :                     ; 		add 	#4,r8
(1) 1016/ 6000CC2 :                     ; 		dt	r7
(1) 1017/ 6000CC2 :                     ; 		bf/s	.find_x
(1) 1018/ 6000CC2 :                     ; 		add	#4,r9
(1) 1019/ 6000CC2 :                     ; 		mov	#0,r3	; r3 - Y up
(1) 1020/ 6000CC2 :                     ; 		mov	#0,r4	; r4 - Y down
(1) 1021/ 6000CC2 :                     ; 		mov 	r11,r8
(1) 1022/ 6000CC2 :                     ; 		mov	r11,r9
(1) 1023/ 6000CC2 :                     ; .find_top:
(1) 1024/ 6000CC2 :                     ; 		mov.w	@(2,r8),r0
(1) 1025/ 6000CC2 :                     ; 		cmp/gt	r4,r0
(1) 1026/ 6000CC2 :                     ; 		bf	.is_low
(1) 1027/ 6000CC2 :                     ; 		mov 	r0,r4
(1) 1028/ 6000CC2 :                     ; .is_low:
(1) 1029/ 6000CC2 :                     ; 		mov.w	@(2,r9),r0
(1) 1030/ 6000CC2 :                     ; 		cmp/gt	r3,r0
(1) 1031/ 6000CC2 :                     ; 		bt	.is_high
(1) 1032/ 6000CC2 :                     ; 		mov 	r0,r3
(1) 1033/ 6000CC2 :                     ; .is_high:
(1) 1034/ 6000CC2 :                     ; 		add 	#4,r8
(1) 1035/ 6000CC2 :                     ; 		dt	r6
(1) 1036/ 6000CC2 :                     ; 		bf/s	.find_top
(1) 1037/ 6000CC2 :                     ; 		add	#4,r9
(1) 1038/ 6000CC2 :                     ; 		mov	#SCREEN_WIDTH/2,r0		; Set as direct positions
(1) 1039/ 6000CC2 :                     ; 		add	r0,r1
(1) 1040/ 6000CC2 :                     ; 		add	r0,r2
(1) 1041/ 6000CC2 :                     ; 		mov	#SCREEN_HEIGHT/2,r0
(1) 1042/ 6000CC2 :                     ; 		add	r0,r3
(1) 1043/ 6000CC2 :                     ; 		add	r0,r4
(1) 1044/ 6000CC2 :                     ; 		add	#-(MSCRL_BLKSIZE/2),r1		; Increment box l/r/u/d
(1) 1045/ 6000CC2 :                     ; 		add	#(MSCRL_BLKSIZE/2),r2
(1) 1046/ 6000CC2 :                     ; 		add	#-(MSCRL_BLKSIZE/2),r3
(1) 1047/ 6000CC2 :                     ; 		bsr	mstr_bgfill
(1) 1048/ 6000CC2 :                     ; 		add	#(MSCRL_BLKSIZE/2),r4
(1) 1049/ 6000CC2 :                     ; .badp:
(1) 1050/ 6000CC2 :                     ; 		dt	r13
(1) 1051/ 6000CC2 :                     ; 		bf/s	.nxt_rfll
(1) 1052/ 6000CC2 :                     ; 		add	#4,r14
(1) 1053/ 6000CC2 :                     ; .no_num:
(1) 1054/ 6000CC2 :                     ; 		mov.w	@(marsGbl_PlgnBuffNum,gbr),r0	; Swap polygon buffer
(1) 1055/ 6000CC2 :                     ;  		xor	#1,r0
(1) 1056/ 6000CC2 :                     ;  		mov.w	r0,@(marsGbl_PlgnBuffNum,gbr)
(1) 1057/ 6000CC2 :                     ; .no_req:
(1) 1058/ 6000CC2 :                     
(1) 1059/ 6000CC2 :                     ; 		mov	#rot_angle_2,r1
(1) 1060/ 6000CC2 :                     ; 		mov	@r1,r2
(1) 1061/ 6000CC2 :                     ; 		mov	r2,r4
(1) 1062/ 6000CC2 :                     ; 		mov	#$7FF,r3
(1) 1063/ 6000CC2 :                     ; 		add	#1,r4		; wave speed
(1) 1064/ 6000CC2 :                     ; 		and	r3,r4
(1) 1065/ 6000CC2 :                     ; 		mov	r4,@r1
(1) 1066/ 6000CC2 :                     ; 		mov	r2,r0
(1) 1067/ 6000CC2 :                     ; 		shll2	r0
(1) 1068/ 6000CC2 :                     ; 		mov	#sin_table,r3
(1) 1069/ 6000CC2 :                     ; 		mov	#sin_table+$800,r4
(1) 1070/ 6000CC2 :                     ; 		mov	@(r0,r3),r5
(1) 1071/ 6000CC2 :                     ; 		mov	@(r0,r4),r6
(1) 1072/ 6000CC2 :                     ;
(1) 1073/ 6000CC2 :                     ; 		mov	#640,r0		; wave max X
(1) 1074/ 6000CC2 :                     ; 		dmuls	r0,r5
(1) 1075/ 6000CC2 :                     ; 		sts	macl,r5
(1) 1076/ 6000CC2 :                     ; 		dmuls	r0,r6
(1) 1077/ 6000CC2 :                     ; 		sts	macl,r6
(1) 1078/ 6000CC2 :                     
(1) 1079/ 6000CC2 :                     ; 		mov	#0,r1
(1) 1080/ 6000CC2 :                     ; 		mov.w	@(marsGbl_Bg_DrwReqR,gbr),r0
(1) 1081/ 6000CC2 :                     ; 		or	r0,r1
(1) 1082/ 6000CC2 :                     ; 		mov.w	@(marsGbl_Bg_DrwReqL,gbr),r0
(1) 1083/ 6000CC2 :                     ; 		or	r0,r1
(1) 1084/ 6000CC2 :                     ; 		mov.w	@(marsGbl_Bg_DrwReqU,gbr),r0
(1) 1085/ 6000CC2 :                     ; 		or	r0,r1
(1) 1086/ 6000CC2 :                     ; 		mov.w	@(marsGbl_Bg_DrwReqD,gbr),r0
(1) 1087/ 6000CC2 :                     ; 		or	r0,r1
(1) 1088/ 6000CC2 :                     ; 		cmp/pl	r1
(1) 1089/ 6000CC2 :                     ; 		bt	.calm_down
(1) 1090/ 6000CC2 :                     
(1) 1091/ 6000CC2 :                     ; 		mov	#(640/2)*16,r0
(1) 1092/ 6000CC2 :                     ; 		mov	r5,r0
(1) 1093/ 6000CC2 :                     ; 		add	r5,r0
(1) 1094/ 6000CC2 :                     ; 		mov	#$8000,r1
(1) 1095/ 6000CC2 :                     ; 		mov	@(marsGbl_Bg_Xpos,gbr),r0
(1) 1096/ 6000CC2 :                     ; 		add	r1,r0
(1) 1097/ 6000CC2 :                     ; 		mov	r0,@(marsGbl_Bg_Xpos,gbr)
(1) 1098/ 6000CC2 :                     ; 		mov	r6,r0
(1) 1099/ 6000CC2 :                     ; 		mov	@(marsGbl_Bg_Ypos,gbr),r0
(1) 1100/ 6000CC2 :                     ; 		add	r1,r0
(1) 1101/ 6000CC2 :                     ; 		mov	r0,@(marsGbl_Bg_Ypos,gbr)
(1) 1102/ 6000CC2 :                     
(1) 1103/ 6000CC2 : D144                		mov	#$8000,r1
(1) 1104/ 6000CC4 : C608                		mov	@(marsGbl_Bg_Xpos,gbr),r0
(1) 1105/ 6000CC6 : 301C                		add	r1,r0
(1) 1106/ 6000CC8 : C208                		mov	r0,@(marsGbl_Bg_Xpos,gbr)
(1) 1107/ 6000CCA : D142                		mov	#$8000,r1
(1) 1108/ 6000CCC : C609                		mov	@(marsGbl_Bg_Ypos,gbr),r0
(1) 1109/ 6000CCE : 301C                		add	r1,r0
(1) 1110/ 6000CD0 : C209                		mov	r0,@(marsGbl_Bg_Ypos,gbr)
(1) 1111/ 6000CD2 :                     .calm_down:
(1) 1112/ 6000CD2 :                     
(1) 1113/ 6000CD2 :                     	; ---------------------------------------
(1) 1114/ 6000CD2 :                     	; Read 3rd-layer scroll values
(1) 1115/ 6000CD2 :                     	; ---------------------------------------
(1) 1116/ 6000CD2 :                     
(1) 1117/ 6000CD2 : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1118/ 6000CD4 : 8800                		cmp/eq	#0,r0
(1) 1119/ 6000CD6 : 8903                		bt	.no_scrldata
(1) 1120/ 6000CD8 : B1F5                		bsr	mstr_movebg
(1) 1121/ 6000CDA : 0009                		nop
(1) 1122/ 6000CDC : B270                		bsr	mstr_setreq1
(1) 1123/ 6000CDE : 0009                		nop
(1) 1124/ 6000CE0 :                     .no_scrldata:
(1) 1125/ 6000CE0 :                     
(1) 1126/ 6000CE0 :                     	; ---------------------------------------
(1) 1127/ 6000CE0 :                     	; Write linetable to current framebuffer
(1) 1128/ 6000CE0 :                     	; ---------------------------------------
(1) 1129/ 6000CE0 :                     
(1) 1130/ 6000CE0 : D13D                		mov	#rot_angle,r1
(1) 1131/ 6000CE2 : 6212                		mov	@r1,r2
(1) 1132/ 6000CE4 : 6423                		mov	r2,r4
(1) 1133/ 6000CE6 : 938E                		mov	#$7FF,r3
(1) 1134/ 6000CE8 : 7410                		add	#16,r4		; wave speed
(1) 1135/ 6000CEA : 2439                		and	r3,r4
(1) 1136/ 6000CEC : 2142                		mov	r4,@r1
(1) 1137/ 6000CEE :                     
(1) 1138/ 6000CEE : E300                		mov	#0,r3
(1) 1139/ 6000CF0 : E400                		mov	#0,r4
(1) 1140/ 6000CF2 : DA3A                		mov	#_framebuffer,r10
(1) 1141/ 6000CF4 : 9888                		mov	#$200,r8			; TOP FB position
(1) 1142/ 6000CF6 : D73A                		mov	#(MSCRL_WIDTH*MSCRL_HEIGHT),r7	; Last line point
(1) 1143/ 6000CF8 : C51D                		mov.w	@(marsGbl_Bg_YFbPos_U,gbr),r0
(1) 1144/ 6000CFA : 9686                		mov	#MSCRL_WIDTH,r6
(1) 1145/ 6000CFC : 206E                		mulu	r6,r0
(1) 1146/ 6000CFE : 051A                		sts	macl,r5
(1) 1147/ 6000D00 : C606                		mov	@(marsGbl_Bg_FbBase,gbr),r0
(1) 1148/ 6000D02 : 6103                		mov	r0,r1
(1) 1149/ 6000D04 : 6913                		mov	r1,r9
(1) 1150/ 6000D06 : 395C                		add	r5,r9
(1) 1151/ 6000D08 : C533                		mov.w	@(marsGbl_FbMaxLines,gbr),r0	; Number of lines to show
(1) 1152/ 6000D0A : 6503                		mov	r0,r5
(1) 1153/ 6000D0C :                     .ln_loop:
(1) 1154/ 6000D0C : 937B                		mov	#$7FF,r3
(1) 1155/ 6000D0E : 6023                		mov	r2,r0
(1) 1156/ 6000D10 : 7210                		add	#16,r2		; wave distord
(1) 1157/ 6000D12 : 2239                		and	r3,r2
(1) 1158/ 6000D14 : 4008                		shll2	r0
(1) 1159/ 6000D16 : D333                		mov	#sin_table,r3
(1) 1160/ 6000D18 : 043E                		mov	@(r0,r3),r4
(1) 1161/ 6000D1A : E008                		mov	#8,r0		; wave max X
(1) 1162/ 6000D1C : 340D                		dmuls	r0,r4
(1) 1163/ 6000D1E : 041A                		sts	macl,r4
(1) 1164/ 6000D20 : 4429                		shlr16	r4
(1) 1165/ 6000D22 : 644F                		exts.w	r4,r4
(1) 1166/ 6000D24 :                     
(1) 1167/ 6000D24 : 6193                		mov	r9,r1
(1) 1168/ 6000D26 : 3173                		cmp/ge	r7,r1
(1) 1169/ 6000D28 : 8B00                		bf	.xl_r
(1) 1170/ 6000D2A : 3178                		sub	r7,r1
(1) 1171/ 6000D2C :                     .xl_r:
(1) 1172/ 6000D2C : 4111                		cmp/pz	r1
(1) 1173/ 6000D2E : 8900                		bt	.xl_l
(1) 1174/ 6000D30 : 317C                		add	r7,r1
(1) 1175/ 6000D32 :                     .xl_l:
(1) 1176/ 6000D32 : 6913                		mov	r1,r9
(1) 1177/ 6000D34 : 396C                		add	r6,r9		; Add Y
(1) 1178/ 6000D36 : 318C                		add	r8,r1		; Add FB base pos
(1) 1179/ 6000D38 : 4101                		shlr	r1		; divide by 2 (shift reg does the missing bit 0)
(1) 1180/ 6000D3A : 314C                		add	r4,r1
(1) 1181/ 6000D3C : 2A11                		mov.w	r1,@r10		; send to FB's table
(1) 1182/ 6000D3E : 4510                		dt	r5
(1) 1183/ 6000D40 : 8FE4                		bf/s	.ln_loop
(1) 1184/ 6000D42 : 7A02                		add	#2,r10
(1) 1185/ 6000D44 :                     
(1) 1186/ 6000D44 :                     	; ---------------------------------------
(1) 1187/ 6000D44 :                     
(1) 1188/ 6000D44 : 9362                		mov	#_CCR,r3			; <-- Required for Watchdog
(1) 1189/ 6000D46 : E008                		mov	#%00001000,r0			; Two-way mode
(1) 1190/ 6000D48 : 2301                		mov.w	r0,@r3
(1) 1191/ 6000D4A : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 1192/ 6000D4C : 2301                		mov.w	r0,@r3
(1) 1193/ 6000D4E : D026                		mov	#MarsVideo_SetWatchdog,r0
(1) 1194/ 6000D50 : 400B                		jsr	@r0
(1) 1195/ 6000D52 : 0009                		nop
(1) 1196/ 6000D54 :                     
(1) 1197/ 6000D54 :                     ; 	Start slicing polygons
(1) 1198/ 6000D54 :                     ; 	r14 - Polygon pointers list
(1) 1199/ 6000D54 :                     ; 	r13 - Number of polygons to build
(1) 1200/ 6000D54 : C52A                		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1) 1201/ 6000D56 : C801                		tst     #1,r0				; Check for which buffer to use
(1) 1202/ 6000D58 : 8903                		bt	.page_2
(1) 1203/ 6000D5A : DE24                		mov 	#RAM_Mars_Plgn_ZList_0,r14
(1) 1204/ 6000D5C : DD24                		mov	#RAM_Mars_PlgnNum_0,r13
(1) 1205/ 6000D5E : A004                		bra	.cont_plgn
(1) 1206/ 6000D60 : 0009                		nop
(1) 1207/ 6000D62 :                     .page_2:
(1) 1208/ 6000D62 : DE24                		mov 	#RAM_Mars_Plgn_ZList_1,r14
(1) 1209/ 6000D64 : DD24                		mov	#RAM_Mars_PlgnNum_1,r13
(1) 1210/ 6000D66 : 0009                		nop
(1) 1211/ 6000D68 : 0009                		nop
(1) 1212/ 6000D6A :                     .cont_plgn:
(1) 1213/ 6000D6A : 6DD1                		mov.w	@r13,r13			; read from memory to register
(1) 1214/ 6000D6C : 4D15                		cmp/pl	r13				; zero?
(1) 1215/ 6000D6E : 8B0C                		bf	.skip
(1) 1216/ 6000D70 :                     .loop:
(1) 1217/ 6000D70 : 2FE6                		mov	r14,@-r15
(1) 1218/ 6000D72 : 2FD6                		mov	r13,@-r15
(1) 1219/ 6000D74 : 6EE2                		mov	@r14,r14			; Get location of the polygon
(1) 1220/ 6000D76 : 4E15                		cmp/pl	r14				; Zero?
(1) 1221/ 6000D78 : 8B02                		bf	.invalid			; if yes, skip
(1) 1222/ 6000D7A : D020                		mov 	#MarsVideo_SlicePlgn,r0
(1) 1223/ 6000D7C : 400B                		jsr	@r0
(1) 1224/ 6000D7E : 0009                		nop
(1) 1225/ 6000D80 :                     .invalid:
(1) 1226/ 6000D80 : 6DF6                		mov	@r15+,r13
(1) 1227/ 6000D82 : 6EF6                		mov	@r15+,r14
(1) 1228/ 6000D84 : 4D10                		dt	r13				; Decrement numof_polygons
(1) 1229/ 6000D86 : 8FF3                		bf/s	.loop
(1) 1230/ 6000D88 : 7E08                		add	#8,r14				; Move to next entry
(1) 1231/ 6000D8A :                     .skip:
(1) 1232/ 6000D8A : B044                		bsr	mstrgf0_lr
(1) 1233/ 6000D8C : 0009                		nop
(1) 1234/ 6000D8E : B0A5                		bsr	mstrgf0_ud
(1) 1235/ 6000D90 : 0009                		nop
(1) 1236/ 6000D92 :                     
(1) 1237/ 6000D92 :                     mstgfx_exit:
(1) 1238/ 6000D92 : C52D                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces remaining on Watchdog?
(1) 1239/ 6000D94 : 8800                		cmp/eq	#0,r0
(1) 1240/ 6000D96 : 8BFC                		bf	mstgfx_exit
(1) 1241/ 6000D98 : C534                .wait_task:	mov.w	@(marsGbl_WdDrwTask,gbr),r0	; Any drawing task active?
(1) 1242/ 6000D9A : 8800                		cmp/eq	#0,r0
(1) 1243/ 6000D9C : 8BFC                		bf	.wait_task
(1) 1244/ 6000D9E : 9136                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1) 1245/ 6000DA0 : 9036                		mov.w   #$A518,r0
(1) 1246/ 6000DA2 : 2101                		mov.w   r0,@r1
(1) 1247/ 6000DA4 : D109                		mov	#_vdpreg,r1
(1) 1248/ 6000DA6 : 8515                .waitfb:	mov.w	@(vdpsts,r1),r0			; Wait until any line-fill finishes.
(1) 1249/ 6000DA8 : C802                		tst	#%10,r0
(1) 1250/ 6000DAA : 8BFC                		bf	.waitfb
(1) 1251/ 6000DAC : D107                		mov	#_vdpreg,r1
(1) 1252/ 6000DAE : 841B                		mov.b	@(framectl,r1),r0		; Frameswap request, Next Watchdog will
(1) 1253/ 6000DB0 : CA01                		xor	#1,r0				; check for it later.
(1) 1254/ 6000DB2 : 801B                		mov.b	r0,@(framectl,r1)		; Save new bit
(1) 1255/ 6000DB4 : C062                		mov.b	r0,@(marsGbl_CurrFb,gbr)	; And a copy for checking
(1) 1256/ 6000DB6 : 200A                		xor	r0,r0
(1) 1257/ 6000DB8 : C12B                		mov.w	r0,@(marsGbl_MstrReqDraw,gbr)
(1) 1258/ 6000DBA : AF55                		bra	master_loop
(1) 1259/ 6000DBC : 0009                		nop
(1) 1260/ 6000DBE :                     		align 4
(1) 1261/ 6000DC0 : 0204 79F0 0205 A5F0 		ltorg
                    0600 097C 2000 4100 
                    2000 4102 0000 8000 
                    0600 1530 2400 0000 
                    0001 5000 0600 1EF0 
                    0600 09E8 0600 A114 
                    0600 A914 0600 A514 
                    0600 A916 0600 0612 
                    00F0 0140 0100 07FF 
                    0200 0150 FE92 FE80 
                    A518                
(1) 1262/ 6000E12 :                     
(1) 1263/ 6000E12 : 0000 0000           rot_angle_2:	dc.l 0
(1) 1264/ 6000E16 :                     
(1) 1265/ 6000E16 :                     ; Left/Right
(1) 1266/ 6000E16 :                     mstrgf0_lr:
(1) 1267/ 6000E16 : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1268/ 6000E18 : 4015                		cmp/pl	r0
(1) 1269/ 6000E1A : 8B5D                		bf	nxt_drawud
(1) 1270/ 6000E1C : E4F0                		mov	#-MSCRL_BLKSIZE,r4
(1) 1271/ 6000E1E : 9D37                		mov	#256,r13
(1) 1272/ 6000E20 : EC04                		mov	#MSCRL_BLKSIZE/4,r12
(1) 1273/ 6000E22 :                     ; 		mov	@(marsGbl_Bg_FbBase,gbr),r0
(1) 1274/ 6000E22 :                     ; 		and	r4,r0
(1) 1275/ 6000E22 :                     ; 		mov	r0,r11
(1) 1276/ 6000E22 : DB18                		mov	#Cach_BgFbPos_LR,r11
(1) 1277/ 6000E24 : 6BB2                		mov	@r11,r11
(1) 1278/ 6000E26 : C51F                		mov.w	@(marsGbl_Bg_YFbPos_LR,gbr),r0
(1) 1279/ 6000E28 : 2049                		and	r4,r0
(1) 1280/ 6000E2A : 9332                		mov	#MSCRL_WIDTH,r3
(1) 1281/ 6000E2C : 203E                		mulu	r3,r0
(1) 1282/ 6000E2E : 001A                		sts	macl,r0
(1) 1283/ 6000E30 : 3B0C                		add	r0,r11
(1) 1284/ 6000E32 : DA15                		mov	#(MSCRL_WIDTH*MSCRL_HEIGHT),r10
(1) 1285/ 6000E34 : D915                		mov	#_framebuffer+$200,r9
(1) 1286/ 6000E36 : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1287/ 6000E38 : 6803                		mov	r0,r8
(1) 1288/ 6000E3A : 6703                		mov	r0,r7
(1) 1289/ 6000E3C : C518                		mov.w	@(marsGbl_BgHeight,gbr),r0
(1) 1290/ 6000E3E : 6603                		mov	r0,r6
(1) 1291/ 6000E40 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1292/ 6000E42 : 206E                		mulu	r6,r0
(1) 1293/ 6000E44 : 061A                		sts	macl,r6
(1) 1294/ 6000E46 : 367C                		add	r7,r6
(1) 1295/ 6000E48 : 6303                		mov	r0,r3
(1) 1296/ 6000E4A : C523                		mov.w	@(marsGbl_Bg_YbgInc_U,gbr),r0
(1) 1297/ 6000E4C : 2049                		and	r4,r0
(1) 1298/ 6000E4E : 203E                		mulu	r3,r0
(1) 1299/ 6000E50 : 001A                		sts	macl,r0
(1) 1300/ 6000E52 : 380C                		add	r0,r8
(1) 1301/ 6000E54 : C527                		mov.w	@(marsGbl_Bg_DrwReqR,gbr),r0
(1) 1302/ 6000E56 : 8800                		cmp/eq	#0,r0
(1) 1303/ 6000E58 : 8B0A                		bf	.dtsk01_dright
(1) 1304/ 6000E5A : C526                		mov.w	@(marsGbl_Bg_DrwReqL,gbr),r0
(1) 1305/ 6000E5C : 8800                		cmp/eq	#0,r0
(1) 1306/ 6000E5E : 8B01                		bf	.dtsk01_dleft
(1) 1307/ 6000E60 : A03A                		bra	nxt_drawud
(1) 1308/ 6000E62 : 0009                		nop
(1) 1309/ 6000E64 :                     		align 4
(1) 1310/ 6000E64 :                     .dtsk01_dleft:
(1) 1311/ 6000E64 : 4010                		dt	r0
(1) 1312/ 6000E66 : C126                		mov.w	r0,@(marsGbl_Bg_DrwReqL,gbr)
(1) 1313/ 6000E68 : C520                		mov.w	@(marsGbl_Bg_XbgInc_L,gbr),r0
(1) 1314/ 6000E6A : 2049                		and	r4,r0
(1) 1315/ 6000E6C : A013                		bra	dtsk01_lrdraw
(1) 1316/ 6000E6E : 6503                		mov	r0,r5
(1) 1317/ 6000E70 :                     .dtsk01_dright:
(1) 1318/ 6000E70 : 4010                		dt	r0
(1) 1319/ 6000E72 : C127                		mov.w	r0,@(marsGbl_Bg_DrwReqR,gbr)
(1) 1320/ 6000E74 : 900E                		mov	#320,r0		; Set FB position
(1) 1321/ 6000E76 : 3B0C                		add	r0,r11
(1) 1322/ 6000E78 : 2B49                		and	r4,r11
(1) 1323/ 6000E7A : C521                		mov.w	@(marsGbl_Bg_XbgInc_R,gbr),r0
(1) 1324/ 6000E7C : 2049                		and	r4,r0
(1) 1325/ 6000E7E : A00A                		bra	dtsk01_lrdraw
(1) 1326/ 6000E80 : 6503                		mov	r0,r5
(1) 1327/ 6000E82 :                     		align 4
(1) 1328/ 6000E84 : C000 03BC 0001 5000 		ltorg
                    2400 0200 0100 0150 
                    0140                
(1) 1329/ 6000E96 :                     
(1) 1330/ 6000E96 :                     	; r13 - Y lines
(1) 1331/ 6000E96 :                     	; r12 - X block width
(1) 1332/ 6000E96 :                     	; r11 - drawzone pos
(1) 1333/ 6000E96 :                     	; r10 - drawzone size
(1) 1334/ 6000E96 :                     	;  r9 - Framebuffer
(1) 1335/ 6000E96 :                     	;  r8 - Pixeldata Y-Current
(1) 1336/ 6000E96 :                     	;  r7 - Pixeldata Y-Start
(1) 1337/ 6000E96 :                     	;  r6 - Pixeldata Y-End
(1) 1338/ 6000E96 :                     	;  r5 - Xadd
(1) 1339/ 6000E96 :                     dtsk01_lrdraw:
(1) 1340/ 6000E96 : 3863                		cmp/ge	r6,r8
(1) 1341/ 6000E98 : 8B00                		bf	.yres
(1) 1342/ 6000E9A : 6873                		mov	r7,r8
(1) 1343/ 6000E9C :                     .yres:
(1) 1344/ 6000E9C : 64C3                		mov	r12,r4
(1) 1345/ 6000E9E : 63B3                		mov	r11,r3
(1) 1346/ 6000EA0 : 6283                		mov	r8,r2
(1) 1347/ 6000EA2 : 325C                		add	r5,r2
(1) 1348/ 6000EA4 :                     ; X draw
(1) 1349/ 6000EA4 :                     .xline:
(1) 1350/ 6000EA4 : 33A3                		cmp/ge	r10,r3
(1) 1351/ 6000EA6 : 8B01                		bf	.prefix_r
(1) 1352/ 6000EA8 : 33A8                		sub	r10,r3
(1) 1353/ 6000EAA : 6B33                		mov	r3,r11
(1) 1354/ 6000EAC :                     .prefix_r:
(1) 1355/ 6000EAC : 6133                		mov	r3,r1
(1) 1356/ 6000EAE : 319C                		add	r9,r1
(1) 1357/ 6000EB0 : 6022                		mov	@r2,r0
(1) 1358/ 6000EB2 : 2102                		mov	r0,@r1
(1) 1359/ 6000EB4 : 908E                		mov	#320,r0		; Ex-line
(1) 1360/ 6000EB6 : 3307                		cmp/gt	r0,r3
(1) 1361/ 6000EB8 : 8904                		bt	.not_l2
(1) 1362/ 6000EBA : 6133                		mov	r3,r1
(1) 1363/ 6000EBC : 319C                		add	r9,r1
(1) 1364/ 6000EBE : 31AC                		add	r10,r1
(1) 1365/ 6000EC0 : 6022                		mov	@r2,r0
(1) 1366/ 6000EC2 : 2102                		mov	r0,@r1
(1) 1367/ 6000EC4 :                     .not_l2:
(1) 1368/ 6000EC4 : 7204                		add	#4,r2
(1) 1369/ 6000EC6 : 4410                		dt	r4
(1) 1370/ 6000EC8 : 8FEC                		bf/s	.xline
(1) 1371/ 6000ECA : 7304                		add	#4,r3
(1) 1372/ 6000ECC : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1373/ 6000ECE : 380C                		add	r0,r8
(1) 1374/ 6000ED0 : 9081                		mov	#MSCRL_WIDTH,r0
(1) 1375/ 6000ED2 : 4D10                		dt	r13
(1) 1376/ 6000ED4 : 8FDF                		bf/s	dtsk01_lrdraw
(1) 1377/ 6000ED6 : 3B0C                		add	r0,r11
(1) 1378/ 6000ED8 :                     nxt_drawud:
(1) 1379/ 6000ED8 : 000B                		rts
(1) 1380/ 6000EDA : 0009                		nop
(1) 1381/ 6000EDC :                     		align 4
(1) 1382/ 6000EDC :                     
(1) 1383/ 6000EDC :                     ; Up/Down
(1) 1384/ 6000EDC :                     mstrgf0_ud:
(1) 1385/ 6000EDC : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1386/ 6000EDE : 6B03                		mov	r0,r11
(1) 1387/ 6000EE0 : 6C03                		mov	r0,r12
(1) 1388/ 6000EE2 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1389/ 6000EE4 : 6103                		mov	r0,r1
(1) 1390/ 6000EE6 : C518                		mov.w	@(marsGbl_BgHeight,gbr),r0
(1) 1391/ 6000EE8 : 201E                		mulu	r1,r0
(1) 1392/ 6000EEA : 001A                		sts	macl,r0
(1) 1393/ 6000EEC : 3C0C                		add	r0,r12
(1) 1394/ 6000EEE : C525                		mov.w	@(marsGbl_Bg_DrwReqD,gbr),r0
(1) 1395/ 6000EF0 : 8800                		cmp/eq	#0,r0
(1) 1396/ 6000EF2 : 8B04                		bf	.tsk00_down
(1) 1397/ 6000EF4 : C524                		mov.w	@(marsGbl_Bg_DrwReqU,gbr),r0
(1) 1398/ 6000EF6 : 8800                		cmp/eq	#0,r0
(1) 1399/ 6000EF8 : 8B13                		bf	.tsk00_up
(1) 1400/ 6000EFA : A055                		bra	drw_ud_exit
(1) 1401/ 6000EFC : 0009                		nop
(1) 1402/ 6000EFE :                     
(1) 1403/ 6000EFE :                     	; r2 - Start bg line
(1) 1404/ 6000EFE :                     	; r3 - End bg line
(1) 1405/ 6000EFE :                     	; r6 - Y current
(1) 1406/ 6000EFE :                     	; r5 - FB current base
(1) 1407/ 6000EFE :                     .tsk00_down:
(1) 1408/ 6000EFE : 4010                		dt	r0
(1) 1409/ 6000F00 : C125                		mov.w	r0,@(marsGbl_Bg_DrwReqD,gbr)
(1) 1410/ 6000F02 :                     
(1) 1411/ 6000F02 : D22A                		mov	#Cach_YHead_D,r2
(1) 1412/ 6000F04 : 6222                		mov	@r2,r2
(1) 1413/ 6000F06 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1414/ 6000F08 : 6403                		mov	r0,r4
(1) 1415/ 6000F0A : 220F                		muls	r0,r2
(1) 1416/ 6000F0C : 021A                		sts	macl,r2
(1) 1417/ 6000F0E : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1418/ 6000F10 : 320C                		add	r0,r2
(1) 1419/ 6000F12 : 6323                		mov	r2,r3
(1) 1420/ 6000F14 : 334C                		add	r4,r3
(1) 1421/ 6000F16 : D526                		mov	#Cach_BgFbPos_LR,r5
(1) 1422/ 6000F18 : 6552                		mov	@r5,r5
(1) 1423/ 6000F1A : D026                		mov	#Cach_BgFbPos_D,r0
(1) 1424/ 6000F1C : 6002                		mov	@r0,r0
(1) 1425/ 6000F1E : A011                		bra	.drwy_go
(1) 1426/ 6000F20 : 6603                		mov	r0,r6
(1) 1427/ 6000F22 :                     
(1) 1428/ 6000F22 :                     .tsk00_up:
(1) 1429/ 6000F22 : 4010                		dt	r0
(1) 1430/ 6000F24 : C124                		mov.w	r0,@(marsGbl_Bg_DrwReqU,gbr)
(1) 1431/ 6000F26 :                     
(1) 1432/ 6000F26 : D224                		mov	#Cach_YHead_U,r2
(1) 1433/ 6000F28 : 6222                		mov	@r2,r2
(1) 1434/ 6000F2A : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1435/ 6000F2C : 6403                		mov	r0,r4
(1) 1436/ 6000F2E : 220F                		muls	r0,r2
(1) 1437/ 6000F30 : 021A                		sts	macl,r2
(1) 1438/ 6000F32 : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1439/ 6000F34 : 320C                		add	r0,r2
(1) 1440/ 6000F36 : 6323                		mov	r2,r3
(1) 1441/ 6000F38 : 334C                		add	r4,r3
(1) 1442/ 6000F3A : D520                		mov	#Cach_BgFbPos_LR,r5
(1) 1443/ 6000F3C : 6552                		mov	@r5,r5
(1) 1444/ 6000F3E : D020                		mov	#Cach_BgFbPos_U,r0
(1) 1445/ 6000F40 : 6002                		mov	@r0,r0
(1) 1446/ 6000F42 : 6603                		mov	r0,r6
(1) 1447/ 6000F44 :                     
(1) 1448/ 6000F44 :                     .drwy_go:
(1) 1449/ 6000F44 : E810                		mov	#MSCRL_BLKSIZE,r8
(1) 1450/ 6000F46 :                     .rept_y:
(1) 1451/ 6000F46 : 32C3                		cmp/ge	r12,r2
(1) 1452/ 6000F48 : 8B03                		bf	.ybgend
(1) 1453/ 6000F4A : 62B3                		mov	r11,r2
(1) 1454/ 6000F4C : 63B3                		mov	r11,r3
(1) 1455/ 6000F4E : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1456/ 6000F50 : 330C                		add	r0,r3
(1) 1457/ 6000F52 :                     .ybgend:
(1) 1458/ 6000F52 :                     
(1) 1459/ 6000F52 : 6123                		mov	r2,r1		; r1 - bg pixel data
(1) 1460/ 6000F54 : E7F0                		mov	#-MSCRL_BLKSIZE,r7
(1) 1461/ 6000F56 : D01B                		mov	#Cach_XHead_L,r0
(1) 1462/ 6000F58 : 6002                		mov	@r0,r0
(1) 1463/ 6000F5A : 2079                		and	r7,r0
(1) 1464/ 6000F5C : 310C                		add	r0,r1
(1) 1465/ 6000F5E :                     
(1) 1466/ 6000F5E : 6453                		mov	r5,r4		; r4 - X
(1) 1467/ 6000F60 : 6063                		mov	r6,r0
(1) 1468/ 6000F62 : 9738                		mov	#MSCRL_WIDTH,r7
(1) 1469/ 6000F64 : 207E                		mulu	r7,r0
(1) 1470/ 6000F66 : 001A                		sts	macl,r0
(1) 1471/ 6000F68 :                     ; 		shll8	r0
(1) 1472/ 6000F68 :                     ; 		shll	r0
(1) 1473/ 6000F68 : 340C                		add	r0,r4		; X + Y
(1) 1474/ 6000F6A : E754                		mov	#(MSCRL_WIDTH)/4,r7
(1) 1475/ 6000F6C :                     .rept_x:
(1) 1476/ 6000F6C : D016                		mov	#(MSCRL_WIDTH*MSCRL_HEIGHT),r0
(1) 1477/ 6000F6E : 3403                		cmp/ge	r0,r4
(1) 1478/ 6000F70 : 8B00                		bf	.res_x
(1) 1479/ 6000F72 : 3408                		sub	r0,r4
(1) 1480/ 6000F74 :                     .res_x:
(1) 1481/ 6000F74 : 3133                		cmp/ge	r3,r1
(1) 1482/ 6000F76 : 8B00                		bf	.xlon1
(1) 1483/ 6000F78 : 6123                		mov	r2,r1
(1) 1484/ 6000F7A :                     .xlon1:
(1) 1485/ 6000F7A : 6A16                		mov	@r1+,r10
(1) 1486/ 6000F7C :                     
(1) 1487/ 6000F7C : 6943                		mov	r4,r9
(1) 1488/ 6000F7E : D013                		mov	#_framebuffer+$200,r0
(1) 1489/ 6000F80 : 390C                		add	r0,r9
(1) 1490/ 6000F82 : 9027                		mov	#320,r0
(1) 1491/ 6000F84 : 3407                		cmp/gt	r0,r4
(1) 1492/ 6000F86 : 8902                		bt	.not_l2
(1) 1493/ 6000F88 : D011                		mov	#(_framebuffer+$200)+(MSCRL_WIDTH*MSCRL_HEIGHT),r0
(1) 1494/ 6000F8A : 304C                		add	r4,r0
(1) 1495/ 6000F8C : 20A2                		mov	r10,@r0
(1) 1496/ 6000F8E :                     .not_l2:
(1) 1497/ 6000F8E : 29A2                		mov	r10,@r9
(1) 1498/ 6000F90 : 4710                		dt	r7
(1) 1499/ 6000F92 : 8FEB                		bf/s	.rept_x
(1) 1500/ 6000F94 : 7404                		add	#4,r4
(1) 1501/ 6000F96 :                     
(1) 1502/ 6000F96 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1503/ 6000F98 : 320C                		add	r0,r2
(1) 1504/ 6000F9A : 330C                		add	r0,r3
(1) 1506/ 6000F9C : 6063                		mov	r6,r0
(1) 1507/ 6000F9E : 7001                		add	#1,r0
(1) 1508/ 6000FA0 : C9FF                		and	#$FF,r0
(1) 1509/ 6000FA2 : 6603                		mov	r0,r6
(1) 1518/ 6000FA4 : 4810                		dt	r8
(1) 1519/ 6000FA6 : 8BCE                		bf	.rept_y
(1) 1520/ 6000FA8 :                     drw_ud_exit:
(1) 1521/ 6000FA8 : 000B                		rts
(1) 1522/ 6000FAA : 0009                		nop
(1) 1523/ 6000FAC :                     		align 4
(1) 1524/ 6000FAC : C000 03AC C000 03BC 		ltorg
                    C000 03B8 C000 03B0 
                    C000 03BC C000 03B4 
                    C000 03A4 0001 5000 
                    2400 0200 2401 5200 
                    0140 0150           
(1) 1525/ 6000FD8 :                     
(1) 1526/ 6000FD8 :                     ; ; ---------------------------------------
(1) 1527/ 6000FD8 :                     ; ; Custom graphics mode 0
(1) 1528/ 6000FD8 :                     ; ;
(1) 1529/ 6000FD8 :                     ; ; Single 256-color scrolling layer
(1) 1530/ 6000FD8 :                     ; ; using dirty-section method,
(1) 1531/ 6000FD8 :                     ; ; ---------------------------------------
(1) 1532/ 6000FD8 :                     ;
(1) 1533/ 6000FD8 :                     ; mstr_gfx2:
(1) 1534/ 6000FD8 :                     ; 		mov	r1,r0
(1) 1535/ 6000FD8 :                     ; 		and	#$80,r0
(1) 1536/ 6000FD8 :                     ; 		cmp/eq	#0,r0
(1) 1537/ 6000FD8 :                     ; 		bf	mstr_gfx2_loop
(1) 1538/ 6000FD8 :                     ; 		mov	r1,r0
(1) 1539/ 6000FD8 :                     ; 		or	#$80,r0
(1) 1540/ 6000FD8 :                     ; 		mov.w	r0,@(marsGbl_CurrGfxMode,gbr)
(1) 1541/ 6000FD8 :                     ; 		mov	#TESTMARS_BG,r1			; SET image
(1) 1542/ 6000FD8 :                     ; 		mov	#320,r2
(1) 1543/ 6000FD8 :                     ; 		mov	#240,r3
(1) 1544/ 6000FD8 :                     ; 		mov	#$00010000,r4
(1) 1545/ 6000FD8 :                     ; 		mov	#$00010000,r5
(1) 1546/ 6000FD8 :                     ; 		bsr	MarsVideo_SetBg
(1) 1547/ 6000FD8 :                     ; 		nop
(1) 1548/ 6000FD8 :                     ; 		mov	#TESTMARS_BG_PAL,r1		; Load palette
(1) 1549/ 6000FD8 :                     ; 		mov	#0,r2
(1) 1550/ 6000FD8 :                     ; 		mov	#256,r3
(1) 1551/ 6000FD8 :                     ; 		mov	#$0000,r4
(1) 1552/ 6000FD8 :                     ; 		mov	#MarsVideo_LoadPal,r0
(1) 1553/ 6000FD8 :                     ; 		jsr	@r0
(1) 1554/ 6000FD8 :                     ; 		nop
(1) 1555/ 6000FD8 :                     ; 		mov 	#_vdpreg,r1
(1) 1556/ 6000FD8 :                     ; 		mov	#1,r0
(1) 1557/ 6000FD8 :                     ; 		mov.b	r0,@(bitmapmd,r1)
(1) 1558/ 6000FD8 :                     ;
(1) 1559/ 6000FD8 :                     ; ; ---------------------------------------
(1) 1560/ 6000FD8 :                     ; ; Mode0 loop
(1) 1561/ 6000FD8 :                     ; ; ---------------------------------------
(1) 1562/ 6000FD8 :                     ;
(1) 1563/ 6000FD8 :                     ; mstr_gfx2_loop:
(1) 1564/ 6000FD8 :                     ; 		mov.b	@(marsGbl_CurrFb,gbr),r0
(1) 1565/ 6000FD8 :                     ; 		mov	r0,r3
(1) 1566/ 6000FD8 :                     ; 		mov	#_vdpreg,r4			; Wait if frameswap is done
(1) 1567/ 6000FD8 :                     ; .wait_frmswp:	mov.b	@(framectl,r4),r0
(1) 1568/ 6000FD8 :                     ; 		cmp/eq	r0,r3
(1) 1569/ 6000FD8 :                     ; 		bf	.wait_frmswp
(1) 1570/ 6000FD8 :                     ;
(1) 1571/ 6000FD8 :                     ; 		mov	@(marsGbl_BgData,gbr),r0
(1) 1572/ 6000FD8 :                     ; 		cmp/eq	#0,r0
(1) 1573/ 6000FD8 :                     ; 		bt	.no_scrldata
(1) 1574/ 6000FD8 :                     ; 		bsr	mstr_movebg
(1) 1575/ 6000FD8 :                     ; 		nop
(1) 1576/ 6000FD8 :                     ; .no_scrldata:
(1) 1577/ 6000FD8 :                     ;  		mov	#_framebuffer,r1
(1) 1578/ 6000FD8 :                     ; 		mov	#$200/2,r0	; START line data
(1) 1579/ 6000FD8 :                     ; 		mov	#240,r2		; Vertical lines to set
(1) 1580/ 6000FD8 :                     ; 		mov	r0,r3		; Increment by (copy from r0)
(1) 1581/ 6000FD8 :                     ; .loopfb:	mov.w	r0,@r1
(1) 1582/ 6000FD8 :                     ; 		add	#2,r1
(1) 1583/ 6000FD8 :                     ; 		add	r3,r0
(1) 1584/ 6000FD8 :                     ; 		dt	r2
(1) 1585/ 6000FD8 :                     ; 		bf	.loopfb
(1) 1586/ 6000FD8 :                     ; 		mov	#_CCR,r3			; <-- Required for Watchdog
(1) 1587/ 6000FD8 :                     ; 		mov	#%00001000,r0			; Two-way mode
(1) 1588/ 6000FD8 :                     ; 		mov.w	r0,@r3
(1) 1589/ 6000FD8 :                     ; 		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 1590/ 6000FD8 :                     ; 		mov.w	r0,@r3
(1) 1591/ 6000FD8 :                     ; 		mov	#MarsVideo_SetWatchdog,r0
(1) 1592/ 6000FD8 :                     ; 		jsr	@r0
(1) 1593/ 6000FD8 :                     ; 		nop
(1) 1594/ 6000FD8 :                     ;
(1) 1595/ 6000FD8 :                     ; ; 	TODO: broken
(1) 1596/ 6000FD8 :                     ; 	; Start slicing polygons
(1) 1597/ 6000FD8 :                     ; 	; r14 - Polygon pointers list
(1) 1598/ 6000FD8 :                     ; 	; r13 - Number of polygons to build
(1) 1599/ 6000FD8 :                     ; 		mov.w	@(marsGbl_MstrReqDraw,gbr),r0
(1) 1600/ 6000FD8 :                     ; 		cmp/eq	#0,r0
(1) 1601/ 6000FD8 :                     ; 		bt	.skip
(1) 1602/ 6000FD8 :                     ; 		xor	r0,r0
(1) 1603/ 6000FD8 :                     ; 		mov.w	r0,@(marsGbl_MstrReqDraw,gbr)
(1) 1604/ 6000FD8 :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1) 1605/ 6000FD8 :                     ; 		tst     #1,r0				; Check for which buffer to use
(1) 1606/ 6000FD8 :                     ; 		bt	.page_2
(1) 1607/ 6000FD8 :                     ; 		mov 	#RAM_Mars_Plgn_ZList_0,r14
(1) 1608/ 6000FD8 :                     ; 		mov	#RAM_Mars_PlgnNum_0,r13
(1) 1609/ 6000FD8 :                     ; 		bra	.cont_plgn
(1) 1610/ 6000FD8 :                     ; 		nop
(1) 1611/ 6000FD8 :                     ; .page_2:
(1) 1612/ 6000FD8 :                     ; 		mov 	#RAM_Mars_Plgn_ZList_1,r14
(1) 1613/ 6000FD8 :                     ; 		mov	#RAM_Mars_PlgnNum_1,r13
(1) 1614/ 6000FD8 :                     ; 		nop
(1) 1615/ 6000FD8 :                     ; 		nop
(1) 1616/ 6000FD8 :                     ; .cont_plgn:
(1) 1617/ 6000FD8 :                     ; 		mov.w	@r13,r13			; read from memory to register
(1) 1618/ 6000FD8 :                     ; 		cmp/pl	r13				; zero?
(1) 1619/ 6000FD8 :                     ; 		bf	.skip
(1) 1620/ 6000FD8 :                     ; .loop:
(1) 1621/ 6000FD8 :                     ; 		mov	r14,@-r15
(1) 1622/ 6000FD8 :                     ; 		mov	r13,@-r15
(1) 1623/ 6000FD8 :                     ; 		mov	@r14,r14			; Get location of the polygon
(1) 1624/ 6000FD8 :                     ; 		cmp/pl	r14				; Zero?
(1) 1625/ 6000FD8 :                     ; 		bf	.invalid			; if yes, skip
(1) 1626/ 6000FD8 :                     ; 		mov 	#MarsVideo_SlicePlgn,r0
(1) 1627/ 6000FD8 :                     ; 		jsr	@r0
(1) 1628/ 6000FD8 :                     ; 		nop
(1) 1629/ 6000FD8 :                     ; .invalid:
(1) 1630/ 6000FD8 :                     ; 		mov	@r15+,r13
(1) 1631/ 6000FD8 :                     ; 		mov	@r15+,r14
(1) 1632/ 6000FD8 :                     ; 		dt	r13				; Decrement numof_polygons
(1) 1633/ 6000FD8 :                     ; 		bf/s	.loop
(1) 1634/ 6000FD8 :                     ; 		add	#8,r14				; Move to next entry
(1) 1635/ 6000FD8 :                     ; .skip:
(1) 1636/ 6000FD8 :                     ; 		bra	mstgfx_exit
(1) 1637/ 6000FD8 :                     ; 		nop
(1) 1638/ 6000FD8 :                     
(1) 1639/ 6000FD8 :                     ; 	; --------------------------------------
(1) 1640/ 6000FD8 :                     ; .wait_pz:
(1) 1641/ 6000FD8 :                     ; 		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces remaining on Watchdog?
(1) 1642/ 6000FD8 :                     ; 		cmp/eq	#0,r0
(1) 1643/ 6000FD8 :                     ; 		bf	.wait_pz
(1) 1644/ 6000FD8 :                     ; .wait_task:
(1) 1645/ 6000FD8 :                     ; 		mov.w	@(marsGbl_WdDrwTask,gbr),r0	; Any drawing task active?
(1) 1646/ 6000FD8 :                     ; 		cmp/eq	#0,r0
(1) 1647/ 6000FD8 :                     ; 		bf	.wait_task
(1) 1648/ 6000FD8 :                     ; 		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1) 1649/ 6000FD8 :                     ; 		mov.w   #$A518,r0
(1) 1650/ 6000FD8 :                     ; 		mov.w   r0,@r1
(1) 1651/ 6000FD8 :                     ; 		mov	#_vdpreg,r1
(1) 1652/ 6000FD8 :                     ; .waitfb:	mov.w	@(vdpsts,r1),r0			; Wait until any line-fill finishes.
(1) 1653/ 6000FD8 :                     ; 		tst	#%10,r0
(1) 1654/ 6000FD8 :                     ; 		bf	.waitfb
(1) 1655/ 6000FD8 :                     ; 		mov	#_vdpreg,r1
(1) 1656/ 6000FD8 :                     ; 		mov.b	@(framectl,r1),r0		; Frameswap request, Next Watchdog will
(1) 1657/ 6000FD8 :                     ; 		xor	#1,r0				; check for it later.
(1) 1658/ 6000FD8 :                     ; 		mov.b	r0,@(framectl,r1)		; Save new bit
(1) 1659/ 6000FD8 :                     ; 		mov.b	r0,@(marsGbl_CurrFb,gbr)	; And a copy for checking
(1) 1660/ 6000FD8 :                     ; 		bra	master_loop
(1) 1661/ 6000FD8 :                     ; 		nop
(1) 1662/ 6000FD8 :                     		align 4
(1) 1663/ 6000FD8 :                     		ltorg
(1) 1664/ 6000FD8 :                     
(1) 1665/ 6000FD8 :                     ; ---------------------------------------
(1) 1666/ 6000FD8 :                     ; Subroutines
(1) 1667/ 6000FD8 :                     ; ---------------------------------------
(1) 1668/ 6000FD8 :                     
(1) 1669/ 6000FD8 :                     ; r1 - X left
(1) 1670/ 6000FD8 :                     ; r2 - X right
(1) 1671/ 6000FD8 :                     ; r3 - Y top
(1) 1672/ 6000FD8 :                     ; r4 - Y bottom
(1) 1673/ 6000FD8 :                     
(1) 1674/ 6000FD8 :                     ; TODO: get OLD variables instead
(1) 1675/ 6000FD8 :                     ; of current
(1) 1676/ 6000FD8 :                     mstr_bgfill:
(1) 1677/ 6000FD8 : 2FE6                		mov	r14,@-r15
(1) 1678/ 6000FDA : 2FD6                		mov	r13,@-r15
(1) 1679/ 6000FDC : 3438                		sub	r3,r4
(1) 1680/ 6000FDE : 4411                		cmp/pz	r4
(1) 1681/ 6000FE0 : 8B65                		bf	.len_off
(1) 1682/ 6000FE2 : 7401                		add	#1,r4
(1) 1683/ 6000FE4 : E0FC                		mov	#-4,r0
(1) 1684/ 6000FE6 : 2109                		and	r0,r1
(1) 1685/ 6000FE8 : 2209                		and	r0,r2
(1) 1686/ 6000FEA : 3218                		sub	r1,r2
(1) 1687/ 6000FEC : 4211                		cmp/pz	r2
(1) 1688/ 6000FEE : 8B5E                		bf	.len_off
(1) 1689/ 6000FF0 : 4209                		shlr2	r2
(1) 1690/ 6000FF2 :                     
(1) 1691/ 6000FF2 : E7F0                		mov	#-MSCRL_BLKSIZE,r7
(1) 1692/ 6000FF4 : C51D                		mov.w	@(marsGbl_Bg_YFbPos_U,gbr),r0
(1) 1693/ 6000FF6 : 9D63                		mov	#MSCRL_WIDTH,r13
(1) 1694/ 6000FF8 : 20DE                		mulu	r13,r0
(1) 1695/ 6000FFA : 0D1A                		sts	macl,r13
(1) 1696/ 6000FFC : C606                		mov	@(marsGbl_Bg_FbBase,gbr),r0
(1) 1697/ 6000FFE : 30DC                		add	r13,r0
(1) 1698/ 6001000 : EDFC                		mov	#-4,r13
(1) 1699/ 6001002 : 20D9                		and	r13,r0
(1) 1700/ 6001004 : 6D03                		mov	r0,r13
(1) 1701/ 6001006 : 905C                		mov	#MSCRL_HEIGHT,r0
(1) 1702/ 6001008 : 6533                		mov	r3,r5
(1) 1703/ 600100A : 3503                		cmp/ge	r0,r5
(1) 1704/ 600100C : 8B00                		bf	.ytoph
(1) 1705/ 600100E : 6503                		mov	r0,r5
(1) 1706/ 6001010 :                     ; 		sub	r0,r5
(1) 1707/ 6001010 :                     .ytoph:
(1) 1708/ 6001010 : 9056                		mov	#MSCRL_WIDTH,r0
(1) 1709/ 6001012 : 250E                		mulu	r0,r5
(1) 1710/ 6001014 : 001A                		sts	macl,r0
(1) 1711/ 6001016 : 3D0C                		add	r0,r13
(1) 1712/ 6001018 : 3D1C                		add	r1,r13
(1) 1713/ 600101A : D027                		mov	#MSCRL_WIDTH*MSCRL_HEIGHT,r0
(1) 1714/ 600101C : 3D03                		cmp/ge	r0,r13
(1) 1715/ 600101E : 8B00                		bf	.fbbaset
(1) 1716/ 6001020 : 3D08                		sub	r0,r13
(1) 1717/ 6001022 :                     .fbbaset:
(1) 1718/ 6001022 : C518                		mov.w	@(marsGbl_BgHeight,gbr),r0
(1) 1719/ 6001024 : 6503                		mov	r0,r5
(1) 1720/ 6001026 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1721/ 6001028 : 6603                		mov	r0,r6
(1) 1722/ 600102A : 265E                		mulu	r5,r6
(1) 1723/ 600102C : 051A                		sts	macl,r5
(1) 1724/ 600102E : C600                		mov	@(marsGbl_BgData,gbr),r0
(1) 1725/ 6001030 : 6A03                		mov	r0,r10
(1) 1726/ 6001032 : 6903                		mov	r0,r9
(1) 1727/ 6001034 : 6803                		mov	r0,r8
(1) 1728/ 6001036 : 385C                		add	r5,r8
(1) 1729/ 6001038 : C518                		mov.w	@(marsGbl_BgHeight,gbr),r0
(1) 1730/ 600103A : 6503                		mov	r0,r5
(1) 1731/ 600103C : C523                		mov.w	@(marsGbl_Bg_YbgInc_U,gbr),r0
(1) 1732/ 600103E : 303C                		add	r3,r0
(1) 1733/ 6001040 : 3053                		cmp/ge	r5,r0
(1) 1734/ 6001042 : 8B00                		bf	.noyrest
(1) 1735/ 6001044 : 3058                		sub	r5,r0
(1) 1736/ 6001046 :                     .noyrest:
(1) 1737/ 6001046 : 206E                		mulu	r6,r0
(1) 1738/ 6001048 : 001A                		sts	macl,r0
(1) 1739/ 600104A : 3A0C                		add	r0,r10
(1) 1740/ 600104C : DB1B                		mov	#_framebuffer+$200,r11
(1) 1741/ 600104E :                     
(1) 1742/ 600104E :                     	; r10 - Y curr
(1) 1743/ 600104E :                     	;  r9 - Y start
(1) 1744/ 600104E :                     	;  r8 - Y end
(1) 1745/ 600104E :                     	;  r7 - X read
(1) 1746/ 600104E :                     .y_nxt:
(1) 1747/ 600104E : 3A83                		cmp/ge	r8,r10
(1) 1748/ 6001050 : 8B00                		bf	.ybgres
(1) 1749/ 6001052 : 6A93                		mov	r9,r10
(1) 1750/ 6001054 :                     .ybgres:
(1) 1751/ 6001054 : 67A3                		mov	r10,r7
(1) 1752/ 6001056 : 66A3                		mov	r10,r6
(1) 1753/ 6001058 : 65A3                		mov	r10,r5
(1) 1754/ 600105A : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1755/ 600105C : 6C03                		mov	r0,r12
(1) 1756/ 600105E : C520                		mov.w	@(marsGbl_Bg_XbgInc_L,gbr),r0
(1) 1757/ 6001060 : 301C                		add	r1,r0
(1) 1758/ 6001062 : 30C3                		cmp/ge	r12,r0
(1) 1759/ 6001064 : 8B00                		bf	.noxres
(1) 1760/ 6001066 : 30C8                		sub	r12,r0
(1) 1761/ 6001068 :                     .noxres:
(1) 1762/ 6001068 : 370C                		add	r0,r7
(1) 1763/ 600106A : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1764/ 600106C : 350C                		add	r0,r5
(1) 1765/ 600106E : 6CD3                		mov	r13,r12		; X current
(1) 1766/ 6001070 : 6E23                		mov	r2,r14		; X width
(1) 1767/ 6001072 : 7E01                		add	#1,r14		; TODO: temporal...
(1) 1768/ 6001074 :                     ; X loop
(1) 1769/ 6001074 :                     .x_nxt:
(1) 1770/ 6001074 : 3753                		cmp/ge	r5,r7
(1) 1771/ 6001076 : 8B00                		bf	.xbgres
(1) 1772/ 6001078 : 6763                		mov	r6,r7
(1) 1773/ 600107A :                     .xbgres:
(1) 1774/ 600107A : E0FC                		mov	#-4,r0
(1) 1775/ 600107C : 2709                		and	r0,r7
(1) 1776/ 600107E : D00E                		mov	#MSCRL_WIDTH*MSCRL_HEIGHT,r0
(1) 1777/ 6001080 : 3C03                		cmp/ge	r0,r12
(1) 1778/ 6001082 : 8B00                		bf	.ylarg
(1) 1779/ 6001084 : 3C08                		sub	r0,r12
(1) 1780/ 6001086 :                     .ylarg:
(1) 1781/ 6001086 : 6376                		mov	@r7+,r3
(1) 1782/ 6001088 : 901C                		mov	#320,r0
(1) 1783/ 600108A : 3C07                		cmp/gt	r0,r12
(1) 1784/ 600108C : 8903                		bt	.not_hdn
(1) 1785/ 600108E : D00A                		mov	#MSCRL_WIDTH*MSCRL_HEIGHT,r0
(1) 1786/ 6001090 : 30BC                		add	r11,r0
(1) 1787/ 6001092 : 30CC                		add	r12,r0
(1) 1788/ 6001094 : 2032                		mov	r3,@r0
(1) 1789/ 6001096 :                     .not_hdn:
(1) 1790/ 6001096 : 60B3                		mov	r11,r0
(1) 1791/ 6001098 : 30CC                		add	r12,r0
(1) 1792/ 600109A : 2032                		mov	r3,@r0
(1) 1793/ 600109C : 4E10                		dt	r14
(1) 1794/ 600109E : 8FE9                		bf/s	.x_nxt
(1) 1795/ 60010A0 : 7C04                		add	#4,r12
(1) 1796/ 60010A2 :                     
(1) 1797/ 60010A2 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1798/ 60010A4 : 3A0C                		add	r0,r10
(1) 1799/ 60010A6 : 900B                		mov	#MSCRL_WIDTH,r0
(1) 1800/ 60010A8 : 4410                		dt	r4
(1) 1801/ 60010AA : 8FD0                		bf/s	.y_nxt
(1) 1802/ 60010AC : 3D0C                		add	r0,r13
(1) 1803/ 60010AE :                     
(1) 1804/ 60010AE :                     .len_off:
(1) 1805/ 60010AE : 6DF6                		mov	@r15+,r13
(1) 1806/ 60010B0 : 6EF6                		mov	@r15+,r14
(1) 1807/ 60010B2 : 000B                		rts
(1) 1808/ 60010B4 : 0009                		nop
(1) 1809/ 60010B6 :                     		align 4
(1) 1810/ 60010B8 : 0001 5000 2400 0200 		ltorg
                    0150 0100 0140      
(1) 1811/ 60010C6 :                     
(1) 1812/ 60010C6 :                     ; r1 - X move
(1) 1813/ 60010C6 :                     ; r2 - Y move
(1) 1814/ 60010C6 :                     mstr_movebg:
(1) 1815/ 60010C6 :                     
(1) 1816/ 60010C6 :                     	; ---------------------------------------
(1) 1817/ 60010C6 :                     	; Get X/Y increment values (at r1 and r2)
(1) 1818/ 60010C6 :                     	; using CURR and OLD values
(1) 1819/ 60010C6 :                     	; and Set the X-shift bit
(1) 1820/ 60010C6 :                     	; ---------------------------------------
(1) 1821/ 60010C6 :                     
(1) 1822/ 60010C6 : E100                		mov	#0,r1			; Zero scroll
(1) 1823/ 60010C8 : E200                		mov	#0,r2
(1) 1824/ 60010CA : C608                		mov.l	@(marsGbl_Bg_Xpos,gbr),r0
(1) 1825/ 60010CC : 4029                		shlr16	r0
(1) 1826/ 60010CE : 600F                		exts.w	r0,r0
(1) 1827/ 60010D0 : 6303                		mov	r0,r3
(1) 1828/ 60010D2 : C514                		mov.w	@(marsGbl_Bg_Xpos_old,gbr),r0
(1) 1829/ 60010D4 : 3300                		cmp/eq	r0,r3
(1) 1830/ 60010D6 : 8901                		bt	.xequ
(1) 1831/ 60010D8 : 6133                		mov	r3,r1
(1) 1832/ 60010DA : 3108                		sub	r0,r1
(1) 1833/ 60010DC :                     .xequ:
(1) 1834/ 60010DC : 6033                		mov	r3,r0
(1) 1835/ 60010DE : C114                		mov.w	r0,@(marsGbl_Bg_Xpos_old,gbr)
(1) 1836/ 60010E0 : C609                		mov.l	@(marsGbl_Bg_Ypos,gbr),r0
(1) 1837/ 60010E2 : 4029                		shlr16	r0
(1) 1838/ 60010E4 : 600F                		exts.w	r0,r0
(1) 1839/ 60010E6 : 6303                		mov	r0,r3
(1) 1840/ 60010E8 : C515                		mov.w	@(marsGbl_Bg_Ypos_old,gbr),r0
(1) 1841/ 60010EA : 3300                		cmp/eq	r0,r3
(1) 1842/ 60010EC : 8901                		bt	.yequ
(1) 1843/ 60010EE : 6233                		mov	r3,r2
(1) 1844/ 60010F0 : 3208                		sub	r0,r2
(1) 1845/ 60010F2 :                     .yequ:
(1) 1846/ 60010F2 : 6033                		mov	r3,r0
(1) 1847/ 60010F4 : C115                		mov.w	r0,@(marsGbl_Bg_Ypos_old,gbr)
(1) 1848/ 60010F6 : 4111                		cmp/pz	r1
(1) 1849/ 60010F8 : 8900                		bt	.x_stend
(1) 1850/ 60010FA : 611F                		exts	r1,r1
(1) 1851/ 60010FC :                     .x_stend:
(1) 1852/ 60010FC : 4211                		cmp/pz	r2
(1) 1853/ 60010FE : 8900                		bt	.y_stend
(1) 1854/ 6001100 : 622F                		exts	r2,r2
(1) 1855/ 6001102 :                     .y_stend:
(1) 1856/ 6001102 : C516                		mov.w	@(marsGbl_Bg_XShift,gbr),r0
(1) 1857/ 6001104 : 301C                		add	r1,r0
(1) 1858/ 6001106 : C116                		mov.w	r0,@(marsGbl_Bg_XShift,gbr)
(1) 1859/ 6001108 :                     
(1) 1860/ 6001108 :                     	; Set Y framebuffer position
(1) 1862/ 6001108 : C51D                		mov.w	@(marsGbl_Bg_YFbPos_U,gbr),r0
(1) 1863/ 600110A : 302C                		add	r2,r0
(1) 1864/ 600110C : C9FF                		and	#$FF,r0
(1) 1865/ 600110E : C11D                		mov.w	r0,@(marsGbl_Bg_YFbPos_U,gbr)
(1) 1866/ 6001110 : C51E                		mov.w	@(marsGbl_Bg_YFbPos_D,gbr),r0
(1) 1867/ 6001112 : 302C                		add	r2,r0
(1) 1868/ 6001114 : C9FF                		and	#$FF,r0
(1) 1869/ 6001116 : C11E                		mov.w	r0,@(marsGbl_Bg_YFbPos_D,gbr)
(1) 1870/ 6001118 : C51F                		mov.w	@(marsGbl_Bg_YFbPos_LR,gbr),r0
(1) 1871/ 600111A : 302C                		add	r2,r0
(1) 1872/ 600111C : C9FF                		and	#$FF,r0
(1) 1873/ 600111E : C11F                		mov.w	r0,@(marsGbl_Bg_YFbPos_LR,gbr)
(1) 1927/ 6001120 :                     
(1) 1928/ 6001120 :                     	; Y Map limit
(1) 1929/ 6001120 : C518                		mov.w	@(marsGbl_BgHeight,gbr),r0
(1) 1930/ 6001122 : 6303                		mov	r0,r3
(1) 1931/ 6001124 : C523                		mov.w	@(marsGbl_Bg_YbgInc_U,gbr),r0
(1) 1932/ 6001126 : 302C                		add	r2,r0
(1) 1933/ 6001128 : 4215                		cmp/pl	r2
(1) 1934/ 600112A : 8B02                		bf	.ynegtv
(1) 1935/ 600112C : 3037                		cmp/gt	r3,r0
(1) 1936/ 600112E : 8B00                		bf	.ynegtv
(1) 1937/ 6001130 : 3038                		sub	r3,r0
(1) 1938/ 6001132 :                     .ynegtv:
(1) 1939/ 6001132 : 4211                		cmp/pz	r2
(1) 1940/ 6001134 : 8902                		bt	.ypostv
(1) 1941/ 6001136 : 4011                		cmp/pz	r0
(1) 1942/ 6001138 : 8900                		bt	.ypostv
(1) 1943/ 600113A : 303C                		add	r3,r0
(1) 1944/ 600113C :                     .ypostv:
(1) 1945/ 600113C : C123                		mov.w	r0,@(marsGbl_Bg_YbgInc_U,gbr)
(1) 1946/ 600113E : C522                		mov.w	@(marsGbl_Bg_YbgInc_D,gbr),r0
(1) 1947/ 6001140 : 302C                		add	r2,r0
(1) 1948/ 6001142 : 4215                		cmp/pl	r2
(1) 1949/ 6001144 : 8B02                		bf	.ynegtvl
(1) 1950/ 6001146 : 3037                		cmp/gt	r3,r0
(1) 1951/ 6001148 : 8B00                		bf	.ynegtvl
(1) 1952/ 600114A : 3038                		sub	r3,r0
(1) 1953/ 600114C :                     .ynegtvl:
(1) 1954/ 600114C : 4211                		cmp/pz	r2
(1) 1955/ 600114E : 8902                		bt	.ypostvl
(1) 1956/ 6001150 : 4011                		cmp/pz	r0
(1) 1957/ 6001152 : 8900                		bt	.ypostvl
(1) 1958/ 6001154 : 303C                		add	r3,r0
(1) 1959/ 6001156 :                     .ypostvl:
(1) 1960/ 6001156 : C122                		mov.w	r0,@(marsGbl_Bg_YbgInc_D,gbr)
(1) 1961/ 6001158 :                     
(1) 1962/ 6001158 :                     	; ---------------------------------------
(1) 1963/ 6001158 :                     	; X move
(1) 1964/ 6001158 :                     	; ---------------------------------------
(1) 1965/ 6001158 :                     
(1) 1966/ 6001158 : D018                		mov	#(MSCRL_WIDTH*MSCRL_HEIGHT),r0
(1) 1967/ 600115A : 6303                		mov	r0,r3
(1) 1968/ 600115C : C606                		mov	@(marsGbl_Bg_FbBase,gbr),r0
(1) 1969/ 600115E : 301C                		add	r1,r0
(1) 1970/ 6001160 : 4115                		cmp/pl	r1
(1) 1971/ 6001162 : 8B02                		bf	.yx_negtv
(1) 1972/ 6001164 : 3037                		cmp/gt	r3,r0
(1) 1973/ 6001166 : 8B00                		bf	.yx_negtv
(1) 1974/ 6001168 : 3038                		sub	r3,r0
(1) 1975/ 600116A :                     .yx_negtv:
(1) 1976/ 600116A : 4111                		cmp/pz	r1
(1) 1977/ 600116C : 8902                		bt	.yx_postv
(1) 1978/ 600116E : 4011                		cmp/pz	r0
(1) 1979/ 6001170 : 8900                		bt	.yx_postv
(1) 1980/ 6001172 : 303C                		add	r3,r0
(1) 1981/ 6001174 :                     .yx_postv:
(1) 1982/ 6001174 : C206                		mov	r0,@(marsGbl_Bg_FbBase,gbr)
(1) 1983/ 6001176 :                     
(1) 1984/ 6001176 :                     	; X draw heads for Left/Right drawing
(1) 1985/ 6001176 : C517                		mov.w	@(marsGbl_BgWidth,gbr),r0
(1) 1986/ 6001178 : 6303                		mov	r0,r3
(1) 1987/ 600117A : E500                		mov	#0,r5
(1) 1988/ 600117C : E600                		mov	#0,r6
(1) 1989/ 600117E : C521                		mov.w	@(marsGbl_Bg_XbgInc_R,gbr),r0
(1) 1990/ 6001180 : 301C                		add	r1,r0
(1) 1991/ 6001182 : 4115                		cmp/pl	r1
(1) 1992/ 6001184 : 8B03                		bf	.negtv
(1) 1993/ 6001186 : E501                		mov	#%0001,r5
(1) 1994/ 6001188 : 3033                		cmp/ge	r3,r0
(1) 1995/ 600118A : 8B00                		bf	.negtv
(1) 1996/ 600118C : 3038                		sub	r3,r0
(1) 1997/ 600118E :                     .negtv:
(1) 1998/ 600118E : 4111                		cmp/pz	r1
(1) 1999/ 6001190 : 8903                		bt	.postv
(1) 2000/ 6001192 : E502                		mov	#%0010,r5
(1) 2001/ 6001194 : 4011                		cmp/pz	r0
(1) 2002/ 6001196 : 8900                		bt	.postv
(1) 2003/ 6001198 : 303C                		add	r3,r0
(1) 2004/ 600119A :                     .postv:
(1) 2005/ 600119A : C121                		mov.w	r0,@(marsGbl_Bg_XbgInc_R,gbr)
(1) 2006/ 600119C :                     
(1) 2007/ 600119C : C520                		mov.w	@(marsGbl_Bg_XbgInc_L,gbr),r0
(1) 2008/ 600119E : 301C                		add	r1,r0
(1) 2009/ 60011A0 : 4115                		cmp/pl	r1
(1) 2010/ 60011A2 : 8B02                		bf	.negtvl
(1) 2011/ 60011A4 : 3033                		cmp/ge	r3,r0
(1) 2012/ 60011A6 : 8B00                		bf	.negtvl
(1) 2013/ 60011A8 : 3038                		sub	r3,r0
(1) 2014/ 60011AA :                     .negtvl:
(1) 2015/ 60011AA : 4111                		cmp/pz	r1
(1) 2016/ 60011AC : 8902                		bt	.postvl
(1) 2017/ 60011AE : 4011                		cmp/pz	r0
(1) 2018/ 60011B0 : 8900                		bt	.postvl
(1) 2019/ 60011B2 : 303C                		add	r3,r0
(1) 2020/ 60011B4 :                     .postvl:
(1) 2021/ 60011B4 : C120                		mov.w	r0,@(marsGbl_Bg_XbgInc_L,gbr)
(1) 2022/ 60011B6 : 000B                		rts
(1) 2023/ 60011B8 : 0009                		nop
(1) 2024/ 60011BA :                     		align 4
(1) 2025/ 60011BC : 0001 5000           		ltorg
(1) 2026/ 60011C0 :                     
(1) 2027/ 60011C0 :                     mstr_setreq1:
(1) 2028/ 60011C0 : E500                		mov	#0,r5
(1) 2029/ 60011C2 : C51C                		mov.w	@(marsGbl_Bg_Yset,gbr),r0
(1) 2030/ 60011C4 : 302C                		add	r2,r0
(1) 2031/ 60011C6 : 6603                		mov	r0,r6
(1) 2032/ 60011C8 : C8F0                		tst	#(-MSCRL_BLKSIZE)&$FF,r0
(1) 2033/ 60011CA : 8916                		bt	.ydr_busy
(1) 2034/ 60011CC : E3F0                		mov	#-MSCRL_BLKSIZE,r3
(1) 2035/ 60011CE : 4215                		cmp/pl	r2
(1) 2036/ 60011D0 : 8B08                		bf	.reqd_b
(1) 2037/ 60011D2 : C524                		mov.w	@(marsGbl_Bg_DrwReqU,gbr),r0
(1) 2038/ 60011D4 : 6403                		mov	r0,r4
(1) 2039/ 60011D6 : C525                		mov.w	@(marsGbl_Bg_DrwReqD,gbr),r0
(1) 2040/ 60011D8 : 204B                		or	r4,r0
(1) 2041/ 60011DA : 8800                		cmp/eq	#0,r0
(1) 2042/ 60011DC : 8B0D                		bf	.ydr_busy
(1) 2043/ 60011DE : E002                		mov	#2,r0
(1) 2044/ 60011E0 : C125                		mov.w	r0,@(marsGbl_Bg_DrwReqD,gbr)
(1) 2045/ 60011E2 : 7501                		add	#$01,r5
(1) 2046/ 60011E4 :                     .reqd_b:
(1) 2047/ 60011E4 : 4211                		cmp/pz	r2
(1) 2048/ 60011E6 : 8908                		bt	.ydr_busy
(1) 2049/ 60011E8 : C524                		mov.w	@(marsGbl_Bg_DrwReqU,gbr),r0
(1) 2050/ 60011EA : 6403                		mov	r0,r4
(1) 2051/ 60011EC : C525                		mov.w	@(marsGbl_Bg_DrwReqD,gbr),r0
(1) 2052/ 60011EE : 204B                		or	r4,r0
(1) 2053/ 60011F0 : 8800                		cmp/eq	#0,r0
(1) 2054/ 60011F2 : 8B02                		bf	.ydr_busy
(1) 2055/ 60011F4 : E002                		mov	#2,r0
(1) 2056/ 60011F6 : C124                		mov.w	r0,@(marsGbl_Bg_DrwReqU,gbr)
(1) 2057/ 60011F8 : 7501                		add	#$01,r5
(1) 2058/ 60011FA :                     .ydr_busy:
(1) 2059/ 60011FA : 6063                		mov	r6,r0
(1) 2060/ 60011FC : C90F                		and	#MSCRL_BLKSIZE-1,r0
(1) 2061/ 60011FE : C11C                		mov.w	r0,@(marsGbl_Bg_Yset,gbr)
(1) 2062/ 6001200 : C51B                		mov.w	@(marsGbl_Bg_Xset,gbr),r0
(1) 2063/ 6001202 : 301C                		add	r1,r0
(1) 2064/ 6001204 : 6603                		mov	r0,r6
(1) 2065/ 6001206 : C8F0                		tst	#(-MSCRL_BLKSIZE)&$FF,r0
(1) 2066/ 6001208 : 8916                		bt	.ydl_busy
(1) 2067/ 600120A : E3F0                		mov	#-MSCRL_BLKSIZE,r3
(1) 2068/ 600120C : 4115                		cmp/pl	r1
(1) 2069/ 600120E : 8B08                		bf	.reqr_b
(1) 2070/ 6001210 : C526                		mov.w	@(marsGbl_Bg_DrwReqL,gbr),r0
(1) 2071/ 6001212 : 6403                		mov	r0,r4
(1) 2072/ 6001214 : C527                		mov.w	@(marsGbl_Bg_DrwReqR,gbr),r0
(1) 2073/ 6001216 : 204B                		or	r4,r0
(1) 2074/ 6001218 : 8800                		cmp/eq	#0,r0
(1) 2075/ 600121A : 8B0D                		bf	.ydl_busy
(1) 2076/ 600121C :                     
(1) 2077/ 600121C : E002                		mov	#2,r0
(1) 2078/ 600121E : C127                		mov.w	r0,@(marsGbl_Bg_DrwReqR,gbr)
(1) 2079/ 6001220 : 7502                		add	#$02,r5
(1) 2080/ 6001222 :                     .reqr_b:
(1) 2081/ 6001222 : 4111                		cmp/pz	r1
(1) 2082/ 6001224 : 8908                		bt	.ydl_busy
(1) 2083/ 6001226 : C526                		mov.w	@(marsGbl_Bg_DrwReqL,gbr),r0
(1) 2084/ 6001228 : 6403                		mov	r0,r4
(1) 2085/ 600122A : C527                		mov.w	@(marsGbl_Bg_DrwReqR,gbr),r0
(1) 2086/ 600122C : 204B                		or	r4,r0
(1) 2087/ 600122E : 8800                		cmp/eq	#0,r0
(1) 2088/ 6001230 : 8B02                		bf	.ydl_busy
(1) 2089/ 6001232 :                     
(1) 2090/ 6001232 : E002                		mov	#2,r0
(1) 2091/ 6001234 : C126                		mov.w	r0,@(marsGbl_Bg_DrwReqL,gbr)
(1) 2092/ 6001236 : 7502                		add	#$02,r5
(1) 2093/ 6001238 :                     .ydl_busy:
(1) 2094/ 6001238 : 6063                		mov	r6,r0
(1) 2095/ 600123A : C90F                		and	#MSCRL_BLKSIZE-1,r0
(1) 2096/ 600123C : C11B                		mov.w	r0,@(marsGbl_Bg_Xset,gbr)
(1) 2097/ 600123E :                     
(1) 2098/ 600123E :                     	; Make snapshot of scroll variables
(1) 2099/ 600123E :                     	; to CACHE
(1) 2100/ 600123E : 4515                		cmp/pl	r5
(1) 2101/ 6001240 : 8B24                		bf	.dont_snap
(1) 2102/ 6001242 : E2F0                		mov	#-MSCRL_BLKSIZE,r2
(1) 2103/ 6001244 : D112                		mov	#Cach_XHead_L,r1
(1) 2104/ 6001246 : C520                		mov.w	@(marsGbl_Bg_XbgInc_L,gbr),r0
(1) 2105/ 6001248 : 2029                		and	r2,r0
(1) 2106/ 600124A : 2102                		mov	r0,@r1
(1) 2107/ 600124C : D111                		mov	#Cach_XHead_R,r1
(1) 2108/ 600124E : C521                		mov.w	@(marsGbl_Bg_XbgInc_R,gbr),r0
(1) 2109/ 6001250 : 2029                		and	r2,r0
(1) 2110/ 6001252 : 2102                		mov	r0,@r1
(1) 2111/ 6001254 : C522                		mov.w	@(marsGbl_Bg_YbgInc_D,gbr),r0
(1) 2112/ 6001256 : D110                		mov	#Cach_YHead_D,r1
(1) 2113/ 6001258 : 2029                		and	r2,r0
(1) 2114/ 600125A : 2102                		mov	r0,@r1
(1) 2115/ 600125C : C523                		mov.w	@(marsGbl_Bg_YbgInc_U,gbr),r0
(1) 2116/ 600125E : D10F                		mov	#Cach_YHead_U,r1
(1) 2117/ 6001260 : 2029                		and	r2,r0
(1) 2118/ 6001262 : 2102                		mov	r0,@r1
(1) 2119/ 6001264 : C51D                		mov.w	@(marsGbl_Bg_YFbPos_U,gbr),r0
(1) 2120/ 6001266 : D10E                		mov	#Cach_BgFbPos_U,r1
(1) 2121/ 6001268 : 2029                		and	r2,r0
(1) 2122/ 600126A : 2102                		mov	r0,@r1
(1) 2123/ 600126C : C51E                		mov.w	@(marsGbl_Bg_YFbPos_D,gbr),r0
(1) 2124/ 600126E : D10D                		mov	#Cach_BgFbPos_D,r1
(1) 2125/ 6001270 : 2029                		and	r2,r0
(1) 2126/ 6001272 : 2102                		mov	r0,@r1
(1) 2127/ 6001274 : C606                		mov	@(marsGbl_Bg_FbBase,gbr),r0
(1) 2128/ 6001276 : D10C                		mov	#Cach_BgFbPos_LR,r1
(1) 2129/ 6001278 : 2029                		and	r2,r0
(1) 2130/ 600127A : 2102                		mov	r0,@r1
(1) 2131/ 600127C :                     
(1) 2132/ 600127C : C521                		mov.w	@(marsGbl_Bg_XbgInc_R,gbr),r0
(1) 2133/ 600127E : D40B                		mov	#Cach_XHead_R,r4
(1) 2134/ 6001280 : 2039                		and	r3,r0
(1) 2135/ 6001282 : 2402                		mov	r0,@r4
(1) 2136/ 6001284 :                     ; 		mov.w	@(marsGbl_Bg_XFbPos_R,gbr),r0
(1) 2137/ 6001284 :                     ; 		mov	#Cach_BgFbPos_R,r4
(1) 2138/ 6001284 :                     ; 		and	r3,r0
(1) 2139/ 6001284 :                     ; 		mov	r0,@r4
(1) 2140/ 6001284 : C520                		mov.w	@(marsGbl_Bg_XbgInc_L,gbr),r0
(1) 2141/ 6001286 : D40A                		mov	#Cach_XHead_L,r4
(1) 2142/ 6001288 : 2039                		and	r3,r0
(1) 2143/ 600128A : 2402                		mov	r0,@r4
(1) 2144/ 600128C :                     ; 		mov.w	@(marsGbl_Bg_XFbPos_L,gbr),r0
(1) 2145/ 600128C :                     ; 		mov	#Cach_BgFbPos_L,r4
(1) 2146/ 600128C :                     ; 		and	r3,r0
(1) 2147/ 600128C :                     ; 		mov	r0,@r4
(1) 2148/ 600128C :                     
(1) 2149/ 600128C :                     .dont_snap:
(1) 2150/ 600128C :                     
(1) 2151/ 600128C : 000B                		rts
(1) 2152/ 600128E : 0009                		nop
(1) 2153/ 6001290 :                     		align 4
(1) 2154/ 6001290 : C000 03A4 C000 03A8 		ltorg
                    C000 03AC C000 03B0 
                    C000 03B4 C000 03B8 
                    C000 03BC C000 03A8 
                    C000 03A4           
(1) 2155/ 60012B4 :                     
(1) 2156/ 60012B4 :                     ; ====================================================================
(1) 2157/ 60012B4 :                     ; ----------------------------------------------------------------
(1) 2158/ 60012B4 :                     ; Slave entry
(1) 2159/ 60012B4 :                     ; ----------------------------------------------------------------
(1) 2160/ 60012B4 :                     
(1) 2161/ 60012B4 :                     		align 4
(1) 2162/ 60012B4 :                     SH2_S_Entry:
(1) 2163/ 60012B4 : DF1C                		mov.l	#CS3|$3F000,r15			; Reset stack
(1) 2164/ 60012B6 : 9145                		mov	#_FRT,r1
(1) 2165/ 60012B8 : E000                		mov     #0,r0
(1) 2166/ 60012BA : 8010                		mov.b   r0,@(0,r1)
(1) 2167/ 60012BC : E0E2                		mov     #$FFFFFFE2,r0
(1) 2168/ 60012BE : 8017                		mov.b   r0,@(7,r1)
(1) 2169/ 60012C0 : E000                		mov     #0,r0
(1) 2170/ 60012C2 : 8014                		mov.b   r0,@(4,r1)
(1) 2171/ 60012C4 : E001                		mov     #1,r0
(1) 2172/ 60012C6 : 8015                		mov.b   r0,@(5,r1)
(1) 2173/ 60012C8 : E000                		mov     #0,r0
(1) 2174/ 60012CA : 8016                		mov.b   r0,@(6,r1)
(1) 2175/ 60012CC : E001                		mov     #1,r0
(1) 2176/ 60012CE : 8011                		mov.b   r0,@(1,r1)
(1) 2177/ 60012D0 : E000                		mov     #0,r0
(1) 2178/ 60012D2 : 8013                		mov.b   r0,@(3,r1)
(1) 2179/ 60012D4 : 8012                		mov.b   r0,@(2,r1)
(1) 2180/ 60012D6 : 9036                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1) 2181/ 60012D8 : E150                		mov     #%0101<<4,r1
(1) 2182/ 60012DA : 2011                		mov.w   r1,@r0
(1) 2183/ 60012DC : 9034                		mov.l   #$FFFFFEE4,r0
(1) 2184/ 60012DE : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1) 2185/ 60012E0 : 4118                		shll8   r1
(1) 2186/ 60012E2 : 2011                		mov.w   r1,@r0
(1) 2187/ 60012E4 :                     
(1) 2188/ 60012E4 :                     ; ------------------------------------------------
(1) 2189/ 60012E4 :                     ; Wait for Genesis, report to Master SH2
(1) 2190/ 60012E4 :                     ; ------------------------------------------------
(1) 2191/ 60012E4 :                     
(1) 2192/ 60012E4 :                     .wait_md:
(1) 2193/ 60012E4 : D211                		mov 	#_sysreg+comm0,r2
(1) 2194/ 60012E6 : 6022                		mov.l	@r2,r0
(1) 2195/ 60012E8 : 8800                		cmp/eq	#0,r0
(1) 2196/ 60012EA : 8BFB                		bf	.wait_md
(1) 2197/ 60012EC : D010                		mov.l	#"SLAV",r0
(1) 2198/ 60012EE : 1202                		mov.l	r0,@(8,r2)
(1) 2199/ 60012F0 :                     
(1) 2200/ 60012F0 :                     ; ====================================================================
(1) 2201/ 60012F0 :                     ; ----------------------------------------------------------------
(1) 2202/ 60012F0 :                     ; Slave main code
(1) 2203/ 60012F0 :                     ; ----------------------------------------------------------------
(1) 2204/ 60012F0 :                     
(1) 2205/ 60012F0 :                     SH2_S_HotStart:
(1) 2206/ 60012F0 : DF0D                		mov.l	#CS3|$3F000,r15			; Reset stack
(1) 2207/ 60012F2 : DE10                		mov.l	#RAM_Mars_Global,r14		; Reset gbr
(1) 2208/ 60012F4 : 4E1E                		ldc	r14,gbr
(1) 2209/ 60012F6 : 9028                		mov.l	#$F0,r0				; Interrupts OFF
(1) 2210/ 60012F8 : 400E                		ldc	r0,sr
(1) 2211/ 60012FA : 9127                		mov.l	#_CCR,r1
(1) 2212/ 60012FC : E008                		mov	#%00001000,r0			; Cache OFF
(1) 2213/ 60012FE : 2101                		mov.w	r0,@r1
(1) 2214/ 6001300 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 2215/ 6001302 : 2101                		mov.w	r0,@r1
(1) 2216/ 6001304 : D10C                		mov	#_sysreg,r1
(1) 2217/ 6001306 : E003                		mov	#PWMIRQ_ON|CMDIRQ_ON,r0		; Enable these interrupts
(1) 2218/ 6001308 : 8011                    		mov.b	r0,@(intmask,r1)		; (Watchdog is external)
(1) 2219/ 600130A : D10C                		mov 	#CACHE_SLAVE,r1			; Transfer Slave's fast-code to CACHE
(1) 2220/ 600130C : D20C                		mov 	#$C0000000,r2
(1) 2221/ 600130E : 931E                		mov 	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r3
(1) 2222/ 6001310 :                     .copy:
(1) 2223/ 6001310 : 6016                		mov 	@r1+,r0
(1) 2224/ 6001312 : 2202                		mov 	r0,@r2
(1) 2225/ 6001314 : 7204                		add 	#4,r2
(1) 2226/ 6001316 : 4310                		dt	r3
(1) 2227/ 6001318 : 8BFA                		bf	.copy
(1) 2228/ 600131A : BBB0                		bsr	MarsSound_Init			; Init Sound
(1) 2229/ 600131C : 0009                		nop
(1) 2230/ 600131E :                     ; 		mov	#MarsMdl_Init,r0		; REMINDER: 1 meter = $10000
(1) 2231/ 600131E :                     ; 		jsr	@r0
(1) 2232/ 600131E :                     ; 		nop
(1) 2233/ 600131E :                     
(1) 2234/ 600131E : E020                		mov.l	#$20,r0				; Interrupts ON
(1) 2235/ 6001320 : 400E                		ldc	r0,sr
(1) 2236/ 6001322 :                     
(1) 2237/ 6001322 :                     ; --------------------------------------------------------
(1) 2238/ 6001322 :                     ; Loop
(1) 2239/ 6001322 :                     ; --------------------------------------------------------
(1) 2240/ 6001322 :                     
(1) 2241/ 6001322 :                     ; 		mov	#_sysreg+comm15,r1
(1) 2242/ 6001322 :                     ; .wait_s:	mov.b	@r1,r0
(1) 2243/ 6001322 :                     ; 		cmp/pz	r0
(1) 2244/ 6001322 :                     ; 		bt	.wait_s
(1) 2245/ 6001322 :                     ; 		xor	r0,r0
(1) 2246/ 6001322 :                     ; 		mov.b	r0,@r1
(1) 2247/ 6001322 : A015                		bra	slave_loop
(1) 2248/ 6001324 : 0009                		nop
(1) 2249/ 6001326 :                     		align 4
(1) 2250/ 6001328 : 0603 F000 2000 4020 		ltorg
                    534C 4156 0600 46F0 
                    2000 4000 0600 1A2C 
                    C000 0000 FE10 FEE2 
                    FEE4 00F0 FE92 0131 
(1) 2251/ 6001350 :                     
(1) 2252/ 6001350 :                     slave_loop:
(1) 2253/ 6001350 : D168                		mov	#_sysreg+comm15,r1
(1) 2254/ 6001352 : 6010                		mov.b	@r1,r0
(1) 2255/ 6001354 : C901                		and	#$01,r0
(1) 2256/ 6001356 : 8800                		cmp/eq	#0,r0
(1) 2257/ 6001358 : 890E                		bt	.TEST_1
(1) 2258/ 600135A : C9FE                		and	#%11111110,r0
(1) 2259/ 600135C :                     ; 		xor	r0,r0
(1) 2260/ 600135C : 2100                		mov.b	r0,@r1
(1) 2261/ 600135E : 4F03                		stc	sr,@-r15		; Interrupts OFF
(1) 2262/ 6001360 : 90E2                		mov	#$F0,r0
(1) 2263/ 6001362 : E100                		mov	#0,r1
(1) 2264/ 6001364 : D264                		mov	#SmpIns_Bell_Ice+6,r2
(1) 2265/ 6001366 : D365                		mov	#SmpIns_Bell_Ice+$3B2A,r3
(1) 2266/ 6001368 : E400                		mov	#0,r4
(1) 2267/ 600136A : 95DE                		mov	#$80,r5
(1) 2268/ 600136C : E600                		mov	#0,r6
(1) 2269/ 600136E : E70B                		mov	#%1011,r7
(1) 2270/ 6001370 : D063                		mov	#MarsSound_SetPwm,r0
(1) 2271/ 6001372 : 400B                		jsr	@r0
(1) 2272/ 6001374 : 0009                		nop
(1) 2273/ 6001376 :                     ; 		mov	#1,r1
(1) 2274/ 6001376 :                     ; 		mov	#SmpIns_Brass1_Low+6,r2
(1) 2275/ 6001376 :                     ; 		mov	#SmpIns_Brass1_Low+$3FD8,r3
(1) 2276/ 6001376 :                     ; 		mov	#0,r4
(1) 2277/ 6001376 :                     ; 		mov	#$30,r5
(1) 2278/ 6001376 :                     ; 		mov	#0,r6
(1) 2279/ 6001376 :                     ; 		mov	#%1011,r7
(1) 2280/ 6001376 :                     ; 		mov	#MarsSound_SetPwm,r0
(1) 2281/ 6001376 :                     ; 		jsr	@r0
(1) 2282/ 6001376 :                     ; 		nop
(1) 2283/ 6001376 :                     ; 		mov	#0,r1
(1) 2284/ 6001376 :                     ; 		mov	#PWM_STEREO+6,r2
(1) 2285/ 6001376 :                     ; 		mov	#PWM_STEREO_e,r3
(1) 2286/ 6001376 :                     ; 		mov	#0,r4
(1) 2287/ 6001376 :                     ; 		mov	#$100,r5
(1) 2288/ 6001376 :                     ; 		mov	#0,r6
(1) 2289/ 6001376 :                     ; 		mov	#%1111,r7
(1) 2290/ 6001376 :                     ; 		mov	#MarsSound_SetPwm,r0
(1) 2291/ 6001376 :                     ; 		jsr	@r0
(1) 2292/ 6001376 :                     ; 		nop
(1) 2293/ 6001376 :                     ; 		mov	#1,r1
(1) 2294/ 6001376 :                     ; 		mov	#PWM_STEREO+6,r2
(1) 2295/ 6001376 :                     ; 		mov	#PWM_STEREO_e,r3
(1) 2296/ 6001376 :                     ; 		mov	#0,r4
(1) 2297/ 6001376 :                     ; 		mov	#$100,r5
(1) 2298/ 6001376 :                     ; 		mov	#0,r6
(1) 2299/ 6001376 :                     ; 		mov	#%1111,r7
(1) 2300/ 6001376 :                     ; 		mov	#MarsSound_SetPwm,r0
(1) 2301/ 6001376 :                     ; 		jsr	@r0
(1) 2302/ 6001376 :                     ; 		nop
(1) 2303/ 6001376 : 4F07                		ldc	@r15+,sr
(1) 2304/ 6001378 :                     .TEST_1:
(1) 2305/ 6001378 :                     
(1) 2306/ 6001378 :                     	; *** GEMA PWM DRIVER
(1) 2307/ 6001378 :                     	; %RCIOxxxx
(1) 2308/ 6001378 :                     	; R - REQUEST
(1) 2309/ 6001378 :                     	;     Request new PWM channels to play from the Z80,
(1) 2310/ 6001378 :                     	;     requires usage of the next bit:
(1) 2311/ 6001378 :                     	; C - CLOCK, for the Z80-to-SH2 transfer part
(1) 2312/ 6001378 :                     	;     The Z80 will copy the pwmcom buffer to
(1) 2313/ 6001378 :                     	;     comms 0,2,4,6,8,10,12, write CLOCK and the SH2 side
(1) 2314/ 6001378 :                     	;     will copy those bytes to the MarsSnd_PwmControl buffer
(1) 2315/ 6001378 :                     	;     in packs of 4 (hardcoded on both CPUs),
(1) 2316/ 6001378 :                     	;     clears when it finished processing
(1) 2317/ 6001378 :                     	; I - PWM RV-protection enter
(1) 2318/ 6001378 :                     	;     Makes a temporal backup of the playing sample in
(1) 2319/ 6001378 :                     	;     CACHE and sets a RV-backup flag so it keeps playing
(1) 2320/ 6001378 :                     	;     the sample even if the Genesis side is doing DMA
(1) 2321/ 6001378 :                     	;     (Only for samples stored in the ROM area)
(1) 2322/ 6001378 :                     	; O - PWM RV-protection exit
(1) 2323/ 6001378 :                     	;     Set this after ALL DMA task from the Genesis side
(1) 2324/ 6001378 :                     	;     are finished.
(1) 2325/ 6001378 :                     	;
(1) 2326/ 6001378 :                     	; xxxx bits are free to use
(1) 2327/ 6001378 :                     	;
(1) 2328/ 6001378 : D95E                		mov	#_sysreg+comm15,r9	; control comm
(1) 2329/ 600137A : 6090                		mov.b	@r9,r0
(1) 2330/ 600137C : 91D5                		mov	#%10000000,r1
(1) 2331/ 600137E : 2019                		and	r1,r0
(1) 2332/ 6001380 : 3010                		cmp/eq	r1,r0
(1) 2333/ 6001382 : 8901                		bt	.non_zero
(1) 2334/ 6001384 : A09A                		bra	.no_ztrnsfr
(1) 2335/ 6001386 : 0009                		nop
(1) 2336/ 6001388 :                     .non_zero:
(1) 2337/ 6001388 :                     	; TRANSFER START
(1) 2338/ 6001388 : D75E                		mov	#MarsSnd_PwmControl,r7
(1) 2339/ 600138A : E504                		mov	#4,r5			; number of passes
(1) 2340/ 600138C :                     .wait_1:
(1) 2341/ 600138C : 0009                		nop
(1) 2342/ 600138E : 0009                		nop
(1) 2343/ 6001390 : 6090                		mov.b	@r9,r0			; wait first CLOCK
(1) 2344/ 6001392 : C940                		and	#%01000000,r0		; from Z80
(1) 2345/ 6001394 : 4015                		cmp/pl	r0
(1) 2346/ 6001396 : 8BF9                		bf	.wait_1
(1) 2347/ 6001398 : E607                		mov	#7,r6
(1) 2348/ 600139A : D85B                		mov	#_sysreg+comm0,r8
(1) 2349/ 600139C :                     .copy_1:
(1) 2350/ 600139C : 6085                		mov.w	@r8+,r0
(1) 2351/ 600139E : 2701                		mov.w	r0,@r7
(1) 2352/ 60013A0 : 4610                		dt	r6
(1) 2353/ 60013A2 : 8FFB                		bf/s	.copy_1
(1) 2354/ 60013A4 : 7702                		add	#2,r7
(1) 2355/ 60013A6 : 6090                		mov.b	@r9,r0			; tell Z80 CLK finished
(1) 2356/ 60013A8 : C9BF                		and	#%10111111,r0
(1) 2357/ 60013AA : 2900                		mov.b	r0,@r9
(1) 2358/ 60013AC : 4510                		dt	r5
(1) 2359/ 60013AE : 8BED                		bf	.wait_1
(1) 2360/ 60013B0 :                     	; *** TRANSFER END
(1) 2361/ 60013B0 :                     
(1) 2362/ 60013B0 : E100                		mov	#0,r1			; r1 - PWM slot
(1) 2363/ 60013B2 : DE56                		mov	#MarsSnd_PwmControl,r14
(1) 2364/ 60013B4 : EA07                		mov	#7,r10
(1) 2365/ 60013B6 :                     .next_chnl:
(1) 2366/ 60013B6 : 60E0                		mov.b	@r14,r0
(1) 2367/ 60013B8 : C9FF                		and	#$FF,r0
(1) 2368/ 60013BA : 8800                		cmp/eq	#0,r0
(1) 2369/ 60013BC : 8976                		bt	.no_req
(1) 2370/ 60013BE : 2DDA                		xor	r13,r13
(1) 2371/ 60013C0 : 2ED0                		mov.b	r13,@r14
(1) 2372/ 60013C2 : 6703                		mov	r0,r7
(1) 2373/ 60013C4 : C907                		and	#%111,r0
(1) 2374/ 60013C6 : 8804                		cmp/eq	#4,r0
(1) 2375/ 60013C8 : 8901                		bt	.pwm_keycut
(1) 2376/ 60013CA : 8802                		cmp/eq	#2,r0
(1) 2377/ 60013CC : 8B05                		bf	.no_keyoff
(1) 2378/ 60013CE :                     .pwm_keycut:
(1) 2379/ 60013CE : E200                		mov	#0,r2
(1) 2380/ 60013D0 : D04F                		mov	#MarsSound_PwmEnable,r0
(1) 2381/ 60013D2 : 400B                		jsr	@r0
(1) 2382/ 60013D4 : 0009                		nop
(1) 2383/ 60013D6 : A069                		bra	.no_req
(1) 2384/ 60013D8 : 0009                		nop
(1) 2385/ 60013DA :                     
(1) 2386/ 60013DA :                     	; Normal playback
(1) 2387/ 60013DA :                     .no_keyoff:
(1) 2388/ 60013DA : 6073                		mov	r7,r0
(1) 2389/ 60013DC : C810                		tst	#$10,r0
(1) 2390/ 60013DE : 890E                		bt	.no_pitchbnd
(1) 2391/ 60013E0 : 6DE3                		mov	r14,r13
(1) 2392/ 60013E2 : 7D08                		add	#8,r13		; skip COM
(1) 2393/ 60013E4 : 60D0                		mov.b	@r13,r0		; r2 - Get pitch MSB bits
(1) 2394/ 60013E6 : 7D08                		add	#8,r13
(1) 2395/ 60013E8 : C903                		and	#%11,r0
(1) 2396/ 60013EA : 4018                		shll8	r0
(1) 2397/ 60013EC : 6203                		mov	r0,r2
(1) 2398/ 60013EE : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1) 2399/ 60013F0 : 7D08                		add	#8,r13
(1) 2400/ 60013F2 : C9FF                		and	#$FF,r0
(1) 2401/ 60013F4 : 202B                		or	r2,r0
(1) 2402/ 60013F6 : 6203                		mov	r0,r2
(1) 2403/ 60013F8 : D046                		mov	#MarsSound_SetPwmPitch,r0
(1) 2404/ 60013FA : 400B                		jsr	@r0
(1) 2405/ 60013FC : 0009                		nop
(1) 2406/ 60013FE :                     .no_pitchbnd:
(1) 2407/ 60013FE : 6073                		mov	r7,r0
(1) 2408/ 6001400 : C820                		tst	#$20,r0
(1) 2409/ 6001402 : 8908                		bt	.no_volumebnd
(1) 2410/ 6001404 : 6703                		mov	r0,r7
(1) 2411/ 6001406 : 6DE3                		mov	r14,r13
(1) 2412/ 6001408 : 7D08                		add	#8,r13		; point to volume values
(1) 2413/ 600140A : 60D0                		mov.b	@r13,r0
(1) 2414/ 600140C : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1) 2415/ 600140E : 6203                		mov	r0,r2
(1) 2416/ 6001410 : D041                		mov	#MarsSound_SetVolume,r0
(1) 2417/ 6001412 : 400B                		jsr	@r0
(1) 2418/ 6001414 : 0009                		nop
(1) 2419/ 6001416 :                     .no_volumebnd:
(1) 2420/ 6001416 :                     
(1) 2421/ 6001416 :                     
(1) 2422/ 6001416 :                     	; TODO: Change reading struct if
(1) 2423/ 6001416 :                     	; it gets too CPU intensive
(1) 2424/ 6001416 : 6073                		mov	r7,r0
(1) 2425/ 6001418 : C801                		tst	#$01,r0		; key-on?
(1) 2426/ 600141A : 8947                		bt	.no_req
(1) 2427/ 600141C : 6DE3                		mov	r14,r13
(1) 2428/ 600141E : 7D08                		add	#8,r13		; skip COM
(1) 2429/ 6001420 :                     
(1) 2430/ 6001420 : 60D0                		mov.b	@r13,r0
(1) 2431/ 6001422 : 7D08                		add	#8,r13
(1) 2432/ 6001424 : 6503                		mov	r0,r5
(1) 2433/ 6001426 : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1) 2434/ 6001428 : 6603                		mov	r0,r6		; r6 - Volume
(1) 2435/ 600142A : 6053                		mov	r5,r0		; r5 - Get pitch MSB bits
(1) 2436/ 600142C : C903                		and	#%00000011,r0
(1) 2437/ 600142E : 4018                		shll8	r0
(1) 2438/ 6001430 : 6503                		mov	r0,r5
(1) 2439/ 6001432 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1) 2440/ 6001434 : 7D08                		add	#8,r13
(1) 2441/ 6001436 : C9FF                		and	#$FF,r0
(1) 2442/ 6001438 : 205B                		or	r5,r0
(1) 2443/ 600143A : 6503                		mov	r0,r5
(1) 2444/ 600143C :                     
(1) 2445/ 600143C : 60D0                		mov.b	@r13,r0		; flags | SH2 BANK
(1) 2446/ 600143E : 7D08                		add	#8,r13
(1) 2447/ 6001440 : 6703                		mov	r0,r7		; r7 - Flags
(1) 2448/ 6001442 : C90F                		and	#%1111,r0
(1) 2449/ 6001444 : 6803                		mov	r0,r8		; r8 - SH2 section (ROM or SDRAM)
(1) 2450/ 6001446 : 4828                		shll16	r8
(1) 2451/ 6001448 : 4818                		shll8	r8
(1) 2452/ 600144A : 4709                		shlr2	r7
(1) 2453/ 600144C : 4709                		shlr2	r7
(1) 2454/ 600144E : 60D0                		mov.b	@r13,r0		; r2 - START point
(1) 2455/ 6001450 : 7D08                		add	#8,r13
(1) 2456/ 6001452 : C9FF                		and	#$FF,r0
(1) 2457/ 6001454 : 4028                		shll16	r0
(1) 2458/ 6001456 : 6303                		mov	r0,r3
(1) 2459/ 6001458 : 60D0                		mov.b	@r13,r0
(1) 2460/ 600145A : 7D08                		add	#8,r13
(1) 2461/ 600145C : C9FF                		and	#$FF,r0
(1) 2462/ 600145E : 4018                		shll8	r0
(1) 2463/ 6001460 : 6203                		mov	r0,r2
(1) 2464/ 6001462 : 60D0                		mov.b	@r13,r0
(1) 2465/ 6001464 : 7D08                		add	#8,r13
(1) 2466/ 6001466 : C9FF                		and	#$FF,r0
(1) 2467/ 6001468 : 203B                		or	r3,r0
(1) 2468/ 600146A : 202B                		or	r2,r0
(1) 2469/ 600146C : 6203                		mov	r0,r2
(1) 2470/ 600146E : 6423                		mov	r2,r4		; r4 - START copy
(1) 2471/ 6001470 : 228B                		or	r8,r2		; add CS2
(1) 2472/ 6001472 : 6024                		mov.b	@r2+,r0		; r3 - Length
(1) 2473/ 6001474 : C9FF                		and	#$FF,r0
(1) 2474/ 6001476 : 6303                		mov	r0,r3
(1) 2475/ 6001478 : 6024                		mov.b	@r2+,r0
(1) 2476/ 600147A : C9FF                		and	#$FF,r0
(1) 2477/ 600147C : 4018                		shll8	r0
(1) 2478/ 600147E : 230B                		or	r0,r3
(1) 2479/ 6001480 : 6024                		mov.b	@r2+,r0
(1) 2480/ 6001482 : C9FF                		and	#$FF,r0
(1) 2481/ 6001484 : 4028                		shll16	r0
(1) 2482/ 6001486 : 230B                		or	r0,r3
(1) 2483/ 6001488 : 334C                		add	r4,r3		; add end+start
(1) 2484/ 600148A : 238B                		or	r8,r3		; add CS2
(1) 2485/ 600148C : 6024                		mov.b	@r2+,r0		; get loop point
(1) 2486/ 600148E : C9FF                		and	#$FF,r0
(1) 2487/ 6001490 : 6403                		mov	r0,r4
(1) 2488/ 6001492 : 6024                		mov.b	@r2+,r0
(1) 2489/ 6001494 : C9FF                		and	#$FF,r0
(1) 2490/ 6001496 : 4018                		shll8	r0
(1) 2491/ 6001498 : 240B                		or	r0,r4
(1) 2492/ 600149A : 6024                		mov.b	@r2+,r0
(1) 2493/ 600149C : C9FF                		and	#$FF,r0
(1) 2494/ 600149E : 4028                		shll16	r0
(1) 2495/ 60014A0 : 240B                		or	r0,r4
(1) 2496/ 60014A2 : 9043                		mov	#%11111100,r0
(1) 2497/ 60014A4 : 2809                		and	r0,r8
(1) 2498/ 60014A6 : D016                		mov	#MarsSound_SetPwm,r0
(1) 2499/ 60014A8 : 400B                		jsr	@r0
(1) 2500/ 60014AA : 0009                		nop
(1) 2501/ 60014AC :                     .no_req:
(1) 2502/ 60014AC : 7101                		add	#1,r1		; next PWM slot
(1) 2503/ 60014AE : 4A10                		dt	r10
(1) 2504/ 60014B0 : 8F81                		bf/s	.next_chnl
(1) 2505/ 60014B2 : 7E01                		add	#1,r14		; next PWM entry
(1) 2506/ 60014B4 : D10F                		mov	#_sysreg+comm15,r1
(1) 2507/ 60014B6 : 6010                		mov.b	@r1,r0		; Now we are free.
(1) 2508/ 60014B8 : C97F                		and	#%01111111,r0
(1) 2509/ 60014BA : 2100                		mov.b	r0,@r1
(1) 2510/ 60014BC :                     .no_ztrnsfr:
(1) 2511/ 60014BC :                     
(1) 2512/ 60014BC :                     	; PWM backup enter/exit bits
(1) 2513/ 60014BC :                     	; In case Genesis side wants to do
(1) 2514/ 60014BC :                     	; DMA transfers
(1) 2515/ 60014BC : D90D                		mov	#_sysreg+comm15,r9
(1) 2516/ 60014BE : 6090                		mov.b	@r9,r0
(1) 2517/ 60014C0 : C920                		and	#%00100000,r0
(1) 2518/ 60014C2 : 8820                		cmp/eq	#%00100000,r0
(1) 2519/ 60014C4 : 8B08                		bf	.refill_in
(1) 2520/ 60014C6 : D015                		mov	#MarsSnd_Refill,r0
(1) 2521/ 60014C8 : 400B                		jsr	@r0
(1) 2522/ 60014CA : 0009                		nop
(1) 2523/ 60014CC : D114                		mov	#MarsSnd_RvMode,r1
(1) 2524/ 60014CE : E001                		mov	#1,r0
(1) 2525/ 60014D0 : 2102                		mov	r0,@r1
(1) 2526/ 60014D2 : 6090                		mov.b	@r9,r0			; Refill is ready.
(1) 2527/ 60014D4 : C9DF                		and	#%11011111,r0
(1) 2528/ 60014D6 : 2900                		mov.b	r0,@r9
(1) 2529/ 60014D8 :                     .refill_in:
(1) 2530/ 60014D8 : D906                		mov	#_sysreg+comm15,r9
(1) 2531/ 60014DA : 6090                		mov.b	@r9,r0
(1) 2532/ 60014DC : C910                		and	#%00010000,r0
(1) 2533/ 60014DE : 8810                		cmp/eq	#%00010000,r0
(1) 2534/ 60014E0 : 8B05                		bf	.refill_out
(1) 2535/ 60014E2 : D110                		mov	#MarsSnd_RvMode,r1
(1) 2536/ 60014E4 : E000                		mov	#0,r0
(1) 2537/ 60014E6 : 2102                		mov	r0,@r1
(1) 2538/ 60014E8 : 6090                		mov.b	@r9,r0
(1) 2539/ 60014EA : C9EF                		and	#%11101111,r0
(1) 2540/ 60014EC : 2900                		mov.b	r0,@r9
(1) 2541/ 60014EE :                     .refill_out:
(1) 2542/ 60014EE :                     	; *** END PWM driver for GEMA
(1) 2543/ 60014EE :                     
(1) 2544/ 60014EE : AF2F                		bra	slave_loop
(1) 2545/ 60014F0 : 0009                		nop
(1) 2546/ 60014F2 :                     		align 4
(1) 2547/ 60014F4 : 2000 402F 0205 A7F6 		ltorg
                    0205 E31A 0600 0AB0 
                    0600 AA30 2000 4020 
                    0600 AA30 0600 0B1C 
                    0600 0AEC 0600 0B04 
                    0600 0B2C C000 04BC 
                    C000 04BC 00F0 0080 
                    00FC                
(1) 2548/ 600152E :                     
(1) 2549/ 600152E :                     		align 4
(1) 2550/ 6001530 :                     ; this_polygon:
(1) 2551/ 6001530 :                     ; 		dc.w $8000
(1) 2552/ 6001530 :                     ; 		dc.w 320
(1) 2553/ 6001530 :                     ; 		dc.l TESTMARS_BG
(1) 2554/ 6001530 :                     ; dest_data:	dc.w  32,-32
(1) 2555/ 6001530 :                     ; 		dc.w -32,-32
(1) 2556/ 6001530 :                     ; 		dc.w -32, 32
(1) 2557/ 6001530 :                     ; 		dc.w  32, 32
(1) 2558/ 6001530 :                     ; 		dc.w 274, 79
(1) 2559/ 6001530 :                     ; 		dc.w 199, 79
(1) 2560/ 6001530 :                     ; 		dc.w 199,142-1
(1) 2561/ 6001530 :                     ; 		dc.w 274,142-1
(1) 2562/ 6001530 : 0000 0000           rot_angle	dc.l 0
(1) 2563/ 6001534 :                     ;
(1) 2564/ 6001534 :                     ;
(1) 2565/ 6001534 :                     
(1) 2566/ 6001534 :                     Rotate_Point
(1) 2567/ 6001534 :                     
(1) 2568/ 6001534 : 4708                	shll2	r7
(1) 2569/ 6001536 : 6073                	mov	r7,r0
(1) 2570/ 6001538 : D10C                	mov	#sin_table,r1
(1) 2571/ 600153A : D20D                	mov	#sin_table+$800,r2
(1) 2572/ 600153C : 031E                	mov	@(r0,r1),r3
(1) 2573/ 600153E : 042E                	mov	@(r0,r2),r4
(1) 2574/ 6001540 :                     
(1) 2575/ 6001540 : 345D                	dmuls.l	r5,r4		; x cos @
(1) 2576/ 6001542 : 001A                	sts	macl,r0
(1) 2577/ 6001544 : 010A                	sts	mach,r1
(1) 2578/ 6001546 : 201D                	xtrct	r1,r0
(1) 2579/ 6001548 : 336D                	dmuls.l	r6,r3		; y sin @
(1) 2580/ 600154A : 011A                	sts	macl,r1
(1) 2581/ 600154C : 020A                	sts	mach,r2
(1) 2582/ 600154E : 212D                	xtrct	r2,r1
(1) 2583/ 6001550 : 301C                	add	r1,r0
(1) 2584/ 6001552 :                     
(1) 2585/ 6001552 : 633B                	neg	r3,r3
(1) 2586/ 6001554 : 335D                	dmuls.l	r5,r3		; x -sin @
(1) 2587/ 6001556 : 011A                	sts	macl,r1
(1) 2588/ 6001558 : 020A                	sts	mach,r2
(1) 2589/ 600155A : 212D                	xtrct	r2,r1
(1) 2590/ 600155C : 346D                	dmuls.l	r6,r4		; y cos @
(1) 2591/ 600155E : 021A                	sts	macl,r2
(1) 2592/ 6001560 : 030A                	sts	mach,r3
(1) 2593/ 6001562 : 223D                	xtrct	r3,r2
(1) 2594/ 6001564 : 312C                	add	r2,r1
(1) 2595/ 6001566 :                     
(1) 2596/ 6001566 : 000B                	rts
(1) 2597/ 6001568 : 0009                	nop
(1) 2598/ 600156A :                     	align 4
(1) 2599/ 600156C : 0600 1EF0 0600 26F0 	ltorg
(1) 2600/ 6001574 :                     
(1) 2601/ 6001574 :                     ; ; ------------------------------------------------
(1) 2602/ 6001574 :                     ; ; Process task requests from Genesis
(1) 2603/ 6001574 :                     ; ; ------------------------------------------------
(1) 2604/ 6001574 :                     ;
(1) 2605/ 6001574 :                     ; 		mov	#_sysreg+comm15,r1
(1) 2606/ 6001574 :                     ; 		mov.b	@r1,r0
(1) 2607/ 6001574 :                     ; 		and	#$80,r0
(1) 2608/ 6001574 :                     ; 		cmp/eq	#0,r0
(1) 2609/ 6001574 :                     ; 		bt	.no_req
(1) 2610/ 6001574 :                     ; 		mov	#MAX_MDTASKS,r13
(1) 2611/ 6001574 :                     ; 		mov	#RAM_Mars_MdTasksFifo_S,r14
(1) 2612/ 6001574 :                     ; .next_req:
(1) 2613/ 6001574 :                     ; 		mov	r13,@-r15
(1) 2614/ 6001574 :                     ; 		mov	@r14,r0
(1) 2615/ 6001574 :                     ; 		cmp/eq	#0,r0
(1) 2616/ 6001574 :                     ; 		bt	.no_task
(1) 2617/ 6001574 :                     ; 		jsr	@r0
(1) 2618/ 6001574 :                     ; 		nop
(1) 2619/ 6001574 :                     ; 		xor	r0,r0
(1) 2620/ 6001574 :                     ; 		mov	r0,@r14
(1) 2621/ 6001574 :                     ; .no_task:
(1) 2622/ 6001574 :                     ; 		mov	#MAX_MDTSKARG*4,r0
(1) 2623/ 6001574 :                     ; 		mov	@r15+,r13
(1) 2624/ 6001574 :                     ; 		dt	r13
(1) 2625/ 6001574 :                     ; 		bf/s	.next_req
(1) 2626/ 6001574 :                     ; 		add	r0,r14
(1) 2627/ 6001574 :                     ; 		mov	#_sysreg+comm15,r1
(1) 2628/ 6001574 :                     ; 		mov.b	@r1,r0
(1) 2629/ 6001574 :                     ; 		and	#$7F,r0
(1) 2630/ 6001574 :                     ; 		mov.b	r0,@r1
(1) 2631/ 6001574 :                     ; .no_req:
(1) 2632/ 6001574 :                     ; 		mov	#_sysreg+comm15,r1
(1) 2633/ 6001574 :                     ; 		mov.b	@r1,r0
(1) 2634/ 6001574 :                     ; 		and	#$7F,r0
(1) 2635/ 6001574 :                     ; 		cmp/eq	#1,r0
(1) 2636/ 6001574 :                     ; 		bf	slave_loop
(1) 2637/ 6001574 :                     
(1) 2638/ 6001574 :                     ; --------------------------------------------------------
(1) 2639/ 6001574 :                     ; Start building polygons from models
(1) 2640/ 6001574 :                     ;
(1) 2641/ 6001574 :                     ; *** CAMERA ANIMATION IS DONE ON THE 68K ***
(1) 2642/ 6001574 :                     ; --------------------------------------------------------
(1) 2643/ 6001574 :                     
(1) 2644/ 6001574 :                     ; 		mov	#0,r0
(1) 2645/ 6001574 :                     ; 		mov.w	r0,@(marsGbl_MdlFacesCntr,gbr)
(1) 2646/ 6001574 :                     ; 		mov 	#RAM_Mars_Polygons_0,r1
(1) 2647/ 6001574 :                     ; 		mov	#RAM_Mars_Plgn_ZList_0,r2
(1) 2648/ 6001574 :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0
(1) 2649/ 6001574 :                     ; 		tst     #1,r0
(1) 2650/ 6001574 :                     ; 		bt	.go_mdl
(1) 2651/ 6001574 :                     ; 		mov 	#RAM_Mars_Polygons_1,r1
(1) 2652/ 6001574 :                     ; 		mov	#RAM_Mars_Plgn_ZList_1,r2
(1) 2653/ 6001574 :                     ; .go_mdl:
(1) 2654/ 6001574 :                     ; 		mov	r1,r0
(1) 2655/ 6001574 :                     ; 		mov	r0,@(marsGbl_CurrFacePos,gbr)
(1) 2656/ 6001574 :                     ; 		mov	r2,r0
(1) 2657/ 6001574 :                     ; 		mov	r0,@(marsGbl_CurrZList,gbr)
(1) 2658/ 6001574 :                     ; 		mov	#$FFFFFE80,r1
(1) 2659/ 6001574 :                     ; 		mov.w	#$5A7F,r0			; Watchdog wait timer
(1) 2660/ 6001574 :                     ; 		mov.w	r0,@r1
(1) 2661/ 6001574 :                     ; 		mov.w	#$A538,r0			; Watchdog ON
(1) 2662/ 6001574 :                     ; 		mov.w	r0,@r1
(1) 2663/ 6001574 :                     ;
(1) 2664/ 6001574 :                     ; ; ----------------------------------------
(1) 2665/ 6001574 :                     ;
(1) 2666/ 6001574 :                     ; 		mov	#_CCR,r1			; <-- Required for Watchdog
(1) 2667/ 6001574 :                     ; 		mov	#%00001000,r0			; Two-way mode
(1) 2668/ 6001574 :                     ; 		mov.w	r0,@r1
(1) 2669/ 6001574 :                     ; 		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 2670/ 6001574 :                     ; 		mov.w	r0,@r1
(1) 2671/ 6001574 :                     ; 		mov	#MarsLay_Read,r0		; Build layout inside camera
(1) 2672/ 6001574 :                     ; 		jsr	@r0				; takes 9 object slots
(1) 2673/ 6001574 :                     ; 		nop
(1) 2674/ 6001574 :                     ; 		mov	#RAM_Mars_Objects,r14		; Build all objects
(1) 2675/ 6001574 :                     ; 		mov	#MAX_MODELS,r13
(1) 2676/ 6001574 :                     ; .loop:
(1) 2677/ 6001574 :                     ; 		mov	@(mdl_data,r14),r0		; Object model data == 0 or -1?
(1) 2678/ 6001574 :                     ; 		cmp/pl	r0
(1) 2679/ 6001574 :                     ; 		bf	.invlid
(1) 2680/ 6001574 :                     ; 		mov	#MarsMdl_ReadModel,r0
(1) 2681/ 6001574 :                     ; 		jsr	@r0
(1) 2682/ 6001574 :                     ; 		mov	r13,@-r15
(1) 2683/ 6001574 :                     ; 		mov	@r15+,r13
(1) 2684/ 6001574 :                     ; 		mov	#0,r0
(1) 2685/ 6001574 :                     ; 		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0	; Ran out of space to store faces?
(1) 2686/ 6001574 :                     ; 		mov	#MAX_MPLGN,r1
(1) 2687/ 6001574 :                     ; 		cmp/ge	r1,r0
(1) 2688/ 6001574 :                     ; 		bt	.skip
(1) 2689/ 6001574 :                     ; .invlid:
(1) 2690/ 6001574 :                     ; 		dt	r13
(1) 2691/ 6001574 :                     ; 		bf/s	.loop
(1) 2692/ 6001574 :                     ; 		add	#sizeof_mdlobj,r14
(1) 2693/ 6001574 :                     ; .skip:
(1) 2694/ 6001574 :                     ; 		mov	#1,r0
(1) 2695/ 6001574 :                     ; 		mov.w	r0,@(marsGbl_ZSortReq,gbr)
(1) 2696/ 6001574 :                     ;
(1) 2697/ 6001574 :                     ; ; ----------------------------------------
(1) 2698/ 6001574 :                     ;
(1) 2699/ 6001574 :                     ; .wait_z:
(1) 2700/ 6001574 :                     ; 		mov.w	@(marsGbl_ZSortReq,gbr),r0
(1) 2701/ 6001574 :                     ; 		cmp/eq	#1,r0
(1) 2702/ 6001574 :                     ; 		bt	.wait_z
(1) 2703/ 6001574 :                     ; 		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1) 2704/ 6001574 :                     ; 		mov.w   #$A518,r0
(1) 2705/ 6001574 :                     ; 		mov.w   r0,@r1
(1) 2706/ 6001574 :                     ;
(1) 2707/ 6001574 :                     ; ; ----------------------------------------
(1) 2708/ 6001574 :                     ;
(1) 2709/ 6001574 :                     ; ; 		mov 	#RAM_Mars_Plgn_ZList_0,r14
(1) 2710/ 6001574 :                     ; 		mov 	#RAM_Mars_PlgnNum_0,r13
(1) 2711/ 6001574 :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0
(1) 2712/ 6001574 :                     ; 		tst     #1,r0
(1) 2713/ 6001574 :                     ; 		bt	.page_2
(1) 2714/ 6001574 :                     ; ; 		mov 	#RAM_Mars_Plgn_ZList_1,r14
(1) 2715/ 6001574 :                     ; 		mov 	#RAM_Mars_PlgnNum_1,r13
(1) 2716/ 6001574 :                     ; .page_2:
(1) 2717/ 6001574 :                     ; 		mov.w	@(marsGbl_MdlFacesCntr,gbr),r0
(1) 2718/ 6001574 :                     ; 		mov.w	r0,@r13
(1) 2719/ 6001574 :                     ;
(1) 2720/ 6001574 :                     ; 		mov	#_sysreg+comm2,r4		; DEBUG COUNTER
(1) 2721/ 6001574 :                     ; ; 		mov	#0,r0
(1) 2722/ 6001574 :                     ; 		mov.w	r0,@r4
(1) 2723/ 6001574 :                     ; 		mov	#_sysreg+comm14,r2
(1) 2724/ 6001574 :                     ; .mstr_busy:
(1) 2725/ 6001574 :                     ; 		mov.b	@r2,r0
(1) 2726/ 6001574 :                     ; 		and	#$7F,r0
(1) 2727/ 6001574 :                     ; 		cmp/eq	#0,r0
(1) 2728/ 6001574 :                     ; 		bf	.mstr_busy			; Skip frame
(1) 2729/ 6001574 :                     ; 		mov.w	@(marsGbl_PlgnBuffNum,gbr),r0	; Swap polygon buffer
(1) 2730/ 6001574 :                     ;  		xor	#1,r0
(1) 2731/ 6001574 :                     ;  		mov.w	r0,@(marsGbl_PlgnBuffNum,gbr)
(1) 2732/ 6001574 :                     ;  		mov	#1,r1				; Set task $01 to Master
(1) 2733/ 6001574 :                     ; 		mov.b	@r2,r0
(1) 2734/ 6001574 :                     ; 		and	#$80,r0
(1) 2735/ 6001574 :                     ; 		or	r1,r0
(1) 2736/ 6001574 :                     ; 		mov.b	r0,@r2
(1) 2737/ 6001574 :                     ;
(1) 2738/ 6001574 :                     ; 		mov	#_sysreg+comm15,r1
(1) 2739/ 6001574 :                     ; 		mov.b	@r1,r0
(1) 2740/ 6001574 :                     ; 		and	#$80,r0
(1) 2741/ 6001574 :                     ; 		mov.b	r0,@r1
(1) 2742/ 6001574 :                     
(1) 2743/ 6001574 :                     ; ====================================================================
(1) 2744/ 6001574 :                     ; --------------------------------------------------------
(1) 2745/ 6001574 :                     ; Task list for MD-to-MARS tasks, call these 68k side
(1) 2746/ 6001574 :                     ; with the respective arguments
(1) 2747/ 6001574 :                     ;
(1) 2748/ 6001574 :                     ; *** 68k EXAMPLES ***
(1) 2749/ 6001574 :                     ;
(1) 2750/ 6001574 :                     ; Single task:
(1) 2751/ 6001574 :                     ; 	move.l	#CmdTaskMd_SetBitmap,d0		; 32X display ON
(1) 2752/ 6001574 :                     ; 	moveq	#1,d1
(1) 2753/ 6001574 :                     ; 	bsr	System_MdMars_MstAddTask
(1) 2754/ 6001574 :                     ;
(1) 2755/ 6001574 :                     ; Queued task:
(1) 2756/ 6001574 :                     ; 	move.l	#Palette_Intro,d1
(1) 2757/ 6001574 :                     ; 	moveq	#0,d2
(1) 2758/ 6001574 :                     ; 	mov.w	#16,d3
(1) 2759/ 6001574 :                     ; 	moveq	#0,d4
(1) 2760/ 6001574 :                     ; 	move.l	#CmdTaskMd_LoadSPal,d0		; Load palette
(1) 2761/ 6001574 :                     ; 	bsr	System_MdMars_MstAddTask
(1) 2762/ 6001574 :                     ;	; then add more requests
(1) 2763/ 6001574 :                     ; 	bsr	System_MdMars_MstSendAll	; <-- Send all and wait
(1) 2764/ 6001574 :                     ; 	; or
(1) 2765/ 6001574 :                     ; 	bsr	System_MdMars_MstSendDrop	; <-- Send all but skip if busy
(1) 2766/ 6001574 :                     ;
(1) 2767/ 6001574 :                     ; Mst: for Master, processes until all draw-tasks finished
(1) 2768/ 6001574 :                     ; Slv: for Slave, processes after sorting model faces
(1) 2769/ 6001574 :                     ; --------------------------------------------------------
(1) 2770/ 6001574 :                     
(1) 2771/ 6001574 :                     		align 4
(1) 2772/ 6001574 :                     
(1) 2773/ 6001574 :                     ; ------------------------------------------------
(1) 2774/ 6001574 :                     ; CALLS EXCLUSIVE TO MASTER CPU
(1) 2775/ 6001574 :                     ; ------------------------------------------------
(1) 2776/ 6001574 :                     
(1) 2777/ 6001574 :                     ; ------------------------------------------------
(1) 2778/ 6001574 :                     ; Set SuperVDP bitmap value
(1) 2779/ 6001574 :                     ;
(1) 2780/ 6001574 :                     ; @($04,r14) - SuperVDP bitmap number (0-3)
(1) 2781/ 6001574 :                     ; ------------------------------------------------
(1) 2782/ 6001574 :                     
(1) 2783/ 6001574 :                     CmdTaskMd_SetBitmap:
(1) 2784/ 6001574 : D108                		mov 	#_vdpreg,r1
(1) 2785/ 6001576 : 8515                .wait_fb:	mov.w   @($A,r1),r0
(1) 2786/ 6001578 : C802                		tst     #2,r0
(1) 2787/ 600157A : 8BFC                		bf      .wait_fb
(1) 2788/ 600157C : 50E1                		mov	@($04,r14),r0
(1) 2789/ 600157E : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 2790/ 6001580 : 000B                		rts
(1) 2791/ 6001582 : 0009                		nop
(1) 2792/ 6001584 :                     		align 4
(1) 2793/ 6001584 :                     
(1) 2794/ 6001584 :                     ; ------------------------------------------------
(1) 2795/ 6001584 :                     ; Load palette to SuperVDP from MD
(1) 2796/ 6001584 :                     ;
(1) 2797/ 6001584 :                     ; @($04,r14) - Palette data
(1) 2798/ 6001584 :                     ; @($08,r14) - Start from
(1) 2799/ 6001584 :                     ; @($0C,r14) - Number of colors
(1) 2800/ 6001584 :                     ; @($10,r14) - OR value
(1) 2801/ 6001584 :                     ; ------------------------------------------------
(1) 2802/ 6001584 :                     
(1) 2803/ 6001584 :                     CmdTaskMd_LoadSPal:
(1) 2804/ 6001584 : 6DE3                		mov	r14,r13
(1) 2805/ 6001586 : 7D04                		add	#4,r13
(1) 2806/ 6001588 : 61D6                		mov	@r13+,r1
(1) 2807/ 600158A : 62D6                		mov	@r13+,r2
(1) 2808/ 600158C : 63D6                		mov	@r13+,r3
(1) 2809/ 600158E : 64D6                		mov	@r13+,r4
(1) 2810/ 6001590 : D002                		mov	#MarsVideo_LoadPal,r0
(1) 2811/ 6001592 : 402B                		jmp	@r0
(1) 2812/ 6001594 : 0009                		nop
(1) 2813/ 6001596 :                     		align 4
(1) 2814/ 6001598 :                     
(1) 2815/ 6001598 :                     ; ------------------------------------------------
(1) 2816/ 6001598 :                     ; CALLS EXCLUSIVE TO SLAVE CPU
(1) 2817/ 6001598 :                     ; ------------------------------------------------
(1) 2818/ 6001598 :                     
(1) 2819/ 6001598 :                     ; ; ------------------------------------------------
(1) 2820/ 6001598 :                     ; ; Make new object and insert it to specific slot
(1) 2821/ 6001598 :                     ; ;
(1) 2822/ 6001598 :                     ; ; @($04,r14) - Object slot
(1) 2823/ 6001598 :                     ; ; @($08,r14) - Object data
(1) 2824/ 6001598 :                     ; ; @($0C,r14) - Object animation data
(1) 2825/ 6001598 :                     ; ; @($10,r14) - Object animation speed
(1) 2826/ 6001598 :                     ; ; @($14,r14) - Object options:
(1) 2827/ 6001598 :                     ; ;	       %????????????????????????pppppppp
(1) 2828/ 6001598 :                     ; ;		p - index pixel increment value
(1) 2829/ 6001598 :                     ; ; ------------------------------------------------
(1) 2830/ 6001598 :                     ;
(1) 2831/ 6001598 :                     ; CmdTaskMd_ObjectSet:
(1) 2832/ 6001598 :                     ; 		mov	#RAM_Mars_Objects+(sizeof_mdlobj*9),r12
(1) 2833/ 6001598 :                     ; 		mov	r14,r13
(1) 2834/ 6001598 :                     ; 		add	#4,r13
(1) 2835/ 6001598 :                     ; 		mov	@r13+,r0
(1) 2836/ 6001598 :                     ; 		mov	#sizeof_mdlobj,r1
(1) 2837/ 6001598 :                     ; 		mulu	r1,r0
(1) 2838/ 6001598 :                     ; 		sts	macl,r0
(1) 2839/ 6001598 :                     ; 		add	r0,r12
(1) 2840/ 6001598 :                     ; 		xor	r0,r0
(1) 2841/ 6001598 :                     ; 		mov	@r13+,r1
(1) 2842/ 6001598 :                     ; 		mov	r1,@(mdl_data,r12)
(1) 2843/ 6001598 :                     ; 		mov	@r13+,r1
(1) 2844/ 6001598 :                     ; 		mov	r1,@(mdl_animdata,r12)
(1) 2845/ 6001598 :                     ; 		mov	@r13+,r1
(1) 2846/ 6001598 :                     ; 		mov	r1,@(mdl_animspd,r12)
(1) 2847/ 6001598 :                     ; 		mov	@r13+,r1
(1) 2848/ 6001598 :                     ; 		mov	r1,@(mdl_option,r12)
(1) 2849/ 6001598 :                     ; 		xor	r0,r0
(1) 2850/ 6001598 :                     ; 		mov	r0,@(mdl_x_pos,r12)
(1) 2851/ 6001598 :                     ; 		mov	r0,@(mdl_y_pos,r12)
(1) 2852/ 6001598 :                     ; 		mov	r0,@(mdl_z_pos,r12)
(1) 2853/ 6001598 :                     ; 		mov	r0,@(mdl_x_rot,r12)
(1) 2854/ 6001598 :                     ; 		mov	r0,@(mdl_y_rot,r12)
(1) 2855/ 6001598 :                     ; 		mov	r0,@(mdl_z_rot,r12)
(1) 2856/ 6001598 :                     ; 		mov	r0,@(mdl_animframe,r12)
(1) 2857/ 6001598 :                     ; 		mov	r0,@(mdl_animtimer,r12)
(1) 2858/ 6001598 :                     ; 		rts
(1) 2859/ 6001598 :                     ; 		nop
(1) 2860/ 6001598 :                     ; 		align 4
(1) 2861/ 6001598 :                     ;
(1) 2862/ 6001598 :                     ; ; ------------------------------------------------
(1) 2863/ 6001598 :                     ; ; Move/Rotate object from slot
(1) 2864/ 6001598 :                     ; ;
(1) 2865/ 6001598 :                     ; ; @($04,r14) - Object slot
(1) 2866/ 6001598 :                     ; ; @($08,r14) - Object X pos
(1) 2867/ 6001598 :                     ; ; @($0C,r14) - Object Y pos
(1) 2868/ 6001598 :                     ; ; @($10,r14) - Object Z pos
(1) 2869/ 6001598 :                     ; ; @($14,r14) - Object X rot
(1) 2870/ 6001598 :                     ; ; @($18,r14) - Object Y rot
(1) 2871/ 6001598 :                     ; ; @($1C,r14) - Object Z rot
(1) 2872/ 6001598 :                     ; ; ------------------------------------------------
(1) 2873/ 6001598 :                     ;
(1) 2874/ 6001598 :                     ; CmdTaskMd_ObjectPos:
(1) 2875/ 6001598 :                     ; 		mov	#RAM_Mars_Objects+(sizeof_mdlobj*9),r12
(1) 2876/ 6001598 :                     ; 		mov	r14,r13
(1) 2877/ 6001598 :                     ; 		add	#4,r13
(1) 2878/ 6001598 :                     ; 		mov	@r13+,r0
(1) 2879/ 6001598 :                     ; 		mov	#sizeof_mdlobj,r1
(1) 2880/ 6001598 :                     ; 		mulu	r1,r0
(1) 2881/ 6001598 :                     ; 		sts	macl,r0
(1) 2882/ 6001598 :                     ; 		add	r0,r12
(1) 2883/ 6001598 :                     ; 		mov	@r13+,r1
(1) 2884/ 6001598 :                     ; 		mov	@r13+,r2
(1) 2885/ 6001598 :                     ; 		mov	@r13+,r3
(1) 2886/ 6001598 :                     ; 		mov	@r13+,r4
(1) 2887/ 6001598 :                     ; 		mov	@r13+,r5
(1) 2888/ 6001598 :                     ; 		mov	@r13+,r6
(1) 2889/ 6001598 :                     ; 		mov	r1,@(mdl_x_pos,r12)
(1) 2890/ 6001598 :                     ; 		mov	r2,@(mdl_y_pos,r12)
(1) 2891/ 6001598 :                     ; 		mov	r3,@(mdl_z_pos,r12)
(1) 2892/ 6001598 :                     ; 		mov	r4,@(mdl_x_rot,r12)
(1) 2893/ 6001598 :                     ; 		mov	r5,@(mdl_y_rot,r12)
(1) 2894/ 6001598 :                     ; 		mov	r6,@(mdl_z_rot,r12)
(1) 2895/ 6001598 :                     ; 		rts
(1) 2896/ 6001598 :                     ; 		nop
(1) 2897/ 6001598 :                     ; 		align 4
(1) 2898/ 6001598 :                     ;
(1) 2899/ 6001598 :                     ; ; ------------------------------------------------
(1) 2900/ 6001598 :                     ; ; Clear ALL objects, including layout
(1) 2901/ 6001598 :                     ; ; ------------------------------------------------
(1) 2902/ 6001598 :                     ;
(1) 2903/ 6001598 :                     ; CmdTaskMd_ObjectClrAll:
(1) 2904/ 6001598 :                     ; 		sts	pr,@-r15
(1) 2905/ 6001598 :                     ; 		mov	#MarsMdl_Init,r0
(1) 2906/ 6001598 :                     ; 		jsr	@r0
(1) 2907/ 6001598 :                     ; 		nop
(1) 2908/ 6001598 :                     ; 		lds	@r15+,pr
(1) 2909/ 6001598 :                     ; 		rts
(1) 2910/ 6001598 :                     ; 		nop
(1) 2911/ 6001598 :                     ; 		align 4
(1) 2912/ 6001598 :                     ;
(1) 2913/ 6001598 :                     ; ; ------------------------------------------------
(1) 2914/ 6001598 :                     ; ; Set new map data
(1) 2915/ 6001598 :                     ; ;
(1) 2916/ 6001598 :                     ; ; @($04,r14) - layout data (set to 0 to clear)
(1) 2917/ 6001598 :                     ; ; ------------------------------------------------
(1) 2918/ 6001598 :                     ;
(1) 2919/ 6001598 :                     ; CmdTaskMd_MakeMap:
(1) 2920/ 6001598 :                     ; 		sts	pr,@-r15
(1) 2921/ 6001598 :                     ; ; 		bsr	MarsVideo_ClearFrame
(1) 2922/ 6001598 :                     ; ; 		nop
(1) 2923/ 6001598 :                     ; 		mov	@(4,r14),r1
(1) 2924/ 6001598 :                     ; 		mov	#MarsLay_Make,r0
(1) 2925/ 6001598 :                     ; 		jsr	@r0
(1) 2926/ 6001598 :                     ; 		mov	r14,@-r15
(1) 2927/ 6001598 :                     ; 		mov	@r15+,r14
(1) 2928/ 6001598 :                     ; 		lds	@r15+,pr
(1) 2929/ 6001598 :                     ; 		rts
(1) 2930/ 6001598 :                     ; 		nop
(1) 2931/ 6001598 :                     ; 		align 4
(1) 2932/ 6001598 :                     ;
(1) 2933/ 6001598 :                     ; ; ------------------------------------------------
(1) 2934/ 6001598 :                     ; ; Set camera position
(1) 2935/ 6001598 :                     ; ;
(1) 2936/ 6001598 :                     ; ; @($04,r14) - Camera slot (TODO)
(1) 2937/ 6001598 :                     ; ; @($08,r14) - Camera X pos
(1) 2938/ 6001598 :                     ; ; @($0C,r14) - Camera Y pos
(1) 2939/ 6001598 :                     ; ; @($10,r14) - Camera Z pos
(1) 2940/ 6001598 :                     ; ; @($14,r14) - Camera X rot
(1) 2941/ 6001598 :                     ; ; @($18,r14) - Camera Y rot
(1) 2942/ 6001598 :                     ; ; @($1C,r14) - Camera Z rot
(1) 2943/ 6001598 :                     ; ; ------------------------------------------------
(1) 2944/ 6001598 :                     ;
(1) 2945/ 6001598 :                     ; CmdTaskMd_CameraPos:
(1) 2946/ 6001598 :                     ; 		mov	#RAM_Mars_ObjCamera,r12
(1) 2947/ 6001598 :                     ; 		mov	r14,r13
(1) 2948/ 6001598 :                     ; 		add	#8,r13
(1) 2949/ 6001598 :                     ; 		mov	@r13+,r1
(1) 2950/ 6001598 :                     ; 		mov	@r13+,r2
(1) 2951/ 6001598 :                     ; 		mov	@r13+,r3
(1) 2952/ 6001598 :                     ; 		mov	@r13+,r4
(1) 2953/ 6001598 :                     ; 		mov	@r13+,r5
(1) 2954/ 6001598 :                     ; 		mov	@r13+,r6
(1) 2955/ 6001598 :                     ; 		mov	r1,@(cam_x_pos,r12)
(1) 2956/ 6001598 :                     ; 		mov	r2,@(cam_y_pos,r12)
(1) 2957/ 6001598 :                     ; 		mov	r3,@(cam_z_pos,r12)
(1) 2958/ 6001598 :                     ; 		mov	r4,@(cam_x_rot,r12)
(1) 2959/ 6001598 :                     ; 		mov	r5,@(cam_y_rot,r12)
(1) 2960/ 6001598 :                     ; 		mov	r6,@(cam_z_rot,r12)
(1) 2961/ 6001598 :                     ; 		rts
(1) 2962/ 6001598 :                     ; 		nop
(1) 2963/ 6001598 :                     ; 		align 4
(1) 2964/ 6001598 :                     ;
(1) 2965/ 6001598 :                     ; ; ------------------------------------------------
(1) 2966/ 6001598 :                     ; ; Set camera position
(1) 2967/ 6001598 :                     ; ;
(1) 2968/ 6001598 :                     ; ; @($04,r14) - Camera slot (TODO)
(1) 2969/ 6001598 :                     ; ; @($08,r14) - Camera X pos
(1) 2970/ 6001598 :                     ; ; @($0C,r14) - Camera Y pos
(1) 2971/ 6001598 :                     ; ; @($10,r14) - Camera Z pos
(1) 2972/ 6001598 :                     ; ; @($14,r14) - Camera X rot
(1) 2973/ 6001598 :                     ; ; @($18,r14) - Camera Y rot
(1) 2974/ 6001598 :                     ; ; @($1C,r14) - Camera Z rot
(1) 2975/ 6001598 :                     ; ; ------------------------------------------------
(1) 2976/ 6001598 :                     ;
(1) 2977/ 6001598 :                     ; CmdTaskMd_UpdModels:
(1) 2978/ 6001598 :                     ; 		mov	#_sysreg+comm15,r1
(1) 2979/ 6001598 :                     ; 		mov	#1,r2
(1) 2980/ 6001598 :                     ; 		mov.b	@r1,r0
(1) 2981/ 6001598 :                     ; 		and	#$80,r0
(1) 2982/ 6001598 :                     ; 		or	r2,r0
(1) 2983/ 6001598 :                     ; 		mov.b	r0,@r1
(1) 2984/ 6001598 :                     ; 		rts
(1) 2985/ 6001598 :                     ; 		nop
(1) 2986/ 6001598 :                     ; 		align 4
(1) 2987/ 6001598 :                     ;
(1) 2988/ 6001598 :                     ; ; ------------------------------------------------
(1) 2989/ 6001598 :                     ; ; Set PWM to play
(1) 2990/ 6001598 :                     ; ;
(1) 2991/ 6001598 :                     ; ; @($04,r14) - Channel slot
(1) 2992/ 6001598 :                     ; ; @($08,r14) - Start point
(1) 2993/ 6001598 :                     ; ; @($0C,r14) - End point
(1) 2994/ 6001598 :                     ; ; @($10,r14) - Loop point
(1) 2995/ 6001598 :                     ; ; @($14,r14) - Pitch
(1) 2996/ 6001598 :                     ; ; @($18,r14) - Volume
(1) 2997/ 6001598 :                     ; ; @($1C,r14) - Settings: %00000000 00000000LR | LR - output bits
(1) 2998/ 6001598 :                     ; ; ------------------------------------------------
(1) 2999/ 6001598 :                     ;
(1) 3000/ 6001598 :                     ; CmdTaskMd_PWM_SetChnl:
(1) 3001/ 6001598 :                     ; 		sts	pr,@-r15
(1) 3002/ 6001598 :                     ; 		mov	@($04,r14),r1
(1) 3003/ 6001598 :                     ; 		mov	@($08,r14),r2
(1) 3004/ 6001598 :                     ; 		mov	@($0C,r14),r3
(1) 3005/ 6001598 :                     ; 		mov	@($10,r14),r4
(1) 3006/ 6001598 :                     ; 		mov	@($14,r14),r5
(1) 3007/ 6001598 :                     ; 		mov	@($18,r14),r6
(1) 3008/ 6001598 :                     ; 		mov	@($1C,r14),r7
(1) 3009/ 6001598 :                     ; 		bsr	MarsSound_SetPwm
(1) 3010/ 6001598 :                     ; 		nop
(1) 3011/ 6001598 :                     ; 		lds	@r15+,pr
(1) 3012/ 6001598 :                     ; 		rts
(1) 3013/ 6001598 :                     ; 		nop
(1) 3014/ 6001598 :                     ; 		align 4
(1) 3015/ 6001598 :                     ;
(1) 3016/ 6001598 :                     ; ; ------------------------------------------------
(1) 3017/ 6001598 :                     ; ; Set PWM pitch to multiple channels
(1) 3018/ 6001598 :                     ; ;
(1) 3019/ 6001598 :                     ; ; @($04,r14) - Channel 0 pitch
(1) 3020/ 6001598 :                     ; ; @($08,r14) - Channel 1 pitch
(1) 3021/ 6001598 :                     ; ; @($0C,r14) - Channel 2 pitch
(1) 3022/ 6001598 :                     ; ; @($10,r14) - Channel 3 pitch
(1) 3023/ 6001598 :                     ; ; @($14,r14) - Channel 4 pitch
(1) 3024/ 6001598 :                     ; ; @($18,r14) - Channel 5 pitch
(1) 3025/ 6001598 :                     ; ; @($1C,r14) - Channel 6 pitch
(1) 3026/ 6001598 :                     ; ; ------------------------------------------------
(1) 3027/ 6001598 :                     ;
(1) 3028/ 6001598 :                     ; CmdTaskMd_PWM_MultPitch:
(1) 3029/ 6001598 :                     ; 		sts	pr,@-r15
(1) 3030/ 6001598 :                     ; 		mov	#$FFFF,r7
(1) 3031/ 6001598 :                     ; 		mov	r14,r13
(1) 3032/ 6001598 :                     ; 		add	#4,r13
(1) 3033/ 6001598 :                     ; 		mov	#0,r1
(1) 3034/ 6001598 :                     ; 	rept MAX_PWMCHNL		; MAX: 7
(1) 3035/ 6001598 :                     ; 		mov	@r13+,r2
(1) 3036/ 6001598 :                     ; 		and	r7,r2
(1) 3037/ 6001598 :                     ; 		bsr	MarsSound_SetPwmPitch
(1) 3038/ 6001598 :                     ; 		nop
(1) 3039/ 6001598 :                     ; 		add	#1,r1
(1) 3040/ 6001598 :                     ; 	endm
(1) 3041/ 6001598 :                     ; 		lds	@r15+,pr
(1) 3042/ 6001598 :                     ; 		rts
(1) 3043/ 6001598 :                     ; 		nop
(1) 3044/ 6001598 :                     ; 		align 4
(1) 3045/ 6001598 :                     ;
(1) 3046/ 6001598 :                     ; ; ------------------------------------------------
(1) 3047/ 6001598 :                     ; ; Enable/Disable PWM channels from playing
(1) 3048/ 6001598 :                     ; ;
(1) 3049/ 6001598 :                     ; ; @($04,r14) - Channel slot
(1) 3050/ 6001598 :                     ; ; @($08,r14) - Enable/Disable/Restart
(1) 3051/ 6001598 :                     ; ; ------------------------------------------------
(1) 3052/ 6001598 :                     ;
(1) 3053/ 6001598 :                     ; CmdTaskMd_PWM_Enable:
(1) 3054/ 6001598 :                     ; 		sts	pr,@-r15
(1) 3055/ 6001598 :                     ; 		mov	@($04,r14),r1
(1) 3056/ 6001598 :                     ; 		mov	@($08,r14),r2
(1) 3057/ 6001598 :                     ; 		bsr	MarsSound_PwmEnable
(1) 3058/ 6001598 :                     ; 		nop
(1) 3059/ 6001598 :                     ; 		lds	@r15+,pr
(1) 3060/ 6001598 :                     ; 		rts
(1) 3061/ 6001598 :                     ; 		nop
(1) 3062/ 6001598 :                     ; 		align 4
(1) 3063/ 6001598 :                     
(1) 3064/ 6001598 :                     ; ----------------------------------------
(1) 3065/ 6001598 :                     
(1) 3066/ 6001598 : 2000 4100 0600 097C 		ltorg
(1) 3067/ 60015A0 :                     
(1) 3068/ 60015A0 :                     ; =================================================================
(1) 3069/ 60015A0 :                     ; ------------------------------------------------
(1) 3070/ 60015A0 :                     ; Slave | Watchdog interrupt
(1) 3071/ 60015A0 :                     ; ------------------------------------------------
(1) 3072/ 60015A0 :                     
(1) 3073/ 60015A0 :                     s_irq_custom:
(1) 3074/ 60015A0 : 2F26                		mov	r2,@-r15
(1) 3075/ 60015A2 : 910F                		mov	#_FRT,r1
(1) 3076/ 60015A4 : 8417                		mov.b   @(7,r1),r0
(1) 3077/ 60015A6 : CA02                		xor     #2,r0
(1) 3078/ 60015A8 : 8017                		mov.b   r0,@(7,r1)
(1) 3079/ 60015AA :                     
(1) 3080/ 60015AA : 910C                		mov	#$FFFFFE80,r1
(1) 3081/ 60015AC : 900C                		mov.w   #$A518,r0		; Watchdog OFF
(1) 3082/ 60015AE : 2101                		mov.w   r0,@r1
(1) 3083/ 60015B0 : CB20                		or      #$20,r0			; ON again
(1) 3084/ 60015B2 : 2101                		mov.w   r0,@r1
(1) 3085/ 60015B4 : E210                		mov	#$10,r2
(1) 3086/ 60015B6 : 9008                		mov.w   #$5A00,r0		; Timer for the next one
(1) 3087/ 60015B8 : 202B                		or	r2,r0
(1) 3088/ 60015BA : 2101                		mov.w	r0,@r1
(1) 3089/ 60015BC :                     
(1) 3090/ 60015BC : 62F6                		mov	@r15+,r2
(1) 3091/ 60015BE : 000B                		rts
(1) 3092/ 60015C0 : 0009                		nop
(1) 3093/ 60015C2 :                     		align 4
(1) 3094/ 60015C4 : FE10 FE80 A518 5A00 		ltorg
(1) 3095/ 60015CC :                     
(1) 3096/ 60015CC :                     ; ====================================================================
(1) 3097/ 60015CC :                     ; ----------------------------------------------------------------
(1) 3098/ 60015CC :                     ; Cache routines
(1) 3099/ 60015CC :                     ; ----------------------------------------------------------------
(1) 3100/ 60015CC :                     
(1) 3101/ 60015CC :                     		include "system/mars/cache.asm"
(2)    1/ 60015CC :                     ; ====================================================================
(2)    2/ 60015CC :                     ; ----------------------------------------------------------------
(2)    3/ 60015CC :                     ; CACHE code for Master CPU
(2)    4/ 60015CC :                     ;
(2)    5/ 60015CC :                     ; LIMIT: $800 bytes
(2)    6/ 60015CC :                     ; ----------------------------------------------------------------
(2)    7/ 60015CC :                     
(2)    8/ 60015CC :                     		align 4
(2)    9/ 60015CC :                     CACHE_MASTER:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   13/FFFFFFFFC0000000 :                     ; Watchdog tasks
(2)   14/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   15/FFFFFFFFC0000000 :                     
(2)   16/FFFFFFFFC0000000 :                     ; Cache_OnInterrupt:
(2)   17/FFFFFFFFC0000000 :                     m_irq_custom:
(2)   18/FFFFFFFFC0000000 : D108                		mov	.tag_FRT,r1
(2)   19/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1), r0
(2)   20/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   21/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   22/FFFFFFFFC0000008 : C534                		mov.w	@(marsGbl_WdDrwTask,gbr),r0
(2)   23/FFFFFFFFC000000A : C9FF                		and	#$FF,r0
(2)   24/FFFFFFFFC000000C : 4008                		shll2	r0
(2)   25/FFFFFFFFC000000E : D117                		mov	#.list,r1
(2)   26/FFFFFFFFC0000010 : 001E                		mov	@(r1,r0),r0
(2)   27/FFFFFFFFC0000012 : 402B                		jmp	@r0
(2)   28/FFFFFFFFC0000014 : 0009                		nop
(2)   29/FFFFFFFFC0000016 :                     		align 4
(2)   30/FFFFFFFFC0000018 :                     .list:
(2)   31/FFFFFFFFC0000018 : C000 033C           		dc.l drwtsk_00		; (null entry)
(2)   32/FFFFFFFFC000001C : C000 0028           		dc.l drwtsk_01		; Draw background
(2)   33/FFFFFFFFC0000020 : C000 007A           		dc.l drwtsk_02		; Main polygons jump
(2)   34/FFFFFFFFC0000024 :                     ; 		dc.l drwtsk_03		; Resume from solid-color
(2)   35/FFFFFFFFC0000024 : FFFF FE10           .tag_FRT:	dc.l _FRT
(2)   36/FFFFFFFFC0000028 :                     
(2)   37/FFFFFFFFC0000028 :                     ; --------------------------------
(2)   38/FFFFFFFFC0000028 :                     ; Task $01: Left/Right drawing
(2)   39/FFFFFFFFC0000028 :                     ;
(2)   40/FFFFFFFFC0000028 :                     ; (Called on Watchdog)
(2)   41/FFFFFFFFC0000028 :                     ; --------------------------------
(2)   42/FFFFFFFFC0000028 :                     
(2)   43/FFFFFFFFC0000028 :                     		align 4
(2)   44/FFFFFFFFC0000028 :                     drwtsk_01:
(2)   45/FFFFFFFFC0000028 : 2F26                		mov	r2,@-r15
(2)   46/FFFFFFFFC000002A : 2F36                		mov	r3,@-r15
(2)   47/FFFFFFFFC000002C : 2F46                		mov	r4,@-r15
(2)   48/FFFFFFFFC000002E : 2F56                		mov	r5,@-r15
(2)   49/FFFFFFFFC0000030 : 2F66                		mov	r6,@-r15
(2)   50/FFFFFFFFC0000032 : 2F76                		mov	r7,@-r15
(2)   51/FFFFFFFFC0000034 : 2F86                		mov	r8,@-r15
(2)   52/FFFFFFFFC0000036 : 2F96                		mov	r9,@-r15
(2)   53/FFFFFFFFC0000038 : 4F12                		sts	macl,@-r15
(2)   54/FFFFFFFFC000003A :                     
(2)   55/FFFFFFFFC000003A : 911B                		mov.l   #$FFFFFE80,r1
(2)   56/FFFFFFFFC000003C : 901B                		mov.w   #$A518,r0		; OFF
(2)   57/FFFFFFFFC000003E : 2101                		mov.w   r0,@r1
(2)   58/FFFFFFFFC0000040 : CB20                		or      #$20,r0			; ON
(2)   59/FFFFFFFFC0000042 : 2101                		mov.w   r0,@r1
(2)   60/FFFFFFFFC0000044 : 9018                		mov.w   #$5A10,r0		; Timer before next watchdog
(2)   61/FFFFFFFFC0000046 : 2101                		mov.w   r0,@r1
(2)   62/FFFFFFFFC0000048 : D109                		mov	#Cach_LR_Lines,r1	; Decrement a line to progress
(2)   63/FFFFFFFFC000004A : 6012                		mov	@r1,r0
(2)   64/FFFFFFFFC000004C : 4010                		dt	r0
(2)   65/FFFFFFFFC000004E : 8F02                		bf/s	tsk00_exit
(2)   66/FFFFFFFFC0000050 : 2102                		mov	r0,@r1
(2)   67/FFFFFFFFC0000052 :                     
(2)   68/FFFFFFFFC0000052 :                     ; 		mov.w	@(marsGbl_Bg_DrwReqR,gbr),r0
(2)   69/FFFFFFFFC0000052 :                     ; 		cmp/pl	r0
(2)   70/FFFFFFFFC0000052 :                     ; 		bf	.ndrw_r
(2)   71/FFFFFFFFC0000052 :                     ; 		dt	r0
(2)   72/FFFFFFFFC0000052 :                     ; 		mov.w	r0,@(marsGbl_Bg_DrwReqR,gbr)
(2)   73/FFFFFFFFC0000052 :                     ; .ndrw_r:
(2)   74/FFFFFFFFC0000052 :                     ; 		mov.w	@(marsGbl_Bg_DrwReqL,gbr),r0
(2)   75/FFFFFFFFC0000052 :                     ; 		cmp/pl	r0
(2)   76/FFFFFFFFC0000052 :                     ; 		bf	tsk00_gonext
(2)   77/FFFFFFFFC0000052 :                     ; 		dt	r0
(2)   78/FFFFFFFFC0000052 :                     ; 		mov.w	r0,@(marsGbl_Bg_DrwReqL,gbr)
(2)   79/FFFFFFFFC0000052 :                     tsk00_gonext:
(2)   80/FFFFFFFFC0000052 : E002                		mov	#2,r0			; If finished: Set task $02
(2)   81/FFFFFFFFC0000054 : C134                		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)   82/FFFFFFFFC0000056 :                     tsk00_exit:
(2)   83/FFFFFFFFC0000056 : 4F16                		lds	@r15+,macl
(2)   84/FFFFFFFFC0000058 : 69F6                		mov	@r15+,r9
(2)   85/FFFFFFFFC000005A : 68F6                		mov	@r15+,r8
(2)   86/FFFFFFFFC000005C : 67F6                		mov	@r15+,r7
(2)   87/FFFFFFFFC000005E : 66F6                		mov	@r15+,r6
(2)   88/FFFFFFFFC0000060 : 65F6                		mov	@r15+,r5
(2)   89/FFFFFFFFC0000062 : 64F6                		mov	@r15+,r4
(2)   90/FFFFFFFFC0000064 : 63F6                		mov	@r15+,r3
(2)   91/FFFFFFFFC0000066 : 62F6                		mov	@r15+,r2
(2)   92/FFFFFFFFC0000068 : 000B                		rts
(2)   93/FFFFFFFFC000006A : 0009                		nop
(2)   94/FFFFFFFFC000006C :                     		align 4
(2)   95/FFFFFFFFC000006C : C000 0018 C000 03C0 		ltorg
                    FE80 A518 5A10      
(2)   96/FFFFFFFFC000007A :                     
(2)   97/FFFFFFFFC000007A :                     ; 		mov.w	@(marsGbl_CurrGfxMode,gbr),r0
(2)   98/FFFFFFFFC000007A :                     ; 		and	#$7F,r0
(2)   99/FFFFFFFFC000007A :                     ; 		cmp/eq	#1,r0
(2)  100/FFFFFFFFC000007A :                     ; 		bt	drtsk_gm1
(2)  101/FFFFFFFFC000007A :                     ; 		cmp/eq	#2,r0
(2)  102/FFFFFFFFC000007A :                     ; 		bt	drtsk_gm2
(2)  103/FFFFFFFFC000007A :                     ; 		mov	#_vdpreg,r1
(2)  104/FFFFFFFFC000007A :                     ; .wait_fb:	mov.w   @($A,r1),r0		; Framebuffer free?
(2)  105/FFFFFFFFC000007A :                     ; 		tst     #2,r0
(2)  106/FFFFFFFFC000007A :                     ; 		bf      .wait_fb
(2)  107/FFFFFFFFC000007A :                     ; 		mov.w   @(6,r1),r0		; SVDP-fill address
(2)  108/FFFFFFFFC000007A :                     ; 		add     #$5F,r0			; Preincrement
(2)  109/FFFFFFFFC000007A :                     ; 		mov.w   r0,@(6,r1)
(2)  110/FFFFFFFFC000007A :                     ; 		mov.w   #320/2,r0		; SVDP-fill size (320 pixels)
(2)  111/FFFFFFFFC000007A :                     ; 		mov.w   r0,@(4,r1)
(2)  112/FFFFFFFFC000007A :                     ; 		mov.w	#$0000,r0		; SVDP-fill pixel data and start filling
(2)  113/FFFFFFFFC000007A :                     ; 		mov.w   r0,@(8,r1)		; After finishing, SVDP-address got updated
(2)  114/FFFFFFFFC000007A :                     ; 		bra	dtsk01_exit
(2)  115/FFFFFFFFC000007A :                     ; 		nop
(2)  116/FFFFFFFFC000007A :                     ; 		align 4
(2)  117/FFFFFFFFC000007A :                     ; 		ltorg
(2)  118/FFFFFFFFC000007A :                     ;
(2)  119/FFFFFFFFC000007A :                     ; ; Mode1 draw routine
(2)  120/FFFFFFFFC000007A :                     ; ; Left/Right scroll
(2)  121/FFFFFFFFC000007A :                     ; drtsk_gm1:
(2)  122/FFFFFFFFC000007A :                     ; 		bra	dtsk01_exit
(2)  123/FFFFFFFFC000007A :                     ; 		nop
(2)  124/FFFFFFFFC000007A :                     ; 		align 4
(2)  125/FFFFFFFFC000007A :                     ;
(2)  126/FFFFFFFFC000007A :                     ; ; Mode2 draw routine
(2)  127/FFFFFFFFC000007A :                     ; ; Full scaling
(2)  128/FFFFFFFFC000007A :                     ; drtsk_gm2:
(2)  129/FFFFFFFFC000007A :                     ; 		mov	#Cach_Ycurr,r1
(2)  130/FFFFFFFFC000007A :                     ; 		mov	@r1,r1
(2)  131/FFFFFFFFC000007A :                     ; 		shlr16	r1
(2)  132/FFFFFFFFC000007A :                     ; 		mov.w	@(marsGbl_BgWidth,gbr),r0
(2)  133/FFFFFFFFC000007A :                     ; 		muls	r1,r0
(2)  134/FFFFFFFFC000007A :                     ; 		sts	macl,r1
(2)  135/FFFFFFFFC000007A :                     ; 		mov	@(marsGbl_Bg_FbCurrR,gbr),r0
(2)  136/FFFFFFFFC000007A :                     ; 		mov	r0,r9
(2)  137/FFFFFFFFC000007A :                     ; 		mov	@(marsGbl_BgData,gbr),r0
(2)  138/FFFFFFFFC000007A :                     ; 		mov	r0,r8
(2)  139/FFFFFFFFC000007A :                     ; 		add	r1,r8
(2)  140/FFFFFFFFC000007A :                     ; 		mov	#Cach_Xpos,r1
(2)  141/FFFFFFFFC000007A :                     ; 		mov 	@r1,r7
(2)  142/FFFFFFFFC000007A :                     ; 		mov.w	@(marsGbl_BgWidth,gbr),r0
(2)  143/FFFFFFFFC000007A :                     ; 		mov	r0,r6
(2)  144/FFFFFFFFC000007A :                     ; 		mov	#-2,r0		; pixel size
(2)  145/FFFFFFFFC000007A :                     ; 		and	r0,r7
(2)  146/FFFFFFFFC000007A :                     ; 		and	r0,r6
(2)  147/FFFFFFFFC000007A :                     ; 		shll16	r7
(2)  148/FFFFFFFFC000007A :                     ; 		shll16	r6
(2)  149/FFFFFFFFC000007A :                     ; 		mov	#Cach_Xadd,r4
(2)  150/FFFFFFFFC000007A :                     ; 		mov	@r4,r4
(2)  151/FFFFFFFFC000007A :                     ; 		shll	r4
(2)  152/FFFFFFFFC000007A :                     ; 		mov	r4,r0
(2)  153/FFFFFFFFC000007A :                     ; 		xor	r5,r5
(2)  154/FFFFFFFFC000007A :                     ; 		mov	#20,r2
(2)  155/FFFFFFFFC000007A :                     ; .x_next:
(2)  156/FFFFFFFFC000007A :                     ; 	rept 8
(2)  157/FFFFFFFFC000007A :                     ; 		cmp/ge	r6,r7
(2)  158/FFFFFFFFC000007A :                     ; 		bf	.lowr
(2)  159/FFFFFFFFC000007A :                     ; 		sub	r6,r7
(2)  160/FFFFFFFFC000007A :                     ; .lowr:
(2)  161/FFFFFFFFC000007A :                     ; 		mov	r7,r1
(2)  162/FFFFFFFFC000007A :                     ; 		shlr16	r1
(2)  163/FFFFFFFFC000007A :                     ; 		mov	#-2,r0
(2)  164/FFFFFFFFC000007A :                     ; 		and	r0,r1
(2)  165/FFFFFFFFC000007A :                     ; 		add	r8,r1
(2)  166/FFFFFFFFC000007A :                     ;
(2)  167/FFFFFFFFC000007A :                     ; ; 		mov.b	@r1,r0
(2)  168/FFFFFFFFC000007A :                     ; ; 		and	#$FF,r0
(2)  169/FFFFFFFFC000007A :                     ; ; 		mov	r0,r5
(2)  170/FFFFFFFFC000007A :                     ; ; 		shll8	r5
(2)  171/FFFFFFFFC000007A :                     ; ; 		or	r0,r5
(2)  172/FFFFFFFFC000007A :                     ; ; 		shll8	r5
(2)  173/FFFFFFFFC000007A :                     ; ; 		or	r0,r5
(2)  174/FFFFFFFFC000007A :                     ; ; 		shll8	r5
(2)  175/FFFFFFFFC000007A :                     ; ; 		or	r0,r5
(2)  176/FFFFFFFFC000007A :                     ; ; 		mov	r5,@r9
(2)  177/FFFFFFFFC000007A :                     ; 		mov.w	@r1,r0
(2)  178/FFFFFFFFC000007A :                     ; 		mov.w	r0,@r9
(2)  179/FFFFFFFFC000007A :                     ; 		add	#2,r9
(2)  180/FFFFFFFFC000007A :                     ; 		add	r4,r7
(2)  181/FFFFFFFFC000007A :                     ; 	endm
(2)  182/FFFFFFFFC000007A :                     ; 		dt	r2
(2)  183/FFFFFFFFC000007A :                     ; 		bt	.x_ex
(2)  184/FFFFFFFFC000007A :                     ; 		bra	.x_next
(2)  185/FFFFFFFFC000007A :                     ; 		nop
(2)  186/FFFFFFFFC000007A :                     ; .x_ex:
(2)  187/FFFFFFFFC000007A :                     ; 		mov	#$200,r1
(2)  188/FFFFFFFFC000007A :                     ; 		mov	@(marsGbl_Bg_FbCurrR,gbr),r0
(2)  189/FFFFFFFFC000007A :                     ; 		add	r1,r0
(2)  190/FFFFFFFFC000007A :                     ; 		mov	r0,@(marsGbl_Bg_FbCurrR,gbr)
(2)  191/FFFFFFFFC000007A :                     ;
(2)  192/FFFFFFFFC000007A :                     ; 		mov.w	@(marsGbl_BgHeight,gbr),r0
(2)  193/FFFFFFFFC000007A :                     ; 		mov	r0,r3
(2)  194/FFFFFFFFC000007A :                     ; 		shll16	r3
(2)  195/FFFFFFFFC000007A :                     ; 		mov	#Cach_Yadd,r2
(2)  196/FFFFFFFFC000007A :                     ; 		mov	@r2,r2
(2)  197/FFFFFFFFC000007A :                     ; ; 		shll	r2
(2)  198/FFFFFFFFC000007A :                     ; 		mov	#Cach_Ycurr,r1
(2)  199/FFFFFFFFC000007A :                     ; 		mov	@r1,r0
(2)  200/FFFFFFFFC000007A :                     ; 		add	r2,r0
(2)  201/FFFFFFFFC000007A :                     ; 		cmp/ge	r3,r0
(2)  202/FFFFFFFFC000007A :                     ; 		bf	.ylarge
(2)  203/FFFFFFFFC000007A :                     ; 		sub	r3,r0
(2)  204/FFFFFFFFC000007A :                     ; .ylarge:
(2)  205/FFFFFFFFC000007A :                     ; 		mov	r0,@r1
(2)  206/FFFFFFFFC000007A :                     ; 		bra	dtsk01_exit
(2)  207/FFFFFFFFC000007A :                     ; 		nop
(2)  208/FFFFFFFFC000007A :                     ; 		align 4
(2)  209/FFFFFFFFC000007A :                     ;
(2)  210/FFFFFFFFC000007A :                     ; dtsk01_exit:
(2)  211/FFFFFFFFC000007A :                     
(2)  212/FFFFFFFFC000007A :                     ; --------------------------------
(2)  213/FFFFFFFFC000007A :                     ; Task $02
(2)  214/FFFFFFFFC000007A :                     ; --------------------------------
(2)  215/FFFFFFFFC000007A :                     
(2)  216/FFFFFFFFC000007A :                     ; TODO: a "not using polygons" flag.
(2)  217/FFFFFFFFC000007A :                     
(2)  218/FFFFFFFFC000007A :                     ; enters-and-exits until marsGbl_PzListCntr != 0
(2)  219/FFFFFFFFC000007A :                     drwtsk_02:
(2)  220/FFFFFFFFC000007A : 2F26                		mov	r2,@-r15
(2)  221/FFFFFFFFC000007C : C535                		mov.w	@(marsGbl_WdDrwPause,gbr),r0
(2)  222/FFFFFFFFC000007E : 8801                		cmp/eq	#1,r0
(2)  223/FFFFFFFFC0000080 : 8904                		bt	.exit
(2)  224/FFFFFFFFC0000082 : C52D                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Any pieces to draw?
(2)  225/FFFFFFFFC0000084 : 4015                		cmp/pl	r0
(2)  226/FFFFFFFFC0000086 : 8903                		bt	.has_pz
(2)  227/FFFFFFFFC0000088 : E000                		mov	#0,r0
(2)  228/FFFFFFFFC000008A : C134                		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)  229/FFFFFFFFC000008C : A169                .exit:		bra	drwtask_exit
(2)  230/FFFFFFFFC000008E : E210                		mov	#$10,r2
(2)  231/FFFFFFFFC0000090 :                     .has_pz:
(2)  232/FFFFFFFFC0000090 : 2F36                		mov	r3,@-r15			; Save all these regs
(2)  233/FFFFFFFFC0000092 : 2F46                		mov	r4,@-r15
(2)  234/FFFFFFFFC0000094 : 2F56                		mov	r5,@-r15
(2)  235/FFFFFFFFC0000096 : 2F66                		mov	r6,@-r15
(2)  236/FFFFFFFFC0000098 : 2F76                		mov	r7,@-r15
(2)  237/FFFFFFFFC000009A : 2F86                		mov	r8,@-r15
(2)  238/FFFFFFFFC000009C : 2F96                		mov	r9,@-r15
(2)  239/FFFFFFFFC000009E : 2FA6                		mov	r10,@-r15
(2)  240/FFFFFFFFC00000A0 : 2FB6                		mov	r11,@-r15
(2)  241/FFFFFFFFC00000A2 : 2FC6                		mov	r12,@-r15
(2)  242/FFFFFFFFC00000A4 : 2FD6                		mov	r13,@-r15
(2)  243/FFFFFFFFC00000A6 : 2FE6                		mov	r14,@-r15
(2)  244/FFFFFFFFC00000A8 : 4F12                		sts	macl,@-r15
(2)  245/FFFFFFFFC00000AA : 4F02                		sts	mach,@-r15
(2)  246/FFFFFFFFC00000AC :                     
(2)  247/FFFFFFFFC00000AC :                     ; Piece loop
(2)  248/FFFFFFFFC00000AC :                     drwtsk02_newpz:
(2)  249/FFFFFFFFC00000AC : C602                		mov	@(marsGbl_PlyPzList_R,gbr),r0	; r14 - Current pieces pointer to READ
(2)  250/FFFFFFFFC00000AE : 6E03                		mov	r0,r14
(2)  251/FFFFFFFFC00000B0 : 59E0                		mov	@(plypz_ypos,r14),r9		; Grab StartY/EndY positions
(2)  252/FFFFFFFFC00000B2 : 6A93                		mov	r9,r10
(2)  253/FFFFFFFFC00000B4 : D008                		mov	#$FFFF,r0
(2)  254/FFFFFFFFC00000B6 : 4929                		shlr16	r9
(2)  255/FFFFFFFFC00000B8 : 699F                		exts	r9,r9				;  r9 - Top
(2)  256/FFFFFFFFC00000BA : 2A09                		and	r0,r10				; r10 - Bottom
(2)  257/FFFFFFFFC00000BC : 3090                		cmp/eq	r9,r0				; if Top==Bottom, exit
(2)  258/FFFFFFFFC00000BE : 8908                		bt	.invld_y
(2)  259/FFFFFFFFC00000C0 : 900C                		mov	#SCREEN_HEIGHT,r0		; if Top > 224, exit
(2)  260/FFFFFFFFC00000C2 : 3903                		cmp/ge	r0,r9
(2)  261/FFFFFFFFC00000C4 : 8905                		bt	.invld_y			; if Bottom > 224, add limit
(2)  262/FFFFFFFFC00000C6 : 3A07                		cmp/gt	r0,r10
(2)  263/FFFFFFFFC00000C8 : 8B00                		bf	.len_max
(2)  264/FFFFFFFFC00000CA : 6A03                		mov	r0,r10
(2)  265/FFFFFFFFC00000CC :                     .len_max:
(2)  266/FFFFFFFFC00000CC : 3A98                		sub	r9,r10				; Turn r10 into line length (Bottom - Top)
(2)  267/FFFFFFFFC00000CE : 4A15                		cmp/pl	r10
(2)  268/FFFFFFFFC00000D0 : 8905                		bt	drwtsk1_vld_y
(2)  269/FFFFFFFFC00000D2 :                     .invld_y:
(2)  270/FFFFFFFFC00000D2 : A123                		bra	drwsld_nextpz			; if LEN < 0 then check next one instead.
(2)  271/FFFFFFFFC00000D4 : 0009                		nop
(2)  272/FFFFFFFFC00000D6 :                     		align 4
(2)  273/FFFFFFFFC00000D8 : 0000 FFFF 00E0      		ltorg
(2)  274/FFFFFFFFC00000DE :                     
(2)  275/FFFFFFFFC00000DE :                     ; ------------------------------------
(2)  276/FFFFFFFFC00000DE :                     ; If Y top / Y len are valid:
(2)  277/FFFFFFFFC00000DE :                     ; ------------------------------------
(2)  278/FFFFFFFFC00000DE :                     
(2)  279/FFFFFFFFC00000DE :                     drwtsk1_vld_y:
(2)  280/FFFFFFFFC00000DE : 51E1                		mov	@(plypz_xl,r14),r1		; r1 - X left
(2)  281/FFFFFFFFC00000E0 : 52E2                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  282/FFFFFFFFC00000E2 : 53E3                		mov	@(plypz_xr,r14),r3		; r3 - X right
(2)  283/FFFFFFFFC00000E4 : 54E4                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  284/FFFFFFFFC00000E6 : 50EE                		mov	@(plypz_type,r14),r0		; Check material options
(2)  285/FFFFFFFFC00000E8 : 4029                		shlr16	r0
(2)  286/FFFFFFFFC00000EA : 4019                		shlr8	r0
(2)  287/FFFFFFFFC00000EC : C880                 		tst	#PLGN_TEXURE,r0			; Texture-enable bit?
(2)  288/FFFFFFFFC00000EE : 8B05                 		bf	drwtsk_texmode
(2)  289/FFFFFFFFC00000F0 : A0B4                		bra	drwtsk_solidmode
(2)  290/FFFFFFFFC00000F2 : 0009                		nop
(2)  291/FFFFFFFFC00000F4 :                     
(2)  292/FFFFFFFFC00000F4 :                     ; ------------------------------------
(2)  293/FFFFFFFFC00000F4 :                     ; Texture mode
(2)  294/FFFFFFFFC00000F4 :                     ;
(2)  295/FFFFFFFFC00000F4 :                     ; r1  - XL
(2)  296/FFFFFFFFC00000F4 :                     ; r2  - XL DX
(2)  297/FFFFFFFFC00000F4 :                     ; r3  - XR
(2)  298/FFFFFFFFC00000F4 :                     ; r4  - XR DX
(2)  299/FFFFFFFFC00000F4 :                     ; r5  - SRC XL
(2)  300/FFFFFFFFC00000F4 :                     ; r6  - SRC XR
(2)  301/FFFFFFFFC00000F4 :                     ; r7  - SRC YL
(2)  302/FFFFFFFFC00000F4 :                     ; r8  - SRC YR
(2)  303/FFFFFFFFC00000F4 :                     ; r9  - Y current
(2)  304/FFFFFFFFC00000F4 :                     ; r10  - Number of lines
(2)  305/FFFFFFFFC00000F4 :                     ; ------------------------------------
(2)  306/FFFFFFFFC00000F4 :                     
(2)  307/FFFFFFFFC00000F4 :                     go_drwsld_updline_tex:
(2)  308/FFFFFFFFC00000F4 : A098                		bra	drwsld_updline_tex
(2)  309/FFFFFFFFC00000F6 : 0009                		nop
(2)  310/FFFFFFFFC00000F8 :                     
(2)  311/FFFFFFFFC00000F8 :                     go_drwtex_gonxtpz:
(2)  312/FFFFFFFFC00000F8 : A0A4                		bra	drwtex_gonxtpz
(2)  313/FFFFFFFFC00000FA : 0009                		nop
(2)  314/FFFFFFFFC00000FC :                     
(2)  315/FFFFFFFFC00000FC :                     drwtsk_texmode:
(2)  316/FFFFFFFFC00000FC : C530                		mov.w	@(marsGbl_DivStop_M,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2)  317/FFFFFFFFC00000FE : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2)  318/FFFFFFFFC0000100 : 8B02                		bf	.texvalid
(2)  319/FFFFFFFFC0000102 : A120                		bra	drwtask_return
(2)  320/FFFFFFFFC0000104 : 0009                		nop
(2)  321/FFFFFFFFC0000106 :                     		align 4
(2)  322/FFFFFFFFC0000108 :                     .texvalid:
(2)  323/FFFFFFFFC0000108 : 55E5                		mov	@(plypz_src_xl,r14),r5		; Texture X left
(2)  324/FFFFFFFFC000010A : 56E9                		mov	@(plypz_src_xr,r14),r6		; Texture X right
(2)  325/FFFFFFFFC000010C : 57E7                		mov	@(plypz_src_yl,r14),r7		; Texture Y up
(2)  326/FFFFFFFFC000010E : 58EB                		mov	@(plypz_src_yr,r14),r8		; Texture Y down
(2)  327/FFFFFFFFC0000110 :                     
(2)  328/FFFFFFFFC0000110 :                     drwsld_nxtline_tex:
(2)  329/FFFFFFFFC0000110 : 4911                		cmp/pz	r9				; Y Start below 0?
(2)  330/FFFFFFFFC0000112 : 8BEF                		bf	go_drwsld_updline_tex
(2)  331/FFFFFFFFC0000114 : 909C                		mov	#SCREEN_HEIGHT,r0		; Y Start after 224?
(2)  332/FFFFFFFFC0000116 : 3903                		cmp/ge	r0,r9
(2)  333/FFFFFFFFC0000118 : 89EE                		bt	go_drwtex_gonxtpz
(2)  334/FFFFFFFFC000011A : 2F16                		mov	r1,@-r15
(2)  335/FFFFFFFFC000011C : 2F26                		mov	r2,@-r15
(2)  336/FFFFFFFFC000011E : 2F46                		mov	r4,@-r15
(2)  337/FFFFFFFFC0000120 : 2F56                		mov	r5,@-r15
(2)  338/FFFFFFFFC0000122 : 2F66                		mov	r6,@-r15
(2)  339/FFFFFFFFC0000124 : 2F76                		mov	r7,@-r15
(2)  340/FFFFFFFFC0000126 : 2F86                		mov	r8,@-r15
(2)  341/FFFFFFFFC0000128 : 2F96                		mov	r9,@-r15
(2)  342/FFFFFFFFC000012A : 2FA6                		mov	r10,@-r15
(2)  343/FFFFFFFFC000012C : 2FD6                		mov	r13,@-r15
(2)  344/FFFFFFFFC000012E : 6B13                		mov	r1,r11			; r11 - X left copy
(2)  345/FFFFFFFFC0000130 : 6C33                		mov	r3,r12			; r12 - X right copy
(2)  346/FFFFFFFFC0000132 : 4B29                		shlr16	r11
(2)  347/FFFFFFFFC0000134 : 4C29                		shlr16	r12
(2)  348/FFFFFFFFC0000136 : 6BBF                		exts	r11,r11
(2)  349/FFFFFFFFC0000138 : 6CCF                		exts	r12,r12
(2)  350/FFFFFFFFC000013A : 60C3                		mov	r12,r0			; r0: X Right - X Left
(2)  351/FFFFFFFFC000013C : 30B8                		sub	r11,r0
(2)  352/FFFFFFFFC000013E : 4015                		cmp/pl	r0			; Line reversed?
(2)  353/FFFFFFFFC0000140 : 8908                		bt	.txrevers
(2)  354/FFFFFFFFC0000142 : 60C3                		mov	r12,r0			; Swap XL and XR values
(2)  355/FFFFFFFFC0000144 : 6CB3                		mov	r11,r12
(2)  356/FFFFFFFFC0000146 : 6B03                		mov	r0,r11
(2)  357/FFFFFFFFC0000148 : 6053                		mov	r5,r0
(2)  358/FFFFFFFFC000014A : 6563                		mov	r6,r5
(2)  359/FFFFFFFFC000014C : 6603                		mov	r0,r6
(2)  360/FFFFFFFFC000014E : 6073                		mov	r7,r0
(2)  361/FFFFFFFFC0000150 : 6783                		mov	r8,r7
(2)  362/FFFFFFFFC0000152 : 6803                		mov	r0,r8
(2)  363/FFFFFFFFC0000154 :                     .txrevers:
(2)  364/FFFFFFFFC0000154 : 3CB0                		cmp/eq	r11,r12			; Same X position?
(2)  365/FFFFFFFFC0000156 : 895D                		bt	.tex_skip_line
(2)  366/FFFFFFFFC0000158 : 907B                		mov	#SCREEN_WIDTH,r0	; X right < 0?
(2)  367/FFFFFFFFC000015A : 4C15                		cmp/pl	r12
(2)  368/FFFFFFFFC000015C : 8B5A                		bf	.tex_skip_line
(2)  369/FFFFFFFFC000015E : 3B07                		cmp/gt	r0,r11			; X left > 320?
(2)  370/FFFFFFFFC0000160 : 8958                		bt	.tex_skip_line
(2)  371/FFFFFFFFC0000162 : 62C3                		mov	r12,r2
(2)  372/FFFFFFFFC0000164 : 60B3                		mov 	r11,r0
(2)  373/FFFFFFFFC0000166 : 3208                		sub 	r0,r2
(2)  374/FFFFFFFFC0000168 : 3658                		sub	r5,r6
(2)  375/FFFFFFFFC000016A : 3878                		sub	r7,r8
(2)  376/FFFFFFFFC000016C :                     
(2)  377/FFFFFFFFC000016C :                     	; Calculate new DX values
(2)  378/FFFFFFFFC000016C :                     	; make sure DIV is available
(2)  379/FFFFFFFFC000016C :                     	; (marsGbl_DivStop_M == 0)
(2)  380/FFFFFFFFC000016C : 9072                		mov	#_JR,r0		; r6 / r2
(2)  381/FFFFFFFFC000016E : 2022                		mov	r2,@r0
(2)  382/FFFFFFFFC0000170 : 1061                		mov	r6,@(4,r0)
(2)  383/FFFFFFFFC0000172 : 0009                		nop
(2)  384/FFFFFFFFC0000174 : 5601                		mov	@(4,r0),r6		; r8 / r2
(2)  385/FFFFFFFFC0000176 : 2022                		mov	r2,@r0
(2)  386/FFFFFFFFC0000178 : 1081                		mov	r8,@(4,r0)
(2)  387/FFFFFFFFC000017A : 0009                		nop
(2)  388/FFFFFFFFC000017C : 5801                		mov	@(4,r0),r8
(2)  389/FFFFFFFFC000017E :                     
(2)  390/FFFFFFFFC000017E :                     	; Limit X destination points
(2)  391/FFFFFFFFC000017E :                     	; and correct the texture's X positions
(2)  392/FFFFFFFFC000017E : 9068                		mov	#SCREEN_WIDTH,r0		; XR point > 320?
(2)  393/FFFFFFFFC0000180 : 3C07                		cmp/gt	r0,r12
(2)  394/FFFFFFFFC0000182 : 8B00                		bf	.tr_fix
(2)  395/FFFFFFFFC0000184 : 6C03                		mov	r0,r12			; Force XR to 320
(2)  396/FFFFFFFFC0000186 :                     .tr_fix:
(2)  397/FFFFFFFFC0000186 : 4B15                		cmp/pl	r11			; XL point < 0?
(2)  398/FFFFFFFFC0000188 : 8907                		bt	.tl_fix
(2)  399/FFFFFFFFC000018A : 62BB                		neg	r11,r2			; Fix texture positions
(2)  400/FFFFFFFFC000018C : 326D                		dmuls	r6,r2
(2)  401/FFFFFFFFC000018E : 001A                		sts	macl,r0
(2)  402/FFFFFFFFC0000190 : 350C                		add	r0,r5
(2)  403/FFFFFFFFC0000192 : 328D                		dmuls	r8,r2
(2)  404/FFFFFFFFC0000194 : 001A                		sts	macl,r0
(2)  405/FFFFFFFFC0000196 : 370C                		add	r0,r7
(2)  406/FFFFFFFFC0000198 : 2BBA                		xor	r11,r11			; And reset XL to 0
(2)  407/FFFFFFFFC000019A :                     .tl_fix:
(2)  408/FFFFFFFFC000019A :                     ; 		mov	#-2,r0
(2)  409/FFFFFFFFC000019A :                     ; 		and	r0,r11
(2)  410/FFFFFFFFC000019A :                     ; 		and	r0,r12
(2)  411/FFFFFFFFC000019A :                     
(2)  412/FFFFFFFFC000019A :                     	; X right - X left
(2)  413/FFFFFFFFC000019A : 3CB8                		sub 	r11,r12
(2)  414/FFFFFFFFC000019C :                     ; 		shar	r12
(2)  415/FFFFFFFFC000019C :                     ; 		shar	r12
(2)  416/FFFFFFFFC000019C : 4C15                		cmp/pl	r12
(2)  417/FFFFFFFFC000019E : 8B39                		bf	.tex_skip_line
(2)  418/FFFFFFFFC00001A0 :                     ; 		mov	#$20,r0			; (Limiter test)
(2)  419/FFFFFFFFC00001A0 :                     ; 		cmp/ge	r0,r12
(2)  420/FFFFFFFFC00001A0 :                     ; 		bf	.testlwrit
(2)  421/FFFFFFFFC00001A0 :                     ; 		mov	r0,r12
(2)  422/FFFFFFFFC00001A0 :                     ; .testlwrit:
(2)  423/FFFFFFFFC00001A0 :                     
(2)  424/FFFFFFFFC00001A0 :                     	; Mode 1
(2)  425/FFFFFFFFC00001A0 : C52C                		mov.w	@(marsGbl_CurrGfxMode,gbr),r0
(2)  426/FFFFFFFFC00001A2 : C97F                		and	#$7F,r0
(2)  427/FFFFFFFFC00001A4 : 8801                		cmp/eq	#1,r0
(2)  428/FFFFFFFFC00001A6 : 8B18                		bf	.not_m1
(2)  429/FFFFFFFFC00001A8 : C51D                		mov.w	@(marsGbl_Bg_YFbPos_U,gbr),r0
(2)  430/FFFFFFFFC00001AA : 9A54                		mov	#MSCRL_WIDTH,r10
(2)  431/FFFFFFFFC00001AC : 20AE                		mulu	r10,r0
(2)  432/FFFFFFFFC00001AE : 0A1A                		sts	macl,r10
(2)  433/FFFFFFFFC00001B0 : C606                		mov	@(marsGbl_Bg_FbBase,gbr),r0
(2)  434/FFFFFFFFC00001B2 : 30AC                		add	r10,r0
(2)  435/FFFFFFFFC00001B4 :                     ; 		mov	#-4,r10
(2)  436/FFFFFFFFC00001B4 :                     ; 		and	r10,r0
(2)  437/FFFFFFFFC00001B4 : 6A03                		mov	r0,r10
(2)  438/FFFFFFFFC00001B6 : D024                		mov	#MSCRL_WIDTH*MSCRL_HEIGHT,r0
(2)  439/FFFFFFFFC00001B8 : 3A03                		cmp/ge	r0,r10
(2)  440/FFFFFFFFC00001BA : 8B00                		bf	.fbbaset
(2)  441/FFFFFFFFC00001BC : 3A08                		sub	r0,r10
(2)  442/FFFFFFFFC00001BE :                     .fbbaset:
(2)  447/FFFFFFFFC00001BE : 904A                		mov	#MSCRL_WIDTH,r0
(2)  448/FFFFFFFFC00001C0 : 209F                		muls	r9,r0
(2)  449/FFFFFFFFC00001C2 : 091A                		sts	macl,r9
(2)  451/FFFFFFFFC00001C4 : 3A9C                		add	r9,r10
(2)  452/FFFFFFFFC00001C6 : 3ABC                		add 	r11,r10				; Add X
(2)  453/FFFFFFFFC00001C8 : D01F                		mov	#(MSCRL_WIDTH*MSCRL_HEIGHT),r0
(2)  454/FFFFFFFFC00001CA : 3A03                		cmp/ge	r0,r10
(2)  455/FFFFFFFFC00001CC : 8B00                		bf	.xl_r
(2)  456/FFFFFFFFC00001CE : 3A08                		sub	r0,r10
(2)  457/FFFFFFFFC00001D0 :                     .xl_r:
(2)  458/FFFFFFFFC00001D0 : 4A11                		cmp/pz	r10
(2)  459/FFFFFFFFC00001D2 : 8900                		bt	.xl_l
(2)  460/FFFFFFFFC00001D4 : 3A0C                		add	r0,r10
(2)  461/FFFFFFFFC00001D6 :                     .xl_l:
(2)  462/FFFFFFFFC00001D6 : A004                		bra	.c_m1
(2)  463/FFFFFFFFC00001D8 : 0009                		nop
(2)  464/FFFFFFFFC00001DA :                     
(2)  465/FFFFFFFFC00001DA :                     	; Mode 0 and 2
(2)  466/FFFFFFFFC00001DA :                     .not_m1:
(2)  467/FFFFFFFFC00001DA : 6AB3                		mov	r11,r10
(2)  468/FFFFFFFFC00001DC : 4918                		shll8	r9
(2)  469/FFFFFFFFC00001DE : 4900                		shll	r9
(2)  470/FFFFFFFFC00001E0 : 3A9C                		add	r9,r10
(2)  471/FFFFFFFFC00001E2 :                     .c_m1:
(2)  472/FFFFFFFFC00001E2 :                     
(2)  473/FFFFFFFFC00001E2 :                     	; r10 - Framebuff base
(2)  474/FFFFFFFFC00001E2 : D01A                		mov	#_overwrite+$200,r0
(2)  475/FFFFFFFFC00001E4 : 3A0C                		add	r0,r10
(2)  476/FFFFFFFFC00001E6 : 9237                		mov	#$1FFF,r2
(2)  477/FFFFFFFFC00001E8 : 9037                		mov	#$FF,r0
(2)  478/FFFFFFFFC00001EA : 5BED                		mov	@(plypz_mtrl,r14),r11		; r11 - texture data
(2)  479/FFFFFFFFC00001EC : 54EE                		mov	@(plypz_type,r14),r4		;  r4 - texture palinc|width
(2)  480/FFFFFFFFC00001EE : 6D43                		mov	r4,r13
(2)  481/FFFFFFFFC00001F0 : 4D29                		shlr16	r13
(2)  482/FFFFFFFFC00001F2 : 2D09                		and	r0,r13
(2)  483/FFFFFFFFC00001F4 :                     
(2)  484/FFFFFFFFC00001F4 :                     	; r5 - X curr
(2)  485/FFFFFFFFC00001F4 :                     	; r6 - X inc
(2)  486/FFFFFFFFC00001F4 :                     	; r7 - Y Curr
(2)  487/FFFFFFFFC00001F4 :                     	; r8 - Y add
(2)  488/FFFFFFFFC00001F4 :                     .tex_xloop:
(2)  489/FFFFFFFFC00001F4 : 6273                		mov	r7,r2
(2)  490/FFFFFFFFC00001F6 : 4229                		shlr16	r2
(2)  491/FFFFFFFFC00001F8 : 242F                		muls	r2,r4
(2)  492/FFFFFFFFC00001FA : 6253                		mov	r5,r2	   			; Build column index
(2)  493/FFFFFFFFC00001FC : 356C                		add	r6,r5				; Update X
(2)  494/FFFFFFFFC00001FE : 378C                		add	r8,r7				; Update Y
(2)  495/FFFFFFFFC0000200 : 001A                		sts	macl,r0
(2)  496/FFFFFFFFC0000202 : 4229                		shlr16	r2
(2)  497/FFFFFFFFC0000204 : 302C                		add	r2,r0
(2)  498/FFFFFFFFC0000206 : 00BC                		mov.b	@(r0,r11),r0			; Read pixel
(2)  499/FFFFFFFFC0000208 : 30DC                		add	r13,r0
(2)  500/FFFFFFFFC000020A : C9FF                		and	#$FF,r0
(2)  501/FFFFFFFFC000020C : 2A00                		mov.b	r0,@r10	   			; Write pixels
(2)  502/FFFFFFFFC000020E : 4C10                		dt	r12
(2)  503/FFFFFFFFC0000210 : 8FF0                		bf/s	.tex_xloop
(2)  504/FFFFFFFFC0000212 : 7A01                		add 	#1,r10
(2)  505/FFFFFFFFC0000214 :                     
(2)  506/FFFFFFFFC0000214 :                     .tex_skip_line:
(2)  507/FFFFFFFFC0000214 : 6DF6                		mov	@r15+,r13
(2)  508/FFFFFFFFC0000216 : 6AF6                		mov	@r15+,r10
(2)  509/FFFFFFFFC0000218 : 69F6                		mov	@r15+,r9
(2)  510/FFFFFFFFC000021A : 68F6                		mov	@r15+,r8
(2)  511/FFFFFFFFC000021C : 67F6                		mov	@r15+,r7
(2)  512/FFFFFFFFC000021E : 66F6                		mov	@r15+,r6
(2)  513/FFFFFFFFC0000220 : 65F6                		mov	@r15+,r5
(2)  514/FFFFFFFFC0000222 : 64F6                		mov	@r15+,r4
(2)  515/FFFFFFFFC0000224 : 62F6                		mov	@r15+,r2
(2)  516/FFFFFFFFC0000226 : 61F6                		mov	@r15+,r1
(2)  517/FFFFFFFFC0000228 :                     drwsld_updline_tex:
(2)  518/FFFFFFFFC0000228 : 50E6                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  519/FFFFFFFFC000022A : 350C                		add	r0,r5
(2)  520/FFFFFFFFC000022C : 50EA                		mov	@(plypz_src_xr_dx,r14),r0
(2)  521/FFFFFFFFC000022E : 360C                		add	r0,r6
(2)  522/FFFFFFFFC0000230 : 50E8                		mov	@(plypz_src_yl_dx,r14),r0
(2)  523/FFFFFFFFC0000232 : 370C                		add	r0,r7
(2)  524/FFFFFFFFC0000234 : 50EC                		mov	@(plypz_src_yr_dx,r14),r0
(2)  525/FFFFFFFFC0000236 : 380C                		add	r0,r8
(2)  526/FFFFFFFFC0000238 : 312C                		add	r2,r1				; Update X postions
(2)  527/FFFFFFFFC000023A : 4A10                		dt	r10
(2)  528/FFFFFFFFC000023C : 8D02                		bt/s	drwtex_gonxtpz
(2)  529/FFFFFFFFC000023E : 334C                		add	r4,r3
(2)  530/FFFFFFFFC0000240 : AF66                		bra	drwsld_nxtline_tex
(2)  531/FFFFFFFFC0000242 : 7901                		add	#1,r9
(2)  532/FFFFFFFFC0000244 :                     drwtex_gonxtpz:
(2)  533/FFFFFFFFC0000244 : A06A                		bra	drwsld_nextpz			; if LEN < 0 then check next one instead.
(2)  534/FFFFFFFFC0000246 : 0009                		nop
(2)  535/FFFFFFFFC0000248 :                     		align 4
(2)  536/FFFFFFFFC0000248 : 0001 5000 2402 0200 		ltorg
                    00E0 0140 FF00 0150 
                    1FFF 00FF           
(2)  537/FFFFFFFFC000025C :                     
(2)  538/FFFFFFFFC000025C :                     ; ------------------------------------
(2)  539/FFFFFFFFC000025C :                     ; Solid Color
(2)  540/FFFFFFFFC000025C :                     ;
(2)  541/FFFFFFFFC000025C :                     ; r1  - XL
(2)  542/FFFFFFFFC000025C :                     ; r2  - XL DX
(2)  543/FFFFFFFFC000025C :                     ; r3  - XR
(2)  544/FFFFFFFFC000025C :                     ; r4  - XR DX
(2)  545/FFFFFFFFC000025C :                     ; r9  - Y current
(2)  546/FFFFFFFFC000025C :                     ; r10  - Number of lines
(2)  547/FFFFFFFFC000025C :                     ; ------------------------------------
(2)  548/FFFFFFFFC000025C :                     
(2)  549/FFFFFFFFC000025C :                     ; BUG: Not working anymore because
(2)  550/FFFFFFFFC000025C :                     ; of the scrolling system.
(2)  551/FFFFFFFFC000025C :                     
(2)  552/FFFFFFFFC000025C :                     drwtsk_solidmode:
(2)  553/FFFFFFFFC000025C : 9094                		mov	#$FF,r0
(2)  554/FFFFFFFFC000025E : 56ED                		mov	@(plypz_mtrl,r14),r6
(2)  555/FFFFFFFFC0000260 : 55EE                		mov	@(plypz_type,r14),r5
(2)  556/FFFFFFFFC0000262 : 2509                		and	r0,r5
(2)  557/FFFFFFFFC0000264 : 2609                		and	r0,r6
(2)  558/FFFFFFFFC0000266 : 365C                		add	r5,r6
(2)  559/FFFFFFFFC0000268 : DD43                		mov	#_vdpreg,r13
(2)  560/FFFFFFFFC000026A : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  561/FFFFFFFFC000026C : C802                		tst	#2,r0
(2)  562/FFFFFFFFC000026E : 8BFC                		bf	.wait
(2)  563/FFFFFFFFC0000270 :                     drwsld_nxtline:
(2)  564/FFFFFFFFC0000270 : 6093                		mov	r9,r0
(2)  565/FFFFFFFFC0000272 : 30AC                		add	r10,r0
(2)  566/FFFFFFFFC0000274 : 4015                		cmp/pl	r0
(2)  567/FFFFFFFFC0000276 : 8B51                		bf	drwsld_nextpz
(2)  568/FFFFFFFFC0000278 : 4911                		cmp/pz	r9
(2)  569/FFFFFFFFC000027A : 8B4A                		bf	drwsld_updline
(2)  570/FFFFFFFFC000027C : 9085                		mov	#SCREEN_HEIGHT,r0
(2)  571/FFFFFFFFC000027E : 3907                		cmp/gt	r0,r9
(2)  572/FFFFFFFFC0000280 : 894C                		bt	drwsld_nextpz
(2)  573/FFFFFFFFC0000282 :                     
(2)  574/FFFFFFFFC0000282 : 6B13                		mov	r1,r11
(2)  575/FFFFFFFFC0000284 : 6C33                		mov	r3,r12
(2)  576/FFFFFFFFC0000286 : 4B29                		shlr16	r11
(2)  577/FFFFFFFFC0000288 : 4C29                		shlr16	r12
(2)  578/FFFFFFFFC000028A : 6BBF                		exts	r11,r11
(2)  579/FFFFFFFFC000028C : 6CCF                		exts	r12,r12
(2)  580/FFFFFFFFC000028E : 60C3                		mov	r12,r0
(2)  581/FFFFFFFFC0000290 : 30B8                		sub	r11,r0
(2)  582/FFFFFFFFC0000292 : 4011                		cmp/pz	r0
(2)  583/FFFFFFFFC0000294 : 8902                		bt	.revers
(2)  584/FFFFFFFFC0000296 : 60C3                		mov	r12,r0
(2)  585/FFFFFFFFC0000298 : 6CB3                		mov	r11,r12
(2)  586/FFFFFFFFC000029A : 6B03                		mov	r0,r11
(2)  587/FFFFFFFFC000029C :                     .revers:
(2)  588/FFFFFFFFC000029C : 9076                		mov	#SCREEN_WIDTH-2,r0
(2)  589/FFFFFFFFC000029E : 4C15                		cmp/pl	r12
(2)  590/FFFFFFFFC00002A0 : 8B37                		bf	drwsld_updline
(2)  591/FFFFFFFFC00002A2 : 3B07                		cmp/gt	r0,r11
(2)  592/FFFFFFFFC00002A4 : 8935                		bt	drwsld_updline
(2)  593/FFFFFFFFC00002A6 : 3C07                		cmp/gt	r0,r12
(2)  594/FFFFFFFFC00002A8 : 8B00                		bf	.r_fix
(2)  595/FFFFFFFFC00002AA : 6C03                		mov	r0,r12
(2)  596/FFFFFFFFC00002AC :                     .r_fix:
(2)  597/FFFFFFFFC00002AC : 4B15                		cmp/pl	r11
(2)  598/FFFFFFFFC00002AE : 8900                		bt	.l_fix
(2)  599/FFFFFFFFC00002B0 : 2BBA                		xor	r11,r11
(2)  600/FFFFFFFFC00002B2 :                     .l_fix:
(2)  601/FFFFFFFFC00002B2 : E0FE                		mov	#-2,r0
(2)  602/FFFFFFFFC00002B4 : 2B09                		and	r0,r11
(2)  603/FFFFFFFFC00002B6 : 2C09                		and	r0,r12
(2)  604/FFFFFFFFC00002B8 : 60C3                		mov	r12,r0
(2)  605/FFFFFFFFC00002BA : 30B8                		sub	r11,r0
(2)  606/FFFFFFFFC00002BC : 4015                		cmp/pl	r0
(2)  607/FFFFFFFFC00002BE : 8B28                		bf	drwsld_updline
(2)  608/FFFFFFFFC00002C0 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  609/FFFFFFFFC00002C2 : C802                		tst	#2,r0
(2)  610/FFFFFFFFC00002C4 : 8BFC                		bf	.wait
(2)  611/FFFFFFFFC00002C6 : 60C3                		mov	r12,r0
(2)  612/FFFFFFFFC00002C8 : 30B8                		sub	r11,r0
(2)  613/FFFFFFFFC00002CA : 6C03                		mov	r0,r12
(2)  614/FFFFFFFFC00002CC : 4001                		shlr	r0
(2)  615/FFFFFFFFC00002CE : 81D2                		mov.w	r0,@(4,r13)	; length
(2)  616/FFFFFFFFC00002D0 : 60B3                		mov	r11,r0
(2)  617/FFFFFFFFC00002D2 : 4001                		shlr	r0
(2)  618/FFFFFFFFC00002D4 : 6593                		mov	r9,r5
(2)  619/FFFFFFFFC00002D6 : 7501                		add	#1,r5
(2)  620/FFFFFFFFC00002D8 : 4518                		shll8	r5
(2)  621/FFFFFFFFC00002DA : 305C                		add	r5,r0
(2)  622/FFFFFFFFC00002DC : 81D3                		mov.w	r0,@(6,r13)	; address
(2)  623/FFFFFFFFC00002DE : 6063                		mov	r6,r0
(2)  624/FFFFFFFFC00002E0 : 4018                		shll8	r0
(2)  625/FFFFFFFFC00002E2 : 206B                		or	r6,r0
(2)  626/FFFFFFFFC00002E4 : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2)  627/FFFFFFFFC00002E6 :                     ; .wait:		mov.w	@(10,r13),r0
(2)  628/FFFFFFFFC00002E6 :                     ; 		tst	#2,r0
(2)  629/FFFFFFFFC00002E6 :                     ; 		bf	.wait
(2)  630/FFFFFFFFC00002E6 :                     
(2)  631/FFFFFFFFC00002E6 :                     ; 	If the line is too large, leave it to VDP
(2)  632/FFFFFFFFC00002E6 :                     ; 	and exit watchdog, we will come back on
(2)  633/FFFFFFFFC00002E6 :                     ; 	next trigger.
(2)  634/FFFFFFFFC00002E6 : E028                		mov	#$28,r0
(2)  635/FFFFFFFFC00002E8 : 3C07                		cmp/gt	r0,r12
(2)  636/FFFFFFFFC00002EA : 8B12                		bf	drwsld_updline
(2)  637/FFFFFFFFC00002EC : E003                		mov	#3,r0
(2)  638/FFFFFFFFC00002EE : C134                		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)  639/FFFFFFFFC00002F0 : D022                		mov	#Cach_LnDrw_S,r0
(2)  640/FFFFFFFFC00002F2 : 2016                		mov	r1,@-r0
(2)  641/FFFFFFFFC00002F4 : 2026                		mov	r2,@-r0
(2)  642/FFFFFFFFC00002F6 : 2036                		mov	r3,@-r0
(2)  643/FFFFFFFFC00002F8 : 2046                		mov	r4,@-r0
(2)  644/FFFFFFFFC00002FA : 2056                		mov	r5,@-r0
(2)  645/FFFFFFFFC00002FC : 2066                		mov	r6,@-r0
(2)  646/FFFFFFFFC00002FE : 2076                		mov	r7,@-r0
(2)  647/FFFFFFFFC0000300 : 2086                		mov	r8,@-r0
(2)  648/FFFFFFFFC0000302 : 2096                		mov	r9,@-r0
(2)  649/FFFFFFFFC0000304 : 20A6                		mov	r10,@-r0
(2)  650/FFFFFFFFC0000306 : 20B6                		mov	r11,@-r0
(2)  651/FFFFFFFFC0000308 : 20C6                		mov	r12,@-r0
(2)  652/FFFFFFFFC000030A : 20D6                		mov	r13,@-r0
(2)  653/FFFFFFFFC000030C : 20E6                		mov	r14,@-r0
(2)  654/FFFFFFFFC000030E : A01A                		bra	drwtask_return
(2)  655/FFFFFFFFC0000310 : E210                		mov	#$10,r2			; Exit and re-enter
(2)  656/FFFFFFFFC0000312 :                     drwsld_updline:
(2)  657/FFFFFFFFC0000312 : 312C                		add	r2,r1
(2)  658/FFFFFFFFC0000314 : 334C                		add	r4,r3
(2)  659/FFFFFFFFC0000316 : 4A10                		dt	r10
(2)  660/FFFFFFFFC0000318 : 8FAA                		bf/s	drwsld_nxtline
(2)  661/FFFFFFFFC000031A : 7901                		add	#1,r9
(2)  662/FFFFFFFFC000031C :                     
(2)  663/FFFFFFFFC000031C :                     ; ------------------------------------
(2)  664/FFFFFFFFC000031C :                     
(2)  665/FFFFFFFFC000031C :                     drwsld_nextpz:
(2)  666/FFFFFFFFC000031C : 7E3C                		add	#sizeof_plypz,r14		; And set new point
(2)  667/FFFFFFFFC000031E : 60E3                		mov	r14,r0
(2)  668/FFFFFFFFC0000320 : DE17                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2)  669/FFFFFFFFC0000322 : 30E3                		cmp/ge	r14,r0
(2)  670/FFFFFFFFC0000324 : 8B00                		bf	.reset_rd
(2)  671/FFFFFFFFC0000326 : D017                		mov	#RAM_Mars_VdpDrwList,r0
(2)  672/FFFFFFFFC0000328 :                     .reset_rd:
(2)  673/FFFFFFFFC0000328 : C202                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  674/FFFFFFFFC000032A : C52D                		mov.w	@(marsGbl_PzListCntr,gbr),r0	; Decrement piece
(2)  675/FFFFFFFFC000032C : 70FF                		add	#-1,r0
(2)  676/FFFFFFFFC000032E : C12D                		mov.w	r0,@(marsGbl_PzListCntr,gbr)
(2)  677/FFFFFFFFC0000330 : 4015                		cmp/pl	r0
(2)  678/FFFFFFFFC0000332 : 8901                		bt	.activ
(2)  679/FFFFFFFFC0000334 :                     ; 		bf	.finish_it
(2)  680/FFFFFFFFC0000334 :                     ; 		bra	drwtsk02_newpz2
(2)  681/FFFFFFFFC0000334 :                     ; 		nop
(2)  682/FFFFFFFFC0000334 :                     .finish_it:
(2)  683/FFFFFFFFC0000334 : E000                		mov	#0,r0
(2)  684/FFFFFFFFC0000336 : C134                		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)  685/FFFFFFFFC0000338 :                     .activ:
(2)  686/FFFFFFFFC0000338 : A005                		bra	drwtask_return
(2)  687/FFFFFFFFC000033A : E210                		mov	#$10,r2			; Timer for next watchdog
(2)  688/FFFFFFFFC000033C :                     
(2)  689/FFFFFFFFC000033C :                     ; --------------------------------
(2)  690/FFFFFFFFC000033C :                     ; Task $00
(2)  691/FFFFFFFFC000033C :                     ; --------------------------------
(2)  692/FFFFFFFFC000033C :                     
(2)  693/FFFFFFFFC000033C :                     drwtsk_00:
(2)  694/FFFFFFFFC000033C : 2F26                		mov	r2,@-r15
(2)  695/FFFFFFFFC000033E : E000                		mov	#0,r0
(2)  696/FFFFFFFFC0000340 : C134                		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)  697/FFFFFFFFC0000342 : A00E                		bra	drwtask_exit
(2)  698/FFFFFFFFC0000344 : E210                		mov	#$10,r2
(2)  699/FFFFFFFFC0000346 :                     
(2)  700/FFFFFFFFC0000346 :                     ; --------------------------------
(2)  701/FFFFFFFFC0000346 :                     
(2)  702/FFFFFFFFC0000346 :                     drwtask_return:
(2)  703/FFFFFFFFC0000346 : 4F06                		lds	@r15+,mach
(2)  704/FFFFFFFFC0000348 : 4F16                		lds	@r15+,macl
(2)  705/FFFFFFFFC000034A : 6EF6                		mov	@r15+,r14
(2)  706/FFFFFFFFC000034C : 6DF6                		mov	@r15+,r13
(2)  707/FFFFFFFFC000034E : 6CF6                		mov	@r15+,r12
(2)  708/FFFFFFFFC0000350 : 6BF6                		mov	@r15+,r11
(2)  709/FFFFFFFFC0000352 : 6AF6                		mov	@r15+,r10
(2)  710/FFFFFFFFC0000354 : 69F6                		mov	@r15+,r9
(2)  711/FFFFFFFFC0000356 : 68F6                		mov	@r15+,r8
(2)  712/FFFFFFFFC0000358 : 67F6                		mov	@r15+,r7
(2)  713/FFFFFFFFC000035A : 66F6                		mov	@r15+,r6
(2)  714/FFFFFFFFC000035C : 65F6                		mov	@r15+,r5
(2)  715/FFFFFFFFC000035E : 64F6                		mov	@r15+,r4
(2)  716/FFFFFFFFC0000360 : 63F6                		mov	@r15+,r3
(2)  717/FFFFFFFFC0000362 :                     drwtask_exit:
(2)  718/FFFFFFFFC0000362 : 9114                		mov.l   #$FFFFFE80,r1
(2)  719/FFFFFFFFC0000364 : 9014                		mov.w   #$A518,r0	; OFF
(2)  720/FFFFFFFFC0000366 : 2101                		mov.w   r0,@r1
(2)  721/FFFFFFFFC0000368 : CB20                		or      #$20,r0		; ON
(2)  722/FFFFFFFFC000036A : 2101                		mov.w   r0,@r1
(2)  723/FFFFFFFFC000036C : 9011                		mov.w   #$5A00,r0	; r2 - Timer
(2)  724/FFFFFFFFC000036E : 202B                		or	r2,r0
(2)  725/FFFFFFFFC0000370 : 2101                		mov.w   r0,@r1
(2)  726/FFFFFFFFC0000372 : 62F6                		mov	@r15+,r2
(2)  727/FFFFFFFFC0000374 : 000B                		rts
(2)  728/FFFFFFFFC0000376 : 0009                		nop
(2)  729/FFFFFFFFC0000378 :                     		align 4
(2)  730/FFFFFFFFC0000378 : 2000 4100 C000 0460 		ltorg
                    0600 A114 0600 7414 
                    00FF 00E0 013E FE80 
                    A518 5A00           
(2)  731/FFFFFFFFC0000394 :                     
(2)  732/FFFFFFFFC0000394 :                     ; ; --------------------------------
(2)  733/FFFFFFFFC0000394 :                     ; ; Task $03
(2)  734/FFFFFFFFC0000394 :                     ; ; --------------------------------
(2)  735/FFFFFFFFC0000394 :                     ;
(2)  736/FFFFFFFFC0000394 :                     ; drwtsk_03:
(2)  737/FFFFFFFFC0000394 :                     ; 		mov	r2,@-r15
(2)  738/FFFFFFFFC0000394 :                     ; 		mov.w	@(marsGbl_WdDrwPause,gbr),r0
(2)  739/FFFFFFFFC0000394 :                     ; 		cmp/eq	#1,r0
(2)  740/FFFFFFFFC0000394 :                     ; 		bt	.exit
(2)  741/FFFFFFFFC0000394 :                     ; 		mov	r3,@-r15
(2)  742/FFFFFFFFC0000394 :                     ; 		mov	r4,@-r15
(2)  743/FFFFFFFFC0000394 :                     ; 		mov	r5,@-r15
(2)  744/FFFFFFFFC0000394 :                     ; 		mov	r6,@-r15
(2)  745/FFFFFFFFC0000394 :                     ; 		mov	r7,@-r15
(2)  746/FFFFFFFFC0000394 :                     ; 		mov	r8,@-r15
(2)  747/FFFFFFFFC0000394 :                     ; 		mov	r9,@-r15
(2)  748/FFFFFFFFC0000394 :                     ; 		mov	r10,@-r15
(2)  749/FFFFFFFFC0000394 :                     ; 		mov	r11,@-r15
(2)  750/FFFFFFFFC0000394 :                     ; 		mov	r12,@-r15
(2)  751/FFFFFFFFC0000394 :                     ; 		mov	r13,@-r15
(2)  752/FFFFFFFFC0000394 :                     ; 		mov	r14,@-r15
(2)  753/FFFFFFFFC0000394 :                     ; 		sts	macl,@-r15
(2)  754/FFFFFFFFC0000394 :                     ; 		sts	mach,@-r15
(2)  755/FFFFFFFFC0000394 :                     ; 		mov	#Cach_LnDrw_L,r0
(2)  756/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r14
(2)  757/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r13
(2)  758/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r12
(2)  759/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r11
(2)  760/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r10
(2)  761/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r9
(2)  762/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r8
(2)  763/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r7
(2)  764/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r6
(2)  765/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r5
(2)  766/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r4
(2)  767/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r3
(2)  768/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r2
(2)  769/FFFFFFFFC0000394 :                     ; 		mov	@r0+,r1
(2)  770/FFFFFFFFC0000394 :                     ; 		mov	#1,r0
(2)  771/FFFFFFFFC0000394 :                     ; 		mov.w	r0,@(marsGbl_WdDrwTask,gbr)
(2)  772/FFFFFFFFC0000394 :                     ; 		bra	drwsld_updline
(2)  773/FFFFFFFFC0000394 :                     ; 		nop
(2)  774/FFFFFFFFC0000394 :                     ; .exit:		bra	drwtask_exit
(2)  775/FFFFFFFFC0000394 :                     ; 		mov	#$10,r2
(2)  776/FFFFFFFFC0000394 :                     ; 		align 4
(2)  777/FFFFFFFFC0000394 :                     
(2)  778/FFFFFFFFC0000394 :                     ; ------------------------------------------------
(2)  779/FFFFFFFFC0000394 :                     
(2)  780/FFFFFFFFC0000394 :                     		align 4
(2)  781/FFFFFFFFC0000394 :                     Cach_Xpos	ds.l 1			; Mode2 X position
(2)  782/FFFFFFFFC0000398 :                     Cach_Xadd	ds.l 1			; Mode2 XDX (xxxx.xxxx)
(2)  783/FFFFFFFFC000039C :                     Cach_Yadd	ds.l 1			; Mode2 YDX (xxxx.xxxx)
(2)  784/FFFFFFFFC00003A0 :                     Cach_Ycurr	ds.l 1			; Mode2 Y current pos (updates)
(2)  785/FFFFFFFFC00003A4 :                     Cach_XHead_L	ds.l 1			; Left draw beam
(2)  786/FFFFFFFFC00003A8 :                     Cach_XHead_R	ds.l 1			; Right draw beam
(2)  787/FFFFFFFFC00003AC :                     Cach_YHead_D	ds.l 1			; Bottom draw beam
(2)  788/FFFFFFFFC00003B0 :                     Cach_YHead_U	ds.l 1			; Top draw beam
(2)  789/FFFFFFFFC00003B4 :                     Cach_BgFbPos_U	ds.l 1			; Upper Y FB pos
(2)  790/FFFFFFFFC00003B8 :                     Cach_BgFbPos_D	ds.l 1			; Lower Y FB pos
(2)  791/FFFFFFFFC00003BC :                     Cach_BgFbPos_LR	ds.l 1			; Left/Right FB pos
(2)  792/FFFFFFFFC00003C0 :                     Cach_LR_Lines	ds.l 1			; (L/R) X Lines to process
(2)  793/FFFFFFFFC00003C4 :                     
(2)  794/FFFFFFFFC00003C4 :                     Cach_Md2_Lines	ds.l 1
(2)  795/FFFFFFFFC00003C8 :                     Cach_DDA_Top	ds.l 2*2		; First 2 points
(2)  796/FFFFFFFFC00003D8 :                     Cach_DDA_Last	ds.l 2*2		; Triangle or Quad (+8)
(2)  797/FFFFFFFFC00003E8 :                     Cach_DDA_Src	ds.l 4*2
(2)  798/FFFFFFFFC0000408 :                     Cach_DDA_Src_L	ds.l 4			; X/DX/Y/DX positions for textures
(2)  799/FFFFFFFFC0000418 :                     Cach_DDA_Src_R	ds.l 4
(2)  800/FFFFFFFFC0000428 :                     Cach_LnDrw_L	ds.l 14			; Own stack: Read foward (-->)
(2)  801/FFFFFFFFC0000460 :                     Cach_LnDrw_S	ds.l 0			; Read this backwards (<--)
(2)  802/FFFFFFFFC0000460 :                     
(2)  803/FFFFFFFFC0000460 :                     ; ------------------------------------------------
(2)  804/ 6001A2C :                     .end:		phase CACHE_MASTER+.end&$1FFF
(2)  805/ 6001A2C :                     CACHE_MASTER_E:
(2)  806/ 6001A2C :                     		align 4
(2)  810/ 6001A2C :                     
(2)  811/ 6001A2C :                     ; ====================================================================
(2)  812/ 6001A2C :                     ; ----------------------------------------------------------------
(2)  813/ 6001A2C :                     ; CACHE code for Slave CPU
(2)  814/ 6001A2C :                     ;
(2)  815/ 6001A2C :                     ; LIMIT: $800 bytes
(2)  816/ 6001A2C :                     ; ----------------------------------------------------------------
(2)  817/ 6001A2C :                     
(2)  818/ 6001A2C :                     		align 4
(2)  819/ 6001A2C :                     CACHE_SLAVE:
(2)  820/FFFFFFFFC0000000 :                     		phase $C0000000
(2)  821/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)  822/FFFFFFFFC0000000 :                     
(2)  823/FFFFFFFFC0000000 :                     MarsSnd_PwmCache	ds.b $80*MAX_PWMCHNL
(2)  824/FFFFFFFFC0000380 :                     
(2)  825/FFFFFFFFC0000380 :                     ; ------------------------------------------------
(2)  826/FFFFFFFFC0000380 :                     ; Mars PWM playback (Runs on PWM interrupt)
(2)  827/FFFFFFFFC0000380 :                     ; r0-r10 only
(2)  828/FFFFFFFFC0000380 :                     ; ------------------------------------------------
(2)  829/FFFFFFFFC0000380 :                     
(2)  830/FFFFFFFFC0000380 :                     ; **** CRITICAL ROUTINE, MUST BE FAST ***
(2)  831/FFFFFFFFC0000380 :                     
(2)  832/FFFFFFFFC0000380 :                     MarsSound_ReadPwm:
(2)  833/FFFFFFFFC0000380 : 2F26                		mov	r2,@-r15
(2)  834/FFFFFFFFC0000382 : 2F36                		mov	r3,@-r15
(2)  835/FFFFFFFFC0000384 : 2F46                		mov	r4,@-r15
(2)  836/FFFFFFFFC0000386 : 2F56                		mov	r5,@-r15
(2)  837/FFFFFFFFC0000388 : 2F66                		mov	r6,@-r15
(2)  838/FFFFFFFFC000038A : 2F76                		mov	r7,@-r15
(2)  839/FFFFFFFFC000038C : 2F86                		mov	r8,@-r15
(2)  840/FFFFFFFFC000038E : 2F96                		mov	r9,@-r15
(2)  841/FFFFFFFFC0000390 : 2FA6                		mov	r10,@-r15
(2)  842/FFFFFFFFC0000392 : 4F12                		sts	macl,@-r15
(2)  843/FFFFFFFFC0000394 :                     
(2)  844/FFFFFFFFC0000394 :                     ; ------------------------------------------------
(2)  845/FFFFFFFFC0000394 :                     
(2)  846/FFFFFFFFC0000394 : DA41                		mov	#MarsSnd_PwmCache,r10
(2)  847/FFFFFFFFC0000396 : D942                		mov	#MarsSnd_PwmChnls,r9	; r9 - Channel list
(2)  848/FFFFFFFFC0000398 : E807                		mov 	#MAX_PWMCHNL,r8		; r8 - Number of channels
(2)  849/FFFFFFFFC000039A : E700                		mov 	#0,r7			; r7 - RIGHT BASE wave
(2)  850/FFFFFFFFC000039C : E600                		mov 	#0,r6			; r6 - LEFT BASE wave
(2)  851/FFFFFFFFC000039E :                     .loop:
(2)  852/FFFFFFFFC000039E : 5090                		mov	@(mchnsnd_enbl,r9),r0	; Channel enabled? (non-Zero)
(2)  853/FFFFFFFFC00003A0 : 8800                		cmp/eq	#0,r0
(2)  854/FFFFFFFFC00003A2 : 8B03                		bf	.on
(2)  855/FFFFFFFFC00003A4 :                     .silent:
(2)  856/FFFFFFFFC00003A4 : E07F                		mov	#$7F,r0
(2)  857/FFFFFFFFC00003A6 : 6203                		mov	r0,r2
(2)  858/FFFFFFFFC00003A8 : A05F                		bra	.skip
(2)  859/FFFFFFFFC00003AA : 6103                		mov	r0,r1
(2)  860/FFFFFFFFC00003AC :                     .on:
(2)  861/FFFFFFFFC00003AC : 5491                		mov 	@(mchnsnd_read,r9),r4
(2)  862/FFFFFFFFC00003AE : 6343                		mov	r4,r3
(2)  863/FFFFFFFFC00003B0 : 5095                		mov 	@(mchnsnd_end,r9),r0
(2)  864/FFFFFFFFC00003B2 : D13C                		mov	#$00FFFFFF,r1
(2)  865/FFFFFFFFC00003B4 : 4319                		shlr8	r3
(2)  866/FFFFFFFFC00003B6 : 4019                		shlr8	r0
(2)  867/FFFFFFFFC00003B8 : 2319                		and	r1,r3
(2)  868/FFFFFFFFC00003BA : 2019                		and	r1,r0
(2)  869/FFFFFFFFC00003BC : 3302                		cmp/hs	r0,r3
(2)  870/FFFFFFFFC00003BE : 8B0D                		bf	.read
(2)  871/FFFFFFFFC00003C0 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  872/FFFFFFFFC00003C2 : C804                		tst	#%00000100,r0
(2)  873/FFFFFFFFC00003C4 : 8B03                		bf	.loop_me
(2)  874/FFFFFFFFC00003C6 : E000                		mov 	#0,r0
(2)  875/FFFFFFFFC00003C8 : 1900                		mov 	r0,@(mchnsnd_enbl,r9)
(2)  876/FFFFFFFFC00003CA :                     ; 		mov	@(mchnsnd_start,r9),r0
(2)  877/FFFFFFFFC00003CA :                     ; 		mov	r0,@(mchnsnd_start,r9)
(2)  878/FFFFFFFFC00003CA : AFEB                		bra	.silent
(2)  879/FFFFFFFFC00003CC : 0009                		nop
(2)  880/FFFFFFFFC00003CE :                     .loop_me:
(2)  881/FFFFFFFFC00003CE : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  882/FFFFFFFFC00003D0 : 5196                		mov	@(mchnsnd_loop,r9),r1
(2)  883/FFFFFFFFC00003D2 : 5494                		mov 	@(mchnsnd_start,r9),r4
(2)  884/FFFFFFFFC00003D4 : C808                		tst	#%00001000,r0
(2)  885/FFFFFFFFC00003D6 : 8900                		bt	.mono_l
(2)  886/FFFFFFFFC00003D8 : 4100                		shll	r1
(2)  887/FFFFFFFFC00003DA :                     .mono_l:
(2)  888/FFFFFFFFC00003DA : 341C                		add	r1,r4
(2)  889/FFFFFFFFC00003DC :                     
(2)  890/FFFFFFFFC00003DC :                     ; read wave
(2)  891/FFFFFFFFC00003DC :                     ; r4 - WAVE READ pointer
(2)  892/FFFFFFFFC00003DC :                     .read:
(2)  893/FFFFFFFFC00003DC : 5597                		mov 	@(mchnsnd_pitch,r9),r5	; Check if sample is on ROM
(2)  894/FFFFFFFFC00003DE : 5293                		mov 	@(mchnsnd_bank,r9),r2
(2)  895/FFFFFFFFC00003E0 : D031                		mov	#CS1,r0
(2)  896/FFFFFFFFC00003E2 : 3200                		cmp/eq	r0,r2
(2)  897/FFFFFFFFC00003E4 : 8B11                		bf	.not_rom
(2)  898/FFFFFFFFC00003E6 : D131                		mov	#MarsSnd_RvMode,r1
(2)  899/FFFFFFFFC00003E8 : 6012                		mov	@r1,r0
(2)  900/FFFFFFFFC00003EA : 8801                		cmp/eq	#1,r0
(2)  901/FFFFFFFFC00003EC : 8B0D                		bf	.not_rom
(2)  902/FFFFFFFFC00003EE :                     
(2)  903/FFFFFFFFC00003EE :                     	; r1 - left WAV
(2)  904/FFFFFFFFC00003EE :                     	; r3 - right WAV
(2)  905/FFFFFFFFC00003EE :                     	; r4 - original READ point
(2)  906/FFFFFFFFC00003EE :                     	; r5 - Pitch
(2)  907/FFFFFFFFC00003EE : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  908/FFFFFFFFC00003F0 : 6153                		mov	r5,r1
(2)  909/FFFFFFFFC00003F2 : C808                		tst	#%00001000,r0
(2)  910/FFFFFFFFC00003F4 : 8900                		bt	.mono_c
(2)  911/FFFFFFFFC00003F6 : 4100                		shll	r1
(2)  912/FFFFFFFFC00003F8 :                     .mono_c:
(2)  913/FFFFFFFFC00003F8 : 5292                		mov	@(mchnsnd_cchread,r9),r2
(2)  914/FFFFFFFFC00003FA : 4219                		shlr8	r2
(2)  915/FFFFFFFFC00003FC : E17F                		mov	#$7F,r1
(2)  916/FFFFFFFFC00003FE : 2219                		and	r1,r2
(2)  917/FFFFFFFFC0000400 : 32AC                		add	r10,r2
(2)  918/FFFFFFFFC0000402 : 6124                		mov.b	@r2+,r1
(2)  919/FFFFFFFFC0000404 : 6324                		mov.b	@r2+,r3			; null in MONO samples
(2)  920/FFFFFFFFC0000406 : A00B                		bra	.from_rv
(2)  921/FFFFFFFFC0000408 : 0009                		nop
(2)  922/FFFFFFFFC000040A :                     
(2)  923/FFFFFFFFC000040A :                     ; Play as normal
(2)  924/FFFFFFFFC000040A :                     ; r0 - flags
(2)  925/FFFFFFFFC000040A :                     ; r4 - READ pointer
(2)  926/FFFFFFFFC000040A :                     .not_rom:
(2)  927/FFFFFFFFC000040A :                     ; 		mov	#_sysreg+comm15,r0	; *** TESTING
(2)  928/FFFFFFFFC000040A :                     ; 		mov.w	@r0,r0
(2)  929/FFFFFFFFC000040A :                     ; 		and	#%00010000,r0
(2)  930/FFFFFFFFC000040A :                     ; 		tst	r0,r0
(2)  931/FFFFFFFFC000040A :                     ; 		bf	*
(2)  932/FFFFFFFFC000040A :                     ; 		mov	#_sysreg+dreqctl,r0
(2)  933/FFFFFFFFC000040A :                     ; 		mov.w	@r0,r0
(2)  934/FFFFFFFFC000040A :                     ; 		tst	#$01,r0
(2)  935/FFFFFFFFC000040A :                     ; 		bf	*			; *** TESTING
(2)  936/FFFFFFFFC000040A :                     
(2)  937/FFFFFFFFC000040A : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  938/FFFFFFFFC000040C : 6343                		mov 	r4,r3
(2)  939/FFFFFFFFC000040E : 4319                		shlr8	r3
(2)  940/FFFFFFFFC0000410 : D124                		mov	#$00FFFFFF,r1
(2)  941/FFFFFFFFC0000412 : C808                		tst	#%00001000,r0
(2)  942/FFFFFFFFC0000414 : 8900                		bt	.mono_a
(2)  943/FFFFFFFFC0000416 : 71FF                		add	#-1,r1
(2)  944/FFFFFFFFC0000418 :                     .mono_a:
(2)  945/FFFFFFFFC0000418 : 2319                		and	r1,r3
(2)  946/FFFFFFFFC000041A : 232B                		or	r2,r3
(2)  947/FFFFFFFFC000041C : 6134                		mov.b	@r3+,r1
(2)  948/FFFFFFFFC000041E : 6334                		mov.b	@r3+,r3
(2)  949/FFFFFFFFC0000420 :                     ; 		mov	#$7F,r2
(2)  950/FFFFFFFFC0000420 :                     ; 		cmp/eq	r2,r1
(2)  951/FFFFFFFFC0000420 :                     ; 		bt	*
(2)  952/FFFFFFFFC0000420 :                     .from_rv:
(2)  953/FFFFFFFFC0000420 : 6213                		mov	r1,r2
(2)  954/FFFFFFFFC0000422 : C808                		tst	#%00001000,r0
(2)  955/FFFFFFFFC0000424 : 8901                		bt	.mono
(2)  956/FFFFFFFFC0000426 : 6233                		mov	r3,r2
(2)  957/FFFFFFFFC0000428 : 4500                		shll	r5
(2)  958/FFFFFFFFC000042A :                     .mono:
(2)  959/FFFFFFFFC000042A : 345C                		add	r5,r4
(2)  960/FFFFFFFFC000042C : 1941                		mov	r4,@(mchnsnd_read,r9)
(2)  961/FFFFFFFFC000042E : 5392                		mov	@(mchnsnd_cchread,r9),r3
(2)  962/FFFFFFFFC0000430 : 335C                		add	r5,r3
(2)  963/FFFFFFFFC0000432 : 1932                		mov	r3,@(mchnsnd_cchread,r9)
(2)  964/FFFFFFFFC0000434 : 9336                		mov	#$FF,r3
(2)  965/FFFFFFFFC0000436 : 2139                		and	r3,r1
(2)  966/FFFFFFFFC0000438 : 2239                		and	r3,r2
(2)  967/FFFFFFFFC000043A : C802                		tst	#%00000010,r0	; LEFT enabled?
(2)  968/FFFFFFFFC000043C : 8B00                		bf	.no_l
(2)  969/FFFFFFFFC000043E : E17F                		mov	#$7F,r1		; Force LEFT off
(2)  970/FFFFFFFFC0000440 :                     .no_l:
(2)  971/FFFFFFFFC0000440 : C801                		tst	#%00000001,r0	; RIGHT enabled?
(2)  972/FFFFFFFFC0000442 : 8B00                		bf	.no_r
(2)  973/FFFFFFFFC0000444 : E27F                		mov	#$7F,r2		; Force RIGHT off
(2)  974/FFFFFFFFC0000446 :                     .no_r:
(2)  975/FFFFFFFFC0000446 : 5099                		mov	@(mchnsnd_vol,r9),r0
(2)  976/FFFFFFFFC0000448 : 4015                		cmp/pl	r0
(2)  977/FFFFFFFFC000044A : 8B0E                		bf	.skip
(2)  978/FFFFFFFFC000044C : 7001                		add	#1,r0
(2)  979/FFFFFFFFC000044E : 210E                		mulu	r0,r1
(2)  980/FFFFFFFFC0000450 : 041A                		sts	macl,r4
(2)  981/FFFFFFFFC0000452 : 4419                		shlr8	r4
(2)  982/FFFFFFFFC0000454 : 3148                		sub	r4,r1
(2)  983/FFFFFFFFC0000456 : 220E                		mulu	r0,r2
(2)  984/FFFFFFFFC0000458 : 041A                		sts	macl,r4
(2)  985/FFFFFFFFC000045A : 4419                		shlr8	r4
(2)  986/FFFFFFFFC000045C : 3248                		sub	r4,r2
(2)  987/FFFFFFFFC000045E : E47F                		mov	#$7F,r4		; align wave to pwm
(2)  988/FFFFFFFFC0000460 : 240E                		mulu	r0,r4
(2)  989/FFFFFFFFC0000462 : 041A                		sts	macl,r4
(2)  990/FFFFFFFFC0000464 : 4419                		shlr8	r4
(2)  991/FFFFFFFFC0000466 : 314C                		add	r4,r1
(2)  992/FFFFFFFFC0000468 : 324C                		add	r4,r2
(2)  993/FFFFFFFFC000046A :                     .skip:
(2)  994/FFFFFFFFC000046A : 7101                		add	#1,r1
(2)  995/FFFFFFFFC000046C : 7201                		add	#1,r2
(2)  996/FFFFFFFFC000046E : 361C                		add	r1,r6
(2)  997/FFFFFFFFC0000470 : 372C                		add	r2,r7
(2)  998/FFFFFFFFC0000472 : 9021                		mov	#$80,r0
(2)  999/FFFFFFFFC0000474 : 3A0C                		add	r0,r10
(2) 1000/FFFFFFFFC0000476 : 4810                		dt	r8
(2) 1001/FFFFFFFFC0000478 : 8F91                		bf/s	.loop
(2) 1002/FFFFFFFFC000047A : 7928                		add	#sizeof_sndchn,r9
(2) 1003/FFFFFFFFC000047C :                     
(2) 1004/FFFFFFFFC000047C :                     	; ***This check is for emus only***
(2) 1005/FFFFFFFFC000047C :                     	; It recreates what happens to the PWM
(2) 1006/FFFFFFFFC000047C :                     	; in real hardware when it overflows
(2) 1007/FFFFFFFFC000047C :                     ; 		mov	#$3FF,r0
(2) 1008/FFFFFFFFC000047C :                     ; 		cmp/gt	r0,r5
(2) 1009/FFFFFFFFC000047C :                     ; 		bf	.lmuch
(2) 1010/FFFFFFFFC000047C :                     ; 		mov	r0,r5
(2) 1011/FFFFFFFFC000047C :                     ; .lmuch:	cmp/gt	r0,r6
(2) 1012/FFFFFFFFC000047C :                     ; 		bf	.rmuch
(2) 1013/FFFFFFFFC000047C :                     ; 		mov	r0,r6
(2) 1014/FFFFFFFFC000047C :                     ; .rmuch:
(2) 1015/FFFFFFFFC000047C : D10C                		mov	#_sysreg+lchwidth,r1	; Write WAVE result
(2) 1016/FFFFFFFFC000047E : D20D                		mov	#_sysreg+rchwidth,r2
(2) 1017/FFFFFFFFC0000480 : 2161                 		mov.w	r6,@r1
(2) 1018/FFFFFFFFC0000482 : 2271                 		mov.w	r7,@r2
(2) 1019/FFFFFFFFC0000484 :                     ; 		mov	#_sysreg+monowidth,r3	; Works fine without this...
(2) 1020/FFFFFFFFC0000484 :                     ; 		mov.b	@r3,r0
(2) 1021/FFFFFFFFC0000484 :                     ; 		tst	#$80,r0
(2) 1022/FFFFFFFFC0000484 :                     ; 		bf	.retry
(2) 1023/FFFFFFFFC0000484 : 4F16                		lds	@r15+,macl
(2) 1024/FFFFFFFFC0000486 : 6AF6                		mov	@r15+,r10
(2) 1025/FFFFFFFFC0000488 : 69F6                		mov	@r15+,r9
(2) 1026/FFFFFFFFC000048A : 68F6                		mov	@r15+,r8
(2) 1027/FFFFFFFFC000048C : 67F6                		mov	@r15+,r7
(2) 1028/FFFFFFFFC000048E : 66F6                		mov	@r15+,r6
(2) 1029/FFFFFFFFC0000490 : 65F6                		mov	@r15+,r5
(2) 1030/FFFFFFFFC0000492 : 64F6                		mov	@r15+,r4
(2) 1031/FFFFFFFFC0000494 : 63F6                		mov	@r15+,r3
(2) 1032/FFFFFFFFC0000496 : 62F6                		mov	@r15+,r2
(2) 1033/FFFFFFFFC0000498 : 000B                		rts
(2) 1034/FFFFFFFFC000049A : 0009                		nop
(2) 1035/FFFFFFFFC000049C :                     		align 4
(2) 1036/FFFFFFFFC000049C : C000 0000 0600 A918 		ltorg
                    00FF FFFF 0200 0000 
                    C000 04BC 2000 4034 
                    2000 4036 0080      
(2) 1037/FFFFFFFFC00004BA :                     
(2) 1038/FFFFFFFFC00004BA :                     ; ------------------------------------------------
(2) 1039/FFFFFFFFC00004BA :                     		align 4
(2) 1040/FFFFFFFFC00004BC :                     MarsSnd_RvMode	ds.l 1
(2) 1041/FFFFFFFFC00004C0 :                     MarsSnd_Active	ds.l 1
(2) 1042/FFFFFFFFC00004C4 :                     ; ------------------------------------------------
(2) 1043/ 6001EF0 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1044/ 6001EF0 :                     CACHE_SLAVE_E:
(2) 1045/ 6001EF0 :                     		align 4
(2) 1049/ 6001EF0 :                     
(1) 3102/ 6001EF0 :                     
(1) 3103/ 6001EF0 :                     ; ====================================================================
(1) 3104/ 6001EF0 :                     ; ----------------------------------------------------------------
(1) 3105/ 6001EF0 :                     ; Data
(1) 3106/ 6001EF0 :                     ; ----------------------------------------------------------------
(1) 3107/ 6001EF0 :                     
(1) 3108/ 6001EF0 :                     		align 4
(1) 3109/ 6001EF0 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 3110/ 60046F0 :                     		align 4
(1) 3111/ 60046F0 :                     		include "data/mars_sdram.asm"
(2)    1/ 60046F0 :                     ; ====================================================================
(2)    2/ 60046F0 :                     ; ----------------------------------------------------------------
(2)    3/ 60046F0 :                     ; SH2 SDRAM user data
(2)    4/ 60046F0 :                     ; 
(2)    5/ 60046F0 :                     ; This data is stored on SDRAM, it's always available to use
(2)    6/ 60046F0 :                     ; and can be re-writeable
(2)    7/ 60046F0 :                     ; Put small sections of data like palettes or small models
(2)    8/ 60046F0 :                     ; ----------------------------------------------------------------
(2)    9/ 60046F0 :                     
(2)   10/ 60046F0 :                     ; --------------------------------------------------------
(2)   11/ 60046F0 :                     ; PWM instruments
(2)   12/ 60046F0 :                     ; --------------------------------------------------------
(2)   13/ 60046F0 :                     
(2)   14/ 60046F0 :                     ; TODO: separate file
(2)   15/ 60046F0 :                     
(2)   16/ 60046F0 :                     ; gSmpl macro locate
(2)   17/ 60046F0 :                     ; .start
(2)   18/ 60046F0 :                     ; 	dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)	; length
(2)   19/ 60046F0 :                     ; 	binclude locate,$2C	; actual data
(2)   20/ 60046F0 :                     ; .end
(2)   21/ 60046F0 :                     ; 	endm
(2)   22/ 60046F0 :                     
(2)   23/ 60046F0 :                     ; Palette_Intro:	binclude "data/mars/objects/mtrl/intro_pal.bin"
(2)   24/ 60046F0 :                     ; 		align 4
(2)   25/ 60046F0 :                     ; Palette_Map:	binclude "data/mars/maps/mtrl/marscity_pal.bin"
(2)   26/ 60046F0 :                     ; 		align 4
(2)   27/ 60046F0 :                     ; Palette_projname:
(2)   28/ 60046F0 :                     ; 		binclude "data/mars/objects/mtrl/projname_pal.bin"
(2)   29/ 60046F0 :                     ; 		align 4
(2)   30/ 60046F0 :                     
(2)   31/ 60046F0 :                     ; --------------------------------------------------------
(2)   32/ 60046F0 :                     ; Objects
(2)   33/ 60046F0 :                     ; --------------------------------------------------------
(2)   34/ 60046F0 :                     
(2)   35/ 60046F0 :                     ; 		include "data/mars/objects/mdl/intro_1/head.asm"
(2)   36/ 60046F0 :                     ; 		align 4
(2)   37/ 60046F0 :                     ; 		include "data/mars/objects/mdl/intro_2/head.asm"
(2)   38/ 60046F0 :                     ; 		align 4
(2)   39/ 60046F0 :                     
(2)   40/ 60046F0 :                     ; ====================================================================
(2)   41/ 60046F0 :                     ; ----------------------------------------------------------------
(2)   42/ 60046F0 :                     ; PWM Instrument pointers stored on 32X's SDRAM area
(2)   43/ 60046F0 :                     ; the sample data is stored on the 32X's ROM view area
(2)   44/ 60046F0 :                     ; (data/mars_rom.asm)
(2)   45/ 60046F0 :                     ; ----------------------------------------------------------------
(2)   46/ 60046F0 :                     
(1) 3112/ 60046F0 :                     
(1) 3113/ 60046F0 :                     ; ====================================================================
(1) 3114/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3115/ 60046F0 :                     ; MARS SH2 RAM
(1) 3116/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3117/ 60046F0 :                     
(1) 3118/ 60046F0 :                     		align $10
(1) 3119/ 60046F0 :                     SH2_RAM:
(1) 3120/ 60046F0 : (MACRO)             		struct SH2_RAM
(1) 3120/ 60046F0 : =$60046F0           GLBL_LASTPC     set *
(1) 3120/   479F0 :                                     dephase
(1) 3120/   479F0 : =$479F0             GLBL_LASTORG    set *
(1) 3120/ 60046F0 :                                     phase SH2_RAM
(1) 3127/ 60046F0 :                     MarsRam_System	ds.b (sizeof_marssys-MarsRam_System)
(1) 3128/ 60047CC :                     MarsRam_Video	ds.b (sizeof_marsvid-MarsRam_Video)
(1) 3129/ 600A918 :                     MarsRam_Sound	ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 3130/ 600AA68 :                     sizeof_marsram	ds.l 0
(1) 3132/ 600AA68 :                     
(1) 3133/ 600AA68 :                     .here:
(1) 3137/ 600AA68 : (MACRO)             		finish
(1) 3137/ 60046F0 :                                     !org GLBL_LASTORG
(1) 3137/ 60046F0 :                                     phase GLBL_LASTPC
(1) 3138/ 60046F0 :                     
(1) 3139/ 60046F0 :                     ; ====================================================================
(1) 3140/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3141/ 60046F0 :                     ; MARS Sound RAM
(1) 3142/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3143/ 60046F0 :                     
(1) 3144/ 60046F0 : (MACRO)             			struct MarsRam_Sound
(1) 3144/ 60046F0 : =$60046F0           GLBL_LASTPC     set *
(1) 3144/   479F0 :                                     dephase
(1) 3144/   479F0 : =$479F0             GLBL_LASTORG    set *
(1) 3144/ 600A918 :                                     phase MARSRAM_SOUND
(1) 3145/ 600A918 :                     MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(1) 3146/ 600AA30 :                     MarsSnd_PwmControl	ds.b $38	; 7 bytes per channel.
(1) 3147/ 600AA68 :                     ; MarsSnd_PwmCache	ds.b $100*MAX_PWMCHNL
(1) 3148/ 600AA68 :                     ; MarsSnd_PwmTrkData	ds.b $80*2
(1) 3149/ 600AA68 :                     ; MarsSnd_Active		ds.l 1
(1) 3150/ 600AA68 :                     sizeof_marssnd		ds.l 0
(1) 3151/ 600AA68 : (MACRO)             			finish
(1) 3151/ 600A918 :                                     !org GLBL_LASTORG
(1) 3151/ 60046F0 :                                     phase GLBL_LASTPC
(1) 3152/ 60046F0 :                     
(1) 3153/ 60046F0 :                     ; ====================================================================
(1) 3154/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3155/ 60046F0 :                     ; MARS Video RAM
(1) 3156/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3157/ 60046F0 :                     
(1) 3158/ 60046F0 : (MACRO)             			struct MarsRam_Video
(1) 3158/ 60046F0 : =$60046F0           GLBL_LASTPC     set *
(1) 3158/   479F0 :                                     dephase
(1) 3158/   479F0 : =$479F0             GLBL_LASTORG    set *
(1) 3158/ 60047CC :                                     phase MARSRAM_VIDEO
(1) 3159/ 60047CC :                     RAM_Mars_Palette	ds.w 256			; Indexed palette
(1) 3160/ 60049CC :                     RAM_Mars_DREQ		ds.w 256			; 256 WORDS of MD communication
(1) 3161/ 6004BCC :                     RAM_Mars_ObjCamera	ds.b sizeof_camera		; Camera buffer
(1) 3162/ 6004BF4 :                     RAM_Mars_ObjLayout	ds.b sizeof_layout		; Layout buffer
(1) 3163/ 6004C14 :                     ; RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS	; Objects list
(1) 3164/ 6004C14 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_MPLGN	; Polygon list 0
(1) 3165/ 6006014 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_MPLGN	; Polygon list 1
(1) 3166/ 6007414 :                     RAM_Mars_VdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ	; Pieces list
(1) 3167/ 600A114 :                     RAM_Mars_VdpDrwList_e	ds.l 0				; (end-of-list label)
(1) 3168/ 600A114 :                     RAM_Mars_Plgn_ZList_0	ds.l MAX_MPLGN*2		; Z value / foward faces
(1) 3169/ 600A514 :                     RAM_Mars_Plgn_ZList_1	ds.l MAX_MPLGN*2		; Z value / foward faces
(1) 3170/ 600A914 :                     RAM_Mars_PlgnNum_0	ds.w 1				; Number of polygons to read, both buffers
(1) 3171/ 600A916 :                     RAM_Mars_PlgnNum_1	ds.w 1				;
(1) 3172/ 600A918 :                     sizeof_marsvid		ds.l 0
(1) 3173/ 600A918 : (MACRO)             			finish
(1) 3173/ 60047CC :                                     !org GLBL_LASTORG
(1) 3173/ 60046F0 :                                     phase GLBL_LASTPC
(1) 3174/ 60046F0 :                     
(1) 3175/ 60046F0 :                     ; ====================================================================
(1) 3176/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3177/ 60046F0 :                     ; MARS System RAM
(1) 3178/ 60046F0 :                     ; ----------------------------------------------------------------
(1) 3179/ 60046F0 :                     
(1) 3180/ 60046F0 : (MACRO)             			struct MarsRam_System
(1) 3180/ 60046F0 : =$60046F0           GLBL_LASTPC     set *
(1) 3180/   479F0 :                                     dephase
(1) 3180/   479F0 : =$479F0             GLBL_LASTORG    set *
(1) 3180/ 60046F0 :                                     phase MARSRAM_SYSTEM
(1) 3181/ 60046F0 :                     RAM_Mars_Global		ds.w sizeof_MarsGbl		; keep it as a word
(1) 3182/ 60047CC :                     sizeof_marssys		ds.l 0
(1) 3183/ 60047CC : (MACRO)             			finish
(1) 3183/ 60046F0 :                                     !org GLBL_LASTORG
(1) 3183/ 60046F0 :                                     phase GLBL_LASTPC
(1) 3184/ 60046F0 :                     
     117/ 60046F0 :                     		cpu 68000
     118/ 60046F0 :                     		padding off
     119/   479F0 :                     		dephase
     120/   479F0 :                     MARS_RAMDATA_E:
     121/   479F0 :                     		align 4
     122/   479F0 :                     
     123/   479F0 :                     ; --------------------------------------------------------
     124/   479F0 :                     ; MARS data for SH2's ROM view
     125/   479F0 :                     ; This section will be gone if RV=1
     126/   479F0 :                     ; --------------------------------------------------------
     127/   479F0 :                     
     128/ 20479F0 :                     		phase CS1+*
     129/ 20479F0 :                     		align 4
     130/ 20479F0 :                     		include "data/mars_rom.asm"
(1)    1/ 20479F0 :                     ; ====================================================================
(1)    2/ 20479F0 :                     ; ----------------------------------------------------------------
(1)    3/ 20479F0 :                     ; SH2 ROM user data
(1)    4/ 20479F0 :                     ; 
(1)    5/ 20479F0 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 20479F0 :                     ; Note that this section will be gone if the Genesis side is
(1)    7/ 20479F0 :                     ; perfoming a DMA ROM-to-VDP Transfer (setting RV=1)
(1)    8/ 20479F0 :                     ; 
(1)    9/ 20479F0 :                     ; Note: Reading data from here is slow on hardware
(1)   10/ 20479F0 :                     ; ----------------------------------------------------------------
(1)   11/ 20479F0 :                     
(1)   12/ 20479F0 :                     ; --------------------------------------------------------
(1)   13/ 20479F0 :                     
(1)   14/ 20479F0 :                     TESTMARS_BG:
(1)   15/ 20479F0 :                     		binclude "data/mars/test_art.bin"
(1)   16/ 205A5F0 :                     		align 4
(1)   17/ 205A5F0 :                     TESTMARS_BG_PAL:
(1)   18/ 205A5F0 :                     		binclude "data/mars/test_pal.bin"
(1)   19/ 205A7F0 :                     		align 4
(1)   20/ 205A7F0 :                     
(1)   21/ 205A7F0 :                     ; --------------------------------------------------------
(1)   22/ 205A7F0 :                     ; PWM samples
(1)   23/ 205A7F0 :                     ; --------------------------------------------------------
(1)   24/ 205A7F0 :                     
(1)   25/ 205A7F0 :                     SmpIns_Bell_Ice:
(1)   26/ 205A7F0 : (MACRO)             	gSmpl "sound/instr/smpl/bell_ice.wav",0
(1)   26/ 205A7F0 :                     .start
(1)   26/ 205A7F0 : 2A3B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   26/ 205A7F3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/ 205A7F6 :                             binclude "sound/instr/smpl/bell_ice.wav",$2C     ; actual data
(1)   26/ 205E31A :                     .end
(1)   26/ 205E31A :                             align 4         ; align 4 for pwm's
(1)   27/ 205E31C :                     SmpIns_Brass1_Hi:
(1)   28/ 205E31C : (MACRO)             	gSmpl "sound/instr/smpl/brass1_hi.wav",0
(1)   28/ 205E31C :                     .start
(1)   28/ 205E31C : CA7B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   28/ 205E31F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/ 205E322 :                             binclude "sound/instr/smpl/brass1_hi.wav",$2C     ; actual data
(1)   28/ 2065EE6 :                     .end
(1)   28/ 2065EE6 :                             align 4         ; align 4 for pwm's
(1)   29/ 2065EE8 :                     SmpIns_Brass1_Low:
(1)   30/ 2065EE8 : (MACRO)             	gSmpl "sound/instr/smpl/brass1_low.wav",0
(1)   30/ 2065EE8 :                     .start
(1)   30/ 2065EE8 : CA7B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   30/ 2065EEB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   30/ 2065EEE :                             binclude "sound/instr/smpl/brass1_low.wav",$2C     ; actual data
(1)   30/ 206DAB2 :                     .end
(1)   30/ 206DAB2 :                             align 4         ; align 4 for pwm's
(1)   31/ 206DAB4 :                     SmpIns_Forest_1:
(1)   32/ 206DAB4 : (MACRO)             	gSmpl "sound/instr/smpl/forest1.wav",0
(1)   32/ 206DAB4 :                     .start
(1)   32/ 206DAB4 : EC48 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   32/ 206DAB7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/ 206DABA :                             binclude "sound/instr/smpl/forest1.wav",$2C     ; actual data
(1)   32/ 20723A0 :                     .end
(1)   32/ 20723A0 :                             align 4         ; align 4 for pwm's
(1)   33/ 20723A0 :                     SmpIns_Kick_jam:
(1)   34/ 20723A0 : (MACRO)             	gSmpl "sound/instr/smpl/kick_jam.wav",0
(1)   34/ 20723A0 :                     .start
(1)   34/ 20723A0 : CA0A 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   34/ 20723A3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/ 20723A6 :                             binclude "sound/instr/smpl/kick_jam.wav",$2C     ; actual data
(1)   34/ 2072E6A :                     .end
(1)   34/ 2072E6A :                             align 4         ; align 4 for pwm's
(1)   35/ 2072E6C :                     SmpIns_Snare_jam:
(1)   36/ 2072E6C : (MACRO)             	gSmpl "sound/instr/smpl/snare_jam.wav",0
(1)   36/ 2072E6C :                     .start
(1)   36/ 2072E6C : 6A09 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   36/ 2072E6F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/ 2072E72 :                             binclude "sound/instr/smpl/snare_jam.wav",$2C     ; actual data
(1)   36/ 20737D6 :                     .end
(1)   36/ 20737D6 :                             align 4         ; align 4 for pwm's
(1)   37/ 20737D8 :                     SmpIns_SnrTom_1:
(1)   38/ 20737D8 : (MACRO)             	gSmpl "sound/instr/smpl/snrtom_1.wav",0
(1)   38/ 20737D8 :                     .start
(1)   38/ 20737D8 : A614 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   38/ 20737DB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/ 20737DE :                             binclude "sound/instr/smpl/snrtom_1.wav",$2C     ; actual data
(1)   38/ 2074C7E :                     .end
(1)   38/ 2074C7E :                             align 4         ; align 4 for pwm's
(1)   39/ 2074C80 :                     SmpIns_PIANO_1:
(1)   40/ 2074C80 : (MACRO)             	gSmpl "sound/instr/smpl/PIANO__1.wav",0
(1)   40/ 2074C80 :                     .start
(1)   40/ 2074C80 : 1A47 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   40/ 2074C83 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   40/ 2074C86 :                             binclude "sound/instr/smpl/PIANO__1.wav",$2C     ; actual data
(1)   40/ 207939A :                     .end
(1)   40/ 207939A :                             align 4         ; align 4 for pwm's
(1)   41/ 207939C :                     SmpIns_SSTR162A:
(1)   42/ 207939C : (MACRO)             	gSmpl "sound/instr/smpl/SSTR162A.wav",0
(1)   42/ 207939C :                     .start
(1)   42/ 207939C : 6A27 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   42/ 207939F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   42/ 20793A2 :                             binclude "sound/instr/smpl/SSTR162A.wav",$2C     ; actual data
(1)   42/ 207BB06 :                     .end
(1)   42/ 207BB06 :                             align 4         ; align 4 for pwm's
(1)   43/ 207BB08 :                     
(1)   44/ 207BB08 :                     ; --------------------------------------------------------
(1)   45/ 207BB08 :                     
(1)   46/ 207BB08 :                     ; PWM_STEREO:
(1)   47/ 207BB08 :                     ; 	gSmpl "sound/TEST_MARS.wav",0
(1)   48/ 207BB08 :                     ; PWM_STEREO_e:
(1)   49/ 207BB08 :                     ; 	align 4
(1)   50/ 207BB08 :                     
     131/   7BB08 :                     		dephase
     132/   7BB08 :                     
     133/   7BB08 :                     ; ====================================================================
     134/   7BB08 :                     ; ---------------------------------------------
     135/   7BB08 :                     ; End
     136/   7BB08 :                     ; ---------------------------------------------
     137/   7BB08 :                     		
     138/   7BB08 :                     ROM_END:
     139/   7BB08 :                     		align $8000
     140/   80000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 11/27/2021 22:13:13


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ART_EMI :                    40300 C | *ART_EMI_E :                  43300 C |
 ART_TESTBOARD :              40000 C |  ART_TESTBOARD_E :            40300 C |
 ASCII_FONT :                FF0844 C |  ASCII_FONT_E :              FF1844 C |
 ASCII_PAL :                 FF0824 C | *ASCII_PAL_E :               FF0844 C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITHINT :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - | *BITJOYB :                        4 - |
*BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - |  BITJOYMODE :                     3 - |
 BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - |  BITJOYX :                        2 - |
 BITJOYY :                        1 - |  BITJOYZ :                        0 - |
 BITMAPMD :                       1 - | *BITV30 :                         3 - |
 BITVINT :                        3 - | *BITVINTENBL :                    5 - |
 BOARD_CHECKMATCH :          FF20D0 C |  BOARD_CHECKMATCH.XS_OFF :   FF2132 C |
 BOARD_CHECKMATCH.X_CHK :    FF20E0 C |  BOARD_CHECKMATCH.X_CHK_N :  FF20DA C |
 BOARD_CHECKMATCH.X_OFF :    FF20F4 C |  BOARD_CHECKMATCH.Y_CHK :    FF2108 C |
 BOARD_CHECKMATCH.Y_CHK_N :  FF2100 C |  BOARD_CHECKMATCH.Y_OFF :    FF211C C |
 BOARD_RESET :               FF2134 C |  BOARD_RESET.NOCLRRQ :       FF21BA C |
 BOARD_RESET.NXTCLR :        FF21B2 C |  BOARD_RESET.X_CHK :         FF2146 C |
 BOARD_RESET.X_CHK_N :       FF213E C |  BOARD_RESET.X_CLR :         FF215A C |
 BOARD_RESET.X_OFF :         FF2166 C |  BOARD_RESET.Y_CHK :         FF217E C |
 BOARD_RESET.Y_CHK_N :       FF2176 C |  BOARD_RESET.Y_CLR :         FF2198 C |
 BOARD_RESET.Y_OFF :         FF21A4 C |  BOARD_SWAPPOS :             FF21C4 C |
 BOARD_SWAPPOS.DRAW_ALL :    FF21D6 C |  BOARD_SWAPPOS.IS_OFF2 :     FF2220 C |
 BOARD_SWAPPOS.NBDW2 :       FF21D4 C |  BOARD_SWAPPOS.NEXT_Y2 :     FF2226 C |
 BOARD_SWAPPOS.NXT_X :       FF21EC C |  BOARD_SWAPPOS.NXT_Y :       FF21E6 C |
 BOARD_SWAPPOS.SWITCH_VRAM : FF2258 C |  BOARD_SWAPPOS.THIS_BLK :    FF2208 C |
*BOARD_SWAPPOS.YPOS_EX :     FF224C C | *BRANCHEXT :                      0 - |
 CACHE_MASTER :             60015CC C |  CACHE_MASTER_E :           6001A2C C |
 CACHE_SLAVE :              6001A2C C |  CACHE_SLAVE_E :            6001EF0 C |
 CACH_BGFBPOS_D :  FFFFFFFFC00003B8 C |  CACH_BGFBPOS_LR : FFFFFFFFC00003BC C |
 CACH_BGFBPOS_U :  FFFFFFFFC00003B4 C |  CACH_DDA_LAST :   FFFFFFFFC00003D8 C |
 CACH_DDA_SRC :    FFFFFFFFC00003E8 C |  CACH_DDA_SRC_L :  FFFFFFFFC0000408 C |
 CACH_DDA_SRC_R :  FFFFFFFFC0000418 C |  CACH_DDA_TOP :    FFFFFFFFC00003C8 C |
*CACH_LNDRW_L :    FFFFFFFFC0000428 C |  CACH_LNDRW_S :    FFFFFFFFC0000460 C |
 CACH_LNDRW_S.END :                                        FFFFFFFFC0000460 C |
 CACH_LR_LINES :   FFFFFFFFC00003C0 C | *CACH_MD2_LINES :  FFFFFFFFC00003C4 C |
 CACH_XADD :       FFFFFFFFC0000398 C |  CACH_XHEAD_L :    FFFFFFFFC00003A4 C |
 CACH_XHEAD_R :    FFFFFFFFC00003A8 C |  CACH_XPOS :       FFFFFFFFC0000394 C |
 CACH_YADD :       FFFFFFFFC000039C C |  CACH_YCURR :      FFFFFFFFC00003A0 C |
 CACH_YHEAD_D :    FFFFFFFFC00003AC C |  CACH_YHEAD_U :    FFFFFFFFC00003B0 C |
*CAM_ANIMDATA :                  18 C | *CAM_ANIMFRAME :                 1C C |
*CAM_ANIMSPD :                   24 C | *CAM_ANIMTIMER :                 20 C |
*CAM_X_POS :                      0 C | *CAM_X_ROT :                      C C |
*CAM_Y_POS :                      4 C | *CAM_Y_ROT :                     10 C |
*CAM_Z_POS :                      8 C | *CAM_Z_ROT :                     14 C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                    105F C |  CHIP_ENV.ATKEND :             1134 C |
*CHIP_ENV.ATKZERO :            1137 C |  CHIP_ENV.CHK2 :               113D C |
 CHIP_ENV.CHK4 :               1172 C |  CHIP_ENV.CKOF :               108D C |
 CHIP_ENV.CKON :               10AA C |  CHIP_ENV.COPYOPS :            12C4 C |
 CHIP_ENV.COPYOPS3 :           1339 C |  CHIP_ENV.COPY_1 :             130D C |
*CHIP_ENV.DECTMR :             1141 C |  CHIP_ENV.DKADD :              115B C |
 CHIP_ENV.DKSAV :              1163 C |  CHIP_ENV.DKYEND :             1168 C |
 CHIP_ENV.DO_VOL :             13A7 C |  CHIP_ENV.ENVPROC :            1105 C |
 CHIP_ENV.FM_INSUPD :          12FA C |  CHIP_ENV.FM_INS_EX :          135F C |
 CHIP_ENV.FM_KEYCUT :          12DE C |  CHIP_ENV.FM_KEYOFF :          12F3 C |
 CHIP_ENV.FM_SET :             123E C | *CHIP_ENV.FM_SETVOL :          1365 C |
 CHIP_ENV.FM_VOLUPD :          1361 C |  CHIP_ENV.KILLENV :            1188 C |
 CHIP_ENV.NOTFM3 :             12CF C |  CHIP_ENV.NOUPD :              11B4 C |
 CHIP_ENV.NSKIP :              10FC C |  CHIP_ENV.PSTEAL :             10EB C |
 CHIP_ENV.REQ_DAC :            122B C |  CHIP_ENV.REQ_PITCH :          1238 C |
 CHIP_ENV.SETHAT :             10F6 C |  CHIP_ENV.TNMODE :             10E0 C |
 CHIP_ENV.VEDLP :              1190 C |  CHIP_ENV.VLMUCH :             11A5 C |
 CHIP_ENV.VLOOP :              106A C |  CHIP_ENV.VMUCH :              13B1 C |
 CHIP_ENV.WRFREQ :             10BC C |  CHNL_CHIP :                      0 - |
 CHNL_EFFARG :                    5 - |  CHNL_EFFID :                     4 - |
 CHNL_FLAGS :                     7 - |  CHNL_INS :                       2 - |
 CHNL_NOTE :                      1 - |  CHNL_TYPE :                      6 - |
 CHNL_VOL :                       3 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - | *CMDTASKMD_LOADSPAL :       6001584 C |
*CMDTASKMD_SETBITMAP :      6001574 C |
 CMDTASKMD_SETBITMAP.WAIT_FB :                                      6001576 C |
 COM :                            0 - |  COMM0 :                         20 - |
 COMM10 :                        2A - |  COMM12 :                        2C - |
 COMM14 :                        2E - |  COMM15 :                        2F - |
 COMM2 :                         22 - |  COMM4 :                         24 - |
 COMM6 :                         26 - |  COMM8 :                         28 - |
 COMMZFIFO :                   1920 C |  COMMZREAD :                     1E C |
 COMMZROMBLK :                   1C C |  COMMZROMRD :                    1D C |
 COMMZWRITE :                    1F C | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFF91BA - | *CONTROLLER_2 :    FFFFFFFFFFFF91C0 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CURRINSDATA :                 1A6E C |  CURRINSPOS :                  1A72 C |
 CURRTBLPOS :                  1A70 C |  CURRTICKBITS :                1A6D C |
 CURRTRKCTRL :                 1A74 C |  CYCLE :                         32 - |
 DACCOM :                      18E5 C |  DACINS_CDSNARE :             1E488 C |
 DACINS_LOWSTRING :           2635C C | *DACINS_MAGIC2 :               4520 C |
 DACINS_SAURKICK :            1FE84 C | *DACINS_SAURSNARE :           20E18 C |
*DACINS_SNARE_GEM :           1D35C C | *DACINS_STRING1 :             21B00 C |
 DAC_FILL :                    142F C |  DAC_FIRSTFILL :               143D C |
 DAC_ME :                         8 C |  DAC_OFF :                     13E6 C |
 DAC_ON :                      13D1 C |  DAC_PLAY :                    13FB C |
 DAC_REFILL :                  1441 C |  DAC_REFILL.DAC_OVER :         148F C |
 DAC_REFILL.FDF7 :             1501 C |  DAC_REFILL.FDF72 :            14BA C |
 DAC_REFILL.FDFRETURN :        1504 C | *DAC_REFILL.KEEPCNTR :         1468 C |
*DATE :                  11/27/2021 - |  DDACCNTR :                    1A69 C |
 DDACFIFOMID :                 1A6C C |  DDACPNTR :                    1A66 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      42 C |
 DRV_LOOP.CMND_0 :               EC C |  DRV_LOOP.CMND_TRKPAUSE :       159 C |
 DRV_LOOP.CMND_TRKPLAY :         F0 C |  DRV_LOOP.CMND_TRKRESUME :      166 C |
 DRV_LOOP.CMND_TRKSTOP :        149 C |  DRV_LOOP.CMND_TRKTEMPO :       185 C |
 DRV_LOOP.CMND_TRKTICKS :       173 C |  DRV_LOOP.LIST :                 AC C |
 DRV_LOOP.NEITHER :              84 C |  DRV_LOOP.NEXT_CMD :             8B C |
 DRV_LOOP.NOBEATS :              6C C |  DRV_LOOP.NOTICKS :              5F C |
 DRWSLD_NEXTPZ :   FFFFFFFFC000031C C |
 DRWSLD_NEXTPZ.ACTIV :                                     FFFFFFFFC0000338 C |
*DRWSLD_NEXTPZ.FINISH_IT :                                 FFFFFFFFC0000334 C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000328 C |
 DRWSLD_NXTLINE :  FFFFFFFFC0000270 C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC00002B2 C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC000029C C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC00002AC C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC00002C0 C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC0000110 C |
 DRWSLD_NXTLINE_TEX.C_M1 :                                 FFFFFFFFC00001E2 C |
 DRWSLD_NXTLINE_TEX.FBBASET :                              FFFFFFFFC00001BE C |
 DRWSLD_NXTLINE_TEX.NOT_M1 :                               FFFFFFFFC00001DA C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC0000214 C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC00001F4 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC000019A C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC0000186 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC0000154 C |
 DRWSLD_NXTLINE_TEX.XL_L :                                 FFFFFFFFC00001D6 C |
 DRWSLD_NXTLINE_TEX.XL_R :                                 FFFFFFFFC00001D0 C |
 DRWSLD_UPDLINE :  FFFFFFFFC0000312 C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC0000228 C |
 DRWTASK_EXIT :    FFFFFFFFC0000362 C |  DRWTASK_RETURN :  FFFFFFFFC0000346 C |
 DRWTEX_GONXTPZ :  FFFFFFFFC0000244 C | *DRWTSK02_NEWPZ :  FFFFFFFFC00000AC C |
 DRWTSK02_NEWPZ.INVLD_Y :                                  FFFFFFFFC00000D2 C |
 DRWTSK02_NEWPZ.LEN_MAX :                                  FFFFFFFFC00000CC C |
 DRWTSK1_VLD_Y :   FFFFFFFFC00000DE C |  DRWTSK_00 :       FFFFFFFFC000033C C |
 DRWTSK_01 :       FFFFFFFFC0000028 C |  DRWTSK_02 :       FFFFFFFFC000007A C |
 DRWTSK_02.EXIT :  FFFFFFFFC000008C C |
 DRWTSK_02.HAS_PZ :                                        FFFFFFFFC0000090 C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC000025C C |
 DRWTSK_SOLIDMODE.WAIT :                                   FFFFFFFFC000026A C |
 DRWTSK_TEXMODE :  FFFFFFFFC00000FC C |
 DRWTSK_TEXMODE.TEXVALID :                                 FFFFFFFFC0000108 C |
 DRW_UD_EXIT :              6000FA8 C |  DTH :                           20 - |
 DTL :                           1C - |  DTSK01_LRDRAW :            6000E96 C |
 DTSK01_LRDRAW.NOT_L2 :     6000EC4 C |  DTSK01_LRDRAW.PREFIX_R :   6000EAC C |
 DTSK01_LRDRAW.XLINE :      6000EA4 C |  DTSK01_LRDRAW.YRES :       6000E9C C |
 DWAVEBUFF :                   1B00 C |  EMILIE_MKSPRITE :           FF22EE C |
 EMILIE_MKSPRITE.HIDEFUJI :  FF2384 C |  EMILIE_MKSPRITE.MIDSHK :    FF235C C |
*EMILIE_MKSPRITE.NO_UPD :    FF2382 C |  EMILIE_MKSPRITE.NO_UPDGFX : FF2336 C |
 EMILIE_MOVE :               FF2270 C |  EMILIE_MOVE.EXIMUCH :       FF22C4 C |
 EMILIE_MOVE.MOVE_IT :       FF22CC C |  EMILIE_MOVE.REVERSX :       FF22E0 C |
 EMILIE_MOVE.SAME_X :        FF22EC C |  EMILIE_MOVE.TOOMUCH :       FF22BE C |
*FALSE :                          0 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     5 - |
*FILLSTART :                      6 - |  FLAGRESCHIP :                 1965 C |
 FLG :                           28 - |  FM :                            80 - |
 FM3REG :                      18D9 C |  FMCOM :                       17C5 C |
 FMFREQ_LIST :                 1509 C |  FMFRQH :                        18 - |
 FMFRQL :                        1E - | *FMINS_AMBIENT_DARK :         2F200 C |
*FMINS_AMBIENT_SPOOK :        2F220 C | *FMINS_BANJO_PUY :            2F2E0 C |
 FMINS_BASS_3 :               2F060 C |  FMINS_BASS_CALM :            2F020 C |
 FMINS_BASS_GROOVE :          2F080 C | *FMINS_BASS_GROOVE_2 :        2F0A0 C |
 FMINS_BASS_GROOVE_GEM :      2F0C0 C | *FMINS_BASS_HEAVY :           2F040 C |
*FMINS_BASS_ITALO :           2F0E0 C | *FMINS_BASS_KON :             2F100 C |
*FMINS_BASS_SYNTH :           2F120 C |  FMINS_BELL_CHINA :           2F260 C |
 FMINS_BRASS_EUR :            2F280 C | *FMINS_BRASS_PUY :            2F2A0 C |
 FMINS_COM :                   17E9 C |  FMINS_COM2 :                  1811 C |
 FMINS_COM3 :                  1839 C |  FMINS_COM4 :                  1861 C |
 FMINS_COM5 :                  1889 C |  FMINS_COM6 :                  18B1 C |
 FMINS_DING_TOY :             2F240 C | *FMINS_DRUMKICK_GEM :         2EFE0 C |
*FMINS_FLAUTE_CAVE :          2F2C0 C | *FMINS_FM3_CLOSEDHAT :        2EF10 C |
 FMINS_FM3_EXPLOSION :        2EF38 C |  FMINS_FM3_OPENHAT :          2EEE8 C |
 FMINS_GUITAR_GEM :           2EF60 C |  FMINS_GUITAR_HEAVY :         2EF80 C |
*FMINS_GUITAR_PUY :           2EFA0 C | *FMINS_GUITAR_PUY_2 :         2EFC0 C |
*FMINS_ORGAN_M1 :             2F140 C |  FMINS_PIANOM1 :              2F000 C |
 FMINS_TRUMPET_1 :            2F160 C |  FMINS_TRUMPET_2 :            2F180 C |
*FMINS_TRUMPET_CARNIVAL :     2F1E0 C | *FMINS_TRUMPET_KON :          2F1A0 C |
*FMINS_TRUMPET_PUY :          2F1C0 C |  FMINS_VIOLIN_GEM :           2F300 C |
 FMKEYS :                         6 - |  FMPAN :                         12 - |
 FMSPCMODE :                   1964 C |  FMVOL :                          C - |
 FM_SEND_1 :                   13BB C |  FM_SEND_2 :                   13C6 C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMASFXBLK_BOOM :           9305DE C |
 GEMASFXINS_BOOM :           930629 C |  GEMASFXPAT_BOOM :           9305E1 C |
 GEMATRKDATA_SFX :           9305D2 C |  GEMATRK_BLK_BEMINE :        931223 C |
 GEMATRK_BLK_CHRONO :        9323EC C |  GEMATRK_BLK_HILLS :         939F4C C |
*GEMATRK_BLK_TEST :          930639 C |  GEMATRK_BLK_TEST2 :         938BF6 C |
 GEMATRK_INS_BEMINE :        932324 C |  GEMATRK_INS_CHRONO :        938BB6 C |
 GEMATRK_INS_HILLS :         93AACB C | *GEMATRK_INS_TEST :          931163 C |
 GEMATRK_INS_TEST2 :         939E64 C | *GEMATRK_MARS_BLK :          93D145 C |
*GEMATRK_MARS_INS :          93F880 C | *GEMATRK_MARS_PATT :         93D153 C |
 GEMATRK_MECANO_BLK :        93AB33 C |  GEMATRK_MECANO_INS :        93D0A5 C |
 GEMATRK_MECANO_PATT :       93AB54 C |  GEMATRK_PATT_BEMINE :       931234 C |
 GEMATRK_PATT_CHRONO :       9323F7 C |  GEMATRK_PATT_HILLS :        939F58 C |
*GEMATRK_PATT_TEST :         930642 C |  GEMATRK_PATT_TEST2 :        938BFE C |
 GEMA_INIT :                    EF3 C |  GEMA_INIT.SET_IT :             F4A C |
 GET_CMDBYTE :                  1AF C |  GET_CMDBYTE.GETCBYTEL :        1B2 C |
 GET_TICK :                     F54 C |  GET_TICK.CTNOTICK :            F71 C |
 GET_TRKINDX :                  19A C |  GET_TRKINDX.TRKPOS :           1AB C |
 GLBL_LASTORG :               479F0 - |  GLBL_LASTPC :              60046F0 - |
 GO_DRWSLD_UPDLINE_TEX :                                   FFFFFFFFC00000F4 C |
 GO_DRWTEX_GONXTPZ :                                       FFFFFFFFC00000F8 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              FF1BE6 C | *HINT_DEFAULT.HERE :         FF1BE8 C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - |  INSDATAC_0 :                  1966 C |
 INSDATAC_1 :                  19E6 C | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - |  INTMASK :                        1 - |
 INT_M_LIST :               600026C C |  INT_S_LIST :               60002CC C |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :              FF0810 C |
 LITERAL_F_00000000_1 :     6000268 C |  LITERAL_F_00000001_1 :     6000354 C |
 LITERAL_F_00000002_1 :     6000440 C |  LITERAL_F_00000003_1 :     60004C0 C |
 LITERAL_F_00000004_1 :     6000538 C |  LITERAL_F_00000005_1 :     60005E8 C |
 LITERAL_F_00000006_1 :     60006D8 C |  LITERAL_F_00000007_1 :     60006DC C |
 LITERAL_F_00000008_1 :     60006E0 C |  LITERAL_F_00000009_1 :     60006E8 C |
 LITERAL_F_0000000A_1 :     60006EC C |  LITERAL_F_0000000B_1 :     6000804 C |
 LITERAL_F_0000000C_1 :     6000808 C |  LITERAL_F_0000000D_1 :     600080C C |
 LITERAL_F_0000000E_1 :     6000810 C |  LITERAL_F_0000000F_1 :     6000814 C |
 LITERAL_F_00000010_1 :     6000818 C |  LITERAL_F_00000011_1 :     60008E0 C |
 LITERAL_F_00000012_1 :     60008E4 C |  LITERAL_F_00000013_1 :     60008E8 C |
 LITERAL_F_00000014_1 :     60008EC C |  LITERAL_F_00000015_1 :     60008F0 C |
 LITERAL_F_00000016_1 :     60008F4 C |  LITERAL_F_00000017_1 :     60009B0 C |
 LITERAL_F_00000018_1 :     60009B4 C |  LITERAL_F_00000019_1 :     6000A50 C |
 LITERAL_F_0000001A_1 :     6000A54 C |  LITERAL_F_0000001B_1 :     6000A5C C |
 LITERAL_F_0000001C_1 :     6000A60 C |  LITERAL_F_0000001D_1 :     6000A64 C |
 LITERAL_F_0000001E_1 :     6000A68 C |  LITERAL_F_0000001F_1 :     6000B80 C |
 LITERAL_F_00000020_1 :     6000B84 C |  LITERAL_F_00000021_1 :     6000B8C C |
 LITERAL_F_00000022_1 :     6000B90 C |  LITERAL_F_00000023_1 :     6000B94 C |
 LITERAL_F_00000024_1 :     6000B98 C |  LITERAL_F_00000025_1 :     6000B9C C |
 LITERAL_F_00000026_1 :     6000C44 C |  LITERAL_F_00000027_1 :     6000C4C C |
 LITERAL_F_00000028_1 :     6000C66 C |  LITERAL_F_00000029_1 :     6000DC0 C |
 LITERAL_F_0000002A_1 :     6000DC4 C |  LITERAL_F_0000002B_1 :     6000DD8 C |
 LITERAL_F_0000002C_1 :     6000DE4 C |  LITERAL_F_0000002D_1 :     6000DEC C |
 LITERAL_F_0000002E_1 :     6000DF0 C |  LITERAL_F_0000002F_1 :     6000DF4 C |
 LITERAL_F_00000030_1 :     6000DF8 C |  LITERAL_F_00000031_1 :     6000E84 C |
 LITERAL_F_00000032_1 :     6000FAC C |  LITERAL_F_00000033_1 :     6000FB0 C |
 LITERAL_F_00000034_1 :     6000FB4 C |  LITERAL_F_00000035_1 :     6000FB8 C |
 LITERAL_F_00000036_1 :     6000FBC C |  LITERAL_F_00000037_1 :     6000FC0 C |
 LITERAL_F_00000038_1 :     6000FC4 C |  LITERAL_F_00000039_1 :     6001290 C |
 LITERAL_F_0000003A_1 :     6001294 C |  LITERAL_F_0000003B_1 :     6001298 C |
 LITERAL_F_0000003C_1 :     600129C C |  LITERAL_F_0000003D_1 :     60012A0 C |
 LITERAL_F_0000003E_1 :     60012A4 C |  LITERAL_F_0000003F_1 :     60012A8 C |
 LITERAL_F_00000040_1 :     60012AC C |  LITERAL_F_00000041_1 :     60012B0 C |
 LITERAL_F_00000042_1 :     6001334 C |  LITERAL_F_00000043_1 :     600133C C |
 LITERAL_F_00000044_1 :     600134E C |  LITERAL_F_00000045_1 :     60014F8 C |
 LITERAL_F_00000046_1 :     60014FC C |  LITERAL_F_00000047_1 :     6001504 C |
 LITERAL_F_00000048_1 :     600150C C |  LITERAL_F_00000049_1 :     6001520 C |
 LITERAL_F_0000004A_1 :     6001524 C |  LITERAL_F_0000004B_1 :     600156C C |
 LITERAL_F_0000004C_1 :     6001570 C |
 LITERAL_F_0000004D_1 :                                    FFFFFFFFC000006C C |
 LITERAL_F_0000004E_1 :                                    FFFFFFFFC0000070 C |
 LITERAL_F_0000004F_1 :                                    FFFFFFFFC000037C C |
 LITERAL_F_00000050_1 :                                    FFFFFFFFC0000380 C |
 LITERAL_F_00000051_1 :                                    FFFFFFFFC0000384 C |
 LITERAL_F_00000052_1 :                                    FFFFFFFFC00004A0 C |
 LITERAL_F_00000053_1 :                                    FFFFFFFFC00004AC C |
 LITERAL_L_00008000_1 :     6000DD4 C |
 LITERAL_L_0000FFFF_1 :                                    FFFFFFFFC00000D8 C |
 LITERAL_L_00015000_1 :     6000DE0 C |  LITERAL_L_00015000_2 :     6000E88 C |
 LITERAL_L_00015000_3 :     6000FC8 C |  LITERAL_L_00015000_4 :     60010B8 C |
 LITERAL_L_00015000_5 :     60011BC C |
 LITERAL_L_00015000_6 :                                    FFFFFFFFC0000248 C |
 LITERAL_L_00FFFFFF_1 :                                    FFFFFFFFC00004A4 C |
 LITERAL_L_02000000_1 :     6000BA0 C |
 LITERAL_L_02000000_2 :                                    FFFFFFFFC00004A8 C |
 LITERAL_L_060005F2_1 :     6000C54 C |  LITERAL_L_06000612_1 :     6000DFC C |
 LITERAL_L_0600097C_1 :     6000DC8 C |  LITERAL_L_0600097C_2 :     600159C C |
 LITERAL_L_060009E8_1 :     6000DE8 C |  LITERAL_L_06000AB0_1 :     6001500 C |
 LITERAL_L_06000AEC_1 :     6001514 C |  LITERAL_L_06000B04_1 :     6001518 C |
 LITERAL_L_06000B1C_1 :     6001510 C |  LITERAL_L_06000B2C_1 :     600151C C |
 LITERAL_L_0603EFF8_1 :     60005E4 C |  LITERAL_L_0603F000_1 :     6001328 C |
 LITERAL_L_0603FFF8_1 :     60004BC C |  LITERAL_L_06040000_1 :     6000C38 C |
 LITERAL_L_20004000_1 :     60004AC C |  LITERAL_L_20004000_2 :     60005D4 C |
 LITERAL_L_20004000_3 :     6000608 C |  LITERAL_L_20004000_4 :     6000B7C C |
 LITERAL_L_20004000_5 :     6000C48 C |  LITERAL_L_20004000_6 :     6001338 C |
 LITERAL_L_20004016_1 :     6000438 C |  LITERAL_L_20004016_2 :     60005D0 C |
 LITERAL_L_20004018_1 :     6000434 C |  LITERAL_L_20004018_2 :     60005CC C |
 LITERAL_L_2000401A_1 :     6000360 C |  LITERAL_L_2000401A_2 :     6000540 C |
 LITERAL_L_2000401C_1 :     600035C C |  LITERAL_L_2000401C_2 :     600053C C |
 LITERAL_L_20004020_1 :     6000C3C C |  LITERAL_L_20004020_2 :     600132C C |
 LITERAL_L_20004020_3 :     6001508 C |  LITERAL_L_2000402E_1 :     6000358 C |
 LITERAL_L_2000402E_2 :     6000C58 C |  LITERAL_L_2000402F_1 :     60014F4 C |
 LITERAL_L_20004034_1 :                                    FFFFFFFFC00004B0 C |
 LITERAL_L_20004036_1 :                                    FFFFFFFFC00004B4 C |
 LITERAL_L_20004038_1 :     6000534 C |  LITERAL_L_20004100_1 :     600043C C |
 LITERAL_L_20004100_2 :     600060C C |  LITERAL_L_20004100_3 :     6000A6C C |
 LITERAL_L_20004100_4 :     6000DCC C |  LITERAL_L_20004100_5 :     6001598 C |
 LITERAL_L_20004100_6 :                                    FFFFFFFFC0000378 C |
 LITERAL_L_20004102_1 :     6000DD0 C |  LITERAL_L_20004200_1 :     6000444 C |
 LITERAL_L_24000000_1 :     6000DDC C |  LITERAL_L_24000200_1 :     6000970 C |
 LITERAL_L_24000200_2 :     6000A58 C |  LITERAL_L_24000200_3 :     6000E8C C |
 LITERAL_L_24000200_4 :     6000FCC C |  LITERAL_L_24000200_5 :     60010BC C |
 LITERAL_L_24015200_1 :     6000974 C |  LITERAL_L_24015200_2 :     6000FD0 C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC000024C C |
 LITERAL_L_36385550_1 :     60004B0 C |  LITERAL_L_36385550_2 :     60005D8 C |
 LITERAL_L_4D5F4F4B_1 :     60004B8 C |  LITERAL_L_4D5F4F4B_2 :     60005E0 C |
 LITERAL_L_534C4156_1 :     6000C40 C |  LITERAL_L_534C4156_2 :     6001330 C |
 LITERAL_L_535F4F4B_1 :     60004B4 C |  LITERAL_L_535F4F4B_2 :     60005DC C |
 LITERAL_L_7FFFFFFF_1 :     60006E4 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000C50 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     6001340 C |
 LITERAL_L_FFFFFFFFC0000000_3 :                            FFFFFFFFC000049C C |
 LITERAL_L_FFFFFFFFFF000000_1 :                                     6000B88 C |
 LITERAL_W_0080_1 :         6000610 C |  LITERAL_W_0080_2 :         6000BA8 C |
 LITERAL_W_0080_3 :         600152A C |
 LITERAL_W_0080_4 :                                        FFFFFFFFC00004B8 C |
 LITERAL_W_00A0_1 :         60006F0 C |  LITERAL_W_00A1_1 :         6000A7C C |
 LITERAL_W_00E0_1 :         60006F2 C |  LITERAL_W_00E0_2 :         6000A74 C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC00000DC C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC0000250 C |
 LITERAL_W_00E0_5 :                                        FFFFFFFFC000038A C |
 LITERAL_W_00F0_1 :         600044A C |  LITERAL_W_00F0_2 :         60004C4 C |
 LITERAL_W_00F0_3 :         60005EE C |  LITERAL_W_00F0_4 :         60009E6 C |
 LITERAL_W_00F0_5 :         6000A70 C |  LITERAL_W_00F0_6 :         6000C62 C |
 LITERAL_W_00F0_7 :         6000E00 C |  LITERAL_W_00F0_8 :         600134A C |
 LITERAL_W_00F0_9 :         6001528 C |  LITERAL_W_00FC_1 :         600152C C |
 LITERAL_W_00FF_1 :                                        FFFFFFFFC000025A C |
 LITERAL_W_00FF_2 :                                        FFFFFFFFC0000388 C |
 LITERAL_W_0100_1 :         6000978 C |  LITERAL_W_0100_2 :         60009B8 C |
 LITERAL_W_0100_3 :         6000A72 C |  LITERAL_W_0100_4 :         6000E04 C |
 LITERAL_W_0100_5 :         6000E90 C |  LITERAL_W_0100_6 :         60010C2 C |
 LITERAL_W_0105_1 :         6000BA4 C |
 LITERAL_W_013E_1 :                                        FFFFFFFFC000038C C |
 LITERAL_W_0140_1 :         60009E4 C |  LITERAL_W_0140_2 :         6000E02 C |
 LITERAL_W_0140_3 :         6000E94 C |  LITERAL_W_0140_4 :         6000FD4 C |
 LITERAL_W_0140_5 :         60010C4 C |
 LITERAL_W_0140_6 :                                        FFFFFFFFC0000252 C |
 LITERAL_W_0150_1 :         600097A C |  LITERAL_W_0150_2 :         6000E0A C |
 LITERAL_W_0150_3 :         6000E92 C |  LITERAL_W_0150_4 :         6000FD6 C |
 LITERAL_W_0150_5 :         60010C0 C |
 LITERAL_W_0150_6 :                                        FFFFFFFFC0000256 C |
 LITERAL_W_0200_1 :         6000E08 C |  LITERAL_W_0415_1 :         6000BA6 C |
 LITERAL_W_07FF_1 :         6000E06 C |  LITERAL_W_1234_1 :         6000364 C |
 LITERAL_W_1FFF_1 :                                        FFFFFFFFC0000258 C |
 LITERAL_W_44E0_1 :         60004CA C |  LITERAL_W_44E0_2 :         60005F0 C |
 LITERAL_W_5A00_1 :         60015CA C |
 LITERAL_W_5A00_2 :                                        FFFFFFFFC0000392 C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC0000078 C |
 LITERAL_W_5A20_1 :         6000A78 C |  LITERAL_W_7FFF_1 :         60009BA C |
 LITERAL_W_A518_1 :         60004C8 C |  LITERAL_W_A518_2 :         6000E10 C |
 LITERAL_W_A518_3 :         60015C8 C |
 LITERAL_W_A518_4 :                                        FFFFFFFFC0000076 C |
 LITERAL_W_A518_5 :                                        FFFFFFFFC0000390 C |
 LITERAL_W_A538_1 :         6000A7A C |  LITERAL_W_FE10_1 :         6000366 C |
 LITERAL_W_FE10_2 :         6000448 C |  LITERAL_W_FE10_3 :         60004CC C |
 LITERAL_W_FE10_4 :         6000544 C |  LITERAL_W_FE10_5 :         60005EC C |
 LITERAL_W_FE10_6 :         6000C5C C |  LITERAL_W_FE10_7 :         6001344 C |
 LITERAL_W_FE10_8 :         60015C4 C |  LITERAL_W_FE80_1 :         60004C6 C |
 LITERAL_W_FE80_2 :         6000A76 C |  LITERAL_W_FE80_3 :         6000E0E C |
 LITERAL_W_FE80_4 :         60015C6 C |
 LITERAL_W_FE80_5 :                                        FFFFFFFFC0000074 C |
 LITERAL_W_FE80_6 :                                        FFFFFFFFC000038E C |
 LITERAL_W_FE92_1 :         6000C64 C |  LITERAL_W_FE92_2 :         6000E0C C |
 LITERAL_W_FE92_3 :         600134C C |  LITERAL_W_FEE2_1 :         6000C5E C |
 LITERAL_W_FEE2_2 :         6001346 C |  LITERAL_W_FEE4_1 :         6000C60 C |
 LITERAL_W_FEE4_2 :         6001348 C |  LITERAL_W_FF00_1 :         600081C C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC0000254 C |
*MACEXP :                         7 - |  MAP_TESTBOARD :             FF25DA C |
*MAP_TESTBOARD.END :         FF2E9A C | *MARS :                           1 - |
 MARSBLOCK :                     2D C | *MARSCD :                         0 - |
 MARSGBL_BGDATA :                 0 C |  MARSGBL_BGDATA_R :               4 C |
 MARSGBL_BGHEIGHT :              30 C |  MARSGBL_BGWIDTH :               2E C |
 MARSGBL_BG_DRWREQD :            4A C |  MARSGBL_BG_DRWREQFULL :         50 C |
 MARSGBL_BG_DRWREQL :            4C C |  MARSGBL_BG_DRWREQR :            4E C |
 MARSGBL_BG_DRWREQU :            48 C |  MARSGBL_BG_FBBASE :             18 C |
 MARSGBL_BG_FBCURRR :            1C C |  MARSGBL_BG_XBGINC_L :           40 C |
 MARSGBL_BG_XBGINC_R :           42 C |  MARSGBL_BG_XPOS :               20 C |
 MARSGBL_BG_XPOS_OLD :           28 C |  MARSGBL_BG_XSCALE :             32 C |
 MARSGBL_BG_XSET :               36 C |  MARSGBL_BG_XSHIFT :             2C C |
 MARSGBL_BG_YBGINC_D :           44 C |  MARSGBL_BG_YBGINC_U :           46 C |
 MARSGBL_BG_YFBPOS_D :           3C C |  MARSGBL_BG_YFBPOS_LR :          3E C |
 MARSGBL_BG_YFBPOS_U :           3A C |  MARSGBL_BG_YPOS :               24 C |
 MARSGBL_BG_YPOS_OLD :           2A C |  MARSGBL_BG_YSCALE :             34 C |
 MARSGBL_BG_YSET :               38 C |  MARSGBL_CURRFB :                62 C |
 MARSGBL_CURRGFXMODE :           58 C |  MARSGBL_DIVSTOP_M :             60 C |
 MARSGBL_FBMAXLINES :            66 C | *MARSGBL_MDLFACESCNTR :          52 C |
 MARSGBL_MSTRREQDRAW :           56 C |  MARSGBL_PALDMAMIDWR :           64 C |
 MARSGBL_PLGNBUFFNUM :           54 C | *MARSGBL_PLGN_READ :             10 C |
*MARSGBL_PLGN_WRITE :            14 C |  MARSGBL_PLYPZLIST_R :            8 C |
 MARSGBL_PLYPZLIST_W :            C C | *MARSGBL_PWMCTRLUPD :            6C C |
 MARSGBL_PZLISTCNTR :            5A C |  MARSGBL_VINTFLAG_M :            5C C |
 MARSGBL_VINTFLAG_S :            5E C |  MARSGBL_WDDRWPAUSE :            6A C |
 MARSGBL_WDDRWTASK :             68 C |  MARSRAM_SOUND :            600A918 C |
 MARSRAM_SYSTEM :           60046F0 C |  MARSRAM_VIDEO :            60047CC C |
*MARSSND_ACTIVE :  FFFFFFFFC00004C0 C |
 MARSSND_ACTIVE.END :                                      FFFFFFFFC00004C4 C |
 MARSSND_PWMCACHE :                                        FFFFFFFFC0000000 C |
 MARSSND_PWMCHNLS :         600A918 C |  MARSSND_PWMCONTROL :       600AA30 C |
 MARSSND_REFILL :           6000B2C C |  MARSSND_REFILL.COPY_NOW :  6000B52 C |
 MARSSND_REFILL.NEXT_ONE :  6000B34 C |  MARSSND_REFILL.NOT_ACTIV : 6000B6E C |
 MARSSND_REFILL.NOT_ENBL :  6000B6E C |  MARSSND_RVMODE :  FFFFFFFFC00004BC C |
 MARSSOUND_INIT :           6000A7E C |  MARSSOUND_INIT.CLR_ENBL :  6000A9E C |
 MARSSOUND_PWMENABLE :      6000B1C C |
 MARSSOUND_READPWM :                                       FFFFFFFFC0000380 C |
 MARSSOUND_READPWM.FROM_RV :                               FFFFFFFFC0000420 C |
 MARSSOUND_READPWM.LOOP :                                  FFFFFFFFC000039E C |
 MARSSOUND_READPWM.LOOP_ME :                               FFFFFFFFC00003CE C |
 MARSSOUND_READPWM.MONO :                                  FFFFFFFFC000042A C |
 MARSSOUND_READPWM.MONO_A :                                FFFFFFFFC0000418 C |
 MARSSOUND_READPWM.MONO_C :                                FFFFFFFFC00003F8 C |
 MARSSOUND_READPWM.MONO_L :                                FFFFFFFFC00003DA C |
 MARSSOUND_READPWM.NOT_ROM :                               FFFFFFFFC000040A C |
 MARSSOUND_READPWM.NO_L :                                  FFFFFFFFC0000440 C |
 MARSSOUND_READPWM.NO_R :                                  FFFFFFFFC0000446 C |
 MARSSOUND_READPWM.ON :                                    FFFFFFFFC00003AC C |
 MARSSOUND_READPWM.READ :                                  FFFFFFFFC00003DC C |
 MARSSOUND_READPWM.SILENT :                                FFFFFFFFC00003A4 C |
 MARSSOUND_READPWM.SKIP :                                  FFFFFFFFC000046A C |
 MARSSOUND_SETPWM :         6000AB0 C |  MARSSOUND_SETPWM.ENDMRK :  6000AD4 C |
 MARSSOUND_SETPWMPITCH :    6000AEC C |
 MARSSOUND_SETPWMPITCH.OFF_1 :                                      6000B00 C |
 MARSSOUND_SETVOLUME :      6000B04 C |
 MARSSOUND_SETVOLUME.OFF_1 :                                        6000B18 C |
 MARSUPD :                       2E C |  MARSVIDEO_DRAWALLBG :      60008F8 C |
 MARSVIDEO_DRAWALLBG.NOLM : 6000926 C |
 MARSVIDEO_DRAWALLBG.NOLM_L :                                       6000962 C |
*MARSVIDEO_DRAWALLBG.STOP : 600096C C |
 MARSVIDEO_DRAWALLBG.X_NEXT :                                       6000920 C |
 MARSVIDEO_DRAWALLBG.X_NEXT_L :                                     600095C C |
 MARSVIDEO_DRAWALLBG.YLRGE :                                        6000944 C |
 MARSVIDEO_DRAWALLBG.Y_NEXT :                                       600091C C |
 MARSVIDEO_INIT :           60005F2 C |  MARSVIDEO_LOADPAL :        600097C C |
*MARSVIDEO_LOADPAL.BADLEN : 60009A2 C |  MARSVIDEO_LOADPAL.LOOP :   6000996 C |
 MARSVIDEO_SETBG :          60009BC C |  MARSVIDEO_SETWATCHDOG :    60009E8 C |
 MARSVIDEO_SETWATCHDOG.MDE1 :                                       6000A04 C |
 MARSVIDEO_SETWATCHDOG.WAIT_FB :                                    6000A40 C |
 MARSVIDEO_SLICEPLGN :      6000612 C |
 MARSVIDEO_SLICEPLGN.DONTRESET :                                    60006B2 C |
 MARSVIDEO_SLICEPLGN.EXIT : 60006D2 C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                                     6000664 C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                                      6000676 C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                                       600066C C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                                       60006CA C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                                      6000698 C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                                      6000632 C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                                     6000646 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                                   6000654 C |
 MARSVIDEO_SLICEPLGN.TRINGL :                                       6000624 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                                      600065C C |
 MARS_ENTRY :                   800 C |  MARS_ENTRY.ADAPTERENABLE :     872 C |
 MARS_ENTRY.NO_MARS :           880 C |  MARS_ENTRY.RAMCODE :           84A C |
 MARS_ENTRY.RESTARTICD :        85A C |  MARS_RAMDATA :               43300 C |
 MARS_RAMDATA_E :             479F0 C |  MARS_SCOMM :                   516 C |
 MARS_SCOMM.BLOCKED :           58F C |  MARS_SCOMM.CLRCOM :            594 C |
 MARS_SCOMM.NEXT_COMM :         56B C |  MARS_SCOMM.NEXT_PASS :         561 C |
 MARS_SCOMM.WAIT_ENTER :        546 C |  MARS_SCOMM.WAIT_OTHER :        556 C |
 MARS_SCOMM.W_PASS2 :           585 C |  MASTERTRKLIST :             FF2070 C |
 MASTER_IRQ :               6000248 C |  MASTER_LOOP :              6000C68 C |
 MAX_MDERAM :                   800 - |  MAX_MDTASKS :                   10 - |
 MAX_MDTSKARG :                   8 - |  MAX_MPLGN :                     80 - |
*MAX_MSPR :                      80 - |  MAX_PWMCHNL :                    7 - |
 MAX_SVDP_PZ :                   C0 - |  MAX_TRKCHN :                    11 - |
 MAX_TSTENTRY :                   5 - | *MAX_TSTTRKS :                    3 - |
*MCD :                            0 - |  MCHNSND_BANK :                   C C |
 MCHNSND_CCHREAD :                8 C |  MCHNSND_ENBL :                   0 C |
 MCHNSND_END :                   14 C |  MCHNSND_FLAGS :                 20 C |
 MCHNSND_LOOP :                  18 C |  MCHNSND_PITCH :                 1C C |
 MCHNSND_READ :                   4 C |  MCHNSND_START :                 10 C |
 MCHNSND_VOL :                   24 C | *MDLLAY_DATA :                    0 C |
*MDLLAY_X :                       4 C | *MDLLAY_XR_LAST :                1C C |
*MDLLAY_X_LAST :                 10 C | *MDLLAY_Y :                       8 C |
*MDLLAY_Y_LAST :                 14 C | *MDLLAY_Z :                       C C |
*MDLLAY_Z_LAST :                 18 C | *MDL_ANIMDATA :                  20 C |
*MDL_ANIMFRAME :                 24 C | *MDL_ANIMSPD :                   2C C |
*MDL_ANIMTIMER :                 28 C | *MDL_DATA :                       0 C |
*MDL_OPTION :                     4 C | *MDL_X_POS :                      8 C |
*MDL_X_ROT :                     14 C | *MDL_Y_POS :                      C C |
*MDL_Y_ROT :                     18 C | *MDL_Z_POS :                     10 C |
*MDL_Z_ROT :                     1C C |  MDRAMCODE :                    938 C |
 MDRAMCODE_END :               2520 C |  MDRAM_START :             FFFF8800 - |
 MDSYS_SINEDATA :            FF1A24 C |  MD_BANK_SRAM :              A130F1 - |
 MD_ERRADDR :                   898 C |  MD_ERRBUS :                    898 C |
 MD_ERRCHK :                    898 C |  MD_ERRILL :                    898 C |
 MD_ERROREX :                   898 C |  MD_ERRORTRAP :                 898 C |
 MD_ERRPRIVL :                  898 C |  MD_ERRTRAPV :                  898 C |
 MD_ERRZDIV :                   898 C | *MD_FIFOMARS :               FF23A6 C |
 MD_FIFOMARS.L0 :            FF2410 C |  MD_FIFOMARS.L1 :            FF2418 C |
 MD_FIFOMARS.RETRY :         FF23BE C |  MD_FIFOMARS.WAIT_CMD :      FF2406 C |
 MD_HOTSTART :                  8D8 C |  MD_HOTSTART.CLRRAM :           90A C |
 MD_HOTSTART.COPYME :           926 C |  MD_HOTSTART.WAITFRAME :        8EA C |
 MD_INIT :                      89A C |  MD_INIT.WM :                   8AC C |
 MD_INIT.WS :                   8B6 C |  MD_LINE1010 :                  898 C |
 MD_LINE1111 :                  898 C |  MD_TRACE :                     898 C |
*MINFO_RAM_S :               FF0000 C |  MODE :                          18 - |
 MODE_INIT :                 FF1BB8 C |  MODE_INIT.CLR :             FF1BC6 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  MSCRL_BLKSIZE :                 10 - |
 MSCRL_HEIGHT :                 100 - |  MSCRL_WIDTH :                  150 - |
 MSTGFX_EXIT :              6000D92 C |  MSTGFX_EXIT.WAITFB :       6000DA6 C |
 MSTGFX_EXIT.WAIT_TASK :    6000D98 C |  MSTRGF0_LR :               6000E16 C |
 MSTRGF0_LR.DTSK01_DLEFT :  6000E64 C |  MSTRGF0_LR.DTSK01_DRIGHT : 6000E70 C |
 MSTRGF0_UD :               6000EDC C |  MSTRGF0_UD.DRWY_GO :       6000F44 C |
 MSTRGF0_UD.NOT_L2 :        6000F8E C |  MSTRGF0_UD.REPT_X :        6000F6C C |
 MSTRGF0_UD.REPT_Y :        6000F46 C |  MSTRGF0_UD.RES_X :         6000F74 C |
 MSTRGF0_UD.TSK00_DOWN :    6000EFE C |  MSTRGF0_UD.TSK00_UP :      6000F22 C |
 MSTRGF0_UD.XLON1 :         6000F7A C |  MSTRGF0_UD.YBGEND :        6000F52 C |
*MSTR_BGFILL :              6000FD8 C |  MSTR_BGFILL.FBBASET :      6001022 C |
 MSTR_BGFILL.LEN_OFF :      60010AE C |  MSTR_BGFILL.NOT_HDN :      6001096 C |
 MSTR_BGFILL.NOXRES :       6001068 C |  MSTR_BGFILL.NOYREST :      6001046 C |
 MSTR_BGFILL.XBGRES :       600107A C |  MSTR_BGFILL.X_NXT :        6001074 C |
 MSTR_BGFILL.YBGRES :       6001054 C |  MSTR_BGFILL.YLARG :        6001086 C |
 MSTR_BGFILL.YTOPH :        6001010 C |  MSTR_BGFILL.Y_NXT :        600104E C |
 MSTR_GFX1_LOOP :           6000CA0 C | *MSTR_GFX1_LOOP.CALM_DOWN : 6000CD2 C |
 MSTR_GFX1_LOOP.CONT_PLGN : 6000D6A C |  MSTR_GFX1_LOOP.INVALID :   6000D80 C |
 MSTR_GFX1_LOOP.LN_LOOP :   6000D0C C |  MSTR_GFX1_LOOP.LOOP :      6000D70 C |
 MSTR_GFX1_LOOP.NO_REDRAW : 6000CC2 C |
 MSTR_GFX1_LOOP.NO_SCRLDATA :                                       6000CE0 C |
 MSTR_GFX1_LOOP.PAGE_2 :    6000D62 C |  MSTR_GFX1_LOOP.SKIP :      6000D8A C |
 MSTR_GFX1_LOOP.WAIT_FRMSWP :                                       6000CA6 C |
 MSTR_GFX1_LOOP.XL_L :      6000D32 C |  MSTR_GFX1_LOOP.XL_R :      6000D2C C |
 MSTR_MOVEBG :              60010C6 C |  MSTR_MOVEBG.NEGTV :        600118E C |
 MSTR_MOVEBG.NEGTVL :       60011AA C |  MSTR_MOVEBG.POSTV :        600119A C |
 MSTR_MOVEBG.POSTVL :       60011B4 C |  MSTR_MOVEBG.XEQU :         60010DC C |
 MSTR_MOVEBG.X_STEND :      60010FC C |  MSTR_MOVEBG.YEQU :         60010F2 C |
 MSTR_MOVEBG.YNEGTV :       6001132 C |  MSTR_MOVEBG.YNEGTVL :      600114C C |
 MSTR_MOVEBG.YPOSTV :       600113C C |  MSTR_MOVEBG.YPOSTVL :      6001156 C |
 MSTR_MOVEBG.YX_NEGTV :     600116A C |  MSTR_MOVEBG.YX_POSTV :     6001174 C |
 MSTR_MOVEBG.Y_STEND :      6001102 C |  MSTR_SETREQ1 :             60011C0 C |
 MSTR_SETREQ1.DONT_SNAP :   600128C C |  MSTR_SETREQ1.REQD_B :      60011E4 C |
 MSTR_SETREQ1.REQR_B :      6001222 C |  MSTR_SETREQ1.YDL_BUSY :    6001238 C |
 MSTR_SETREQ1.YDR_BUSY :    60011FA C |  M_IRQ_BAD :                6000318 C |
 M_IRQ_CMD :                6000338 C |  M_IRQ_CUSTOM :    FFFFFFFFC0000000 C |
 M_IRQ_CUSTOM.LIST :                                       FFFFFFFFC0000018 C |
 M_IRQ_CUSTOM.TAG_FRT :                                    FFFFFFFFC0000024 C |
 M_IRQ_H :                  6000368 C |  M_IRQ_PWM :                600031C C |
 M_IRQ_V :                  6000384 C |  M_IRQ_V.COPY_PAL :         60003B8 C |
*M_IRQ_V.MID_PWRITE :       600042C C |  M_IRQ_V.WAIT :             6000398 C |
 M_IRQ_V.WAIT_FB :          6000392 C |  M_IRQ_VRES :               600044C C |
 M_IRQ_VRES.MARS_RESET :    600049E C |  M_IRQ_VRES.MD_RESET :      6000464 C |
 M_IRQ_VRES.SH_WAIT :       600046C C |  M_IRQ_VRES.VRESLOOP :      60004A6 C |
*NESTMAX :                      100 - |  NXT_DRAWUD :               6000ED8 C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*PACKING :                        0 - | *PADDING :                        0 - |
*PADDINGSOFAR :                   0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C | *PALMODE :                       2C C |
 PAL_EMI :                   FF25B0 C |  PAL_TESTBOARD :             FF25C6 C |
*PEN :                           20 - |  PLAYTHISSFX :               FF20C0 C |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYPZ_MTRL :                    34 C |  PLYPZ_SRC_XL :                  14 C |
 PLYPZ_SRC_XL_DX :               18 C |  PLYPZ_SRC_XR :                  24 C |
 PLYPZ_SRC_XR_DX :               28 C |  PLYPZ_SRC_YL :                  1C C |
 PLYPZ_SRC_YL_DX :               20 C |  PLYPZ_SRC_YR :                  2C C |
 PLYPZ_SRC_YR_DX :               30 C |  PLYPZ_TYPE :                    38 C |
 PLYPZ_XL :                       4 C |  PLYPZ_XL_DX :                    8 C |
 PLYPZ_XR :                       C C |  PLYPZ_XR_DX :                   10 C |
 PLYPZ_YPOS :                     0 C |  POLYGN_MTRL :                    4 C |
 POLYGN_POINTS :                  8 C | *POLYGN_SRCPNTS :                18 C |
 POLYGN_TYPE :                    0 C | *PSGALV :                      17B5 C |
*PSGATK :                      1799 C |  PSGCOM :                      1791 C |
*PSGDEC :                      179D C | *PSGDTH :                      17B1 C |
*PSGDTL :                      17AD C | *PSGENV :                      17A9 C |
 PSGFREQ_LIST :                1521 C |  PSGHATMODE :                  1963 C |
*PSGLEV :                      1795 C | *PSGRRT :                      17A5 C |
*PSGSLV :                      17A1 C | *PSGTIM :                      17BD C |
*PSGVOL :                      17C1 C | *PSG_CTRL :                  C00011 - |
 PUT_PIECE :                600081E C |  PUT_PIECE.BAD_PIECE :      60008CE C |
 PUT_PIECE.DONTRESET_PZ :   60008C6 C |  PUT_PIECE.LEFTH :          600082E C |
 PUT_PIECE.TOP_NEG :        60008B0 C |  PVOL :                          30 - |
*PWCOM :                          0 - |  PWINSH :                        20 - |
 PWINSL :                        30 - |  PWINSM :                        28 - |
 PWMCOM :                      18E8 C | *PWMCTL :                        31 - |
 PWMINTCLR :                     1C - |  PWMIRQ_ON :                      1 - |
 PWOUTF :                        18 - |  PWPHL :                         10 - |
 PWPTH_V :                        8 - |  RAMCODE_DEFAULT :            2F320 C |
 RAMCODE_USER :              FF1BE8 C | *RAM_BGCAMERA :    FFFFFFFFFFFF882C C |
 RAM_BOARDBLOCKS : FFFFFFFFFFFF883E C |  RAM_BOARDUPD :    FFFFFFFFFFFF8828 C |
 RAM_CURRINDX :    FFFFFFFFFFFF8832 C |  RAM_CURRSELC :    FFFFFFFFFFFF8830 C |
 RAM_CURRTEMPO :   FFFFFFFFFFFF8838 C |  RAM_CURRTICKS :   FFFFFFFFFFFF8836 C |
 RAM_CURRTRACK :   FFFFFFFFFFFF8834 C |  RAM_CURRTYPE :    FFFFFFFFFFFF882A C |
 RAM_EMIANIM :     FFFFFFFFFFFF8820 C |  RAM_EMIBLOCKX :   FFFFFFFFFFFF881A C |
 RAM_EMIBLOCKY :   FFFFFFFFFFFF881C C |  RAM_EMICHAR :     FFFFFFFFFFFF881E C |
 RAM_EMIFLAGS :    FFFFFFFFFFFF8818 C |  RAM_EMIHIDE :     FFFFFFFFFFFF8824 C |
 RAM_EMIJUMPSPD :  FFFFFFFFFFFF8810 C |  RAM_EMIJUMPY :    FFFFFFFFFFFF8814 C |
 RAM_EMIMOVEX :    FFFFFFFFFFFF8808 C |  RAM_EMIMOVEY :    FFFFFFFFFFFF880C C |
 RAM_EMIPOSX :     FFFFFFFFFFFF8800 C |  RAM_EMIPOSY :     FFFFFFFFFFFF8804 C |
 RAM_EMIUPD :      FFFFFFFFFFFF8822 C |  RAM_FRAMECOUNT :  FFFFFFFFFFFF97F2 C |
 RAM_INITFLUG :    FFFFFFFFFFFF97FE C |  RAM_INPUTDATA :   FFFFFFFFFFFF91BA C |
*RAM_MARS_DREQ :            60049CC C |  RAM_MARS_GLOBAL :          60046F0 C |
*RAM_MARS_OBJCAMERA :       6004BCC C | *RAM_MARS_OBJLAYOUT :       6004BF4 C |
 RAM_MARS_PALETTE :         60047CC C |  RAM_MARS_PLGNNUM_0 :       600A914 C |
 RAM_MARS_PLGNNUM_1 :       600A916 C |  RAM_MARS_PLGN_ZLIST_0 :    600A114 C |
 RAM_MARS_PLGN_ZLIST_1 :    600A514 C | *RAM_MARS_POLYGONS_0 :      6004C14 C |
*RAM_MARS_POLYGONS_1 :      6006014 C |  RAM_MARS_VDPDRWLIST :      6007414 C |
 RAM_MARS_VDPDRWLIST_E :    600A114 C |  RAM_MDGLOBAL :    FFFFFFFFFFFF9814 C |
 RAM_MDMARSHINT :  FFFFFFFFFFFF9808 C | *RAM_MDMARSTCNTM : FFFFFFFFFFFF980E C |
*RAM_MDMARSTCNTS : FFFFFFFFFFFF9810 C | *RAM_MDMARSTSKM :  FFFFFFFFFFFF93D2 C |
*RAM_MDMARSTSKS :  FFFFFFFFFFFF95D2 C | *RAM_MDMARSTSSGL : FFFFFFFFFFFF97D2 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFF9802 C |  RAM_MDSOUND :     FFFFFFFFFFFF9000 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFF91BA C |  RAM_MDVIDEO :     FFFFFFFFFFFF9020 C |
 RAM_MODEBUFF :    FFFFFFFFFFFF8800 C | *RAM_SAVEDATA :    FFFFFFFFFFFF91D2 C |
 RAM_SHAKEME :     FFFFFFFFFFFF8826 C |  RAM_SNDSAVEREG :  FFFFFFFFFFFF9000 C |
*RAM_SYSFLAGS :    FFFFFFFFFFFF9812 C |  RAM_SYSRANDSEED : FFFFFFFFFFFF97FA C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFF97F6 C |  RAM_VDPREGS :     FFFFFFFFFFFF91A2 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFF9022 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFF9020 C |
 RAM_WINDOWCURR :  FFFFFFFFFFFF883A C |  RAM_WINDOWNEW :   FFFFFFFFFFFF883C C |
 RAM_XPOS :        FFFFFFFFFFFF882E C |  RCHWIDTH :                      36 - |
 READROMB :                     F97 C |  READROMB.IMBACK :              FA7 C |
 READROMB.W2 :                  FB4 C |  READROMB.WAIT :                FB0 C |
*RELAXED :                        0 - |  ROM_END :                    7BB08 C |
*ROTATE_POINT :             6001534 C |  ROT_ANGLE :                6001530 C |
*ROT_ANGLE_2 :              6000E12 C |  RRT :                           14 - |
 SBEATACC :                      31 C |  SBEATPTCK :                     2F C |
 SCREEN_HEIGHT :                 E0 - |  SCREEN_WIDTH :                 140 - |
 SETUPCHIP :                    59A C |  SETUPCHIP.ALRDFND :            ED6 C |
*SETUPCHIP.BAD_INS :            E6A C |  SETUPCHIP.BUSY :               671 C |
 SETUPCHIP.BUSY_S :             E91 C |  SETUPCHIP.CHECK_CHNL :         E3C C |
 SETUPCHIP.CHECK_INS :          E29 C |  SETUPCHIP.CHIP_OUT :           D75 C |
 SETUPCHIP.CHIP_SWAP :          D39 C |  SETUPCHIP.CHKFREE :            EDD C |
 SETUPCHIP.CHK_TBL :            E94 C |  SETUPCHIP.CHK_TBLN :           E79 C |
 SETUPCHIP.CHNL_UNLINK :        B79 C |  SETUPCHIP.CHP_UNLK :           E02 C |
 SETUPCHIP.CONFM_RD :           802 C |  SETUPCHIP.DAC_OUT :            D9A C |
*SETUPCHIP.DCUT :               C64 C |  SETUPCHIP.DIFFR :              EAD C |
*SETUPCHIP.DOFF :               C69 C |  SETUPCHIP.DO_CHNL :            678 C |
 SETUPCHIP.EFFDAC_E :           9D5 C |  SETUPCHIP.EFFDAC_F :           A04 C |
 SETUPCHIP.EFFFM_D :            96B C |  SETUPCHIP.EFFFM_E :            9C7 C |
 SETUPCHIP.EFFFM_F :            9FD C |  SETUPCHIP.EFFFM_X :            AC1 C |
 SETUPCHIP.EFFPSG_D :           93D C |  SETUPCHIP.EFFPSG_E :           9BD C |
 SETUPCHIP.EFFPSG_F :           9EF C |  SETUPCHIP.EFFPWM_E :           9E2 C |
 SETUPCHIP.EFFPWM_F :           A0A C |  SETUPCHIP.EFF_DAC :            914 C |
 SETUPCHIP.EFF_FM :             8FD C |  SETUPCHIP.EFF_PSG :            8EA C |
 SETUPCHIP.EFF_PWM :            926 C |  SETUPCHIP.E_FNEGD2 :           9EC C |
 SETUPCHIP.E_GO :               AC0 C |  SETUPCHIP.E_NEG :              9D1 C |
 SETUPCHIP.E_NEGD :             9DF C |  SETUPCHIP.E_NEGP :             9FA C |
 SETUPCHIP.E_NOEF :             ABC C |  SETUPCHIP.E_NOF :              AB2 C |
 SETUPCHIP.FLOTIN :             653 C |  SETUPCHIP.FLTIN_S :            62C C |
 SETUPCHIP.FM3_OUT :            DA8 C |  SETUPCHIP.FMPAN_LIST :         ADA C |
 SETUPCHIP.FMPICKINS :          815 C |  SETUPCHIP.FMSAME_INS :         813 C |
*SETUPCHIP.FM_DLINK :           D36 C |  SETUPCHIP.FM_KEYCUT :          D34 C |
 SETUPCHIP.FM_KEYOFF :          D30 C |  SETUPCHIP.FM_KPV :             D2F C |
 SETUPCHIP.FM_OUT :             DE4 C |  SETUPCHIP.FM_SETKON :          D0C C |
 SETUPCHIP.FNDLINK :            ED2 C |  SETUPCHIP.FNDSLOT :            EF0 C |
 SETUPCHIP.FND_OCT :            CE9 C |  SETUPCHIP.FREQINC_DAC :        A42 C |
 SETUPCHIP.FREQINC_FM :         A52 C |  SETUPCHIP.FREQINC_PSG :        A78 C |
 SETUPCHIP.FREQINC_PWM :        A0E C |  SETUPCHIP.FROM_NL :            D52 C |
 SETUPCHIP.GET_OCT :            CDE C |  SETUPCHIP.GO_DOWN :            9A4 C |
 SETUPCHIP.GO_UP :              9AD C |  SETUPCHIP.GRAB_DVAL :          99A C |
 SETUPCHIP.GRAB_PRTM :          AA2 C |  SETUPCHIP.INS_DAC :            75B C |
 SETUPCHIP.INS_FM :             7A4 C |  SETUPCHIP.INS_FM3 :            795 C |
 SETUPCHIP.INS_PSG :            72C C |  SETUPCHIP.INS_PSGN :           726 C |
 SETUPCHIP.INS_PWM :            6EB C |  SETUPCHIP.LOWP :               962 C |
 SETUPCHIP.LOWPF :              991 C |  SETUPCHIP.MK_CHIP :            5F4 C |
 SETUPCHIP.NEW :                E88 C |  SETUPCHIP.NEXT :               E97 C |
 SETUPCHIP.NODEFV :             C26 C |  SETUPCHIP.NOTEPSG_C :          BEC C |
 SETUPCHIP.NOTEPSG_FN :         BF9 C |  SETUPCHIP.NOTE_DAC :           C31 C |
 SETUPCHIP.NOTE_FM :            C98 C |  SETUPCHIP.NOTE_FM3 :           C74 C |
 SETUPCHIP.NOTE_PSG :           BC7 C |  SETUPCHIP.NOTE_PSGN :          B9A C |
 SETUPCHIP.NOTE_PWM :           B09 C |  SETUPCHIP.NOT_PRDAC :          7B8 C |
 SETUPCHIP.NO_CHNL :            6BB C |  SETUPCHIP.NP2_N :              BC4 C |
 SETUPCHIP.NXT_CHNL :           607 C |  SETUPCHIP.PCUT :               B77 C |
 SETUPCHIP.POFF :               B73 C |  SETUPCHIP.PSGN_OUT :           DB6 C |
 SETUPCHIP.PSG_OUT :            DC4 C |  SETUPCHIP.PVMUCH :             866 C |
 SETUPCHIP.PWMN_KPV :           B54 C |  SETUPCHIP.PWM_KEYCUT :         B6F C |
 SETUPCHIP.PWM_KEYOFF :         B6B C |  SETUPCHIP.PWM_OUT :            D77 C |
 SETUPCHIP.P_OUT :              DE2 C |  SETUPCHIP.RAN_OUT :            6B1 C |
 SETUPCHIP.RD_FMINS :           7CF C |  SETUPCHIP.RD_NT3 :             CD3 C |
 SETUPCHIP.REQ_EFF :            8BC C |  SETUPCHIP.REQ_INS :            6C4 C |
 SETUPCHIP.REQ_NOTE :           ADE C |  SETUPCHIP.REQ_VOL :            821 C |
 SETUPCHIP.SILNC_LIST :         640 C |  SETUPCHIP.SILNC_SINGL :        619 C |
 SETUPCHIP.TBLLIST :            E6D C |  SETUPCHIP.VMUCH :              890 C |
 SETUPCHIP.VOL_FM :             897 C |  SETUPCHIP.VOL_PSG :            874 C |
 SETUPCHIP.VOL_PWM :            841 C |  SET_LEFT :                 60006F4 C |
 SET_LEFT.LFT_OK :          6000716 C |  SET_LEFT.LFT_SKIP :        6000776 C |
 SET_RIGHT :                600077C C |  SET_RIGHT.RGT_OK :         600079E C |
 SET_RIGHT.RGT_SKIP :       60007FE C |  SH2_ERROR :                600030C C |
 SH2_ERROR.INFIN :          6000312 C |  SH2_MASTER :               6000000 C |
 SH2_M_ENTRY :              6000BAC C |  SH2_M_ENTRY.WAIT_MD :      6000BDC C |
 SH2_M_ENTRY.WAIT_SLAVE :   6000BE6 C |  SH2_M_HOTSTART :           6000BF2 C |
 SH2_M_HOTSTART.COPY :      6000C12 C |  SH2_M_HOTSTART.LEL :       6000C28 C |
 SH2_RAM :                  60046F0 C |  SH2_SLAVE :                6000124 C |
 SH2_S_ENTRY :              60012B4 C |  SH2_S_ENTRY.WAIT_MD :      60012E4 C |
 SH2_S_HOTSTART :           60012F0 C |  SH2_S_HOTSTART.COPY :      6001310 C |
 SHIFT :                          2 - |  SHOWROM :                      F75 C |
 SIN_TABLE :                6001EF0 C |  SIZEOF_CAMERA :                 28 C |
 SIZEOF_INPUT :                   6 C |  SIZEOF_LAYOUT :                 20 C |
 SIZEOF_MARSGBL :                6E C | *SIZEOF_MARSRAM :           600AA68 C |
*SIZEOF_MARSRAM.HERE :      600AA68 C |  SIZEOF_MARSSND :           600AA68 C |
 SIZEOF_MARSSYS :           60047CC C |  SIZEOF_MARSVID :           600A918 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFF883F C | *SIZEOF_MDLOBJ :                 30 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFF883F C |  SIZEOF_MDSND :    FFFFFFFFFFFF9020 C |
 SIZEOF_MDSYS :    FFFFFFFFFFFF9814 C |  SIZEOF_MDVID :    FFFFFFFFFFFF91BA C |
 SIZEOF_PLYPZ :                  3C C |  SIZEOF_POLYGN :                 28 C |
 SIZEOF_SNDCHN :                 28 C |  SLAVE_IRQ :                60002AC C |
 SLAVE_LOOP :               6001350 C |  SLAVE_LOOP.COPY_1 :        600139C C |
 SLAVE_LOOP.NEXT_CHNL :     60013B6 C |  SLAVE_LOOP.NON_ZERO :      6001388 C |
 SLAVE_LOOP.NO_KEYOFF :     60013DA C |  SLAVE_LOOP.NO_PITCHBND :   60013FE C |
 SLAVE_LOOP.NO_REQ :        60014AC C |  SLAVE_LOOP.NO_VOLUMEBND :  6001416 C |
 SLAVE_LOOP.NO_ZTRNSFR :    60014BC C |  SLAVE_LOOP.PWM_KEYCUT :    60013CE C |
 SLAVE_LOOP.REFILL_IN :     60014D8 C |  SLAVE_LOOP.REFILL_OUT :    60014EE C |
 SLAVE_LOOP.TEST_1 :        6001378 C |  SLAVE_LOOP.WAIT_1 :        600138C C |
 SLV :                           10 - |  SMPINS_BELL_ICE :          205A7F0 C |
 SMPINS_BRASS1_HI :         205E31C C |  SMPINS_BRASS1_LOW :        2065EE8 C |
 SMPINS_FOREST_1 :          206DAB4 C |  SMPINS_KICK_JAM :          20723A0 C |
*SMPINS_PIANO_1 :           2074C80 C |  SMPINS_SNARE_JAM :         2072E6C C |
 SMPINS_SNRTOM_1 :          20737D8 C | *SMPINS_SSTR162A :          207939C C |
 SNDLOCKZ80 :                FF00A2 C |  SNDLOCKZ80.WAIT :           FF00AA C |
 SNDREQ_ENTER :              FF00C0 C |  SNDREQ_ENTER.WAIT :         FF00E6 C |
 SNDREQ_EXIT :               FF00F6 C |  SNDREQ_SADDR :              FF011E C |
 SNDREQ_SBYTE :              FF0126 C |  SNDREQ_SCMD :               FF010C C |
*SNDREQ_SLONG :              FF011A C |  SNDREQ_SWORD :              FF0122 C |
 SNDUNLOCKZ80 :              FF00B6 C |  SOUND_DMA_PAUSE :           FF0134 C |
 SOUND_DMA_PAUSE.RETRY :     FF0134 C |  SOUND_DMA_PAUSE.SAFE :      FF014E C |
 SOUND_DMA_PAUSE.WAIT_MARS : FF017E C |  SOUND_DMA_PAUSE.WAIT_Z80 :  FF015E C |
 SOUND_DMA_RESUME :          FF018C C |
 SOUND_DMA_RESUME.WAIT_MARS :                                        FF01BC C |
 SOUND_DMA_RESUME.WAIT_Z80 : FF019C C |  SOUND_GLBTEMPO :            FF0262 C |
 SOUND_INIT :                FF0048 C |  SOUND_INIT.CLEANUP :        FF006E C |
 SOUND_INIT.COPY :           FF0084 C |  SOUND_INIT.WAIT :           FF0058 C |
 SOUND_TRKPAUSE :            FF021A C |  SOUND_TRKPLAY :             FF01CA C |
 SOUND_TRKRESUME :           FF0230 C |  SOUND_TRKSTOP :             FF0204 C |
 SOUND_TRKTICKS :            FF0246 C |  STANDBY :                        2 - |
*STR_COMM :                  FF2570 C |  STR_CURSOR :                FF24BA C |
 STR_GEMA :                  FF24E0 C |  STR_STATUS :                FF24C0 C |
*STR_TEMPVAL :               FF25A8 C |  STR_TITLE :                 FF2446 C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSTEM_INIT :               FF1844 C |  SYSTEM_INIT.CLRINPUT :      FF1882 C |
 SYSTEM_INIT.WAIT :          FF1852 C |  SYSTEM_INPUT :              FF18C6 C |
 SYSTEM_INPUT.EXIT :         FF18F4 C |  SYSTEM_INPUT.ID_0D :        FF191A C |
 SYSTEM_INPUT.LIST :         FF18FA C |  SYSTEM_INPUT.OLDPAD :       FF1992 C |
 SYSTEM_INPUT.PICK_ID :      FF1998 C |  SYSTEM_INPUT.READ :         FF19AE C |
 SYSTEM_INPUT.STEP_1 :       FF19BA C |  SYSTEM_INPUT.STEP_2 :       FF19C6 C |
 SYSTEM_INPUT.THIS_ONE :     FF18DA C | *SYSTEM_INPUT.WAIT :         FF18C6 C |
 SYSTEM_JUMPRAMCODE :        FF1B9A C |
 SYSTEM_JUMPRAMCODE.COPYME2 :                                        FF1BAC C |
*SYSTEM_RANDOM :             FF19C8 C |  SYSTEM_SETINTS :            FF1B24 C |
 SYSTEM_SETINTS.NOHINT :     FF1B48 C |  SYSTEM_SETINTS.NOVINT :     FF1B36 C |
*SYSTEM_SINEWAVE :           FF1A06 C |  SYSTEM_SINEWAVE.DONT_NEG :  FF1A22 C |
*SYSTEM_SINEWAVE_COS :       FF19E6 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                      FF1A00 C |
*SYSTEM_SRAMINIT :           FF1B4A C |  SYSTEM_SRAMINIT.INITSAVE :  FF1B5E C |
 SYSTEM_VSYNC :              FF1B72 C |  SYSTEM_VSYNC.INSIDE :       FF1B8C C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - | *SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - | *SYS_IO :                    A10001 - |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                60004CE C |
 S_IRQ_CMD :                60004F8 C | *S_IRQ_CMD.CANTUPD :        6000514 C |
 S_IRQ_CUSTOM :             60015A0 C |  S_IRQ_H :                  6000546 C |
 S_IRQ_PWM :                60004D4 C |  S_IRQ_PWM.EXIT :           60004E6 C |
 S_IRQ_V :                  6000560 C |  S_IRQ_VRES :               6000574 C |
 S_IRQ_VRES.MARS_RESET :    60005BE C |  S_IRQ_VRES.MD_RESET :      600058C C |
 S_IRQ_VRES.SH_WAIT :       6000598 C |  S_IRQ_VRES.VRESLOOP :      60005C6 C |
 TBLFM :                       1725 C |  TBLFM3 :                      1745 C |
 TBLFM6 :                      174D C |  TBLPSG :                      1703 C |
 TBLPSGN :                     171D C |  TBLPWM :                      1757 C |
 TESTMARS_BG :              20479F0 C |  TESTMARS_BG_PAL :          205A5F0 C |
 TH :                      20000000 - | *THISCODE_TOP :              FF1BE8 C |
 THISCODE_TOP.AFTER :        FF1E1E C |  THISCODE_TOP.INSIDE :       FF1D46 C |
 THISCODE_TOP.LIST :         FF1D66 C |  THISCODE_TOP.LOCKCONTRL :   FF1EC0 C |
 THISCODE_TOP.LOOP :         FF1CCA C |  THISCODE_TOP.MIDSHK :       FF1D1C C |
 THISCODE_TOP.MODE0 :        FF1D72 C |  THISCODE_TOP.MODE0_LOOP :   FF1D8A C |
 THISCODE_TOP.MODE1 :        FF1EC2 C |  THISCODE_TOP.MODE1_LOOP :   FF1EDE C |
 THISCODE_TOP.NOA :          FF1FC8 C |  THISCODE_TOP.NOB :          FF1FB8 C |
 THISCODE_TOP.NOC_C :        FF1FF8 C |  THISCODE_TOP.NOC_UP :       FF1F1E C |
 THISCODE_TOP.NOD2 :         FF1F8C C |  THISCODE_TOP.NOL :          FF1FD8 C |
 THISCODE_TOP.NOR :          FF1FE8 C |  THISCODE_TOP.NOU2 :         FF1F72 C |
 THISCODE_TOP.NOX2 :         FF1F58 C |  THISCODE_TOP.NOY2 :         FF1F3C C |
 THISCODE_TOP.NOZ_DOWN :     FF1E46 C |  THISCODE_TOP.NOZ_L :        FF1EBE C |
 THISCODE_TOP.NOZ_R :        FF1E96 C |  THISCODE_TOP.NOZ_UP :       FF1E6E C |
 THISCODE_TOP.NO_MODE0 :     FF1DA2 C |  THISCODE_TOP.NO_MODE1 :     FF1EF6 C |
 THISCODE_TOP.NO_SHAKE :     FF1DC8 C |  THISCODE_TOP.PRINT_CURSOR : FF1FFA C |
 THISCODE_TOP.PROCS_TASK :   FF201E C |  THISCODE_TOP.REVERS :       FF1D3A C |
 THISCODE_TOP.SAME_W :       FF1D46 C |  THISCODE_TOP.TASKLIST :     FF202C C |
 THISCODE_TOP.TASK_00 :      FF2038 C |  THISCODE_TOP.TASK_01 :      FF2054 C |
 THISCODE_TOP.TASK_02 :      FF2058 C |  THISCODE_TOP.TASK_03 :      FF205C C |
 THISCODE_TOP.TASK_04 :      FF2060 C |  THISCODE_TOP.TASK_05 :      FF2068 C |
 THISCODE_TOP.TOPTRK :       FF1F9C C |  THISCODE_TOP.TOPTRK2 :      FF1FA8 C |
 THISCODE_TOP.WAIT :         FF1F02 C |  TICKCNT :                     1962 C |
 TICKFLAG :                    1960 C | *TIME :                    22:13:12 - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    47A C |  TRACK_OUT.CLRFE :              489 C |
 TRANSFERROM :                  FC4 C |  TRANSFERROM.DOUBLE :           FE3 C |
 TRANSFERROM.TRANSFER :        1008 C |  TRANSFERROM.X68KLAST :        1027 C |
 TRANSFERROM.X68KLOOP :        1016 C |  TRANSFERROM.X68KLPCONT :      101F C |
 TRANSFERROM.X68KLPWT :        1039 C |  TRANSFERROM.X68KLSTCONT :     1031 C |
 TRANSFERROM.X68KLSTWT :       104C C |  TRANSFERROM.X68KLSTWTLP :     1050 C |
 TRANSFERROM.X68KNOCARRY :     1002 C |  TRANSFERROM.X68KPWTLP :       103D C |
 TRKBUFF_0 :                   1C00 C |  TRKBUFF_1 :                   1D00 C |
 TRKDATA_0 :                   1E00 C |  TRKDATA_1 :                   1F00 C |
 TRKHDOUT :                    1A78 C |  TRKOUT_UNLK :                  4A8 C |
 TRKOUT_UNLK.ISPSG_C :          4E1 C |  TRKOUT_UNLK.IS_FM :            4F9 C |
 TRKOUT_UNLK.IS_PSG :           4CD C |  TRKOUT_UNLK.IS_PSGN :          4DE C |
 TRKOUT_UNLK.IS_PWM :           4F4 C |  TRKOUT_UNLK.TLB_CONT :         4FC C |
*TRK_CACHHEADS :                 1C - | *TRK_CACHINS :                   1E - |
 TRK_CACHNOTES :                 1A - |  TRK_CURRBLK :                   11 - |
 TRK_HALFWAY :                   10 - | *TRK_HDHALFWAY :                 19 - |
*TRK_NUMTRKS :                   16 - |  TRK_READ :                       C - |
 TRK_ROMBLK :                     0 - |  TRK_ROMINS :                     6 - |
 TRK_ROMPATT :                    3 - |  TRK_ROMPATTRD :                  9 - |
 TRK_ROWPAUSE :                  18 - |  TRK_ROWS :                       E - |
 TRK_SETBLK :                    12 - |  TRK_SIZEINS :                   17 - |
 TRK_STATUS :                    13 - |  TRK_TICKSET :                   15 - |
 TRK_TICKTMR :                   14 - | *TRUE :                           1 - |
 TSK00_EXIT :      FFFFFFFFC0000056 C | *TSK00_GONEXT :    FFFFFFFFC0000052 C |
*TVMODE :                         0 - |  UPDTRACK :                     1D0 C |
 UPDTRACK.CLRF :                40B C |  UPDTRACK.DECROW :              24F C |
 UPDTRACK.DECROW_E :            252 C | *UPDTRACK.DNTSLNCE :            420 C |
 UPDTRACK.EFFECT_FILL :         3E5 C |  UPDTRACK.EFF_A :               32A C |
 UPDTRACK.EFF_B :               334 C |  UPDTRACK.EFF_C :               34E C |
 UPDTRACK.EXIT :                244 C |  UPDTRACK.FIRST_FILL :          3F1 C |
 UPDTRACK.GO_EFFECT :           433 C |  UPDTRACK.HAS_NOTE :            25B C |
 UPDTRACK.INC_CPATT :           2F3 C |  UPDTRACK.NEXT_NOTE :           232 C |
 UPDTRACK.NEXT_TRACK :          359 C |  UPDTRACK.NO_EFF :              2B8 C |
 UPDTRACK.NO_INS :              29A C |  UPDTRACK.NO_NOTE :             28F C |
 UPDTRACK.NO_VOL :              2A6 C |  UPDTRACK.OLD_TYPE :            283 C |
 UPDTRACK.READ_TRACK :          1EA C |  UPDTRACK.SET_TRACK :           360 C |
 UPDTRACK.SFXMD :               1FF C |  UPDTRACK.TRACK_END :           463 C |
 UPDTRACK.TRKEND_EFFC :         464 C |  VARNULLVRAM :                  7FF - |
*VAR_MOVESPD :                 4000 - | *VBLK :                          80 - |
 VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
*VIDEO_AUTOMAP_VERT :        FF0414 C |  VIDEO_AUTOMAP_VERT.XLOOP :  FF0424 C |
 VIDEO_AUTOMAP_VERT.YLOOP :  FF0436 C |  VIDEO_CLEAR :               FF02B4 C |
*VIDEO_COPY :                FF06C2 C |  VIDEO_COPY.DMAW :           FF06D6 C |
 VIDEO_COPY.DMAWE :          FF0730 C |  VIDEO_FILL :                FF064E C |
 VIDEO_FILL.DMAW :           FF0662 C |  VIDEO_FILL.DMAWE :          FF06AA C |
 VIDEO_INIT :                FF027E C |  VIDEO_INIT.CLRRAM :         FF0288 C |
*VIDEO_INIT.EXIT :           FF02B2 C |  VIDEO_INIT.LOOP :           FF02A4 C |
 VIDEO_LOADART :             FF0748 C |  VIDEO_LOADART.FROM_RAM :    FF07FC C |
 VIDEO_LOADMAP :             FF034C C |  VIDEO_LOADMAP.CONT :        FF0372 C |
 VIDEO_LOADMAP.NODBLE :      FF0392 C |  VIDEO_LOADMAP.NONULL :      FF0370 C |
 VIDEO_LOADMAP.XLOOP :       FF0362 C |  VIDEO_LOADMAP.YLOOP :       FF0358 C |
*VIDEO_LOADMAP_VERT :        FF03A4 C |  VIDEO_LOADMAP_VERT.CONT :   FF03D8 C |
 VIDEO_LOADMAP_VERT.NODBLE : FF03FA C |  VIDEO_LOADMAP_VERT.NONULL : FF03D6 C |
*VIDEO_LOADMAP_VERT.OUTDBL : FF0404 C |  VIDEO_LOADMAP_VERT.XLOOP :  FF03B2 C |
 VIDEO_LOADMAP_VERT.YLOOP :  FF03C4 C |  VIDEO_LOADPAL :             FF0322 C |
 VIDEO_LOADPAL.LOOP :        FF0344 C |  VIDEO_LOADPAL.OUTV :        FF033A C |
 VIDEO_PRINT :               FF047A C |  VIDEO_PRINT.DONIBL :        FF0594 C |
 VIDEO_PRINT.EXIT :          FF0504 C |  VIDEO_PRINT.ISBYTE :        FF04CE C |
 VIDEO_PRINT.ISLONG :        FF04F2 C |  VIDEO_PRINT.ISWORD :        FF04E0 C |
 VIDEO_PRINT.LNGLOOP :       FF0584 C |  VIDEO_PRINT.LOOP :          FF048E C |
 VIDEO_PRINT.LOWR :          FF05A4 C |  VIDEO_PRINT.NEWJUMP :       FF0488 C |
 VIDEO_PRINT.NEXT :          FF04B0 C |  VIDEO_PRINT.NEXTV :         FF050E C |
 VIDEO_PRINT.NOTHING :       FF05B0 C |  VIDEO_PRINT.PUTTEXT :       FF04A2 C |
 VIDEO_PRINT.SPECIAL :       FF04B4 C |  VIDEO_PRINT.VBYTE :         FF0540 C |
 VIDEO_PRINT.VLONG :         FF058C C |  VIDEO_PRINT.VWORD :         FF0562 C |
 VIDEO_PRINTINIT :           FF0456 C |  VIDEO_UPDATE :              FF0302 C |
*VIDEO_UPDATE.EXIT :         FF0320 C |  VIDEO_UPDATE.LOOP :         FF0314 C |
 VID_PICKLAYER :             FF05B2 C |  VID_PICKLAYER.GOLYR :       FF0602 C |
 VID_PICKLAYER.NOWD :        FF05EC C |  VID_PICKLAYER.PLAWND :      FF05DA C |
 VID_PICKLAYER.THISSZ :      FF0622 C |  VID_PICKLAYER.THISSZJ :     FF064A C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :              FF1BCE C |  VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_FLAGS :                    2B C |
 WAVE_LEN :                      23 C |  WAVE_LOOP :                     26 C |
 WAVE_PITCH :                    29 C |  WAVE_START :                    20 C |
 WAVFREQ_LIST :                1613 C | *WHDFLG :                      17B9 C |
 X68KSRCLSB :                  1A76 C |  X68KSRCMID :                  1A77 C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                    2520 C |
 Z80_CODE_END :                4520 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      3E C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZSET_WTUNE :      FFFFFFFFFFFFFFE8 - |  ZSTACK :                      1B00 C |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - |  _DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - |  _JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
 _OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - |  _TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   1650 symbols
    266 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 11/27/2021 22:13:13


  defined macros:
  ---------------

FINISH                                | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPL                                 | ORG                                  
STRUCT                                |

     11 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 11/27/2021 22:13:13


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               |

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 11/27/2021 22:13:13


  codepages:
  ----------

STANDARD (0 changed characters)


0.24 seconds assembly time

  15132 lines source file
  15829 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
