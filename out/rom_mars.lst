 AS V1.42 Beta [Bld 118] - source file main.asm - page 1 - 7/24/2023 0:25:37


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; MARSIANO ENGINE
       4/       0 :                     ;
       5/       0 :                     ; A game engine that can be crossported to:
       6/       0 :                     ; Sega Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ; +-----------------------------------------------------------------+
       8/       0 :                     
       9/       0 :                     		!org 0				; Start at 0
      10/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later.
      11/       0 :                     		padding		off		; Dont pad dc.b
      12/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
      13/       0 :                     		supmode 	on 		; Supervisor mode 68k
      14/       0 :                     		dottedstructs	off		; If needed
      15/       0 :                     		page 		0
      16/       0 :                     
      17/       0 :                     ; ====================================================================
      18/       0 :                     ; ----------------------------------------------------------------
      19/       0 :                     ; USER SETTINGS
      20/       0 :                     ; ----------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     ; 68000 RAM SIZES
      23/       0 :                     ;
      24/       0 :                     ; MAX_SysCode and MAX_UserCode are used
      25/       0 :                     ; in Sega CD, Sega 32X and Sega CD32X
      26/       0 :                     ;
      27/       0 :                     ; MAKE SURE IT DOESN'T REACH FFFC00
      28/       0 :                     ; FOR CROSS-PORTING TO SEGA-CD
      29/       0 :                     ;
      30/       0 :                     ; $FFFD00 is reserved for SegaCD/SegaCD32X, STACK a7 point
      31/       0 :                     ; starts from here also.
      32/       0 :                     
      33/       0 : =$1800              MAX_SysCode	equ $1800	; ** CD/32X/CD32X ONLY
      34/       0 : =$4000              MAX_UserCode	equ $4000	; ** CD/32X/CD32X ONLY
      35/       0 : =$3800              MAX_RamSndData	equ $3800	; ** CD/32X/CD32X ONLY
      36/       0 : =$800               MAX_MdGlobal	equ $0800	; USER Global variables
      37/       0 : =$2800              MAX_ScrnBuff	equ $2800	; RAM section for Current screen
      38/       0 : =$2000              MAX_MdVideo	equ $2000	;
      39/       0 : =$500               MAX_MdSystem	equ $0500	;
      40/       0 : =$1000              MAX_MdOther	equ $1000	; System-specific stuff goes here
      41/       0 :                     
      42/       0 :                     ; ====================================================================
      43/       0 :                     ; ----------------------------------------------------------------
      44/       0 :                     ; Includes
      45/       0 :                     ; ----------------------------------------------------------------
      46/       0 :                     
      47/       0 :                     		include	"macros.asm"			; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ---------------------------------------------
(1)    8/       0 :                     ; Functions
(1)    9/       0 :                     ; ---------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   12/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   13/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   14/       0 :                     
(1)   15/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   16/       0 :                     
(1)   17/       0 :                     ; ====================================================================
(1)   18/       0 :                     ; ---------------------------------------------
(1)   19/       0 :                     ; Macros
(1)   20/       0 :                     ; ---------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                 paddingSoFar set 0
(1)   23/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   24/       0 :                     
(1)   25/       0 :                     ; -------------------------------------
(1)   26/       0 :                     ; Reserve memory section
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; NOTE: This doesn't work for Z80
(1)   29/       0 :                     ; -------------------------------------
(1)   30/       0 :                     
(1)   31/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   32/       0 :                     GLBL_LASTPC	set *
(1)   33/       0 :                     		dephase
(1)   34/       0 :                     GLBL_LASTORG	set *
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     		endm
(1)   37/       0 :                     		
(1)   38/       0 :                     ; -------------------------------------
(1)   39/       0 :                     ; Finish struct
(1)   40/       0 :                     ; -------------------------------------
(1)   41/       0 :                     
(1)   42/       0 :                     endstruct	macro				; Then finish the custom struct.
(1)   43/       0 :                     		!org GLBL_LASTORG
(1)   44/       0 :                     		phase GLBL_LASTPC
(1)   45/       0 :                     		endm
(1)   46/       0 :                     
(1)   47/       0 :                     ; -------------------------------------
(1)   48/       0 :                     ; Report RAM usage
(1)   49/       0 :                     ; -------------------------------------
(1)   50/       0 :                     
(1)   51/       0 :                     report		macro text,dis,dat
(1)   52/       0 :                     	if MOMPASS == 2
(1)   53/       0 :                     		if dat == -1
(1)   54/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   55/       0 :                     		else
(1)   56/       0 :                     			if dis > dat
(1)   57/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   58/       0 :                     			else
(1)   59/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   60/       0 :                     			endif
(1)   61/       0 :                     		endif
(1)   62/       0 :                     	endif
(1)   63/       0 :                     		endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; -------------------------------------
(1)   66/       0 :                     ; Same thing but only report
(1)   67/       0 :                     ; error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; VDP color debug
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     vdp_showme	macro this
(1)   89/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   90/       0 :                     		move.w	#this,(vdp_data).l
(1)   91/       0 :                     		endm
(1)   92/       0 :                     
(1)   93/       0 :                     ; -------------------------------------
(1)   94/       0 :                     ; Custom ORG-filler
(1)   95/       0 :                     ;
(1)   96/       0 :                     ; (from s2disasm)
(1)   97/       0 :                     ; -------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     org macro address
(1)  100/       0 :                     	if notZ80(MOMCPU)
(1)  101/       0 :                     		if address < *
(1)  102/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)  103/       0 :                     		elseif address > *
(1)  104/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)  105/       0 :                     			!org address
(1)  106/       0 :                     		endif
(1)  107/       0 :                     	else
(1)  108/       0 :                     		if address < $
(1)  109/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)  110/       0 :                     		else
(1)  111/       0 :                     			while address > $
(1)  112/       0 :                     				db 0
(1)  113/       0 :                     			endm
(1)  114/       0 :                     		endif
(1)  115/       0 :                     	endif
(1)  116/       0 :                         endm
(1)  117/       0 :                     
(1)  118/       0 :                     ; -------------------------------------
(1)  119/       0 :                     ; ZERO Fill padding
(1)  120/       0 :                     ; -------------------------------------
(1)  121/       0 :                     
(1)  122/       0 :                     rompad		macro address			; Zero fill
(1)  123/       0 :                     diff := address - *
(1)  124/       0 :                     		if diff < 0
(1)  125/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)  126/       0 :                     		else
(1)  127/       0 :                     			while diff > 1024
(1)  128/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)  129/       0 :                     				dc.b [1024]0
(1)  130/       0 :                     diff := diff - 1024
(1)  131/       0 :                     			endm
(1)  132/       0 :                     			dc.b [diff]0
(1)  133/       0 :                     		endif
(1)  134/       0 :                     	endm
(1)  135/       0 :                     
(1)  136/       0 :                     ; ====================================================================
(1)  137/       0 :                     ; ---------------------------------------------
(1)  138/       0 :                     ; ISO filesystem macros
(1)  139/       0 :                     ; ---------------------------------------------
(1)  140/       0 :                     
(1)  141/       0 :                     ; Set a ISO file
(1)  142/       0 :                     ; NOTE: a valid ISO head is required ($8000 to $B7FF)
(1)  143/       0 :                     
(1)  144/       0 :                     iso_setfs	macro type,start,end
(1)  145/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  146/       0 :                     		dc.b 0						; zero
(1)  147/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  148/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  149/       0 :                     		dc.l start>>11					; Start sector, big
(1)  150/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  151/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  152/       0 :                     		dc.l end-start					; Filesize, big
(1)  153/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  154/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  155/       0 :                     		dc.b 2						; File flags
(1)  156/       0 :                     		dc.b 0,0
(1)  157/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  158/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  159/       0 :                     		dc.b 1,type
(1)  160/       0 :                     .fend:
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     iso_file	macro filename,start,end
(1)  164/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  165/       0 :                     		dc.b 0						; zero
(1)  166/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  167/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  168/       0 :                     		dc.l start>>11					; Start sector, big
(1)  169/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  170/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  171/       0 :                     		dc.l end-start					; Filesize, big
(1)  172/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  173/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  174/       0 :                     		dc.b 0						; File flags
(1)  175/       0 :                     		dc.b 0,0
(1)  176/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  177/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  178/       0 :                     		dc.b .flend-.flen
(1)  179/       0 :                     .flen:		dc.b filename,";1"
(1)  180/       0 :                     .flend:		dc.b 0
(1)  181/       0 :                     .fend:
(1)  182/       0 :                     		endm
(1)  183/       0 :                     
(1)  184/       0 :                     
      48/       0 :                     		include	"system/shared.asm"		; Shared Genesis/32X/CD32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared internal structs
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     ; Structs
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ----------------------------------------------------------------
(1)   17/       0 :                     ; 32X MAIN DREQ-RAM control
(1)   18/       0 :                     ;
(1)   19/       0 :                     ; To read these labels:
(1)   20/       0 :                     ;
(1)   21/       0 :                     ; On the Genesis Side:
(1)   22/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   23/       0 :                     ; On the 32X Side:
(1)   24/       0 :                     ; 	mov	@(marsGbl_DmaRead,gbr),r0
(1)   25/       0 :                     ; 	add	#DREQ_LABEL,r0			; MAX $7F with add
(1)   26/       0 :                     ; 	;Then r0 to any other rX
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; Call System_MarsUpdate DURING DISPLAY to
(1)   29/       0 :                     ; transfer the changes.
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; *** List MUST be aligned in 8bytes, end with 0 or 8 ***
(1)   33/       0 :                     
(1)   35/       0 : (MACRO)             		struct 0
(1)   35/       0 : =$0                 GLBL_LASTPC     set *
(1)   35/       0 :                                     dephase
(1)   35/       0 : =$0                 GLBL_LASTORG    set *
(1)   35/       0 :                                     phase 0
(1)   36/       0 :                     Dreq_Palette	ds.w 256		; 256-color palette (DON'T MOVE THIS)
(1)   37/     200 :                     ; Dreq_DontUse	ds.w 8			; Last WORD gets corrupted, fill last writes with 0
(1)   38/     200 :                     sizeof_dreq	ds.l 0
(1)   39/     200 : (MACRO)             		endstruct
(1)   39/       0 :                                     !org GLBL_LASTORG
(1)   39/       0 :                                     phase GLBL_LASTPC
(1)   40/       0 :                     
(1)   44/       0 :                     
(1)   46/       0 :                     
      49/       0 :                     		include	"system/mcd/shared.asm"		; Shared Sega CD variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Sega CD shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; Register area
(1)    9/       0 :                     ;
(1)   10/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   11/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; -------------
(1)   15/       0 :                     ; bits
(1)   16/       0 :                     ; -------------
(1)   17/       0 :                     
(1)   18/       0 : =$2                 bitWRamMode	equ 2		;2M | 1M
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; Registers
(1)   22/       0 :                     ; -------------
(1)   23/       0 :                     
(1)   24/       0 : =$3                 mcd_memory	equ $03
(1)   25/       0 : =$6                 mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   26/       0 : =$E                 mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   27/       0 : =$F                 mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   28/       0 : =$10                mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   29/       0 : =$20                mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   30/       0 :                     
(1)   31/       0 :                     ; MemoryMode	equ	$02		;WORD
(1)   32/       0 :                     ; CommMain	equ	$0E		;BYTE
(1)   33/       0 :                     ; CommSub		equ	$0F		;BYTE
(1)   34/       0 :                     ; CommDataM	equ	$10		;Array (size: $E)
(1)   35/       0 :                     ; CommDataS	equ	$20		;Array (size: $E)
(1)   36/       0 :                     
(1)   37/       0 :                     ; ; =================================================================
(1)   38/       0 :                     ; ; ----------------------------------------
(1)   39/       0 :                     ; ; SUB CPU ONLY
(1)   40/       0 :                     ; ; ----------------------------------------
(1)   41/       0 :                     ;
(1)   42/       0 :                     ; ; -------------
(1)   43/       0 :                     ; ; PCM
(1)   44/       0 :                     ; ; -------------
(1)   45/       0 :                     ;
(1)   46/       0 :                     ; PCM		equ	$FF0000
(1)   47/       0 :                     ; ENV		equ	$01		; Envelope
(1)   48/       0 :                     ; PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
(1)   49/       0 :                     ; FDL		equ	$05		; Sample rate $00xx
(1)   50/       0 :                     ; FDH		equ	$07		; Sample rate $xx00
(1)   51/       0 :                     ; LSL		equ	$09		; Loop address $xx00
(1)   52/       0 :                     ; LSH		equ	$0B		; Loop address $00xx
(1)   53/       0 :                     ; ST		equ	$0D		; Start address (only $x0, $x000)
(1)   54/       0 :                     ; Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
(1)   55/       0 :                     ; OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
(1)   56/       0 :                     
(1)   57/       0 :                     ; =================================================================
(1)   58/       0 :                     
      50/       0 :                     		include	"system/md/map.asm"		; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000            sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000            sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      51/       0 :                     		include	"system/mars/map.asm"		; 32X hardware map (SH2 area)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                 shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      52/       0 :                     		include	"system/md/ram.asm"		; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; Area $FFFD00 to $FFFDFF(aprox) is reserved
(1)    8/       0 :                     ; for the MAIN-CPU's vectors and misc things
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; Sega 32X
(1)   12/       0 : =$FFFFFFFFFF..      RAM_MdDreq		equ	RAM_MdOther
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Settings
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 : (MACRO)             			struct $FFFF0000
(1)   18/       0 : =$0                 GLBL_LASTPC     set *
(1)   18/       0 :                                     dephase
(1)   18/       0 : =$0                 GLBL_LASTORG    set *
(1)   18/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   19/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   20/FFFFFFFFFFFF1800 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X Current screen mode
(1)   21/FFFFFFFFFFFF5800 :                     RAM_ExSoundData		ds.b MAX_RamSndData	; SEGACD/CD32X ONLY: GEMA Tracks and Instruments, Samples are stored on WRAM.
(1)   22/FFFFFFFFFFFF9000 :                     
(1)   23/FFFFFFFFFFFF9000 :                     ; *** THESE MUST BE AFTER $FF8000
(1)   24/FFFFFFFFFFFF9000 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000 DMA visuals
(1)   25/FFFFFFFFFFFFB000 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   26/FFFFFFFFFFFFB500 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   27/FFFFFFFFFFFFC500 :                     RAM_MdGlobal		ds.b MAX_MdGlobal
(1)   28/FFFFFFFFFFFFCD00 :                     RAM_ScreenBuff		ds.b MAX_ScrnBuff
(1)   29/FFFFFFFFFFFFF500 :                     sizeof_MdRam		ds.l 0
(1)   30/FFFFFFFFFFFFF500 : (MACRO)             			endstruct
(1)   30/FFFFFFFFFFFF0000 :                                     !org GLBL_LASTORG
(1)   30/       0 :                                     phase GLBL_LASTPC
(1)   31/       0 : (MACRO)             			report "MD RAM",(sizeof_MdRam-$FFFF8000),$FC00-$8000
(1)   32/       0 :                     
(1)   33/       0 : =$FFFFFD00          RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   34/       0 : =$FFFFFD00          RAM_MegaCd		equ $FFFFFD00
(1)   35/       0 : =$FFFFFE00          RAM_ScreenJump		equ $FFFFFE00;$FFFFFE80		; Screen change section
(1)   36/       0 :                     
      53/       0 :                     		include "game/global.asm"		; Global user variables on the Genesis side.
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global RAM variables on the Genesis side
(1)    4/       0 :                     ; (Score, Level, etc.)
(1)    5/       0 :                     ; ----------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 : (MACRO)             		struct RAM_MdGlobal
(1)    7/       0 : =$0                 GLBL_LASTPC     set *
(1)    7/       0 :                                     dephase
(1)    7/       0 : =$0                 GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFC500 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFC500 :                     RAM_Glbl_Scrn	ds.w 1				; Current screen number
(1)    9/FFFFFFFFFFFFC502 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFC504 : (MACRO)             		endstruct
(1)   10/FFFFFFFFFFFFC500 :                                     !org GLBL_LASTORG
(1)   10/       0 :                                     phase GLBL_LASTPC
(1)   11/       0 : (MACRO)             		erreport "68K GLOBALS",sizeof_mdglbl-RAM_MdGlobal,MAX_MdGlobal
(1)   12/       0 :                     
(1)   13/       0 :                     
      54/       0 :                     
      55/       0 :                     ; ====================================================================
      56/       0 :                     ; ----------------------------------------------------------------
      57/       0 :                     ; Init procedures
      58/       0 :                     ; ----------------------------------------------------------------
      59/       0 :                     
      60/       0 :                     ; ---------------------------------------------
      61/       0 :                     ; SEGA 32X
      62/       0 :                     ; ---------------------------------------------
      63/       0 :                     
      65/       0 :                     		include	"system/head_mars.asm"			; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA 32X header
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 03F0           		dc.l $3F0		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0820           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0820           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0820           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0820           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0820           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0820           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0820           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0820           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0820           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0820           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0820           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0820           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0820           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0820           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0820           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0820           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0820           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0820           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0820           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0820           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0820           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0820           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0820           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0820           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0820           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0820           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF B452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0820           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF B44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0820           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0820           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0820           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0820           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0820           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0820           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0820           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0820           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0820           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0820           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0820           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0820           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0820           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0820           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0820           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   71/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2023.???"
                    3230 3233 2E3F 3F3F 
(1)   72/     120 : 4D61 7273 6961 6E6F 		dc.b "Marsiano MARS                                   "
                    204D 4152 5320 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   73/     150 : 4D61 7273 6961 6E6F 		dc.b "Marsiano MARS                                   "
                    204D 4152 5320 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   74/     180 : 474D 2054 4543 4844 		dc.b "GM TECHDEMO-01"
                    454D 4F2D 3031      
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 000A 2F30           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   82/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   83/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 2020 2020 2020 		dc.b "JU              "
                    2020 2020 2020 2020 
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; NEW 32X jumps
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     
(1)   92/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   93/     206 : 4EF9 0088 0820      		jmp	($880000|MD_ErrBus).l		; Bus error
(1)   94/     20C : 4EF9 0088 0820      		jmp	($880000|MD_ErrAddr).l		; Address error
(1)   95/     212 : 4EF9 0088 0820      		jmp	($880000|MD_ErrIll).l		; ILLEGAL Instruction
(1)   96/     218 : 4EF9 0088 0820      		jmp	($880000|MD_ErrZDiv).l		; Divide by 0
(1)   97/     21E : 4EF9 0088 0820      		jmp	($880000|MD_ErrChk).l		; CHK Instruction
(1)   98/     224 : 4EF9 0088 0820      		jmp	($880000|MD_ErrTrapV).l		; TRAPV Instruction
(1)   99/     22A : 4EF9 0088 0820      		jmp	($880000|MD_ErrPrivl).l		; Privilege violation
(1)  100/     230 : 4EF9 0088 0820      		jmp	($880000|MD_Trace).l		; Trace
(1)  101/     236 : 4EF9 0088 0820      		jmp	($880000|MD_Line1010).l		; Line 1010 Emulator
(1)  102/     23C : 4EF9 0088 0820      		jmp	($880000|MD_Line1111).l		; Line 1111 Emulator
(1)  103/     242 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l		; Error exception
(1)  104/     248 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  105/     24E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  106/     254 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  107/     25A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  108/     260 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  109/     266 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  110/     26C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  111/     272 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  112/     278 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  113/     27E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  114/     284 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  115/     28A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  116/     290 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  117/     296 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  118/     29C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  119/     2A2 : 4EF9 FFFF B452      		jmp	(RAM_MdMarsHInt).l		; RAM jump for HBlank (JMP xxxx xxxx)
(1)  120/     2A8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  121/     2AE : 4EF9 FFFF B44C      		jmp	(RAM_MdMarsVInt).l		; RAM jump for VBlank (JMP xxxx xxxx)
(1)  122/     2B4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     2BA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2C0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  125/     2C6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2CC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  127/     2D2 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2D8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2DE : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2E4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2EA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2F0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2F6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2FC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     302 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     308 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     30E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     314 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     31A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     320 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     326 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     32C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     332 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     338 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     33E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     344 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     34A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     350 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     356 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     35C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     362 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     368 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     36E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     374 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     37A :                     
(1)  156/     37A :                     ; ----------------------------------------------------------------
(1)  157/     37A :                     
(1)  158/     37A :                     		align $3C0
(1)  159/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  160/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  161/     3D4 : 0003 9B00           		dc.l MARS_RAMDATA			; RAM-code location *Set to 0 if SH2 code points to ROM*
(1)  162/     3D8 : 0000 0000           		dc.l 0					; Zero again.
(1)  163/     3DC : 0001 5E00           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; RAM-code size (END-START) *Set to 4 if SH2 code points to ROM*
(1)  164/     3E0 : 0600 0710           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  165/     3E4 : 0600 0874           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  166/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  167/     3EC : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  168/     3F0 :                     		binclude "system/mars/data/security.bin"; All the securty/boot code
(1)  169/     800 :                     
(1)  170/     800 :                     ; ====================================================================
(1)  171/     800 :                     ; ----------------------------------------------------------------
(1)  172/     800 :                     ; Entry point, this must be located at $800
(1)  173/     800 :                     ;
(1)  174/     800 :                     ; At this point, these registers return
(1)  175/     800 :                     ; the following bits:
(1)  176/     800 :                     ;
(1)  177/     800 :                     ; d0: %h0000000 rsc000ti
(1)  178/     800 :                     ; 	h - Cold start / Hot Start
(1)  179/     800 :                     ; 	r - SDRAM self check pass or error
(1)  180/     800 :                     ; 	s - Security check pass or error
(1)  181/     800 :                     ; 	c - Checksum pass or error
(1)  182/     800 :                     ; 	t - TV mode pass or error
(1)  183/     800 :                     ; 	i - MARS ID pass or error
(1)  184/     800 :                     ;
(1)  185/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  186/     800 :                     ; 	m - MARS TV mode
(1)  187/     800 :                     ; 	j - Country: Japan / Overseas
(1)  188/     800 :                     ; 	d - MD TV mode
(1)  189/     800 :                     ; 	k - DISK connected: Yes / No
(1)  190/     800 :                     ; 	v - Version
(1)  191/     800 :                     ;
(1)  192/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  193/     800 :                     ; 	cc: Test passed
(1)  194/     800 :                     ; 	cs: Test failed**
(1)  195/     800 :                     ;
(1)  196/     800 :                     ; ** HARDWARE BUG: This may still trigger if pressing
(1)  197/     800 :                     ; RESET so many times. (Found this on VRDX)
(1)  198/     800 :                     ; * WORKAROUND: After jumping to the
(1)  199/     800 :                     ; "No 32X detected" loop, test the checksum bit again
(1)  200/     800 :                     ; and if it passes Init as usual.
(1)  201/     800 :                     ; ----------------------------------------------------------------
(1)  202/     800 :                     
(1)  203/     800 :                     MARS_Entry:
(1)  204/     800 : 6436                		bcc	MD_Init			; Carry clear: pass
(1)  205/     802 :                     
(1)  206/     802 :                     ; ====================================================================
(1)  207/     802 :                     ; ----------------------------------------------------------------
(1)  208/     802 :                     ; If 32X is not detected...
(1)  209/     802 :                     ; ----------------------------------------------------------------
(1)  210/     802 :                     
(1)  211/     802 :                     .no_mars:
(1)  212/     802 : 0800 0005           		btst	#5,d0			; Check the checksum AGAIN in case we got here
(1)  213/     806 : 6730                		beq.s	MD_Init			; when it was already good.
(1)  214/     808 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  215/     80C : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l	; VDP: Point to Color 0
                    0004                
(1)  216/     816 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l	; Write blue
(1)  217/     81E : 60FE                		bra.s	*			; Infinite loop.
(1)  218/     820 :                     
(1)  219/     820 :                     ; ====================================================================
(1)  220/     820 :                     ; ----------------------------------------------------------------
(1)  221/     820 :                     ; 68k's Error handlers
(1)  222/     820 :                     ;
(1)  223/     820 :                     ; HBlank and VBlank jump to RAM
(1)  224/     820 :                     ; ----------------------------------------------------------------
(1)  225/     820 :                     
(1)  226/     820 :                     MD_ErrBus:		; Bus error
(1)  227/     820 :                     MD_ErrAddr:		; Address error
(1)  228/     820 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  229/     820 :                     MD_ErrZDiv:		; Divide by 0
(1)  230/     820 :                     MD_ErrChk:		; CHK Instruction
(1)  231/     820 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  232/     820 :                     MD_ErrPrivl:		; Privilege violation
(1)  233/     820 :                     MD_Trace:		; Trace
(1)  234/     820 :                     MD_Line1010:		; Line 1010 Emulator
(1)  235/     820 :                     MD_Line1111:		; Line 1111 Emulator
(1)  236/     820 :                     MD_ErrorEx:		; Error exception
(1)  237/     820 :                     MD_ErrorTrap:
(1)  238/     820 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  239/     824 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l
                    0004                
(1)  240/     82E : 33FC 000E 00C0 0000 		move.w	#$000E,(vdp_data).l
(1)  241/     836 : 60FE                		bra.s	*
(1)  242/     838 :                     
(1)  243/     838 :                     ; ====================================================================
(1)  244/     838 :                     ; ----------------------------------------------------------------
(1)  245/     838 :                     ; Init
(1)  246/     838 :                     ; ----------------------------------------------------------------
(1)  247/     838 :                     
(1)  248/     838 :                     MD_Init:
(1)  249/     838 : 46FC 2700           		move.w	#$2700,sr
(1)  250/     83C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l
(1)  251/     842 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  252/     848 : 223C FFFF F500      		move.l	#sizeof_mdram,d1
(1)  253/     84E : 7000                		moveq	#0,d0
(1)  254/     850 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  255/     852 : B1C1                		cmp.l	d1,a0
(1)  256/     854 : 65FA                		bcs.s	.loop_ram
(1)  257/     856 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
(1)  258/     85E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  259/     864 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  260/     86A : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  261/     86C : 0807 0001           		btst	#1,d7
(1)  262/     870 : 66F8                		bne.s	.wait_dma
(1)  263/     872 : 2CBC 8004 8104      		move.l	#$80048104,(a6)		; Default top VDP regs
(1)  264/     878 : 7000                		moveq	#0,d0			; Clear both Master and Slave comm's
(1)  265/     87A : 2B40 002C           		move.l	d0,comm12(a5)
(1)  266/     87E :                     
      66/     87E : 41F9 0088 08C6      		lea	($880000+Md_SysCode),a0			; Transfer SYSTEM code
      67/     884 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
      68/     88A : 303C 1109           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
      69/     88E :                     .copyme:
      70/     88E : 12D8                		move.b	(a0)+,(a1)+
      71/     890 : 51C8 FFFC           		dbf	d0,.copyme
      72/     894 : 41F9 0088 19D0      		lea	($880000+Md_JumpCode),a0		; Transfer JUMP code
      73/     89A : 43F8 FE00           		lea	(RAM_ScreenJump),a1
      74/     89E : 303C 0027           		move.w	#((Md_JumpCode_e-Md_JumpCode))-1,d0
      75/     8A2 :                     .copyme_2:
      76/     8A2 : 12D8                		move.b	(a0)+,(a1)+
      77/     8A4 : 51C8 FFFC           		dbf	d0,.copyme_2
      78/     8A8 : 4EB9 FFFF 0000      		jsr	(Sound_init).l				; RAM jumps
      79/     8AE : 4EB9 FFFF 021A      		jsr	(Video_init).l
      80/     8B4 : 4EB9 FFFF 0B88      		jsr	(System_Init).l
      81/     8BA : 31FC 0000 C500      		move.w	#0,(RAM_Glbl_Scrn).w			; *** TEMPORAL ***
      82/     8C0 : 4EF9 FFFF FE00      		jmp	(Md_ReadModes).l
      83/     8C6 :                     
      84/     8C6 :                     ; ---------------------------------------------
      85/     8C6 :                     ; SEGA CD and CD32X
      86/     8C6 :                     ; ---------------------------------------------
      87/     8C6 :                     
     162/     8C6 :                     
     163/     8C6 :                     ; ====================================================================
     164/     8C6 :                     ; --------------------------------------------------------
     165/     8C6 :                     ; SYSTEM and SCREEN-JUMP codes
     166/     8C6 :                     ;
     167/     8C6 :                     ; MD and PICO: Normal ROM locations
     168/     8C6 :                     ; CD/32X/CD32X: Loaded in RAM
     169/     8C6 :                     ; --------------------------------------------------------
     170/     8C6 :                     
     171/     8C6 :                     ; ---------------------------------------------
     172/     8C6 :                     ; TOP-RAM Genesis system routines
     173/     8C6 :                     ; ---------------------------------------------
     174/     8C6 :                     
     175/     8C6 :                     Md_SysCode:
     177/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     179/FFFFFFFFFFFF0000 :                     
     180/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     181/FFFFFFFFFFFF0000 :                     		include	"sound/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona sound driver v0.5
(1)    4/FFFFFFFFFFFF0000 :                     ; (C)2023 GenesisFan64
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Reads custom "miniature" ImpulseTracker files
(1)    7/FFFFFFFFFFFF0000 :                     ; and automaticly picks the soundchip(s) to play.
(1)    8/FFFFFFFFFFFF0000 :                     ;
(1)    9/FFFFFFFFFFFF0000 :                     ; Features:
(1)   10/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   11/FFFFFFFFFFFF0000 :                     ;   | 7 extra pseudo-channels in either MONO
(1)   12/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   13/FFFFFFFFFFFF0000 :                     ;   | ** REQUIRES specific code for the SH2 side
(1)   14/FFFFFFFFFFFF0000 :                     ;   | and enabling the use of CMD interrupt.
(1)   15/FFFFFFFFFFFF0000 :                     ;   | Uses Slave SH2.
(1)   16/FFFFFFFFFFFF0000 :                     ; - DMA-protection
(1)   17/FFFFFFFFFFFF0000 :                     ;   | This keeps DAC samplerate to a decent
(1)   18/FFFFFFFFFFFF0000 :                     ;   | quality.
(1)   19/FFFFFFFFFFFF0000 :                     ; - DAC Playback at 16000hz
(1)   20/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   21/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   22/FFFFFFFFFFFF0000 :                     ;
(1)   23/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   24/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   25/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   26/FFFFFFFFFFFF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   27/FFFFFFFFFFFF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   28/FFFFFFFFFFFF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   29/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   30/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   31/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   32/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   33/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   34/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   35/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   38/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   39/FFFFFFFFFFFF0000 :                     ; Settings
(1)   40/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   41/FFFFFFFFFFFF0000 :                     
(1)   42/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   43/FFFFFFFFFFFF0000 :                     ; Variables
(1)   44/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   45/FFFFFFFFFFFF0000 :                     
(1)   46/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   47/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   48/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   49/FFFFFFFFFFFF0000 :                     
(1)   50/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   51/FFFFFFFFFFFF0000 : =$40                zDrvFifo	equ commZfifo		; FIFO command storage
(1)   52/FFFFFFFFFFFF0000 : =$80                zDrvFWrt	equ commZWrite		; FIFO command index
(1)   53/FFFFFFFFFFFF0000 : =$81                zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   54/FFFFFFFFFFFF0000 : =$82                zDrvMarsBlk	equ marsBlock		; Disable PWM flag
(1)   55/FFFFFFFFFFFF0000 :                     
(1)   56/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   57/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   58/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   59/FFFFFFFFFFFF0000 :                     ;
(1)   60/FFFFFFFFFFFF0000 :                     ; Uses:
(1)   61/FFFFFFFFFFFF0000 :                     ; a0-a1,d0-d1
(1)   62/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   63/FFFFFFFFFFFF0000 :                     
(1)   64/FFFFFFFFFFFF0000 :                     ; 		align $80
(1)   65/FFFFFFFFFFFF0000 :                     Sound_Init:
(1)   66/FFFFFFFFFFFF0000 : 46FC 2700           		move.w	#$2700,sr
(1)   70/FFFFFFFFFFFF0004 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Get Z80 bus
(1)   71/FFFFFFFFFFFF000C : 33FC 0100 00A1 1200 		move.w	#$0100,(z80_reset).l		; Z80 reset
(1)   72/FFFFFFFFFFFF0014 :                     .wait:
(1)   73/FFFFFFFFFFFF0014 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   74/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)   75/FFFFFFFFFFFF001E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   76/FFFFFFFFFFFF0024 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   77/FFFFFFFFFFFF0028 : 7200                		moveq	#0,d1
(1)   78/FFFFFFFFFFFF002A :                     .cleanup:
(1)   79/FFFFFFFFFFFF002A : 10C1                		move.b	d1,(a0)+
(1)   80/FFFFFFFFFFFF002C : 51C8 FFFC           		dbf	d0,.cleanup
(1)   81/FFFFFFFFFFFF0030 : 41F9 0088 19F8      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   82/FFFFFFFFFFFF0036 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   83/FFFFFFFFFFFF003C : 303C 1EFF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   84/FFFFFFFFFFFF0040 :                     .copy:
(1)   85/FFFFFFFFFFFF0040 : 12D8                		move.b	(a0)+,(a1)+
(1)   86/FFFFFFFFFFFF0042 : 51C8 FFFC           		dbf	d0,.copy
(1)   87/FFFFFFFFFFFF0046 : 33FC 0000 00A1 1200 		move.w	#0,(z80_reset).l		; Reset cancel
(1)   88/FFFFFFFFFFFF004E : 4E71                		nop
(1)   89/FFFFFFFFFFFF0050 : 4E71                		nop
(1)   90/FFFFFFFFFFFF0052 : 4E71                		nop
(1)   91/FFFFFFFFFFFF0054 : 4E71                		nop
(1)   92/FFFFFFFFFFFF0056 : 33FC 0100 00A1 1200 		move.w	#$100,(z80_reset).l
(1)   93/FFFFFFFFFFFF005E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   95/FFFFFFFFFFFF0066 : 4E75                		rts
(1)   96/FFFFFFFFFFFF0068 :                     
(1)   97/FFFFFFFFFFFF0068 :                     ; ====================================================================
(1)   98/FFFFFFFFFFFF0068 :                     ; ----------------------------------------------------------------
(1)   99/FFFFFFFFFFFF0068 :                     ; Subroutines
(1)  100/FFFFFFFFFFFF0068 :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF0068 :                     
(1)  102/FFFFFFFFFFFF0068 :                     ; ------------------------------------------------
(1)  103/FFFFFFFFFFFF0068 :                     ; Lock Z80, get bus
(1)  104/FFFFFFFFFFFF0068 :                     ; ------------------------------------------------
(1)  105/FFFFFFFFFFFF0068 :                     
(1)  106/FFFFFFFFFFFF0068 :                     sndLockZ80:
(1)  107/FFFFFFFFFFFF0068 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  108/FFFFFFFFFFFF0070 :                     .wait:
(1)  109/FFFFFFFFFFFF0070 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  110/FFFFFFFFFFFF0078 : 66F6                		bne.s	.wait
(1)  111/FFFFFFFFFFFF007A : 4E75                		rts
(1)  112/FFFFFFFFFFFF007C :                     
(1)  113/FFFFFFFFFFFF007C :                     ; ------------------------------------------------
(1)  114/FFFFFFFFFFFF007C :                     ; Unlock Z80, return bus
(1)  115/FFFFFFFFFFFF007C :                     ; ------------------------------------------------
(1)  116/FFFFFFFFFFFF007C :                     
(1)  117/FFFFFFFFFFFF007C :                     sndUnlockZ80:
(1)  118/FFFFFFFFFFFF007C : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  119/FFFFFFFFFFFF0084 : 4E75                		rts
(1)  120/FFFFFFFFFFFF0086 :                     
(1)  121/FFFFFFFFFFFF0086 :                     ; ------------------------------------------------
(1)  122/FFFFFFFFFFFF0086 :                     ; 68k-to-z80 Sound request
(1)  123/FFFFFFFFFFFF0086 :                     ; enter/exit routines
(1)  124/FFFFFFFFFFFF0086 :                     ;
(1)  125/FFFFFFFFFFFF0086 :                     ; d6 - commFifo index
(1)  126/FFFFFFFFFFFF0086 :                     ; ------------------------------------------------
(1)  127/FFFFFFFFFFFF0086 :                     
(1)  128/FFFFFFFFFFFF0086 :                     sndReq_Enter:
(1)  129/FFFFFFFFFFFF0086 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  130/FFFFFFFFFFFF008A : DEFC 0010           		adda	#4*4,sp				; Go back to the RTS jump
(1)  131/FFFFFFFFFFFF008E : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  132/FFFFFFFFFFFF0096 : 7C00                		moveq	#0,d6
(1)  133/FFFFFFFFFFFF0098 : 40C6                		move.w	sr,d6
(1)  134/FFFFFFFFFFFF009A : 4846                		swap	d6
(1)  135/FFFFFFFFFFFF009C : 007C 0700           		or.w	#$0700,sr			; Disable interrupts
(1)  136/FFFFFFFFFFFF00A0 : 4BF9 00A0 0080      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  137/FFFFFFFFFFFF00A6 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  138/FFFFFFFFFFFF00AC :                     .wait:
(1)  139/FFFFFFFFFFFF00AC : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  140/FFFFFFFFFFFF00B4 : 66F6                		bne.s	.wait
(1)  141/FFFFFFFFFFFF00B6 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  142/FFFFFFFFFFFF00B8 : 4886                		ext.w	d6				; extend to 16 bits
(1)  143/FFFFFFFFFFFF00BA : 4E75                		rts
(1)  144/FFFFFFFFFFFF00BC :                     ; JUMP ONLY
(1)  145/FFFFFFFFFFFF00BC :                     sndReq_Exit:
(1)  146/FFFFFFFFFFFF00BC : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  147/FFFFFFFFFFFF00C4 : 4846                		swap	d6
(1)  148/FFFFFFFFFFFF00C6 : 46C6                		move.w	d6,sr
(1)  149/FFFFFFFFFFFF00C8 : 9EFC 0010           		suba	#4*4,sp				; Roll to the last regs
(1)  150/FFFFFFFFFFFF00CC : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  151/FFFFFFFFFFFF00D0 : 4E75                		rts
(1)  152/FFFFFFFFFFFF00D2 :                     
(1)  153/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  154/FFFFFFFFFFFF00D2 :                     ; Send request id and arguments
(1)  155/FFFFFFFFFFFF00D2 :                     ;
(1)  156/FFFFFFFFFFFF00D2 :                     ; Input:
(1)  157/FFFFFFFFFFFF00D2 :                     ; d7 - byte to write
(1)  158/FFFFFFFFFFFF00D2 :                     ; d6 - index pointer
(1)  159/FFFFFFFFFFFF00D2 :                     ; a5 - commZWrite, update index
(1)  160/FFFFFFFFFFFF00D2 :                     ; a6 - commZfifo command list
(1)  161/FFFFFFFFFFFF00D2 :                     ;
(1)  162/FFFFFFFFFFFF00D2 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  163/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  164/FFFFFFFFFFFF00D2 :                     
(1)  165/FFFFFFFFFFFF00D2 :                     sndReq_scmd:
(1)  166/FFFFFFFFFFFF00D2 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  167/FFFFFFFFFFFF00D8 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  168/FFFFFFFFFFFF00DA : 0206 003F           		andi.b	#$3F,d6
(1)  169/FFFFFFFFFFFF00DE : 600C                		bra.s	sndReq_sbyte
(1)  170/FFFFFFFFFFFF00E0 :                     sndReq_slong:
(1)  171/FFFFFFFFFFFF00E0 : 610A                		bsr	sndReq_sbyte
(1)  172/FFFFFFFFFFFF00E2 : E09F                		ror.l	#8,d7
(1)  173/FFFFFFFFFFFF00E4 :                     sndReq_saddr:
(1)  174/FFFFFFFFFFFF00E4 : 6106                		bsr	sndReq_sbyte
(1)  175/FFFFFFFFFFFF00E6 : E09F                		ror.l	#8,d7
(1)  176/FFFFFFFFFFFF00E8 :                     sndReq_sword:
(1)  177/FFFFFFFFFFFF00E8 : 6102                		bsr	sndReq_sbyte
(1)  178/FFFFFFFFFFFF00EA : E09F                		ror.l	#8,d7
(1)  179/FFFFFFFFFFFF00EC :                     sndReq_sbyte:
(1)  180/FFFFFFFFFFFF00EC : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  181/FFFFFFFFFFFF00F0 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  182/FFFFFFFFFFFF00F2 : 0206 003F           		andi.b	#$3F,d6
(1)  183/FFFFFFFFFFFF00F6 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  184/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  185/FFFFFFFFFFFF00FA :                     
(1)  186/FFFFFFFFFFFF00FA :                     ; --------------------------------------------------------
(1)  187/FFFFFFFFFFFF00FA :                     ; gemaDmaPause
(1)  188/FFFFFFFFFFFF00FA :                     ;
(1)  189/FFFFFFFFFFFF00FA :                     ; Call this BEFORE doing any DMA transfer
(1)  190/FFFFFFFFFFFF00FA :                     ; --------------------------------------------------------
(1)  191/FFFFFFFFFFFF00FA :                     
(1)  192/FFFFFFFFFFFF00FA :                     gemaDmaPause:
(1)  196/FFFFFFFFFFFF00FA : 4847                		swap	d7
(1)  197/FFFFFFFFFFFF00FC : 4846                		swap	d6
(1)  198/FFFFFFFFFFFF00FE : 6100 FF68           		bsr	sndLockZ80
(1)  199/FFFFFFFFFFFF0102 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  200/FFFFFFFFFFFF010A : 31FC 0001 0000      		move.w	#1,
(1)  201/FFFFFFFFFFFF0110 : 6100 FF6A           		bsr	sndUnlockZ80
(1)  202/FFFFFFFFFFFF0114 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  203/FFFFFFFFFFFF0118 : 51CF FFFE           		dbf	d7,*
(1)  204/FFFFFFFFFFFF011C : 4846                		swap	d6
(1)  205/FFFFFFFFFFFF011E : 4847                		swap	d7
(1)  206/FFFFFFFFFFFF0120 : 4E75                		rts
(1)  208/FFFFFFFFFFFF0122 :                     
(1)  209/FFFFFFFFFFFF0122 :                     ; --------------------------------------------------------
(1)  210/FFFFFFFFFFFF0122 :                     ; gemaDmaResume
(1)  211/FFFFFFFFFFFF0122 :                     ;
(1)  212/FFFFFFFFFFFF0122 :                     ; Call this AFTER finishing DMA transfer
(1)  213/FFFFFFFFFFFF0122 :                     ; --------------------------------------------------------
(1)  214/FFFFFFFFFFFF0122 :                     
(1)  215/FFFFFFFFFFFF0122 :                     gemaDmaResume:
(1)  219/FFFFFFFFFFFF0122 : 4847                		swap	d7
(1)  220/FFFFFFFFFFFF0124 : 4846                		swap	d6
(1)  221/FFFFFFFFFFFF0126 : 6100 FF40           		bsr	sndLockZ80
(1)  222/FFFFFFFFFFFF012A : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  223/FFFFFFFFFFFF0132 : 6100 FF48           		bsr	sndUnlockZ80
(1)  224/FFFFFFFFFFFF0136 : 4846                		swap	d6
(1)  225/FFFFFFFFFFFF0138 : 4847                		swap	d7
(1)  226/FFFFFFFFFFFF013A : 4E75                		rts
(1)  228/FFFFFFFFFFFF013C :                     
(1)  229/FFFFFFFFFFFF013C :                     ; --------------------------------------------------------
(1)  230/FFFFFFFFFFFF013C :                     ; gemaDmaPause
(1)  231/FFFFFFFFFFFF013C :                     ;
(1)  232/FFFFFFFFFFFF013C :                     ; Call this BEFORE doing any DMA transfer
(1)  233/FFFFFFFFFFFF013C :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF013C :                     
(1)  235/FFFFFFFFFFFF013C :                     gemaDmaPauseRom:
(1)  239/FFFFFFFFFFFF013C : 4847                		swap	d7
(1)  240/FFFFFFFFFFFF013E : 4846                		swap	d6
(1)  241/FFFFFFFFFFFF0140 : 6100 FF26           		bsr	sndLockZ80
(1)  242/FFFFFFFFFFFF0144 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  243/FFFFFFFFFFFF014C : 6100 FF2E           		bsr	sndUnlockZ80
(1)  244/FFFFFFFFFFFF0150 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  245/FFFFFFFFFFFF0154 : 51CF FFFE           		dbf	d7,*
(1)  247/FFFFFFFFFFFF0158 : 3C3C 0002           		move.w	#2,d6
(1)  248/FFFFFFFFFFFF015C : 6136                		bsr	sndReqCmd
(1)  249/FFFFFFFFFFFF015E : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  251/FFFFFFFFFFFF0166 : 4846                		swap	d6
(1)  252/FFFFFFFFFFFF0168 : 4847                		swap	d7
(1)  253/FFFFFFFFFFFF016A : 4E75                		rts
(1)  255/FFFFFFFFFFFF016C :                     
(1)  256/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  257/FFFFFFFFFFFF016C :                     ; gemaDmaResume
(1)  258/FFFFFFFFFFFF016C :                     ;
(1)  259/FFFFFFFFFFFF016C :                     ; Call this AFTER finishing DMA transfer
(1)  260/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  261/FFFFFFFFFFFF016C :                     
(1)  262/FFFFFFFFFFFF016C :                     gemaDmaResumeRom:
(1)  266/FFFFFFFFFFFF016C : 4847                		swap	d7
(1)  267/FFFFFFFFFFFF016E : 4846                		swap	d6
(1)  268/FFFFFFFFFFFF0170 : 6100 FEF6           		bsr	sndLockZ80
(1)  269/FFFFFFFFFFFF0174 : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  270/FFFFFFFFFFFF017C : 6100 FEFE           		bsr	sndUnlockZ80
(1)  272/FFFFFFFFFFFF0180 : 3C3C 0003           		move.w	#3,d6
(1)  273/FFFFFFFFFFFF0184 : 610E                		bsr	sndReqCmd
(1)  274/FFFFFFFFFFFF0186 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  276/FFFFFFFFFFFF018E : 4846                		swap	d6
(1)  277/FFFFFFFFFFFF0190 : 4847                		swap	d7
(1)  278/FFFFFFFFFFFF0192 : 4E75                		rts
(1)  280/FFFFFFFFFFFF0194 :                     
(1)  281/FFFFFFFFFFFF0194 :                     ; ------------------------------------------------
(1)  282/FFFFFFFFFFFF0194 :                     ; 32X ONLY: Request CMD interrupt with
(1)  283/FFFFFFFFFFFF0194 :                     ; command
(1)  284/FFFFFFFFFFFF0194 :                     ;
(1)  285/FFFFFFFFFFFF0194 :                     ; d6 - command
(1)  286/FFFFFFFFFFFF0194 :                     ; ------------------------------------------------
(1)  287/FFFFFFFFFFFF0194 :                     
(1)  288/FFFFFFFFFFFF0194 :                     sndReqCmd:
(1)  289/FFFFFFFFFFFF0194 :                     ; 	if MARS
(1)  290/FFFFFFFFFFFF0194 :                     ; .wait_in:	move.b	(sysmars_reg+comm14),d7
(1)  291/FFFFFFFFFFFF0194 :                     ; 		and.w	#%11110000,d7
(1)  292/FFFFFFFFFFFF0194 :                     ; 		bne.s	.wait_in
(1)  293/FFFFFFFFFFFF0194 :                     ; 		and.w	#%00001111,d6
(1)  294/FFFFFFFFFFFF0194 :                     ; 		or.b	d6,d7
(1)  295/FFFFFFFFFFFF0194 :                     ; 		move.b	d7,(sysmars_reg+comm14).l
(1)  296/FFFFFFFFFFFF0194 :                     ; 		move.b	(sysmars_reg+comm14).l,d7
(1)  297/FFFFFFFFFFFF0194 :                     ; 		and.w	#%00001111,d7
(1)  298/FFFFFFFFFFFF0194 :                     ; 		cmp.b	d6,d7
(1)  299/FFFFFFFFFFFF0194 :                     ; 		bne.s	.wait_in
(1)  300/FFFFFFFFFFFF0194 :                     ; 		bset	#7,(sysmars_reg+comm14).l
(1)  301/FFFFFFFFFFFF0194 :                     ; 		bset	#1,(sysmars_reg+standby).l	; Request Slave CMD
(1)  302/FFFFFFFFFFFF0194 :                     ; ; .wait_cmd:	btst	#1,(sysmars_reg+standby).l
(1)  303/FFFFFFFFFFFF0194 :                     ; ; 		bne.s	.wait_cmd
(1)  304/FFFFFFFFFFFF0194 :                     ; .wait_out:	move.b	(sysmars_reg+comm14),d7
(1)  305/FFFFFFFFFFFF0194 :                     ; 		and.w	#%11110000,d7
(1)  306/FFFFFFFFFFFF0194 :                     ; 		bne.s	.wait_out
(1)  307/FFFFFFFFFFFF0194 :                     ; 	endif
(1)  308/FFFFFFFFFFFF0194 : 4E75                		rts
(1)  309/FFFFFFFFFFFF0196 :                     
(1)  310/FFFFFFFFFFFF0196 :                     ; ============================================================
(1)  311/FFFFFFFFFFFF0196 :                     ; --------------------------------------------------------
(1)  312/FFFFFFFFFFFF0196 :                     ; gemaTest
(1)  313/FFFFFFFFFFFF0196 :                     ;
(1)  314/FFFFFFFFFFFF0196 :                     ; For TESTING only.
(1)  315/FFFFFFFFFFFF0196 :                     ; --------------------------------------------------------
(1)  316/FFFFFFFFFFFF0196 :                     
(1)  317/FFFFFFFFFFFF0196 :                     gemaTest:
(1)  318/FFFFFFFFFFFF0196 : 6100 FEEE           		bsr	sndReq_Enter
(1)  319/FFFFFFFFFFFF019A : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  320/FFFFFFFFFFFF019E : 6100 FF32           		bsr	sndReq_scmd
(1)  321/FFFFFFFFFFFF01A2 : 6000 FF18           		bra 	sndReq_Exit
(1)  322/FFFFFFFFFFFF01A6 :                     
(1)  323/FFFFFFFFFFFF01A6 :                     ; --------------------------------------------------------
(1)  324/FFFFFFFFFFFF01A6 :                     ; gemaPlayTrack
(1)  325/FFFFFFFFFFFF01A6 :                     ;
(1)  326/FFFFFFFFFFFF01A6 :                     ; Play a track by number
(1)  327/FFFFFFFFFFFF01A6 :                     ;
(1)  328/FFFFFFFFFFFF01A6 :                     ; d0.b - Track number
(1)  329/FFFFFFFFFFFF01A6 :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF01A6 :                     
(1)  331/FFFFFFFFFFFF01A6 :                     gemaPlayTrack:
(1)  332/FFFFFFFFFFFF01A6 : 6100 FEDE           		bsr	sndReq_Enter
(1)  333/FFFFFFFFFFFF01AA : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  334/FFFFFFFFFFFF01AE : 6100 FF22           		bsr	sndReq_scmd
(1)  335/FFFFFFFFFFFF01B2 : 1E00                		move.b	d0,d7
(1)  336/FFFFFFFFFFFF01B4 : 6100 FF36           		bsr	sndReq_sbyte
(1)  337/FFFFFFFFFFFF01B8 : 7E00                		moveq	#0,d7
(1)  338/FFFFFFFFFFFF01BA : 6100 FF30           		bsr	sndReq_sbyte
(1)  339/FFFFFFFFFFFF01BE : 6000 FEFC           		bra 	sndReq_Exit
(1)  340/FFFFFFFFFFFF01C2 :                     
(1)  341/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  342/FFFFFFFFFFFF01C2 :                     ; gemaPlayFromBlk
(1)  343/FFFFFFFFFFFF01C2 :                     ;
(1)  344/FFFFFFFFFFFF01C2 :                     ; Play a track by number
(1)  345/FFFFFFFFFFFF01C2 :                     ;
(1)  346/FFFFFFFFFFFF01C2 :                     ; d0.b - Track number
(1)  347/FFFFFFFFFFFF01C2 :                     ; d1.b - Block number
(1)  348/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  349/FFFFFFFFFFFF01C2 :                     
(1)  350/FFFFFFFFFFFF01C2 :                     gemaPlayFromBlk:
(1)  351/FFFFFFFFFFFF01C2 : 6100 FEC2           		bsr	sndReq_Enter
(1)  352/FFFFFFFFFFFF01C6 : 3E3C 0001           		move.w	#$01,d7		; Command $04
(1)  353/FFFFFFFFFFFF01CA : 6100 FF06           		bsr	sndReq_scmd
(1)  354/FFFFFFFFFFFF01CE : 1E00                		move.b	d0,d7
(1)  355/FFFFFFFFFFFF01D0 : 6100 FF1A           		bsr	sndReq_sbyte
(1)  356/FFFFFFFFFFFF01D4 : 1E01                		move.b	d1,d7
(1)  357/FFFFFFFFFFFF01D6 : 6100 FF14           		bsr	sndReq_sbyte
(1)  358/FFFFFFFFFFFF01DA : 6000 FEE0           		bra 	sndReq_Exit
(1)  359/FFFFFFFFFFFF01DE :                     
(1)  360/FFFFFFFFFFFF01DE :                     ; --------------------------------------------------------
(1)  361/FFFFFFFFFFFF01DE :                     ; gemaStopTrack
(1)  362/FFFFFFFFFFFF01DE :                     ;
(1)  363/FFFFFFFFFFFF01DE :                     ; Stops a track using that ID
(1)  364/FFFFFFFFFFFF01DE :                     ;
(1)  365/FFFFFFFFFFFF01DE :                     ; d0.b - Track number
(1)  366/FFFFFFFFFFFF01DE :                     ; --------------------------------------------------------
(1)  367/FFFFFFFFFFFF01DE :                     
(1)  368/FFFFFFFFFFFF01DE :                     gemaStopTrack:
(1)  369/FFFFFFFFFFFF01DE : 6100 FEA6           		bsr	sndReq_Enter
(1)  370/FFFFFFFFFFFF01E2 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  371/FFFFFFFFFFFF01E6 : 6100 FEEA           		bsr	sndReq_scmd
(1)  372/FFFFFFFFFFFF01EA : 1E00                		move.b	d0,d7
(1)  373/FFFFFFFFFFFF01EC : 6100 FEFE           		bsr	sndReq_sbyte
(1)  374/FFFFFFFFFFFF01F0 : 6000 FECA           		bra 	sndReq_Exit
(1)  375/FFFFFFFFFFFF01F4 :                     
(1)  376/FFFFFFFFFFFF01F4 :                     ; --------------------------------------------------------
(1)  377/FFFFFFFFFFFF01F4 :                     ; gemaStopAll
(1)  378/FFFFFFFFFFFF01F4 :                     ;
(1)  379/FFFFFFFFFFFF01F4 :                     ; Stop ALL tracks from ALL buffers.
(1)  380/FFFFFFFFFFFF01F4 :                     ;
(1)  381/FFFFFFFFFFFF01F4 :                     ; No arguments.
(1)  382/FFFFFFFFFFFF01F4 :                     ; --------------------------------------------------------
(1)  383/FFFFFFFFFFFF01F4 :                     
(1)  384/FFFFFFFFFFFF01F4 :                     gemaStopAll:
(1)  388/FFFFFFFFFFFF01F4 : 6100 FE90           		bsr	sndReq_Enter
(1)  389/FFFFFFFFFFFF01F8 : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  390/FFFFFFFFFFFF01FC : 6100 FED4           		bsr	sndReq_scmd
(1)  391/FFFFFFFFFFFF0200 : 6000 FEBA           		bra 	sndReq_Exit
(1)  393/FFFFFFFFFFFF0204 :                     
(1)  394/FFFFFFFFFFFF0204 :                     ; --------------------------------------------------------
(1)  395/FFFFFFFFFFFF0204 :                     ; gemaSetBeats
(1)  396/FFFFFFFFFFFF0204 :                     ;
(1)  397/FFFFFFFFFFFF0204 :                     ; Sets global subbeats
(1)  398/FFFFFFFFFFFF0204 :                     ;
(1)  399/FFFFFFFFFFFF0204 :                     ; d0.w - sub-beats
(1)  400/FFFFFFFFFFFF0204 :                     ; --------------------------------------------------------
(1)  401/FFFFFFFFFFFF0204 :                     
(1)  402/FFFFFFFFFFFF0204 :                     gemaSetBeats:
(1)  403/FFFFFFFFFFFF0204 : 6100 FE80           		bsr	sndReq_Enter
(1)  404/FFFFFFFFFFFF0208 : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  405/FFFFFFFFFFFF020C : 6100 FEC4           		bsr	sndReq_scmd
(1)  406/FFFFFFFFFFFF0210 : 3E00                		move.w	d0,d7
(1)  407/FFFFFFFFFFFF0212 : 6100 FED4           		bsr	sndReq_sword
(1)  408/FFFFFFFFFFFF0216 : 6000 FEA4           		bra 	sndReq_Exit
(1)  409/FFFFFFFFFFFF021A :                     
     182/FFFFFFFFFFFF021A :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF021A :                     ; Genesis Video
(1)    4/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF021A :                     
(1)    6/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF021A :                     ; Settings
(1)    9/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF021A :                     
(1)   11/FFFFFFFFFFFF021A : =$10                MAX_MDDMATSK	equ 16		; MAX DMA BLAST entries
(1)   12/FFFFFFFFFFFF021A : =$10                MAX_MDOBJ	equ 16		; Max objects for Genesis
(1)   13/FFFFFFFFFFFF021A : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   14/FFFFFFFFFFFF021A : =$580               varPrintVram	equ $580	; Default location of the PRINT text graphics
(1)   15/FFFFFFFFFFFF021A : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/FFFFFFFFFFFF021A :                     
(1)   17/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF021A :                     ; Variables
(1)   19/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF021A :                     
(1)   21/FFFFFFFFFFFF021A :                     ; VDP Register $80
(1)   22/FFFFFFFFFFFF021A : =$2                 HVStop		equ $02
(1)   23/FFFFFFFFFFFF021A : =$10                HintEnbl	equ $10
(1)   24/FFFFFFFFFFFF021A : =$1                 bitHVStop	equ 1
(1)   25/FFFFFFFFFFFF021A : =$4                 bitHintEnbl	equ 4
(1)   26/FFFFFFFFFFFF021A :                     
(1)   27/FFFFFFFFFFFF021A :                     ; VDP Register $81
(1)   28/FFFFFFFFFFFF021A : =$40                DispEnbl 	equ $40
(1)   29/FFFFFFFFFFFF021A : =$20                VintEnbl 	equ $20
(1)   30/FFFFFFFFFFFF021A : =$10                DmaEnbl		equ $10
(1)   31/FFFFFFFFFFFF021A : =$6                 bitDispEnbl	equ 6
(1)   32/FFFFFFFFFFFF021A : =$5                 bitVintEnbl	equ 5
(1)   33/FFFFFFFFFFFF021A : =$4                 bitDmaEnbl	equ 4
(1)   34/FFFFFFFFFFFF021A : =$3                 bitV30		equ 3
(1)   35/FFFFFFFFFFFF021A :                     
(1)   36/FFFFFFFFFFFF021A :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/FFFFFFFFFFFF021A : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   38/FFFFFFFFFFFF021A : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   39/FFFFFFFFFFFF021A : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   40/FFFFFFFFFFFF021A : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   41/FFFFFFFFFFFF021A : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   42/FFFFFFFFFFFF021A : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/FFFFFFFFFFFF021A : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   44/FFFFFFFFFFFF021A : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   45/FFFFFFFFFFFF021A : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   46/FFFFFFFFFFFF021A : =$0                 bitPal		equ 0
(1)   47/FFFFFFFFFFFF021A :                     
(1)   48/FFFFFFFFFFFF021A :                     ; md_bg_flags
(1)   49/FFFFFFFFFFFF021A : =$0                 bitDrwR		equ 0
(1)   50/FFFFFFFFFFFF021A : =$1                 bitDrwL		equ 1
(1)   51/FFFFFFFFFFFF021A : =$2                 bitDrwD		equ 2
(1)   52/FFFFFFFFFFFF021A : =$3                 bitDrwU		equ 3
(1)   53/FFFFFFFFFFFF021A : =$6                 bitMarsBg	equ 6
(1)   54/FFFFFFFFFFFF021A : =$7                 bitBgOn		equ 7
(1)   55/FFFFFFFFFFFF021A :                     
(1)   56/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)   57/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)   58/FFFFFFFFFFFF021A :                     ; Structs
(1)   59/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)   60/FFFFFFFFFFFF021A :                     
(1)   61/FFFFFFFFFFFF021A :                     ; IN SH2 ORDER
(1)   62/FFFFFFFFFFFF021A :                     ; still works fine on this side.
(1)   63/FFFFFFFFFFFF021A :                     ; md_bg_flags: %EM..UDLR
(1)   64/FFFFFFFFFFFF021A :                     ; UDLR - off-screen update bits
(1)   65/FFFFFFFFFFFF021A :                     ;    M - Map belongs to Genesis or 32X
(1)   66/FFFFFFFFFFFF021A :                     ;    E - Enable this map
(1)   67/FFFFFFFFFFFF021A :                     
(1)   68/FFFFFFFFFFFF021A : (MACRO)             		struct 0
(1)   68/FFFFFFFFFFFF021A : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   68/     AE0 :                                     dephase
(1)   68/     AE0 : =$AE0               GLBL_LASTORG    set *
(1)   68/       0 :                                     phase 0
(1)   69/       0 :                     md_bg_bw	ds.b 1		; Block Width
(1)   70/       1 :                     md_bg_bh	ds.b 1		; Block Height
(1)   71/       2 :                     md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   72/       3 :                     md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   73/       4 :                     md_bg_xset	ds.b 1		; X-counter
(1)   74/       5 :                     md_bg_yset	ds.b 1		; Y-counter
(1)   75/       6 :                     md_bg_movex	ds.b 1		; *** ALIGNMENT, FREE TO USE
(1)   76/       7 :                     md_bg_movey	ds.b 1		; ***
(1)   77/       8 :                     md_bg_w		ds.w 1		; Width in blocks
(1)   78/       A :                     md_bg_h		ds.w 1		; Height in blocks
(1)   79/       C :                     md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   80/       E :                     md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   81/      10 :                     md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   82/      12 :                     md_bg_xinc_r	ds.w 1
(1)   83/      14 :                     md_bg_yinc_u	ds.w 1
(1)   84/      16 :                     md_bg_yinc_d	ds.w 1
(1)   85/      18 :                     md_bg_x_old	ds.w 1		; OLD X position
(1)   86/      1A :                     md_bg_y_old	ds.w 1		; OLD Y position
(1)   87/      1C :                     md_bg_vpos	ds.w 1		; VRAM output for map
(1)   88/      1E :                     md_bg_vram	ds.w 1		; VRAM start for cells
(1)   89/      20 :                     md_bg_low	ds.l 1		; MAIN layout data
(1)   90/      24 :                     md_bg_hi	ds.l 1		; HI layout data
(1)   91/      28 :                     md_bg_blk	ds.l 1		; Block data
(1)   92/      2C :                     md_bg_col	ds.l 1		; Collision data (if needed)
(1)   93/      30 :                     md_bg_x		ds.l 1		; X pos 0000.0000
(1)   94/      34 :                     md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   95/      38 :                     sizeof_mdbg	ds.l 0
(1)   96/      38 : (MACRO)             		endstruct
(1)   96/       0 :                                     !org GLBL_LASTORG
(1)   96/FFFFFFFFFFFF021A :                                     phase GLBL_LASTPC
(1)   97/FFFFFFFFFFFF021A :                     
(1)   98/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)   99/FFFFFFFFFFFF021A :                     ; object struct
(1)  100/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  101/FFFFFFFFFFFF021A :                     
(1)  102/FFFFFFFFFFFF021A : (MACRO)             		struct 0
(1)  102/FFFFFFFFFFFF021A : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)  102/     AE0 :                                     dephase
(1)  102/     AE0 : =$AE0               GLBL_LASTORG    set *
(1)  102/       0 :                                     phase 0
(1)  103/       0 :                     obj_code	ds.l 1		; Object code
(1)  104/       4 :                     obj_size	ds.l 1		; Object size (see below)
(1)  105/       8 :                     obj_x		ds.l 1		; Object X Position
(1)  106/       C :                     obj_y		ds.l 1		; Object Y Position
(1)  107/      10 :                     obj_map		ds.l 1		; Object image settings
(1)  108/      14 :                     obj_vram	ds.w 1		; Object VRAM position (MD-side only)
(1)  109/      16 :                     obj_x_spd	ds.w 1		; Object X Speed
(1)  110/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed
(1)  111/      1A :                     obj_anim_indx	ds.w 1		; Object animation increment (obj_anim + obj_anim_indx)
(1)  112/      1C :                     obj_anim_id	ds.w 1		; Object animation to read (current|saved)
(1)  113/      1E :                     obj_frame	ds.w 1		; Object display frame (MD: $FFFF, MARS: $YY,$XX)
(1)  114/      20 :                     obj_anim_spd	ds.b 1		; Object animation delay
(1)  115/      21 :                     obj_index	ds.b 1		; Object code index
(1)  116/      22 :                     obj_subid	ds.b 1		; Object SubID
(1)  117/      23 :                     obj_set		ds.b 1		; Object settings
(1)  118/      24 :                     obj_status	ds.b 1		; Object custom status
(1)  119/      25 :                     obj_spwnid	ds.b 1		; Object respawn index (this - 1)
(1)  120/      26 :                     obj_ram		ds.b $40	; Object RAM
(1)  121/      66 :                     sizeof_mdobj	ds.l 0
(1)  122/      68 : (MACRO)             		endstruct
(1)  122/       0 :                                     !org GLBL_LASTORG
(1)  122/FFFFFFFFFFFF021A :                                     phase GLBL_LASTPC
(1)  123/FFFFFFFFFFFF021A :                     
(1)  124/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  125/FFFFFFFFFFFF021A :                     ; obj_settings
(1)  126/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  127/FFFFFFFFFFFF021A :                     
(1)  128/FFFFFFFFFFFF021A : =$7                 bitobj_Mars	equ	7	; This object is for 32X side.
(1)  129/FFFFFFFFFFFF021A : =$1                 bitobj_flipV	equ	1	; set to flip Sprite Vertically
(1)  130/FFFFFFFFFFFF021A : =$0                 bitobj_flipH	equ	0	; set to flip Sprite Horizontally
(1)  131/FFFFFFFFFFFF021A :                     
(1)  132/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  133/FFFFFFFFFFFF021A :                     ; obj_set
(1)  134/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  135/FFFFFFFFFFFF021A :                     
(1)  136/FFFFFFFFFFFF021A : =$0                 bitobj_air	equ	0	; set if floating/jumping
(1)  137/FFFFFFFFFFFF021A :                     
(1)  138/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  139/FFFFFFFFFFFF021A :                     ; obj_size
(1)  140/FFFFFFFFFFFF021A :                     ; --------------------------------
(1)  141/FFFFFFFFFFFF021A :                     
(1)  142/FFFFFFFFFFFF021A : =$3                 at_u		equ	3
(1)  143/FFFFFFFFFFFF021A : =$2                 at_d		equ	2
(1)  144/FFFFFFFFFFFF021A : =$1                 at_l		equ	1
(1)  145/FFFFFFFFFFFF021A : =$0                 at_r		equ	0
(1)  146/FFFFFFFFFFFF021A :                     
(1)  147/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)  148/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)  149/FFFFFFFFFFFF021A :                     ; Video RAM
(1)  150/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)  151/FFFFFFFFFFFF021A :                     
(1)  152/FFFFFFFFFFFF021A : (MACRO)             			struct RAM_MdVideo
(1)  152/FFFFFFFFFFFF021A : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)  152/     AE0 :                                     dephase
(1)  152/     AE0 : =$AE0               GLBL_LASTORG    set *
(1)  152/FFFFFFFFFFFF9000 :                                     phase RAM_MDVIDEO
(1)  153/FFFFFFFFFFFF9000 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj
(1)  154/FFFFFFFFFFFF9660 :                     RAM_BgBuffer		ds.b sizeof_mdbg*4	; Map backgrounds, back to front.
(1)  155/FFFFFFFFFFFF9740 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  156/FFFFFFFFFFFF9744 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  157/FFFFFFFFFFFF9B04 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  158/FFFFFFFFFFFF9B54 :                     RAM_ObjDispList		ds.w MAX_MDOBJ		; Objects half-RAM pointers for display (Obj|Extra)
(1)  159/FFFFFFFFFFFF9B74 :                     RAM_SprDrwPz		ds.w 8*70		; External sprite pieces
(1)  160/FFFFFFFFFFFF9FD4 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  161/FFFFFFFFFFFFA434 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  162/FFFFFFFFFFFFA4B4 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  163/FFFFFFFFFFFFA534 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  164/FFFFFFFFFFFFA734 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  165/FFFFFFFFFFFFA814 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  166/FFFFFFFFFFFFA994 :                     RAM_SprDrwCntr		ds.w 1
(1)  167/FFFFFFFFFFFFA996 :                     RAM_SprShowIndx		ds.w 1
(1)  168/FFFFFFFFFFFFA998 :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  169/FFFFFFFFFFFFA99A :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  170/FFFFFFFFFFFFA99C :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  171/FFFFFFFFFFFFA99E :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  172/FFFFFFFFFFFFA9A0 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  173/FFFFFFFFFFFFA9A2 :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  174/FFFFFFFFFFFFA9A4 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  175/FFFFFFFFFFFFA9A6 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  176/FFFFFFFFFFFFA9A8 :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  177/FFFFFFFFFFFFA9AA :                     RAM_FadeMarsDelay	ds.w 1
(1)  178/FFFFFFFFFFFFA9AC :                     RAM_FadeMarsTmr		ds.w 1
(1)  179/FFFFFFFFFFFFA9AE :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  180/FFFFFFFFFFFFA9C6 :                     sizeof_mdvid		ds.l 0
(1)  181/FFFFFFFFFFFFA9C8 : (MACRO)             			endstruct
(1)  181/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  181/FFFFFFFFFFFF021A :                                     phase GLBL_LASTPC
(1)  182/FFFFFFFFFFFF021A :                     
(1)  183/FFFFFFFFFFFF021A : (MACRO)             			erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  184/FFFFFFFFFFFF021A :                     
(1)  185/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)  186/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)  187/FFFFFFFFFFFF021A :                     ; Init Genesis video
(1)  188/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)  189/FFFFFFFFFFFF021A :                     
(1)  190/FFFFFFFFFFFF021A :                     Video_Init:
(1)  191/FFFFFFFFFFFF021A : 4DF8 9000           		lea	(RAM_MdVideo),a6	; Clear our RAM section
(1)  192/FFFFFFFFFFFF021E : 7C00                		moveq	#0,d6
(1)  193/FFFFFFFFFFFF0220 : 3E3C 19C5           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  194/FFFFFFFFFFFF0224 :                     .clrram:
(1)  195/FFFFFFFFFFFF0224 : 1CC6                		move.b	d6,(a6)+
(1)  196/FFFFFFFFFFFF0226 : 51CF FFFC           		dbf	d7,.clrram
(1)  197/FFFFFFFFFFFF022A : 4DFA 0042           		lea	list_vdpregs(pc),a6	; Write "cache'd" VDP registers
(1)  198/FFFFFFFFFFFF022E : 4BF8 A9AE           		lea	(RAM_VdpRegs).w,a5
(1)  199/FFFFFFFFFFFF0232 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  200/FFFFFFFFFFFF0238 : 3C3C 8000           		move.w	#$8000,d6
(1)  201/FFFFFFFFFFFF023C : 3E3C 0012           		move.w	#19-1,d7
(1)  202/FFFFFFFFFFFF0240 :                     .loop:
(1)  203/FFFFFFFFFFFF0240 : 1C1E                		move.b	(a6)+,d6
(1)  204/FFFFFFFFFFFF0242 : 1AC6                		move.b	d6,(a5)+
(1)  205/FFFFFFFFFFFF0244 : 3886                		move.w	d6,(a4)
(1)  206/FFFFFFFFFFFF0246 : DC7C 0100           		add.w	#$100,d6
(1)  207/FFFFFFFFFFFF024A : 51CF FFF4           		dbf	d7,.loop
(1)  208/FFFFFFFFFFFF024E :                     .exit:
(1)  209/FFFFFFFFFFFF024E :                     
(1)  210/FFFFFFFFFFFF024E :                     ; --------------------------------------------------------
(1)  211/FFFFFFFFFFFF024E :                     ; Video_Update
(1)  212/FFFFFFFFFFFF024E :                     ;
(1)  213/FFFFFFFFFFFF024E :                     ; Writes register data stored in RAM to VDP
(1)  214/FFFFFFFFFFFF024E :                     ; from Registers $80 to $90
(1)  215/FFFFFFFFFFFF024E :                     ;
(1)  216/FFFFFFFFFFFF024E :                     ; WINDOW registers $91 and $92 are written
(1)  217/FFFFFFFFFFFF024E :                     ; manually.
(1)  218/FFFFFFFFFFFF024E :                     ;
(1)  219/FFFFFFFFFFFF024E :                     ; Breaks:
(1)  220/FFFFFFFFFFFF024E :                     ; d6-d7,a5-a6
(1)  221/FFFFFFFFFFFF024E :                     ; --------------------------------------------------------
(1)  222/FFFFFFFFFFFF024E :                     
(1)  223/FFFFFFFFFFFF024E :                     Video_Update:
(1)  224/FFFFFFFFFFFF024E : 4DF8 A9AE           		lea	(RAM_VdpRegs).w,a6
(1)  225/FFFFFFFFFFFF0252 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  226/FFFFFFFFFFFF0258 : 3C3C 8000           		move.w	#$8000,d6
(1)  227/FFFFFFFFFFFF025C : 3E3C 0010           		move.w	#17-1,d7
(1)  228/FFFFFFFFFFFF0260 :                     .loop:
(1)  229/FFFFFFFFFFFF0260 : 1C1E                		move.b	(a6)+,d6
(1)  230/FFFFFFFFFFFF0262 : 3A86                		move.w	d6,(a5)
(1)  231/FFFFFFFFFFFF0264 : 0646 0100           		addi.w	#$100,d6
(1)  232/FFFFFFFFFFFF0268 : 51CF FFF6           		dbf	d7,.loop
(1)  233/FFFFFFFFFFFF026C :                     .exit:
(1)  234/FFFFFFFFFFFF026C : 4E75                		rts
(1)  235/FFFFFFFFFFFF026E :                     
(1)  236/FFFFFFFFFFFF026E :                     ; --------------------------------------------------------
(1)  237/FFFFFFFFFFFF026E :                     
(1)  238/FFFFFFFFFFFF026E :                     list_vdpregs:
(1)  239/FFFFFFFFFFFF026E : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  240/FFFFFFFFFFFF026F : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  241/FFFFFFFFFFFF0270 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  242/FFFFFFFFFFFF0271 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  243/FFFFFFFFFFFF0272 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  244/FFFFFFFFFFFF0273 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  245/FFFFFFFFFFFF0274 : 00                  		dc.b $00			; Unused
(1)  246/FFFFFFFFFFFF0275 : 00                  		dc.b $00			; Background color: 0
(1)  247/FFFFFFFFFFFF0276 : 00                  		dc.b $00			; Unused
(1)  248/FFFFFFFFFFFF0277 : 00                  		dc.b $00			; Unused
(1)  249/FFFFFFFFFFFF0278 : 00                  		dc.b $00			; HInt value
(1)  250/FFFFFFFFFFFF0279 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  251/FFFFFFFFFFFF027A : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  252/FFFFFFFFFFFF027B : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  253/FFFFFFFFFFFF027C : 00                  		dc.b $00			; Unused
(1)  254/FFFFFFFFFFFF027D : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  255/FFFFFFFFFFFF027E : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  256/FFFFFFFFFFFF027F : 00                  		dc.b $00
(1)  257/FFFFFFFFFFFF0280 : 00                  		dc.b $00
(1)  258/FFFFFFFFFFFF0281 :                     		align 2
(1)  259/FFFFFFFFFFFF0282 :                     
(1)  260/FFFFFFFFFFFF0282 :                     ; Default PRINT palette
(1)  261/FFFFFFFFFFFF0282 : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  262/FFFFFFFFFFFF0292 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  263/FFFFFFFFFFFF02A2 :                     ASCII_PAL_e:
(1)  264/FFFFFFFFFFFF02A2 :                     		align 2
(1)  265/FFFFFFFFFFFF02A2 :                     
(1)  266/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)  267/FFFFFFFFFFFF02A2 :                     ; Video_Clear
(1)  268/FFFFFFFFFFFF02A2 :                     ;
(1)  269/FFFFFFFFFFFF02A2 :                     ; Clear all video data from VRAM
(1)  270/FFFFFFFFFFFF02A2 :                     ; --------------------------------------------------------
(1)  271/FFFFFFFFFFFF02A2 :                     
(1)  272/FFFFFFFFFFFF02A2 :                     Video_Clear:
(1)  273/FFFFFFFFFFFF02A2 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  274/FFFFFFFFFFFF02A2 :                     ; 		move.w	#0,d1
(1)  275/FFFFFFFFFFFF02A2 :                     ; 		move.w	#$57F*$20,d2
(1)  276/FFFFFFFFFFFF02A2 :                     ; 		bsr	Video_Fill
(1)  277/FFFFFFFFFFFF02A2 :                     
(1)  278/FFFFFFFFFFFF02A2 :                     Video_ClearScreen:
(1)  279/FFFFFFFFFFFF02A2 : 7000                		moveq	#0,d0
(1)  280/FFFFFFFFFFFF02A4 : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  281/FFFFFFFFFFFF02A8 : 1238 A9B0           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  282/FFFFFFFFFFFF02AC : 0241 0038           		andi.w	#%111000,d1
(1)  283/FFFFFFFFFFFF02B0 : E149                		lsl.w	#8,d1
(1)  284/FFFFFFFFFFFF02B2 : E549                		lsl.w	#2,d1
(1)  285/FFFFFFFFFFFF02B4 : 6100 0540           		bsr	Video_Fill
(1)  286/FFFFFFFFFFFF02B8 : 1238 A9B2           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  287/FFFFFFFFFFFF02BC : 0241 0007           		andi.w	#%000111,d1
(1)  288/FFFFFFFFFFFF02C0 : E149                		lsl.w	#8,d1
(1)  289/FFFFFFFFFFFF02C2 : EB49                		lsl.w	#5,d1
(1)  290/FFFFFFFFFFFF02C4 : 6100 0530           		bsr	Video_Fill
(1)  291/FFFFFFFFFFFF02C8 : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  292/FFFFFFFFFFFF02CC : 1238 A9B1           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  293/FFFFFFFFFFFF02D0 : 0241 003E           		andi.w	#%111110,d1
(1)  294/FFFFFFFFFFFF02D4 : E149                		lsl.w	#8,d1
(1)  295/FFFFFFFFFFFF02D6 : E549                		lsl.w	#2,d1
(1)  296/FFFFFFFFFFFF02D8 : 6100 051C           		bsr	Video_Fill
(1)  297/FFFFFFFFFFFF02DC :                     
(1)  298/FFFFFFFFFFFF02DC :                     	; RAM cleanup
(1)  299/FFFFFFFFFFFF02DC : 41F8 9744           		lea	(RAM_HorScroll),a0
(1)  300/FFFFFFFFFFFF02E0 : 3E3C 00EF           		move.w	#240-1,d7
(1)  301/FFFFFFFFFFFF02E4 : 7000                		moveq	#0,d0
(1)  302/FFFFFFFFFFFF02E6 :                     .xnext:
(1)  303/FFFFFFFFFFFF02E6 : 20C0                		move.l	d0,(a0)+
(1)  304/FFFFFFFFFFFF02E8 : 51CF FFFC           		dbf	d7,.xnext
(1)  305/FFFFFFFFFFFF02EC : 41F8 9B04           		lea	(RAM_VerScroll),a0
(1)  306/FFFFFFFFFFFF02F0 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  307/FFFFFFFFFFFF02F4 : 7000                		moveq	#0,d0
(1)  308/FFFFFFFFFFFF02F6 :                     .ynext:
(1)  309/FFFFFFFFFFFF02F6 : 20C0                		move.l	d0,(a0)+
(1)  310/FFFFFFFFFFFF02F8 : 51CF FFFC           		dbf	d7,.ynext
(1)  311/FFFFFFFFFFFF02FC : 41F8 9FD4           		lea	(RAM_Sprites),a0
(1)  312/FFFFFFFFFFFF0300 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  313/FFFFFFFFFFFF0304 : 7000                		moveq	#0,d0
(1)  314/FFFFFFFFFFFF0306 :                     .snext:
(1)  315/FFFFFFFFFFFF0306 : 20C0                		move.l	d0,(a0)+
(1)  316/FFFFFFFFFFFF0308 : 51CF FFFC           		dbf	d7,.snext
(1)  317/FFFFFFFFFFFF030C : 41F8 A434           		lea	(RAM_Palette),a0
(1)  318/FFFFFFFFFFFF0310 : 43F8 A4B4           		lea	(RAM_PaletteFd),a1
(1)  319/FFFFFFFFFFFF0314 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  320/FFFFFFFFFFFF0318 : 7000                		moveq	#0,d0
(1)  321/FFFFFFFFFFFF031A :                     .pnext:
(1)  322/FFFFFFFFFFFF031A : 20C0                		move.l	d0,(a0)+
(1)  323/FFFFFFFFFFFF031C : 22C0                		move.l	d0,(a1)+
(1)  324/FFFFFFFFFFFF031E : 51CF FFFA           		dbf	d7,.pnext
(1)  326/FFFFFFFFFFFF0322 : 41F8 B500           		lea	(RAM_MdDreq+Dreq_Palette),a0
(1)  327/FFFFFFFFFFFF0326 : 43F8 A534           		lea	(RAM_MdMarsPalFd),a1
(1)  328/FFFFFFFFFFFF032A : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  329/FFFFFFFFFFFF032E : 7000                		moveq	#0,d0
(1)  330/FFFFFFFFFFFF0330 :                     .pmnext:
(1)  331/FFFFFFFFFFFF0330 : 20C0                		move.l	d0,(a0)+
(1)  332/FFFFFFFFFFFF0332 : 22C0                		move.l	d0,(a1)+
(1)  333/FFFFFFFFFFFF0334 : 51CF FFFA           		dbf	d7,.pmnext
(1)  335/FFFFFFFFFFFF0338 : 4E75                		rts
(1)  336/FFFFFFFFFFFF033A :                     
(1)  337/FFFFFFFFFFFF033A :                     ; ====================================================================
(1)  338/FFFFFFFFFFFF033A :                     ; ----------------------------------------------------------------
(1)  339/FFFFFFFFFFFF033A :                     ; Generic screen-drawing routines
(1)  340/FFFFFFFFFFFF033A :                     ; ----------------------------------------------------------------
(1)  341/FFFFFFFFFFFF033A :                     
(1)  342/FFFFFFFFFFFF033A :                     ; --------------------------------------------------------
(1)  343/FFFFFFFFFFFF033A :                     ; Video_LoadMap
(1)  344/FFFFFFFFFFFF033A :                     ;
(1)  345/FFFFFFFFFFFF033A :                     ; Loads map data, in Horizontal order
(1)  346/FFFFFFFFFFFF033A :                     ; Can autodetect layer width, height and
(1)  347/FFFFFFFFFFFF033A :                     ; double interlace mode
(1)  348/FFFFFFFFFFFF033A :                     ;
(1)  349/FFFFFFFFFFFF033A :                     ; Input:
(1)  350/FFFFFFFFFFFF033A :                     ; a0 - Map data
(1)  351/FFFFFFFFFFFF033A :                     ;
(1)  352/FFFFFFFFFFFF033A :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  353/FFFFFFFFFFFF033A :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  354/FFFFFFFFFFFF033A :                     ; d2 | WORD - VRAM
(1)  355/FFFFFFFFFFFF033A :                     ;
(1)  356/FFFFFFFFFFFF033A :                     ; Breaks:
(1)  357/FFFFFFFFFFFF033A :                     ; d4-d7,a6
(1)  358/FFFFFFFFFFFF033A :                     ; --------------------------------------------------------
(1)  359/FFFFFFFFFFFF033A :                     
(1)  360/FFFFFFFFFFFF033A :                     Video_LoadMap:
(1)  361/FFFFFFFFFFFF033A : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  362/FFFFFFFFFFFF0340 : 6100 0222           		bsr	vid_PickLayer
(1)  363/FFFFFFFFFFFF0344 : 3A01                		move.w	d1,d5		; Start here
(1)  364/FFFFFFFFFFFF0346 :                     .yloop:
(1)  365/FFFFFFFFFFFF0346 : 4845                		swap	d5
(1)  366/FFFFFFFFFFFF0348 : 2D44 0004           		move.l	d4,4(a6)
(1)  367/FFFFFFFFFFFF034C : 2E01                		move.l	d1,d7
(1)  368/FFFFFFFFFFFF034E : 4847                		swap	d7
(1)  369/FFFFFFFFFFFF0350 :                     .xloop:
(1)  370/FFFFFFFFFFFF0350 : 3A18                		move.w	(a0)+,d5
(1)  371/FFFFFFFFFFFF0352 : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  372/FFFFFFFFFFFF0356 : 6606                		bne.s	.nonull
(1)  373/FFFFFFFFFFFF0358 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  374/FFFFFFFFFFFF035C : 6002                		bra.s	.cont
(1)  375/FFFFFFFFFFFF035E :                     .nonull:
(1)  376/FFFFFFFFFFFF035E : DA42                		add.w	d2,d5
(1)  377/FFFFFFFFFFFF0360 :                     .cont:
(1)  378/FFFFFFFFFFFF0360 :                     
(1)  379/FFFFFFFFFFFF0360 :                     	; Check for double interlace
(1)  380/FFFFFFFFFFFF0360 : 4847                		swap	d7
(1)  381/FFFFFFFFFFFF0362 : 1E38 A9BA           		move.b	(RAM_VdpRegs+$C).w,d7
(1)  382/FFFFFFFFFFFF0366 : CE7C 0006           		and.w	#%110,d7
(1)  383/FFFFFFFFFFFF036A : BE7C 0006           		cmp.w	#%110,d7
(1)  384/FFFFFFFFFFFF036E : 660E                		bne.s	.nodble
(1)  385/FFFFFFFFFFFF0370 : 3E05                		move.w	d5,d7
(1)  386/FFFFFFFFFFFF0372 : E24F                		lsr.w	#1,d7
(1)  387/FFFFFFFFFFFF0374 : CE7C 07FF           		and.w	#$7FF,d7
(1)  388/FFFFFFFFFFFF0378 : CA7C F800           		and.w	#$F800,d5
(1)  389/FFFFFFFFFFFF037C : 8A47                		or.w	d7,d5
(1)  390/FFFFFFFFFFFF037E :                     .nodble:
(1)  391/FFFFFFFFFFFF037E : 4847                		swap	d7
(1)  392/FFFFFFFFFFFF0380 : 3C85                		move.w	d5,(a6)
(1)  393/FFFFFFFFFFFF0382 : 51CF FFCC           		dbf	d7,.xloop
(1)  394/FFFFFFFFFFFF0386 : D886                		add.l	d6,d4
(1)  395/FFFFFFFFFFFF0388 : 4845                		swap	d5
(1)  396/FFFFFFFFFFFF038A : 51CD FFBA           		dbf	d5,.yloop
(1)  397/FFFFFFFFFFFF038E : 4E75                		rts
(1)  398/FFFFFFFFFFFF0390 :                     
(1)  399/FFFFFFFFFFFF0390 :                     ; --------------------------------------------------------
(1)  400/FFFFFFFFFFFF0390 :                     ; Video_LoadMap_Vert
(1)  401/FFFFFFFFFFFF0390 :                     ;
(1)  402/FFFFFFFFFFFF0390 :                     ; Load map data, Vertical order
(1)  403/FFFFFFFFFFFF0390 :                     ;
(1)  404/FFFFFFFFFFFF0390 :                     ; a0 - Map data
(1)  405/FFFFFFFFFFFF0390 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  406/FFFFFFFFFFFF0390 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  407/FFFFFFFFFFFF0390 :                     ; d2 | WORD - VRAM
(1)  408/FFFFFFFFFFFF0390 :                     
(1)  409/FFFFFFFFFFFF0390 :                     ; Breaks:
(1)  410/FFFFFFFFFFFF0390 :                     ; a4-a5,d4-d7
(1)  411/FFFFFFFFFFFF0390 :                     ; --------------------------------------------------------
(1)  412/FFFFFFFFFFFF0390 :                     
(1)  413/FFFFFFFFFFFF0390 :                     Video_LoadMap_Vert:
(1)  414/FFFFFFFFFFFF0390 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  415/FFFFFFFFFFFF0396 : 6100 01CC           		bsr	vid_PickLayer
(1)  416/FFFFFFFFFFFF039A : 2A01                		move.l	d1,d5		; Start here
(1)  417/FFFFFFFFFFFF039C : 4845                		swap	d5
(1)  418/FFFFFFFFFFFF039E :                     .xloop:
(1)  419/FFFFFFFFFFFF039E : 4845                		swap	d5
(1)  420/FFFFFFFFFFFF03A0 : 2F04                		move.l	d4,-(sp)
(1)  421/FFFFFFFFFFFF03A2 : 3E01                		move.w	d1,d7
(1)  422/FFFFFFFFFFFF03A4 : 0838 0002 A9BA      		btst	#2,(RAM_VdpRegs+$C).w
(1)  423/FFFFFFFFFFFF03AA : 6702                		beq.s	.yloop
(1)  424/FFFFFFFFFFFF03AC : E24F                		lsr.w	#1,d7
(1)  425/FFFFFFFFFFFF03AE :                     .yloop:
(1)  426/FFFFFFFFFFFF03AE : 2944 0004           		move.l	d4,4(a4)
(1)  427/FFFFFFFFFFFF03B2 : 3A10                		move.w	(a0),d5
(1)  428/FFFFFFFFFFFF03B4 : BA7C FFFF           		cmp.w	#-1,d5
(1)  429/FFFFFFFFFFFF03B8 : 6606                		bne.s	.nonull
(1)  430/FFFFFFFFFFFF03BA : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  431/FFFFFFFFFFFF03BE : 6002                		bra.s	.cont
(1)  432/FFFFFFFFFFFF03C0 :                     .nonull:
(1)  433/FFFFFFFFFFFF03C0 : DA42                		add.w	d2,d5
(1)  434/FFFFFFFFFFFF03C2 :                     .cont:
(1)  435/FFFFFFFFFFFF03C2 : 4847                		swap	d7
(1)  436/FFFFFFFFFFFF03C4 : D0FC 0002           		adda	#2,a0
(1)  437/FFFFFFFFFFFF03C8 : 0838 0002 A9BA      		btst	#2,(RAM_VdpRegs+$C).w
(1)  438/FFFFFFFFFFFF03CE : 6712                		beq.s	.nodble
(1)  439/FFFFFFFFFFFF03D0 : D0FC 0002           		adda	#2,a0
(1)  440/FFFFFFFFFFFF03D4 : 3E05                		move.w	d5,d7
(1)  441/FFFFFFFFFFFF03D6 : E24F                		lsr.w	#1,d7
(1)  442/FFFFFFFFFFFF03D8 : CE7C 07FF           		and.w	#$7FF,d7
(1)  443/FFFFFFFFFFFF03DC : CA7C F800           		and.w	#$F800,d5
(1)  444/FFFFFFFFFFFF03E0 : 8A47                		or.w	d7,d5
(1)  445/FFFFFFFFFFFF03E2 :                     .nodble:
(1)  446/FFFFFFFFFFFF03E2 : 4847                		swap	d7
(1)  447/FFFFFFFFFFFF03E4 : 3885                		move.w	d5,(a4)
(1)  448/FFFFFFFFFFFF03E6 : D886                		add.l	d6,d4
(1)  449/FFFFFFFFFFFF03E8 : 51CF FFC4           		dbf	d7,.yloop
(1)  450/FFFFFFFFFFFF03EC :                     .outdbl:
(1)  451/FFFFFFFFFFFF03EC : 281F                		move.l	(sp)+,d4
(1)  452/FFFFFFFFFFFF03EE : D8BC 0002 0000      		add.l	#$20000,d4
(1)  453/FFFFFFFFFFFF03F4 : 4845                		swap	d5
(1)  454/FFFFFFFFFFFF03F6 : 51CD FFA6           		dbf	d5,.xloop
(1)  455/FFFFFFFFFFFF03FA : 4E75                		rts
(1)  456/FFFFFFFFFFFF03FC :                     
(1)  457/FFFFFFFFFFFF03FC :                     ; ====================================================================
(1)  458/FFFFFFFFFFFF03FC :                     ; ----------------------------------------------------------------
(1)  459/FFFFFFFFFFFF03FC :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  460/FFFFFFFFFFFF03FC :                     ; ----------------------------------------------------------------
(1)  461/FFFFFFFFFFFF03FC :                     
(1)  462/FFFFFFFFFFFF03FC :                     ; --------------------------------------------------------
(1)  463/FFFFFFFFFFFF03FC :                     ; Video_PrintInit
(1)  464/FFFFFFFFFFFF03FC :                     ;
(1)  465/FFFFFFFFFFFF03FC :                     ; Initializes the default Graphics and Palette
(1)  466/FFFFFFFFFFFF03FC :                     ; for the font.
(1)  467/FFFFFFFFFFFF03FC :                     ;
(1)  468/FFFFFFFFFFFF03FC :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  469/FFFFFFFFFFFF03FC :                     ; *** MAKE SURE SH2 IS NOT READING ROM DATA ***
(1)  470/FFFFFFFFFFFF03FC :                     ; --------------------------------------------------------
(1)  471/FFFFFFFFFFFF03FC :                     
(1)  472/FFFFFFFFFFFF03FC :                     Video_PrintInit:
(1)  473/FFFFFFFFFFFF03FC : 203C 0003 0000      		move.l	#ASCII_FONT,d0
(1)  474/FFFFFFFFFFFF0402 : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1)  475/FFFFFFFFFFFF0406 : 343C 0C00           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  476/FFFFFFFFFFFF040A : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  477/FFFFFFFFFFFF040E : 0443 0020           		subi.w	#$20,d3
(1)  478/FFFFFFFFFFFF0412 : 31C3 A99C           		move.w	d3,(RAM_VidPrntVram).w
(1)  479/FFFFFFFFFFFF0416 : 6100 04D8           		bsr	Video_LoadArt
(1)  480/FFFFFFFFFFFF041A :                     Video_PrintPal:
(1)  481/FFFFFFFFFFFF041A : 41FA FE66           		lea	ASCII_PAL(pc),a0
(1)  482/FFFFFFFFFFFF041E : 7030                		moveq	#(varPrintPal<<4),d0
(1)  483/FFFFFFFFFFFF0420 : 323C 000F           		move.w	#$F,d1
(1)  484/FFFFFFFFFFFF0424 : 6100 01F0           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  485/FFFFFFFFFFFF0428 : 6000 01E2           		bra	Video_FadePal
(1)  486/FFFFFFFFFFFF042C :                     
(1)  487/FFFFFFFFFFFF042C :                     ; --------------------------------------------------------
(1)  488/FFFFFFFFFFFF042C :                     ; Video_Print
(1)  489/FFFFFFFFFFFF042C :                     ;
(1)  490/FFFFFFFFFFFF042C :                     ; Prints string to layer
(1)  491/FFFFFFFFFFFF042C :                     ; requires ASCII font
(1)  492/FFFFFFFFFFFF042C :                     ;
(1)  493/FFFFFFFFFFFF042C :                     ; a0 | DATA - String data w/special characters +
(1)  494/FFFFFFFFFFFF042C :                     ;             list of RAM locations to read
(1)  495/FFFFFFFFFFFF042C :                     ; d0 | LONG - Print location on-screen:
(1)  496/FFFFFFFFFFFF042C :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  497/FFFFFFFFFFFF042C :                     ;
(1)  498/FFFFFFFFFFFF042C :                     ; Special characters:
(1)  499/FFFFFFFFFFFF042C :                     ; "//b" - Shows BYTE value
(1)  500/FFFFFFFFFFFF042C :                     ; "//w" - Shows WORD value
(1)  501/FFFFFFFFFFFF042C :                     ; "//l" - Shows LONG value
(1)  502/FFFFFFFFFFFF042C :                     ;   $0A - Next line
(1)  503/FFFFFFFFFFFF042C :                     ;   $00 - End of line
(1)  504/FFFFFFFFFFFF042C :                     ;
(1)  505/FFFFFFFFFFFF042C :                     ; After $00, put your RAM addresses in LONGS
(1)  506/FFFFFFFFFFFF042C :                     ; don't forget to put align 2 at the end.
(1)  507/FFFFFFFFFFFF042C :                     ;
(1)  508/FFFFFFFFFFFF042C :                     ; CALL Video_PrintInit FIRST before using this.
(1)  509/FFFFFFFFFFFF042C :                     ;
(1)  510/FFFFFFFFFFFF042C :                     ; Breaks:
(1)  511/FFFFFFFFFFFF042C :                     ; d4-d7,a4-a6
(1)  512/FFFFFFFFFFFF042C :                     ; --------------------------------------------------------
(1)  513/FFFFFFFFFFFF042C :                     
(1)  514/FFFFFFFFFFFF042C :                     Video_Print:
(1)  515/FFFFFFFFFFFF042C :                     ; 		movem.l	d3-d7,-(sp)
(1)  516/FFFFFFFFFFFF042C :                     ; 		movem.l	a4-a6,-(sp)
(1)  517/FFFFFFFFFFFF042C :                     
(1)  518/FFFFFFFFFFFF042C : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  519/FFFFFFFFFFFF0432 : 6100 0130           		bsr	vid_PickLayer
(1)  520/FFFFFFFFFFFF0436 : 4BF8 A814           		lea	(RAM_VidPrntList),a5
(1)  521/FFFFFFFFFFFF043A :                     .newjump:
(1)  522/FFFFFFFFFFFF043A : 2D44 0004           		move.l	d4,4(a6)
(1)  523/FFFFFFFFFFFF043E : 2A04                		move.l	d4,d5
(1)  524/FFFFFFFFFFFF0440 :                     .loop:
(1)  525/FFFFFFFFFFFF0440 : 1E18                		move.b	(a0)+,d7
(1)  526/FFFFFFFFFFFF0442 : 6772                		beq	.exit
(1)  527/FFFFFFFFFFFF0444 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  528/FFFFFFFFFFFF0448 : 6718                		beq.s	.next
(1)  529/FFFFFFFFFFFF044A : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  530/FFFFFFFFFFFF044E : 6716                		beq.s	.special
(1)  531/FFFFFFFFFFFF0450 : 0247 00FF           		andi.w	#$FF,d7
(1)  532/FFFFFFFFFFFF0454 :                     .puttext:
(1)  533/FFFFFFFFFFFF0454 : DE78 A99C           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  534/FFFFFFFFFFFF0458 : 3C87                		move.w	d7,(a6)
(1)  535/FFFFFFFFFFFF045A : DABC 0002 0000      		add.l	#$20000,d5
(1)  536/FFFFFFFFFFFF0460 : 60DE                		bra.s	.loop
(1)  537/FFFFFFFFFFFF0462 :                     ; Next line
(1)  538/FFFFFFFFFFFF0462 :                     .next:
(1)  539/FFFFFFFFFFFF0462 : D886                		add.l	d6,d4
(1)  540/FFFFFFFFFFFF0464 : 60D4                		bra.s	.newjump
(1)  541/FFFFFFFFFFFF0466 :                     
(1)  542/FFFFFFFFFFFF0466 :                     ; Specials
(1)  543/FFFFFFFFFFFF0466 :                     .special:
(1)  544/FFFFFFFFFFFF0466 : 1E18                		move.b	(a0)+,d7
(1)  545/FFFFFFFFFFFF0468 : 0C07 0062           		cmpi.b	#"b",d7
(1)  546/FFFFFFFFFFFF046C : 6712                		beq.s	.isbyte
(1)  547/FFFFFFFFFFFF046E : 0C07 0077           		cmpi.b	#"w",d7
(1)  548/FFFFFFFFFFFF0472 : 671E                		beq.s	.isword
(1)  549/FFFFFFFFFFFF0474 : 0C07 006C           		cmpi.b	#"l",d7
(1)  550/FFFFFFFFFFFF0478 : 672A                		beq.s	.islong
(1)  551/FFFFFFFFFFFF047A : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  552/FFFFFFFFFFFF047E : 60D4                		bra.s	.puttext
(1)  553/FFFFFFFFFFFF0480 :                     
(1)  554/FFFFFFFFFFFF0480 :                     	; TEMPORAL VALUES
(1)  555/FFFFFFFFFFFF0480 :                     .isbyte:
(1)  556/FFFFFFFFFFFF0480 : 2AC5                		move.l	d5,(a5)+
(1)  557/FFFFFFFFFFFF0482 : 3AFC 0001           		move.w	#1,(a5)+
(1)  558/FFFFFFFFFFFF0486 : DABC 0004 0000      		add.l	#$40000,d5
(1)  559/FFFFFFFFFFFF048C : 2D45 0004           		move.l	d5,4(a6)
(1)  560/FFFFFFFFFFFF0490 : 60AE                		bra	.loop
(1)  561/FFFFFFFFFFFF0492 :                     .isword:
(1)  562/FFFFFFFFFFFF0492 : 2AC5                		move.l	d5,(a5)+
(1)  563/FFFFFFFFFFFF0494 : 3AFC 0002           		move.w	#2,(a5)+
(1)  564/FFFFFFFFFFFF0498 : DABC 0008 0000      		add.l	#$80000,d5
(1)  565/FFFFFFFFFFFF049E : 2D45 0004           		move.l	d5,4(a6)
(1)  566/FFFFFFFFFFFF04A2 : 609C                		bra	.loop
(1)  567/FFFFFFFFFFFF04A4 :                     .islong:
(1)  568/FFFFFFFFFFFF04A4 : 2AC5                		move.l	d5,(a5)+
(1)  569/FFFFFFFFFFFF04A6 : 3AFC 0003           		move.w	#3,(a5)+
(1)  570/FFFFFFFFFFFF04AA : DABC 0010 0000      		add.l	#$100000,d5
(1)  571/FFFFFFFFFFFF04B0 : 2D45 0004           		move.l	d5,4(a6)
(1)  572/FFFFFFFFFFFF04B4 : 608A                		bra	.loop
(1)  573/FFFFFFFFFFFF04B6 :                     .exit:
(1)  574/FFFFFFFFFFFF04B6 :                     
(1)  575/FFFFFFFFFFFF04B6 :                     	; ----------------------------------------
(1)  576/FFFFFFFFFFFF04B6 :                     	; Print values
(1)  577/FFFFFFFFFFFF04B6 :                     	;
(1)  578/FFFFFFFFFFFF04B6 :                     	; vvvv vvvv tttt
(1)  579/FFFFFFFFFFFF04B6 :                     	; v - vdp pos
(1)  580/FFFFFFFFFFFF04B6 :                     	; t - value type
(1)  581/FFFFFFFFFFFF04B6 :                     	; ----------------------------------------
(1)  582/FFFFFFFFFFFF04B6 :                     
(1)  583/FFFFFFFFFFFF04B6 :                     	; reading byte by byte because longs doesn't get
(1)  584/FFFFFFFFFFFF04B6 :                     	; aligned after $00...
(1)  585/FFFFFFFFFFFF04B6 :                     
(1)  586/FFFFFFFFFFFF04B6 : 7800                		moveq	#0,d4
(1)  587/FFFFFFFFFFFF04B8 : 7A00                		moveq	#0,d5
(1)  588/FFFFFFFFFFFF04BA : 7C00                		moveq	#0,d6
(1)  589/FFFFFFFFFFFF04BC : 4BF8 A814           		lea	(RAM_VidPrntList),a5
(1)  590/FFFFFFFFFFFF04C0 :                     .nextv:
(1)  591/FFFFFFFFFFFF04C0 : 4A95                		tst.l	(a5)
(1)  592/FFFFFFFFFFFF04C2 : 6700 009E           		beq	.nothing
(1)  593/FFFFFFFFFFFF04C6 :                     
(1)  594/FFFFFFFFFFFF04C6 :                     	; grab value
(1)  595/FFFFFFFFFFFF04C6 : 7800                		moveq	#0,d4
(1)  596/FFFFFFFFFFFF04C8 : 1818                		move.b	(a0)+,d4
(1)  597/FFFFFFFFFFFF04CA : E19C                		rol.l	#8,d4
(1)  598/FFFFFFFFFFFF04CC : 1818                		move.b	(a0)+,d4
(1)  599/FFFFFFFFFFFF04CE : E19C                		rol.l	#8,d4
(1)  600/FFFFFFFFFFFF04D0 : 1818                		move.b	(a0)+,d4
(1)  601/FFFFFFFFFFFF04D2 : E19C                		rol.l	#8,d4
(1)  602/FFFFFFFFFFFF04D4 : 1818                		move.b	(a0)+,d4
(1)  603/FFFFFFFFFFFF04D6 : 2844                		movea.l	d4,a4
(1)  604/FFFFFFFFFFFF04D8 : 7800                		moveq	#0,d4
(1)  605/FFFFFFFFFFFF04DA :                     
(1)  606/FFFFFFFFFFFF04DA :                     	; get value
(1)  607/FFFFFFFFFFFF04DA : 3C2D 0004           		move.w	4(a5),d6
(1)  608/FFFFFFFFFFFF04DE : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  609/FFFFFFFFFFFF04E2 : 660E                		bne.s	.vbyte
(1)  610/FFFFFFFFFFFF04E4 : 1814                		move.b	(a4),d4
(1)  611/FFFFFFFFFFFF04E6 : 2D55 0004           		move.l	(a5),4(a6)
(1)  612/FFFFFFFFFFFF04EA : E91C                		rol.b	#4,d4
(1)  613/FFFFFFFFFFFF04EC : 6158                		bsr.s	.donibl
(1)  614/FFFFFFFFFFFF04EE : E91C                		rol.b	#4,d4
(1)  615/FFFFFFFFFFFF04F0 : 6154                		bsr.s	.donibl
(1)  616/FFFFFFFFFFFF04F2 :                     .vbyte:
(1)  617/FFFFFFFFFFFF04F2 : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  618/FFFFFFFFFFFF04F6 : 661C                		bne.s	.vword
(1)  619/FFFFFFFFFFFF04F8 : 1814                		move.b	(a4),d4
(1)  620/FFFFFFFFFFFF04FA : E15C                		rol.w	#8,d4
(1)  621/FFFFFFFFFFFF04FC : 182C 0001           		move.b	1(a4),d4
(1)  622/FFFFFFFFFFFF0500 : 2D55 0004           		move.l	(a5),4(a6)
(1)  623/FFFFFFFFFFFF0504 : E95C                		rol.w	#4,d4
(1)  624/FFFFFFFFFFFF0506 : 613E                		bsr.s	.donibl
(1)  625/FFFFFFFFFFFF0508 : E95C                		rol.w	#4,d4
(1)  626/FFFFFFFFFFFF050A : 613A                		bsr.s	.donibl
(1)  627/FFFFFFFFFFFF050C : E95C                		rol.w	#4,d4
(1)  628/FFFFFFFFFFFF050E : 6136                		bsr.s	.donibl
(1)  629/FFFFFFFFFFFF0510 : E95C                		rol.w	#4,d4
(1)  630/FFFFFFFFFFFF0512 : 6132                		bsr.s	.donibl
(1)  631/FFFFFFFFFFFF0514 :                     .vword:
(1)  632/FFFFFFFFFFFF0514 :                     
(1)  633/FFFFFFFFFFFF0514 :                     	; TODO: might break on negative values
(1)  634/FFFFFFFFFFFF0514 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  635/FFFFFFFFFFFF0518 : 6624                		bne.s	.vlong
(1)  636/FFFFFFFFFFFF051A : 1814                		move.b	(a4),d4
(1)  637/FFFFFFFFFFFF051C : E19C                		rol.l	#8,d4
(1)  638/FFFFFFFFFFFF051E : 182C 0001           		move.b	1(a4),d4
(1)  639/FFFFFFFFFFFF0522 : E19C                		rol.l	#8,d4
(1)  640/FFFFFFFFFFFF0524 : 182C 0002           		move.b	2(a4),d4
(1)  641/FFFFFFFFFFFF0528 : E19C                		rol.l	#8,d4
(1)  642/FFFFFFFFFFFF052A : 182C 0003           		move.b	3(a4),d4
(1)  643/FFFFFFFFFFFF052E : 2D55 0004           		move.l	(a5),4(a6)
(1)  644/FFFFFFFFFFFF0532 : 3C3C 0007           		move.w	#7,d6
(1)  645/FFFFFFFFFFFF0536 : E99C                .lngloop:	rol.l	#4,d4
(1)  646/FFFFFFFFFFFF0538 : 610C                		bsr.s	.donibl
(1)  647/FFFFFFFFFFFF053A : 51CE FFFA           		dbf	d6,.lngloop
(1)  648/FFFFFFFFFFFF053E :                     .vlong:
(1)  649/FFFFFFFFFFFF053E : 429D                		clr.l	(a5)+
(1)  650/FFFFFFFFFFFF0540 : 425D                		clr.w	(a5)+
(1)  651/FFFFFFFFFFFF0542 : 6000 FF7C           		bra	.nextv
(1)  652/FFFFFFFFFFFF0546 :                     
(1)  653/FFFFFFFFFFFF0546 :                     ; make nibble byte
(1)  654/FFFFFFFFFFFF0546 :                     .donibl:
(1)  655/FFFFFFFFFFFF0546 : 3A04                		move.w	d4,d5
(1)  656/FFFFFFFFFFFF0548 : 0245 000F           		andi.w	#%1111,d5
(1)  657/FFFFFFFFFFFF054C : BA3C 000A           		cmp.b	#$A,d5
(1)  658/FFFFFFFFFFFF0550 : 6D04                		blt.s	.lowr
(1)  659/FFFFFFFFFFFF0552 : DA3C 0007           		add.b	#7,d5
(1)  660/FFFFFFFFFFFF0556 :                     .lowr:
(1)  661/FFFFFFFFFFFF0556 : DA7C 0030           		add.w	#"0",d5
(1)  662/FFFFFFFFFFFF055A : DA78 A99C           		add.w	(RAM_VidPrntVram),d5
(1)  663/FFFFFFFFFFFF055E : 3C85                		move.w	d5,(a6)
(1)  664/FFFFFFFFFFFF0560 : 4E75                		rts
(1)  665/FFFFFFFFFFFF0562 :                     ; exit
(1)  666/FFFFFFFFFFFF0562 :                     .nothing:
(1)  667/FFFFFFFFFFFF0562 :                     ; 		movem.l	(sp)+,a4-a6
(1)  668/FFFFFFFFFFFF0562 :                     ; 		movem.l	(sp)+,d3-d7
(1)  669/FFFFFFFFFFFF0562 : 4E75                		rts
(1)  670/FFFFFFFFFFFF0564 :                     
(1)  671/FFFFFFFFFFFF0564 :                     ; --------------------------------------------------------
(1)  672/FFFFFFFFFFFF0564 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  673/FFFFFFFFFFFF0564 :                     ; --------------------------------------------------------
(1)  674/FFFFFFFFFFFF0564 :                     
(1)  675/FFFFFFFFFFFF0564 :                     vid_PickLayer:
(1)  676/FFFFFFFFFFFF0564 : 2C00                		move.l	d0,d6			; Pick layer
(1)  677/FFFFFFFFFFFF0566 : 4846                		swap	d6
(1)  678/FFFFFFFFFFFF0568 : 0806 0000           		btst	#0,d6
(1)  679/FFFFFFFFFFFF056C : 671C                		beq.s	.plawnd
(1)  680/FFFFFFFFFFFF056E : 1838 A9B2           		move.b	(RAM_VdpRegs+4).w,d4	; BG
(1)  681/FFFFFFFFFFFF0572 : 3A04                		move.w	d4,d5
(1)  682/FFFFFFFFFFFF0574 : E24D                		lsr.w	#1,d5
(1)  683/FFFFFFFFFFFF0576 : 0245 0003           		andi.w	#%11,d5
(1)  684/FFFFFFFFFFFF057A : 4844                		swap	d4
(1)  685/FFFFFFFFFFFF057C : 3805                		move.w	d5,d4
(1)  686/FFFFFFFFFFFF057E : 4844                		swap	d4
(1)  687/FFFFFFFFFFFF0580 : 0244 0001           		andi.w	#1,d4
(1)  688/FFFFFFFFFFFF0584 : E14C                		lsl.w	#8,d4
(1)  689/FFFFFFFFFFFF0586 : EB4C                		lsl.w	#5,d4
(1)  690/FFFFFFFFFFFF0588 : 6024                		bra.s	.golyr
(1)  691/FFFFFFFFFFFF058A :                     .plawnd:
(1)  692/FFFFFFFFFFFF058A : 1838 A9B0           		move.b	(RAM_VdpRegs+2).w,d4	; FG
(1)  693/FFFFFFFFFFFF058E : 0806 0001           		btst	#1,d6
(1)  694/FFFFFFFFFFFF0592 : 6704                		beq.s	.nowd
(1)  695/FFFFFFFFFFFF0594 : 1838 A9B1           		move.b	(RAM_VdpRegs+3).w,d4	; WINDOW
(1)  696/FFFFFFFFFFFF0598 :                     .nowd:
(1)  697/FFFFFFFFFFFF0598 : 3A04                		move.w	d4,d5
(1)  698/FFFFFFFFFFFF059A : E84D                		lsr.w	#4,d5
(1)  699/FFFFFFFFFFFF059C : 0245 0003           		andi.w	#%11,d5
(1)  700/FFFFFFFFFFFF05A0 : 4844                		swap	d4
(1)  701/FFFFFFFFFFFF05A2 : 3805                		move.w	d5,d4
(1)  702/FFFFFFFFFFFF05A4 : 4844                		swap	d4
(1)  703/FFFFFFFFFFFF05A6 : 0244 000E           		andi.w	#%00001110,d4
(1)  704/FFFFFFFFFFFF05AA : E14C                		lsl.w	#8,d4
(1)  705/FFFFFFFFFFFF05AC : E54C                		lsl.w	#2,d4
(1)  706/FFFFFFFFFFFF05AE :                     .golyr:
(1)  707/FFFFFFFFFFFF05AE : 0044 4000           		ori.w	#$4000,d4
(1)  708/FFFFFFFFFFFF05B2 : 3A00                		move.w	d0,d5			; Y start pos
(1)  709/FFFFFFFFFFFF05B4 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  710/FFFFFFFFFFFF05B8 : ED4D                		lsl.w	#6,d5
(1)  711/FFFFFFFFFFFF05BA : 1C38 A9BE           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  712/FFFFFFFFFFFF05BE : 0246 0003           		andi.w	#%11,d6
(1)  713/FFFFFFFFFFFF05C2 : 670A                		beq.s	.thissz
(1)  714/FFFFFFFFFFFF05C4 : DA45                		add.w	d5,d5			; H64
(1)  715/FFFFFFFFFFFF05C6 : 0246 0002           		andi.w	#%10,d6
(1)  716/FFFFFFFFFFFF05CA : 6702                		beq.s	.thissz
(1)  717/FFFFFFFFFFFF05CC : DA45                		add.w	d5,d5			; H128
(1)  718/FFFFFFFFFFFF05CE :                     .thissz:
(1)  719/FFFFFFFFFFFF05CE : D845                		add.w	d5,d4
(1)  720/FFFFFFFFFFFF05D0 : 3A00                		move.w	d0,d5
(1)  721/FFFFFFFFFFFF05D2 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  722/FFFFFFFFFFFF05D6 : EE4D                		lsr.w	#7,d5
(1)  723/FFFFFFFFFFFF05D8 : D845                		add.w	d5,d4			; X add
(1)  724/FFFFFFFFFFFF05DA : 4844                		swap	d4
(1)  725/FFFFFFFFFFFF05DC : 7C00                		moveq	#0,d6
(1)  726/FFFFFFFFFFFF05DE : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  727/FFFFFFFFFFFF05E2 : 1A38 A9BE           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  728/FFFFFFFFFFFF05E6 : 0245 0003           		andi.w	#%11,d5
(1)  729/FFFFFFFFFFFF05EA : 670A                		beq.s	.thisszj
(1)  730/FFFFFFFFFFFF05EC : DC46                		add.w	d6,d6			; H64
(1)  731/FFFFFFFFFFFF05EE : 0245 0002           		andi.w	#%10,d5
(1)  732/FFFFFFFFFFFF05F2 : 6702                		beq.s	.thisszj
(1)  733/FFFFFFFFFFFF05F4 : DC46                		add.w	d6,d6			; H128
(1)  734/FFFFFFFFFFFF05F6 :                     .thisszj:
(1)  735/FFFFFFFFFFFF05F6 : 4846                		swap	d6
(1)  736/FFFFFFFFFFFF05F8 : 4E75                		rts
(1)  737/FFFFFFFFFFFF05FA :                     
(1)  738/FFFFFFFFFFFF05FA :                     ; ====================================================================
(1)  739/FFFFFFFFFFFF05FA :                     ; ----------------------------------------------------------------
(1)  740/FFFFFFFFFFFF05FA :                     ; Palette fade system, Genesis side
(1)  741/FFFFFFFFFFFF05FA :                     ; ----------------------------------------------------------------
(1)  742/FFFFFFFFFFFF05FA :                     
(1)  743/FFFFFFFFFFFF05FA :                     ; --------------------------------------------------------
(1)  744/FFFFFFFFFFFF05FA :                     ; Video_RunFade
(1)  745/FFFFFFFFFFFF05FA :                     ;
(1)  746/FFFFFFFFFFFF05FA :                     ; Processes palette fading and reports if requests
(1)  747/FFFFFFFFFFFF05FA :                     ; finished on exit.
(1)  748/FFFFFFFFFFFF05FA :                     ;
(1)  749/FFFFFFFFFFFF05FA :                     ; Returns:
(1)  750/FFFFFFFFFFFF05FA :                     ; bne - Still active
(1)  751/FFFFFFFFFFFF05FA :                     ; beq - Finished
(1)  752/FFFFFFFFFFFF05FA :                     ;
(1)  753/FFFFFFFFFFFF05FA :                     ; *** CALL System_WaitFrame FIRST ***
(1)  754/FFFFFFFFFFFF05FA :                     ; --------------------------------------------------------
(1)  755/FFFFFFFFFFFF05FA :                     
(1)  756/FFFFFFFFFFFF05FA :                     Video_RunFade:
(1)  757/FFFFFFFFFFFF05FA : 613E                		bsr	Video_DoPalFade
(1)  758/FFFFFFFFFFFF05FC : 6100 0438           		bsr	Video_MarsPalFade
(1)  759/FFFFFFFFFFFF0600 : 3E38 A9A6           		move.w	(RAM_FadeMarsReq),d7
(1)  760/FFFFFFFFFFFF0604 : 3C38 A99E           		move.w	(RAM_FadeMdReq),d6
(1)  761/FFFFFFFFFFFF0608 : 8E46                		or.w	d6,d7
(1)  762/FFFFFFFFFFFF060A : 4E75                		rts
(1)  763/FFFFFFFFFFFF060C :                     
(1)  764/FFFFFFFFFFFF060C :                     ; --------------------------------------------------------
(1)  765/FFFFFFFFFFFF060C :                     ; Video_LoadPal
(1)  766/FFFFFFFFFFFF060C :                     ;
(1)  767/FFFFFFFFFFFF060C :                     ; Input:
(1)  768/FFFFFFFFFFFF060C :                     ; a0 - Palette data
(1)  769/FFFFFFFFFFFF060C :                     ; d0 - Start position
(1)  770/FFFFFFFFFFFF060C :                     ; d1 - Number of colors
(1)  771/FFFFFFFFFFFF060C :                     ;
(1)  772/FFFFFFFFFFFF060C :                     ; Breaks:
(1)  773/FFFFFFFFFFFF060C :                     ; d5-d7,a6
(1)  774/FFFFFFFFFFFF060C :                     ; --------------------------------------------------------
(1)  775/FFFFFFFFFFFF060C :                     
(1)  776/FFFFFFFFFFFF060C :                     Video_FadePal:
(1)  777/FFFFFFFFFFFF060C : 4DF8 A4B4           		lea	(RAM_PaletteFd),a6
(1)  778/FFFFFFFFFFFF0610 : 4278 A9A4           		clr.w	(RAM_FadeMdTmr).w
(1)  779/FFFFFFFFFFFF0614 : 6004                		bra.s	vidMd_Pal
(1)  780/FFFFFFFFFFFF0616 :                     Video_LoadPal:
(1)  781/FFFFFFFFFFFF0616 : 4DF8 A434           		lea	(RAM_Palette),a6
(1)  782/FFFFFFFFFFFF061A :                     vidMd_Pal:
(1)  783/FFFFFFFFFFFF061A : 2A48                		move.l	a0,a5
(1)  784/FFFFFFFFFFFF061C : 7E00                		moveq	#0,d7
(1)  785/FFFFFFFFFFFF061E : 3E00                		move.w	d0,d7
(1)  786/FFFFFFFFFFFF0620 : DE47                		add.w	d7,d7
(1)  787/FFFFFFFFFFFF0622 : DCC7                		adda	d7,a6
(1)  788/FFFFFFFFFFFF0624 : 3E01                		move.w	d1,d7
(1)  789/FFFFFFFFFFFF0626 : 9E7C 0001           		sub.w	#1,d7
(1)  790/FFFFFFFFFFFF062A : 3C02                		move.w	d2,d6
(1)  791/FFFFFFFFFFFF062C : CC7C 0001           		and.w	#1,d6
(1)  792/FFFFFFFFFFFF0630 : E25E                		ror.w	#1,d6
(1)  793/FFFFFFFFFFFF0632 :                     .loop:
(1)  794/FFFFFFFFFFFF0632 : 3CDD                		move.w	(a5)+,(a6)+
(1)  795/FFFFFFFFFFFF0634 : 51CF FFFC           		dbf	d7,.loop
(1)  796/FFFFFFFFFFFF0638 : 4E75                		rts
(1)  797/FFFFFFFFFFFF063A :                     
(1)  798/FFFFFFFFFFFF063A :                     ; --------------------------------------------------------
(1)  799/FFFFFFFFFFFF063A :                     ; Video_DoPalFade
(1)  800/FFFFFFFFFFFF063A :                     ;
(1)  801/FFFFFFFFFFFF063A :                     ; RAM_ReqFadeMars: (WORD)
(1)  802/FFFFFFFFFFFF063A :                     ; $00 - No task or finished.
(1)  803/FFFFFFFFFFFF063A :                     ; $01 - Fade in
(1)  804/FFFFFFFFFFFF063A :                     ; $02 - Fade out to black
(1)  805/FFFFFFFFFFFF063A :                     ;
(1)  806/FFFFFFFFFFFF063A :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  807/FFFFFFFFFFFF063A :                     ; --------------------------------------------------------
(1)  808/FFFFFFFFFFFF063A :                     
(1)  809/FFFFFFFFFFFF063A :                     Video_DoPalFade:
(1)  810/FFFFFFFFFFFF063A : 0478 0001 A9A4      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  811/FFFFFFFFFFFF0640 : 6A14                		bpl.s	.active
(1)  812/FFFFFFFFFFFF0642 : 31F8 A9A2 A9A4      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  813/FFFFFFFFFFFF0648 : 3E38 A99E           		move.w	(RAM_FadeMdReq).w,d7
(1)  814/FFFFFFFFFFFF064C : DE47                		add.w	d7,d7
(1)  815/FFFFFFFFFFFF064E : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  816/FFFFFFFFFFFF0652 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  817/FFFFFFFFFFFF0656 :                     .active:
(1)  818/FFFFFFFFFFFF0656 : 4E75                		rts
(1)  819/FFFFFFFFFFFF0658 :                     
(1)  820/FFFFFFFFFFFF0658 :                     ; --------------------------------------------
(1)  821/FFFFFFFFFFFF0658 :                     
(1)  822/FFFFFFFFFFFF0658 :                     .fade_list:
(1)  823/FFFFFFFFFFFF0658 : 0006                		dc.w .fade_done-.fade_list
(1)  824/FFFFFFFFFFFF065A : 0008                		dc.w .fade_in-.fade_list
(1)  825/FFFFFFFFFFFF065C : 00AC                		dc.w .fade_out-.fade_list
(1)  826/FFFFFFFFFFFF065E :                     
(1)  827/FFFFFFFFFFFF065E :                     ; --------------------------------------------
(1)  828/FFFFFFFFFFFF065E :                     ; No fade or finished.
(1)  829/FFFFFFFFFFFF065E :                     ; --------------------------------------------
(1)  830/FFFFFFFFFFFF065E :                     
(1)  831/FFFFFFFFFFFF065E :                     .fade_done:
(1)  832/FFFFFFFFFFFF065E : 4E75                		rts
(1)  833/FFFFFFFFFFFF0660 :                     
(1)  834/FFFFFFFFFFFF0660 :                     ; --------------------------------------------
(1)  835/FFFFFFFFFFFF0660 :                     ; Fade in
(1)  836/FFFFFFFFFFFF0660 :                     ; --------------------------------------------
(1)  837/FFFFFFFFFFFF0660 :                     
(1)  838/FFFFFFFFFFFF0660 :                     .fade_in:
(1)  839/FFFFFFFFFFFF0660 : 4DF8 A4B4           		lea	(RAM_PaletteFd),a6
(1)  840/FFFFFFFFFFFF0664 : 4BF8 A434           		lea	(RAM_Palette),a5
(1)  841/FFFFFFFFFFFF0668 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  842/FFFFFFFFFFFF066C : 3238 A9A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  843/FFFFFFFFFFFF0670 : D241                		add.w	d1,d1
(1)  844/FFFFFFFFFFFF0672 : 3C00                		move.w	d0,d6
(1)  845/FFFFFFFFFFFF0674 : 4846                		swap	d6
(1)  846/FFFFFFFFFFFF0676 : 907C 0001           		sub.w	#1,d0
(1)  847/FFFFFFFFFFFF067A :                     .nxt_pal:
(1)  848/FFFFFFFFFFFF067A : 4242                		clr.w	d2		; Reset finished colorbits
(1)  849/FFFFFFFFFFFF067C : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  850/FFFFFFFFFFFF067E : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  851/FFFFFFFFFFFF0680 : 3607                		move.w	d7,d3		; RED
(1)  852/FFFFFFFFFFFF0682 : 3806                		move.w	d6,d4
(1)  853/FFFFFFFFFFFF0684 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  854/FFFFFFFFFFFF0688 : C87C 000E           		and.w	#%0000000000001110,d4
(1)  855/FFFFFFFFFFFF068C : C67C 000E           		and.w	#%0000000000001110,d3
(1)  856/FFFFFFFFFFFF0690 : D841                		add.w	d1,d4
(1)  857/FFFFFFFFFFFF0692 : B843                		cmp.w	d3,d4
(1)  858/FFFFFFFFFFFF0694 : 6506                		bcs.s	.no_red
(1)  859/FFFFFFFFFFFF0696 : 3803                		move.w	d3,d4
(1)  860/FFFFFFFFFFFF0698 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  861/FFFFFFFFFFFF069C :                     .no_red:
(1)  862/FFFFFFFFFFFF069C : 8C44                		or.w	d4,d6
(1)  863/FFFFFFFFFFFF069E : E949                		lsl.w	#4,d1
(1)  864/FFFFFFFFFFFF06A0 : 3607                		move.w	d7,d3		; GREEN
(1)  865/FFFFFFFFFFFF06A2 : 3806                		move.w	d6,d4
(1)  866/FFFFFFFFFFFF06A4 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  867/FFFFFFFFFFFF06A8 : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  868/FFFFFFFFFFFF06AC : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  869/FFFFFFFFFFFF06B0 : D841                		add.w	d1,d4
(1)  870/FFFFFFFFFFFF06B2 : B843                		cmp.w	d3,d4
(1)  871/FFFFFFFFFFFF06B4 : 6506                		bcs.s	.no_grn
(1)  872/FFFFFFFFFFFF06B6 : 3803                		move.w	d3,d4
(1)  873/FFFFFFFFFFFF06B8 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  874/FFFFFFFFFFFF06BC :                     .no_grn:
(1)  875/FFFFFFFFFFFF06BC : 8C44                		or.w	d4,d6
(1)  876/FFFFFFFFFFFF06BE : E949                		lsl.w	#4,d1
(1)  877/FFFFFFFFFFFF06C0 : 3607                		move.w	d7,d3		; BLUE
(1)  878/FFFFFFFFFFFF06C2 : 3806                		move.w	d6,d4
(1)  879/FFFFFFFFFFFF06C4 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  880/FFFFFFFFFFFF06C8 : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  881/FFFFFFFFFFFF06CC : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  882/FFFFFFFFFFFF06D0 : D841                		add.w	d1,d4
(1)  883/FFFFFFFFFFFF06D2 : B843                		cmp.w	d3,d4
(1)  884/FFFFFFFFFFFF06D4 : 6506                		bcs.s	.no_blu
(1)  885/FFFFFFFFFFFF06D6 : 3803                		move.w	d3,d4
(1)  886/FFFFFFFFFFFF06D8 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  887/FFFFFFFFFFFF06DC :                     .no_blu:
(1)  888/FFFFFFFFFFFF06DC : 8C44                		or.w	d4,d6
(1)  889/FFFFFFFFFFFF06DE : E049                		lsr.w	#8,d1
(1)  890/FFFFFFFFFFFF06E0 : 3AC6                		move.w	d6,(a5)+
(1)  891/FFFFFFFFFFFF06E2 : DCFC 0002           		adda	#2,a6
(1)  892/FFFFFFFFFFFF06E6 : B47C 0007           		cmp.w	#%111,d2
(1)  893/FFFFFFFFFFFF06EA : 6608                		bne.s	.no_fnsh
(1)  894/FFFFFFFFFFFF06EC : 4846                		swap	d6
(1)  895/FFFFFFFFFFFF06EE : 9C7C 0001           		sub.w	#1,d6
(1)  896/FFFFFFFFFFFF06F2 : 4846                		swap	d6
(1)  897/FFFFFFFFFFFF06F4 :                     .no_fnsh:
(1)  898/FFFFFFFFFFFF06F4 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  899/FFFFFFFFFFFF06F8 : 4846                		swap	d6
(1)  900/FFFFFFFFFFFF06FA : 4A46                		tst.w	d6
(1)  901/FFFFFFFFFFFF06FC : 6604                		bne.s	.no_move
(1)  902/FFFFFFFFFFFF06FE : 4278 A99E           		clr.w	(RAM_FadeMdReq).w
(1)  903/FFFFFFFFFFFF0702 :                     .no_move:
(1)  904/FFFFFFFFFFFF0702 : 4E75                		rts
(1)  905/FFFFFFFFFFFF0704 :                     
(1)  906/FFFFFFFFFFFF0704 :                     ; --------------------------------------------
(1)  907/FFFFFFFFFFFF0704 :                     ; Fade out
(1)  908/FFFFFFFFFFFF0704 :                     ; --------------------------------------------
(1)  909/FFFFFFFFFFFF0704 :                     
(1)  910/FFFFFFFFFFFF0704 :                     .fade_out:
(1)  911/FFFFFFFFFFFF0704 : 4DF8 A434           		lea	(RAM_Palette),a6
(1)  912/FFFFFFFFFFFF0708 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  913/FFFFFFFFFFFF070C : 3238 A9A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  914/FFFFFFFFFFFF0710 : 3C00                		move.w	d0,d6
(1)  915/FFFFFFFFFFFF0712 : 4846                		swap	d6
(1)  916/FFFFFFFFFFFF0714 : 907C 0001           		sub.w	#1,d0
(1)  917/FFFFFFFFFFFF0718 :                     .nxt_pal_o:
(1)  918/FFFFFFFFFFFF0718 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  919/FFFFFFFFFFFF071A : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  920/FFFFFFFFFFFF071C : 3C07                		move.w	d7,d6
(1)  921/FFFFFFFFFFFF071E : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  922/FFFFFFFFFFFF0722 : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  923/FFFFFFFFFFFF0726 : 9C41                		sub.w	d1,d6
(1)  924/FFFFFFFFFFFF0728 : 6A06                		bpl.s	.no_red_o
(1)  925/FFFFFFFFFFFF072A : 4246                		clr.w	d6
(1)  926/FFFFFFFFFFFF072C : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  927/FFFFFFFFFFFF0730 :                     .no_red_o:
(1)  928/FFFFFFFFFFFF0730 : 8E46                		or.w	d6,d7
(1)  929/FFFFFFFFFFFF0732 : E949                		lsl.w	#4,d1
(1)  930/FFFFFFFFFFFF0734 : 3C07                		move.w	d7,d6
(1)  931/FFFFFFFFFFFF0736 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  932/FFFFFFFFFFFF073A : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  933/FFFFFFFFFFFF073E : 9C41                		sub.w	d1,d6
(1)  934/FFFFFFFFFFFF0740 : 6A06                		bpl.s	.no_grn_o
(1)  935/FFFFFFFFFFFF0742 : 4246                		clr.w	d6
(1)  936/FFFFFFFFFFFF0744 : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  937/FFFFFFFFFFFF0748 :                     .no_grn_o:
(1)  938/FFFFFFFFFFFF0748 : 8E46                		or.w	d6,d7
(1)  939/FFFFFFFFFFFF074A : E949                		lsl.w	#4,d1
(1)  940/FFFFFFFFFFFF074C : 3C07                		move.w	d7,d6
(1)  941/FFFFFFFFFFFF074E : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  942/FFFFFFFFFFFF0752 : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  943/FFFFFFFFFFFF0756 : 9C41                		sub.w	d1,d6
(1)  944/FFFFFFFFFFFF0758 : 6A06                		bpl.s	.no_blu_o
(1)  945/FFFFFFFFFFFF075A : 4246                		clr.w	d6
(1)  946/FFFFFFFFFFFF075C : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  947/FFFFFFFFFFFF0760 :                     .no_blu_o:
(1)  948/FFFFFFFFFFFF0760 : 8E46                		or.w	d6,d7
(1)  949/FFFFFFFFFFFF0762 : E049                		lsr.w	#8,d1
(1)  950/FFFFFFFFFFFF0764 : 3CC7                		move.w	d7,(a6)+
(1)  951/FFFFFFFFFFFF0766 : B47C 0007           		cmp.w	#%111,d2
(1)  952/FFFFFFFFFFFF076A : 6608                		bne.s	.no_fnsh_o
(1)  953/FFFFFFFFFFFF076C : 4846                		swap	d6
(1)  954/FFFFFFFFFFFF076E : 9C7C 0001           		sub.w	#1,d6
(1)  955/FFFFFFFFFFFF0772 : 4846                		swap	d6
(1)  956/FFFFFFFFFFFF0774 :                     .no_fnsh_o:
(1)  957/FFFFFFFFFFFF0774 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  958/FFFFFFFFFFFF0778 : 4846                		swap	d6
(1)  959/FFFFFFFFFFFF077A : 4A46                		tst.w	d6
(1)  960/FFFFFFFFFFFF077C : 6604                		bne.s	.no_move_o
(1)  961/FFFFFFFFFFFF077E : 4278 A99E           		clr.w	(RAM_FadeMdReq).w
(1)  962/FFFFFFFFFFFF0782 :                     .no_move_o:
(1)  963/FFFFFFFFFFFF0782 : 4E75                		rts
(1)  964/FFFFFFFFFFFF0784 :                     
(1)  965/FFFFFFFFFFFF0784 :                     ; ====================================================================
(1)  966/FFFFFFFFFFFF0784 :                     ; --------------------------------------------------------
(1)  967/FFFFFFFFFFFF0784 :                     ; Genesis DMA
(1)  968/FFFFFFFFFFFF0784 :                     ; --------------------------------------------------------
(1)  969/FFFFFFFFFFFF0784 :                     
(1)  970/FFFFFFFFFFFF0784 :                     ; --------------------------------------------------------
(1)  971/FFFFFFFFFFFF0784 :                     ; Video_DmaMkEntry
(1)  972/FFFFFFFFFFFF0784 :                     ;
(1)  973/FFFFFFFFFFFF0784 :                     ; Sets a new DMA transfer task to the BLAST list
(1)  974/FFFFFFFFFFFF0784 :                     ;
(1)  975/FFFFFFFFFFFF0784 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  976/FFFFFFFFFFFF0784 :                     ;
(1)  977/FFFFFFFFFFFF0784 :                     ; d0 | LONG - Art data
(1)  978/FFFFFFFFFFFF0784 :                     ; d1 | WORD - VRAM location
(1)  979/FFFFFFFFFFFF0784 :                     ; d2 | WORD - Size
(1)  980/FFFFFFFFFFFF0784 :                     ;
(1)  981/FFFFFFFFFFFF0784 :                     ; Breaks:
(1)  982/FFFFFFFFFFFF0784 :                     ; d6-d7,a6
(1)  983/FFFFFFFFFFFF0784 :                     ; --------------------------------------------------------
(1)  984/FFFFFFFFFFFF0784 :                     
(1)  985/FFFFFFFFFFFF0784 :                     Video_DmaMkEntry:
(1)  986/FFFFFFFFFFFF0784 : 31FC 0001 A99A      		move.w	#1,(RAM_VdpDmaMod).w
(1)  987/FFFFFFFFFFFF078A : 4DF8 A734           		lea	(RAM_VdpDmaList).w,a6
(1)  988/FFFFFFFFFFFF078E : 3E38 A998           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  989/FFFFFFFFFFFF0792 : DCC7                		adda	d7,a6
(1)  990/FFFFFFFFFFFF0794 : DE7C 000E           		add.w	#7*2,d7
(1)  991/FFFFFFFFFFFF0798 : 31C7 A998           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  992/FFFFFFFFFFFF079C : 3E02                		move.w	d2,d7			; Length
(1)  993/FFFFFFFFFFFF079E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  994/FFFFFFFFFFFF07A4 : E24F                		lsr.w	#1,d7
(1)  995/FFFFFFFFFFFF07A6 : 1C07                		move.b	d7,d6
(1)  996/FFFFFFFFFFFF07A8 : 4846                		swap	d6
(1)  997/FFFFFFFFFFFF07AA : E04F                		lsr.w	#8,d7
(1)  998/FFFFFFFFFFFF07AC : 1C07                		move.b	d7,d6
(1)  999/FFFFFFFFFFFF07AE : 4846                		swap	d6
(1) 1000/FFFFFFFFFFFF07B0 : 2CC6                		move.l	d6,(a6)+
(1) 1001/FFFFFFFFFFFF07B2 : 2E00                		move.l	d0,d7			; Source
(1) 1002/FFFFFFFFFFFF07B4 : E28F                  		lsr.l	#1,d7
(1) 1003/FFFFFFFFFFFF07B6 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1) 1004/FFFFFFFFFFFF07BC : 1C07                 		move.b	d7,d6
(1) 1005/FFFFFFFFFFFF07BE : E08F                 		lsr.l	#8,d7
(1) 1006/FFFFFFFFFFFF07C0 : 4846                 		swap	d6
(1) 1007/FFFFFFFFFFFF07C2 : 1C07                 		move.b	d7,d6
(1) 1008/FFFFFFFFFFFF07C4 : 2CC6                 		move.l	d6,(a6)+
(1) 1009/FFFFFFFFFFFF07C6 : 3C3C 9700            		move.w	#$9700,d6
(1) 1010/FFFFFFFFFFFF07CA : E08F                 		lsr.l	#8,d7
(1) 1011/FFFFFFFFFFFF07CC : 1C07                 		move.b	d7,d6
(1) 1012/FFFFFFFFFFFF07CE : 3CC6                 		move.w	d6,(a6)+
(1) 1013/FFFFFFFFFFFF07D0 : 3E01                		move.w	d1,d7			; Destination
(1) 1014/FFFFFFFFFFFF07D2 :                     ; 		and.w	#$7FF,d7
(1) 1015/FFFFFFFFFFFF07D2 :                     ; 		lsl.w	#5,d7
(1) 1016/FFFFFFFFFFFF07D2 : 3C07                		move.w	d7,d6
(1) 1017/FFFFFFFFFFFF07D4 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1) 1018/FFFFFFFFFFFF07DA : 0047 4000           		ori.w	#$4000,d7
(1) 1019/FFFFFFFFFFFF07DE : E04E                		lsr.w	#8,d6
(1) 1020/FFFFFFFFFFFF07E0 : EC4E                		lsr.w	#6,d6
(1) 1021/FFFFFFFFFFFF07E2 : 0246 0003           		andi.w	#%11,d6
(1) 1022/FFFFFFFFFFFF07E6 : 0046 0080           		ori.w	#$80,d6
(1) 1023/FFFFFFFFFFFF07EA : 3CC7                		move.w	d7,(a6)+
(1) 1024/FFFFFFFFFFFF07EC : 3CC6                		move.w	d6,(a6)+
(1) 1025/FFFFFFFFFFFF07EE : 31FC 0000 A99A      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1026/FFFFFFFFFFFF07F4 : 4E75                		rts
(1) 1027/FFFFFFFFFFFF07F6 :                     
(1) 1028/FFFFFFFFFFFF07F6 :                     ; --------------------------------------------------------
(1) 1029/FFFFFFFFFFFF07F6 :                     ; Video_Fill
(1) 1030/FFFFFFFFFFFF07F6 :                     ;
(1) 1031/FFFFFFFFFFFF07F6 :                     ; Fill data to VRAM
(1) 1032/FFFFFFFFFFFF07F6 :                     ;
(1) 1033/FFFFFFFFFFFF07F6 :                     ; d0 | WORD - WORD to fill
(1) 1034/FFFFFFFFFFFF07F6 :                     ; d1 | WORD - VRAM position
(1) 1035/FFFFFFFFFFFF07F6 :                     ; d2 | WORD - Size
(1) 1036/FFFFFFFFFFFF07F6 :                     ;
(1) 1037/FFFFFFFFFFFF07F6 :                     ; Breaks:
(1) 1038/FFFFFFFFFFFF07F6 :                     ; d6-d7,a6
(1) 1039/FFFFFFFFFFFF07F6 :                     ; --------------------------------------------------------
(1) 1040/FFFFFFFFFFFF07F6 :                     
(1) 1041/FFFFFFFFFFFF07F6 :                     Video_Fill:
(1) 1042/FFFFFFFFFFFF07F6 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1043/FFFFFFFFFFFF07FC : 3E3C 8100           		move.w	#$8100,d7
(1) 1044/FFFFFFFFFFFF0800 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1045/FFFFFFFFFFFF0804 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1046/FFFFFFFFFFFF0808 : 3C87                		move.w	d7,(a6)
(1) 1047/FFFFFFFFFFFF080A : 3E16                .dmaw:		move.w	(a6),d7
(1) 1048/FFFFFFFFFFFF080C : 0807 0001           		btst	#bitDma,d7
(1) 1049/FFFFFFFFFFFF0810 : 66F8                		bne.s	.dmaw
(1) 1050/FFFFFFFFFFFF0812 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1051/FFFFFFFFFFFF0816 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1052/FFFFFFFFFFFF0818 : 9E7C 0001           		sub.w	#1,d7
(1) 1053/FFFFFFFFFFFF081C : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1054/FFFFFFFFFFFF0822 : 1C07                		move.b	d7,d6
(1) 1055/FFFFFFFFFFFF0824 : 4846                		swap	d6
(1) 1056/FFFFFFFFFFFF0826 : E04F                		lsr.w	#8,d7
(1) 1057/FFFFFFFFFFFF0828 : 1C07                		move.b	d7,d6
(1) 1058/FFFFFFFFFFFF082A : 4846                		swap	d6
(1) 1059/FFFFFFFFFFFF082C : 2C86                		move.l	d6,(a6)
(1) 1060/FFFFFFFFFFFF082E : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1061/FFFFFFFFFFFF0832 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1062/FFFFFFFFFFFF0834 :                     ; 		lsl.w	#5,d7
(1) 1063/FFFFFFFFFFFF0834 : 3C07                		move.w	d7,d6
(1) 1064/FFFFFFFFFFFF0836 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1065/FFFFFFFFFFFF083A : 0046 4000           		ori.w	#$4000,d6
(1) 1066/FFFFFFFFFFFF083E : 4846                		swap	d6
(1) 1067/FFFFFFFFFFFF0840 : 3C07                		move.w	d7,d6
(1) 1068/FFFFFFFFFFFF0842 : E04E                		lsr.w	#8,d6
(1) 1069/FFFFFFFFFFFF0844 : EC4E                		lsr.w	#6,d6
(1) 1070/FFFFFFFFFFFF0846 : 0246 0003           		andi.w	#%11,d6
(1) 1071/FFFFFFFFFFFF084A : 0046 0080           		ori.w	#$80,d6
(1) 1072/FFFFFFFFFFFF084E : 2C86                		move.l	d6,(a6)
(1) 1073/FFFFFFFFFFFF0850 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1074/FFFFFFFFFFFF0854 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1075/FFFFFFFFFFFF0856 : 0807 0001           		btst	#bitDma,d7
(1) 1076/FFFFFFFFFFFF085A : 66F8                		bne.s	.dmawe
(1) 1077/FFFFFFFFFFFF085C : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1078/FFFFFFFFFFFF0860 : 3E3C 8100           		move.w	#$8100,d7
(1) 1079/FFFFFFFFFFFF0864 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1080/FFFFFFFFFFFF0868 : 3C87                		move.w	d7,(a6)
(1) 1081/FFFFFFFFFFFF086A : 4E75                		rts
(1) 1082/FFFFFFFFFFFF086C :                     
(1) 1083/FFFFFFFFFFFF086C :                     ; --------------------------------------------------------
(1) 1084/FFFFFFFFFFFF086C :                     ; Video_Copy
(1) 1085/FFFFFFFFFFFF086C :                     ;
(1) 1086/FFFFFFFFFFFF086C :                     ; Copy VRAM data to another location
(1) 1087/FFFFFFFFFFFF086C :                     ;
(1) 1088/FFFFFFFFFFFF086C :                     ; d0 | WORD - VRAM Source
(1) 1089/FFFFFFFFFFFF086C :                     ; d1 | WORD - VRAM Destination
(1) 1090/FFFFFFFFFFFF086C :                     ; d2 | WORD - Size
(1) 1091/FFFFFFFFFFFF086C :                     ;
(1) 1092/FFFFFFFFFFFF086C :                     ; Breaks:
(1) 1093/FFFFFFFFFFFF086C :                     ; d6-d7,a6
(1) 1094/FFFFFFFFFFFF086C :                     ; --------------------------------------------------------
(1) 1095/FFFFFFFFFFFF086C :                     
(1) 1096/FFFFFFFFFFFF086C :                     ; TODO: test if this works again...
(1) 1097/FFFFFFFFFFFF086C :                     
(1) 1098/FFFFFFFFFFFF086C :                     Video_Copy:
(1) 1099/FFFFFFFFFFFF086C : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1100/FFFFFFFFFFFF0872 : 3E3C 8100           		move.w	#$8100,d7
(1) 1101/FFFFFFFFFFFF0876 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1102/FFFFFFFFFFFF087A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1103/FFFFFFFFFFFF087E : 3C87                		move.w	d7,(a6)
(1) 1104/FFFFFFFFFFFF0880 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1105/FFFFFFFFFFFF0882 : 0807 0001           		btst	#bitDma,d7
(1) 1106/FFFFFFFFFFFF0886 : 66F8                		bne.s	.dmaw
(1) 1107/FFFFFFFFFFFF0888 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1108/FFFFFFFFFFFF088C : 3E02                		move.w	d2,d7			; SIZE
(1) 1109/FFFFFFFFFFFF088E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1110/FFFFFFFFFFFF0894 :                     ; 		lsr.w	#1,d7
(1) 1111/FFFFFFFFFFFF0894 : 1C07                		move.b	d7,d6
(1) 1112/FFFFFFFFFFFF0896 : 4846                		swap	d6
(1) 1113/FFFFFFFFFFFF0898 : E04F                		lsr.w	#8,d7
(1) 1114/FFFFFFFFFFFF089A : 1C07                		move.b	d7,d6
(1) 1115/FFFFFFFFFFFF089C : 4846                		swap	d6
(1) 1116/FFFFFFFFFFFF089E : 2C86                		move.l	d6,(a6)
(1) 1117/FFFFFFFFFFFF08A0 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1118/FFFFFFFFFFFF08A6 : 3E00                		move.w	d0,d7
(1) 1119/FFFFFFFFFFFF08A8 : 1C07                		move.b	d7,d6
(1) 1120/FFFFFFFFFFFF08AA : 4846                		swap	d6
(1) 1121/FFFFFFFFFFFF08AC : E04F                		lsr.w	#8,d7
(1) 1122/FFFFFFFFFFFF08AE : 1C07                		move.b	d7,d6
(1) 1123/FFFFFFFFFFFF08B0 : 2C86                		move.l	d6,(a6)
(1) 1124/FFFFFFFFFFFF08B2 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1125/FFFFFFFFFFFF08B6 : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1126/FFFFFFFFFFFF08B8 :                     ; 		lsl.w	#5,d7
(1) 1127/FFFFFFFFFFFF08B8 : 3C07                		move.w	d7,d6
(1) 1128/FFFFFFFFFFFF08BA : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1129/FFFFFFFFFFFF08BE : 0046 4000           		ori.w	#$4000,d6
(1) 1130/FFFFFFFFFFFF08C2 : 4846                		swap	d6
(1) 1131/FFFFFFFFFFFF08C4 : 3C07                		move.w	d7,d6
(1) 1132/FFFFFFFFFFFF08C6 : E04E                		lsr.w	#8,d6
(1) 1133/FFFFFFFFFFFF08C8 : EC4E                		lsr.w	#6,d6
(1) 1134/FFFFFFFFFFFF08CA : 0246 0003           		andi.w	#%11,d6
(1) 1135/FFFFFFFFFFFF08CE : 0046 00C0           		ori.w	#$C0,d6
(1) 1136/FFFFFFFFFFFF08D2 : 2C86                		move.l	d6,(a6)
(1) 1137/FFFFFFFFFFFF08D4 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1138/FFFFFFFFFFFF08D8 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1139/FFFFFFFFFFFF08DA : 0807 0001           		btst	#bitDma,d7
(1) 1140/FFFFFFFFFFFF08DE : 66F8                		bne.s	.dmawe
(1) 1141/FFFFFFFFFFFF08E0 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1142/FFFFFFFFFFFF08E4 : 3E3C 8100           		move.w	#$8100,d7
(1) 1143/FFFFFFFFFFFF08E8 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1144/FFFFFFFFFFFF08EC : 3C87                		move.w	d7,(a6)
(1) 1145/FFFFFFFFFFFF08EE : 4E75                		rts
(1) 1146/FFFFFFFFFFFF08F0 :                     
(1) 1147/FFFFFFFFFFFF08F0 :                     ; --------------------------------------------------------
(1) 1148/FFFFFFFFFFFF08F0 :                     ; Load graphics using DMA, direct
(1) 1149/FFFFFFFFFFFF08F0 :                     ;
(1) 1150/FFFFFFFFFFFF08F0 :                     ; d0 | LONG - Art data
(1) 1151/FFFFFFFFFFFF08F0 :                     ; d1 | WORD - cell_vram(location)
(1) 1152/FFFFFFFFFFFF08F0 :                     ; d2 | WORD - Size
(1) 1153/FFFFFFFFFFFF08F0 :                     ;
(1) 1154/FFFFFFFFFFFF08F0 :                     ; Breaks:
(1) 1155/FFFFFFFFFFFF08F0 :                     ; d5-d7,a4-a6
(1) 1156/FFFFFFFFFFFF08F0 :                     ;
(1) 1157/FFFFFFFFFFFF08F0 :                     ; *** For faster transfers call this during VBlank ***
(1) 1158/FFFFFFFFFFFF08F0 :                     ; *** MAKE SURE SH2 IS NOT IN THE MIDDLE OF READING
(1) 1159/FFFFFFFFFFFF08F0 :                     ; ROM ***
(1) 1160/FFFFFFFFFFFF08F0 :                     ; --------------------------------------------------------
(1) 1161/FFFFFFFFFFFF08F0 :                     
(1) 1162/FFFFFFFFFFFF08F0 :                     Video_LoadArt:
(1) 1175/FFFFFFFFFFFF08F0 : 40E7                		move.w	sr,-(sp)
(1) 1176/FFFFFFFFFFFF08F2 : 007C 0700           		or	#$700,sr
(1) 1177/FFFFFFFFFFFF08F6 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1178/FFFFFFFFFFFF08FC : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1179/FFFFFFFFFFFF0900 : 1C38 A9AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1180/FFFFFFFFFFFF0904 : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1181/FFFFFFFFFFFF0908 : 3886                		move.w	d6,(a4)
(1) 1182/FFFFFFFFFFFF090A : 3C02                		move.w	d2,d6			; Length
(1) 1183/FFFFFFFFFFFF090C : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1184/FFFFFFFFFFFF0912 : E24E                		lsr.w	#1,d6
(1) 1185/FFFFFFFFFFFF0914 : 1A06                		move.b	d6,d5
(1) 1186/FFFFFFFFFFFF0916 : 4845                		swap	d5
(1) 1187/FFFFFFFFFFFF0918 : E04E                		lsr.w	#8,d6
(1) 1188/FFFFFFFFFFFF091A : 1A06                		move.b	d6,d5
(1) 1189/FFFFFFFFFFFF091C : 4845                		swap	d5
(1) 1190/FFFFFFFFFFFF091E : 2885                		move.l	d5,(a4)
(1) 1191/FFFFFFFFFFFF0920 : 2C00                		move.l	d0,d6			; Source
(1) 1192/FFFFFFFFFFFF0922 : E28E                  		lsr.l	#1,d6
(1) 1193/FFFFFFFFFFFF0924 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1194/FFFFFFFFFFFF092A : 1A06                 		move.b	d6,d5
(1) 1195/FFFFFFFFFFFF092C : E08E                 		lsr.l	#8,d6
(1) 1196/FFFFFFFFFFFF092E : 4845                 		swap	d5
(1) 1197/FFFFFFFFFFFF0930 : 1A06                 		move.b	d6,d5
(1) 1198/FFFFFFFFFFFF0932 : 2885                 		move.l	d5,(a4)
(1) 1199/FFFFFFFFFFFF0934 : 3A3C 9700            		move.w	#$9700,d5
(1) 1200/FFFFFFFFFFFF0938 : E08E                 		lsr.l	#8,d6
(1) 1201/FFFFFFFFFFFF093A : 1A06                 		move.b	d6,d5
(1) 1202/FFFFFFFFFFFF093C : 3885                 		move.w	d5,(a4)
(1) 1203/FFFFFFFFFFFF093E : 3C01                		move.w	d1,d6			; Destination
(1) 1204/FFFFFFFFFFFF0940 : 3A06                		move.w	d6,d5
(1) 1205/FFFFFFFFFFFF0942 : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1206/FFFFFFFFFFFF0948 : 0046 4000           		ori.w	#$4000,d6
(1) 1207/FFFFFFFFFFFF094C : E04D                		lsr.w	#8,d5
(1) 1208/FFFFFFFFFFFF094E : EC4D                		lsr.w	#6,d5
(1) 1209/FFFFFFFFFFFF0950 : 0245 0003           		andi.w	#%11,d5
(1) 1210/FFFFFFFFFFFF0954 : 0045 0080           		ori.w	#$80,d5
(1) 1211/FFFFFFFFFFFF0958 : 2E00                		move.l	d0,d7
(1) 1212/FFFFFFFFFFFF095A : 4847                		swap	d7
(1) 1213/FFFFFFFFFFFF095C : E04F                		lsr.w	#8,d7
(1) 1214/FFFFFFFFFFFF095E : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1215/FFFFFFFFFFFF0962 : 671A                		beq.s	.from_ram
(1) 1216/FFFFFFFFFFFF0964 : 6100 0346           		bsr	System_DmaEnter_ROM
(1) 1217/FFFFFFFFFFFF0968 : 3F05                 		move.w	d5,-(sp)
(1) 1218/FFFFFFFFFFFF096A : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1219/FFFFFFFFFFFF096C : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1220/FFFFFFFFFFFF096E : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1221/FFFFFFFFFFFF0972 : 1C38 A9AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1222/FFFFFFFFFFFF0976 : 3886                		move.w	d6,(a4)
(1) 1223/FFFFFFFFFFFF0978 : 46DF                		move.w	(sp)+,sr
(1) 1240/FFFFFFFFFFFF097A : 6000 0334           		bra	System_DmaExit_ROM
(1) 1241/FFFFFFFFFFFF097E :                     .from_ram:
(1) 1242/FFFFFFFFFFFF097E : 3887                		move.w	d7,(a4)
(1) 1243/FFFFFFFFFFFF0980 : 3F05                 		move.w	d5,-(sp)
(1) 1244/FFFFFFFFFFFF0982 : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1245/FFFFFFFFFFFF0984 : 3E3C 8100           		move.w	#$8100,d7
(1) 1246/FFFFFFFFFFFF0988 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1247/FFFFFFFFFFFF098C : 3887                		move.w	d7,(a4)
(1) 1248/FFFFFFFFFFFF098E : 46DF                		move.w	(sp)+,sr
(1) 1249/FFFFFFFFFFFF0990 : 4E75                		rts
(1) 1250/FFFFFFFFFFFF0992 :                     
(1) 1251/FFFFFFFFFFFF0992 :                     ; --------------------------------------------------------
(1) 1252/FFFFFFFFFFFF0992 :                     ; Video_DmaBlast
(1) 1253/FFFFFFFFFFFF0992 :                     ;
(1) 1254/FFFFFFFFFFFF0992 :                     ; Process DMA tasks from a predefined list in RAM
(1) 1255/FFFFFFFFFFFF0992 :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1256/FFFFFFFFFFFF0992 :                     ;
(1) 1257/FFFFFFFFFFFF0992 :                     ; Breaks:
(1) 1258/FFFFFFFFFFFF0992 :                     ; d5-d7,a3-a4
(1) 1259/FFFFFFFFFFFF0992 :                     ; --------------------------------------------------------
(1) 1260/FFFFFFFFFFFF0992 :                     
(1) 1261/FFFFFFFFFFFF0992 :                     ; Entry format:
(1) 1262/FFFFFFFFFFFF0992 :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1263/FFFFFFFFFFFF0992 :                     ; $40000080 (vdp destination + dma bit)
(1) 1264/FFFFFFFFFFFF0992 :                     
(1) 1265/FFFFFFFFFFFF0992 :                     Video_DmaBlast:
(1) 1266/FFFFFFFFFFFF0992 : 4A78 A99A           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1267/FFFFFFFFFFFF0996 : 6666                		bne.s	.exit
(1) 1268/FFFFFFFFFFFF0998 : 4A78 A998           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1269/FFFFFFFFFFFF099C : 6760                		beq.s	.exit
(1) 1270/FFFFFFFFFFFF099E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1271/FFFFFFFFFFFF09A4 : 47F8 A734           		lea	(RAM_VdpDmaList).w,a3
(1) 1272/FFFFFFFFFFFF09A8 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1273/FFFFFFFFFFFF09AC : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1274/FFFFFFFFFFFF09B0 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1275/FFFFFFFFFFFF09B4 : 3887                		move.w	d7,(a4)
(1) 1276/FFFFFFFFFFFF09B6 : 6100 02F4           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1278/FFFFFFFFFFFF09BA : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1280/FFFFFFFFFFFF09C2 : 4A78 A998           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1281/FFFFFFFFFFFF09C6 : 6720                		beq.s	.end
(1) 1282/FFFFFFFFFFFF09C8 : 2893                		move.l	(a3),(a4)			; Size
(1) 1283/FFFFFFFFFFFF09CA : 429B                		clr.l	(a3)+
(1) 1284/FFFFFFFFFFFF09CC : 2893                		move.l	(a3),(a4)			; Source
(1) 1285/FFFFFFFFFFFF09CE : 429B                		clr.l	(a3)+
(1) 1286/FFFFFFFFFFFF09D0 : 3893                		move.w	(a3),(a4)
(1) 1287/FFFFFFFFFFFF09D2 : 425B                		clr.w	(a3)+
(1) 1288/FFFFFFFFFFFF09D4 : 3C13                		move.w	(a3),d6				; Destination
(1) 1289/FFFFFFFFFFFF09D6 : 425B                		clr.w	(a3)+
(1) 1290/FFFFFFFFFFFF09D8 : 3A13                		move.w	(a3),d5
(1) 1291/FFFFFFFFFFFF09DA : 425B                		clr.w	(a3)+
(1) 1292/FFFFFFFFFFFF09DC : 3886                		move.w	d6,(a4)
(1) 1293/FFFFFFFFFFFF09DE : 3885                		move.w	d5,(a4)
(1) 1294/FFFFFFFFFFFF09E0 : 0478 000E A998      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1295/FFFFFFFFFFFF09E6 : 60DA                		bra.s	.next
(1) 1296/FFFFFFFFFFFF09E8 :                     .end:
(1) 1298/FFFFFFFFFFFF09E8 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1300/FFFFFFFFFFFF09F0 : 6100 02BE           		bsr	System_DmaExit_ROM		; Resume Z80 and SH2 direct
(1) 1301/FFFFFFFFFFFF09F4 : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1302/FFFFFFFFFFFF09F8 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1303/FFFFFFFFFFFF09FC : 3887                		move.w	d7,(a4)
(1) 1304/FFFFFFFFFFFF09FE :                     .exit:
(1) 1305/FFFFFFFFFFFF09FE : 4E75                		rts
(1) 1306/FFFFFFFFFFFF0A00 :                     
(1) 1307/FFFFFFFFFFFF0A00 :                     ; ; ====================================================================
(1) 1308/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------------------------------
(1) 1309/FFFFFFFFFFFF0A00 :                     ; ; MAP layout system
(1) 1310/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1311/FFFFFFFFFFFF0A00 :                     ; ; Note: uses some RAM'd video registers.
(1) 1312/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------------------------------
(1) 1313/FFFFFFFFFFFF0A00 :                     ;
(1) 1314/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1315/FFFFFFFFFFFF0A00 :                     ; ; MdMap_Init
(1) 1316/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1317/FFFFFFFFFFFF0A00 :                     ; ; Initializes all BG buffers
(1) 1318/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1319/FFFFFFFFFFFF0A00 :                     ;
(1) 1320/FFFFFFFFFFFF0A00 :                     ; MdMap_Init:
(1) 1321/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBuffer),a0
(1) 1322/FFFFFFFFFFFF0A00 :                     ; 		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1323/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d0
(1) 1324/FFFFFFFFFFFF0A00 :                     ; .clr:
(1) 1325/FFFFFFFFFFFF0A00 :                     ; 		move.l	d0,(a0)+
(1) 1326/FFFFFFFFFFFF0A00 :                     ; 		dbf	d1,.clr
(1) 1327/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1328/FFFFFFFFFFFF0A00 :                     ;
(1) 1329/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1330/FFFFFFFFFFFF0A00 :                     ; ; MdMap_Set
(1) 1331/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1332/FFFFFFFFFFFF0A00 :                     ; ; Sets a new scrolling section to use.
(1) 1333/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1334/FFFFFFFFFFFF0A00 :                     ; ; **SET YOUR X and Y COORDS EXTERNALLY
(1) 1335/FFFFFFFFFFFF0A00 :                     ; ; BEFORE GETTING HERE**
(1) 1336/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1337/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 1338/FFFFFFFFFFFF0A00 :                     ; ; ** Genesis side **
(1) 1339/FFFFFFFFFFFF0A00 :                     ; ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1340/FFFFFFFFFFFF0A00 :                     ; ; d1 | WORD - VRAM location for map data
(1) 1341/FFFFFFFFFFFF0A00 :                     ; ; d2 | WORD - VRAM add + palette
(1) 1342/FFFFFFFFFFFF0A00 :                     ; ; a0 - Level header data:
(1) 1343/FFFFFFFFFFFF0A00 :                     ; ; 	dc.w width,height
(1) 1344/FFFFFFFFFFFF0A00 :                     ; ; 	dc.b blkwidth,blkheight
(1) 1345/FFFFFFFFFFFF0A00 :                     ; ; a1 - Block data
(1) 1346/FFFFFFFFFFFF0A00 :                     ; ; a2 - LOW priority layout data
(1) 1347/FFFFFFFFFFFF0A00 :                     ; ; a3 - HIGH priority layout data
(1) 1348/FFFFFFFFFFFF0A00 :                     ; ; d4 - Collision data
(1) 1349/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1350/FFFFFFFFFFFF0A00 :                     ; ; Then load the graphics externally at the same
(1) 1351/FFFFFFFFFFFF0A00 :                     ; ; VRAM location set in d2
(1) 1352/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1353/FFFFFFFFFFFF0A00 :                     ; ; ** 32X side **
(1) 1354/FFFFFFFFFFFF0A00 :                     ; ; d0 | WORD - Write as -1
(1) 1355/FFFFFFFFFFFF0A00 :                     ; ; d1 | WORD - Scroll buffer to use on the 32X side (0 - default)
(1) 1356/FFFFFFFFFFFF0A00 :                     ; ; d2 | WORD - Index-palette increment
(1) 1357/FFFFFFFFFFFF0A00 :                     ; ; a0 - Level header data: (68K AREA)
(1) 1358/FFFFFFFFFFFF0A00 :                     ; ; 	dc.w width,height
(1) 1359/FFFFFFFFFFFF0A00 :                     ; ; 	dc.b blkwidth,blkheight
(1) 1360/FFFFFFFFFFFF0A00 :                     ; ; a1 - Graphics data stored as blocks (SH2 AREA)
(1) 1361/FFFFFFFFFFFF0A00 :                     ; ; a2 - MAIN layout (SH2 AREA)
(1) 1362/FFFFFFFFFFFF0A00 :                     ; ; a3 - *** UNUSED, set to 0
(1) 1363/FFFFFFFFFFFF0A00 :                     ; ; a4 - Collision data (68K AREA)
(1) 1364/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1365/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 1366/FFFFFFFFFFFF0A00 :                     ; ; d0,d6-d7
(1) 1367/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1368/FFFFFFFFFFFF0A00 :                     ;
(1) 1369/FFFFFFFFFFFF0A00 :                     ; MdMap_Set:
(1) 1370/FFFFFFFFFFFF0A00 :                     ; 		tst.w	d0
(1) 1371/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.md_side
(1) 1372/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1373/FFFFFFFFFFFF0A00 :                     ; 		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1374/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.mars_side
(1) 1375/FFFFFFFFFFFF0A00 :                     ; .md_side:
(1) 1376/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1377/FFFFFFFFFFFF0A00 :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1378/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a6
(1) 1379/FFFFFFFFFFFF0A00 :                     ; 		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1380/FFFFFFFFFFFF0A00 :                     ; .mars_side:
(1) 1381/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,md_bg_vpos(a6)
(1) 1382/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,md_bg_vram(a6)
(1) 1383/FFFFFFFFFFFF0A00 :                     ;
(1) 1384/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d7
(1) 1385/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x(a6),d7
(1) 1386/FFFFFFFFFFFF0A00 :                     ; 		move.b	d7,md_bg_xset(a6)
(1) 1387/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,md_bg_x_old(a6)
(1) 1388/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1389/FFFFFFFFFFFF0A00 :                     ; 		move.l	d7,md_bg_x(a6)
(1) 1390/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d7
(1) 1391/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y(a6),d7
(1) 1392/FFFFFFFFFFFF0A00 :                     ; 		move.b	d7,md_bg_yset(a6)
(1) 1393/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,md_bg_y_old(a6)
(1) 1394/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1395/FFFFFFFFFFFF0A00 :                     ; 		move.l	d7,md_bg_y(a6)
(1) 1396/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$F,d3
(1) 1397/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$F,d4
(1) 1398/FFFFFFFFFFFF0A00 :                     ;
(1) 1399/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 1400/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1401/FFFFFFFFFFFF0A00 :                     ; 		move.l	a1,md_bg_blk(a6)
(1) 1402/FFFFFFFFFFFF0A00 :                     ; 		move.l	a2,md_bg_low(a6)
(1) 1403/FFFFFFFFFFFF0A00 :                     ; 		move.l	a3,md_bg_hi(a6)
(1) 1404/FFFFFFFFFFFF0A00 :                     ; 		move.l	a4,md_bg_col(a6)
(1) 1405/FFFFFFFFFFFF0A00 :                     ; 		move.l	a0,a5
(1) 1406/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1407/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1408/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a5)+,d4	; BLOCK width
(1) 1409/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a5)+,d3	; BLOCK height
(1) 1410/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d4
(1) 1411/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d3
(1) 1412/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,md_bg_w(a6)
(1) 1413/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,md_bg_h(a6)
(1) 1414/FFFFFFFFFFFF0A00 :                     ; 		move.b	d4,md_bg_bw(a6)
(1) 1415/FFFFFFFFFFFF0A00 :                     ; 		move.b	d3,md_bg_bh(a6)
(1) 1416/FFFFFFFFFFFF0A00 :                     ; 		mulu.w	d4,d7
(1) 1417/FFFFFFFFFFFF0A00 :                     ; 		mulu.w	d3,d6
(1) 1418/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,md_bg_wf(a6)
(1) 1419/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,md_bg_hf(a6)
(1) 1420/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d4
(1) 1421/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d3
(1) 1422/FFFFFFFFFFFF0A00 :                     ; 		and.b	d4,md_bg_xset(a6)
(1) 1423/FFFFFFFFFFFF0A00 :                     ; 		and.b	d3,md_bg_yset(a6)
(1) 1424/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 1425/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1426/FFFFFFFFFFFF0A00 :                     ;
(1) 1427/FFFFFFFFFFFF0A00 :                     ; 	; TODO: improve this...
(1) 1428/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x(a6),d3
(1) 1429/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y(a6),d4
(1) 1430/FFFFFFFFFFFF0A00 :                     ; 	; X beams
(1) 1431/FFFFFFFFFFFF0A00 :                     ; .xl_l:		cmp.w	d7,d3
(1) 1432/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.xl_g
(1) 1433/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d7,d3
(1) 1434/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.xl_l
(1) 1435/FFFFFFFFFFFF0A00 :                     ; .xl_g:
(1) 1436/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,md_bg_xinc_l(a6)
(1) 1437/FFFFFFFFFFFF0A00 :                     ; 		add.w	#320,d3				; <-- X resolution R
(1) 1438/FFFFFFFFFFFF0A00 :                     ; .xr_l:		cmp.w	d7,d3
(1) 1439/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.xr_g
(1) 1440/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d7,d3
(1) 1441/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.xr_l
(1) 1442/FFFFFFFFFFFF0A00 :                     ; .xr_g:
(1) 1443/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,md_bg_xinc_r(a6)
(1) 1444/FFFFFFFFFFFF0A00 :                     ;
(1) 1445/FFFFFFFFFFFF0A00 :                     ; 	; Y beams
(1) 1446/FFFFFFFFFFFF0A00 :                     ; .yt_l:		cmp.w	d6,d4
(1) 1447/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.yt_g
(1) 1448/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d6,d4
(1) 1449/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.yt_l
(1) 1450/FFFFFFFFFFFF0A00 :                     ; .yt_g:
(1) 1451/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1452/FFFFFFFFFFFF0A00 :                     ; 		add.w	#224,d4				; <-- Y resolution B
(1) 1453/FFFFFFFFFFFF0A00 :                     ; .yb_l:		cmp.w	d6,d4
(1) 1454/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.yb_g
(1) 1455/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d6,d4
(1) 1456/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.yb_l
(1) 1457/FFFFFFFFFFFF0A00 :                     ; .yb_g:
(1) 1458/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1459/FFFFFFFFFFFF0A00 :                     ;
(1) 1460/FFFFFFFFFFFF0A00 :                     ; 		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1461/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1462/FFFFFFFFFFFF0A00 :                     ;
(1) 1463/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1464/FFFFFFFFFFFF0A00 :                     ; ; MdMap_Move
(1) 1465/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1466/FFFFFFFFFFFF0A00 :                     ; ; Moves the current background/foreground
(1) 1467/FFFFFFFFFFFF0A00 :                     ; ; and checks for overflow.
(1) 1468/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1469/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 1470/FFFFFFFFFFFF0A00 :                     ; ; d0 | WORD - Background slot, if -1 32X's
(1) 1471/FFFFFFFFFFFF0A00 :                     ; ; d1 | WORD - Current X position
(1) 1472/FFFFFFFFFFFF0A00 :                     ; ; d2 | WORD - Current Y position
(1) 1473/FFFFFFFFFFFF0A00 :                     ; ; a0 - Background to move and check.
(1) 1474/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1475/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 1476/FFFFFFFFFFFF0A00 :                     ; ; d6-d7
(1) 1477/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1478/FFFFFFFFFFFF0A00 :                     ;
(1) 1479/FFFFFFFFFFFF0A00 :                     ; MdMap_Move:
(1) 1480/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1481/FFFFFFFFFFFF0A00 :                     ; 		tst.w	d0
(1) 1482/FFFFFFFFFFFF0A00 :                     ; 		bmi.s	.mars_side
(1) 1483/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1484/FFFFFFFFFFFF0A00 :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1485/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a6
(1) 1486/FFFFFFFFFFFF0A00 :                     ; .mars_side:
(1) 1487/FFFFFFFFFFFF0A00 :                     ; ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1488/FFFFFFFFFFFF0A00 :                     ; ; 		beq	.not_enabld
(1) 1489/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_wf(a6),d0
(1) 1490/FFFFFFFFFFFF0A00 :                     ; 		tst.w	d1
(1) 1491/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.x_left
(1) 1492/FFFFFFFFFFFF0A00 :                     ; 		clr.w	d1
(1) 1493/FFFFFFFFFFFF0A00 :                     ; .x_left:
(1) 1494/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#320,d0
(1) 1495/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d0,d1
(1) 1496/FFFFFFFFFFFF0A00 :                     ; 		bcs.s	.x_right
(1) 1497/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d1
(1) 1498/FFFFFFFFFFFF0A00 :                     ; .x_right:
(1) 1499/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_hf(a6),d0
(1) 1500/FFFFFFFFFFFF0A00 :                     ; 		tst.w	d2
(1) 1501/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.y_left
(1) 1502/FFFFFFFFFFFF0A00 :                     ; 		clr.w	d2
(1) 1503/FFFFFFFFFFFF0A00 :                     ; .y_left:
(1) 1504/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#224,d0
(1) 1505/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d0,d2
(1) 1506/FFFFFFFFFFFF0A00 :                     ; 		bcs.s	.y_right
(1) 1507/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d2
(1) 1508/FFFFFFFFFFFF0A00 :                     ; .y_right:
(1) 1509/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,md_bg_x(a6)
(1) 1510/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,md_bg_y(a6)
(1) 1511/FFFFFFFFFFFF0A00 :                     ; .not_enabld:
(1) 1512/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1513/FFFFFFFFFFFF0A00 :                     ;
(1) 1514/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1515/FFFFFFFFFFFF0A00 :                     ; ; MdMap_Update
(1) 1516/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1517/FFFFFFFFFFFF0A00 :                     ; ; Updates backgrounds internally, call this
(1) 1518/FFFFFFFFFFFF0A00 :                     ; ; BEFORE going into VBlank.
(1) 1519/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1520/FFFFFFFFFFFF0A00 :                     ; ; Then later call MdMap_DrawScrl on VBlank,
(1) 1521/FFFFFFFFFFFF0A00 :                     ; ; this also applies for the 32X as this routine also
(1) 1522/FFFFFFFFFFFF0A00 :                     ; ; resets the drawing bits.
(1) 1523/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1524/FFFFFFFFFFFF0A00 :                     ; ; For the 32X:
(1) 1525/FFFFFFFFFFFF0A00 :                     ; ; Call System_MarsUpdate AFTER this.
(1) 1526/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1527/FFFFFFFFFFFF0A00 :                     ;
(1) 1528/FFFFFFFFFFFF0A00 :                     ; MdMap_Update:
(1) 1529/FFFFFFFFFFFF0A00 :                     ; 	if MARS|MARSCD
(1) 1530/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1531/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.this_bg
(1) 1532/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1533/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.this_bg
(1) 1534/FFFFFFFFFFFF0A00 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1535/FFFFFFFFFFFF0A00 :                     ; .this_bg:
(1) 1536/FFFFFFFFFFFF0A00 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1537/FFFFFFFFFFFF0A00 :                     ; 		beq	.no_bg
(1) 1538/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d1
(1) 1539/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d2
(1) 1540/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x(a6),d3
(1) 1541/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x_old(a6),d0
(1) 1542/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d0,d3
(1) 1543/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.xequ
(1) 1544/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,d1
(1) 1545/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d0,d1
(1) 1546/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,md_bg_x_old(a6)
(1) 1547/FFFFFFFFFFFF0A00 :                     ; .xequ:
(1) 1548/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y(a6),d3
(1) 1549/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y_old(a6),d0
(1) 1550/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d0,d3
(1) 1551/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.yequ
(1) 1552/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,d2
(1) 1553/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d0,d2
(1) 1554/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,md_bg_y_old(a6)
(1) 1555/FFFFFFFFFFFF0A00 :                     ; .yequ:
(1) 1556/FFFFFFFFFFFF0A00 :                     ;
(1) 1557/FFFFFFFFFFFF0A00 :                     ; 	; Increment drawing beams
(1) 1558/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,d0
(1) 1559/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_wf(a6),d5
(1) 1560/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_xinc_l(a6),d4
(1) 1561/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.beam_incr
(1) 1562/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,md_bg_xinc_l(a6)
(1) 1563/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_xinc_r(a6),d4
(1) 1564/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.beam_incr
(1) 1565/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,md_bg_xinc_r(a6)
(1) 1566/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,d0
(1) 1567/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_hf(a6),d5
(1) 1568/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_yinc_u(a6),d4
(1) 1569/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.beam_incr
(1) 1570/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1571/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_yinc_d(a6),d4
(1) 1572/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.beam_incr
(1) 1573/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1574/FFFFFFFFFFFF0A00 :                     ;
(1) 1575/FFFFFFFFFFFF0A00 :                     ; 	; Update internal counters
(1) 1576/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d3
(1) 1577/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_bw(a6),d3		; X set
(1) 1578/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_xset(a6),d0
(1) 1579/FFFFFFFFFFFF0A00 :                     ; 		add.b	d1,d0
(1) 1580/FFFFFFFFFFFF0A00 :                     ; 		move.b	d0,d4
(1) 1581/FFFFFFFFFFFF0A00 :                     ; 		and.w	d3,d4
(1) 1582/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.x_k
(1) 1583/FFFFFFFFFFFF0A00 :                     ; 		moveq	#bitDrwR,d4
(1) 1584/FFFFFFFFFFFF0A00 :                     ; 		tst.w	d1
(1) 1585/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.x_r
(1) 1586/FFFFFFFFFFFF0A00 :                     ; 		moveq	#bitDrwL,d4
(1) 1587/FFFFFFFFFFFF0A00 :                     ; .x_r:
(1) 1588/FFFFFFFFFFFF0A00 :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1589/FFFFFFFFFFFF0A00 :                     ; .x_k:
(1) 1590/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d3
(1) 1591/FFFFFFFFFFFF0A00 :                     ; 		and.b	d3,d0
(1) 1592/FFFFFFFFFFFF0A00 :                     ; 		move.b	d0,md_bg_xset(a6)
(1) 1593/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_bh(a6),d3		; Y set
(1) 1594/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_yset(a6),d0
(1) 1595/FFFFFFFFFFFF0A00 :                     ; 		add.b	d2,d0
(1) 1596/FFFFFFFFFFFF0A00 :                     ; 		move.b	d0,d4
(1) 1597/FFFFFFFFFFFF0A00 :                     ; 		and.w	d3,d4
(1) 1598/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.y_k
(1) 1599/FFFFFFFFFFFF0A00 :                     ; 		moveq	#bitDrwD,d4
(1) 1600/FFFFFFFFFFFF0A00 :                     ; 		tst.w	d2
(1) 1601/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.y_d
(1) 1602/FFFFFFFFFFFF0A00 :                     ; 		moveq	#bitDrwU,d4
(1) 1603/FFFFFFFFFFFF0A00 :                     ; .y_d:
(1) 1604/FFFFFFFFFFFF0A00 :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1605/FFFFFFFFFFFF0A00 :                     ; .y_k:
(1) 1606/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d3
(1) 1607/FFFFFFFFFFFF0A00 :                     ; 		and.b	d3,d0
(1) 1608/FFFFFFFFFFFF0A00 :                     ; 		move.b	d0,md_bg_yset(a6)
(1) 1609/FFFFFFFFFFFF0A00 :                     ; .no_bg:
(1) 1610/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1611/FFFFFFFFFFFF0A00 :                     ;
(1) 1612/FFFFFFFFFFFF0A00 :                     ; ; d0 - Increment by
(1) 1613/FFFFFFFFFFFF0A00 :                     ; ; d4 - X/Y beam
(1) 1614/FFFFFFFFFFFF0A00 :                     ; ; d5 - Max Width/Height
(1) 1615/FFFFFFFFFFFF0A00 :                     ; .beam_incr:
(1) 1616/FFFFFFFFFFFF0A00 :                     ; 		add.w	d0,d4
(1) 1617/FFFFFFFFFFFF0A00 :                     ; .xd_l:		tst.w	d4
(1) 1618/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.xd_g
(1) 1619/FFFFFFFFFFFF0A00 :                     ; 		add.w	d5,d4
(1) 1620/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.xd_l
(1) 1621/FFFFFFFFFFFF0A00 :                     ; .xd_g:		cmp.w	d5,d4
(1) 1622/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.val_h
(1) 1623/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d5,d4
(1) 1624/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.xd_g
(1) 1625/FFFFFFFFFFFF0A00 :                     ; .val_h:
(1) 1626/FFFFFFFFFFFF0A00 :                     ; 	endif
(1) 1627/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1628/FFFFFFFFFFFF0A00 :                     ;
(1) 1629/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1630/FFFFFFFFFFFF0A00 :                     ; ; MdMap_DrawAll
(1) 1631/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1632/FFFFFFFFFFFF0A00 :                     ; ; Call this only if DISPLAY is OFF or in VBlank
(1) 1633/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1634/FFFFFFFFFFFF0A00 :                     ; ; Notes:
(1) 1635/FFFFFFFFFFFF0A00 :                     ; ; - Does NOT check for off-bounds blocks
(1) 1636/FFFFFFFFFFFF0A00 :                     ; ; - Blocks with ID $00 are skipped.
(1) 1637/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1638/FFFFFFFFFFFF0A00 :                     ;
(1) 1639/FFFFFFFFFFFF0A00 :                     ; MdMap_DrawAll:
(1) 1640/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1641/FFFFFFFFFFFF0A00 :                     ; 		bsr	.this_bg
(1) 1642/FFFFFFFFFFFF0A00 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1643/FFFFFFFFFFFF0A00 :                     ; .this_bg:
(1) 1644/FFFFFFFFFFFF0A00 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1645/FFFFFFFFFFFF0A00 :                     ; 		beq	.no_bg
(1) 1646/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_blk(a6),a5
(1) 1647/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_low(a6),a4
(1) 1648/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_hi(a6),a3
(1) 1649/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1650/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1651/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_bw(a6),d2
(1) 1652/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_bh(a6),d3
(1) 1653/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_w(a6),d4
(1) 1654/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	md_bg_wf(a6),d5
(1) 1655/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	md_bg_hf(a6),d6
(1) 1656/FFFFFFFFFFFF0A00 :                     ;
(1) 1657/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d6
(1) 1658/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d6
(1) 1659/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d6
(1) 1660/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#2,d6
(1) 1661/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$7F,d6
(1) 1662/FFFFFFFFFFFF0A00 :                     ;
(1) 1663/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 1664/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,d5
(1) 1665/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d5
(1) 1666/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#4,d5
(1) 1667/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$F00,d5
(1) 1668/FFFFFFFFFFFF0A00 :                     ;
(1) 1669/FFFFFFFFFFFF0A00 :                     ; 		add.w	d5,d6
(1) 1670/FFFFFFFFFFFF0A00 :                     ; 		add.w	md_bg_vpos(a6),d6
(1) 1671/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,d5
(1) 1672/FFFFFFFFFFFF0A00 :                     ; 		rol.w	#2,d6
(1) 1673/FFFFFFFFFFFF0A00 :                     ; 		and.w	#%11,d6
(1) 1674/FFFFFFFFFFFF0A00 :                     ; 		swap	d6
(1) 1675/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$3FFF,d5
(1) 1676/FFFFFFFFFFFF0A00 :                     ; 		move.w	d5,d6			; d6 - VDP 2nd|1st writes
(1) 1677/FFFFFFFFFFFF0A00 :                     ;
(1) 1678/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d2
(1) 1679/FFFFFFFFFFFF0A00 :                     ; 		muls.w	d2,d0
(1) 1680/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#8,d0
(1) 1681/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d3
(1) 1682/FFFFFFFFFFFF0A00 :                     ; 		muls.w	d3,d1
(1) 1683/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#8,d1
(1) 1684/FFFFFFFFFFFF0A00 :                     ; 		muls.w	d4,d1
(1) 1685/FFFFFFFFFFFF0A00 :                     ; 		add.l	d1,d0
(1) 1686/FFFFFFFFFFFF0A00 :                     ; 		add.l	d0,a4
(1) 1687/FFFFFFFFFFFF0A00 :                     ; 		add.l	d0,a3
(1) 1688/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$80,d1
(1) 1689/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,d3
(1) 1690/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 1691/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d3
(1) 1692/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d2
(1) 1693/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1694/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 1695/FFFFFFFFFFFF0A00 :                     ; 		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1696/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$0FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1697/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1698/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$100,d4
(1) 1699/FFFFFFFFFFFF0A00 :                     ; 		move.w	d5,d0
(1) 1700/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1701/FFFFFFFFFFFF0A00 :                     ; 		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1702/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1703/FFFFFFFFFFFF0A00 :                     ; 		move.w	#(256/16)-1,d7
(1) 1704/FFFFFFFFFFFF0A00 :                     ;
(1) 1705/FFFFFFFFFFFF0A00 :                     ; 	; a6 - Current BG buffer
(1) 1706/FFFFFFFFFFFF0A00 :                     ; 	; a5 - Block-data base
(1) 1707/FFFFFFFFFFFF0A00 :                     ; 	; a4 - LOW layout data Y
(1) 1708/FFFFFFFFFFFF0A00 :                     ; 	; a3 - HI layout data Y
(1) 1709/FFFFFFFFFFFF0A00 :                     ; 	; a2 - a4 current
(1) 1710/FFFFFFFFFFFF0A00 :                     ; 	; a1 - a3 current
(1) 1711/FFFFFFFFFFFF0A00 :                     ; 	; a0 - Block-data read
(1) 1712/FFFFFFFFFFFF0A00 :                     ;
(1) 1713/FFFFFFFFFFFF0A00 :                     ; 	; d7 - X loop        | Y loop
(1) 1714/FFFFFFFFFFFF0A00 :                     ; 	; d6 - VDP 2nd Write | X/Y VDP pos + addr bits
(1) 1715/FFFFFFFFFFFF0A00 :                     ; 	; d5 - X loop-save   | X VDP current
(1) 1716/FFFFFFFFFFFF0A00 :                     ; 	; d4 - Y wrap        | Y next block pos
(1) 1717/FFFFFFFFFFFF0A00 :                     ; 	; d3 - X wrap        | X next block pos
(1) 1718/FFFFFFFFFFFF0A00 :                     ; 	; d2 - Y block size  | VRAM-cell base
(1) 1719/FFFFFFFFFFFF0A00 :                     ; 	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1720/FFFFFFFFFFFF0A00 :                     ; 	; d0 -    ---        | ---
(1) 1721/FFFFFFFFFFFF0A00 :                     ;
(1) 1722/FFFFFFFFFFFF0A00 :                     ; .y_loop:
(1) 1723/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1724/FFFFFFFFFFFF0A00 :                     ; 		move.l	a4,a2		; a2 - LOW line
(1) 1725/FFFFFFFFFFFF0A00 :                     ; 		move.l	a3,a1		; a1 - HI line
(1) 1726/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,d5
(1) 1727/FFFFFFFFFFFF0A00 :                     ; .x_loop:
(1) 1728/FFFFFFFFFFFF0A00 :                     ; 		swap	d5
(1) 1729/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,d1
(1) 1730/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a2),d0		; HI block?
(1) 1731/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.got_blk
(1) 1732/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$8000,d1
(1) 1733/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a1),d0
(1) 1734/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.blank
(1) 1735/FFFFFFFFFFFF0A00 :                     ; .got_blk:
(1) 1736/FFFFFFFFFFFF0A00 :                     ; 		bsr	.mk_block
(1) 1737/FFFFFFFFFFFF0A00 :                     ; .blank:
(1) 1738/FFFFFFFFFFFF0A00 :                     ; 		move.l	d3,d0
(1) 1739/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1740/FFFFFFFFFFFF0A00 :                     ; 		add.w	d3,d5		; next VDP X pos
(1) 1741/FFFFFFFFFFFF0A00 :                     ; 		and.w	d0,d5
(1) 1742/FFFFFFFFFFFF0A00 :                     ; 		adda	#1,a2
(1) 1743/FFFFFFFFFFFF0A00 :                     ; 		adda	#1,a1
(1) 1744/FFFFFFFFFFFF0A00 :                     ; 		swap	d5
(1) 1745/FFFFFFFFFFFF0A00 :                     ; 		dbf	d5,.x_loop
(1) 1746/FFFFFFFFFFFF0A00 :                     ;
(1) 1747/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,d0
(1) 1748/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$3000,d0
(1) 1749/FFFFFFFFFFFF0A00 :                     ; 		add.w	d4,d6		; <-- next VDP Y block
(1) 1750/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1751/FFFFFFFFFFFF0A00 :                     ; 		and.w	d4,d6
(1) 1752/FFFFFFFFFFFF0A00 :                     ; 		or.w	d0,d6
(1) 1753/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1754/FFFFFFFFFFFF0A00 :                     ;
(1) 1755/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_w(a6),d0 ; ***
(1) 1756/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a4
(1) 1757/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a3
(1) 1758/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1759/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.y_loop
(1) 1760/FFFFFFFFFFFF0A00 :                     ; .no_bg:
(1) 1761/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1762/FFFFFFFFFFFF0A00 :                     ;
(1) 1763/FFFFFFFFFFFF0A00 :                     ; ; barely got free regs without using stack
(1) 1764/FFFFFFFFFFFF0A00 :                     ; .mk_block:
(1) 1765/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 1766/FFFFFFFFFFFF0A00 :                     ; 		move.l	a5,a0
(1) 1767/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d0
(1) 1768/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1769/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a0		; a0 - cell word data
(1) 1770/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,d0
(1) 1771/FFFFFFFFFFFF0A00 :                     ; 		add.w	d5,d0
(1) 1772/FFFFFFFFFFFF0A00 :                     ; 		or.w	#$4000,d0
(1) 1773/FFFFFFFFFFFF0A00 :                     ; 		swap	d6
(1) 1774/FFFFFFFFFFFF0A00 :                     ;
(1) 1775/FFFFFFFFFFFF0A00 :                     ; 	; d0 - topleft VDP write | $4000
(1) 1776/FFFFFFFFFFFF0A00 :                     ; 	; d6 - right VDP write
(1) 1777/FFFFFFFFFFFF0A00 :                     ; 	; d2 is free
(1) 1778/FFFFFFFFFFFF0A00 :                     ; 	;
(1) 1779/FFFFFFFFFFFF0A00 :                     ; 	; currently working: 16x16
(1) 1780/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.drwy_16	; 1-
(1) 1781/FFFFFFFFFFFF0A00 :                     ; 		add.w	#2,d0		; 2-
(1) 1782/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.drwy_16	; -3
(1) 1783/FFFFFFFFFFFF0A00 :                     ; 					; -4
(1) 1784/FFFFFFFFFFFF0A00 :                     ; 		swap	d6
(1) 1785/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 1786/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1787/FFFFFFFFFFFF0A00 :                     ;
(1) 1788/FFFFFFFFFFFF0A00 :                     ; ; d0 - left vdp
(1) 1789/FFFFFFFFFFFF0A00 :                     ; ; d6 - right vdp
(1) 1790/FFFFFFFFFFFF0A00 :                     ; .drwy_16:
(1) 1791/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d2
(1) 1792/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1793/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,d0
(1) 1794/FFFFFFFFFFFF0A00 :                     ; 		add.w	d1,d0
(1) 1795/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1796/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1797/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,(vdp_data).l
(1) 1798/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 1799/FFFFFFFFFFFF0A00 :                     ; 		add.w	d1,d2		; Next line
(1) 1800/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 1801/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,d0
(1) 1802/FFFFFFFFFFFF0A00 :                     ; 		add.w	d1,d0
(1) 1803/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1804/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1805/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,(vdp_data).l
(1) 1806/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1807/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1808/FFFFFFFFFFFF0A00 :                     ;
(1) 1809/FFFFFFFFFFFF0A00 :                     ; 	; Block: 16x16 as 13
(1) 1810/FFFFFFFFFFFF0A00 :                     ; 	;                 24
(1) 1811/FFFFFFFFFFFF0A00 :                     ; 	; d0 - block ID
(1) 1812/FFFFFFFFFFFF0A00 :                     ; 	; d1 - VRAM-add base
(1) 1813/FFFFFFFFFFFF0A00 :                     ; 	; d6 - VDP out R | VDP out L
(1) 1814/FFFFFFFFFFFF0A00 :                     ; ; 		and.w	#$FF,d0
(1) 1815/FFFFFFFFFFFF0A00 :                     ; ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1816/FFFFFFFFFFFF0A00 :                     ; ; 		move.l	(a5,d0.w),d2
(1) 1817/FFFFFFFFFFFF0A00 :                     ; ; 		add.l	d1,d2
(1) 1818/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d2
(1) 1819/FFFFFFFFFFFF0A00 :                     ; ; 		move.l	4(a5,d0.w),d3
(1) 1820/FFFFFFFFFFFF0A00 :                     ; ; 		add.l	d1,d3
(1) 1821/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d3
(1) 1822/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d6,d0
(1) 1823/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d5
(1) 1824/FFFFFFFFFFFF0A00 :                     ; ; 		add.w	d5,d0
(1) 1825/FFFFFFFFFFFF0A00 :                     ; ; 		or.w	#$4000,d0
(1) 1826/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d5
(1) 1827/FFFFFFFFFFFF0A00 :                     ; ; 		move.l	a0,d1
(1) 1828/FFFFFFFFFFFF0A00 :                     ; ; 		and.w	d1,d5
(1) 1829/FFFFFFFFFFFF0A00 :                     ; ; 		add.w	d5,d0
(1) 1830/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d6
(1) 1831/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1832/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1833/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1834/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1835/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d2
(1) 1836/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d3
(1) 1837/FFFFFFFFFFFF0A00 :                     ; ; 		add.w	#$80,d0		; line add
(1) 1838/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1839/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1840/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1841/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1842/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d6
(1) 1843/FFFFFFFFFFFF0A00 :                     ; ; 		rts
(1) 1844/FFFFFFFFFFFF0A00 :                     ;
(1) 1845/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1846/FFFFFFFFFFFF0A00 :                     ; ; MdMap_DrawScrlMd
(1) 1847/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1848/FFFFFFFFFFFF0A00 :                     ; ; Draws map off-screen changes, only on Genesis-side.
(1) 1849/FFFFFFFFFFFF0A00 :                     ; ;
(1) 1850/FFFFFFFFFFFF0A00 :                     ; ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 1851/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 1852/FFFFFFFFFFFF0A00 :                     ;
(1) 1853/FFFFFFFFFFFF0A00 :                     ; MdMap_DrawScrlMd:
(1) 1854/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1855/FFFFFFFFFFFF0A00 :                     ; 		lea	(vdp_data),a5
(1) 1856/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.this_bg
(1) 1857/FFFFFFFFFFFF0A00 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1858/FFFFFFFFFFFF0A00 :                     ; 	; SH2-side handles the
(1) 1859/FFFFFFFFFFFF0A00 :                     ; 	; RAM_BgBufferM's drawing
(1) 1860/FFFFFFFFFFFF0A00 :                     ;
(1) 1861/FFFFFFFFFFFF0A00 :                     ; .this_bg:
(1) 1862/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_flags(a6),d7
(1) 1863/FFFFFFFFFFFF0A00 :                     ; 		btst	#bitBgOn,d7
(1) 1864/FFFFFFFFFFFF0A00 :                     ; 		beq	.no_bg
(1) 1865/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1866/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1867/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1868/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1869/FFFFFFFFFFFF0A00 :                     ; 		bclr	#bitDrwU,d7
(1) 1870/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_u
(1) 1871/FFFFFFFFFFFF0A00 :                     ; 		bsr	.mk_row
(1) 1872/FFFFFFFFFFFF0A00 :                     ; .no_u:
(1) 1873/FFFFFFFFFFFF0A00 :                     ; 		bclr	#bitDrwD,d7
(1) 1874/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_d
(1) 1875/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_yinc_d(a6),d3
(1) 1876/FFFFFFFFFFFF0A00 :                     ; 		add.w	#224,d1			; X add
(1) 1877/FFFFFFFFFFFF0A00 :                     ; 		bsr	.mk_row
(1) 1878/FFFFFFFFFFFF0A00 :                     ; .no_d:
(1) 1879/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1880/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1881/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1882/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1883/FFFFFFFFFFFF0A00 :                     ; 		bclr	#bitDrwL,d7
(1) 1884/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_l
(1) 1885/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.mk_clmn
(1) 1886/FFFFFFFFFFFF0A00 :                     ; .no_l:
(1) 1887/FFFFFFFFFFFF0A00 :                     ; 		bclr	#bitDrwR,d7
(1) 1888/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_r
(1) 1889/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_xinc_r(a6),d2
(1) 1890/FFFFFFFFFFFF0A00 :                     ; 		add.w	#320,d0			; X add
(1) 1891/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	.mk_clmn
(1) 1892/FFFFFFFFFFFF0A00 :                     ; .no_r:
(1) 1893/FFFFFFFFFFFF0A00 :                     ;
(1) 1894/FFFFFFFFFFFF0A00 :                     ; 		move.b	d7,md_bg_flags(a6)
(1) 1895/FFFFFFFFFFFF0A00 :                     ; .no_bg:
(1) 1896/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1897/FFFFFFFFFFFF0A00 :                     ;
(1) 1898/FFFFFFFFFFFF0A00 :                     ; ; ------------------------------------------------
(1) 1899/FFFFFFFFFFFF0A00 :                     ; ; Make column
(1) 1900/FFFFFFFFFFFF0A00 :                     ; ; d0 - X
(1) 1901/FFFFFFFFFFFF0A00 :                     ; ; d1 - Y
(1) 1902/FFFFFFFFFFFF0A00 :                     ; ; d2 - X increment
(1) 1903/FFFFFFFFFFFF0A00 :                     ; ; d3 - Y increment
(1) 1904/FFFFFFFFFFFF0A00 :                     ; ; ------------------------------------------------
(1) 1905/FFFFFFFFFFFF0A00 :                     ;
(1) 1906/FFFFFFFFFFFF0A00 :                     ; .mk_clmn:
(1) 1907/FFFFFFFFFFFF0A00 :                     ; ; 		btst	#bitMarsBg,d7
(1) 1908/FFFFFFFFFFFF0A00 :                     ; ; 		bne	.mars_ret_c
(1) 1909/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1910/FFFFFFFFFFFF0A00 :                     ; 		bsr	.get_coords
(1) 1911/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1912/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,d0
(1) 1913/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1914/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$FFF,d3
(1) 1915/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 1916/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$100,d3
(1) 1917/FFFFFFFFFFFF0A00 :                     ;
(1) 1918/FFFFFFFFFFFF0A00 :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 1919/FFFFFFFFFFFF0A00 :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 1920/FFFFFFFFFFFF0A00 :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 1921/FFFFFFFFFFFF0A00 :                     ; 	; d3 -    Y wrap | Y add
(1) 1922/FFFFFFFFFFFF0A00 :                     ; 	; d4 -         *****
(1) 1923/FFFFFFFFFFFF0A00 :                     ; 	; d5 -         *****
(1) 1924/FFFFFFFFFFFF0A00 :                     ; 	; d6 -         *****
(1) 1925/FFFFFFFFFFFF0A00 :                     ; 	; d7 - lastflags | loop blocks
(1) 1926/FFFFFFFFFFFF0A00 :                     ;
(1) 1927/FFFFFFFFFFFF0A00 :                     ; 		move.w	#(256/16)-1,d7
(1) 1928/FFFFFFFFFFFF0A00 :                     ; .y_blk:
(1) 1929/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 1930/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 1931/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a3),d6
(1) 1932/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.vld
(1) 1933/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a2),d6
(1) 1934/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.prio
(1) 1935/FFFFFFFFFFFF0A00 :                     ; .blnk:
(1) 1936/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 1937/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 1938/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.frce
(1) 1939/FFFFFFFFFFFF0A00 :                     ; .prio:
(1) 1940/FFFFFFFFFFFF0A00 :                     ; 		move.l	#$80008000,d4
(1) 1941/FFFFFFFFFFFF0A00 :                     ; 		move.l	#$80008000,d5
(1) 1942/FFFFFFFFFFFF0A00 :                     ; .vld:
(1) 1943/FFFFFFFFFFFF0A00 :                     ; 		move.l	a4,a0
(1) 1944/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d6
(1) 1945/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d6
(1) 1946/FFFFFFFFFFFF0A00 :                     ; 		adda	d6,a0
(1) 1947/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 1948/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d4
(1) 1949/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d5
(1) 1950/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d4
(1) 1951/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d5
(1) 1952/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1953/FFFFFFFFFFFF0A00 :                     ; 		swap	d5
(1) 1954/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d4
(1) 1955/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d5
(1) 1956/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d4
(1) 1957/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d5
(1) 1958/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 1959/FFFFFFFFFFFF0A00 :                     ; .frce:
(1) 1960/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d6
(1) 1961/FFFFFFFFFFFF0A00 :                     ; 		add.w	d1,d6
(1) 1962/FFFFFFFFFFFF0A00 :                     ; 		or.w	#$4000,d6
(1) 1963/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,4(a5)
(1) 1964/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,4(a5)
(1) 1965/FFFFFFFFFFFF0A00 :                     ; 		move.l	d4,(a5)
(1) 1966/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$80,d6
(1) 1967/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,4(a5)
(1) 1968/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,4(a5)
(1) 1969/FFFFFFFFFFFF0A00 :                     ; 		move.l	d5,(a5)
(1) 1970/FFFFFFFFFFFF0A00 :                     ; 		move.l	d3,d4		; Next Y block
(1) 1971/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 1972/FFFFFFFFFFFF0A00 :                     ; 		add.w	d3,d0
(1) 1973/FFFFFFFFFFFF0A00 :                     ; 		and.w	d4,d0
(1) 1974/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_w(a6),d6
(1) 1975/FFFFFFFFFFFF0A00 :                     ; 		adda	d6,a3
(1) 1976/FFFFFFFFFFFF0A00 :                     ; 		adda	d6,a2
(1) 1977/FFFFFFFFFFFF0A00 :                     ; 		swap	d1		; <-- TODO: improve this later.
(1) 1978/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$10,d1
(1) 1979/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	md_bg_hf(a6),d1
(1) 1980/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.y_low
(1) 1981/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1982/FFFFFFFFFFFF0A00 :                     ; 		clr.w	d1
(1) 1983/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_low(a6),a3
(1) 1984/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_hi(a6),a2
(1) 1985/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a2
(1) 1986/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a3
(1) 1987/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 1988/FFFFFFFFFFFF0A00 :                     ; .y_low:
(1) 1989/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 1990/FFFFFFFFFFFF0A00 :                     ;
(1) 1991/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.y_blk
(1) 1992/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 1993/FFFFFFFFFFFF0A00 :                     ; .mars_ret_c:
(1) 1994/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 1995/FFFFFFFFFFFF0A00 :                     ;
(1) 1996/FFFFFFFFFFFF0A00 :                     ; ; ------------------------------------------------
(1) 1997/FFFFFFFFFFFF0A00 :                     ; ; Make row
(1) 1998/FFFFFFFFFFFF0A00 :                     ; ; d0 - X
(1) 1999/FFFFFFFFFFFF0A00 :                     ; ; d1 - Y
(1) 2000/FFFFFFFFFFFF0A00 :                     ; ; d2 - X increment
(1) 2001/FFFFFFFFFFFF0A00 :                     ; ; d3 - Y increment
(1) 2002/FFFFFFFFFFFF0A00 :                     ; ; ------------------------------------------------
(1) 2003/FFFFFFFFFFFF0A00 :                     ;
(1) 2004/FFFFFFFFFFFF0A00 :                     ; .mk_row:
(1) 2005/FFFFFFFFFFFF0A00 :                     ; ; 		btst	#bitMarsBg,d7
(1) 2006/FFFFFFFFFFFF0A00 :                     ; ; 		bne.s	.mars_ret_c
(1) 2007/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 2008/FFFFFFFFFFFF0A00 :                     ; 		bsr	.get_coords
(1) 2009/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 2010/FFFFFFFFFFFF0A00 :                     ; 		move.w	d5,d1
(1) 2011/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 2012/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$7F,d3
(1) 2013/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 2014/FFFFFFFFFFFF0A00 :                     ; 		move.w	#4,d3
(1) 2015/FFFFFFFFFFFF0A00 :                     ;
(1) 2016/FFFFFFFFFFFF0A00 :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 2017/FFFFFFFFFFFF0A00 :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 2018/FFFFFFFFFFFF0A00 :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 2019/FFFFFFFFFFFF0A00 :                     ; 	; d3 -    X wrap | X add
(1) 2020/FFFFFFFFFFFF0A00 :                     ; 	; d4 -         *****
(1) 2021/FFFFFFFFFFFF0A00 :                     ; 	; d5 -         *****
(1) 2022/FFFFFFFFFFFF0A00 :                     ; 	; d6 - loopflags | *****
(1) 2023/FFFFFFFFFFFF0A00 :                     ; 	; d7 - lastflags | loop blocks
(1) 2024/FFFFFFFFFFFF0A00 :                     ;
(1) 2025/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d6
(1) 2026/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$100,d6	; Merge d1
(1) 2027/FFFFFFFFFFFF0A00 :                     ; 		add.w	d6,d1
(1) 2028/FFFFFFFFFFFF0A00 :                     ; 		move.l	d3,d5
(1) 2029/FFFFFFFFFFFF0A00 :                     ; 		swap	d5
(1) 2030/FFFFFFFFFFFF0A00 :                     ; 		and.w	d5,d0
(1) 2031/FFFFFFFFFFFF0A00 :                     ; 		move.w	#((320+16)/16)-1,d7
(1) 2032/FFFFFFFFFFFF0A00 :                     ; .x_blk:
(1) 2033/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 2034/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 2035/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a3),d6
(1) 2036/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.xvld
(1) 2037/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a2),d6
(1) 2038/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.xprio
(1) 2039/FFFFFFFFFFFF0A00 :                     ; .xblnk:
(1) 2040/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 2041/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 2042/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.xfrce
(1) 2043/FFFFFFFFFFFF0A00 :                     ; .xprio:
(1) 2044/FFFFFFFFFFFF0A00 :                     ; 		move.l	#$80008000,d4
(1) 2045/FFFFFFFFFFFF0A00 :                     ; 		move.l	#$80008000,d5
(1) 2046/FFFFFFFFFFFF0A00 :                     ; .xvld:
(1) 2047/FFFFFFFFFFFF0A00 :                     ; 		move.l	a4,a0
(1) 2048/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d6
(1) 2049/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d6
(1) 2050/FFFFFFFFFFFF0A00 :                     ; 		adda	d6,a0
(1) 2051/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 2052/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d4
(1) 2053/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d5
(1) 2054/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d4
(1) 2055/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d5
(1) 2056/FFFFFFFFFFFF0A00 :                     ; 		swap	d4
(1) 2057/FFFFFFFFFFFF0A00 :                     ; 		swap	d5
(1) 2058/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d4
(1) 2059/FFFFFFFFFFFF0A00 :                     ; 		add.w	(a0)+,d5
(1) 2060/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d4
(1) 2061/FFFFFFFFFFFF0A00 :                     ; 		add.w	d2,d5
(1) 2062/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 2063/FFFFFFFFFFFF0A00 :                     ; .xfrce:
(1) 2064/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d6
(1) 2065/FFFFFFFFFFFF0A00 :                     ; 		add.w	d1,d6
(1) 2066/FFFFFFFFFFFF0A00 :                     ; 		or.w	#$4000,d6
(1) 2067/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,4(a5)
(1) 2068/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,4(a5)
(1) 2069/FFFFFFFFFFFF0A00 :                     ; 		move.l	d4,(a5)
(1) 2070/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$80,d6
(1) 2071/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,4(a5)
(1) 2072/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,4(a5)
(1) 2073/FFFFFFFFFFFF0A00 :                     ; 		move.l	d5,(a5)
(1) 2074/FFFFFFFFFFFF0A00 :                     ; 		add.w	d3,d0
(1) 2075/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 2076/FFFFFFFFFFFF0A00 :                     ; 		and.w	d3,d0
(1) 2077/FFFFFFFFFFFF0A00 :                     ; 		swap	d3
(1) 2078/FFFFFFFFFFFF0A00 :                     ;
(1) 2079/FFFFFFFFFFFF0A00 :                     ; 	; X wrap
(1) 2080/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 2081/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$10,d0
(1) 2082/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	md_bg_wf(a6),d0
(1) 2083/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.x_low
(1) 2084/FFFFFFFFFFFF0A00 :                     ; 		sub.w	md_bg_wf(a6),d0
(1) 2085/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 2086/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_w(a6),d4
(1) 2087/FFFFFFFFFFFF0A00 :                     ; 		sub.l	d4,a2
(1) 2088/FFFFFFFFFFFF0A00 :                     ; 		sub.l	d4,a3
(1) 2089/FFFFFFFFFFFF0A00 :                     ; .x_low:
(1) 2090/FFFFFFFFFFFF0A00 :                     ; 		adda	#1,a3
(1) 2091/FFFFFFFFFFFF0A00 :                     ; 		adda	#1,a2
(1) 2092/FFFFFFFFFFFF0A00 :                     ; .x_new:
(1) 2093/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 2094/FFFFFFFFFFFF0A00 :                     ;
(1) 2095/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.x_blk
(1) 2096/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 2097/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2098/FFFFFFFFFFFF0A00 :                     ;
(1) 2099/FFFFFFFFFFFF0A00 :                     ; ; ------------------------------------------------
(1) 2100/FFFFFFFFFFFF0A00 :                     ; ; Input
(1) 2101/FFFFFFFFFFFF0A00 :                     ; ; d0 - X position
(1) 2102/FFFFFFFFFFFF0A00 :                     ; ; d1 - Y position
(1) 2103/FFFFFFFFFFFF0A00 :                     ; ; d2 - X increment beam
(1) 2104/FFFFFFFFFFFF0A00 :                     ; ; d3 - Y increment beam
(1) 2105/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2106/FFFFFFFFFFFF0A00 :                     ; ; Out:
(1) 2107/FFFFFFFFFFFF0A00 :                     ; ; d4 - X LEFT increment
(1) 2108/FFFFFFFFFFFF0A00 :                     ; ; d5 - Y TOP increment
(1) 2109/FFFFFFFFFFFF0A00 :                     ;
(1) 2110/FFFFFFFFFFFF0A00 :                     ; .get_coords:
(1) 2111/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_blk(a6),a4
(1) 2112/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_low(a6),a3
(1) 2113/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_hi(a6),a2
(1) 2114/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d0		; block X/Y limit
(1) 2115/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d1
(1) 2116/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d2
(1) 2117/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d3
(1) 2118/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 2119/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 2120/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,d0
(1) 2121/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,d1
(1) 2122/FFFFFFFFFFFF0A00 :                     ; 		swap	d0
(1) 2123/FFFFFFFFFFFF0A00 :                     ; 		swap	d1
(1) 2124/FFFFFFFFFFFF0A00 :                     ;
(1) 2125/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 2126/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 2127/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_bw(a6),d6
(1) 2128/FFFFFFFFFFFF0A00 :                     ; 		move.b	md_bg_bh(a6),d7
(1) 2129/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d6
(1) 2130/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d7
(1) 2131/FFFFFFFFFFFF0A00 :                     ;
(1) 2132/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,d4
(1) 2133/FFFFFFFFFFFF0A00 :                     ; 		muls.w	d6,d4
(1) 2134/FFFFFFFFFFFF0A00 :                     ; 		asr.w	#8,d4
(1) 2135/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,d5
(1) 2136/FFFFFFFFFFFF0A00 :                     ; 		muls.w	d7,d5
(1) 2137/FFFFFFFFFFFF0A00 :                     ; 		asr.w	#8,d5
(1) 2138/FFFFFFFFFFFF0A00 :                     ; 		muls.w	md_bg_w(a6),d5
(1) 2139/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d3
(1) 2140/FFFFFFFFFFFF0A00 :                     ; 		move.l	d4,d3
(1) 2141/FFFFFFFFFFFF0A00 :                     ; 		add.l	d5,d3
(1) 2142/FFFFFFFFFFFF0A00 :                     ; 		add.l	d3,a3
(1) 2143/FFFFFFFFFFFF0A00 :                     ; 		add.l	d3,a2
(1) 2144/FFFFFFFFFFFF0A00 :                     ;
(1) 2145/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_vram(a6),d2
(1) 2146/FFFFFFFFFFFF0A00 :                     ; 		swap	d2
(1) 2147/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#2,d1			; Y >> 2
(1) 2148/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#6,d1			; Y * $40
(1) 2149/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#2,d0			; X >> 2
(1) 2150/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FFF,d1
(1) 2151/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$7C,d0
(1) 2152/FFFFFFFFFFFF0A00 :                     ; 		add.w	d1,d0
(1) 2153/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_vpos(a6),d1
(1) 2154/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,d2
(1) 2155/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$3FFF,d1
(1) 2156/FFFFFFFFFFFF0A00 :                     ; 		rol.w	#2,d2
(1) 2157/FFFFFFFFFFFF0A00 :                     ; 		and.w	#%11,d2
(1) 2158/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2159/FFFFFFFFFFFF0A00 :                     ;
(1) 2160/FFFFFFFFFFFF0A00 :                     ; ; ====================================================================
(1) 2161/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------------------------------
(1) 2162/FFFFFFFFFFFF0A00 :                     ; ; Objects system
(1) 2163/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2164/FFFFFFFFFFFF0A00 :                     ; ; MD and MARS
(1) 2165/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------------------------------
(1) 2166/FFFFFFFFFFFF0A00 :                     ;
(1) 2167/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2168/FFFFFFFFFFFF0A00 :                     ; ; Init objects
(1) 2169/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2170/FFFFFFFFFFFF0A00 :                     ;
(1) 2171/FFFFFFFFFFFF0A00 :                     ; Objects_Init:
(1) 2172/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_Objects),a6
(1) 2173/FFFFFFFFFFFF0A00 :                     ; 		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 2174/FFFFFFFFFFFF0A00 :                     ; .clr:
(1) 2175/FFFFFFFFFFFF0A00 :                     ; 		clr.b	(a6)+
(1) 2176/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.clr
(1) 2177/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_ObjDispList),a6
(1) 2178/FFFFFFFFFFFF0A00 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2179/FFFFFFFFFFFF0A00 :                     ; .clr_d:
(1) 2180/FFFFFFFFFFFF0A00 :                     ; 		clr.w	(a6)+
(1) 2181/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.clr_d
(1) 2182/FFFFFFFFFFFF0A00 :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2183/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2184/FFFFFFFFFFFF0A00 :                     ;
(1) 2185/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2186/FFFFFFFFFFFF0A00 :                     ; ; Process objects
(1) 2187/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2188/FFFFFFFFFFFF0A00 :                     ;
(1) 2189/FFFFFFFFFFFF0A00 :                     ; Objects_Run:
(1) 2190/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_Objects),a6
(1) 2191/FFFFFFFFFFFF0A00 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2192/FFFFFFFFFFFF0A00 :                     ; .next_one:
(1) 2193/FFFFFFFFFFFF0A00 :                     ; 		move.l	obj_code(a6),d6
(1) 2194/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_code	; Free slot
(1) 2195/FFFFFFFFFFFF0A00 :                     ; 		move.l	d7,-(sp)
(1) 2196/FFFFFFFFFFFF0A00 :                     ; 		move.l	d6,a5
(1) 2197/FFFFFFFFFFFF0A00 :                     ; 		jsr	(a5)
(1) 2198/FFFFFFFFFFFF0A00 :                     ; 		move.l	(sp)+,d7
(1) 2199/FFFFFFFFFFFF0A00 :                     ; .no_code:
(1) 2200/FFFFFFFFFFFF0A00 :                     ; 		adda	#sizeof_mdobj,a6
(1) 2201/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.next_one
(1) 2202/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2203/FFFFFFFFFFFF0A00 :                     ;
(1) 2204/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2205/FFFFFFFFFFFF0A00 :                     ; ; Draw ALL Objects from display list
(1) 2206/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2207/FFFFFFFFFFFF0A00 :                     ; ; Call this BEFORE VBlank.
(1) 2208/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2209/FFFFFFFFFFFF0A00 :                     ;
(1) 2210/FFFFFFFFFFFF0A00 :                     ; Objects_Show:
(1) 2211/FFFFFFFFFFFF0A00 :                     ; 		moveq	#1,d7				; d7 - MD Link
(1) 2212/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 2213/FFFFFFFFFFFF0A00 :                     ;
(1) 2214/FFFFFFFFFFFF0A00 :                     ; 		move.w	(RAM_SprDrwCntr),d6
(1) 2215/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_sprdrw
(1) 2216/FFFFFFFFFFFF0A00 :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2217/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2218/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d6
(1) 2219/FFFFFFFFFFFF0A00 :                     ; .nexts:
(1) 2220/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	#70,d7
(1) 2221/FFFFFFFFFFFF0A00 :                     ; 		bge.s	.no_sprdrw
(1) 2222/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5)+,d0
(1) 2223/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5)+,d1	; custom
(1) 2224/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d1
(1) 2225/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#8,d1
(1) 2226/FFFFFFFFFFFF0A00 :                     ; 		or.w	d7,d1
(1) 2227/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5)+,d2
(1) 2228/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5)+,d3
(1) 2229/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,(a6)+
(1) 2230/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,(a6)+
(1) 2231/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,(a6)+
(1) 2232/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,(a6)+
(1) 2233/FFFFFFFFFFFF0A00 :                     ; 		add.w	#1,d7
(1) 2234/FFFFFFFFFFFF0A00 :                     ; 		dbf	d6,.nexts
(1) 2235/FFFFFFFFFFFF0A00 :                     ; .no_sprdrw:
(1) 2236/FFFFFFFFFFFF0A00 :                     ;
(1) 2237/FFFFFFFFFFFF0A00 :                     ; 	if MARS|MARSCD
(1) 2238/FFFFFFFFFFFF0A00 :                     ; 	; Draw mappings from sprites
(1) 2239/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2240/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_MdDreq+Dreq_SuperSpr),a4	; a4 - 32X SUPER Sprites
(1) 2241/FFFFFFFFFFFF0A00 :                     ; 		move.w	#MAX_MDOBJ-1,d6
(1) 2242/FFFFFFFFFFFF0A00 :                     ; .next:
(1) 2243/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a5),d0
(1) 2244/FFFFFFFFFFFF0A00 :                     ; 		beq	.finish
(1) 2245/FFFFFFFFFFFF0A00 :                     ; 		moveq	#-1,d1
(1) 2246/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d1
(1) 2247/FFFFFFFFFFFF0A00 :                     ; 		move.l	d1,a2
(1) 2248/FFFFFFFFFFFF0A00 :                     ; 		move.l	obj_map(a2),a0		; Read mapping
(1) 2249/FFFFFFFFFFFF0A00 :                     ; 		btst	#bitobj_Mars,obj_set(a2)
(1) 2250/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.mars_mode
(1) 2251/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	#70,d7
(1) 2252/FFFFFFFFFFFF0A00 :                     ; 		bge	.mk_spr
(1) 2253/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_frame(a2),d0
(1) 2254/FFFFFFFFFFFF0A00 :                     ; 		add.w	d0,d0
(1) 2255/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0,d0.w),d0
(1) 2256/FFFFFFFFFFFF0A00 :                     ; 		adda	d0,a0
(1) 2257/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,d5
(1) 2258/FFFFFFFFFFFF0A00 :                     ; 		beq	.mk_spr
(1) 2259/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d5
(1) 2260/FFFFFFFFFFFF0A00 :                     ; .mk_pz:
(1) 2261/FFFFFFFFFFFF0A00 :                     ; 	; TODO: H/V flip
(1) 2262/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a0)+,d0
(1) 2263/FFFFFFFFFFFF0A00 :                     ; 		ext.w	d0
(1) 2264/FFFFFFFFFFFF0A00 :                     ; 		add.w	obj_y(a2),d0
(1) 2265/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$80,d0
(1) 2266/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a0)+,d1
(1) 2267/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#8,d1
(1) 2268/FFFFFFFFFFFF0A00 :                     ; 		or.w	d7,d1
(1) 2269/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,d2
(1) 2270/FFFFFFFFFFFF0A00 :                     ; 		add.w	obj_vram(a2),d2
(1) 2271/FFFFFFFFFFFF0A00 :                     ; 		adda	#2,a0
(1) 2272/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,d3
(1) 2273/FFFFFFFFFFFF0A00 :                     ; 		add.w	obj_x(a2),d3
(1) 2274/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$80,d3
(1) 2275/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,(a6)+
(1) 2276/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,(a6)+
(1) 2277/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,(a6)+
(1) 2278/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,(a6)+
(1) 2279/FFFFFFFFFFFF0A00 :                     ; 		add.w	#1,d7
(1) 2280/FFFFFFFFFFFF0A00 :                     ; 		dbf	d5,.mk_pz
(1) 2281/FFFFFFFFFFFF0A00 :                     ; 		bra.s	.mk_spr
(1) 2282/FFFFFFFFFFFF0A00 :                     ;
(1) 2283/FFFFFFFFFFFF0A00 :                     ; .mars_mode:
(1) 2284/FFFFFFFFFFFF0A00 :                     ; 		move.l	(a0)+,marsspr_data(a4)
(1) 2285/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,marsspr_dwidth(a4)
(1) 2286/FFFFFFFFFFFF0A00 :                     ; 		move.w	(a0)+,marsspr_indx(a4)
(1) 2287/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a0)+,d2
(1) 2288/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a0)+,d3
(1) 2289/FFFFFFFFFFFF0A00 :                     ; 		move.b	d2,marsspr_xs(a4)
(1) 2290/FFFFFFFFFFFF0A00 :                     ; 		move.b	d3,marsspr_ys(a4)
(1) 2291/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_frame(a2),d0	; Read frame
(1) 2292/FFFFFFFFFFFF0A00 :                     ; 		move.b	d0,marsspr_xfrm(a4)
(1) 2293/FFFFFFFFFFFF0A00 :                     ; 		ror.w	#8,d0
(1) 2294/FFFFFFFFFFFF0A00 :                     ; 		move.b	d0,marsspr_yfrm(a4)
(1) 2295/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_x(a2),d4
(1) 2296/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_y(a2),d5
(1) 2297/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d2
(1) 2298/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d3
(1) 2299/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#1,d2
(1) 2300/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#1,d3
(1) 2301/FFFFFFFFFFFF0A00 :                     ; ; 		divu.w	#2,d2			; **
(1) 2302/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d2,d4
(1) 2303/FFFFFFFFFFFF0A00 :                     ; ; 		divu.w	#2,d3			; **
(1) 2304/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d3,d5
(1) 2305/FFFFFFFFFFFF0A00 :                     ; ; 		move.l	obj_size(a2),d2		; d2 - UDLR sizes
(1) 2306/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d2,d3			; Grab LR
(1) 2307/FFFFFFFFFFFF0A00 :                     ; ; 		lsr.w	#5,d3
(1) 2308/FFFFFFFFFFFF0A00 :                     ; ; 		and.w	#%11111000,d3
(1) 2309/FFFFFFFFFFFF0A00 :                     ; ; 		sub.w	d3,d4			; Subtract X
(1) 2310/FFFFFFFFFFFF0A00 :                     ; ; 		swap	d2
(1) 2311/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	d2,d3			; Grab UD
(1) 2312/FFFFFFFFFFFF0A00 :                     ; ; 		lsr.w	#8,d3
(1) 2313/FFFFFFFFFFFF0A00 :                     ; ; 		lsl.b	#3,d3
(1) 2314/FFFFFFFFFFFF0A00 :                     ; ; 		and.w	#$FF,d3
(1) 2315/FFFFFFFFFFFF0A00 :                     ; ; 		sub.w	d3,d5			; Subtract Y
(1) 2316/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBufferM),a1
(1) 2317/FFFFFFFFFFFF0A00 :                     ; 		sub.w	md_bg_x(a1),d4
(1) 2318/FFFFFFFFFFFF0A00 :                     ; 		sub.w	md_bg_y(a1),d5
(1) 2319/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,marsspr_x(a4)
(1) 2320/FFFFFFFFFFFF0A00 :                     ; 		move.w	d5,marsspr_y(a4)
(1) 2321/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 2322/FFFFFFFFFFFF0A00 :                     ; 		btst	#bitobj_flipH,obj_set(a2)
(1) 2323/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.flip_h
(1) 2324/FFFFFFFFFFFF0A00 :                     ; 		bset	#0,d4
(1) 2325/FFFFFFFFFFFF0A00 :                     ; .flip_h:
(1) 2326/FFFFFFFFFFFF0A00 :                     ; 		btst	#bitobj_flipV,obj_set(a2)
(1) 2327/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.flip_v
(1) 2328/FFFFFFFFFFFF0A00 :                     ; 		bset	#1,d4
(1) 2329/FFFFFFFFFFFF0A00 :                     ; .flip_v:
(1) 2330/FFFFFFFFFFFF0A00 :                     ; 		move.w	d4,marsspr_flags(a4)
(1) 2331/FFFFFFFFFFFF0A00 :                     ; 		adda	#sizeof_marsspr,a4	; Next SuperSprite
(1) 2332/FFFFFFFFFFFF0A00 :                     ; .mk_spr:
(1) 2333/FFFFFFFFFFFF0A00 :                     ; 		clr.w	(a5)+			; Clear request
(1) 2334/FFFFFFFFFFFF0A00 :                     ; 		dbf	d6,.next
(1) 2335/FFFFFFFFFFFF0A00 :                     ; .finish:
(1) 2336/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_Sprites),a6	; a6 - Genesis sprites
(1) 2337/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,d6
(1) 2338/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	#70,d7
(1) 2339/FFFFFFFFFFFF0A00 :                     ; 		bge.s	.ran_out
(1) 2340/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d6
(1) 2341/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d6
(1) 2342/FFFFFFFFFFFF0A00 :                     ; 		adda	d6,a6
(1) 2343/FFFFFFFFFFFF0A00 :                     ; 		clr.l	(a6)			; TODO: endoflist check
(1) 2344/FFFFFFFFFFFF0A00 :                     ; .ran_out:
(1) 2345/FFFFFFFFFFFF0A00 :                     ; 	endif
(1) 2346/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2347/FFFFFFFFFFFF0A00 :                     ;
(1) 2348/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------------------------------
(1) 2349/FFFFFFFFFFFF0A00 :                     ; ; Subroutines
(1) 2350/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------------------------------
(1) 2351/FFFFFFFFFFFF0A00 :                     ;
(1) 2352/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2353/FFFFFFFFFFFF0A00 :                     ; ; object_Display
(1) 2354/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2355/FFFFFFFFFFFF0A00 :                     ; ; Builds a sprite using map data specified in
(1) 2356/FFFFFFFFFFFF0A00 :                     ; ; obj_map(a6)
(1) 2357/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2358/FFFFFFFFFFFF0A00 :                     ; ; *** GENESIS map ***
(1) 2359/FFFFFFFFFFFF0A00 :                     ; ; mapdata:
(1) 2360/FFFFFFFFFFFF0A00 :                     ; ;       dc.w .frame0-mapdata
(1) 2361/FFFFFFFFFFFF0A00 :                     ; ;       dc.w .frame1-mapdata
(1) 2362/FFFFFFFFFFFF0A00 :                     ; ;       ...
(1) 2363/FFFFFFFFFFFF0A00 :                     ; ; .frame0:
(1) 2364/FFFFFFFFFFFF0A00 :                     ; ;       dc.w numofpz
(1) 2365/FFFFFFFFFFFF0A00 :                     ; ;       dc.b YY,SS
(1) 2366/FFFFFFFFFFFF0A00 :                     ; ;       dc.w vram_normal
(1) 2367/FFFFFFFFFFFF0A00 :                     ; ;       dc.w vram_half
(1) 2368/FFFFFFFFFFFF0A00 :                     ; ;       dc.w XXXX
(1) 2369/FFFFFFFFFFFF0A00 :                     ; ;       align 2
(1) 2370/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2371/FFFFFFFFFFFF0A00 :                     ; ; *** 32X map ***
(1) 2372/FFFFFFFFFFFF0A00 :                     ; ; mapdata:
(1) 2373/FFFFFFFFFFFF0A00 :                     ; ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 2374/FFFFFFFFFFFF0A00 :                     ; ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 2375/FFFFFFFFFFFF0A00 :                     ; ; 	dc.b 64,72	 ; Frame width and height
(1) 2376/FFFFFFFFFFFF0A00 :                     ; ; 	dc.w $80	 ; Palette index
(1) 2377/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2378/FFFFFFFFFFFF0A00 :                     ; ; obj_frame(a6) is in YYXX direction
(1) 2379/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2380/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 2381/FFFFFFFFFFFF0A00 :                     ; ; a6 - Object
(1) 2382/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2383/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 2384/FFFFFFFFFFFF0A00 :                     ; ; a5,d7
(1) 2385/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2386/FFFFFFFFFFFF0A00 :                     ;
(1) 2387/FFFFFFFFFFFF0A00 :                     ; object_Display:
(1) 2388/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2389/FFFFFFFFFFFF0A00 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2390/FFFFFFFFFFFF0A00 :                     ; .srch:
(1) 2391/FFFFFFFFFFFF0A00 :                     ; 		tst.w	(a5)
(1) 2392/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.this_one
(1) 2393/FFFFFFFFFFFF0A00 :                     ; 		adda	#2,a5
(1) 2394/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.srch
(1) 2395/FFFFFFFFFFFF0A00 :                     ; .this_one:
(1) 2396/FFFFFFFFFFFF0A00 :                     ; 		move.w	a6,(a5)
(1) 2397/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2398/FFFFFFFFFFFF0A00 :                     ;
(1) 2399/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2400/FFFFFFFFFFFF0A00 :                     ; ; object_MkSprPz
(1) 2401/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2402/FFFFFFFFFFFF0A00 :                     ; ; Makes separate sprite pieces using
(1) 2403/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2404/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 2405/FFFFFFFFFFFF0A00 :                     ; ; d0 - X pos
(1) 2406/FFFFFFFFFFFF0A00 :                     ; ; d1 - Y pos
(1) 2407/FFFFFFFFFFFF0A00 :                     ; ; d2 - VRAM
(1) 2408/FFFFFFFFFFFF0A00 :                     ; ; d3 - Size
(1) 2409/FFFFFFFFFFFF0A00 :                     ; :
(1) 2410/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 2411/FFFFFFFFFFFF0A00 :                     ; ; a5,d7
(1) 2412/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2413/FFFFFFFFFFFF0A00 :                     ;
(1) 2414/FFFFFFFFFFFF0A00 :                     ; object_MkSprPz:
(1) 2415/FFFFFFFFFFFF0A00 :                     ; 		move.w	(RAM_SprDrwCntr).w,d7
(1) 2416/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	#70,d7
(1) 2417/FFFFFFFFFFFF0A00 :                     ; 		bge.s	.nope
(1) 2418/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d7
(1) 2419/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2420/FFFFFFFFFFFF0A00 :                     ; 		adda	d7,a5
(1) 2421/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$80,d0
(1) 2422/FFFFFFFFFFFF0A00 :                     ; 		add.w	#$80,d1
(1) 2423/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d3
(1) 2424/FFFFFFFFFFFF0A00 :                     ; ; 		lsl.w	#8,d3
(1) 2425/FFFFFFFFFFFF0A00 :                     ; 		move.w	d1,(a5)+
(1) 2426/FFFFFFFFFFFF0A00 :                     ; 		move.w	d3,(a5)+
(1) 2427/FFFFFFFFFFFF0A00 :                     ; 		move.w	d2,(a5)+
(1) 2428/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,(a5)+
(1) 2429/FFFFFFFFFFFF0A00 :                     ; 		add.w	#1,(RAM_SprDrwCntr).w
(1) 2430/FFFFFFFFFFFF0A00 :                     ; .nope:
(1) 2431/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2432/FFFFFFFFFFFF0A00 :                     ;
(1) 2433/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2434/FFFFFFFFFFFF0A00 :                     ; ; Object_Animate
(1) 2435/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2436/FFFFFFFFFFFF0A00 :                     ; ; Animates the sprite
(1) 2437/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2438/FFFFFFFFFFFF0A00 :                     ; ; Input
(1) 2439/FFFFFFFFFFFF0A00 :                     ; ; a0 | LONG - Animation data
(1) 2440/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2441/FFFFFFFFFFFF0A00 :                     ; ; Output
(1) 2442/FFFFFFFFFFFF0A00 :                     ; ; d0 | WORD - Frame
(1) 2443/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2444/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 2445/FFFFFFFFFFFF0A00 :                     ; ; d2
(1) 2446/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2447/FFFFFFFFFFFF0A00 :                     ;
(1) 2448/FFFFFFFFFFFF0A00 :                     ; ; NOTE: to restart an animation
(1) 2449/FFFFFFFFFFFF0A00 :                     ; ; clear obj_anim_indx(a6) manually
(1) 2450/FFFFFFFFFFFF0A00 :                     ;
(1) 2451/FFFFFFFFFFFF0A00 :                     ; Object_Animate:
(1) 2452/FFFFFFFFFFFF0A00 :                     ; ;  		tst.l	d1
(1) 2453/FFFFFFFFFFFF0A00 :                     ; ;   		beq.s	.return
(1) 2454/FFFFFFFFFFFF0A00 :                     ;  		moveq	#0,d2
(1) 2455/FFFFFFFFFFFF0A00 :                     ;  		move.b	obj_anim_id+1(a6),d2
(1) 2456/FFFFFFFFFFFF0A00 :                     ;  		cmp.b	obj_anim_id(a6),d2
(1) 2457/FFFFFFFFFFFF0A00 :                     ;  		beq.s	.sameThing
(1) 2458/FFFFFFFFFFFF0A00 :                     ;  		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2459/FFFFFFFFFFFF0A00 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 2460/FFFFFFFFFFFF0A00 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2461/FFFFFFFFFFFF0A00 :                     ; .sameThing:
(1) 2462/FFFFFFFFFFFF0A00 :                     ;  		move.b	obj_anim_id(a6),d2
(1) 2463/FFFFFFFFFFFF0A00 :                     ;  		cmp.b	#-1,d2
(1) 2464/FFFFFFFFFFFF0A00 :                     ;  		beq.s	.return
(1) 2465/FFFFFFFFFFFF0A00 :                     ;  		add.w	d2,d2
(1) 2466/FFFFFFFFFFFF0A00 :                     ;  		move.w	(a0,d2.w),d2
(1) 2467/FFFFFFFFFFFF0A00 :                     ;  		lea	(a0,d2.w),a0
(1) 2468/FFFFFFFFFFFF0A00 :                     ;
(1) 2469/FFFFFFFFFFFF0A00 :                     ;  		move.w	(a0)+,d2
(1) 2470/FFFFFFFFFFFF0A00 :                     ;  		cmp.w	#-1,d2
(1) 2471/FFFFFFFFFFFF0A00 :                     ;  		beq.s	.keepspd
(1) 2472/FFFFFFFFFFFF0A00 :                     ;  		sub.b	#1,obj_anim_spd(a6)
(1) 2473/FFFFFFFFFFFF0A00 :                     ;  		bpl.s	.return
(1) 2474/FFFFFFFFFFFF0A00 :                     ; 		move.b	d2,obj_anim_spd(a6)
(1) 2475/FFFFFFFFFFFF0A00 :                     ; .keepspd:
(1) 2476/FFFFFFFFFFFF0A00 :                     ;  		moveq	#0,d1
(1) 2477/FFFFFFFFFFFF0A00 :                     ;  		move.w	obj_anim_indx(a6),d2
(1) 2478/FFFFFFFFFFFF0A00 :                     ;  		add.w	d2,d2
(1) 2479/FFFFFFFFFFFF0A00 :                     ;  		move.w	(a0),d1
(1) 2480/FFFFFFFFFFFF0A00 :                     ;  		adda	d2,a0
(1) 2481/FFFFFFFFFFFF0A00 :                     ;  		move.w	(a0),d0
(1) 2482/FFFFFFFFFFFF0A00 :                     ;  		cmp.w	#-1,d0
(1) 2483/FFFFFFFFFFFF0A00 :                     ;  		beq.s	.noAnim		; loop
(1) 2484/FFFFFFFFFFFF0A00 :                     ;  		cmp.w	#-2,d0
(1) 2485/FFFFFFFFFFFF0A00 :                     ;  		beq.s	.lastFrame	; finish
(1) 2486/FFFFFFFFFFFF0A00 :                     ;  		cmp.w	#-3,d0
(1) 2487/FFFFFFFFFFFF0A00 :                     ;  		beq.s	.goToFrame
(1) 2488/FFFFFFFFFFFF0A00 :                     ;
(1) 2489/FFFFFFFFFFFF0A00 :                     ;  		move.w	d0,obj_frame(a6)
(1) 2490/FFFFFFFFFFFF0A00 :                     ;  		add.w	#1,obj_anim_indx(a6)
(1) 2491/FFFFFFFFFFFF0A00 :                     ; .return:
(1) 2492/FFFFFFFFFFFF0A00 :                     ;  		rts
(1) 2493/FFFFFFFFFFFF0A00 :                     ;
(1) 2494/FFFFFFFFFFFF0A00 :                     ; .noAnim:
(1) 2495/FFFFFFFFFFFF0A00 :                     ;  		move.w	#1,obj_anim_indx(a6)
(1) 2496/FFFFFFFFFFFF0A00 :                     ;  		move.w	d1,d0
(1) 2497/FFFFFFFFFFFF0A00 :                     ;  		move.w	d0,obj_frame(a6)
(1) 2498/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2499/FFFFFFFFFFFF0A00 :                     ; .lastFrame:
(1) 2500/FFFFFFFFFFFF0A00 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2501/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2502/FFFFFFFFFFFF0A00 :                     ; .goToFrame:
(1) 2503/FFFFFFFFFFFF0A00 :                     ; 		clr.w	obj_anim_indx(a6)
(1) 2504/FFFFFFFFFFFF0A00 :                     ; 		move.w	2(a0),obj_anim_indx(a6)
(1) 2505/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2506/FFFFFFFFFFFF0A00 :                     ;
(1) 2507/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2508/FFFFFFFFFFFF0A00 :                     ; ; object_Speed
(1) 2509/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2510/FFFFFFFFFFFF0A00 :                     ; ; Moves the object using speed settings
(1) 2511/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2512/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 2513/FFFFFFFFFFFF0A00 :                     ; ; a6 - Object
(1) 2514/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2515/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 2516/FFFFFFFFFFFF0A00 :                     ; ; d7
(1) 2517/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2518/FFFFFFFFFFFF0A00 :                     ;
(1) 2519/FFFFFFFFFFFF0A00 :                     ; object_UpdX:
(1) 2520/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d7
(1) 2521/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_x_spd(a6),d7
(1) 2522/FFFFFFFFFFFF0A00 :                     ; 		ext.l	d7
(1) 2523/FFFFFFFFFFFF0A00 :                     ; 		asl.l	#8,d7
(1) 2524/FFFFFFFFFFFF0A00 :                     ; 		add.l	d7,obj_x(a6)
(1) 2525/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2526/FFFFFFFFFFFF0A00 :                     ; object_Speed:
(1) 2527/FFFFFFFFFFFF0A00 :                     ; 		bsr.s	object_UpdX
(1) 2528/FFFFFFFFFFFF0A00 :                     ; object_UpdY:
(1) 2529/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d7
(1) 2530/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_y_spd(a6),d7
(1) 2531/FFFFFFFFFFFF0A00 :                     ; 		ext.l	d7
(1) 2532/FFFFFFFFFFFF0A00 :                     ; 		asl.l	#8,d7
(1) 2533/FFFFFFFFFFFF0A00 :                     ; 		add.l	d7,obj_y(a6)
(1) 2534/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2535/FFFFFFFFFFFF0A00 :                     ;
(1) 2536/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2537/FFFFFFFFFFFF0A00 :                     ; ; object_ColM_Floor
(1) 2538/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2539/FFFFFFFFFFFF0A00 :                     ; ; Check object collision on 32X map's floor
(1) 2540/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2541/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 2542/FFFFFFFFFFFF0A00 :                     ; ; a6 - Object to check
(1) 2543/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2544/FFFFFFFFFFFF0A00 :                     ; ; Returns:
(1) 2545/FFFFFFFFFFFF0A00 :                     ; ; beq  - No collision
(1) 2546/FFFFFFFFFFFF0A00 :                     ; ; bne  - Found collision
(1) 2547/FFFFFFFFFFFF0A00 :                     ; ; d4.b - Collision block number
(1) 2548/FFFFFFFFFFFF0A00 :                     ; ; d5.w - Y-pos center snap
(1) 2549/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2550/FFFFFFFFFFFF0A00 :                     ; ; Uses:
(1) 2551/FFFFFFFFFFFF0A00 :                     ; ; d4-d7,a4-a5
(1) 2552/FFFFFFFFFFFF0A00 :                     ; ; --------------------------------------------------------
(1) 2553/FFFFFFFFFFFF0A00 :                     ;
(1) 2554/FFFFFFFFFFFF0A00 :                     ; ; 32X MAP SIDE
(1) 2555/FFFFFFFFFFFF0A00 :                     ;
(1) 2556/FFFFFFFFFFFF0A00 :                     ; object_ColM_Floor:
(1) 2557/FFFFFFFFFFFF0A00 :                     ; 		lea	(RAM_BgBufferM),a5
(1) 2558/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d5
(1) 2559/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d4
(1) 2560/FFFFFFFFFFFF0A00 :                     ; 		move.l	md_bg_col(a5),a4
(1) 2561/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_wf(a5),d7
(1) 2562/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d7
(1) 2563/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_x(a6),d4
(1) 2564/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.v_x
(1) 2565/FFFFFFFFFFFF0A00 :                     ; 		clr.w	d4
(1) 2566/FFFFFFFFFFFF0A00 :                     ; .v_x:
(1) 2567/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d7,d4
(1) 2568/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.v_xr
(1) 2569/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,d4
(1) 2570/FFFFFFFFFFFF0A00 :                     ; .v_xr:
(1) 2571/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_hf(a5),d7
(1) 2572/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d7
(1) 2573/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_y(a6),d5
(1) 2574/FFFFFFFFFFFF0A00 :                     ; 		bpl.s	.v_y
(1) 2575/FFFFFFFFFFFF0A00 :                     ; 		clr.w	d5
(1) 2576/FFFFFFFFFFFF0A00 :                     ; .v_y:
(1) 2577/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d7,d5
(1) 2578/FFFFFFFFFFFF0A00 :                     ; 		blt.s	.v_yd
(1) 2579/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,d5
(1) 2580/FFFFFFFFFFFF0A00 :                     ; .v_yd:
(1) 2581/FFFFFFFFFFFF0A00 :                     ; 		move.l	obj_size(a6),d7
(1) 2582/FFFFFFFFFFFF0A00 :                     ; 		swap	d7		; Add Y
(1) 2583/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d7
(1) 2584/FFFFFFFFFFFF0A00 :                     ; 		move.w	d7,d6
(1) 2585/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d6
(1) 2586/FFFFFFFFFFFF0A00 :                     ; 		add.w	d6,d5
(1) 2587/FFFFFFFFFFFF0A00 :                     ;
(1) 2588/FFFFFFFFFFFF0A00 :                     ; 	; d5 - Ypos + size
(1) 2589/FFFFFFFFFFFF0A00 :                     ; 	; d6 - Xpos
(1) 2590/FFFFFFFFFFFF0A00 :                     ; 	; d7 - Dsize/2
(1) 2591/FFFFFFFFFFFF0A00 :                     ;
(1) 2592/FFFFFFFFFFFF0A00 :                     ; 	; 16x16 only
(1) 2593/FFFFFFFFFFFF0A00 :                     ; 		lsr.w	#1,d7		; Dsize/2
(1) 2594/FFFFFFFFFFFF0A00 :                     ; 		asr.w	#4,d4		; X >> 16
(1) 2595/FFFFFFFFFFFF0A00 :                     ; 		add.l	d4,a4		; Add X
(1) 2596/FFFFFFFFFFFF0A00 :                     ; 		move.l	d5,d4		; Copy d5 to d4
(1) 2597/FFFFFFFFFFFF0A00 :                     ; 		asr.w	#4,d4		; Y >> 16
(1) 2598/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d6
(1) 2599/FFFFFFFFFFFF0A00 :                     ; 		move.w	md_bg_w(a5),d6	; d6: map width
(1) 2600/FFFFFFFFFFFF0A00 :                     ; 		mulu.w	d6,d4		; (Y>>16)*(mwidth)
(1) 2601/FFFFFFFFFFFF0A00 :                     ; 		add.l	d4,a4		; Add Y
(1) 2602/FFFFFFFFFFFF0A00 :                     ; 		and.w	#-$10,d5	; Filter Y Snap
(1) 2603/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a4),d4		; d4: Start ID
(1) 2604/FFFFFFFFFFFF0A00 :                     ; 		sub.l	d6,a4
(1) 2605/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#1,d7		; Dsize - 1
(1) 2606/FFFFFFFFFFFF0A00 :                     ; 		bmi.s	.valid
(1) 2607/FFFFFFFFFFFF0A00 :                     ; .next:
(1) 2608/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 2609/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a4),d7		; New ID != 0?
(1) 2610/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.blnk
(1) 2611/FFFFFFFFFFFF0A00 :                     ; 		move.b	d7,d4		; Set new ID
(1) 2612/FFFFFFFFFFFF0A00 :                     ; 		sub.w	#$10,d5		; Decrement Y Snap
(1) 2613/FFFFFFFFFFFF0A00 :                     ; .blnk:
(1) 2614/FFFFFFFFFFFF0A00 :                     ; 		sub.l	d6,a4		; Decrement width
(1) 2615/FFFFFFFFFFFF0A00 :                     ; 		swap	d7
(1) 2616/FFFFFFFFFFFF0A00 :                     ; 		dbf	d7,.next
(1) 2617/FFFFFFFFFFFF0A00 :                     ; .valid:
(1) 2618/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d4		; Filter ID
(1) 2619/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2620/FFFFFFFFFFFF0A00 :                     ;
(1) 2621/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------
(1) 2622/FFFFFFFFFFFF0A00 :                     ; ; object_SetColFloor
(1) 2623/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2624/FFFFFFFFFFFF0A00 :                     ; ; Snaps the object to the map's floor.
(1) 2625/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2626/FFFFFFFFFFFF0A00 :                     ; ; Call object_ColM_Floor first
(1) 2627/FFFFFFFFFFFF0A00 :                     ; ;
(1) 2628/FFFFFFFFFFFF0A00 :                     ; ; Input:
(1) 2629/FFFFFFFFFFFF0A00 :                     ; ; d4.b - Collision block
(1) 2630/FFFFFFFFFFFF0A00 :                     ; ; d5.w - Y-pos center snap
(1) 2631/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------
(1) 2632/FFFFFFFFFFFF0A00 :                     ;
(1) 2633/FFFFFFFFFFFF0A00 :                     ; object_SetColFloor:
(1) 2634/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d4
(1) 2635/FFFFFFFFFFFF0A00 :                     ; 		beq.s	.no_col
(1) 2636/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#4,d4
(1) 2637/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_x(a6),d7		; Grab CENTER X
(1) 2638/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$0F,d7			; limit to 16
(1) 2639/FFFFFFFFFFFF0A00 :                     ; 		lea	slope_data_16(pc),a0
(1) 2640/FFFFFFFFFFFF0A00 :                     ; 		adda	d4,a0
(1) 2641/FFFFFFFFFFFF0A00 :                     ; 		move.b	(a0,d7.w),d4
(1) 2642/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$0F,d4
(1) 2643/FFFFFFFFFFFF0A00 :                     ;
(1) 2644/FFFFFFFFFFFF0A00 :                     ; 		moveq	#0,d6
(1) 2645/FFFFFFFFFFFF0A00 :                     ; 		move.w	obj_y(a6),d7
(1) 2646/FFFFFFFFFFFF0A00 :                     ; 		move.l	obj_size(a6),d6
(1) 2647/FFFFFFFFFFFF0A00 :                     ; 		swap	d6
(1) 2648/FFFFFFFFFFFF0A00 :                     ; 		and.w	#$FF,d6
(1) 2649/FFFFFFFFFFFF0A00 :                     ; 		lsl.w	#3,d6
(1) 2650/FFFFFFFFFFFF0A00 :                     ; 		sub.w	d6,d5
(1) 2651/FFFFFFFFFFFF0A00 :                     ; 		add.w	d4,d5	; target slope
(1) 2652/FFFFFFFFFFFF0A00 :                     ; 		cmp.w	d5,d7
(1) 2653/FFFFFFFFFFFF0A00 :                     ; 		ble.s	.no_col
(1) 2654/FFFFFFFFFFFF0A00 :                     ; 		move.w	#$800,d6
(1) 2655/FFFFFFFFFFFF0A00 :                     ; 		move.w	d6,obj_y_spd(a6)
(1) 2656/FFFFFFFFFFFF0A00 :                     ; ; .set_me:
(1) 2657/FFFFFFFFFFFF0A00 :                     ; ; 		move.w	obj_x_spd(a6),d6
(1) 2658/FFFFFFFFFFFF0A00 :                     ; ; 		bpl.s	.x_spd
(1) 2659/FFFFFFFFFFFF0A00 :                     ; ; 		neg.w	d6
(1) 2660/FFFFFFFFFFFF0A00 :                     ; ; .x_spd:
(1) 2661/FFFFFFFFFFFF0A00 :                     ;
(1) 2662/FFFFFFFFFFFF0A00 :                     ; 		bclr	#bitobj_air,obj_status(a6)
(1) 2663/FFFFFFFFFFFF0A00 :                     ; 		move.w	d5,obj_y(a6)
(1) 2664/FFFFFFFFFFFF0A00 :                     ; .no_col:
(1) 2665/FFFFFFFFFFFF0A00 :                     ; 		rts
(1) 2666/FFFFFFFFFFFF0A00 :                     ;
(1) 2667/FFFFFFFFFFFF0A00 :                     ; ; ----------------------------------------
(1) 2668/FFFFFFFFFFFF0A00 :                     ;
(1) 2669/FFFFFFFFFFFF0A00 :                     ; ; Slope data 16x16
(1) 2670/FFFFFFFFFFFF0A00 :                     ; slope_data_16:
(1) 2671/FFFFFFFFFFFF0A00 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2672/FFFFFFFFFFFF0A00 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2673/FFFFFFFFFFFF0A00 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2674/FFFFFFFFFFFF0A00 :                     ; 		dc.b 15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
(1) 2675/FFFFFFFFFFFF0A00 :                     ; 		dc.b  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
(1) 2676/FFFFFFFFFFFF0A00 :                     ; 		dc.b 15,15,14,14,13,13,12,12,11,11,10,10, 9, 9, 8, 8
(1) 2677/FFFFFFFFFFFF0A00 :                     ; 		dc.b  7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0
(1) 2678/FFFFFFFFFFFF0A00 :                     ; 		dc.b  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
(1) 2679/FFFFFFFFFFFF0A00 :                     ; 		dc.b  8, 8, 9, 9,10,10,11,11,12,12,13,13,14,14,15,15
(1) 2680/FFFFFFFFFFFF0A00 :                     ; 		align 2
(1) 2681/FFFFFFFFFFFF0A00 :                     
(1) 2682/FFFFFFFFFFFF0A00 :                     ; ====================================================================
(1) 2683/FFFFFFFFFFFF0A00 :                     ; ----------------------------------------------------------------
(1) 2684/FFFFFFFFFFFF0A00 :                     ; Video routines for 32X
(1) 2685/FFFFFFFFFFFF0A00 :                     ; ----------------------------------------------------------------
(1) 2686/FFFFFFFFFFFF0A00 :                     
(1) 2687/FFFFFFFFFFFF0A00 :                     ; --------------------------------------------------------
(1) 2688/FFFFFFFFFFFF0A00 :                     ; Video_Mars_GfxMode
(1) 2689/FFFFFFFFFFFF0A00 :                     ; Sets graphics mode on the 32X side
(1) 2690/FFFFFFFFFFFF0A00 :                     ;
(1) 2691/FFFFFFFFFFFF0A00 :                     ; Input:
(1) 2692/FFFFFFFFFFFF0A00 :                     ; d0 - Graphics mode
(1) 2693/FFFFFFFFFFFF0A00 :                     ; --------------------------------------------------------
(1) 2694/FFFFFFFFFFFF0A00 :                     
(1) 2695/FFFFFFFFFFFF0A00 :                     Video_Mars_GfxMode:
(1) 2696/FFFFFFFFFFFF0A00 :                     ; 	if MARS
(1) 2697/FFFFFFFFFFFF0A00 :                     ; 		move.w	d0,d7
(1) 2698/FFFFFFFFFFFF0A00 :                     ; 		and.w	#%00000111,d7			; Current limit: 8 Master modes
(1) 2699/FFFFFFFFFFFF0A00 :                     ; 		or.w	#$C0,d7
(1) 2700/FFFFFFFFFFFF0A00 :                     ; 		move.b	d7,(sysmars_reg+comm12+1).l
(1) 2701/FFFFFFFFFFFF0A00 :                     ; 		bsr	System_MarsUpdate
(1) 2702/FFFFFFFFFFFF0A00 :                     ; .wait_slv:	move.w	(sysmars_reg+comm14).l,d7	; Wait for Slave
(1) 2703/FFFFFFFFFFFF0A00 :                     ; 		and.w	#%00001111,d7
(1) 2704/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.wait_slv
(1) 2705/FFFFFFFFFFFF0A00 :                     ; .wait:		move.w	(sysmars_reg+comm12).l,d7	; Wait for Master
(1) 2706/FFFFFFFFFFFF0A00 :                     ; 		and.w	#%11000000,d7
(1) 2707/FFFFFFFFFFFF0A00 :                     ; 		bne.s	.wait
(1) 2708/FFFFFFFFFFFF0A00 :                     ; 	endif
(1) 2709/FFFFFFFFFFFF0A00 : 4E75                		rts
(1) 2710/FFFFFFFFFFFF0A02 :                     
(1) 2711/FFFFFFFFFFFF0A02 :                     ; --------------------------------------------------------
(1) 2712/FFFFFFFFFFFF0A02 :                     ; Video_Mars_WaitFrame
(1) 2713/FFFFFFFFFFFF0A02 :                     ; --------------------------------------------------------
(1) 2714/FFFFFFFFFFFF0A02 :                     
(1) 2715/FFFFFFFFFFFF0A02 :                     Video_Mars_WaitFrame:
(1) 2716/FFFFFFFFFFFF0A02 :                     ; 	if MARS
(1) 2717/FFFFFFFFFFFF0A02 :                     ; 		bset	#5,(sysmars_reg+comm12+1).l	; Set R bit
(1) 2718/FFFFFFFFFFFF0A02 :                     ; .wait:
(1) 2719/FFFFFFFFFFFF0A02 :                     ; ; 		move.w	(vdp_ctrl),d7
(1) 2720/FFFFFFFFFFFF0A02 :                     ; ; 		btst	#bitVBlk,d7
(1) 2721/FFFFFFFFFFFF0A02 :                     ; ; 		bne.s	.late
(1) 2722/FFFFFFFFFFFF0A02 :                     ; 		move.w	(sysmars_reg+comm12).l,d7
(1) 2723/FFFFFFFFFFFF0A02 :                     ; 		btst	#5,d7
(1) 2724/FFFFFFFFFFFF0A02 :                     ; 		bne.s	.wait
(1) 2725/FFFFFFFFFFFF0A02 :                     ; .late:
(1) 2726/FFFFFFFFFFFF0A02 :                     ; 	endif
(1) 2727/FFFFFFFFFFFF0A02 : 4E75                		rts
(1) 2728/FFFFFFFFFFFF0A04 :                     
(1) 2729/FFFFFFFFFFFF0A04 :                     ; --------------------------------------------------------
(1) 2730/FFFFFFFFFFFF0A04 :                     ; Video_LoadPal_Mars
(1) 2731/FFFFFFFFFFFF0A04 :                     ;
(1) 2732/FFFFFFFFFFFF0A04 :                     ; Load Indexed palette directly to Buffer
(1) 2733/FFFFFFFFFFFF0A04 :                     ;
(1) 2734/FFFFFFFFFFFF0A04 :                     ; d0 - Start at
(1) 2735/FFFFFFFFFFFF0A04 :                     ; d1 - Number of colors
(1) 2736/FFFFFFFFFFFF0A04 :                     ; d2 - Priority bit OFF/ON
(1) 2737/FFFFFFFFFFFF0A04 :                     ; --------------------------------------------------------
(1) 2738/FFFFFFFFFFFF0A04 :                     
(1) 2739/FFFFFFFFFFFF0A04 :                     Video_FadePal_Mars:
(1) 2741/FFFFFFFFFFFF0A04 : 4DF8 A534           		lea	(RAM_MdMarsPalFd),a6
(1) 2742/FFFFFFFFFFFF0A08 : 4278 A9AC           		clr.w	(RAM_FadeMarsTmr).w
(1) 2743/FFFFFFFFFFFF0A0C : 6004                		bra.s	vidMars_Pal
(1) 2744/FFFFFFFFFFFF0A0E :                     Video_LoadPal_Mars:
(1) 2745/FFFFFFFFFFFF0A0E : 4DF8 B500           		lea	(RAM_MdDreq+Dreq_Palette),a6
(1) 2746/FFFFFFFFFFFF0A12 :                     vidMars_Pal:
(1) 2747/FFFFFFFFFFFF0A12 : 2A48                		move.l	a0,a5
(1) 2748/FFFFFFFFFFFF0A14 : 7E00                		moveq	#0,d7
(1) 2749/FFFFFFFFFFFF0A16 : 3E00                		move.w	d0,d7
(1) 2750/FFFFFFFFFFFF0A18 : DE47                		add.w	d7,d7
(1) 2751/FFFFFFFFFFFF0A1A : DCC7                		adda	d7,a6
(1) 2752/FFFFFFFFFFFF0A1C : 3E01                		move.w	d1,d7
(1) 2753/FFFFFFFFFFFF0A1E : 9E7C 0001           		sub.w	#1,d7
(1) 2754/FFFFFFFFFFFF0A22 : 3C02                		move.w	d2,d6
(1) 2755/FFFFFFFFFFFF0A24 : CC7C 0001           		and.w	#1,d6
(1) 2756/FFFFFFFFFFFF0A28 : E25E                		ror.w	#1,d6
(1) 2757/FFFFFFFFFFFF0A2A :                     .loop:
(1) 2758/FFFFFFFFFFFF0A2A : 3A1D                		move.w	(a5)+,d5
(1) 2759/FFFFFFFFFFFF0A2C : 8A46                		or.w	d6,d5
(1) 2760/FFFFFFFFFFFF0A2E : 3CC5                		move.w	d5,(a6)+
(1) 2761/FFFFFFFFFFFF0A30 : 51CF FFF8           		dbf	d7,.loop
(1) 2763/FFFFFFFFFFFF0A34 : 4E75                		rts
(1) 2764/FFFFFFFFFFFF0A36 :                     
(1) 2765/FFFFFFFFFFFF0A36 :                     ; --------------------------------------------------------
(1) 2766/FFFFFFFFFFFF0A36 :                     ; Video_MarsPalFade
(1) 2767/FFFFFFFFFFFF0A36 :                     ;
(1) 2768/FFFFFFFFFFFF0A36 :                     ; a0 - Palette data
(1) 2769/FFFFFFFFFFFF0A36 :                     ; d0 - Number of colors
(1) 2770/FFFFFFFFFFFF0A36 :                     ; d1 - Speed
(1) 2771/FFFFFFFFFFFF0A36 :                     ;
(1) 2772/FFFFFFFFFFFF0A36 :                     ; RAM_ReqFadeMars: (WORD)
(1) 2773/FFFFFFFFFFFF0A36 :                     ; $00 - No task (or finished)
(1) 2774/FFFFFFFFFFFF0A36 :                     ; $01 - Fade in
(1) 2775/FFFFFFFFFFFF0A36 :                     ; $02 - Fade out to black
(1) 2776/FFFFFFFFFFFF0A36 :                     ;
(1) 2777/FFFFFFFFFFFF0A36 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 2778/FFFFFFFFFFFF0A36 :                     ; --------------------------------------------------------
(1) 2779/FFFFFFFFFFFF0A36 :                     
(1) 2780/FFFFFFFFFFFF0A36 :                     ; TODO: luego ver que hago con el priority bit
(1) 2781/FFFFFFFFFFFF0A36 :                     
(1) 2782/FFFFFFFFFFFF0A36 :                     Video_MarsPalFade:
(1) 2784/FFFFFFFFFFFF0A36 : 0478 0001 A9AC      		sub.w	#1,(RAM_FadeMarsTmr).w
(1) 2785/FFFFFFFFFFFF0A3C : 6A14                		bpl.s	.active
(1) 2786/FFFFFFFFFFFF0A3E : 31F8 A9AA A9AC      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 2787/FFFFFFFFFFFF0A44 : 3E38 A9A6           		move.w	(RAM_FadeMarsReq).w,d7
(1) 2788/FFFFFFFFFFFF0A48 : DE47                		add.w	d7,d7
(1) 2789/FFFFFFFFFFFF0A4A : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 2790/FFFFFFFFFFFF0A4E : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 2791/FFFFFFFFFFFF0A52 :                     .active:
(1) 2792/FFFFFFFFFFFF0A52 : 4E75                		rts
(1) 2793/FFFFFFFFFFFF0A54 :                     
(1) 2794/FFFFFFFFFFFF0A54 :                     ; --------------------------------------------
(1) 2795/FFFFFFFFFFFF0A54 :                     
(1) 2796/FFFFFFFFFFFF0A54 :                     .fade_list:
(1) 2797/FFFFFFFFFFFF0A54 : 0006                		dc.w .fade_done-.fade_list
(1) 2798/FFFFFFFFFFFF0A56 : 0008                		dc.w .fade_in-.fade_list
(1) 2799/FFFFFFFFFFFF0A58 : 00B2                		dc.w .fade_out-.fade_list
(1) 2800/FFFFFFFFFFFF0A5A :                     
(1) 2801/FFFFFFFFFFFF0A5A :                     ; --------------------------------------------
(1) 2802/FFFFFFFFFFFF0A5A :                     ; No fade or finished.
(1) 2803/FFFFFFFFFFFF0A5A :                     ; --------------------------------------------
(1) 2804/FFFFFFFFFFFF0A5A :                     
(1) 2805/FFFFFFFFFFFF0A5A :                     .fade_done:
(1) 2806/FFFFFFFFFFFF0A5A : 4E75                		rts
(1) 2807/FFFFFFFFFFFF0A5C :                     
(1) 2808/FFFFFFFFFFFF0A5C :                     ; --------------------------------------------
(1) 2809/FFFFFFFFFFFF0A5C :                     ; Fade in
(1) 2810/FFFFFFFFFFFF0A5C :                     ; --------------------------------------------
(1) 2811/FFFFFFFFFFFF0A5C :                     
(1) 2812/FFFFFFFFFFFF0A5C :                     .fade_in:
(1) 2813/FFFFFFFFFFFF0A5C : 4DF8 A534           		lea	(RAM_MdMarsPalFd),a6
(1) 2814/FFFFFFFFFFFF0A60 : 4BF8 B500           		lea	(RAM_MdDreq+Dreq_Palette),a5
(1) 2815/FFFFFFFFFFFF0A64 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 2816/FFFFFFFFFFFF0A68 : 3238 A9A8           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 2817/FFFFFFFFFFFF0A6C : 3C00                		move.w	d0,d6
(1) 2818/FFFFFFFFFFFF0A6E : 4846                		swap	d6
(1) 2819/FFFFFFFFFFFF0A70 : 907C 0001           		sub.w	#1,d0
(1) 2820/FFFFFFFFFFFF0A74 :                     .nxt_pal:
(1) 2821/FFFFFFFFFFFF0A74 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 2822/FFFFFFFFFFFF0A76 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 2823/FFFFFFFFFFFF0A78 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 2824/FFFFFFFFFFFF0A7A : 3607                		move.w	d7,d3		; RED
(1) 2825/FFFFFFFFFFFF0A7C : 3806                		move.w	d6,d4
(1) 2826/FFFFFFFFFFFF0A7E : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 2827/FFFFFFFFFFFF0A82 : C87C 001F           		and.w	#%0000000000011111,d4
(1) 2828/FFFFFFFFFFFF0A86 : C67C 001F           		and.w	#%0000000000011111,d3
(1) 2829/FFFFFFFFFFFF0A8A : D841                		add.w	d1,d4
(1) 2830/FFFFFFFFFFFF0A8C : B843                		cmp.w	d3,d4
(1) 2831/FFFFFFFFFFFF0A8E : 6506                		bcs.s	.no_red
(1) 2832/FFFFFFFFFFFF0A90 : 3803                		move.w	d3,d4
(1) 2833/FFFFFFFFFFFF0A92 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 2834/FFFFFFFFFFFF0A96 :                     .no_red:
(1) 2835/FFFFFFFFFFFF0A96 : 8C44                		or.w	d4,d6
(1) 2836/FFFFFFFFFFFF0A98 : EB49                		lsl.w	#5,d1
(1) 2837/FFFFFFFFFFFF0A9A : 3607                		move.w	d7,d3		; GREEN
(1) 2838/FFFFFFFFFFFF0A9C : 3806                		move.w	d6,d4
(1) 2839/FFFFFFFFFFFF0A9E : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 2840/FFFFFFFFFFFF0AA2 : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 2841/FFFFFFFFFFFF0AA6 : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 2842/FFFFFFFFFFFF0AAA : D841                		add.w	d1,d4
(1) 2843/FFFFFFFFFFFF0AAC : B843                		cmp.w	d3,d4
(1) 2844/FFFFFFFFFFFF0AAE : 6506                		bcs.s	.no_grn
(1) 2845/FFFFFFFFFFFF0AB0 : 3803                		move.w	d3,d4
(1) 2846/FFFFFFFFFFFF0AB2 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 2847/FFFFFFFFFFFF0AB6 :                     .no_grn:
(1) 2848/FFFFFFFFFFFF0AB6 : 8C44                		or.w	d4,d6
(1) 2849/FFFFFFFFFFFF0AB8 : EB49                		lsl.w	#5,d1
(1) 2850/FFFFFFFFFFFF0ABA : 3607                		move.w	d7,d3		; BLUE
(1) 2851/FFFFFFFFFFFF0ABC : 3806                		move.w	d6,d4
(1) 2852/FFFFFFFFFFFF0ABE : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 2853/FFFFFFFFFFFF0AC2 : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 2854/FFFFFFFFFFFF0AC6 : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 2855/FFFFFFFFFFFF0ACA : D841                		add.w	d1,d4
(1) 2856/FFFFFFFFFFFF0ACC : B843                		cmp.w	d3,d4
(1) 2857/FFFFFFFFFFFF0ACE : 6506                		bcs.s	.no_blu
(1) 2858/FFFFFFFFFFFF0AD0 : 3803                		move.w	d3,d4
(1) 2859/FFFFFFFFFFFF0AD2 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 2860/FFFFFFFFFFFF0AD6 :                     .no_blu:
(1) 2861/FFFFFFFFFFFF0AD6 : 8C44                		or.w	d4,d6
(1) 2862/FFFFFFFFFFFF0AD8 : E049                		lsr.w	#8,d1
(1) 2863/FFFFFFFFFFFF0ADA : E449                		lsr.w	#2,d1
(1) 2864/FFFFFFFFFFFF0ADC : CE7C 8000           		and.w	#$8000,d7	; Keep priority bit
(1) 2865/FFFFFFFFFFFF0AE0 : 8C47                		or.w	d7,d6
(1) 2866/FFFFFFFFFFFF0AE2 : 3AC6                		move.w	d6,(a5)+
(1) 2867/FFFFFFFFFFFF0AE4 : DCFC 0002           		adda	#2,a6
(1) 2868/FFFFFFFFFFFF0AE8 : B47C 0007           		cmp.w	#%111,d2
(1) 2869/FFFFFFFFFFFF0AEC : 6608                		bne.s	.no_fnsh
(1) 2870/FFFFFFFFFFFF0AEE : 4846                		swap	d6
(1) 2871/FFFFFFFFFFFF0AF0 : 9C7C 0001           		sub.w	#1,d6
(1) 2872/FFFFFFFFFFFF0AF4 : 4846                		swap	d6
(1) 2873/FFFFFFFFFFFF0AF6 :                     .no_fnsh:
(1) 2874/FFFFFFFFFFFF0AF6 : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 2875/FFFFFFFFFFFF0AFA : 4846                		swap	d6
(1) 2876/FFFFFFFFFFFF0AFC : 4A46                		tst.w	d6
(1) 2877/FFFFFFFFFFFF0AFE : 6604                		bne.s	.no_move
(1) 2878/FFFFFFFFFFFF0B00 : 4278 A9A6           		clr.w	(RAM_FadeMarsReq).w
(1) 2879/FFFFFFFFFFFF0B04 :                     .no_move:
(1) 2880/FFFFFFFFFFFF0B04 : 4E75                		rts
(1) 2881/FFFFFFFFFFFF0B06 :                     
(1) 2882/FFFFFFFFFFFF0B06 :                     ; --------------------------------------------
(1) 2883/FFFFFFFFFFFF0B06 :                     ; Fade out
(1) 2884/FFFFFFFFFFFF0B06 :                     ; --------------------------------------------
(1) 2885/FFFFFFFFFFFF0B06 :                     
(1) 2886/FFFFFFFFFFFF0B06 :                     .fade_out:
(1) 2887/FFFFFFFFFFFF0B06 : 4DF8 B500           		lea	(RAM_MdDreq+Dreq_Palette),a6
(1) 2888/FFFFFFFFFFFF0B0A : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 2889/FFFFFFFFFFFF0B0E : 3238 A9A8           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 2890/FFFFFFFFFFFF0B12 : 3C00                		move.w	d0,d6
(1) 2891/FFFFFFFFFFFF0B14 : 4846                		swap	d6
(1) 2892/FFFFFFFFFFFF0B16 : 907C 0001           		sub.w	#1,d0
(1) 2893/FFFFFFFFFFFF0B1A :                     .nxt_pal_o:
(1) 2894/FFFFFFFFFFFF0B1A : 4242                		clr.w	d2		; Reset finished colorbits
(1) 2895/FFFFFFFFFFFF0B1C : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 2896/FFFFFFFFFFFF0B1E : 3C07                		move.w	d7,d6
(1) 2897/FFFFFFFFFFFF0B20 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 2898/FFFFFFFFFFFF0B24 : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 2899/FFFFFFFFFFFF0B28 : 9C41                		sub.w	d1,d6
(1) 2900/FFFFFFFFFFFF0B2A : 6A06                		bpl.s	.no_red_o
(1) 2901/FFFFFFFFFFFF0B2C : 4246                		clr.w	d6
(1) 2902/FFFFFFFFFFFF0B2E : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 2903/FFFFFFFFFFFF0B32 :                     .no_red_o:
(1) 2904/FFFFFFFFFFFF0B32 : 8E46                		or.w	d6,d7
(1) 2905/FFFFFFFFFFFF0B34 : EB49                		lsl.w	#5,d1
(1) 2906/FFFFFFFFFFFF0B36 : 3C07                		move.w	d7,d6
(1) 2907/FFFFFFFFFFFF0B38 : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 2908/FFFFFFFFFFFF0B3C : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 2909/FFFFFFFFFFFF0B40 : 9C41                		sub.w	d1,d6
(1) 2910/FFFFFFFFFFFF0B42 : 6A06                		bpl.s	.no_grn_o
(1) 2911/FFFFFFFFFFFF0B44 : 4246                		clr.w	d6
(1) 2912/FFFFFFFFFFFF0B46 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 2913/FFFFFFFFFFFF0B4A :                     .no_grn_o:
(1) 2914/FFFFFFFFFFFF0B4A : 8E46                		or.w	d6,d7
(1) 2915/FFFFFFFFFFFF0B4C : EB49                		lsl.w	#5,d1
(1) 2916/FFFFFFFFFFFF0B4E : 3C07                		move.w	d7,d6
(1) 2917/FFFFFFFFFFFF0B50 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 2918/FFFFFFFFFFFF0B54 : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 2919/FFFFFFFFFFFF0B58 : 9C41                		sub.w	d1,d6
(1) 2920/FFFFFFFFFFFF0B5A : 6A06                		bpl.s	.no_blu_o
(1) 2921/FFFFFFFFFFFF0B5C : 4246                		clr.w	d6
(1) 2922/FFFFFFFFFFFF0B5E : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 2923/FFFFFFFFFFFF0B62 :                     .no_blu_o:
(1) 2924/FFFFFFFFFFFF0B62 : 8E46                		or.w	d6,d7
(1) 2925/FFFFFFFFFFFF0B64 : E049                		lsr.w	#8,d1
(1) 2926/FFFFFFFFFFFF0B66 : E449                		lsr.w	#2,d1
(1) 2927/FFFFFFFFFFFF0B68 : 3CC7                		move.w	d7,(a6)+
(1) 2928/FFFFFFFFFFFF0B6A : B47C 0007           		cmp.w	#%111,d2
(1) 2929/FFFFFFFFFFFF0B6E : 6608                		bne.s	.no_fnsh_o
(1) 2930/FFFFFFFFFFFF0B70 : 4846                		swap	d6
(1) 2931/FFFFFFFFFFFF0B72 : 9C7C 0001           		sub.w	#1,d6
(1) 2932/FFFFFFFFFFFF0B76 : 4846                		swap	d6
(1) 2933/FFFFFFFFFFFF0B78 :                     .no_fnsh_o:
(1) 2934/FFFFFFFFFFFF0B78 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 2935/FFFFFFFFFFFF0B7C : 4846                		swap	d6
(1) 2936/FFFFFFFFFFFF0B7E : 4A46                		tst.w	d6
(1) 2937/FFFFFFFFFFFF0B80 : 6604                		bne.s	.no_move_o
(1) 2938/FFFFFFFFFFFF0B82 : 4278 A9A6           		clr.w	(RAM_FadeMarsReq).w
(1) 2939/FFFFFFFFFFFF0B86 :                     .no_move_o:
(1) 2941/FFFFFFFFFFFF0B86 : 4E75                		rts
(1) 2942/FFFFFFFFFFFF0B88 :                     
     183/FFFFFFFFFFFF0B88 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF0B88 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0B88 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0B88 :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF0B88 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0B88 :                     
(1)    6/FFFFFFFFFFFF0B88 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0B88 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFF0B88 :                     ; Variables
(1)    9/FFFFFFFFFFFF0B88 :                     ; ----------------------------------------------------------------
(1)   10/FFFFFFFFFFFF0B88 :                     
(1)   11/FFFFFFFFFFFF0B88 :                     ; Controller buffer data (after calling System_Input)
(1)   12/FFFFFFFFFFFF0B88 :                     ;
(1)   13/FFFFFFFFFFFF0B88 :                     ; Type/Revision byte:
(1)   14/FFFFFFFFFFFF0B88 :                     ;
(1)   15/FFFFFFFFFFFF0B88 :                     ; ID    |
(1)   16/FFFFFFFFFFFF0B88 :                     ; $0D   | $00 - Original 3 button
(1)   17/FFFFFFFFFFFF0B88 :                     ;       | $01 - 6 button version: XYZM
(1)   18/FFFFFFFFFFFF0B88 :                     
(1)   19/FFFFFFFFFFFF0B88 : (MACRO)             		struct 0
(1)   19/FFFFFFFFFFFF0B88 : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   19/    144E :                                     dephase
(1)   19/    144E : =$144E              GLBL_LASTORG    set *
(1)   19/       0 :                                     phase 0
(1)   20/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   21/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   22/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   23/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   24/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   25/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   26/       A :                     extr_3		ds.w 1
(1)   27/       C :                     extr_4		ds.w 1
(1)   28/       E :                     extr_5		ds.w 1
(1)   29/      10 :                     sizeof_input	ds.l 0
(1)   30/      12 : (MACRO)             		endstruct
(1)   30/       0 :                                     !org GLBL_LASTORG
(1)   30/FFFFFFFFFFFF0B88 :                                     phase GLBL_LASTPC
(1)   31/FFFFFFFFFFFF0B88 :                     
(1)   32/FFFFFFFFFFFF0B88 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   33/FFFFFFFFFFFF0B88 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   34/FFFFFFFFFFFF0B88 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   35/FFFFFFFFFFFF0B88 :                     
(1)   36/FFFFFFFFFFFF0B88 :                     ; Read WORD in +on_hold or +on_press
(1)   37/FFFFFFFFFFFF0B88 : =$1                 JoyUp		equ $0001
(1)   38/FFFFFFFFFFFF0B88 : =$2                 JoyDown		equ $0002
(1)   39/FFFFFFFFFFFF0B88 : =$4                 JoyLeft		equ $0004
(1)   40/FFFFFFFFFFFF0B88 : =$8                 JoyRight	equ $0008
(1)   41/FFFFFFFFFFFF0B88 : =$10                JoyB		equ $0010
(1)   42/FFFFFFFFFFFF0B88 : =$20                JoyC		equ $0020
(1)   43/FFFFFFFFFFFF0B88 : =$40                JoyA		equ $0040
(1)   44/FFFFFFFFFFFF0B88 : =$80                JoyStart	equ $0080
(1)   45/FFFFFFFFFFFF0B88 : =$100               JoyZ		equ $0100
(1)   46/FFFFFFFFFFFF0B88 : =$200               JoyY		equ $0200
(1)   47/FFFFFFFFFFFF0B88 : =$400               JoyX		equ $0400
(1)   48/FFFFFFFFFFFF0B88 : =$800               JoyMode		equ $0800
(1)   49/FFFFFFFFFFFF0B88 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   50/FFFFFFFFFFFF0B88 : =$1                 bitJoyDown	equ 1
(1)   51/FFFFFFFFFFFF0B88 : =$2                 bitJoyLeft	equ 2
(1)   52/FFFFFFFFFFFF0B88 : =$3                 bitJoyRight	equ 3
(1)   53/FFFFFFFFFFFF0B88 : =$4                 bitJoyB		equ 4
(1)   54/FFFFFFFFFFFF0B88 : =$5                 bitJoyC		equ 5
(1)   55/FFFFFFFFFFFF0B88 : =$6                 bitJoyA		equ 6
(1)   56/FFFFFFFFFFFF0B88 : =$7                 bitJoyStart	equ 7
(1)   57/FFFFFFFFFFFF0B88 : =$8                 bitJoyZ		equ 8
(1)   58/FFFFFFFFFFFF0B88 : =$9                 bitJoyY		equ 9
(1)   59/FFFFFFFFFFFF0B88 : =$A                 bitJoyX		equ 10
(1)   60/FFFFFFFFFFFF0B88 : =$B                 bitJoyMode	equ 11
(1)   61/FFFFFFFFFFFF0B88 :                     
(1)   62/FFFFFFFFFFFF0B88 :                     ; Mega Mouse
(1)   63/FFFFFFFFFFFF0B88 :                     ; Read WORD as +on_hold or +on_press
(1)   64/FFFFFFFFFFFF0B88 : =$1                 ClickR		equ $0001
(1)   65/FFFFFFFFFFFF0B88 : =$2                 ClickL		equ $0002
(1)   66/FFFFFFFFFFFF0B88 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   67/FFFFFFFFFFFF0B88 : =$8                 ClickS		equ $0008	; (Untested)
(1)   68/FFFFFFFFFFFF0B88 : =$0                 bitClickR	equ 0
(1)   69/FFFFFFFFFFFF0B88 : =$1                 bitClickL	equ 1
(1)   70/FFFFFFFFFFFF0B88 : =$2                 bitClickM	equ 2
(1)   71/FFFFFFFFFFFF0B88 : =$3                 bitClickS	equ 3
(1)   72/FFFFFFFFFFFF0B88 :                     
(1)   73/FFFFFFFFFFFF0B88 :                     ; ====================================================================
(1)   74/FFFFFFFFFFFF0B88 :                     ; ----------------------------------------------------------------
(1)   75/FFFFFFFFFFFF0B88 :                     ; RAM section
(1)   76/FFFFFFFFFFFF0B88 :                     ; ----------------------------------------------------------------
(1)   77/FFFFFFFFFFFF0B88 :                     
(1)   78/FFFFFFFFFFFF0B88 : (MACRO)             		struct RAM_MdSystem
(1)   78/FFFFFFFFFFFF0B88 : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   78/    144E :                                     dephase
(1)   78/    144E : =$144E              GLBL_LASTORG    set *
(1)   78/FFFFFFFFFFFFB000 :                                     phase RAM_MDSYSTEM
(1)   79/FFFFFFFFFFFFB000 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   80/FFFFFFFFFFFFB040 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)   81/FFFFFFFFFFFFB240 :                     RAM_DmaCode	ds.b $200
(1)   82/FFFFFFFFFFFFB440 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   83/FFFFFFFFFFFFB444 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   84/FFFFFFFFFFFFB448 :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   85/FFFFFFFFFFFFB44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   86/FFFFFFFFFFFFB452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   87/FFFFFFFFFFFFB458 :                     RAM_MdVBlkWait	ds.w 1
(1)   88/FFFFFFFFFFFFB45A :                     sizeof_mdsys	ds.l 0
(1)   89/FFFFFFFFFFFFB45A : (MACRO)             		endstruct
(1)   89/FFFFFFFFFFFFB000 :                                     !org GLBL_LASTORG
(1)   89/FFFFFFFFFFFF0B88 :                                     phase GLBL_LASTPC
(1)   90/FFFFFFFFFFFF0B88 : (MACRO)             		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   91/FFFFFFFFFFFF0B88 :                     
(1)   92/FFFFFFFFFFFF0B88 :                     ; ====================================================================
(1)   93/FFFFFFFFFFFF0B88 :                     ; --------------------------------------------------------
(1)   94/FFFFFFFFFFFF0B88 :                     ; Init System
(1)   95/FFFFFFFFFFFF0B88 :                     ; 
(1)   96/FFFFFFFFFFFF0B88 :                     ; Uses:
(1)   97/FFFFFFFFFFFF0B88 :                     ; a0-a2,d0-d1
(1)   98/FFFFFFFFFFFF0B88 :                     ; --------------------------------------------------------
(1)   99/FFFFFFFFFFFF0B88 :                     
(1)  100/FFFFFFFFFFFF0B88 :                     System_Init:
(1)  101/FFFFFFFFFFFF0B88 : 40E7                		move.w	sr,-(sp)
(1)  102/FFFFFFFFFFFF0B8A : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  104/FFFFFFFFFFFF0B8E : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)  105/FFFFFFFFFFFF0B96 :                     .wait:
(1)  106/FFFFFFFFFFFF0B96 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)  107/FFFFFFFFFFFF0B9E : 66F6                		bne.s	.wait
(1)  108/FFFFFFFFFFFF0BA0 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  109/FFFFFFFFFFFF0BA2 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  110/FFFFFFFFFFFF0BA8 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  111/FFFFFFFFFFFF0BAE : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  112/FFFFFFFFFFFF0BB4 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)  114/FFFFFFFFFFFF0BBC : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  115/FFFFFFFFFFFF0BC0 : 31C0 B44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  116/FFFFFFFFFFFF0BC4 : 31C0 B452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  117/FFFFFFFFFFFF0BC8 : 203C FFFF 108E      		move.l	#VInt_Default,d0	; Set default ints
(1)  118/FFFFFFFFFFFF0BCE : 223C FFFF 10A4      		move.l	#Hint_Default,d1
(1)  119/FFFFFFFFFFFF0BD4 : 6100 041E           		bsr	System_SetInts
(1)  120/FFFFFFFFFFFF0BD8 : 41F8 B000           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  121/FFFFFFFFFFFF0BDC : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  122/FFFFFFFFFFFF0BE0 : 7000                		moveq	#0,d0
(1)  123/FFFFFFFFFFFF0BE2 :                     .clrinput:
(1)  124/FFFFFFFFFFFF0BE2 : 30C0                		move.w	d0,(a0)+
(1)  125/FFFFFFFFFFFF0BE4 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  126/FFFFFFFFFFFF0BE8 :                     ; 		move.l	#$56255769,d0		; Set these random values
(1)  127/FFFFFFFFFFFF0BE8 :                     ; 		move.l	#$95116102,d1
(1)  128/FFFFFFFFFFFF0BE8 :                     ; 		move.l	d0,(RAM_SysRandVal).l
(1)  129/FFFFFFFFFFFF0BE8 :                     ; 		move.l	d1,(RAM_SysRandSeed).l
(1)  130/FFFFFFFFFFFF0BE8 : 46DF                		move.w	(sp)+,sr
(1)  131/FFFFFFFFFFFF0BEA : 4E75                		rts
(1)  132/FFFFFFFFFFFF0BEC :                     
(1)  133/FFFFFFFFFFFF0BEC :                     ; --------------------------------------------------------
(1)  134/FFFFFFFFFFFF0BEC :                     ; System_WaitFrame
(1)  135/FFFFFFFFFFFF0BEC :                     ;
(1)  136/FFFFFFFFFFFF0BEC :                     ; Call this on the loop your current screen.
(1)  137/FFFFFFFFFFFF0BEC :                     ;
(1)  138/FFFFFFFFFFFF0BEC :                     ; Calling this it will:
(1)  139/FFFFFFFFFFFF0BEC :                     ; - Update the controller data
(1)  140/FFFFFFFFFFFF0BEC :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  141/FFFFFFFFFFFF0BEC :                     ;   data from from RAM to VDP, RV bit is not required.
(1)  142/FFFFFFFFFFFF0BEC :                     ;
(1)  143/FFFFFFFFFFFF0BEC :                     ; But before entering VBlank:
(1)  144/FFFFFFFFFFFF0BEC :                     ; - The DREQ data stored here will be transfered
(1)  145/FFFFFFFFFFFF0BEC :                     ; to the 32X side
(1)  146/FFFFFFFFFFFF0BEC :                     ; --------------------------------------------------------
(1)  147/FFFFFFFFFFFF0BEC :                     
(1)  148/FFFFFFFFFFFF0BEC :                     System_WaitFrame:
(1)  149/FFFFFFFFFFFF0BEC : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Inside VBlank?
(1)  150/FFFFFFFFFFFF0BF2 : 3816                .wait_lag:	move.w	(a6),d4			; then it's a lag frame.
(1)  151/FFFFFFFFFFFF0BF4 : 0804 0003           		btst	#bitVBlk,d4
(1)  152/FFFFFFFFFFFF0BF8 : 66F8                		bne.s	.wait_lag
(1)  153/FFFFFFFFFFFF0BFA : 6100 00B8           		bsr	System_MarsUpdate	; Update 32X stuff
(1)  154/FFFFFFFFFFFF0BFE : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Check if we are on DISPLAY
(1)  155/FFFFFFFFFFFF0C04 : 3816                .wait_in:	move.w	(a6),d4
(1)  156/FFFFFFFFFFFF0C06 : 0804 0003           		btst	#bitVBlk,d4
(1)  157/FFFFFFFFFFFF0C0A : 67F8                		beq.s	.wait_in
(1)  158/FFFFFFFFFFFF0C0C : 6100 00D2           		bsr	System_Input		; Read inputs FIRST
(1)  159/FFFFFFFFFFFF0C10 :                     	; *** DMA'd Scroll and Palette
(1)  160/FFFFFFFFFFFF0C10 :                     	;
(1)  161/FFFFFFFFFFFF0C10 :                     	; The palette is transferred at the end so
(1)  162/FFFFFFFFFFFF0C10 :                     	; it doesn't show the dots on screen. (hopefully)
(1)  163/FFFFFFFFFFFF0C10 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  164/FFFFFFFFFFFF0C16 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  165/FFFFFFFFFFFF0C1A : 1E38 A9AF           		move.b	(RAM_VdpRegs+1),d7
(1)  166/FFFFFFFFFFFF0C1E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  167/FFFFFFFFFFFF0C22 : 3C87                		move.w	d7,(a6)
(1)  168/FFFFFFFFFFFF0C24 : 617E                		bsr	System_DmaEnter_RAM
(1)  169/FFFFFFFFFFFF0C26 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  170/FFFFFFFFFFFF0C2C : 2CBC 96CD 9582      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  171/FFFFFFFFFFFF0C32 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  172/FFFFFFFFFFFF0C36 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  173/FFFFFFFFFFFF0C3A : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  174/FFFFFFFFFFFF0C3E : 3C9F                		move.w	(sp)+,(a6)
(1)  175/FFFFFFFFFFFF0C40 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  176/FFFFFFFFFFFF0C46 : 2CBC 96CB 95A2      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  177/FFFFFFFFFFFF0C4C : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  178/FFFFFFFFFFFF0C50 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  179/FFFFFFFFFFFF0C54 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  180/FFFFFFFFFFFF0C58 : 3C9F                		move.w	(sp)+,(a6)
(1)  181/FFFFFFFFFFFF0C5A : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  182/FFFFFFFFFFFF0C60 : 2CBC 96CF 95EA      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  183/FFFFFFFFFFFF0C66 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  184/FFFFFFFFFFFF0C6A : 3CBC 7800           		move.w	#$7800,(a6)
(1)  185/FFFFFFFFFFFF0C6E : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  186/FFFFFFFFFFFF0C72 : 3C9F                		move.w	(sp)+,(a6)
(1)  187/FFFFFFFFFFFF0C74 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  188/FFFFFFFFFFFF0C7A : 2CBC 96D2 951A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  189/FFFFFFFFFFFF0C80 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  190/FFFFFFFFFFFF0C84 : 3CBC C000           		move.w	#$C000,(a6)
(1)  191/FFFFFFFFFFFF0C88 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  192/FFFFFFFFFFFF0C8C : 3C9F                		move.w	(sp)+,(a6)
(1)  193/FFFFFFFFFFFF0C8E : 6118                		bsr	System_DmaExit_RAM
(1)  194/FFFFFFFFFFFF0C90 : 3E3C 8100           		move.w	#$8100,d7
(1)  195/FFFFFFFFFFFF0C94 : 1E38 A9AF           		move.b	(RAM_VdpRegs+1).w,d7
(1)  196/FFFFFFFFFFFF0C98 : 3C87                		move.w	d7,(a6)
(1)  197/FFFFFFFFFFFF0C9A : 06B8 0000 0001 9740 		add.l	#1,(RAM_Framecount).w
(1)  198/FFFFFFFFFFFF0CA2 : 4E75                		rts
(1)  199/FFFFFFFFFFFF0CA4 :                     
(1)  200/FFFFFFFFFFFF0CA4 :                     ; --------------------------------------------------------
(1)  201/FFFFFFFFFFFF0CA4 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  202/FFFFFFFFFFFF0CA4 :                     ; (from): ROM or RAM
(1)  203/FFFFFFFFFFFF0CA4 :                     ;
(1)  204/FFFFFFFFFFFF0CA4 :                     ; Call to these labels BEFORE and AFTER doing
(1)  205/FFFFFFFFFFFF0CA4 :                     ; DMA-to-VDP transers.
(1)  206/FFFFFFFFFFFF0CA4 :                     ; These calls are not needed for FILL or COPY.
(1)  207/FFFFFFFFFFFF0CA4 :                     ;
(1)  208/FFFFFFFFFFFF0CA4 :                     ; ** For stock Genesis:
(1)  209/FFFFFFFFFFFF0CA4 :                     ;  | The Z80 cannot read from ROM while the
(1)  210/FFFFFFFFFFFF0CA4 :                     ;  | DMA ROM-to-VDP transfer is active.
(1)  211/FFFFFFFFFFFF0CA4 :                     ;  | THIS INCLUDES RAM TRANSFERS.
(1)  212/FFFFFFFFFFFF0CA4 :                     ;  | ** Solution:
(1)  213/FFFFFFFFFFFF0CA4 :                     ;  | STOP the Z80 entirely OR:
(1)  214/FFFFFFFFFFFF0CA4 :                     ;  | First stop, set a flag and turn ON the
(1)  215/FFFFFFFFFFFF0CA4 :                     ;  | Z80 again, if the Z80 reads the flag it
(1)  216/FFFFFFFFFFFF0CA4 :                     ;  | should be stuck on a loop until you clear
(1)  217/FFFFFFFFFFFF0CA4 :                     ;  | that flag from here after finishing your
(1)  218/FFFFFFFFFFFF0CA4 :                     ;  | DMA transfer(s)
(1)  219/FFFFFFFFFFFF0CA4 :                     ;
(1)  220/FFFFFFFFFFFF0CA4 :                     ; ** For the 32X:
(1)  221/FFFFFFFFFFFF0CA4 :                     ;  | SAME rule for the Genesis, but this time the
(1)  222/FFFFFFFFFFFF0CA4 :                     ;  | ROM-to-VDP transfer requires the RV bit to be set.
(1)  223/FFFFFFFFFFFF0CA4 :                     ;  | (RAM transfers doesn't require this bit at all.)
(1)  224/FFFFFFFFFFFF0CA4 :                     ;  | Setting the RV bit blocks the SH2 from accessing
(1)  225/FFFFFFFFFFFF0CA4 :                     ;  | the ROM area, THIS ALSO affects the Z80.
(1)  226/FFFFFFFFFFFF0CA4 :                     ;  | ** Solution:
(1)  227/FFFFFFFFFFFF0CA4 :                     ;  | First, make sure the SH2 isn't reading from ROM
(1)  228/FFFFFFFFFFFF0CA4 :                     ;  | while the bit is active, or it will read garbage
(1)  229/FFFFFFFFFFFF0CA4 :                     ;  | data.
(1)  230/FFFFFFFFFFFF0CA4 :                     ;  | In the case where you need to read from ROM
(1)  231/FFFFFFFFFFFF0CA4 :                     ;  | a lot (Playing PWM's for example):
(1)  232/FFFFFFFFFFFF0CA4 :                     ;  | First request an CMD interrupt and tell the
(1)  233/FFFFFFFFFFFF0CA4 :                     ;  | SH2 to backup a small amount of sample data
(1)  234/FFFFFFFFFFFF0CA4 :                     ;  | and temporally relocate the read point to the
(1)  235/FFFFFFFFFFFF0CA4 :                     ;  | backup until you make another
(1)  236/FFFFFFFFFFFF0CA4 :                     ;  | interrupt telling that you finished here and set
(1)  237/FFFFFFFFFFFF0CA4 :                     ;  | RV back to 0.
(1)  238/FFFFFFFFFFFF0CA4 :                     ;
(1)  239/FFFFFFFFFFFF0CA4 :                     ; This is where you put your Sound driver's Z80 stop
(1)  240/FFFFFFFFFFFF0CA4 :                     ; or pause calls go here
(1)  241/FFFFFFFFFFFF0CA4 :                     ; --------------------------------------------------------
(1)  242/FFFFFFFFFFFF0CA4 :                     
(1)  243/FFFFFFFFFFFF0CA4 :                     System_DmaEnter_RAM:
(1)  244/FFFFFFFFFFFF0CA4 : 6000 F454           		bra	gemaDmaPause
(1)  245/FFFFFFFFFFFF0CA8 :                     System_DmaExit_RAM:
(1)  246/FFFFFFFFFFFF0CA8 : 6000 F478           		bra	gemaDmaResume
(1)  247/FFFFFFFFFFFF0CAC :                     
(1)  248/FFFFFFFFFFFF0CAC :                     ; --------------------------------------------------------
(1)  249/FFFFFFFFFFFF0CAC :                     
(1)  250/FFFFFFFFFFFF0CAC :                     System_DmaEnter_ROM:
(1)  251/FFFFFFFFFFFF0CAC : 6000 F48E           		bra	gemaDmaPauseRom
(1)  252/FFFFFFFFFFFF0CB0 :                     System_DmaExit_ROM:
(1)  253/FFFFFFFFFFFF0CB0 : 6000 F4BA           		bra	gemaDmaResumeRom
(1)  254/FFFFFFFFFFFF0CB4 :                     
(1)  255/FFFFFFFFFFFF0CB4 :                     ; ====================================================================
(1)  256/FFFFFFFFFFFF0CB4 :                     ; ----------------------------------------------------------------
(1)  257/FFFFFFFFFFFF0CB4 :                     ; SEGA CD / CD32X ONLY
(1)  258/FFFFFFFFFFFF0CB4 :                     ; ----------------------------------------------------------------
(1)  259/FFFFFFFFFFFF0CB4 :                     
(1)  260/FFFFFFFFFFFF0CB4 :                     ; --------------------------------------------------------
(1)  261/FFFFFFFFFFFF0CB4 :                     ; System_McdSubTask
(1)  262/FFFFFFFFFFFF0CB4 :                     ;
(1)  263/FFFFFFFFFFFF0CB4 :                     ; Request task to Sub-CPU
(1)  264/FFFFFFFFFFFF0CB4 :                     ; ** Exits without waiting to finish, call
(1)  265/FFFFFFFFFFFF0CB4 :                     ; System_McdSubWait after this if you need to
(1)  266/FFFFFFFFFFFF0CB4 :                     ; syncronize **
(1)  267/FFFFFFFFFFFF0CB4 :                     ;
(1)  268/FFFFFFFFFFFF0CB4 :                     ; Input:
(1)  269/FFFFFFFFFFFF0CB4 :                     ; d0 - Task number
(1)  270/FFFFFFFFFFFF0CB4 :                     ;
(1)  271/FFFFFFFFFFFF0CB4 :                     ; Uses:
(1)  272/FFFFFFFFFFFF0CB4 :                     ; a6
(1)  273/FFFFFFFFFFFF0CB4 :                     ; --------------------------------------------------------
(1)  274/FFFFFFFFFFFF0CB4 :                     
(1)  372/FFFFFFFFFFFF0CB4 :                     
(1)  373/FFFFFFFFFFFF0CB4 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF0CB4 :                     ; ----------------------------------------------------------------
(1)  375/FFFFFFFFFFFF0CB4 :                     ; 32X ONLY
(1)  376/FFFFFFFFFFFF0CB4 :                     ; ----------------------------------------------------------------
(1)  377/FFFFFFFFFFFF0CB4 :                     
(1)  378/FFFFFFFFFFFF0CB4 :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF0CB4 :                     ; System_MarsUpdate
(1)  380/FFFFFFFFFFFF0CB4 :                     ; --------------------------------------------------------
(1)  381/FFFFFFFFFFFF0CB4 :                     
(1)  382/FFFFFFFFFFFF0CB4 :                     System_MarsUpdate:
(1)  384/FFFFFFFFFFFF0CB4 : 41F8 B500           		lea	(RAM_MdDreq),a0		; Send DREQ
(1)  385/FFFFFFFFFFFF0CB8 : 303C 0200           		move.w	#sizeof_dreq,d0
(1)  386/FFFFFFFFFFFF0CBC : 4EF9 FFFF 10A6      		jmp	(System_RomSendDreq).l	; <-- EXTERNAL JUMP to $880000 area
(1)  390/FFFFFFFFFFFF0CC2 :                     
(1)  391/FFFFFFFFFFFF0CC2 :                     ; --------------------------------------------------------
(1)  392/FFFFFFFFFFFF0CC2 :                     ; System_GrabRamCode
(1)  393/FFFFFFFFFFFF0CC2 :                     ;
(1)  394/FFFFFFFFFFFF0CC2 :                     ; MCD, 32X and CD32X only.
(1)  395/FFFFFFFFFFFF0CC2 :                     ;
(1)  396/FFFFFFFFFFFF0CC2 :                     ; Send new code to the USER side of RAM and
(1)  397/FFFFFFFFFFFF0CC2 :                     ; jump into it.
(1)  398/FFFFFFFFFFFF0CC2 :                     ;
(1)  399/FFFFFFFFFFFF0CC2 :                     ; ** FOR SEGA CD/CD+32X
(1)  400/FFFFFFFFFFFF0CC2 :                     ; Input:
(1)  401/FFFFFFFFFFFF0CC2 :                     ; a0 -
(1)  402/FFFFFFFFFFFF0CC2 :                     ;
(1)  403/FFFFFFFFFFFF0CC2 :                     ; ** FOR SEGA 32X
(1)  404/FFFFFFFFFFFF0CC2 :                     ; a0 - Filename string 8-bytes
(1)  405/FFFFFFFFFFFF0CC2 :                     ;
(1)  406/FFFFFFFFFFFF0CC2 :                     ; Input:
(1)  407/FFFFFFFFFFFF0CC2 :                     ; d0 - Location of the RAM code to copy
(1)  408/FFFFFFFFFFFF0CC2 :                     ;      in the $880000/$900000 areas
(1)  409/FFFFFFFFFFFF0CC2 :                     ; --------------------------------------------------------
(1)  410/FFFFFFFFFFFF0CC2 :                     
(1)  411/FFFFFFFFFFFF0CC2 :                     System_GrabRamCode:
(1)  420/FFFFFFFFFFFF0CC2 : 80BC 0088 0000      		or.l	#$880000,d0
(1)  421/FFFFFFFFFFFF0CC8 : 2040                		move.l	d0,a0
(1)  422/FFFFFFFFFFFF0CCA : 43F9 FFFF 1800      		lea	(RAM_UserCode),a1
(1)  423/FFFFFFFFFFFF0CD0 :                     ; 		move.w	(a0)+,d7
(1)  424/FFFFFFFFFFFF0CD0 :                     ; 		subq.w	#1,d7
(1)  425/FFFFFFFFFFFF0CD0 :                     ; 		bra *
(1)  426/FFFFFFFFFFFF0CD0 : 3E3C 3FFF           		move.w	#(MAX_UserCode)-1,d7	; TODO: TEMPORAL SIZE
(1)  427/FFFFFFFFFFFF0CD4 :                     .copyme2:
(1)  428/FFFFFFFFFFFF0CD4 : 12D8                		move.b	(a0)+,(a1)+
(1)  429/FFFFFFFFFFFF0CD6 : 51CF FFFC           		dbf	d7,.copyme2
(1)  430/FFFFFFFFFFFF0CDA : 4EF9 FFFF 1800      		jmp	(RAM_UserCode).l
(1)  434/FFFFFFFFFFFF0CE0 :                     
(1)  435/FFFFFFFFFFFF0CE0 :                     ; ====================================================================
(1)  436/FFFFFFFFFFFF0CE0 :                     ; ----------------------------------------------------------------
(1)  437/FFFFFFFFFFFF0CE0 :                     ; Subroutines
(1)  438/FFFFFFFFFFFF0CE0 :                     ; ----------------------------------------------------------------
(1)  439/FFFFFFFFFFFF0CE0 :                     
(1)  440/FFFFFFFFFFFF0CE0 :                     ; --------------------------------------------------------
(1)  441/FFFFFFFFFFFF0CE0 :                     ; System_Input
(1)  442/FFFFFFFFFFFF0CE0 :                     ;
(1)  443/FFFFFFFFFFFF0CE0 :                     ; Reads data from the Controller ports
(1)  444/FFFFFFFFFFFF0CE0 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  445/FFFFFFFFFFFF0CE0 :                     ;
(1)  446/FFFFFFFFFFFF0CE0 :                     ; Uses:
(1)  447/FFFFFFFFFFFF0CE0 :                     ; d5-d7,a5-a6
(1)  448/FFFFFFFFFFFF0CE0 :                     ; --------------------------------------------------------
(1)  449/FFFFFFFFFFFF0CE0 :                     
(1)  450/FFFFFFFFFFFF0CE0 :                     System_Input:
(1)  451/FFFFFFFFFFFF0CE0 :                     ; 		move.w	#$0100,(z80_bus).l
(1)  452/FFFFFFFFFFFF0CE0 :                     .wait:
(1)  453/FFFFFFFFFFFF0CE0 :                     ; 		btst	#0,(z80_bus).l
(1)  454/FFFFFFFFFFFF0CE0 :                     ; 		bne.s	.wait
(1)  455/FFFFFFFFFFFF0CE0 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  456/FFFFFFFFFFFF0CE6 : 4DF8 B000           		lea	(RAM_InputData),a6	; a6 - Output
(1)  457/FFFFFFFFFFFF0CEA : 6108                		bsr.s	.this_one
(1)  458/FFFFFFFFFFFF0CEC : DAFC 0002           		adda	#2,a5
(1)  459/FFFFFFFFFFFF0CF0 : DCFC 0010           		adda	#sizeof_input,a6
(1)  460/FFFFFFFFFFFF0CF4 :                     ; 		bsr.s	.this_one
(1)  461/FFFFFFFFFFFF0CF4 :                     ; ; 		move.w	#0,(z80_bus).l
(1)  462/FFFFFFFFFFFF0CF4 :                     ; 		rts
(1)  463/FFFFFFFFFFFF0CF4 :                     
(1)  464/FFFFFFFFFFFF0CF4 :                     ; --------------------------------------------------------
(1)  465/FFFFFFFFFFFF0CF4 :                     ; Read port
(1)  466/FFFFFFFFFFFF0CF4 :                     ;
(1)  467/FFFFFFFFFFFF0CF4 :                     ; a5 - Current port
(1)  468/FFFFFFFFFFFF0CF4 :                     ; a6 - Output data
(1)  469/FFFFFFFFFFFF0CF4 :                     ; --------------------------------------------------------
(1)  470/FFFFFFFFFFFF0CF4 :                     
(1)  471/FFFFFFFFFFFF0CF4 :                     .this_one:
(1)  472/FFFFFFFFFFFF0CF4 : 6100 0166           		bsr	.pick_id
(1)  473/FFFFFFFFFFFF0CF8 : 1C87                		move.b	d7,pad_id(a6)
(1)  474/FFFFFFFFFFFF0CFA : 0C47 000F           		cmpi.w	#$0F,d7
(1)  475/FFFFFFFFFFFF0CFE : 670E                		beq.s	.exit
(1)  476/FFFFFFFFFFFF0D00 : 0247 000F           		andi.w	#$0F,d7
(1)  477/FFFFFFFFFFFF0D04 : DE47                		add.w	d7,d7
(1)  478/FFFFFFFFFFFF0D06 : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  479/FFFFFFFFFFFF0D0A : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  480/FFFFFFFFFFFF0D0E :                     .exit:
(1)  481/FFFFFFFFFFFF0D0E : 422E 0001           		clr.b	pad_ver(a6)
(1)  482/FFFFFFFFFFFF0D12 : 4E75                		rts
(1)  483/FFFFFFFFFFFF0D14 :                     
(1)  484/FFFFFFFFFFFF0D14 :                     ; --------------------------------------------------------
(1)  485/FFFFFFFFFFFF0D14 :                     ; Grab ID
(1)  486/FFFFFFFFFFFF0D14 :                     ; --------------------------------------------------------
(1)  487/FFFFFFFFFFFF0D14 :                     
(1)  488/FFFFFFFFFFFF0D14 :                     .list:
(1)  489/FFFFFFFFFFFF0D14 : FFFA                		dc.w .exit-.list	; $00
(1)  490/FFFFFFFFFFFF0D16 : FFFA                		dc.w .exit-.list
(1)  491/FFFFFFFFFFFF0D18 : FFFA                		dc.w .exit-.list
(1)  492/FFFFFFFFFFFF0D1A : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  493/FFFFFFFFFFFF0D1C : FFFA                		dc.w .exit-.list	; $04
(1)  494/FFFFFFFFFFFF0D1E : FFFA                		dc.w .exit-.list
(1)  495/FFFFFFFFFFFF0D20 : FFFA                		dc.w .exit-.list
(1)  496/FFFFFFFFFFFF0D22 : FFFA                		dc.w .exit-.list
(1)  497/FFFFFFFFFFFF0D24 : FFFA                		dc.w .exit-.list	; $08
(1)  498/FFFFFFFFFFFF0D26 : FFFA                		dc.w .exit-.list
(1)  499/FFFFFFFFFFFF0D28 : FFFA                		dc.w .exit-.list
(1)  500/FFFFFFFFFFFF0D2A : FFFA                		dc.w .exit-.list
(1)  501/FFFFFFFFFFFF0D2C : FFFA                		dc.w .exit-.list	; $0C
(1)  502/FFFFFFFFFFFF0D2E : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  503/FFFFFFFFFFFF0D30 : FFFA                		dc.w .exit-.list
(1)  504/FFFFFFFFFFFF0D32 : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  505/FFFFFFFFFFFF0D34 :                     
(1)  506/FFFFFFFFFFFF0D34 :                     ; --------------------------------------------------------
(1)  507/FFFFFFFFFFFF0D34 :                     ; ID $03
(1)  508/FFFFFFFFFFFF0D34 :                     ;
(1)  509/FFFFFFFFFFFF0D34 :                     ; Mega Mouse
(1)  510/FFFFFFFFFFFF0D34 :                     ; --------------------------------------------------------
(1)  511/FFFFFFFFFFFF0D34 :                     
(1)  512/FFFFFFFFFFFF0D34 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  513/FFFFFFFFFFFF0D34 :                     .id_03:
(1)  514/FFFFFFFFFFFF0D34 : 1ABC 0020           		move.b	#$20,(a5)
(1)  515/FFFFFFFFFFFF0D38 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  516/FFFFFFFFFFFF0D3E : 0815 0004           		btst	#4,(a5)
(1)  517/FFFFFFFFFFFF0D42 : 6700 0094           		beq.w	.invalid
(1)  518/FFFFFFFFFFFF0D46 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  519/FFFFFFFFFFFF0D4A : 4E71                		nop
(1)  520/FFFFFFFFFFFF0D4C : 4E71                		nop
(1)  521/FFFFFFFFFFFF0D4E : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  522/FFFFFFFFFFFF0D52 : 4E71                		nop
(1)  523/FFFFFFFFFFFF0D54 : 4E71                		nop
(1)  524/FFFFFFFFFFFF0D56 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  525/FFFFFFFFFFFF0D5A : 4E71                		nop
(1)  526/FFFFFFFFFFFF0D5C : 4E71                		nop
(1)  527/FFFFFFFFFFFF0D5E : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  528/FFFFFFFFFFFF0D60 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  529/FFFFFFFFFFFF0D64 : 4E71                		nop
(1)  530/FFFFFFFFFFFF0D66 : 4E71                		nop
(1)  531/FFFFFFFFFFFF0D68 : 1E15                		move.b	(a5),d7
(1)  532/FFFFFFFFFFFF0D6A : 0247 000F            		andi.w	#%1111,d7
(1)  533/FFFFFFFFFFFF0D6E : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  534/FFFFFFFFFFFF0D72 : BF46                		eor.w	d7,d6
(1)  535/FFFFFFFFFFFF0D74 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  536/FFFFFFFFFFFF0D78 : CC47                		and.w	d7,d6
(1)  537/FFFFFFFFFFFF0D7A : 3D46 0004           		move.w	d6,on_press(a6)
(1)  538/FFFFFFFFFFFF0D7E : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  539/FFFFFFFFFFFF0D82 : 4E71                		nop
(1)  540/FFFFFFFFFFFF0D84 : 4E71                		nop
(1)  541/FFFFFFFFFFFF0D86 : 1E15                		move.b	(a5),d7
(1)  542/FFFFFFFFFFFF0D88 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  543/FFFFFFFFFFFF0D8C : 0247 000F           		andi.w	#%1111,d7
(1)  544/FFFFFFFFFFFF0D90 : E94F                		lsl.w	#4,d7
(1)  545/FFFFFFFFFFFF0D92 : 4E71                		nop
(1)  546/FFFFFFFFFFFF0D94 : 1C15                		move.b	(a5),d6
(1)  547/FFFFFFFFFFFF0D96 : 0246 000F           		andi.w	#%1111,d6
(1)  548/FFFFFFFFFFFF0D9A : 8E46                		or.w	d6,d7
(1)  549/FFFFFFFFFFFF0D9C : 0805 0000           		btst    #0,d5
(1)  550/FFFFFFFFFFFF0DA0 : 6704                		beq.s	.x_neg
(1)  551/FFFFFFFFFFFF0DA2 : 4407                		neg.b	d7
(1)  552/FFFFFFFFFFFF0DA4 : 4447                		neg.w	d7
(1)  553/FFFFFFFFFFFF0DA6 :                     .x_neg:
(1)  554/FFFFFFFFFFFF0DA6 : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  555/FFFFFFFFFFFF0DAA : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  556/FFFFFFFFFFFF0DAE : 4E71                		nop
(1)  557/FFFFFFFFFFFF0DB0 : 4E71                		nop
(1)  558/FFFFFFFFFFFF0DB2 : 1E15                		move.b	(a5),d7
(1)  559/FFFFFFFFFFFF0DB4 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  560/FFFFFFFFFFFF0DB8 : 0247 000F           		andi.w	#%1111,d7
(1)  561/FFFFFFFFFFFF0DBC : E94F                		lsl.w	#4,d7
(1)  562/FFFFFFFFFFFF0DBE : 4E71                		nop
(1)  563/FFFFFFFFFFFF0DC0 : 1C15                		move.b	(a5),d6
(1)  564/FFFFFFFFFFFF0DC2 : 0246 000F           		andi.w	#%1111,d6
(1)  565/FFFFFFFFFFFF0DC6 : 8E46                		or.w	d6,d7
(1)  566/FFFFFFFFFFFF0DC8 : 0805 0001           		btst    #1,d5
(1)  567/FFFFFFFFFFFF0DCC : 6704                		beq.s	.y_neg
(1)  568/FFFFFFFFFFFF0DCE : 4407                		neg.b	d7
(1)  569/FFFFFFFFFFFF0DD0 : 4447                		neg.w	d7
(1)  570/FFFFFFFFFFFF0DD2 :                     .y_neg:
(1)  571/FFFFFFFFFFFF0DD2 : 4447                		neg.w	d7		; Reverse Y
(1)  572/FFFFFFFFFFFF0DD4 : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  573/FFFFFFFFFFFF0DD8 :                     
(1)  574/FFFFFFFFFFFF0DD8 :                     .invalid:
(1)  575/FFFFFFFFFFFF0DD8 : 1ABC 0060           		move.b	#$60,(a5)
(1)  576/FFFFFFFFFFFF0DDC : 4E75                		rts
(1)  577/FFFFFFFFFFFF0DDE :                     
(1)  578/FFFFFFFFFFFF0DDE :                     ; --------------------------------------------------------
(1)  579/FFFFFFFFFFFF0DDE :                     ; ID $0D
(1)  580/FFFFFFFFFFFF0DDE :                     ;
(1)  581/FFFFFFFFFFFF0DDE :                     ; Normal controller: 3 button or 6 button.
(1)  582/FFFFFFFFFFFF0DDE :                     ; --------------------------------------------------------
(1)  583/FFFFFFFFFFFF0DDE :                     
(1)  584/FFFFFFFFFFFF0DDE :                     .id_0D:
(1)  585/FFFFFFFFFFFF0DDE : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  586/FFFFFFFFFFFF0DE2 : 4E71                		nop
(1)  587/FFFFFFFFFFFF0DE4 : 4E71                		nop
(1)  588/FFFFFFFFFFFF0DE6 : 1A15                		move.b	(a5),d5
(1)  589/FFFFFFFFFFFF0DE8 : 0245 003F           		andi.w	#%00111111,d5
(1)  590/FFFFFFFFFFFF0DEC : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  591/FFFFFFFFFFFF0DF0 : 4E71                		nop
(1)  592/FFFFFFFFFFFF0DF2 : 4E71                		nop
(1)  593/FFFFFFFFFFFF0DF4 : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  594/FFFFFFFFFFFF0DF6 : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  595/FFFFFFFFFFFF0DF8 : 0247 00C0           		andi.w	#%11000000,d7
(1)  596/FFFFFFFFFFFF0DFC : 8E45                		or.w	d5,d7
(1)  597/FFFFFFFFFFFF0DFE : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  598/FFFFFFFFFFFF0E02 : 4647                		not.w	d7
(1)  599/FFFFFFFFFFFF0E04 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  600/FFFFFFFFFFFF0E08 : BF05                		eor.b	d7,d5
(1)  601/FFFFFFFFFFFF0E0A : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  602/FFFFFFFFFFFF0E0E : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  603/FFFFFFFFFFFF0E12 : CA07                		and.b	d7,d5
(1)  604/FFFFFFFFFFFF0E14 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  605/FFFFFFFFFFFF0E18 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  606/FFFFFFFFFFFF0E1C : 4E71                		nop
(1)  607/FFFFFFFFFFFF0E1E : 4E71                		nop
(1)  608/FFFFFFFFFFFF0E20 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  609/FFFFFFFFFFFF0E22 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  610/FFFFFFFFFFFF0E26 : 4E71                  		nop
(1)  611/FFFFFFFFFFFF0E28 : 4E71                  		nop
(1)  612/FFFFFFFFFFFF0E2A : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  613/FFFFFFFFFFFF0E2C : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  614/FFFFFFFFFFFF0E30 : 4E71                 		nop
(1)  615/FFFFFFFFFFFF0E32 : 4E71                 		nop
(1)  616/FFFFFFFFFFFF0E34 : 0246 000F           		andi.w	#$F,d6
(1)  617/FFFFFFFFFFFF0E38 : E44E                		lsr.w	#2,d6
(1)  618/FFFFFFFFFFFF0E3A : 0246 0001           		andi.w	#1,d6
(1)  619/FFFFFFFFFFFF0E3E : 6716                		beq.s	.oldpad
(1)  620/FFFFFFFFFFFF0E40 : 4607                		not.b	d7
(1)  621/FFFFFFFFFFFF0E42 : 0247 000F            		andi.w	#%1111,d7
(1)  622/FFFFFFFFFFFF0E46 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  623/FFFFFFFFFFFF0E4A : BF05                		eor.b	d7,d5
(1)  624/FFFFFFFFFFFF0E4C : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  625/FFFFFFFFFFFF0E50 : CA07                		and.b	d7,d5
(1)  626/FFFFFFFFFFFF0E52 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  627/FFFFFFFFFFFF0E56 :                     .oldpad:
(1)  628/FFFFFFFFFFFF0E56 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  629/FFFFFFFFFFFF0E5A : 4E75                		rts
(1)  630/FFFFFFFFFFFF0E5C :                     
(1)  631/FFFFFFFFFFFF0E5C :                     ; --------------------------------------------------------
(1)  632/FFFFFFFFFFFF0E5C :                     ; Grab ID
(1)  633/FFFFFFFFFFFF0E5C :                     ; --------------------------------------------------------
(1)  634/FFFFFFFFFFFF0E5C :                     
(1)  635/FFFFFFFFFFFF0E5C :                     .pick_id:
(1)  636/FFFFFFFFFFFF0E5C : 7E00                		moveq	#0,d7
(1)  637/FFFFFFFFFFFF0E5E : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  638/FFFFFFFFFFFF0E62 : 4E71                		nop
(1)  639/FFFFFFFFFFFF0E64 : 4E71                		nop
(1)  640/FFFFFFFFFFFF0E66 : 610A                		bsr	.read
(1)  641/FFFFFFFFFFFF0E68 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  642/FFFFFFFFFFFF0E6C : 4E71                		nop
(1)  643/FFFFFFFFFFFF0E6E : 4E71                		nop
(1)  644/FFFFFFFFFFFF0E70 : DE47                		add.w	d7,d7
(1)  645/FFFFFFFFFFFF0E72 :                     .read:
(1)  646/FFFFFFFFFFFF0E72 : 1A15                		move.b	(a5),d5
(1)  647/FFFFFFFFFFFF0E74 : 1C05                		move.b	d5,d6
(1)  648/FFFFFFFFFFFF0E76 : 0206 000C           		andi.b	#$C,d6
(1)  649/FFFFFFFFFFFF0E7A : 6702                		beq.s	.step_1
(1)  650/FFFFFFFFFFFF0E7C : 5247                		addq.w	#1,d7
(1)  651/FFFFFFFFFFFF0E7E :                     .step_1:
(1)  652/FFFFFFFFFFFF0E7E : DE47                		add.w	d7,d7
(1)  653/FFFFFFFFFFFF0E80 : 1C05                		move.b	d5,d6
(1)  654/FFFFFFFFFFFF0E82 : 0246 0003           		andi.w	#3,d6
(1)  655/FFFFFFFFFFFF0E86 : 6702                		beq.s	.step_2
(1)  656/FFFFFFFFFFFF0E88 : 5247                		addq.w	#1,d7
(1)  657/FFFFFFFFFFFF0E8A :                     .step_2:
(1)  658/FFFFFFFFFFFF0E8A : 4E75                		rts
(1)  659/FFFFFFFFFFFF0E8C :                     
(1)  660/FFFFFFFFFFFF0E8C :                     ; --------------------------------------------------------
(1)  661/FFFFFFFFFFFF0E8C :                     ; System_Random
(1)  662/FFFFFFFFFFFF0E8C :                     ; 
(1)  663/FFFFFFFFFFFF0E8C :                     ; Makes a random number.
(1)  664/FFFFFFFFFFFF0E8C :                     ; 
(1)  665/FFFFFFFFFFFF0E8C :                     ; Input:
(1)  666/FFFFFFFFFFFF0E8C :                     ; d0 | Seed
(1)  667/FFFFFFFFFFFF0E8C :                     ;
(1)  668/FFFFFFFFFFFF0E8C :                     ; Output:
(1)  669/FFFFFFFFFFFF0E8C :                     ; d0 | LONG
(1)  670/FFFFFFFFFFFF0E8C :                     ;
(1)  671/FFFFFFFFFFFF0E8C :                     ; Uses:
(1)  672/FFFFFFFFFFFF0E8C :                     ; d4-d5
(1)  673/FFFFFFFFFFFF0E8C :                     ; --------------------------------------------------------
(1)  674/FFFFFFFFFFFF0E8C :                     
(1)  675/FFFFFFFFFFFF0E8C :                     System_Random:
(1)  676/FFFFFFFFFFFF0E8C : 2F04                		move.l	d4,-(sp)
(1)  677/FFFFFFFFFFFF0E8E : 2838 B444           		move.l	(RAM_SysRandSeed).w,d4
(1)  678/FFFFFFFFFFFF0E92 : 6606                		bne.s	.good_s
(1)  679/FFFFFFFFFFFF0E94 : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  680/FFFFFFFFFFFF0E9A :                     .good_s:
(1)  681/FFFFFFFFFFFF0E9A : 2004                		move.l	d4,d0
(1)  682/FFFFFFFFFFFF0E9C : EB9C                		rol.l	#5,d4
(1)  683/FFFFFFFFFFFF0E9E : D880                		add.l	d0,d4
(1)  684/FFFFFFFFFFFF0EA0 : E644                		asr.w	#3,d4
(1)  685/FFFFFFFFFFFF0EA2 : D880                		add.l	d0,d4
(1)  686/FFFFFFFFFFFF0EA4 : 3004                		move.w	d4,d0
(1)  687/FFFFFFFFFFFF0EA6 : 4844                		swap	d4
(1)  688/FFFFFFFFFFFF0EA8 : D044                		add.w	d4,d0
(1)  689/FFFFFFFFFFFF0EAA : 3800                		move.w	d0,d4
(1)  690/FFFFFFFFFFFF0EAC : 4844                		swap	d4
(1)  691/FFFFFFFFFFFF0EAE : 21C4 B444           		move.l	d4,(RAM_SysRandSeed).w
(1)  692/FFFFFFFFFFFF0EB2 : 281F                		move.l	(sp)+,d4
(1)  693/FFFFFFFFFFFF0EB4 : 4E75                		rts
(1)  694/FFFFFFFFFFFF0EB6 :                     
(1)  695/FFFFFFFFFFFF0EB6 :                     ; --------------------------------------------------------
(1)  696/FFFFFFFFFFFF0EB6 :                     ; System_SineWave_Cos / System_SineWave
(1)  697/FFFFFFFFFFFF0EB6 :                     ;
(1)  698/FFFFFFFFFFFF0EB6 :                     ; Get sinewave value
(1)  699/FFFFFFFFFFFF0EB6 :                     ;
(1)  700/FFFFFFFFFFFF0EB6 :                     ; Input:
(1)  701/FFFFFFFFFFFF0EB6 :                     ; d0 | WORD - Tan
(1)  702/FFFFFFFFFFFF0EB6 :                     ; d1 | WORD - Multiply
(1)  703/FFFFFFFFFFFF0EB6 :                     ;
(1)  704/FFFFFFFFFFFF0EB6 :                     ; Output:
(1)  705/FFFFFFFFFFFF0EB6 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  706/FFFFFFFFFFFF0EB6 :                     ; --------------------------------------------------------
(1)  707/FFFFFFFFFFFF0EB6 :                     
(1)  708/FFFFFFFFFFFF0EB6 :                     ; TODO: improve this.
(1)  709/FFFFFFFFFFFF0EB6 :                     System_SineWave_Cos:
(1)  710/FFFFFFFFFFFF0EB6 : 48A7 8000           		movem.w	d0,-(sp)
(1)  711/FFFFFFFFFFFF0EBA : 7400                		moveq	#0,d2
(1)  712/FFFFFFFFFFFF0EBC : 0600 0040           		addi.b	#$40,d0
(1)  713/FFFFFFFFFFFF0EC0 : 1400                		move.b	d0,d2
(1)  714/FFFFFFFFFFFF0EC2 : E302                		asl.b	#1,d2
(1)  715/FFFFFFFFFFFF0EC4 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  716/FFFFFFFFFFFF0EC8 : C4C1                		mulu.w	d1,d2
(1)  717/FFFFFFFFFFFF0ECA : 8000                		or.b	d0,d0
(1)  718/FFFFFFFFFFFF0ECC : 6A02                		bpl.s	.dont_neg
(1)  719/FFFFFFFFFFFF0ECE : 4482                		neg.l	d2
(1)  720/FFFFFFFFFFFF0ED0 :                     .dont_neg:
(1)  721/FFFFFFFFFFFF0ED0 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  722/FFFFFFFFFFFF0ED4 : 4E75                		rts
(1)  723/FFFFFFFFFFFF0ED6 :                     
(1)  724/FFFFFFFFFFFF0ED6 :                     System_SineWave:
(1)  725/FFFFFFFFFFFF0ED6 : 48A7 8000           		movem.w	d0,-(sp)
(1)  726/FFFFFFFFFFFF0EDA : 0240 007F           		andi.w	#$7F,d0
(1)  727/FFFFFFFFFFFF0EDE : E340                		asl.w	#1,d0
(1)  728/FFFFFFFFFFFF0EE0 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  729/FFFFFFFFFFFF0EE4 : C4C1                		mulu.w	d1,d2
(1)  730/FFFFFFFFFFFF0EE6 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  731/FFFFFFFFFFFF0EEA : 5182                		subq.l	#8,d2
(1)  732/FFFFFFFFFFFF0EEC : 8000                		or.b	d0,d0
(1)  733/FFFFFFFFFFFF0EEE : 6A02                		bpl.s	.dont_neg
(1)  734/FFFFFFFFFFFF0EF0 : 4482                		neg.l	d2
(1)  735/FFFFFFFFFFFF0EF2 :                     .dont_neg:
(1)  736/FFFFFFFFFFFF0EF2 : 4E75                		rts
(1)  737/FFFFFFFFFFFF0EF4 :                     
(1)  738/FFFFFFFFFFFF0EF4 : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  739/FFFFFFFFFFFF0F0A : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  740/FFFFFFFFFFFF0F1E : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  741/FFFFFFFFFFFF0F32 : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  742/FFFFFFFFFFFF0F46 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  743/FFFFFFFFFFFF0F5A : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  744/FFFFFFFFFFFF0F6E : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  745/FFFFFFFFFFFF0F80 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  746/FFFFFFFFFFFF0F94 : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  747/FFFFFFFFFFFF0FA8 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  748/FFFFFFFFFFFF0FBC : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  749/FFFFFFFFFFFF0FD0 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  750/FFFFFFFFFFFF0FE4 : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  751/FFFFFFFFFFFF0FF4 :                     
(1)  752/FFFFFFFFFFFF0FF4 :                     ; --------------------------------------------------------
(1)  753/FFFFFFFFFFFF0FF4 :                     ; System_SetInts
(1)  754/FFFFFFFFFFFF0FF4 :                     ;
(1)  755/FFFFFFFFFFFF0FF4 :                     ; Set new interrputs
(1)  756/FFFFFFFFFFFF0FF4 :                     ;
(1)  757/FFFFFFFFFFFF0FF4 :                     ; d0 | LONG - VBlank
(1)  758/FFFFFFFFFFFF0FF4 :                     ; d1 | LONG - HBlank
(1)  759/FFFFFFFFFFFF0FF4 :                     ;
(1)  760/FFFFFFFFFFFF0FF4 :                     ; Uses:
(1)  761/FFFFFFFFFFFF0FF4 :                     ; d4
(1)  762/FFFFFFFFFFFF0FF4 :                     ;
(1)  763/FFFFFFFFFFFF0FF4 :                     ; Notes:
(1)  764/FFFFFFFFFFFF0FF4 :                     ; Writing 0 or a negative number will skip change
(1)  765/FFFFFFFFFFFF0FF4 :                     ; to the interrupt pointer
(1)  766/FFFFFFFFFFFF0FF4 :                     ; --------------------------------------------------------
(1)  767/FFFFFFFFFFFF0FF4 :                     
(1)  768/FFFFFFFFFFFF0FF4 :                     System_SetInts:
(1)  769/FFFFFFFFFFFF0FF4 : 2800                		move.l	d0,d4
(1)  770/FFFFFFFFFFFF0FF6 : 670C                		beq.s	.novint
(1)  771/FFFFFFFFFFFF0FF8 : 6B0A                		bmi.s	.novint
(1)  772/FFFFFFFFFFFF0FFA : 88BC 0088 0000      		or.l	#$880000,d4
(1)  773/FFFFFFFFFFFF1000 : 21C4 B44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  774/FFFFFFFFFFFF1004 :                     .novint:
(1)  775/FFFFFFFFFFFF1004 : 2801                		move.l	d1,d4
(1)  776/FFFFFFFFFFFF1006 : 670C                		beq.s	.nohint
(1)  777/FFFFFFFFFFFF1008 : 6B0A                		bmi.s	.nohint
(1)  778/FFFFFFFFFFFF100A : 88BC 0088 0000      		or.l	#$880000,d4
(1)  779/FFFFFFFFFFFF1010 : 21C4 B454           		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  780/FFFFFFFFFFFF1014 :                     .nohint:
(1)  781/FFFFFFFFFFFF1014 : 4E75                		rts
(1)  782/FFFFFFFFFFFF1016 :                     
(1)  783/FFFFFFFFFFFF1016 :                     ; --------------------------------------------------------
(1)  784/FFFFFFFFFFFF1016 :                     ; System_SramInit
(1)  785/FFFFFFFFFFFF1016 :                     ; 
(1)  786/FFFFFFFFFFFF1016 :                     ; Init save data
(1)  787/FFFFFFFFFFFF1016 :                     ; 
(1)  788/FFFFFFFFFFFF1016 :                     ; Uses:
(1)  789/FFFFFFFFFFFF1016 :                     ; a4,d4-d5
(1)  790/FFFFFFFFFFFF1016 :                     ; --------------------------------------------------------
(1)  791/FFFFFFFFFFFF1016 :                     
(1)  792/FFFFFFFFFFFF1016 :                     ; TODO: Check if RV bit is needed here...
(1)  793/FFFFFFFFFFFF1016 :                     System_SramInit:
(1)  794/FFFFFFFFFFFF1016 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  795/FFFFFFFFFFFF101E : 49F9 0020 0001      		lea	($200001).l,a4
(1)  796/FFFFFFFFFFFF1024 : 7800                		moveq	#0,d4
(1)  797/FFFFFFFFFFFF1026 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  798/FFFFFFFFFFFF102A :                     .initsave:
(1)  799/FFFFFFFFFFFF102A : 1884                		move.b	d4,(a4)
(1)  800/FFFFFFFFFFFF102C : D8FC 0002           		adda	#2,a4
(1)  801/FFFFFFFFFFFF1030 : 51CD FFF8           		dbf	d5,.initsave
(1)  802/FFFFFFFFFFFF1034 : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  803/FFFFFFFFFFFF103C : 4E75                		rts
(1)  804/FFFFFFFFFFFF103E :                     
(1)  805/FFFFFFFFFFFF103E :                     ; ====================================================================
(1)  806/FFFFFFFFFFFF103E :                     ; ----------------------------------------------------------------
(1)  807/FFFFFFFFFFFF103E :                     ; Screen mode subroutines
(1)  808/FFFFFFFFFFFF103E :                     ; ----------------------------------------------------------------
(1)  809/FFFFFFFFFFFF103E :                     
(1)  810/FFFFFFFFFFFF103E :                     ; --------------------------------------------------------
(1)  811/FFFFFFFFFFFF103E :                     ; Initialize current screen mode
(1)  812/FFFFFFFFFFFF103E :                     ; --------------------------------------------------------
(1)  813/FFFFFFFFFFFF103E :                     
(1)  814/FFFFFFFFFFFF103E :                     Mode_Init:
(1)  815/FFFFFFFFFFFF103E : 4EB9 FFFF 02A2      		jsr	(Video_Clear).l
(1)  816/FFFFFFFFFFFF1044 : 49F8 CD00           		lea	(RAM_ScreenBuff),a4
(1)  817/FFFFFFFFFFFF1048 : 3A3C 13FF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  818/FFFFFFFFFFFF104C : 7800                		moveq	#0,d4
(1)  819/FFFFFFFFFFFF104E :                     .clr:
(1)  820/FFFFFFFFFFFF104E : 38C4                		move.w	d4,(a4)+
(1)  821/FFFFFFFFFFFF1050 : 51CD FFFC           		dbf	d5,.clr
(1)  822/FFFFFFFFFFFF1054 :                     
(1)  823/FFFFFFFFFFFF1054 :                     ; 	if MARS|MARSCD
(1)  824/FFFFFFFFFFFF1054 :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a4	; Patch
(1)  825/FFFFFFFFFFFF1054 :                     ; 		move.w	#MAX_MODELS-1,d5
(1)  826/FFFFFFFFFFFF1054 :                     ; .clr_mdls:
(1)  827/FFFFFFFFFFFF1054 :                     ; 		move.l	d4,mdl_data(a4)
(1)  828/FFFFFFFFFFFF1054 :                     ; 		adda	#sizeof_mdlobj,a4
(1)  829/FFFFFFFFFFFF1054 :                     ; 		dbf	d5,.clr_mdls
(1)  830/FFFFFFFFFFFF1054 :                     ; 	endif
(1)  831/FFFFFFFFFFFF1054 :                     
(1)  832/FFFFFFFFFFFF1054 : 303C 0000           		move.w	#0,d0
(1)  833/FFFFFFFFFFFF1058 : 6000 F9A6           		bra	Video_Mars_GfxMode
(1)  834/FFFFFFFFFFFF105C :                     
(1)  835/FFFFFFFFFFFF105C :                     ; --------------------------------------------------------
(1)  836/FFFFFFFFFFFF105C :                     
(1)  837/FFFFFFFFFFFF105C :                     Mode_FadeOut:
(1)  838/FFFFFFFFFFFF105C : 31FC 0002 A99E      		move.w	#2,(RAM_FadeMdReq).w
(1)  839/FFFFFFFFFFFF1062 : 31FC 0002 A9A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  840/FFFFFFFFFFFF1068 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  841/FFFFFFFFFFFF106E : 31FC 0004 A9A8      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  842/FFFFFFFFFFFF1074 : 31FC 0000 A9A2      		move.w	#0,(RAM_FadeMdDelay).w
(1)  843/FFFFFFFFFFFF107A : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  844/FFFFFFFFFFFF1080 :                     .loopw:
(1)  845/FFFFFFFFFFFF1080 : 6100 FB6A           		bsr	System_WaitFrame
(1)  846/FFFFFFFFFFFF1084 : 4EB9 FFFF 05FA      		jsr	(Video_RunFade).l
(1)  847/FFFFFFFFFFFF108A : 66F4                		bne.s	.loopw
(1)  848/FFFFFFFFFFFF108C : 4E75                		rts
(1)  849/FFFFFFFFFFFF108E :                     
(1)  850/FFFFFFFFFFFF108E :                     ; ====================================================================
(1)  851/FFFFFFFFFFFF108E :                     ; ----------------------------------------------------------------
(1)  852/FFFFFFFFFFFF108E :                     ; Default interrupts
(1)  853/FFFFFFFFFFFF108E :                     ; ----------------------------------------------------------------
(1)  854/FFFFFFFFFFFF108E :                     
(1)  855/FFFFFFFFFFFF108E :                     ; --------------------------------------------------------
(1)  856/FFFFFFFFFFFF108E :                     ; VBlank
(1)  857/FFFFFFFFFFFF108E :                     ; --------------------------------------------------------
(1)  858/FFFFFFFFFFFF108E :                     
(1)  859/FFFFFFFFFFFF108E :                     VInt_Default:
(1)  860/FFFFFFFFFFFF108E : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  861/FFFFFFFFFFFF1092 : 6100 FC4C           		bsr	System_Input
(1)  862/FFFFFFFFFFFF1096 : 06B8 0000 0001 9740 		addi.l	#1,(RAM_FrameCount).w
(1)  863/FFFFFFFFFFFF109E : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  864/FFFFFFFFFFFF10A2 : 4E73                		rte
(1)  865/FFFFFFFFFFFF10A4 :                     
(1)  866/FFFFFFFFFFFF10A4 :                     ; --------------------------------------------------------
(1)  867/FFFFFFFFFFFF10A4 :                     ; HBlank
(1)  868/FFFFFFFFFFFF10A4 :                     ; --------------------------------------------------------
(1)  869/FFFFFFFFFFFF10A4 :                     
(1)  870/FFFFFFFFFFFF10A4 :                     HInt_Default:
(1)  871/FFFFFFFFFFFF10A4 : 4E73                		rte
(1)  872/FFFFFFFFFFFF10A6 :                     
(1)  873/FFFFFFFFFFFF10A6 :                     ; ====================================================================
(1)  874/FFFFFFFFFFFF10A6 :                     ; ----------------------------------------------------------------
(1)  875/FFFFFFFFFFFF10A6 :                     ; System data
(1)  876/FFFFFFFFFFFF10A6 :                     ; ----------------------------------------------------------------
(1)  877/FFFFFFFFFFFF10A6 :                     
     184/FFFFFFFFFFFF10A6 :                     		include "system/mars/md_dreq.asm"	; Tested on HW, works.
(1)    1/FFFFFFFFFFFF10A6 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF10A6 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF10A6 :                     ; DREQ transfer section
(1)    4/FFFFFFFFFFFF10A6 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF10A6 :                     
(1)    6/FFFFFFFFFFFF10A6 :                     ; --------------------------------------------------------
(1)    7/FFFFFFFFFFFF10A6 :                     ; System_MarsSendDreq
(1)    8/FFFFFFFFFFFF10A6 :                     ;
(1)    9/FFFFFFFFFFFF10A6 :                     ; Transfers data to the 32X using DREQ
(1)   10/FFFFFFFFFFFF10A6 :                     ;
(1)   11/FFFFFFFFFFFF10A6 :                     ; Input:
(1)   12/FFFFFFFFFFFF10A6 :                     ; a0.l | Source data to transfer
(1)   13/FFFFFFFFFFFF10A6 :                     ; d0.w | Size aligned by 8, MUST end with 0 or 8.
(1)   14/FFFFFFFFFFFF10A6 :                     ;
(1)   15/FFFFFFFFFFFF10A6 :                     ; Uses:
(1)   16/FFFFFFFFFFFF10A6 :                     ; a4-a5/d5-d7
(1)   17/FFFFFFFFFFFF10A6 :                     ;
(1)   18/FFFFFFFFFFFF10A6 :                     ; Notes:
(1)   19/FFFFFFFFFFFF10A6 :                     ; Only call this during DISPLAY, not during VBlank.
(1)   20/FFFFFFFFFFFF10A6 :                     ; --------------------------------------------------------
(1)   21/FFFFFFFFFFFF10A6 :                     
(1)   22/FFFFFFFFFFFF10A6 :                     System_RomSendDreq:
(1)   23/FFFFFFFFFFFF10A6 : 40C7                		move.w	sr,d7
(1)   24/FFFFFFFFFFFF10A8 : 46FC 2700           		move.w	#$2700,sr
(1)   25/FFFFFFFFFFFF10AC : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   26/FFFFFFFFFFFF10B2 : 49ED 0012           		lea	dreqfifo(a5),a4
(1)   27/FFFFFFFFFFFF10B6 :                     ; 		btst	#7,comm12(a5)
(1)   28/FFFFFFFFFFFF10B6 :                     ; 		bne.s	.bad
(1)   29/FFFFFFFFFFFF10B6 :                     ; 		btst	#7,dreqctl+1(a5)	; If FIFO got full, skip.
(1)   30/FFFFFFFFFFFF10B6 :                     ; 		bne.s	.bad
(1)   31/FFFFFFFFFFFF10B6 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1)   32/FFFFFFFFFFFF10BC : 3C00                		move.w	d0,d6			; d6 - Size in bytes
(1)   33/FFFFFFFFFFFF10BE : E24E                		lsr.w	#1,d6			; (length/2)
(1)   34/FFFFFFFFFFFF10C0 : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1)   35/FFFFFFFFFFFF10C4 : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1)   36/FFFFFFFFFFFF10C6 : E44D                		lsr.w	#2,d5
(1)   37/FFFFFFFFFFFF10C8 : 0445 0001           		subi.w	#1,d5
(1)   38/FFFFFFFFFFFF10CC : 08ED 0000 0003      		bset	#0,standby(a5)		; Set CMD interrupt to MASTER
(1)   39/FFFFFFFFFFFF10D2 : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)		; Wait signal bit from Master
(1)   40/FFFFFFFFFFFF10D8 : 67F8                		beq.s	.wait_bit
(1)   41/FFFFFFFFFFFF10DA : 08AD 0006 002C      		bclr	#6,comm12(a5)		; Clear it for later.
(1)   42/FFFFFFFFFFFF10E0 : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S
(1)   43/FFFFFFFFFFFF10E6 : 3898                .l0:		move.w  (a0)+,(a4)		; *** CRITICAL PART ***
(1)   44/FFFFFFFFFFFF10E8 : 3898                		move.w  (a0)+,(a4)
(1)   45/FFFFFFFFFFFF10EA : 3898                		move.w  (a0)+,(a4)
(1)   46/FFFFFFFFFFFF10EC : 3898                		move.w  (a0)+,(a4)
(1)   47/FFFFFFFFFFFF10EE : 51CD FFF6           		dbf	d5,.l0
(1)   48/FFFFFFFFFFFF10F2 :                     	; POPULAR 32X EMULATORS WILL GET STUCK HERE.
(1)   49/FFFFFFFFFFFF10F2 :                     	;
(1)   50/FFFFFFFFFFFF10F2 :                     	; ONLY ares-emu SUPPORTS THE
(1)   51/FFFFFFFFFFFF10F2 :                     	; DMA INTERRUPT. (AS OF THIS COMMENT)
(1)   52/FFFFFFFFFFFF10F2 : 082D 0006 002C      .wait_bit_e:	btst	#6,comm12(a5)		; Wait EXIT signal.
(1)   53/FFFFFFFFFFFF10F8 : 67F8                		beq.s	.wait_bit_e
(1)   54/FFFFFFFFFFFF10FA : 08AD 0006 002C      		bclr	#6,comm12(a5)		; Clear again.
(1)   55/FFFFFFFFFFFF1100 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Disable 68S
(1)   56/FFFFFFFFFFFF1106 : 46C7                		move.w	d7,sr
(1)   57/FFFFFFFFFFFF1108 : 4E75                		rts
(1)   58/FFFFFFFFFFFF110A :                     
     185/FFFFFFFFFFFF110A :                     ; ---------------------------------------------
     187/FFFFFFFFFFFF110A :                     .end:
     188/FFFFFFFFFFFF110A : (MACRO)             		erreport "RAM TOP-CODE SUBS",(.end-RAM_SystemCode),MAX_SysCode
     189/    19D0 :                     		dephase
     191/    19D0 :                     Md_SysCode_e:
     192/    19D0 :                     		align 2
     193/    19D0 :                     
     194/    19D0 :                     ; ---------------------------------------------
     195/    19D0 :                     ; JUMP code for switching screen modes
     196/    19D0 :                     ; ---------------------------------------------
     197/    19D0 :                     
     198/    19D0 :                     Md_JumpCode:
     200/FFFFFFFFFFFFFE00 :                     		phase RAM_ScreenJump
     201/FFFFFFFFFFFFFE00 :                     mdjumpcode_s:
     203/FFFFFFFFFFFFFE00 :                     
     204/FFFFFFFFFFFFFE00 :                     ; ---------------------------------------------
     205/FFFFFFFFFFFFFE00 :                     ; Read screen modes
     206/FFFFFFFFFFFFFE00 :                     ;
     207/FFFFFFFFFFFFFE00 :                     ; MD/PICO:
     208/FFFFFFFFFFFFFE00 :                     ; Direct ROM jump
     209/FFFFFFFFFFFFFE00 :                     ;
     210/FFFFFFFFFFFFFE00 :                     ; SEGA 32X:
     211/FFFFFFFFFFFFFE00 :                     ; 880000+ jump
     212/FFFFFFFFFFFFFE00 :                     ;
     213/FFFFFFFFFFFFFE00 :                     ; SEGACD/CD32X:
     214/FFFFFFFFFFFFFE00 :                     ; Read file from disc, transfer to RAM or
     215/FFFFFFFFFFFFFE00 :                     ; WordRAM and jump there.
     216/FFFFFFFFFFFFFE00 :                     ; ---------------------------------------------
     217/FFFFFFFFFFFFFE00 :                     
     218/FFFFFFFFFFFFFE00 :                     Md_ReadModes:
     219/FFFFFFFFFFFFFE00 : 7000                		moveq	#0,d0
     220/FFFFFFFFFFFFFE02 : 3038 C500           		move.w	(RAM_Glbl_Scrn).w,d0
     221/FFFFFFFFFFFFFE06 : C07C 000F           		and.w	#%1111,d0		; <-- current limit
     227/FFFFFFFFFFFFFE0A : E548                		lsl.w	#2,d0			; * 4
     228/FFFFFFFFFFFFFE0C : 203B 000A           		move.l	.pick_boot(pc,d0.w),d0	; d0 - code location to transfer
     229/FFFFFFFFFFFFFE10 : 4EB9 FFFF 0CC2      		jsr	(System_GrabRamCode).l
     236/FFFFFFFFFFFFFE16 : 60E8                		bra.s	Md_ReadModes		; Loop on RTS
     237/FFFFFFFFFFFFFE18 :                     
     238/FFFFFFFFFFFFFE18 :                     .pick_boot:
     239/FFFFFFFFFFFFFE18 :                     	; size $10
     251/FFFFFFFFFFFFFE18 : 0000 38F8           		dc.l Md_Screen00
     252/FFFFFFFFFFFFFE1C : 0000 38F8           		dc.l Md_Screen00
     253/FFFFFFFFFFFFFE20 : 0000 38F8           		dc.l Md_Screen00
     254/FFFFFFFFFFFFFE24 : 0000 38F8           		dc.l Md_Screen00
     256/FFFFFFFFFFFFFE28 :                     
     257/FFFFFFFFFFFFFE28 :                     ; ---------------------------------------------
     259/FFFFFFFFFFFFFE28 :                     mdjumpcode_e:
     260/FFFFFFFFFFFFFE28 : (MACRO)             		erreport "RAM JUMP-CODE SUBS",(mdjumpcode_e-mdjumpcode_s),$180
     261/    19F8 :                     		dephase
     263/    19F8 :                     Md_JumpCode_e:
     264/    19F8 :                     		align 2
     265/    19F8 :                     
     266/    19F8 :                     ; ====================================================================
     267/    19F8 :                     ; --------------------------------------------------------
     268/    19F8 :                     ; Misc. stuff FOR CARTRIDGE ONLY:
     269/    19F8 :                     ;
     270/    19F8 :                     ; Genesis, Sega 32X and Pico
     271/    19F8 :                     ; --------------------------------------------------------
     272/    19F8 :                     
     274/    19F8 :                     
     276/  8819F8 :                     		phase $880000+*
     278/  8819F8 :                     Z80_CODE:	include "sound/gema_zdrv.asm"		; Called once
(1)    1/  8819F8 :                     ; ====================================================================
(1)    2/  8819F8 :                     ; --------------------------------------------------------
(1)    3/  8819F8 :                     ; GEMA/Nikona Z80 code v0.5
(1)    4/  8819F8 :                     ; (C)2023 GenesisFan64
(1)    5/  8819F8 :                     ;
(1)    6/  8819F8 :                     ; TIP:
(1)    7/  8819F8 :                     ; For the 32X place this code on the 880000 area
(1)    8/  8819F8 :                     ; as this is only loaded once.
(1)    9/  8819F8 :                     ; --------------------------------------------------------
(1)   10/  8819F8 :                     
(1)   11/  8819F8 :                     Z80_TOP:
(1)   12/  8819F8 :                     		cpu Z80		; [AS] Enter Z80
(1)   13/       0 :                     		phase 0		; [AS]
(1)   14/       0 : (MACRO)             		org 0
(1)   15/       0 :                     
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     ; SETTINGS
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   21/       0 : =11H                MAX_TRKCHN	equ 17		; !! Max Internal tracker channels: 4PSG + 6FM + 7PWM (**AFFECTS 32X SIDE)
(1)   22/       0 : =8H                 MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) (**AFFECTS WAVE QUALITY)
(1)   23/       0 : =40H                MAX_RCACH	equ 40h		; Max storage for ROM pattern data *1-BIT SIZES ONLY, MUST BE ALIGNED*
(1)   24/       0 : =10H                MAX_TBLSIZE	equ 10h		; Max size for chip tables
(1)   25/       0 : =FH                 MAX_INS		equ 15		; Max Cache'd ROM instruments per track
(1)   26/       0 : =18H                MAX_BLOCKS	equ 24		; Max Cache'd ROM blocks per track
(1)   27/       0 : =FH                 MAX_HEADS	equ 15		; Max Cache'd ROM headers per track
(1)   28/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   29/       0 :                     
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     ; Structs
(1)   32/       0 :                     ; --------------------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 :                     ; trkBuff struct: 00h-30h
(1)   35/       0 :                     ; unused bytes are free.
(1)   36/       0 :                     ;
(1)   37/       0 :                     ; trk_Status: %ERPx xxx0
(1)   38/       0 :                     ; E - enabled
(1)   39/       0 :                     ; R - Init|Restart track
(1)   40/       0 :                     ; P - refill-on-playback
(1)   41/       0 :                     ; 0 - Use global sub-beat
(1)   42/       0 : =0H                 trk_status	equ 00h	; ** Track Status and flags (MUST BE at 00h)
(1)   43/       0 : =1H                 trk_seqId	equ 01h ; ** Track ID to play.
(1)   44/       0 : =2H                 trk_setBlk	equ 02h	; ** Start on this block
(1)   45/       0 : =3H                 trk_tickSet	equ 03h	; ** Ticks for this track
(1)   46/       0 : =4H                 trk_Blocks	equ 04h ; [W] Current track's blocks
(1)   47/       0 : =6H                 trk_Patt	equ 06h ; [W] Current track's heads and patterns
(1)   48/       0 : =8H                 trk_Instr	equ 08h ; [W] Current track's instruments
(1)   49/       0 : =AH                 trk_Read	equ 0Ah	; [W] Track current pattern-read pos
(1)   50/       0 : =CH                 trk_Rows	equ 0Ch	; [W] Track current row length
(1)   51/       0 : =EH                 trk_cachHalf	equ 0Eh ; ROM-cache halfcheck
(1)   52/       0 : =FH                 trk_cachInc	equ 0Fh ; ROM-cache increment
(1)   53/       0 : =10H                trk_rowPause	equ 10h	; Row-pause timer
(1)   54/       0 : =11H                trk_tickTmr	equ 11h	; Ticks timer
(1)   55/       0 : =12H                trk_currBlk	equ 12h	; Current block
(1)   56/       0 : =13H                trk_Panning	equ 13h ; Global panning for this track %LR000000
(1)   57/       0 : =14H                trk_Priority	equ 14h ; Priority level for this buffer
(1)   58/       0 : =15H                trk_BankIns	equ 15h
(1)   59/       0 : =16H                trk_BankBlk	equ 16h
(1)   60/       0 : =17H                trk_BankHead	equ 17h
(1)   61/       0 : =1CH                trk_MaxChnls	equ 1Ch	; MAX avaialble channels
(1)   62/       0 : =1DH                trk_MaxBlks	equ 1Dh ;     ----      blocks
(1)   63/       0 : =1EH                trk_MaxHdrs	equ 1Eh ;     ----      headers
(1)   64/       0 : =1FH                trk_MaxIns	equ 1Fh ;     ----      intruments
(1)   65/       0 : =20H                trk_RomCPatt	equ 20h ; [3b] ROM current pattern data to be cache'd
(1)   66/       0 : =23H                trk_RomPatt	equ 23h ; [3b] ROM TOP pattern data
(1)   67/       0 : =26H                trk_ChnList	equ 26h ; ** [W] Pointer to channel list for this buffer
(1)   68/       0 : =28H                trk_ChnCBlk	equ 28h ; ** [W] Pointer to block storage
(1)   69/       0 : =2AH                trk_ChnCHead	equ 2Ah ; ** [W] Pointer to header storage
(1)   70/       0 : =2CH                trk_ChnCIns	equ 2Ch	; ** [W] Pointer to intrument storage (ALWAYS used)
(1)   71/       0 : =2EH                trk_ChnCach	equ 2Eh	; ** [W] Pointer to pattern storage
(1)   72/       0 :                     
(1)   73/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   74/       0 :                     ;
(1)   75/       0 :                     ; chnl_Flags: LR00evin
(1)   76/       0 :                     ; LR - Left/Right panning bits (REVERSE: 0-ON 1-OFF)
(1)   77/       0 :                     ; e  - Effect*
(1)   78/       0 :                     ; v  - Volume*
(1)   79/       0 :                     ; i  - Intrument*
(1)   80/       0 :                     ; n  - Note*
(1)   81/       0 :                     ; * Gets cleared later.
(1)   82/       0 :                     
(1)   83/       0 : =0H                 chnl_Flags	equ 0	; Playback flags
(1)   84/       0 : =1H                 chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   85/       0 : =2H                 chnl_Note	equ 2
(1)   86/       0 : =3H                 chnl_Ins	equ 3	; Starting from 01h
(1)   87/       0 : =4H                 chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   88/       0 : =5H                 chnl_EffId	equ 5
(1)   89/       0 : =6H                 chnl_EffArg	equ 6
(1)   90/       0 : =7H                 chnl_Type	equ 7	; Impulse-note update bits
(1)   91/       0 :                     
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     ; Variables
(1)   94/       0 :                     ; --------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 :                     ; Z80 opcode labels for the wave playback routines:
(1)   97/       0 : =0H                 zopcNop		equ	00h
(1)   98/       0 : =8H                 zopcEx		equ	08h
(1)   99/       0 : =C9H                zopcRet		equ 	0C9h
(1)  100/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  101/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  102/       0 :                     
(1)  103/       0 :                     ; PSG external control
(1)  104/       0 :                     ; GEMS style.
(1)  105/       0 : =0H                 COM		equ	0
(1)  106/       0 : =4H                 LEV		equ	4
(1)  107/       0 : =8H                 ATK		equ	8
(1)  108/       0 : =CH                 DKY		equ	12
(1)  109/       0 : =10H                SLV		equ	16
(1)  110/       0 : =14H                RRT		equ	20
(1)  111/       0 : =18H                MODE		equ	24
(1)  112/       0 : =1CH                DTL		equ	28
(1)  113/       0 : =20H                DTH		equ	32
(1)  114/       0 : =24H                ALV		equ	36
(1)  115/       0 : =28H                FLG		equ	40
(1)  116/       0 : =2CH                TMR		equ	44
(1)  117/       0 : =30H                PVOL		equ	48
(1)  118/       0 : =34H                PARP		equ	52
(1)  119/       0 : =38H                PTMR		equ	56
(1)  120/       0 :                     
(1)  121/       0 :                     ; PWM control
(1)  122/       0 : =0H                 PWCOM		equ	0
(1)  123/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  124/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  125/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  126/       0 : =20H                PWINSH		equ	32	; **
(1)  127/       0 : =28H                PWINSM		equ	40	; **
(1)  128/       0 : =30H                PWINSL		equ	48	; **
(1)  129/       0 :                     
(1)  130/       0 :                     ; ====================================================================
(1)  131/       0 :                     ; --------------------------------------------------------
(1)  132/       0 :                     ; Code starts here
(1)  133/       0 :                     ; --------------------------------------------------------
(1)  134/       0 :                     
(1)  135/       0 : F3                  		di			; Disable interrputs
(1)  136/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  137/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  138/       6 : 18 7B               		jr	z80_init	; Jump to z80_init
(1)  139/       8 :                     
(1)  140/       8 :                     ; --------------------------------------------------------
(1)  141/       8 :                     ; RST 8 (dac_me)
(1)  142/       8 :                     ; *** self-modifiable code ***
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Writes wave data to DAC using data stored
(1)  145/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  146/       8 :                     ; opcodes to keep the samplerate stable.
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Input (EXX):
(1)  149/       8 :                     ;  c - WAVE buffer MSB
(1)  150/       8 :                     ; de - Pitch (xx.00)
(1)  151/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  152/       8 :                     ;
(1)  153/       8 :                     ; Uses (EXX):
(1)  154/       8 :                     ; b
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Notes:
(1)  157/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  158/       8 :                     ; wave playback.
(1)  159/       8 :                     ;
(1)  160/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  161/       8 :                     ; and
(1)  162/       8 :                     ; call dac_off to disable and enable FM6.
(1)  163/       8 :                     ; --------------------------------------------------------
(1)  164/       8 :                     
(1)  165/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  166/       8 : (MACRO)             		org 8
(1)  167/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  168/       9 : 08                  		ex	af,af'		; Swap af
(1)  169/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  170/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  171/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  172/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  173/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  174/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  175/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  176/      16 : 65                  		ld	h,l		; get hl back
(1)  177/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  178/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  179/      19 : 08                  		ex	af,af'		; return af
(1)  180/      1A : D9                  		exx
(1)  181/      1B : C9                  		ret
(1)  182/      1C :                     
(1)  183/      1C :                     ; --------------------------------------------------------
(1)  184/      1C :                     ; 1Ch
(1)  185/      1C : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  186/      1E : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1)  187/      20 :                     
(1)  188/      20 :                     ; --------------------------------------------------------
(1)  189/      20 :                     ; RST 20h (dac_me)
(1)  190/      20 :                     ; *** self-modifiable code ***
(1)  191/      20 :                     ;
(1)  192/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  193/      20 :                     ; it playing.
(1)  194/      20 :                     ;
(1)  195/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  196/      20 :                     ; IS REQUESTED ***
(1)  197/      20 :                     ; --------------------------------------------------------
(1)  198/      20 :                     
(1)  199/      20 : (MACRO)             		org 20h
(1)  200/      20 : F5                  dac_fill:	push	af		; <-- changes between PUSH AF(playing) and RET(stopped)
(1)  201/      21 : 3A 2F 00            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  202/      24 : D9                  		exx
(1)  203/      25 : AC                  		xor	h		; Grab LSB.00
(1)  204/      26 : D9                  		exx
(1)  205/      27 : E6 80               		and	80h		; Check if bit changed
(1)  206/      29 : C4 D5 11            		call	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  207/      2C : F1                  		pop	af
(1)  208/      2D : C9                  		ret
(1)  209/      2E :                     
(1)  210/      2E :                     ; --------------------------------------------------------
(1)  211/      2E :                     ; 02Eh
(1)  212/      2E : 00                  currTickBits	db 0			; 2Eh: Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1)  213/      2F : 00                  dDacFifoMid	db 0			; 2Fh: WAVE play halfway refill flag (00h/80h)
(1)  214/      30 : 00 00 00            dDacPntr	db 0,0,0		; 30h: WAVE play current ROM position
(1)  215/      33 : 00 00 00            dDacCntr	db 0,0,0		; 33h: WAVE play length counter
(1)  216/      36 : 00                  x68ksrclsb	db 0			; 36h: transferRom temporal LSB
(1)  217/      37 : 00                  x68ksrcmid	db 0			; 37h: transferRom temporal MID
(1)  218/      38 :                     
(1)  219/      38 :                     ; --------------------------------------------------------
(1)  220/      38 :                     ; Z80 Interrupt at 0038h
(1)  221/      38 :                     ; --------------------------------------------------------
(1)  222/      38 :                     
(1)  223/      38 : (MACRO)             		org 38h			; Align 38h
(1)  224/      38 : ED 73 AF 17         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, use tickFlag+1)
(1)  225/      3C : F3                  		di			; Disable interrupt
(1)  226/      3D : C9                  		ret
(1)  227/      3E :                     
(1)  228/      3E :                     ; --------------------------------------------------------
(1)  229/      3E :                     ; 03Eh
(1)  230/      3E : 00                  trkListPage	db 0			; 3Eh: Current tracklist page/bank
(1)  231/      3F : 00                  marsUpd		db 0			; 3Fh: Flag to request a PWM transfer
(1)  232/      40 :                     
(1)  233/      40 :                     ; --------------------------------------------------------
(1)  234/      40 :                     ; 68K Read/Write area at 40h
(1)  235/      40 :                     ; --------------------------------------------------------
(1)  236/      40 :                     
(1)  237/      40 : (MACRO)             		org 40h
(1)  238/      40 :                     commZfifo	ds 40h			; Buffer for commands: 40h bytes
(1)  239/      80 : 00                  commZWrite	db 0			; 80h: cmd fifo wptr (from 68k)
(1)  240/      81 : 00                  commZRomBlk	db 0			; 81h: 68k ROM block flag
(1)  241/      82 : 00                  marsBlock	db 0			; 82h: flag to BLOCK PWM transfers.
(1)  242/      83 :                     
(1)  243/      83 :                     ; --------------------------------------------------------
(1)  244/      83 :                     ; Initilize
(1)  245/      83 :                     ; --------------------------------------------------------
(1)  246/      83 :                     
(1)  247/      83 :                     z80_init:
(1)  248/      83 : CD 85 0E            		call	gema_init		; Init values
(1)  249/      86 : FB                  		ei
(1)  250/      87 :                     
(1)  251/      87 :                     ; --------------------------------------------------------
(1)  252/      87 :                     ; MAIN LOOP
(1)  253/      87 :                     ; --------------------------------------------------------
(1)  254/      87 :                     
(1)  255/      87 :                     drv_loop:
(1)  256/      87 : CF                  		rst	8
(1)  257/      88 : CD 33 0F            		call	get_tick		; Check for Tick on VBlank
(1)  258/      8B : E7                  		rst	20h			; Refill wave
(1)  259/      8C : CF                  		rst	8
(1)  260/      8D : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  261/      8F : 3A B1 17            		ld	a,(tickCnt)
(1)  262/      92 : D6 01               		sub	1
(1)  263/      94 : 38 0B               		jr	c,.noticks
(1)  264/      96 : 32 B1 17            		ld	(tickCnt),a
(1)  265/      99 : CD F5 0F            		call	chip_env		; Process PSG and YM
(1)  266/      9C : CD 33 0F            		call	get_tick		; Check for another tick
(1)  267/      9F : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  268/      A1 :                     .noticks:
(1)  269/      A1 : 3A 1D 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  270/      A4 : D6 01               		sub	1
(1)  271/      A6 : 38 06               		jr	c,.nobeats
(1)  272/      A8 : CF                  		rst	8
(1)  273/      A9 : 32 1D 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  274/      AC : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  275/      AE :                     .nobeats:
(1)  276/      AE : CF                  		rst	8
(1)  277/      AF : 78                  		ld	a,b			; Any beat/tick change?
(1)  278/      B0 : B7                  		or	a
(1)  279/      B1 : 28 14               		jr	z,.neither
(1)  280/      B3 : 32 2E 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  281/      B6 : CF                  		rst	8
(1)  282/      B7 : CD 33 0F            		call	get_tick
(1)  283/      BA : CD FE 04            		call	set_chips		; Send changes to sound chips
(1)  284/      BD : CD 33 0F            		call	get_tick
(1)  285/      C0 : CF                  		rst	8
(1)  286/      C1 : CD CF 01            		call	upd_track		; Update track data
(1)  287/      C4 : CD 33 0F            		call	get_tick
(1)  288/      C7 :                     .neither:
(1)  289/      C7 : CD D9 0D            		call	ex_comm			; External communication
(1)  290/      CA : CD 33 0F            		call	get_tick
(1)  291/      CD :                     .next_cmd:
(1)  292/      CD : 3A 80 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  293/      D0 : 47                  		ld	b,a
(1)  294/      D1 : 3A C8 17            		ld	a,(commZRead)
(1)  295/      D4 : B8                  		cp	b
(1)  296/      D5 : 28 B0               		jr	z,drv_loop		; If both are equal: no requests
(1)  297/      D7 : CF                  		rst	8
(1)  298/      D8 : CD F0 00            		call	.grab_arg
(1)  299/      DB : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  300/      DD : 20 A8               		jr	nz,drv_loop
(1)  301/      DF : CD F0 00            		call	.grab_arg		; Read command number
(1)  302/      E2 : 87                  		add	a,a			; * 2
(1)  303/      E3 : 21 0F 01            		ld	hl,.list		; Then jump to one of these...
(1)  304/      E6 : 16 00               		ld	d,0
(1)  305/      E8 : 5F                  		ld	e,a
(1)  306/      E9 : 19                  		add	hl,de
(1)  307/      EA : 7E                  		ld	a,(hl)
(1)  308/      EB : 23                  		inc	hl
(1)  309/      EC : 66                  		ld	h,(hl)
(1)  310/      ED : CF                  		rst	8
(1)  311/      EE : 6F                  		ld	l,a
(1)  312/      EF : E9                  		jp	(hl)
(1)  313/      F0 :                     
(1)  314/      F0 :                     ; --------------------------------------------------------
(1)  315/      F0 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  316/      F0 :                     ; --------------------------------------------------------
(1)  317/      F0 :                     
(1)  318/      F0 :                     .grab_arg:
(1)  319/      F0 : D5                  		push	de
(1)  320/      F1 : E5                  		push	hl
(1)  321/      F2 :                     .getcbytel:
(1)  322/      F2 : 3A 80 00            		ld	a,(commZWrite)
(1)  323/      F5 : 57                  		ld	d,a
(1)  324/      F6 : CF                  		rst	8
(1)  325/      F7 : 3A C8 17            		ld	a,(commZRead)
(1)  326/      FA : BA                  		cp	d
(1)  327/      FB : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  328/      FD : 16 00               		ld	d,0
(1)  329/      FF : 5F                  		ld	e,a
(1)  330/     100 : 21 40 00            		ld	hl,commZfifo
(1)  331/     103 : 19                  		add	hl,de
(1)  332/     104 : CF                  		rst	8
(1)  333/     105 : 3C                  		inc	a
(1)  334/     106 : E6 3F               		and	3Fh		; ** command list limit
(1)  335/     108 : 32 C8 17            		ld	(commZRead),a
(1)  336/     10B : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  337/     10C : E1                  		pop	hl
(1)  338/     10D : D1                  		pop	de
(1)  339/     10E : C9                  		ret
(1)  340/     10F :                     
(1)  341/     10F :                     ; --------------------------------------------------------
(1)  342/     10F :                     
(1)  343/     10F :                     .list:
(1)  344/     10F : 2F 01               		dw .cmnd_0		; 00h -
(1)  345/     111 : 32 01               		dw .cmnd_1		; 01h - Play by track number
(1)  346/     113 : 4F 01               		dw .cmnd_2		; 02h - Stop by track number
(1)  347/     115 : 2F 01               		dw .cmnd_0		; 03h - Resume by track number
(1)  348/     117 : 2F 01               		dw .cmnd_0		; 04h -
(1)  349/     119 : 2F 01               		dw .cmnd_0		; 05h -
(1)  350/     11B : 2F 01               		dw .cmnd_0		; 06h -
(1)  351/     11D : 2F 01               		dw .cmnd_0		; 07h -
(1)  352/     11F : 6C 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  353/     121 : 2F 01               		dw .cmnd_0		; 09h -
(1)  354/     123 : 2F 01               		dw .cmnd_0		; 0Ah -
(1)  355/     125 : 2F 01               		dw .cmnd_0		; 0Bh -
(1)  356/     127 : 8E 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  357/     129 : 2F 01               		dw .cmnd_0		; 0Dh -
(1)  358/     12B : 2F 01               		dw .cmnd_0		; 0Eh -
(1)  359/     12D : 2F 01               		dw .cmnd_0		; 0Fh -
(1)  360/     12F :                     
(1)  361/     12F :                     ; --------------------------------------------------------
(1)  362/     12F :                     ; Command 00h
(1)  363/     12F :                     ;
(1)  364/     12F :                     ; Reserved for TESTING purposes.
(1)  365/     12F :                     ; --------------------------------------------------------
(1)  366/     12F :                     
(1)  367/     12F :                     ; TEST COMMAND
(1)  368/     12F :                     
(1)  369/     12F :                     .cmnd_0:
(1)  370/     12F : C3 CD 00            		jp	.next_cmd
(1)  371/     132 :                     
(1)  372/     132 :                     ; 	if MARS
(1)  373/     132 :                     ; 		ld	iy,pwmcom
(1)  374/     132 :                     ; 		ld	hl,.tempset
(1)  375/     132 :                     ; 		ld	de,8
(1)  376/     132 :                     ; 		ld	b,e
(1)  377/     132 :                     ; 		dec	b
(1)  378/     132 :                     ; .copyme:
(1)  379/     132 :                     ; 		ld	a,(hl)
(1)  380/     132 :                     ; 		ld	(iy),a
(1)  381/     132 :                     ; 		inc	hl
(1)  382/     132 :                     ; 		add	iy,de
(1)  383/     132 :                     ; 		djnz	.copyme
(1)  384/     132 :                     ; 		ld	a,1
(1)  385/     132 :                     ; 		ld	(marsUpd),a
(1)  386/     132 :                     ; 		jp	.next_cmd
(1)  387/     132 :                     ; .tempset:
(1)  388/     132 :                     ; 		db 0001b
(1)  389/     132 :                     ; 		db 01h
(1)  390/     132 :                     ; 		db 00h
(1)  391/     132 :                     ; 		db 11110000b|02h
(1)  392/     132 :                     ; 		db (SmpIns_TEST>>16)&0FFh
(1)  393/     132 :                     ; 		db (SmpIns_TEST>>8)&0FFh
(1)  394/     132 :                     ; 		db (SmpIns_TEST)&0FFh
(1)  395/     132 :                     ; 	else
(1)  396/     132 :                     ; 		jp	.next_cmd
(1)  397/     132 :                     ; 	endif
(1)  398/     132 :                     
(1)  399/     132 :                     ; 		call	dac_off
(1)  400/     132 :                     ; 		ld	iy,wave_Start
(1)  401/     132 :                     ; 		ld	hl,.tempset
(1)  402/     132 :                     ; 		ld	b,0Bh
(1)  403/     132 :                     ; .copyme:
(1)  404/     132 :                     ; 		ld	a,(hl)
(1)  405/     132 :                     ; 		ld	(iy),a
(1)  406/     132 :                     ; 		inc	hl
(1)  407/     132 :                     ; 		inc	iy
(1)  408/     132 :                     ; 		djnz	.copyme
(1)  409/     132 :                     ; 		ld	hl,100h
(1)  410/     132 :                     ; 		ld	(wave_Pitch),hl
(1)  411/     132 :                     ; 		ld	a,1
(1)  412/     132 :                     ; 		ld	(wave_Flags),a
(1)  413/     132 :                     ; 		call	dac_play
(1)  414/     132 :                     ; 		jp	.next_cmd
(1)  415/     132 :                     ; .tempset:
(1)  416/     132 :                     ; 		dw TEST_WAVE&0FFFFh
(1)  417/     132 :                     ; 		db TEST_WAVE>>16&0FFh
(1)  418/     132 :                     ; 		dw (TEST_WAVE_E-TEST_WAVE)&0FFFFh
(1)  419/     132 :                     ; 		db (TEST_WAVE_E-TEST_WAVE)>>16&0FFh
(1)  420/     132 :                     ; 		dw 0
(1)  421/     132 :                     ; 		db 0
(1)  422/     132 :                     ; 		dw 0100h;+(ZSET_WTUNE)
(1)  423/     132 :                     
(1)  424/     132 :                     ; --------------------------------------------------------
(1)  425/     132 :                     ; Command 01h:
(1)  426/     132 :                     ;
(1)  427/     132 :                     ; Make new track by sequence number
(1)  428/     132 :                     ; --------------------------------------------------------
(1)  429/     132 :                     
(1)  430/     132 :                     .cmnd_1:
(1)  431/     132 : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  432/     135 : 4F                  		ld	c,a		; copy to c
(1)  433/     136 : CD F0 00            		call	.grab_arg	; d1: Block from
(1)  434/     139 : 47                  		ld	b,a
(1)  435/     13A : CD 9F 01            		call	.srch_frid	; Search buffer with same ID or FREE to use.
(1)  436/     13D : FE FF               		cp	-1
(1)  437/     13F : CA CD 00            		jp	z,.next_cmd	; Return if failed.
(1)  438/     142 : 36 C0               		ld	(hl),0C0h	; ** Write trk_status flags: Enable+Restart
(1)  439/     144 : 23                  		inc	hl
(1)  440/     145 : 71                  		ld	(hl),c		; ** write trk_seqId
(1)  441/     146 : 23                  		inc	hl
(1)  442/     147 : 70                  		ld	(hl),b		; ** write trk_setBlk
(1)  443/     148 : 79                  		ld	a,c
(1)  444/     149 : CD D1 04            		call	get_RomTrcks
(1)  445/     14C : C3 CD 00            		jp	.next_cmd
(1)  446/     14F :                     
(1)  447/     14F :                     ; --------------------------------------------------------
(1)  448/     14F :                     ; Command 02h:
(1)  449/     14F :                     ;
(1)  450/     14F :                     ; Stop track by sequence number
(1)  451/     14F :                     ; --------------------------------------------------------
(1)  452/     14F :                     
(1)  453/     14F :                     .cmnd_2:
(1)  454/     14F : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  455/     152 : 4F                  		ld	c,a		; copy to c
(1)  456/     153 : 06 FF               		ld	b,-1
(1)  457/     155 : CD 9F 01            		call	.srch_frid
(1)  458/     158 : FE FF               		cp	-1
(1)  459/     15A : CA CD 00            		jp	z,.next_cmd
(1)  460/     15D : 7E                  		ld	a,(hl)
(1)  461/     15E : CB 7F               		bit	7,a
(1)  462/     160 : CA CD 00            		jp	z,.next_cmd
(1)  463/     163 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  464/     165 : 23                  		inc	hl
(1)  465/     166 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  466/     168 : CF                  		rst	8
(1)  467/     169 : C3 CD 00            		jp	.next_cmd
(1)  468/     16C :                     
(1)  469/     16C :                     ; --------------------------------------------------------
(1)  470/     16C :                     ; Command 08h:
(1)  471/     16C :                     ;
(1)  472/     16C :                     ; Stop ALL tracks
(1)  473/     16C :                     ; --------------------------------------------------------
(1)  474/     16C :                     
(1)  475/     16C :                     .cmnd_8:
(1)  476/     16C : DD 21 A3 14         		ld	ix,nikona_BuffList
(1)  477/     170 :                     .next_sall:
(1)  478/     170 : DD 7E 00            		ld	a,(ix)
(1)  479/     173 : FE FF               		cp	-1
(1)  480/     175 : CA CD 00            		jp	z,.next_cmd
(1)  481/     178 : DD 66 01            		ld	h,(ix+1)
(1)  482/     17B : 6F                  		ld	l,a
(1)  483/     17C : 7E                  		ld	a,(hl)		; *** trk_status
(1)  484/     17D : CB 7F               		bit	7,a
(1)  485/     17F : 28 05               		jr	z,.not_on
(1)  486/     181 : 36 FF               		ld	(hl),-1		; *** trk_status: -1 request
(1)  487/     183 : 23                  		inc	hl
(1)  488/     184 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  489/     186 :                     ; 		inc	hl
(1)  490/     186 :                     ; 		ld	(hl),0
(1)  491/     186 :                     .not_on:
(1)  492/     186 : 11 10 00            		ld	de,10h
(1)  493/     189 : DD 19               		add	ix,de
(1)  494/     18B : C3 70 01            		jp	.next_sall
(1)  495/     18E :                     
(1)  496/     18E :                     ; --------------------------------------------------------
(1)  497/     18E :                     ; Command 0Ch:
(1)  498/     18E :                     ;
(1)  499/     18E :                     ; Set global sub-beats
(1)  500/     18E :                     ; --------------------------------------------------------
(1)  501/     18E :                     
(1)  502/     18E :                     .cmnd_C:
(1)  503/     18E : CD F0 00            		call	.grab_arg	; d0.w: $00xx
(1)  504/     191 : 4F                  		ld	c,a
(1)  505/     192 : CD F0 00            		call	.grab_arg	; d0.w: $xx00
(1)  506/     195 : 32 1F 00            		ld	(sbeatPtck+1),a
(1)  507/     198 : 79                  		ld	a,c
(1)  508/     199 : 32 1E 00            		ld	(sbeatPtck),a
(1)  509/     19C : C3 CD 00            		jp	.next_cmd
(1)  510/     19F :                     
(1)  511/     19F :                     ; ------------------------------------------------
(1)  512/     19F :                     
(1)  513/     19F :                     ; c - trk_currId
(1)  514/     19F :                     ; b - trk_setBlk (-1: ignore)
(1)  515/     19F :                     .srch_frid:
(1)  516/     19F : DD 21 A3 14         		ld	ix,nikona_BuffList
(1)  517/     1A3 : 11 10 00            		ld	de,10h
(1)  518/     1A6 :                     .next:
(1)  519/     1A6 : DD 7E 00            		ld	a,(ix)
(1)  520/     1A9 : FE FF               		cp	-1
(1)  521/     1AB : C8                  		ret	z
(1)  522/     1AC : DD 66 01            		ld	h,(ix+1)
(1)  523/     1AF : 6F                  		ld	l,a
(1)  524/     1B0 : 1E 10               		ld	e,10h
(1)  525/     1B2 : DD 19               		add	ix,de
(1)  526/     1B4 : 23                  		inc	hl
(1)  527/     1B5 : CF                  		rst	8
(1)  528/     1B6 : 23                  		inc	hl
(1)  529/     1B7 : 5E                  		ld	e,(hl)		; ** e - trk_currId
(1)  530/     1B8 : 2B                  		dec	hl
(1)  531/     1B9 :                     
(1)  532/     1B9 : 7E                  		ld	a,(hl)		; ** a - trk_Id
(1)  533/     1BA : 2B                  		dec	hl
(1)  534/     1BB : B9                  		cp	c
(1)  535/     1BC : 20 09               		jr	nz,.not_fnd
(1)  536/     1BE : 78                  		ld	a,b
(1)  537/     1BF : FE FF               		cp	-1
(1)  538/     1C1 : 28 09               		jr	z,.found
(1)  539/     1C3 : 7B                  		ld	a,e
(1)  540/     1C4 : B8                  		cp	b
(1)  541/     1C5 : 28 05               		jr	z,.found
(1)  542/     1C7 :                     .not_fnd:
(1)  543/     1C7 : 7E                  		ld	a,(hl)		; ** a - trk_status
(1)  544/     1C8 : B7                  		or	a
(1)  545/     1C9 : FA A6 01            		jp	m,.next
(1)  546/     1CC :                     .found:
(1)  547/     1CC : CF                  		rst	8
(1)  548/     1CD : AF                  		xor	a
(1)  549/     1CE : C9                  		ret
(1)  550/     1CF :                     
(1)  551/     1CF :                     ; ====================================================================
(1)  552/     1CF :                     ; ----------------------------------------------------------------
(1)  553/     1CF :                     ; MAIN Playback section
(1)  554/     1CF :                     ; ----------------------------------------------------------------
(1)  555/     1CF :                     
(1)  556/     1CF :                     ; ============================================================
(1)  557/     1CF :                     ; --------------------------------------------------------
(1)  558/     1CF :                     ; Read INTERNAL mini-impulse-tracker data
(1)  559/     1CF :                     ; --------------------------------------------------------
(1)  560/     1CF :                     
(1)  561/     1CF :                     upd_track:
(1)  562/     1CF : E7                  		rst	20h
(1)  563/     1D0 : FD 21 A3 14         		ld	iy,nikona_BuffList
(1)  564/     1D4 :                     .trk_buffrs:
(1)  565/     1D4 : CF                  		rst	8
(1)  566/     1D5 : FD 7E 00            		ld	a,(iy)
(1)  567/     1D8 : FE FF               		cp	-1
(1)  568/     1DA : C8                  		ret	z
(1)  569/     1DB : FD E5               		push	iy
(1)  570/     1DD : FD 6E 00            		ld	l,(iy)
(1)  571/     1E0 : FD 66 01            		ld	h,(iy+1)
(1)  572/     1E3 : CD F0 01            		call	.read_track
(1)  573/     1E6 : CF                  		rst	8
(1)  574/     1E7 : FD E1               		pop	iy
(1)  575/     1E9 : 11 10 00            		ld	de,10h
(1)  576/     1EC : FD 19               		add	iy,de
(1)  577/     1EE : 18 E4               		jr	.trk_buffrs
(1)  578/     1F0 :                     ; ----------------------------------------
(1)  579/     1F0 :                     ; iy - Track buffer
(1)  580/     1F0 :                     
(1)  581/     1F0 :                     .read_track:
(1)  582/     1F0 : CF                  		rst	8
(1)  583/     1F1 : E5                  		push	hl
(1)  584/     1F2 : FD E1               		pop	iy
(1)  585/     1F4 : FD 46 00            		ld	b,(iy+trk_status)	; b - Track status and settings
(1)  586/     1F7 : CB 78               		bit	7,b			; bit7: Track active?
(1)  587/     1F9 : C8                  		ret	z
(1)  588/     1FA : 78                  		ld	a,b
(1)  589/     1FB : FE FF               		cp	-1			; Mid-silence request?
(1)  590/     1FD : C8                  		ret	z
(1)  591/     1FE : 3A 2E 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  592/     201 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  593/     203 : 28 04               		jr	z,.sfxmd
(1)  594/     205 : CB 4F               		bit	1,a			; BEAT passed?
(1)  595/     207 : C8                  		ret	z			;
(1)  596/     208 : CF                  		rst	8
(1)  597/     209 :                     .sfxmd:
(1)  598/     209 : CB 47               		bit	0,a			; TICK passed?
(1)  599/     20B : C8                  		ret	z
(1)  600/     20C :                     	; *** Start reading notes ***
(1)  601/     20C : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  602/     20E : C4 E2 03            		call	nz,.first_fill
(1)  603/     211 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  604/     213 : C4 DB 03            		call	nz,.effect_fill
(1)  605/     216 : FD 7E 11            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  606/     219 : 3D                  		dec	a
(1)  607/     21A : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  608/     21D : B7                  		or	a
(1)  609/     21E : C0                  		ret	nz			; If TICK != 0, Exit
(1)  610/     21F : FD 7E 03            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  611/     222 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  612/     225 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  613/     228 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  614/     22B : 79                  		ld	a,c			; Check rowcount
(1)  615/     22C : B0                  		or	b
(1)  616/     22D : 20 13               		jr	nz,.row_active
(1)  617/     22F : FD 7E 12            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  618/     232 : 3C                  		inc	a
(1)  619/     233 : FD 77 12            		ld 	(iy+trk_currBlk),a
(1)  620/     236 : CD 66 03            		call	.set_track
(1)  621/     239 : FE FF               		cp	-1			; Track finished?
(1)  622/     23B : C8                  		ret	z
(1)  623/     23C : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  624/     23F : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  625/     242 :                     .row_active:
(1)  626/     242 : CF                  		rst	8
(1)  627/     243 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  628/     246 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  629/     249 :                     
(1)  630/     249 :                     ; --------------------------------
(1)  631/     249 :                     ; Main reading loop
(1)  632/     249 :                     ; --------------------------------
(1)  633/     249 :                     
(1)  634/     249 :                     .next_note:
(1)  635/     249 : FD 7E 10            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  636/     24C : B7                  		or	a
(1)  637/     24D : 20 16               		jr	nz,.decrow
(1)  638/     24F : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  639/     250 : B7                  		or	a
(1)  640/     251 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  641/     253 : FA 70 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  642/     256 : FD 77 10            		ld	(iy+trk_rowPause),a
(1)  643/     259 :                     
(1)  644/     259 :                     ; --------------------------------
(1)  645/     259 :                     ; Exit
(1)  646/     259 :                     ; --------------------------------
(1)  647/     259 :                     
(1)  648/     259 :                     .exit:
(1)  649/     259 : CF                  		rst	8
(1)  650/     25A : CD 2E 03            		call	.inc_cpatt
(1)  651/     25D : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  652/     260 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  653/     263 : 18 03               		jr	.decrow_e
(1)  654/     265 :                     .decrow:
(1)  655/     265 : FD 35 10            		dec	(iy+trk_rowPause)
(1)  656/     268 :                     .decrow_e:
(1)  657/     268 : 0B                  		dec	bc			; Decrement this row
(1)  658/     269 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  659/     26C : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  660/     26F : C9                  		ret
(1)  661/     270 :                     
(1)  662/     270 :                     ; --------------------------------
(1)  663/     270 :                     ; New note request
(1)  664/     270 :                     ; --------------------------------
(1)  665/     270 :                     
(1)  666/     270 :                     .has_note:
(1)  667/     270 : CF                  		rst	8
(1)  668/     271 : C5                  		push	bc			; Save rowcount
(1)  669/     272 : 4F                  		ld	c,a			; Backup control|channel to c
(1)  670/     273 : CD 2E 03            		call	.inc_cpatt		; Increment hl
(1)  671/     276 : 79                  		ld	a,c			; Read control|channel
(1)  672/     277 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  673/     27A : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  674/     27D : D5                  		push	de
(1)  675/     27E : DD E1               		pop	ix
(1)  676/     280 : E6 3F               		and	00111111b		; Filter channel bits
(1)  677/     282 : 87                  		add	a,a
(1)  678/     283 : 87                  		add	a,a
(1)  679/     284 : 87                  		add	a,a			; * 8
(1)  680/     285 : 16 00               		ld 	d,0
(1)  681/     287 : 5F                  		ld	e,a
(1)  682/     288 : CF                  		rst	8
(1)  683/     289 : DD 19               		add	ix,de
(1)  684/     28B : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  685/     28E : CB 71               		bit	6,c			; Next byte is new type?
(1)  686/     290 : 28 08               		jr	z,.old_type
(1)  687/     292 : 7E                  		ld	a,(hl)
(1)  688/     293 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  689/     296 : 47                  		ld	b,a			; Set to b
(1)  690/     297 : CD 2E 03            		call	.inc_cpatt
(1)  691/     29A :                     .old_type:
(1)  692/     29A :                     	; b - evinEVIN
(1)  693/     29A :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  694/     29A :                     	;     evin: byte is already stored on track-channel buffer
(1)  695/     29A :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  696/     29A : CF                  		rst	8
(1)  697/     29B : CB 40               		bit	0,b
(1)  698/     29D : 28 07               		jr	z,.no_note
(1)  699/     29F : 7E                  		ld	a,(hl)
(1)  700/     2A0 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  701/     2A3 : CD 2E 03            		call	.inc_cpatt
(1)  702/     2A6 :                     .no_note:
(1)  703/     2A6 : CB 48               		bit	1,b
(1)  704/     2A8 : 28 07               		jr	z,.no_ins
(1)  705/     2AA : 7E                  		ld	a,(hl)
(1)  706/     2AB : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  707/     2AE : CD 2E 03            		call	.inc_cpatt
(1)  708/     2B1 :                     .no_ins:
(1)  709/     2B1 : CB 50               		bit	2,b
(1)  710/     2B3 : 28 07               		jr	z,.no_vol
(1)  711/     2B5 : 7E                  		ld	a,(hl)
(1)  712/     2B6 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  713/     2B9 : CD 2E 03            		call	.inc_cpatt
(1)  714/     2BC :                     .no_vol:
(1)  715/     2BC : CB 58               		bit	3,b
(1)  716/     2BE : 28 0F               		jr	z,.no_eff
(1)  717/     2C0 : 7E                  		ld	a,(hl)
(1)  718/     2C1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  719/     2C4 : CD 2E 03            		call	.inc_cpatt
(1)  720/     2C7 : CF                  		rst	8
(1)  721/     2C8 : 7E                  		ld	a,(hl)
(1)  722/     2C9 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  723/     2CC : CD 2E 03            		call	.inc_cpatt
(1)  724/     2CF :                     .no_eff:
(1)  725/     2CF : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  726/     2D0 : 0F                  		rrca
(1)  727/     2D1 : 0F                  		rrca
(1)  728/     2D2 : 0F                  		rrca
(1)  729/     2D3 : 0F                  		rrca
(1)  730/     2D4 : E6 0F               		and	00001111b
(1)  731/     2D6 : 4F                  		ld	c,a
(1)  732/     2D7 : 78                  		ld	a,b
(1)  733/     2D8 : E6 0F               		and	00001111b
(1)  734/     2DA : B1                  		or	c
(1)  735/     2DB : CF                  		rst	8
(1)  736/     2DC : 4F                  		ld	c,a
(1)  737/     2DD : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  738/     2E0 : B1                  		or	c
(1)  739/     2E1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  740/     2E4 : C1                  		pop	bc		; Restore rowcount
(1)  741/     2E5 :                     
(1)  742/     2E5 :                     	; Check for effects that affect
(1)  743/     2E5 :                     	; internal playback:
(1)  744/     2E5 :                     	; Jump, Ticks, etc.
(1)  745/     2E5 : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  746/     2E7 : CA 49 02            		jp	z,.next_note
(1)  747/     2EA : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  748/     2ED : B7                  		or	a		; 00h = invalid effect
(1)  749/     2EE : CA 49 02            		jp	z,.next_note
(1)  750/     2F1 : FE 01               		cp	1		; Effect A: Tick set
(1)  751/     2F3 : CC 03 03            		call	z,.eff_A
(1)  752/     2F6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  753/     2F8 : CC 15 03            		call	z,.eff_B
(1)  754/     2FB : FE 03               		cp	3		; Effect C: Pattern break
(1)  755/     2FD : CA 2B 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  756/     300 : C3 49 02            		jp	.next_note
(1)  757/     303 :                     
(1)  758/     303 :                     ; ----------------------------------------
(1)  759/     303 :                     ; Effect A: Set ticks
(1)  760/     303 :                     ; ----------------------------------------
(1)  761/     303 :                     
(1)  762/     303 :                     .eff_A:
(1)  763/     303 : F5                  		push	af
(1)  764/     304 : CF                  		rst	8
(1)  765/     305 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  766/     308 : 1D                  		dec	e			; TODO: no minus protection
(1)  767/     309 : FD 73 03            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  768/     30C : FD 73 11            		ld	(iy+trk_tickTmr),e
(1)  769/     30F : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  770/     313 : F1                  		pop	af
(1)  771/     314 : C9                  		ret
(1)  772/     315 :                     
(1)  773/     315 :                     ; ----------------------------------------
(1)  774/     315 :                     ; Effect B: jump to a new block
(1)  775/     315 :                     ; ----------------------------------------
(1)  776/     315 :                     
(1)  777/     315 :                     .eff_B:
(1)  778/     315 : F5                  		push	af			; Save Flagbits
(1)  779/     316 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  780/     319 : FD 73 12            		ld 	(iy+trk_currBlk),e
(1)  781/     31C : CF                  		rst	8
(1)  782/     31D : FD 36 10 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  783/     321 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  784/     325 : FD CB 00 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  785/     329 : F1                  		pop	af
(1)  786/     32A : C9                  		ret
(1)  787/     32B :                     
(1)  788/     32B :                     ; ----------------------------------------
(1)  789/     32B :                     ; Effect C: Pattern break/exit
(1)  790/     32B :                     ;
(1)  791/     32B :                     ; Only used on SFX, arguments ignored.
(1)  792/     32B :                     ; ----------------------------------------
(1)  793/     32B :                     
(1)  794/     32B :                     .eff_C:
(1)  795/     32B : C3 CA 03            		jp	.track_end
(1)  796/     32E :                     
(1)  797/     32E :                     ; ----------------------------------------
(1)  798/     32E :                     ; Increment the current patt position
(1)  799/     32E :                     ; and recieve more data
(1)  800/     32E :                     ;
(1)  801/     32E :                     ; Breaks:
(1)  802/     32E :                     ; a,e
(1)  803/     32E :                     ; ----------------------------------------
(1)  804/     32E :                     
(1)  805/     32E :                     .inc_cpatt:
(1)  806/     32E : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  807/     331 : 7D                  		ld	a,l
(1)  808/     332 : 3C                  		inc	a
(1)  809/     333 : E6 3F               		and	MAX_RCACH-1
(1)  810/     335 : FE 3E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  811/     337 : 30 03               		jr	nc,.ran_out
(1)  812/     339 : B3                  		or	e
(1)  813/     33A : 6F                  		ld	l,a
(1)  814/     33B : C9                  		ret
(1)  815/     33C :                     .ran_out:
(1)  816/     33C : FD 6E 2E            		ld	l,(iy+trk_ChnCach)
(1)  817/     33F : E5                  		push	hl
(1)  818/     340 : C5                  		push	bc
(1)  819/     341 : 06 00               		ld	b,0
(1)  820/     343 : 4F                  		ld	c,a
(1)  821/     344 : CF                  		rst	8
(1)  822/     345 : 5D                  		ld	e,l
(1)  823/     346 : 54                  		ld	d,h
(1)  824/     347 : FD 6E 20            		ld	l,(iy+trk_RomCPatt)
(1)  825/     34A : FD 66 21            		ld	h,(iy+(trk_RomCPatt+1))
(1)  826/     34D : FD 7E 22            		ld	a,(iy+(trk_RomCPatt+2))
(1)  827/     350 : 09                  		add	hl,bc
(1)  828/     351 : CE 00               		adc	a,0
(1)  829/     353 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  830/     356 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  831/     359 : CF                  		rst	8
(1)  832/     35A : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  833/     35D : 01 40 00            		ld	bc,MAX_RCACH
(1)  834/     360 : CD 74 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  835/     363 : C1                  		pop	bc
(1)  836/     364 : E1                  		pop	hl
(1)  837/     365 : C9                  		ret
(1)  838/     366 :                     
(1)  839/     366 :                     ; ----------------------------------------
(1)  840/     366 :                     ; Set track pattern by trk_currBlk
(1)  841/     366 :                     ; ----------------------------------------
(1)  842/     366 :                     
(1)  843/     366 :                     .set_track:
(1)  844/     366 : CF                  		rst	8
(1)  845/     367 : 16 00               		ld	d,0
(1)  846/     369 : FD 5E 12            		ld	e,(iy+trk_currBlk)	; e - current block
(1)  847/     36C : FD 6E 04            		ld	l,(iy+trk_Blocks)	; hl - block data
(1)  848/     36F : FD 66 05            		ld	h,(iy+(trk_Blocks+1))
(1)  849/     372 : 19                  		add	hl,de
(1)  850/     373 : 7E                  		ld	a,(hl)			; Read byte
(1)  851/     374 : FE FF               		cp	-1			; If block == -1, end track
(1)  852/     376 : CA CA 03            		jp	z,.track_end
(1)  853/     379 : E7                  		rst	20h			; dacfill
(1)  854/     37A : 07                  		rlca
(1)  855/     37B : 07                  		rlca
(1)  856/     37C : 57                  		ld	d,a
(1)  857/     37D : E6 FC               		and	11111100b
(1)  858/     37F : 5F                  		ld	e,a
(1)  859/     380 : 7A                  		ld	a,d
(1)  860/     381 : E6 03               		and	00000011b
(1)  861/     383 : 57                  		ld	d,a
(1)  862/     384 : FD 6E 06            		ld	l,(iy+trk_Patt)		; Read CACHE patt heads
(1)  863/     387 : FD 66 07            		ld	h,(iy+(trk_Patt+1))
(1)  864/     38A : CF                  		rst	8
(1)  865/     38B : 19                  		add	hl,de
(1)  866/     38C : 5E                  		ld	e,(hl)			; de - Pos
(1)  867/     38D : 23                  		inc	hl
(1)  868/     38E : 56                  		ld	d,(hl)
(1)  869/     38F : 23                  		inc	hl
(1)  870/     390 : 7E                  		ld	a,(hl)
(1)  871/     391 : 23                  		inc	hl
(1)  872/     392 : FD 77 0C            		ld	(iy+trk_Rows),a
(1)  873/     395 : 7E                  		ld	a,(hl)
(1)  874/     396 : 23                  		inc	hl
(1)  875/     397 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1)  876/     39A : FD 6E 23            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1)  877/     39D : FD 66 24            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1)  878/     3A0 : CF                  		rst	8
(1)  879/     3A1 : FD 7E 25            		ld	a,(iy+(trk_RomPatt+2))
(1)  880/     3A4 : 19                  		add	hl,de
(1)  881/     3A5 : CE 00               		adc	a,0
(1)  882/     3A7 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  883/     3AA : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  884/     3AD : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  885/     3B0 : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  886/     3B3 : FD 56 2F            		ld	d,(iy+(trk_ChnCach+1))
(1)  887/     3B6 : CF                  		rst	8
(1)  888/     3B7 : FD 73 0A            		ld	(iy+trk_Read),e
(1)  889/     3BA : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1)  890/     3BD : 0E 40               		ld	c,MAX_RCACH
(1)  891/     3BF : FD 36 0E 00         		ld	(iy+trk_cachHalf),0
(1)  892/     3C3 : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  893/     3C7 : C3 74 0F            		jp	transferRom		; ** ROM access **
(1)  894/     3CA :                     
(1)  895/     3CA :                     ; ----------------------------------------
(1)  896/     3CA :                     ; **JUMP ONLY**
(1)  897/     3CA :                     
(1)  898/     3CA :                     .track_end:
(1)  899/     3CA : CD 93 04            		call	track_out
(1)  900/     3CD : CF                  		rst	8
(1)  901/     3CE : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  902/     3D2 : FD 36 11 00         		ld	(iy+trk_tickTmr),0
(1)  903/     3D6 : FD 36 00 00         		ld	(iy+trk_Status),0	; Disable track slot
(1)  904/     3DA : C9                  		ret
(1)  905/     3DB :                     
(1)  906/     3DB :                     ; ----------------------------------------
(1)  907/     3DB :                     ; Track refill
(1)  908/     3DB :                     ; ----------------------------------------
(1)  909/     3DB :                     
(1)  910/     3DB :                     .effect_fill:
(1)  911/     3DB : FD CB 00 AE         		res	5,(iy+trk_status)	; Reset refill-from-effect flag
(1)  912/     3DF : C3 66 03            		jp	.set_track
(1)  913/     3E2 :                     
(1)  914/     3E2 :                     ; ----------------------------------------
(1)  915/     3E2 :                     ; Track Start/Reset
(1)  916/     3E2 :                     ;
(1)  917/     3E2 :                     ; iy - Track buffer
(1)  918/     3E2 :                     ; ----------------------------------------
(1)  919/     3E2 :                     
(1)  920/     3E2 :                     .first_fill:
(1)  921/     3E2 :                     ; 		rst	20h
(1)  922/     3E2 : FD CB 00 B6         		res	6,(iy+trk_status)	; Reset FILL flag
(1)  923/     3E6 : CD 93 04            		call	track_out
(1)  924/     3E9 : FD 36 11 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1)  925/     3ED : FD 7E 02            		ld	a,(iy+trk_setBlk)	; Make start block as current block
(1)  926/     3F0 : CF                  		rst	8
(1)  927/     3F1 : FD 77 12            		ld 	(iy+trk_currBlk),a	; block
(1)  928/     3F4 : 11 00 00            		ld	de,0
(1)  929/     3F7 : 21 63 17            		ld	hl,trkListCach		; Read MASTER Nicona track list
(1)  930/     3FA : FD 7E 01            		ld	a,(iy+trk_seqId)
(1)  931/     3FD : E6 0F               		and	00001111b		; Filter sequence bits
(1)  932/     3FF : 87                  		add	a,a			; *4
(1)  933/     400 : 87                  		add	a,a
(1)  934/     401 : 5F                  		ld	e,a
(1)  935/     402 : 19                  		add	hl,de
(1)  936/     403 : 7E                  		ld	a,(hl)
(1)  937/     404 : 23                  		inc	hl
(1)  938/     405 : CB 7F               		bit	7,a
(1)  939/     407 : 28 04               		jr	z,.no_glbl
(1)  940/     409 : FD CB 00 C6         		set	0,(iy+trk_status)	; Enable GLOBAL sub-beats
(1)  941/     40D :                     .no_glbl:
(1)  942/     40D : E6 7F               		and	01111111b
(1)  943/     40F : FD 77 03            		ld	(iy+trk_tickSet),a
(1)  944/     412 : 7E                  		ld	a,(hl)			; Read and temporally
(1)  945/     413 : 23                  		inc	hl			; grab it's pointers
(1)  946/     414 : 4E                  		ld	c,(hl)
(1)  947/     415 : CF                  		rst	8
(1)  948/     416 : 23                  		inc	hl
(1)  949/     417 : 6E                  		ld	l,(hl)
(1)  950/     418 : 61                  		ld	h,c
(1)  951/     419 : 11 B4 17            		ld	de,headerOut
(1)  952/     41C : 0E 0C               		ld	c,0Ch
(1)  953/     41E : CD 74 0F            		call	transferRom		; ** ROM access **
(1)  954/     421 : DD 21 BF 17         		ld	ix,headerOut_e-1
(1)  955/     425 :                     
(1)  956/     425 :                     	; headerOut:
(1)  957/     425 :                     	; dc.l .blk,.pat,.ins
(1)  958/     425 :                     	; *** READING BACKWARDS
(1)  959/     425 : CD 7F 04            		call	.grab_rhead		; Instrument data
(1)  960/     428 : FD 4E 1F            		ld	c,(iy+trk_MaxIns)
(1)  961/     42B : CB 21               		sla	c			; *8
(1)  962/     42D : CB 21               		sla	c
(1)  963/     42F : CB 21               		sla	c
(1)  964/     431 : 78                  		ld	a,b
(1)  965/     432 : FD 5E 2C            		ld	e,(iy+trk_ChnCIns)
(1)  966/     435 : FD 56 2D            		ld	d,(iy+(trk_ChnCIns+1))
(1)  967/     438 : FD 73 08            		ld	(iy+trk_Instr),e
(1)  968/     43B : FD 72 09            		ld	(iy+(trk_Instr+1)),d
(1)  969/     43E : CF                  		rst	8
(1)  970/     43F : CD 74 0F            		call	transferRom		; ** ROM access **
(1)  971/     442 : CD 7F 04            		call	.grab_rhead		; Pattern data
(1)  972/     445 : FD 4E 1E            		ld	c,(iy+trk_MaxHdrs)
(1)  973/     448 : CB 21               		sla	c			; *4
(1)  974/     44A : CB 21               		sla	c
(1)  975/     44C : 78                  		ld	a,b
(1)  976/     44D : FD 75 23            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1)  977/     450 : FD 74 24            		ld	(iy+(trk_RomPatt+1)),h
(1)  978/     453 : FD 77 25            		ld	(iy+(trk_RomPatt+2)),a
(1)  979/     456 : CF                  		rst	8
(1)  980/     457 : FD 5E 2A            		ld	e,(iy+trk_ChnCHead)
(1)  981/     45A : FD 56 2B            		ld	d,(iy+(trk_ChnCHead+1))
(1)  982/     45D : FD 73 06            		ld	(iy+trk_Patt),e
(1)  983/     460 : FD 72 07            		ld	(iy+(trk_Patt+1)),d
(1)  984/     463 : CD 74 0F            		call	transferRom		; ** ROM access **
(1)  985/     466 : CD 7F 04            		call	.grab_rhead		; Block data
(1)  986/     469 : FD 4E 1D            		ld	c,(iy+trk_MaxBlks)
(1)  987/     46C : 78                  		ld	a,b
(1)  988/     46D : FD 5E 28            		ld	e,(iy+trk_ChnCBlk)
(1)  989/     470 : FD 56 29            		ld	d,(iy+(trk_ChnCBlk+1))
(1)  990/     473 : FD 73 04            		ld	(iy+trk_Blocks),e
(1)  991/     476 : FD 72 05            		ld	(iy+(trk_Blocks+1)),d
(1)  992/     479 : CD 74 0F            		call	transferRom		; ** ROM access **
(1)  993/     47C : C3 66 03            		jp	.set_track
(1)  994/     47F :                     
(1)  995/     47F :                     ; Read 68K pointer:
(1)  996/     47F :                     ; hl - 00xxxx
(1)  997/     47F :                     ;  b - xx0000
(1)  998/     47F :                     .grab_rhead:
(1)  999/     47F : DD 6E 00            		ld	l,(ix)
(1) 1000/     482 : DD 2B               		dec	ix
(1) 1001/     484 : CF                  		rst	8
(1) 1002/     485 : DD 66 00            		ld	h,(ix)
(1) 1003/     488 : DD 2B               		dec	ix
(1) 1004/     48A : DD 46 00            		ld	b,(ix)
(1) 1005/     48D : DD 2B               		dec	ix
(1) 1006/     48F :                     ; 		ld	c,(ix)
(1) 1007/     48F : CF                  		rst	8
(1) 1008/     490 : DD 2B               		dec	ix
(1) 1009/     492 : C9                  		ret
(1) 1010/     493 :                     
(1) 1011/     493 :                     ; ----------------------------------------
(1) 1012/     493 :                     ; Reset tracker channels
(1) 1013/     493 :                     ;
(1) 1014/     493 :                     ; iy - Track buffer
(1) 1015/     493 :                     ;
(1) 1016/     493 :                     ; Breaks:
(1) 1017/     493 :                     ; ix
(1) 1018/     493 :                     ; ----------------------------------------
(1) 1019/     493 :                     
(1) 1020/     493 :                     ; ----------------------------------------
(1) 1021/     493 :                     ; Reset tracker channels
(1) 1022/     493 :                     ;
(1) 1023/     493 :                     ; iy - Track buffer
(1) 1024/     493 :                     ;
(1) 1025/     493 :                     ; Breaks:
(1) 1026/     493 :                     ; de,ix
(1) 1027/     493 :                     ; ----------------------------------------
(1) 1028/     493 :                     
(1) 1029/     493 :                     track_out:
(1) 1030/     493 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1) 1031/     496 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1) 1032/     499 : D5                  		push	de
(1) 1033/     49A : DD E1               		pop	ix
(1) 1034/     49C : CF                  		rst	8
(1) 1035/     49D : 11 08 00            		ld	de,8
(1) 1036/     4A0 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	; MAX_TRKCHN
(1) 1037/     4A3 : AF                  		xor	a
(1) 1038/     4A4 :                     .clrfe:
(1) 1039/     4A4 : DD 7E 01            		ld	a,(ix+chnl_Chip)
(1) 1040/     4A7 : B7                  		or	a
(1) 1041/     4A8 : 28 1D               		jr	z,.nochip
(1) 1042/     4AA : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1043/     4AE : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1044/     4B2 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1045/     4B6 : CF                  		rst	8
(1) 1046/     4B7 : FD 36 05 00         		ld	(iy+chnl_EffId),0
(1) 1047/     4BB : FD 36 06 00         		ld	(iy+chnl_EffArg),0
(1) 1048/     4BF : FD 36 03 00         		ld	(iy+chnl_Ins),0
(1) 1049/     4C3 : FD 36 07 00         		ld	(iy+chnl_Type),0
(1) 1050/     4C7 :                     .nochip:
(1) 1051/     4C7 : DD 19               		add	ix,de
(1) 1052/     4C9 : 10 D9               		djnz	.clrfe
(1) 1053/     4CB : 3E 01               		ld	a,1
(1) 1054/     4CD : 32 3F 00            		ld	(marsUpd),a
(1) 1055/     4D0 : C9                  		ret
(1) 1056/     4D1 :                     
(1) 1057/     4D1 :                     ; ----------------------------------------
(1) 1058/     4D1 :                     ; Load tracklist from ROM
(1) 1059/     4D1 :                     ;
(1) 1060/     4D1 :                     ; a - SeqID
(1) 1061/     4D1 :                     ; ----------------------------------------
(1) 1062/     4D1 :                     
(1) 1063/     4D1 :                     get_RomTrcks:
(1) 1064/     4D1 : E6 F0               		and	11110000b
(1) 1065/     4D3 : 5F                  		ld	e,a
(1) 1066/     4D4 : 3A 3E 00            		ld	a,(trkListPage)
(1) 1067/     4D7 : BB                  		cp	e
(1) 1068/     4D8 : C8                  		ret	z
(1) 1069/     4D9 :                     init_RomTrcks:
(1) 1070/     4D9 : 7B                  		ld	a,e
(1) 1071/     4DA : 32 3E 00            		ld	(trkListPage),a
(1) 1072/     4DD : 07                  		rlca
(1) 1073/     4DE : 07                  		rlca			; 10h*4=40h
(1) 1074/     4DF : E6 C0               		and	11000000b
(1) 1075/     4E1 : 5F                  		ld	e,a
(1) 1076/     4E2 : 7A                  		ld	a,d
(1) 1077/     4E3 : CF                  		rst	8
(1) 1078/     4E4 : E6 03               		and	00000011b	; * 40h
(1) 1079/     4E6 : 57                  		ld	d,a
(1) 1080/     4E7 : 21 D5 14            		ld	hl,nikona_SetMstrList
(1) 1081/     4EA : 23                  		inc	hl
(1) 1082/     4EB : 7E                  		ld	a,(hl)
(1) 1083/     4EC : 23                  		inc	hl
(1) 1084/     4ED : 4E                  		ld	c,(hl)
(1) 1085/     4EE : 23                  		inc	hl
(1) 1086/     4EF : 6E                  		ld	l,(hl)
(1) 1087/     4F0 : CF                  		rst	8
(1) 1088/     4F1 : 61                  		ld	h,c
(1) 1089/     4F2 : 19                  		add	hl,de
(1) 1090/     4F3 : CE 00               		adc	a,0
(1) 1091/     4F5 : 11 63 17            		ld	de,trkListCach
(1) 1092/     4F8 : 01 40 00            		ld	bc,4*10h
(1) 1093/     4FB : C3 74 0F            		jp	transferRom	; *** ROM ACCESS ***
(1) 1094/     4FE :                     
(1) 1095/     4FE :                     ; ============================================================
(1) 1096/     4FE :                     ; --------------------------------------------------------
(1) 1097/     4FE :                     ; Convert notes to soundchips
(1) 1098/     4FE :                     ; --------------------------------------------------------
(1) 1099/     4FE :                     
(1) 1100/     4FE :                     set_chips:
(1) 1101/     4FE : E7                  		rst	20h			; Refill wave
(1) 1102/     4FF : CD 33 0F            		call	get_tick
(1) 1103/     502 : FD 21 A3 14         		ld	iy,nikona_BuffList
(1) 1104/     506 :                     .trk_buffrs:
(1) 1105/     506 : CF                  		rst	8
(1) 1106/     507 : FD 7E 00            		ld	a,(iy)
(1) 1107/     50A : FE FF               		cp	-1
(1) 1108/     50C : 28 15               		jr	z,proc_chips
(1) 1109/     50E : FD E5               		push	iy
(1) 1110/     510 : FD 6E 00            		ld	l,(iy)
(1) 1111/     513 : FD 66 01            		ld	h,(iy+1)
(1) 1112/     516 : CD 43 05            		call	tblbuff_read
(1) 1113/     519 : CF                  		rst	8
(1) 1114/     51A : FD E1               		pop	iy
(1) 1115/     51C : 11 10 00            		ld	de,10h
(1) 1116/     51F : FD 19               		add	iy,de
(1) 1117/     521 : 18 E3               		jr	.trk_buffrs
(1) 1118/     523 :                     proc_chips:
(1) 1119/     523 : E7                  		rst	20h
(1) 1120/     524 : FD 21 1B 15         		ld	iy,tblPSGN		; PSG Noise (FIRST)
(1) 1121/     528 : CD E6 06            		call	dtbl_singl
(1) 1122/     52B : 00                  		nop
(1) 1123/     52C : 00                  		nop
(1) 1124/     52D : FD 21 E9 14         		ld	iy,tblPSG		; PSG Squares
(1) 1125/     531 : CD D0 06            		call	dtbl_multi
(1) 1126/     534 : FD 21 2B 15         		ld	iy,tblFM
(1) 1127/     538 : CD D0 06            		call	dtbl_multi
(1) 1128/     53B : FD 21 8D 15         		ld	iy,tblPWM
(1) 1129/     53F : CD D0 06            		call	dtbl_multi
(1) 1130/     542 : C9                  		ret
(1) 1131/     543 :                     
(1) 1132/     543 :                     ; ----------------------------------------
(1) 1133/     543 :                     ; Read current track
(1) 1134/     543 :                     tblbuff_read:
(1) 1135/     543 : E5                  		push	hl
(1) 1136/     544 : FD E1               		pop	iy
(1) 1137/     546 : FD 46 00            		ld	b,(iy+trk_status)	; bit7: Track active?
(1) 1138/     549 : CB 78               		bit	7,b
(1) 1139/     54B : C8                  		ret	z
(1) 1140/     54C :                     ; 		ret
(1) 1141/     54C :                     ; .go_read:
(1) 1142/     54C : 78                  		ld	a,b			; trk_Status == -1?
(1) 1143/     54D : FE FF               		cp	-1
(1) 1144/     54F : C2 59 05            		jp	nz,.track_cont
(1) 1145/     552 : CD 93 04            		call	track_out
(1) 1146/     555 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1147/     559 :                     .track_cont:
(1) 1148/     559 : CF                  		rst	8
(1) 1149/     55A : FD 6E 26            		ld	l,(iy+trk_ChnList)
(1) 1150/     55D : FD 66 27            		ld	h,(iy+(trk_ChnList+1))
(1) 1151/     560 : E5                  		push	hl
(1) 1152/     561 : DD E1               		pop	ix			; iy - channel list
(1) 1153/     563 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	;MAX_TRKCHN
(1) 1154/     566 :                     
(1) 1155/     566 :                     ; ** Needs special delays to
(1) 1156/     566 :                     ; keep the samplerate
(1) 1157/     566 :                     .next_chnl:
(1) 1158/     566 : C5                  		push	bc
(1) 1159/     567 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1160/     56A : E6 0F               		and	00001111b
(1) 1161/     56C : C4 79 05            		call	nz,.do_chip
(1) 1162/     56F : C1                  		pop	bc
(1) 1163/     570 : 11 08 00            		ld	de,8
(1) 1164/     573 : DD 19               		add	ix,de
(1) 1165/     575 : CF                  		rst	8	; wave sync
(1) 1166/     576 : 10 EE               		djnz	.next_chnl
(1) 1167/     578 : C9                  		ret
(1) 1168/     579 :                     
(1) 1169/     579 :                     ; ----------------------------------------
(1) 1170/     579 :                     ; iy - Track buffer
(1) 1171/     579 :                     ; ix - Current channel
(1) 1172/     579 :                     
(1) 1173/     579 :                     .do_chip:
(1) 1174/     579 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1175/     57C : B7                  		or	a
(1) 1176/     57D : C8                  		ret	z
(1) 1177/     57E : FD 56 1F            		ld	d,(iy+trk_MaxIns)
(1) 1178/     581 : BA                  		cp	d
(1) 1179/     582 : C8                  		ret	z
(1) 1180/     583 : D0                  		ret	nc
(1) 1181/     584 : 3D                  		dec	a			; ins-1
(1) 1182/     585 : 0F                  		rrca				; * 08h
(1) 1183/     586 : 0F                  		rrca
(1) 1184/     587 : 0F                  		rrca
(1) 1185/     588 : 0F                  		rrca
(1) 1186/     589 : CF                  		rst	8
(1) 1187/     58A : 0F                  		rrca
(1) 1188/     58B : 57                  		ld	d,a
(1) 1189/     58C : E6 F8               		and	11111000b
(1) 1190/     58E : 5F                  		ld	e,a
(1) 1191/     58F : 7A                  		ld	a,d
(1) 1192/     590 : E6 07               		and	00000111b
(1) 1193/     592 : 57                  		ld	d,a
(1) 1194/     593 : FD 6E 08            		ld	l,(iy+trk_Instr)	; hl - Intrument data
(1) 1195/     596 : FD 66 09            		ld	h,(iy+(trk_Instr+1))
(1) 1196/     599 : 7B                  		ld	a,e
(1) 1197/     59A : 19                  		add	hl,de
(1) 1198/     59B : CF                  		rst	8
(1) 1199/     59C : E5                  		push	hl			; <-- save ins pos
(1) 1200/     59D : CD AF 05            		call	.grab_link
(1) 1201/     5A0 : D1                  		pop	de			; --> recover as de
(1) 1202/     5A1 : FE FF               		cp	-1			; Found any link?
(1) 1203/     5A3 : C8                  		ret	z
(1) 1204/     5A4 : FD 7E 14            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1205/     5A7 : 23                  		inc	hl			; Skip link
(1) 1206/     5A8 : 23                  		inc	hl
(1) 1207/     5A9 : 77                  		ld	(hl),a			; Write priority
(1) 1208/     5AA : 23                  		inc	hl
(1) 1209/     5AB : 73                  		ld	(hl),e			; Write Instrument pointer
(1) 1210/     5AC : 23                  		inc	hl
(1) 1211/     5AD : 72                  		ld	(hl),d
(1) 1212/     5AE : C9                  		ret
(1) 1213/     5AF :                     
(1) 1214/     5AF :                     ; ----------------------------------------
(1) 1215/     5AF :                     ; Search for a linked channel on the
(1) 1216/     5AF :                     ; chip table
(1) 1217/     5AF :                     ;
(1) 1218/     5AF :                     ; Input:
(1) 1219/     5AF :                     ; iy - Track buffer
(1) 1220/     5AF :                     ; ix - Current channel
(1) 1221/     5AF :                     ; hl - Intrument position
(1) 1222/     5AF :                     ;
(1) 1223/     5AF :                     ; Returns:
(1) 1224/     5AF :                     ; hl - Channel table to use
(1) 1225/     5AF :                     ;  a - Return value:
(1) 1226/     5AF :                     ;       0 - Found
(1) 1227/     5AF :                     ;      -1 - Not found
(1) 1228/     5AF :                     ; ----------------------------------------
(1) 1229/     5AF :                     
(1) 1230/     5AF :                     .grab_link:
(1) 1231/     5AF : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1232/     5B0 : E6 F0               		and	11110000b		; Filter 0F0h
(1) 1233/     5B2 : F2 9B 06            		jp	p,.set_asfull		; Set -1 if non-minus.
(1) 1234/     5B5 : 5F                  		ld	e,a			; Save NEW chip to e
(1) 1235/     5B6 : CF                  		rst	8
(1) 1236/     5B7 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - check OUR chip
(1) 1237/     5BA : E6 F0               		and	11110000b		; Filter bits too.
(1) 1238/     5BC : CA 33 06            		jp	z,.new_chip		; If zero: Set NEW chip
(1) 1239/     5BF : BB                  		cp 	e
(1) 1240/     5C0 : CA D6 05            		jp	z,.srch_link		; If same: Grab our link
(1) 1241/     5C3 : 57                  		ld	d,a			; d - OLD chip
(1) 1242/     5C4 : D5                  		push	de
(1) 1243/     5C5 : CD D6 05            		call	.srch_link		; Search our link (first)
(1) 1244/     5C8 : D1                  		pop	de
(1) 1245/     5C9 : FE FF               		cp	-1
(1) 1246/     5CB : C8                  		ret	z
(1) 1247/     5CC : CD B8 06            		call	.reset_link
(1) 1248/     5CF : DD 36 01 00         		ld	(ix+chnl_Chip),0
(1) 1249/     5D3 : C3 32 06            		jp	.do_newchip
(1) 1250/     5D6 :                     
(1) 1251/     5D6 :                     ; ** RELINK **
(1) 1252/     5D6 :                     ; e - Our current chip
(1) 1253/     5D6 :                     .srch_link:
(1) 1254/     5D6 : CD 9E 06            		call	.pick_tbl	; Pick our table
(1) 1255/     5D9 : B7                  		or	a
(1) 1256/     5DA : FA 1F 06            		jp	m,.singl_link
(1) 1257/     5DD : DD E5               		push	ix		; copy ix to bc
(1) 1258/     5DF : C1                  		pop	bc
(1) 1259/     5E0 :                     .srch_lloop:
(1) 1260/     5E0 : CF                  		rst	8
(1) 1261/     5E1 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1262/     5E2 : FE FF               		cp	-1		; If -1, return -1
(1) 1263/     5E4 : 28 49               		jr	z,.refill
(1) 1264/     5E6 : B9                  		cp	c
(1) 1265/     5E7 : 20 07               		jr	nz,.invldl
(1) 1266/     5E9 : 23                  		inc	hl
(1) 1267/     5EA : CF                  		rst	8
(1) 1268/     5EB : 7E                  		ld	a,(hl)
(1) 1269/     5EC : 2B                  		dec	hl
(1) 1270/     5ED : B8                  		cp	b
(1) 1271/     5EE : 28 09               		jr	z,.reroll
(1) 1272/     5F0 :                     .invldl:
(1) 1273/     5F0 : D5                  		push	de
(1) 1274/     5F1 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1275/     5F4 : CF                  		rst	8
(1) 1276/     5F5 : 19                  		add	hl,de
(1) 1277/     5F6 : D1                  		pop	de
(1) 1278/     5F7 : 18 E7               		jr	.srch_lloop
(1) 1279/     5F9 :                     .reroll:
(1) 1280/     5F9 :                     	; *** Special re-roll check ***
(1) 1281/     5F9 : E5                  		push	hl
(1) 1282/     5FA : 01 05 00            		ld	bc,5		; <-- fake "iy+05h"
(1) 1283/     5FD : 09                  		add	hl,bc
(1) 1284/     5FE : 4E                  		ld	c,(hl)		; c - ID
(1) 1285/     5FF : E1                  		pop	hl
(1) 1286/     600 : 7B                  		ld	a,e
(1) 1287/     601 : FE 80               		cp	80h		; PSG?
(1) 1288/     603 : 28 02               		jr	z,.chk_psg
(1) 1289/     605 :                     ; 		cp	0A0h		; FM normal?
(1) 1290/     605 :                     ; 		jr	z,.chk_fm
(1) 1291/     605 : 18 26               		jr	.rnot_psg
(1) 1292/     607 :                     .chk_psg:
(1) 1293/     607 : 3A B2 17            		ld	a,(psgHatMode)
(1) 1294/     60A : E6 03               		and	011b
(1) 1295/     60C : FE 03               		cp	011b
(1) 1296/     60E : 20 1D               		jr	nz,.rnot_psg
(1) 1297/     610 : 79                  		ld	a,c
(1) 1298/     611 : FE 02               		cp	2
(1) 1299/     613 : 20 18               		jr	nz,.rnot_psg
(1) 1300/     615 : CF                  		rst	8
(1) 1301/     616 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1302/     618 : CD B8 06            		call	.reset_link	; on PSG3
(1) 1303/     61B : C3 9B 06            		jp	.set_asfull
(1) 1304/     61E : 00                  		nop
(1) 1305/     61F :                     
(1) 1306/     61F :                     ; ----------------------
(1) 1307/     61F :                     ; PSGN/FM3/FM6
(1) 1308/     61F :                     .singl_link:
(1) 1309/     61F : DD E5               		push	ix			; copy ix to bc
(1) 1310/     621 : C1                  		pop	bc
(1) 1311/     622 : 23                  		inc	hl			; Read MSB first
(1) 1312/     623 : CF                  		rst	8
(1) 1313/     624 : 7E                  		ld	a,(hl)
(1) 1314/     625 : 2B                  		dec	hl
(1) 1315/     626 : B8                  		cp	b			; MSB match?
(1) 1316/     627 : 20 06               		jr	nz,.refill
(1) 1317/     629 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1318/     62A : B9                  		cp	c
(1) 1319/     62B : 20 02               		jr	nz,.refill
(1) 1320/     62D :                     
(1) 1321/     62D :                     ; ----------------------
(1) 1322/     62D :                     
(1) 1323/     62D :                     .rnot_psg:
(1) 1324/     62D : AF                  		xor	a
(1) 1325/     62E : C9                  		ret
(1) 1326/     62F :                     ; ***
(1) 1327/     62F :                     .refill:
(1) 1328/     62F : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1329/     632 :                     .do_newchip:
(1) 1330/     632 : 7B                  		ld	a,e
(1) 1331/     633 :                     
(1) 1332/     633 :                     ; *** NEW CHIP ***
(1) 1333/     633 :                     ; e - Chip to set
(1) 1334/     633 :                     .new_chip:
(1) 1335/     633 : 7B                  		ld	a,e			; Read NEW chip
(1) 1336/     634 : B7                  		or	a			; If non-minus, exit.
(1) 1337/     635 : F0                  		ret	p
(1) 1338/     636 : CD 9E 06            		call	.pick_tbl
(1) 1339/     639 : CF                  		rst	8
(1) 1340/     63A : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1341/     63D : B7                  		or	a
(1) 1342/     63E : FA 89 06            		jp	m,.singl_free
(1) 1343/     641 : E5                  		push	hl			; Backup START table
(1) 1344/     642 :                     ; PASS 1
(1) 1345/     642 :                     .srch_free:
(1) 1346/     642 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1347/     643 : FE FF               		cp	-1			; If -1, return -1
(1) 1348/     645 : 28 0C               		jr	z,.pass_2
(1) 1349/     647 : 23                  		inc	hl
(1) 1350/     648 : 46                  		ld	b,(hl)			; Read MSB
(1) 1351/     649 : CF                  		rst	8
(1) 1352/     64A : 2B                  		dec	hl
(1) 1353/     64B : B0                  		or	b
(1) 1354/     64C : 28 26               		jr	z,.new_link_z
(1) 1355/     64E : CD 6A 06            		call	.nextsrch_tbl
(1) 1356/     651 : 18 EF               		jr	.srch_free
(1) 1357/     653 :                     ; PASS 2
(1) 1358/     653 :                     .pass_2:
(1) 1359/     653 : CF                  		rst	8
(1) 1360/     654 : E1                  		pop	hl
(1) 1361/     655 :                     .next_prio:
(1) 1362/     655 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1363/     656 : FE FF               		cp	-1		; If -1, return -1
(1) 1364/     658 : C8                  		ret	z
(1) 1365/     659 : 23                  		inc	hl
(1) 1366/     65A : 23                  		inc	hl
(1) 1367/     65B : 7E                  		ld	a,(hl)
(1) 1368/     65C : 2B                  		dec	hl
(1) 1369/     65D : 2B                  		dec	hl
(1) 1370/     65E : B9                  		cp	c
(1) 1371/     65F : 38 17               		jr	c,.new_link_o
(1) 1372/     661 : B7                  		or	a
(1) 1373/     662 : 28 14               		jr	z,.new_link
(1) 1374/     664 : CF                  		rst	8
(1) 1375/     665 : CD 6A 06            		call	.nextsrch_tbl
(1) 1376/     668 : 18 EB               		jr	.next_prio
(1) 1377/     66A :                     
(1) 1378/     66A :                     .nextsrch_tbl:
(1) 1379/     66A : D5                  		push	de
(1) 1380/     66B : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1381/     66E : 19                  		add	hl,de
(1) 1382/     66F : D1                  		pop	de
(1) 1383/     670 : CF                  		rst	8
(1) 1384/     671 : 00                  		nop	; wave sync
(1) 1385/     672 : 00                  		nop
(1) 1386/     673 : C9                  		ret
(1) 1387/     674 :                     .new_link_z:
(1) 1388/     674 : 33                  		inc	sp		; skip backup
(1) 1389/     675 : 33                  		inc	sp
(1) 1390/     676 : 18 00               		jr	.new_link
(1) 1391/     678 :                     
(1) 1392/     678 :                     ; OVERWRITE link
(1) 1393/     678 :                     .new_link_o:
(1) 1394/     678 :                     
(1) 1395/     678 :                     ; NEW link
(1) 1396/     678 :                     .new_link:
(1) 1397/     678 : CF                  		rst	8
(1) 1398/     679 : 23                  		inc	hl
(1) 1399/     67A : 23                  		inc	hl
(1) 1400/     67B :                     ; hl+2
(1) 1401/     67B :                     .l_hiprio:
(1) 1402/     67B : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1403/     67E : DD E5               		push	ix
(1) 1404/     680 : D1                  		pop	de
(1) 1405/     681 : CF                  		rst	8
(1) 1406/     682 : 71                  		ld	(hl),c		; write priority
(1) 1407/     683 : 2B                  		dec	hl		; -1
(1) 1408/     684 : 72                  		ld 	(hl),d		; MSB
(1) 1409/     685 : 2B                  		dec	hl
(1) 1410/     686 : 73                  		ld	(hl),e		; LSB
(1) 1411/     687 : AF                  		xor	a
(1) 1412/     688 : C9                  		ret
(1) 1413/     689 :                     ; Single slot
(1) 1414/     689 :                     .singl_free:
(1) 1415/     689 : CF                  		rst	8
(1) 1416/     68A : 46                  		ld	b,(hl)
(1) 1417/     68B : 23                  		inc	hl
(1) 1418/     68C : 7E                  		ld	a,(hl)
(1) 1419/     68D : 23                  		inc	hl
(1) 1420/     68E : B0                  		or	b
(1) 1421/     68F : 28 EA               		jr	z,.l_hiprio
(1) 1422/     691 : 7E                  		ld	a,(hl)
(1) 1423/     692 : B9                  		cp	c
(1) 1424/     693 : 28 E6               		jr	z,.l_hiprio
(1) 1425/     695 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1426/     697 : B7                  		or	a
(1) 1427/     698 : 28 E1               		jr	z,.l_hiprio
(1) 1428/     69A :                     .sngl_sprio:
(1) 1429/     69A : CF                  		rst	8
(1) 1430/     69B :                     
(1) 1431/     69B :                     ; Set "can't use" table flag
(1) 1432/     69B :                     .set_asfull:
(1) 1433/     69B : 3E FF               		ld	a,-1
(1) 1434/     69D : C9                  		ret
(1) 1435/     69E :                     
(1) 1436/     69E :                     ; Pick chip table
(1) 1437/     69E :                     ; In:
(1) 1438/     69E :                     ;  e - ID
(1) 1439/     69E :                     ;
(1) 1440/     69E :                     ; Out:
(1) 1441/     69E :                     ; hl - Table
(1) 1442/     69E :                     .pick_tbl:
(1) 1443/     69E : D5                  		push	de
(1) 1444/     69F : 0F                  		rrca
(1) 1445/     6A0 : 0F                  		rrca
(1) 1446/     6A1 : 0F                  		rrca
(1) 1447/     6A2 : 0F                  		rrca
(1) 1448/     6A3 : E6 07               		and	00000111b
(1) 1449/     6A5 : 87                  		add	a,a
(1) 1450/     6A6 : 21 D9 14            		ld	hl,tblList
(1) 1451/     6A9 : E5                  		push	hl
(1) 1452/     6AA : 16 00               		ld	d,0
(1) 1453/     6AC : 5F                  		ld	e,a
(1) 1454/     6AD : 19                  		add	hl,de
(1) 1455/     6AE : 5E                  		ld	e,(hl)
(1) 1456/     6AF : 23                  		inc	hl
(1) 1457/     6B0 : 7E                  		ld	a,(hl)
(1) 1458/     6B1 : 57                  		ld	d,a
(1) 1459/     6B2 : CB BA               		res	7,d
(1) 1460/     6B4 : E1                  		pop	hl
(1) 1461/     6B5 : 19                  		add	hl,de
(1) 1462/     6B6 : D1                  		pop	de
(1) 1463/     6B7 : C9                  		ret
(1) 1464/     6B8 :                     
(1) 1465/     6B8 :                     ; d - Silence chip
(1) 1466/     6B8 :                     ;
(1) 1467/     6B8 :                     ; Uses:
(1) 1468/     6B8 :                     ; bc
(1) 1469/     6B8 :                     .reset_link:
(1) 1470/     6B8 : CF                  		rst	8
(1) 1471/     6B9 : 36 00               		ld	(hl),0			; Delete link
(1) 1472/     6BB : 23                  		inc	hl
(1) 1473/     6BC : 36 00               		ld	(hl),0
(1) 1474/     6BE : 23                  		inc	hl
(1) 1475/     6BF : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1476/     6C0 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1477/     6C3 : 09                  		add	hl,bc
(1) 1478/     6C4 : 06 04               		ld	b,8/2
(1) 1479/     6C6 :                     .clrfull:
(1) 1480/     6C6 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1481/     6C8 : 23                  		inc	hl
(1) 1482/     6C9 : 36 00               		ld	(hl),0
(1) 1483/     6CB : 23                  		inc	hl
(1) 1484/     6CC : CF                  		rst	8
(1) 1485/     6CD : 10 F7               		djnz	.clrfull
(1) 1486/     6CF : C9                  		ret
(1) 1487/     6D0 :                     
(1) 1488/     6D0 :                     ; ============================================
(1) 1489/     6D0 :                     ; ----------------------------------------
(1) 1490/     6D0 :                     ; Process chip using it's table
(1) 1491/     6D0 :                     ;
(1) 1492/     6D0 :                     ; iy - table to read
(1) 1493/     6D0 :                     ;  c - Chip ID
(1) 1494/     6D0 :                     ; ----------------------------------------
(1) 1495/     6D0 :                     
(1) 1496/     6D0 :                     dtbl_multi:
(1) 1497/     6D0 : FD 7E 00            		ld	a,(iy)
(1) 1498/     6D3 : FE FF               		cp	-1
(1) 1499/     6D5 : C8                  		ret	z
(1) 1500/     6D6 : CD E7 06            		call	dtbl_frommul
(1) 1501/     6D9 : CF                  		rst	8
(1) 1502/     6DA : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1503/     6DD : FD 19               		add	iy,de
(1) 1504/     6DF : 00                  		nop	; WAVE SYNC
(1) 1505/     6E0 : 00                  		nop
(1) 1506/     6E1 : 00                  		nop
(1) 1507/     6E2 : 00                  		nop
(1) 1508/     6E3 : CF                  		rst	8
(1) 1509/     6E4 : 18 EA               		jr	dtbl_multi
(1) 1510/     6E6 :                     dtbl_singl:
(1) 1511/     6E6 : CF                  		rst	8
(1) 1512/     6E7 :                     
(1) 1513/     6E7 :                     dtbl_frommul:
(1) 1514/     6E7 : FD 5E 00            		ld	e,(iy)
(1) 1515/     6EA : FD 56 01            		ld	d,(iy+1)
(1) 1516/     6ED : 7A                  		ld	a,d
(1) 1517/     6EE : B3                  		or	e
(1) 1518/     6EF : 20 53               		jr	nz,.linked
(1) 1519/     6F1 : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1520/     6F4 : B7                  		or	a
(1) 1521/     6F5 : F0                  		ret	p
(1) 1522/     6F6 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1523/     6F9 : CF                  		rst	8
(1) 1524/     6FA : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1525/     6FE :                     
(1) 1526/     6FE :                     ; ----------------------------------------
(1) 1527/     6FE :                     ; chip-silence request
(1) 1528/     6FE :                     ; iy - Table
(1) 1529/     6FE : E6 F0               		and	11110000b
(1) 1530/     700 : FE 80               		cp	80h
(1) 1531/     702 : 28 1A               		jr	z,.siln_psg
(1) 1532/     704 : FE 90               		cp	90h
(1) 1533/     706 : 28 12               		jr	z,.siln_psg_n
(1) 1534/     708 : FE A0               		cp	0A0h
(1) 1535/     70A : 28 1C               		jr	z,.siln_fm
(1) 1536/     70C : FE B0               		cp	0B0h
(1) 1537/     70E : 28 18               		jr	z,.siln_fm
(1) 1538/     710 : CF                  		rst	8
(1) 1539/     711 : FE C0               		cp	0C0h
(1) 1540/     713 : 28 10               		jr	z,.siln_dac
(1) 1541/     715 : FE D0               		cp	0D0h
(1) 1542/     717 : 28 15               		jr	z,.siln_pwm
(1) 1543/     719 : C9                  		ret
(1) 1544/     71A :                     .siln_psg_n:
(1) 1545/     71A : AF                  		xor	a
(1) 1546/     71B : 32 B2 17            		ld	(psgHatMode),a
(1) 1547/     71E :                     .siln_psg:
(1) 1548/     71E : CF                  		rst	8
(1) 1549/     71F : DD 21 27 17         		ld	ix,psgcom
(1) 1550/     723 : 18 13               		jr	.rcyl_com
(1) 1551/     725 :                     
(1) 1552/     725 :                     ; --------------------------------
(1) 1553/     725 :                     
(1) 1554/     725 :                     .siln_dac:
(1) 1555/     725 : CD 8C 11            		call	dac_off
(1) 1556/     728 :                     .siln_fm:
(1) 1557/     728 : CD D1 0C            		call	.fm_keyoff
(1) 1558/     72B : C3 D9 0C            		jp	.fm_tloff
(1) 1559/     72E :                     
(1) 1560/     72E :                     ; --------------------------------
(1) 1561/     72E :                     
(1) 1562/     72E :                     .siln_pwm:
(1) 1563/     72E : 3E 01               		ld	a,1
(1) 1564/     730 : 32 3F 00            		ld	(marsUpd),a
(1) 1565/     733 : CF                  		rst	8
(1) 1566/     734 : DD 21 EF 16         		ld	ix,pwmcom
(1) 1567/     738 :                     .rcyl_com:
(1) 1568/     738 : 06 00               		ld	b,0
(1) 1569/     73A : FD 4E 05            		ld	c,(iy+05h)
(1) 1570/     73D : DD 09               		add	ix,bc
(1) 1571/     73F : DD 36 00 04         		ld	(ix),100b
(1) 1572/     743 : C9                  		ret
(1) 1573/     744 :                     
(1) 1574/     744 :                     ; ----------------------------------------
(1) 1575/     744 :                     ; Process channel now
(1) 1576/     744 :                     ; iy - Table
(1) 1577/     744 :                     ; ix - Tracker channel
(1) 1578/     744 :                     .linked:
(1) 1579/     744 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1580/     745 : 47                  		ld	b,a		; b - flags to check
(1) 1581/     746 : E6 0F               		and	00001111b	; Filter flags
(1) 1582/     748 : C8                  		ret	z
(1) 1583/     749 : 78                  		ld	a,b
(1) 1584/     74A : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1585/     74C : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1586/     74D : D5                  		push	de
(1) 1587/     74E : DD E1               		pop	ix
(1) 1588/     750 : FD 6E 03            		ld	l,(iy+03h)
(1) 1589/     753 : FD 66 04            		ld	h,(iy+04h)
(1) 1590/     756 :                     
(1) 1591/     756 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1592/     756 :                     	; iy - Our chip table
(1) 1593/     756 :                     	; ix - Track channel
(1) 1594/     756 :                     	; hl - Intrument data
(1) 1595/     756 : CB 40               		bit	0,b		; Note
(1) 1596/     758 : C4 63 0C            		call	nz,.note
(1) 1597/     75B : CB 48               		bit	1,b		; Intrument
(1) 1598/     75D : C4 ED 0A            		call	nz,.inst
(1) 1599/     760 : CF                  		rst	8
(1) 1600/     761 : CB 50               		bit	2,b		; Volume
(1) 1601/     763 : C4 E4 0A            		call	nz,.volu
(1) 1602/     766 : CB 58               		bit	3,b		; Effect
(1) 1603/     768 : C4 1F 0A            		call	nz,.effc
(1) 1604/     76B : 78                  		ld	a,b
(1) 1605/     76C : E6 0F               		and	00001111b
(1) 1606/     76E : C8                  		ret	z
(1) 1607/     76F : CF                  		rst	8
(1) 1608/     770 :                     
(1) 1609/     770 :                     ; ----------------------------------------
(1) 1610/     770 :                     ; Process channel now
(1) 1611/     770 :                     ;
(1) 1612/     770 :                     ; b - Note bits
(1) 1613/     770 :                     ; ----------------------------------------
(1) 1614/     770 :                     
(1) 1615/     770 : 7E                  		ld	a,(hl)
(1) 1616/     771 : E6 70               		and	01110000b	; <--
(1) 1617/     773 : 0F                  		rrca
(1) 1618/     774 : 0F                  		rrca
(1) 1619/     775 : 0F                  		rrca
(1) 1620/     776 : 16 00               		ld	d,0
(1) 1621/     778 : 5F                  		ld	e,a
(1) 1622/     779 : 21 82 07            		ld	hl,.mk_list
(1) 1623/     77C : 19                  		add	hl,de
(1) 1624/     77D : 7E                  		ld	a,(hl)
(1) 1625/     77E : 23                  		inc	hl
(1) 1626/     77F : 66                  		ld	h,(hl)
(1) 1627/     780 : 6F                  		ld	l,a
(1) 1628/     781 : E9                  		jp	(hl)
(1) 1629/     782 :                     ; --------------------------------
(1) 1630/     782 :                     .mk_list:
(1) 1631/     782 : B0 07               		dw .mk_psg
(1) 1632/     784 : 92 07               		dw .mk_psgn
(1) 1633/     786 : 26 08               		dw .mk_fm
(1) 1634/     788 : 98 08               		dw .mk_fmspc
(1) 1635/     78A : 1E 09               		dw .mk_dac
(1) 1636/     78C : 74 09               		dw .mk_pwm
(1) 1637/     78E : 00 00               		dw 0
(1) 1638/     790 : 00 00               		dw 0
(1) 1639/     792 :                     
(1) 1640/     792 :                     ; --------------------------------
(1) 1641/     792 :                     
(1) 1642/     792 :                     .mk_psgn:
(1) 1643/     792 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1644/     795 : DD E5               		push	ix
(1) 1645/     797 : DD 21 2A 17         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1646/     79B : CF                  		rst	8
(1) 1647/     79C : FE FE               		cp	-2
(1) 1648/     79E : 28 76               		jr	z,.kycut_psgn
(1) 1649/     7A0 : FE FF               		cp	-1
(1) 1650/     7A2 : 28 62               		jr	z,.kyoff_psgn
(1) 1651/     7A4 : 5F                  		ld	e,a
(1) 1652/     7A5 : 3A B2 17            		ld	a,(psgHatMode)	; Tone 3?
(1) 1653/     7A8 : E6 03               		and	011b
(1) 1654/     7AA : FE 03               		cp	011b
(1) 1655/     7AC : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1656/     7AE : 18 19               		jr	.from_psgn	; Tone 3
(1) 1657/     7B0 :                     .mk_psg:
(1) 1658/     7B0 : CF                  		rst	8
(1) 1659/     7B1 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1660/     7B4 : DD E5               		push	ix
(1) 1661/     7B6 : DD 21 27 17         		ld	ix,psgcom	; ix - psgcom
(1) 1662/     7BA : FD 5E 05            		ld	e,(iy+05h)
(1) 1663/     7BD : 16 00               		ld	d,0
(1) 1664/     7BF : DD 19               		add	ix,de
(1) 1665/     7C1 : FE FE               		cp	-2
(1) 1666/     7C3 : 28 56               		jr	z,.kycut_psg
(1) 1667/     7C5 : FE FF               		cp	-1
(1) 1668/     7C7 : 28 42               		jr	z,.kyoff_psg
(1) 1669/     7C9 :                     .from_psgn:
(1) 1670/     7C9 : CF                  		rst	8
(1) 1671/     7CA : 16 00               		ld	d,0		; de - note*2
(1) 1672/     7CC : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1673/     7CF : 21 B3 12            		ld	hl,psgFreq_List
(1) 1674/     7D2 : 19                  		add	hl,de
(1) 1675/     7D3 : 7E                  		ld	a,(hl)
(1) 1676/     7D4 : 23                  		inc	hl
(1) 1677/     7D5 : 66                  		ld	h,(hl)
(1) 1678/     7D6 : 6F                  		ld	l,a
(1) 1679/     7D7 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1680/     7DA : 07                  		rlca			; << 3
(1) 1681/     7DB : 07                  		rlca
(1) 1682/     7DC : CF                  		rst	8
(1) 1683/     7DD : 07                  		rlca
(1) 1684/     7DE : 57                  		ld	d,a
(1) 1685/     7DF : E6 F8               		and	11111000b
(1) 1686/     7E1 : 5F                  		ld	e,a
(1) 1687/     7E2 : 7A                  		ld	a,d
(1) 1688/     7E3 : E6 07               		and	00000111b
(1) 1689/     7E5 : 57                  		ld	d,a
(1) 1690/     7E6 : 37                  		scf
(1) 1691/     7E7 : 3F                  		ccf
(1) 1692/     7E8 : ED 52               		sbc	hl,de
(1) 1693/     7EA : DD 75 1C            		ld	(ix+DTL),l
(1) 1694/     7ED : DD 74 20            		ld	(ix+DTH),h
(1) 1695/     7F0 :                     .psg_keyon:
(1) 1696/     7F0 : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1697/     7F3 : ED 44               		neg	a
(1) 1698/     7F5 : CF                  		rst	8
(1) 1699/     7F6 : 87                  		add	a,a
(1) 1700/     7F7 : 87                  		add	a,a
(1) 1701/     7F8 : 30 02               		jr	nc,.vmuch
(1) 1702/     7FA : 3E FF               		ld	a,-1
(1) 1703/     7FC :                     .vmuch:
(1) 1704/     7FC : DD 77 30            		ld	(ix+PVOL),a
(1) 1705/     7FF : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1706/     803 : DD E1               		pop	ix
(1) 1707/     805 : C9                  		ret
(1) 1708/     806 :                     ; -1
(1) 1709/     806 :                     .kyoff_psgn:
(1) 1710/     806 : 3E 00               		ld	a,000b
(1) 1711/     808 : 32 B2 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1712/     80B :                     .kyoff_psg:
(1) 1713/     80B : CF                  		rst	8
(1) 1714/     80C : 0E 02               		ld	c,010b
(1) 1715/     80E : DD 71 00            		ld	(ix),c
(1) 1716/     811 : DD E1               		pop	ix
(1) 1717/     813 : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 1718/     816 :                     ; -2
(1) 1719/     816 :                     .kycut_psgn:
(1) 1720/     816 : 3E 00               		ld	a,000b
(1) 1721/     818 : 32 B2 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1722/     81B :                     .kycut_psg:
(1) 1723/     81B : CF                  		rst	8
(1) 1724/     81C : 0E 04               		ld	c,100b
(1) 1725/     81E : DD 71 00            		ld	(ix),c
(1) 1726/     821 : DD E1               		pop	ix
(1) 1727/     823 : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 1728/     826 :                     
(1) 1729/     826 :                     ; --------------------------------
(1) 1730/     826 :                     
(1) 1731/     826 :                     .mk_fm:
(1) 1732/     826 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1733/     829 : FE FE               		cp	-2
(1) 1734/     82B : CA 15 09            		jp	z,.fm_cut
(1) 1735/     82E : FE FF               		cp	-1
(1) 1736/     830 : CA 0F 09            		jp	z,.fm_off
(1) 1737/     833 :                     ; 		call	.fm_tloff
(1) 1738/     833 : CF                  		rst	8
(1) 1739/     834 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1740/     837 : 78                  		ld	a,b		; Note bit?
(1) 1741/     838 : E6 01               		and	0001b
(1) 1742/     83A : 28 1F               		jr	z,.nofm_note
(1) 1743/     83C : FD 46 05            		ld	b,(iy+05h)	; Check channel 3
(1) 1744/     83F : 78                  		ld	a,b
(1) 1745/     840 : FE 02               		cp	2
(1) 1746/     842 : 20 0B               		jr	nz,.not_dspc
(1) 1747/     844 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1748/     847 : CD 61 11            		call	fm_send_1
(1) 1749/     84A : 3E 00               		ld	a,0
(1) 1750/     84C : 32 B3 17            		ld	(fmSpecial),a
(1) 1751/     84F :                     .not_dspc:
(1) 1752/     84F : 78                  		ld	a,b
(1) 1753/     850 : FE 06               		cp	6
(1) 1754/     852 : 20 04               		jr	nz,.not_dac
(1) 1755/     854 : CF                  		rst	8
(1) 1756/     855 : CD 8C 11            		call	dac_off
(1) 1757/     858 :                     .not_dac:
(1) 1758/     858 : CD D1 0C            		call	.fm_keyoff
(1) 1759/     85B :                     .nofm_note:
(1) 1760/     85B : FD 7E 06            		ld	a,(iy+06h)
(1) 1761/     85E : 47                  		ld	b,a
(1) 1762/     85F : E6 1F               		and	00011111b
(1) 1763/     861 : 5F                  		ld	e,a
(1) 1764/     862 : 16 00               		ld	d,0
(1) 1765/     864 : 21 9B 12            		ld	hl,fmFreq_List
(1) 1766/     867 : 19                  		add	hl,de
(1) 1767/     868 : 7E                  		ld	a,(hl)
(1) 1768/     869 : CF                  		rst	8
(1) 1769/     86A : 23                  		inc	hl
(1) 1770/     86B : 66                  		ld	h,(hl)
(1) 1771/     86C : 6F                  		ld	l,a
(1) 1772/     86D : 78                  		ld	a,b
(1) 1773/     86E : E6 E0               		and	11100000b
(1) 1774/     870 : 0F                  		rrca
(1) 1775/     871 : 0F                  		rrca
(1) 1776/     872 : B4                  		or	h
(1) 1777/     873 : 67                  		ld	h,a
(1) 1778/     874 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1779/     877 : CF                  		rst	8
(1) 1780/     878 : AF                  		xor	a		; Clear high
(1) 1781/     879 : 3F                  		ccf			; Clear carry
(1) 1782/     87A : CB 23               		sla	e		; << 2
(1) 1783/     87C : CB 23               		sla	e
(1) 1784/     87E : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1785/     87F : 57                  		ld	d,a
(1) 1786/     880 : 19                  		add	hl,de
(1) 1787/     881 : CD F0 0C            		call	.fm_setfreq
(1) 1788/     884 :                     .fmspc_set:
(1) 1789/     884 : CD 81 0D            		call	.fm_wrtalpan	; Panning and effects
(1) 1790/     887 : CD 07 0D            		call	.fm_wrtlvol	; FM volume control
(1) 1794/     88A : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Eh - keys
(1) 1795/     88D : E6 F0               		and	11110000b
(1) 1796/     88F : B1                  		or	c
(1) 1797/     890 : 5F                  		ld	e,a
(1) 1798/     891 : 16 28               		ld	d,28h
(1) 1799/     893 : CD 61 11            		call	fm_send_1
(1) 1800/     896 : CF                  		rst	8
(1) 1801/     897 : C9                  		ret
(1) 1803/     898 :                     
(1) 1804/     898 :                     ; --------------------------------
(1) 1805/     898 :                     
(1) 1806/     898 :                     .mk_fmspc:
(1) 1807/     898 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1808/     89B : FE FE               		cp	-2
(1) 1809/     89D : CA 15 09            		jp	z,.fm_cut
(1) 1810/     8A0 : FE FF               		cp	-1
(1) 1811/     8A2 : CA 0F 09            		jp	z,.fm_off
(1) 1812/     8A5 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1813/     8A8 : 78                  		ld	a,b
(1) 1814/     8A9 : E6 01               		and	0001b
(1) 1815/     8AB : 28 D7               		jr	z,.fmspc_set
(1) 1816/     8AD : CD D1 0C            		call	.fm_keyoff
(1) 1817/     8B0 : 21 95 14            		ld	hl,fmcach_list	; Manual freqs
(1) 1818/     8B3 : FD 7E 05            		ld	a,(iy+05h)
(1) 1819/     8B6 : E6 07               		and	0111b
(1) 1820/     8B8 : 16 00               		ld	d,0
(1) 1821/     8BA : 87                  		add	a,a
(1) 1822/     8BB : 5F                  		ld	e,a
(1) 1823/     8BC : CF                  		rst	8
(1) 1824/     8BD : 19                  		add	hl,de
(1) 1825/     8BE : 7E                  		ld	a,(hl)
(1) 1826/     8BF : 23                  		inc	hl
(1) 1827/     8C0 : 66                  		ld	h,(hl)
(1) 1828/     8C1 : 6F                  		ld	l,a
(1) 1829/     8C2 : 11 20 00            		ld	de,20h		; point to regs
(1) 1830/     8C5 : 19                  		add	hl,de
(1) 1831/     8C6 : 16 AD               		ld	d,0ADh
(1) 1832/     8C8 : 5E                  		ld	e,(hl)
(1) 1833/     8C9 : CD 61 11            		call	fm_send_1
(1) 1834/     8CC : 23                  		inc	hl
(1) 1835/     8CD : 16 A9               		ld	d,0A9h
(1) 1836/     8CF : 5E                  		ld	e,(hl)
(1) 1837/     8D0 : CD 61 11            		call	fm_send_1
(1) 1838/     8D3 : 23                  		inc	hl
(1) 1839/     8D4 : CF                  		rst	8
(1) 1840/     8D5 : 16 AC               		ld	d,0ACh
(1) 1841/     8D7 : 5E                  		ld	e,(hl)
(1) 1842/     8D8 : CD 61 11            		call	fm_send_1
(1) 1843/     8DB : 23                  		inc	hl
(1) 1844/     8DC : 16 A8               		ld	d,0A8h
(1) 1845/     8DE : 5E                  		ld	e,(hl)
(1) 1846/     8DF : CD 61 11            		call	fm_send_1
(1) 1847/     8E2 : 23                  		inc	hl
(1) 1848/     8E3 : 16 AE               		ld	d,0AEh
(1) 1849/     8E5 : 5E                  		ld	e,(hl)
(1) 1850/     8E6 : CD 61 11            		call	fm_send_1
(1) 1851/     8E9 : 23                  		inc	hl
(1) 1852/     8EA : CF                  		rst	8
(1) 1853/     8EB : 16 AA               		ld	d,0AAh
(1) 1854/     8ED : 5E                  		ld	e,(hl)
(1) 1855/     8EE : CD 61 11            		call	fm_send_1
(1) 1856/     8F1 : 23                  		inc	hl
(1) 1857/     8F2 : 16 A6               		ld	d,0A6h
(1) 1858/     8F4 : 5E                  		ld	e,(hl)
(1) 1859/     8F5 : CD 61 11            		call	fm_send_1
(1) 1860/     8F8 : 23                  		inc	hl
(1) 1861/     8F9 : 16 A2               		ld	d,0A2h
(1) 1862/     8FB : 5E                  		ld	e,(hl)
(1) 1863/     8FC : CD 61 11            		call	fm_send_1
(1) 1864/     8FF : 23                  		inc	hl
(1) 1865/     900 : CF                  		rst	8
(1) 1866/     901 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 1867/     904 : CD 61 11            		call	fm_send_1
(1) 1868/     907 : 3E 01               		ld	a,1
(1) 1869/     909 : 32 B3 17            		ld	(fmSpecial),a
(1) 1870/     90C : C3 84 08            		jp	.fmspc_set
(1) 1871/     90F :                     
(1) 1872/     90F :                     ; --------------------------------
(1) 1873/     90F :                     
(1) 1874/     90F :                     .fm_off:
(1) 1875/     90F : CD D1 0C            		call	.fm_keyoff
(1) 1876/     912 : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 1877/     915 :                     .fm_cut:
(1) 1878/     915 : CD D1 0C            		call	.fm_keyoff
(1) 1879/     918 : CD D9 0C            		call	.fm_tloff
(1) 1880/     91B : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 1881/     91E :                     
(1) 1882/     91E :                     ; --------------------------------
(1) 1883/     91E :                     
(1) 1884/     91E :                     .mk_dac:
(1) 1885/     91E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1886/     921 : FE FE               		cp	-2
(1) 1887/     923 : CA 45 09            		jp	z,.dac_cut
(1) 1888/     926 : FE FF               		cp	-1
(1) 1889/     928 : CA 4B 09            		jp	z,.dac_off
(1) 1890/     92B : CD 4E 09            		call	.dac_pitch
(1) 1891/     92E : 78                  		ld	a,b		; Note ONLY?
(1) 1892/     92F : E6 01               		and	0001b
(1) 1893/     931 : C8                  		ret	z
(1) 1894/     932 : CD 8C 11            		call	dac_off
(1) 1895/     935 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 1896/     938 : 2F                  		cpl				; REVERSE bits
(1) 1897/     939 : E6 C0               		and	11000000b
(1) 1898/     93B : 5F                  		ld	e,a
(1) 1899/     93C : 16 B6               		ld	d,0B6h		; Channel 6 panning
(1) 1900/     93E : CD 6C 11            		call	fm_send_2
(1) 1901/     941 : CF                  		rst	8
(1) 1902/     942 : C3 A1 11            		jp	dac_play
(1) 1903/     945 :                     .dac_cut:
(1) 1904/     945 : CD 8C 11            		call	dac_off
(1) 1905/     948 : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 1906/     94B :                     .dac_off:
(1) 1907/     94B : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 1908/     94E :                     
(1) 1909/     94E :                     
(1) 1910/     94E :                     .dac_pitch:
(1) 1911/     94E : 16 00               		ld	d,0		; Freq index
(1) 1912/     950 : FD 5E 06            		ld	e,(iy+06h)
(1) 1913/     953 : 21 A5 13            		ld	hl,wavFreq_List
(1) 1914/     956 : 19                  		add	hl,de
(1) 1915/     957 : 7E                  		ld	a,(hl)
(1) 1916/     958 : 23                  		inc	hl
(1) 1917/     959 : 66                  		ld	h,(hl)
(1) 1918/     95A : CF                  		rst	8
(1) 1919/     95B : 6F                  		ld	l,a
(1) 1920/     95C : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1921/     95F : AF                  		xor	a		; Clear high
(1) 1922/     960 : 3F                  		ccf			; Clear carry
(1) 1923/     961 : CB 23               		sla	e		; << 3
(1) 1924/     963 : CB 23               		sla	e
(1) 1925/     965 : CB 23               		sla	e
(1) 1926/     967 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1927/     968 : 57                  		ld	d,a
(1) 1928/     969 : 19                  		add	hl,de
(1) 1929/     96A : 22 AC 17            		ld	(wave_Pitch),hl
(1) 1930/     96D : D9                  		exx			; *
(1) 1931/     96E : ED 5B AC 17         		ld	de,(wave_Pitch)	; *
(1) 1932/     972 : D9                  		exx			; *
(1) 1933/     973 : C9                  		ret
(1) 1934/     974 :                     
(1) 1935/     974 :                     ; --------------------------------
(1) 1936/     974 :                     
(1) 1937/     974 :                     .mk_pwm:
(1) 1938/     974 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1939/     977 : 16 00               		ld	d,0
(1) 1940/     979 : FD 5E 05            		ld	e,(iy+05h)
(1) 1941/     97C : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 1942/     97F : DD E5               		push	ix
(1) 1943/     981 : DD 21 EF 16         		ld	ix,pwmcom
(1) 1944/     985 : DD 19               		add	ix,de
(1) 1945/     987 : FE FE               		cp	-2
(1) 1946/     989 : CA 10 0A            		jp	z,.pwm_cut
(1) 1947/     98C : FE FF               		cp	-1
(1) 1948/     98E : CA 01 0A            		jp	z,.pwm_off
(1) 1949/     991 : CF                  		rst	8
(1) 1950/     992 : 78                  		ld	a,b
(1) 1951/     993 : CB 40               		bit	0,b			; Note?
(1) 1952/     995 : 20 0E               		jr	nz,.pw_note
(1) 1953/     997 : CB 58               		bit	3,b			; Effect?
(1) 1954/     999 : 20 03               		jr	nz,.pw_effc
(1) 1955/     99B : DD E1               		pop	ix
(1) 1956/     99D : C9                  		ret
(1) 1957/     99E :                     
(1) 1958/     99E :                     ; --------------------------------
(1) 1959/     99E :                     
(1) 1960/     99E :                     .pw_effc:
(1) 1961/     99E : CD CE 09            		call	.pw_setup
(1) 1962/     9A1 : 0E 11               		ld	c,00010001b
(1) 1963/     9A3 : 18 05               		jr	.pw_send
(1) 1964/     9A5 :                     .pw_note:
(1) 1965/     9A5 : CD CE 09            		call	.pw_setup
(1) 1966/     9A8 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 1967/     9AA :                     .pw_send:
(1) 1968/     9AA : DD 71 00            		ld	(ix),c
(1) 1969/     9AD : 01 08 00            		ld	bc,8
(1) 1970/     9B0 : DD 09               		add	ix,bc
(1) 1971/     9B2 : DD 77 00            		ld	(ix),a
(1) 1972/     9B5 : DD 09               		add	ix,bc
(1) 1973/     9B7 : DD 75 00            		ld	(ix),l
(1) 1974/     9BA : DD 09               		add	ix,bc
(1) 1975/     9BC : CF                  		rst	8
(1) 1976/     9BD : DD 7E 00            		ld	a,(ix)
(1) 1977/     9C0 : E6 CF               		and	11001111b
(1) 1978/     9C2 : B3                  		or	e
(1) 1979/     9C3 : DD 77 00            		ld	(ix),a
(1) 1981/     9C6 : 3E 01               		ld	a,1
(1) 1982/     9C8 : 32 3F 00            		ld	(marsUpd),a
(1) 1984/     9CB : DD E1               		pop	ix
(1) 1985/     9CD : C9                  		ret
(1) 1986/     9CE :                     .pw_setup:
(1) 1987/     9CE : 16 00               		ld	d,0		; Freq index
(1) 1988/     9D0 : FD 5E 06            		ld	e,(iy+06h)
(1) 1989/     9D3 : 21 A5 13            		ld	hl,wavFreq_List
(1) 1990/     9D6 : 19                  		add	hl,de
(1) 1991/     9D7 : 7E                  		ld	a,(hl)
(1) 1992/     9D8 : 23                  		inc	hl
(1) 1993/     9D9 : 66                  		ld	h,(hl)
(1) 1994/     9DA : 6F                  		ld	l,a
(1) 1995/     9DB : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1996/     9DE : AF                  		xor	a		; Clear high
(1) 1997/     9DF : 3F                  		ccf			; Clear carry
(1) 1998/     9E0 : CB 23               		sla	e		; << 2
(1) 1999/     9E2 : CB 23               		sla	e
(1) 2000/     9E4 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2001/     9E5 : 57                  		ld	d,a
(1) 2002/     9E6 : 19                  		add	hl,de
(1) 2003/     9E7 : CF                  		rst	8
(1) 2004/     9E8 : 79                  		ld	a,c
(1) 2005/     9E9 : 0F                  		rrca
(1) 2006/     9EA : 0F                  		rrca
(1) 2007/     9EB : 2F                  		cpl
(1) 2008/     9EC : E6 30               		and	00110000b
(1) 2009/     9EE : 5F                  		ld	e,a
(1) 2010/     9EF : AF                  		xor	a
(1) 2011/     9F0 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 2012/     9F3 : ED 44               		neg	a
(1) 2013/     9F5 : CB 27               		sla	a
(1) 2014/     9F7 : CB 27               		sla	a
(1) 2015/     9F9 : 30 02               		jr	nc,.pwv_much
(1) 2016/     9FB : 3E FF               		ld	a,-1
(1) 2017/     9FD :                     .pwv_much:
(1) 2018/     9FD : E6 FC               		and	11111100b
(1) 2019/     9FF : B4                  		or	h		; Merge MSB freq
(1) 2020/     A00 : C9                  		ret
(1) 2021/     A01 :                     
(1) 2022/     A01 :                     ; --------------------------------
(1) 2023/     A01 :                     ; -1
(1) 2024/     A01 :                     .pwm_off:
(1) 2025/     A01 : CF                  		rst	8
(1) 2026/     A02 : DD 36 00 02         		ld	(ix),010b
(1) 2027/     A06 : 3E 01               		ld	a,1
(1) 2028/     A08 : 32 3F 00            		ld	(marsUpd),a
(1) 2029/     A0B : DD E1               		pop	ix
(1) 2030/     A0D : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 2031/     A10 :                     ; -2
(1) 2032/     A10 :                     .pwm_cut:
(1) 2033/     A10 : CF                  		rst	8
(1) 2034/     A11 : DD 36 00 04         		ld	(ix),100b
(1) 2035/     A15 : 3E 01               		ld	a,1
(1) 2036/     A17 : 32 3F 00            		ld	(marsUpd),a
(1) 2037/     A1A : DD E1               		pop	ix
(1) 2038/     A1C : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 2039/     A1F :                     
(1) 2040/     A1F :                     ; ----------------------------------------
(1) 2041/     A1F :                     ; NEW effect
(1) 2042/     A1F :                     ; ----------------------------------------
(1) 2043/     A1F :                     
(1) 2044/     A1F :                     .effc:
(1) 2045/     A1F : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2046/     A22 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2047/     A25 : 57                  		ld	d,a
(1) 2048/     A26 : CF                  		rst	8
(1) 2049/     A27 : FE 04               		cp	4			; Effect D?
(1) 2050/     A29 : 28 0F               		jr	z,.effc_D
(1) 2051/     A2B : FE 05               		cp	5			; Effect E?
(1) 2052/     A2D : 28 4E               		jr	z,.effc_E
(1) 2053/     A2F : FE 06               		cp	6			; Effect F?
(1) 2054/     A31 : 28 5F               		jr	z,.effc_F
(1) 2055/     A33 : CF                  		rst	8
(1) 2056/     A34 : FE 18               		cp	24			; Effect X?
(1) 2057/     A36 : CA B3 0A            		jp	z,.effc_X
(1) 2058/     A39 : C9                  		ret
(1) 2059/     A3A :                     
(1) 2060/     A3A :                     ; ----------------------------------------
(1) 2061/     A3A :                     ; Effect D
(1) 2062/     A3A :                     ;
(1) 2063/     A3A :                     ; Volume slide down
(1) 2064/     A3A :                     ;
(1) 2065/     A3A :                     ; 0xh-Exh - Normal
(1) 2066/     A3A :                     ; Fxh-Fxh - Fine slide / 2
(1) 2067/     A3A :                     
(1) 2068/     A3A :                     .effc_D:
(1) 2069/     A3A : CD A7 0A            		call	.save_arg
(1) 2070/     A3D : 79                  		ld	a,c		; Setting == 0?
(1) 2071/     A3E : B7                  		or	a
(1) 2072/     A3F : C8                  		ret	z
(1) 2073/     A40 : E6 F0               		and	0F0h
(1) 2074/     A42 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2075/     A44 : FE F0               		cp	0F0h
(1) 2076/     A46 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2077/     A48 : CF                  		rst	8
(1) 2078/     A49 : 79                  		ld	a,c
(1) 2079/     A4A : E6 0F               		and	00Fh
(1) 2080/     A4C : 28 1D               		jr	z,.norm_up	; x0h
(1) 2081/     A4E : FE 0F               		cp	00Fh
(1) 2082/     A50 : 28 17               		jr	z,.fine_up	; xFh
(1) 2083/     A52 : C9                  		ret
(1) 2084/     A53 :                     ; Go down
(1) 2085/     A53 :                     .norm_down:
(1) 2086/     A53 : CB 21               		sla	c
(1) 2087/     A55 :                     .fine_down:
(1) 2088/     A55 : CB 21               		sla	c
(1) 2089/     A57 : 79                  		ld	a,c
(1) 2090/     A58 : E6 3C               		and	00111100b
(1) 2091/     A5A : 4F                  		ld	c,a
(1) 2092/     A5B : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2093/     A5E : CF                  		rst	8
(1) 2094/     A5F : 91                  		sub	a,c
(1) 2095/     A60 : 1E C0               		ld	e,0C0h
(1) 2096/     A62 : BB                  		cp	e
(1) 2097/     A63 : D2 79 0A            		jp	nc,.vol_dvld
(1) 2098/     A66 : 7B                  		ld	a,e
(1) 2099/     A67 : 18 10               		jr 	.vol_dvld
(1) 2100/     A69 :                     ; Go up
(1) 2101/     A69 :                     .fine_up:
(1) 2102/     A69 : CB 39               		srl	c
(1) 2103/     A6B :                     .norm_up:
(1) 2104/     A6B : CB 39               		srl	c
(1) 2105/     A6D : 79                  		ld	a,c
(1) 2106/     A6E : E6 3C               		and	00111100b
(1) 2107/     A70 : 4F                  		ld	c,a
(1) 2108/     A71 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2109/     A74 : CF                  		rst	8
(1) 2110/     A75 : 81                  		add	a,c
(1) 2111/     A76 : 38 01               		jr	c,.vol_dvld
(1) 2112/     A78 : AF                  		xor	a
(1) 2113/     A79 :                     .vol_dvld:
(1) 2114/     A79 : FD 77 08            		ld	(iy+08h),a
(1) 2115/     A7C : C9                  		ret
(1) 2116/     A7D :                     
(1) 2117/     A7D :                     ; ----------------------------------------
(1) 2118/     A7D :                     ; Effect E
(1) 2119/     A7D :                     .effc_E:
(1) 2120/     A7D : CD A7 0A            		call	.save_arg
(1) 2121/     A80 : 79                  		ld	a,c
(1) 2122/     A81 : E6 F0               		and	0F0h
(1) 2123/     A83 : FE F0               		cp	0F0h
(1) 2124/     A85 : C8                  		ret	z
(1) 2125/     A86 : FE E0               		cp	0E0h
(1) 2126/     A88 : C8                  		ret	z
(1) 2127/     A89 : CF                  		rst	8
(1) 2128/     A8A : FD 7E 07            		ld	a,(iy+07h)
(1) 2129/     A8D : 91                  		sub	a,c
(1) 2130/     A8E : FD 77 07            		ld	(iy+07h),a
(1) 2131/     A91 : C9                  		ret
(1) 2132/     A92 :                     
(1) 2133/     A92 :                     ; ----------------------------------------
(1) 2134/     A92 :                     ; Effect F
(1) 2135/     A92 :                     .effc_F:
(1) 2136/     A92 : CD A7 0A            		call	.save_arg
(1) 2137/     A95 : 79                  		ld	a,c
(1) 2138/     A96 : E6 F0               		and	0F0h
(1) 2139/     A98 : FE F0               		cp	0F0h
(1) 2140/     A9A : C8                  		ret	z
(1) 2141/     A9B : FE E0               		cp	0E0h
(1) 2142/     A9D : C8                  		ret	z
(1) 2143/     A9E : CF                  		rst	8
(1) 2144/     A9F : FD 7E 07            		ld	a,(iy+07h)
(1) 2145/     AA2 : 81                  		add	a,c
(1) 2146/     AA3 : FD 77 07            		ld	(iy+07h),a
(1) 2147/     AA6 : C9                  		ret
(1) 2148/     AA7 :                     
(1) 2149/     AA7 :                     ; --------------------------------
(1) 2150/     AA7 :                     ; e - got arg
(1) 2151/     AA7 :                     ; c - new arg
(1) 2152/     AA7 :                     .save_arg:
(1) 2153/     AA7 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2154/     AAA : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2155/     AAB : B7                  		or	a
(1) 2156/     AAC : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2157/     AAE : 4F                  		ld	c,a
(1) 2158/     AAF : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2159/     AB2 :                     .D_cont:
(1) 2160/     AB2 : C9                  		ret
(1) 2161/     AB3 :                     
(1) 2162/     AB3 :                     ; ----------------------------------------
(1) 2163/     AB3 :                     ; Effect X
(1) 2164/     AB3 :                     ;
(1) 2165/     AB3 :                     ; Panning arg:
(1) 2166/     AB3 :                     ; 00h LEFT <- 80h MIDDLE -> FFh RIGHT
(1) 2167/     AB3 :                     ;
(1) 2168/     AB3 :                     ; FM style %LR000000 (REVERSE: 0-on 1-off)
(1) 2169/     AB3 :                     
(1) 2170/     AB3 :                     .effc_X:
(1) 2171/     AB3 : 16 00               		ld	d,0
(1) 2172/     AB5 : 7E                  		ld	a,(hl)
(1) 2173/     AB6 : FE 80               		cp	80h		; PSG?
(1) 2174/     AB8 : 28 18               		jr	z,.res_pan
(1) 2175/     ABA : FE 90               		cp	90h		; PSGN?
(1) 2176/     ABC : 28 14               		jr	z,.res_pan
(1) 2177/     ABE : FD 36 09 00         		ld	(iy+09h),0
(1) 2178/     AC2 : CF                  		rst	8
(1) 2179/     AC3 : E5                  		push	hl
(1) 2180/     AC4 : 21 DC 0A            		ld	hl,.fm_panlist
(1) 2181/     AC7 : 7B                  		ld	a,e
(1) 2182/     AC8 : 07                  		rlca
(1) 2183/     AC9 : 07                  		rlca
(1) 2184/     ACA : 07                  		rlca
(1) 2185/     ACB : E6 07               		and	0111b
(1) 2186/     ACD :                     ; 		ld	d,0
(1) 2187/     ACD : 5F                  		ld	e,a
(1) 2188/     ACE : CF                  		rst	8
(1) 2189/     ACF : 19                  		add	hl,de
(1) 2190/     AD0 : 56                  		ld	d,(hl)
(1) 2191/     AD1 : E1                  		pop	hl
(1) 2192/     AD2 :                     .res_pan:
(1) 2193/     AD2 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2194/     AD5 : E6 3F               		and	00111111b
(1) 2195/     AD7 : B2                  		or	d
(1) 2196/     AD8 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2197/     ADB : C9                  		ret
(1) 2198/     ADC :                     
(1) 2199/     ADC :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2200/     ADC :                     .fm_panlist:
(1) 2201/     ADC : 40                  		db 01000000b
(1) 2202/     ADD : 40                  		db 01000000b
(1) 2203/     ADE : 40                  		db 01000000b
(1) 2204/     ADF : 00                  		db 00000000b
(1) 2205/     AE0 : 00                  		db 00000000b
(1) 2206/     AE1 : 80                  		db 10000000b
(1) 2207/     AE2 : 80                  		db 10000000b
(1) 2208/     AE3 : 80                  		db 10000000b
(1) 2209/     AE4 :                     
(1) 2210/     AE4 :                     ; ----------------------------------------
(1) 2211/     AE4 :                     ; NEW volume
(1) 2212/     AE4 :                     ; ----------------------------------------
(1) 2213/     AE4 :                     
(1) 2214/     AE4 :                     .volu:
(1) 2215/     AE4 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2216/     AE7 : D6 40               		sub	a,64
(1) 2217/     AE9 : FD 77 08            		ld	(iy+08h),a	; <-- BASE volume
(1) 2218/     AEC : C9                  		ret
(1) 2219/     AED :                     
(1) 2220/     AED :                     ; ----------------------------------------
(1) 2221/     AED :                     ; NEW instrument
(1) 2222/     AED :                     ; ----------------------------------------
(1) 2223/     AED :                     
(1) 2224/     AED :                     .inst:
(1) 2225/     AED : 7E                  		ld	a,(hl)
(1) 2226/     AEE : E6 F0               		and	11110000b
(1) 2227/     AF0 : FE 80               		cp	80h
(1) 2228/     AF2 : 28 1E               		jr	z,.ps_ins
(1) 2229/     AF4 : FE 90               		cp	90h
(1) 2230/     AF6 : 28 14               		jr	z,.pn_ins
(1) 2231/     AF8 : FE A0               		cp	0A0h
(1) 2232/     AFA : 28 4C               		jr	z,.fm_ins
(1) 2233/     AFC : FE B0               		cp	0B0h
(1) 2234/     AFE : 28 48               		jr	z,.fm_ins
(1) 2235/     B00 : FE C0               		cp	0C0h
(1) 2236/     B02 : CA C9 0B            		jp	z,.dac_ins
(1) 2237/     B05 : CF                  		rst	8
(1) 2238/     B06 : FE D0               		cp	0D0h
(1) 2239/     B08 : CA 20 0C            		jp	z,.pwm_ins
(1) 2240/     B0B :                     
(1) 2241/     B0B :                     ; ----------------------------------------
(1) 2242/     B0B :                     
(1) 2243/     B0B :                     .invl_ins:
(1) 2244/     B0B : C9                  		ret
(1) 2245/     B0C :                     
(1) 2246/     B0C :                     ; ----------------------------------------
(1) 2247/     B0C :                     
(1) 2248/     B0C :                     ; PSG
(1) 2249/     B0C :                     .pn_ins:
(1) 2250/     B0C : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2251/     B0D : E6 07               		and	0111b
(1) 2252/     B0F : 32 B2 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2253/     B12 :                     .ps_ins:
(1) 2254/     B12 : CF                  		rst	8
(1) 2255/     B13 : DD E5               		push	ix
(1) 2256/     B15 : E5                  		push	hl
(1) 2257/     B16 : 23                  		inc	hl		; Skip ID
(1) 2258/     B17 : DD 21 27 17         		ld	ix,psgcom	; Read psg control
(1) 2259/     B1B : FD 5E 05            		ld	e,(iy+05h)
(1) 2260/     B1E : 16 00               		ld	d,0
(1) 2261/     B20 : DD 19               		add	ix,de
(1) 2262/     B22 : 7E                  		ld	a,(hl)
(1) 2263/     B23 : CF                  		rst	8
(1) 2264/     B24 : 23                  		inc	hl
(1) 2265/     B25 : 7E                  		ld	a,(hl)
(1) 2266/     B26 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2267/     B29 : 23                  		inc	hl
(1) 2268/     B2A : 7E                  		ld	a,(hl)
(1) 2269/     B2B : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2270/     B2E : 23                  		inc	hl
(1) 2271/     B2F : 7E                  		ld	a,(hl)
(1) 2272/     B30 : CF                  		rst	8
(1) 2273/     B31 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2274/     B34 : 23                  		inc	hl
(1) 2275/     B35 : 7E                  		ld	a,(hl)
(1) 2276/     B36 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2277/     B39 : 23                  		inc	hl
(1) 2278/     B3A : 7E                  		ld	a,(hl)
(1) 2279/     B3B : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2280/     B3E : 23                  		inc	hl
(1) 2281/     B3F : 7E                  		ld	a,(hl)
(1) 2282/     B40 : CF                  		rst	8
(1) 2283/     B41 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2284/     B44 : E1                  		pop	hl
(1) 2285/     B45 : DD E1               		pop	ix
(1) 2286/     B47 : C9                  		ret
(1) 2287/     B48 :                     
(1) 2288/     B48 :                     ; --------
(1) 2289/     B48 :                     
(1) 2290/     B48 :                     .fm_ins:
(1) 2291/     B48 :                     ;  ret
(1) 2292/     B48 : DD E5               		push	ix
(1) 2293/     B4A : E5                  		push	hl
(1) 2294/     B4B : C5                  		push	bc
(1) 2295/     B4C :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2296/     B4C : FD 46 02            		ld	b,(iy+02h)
(1) 2297/     B4F : FD 7E 05            		ld	a,(iy+05h)
(1) 2298/     B52 : E6 07               		and	0111b
(1) 2299/     B54 : 16 00               		ld	d,0
(1) 2300/     B56 : 87                  		add	a,a
(1) 2301/     B57 : 5F                  		ld	e,a
(1) 2302/     B58 : DD 21 95 14         		ld	ix,fmcach_list
(1) 2303/     B5C : DD 19               		add	ix,de
(1) 2304/     B5E : CF                  		rst	8
(1) 2305/     B5F : DD 5E 00            		ld	e,(ix)
(1) 2306/     B62 : DD 23               		inc	ix
(1) 2307/     B64 : DD 56 00            		ld	d,(ix)
(1) 2308/     B67 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2309/     B67 :                     ; 		cp	b
(1) 2310/     B67 :                     ; 		jr	z,.same_patch
(1) 2311/     B67 :                     ; 		ld	(iy+0Bh),b
(1) 2312/     B67 : 23                  		inc	hl		; Skip id and pitch
(1) 2313/     B68 : 23                  		inc	hl
(1) 2314/     B69 : 46                  		ld	b,(hl)
(1) 2315/     B6A : 23                  		inc	hl
(1) 2316/     B6B : 4E                  		ld	c,(hl)
(1) 2317/     B6C : 23                  		inc	hl
(1) 2318/     B6D : 6E                  		ld	l,(hl)
(1) 2319/     B6E : 61                  		ld	h,c
(1) 2320/     B6F : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2321/     B72 : BC                  		cp	h
(1) 2322/     B73 : 20 07               		jr	nz,.new_romdat
(1) 2323/     B75 : CF                  		rst	8
(1) 2324/     B76 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2325/     B79 : BD                  		cp	l
(1) 2326/     B7A : 28 38               		jr	z,.same_patch
(1) 2327/     B7C :                     .new_romdat:
(1) 2328/     B7C : FD 74 0A            		ld	(iy+0Ah),h
(1) 2329/     B7F : FD 75 0B            		ld	(iy+0Bh),l
(1) 2330/     B82 : 78                  		ld	a,b
(1) 2331/     B83 : D5                  		push	de
(1) 2332/     B84 : 01 28 00            		ld	bc,28h		; <- size
(1) 2333/     B87 : CD 74 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2334/     B8A :                     
(1) 2335/     B8A : E1                  		pop	hl
(1) 2336/     B8B : FD 7E 05            		ld	a,(iy+05h)
(1) 2337/     B8E : 4F                  		ld	c,a		; c - FM Key ID
(1) 2338/     B8F :                     ; 		call	.fm_keyoff
(1) 2339/     B8F :                     
(1) 2340/     B8F :                     	; hl - fmcach intrument
(1) 2341/     B8F :                     	; de - FM reg and data: 3000h
(1) 2342/     B8F :                     	;  c - FM keyChannel
(1) 2343/     B8F : 79                  		ld	a,c
(1) 2344/     B90 : E6 03               		and	011b
(1) 2345/     B92 : F6 30               		or	30h		; Start at reg 30h
(1) 2346/     B94 : 57                  		ld	d,a
(1) 2347/     B95 : 1E 00               		ld	e,0
(1) 2348/     B97 : CF                  		rst	8
(1) 2349/     B98 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2350/     B9A : CD B9 0B            		call	.fm_setrlist
(1) 2351/     B9D :                     ; 		ld	b,4
(1) 2352/     B9D :                     ; 		call	.fm_setrlist
(1) 2353/     B9D :                     ; 		ld	b,5*4
(1) 2354/     B9D :                     ; 		call	.fm_setrlist
(1) 2355/     B9D : 7E                  		ld	a,(hl)		; 0B0h
(1) 2356/     B9E : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2357/     BA1 : 23                  		inc	hl
(1) 2358/     BA2 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2359/     BA3 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2360/     BA6 : 23                  		inc	hl
(1) 2361/     BA7 : CF                  		rst	8
(1) 2362/     BA8 : 7E                  		ld	a,(hl)
(1) 2363/     BA9 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2364/     BAC : 23                  		inc	hl
(1) 2365/     BAD : 7E                  		ld	a,(hl)		; 028h keys
(1) 2366/     BAE : E6 F0               		and	11110000b
(1) 2367/     BB0 : CF                  		rst	8
(1) 2368/     BB1 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2369/     BB4 :                     .same_patch:
(1) 2370/     BB4 : C1                  		pop	bc
(1) 2371/     BB5 : E1                  		pop	hl
(1) 2372/     BB6 : DD E1               		pop	ix
(1) 2373/     BB8 : C9                  		ret
(1) 2374/     BB9 :                     ; b - numof_regs
(1) 2375/     BB9 :                     .fm_setrlist:
(1) 2376/     BB9 : 5E                  		ld	e,(hl)
(1) 2377/     BBA : 23                  		inc	hl
(1) 2378/     BBB : CD 58 11            		call	fm_autoreg
(1) 2379/     BBE : 00                  		nop
(1) 2380/     BBF : 00                  		nop
(1) 2381/     BC0 : CF                  		rst	8
(1) 2382/     BC1 : 00                  		nop
(1) 2383/     BC2 : 14                  		inc	d		; +4
(1) 2384/     BC3 : 14                  		inc	d
(1) 2385/     BC4 : 14                  		inc	d
(1) 2386/     BC5 : 14                  		inc	d
(1) 2387/     BC6 : 10 F1               		djnz	.fm_setrlist
(1) 2388/     BC8 : C9                  		ret
(1) 2389/     BC9 :                     ; --------
(1) 2390/     BC9 :                     
(1) 2391/     BC9 :                     .dac_ins:
(1) 2392/     BC9 : DD 5E 03            		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2393/     BCC :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2394/     BCC :                     ; 		cp	e
(1) 2395/     BCC :                     ; 		jr	z,.same_dac
(1) 2396/     BCC : FD 73 0B            		ld	(iy+0Bh),e
(1) 2397/     BCF : E5                  		push	hl
(1) 2398/     BD0 : C5                  		push	bc
(1) 2399/     BD1 : 7E                  		ld	a,(hl)
(1) 2400/     BD2 : E6 0F               		and	01111b
(1) 2401/     BD4 : 32 AE 17            		ld	(wave_Flags),a
(1) 2402/     BD7 : CF                  		rst	8
(1) 2403/     BD8 : 23                  		inc	hl
(1) 2404/     BD9 : 23                  		inc	hl
(1) 2405/     BDA : 5E                  		ld	e,(hl)
(1) 2406/     BDB : 23                  		inc	hl
(1) 2407/     BDC : 7E                  		ld	a,(hl)
(1) 2408/     BDD : 23                  		inc	hl
(1) 2409/     BDE : 6E                  		ld	l,(hl)
(1) 2410/     BDF : 67                  		ld	h,a
(1) 2411/     BE0 : E5                  		push	hl
(1) 2412/     BE1 : 7B                  		ld	a,e
(1) 2413/     BE2 : 01 06 00            		ld	bc,6		; Skip header
(1) 2414/     BE5 : 09                  		add	hl,bc
(1) 2415/     BE6 : CE 00               		adc	a,0
(1) 2416/     BE8 : 22 A3 17            		ld	(wave_Start),hl	; Set START point
(1) 2417/     BEB : 32 A5 17            		ld	(wave_Start+2),a
(1) 2418/     BEE : E1                  		pop	hl
(1) 2419/     BEF : 7B                  		ld	a,e
(1) 2420/     BF0 : 11 C2 17            		ld	de,sampleHead
(1) 2421/     BF3 : 01 06 00            		ld	bc,6
(1) 2422/     BF6 : D5                  		push	de
(1) 2423/     BF7 : CF                  		rst	8
(1) 2424/     BF8 : CD 74 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2425/     BFB : E1                  		pop	hl
(1) 2426/     BFC :                     	; hl - temporal header
(1) 2427/     BFC : 5E                  		ld	e,(hl)
(1) 2428/     BFD : 23                  		inc	hl
(1) 2429/     BFE : 56                  		ld	d,(hl)
(1) 2430/     BFF : 23                  		inc	hl
(1) 2431/     C00 : 7E                  		ld	a,(hl)
(1) 2432/     C01 : 23                  		inc	hl
(1) 2433/     C02 : ED 53 A6 17         		ld	(wave_Len),de	; LEN
(1) 2434/     C06 : 32 A8 17            		ld	(wave_Len+2),a
(1) 2435/     C09 : 5E                  		ld	e,(hl)
(1) 2436/     C0A : 23                  		inc	hl
(1) 2437/     C0B : CF                  		rst	8
(1) 2438/     C0C : 56                  		ld	d,(hl)
(1) 2439/     C0D : 23                  		inc	hl
(1) 2440/     C0E : 7E                  		ld	a,(hl)
(1) 2441/     C0F : 23                  		inc	hl
(1) 2442/     C10 : ED 53 A9 17         		ld	(wave_Loop),de	; LOOP
(1) 2443/     C14 : 32 AB 17            		ld	(wave_Loop+2),a
(1) 2444/     C17 : 11 06 28            		ld	de,2806h	; keys off
(1) 2445/     C1A : CD 61 11            		call	fm_send_1
(1) 2446/     C1D : C1                  		pop	bc
(1) 2447/     C1E : E1                  		pop	hl
(1) 2448/     C1F :                     ; .same_dac:
(1) 2449/     C1F : C9                  		ret
(1) 2450/     C20 :                     
(1) 2451/     C20 :                     ; --------
(1) 2452/     C20 :                     
(1) 2453/     C20 :                     .pwm_ins:
(1) 2454/     C20 : DD E5               		push	ix
(1) 2455/     C22 : E5                  		push	hl
(1) 2456/     C23 : C5                  		push	bc
(1) 2457/     C24 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 2458/     C25 : E6 03               		and	00000011b
(1) 2459/     C27 : 0F                  		rrca
(1) 2460/     C28 : 0F                  		rrca
(1) 2461/     C29 : 4F                  		ld	c,a
(1) 2462/     C2A :                     ; 		ld	(iy+0Ah),a	; 0Ah flags: %SlLR
(1) 2463/     C2A : CF                  		rst	8
(1) 2464/     C2B : 23                  		inc	hl		; Skip ID and Pitch
(1) 2465/     C2C : 23                  		inc	hl
(1) 2466/     C2D : 56                  		ld	d,(hl)
(1) 2467/     C2E : 23                  		inc	hl
(1) 2468/     C2F : 5E                  		ld	e,(hl)
(1) 2469/     C30 : 23                  		inc	hl
(1) 2470/     C31 : 7E                  		ld	a,(hl)
(1) 2471/     C32 : 23                  		inc	hl
(1) 2472/     C33 : 6E                  		ld	l,(hl)
(1) 2473/     C34 : 67                  		ld	h,a
(1) 2474/     C35 : 79                  		ld	a,c
(1) 2475/     C36 : B2                  		or	d
(1) 2476/     C37 : 57                  		ld	d,a
(1) 2477/     C38 : CF                  		rst	8
(1) 2478/     C39 :                     
(1) 2479/     C39 :                     	; de,hl - 32-bit PWM pointer
(1) 2480/     C39 : DD 21 EF 16         		ld	ix,pwmcom
(1) 2481/     C3D : 06 00               		ld	b,0
(1) 2482/     C3F : FD 4E 05            		ld	c,(iy+05h)
(1) 2483/     C42 : DD 09               		add	ix,bc
(1) 2484/     C44 : 01 18 00            		ld	bc,PWOUTF
(1) 2485/     C47 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 2486/     C49 : 01 08 00            		ld	bc,8
(1) 2487/     C4C : DD 72 00            		ld	(ix),d
(1) 2488/     C4F : DD 09               		add	ix,bc
(1) 2489/     C51 : DD 73 00            		ld	(ix),e
(1) 2490/     C54 : DD 09               		add	ix,bc
(1) 2491/     C56 : DD 74 00            		ld	(ix),h
(1) 2492/     C59 : DD 09               		add	ix,bc
(1) 2493/     C5B : DD 75 00            		ld	(ix),l
(1) 2494/     C5E : C1                  		pop	bc
(1) 2495/     C5F : E1                  		pop	hl
(1) 2496/     C60 : DD E1               		pop	ix
(1) 2497/     C62 : C9                  		ret
(1) 2498/     C63 :                     
(1) 2499/     C63 :                     ; ----------------------------------------
(1) 2500/     C63 :                     ; NEW note
(1) 2501/     C63 :                     ; ----------------------------------------
(1) 2502/     C63 :                     
(1) 2503/     C63 :                     .note:
(1) 2504/     C63 : 78                  		ld	a,b		; Volume bit?
(1) 2505/     C64 : E6 04               		and	0100b
(1) 2506/     C66 : 20 05               		jr	nz,.fm_hasvol
(1) 2507/     C68 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 2508/     C6C : CF                  		rst	8
(1) 2509/     C6D :                     .fm_hasvol:
(1) 2510/     C6D : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2511/     C70 : 4F                  		ld	c,a
(1) 2512/     C71 : FE FF               		cp	-1
(1) 2513/     C73 : C8                  		ret	z
(1) 2514/     C74 : FE FE               		cp	-2
(1) 2515/     C76 : C8                  		ret	z
(1) 2516/     C77 : 7E                  		ld	a,(hl)
(1) 2517/     C78 : E6 F0               		and	11110000b
(1) 2518/     C7A : FE 80               		cp	80h
(1) 2519/     C7C : 28 12               		jr	z,.n_indx
(1) 2520/     C7E : CF                  		rst	8
(1) 2521/     C7F : FE 90               		cp	90h
(1) 2522/     C81 : 28 1C               		jr	z,.n_psgn
(1) 2523/     C83 : FE A0               		cp	0A0h
(1) 2524/     C85 : 28 1D               		jr	z,.n_fm
(1) 2525/     C87 :                     ; 		cp	0B0h		; ** Can't use notes on FM3 **
(1) 2526/     C87 :                     ; 		jr	z,.n_fm
(1) 2527/     C87 : FE C0               		cp	0C0h
(1) 2528/     C89 : 28 05               		jr	z,.n_indx
(1) 2529/     C8B : FE D0               		cp	0D0h
(1) 2530/     C8D : 28 01               		jr	z,.n_indx
(1) 2531/     C8F : C9                  		ret
(1) 2532/     C90 :                     
(1) 2533/     C90 :                     ; --------------------------------
(1) 2534/     C90 :                     
(1) 2535/     C90 :                     .n_indx:
(1) 2536/     C90 : 79                  		ld	a,c
(1) 2537/     C91 :                     .n_stfreq:
(1) 2538/     C91 : 23                  		inc	hl		; Skip ID
(1) 2539/     C92 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2540/     C93 : 2B                  		dec	hl
(1) 2541/     C94 : 83                  		add	a,e		; Note + pitch
(1) 2542/     C95 : CF                  		rst	8
(1) 2543/     C96 : 87                  		add	a,a		; * 2
(1) 2544/     C97 : FD 77 06            		ld	(iy+06h),a
(1) 2545/     C9A : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 2546/     C9E : C9                  		ret
(1) 2547/     C9F :                     .n_psgn:
(1) 2548/     C9F : 79                  		ld	a,c
(1) 2549/     CA0 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 2550/     CA2 : 18 ED               		jr	.n_stfreq
(1) 2551/     CA4 :                     ; FM
(1) 2552/     CA4 :                     .n_fm:
(1) 2553/     CA4 : 79                  		ld	a,c
(1) 2554/     CA5 : 23                  		inc	hl		; Skip ID
(1) 2555/     CA6 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2556/     CA7 : 2B                  		dec	hl
(1) 2557/     CA8 : CF                  		rst	8
(1) 2558/     CA9 : 83                  		add	a,e		; Note + pitch
(1) 2559/     CAA :                     	; Search for octave and note
(1) 2560/     CAA : 0E 00               		ld	c,0		; c - octave
(1) 2561/     CAC : 16 07               		ld	d,7
(1) 2562/     CAE :                     .get_oct:
(1) 2563/     CAE : 5F                  		ld	e,a		; e - note
(1) 2564/     CAF : D6 0C               		sub	12
(1) 2565/     CB1 : B7                  		or	a
(1) 2566/     CB2 : FA BE 0C            		jp	m,.fnd_oct
(1) 2567/     CB5 : 0C                  		inc	c
(1) 2568/     CB6 : CF                  		rst	8
(1) 2569/     CB7 : 00                  		nop	; wave sync
(1) 2570/     CB8 : 00                  		nop
(1) 2571/     CB9 : 00                  		nop
(1) 2572/     CBA : 00                  		nop
(1) 2573/     CBB : 15                  		dec	d
(1) 2574/     CBC : 20 F0               		jr	nz,.get_oct
(1) 2575/     CBE :                     .fnd_oct:
(1) 2576/     CBE : 7B                  		ld	a,e
(1) 2577/     CBF : 87                  		add	a,a		; Note * 2
(1) 2578/     CC0 : E6 1F               		and	00011111b
(1) 2579/     CC2 : CB 09               		rrc	c
(1) 2580/     CC4 : CB 09               		rrc	c
(1) 2581/     CC6 : CB 09               		rrc	c
(1) 2582/     CC8 : B1                  		or	c
(1) 2583/     CC9 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 2584/     CCC : FD 36 07 00         		ld	(iy+07h),0
(1) 2585/     CD0 : C9                  		ret
(1) 2586/     CD1 :                     
(1) 2587/     CD1 :                     ; ----------------------------------------
(1) 2588/     CD1 :                     
(1) 2589/     CD1 :                     .fm_keyoff:
(1) 2590/     CD1 : 16 28               		ld	d,28h
(1) 2591/     CD3 : FD 5E 05            		ld	e,(iy+05h)
(1) 2592/     CD6 : C3 61 11            		jp	fm_send_1
(1) 2593/     CD9 :                     .fm_tloff:
(1) 2594/     CD9 : 06 04               		ld	b,4
(1) 2595/     CDB : FD 4E 05            		ld	c,(iy+05h)
(1) 2596/     CDE : 79                  		ld	a,c
(1) 2597/     CDF : E6 03               		and	011b
(1) 2598/     CE1 : F6 40               		or	40h	; TL regs
(1) 2599/     CE3 :                     .tl_down:
(1) 2600/     CE3 : 57                  		ld	d,a
(1) 2601/     CE4 : 1E 7F               		ld	e,7Fh
(1) 2602/     CE6 : CD 58 11            		call	fm_autoreg
(1) 2603/     CE9 : CF                  		rst	8
(1) 2604/     CEA : 7A                  		ld	a,d
(1) 2605/     CEB : C6 04               		add	a,4
(1) 2606/     CED : 10 F4               		djnz	.tl_down
(1) 2607/     CEF : C9                  		ret
(1) 2608/     CF0 :                     ; c - KeyID
(1) 2609/     CF0 :                     .fm_setfreq:
(1) 2610/     CF0 : 79                  		ld	a,c
(1) 2611/     CF1 : E6 03               		and	011b
(1) 2612/     CF3 : F6 A4               		or	0A4h
(1) 2613/     CF5 : 57                  		ld	d,a
(1) 2614/     CF6 : 5C                  		ld	e,h
(1) 2615/     CF7 : CF                  		rst	8
(1) 2616/     CF8 : CD 58 11            		call	fm_autoreg
(1) 2617/     CFB : 79                  		ld	a,c
(1) 2618/     CFC : E6 03               		and	011b
(1) 2619/     CFE : F6 A0               		or	0A0h
(1) 2620/     D00 : 57                  		ld	d,a
(1) 2621/     D01 : 5D                  		ld	e,l
(1) 2622/     D02 : CD 58 11            		call	fm_autoreg
(1) 2623/     D05 : CF                  		rst	8
(1) 2624/     D06 : C9                  		ret
(1) 2625/     D07 :                     
(1) 2626/     D07 :                     ; --------------------------------
(1) 2627/     D07 :                     ; WRITE TL volume
(1) 2628/     D07 :                     
(1) 2629/     D07 :                     .fm_wrtlvol:
(1) 2630/     D07 : 21 95 14            		ld	hl,fmcach_list
(1) 2631/     D0A : FD 7E 05            		ld	a,(iy+05h)
(1) 2632/     D0D : E6 07               		and	0111b
(1) 2633/     D0F : 16 00               		ld	d,0
(1) 2634/     D11 : CF                  		rst	8
(1) 2635/     D12 : 87                  		add	a,a
(1) 2636/     D13 : 5F                  		ld	e,a
(1) 2637/     D14 : 19                  		add	hl,de
(1) 2638/     D15 : 7E                  		ld	a,(hl)
(1) 2639/     D16 : 23                  		inc	hl
(1) 2640/     D17 : 66                  		ld	h,(hl)
(1) 2641/     D18 : 6F                  		ld	l,a
(1) 2642/     D19 : 23                  		inc	hl
(1) 2643/     D1A : 23                  		inc	hl
(1) 2644/     D1B : 23                  		inc	hl
(1) 2645/     D1C : CF                  		rst	8
(1) 2646/     D1D : 23                  		inc	hl		; Point to TL's
(1) 2647/     D1E : FD 7E 05            		ld	a,(iy+05h)
(1) 2648/     D21 : E6 03               		and	011b
(1) 2649/     D23 : F6 40               		or	40h		; TL registers
(1) 2650/     D25 : 57                  		ld	d,a
(1) 2651/     D26 :                     ; d - 40h+
(1) 2652/     D26 :                     ; hl - TL data
(1) 2653/     D26 :                     ; .fm_wrtlvol:
(1) 2654/     D26 : C5                  		push	bc
(1) 2655/     D27 : E5                  		push	hl
(1) 2656/     D28 : 21 79 0D            		ld	hl,.fm_cindx
(1) 2657/     D2B : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2658/     D2E : E6 07               		and	0111b
(1) 2659/     D30 : 06 00               		ld	b,0
(1) 2660/     D32 : 4F                  		ld	c,a
(1) 2661/     D33 : 09                  		add	hl,bc
(1) 2662/     D34 : FD 7E 08            		ld	a,(iy+08h)
(1) 2663/     D37 : CB 2F               		sra	a		; volume / 2
(1) 2664/     D39 : E6 7F               		and	01111111b
(1) 2665/     D3B : 4F                  		ld	c,a
(1) 2666/     D3C : CF                  		rst	8
(1) 2667/     D3D : 46                  		ld	b,(hl)
(1) 2668/     D3E : E1                  		pop	hl
(1) 2669/     D3F : CB 08               		rrc	b		; OP1
(1) 2670/     D41 : DC 6C 0D            		call	c,.write_tl
(1) 2671/     D44 : 23                  		inc	hl
(1) 2672/     D45 : 14                  		inc	d
(1) 2673/     D46 : 14                  		inc	d
(1) 2674/     D47 : CF                  		rst	8
(1) 2675/     D48 : 14                  		inc	d
(1) 2676/     D49 : 14                  		inc	d
(1) 2677/     D4A : CB 08               		rrc	b		; OP2
(1) 2678/     D4C : DC 6C 0D            		call	c,.write_tl
(1) 2679/     D4F : 23                  		inc	hl
(1) 2680/     D50 : 14                  		inc	d
(1) 2681/     D51 : 14                  		inc	d
(1) 2682/     D52 : 14                  		inc	d
(1) 2683/     D53 : 14                  		inc	d
(1) 2684/     D54 : CB 08               		rrc	b		; OP3
(1) 2685/     D56 : DC 6C 0D            		call	c,.write_tl
(1) 2686/     D59 : 23                  		inc	hl
(1) 2687/     D5A : CF                  		rst	8
(1) 2688/     D5B : 14                  		inc	d
(1) 2689/     D5C : 14                  		inc	d
(1) 2690/     D5D : 14                  		inc	d
(1) 2691/     D5E : 14                  		inc	d
(1) 2692/     D5F : CB 08               		rrc	b		; OP4
(1) 2693/     D61 : DC 6C 0D            		call	c,.write_tl
(1) 2694/     D64 : 23                  		inc	hl
(1) 2695/     D65 : 14                  		inc	d
(1) 2696/     D66 : 14                  		inc	d
(1) 2697/     D67 : 14                  		inc	d
(1) 2698/     D68 : 14                  		inc	d
(1) 2699/     D69 : CF                  		rst	8
(1) 2700/     D6A : C1                  		pop	bc
(1) 2701/     D6B : C9                  		ret
(1) 2702/     D6C :                     .write_tl:
(1) 2703/     D6C : 7E                  		ld	a,(hl)
(1) 2704/     D6D : 91                  		sub	a,c
(1) 2705/     D6E : C5                  		push	bc
(1) 2706/     D6F : 5F                  		ld	e,a
(1) 2707/     D70 : FD 4E 05            		ld	c,(iy+05h)
(1) 2708/     D73 : CD 58 11            		call	fm_autoreg
(1) 2709/     D76 : CF                  		rst	8
(1) 2710/     D77 : C1                  		pop	bc
(1) 2711/     D78 : C9                  		ret
(1) 2712/     D79 :                     ; Jump carry list
(1) 2713/     D79 :                     .fm_cindx:
(1) 2714/     D79 : 08                  		db 1000b
(1) 2715/     D7A : 08                  		db 1000b
(1) 2716/     D7B : 08                  		db 1000b
(1) 2717/     D7C : 08                  		db 1000b
(1) 2718/     D7D : 0C                  		db 1100b
(1) 2719/     D7E : 0E                  		db 1110b
(1) 2720/     D7F : 0E                  		db 1110b
(1) 2721/     D80 : 0F                  		db 1111b
(1) 2722/     D81 :                     ; c - KeyId
(1) 2723/     D81 :                     .fm_wrtalpan:
(1) 2724/     D81 : FD 7E 0C            		ld	a,(iy+0Ch)	; 0B0h algorithm
(1) 2725/     D84 : 5F                  		ld	e,a
(1) 2726/     D85 : 79                  		ld	a,c
(1) 2727/     D86 : E6 03               		and	011b
(1) 2728/     D88 : F6 B0               		or	0B0h
(1) 2729/     D8A : 57                  		ld	d,a
(1) 2730/     D8B : CD 58 11            		call	fm_autoreg
(1) 2731/     D8E : CF                  		rst	8
(1) 2732/     D8F : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2733/     D92 : 2F                  		cpl				; REVERSE bits
(1) 2734/     D93 : E6 C0               		and	11000000b
(1) 2735/     D95 : 5F                  		ld	e,a
(1) 2736/     D96 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2737/     D99 : E6 3F               		and	00111111b
(1) 2738/     D9B : B3                  		or	e
(1) 2739/     D9C : 5F                  		ld	e,a
(1) 2740/     D9D : 79                  		ld	a,c
(1) 2741/     D9E : E6 03               		and	011b
(1) 2742/     DA0 : F6 B4               		or	0B4h
(1) 2743/     DA2 : 57                  		ld	d,a
(1) 2744/     DA3 : CD 58 11            		call	fm_autoreg
(1) 2745/     DA6 : CF                  		rst	8
(1) 2746/     DA7 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2747/     DAA : CB 5F               		bit	3,a
(1) 2748/     DAC : 28 06               		jr	z,.no_lfo
(1) 2749/     DAE : 5F                  		ld	e,a
(1) 2750/     DAF : 16 22               		ld	d,22h
(1) 2751/     DB1 : CD 61 11            		call	fm_send_1
(1) 2752/     DB4 :                     .no_lfo:
(1) 2753/     DB4 : C9                  		ret
(1) 2754/     DB5 :                     
(1) 2755/     DB5 :                     ; ----------------------------------------
(1) 2756/     DB5 :                     
(1) 2757/     DB5 :                     .chnl_ulnkoff:
(1) 2758/     DB5 : 0E 00               		ld	c,0
(1) 2759/     DB7 :                     .chnl_ulnk:
(1) 2760/     DB7 : CF                  		rst	8
(1) 2761/     DB8 : AF                  		xor	a
(1) 2762/     DB9 : DD 77 01            		ld	(ix+chnl_Chip),a
(1) 2763/     DBC : FD 77 00            		ld	(iy),a		; Delete link, chip and prio
(1) 2764/     DBF : FD 77 01            		ld	(iy+1),a
(1) 2765/     DC2 : FD 71 02            		ld	(iy+2),c
(1) 2766/     DC5 : C9                  		ret
(1) 2767/     DC6 :                     .chnl_ulnkcut:
(1) 2768/     DC6 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 2769/     DC9 : CD B7 0D            		call	.chnl_ulnk
(1) 2770/     DCC : FD 77 08            		ld	(iy+08h),a
(1) 2771/     DCF : FD 77 09            		ld	(iy+09h),a
(1) 2772/     DD2 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2773/     DD5 : FD 77 0B            		ld	(iy+0Bh),a
(1) 2774/     DD8 :                     ; 		push	iy
(1) 2775/     DD8 :                     ; 		pop	hl
(1) 2776/     DD8 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 2777/     DD8 :                     ; 		add	hl,bc
(1) 2778/     DD8 :                     ; 		rst	8
(1) 2779/     DD8 :                     ; 		ld	b,8/2
(1) 2780/     DD8 :                     ; .clrfull:
(1) 2781/     DD8 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 2782/     DD8 :                     ; 		inc	hl
(1) 2783/     DD8 :                     ; 		ld	(hl),0
(1) 2784/     DD8 :                     ; 		inc	hl
(1) 2785/     DD8 :                     ; 		rst	8
(1) 2786/     DD8 :                     ; 		djnz	.clrfull
(1) 2787/     DD8 : C9                  		ret
(1) 2788/     DD9 :                     
(1) 2789/     DD9 :                     ; ============================================================
(1) 2790/     DD9 :                     ; --------------------------------------------------------
(1) 2791/     DD9 :                     ; Communicate with the 32X from here.
(1) 2792/     DD9 :                     ; --------------------------------------------------------
(1) 2793/     DD9 :                     
(1) 2794/     DD9 :                     ex_comm:
(1) 2795/     DD9 : CF                  		rst	8
(1) 2796/     DDA : 00                  		nop
(1) 2798/     DDB : 3A 82 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 2799/     DDE : B7                  		or	a
(1) 2800/     DDF : C2 79 0E            		jp	nz,.blocked
(1) 2801/     DE2 : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg (now $A15100)
(1) 2802/     DE6 : DD 21 EF 16         		ld	ix,pwmcom
(1) 2803/     DEA :                     ; 		ld	hl,6000h	; Point BANK closely to the 32X area ($A10000)
(1) 2804/     DEA :                     ; 		ld	(hl),0
(1) 2805/     DEA :                     ; 		ld	(hl),1
(1) 2806/     DEA :                     ; 		rst	8
(1) 2807/     DEA :                     ; 		ld	(hl),0
(1) 2808/     DEA :                     ; 		ld	(hl),0
(1) 2809/     DEA :                     ; 		ld	(hl),0
(1) 2810/     DEA :                     ; 		ld	(hl),0
(1) 2811/     DEA :                     ; 		ld	(hl),1
(1) 2812/     DEA :                     ; 		ld	(hl),0
(1) 2813/     DEA :                     ; 		ld	(hl),1
(1) 2814/     DEA :                     	; SLOW bankswitch to keep
(1) 2815/     DEA :                     	; the wave playback stable.
(1) 2816/     DEA : AF                  		xor	a
(1) 2817/     DEB : 32 00 60            		ld	(6000h),a	; 0
(1) 2818/     DEE : 3E A1               		ld	a,10100001b
(1) 2819/     DF0 : 32 00 60            		ld	(6000h),a	; 1
(1) 2820/     DF3 : 0F                  		rrca
(1) 2821/     DF4 : 32 00 60            		ld	(6000h),a	; 0
(1) 2822/     DF7 : 0F                  		rrca
(1) 2823/     DF8 : 32 00 60            		ld	(6000h),a	; 0
(1) 2824/     DFB : 0F                  		rrca
(1) 2825/     DFC : 32 00 60            		ld	(6000h),a	; 0
(1) 2826/     DFF : CF                  		rst	8
(1) 2827/     E00 : 0F                  		rrca
(1) 2828/     E01 : 32 00 60            		ld	(6000h),a	; 0
(1) 2829/     E04 : 0F                  		rrca
(1) 2830/     E05 : 32 00 60            		ld	(6000h),a	; 1
(1) 2831/     E08 : 0F                  		rrca
(1) 2832/     E09 : 32 00 60            		ld	(6000h),a	; 0
(1) 2833/     E0C : 0F                  		rrca
(1) 2834/     E0D : 32 00 60            		ld	(6000h),a	; 1
(1) 2835/     E10 : CF                  		rst	8
(1) 2836/     E11 : 3A 3F 00            		ld	a,(marsUpd)	; NEW transfer?
(1) 2837/     E14 : B7                  		or	a
(1) 2838/     E15 : C8                  		ret	z
(1) 2839/     E16 : AF                  		xor	a
(1) 2840/     E17 : 32 3F 00            		ld	(marsUpd),a
(1) 2841/     E1A :                     .wait_enter:
(1) 2842/     E1A : 00                  		nop
(1) 2843/     E1B : 00                  		nop
(1) 2844/     E1C : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 2845/     E1F : CB 7F               		bit	7,a
(1) 2846/     E21 : 20 F7               		jr	nz,.wait_enter
(1) 2847/     E23 : E6 F0               		and	11110000b
(1) 2848/     E25 : F6 01               		or	1		; Set CMD task mode $01
(1) 2849/     E27 : FD 77 2E            		ld	(iy+comm14),a
(1) 2850/     E2A : CF                  		rst	8
(1) 2851/     E2B : E6 0F               		and	00001111b	; Did it write?
(1) 2852/     E2D : FE 01               		cp	1
(1) 2853/     E2F : 20 E9               		jr	nz,.wait_enter	; If not, retry.
(1) 2854/     E31 : FD CB 2E FE         		set	7,(iy+comm14)	; Lock bit
(1) 2855/     E35 : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 2856/     E39 : 00                  		nop
(1) 2857/     E3A : 00                  		nop
(1) 2858/     E3B : 00                  		nop
(1) 2859/     E3C : 00                  		nop
(1) 2860/     E3D : 00                  		nop
(1) 2861/     E3E : CF                  		rst	8
(1) 2862/     E3F : 00                  		nop
(1) 2863/     E40 : 00                  		nop
(1) 2864/     E41 : 00                  		nop
(1) 2865/     E42 : 00                  		nop
(1) 2866/     E43 : 00                  		nop
(1) 2867/     E44 :                     ; .wait_cmd:
(1) 2868/     E44 :                     ; 		bit	1,(iy+standby)
(1) 2869/     E44 :                     ; 		jr	nz,.wait_cmd
(1) 2870/     E44 : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 2871/     E46 :                     .next_pass:
(1) 2872/     E46 : CF                  		rst	8
(1) 2873/     E47 : FD E5               		push	iy
(1) 2874/     E49 : E1                  		pop	hl
(1) 2875/     E4A : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 2876/     E4D : 19                  		add	hl,de
(1) 2877/     E4E : 06 02               		ld	b,2
(1) 2878/     E50 : CF                  		rst	8
(1) 2879/     E51 :                     .next_comm:
(1) 2880/     E51 : DD 56 00            		ld	d,(ix)
(1) 2881/     E54 : DD 5E 01            		ld	e,(ix+1)
(1) 2882/     E57 : DD 23               		inc	ix
(1) 2883/     E59 : DD 23               		inc	ix
(1) 2884/     E5B : CF                  		rst	8
(1) 2885/     E5C : 72                  		ld	(hl),d
(1) 2886/     E5D : 23                  		inc	hl
(1) 2887/     E5E : 73                  		ld	(hl),e
(1) 2888/     E5F : 23                  		inc	hl
(1) 2889/     E60 : 10 EF               		djnz	.next_comm
(1) 2890/     E62 : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 2891/     E66 : CF                  		rst	8
(1) 2892/     E67 :                     .w_pass2:
(1) 2893/     E67 : 00                  		nop
(1) 2894/     E68 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 2895/     E6C : 20 F9               		jr	nz,.w_pass2
(1) 2896/     E6E : 0D                  		dec	c
(1) 2897/     E6F : 20 D5               		jr	nz,.next_pass
(1) 2898/     E71 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 2899/     E75 : FD CB 2E B6         		res	6,(iy+comm14)	; Clear CLK
(1) 2900/     E79 :                     .blocked:
(1) 2901/     E79 : CF                  		rst	8
(1) 2902/     E7A : 21 EF 16            		ld	hl,pwmcom
(1) 2903/     E7D : 06 07               		ld	b,7		; MAX PWM channels
(1) 2904/     E7F : AF                  		xor	a
(1) 2905/     E80 :                     .clrcom:
(1) 2906/     E80 : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 2907/     E81 : 23                  		inc	hl
(1) 2908/     E82 : 10 FC               		djnz	.clrcom
(1) 2910/     E84 : C9                  		ret
(1) 2911/     E85 :                     
(1) 2912/     E85 :                     ; ====================================================================
(1) 2913/     E85 :                     ; ----------------------------------------------------------------
(1) 2914/     E85 :                     ; Subroutines
(1) 2915/     E85 :                     ; ----------------------------------------------------------------
(1) 2916/     E85 :                     
(1) 2917/     E85 :                     ; --------------------------------------------------------
(1) 2918/     E85 :                     ; Init sound engine
(1) 2919/     E85 :                     ; --------------------------------------------------------
(1) 2920/     E85 :                     
(1) 2921/     E85 :                     gema_init:
(1) 2922/     E85 : CD 8C 11            		call	dac_off
(1) 2923/     E88 : 3E 00               		ld	a,0
(1) 2924/     E8A : 32 3F 00            		ld	(marsUpd),a
(1) 2925/     E8D : 21 00 1D            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2926/     E90 : 11 01 1D            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2927/     E93 : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2928/     E96 : 36 80               		ld	(hl),80h	; Set first byte
(1) 2929/     E98 : ED B0               		ldir			; Start copying
(1) 2930/     E9A : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2931/     E9D : 36 9F               		ld	(hl),09Fh
(1) 2932/     E9F : 36 BF               		ld	(hl),0BFh
(1) 2933/     EA1 : 36 DF               		ld	(hl),0DFh
(1) 2934/     EA3 : 36 FF               		ld	(hl),0FFh
(1) 2935/     EA5 : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 2936/     EA8 : CD 61 11            		call	fm_send_1
(1) 2937/     EAB : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2938/     EAE : CD 61 11            		call	fm_send_1
(1) 2939/     EB1 : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2940/     EB4 : CD 61 11            		call	fm_send_1
(1) 2941/     EB7 : 1C                  		inc	e
(1) 2942/     EB8 : CD 61 11            		call	fm_send_1
(1) 2943/     EBB : 1C                  		inc	e
(1) 2944/     EBC : CD 61 11            		call	fm_send_1
(1) 2945/     EBF : 1C                  		inc	e
(1) 2946/     EC0 : 1C                  		inc	e
(1) 2947/     EC1 : CD 61 11            		call	fm_send_1
(1) 2948/     EC4 : 1C                  		inc	e
(1) 2949/     EC5 : CD 61 11            		call	fm_send_1
(1) 2950/     EC8 : 1C                  		inc	e
(1) 2951/     EC9 : CD 61 11            		call	fm_send_1
(1) 2952/     ECC : 21 00 60            		ld	hl,6000h
(1) 2953/     ECF : 3E 01               		ld	a,1
(1) 2954/     ED1 : 77                  		ld	(hl),a
(1) 2955/     ED2 : 77                  		ld	(hl),a
(1) 2956/     ED3 : 77                  		ld	(hl),a
(1) 2957/     ED4 : 77                  		ld	(hl),a
(1) 2958/     ED5 : 77                  		ld	(hl),a
(1) 2959/     ED6 : 77                  		ld	(hl),a
(1) 2960/     ED7 : 77                  		ld	(hl),a
(1) 2961/     ED8 : 77                  		ld	(hl),a
(1) 2962/     ED9 : 77                  		ld	(hl),a
(1) 2963/     EDA : FD 21 A3 14         		ld	iy,nikona_BuffList
(1) 2964/     EDE : 0E 01               		ld	c,1		; Start at this priority
(1) 2965/     EE0 :                     .setup_list:
(1) 2966/     EE0 : FD 7E 00            		ld	a,(iy)
(1) 2967/     EE3 : FE FF               		cp	-1
(1) 2968/     EE5 : 28 44               		jr	z,.end_setup
(1) 2969/     EE7 : FD 23               		inc	iy
(1) 2970/     EE9 : 6F                  		ld	l,a
(1) 2971/     EEA : FD 66 00            		ld	h,(iy)
(1) 2972/     EED : E5                  		push	hl
(1) 2973/     EEE : DD E1               		pop	ix
(1) 2974/     EF0 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 2975/     EF3 : DD 36 01 FF         		ld	(ix+trk_seqId),-1	; Reset sequence ID
(1) 2976/     EF7 : FD 23               		inc	iy
(1) 2977/     EF9 : 11 26 00            		ld	de,trk_ChnList		; ** settings
(1) 2978/     EFC : 19                  		add	hl,de
(1) 2979/     EFD :                     	; iy - src
(1) 2980/     EFD :                     	; hl - dst
(1) 2981/     EFD : 06 0A               		ld	b,5*2
(1) 2982/     EFF :                     .st_copy:
(1) 2983/     EFF : FD 7E 00            		ld	a,(iy)
(1) 2984/     F02 : 77                  		ld	(hl),a
(1) 2985/     F03 : FD 23               		inc	iy
(1) 2986/     F05 : 23                  		inc	hl
(1) 2987/     F06 : 10 F7               		djnz	.st_copy
(1) 2988/     F08 : 0C                  		inc	c
(1) 2989/     F09 : FD 7E 00            		ld	a,(iy)			; MAX blocks
(1) 2990/     F0C : DD 77 1D            		ld	(ix+trk_MaxBlks),a
(1) 2991/     F0F : FD 23               		inc	iy
(1) 2992/     F11 : FD 7E 00            		ld	a,(iy)			; MAX heads
(1) 2993/     F14 : DD 77 1E            		ld	(ix+trk_MaxHdrs),a
(1) 2994/     F17 : FD 23               		inc	iy
(1) 2995/     F19 : FD 7E 00            		ld	a,(iy)			; MAX intruments
(1) 2996/     F1C : DD 77 1F            		ld	(ix+trk_MaxIns),a
(1) 2997/     F1F : FD 23               		inc	iy
(1) 2998/     F21 : FD 7E 00            		ld	a,(iy)			; MAX channels
(1) 2999/     F24 : DD 77 1C            		ld	(ix+trk_MaxChnls),a
(1) 3000/     F27 : FD 23               		inc	iy
(1) 3001/     F29 : 18 B5               		jr	.setup_list
(1) 3002/     F2B :                     .end_setup:
(1) 3003/     F2B : 1E 00               		ld	e,0
(1) 3004/     F2D : 3E FF               		ld	a,-1			; Reset
(1) 3005/     F2F : 32 3E 00            		ld	(trkListPage),a
(1) 3006/     F32 : C9                  		ret
(1) 3007/     F33 :                     
(1) 3008/     F33 :                     ; --------------------------------------------------------
(1) 3009/     F33 :                     ; get_tick
(1) 3010/     F33 :                     ;
(1) 3011/     F33 :                     ; Checks if VBlank triggred a TICK
(1) 3012/     F33 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3013/     F33 :                     ; --------------------------------------------------------
(1) 3014/     F33 :                     
(1) 3015/     F33 :                     get_tick:
(1) 3016/     F33 : F3                  		di				; Disable ints
(1) 3017/     F34 : F5                  		push	af
(1) 3018/     F35 : E5                  		push	hl
(1) 3019/     F36 : 21 B0 17            		ld	hl,tickFlag		; read last TICK flag
(1) 3020/     F39 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3021/     F3A : B7                  		or 	a
(1) 3022/     F3B : 28 13               		jr	z,.ctnotick
(1) 3023/     F3D : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3024/     F3F : 23                  		inc	hl			; Move to tickCnt
(1) 3025/     F40 : 34                  		inc	(hl)			; and increment
(1) 3026/     F41 : CF                  		rst	8
(1) 3027/     F42 : D5                  		push	de
(1) 3028/     F43 : 2A 1C 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3029/     F46 : ED 5B 1E 00         		ld	de,(sbeatPtck)
(1) 3030/     F4A : CF                  		rst	8
(1) 3031/     F4B : 19                  		add	hl,de
(1) 3032/     F4C : 22 1C 00            		ld	(sbeatAcc),hl
(1) 3033/     F4F : D1                  		pop	de
(1) 3034/     F50 :                     .ctnotick:
(1) 3035/     F50 : E1                  		pop	hl
(1) 3036/     F51 : F1                  		pop	af
(1) 3037/     F52 : FB                  		ei				; Enable ints again
(1) 3038/     F53 : C9                  		ret
(1) 3039/     F54 :                     
(1) 3040/     F54 :                     ; --------------------------------------------------------
(1) 3041/     F54 :                     ; showRom
(1) 3042/     F54 :                     ; Get ROM bank position.
(1) 3043/     F54 :                     ;
(1) 3044/     F54 :                     ; Input:
(1) 3045/     F54 :                     ;  b - 68k address $xx0000
(1) 3046/     F54 :                     ; hl - 68k address $00xxxx
(1) 3047/     F54 :                     ;
(1) 3048/     F54 :                     ; Output:
(1) 3049/     F54 :                     ; hl - ROM position ready to use for reading
(1) 3050/     F54 :                     ; --------------------------------------------------------
(1) 3051/     F54 :                     
(1) 3052/     F54 :                     showRom:
(1) 3053/     F54 : CF                  		rst	8
(1) 3054/     F55 : D5                  		push	de
(1) 3055/     F56 : C5                  		push	bc
(1) 3056/     F57 : 11 00 60            		ld	de,6000h
(1) 3057/     F5A : 7C                  		ld	a,h
(1) 3058/     F5B : 07                  		rlca
(1) 3059/     F5C : CF                  		rst	8
(1) 3060/     F5D : 12                  		ld	(de),a
(1) 3061/     F5E : 78                  		ld	a,b
(1) 3062/     F5F : 12                  		ld	(de),a
(1) 3063/     F60 : 1F                  		rra
(1) 3064/     F61 : 12                  		ld	(de),a
(1) 3065/     F62 : 1F                  		rra
(1) 3066/     F63 : 12                  		ld	(de),a
(1) 3067/     F64 : 1F                  		rra
(1) 3068/     F65 : CF                  		rst	8
(1) 3069/     F66 : 12                  		ld	(de),a
(1) 3070/     F67 : 1F                  		rra
(1) 3071/     F68 : 12                  		ld	(de),a
(1) 3072/     F69 : 1F                  		rra
(1) 3073/     F6A : 12                  		ld	(de),a
(1) 3074/     F6B : 1F                  		rra
(1) 3075/     F6C : 12                  		ld	(de),a
(1) 3076/     F6D : 1F                  		rra
(1) 3077/     F6E : 12                  		ld	(de),a
(1) 3078/     F6F : C1                  		pop	bc
(1) 3079/     F70 : D1                  		pop	de
(1) 3080/     F71 : CB FC               		set	7,h
(1) 3081/     F73 : C9                  		ret
(1) 3082/     F74 :                     
(1) 3083/     F74 :                     ; --------------------------------------------------------
(1) 3084/     F74 :                     ; transferRom
(1) 3085/     F74 :                     ;
(1) 3086/     F74 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3087/     F74 :                     ; to 68k that we want to access ROM
(1) 3088/     F74 :                     ;
(1) 3089/     F74 :                     ; Input:
(1) 3090/     F74 :                     ; a  - 68K Address $xx0000
(1) 3091/     F74 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3092/     F74 :                     ; hl - 68K Address $00xxxx
(1) 3093/     F74 :                     ; de - Destination pointer
(1) 3094/     F74 :                     ;
(1) 3095/     F74 :                     ; Uses:
(1) 3096/     F74 :                     ; b
(1) 3097/     F74 :                     ;
(1) 3098/     F74 :                     ; Notes:
(1) 3099/     F74 :                     ; call RST 20h first if transfering anything other
(1) 3100/     F74 :                     ; than sample data, just to be safe.
(1) 3101/     F74 :                     ; --------------------------------------------------------
(1) 3102/     F74 :                     
(1) 3103/     F74 :                     transferRom:
(1) 3104/     F74 : CF                  		rst	8
(1) 3105/     F75 : DD E5               		push	ix
(1) 3106/     F77 : DD 21 81 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3107/     F7B : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3108/     F7E : CB BC               		res	7,h
(1) 3109/     F80 : 06 00               		ld	b,0
(1) 3110/     F82 : 0B                  		dec	bc
(1) 3111/     F83 : 09                  		add	hl,bc
(1) 3112/     F84 : CB 7C               		bit	7,h
(1) 3113/     F86 : 20 0B               		jr	nz,.double
(1) 3114/     F88 : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3115/     F8B : 0C                  		inc	c
(1) 3116/     F8C : 47                  		ld	b,a
(1) 3117/     F8D : CD B7 0F            		call	.transfer
(1) 3118/     F90 : DD E1               		pop	ix
(1) 3119/     F92 : C9                  		ret
(1) 3120/     F93 :                     .double:
(1) 3121/     F93 : CF                  		rst	8
(1) 3122/     F94 : 47                  		ld	b,a		; double transfer
(1) 3123/     F95 : C5                  		push	bc
(1) 3124/     F96 : E5                  		push	hl
(1) 3125/     F97 : 79                  		ld	a,c
(1) 3126/     F98 : 95                  		sub	a,l
(1) 3127/     F99 : 4F                  		ld	c,a
(1) 3128/     F9A : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 3129/     F9D : CD B7 0F            		call	.transfer
(1) 3130/     FA0 : E1                  		pop	hl
(1) 3131/     FA1 : C1                  		pop	bc
(1) 3132/     FA2 :                     ; 		rst	8
(1) 3133/     FA2 : 4D                  		ld	c,l
(1) 3134/     FA3 : 0C                  		inc	c
(1) 3135/     FA4 : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 3136/     FA7 : E6 80               		and	80h
(1) 3137/     FA9 : C6 80               		add	a,80h
(1) 3138/     FAB : 67                  		ld	h,a
(1) 3139/     FAC : 2E 00               		ld	l,0
(1) 3140/     FAE : 30 01               		jr	nc,.x68knocarry
(1) 3141/     FB0 : 04                  		inc	b
(1) 3142/     FB1 :                     .x68knocarry:
(1) 3143/     FB1 : CD B7 0F            		call	.transfer
(1) 3144/     FB4 : DD E1               		pop	ix
(1) 3145/     FB6 : C9                  		ret
(1) 3146/     FB7 :                     
(1) 3147/     FB7 :                     ; ------------------------------------------------
(1) 3148/     FB7 :                     ; b  - Source ROM xx0000
(1) 3149/     FB7 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3150/     FB7 :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3151/     FB7 :                     ; de - Destination address
(1) 3152/     FB7 :                     ; ix - Location of the ROM block flag(s)
(1) 3153/     FB7 :                     ;
(1) 3154/     FB7 :                     ; Uses:
(1) 3155/     FB7 :                     ; a
(1) 3156/     FB7 :                     ; ------------------------------------------------
(1) 3157/     FB7 :                     
(1) 3158/     FB7 :                     .transfer:
(1) 3159/     FB7 : CD 54 0F            		call	showRom		; Pick ROM bank
(1) 3160/     FBA :                     
(1) 3161/     FBA :                     	; Transfer ROM data in packets
(1) 3162/     FBA :                     	; while playing the cache'd sample
(1) 3163/     FBA :                     	; *** CRITICAL PROCESS ***
(1) 3164/     FBA :                     	;
(1) 3165/     FBA :                     	; pseudo-reference
(1) 3166/     FBA :                     	; for ldir:
(1) 3167/     FBA :                     	; ld (de),(hl)	; load (hl) to (de), no a
(1) 3168/     FBA :                     	; inc de	; next de
(1) 3169/     FBA :                     	; inc hl	; next hl
(1) 3170/     FBA :                     	; dec bc	; decrement bc
(1) 3171/     FBA :                     	;
(1) 3172/     FBA : 06 00               		ld	b,0
(1) 3173/     FBC : 79                  		ld	a,c		; a - Size counter
(1) 3174/     FBD : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3175/     FBF : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3176/     FC1 :                     .x68kloop:
(1) 3177/     FC1 : CF                  		rst	8
(1) 3178/     FC2 : 00                  		nop
(1) 3179/     FC3 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3180/     FC5 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3181/     FC9 : C4 E3 0F            		call	nz,.x68klpwt
(1) 3182/     FCC : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3183/     FCE : CF                  		rst	8
(1) 3184/     FCF : 00                  		nop
(1) 3185/     FD0 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3186/     FD2 : D2 C1 0F            		jp	nc,.x68kloop
(1) 3187/     FD5 :                     ; last block
(1) 3188/     FD5 :                     .x68klast:
(1) 3189/     FD5 : CF                  		rst	8
(1) 3190/     FD6 : C6 08               		add	a,MAX_TRFRPZ
(1) 3191/     FD8 : 4F                  		ld	c,a
(1) 3192/     FD9 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3193/     FDD : C4 E3 0F            		call	nz,.x68klpwt
(1) 3194/     FE0 : ED B0               		ldir
(1) 3195/     FE2 : C9                  		ret
(1) 3196/     FE3 :                     
(1) 3197/     FE3 :                     ; Wait here until Genesis unlocks ROM
(1) 3198/     FE3 :                     .x68klpwt:
(1) 3199/     FE3 : CF                  		rst	8
(1) 3200/     FE4 : 00                  		nop
(1) 3201/     FE5 : 00                  		nop
(1) 3202/     FE6 : 00                  		nop
(1) 3203/     FE7 : 00                  		nop
(1) 3204/     FE8 :                     .x68kpwtlp:
(1) 3205/     FE8 : CF                  		rst	8
(1) 3206/     FE9 : 00                  		nop
(1) 3207/     FEA : 00                  		nop
(1) 3208/     FEB : 00                  		nop
(1) 3209/     FEC : 00                  		nop
(1) 3210/     FED : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3211/     FF1 : 20 F5               		jr	nz,.x68kpwtlp
(1) 3212/     FF3 : CF                  		rst	8
(1) 3213/     FF4 : C9                  		ret
(1) 3214/     FF5 :                     
(1) 3215/     FF5 :                     ; ====================================================================
(1) 3216/     FF5 :                     ; ----------------------------------------------------------------
(1) 3217/     FF5 :                     ; Sound chip routines
(1) 3218/     FF5 :                     ; ----------------------------------------------------------------
(1) 3219/     FF5 :                     
(1) 3220/     FF5 :                     ; --------------------------------------------------------
(1) 3221/     FF5 :                     ; chip_env
(1) 3222/     FF5 :                     ;
(1) 3223/     FF5 :                     ; Process PSG and FM
(1) 3224/     FF5 :                     ; --------------------------------------------------------
(1) 3225/     FF5 :                     
(1) 3226/     FF5 :                     chip_env:
(1) 3227/     FF5 : FD 21 2A 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3228/     FF9 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3229/     FFD : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3230/     FFF : 06 04               		ld	b,4			; b - 4 channels
(1) 3231/    1001 :                     .vloop:
(1) 3232/    1001 : CF                  		rst	8
(1) 3233/    1002 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3234/    1005 : FD 36 00 00         		ld	(iy+COM),0
(1) 3235/    1009 :                     
(1) 3236/    1009 :                     	; ----------------------------
(1) 3237/    1009 :                     	; bit 2 - stop sound
(1) 3238/    1009 : CB 53               		bit	2,e
(1) 3239/    100B : 28 0C               		jr	z,.ckof
(1) 3240/    100D : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3241/    1011 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3242/    1015 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3243/    1019 :                     .ckof:
(1) 3244/    1019 :                     
(1) 3245/    1019 :                     	; ----------------------------
(1) 3246/    1019 :                     	; bit 1 - key off
(1) 3247/    1019 : CB 4B               		bit	1,e
(1) 3248/    101B : 28 0F               		jr      z,.ckon
(1) 3249/    101D : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3250/    1020 : B7                  		or	a
(1) 3251/    1021 : 28 09               		jr	z,.ckon
(1) 3252/    1023 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3253/    1027 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3254/    102B : CF                  		rst	8
(1) 3255/    102C :                     .ckon:
(1) 3256/    102C :                     
(1) 3257/    102C :                     	; ----------------------------
(1) 3258/    102C :                     	; bit 0 - key on
(1) 3259/    102C : CB 43               		bit	0,e
(1) 3260/    102E : 28 1A               		jr	z,.envproc
(1) 3261/    1030 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3262/    1034 : 78                  		ld	a,b
(1) 3263/    1035 : FE 04               		cp	4			; NOISE channel?
(1) 3264/    1037 : 20 08               		jr	nz,.nskip
(1) 3265/    1039 : CF                  		rst	8			; Set NOISE mode
(1) 3266/    103A : 3A B2 17            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3267/    103D : B1                  		or	c
(1) 3268/    103E : DD 77 00            		ld	(ix),a
(1) 3269/    1041 :                     .nskip:
(1) 3270/    1041 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3271/    1045 : CF                  		rst	8
(1) 3272/    1046 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3273/    104A :                     .nblock:
(1) 3274/    104A :                     
(1) 3275/    104A :                     	; ----------------------------
(1) 3276/    104A :                     	; Process effects
(1) 3277/    104A :                     	; ----------------------------
(1) 3278/    104A :                     .envproc:
(1) 3279/    104A : FD 7E 18            		ld	a,(iy+MODE)
(1) 3280/    104D : B7                  		or	a			; no modes
(1) 3281/    104E : CA D4 10            		jp	z,.vedlp
(1) 3282/    1051 : FE 01               		cp 	001b			; Attack mode
(1) 3283/    1053 : 20 2C               		jr	nz,.chk2
(1) 3284/    1055 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3285/    1059 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3286/    105C : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3287/    105F : B7                  		or	a
(1) 3288/    1060 : 28 16               		jr	z,.atkend
(1) 3289/    1062 : 57                  		ld	d,a			; c - attack rate
(1) 3290/    1063 : 7B                  		ld	a,e			; a - attack level
(1) 3291/    1064 : CF                  		rst	8
(1) 3292/    1065 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3293/    1068 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3294/    1069 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3295/    106B : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3296/    106D : BB                  		cp	e			; attack rate == level?
(1) 3297/    106E : 38 08               		jr	c,.atkend
(1) 3298/    1070 : 28 06               		jr	z,.atkend
(1) 3299/    1072 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3300/    1075 : CF                  		rst	8
(1) 3301/    1076 : 18 5C               		jr	.vedlp
(1) 3302/    1078 :                     .atkend:
(1) 3303/    1078 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3304/    107B :                     .atkzero:
(1) 3305/    107B : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3306/    107F : 18 53               		jr	.vedlp
(1) 3307/    1081 :                     .chk2:
(1) 3308/    1081 :                     
(1) 3309/    1081 : FE 02               		cp	010b			; Decay mode
(1) 3310/    1083 : 20 31               		jr	nz,.chk4
(1) 3311/    1085 :                     .dectmr:
(1) 3312/    1085 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3313/    1089 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3314/    108C : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3315/    108F : BB                  		cp	e
(1) 3316/    1090 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3317/    1092 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3318/    1094 : CF                  		rst	8
(1) 3319/    1095 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3320/    1098 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3321/    109A : BB                  		cp	e			; compare level
(1) 3322/    109B : 38 0F               		jr	c,.dkyend		; and finish
(1) 3323/    109D : 18 08               		jr	.dksav
(1) 3324/    109F :                     .dkadd:
(1) 3325/    109F : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3326/    10A2 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3327/    10A4 : BB                  		cp	e			; compare level
(1) 3328/    10A5 : 30 05               		jr	nc,.dkyend
(1) 3329/    10A7 :                     .dksav:
(1) 3330/    10A7 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3331/    10AA : 18 28               		jr	.vedlp
(1) 3332/    10AC :                     .dkyend:
(1) 3333/    10AC : CF                  		rst	8
(1) 3334/    10AD : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3335/    10B0 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3336/    10B4 : 18 1E               		jr	.vedlp
(1) 3337/    10B6 :                     .chk4:
(1) 3338/    10B6 : FE 04               		cp	100b			; Sustain phase
(1) 3339/    10B8 : 20 1A               		jr	nz,.vedlp
(1) 3340/    10BA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3341/    10BE : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3342/    10C1 : CF                  		rst	8
(1) 3343/    10C2 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3344/    10C5 : 38 05               		jr	c,.killenv		; release done
(1) 3345/    10C7 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3346/    10CA : 18 08               		jr	.vedlp
(1) 3347/    10CC :                     .killenv:
(1) 3348/    10CC : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3349/    10D0 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3350/    10D4 :                     .vedlp:
(1) 3351/    10D4 :                     
(1) 3352/    10D4 :                     	; ----------------------------
(1) 3353/    10D4 :                     	; PSG UPDATE
(1) 3354/    10D4 :                     	; ----------------------------
(1) 3355/    10D4 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3356/    10D7 : B7                  		or	a
(1) 3357/    10D8 : 28 72               		jr	z,.noupd
(1) 3358/    10DA : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3359/    10DE : 59                  		ld	e,c
(1) 3360/    10DF : 3A B2 17            		ld	a,(psgHatMode)
(1) 3361/    10E2 : 57                  		ld	d,a
(1) 3362/    10E3 : E6 03               		and	011b
(1) 3363/    10E5 : FE 03               		cp	011b
(1) 3364/    10E7 : 20 1D               		jr	nz,.normal
(1) 3365/    10E9 : CF                  		rst	8
(1) 3366/    10EA : 78                  		ld	a,b		; Channel 4?
(1) 3367/    10EB : FE 03               		cp	3
(1) 3368/    10ED : 28 13               		jr	z,.silnc_3
(1) 3369/    10EF : FE 04               		cp	4
(1) 3370/    10F1 : 20 18               		jr	nz,.do_nfreq
(1) 3371/    10F3 : 3A B2 17            		ld	a,(psgHatMode)
(1) 3372/    10F6 : 57                  		ld	d,a
(1) 3373/    10F7 : E6 03               		and	011b
(1) 3374/    10F9 : CF                  		rst	8
(1) 3375/    10FA : FE 03               		cp	011b
(1) 3376/    10FC : 20 30               		jr	nz,.vonly
(1) 3377/    10FE : 1E C0               		ld	e,0C0h
(1) 3378/    1100 : 18 09               		jr	.do_nfreq
(1) 3379/    1102 :                     .silnc_3:
(1) 3380/    1102 : 3E FF               		ld	a,-1
(1) 3381/    1104 : 18 32               		jr	.vlmuch
(1) 3382/    1106 :                     .normal:
(1) 3383/    1106 : 78                  		ld	a,b
(1) 3384/    1107 : FE 04               		cp	4
(1) 3385/    1109 : 28 23               		jr	z,.vonly
(1) 3386/    110B :                     .do_nfreq:
(1) 3387/    110B : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3388/    110E : FD 66 20            		ld	h,(iy+DTH)
(1) 3389/    1111 :                     
(1) 3390/    1111 :                     	; freq effects go here
(1) 3391/    1111 :                     	; (save e FIRST.)
(1) 3392/    1111 :                     	;	push	de
(1) 3393/    1111 :                     	;	pop	de
(1) 3394/    1111 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3395/    1112 : E6 0F               		and	00001111b
(1) 3396/    1114 : B3                  		or	e		; OR with channel set in e
(1) 3397/    1115 : CF                  		rst	8
(1) 3398/    1116 : DD 77 00            		ld	(ix),a		; write it
(1) 3399/    1119 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3400/    111A : 0F                  		rrca
(1) 3401/    111B : 0F                  		rrca
(1) 3402/    111C : 0F                  		rrca
(1) 3403/    111D : 0F                  		rrca
(1) 3404/    111E : E6 0F               		and	00001111b
(1) 3405/    1120 : 5F                  		ld	e,a
(1) 3406/    1121 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3407/    1122 : CF                  		rst	8
(1) 3408/    1123 : 07                  		rlca
(1) 3409/    1124 : 07                  		rlca
(1) 3410/    1125 : 07                  		rlca
(1) 3411/    1126 : 07                  		rlca
(1) 3412/    1127 : E6 30               		and	00110000b
(1) 3413/    1129 : B3                  		or	e
(1) 3414/    112A : DD 77 00            		ld	(ix),a
(1) 3415/    112D : CF                  		rst	8
(1) 3416/    112E :                     .vonly:
(1) 3417/    112E : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3418/    1131 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3419/    1134 : 30 02               		jr	nc,.vlmuch
(1) 3420/    1136 : 3E FF               		ld	a,-1
(1) 3421/    1138 :                     .vlmuch:
(1) 3422/    1138 : CB 3F               		srl	a			; (Level >> 4)
(1) 3423/    113A : CB 3F               		srl	a
(1) 3424/    113C : CB 3F               		srl	a
(1) 3425/    113E : CF                  		rst	8
(1) 3426/    113F : CB 3F               		srl	a
(1) 3427/    1141 : E6 0F               		and	00001111b		; Filter volume value
(1) 3428/    1143 : B1                  		or	c			; and OR with current channel
(1) 3429/    1144 : F6 90               		or	90h			; Set volume-set mode
(1) 3431/    1146 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3433/    1149 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3434/    114C :                     .noupd:
(1) 3435/    114C :                     	; ----------------------------
(1) 3436/    114C : FD 2B               		dec	iy			; next COM to check
(1) 3437/    114E : 79                  		ld	a,c
(1) 3438/    114F : CF                  		rst	8
(1) 3439/    1150 : D6 20               		sub	a,20h			; next PSG backwards
(1) 3440/    1152 : 4F                  		ld	c,a
(1) 3441/    1153 : 05                  		dec	b
(1) 3442/    1154 : C2 01 10            		jp	nz,.vloop
(1) 3443/    1157 : C9                  		ret
(1) 3444/    1158 :                     
(1) 3445/    1158 :                     ; ---------------------------------------------
(1) 3446/    1158 :                     ; FM register writes
(1) 3447/    1158 :                     ;
(1) 3448/    1158 :                     ; Input:
(1) 3449/    1158 :                     ; d - ctrl
(1) 3450/    1158 :                     ; e - data
(1) 3451/    1158 :                     ; ---------------------------------------------
(1) 3452/    1158 :                     
(1) 3453/    1158 :                     ; c - KeyID
(1) 3454/    1158 :                     fm_autoreg:
(1) 3455/    1158 : CB 51               		bit	2,c
(1) 3456/    115A : CC 61 11            		call	z,fm_send_1
(1) 3457/    115D : C4 6C 11            		call	nz,fm_send_2
(1) 3458/    1160 : C9                  		ret
(1) 3459/    1161 :                     ; Channels 1-3 and global registers
(1) 3460/    1161 :                     fm_send_1:
(1) 3461/    1161 : 7A                  		ld	a,d
(1) 3462/    1162 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3463/    1165 : 00                  		nop
(1) 3464/    1166 : 7B                  		ld	a,e
(1) 3465/    1167 : 32 01 40            		ld	(Zym_data_1),a
(1) 3466/    116A : 00                  		nop
(1) 3467/    116B : C9                  		ret
(1) 3468/    116C :                     ; Channels 4-6
(1) 3469/    116C :                     fm_send_2:
(1) 3470/    116C : 7A                  		ld	a,d
(1) 3471/    116D : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3472/    1170 : 00                  		nop
(1) 3473/    1171 : 7B                  		ld	a,e
(1) 3474/    1172 : 32 03 40            		ld	(Zym_data_2),a
(1) 3475/    1175 : 00                  		nop
(1) 3476/    1176 : C9                  		ret
(1) 3477/    1177 :                     
(1) 3478/    1177 :                     ; --------------------------------------------------------
(1) 3479/    1177 :                     ; brute-force WAVE ON/OFF playback
(1) 3480/    1177 :                     ; --------------------------------------------------------
(1) 3481/    1177 :                     
(1) 3482/    1177 :                     dac_on:
(1) 3483/    1177 : 3E 2B               		ld	a,2Bh
(1) 3484/    1179 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3485/    117C : 3E 80               		ld	a,80h
(1) 3486/    117E : 32 01 40            		ld	(Zym_data_1),a
(1) 3487/    1181 : 3E D9               		ld 	a,zopcExx
(1) 3488/    1183 : 32 08 00            		ld	(dac_me),a
(1) 3489/    1186 : 3E F5               		ld 	a,zopcPushAf
(1) 3490/    1188 : 32 20 00            		ld	(dac_fill),a
(1) 3491/    118B : C9                  		ret
(1) 3492/    118C :                     dac_off:
(1) 3493/    118C : 3E 2B               		ld	a,2Bh
(1) 3494/    118E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3495/    1191 : 3E 00               		ld	a,00h
(1) 3496/    1193 : 32 01 40            		ld	(Zym_data_1),a
(1) 3497/    1196 : 3E C9               		ld 	a,zopcRet
(1) 3498/    1198 : 32 08 00            		ld	(dac_me),a
(1) 3499/    119B : 3E C9               		ld 	a,zopcRet
(1) 3500/    119D : 32 20 00            		ld	(dac_fill),a
(1) 3501/    11A0 : C9                  		ret
(1) 3502/    11A1 :                     
(1) 3503/    11A1 :                     ; --------------------------------------------------------
(1) 3504/    11A1 :                     ; dac_play
(1) 3505/    11A1 :                     ;
(1) 3506/    11A1 :                     ; Plays a new sample
(1) 3507/    11A1 :                     ;
(1) 3508/    11A1 :                     ; NOTE:
(1) 3509/    11A1 :                     ; Set wave_Flags and wave_Pitch externally
(1) 3510/    11A1 :                     ; getting here.
(1) 3511/    11A1 :                     ; --------------------------------------------------------
(1) 3512/    11A1 :                     
(1) 3513/    11A1 :                     dac_play:
(1) 3514/    11A1 : F3                  		di
(1) 3515/    11A2 : CD 8C 11            		call	dac_off
(1) 3516/    11A5 : D9                  		exx				; flip exx regs
(1) 3517/    11A6 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3518/    11A9 : ED 5B AC 17         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3519/    11AD : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3520/    11B0 : D9                  		exx				; move them back
(1) 3521/    11B1 : 2A A3 17            		ld	hl,(wave_Start)
(1) 3522/    11B4 : 3A A5 17            		ld 	a,(wave_Start+2)
(1) 3523/    11B7 : 22 30 00            		ld	(dDacPntr),hl
(1) 3524/    11BA : 32 32 00            		ld	(dDacPntr+2),a
(1) 3525/    11BD : 2A A6 17            		ld	hl,(wave_Len)
(1) 3526/    11C0 : 3A A8 17            		ld 	a,(wave_Len+2)
(1) 3527/    11C3 : 22 33 00            		ld	(dDacCntr),hl
(1) 3528/    11C6 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3529/    11C9 : AF                  		xor	a
(1) 3530/    11CA : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3531/    11CD : CD D5 11            		call	dac_firstfill
(1) 3532/    11D0 : CD 77 11            		call	dac_on
(1) 3533/    11D3 : FB                  		ei
(1) 3534/    11D4 : C9                  		ret
(1) 3535/    11D5 :                     
(1) 3536/    11D5 :                     ; --------------------------------------------------------
(1) 3537/    11D5 :                     
(1) 3538/    11D5 :                     dac_firstfill:
(1) 3539/    11D5 :                     ; 		push	af
(1) 3540/    11D5 :                     dac_refill:
(1) 3541/    11D5 : CF                  		rst	8
(1) 3542/    11D6 : C5                  		push	bc
(1) 3543/    11D7 : D5                  		push	de
(1) 3544/    11D8 : E5                  		push	hl
(1) 3545/    11D9 : 3A AE 17            		ld	a,(wave_Flags)	; Already finished?
(1) 3546/    11DC : FE 07               		cp	111b
(1) 3547/    11DE : D2 94 12            		jp	nc,.dacfill_end
(1) 3548/    11E1 : 3A 35 00            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3549/    11E4 : 2A 33 00            		ld	hl,(dDacCntr)
(1) 3550/    11E7 : 01 80 00            		ld	bc,80h
(1) 3551/    11EA : 37                  		scf
(1) 3552/    11EB : 3F                  		ccf
(1) 3553/    11EC : ED 42               		sbc	hl,bc
(1) 3554/    11EE : DE 00               		sbc	a,0
(1) 3555/    11F0 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3556/    11F3 : 22 33 00            		ld	(dDacCntr),hl
(1) 3557/    11F6 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3558/    11F8 : B7                  		or	a
(1) 3559/    11F9 : FA 23 12            		jp	m,.dac_over
(1) 3560/    11FC : 3A 2F 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 3561/    11FF : 5F                  		ld	e,a
(1) 3562/    1200 : C6 80               		add 	a,80h
(1) 3563/    1202 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3564/    1205 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3565/    1208 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3566/    120B : CD 74 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3567/    120E : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3568/    1211 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3569/    1214 : 01 80 00            		ld	bc,80h
(1) 3570/    1217 : 09                  		add	hl,bc
(1) 3571/    1218 : CE 00               		adc	a,0
(1) 3572/    121A : 22 30 00            		ld	(dDacPntr),hl
(1) 3573/    121D : 32 32 00            		ld	(dDacPntr+2),a
(1) 3574/    1220 : C3 97 12            		jp	.dacfill_ret
(1) 3575/    1223 :                     
(1) 3576/    1223 :                     ; NOTE:
(1) 3577/    1223 :                     ; This doesn't finish at the exact
(1) 3578/    1223 :                     ; the END point.
(1) 3579/    1223 :                     .dac_over:
(1) 3580/    1223 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3581/    1225 : 3A AE 17            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 3582/    1228 : E6 01               		and	001b
(1) 3583/    122A : C2 4D 12            		jp	nz,.dacfill_loop
(1) 3584/    122D : 7D                  		ld	a,l
(1) 3585/    122E : C6 80               		add	a,80h
(1) 3586/    1230 : 4F                  		ld	c,a
(1) 3587/    1231 : 06 00               		ld	b,0
(1) 3588/    1233 : C5                  		push	bc
(1) 3589/    1234 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3590/    1237 : 5F                  		ld	e,a
(1) 3591/    1238 : C6 80               		add	a,80h
(1) 3592/    123A : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3593/    123D : C1                  		pop	bc
(1) 3594/    123E : 79                  		ld	a,c
(1) 3595/    123F : B0                  		or	b
(1) 3596/    1240 : 28 52               		jr	z,.dacfill_end
(1) 3597/    1242 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3598/    1245 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3599/    1248 : CD 74 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3600/    124B : 18 47               		jr	.dacfill_end
(1) 3601/    124D :                     .dacfill_loop:
(1) 3602/    124D :                     	; loop sample
(1) 3603/    124D : C5                  		push	bc
(1) 3604/    124E : D5                  		push	de
(1) 3605/    124F : 3A AB 17            		ld	a,(wave_Loop+2)
(1) 3606/    1252 : 4F                  		ld	c,a
(1) 3607/    1253 : ED 5B A9 17         		ld	de,(wave_Loop)
(1) 3608/    1257 : 2A A3 17            		ld	hl,(wave_Start)
(1) 3609/    125A : 3A A5 17            		ld 	a,(wave_Start+2)
(1) 3610/    125D : 81                  		add	a,c
(1) 3611/    125E : 19                  		add	hl,de
(1) 3612/    125F : CE 00               		adc	a,0
(1) 3613/    1261 : 22 30 00            		ld	(dDacPntr),hl
(1) 3614/    1264 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3615/    1267 : 2A A6 17            		ld	hl,(wave_Len)
(1) 3616/    126A : 3A A8 17            		ld 	a,(wave_Len+2)
(1) 3617/    126D : 91                  		sub	a,c
(1) 3618/    126E : 37                  		scf
(1) 3619/    126F : 3F                  		ccf
(1) 3620/    1270 : ED 52               		sbc	hl,de
(1) 3621/    1272 : DE 00               		sbc	a,0
(1) 3622/    1274 : 22 33 00            		ld	(dDacCntr),hl
(1) 3623/    1277 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3624/    127A : D1                  		pop	de
(1) 3625/    127B : C1                  		pop	bc
(1) 3626/    127C : 78                  		ld	a,b
(1) 3627/    127D : B1                  		or	c
(1) 3628/    127E : 28 17               		jr	z,.dacfill_ret
(1) 3629/    1280 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3630/    1283 : 5F                  		ld	e,a
(1) 3631/    1284 : C6 80               		add	a,80h
(1) 3632/    1286 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3633/    1289 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3634/    128C : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3635/    128F : CD 74 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3636/    1292 : 18 03               		jr	.dacfill_ret
(1) 3637/    1294 :                     
(1) 3638/    1294 :                     .dacfill_end:
(1) 3639/    1294 : CD 8C 11            		call	dac_off		; DAC finished
(1) 3640/    1297 :                     
(1) 3641/    1297 :                     .dacfill_ret:
(1) 3642/    1297 : E1                  		pop	hl
(1) 3643/    1298 : D1                  		pop	de
(1) 3644/    1299 : C1                  		pop	bc
(1) 3645/    129A :                     ; 		pop	af
(1) 3646/    129A : C9                  		ret
(1) 3647/    129B :                     
(1) 3648/    129B :                     ; ====================================================================
(1) 3649/    129B :                     ; ----------------------------------------------------------------
(1) 3650/    129B :                     ; Tables
(1) 3651/    129B :                     ; ----------------------------------------------------------------
(1) 3652/    129B :                     
(1) 3653/    129B : 84 02               fmFreq_List:	dw 644
(1) 3654/    129D : A9 02               		dw 681
(1) 3655/    129F : D2 02               		dw 722
(1) 3656/    12A1 : FD 02               		dw 765
(1) 3657/    12A3 : 2A 03               		dw 810
(1) 3658/    12A5 : 5A 03               		dw 858
(1) 3659/    12A7 : 8E 03               		dw 910
(1) 3660/    12A9 : C4 03               		dw 964
(1) 3661/    12AB : FD 03               		dw 1021
(1) 3662/    12AD : 39 04               		dw 1081
(1) 3663/    12AF : 7A 04               		dw 1146
(1) 3664/    12B1 : BE 04               		dw 1214
(1) 3665/    12B3 :                     psgFreq_List:
(1) 3666/    12B3 : FF FF               		dw -1		; C-0 00
(1) 3667/    12B5 : FF FF               		dw -1
(1) 3668/    12B7 : FF FF               		dw -1
(1) 3669/    12B9 : FF FF               		dw -1
(1) 3670/    12BB : FF FF               		dw -1
(1) 3671/    12BD : FF FF               		dw -1
(1) 3672/    12BF : FF FF               		dw -1
(1) 3673/    12C1 : FF FF               		dw -1
(1) 3674/    12C3 : FF FF               		dw -1
(1) 3675/    12C5 : FF FF               		dw -1
(1) 3676/    12C7 : FF FF               		dw -1
(1) 3677/    12C9 : FF FF               		dw -1
(1) 3678/    12CB : FF FF               		dw -1		; C-1 0C
(1) 3679/    12CD : FF FF               		dw -1
(1) 3680/    12CF : FF FF               		dw -1
(1) 3681/    12D1 : FF FF               		dw -1
(1) 3682/    12D3 : FF FF               		dw -1
(1) 3683/    12D5 : FF FF               		dw -1
(1) 3684/    12D7 : FF FF               		dw -1
(1) 3685/    12D9 : FF FF               		dw -1
(1) 3686/    12DB : FF FF               		dw -1
(1) 3687/    12DD : FF FF               		dw -1
(1) 3688/    12DF : FF FF               		dw -1
(1) 3689/    12E1 : FF FF               		dw -1
(1) 3690/    12E3 : FF FF               		dw -1		; C-2 18
(1) 3691/    12E5 : FF FF               		dw -1
(1) 3692/    12E7 : FF FF               		dw -1
(1) 3693/    12E9 : FF FF               		dw -1
(1) 3694/    12EB : FF FF               		dw -1
(1) 3695/    12ED : FF FF               		dw -1
(1) 3696/    12EF : FF FF               		dw -1
(1) 3697/    12F1 : FF FF               		dw -1
(1) 3698/    12F3 : FF FF               		dw -1
(1) 3699/    12F5 : FF FF               		dw -1
(1) 3700/    12F7 : FF FF               		dw -1
(1) 3701/    12F9 : FF FF               		dw -1
(1) 3702/    12FB : FF FF               		dw -1		; C-3 24
(1) 3703/    12FD : FF FF               		dw -1
(1) 3704/    12FF : FF FF               		dw -1
(1) 3705/    1301 : FF FF               		dw -1
(1) 3706/    1303 : FF FF               		dw -1
(1) 3707/    1305 : FF FF               		dw -1
(1) 3708/    1307 : FF FF               		dw -1
(1) 3709/    1309 : FF FF               		dw -1
(1) 3710/    130B : FF FF               		dw -1
(1) 3711/    130D : F8 03               		dw 3F8h
(1) 3712/    130F : BF 03               		dw 3BFh
(1) 3713/    1311 : 89 03               		dw 389h
(1) 3714/    1313 : 56 03               		dw 356h		; C-4 30
(1) 3715/    1315 : 26 03               		dw 326h
(1) 3716/    1317 : F9 02               		dw 2F9h
(1) 3717/    1319 : CE 02               		dw 2CEh
(1) 3718/    131B : A5 02               		dw 2A5h
(1) 3719/    131D : 80 02               		dw 280h
(1) 3720/    131F : 5C 02               		dw 25Ch
(1) 3721/    1321 : 3A 02               		dw 23Ah
(1) 3722/    1323 : 1A 02               		dw 21Ah
(1) 3723/    1325 : FB 01               		dw 1FBh
(1) 3724/    1327 : DF 01               		dw 1DFh
(1) 3725/    1329 : C4 01               		dw 1C4h
(1) 3726/    132B : AB 01               		dw 1ABh		; C-5 3C
(1) 3727/    132D : 93 01               		dw 193h
(1) 3728/    132F : 7D 01               		dw 17Dh
(1) 3729/    1331 : 67 01               		dw 167h
(1) 3730/    1333 : 53 01               		dw 153h
(1) 3731/    1335 : 40 01               		dw 140h
(1) 3732/    1337 : 2E 01               		dw 12Eh
(1) 3733/    1339 : 1D 01               		dw 11Dh
(1) 3734/    133B : 0D 01               		dw 10Dh
(1) 3735/    133D : FE 00               		dw 0FEh
(1) 3736/    133F : EF 00               		dw 0EFh
(1) 3737/    1341 : E2 00               		dw 0E2h
(1) 3738/    1343 : D6 00               		dw 0D6h		; C-6 48
(1) 3739/    1345 : C9 00               		dw 0C9h
(1) 3740/    1347 : BE 00               		dw 0BEh
(1) 3741/    1349 : B4 00               		dw 0B4h
(1) 3742/    134B : A9 00               		dw 0A9h
(1) 3743/    134D : A0 00               		dw 0A0h
(1) 3744/    134F : 97 00               		dw 097h
(1) 3745/    1351 : 8F 00               		dw 08Fh
(1) 3746/    1353 : 87 00               		dw 087h
(1) 3747/    1355 : 7F 00               		dw 07Fh
(1) 3748/    1357 : 78 00               		dw 078h
(1) 3749/    1359 : 71 00               		dw 071h
(1) 3750/    135B : 6B 00               		dw 06Bh		; C-7 54
(1) 3751/    135D : 65 00               		dw 065h
(1) 3752/    135F : 5F 00               		dw 05Fh
(1) 3753/    1361 : 5A 00               		dw 05Ah
(1) 3754/    1363 : 55 00               		dw 055h
(1) 3755/    1365 : 50 00               		dw 050h
(1) 3756/    1367 : 4B 00               		dw 04Bh
(1) 3757/    1369 : 47 00               		dw 047h
(1) 3758/    136B : 43 00               		dw 043h
(1) 3759/    136D : 40 00               		dw 040h
(1) 3760/    136F : 3C 00               		dw 03Ch
(1) 3761/    1371 : 39 00               		dw 039h
(1) 3762/    1373 : 36 00               		dw 036h		; C-8 60
(1) 3763/    1375 : 33 00               		dw 033h
(1) 3764/    1377 : 30 00               		dw 030h
(1) 3765/    1379 : 2D 00               		dw 02Dh
(1) 3766/    137B : 2B 00               		dw 02Bh
(1) 3767/    137D : 28 00               		dw 028h
(1) 3768/    137F : 26 00               		dw 026h
(1) 3769/    1381 : 24 00               		dw 024h
(1) 3770/    1383 : 22 00               		dw 022h
(1) 3771/    1385 : 20 00               		dw 020h
(1) 3772/    1387 : 1F 00               		dw 01Fh
(1) 3773/    1389 : 1D 00               		dw 01Dh
(1) 3774/    138B : 1B 00               		dw 01Bh		; C-9 6C
(1) 3775/    138D : 1A 00               		dw 01Ah
(1) 3776/    138F : 18 00               		dw 018h
(1) 3777/    1391 : 17 00               		dw 017h
(1) 3778/    1393 : 16 00               		dw 016h
(1) 3779/    1395 : 15 00               		dw 015h
(1) 3780/    1397 : 13 00               		dw 013h
(1) 3781/    1399 : 12 00               		dw 012h
(1) 3782/    139B : 11 00               		dw 011h
(1) 3783/    139D : 10 00                		dw 010h
(1) 3784/    139F : 09 00                		dw 009h
(1) 3785/    13A1 : 08 00                		dw 008h
(1) 3786/    13A3 : 06 00               		dw 006h
(1) 3787/    13A5 :                     
(1) 3788/    13A5 : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3789/    13A7 : 00 01               		dw 100h
(1) 3790/    13A9 : 00 01               		dw 100h
(1) 3791/    13AB : 00 01               		dw 100h
(1) 3792/    13AD : 00 01               		dw 100h
(1) 3793/    13AF : 00 01               		dw 100h
(1) 3794/    13B1 : 00 01               		dw 100h
(1) 3795/    13B3 : 00 01               		dw 100h
(1) 3796/    13B5 : 00 01               		dw 100h
(1) 3797/    13B7 : 00 01               		dw 100h
(1) 3798/    13B9 : 00 01               		dw 100h
(1) 3799/    13BB : 00 01               		dw 100h
(1) 3800/    13BD : 00 01               		dw 100h		; C-1
(1) 3801/    13BF : 00 01               		dw 100h
(1) 3802/    13C1 : 00 01               		dw 100h
(1) 3803/    13C3 : 00 01               		dw 100h
(1) 3804/    13C5 : 00 01               		dw 100h
(1) 3805/    13C7 : 00 01               		dw 100h
(1) 3806/    13C9 : 00 01               		dw 100h
(1) 3807/    13CB : 00 01               		dw 100h
(1) 3808/    13CD : 00 01               		dw 100h
(1) 3809/    13CF : 00 01               		dw 100h
(1) 3810/    13D1 : 00 01               		dw 100h
(1) 3811/    13D3 : 00 01               		dw 100h
(1) 3812/    13D5 : 00 01               		dw 100h		; C-2
(1) 3813/    13D7 : 00 01               		dw 100h
(1) 3814/    13D9 : 00 01               		dw 100h
(1) 3815/    13DB : 00 01               		dw 100h
(1) 3816/    13DD : 00 01               		dw 100h
(1) 3817/    13DF : 00 01               		dw 100h
(1) 3818/    13E1 : 00 01               		dw 100h
(1) 3819/    13E3 : 00 01               		dw 100h
(1) 3820/    13E5 : 00 01               		dw 100h
(1) 3821/    13E7 : 00 01               		dw 100h
(1) 3822/    13E9 : 36 00               		dw 036h
(1) 3823/    13EB : 3B 00               		dw 03Bh
(1) 3824/    13ED : 3E 00               		dw 03Eh		; C-3
(1) 3825/    13EF : 43 00               		dw 043h		; C#3
(1) 3826/    13F1 : 46 00               		dw 046h		; D-3
(1) 3827/    13F3 : 49 00               		dw 049h		; D#3
(1) 3828/    13F5 : 4E 00               		dw 04Eh		; E-3
(1) 3829/    13F7 : 54 00               		dw 054h		; F-3
(1) 3830/    13F9 : 58 00               		dw 058h		; F#3
(1) 3831/    13FB : 5E 00               		dw 05Eh		; G-3 -17
(1) 3832/    13FD : 63 00               		dw 063h		; G#3
(1) 3833/    13FF : 68 00               		dw 068h		; A-3
(1) 3834/    1401 : 70 00               		dw 070h		; A#3
(1) 3835/    1403 : 75 00               		dw 075h		; B-3
(1) 3836/    1405 : 85 00               		dw 085h		; C-4 -12
(1) 3837/    1407 : 87 00               		dw 087h		; C#4
(1) 3838/    1409 : 8C 00               		dw 08Ch		; D-4
(1) 3839/    140B : 9A 00               		dw 09Ah		; D#4
(1) 3840/    140D : 9E 00               		dw 09Eh		; E-4
(1) 3841/    140F : AD 00               		dw 0ADh		; F-4
(1) 3842/    1411 : B2 00               		dw 0B2h		; F#4
(1) 3843/    1413 : C0 00               		dw 0C0h		; G-4
(1) 3844/    1415 : CC 00               		dw 0CCh		; G#4
(1) 3845/    1417 : D7 00               		dw 0D7h		; A-4
(1) 3846/    1419 : E6 00               		dw 0E6h		; A#4
(1) 3847/    141B : F0 00               		dw 0F0h		; B-4
(1) 3848/    141D : 00 01               		dw 100h		; C-5 ****
(1) 3849/    141F : 10 01               		dw 110h		; C#5
(1) 3850/    1421 : 20 01               		dw 120h		; D-5
(1) 3851/    1423 : 2E 01               		dw 12Eh		; D#5
(1) 3852/    1425 : 42 01               		dw 142h		; E-5
(1) 3853/    1427 : 5A 01               		dw 15Ah		; F-5
(1) 3854/    1429 : 6A 01               		dw 16Ah		; F#5 +6
(1) 3855/    142B : 7F 01               		dw 17Fh		; G-5
(1) 3856/    142D : 91 01               		dw 191h		; G#5
(1) 3857/    142F : AC 01               		dw 1ACh		; A-5
(1) 3858/    1431 : C2 01               		dw 1C2h		; A#5
(1) 3859/    1433 : E0 01               		dw 1E0h		; B-5
(1) 3860/    1435 : F8 01               		dw 1F8h		; C-6 +12
(1) 3861/    1437 : 10 02               		dw 210h		; C#6
(1) 3862/    1439 : 40 02               		dw 240h		; D-6
(1) 3863/    143B : 60 02               		dw 260h		; D#6
(1) 3864/    143D : 80 02               		dw 280h		; E-6
(1) 3865/    143F : A0 02               		dw 2A0h		; F-6
(1) 3866/    1441 : D0 02               		dw 2D0h		; F#6
(1) 3867/    1443 : F8 02               		dw 2F8h		; G-6
(1) 3868/    1445 : 20 03               		dw 320h		; G#6
(1) 3869/    1447 : 50 03               		dw 350h		; A-6
(1) 3870/    1449 : 80 03               		dw 380h		; A#6
(1) 3871/    144B : C0 03               		dw 3C0h		; B-6
(1) 3872/    144D : 00 04               		dw 400h		; C-7
(1) 3873/    144F : 00 01               		dw 100h
(1) 3874/    1451 : 00 01               		dw 100h
(1) 3875/    1453 : 00 01               		dw 100h
(1) 3876/    1455 : 00 01               		dw 100h
(1) 3877/    1457 : 00 01               		dw 100h
(1) 3878/    1459 : 00 01               		dw 100h
(1) 3879/    145B : 00 01               		dw 100h
(1) 3880/    145D : 00 01               		dw 100h
(1) 3881/    145F : 00 01               		dw 100h
(1) 3882/    1461 : 00 01               		dw 100h
(1) 3883/    1463 : 00 01               		dw 100h
(1) 3884/    1465 : 00 01               		dw 100h		; C-8
(1) 3885/    1467 : 00 01               		dw 100h
(1) 3886/    1469 : 00 01               		dw 100h
(1) 3887/    146B : 00 01               		dw 100h
(1) 3888/    146D : 00 01               		dw 100h
(1) 3889/    146F : 00 01               		dw 100h
(1) 3890/    1471 : 00 01               		dw 100h
(1) 3891/    1473 : 00 01               		dw 100h
(1) 3892/    1475 : 00 01               		dw 100h
(1) 3893/    1477 : 00 01               		dw 100h
(1) 3894/    1479 : 00 01               		dw 100h
(1) 3895/    147B : 00 01               		dw 100h
(1) 3896/    147D : 00 01               		dw 100h		; C-9
(1) 3897/    147F : 00 01               		dw 100h
(1) 3898/    1481 : 00 01               		dw 100h
(1) 3899/    1483 : 00 01               		dw 100h
(1) 3900/    1485 : 00 01               		dw 100h
(1) 3901/    1487 : 00 01               		dw 100h
(1) 3902/    1489 : 00 01               		dw 100h
(1) 3903/    148B : 00 01               		dw 100h
(1) 3904/    148D : 00 01               		dw 100h
(1) 3905/    148F : 00 01               		dw 100h
(1) 3906/    1491 : 00 01               		dw 100h
(1) 3907/    1493 : 00 01               		dw 100h
(1) 3908/    1495 :                     
(1) 3909/    1495 : FF 15               fmcach_list:	dw fmcach_1
(1) 3910/    1497 : 27 16               		dw fmcach_2
(1) 3911/    1499 : 4F 16               		dw fmcach_3
(1) 3912/    149B : 00 00               		dw 0		; <-- skipped
(1) 3913/    149D : 77 16               		dw fmcach_4
(1) 3914/    149F : 9F 16               		dw fmcach_5
(1) 3915/    14A1 : C7 16               		dw fmcach_6
(1) 3916/    14A3 :                     
(1) 3917/    14A3 :                     ; ====================================================================
(1) 3918/    14A3 :                     ; ----------------------------------------------------------------
(1) 3919/    14A3 :                     ; MASTER buffers list
(1) 3920/    14A3 :                     ;
(1) 3921/    14A3 :                     ; dw track_buffer
(1) 3922/    14A3 :                     ; dw channel_list,block_cache,header_cache,instr_cache,track_cache
(1) 3923/    14A3 :                     ; db max_blocks,max_headers,max_instr,max_chnls
(1) 3924/    14A3 :                     ;
(1) 3925/    14A3 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 3926/    14A3 :                     ; ----------------------------------------------------------------
(1) 3927/    14A3 :                     
(1) 3928/    14A3 :                     nikona_BuffList:
(1) 3929/    14A3 : C9 17 59 18 0D 1C   	dw trkBuff_0,trkChnl_0,trkBlks_0,trkHdrs_0,trkInsD_0,trkCach_0
                    F1 19 A5 1A 00 1E 
(1) 3930/    14AF : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3931/    14B3 : F9 17 E1 18 25 1C   	dw trkBuff_1,trkChnl_1,trkBlks_1,trkHdrs_1,trkInsD_1,trkCach_1
                    2D 1A 1D 1B 40 1E 
(1) 3932/    14BF : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3933/    14C3 : 29 18 69 19 3D 1C   	dw trkBuff_2,trkChnl_2,trkBlks_2,trkHdrs_2,trkInsD_2,trkCach_2
                    69 1A 95 1B 80 1E 
(1) 3934/    14CF : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3935/    14D3 : FF FF               	dw -1
(1) 3936/    14D5 :                     
(1) 3937/    14D5 :                     nikona_SetMstrList:
(1) 3938/    14D5 : 00                  	db 0				; ** 32-bit 68k address **
(1) 3939/    14D6 : 88                  	db (Gema_MasterList>>16)&0FFh
(1) 3940/    14D7 : 3A                  	db (Gema_MasterList>>8)&0FFh
(1) 3941/    14D8 : 18                  	db Gema_MasterList&0FFh
(1) 3942/    14D9 :                     
(1) 3943/    14D9 :                     ; ====================================================================
(1) 3944/    14D9 :                     ; ----------------------------------------------------------------
(1) 3945/    14D9 :                     ; Buffer section
(1) 3946/    14D9 :                     ; ----------------------------------------------------------------
(1) 3947/    14D9 :                     
(1) 3948/    14D9 :                     ; --------------------------------------------------------
(1) 3949/    14D9 :                     ; Channel table struct:
(1) 3950/    14D9 :                     ; 00  - Linked tracker channel
(1) 3951/    14D9 :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 3952/    14D9 :                     ; 03  - Intrument cache pointer
(1) 3953/    14D9 :                     ; 05  - Chip index (YM2612: KEY index)
(1) 3954/    14D9 :                     ; 06  - Frequency list index (YM2612: oct|index)
(1) 3955/    14D9 :                     ; 07  - Pitchbend add/sub
(1) 3956/    14D9 :                     ; 08  - Current volume: 00-max
(1) 3957/    14D9 :                     ; 09  - Stored effect setting
(1) 3958/    14D9 :                     ; 0A  - FREE
(1) 3959/    14D9 :                     ; 0B  - FREE
(1) 3960/    14D9 :                     ; 0C+ - Misc. settings for the current chip
(1) 3961/    14D9 :                     
(1) 3962/    14D9 :                     ; PSG   80h
(1) 3963/    14D9 :                     ; PSGN  90h
(1) 3964/    14D9 :                     ; FM   0A0h
(1) 3965/    14D9 :                     ; FM3  0B0h
(1) 3966/    14D9 :                     ; DAC  0C0h
(1) 3967/    14D9 :                     ; PWM  0D0h
(1) 3968/    14D9 :                     ; --------------------------------------------------------
(1) 3969/    14D9 :                     
(1) 3970/    14D9 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 3971/    14DB : 42 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 3972/    14DD : 52 00               		dw tblFM-tblList		; 0A0h
(1) 3973/    14DF : 92 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 3974/    14E1 : A2 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 3975/    14E3 : B4 00               		dw tblPWM-tblList		; 0D0h
(1) 3976/    14E5 : 00 00               		dw 0
(1) 3977/    14E7 : 00 00               		dw 0
(1) 3978/    14E9 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3979/    14F1 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3980/    14F9 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3981/    1501 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3982/    1509 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3983/    1511 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3984/    1519 : FF FF               		dw -1	; end-of-list
(1) 3985/    151B : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
                    00 03 
(1) 3986/    1523 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3987/    152B : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3988/    1533 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3989/    153B : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3990/    1543 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3991/    154B : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
                    00 00 
(1) 3992/    1553 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3993/    155B : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
                    00 00 
(1) 3994/    1563 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3995/    156B : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
                    00 00 
(1) 3996/    1573 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3997/    157B : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
                    00 00 
(1) 3998/    1583 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3999/    158B : FF FF               		dw -1	; end-of-list
(1) 4000/    158D : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4001/    1595 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4002/    159D : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 4003/    15A5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4004/    15AD : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 4005/    15B5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4006/    15BD : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
                    00 00 
(1) 4007/    15C5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4008/    15CD : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
                    00 00 
(1) 4009/    15D5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4010/    15DD : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
                    00 00 
(1) 4011/    15E5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4012/    15ED : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
                    00 00 
(1) 4013/    15F5 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4014/    15FD : FF FF               		dw -1	; end-of-list
(1) 4015/    15FF :                     
(1) 4016/    15FF :                     ; FM patch storage
(1) 4017/    15FF :                     fmcach_1	ds 28h
(1) 4018/    1627 :                     fmcach_2	ds 28h
(1) 4019/    164F :                     fmcach_3	ds 28h
(1) 4020/    1677 :                     fmcach_4	ds 28h
(1) 4021/    169F :                     fmcach_5	ds 28h
(1) 4022/    16C7 :                     fmcach_6	ds 28h
(1) 4023/    16EF :                     
(1) 4024/    16EF : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyOn/KeyOff/KeyCut bits
                    00 00 
(1) 4025/    16F7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 4026/    16FF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 4027/    1707 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags: Stereo/Loop/Left/Right | 32-bit**
                    00 00 
(1) 4028/    170F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - **sample location
                    00 00 
(1) 4029/    1717 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4030/    171F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4031/    1727 :                     
(1) 4032/    1727 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4033/    172B : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4034/    172F : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4035/    1733 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4036/    1737 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4037/    173B : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4038/    173F : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4039/    1743 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4040/    1747 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4041/    174B : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4042/    174F : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4043/    1753 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4044/    1757 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4045/    175B : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4046/    175F : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4047/    1763 :                     
(1) 4048/    1763 :                     ; mailboxes	ds 40h		; GEMS style mailboxes/events
(1) 4049/    1763 :                     trkListCach	ds 4*10h	; 40h bytes
(1) 4050/    17A3 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4051/    17A5 : 00                  		db 0
(1) 4052/    17A6 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4053/    17A8 : 00                  		db 0
(1) 4054/    17A9 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4055/    17AB : 00                  		db 0
(1) 4056/    17AC : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4057/    17AE : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4058/    17AF :                     
(1) 4059/    17AF :                     
(1) 4060/    17AF : 00                  tickSpSet	db 0		; **
(1) 4061/    17B0 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4062/    17B1 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4063/    17B2 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4064/    17B3 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4065/    17B4 :                     headerOut	ds 00Ch		; Temporal storage for 68k pointers
(1) 4066/    17C0 :                     headerOut_e	ds 2
(1) 4067/    17C2 :                     sampleHead	ds 006h
(1) 4068/    17C8 : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1) 4069/    17C9 :                     
(1) 4070/    17C9 :                     ; --------------------------------------------------------
(1) 4071/    17C9 :                     ; * USER customizable section *
(1) 4072/    17C9 :                     ;
(1) 4073/    17C9 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4074/    17C9 :                     ; --------------------------------------------------------
(1) 4075/    17C9 :                     
(1) 4076/    17C9 :                     trkBuff_0	ds 30h			; TRACK BUFFER 0
(1) 4077/    17F9 :                     trkBuff_1	ds 30h			; TRACK BUFFER 1
(1) 4078/    1829 :                     trkBuff_2	ds 30h			; TRACK BUFFER 2
(1) 4079/    1859 :                     ; trkBuff_3	ds 30h			; TRACK BUFFER 3
(1) 4080/    1859 :                     trkChnl_0	ds 8*MAX_TRKCHN
(1) 4081/    18E1 :                     trkChnl_1	ds 8*MAX_TRKCHN
(1) 4082/    1969 :                     trkChnl_2	ds 8*MAX_TRKCHN
(1) 4083/    19F1 :                     ; trkChnl_3	ds 8*MAX_TRKCHN
(1) 4084/    19F1 :                     trkHdrs_0	ds 4*MAX_HEADS		; dw point,rowcntr
(1) 4085/    1A2D :                     trkHdrs_1	ds 4*MAX_HEADS
(1) 4086/    1A69 :                     trkHdrs_2	ds 4*MAX_HEADS
(1) 4087/    1AA5 :                     ; trkHdrs_3	ds 4*MAX_HEADS
(1) 4088/    1AA5 :                     trkInsD_0	ds 8*MAX_INS
(1) 4089/    1B1D :                     trkInsD_1	ds 8*MAX_INS
(1) 4090/    1B95 :                     trkInsD_2	ds 8*MAX_INS
(1) 4091/    1C0D :                     ; trkInsD_3	ds 8*MAX_INS
(1) 4092/    1C0D :                     trkBlks_0	ds MAX_BLOCKS
(1) 4093/    1C25 :                     trkBlks_1	ds MAX_BLOCKS
(1) 4094/    1C3D :                     trkBlks_2	ds MAX_BLOCKS
(1) 4095/    1C55 :                     ; trkBlks_3	ds MAX_BLOCKS
(1) 4096/    1C55 :                     
(1) 4097/    1C55 :                     ; ====================================================================
(1) 4098/    1C55 :                     ; ----------------------------------------------------------------
(1) 4099/    1C55 :                     ; WAVE playback buffer
(1) 4100/    1C55 :                     ;
(1) 4101/    1C55 :                     ; Located at 200h
(1) 4102/    1C55 :                     ; ----------------------------------------------------------------
(1) 4103/    1C55 :                     
(1) 4104/    1C55 : (MACRO)             		org 1D00h
(1) 4104/    1C55 : 00                                                  db 0
(1) 4104/    1C56 : 00                                                  db 0
(1) 4104/    1C57 : 00                                                  db 0
(1) 4104/    1C58 : 00                                                  db 0
(1) 4104/    1C59 : 00                                                  db 0
(1) 4104/    1C5A : 00                                                  db 0
(1) 4104/    1C5B : 00                                                  db 0
(1) 4104/    1C5C : 00                                                  db 0
(1) 4104/    1C5D : 00                                                  db 0
(1) 4104/    1C5E : 00                                                  db 0
(1) 4104/    1C5F : 00                                                  db 0
(1) 4104/    1C60 : 00                                                  db 0
(1) 4104/    1C61 : 00                                                  db 0
(1) 4104/    1C62 : 00                                                  db 0
(1) 4104/    1C63 : 00                                                  db 0
(1) 4104/    1C64 : 00                                                  db 0
(1) 4104/    1C65 : 00                                                  db 0
(1) 4104/    1C66 : 00                                                  db 0
(1) 4104/    1C67 : 00                                                  db 0
(1) 4104/    1C68 : 00                                                  db 0
(1) 4104/    1C69 : 00                                                  db 0
(1) 4104/    1C6A : 00                                                  db 0
(1) 4104/    1C6B : 00                                                  db 0
(1) 4104/    1C6C : 00                                                  db 0
(1) 4104/    1C6D : 00                                                  db 0
(1) 4104/    1C6E : 00                                                  db 0
(1) 4104/    1C6F : 00                                                  db 0
(1) 4104/    1C70 : 00                                                  db 0
(1) 4104/    1C71 : 00                                                  db 0
(1) 4104/    1C72 : 00                                                  db 0
(1) 4104/    1C73 : 00                                                  db 0
(1) 4104/    1C74 : 00                                                  db 0
(1) 4104/    1C75 : 00                                                  db 0
(1) 4104/    1C76 : 00                                                  db 0
(1) 4104/    1C77 : 00                                                  db 0
(1) 4104/    1C78 : 00                                                  db 0
(1) 4104/    1C79 : 00                                                  db 0
(1) 4104/    1C7A : 00                                                  db 0
(1) 4104/    1C7B : 00                                                  db 0
(1) 4104/    1C7C : 00                                                  db 0
(1) 4104/    1C7D : 00                                                  db 0
(1) 4104/    1C7E : 00                                                  db 0
(1) 4104/    1C7F : 00                                                  db 0
(1) 4104/    1C80 : 00                                                  db 0
(1) 4104/    1C81 : 00                                                  db 0
(1) 4104/    1C82 : 00                                                  db 0
(1) 4104/    1C83 : 00                                                  db 0
(1) 4104/    1C84 : 00                                                  db 0
(1) 4104/    1C85 : 00                                                  db 0
(1) 4104/    1C86 : 00                                                  db 0
(1) 4104/    1C87 : 00                                                  db 0
(1) 4104/    1C88 : 00                                                  db 0
(1) 4104/    1C89 : 00                                                  db 0
(1) 4104/    1C8A : 00                                                  db 0
(1) 4104/    1C8B : 00                                                  db 0
(1) 4104/    1C8C : 00                                                  db 0
(1) 4104/    1C8D : 00                                                  db 0
(1) 4104/    1C8E : 00                                                  db 0
(1) 4104/    1C8F : 00                                                  db 0
(1) 4104/    1C90 : 00                                                  db 0
(1) 4104/    1C91 : 00                                                  db 0
(1) 4104/    1C92 : 00                                                  db 0
(1) 4104/    1C93 : 00                                                  db 0
(1) 4104/    1C94 : 00                                                  db 0
(1) 4104/    1C95 : 00                                                  db 0
(1) 4104/    1C96 : 00                                                  db 0
(1) 4104/    1C97 : 00                                                  db 0
(1) 4104/    1C98 : 00                                                  db 0
(1) 4104/    1C99 : 00                                                  db 0
(1) 4104/    1C9A : 00                                                  db 0
(1) 4104/    1C9B : 00                                                  db 0
(1) 4104/    1C9C : 00                                                  db 0
(1) 4104/    1C9D : 00                                                  db 0
(1) 4104/    1C9E : 00                                                  db 0
(1) 4104/    1C9F : 00                                                  db 0
(1) 4104/    1CA0 : 00                                                  db 0
(1) 4104/    1CA1 : 00                                                  db 0
(1) 4104/    1CA2 : 00                                                  db 0
(1) 4104/    1CA3 : 00                                                  db 0
(1) 4104/    1CA4 : 00                                                  db 0
(1) 4104/    1CA5 : 00                                                  db 0
(1) 4104/    1CA6 : 00                                                  db 0
(1) 4104/    1CA7 : 00                                                  db 0
(1) 4104/    1CA8 : 00                                                  db 0
(1) 4104/    1CA9 : 00                                                  db 0
(1) 4104/    1CAA : 00                                                  db 0
(1) 4104/    1CAB : 00                                                  db 0
(1) 4104/    1CAC : 00                                                  db 0
(1) 4104/    1CAD : 00                                                  db 0
(1) 4104/    1CAE : 00                                                  db 0
(1) 4104/    1CAF : 00                                                  db 0
(1) 4104/    1CB0 : 00                                                  db 0
(1) 4104/    1CB1 : 00                                                  db 0
(1) 4104/    1CB2 : 00                                                  db 0
(1) 4104/    1CB3 : 00                                                  db 0
(1) 4104/    1CB4 : 00                                                  db 0
(1) 4104/    1CB5 : 00                                                  db 0
(1) 4104/    1CB6 : 00                                                  db 0
(1) 4104/    1CB7 : 00                                                  db 0
(1) 4104/    1CB8 : 00                                                  db 0
(1) 4104/    1CB9 : 00                                                  db 0
(1) 4104/    1CBA : 00                                                  db 0
(1) 4104/    1CBB : 00                                                  db 0
(1) 4104/    1CBC : 00                                                  db 0
(1) 4104/    1CBD : 00                                                  db 0
(1) 4104/    1CBE : 00                                                  db 0
(1) 4104/    1CBF : 00                                                  db 0
(1) 4104/    1CC0 : 00                                                  db 0
(1) 4104/    1CC1 : 00                                                  db 0
(1) 4104/    1CC2 : 00                                                  db 0
(1) 4104/    1CC3 : 00                                                  db 0
(1) 4104/    1CC4 : 00                                                  db 0
(1) 4104/    1CC5 : 00                                                  db 0
(1) 4104/    1CC6 : 00                                                  db 0
(1) 4104/    1CC7 : 00                                                  db 0
(1) 4104/    1CC8 : 00                                                  db 0
(1) 4104/    1CC9 : 00                                                  db 0
(1) 4104/    1CCA : 00                                                  db 0
(1) 4104/    1CCB : 00                                                  db 0
(1) 4104/    1CCC : 00                                                  db 0
(1) 4104/    1CCD : 00                                                  db 0
(1) 4104/    1CCE : 00                                                  db 0
(1) 4104/    1CCF : 00                                                  db 0
(1) 4104/    1CD0 : 00                                                  db 0
(1) 4104/    1CD1 : 00                                                  db 0
(1) 4104/    1CD2 : 00                                                  db 0
(1) 4104/    1CD3 : 00                                                  db 0
(1) 4104/    1CD4 : 00                                                  db 0
(1) 4104/    1CD5 : 00                                                  db 0
(1) 4104/    1CD6 : 00                                                  db 0
(1) 4104/    1CD7 : 00                                                  db 0
(1) 4104/    1CD8 : 00                                                  db 0
(1) 4104/    1CD9 : 00                                                  db 0
(1) 4104/    1CDA : 00                                                  db 0
(1) 4104/    1CDB : 00                                                  db 0
(1) 4104/    1CDC : 00                                                  db 0
(1) 4104/    1CDD : 00                                                  db 0
(1) 4104/    1CDE : 00                                                  db 0
(1) 4104/    1CDF : 00                                                  db 0
(1) 4104/    1CE0 : 00                                                  db 0
(1) 4104/    1CE1 : 00                                                  db 0
(1) 4104/    1CE2 : 00                                                  db 0
(1) 4104/    1CE3 : 00                                                  db 0
(1) 4104/    1CE4 : 00                                                  db 0
(1) 4104/    1CE5 : 00                                                  db 0
(1) 4104/    1CE6 : 00                                                  db 0
(1) 4104/    1CE7 : 00                                                  db 0
(1) 4104/    1CE8 : 00                                                  db 0
(1) 4104/    1CE9 : 00                                                  db 0
(1) 4104/    1CEA : 00                                                  db 0
(1) 4104/    1CEB : 00                                                  db 0
(1) 4104/    1CEC : 00                                                  db 0
(1) 4104/    1CED : 00                                                  db 0
(1) 4104/    1CEE : 00                                                  db 0
(1) 4104/    1CEF : 00                                                  db 0
(1) 4104/    1CF0 : 00                                                  db 0
(1) 4104/    1CF1 : 00                                                  db 0
(1) 4104/    1CF2 : 00                                                  db 0
(1) 4104/    1CF3 : 00                                                  db 0
(1) 4104/    1CF4 : 00                                                  db 0
(1) 4104/    1CF5 : 00                                                  db 0
(1) 4104/    1CF6 : 00                                                  db 0
(1) 4104/    1CF7 : 00                                                  db 0
(1) 4104/    1CF8 : 00                                                  db 0
(1) 4104/    1CF9 : 00                                                  db 0
(1) 4104/    1CFA : 00                                                  db 0
(1) 4104/    1CFB : 00                                                  db 0
(1) 4104/    1CFC : 00                                                  db 0
(1) 4104/    1CFD : 00                                                  db 0
(1) 4104/    1CFE : 00                                                  db 0
(1) 4104/    1CFF : 00                                                  db 0
(1) 4104/    1D00 :                     
(1) 4105/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4106/    1E00 :                     trkCach_0	ds MAX_RCACH	; ** MUST BE aligned **
(1) 4107/    1E40 :                     trkCach_1	ds MAX_RCACH
(1) 4108/    1E80 :                     trkCach_2	ds MAX_RCACH
(1) 4109/    1EC0 :                     trkCach_3	ds MAX_RCACH
(1) 4110/    1F00 :                     
(1) 4111/    1F00 :                     ; --------------------------------------------------------
(1) 4112/    1F00 :                     
(1) 4113/    1F00 :                     		cpu 68000	; [AS] Exit Z80
(1) 4114/    1F00 :                     		padding off	; [AS] NO padding (again)
(1) 4115/  8838F8 :                     		phase Z80_TOP+*	; [AS] Relocate PC
(1) 4116/  8838F8 :                     		align 2		; [AS] Align by 2
(1) 4117/  8838F8 :                     
     279/  8838F8 :                     Z80_CODE_END:
     281/  8838F8 :                     
     283/    38F8 :                     		dephase
     285/    38F8 :                     
     286/    38F8 :                     ; ===========================================================================
     287/    38F8 :                     ; ----------------------------------------------------------------
     288/    38F8 :                     ; GAME DATA for ALL Cartridge and Disc
     289/    38F8 :                     ; ----------------------------------------------------------------
     290/    38F8 :                     
     291/    38F8 :                     ; --------------------------------------------------------
     292/    38F8 :                     ; SEGA CD / SEGA CD32X ISO header
     293/    38F8 :                     ; --------------------------------------------------------
     294/    38F8 :                     
     307/    38F8 :                     
     308/    38F8 :                     ; ====================================================================
     309/    38F8 :                     ; --------------------------------------------------------
     310/    38F8 :                     ; Screen modes
     311/    38F8 :                     ; --------------------------------------------------------
     312/    38F8 :                     
     316/    38F8 :                     		align 2
     318/    38F8 :                     Md_Screen00:
     320/FFFFFFFFFFFF1800 :                     		phase RAM_UserCode
     322/FFFFFFFFFFFF1800 :                     cscrn0_s:
     323/FFFFFFFFFFFF1800 :                     		include "game/screen_0.asm"
(1)    1/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF1800 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF1800 :                     ; SCREEN $00
(1)    4/FFFFFFFFFFFF1800 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF1800 :                     
(1)    6/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF1800 :                     ; Settings
(1)    9/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF1800 :                     
(1)   11/FFFFFFFFFFFF1800 : =$4                 TEST_MAINSPD	equ $04
(1)   12/FFFFFFFFFFFF1800 :                     
(1)   13/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)   14/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   15/FFFFFFFFFFFF1800 :                     ; Structs
(1)   16/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   17/FFFFFFFFFFFF1800 :                     
(1)   18/FFFFFFFFFFFF1800 :                     ; 		struct 0
(1)   19/FFFFFFFFFFFF1800 :                     ; strc_xpos	ds.w 1
(1)   20/FFFFFFFFFFFF1800 :                     ; strc_ypos	ds.w 1
(1)   21/FFFFFFFFFFFF1800 :                     ; 		endstruct
(1)   22/FFFFFFFFFFFF1800 :                     
(1)   23/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)   24/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   25/FFFFFFFFFFFF1800 :                     ; This screen's RAM
(1)   26/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   27/FFFFFFFFFFFF1800 :                     
(1)   28/FFFFFFFFFFFF1800 : (MACRO)             		struct RAM_ScreenBuff
(1)   28/FFFFFFFFFFFF1800 : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   28/    38F8 :                                     dephase
(1)   28/    38F8 : =$38F8              GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFFCD00 :                                     phase RAM_SCREENBUFF
(1)   29/FFFFFFFFFFFFCD00 :                     RAM_MapX	ds.w 1
(1)   30/FFFFFFFFFFFFCD02 :                     RAM_MapY	ds.w 1
(1)   31/FFFFFFFFFFFFCD04 : (MACRO)             		endstruct
(1)   31/FFFFFFFFFFFFCD00 :                                     !org GLBL_LASTORG
(1)   31/FFFFFFFFFFFF1800 :                                     phase GLBL_LASTPC
(1)   32/FFFFFFFFFFFF1800 :                     
(1)   33/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)   34/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   35/FFFFFFFFFFFF1800 :                     ; Code start
(1)   36/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   37/FFFFFFFFFFFF1800 :                     
(1)   38/FFFFFFFFFFFF1800 : 46FC 2700           		move.w	#$2700,sr
(1)   39/FFFFFFFFFFFF1804 : 08B9 0006 FFFF A9AF 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   40/FFFFFFFFFFFF180C : 6100 EA40           		bsr	Video_Update
(1)   41/FFFFFFFFFFFF1810 : 6100 EBEA           		bsr	Video_PrintInit
(1)   42/FFFFFFFFFFFF1814 : 6100 EA8C           		bsr	Video_Clear
(1)   43/FFFFFFFFFFFF1818 : 6100 F824           		bsr	Mode_Init
(1)   44/FFFFFFFFFFFF181C : 6100 E9D6           		bsr	gemaStopAll
(1)   45/FFFFFFFFFFFF1820 :                     
(1)   46/FFFFFFFFFFFF1820 : 41F8 A514           		lea	(RAM_PaletteFd+$60),a0
(1)   47/FFFFFFFFFFFF1824 : 30FC 0000           		move.w	#0,(a0)+
(1)   48/FFFFFFFFFFFF1828 : 30FC 0EEE           		move.w	#$EEE,(a0)+
(1)   49/FFFFFFFFFFFF182C : 30FC 0CCC           		move.w	#$CCC,(a0)+
(1)   50/FFFFFFFFFFFF1830 : 30FC 0AAA           		move.w	#$AAA,(a0)+
(1)   51/FFFFFFFFFFFF1834 : 30FC 0888           		move.w	#$888,(a0)+
(1)   52/FFFFFFFFFFFF1838 : 30FC 0222           		move.w	#$222,(a0)+
(1)   53/FFFFFFFFFFFF183C : 4278 A4B4           		clr.w	(RAM_PaletteFd).w		; <-- quick patch
(1)   54/FFFFFFFFFFFF1840 : 4278 A534           		clr.w	(RAM_MdMarsPalFd).w
(1)   55/FFFFFFFFFFFF1844 :                     	; Test image
(1)   57/FFFFFFFFFFFF1844 : 41F9 0090 5D26      		lea	(PalMars_TEST),a0
(1)   58/FFFFFFFFFFFF184A : 7000                		moveq	#0,d0
(1)   59/FFFFFFFFFFFF184C : 323C 0100           		move.w	#256,d1
(1)   60/FFFFFFFFFFFF1850 : 7400                		moveq	#0,d2
(1)   61/FFFFFFFFFFFF1852 : 6100 F1B0           		bsr	Video_FadePal_Mars
(1)   62/FFFFFFFFFFFF1856 :                     		; SH2 does the pixel data
(1)   78/FFFFFFFFFFFF1856 :                     
(1)   79/FFFFFFFFFFFF1856 :                     	; Shared:
(1)   80/FFFFFFFFFFFF1856 :                     ; 		lea	str_Stats(pc),a0
(1)   81/FFFFFFFFFFFF1856 :                     ; 		move.l	#locate(0,1,1),d0
(1)   82/FFFFFFFFFFFF1856 :                     ; 		bsr	Video_Print
(1)   83/FFFFFFFFFFFF1856 :                     ; 	Set Fade-in settings
(1)   84/FFFFFFFFFFFF1856 : 08F9 0006 FFFF A9AF 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   85/FFFFFFFFFFFF185E : 11FC 0081 A9BA      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)   86/FFFFFFFFFFFF1864 : 6100 E9E8           		bsr	Video_Update
(1)   87/FFFFFFFFFFFF1868 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)   88/FFFFFFFFFFFF186E : 31FC 0002 A9A8      		move.w	#2,(RAM_FadeMarsIncr).w
(1)   89/FFFFFFFFFFFF1874 : 31FC 0001 A9A2      		move.w	#1,(RAM_FadeMdDelay).w
(1)   90/FFFFFFFFFFFF187A : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)   91/FFFFFFFFFFFF1880 : 31FC 0001 A99E      		move.w	#1,(RAM_FadeMdReq).w
(1)   92/FFFFFFFFFFFF1886 : 31FC 0001 A9A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)   93/FFFFFFFFFFFF188C :                     
(1)  108/FFFFFFFFFFFF188C : 7000                		moveq	#0,d0
(1)  109/FFFFFFFFFFFF188E : 6100 E916           		bsr	gemaPlayTrack
(1)  110/FFFFFFFFFFFF1892 :                     
(1)  111/FFFFFFFFFFFF1892 :                     ; ====================================================================
(1)  112/FFFFFFFFFFFF1892 :                     ; ------------------------------------------------------
(1)  113/FFFFFFFFFFFF1892 :                     ; Loop
(1)  114/FFFFFFFFFFFF1892 :                     ; ------------------------------------------------------
(1)  115/FFFFFFFFFFFF1892 :                     
(1)  116/FFFFFFFFFFFF1892 :                     .loop:
(1)  117/FFFFFFFFFFFF1892 : 6100 F358           		bsr	System_WaitFrame
(1)  118/FFFFFFFFFFFF1896 : 6100 ED62           		bsr	Video_RunFade
(1)  119/FFFFFFFFFFFF189A :                     
(1)  120/FFFFFFFFFFFF189A : 41FA 006C           		lea	str_Stats2(pc),a0
(1)  121/FFFFFFFFFFFF189E : 203C 0000 0101      		move.l	#locate(0,1,1),d0
(1)  122/FFFFFFFFFFFF18A4 : 6100 EB86           		bsr	Video_Print
(1)  123/FFFFFFFFFFFF18A8 :                     
(1)  124/FFFFFFFFFFFF18A8 : 06B8 0000 0001 9740 		addi.l	#1,(RAM_Framecount).w
(1)  125/FFFFFFFFFFFF18B0 : 60E0                		bra.s	.loop
(1)  126/FFFFFFFFFFFF18B2 :                     
(1)  127/FFFFFFFFFFFF18B2 :                     ; ====================================================================
(1)  128/FFFFFFFFFFFF18B2 :                     ; ----------------------------------------------
(1)  129/FFFFFFFFFFFF18B2 :                     ; common subs
(1)  130/FFFFFFFFFFFF18B2 :                     ; ----------------------------------------------
(1)  131/FFFFFFFFFFFF18B2 :                     
(1)  132/FFFFFFFFFFFF18B2 :                     .fade_in:
(1)  133/FFFFFFFFFFFF18B2 : 31FC 0001 A99E      		move.w	#1,(RAM_FadeMdReq).w
(1)  134/FFFFFFFFFFFF18B8 : 31FC 0001 A9A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)  135/FFFFFFFFFFFF18BE : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  136/FFFFFFFFFFFF18C4 : 31FC 0001 A9A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  137/FFFFFFFFFFFF18CA : 31FC 0004 A9A2      		move.w	#4,(RAM_FadeMdDelay).w
(1)  138/FFFFFFFFFFFF18D0 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  139/FFFFFFFFFFFF18D6 : 6024                		bra.s	.loop2
(1)  140/FFFFFFFFFFFF18D8 :                     
(1)  141/FFFFFFFFFFFF18D8 :                     .fade_out:
(1)  142/FFFFFFFFFFFF18D8 : 31FC 0002 A99E      		move.w	#2,(RAM_FadeMdReq).w
(1)  143/FFFFFFFFFFFF18DE : 31FC 0002 A9A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  144/FFFFFFFFFFFF18E4 : 31FC 0001 A9A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  145/FFFFFFFFFFFF18EA : 31FC 0001 A9A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  146/FFFFFFFFFFFF18F0 : 31FC 0004 A9A2      		move.w	#4,(RAM_FadeMdDelay).w
(1)  147/FFFFFFFFFFFF18F6 : 31FC 0000 A9AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  148/FFFFFFFFFFFF18FC :                     .loop2:
(1)  149/FFFFFFFFFFFF18FC : 6100 F2EE           		bsr	System_WaitFrame
(1)  150/FFFFFFFFFFFF1900 : 6100 ECF8           		bsr	Video_RunFade
(1)  151/FFFFFFFFFFFF1904 : 66F6                		bne.s	.loop2
(1)  152/FFFFFFFFFFFF1906 : 4E75                		rts
(1)  153/FFFFFFFFFFFF1908 :                     
(1)  154/FFFFFFFFFFFF1908 :                     ; ====================================================================
(1)  155/FFFFFFFFFFFF1908 :                     ; ------------------------------------------------------
(1)  156/FFFFFFFFFFFF1908 :                     ; Subroutines
(1)  157/FFFFFFFFFFFF1908 :                     ; ------------------------------------------------------
(1)  158/FFFFFFFFFFFF1908 :                     
(1)  159/FFFFFFFFFFFF1908 :                     ; ====================================================================
(1)  160/FFFFFFFFFFFF1908 :                     ; ------------------------------------------------------
(1)  161/FFFFFFFFFFFF1908 :                     ; DATA
(1)  162/FFFFFFFFFFFF1908 :                     ;
(1)  163/FFFFFFFFFFFF1908 :                     ; Small stuff goes here
(1)  164/FFFFFFFFFFFF1908 :                     ; ------------------------------------------------------
(1)  165/FFFFFFFFFFFF1908 :                     
(1)  166/FFFFFFFFFFFF1908 :                     ; str_Stats:
(1)  167/FFFFFFFFFFFF1908 :                     ; 		dc.b "MARSIANO!",$A
(1)  168/FFFFFFFFFFFF1908 :                     ; 		dc.b 0
(1)  169/FFFFFFFFFFFF1908 :                     ; 		align 2
(1)  170/FFFFFFFFFFFF1908 :                     
(1)  171/FFFFFFFFFFFF1908 :                     str_Stats2:
(1)  172/FFFFFFFFFFFF1908 :                     ; 	if MARS
(1)  173/FFFFFFFFFFFF1908 : 5C6C 205C 7720 5C77 		dc.b "\\l \\w \\w",$A,$A
                    0A0A                
(1)  174/FFFFFFFFFFFF1912 : 00                  		dc.b 0
(1)  175/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\b \\b CD RW/RD",$A,$A
(1)  176/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\w \\w \\w \\w CD RW",$A
(1)  177/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\w \\w \\w \\w",$A,$A
(1)  178/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\w \\w \\w \\w CD RD",$A
(1)  179/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\w \\w \\w \\w",$A
(1)  180/FFFFFFFFFFFF1913 :                     ; 		dc.b $A
(1)  181/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\w \\w \\w \\w MARS",$A
(1)  182/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\w \\w \\w \\w",$A
(1)  183/FFFFFFFFFFFF1913 :                     ; 		dc.b 0
(1)  184/FFFFFFFFFFFF1913 :                     ; ; 	else
(1)  185/FFFFFFFFFFFF1913 :                     ; 		dc.b "\\l",0
(1)  186/FFFFFFFFFFFF1913 :                     ; 	endif
(1)  187/FFFFFFFFFFFF1913 : FFFF 9740           		dc.l RAM_Framecount
(1)  188/FFFFFFFFFFFF1917 : FFFF B002           		dc.l Controller_1+on_hold
(1)  189/FFFFFFFFFFFF191B : FFFF B012           		dc.l Controller_2+on_hold
(1)  190/FFFFFFFFFFFF191F :                     ; 	if MARS
(1)  191/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_comm_m
(1)  192/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_comm_s
(1)  193/FFFFFFFFFFFF191F :                     ;
(1)  194/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m
(1)  195/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+2
(1)  196/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+4
(1)  197/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+6
(1)  198/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+8
(1)  199/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+10
(1)  200/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+12
(1)  201/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_m+14
(1)  202/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s
(1)  203/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+2
(1)  204/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+4
(1)  205/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+6
(1)  206/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+8
(1)  207/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+10
(1)  208/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+12
(1)  209/FFFFFFFFFFFF191F :                     ; 		dc.l sysmcd_reg+mcd_dcomm_s+14
(1)  210/FFFFFFFFFFFF191F :                     ;
(1)  211/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm0
(1)  212/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm2
(1)  213/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm4
(1)  214/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm6
(1)  215/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm8
(1)  216/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm10
(1)  217/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm12
(1)  218/FFFFFFFFFFFF191F :                     ; 		dc.l sysmars_reg+comm14
(1)  219/FFFFFFFFFFFF191F :                     		align 2
(1)  220/FFFFFFFFFFFF1920 :                     
(1)  221/FFFFFFFFFFFF1920 :                     ; ====================================================================
(1)  222/FFFFFFFFFFFF1920 :                     
     324/FFFFFFFFFFFF1920 :                     cscrn0_e:
     326/    3A18 :                     		dephase
     331/    3A18 :                     Md_Screen00_e:
     332/    3A18 :                     
     334/    3A18 : (MACRO)             		report "SCREEN 0 code",cscrn0_e-cscrn0_s,MAX_UserCode
     336/    3A18 :                     
     337/    3A18 :                     ; ====================================================================
     338/    3A18 :                     ; --------------------------------------------------------
     339/    3A18 :                     ; GEMA SOUND DRIVER DATA:
     340/    3A18 :                     ; Tracks and Instruments
     341/    3A18 :                     ;
     342/    3A18 :                     ;    MD: Normal ROM area
     343/    3A18 :                     ;   MCD: Loaded to RAM from disc (Z80 CAN read from RAM)
     344/    3A18 :                     ;   32X: At the $880000+ area
     345/    3A18 :                     ; CD32X: Same as CD
     346/    3A18 :                     ;  Pico: N/A (TODO)
     347/    3A18 :                     ;
     348/    3A18 :                     ; DAC samples are stored externally
     349/    3A18 :                     ; depending of the system.
     350/    3A18 :                     ; PWM can be on both ROM and SDRAM
     351/    3A18 :                     ; but to keep cross-compatible with CD/CD32X use
     352/    3A18 :                     ; SDRAM only.
     353/    3A18 :                     ; And keep samples small there to save space.
     354/    3A18 :                     ; --------------------------------------------------------
     355/    3A18 :                     
     359/    3A18 :                     MCD_GEMATRKS:
     361/  883A18 :                     		phase $880000+*
     365/  883A18 :                     gemacd_report:
     366/  883A18 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  883A18 :                     ; ================================================================
(1)    2/  883A18 :                     ; ------------------------------------------------------------
(1)    3/  883A18 :                     ; DATA SECTION
(1)    4/  883A18 :                     ;
(1)    5/  883A18 :                     ; SOUND
(1)    6/  883A18 :                     ; ------------------------------------------------------------
(1)    7/  883A18 :                     
(1)    8/  883A18 :                     ; ticks - %gttttttt
(1)    9/  883A18 :                     ;   loc - 68k pointer
(1)   10/  883A18 :                     ;
(1)   11/  883A18 :                     ; t-Ticks
(1)   12/  883A18 :                     ; g-Use global tempo
(1)   13/  883A18 :                     gemaTrk macro ticks,loc
(1)   14/  883A18 :                     	dc.l ((ticks&$FF)<<24)|loc
(1)   15/  883A18 :                     	endm
(1)   16/  883A18 :                     
(1)   17/  883A18 :                     ; gemaHead
(1)   18/  883A18 :                     ; block point, patt point, ins point
(1)   19/  883A18 :                     ; numof_blocks,numof_patts,numof_ins
(1)   20/  883A18 :                     gemaHead macro blk,pat,ins
(1)   21/  883A18 :                     	dc.l blk
(1)   22/  883A18 :                     	dc.l pat
(1)   23/  883A18 :                     	dc.l ins
(1)   24/  883A18 :                     	endm
(1)   25/  883A18 :                     
(1)   26/  883A18 :                     ; Instrument macros
(1)   27/  883A18 :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   28/  883A18 :                     gInsNull macro
(1)   29/  883A18 :                     	dc.b $00,$00,$00,$00
(1)   30/  883A18 :                     	dc.b $00,$00,$00,$00
(1)   31/  883A18 :                     	endm
(1)   32/  883A18 :                     
(1)   33/  883A18 :                     ; alv: attack level
(1)   34/  883A18 :                     ; atk: attack rate
(1)   35/  883A18 :                     ; slv: sustain
(1)   36/  883A18 :                     ; dky: decay rate (up)
(1)   37/  883A18 :                     ; rrt: release rate (down)
(1)   38/  883A18 :                     ; vib: (TODO)
(1)   39/  883A18 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   40/  883A18 :                     	dc.b $80,pitch,alv,atk
(1)   41/  883A18 :                     	dc.b slv,dky,rrt,vib
(1)   42/  883A18 :                     	endm
(1)   43/  883A18 :                     
(1)   44/  883A18 :                     ; same args as gInsPsg
(1)   45/  883A18 :                     ; only one more argument for the noise type:
(1)   46/  883A18 :                     ; mode: noise mode
(1)   47/  883A18 :                     ;       %tmm
(1)   48/  883A18 :                     ;        t  - Bass(0)|Noise(1)
(1)   49/  883A18 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   50/  883A18 :                     ;
(1)   51/  883A18 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   52/  883A18 :                     	dc.b $90|mode,pitch,alv,atk
(1)   53/  883A18 :                     	dc.b slv,dky,rrt,vib
(1)   54/  883A18 :                     	endm
(1)   55/  883A18 :                     
(1)   56/  883A18 :                     ; 24-bit ROM pointer to FM patch data
(1)   57/  883A18 :                     gInsFm macro pitch,fmins
(1)   58/  883A18 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   59/  883A18 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   60/  883A18 :                     	endm
(1)   61/  883A18 :                     
(1)   62/  883A18 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   63/  883A18 :                     ; are the custom freqs for each operator in this order:
(1)   64/  883A18 :                     ; OP1 OP2 OP3 OP4
(1)   65/  883A18 :                     ;
(1)   66/  883A18 :                     ; NOTE: pitch is useless here...
(1)   67/  883A18 :                     gInsFm3	macro pitch,fmins
(1)   68/  883A18 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   69/  883A18 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   70/  883A18 :                     	endm
(1)   71/  883A18 :                     
(1)   72/  883A18 :                     ; start: Pointer to sample data:
(1)   73/  883A18 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   74/  883A18 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   75/  883A18 :                     ;        dc.b (sound data)	; <-- Then the actual sound data
(1)   76/  883A18 :                     ;
(1)   77/  883A18 :                     ; flags: $00 - No Loop
(1)   78/  883A18 :                     ; 	 $01 - Loop
(1)   79/  883A18 :                     gInsDac	macro pitch,start,flags
(1)   80/  883A18 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   81/  883A18 :                     	dc.b start&$FF,0,0,0
(1)   82/  883A18 :                     	endm
(1)   83/  883A18 :                     
(1)   84/  883A18 :                     ; start: Pointer to sample data:
(1)   85/  883A18 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   86/  883A18 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   87/  883A18 :                     ;        dc.b (data)		; Then the actual sound data
(1)   88/  883A18 :                     ;
(1)   89/  883A18 :                     ; flags: %00SL
(1)   90/  883A18 :                     ;            L - Loop sample No/Yes
(1)   91/  883A18 :                     ;           S  - Sample data is on STEREO
(1)   92/  883A18 :                     gInsPwm	macro pitch,start,flags
(1)   93/  883A18 :                      if MARS
(1)   94/  883A18 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   95/  883A18 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   96/  883A18 :                      else
(1)   97/  883A18 :                     	dc.b $00,$00,$00,$00
(1)   98/  883A18 :                     	dc.b $00,$00,$00,$00
(1)   99/  883A18 :                      endif
(1)  100/  883A18 :                     	endm
(1)  101/  883A18 :                     
(1)  102/  883A18 :                     ; ------------------------------------------------------------
(1)  103/  883A18 :                     
(1)  104/  883A18 :                     	align 2
(1)  105/  883A18 :                     
(1)  106/  883A18 :                     ; ------------------------------------------------------------
(1)  107/  883A18 :                     ; Nikona MAIN track-list
(1)  108/  883A18 :                     ;
(1)  109/  883A18 :                     ; ONLY the ticks can be set here.
(1)  110/  883A18 :                     ; You can change the ticks mid-track using effect A
(1)  111/  883A18 :                     ;
(1)  112/  883A18 :                     ; Add $80 to the ticks value to use the GLOBAL
(1)  113/  883A18 :                     ; sub-beats
(1)  114/  883A18 :                     ;
(1)  115/  883A18 :                     ; To set the sub-beats send the SetBeats command
(1)  116/  883A18 :                     ; BEFORE playing your track:
(1)  117/  883A18 :                     ; 	move.w	#new_beats,d0
(1)  118/  883A18 :                     ; 	bsr	gemaSetBeats
(1)  119/  883A18 :                     ; 	move.w	#track_id,d0
(1)  120/  883A18 :                     ;	bsr	gemaPlayTrack
(1)  121/  883A18 :                     ; ------------------------------------------------------------
(1)  122/  883A18 :                     
(1)  123/  883A18 :                     Gema_MasterList:
(1)  124/  883A18 : (MACRO)             	gemaTrk $80|3,GemaTrk_TEST_2
(1)  124/  883A18 : 8388 3B93                   dc.l (($80|3&$FF)<<24)|GEMATRK_TEST_2
(1)  125/  883A1C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  125/  883A1C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  126/  883A20 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  126/  883A20 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  127/  883A24 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  127/  883A24 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  128/  883A28 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  128/  883A28 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  129/  883A2C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  129/  883A2C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  130/  883A30 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  130/  883A30 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  131/  883A34 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  131/  883A34 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  132/  883A38 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  132/  883A38 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  133/  883A3C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  133/  883A3C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  134/  883A40 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  134/  883A40 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  135/  883A44 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  135/  883A44 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  136/  883A48 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  136/  883A48 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  137/  883A4C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  137/  883A4C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  138/  883A50 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  138/  883A50 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  139/  883A54 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  139/  883A54 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  140/  883A58 :                     
(1)  141/  883A58 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  141/  883A58 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  142/  883A5C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  142/  883A5C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  143/  883A60 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  143/  883A60 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  144/  883A64 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  144/  883A64 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  145/  883A68 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  145/  883A68 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  146/  883A6C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  146/  883A6C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  147/  883A70 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  147/  883A70 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  148/  883A74 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  148/  883A74 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  149/  883A78 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  149/  883A78 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  150/  883A7C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  150/  883A7C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  151/  883A80 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  151/  883A80 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  152/  883A84 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  152/  883A84 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  153/  883A88 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  153/  883A88 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  154/  883A8C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  154/  883A8C : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  155/  883A90 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  155/  883A90 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  156/  883A94 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  156/  883A94 : 0388 3A98                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  157/  883A98 :                     
(1)  158/  883A98 :                     ; ------------------------------------------------------------
(1)  159/  883A98 :                     ; BGM tracks
(1)  160/  883A98 :                     ; ------------------------------------------------------------
(1)  161/  883A98 :                     
(1)  162/  883A98 :                     GemaTrk_TEST_0:
(1)  163/  883A98 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  163/  883A98 : 0088 3AA4                   dc.l .BLK
(1)  163/  883A9C : 0088 3AA7                   dc.l .PAT
(1)  163/  883AA0 : 0088 3B6B                   dc.l .INS
(1)  164/  883AA4 :                     
(1)  165/  883AA4 :                     ; Max. 24 blocks
(1)  166/  883AA4 :                     .blk:
(1)  167/  883AA4 :                     	binclude "sound/tracks/test_blk.bin"
(1)  168/  883AA7 :                     ; Max. 24 patterns
(1)  169/  883AA7 :                     .pat:
(1)  170/  883AA7 :                     	binclude "sound/tracks/test_patt.bin"
(1)  171/  883B6B :                     
(1)  172/  883B6B :                     ; Max. 16 instruments
(1)  173/  883B6B :                     ; Starting from 1.
(1)  174/  883B6B :                     .ins:
(1)  175/  883B6B :                     ; 	gInsDac 0,DacIns_TESTINS,0
(1)  176/  883B6B :                     
(1)  177/  883B6B :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  178/  883B6B :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  179/  883B6B :                     
(1)  180/  883B6B : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$00,0
(1)  180/  883B6B : 8000 0000                   dc.b $80,0,$00,$00
(1)  180/  883B6F : 0000 0000                   dc.b $00,$00,$00,0
(1)  181/  883B73 : (MACRO)             	gInsFm -12,FmIns_Trumpet_2
(1)  181/  883B73 : A0F4 885B                   dc.b $A0,-12,((FMINS_TRUMPET_2>>16)&$FF),((FMINS_TRUMPET_2>>8)&$FF)
(1)  181/  883B77 : 6600 0000                   dc.b FMINS_TRUMPET_2&$FF,$00,$00,$00
(1)  182/  883B7B :                     ; 	gInsPsgN +12,$20,$20,$10,$00,$04,0,%011
(1)  183/  883B7B :                     
(1)  184/  883B7B : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  184/  883B7B : B000 8858                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  184/  883B7F : 0E00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  185/  883B83 : (MACRO)             	gInsDac -12,DacIns_Snare_1,0
(1)  185/  883B83 : C0F4 90B4                   dc.b $C0|0,-12,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  185/  883B87 : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  186/  883B8B : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  186/  883B8B : D1EF 0209                   dc.b $D0|%001,-17,((SMPINS_VCTRBRASS>>24)&$FF),((SMPINS_VCTRBRASS>>16)&$FF)
(1)  186/  883B8F : D00C 0000                   dc.b ((SMPINS_VCTRBRASS>>8)&$FF),SMPINS_VCTRBRASS&$FF,0,0
(1)  187/  883B93 :                     
(1)  188/  883B93 :                     GemaTrk_TEST_2:
(1)  189/  883B93 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  189/  883B93 : 0088 3B9F                   dc.l .BLK
(1)  189/  883B97 : 0088 3BB4                   dc.l .PAT
(1)  189/  883B9B : 0088 57D6                   dc.l .INS
(1)  190/  883B9F :                     .blk:
(1)  191/  883B9F :                     	binclude "sound/tracks/wegot_blk.bin"
(1)  192/  883BB4 :                     	align 2
(1)  193/  883BB4 :                     .pat:
(1)  194/  883BB4 :                     	binclude "sound/tracks/wegot_patt.bin"
(1)  195/  8857D5 :                     	align 2
(1)  196/  8857D6 :                     .ins:
(1)  197/  8857D6 : (MACRO)             	gInsFm 0,FmIns_Synth_plus
(1)  197/  8857D6 : A000 8858                   dc.b $A0,0,((FMINS_SYNTH_PLUS>>16)&$FF),((FMINS_SYNTH_PLUS>>8)&$FF)
(1)  197/  8857DA : C600 0000                   dc.b FMINS_SYNTH_PLUS&$FF,$00,$00,$00
(1)  198/  8857DE : (MACRO)             	gInsFm 0,FmIns_Bass_4
(1)  198/  8857DE : A000 8858                   dc.b $A0,0,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  198/  8857E2 : 8600 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  199/  8857E6 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,0
(1)  199/  8857E6 : C000 90AC                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  199/  8857EA : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  200/  8857EE : (MACRO)             	gInsFm 0,FmIns_Bass_club
(1)  200/  8857EE : A000 8858                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(1)  200/  8857F2 : E600 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(1)  201/  8857F6 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  201/  8857F6 : B000 8858                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  201/  8857FA : 0E00 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  202/  8857FE : (MACRO)             	gInsPsg 0,$10,$04,$20,$04,$02,$00;gInsFm -12,FmIns_Trumpet_carnival;;
(1)  202/  8857FE : 8000 1004                   dc.b $80,0,$10,$04
(1)  202/  885802 : 2004 0200                   dc.b $20,$04,$02,$00
(1)  203/  885806 : (MACRO)             	gInsDac 0,DacIns_wegot_crash,0
(1)  203/  885806 : C000 9080                   dc.b $C0|0,0,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(1)  203/  88580A : 0000 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(1)  204/  88580E :                     
     367/  88580E :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  88580E :                     ; ====================================================================
(1)    2/  88580E :                     ; --------------------------------------------------------
(1)    3/  88580E :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  88580E :                     ;
(1)    5/  88580E :                     ; This must be located at the 68k's 880000 area.
(1)    6/  88580E :                     ;
(1)    7/  88580E :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    8/  88580E :                     ; own instruments/patches
(1)    9/  88580E :                     ; --------------------------------------------------------
(1)   10/  88580E :                     
(1)   11/  88580E :                     ; Notes:
(1)   12/  88580E :                     ;
(1)   13/  88580E :                     ; Savestate FM data is located at: $2478
(1)   14/  88580E :                     ;
(1)   15/  88580E :                     ; Sizes:
(1)   16/  88580E :                     ; Normal FM ins: $20
(1)   17/  88580E :                     ; Special FM ins: $28
(1)   18/  88580E :                     ;
(1)   19/  88580E :                     ; REGISTER FORMAT:
(1)   20/  88580E :                     ; dc.b $30,$34,$38,$3C
(1)   21/  88580E :                     ; dc.b $40,$44,$48,$4C
(1)   22/  88580E :                     ; dc.b $50,$54,$58,$5C
(1)   23/  88580E :                     ; dc.b $60,$64,$68,$6C
(1)   24/  88580E :                     ; dc.b $70,$74,$78,$7C
(1)   25/  88580E :                     ; dc.b $80,$84,$88,$8C
(1)   26/  88580E :                     ; dc.b $90,$94,$98,$9C
(1)   27/  88580E :                     ; dc.b $B0,$B4,$22,$28
(1)   28/  88580E :                     ; ** Extra words for FM3 special:
(1)   29/  88580E :                     ; dc.w OP1,OP2,OP3,OP4
(1)   30/  88580E :                     ;
(1)   31/  88580E :                     ; $22 LFO: %0000evvv
(1)   32/  88580E :                     ; e - Enable
(1)   33/  88580E :                     ; v - Value
(1)   34/  88580E :                     ;
(1)   35/  88580E :                     ; $28 KEYS: %oooo0000
(1)   36/  88580E :                     ; o - Operators 4-1
(1)   37/  88580E :                     
(1)   38/  88580E :                     
(1)   39/  88580E :                     
(1)   40/  88580E :                     ; FM3 Special
(1)   41/  88580E :                     FmIns_Sp_OpenHat:
(1)   42/  88580E :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   43/  885836 :                     FmIns_Sp_ClosedHat:
(1)   44/  885836 :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   45/  88585E :                     FmIns_Sp_Cowbell:
(1)   46/  88585E :                     		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(1)   47/  885886 :                     FmIns_Bass_4:
(1)   48/  885886 :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   49/  8858A6 :                     FmIns_Bass_8:
(1)   50/  8858A6 :                     		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(1)   51/  8858C6 :                     FmIns_Synth_Plus:
(1)   52/  8858C6 :                     		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(1)   53/  8858E6 :                     FmIns_Bass_club:
(1)   54/  8858E6 :                     		binclude "sound/instr/fm/OLD_bass_club.gsx",$2478,$20
(1)   55/  885906 :                     FmIns_Bass_calm:
(1)   56/  885906 :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   57/  885926 :                     FmIns_Trumpet_1:
(1)   58/  885926 :                     		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(1)   59/  885946 :                     FmIns_Trumpet_carnival:
(1)   60/  885946 :                     		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   61/  885966 :                     FmIns_brass_eur:
(1)   62/  885966 :                     		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(1)   63/  885986 :                     FmIns_Bass_Oil:
(1)   64/  885986 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   65/  8859A6 :                     FmIns_Organ_Ito:
(1)   66/  8859A6 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)   67/  8859C6 :                     FmIns_Ding_Baseball:
(1)   68/  8859C6 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)   69/  8859E6 :                     FmIns_DrumKick_gem:
(1)   70/  8859E6 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)   71/  885A06 :                     FmIns_ClosedHat:
(1)   72/  885A06 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)   73/  885A26 :                     FmIns_PianoM1:
(1)   74/  885A26 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   75/  885A46 :                     FmIns_Bass_1:
(1)   76/  885A46 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   77/  885A66 :                     FmIns_Bass_2:
(1)   78/  885A66 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   79/  885A86 :                     FmIns_Bass_donna:
(1)   80/  885A86 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   81/  885AA6 :                     FmIns_Bass_groove:
(1)   82/  885AA6 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   83/  885AC6 :                     FmIns_Bass_groove_2:
(1)   84/  885AC6 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   85/  885AE6 :                     FmIns_Bass_groove_gem:
(1)   86/  885AE6 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   87/  885B06 :                     FmIns_Bass_italo:
(1)   88/  885B06 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   89/  885B26 :                     FmIns_Bass_duck:
(1)   90/  885B26 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   91/  885B46 :                     FmIns_Piano_Aqua:
(1)   92/  885B46 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   93/  885B66 :                     FmIns_Trumpet_2:
(1)   94/  885B66 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)   95/  885B86 :                     FmIns_Trumpet_puy:
(1)   96/  885B86 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)   97/  885BA6 :                     FmIns_Marimba:
(1)   98/  885BA6 :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)   99/  885BC6 :                     FmIns_Ambient_dark:
(1)  100/  885BC6 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  101/  885BE6 :                     FmIns_Ambient_spook:
(1)  102/  885BE6 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  103/  885C06 :                     FmIns_Ambient_3:
(1)  104/  885C06 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  105/  885C26 :                     FmIns_Ding_toy:
(1)  106/  885C26 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  107/  885C46 :                     FmIns_Brass_Puy:
(1)  108/  885C46 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  109/  885C66 :                     FmIns_Flaute_cave:
(1)  110/  885C66 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  111/  885C86 :                     FmIns_Banjo_puy:
(1)  112/  885C86 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  113/  885CA6 :                     FmIns_PSynth_plus:
(1)  114/  885CA6 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  115/  885CC6 :                     FmIns_Ding_1:
(1)  116/  885CC6 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  117/  885CE6 :                     FmIns_Trombone_gem:
(1)  118/  885CE6 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  119/  885D06 :                     FmIns_HBeat_tom:
(1)  120/  885D06 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  121/  885D26 :                     
     368/  885D26 :                     gemacd_report_e:
     370/    5D26 :                     		dephase
     377/    5D26 :                     
     378/    5D26 :                     ; ====================================================================
     379/    5D26 :                     ; ----------------------------------------------------------------
     380/    5D26 :                     ; 68K DATA BANKs
     381/    5D26 :                     ;
     382/    5D26 :                     ; SEGA CD:
     383/    5D26 :                     ; BANKS are stored in WORD-RAM pieces
     384/    5D26 :                     ; limited to 256KB 2M or 128KB 1M/1M
     385/    5D26 :                     ; ** THESE CANNOT BE USED IF USING ASIC STAMPS **
     386/    5D26 :                     ;
     387/    5D26 :                     ; SEGA 32X:
     388/    5D26 :                     ; BANKS are limited to 1MB, only 4 banks can be used
     389/    5D26 :                     ; ----------------------------------------------------------------
     390/    5D26 :                     
     391/    5D26 :                     ; ---------------------------------------------
     392/    5D26 :                     ; BANK 0 DEFAULT
     393/    5D26 :                     ;
     394/    5D26 :                     ; CD/CD32X:
     395/    5D26 :                     ; $200000 (WORD-RAM)
     396/    5D26 :                     ;
     397/    5D26 :                     ; 32X:
     398/    5D26 :                     ; $900000
     399/    5D26 :                     ; ---------------------------------------------
     400/    5D26 :                     
     401/    5D26 :                     MCD_DBANK0:
     403/  905D26 :                     		phase $900000+*				; ** Currently this one only.
     407/  905D26 :                     mdbank0:
     408/  905D26 :                     		include "game/data/md_bank0.asm"	; <-- 68K ONLY bank data
(1)    1/  905D26 :                     ; ====================================================================
(1)    2/  905D26 :                     ; ----------------------------------------------------------------
(1)    3/  905D26 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/  905D26 :                     ; for big stuff like maps, levels, etc.
(1)    5/  905D26 :                     ;
(1)    6/  905D26 :                     ; For graphics use DMA and place your files at
(1)    7/  905D26 :                     ; md_dma.asm (Watch out for the $20000 limit.)
(1)    8/  905D26 :                     ;
(1)    9/  905D26 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/  905D26 :                     ; ----------------------------------------------------------------
(1)   11/  905D26 :                     
(1)   12/  905D26 :                     		include "game/data/m_palettes.asm"	; All 32X palettes will be here.
(2)    1/  905D26 :                     ; ====================================================================
(2)    2/  905D26 :                     ; ----------------------------------------------------------------
(2)    3/  905D26 :                     ; Put your 32X palettes here
(2)    4/  905D26 :                     ;
(2)    5/  905D26 :                     ; These are located on a single 68K $900000+ bank
(2)    6/  905D26 :                     ;
(2)    7/  905D26 :                     ; Labels MUST be aligned by 2
(2)    8/  905D26 :                     ; ----------------------------------------------------------------
(2)    9/  905D26 :                     
(2)   10/  905D26 :                     		align 2
(2)   11/  905D26 :                     PalMars_TEST:
(2)   12/  905D26 :                     		binclude "game/data/TESTS/mars_pal.bin"
(2)   13/  905F26 :                     		align 2
(2)   14/  905F26 :                     
(2)   15/  905F26 :                     ; PalMars_MarsCity:
(2)   16/  905F26 :                     ; 		binclude "game/data/maps/3D/mcity/mtrl/marscity_pal.bin"
(2)   17/  905F26 :                     ; 		align 2
(2)   18/  905F26 :                     ;
(2)   19/  905F26 :                     ; MapPal_M:	binclude "game/data/maps/2D/level0/m_pal.bin"
(2)   20/  905F26 :                     ; 		align 2
(2)   21/  905F26 :                     ; TestSupSpr_Pal:
(2)   22/  905F26 :                     ; 		binclude "game/data/sprites/mars/nicole/sprites_pal.bin"
(2)   23/  905F26 :                     ; 		align 2
(2)   24/  905F26 :                     
(1)   13/  905F26 :                     
(1)   14/  905F26 :                     PalMd_TEST:	binclude "game/data/TESTS/md_pal.bin"
(1)   15/  905F46 :                     		align 2
(1)   16/  905F46 :                     MapMd_TEST:	binclude "game/data/TESTS/md_map.bin"
(1)   17/  9068A6 :                     		align 2
(1)   18/  9068A6 :                     
(1)   19/  9068A6 :                     ; 		align 2
(1)   20/  9068A6 :                     ; Pal_level0:	binclude "game/data/maps/2D/level0/pal.bin"
(1)   21/  9068A6 :                     ; 		align 2
(1)   22/  9068A6 :                     ; Pal_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_pal.bin"
(1)   23/  9068A6 :                     ; 		align 2
(1)   24/  9068A6 :                     ; Map_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_map.bin"
(1)   25/  9068A6 :                     ; 		align 2
(1)   26/  9068A6 :                     ;
(1)   27/  9068A6 :                     ; ; ----------------------------------------------------------------
(1)   28/  9068A6 :                     ;
(1)   29/  9068A6 :                     ; 		align 2
(1)   30/  9068A6 :                     ; MapHead_0:	binclude "game/data/maps/2D/level0/head.bin"
(1)   31/  9068A6 :                     ; MapBlk_0:	binclude "game/data/maps/2D/level0/blocks.bin"
(1)   32/  9068A6 :                     ; 		align 2
(1)   33/  9068A6 :                     ; MapFgL_0:	binclude "game/data/maps/2D/level0/fg_low.bin"
(1)   34/  9068A6 :                     ; 		align 2
(1)   35/  9068A6 :                     ; MapFgH_0:	binclude "game/data/maps/2D/level0/fg_hi.bin"
(1)   36/  9068A6 :                     ; 		align 2
(1)   37/  9068A6 :                     ; MapFgC_0:	binclude "game/data/maps/2D/level0/fg_col.bin"
(1)   38/  9068A6 :                     ; 		align 2
(1)   39/  9068A6 :                     ; MapBgL_0:	binclude "game/data/maps/2D/level0/bg_low.bin"
(1)   40/  9068A6 :                     ; 		align 2
(1)   41/  9068A6 :                     ; MapBgH_0:	binclude "game/data/maps/2D/level0/bg_hi.bin"
(1)   42/  9068A6 :                     ; 		align 2
(1)   43/  9068A6 :                     ;
(1)   44/  9068A6 :                     ; ; ----------------------------------------------------------------
(1)   45/  9068A6 :                     ; ; 68k data for 32X maps go here:
(1)   46/  9068A6 :                     ; ; Headers and Collision
(1)   47/  9068A6 :                     ;
(1)   48/  9068A6 :                     ; 		align 2
(1)   49/  9068A6 :                     ; MapHead_M:	binclude "game/data/maps/2D/level0/m_head.bin"
(1)   50/  9068A6 :                     ; 		align 2
(1)   51/  9068A6 :                     ; MapCol_M:	binclude "game/data/maps/2D/level0/m_col.bin"
(1)   52/  9068A6 :                     ; 		align 2
(1)   53/  9068A6 :                     ;
(1)   54/  9068A6 :                     ; ; ----------------------------------------------------------------
(1)   55/  9068A6 :                     ;
(1)   56/  9068A6 :                     ; MapCamera_0:
(1)   57/  9068A6 :                     ; 		binclude "game/data/maps/3D/mcity/anim/mcity_anim.bin"
(1)   58/  9068A6 :                     ; 		align 4
(1)   59/  9068A6 :                     
     409/  9068A6 :                     mdbank0_e:
     410/  9068A6 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/  9068A6 :                     ; ====================================================================
(1)    2/  9068A6 :                     ; --------------------------------------------------------
(1)    3/  9068A6 :                     ; GEMA/Nikona DAC instruments "digital"
(1)    4/  9068A6 :                     ;
(1)    5/  9068A6 :                     ; This must be located at the 68k's 900000 area.
(1)    6/  9068A6 :                     ; ** 68K BANK 0 only **
(1)    7/  9068A6 :                     ;
(1)    8/  9068A6 :                     ; BASE Samplerate is at 16000hz
(1)    9/  9068A6 :                     ; --------------------------------------------------------
(1)   10/  9068A6 :                     
(1)   11/  9068A6 :                     ; Special sample data macro
(1)   12/  9068A6 :                     gSmpHead macro len,loop
(1)   13/  9068A6 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   14/  9068A6 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   15/  9068A6 :                     	endm
(1)   16/  9068A6 :                     
(1)   17/  9068A6 :                     	align $8000	; <-- just to be safe.
(1)   18/  908000 :                     DacIns_wegot_crash:
(1)   19/  908000 : (MACRO)             	gSmpHead .end-.start,0
(1)   19/  908000 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/  908003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/  908006 :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   21/  90ACCA :                     .end:
(1)   22/  90ACCA :                     DacIns_wegot_kick:
(1)   23/  90ACCA : (MACRO)             	gSmpHead .end-.start,0
(1)   23/  90ACCA : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   23/  90ACCD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/  90ACD0 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   25/  90B444 :                     .end:
(1)   26/  90B444 :                     DacIns_Snare_1:
(1)   27/  90B444 : (MACRO)             	gSmpHead .end-.start,0
(1)   27/  90B444 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   27/  90B447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/  90B44A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   29/  90C56E :                     .end:
(1)   30/  90C56E :                     
(1)   31/  90C56E :                     DacIns_TESTINS:
(1)   32/  90C56E : (MACRO)             	gSmpHead .end-.start,0
(1)   32/  90C56E : 00E7 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   32/  90C571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/  90C574 :                     .start:	binclude "sound/instr/smpl/test.wav",$2C
(1)   34/  91AC74 :                     .end:
(1)   35/  91AC74 :                     
(1)   36/  91AC74 :                     ; TEST SAMPLE
(1)   37/  91AC74 :                     TEST_WAVE:
(1)   38/  91AC74 :                     	binclude "sound/instr/smpl/test.wav",$2C
(1)   39/  929374 :                     TEST_WAVE_E:
(1)   40/  929374 :                     	align 2
(1)   41/  929374 :                     
     411/  929374 :                     ; 	if MARS
     412/  929374 :                     ; 		org $100000-4				; Fill this bank and
     413/  929374 :                     ; 		dc.b "BNK0"				; add a tag at the end
     414/  929374 :                     ; 		dephase
     418/  929374 :                     
     420/  929374 :                     mdbank0_cd_e:
     421/   29374 :                     		dephase
     422/   29374 :                     		align $800
     423/   29800 :                     MCD_DBANK0_e:
     425/   29800 :                     
     427/   29800 : (MACRO)             		report "68K DEFAULT BANK (900000)",mdbank0_e-mdbank0,$100000
     431/   29800 :                     
     432/   29800 :                     ; ---------------------------------------------
     433/   29800 :                     ; BANK 1
     434/   29800 :                     ; ---------------------------------------------
     435/   29800 :                     
     436/   29800 :                     ; 		phase $900000
     437/   29800 :                     ; 		include "game/data/md_bank1.asm"
     438/   29800 :                     ; 		dephase
     439/   29800 :                     ; 		org $200000-4
     440/   29800 :                     ; 		dc.b "BNK1"
     441/   29800 :                     
     442/   29800 :                     ; ---------------------------------------------
     443/   29800 :                     ; BANK 2
     444/   29800 :                     ; ---------------------------------------------
     445/   29800 :                     
     446/   29800 :                     ; 		phase $900000
     447/   29800 :                     ; 		include "game/data/md_bank2.asm"
     448/   29800 :                     ; 		dephase
     449/   29800 :                     ; 		org $300000-4
     450/   29800 :                     ; 		dc.b "BNK2"
     451/   29800 :                     
     452/   29800 :                     ; ---------------------------------------------
     453/   29800 :                     ; BANK 3
     454/   29800 :                     ; ---------------------------------------------
     455/   29800 :                     
     456/   29800 :                     ; 		phase $900000
     457/   29800 :                     ; 		include "game/data/md_bank3.asm"
     458/   29800 :                     ; 		dephase
     459/   29800 :                     ; 		org $400000-4
     460/   29800 :                     ; 		dc.b "BNK3"
     461/   29800 :                     
     462/   29800 :                     ; ====================================================================
     463/   29800 :                     ; ----------------------------------------------------------------
     464/   29800 :                     ; 32X Cartridge DMA data: Requires RV bit set to 1, BANK-free
     465/   29800 :                     ; ----------------------------------------------------------------
     466/   29800 :                     
     467/   29800 :                     		align $8000
     469/   30000 :                     		include "game/data/md_dma.asm"
(1)    1/   30000 :                     ; ====================================================================
(1)    2/   30000 :                     ; ----------------------------------------------------------------
(1)    3/   30000 :                     ; DMA ROM-DATA Transfer section
(1)    4/   30000 :                     ; 
(1)    5/   30000 :                     ; RV bit must be enabled to read from here
(1)    6/   30000 :                     ; ----------------------------------------------------------------
(1)    7/   30000 :                     
(1)    9/   30000 :                     		align $8000
(1)   11/   30000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   12/   30C00 :                     ASCII_FONT_e:
(1)   13/   30C00 :                     
(1)   14/   30C00 :                     ; 	if MCD|MARSCD=0
(1)   15/   30C00 :                     ; 		align $8000
(1)   16/   30C00 :                     ; 	endif
(1)   17/   30C00 :                     ArtMd_TEST:	binclude "game/data/TESTS/md_art.bin"
(1)   18/   39B00 :                     ArtMd_TEST_e:
(1)   19/   39B00 :                     		align 2
(1)   20/   39B00 :                     
(1)   21/   39B00 :                     
(1)   22/   39B00 :                     
(1)   23/   39B00 :                     
(1)   24/   39B00 :                     
     471/   39B00 :                     
     472/   39B00 :                     ; ====================================================================
     473/   39B00 :                     ; ----------------------------------------------------------------
     474/   39B00 :                     ; 32X ONLY:
     475/   39B00 :                     ;
     476/   39B00 :                     ; SH2 code and ROM data
     477/   39B00 :                     ; ----------------------------------------------------------------
     478/   39B00 :                     
     482/   39B00 :                     		align 4
     484/   39B00 :                     MARS_RAMDATA:
     486/   39B00 :                     		include "system/mars/code.asm"
(1)    1/   39B00 :                     ; ====================================================================
(1)    2/   39B00 :                     ; ----------------------------------------------------------------
(1)    3/   39B00 :                     ; MARS SH2 SDRAM section, shared for both CPUs
(1)    4/   39B00 :                     ; ----------------------------------------------------------------
(1)    5/   39B00 :                     
(1)    6/   39B00 :                     ; *************************************************
(1)    7/   39B00 :                     ; comm ports:
(1)    8/   39B00 :                     ;
(1)    9/   39B00 :                     ; comm0-comm7  - ** FREE ***
(1)   10/   39B00 :                     ; comm8-comm11 - Used by Z80 for getting it's data
(1)   11/   39B00 :                     ;                packets
(1)   12/   39B00 :                     ; comm12       - Master CPU control
(1)   13/   39B00 :                     ; comm14       - Slave CPU control
(1)   14/   39B00 :                     ; *************************************************
(1)   15/   39B00 :                     
(1)   16/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   17/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   18/ 6000000 :                     
(1)   19/ 6000000 :                     ; ; CPU METER MACRO
(1)   20/ 6000000 :                     ; testme macro color
(1)   21/ 6000000 :                     ; 		mov	#color,r1
(1)   22/ 6000000 :                     ; 		mov	#_vdpreg,r2
(1)   23/ 6000000 :                     ; 		mov	#_vdpreg+bitmapmd,r3
(1)   24/ 6000000 :                     ; -		mov.b	@(vdpsts,r2),r0
(1)   25/ 6000000 :                     ; 		tst	#HBLK,r0
(1)   26/ 6000000 :                     ; 		bt	-
(1)   27/ 6000000 :                     ; 		mov.b	r1,@r3
(1)   28/ 6000000 :                     ; 	endm
(1)   29/ 6000000 :                     
(1)   30/ 6000000 :                     ; ====================================================================
(1)   31/ 6000000 :                     ; ----------------------------------------------------------------
(1)   32/ 6000000 :                     ; Settings
(1)   33/ 6000000 :                     ; ----------------------------------------------------------------
(1)   34/ 6000000 :                     
(1)   35/ 6000000 : =$1                 SH2_DEBUG	equ 1			; Set to 1 too see if CPUs are active using comm counters (0 and 1)
(1)   36/ 6000000 : =$6040000           STACK_MSTR	equ CS3|$40000
(1)   37/ 6000000 : =$603F000           STACK_SLV	equ CS3|$3F000
(1)   38/ 6000000 :                     
(1)   39/ 6000000 :                     ; ====================================================================
(1)   40/ 6000000 :                     ; ----------------------------------------------------------------
(1)   41/ 6000000 :                     ; MARS GLOBAL gbr variables for both SH2
(1)   42/ 6000000 :                     ; ----------------------------------------------------------------
(1)   43/ 6000000 :                     
(1)   44/ 6000000 :                     ; ====================================================================
(1)   45/ 6000000 :                     ; ----------------------------------------------------------------
(1)   46/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   47/ 6000000 :                     ; ----------------------------------------------------------------
(1)   48/ 6000000 :                     
(1)   49/ 6000000 :                     		align 4
(1)   50/ 6000000 :                     SH2_Master:
(1)   51/ 6000000 : 0600 0710 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
(1)   52/ 6000008 : 0600 0710 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
(1)   53/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   54/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   55/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   56/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   57/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   58/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   59/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   60/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   61/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   62/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   63/ 6000058 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   64/ 600007C : 0000 0000           		dc.l 0
(1)   65/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   66/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   67/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   97/ 6000100 : 0600 0250            		dc.l master_irq		; Level 1 IRQ
(1)   98/ 6000104 : 0600 0250           		dc.l master_irq		; Level 2 & 3 IRQ
(1)   99/ 6000108 : 0600 0250           		dc.l master_irq		; Level 4 & 5 IRQ
(1)  100/ 600010C : 0600 0250           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  101/ 6000110 : 0600 0250           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  102/ 6000114 : 0600 0250           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  103/ 6000118 : 0600 0250           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  104/ 600011C : 0600 0250           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  105/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  106/ 6000120 : 0600 0250           		dc.l master_irq		; Watchdog (custom)
(1)  107/ 6000124 : 0600 0250           		dc.l master_irq		; DMA
(1)  108/ 6000128 :                     
(1)  109/ 6000128 :                     ; ====================================================================
(1)  110/ 6000128 :                     ; ----------------------------------------------------------------
(1)  111/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  112/ 6000128 :                     ; ----------------------------------------------------------------
(1)  113/ 6000128 :                     
(1)  114/ 6000128 :                     		align 4
(1)  115/ 6000128 :                     SH2_Slave:
(1)  116/ 6000128 : 0600 0874 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
(1)  117/ 6000130 : 0600 0874 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
(1)  118/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  119/ 600013C : 0000 0000           		dc.l 0				; reserved
(1)  120/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  121/ 6000144 : 2010 0400           		dc.l $20100400			; reserved
(1)  122/ 6000148 : 2010 0420           		dc.l $20100420			; reserved
(1)  123/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  124/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  125/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  126/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  127/ 600015C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  128/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  129/ 60001A4 : 0000 0000           		dc.l 0
(1)  130/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  131/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  132/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  162/ 6000228 : 0600 0278            		dc.l slave_irq		; Level 1 IRQ
(1)  163/ 600022C : 0600 0278           		dc.l slave_irq		; Level 2 & 3 IRQ
(1)  164/ 6000230 : 0600 0278           		dc.l slave_irq		; Level 4 & 5 IRQ
(1)  165/ 6000234 : 0600 0278           		dc.l slave_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  166/ 6000238 : 0600 0278           		dc.l slave_irq		; Level 8 & 9 IRQ: Command interupt
(1)  167/ 600023C : 0600 0278           		dc.l slave_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  168/ 6000240 : 0600 0278           		dc.l slave_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  169/ 6000244 : 0600 0278           		dc.l slave_irq		; Level 14 & 15 IRQ: Reset Button
(1)  170/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  171/ 6000248 : 0600 0278           		dc.l slave_irq		; Watchdog
(1)  172/ 600024C : 0600 0278           		dc.l slave_irq		; DMA
(1)  173/ 6000250 :                     
(1)  174/ 6000250 :                     ; ====================================================================
(1)  175/ 6000250 :                     ; ----------------------------------------------------------------
(1)  176/ 6000250 :                     ; IRQ
(1)  177/ 6000250 :                     ;
(1)  178/ 6000250 :                     ; r0-r1 are saved
(1)  179/ 6000250 :                     ;
(1)  180/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  181/ 6000250 :                     ; ----------------------------------------------------------------
(1)  182/ 6000250 :                     
(1)  183/ 6000250 :                     		align 4
(1)  184/ 6000250 :                     master_irq:
(1)  185/ 6000250 : 2F06                		mov.l	r0,@-r15
(1)  186/ 6000252 : 2F16                		mov.l	r1,@-r15
(1)  187/ 6000254 : 4F22                		sts.l	pr,@-r15
(1)  188/ 6000256 : 0002                		stc	sr,r0
(1)  189/ 6000258 : 4009                		shlr2	r0
(1)  190/ 600025A : C93C                		and	#$3C,r0
(1)  191/ 600025C : 6103                		mov	r0,r1
(1)  192/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  193/ 6000260 : 600C                		extu.b	r0,r0
(1)  194/ 6000262 : 400E                		ldc	r0,sr
(1)  195/ 6000264 : C70E                		mova	int_m_list,r0
(1)  196/ 6000266 : 301C                		add	r1,r0
(1)  197/ 6000268 : 6102                		mov	@r0,r1
(1)  198/ 600026A : 410B                		jsr	@r1
(1)  199/ 600026C : 0009                		nop
(1)  200/ 600026E : 4F26                		lds.l	@r15+,pr
(1)  201/ 6000270 : 61F6                		mov.l	@r15+,r1
(1)  202/ 6000272 : 60F6                		mov.l	@r15+,r0
(1)  203/ 6000274 : 002B                		rte
(1)  204/ 6000276 : 0009                		nop
(1)  205/ 6000278 :                     		align 4
(1)  206/ 6000278 :                     
(1)  207/ 6000278 :                     ; ====================================================================
(1)  208/ 6000278 :                     
(1)  209/ 6000278 :                     slave_irq:
(1)  210/ 6000278 : 2F06                		mov.l	r0,@-r15
(1)  211/ 600027A : 2F16                		mov.l	r1,@-r15
(1)  212/ 600027C : 4F22                		sts.l	pr,@-r15
(1)  213/ 600027E : 0002                		stc	sr,r0
(1)  214/ 6000280 : 4009                		shlr2	r0
(1)  215/ 6000282 : C93C                		and	#$3C,r0
(1)  216/ 6000284 : 6103                		mov	r0,r1
(1)  217/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  218/ 6000288 : 600C                		extu.b	r0,r0
(1)  219/ 600028A : 400E                		ldc	r0,sr
(1)  220/ 600028C : C714                		mova	int_s_list,r0
(1)  221/ 600028E : 301C                		add	r1,r0
(1)  222/ 6000290 : 6102                		mov	@r0,r1
(1)  223/ 6000292 : 410B                		jsr	@r1
(1)  224/ 6000294 : 0009                		nop
(1)  225/ 6000296 : 4F26                		lds.l	@r15+,pr
(1)  226/ 6000298 : 61F6                		mov.l	@r15+,r1
(1)  227/ 600029A : 60F6                		mov.l	@r15+,r0
(1)  228/ 600029C : 002B                		rte
(1)  229/ 600029E : 0009                		nop
(1)  230/ 60002A0 :                     		align 4
(1)  231/ 60002A0 :                     
(1)  232/ 60002A0 :                     ; ====================================================================
(1)  233/ 60002A0 :                     ; ------------------------------------------------
(1)  234/ 60002A0 :                     ; irq list
(1)  235/ 60002A0 :                     ; ------------------------------------------------
(1)  236/ 60002A0 :                     
(1)  237/ 60002A0 :                     		align 4
(1)  238/ 60002A0 :                     ;				  Level:
(1)  239/ 60002A0 :                     int_m_list:
(1)  240/ 60002A0 : 0600 0380           		dc.l m_irq_bad	; 0
(1)  241/ 60002A4 : 0600 0380           		dc.l m_irq_bad	; 1
(1)  242/ 60002A8 : 0600 0380           		dc.l m_irq_bad	; 2
(1)  243/ 60002AC : C000 0000           		dc.l $C0000000	; 3 Watchdog (TOP code on Cache)
(1)  244/ 60002B0 : 0600 0380           		dc.l m_irq_bad	; 4
(1)  245/ 60002B4 : 0600 0470           		dc.l m_irq_dma	; 5 DMA exit
(1)  246/ 60002B8 : 0600 0384           		dc.l m_irq_pwm	; 6
(1)  247/ 60002BC : 0600 0384           		dc.l m_irq_pwm	; 7
(1)  248/ 60002C0 : 0600 039C           		dc.l m_irq_cmd	; 8
(1)  249/ 60002C4 : 0600 039C           		dc.l m_irq_cmd	; 9
(1)  250/ 60002C8 : 0600 03E8           		dc.l m_irq_h	; A
(1)  251/ 60002CC : 0600 03E8           		dc.l m_irq_h	; B
(1)  252/ 60002D0 : 0600 0404           		dc.l m_irq_v	; C
(1)  253/ 60002D4 : 0600 0404           		dc.l m_irq_v	; D
(1)  254/ 60002D8 : 0600 0420           		dc.l m_irq_vres	; E
(1)  255/ 60002DC : 0600 0420           		dc.l m_irq_vres	; F
(1)  256/ 60002E0 :                     int_s_list:
(1)  257/ 60002E0 : 0600 04BC           		dc.l s_irq_bad	; 0
(1)  258/ 60002E4 : 0600 04BC           		dc.l s_irq_bad	; 1
(1)  259/ 60002E8 : 0600 04BC           		dc.l s_irq_bad	; 2
(1)  260/ 60002EC : C000 0000           		dc.l $C0000000	; 3 Watchdog (TOP code on Cache)
(1)  261/ 60002F0 : 0600 04BC           		dc.l s_irq_bad	; 4
(1)  262/ 60002F4 : 0600 05A8           		dc.l s_irq_dma	; 5 DMA exit
(1)  263/ 60002F8 : 0600 04C0           		dc.l s_irq_pwm	; 6
(1)  264/ 60002FC : 0600 04C0           		dc.l s_irq_pwm	; 7
(1)  265/ 6000300 : 0600 04DC           		dc.l s_irq_cmd	; 8
(1)  266/ 6000304 : 0600 04DC           		dc.l s_irq_cmd	; 9
(1)  267/ 6000308 : 0600 0524           		dc.l s_irq_h	; A
(1)  268/ 600030C : 0600 0524           		dc.l s_irq_h	; B
(1)  269/ 6000310 : 0600 0540           		dc.l s_irq_v	; C
(1)  270/ 6000314 : 0600 0540           		dc.l s_irq_v	; D
(1)  271/ 6000318 : 0600 055C           		dc.l s_irq_vres	; E
(1)  272/ 600031C : 0600 055C           		dc.l s_irq_vres	; F
(1)  273/ 6000320 :                     
(1)  274/ 6000320 :                     ; ====================================================================
(1)  275/ 6000320 :                     ; ----------------------------------------------------------------
(1)  276/ 6000320 :                     ; Error handler
(1)  277/ 6000320 :                     ; ----------------------------------------------------------------
(1)  278/ 6000320 :                     
(1)  279/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  280/ 6000320 :                     ;
(1)  281/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  282/ 6000320 :                     ; comm4: PC counter
(1)  283/ 6000320 :                     ;
(1)  284/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  285/ 6000320 :                     ;        $00 - Master
(1)  286/ 6000320 :                     ;        $01 - Slave
(1)  287/ 6000320 :                     ;
(1)  288/ 6000320 :                     ; CODE | Error type:
(1)  289/ 6000320 :                     ;	 $00: Unknown error
(1)  290/ 6000320 :                     ;	 $01: Illegal instruction
(1)  291/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  292/ 6000320 :                     ;	 $03: Address error
(1)  293/ 6000320 :                     ;	 $04: DMA error
(1)  294/ 6000320 :                     ;	 $05: NMI vector
(1)  295/ 6000320 :                     ;	 $06: User break
(1)  296/ 6000320 :                     
(1)  297/ 6000320 :                     SH2_M_Error:
(1)  298/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  299/ 6000322 : E000                		mov	#0,r0
(1)  300/ 6000324 :                     SH2_M_ErrIllg:
(1)  301/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  302/ 6000326 : E001                		mov	#1,r0
(1)  303/ 6000328 :                     SH2_M_ErrInvl:
(1)  304/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  305/ 600032A : E002                		mov	#2,r0
(1)  306/ 600032C :                     SH2_M_ErrAddr:
(1)  307/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  308/ 600032E : E003                		mov	#3,r0
(1)  309/ 6000330 :                     SH2_M_ErrDma:
(1)  310/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  311/ 6000332 : E004                		mov	#4,r0
(1)  312/ 6000334 :                     SH2_M_ErrNmi:
(1)  313/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  314/ 6000336 : E005                		mov	#5,r0
(1)  315/ 6000338 :                     SH2_M_ErrUser:
(1)  316/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  317/ 600033A : E006                		mov	#6,r0
(1)  318/ 600033C :                     ; r0 - value
(1)  319/ 600033C :                     SH2_M_ErrCode:
(1)  320/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  321/ 600033E : 2101                		mov.w	r0,@r1
(1)  322/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  323/ 6000342 : 60F2                		mov	@r15,r0
(1)  324/ 6000344 : 2102                		mov	r0,@r1
(1)  325/ 6000346 : AFFE                		bra	*
(1)  326/ 6000348 : 0009                		nop
(1)  327/ 600034A :                     		align 4
(1)  328/ 600034C :                     
(1)  329/ 600034C :                     ; ----------------------------------------------------
(1)  330/ 600034C :                     
(1)  331/ 600034C :                     SH2_S_Error:
(1)  332/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  333/ 600034E : E000                		mov	#0,r0
(1)  334/ 6000350 :                     SH2_S_ErrIllg:
(1)  335/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  336/ 6000352 : E0FF                		mov	#-1,r0
(1)  337/ 6000354 :                     SH2_S_ErrInvl:
(1)  338/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  339/ 6000356 : E0FE                		mov	#-2,r0
(1)  340/ 6000358 :                     SH2_S_ErrAddr:
(1)  341/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  342/ 600035A : E0FD                		mov	#-3,r0
(1)  343/ 600035C :                     SH2_S_ErrDma:
(1)  344/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  345/ 600035E : E0FC                		mov	#-4,r0
(1)  346/ 6000360 :                     SH2_S_ErrNmi:
(1)  347/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  348/ 6000362 : E0FB                		mov	#-5,r0
(1)  349/ 6000364 :                     SH2_S_ErrUser:
(1)  350/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  351/ 6000366 : E0FA                		mov	#-6,r0
(1)  352/ 6000368 :                     ; r0 - value
(1)  353/ 6000368 :                     SH2_S_ErrCode:
(1)  354/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  355/ 600036A : 2101                		mov.w	r0,@r1
(1)  356/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  357/ 600036E : 60F2                		mov	@r15,r0
(1)  358/ 6000370 : 2102                		mov	r0,@r1
(1)  359/ 6000372 : AFFE                		bra	*
(1)  360/ 6000374 : 0009                		nop
(1)  361/ 6000376 :                     		align 4
(1)  362/ 6000378 : 2000 4022 2000 4024 		ltorg
(1)  363/ 6000380 :                     
(1)  364/ 6000380 :                     ; ====================================================================
(1)  365/ 6000380 :                     ; ----------------------------------------------------------------
(1)  366/ 6000380 :                     ; Interrupts
(1)  367/ 6000380 :                     ; ----------------------------------------------------------------
(1)  368/ 6000380 :                     
(1)  369/ 6000380 :                     ; =================================================================
(1)  370/ 6000380 :                     ; ------------------------------------------------
(1)  371/ 6000380 :                     ; Master | Unused interrupt
(1)  372/ 6000380 :                     ; ------------------------------------------------
(1)  373/ 6000380 :                     
(1)  374/ 6000380 :                     		align 4
(1)  375/ 6000380 :                     m_irq_bad:
(1)  376/ 6000380 : 000B                		rts
(1)  377/ 6000382 : 0009                		nop
(1)  378/ 6000384 :                     		align 4
(1)  379/ 6000384 :                     
(1)  380/ 6000384 :                     ; =================================================================
(1)  381/ 6000384 :                     ; ------------------------------------------------
(1)  382/ 6000384 :                     ; Master | PWM Interrupt
(1)  383/ 6000384 :                     ; ------------------------------------------------
(1)  384/ 6000384 :                     
(1)  385/ 6000384 :                     m_irq_pwm:
(1)  386/ 6000384 : 9196                		mov	#_FRT,r1
(1)  387/ 6000386 : 8417                		mov.b	@(7,r1),r0
(1)  388/ 6000388 : CA02                		xor	#2,r0
(1)  389/ 600038A : 8017                		mov.b	r0,@(7,r1)
(1)  390/ 600038C : D13F                		mov	#_sysreg+pwmintclr,r1
(1)  391/ 600038E : 2101                		mov.w	r0,@r1
(1)  392/ 6000390 : 0009                		nop
(1)  393/ 6000392 : 0009                		nop
(1)  394/ 6000394 : 0009                		nop
(1)  395/ 6000396 : 0009                		nop
(1)  396/ 6000398 : 000B                		rts
(1)  397/ 600039A : 0009                		nop
(1)  398/ 600039C :                     		align 4
(1)  399/ 600039C :                     
(1)  400/ 600039C :                     ; =================================================================
(1)  401/ 600039C :                     ; ------------------------------------------------
(1)  402/ 600039C :                     ; Master | CMD Interrupt
(1)  403/ 600039C :                     ; ------------------------------------------------
(1)  404/ 600039C :                     
(1)  405/ 600039C :                     m_irq_cmd:
(1)  406/ 600039C : 918A                		mov	#_FRT,r1
(1)  407/ 600039E : 8417                		mov.b	@(7,r1),r0
(1)  408/ 60003A0 : CA02                		xor	#2,r0
(1)  409/ 60003A2 : 8017                		mov.b	r0,@(7,r1)
(1)  410/ 60003A4 : D13A                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  411/ 60003A6 : 2101                		mov.w	r0,@r1
(1)  412/ 60003A8 : 2F26                		mov	r2,@-r15
(1)  413/ 60003AA : 2F36                		mov	r3,@-r15
(1)  414/ 60003AC : 2F46                		mov	r4,@-r15
(1)  415/ 60003AE : D439                		mov	#_sysreg,r4		; r4 - sysreg base
(1)  416/ 60003B0 : E380                		mov	#_DMASOURCE0,r3		; r3 - DMA base register
(1)  417/ 60003B2 : D239                		mov	#_sysreg+comm12,r2	; r2 - comm to write the signal
(1)  418/ 60003B4 : D139                		mov	#_sysreg+dreqfifo,r1	; r1 - Source point: DREQ FIFO
(1)  419/ 60003B6 :                     ; 		mov	#0,r0			; _DMAOPERATION = 0
(1)  420/ 60003B6 :                     ; 		mov	r0,@($30,r3)
(1)  421/ 60003B6 : 907E                		mov	#%0100010011100000,r0	; Transfer mode + DMA enable OFF
(1)  422/ 60003B8 : 1303                		mov	r0,@($C,r3)
(1)  423/ 60003BA :                     ; 		mov	#RAM_Mars_DreqBuff_0,r0
(1)  424/ 60003BA : C602                		mov	@(marsGbl_DmaWrite,gbr),r0
(1)  425/ 60003BC : 1301                		mov	r0,@(4,r3)		; Destination
(1)  426/ 60003BE : 8548                		mov.w	@(dreqlen,r4),r0	; NOTE: NO size check, be careful.
(1)  427/ 60003C0 : 600D                		extu.w	r0,r0
(1)  428/ 60003C2 : 1302                		mov	r0,@(8,r3)		; Length (set by 68k)
(1)  429/ 60003C4 : 2312                		mov	r1,@r3			; Source
(1)  430/ 60003C6 : 9077                		mov	#%0100010011100101,r0	; Transfer mode + DMA enable + Use DMA interrupt
(1)  431/ 60003C8 : 1303                		mov	r0,@($C,r3)		; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  432/ 60003CA : E001                		mov	#1,r0			; _DMAOPERATION = 1
(1)  433/ 60003CC : 130C                		mov	r0,@($30,r3)
(1)  434/ 60003CE : 6020                		mov.b	@r2,r0			; Set PASS bit to Genesis side.
(1)  435/ 60003D0 : CB40                		or	#%01000000,r0
(1)  436/ 60003D2 : 2200                		mov.b	r0,@r2
(1)  437/ 60003D4 : 64F6                		mov	@r15+,r4
(1)  438/ 60003D6 : 63F6                		mov	@r15+,r3
(1)  439/ 60003D8 : 62F6                		mov	@r15+,r2
(1)  440/ 60003DA : 0009                		nop
(1)  441/ 60003DC : 0009                		nop
(1)  442/ 60003DE : 0009                		nop
(1)  443/ 60003E0 : 0009                		nop
(1)  444/ 60003E2 : 0009                		nop
(1)  445/ 60003E4 : 000B                		rts
(1)  446/ 60003E6 : 0009                		nop
(1)  447/ 60003E8 :                     		align 4
(1)  448/ 60003E8 :                     
(1)  449/ 60003E8 :                     ; =================================================================
(1)  450/ 60003E8 :                     ; ------------------------------------------------
(1)  451/ 60003E8 :                     ; Master | HBlank
(1)  452/ 60003E8 :                     ; ------------------------------------------------
(1)  453/ 60003E8 :                     
(1)  454/ 60003E8 :                     m_irq_h:
(1)  455/ 60003E8 : 9164                		mov	#_FRT,r1
(1)  456/ 60003EA : 8417                		mov.b	@(7,r1),r0
(1)  457/ 60003EC : CA02                		xor	#2,r0
(1)  458/ 60003EE : 8017                		mov.b	r0,@(7,r1)
(1)  459/ 60003F0 : D12B                		mov	#_sysreg+hintclr,r1
(1)  460/ 60003F2 : 2101                		mov.w	r0,@r1
(1)  461/ 60003F4 : 0009                		nop
(1)  462/ 60003F6 : 0009                		nop
(1)  463/ 60003F8 : 0009                		nop
(1)  464/ 60003FA : 0009                		nop
(1)  465/ 60003FC : 0009                		nop
(1)  466/ 60003FE : 000B                		rts
(1)  467/ 6000400 : 0009                		nop
(1)  468/ 6000402 :                     		align 4
(1)  469/ 6000404 :                     
(1)  470/ 6000404 :                     ; =================================================================
(1)  471/ 6000404 :                     ; ------------------------------------------------
(1)  472/ 6000404 :                     ; Master | VBlank
(1)  473/ 6000404 :                     ; ------------------------------------------------
(1)  474/ 6000404 :                     
(1)  475/ 6000404 :                     m_irq_v:
(1)  476/ 6000404 : 9156                		mov	#_FRT,r1
(1)  477/ 6000406 : 8417                		mov.b	@(7,r1),r0
(1)  478/ 6000408 : CA02                		xor	#2,r0
(1)  479/ 600040A : 8017                		mov.b	r0,@(7,r1)
(1)  480/ 600040C : D125                		mov	#_sysreg+vintclr,r1
(1)  481/ 600040E : 2101                		mov.w	r0,@r1
(1)  482/ 6000410 : 0009                		nop
(1)  483/ 6000412 : 0009                		nop
(1)  484/ 6000414 : 0009                		nop
(1)  485/ 6000416 : 0009                		nop
(1)  486/ 6000418 : 0009                		nop
(1)  487/ 600041A : 000B                		rts
(1)  488/ 600041C : 0009                		nop
(1)  489/ 600041E :                     		align 4
(1)  490/ 6000420 :                     
(1)  491/ 6000420 :                     ; =================================================================
(1)  492/ 6000420 :                     ; ------------------------------------------------
(1)  493/ 6000420 :                     ; Master | VRES Interrupt (RESET button)
(1)  494/ 6000420 :                     ; ------------------------------------------------
(1)  495/ 6000420 :                     
(1)  496/ 6000420 :                     m_irq_vres:
(1)  497/ 6000420 : D11C                		mov	#_sysreg,r1
(1)  498/ 6000422 : 60F3                		mov	r15,r0
(1)  499/ 6000424 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  500/ 6000426 : E180                		mov	#_DMASOURCE0,r1		; Quickly cancel both DMA's
(1)  501/ 6000428 : E000                		mov	#0,r0
(1)  502/ 600042A : 110C                		mov	r0,@($30,r1)
(1)  503/ 600042C : 9043                		mov	#%0100010011100000,r0
(1)  504/ 600042E : 1103                		mov	r0,@($C,r1)
(1)  505/ 6000430 : E190                		mov	#_DMASOURCE1,r1
(1)  506/ 6000432 : E000                		mov	#0,r0
(1)  507/ 6000434 : 110C                		mov	r0,@($30,r1)
(1)  508/ 6000436 : 5013                		mov	@($C,r1),r0		; Dummy READ
(1)  509/ 6000438 : 903D                		mov	#%0100010011100000,r0
(1)  510/ 600043A : 1103                		mov	r0,@($C,r1)
(1)  511/ 600043C : D115                		mov	#_sysreg,r1		; If RV was active, freeze.
(1)  512/ 600043E : 8513                		mov.w	@(dreqctl,r1),r0
(1)  513/ 6000440 : C801                		tst	#1,r0
(1)  514/ 6000442 : 8B0F                		bf	.rv_busy
(1)  515/ 6000444 : DF18                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  516/ 6000446 : D019                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  517/ 6000448 : 2F02                		mov	r0,@r15
(1)  518/ 600044A : 9036                		mov.w   #$F0,r0
(1)  519/ 600044C : 1F01                		mov	r0,@(4,r15)
(1)  520/ 600044E : D111                		mov	#_sysreg,r1		; Report as OK to everyone
(1)  521/ 6000450 : D017                		mov	#"M_OK",r0
(1)  522/ 6000452 : 1108                		mov	r0,@(comm0,r1)
(1)  523/ 6000454 : 0009                		nop
(1)  524/ 6000456 : 0009                		nop
(1)  525/ 6000458 : 0009                		nop
(1)  526/ 600045A : 0009                		nop
(1)  527/ 600045C : 0009                		nop
(1)  528/ 600045E : 002B                		rte
(1)  529/ 6000460 : 0009                		nop
(1)  530/ 6000462 :                     		align 4
(1)  531/ 6000464 :                     .rv_busy:
(1)  532/ 6000464 : 9126                		mov	#_FRT,r1
(1)  533/ 6000466 : 8417                		mov.b	@(7,r1),r0
(1)  534/ 6000468 : CA02                		xor	#2,r0
(1)  535/ 600046A : 8017                		mov.b	r0,@(7,r1)
(1)  536/ 600046C : AFFE                		bra	*
(1)  537/ 600046E : 0009                		nop
(1)  538/ 6000470 :                     		align 4
(1)  539/ 6000470 :                     
(1)  540/ 6000470 :                     ; =================================================================
(1)  541/ 6000470 :                     ; ------------------------------------------------
(1)  542/ 6000470 :                     ; Master | DMA Exit
(1)  543/ 6000470 :                     ;
(1)  544/ 6000470 :                     ; This will trigger when one of the DMA channels
(1)  545/ 6000470 :                     ; with the interrupt bit enabled is a FEW writes
(1)  546/ 6000470 :                     ; away from finishing the transfer.
(1)  547/ 6000470 :                     ;
(1)  548/ 6000470 :                     ; Does NOT exactly trigger at the very last
(1)  549/ 6000470 :                     ; packet, I think.
(1)  550/ 6000470 :                     ;
(1)  551/ 6000470 :                     ; Check for the DMA-active bit BEFORE
(1)  552/ 6000470 :                     ; writing _DMAOPERATION = 0
(1)  553/ 6000470 :                     ; ------------------------------------------------
(1)  554/ 6000470 :                     
(1)  555/ 6000470 :                     		align 4
(1)  556/ 6000470 :                     m_irq_dma:
(1)  557/ 6000470 : 9120                		mov	#_FRT,r1
(1)  558/ 6000472 : 8417                		mov.b	@(7,r1),r0
(1)  559/ 6000474 : CA02                		xor	#2,r0
(1)  560/ 6000476 : 8017                		mov.b	r0,@(7,r1)
(1)  561/ 6000478 : E180                		mov	#_DMASOURCE0,r1
(1)  562/ 600047A : 5013                		mov	@($C,r1),r0		; Dummy READ
(1)  563/ 600047C : 901B                		mov	#%0100010011100000,r0
(1)  564/ 600047E : 1103                		mov	r0,@($C,r1)		; Transfer mode + DMA enable OFF
(1)  565/ 6000480 : D105                		mov	#_sysreg+comm12,r1	; Send signal
(1)  566/ 6000482 : 6010                		mov.b	@r1,r0
(1)  567/ 6000484 : CB40                		or	#%01000000,r0
(1)  568/ 6000486 : 2100                		mov.b	r0,@r1
(1)  569/ 6000488 : 000B                		rts
(1)  570/ 600048A : 0009                		nop
(1)  571/ 600048C :                     		align 4
(1)  572/ 600048C :                     
(1)  573/ 600048C :                     	; Save literals
(1)  574/ 600048C : 2000 401C 2000 401A 		ltorg
                    2000 4000 2000 402C 
                    2000 4012 2000 4018 
                    2000 4016 0603 FFF8 
                    0600 0752 4D5F 4F4B 
                    FE10 44E0 44E5 00F0 
(1)  575/ 60004BC :                     
(1)  576/ 60004BC :                     ; =================================================================
(1)  577/ 60004BC :                     ; ------------------------------------------------
(1)  578/ 60004BC :                     ; Slave | Unused Interrupt
(1)  579/ 60004BC :                     ; ------------------------------------------------
(1)  580/ 60004BC :                     
(1)  581/ 60004BC :                     		align 4
(1)  582/ 60004BC :                     s_irq_bad:
(1)  583/ 60004BC : 000B                		rts
(1)  584/ 60004BE : 0009                		nop
(1)  585/ 60004C0 :                     		align 4
(1)  586/ 60004C0 :                     
(1)  587/ 60004C0 :                     ; =================================================================
(1)  588/ 60004C0 :                     ; ------------------------------------------------
(1)  589/ 60004C0 :                     ; Slave | PWM Interrupt
(1)  590/ 60004C0 :                     ; ------------------------------------------------
(1)  591/ 60004C0 :                     
(1)  592/ 60004C0 :                     s_irq_pwm:
(1)  593/ 60004C0 : 9192                		mov	#_FRT,r1
(1)  594/ 60004C2 : 8417                		mov.b	@(7,r1),r0
(1)  595/ 60004C4 : CA02                		xor	#2,r0
(1)  596/ 60004C6 : 8017                		mov.b	r0,@(7,r1)
(1)  597/ 60004C8 : D13C                		mov	#_sysreg+pwmintclr,r1	; Clear CMD flag
(1)  598/ 60004CA : 2101                		mov.w	r0,@r1
(1)  599/ 60004CC : 0009                		nop
(1)  600/ 60004CE : 0009                		nop
(1)  601/ 60004D0 : 0009                		nop
(1)  602/ 60004D2 : 0009                		nop
(1)  603/ 60004D4 : 0009                		nop
(1)  604/ 60004D6 : 000B                		rts
(1)  605/ 60004D8 : 0009                		nop
(1)  606/ 60004DA :                     		align 4
(1)  607/ 60004DC :                     
(1)  608/ 60004DC :                     ; =================================================================
(1)  609/ 60004DC :                     ; ------------------------------------------------
(1)  610/ 60004DC :                     ; Slave | CMD Interrupt
(1)  611/ 60004DC :                     ; ------------------------------------------------
(1)  612/ 60004DC :                     
(1)  613/ 60004DC :                     ; TEMPORAL
(1)  614/ 60004DC : =$C0000000          MarsGema_Table	equ $C0000000
(1)  615/ 60004DC :                     
(1)  616/ 60004DC :                     		align 4
(1)  617/ 60004DC :                     s_irq_cmd:
(1)  618/ 60004DC : 9184                		mov	#_FRT,r1
(1)  619/ 60004DE : 8417                		mov.b	@(7,r1),r0
(1)  620/ 60004E0 : CA02                		xor	#2,r0
(1)  621/ 60004E2 : 8017                		mov.b	r0,@(7,r1)
(1)  622/ 60004E4 : D136                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  623/ 60004E6 : 2101                		mov.w	r0,@r1
(1)  624/ 60004E8 :                     	; --------------------------------
(1)  625/ 60004E8 : 2F26                		mov	r2,@-r15
(1)  626/ 60004EA : 2F36                		mov	r3,@-r15
(1)  627/ 60004EC : 2F46                		mov	r4,@-r15
(1)  628/ 60004EE :                     
(1)  629/ 60004EE :                     	; --------------------------------
(1)  630/ 60004EE :                     	; Task $01
(1)  631/ 60004EE :                     	; --------------------------------
(1)  632/ 60004EE : D135                		mov	#_sysreg+comm8,r1	; Input
(1)  633/ 60004F0 : D235                		mov	#MarsGema_Table,r2	; Output
(1)  634/ 60004F2 : D336                		mov	#_sysreg+comm14,r3	; comm
(1)  635/ 60004F4 : 0009                		nop
(1)  636/ 60004F6 :                     .wait_1:
(1)  637/ 60004F6 : 6030                		mov.b	@r3,r0
(1)  638/ 60004F8 : C9F0                		and	#%11110000,r0
(1)  639/ 60004FA : C880                		tst	#%10000000,r0		; LOCK exit?
(1)  640/ 60004FC : 8908                		bt	.exit_c
(1)  641/ 60004FE : C840                		tst	#%01000000,r0		; Wait PASS
(1)  642/ 6000500 : 89F9                		bt	.wait_1
(1)  643/ 6000502 :                     .copy_1:
(1)  644/ 6000502 : 6012                		mov	@r1,r0			; Copy entire LONG
(1)  645/ 6000504 : 2202                		mov	r0,@r2
(1)  646/ 6000506 : 7204                		add	#4,r2			; Increment table pos
(1)  647/ 6000508 : 6030                		mov.b	@r3,r0
(1)  648/ 600050A : C9BF                		and	#%10111111,r0
(1)  649/ 600050C : AFF3                		bra	.wait_1
(1)  650/ 600050E : 2300                		mov.b	r0,@r3			; Clear PASS bit, Z80 loops
(1)  651/ 6000510 :                     .exit_c:
(1)  652/ 6000510 : 64F6                		mov	@r15+,r4
(1)  653/ 6000512 : 63F6                		mov	@r15+,r3
(1)  654/ 6000514 : 62F6                		mov	@r15+,r2
(1)  655/ 6000516 : 0009                		nop
(1)  656/ 6000518 : 0009                		nop
(1)  657/ 600051A : 0009                		nop
(1)  658/ 600051C : 0009                		nop
(1)  659/ 600051E : 0009                		nop
(1)  660/ 6000520 : 000B                		rts
(1)  661/ 6000522 : 0009                		nop
(1)  662/ 6000524 :                     		align 4
(1)  663/ 6000524 :                     
(1)  664/ 6000524 :                     ; =================================================================
(1)  665/ 6000524 :                     ; ------------------------------------------------
(1)  666/ 6000524 :                     ; Slave | HBlank
(1)  667/ 6000524 :                     ; ------------------------------------------------
(1)  668/ 6000524 :                     
(1)  669/ 6000524 :                     s_irq_h:
(1)  670/ 6000524 : 9160                		mov	#_FRT,r1
(1)  671/ 6000526 : 8417                		mov.b	@(7,r1),r0
(1)  672/ 6000528 : CA02                		xor	#2,r0
(1)  673/ 600052A : 8017                		mov.b	r0,@(7,r1)
(1)  674/ 600052C : D128                		mov	#_sysreg+hintclr,r1
(1)  675/ 600052E : 2101                		mov.w	r0,@r1
(1)  676/ 6000530 : 0009                		nop
(1)  677/ 6000532 : 0009                		nop
(1)  678/ 6000534 : 0009                		nop
(1)  679/ 6000536 : 0009                		nop
(1)  680/ 6000538 : 0009                		nop
(1)  681/ 600053A : 000B                		rts
(1)  682/ 600053C : 0009                		nop
(1)  683/ 600053E :                     		align 4
(1)  684/ 6000540 :                     
(1)  685/ 6000540 :                     ; =================================================================
(1)  686/ 6000540 :                     ; ------------------------------------------------
(1)  687/ 6000540 :                     ; Slave | VBlank
(1)  688/ 6000540 :                     ; ------------------------------------------------
(1)  689/ 6000540 :                     
(1)  690/ 6000540 :                     s_irq_v:
(1)  691/ 6000540 : 9152                		mov	#_FRT,r1
(1)  692/ 6000542 : 8417                		mov.b	@(7,r1),r0
(1)  693/ 6000544 : CA02                		xor	#2,r0
(1)  694/ 6000546 : 8017                		mov.b	r0,@(7,r1)
(1)  695/ 6000548 : D122                		mov	#_sysreg+vintclr,r1
(1)  696/ 600054A : 2101                		mov.w	r0,@r1
(1)  697/ 600054C : 0009                		nop
(1)  698/ 600054E : 0009                		nop
(1)  699/ 6000550 : 0009                		nop
(1)  700/ 6000552 : 0009                		nop
(1)  701/ 6000554 : 0009                		nop
(1)  702/ 6000556 : 000B                		rts
(1)  703/ 6000558 : 0009                		nop
(1)  704/ 600055A :                     		align 4
(1)  705/ 600055C :                     
(1)  706/ 600055C :                     ; =================================================================
(1)  707/ 600055C :                     ; ------------------------------------------------
(1)  708/ 600055C :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  709/ 600055C :                     ; ------------------------------------------------
(1)  710/ 600055C :                     
(1)  711/ 600055C :                     s_irq_vres:
(1)  712/ 600055C : D11E                		mov	#_sysreg,r1
(1)  713/ 600055E : 60F3                		mov	r15,r0
(1)  714/ 6000560 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  715/ 6000562 : E180                		mov	#_DMASOURCE0,r1		; Quickly cancel both DMA's
(1)  716/ 6000564 : E000                		mov	#0,r0
(1)  717/ 6000566 : 110C                		mov	r0,@($30,r1)
(1)  718/ 6000568 : 903F                		mov	#%0100010011100000,r0
(1)  719/ 600056A : 1103                		mov	r0,@($C,r1)
(1)  720/ 600056C : E190                		mov	#_DMASOURCE1,r1
(1)  721/ 600056E : E000                		mov	#0,r0
(1)  722/ 6000570 : 110C                		mov	r0,@($30,r1)
(1)  723/ 6000572 : 903A                		mov	#%0100010011100000,r0
(1)  724/ 6000574 : 1103                		mov	r0,@($C,r1)
(1)  725/ 6000576 : D118                		mov	#_sysreg,r1		; If RV was active, freeze.
(1)  726/ 6000578 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  727/ 600057A : C801                		tst	#1,r0
(1)  728/ 600057C : 8B0E                		bf	.rv_busy
(1)  729/ 600057E : DF17                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1)  730/ 6000580 : D017                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1)  731/ 6000582 : 2F02                		mov	r0,@r15
(1)  732/ 6000584 : 9032                		mov.w   #$F0,r0
(1)  733/ 6000586 : 1F01                		mov	r0,@(4,r15)
(1)  734/ 6000588 : D113                		mov	#_sysreg,r1
(1)  735/ 600058A : D016                		mov	#"S_OK",r0		; Report as OK to everyone
(1)  736/ 600058C : 1109                		mov	r0,@(comm4,r1)
(1)  737/ 600058E : 0009                		nop
(1)  738/ 6000590 : 0009                		nop
(1)  739/ 6000592 : 0009                		nop
(1)  740/ 6000594 : 0009                		nop
(1)  741/ 6000596 : 0009                		nop
(1)  742/ 6000598 : 002B                		rte
(1)  743/ 600059A : 0009                		nop
(1)  744/ 600059C :                     		align 4
(1)  745/ 600059C :                     .rv_busy:
(1)  746/ 600059C : 9124                		mov	#_FRT,r1
(1)  747/ 600059E : 8417                		mov.b	@(7,r1),r0
(1)  748/ 60005A0 : CA02                		xor	#2,r0
(1)  749/ 60005A2 : 8017                		mov.b	r0,@(7,r1)
(1)  750/ 60005A4 : AFFE                		bra	*
(1)  751/ 60005A6 : 0009                		nop
(1)  752/ 60005A8 :                     		align 4
(1)  753/ 60005A8 :                     
(1)  754/ 60005A8 :                     ; =================================================================
(1)  755/ 60005A8 :                     ; ------------------------------------------------
(1)  756/ 60005A8 :                     ; Master | DMA Exit
(1)  757/ 60005A8 :                     ;
(1)  758/ 60005A8 :                     ; This will trigger when one of the DMA channels
(1)  759/ 60005A8 :                     ; with the interrupt bit enabled is a FEW writes
(1)  760/ 60005A8 :                     ; away from finishing the transfer.
(1)  761/ 60005A8 :                     ;
(1)  762/ 60005A8 :                     ; Does NOT exactly trigger at the very last
(1)  763/ 60005A8 :                     ; packet, I think.
(1)  764/ 60005A8 :                     ;
(1)  765/ 60005A8 :                     ; Check for the DMA-active bit BEFORE
(1)  766/ 60005A8 :                     ; writing _DMAOPERATION = 0
(1)  767/ 60005A8 :                     ; ------------------------------------------------
(1)  768/ 60005A8 :                     
(1)  769/ 60005A8 :                     		align 4
(1)  770/ 60005A8 :                     s_irq_dma:
(1)  771/ 60005A8 : 911E                		mov	#_FRT,r1
(1)  772/ 60005AA : 8417                		mov.b	@(7,r1),r0
(1)  773/ 60005AC : CA02                		xor	#2,r0
(1)  774/ 60005AE : 8017                		mov.b	r0,@(7,r1)
(1)  775/ 60005B0 : E190                		mov	#_DMASOURCE1,r1		; Pick DMA Channel 1
(1)  776/ 60005B2 : 5013                .wait_dma:	mov	@($C,r1),r0
(1)  777/ 60005B4 : C802                		tst	#%10,r0			; DMA finished?
(1)  778/ 60005B6 : 89FC                		bt	.wait_dma
(1)  779/ 60005B8 :                     
(1)  780/ 60005B8 :                     ; 		mov	r2,@-r15
(1)  781/ 60005B8 :                     ; 		mov	r3,@-r15
(1)  782/ 60005B8 :                     ; 		mov	r4,@-r15
(1)  783/ 60005B8 :                     ;
(1)  784/ 60005B8 :                     ; ; 		mov	#_DMA
(1)  785/ 60005B8 :                     ; 		mov	@r15+,r4
(1)  786/ 60005B8 :                     ; 		mov	@r15+,r3
(1)  787/ 60005B8 :                     ; 		mov	@r15+,r2
(1)  788/ 60005B8 :                     
(1)  789/ 60005B8 :                     ; 		mov
(1)  790/ 60005B8 :                     ; 		mov	#0,r0			; _DMAOPERATION = 0
(1)  791/ 60005B8 :                     ; 		mov	r0,@($30,r1)
(1)  792/ 60005B8 :                     ; 		mov	#%0100010011100000,r0	; Transfer mode + DMA enable OFF
(1)  793/ 60005B8 :                     ; 		mov	r0,@($C,r1)
(1)  794/ 60005B8 : 000B                		rts
(1)  795/ 60005BA : 0009                		nop
(1)  796/ 60005BC :                     		align 4
(1)  797/ 60005BC :                     
(1)  798/ 60005BC : 2000 401C 2000 401A 		ltorg		; Save literals
                    2000 4028 C000 0000 
                    2000 402E 2000 4018 
                    2000 4016 2000 4000 
                    0603 EFF8 0600 08C4 
                    535F 4F4B FE10 44E0 
                    00F0                
(1)  799/ 60005EE :                     
(1)  800/ 60005EE :                     ; ; =================================================================
(1)  801/ 60005EE :                     ; ; ------------------------------------------------
(1)  802/ 60005EE :                     ; ; Master | Watchdog interrupt
(1)  803/ 60005EE :                     ; ; ------------------------------------------------
(1)  804/ 60005EE :                     ;
(1)  805/ 60005EE :                     ; ; m_irq_wdg:
(1)  806/ 60005EE :                     ; ; check cache_m_plgn.asm
(1)  807/ 60005EE :                     ;
(1)  808/ 60005EE :                     ; ; =================================================================
(1)  809/ 60005EE :                     ; ; ------------------------------------------------
(1)  810/ 60005EE :                     ; ; Slave | Watchdog interrupt
(1)  811/ 60005EE :                     ; ; ------------------------------------------------
(1)  812/ 60005EE :                     ;
(1)  813/ 60005EE :                     ; 		align 4
(1)  814/ 60005EE :                     ; s_irq_wdg:
(1)  815/ 60005EE :                     ; ; 		mov	#$F0,r0
(1)  816/ 60005EE :                     ; ; 		ldc	r0,sr
(1)  817/ 60005EE :                     ; 		mov	r2,@-r15
(1)  818/ 60005EE :                     ; 		mov	#_FRT,r1
(1)  819/ 60005EE :                     ; 		mov.b   @(7,r1),r0
(1)  820/ 60005EE :                     ; 		xor     #2,r0
(1)  821/ 60005EE :                     ; 		mov.b   r0,@(7,r1)
(1)  822/ 60005EE :                     ;
(1)  823/ 60005EE :                     ; 		mov.w	#$FE80,r1
(1)  824/ 60005EE :                     ; 		mov.w   #$A518,r0		; Watchdog OFF
(1)  825/ 60005EE :                     ; 		mov.w   r0,@r1
(1)  826/ 60005EE :                     ; 		or      #$20,r0			; ON again
(1)  827/ 60005EE :                     ; 		mov.w   r0,@r1
(1)  828/ 60005EE :                     ; 		mov	#$10,r2
(1)  829/ 60005EE :                     ; 		mov.w   #$5A00,r0		; Timer for the next one
(1)  830/ 60005EE :                     ; 		or	r2,r0
(1)  831/ 60005EE :                     ; 		mov.w	r0,@r1
(1)  832/ 60005EE :                     ;
(1)  833/ 60005EE :                     ; 		mov	@r15+,r2
(1)  834/ 60005EE :                     ; 		rts
(1)  835/ 60005EE :                     ; 		nop
(1)  836/ 60005EE :                     ; 		align 4
(1)  837/ 60005EE :                     ; 		ltorg
(1)  838/ 60005EE :                     
(1)  839/ 60005EE :                     ; ====================================================================
(1)  840/ 60005EE :                     ; ; ----------------------------------------------------------------
(1)  841/ 60005EE :                     ; ; Mars_ClearCacheRam
(1)  842/ 60005EE :                     ; ;
(1)  843/ 60005EE :                     ; ; Clear the entire "fast code" section for the current CPU
(1)  844/ 60005EE :                     ; ; ----------------------------------------------------------------
(1)  845/ 60005EE :                     ;
(1)  846/ 60005EE :                     ; 		align 4
(1)  847/ 60005EE :                     ; Mars_ClearCacheRam:
(1)  848/ 60005EE :                     ; 		mov.l	#$C0000000+$800,r1
(1)  849/ 60005EE :                     ; 		mov	#0,r0
(1)  850/ 60005EE :                     ; 		mov.w	#$80,r2
(1)  851/ 60005EE :                     ; .loop:
(1)  852/ 60005EE :                     ; 		mov	r0,@-r1
(1)  853/ 60005EE :                     ; 		mov	r0,@-r1
(1)  854/ 60005EE :                     ; 		mov	r0,@-r1
(1)  855/ 60005EE :                     ; 		mov	r0,@-r1
(1)  856/ 60005EE :                     ; 		dt	r2
(1)  857/ 60005EE :                     ; 		bf	.loop
(1)  858/ 60005EE :                     ; 		rts
(1)  859/ 60005EE :                     ; 		nop
(1)  860/ 60005EE :                     ; 		align 4
(1)  861/ 60005EE :                     
(1)  862/ 60005EE :                     ; ; ----------------------------------------------------------------
(1)  863/ 60005EE :                     ; ; Mars_LoadCacheRam
(1)  864/ 60005EE :                     ; ;
(1)  865/ 60005EE :                     ; ; Loads "fast code" into the SH2's cache, $800 bytes maximum.
(1)  866/ 60005EE :                     ; ;
(1)  867/ 60005EE :                     ; ; Input:
(1)  868/ 60005EE :                     ; ; r1 - CACHE Code to send
(1)  869/ 60005EE :                     ; ; r2 - Size/4
(1)  870/ 60005EE :                     ; ;
(1)  871/ 60005EE :                     ; ; Breaks:
(1)  872/ 60005EE :                     ; ; r3
(1)  873/ 60005EE :                     ; ; ----------------------------------------------------------------
(1)  874/ 60005EE :                     ;
(1)  875/ 60005EE :                     ; 		align 4
(1)  876/ 60005EE :                     ; Mars_LoadCacheRam:
(1)  877/ 60005EE :                     ; 		stc	sr,@-r15	; Interrupts OFF
(1)  878/ 60005EE :                     ; 		mov.b	#$F0,r0		; ** $F0
(1)  879/ 60005EE :                     ; 		extu.b	r0,r0
(1)  880/ 60005EE :                     ; 		ldc	r0,sr
(1)  881/ 60005EE :                     ; 		mov	#_CCR,r3
(1)  882/ 60005EE :                     ; 		mov	#%00010000,r0	; Cache purge + Disable
(1)  883/ 60005EE :                     ; 		mov.w	r0,@r3
(1)  884/ 60005EE :                     ; 		nop
(1)  885/ 60005EE :                     ; 		nop
(1)  886/ 60005EE :                     ; 		nop
(1)  887/ 60005EE :                     ; 		nop
(1)  888/ 60005EE :                     ; 		nop
(1)  889/ 60005EE :                     ; 		nop
(1)  890/ 60005EE :                     ; 		nop
(1)  891/ 60005EE :                     ; 		nop
(1)  892/ 60005EE :                     ; 		mov	#%00001001,r0	; Cache two-way mode + Enable
(1)  893/ 60005EE :                     ; 		mov.w	r0,@r3
(1)  894/ 60005EE :                     ; 		mov 	#$C0000000,r3
(1)  895/ 60005EE :                     ; .copy:
(1)  896/ 60005EE :                     ; 		mov 	@r1+,r0
(1)  897/ 60005EE :                     ; 		mov 	r0,@r3
(1)  898/ 60005EE :                     ; 		dt	r2
(1)  899/ 60005EE :                     ; 		bf/s	.copy
(1)  900/ 60005EE :                     ; 		add 	#4,r3
(1)  901/ 60005EE :                     ; 		rts
(1)  902/ 60005EE :                     ; 		ldc	@r15+,sr
(1)  903/ 60005EE :                     ; 		align 4
(1)  904/ 60005EE :                     ; 		ltorg
(1)  905/ 60005EE :                     
(1)  906/ 60005EE :                     ; ; --------------------------------------------------------
(1)  907/ 60005EE :                     ; ; Mars_SetWatchdog
(1)  908/ 60005EE :                     ; ;
(1)  909/ 60005EE :                     ; ; Prepares watchdog interrupt
(1)  910/ 60005EE :                     ; ;
(1)  911/ 60005EE :                     ; ; Input:
(1)  912/ 60005EE :                     ; ; r1 - Watchdog CPU clock divider
(1)  913/ 60005EE :                     ; ; r2 - Watchdog Pre-timer
(1)  914/ 60005EE :                     ; ; --------------------------------------------------------
(1)  915/ 60005EE :                     ;
(1)  916/ 60005EE :                     ; 		align 4
(1)  917/ 60005EE :                     ; Mars_SetWatchdog:
(1)  918/ 60005EE :                     ; 		stc	sr,r4
(1)  919/ 60005EE :                     ; 		mov.b	#$F0,r0			; ** $F0
(1)  920/ 60005EE :                     ; 		extu.b	r0,r0
(1)  921/ 60005EE :                     ; 		ldc 	r0,sr
(1)  922/ 60005EE :                     ; 		mov.w	#_CCR&$FFFF,r3		; Reset CACHE
(1)  923/ 60005EE :                     ; 		mov	#%00001000,r0		; Two-way mode
(1)  924/ 60005EE :                     ; 		mov.w	r0,@r3
(1)  925/ 60005EE :                     ; 		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1)  926/ 60005EE :                     ; 		mov.w	r0,@r3
(1)  927/ 60005EE :                     ; 		mov.w	#$FE80,r3		; $FFFFFE80
(1)  928/ 60005EE :                     ; 		mov.w	#$5A00,r0		; Watchdog pre-timer
(1)  929/ 60005EE :                     ; 		or	r2,r0
(1)  930/ 60005EE :                     ; 		mov.w	r0,@r3
(1)  931/ 60005EE :                     ; 		mov.w	#$A538,r0		; Enable Watchdog
(1)  932/ 60005EE :                     ; 		or	r1,r0
(1)  933/ 60005EE :                     ; 		mov.w	r0,@r3
(1)  934/ 60005EE :                     ; 		ldc	r4,sr
(1)  935/ 60005EE :                     ; 		rts
(1)  936/ 60005EE :                     ; 		nop
(1)  937/ 60005EE :                     ; 		align 4
(1)  938/ 60005EE :                     ; 		ltorg
(1)  939/ 60005EE :                     
(1)  940/ 60005EE :                     ; ====================================================================
(1)  941/ 60005EE :                     ; ----------------------------------------------------------------
(1)  942/ 60005EE :                     ; MARS System features
(1)  943/ 60005EE :                     ; ----------------------------------------------------------------
(1)  944/ 60005EE :                     
(1)  945/ 60005EE :                     		include "system/mars/video.asm"
(2)    1/ 60005EE :                     ; ====================================================================
(2)    2/ 60005EE :                     ; ----------------------------------------------------------------
(2)    3/ 60005EE :                     ; 32X Video
(2)    4/ 60005EE :                     ;
(2)    5/ 60005EE :                     ; Some routines are located on the cache folder for
(2)    6/ 60005EE :                     ; speed reasons.
(2)    7/ 60005EE :                     ; ----------------------------------------------------------------
(2)    8/ 60005EE :                     
(2)    9/ 60005EE :                     ; --------------------------------------------------------
(2)   10/ 60005EE :                     ; Settings
(2)   11/ 60005EE :                     ; --------------------------------------------------------
(2)   12/ 60005EE :                     
(2)   13/ 60005EE :                     ; ; SDRAM
(2)   14/ 60005EE :                     ; MAX_MSCRNBUFF	equ $2C000	; MAX SDRAM for each Screen mode
(2)   15/ 60005EE :                     ; MAX_SSPRSPD	equ 8		; Supersprite box increment: Size+this (maximum Super Sprite speed)
(2)   16/ 60005EE :                     ; MAX_FACES	equ 980		; MAX polygon faces for 3D models
(2)   17/ 60005EE :                     ; MAX_SVDP_PZ	equ 980+96	; MAX polygon pieces to draw
(2)   18/ 60005EE :                     ; MAX_ZDIST	equ -$1900	; Maximum 3D field distance (-Z)
(2)   19/ 60005EE :                     
(2)   20/ 60005EE :                     ; FRAMEBUFFER
(2)   21/ 60005EE : =$1F800             FBVRAM_BLANK	equ $1F800	; Location of the BLANK line
(2)   22/ 60005EE : =$1D000             FBVRAM_PATCH	equ $1D000	; Framebuffer location for the affected XShift lines
(2)   23/ 60005EE :                     
(2)   24/ 60005EE :                     ; --------------------------------------------------------
(2)   25/ 60005EE :                     ; Variables
(2)   26/ 60005EE :                     ; --------------------------------------------------------
(2)   27/ 60005EE :                     
(2)   28/ 60005EE :                     ; ; Variables for 3D mode.
(2)   29/ 60005EE :                     ; SCREEN_WIDTH	equ 320		; Screen width and height positions used
(2)   30/ 60005EE :                     ; SCREEN_HEIGHT	equ 224		; by 3D object rendering
(2)   31/ 60005EE :                     ; PLGN_TEXURE	equ %10000000	; plypz_type (MSB)
(2)   32/ 60005EE :                     ; PLGN_TRI	equ %01000000
(2)   33/ 60005EE :                     
(2)   34/ 60005EE :                     ; ; --------------------------------------------------------
(2)   35/ 60005EE :                     ; ; Structs
(2)   36/ 60005EE :                     ; ; --------------------------------------------------------
(2)   37/ 60005EE :                     ;
(2)   38/ 60005EE :                     ; 		struct 0
(2)   39/ 60005EE :                     ; scrl_xpos_old	ds.l 1		; OLD Xpos position
(2)   40/ 60005EE :                     ; scrl_ypos_old	ds.l 1		; OLD Ypos position
(2)   41/ 60005EE :                     ; scrl_xset	ds.l 1		; Scroll X counter
(2)   42/ 60005EE :                     ; scrl_yset	ds.l 1		; Scroll Y counter
(2)   43/ 60005EE :                     ; scrl_blksize	ds.l 1		; Block size for scrolling
(2)   44/ 60005EE :                     ; scrl_intrl_size	ds.l 1		; Internal scroll FULL size (scrl_intrl_w*scrl_intrl_h)
(2)   45/ 60005EE :                     ; scrl_intrl_w	ds.l 1		; Internal scroll Width (MUST be larger than 320)
(2)   46/ 60005EE :                     ; scrl_intrl_h	ds.l 1		; Internal scroll Height
(2)   47/ 60005EE :                     ; scrl_fbpos_y	ds.l 1		; Screen's Y position
(2)   48/ 60005EE :                     ; scrl_fbpos	ds.l 1		; Screen's TOP-LEFT position
(2)   49/ 60005EE :                     ; scrl_fbdata	ds.l 1		; Screen data location on framebuffer
(2)   50/ 60005EE :                     ; scrl_xpos	ds.l 1		; $0000.0000
(2)   51/ 60005EE :                     ; scrl_ypos	ds.l 1		; $0000.0000
(2)   52/ 60005EE :                     ; sizeof_mscrl	ds.l 0
(2)   53/ 60005EE :                     ; 		endstruct
(2)   54/ 60005EE :                     ;
(2)   55/ 60005EE :                     ; 		struct 0
(2)   56/ 60005EE :                     ; plypz_type	ds.l 1		; Type + Material settings (width + index add)
(2)   57/ 60005EE :                     ; plypz_mtrl	ds.l 1		; Material data (ROM or SDRAM)
(2)   58/ 60005EE :                     ; plypz_ytb	ds.l 1		; Ytop | Ybottom
(2)   59/ 60005EE :                     ; plypz_xl	ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   60/ 60005EE :                     ; plypz_src_xl	ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   61/ 60005EE :                     ; plypz_src_yl	ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   62/ 60005EE :                     ; plypz_xl_dx	ds.l 1		; 0000.0000
(2)   63/ 60005EE :                     ; plypz_xr_dx	ds.l 1		; 0000.0000
(2)   64/ 60005EE :                     ; plypz_src_xl_dx	ds.l 1
(2)   65/ 60005EE :                     ; plypz_src_xr_dx	ds.l 1
(2)   66/ 60005EE :                     ; plypz_src_yl_dx	ds.l 1
(2)   67/ 60005EE :                     ; plypz_src_yr_dx	ds.l 1
(2)   68/ 60005EE :                     ; sizeof_plypz	ds.l 0
(2)   69/ 60005EE :                     ; 		endstruct
(2)   70/ 60005EE :                     ;
(2)   71/ 60005EE :                     ; ; Polygon data
(2)   72/ 60005EE :                     ; ; Size: $38
(2)   73/ 60005EE :                     ; 		struct 0
(2)   74/ 60005EE :                     ; polygn_type	ds.l 1		; %MSww wwww aaaa aaaa | %MS w-Texture width, a-Pixel increment
(2)   75/ 60005EE :                     ; polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)   76/ 60005EE :                     ; polygn_points	ds.l 4*2	; X/Y positions
(2)   77/ 60005EE :                     ; polygn_srcpnts	ds.w 4*2	; X/Y texture points 16-bit, Ignored on solid color.
(2)   78/ 60005EE :                     ; sizeof_polygn	ds.l 0
(2)   79/ 60005EE :                     ; 		endstruct
(2)   80/ 60005EE :                     
(2)   81/ 60005EE :                     ; ====================================================================
(2)   82/ 60005EE :                     ; ----------------------------------------------------------------
(2)   83/ 60005EE :                     ; Init MARS Video
(2)   84/ 60005EE :                     ;
(2)   85/ 60005EE :                     ; Breaks:
(2)   86/ 60005EE :                     ; r1-r4
(2)   87/ 60005EE :                     ; ----------------------------------------------------------------
(2)   88/ 60005EE :                     
(2)   89/ 60005EE :                     		align 4
(2)   90/ 60005F0 :                     MarsVideo_Init:
(2)   91/ 60005F0 : 4F22                		sts	pr,@-r15
(2)   92/ 60005F2 : D10F                		mov	#_sysreg,r1
(2)   93/ 60005F4 : 9024                		mov 	#FM,r0			; Set SuperVDP permission for SH2
(2)   94/ 60005F6 : 8010                  		mov.b	r0,@(adapter,r1)	; ** The Genesis side will control the
(2)   95/ 60005F8 : D10E                		mov 	#_vdpreg,r1		; 256-color palette using DREQ **
(2)   96/ 60005FA : E000                		mov	#0,r0			; Start at BLANK
(2)   97/ 60005FC : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)   98/ 60005FE : D20E                		mov	#_framebuffer,r2	; Make default nametables
(2)   99/ 6000600 : B006                		bsr	.def_fb
(2)  100/ 6000602 : 0009                		nop
(2)  101/ 6000604 : B004                		bsr	.def_fb
(2)  102/ 6000606 : 0009                		nop
(2)  103/ 6000608 : 4F26                		lds	@r15+,pr
(2)  104/ 600060A : 000B                		rts
(2)  105/ 600060C : 0009                		nop
(2)  106/ 600060E :                     		align 4
(2)  107/ 6000610 :                     .def_fb:
(2)  108/ 6000610 : 6323                		mov	r2,r3
(2)  109/ 6000612 : D00A                		mov	#FBVRAM_BLANK/2,r0	; The very last usable (blank) line.
(2)  110/ 6000614 : 9415                		mov	#240,r4
(2)  111/ 6000616 :                     .nxt_lne:
(2)  112/ 6000616 : 2301                		mov.w	r0,@r3
(2)  113/ 6000618 : 4410                		dt	r4
(2)  114/ 600061A : 8FFC                		bf/s	.nxt_lne
(2)  115/ 600061C : 7302                		add	#2,r3
(2)  116/ 600061E : 841B                		mov.b	@(framectl,r1),r0	; Frameswap request
(2)  117/ 6000620 : CA01                		xor	#1,r0
(2)  118/ 6000622 : 6303                		mov	r0,r3
(2)  119/ 6000624 : 801B                		mov.b	r0,@(framectl,r1)
(2)  120/ 6000626 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0	; And wait until it flips
(2)  121/ 6000628 : 3300                		cmp/eq	r0,r3
(2)  122/ 600062A : 8BFC                		bf	.wait_frm
(2)  123/ 600062C : 000B                		rts
(2)  124/ 600062E : 0009                		nop
(2)  125/ 6000630 :                     		align 4
(2)  126/ 6000630 : 2000 4000 2000 4100 		ltorg
                    2400 0000 0000 FC00 
                    0080 00F0           
(2)  127/ 6000644 :                     
(2)  128/ 6000644 :                     ; ====================================================================
(2)  129/ 6000644 :                     ; ----------------------------------------------------------------
(2)  130/ 6000644 :                     ; Subroutines
(2)  131/ 6000644 :                     ; ----------------------------------------------------------------
(2)  132/ 6000644 :                     
(2)  133/ 6000644 :                     ; ; --------------------------------------------------------
(2)  134/ 6000644 :                     ; ; VideoMars_ClearScreen
(2)  135/ 6000644 :                     ; ;
(2)  136/ 6000644 :                     ; ; Clears screen using VDPFILL
(2)  137/ 6000644 :                     ; ;
(2)  138/ 6000644 :                     ; ; Input:
(2)  139/ 6000644 :                     ; ; r1 | Framebuffer VRAM location
(2)  140/ 6000644 :                     ; ; r2 | Width/2
(2)  141/ 6000644 :                     ; ; r3 | Height
(2)  142/ 6000644 :                     ; ; r4 | Pixel(s) to write
(2)  143/ 6000644 :                     ; ;
(2)  144/ 6000644 :                     ; ; Uses:
(2)  145/ 6000644 :                     ; ; r5-r6
(2)  146/ 6000644 :                     ; ; --------------------------------------------------------
(2)  147/ 6000644 :                     ;
(2)  148/ 6000644 :                     ; ; TODO: Fix this.
(2)  149/ 6000644 :                     ;
(2)  150/ 6000644 :                     ; 		align 4
(2)  151/ 6000644 :                     ; MarsVideo_ClearScreen:
(2)  152/ 6000644 :                     ; 		shlr	r1
(2)  153/ 6000644 :                     ; 		mov	r1,r5
(2)  154/ 6000644 :                     ; 		mov	#_vdpreg,r6
(2)  155/ 6000644 :                     ; .fb_loop:
(2)  156/ 6000644 :                     ; 		mov	r2,r0
(2)  157/ 6000644 :                     ; 		mov.w	r0,@(filllength,r6)
(2)  158/ 6000644 :                     ; 		mov	r1,r0
(2)  159/ 6000644 :                     ; 		mov.w	r0,@(fillstart,r6)
(2)  160/ 6000644 :                     ; 		mov	r4,r0
(2)  161/ 6000644 :                     ; 		mov.w	r0,@(filldata,r6)
(2)  162/ 6000644 :                     ; .wait_fb2:	mov.w	@(vdpsts,r6),r0
(2)  163/ 6000644 :                     ; 		tst	#%10,r0
(2)  164/ 6000644 :                     ; 		bf	.wait_fb2
(2)  165/ 6000644 :                     ; 		dt	r3
(2)  166/ 6000644 :                     ; 		bf/s	.fb_loop
(2)  167/ 6000644 :                     ; 		add	r5,r1
(2)  168/ 6000644 :                     ; .no_redraw_2:
(2)  169/ 6000644 :                     ; 		rts
(2)  170/ 6000644 :                     ; 		nop
(2)  171/ 6000644 :                     ; 		align 4
(2)  172/ 6000644 :                     ;
(2)  173/ 6000644 :                     ; ; --------------------------------------------------------
(2)  174/ 6000644 :                     ; ; MarsVideo_ResetNameTbl
(2)  175/ 6000644 :                     ; ;
(2)  176/ 6000644 :                     ; ; Reset the nametable, points all lines into a blank
(2)  177/ 6000644 :                     ; ; line (FBVRAM_BLANK)
(2)  178/ 6000644 :                     ; ;
(2)  179/ 6000644 :                     ; ; Breaks:
(2)  180/ 6000644 :                     ; ; r1-r2
(2)  181/ 6000644 :                     ; ; --------------------------------------------------------
(2)  182/ 6000644 :                     ;
(2)  183/ 6000644 :                     ; MarsVideo_ResetNameTbl:
(2)  184/ 6000644 :                     ; 		mov	#_framebuffer,r1
(2)  185/ 6000644 :                     ; 		mov	#FBVRAM_BLANK,r0
(2)  186/ 6000644 :                     ; 		mov	#240,r2
(2)  187/ 6000644 :                     ; .nxt_lne2:
(2)  188/ 6000644 :                     ; 		mov.w	r0,@r1
(2)  189/ 6000644 :                     ; 		dt	r2
(2)  190/ 6000644 :                     ; 		bf/s	.nxt_lne2
(2)  191/ 6000644 :                     ; 		add	#2,r1
(2)  192/ 6000644 :                     ; 		rts
(2)  193/ 6000644 :                     ; 		nop
(2)  194/ 6000644 :                     ; 		align 4
(2)  195/ 6000644 :                     ;
(2)  196/ 6000644 :                     ; --------------------------------------------------------
(2)  197/ 6000644 :                     ; MarsVideo_MakeNameTbl
(2)  198/ 6000644 :                     ;
(2)  199/ 6000644 :                     ; Builds the nametable for a normal screen, if
(2)  200/ 6000644 :                     ; marsGbl_WaveEnable is set, it will add a
(2)  201/ 6000644 :                     ; wave effect to the linetable (in WORDS)
(2)  202/ 6000644 :                     ;
(2)  203/ 6000644 :                     ; Input:
(2)  204/ 6000644 :                     ; r1 | Framebuffer position
(2)  205/ 6000644 :                     ; r2 | Width (Width*2 for Direct color)
(2)  206/ 6000644 :                     ; r3 | Height
(2)  207/ 6000644 :                     ; r4 | Y line position
(2)  208/ 6000644 :                     ;
(2)  209/ 6000644 :                     ; Uses:
(2)  210/ 6000644 :                     ; r1-r11
(2)  211/ 6000644 :                     ; --------------------------------------------------------
(2)  212/ 6000644 :                     
(2)  213/ 6000644 :                     MarsVideo_MakeNameTbl:
(2)  214/ 6000644 : DA1E                		mov	#_framebuffer,r10
(2)  215/ 6000646 : 4400                		shll	r4
(2)  216/ 6000648 : 3A4C                		add	r4,r10
(2)  217/ 600064A : D51E                		mov 	#_vdpreg,r5
(2)  218/ 600064C : 8451                		mov.b	@(bitmapmd,r5),r0
(2)  219/ 600064E : C903                		and	#%11,r0
(2)  220/ 6000650 : 8803                		cmp/eq	#3,r0			; Don't mess with the RLE lines.
(2)  221/ 6000652 : 8906                		bt	.cant_use
(2)  222/ 6000654 :                     ; 		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  223/ 6000654 :                     ; 		tst	r0,r0
(2)  224/ 6000654 :                     ; 		bt	.linetbl_normal
(2)  225/ 6000654 :                     ;
(2)  226/ 6000654 :                     ; 	; Special linetable with
(2)  227/ 6000654 :                     ; 	; wave deformation.
(2)  228/ 6000654 :                     ; 		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  229/ 6000654 :                     ; 		mov	r0,r4
(2)  230/ 6000654 :                     ; 		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  231/ 6000654 :                     ; 		mov	#$7FF,r5
(2)  232/ 6000654 :                     ; 		add	r4,r0			; wave speed
(2)  233/ 6000654 :                     ; 		and	r5,r0
(2)  234/ 6000654 :                     ; 		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  235/ 6000654 :                     ; 		mov	r0,r7
(2)  236/ 6000654 :                     ; 		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  237/ 6000654 :                     ; 		mov	r0,r5
(2)  238/ 6000654 :                     ; 		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  239/ 6000654 :                     ; 		mov	r0,r4
(2)  240/ 6000654 :                     ; 		mov	#0,r6
(2)  241/ 6000654 :                     ; 		mov	#$7FF,r11
(2)  242/ 6000654 :                     ; 		mov	#sin_table,r12
(2)  243/ 6000654 :                     ; .nxt_lne:
(2)  244/ 6000654 :                     ; 		mov	r7,r0
(2)  245/ 6000654 :                     ; 		add	r4,r7			; wave distord
(2)  246/ 6000654 :                     ; 		and	r11,r7
(2)  247/ 6000654 :                     ; 		shll2	r0
(2)  248/ 6000654 :                     ; 		mov	@(r0,r12),r9
(2)  249/ 6000654 :                     ; 		dmuls	r5,r9
(2)  250/ 6000654 :                     ; 		sts	macl,r9
(2)  251/ 6000654 :                     ; 		shlr16	r9
(2)  252/ 6000654 :                     ; 		exts.w	r9,r9
(2)  253/ 6000654 :                     ; 		mov	r1,r0
(2)  254/ 6000654 :                     ; 		add	r6,r0
(2)  255/ 6000654 :                     ; 		add	r9,r0
(2)  256/ 6000654 :                     ; 		shlr	r0
(2)  257/ 6000654 :                     ; 		mov.w	r0,@r10
(2)  258/ 6000654 :                     ; 		add	r2,r6
(2)  259/ 6000654 :                     ; 		dt	r3
(2)  260/ 6000654 :                     ; 		bf/s	.nxt_lne
(2)  261/ 6000654 :                     ; 		add	#2,r10
(2)  262/ 6000654 :                     ; 		rts
(2)  263/ 6000654 :                     ; 		nop
(2)  264/ 6000654 :                     ; 		align 4
(2)  265/ 6000654 :                     
(2)  266/ 6000654 :                     .linetbl_normal:
(2)  267/ 6000654 : 4101                		shlr	r1
(2)  268/ 6000656 : 4201                		shlr	r2
(2)  269/ 6000658 :                     .nxt_lne2:
(2)  270/ 6000658 : 2A11                		mov.w	r1,@r10
(2)  271/ 600065A : 312C                		add	r2,r1
(2)  272/ 600065C : 4310                		dt	r3
(2)  273/ 600065E : 8FFB                		bf/s	.nxt_lne2
(2)  274/ 6000660 : 7A02                		add	#2,r10
(2)  275/ 6000662 :                     .cant_use:
(2)  276/ 6000662 : 000B                		rts
(2)  277/ 6000664 : 0009                		nop
(2)  278/ 6000666 :                     		align 4
(2)  279/ 6000668 :                     
(2)  280/ 6000668 :                     ; --------------------------------------------------------
(2)  281/ 6000668 :                     ; MarsVideo_FixTblShift
(2)  282/ 6000668 :                     ;
(2)  283/ 6000668 :                     ; Fix the affected $xxFF lines by scrolling using the
(2)  284/ 6000668 :                     ; linetable. MUST call this BEFORE flipping
(2)  285/ 6000668 :                     ; the Framebuffer.
(2)  286/ 6000668 :                     ;
(2)  287/ 6000668 :                     ; Input:
(2)  288/ 6000668 :                     ; r1 | Start line
(2)  289/ 6000668 :                     ; r2 | Number of lines
(2)  290/ 6000668 :                     ; r3 | Location for the fixed lines
(2)  291/ 6000668 :                     ;
(2)  292/ 6000668 :                     ; Break:
(2)  293/ 6000668 :                     ; r7-r14
(2)  294/ 6000668 :                     ; --------------------------------------------------------
(2)  295/ 6000668 :                     
(2)  296/ 6000668 :                     MarsVideo_FixTblShift:
(2)  297/ 6000668 : DE16                		mov	#_vdpreg,r14
(2)  298/ 600066A : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  299/ 600066C : C903                		and	#%11,r0
(2)  300/ 600066E : 8801                		cmp/eq	#1,r0
(2)  301/ 6000670 : 8B23                		bf	.ptchset
(2)  302/ 6000672 : C500                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set?
(2)  303/ 6000674 : C901                		and	#1,r0
(2)  304/ 6000676 : 2008                		tst	r0,r0
(2)  305/ 6000678 : 891F                		bt	.ptchset
(2)  306/ 600067A :                     
(2)  307/ 600067A : DE11                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  308/ 600067C : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  309/ 600067E : 3C3C                		add	r3,r12
(2)  310/ 6000680 : 6013                		mov	r1,r0
(2)  311/ 6000682 : 4008                		shll2	r0
(2)  312/ 6000684 : 3E0C                		add	r0,r14
(2)  313/ 6000686 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  314/ 6000688 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  315/ 600068A : E0FF                		mov	#-1,r0
(2)  316/ 600068C : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  317/ 600068E : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  318/ 6000690 :                     .loop:
(2)  319/ 6000690 : 60D1                		mov.w	@r13,r0
(2)  320/ 6000692 : 2099                		and	r9,r0
(2)  321/ 6000694 : 6703                		mov	r0,r7
(2)  322/ 6000696 : 20A9                		and	r10,r0
(2)  323/ 6000698 : 30A0                		cmp/eq	r10,r0
(2)  324/ 600069A : 8B0B                		bf	.tblexit
(2)  325/ 600069C : 4700                		shll	r7
(2)  326/ 600069E : 37EC                		add	r14,r7
(2)  327/ 60006A0 : 60C3                		mov	r12,r0
(2)  328/ 60006A2 : 4001                		shlr	r0
(2)  329/ 60006A4 : 2D01                		mov.w	r0,@r13
(2)  330/ 60006A6 : 930F                		mov	#(320+4)/2,r3
(2)  331/ 60006A8 :                     .copy:
(2)  332/ 60006A8 : 6071                		mov.w	@r7,r0
(2)  333/ 60006AA : 2C01                		mov.w	r0,@r12
(2)  334/ 60006AC : 7702                		add	#2,r7
(2)  335/ 60006AE : 4310                		dt	r3
(2)  336/ 60006B0 : 8FFA                		bf/s	.copy
(2)  337/ 60006B2 : 7C02                		add	#2,r12
(2)  338/ 60006B4 :                     .tblexit:
(2)  339/ 60006B4 : 4B10                		dt	r11
(2)  340/ 60006B6 : 8FEB                		bf/s	.loop
(2)  341/ 60006B8 : 7D02                		add	#2,r13
(2)  342/ 60006BA :                     .ptchset:
(2)  343/ 60006BA : 000B                		rts
(2)  344/ 60006BC : 0009                		nop
(2)  345/ 60006BE :                     		align 4
(2)  346/ 60006C0 : 2400 0000 2000 4100 		ltorg
                    00A2                
(2)  347/ 60006CA :                     
(2)  348/ 60006CA :                     ; ; ====================================================================
(2)  349/ 60006CA :                     ; ; ----------------------------------------------------------------
(2)  350/ 60006CA :                     ; ; 2D Section
(2)  351/ 60006CA :                     ; ;
(2)  352/ 60006CA :                     ; ; Routines that write to the framebuffer are
(2)  353/ 60006CA :                     ; ; located at cache_m_2D.asm
(2)  354/ 60006CA :                     ; ; ----------------------------------------------------------------
(2)  355/ 60006CA :                     ;
(2)  356/ 60006CA :                     ; ; --------------------------------------------------------
(2)  357/ 60006CA :                     ; ; MarsVideo_MkScrlField
(2)  358/ 60006CA :                     ; ;
(2)  359/ 60006CA :                     ; ; This builds a new internal scrolling background
(2)  360/ 60006CA :                     ; ;
(2)  361/ 60006CA :                     ; ; Input:
(2)  362/ 60006CA :                     ; ; r1 | Background buffer to initialize
(2)  363/ 60006CA :                     ; ; r2 | Framebuffer VRAM position
(2)  364/ 60006CA :                     ; ; r3 | Scroll Width (320 or large)
(2)  365/ 60006CA :                     ; ; r4 | Scroll Height
(2)  366/ 60006CA :                     ; ; r5 | Scroll block size (4 pixels minimum)
(2)  367/ 60006CA :                     ; ; r6 | X start
(2)  368/ 60006CA :                     ; ; r7 | Y start
(2)  369/ 60006CA :                     ; ;
(2)  370/ 60006CA :                     ; ; NOTE:
(2)  371/ 60006CA :                     ; ; At the very last scrollable line: The next 320
(2)  372/ 60006CA :                     ; ; pixels will be visible until that line resets
(2)  373/ 60006CA :                     ; ; into 0 again.
(2)  374/ 60006CA :                     ; ; When you write pixels in in the range of 0-320,
(2)  375/ 60006CA :                     ; ; write the same pixels at the very end of
(2)  376/ 60006CA :                     ; ; the scrolling area (add width*height)
(2)  377/ 60006CA :                     ; ;
(2)  378/ 60006CA :                     ; ; Breaks:
(2)  379/ 60006CA :                     ; ; r3-r5,macl
(2)  380/ 60006CA :                     ; ; --------------------------------------------------------
(2)  381/ 60006CA :                     ;
(2)  382/ 60006CA :                     ; 		align 4
(2)  383/ 60006CA :                     ; MarsVideo_MkScrlField:
(2)  384/ 60006CA :                     ; 		mov	#sizeof_mscrl,r0
(2)  385/ 60006CA :                     ; 		mulu	r0,r1
(2)  386/ 60006CA :                     ; 		sts	macl,r1
(2)  387/ 60006CA :                     ; 		mov	#RAM_Mars_ScrlBuff,r0
(2)  388/ 60006CA :                     ; 		add	r0,r1
(2)  389/ 60006CA :                     ;
(2)  390/ 60006CA :                     ; 		mov	r5,@(scrl_blksize,r1)
(2)  391/ 60006CA :                     ; 		add	r5,r3	; add "block"
(2)  392/ 60006CA :                     ; 		mov	r2,@(scrl_fbdata,r1)
(2)  393/ 60006CA :                     ; 		add	r5,r4
(2)  394/ 60006CA :                     ; 		mov	r3,@(scrl_intrl_w,r1)
(2)  395/ 60006CA :                     ; 		mulu	r3,r4
(2)  396/ 60006CA :                     ; 		mov	r4,@(scrl_intrl_h,r1)
(2)  397/ 60006CA :                     ; 		sts	macl,r0
(2)  398/ 60006CA :                     ; 		mov	r0,@(scrl_intrl_size,r1)
(2)  399/ 60006CA :                     ; 		xor	r0,r0
(2)  400/ 60006CA :                     ; 		mov	r0,@(scrl_xpos_old,r1)
(2)  401/ 60006CA :                     ; 		mov	r0,@(scrl_ypos_old,r1)
(2)  402/ 60006CA :                     ; 		mov	r0,@(scrl_fbpos,r1)
(2)  403/ 60006CA :                     ; 		mov	r0,@(scrl_fbpos_y,r1)
(2)  404/ 60006CA :                     ; 		mov	r0,@(scrl_xset,r1)
(2)  405/ 60006CA :                     ; 		mov	r0,@(scrl_yset,r1)
(2)  406/ 60006CA :                     ; 		rts
(2)  407/ 60006CA :                     ; 		nop
(2)  408/ 60006CA :                     ; 		align 4
(2)  409/ 60006CA :                     ;
(2)  410/ 60006CA :                     ; ; --------------------------------------------------------
(2)  411/ 60006CA :                     ; ; MarsVideo_ShowScrlBg
(2)  412/ 60006CA :                     ; ;
(2)  413/ 60006CA :                     ; ; Make a visible section of any scrolling area
(2)  414/ 60006CA :                     ; ; into the current framebuffer.
(2)  415/ 60006CA :                     ; ;
(2)  416/ 60006CA :                     ; ; Input:
(2)  417/ 60006CA :                     ; ; r1 | Background buffer
(2)  418/ 60006CA :                     ; ; r2 | Top Y
(2)  419/ 60006CA :                     ; ; r3 | Bottom Y
(2)  420/ 60006CA :                     ; ;
(2)  421/ 60006CA :                     ; ; Breaks:
(2)  422/ 60006CA :                     ; ; r4-r14
(2)  423/ 60006CA :                     ; ;
(2)  424/ 60006CA :                     ; ; NOTE:
(2)  425/ 60006CA :                     ; ; After finishing all your screens call
(2)  426/ 60006CA :                     ; ; MarsVideo_FixTblShift before doing frameswap
(2)  427/ 60006CA :                     ; ; --------------------------------------------------------
(2)  428/ 60006CA :                     ;
(2)  429/ 60006CA :                     ; 		align 4
(2)  430/ 60006CA :                     ; MarsVideo_ShowScrlBg:
(2)  431/ 60006CA :                     ; 		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  432/ 60006CA :                     ; 		mov	#0,r11				; r11 - line counter
(2)  433/ 60006CA :                     ; 		mov	@(scrl_fbdata,r1),r13		; r13 - Framebuffer pixeldata position
(2)  434/ 60006CA :                     ; 		mov	r2,r6
(2)  435/ 60006CA :                     ; 		mov	@(scrl_intrl_size,r1),r12	; r12 - Full size of screen-scroll
(2)  436/ 60006CA :                     ; 		mov	r2,r0
(2)  437/ 60006CA :                     ; 		mov	@(scrl_intrl_w,r1),r10		; r10 - Next line to add
(2)  438/ 60006CA :                     ; 		shll	r0
(2)  439/ 60006CA :                     ; 		mov	@(scrl_fbpos,r1),r7
(2)  440/ 60006CA :                     ; 		add	r0,r14
(2)  441/ 60006CA :                     ; 		mov	@(scrl_fbpos_y,r1),r0
(2)  442/ 60006CA :                     ; 		mulu	r10,r0
(2)  443/ 60006CA :                     ; 		sts	macl,r0
(2)  444/ 60006CA :                     ; 		add	r0,r7
(2)  445/ 60006CA :                     ; 		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  446/ 60006CA :                     ; 		tst	r0,r0
(2)  447/ 60006CA :                     ; 		bf	.ln_wavy
(2)  448/ 60006CA :                     ; .ln_loop:
(2)  449/ 60006CA :                     ; 		mov	r7,r8
(2)  450/ 60006CA :                     ; 		cmp/ge	r12,r8
(2)  451/ 60006CA :                     ; 		bf	.xl_r
(2)  452/ 60006CA :                     ; 		sub	r12,r8
(2)  453/ 60006CA :                     ; .xl_r:
(2)  454/ 60006CA :                     ; 		cmp/pz	r8
(2)  455/ 60006CA :                     ; 		bt	.xl_l
(2)  456/ 60006CA :                     ; 		add	r12,r8
(2)  457/ 60006CA :                     ; .xl_l:
(2)  458/ 60006CA :                     ; 		mov	r8,r7
(2)  459/ 60006CA :                     ; 		add	r10,r7			; Add Y
(2)  460/ 60006CA :                     ; 		add	r13,r8			; Add Framebuffer position
(2)  461/ 60006CA :                     ; 		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  462/ 60006CA :                     ; 		mov.w	r8,@r14			; Send to FB's table
(2)  463/ 60006CA :                     ; 		add	#2,r14
(2)  464/ 60006CA :                     ; 		add	#2,r11
(2)  465/ 60006CA :                     ; 		cmp/eq	r3,r6
(2)  466/ 60006CA :                     ; 		bf/s	.ln_loop
(2)  467/ 60006CA :                     ; 		add	#1,r6
(2)  468/ 60006CA :                     ; 		rts
(2)  469/ 60006CA :                     ; 		nop
(2)  470/ 60006CA :                     ; 		align 4
(2)  471/ 60006CA :                     ; .ln_wavy:
(2)  472/ 60006CA :                     ; 		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  473/ 60006CA :                     ; 		mov	r0,r4
(2)  474/ 60006CA :                     ; 		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  475/ 60006CA :                     ; 		mov	#$7FF,r5
(2)  476/ 60006CA :                     ; 		add	r4,r0			; wave speed
(2)  477/ 60006CA :                     ; 		and	r5,r0
(2)  478/ 60006CA :                     ; 		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  479/ 60006CA :                     ; 		mov	r0,r9
(2)  480/ 60006CA :                     ; 		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  481/ 60006CA :                     ; 		mov	r0,r5
(2)  482/ 60006CA :                     ; 		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  483/ 60006CA :                     ; 		mov	r0,r4
(2)  484/ 60006CA :                     ; .ln_loop_w:
(2)  485/ 60006CA :                     ; 		mov	#$7FF,r8
(2)  486/ 60006CA :                     ; 		mov	r9,r0
(2)  487/ 60006CA :                     ; 		add	r4,r9		; wave distord
(2)  488/ 60006CA :                     ; 		and	r8,r9
(2)  489/ 60006CA :                     ; 		shll2	r0
(2)  490/ 60006CA :                     ; 		mov	#sin_table,r8
(2)  491/ 60006CA :                     ; 		mov	@(r0,r8),r0
(2)  492/ 60006CA :                     ; 		dmuls	r5,r0
(2)  493/ 60006CA :                     ; 		sts	macl,r0
(2)  494/ 60006CA :                     ; 		shlr16	r0
(2)  495/ 60006CA :                     ; 		exts.w	r0,r0
(2)  496/ 60006CA :                     ; 		mov	r7,r8
(2)  497/ 60006CA :                     ; 		cmp/ge	r12,r8
(2)  498/ 60006CA :                     ; 		bf	.wxl_r
(2)  499/ 60006CA :                     ; 		sub	r12,r8
(2)  500/ 60006CA :                     ; .wxl_r:
(2)  501/ 60006CA :                     ; 		cmp/pz	r8
(2)  502/ 60006CA :                     ; 		bt	.wxl_l
(2)  503/ 60006CA :                     ; 		add	r12,r8
(2)  504/ 60006CA :                     ; .wxl_l:
(2)  505/ 60006CA :                     ; 		mov	r8,r7
(2)  506/ 60006CA :                     ; 		add	r10,r7		; Add Y
(2)  507/ 60006CA :                     ; 		add	r13,r8		; Add Framebuffer position
(2)  508/ 60006CA :                     ; 		add	r0,r8
(2)  509/ 60006CA :                     ; 		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  510/ 60006CA :                     ; 		mov.w	r8,@r14		; send to FB's table
(2)  511/ 60006CA :                     ; 		add	#2,r14
(2)  512/ 60006CA :                     ; 		add	#2,r11
(2)  513/ 60006CA :                     ; 		cmp/eq	r3,r6
(2)  514/ 60006CA :                     ; 		bf/s	.ln_loop_w
(2)  515/ 60006CA :                     ; 		add	#1,r6
(2)  516/ 60006CA :                     ; 		rts
(2)  517/ 60006CA :                     ; 		nop
(2)  518/ 60006CA :                     ; 		align 4
(2)  519/ 60006CA :                     ; .no_lines:
(2)  520/ 60006CA :                     ; 		rts
(2)  521/ 60006CA :                     ; 		nop
(2)  522/ 60006CA :                     ; 		align 4
(2)  523/ 60006CA :                     ; 		ltorg
(2)  524/ 60006CA :                     ;
(2)  525/ 60006CA :                     ; ; --------------------------------------------------------
(2)  526/ 60006CA :                     ; ; MarsVideo_Bg_UpdPos
(2)  527/ 60006CA :                     ; ;
(2)  528/ 60006CA :                     ; ; Moves the scrolling area using X/Y values from
(2)  529/ 60006CA :                     ; ; the Genesis side.
(2)  530/ 60006CA :                     ; ;
(2)  531/ 60006CA :                     ; ; Input:
(2)  532/ 60006CA :                     ; ; r14 | Genesis background buffer
(2)  533/ 60006CA :                     ; ; r13 | Scrolling-area buffer
(2)  534/ 60006CA :                     ; ;
(2)  535/ 60006CA :                     ; ; Breaks:
(2)  536/ 60006CA :                     ; ; ALL
(2)  537/ 60006CA :                     ; ; --------------------------------------------------------
(2)  538/ 60006CA :                     ;
(2)  539/ 60006CA :                     ; 		align 4
(2)  540/ 60006CA :                     ; MarsVideo_Bg_UpdPos:
(2)  541/ 60006CA :                     ; 		mov	#0,r1
(2)  542/ 60006CA :                     ; 		mov	#0,r2
(2)  543/ 60006CA :                     ; 		mov	@(scrl_xpos,r13),r0		; 0000.0000
(2)  544/ 60006CA :                     ; 		shlr16	r0				; **
(2)  545/ 60006CA :                     ; 		mov.w	r0,@(marsGbl_XShift,gbr)	; ** Grab missing bit for xshift
(2)  546/ 60006CA :                     ; 		exts.w	r0,r0
(2)  547/ 60006CA :                     ; 		mov	r0,r3
(2)  548/ 60006CA :                     ; 		mov	@(scrl_xpos_old,r13),r0
(2)  549/ 60006CA :                     ; 		cmp/eq	r0,r3
(2)  550/ 60006CA :                     ; 		bt	.xequ
(2)  551/ 60006CA :                     ; 		mov	r3,r1
(2)  552/ 60006CA :                     ; 		sub	r0,r1
(2)  553/ 60006CA :                     ; .xequ:
(2)  554/ 60006CA :                     ; 		mov	r3,r0
(2)  555/ 60006CA :                     ; 		mov	r0,@(scrl_xpos_old,r13)
(2)  556/ 60006CA :                     ; 		mov	@(scrl_ypos,r13),r0	; 0000.0000
(2)  557/ 60006CA :                     ; 		shlr16	r0
(2)  558/ 60006CA :                     ; 		exts.w	r0,r0
(2)  559/ 60006CA :                     ; 		mov	r0,r3
(2)  560/ 60006CA :                     ; 		mov	@(scrl_ypos_old,r13),r0
(2)  561/ 60006CA :                     ; 		cmp/eq	r0,r3
(2)  562/ 60006CA :                     ; 		bt	.yequ
(2)  563/ 60006CA :                     ; 		mov	r3,r2
(2)  564/ 60006CA :                     ; 		sub	r0,r2
(2)  565/ 60006CA :                     ; .yequ:
(2)  566/ 60006CA :                     ; 		mov	r3,r0
(2)  567/ 60006CA :                     ; 		mov	r0,@(scrl_ypos_old,r13)
(2)  568/ 60006CA :                     ; 		exts.w	r1,r1			; r1 - X increment
(2)  569/ 60006CA :                     ; 		exts.w	r2,r2			; r2 - Y increment
(2)  570/ 60006CA :                     ;
(2)  571/ 60006CA :                     ; 	; ---------------------------------------
(2)  572/ 60006CA :                     ; 	; Increment Y pos (REAL)
(2)  573/ 60006CA :                     ; 	; ---------------------------------------
(2)  574/ 60006CA :                     ;
(2)  575/ 60006CA :                     ; 		mov	@(scrl_fbpos_y,r13),r4
(2)  576/ 60006CA :                     ; 		add	r2,r4
(2)  577/ 60006CA :                     ; 		mov	@(scrl_intrl_h,r13),r3
(2)  578/ 60006CA :                     ; 		cmp/pl	r2
(2)  579/ 60006CA :                     ; 		bf	.ypu_negtv
(2)  580/ 60006CA :                     ; 		cmp/ge	r3,r4
(2)  581/ 60006CA :                     ; 		bf	.ypu_negtv
(2)  582/ 60006CA :                     ; 		sub	r3,r4
(2)  583/ 60006CA :                     ; .ypu_negtv:
(2)  584/ 60006CA :                     ; 		cmp/pz	r2
(2)  585/ 60006CA :                     ; 		bt	.ypu_postv
(2)  586/ 60006CA :                     ; 		cmp/pz	r4
(2)  587/ 60006CA :                     ; 		bt	.ypu_postv
(2)  588/ 60006CA :                     ; 		add	r3,r4
(2)  589/ 60006CA :                     ; .ypu_postv:
(2)  590/ 60006CA :                     ; 		mov	r4,@(scrl_fbpos_y,r13)
(2)  591/ 60006CA :                     ;
(2)  592/ 60006CA :                     ; 	; ---------------------------------------
(2)  593/ 60006CA :                     ; 	; Update Framebuffer top-left position
(2)  594/ 60006CA :                     ; 	; ---------------------------------------
(2)  595/ 60006CA :                     ;
(2)  596/ 60006CA :                     ; 		mov	@(scrl_intrl_size,r13),r3
(2)  597/ 60006CA :                     ; 		mov	@(scrl_fbpos,r13),r0
(2)  598/ 60006CA :                     ; 		add	r1,r0
(2)  599/ 60006CA :                     ; 		cmp/pl	r1
(2)  600/ 60006CA :                     ; 		bf	.yx_negtv
(2)  601/ 60006CA :                     ; 		cmp/ge	r3,r0
(2)  602/ 60006CA :                     ; 		bf	.yx_negtv
(2)  603/ 60006CA :                     ; 		sub	r3,r0
(2)  604/ 60006CA :                     ; .yx_negtv:
(2)  605/ 60006CA :                     ; 		cmp/pz	r1
(2)  606/ 60006CA :                     ; 		bt	.yx_postv
(2)  607/ 60006CA :                     ; 		cmp/pz	r0
(2)  608/ 60006CA :                     ; 		bt	.yx_postv
(2)  609/ 60006CA :                     ; 		add	r3,r0
(2)  610/ 60006CA :                     ; .yx_postv:
(2)  611/ 60006CA :                     ; 		mov	r0,@(scrl_fbpos,r13)
(2)  612/ 60006CA :                     ; 		rts
(2)  613/ 60006CA :                     ; 		nop
(2)  614/ 60006CA :                     ; 		align 4
(2)  615/ 60006CA :                     ;
(2)  616/ 60006CA :                     ; ; --------------------------------------------------------
(2)  617/ 60006CA :                     ; ; MarsVideo_Bg_MdReq
(2)  618/ 60006CA :                     ; ;
(2)  619/ 60006CA :                     ; ; Input:
(2)  620/ 60006CA :                     ; ;  r1 | X increment
(2)  621/ 60006CA :                     ; ;  r2 | Y increment
(2)  622/ 60006CA :                     ; ; r14 | Genesis background buffer
(2)  623/ 60006CA :                     ; ; r13 | Scrolling-area buffer
(2)  624/ 60006CA :                     ; ;
(2)  625/ 60006CA :                     ; ; Breaks:
(2)  626/ 60006CA :                     ; ; ALL
(2)  627/ 60006CA :                     ; ; --------------------------------------------------------
(2)  628/ 60006CA :                     ;
(2)  629/ 60006CA :                     ; 		align 4
(2)  630/ 60006CA :                     ; MarsVideo_Bg_DrawReq:
(2)  631/ 60006CA :                     ; ; 		sts	pr,@-r15
(2)  632/ 60006CA :                     ;
(2)  633/ 60006CA :                     ; ; 	; ---------------------------------------
(2)  634/ 60006CA :                     ; ; 	; Set block update timers
(2)  635/ 60006CA :                     ; ; 	; ---------------------------------------
(2)  636/ 60006CA :                     ; ;
(2)  637/ 60006CA :                     ; ; 	; X timers
(2)  638/ 60006CA :                     ; ; 		mov	#2,r7
(2)  639/ 60006CA :                     ; ; 		xor	r6,r6
(2)  640/ 60006CA :                     ; ; 		mov	#Cach_DrawTimers,r8
(2)  641/ 60006CA :                     ; ; 		mov.b	@(md_bg_flags,r14),r0
(2)  642/ 60006CA :                     ; ; 		extu.b	r0,r0
(2)  643/ 60006CA :                     ; ; 		and	#%1111,r0
(2)  644/ 60006CA :                     ; ; 		tst	#%0001,r0		; bitDrwR
(2)  645/ 60006CA :                     ; ; 		bf	.x_r
(2)  646/ 60006CA :                     ; ; 		tst	#%0010,r0		; bitDrwL
(2)  647/ 60006CA :                     ; ; 		bt	.x_k
(2)  648/ 60006CA :                     ; ; 		mov	r6,@r8
(2)  649/ 60006CA :                     ; ; 		mov	r7,@(4,r8)
(2)  650/ 60006CA :                     ; ; 		bra	.x_k
(2)  651/ 60006CA :                     ; ; 		nop
(2)  652/ 60006CA :                     ; ; .x_r:
(2)  653/ 60006CA :                     ; ; 		mov	r7,@r8
(2)  654/ 60006CA :                     ; ; 		mov	r6,@(4,r8)
(2)  655/ 60006CA :                     ; ; .x_k:
(2)  656/ 60006CA :                     ; ; 		add	#8,r8
(2)  657/ 60006CA :                     ; ;
(2)  658/ 60006CA :                     ; ; 	; Y timers
(2)  659/ 60006CA :                     ; ; 		tst	#%0100,r0		; bitDrwD
(2)  660/ 60006CA :                     ; ; 		bf	.y_r
(2)  661/ 60006CA :                     ; ; 		tst	#%1000,r0		; bitDrwU
(2)  662/ 60006CA :                     ; ; 		bt	.y_k
(2)  663/ 60006CA :                     ; ; 		mov	r6,@r8
(2)  664/ 60006CA :                     ; ; 		mov	r7,@(4,r8)
(2)  665/ 60006CA :                     ; ; 		bra	.y_k
(2)  666/ 60006CA :                     ; ; 		nop
(2)  667/ 60006CA :                     ; ; .y_r:
(2)  668/ 60006CA :                     ; ; 		mov	r7,@r8
(2)  669/ 60006CA :                     ; ; 		mov	r6,@(4,r8)
(2)  670/ 60006CA :                     ; ; .y_k:
(2)  671/ 60006CA :                     ; ; 		rts
(2)  672/ 60006CA :                     ; ; 		nop
(2)  673/ 60006CA :                     ; ; 		align 4
(2)  674/ 60006CA :                     ;
(2)  675/ 60006CA :                     ; ; 	; ---------------------------------------
(2)  676/ 60006CA :                     ; ; 	; Set block update timers
(2)  677/ 60006CA :                     ; ; 	; ---------------------------------------
(2)  678/ 60006CA :                     ; ;
(2)  679/ 60006CA :                     ; 	; X timers
(2)  680/ 60006CA :                     ; 		mov	#2,r7
(2)  681/ 60006CA :                     ; 		mov	#Cach_DrawTimers,r8
(2)  682/ 60006CA :                     ; 		mov	r8,r5
(2)  683/ 60006CA :                     ; 		mov	@(scrl_blksize,r13),r6
(2)  684/ 60006CA :                     ; 		mov	r6,r4
(2)  685/ 60006CA :                     ; 		dt	r4
(2)  686/ 60006CA :                     ; 		neg	r6,r6
(2)  687/ 60006CA :                     ; 		mov	@(scrl_xset,r13),r3
(2)  688/ 60006CA :                     ; 		add	r1,r3
(2)  689/ 60006CA :                     ; 		mov	r3,r0
(2)  690/ 60006CA :                     ; 		and	r6,r0
(2)  691/ 60006CA :                     ; 		tst	r0,r0
(2)  692/ 60006CA :                     ; 		bt	.x_k
(2)  693/ 60006CA :                     ; 		cmp/pz	r1
(2)  694/ 60006CA :                     ; 		bt	.x_r
(2)  695/ 60006CA :                     ; 		add	#4,r5
(2)  696/ 60006CA :                     ; .x_r:
(2)  697/ 60006CA :                     ; 		mov	r7,@r5
(2)  698/ 60006CA :                     ; 		and	r4,r3
(2)  699/ 60006CA :                     ; .x_k:
(2)  700/ 60006CA :                     ; 		mov	r3,@(scrl_xset,r13)
(2)  701/ 60006CA :                     ;
(2)  702/ 60006CA :                     ; 	; Y timers
(2)  703/ 60006CA :                     ; 		add	#8,r8
(2)  704/ 60006CA :                     ; 		mov	@(scrl_yset,r13),r3
(2)  705/ 60006CA :                     ; 		add	r2,r3
(2)  706/ 60006CA :                     ; 		mov	r3,r0
(2)  707/ 60006CA :                     ; 		and	r6,r0
(2)  708/ 60006CA :                     ; 		tst	r0,r0
(2)  709/ 60006CA :                     ; 		bt	.y_k
(2)  710/ 60006CA :                     ; 		cmp/pz	r2
(2)  711/ 60006CA :                     ; 		bt	.y_r
(2)  712/ 60006CA :                     ; 		add	#4,r8
(2)  713/ 60006CA :                     ; .y_r:
(2)  714/ 60006CA :                     ; 		mov	r7,@r8
(2)  715/ 60006CA :                     ; 		and	r4,r3
(2)  716/ 60006CA :                     ; .y_k:
(2)  717/ 60006CA :                     ; 		mov	r3,@(scrl_yset,r13)
(2)  718/ 60006CA :                     ;
(2)  719/ 60006CA :                     ; 		rts
(2)  720/ 60006CA :                     ; 		nop
(2)  721/ 60006CA :                     ; 		align 4
(2)  722/ 60006CA :                     ;
(2)  723/ 60006CA :                     ; ; --------------------------------------------------------
(2)  724/ 60006CA :                     ; ; MarsVideo_DmaDraw
(2)  725/ 60006CA :                     ; ;
(2)  726/ 60006CA :                     ; ; Input:
(2)  727/ 60006CA :                     ; ; r1 - Source
(2)  728/ 60006CA :                     ; ; r2 - Destination
(2)  729/ 60006CA :                     ; ; r3 - Size / 4
(2)  730/ 60006CA :                     ; ; --------------------------------------------------------
(2)  731/ 60006CA :                     ;
(2)  732/ 60006CA :                     ; 		align 4
(2)  733/ 60006CA :                     ; MarsVideo_DmaDraw:
(2)  734/ 60006CA :                     ; 		mov	#_DMASOURCE1,r4
(2)  735/ 60006CA :                     ; 		mov	#%0101101011100000,r0
(2)  736/ 60006CA :                     ; 		mov	r0,@($0C,r4)
(2)  737/ 60006CA :                     ; 		mov	r1,r0
(2)  738/ 60006CA :                     ; 		mov	r0,@r4
(2)  739/ 60006CA :                     ; 		mov	r2,r0			; <-- point fbdata here
(2)  740/ 60006CA :                     ; 		mov	r0,@($04,r4)
(2)  741/ 60006CA :                     ; 		mov	r3,r0
(2)  742/ 60006CA :                     ; 		mov	r0,@($08,r4)
(2)  743/ 60006CA :                     ; 		mov	#%0101101011100001,r0
(2)  744/ 60006CA :                     ; 		mov	r0,@($0C,r4)
(2)  745/ 60006CA :                     ; .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  746/ 60006CA :                     ; 		tst	#%10,r0
(2)  747/ 60006CA :                     ; 		bt	.wait_dma
(2)  748/ 60006CA :                     ; 		mov	#%0101101011100000,r0
(2)  749/ 60006CA :                     ; 		mov	r0,@($C,r4)
(2)  750/ 60006CA :                     ; 		rts
(2)  751/ 60006CA :                     ; 		nop
(2)  752/ 60006CA :                     ; 		align 4
(2)  753/ 60006CA :                     ; 		ltorg
(2)  754/ 60006CA :                     ;
(2)  755/ 60006CA :                     ; ; --------------------------------------------------------
(2)  756/ 60006CA :                     ; ; MarsVideo_Bg_DrawScrl
(2)  757/ 60006CA :                     ; ;
(2)  758/ 60006CA :                     ; ; Input:
(2)  759/ 60006CA :                     ; ; r14 | Background buffer
(2)  760/ 60006CA :                     ; ; r13 | Scrolling-area buffer
(2)  761/ 60006CA :                     ; ; r12 | Draw timers
(2)  762/ 60006CA :                     ; ;
(2)  763/ 60006CA :                     ; ; Breaks:
(2)  764/ 60006CA :                     ; ; ALL
(2)  765/ 60006CA :                     ; ; --------------------------------------------------------
(2)  766/ 60006CA :                     ;
(2)  767/ 60006CA :                     ; 		align 4
(2)  768/ 60006CA :                     ; MarsVideo_Bg_DrawScrl:
(2)  769/ 60006CA :                     ; 		sts	pr,@-r15
(2)  770/ 60006CA :                     ;
(2)  771/ 60006CA :                     ; 		mov	#_framebuffer,r0
(2)  772/ 60006CA :                     ; 		mov	@(scrl_fbdata,r13),r1
(2)  773/ 60006CA :                     ; 		add	r0,r1
(2)  774/ 60006CA :                     ; 		mov	@(scrl_intrl_w,r13),r11		; r11 - FB width
(2)  775/ 60006CA :                     ; 		lds	r1,mach				; mach - FB base
(2)  776/ 60006CA :                     ; 		mov	@(scrl_fbpos_y,r13),r0
(2)  777/ 60006CA :                     ; 		mov	#-$10,r1			; <-- CUSTOM BLOCK SIZE
(2)  778/ 60006CA :                     ; 		mov	@(scrl_fbpos,r13),r10		; r10 - FB x/y pos
(2)  779/ 60006CA :                     ; 		and	r1,r0
(2)  780/ 60006CA :                     ; 		mov	@(md_bg_blk,r14),r9		; r9 - Block data
(2)  781/ 60006CA :                     ; 		mulu	r0,r11
(2)  782/ 60006CA :                     ; 		mov.w	@(md_bg_w,r14),r0		; r7 - Layout increment
(2)  783/ 60006CA :                     ; 		extu.w	r0,r7
(2)  784/ 60006CA :                     ; 		mov	@(scrl_intrl_size,r13),r12	; r12 - FB full size
(2)  785/ 60006CA :                     ; 		sts	macl,r0
(2)  786/ 60006CA :                     ; 		add	r0,r10
(2)  787/ 60006CA :                     ; 		and	r1,r10
(2)  788/ 60006CA :                     ; 		mov	@(md_bg_low,r14),r8		; r8 - Layout data
(2)  789/ 60006CA :                     ; 		mov	#RAM_Mars_ScrlData,r13
(2)  790/ 60006CA :                     ; 		cmp/ge	r12,r10
(2)  791/ 60006CA :                     ; 		bf	.fb_y
(2)  792/ 60006CA :                     ; 		sub	r12,r10
(2)  793/ 60006CA :                     ; .fb_y:
(2)  794/ 60006CA :                     ; 		mov	#Cach_DrawTimers,r1
(2)  795/ 60006CA :                     ; 		mov	@r1,r0
(2)  796/ 60006CA :                     ; 		tst	r0,r0
(2)  797/ 60006CA :                     ; 		bt	.no_r
(2)  798/ 60006CA :                     ; 		bsr	.draw_r
(2)  799/ 60006CA :                     ; 		nop
(2)  800/ 60006CA :                     ; .no_r:
(2)  801/ 60006CA :                     ; 		mov	#Cach_DrawTimers+4,r1
(2)  802/ 60006CA :                     ; 		mov	@r1,r0
(2)  803/ 60006CA :                     ; 		tst	r0,r0
(2)  804/ 60006CA :                     ; 		bt	.no_l
(2)  805/ 60006CA :                     ; 		bsr	.draw_l
(2)  806/ 60006CA :                     ; 		nop
(2)  807/ 60006CA :                     ; .no_l:
(2)  808/ 60006CA :                     ; 		mov	#Cach_DrawTimers+8,r1
(2)  809/ 60006CA :                     ; 		mov	@r1,r0
(2)  810/ 60006CA :                     ; 		tst	r0,r0
(2)  811/ 60006CA :                     ; 		bt	.no_d
(2)  812/ 60006CA :                     ; 		bsr	.draw_d
(2)  813/ 60006CA :                     ; 		nop
(2)  814/ 60006CA :                     ; .no_d:
(2)  815/ 60006CA :                     ; 		mov	#Cach_DrawTimers+$C,r1
(2)  816/ 60006CA :                     ; 		mov	@r1,r0
(2)  817/ 60006CA :                     ; 		tst	r0,r0
(2)  818/ 60006CA :                     ; 		bt	.no_u
(2)  819/ 60006CA :                     ; 		bsr	.draw_u
(2)  820/ 60006CA :                     ; 		nop
(2)  821/ 60006CA :                     ; .no_u:
(2)  822/ 60006CA :                     ;
(2)  823/ 60006CA :                     ; 		lds	@r15+,pr
(2)  824/ 60006CA :                     ; 		rts
(2)  825/ 60006CA :                     ; 		nop
(2)  826/ 60006CA :                     ;
(2)  827/ 60006CA :                     ; ; mach - FB base
(2)  828/ 60006CA :                     ; ; r13 - Background copy
(2)  829/ 60006CA :                     ; ; r12 - FB full size
(2)  830/ 60006CA :                     ; ; r11 - FB width
(2)  831/ 60006CA :                     ; ; r10 - FB x/y pos
(2)  832/ 60006CA :                     ; ; r9 - Block data
(2)  833/ 60006CA :                     ; ; r8 - Layout data
(2)  834/ 60006CA :                     ; ; r7 - Layout increment
(2)  835/ 60006CA :                     ;
(2)  836/ 60006CA :                     ; ; RIGHT/LEFT
(2)  837/ 60006CA :                     ; .draw_r:
(2)  838/ 60006CA :                     ; 		dt	r0
(2)  839/ 60006CA :                     ; 		mov	r0,@r1
(2)  840/ 60006CA :                     ; 		mov.w	@(md_bg_xinc_r,r14),r0		; r7 - Layout increment
(2)  841/ 60006CA :                     ; 		exts.w	r0,r2
(2)  842/ 60006CA :                     ; 		mov	#320,r1
(2)  843/ 60006CA :                     ; 		bra	.go_lr
(2)  844/ 60006CA :                     ; 		nop
(2)  845/ 60006CA :                     ; .draw_l:
(2)  846/ 60006CA :                     ; 		dt	r0
(2)  847/ 60006CA :                     ; 		mov	r0,@r1
(2)  848/ 60006CA :                     ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2)  849/ 60006CA :                     ; 		exts.w	r0,r2
(2)  850/ 60006CA :                     ; 		mov	#0,r1
(2)  851/ 60006CA :                     ; .go_lr:
(2)  852/ 60006CA :                     ; 		mov	r10,r6
(2)  853/ 60006CA :                     ; 		add	r1,r6
(2)  854/ 60006CA :                     ; ; 		mov	#-$10,r0
(2)  855/ 60006CA :                     ; ; 		and	r0,r6		; r6 - curr out pos
(2)  856/ 60006CA :                     ; 		mov	r8,@-r15
(2)  857/ 60006CA :                     ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2)  858/ 60006CA :                     ; 		exts.w	r0,r1
(2)  859/ 60006CA :                     ; 		mov	#16,r3		; <-- MANUAL BLOCK SIZE
(2)  860/ 60006CA :                     ; 		mulu	r3,r1
(2)  861/ 60006CA :                     ; 		sts	macl,r0
(2)  862/ 60006CA :                     ; 		shlr8	r0
(2)  863/ 60006CA :                     ; 		mulu	r7,r0
(2)  864/ 60006CA :                     ; 		sts	macl,r0
(2)  865/ 60006CA :                     ; 		add	r0,r8
(2)  866/ 60006CA :                     ; 		mulu	r3,r2
(2)  867/ 60006CA :                     ; 		sts	macl,r0
(2)  868/ 60006CA :                     ; 		shlr8	r0
(2)  869/ 60006CA :                     ; 		add	r0,r8
(2)  870/ 60006CA :                     ; 		mov	#((224+16)/16),r1
(2)  871/ 60006CA :                     ; .y_blk:
(2)  872/ 60006CA :                     ; 		mov	r1,@-r15
(2)  873/ 60006CA :                     ; 		mov	r9,r5
(2)  874/ 60006CA :                     ; 		mov.b	@r8,r0
(2)  875/ 60006CA :                     ; 		extu.b	r0,r0		; BYTE
(2)  876/ 60006CA :                     ; 		mov	#16*16,r3
(2)  877/ 60006CA :                     ; 		mulu	r3,r0
(2)  878/ 60006CA :                     ; 		sts	macl,r0
(2)  879/ 60006CA :                     ; 		mov	r9,r5
(2)  880/ 60006CA :                     ; 		add	r0,r5
(2)  881/ 60006CA :                     ;
(2)  882/ 60006CA :                     ; 		mov	#16,r3
(2)  883/ 60006CA :                     ; .y_lne:
(2)  884/ 60006CA :                     ; 		cmp/ge	r12,r6
(2)  885/ 60006CA :                     ; 		bf	.y_res
(2)  886/ 60006CA :                     ; 		sub	r12,r6
(2)  887/ 60006CA :                     ; .y_res:
(2)  888/ 60006CA :                     ; 		mov	#16/4,r4
(2)  889/ 60006CA :                     ; .x_lne:
(2)  890/ 60006CA :                     ; 		mov	@r5+,r0
(2)  891/ 60006CA :                     ; 		lds	r0,macl
(2)  892/ 60006CA :                     ; 		sts	mach,r1
(2)  893/ 60006CA :                     ; 		add	r6,r1
(2)  894/ 60006CA :                     ; 		mov	r13,r2
(2)  895/ 60006CA :                     ; 		add	r6,r2
(2)  896/ 60006CA :                     ; 		mov	r0,@r1
(2)  897/ 60006CA :                     ; 		add	#4,r6
(2)  898/ 60006CA :                     ; 		mov	r0,@r2
(2)  899/ 60006CA :                     ; 		mov	#320,r0
(2)  900/ 60006CA :                     ; 		cmp/ge	r0,r6
(2)  901/ 60006CA :                     ; 		bt	.x_ex
(2)  902/ 60006CA :                     ; 		sts	macl,r0
(2)  903/ 60006CA :                     ; 		add	r12,r1
(2)  904/ 60006CA :                     ; 		mov	r0,@r1
(2)  905/ 60006CA :                     ; 		add	r12,r2
(2)  906/ 60006CA :                     ; 		mov	r0,@r2
(2)  907/ 60006CA :                     ; 		nop
(2)  908/ 60006CA :                     ; .x_ex:
(2)  909/ 60006CA :                     ; 		dt	r4
(2)  910/ 60006CA :                     ; 		bf	.x_lne
(2)  911/ 60006CA :                     ; 		add	#-16,r6	; bring point back
(2)  912/ 60006CA :                     ; 		dt	r3
(2)  913/ 60006CA :                     ; 		bf/s	.y_lne
(2)  914/ 60006CA :                     ; 		add	r11,r6
(2)  915/ 60006CA :                     ; 		mov	@r15+,r1
(2)  916/ 60006CA :                     ; 		dt	r1
(2)  917/ 60006CA :                     ; 		bf/s	.y_blk
(2)  918/ 60006CA :                     ; 		add	r7,r8
(2)  919/ 60006CA :                     ; 		mov	@r15+,r8
(2)  920/ 60006CA :                     ; 		rts
(2)  921/ 60006CA :                     ; 		nop
(2)  922/ 60006CA :                     ;
(2)  923/ 60006CA :                     ; ; DOWN/UP
(2)  924/ 60006CA :                     ; .draw_d:
(2)  925/ 60006CA :                     ; 		dt	r0
(2)  926/ 60006CA :                     ; 		mov	r0,@r1
(2)  927/ 60006CA :                     ; 		mov.w	@(md_bg_yinc_d,r14),r0		; r7 - Layout increment
(2)  928/ 60006CA :                     ; 		exts.w	r0,r2
(2)  929/ 60006CA :                     ; 		mov	#224,r1
(2)  930/ 60006CA :                     ; 		bra	.go_du
(2)  931/ 60006CA :                     ; 		nop
(2)  932/ 60006CA :                     ; .draw_u:
(2)  933/ 60006CA :                     ; 		dt	r0
(2)  934/ 60006CA :                     ; 		mov	r0,@r1
(2)  935/ 60006CA :                     ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2)  936/ 60006CA :                     ; 		exts.w	r0,r2
(2)  937/ 60006CA :                     ; 		mov	#0,r1
(2)  938/ 60006CA :                     ; .go_du:
(2)  939/ 60006CA :                     ; 		mov	#CS3|$40,r3
(2)  940/ 60006CA :                     ; 		mov	r2,@r3
(2)  941/ 60006CA :                     ;
(2)  942/ 60006CA :                     ; 		mulu	r1,r11
(2)  943/ 60006CA :                     ; 		sts	macl,r0
(2)  944/ 60006CA :                     ; 		mov	r10,r6
(2)  945/ 60006CA :                     ; 		add	r0,r6
(2)  946/ 60006CA :                     ; ; 		mov	#-$10,r0
(2)  947/ 60006CA :                     ; ; 		and	r0,r6				; r6 - curr out pos
(2)  948/ 60006CA :                     ; 		mov	r8,@-r15
(2)  949/ 60006CA :                     ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2)  950/ 60006CA :                     ; 		exts.w	r0,r1
(2)  951/ 60006CA :                     ; 		mov	#16,r3				; <-- MANUAL BLOCK SIZE
(2)  952/ 60006CA :                     ; 		mulu	r3,r1
(2)  953/ 60006CA :                     ; 		sts	macl,r0
(2)  954/ 60006CA :                     ; 		shlr8	r0
(2)  955/ 60006CA :                     ; 		add	r0,r8
(2)  956/ 60006CA :                     ; 		mulu	r3,r2
(2)  957/ 60006CA :                     ; 		sts	macl,r0
(2)  958/ 60006CA :                     ; 		shlr8	r0
(2)  959/ 60006CA :                     ; 		mulu	r7,r0
(2)  960/ 60006CA :                     ; 		sts	macl,r0
(2)  961/ 60006CA :                     ; 		add	r0,r8
(2)  962/ 60006CA :                     ; 		mov	#((320+16)/16),r1
(2)  963/ 60006CA :                     ; .yd_blk:
(2)  964/ 60006CA :                     ; 		mov	r6,@-r15
(2)  965/ 60006CA :                     ; 		mov	r1,@-r15
(2)  966/ 60006CA :                     ; 		mov	r9,r5
(2)  967/ 60006CA :                     ; 		mov.b	@r8,r0
(2)  968/ 60006CA :                     ; 		extu.b	r0,r0		; BYTE
(2)  969/ 60006CA :                     ; 		mov	#16*16,r3
(2)  970/ 60006CA :                     ; 		mulu	r3,r0
(2)  971/ 60006CA :                     ; 		sts	macl,r0
(2)  972/ 60006CA :                     ; 		mov	r9,r5
(2)  973/ 60006CA :                     ; 		add	r0,r5
(2)  974/ 60006CA :                     ; ;
(2)  975/ 60006CA :                     ; 		mov	#16,r3
(2)  976/ 60006CA :                     ; .yd_lne:
(2)  977/ 60006CA :                     ; 		cmp/ge	r12,r6
(2)  978/ 60006CA :                     ; 		bf	.yd_res
(2)  979/ 60006CA :                     ; 		sub	r12,r6
(2)  980/ 60006CA :                     ; .yd_res:
(2)  981/ 60006CA :                     ; 		mov	#16/4,r4
(2)  982/ 60006CA :                     ; .xd_lne:
(2)  983/ 60006CA :                     ; 		mov	@r5+,r0
(2)  984/ 60006CA :                     ; 		lds	r0,macl
(2)  985/ 60006CA :                     ; 		sts	mach,r1
(2)  986/ 60006CA :                     ; 		add	r6,r1
(2)  987/ 60006CA :                     ; 		mov	r13,r2
(2)  988/ 60006CA :                     ; 		add	r6,r2
(2)  989/ 60006CA :                     ; 		mov	r0,@r1
(2)  990/ 60006CA :                     ; 		add	#4,r6
(2)  991/ 60006CA :                     ; 		mov	r0,@r2
(2)  992/ 60006CA :                     ; 		mov	#320,r0
(2)  993/ 60006CA :                     ; 		cmp/ge	r0,r6
(2)  994/ 60006CA :                     ; 		bt	.xd_ex
(2)  995/ 60006CA :                     ; 		sts	macl,r0
(2)  996/ 60006CA :                     ; 		add	r12,r1
(2)  997/ 60006CA :                     ; 		mov	r0,@r1
(2)  998/ 60006CA :                     ; 		add	r12,r2
(2)  999/ 60006CA :                     ; 		mov	r0,@r2
(2) 1000/ 60006CA :                     ; 		nop
(2) 1001/ 60006CA :                     ; .xd_ex:
(2) 1002/ 60006CA :                     ; 		dt	r4
(2) 1003/ 60006CA :                     ; 		bf	.xd_lne
(2) 1004/ 60006CA :                     ; 		add	#-16,r6	; bring point back
(2) 1005/ 60006CA :                     ; 		dt	r3
(2) 1006/ 60006CA :                     ; 		bf/s	.yd_lne
(2) 1007/ 60006CA :                     ; 		add	r11,r6
(2) 1008/ 60006CA :                     ;
(2) 1009/ 60006CA :                     ; 		mov	@r15+,r1
(2) 1010/ 60006CA :                     ; 		mov	@r15+,r6
(2) 1011/ 60006CA :                     ; 		mov	#16,r0
(2) 1012/ 60006CA :                     ; 		add	r0,r6
(2) 1013/ 60006CA :                     ; 		dt	r1
(2) 1014/ 60006CA :                     ; 		bf/s	.yd_blk
(2) 1015/ 60006CA :                     ; 		add	#1,r8
(2) 1016/ 60006CA :                     ; 		mov	@r15+,r8
(2) 1017/ 60006CA :                     ; 		rts
(2) 1018/ 60006CA :                     ; 		nop
(2) 1019/ 60006CA :                     ;
(2) 1020/ 60006CA :                     ; 		align 4
(2) 1021/ 60006CA :                     ; 		ltorg
(2) 1022/ 60006CA :                     ;
(2) 1023/ 60006CA :                     ; ; ; --------------------------------------------------------
(2) 1024/ 60006CA :                     ; ; ; MarsVideo_Bg_DrawScrl_UD
(2) 1025/ 60006CA :                     ; ; ;
(2) 1026/ 60006CA :                     ; ; ; Input:
(2) 1027/ 60006CA :                     ; ; ; r14 | Background buffer
(2) 1028/ 60006CA :                     ; ; ; r13 | Scrolling-area buffer
(2) 1029/ 60006CA :                     ; ; ; r12 | Draw timers
(2) 1030/ 60006CA :                     ; ; ;
(2) 1031/ 60006CA :                     ; ; ; Breaks:
(2) 1032/ 60006CA :                     ; ; ; ALL
(2) 1033/ 60006CA :                     ; ; ; --------------------------------------------------------
(2) 1034/ 60006CA :                     ; ;
(2) 1035/ 60006CA :                     ; ; 		align 4
(2) 1036/ 60006CA :                     ; ; MarsVideo_Bg_DrawScrl_UD:
(2) 1037/ 60006CA :                     ; ; 		sts	pr,@-r15
(2) 1038/ 60006CA :                     ; ;
(2) 1039/ 60006CA :                     ; ; 		mov	#_framebuffer,r0
(2) 1040/ 60006CA :                     ; ; 		mov	@(scrl_fbdata,r13),r1
(2) 1041/ 60006CA :                     ; ; 		add	r0,r1
(2) 1042/ 60006CA :                     ; ; 		mov	@(scrl_intrl_w,r13),r11		; r11 - FB width
(2) 1043/ 60006CA :                     ; ; 		lds	r1,mach				; mach - FB base
(2) 1044/ 60006CA :                     ; ; 		mov	@(scrl_fbpos_y,r13),r0
(2) 1045/ 60006CA :                     ; ; 		mov	#-$10,r1			; <-- CUSTOM BLOCK SIZE
(2) 1046/ 60006CA :                     ; ; 		mov	@(scrl_fbpos,r13),r10		; r10 - FB x/y pos
(2) 1047/ 60006CA :                     ; ; 		and	r1,r0
(2) 1048/ 60006CA :                     ; ; 		mov	@(md_bg_blk,r14),r9		; r9 - Block data
(2) 1049/ 60006CA :                     ; ; 		mulu	r0,r11
(2) 1050/ 60006CA :                     ; ; 		mov.w	@(md_bg_w,r14),r0		; r7 - Layout increment
(2) 1051/ 60006CA :                     ; ; 		extu.w	r0,r7
(2) 1052/ 60006CA :                     ; ; 		mov	@(scrl_intrl_size,r13),r12	; r12 - FB full size
(2) 1053/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1054/ 60006CA :                     ; ; 		add	r0,r10
(2) 1055/ 60006CA :                     ; ; 		and	r1,r10
(2) 1056/ 60006CA :                     ; ; 		mov	@(md_bg_low,r14),r8		; r8 - Layout data
(2) 1057/ 60006CA :                     ; ; 		mov	#RAM_Mars_ScrlData,r13
(2) 1058/ 60006CA :                     ; ; 		cmp/ge	r12,r10
(2) 1059/ 60006CA :                     ; ; 		bf	.fb_y
(2) 1060/ 60006CA :                     ; ; 		sub	r12,r10
(2) 1061/ 60006CA :                     ; ; .fb_y:
(2) 1062/ 60006CA :                     ; ; 		mov	#Cach_DrawTimers+8,r1
(2) 1063/ 60006CA :                     ; ; 		mov	@r1,r0
(2) 1064/ 60006CA :                     ; ; 		tst	r0,r0
(2) 1065/ 60006CA :                     ; ; 		bt	.no_d
(2) 1066/ 60006CA :                     ; ; 		bsr	.draw_d
(2) 1067/ 60006CA :                     ; ; 		nop
(2) 1068/ 60006CA :                     ; ; .no_d:
(2) 1069/ 60006CA :                     ; ; 		mov	#Cach_DrawTimers+$C,r1
(2) 1070/ 60006CA :                     ; ; 		mov	@r1,r0
(2) 1071/ 60006CA :                     ; ; 		tst	r0,r0
(2) 1072/ 60006CA :                     ; ; 		bt	.no_u
(2) 1073/ 60006CA :                     ; ; 		bsr	.draw_u
(2) 1074/ 60006CA :                     ; ; 		nop
(2) 1075/ 60006CA :                     ; ; .no_u:
(2) 1076/ 60006CA :                     ; ; 		lds	@r15+,pr
(2) 1077/ 60006CA :                     ; ; 		rts
(2) 1078/ 60006CA :                     ; ; 		nop
(2) 1079/ 60006CA :                     ; ; ; DOWN/UP
(2) 1080/ 60006CA :                     ; ; .draw_d:
(2) 1081/ 60006CA :                     ; ; 		dt	r0
(2) 1082/ 60006CA :                     ; ; 		mov	r0,@r1
(2) 1083/ 60006CA :                     ; ; 		mov.w	@(md_bg_yinc_d,r14),r0		; r7 - Layout increment
(2) 1084/ 60006CA :                     ; ; 		exts.w	r0,r2
(2) 1085/ 60006CA :                     ; ; 		mov	#224,r1
(2) 1086/ 60006CA :                     ; ; 		bra	.go_du
(2) 1087/ 60006CA :                     ; ; 		nop
(2) 1088/ 60006CA :                     ; ; .draw_u:
(2) 1089/ 60006CA :                     ; ; 		dt	r0
(2) 1090/ 60006CA :                     ; ; 		mov	r0,@r1
(2) 1091/ 60006CA :                     ; ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2) 1092/ 60006CA :                     ; ; 		exts.w	r0,r2
(2) 1093/ 60006CA :                     ; ; 		mov	#0,r1
(2) 1094/ 60006CA :                     ; ; .go_du:
(2) 1095/ 60006CA :                     ; ; 		mulu	r1,r11
(2) 1096/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1097/ 60006CA :                     ; ; 		mov	r10,r6
(2) 1098/ 60006CA :                     ; ; 		add	r0,r6
(2) 1099/ 60006CA :                     ; ; ; 		mov	#-$10,r0
(2) 1100/ 60006CA :                     ; ; ; 		and	r0,r6			; r6 - curr out pos
(2) 1101/ 60006CA :                     ; ; 		mov	r8,@-r15
(2) 1102/ 60006CA :                     ; ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2) 1103/ 60006CA :                     ; ; 		exts.w	r0,r1
(2) 1104/ 60006CA :                     ; ; 		mov	#16,r3		; <-- MANUAL BLOCK SIZE
(2) 1105/ 60006CA :                     ; ; 		mulu	r3,r1
(2) 1106/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1107/ 60006CA :                     ; ; 		shlr8	r0
(2) 1108/ 60006CA :                     ; ; 		add	r0,r8
(2) 1109/ 60006CA :                     ; ; 		mulu	r3,r2
(2) 1110/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1111/ 60006CA :                     ; ; 		shlr8	r0
(2) 1112/ 60006CA :                     ; ; 		mulu	r7,r0
(2) 1113/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1114/ 60006CA :                     ; ; 		add	r0,r8
(2) 1115/ 60006CA :                     ; ; 		mov	#((320+16)/16),r1
(2) 1116/ 60006CA :                     ; ; .yd_blk:
(2) 1117/ 60006CA :                     ; ; 		mov	r6,@-r15
(2) 1118/ 60006CA :                     ; ; 		mov	r1,@-r15
(2) 1119/ 60006CA :                     ; ; 		mov	r9,r5
(2) 1120/ 60006CA :                     ; ; 		mov.b	@r8,r0
(2) 1121/ 60006CA :                     ; ; 		extu.b	r0,r0		; BYTE
(2) 1122/ 60006CA :                     ; ; 		mov	#16*16,r3
(2) 1123/ 60006CA :                     ; ; 		mulu	r3,r0
(2) 1124/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1125/ 60006CA :                     ; ; 		mov	r9,r5
(2) 1126/ 60006CA :                     ; ; 		add	r0,r5
(2) 1127/ 60006CA :                     ; ; ;
(2) 1128/ 60006CA :                     ; ; 		mov	#16,r3
(2) 1129/ 60006CA :                     ; ; .yd_lne:
(2) 1130/ 60006CA :                     ; ; 		cmp/ge	r12,r6
(2) 1131/ 60006CA :                     ; ; 		bf	.yd_res
(2) 1132/ 60006CA :                     ; ; 		sub	r12,r6
(2) 1133/ 60006CA :                     ; ; .yd_res:
(2) 1134/ 60006CA :                     ; ; 		mov	#16/4,r4
(2) 1135/ 60006CA :                     ; ; .xd_lne:
(2) 1136/ 60006CA :                     ; ; 		mov	@r5+,r0
(2) 1137/ 60006CA :                     ; ; 		lds	r0,macl
(2) 1138/ 60006CA :                     ; ; 		sts	mach,r1
(2) 1139/ 60006CA :                     ; ; 		add	r6,r1
(2) 1140/ 60006CA :                     ; ; 		mov	r13,r2
(2) 1141/ 60006CA :                     ; ; 		add	r6,r2
(2) 1142/ 60006CA :                     ; ; 		mov	r0,@r1
(2) 1143/ 60006CA :                     ; ; 		add	#4,r6
(2) 1144/ 60006CA :                     ; ; 		mov	r0,@r2
(2) 1145/ 60006CA :                     ; ; 		mov	#320,r0
(2) 1146/ 60006CA :                     ; ; 		cmp/ge	r0,r6
(2) 1147/ 60006CA :                     ; ; 		bt	.xd_ex
(2) 1148/ 60006CA :                     ; ; 		sts	macl,r0
(2) 1149/ 60006CA :                     ; ; 		add	r12,r1
(2) 1150/ 60006CA :                     ; ; 		mov	r0,@r1
(2) 1151/ 60006CA :                     ; ; 		add	r12,r2
(2) 1152/ 60006CA :                     ; ; 		mov	r0,@r2
(2) 1153/ 60006CA :                     ; ; 		nop
(2) 1154/ 60006CA :                     ; ; .xd_ex:
(2) 1155/ 60006CA :                     ; ; 		dt	r4
(2) 1156/ 60006CA :                     ; ; 		bf	.xd_lne
(2) 1157/ 60006CA :                     ; ; 		add	#-16,r6	; bring point back
(2) 1158/ 60006CA :                     ; ; 		dt	r3
(2) 1159/ 60006CA :                     ; ; 		bf/s	.yd_lne
(2) 1160/ 60006CA :                     ; ; 		add	r11,r6
(2) 1161/ 60006CA :                     ; ;
(2) 1162/ 60006CA :                     ; ; 		mov	@r15+,r1
(2) 1163/ 60006CA :                     ; ; 		mov	@r15+,r6
(2) 1164/ 60006CA :                     ; ; 		mov	#16,r0
(2) 1165/ 60006CA :                     ; ; 		add	r0,r6
(2) 1166/ 60006CA :                     ; ; 		dt	r1
(2) 1167/ 60006CA :                     ; ; 		bf/s	.yd_blk
(2) 1168/ 60006CA :                     ; ; 		add	#1,r8
(2) 1169/ 60006CA :                     ; ; 		mov	@r15+,r8
(2) 1170/ 60006CA :                     ; ; 		rts
(2) 1171/ 60006CA :                     ; ; 		nop
(2) 1172/ 60006CA :                     ; ; 		align 4
(2) 1173/ 60006CA :                     ; ; 		ltorg
(2) 1174/ 60006CA :                     ;
(2) 1175/ 60006CA :                     ; ; ----------------------------------------------------------------
(2) 1176/ 60006CA :                     ; ; Super Sprites
(2) 1177/ 60006CA :                     ; ; ----------------------------------------------------------------
(2) 1178/ 60006CA :                     ;
(2) 1179/ 60006CA :                     ; ; --------------------------------------------------------
(2) 1180/ 60006CA :                     ; ; MarsVideo_MkSprCoords
(2) 1181/ 60006CA :                     ; ;
(2) 1182/ 60006CA :                     ; ; This creates a backup of the screen's position for
(2) 1183/ 60006CA :                     ; ; the sprite-refill boxes
(2) 1184/ 60006CA :                     ; ;
(2) 1185/ 60006CA :                     ; ; Input:
(2) 1186/ 60006CA :                     ; ; r1 - VRAM base
(2) 1187/ 60006CA :                     ; ; r2 - X Top-Left position
(2) 1188/ 60006CA :                     ; ; r3 - Y (real) position
(2) 1189/ 60006CA :                     ; ; r4 - Scrolling area Width
(2) 1190/ 60006CA :                     ; ; r5 - Scrolling area Height
(2) 1191/ 60006CA :                     ; ; r6 - Scroll area size
(2) 1192/ 60006CA :                     ; ; r7 - Output settings to this area
(2) 1193/ 60006CA :                     ; ;
(2) 1194/ 60006CA :                     ; ; Breaks:
(2) 1195/ 60006CA :                     ; ; r7
(2) 1196/ 60006CA :                     ; ; --------------------------------------------------------
(2) 1197/ 60006CA :                     ;
(2) 1198/ 60006CA :                     ; 		align 4
(2) 1199/ 60006CA :                     ; MarsVideo_MkSprCoords:
(2) 1200/ 60006CA :                     ; 		add	#4,r7
(2) 1201/ 60006CA :                     ; 		mov	r6,@-r7
(2) 1202/ 60006CA :                     ; 		mov	r5,@-r7
(2) 1203/ 60006CA :                     ; 		mov	r4,@-r7
(2) 1204/ 60006CA :                     ; 		mov	r3,@-r7
(2) 1205/ 60006CA :                     ; 		mov	r2,@-r7
(2) 1206/ 60006CA :                     ; 		mov	r1,@-r7
(2) 1207/ 60006CA :                     ; 		rts
(2) 1208/ 60006CA :                     ; 		nop
(2) 1209/ 60006CA :                     ; 		align 4
(2) 1210/ 60006CA :                     ;
(2) 1211/ 60006CA :                     ; ; --------------------------------------------------------
(2) 1212/ 60006CA :                     ; ; MarsVideo_MkSprBoxes
(2) 1213/ 60006CA :                     ; ; --------------------------------------------------------
(2) 1214/ 60006CA :                     ;
(2) 1215/ 60006CA :                     ; 		align 4
(2) 1216/ 60006CA :                     ; MarsVideo_MkSprBoxes:
(2) 1217/ 60006CA :                     ;  		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r14
(2) 1218/ 60006CA :                     ; 		mov	#Cach_SprBoxList,r13
(2) 1219/ 60006CA :                     ; .next_save:
(2) 1220/ 60006CA :                     ; 		mov	@(marsspr_data,r14),r0
(2) 1221/ 60006CA :                     ; 		tst	r0,r0
(2) 1222/ 60006CA :                     ; 		bt	.last
(2) 1223/ 60006CA :                     ; 		mov	#MAX_SSPRSPD,r0		; expand box (max speed)
(2) 1224/ 60006CA :                     ; 		mov	@(marsspr_x,r14),r5	; XXXX YYYY
(2) 1225/ 60006CA :                     ; 		exts.w	r5,r6
(2) 1226/ 60006CA :                     ; 		mov	@(marsspr_xfrm,r14),r7	; ?? ?? XX YY
(2) 1227/ 60006CA :                     ; 		shlr16	r5
(2) 1228/ 60006CA :                     ; 		exts.w	r5,r5
(2) 1229/ 60006CA :                     ; 		extu.b	r7,r8
(2) 1230/ 60006CA :                     ; 		shlr8	r7
(2) 1231/ 60006CA :                     ; 		extu.b	r7,r7
(2) 1232/ 60006CA :                     ; 		add	r5,r7
(2) 1233/ 60006CA :                     ; 		add	r6,r8
(2) 1234/ 60006CA :                     ; ; 		mov.w	@(marsspr_x,r14),r0
(2) 1235/ 60006CA :                     ; ; 		exts.w	r0,r5
(2) 1236/ 60006CA :                     ; ; 		mov.w	@(marsspr_y,r14),r0
(2) 1237/ 60006CA :                     ; ; 		exts.w	r0,r6
(2) 1238/ 60006CA :                     ; ; 		mov.b	@(marsspr_xs,r14),r0
(2) 1239/ 60006CA :                     ; ; 		exts.b	r0,r7
(2) 1240/ 60006CA :                     ; ; 		mov.b	@(marsspr_ys,r14),r0
(2) 1241/ 60006CA :                     ; ; 		exts.b	r0,r8
(2) 1242/ 60006CA :                     ; ; 		add	r5,r7
(2) 1243/ 60006CA :                     ; ; 		add	r6,r8
(2) 1244/ 60006CA :                     ;
(2) 1245/ 60006CA :                     ; 		sub	r0,r5	; expand box
(2) 1246/ 60006CA :                     ; 		sub	r0,r6
(2) 1247/ 60006CA :                     ; 		add	r0,r7
(2) 1248/ 60006CA :                     ; 		add	r0,r8
(2) 1249/ 60006CA :                     ; ; 		shlr	r0
(2) 1250/ 60006CA :                     ; 		add	r0,r7
(2) 1251/ 60006CA :                     ; ; 		add	r0,r8
(2) 1252/ 60006CA :                     ; 		mov	#-4,r0	; align by 4
(2) 1253/ 60006CA :                     ; 		and	r0,r5
(2) 1254/ 60006CA :                     ; 		and	r0,r7
(2) 1255/ 60006CA :                     ; 		and	r0,r6
(2) 1256/ 60006CA :                     ; 		and	r0,r8
(2) 1257/ 60006CA :                     ; 		mov	#320+16,r1
(2) 1258/ 60006CA :                     ; 		mov	#224+16,r2
(2) 1259/ 60006CA :                     ; 		cmp/pl	r7
(2) 1260/ 60006CA :                     ; 		bf	.spr_out
(2) 1261/ 60006CA :                     ; 		cmp/pl	r8
(2) 1262/ 60006CA :                     ; 		bf	.spr_out
(2) 1263/ 60006CA :                     ; 		cmp/ge	r1,r5
(2) 1264/ 60006CA :                     ; 		bt	.spr_out
(2) 1265/ 60006CA :                     ; 		cmp/ge	r2,r6
(2) 1266/ 60006CA :                     ; 		bt	.spr_out
(2) 1267/ 60006CA :                     ; 		cmp/pz	r5
(2) 1268/ 60006CA :                     ; 		bt	.xl_l
(2) 1269/ 60006CA :                     ; 		xor	r5,r5
(2) 1270/ 60006CA :                     ; .xl_l:
(2) 1271/ 60006CA :                     ; 		cmp/pz	r6
(2) 1272/ 60006CA :                     ; 		bt	.yl_l
(2) 1273/ 60006CA :                     ; 		xor	r6,r6
(2) 1274/ 60006CA :                     ; .yl_l:
(2) 1275/ 60006CA :                     ; 		cmp/gt	r1,r7
(2) 1276/ 60006CA :                     ; 		bf	.xr_l
(2) 1277/ 60006CA :                     ; 		mov	r1,r7
(2) 1278/ 60006CA :                     ; .xr_l:
(2) 1279/ 60006CA :                     ; 		cmp/gt	r2,r8
(2) 1280/ 60006CA :                     ; 		bf	.yr_l
(2) 1281/ 60006CA :                     ; 		mov	r2,r8
(2) 1282/ 60006CA :                     ; .yr_l:
(2) 1283/ 60006CA :                     ; 		mulu	r11,r6
(2) 1284/ 60006CA :                     ; 		sts	macl,r0
(2) 1285/ 60006CA :                     ; 		add	r0,r4
(2) 1286/ 60006CA :                     ; .y_lp:
(2) 1287/ 60006CA :                     ; 		cmp/gt	r12,r4
(2) 1288/ 60006CA :                     ; 		bf	.y_keep
(2) 1289/ 60006CA :                     ; 		sub	r12,r4
(2) 1290/ 60006CA :                     ; .y_keep:
(2) 1291/ 60006CA :                     ;
(2) 1292/ 60006CA :                     ; 	; r5 - X left
(2) 1293/ 60006CA :                     ; 	; r6 - Y top
(2) 1294/ 60006CA :                     ; 	; r7 - X right
(2) 1295/ 60006CA :                     ; 	; r8 - Y bottom
(2) 1296/ 60006CA :                     ; 	;
(2) 1297/ 60006CA :                     ; 	; (Xend>>2)|$80,(Xstart>>2),Ybottom,Ytop
(2) 1298/ 60006CA :                     ; 		mov	r7,r0
(2) 1299/ 60006CA :                     ; 		shlr2	r0
(2) 1300/ 60006CA :                     ; 		extu.b	r0,r0
(2) 1301/ 60006CA :                     ; 		or	#$80,r0
(2) 1302/ 60006CA :                     ; 		shll16	r0
(2) 1303/ 60006CA :                     ; 		shll8	r0
(2) 1304/ 60006CA :                     ; 		mov	r5,r2
(2) 1305/ 60006CA :                     ; 		shll16	r2
(2) 1306/ 60006CA :                     ; 		shlr2	r2
(2) 1307/ 60006CA :                     ; 		mov	r0,r3
(2) 1308/ 60006CA :                     ; 		mov	r6,r0
(2) 1309/ 60006CA :                     ; 		mov	r8,r1
(2) 1310/ 60006CA :                     ; 		extu.b	r1,r1
(2) 1311/ 60006CA :                     ; 		shll8	r1
(2) 1312/ 60006CA :                     ; 		and	#$FF,r0
(2) 1313/ 60006CA :                     ; 		or	r3,r0
(2) 1314/ 60006CA :                     ; 		or	r2,r0
(2) 1315/ 60006CA :                     ; 		or	r1,r0
(2) 1316/ 60006CA :                     ; 		mov	r0,@r13
(2) 1317/ 60006CA :                     ; 		add	#4,r13
(2) 1318/ 60006CA :                     ; .spr_out:
(2) 1319/ 60006CA :                     ; 		bra	.next_save
(2) 1320/ 60006CA :                     ; 		add 	#sizeof_marsspr,r14
(2) 1321/ 60006CA :                     ; .last:
(2) 1322/ 60006CA :                     ; 		rts
(2) 1323/ 60006CA :                     ; 		nop
(2) 1324/ 60006CA :                     ; 		align 4
(2) 1325/ 60006CA :                     ; 		ltorg
(2) 1326/ 60006CA :                     ;
(2) 1327/ 60006CA :                     ; ; ====================================================================
(2) 1328/ 60006CA :                     ; ; ----------------------------------------------------------------
(2) 1329/ 60006CA :                     ; ; 3D Section
(2) 1330/ 60006CA :                     ; ;
(2) 1331/ 60006CA :                     ; ; Nothing to see here (yet), all stuff is
(2) 1332/ 60006CA :                     ; ; located at cache_m_3D.asm
(2) 1333/ 60006CA :                     ; ; ----------------------------------------------------------------
(2) 1334/ 60006CA :                     
(1)  946/ 60006CA :                     		include "system/mars/sound.asm"
(2)    1/ 60006CA :                     ; ====================================================================
(2)    2/ 60006CA :                     ; ----------------------------------------------------------------
(2)    3/ 60006CA :                     ; 32X Sound (For SLAVE CPU ONLY)
(2)    4/ 60006CA :                     ;
(2)    5/ 60006CA :                     ; Playback code (the PWM interrupt) is located at cache_slv.asm
(2)    6/ 60006CA :                     ; ----------------------------------------------------------------
(2)    7/ 60006CA :                     
(2)    8/ 60006CA :                     ; --------------------------------------------------------
(2)    9/ 60006CA :                     ; Settings
(2)   10/ 60006CA :                     ; --------------------------------------------------------
(2)   11/ 60006CA :                     
(2)   12/ 60006CA :                     ; MAX_PWMCHNL	equ 7		; MAXIMUM usable PWM channels (TODO: keep it like this)
(2)   13/ 60006CA :                     ; MAX_PWMBACKUP	equ $80		; 1-bit sizes only: $40,$80,$100...
(2)   14/ 60006CA : =$5622              SAMPLE_RATE	equ 22050
(2)   15/ 60006CA :                     
(2)   16/ 60006CA :                     ; --------------------------------------------------------
(2)   17/ 60006CA :                     ; Structs
(2)   18/ 60006CA :                     ; --------------------------------------------------------
(2)   19/ 60006CA :                     
(2)   20/ 60006CA :                     ; ; 32X sound channel
(2)   21/ 60006CA :                     ; 		struct 0
(2)   22/ 60006CA :                     ; mchnsnd_enbl	ds.l 1
(2)   23/ 60006CA :                     ; mchnsnd_read	ds.l 1		; 0 - off
(2)   24/ 60006CA :                     ; mchnsnd_cchread	ds.l 1
(2)   25/ 60006CA :                     ; mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   26/ 60006CA :                     ; mchnsnd_start	ds.l 1
(2)   27/ 60006CA :                     ; mchnsnd_end	ds.l 1
(2)   28/ 60006CA :                     ; mchnsnd_loop	ds.l 1
(2)   29/ 60006CA :                     ; mchnsnd_pitch	ds.l 1
(2)   30/ 60006CA :                     ; mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   31/ 60006CA :                     ; mchnsnd_vol	ds.l 1
(2)   32/ 60006CA :                     ; sizeof_sndchn	ds.l 0
(2)   33/ 60006CA :                     ; 		finish
(2)   34/ 60006CA :                     
(2)   35/ 60006CA :                     ; ====================================================================
(2)   36/ 60006CA :                     ; --------------------------------------------------------
(2)   37/ 60006CA :                     ; Init Sound PWM
(2)   38/ 60006CA :                     ;
(2)   39/ 60006CA :                     ; Cycle register formulas:
(2)   40/ 60006CA :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   41/ 60006CA :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   42/ 60006CA :                     ;
(2)   43/ 60006CA :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   44/ 60006CA :                     ; --------------------------------------------------------
(2)   45/ 60006CA :                     
(2)   46/ 60006CA :                     		align 4
(2)   47/ 60006CC :                     MarsSound_Init:
(2)   48/ 60006CC : 4F13                		stc	gbr,@-r15
(2)   49/ 60006CE : D00B                		mov	#_sysreg,r0
(2)   50/ 60006D0 : 401E                		ldc	r0,gbr
(2)   51/ 60006D2 : 9019                		mov	#$0105,r0					; Timing interval $01, output L/R
(2)   52/ 60006D4 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   53/ 60006D6 : 9018                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Samplerate
(2)   54/ 60006D8 : C119                		mov.w	r0,@(cycle,gbr)
(2)   55/ 60006DA : E001                		mov	#1,r0
(2)   56/ 60006DC : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   57/ 60006DE : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   58/ 60006E0 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   59/ 60006E2 : 4F17                		ldc	@r15+,gbr
(2)   60/ 60006E4 : 000B                		rts
(2)   61/ 60006E6 : 0009                		nop
(2)   62/ 60006E8 :                     		align 4
(2)   63/ 60006E8 :                     
(2)   64/ 60006E8 :                     ; ====================================================================
(2)   65/ 60006E8 :                     ; ----------------------------------------------------------------
(2)   66/ 60006E8 :                     ; Subroutines
(2)   67/ 60006E8 :                     ; ----------------------------------------------------------------
(2)   68/ 60006E8 :                     
(2)   69/ 60006E8 :                     ; --------------------------------------------------------
(2)   70/ 60006E8 :                     ; Input:
(2)   71/ 60006E8 :                     ; r1 - Source
(2)   72/ 60006E8 :                     ; r2 - Destination
(2)   73/ 60006E8 :                     ; r3 - Size / 4
(2)   74/ 60006E8 :                     ; --------------------------------------------------------
(2)   75/ 60006E8 :                     
(2)   76/ 60006E8 :                     MarsSound_FirstFill:
(2)   77/ 60006E8 : D105                		mov	#RAM_Mars_GemaWave_0,r1
(2)   78/ 60006EA : 920F                		mov	#($1000*3)/4,r2
(2)   79/ 60006EC : D005                		mov	#$00800080,r0
(2)   80/ 60006EE :                     .fill_both:
(2)   81/ 60006EE : 2102                		mov	r0,@r1
(2)   82/ 60006F0 : 4210                		dt	r2
(2)   83/ 60006F2 : 8FFC                		bf/s	.fill_both
(2)   84/ 60006F4 : 7104                		add	#4,r1
(2)   85/ 60006F6 :                     
(2)   86/ 60006F6 :                     ; 		mov	#_DMAOPERATION,r1
(2)   87/ 60006F6 :                     
(2)   88/ 60006F6 :                     ; 		mov	#,r1
(2)   89/ 60006F6 :                     ; 		mov	#,r2
(2)   90/ 60006F6 :                     ;
(2)   91/ 60006F6 :                     ; 		mov	#_DMAOPERATION,r5
(2)   92/ 60006F6 :                     ; 		mov	#_DMASOURCE1,r4
(2)   93/ 60006F6 :                     ; 		mov	#0,r0
(2)   94/ 60006F6 :                     ; 		mov	r0,@r5
(2)   95/ 60006F6 :                     ; 		mov	#%0101101011100000,r0
(2)   96/ 60006F6 :                     ; 		mov	r0,@($0C,r4)
(2)   97/ 60006F6 :                     ; 		mov	r1,r0
(2)   98/ 60006F6 :                     ; 		mov	r0,@r4
(2)   99/ 60006F6 :                     ; 		mov	r2,r0			; <-- point fbdata here
(2)  100/ 60006F6 :                     ; 		mov	r0,@($04,r4)
(2)  101/ 60006F6 :                     ; 		mov	r3,r0
(2)  102/ 60006F6 :                     ; 		mov	r0,@($08,r4)
(2)  103/ 60006F6 :                     ; 		mov	#%0101101011100001,r0
(2)  104/ 60006F6 :                     ; 		mov	r0,@($0C,r4)
(2)  105/ 60006F6 :                     ; 		mov	#1,r0
(2)  106/ 60006F6 :                     ; 		mov	r0,@r5
(2)  107/ 60006F6 :                     ; .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  108/ 60006F6 :                     ; 		tst	#%10,r0
(2)  109/ 60006F6 :                     ; 		bt	.wait_dma
(2)  110/ 60006F6 :                     ; 		mov	#0,r0
(2)  111/ 60006F6 :                     ; 		mov	r0,@r5
(2)  112/ 60006F6 :                     ; 		mov	#%0101101011100000,r0
(2)  113/ 60006F6 :                     ; 		mov	r0,@($C,r4)
(2)  114/ 60006F6 : 000B                		rts
(2)  115/ 60006F8 : 0009                		nop
(2)  116/ 60006FA :                     		align 4
(2)  117/ 60006FC : 2000 4000 2601 6200 		ltorg
                    0080 0080 0105 0415 
                    0C00                
(2)  118/ 600070E :                     
(2)  119/ 600070E :                     ; ; --------------------------------------------------------
(2)  120/ 600070E :                     ; ; MarsSound_SetPwm
(2)  121/ 600070E :                     ; ;
(2)  122/ 600070E :                     ; ; Sets new sound data to a channel slot, automaticly
(2)  123/ 600070E :                     ; ; plays.
(2)  124/ 600070E :                     ; ;
(2)  125/ 600070E :                     ; ; Input:
(2)  126/ 600070E :                     ; ; r1 | Channel (0-6)
(2)  127/ 600070E :                     ; ; r2 | Start address (SH2 AREA)
(2)  128/ 600070E :                     ; ; r3 | End address (SH2 AREA)
(2)  129/ 600070E :                     ; ; r4 | Loop address (SH2 AREA, ignored if loop bit isn't set)
(2)  130/ 600070E :                     ; ; r5 | Starting pitch ($xxxxxx.xx, $100 default speed)
(2)  131/ 600070E :                     ; ; r6 | Volume (0-High)
(2)  132/ 600070E :                     ; ; r7 | Flags: %xxxxslLR
(2)  133/ 600070E :                     ; ;      LR - Enable output to these speakers
(2)  134/ 600070E :                     ; ;       l - LOOP flag
(2)  135/ 600070E :                     ; ;       s - Sample data is in Stereo (16-bit)
(2)  136/ 600070E :                     ; ;
(2)  137/ 600070E :                     ; ; Breaks:
(2)  138/ 600070E :                     ; ; r0,r8-r9,macl
(2)  139/ 600070E :                     ; ; --------------------------------------------------------
(2)  140/ 600070E :                     ;
(2)  141/ 600070E :                     ; MarsSound_SetPwm:
(2)  142/ 600070E :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  143/ 600070E :                     ; 		mov 	#sizeof_sndchn,r0
(2)  144/ 600070E :                     ; 		mulu	r1,r0
(2)  145/ 600070E :                     ; 		sts	macl,r0
(2)  146/ 600070E :                     ; 		add 	r0,r8
(2)  147/ 600070E :                     ; 		mov 	#0,r0
(2)  148/ 600070E :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  149/ 600070E :                     ; ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  150/ 600070E :                     ; ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  151/ 600070E :                     ; 		mov 	r5,@(mchnsnd_pitch,r8)
(2)  152/ 600070E :                     ; 		mov 	r6,@(mchnsnd_vol,r8)
(2)  153/ 600070E :                     ; 		mov 	r7,@(mchnsnd_flags,r8)
(2)  154/ 600070E :                     ; 		mov 	r2,r0				; Set MSB
(2)  155/ 600070E :                     ; 		mov	#-1,r9				; r9 - FF000000
(2)  156/ 600070E :                     ; 		shll16	r9
(2)  157/ 600070E :                     ; 		shll8	r9
(2)  158/ 600070E :                     ; 		and	r9,r0
(2)  159/ 600070E :                     ; ; 		mov 	#$FF000000,r9
(2)  160/ 600070E :                     ; ; 		and 	r9,r0
(2)  161/ 600070E :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  162/ 600070E :                     ; 		mov 	r4,r0				; Set POINTS
(2)  163/ 600070E :                     ; 		cmp/eq	#-1,r0
(2)  164/ 600070E :                     ; 		bt	.endmrk
(2)  165/ 600070E :                     ; 		shll8	r0
(2)  166/ 600070E :                     ; .endmrk:
(2)  167/ 600070E :                     ; 		mov	r0,@(mchnsnd_loop,r8)
(2)  168/ 600070E :                     ; 		mov 	r3,r0
(2)  169/ 600070E :                     ; 		shll8	r0
(2)  170/ 600070E :                     ; 		mov	r0,@(mchnsnd_end,r8)
(2)  171/ 600070E :                     ; 		mov 	r2,r0
(2)  172/ 600070E :                     ; 		shll8	r0
(2)  173/ 600070E :                     ; 		mov 	r0,@(mchnsnd_start,r8)
(2)  174/ 600070E :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  175/ 600070E :                     ; 		mov 	#1,r0
(2)  176/ 600070E :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  177/ 600070E :                     ; 		rts
(2)  178/ 600070E :                     ; 		nop
(2)  179/ 600070E :                     ; 		align 4
(2)  180/ 600070E :                     ;
(2)  181/ 600070E :                     ; ; --------------------------------------------------------
(2)  182/ 600070E :                     ; ; MarsSound_SetPwmPitch
(2)  183/ 600070E :                     ; ;
(2)  184/ 600070E :                     ; ; Sets pitch data of a channel slot
(2)  185/ 600070E :                     ; ;
(2)  186/ 600070E :                     ; ; Input:
(2)  187/ 600070E :                     ; ; r1 | Channel (0-6)
(2)  188/ 600070E :                     ; ; r2 | Pitch ($xxxxxx.xx, $100 default speed)
(2)  189/ 600070E :                     ; ;
(2)  190/ 600070E :                     ; ; Breaks:
(2)  191/ 600070E :                     ; ; r8,macl
(2)  192/ 600070E :                     ; ; --------------------------------------------------------
(2)  193/ 600070E :                     ;
(2)  194/ 600070E :                     ; MarsSound_SetPwmPitch:
(2)  195/ 600070E :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  196/ 600070E :                     ; 		mov 	#sizeof_sndchn,r0
(2)  197/ 600070E :                     ; 		mulu	r1,r0
(2)  198/ 600070E :                     ; 		sts	macl,r0
(2)  199/ 600070E :                     ; 		add 	r0,r8
(2)  200/ 600070E :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  201/ 600070E :                     ; 		cmp/eq	#1,r0
(2)  202/ 600070E :                     ; 		bf	.off_1
(2)  203/ 600070E :                     ; 		mov	@(mchnsnd_read,r8),r0
(2)  204/ 600070E :                     ; 		mov	r2,@(mchnsnd_pitch,r8)
(2)  205/ 600070E :                     ; .off_1:
(2)  206/ 600070E :                     ; 		rts
(2)  207/ 600070E :                     ; 		nop
(2)  208/ 600070E :                     ; 		align 4
(2)  209/ 600070E :                     ;
(2)  210/ 600070E :                     ; ; --------------------------------------------------------
(2)  211/ 600070E :                     ; ; MarsSound_SetVolume
(2)  212/ 600070E :                     ; ;
(2)  213/ 600070E :                     ; ; Changes the volume of a channel slot
(2)  214/ 600070E :                     ; ;
(2)  215/ 600070E :                     ; ; Input:
(2)  216/ 600070E :                     ; ; r1 | Channel (0-6)
(2)  217/ 600070E :                     ; ; r2 | Volume (in reverse: higher value is low)
(2)  218/ 600070E :                     ; ;
(2)  219/ 600070E :                     ; ; Breaks:
(2)  220/ 600070E :                     ; ; r8,macl
(2)  221/ 600070E :                     ; ; --------------------------------------------------------
(2)  222/ 600070E :                     ;
(2)  223/ 600070E :                     ; MarsSound_SetVolume:
(2)  224/ 600070E :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  225/ 600070E :                     ; 		mov 	#sizeof_sndchn,r0
(2)  226/ 600070E :                     ; 		mulu	r1,r0
(2)  227/ 600070E :                     ; 		sts	macl,r0
(2)  228/ 600070E :                     ; 		add 	r0,r8
(2)  229/ 600070E :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  230/ 600070E :                     ; 		cmp/eq	#1,r0
(2)  231/ 600070E :                     ; 		bf	.off_1
(2)  232/ 600070E :                     ; 		mov	r2,r0
(2)  233/ 600070E :                     ; 		mov	r0,@(mchnsnd_vol,r8)
(2)  234/ 600070E :                     ; .off_1:
(2)  235/ 600070E :                     ; 		rts
(2)  236/ 600070E :                     ; 		nop
(2)  237/ 600070E :                     ; 		align 4
(2)  238/ 600070E :                     ;
(2)  239/ 600070E :                     ; ; --------------------------------------------------------
(2)  240/ 600070E :                     ; ; MarsSound_PwmEnable
(2)  241/ 600070E :                     ; ;
(2)  242/ 600070E :                     ; ; Turns ON or OFF Current PWM slot
(2)  243/ 600070E :                     ; ;
(2)  244/ 600070E :                     ; ; Input:
(2)  245/ 600070E :                     ; ; r1 | Channel (0-6)
(2)  246/ 600070E :                     ; ; r2 | Enable/Disable
(2)  247/ 600070E :                     ; ;
(2)  248/ 600070E :                     ; ; Breaks:
(2)  249/ 600070E :                     ; ; r8,macl
(2)  250/ 600070E :                     ; ; --------------------------------------------------------
(2)  251/ 600070E :                     ;
(2)  252/ 600070E :                     ; MarsSound_PwmEnable:
(2)  253/ 600070E :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  254/ 600070E :                     ; 		mov 	#sizeof_sndchn,r0
(2)  255/ 600070E :                     ; 		mulu	r1,r0
(2)  256/ 600070E :                     ; 		sts	macl,r0
(2)  257/ 600070E :                     ; 		add 	r0,r8
(2)  258/ 600070E :                     ; 		mov 	r2,@(mchnsnd_enbl,r8)
(2)  259/ 600070E :                     ; ; 		mov 	#0,r0
(2)  260/ 600070E :                     ; ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  261/ 600070E :                     ; ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  262/ 600070E :                     ; 		rts
(2)  263/ 600070E :                     ; 		nop
(2)  264/ 600070E :                     ; 		align 4
(2)  265/ 600070E :                     ;
(2)  266/ 600070E :                     ; ; --------------------------------------------------------
(2)  267/ 600070E :                     ; ; MarsSound_Refill
(2)  268/ 600070E :                     ; ;
(2)  269/ 600070E :                     ; ; Call this before the 68K side closes ROM access
(2)  270/ 600070E :                     ; ; (before 68k side sets RV=1)
(2)  271/ 600070E :                     ; ;
(2)  272/ 600070E :                     ; ; Breaks:
(2)  273/ 600070E :                     ; ; r1-r8
(2)  274/ 600070E :                     ; ;
(2)  275/ 600070E :                     ; ; NOTE:
(2)  276/ 600070E :                     ; ; The trick here is to keep PWM interrupt enabled
(2)  277/ 600070E :                     ; ; while filling the backup data
(2)  278/ 600070E :                     ; ; --------------------------------------------------------
(2)  279/ 600070E :                     ;
(2)  280/ 600070E :                     ; MarsSnd_Refill:
(2)  281/ 600070E :                     ; 		mov	#MarsSnd_PwmChnls,r8
(2)  282/ 600070E :                     ; 		mov	#MAX_PWMCHNL,r6
(2)  283/ 600070E :                     ; 		mov	#sizeof_sndchn,r7
(2)  284/ 600070E :                     ; 		mov	#MarsSnd_PwmCache,r5
(2)  285/ 600070E :                     ; .next_one:
(2)  286/ 600070E :                     ; 		mov	@(mchnsnd_enbl,r8),r0	; This channel is active?
(2)  287/ 600070E :                     ; 		cmp/eq	#1,r0
(2)  288/ 600070E :                     ; 		bf	.not_enbl
(2)  289/ 600070E :                     ; 		mov	@(mchnsnd_bank,r8),r0	; ROM area?
(2)  290/ 600070E :                     ; 		mov	#CS1,r2
(2)  291/ 600070E :                     ; 		cmp/eq	r2,r0
(2)  292/ 600070E :                     ; 		bf	.not_enbl
(2)  293/ 600070E :                     ; 		mov	#0,r1			; Reset backup LSB
(2)  294/ 600070E :                     ; 		mov	r1,@(mchnsnd_cchread,r8)
(2)  295/ 600070E :                     ; 		mov	r5,r1
(2)  296/ 600070E :                     ; 		mov	#MAX_PWMBACKUP/4,r2	; Max bytes / 4
(2)  297/ 600070E :                     ; 		mov	@(mchnsnd_read,r8),r4	; r4 - OLD READ pos
(2)  298/ 600070E :                     ; 		mov	r4,r3
(2)  299/ 600070E :                     ; 		shlr8	r3
(2)  300/ 600070E :                     ; 		add	r0,r3
(2)  301/ 600070E :                     ; .copy_now:
(2)  302/ 600070E :                     ; 	rept 4-1
(2)  303/ 600070E :                     ; 		mov.b	@r3+,r0		; byte by byte...
(2)  304/ 600070E :                     ; 		mov.b	r0,@r1
(2)  305/ 600070E :                     ; 		add	#1,r1
(2)  306/ 600070E :                     ; 	endm
(2)  307/ 600070E :                     ; 		mov.b	@r3+,r0
(2)  308/ 600070E :                     ; 		mov.b	r0,@r1
(2)  309/ 600070E :                     ; 		dt	r2
(2)  310/ 600070E :                     ; 		bf/s	.copy_now
(2)  311/ 600070E :                     ; 		add	#1,r1
(2)  312/ 600070E :                     ; .not_enbl:
(2)  313/ 600070E :                     ; 		mov	#MAX_PWMBACKUP,r0
(2)  314/ 600070E :                     ; 		add	r0,r5
(2)  315/ 600070E :                     ; 		dt	r6
(2)  316/ 600070E :                     ; 		bf/s	.next_one
(2)  317/ 600070E :                     ; 		add	r7,r8
(2)  318/ 600070E :                     ; 		rts
(2)  319/ 600070E :                     ; 		nop
(2)  320/ 600070E :                     ; 		align 4
(2)  321/ 600070E :                     
(2)  322/ 600070E :                     ; ====================================================================
(2)  323/ 600070E :                     
(2)  324/ 600070E :                     		ltorg			; Save literals
(2)  325/ 600070E :                     
(1)  947/ 600070E :                     ; 		align 4
(1)  948/ 600070E :                     
(1)  949/ 600070E :                     ; ====================================================================
(1)  950/ 600070E :                     ; ----------------------------------------------------------------
(1)  951/ 600070E :                     ; Master entry
(1)  952/ 600070E :                     ; ----------------------------------------------------------------
(1)  953/ 600070E :                     
(1)  954/ 600070E :                     		align 4
(1)  955/ 6000710 :                     SH2_M_Entry:
(1)  956/ 6000710 : DF2C                		mov	#STACK_MSTR,r15			; Reset stack
(1)  957/ 6000712 : D02D                		mov	#SH2_Master,r0			; Reset vbr
(1)  958/ 6000714 : 402E                		ldc	r0,vbr
(1)  959/ 6000716 : 9167                		mov.l	#_FRT,r1
(1)  960/ 6000718 : E000                		mov	#0,r0
(1)  961/ 600071A : 8010                		mov.b	r0,@(0,r1)
(1)  962/ 600071C : E0E2                		mov.b	#$E2,r0
(1)  963/ 600071E : 8017                		mov.b	r0,@(7,r1)
(1)  964/ 6000720 : E000                		mov	#0,r0
(1)  965/ 6000722 : 8014                		mov.b	r0,@(4,r1)
(1)  966/ 6000724 : E001                		mov	#1,r0
(1)  967/ 6000726 : 8015                		mov.b	r0,@(5,r1)
(1)  968/ 6000728 : E000                		mov	#0,r0
(1)  969/ 600072A : 8016                		mov.b	r0,@(6,r1)
(1)  970/ 600072C : E001                		mov	#1,r0
(1)  971/ 600072E : 8011                		mov.b	r0,@(1,r1)
(1)  972/ 6000730 : E000                		mov	#0,r0
(1)  973/ 6000732 : 8013                		mov.b	r0,@(3,r1)
(1)  974/ 6000734 : 8012                		mov.b	r0,@(2,r1)
(1)  975/ 6000736 :                     ; 		mov.b	#$F2,r0				; <-- not needed here
(1)  976/ 6000736 :                     ; 		mov.b	r0,@(7,r1)
(1)  977/ 6000736 :                     ; 		mov	#0,r0
(1)  978/ 6000736 :                     ; 		mov.b	r0,@(4,r1)
(1)  979/ 6000736 :                     ; 		mov	#1,r0
(1)  980/ 6000736 :                     ; 		mov.b	r0,@(5,r1)
(1)  981/ 6000736 :                     ; 		mov.b	#$E2,r0
(1)  982/ 6000736 :                     ; 		mov.b	r0,@(7,r1)
(1)  983/ 6000736 :                     
(1)  984/ 6000736 :                     	; Extra interrupt settings
(1)  985/ 6000736 : 9058                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1)  986/ 6000738 : 9158                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1)  987/ 600073A : 2011                		mov.w   r1,@r0
(1)  988/ 600073C : 9057                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1)  989/ 600073E : 9157                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1)  990/ 6000740 : 2011                		mov.w   r1,@r0
(1)  991/ 6000742 : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1)  992/ 6000744 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1)  993/ 6000746 : 2012                		mov	r1,@r0
(1)  994/ 6000748 : D020                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1)  995/ 600074A : 401E                		ldc	r0,gbr
(1)  996/ 600074C : D020                		mov	#MarsVideo_Init,r0		; Init Video
(1)  997/ 600074E : 400B                		jsr	@r0
(1)  998/ 6000750 : 0009                		nop
(1)  999/ 6000752 :                     
(1) 1000/ 6000752 :                     ; ====================================================================
(1) 1001/ 6000752 :                     ; ----------------------------------------------------------------
(1) 1002/ 6000752 :                     ; Master MAIN code
(1) 1003/ 6000752 :                     ; ----------------------------------------------------------------
(1) 1004/ 6000752 :                     
(1) 1005/ 6000752 :                     SH2_M_HotStart:
(1) 1006/ 6000752 : 914E                		mov.w	#$FE80,r1		; ($FFFFFE80)
(1) 1007/ 6000754 : 904E                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1008/ 6000756 : 2101                		mov.w	r0,@r1
(1) 1009/ 6000758 : 914D                		mov.w	#_CCR&$FFFF,r1		; Reset CACHE
(1) 1010/ 600075A : E010                		mov	#$10,r0
(1) 1011/ 600075C : 2100                		mov.b	r0,@r1
(1) 1012/ 600075E : 0009                		nop
(1) 1013/ 6000760 : 0009                		nop
(1) 1014/ 6000762 : 0009                		nop
(1) 1015/ 6000764 : 0009                		nop
(1) 1016/ 6000766 : 0009                		nop
(1) 1017/ 6000768 : 0009                		nop
(1) 1018/ 600076A : 0009                		nop
(1) 1019/ 600076C : E009                		mov	#9,r0
(1) 1020/ 600076E : 2100                		mov.b	r0,@r1
(1) 1021/ 6000770 : D118                		mov	#_sysreg,r1
(1) 1022/ 6000772 : 200A                    		xor	r0,r0
(1) 1023/ 6000774 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1024/ 6000776 : 811B                		mov.w	r0,@(vintclr,r1)
(1) 1025/ 6000778 : 811C                		mov.w	r0,@(hintclr,r1)
(1) 1026/ 600077A : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 1027/ 600077C : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 1028/ 600077E : 6011                		mov.w	@r1,r0
(1) 1029/ 6000780 : CB02                		or	#CMDIRQ_ON,r0
(1) 1030/ 6000782 : 2101                		mov.w	r0,@r1
(1) 1031/ 6000784 : D114                		mov	#_sysreg+comm14,r1
(1) 1032/ 6000786 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1033/ 6000788 : 2008                		tst	r0,r0
(1) 1034/ 600078A : 8BFC                		bf	.wait_slv
(1) 1035/ 600078C :                     
(1) 1036/ 600078C :                     	; TEMPORAL
(1) 1037/ 600078C : D113                		mov	#ArtMars_TEST,r1
(1) 1038/ 600078E : D214                		mov	#_framebuffer+$200,r2
(1) 1039/ 6000790 : 9332                		mov	#(320*224)/4,r3
(1) 1040/ 6000792 :                     .loopin:
(1) 1041/ 6000792 : 6016                		mov	@r1+,r0
(1) 1042/ 6000794 : 2202                		mov	r0,@r2
(1) 1043/ 6000796 : 4310                		dt	r3
(1) 1044/ 6000798 : 8FFB                		bf/s	.loopin
(1) 1045/ 600079A : 7204                		add	#4,r2
(1) 1046/ 600079C : 9121                		mov	#$200,r1
(1) 1047/ 600079E : 922C                		mov	#320,r2
(1) 1048/ 60007A0 : 932C                		mov	#224,r3
(1) 1049/ 60007A2 : BF4F                		bsr	MarsVideo_MakeNameTbl
(1) 1050/ 60007A4 : E400                		mov	#0,r4
(1) 1051/ 60007A6 :                     
(1) 1052/ 60007A6 : D10F                		mov	#_vdpreg,r1
(1) 1053/ 60007A8 : E001                		mov	#1,r0				; Start at BLANK
(1) 1054/ 60007AA : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1055/ 60007AC : 841B                		mov.b	@(framectl,r1),r0		; Frameswap request
(1) 1056/ 60007AE : CA01                		xor	#1,r0
(1) 1057/ 60007B0 : 6303                		mov	r0,r3
(1) 1058/ 60007B2 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1059/ 60007B4 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0		; And wait until it flips
(1) 1060/ 60007B6 : 3300                		cmp/eq	r0,r3
(1) 1061/ 60007B8 : 8BFC                		bf	.wait_frm
(1) 1062/ 60007BA :                     
(1) 1063/ 60007BA : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1064/ 60007BC : 400E                		ldc	r0,sr
(1) 1065/ 60007BE : A01F                		bra	master_loop
(1) 1066/ 60007C0 : 0009                		nop
(1) 1067/ 60007C2 :                     		align 4
(1) 1068/ 60007C4 : 0604 0000 0600 0000 		ltorg
                    0601 5D50 0600 05F0 
                    2000 4000 2000 402E 
                    0600 3144 2400 0200 
                    2000 4100 FE10 FEE2 
                    0530 FEE4 4800 FE80 
                    A518 FE92 4600 0140 
                    00E0                
(1) 1069/ 60007FE :                     
(1) 1070/ 60007FE :                     ; ----------------------------------------------------------------
(1) 1071/ 60007FE :                     ; MASTER CPU loop
(1) 1072/ 60007FE :                     ;
(1) 1073/ 60007FE :                     ; comm12:
(1) 1074/ 60007FE :                     ; bssscccc iir00lll
(1) 1075/ 60007FE :                     ;
(1) 1076/ 60007FE :                     ; b - Busy bit, this CPU can't be interrupted for CMD requests
(1) 1077/ 60007FE :                     ; r - Clears when frame is ready.
(1) 1078/ 60007FE :                     ; s - Status bits for some of the CMD interrupt tasks
(1) 1079/ 60007FE :                     ; c - Command number for CMD interrupt
(1) 1080/ 60007FE :                     ; i - Screen initialization bit(s)
(1) 1081/ 60007FE :                     ; l - MAIN LOOP command/task, For any mode change fill the
(1) 1082/ 60007FE :                     ;     ii bits: $C0+mode.
(1) 1083/ 60007FE :                     ; ----------------------------------------------------------------
(1) 1084/ 60007FE :                     
(1) 1085/ 60007FE :                     		align 4
(1) 1086/ 6000800 :                     master_loop:
(1) 1088/ 6000800 : D118                		mov	#_sysreg+comm6,r1		; DEBUG counter
(1) 1089/ 6000802 : 6010                		mov.b	@r1,r0
(1) 1090/ 6000804 : 7001                		add	#1,r0
(1) 1091/ 6000806 : 2100                		mov.b	r0,@r1
(1) 1093/ 6000808 :                     
(1) 1094/ 6000808 :                     	; ---------------------------------------
(1) 1095/ 6000808 :                     	; Copy the NEW DREQ data we just
(1) 1096/ 6000808 :                     	; got to the READ buffer
(1) 1097/ 6000808 :                     	; ---------------------------------------
(1) 1098/ 6000808 : D117                		mov	#_vdpreg,r1			; Check if we got late
(1) 1099/ 600080A : 841A                .waitl:		mov.b	@(vdpsts,r1),r0			; on VBlank
(1) 1100/ 600080C : C880                		tst	#VBLK,r0
(1) 1101/ 600080E : 8BFC                		bf	.waitl
(1) 1102/ 6000810 : 4F03                		stc	sr,@-r15
(1) 1103/ 6000812 : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1104/ 6000814 : 600C                		extu.b	r0,r0
(1) 1105/ 6000816 : 400E                		ldc	r0,sr
(1) 1106/ 6000818 : C602                		mov	@(marsGbl_DmaWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1107/ 600081A : 6103                		mov	r0,r1
(1) 1108/ 600081C : C601                		mov	@(marsGbl_DmaRead,gbr),r0
(1) 1109/ 600081E : C202                		mov	r0,@(marsGbl_DmaWrite,gbr)
(1) 1110/ 6000820 : 6013                		mov	r1,r0
(1) 1111/ 6000822 : C201                		mov	r0,@(marsGbl_DmaRead,gbr)
(1) 1112/ 6000824 : 4F07                		ldc	@r15+,sr
(1) 1113/ 6000826 :                     
(1) 1114/ 6000826 :                     	; ---------------------------------------
(1) 1115/ 6000826 :                     	; Write palette using DREQ data
(1) 1116/ 6000826 :                     	; ---------------------------------------
(1) 1117/ 6000826 : D110                		mov	#_vdpreg,r1			; Wait until VBlank
(1) 1118/ 6000828 : 841A                .waitv:		mov.b	@(vdpsts,r1),r0
(1) 1119/ 600082A : C880                		tst	#VBLK,r0
(1) 1120/ 600082C : 89FC                		bt	.waitv
(1) 1121/ 600082E : C500                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first (Xpos & 1)
(1) 1122/ 6000830 : C901                		and	#1,r0
(1) 1123/ 6000832 : 8111                		mov.w	r0,@(shift,r1)
(1) 1124/ 6000834 : C601                		mov	@(marsGbl_DmaRead,gbr),r0
(1) 1125/ 6000836 :                     ; 		mov	#Dreq_Palette,r1
(1) 1126/ 6000836 :                     ; 		add	r1,r0
(1) 1127/ 6000836 : 6103                		mov	r0,r1
(1) 1128/ 6000838 : D20C                		mov	#_palette,r2
(1) 1129/ 600083A : E320                 		mov	#(256/8),r3
(1) 1130/ 600083C :                     	; PALETTE MUST BE AT THE TOP OF DREQ DATA
(1) 1131/ 600083C :                     	; so I don't need to add Dreq_Palette...
(1) 1132/ 600083C :                     .copy_pal:
(1) 1133/ 600083C :                     	rept 4
(1) 1134/ 600083C :                     		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1135/ 600083C :                     		mov	r0,@r2
(1) 1136/ 600083C :                     		add	#4,r2
(1) 1137/ 600083C :                     	endm
(1) 1134/ 600083C : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1135/ 600083E : 2202                		mov	r0,@r2
(1) 1136/ 6000840 : 7204                		add	#4,r2
(1) 1134/ 6000842 : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1135/ 6000844 : 2202                		mov	r0,@r2
(1) 1136/ 6000846 : 7204                		add	#4,r2
(1) 1134/ 6000848 : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1135/ 600084A : 2202                		mov	r0,@r2
(1) 1136/ 600084C : 7204                		add	#4,r2
(1) 1134/ 600084E : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1135/ 6000850 : 2202                		mov	r0,@r2
(1) 1136/ 6000852 : 7204                		add	#4,r2
(1) 1138/ 6000854 : 4310                		dt	r3
(1) 1139/ 6000856 : 8BF1                		bf	.copy_pal
(1) 1140/ 6000858 :                     .not_ready:
(1) 1141/ 6000858 : D105                		mov	#_sysreg+comm12+1,r1		; Clear comm R bit
(1) 1142/ 600085A : 6010                		mov.b	@r1,r0				; this tells to 68k that the frame is ready
(1) 1143/ 600085C : C9DF                		and	#%11011111,r0
(1) 1144/ 600085E : 2100                		mov.b	r0,@r1
(1) 1145/ 6000860 :                     
(1) 1146/ 6000860 : AFCE                		bra	master_loop
(1) 1147/ 6000862 : 0009                		nop
(1) 1148/ 6000864 :                     		align 4
(1) 1149/ 6000864 : 2000 4026 2000 4100 		ltorg
                    2000 4200 2000 402D 
(1) 1150/ 6000874 :                     
(1) 1151/ 6000874 :                     ; ====================================================================
(1) 1152/ 6000874 :                     ; ----------------------------------------------------------------
(1) 1153/ 6000874 :                     ; Slave entry
(1) 1154/ 6000874 :                     ; ----------------------------------------------------------------
(1) 1155/ 6000874 :                     
(1) 1156/ 6000874 :                     		align 4
(1) 1157/ 6000874 :                     SH2_S_Entry:
(1) 1158/ 6000874 : DF25                		mov	#STACK_SLV,r15		; Reset stack
(1) 1159/ 6000876 : D026                		mov	#SH2_Slave,r0		; Reset vbr
(1) 1160/ 6000878 : 402E                		ldc	r0,vbr
(1) 1161/ 600087A : 9153                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 1162/ 600087C : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 1163/ 600087E : 8010                		mov.b	r0,@(0,r1)
(1) 1164/ 6000880 : E0E2                		mov.b	#$E2,r0
(1) 1165/ 6000882 : 8017                		mov.b	r0,@(7,r1)
(1) 1166/ 6000884 : E000                		mov	#0,r0
(1) 1167/ 6000886 : 8014                		mov.b	r0,@(4,r1)
(1) 1168/ 6000888 : E001                		mov	#1,r0
(1) 1169/ 600088A : 8015                		mov.b	r0,@(5,r1)
(1) 1170/ 600088C : E000                		mov	#0,r0
(1) 1171/ 600088E : 8016                		mov.b	r0,@(6,r1)
(1) 1172/ 6000890 : E001                		mov	#1,r0
(1) 1173/ 6000892 : 8011                		mov.b	r0,@(1,r1)
(1) 1174/ 6000894 : E000                		mov	#0,r0
(1) 1175/ 6000896 : 8013                		mov.b	r0,@(3,r1)
(1) 1176/ 6000898 : 8012                		mov.b	r0,@(2,r1)
(1) 1177/ 600089A : E0F2                		mov.b	#$F2,r0			; <-- PWM interrupt needs this
(1) 1178/ 600089C : 8017                		mov.b	r0,@(7,r1)
(1) 1179/ 600089E : E000                		mov	#0,r0
(1) 1180/ 60008A0 : 8014                		mov.b	r0,@(4,r1)
(1) 1181/ 60008A2 : E001                		mov	#1,r0
(1) 1182/ 60008A4 : 8015                		mov.b	r0,@(5,r1)
(1) 1183/ 60008A6 : E0E2                		mov.b	#$E2,r0
(1) 1184/ 60008A8 : 8017                		mov.b	r0,@(7,r1)		; <-- ***
(1) 1185/ 60008AA :                     	; Extra interrupt settings
(1) 1186/ 60008AA : 903C                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 1187/ 60008AC : 913C                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1188/ 60008AE : 2011                		mov.w   r1,@r0
(1) 1189/ 60008B0 : 903B                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1190/ 60008B2 : 913B                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 1191/ 60008B4 : 2011                		mov.w   r1,@r0
(1) 1192/ 60008B6 : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 1193/ 60008B8 : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 1194/ 60008BA : 2012                		mov	r1,@r0
(1) 1195/ 60008BC : D015                		mov	#RAM_Mars_Global,r0	; Reset gbr
(1) 1196/ 60008BE : 401E                		ldc	r0,gbr
(1) 1197/ 60008C0 : BF04                		bsr	MarsSound_Init		; Init sound
(1) 1198/ 60008C2 : 0009                		nop
(1) 1199/ 60008C4 :                     
(1) 1200/ 60008C4 :                     ; ====================================================================
(1) 1201/ 60008C4 :                     ; ----------------------------------------------------------------
(1) 1202/ 60008C4 :                     ; Slave main code
(1) 1203/ 60008C4 :                     ; ----------------------------------------------------------------
(1) 1204/ 60008C4 :                     
(1) 1205/ 60008C4 :                     SH2_S_HotStart:
(1) 1206/ 60008C4 : 9133                		mov.w	#$FE80,r1
(1) 1207/ 60008C6 : 9033                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1208/ 60008C8 : 2101                		mov.w	r0,@r1
(1) 1209/ 60008CA : 9132                		mov.w	#_CCR&$FFFF,r1		; Reset CACHE
(1) 1210/ 60008CC : E010                		mov	#$10,r0
(1) 1211/ 60008CE : 2100                		mov.b	r0,@r1
(1) 1212/ 60008D0 : 0009                		nop
(1) 1213/ 60008D2 : 0009                		nop
(1) 1214/ 60008D4 : 0009                		nop
(1) 1215/ 60008D6 : 0009                		nop
(1) 1216/ 60008D8 : 0009                		nop
(1) 1217/ 60008DA : 0009                		nop
(1) 1218/ 60008DC : 0009                		nop
(1) 1219/ 60008DE : E009                		mov	#9,r0
(1) 1220/ 60008E0 : 2100                		mov.b	r0,@r1
(1) 1221/ 60008E2 :                     ; 		mov	#CACHE_SLAVE,r1
(1) 1222/ 60008E2 :                     ; 		mov	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r2
(1) 1223/ 60008E2 :                     ; 		mov	#Mars_LoadCacheRam,r0
(1) 1224/ 60008E2 :                     ; 		jsr	@r0
(1) 1225/ 60008E2 :                     ; 		nop
(1) 1226/ 60008E2 : D10D                		mov	#_sysreg,r1
(1) 1227/ 60008E4 : 200A                    		xor	r0,r0
(1) 1228/ 60008E6 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1229/ 60008E8 : 811B                		mov.w	r0,@(vintclr,r1)
(1) 1230/ 60008EA : 811C                		mov.w	r0,@(hintclr,r1)
(1) 1231/ 60008EC : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 1232/ 60008EE : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 1233/ 60008F0 : 6011                		mov.w	@r1,r0
(1) 1234/ 60008F2 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0
(1) 1235/ 60008F4 :                     ; 		or	#CMDIRQ_ON,r0
(1) 1236/ 60008F4 : 2101                		mov.w	r0,@r1
(1) 1237/ 60008F6 : D109                		mov	#_sysreg+comm12,r1
(1) 1238/ 60008F8 : 6011                .wait_mst:	mov.w	@r1,r0
(1) 1239/ 60008FA : 2008                		tst	r0,r0
(1) 1240/ 60008FC : 8BFC                		bf	.wait_mst
(1) 1241/ 60008FE :                     
(1) 1242/ 60008FE :                     ; 	; ****
(1) 1243/ 60008FE : BEF3                		bsr	MarsSound_FirstFill
(1) 1244/ 6000900 : 0009                		nop
(1) 1245/ 6000902 :                     ; 	; ****
(1) 1246/ 6000902 :                     
(1) 1247/ 6000902 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1248/ 6000904 : 400E                		ldc	r0,sr
(1) 1249/ 6000906 : D006                		mov	#slave_loop,r0
(1) 1250/ 6000908 : 402B                		jmp	@r0
(1) 1251/ 600090A : 0009                		nop
(1) 1252/ 600090C :                     		align 4
(1) 1253/ 600090C : 0603 F000 0600 0128 		ltorg
                    0601 5D50 2000 4000 
                    2000 402C 0600 0934 
                    FE10 FEE2 0530 FEE4 
                    4800 FE80 A518 FE92 
(1) 1254/ 6000934 :                     
(1) 1255/ 6000934 :                     ; ----------------------------------------------------------------
(1) 1256/ 6000934 :                     ; SLAVE CPU loop
(1) 1257/ 6000934 :                     ;
(1) 1258/ 6000934 :                     ; comm14:
(1) 1259/ 6000934 :                     ; bssscccc llllllll
(1) 1260/ 6000934 :                     ;
(1) 1261/ 6000934 :                     ; b - busy bit on the CMD interrupt
(1) 1262/ 6000934 :                     ;     (so 68k knows that the interrupt is active)
(1) 1263/ 6000934 :                     ; s - status bits for some CMD interrupt tasks
(1) 1264/ 6000934 :                     ; c - command number for CMD interrupt
(1) 1265/ 6000934 :                     ; l - MAIN LOOP command/task, clears on endstruct
(1) 1266/ 6000934 :                     ; ----------------------------------------------------------------
(1) 1267/ 6000934 :                     
(1) 1268/ 6000934 :                     		align 4
(1) 1269/ 6000934 :                     slave_loop:
(1) 1270/ 6000934 : D102                		mov	#_sysreg+comm7,r1
(1) 1271/ 6000936 : 6010                		mov.b	@r1,r0
(1) 1272/ 6000938 : 7001                		add	#1,r0
(1) 1273/ 600093A : 2100                		mov.b	r0,@r1
(1) 1274/ 600093C : AFFA                		bra	slave_loop
(1) 1275/ 600093E : 0009                		nop
(1) 1276/ 6000940 :                     		align 4
(1) 1277/ 6000940 : 2000 4027           		ltorg
(1) 1278/ 6000944 :                     
(1) 1279/ 6000944 :                     ; ------------------------------------------------
(1) 1280/ 6000944 :                     ; Includes
(1) 1281/ 6000944 :                     ; ------------------------------------------------
(1) 1282/ 6000944 :                     
(1) 1283/ 6000944 :                     ; 		include "system/mars/cache/cache_m_2D.asm"
(1) 1284/ 6000944 :                     ; 		include "system/mars/cache/cache_m_3D.asm"
(1) 1285/ 6000944 :                     ; 		include "system/mars/cache/cache_slv.asm"
(1) 1286/ 6000944 :                     
(1) 1287/ 6000944 :                     ; ====================================================================
(1) 1288/ 6000944 :                     ; ----------------------------------------------------------------
(1) 1289/ 6000944 :                     ; Data
(1) 1290/ 6000944 :                     ; ----------------------------------------------------------------
(1) 1291/ 6000944 :                     
(1) 1292/ 6000944 :                     		align 4
(1) 1293/ 6000944 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1294/ 6003144 :                     ; m_ascii	binclude "system/mars/data/m_ascii.bin"
(1) 1295/ 6003144 :                     		align 4
(1) 1296/ 6003144 :                     		include "game/data/mars_sdram.asm"
(2)    1/ 6003144 :                     ; ====================================================================
(2)    2/ 6003144 :                     ; ----------------------------------------------------------------
(2)    3/ 6003144 :                     ; SH2 SDRAM data
(2)    4/ 6003144 :                     ; 
(2)    5/ 6003144 :                     ; This data is stored on SDRAM, always available to use on the 32X
(2)    6/ 6003144 :                     ; side and can be rewritible, but it is smaller than ROM
(2)    7/ 6003144 :                     ;
(2)    8/ 6003144 :                     ; PWM samples can be used here but those take a lot of space...
(2)    9/ 6003144 :                     ; use ROM (mars_rom.asm) instead, those are RV-protected on SH2
(2)   10/ 6003144 :                     ; ----------------------------------------------------------------
(2)   11/ 6003144 :                     
(2)   12/ 6003144 :                     		align 4
(2)   13/ 6003144 :                     ArtMars_TEST:
(2)   14/ 6003144 :                     		binclude "game/data/TESTS/mars_art.bin"
(2)   15/ 6015D44 :                     		align 2
(2)   16/ 6015D44 :                     
(1) 1297/ 6015D44 :                     
(1) 1298/ 6015D44 :                     ; ====================================================================
(1) 1299/ 6015D44 :                     ; ----------------------------------------------------------------
(1) 1300/ 6015D44 :                     ; GLOBAL GBR Variables
(1) 1301/ 6015D44 :                     ;
(1) 1302/ 6015D44 :                     ; SHARED FOR BOTH CPUS, watch out for the Read/Write conflicts.
(1) 1303/ 6015D44 :                     ;
(1) 1304/ 6015D44 :                     ; use dc's to set their default values
(1) 1305/ 6015D44 :                     ; ----------------------------------------------------------------
(1) 1306/ 6015D44 :                     
(1) 1307/ 6015D44 :                     
(1) 1308/ 6015D44 :                     			align $10
(1) 1309/ 6015D50 :                     RAM_Mars_Global:
(1) 1310/ 6015D50 : (MACRO)             			struct 0
(1) 1310/ 6015D50 : =$6015D50           GLBL_LASTPC     set *
(1) 1310/   4F850 :                                     dephase
(1) 1310/   4F850 : =$4F850             GLBL_LASTORG    set *
(1) 1310/       0 :                                     phase 0
(1) 1311/       0 : 0000                marsGbl_XShift		dc.w 0
(1) 1312/       2 : 0000                marsGbl_Null		dc.w 0
(1) 1313/       4 : 2601 5E00           marsGbl_DmaRead		dc.l RAM_Mars_DreqBuff_0
(1) 1314/       8 : 2601 6000           marsGbl_DmaWrite	dc.l RAM_Mars_DreqBuff_1
(1) 1315/       C :                     sizeof_MarsGbl		ds.l 0
(1) 1316/       C : (MACRO)             			endstruct
(1) 1316/       0 :                                     !org GLBL_LASTORG
(1) 1316/ 6015D50 :                                     phase GLBL_LASTPC
(1) 1317/ 6015D50 :                     
(1) 1318/ 6015D50 :                     ; ====================================================================
(1) 1319/ 6015D50 :                     ; ----------------------------------------------------------------
(1) 1320/ 6015D50 :                     ; MARS SH2 RAM
(1) 1321/ 6015D50 :                     ; ----------------------------------------------------------------
(1) 1322/ 6015D50 :                     
(1) 1323/ 6015D50 :                     			align $100
(1) 1324/ 6015E00 :                     SH2_RAM:
(1) 1325/ 6015E00 : (MACRO)             			struct SH2_RAM|TH	; CACHE-THRU
(1) 1325/ 6015E00 : =$6015E00           GLBL_LASTPC     set *
(1) 1325/   4F900 :                                     dephase
(1) 1325/   4F900 : =$4F900             GLBL_LASTORG    set *
(1) 1325/26015E00 :                                     phase SH2_RAM|TH
(1) 1326/26015E00 :                     RAM_Mars_DreqBuff_0	ds.b sizeof_dreq	; DREQ data from Genesis ***DO NOT READ FROM HERE***
(1) 1327/26016000 :                     RAM_Mars_DreqBuff_1	ds.b sizeof_dreq	; Copy of DREQ for reading.
(1) 1328/26016200 :                     RAM_Mars_GemaWave_0	ds.b $1000
(1) 1329/26017200 :                     RAM_Mars_GemaWave_1	ds.b $1000
(1) 1330/26018200 :                     RAM_Mars_GemaSilence	ds.b $1000
(1) 1331/26019200 : (MACRO)             			endstruct
(1) 1331/26015E00 :                                     !org GLBL_LASTORG
(1) 1331/ 6015E00 :                                     phase GLBL_LASTPC
(1) 1332/ 6015E00 :                     
(1) 1333/ 6015E00 :                     ; ; ====================================================================
(1) 1334/ 6015E00 :                     ; ; ----------------------------------------------------------------
(1) 1335/ 6015E00 :                     ; ; MARS Video RAM
(1) 1336/ 6015E00 :                     ; ;
(1) 1337/ 6015E00 :                     ; ; RAM_Mars_ScrnBuff is recycled for all pseudo-screen modes
(1) 1338/ 6015E00 :                     ; ; ----------------------------------------------------------------
(1) 1339/ 6015E00 :                     ;
(1) 1340/ 6015E00 :                     ; 			struct MarsRam_Video
(1) 1341/ 6015E00 :                     ; RAM_Mars_ScrnBuff	ds.b MAX_SCRNBUFF		; Single buffer for all screen modes
(1) 1342/ 6015E00 :                     ; sizeof_marsvid		ds.l 0
(1) 1343/ 6015E00 :                     ; 			endstruct
(1) 1344/ 6015E00 :                     ;
(1) 1345/ 6015E00 :                     ; ; --------------------------------------------------------
(1) 1346/ 6015E00 :                     ; ; per-screen RAM
(1) 1347/ 6015E00 :                     ; 			struct RAM_Mars_ScrnBuff
(1) 1348/ 6015E00 :                     ; Cach_DrawTimers		ds.l 4				; Screen draw-request timers, write $02 to these
(1) 1349/ 6015E00 :                     ; RAM_Mars_ScrlBuff	ds.b sizeof_mscrl*2		; Scrolling buffers
(1) 1350/ 6015E00 :                     ; RAM_Mars_ScrlData	ds.b ((320+16)*(224+16))+320	; Entire pixeldata for one scroll: (w*h)+320
(1) 1351/ 6015E00 :                     ; end_scrn02		ds.l 0
(1) 1352/ 6015E00 :                     ; 			endstruct
(1) 1353/ 6015E00 :                     ; 			struct RAM_Mars_ScrnBuff
(1) 1354/ 6015E00 :                     ; RAM_Mars_SVdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ	; Sprites / Polygon pieces
(1) 1355/ 6015E00 :                     ; RAM_Mars_SVdpDrwList_e	ds.l 0				; (END point label)
(1) 1356/ 6015E00 :                     ; RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES	; Read/Write polygon data
(1) 1357/ 6015E00 :                     ; RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES
(1) 1358/ 6015E00 :                     ; RAM_Mars_PlgnList_0	ds.l MAX_FACES*2		; Polygon order list: Zpos, pointer
(1) 1359/ 6015E00 :                     ; RAM_Mars_PlgnList_1	ds.l MAX_FACES*2
(1) 1360/ 6015E00 :                     ; RAM_Mars_PlgnNum_0	ds.l 1				; Number of polygons to process
(1) 1361/ 6015E00 :                     ; RAM_Mars_PlgnNum_1	ds.l 1
(1) 1362/ 6015E00 :                     ; RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS	; Slave's Objects
(1) 1363/ 6015E00 :                     ; RAM_Mars_ObjCamera	ds.b sizeof_camera		; Slave's Camera
(1) 1364/ 6015E00 :                     ; sizeof_scrn04		ds.l 0
(1) 1365/ 6015E00 :                     ; 			endstruct
(1) 1366/ 6015E00 :                     ; 	if MOMPASS=6
(1) 1367/ 6015E00 :                     ; 	if end_scrn02-RAM_Mars_ScrnBuff > MAX_SCRNBUFF
(1) 1368/ 6015E00 :                     ; 		error "RAN OUT OF RAM FOR 2D STUFF (\{(end_scrn02-RAM_Mars_ScrnBuff)} of \{(MAX_SCRNBUFF)})"
(1) 1369/ 6015E00 :                     ; 	elseif sizeof_scrn04-RAM_Mars_ScrnBuff > MAX_SCRNBUFF
(1) 1370/ 6015E00 :                     ; 		error "RAN OUT OF RAM FOR 3D STUFF (\{(sizeof_scrn04-RAM_Mars_ScrnBuff)} of \{(MAX_SCRNBUFF)})"
(1) 1371/ 6015E00 :                     ; 	endif
(1) 1372/ 6015E00 :                     ; 	endif
(1) 1373/ 6015E00 :                     
(1) 1374/ 6015E00 :                     ; ====================================================================
(1) 1375/ 6015E00 :                     ; ----------------------------------------------------------------
(1) 1376/ 6015E00 :                     ; MARS Sound RAM
(1) 1377/ 6015E00 :                     ; ----------------------------------------------------------------
(1) 1378/ 6015E00 :                     
(1) 1379/ 6015E00 :                     ; 			struct MarsRam_Sound
(1) 1380/ 6015E00 :                     ; MarsSnd_PwmCache	ds.b $80*MAX_PWMCHNL
(1) 1381/ 6015E00 :                     ; sizeof_marssnd		ds.l 0
(1) 1382/ 6015E00 :                     ; 			endstruct
(1) 1383/ 6015E00 :                     
(1) 1384/ 6015E00 :                     ; ====================================================================
(1) 1385/ 6015E00 :                     ; ----------------------------------------------------------------
(1) 1386/ 6015E00 :                     ; MARS System RAM
(1) 1387/ 6015E00 :                     ; ----------------------------------------------------------------
(1) 1388/ 6015E00 :                     
(1) 1389/ 6015E00 :                     ; 			struct MarsRam_System
(1) 1390/ 6015E00 :                     ; RAM_Mars_DreqBuff_0	ds.b sizeof_dreq	; DREQ data from Genesis ***DO NOT READ FROM HERE***
(1) 1391/ 6015E00 :                     ; RAM_Mars_DreqBuff_1	ds.b sizeof_dreq	; Copy of DREQ for reading.
(1) 1392/ 6015E00 :                     
(1) 1393/ 6015E00 :                     ; sizeof_marssys		ds.l 0
(1) 1394/ 6015E00 :                     ; 			endstruct
(1) 1395/ 6015E00 :                     
(1) 1396/ 6015E00 :                     ; ====================================================================
(1) 1397/ 6015E00 :                     
(1) 1398/ 6015E00 :                     .here:
(1) 1399/ 6015E00 : (MACRO)             		report "SH2 SDRAM CODE/DATA",.here,(STACK_SLV-$1000)
(1) 1400/ 6015E00 :                     
     487/ 6015E00 :                     		cpu 68000
     488/ 6015E00 :                     		padding off
     489/   4F900 :                     		dephase
     494/   4F900 :                     MARS_RAMDATA_E:
     495/   4F900 :                     		align 4
     496/   4F900 :                     
     497/   4F900 :                     ; ====================================================================
     498/   4F900 :                     ; --------------------------------------------------------
     499/   4F900 :                     ; SH2's ROM-only stuff
     500/   4F900 :                     ; This section will be gone if RV bit is set to 1
     501/   4F900 :                     ; --------------------------------------------------------
     502/   4F900 :                     
     504/ 204F900 :                     		phase CS1+*
     505/ 204F900 :                     		align 4
     506/ 204F900 :                     		include "sound/smpl_pwm.asm"		; GEMA: PWM samples
(1)    1/ 204F900 :                     ; ====================================================================
(1)    2/ 204F900 :                     ; --------------------------------------------------------
(1)    3/ 204F900 :                     ; GEMA/Nikona PWM instruments
(1)    4/ 204F900 :                     ;
(1)    5/ 204F900 :                     ; These MUST be located at SH2's ROM area: $02000000
(1)    6/ 204F900 :                     ; THE SDRAM area ($06000000) CAN be used but there's
(1)    7/ 204F900 :                     ; no enough storage the samples, the SH2 side supports
(1)    8/ 204F900 :                     ; ROM-protection in case the RV-bit is set for
(1)    9/ 204F900 :                     ; Genesis' DMA transfers.
(1)   10/ 204F900 :                     ;
(1)   11/ 204F900 :                     ; Sample data is 8-bit at 22050hz
(1)   12/ 204F900 :                     ; INCLUDING STEREO SAMPLES.
(1)   13/ 204F900 :                     ;
(1)   14/ 204F900 :                     ; *** PUT align 4 AT THE TOP OF EVERY LABEL ***
(1)   15/ 204F900 :                     ; --------------------------------------------------------
(1)   16/ 204F900 :                     
(1)   17/ 204F900 :                     ; ; Special sample data macro
(1)   18/ 204F900 :                     ; gSmpHead macro len,loop
(1)   19/ 204F900 :                     ; 	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   20/ 204F900 :                     ; 	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   21/ 204F900 :                     ; 	endm
(1)   22/ 204F900 :                     
(1)   23/ 204F900 :                     	align 4
(1)   24/ 204F900 :                     SmpIns_Nadie:
(1)   25/ 204F900 : (MACRO)             	gSmpHead .end-.start,0
(1)   25/ 204F900 : 1A67 02                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   25/ 204F903 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/ 204F906 :                     .start:	binclude "sound/instr/smpl/nadie_st.wav",$2C
(1)   27/ 2076020 :                     .end:
(1)   28/ 2076020 :                     
(1)   29/ 2076020 :                     	align 4
(1)   30/ 2076020 :                     SmpIns_MoveMe_Hit:
(1)   31/ 2076020 : (MACRO)             	gSmpHead .end-.start,0
(1)   31/ 2076020 : B62E 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   31/ 2076023 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/ 2076026 :                     .start:	binclude "sound/instr/smpl/moveme_hit.wav",$2C
(1)   33/ 2078EDC :                     .end:
(1)   34/ 2078EDC :                     
(1)   35/ 2078EDC :                     	align 4
(1)   36/ 2078EDC :                     SmpIns_MoveMe_Brass:
(1)   37/ 2078EDC : (MACRO)             	gSmpHead .end-.start,6478
(1)   37/ 2078EDC : 6429 01                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   37/ 2078EDF : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)   38/ 2078EE2 :                     .start:	binclude "sound/instr/smpl/brass_moveme.wav",$2C
(1)   39/ 208B846 :                     .end:
(1)   40/ 208B846 :                     
(1)   41/ 208B846 :                     	align 4
(1)   42/ 208B848 :                     SmpIns_Kick:
(1)   43/ 208B848 : (MACRO)             	gSmpHead .end-.start,0
(1)   43/ 208B848 : FA19 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   43/ 208B84B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   44/ 208B84E :                     .start:	binclude "sound/instr/smpl/kick_moveme.wav",$2C
(1)   45/ 208D248 :                     .end:
(1)   46/ 208D248 :                     
(1)   47/ 208D248 :                     	align 4
(1)   48/ 208D248 :                     SmpIns_Snare_moveme:
(1)   49/ 208D248 : (MACRO)             	gSmpHead .end-.start,0
(1)   49/ 208D248 : 341A 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   49/ 208D24B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   50/ 208D24E :                     .start:	binclude "sound/instr/smpl/snare_moveme.wav",$2C
(1)   51/ 208EC82 :                     .end:
(1)   52/ 208EC82 :                     
(1)   53/ 208EC82 :                     	align 4
(1)   54/ 208EC84 :                     SmpIns_snare_1:
(1)   55/ 208EC84 : (MACRO)             	gSmpHead .end-.start,0
(1)   55/ 208EC84 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   55/ 208EC87 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   56/ 208EC8A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   57/ 208FDAE :                     .end:
(1)   58/ 208FDAE :                     
(1)   59/ 208FDAE :                     	align 4
(1)   60/ 208FDB0 :                     SmpIns_Vctr01:
(1)   61/ 208FDB0 : (MACRO)             	gSmpHead .end-.start,58
(1)   61/ 208FDB0 : 301C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   61/ 208FDB3 : 3A00 00                     dc.b ((58)&$FF),(((58)>>8)&$FF),(((58)>>16)&$FF)
(1)   62/ 208FDB6 :                     .start:	binclude "sound/instr/smpl/pwm/vctr01.wav",$2C
(1)   63/ 20919E6 :                     .end:
(1)   64/ 20919E6 :                     
(1)   65/ 20919E6 :                     	align 4
(1)   66/ 20919E8 :                     SmpIns_Vctr04:
(1)   67/ 20919E8 : (MACRO)             	gSmpHead .end-.start,124
(1)   67/ 20919E8 : 681A 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   67/ 20919EB : 7C00 00                     dc.b ((124)&$FF),(((124)>>8)&$FF),(((124)>>16)&$FF)
(1)   68/ 20919EE :                     .start:	binclude "sound/instr/smpl/pwm/vctr04.wav",$2C
(1)   69/ 2093456 :                     .end:
(1)   70/ 2093456 :                     
(1)   71/ 2093456 :                     	align 4
(1)   72/ 2093458 :                     SmpIns_VctrSnare:
(1)   73/ 2093458 : (MACRO)             	gSmpHead .end-.start,0
(1)   73/ 2093458 : 3E1D 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   73/ 209345B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   74/ 209345E :                     .start:	binclude "sound/instr/smpl/pwm/vctrSnare.wav",$2C
(1)   75/ 209519C :                     .end:
(1)   76/ 209519C :                     
(1)   77/ 209519C :                     	align 4
(1)   78/ 209519C :                     SmpIns_VctrKick:
(1)   79/ 209519C : (MACRO)             	gSmpHead .end-.start,0
(1)   79/ 209519C : 8C0F 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   79/ 209519F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   80/ 20951A2 :                     .start:	binclude "sound/instr/smpl/pwm/vctrKick.wav",$2C
(1)   81/ 209612E :                     .end:
(1)   82/ 209612E :                     
(1)   83/ 209612E :                     	align 4
(1)   84/ 2096130 :                     SmpIns_VctrTimpani:
(1)   85/ 2096130 : (MACRO)             	gSmpHead .end-.start,0
(1)   85/ 2096130 : 6C32 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   85/ 2096133 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   86/ 2096136 :                     .start:	binclude "sound/instr/smpl/pwm/vctrTimpani.wav",$2C
(1)   87/ 20993A2 :                     .end:
(1)   88/ 20993A2 :                     
(1)   89/ 20993A2 :                     	align 4
(1)   90/ 20993A4 :                     SmpIns_VctrCrash:
(1)   91/ 20993A4 : (MACRO)             	gSmpHead .end-.start,0
(1)   91/ 20993A4 : 603C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   91/ 20993A7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   92/ 20993AA :                     .start:	binclude "sound/instr/smpl/pwm/vctrCrash.wav",$2C
(1)   93/ 209D00A :                     .end:
(1)   94/ 209D00A :                     
(1)   95/ 209D00A :                     	align 4
(1)   96/ 209D00C :                     SmpIns_VctrBrass:
(1)   97/ 209D00C : (MACRO)             	gSmpHead .end-.start,1004
(1)   97/ 209D00C : 6E17 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   97/ 209D00F : EC03 00                     dc.b ((1004)&$FF),(((1004)>>8)&$FF),(((1004)>>16)&$FF)
(1)   98/ 209D012 :                     .start:	binclude "sound/instr/smpl/pwm/vctrBrass.wav",$2C
(1)   99/ 209E780 :                     .end:
(1)  100/ 209E780 :                     
(1)  101/ 209E780 :                     	align 4
(1)  102/ 209E780 :                     SmpIns_VctrAmbient:
(1)  103/ 209E780 : (MACRO)             	gSmpHead .end-.start,124
(1)  103/ 209E780 : 6E17 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  103/ 209E783 : 7C00 00                     dc.b ((124)&$FF),(((124)>>8)&$FF),(((124)>>16)&$FF)
(1)  104/ 209E786 :                     .start:	binclude "sound/instr/smpl/pwm/vctrBrass.wav",$2C
(1)  105/ 209FEF4 :                     .end:
(1)  106/ 209FEF4 :                     
(1)  107/ 209FEF4 :                     	align 4
(1)  108/ 209FEF4 :                     SmpIns_Snare_2:
(1)  109/ 209FEF4 : (MACRO)             	gSmpHead .end-.start,0
(1)  109/ 209FEF4 : 3430 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)  109/ 209FEF7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)  110/ 209FEFA :                     .start:	binclude "sound/instr/smpl/snare_2.wav",$2C
(1)  111/ 20A2F2E :                     .end:
(1)  112/ 20A2F2E :                     
(1)  113/ 20A2F2E :                     	align 4
(1)  114/ 20A2F30 :                     
(1)  115/ 20A2F30 :                     
     507/ 20A2F30 :                     		include "game/data/mars_rom.asm"
(1)    1/ 20A2F30 :                     ; ====================================================================
(1)    2/ 20A2F30 :                     ; ----------------------------------------------------------------
(1)    3/ 20A2F30 :                     ; SH2 ROM data
(1)    4/ 20A2F30 :                     ;
(1)    5/ 20A2F30 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 20A2F30 :                     ; BUT keep in mind that this entire section will be gone
(1)    7/ 20A2F30 :                     ; if the Genesis performs DMA-to-VDP Transfers
(1)    8/ 20A2F30 :                     ; which requires RV=1 (Revert ROM to original position)
(1)    9/ 20A2F30 :                     ; ***EMULATORS IGNORE THIS LIMITATION***
(1)   10/ 20A2F30 :                     ;
(1)   11/ 20A2F30 :                     ; Only access here on these conditions:
(1)   12/ 20A2F30 :                     ; - Stop all tracks that use PWM samples
(1)   13/ 20A2F30 :                     ; - If you wanna keep any tracks active: set 1 to marsBlock
(1)   14/ 20A2F30 :                     ;   in the Z80 driver, all tracks will continue playing using
(1)   15/ 20A2F30 :                     ;   only the PSG and FM instruments
(1)   16/ 20A2F30 :                     ;   (TODO: check how it peforms)
(1)   17/ 20A2F30 :                     ;
(1)   18/ 20A2F30 :                     ; The PWM samples are safe to use with the implementation
(1)   19/ 20A2F30 :                     ; of a sample-backup routine that the 68K requests before
(1)   20/ 20A2F30 :                     ; doing DMA
(1)   21/ 20A2F30 :                     ; ----------------------------------------------------------------
(1)   22/ 20A2F30 :                     
(1)   23/ 20A2F30 :                     	align 4
(1)   24/ 20A2F30 :                     
(1)   25/ 20A2F30 :                     ; --------------------------------------------------------
(1)   26/ 20A2F30 :                     ; 32X MAP data: Block graphics and Layout
(1)   27/ 20A2F30 :                     ; --------------------------------------------------------
(1)   28/ 20A2F30 :                     
(1)   29/ 20A2F30 :                     ; 		align 4
(1)   30/ 20A2F30 :                     ; MapBlk_M:	binclude "game/data/maps/2D/level0/m_art.bin"
(1)   31/ 20A2F30 :                     ; 		align 4
(1)   32/ 20A2F30 :                     ; MapFg_M:	binclude "game/data/maps/2D/level0/m_fg.bin"
(1)   33/ 20A2F30 :                     ; 		align 4
(1)   34/ 20A2F30 :                     
(1)   35/ 20A2F30 :                     ; --------------------------------------------------------
(1)   36/ 20A2F30 :                     ; Graphics
(1)   37/ 20A2F30 :                     ; --------------------------------------------------------
(1)   38/ 20A2F30 :                     
(1)   39/ 20A2F30 :                     		include "game/data/m_graphics.asm"
(2)    1/ 20A2F30 :                     ; ====================================================================
(2)    2/ 20A2F30 :                     ; ----------------------------------------------------------------
(2)    3/ 20A2F30 :                     ; Put your 32X graphics here, indexed or direct
(2)    4/ 20A2F30 :                     ;
(2)    5/ 20A2F30 :                     ; These are located on the SH2's ROM area, this will be gone
(2)    6/ 20A2F30 :                     ; if RV is set to 1
(2)    7/ 20A2F30 :                     ;
(2)    8/ 20A2F30 :                     ; Labels MUST be aligned by 4
(2)    9/ 20A2F30 :                     ; ----------------------------------------------------------------
(2)   10/ 20A2F30 :                     
(2)   11/ 20A2F30 :                     		align 4
(2)   12/ 20A2F30 :                     ; ArtMars_TEST:
(2)   13/ 20A2F30 :                     ; 		binclude "game/data/TESTS/test_art.bin"
(2)   14/ 20A2F30 :                     ; 		align 2
(2)   15/ 20A2F30 :                     
(1)   40/ 20A2F30 :                     
(1)   41/ 20A2F30 :                     ; --------------------------------------------------------
(1)   42/ 20A2F30 :                     ; Models
(1)   43/ 20A2F30 :                     ; --------------------------------------------------------
(1)   44/ 20A2F30 :                     
(1)   45/ 20A2F30 :                     ; 		align 4
(1)   46/ 20A2F30 :                     ; 		include "game/data/maps/3D/mcity/mars_data.asm"
(1)   47/ 20A2F30 :                     ; 		align 4
(1)   48/ 20A2F30 :                     
(1)   49/ 20A2F30 :                     ; MarsObj_test:
(1)   50/ 20A2F30 :                     ; 		include "game/data/mars/objects/mdl/test/head.asm"
(1)   51/ 20A2F30 :                     
(1)   52/ 20A2F30 :                     
     508/   A2F30 :                     		dephase
     510/   A2F30 :                     
     511/   A2F30 :                     ; ====================================================================
     512/   A2F30 :                     ; ---------------------------------------------
     513/   A2F30 :                     ; End
     514/   A2F30 :                     ; ---------------------------------------------
     515/   A2F30 :                     
     516/   A2F30 :                     ROM_END:
     520/   A2F30 :                     		align $8000		; Pad the Cartridge
     522/   A8000 :                     
 AS V1.42 Beta [Bld 118] - source file main.asm - page 2 - 7/24/2023 0:25:37


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ARTMARS_TEST :             6003144 C | *ARTMD_TEST :                 30C00 C |
*ARTMD_TEST_E :               39B00 C |  ASCII_FONT :                 30000 C |
 ASCII_FONT_E :               30C00 C |  ASCII_PAL :       FFFFFFFFFFFF0282 C |
*ASCII_PAL_E :     FFFFFFFFFFFF02A2 C |  ATK :                            8 - |
*AT_D :                           2 - | *AT_L :                           1 - |
*AT_R :                           0 - | *AT_U :                           3 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      1 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      0 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - | *BITJOYB :                        4 - |
*BITJOYC :                        5 - | *BITJOYDOWN :                     1 - |
*BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
*BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
*BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
 BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
*BITOBJ_AIR :                     0 - | *BITOBJ_FLIPH :                   0 - |
*BITOBJ_FLIPV :                   1 - | *BITOBJ_MARS :                    7 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                     FF5 C |  CHIP_ENV.ATKEND :             1078 C |
*CHIP_ENV.ATKZERO :            107B C |  CHIP_ENV.CHK2 :               1081 C |
 CHIP_ENV.CHK4 :               10B6 C |  CHIP_ENV.CKOF :               1019 C |
 CHIP_ENV.CKON :               102C C | *CHIP_ENV.DECTMR :             1085 C |
 CHIP_ENV.DKADD :              109F C |  CHIP_ENV.DKSAV :              10A7 C |
 CHIP_ENV.DKYEND :             10AC C |  CHIP_ENV.DO_NFREQ :           110B C |
 CHIP_ENV.ENVPROC :            104A C |  CHIP_ENV.KILLENV :            10CC C |
*CHIP_ENV.NBLOCK :             104A C |  CHIP_ENV.NORMAL :             1106 C |
 CHIP_ENV.NOUPD :              114C C |  CHIP_ENV.NSKIP :              1041 C |
 CHIP_ENV.SILNC_3 :            1102 C |  CHIP_ENV.VEDLP :              10D4 C |
 CHIP_ENV.VLMUCH :             1138 C |  CHIP_ENV.VLOOP :              1001 C |
 CHIP_ENV.VONLY :              112E C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
 COMM6 :                         26 - |  COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   17C8 C |
 COMMZROMBLK :                   81 C |  COMMZWRITE :                    80 C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFB000 - |
 CONTROLLER_2 :    FFFFFFFFFFFFB010 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - | *CSCRN0_E :        FFFFFFFFFFFF1920 C |
*CSCRN0_S :        FFFFFFFFFFFF1800 C |  CURRTICKBITS :                  2E C |
 CYCLE :                         32 - |  DACINS_SNARE_1 :            90B444 C |
 DACINS_SNARE_1.END :        90C56E C |  DACINS_SNARE_1.START :      90B44A C |
*DACINS_TESTINS :            90C56E C |  DACINS_TESTINS.END :        91AC74 C |
 DACINS_TESTINS.START :      90C574 C |  DACINS_WEGOT_CRASH :        908000 C |
 DACINS_WEGOT_CRASH.END :    90ACCA C |  DACINS_WEGOT_CRASH.START :  908006 C |
 DACINS_WEGOT_KICK :         90ACCA C |  DACINS_WEGOT_KICK.END :     90B444 C |
 DACINS_WEGOT_KICK.START :   90ACD0 C |  DAC_FILL :                      20 C |
 DAC_FIRSTFILL :               11D5 C |  DAC_ME :                         8 C |
 DAC_OFF :                     118C C |  DAC_ON :                      1177 C |
 DAC_PLAY :                    11A1 C |  DAC_REFILL :                  11D5 C |
 DAC_REFILL.DACFILL_END :      1294 C |  DAC_REFILL.DACFILL_LOOP :     124D C |
 DAC_REFILL.DACFILL_RET :      1297 C |  DAC_REFILL.DAC_OVER :         1223 C |
*DATE :                   7/24/2023 - |  DDACCNTR :                      33 C |
 DDACFIFOMID :                   2F C |  DDACPNTR :                      30 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DREQ_PALETTE :                   0 C |
 DRV_LOOP :                      87 C |  DRV_LOOP.CMND_0 :              12F C |
 DRV_LOOP.CMND_1 :              132 C |  DRV_LOOP.CMND_2 :              14F C |
 DRV_LOOP.CMND_8 :              16C C |  DRV_LOOP.CMND_C :              18E C |
 DRV_LOOP.FOUND :               1CC C |  DRV_LOOP.GETCBYTEL :            F2 C |
 DRV_LOOP.GRAB_ARG :             F0 C |  DRV_LOOP.LIST :                10F C |
 DRV_LOOP.NEITHER :              C7 C |  DRV_LOOP.NEXT :                1A6 C |
 DRV_LOOP.NEXT_CMD :             CD C |  DRV_LOOP.NEXT_SALL :           170 C |
 DRV_LOOP.NOBEATS :              AE C |  DRV_LOOP.NOTICKS :              A1 C |
 DRV_LOOP.NOT_FND :             1C7 C |  DRV_LOOP.NOT_ON :              186 C |
 DRV_LOOP.SRCH_FRID :           19F C |  DTBL_FROMMUL :                 6E7 C |
 DTBL_FROMMUL.CHNL_ULNK :       DB7 C |  DTBL_FROMMUL.CHNL_ULNKCUT :    DC6 C |
 DTBL_FROMMUL.CHNL_ULNKOFF :    DB5 C |  DTBL_FROMMUL.DAC_CUT :         945 C |
 DTBL_FROMMUL.DAC_INS :         BC9 C |  DTBL_FROMMUL.DAC_OFF :         94B C |
 DTBL_FROMMUL.DAC_PITCH :       94E C |  DTBL_FROMMUL.D_CONT :          AB2 C |
 DTBL_FROMMUL.EFFC :            A1F C |  DTBL_FROMMUL.EFFC_D :          A3A C |
 DTBL_FROMMUL.EFFC_E :          A7D C |  DTBL_FROMMUL.EFFC_F :          A92 C |
 DTBL_FROMMUL.EFFC_X :          AB3 C |  DTBL_FROMMUL.FINE_DOWN :       A55 C |
 DTBL_FROMMUL.FINE_UP :         A69 C |  DTBL_FROMMUL.FMSPC_SET :       884 C |
 DTBL_FROMMUL.FM_CINDX :        D79 C |  DTBL_FROMMUL.FM_CUT :          915 C |
 DTBL_FROMMUL.FM_HASVOL :       C6D C |  DTBL_FROMMUL.FM_INS :          B48 C |
 DTBL_FROMMUL.FM_KEYOFF :       CD1 C |  DTBL_FROMMUL.FM_OFF :          90F C |
 DTBL_FROMMUL.FM_PANLIST :      ADC C |  DTBL_FROMMUL.FM_SETFREQ :      CF0 C |
 DTBL_FROMMUL.FM_SETRLIST :     BB9 C |  DTBL_FROMMUL.FM_TLOFF :        CD9 C |
 DTBL_FROMMUL.FM_WRTALPAN :     D81 C |  DTBL_FROMMUL.FM_WRTLVOL :      D07 C |
 DTBL_FROMMUL.FND_OCT :         CBE C |  DTBL_FROMMUL.FROM_PSGN :       7C9 C |
 DTBL_FROMMUL.GET_OCT :         CAE C |  DTBL_FROMMUL.INST :            AED C |
*DTBL_FROMMUL.INVL_INS :        B0B C |  DTBL_FROMMUL.KYCUT_PSG :       81B C |
 DTBL_FROMMUL.KYCUT_PSGN :      816 C |  DTBL_FROMMUL.KYOFF_PSG :       80B C |
 DTBL_FROMMUL.KYOFF_PSGN :      806 C |  DTBL_FROMMUL.LINKED :          744 C |
 DTBL_FROMMUL.MK_DAC :          91E C |  DTBL_FROMMUL.MK_FM :           826 C |
 DTBL_FROMMUL.MK_FMSPC :        898 C |  DTBL_FROMMUL.MK_LIST :         782 C |
 DTBL_FROMMUL.MK_PSG :          7B0 C |  DTBL_FROMMUL.MK_PSGN :         792 C |
 DTBL_FROMMUL.MK_PWM :          974 C |  DTBL_FROMMUL.NEW_ROMDAT :      B7C C |
 DTBL_FROMMUL.NOFM_NOTE :       85B C |  DTBL_FROMMUL.NORM_DOWN :       A53 C |
 DTBL_FROMMUL.NORM_UP :         A6B C |  DTBL_FROMMUL.NOTE :            C63 C |
 DTBL_FROMMUL.NOT_DAC :         858 C |  DTBL_FROMMUL.NOT_DSPC :        84F C |
 DTBL_FROMMUL.NO_LFO :          DB4 C |  DTBL_FROMMUL.N_FM :            CA4 C |
 DTBL_FROMMUL.N_INDX :          C90 C |  DTBL_FROMMUL.N_PSGN :          C9F C |
 DTBL_FROMMUL.N_STFREQ :        C91 C |  DTBL_FROMMUL.PN_INS :          B0C C |
 DTBL_FROMMUL.PSG_KEYON :       7F0 C |  DTBL_FROMMUL.PS_INS :          B12 C |
 DTBL_FROMMUL.PWM_CUT :         A10 C |  DTBL_FROMMUL.PWM_INS :         C20 C |
 DTBL_FROMMUL.PWM_OFF :         A01 C |  DTBL_FROMMUL.PWV_MUCH :        9FD C |
 DTBL_FROMMUL.PW_EFFC :         99E C |  DTBL_FROMMUL.PW_NOTE :         9A5 C |
 DTBL_FROMMUL.PW_SEND :         9AA C |  DTBL_FROMMUL.PW_SETUP :        9CE C |
 DTBL_FROMMUL.RCYL_COM :        738 C |  DTBL_FROMMUL.RES_PAN :         AD2 C |
 DTBL_FROMMUL.SAME_PATCH :      BB4 C |  DTBL_FROMMUL.SAVE_ARG :        AA7 C |
 DTBL_FROMMUL.SILN_DAC :        725 C |  DTBL_FROMMUL.SILN_FM :         728 C |
 DTBL_FROMMUL.SILN_PSG :        71E C |  DTBL_FROMMUL.SILN_PSG_N :      71A C |
 DTBL_FROMMUL.SILN_PWM :        72E C |  DTBL_FROMMUL.TL_DOWN :         CE3 C |
 DTBL_FROMMUL.VMUCH :           7FC C |  DTBL_FROMMUL.VOLU :            AE4 C |
 DTBL_FROMMUL.VOL_DVLD :        A79 C |  DTBL_FROMMUL.WRITE_TL :        D6C C |
 DTBL_MULTI :                   6D0 C |  DTBL_SINGL :                   6E6 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EXTR_3 :                         A C |
*EXTR_4 :                         C C | *EXTR_5 :                         E C |
 EX_COMM :                      DD9 C |  EX_COMM.BLOCKED :              E79 C |
 EX_COMM.CLRCOM :               E80 C |  EX_COMM.NEXT_COMM :            E51 C |
 EX_COMM.NEXT_PASS :            E46 C |  EX_COMM.WAIT_ENTER :           E1A C |
 EX_COMM.W_PASS2 :              E67 C | *FALSE :                          0 - |
 FBVRAM_BLANK :               1F800 - | *FBVRAM_PATCH :               1D000 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FMCACH_1 :                    15FF C |  FMCACH_2 :                    1627 C |
 FMCACH_3 :                    164F C |  FMCACH_4 :                    1677 C |
 FMCACH_5 :                    169F C |  FMCACH_6 :                    16C7 C |
 FMCACH_LIST :                 1495 C |  FMFREQ_LIST :                 129B C |
*FMINS_AMBIENT_3 :           885C06 C | *FMINS_AMBIENT_DARK :        885BC6 C |
*FMINS_AMBIENT_SPOOK :       885BE6 C | *FMINS_BANJO_PUY :           885C86 C |
*FMINS_BASS_1 :              885A46 C | *FMINS_BASS_2 :              885A66 C |
 FMINS_BASS_4 :              885886 C | *FMINS_BASS_8 :              8858A6 C |
*FMINS_BASS_CALM :           885906 C |  FMINS_BASS_CLUB :           8858E6 C |
*FMINS_BASS_DONNA :          885A86 C | *FMINS_BASS_DUCK :           885B26 C |
*FMINS_BASS_GROOVE :         885AA6 C | *FMINS_BASS_GROOVE_2 :       885AC6 C |
*FMINS_BASS_GROOVE_GEM :     885AE6 C | *FMINS_BASS_ITALO :          885B06 C |
*FMINS_BASS_OIL :            885986 C | *FMINS_BRASS_EUR :           885966 C |
*FMINS_BRASS_PUY :           885C46 C | *FMINS_CLOSEDHAT :           885A06 C |
*FMINS_DING_1 :              885CC6 C | *FMINS_DING_BASEBALL :       8859C6 C |
*FMINS_DING_TOY :            885C26 C | *FMINS_DRUMKICK_GEM :        8859E6 C |
*FMINS_FLAUTE_CAVE :         885C66 C | *FMINS_HBEAT_TOM :           885D06 C |
*FMINS_MARIMBA :             885BA6 C | *FMINS_ORGAN_ITO :           8859A6 C |
*FMINS_PIANOM1 :             885A26 C | *FMINS_PIANO_AQUA :          885B46 C |
*FMINS_PSYNTH_PLUS :         885CA6 C | *FMINS_SP_CLOSEDHAT :        885836 C |
*FMINS_SP_COWBELL :          88585E C |  FMINS_SP_OPENHAT :          88580E C |
 FMINS_SYNTH_PLUS :          8858C6 C | *FMINS_TROMBONE_GEM :        885CE6 C |
*FMINS_TRUMPET_1 :           885926 C |  FMINS_TRUMPET_2 :           885B66 C |
*FMINS_TRUMPET_CARNIVAL :    885946 C | *FMINS_TRUMPET_PUY :         885B86 C |
 FMSPECIAL :                   17B3 C |  FM_AUTOREG :                  1158 C |
 FM_SEND_1 :                   1161 C |  FM_SEND_2 :                   116C C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - | *GEMACD_REPORT :             883A18 C |
*GEMACD_REPORT_E :           885D26 C |  GEMADMAPAUSE :    FFFFFFFFFFFF00FA C |
 GEMADMAPAUSEROM : FFFFFFFFFFFF013C C |  GEMADMARESUME :   FFFFFFFFFFFF0122 C |
 GEMADMARESUMEROM :                                        FFFFFFFFFFFF016C C |
*GEMAPLAYFROMBLK : FFFFFFFFFFFF01C2 C |  GEMAPLAYTRACK :   FFFFFFFFFFFF01A6 C |
*GEMASETBEATS :    FFFFFFFFFFFF0204 C |  GEMASTOPALL :     FFFFFFFFFFFF01F4 C |
*GEMASTOPTRACK :   FFFFFFFFFFFF01DE C | *GEMATEST :        FFFFFFFFFFFF0196 C |
 GEMATRK_TEST_0 :            883A98 C |  GEMATRK_TEST_0.BLK :        883AA4 C |
 GEMATRK_TEST_0.INS :        883B6B C |  GEMATRK_TEST_0.PAT :        883AA7 C |
 GEMATRK_TEST_2 :            883B93 C |  GEMATRK_TEST_2.BLK :        883B9F C |
 GEMATRK_TEST_2.INS :        8857D6 C |  GEMATRK_TEST_2.PAT :        883BB4 C |
 GEMA_INIT :                    E85 C |  GEMA_INIT.END_SETUP :          F2B C |
 GEMA_INIT.SETUP_LIST :         EE0 C |  GEMA_INIT.ST_COPY :            EFF C |
 GEMA_MASTERLIST :           883A18 C |  GET_ROMTRCKS :                 4D1 C |
 GET_TICK :                     F33 C |  GET_TICK.CTNOTICK :            F50 C |
 GLBL_LASTORG :               4F900 - |  GLBL_LASTPC :              6015E00 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   17B4 C |  HEADEROUT_E :                 17C0 C |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :    FFFFFFFFFFFF10A4 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INIT_ROMTRCKS :                4D9 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 INT_M_LIST :               60002A0 C |  INT_S_LIST :               60002E0 C |
*JOYA :                          40 - | *JOYB :                          10 - |
*JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :    FFFFFFFFFFFF026E C |
 LITERAL_F_00000000_1 :     60004AC C |  LITERAL_F_00000001_1 :     60005E0 C |
 LITERAL_F_00000002_1 :     6000700 C |  LITERAL_F_00000003_1 :     60007CC C |
 LITERAL_F_00000004_1 :     60007DC C |  LITERAL_F_00000005_1 :     6000914 C |
 LITERAL_F_00000006_1 :     6000920 C |  LITERAL_L_0000FC00_1 :     600063C C |
 LITERAL_L_00800080_1 :     6000704 C |  LITERAL_L_06000000_1 :     60007C8 C |
 LITERAL_L_06000128_1 :     6000910 C |  LITERAL_L_060005F0_1 :     60007D0 C |
 LITERAL_L_0603EFF8_1 :     60005DC C |  LITERAL_L_0603F000_1 :     600090C C |
 LITERAL_L_0603FFF8_1 :     60004A8 C |  LITERAL_L_06040000_1 :     60007C4 C |
 LITERAL_L_20004000_1 :     6000494 C |  LITERAL_L_20004000_2 :     60005D8 C |
 LITERAL_L_20004000_3 :     6000630 C |  LITERAL_L_20004000_4 :     60006FC C |
 LITERAL_L_20004000_5 :     60007D4 C |  LITERAL_L_20004000_6 :     6000918 C |
 LITERAL_L_20004012_1 :     600049C C |  LITERAL_L_20004016_1 :     60004A4 C |
 LITERAL_L_20004016_2 :     60005D4 C |  LITERAL_L_20004018_1 :     60004A0 C |
 LITERAL_L_20004018_2 :     60005D0 C |  LITERAL_L_2000401A_1 :     6000490 C |
 LITERAL_L_2000401A_2 :     60005C0 C |  LITERAL_L_2000401C_1 :     600048C C |
 LITERAL_L_2000401C_2 :     60005BC C |  LITERAL_L_20004022_1 :     6000378 C |
 LITERAL_L_20004024_1 :     600037C C |  LITERAL_L_20004026_1 :     6000864 C |
 LITERAL_L_20004027_1 :     6000940 C |  LITERAL_L_20004028_1 :     60005C4 C |
 LITERAL_L_2000402C_1 :     6000498 C |  LITERAL_L_2000402C_2 :     600091C C |
 LITERAL_L_2000402D_1 :     6000870 C |  LITERAL_L_2000402E_1 :     60005CC C |
 LITERAL_L_2000402E_2 :     60007D8 C |  LITERAL_L_20004100_1 :     6000634 C |
 LITERAL_L_20004100_2 :     60006C4 C |  LITERAL_L_20004100_3 :     60007E4 C |
 LITERAL_L_20004100_4 :     6000868 C |  LITERAL_L_20004200_1 :     600086C C |
 LITERAL_L_24000000_1 :     6000638 C |  LITERAL_L_24000000_2 :     60006C0 C |
 LITERAL_L_24000200_1 :     60007E0 C |  LITERAL_L_4D5F4F4B_1 :     60004B0 C |
 LITERAL_L_535F4F4B_1 :     60005E4 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     60005C8 C |
 LITERAL_W_0080_1 :         6000640 C |  LITERAL_W_00A2_1 :         60006C8 C |
 LITERAL_W_00E0_1 :         60007FC C |  LITERAL_W_00F0_1 :         60004BA C |
 LITERAL_W_00F0_2 :         60005EC C |  LITERAL_W_00F0_3 :         6000642 C |
 LITERAL_W_0105_1 :         6000708 C |  LITERAL_W_0140_1 :         60007FA C |
 LITERAL_W_0415_1 :         600070A C |  LITERAL_W_0530_1 :         60007EC C |
 LITERAL_W_0530_2 :         6000928 C |  LITERAL_W_0C00_1 :         600070C C |
 LITERAL_W_44E0_1 :         60004B6 C |  LITERAL_W_44E0_2 :         60005EA C |
 LITERAL_W_44E5_1 :         60004B8 C |  LITERAL_W_4600_1 :         60007F8 C |
 LITERAL_W_4800_1 :         60007F0 C |  LITERAL_W_4800_2 :         600092C C |
 LITERAL_W_A518_1 :         60007F4 C |  LITERAL_W_A518_2 :         6000930 C |
 LITERAL_W_FE10_1 :         60004B4 C |  LITERAL_W_FE10_2 :         60005E8 C |
 LITERAL_W_FE10_3 :         60007E8 C |  LITERAL_W_FE10_4 :         6000924 C |
 LITERAL_W_FE80_1 :         60007F2 C |  LITERAL_W_FE80_2 :         600092E C |
 LITERAL_W_FE92_1 :         60007F6 C |  LITERAL_W_FE92_2 :         6000932 C |
 LITERAL_W_FEE2_1 :         60007EA C |  LITERAL_W_FEE2_2 :         6000926 C |
 LITERAL_W_FEE4_1 :         60007EE C |  LITERAL_W_FEE4_2 :         600092A C |
*MACEXP :                         7 - | *MAPMD_TEST :                905F46 C |
 MARS :                           1 - |  MARSBLOCK :                     82 C |
 MARSCD :                         0 - |  MARSGBL_DMAREAD :                4 C |
 MARSGBL_DMAWRITE :               8 C | *MARSGBL_NULL :                   2 C |
 MARSGBL_XSHIFT :                 0 C |  MARSGEMA_TABLE :          C0000000 - |
 MARSSOUND_FIRSTFILL :      60006E8 C |
 MARSSOUND_FIRSTFILL.FILL_BOTH :                                    60006EE C |
 MARSSOUND_INIT :           60006CC C |  MARSUPD :                       3F C |
*MARSVIDEO_FIXTBLSHIFT :    6000668 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       60006A8 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       6000690 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    60006BA C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    60006B4 C |
 MARSVIDEO_INIT :           60005F0 C |  MARSVIDEO_INIT.DEF_FB :    6000610 C |
 MARSVIDEO_INIT.NXT_LNE :   6000616 C |  MARSVIDEO_INIT.WAIT_FRM :  6000626 C |
 MARSVIDEO_MAKENAMETBL :    6000644 C |
 MARSVIDEO_MAKENAMETBL.CANT_USE :                                   6000662 C |
*MARSVIDEO_MAKENAMETBL.LINETBL_NORMAL :                             6000654 C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE2 :                                   6000658 C |
 MARS_ENTRY :                   800 C | *MARS_ENTRY.NO_MARS :           802 C |
 MARS_RAMDATA :               39B00 C |  MARS_RAMDATA_E :             4F900 C |
 MASTER_IRQ :               6000250 C |  MASTER_LOOP :              6000800 C |
 MASTER_LOOP.COPY_PAL :     600083C C | *MASTER_LOOP.NOT_READY :    6000858 C |
 MASTER_LOOP.WAITL :        600080A C |  MASTER_LOOP.WAITV :        6000828 C |
 MAX_BLOCKS :                    18 - |  MAX_HEADS :                      F - |
 MAX_INS :                        F - |  MAX_MDDMATSK :                  10 - |
 MAX_MDGLOBAL :                 800 - |  MAX_MDOBJ :                     10 - |
 MAX_MDOTHER :                 1000 - |  MAX_MDSYSTEM :                 500 - |
 MAX_MDVIDEO :                 2000 - |  MAX_RAMSNDDATA :              3800 - |
 MAX_RCACH :                     40 - |  MAX_SCRNBUFF :                2800 - |
 MAX_SYSCODE :                 1800 - |  MAX_TBLSIZE :                   10 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    11 - |
 MAX_USERCODE :                4000 - |  MCD :                            0 - |
*MCD_COMM_M :                     E - | *MCD_COMM_S :                     F - |
*MCD_DBANK0 :                  5D26 C | *MCD_DBANK0_E :               29800 C |
*MCD_DCOMM_M :                   10 - | *MCD_DCOMM_S :                   20 - |
*MCD_GEMATRKS :                3A18 C | *MCD_HINT :                       6 - |
*MCD_MEMORY :                     3 - | *MDBANK0 :                   905D26 C |
*MDBANK0_CD_E :              929374 C | *MDBANK0_E :                 9068A6 C |
*MDJUMPCODE_E :    FFFFFFFFFFFFFE28 C | *MDJUMPCODE_S :    FFFFFFFFFFFFFE00 C |
 MDSYS_SINEDATA :  FFFFFFFFFFFF0EF4 C |  MD_BANK_SRAM :              A130F1 - |
*MD_BG_BH :                       1 C | *MD_BG_BLK :                     28 C |
*MD_BG_BLKW :                     2 C | *MD_BG_BW :                       0 C |
*MD_BG_COL :                     2C C | *MD_BG_FLAGS :                    3 C |
*MD_BG_H :                        A C | *MD_BG_HF :                       E C |
*MD_BG_HI :                      24 C | *MD_BG_LOW :                     20 C |
*MD_BG_MOVEX :                    6 C | *MD_BG_MOVEY :                    7 C |
*MD_BG_VPOS :                    1C C | *MD_BG_VRAM :                    1E C |
*MD_BG_W :                        8 C | *MD_BG_WF :                       C C |
*MD_BG_X :                       30 C | *MD_BG_XINC_L :                  10 C |
*MD_BG_XINC_R :                  12 C | *MD_BG_XSET :                     4 C |
*MD_BG_X_OLD :                   18 C | *MD_BG_Y :                       34 C |
*MD_BG_YINC_D :                  16 C | *MD_BG_YINC_U :                  14 C |
*MD_BG_YSET :                     5 C | *MD_BG_Y_OLD :                   1A C |
 MD_ERRADDR :                   820 C |  MD_ERRBUS :                    820 C |
 MD_ERRCHK :                    820 C |  MD_ERRILL :                    820 C |
 MD_ERROREX :                   820 C |  MD_ERRORTRAP :                 820 C |
 MD_ERRPRIVL :                  820 C |  MD_ERRTRAPV :                  820 C |
 MD_ERRZDIV :                   820 C |  MD_INIT :                      838 C |
 MD_INIT.COPYME :               88E C |  MD_INIT.COPYME_2 :             8A2 C |
 MD_INIT.LOOP_RAM :             850 C |  MD_INIT.WAIT_DMA :             86A C |
 MD_JUMPCODE :                 19D0 C |  MD_JUMPCODE_E :               19F8 C |
 MD_LINE1010 :                  820 C |  MD_LINE1111 :                  820 C |
 MD_READMODES :    FFFFFFFFFFFFFE00 C |
 MD_READMODES.PICK_BOOT :                                  FFFFFFFFFFFFFE18 C |
 MD_SCREEN00 :                 38F8 C | *MD_SCREEN00_E :               3A18 C |
 MD_SYSCODE :                   8C6 C |  MD_SYSCODE_E :                19D0 C |
 MD_TRACE :                     820 C |  MODE :                          18 - |
*MODE_FADEOUT :    FFFFFFFFFFFF105C C |
 MODE_FADEOUT.LOOPW :                                      FFFFFFFFFFFF1080 C |
 MODE_INIT :       FFFFFFFFFFFF103E C |  MODE_INIT.CLR :   FFFFFFFFFFFF104E C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        6 C |
 MOUSE_Y :                        8 C |  M_IRQ_BAD :                6000380 C |
 M_IRQ_CMD :                600039C C |  M_IRQ_DMA :                6000470 C |
 M_IRQ_H :                  60003E8 C |  M_IRQ_PWM :                6000384 C |
 M_IRQ_V :                  6000404 C |  M_IRQ_VRES :               6000420 C |
 M_IRQ_VRES.RV_BUSY :       6000464 C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             14A3 C |  NIKONA_SETMSTRLIST :          14D5 C |
*OBJ_ANIM_ID :                   1C C | *OBJ_ANIM_INDX :                 1A C |
*OBJ_ANIM_SPD :                  20 C | *OBJ_CODE :                       0 C |
*OBJ_FRAME :                     1E C | *OBJ_INDEX :                     21 C |
*OBJ_MAP :                       10 C | *OBJ_RAM :                       26 C |
*OBJ_SET :                       23 C | *OBJ_SIZE :                       4 C |
*OBJ_SPWNID :                    25 C | *OBJ_STATUS :                    24 C |
*OBJ_SUBID :                     22 C | *OBJ_VRAM :                      14 C |
*OBJ_X :                          8 C | *OBJ_X_SPD :                     16 C |
*OBJ_Y :                          C C | *OBJ_Y_SPD :                     18 C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*PACKING :                        0 - | *PADDING :                        0 - |
*PADDINGSOFAR :                   0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C |  PALMARS_TEST :              905D26 C |
*PALMD_TEST :                905F26 C |  PARP :                          34 - |
*PEN :                           20 - |  PICO :                           0 - |
 PROC_CHIPS :                   523 C |  PSGCOM :                      1727 C |
 PSGFREQ_LIST :                12B3 C |  PSGHATMODE :                  17B2 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PVOL :                          30 - | *PWCOM :                          0 - |
*PWINSH :                        20 - | *PWINSL :                        30 - |
*PWINSM :                        28 - |  PWMCOM :                      16EF C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWOUTF :                        18 - |
*PWPHL :                         10 - | *PWPTH_V :                        8 - |
*RAM_BGBUFFER :    FFFFFFFFFFFF9660 C | *RAM_DMACODE :     FFFFFFFFFFFFB240 C |
*RAM_EXSOUNDDATA : FFFFFFFFFFFF5800 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFA9AA C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFA9A8 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFA9A6 C |  RAM_FADEMARSTMR : FFFFFFFFFFFFA9AC C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFA9A2 C |  RAM_FADEMDINCR :  FFFFFFFFFFFFA9A0 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFA99E C |  RAM_FADEMDTMR :   FFFFFFFFFFFFA9A4 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF9740 C |  RAM_GLBL_SCRN :   FFFFFFFFFFFFC500 C |
 RAM_HORSCROLL :   FFFFFFFFFFFF9744 C | *RAM_INITFLUG :    FFFFFFFFFFFFB448 C |
 RAM_INPUTDATA :   FFFFFFFFFFFFB000 C | *RAM_MAPX :        FFFFFFFFFFFFCD00 C |
*RAM_MAPY :        FFFFFFFFFFFFCD02 C |
*RAM_MAPY.FADE_IN :                                        FFFFFFFFFFFF18B2 C |
*RAM_MAPY.FADE_OUT :                                       FFFFFFFFFFFF18D8 C |
 RAM_MAPY.LOOP :   FFFFFFFFFFFF1892 C |  RAM_MAPY.LOOP2 :  FFFFFFFFFFFF18FC C |
 RAM_MARS_DREQBUFF_0 :     26015E00 C |  RAM_MARS_DREQBUFF_1 :     26016000 C |
*RAM_MARS_GEMASILENCE :    26018200 C |
*RAM_MARS_GEMASILENCE.HERE :                                        6015E00 C |
 RAM_MARS_GEMAWAVE_0 :     26016200 C | *RAM_MARS_GEMAWAVE_1 :     26017200 C |
 RAM_MARS_GLOBAL :          6015D50 C |  RAM_MDDREQ :      FFFFFFFFFFFFB500 - |
 RAM_MDGLOBAL :    FFFFFFFFFFFFC500 C |  RAM_MDMARSHINT :  FFFFFFFFFFFFB452 C |
 RAM_MDMARSPALFD : FFFFFFFFFFFFA534 C |  RAM_MDMARSVINT :  FFFFFFFFFFFFB44C C |
 RAM_MDOTHER :     FFFFFFFFFFFFB500 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFB000 C |
*RAM_MDVBLKWAIT :  FFFFFFFFFFFFB458 C |  RAM_MDVIDEO :     FFFFFFFFFFFF9000 C |
 RAM_MEGACD :              FFFFFD00 - | *RAM_OBJDISPLIST : FFFFFFFFFFFF9B54 C |
*RAM_OBJECTS :     FFFFFFFFFFFF9000 C |  RAM_PALETTE :     FFFFFFFFFFFFA434 C |
 RAM_PALETTEFD :   FFFFFFFFFFFFA4B4 C | *RAM_SAVEDATA :    FFFFFFFFFFFFB040 C |
 RAM_SCREENBUFF :  FFFFFFFFFFFFCD00 C |  RAM_SCREENJUMP :          FFFFFE00 - |
*RAM_SPRDRWCNTR :  FFFFFFFFFFFFA994 C | *RAM_SPRDRWPZ :    FFFFFFFFFFFF9B74 C |
 RAM_SPRITES :     FFFFFFFFFFFF9FD4 C | *RAM_SPRSHOWINDX : FFFFFFFFFFFFA996 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDSEED : FFFFFFFFFFFFB444 C |
*RAM_SYSRANDVAL :  FFFFFFFFFFFFB440 C |  RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
 RAM_USERCODE :    FFFFFFFFFFFF1800 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFA998 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFA734 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFA99A C |
 RAM_VDPREGS :     FFFFFFFFFFFFA9AE C |  RAM_VERSCROLL :   FFFFFFFFFFFF9B04 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFFA814 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFFA99C C |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    A2F30 C |  RRT :                           14 - |
 SAMPLEHEAD :                  17C2 C |  SAMPLE_RATE :                 5622 - |
 SBEATACC :                      1C C |  SBEATPTCK :                     1E C |
 SET_CHIPS :                    4FE C |  SET_CHIPS.TRK_BUFFRS :         506 C |
 SH2_DEBUG :                      1 - |  SH2_MASTER :               6000000 C |
 SH2_M_ENTRY :              6000710 C |  SH2_M_ERRADDR :            600032C C |
 SH2_M_ERRCODE :            600033C C |  SH2_M_ERRDMA :             6000330 C |
 SH2_M_ERRILLG :            6000324 C |  SH2_M_ERRINVL :            6000328 C |
 SH2_M_ERRNMI :             6000334 C |  SH2_M_ERROR :              6000320 C |
 SH2_M_ERRUSER :            6000338 C |  SH2_M_HOTSTART :           6000752 C |
 SH2_M_HOTSTART.LOOPIN :    6000792 C |  SH2_M_HOTSTART.WAIT_FRM :  60007B4 C |
 SH2_M_HOTSTART.WAIT_SLV :  6000786 C |  SH2_RAM :                  6015E00 C |
 SH2_SLAVE :                6000128 C |  SH2_S_ENTRY :              6000874 C |
 SH2_S_ERRADDR :            6000358 C |  SH2_S_ERRCODE :            6000368 C |
 SH2_S_ERRDMA :             600035C C |  SH2_S_ERRILLG :            6000350 C |
 SH2_S_ERRINVL :            6000354 C |  SH2_S_ERRNMI :             6000360 C |
 SH2_S_ERROR :              600034C C |  SH2_S_ERRUSER :            6000364 C |
 SH2_S_HOTSTART :           60008C4 C |  SH2_S_HOTSTART.WAIT_MST :  60008F8 C |
 SHIFT :                          2 - |  SHOWROM :                      F54 C |
*SIN_TABLE :                6000944 C |  SIZEOF_DREQ :                  200 C |
 SIZEOF_INPUT :                  10 C | *SIZEOF_MARSGBL :                 C C |
 SIZEOF_MDBG :                   38 C | *SIZEOF_MDGLBL :   FFFFFFFFFFFFC502 C |
 SIZEOF_MDOBJ :                  66 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFF500 C |
*SIZEOF_MDSYS :    FFFFFFFFFFFFB45A C |  SIZEOF_MDVID :    FFFFFFFFFFFFA9C6 C |
 SLAVE_IRQ :                6000278 C |  SLAVE_LOOP :               6000934 C |
 SLV :                           10 - | *SMPINS_KICK :              208B848 C |
 SMPINS_KICK.END :          208D248 C |  SMPINS_KICK.START :        208B84E C |
*SMPINS_MOVEME_BRASS :      2078EDC C |  SMPINS_MOVEME_BRASS.END :  208B846 C |
 SMPINS_MOVEME_BRASS.START :                                        2078EE2 C |
*SMPINS_MOVEME_HIT :        2076020 C |  SMPINS_MOVEME_HIT.END :    2078EDC C |
 SMPINS_MOVEME_HIT.START :  2076026 C | *SMPINS_NADIE :             204F900 C |
 SMPINS_NADIE.END :         2076020 C |  SMPINS_NADIE.START :       204F906 C |
*SMPINS_SNARE_1 :           208EC84 C |  SMPINS_SNARE_1.END :       208FDAE C |
 SMPINS_SNARE_1.START :     208EC8A C | *SMPINS_SNARE_2 :           209FEF4 C |
 SMPINS_SNARE_2.END :       20A2F2E C |  SMPINS_SNARE_2.START :     209FEFA C |
*SMPINS_SNARE_MOVEME :      208D248 C |  SMPINS_SNARE_MOVEME.END :  208EC82 C |
 SMPINS_SNARE_MOVEME.START :                                        208D24E C |
*SMPINS_VCTR01 :            208FDB0 C |  SMPINS_VCTR01.END :        20919E6 C |
 SMPINS_VCTR01.START :      208FDB6 C | *SMPINS_VCTR04 :            20919E8 C |
 SMPINS_VCTR04.END :        2093456 C |  SMPINS_VCTR04.START :      20919EE C |
*SMPINS_VCTRAMBIENT :       209E780 C |  SMPINS_VCTRAMBIENT.END :   209FEF4 C |
 SMPINS_VCTRAMBIENT.START : 209E786 C |  SMPINS_VCTRBRASS :         209D00C C |
 SMPINS_VCTRBRASS.END :     209E780 C |  SMPINS_VCTRBRASS.START :   209D012 C |
*SMPINS_VCTRCRASH :         20993A4 C |  SMPINS_VCTRCRASH.END :     209D00A C |
 SMPINS_VCTRCRASH.START :   20993AA C | *SMPINS_VCTRKICK :          209519C C |
 SMPINS_VCTRKICK.END :      209612E C |  SMPINS_VCTRKICK.START :    20951A2 C |
*SMPINS_VCTRSNARE :         2093458 C |  SMPINS_VCTRSNARE.END :     209519C C |
 SMPINS_VCTRSNARE.START :   209345E C | *SMPINS_VCTRTIMPANI :       2096130 C |
 SMPINS_VCTRTIMPANI.END :   20993A2 C |  SMPINS_VCTRTIMPANI.START : 2096136 C |
 SNDLOCKZ80 :      FFFFFFFFFFFF0068 C |  SNDLOCKZ80.WAIT : FFFFFFFFFFFF0070 C |
 SNDREQCMD :       FFFFFFFFFFFF0194 C |  SNDREQ_ENTER :    FFFFFFFFFFFF0086 C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF00AC C |
 SNDREQ_EXIT :     FFFFFFFFFFFF00BC C | *SNDREQ_SADDR :    FFFFFFFFFFFF00E4 C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF00EC C |  SNDREQ_SCMD :     FFFFFFFFFFFF00D2 C |
*SNDREQ_SLONG :    FFFFFFFFFFFF00E0 C |  SNDREQ_SWORD :    FFFFFFFFFFFF00E8 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF007C C |  SOUND_INIT :      FFFFFFFFFFFF0000 C |
 SOUND_INIT.CLEANUP :                                      FFFFFFFFFFFF002A C |
 SOUND_INIT.COPY : FFFFFFFFFFFF0040 C |  SOUND_INIT.WAIT : FFFFFFFFFFFF0014 C |
 STACK_MSTR :               6040000 - |  STACK_SLV :                603F000 - |
 STANDBY :                        3 - |  STR_STATS2 :      FFFFFFFFFFFF1908 C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
*SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF0CA4 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF0CAC C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF0CA8 C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF0CB0 C |
 SYSTEM_GRABRAMCODE :                                      FFFFFFFFFFFF0CC2 C |
 SYSTEM_GRABRAMCODE.COPYME2 :                              FFFFFFFFFFFF0CD4 C |
 SYSTEM_INIT :     FFFFFFFFFFFF0B88 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF0BE2 C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF0B96 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF0CE0 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF0D0E C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF0D34 C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF0DDE C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF0DD8 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF0D14 C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF0E56 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF0E5C C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF0E72 C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF0E7E C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF0E8A C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF0CF4 C |
*SYSTEM_INPUT.WAIT :                                       FFFFFFFFFFFF0CE0 C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF0DA6 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF0DD2 C |
 SYSTEM_MARSUPDATE :                                       FFFFFFFFFFFF0CB4 C |
*SYSTEM_RANDOM :   FFFFFFFFFFFF0E8C C |
 SYSTEM_RANDOM.GOOD_S :                                    FFFFFFFFFFFF0E9A C |
 SYSTEM_ROMSENDDREQ :                                      FFFFFFFFFFFF10A6 C |
*SYSTEM_ROMSENDDREQ.END :                                  FFFFFFFFFFFF110A C |
 SYSTEM_ROMSENDDREQ.L0 :                                   FFFFFFFFFFFF10E6 C |
 SYSTEM_ROMSENDDREQ.WAIT_BIT :                             FFFFFFFFFFFF10D2 C |
 SYSTEM_ROMSENDDREQ.WAIT_BIT_E :                           FFFFFFFFFFFF10F2 C |
 SYSTEM_SETINTS :  FFFFFFFFFFFF0FF4 C |
 SYSTEM_SETINTS.NOHINT :                                   FFFFFFFFFFFF1014 C |
 SYSTEM_SETINTS.NOVINT :                                   FFFFFFFFFFFF1004 C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF0ED6 C |
 SYSTEM_SINEWAVE.DONT_NEG :                                FFFFFFFFFFFF0EF2 C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF0EB6 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                            FFFFFFFFFFFF0ED0 C |
*SYSTEM_SRAMINIT : FFFFFFFFFFFF1016 C |
 SYSTEM_SRAMINIT.INITSAVE :                                FFFFFFFFFFFF102A C |
 SYSTEM_WAITFRAME :                                        FFFFFFFFFFFF0BEC C |
 SYSTEM_WAITFRAME.WAIT_IN :                                FFFFFFFFFFFF0C04 C |
 SYSTEM_WAITFRAME.WAIT_LAG :                               FFFFFFFFFFFF0BF2 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - | *SYS_IO :                    A10001 - |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                60004BC C |
 S_IRQ_CMD :                60004DC C | *S_IRQ_CMD.COPY_1 :         6000502 C |
 S_IRQ_CMD.EXIT_C :         6000510 C |  S_IRQ_CMD.WAIT_1 :         60004F6 C |
 S_IRQ_DMA :                60005A8 C |  S_IRQ_DMA.WAIT_DMA :       60005B2 C |
 S_IRQ_H :                  6000524 C |  S_IRQ_PWM :                60004C0 C |
 S_IRQ_V :                  6000540 C |  S_IRQ_VRES :               600055C C |
 S_IRQ_VRES.RV_BUSY :       600059C C |  TBLBUFF_READ :                 543 C |
 TBLBUFF_READ.CHK_PSG :         607 C |  TBLBUFF_READ.CLRFULL :         6C6 C |
 TBLBUFF_READ.DO_CHIP :         579 C |  TBLBUFF_READ.DO_NEWCHIP :      632 C |
 TBLBUFF_READ.GRAB_LINK :       5AF C |  TBLBUFF_READ.INVLDL :          5F0 C |
 TBLBUFF_READ.L_HIPRIO :        67B C |  TBLBUFF_READ.NEW_CHIP :        633 C |
 TBLBUFF_READ.NEW_LINK :        678 C |  TBLBUFF_READ.NEW_LINK_O :      678 C |
 TBLBUFF_READ.NEW_LINK_Z :      674 C |  TBLBUFF_READ.NEXTSRCH_TBL :    66A C |
 TBLBUFF_READ.NEXT_CHNL :       566 C |  TBLBUFF_READ.NEXT_PRIO :       655 C |
 TBLBUFF_READ.PASS_2 :          653 C |  TBLBUFF_READ.PICK_TBL :        69E C |
 TBLBUFF_READ.REFILL :          62F C |  TBLBUFF_READ.REROLL :          5F9 C |
 TBLBUFF_READ.RESET_LINK :      6B8 C |  TBLBUFF_READ.RNOT_PSG :        62D C |
 TBLBUFF_READ.SET_ASFULL :      69B C |  TBLBUFF_READ.SINGL_FREE :      689 C |
 TBLBUFF_READ.SINGL_LINK :      61F C | *TBLBUFF_READ.SNGL_SPRIO :      69A C |
 TBLBUFF_READ.SRCH_FREE :       642 C |  TBLBUFF_READ.SRCH_LINK :       5D6 C |
 TBLBUFF_READ.SRCH_LLOOP :      5E0 C |  TBLBUFF_READ.TRACK_CONT :      559 C |
 TBLFM :                       152B C |  TBLFM3 :                      156B C |
 TBLFM6 :                      157B C |  TBLLIST :                     14D9 C |
 TBLPSG :                      14E9 C |  TBLPSGN :                     151B C |
 TBLPWM :                      158D C | *TEST_MAINSPD :                   4 - |
*TEST_WAVE :                 91AC74 C | *TEST_WAVE_E :               929374 C |
 TH :                      20000000 - |  TICKCNT :                     17B1 C |
 TICKFLAG :                    17B0 C |  TICKSPSET :                   17AF C |
*TIME :                     0:25:37 - |  TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    493 C |
 TRACK_OUT.CLRFE :              4A4 C |  TRACK_OUT.NOCHIP :             4C7 C |
 TRANSFERROM :                  F74 C |  TRANSFERROM.DOUBLE :           F93 C |
 TRANSFERROM.TRANSFER :         FB7 C |  TRANSFERROM.X68KLAST :         FD5 C |
 TRANSFERROM.X68KLOOP :         FC1 C |  TRANSFERROM.X68KLPWT :         FE3 C |
 TRANSFERROM.X68KNOCARRY :      FB1 C |  TRANSFERROM.X68KPWTLP :        FE8 C |
 TRKBLKS_0 :                   1C0D C |  TRKBLKS_1 :                   1C25 C |
 TRKBLKS_2 :                   1C3D C |  TRKBUFF_0 :                   17C9 C |
 TRKBUFF_1 :                   17F9 C |  TRKBUFF_2 :                   1829 C |
 TRKCACH_0 :                   1E00 C |  TRKCACH_1 :                   1E40 C |
 TRKCACH_2 :                   1E80 C | *TRKCACH_3 :                   1EC0 C |
 TRKCHNL_0 :                   1859 C |  TRKCHNL_1 :                   18E1 C |
 TRKCHNL_2 :                   1969 C |  TRKHDRS_0 :                   19F1 C |
 TRKHDRS_1 :                   1A2D C |  TRKHDRS_2 :                   1A69 C |
 TRKINSD_0 :                   1AA5 C |  TRKINSD_1 :                   1B1D C |
 TRKINSD_2 :                   1B95 C |  TRKLISTCACH :                 1763 C |
 TRKLISTPAGE :                   3E C | *TRK_BANKBLK :                   16 - |
*TRK_BANKHEAD :                  17 - | *TRK_BANKINS :                   15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACHHALF :                   E - |
*TRK_CACHINC :                    F - |  TRK_CHNCACH :                   2E - |
 TRK_CHNCBLK :                   28 - |  TRK_CHNCHEAD :                  2A - |
 TRK_CHNCINS :                   2C - |  TRK_CHNLIST :                   26 - |
 TRK_CURRBLK :                   12 - |  TRK_INSTR :                      8 - |
 TRK_MAXBLKS :                   1D - |  TRK_MAXCHNLS :                  1C - |
 TRK_MAXHDRS :                   1E - |  TRK_MAXINS :                    1F - |
*TRK_PANNING :                   13 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMCPATT :                  20 - |  TRK_ROMPATT :                   23 - |
 TRK_ROWPAUSE :                  10 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   11 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    1CF C |
 UPD_TRACK.DECROW :             265 C |  UPD_TRACK.DECROW_E :           268 C |
 UPD_TRACK.EFFECT_FILL :        3DB C |  UPD_TRACK.EFF_A :              303 C |
 UPD_TRACK.EFF_B :              315 C |  UPD_TRACK.EFF_C :              32B C |
 UPD_TRACK.EXIT :               259 C |  UPD_TRACK.FIRST_FILL :         3E2 C |
 UPD_TRACK.GRAB_RHEAD :         47F C |  UPD_TRACK.HAS_NOTE :           270 C |
 UPD_TRACK.INC_CPATT :          32E C |  UPD_TRACK.NEXT_NOTE :          249 C |
 UPD_TRACK.NO_EFF :             2CF C |  UPD_TRACK.NO_GLBL :            40D C |
 UPD_TRACK.NO_INS :             2B1 C |  UPD_TRACK.NO_NOTE :            2A6 C |
 UPD_TRACK.NO_VOL :             2BC C |  UPD_TRACK.OLD_TYPE :           29A C |
 UPD_TRACK.RAN_OUT :            33C C |  UPD_TRACK.READ_TRACK :         1F0 C |
 UPD_TRACK.ROW_ACTIVE :         242 C |  UPD_TRACK.SET_TRACK :          366 C |
 UPD_TRACK.SFXMD :              209 C |  UPD_TRACK.TRACK_END :          3CA C |
 UPD_TRACK.TRK_BUFFRS :         1D4 C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :     FFFFFFFFFFFF02A2 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF02A2 C |
 VIDEO_CLEARSCREEN.PMNEXT :                                FFFFFFFFFFFF0330 C |
 VIDEO_CLEARSCREEN.PNEXT :                                 FFFFFFFFFFFF031A C |
 VIDEO_CLEARSCREEN.SNEXT :                                 FFFFFFFFFFFF0306 C |
 VIDEO_CLEARSCREEN.XNEXT :                                 FFFFFFFFFFFF02E6 C |
 VIDEO_CLEARSCREEN.YNEXT :                                 FFFFFFFFFFFF02F6 C |
*VIDEO_COPY :      FFFFFFFFFFFF086C C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF0880 C |
 VIDEO_COPY.DMAWE :                                        FFFFFFFFFFFF08D8 C |
*VIDEO_DMABLAST :  FFFFFFFFFFFF0992 C |
 VIDEO_DMABLAST.END :                                      FFFFFFFFFFFF09E8 C |
 VIDEO_DMABLAST.EXIT :                                     FFFFFFFFFFFF09FE C |
 VIDEO_DMABLAST.NEXT :                                     FFFFFFFFFFFF09C2 C |
*VIDEO_DMAMKENTRY :                                        FFFFFFFFFFFF0784 C |
 VIDEO_DOPALFADE : FFFFFFFFFFFF063A C |
 VIDEO_DOPALFADE.ACTIVE :                                  FFFFFFFFFFFF0656 C |
 VIDEO_DOPALFADE.FADE_DONE :                               FFFFFFFFFFFF065E C |
 VIDEO_DOPALFADE.FADE_IN :                                 FFFFFFFFFFFF0660 C |
 VIDEO_DOPALFADE.FADE_LIST :                               FFFFFFFFFFFF0658 C |
 VIDEO_DOPALFADE.FADE_OUT :                                FFFFFFFFFFFF0704 C |
 VIDEO_DOPALFADE.NO_BLU :                                  FFFFFFFFFFFF06DC C |
 VIDEO_DOPALFADE.NO_BLU_O :                                FFFFFFFFFFFF0760 C |
 VIDEO_DOPALFADE.NO_FNSH :                                 FFFFFFFFFFFF06F4 C |
 VIDEO_DOPALFADE.NO_FNSH_O :                               FFFFFFFFFFFF0774 C |
 VIDEO_DOPALFADE.NO_GRN :                                  FFFFFFFFFFFF06BC C |
 VIDEO_DOPALFADE.NO_GRN_O :                                FFFFFFFFFFFF0748 C |
 VIDEO_DOPALFADE.NO_MOVE :                                 FFFFFFFFFFFF0702 C |
 VIDEO_DOPALFADE.NO_MOVE_O :                               FFFFFFFFFFFF0782 C |
 VIDEO_DOPALFADE.NO_RED :                                  FFFFFFFFFFFF069C C |
 VIDEO_DOPALFADE.NO_RED_O :                                FFFFFFFFFFFF0730 C |
 VIDEO_DOPALFADE.NXT_PAL :                                 FFFFFFFFFFFF067A C |
 VIDEO_DOPALFADE.NXT_PAL_O :                               FFFFFFFFFFFF0718 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF060C C |
 VIDEO_FADEPAL_MARS :                                      FFFFFFFFFFFF0A04 C |
 VIDEO_FILL :      FFFFFFFFFFFF07F6 C |  VIDEO_FILL.DMAW : FFFFFFFFFFFF080A C |
 VIDEO_FILL.DMAWE :                                        FFFFFFFFFFFF0854 C |
 VIDEO_INIT :      FFFFFFFFFFFF021A C |
 VIDEO_INIT.CLRRAM :                                       FFFFFFFFFFFF0224 C |
*VIDEO_INIT.EXIT : FFFFFFFFFFFF024E C |  VIDEO_INIT.LOOP : FFFFFFFFFFFF0240 C |
 VIDEO_LOADART :   FFFFFFFFFFFF08F0 C |
 VIDEO_LOADART.FROM_RAM :                                  FFFFFFFFFFFF097E C |
*VIDEO_LOADMAP :   FFFFFFFFFFFF033A C |
 VIDEO_LOADMAP.CONT :                                      FFFFFFFFFFFF0360 C |
 VIDEO_LOADMAP.NODBLE :                                    FFFFFFFFFFFF037E C |
 VIDEO_LOADMAP.NONULL :                                    FFFFFFFFFFFF035E C |
 VIDEO_LOADMAP.XLOOP :                                     FFFFFFFFFFFF0350 C |
 VIDEO_LOADMAP.YLOOP :                                     FFFFFFFFFFFF0346 C |
*VIDEO_LOADMAP_VERT :                                      FFFFFFFFFFFF0390 C |
 VIDEO_LOADMAP_VERT.CONT :                                 FFFFFFFFFFFF03C2 C |
 VIDEO_LOADMAP_VERT.NODBLE :                               FFFFFFFFFFFF03E2 C |
 VIDEO_LOADMAP_VERT.NONULL :                               FFFFFFFFFFFF03C0 C |
*VIDEO_LOADMAP_VERT.OUTDBL :                               FFFFFFFFFFFF03EC C |
 VIDEO_LOADMAP_VERT.XLOOP :                                FFFFFFFFFFFF039E C |
 VIDEO_LOADMAP_VERT.YLOOP :                                FFFFFFFFFFFF03AE C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0616 C |
*VIDEO_LOADPAL_MARS :                                      FFFFFFFFFFFF0A0E C |
 VIDEO_MARSPALFADE :                                       FFFFFFFFFFFF0A36 C |
 VIDEO_MARSPALFADE.ACTIVE :                                FFFFFFFFFFFF0A52 C |
 VIDEO_MARSPALFADE.FADE_DONE :                             FFFFFFFFFFFF0A5A C |
 VIDEO_MARSPALFADE.FADE_IN :                               FFFFFFFFFFFF0A5C C |
 VIDEO_MARSPALFADE.FADE_LIST :                             FFFFFFFFFFFF0A54 C |
 VIDEO_MARSPALFADE.FADE_OUT :                              FFFFFFFFFFFF0B06 C |
 VIDEO_MARSPALFADE.NO_BLU :                                FFFFFFFFFFFF0AD6 C |
 VIDEO_MARSPALFADE.NO_BLU_O :                              FFFFFFFFFFFF0B62 C |
 VIDEO_MARSPALFADE.NO_FNSH :                               FFFFFFFFFFFF0AF6 C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                             FFFFFFFFFFFF0B78 C |
 VIDEO_MARSPALFADE.NO_GRN :                                FFFFFFFFFFFF0AB6 C |
 VIDEO_MARSPALFADE.NO_GRN_O :                              FFFFFFFFFFFF0B4A C |
 VIDEO_MARSPALFADE.NO_MOVE :                               FFFFFFFFFFFF0B04 C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                             FFFFFFFFFFFF0B86 C |
 VIDEO_MARSPALFADE.NO_RED :                                FFFFFFFFFFFF0A96 C |
 VIDEO_MARSPALFADE.NO_RED_O :                              FFFFFFFFFFFF0B32 C |
 VIDEO_MARSPALFADE.NXT_PAL :                               FFFFFFFFFFFF0A74 C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                             FFFFFFFFFFFF0B1A C |
 VIDEO_MARS_GFXMODE :                                      FFFFFFFFFFFF0A00 C |
*VIDEO_MARS_WAITFRAME :                                    FFFFFFFFFFFF0A02 C |
 VIDEO_PRINT :     FFFFFFFFFFFF042C C |
 VIDEO_PRINT.DONIBL :                                      FFFFFFFFFFFF0546 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF04B6 C |
 VIDEO_PRINT.ISBYTE :                                      FFFFFFFFFFFF0480 C |
 VIDEO_PRINT.ISLONG :                                      FFFFFFFFFFFF04A4 C |
 VIDEO_PRINT.ISWORD :                                      FFFFFFFFFFFF0492 C |
 VIDEO_PRINT.LNGLOOP :                                     FFFFFFFFFFFF0536 C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0440 C |
 VIDEO_PRINT.LOWR :                                        FFFFFFFFFFFF0556 C |
 VIDEO_PRINT.NEWJUMP :                                     FFFFFFFFFFFF043A C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF0462 C |
 VIDEO_PRINT.NEXTV :                                       FFFFFFFFFFFF04C0 C |
 VIDEO_PRINT.NOTHING :                                     FFFFFFFFFFFF0562 C |
 VIDEO_PRINT.PUTTEXT :                                     FFFFFFFFFFFF0454 C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF0466 C |
 VIDEO_PRINT.VBYTE :                                       FFFFFFFFFFFF04F2 C |
 VIDEO_PRINT.VLONG :                                       FFFFFFFFFFFF053E C |
 VIDEO_PRINT.VWORD :                                       FFFFFFFFFFFF0514 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF03FC C | *VIDEO_PRINTPAL :  FFFFFFFFFFFF041A C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF05FA C |  VIDEO_UPDATE :    FFFFFFFFFFFF024E C |
*VIDEO_UPDATE.EXIT :                                       FFFFFFFFFFFF026C C |
 VIDEO_UPDATE.LOOP :                                       FFFFFFFFFFFF0260 C |
 VIDMARS_PAL :     FFFFFFFFFFFF0A12 C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF0A2A C |
 VIDMD_PAL :       FFFFFFFFFFFF061A C |  VIDMD_PAL.LOOP :  FFFFFFFFFFFF0632 C |
 VID_PICKLAYER :   FFFFFFFFFFFF0564 C |
 VID_PICKLAYER.GOLYR :                                     FFFFFFFFFFFF05AE C |
 VID_PICKLAYER.NOWD :                                      FFFFFFFFFFFF0598 C |
 VID_PICKLAYER.PLAWND :                                    FFFFFFFFFFFF058A C |
 VID_PICKLAYER.THISSZ :                                    FFFFFFFFFFFF05CE C |
 VID_PICKLAYER.THISSZJ :                                   FFFFFFFFFFFF05F6 C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :    FFFFFFFFFFFF108E C | *VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_FLAGS :                  17AE C |
 WAVE_LEN :                    17A6 C |  WAVE_LOOP :                   17A9 C |
 WAVE_PITCH :                  17AC C |  WAVE_START :                  17A3 C |
 WAVFREQ_LIST :                13A5 C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  8819F8 C |  Z80_CODE_END :              8838F8 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      83 C |
 Z80_RESET :                 A11200 - |  Z80_TOP :                   8819F8 C |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      80 - | *ZDRVMARSBLK :                   82 - |
 ZDRVROMBLK :                    81 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - |  _DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   1275 symbols
    363 unused symbols

 AS V1.42 Beta [Bld 118] - source file main.asm - page 3 - 7/24/2023 0:25:37


  defined macros:
  ---------------

ENDSTRUCT                             | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ISO_FILE                              | ISO_SETFS                            
ORG                                   | REPORT                               
ROMPAD                                | STRUCT                               
VDP_SHOWME                            |

     19 macros

 AS V1.42 Beta [Bld 118] - source file main.asm - page 4 - 7/24/2023 0:25:37


  defined functions:
  ------------------

NOTZ80                                | CELL_VRAM                            
LOCATE                                | MAPSIZE                              

 AS V1.42 Beta [Bld 118] - source file main.asm - page 5 - 7/24/2023 0:25:37


  codepages:
  ----------

STANDARD (0 changed characters)


0.08 seconds assembly time

  13665 lines source file
  14215 lines incl. macro expansions
      3 passes
      0 errors
      0 warnings
