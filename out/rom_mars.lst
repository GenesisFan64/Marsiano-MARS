 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 1/27/2022 21:19:14


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT MARSIANO
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; for cells w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$0                 paddingSoFar set 0
(1)   33/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   34/       0 :                     
(1)   35/       0 :                     ; -------------------------------------
(1)   36/       0 :                     ; Reserve memory section
(1)   37/       0 :                     ;
(1)   38/       0 :                     ; NOTE: This doesn't work for Z80
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     
(1)   41/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   42/       0 :                     GLBL_LASTPC	set *
(1)   43/       0 :                     		dephase
(1)   44/       0 :                     GLBL_LASTORG	set *
(1)   45/       0 :                     		phase thisinput
(1)   46/       0 :                     		endm
(1)   47/       0 :                     		
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Finish
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     finish		macro				; Then finish custom struct.
(1)   53/       0 :                     		!org GLBL_LASTORG
(1)   54/       0 :                     		phase GLBL_LASTPC
(1)   55/       0 :                     		endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; -------------------------------------
(1)   58/       0 :                     ; Custom ORG
(1)   59/       0 :                     ;
(1)   60/       0 :                     ; (from s2disasm)
(1)   61/       0 :                     ; -------------------------------------
(1)   62/       0 :                     
(1)   63/       0 :                     org macro address
(1)   64/       0 :                     	if notZ80(MOMCPU)
(1)   65/       0 :                     		if address < *
(1)   66/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   67/       0 :                     		elseif address > *
(1)   68/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   69/       0 :                     			!org address
(1)   70/       0 :                     		endif
(1)   71/       0 :                     	else
(1)   72/       0 :                     		if address < $
(1)   73/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			while address > $
(1)   76/       0 :                     				db 0
(1)   77/       0 :                     			endm
(1)   78/       0 :                     		endif
(1)   79/       0 :                     	endif
(1)   80/       0 :                         endm
(1)   81/       0 :                     
       7/       0 :                     		include	"system/md/const.asm"	; MD variables and shared vars
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/MARS shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; NOTE: Be careful changing the MAX_MDDREQ value, it might fail on specific
(1)    7/       0 :                     ; sizes, If something goes wrong set it to $800
(1)    8/       0 :                     
(1)    9/       0 : =$10                MAX_MDDMATSK	equ 16		; MAX DMA transfer requests for VBlank
(1)   10/       0 : =$800               MAX_MDDREQ	equ $800	; MAX size for DREQ RAM transfer in WORDS (careful for HW)
(1)   11/       0 :                     
(1)   12/       0 :                     ; ====================================================================
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$FFFF9000          MDRAM_START	equ $FFFF9000	; Start of working MD RAM
(1)   18/       0 : =$800               MAX_MDERAM	equ $800	; MAX RAM for current screen mode
(1)   19/       0 : =$7FF               varNullVram	equ $7FF	; Default Blank tile for some video routines
(1)   20/       0 :                     
(1)   21/       0 :                     ; ====================================================================
(1)   22/       0 :                     ; ----------------------------------------------------------------
(1)   23/       0 :                     ; Custom structures
(1)   24/       0 :                     ; ----------------------------------------------------------------
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Controller
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; Controller buffer data (after calling System_Input)
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; Type/Revision byte:
(1)   33/       0 :                     ;
(1)   34/       0 :                     ; ID    |
(1)   35/       0 :                     ; $0D   | $00 - Original 3 button
(1)   36/       0 :                     ;       | $01 - 6 button version: XYZM
(1)   37/       0 :                     
(1)   38/       0 : (MACRO)             		struct 0
(1)   38/       0 : =$0                 GLBL_LASTPC     set *
(1)   38/       0 :                                     dephase
(1)   38/       0 : =$0                 GLBL_LASTORG    set *
(1)   38/       0 :                                     phase 0
(1)   39/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   40/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   41/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   42/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   43/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   44/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   45/       A :                     extr_3		ds.w 1
(1)   46/       C :                     extr_4		ds.w 1
(1)   47/       E :                     extr_5		ds.w 1
(1)   48/      10 :                     sizeof_input	ds.l 0
(1)   49/      10 : (MACRO)             		finish
(1)   49/       0 :                                     !org GLBL_LASTORG
(1)   49/       0 :                                     phase GLBL_LASTPC
(1)   50/       0 :                     
(1)   51/       0 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   52/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   53/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   54/       0 :                     
(1)   55/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   56/       0 : =$1                 JoyUp		equ $0001
(1)   57/       0 : =$2                 JoyDown		equ $0002
(1)   58/       0 : =$4                 JoyLeft		equ $0004
(1)   59/       0 : =$8                 JoyRight	equ $0008
(1)   60/       0 : =$10                JoyB		equ $0010
(1)   61/       0 : =$20                JoyC		equ $0020
(1)   62/       0 : =$40                JoyA		equ $0040
(1)   63/       0 : =$80                JoyStart	equ $0080
(1)   64/       0 : =$100               JoyZ		equ $0100
(1)   65/       0 : =$200               JoyY		equ $0200
(1)   66/       0 : =$400               JoyX		equ $0400
(1)   67/       0 : =$800               JoyMode		equ $0800
(1)   68/       0 : =$0                 bitJoyUp	equ 0		; right byte $00xx
(1)   69/       0 : =$1                 bitJoyDown	equ 1
(1)   70/       0 : =$2                 bitJoyLeft	equ 2
(1)   71/       0 : =$3                 bitJoyRight	equ 3
(1)   72/       0 : =$4                 bitJoyB		equ 4
(1)   73/       0 : =$5                 bitJoyC		equ 5
(1)   74/       0 : =$6                 bitJoyA		equ 6
(1)   75/       0 : =$7                 bitJoyStart	equ 7
(1)   76/       0 : =$0                 bitJoyZ		equ 0		; left byte $xx00 (Read Full WORD and shift 8 bits to the right)
(1)   77/       0 : =$1                 bitJoyY		equ 1
(1)   78/       0 : =$2                 bitJoyX		equ 2
(1)   79/       0 : =$3                 bitJoyMode	equ 3
(1)   80/       0 :                     
(1)   81/       0 :                     ; Mega Mouse
(1)   82/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   83/       0 : =$1                 ClickL		equ $0001
(1)   84/       0 : =$2                 ClickR		equ $0002
(1)   85/       0 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   86/       0 : =$8                 ClickS		equ $0008	; (Untested)
(1)   87/       0 : =$0                 bitClickL	equ 0
(1)   88/       0 : =$1                 bitClickR	equ 1
(1)   89/       0 : =$2                 bitClickM	equ 2
(1)   90/       0 : =$3                 bitClickS	equ 3
(1)   91/       0 :                     
(1)   92/       0 :                     ; ====================================================================
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     ; System RAM
(1)   95/       0 :                     ; ----------------------------------------------------------------
(1)   96/       0 :                     
(1)   97/       0 : (MACRO)             		struct RAM_MdSystem
(1)   97/       0 : =$0                 GLBL_LASTPC     set *
(1)   97/       0 :                                     dephase
(1)   97/       0 : =$0                 GLBL_LASTORG    set *
(1)   97/FFFFFFFFFFFFA622 :                                     phase RAM_MDSYSTEM
(1)   98/FFFFFFFFFFFFA622 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   99/FFFFFFFFFFFFA662 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)  100/FFFFFFFFFFFFA862 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)  101/FFFFFFFFFFFFA866 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)  102/FFFFFFFFFFFFA86A :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)  103/FFFFFFFFFFFFA86E :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  104/FFFFFFFFFFFFA874 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  105/FFFFFFFFFFFFA87A :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)  106/FFFFFFFFFFFFA87C :                     sizeof_mdsys	ds.l 0
(1)  107/FFFFFFFFFFFFA87E : (MACRO)             		finish
(1)  107/FFFFFFFFFFFFA622 :                                     !org GLBL_LASTORG
(1)  107/       0 :                                     phase GLBL_LASTPC
(1)  108/       0 :                     
(1)  109/       0 :                     ; ====================================================================
(1)  110/       0 :                     ; ----------------------------------------------------------------
(1)  111/       0 :                     ; Sound 68k RAM
(1)  112/       0 :                     ; ----------------------------------------------------------------
(1)  113/       0 :                     
(1)  114/       0 : (MACRO)             		struct RAM_MdSound
(1)  114/       0 : =$0                 GLBL_LASTPC     set *
(1)  114/       0 :                                     dephase
(1)  114/       0 : =$0                 GLBL_LASTORG    set *
(1)  114/FFFFFFFFFFFF9800 :                                     phase RAM_MDSOUND
(1)  115/FFFFFFFFFFFF9800 :                     RAM_SndSaveReg	ds.l 8			; Backup registers here instead of stack (TODO)
(1)  116/FFFFFFFFFFFF9820 :                     sizeof_mdsnd	ds.l 0
(1)  117/FFFFFFFFFFFF9820 : (MACRO)             		finish
(1)  117/FFFFFFFFFFFF9800 :                                     !org GLBL_LASTORG
(1)  117/       0 :                                     phase GLBL_LASTPC
(1)  118/       0 :                     		
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; ----------------------------------------------------------------
(1)  121/       0 :                     ; Video RAM
(1)  122/       0 :                     ; ----------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : (MACRO)             		struct RAM_MdVideo
(1)  124/       0 : =$0                 GLBL_LASTPC     set *
(1)  124/       0 :                                     dephase
(1)  124/       0 : =$0                 GLBL_LASTORG    set *
(1)  124/FFFFFFFFFFFF9820 :                                     phase RAM_MDVIDEO
(1)  125/FFFFFFFFFFFF9820 :                     RAM_HorScroll	ds.l 240		; DMA Horizontal scroll data
(1)  126/FFFFFFFFFFFF9BE0 :                     RAM_VerScroll	ds.l 320/16		; DMA Vertical scroll data (TODO: check if this is the correct size)
(1)  127/FFFFFFFFFFFF9C30 :                     RAM_Sprites	ds.w 8*70		; DMA Sprites
(1)  128/FFFFFFFFFFFFA090 :                     RAM_Palette	ds.w 64			; DMA palette
(1)  129/FFFFFFFFFFFFA110 :                     RAM_MdMarsPalFd	ds.w 256		; Target 32X palette for FadeIn/Out
(1)  130/FFFFFFFFFFFFA310 :                     RAM_PaletteFd	ds.w 64			; Target MD palette for FadeIn/Out
(1)  131/FFFFFFFFFFFFA390 :                     RAM_VdpDmaList	ds.w 7*MAX_MDDMATSK	; DMA BLAST Transfer list for VBlank
(1)  132/FFFFFFFFFFFFA470 :                     RAM_VidPrntList	ds.w 3*64		; Video_Print list: Address, Type
(1)  133/FFFFFFFFFFFFA5F0 :                     RAM_VdpDmaIndx	ds.w 1			; Current index in DMA BLAST list
(1)  134/FFFFFFFFFFFFA5F2 :                     RAM_VdpDmaMod	ds.w 1			; Mid-write flag (just to be safe)
(1)  135/FFFFFFFFFFFFA5F4 :                     RAM_VidPrntVram	ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  136/FFFFFFFFFFFFA5F6 :                     RAM_FadeMdReq	ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  137/FFFFFFFFFFFFA5F8 :                     RAM_FadeMdSpd	ds.w 1			; Fading increment count
(1)  138/FFFFFFFFFFFFA5FA :                     RAM_FadeMdDel	ds.w 1			; Fading delay
(1)  139/FFFFFFFFFFFFA5FC :                     RAM_FadeMdTmr	ds.w 1			; Fading delay timer (Write to both FadeMdDel and here)
(1)  140/FFFFFFFFFFFFA5FE :                     RAM_FadeMarsReq	ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  141/FFFFFFFFFFFFA600 :                     RAM_FadeMarsSpd	ds.w 1			; (Hint: Set to 4 to syncronize Genesis FadeIn/Out)
(1)  142/FFFFFFFFFFFFA602 :                     RAM_FadeMarsDel	ds.w 1
(1)  143/FFFFFFFFFFFFA604 :                     RAM_FadeMarsTmr	ds.w 1
(1)  144/FFFFFFFFFFFFA606 :                     RAM_FrameCount	ds.l 1			; Frames counter
(1)  145/FFFFFFFFFFFFA60A :                     RAM_VdpRegs	ds.b 24			; VDP Register cache
(1)  146/FFFFFFFFFFFFA622 :                     sizeof_mdvid	ds.l 0
(1)  147/FFFFFFFFFFFFA624 : (MACRO)             		finish
(1)  147/FFFFFFFFFFFF9820 :                                     !org GLBL_LASTORG
(1)  147/       0 :                                     phase GLBL_LASTPC
(1)  148/       0 :                     
(1)  149/       0 :                     ; ; ====================================================================
(1)  150/       0 :                     ; ; ----------------------------------------------------------------
(1)  151/       0 :                     ; ; 32X control using DREQ
(1)  152/       0 :                     ; ;
(1)  153/       0 :                     ; ; *** CALL System_MdMarsDreq AFTER DOING ANY CHANGE
(1)  154/       0 :                     ; ; IN THIS AREA, OUTSIDE VBLANK ***
(1)  155/       0 :                     ; ;
(1)  156/       0 :                     ; ; Size for this buffer is set externally on
(1)  157/       0 :                     ; ; the MAX_MDDREQ setting.
(1)  158/       0 :                     ; ; ----------------------------------------------------------------
(1)  159/       0 :                     ;
(1)  160/       0 :                     ; 			struct RAM_MdDreq
(1)  161/       0 :                     ; RAM_MdMarsPal		ds.w 256
(1)  162/       0 :                     ; RAM_MdMarsBg		ds.l 8
(1)  163/       0 :                     ; RAM_MdMarsPlgn		ds.l 2*4
(1)  164/       0 :                     ; sizeof_dreqmd		ds.l 0
(1)  165/       0 :                     ; 			finish
(1)  166/       0 :                     ; 	if MOMPASS=7
(1)  167/       0 :                     ; 		message "DREQ RAM: \{(sizeof_dreqmd-RAM_MdDreq)&$FFFFFF} of \{(MAX_MDDREQ)&$FFFFFF}"
(1)  168/       0 :                     ; 	endif
(1)  169/       0 :                     
(1)  170/       0 :                     ; ====================================================================
(1)  171/       0 :                     ; ----------------------------------------------------------------
(1)  172/       0 :                     ; MD RAM
(1)  173/       0 :                     ;
(1)  174/       0 :                     ; NOTE for porting this to Sega CD (With or without 32X):
(1)  175/       0 :                     ; $FFFD00 to $FFFDFF is reserved for the MAIN-CPU's vectors
(1)  176/       0 :                     ; ----------------------------------------------------------------
(1)  177/       0 :                     
(1)  178/       0 : (MACRO)             		struct MDRAM_START
(1)  178/       0 : =$0                 GLBL_LASTPC     set *
(1)  178/       0 :                                     dephase
(1)  178/       0 : =$0                 GLBL_LASTORG    set *
(1)  178/FFFFFFFFFFFF9000 :                                     phase MDRAM_START
(1)  188/FFFFFFFFFFFF9000 :                     RAM_ModeBuff	ds.b MAX_MDERAM			; Second pass: sizes are set
(1)  189/FFFFFFFFFFFF9800 :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  190/FFFFFFFFFFFF9820 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  191/FFFFFFFFFFFFA622 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  192/FFFFFFFFFFFFA87C :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  193/FFFFFFFFFFFFA880 :                     RAM_MdDreq	ds.b MAX_MDDREQ
(1)  194/FFFFFFFFFFFFB080 :                     sizeof_mdram	ds.l 0
(1)  196/FFFFFFFFFFFFB080 :                     
MD RAM: FF9000-FFB080
(1)  198/FFFFFFFFFFFFB080 :                     		message "MD RAM: \{(MDRAM_START)&$FFFFFF}-\{(sizeof_mdram)&$FFFFFF}"
(1)  200/FFFFFFFFFFFFB080 : (MACRO)             		finish
(1)  200/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  200/       0 :                                     phase GLBL_LASTPC
(1)  201/       0 :                     
       8/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
       9/       0 :                     		include	"system/mars/map.asm"	; MARS map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer section
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; Cache-thru OR|value
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers (MD: sysmars_reg)
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$4000000           _framebuffer:	equ	CS2		; Framebuffer, first 240 are the linetable
(1)   19/       0 : =$4020000           _overwrite:	equ	CS2+$20000	; Overwrite, $00-byte writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; OLD, stable:
(1)   22/       0 :                     ; CS0		equ	$00000000	; Boot rom & system registers
(1)   23/       0 :                     ; CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV=1
(1)   24/       0 :                     ; CS2		equ	$04000000	; Framebuffer section
(1)   25/       0 :                     ; CS3		equ	$06000000	; SDRAM
(1)   26/       0 :                     ; TH		equ	$20000000	; Cache-thru OR|value
(1)   27/       0 :                     ; _sysreg		equ	$00004000|TH	; MARS System registers (MD: sysmars_reg)
(1)   28/       0 :                     ; _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 :                     ; _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 :                     ; _framebuffer:	equ	CS2|TH		; Framebuffer, first 240 are the linetable
(1)   31/       0 :                     ; _overwrite:	equ	CS2|TH+$20000	; Overwrite, $00-byte writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; --------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; --------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ; ------------------------------------------------
(1)   40/       0 :                     
(1)   41/       0 :                     ; _sysreg
(1)   42/       0 : =$0                 adapter		equ	$00		; adapter control register
(1)   43/       0 : =$1                 intmask		equ	$01		; interrupts mask
(1)   44/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master)
(1)   45/       0 : =$5                 hcount		equ	$05		; H Counter
(1)   46/       0 : =$7                 dreqctl		equ	$07		; DREQ control (BYTE READ)
(1)   47/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   48/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   49/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   50/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   51/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   52/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   53/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   54/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   55/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   56/       0 : =$20                comm0		equ	$20		; Communication ports
(1)   57/       0 : =$22                comm2		equ	$22		; (If 2 CPUs either SH2 or 68K writes to
(1)   58/       0 : =$24                comm4		equ	$24		; the same location, it will freeze the
(1)   59/       0 : =$26                comm6		equ	$26		; system)
(1)   60/       0 : =$28                comm8		equ	$28		;
(1)   61/       0 : =$2A                comm10		equ	$2A		;
(1)   62/       0 : =$2C                comm12		equ	$2C		;
(1)   63/       0 : =$2E                comm14		equ	$2E		;
(1)   64/       0 : =$2F                comm15		equ	$2F		;
(1)   65/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   66/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   67/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   68/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   69/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   70/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   71/       0 :                     
(1)   72/       0 :                     ; _sysreg
(1)   73/       0 :                     ; adapter
(1)   74/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   75/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   76/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   77/       0 :                     ; framectl
(1)   78/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   79/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   80/       0 :                     ; vdpsts
(1)   81/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   82/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   83/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   84/       0 :                     ; intmask
(1)   85/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   86/       0 : =$4                 HIRQ_ON		equ	$04
(1)   87/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   88/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   89/       0 :                     
(1)   90/       0 :                     ; _vdpreg
(1)   91/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   92/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   93/       0 : =$2                 shift		equ	$02		; Shift Control register
(1)   94/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   95/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   96/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   97/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   98/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   99/       0 :                     
(1)  100/       0 :                     ; --------------------------------------------------------
(1)  101/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)  102/       0 :                     ; --------------------------------------------------------
(1)  103/       0 :                     
(1)  104/       0 :                     ; DMA Channel 0: General data transfer
(1)  105/       0 :                     ; DMA Channel 1: PWM exclusive
(1)  106/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  107/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  108/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  109/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  110/       0 : =$2                 _FRC_H		equ	$02		; free running counter High
(1)  111/       0 : =$3                 _FRC_L		equ	$03		; free running counter Low
(1)  112/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  113/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  114/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  115/       0 : =$7                 _TOCR		equ	$07		; timer output compare control register
(1)  116/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92
(1)  117/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  118/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or LOW Result if read
(1)  119/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result, HIGH
(1)  120/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result, LOW
(1)  121/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  122/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  123/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  124/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  125/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  126/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  127/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  128/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  129/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  130/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  131/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  132/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  133/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  134/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  135/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  136/       0 :                     
      10/       0 :                     		include	"system/mars/dreq.asm"	; MARS DREQ (shared)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; DREQ RAM control
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; To read these labels...
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; On the Genesis Side:
(1)    8/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)    9/       0 :                     ;
(1)   10/       0 :                     ; On the 32X Side:
(1)   11/       0 :                     ;	mov	#DREQ_LABEL,r1
(1)   12/       0 :                     ; 	mov	@(marsGbl_DreqRead,gbr),r0
(1)   13/       0 :                     ; 	add	r0,r1
(1)   14/       0 :                     ; ----------------------------------------------------------------
(1)   15/       0 :                     
(1)   16/       0 : (MACRO)             			struct 0
(1)   16/       0 : =$0                 GLBL_LASTPC     set *
(1)   16/       0 :                                     dephase
(1)   16/       0 : =$0                 GLBL_LASTORG    set *
(1)   16/       0 :                                     phase 0
(1)   17/       0 :                     Dreq_Palette		ds.w 256
(1)   18/     200 :                     Dreq_BgXPos		ds.l 1
(1)   19/     204 :                     Dreq_BgYPos		ds.l 1
(1)   20/     208 :                     Dreq_Polygons		ds.l 2*4
(1)   21/     228 :                     sizeof_dreq		ds.l 0
(1)   22/     228 : (MACRO)             			finish
(1)   22/       0 :                                     !org GLBL_LASTORG
(1)   22/       0 :                                     phase GLBL_LASTPC
(1)   23/       0 :                     
DREQ RAM: 228 of 800
(1)   25/       0 :                     		message "DREQ RAM: \{sizeof_dreq} of \{MAX_MDDREQ}"
(1)   27/       0 :                     
(1)   28/       0 :                     
      11/       0 :                     		include	"system/head.asm"	; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ; 
(1)    5/       0 :                     ; These labels still work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point (always $3F0)
(1)   10/       8 : 0000 0898           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0898           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0898           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0898           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0898           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0898           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0898           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0898           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0898           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0898           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0898           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0898           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0898           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0898           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0898           		dc.l MD_ErrorEx	
(1)   25/      44 : 0000 0898           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0898           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0898           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0898           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0898           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0898           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0898           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0898           		dc.l MD_ErrorEx		
(1)   33/      64 : 0000 0898           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0898           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0898           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF A874           		dc.l RAM_MdMarsHInt		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 0898           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF A86E           		dc.l RAM_MdMarsVInt		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 0898           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0898           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0898           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0898           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0898           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0898           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0898           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0898           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0898           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0898           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0898           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0898           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0898           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0898           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0898           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0898           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0898           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0898           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2022.???"
                    3230 3232 2E3F 3F3F 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto MARSIANO                               "
                    204D 4152 5349 414E 
                    4F20 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO                                "
                    4D41 5253 4941 4E4F 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 000D 1D3C           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ; 
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently
(1)   94/     200 :                     ; active.
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   98/     206 : 4EF9 0088 0898      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)   99/     20C : 4EF9 0088 0898      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  100/     212 : 4EF9 0088 0898      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  101/     218 : 4EF9 0088 0898      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  102/     21E : 4EF9 0088 0898      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  103/     224 : 4EF9 0088 0898      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  104/     22A : 4EF9 0088 0898      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  105/     230 : 4EF9 0088 0898      		jmp	($880000|MD_Trace).l			; Trace
(1)  106/     236 : 4EF9 0088 0898      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  107/     23C : 4EF9 0088 0898      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  108/     242 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  109/     248 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  110/     24E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  111/     254 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  112/     25A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l	
(1)  113/     260 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  114/     266 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  115/     26C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  116/     272 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  117/     278 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  118/     27E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  119/     284 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l
(1)  120/     28A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorEx).l		
(1)  121/     290 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  122/     296 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     29C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2A2 : 4EF9 FFFF A874      		jmp	(RAM_MdMarsHInt).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  125/     2A8 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2AE : 4EF9 FFFF A86E      		jmp	(RAM_MdMarsVInt).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  127/     2B4 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2BA : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2C0 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C6 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2CC : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2D2 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D8 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2DE : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2E4 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2EA : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2F0 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F6 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2FC : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     302 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     308 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     30E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     314 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     31A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     320 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     326 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     32C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     332 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     338 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     33E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     344 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     34A : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     350 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     356 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     35C : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     362 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     368 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     36E : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     374 : 4EF9 0088 0898      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     37A :                     
(1)  161/     37A :                     ; ----------------------------------------------------------------
(1)  162/     37A :                     
(1)  163/     37A :                     		align $3C0
(1)  164/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  165/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  166/     3D4 : 0003 DEE0           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  167/     3D8 : 0000 0000           		dc.l 0					; Zero.
(1)  168/     3DC : 0000 6200           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  169/     3E0 : 0600 109C           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map area)
(1)  170/     3E4 : 0600 13D4           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map area)
(1)  171/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default vector table (vbr)
(1)  172/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default vector table (vbr)
(1)  173/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  174/     800 :                     
(1)  175/     800 :                     ; ====================================================================
(1)  176/     800 :                     ; ----------------------------------------------------------------
(1)  177/     800 :                     ; Entry point, this must be located at $3F0
(1)  178/     800 :                     ; 
(1)  179/     800 :                     ; At this point, the initialization
(1)  180/     800 :                     ; returns the following bits:
(1)  181/     800 :                     ; 
(1)  182/     800 :                     ; d0: %h0000000 rsc000ti
(1)  183/     800 :                     ; 	h - Cold start / Hot Start
(1)  184/     800 :                     ; 	r - SDRAM Self Check pass or error
(1)  185/     800 :                     ; 	s - Security check pass or error
(1)  186/     800 :                     ; 	c - Checksum pass or error
(1)  187/     800 :                     ; 	t - TV mode pass or error
(1)  188/     800 :                     ; 	i - MARS ID pass or error
(1)  189/     800 :                     ; 
(1)  190/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  191/     800 :                     ; 	m - MARS TV mode
(1)  192/     800 :                     ; 	j - Country: Japan / Overseas
(1)  193/     800 :                     ; 	d - MD TV mode
(1)  194/     800 :                     ; 	k - DISK connected: Yes / No
(1)  195/     800 :                     ; 	v - Version
(1)  196/     800 :                     ; 
(1)  197/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  198/     800 :                     ; 	cc: Test passed
(1)  199/     800 :                     ; 	cs: Test failed
(1)  200/     800 :                     ; ----------------------------------------------------------------
(1)  201/     800 :                     
(1)  202/     800 :                     MARS_Entry:
(1)  203/     800 : 657E                		bcs	.no_mars		; if Carry set, 32X is not present
(1)  204/     802 : 23FC 0000 0000 FFFF 		move.l	#0,(RAM_initflug).l	; Reset "INIT" flag
                    A86A                
(1)  205/     80C : 0800 000F           		btst	#15,d0			; Soft reset?
(1)  206/     810 : 6700 0088           		beq	MD_Init
(1)  207/     814 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5	; a5 - MARS register
(1)  208/     81A : 0815 0000           		btst.b	#0,adapter(a5)		; 32X enabled?
(1)  209/     81E : 6652                		bne	.adapterenable		; If yes, start booting
(1)  210/     820 : 2B7C 0000 0000 0028 		move.l	#0,comm8(a5)		; If not, we can't use 32X or something went wrong
(1)  211/     828 : 41FA 0020           		lea	.ramcode(pc),a0			; Copy the adapter-retry code to RAM
(1)  212/     82C : 43F9 00FF 0000      		lea	($FF0000).l,a1			; and jump there.
(1)  213/     832 : 22D8                		move.l	(a0)+,(a1)+
(1)  214/     834 : 22D8                		move.l	(a0)+,(a1)+
(1)  215/     836 : 22D8                		move.l	(a0)+,(a1)+
(1)  216/     838 : 22D8                		move.l	(a0)+,(a1)+
(1)  217/     83A : 22D8                		move.l	(a0)+,(a1)+
(1)  218/     83C : 22D8                		move.l	(a0)+,(a1)+
(1)  219/     83E : 22D8                		move.l	(a0)+,(a1)+
(1)  220/     840 : 22D8                		move.l	(a0)+,(a1)+
(1)  221/     842 : 41F9 00FF 0000      		lea	($FF0000).l,a0
(1)  222/     848 : 4ED0                		jmp	(a0)
(1)  223/     84A :                     .ramcode:
(1)  224/     84A : 1ABC 0001           		move.b	#1,adapter(a5)		; Enable adapter.
(1)  225/     84E : 41FA 000A           		lea	.restarticd(pc),a0	; JUMP to the following code in
(1)  226/     852 : D1FC 0088 0000      		adda.l	#$880000,a0		; the new 68k location
(1)  227/     858 : 4ED0                		jmp	(a0)
(1)  228/     85A :                     .restarticd:
(1)  229/     85A : 4BF9 00A1 0000      		lea	($A10000).l,a5		; a5 - MD's I/O area
(1)  230/     860 : 287C FFFF FFC0      		move.l	#-64,a4			; a4 - $FFFFFF9C
(1)  231/     866 : 3E3C 0F3C           		move.w	#3900,d7		; d7 - loop this many times
(1)  232/     86A : 43F9 0088 06E4      		lea	($880000+$6E4),a1	; Jump to ?res_wait (check ICD_MARS.PRG)
(1)  233/     870 : 4ED1                		jmp	(a1)
(1)  234/     872 :                     .adapterenable:
(1)  235/     872 : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  236/     878 : 0815 0001           		btst.b	#1,adapter(a5)		; SH2 Reset request?
(1)  237/     87C : 665A                		bne.s	MD_HotStart		; If not, we are on hotstart
(1)  238/     87E : 60DA                		bra.s	.restarticd
(1)  239/     880 :                     
(1)  240/     880 :                     ; ====================================================================
(1)  241/     880 :                     ; ----------------------------------------------------------------
(1)  242/     880 :                     ; If 32X is not detected...
(1)  243/     880 :                     ;
(1)  244/     880 :                     ; This only works in emulators, though.
(1)  245/     880 :                     ; ----------------------------------------------------------------
(1)  246/     880 :                     
(1)  247/     880 :                     .no_mars:
(1)  248/     880 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  249/     884 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  250/     88E : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l		; Write blue
(1)  251/     896 : 60FE                		bra.s	*				; Infinite loop.
(1)  252/     898 :                     
(1)  253/     898 :                     ; ====================================================================
(1)  254/     898 :                     ; ----------------------------------------------------------------
(1)  255/     898 :                     ; Error traps
(1)  256/     898 :                     ; ----------------------------------------------------------------
(1)  257/     898 :                     
(1)  258/     898 :                     MD_ErrBus:		; Bus error
(1)  259/     898 :                     MD_ErrAddr:		; Address error
(1)  260/     898 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  261/     898 :                     MD_ErrZDiv:		; Divide by 0
(1)  262/     898 :                     MD_ErrChk:		; CHK Instruction
(1)  263/     898 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  264/     898 :                     MD_ErrPrivl:		; Privilege violation
(1)  265/     898 :                     MD_Trace:		; Trace
(1)  266/     898 :                     MD_Line1010:		; Line 1010 Emulator
(1)  267/     898 :                     MD_Line1111:		; Line 1111 Emulator
(1)  268/     898 :                     MD_ErrorEx:		; Error exception
(1)  269/     898 :                     MD_ErrorTrap:
(1)  270/     898 : 4E73                		rte
(1)  271/     89A :                     
(1)  272/     89A :                     ; ------------------------------------------------
(1)  273/     89A :                     ; Init
(1)  274/     89A :                     ; ------------------------------------------------
(1)  275/     89A :                     
(1)  276/     89A :                     MD_Init:
(1)  277/     89A : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  278/     89E : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  279/     8A4 : 2B7C 3638 5550 002C 		move.l	#"68UP",comm12(a5)		; comm12: Report to SH2 that we are active.
(1)  280/     8AC : 0CAD 4D5F 4F4B 0020 .wm:		cmp.l	#"M_OK",comm0(a5)		; SH2 Master active?
(1)  281/     8B4 : 66F6                		bne.s	.wm
(1)  282/     8B6 : 0CAD 535F 4F4B 0024 .ws:		cmp.l	#"S_OK",comm4(a5)		; SH2 Slave active?
(1)  283/     8BE : 66F6                		bne.s	.ws
(1)  284/     8C0 : 7000                		moveq	#0,d0				; Reset comm values
(1)  285/     8C2 : 2B40 0020           		move.l	d0,comm0(a5)
(1)  286/     8C6 : 2B40 0024           		move.l	d0,comm4(a5)
(1)  287/     8CA : 2B40 002C           		move.l	d0,comm12(a5)
(1)  288/     8CE : 23FC 494E 4954 FFFF 		move.l	#"INIT",(RAM_initflug).l	; Set "INIT" as our boot flag
                    A86A                
(1)  289/     8D8 :                     MD_HotStart:
(1)  290/     8D8 : 0CB9 494E 4954 FFFF 		cmp.l	#"INIT",(RAM_initflug).l	; Did it write?
                    A86A                
(1)  291/     8E2 : 66B6                		bne.s	MD_Init				; If not, restart everything and try again.
(1)  292/     8E4 : 7000                		moveq	#0,d0				; Clear USP
(1)  293/     8E6 : 2C40                		movea.l	d0,a6
(1)  294/     8E8 : 4E66                		move.l	a6,usp
(1)  295/     8EA : 3039 00C0 0004      .waitframe:	move.w	(vdp_ctrl).l,d0			; Wait a frame
(1)  296/     8F0 : 0800 0007           		btst	#7,d0
(1)  297/     8F4 : 67F4                		beq.s	.waitframe
(1)  298/     8F6 : 23FC 8004 8144 00C0 		move.l	#$80048144,(vdp_ctrl).l		; Keep display
                    0004                
(1)  299/     900 : 41F9 00FF 0000      		lea	($FF0000),a0			; Clear RAM until $FFF000
(1)  300/     906 : 303C 3BFF           		move.w	#($F000/4)-1,d0
(1)  301/     90A :                     .clrram:
(1)  302/     90A : 4298                		clr.l	(a0)+
(1)  303/     90C : 51C8 FFFC           		dbf	d0,.clrram
(1)  304/     910 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Clear registers (using zeros from RAM)
(1)  305/     918 :                     
      12/     918 :                     		include "code/global.asm"	; Global user variables for the Genesis
(1)    1/     918 :                     ; ====================================================================
(1)    2/     918 :                     ; ----------------------------------------------------------------
(1)    3/     918 :                     ; Global RAM variables on the Genesis side
(1)    4/     918 :                     ; (Score, Level, etc.)
(1)    5/     918 :                     ; ----------------------------------------------------------------
(1)    6/     918 :                     
(1)    7/     918 : (MACRO)             		struct RAM_MdGlobal
(1)    7/     918 : =$918               GLBL_LASTPC     set *
(1)    7/     918 :                                     dephase
(1)    7/     918 : =$918               GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFA87C :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFA87C :                     RAM_MdGlbl_Null	ds.l 1
(1)    9/FFFFFFFFFFFFA880 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFA880 : (MACRO)             		finish
(1)   10/FFFFFFFFFFFFA87C :                                     !org GLBL_LASTORG
(1)   10/     918 :                                     phase GLBL_LASTPC
(1)   11/     918 :                     
(1)   12/     918 :                     
      13/     918 :                     
      14/     918 :                     ; ====================================================================
      15/     918 :                     ; ----------------------------------------------------------------
      16/     918 :                     ; Main 68k code
      17/     918 :                     ; ----------------------------------------------------------------
      18/     918 :                     
      19/     918 : 41FA 001E           		lea	MdRamCode(pc),a0		; Load shared code on top
      20/     91C : 43F9 00FF 0000      		lea	($FF0000),a1
      21/     922 : 303C 2091           		move.w	#((MdRamCode_end-MdRamCode))-1,d0
      22/     926 :                     .copyme:
      23/     926 : 12D8                		move.b	(a0)+,(a1)+
      24/     928 : 51C8 FFFC           		dbf	d0,.copyme
      25/     92C : 203C 0002 F7BC      		move.l	#RamCode_Default,d0
      26/     932 : 4EF9 00FF 1FD4      		jmp	(System_JumpRamCode).l
      27/     938 :                     
      28/     938 :                     ; --------------------------------------------------------
      29/     938 :                     ; Top-common code stored on RAM
      30/     938 :                     ; --------------------------------------------------------
      31/     938 :                     
      32/     938 :                     MdRamCode:
      33/  FF0000 :                     		phase $FF0000
      34/  FF0000 :                     minfo_ram_s:
      35/  FF0000 :                     		include	"system/md/sound.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; ----------------------------------------------------------------
(1)    3/  FF0000 :                     ; GEMA Sound driver
(1)    4/  FF0000 :                     ; ----------------------------------------------------------------
(1)    5/  FF0000 :                     
(1)    6/  FF0000 :                     ; --------------------------------------------------------
(1)    7/  FF0000 :                     ; Initialize Sound
(1)    8/  FF0000 :                     ;
(1)    9/  FF0000 :                     ; Uses:
(1)   10/  FF0000 :                     ; a0-a1,d0-d1
(1)   11/  FF0000 :                     ; --------------------------------------------------------
(1)   12/  FF0000 :                     
(1)   13/  FF0000 :                     	; This align is for GEMS emulator only
(1)   14/  FF0000 :                     	; in case it gets stuck in a black screen
(1)   15/  FF0000 :                     		align $80
(1)   16/  FF0048 :                     
(1)   17/  FF0048 :                     Sound_Init:
(1)   18/  FF0048 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 stop
(1)   19/  FF0050 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; And reset
(1)   20/  FF0058 :                     .wait:
(1)   21/  FF0058 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   22/  FF0060 : 66F6                		bne.s	.wait
(1)   23/  FF0062 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 area first
(1)   24/  FF0068 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   25/  FF006C : 7200                		moveq	#0,d1
(1)   26/  FF006E :                     .cleanup:
(1)   27/  FF006E : 10C1                		move.b	d1,(a0)+
(1)   28/  FF0070 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   29/  FF0074 : 41F9 0088 29CC      		lea	(Z80_CODE|$880000).l,a0		; a0 - Z80 code (on $880000 area)
(1)   30/  FF007A : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 area
(1)   31/  FF0080 : 303C 1FAF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   32/  FF0084 :                     .copy:
(1)   33/  FF0084 : 12D8                		move.b	(a0)+,(a1)+
(1)   34/  FF0086 : 51C8 FFFC           		dbf	d0,.copy
(1)   35/  FF008A : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset again
(1)   36/  FF0092 : 4E71                		nop
(1)   37/  FF0094 : 4E71                		nop
(1)   38/  FF0096 : 4E71                		nop
(1)   39/  FF0098 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   40/  FF00A0 : 4E75                		rts
(1)   41/  FF00A2 :                     
(1)   42/  FF00A2 :                     ; ====================================================================
(1)   43/  FF00A2 :                     ; ----------------------------------------------------------------
(1)   44/  FF00A2 :                     ; Subroutines
(1)   45/  FF00A2 :                     ; ----------------------------------------------------------------
(1)   46/  FF00A2 :                     
(1)   47/  FF00A2 :                     ; ------------------------------------------------
(1)   48/  FF00A2 :                     ; Lock Z80, get bus
(1)   49/  FF00A2 :                     ; ------------------------------------------------
(1)   50/  FF00A2 :                     
(1)   51/  FF00A2 :                     sndLockZ80:
(1)   52/  FF00A2 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)   53/  FF00AA :                     .wait:
(1)   54/  FF00AA : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   55/  FF00B2 : 66F6                		bne.s	.wait
(1)   56/  FF00B4 : 4E75                		rts
(1)   57/  FF00B6 :                     
(1)   58/  FF00B6 :                     ; ------------------------------------------------
(1)   59/  FF00B6 :                     ; Unlock Z80, return bus
(1)   60/  FF00B6 :                     ; ------------------------------------------------
(1)   61/  FF00B6 :                     
(1)   62/  FF00B6 :                     sndUnlockZ80:
(1)   63/  FF00B6 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   64/  FF00BE : 4E75                		rts
(1)   65/  FF00C0 :                     
(1)   66/  FF00C0 :                     ; ------------------------------------------------
(1)   67/  FF00C0 :                     ; 68k-to-z80 Sound request
(1)   68/  FF00C0 :                     ; enter/exit routines
(1)   69/  FF00C0 :                     ;
(1)   70/  FF00C0 :                     ; d6 - commFifo index
(1)   71/  FF00C0 :                     ; ------------------------------------------------
(1)   72/  FF00C0 :                     
(1)   73/  FF00C0 :                     sndReq_Enter:
(1)   74/  FF00C0 : 48F9 60C0 FFFF 9800 		movem.l	d6-d7/a5-a6,(RAM_SndSaveReg).l
(1)   75/  FF00C8 : 7C00                		moveq	#0,d6
(1)   76/  FF00CA : 40C6                		move.w	sr,d6
(1)   77/  FF00CC : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)   78/  FF00D4 : 4846                		swap	d6
(1)   79/  FF00D6 : 007C 0700           		or.w	#$0700,sr			; disable ints
(1)   80/  FF00DA : 4BF9 00A0 001F      		lea	(z80_cpu+commZWrite),a5		; a5 - commZWrite
(1)   81/  FF00E0 : 4DF9 00A0 1EB0      		lea	(z80_cpu+commZfifo),a6		; a6 - fifo command list
(1)   82/  FF00E6 :                     .wait:
(1)   83/  FF00E6 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)   84/  FF00EE : 66F6                		bne.s	.wait
(1)   85/  FF00F0 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)   86/  FF00F2 : 4886                		ext.w	d6				; extend to 16 bits
(1)   87/  FF00F4 : 4E75                		rts
(1)   88/  FF00F6 :                     ; JUMP ONLY
(1)   89/  FF00F6 :                     sndReq_Exit:
(1)   90/  FF00F6 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   91/  FF00FE : 4846                		swap	d6
(1)   92/  FF0100 : 46C6                		move.w	d6,sr
(1)   93/  FF0102 : 4CF9 60C0 FFFF 9800 		movem.l	(RAM_SndSaveReg).l,d6-d7/a5-a6
(1)   94/  FF010A : 4E75                		rts
(1)   95/  FF010C :                     
(1)   96/  FF010C :                     ; ------------------------------------------------
(1)   97/  FF010C :                     ; Send request id and arguments
(1)   98/  FF010C :                     ;
(1)   99/  FF010C :                     ; Input:
(1)  100/  FF010C :                     ; d7 - byte to write
(1)  101/  FF010C :                     ; d6 - index pointer
(1)  102/  FF010C :                     ; a5 - commZWrite, update index
(1)  103/  FF010C :                     ; a6 - commZfifo command list
(1)  104/  FF010C :                     ;
(1)  105/  FF010C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  106/  FF010C :                     ; ------------------------------------------------
(1)  107/  FF010C :                     
(1)  108/  FF010C :                     sndReq_scmd:
(1)  109/  FF010C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  110/  FF0112 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  111/  FF0114 : 0206 003F           		andi.b	#$3F,d6
(1)  112/  FF0118 : 600C                		bra.s	sndReq_sbyte
(1)  113/  FF011A :                     sndReq_slong:
(1)  114/  FF011A : 610A                		bsr	sndReq_sbyte
(1)  115/  FF011C : E09F                		ror.l	#8,d7
(1)  116/  FF011E :                     sndReq_saddr:
(1)  117/  FF011E : 6106                		bsr	sndReq_sbyte
(1)  118/  FF0120 : E09F                		ror.l	#8,d7
(1)  119/  FF0122 :                     sndReq_sword:
(1)  120/  FF0122 : 6102                		bsr	sndReq_sbyte
(1)  121/  FF0124 : E09F                		ror.l	#8,d7
(1)  122/  FF0126 :                     sndReq_sbyte:
(1)  123/  FF0126 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  124/  FF012A : 5206                		addq.b	#1,d6				; next fifo pos
(1)  125/  FF012C : 0206 003F           		andi.b	#$3F,d6
(1)  126/  FF0130 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  127/  FF0132 : 4E75                		rts
(1)  128/  FF0134 :                     
(1)  129/  FF0134 :                     ; --------------------------------------------------------
(1)  130/  FF0134 :                     ; Sound_DMA_Pause
(1)  131/  FF0134 :                     ;
(1)  132/  FF0134 :                     ; Call this BEFORE doing any DMA task
(1)  133/  FF0134 :                     ;
(1)  134/  FF0134 :                     ; Uses:
(1)  135/  FF0134 :                     ; d7
(1)  136/  FF0134 :                     ; --------------------------------------------------------
(1)  137/  FF0134 :                     
(1)  138/  FF0134 :                     Sound_DMA_Pause:
(1)  139/  FF0134 : 4847                		swap	d7
(1)  140/  FF0136 :                     .retry:
(1)  141/  FF0136 : 6100 FF6A           		bsr	sndLockZ80
(1)  142/  FF013A : 1E39 00A0 001D      		move.b	(z80_cpu+commZRomRd),d7		; Get mid-read bit
(1)  143/  FF0140 : 6100 FF74           		bsr	sndUnlockZ80
(1)  144/  FF0144 : 4A07                		tst.b	d7
(1)  145/  FF0146 : 6708                		beq.s	.safe
(1)  146/  FF0148 : 7E44                		moveq	#68,d7
(1)  147/  FF014A : 51CF FFFE           		dbf	d7,*
(1)  148/  FF014E : 60E6                		bra.s	.retry
(1)  149/  FF0150 :                     	; TODO: ver si necesito un timeout...
(1)  150/  FF0150 :                     		;rts
(1)  151/  FF0150 :                     .safe:
(1)  152/  FF0150 : 6100 FF50           		bsr	sndLockZ80
(1)  153/  FF0154 : 13FC 0001 00A0 001C 		move.b	#1,(z80_cpu+commZRomBlk)	; Block flag for Z80
(1)  154/  FF015C : 6100 FF58           		bsr	sndUnlockZ80
(1)  155/  FF0160 :                     
(1)  156/  FF0160 :                     	; Make a data-backup of the current PWM's
(1)  157/  FF0160 : 1E39 00A1 512F      .wait_mars1:	move.b	(sysmars_reg+comm15),d7		; Wait for
(1)  158/  FF0166 : CE7C 00D0           		and.w	#%11010000,d7			; BUSY/CLOCK/0/RESTORE
(1)  159/  FF016A : 66F4                		bne.s	.wait_mars1
(1)  160/  FF016C : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7		; Request PWM Backup
(1)  161/  FF0172 : 08C7 0005           		bset	#5,d7
(1)  162/  FF0176 : 13C7 00A1 512F      		move.b	d7,(sysmars_reg+comm15)
(1)  163/  FF017C : 1E39 00A1 512F      .wait_mars2:	move.b	(sysmars_reg+comm15),d7		; Wait for
(1)  164/  FF0182 : CE7C 00E0           		and.w	#%11100000,d7			; BUSY/CLOCK/BACKUP
(1)  165/  FF0186 : 66F4                		bne.s	.wait_mars2
(1)  166/  FF0188 : 4847                		swap	d7
(1)  167/  FF018A : 4E75                		rts
(1)  168/  FF018C :                     
(1)  169/  FF018C :                     ; --------------------------------------------------------
(1)  170/  FF018C :                     ; Sound_DMA_Resume
(1)  171/  FF018C :                     ;
(1)  172/  FF018C :                     ; Call this AFTER finishing DMA
(1)  173/  FF018C :                     ; --------------------------------------------------------
(1)  174/  FF018C :                     
(1)  175/  FF018C :                     Sound_DMA_Resume:
(1)  176/  FF018C : 4847                		swap	d7
(1)  177/  FF018E : 6100 FF12           		bsr	sndLockZ80
(1)  178/  FF0192 : 13FC 0000 00A0 001C 		move.b	#0,(z80_cpu+commZRomBlk)
(1)  179/  FF019A : 6100 FF1A           		bsr	sndUnlockZ80
(1)  180/  FF019E :                     
(1)  181/  FF019E : 1E39 00A1 512F      .wait_mars1:	move.b	(sysmars_reg+comm15),d7		; Wait for
(1)  182/  FF01A4 : CE7C 00E0           		and.w	#%11100000,d7			; BUSY/CLOCK/BACKUP
(1)  183/  FF01A8 : 66F4                		bne.s	.wait_mars1
(1)  184/  FF01AA : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7		; Request PWM Restore
(1)  185/  FF01B0 : 08C7 0004           		bset	#4,d7
(1)  186/  FF01B4 : 13C7 00A1 512F      		move.b	d7,(sysmars_reg+comm15)
(1)  187/  FF01BA : 1E39 00A1 512F      .wait_mars2:	move.b	(sysmars_reg+comm15),d7		; Wait for
(1)  188/  FF01C0 : CE7C 00D0           		and.w	#%11010000,d7			; BUSY/CLOCK/0/RESTORE
(1)  189/  FF01C4 : 66F4                		bne.s	.wait_mars2
(1)  190/  FF01C6 : 4847                		swap	d7
(1)  191/  FF01C8 : 4E75                		rts
(1)  192/  FF01CA :                     
(1)  193/  FF01CA :                     ; --------------------------------------------------------
(1)  194/  FF01CA :                     ; SoundReq_SetTrack
(1)  195/  FF01CA :                     ;
(1)  196/  FF01CA :                     ; a0 - Pointer to Pattern, Blocks and Instruments list
(1)  197/  FF01CA :                     ;      in this order:
(1)  198/  FF01CA :                     ;  	dc.l pattern_data
(1)  199/  FF01CA :                     ;  	dc.l block_data
(1)  200/  FF01CA :                     ;  	dc.l instrument_data
(1)  201/  FF01CA :                     ;
(1)  202/  FF01CA :                     ; d0 - Slot
(1)  203/  FF01CA :                     ; d1 - Ticks
(1)  204/  FF01CA :                     ; d2 - From block
(1)  205/  FF01CA :                     ; d3 - Flags: %00004321
(1)  206/  FF01CA :                     ; 	1234 - Use global tempos 1,2,3 or 4
(1)  207/  FF01CA :                     ;
(1)  208/  FF01CA :                     ; Uses:
(1)  209/  FF01CA :                     ; d6-d7,a5-a6
(1)  210/  FF01CA :                     ; --------------------------------------------------------
(1)  211/  FF01CA :                     
(1)  212/  FF01CA :                     Sound_TrkPlay:
(1)  213/  FF01CA : 6100 FEF4           		bsr	sndReq_Enter
(1)  214/  FF01CE : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  215/  FF01D2 : 6100 FF38           		bsr	sndReq_scmd
(1)  216/  FF01D6 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  217/  FF01D8 : 6100 FF4C           		bsr	sndReq_sbyte
(1)  218/  FF01DC : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  219/  FF01DE : 6100 FF46           		bsr	sndReq_sbyte
(1)  220/  FF01E2 : 1E02                		move.b	d2,d7		; d2 - Start block
(1)  221/  FF01E4 : 6100 FF40           		bsr	sndReq_sbyte
(1)  222/  FF01E8 : 1E03                		move.b	d3,d7		; d3 - Flags
(1)  223/  FF01EA : 6100 FF3A           		bsr	sndReq_sbyte
(1)  224/  FF01EE : 2E18                		move.l	(a0)+,d7	; Patt data point
(1)  225/  FF01F0 : 6100 FF2C           		bsr	sndReq_saddr
(1)  226/  FF01F4 : 2E18                		move.l	(a0)+,d7	; Block data point
(1)  227/  FF01F6 : 6100 FF26           		bsr	sndReq_saddr
(1)  228/  FF01FA : 2E18                		move.l	(a0)+,d7	; Intrument data
(1)  229/  FF01FC : 6100 FF20           		bsr	sndReq_saddr
(1)  230/  FF0200 : 6000 FEF4           		bra 	sndReq_Exit
(1)  231/  FF0204 :                     
(1)  232/  FF0204 :                     ; --------------------------------------------------------
(1)  233/  FF0204 :                     ; SoundReq_StopTrack
(1)  234/  FF0204 :                     ;
(1)  235/  FF0204 :                     ; d0 - Slot
(1)  236/  FF0204 :                     ; --------------------------------------------------------
(1)  237/  FF0204 :                     
(1)  238/  FF0204 :                     Sound_TrkStop:
(1)  239/  FF0204 : 6100 FEBA           		bsr	sndReq_Enter
(1)  240/  FF0208 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  241/  FF020C : 6100 FEFE           		bsr	sndReq_scmd
(1)  242/  FF0210 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  243/  FF0212 : 6100 FF12           		bsr	sndReq_sbyte
(1)  244/  FF0216 : 6000 FEDE           		bra 	sndReq_Exit
(1)  245/  FF021A :                     
(1)  246/  FF021A :                     ; --------------------------------------------------------
(1)  247/  FF021A :                     ; Sound_TrkPause
(1)  248/  FF021A :                     ;
(1)  249/  FF021A :                     ; d0 - Slot
(1)  250/  FF021A :                     ; --------------------------------------------------------
(1)  251/  FF021A :                     
(1)  252/  FF021A :                     Sound_TrkPause:
(1)  253/  FF021A : 6100 FEA4           		bsr	sndReq_Enter
(1)  254/  FF021E : 3E3C 0002           		move.w	#$02,d7		; Command $01
(1)  255/  FF0222 : 6100 FEE8           		bsr	sndReq_scmd
(1)  256/  FF0226 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  257/  FF0228 : 6100 FEFC           		bsr	sndReq_sbyte
(1)  258/  FF022C : 6000 FEC8           		bra 	sndReq_Exit
(1)  259/  FF0230 :                     
(1)  260/  FF0230 :                     ; --------------------------------------------------------
(1)  261/  FF0230 :                     ; Sound_TrkResume
(1)  262/  FF0230 :                     ;
(1)  263/  FF0230 :                     ; d0 - Slot
(1)  264/  FF0230 :                     ; --------------------------------------------------------
(1)  265/  FF0230 :                     
(1)  266/  FF0230 :                     Sound_TrkResume:
(1)  267/  FF0230 : 6100 FE8E           		bsr	sndReq_Enter
(1)  268/  FF0234 : 3E3C 0003           		move.w	#$03,d7		; Command $01
(1)  269/  FF0238 : 6100 FED2           		bsr	sndReq_scmd
(1)  270/  FF023C : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  271/  FF023E : 6100 FEE6           		bsr	sndReq_sbyte
(1)  272/  FF0242 : 6000 FEB2           		bra 	sndReq_Exit
(1)  273/  FF0246 :                     
(1)  274/  FF0246 :                     ; --------------------------------------------------------
(1)  275/  FF0246 :                     ; Sound_TrkTicks
(1)  276/  FF0246 :                     ;
(1)  277/  FF0246 :                     ; d0 - Slot
(1)  278/  FF0246 :                     ; d1 - Ticks
(1)  279/  FF0246 :                     ; --------------------------------------------------------
(1)  280/  FF0246 :                     
(1)  281/  FF0246 :                     Sound_TrkTicks:
(1)  282/  FF0246 : 6100 FE78           		bsr	sndReq_Enter
(1)  283/  FF024A : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  284/  FF024E : 6100 FEBC           		bsr	sndReq_scmd
(1)  285/  FF0252 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  286/  FF0254 : 6100 FED0           		bsr	sndReq_sbyte
(1)  287/  FF0258 : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  288/  FF025A : 6100 FECA           		bsr	sndReq_sbyte
(1)  289/  FF025E : 6000 FE96           		bra 	sndReq_Exit
(1)  290/  FF0262 :                     
(1)  291/  FF0262 :                     ; --------------------------------------------------------
(1)  292/  FF0262 :                     ; Sound_GlbTempo
(1)  293/  FF0262 :                     ;
(1)  294/  FF0262 :                     ; d0 - Slot
(1)  295/  FF0262 :                     ; d1 - Tempo (WORD)
(1)  296/  FF0262 :                     ; --------------------------------------------------------
(1)  297/  FF0262 :                     
(1)  298/  FF0262 :                     Sound_GlbTempo:
(1)  299/  FF0262 : 6100 FE5C           		bsr	sndReq_Enter
(1)  300/  FF0266 : 3E3C 0010           		move.w	#$10,d7		; Command $10
(1)  301/  FF026A : 6100 FEA0           		bsr	sndReq_scmd
(1)  302/  FF026E : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  303/  FF0270 : 6100 FEB4           		bsr	sndReq_sbyte
(1)  304/  FF0274 : 3E01                		move.w	d1,d7		; d1 - Tempo MSB
(1)  305/  FF0276 : 6100 FEAA           		bsr	sndReq_sword
(1)  306/  FF027A : 6000 FE7A           		bra 	sndReq_Exit
(1)  307/  FF027E :                     
      36/  FF027E :                     		include	"system/md/video.asm"
(1)    1/  FF027E :                     ; ====================================================================
(1)    2/  FF027E :                     ; ----------------------------------------------------------------
(1)    3/  FF027E :                     ; MD Video
(1)    4/  FF027E :                     ; ----------------------------------------------------------------
(1)    5/  FF027E :                     
(1)    6/  FF027E :                     ; ------------------------------------------------
(1)    7/  FF027E :                     ; vdp_ctrl READ bits
(1)    8/  FF027E :                     ; ------------------------------------------------
(1)    9/  FF027E :                     
(1)   10/  FF027E : =$2                 bitHint		equ 2
(1)   11/  FF027E : =$3                 bitVint		equ 3
(1)   12/  FF027E : =$1                 bitDma		equ 1
(1)   13/  FF027E :                     
(1)   14/  FF027E :                     ; ------------------------------------------------
(1)   15/  FF027E :                     ; VDP register variables
(1)   16/  FF027E :                     ; ------------------------------------------------
(1)   17/  FF027E :                     
(1)   18/  FF027E :                     ; Register $80
(1)   19/  FF027E : =$2                 HVStop		equ $02
(1)   20/  FF027E : =$10                HintEnbl	equ $10
(1)   21/  FF027E : =$1                 bitHVStop	equ 1
(1)   22/  FF027E : =$4                 bitHintEnbl	equ 4
(1)   23/  FF027E :                     
(1)   24/  FF027E :                     ; Register $81
(1)   25/  FF027E : =$40                DispEnbl 	equ $40
(1)   26/  FF027E : =$20                VintEnbl 	equ $20
(1)   27/  FF027E : =$10                DmaEnbl		equ $10
(1)   28/  FF027E : =$6                 bitDispEnbl	equ 6
(1)   29/  FF027E : =$5                 bitVintEnbl	equ 5
(1)   30/  FF027E : =$4                 bitDmaEnbl	equ 4
(1)   31/  FF027E : =$3                 bitV30		equ 3
(1)   32/  FF027E :                     
(1)   33/  FF027E :                     ; --------------------------------------------------------
(1)   34/  FF027E :                     ; Init Video
(1)   35/  FF027E :                     ; 
(1)   36/  FF027E :                     ; Uses:
(1)   37/  FF027E :                     ; a0-a2,d0-d1
(1)   38/  FF027E :                     ; --------------------------------------------------------
(1)   39/  FF027E :                     
(1)   40/  FF027E :                     Video_Init:		
(1)   41/  FF027E : 4DF8 9820           		lea	(RAM_MdVideo),a6	; Clear RAM
(1)   42/  FF0282 : 7C00                		moveq	#0,d6
(1)   43/  FF0284 : 3E3C 0E01           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)   44/  FF0288 :                     .clrram:
(1)   45/  FF0288 : 1CC6                		move.b	d6,(a6)+
(1)   46/  FF028A : 51CF FFFC           		dbf	d7,.clrram
(1)   47/  FF028E : 4DFA 0878           		lea	list_vdpregs(pc),a6	; Init registers
(1)   48/  FF0292 : 4BF8 A60A           		lea	(RAM_VdpRegs).w,a5
(1)   49/  FF0296 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)   50/  FF029C : 3C3C 8000           		move.w	#$8000,d6
(1)   51/  FF02A0 : 3E3C 0012           		move.w	#19-1,d7
(1)   52/  FF02A4 :                     .loop:
(1)   53/  FF02A4 : 1C1E                		move.b	(a6)+,d6
(1)   54/  FF02A6 : 1AC6                		move.b	d6,(a5)+
(1)   55/  FF02A8 : 3886                		move.w	d6,(a4)
(1)   56/  FF02AA : DC7C 0100           		add.w	#$100,d6
(1)   57/  FF02AE : 51CF FFF4           		dbf	d7,.loop
(1)   58/  FF02B2 :                     .exit:
(1)   59/  FF02B2 : 4E75                		rts
(1)   60/  FF02B4 :                     
(1)   61/  FF02B4 :                     ; ====================================================================
(1)   62/  FF02B4 :                     ; ----------------------------------------------------------------
(1)   63/  FF02B4 :                     ; Video subroutines
(1)   64/  FF02B4 :                     ; ----------------------------------------------------------------
(1)   65/  FF02B4 :                     
(1)   66/  FF02B4 :                     ; --------------------------------------------------------
(1)   67/  FF02B4 :                     ; Video_Clear
(1)   68/  FF02B4 :                     ; 
(1)   69/  FF02B4 :                     ; Clear all video data from VRAM
(1)   70/  FF02B4 :                     ; --------------------------------------------------------
(1)   71/  FF02B4 :                     
(1)   72/  FF02B4 :                     Video_Clear:
(1)   73/  FF02B4 : 303C 0000           		move.w	#0,d0			; Clears until $57F
(1)   74/  FF02B8 : 323C 0000           		move.w	#0,d1
(1)   75/  FF02BC : 343C AFE0           		move.w	#$57F*$20,d2
(1)   76/  FF02C0 : 6100 041C           		bsr	Video_Fill
(1)   77/  FF02C4 :                     
(1)   78/  FF02C4 : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)   79/  FF02C8 : 1239 FFFF A60C      		move.b	(RAM_VdpRegs+2).l,d1	; FG
(1)   80/  FF02CE : 0241 0038           		andi.w	#%111000,d1
(1)   81/  FF02D2 : E149                		lsl.w	#8,d1
(1)   82/  FF02D4 : E549                		lsl.w	#2,d1
(1)   83/  FF02D6 : 6100 0406           		bsr	Video_Fill
(1)   84/  FF02DA : 1239 FFFF A60D      		move.b	(RAM_VdpRegs+3).l,d1	; BG
(1)   85/  FF02E0 : 0241 0007           		andi.w	#%000111,d1
(1)   86/  FF02E4 : E149                		lsl.w	#8,d1
(1)   87/  FF02E6 : EB49                		lsl.w	#5,d1
(1)   88/  FF02E8 : 6100 03F4           		bsr	Video_Fill
(1)   89/  FF02EC :                     
(1)   90/  FF02EC : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)   91/  FF02F0 : 1239 FFFF A60E      		move.b	(RAM_VdpRegs+4).l,d1	; Window
(1)   92/  FF02F6 : 0241 003E           		andi.w	#%111110,d1
(1)   93/  FF02FA : E149                		lsl.w	#8,d1
(1)   94/  FF02FC : E549                		lsl.w	#2,d1
(1)   95/  FF02FE : 6000 03DE           		bra	Video_Fill
(1)   96/  FF0302 :                     		
(1)   97/  FF0302 :                     ; --------------------------------------------------------
(1)   98/  FF0302 :                     ; Video_Update
(1)   99/  FF0302 :                     ; 
(1)  100/  FF0302 :                     ; Writes register data stored in RAM to VDP
(1)  101/  FF0302 :                     ; from Registers $80 to $90
(1)  102/  FF0302 :                     ; 
(1)  103/  FF0302 :                     ; Uses:
(1)  104/  FF0302 :                     ; d6-d7,a5-a6
(1)  105/  FF0302 :                     ; --------------------------------------------------------
(1)  106/  FF0302 :                     
(1)  107/  FF0302 :                     Video_Update:
(1)  108/  FF0302 : 4DF8 A60A           		lea	(RAM_VdpRegs).w,a6
(1)  109/  FF0306 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  110/  FF030C : 3C3C 8000           		move.w	#$8000,d6
(1)  111/  FF0310 : 3E3C 0010           		move.w	#17-1,d7
(1)  112/  FF0314 :                     .loop:
(1)  113/  FF0314 : 1C1E                		move.b	(a6)+,d6
(1)  114/  FF0316 : 3A86                		move.w	d6,(a5)
(1)  115/  FF0318 : DC7C 0100           		add.w	#$100,d6
(1)  116/  FF031C : 51CF FFF6           		dbf	d7,.loop
(1)  117/  FF0320 :                     .exit:
(1)  118/  FF0320 : 4E75                		rts
(1)  119/  FF0322 :                     		
(1)  120/  FF0322 :                     ; --------------------------------------------------------
(1)  121/  FF0322 :                     ; Video_LoadPal
(1)  122/  FF0322 :                     ; Load palette to VDP directly
(1)  123/  FF0322 :                     ; 
(1)  124/  FF0322 :                     ; Input:
(1)  125/  FF0322 :                     ; a0 - Palette data
(1)  126/  FF0322 :                     ; d0 - Start position
(1)  127/  FF0322 :                     ; d1 - Number of colors
(1)  128/  FF0322 :                     ; 
(1)  129/  FF0322 :                     ; Uses:
(1)  130/  FF0322 :                     ; d5-d7,a6
(1)  131/  FF0322 :                     ; 
(1)  132/  FF0322 :                     ; Note:
(1)  133/  FF0322 :                     ; It waits for VBlank so the CRAM dots doesn't get
(1)  134/  FF0322 :                     ; in the middle of the screen.
(1)  135/  FF0322 :                     ; --------------------------------------------------------
(1)  136/  FF0322 :                     
(1)  137/  FF0322 :                     Video_PalTarget:
(1)  138/  FF0322 : 4DF8 A310           		lea	(RAM_PaletteFd),a6
(1)  139/  FF0326 : 6004                		bra.s	vidMd_Pal
(1)  140/  FF0328 :                     Video_LoadPal:
(1)  141/  FF0328 : 4DF8 A090           		lea	(RAM_Palette),a6
(1)  142/  FF032C :                     vidMd_Pal:
(1)  143/  FF032C : 2A48                		move.l	a0,a5
(1)  144/  FF032E : 7E00                		moveq	#0,d7
(1)  145/  FF0330 : 3E00                		move.w	d0,d7
(1)  146/  FF0332 : DE47                		add.w	d7,d7
(1)  147/  FF0334 : DCC7                		adda	d7,a6
(1)  148/  FF0336 : 3E01                		move.w	d1,d7
(1)  149/  FF0338 : 9E7C 0001           		sub.w	#1,d7
(1)  150/  FF033C : 3C02                		move.w	d2,d6
(1)  151/  FF033E : CC7C 0001           		and.w	#1,d6
(1)  152/  FF0342 : E25E                		ror.w	#1,d6
(1)  153/  FF0344 :                     .loop:
(1)  154/  FF0344 : 3CDD                		move.w	(a5)+,(a6)+
(1)  155/  FF0346 : 51CF FFFC           		dbf	d7,.loop
(1)  156/  FF034A : 4E75                		rts
(1)  157/  FF034C :                     
(1)  158/  FF034C :                     ; --------------------------------------------------------
(1)  159/  FF034C :                     ; Video_PalFade
(1)  160/  FF034C :                     ;
(1)  161/  FF034C :                     ; a0 - Palette data
(1)  162/  FF034C :                     ; d0 - Number of colors
(1)  163/  FF034C :                     ; d1 - Speed
(1)  164/  FF034C :                     ;
(1)  165/  FF034C :                     ; RAM_ReqFadeMars: (WORD)
(1)  166/  FF034C :                     ; $00 - No task (or finished)
(1)  167/  FF034C :                     ; $01 - Fade in
(1)  168/  FF034C :                     ; $02 - Fade out to black
(1)  169/  FF034C :                     ;
(1)  170/  FF034C :                     ; CALL THIS OUTSIDE OF VBLANK
(1)  171/  FF034C :                     ; --------------------------------------------------------
(1)  172/  FF034C :                     
(1)  173/  FF034C :                     Video_PalFade:
(1)  174/  FF034C : 3E38 A5F6           		move.w	(RAM_FadeMdReq).w,d7
(1)  175/  FF0350 : DE47                		add.w	d7,d7
(1)  176/  FF0352 : 3E3B 7006           		move.w	.fade_list(pc,d7.w),d7
(1)  177/  FF0356 : 4EFB 7002           		jmp	.fade_list(pc,d7.w)
(1)  178/  FF035A :                     
(1)  179/  FF035A :                     ; --------------------------------------------
(1)  180/  FF035A :                     
(1)  181/  FF035A :                     .fade_list:
(1)  182/  FF035A : 0006                		dc.w .fade_done-.fade_list
(1)  183/  FF035C : 0008                		dc.w .fade_in-.fade_list
(1)  184/  FF035E : 00AC                		dc.w .fade_out-.fade_list
(1)  185/  FF0360 :                     
(1)  186/  FF0360 :                     ; --------------------------------------------
(1)  187/  FF0360 :                     ; No fade or finished.
(1)  188/  FF0360 :                     ; --------------------------------------------
(1)  189/  FF0360 :                     
(1)  190/  FF0360 :                     .fade_done:
(1)  191/  FF0360 : 4E75                		rts
(1)  192/  FF0362 :                     
(1)  193/  FF0362 :                     ; --------------------------------------------
(1)  194/  FF0362 :                     ; Fade in
(1)  195/  FF0362 :                     ; --------------------------------------------
(1)  196/  FF0362 :                     
(1)  197/  FF0362 :                     .fade_in:
(1)  198/  FF0362 : 4DF8 A310           		lea	(RAM_PaletteFd),a6
(1)  199/  FF0366 : 4BF8 A090           		lea	(RAM_Palette),a5
(1)  200/  FF036A : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  201/  FF036E : 3238 A5F8           		move.w	(RAM_FadeMdSpd).w,d1		; Speed
(1)  202/  FF0372 : D241                		add.w	d1,d1
(1)  203/  FF0374 : 3C00                		move.w	d0,d6
(1)  204/  FF0376 : 4846                		swap	d6
(1)  205/  FF0378 : 907C 0001           		sub.w	#1,d0
(1)  206/  FF037C :                     .nxt_pal:
(1)  207/  FF037C : 4242                		clr.w	d2		; Reset finished colorbits
(1)  208/  FF037E : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  209/  FF0380 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  210/  FF0382 : 3607                		move.w	d7,d3		; RED
(1)  211/  FF0384 : 3806                		move.w	d6,d4
(1)  212/  FF0386 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  213/  FF038A : C87C 000E           		and.w	#%0000000000001110,d4
(1)  214/  FF038E : C67C 000E           		and.w	#%0000000000001110,d3
(1)  215/  FF0392 : D841                		add.w	d1,d4
(1)  216/  FF0394 : B843                		cmp.w	d3,d4
(1)  217/  FF0396 : 6506                		bcs.s	.no_red
(1)  218/  FF0398 : 3803                		move.w	d3,d4
(1)  219/  FF039A : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  220/  FF039E :                     .no_red:
(1)  221/  FF039E : 8C44                		or.w	d4,d6
(1)  222/  FF03A0 : E949                		lsl.w	#4,d1
(1)  223/  FF03A2 : 3607                		move.w	d7,d3		; GREEN
(1)  224/  FF03A4 : 3806                		move.w	d6,d4
(1)  225/  FF03A6 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  226/  FF03AA : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  227/  FF03AE : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  228/  FF03B2 : D841                		add.w	d1,d4
(1)  229/  FF03B4 : B843                		cmp.w	d3,d4
(1)  230/  FF03B6 : 6506                		bcs.s	.no_grn
(1)  231/  FF03B8 : 3803                		move.w	d3,d4
(1)  232/  FF03BA : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  233/  FF03BE :                     .no_grn:
(1)  234/  FF03BE : 8C44                		or.w	d4,d6
(1)  235/  FF03C0 : E949                		lsl.w	#4,d1
(1)  236/  FF03C2 : 3607                		move.w	d7,d3		; BLUE
(1)  237/  FF03C4 : 3806                		move.w	d6,d4
(1)  238/  FF03C6 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  239/  FF03CA : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  240/  FF03CE : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  241/  FF03D2 : D841                		add.w	d1,d4
(1)  242/  FF03D4 : B843                		cmp.w	d3,d4
(1)  243/  FF03D6 : 6506                		bcs.s	.no_blu
(1)  244/  FF03D8 : 3803                		move.w	d3,d4
(1)  245/  FF03DA : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  246/  FF03DE :                     .no_blu:
(1)  247/  FF03DE : 8C44                		or.w	d4,d6
(1)  248/  FF03E0 : E049                		lsr.w	#8,d1
(1)  249/  FF03E2 : 3AC6                		move.w	d6,(a5)+
(1)  250/  FF03E4 : DCFC 0002           		adda	#2,a6
(1)  251/  FF03E8 : B47C 0007           		cmp.w	#%111,d2
(1)  252/  FF03EC : 6608                		bne.s	.no_fnsh
(1)  253/  FF03EE : 4846                		swap	d6
(1)  254/  FF03F0 : 9C7C 0001           		sub.w	#1,d6
(1)  255/  FF03F4 : 4846                		swap	d6
(1)  256/  FF03F6 :                     .no_fnsh:
(1)  257/  FF03F6 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  258/  FF03FA : 4846                		swap	d6
(1)  259/  FF03FC : 4A46                		tst.w	d6
(1)  260/  FF03FE : 6604                		bne.s	.no_move
(1)  261/  FF0400 : 4278 A5F6           		clr.w	(RAM_FadeMdReq).w
(1)  262/  FF0404 :                     .no_move:
(1)  263/  FF0404 : 4E75                		rts
(1)  264/  FF0406 :                     
(1)  265/  FF0406 :                     ; --------------------------------------------
(1)  266/  FF0406 :                     ; Fade out
(1)  267/  FF0406 :                     ; --------------------------------------------
(1)  268/  FF0406 :                     
(1)  269/  FF0406 :                     .fade_out:
(1)  270/  FF0406 : 4DF8 A090           		lea	(RAM_Palette),a6
(1)  271/  FF040A : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  272/  FF040E : 3238 A5F8           		move.w	(RAM_FadeMdSpd).w,d1		; Speed
(1)  273/  FF0412 : 3C00                		move.w	d0,d6
(1)  274/  FF0414 : 4846                		swap	d6
(1)  275/  FF0416 : 907C 0001           		sub.w	#1,d0
(1)  276/  FF041A :                     .nxt_pal_o:
(1)  277/  FF041A : 4242                		clr.w	d2		; Reset finished colorbits
(1)  278/  FF041C : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  279/  FF041E : 3C07                		move.w	d7,d6
(1)  280/  FF0420 : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  281/  FF0424 : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  282/  FF0428 : 9C41                		sub.w	d1,d6
(1)  283/  FF042A : 6A06                		bpl.s	.no_red_o
(1)  284/  FF042C : 4246                		clr.w	d6
(1)  285/  FF042E : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  286/  FF0432 :                     .no_red_o:
(1)  287/  FF0432 : 8E46                		or.w	d6,d7
(1)  288/  FF0434 : E949                		lsl.w	#4,d1
(1)  289/  FF0436 : 3C07                		move.w	d7,d6
(1)  290/  FF0438 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  291/  FF043C : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  292/  FF0440 : 9C41                		sub.w	d1,d6
(1)  293/  FF0442 : 6A06                		bpl.s	.no_grn_o
(1)  294/  FF0444 : 4246                		clr.w	d6
(1)  295/  FF0446 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  296/  FF044A :                     .no_grn_o:
(1)  297/  FF044A : 8E46                		or.w	d6,d7
(1)  298/  FF044C : E949                		lsl.w	#4,d1
(1)  299/  FF044E : 3C07                		move.w	d7,d6
(1)  300/  FF0450 : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  301/  FF0454 : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  302/  FF0458 : 9C41                		sub.w	d1,d6
(1)  303/  FF045A : 6A06                		bpl.s	.no_blu_o
(1)  304/  FF045C : 4246                		clr.w	d6
(1)  305/  FF045E : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  306/  FF0462 :                     .no_blu_o:
(1)  307/  FF0462 : 8E46                		or.w	d6,d7
(1)  308/  FF0464 : E049                		lsr.w	#8,d1
(1)  309/  FF0466 : 3CC7                		move.w	d7,(a6)+
(1)  310/  FF0468 : B47C 0007           		cmp.w	#%111,d2
(1)  311/  FF046C : 6608                		bne.s	.no_fnsh_o
(1)  312/  FF046E : 4846                		swap	d6
(1)  313/  FF0470 : 9C7C 0001           		sub.w	#1,d6
(1)  314/  FF0474 : 4846                		swap	d6
(1)  315/  FF0476 :                     .no_fnsh_o:
(1)  316/  FF0476 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  317/  FF047A : 4846                		swap	d6
(1)  318/  FF047C : 4A46                		tst.w	d6
(1)  319/  FF047E : 6604                		bne.s	.no_move_o
(1)  320/  FF0480 : 4278 A5F6           		clr.w	(RAM_FadeMdReq).w
(1)  321/  FF0484 :                     .no_move_o:
(1)  322/  FF0484 : 4E75                		rts
(1)  323/  FF0486 :                     
(1)  324/  FF0486 :                     ; --------------------------------------------------------
(1)  325/  FF0486 :                     ; Video_LoadMap
(1)  326/  FF0486 :                     ; 
(1)  327/  FF0486 :                     ; Load map data, Horizontal order
(1)  328/  FF0486 :                     ; 
(1)  329/  FF0486 :                     ; a0 - Map data
(1)  330/  FF0486 :                     ; d0 | LONG - 00|Layer|X|Y, locate(lyr,x,y)  
(1)  331/  FF0486 :                     ; d1 | LONG - Width|Height (in cells),  mapsize(x,y)
(1)  332/  FF0486 :                     ; d2 | WORD - VRAM
(1)  333/  FF0486 :                     ;
(1)  334/  FF0486 :                     ; Can autodetect layer width.
(1)  335/  FF0486 :                     ;
(1)  336/  FF0486 :                     ; Uses:
(1)  337/  FF0486 :                     ; d4-d7,a6
(1)  338/  FF0486 :                     ; --------------------------------------------------------
(1)  339/  FF0486 :                     
(1)  340/  FF0486 :                     Video_LoadMap:
(1)  341/  FF0486 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  342/  FF048C : 6100 01B4           		bsr	vid_PickLayer
(1)  343/  FF0490 : 3A01                		move.w	d1,d5		; Start here
(1)  344/  FF0492 :                     .yloop:
(1)  345/  FF0492 : 4845                		swap	d5
(1)  346/  FF0494 : 2D44 0004           		move.l	d4,4(a6)
(1)  347/  FF0498 : 2E01                		move.l	d1,d7
(1)  348/  FF049A : 4847                		swap	d7
(1)  349/  FF049C :                     .xloop:
(1)  350/  FF049C : 3A18                		move.w	(a0)+,d5
(1)  351/  FF049E : BA7C FFFF           		cmp.w	#-1,d5
(1)  352/  FF04A2 : 6606                		bne.s	.nonull
(1)  353/  FF04A4 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  354/  FF04A8 : 6002                		bra.s	.cont
(1)  355/  FF04AA :                     .nonull:
(1)  356/  FF04AA : DA42                		add.w	d2,d5
(1)  357/  FF04AC :                     .cont:
(1)  358/  FF04AC : 4847                		swap	d7
(1)  359/  FF04AE : 1E39 FFFF A616      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  360/  FF04B4 : CE7C 0006           		and.w	#%110,d7
(1)  361/  FF04B8 : BE7C 0006           		cmp.w	#%110,d7
(1)  362/  FF04BC : 660E                		bne.s	.nodble
(1)  363/  FF04BE : 3E05                		move.w	d5,d7
(1)  364/  FF04C0 : E24F                		lsr.w	#1,d7
(1)  365/  FF04C2 : CE7C 07FF           		and.w	#$7FF,d7
(1)  366/  FF04C6 : CA7C F800           		and.w	#$F800,d5
(1)  367/  FF04CA : 8A47                		or.w	d7,d5
(1)  368/  FF04CC :                     .nodble:
(1)  369/  FF04CC : 4847                		swap	d7
(1)  370/  FF04CE : 3C85                		move.w	d5,(a6)
(1)  371/  FF04D0 : 51CF FFCA           		dbf	d7,.xloop
(1)  372/  FF04D4 : D886                		add.l	d6,d4
(1)  373/  FF04D6 : 4845                		swap	d5
(1)  374/  FF04D8 : 51CD FFB8           		dbf	d5,.yloop
(1)  375/  FF04DC : 4E75                		rts
(1)  376/  FF04DE :                     
(1)  377/  FF04DE :                     ; ; --------------------------------------------------------
(1)  378/  FF04DE :                     ; ; Video_LoadMap_Vert
(1)  379/  FF04DE :                     ; ;
(1)  380/  FF04DE :                     ; ; Load map data, Vertical order
(1)  381/  FF04DE :                     ; ;
(1)  382/  FF04DE :                     ; ; a0 - Map data
(1)  383/  FF04DE :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  384/  FF04DE :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  385/  FF04DE :                     ; ; d2 | WORD - VRAM
(1)  386/  FF04DE :                     ;
(1)  387/  FF04DE :                     ; ; Uses:
(1)  388/  FF04DE :                     ; ; a4-a5,d4-d7
(1)  389/  FF04DE :                     ; ; --------------------------------------------------------
(1)  390/  FF04DE :                     ;
(1)  391/  FF04DE :                     ; Video_LoadMap_Vert:
(1)  392/  FF04DE :                     ; 		lea	(vdp_data),a4
(1)  393/  FF04DE :                     ; 		bsr	vid_PickLayer
(1)  394/  FF04DE :                     ; 		move.l	d1,d5		; Start here
(1)  395/  FF04DE :                     ; 		swap	d5
(1)  396/  FF04DE :                     ; .xloop:
(1)  397/  FF04DE :                     ; 		swap	d5
(1)  398/  FF04DE :                     ; 		move.l	d4,-(sp)
(1)  399/  FF04DE :                     ; 		move.w	d1,d7
(1)  400/  FF04DE :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  401/  FF04DE :                     ; 		beq.s	.yloop
(1)  402/  FF04DE :                     ; 		lsr.w	#1,d7
(1)  403/  FF04DE :                     ; .yloop:
(1)  404/  FF04DE :                     ; 		move.l	d4,4(a4)
(1)  405/  FF04DE :                     ; 		move.w	(a0),d5
(1)  406/  FF04DE :                     ; 		cmp.w	#-1,d5
(1)  407/  FF04DE :                     ; 		bne.s	.nonull
(1)  408/  FF04DE :                     ; 		move.w	#varNullVram,d5
(1)  409/  FF04DE :                     ; 		bra.s	.cont
(1)  410/  FF04DE :                     ; .nonull:
(1)  411/  FF04DE :                     ; 		add.w	d2,d5
(1)  412/  FF04DE :                     ; .cont:
(1)  413/  FF04DE :                     ; 		swap	d7
(1)  414/  FF04DE :                     ; 		adda	#2,a0
(1)  415/  FF04DE :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  416/  FF04DE :                     ; 		beq.s	.nodble
(1)  417/  FF04DE :                     ; 		adda	#2,a0
(1)  418/  FF04DE :                     ; 		move.w	d5,d7
(1)  419/  FF04DE :                     ; 		lsr.w	#1,d7
(1)  420/  FF04DE :                     ; 		and.w	#$7FF,d7
(1)  421/  FF04DE :                     ; 		and.w	#$F800,d5
(1)  422/  FF04DE :                     ; 		or.w	d7,d5
(1)  423/  FF04DE :                     ; .nodble:
(1)  424/  FF04DE :                     ; 		swap	d7
(1)  425/  FF04DE :                     ; 		move.w	d5,(a4)
(1)  426/  FF04DE :                     ; 		add.l	d6,d4
(1)  427/  FF04DE :                     ; 		dbf	d7,.yloop
(1)  428/  FF04DE :                     ; .outdbl:
(1)  429/  FF04DE :                     ; 		move.l	(sp)+,d4
(1)  430/  FF04DE :                     ; 		add.l	#$20000,d4
(1)  431/  FF04DE :                     ; 		swap	d5
(1)  432/  FF04DE :                     ; 		dbf	d5,.xloop
(1)  433/  FF04DE :                     ; 		rts
(1)  434/  FF04DE :                     		
(1)  435/  FF04DE :                     ; ; --------------------------------------------------------
(1)  436/  FF04DE :                     ; ; Video_AutoMap_Vert
(1)  437/  FF04DE :                     ; ;
(1)  438/  FF04DE :                     ; ; Make automatic map, Vertical order
(1)  439/  FF04DE :                     ; ;
(1)  440/  FF04DE :                     ; ; MCD: Use this to make a virtual screen
(1)  441/  FF04DE :                     ; ; for Stamps
(1)  442/  FF04DE :                     ; ;
(1)  443/  FF04DE :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  444/  FF04DE :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  445/  FF04DE :                     ; ; d2 | WORD - VRAM
(1)  446/  FF04DE :                     ;
(1)  447/  FF04DE :                     ; ; Uses:
(1)  448/  FF04DE :                     ; ; a4-a5,d4-d7
(1)  449/  FF04DE :                     ; ; --------------------------------------------------------
(1)  450/  FF04DE :                     ;
(1)  451/  FF04DE :                     ; ; TODO: double interlace
(1)  452/  FF04DE :                     ; Video_AutoMap_Vert:
(1)  453/  FF04DE :                     ; 		lea	(vdp_data),a4
(1)  454/  FF04DE :                     ; 		bsr	vid_PickLayer
(1)  455/  FF04DE :                     ; 		move.w	d2,d7		; Start here
(1)  456/  FF04DE :                     ; 		move.l	d1,d5
(1)  457/  FF04DE :                     ; 		swap	d5
(1)  458/  FF04DE :                     ; .xloop:
(1)  459/  FF04DE :                     ; 		swap	d5
(1)  460/  FF04DE :                     ; 		move.l	d4,-(sp)
(1)  461/  FF04DE :                     ; 		move.w	d1,d5
(1)  462/  FF04DE :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  463/  FF04DE :                     ; 		beq.s	.yloop
(1)  464/  FF04DE :                     ; 		lsr.w	#1,d5
(1)  465/  FF04DE :                     ; .yloop:
(1)  466/  FF04DE :                     ; 		move.l	d4,4(a4)
(1)  467/  FF04DE :                     ; 		move.w	d7,(a4)
(1)  468/  FF04DE :                     ; 		add.w	#1,d7
(1)  469/  FF04DE :                     ; 		add.l	d6,d4
(1)  470/  FF04DE :                     ; 		dbf	d5,.yloop
(1)  471/  FF04DE :                     ;
(1)  472/  FF04DE :                     ; 		move.l	(sp)+,d4
(1)  473/  FF04DE :                     ; 		add.l	#$20000,d4
(1)  474/  FF04DE :                     ; 		swap	d5
(1)  475/  FF04DE :                     ; 		dbf	d5,.xloop
(1)  476/  FF04DE :                     ; 		rts
(1)  477/  FF04DE :                     
(1)  478/  FF04DE :                     ; --------------------------------------------------------
(1)  479/  FF04DE :                     ; Video_PrintInit
(1)  480/  FF04DE :                     ; 
(1)  481/  FF04DE :                     ; Load palette and font for printing text
(1)  482/  FF04DE :                     ; --------------------------------------------------------
(1)  483/  FF04DE :                     
(1)  484/  FF04DE :                     Video_PrintInit:
(1)  485/  FF04DE : 41FA 063C           		lea	ASCII_PAL(pc),a0
(1)  486/  FF04E2 : 7030                		moveq	#$30,d0
(1)  487/  FF04E4 : 323C 000F           		move.w	#$F,d1
(1)  488/  FF04E8 : 6100 FE3E           		bsr	Video_LoadPal
(1)  489/  FF04EC : 6100 FE34           		bsr	Video_PalTarget
(1)  490/  FF04F0 : 203C 00FF 0B3C      		move.l	#ASCII_FONT,d0
(1)  491/  FF04F6 : 323C B000           		move.w	#$580*$20,d1
(1)  492/  FF04FA : 343C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  493/  FF04FE : 363C 6580           		move.w	#$580|$6000,d3
(1)  494/  FF0502 : 31C3 A5F4           		move.w	d3,(RAM_VidPrntVram).w
(1)  495/  FF0506 : 6000 03B0           		bra	Video_LoadArt
(1)  496/  FF050A :                     
(1)  497/  FF050A :                     ; --------------------------------------------------------
(1)  498/  FF050A :                     ; Video_Print
(1)  499/  FF050A :                     ;
(1)  500/  FF050A :                     ; Prints string to layer
(1)  501/  FF050A :                     ; requires ASCII font
(1)  502/  FF050A :                     ; 
(1)  503/  FF050A :                     ; a0 - string data + RAM address to peek (optional)
(1)  504/  FF050A :                     ; d0 | LONG - 00|Lyr|X|Y, locate(lyr,x,y)
(1)  505/  FF050A :                     ; 
(1)  506/  FF050A :                     ; Special characters:
(1)  507/  FF050A :                     ; "//b" - Shows BYTE value
(1)  508/  FF050A :                     ; "//w" - Shows WORD value
(1)  509/  FF050A :                     ; "//l" - Shows LONG value
(1)  510/  FF050A :                     ;   $0A - Next line
(1)  511/  FF050A :                     ;   $00 - End of line
(1)  512/  FF050A :                     ;
(1)  513/  FF050A :                     ; After $00, put your RAM addresses in LONGS
(1)  514/  FF050A :                     ; don't forget to put align 2 at the end.
(1)  515/  FF050A :                     ;
(1)  516/  FF050A :                     ; CALL Video_PrintInit ONCE to use this feature.
(1)  517/  FF050A :                     ;
(1)  518/  FF050A :                     ; Uses:
(1)  519/  FF050A :                     ; d4-d7,a4-a6
(1)  520/  FF050A :                     ; --------------------------------------------------------
(1)  521/  FF050A :                     
(1)  522/  FF050A :                     Video_Print:
(1)  523/  FF050A :                     ; 		movem.l	d3-d7,-(sp)
(1)  524/  FF050A :                     ; 		movem.l	a4-a6,-(sp)
(1)  525/  FF050A :                     		
(1)  526/  FF050A : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  527/  FF0510 : 6100 0130           		bsr	vid_PickLayer
(1)  528/  FF0514 : 4BF8 A470           		lea	(RAM_VidPrntList),a5
(1)  529/  FF0518 :                     .newjump:
(1)  530/  FF0518 : 2D44 0004           		move.l	d4,4(a6)
(1)  531/  FF051C : 2A04                		move.l	d4,d5
(1)  532/  FF051E :                     .loop:
(1)  533/  FF051E : 1E18                		move.b	(a0)+,d7
(1)  534/  FF0520 : 6772                		beq	.exit
(1)  535/  FF0522 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  536/  FF0526 : 6718                		beq.s	.next
(1)  537/  FF0528 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  538/  FF052C : 6716                		beq.s	.special
(1)  539/  FF052E : 0247 00FF           		andi.w	#$FF,d7
(1)  540/  FF0532 :                     .puttext:
(1)  541/  FF0532 : DE78 A5F4           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  542/  FF0536 : 3C87                		move.w	d7,(a6)
(1)  543/  FF0538 : DABC 0002 0000      		add.l	#$20000,d5
(1)  544/  FF053E : 60DE                		bra.s	.loop
(1)  545/  FF0540 :                     ; Next line
(1)  546/  FF0540 :                     .next:
(1)  547/  FF0540 : D886                		add.l	d6,d4
(1)  548/  FF0542 : 60D4                		bra.s	.newjump
(1)  549/  FF0544 :                     
(1)  550/  FF0544 :                     ; Specials
(1)  551/  FF0544 :                     .special:
(1)  552/  FF0544 : 1E18                		move.b	(a0)+,d7
(1)  553/  FF0546 : 0C07 0062           		cmpi.b	#"b",d7
(1)  554/  FF054A : 6712                		beq.s	.isbyte
(1)  555/  FF054C : 0C07 0077           		cmpi.b	#"w",d7
(1)  556/  FF0550 : 671E                		beq.s	.isword
(1)  557/  FF0552 : 0C07 006C           		cmpi.b	#"l",d7
(1)  558/  FF0556 : 672A                		beq.s	.islong
(1)  559/  FF0558 : 3E3C 005C           		move.w	#"\\",d7			; nothing to do
(1)  560/  FF055C : 60D4                		bra.s	.puttext
(1)  561/  FF055E :                     		
(1)  562/  FF055E :                     	; TEMPORAL VALUES
(1)  563/  FF055E :                     .isbyte:
(1)  564/  FF055E : 2AC5                		move.l	d5,(a5)+
(1)  565/  FF0560 : 3AFC 0001           		move.w	#1,(a5)+
(1)  566/  FF0564 : DABC 0004 0000      		add.l	#$40000,d5
(1)  567/  FF056A : 2D45 0004           		move.l	d5,4(a6)
(1)  568/  FF056E : 60AE                		bra	.loop
(1)  569/  FF0570 :                     .isword:
(1)  570/  FF0570 : 2AC5                		move.l	d5,(a5)+
(1)  571/  FF0572 : 3AFC 0002           		move.w	#2,(a5)+
(1)  572/  FF0576 : DABC 0008 0000      		add.l	#$80000,d5
(1)  573/  FF057C : 2D45 0004           		move.l	d5,4(a6)
(1)  574/  FF0580 : 609C                		bra	.loop
(1)  575/  FF0582 :                     .islong:
(1)  576/  FF0582 : 2AC5                		move.l	d5,(a5)+
(1)  577/  FF0584 : 3AFC 0003           		move.w	#3,(a5)+
(1)  578/  FF0588 : DABC 0010 0000      		add.l	#$100000,d5
(1)  579/  FF058E : 2D45 0004           		move.l	d5,4(a6)
(1)  580/  FF0592 : 608A                		bra	.loop
(1)  581/  FF0594 :                     .exit:
(1)  582/  FF0594 :                     
(1)  583/  FF0594 :                     ; --------------------------------------------------------
(1)  584/  FF0594 :                     ; Print values
(1)  585/  FF0594 :                     ; 
(1)  586/  FF0594 :                     ; vvvv vvvv tttt
(1)  587/  FF0594 :                     ; v - vdp pos
(1)  588/  FF0594 :                     ; t - value type
(1)  589/  FF0594 :                     ; --------------------------------------------------------
(1)  590/  FF0594 :                     
(1)  591/  FF0594 :                     ; reading byte by byte because longs doens't get
(1)  592/  FF0594 :                     ; aligned after $00...
(1)  593/  FF0594 :                     
(1)  594/  FF0594 : 7800                		moveq	#0,d4
(1)  595/  FF0596 : 7A00                		moveq	#0,d5
(1)  596/  FF0598 : 7C00                		moveq	#0,d6
(1)  597/  FF059A : 4BF8 A470           		lea	(RAM_VidPrntList),a5
(1)  598/  FF059E :                     .nextv:
(1)  599/  FF059E : 4A95                		tst.l	(a5)
(1)  600/  FF05A0 : 6700 009E           		beq	.nothing
(1)  601/  FF05A4 :                     	; grab value
(1)  602/  FF05A4 : 7800                		moveq	#0,d4
(1)  603/  FF05A6 : 1818                		move.b	(a0)+,d4
(1)  604/  FF05A8 : E19C                		rol.l	#8,d4
(1)  605/  FF05AA : 1818                		move.b	(a0)+,d4
(1)  606/  FF05AC : E19C                		rol.l	#8,d4
(1)  607/  FF05AE : 1818                		move.b	(a0)+,d4
(1)  608/  FF05B0 : E19C                		rol.l	#8,d4
(1)  609/  FF05B2 : 1818                		move.b	(a0)+,d4
(1)  610/  FF05B4 : 2844                		movea.l	d4,a4
(1)  611/  FF05B6 : 7800                		moveq	#0,d4
(1)  612/  FF05B8 :                     
(1)  613/  FF05B8 :                     	; get value
(1)  614/  FF05B8 : 3C2D 0004           		move.w	4(a5),d6
(1)  615/  FF05BC : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  616/  FF05C0 : 660E                		bne.s	.vbyte
(1)  617/  FF05C2 : 1814                		move.b	(a4),d4
(1)  618/  FF05C4 : 2D55 0004           		move.l	(a5),4(a6)
(1)  619/  FF05C8 : E91C                		rol.b	#4,d4
(1)  620/  FF05CA : 6158                		bsr.s	.donibl
(1)  621/  FF05CC : E91C                		rol.b	#4,d4
(1)  622/  FF05CE : 6154                		bsr.s	.donibl
(1)  623/  FF05D0 :                     .vbyte:
(1)  624/  FF05D0 : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  625/  FF05D4 : 661C                		bne.s	.vword
(1)  626/  FF05D6 : 1814                		move.b	(a4),d4
(1)  627/  FF05D8 : E15C                		rol.w	#8,d4
(1)  628/  FF05DA : 182C 0001           		move.b	1(a4),d4
(1)  629/  FF05DE : 2D55 0004           		move.l	(a5),4(a6)
(1)  630/  FF05E2 : E95C                		rol.w	#4,d4
(1)  631/  FF05E4 : 613E                		bsr.s	.donibl
(1)  632/  FF05E6 : E95C                		rol.w	#4,d4
(1)  633/  FF05E8 : 613A                		bsr.s	.donibl
(1)  634/  FF05EA : E95C                		rol.w	#4,d4
(1)  635/  FF05EC : 6136                		bsr.s	.donibl
(1)  636/  FF05EE : E95C                		rol.w	#4,d4
(1)  637/  FF05F0 : 6132                		bsr.s	.donibl
(1)  638/  FF05F2 :                     .vword:
(1)  639/  FF05F2 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  640/  FF05F6 : 6624                		bne.s	.vlong
(1)  641/  FF05F8 : 1814                		move.b	(a4),d4
(1)  642/  FF05FA : E19C                		rol.l	#8,d4
(1)  643/  FF05FC : 182C 0001           		move.b	1(a4),d4
(1)  644/  FF0600 : E19C                		rol.l	#8,d4
(1)  645/  FF0602 : 182C 0002           		move.b	2(a4),d4
(1)  646/  FF0606 : E19C                		rol.l	#8,d4
(1)  647/  FF0608 : 182C 0003           		move.b	3(a4),d4
(1)  648/  FF060C : 2D55 0004           		move.l	(a5),4(a6)
(1)  649/  FF0610 : 3C3C 0007           		move.w	#7,d6
(1)  650/  FF0614 : E99C                .lngloop:	rol.l	#4,d4
(1)  651/  FF0616 : 610C                		bsr.s	.donibl
(1)  652/  FF0618 : 51CE FFFA           		dbf	d6,.lngloop
(1)  653/  FF061C :                     .vlong:
(1)  654/  FF061C : 429D                		clr.l	(a5)+
(1)  655/  FF061E : 425D                		clr.w	(a5)+
(1)  656/  FF0620 : 6000 FF7C           		bra	.nextv
(1)  657/  FF0624 :                     
(1)  658/  FF0624 :                     ; make nibble byte
(1)  659/  FF0624 :                     .donibl:
(1)  660/  FF0624 : 3A04                		move.w	d4,d5
(1)  661/  FF0626 : 0245 000F           		andi.w	#%1111,d5
(1)  662/  FF062A : BA3C 000A           		cmp.b	#$A,d5
(1)  663/  FF062E : 6D04                		blt.s	.lowr
(1)  664/  FF0630 : DA3C 0007           		add.b	#7,d5
(1)  665/  FF0634 :                     .lowr:
(1)  666/  FF0634 : DA7C 0030           		add.w	#"0",d5
(1)  667/  FF0638 : DA78 A5F4           		add.w	(RAM_VidPrntVram),d5
(1)  668/  FF063C : 3C85                		move.w	d5,(a6)
(1)  669/  FF063E : 4E75                		rts
(1)  670/  FF0640 :                     ; exit
(1)  671/  FF0640 :                     .nothing:
(1)  672/  FF0640 :                     ; 		movem.l	(sp)+,a4-a6
(1)  673/  FF0640 :                     ; 		movem.l	(sp)+,d3-d7
(1)  674/  FF0640 : 4E75                		rts
(1)  675/  FF0642 :                     
(1)  676/  FF0642 :                     ; --------------------------------------------------------
(1)  677/  FF0642 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  678/  FF0642 :                     ; --------------------------------------------------------
(1)  679/  FF0642 :                     
(1)  680/  FF0642 :                     vid_PickLayer:
(1)  681/  FF0642 : 2C00                		move.l	d0,d6			; Pick layer
(1)  682/  FF0644 : 4846                		swap	d6
(1)  683/  FF0646 : 0806 0000           		btst	#0,d6
(1)  684/  FF064A : 671E                		beq.s	.plawnd
(1)  685/  FF064C : 1839 FFFF A60E      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  686/  FF0652 : 3A04                		move.w	d4,d5
(1)  687/  FF0654 : E24D                		lsr.w	#1,d5
(1)  688/  FF0656 : 0245 0003           		andi.w	#%11,d5
(1)  689/  FF065A : 4844                		swap	d4
(1)  690/  FF065C : 3805                		move.w	d5,d4
(1)  691/  FF065E : 4844                		swap	d4
(1)  692/  FF0660 : 0244 0001           		andi.w	#1,d4
(1)  693/  FF0664 : E14C                		lsl.w	#8,d4
(1)  694/  FF0666 : EB4C                		lsl.w	#5,d4
(1)  695/  FF0668 : 6028                		bra.s	.golyr
(1)  696/  FF066A :                     .plawnd:
(1)  697/  FF066A : 1839 FFFF A60C      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  698/  FF0670 : 0806 0001           		btst	#1,d6
(1)  699/  FF0674 : 6706                		beq.s	.nowd
(1)  700/  FF0676 : 1839 FFFF A60D      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  701/  FF067C :                     .nowd:		
(1)  702/  FF067C : 3A04                		move.w	d4,d5
(1)  703/  FF067E : E84D                		lsr.w	#4,d5
(1)  704/  FF0680 : 0245 0003           		andi.w	#%11,d5
(1)  705/  FF0684 : 4844                		swap	d4
(1)  706/  FF0686 : 3805                		move.w	d5,d4
(1)  707/  FF0688 : 4844                		swap	d4
(1)  708/  FF068A : 0244 000E           		andi.w	#%00001110,d4
(1)  709/  FF068E : E14C                		lsl.w	#8,d4
(1)  710/  FF0690 : E54C                		lsl.w	#2,d4
(1)  711/  FF0692 :                     .golyr:
(1)  712/  FF0692 : 0044 4000           		ori.w	#$4000,d4
(1)  713/  FF0696 : 3A00                		move.w	d0,d5			; Y start pos
(1)  714/  FF0698 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  715/  FF069C : ED4D                		lsl.w	#6,d5			
(1)  716/  FF069E : 1C38 A61A           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  717/  FF06A2 : 0246 0003           		andi.w	#%11,d6
(1)  718/  FF06A6 : 670A                		beq.s	.thissz
(1)  719/  FF06A8 : DA45                		add.w	d5,d5			; H64
(1)  720/  FF06AA : 0246 0002           		andi.w	#%10,d6
(1)  721/  FF06AE : 6702                		beq.s	.thissz
(1)  722/  FF06B0 : DA45                		add.w	d5,d5			; H128		
(1)  723/  FF06B2 :                     .thissz:
(1)  724/  FF06B2 : D845                		add.w	d5,d4
(1)  725/  FF06B4 : 3A00                		move.w	d0,d5
(1)  726/  FF06B6 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  727/  FF06BA : EE4D                		lsr.w	#7,d5
(1)  728/  FF06BC : D845                		add.w	d5,d4			; X add
(1)  729/  FF06BE : 4844                		swap	d4
(1)  730/  FF06C0 : 7C00                		moveq	#0,d6
(1)  731/  FF06C2 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  732/  FF06C6 : 1A38 A61A           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  733/  FF06CA : 0245 0003           		andi.w	#%11,d5
(1)  734/  FF06CE : 670A                		beq.s	.thisszj
(1)  735/  FF06D0 : DC46                		add.w	d6,d6			; H64
(1)  736/  FF06D2 : 0245 0002           		andi.w	#%10,d5
(1)  737/  FF06D6 : 6702                		beq.s	.thisszj
(1)  738/  FF06D8 : DC46                		add.w	d6,d6			; H128		
(1)  739/  FF06DA :                     .thisszj:
(1)  740/  FF06DA : 4846                		swap	d6
(1)  741/  FF06DC : 4E75                		rts
(1)  742/  FF06DE :                     		
(1)  743/  FF06DE :                     ; --------------------------------------------------------
(1)  744/  FF06DE :                     ; Video_Fill
(1)  745/  FF06DE :                     ; 
(1)  746/  FF06DE :                     ; Fill data to VRAM
(1)  747/  FF06DE :                     ;
(1)  748/  FF06DE :                     ; d0 | WORD - Bytes to fill
(1)  749/  FF06DE :                     ; d1 | WORD - VRAM position
(1)  750/  FF06DE :                     ; d2 | WORD - Size
(1)  751/  FF06DE :                     ;
(1)  752/  FF06DE :                     ; Uses:
(1)  753/  FF06DE :                     ; d6-d7,a6
(1)  754/  FF06DE :                     ; --------------------------------------------------------
(1)  755/  FF06DE :                     
(1)  756/  FF06DE :                     Video_Fill:
(1)  757/  FF06DE : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  758/  FF06E4 : 3E3C 8100           		move.w	#$8100,d7
(1)  759/  FF06E8 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  760/  FF06EC : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  761/  FF06F0 : 3C87                		move.w	d7,(a6)
(1)  762/  FF06F2 : 3E16                .dmaw:		move.w	(a6),d7
(1)  763/  FF06F4 : 0807 0001           		btst	#bitDma,d7
(1)  764/  FF06F8 : 66F8                		bne.s	.dmaw
(1)  765/  FF06FA : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  766/  FF06FE : 3E02                		move.w	d2,d7		; d2 - Size
(1)  767/  FF0700 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  768/  FF0706 : E24F                		lsr.w	#1,d7
(1)  769/  FF0708 : 1C07                		move.b	d7,d6
(1)  770/  FF070A : 4846                		swap	d6
(1)  771/  FF070C : E04F                		lsr.w	#8,d7
(1)  772/  FF070E : 1C07                		move.b	d7,d6
(1)  773/  FF0710 : 4846                		swap	d6
(1)  774/  FF0712 : 2C86                		move.l	d6,(a6)
(1)  775/  FF0714 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  776/  FF0718 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  777/  FF071A :                     ; 		lsl.w	#5,d7
(1)  778/  FF071A : 3C07                		move.w	d7,d6
(1)  779/  FF071C : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  780/  FF0720 : 0046 4000           		ori.w	#$4000,d6
(1)  781/  FF0724 : 4846                		swap	d6
(1)  782/  FF0726 : 3C07                		move.w	d7,d6
(1)  783/  FF0728 : E04E                		lsr.w	#8,d6
(1)  784/  FF072A : EC4E                		lsr.w	#6,d6
(1)  785/  FF072C : 0246 0003           		andi.w	#%11,d6
(1)  786/  FF0730 : 0046 0080           		ori.w	#$80,d6
(1)  787/  FF0734 : 2C86                		move.l	d6,(a6)
(1)  788/  FF0736 : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  789/  FF073A : 3E16                .dmawe:		move.w	(a6),d7
(1)  790/  FF073C : 0807 0001           		btst	#bitDma,d7
(1)  791/  FF0740 : 66F8                		bne.s	.dmawe
(1)  792/  FF0742 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  793/  FF0746 : 3E3C 8100           		move.w	#$8100,d7
(1)  794/  FF074A : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  795/  FF074E : 3C87                		move.w	d7,(a6)
(1)  796/  FF0750 : 4E75                		rts
(1)  797/  FF0752 :                     
(1)  798/  FF0752 :                     ; --------------------------------------------------------
(1)  799/  FF0752 :                     ; Video_Copy
(1)  800/  FF0752 :                     ; 
(1)  801/  FF0752 :                     ; Copy VRAM data to another location
(1)  802/  FF0752 :                     ;
(1)  803/  FF0752 :                     ; d0 | WORD - VRAM Source
(1)  804/  FF0752 :                     ; d1 | WORD - VRAM Destination
(1)  805/  FF0752 :                     ; d2 | WORD - Size
(1)  806/  FF0752 :                     ;
(1)  807/  FF0752 :                     ; Uses:
(1)  808/  FF0752 :                     ; d6-d7,a6
(1)  809/  FF0752 :                     ; --------------------------------------------------------
(1)  810/  FF0752 :                     
(1)  811/  FF0752 :                     ; TODO: test if this works again...
(1)  812/  FF0752 :                     
(1)  813/  FF0752 :                     Video_Copy:
(1)  814/  FF0752 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  815/  FF0758 : 3E3C 8100           		move.w	#$8100,d7
(1)  816/  FF075C : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  817/  FF0760 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  818/  FF0764 : 3C87                		move.w	d7,(a6)
(1)  819/  FF0766 : 3E16                .dmaw:		move.w	(a6),d7
(1)  820/  FF0768 : 0807 0001           		btst	#bitDma,d7
(1)  821/  FF076C : 66F8                		bne.s	.dmaw
(1)  822/  FF076E : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1)  823/  FF0772 : 3E02                		move.w	d2,d7			; SIZE
(1)  824/  FF0774 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  825/  FF077A : E24F                		lsr.w	#1,d7
(1)  826/  FF077C : 1C07                		move.b	d7,d6
(1)  827/  FF077E : 4846                		swap	d6
(1)  828/  FF0780 : E04F                		lsr.w	#8,d7
(1)  829/  FF0782 : 1C07                		move.b	d7,d6
(1)  830/  FF0784 : 4846                		swap	d6
(1)  831/  FF0786 : 2C86                		move.l	d6,(a6)
(1)  832/  FF0788 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1)  833/  FF078E : 3E00                		move.w	d0,d7
(1)  834/  FF0790 : 1C07                		move.b	d7,d6
(1)  835/  FF0792 : 4846                		swap	d6
(1)  836/  FF0794 : E04F                		lsr.w	#8,d7
(1)  837/  FF0796 : 1C07                		move.b	d7,d6
(1)  838/  FF0798 : 2C86                		move.l	d6,(a6)
(1)  839/  FF079A : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1)  840/  FF079E : 2E02                		move.l	d2,d7			; DESTINATION
(1)  841/  FF07A0 :                     ; 		lsl.w	#5,d7
(1)  842/  FF07A0 : 3C07                		move.w	d7,d6
(1)  843/  FF07A2 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  844/  FF07A6 : 0046 4000           		ori.w	#$4000,d6
(1)  845/  FF07AA : 4846                		swap	d6
(1)  846/  FF07AC : 3C07                		move.w	d7,d6
(1)  847/  FF07AE : E04E                		lsr.w	#8,d6
(1)  848/  FF07B0 : EC4E                		lsr.w	#6,d6
(1)  849/  FF07B2 : 0246 0003           		andi.w	#%11,d6
(1)  850/  FF07B6 : 0046 00C0           		ori.w	#$C0,d6
(1)  851/  FF07BA : 2C86                		move.l	d6,(a6)
(1)  852/  FF07BC : 3D41 FFFC           		move.w	d1,-4(a6)
(1)  853/  FF07C0 : 3E16                .dmawe:		move.w	(a6),d7
(1)  854/  FF07C2 : 0807 0001           		btst	#bitDma,d7
(1)  855/  FF07C6 : 66F8                		bne.s	.dmawe
(1)  856/  FF07C8 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1)  857/  FF07CC : 3E3C 8100           		move.w	#$8100,d7
(1)  858/  FF07D0 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  859/  FF07D4 : 3C87                		move.w	d7,(a6)
(1)  860/  FF07D6 : 4E75                		rts
(1)  861/  FF07D8 :                     
(1)  862/  FF07D8 :                     ; ====================================================================
(1)  863/  FF07D8 :                     ; --------------------------------------------------------
(1)  864/  FF07D8 :                     ; DMA ROM to VDP Transfer, sets RV=1
(1)  865/  FF07D8 :                     ; --------------------------------------------------------
(1)  866/  FF07D8 :                     
(1)  867/  FF07D8 :                     ; --------------------------------------------------------
(1)  868/  FF07D8 :                     ; Video_DmaBlast
(1)  869/  FF07D8 :                     ;
(1)  870/  FF07D8 :                     ; Process DMA tasks from a predefined list in RAM
(1)  871/  FF07D8 :                     ; **CALL THIS DURING VBLANK ONLY**
(1)  872/  FF07D8 :                     ;
(1)  873/  FF07D8 :                     ; Uses:
(1)  874/  FF07D8 :                     ; d5-d7,a3-a4
(1)  875/  FF07D8 :                     ; --------------------------------------------------------
(1)  876/  FF07D8 :                     
(1)  877/  FF07D8 :                     ; Entry format:
(1)  878/  FF07D8 :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1)  879/  FF07D8 :                     ; $40000080 (vdp destination + dma bit)
(1)  880/  FF07D8 :                     
(1)  881/  FF07D8 :                     Video_DmaBlast:
(1)  882/  FF07D8 : 4A78 A5F2           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  883/  FF07DC : 6666                		bne.s	.exit
(1)  884/  FF07DE : 4A78 A5F0           		tst.w	(RAM_VdpDmaIndx).w		; Index != 0?
(1)  885/  FF07E2 : 6760                		beq.s	.exit
(1)  886/  FF07E4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  887/  FF07EA : 47F8 A390           		lea	(RAM_VdpDmaList).w,a3
(1)  888/  FF07EE : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1)  889/  FF07F2 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  890/  FF07F6 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  891/  FF07FA : 3887                		move.w	d7,(a4)
(1)  892/  FF07FC : 6100 F936           		bsr	Sound_DMA_Pause			; Request Z80 stop and SH2 backup
(1)  893/  FF0800 : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl).l	; Set RV=1
(1)  894/  FF0808 : 4A78 A5F0           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  895/  FF080C : 6720                		beq.s	.end
(1)  896/  FF080E : 2893                		move.l	(a3),(a4)			; Size
(1)  897/  FF0810 : 429B                		clr.l	(a3)+
(1)  898/  FF0812 : 2893                		move.l	(a3),(a4)			; Source
(1)  899/  FF0814 : 429B                		clr.l	(a3)+
(1)  900/  FF0816 : 3893                		move.w	(a3),(a4)
(1)  901/  FF0818 : 425B                		clr.w	(a3)+
(1)  902/  FF081A : 3C13                		move.w	(a3),d6				; Destination
(1)  903/  FF081C : 425B                		clr.w	(a3)+
(1)  904/  FF081E : 3A13                		move.w	(a3),d5
(1)  905/  FF0820 : 425B                		clr.w	(a3)+
(1)  906/  FF0822 : 3886                		move.w	d6,(a4)
(1)  907/  FF0824 : 3885                		move.w	d5,(a4)
(1)  908/  FF0826 : 0478 000E A5F0      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1)  909/  FF082C : 60DA                		bra.s	.next
(1)  910/  FF082E :                     .end:
(1)  911/  FF082E : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl).l	; Set RV=0
(1)  912/  FF0836 : 6100 F954           		bsr	Sound_DMA_Resume		; Resume Z80 and SH2 direct
(1)  913/  FF083A : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1)  914/  FF083E : 1E38 A60B           		move.b	(RAM_VdpRegs+1).w,d7
(1)  915/  FF0842 : 3887                		move.w	d7,(a4)
(1)  916/  FF0844 :                     .exit:
(1)  917/  FF0844 : 4E75                		rts
(1)  918/  FF0846 :                     
(1)  919/  FF0846 :                     ; --------------------------------------------------------
(1)  920/  FF0846 :                     ; Sets a new DMA transfer task to the Blast list
(1)  921/  FF0846 :                     ;
(1)  922/  FF0846 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  923/  FF0846 :                     ;
(1)  924/  FF0846 :                     ; d0 | LONG - Art data
(1)  925/  FF0846 :                     ; d1 | WORD - VRAM location
(1)  926/  FF0846 :                     ; d2 | WORD - Size
(1)  927/  FF0846 :                     ;
(1)  928/  FF0846 :                     ; Uses:
(1)  929/  FF0846 :                     ; d6-d7,a6
(1)  930/  FF0846 :                     ; --------------------------------------------------------
(1)  931/  FF0846 :                     
(1)  932/  FF0846 :                     Video_DmaSet:
(1)  933/  FF0846 : 31FC 0001 A5F2      		move.w	#1,(RAM_VdpDmaMod).w
(1)  934/  FF084C : 4DF8 A390           		lea	(RAM_VdpDmaList).w,a6
(1)  935/  FF0850 : 3E38 A5F0           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  936/  FF0854 : DCC7                		adda	d7,a6
(1)  937/  FF0856 : DE7C 000E           		add.w	#7*2,d7
(1)  938/  FF085A : 31C7 A5F0           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  939/  FF085E : 3E02                		move.w	d2,d7			; Length
(1)  940/  FF0860 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  941/  FF0866 : E24F                		lsr.w	#1,d7
(1)  942/  FF0868 : 1C07                		move.b	d7,d6
(1)  943/  FF086A : 4846                		swap	d6
(1)  944/  FF086C : E04F                		lsr.w	#8,d7
(1)  945/  FF086E : 1C07                		move.b	d7,d6
(1)  946/  FF0870 : 4846                		swap	d6
(1)  947/  FF0872 : 2CC6                		move.l	d6,(a6)+
(1)  948/  FF0874 : 2E00                		move.l	d0,d7			; Source
(1)  949/  FF0876 : E28F                  		lsr.l	#1,d7
(1)  950/  FF0878 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1)  951/  FF087E : 1C07                 		move.b	d7,d6
(1)  952/  FF0880 : E08F                 		lsr.l	#8,d7
(1)  953/  FF0882 : 4846                 		swap	d6
(1)  954/  FF0884 : 1C07                 		move.b	d7,d6
(1)  955/  FF0886 : 2CC6                 		move.l	d6,(a6)+
(1)  956/  FF0888 : 3C3C 9700            		move.w	#$9700,d6
(1)  957/  FF088C : E08F                 		lsr.l	#8,d7
(1)  958/  FF088E : 1C07                 		move.b	d7,d6
(1)  959/  FF0890 : 3CC6                 		move.w	d6,(a6)+
(1)  960/  FF0892 : 3E01                		move.w	d1,d7			; Destination
(1)  961/  FF0894 :                     ; 		and.w	#$7FF,d7
(1)  962/  FF0894 :                     ; 		lsl.w	#5,d7
(1)  963/  FF0894 : 3C07                		move.w	d7,d6
(1)  964/  FF0896 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1)  965/  FF089C : 0047 4000           		ori.w	#$4000,d7
(1)  966/  FF08A0 : E04E                		lsr.w	#8,d6
(1)  967/  FF08A2 : EC4E                		lsr.w	#6,d6
(1)  968/  FF08A4 : 0246 0003           		andi.w	#%11,d6
(1)  969/  FF08A8 : 0046 0080           		ori.w	#$80,d6
(1)  970/  FF08AC : 3CC7                		move.w	d7,(a6)+
(1)  971/  FF08AE : 3CC6                		move.w	d6,(a6)+
(1)  972/  FF08B0 : 31FC 0000 A5F2      		move.w	#0,(RAM_VdpDmaMod).w
(1)  973/  FF08B6 : 4E75                		rts
(1)  974/  FF08B8 :                     
(1)  975/  FF08B8 :                     ; --------------------------------------------------------
(1)  976/  FF08B8 :                     ; Load graphics using DMA, direct
(1)  977/  FF08B8 :                     ;
(1)  978/  FF08B8 :                     ; d0 | LONG - Art data
(1)  979/  FF08B8 :                     ; d1 | WORD - VRAM location
(1)  980/  FF08B8 :                     ; d2 | WORD - Size
(1)  981/  FF08B8 :                     ;
(1)  982/  FF08B8 :                     ; *** For faster transfers call this during VBlank ***
(1)  983/  FF08B8 :                     ;
(1)  984/  FF08B8 :                     ; Uses:
(1)  985/  FF08B8 :                     ; d5-d7,a4-a6
(1)  986/  FF08B8 :                     ; --------------------------------------------------------
(1)  987/  FF08B8 :                     
(1)  988/  FF08B8 :                     Video_LoadArt:
(1)  989/  FF08B8 : 40E7                		move.w	sr,-(sp)
(1)  990/  FF08BA : 007C 0700           		or	#$700,sr
(1)  991/  FF08BE : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  992/  FF08C4 : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1)  993/  FF08C8 : 1C38 A60B           		move.b	(RAM_VdpRegs+1),d6
(1)  994/  FF08CC : 08C6 0004           		bset	#bitDmaEnbl,d6
(1)  995/  FF08D0 : 3886                		move.w	d6,(a4)
(1)  996/  FF08D2 : 3C02                		move.w	d2,d6			; Length
(1)  997/  FF08D4 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1)  998/  FF08DA : E24E                		lsr.w	#1,d6
(1)  999/  FF08DC : 1A06                		move.b	d6,d5
(1) 1000/  FF08DE : 4845                		swap	d5
(1) 1001/  FF08E0 : E04E                		lsr.w	#8,d6
(1) 1002/  FF08E2 : 1A06                		move.b	d6,d5
(1) 1003/  FF08E4 : 4845                		swap	d5
(1) 1004/  FF08E6 : 2885                		move.l	d5,(a4)
(1) 1005/  FF08E8 : 2C00                		move.l	d0,d6			; Source
(1) 1006/  FF08EA : E28E                  		lsr.l	#1,d6
(1) 1007/  FF08EC : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1008/  FF08F2 : 1A06                 		move.b	d6,d5
(1) 1009/  FF08F4 : E08E                 		lsr.l	#8,d6
(1) 1010/  FF08F6 : 4845                 		swap	d5
(1) 1011/  FF08F8 : 1A06                 		move.b	d6,d5
(1) 1012/  FF08FA : 2885                 		move.l	d5,(a4)
(1) 1013/  FF08FC : 3A3C 9700            		move.w	#$9700,d5
(1) 1014/  FF0900 : E08E                 		lsr.l	#8,d6
(1) 1015/  FF0902 : 1A06                 		move.b	d6,d5
(1) 1016/  FF0904 : 3885                 		move.w	d5,(a4)
(1) 1017/  FF0906 : 3C01                		move.w	d1,d6			; Destination
(1) 1018/  FF0908 :                     ; 		and.w	#$7FF,d6
(1) 1019/  FF0908 :                     ; 		lsl.w	#5,d6
(1) 1020/  FF0908 : 3A06                		move.w	d6,d5
(1) 1021/  FF090A : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1022/  FF0910 : 0046 4000           		ori.w	#$4000,d6
(1) 1023/  FF0914 :                     
(1) 1024/  FF0914 : E04D                		lsr.w	#8,d5
(1) 1025/  FF0916 : EC4D                		lsr.w	#6,d5
(1) 1026/  FF0918 : 0245 0003           		andi.w	#%11,d5
(1) 1027/  FF091C : 0045 0080           		ori.w	#$80,d5
(1) 1028/  FF0920 : 2E00                		move.l	d0,d7
(1) 1029/  FF0922 : 4847                		swap	d7
(1) 1030/  FF0924 : E04F                		lsr.w	#8,d7
(1) 1031/  FF0926 : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1032/  FF092A : 672A                		beq.s	.from_ram
(1) 1033/  FF092C : 6100 F806           		bsr	Sound_DMA_Pause
(1) 1034/  FF0930 : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl).l	; Set RV=1
(1) 1035/  FF0938 : 3F05                 		move.w	d5,-(sp)
(1) 1036/  FF093A : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1037/  FF093C : 389F                		move.w	(sp)+,(a4)			; *** Second write, CPU freezes until it DMA ends
(1) 1038/  FF093E : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl).l	; Set RV=0
(1) 1039/  FF0946 : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1040/  FF094A : 1C38 A60B           		move.b	(RAM_VdpRegs+1),d6
(1) 1041/  FF094E : 3886                		move.w	d6,(a4)
(1) 1042/  FF0950 : 46DF                		move.w	(sp)+,sr
(1) 1043/  FF0952 : 6000 F838           		bra	Sound_DMA_Resume
(1) 1044/  FF0956 :                     
(1) 1045/  FF0956 :                     ; TODO: check if Source RAM transfers are safe without turining off Z80
(1) 1046/  FF0956 :                     .from_ram:
(1) 1047/  FF0956 : 3887                		move.w	d7,(a4)
(1) 1048/  FF0958 : 3F05                 		move.w	d5,-(sp)
(1) 1049/  FF095A : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1050/  FF095C : 3E3C 8100           		move.w	#$8100,d7
(1) 1051/  FF0960 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1) 1052/  FF0964 : 3887                		move.w	d7,(a4)
(1) 1053/  FF0966 : 46DF                		move.w	(sp)+,sr
(1) 1054/  FF0968 : 4E75                		rts
(1) 1055/  FF096A :                     
(1) 1056/  FF096A :                     ; ====================================================================
(1) 1057/  FF096A :                     ; ----------------------------------------------------------------
(1) 1058/  FF096A :                     ; 32X EXCLUSIVE Video routines
(1) 1059/  FF096A :                     ;
(1) 1060/  FF096A :                     ; After any use of these routines call System_MdMarsDreq
(1) 1061/  FF096A :                     ; to transfer the changes to the 32X side
(1) 1062/  FF096A :                     ; ----------------------------------------------------------------
(1) 1063/  FF096A :                     
(1) 1064/  FF096A :                     ; --------------------------------------------------------
(1) 1065/  FF096A :                     ; Video_MarsSetGfx
(1) 1066/  FF096A :                     ; --------------------------------------------------------
(1) 1067/  FF096A :                     
(1) 1068/  FF096A :                     Video_MarsSetGfx:
(1) 1069/  FF096A : 4847                		swap	d7
(1) 1070/  FF096C : 3E00                		move.w	d0,d7
(1) 1071/  FF096E : CE7C 003F           		and.w	#%00111111,d7
(1) 1072/  FF0972 : 08C7 0006           		bset	#6,d7
(1) 1073/  FF0976 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1) 1074/  FF097C : 4847                		swap	d7
(1) 1075/  FF097E : 0839 0006 00A1 512E .wait2:		btst	#6,(sysmars_reg+comm14).l
(1) 1076/  FF0986 : 66F6                		bne.s	.wait2
(1) 1077/  FF0988 : 4E75                		rts
(1) 1078/  FF098A :                     
(1) 1079/  FF098A :                     Video_MarsRedraw:
(1) 1080/  FF098A : 08F9 0006 00A1 512E 		bset	#6,(sysmars_reg+comm14).l	; Request REDRAW on Master
(1) 1081/  FF0992 : 0839 0006 00A1 512E .wait2:		btst	#6,(sysmars_reg+comm14).l	; and wait until it finishes
(1) 1082/  FF099A : 66F6                		bne.s	.wait2
(1) 1083/  FF099C : 4E75                		rts
(1) 1084/  FF099E :                     
(1) 1085/  FF099E :                     ; --------------------------------------------------------
(1) 1086/  FF099E :                     ; Video_LoadPal_Mars
(1) 1087/  FF099E :                     ;
(1) 1088/  FF099E :                     ; Load Indexed palette directly to Buffer
(1) 1089/  FF099E :                     ;
(1) 1090/  FF099E :                     ; d0 - Start at
(1) 1091/  FF099E :                     ; d1 - Number of colors
(1) 1092/  FF099E :                     ; d2 - Priority bit OFF/ON
(1) 1093/  FF099E :                     ; --------------------------------------------------------
(1) 1094/  FF099E :                     
(1) 1095/  FF099E :                     Video_PalTarget_Mars:
(1) 1096/  FF099E : 4DF8 A110           		lea	(RAM_MdMarsPalFd),a6
(1) 1097/  FF09A2 : 6004                		bra.s	vidMars_Pal
(1) 1098/  FF09A4 :                     Video_LoadPal_Mars:
(1) 1099/  FF09A4 : 4DF8 A880           		lea	(RAM_MdDreq+Dreq_Palette),a6
(1) 1100/  FF09A8 :                     vidMars_Pal:
(1) 1101/  FF09A8 : 2A48                		move.l	a0,a5
(1) 1102/  FF09AA : 7E00                		moveq	#0,d7
(1) 1103/  FF09AC : 3E00                		move.w	d0,d7
(1) 1104/  FF09AE : DE47                		add.w	d7,d7
(1) 1105/  FF09B0 : DCC7                		adda	d7,a6
(1) 1106/  FF09B2 : 3E01                		move.w	d1,d7
(1) 1107/  FF09B4 : 9E7C 0001           		sub.w	#1,d7
(1) 1108/  FF09B8 : 3C02                		move.w	d2,d6
(1) 1109/  FF09BA : CC7C 0001           		and.w	#1,d6
(1) 1110/  FF09BE : E25E                		ror.w	#1,d6
(1) 1111/  FF09C0 :                     .loop:
(1) 1112/  FF09C0 : 3A1D                		move.w	(a5)+,d5
(1) 1113/  FF09C2 : 8A46                		or.w	d6,d5
(1) 1114/  FF09C4 : 3CC5                		move.w	d5,(a6)+
(1) 1115/  FF09C6 : 51CF FFF8           		dbf	d7,.loop
(1) 1116/  FF09CA : 4E75                		rts
(1) 1117/  FF09CC :                     
(1) 1118/  FF09CC :                     ; --------------------------------------------------------
(1) 1119/  FF09CC :                     ; Video_MarsPalFade
(1) 1120/  FF09CC :                     ;
(1) 1121/  FF09CC :                     ; a0 - Palette data
(1) 1122/  FF09CC :                     ; d0 - Number of colors
(1) 1123/  FF09CC :                     ; d1 - Speed
(1) 1124/  FF09CC :                     ;
(1) 1125/  FF09CC :                     ; RAM_ReqFadeMars: (WORD)
(1) 1126/  FF09CC :                     ; $00 - No task (or finished)
(1) 1127/  FF09CC :                     ; $01 - Fade in
(1) 1128/  FF09CC :                     ; $02 - Fade out to black
(1) 1129/  FF09CC :                     ;
(1) 1130/  FF09CC :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1131/  FF09CC :                     ; --------------------------------------------------------
(1) 1132/  FF09CC :                     
(1) 1133/  FF09CC :                     ; TODO: luego ver que hago con el priority bit
(1) 1134/  FF09CC :                     
(1) 1135/  FF09CC :                     Video_MarsPalFade:
(1) 1136/  FF09CC : 3E38 A5FE           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1137/  FF09D0 : DE47                		add.w	d7,d7
(1) 1138/  FF09D2 : 3E3B 7006           		move.w	.fade_list(pc,d7.w),d7
(1) 1139/  FF09D6 : 4EFB 7002           		jmp	.fade_list(pc,d7.w)
(1) 1140/  FF09DA :                     
(1) 1141/  FF09DA :                     ; --------------------------------------------
(1) 1142/  FF09DA :                     
(1) 1143/  FF09DA :                     .fade_list:
(1) 1144/  FF09DA : 0006                		dc.w .fade_done-.fade_list
(1) 1145/  FF09DC : 0008                		dc.w .fade_in-.fade_list
(1) 1146/  FF09DE : 00AC                		dc.w .fade_out-.fade_list
(1) 1147/  FF09E0 :                     
(1) 1148/  FF09E0 :                     ; --------------------------------------------
(1) 1149/  FF09E0 :                     ; No fade or finished.
(1) 1150/  FF09E0 :                     ; --------------------------------------------
(1) 1151/  FF09E0 :                     
(1) 1152/  FF09E0 :                     .fade_done:
(1) 1153/  FF09E0 : 4E75                		rts
(1) 1154/  FF09E2 :                     
(1) 1155/  FF09E2 :                     ; --------------------------------------------
(1) 1156/  FF09E2 :                     ; Fade in
(1) 1157/  FF09E2 :                     ; --------------------------------------------
(1) 1158/  FF09E2 :                     
(1) 1159/  FF09E2 :                     .fade_in:
(1) 1160/  FF09E2 : 4DF8 A110           		lea	(RAM_MdMarsPalFd),a6
(1) 1161/  FF09E6 : 4BF8 A880           		lea	(RAM_MdDreq+Dreq_Palette),a5
(1) 1162/  FF09EA : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1163/  FF09EE : 3238 A600           		move.w	(RAM_FadeMarsSpd).w,d1		; Speed
(1) 1164/  FF09F2 : 3C00                		move.w	d0,d6
(1) 1165/  FF09F4 : 4846                		swap	d6
(1) 1166/  FF09F6 : 907C 0001           		sub.w	#1,d0
(1) 1167/  FF09FA :                     .nxt_pal:
(1) 1168/  FF09FA : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1169/  FF09FC : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1170/  FF09FE : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1171/  FF0A00 : 3607                		move.w	d7,d3		; RED
(1) 1172/  FF0A02 : 3806                		move.w	d6,d4
(1) 1173/  FF0A04 : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 1174/  FF0A08 : C87C 001F           		and.w	#%0000000000011111,d4
(1) 1175/  FF0A0C : C67C 001F           		and.w	#%0000000000011111,d3
(1) 1176/  FF0A10 : D841                		add.w	d1,d4
(1) 1177/  FF0A12 : B843                		cmp.w	d3,d4
(1) 1178/  FF0A14 : 6506                		bcs.s	.no_red
(1) 1179/  FF0A16 : 3803                		move.w	d3,d4
(1) 1180/  FF0A18 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1181/  FF0A1C :                     .no_red:
(1) 1182/  FF0A1C : 8C44                		or.w	d4,d6
(1) 1183/  FF0A1E : EB49                		lsl.w	#5,d1
(1) 1184/  FF0A20 : 3607                		move.w	d7,d3		; GREEN
(1) 1185/  FF0A22 : 3806                		move.w	d6,d4
(1) 1186/  FF0A24 : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 1187/  FF0A28 : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 1188/  FF0A2C : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 1189/  FF0A30 : D841                		add.w	d1,d4
(1) 1190/  FF0A32 : B843                		cmp.w	d3,d4
(1) 1191/  FF0A34 : 6506                		bcs.s	.no_grn
(1) 1192/  FF0A36 : 3803                		move.w	d3,d4
(1) 1193/  FF0A38 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1194/  FF0A3C :                     .no_grn:
(1) 1195/  FF0A3C : 8C44                		or.w	d4,d6
(1) 1196/  FF0A3E : EB49                		lsl.w	#5,d1
(1) 1197/  FF0A40 : 3607                		move.w	d7,d3		; BLUE
(1) 1198/  FF0A42 : 3806                		move.w	d6,d4
(1) 1199/  FF0A44 : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 1200/  FF0A48 : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 1201/  FF0A4C : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 1202/  FF0A50 : D841                		add.w	d1,d4
(1) 1203/  FF0A52 : B843                		cmp.w	d3,d4
(1) 1204/  FF0A54 : 6506                		bcs.s	.no_blu
(1) 1205/  FF0A56 : 3803                		move.w	d3,d4
(1) 1206/  FF0A58 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1207/  FF0A5C :                     .no_blu:
(1) 1208/  FF0A5C : 8C44                		or.w	d4,d6
(1) 1209/  FF0A5E : E049                		lsr.w	#8,d1
(1) 1210/  FF0A60 : E449                		lsr.w	#2,d1
(1) 1211/  FF0A62 : 3AC6                		move.w	d6,(a5)+
(1) 1212/  FF0A64 : DCFC 0002           		adda	#2,a6
(1) 1213/  FF0A68 : B47C 0007           		cmp.w	#%111,d2
(1) 1214/  FF0A6C : 6608                		bne.s	.no_fnsh
(1) 1215/  FF0A6E : 4846                		swap	d6
(1) 1216/  FF0A70 : 9C7C 0001           		sub.w	#1,d6
(1) 1217/  FF0A74 : 4846                		swap	d6
(1) 1218/  FF0A76 :                     .no_fnsh:
(1) 1219/  FF0A76 : 51C8 FF82           		dbf	d0,.nxt_pal
(1) 1220/  FF0A7A : 4846                		swap	d6
(1) 1221/  FF0A7C : 4A46                		tst.w	d6
(1) 1222/  FF0A7E : 6604                		bne.s	.no_move
(1) 1223/  FF0A80 : 4278 A5FE           		clr.w	(RAM_FadeMarsReq).w
(1) 1224/  FF0A84 :                     .no_move:
(1) 1225/  FF0A84 : 4E75                		rts
(1) 1226/  FF0A86 :                     
(1) 1227/  FF0A86 :                     ; --------------------------------------------
(1) 1228/  FF0A86 :                     ; Fade out
(1) 1229/  FF0A86 :                     ; --------------------------------------------
(1) 1230/  FF0A86 :                     
(1) 1231/  FF0A86 :                     .fade_out:
(1) 1232/  FF0A86 : 4DF8 A880           		lea	(RAM_MdDreq+Dreq_Palette),a6
(1) 1233/  FF0A8A : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1234/  FF0A8E : 3238 A600           		move.w	(RAM_FadeMarsSpd).w,d1		; Speed
(1) 1235/  FF0A92 : 3C00                		move.w	d0,d6
(1) 1236/  FF0A94 : 4846                		swap	d6
(1) 1237/  FF0A96 : 907C 0001           		sub.w	#1,d0
(1) 1238/  FF0A9A :                     .nxt_pal_o:
(1) 1239/  FF0A9A : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1240/  FF0A9C : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1241/  FF0A9E : 3C07                		move.w	d7,d6
(1) 1242/  FF0AA0 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 1243/  FF0AA4 : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 1244/  FF0AA8 : 9C41                		sub.w	d1,d6
(1) 1245/  FF0AAA : 6A06                		bpl.s	.no_red_o
(1) 1246/  FF0AAC : 4246                		clr.w	d6
(1) 1247/  FF0AAE : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1248/  FF0AB2 :                     .no_red_o:
(1) 1249/  FF0AB2 : 8E46                		or.w	d6,d7
(1) 1250/  FF0AB4 : EB49                		lsl.w	#5,d1
(1) 1251/  FF0AB6 : 3C07                		move.w	d7,d6
(1) 1252/  FF0AB8 : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 1253/  FF0ABC : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 1254/  FF0AC0 : 9C41                		sub.w	d1,d6
(1) 1255/  FF0AC2 : 6A06                		bpl.s	.no_grn_o
(1) 1256/  FF0AC4 : 4246                		clr.w	d6
(1) 1257/  FF0AC6 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1258/  FF0ACA :                     .no_grn_o:
(1) 1259/  FF0ACA : 8E46                		or.w	d6,d7
(1) 1260/  FF0ACC : EB49                		lsl.w	#5,d1
(1) 1261/  FF0ACE : 3C07                		move.w	d7,d6
(1) 1262/  FF0AD0 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 1263/  FF0AD4 : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 1264/  FF0AD8 : 9C41                		sub.w	d1,d6
(1) 1265/  FF0ADA : 6A06                		bpl.s	.no_blu_o
(1) 1266/  FF0ADC : 4246                		clr.w	d6
(1) 1267/  FF0ADE : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1268/  FF0AE2 :                     .no_blu_o:
(1) 1269/  FF0AE2 : 8E46                		or.w	d6,d7
(1) 1270/  FF0AE4 : E049                		lsr.w	#8,d1
(1) 1271/  FF0AE6 : E449                		lsr.w	#2,d1
(1) 1272/  FF0AE8 : 3CC7                		move.w	d7,(a6)+
(1) 1273/  FF0AEA : B47C 0007           		cmp.w	#%111,d2
(1) 1274/  FF0AEE : 6608                		bne.s	.no_fnsh_o
(1) 1275/  FF0AF0 : 4846                		swap	d6
(1) 1276/  FF0AF2 : 9C7C 0001           		sub.w	#1,d6
(1) 1277/  FF0AF6 : 4846                		swap	d6
(1) 1278/  FF0AF8 :                     .no_fnsh_o:
(1) 1279/  FF0AF8 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1280/  FF0AFC : 4846                		swap	d6
(1) 1281/  FF0AFE : 4A46                		tst.w	d6
(1) 1282/  FF0B00 : 6604                		bne.s	.no_move_o
(1) 1283/  FF0B02 : 4278 A5FE           		clr.w	(RAM_FadeMarsReq).w
(1) 1284/  FF0B06 :                     .no_move_o:
(1) 1285/  FF0B06 : 4E75                		rts
(1) 1286/  FF0B08 :                     
(1) 1287/  FF0B08 :                     ; ====================================================================
(1) 1288/  FF0B08 :                     ; --------------------------------------------------------
(1) 1289/  FF0B08 :                     ; Video data
(1) 1290/  FF0B08 :                     ; --------------------------------------------------------
(1) 1291/  FF0B08 :                     
(1) 1292/  FF0B08 :                     list_vdpregs:
(1) 1293/  FF0B08 : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1) 1294/  FF0B09 : 44                  		dc.b $44			; Display ON, VBlank int off
(1) 1295/  FF0B0A : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1) 1296/  FF0B0B : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1) 1297/  FF0B0C : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1) 1298/  FF0B0D : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1) 1299/  FF0B0E : 00                  		dc.b $00			; Unused
(1) 1300/  FF0B0F : 00                  		dc.b $00			; Background color: 0
(1) 1301/  FF0B10 : 00                  		dc.b $00			; Unused
(1) 1302/  FF0B11 : 00                  		dc.b $00			; Unused
(1) 1303/  FF0B12 : 00                  		dc.b $00			; HInt value
(1) 1304/  FF0B13 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1) 1305/  FF0B14 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1) 1306/  FF0B15 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1) 1307/  FF0B16 : 00                  		dc.b $00			; Unused
(1) 1308/  FF0B17 : 02                  		dc.b $02			; VDP Auto increment by $02
(1) 1309/  FF0B18 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1) 1310/  FF0B19 : 00                  		dc.b $00
(1) 1311/  FF0B1A : 00                  		dc.b $00
(1) 1312/  FF0B1B :                     		align 2
(1) 1313/  FF0B1C : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1) 1314/  FF0B2C : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1) 1315/  FF0B3C :                     ASCII_PAL_e:
(1) 1316/  FF0B3C :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1) 1317/  FF1B3C :                     ASCII_FONT_e:
(1) 1318/  FF1B3C :                     		align 2
(1) 1319/  FF1B3C :                     
      37/  FF1B3C :                     		include	"system/md/system.asm"
(1)    1/  FF1B3C :                     ; ====================================================================
(1)    2/  FF1B3C :                     ; ----------------------------------------------------------------
(1)    3/  FF1B3C :                     ; System
(1)    4/  FF1B3C :                     ; ----------------------------------------------------------------
(1)    5/  FF1B3C :                     
(1)    6/  FF1B3C :                     ; --------------------------------------------------------
(1)    7/  FF1B3C :                     ; Init System
(1)    8/  FF1B3C :                     ; 
(1)    9/  FF1B3C :                     ; Uses:
(1)   10/  FF1B3C :                     ; a0-a2,d0-d1
(1)   11/  FF1B3C :                     ; --------------------------------------------------------
(1)   12/  FF1B3C :                     
(1)   13/  FF1B3C :                     System_Init:
(1)   14/  FF1B3C : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   15/  FF1B40 : 40E7                		move.w	sr,-(sp)
(1)   16/  FF1B42 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   17/  FF1B4A :                     .wait:
(1)   18/  FF1B4A : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   19/  FF1B52 : 66F6                		bne.s	.wait
(1)   20/  FF1B54 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   21/  FF1B56 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   22/  FF1B5C : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   23/  FF1B62 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   24/  FF1B68 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   25/  FF1B70 : 41F8 A622           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   26/  FF1B74 : 323C 0010           		move.w	#sizeof_input-1/2,d1
(1)   27/  FF1B78 : 7000                		moveq	#0,d0
(1)   28/  FF1B7A :                     .clrinput:
(1)   29/  FF1B7A : 30FC 0000           		move.w	#0,(a0)+
(1)   30/  FF1B7E : 51C9 FFFA           		dbf	d1,.clrinput
(1)   31/  FF1B82 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   32/  FF1B86 : 33C0 FFFF A86E       		move.w	d0,(RAM_MdMarsVInt).l
(1)   33/  FF1B8C : 33C0 FFFF A874      		move.w	d0,(RAM_MdMarsHInt).l
(1)   34/  FF1B92 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)   35/  FF1B98 : 223C 9511 6102      		move.l	#$95116102,d1
(1)   36/  FF1B9E : 23C0 FFFF A862      		move.l	d0,(RAM_SysRandVal).l
(1)   37/  FF1BA4 : 23C1 FFFF A866      		move.l	d1,(RAM_SysRandSeed).l
(1)   38/  FF1BAA : 203C 00FF 2008      		move.l	#VInt_Default,d0	; Set default ints
(1)   39/  FF1BB0 : 223C 00FF 2022      		move.l	#Hint_Default,d1
(1)   40/  FF1BB6 : 6100 0312           		bsr	System_SetInts
(1)   41/  FF1BBA : 46DF                		move.w	(sp)+,sr
(1)   42/  FF1BBC : 4E75                		rts
(1)   43/  FF1BBE :                     
(1)   44/  FF1BBE :                     ; ====================================================================
(1)   45/  FF1BBE :                     ; --------------------------------------------------------
(1)   46/  FF1BBE :                     ; System_Input
(1)   47/  FF1BBE :                     ;
(1)   48/  FF1BBE :                     ; CALL THIS ON VBLANK ONLY
(1)   49/  FF1BBE :                     ; 
(1)   50/  FF1BBE :                     ; Uses:
(1)   51/  FF1BBE :                     ; d4-d6,a4-a6
(1)   52/  FF1BBE :                     ; --------------------------------------------------------
(1)   53/  FF1BBE :                     
(1)   54/  FF1BBE :                     System_Input:
(1)   55/  FF1BBE :                     ; 		move.w	#$0100,(z80_bus).l
(1)   56/  FF1BBE :                     ; .wait:
(1)   57/  FF1BBE :                     ; 		btst	#0,(z80_bus).l
(1)   58/  FF1BBE :                     ; 		bne.s	.wait
(1)   59/  FF1BBE : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; BASE Genesis Input regs area
(1)   60/  FF1BC4 : 4DF8 A622           		lea	(RAM_InputData),a6
(1)   61/  FF1BC8 : 610C                		bsr.s	.this_one
(1)   62/  FF1BCA : DAFC 0002           		adda	#2,a5
(1)   63/  FF1BCE : DCFC 0010           		adda	#sizeof_input,a6
(1)   64/  FF1BD2 : 6102                		bsr.s	.this_one
(1)   65/  FF1BD4 :                     ; 		move.w	#0,(z80_bus).l
(1)   66/  FF1BD4 : 4E75                		rts
(1)   67/  FF1BD6 :                     
(1)   68/  FF1BD6 :                     ; --------------------------------------------------------	
(1)   69/  FF1BD6 :                     ; Read port
(1)   70/  FF1BD6 :                     ; 
(1)   71/  FF1BD6 :                     ; a5 - Current port
(1)   72/  FF1BD6 :                     ; a6 - Output data
(1)   73/  FF1BD6 :                     ; --------------------------------------------------------
(1)   74/  FF1BD6 :                     
(1)   75/  FF1BD6 :                     .this_one:
(1)   76/  FF1BD6 : 6100 0166           		bsr	.pick_id
(1)   77/  FF1BDA : 1C84                		move.b	d4,pad_id(a6)
(1)   78/  FF1BDC : B87C 000F           		cmp.w	#$F,d4
(1)   79/  FF1BE0 : 670E                		beq.s	.exit
(1)   80/  FF1BE2 : C87C 000F           		and.w	#$F,d4
(1)   81/  FF1BE6 : D844                		add.w	d4,d4
(1)   82/  FF1BE8 : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)   83/  FF1BEC : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)   84/  FF1BF0 :                     .exit:
(1)   85/  FF1BF0 : 422E 0001           		clr.b	pad_ver(a6)
(1)   86/  FF1BF4 : 4E75                		rts
(1)   87/  FF1BF6 :                     
(1)   88/  FF1BF6 :                     ; --------------------------------------------------------
(1)   89/  FF1BF6 :                     ; Grab ID
(1)   90/  FF1BF6 :                     ; --------------------------------------------------------
(1)   91/  FF1BF6 :                     
(1)   92/  FF1BF6 :                     .list:
(1)   93/  FF1BF6 : FFFA                		dc.w .exit-.list	; $00
(1)   94/  FF1BF8 : FFFA                		dc.w .exit-.list
(1)   95/  FF1BFA : FFFA                		dc.w .exit-.list
(1)   96/  FF1BFC : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)   97/  FF1BFE : FFFA                		dc.w .exit-.list	; $04
(1)   98/  FF1C00 : FFFA                		dc.w .exit-.list
(1)   99/  FF1C02 : FFFA                		dc.w .exit-.list
(1)  100/  FF1C04 : FFFA                		dc.w .exit-.list
(1)  101/  FF1C06 : FFFA                		dc.w .exit-.list	; $08
(1)  102/  FF1C08 : FFFA                		dc.w .exit-.list
(1)  103/  FF1C0A : FFFA                		dc.w .exit-.list
(1)  104/  FF1C0C : FFFA                		dc.w .exit-.list
(1)  105/  FF1C0E : FFFA                		dc.w .exit-.list	; $0C
(1)  106/  FF1C10 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  107/  FF1C12 : FFFA                		dc.w .exit-.list
(1)  108/  FF1C14 : FFFA                		dc.w .exit-.list
(1)  109/  FF1C16 :                     
(1)  110/  FF1C16 :                     ; --------------------------------------------------------
(1)  111/  FF1C16 :                     ; ID $03
(1)  112/  FF1C16 :                     ;
(1)  113/  FF1C16 :                     ; Mega Mouse
(1)  114/  FF1C16 :                     ; --------------------------------------------------------
(1)  115/  FF1C16 :                     
(1)  116/  FF1C16 :                     .id_03:
(1)  117/  FF1C16 : 1ABC 0020           		move.b	#$20,(a5)
(1)  118/  FF1C1A : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  119/  FF1C20 : 0815 0004           		btst	#4,(a5)
(1)  120/  FF1C24 : 6700 0094           		beq.w	.invalid
(1)  121/  FF1C28 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  122/  FF1C2C : 4E71                		nop
(1)  123/  FF1C2E : 4E71                		nop
(1)  124/  FF1C30 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  125/  FF1C34 : 4E71                		nop
(1)  126/  FF1C36 : 4E71                		nop
(1)  127/  FF1C38 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  128/  FF1C3C : 4E71                		nop
(1)  129/  FF1C3E : 4E71                		nop
(1)  130/  FF1C40 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  131/  FF1C42 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  132/  FF1C46 : 4E71                		nop
(1)  133/  FF1C48 : 4E71                		nop
(1)  134/  FF1C4A : 1E15                		move.b	(a5),d7
(1)  135/  FF1C4C : CE7C 000F            		and.w	#%1111,d7
(1)  136/  FF1C50 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  137/  FF1C54 : BF46                		eor.w	d7,d6
(1)  138/  FF1C56 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  139/  FF1C5A : CC47                		and.w	d7,d6
(1)  140/  FF1C5C : 3D46 0004           		move.w	d6,on_press(a6)
(1)  141/  FF1C60 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  142/  FF1C64 : 4E71                		nop
(1)  143/  FF1C66 : 4E71                		nop
(1)  144/  FF1C68 : 1E15                		move.b	(a5),d7
(1)  145/  FF1C6A : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  146/  FF1C6E : CE7C 000F           		and.w	#%1111,d7
(1)  147/  FF1C72 : E94F                		lsl.w	#4,d7
(1)  148/  FF1C74 : 4E71                		nop
(1)  149/  FF1C76 : 1C15                		move.b	(a5),d6
(1)  150/  FF1C78 : CC7C 000F           		and.w	#%1111,d6
(1)  151/  FF1C7C : 8E46                		or.w	d6,d7
(1)  152/  FF1C7E : 0805 0000           		btst    #0,d5
(1)  153/  FF1C82 : 6704                		beq.s	.x_neg
(1)  154/  FF1C84 : 4407                		neg.b	d7
(1)  155/  FF1C86 : 4447                		neg.w	d7
(1)  156/  FF1C88 :                     .x_neg:
(1)  157/  FF1C88 : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  158/  FF1C8C : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  159/  FF1C90 : 4E71                		nop
(1)  160/  FF1C92 : 4E71                		nop
(1)  161/  FF1C94 : 1E15                		move.b	(a5),d7
(1)  162/  FF1C96 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  163/  FF1C9A : CE7C 000F           		and.w	#%1111,d7
(1)  164/  FF1C9E : E94F                		lsl.w	#4,d7
(1)  165/  FF1CA0 : 4E71                		nop
(1)  166/  FF1CA2 : 1C15                		move.b	(a5),d6
(1)  167/  FF1CA4 : CC7C 000F           		and.w	#%1111,d6
(1)  168/  FF1CA8 : 8E46                		or.w	d6,d7
(1)  169/  FF1CAA : 0805 0001           		btst    #1,d5
(1)  170/  FF1CAE : 6704                		beq.s	.y_neg
(1)  171/  FF1CB0 : 4407                		neg.b	d7
(1)  172/  FF1CB2 : 4447                		neg.w	d7
(1)  173/  FF1CB4 :                     .y_neg:
(1)  174/  FF1CB4 : 4447                		neg.w	d7		; Reverse Y
(1)  175/  FF1CB6 : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  176/  FF1CBA :                     
(1)  177/  FF1CBA :                     .invalid:
(1)  178/  FF1CBA : 1ABC 0060           		move.b	#$60,(a5)
(1)  179/  FF1CBE : 4E75                		rts
(1)  180/  FF1CC0 :                     
(1)  181/  FF1CC0 :                     ; --------------------------------------------------------
(1)  182/  FF1CC0 :                     ; ID $0D
(1)  183/  FF1CC0 :                     ; 
(1)  184/  FF1CC0 :                     ; Normal controller, Old or New
(1)  185/  FF1CC0 :                     ; --------------------------------------------------------
(1)  186/  FF1CC0 :                     
(1)  187/  FF1CC0 :                     .id_0D:
(1)  188/  FF1CC0 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  189/  FF1CC4 : 4E71                		nop
(1)  190/  FF1CC6 : 4E71                		nop
(1)  191/  FF1CC8 : 1A15                		move.b	(a5),d5
(1)  192/  FF1CCA : CA7C 003F           		and.w	#%00111111,d5
(1)  193/  FF1CCE : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  194/  FF1CD2 : 4E71                		nop
(1)  195/  FF1CD4 : 4E71                		nop
(1)  196/  FF1CD6 : 1815                		move.b	(a5),d4
(1)  197/  FF1CD8 : E54C                		lsl.w	#2,d4
(1)  198/  FF1CDA : C87C 00C0           		and.w	#%11000000,d4
(1)  199/  FF1CDE : 8845                		or.w	d5,d4
(1)  200/  FF1CE0 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  201/  FF1CE4 : 4644                		not.w	d4
(1)  202/  FF1CE6 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  203/  FF1CEA : B905                		eor.b	d4,d5
(1)  204/  FF1CEC : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  205/  FF1CF0 : 1D44 0003           		move.b	d4,on_hold+1(a6)
(1)  206/  FF1CF4 : CA04                		and.b	d4,d5
(1)  207/  FF1CF6 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  208/  FF1CFA : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds
(1)  209/  FF1CFE : 4E71                		nop
(1)  210/  FF1D00 : 4E71                		nop
(1)  211/  FF1D02 : 1815                		move.b	(a5),d4		; Grab ??|MXYZ
(1)  212/  FF1D04 : 1ABC 0000            		move.b	#$00,(a5)
(1)  213/  FF1D08 : 4E71                  		nop
(1)  214/  FF1D0A : 4E71                  		nop
(1)  215/  FF1D0C : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  216/  FF1D0E : 1ABC 0040            		move.b	#$40,(a5)
(1)  217/  FF1D12 : 4E71                 		nop
(1)  218/  FF1D14 : 4E71                 		nop
(1)  219/  FF1D16 : CC7C 000F           		and.w	#$F,d6
(1)  220/  FF1D1A : E44E                		lsr.w	#2,d6
(1)  221/  FF1D1C : CC7C 0001           		and.w	#1,d6
(1)  222/  FF1D20 : 6716                		beq.s	.oldpad
(1)  223/  FF1D22 : 4604                		not.b	d4
(1)  224/  FF1D24 : C87C 000F            		and.w	#%1111,d4
(1)  225/  FF1D28 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  226/  FF1D2C : B905                		eor.b	d4,d5
(1)  227/  FF1D2E : 1D44 0002           		move.b	d4,on_hold(a6)
(1)  228/  FF1D32 : CA04                		and.b	d4,d5
(1)  229/  FF1D34 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  230/  FF1D38 :                     .oldpad:
(1)  231/  FF1D38 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  232/  FF1D3C : 4E75                		rts
(1)  233/  FF1D3E :                     		
(1)  234/  FF1D3E :                     ; --------------------------------------------------------
(1)  235/  FF1D3E :                     ; Grab ID
(1)  236/  FF1D3E :                     ; --------------------------------------------------------
(1)  237/  FF1D3E :                     
(1)  238/  FF1D3E :                     .pick_id:
(1)  239/  FF1D3E : 7800                		moveq	#0,d4
(1)  240/  FF1D40 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  241/  FF1D44 : 4E71                		nop
(1)  242/  FF1D46 : 4E71                		nop
(1)  243/  FF1D48 : 610A                		bsr	.read
(1)  244/  FF1D4A : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  245/  FF1D4E : 4E71                		nop
(1)  246/  FF1D50 : 4E71                		nop
(1)  247/  FF1D52 : D844                		add.w	d4,d4
(1)  248/  FF1D54 :                     .read:
(1)  249/  FF1D54 : 1A15                		move.b	(a5),d5
(1)  250/  FF1D56 : 1C05                		move.b	d5,d6
(1)  251/  FF1D58 : CC3C 000C           		and.b	#$C,d6
(1)  252/  FF1D5C : 6702                		beq.s	.step_1
(1)  253/  FF1D5E : 5244                		addq.w	#1,d4
(1)  254/  FF1D60 :                     .step_1:
(1)  255/  FF1D60 : D844                		add.w	d4,d4
(1)  256/  FF1D62 : 1C05                		move.b	d5,d6
(1)  257/  FF1D64 : CC7C 0003           		and.w	#3,d6
(1)  258/  FF1D68 : 6702                		beq.s	.step_2
(1)  259/  FF1D6A : 5244                		addq.w	#1,d4
(1)  260/  FF1D6C :                     .step_2:
(1)  261/  FF1D6C : 4E75                		rts
(1)  262/  FF1D6E :                     
(1)  263/  FF1D6E :                     ; --------------------------------------------------------
(1)  264/  FF1D6E :                     ; System_Random
(1)  265/  FF1D6E :                     ; 
(1)  266/  FF1D6E :                     ; Set random value
(1)  267/  FF1D6E :                     ; 
(1)  268/  FF1D6E :                     ; Output:
(1)  269/  FF1D6E :                     ; d0 | LONG
(1)  270/  FF1D6E :                     ; --------------------------------------------------------
(1)  271/  FF1D6E :                     
(1)  272/  FF1D6E :                     ; TODO: rewrite this
(1)  273/  FF1D6E :                     System_Random:
(1)  274/  FF1D6E : 2A38 A866           		move.l	(RAM_SysRandSeed),d5
(1)  275/  FF1D72 : 2838 A862           		move.l	(RAM_SysRandVal),d4
(1)  276/  FF1D76 : E39D                		rol.l	#1,d5
(1)  277/  FF1D78 : EAA4                		asr.l	d5,d4
(1)  278/  FF1D7A : D885                		add.l	d5,d4
(1)  279/  FF1D7C : 23C5 FFFF A866      		move.l	d5,(RAM_SysRandSeed).l
(1)  280/  FF1D82 : 23C4 FFFF A862      		move.l	d4,(RAM_SysRandVal).l
(1)  281/  FF1D88 : 2004                		move.l	d4,d0
(1)  282/  FF1D8A : 4E75                		rts
(1)  283/  FF1D8C :                     
(1)  284/  FF1D8C :                     ; --------------------------------------------------------
(1)  285/  FF1D8C :                     ; System_SineWave_Cos / System_SineWave
(1)  286/  FF1D8C :                     ;
(1)  287/  FF1D8C :                     ; Read sinewave value
(1)  288/  FF1D8C :                     ;
(1)  289/  FF1D8C :                     ; Input:
(1)  290/  FF1D8C :                     ; d0 | WORD - Tan
(1)  291/  FF1D8C :                     ; d1 | WORD - Multiply by
(1)  292/  FF1D8C :                     ;
(1)  293/  FF1D8C :                     ; Output:
(1)  294/  FF1D8C :                     ; d2 | LONG - Result (as 0000.0000)
(1)  295/  FF1D8C :                     ; --------------------------------------------------------
(1)  296/  FF1D8C :                     
(1)  297/  FF1D8C :                     System_SineWave_Cos:
(1)  298/  FF1D8C : 48A7 8000           		movem.w	d0,-(sp)
(1)  299/  FF1D90 : 7400                		moveq	#0,d2
(1)  300/  FF1D92 : D03C 0040           		add.b	#$40,d0
(1)  301/  FF1D96 : 1400                		move.b	d0,d2
(1)  302/  FF1D98 : E302                		asl.b	#1,d2
(1)  303/  FF1D9A : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  304/  FF1D9E : C4C1                		mulu.w	d1,d2
(1)  305/  FF1DA0 : 8000                		or.b	d0,d0
(1)  306/  FF1DA2 : 6A02                		bpl.s	.dont_neg
(1)  307/  FF1DA4 : 4482                		neg.l	d2
(1)  308/  FF1DA6 :                     .dont_neg:
(1)  309/  FF1DA6 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  310/  FF1DAA : 4E75                		rts
(1)  311/  FF1DAC :                     
(1)  312/  FF1DAC :                     System_SineWave:
(1)  313/  FF1DAC : 48A7 8000           		movem.w	d0,-(sp)
(1)  314/  FF1DB0 : C07C 007F           		and.w	#$7F,d0
(1)  315/  FF1DB4 : E340                		asl.w	#1,d0
(1)  316/  FF1DB6 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  317/  FF1DBA : C4C1                		mulu.w	d1,d2
(1)  318/  FF1DBC : 4C9F 0001           		movem.w	(sp)+,d0
(1)  319/  FF1DC0 : 5182                		subq.l	#8,d2
(1)  320/  FF1DC2 : 8000                		or.b	d0,d0
(1)  321/  FF1DC4 : 6A02                		bpl.s	.dont_neg
(1)  322/  FF1DC6 : 4482                		neg.l	d2
(1)  323/  FF1DC8 :                     .dont_neg:
(1)  324/  FF1DC8 : 4E75                		rts
(1)  325/  FF1DCA :                     
(1)  326/  FF1DCA : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  327/  FF1DE0 : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  328/  FF1DF4 : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  329/  FF1E08 : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  330/  FF1E1C : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  331/  FF1E30 : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  332/  FF1E44 : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  333/  FF1E56 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  334/  FF1E6A : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  335/  FF1E7E : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  336/  FF1E92 : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  337/  FF1EA6 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  338/  FF1EBA : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  339/  FF1ECA :                     
(1)  340/  FF1ECA :                     ; --------------------------------------------------------
(1)  341/  FF1ECA :                     ; System_SetInts
(1)  342/  FF1ECA :                     ;
(1)  343/  FF1ECA :                     ; Set new interrputs
(1)  344/  FF1ECA :                     ;
(1)  345/  FF1ECA :                     ; d0 | LONG - VBlank
(1)  346/  FF1ECA :                     ; d1 | LONG - HBlank
(1)  347/  FF1ECA :                     ;
(1)  348/  FF1ECA :                     ; Uses:
(1)  349/  FF1ECA :                     ; d4
(1)  350/  FF1ECA :                     ;
(1)  351/  FF1ECA :                     ; Notes:
(1)  352/  FF1ECA :                     ; Writing 0 or a negative number will skip change
(1)  353/  FF1ECA :                     ; to the interrupt pointer
(1)  354/  FF1ECA :                     ; --------------------------------------------------------
(1)  355/  FF1ECA :                     
(1)  356/  FF1ECA :                     System_SetInts:
(1)  357/  FF1ECA : 2800                		move.l	d0,d4
(1)  358/  FF1ECC : 670E                		beq.s	.novint
(1)  359/  FF1ECE : 6B0C                		bmi.s	.novint
(1)  360/  FF1ED0 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  361/  FF1ED6 : 23C4 FFFF A870       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  362/  FF1EDC :                     .novint:
(1)  363/  FF1EDC : 2801                		move.l	d1,d4
(1)  364/  FF1EDE : 670E                		beq.s	.nohint
(1)  365/  FF1EE0 : 6B0C                		bmi.s	.nohint
(1)  366/  FF1EE2 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  367/  FF1EE8 : 23C4 FFFF A876      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  368/  FF1EEE :                     .nohint:
(1)  369/  FF1EEE : 4E75                		rts
(1)  370/  FF1EF0 :                     
(1)  371/  FF1EF0 :                     ; --------------------------------------------------------
(1)  372/  FF1EF0 :                     ; System_SramInit
(1)  373/  FF1EF0 :                     ; 
(1)  374/  FF1EF0 :                     ; Init save data
(1)  375/  FF1EF0 :                     ; 
(1)  376/  FF1EF0 :                     ; Uses:
(1)  377/  FF1EF0 :                     ; a4,d4-d5
(1)  378/  FF1EF0 :                     ; --------------------------------------------------------
(1)  379/  FF1EF0 :                     
(1)  380/  FF1EF0 :                     ; TODO: Check if RV bit is needed here...
(1)  381/  FF1EF0 :                     System_SramInit:
(1)  382/  FF1EF0 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  383/  FF1EF8 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  384/  FF1EFE : 7800                		moveq	#0,d4
(1)  385/  FF1F00 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  386/  FF1F04 :                     .initsave:
(1)  387/  FF1F04 : 1884                		move.b	d4,(a4)
(1)  388/  FF1F06 : D8FC 0002           		adda	#2,a4
(1)  389/  FF1F0A : 51CD FFF8           		dbf	d5,.initsave
(1)  390/  FF1F0E : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  391/  FF1F16 : 4E75                		rts
(1)  392/  FF1F18 :                     
(1)  393/  FF1F18 :                     ; --------------------------------------------------------
(1)  394/  FF1F18 :                     ; System_VBlnk_Enter, System_VBlnk_Exit
(1)  395/  FF1F18 :                     ;
(1)  396/  FF1F18 :                     ; Call System_VBlank to wait for the next frame.
(1)  397/  FF1F18 :                     ; This will also update the control input and
(1)  398/  FF1F18 :                     ; do DMA transfers
(1)  399/  FF1F18 :                     ; --------------------------------------------------------
(1)  400/  FF1F18 :                     
(1)  401/  FF1F18 :                     System_VBlank:
(1)  402/  FF1F18 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  403/  FF1F1E : 0804 0003           		btst	#bitVint,d4
(1)  404/  FF1F22 : 67F4                		beq.s	System_VBlank
(1)  405/  FF1F24 : 6100 FC98           		bsr	System_Input		; Read inputs ASAP
(1)  406/  FF1F28 :                     
(1)  407/  FF1F28 :                     	; DMA'd Scroll and Palette
(1)  408/  FF1F28 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  409/  FF1F2E : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1)  410/  FF1F32 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  411/  FF1F36 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  412/  FF1F3A : 3C87                		move.w	d7,(a6)
(1)  413/  FF1F3C :                     ; 		bsr	Sound_DMA_Pause			; Don't need this.
(1)  414/  FF1F3C : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  415/  FF1F42 : 2CBC 96CD 95F0      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  416/  FF1F48 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  417/  FF1F4C : 3E3C 4000           		move.w	#$4000,d7
(1)  418/  FF1F50 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  419/  FF1F54 : 3C87                		move.w	d7,(a6)
(1)  420/  FF1F56 : 3C9F                		move.w	(sp)+,(a6)
(1)  421/  FF1F58 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  422/  FF1F5E : 2CBC 96CC 9510      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  423/  FF1F64 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  424/  FF1F68 : 3E3C 7C00           		move.w	#$7C00,d7
(1)  425/  FF1F6C : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  426/  FF1F70 : 3C87                		move.w	d7,(a6)
(1)  427/  FF1F72 : 3C9F                		move.w	(sp)+,(a6)
(1)  428/  FF1F74 : 2CBC 9401 9318      		move.l	#$94019318,(a6)
(1)  429/  FF1F7A : 2CBC 96CE 9518      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  430/  FF1F80 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  431/  FF1F84 : 3E3C 7800           		move.w	#$7800,d7
(1)  432/  FF1F88 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  433/  FF1F8C : 3C87                		move.w	d7,(a6)
(1)  434/  FF1F8E : 3C9F                		move.w	(sp)+,(a6)
(1)  435/  FF1F90 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  436/  FF1F96 : 2CBC 96D0 9548      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  437/  FF1F9C : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  438/  FF1FA0 : 3E3C C000           		move.w	#$C000,d7
(1)  439/  FF1FA4 : 3F3C 0080           		move.w	#$0000|$80,-(sp)		; Palette is transfered below so
(1)  440/  FF1FA8 : 3C87                		move.w	d7,(a6)				; those dots will not be shown
(1)  441/  FF1FAA : 3C9F                		move.w	(sp)+,(a6)			; on non-CRT displays
(1)  442/  FF1FAC :                     ; 		bsr	Sound_DMA_Resume		; Resume Z80 and SH2 direct
(1)  443/  FF1FAC : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1)  444/  FF1FB0 : 1E38 A60B           		move.b	(RAM_VdpRegs+1).w,d7
(1)  445/  FF1FB4 : 3C87                		move.w	d7,(a6)
(1)  446/  FF1FB6 :                     
(1)  447/  FF1FB6 :                     
(1)  448/  FF1FB6 : 6100 E820           		bsr	Video_DmaBlast		; DMA tasks
(1)  449/  FF1FBA : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    A606                
(1)  450/  FF1FC4 : 4E75                		rts
(1)  451/  FF1FC6 :                     
(1)  452/  FF1FC6 :                     System_VBlank_Exit:
(1)  453/  FF1FC6 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4
(1)  454/  FF1FCC : 0804 0003           		btst	#bitVint,d4
(1)  455/  FF1FD0 : 66F4                		bne.s	System_VBlank_Exit
(1)  456/  FF1FD2 : 4E75                		rts
(1)  457/  FF1FD4 :                     
(1)  458/  FF1FD4 :                     ; --------------------------------------------------------
(1)  459/  FF1FD4 :                     ; System_JumpRamCode
(1)  460/  FF1FD4 :                     ;
(1)  461/  FF1FD4 :                     ; Transfer user code to RAM and jump into it.
(1)  462/  FF1FD4 :                     ;
(1)  463/  FF1FD4 :                     ; Input:
(1)  464/  FF1FD4 :                     ; d0 - ROM pointer to code
(1)  465/  FF1FD4 :                     ; --------------------------------------------------------
(1)  466/  FF1FD4 :                     
(1)  467/  FF1FD4 :                     System_JumpRamCode:
(1)  468/  FF1FD4 : 80BC 0088 0000      		or.l	#$880000,d0
(1)  469/  FF1FDA : 2040                		move.l	d0,a0
(1)  470/  FF1FDC : 43F9 00FF 2092      		lea	(RAMCODE_USER),a1
(1)  471/  FF1FE2 : 3E3C 7FFF           		move.w	#$8000-1,d7
(1)  472/  FF1FE6 :                     .copyme2:
(1)  473/  FF1FE6 : 12D8                		move.b	(a0)+,(a1)+
(1)  474/  FF1FE8 : 51CF FFFC           		dbf	d7,.copyme2
(1)  475/  FF1FEC : 4EF9 00FF 2092      		jmp	(RAMCODE_USER).l
(1)  476/  FF1FF2 :                     
(1)  477/  FF1FF2 :                     ; --------------------------------------------------------
(1)  478/  FF1FF2 :                     ; Initialize current screen mode
(1)  479/  FF1FF2 :                     ; --------------------------------------------------------
(1)  480/  FF1FF2 :                     
(1)  481/  FF1FF2 :                     Mode_Init:
(1)  482/  FF1FF2 : 6100 E2C0           		bsr	Video_Clear
(1)  483/  FF1FF6 : 49F8 9000           		lea	(RAM_ModeBuff),a4
(1)  484/  FF1FFA : 3A3C 03FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  485/  FF1FFE : 7800                		moveq	#0,d4
(1)  486/  FF2000 :                     .clr:
(1)  487/  FF2000 : 38C4                		move.w	d4,(a4)+
(1)  488/  FF2002 : 51CD FFFC           		dbf	d5,.clr
(1)  489/  FF2006 : 4E75                		rts
(1)  490/  FF2008 :                     
(1)  491/  FF2008 :                     ; ====================================================================
(1)  492/  FF2008 :                     ; ----------------------------------------------------------------
(1)  493/  FF2008 :                     ; Default interrupts
(1)  494/  FF2008 :                     ; ----------------------------------------------------------------
(1)  495/  FF2008 :                     
(1)  496/  FF2008 :                     ; --------------------------------------------------------
(1)  497/  FF2008 :                     ; VBlank
(1)  498/  FF2008 :                     ; --------------------------------------------------------
(1)  499/  FF2008 :                     
(1)  500/  FF2008 :                     VInt_Default:
(1)  501/  FF2008 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  502/  FF200C : 6100 FBB0           		bsr	System_Input
(1)  503/  FF2010 : 6112                		bsr	System_MdMarsDreq
(1)  504/  FF2012 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    A606                
(1)  505/  FF201C : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  506/  FF2020 : 4E73                		rte
(1)  507/  FF2022 :                     
(1)  508/  FF2022 :                     ; --------------------------------------------------------
(1)  509/  FF2022 :                     ; HBlank
(1)  510/  FF2022 :                     ; --------------------------------------------------------
(1)  511/  FF2022 :                     
(1)  512/  FF2022 :                     HInt_Default:
(1)  513/  FF2022 : 4E73                		rte
(1)  514/  FF2024 :                     		
(1)  515/  FF2024 :                     ; ====================================================================
(1)  516/  FF2024 :                     ; --------------------------------------------------------
(1)  517/  FF2024 :                     ; System_MdMarsDreq
(1)  518/  FF2024 :                     ;
(1)  519/  FF2024 :                     ; Sends a small section of RAM from here to 32X
(1)  520/  FF2024 :                     ; for controlling things like the background or sprites
(1)  521/  FF2024 :                     ;
(1)  522/  FF2024 :                     ; CALL THIS OUTSIDE OF VBLANK, As this will try
(1)  523/  FF2024 :                     ; to syncronize with the SH2 to recieve the data
(1)  524/  FF2024 :                     ; on both VBlank(s) at the same time
(1)  525/  FF2024 :                     ; --------------------------------------------------------
(1)  526/  FF2024 :                     
(1)  527/  FF2024 :                     System_MdMarsDreq:
(1)  528/  FF2024 : 4DF8 A880           		lea	(RAM_MdDreq),a6
(1)  529/  FF2028 : 4BF9 00A1 5112      		lea	($A15112).l,a5
(1)  530/  FF202E : 3C3C 0400           		move.w	#MAX_MDDREQ/2,d6
(1)  531/  FF2032 : 40C7                		move.w	sr,d7
(1)  532/  FF2034 : 46FC 2700           		move.w	#$2700,sr
(1)  533/  FF2038 :                     .retry:
(1)  534/  FF2038 : 33C6 00A1 5110      		move.w	d6,(sysmars_reg+dreqlen).l
(1)  535/  FF203E : 08F9 0002 00A1 5107 		bset	#2,(sysmars_reg+dreqctl).l
(1)  536/  FF2046 : 08F9 0000 00A1 5103 		bset	#0,(sysmars_reg+standby).l
(1)  537/  FF204E : 0839 0000 00A1 5103 .wait_cmd:	btst	#0,(sysmars_reg+standby).l	; Request CMD to Master
(1)  538/  FF2056 : 66F6                		bne.s	.wait_cmd
(1)  539/  FF2058 :                     .wait_bit:
(1)  540/  FF2058 : 0839 0007 00A1 512E 		btst	#7,(sysmars_reg+comm14).l
(1)  541/  FF2060 : 67F6                		beq.s	.wait_bit
(1)  542/  FF2062 : 08B9 0007 00A1 512E 		bclr	#7,(sysmars_reg+comm14).l
(1)  543/  FF206A : 3A06                		move.w	d6,d5
(1)  544/  FF206C : E44D                		lsr.w	#2,d5
(1)  545/  FF206E : 9A7C 0001           		sub.w	#1,d5
(1)  546/  FF2072 : 3A9E                .l0:		move.w  (a6)+,(a5)		; From here the SH2 reads FIFO using DMA
(1)  547/  FF2074 : 3A9E                		move.w  (a6)+,(a5)		; First In, First Out
(1)  548/  FF2076 : 3A9E                		move.w  (a6)+,(a5)
(1)  549/  FF2078 : 3A9E                		move.w  (a6)+,(a5)
(1)  550/  FF207A : 082D 0007 0007      .l1:		btst	#7,dreqctl(a5)		; Got Full here?
(1)  551/  FF2080 : 66F8                		bne.s	.l1
(1)  552/  FF2082 : 51CD FFEE           		dbf	d5,.l0
(1)  553/  FF2086 : 082D 0002 0007      		btst	#2,dreqctl(a5)		; DMA got ok? (TODO: ver si todavia necesito esto)
(1)  554/  FF208C : 66AA                		bne	.retry
(1)  555/  FF208E : 46C7                		move.w	d7,sr
(1)  556/  FF2090 : 4E75                		rts
(1)  557/  FF2092 :                     
(1)  558/  FF2092 :                     ; ====================================================================
(1)  559/  FF2092 :                     ; ----------------------------------------------------------------
(1)  560/  FF2092 :                     ; System data
(1)  561/  FF2092 :                     ; ----------------------------------------------------------------
(1)  562/  FF2092 :                     
      38/  FF2092 :                     RAMCODE_USER:
      39/    29CA :                     		dephase
      40/    29CA :                     MdRamCode_end:
      41/    29CA :                     		align 2
      42/    29CA :                     
      43/    29CA :                     ; ----------------------------------------------------------------
      44/    29CA :                     ; Z80 code
      45/    29CA :                     ; Located at the 880000 area
      46/    29CA :                     ; ----------------------------------------------------------------
      47/    29CA :                     
      48/    29CA :                     		align 4
      49/    29CC :                     Z80_CODE:
      50/    29CC :                     		include "system/md/z_driver.asm"
(1)    1/    29CC :                     ; --------------------------------------------------------
(1)    2/    29CC :                     ; GEMA sound driver, inspired by GEMS (kinda)
(1)    3/    29CC :                     ;
(1)    4/    29CC :                     ; Two playable track slots: BGM(0) and SFX(1)
(1)    5/    29CC :                     ;
(1)    6/    29CC :                     ; Slot 1 can either overwrite chip channels or
(1)    7/    29CC :                     ; if possible grab unused slots
(1)    8/    29CC :                     ;
(1)    9/    29CC :                     ; WARNING: DAC sample playback has to be sync'd manually
(1)   10/    29CC :                     ; on every code change, sample rate is at the
(1)   11/    29CC :                     ; 18000hz range
(1)   12/    29CC :                     ; --------------------------------------------------------
(1)   13/    29CC :                     
(1)   14/    29CC :                     		cpu Z80			; Set Z80 here
(1)   15/       0 :                     		phase 0			; And set PC to 0
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; User settings
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : =12H                MAX_TRKCHN	equ 18		; Max internal tracker channels (4PSG + 6FM + 7PWM)
(1)   22/       0 : =FFFFFFFFFFF..      ZSET_WTUNE	equ -24		; Manual frequency adjustment for DAC WAVE playback
(1)   23/       0 : =0H                 ZSET_TESTME	equ 0		; ***TESTING*** Set to 1 to hear-test DAC playback
(1)   24/       0 :                     
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     ; Structs
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; NOTE: struct doesn't work here. use equs instead
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 :                     ; trkBuff struct
(1)   32/       0 :                     ; LIMIT: 20h (32) bytes
(1)   33/       0 : =0H                 trk_romBlk	equ 0		; 24-bit base block data
(1)   34/       0 : =3H                 trk_romPatt	equ 3		; 24-bit base patt data
(1)   35/       0 : =6H                 trk_romIns	equ 6		; 24-bit ROM instrument pointers
(1)   36/       0 : =9H                 trk_romPattRd	equ 9		; same but for reading
(1)   37/       0 : =CH                 trk_Read	equ 12		; Current track position (in cache)
(1)   38/       0 : =EH                 trk_Rows	equ 14		; Current track length
(1)   39/       0 : =10H                trk_Halfway	equ 16		; Only 00h or 80h
(1)   40/       0 : =11H                trk_currBlk	equ 17		; Current block
(1)   41/       0 : =12H                trk_setBlk	equ 18		; Start on this block
(1)   42/       0 : =13H                trk_status	equ 19		; %ERPB xxxx | E-enabled / R-Init|Restart track / P-refill-on-playback / B-use global beats
(1)   43/       0 : =14H                trk_tickTmr	equ 20		; Ticks timer
(1)   44/       0 : =15H                trk_tickSet	equ 21		; Ticks set for this track
(1)   45/       0 : =16H                trk_numChnls	equ 22		; Number of channels for this track slot (max: MAX_TRKCHN)
(1)   46/       0 : =17H                trk_sizeIns	equ 23		; Max instruments used
(1)   47/       0 : =18H                trk_rowPause	equ 24
(1)   48/       0 : =19H                trk_HdHalfway	equ 25		; Track heads reload byte
(1)   49/       0 : =1AH                trk_CachNotes	equ 26		; Track pattern buffer location (100h bytes)
(1)   50/       0 :                     ; trk_CachHeads	equ 28		; Buff'd Track heads
(1)   51/       0 :                     ; trk_CachIns	equ 30
(1)   52/       0 :                     
(1)   53/       0 :                     ; Track data: 8 bytes only
(1)   54/       0 : =0H                 chnl_Chip	equ 0		; MUST BE at 0
(1)   55/       0 : =1H                 chnl_Note	equ 1
(1)   56/       0 : =2H                 chnl_Ins	equ 2
(1)   57/       0 : =3H                 chnl_Vol	equ 3
(1)   58/       0 : =4H                 chnl_EffId	equ 4
(1)   59/       0 : =5H                 chnl_EffArg	equ 5
(1)   60/       0 : =6H                 chnl_Type	equ 6		; Impulse-note bits
(1)   61/       0 : =7H                 chnl_Flags	equ 7		; playback requests and other specific bits
(1)   62/       0 :                     
(1)   63/       0 :                     ; --------------------------------------------------------
(1)   64/       0 :                     ; Variables
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     
(1)   67/       0 :                     ; To brute force DAC playback
(1)   68/       0 :                     ; on or off
(1)   69/       0 : =0H                 zopcNop		equ	00h
(1)   70/       0 : =8H                 zopcEx		equ	08h
(1)   71/       0 : =C9H                zopcRet		equ 	0C9h
(1)   72/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)   73/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)   74/       0 :                     
(1)   75/       0 :                     ; PSG external control
(1)   76/       0 : =0H                 COM		equ	0
(1)   77/       0 : =4H                 LEV		equ	4
(1)   78/       0 : =8H                 ATK		equ	8
(1)   79/       0 : =CH                 DKY		equ	12
(1)   80/       0 : =10H                SLV		equ	16
(1)   81/       0 : =14H                RRT		equ	20
(1)   82/       0 : =18H                MODE		equ	24
(1)   83/       0 : =1CH                DTL		equ	28
(1)   84/       0 : =20H                DTH		equ	32
(1)   85/       0 : =24H                ALV		equ	36
(1)   86/       0 : =28H                FLG		equ	40
(1)   87/       0 : =2CH                TMR		equ	44
(1)   88/       0 : =30H                PVOL		equ	48
(1)   89/       0 :                     
(1)   90/       0 :                     ; FMCOM		equ	0
(1)   91/       0 : =6H                 FMKEYS		equ	6
(1)   92/       0 : =CH                 FMVOL		equ	12
(1)   93/       0 : =12H                FMPAN 		equ	18
(1)   94/       0 : =18H                FMFRQH		equ	24
(1)   95/       0 : =1EH                FMFRQL		equ	30
(1)   96/       0 :                     
(1)   97/       0 : =0H                 PWCOM		equ	0
(1)   98/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB
(1)   99/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  100/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | SH2 section (ROM $02 or SDRAM $06)
(1)  101/       0 : =20H                PWINSH		equ	32	; 24-bit sample address
(1)  102/       0 : =28H                PWINSM		equ	40
(1)  103/       0 : =30H                PWINSL		equ	48
(1)  104/       0 :                     
(1)  105/       0 :                     ; ====================================================================
(1)  106/       0 :                     ; --------------------------------------------------------
(1)  107/       0 :                     ; Code starts here
(1)  108/       0 :                     ; --------------------------------------------------------
(1)  109/       0 :                     
(1)  110/       0 : F3                  		di			; Disable interrputs
(1)  111/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  112/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  113/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  114/       8 :                     
(1)  115/       8 :                     ; --------------------------------------------------------
(1)  116/       8 :                     ; RST 8 (dac_me)
(1)  117/       8 :                     ;
(1)  118/       8 :                     ; Writes wave data to DAC using the data stored
(1)  119/       8 :                     ; on the wave buffer.
(1)  120/       8 :                     ; call this routine every 6 or more lines of code to
(1)  121/       8 :                     ; keep playing the sample while processing code
(1)  122/       8 :                     ;
(1)  123/       8 :                     ; Input (EXX):
(1)  124/       8 :                     ;  c - WAVEFIFO MSB
(1)  125/       8 :                     ; de - Pitch (xx.00)
(1)  126/       8 :                     ; h  - WAVEFIFO LSB (as xx.00)
(1)  127/       8 :                     ;
(1)  128/       8 :                     ; Uses (EXX):
(1)  129/       8 :                     ; b
(1)  130/       8 :                     ;
(1)  131/       8 :                     ; *** self-modifiable code ***
(1)  132/       8 :                     ; call dac_on to enable WAVE playback
(1)  133/       8 :                     ; or
(1)  134/       8 :                     ; call dac_off to disable it
(1)  135/       8 :                     ; (check for FM6 manually)
(1)  136/       8 :                     ; --------------------------------------------------------
(1)  137/       8 :                     
(1)  138/       8 :                     ; NOTE: This plays at 18000hz
(1)  139/       8 : (MACRO)             		org	8
(1)  140/       8 : D9                  dac_me:		exx			; <-- opcode changes between EXX(play) and RET(stop)
(1)  141/       9 : 08                  		ex	af,af'		; get our alt A/F
(1)  142/       A : 45                  		ld	b,l		; save l to b
(1)  143/       B : 3E 2A               		ld	a,2Ah		; Prepare DAC register
(1)  144/       D : 32 00 40            		ld	(Zym_ctrl_1),a
(1)  145/      10 : 6C                  		ld	l,h		; xx.00 to 00xx
(1)  146/      11 : 61                  		ld	h,c		; Buffer MSB | 00xx
(1)  147/      12 : 7E                  		ld	a,(hl)		; Write WAVE byte
(1)  148/      13 : 32 01 40            		ld	(Zym_data_1),a
(1)  149/      16 : 65                  		ld	h,l		; get hl back
(1)  150/      17 : 68                  		ld	l,b
(1)  151/      18 : 19                  		add	hl,de		; Add pitch for next byte
(1)  152/      19 : 08                  		ex	af,af'
(1)  153/      1A : D9                  		exx
(1)  154/      1B : C9                  		ret
(1)  155/      1C : 00                  commZRomBlk	db 0		; 68k ROM block flag
(1)  156/      1D : 00                  commZRomRd	db 0		; Z80 ROM reading flag
(1)  157/      1E : 00                  commZRead	db 0		; cmd read pointer (here)
(1)  158/      1F : 00                  commZWrite	db 0		; cmd fifo wptr (from 68k)
(1)  159/      20 : 00                  marsBlock	db 0		; 1 - to disable PWM comm
(1)  160/      21 : 00                  palMode		db 0
(1)  161/      22 : E0 00               sbeatPtck	dw 224		; Sub beats per tick (8frac), default is 120bpm
(1)  162/      24 : 00 00               sbeatAcc	dw 0		; Accumulates ^^ each tick to track sub beats
(1)  163/      26 :                     
(1)  164/      26 :                     ; --------------------------------------------------------
(1)  165/      26 :                     ; Z80 Interrupt at 0038h
(1)  166/      26 :                     ;
(1)  167/      26 :                     ; Sets the TICK flag
(1)  168/      26 :                     ; --------------------------------------------------------
(1)  169/      26 :                     
(1)  170/      26 : (MACRO)             		org 38h			; Align 38h
(1)  170/      26 : 00                                                  db 0
(1)  170/      27 : 00                                                  db 0
(1)  170/      28 : 00                                                  db 0
(1)  170/      29 : 00                                                  db 0
(1)  170/      2A : 00                                                  db 0
(1)  170/      2B : 00                                                  db 0
(1)  170/      2C : 00                                                  db 0
(1)  170/      2D : 00                                                  db 0
(1)  170/      2E : 00                                                  db 0
(1)  170/      2F : 00                                                  db 0
(1)  170/      30 : 00                                                  db 0
(1)  170/      31 : 00                                                  db 0
(1)  170/      32 : 00                                                  db 0
(1)  170/      33 : 00                                                  db 0
(1)  170/      34 : 00                                                  db 0
(1)  170/      35 : 00                                                  db 0
(1)  170/      36 : 00                                                  db 0
(1)  170/      37 : 00                                                  db 0
(1)  170/      38 :                     
(1)  171/      38 : ED 73 C7 19         		ld	(tickFlag),sp	; Use sp to set TICK flag (xx1F, read as tickFlag+1)
(1)  172/      3C : F3                  		di			; Disable interrupt until next request
(1)  173/      3D : C9                  		ret
(1)  174/      3E :                     
(1)  175/      3E :                     ; --------------------------------------------------------
(1)  176/      3E :                     ; Initilize
(1)  177/      3E :                     ; --------------------------------------------------------
(1)  178/      3E :                     
(1)  179/      3E :                     z80_init:
(1)  180/      3E : CD 5D 0F            		call	gema_init	; Initilize VBLANK sound driver
(1)  181/      41 : FB                  		ei
(1)  182/      42 :                     
(1)  183/      42 :                     ; --------------------------------------------------------
(1)  184/      42 :                     ; MAIN LOOP
(1)  185/      42 :                     ; --------------------------------------------------------
(1)  186/      42 :                     
(1)  187/      42 :                     drv_loop:
(1)  188/      42 : CF                  		rst	8
(1)  189/      43 : CD C5 0F            		call	get_tick	; Check for tick on VBlank
(1)  190/      46 : CD 8E 14            		call	dac_fill
(1)  191/      49 : CF                  		rst	8
(1)  192/      4A : 06 00               		ld	b,0		; b - Reset current flags (beat|tick)
(1)  193/      4C : 3A C9 19            		ld	a,(tickCnt)
(1)  194/      4F : D6 01               		sub	1
(1)  195/      51 : 38 0C               		jr	c,.noticks
(1)  196/      53 : 32 C9 19            		ld	(tickCnt),a
(1)  197/      56 : CF                  		rst	8
(1)  198/      57 : CD CF 10            		call	chip_env	; Process PSG volume and freqs manually
(1)  199/      5A : CD C5 0F            		call	get_tick	; Check for another tick
(1)  200/      5D : 06 01               		ld 	b,01b		; Set TICK (01b) flag, and clear BEAT
(1)  201/      5F :                     .noticks:
(1)  202/      5F : 3A 25 00            		ld	a,(sbeatAcc+1)	; check beat counter (scaled by tempo)
(1)  203/      62 : D6 01               		sub	1
(1)  204/      64 : 38 06               		jr	c,.nobeats
(1)  205/      66 : 32 25 00            		ld	(sbeatAcc+1),a	; 1/24 beat passed.
(1)  206/      69 : CB C8               		set	1,b		; Set BEAT (10b) flag
(1)  207/      6B : CF                  		rst	8
(1)  208/      6C :                     .nobeats:
(1)  209/      6C : CF                  		rst	8
(1)  210/      6D : 78                  		ld	a,b
(1)  211/      6E : B7                  		or	a
(1)  212/      6F : 28 13               		jr	z,.neither
(1)  213/      71 : 32 C5 19            		ld	(currTickBits),a; Save BEAT/TICK bits
(1)  214/      74 : CD C5 0F            		call	get_tick
(1)  215/      77 : CD CA 05            		call	setupchip	; Setup note changes to soundchips
(1)  216/      7A : CD C5 0F            		call	get_tick
(1)  217/      7D : CD CF 01            		call	updtrack	; Update track data
(1)  218/      80 : CD C5 0F            		call	get_tick
(1)  219/      83 : CF                  		rst	8
(1)  220/      84 :                     .neither:
(1)  221/      84 : CD 4C 05            		call	mars_scomm
(1)  222/      87 : CD C5 0F            		call	get_tick
(1)  223/      8A : CF                  		rst	8
(1)  224/      8B :                     .next_cmd:
(1)  225/      8B :                     ; 		call	dac_fill	; Critical for syncing wave
(1)  226/      8B : 3A 1F 00            		ld	a,(commZWrite)
(1)  227/      8E : 47                  		ld	b,a
(1)  228/      8F : 3A 1E 00            		ld	a,(commZRead)
(1)  229/      92 : B8                  		cp	b
(1)  230/      93 : 28 AD               		jr	z,drv_loop
(1)  231/      95 : CD AE 01            		call	get_cmdbyte
(1)  232/      98 : FE FF               		cp	-1		; Get -1 (Start of command)
(1)  233/      9A : 20 A6               		jr	nz,drv_loop
(1)  234/      9C : CD AE 01            		call	get_cmdbyte	; Read cmd number
(1)  235/      9F : 87                  		add	a,a
(1)  236/      A0 : 21 AC 00            		ld	hl,.list
(1)  237/      A3 : 16 00               		ld	d,0
(1)  238/      A5 : 5F                  		ld	e,a
(1)  239/      A6 : 19                  		add	hl,de
(1)  240/      A7 :                     ; 		call	dac_fill
(1)  241/      A7 : 7E                  		ld	a,(hl)
(1)  242/      A8 : 23                  		inc	hl
(1)  243/      A9 : 66                  		ld	h,(hl)
(1)  244/      AA : 6F                  		ld	l,a
(1)  245/      AB : E9                  		jp	(hl)
(1)  246/      AC :                     .list:
(1)  247/      AC : F0 00               		dw .cmnd_trkplay	; $00 - Play
(1)  248/      AE : 4C 01               		dw .cmnd_trkstop	; $01 - Stop
(1)  249/      B0 : 5C 01               		dw .cmnd_trkpause	; $02 - Pause
(1)  250/      B2 : 69 01               		dw .cmnd_trkresume	; $03 - Resume
(1)  251/      B4 : EC 00               		dw .cmnd_0		; $04 - Fade out
(1)  252/      B6 : EC 00               		dw .cmnd_0		; $05 - Fade in
(1)  253/      B8 : EC 00               		dw .cmnd_0		; $06 - Set master volume
(1)  254/      BA : EC 00               		dw .cmnd_0		; $07 -
(1)  255/      BC : 76 01               		dw .cmnd_trkticks	; $08 - Set ticks
(1)  256/      BE : EC 00               		dw .cmnd_0		; $09 -
(1)  257/      C0 : EC 00               		dw .cmnd_0		; $0A -
(1)  258/      C2 : EC 00               		dw .cmnd_0		; $0B -
(1)  259/      C4 : EC 00               		dw .cmnd_0		; $0C -
(1)  260/      C6 : EC 00               		dw .cmnd_0		; $0D -
(1)  261/      C8 : EC 00               		dw .cmnd_0		; $0E -
(1)  262/      CA : EC 00               		dw .cmnd_0		; $0F -
(1)  263/      CC : 88 01               		dw .cmnd_trktempo	; $10 - Set global tempo
(1)  264/      CE : EC 00               		dw .cmnd_0
(1)  265/      D0 : EC 00               		dw .cmnd_0
(1)  266/      D2 : EC 00               		dw .cmnd_0
(1)  267/      D4 : EC 00               		dw .cmnd_0		; $14
(1)  268/      D6 : EC 00               		dw .cmnd_0
(1)  269/      D8 : EC 00               		dw .cmnd_0
(1)  270/      DA : EC 00               		dw .cmnd_0
(1)  271/      DC : EC 00               		dw .cmnd_0		; $18
(1)  272/      DE : EC 00               		dw .cmnd_0
(1)  273/      E0 : EC 00               		dw .cmnd_0
(1)  274/      E2 : EC 00               		dw .cmnd_0
(1)  275/      E4 : EC 00               		dw .cmnd_0		; $1C
(1)  276/      E6 : EC 00               		dw .cmnd_0
(1)  277/      E8 : EC 00               		dw .cmnd_0
(1)  278/      EA : EC 00               		dw .cmnd_0
(1)  279/      EC :                     
(1)  280/      EC :                     ; --------------------------------------------------------
(1)  281/      EC :                     ; Command list
(1)  282/      EC :                     ; --------------------------------------------------------
(1)  283/      EC :                     
(1)  284/      EC :                     .cmnd_0:
(1)  285/      EC : 18 FE               		jr	$
(1)  286/      EE : 18 9B               		jr	.next_cmd
(1)  287/      F0 :                     
(1)  288/      F0 :                     ; --------------------------------------------------------
(1)  289/      F0 :                     ; $01 - Set NEW track
(1)  290/      F0 :                     ; --------------------------------------------------------
(1)  291/      F0 :                     
(1)  292/      F0 :                     ; Slot
(1)  293/      F0 :                     ; Ticks
(1)  294/      F0 :                     ; 24-bit patt data
(1)  295/      F0 :                     ; 24-bit block data
(1)  296/      F0 :                     .cmnd_trkplay:
(1)  297/      F0 : CD AE 01            		call	get_cmdbyte		; Get track slot
(1)  298/      F3 : CD 9D 01            		call	get_trkindx		; and read index iy
(1)  299/      F6 : CD AE 01            		call	get_cmdbyte		; Get ticks
(1)  300/      F9 : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  301/      FC : CD AE 01            		call	get_cmdbyte		; Start block
(1)  302/      FF : FD 77 12            		ld	(iy+trk_setBlk),a
(1)  303/     102 : CD AE 01            		call	get_cmdbyte		; Flag bits
(1)  304/     105 : F6 C0               		or	11000000b		; Enable + First fill bits
(1)  305/     107 : FD 77 13            		ld	(iy+trk_status),a
(1)  306/     10A : CD AE 01            		call	get_cmdbyte		; Pattern data
(1)  307/     10D : FD 77 03            		ld	(iy+trk_romPatt),a
(1)  308/     110 : CD AE 01            		call	get_cmdbyte
(1)  309/     113 : FD 77 04            		ld	(iy+(trk_romPatt+1)),a
(1)  310/     116 : CD AE 01            		call	get_cmdbyte
(1)  311/     119 : FD 77 05            		ld	(iy+(trk_romPatt+2)),a
(1)  312/     11C : CD AE 01            		call	get_cmdbyte		; Block data
(1)  313/     11F : FD 77 00            		ld	(iy+trk_romBlk),a
(1)  314/     122 : CD AE 01            		call	get_cmdbyte
(1)  315/     125 : FD 77 01            		ld	(iy+(trk_romBlk+1)),a
(1)  316/     128 : CD AE 01            		call	get_cmdbyte
(1)  317/     12B : CD C5 0F            		call	get_tick
(1)  318/     12E : FD 77 02            		ld	(iy+(trk_romBlk+2)),a
(1)  319/     131 : CD AE 01            		call	get_cmdbyte		; Instrument data
(1)  320/     134 : FD 77 06            		ld	(iy+trk_romIns),a
(1)  321/     137 : CD AE 01            		call	get_cmdbyte
(1)  322/     13A : FD 77 07            		ld	(iy+(trk_romIns+1)),a
(1)  323/     13D : CD AE 01            		call	get_cmdbyte
(1)  324/     140 : FD 77 08            		ld	(iy+(trk_romIns+2)),a
(1)  325/     143 : 3E 01               		ld	a,1
(1)  326/     145 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  327/     148 : CF                  		rst	8
(1)  328/     149 : C3 8B 00            		jp	.next_cmd
(1)  329/     14C :                     
(1)  330/     14C :                     ; --------------------------------------------------------
(1)  331/     14C :                     ; $02 - STOP track
(1)  332/     14C :                     ; --------------------------------------------------------
(1)  333/     14C :                     
(1)  334/     14C :                     .cmnd_trkstop:
(1)  335/     14C : CD AE 01            		call	get_cmdbyte		; Get track slot
(1)  336/     14F : CD 9D 01            		call	get_trkindx		; and read index iy
(1)  337/     152 : FD 36 13 00         		ld	(iy+trk_status),0
(1)  338/     156 : CD AA 04            		call	track_out
(1)  339/     159 : C3 8B 00            		jp	.next_cmd
(1)  340/     15C :                     
(1)  341/     15C :                     ; --------------------------------------------------------
(1)  342/     15C :                     ; $03 - Pause track
(1)  343/     15C :                     ; --------------------------------------------------------
(1)  344/     15C :                     
(1)  345/     15C :                     .cmnd_trkpause:
(1)  346/     15C : CD AE 01            		call	get_cmdbyte		; Get track slot
(1)  347/     15F : CD 9D 01            		call	get_trkindx		; and read index iy
(1)  348/     162 : FD CB 13 BE         		res	7,(iy+trk_status)	; Slot OFF
(1)  349/     166 :                     ; 		call	track_out
(1)  350/     166 : C3 8B 00            		jp	.next_cmd
(1)  351/     169 :                     
(1)  352/     169 :                     ; --------------------------------------------------------
(1)  353/     169 :                     ; $04 - Resume track
(1)  354/     169 :                     ; --------------------------------------------------------
(1)  355/     169 :                     
(1)  356/     169 :                     .cmnd_trkresume:
(1)  357/     169 : CD AE 01            		call	get_cmdbyte		; Get track slot
(1)  358/     16C : CD 9D 01            		call	get_trkindx		; and read index iy
(1)  359/     16F : FD CB 13 FE         		set	7,(iy+trk_status)	; Slot ON
(1)  360/     173 :                     ; 		call	track_out
(1)  361/     173 : C3 8B 00            		jp	.next_cmd
(1)  362/     176 :                     
(1)  363/     176 :                     ; --------------------------------------------------------
(1)  364/     176 :                     ; $08 - Set tricks
(1)  365/     176 :                     ; --------------------------------------------------------
(1)  366/     176 :                     
(1)  367/     176 :                     .cmnd_trkticks:
(1)  368/     176 : CD AE 01            		call	get_cmdbyte		; Get track slot
(1)  369/     179 : CD 9D 01            		call	get_trkindx		; and read index iyc
(1)  370/     17C : CD AE 01            		call	get_cmdbyte
(1)  371/     17F : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  372/     182 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  373/     185 : C3 8B 00            		jp	.next_cmd
(1)  374/     188 :                     
(1)  375/     188 :                     ; --------------------------------------------------------
(1)  376/     188 :                     ; $10 - Set global tempo
(1)  377/     188 :                     ; --------------------------------------------------------
(1)  378/     188 :                     
(1)  379/     188 :                     .cmnd_trktempo:
(1)  380/     188 : CD AE 01            		call	get_cmdbyte		; Get track slot
(1)  381/     18B : CD 9D 01            		call	get_trkindx		; and read index iyc
(1)  382/     18E : CD AE 01            		call	get_cmdbyte
(1)  383/     191 : 32 22 00            		ld	(sbeatPtck),a
(1)  384/     194 : CD AE 01            		call	get_cmdbyte
(1)  385/     197 : 32 23 00            		ld	(sbeatPtck+1),a
(1)  386/     19A : C3 8B 00            		jp	.next_cmd
(1)  387/     19D :                     
(1)  388/     19D :                     ; --------------------------------------------------------
(1)  389/     19D :                     ; a - track index
(1)  390/     19D :                     
(1)  391/     19D :                     get_trkindx:
(1)  392/     19D : 21 B7 18            		ld	hl,trkPointers
(1)  393/     1A0 : 87                  		add	a,a
(1)  394/     1A1 : 16 00               		ld	d,0
(1)  395/     1A3 : 5F                  		ld	e,a
(1)  396/     1A4 : CF                  		rst	8
(1)  397/     1A5 : 19                  		add	hl,de
(1)  398/     1A6 : 7E                  		ld	a,(hl)
(1)  399/     1A7 : 23                  		inc	hl
(1)  400/     1A8 : 66                  		ld	h,(hl)
(1)  401/     1A9 : 6F                  		ld	l,a
(1)  402/     1AA : E5                  		push	hl
(1)  403/     1AB : FD E1               		pop	iy
(1)  404/     1AD : C9                  		ret
(1)  405/     1AE :                     
(1)  406/     1AE :                     ; --------------------------------------------------------
(1)  407/     1AE :                     ; Read cmd byte, auto re-aligns to 7Fh
(1)  408/     1AE :                     ; --------------------------------------------------------
(1)  409/     1AE :                     
(1)  410/     1AE :                     get_cmdbyte:
(1)  411/     1AE : C5                  		push	bc
(1)  412/     1AF : D5                  		push	de
(1)  413/     1B0 : E5                  		push	hl
(1)  414/     1B1 :                     .getcbytel:
(1)  415/     1B1 : 3A 1F 00            		ld	a,(commZWrite)
(1)  416/     1B4 : 47                  		ld	b,a
(1)  417/     1B5 : 3A 1E 00            		ld	a,(commZRead)
(1)  418/     1B8 : B8                  		cp	b
(1)  419/     1B9 : 28 F6               		jr	z,.getcbytel	; wait for a command from 68k
(1)  420/     1BB : CF                  		rst	8
(1)  421/     1BC : 06 00               		ld	b,0
(1)  422/     1BE : 4F                  		ld	c,a
(1)  423/     1BF : 21 B0 1E            		ld	hl,commZfifo
(1)  424/     1C2 : 09                  		add	hl,bc
(1)  425/     1C3 : 3C                  		inc	a
(1)  426/     1C4 : E6 3F               		and	3Fh		; command list limit
(1)  427/     1C6 : CF                  		rst	8
(1)  428/     1C7 : 32 1E 00            		ld	(commZRead),a
(1)  429/     1CA : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  430/     1CB : E1                  		pop	hl
(1)  431/     1CC : D1                  		pop	de
(1)  432/     1CD : C1                  		pop	bc
(1)  433/     1CE : C9                  		ret
(1)  434/     1CF :                     
(1)  435/     1CF :                     ; ====================================================================
(1)  436/     1CF :                     ; ----------------------------------------------------------------
(1)  437/     1CF :                     ; Sound playback code
(1)  438/     1CF :                     ; ----------------------------------------------------------------
(1)  439/     1CF :                     
(1)  440/     1CF :                     ; --------------------------------------------------------
(1)  441/     1CF :                     ; Read track data
(1)  442/     1CF :                     ; --------------------------------------------------------
(1)  443/     1CF :                     
(1)  444/     1CF :                     updtrack:
(1)  445/     1CF : CD 8E 14            		call	dac_fill
(1)  446/     1D2 : FD 21 00 1E         		ld	iy,trkBuff_0		; BGM
(1)  447/     1D6 : CF                  		rst	8
(1)  448/     1D7 : 11 BB 18            		ld	de,insDataC_0
(1)  449/     1DA : CD E9 01            		call	.read_track
(1)  450/     1DD : FD 21 00 1F         		ld	iy,trkBuff_1		; SFX
(1)  451/     1E1 : 11 3B 19            		ld	de,insDataC_1
(1)  452/     1E4 : CF                  		rst	8
(1)  453/     1E5 : CD E9 01            		call	.read_track
(1)  454/     1E8 : C9                  		ret
(1)  455/     1E9 :                     
(1)  456/     1E9 :                     ; ----------------------------------------
(1)  457/     1E9 :                     ; Read current track
(1)  458/     1E9 :                     ;
(1)  459/     1E9 :                     ; iy - Track control
(1)  460/     1E9 :                     ; ix - Track channels
(1)  461/     1E9 :                     ; de - Instrument CACHE point
(1)  462/     1E9 :                     ; ----------------------------------------
(1)  463/     1E9 :                     
(1)  464/     1E9 :                     .read_track:
(1)  465/     1E9 : FD 46 13            		ld	b,(iy+trk_status)	; b - Track status
(1)  466/     1EC : CB 78               		bit	7,b			; Active?
(1)  467/     1EE : C8                  		ret	z
(1)  468/     1EF : ED 53 BD 19         		ld	(currInsData),de	; save temporal InsData
(1)  469/     1F3 : CF                  		rst	8
(1)  470/     1F4 : 3A C5 19            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  471/     1F7 : CB 40               		bit	0,b			; This track uses Beats?
(1)  472/     1F9 : 28 03               		jr	z,.sfxmd		; Nope
(1)  473/     1FB : CB 4F               		bit	1,a			; BEAT passed?
(1)  474/     1FD : C8                  		ret	z
(1)  475/     1FE :                     .sfxmd:
(1)  476/     1FE : CB 47               		bit	0,a			; TICK passed?
(1)  477/     200 : C8                  		ret	z
(1)  478/     201 : FD 7E 14            		ld	a,(iy+trk_tickTmr)	; TICK timer for this track
(1)  479/     204 : 3D                  		dec	a
(1)  480/     205 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  481/     208 : CF                  		rst	8
(1)  482/     209 : B7                  		or	a
(1)  483/     20A : C0                  		ret	nz			; If != 0, exit
(1)  484/     20B : CB 68               		bit	5,b			; Effect-requested track set?
(1)  485/     20D : C4 20 04            		call	nz,.effect_fill
(1)  486/     210 : CB 70               		bit	6,b			; Restart/First time?
(1)  487/     212 : C4 2C 04            		call	nz,.first_fill
(1)  488/     215 : FD 7E 15            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  489/     218 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  490/     21B : CF                  		rst	8
(1)  491/     21C : FD 6E 0C            		ld	l,(iy+trk_Read)		; hl - Pattern data to read in cache
(1)  492/     21F : FD 66 0D            		ld	h,(iy+((trk_Read+1)))
(1)  493/     222 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  494/     225 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1)  495/     228 : 79                  		ld	a,c
(1)  496/     229 : B0                  		or	b
(1)  497/     22A : CC 78 03            		call	z,.next_track		; If rowtimer == 0, get next track data
(1)  498/     22D : FE FF               		cp	-1			; or exit.
(1)  499/     22F : C8                  		ret	z
(1)  500/     230 : CF                  		rst	8
(1)  501/     231 :                     
(1)  502/     231 :                     ; --------------------------------
(1)  503/     231 :                     ; Main reading loop
(1)  504/     231 :                     ; --------------------------------
(1)  505/     231 :                     
(1)  506/     231 :                     .next_note:
(1)  507/     231 : FD 7E 18            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  508/     234 : B7                  		or	a
(1)  509/     235 : 20 17               		jr	nz,.decrow
(1)  510/     237 : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  511/     238 : B7                  		or	a
(1)  512/     239 : 28 08               		jr	z,.exit			; If == 00h: exit
(1)  513/     23B : FA 5A 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  514/     23E : FD 77 18            		ld	(iy+trk_rowPause),a
(1)  515/     241 : 18 00               		jr	.exit			; make row-timer, set hl+1
(1)  516/     243 :                     
(1)  517/     243 :                     ; --------------------------------
(1)  518/     243 :                     ; Exit
(1)  519/     243 :                     ; --------------------------------
(1)  520/     243 :                     
(1)  521/     243 :                     .exit:
(1)  522/     243 : CD FD 02            		call	.inc_cpatt
(1)  523/     246 : FD 75 0C            		ld	(iy+trk_Read),l		; Update read location
(1)  524/     249 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  525/     24C : 18 03               		jr	.decrow_e
(1)  526/     24E :                     .decrow:
(1)  527/     24E : FD 35 18            		dec	(iy+trk_rowPause)
(1)  528/     251 :                     .decrow_e:
(1)  529/     251 : CF                  		rst	8
(1)  530/     252 : 0B                  		dec	bc			; Decrement this row
(1)  531/     253 : FD 71 0E            		ld	(iy+trk_Rows),c		; And update it
(1)  532/     256 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1)  533/     259 : C9                  		ret
(1)  534/     25A :                     
(1)  535/     25A :                     ; --------------------------------
(1)  536/     25A :                     ; New note request
(1)  537/     25A :                     ; --------------------------------
(1)  538/     25A :                     
(1)  539/     25A :                     .has_note:
(1)  540/     25A : C5                  		push	bc		; Save rowcount
(1)  541/     25B : 4F                  		ld	c,a		; c - Copy of control+channel
(1)  542/     25C : CD FD 02            		call	.inc_cpatt
(1)  543/     25F : 79                  		ld	a,c
(1)  544/     260 : FD E5               		push	iy
(1)  545/     262 : DD E1               		pop	ix
(1)  546/     264 : 11 20 00            		ld	de,20h		; Point to track-data
(1)  547/     267 : DD 19               		add	ix,de
(1)  548/     269 : CF                  		rst	8
(1)  549/     26A : 16 00               		ld 	d,0
(1)  550/     26C : E6 3F               		and	00111111b
(1)  551/     26E : FD 46 16            		ld	b,(iy+trk_numChnls)
(1)  552/     271 : B8                  		cp	b
(1)  553/     272 : D2 F9 02            		jp	nc,.rnout_chnls
(1)  554/     275 : 87                  		add	a,a		; * 8
(1)  555/     276 : 87                  		add	a,a
(1)  556/     277 : 87                  		add	a,a
(1)  557/     278 : 5F                  		ld	e,a
(1)  558/     279 : DD 19               		add	ix,de
(1)  559/     27B : CF                  		rst	8
(1)  560/     27C : DD 46 06            		ld	b,(ix+chnl_Type); b - our current Note type
(1)  561/     27F : CB 71               		bit	6,c		; Next byte is new type?
(1)  562/     281 : 28 06               		jr	z,.old_type
(1)  563/     283 : 7E                  		ld	a,(hl)
(1)  564/     284 : DD 77 06            		ld	(ix+chnl_Type),a
(1)  565/     287 : 47                  		ld	b,a
(1)  566/     288 : 2C                  		inc 	l
(1)  567/     289 :                     .old_type:
(1)  568/     289 :                     	; b - evinEVIN
(1)  569/     289 :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  570/     289 :                     	;     evin: byte is already stored on track-channel buffer
(1)  571/     289 :                     	;     EVIN: next byte(s) contain a new value, for eff:2 bytes
(1)  572/     289 : CF                  		rst	8
(1)  573/     28A : CB 40               		bit	0,b
(1)  574/     28C : 28 07               		jr	z,.no_note
(1)  575/     28E : 7E                  		ld	a,(hl)
(1)  576/     28F : DD 77 01            		ld	(ix+chnl_Note),a
(1)  577/     292 : CD FD 02            		call	.inc_cpatt
(1)  578/     295 :                     .no_note:
(1)  579/     295 : CB 48               		bit	1,b
(1)  580/     297 : 28 07               		jr	z,.no_ins
(1)  581/     299 : 7E                  		ld	a,(hl)
(1)  582/     29A : DD 77 02            		ld	(ix+chnl_Ins),a
(1)  583/     29D : CD FD 02            		call	.inc_cpatt
(1)  584/     2A0 :                     .no_ins:
(1)  585/     2A0 : CF                  		rst	8
(1)  586/     2A1 : CB 50               		bit	2,b
(1)  587/     2A3 : 28 07               		jr	z,.no_vol
(1)  588/     2A5 : 7E                  		ld	a,(hl)
(1)  589/     2A6 : DD 77 03            		ld	(ix+chnl_Vol),a
(1)  590/     2A9 : CD FD 02            		call	.inc_cpatt
(1)  591/     2AC :                     .no_vol:
(1)  592/     2AC : CB 58               		bit	3,b
(1)  593/     2AE : 28 0E               		jr	z,.no_eff
(1)  594/     2B0 : 7E                  		ld	a,(hl)
(1)  595/     2B1 : DD 77 04            		ld	(ix+chnl_EffId),a
(1)  596/     2B4 : CD FD 02            		call	.inc_cpatt
(1)  597/     2B7 : 7E                  		ld	a,(hl)
(1)  598/     2B8 : DD 77 05            		ld	(ix+chnl_EffArg),a
(1)  599/     2BB : CD FD 02            		call	.inc_cpatt
(1)  600/     2BE :                     .no_eff:
(1)  601/     2BE : CF                  		rst	8
(1)  602/     2BF : 78                  		ld	a,b		; Merge Impulse recycle bits to main bits
(1)  603/     2C0 : CB 3F               		srl	a
(1)  604/     2C2 : CB 3F               		srl	a
(1)  605/     2C4 : CB 3F               		srl	a
(1)  606/     2C6 : CB 3F               		srl	a
(1)  607/     2C8 : E6 0F               		and	00001111b
(1)  608/     2CA : 4F                  		ld	c,a
(1)  609/     2CB : CF                  		rst	8
(1)  610/     2CC : 78                  		ld	a,b
(1)  611/     2CD : E6 0F               		and	00001111b
(1)  612/     2CF : B1                  		or	c
(1)  613/     2D0 : 4F                  		ld	c,a
(1)  614/     2D1 : DD 7E 07            		ld	a,(ix+chnl_Flags)
(1)  615/     2D4 : B1                  		or	c
(1)  616/     2D5 : DD 77 07            		ld	(ix+chnl_Flags),a
(1)  617/     2D8 : CF                  		rst	8
(1)  618/     2D9 : C1                  		pop	bc			; Restore rowcount
(1)  619/     2DA :                     
(1)  620/     2DA :                     	; Check for effects that change things
(1)  621/     2DA :                     	; to internal playback (jump, tempo, etc.)
(1)  622/     2DA : E6 08               		and	1000b		; Filter EFFECT bit only
(1)  623/     2DC : B7                  		or	a
(1)  624/     2DD : CA 31 02            		jp	z,.next_note
(1)  625/     2E0 : DD 7E 04            		ld	a,(ix+chnl_EffId)
(1)  626/     2E3 : B7                  		or	a		; 00h = invalid effect
(1)  627/     2E4 : CA 31 02            		jp	z,.next_note
(1)  628/     2E7 : FE 01               		cp	1		; Effect A: Tick set
(1)  629/     2E9 : CC 49 03            		call	z,.eff_A
(1)  630/     2EC : FE 02               		cp	2		; Effect B: Position Jump
(1)  631/     2EE : CC 53 03            		call	z,.eff_B	; *** a is trashed after this
(1)  632/     2F1 : FE 03               		cp	3		; Effect C: Pattern break
(1)  633/     2F3 : CC 6D 03            		call	z,.eff_C
(1)  634/     2F6 : C3 31 02            		jp	.next_note
(1)  635/     2F9 :                     
(1)  636/     2F9 :                     .rnout_chnls:
(1)  637/     2F9 : C1                  		pop	bc
(1)  638/     2FA : C3 31 02            		jp	.next_note
(1)  639/     2FD :                     
(1)  640/     2FD :                     ; ----------------------------------------
(1)  641/     2FD :                     ; Call this to increment the
(1)  642/     2FD :                     ; cache pattern read pointer (iy+trk_Read)
(1)  643/     2FD :                     ; it also refills the next section to
(1)  644/     2FD :                     ; read if needed.
(1)  645/     2FD :                     ;
(1)  646/     2FD :                     ; NOTE: breaks A
(1)  647/     2FD :                     ; ----------------------------------------
(1)  648/     2FD :                     
(1)  649/     2FD :                     .inc_cpatt:
(1)  650/     2FD : 2C                  		inc	l
(1)  651/     2FE : FD 7E 13            		ld	a,(iy+trk_status)	; Increment-fill enabled?
(1)  652/     301 : E6 10               		and	00010000b
(1)  653/     303 : B7                  		or	a
(1)  654/     304 : C8                  		ret	z
(1)  655/     305 : CF                  		rst	8
(1)  656/     306 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1)  657/     309 : AD                  		xor	l
(1)  658/     30A : E6 80               		and	080h			; Check for 00h/80h
(1)  659/     30C : C8                  		ret	z
(1)  660/     30D : CF                  		rst	8
(1)  661/     30E : 3A 1C 00            		ld	a,(commZRomBlk)		; Got mid-DMA?
(1)  662/     311 : B7                  		or	a
(1)  663/     312 : 28 06               		jr	z,.grab_asap
(1)  664/     314 : 7D                  		ld	a,l			; Last chance
(1)  665/     315 : E6 7F               		and	07Fh
(1)  666/     317 : FE 70               		cp	070h
(1)  667/     319 : D8                  		ret	c
(1)  668/     31A :                     .grab_asap:
(1)  669/     31A : CD 8E 14            		call	dac_fill		; refill request
(1)  670/     31D : FD 7E 10            		ld	a,(iy+trk_Halfway)	; +80h to halfway
(1)  671/     320 : 54                  		ld	d,h
(1)  672/     321 : 5F                  		ld	e,a
(1)  673/     322 : CF                  		rst	8
(1)  674/     323 : C6 80               		add 	a,080h
(1)  675/     325 : FD 77 10            		ld	(iy+trk_Halfway),a
(1)  676/     328 : E5                  		push	hl
(1)  677/     329 : C5                  		push	bc
(1)  678/     32A : 01 80 00            		ld	bc,80h			; 80h size + increment value
(1)  679/     32D : FD 6E 09            		ld	l,(iy+trk_romPattRd)
(1)  680/     330 : FD 66 0A            		ld	h,(iy+(trk_romPattRd+1))
(1)  681/     333 : CF                  		rst	8
(1)  682/     334 : FD 7E 0B            		ld	a,(iy+(trk_romPattRd+2))
(1)  683/     337 : 09                  		add	hl,bc
(1)  684/     338 : CE 00               		adc	a,0
(1)  685/     33A : FD 75 09            		ld	(iy+trk_romPattRd),l
(1)  686/     33D : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1)  687/     340 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1)  688/     343 : CD 34 10            		call	transferRom
(1)  689/     346 : C1                  		pop	bc
(1)  690/     347 : E1                  		pop	hl
(1)  691/     348 : C9                  		ret
(1)  692/     349 :                     
(1)  693/     349 :                     ; ----------------------------------------
(1)  694/     349 :                     ; Effect A: Set ticks
(1)  695/     349 :                     ; ----------------------------------------
(1)  696/     349 :                     
(1)  697/     349 :                     .eff_A:
(1)  698/     349 : DD 5E 05            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  699/     34C : FD 73 15            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  700/     34F : FD 73 14            		ld	(iy+trk_tickTmr),e
(1)  701/     352 : C9                  		ret
(1)  702/     353 :                     
(1)  703/     353 :                     ; ----------------------------------------
(1)  704/     353 :                     ; Effect B: jump to a new block
(1)  705/     353 :                     ; ----------------------------------------
(1)  706/     353 :                     
(1)  707/     353 :                     .eff_B:
(1)  708/     353 : F5                  		push	af
(1)  709/     354 : DD 5E 05            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  710/     357 : FD 73 11            		ld 	(iy+trk_currBlk),e
(1)  711/     35A : CF                  		rst	8
(1)  712/     35B :                     ; 		ld	e,(iy+trk_tickSet)	; Reset our Tick timer
(1)  713/     35B :                     ; 		ld	(iy+trk_tickTmr),e
(1)  714/     35B : FD 36 18 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  715/     35F : DD 36 04 00         		ld	(ix+chnl_EffId),0	; (failsafe)
(1)  716/     363 : DD 36 05 00         		ld	(ix+chnl_EffArg),0
(1)  717/     367 : FD CB 13 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  718/     36B : F1                  		pop	af
(1)  719/     36C : C9                  		ret
(1)  720/     36D :                     
(1)  721/     36D :                     ; ----------------------------------------
(1)  722/     36D :                     ; Effect C: Pattern break/exit (custom)
(1)  723/     36D :                     ; ***Not exactly as in Impulse but
(1)  724/     36D :                     ; moves to the next block
(1)  725/     36D :                     ;
(1)  726/     36D :                     ; If set to -1 it will end the track,
(1)  727/     36D :                     ; so you can put multiple SFX into the
(1)  728/     36D :                     ; track file and call them by block.
(1)  729/     36D :                     ;
(1)  730/     36D :                     ; USE THE EFFECT ONLY
(1)  731/     36D :                     ; ----------------------------------------
(1)  732/     36D :                     
(1)  733/     36D :                     .eff_C:
(1)  734/     36D : 01 00 00            		ld	bc,0			; clear rowcount
(1)  735/     370 : DD 7E 05            		ld	a,(ix+chnl_EffArg)	; Arg is 0FFh?
(1)  736/     373 : FE FF               		cp	-1			; Use it as track-end (for SFX)
(1)  737/     375 : CA 94 04            		jp	z,.trkend_effC
(1)  738/     378 :                     
(1)  739/     378 :                     ; ----------------------------------------
(1)  740/     378 :                     ; If pattern finished, load the next one
(1)  741/     378 :                     ; ----------------------------------------
(1)  742/     378 :                     
(1)  743/     378 :                     .next_track:
(1)  744/     378 : FD 7E 11            		ld	a,(iy+trk_currBlk)	; Increment next block
(1)  745/     37B : 3C                  		inc	a
(1)  746/     37C : FD 77 11            		ld 	(iy+trk_currBlk),a
(1)  747/     37F :                     
(1)  748/     37F :                     ; Load track data to cache
(1)  749/     37F :                     ; a - Block
(1)  750/     37F :                     ;
(1)  751/     37F :                     ; hl - trk_read on halfway
(1)  752/     37F :                     .set_track:
(1)  753/     37F : CF                  		rst	8
(1)  754/     380 : FD 36 10 80         		ld	(iy+trk_Halfway),80h	; Reset halfway
(1)  755/     384 :                     ; 		ld	l,(iy+trk_CachNotes)	; Set trk_read point on halfway
(1)  756/     384 :                     ; 		ld	h,(iy+(trk_CachNotes+1))
(1)  757/     384 :                     ; 		ld	de,80h
(1)  758/     384 :                     ; 		add	hl,de
(1)  759/     384 : 2E 00               		ld	l,0			; quick reset trk_read
(1)  760/     386 : FD 75 0C            		ld	(iy+trk_Read),l
(1)  761/     389 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  762/     38C :                     
(1)  763/     38C : E5                  		push	hl			; Save hl
(1)  764/     38D : 11 00 00            		ld	de,0
(1)  765/     390 : 5F                  		ld	e,a
(1)  766/     391 : CF                  		rst	8
(1)  767/     392 : FD 6E 00            		ld	l,(iy+trk_romBlk)	; Get block position
(1)  768/     395 : FD 66 01            		ld	h,(iy+(trk_romBlk+1))	; directly from ROM
(1)  769/     398 : FD 7E 02            		ld	a,(iy+(trk_romBlk+2))
(1)  770/     39B : 19                  		add	hl,de
(1)  771/     39C : CE 00               		adc	a,0
(1)  772/     39E : 47                  		ld	b,a
(1)  773/     39F : CF                  		rst	8
(1)  774/     3A0 : CD E6 0F            		call	showRom
(1)  775/     3A3 : CD 07 10            		call	readRomB
(1)  776/     3A6 : FE FF               		cp	-1			; if block == -1, end
(1)  777/     3A8 : CA 93 04            		jp	z,.track_end
(1)  778/     3AB :                     
(1)  779/     3AB :                     	; a - head index
(1)  780/     3AB : 87                  		add	a,a
(1)  781/     3AC : 87                  		add	a,a
(1)  782/     3AD : 16 00               		ld	d,0
(1)  783/     3AF : 5F                  		ld	e,a
(1)  784/     3B0 : FD 6E 03            		ld	l,(iy+trk_romPatt)
(1)  785/     3B3 : CF                  		rst	8
(1)  786/     3B4 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1)  787/     3B7 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1)  788/     3BA : 19                  		add	hl,de
(1)  789/     3BB : CE 00               		adc	a,0
(1)  790/     3BD : 11 FA 1E            		ld	de,trkHdOut
(1)  791/     3C0 : D5                  		push	de
(1)  792/     3C1 : 01 06 00            		ld	bc,6			; thispoint, rowcount, nextpoint
(1)  793/     3C4 : CD 34 10            		call	transferRom
(1)  794/     3C7 : E1                  		pop	hl
(1)  795/     3C8 : 5E                  		ld	e,(hl)			; de - pointer increment
(1)  796/     3C9 : 23                  		inc	hl
(1)  797/     3CA : 56                  		ld	d,(hl)
(1)  798/     3CB : 23                  		inc	hl
(1)  799/     3CC : 4E                  		ld	c,(hl)			; bc - row count
(1)  800/     3CD : 23                  		inc	hl
(1)  801/     3CE : 46                  		ld	b,(hl)
(1)  802/     3CF : CF                  		rst	8
(1)  803/     3D0 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows to buffer
(1)  804/     3D3 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b	; on Tick pauses
(1)  805/     3D6 : C5                  		push	bc			; Save bc
(1)  806/     3D7 : CD 8E 14            		call	dac_fill
(1)  807/     3DA :                     
(1)  808/     3DA :                     	; Detect pattern size... last moment addition
(1)  809/     3DA :                     	; for patterns lower than 80h.
(1)  810/     3DA :                     	; This saves cycles if using SFX
(1)  811/     3DA :                     	; hl - next pattern point (includes final)
(1)  812/     3DA :                     	; de - this pattern
(1)  813/     3DA :                     	; bc - final size for transferRom
(1)  814/     3DA : 3A FE 1E            		ld	a,(trkHdOut+4)	; hl - de
(1)  815/     3DD : 6F                  		ld	l,a
(1)  816/     3DE : 3A FF 1E            		ld	a,(trkHdOut+5)
(1)  817/     3E1 : 67                  		ld	h,a
(1)  818/     3E2 : 3F                  		ccf			; remove carry first
(1)  819/     3E3 : ED 52               		sbc	hl,de
(1)  820/     3E5 : FD 4E 13            		ld	c,(iy+trk_status)
(1)  821/     3E8 : CB A1               		res	4,c
(1)  822/     3EA : 7C                  		ld	a,h		; h == 0?
(1)  823/     3EB : B7                  		or	a
(1)  824/     3EC :                     ; 		jp	m,$
(1)  825/     3EC : 20 04               		jr	nz,.szmuch
(1)  826/     3EE : CB 7D               		bit	7,l
(1)  827/     3F0 : 28 05               		jr	z,.szgood
(1)  828/     3F2 :                     .szmuch:
(1)  829/     3F2 : 21 80 00            		ld	hl,080h			; bc - max transfer size 080h
(1)  830/     3F5 : CB E1               		set	4,c
(1)  831/     3F7 :                     .szgood:
(1)  832/     3F7 : FD 71 13            		ld	(iy+trk_status),c
(1)  833/     3FA : 44                  		ld	b,h
(1)  834/     3FB : 4D                  		ld	c,l
(1)  835/     3FC : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - ROM pattern data pointer
(1)  836/     3FF : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1)  837/     402 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1)  838/     405 : 19                  		add	hl,de			; hl + de
(1)  839/     406 : CE 00               		adc	a,0			; and highest byte too.
(1)  840/     408 : CF                  		rst	8
(1)  841/     409 : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer for READ
(1)  842/     40C : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1)  843/     40F : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1)  844/     412 : FD 56 0D            		ld	d,(iy+(trk_Read+1))	; de - destination to data CACHE
(1)  845/     415 : FD 5E 0C            		ld	e,(iy+trk_Read)
(1)  846/     418 :                     ; 		ld	bc,080h			; bc - 080h
(1)  847/     418 : CD 34 10            		call	transferRom
(1)  848/     41B : CF                  		rst	8
(1)  849/     41C : C1                  		pop	bc			; Get bc back
(1)  850/     41D : E1                  		pop	hl			; hl too.
(1)  851/     41E : AF                  		xor	a			; return 0
(1)  852/     41F : C9                  		ret
(1)  853/     420 :                     
(1)  854/     420 :                     ; ----------------------------------------
(1)  855/     420 :                     ; First time playing or moving
(1)  856/     420 :                     ; to next track.
(1)  857/     420 :                     ; ----------------------------------------
(1)  858/     420 :                     
(1)  859/     420 :                     .effect_fill:
(1)  860/     420 : CD 8E 14            		call	dac_fill
(1)  861/     423 : CB A8               		res	5,b			; Reset refill-from-effect flag
(1)  862/     425 : FD 70 13            		ld	(iy+trk_status),b
(1)  863/     428 : CD 66 04            		call	.go_effect
(1)  864/     42B : C9                  		ret
(1)  865/     42C :                     
(1)  866/     42C :                     ; returns bc as row counter
(1)  867/     42C :                     .first_fill:
(1)  868/     42C : CD 8E 14            		call	dac_fill
(1)  869/     42F : CB B0               		res	6,b			; Reset FILL flag
(1)  870/     431 : FD 70 13            		ld	(iy+trk_status),b
(1)  871/     434 : FD E5               		push	iy
(1)  872/     436 : DD E1               		pop	ix			; copy iy to ix
(1)  873/     438 : 11 20 00            		ld	de,20h			; go to channel data
(1)  874/     43B : DD 19               		add	ix,de
(1)  875/     43D : CF                  		rst	8
(1)  876/     43E : 01 00 00            		ld	bc,0
(1)  877/     441 : 11 08 00            		ld	de,8
(1)  878/     444 : 06 12               		ld	b,MAX_TRKCHN
(1)  879/     446 :                     .clrf:
(1)  880/     446 : D5                  		push	de
(1)  881/     447 : C5                  		push	bc
(1)  882/     448 : CF                  		rst	8
(1)  883/     449 : CD DE 04            		call	trkout_unlk		; search and unlink last used channels
(1)  884/     44C : DD 36 02 00         		ld	(ix+chnl_Ins),0
(1)  885/     450 :                     ; 		ld	(ix+chnl_Note),-2
(1)  886/     450 :                     ; 		ld	(ix+chnl_Flags),1
(1)  887/     450 : CF                  		rst	8
(1)  888/     451 : C1                  		pop	bc
(1)  889/     452 : D1                  		pop	de
(1)  890/     453 :                     .dntslnce:
(1)  891/     453 : DD 19               		add	ix,de
(1)  892/     455 : 10 EF               		djnz	.clrf
(1)  893/     457 : 3E 01               		ld	a,1			; Request chip cleanup
(1)  894/     459 : 32 F9 1E            		ld	(flagResChip),a
(1)  895/     45C : FD 36 18 00         		ld	(iy+trk_rowPause),0	; Reset row timer
(1)  896/     460 : FD 7E 12            		ld	a,(iy+trk_setBlk)	; Set current block
(1)  897/     463 : FD 77 11            		ld 	(iy+trk_currBlk),a
(1)  898/     466 :                     
(1)  899/     466 :                     .go_effect:
(1)  900/     466 : CF                  		rst	8			; First cache fills
(1)  901/     467 : FD 6E 06            		ld	l,(iy+trk_romIns)	; Recieve almost 100h of instrument pointers
(1)  902/     46A : FD 66 07            		ld	h,(iy+(trk_romIns+1))	; NOTE: transferRom can't do 100h
(1)  903/     46D : FD 7E 08            		ld	a,(iy+(trk_romIns+2))
(1)  904/     470 : ED 5B BD 19         		ld	de,(currInsData)
(1)  905/     474 : 06 00               		ld	b,0
(1)  906/     476 : FD 4E 17            		ld	c,(iy+trk_sizeIns)
(1)  907/     479 : CD 34 10            		call	transferRom
(1)  908/     47C : CF                  		rst	8
(1)  909/     47D :                     ; 		ld	e,(iy+trk_CachHeads)	; de - Cache headers
(1)  910/     47D :                     ; 		ld	d,(iy+(trk_CachHeads+1))
(1)  911/     47D :                     ; 		ld	l,(iy+trk_romPatt)	; hl - ROM pattern data BASE
(1)  912/     47D :                     ; 		ld	h,(iy+(trk_romPatt+1))
(1)  913/     47D :                     ; 		ld	a,(iy+(trk_romPatt+2))
(1)  914/     47D :                     ; 		ld	bc,MAX_TRKHEADS
(1)  915/     47D :                     ; 		call	transferRom
(1)  916/     47D : FD 6E 1A            		ld	l,(iy+trk_CachNotes)	; Read first cache notes
(1)  917/     480 : FD 66 1B            		ld	h,(iy+(trk_CachNotes+1))
(1)  918/     483 : 11 80 00            		ld	de,80h
(1)  919/     486 : 19                  		add	hl,de
(1)  920/     487 : FD 75 0C            		ld	(iy+trk_Read),l
(1)  921/     48A : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  922/     48D :                     ; 		call	dac_fill
(1)  923/     48D : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1)  924/     490 : C3 7F 03            		jp	.set_track
(1)  925/     493 :                     
(1)  926/     493 :                     ; If -1, track ends
(1)  927/     493 :                     ; Automutes channels too.
(1)  928/     493 :                     .track_end:
(1)  929/     493 : E1                  		pop	hl			; Get hl back
(1)  930/     494 :                     .trkend_effC:
(1)  931/     494 : CD AA 04            		call	track_out
(1)  932/     497 : CF                  		rst	8
(1)  933/     498 : FD 36 13 00         		ld	(iy+trk_status),0	; Track status
(1)  934/     49C : FD 36 18 00         		ld	(iy+trk_rowPause),0
(1)  935/     4A0 : FD 36 14 00         		ld	(iy+trk_tickTmr),0
(1)  936/     4A4 : 01 00 00            		ld	bc,0			; Set bc rowcount to 0
(1)  937/     4A7 : 3E FF               		ld	a,-1			; Return -1
(1)  938/     4A9 : C9                  		ret
(1)  939/     4AA :                     
(1)  940/     4AA :                     ; ----------------------------------------
(1)  941/     4AA :                     ; Delete all track data
(1)  942/     4AA :                     ; ----------------------------------------
(1)  943/     4AA :                     
(1)  944/     4AA :                     track_out:
(1)  945/     4AA : FD E5               		push	iy
(1)  946/     4AC : DD E1               		pop	ix
(1)  947/     4AE : 11 20 00            		ld	de,20h
(1)  948/     4B1 : DD 19               		add	ix,de
(1)  949/     4B3 : CF                  		rst	8
(1)  950/     4B4 : 11 08 00            		ld	de,8
(1)  951/     4B7 : 06 12               		ld	b,MAX_TRKCHN
(1)  952/     4B9 :                     .clrfe:
(1)  953/     4B9 : D5                  		push	de
(1)  954/     4BA : C5                  		push	bc
(1)  955/     4BB : CD DE 04            		call	trkout_unlk
(1)  956/     4BE : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1)  957/     4C1 : B7                  		or	a
(1)  958/     4C2 : 28 0E               		jr	z,.nochip
(1)  959/     4C4 : DD 36 01 FE         		ld	(ix+chnl_Note),-2
(1)  960/     4C8 : DD 7E 07            		ld	a,(ix+chnl_Flags)
(1)  961/     4CB : E6 F0               		and	11110000b
(1)  962/     4CD : F6 01               		or	1
(1)  963/     4CF : DD 77 07            		ld	(ix+chnl_Flags),a
(1)  964/     4D2 :                     .nochip:
(1)  965/     4D2 : C1                  		pop	bc
(1)  966/     4D3 : D1                  		pop	de
(1)  967/     4D4 : DD 19               		add	ix,de
(1)  968/     4D6 : 10 E1               		djnz	.clrfe
(1)  969/     4D8 : 3E 01               		ld	a,1			; Request chip cleanup
(1)  970/     4DA : 32 F9 1E            		ld	(flagResChip),a
(1)  971/     4DD : C9                  		ret
(1)  972/     4DE :                     
(1)  973/     4DE :                     ; ----------------------------------------
(1)  974/     4DE :                     ; Unlink current channel
(1)  975/     4DE :                     ; ----------------------------------------
(1)  976/     4DE :                     
(1)  977/     4DE :                     trkout_unlk:
(1)  978/     4DE : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1)  979/     4E1 : B7                  		or	a
(1)  980/     4E2 : C8                  		ret	z
(1)  981/     4E3 : F0                  		ret	p
(1)  982/     4E4 : DD E5               		push	ix
(1)  983/     4E6 : D1                  		pop	de
(1)  984/     4E7 : 4F                  		ld	c,a
(1)  985/     4E8 : E6 F0               		and	11110000b
(1)  986/     4EA : FE 80               		cp	80h
(1)  987/     4EC : 28 15               		jr	z,.is_psg
(1)  988/     4EE : FE 90               		cp	90h
(1)  989/     4F0 : 28 22               		jr	z,.is_psgn
(1)  990/     4F2 : FE A0               		cp	0A0h		;
(1)  991/     4F4 : 28 39               		jr	z,.is_fm
(1)  992/     4F6 : FE B0               		cp	0B0h		; For FM3 special
(1)  993/     4F8 : 28 35               		jr	z,.is_fm
(1)  994/     4FA : FE C0               		cp	0C0h		; For FM6 DAC
(1)  995/     4FC : 28 31               		jr	z,.is_fm
(1)  996/     4FE : FE D0               		cp	0D0h		; For PWM
(1)  997/     500 : 28 28               		jr	z,.is_pwm
(1)  998/     502 : C9                  		ret
(1)  999/     503 :                     ; PSG/PSGN
(1) 1000/     503 :                     .is_psg:
(1) 1001/     503 : 06 00               		ld	b,0
(1) 1002/     505 : 79                  		ld	a,c
(1) 1003/     506 : E6 03               		and	011b
(1) 1004/     508 : 21 D6 19            		ld	hl,tblPSG
(1) 1005/     50B : CF                  		rst	8
(1) 1006/     50C : 87                  		add	a,a		; *08h
(1) 1007/     50D : 87                  		add	a,a
(1) 1008/     50E : 87                  		add	a,a
(1) 1009/     50F : 4F                  		ld	c,a
(1) 1010/     510 : CF                  		rst	8
(1) 1011/     511 : 09                  		add	hl,bc
(1) 1012/     512 : 18 03               		jr	.ispsg_c
(1) 1013/     514 :                     .is_psgn:
(1) 1014/     514 : 21 F0 19            		ld	hl,tblPSGN
(1) 1015/     517 :                     .ispsg_c:
(1) 1016/     517 : 7E                  		ld	a,(hl)
(1) 1017/     518 : BB                  		cp	e
(1) 1018/     519 : C0                  		ret	nz
(1) 1019/     51A : CF                  		rst	8
(1) 1020/     51B : 23                  		inc	hl
(1) 1021/     51C : 7E                  		ld	a,(hl)
(1) 1022/     51D : BA                  		cp	d
(1) 1023/     51E : C0                  		ret	nz
(1) 1024/     51F : 36 00               		ld	(hl),0
(1) 1025/     521 : 2B                  		dec	hl
(1) 1026/     522 : 36 00               		ld	(hl),0
(1) 1027/     524 : 79                  		ld	a,c
(1) 1028/     525 : FE 90               		cp	90h
(1) 1029/     527 : C8                  		ret	z
(1) 1030/     528 : CF                  		rst	8
(1) 1031/     529 : C9                  		ret
(1) 1032/     52A :                     ; FM
(1) 1033/     52A :                     .is_pwm:
(1) 1034/     52A : 21 2A 1A            		ld	hl,tblPWM
(1) 1035/     52D : 18 03               		jr	.tlb_cont
(1) 1036/     52F :                     .is_fm:
(1) 1037/     52F : 21 F8 19            		ld	hl,tblFM
(1) 1038/     532 :                     .tlb_cont:
(1) 1039/     532 : 79                  		ld	a,c
(1) 1040/     533 : E6 07               		and	000111b
(1) 1041/     535 : CF                  		rst	8
(1) 1042/     536 : 87                  		add	a,a		; *08h
(1) 1043/     537 : 87                  		add	a,a
(1) 1044/     538 : 87                  		add	a,a
(1) 1045/     539 : 06 00               		ld	b,0
(1) 1046/     53B : 4F                  		ld	c,a
(1) 1047/     53C : CF                  		rst	8
(1) 1048/     53D : 09                  		add	hl,bc
(1) 1049/     53E : 7E                  		ld	a,(hl)
(1) 1050/     53F : BB                  		cp	e
(1) 1051/     540 : C0                  		ret	nz
(1) 1052/     541 : CF                  		rst	8
(1) 1053/     542 : 23                  		inc	hl
(1) 1054/     543 : 7E                  		ld	a,(hl)
(1) 1055/     544 : BA                  		cp	d
(1) 1056/     545 : C0                  		ret	nz
(1) 1057/     546 : 36 00               		ld	(hl),0
(1) 1058/     548 : 2B                  		dec	hl
(1) 1059/     549 : 36 00               		ld	(hl),0
(1) 1060/     54B : C9                  		ret
(1) 1061/     54C :                     
(1) 1062/     54C :                     ; --------------------------------------------------------
(1) 1063/     54C :                     ; ** 32X ONLY ***
(1) 1064/     54C :                     ; Communicate to Slave SH2 to play
(1) 1065/     54C :                     ; PWM sound channels
(1) 1066/     54C :                     ; --------------------------------------------------------
(1) 1067/     54C :                     
(1) 1068/     54C :                     mars_scomm:
(1) 1069/     54C : 21 00 60            		ld	hl,6000h	; Point BANK closely
(1) 1070/     54F : CF                  		rst	8		; to the 32X area
(1) 1071/     550 : 36 00               		ld	(hl),0
(1) 1072/     552 : 36 01               		ld	(hl),1
(1) 1073/     554 : 36 00               		ld	(hl),0
(1) 1074/     556 : 36 00               		ld	(hl),0
(1) 1075/     558 : CF                  		rst	8
(1) 1076/     559 : 36 00               		ld	(hl),0
(1) 1077/     55B : 36 00               		ld	(hl),0
(1) 1078/     55D : 36 01               		ld	(hl),1
(1) 1079/     55F : 36 00               		ld	(hl),0
(1) 1080/     561 : 36 01               		ld	(hl),1
(1) 1081/     563 : CF                  		rst	8
(1) 1082/     564 : FD 21 00 D1         		ld	iy,5100h|8000h	; iy - mars sysreg
(1) 1083/     568 : DD 21 64 1A         		ld	ix,pwmcom
(1) 1084/     56C : 3A 20 00            		ld	a,(marsBlock)	; block MARS requests?
(1) 1085/     56F : B7                  		or	a
(1) 1086/     570 : 20 4D               		jr	nz,.blocked
(1) 1087/     572 : 3A C6 19            		ld	a,(marsUpd)	; update?
(1) 1088/     575 : B7                  		or	a
(1) 1089/     576 : C8                  		ret	z
(1) 1090/     577 : CF                  		rst	8
(1) 1091/     578 : AF                  		xor	a
(1) 1092/     579 : 32 C6 19            		ld	(marsUpd),a
(1) 1093/     57C :                     
(1) 1094/     57C :                     .wait_enter:
(1) 1095/     57C : 00                  		nop
(1) 1096/     57D : FD 7E 2F            		ld	a,(iy+comm15)	; check if we got mid-process
(1) 1097/     580 : E6 30               		and	00110000b
(1) 1098/     582 : B7                  		or	a
(1) 1099/     583 : 20 F7               		jr	nz,.wait_enter
(1) 1100/     585 : FD CB 03 CE         		set	1,(iy+standby)
(1) 1101/     589 : FD CB 03 4E         .wait_cmd:	bit	1,(iy+standby)	; Request Slave CMD
(1) 1102/     58D : 20 FA               		jr	nz,.wait_cmd
(1) 1103/     58F : 0E 04               		ld	c,4		; c - Passes
(1) 1104/     591 :                     .next_pass:
(1) 1105/     591 : FD E5               		push	iy
(1) 1106/     593 : E1                  		pop	hl
(1) 1107/     594 : CF                  		rst	8
(1) 1108/     595 : 11 20 00            		ld	de,comm0
(1) 1109/     598 : 19                  		add	hl,de
(1) 1110/     599 : 06 07               		ld	b,7
(1) 1111/     59B :                     .next_comm:
(1) 1112/     59B : DD 56 00            		ld	d,(ix)
(1) 1113/     59E : DD 5E 01            		ld	e,(ix+1)
(1) 1114/     5A1 : DD 23               		inc	ix
(1) 1115/     5A3 : DD 23               		inc	ix
(1) 1116/     5A5 : CF                  		rst	8
(1) 1117/     5A6 : 72                  		ld	(hl),d
(1) 1118/     5A7 : 23                  		inc	hl
(1) 1119/     5A8 : 73                  		ld	(hl),e
(1) 1120/     5A9 : 23                  		inc	hl
(1) 1121/     5AA : 10 EF               		djnz	.next_comm
(1) 1122/     5AC : FD 7E 2F            		ld	a,(iy+comm15)	; Send CLK to Slave CMD
(1) 1123/     5AF : CB FF               		set	7,a
(1) 1124/     5B1 : FD 77 2F            		ld	(iy+comm15),a
(1) 1125/     5B4 : CF                  		rst	8
(1) 1126/     5B5 :                     .w_pass2:
(1) 1127/     5B5 : FD 7E 2F            		ld	a,(iy+comm15)	; CLK cleared?
(1) 1128/     5B8 : CB 7F               		bit	7,a
(1) 1129/     5BA : 20 F9               		jr	nz,.w_pass2
(1) 1130/     5BC : 0D                  		dec	c
(1) 1131/     5BD : 20 D2               		jr	nz,.next_pass
(1) 1132/     5BF :                     
(1) 1133/     5BF :                     ; clear COM bits
(1) 1134/     5BF :                     .blocked:
(1) 1135/     5BF : 21 64 1A            		ld	hl,pwmcom
(1) 1136/     5C2 : 06 07               		ld	b,7
(1) 1137/     5C4 :                     .clrcom:
(1) 1138/     5C4 : 36 00               		ld	(hl),0
(1) 1139/     5C6 : 23                  		inc	hl
(1) 1140/     5C7 : 10 FB               		djnz	.clrcom
(1) 1141/     5C9 : C9                  		ret
(1) 1142/     5CA :                     
(1) 1143/     5CA :                     ; --------------------------------------------------------
(1) 1144/     5CA :                     ; Set and play instruments in their respective channels
(1) 1145/     5CA :                     ; --------------------------------------------------------
(1) 1146/     5CA :                     
(1) 1147/     5CA :                     setupchip:
(1) 1148/     5CA : 21 BB 18            		ld	hl,insDataC_0
(1) 1149/     5CD : FD 21 00 1E         		ld	iy,trkBuff_0		; iy - Tracker channels
(1) 1150/     5D1 : CD 24 06            		call	.mk_chip
(1) 1151/     5D4 : 21 3B 19            		ld	hl,insDataC_1
(1) 1152/     5D7 : FD 21 00 1F         		ld	iy,trkBuff_1
(1) 1153/     5DB : CD 24 06            		call	.mk_chip
(1) 1154/     5DE :                     
(1) 1155/     5DE :                     	; Check if there's floating
(1) 1156/     5DE :                     	; channels to auto-mute by request
(1) 1157/     5DE : 3A F9 1E            		ld	a,(flagResChip)
(1) 1158/     5E1 : B7                  		or	a
(1) 1159/     5E2 : C8                  		ret	z
(1) 1160/     5E3 : AF                  		xor	a
(1) 1161/     5E4 : 32 F9 1E            		ld	(flagResChip),a
(1) 1162/     5E7 : FD 21 2A 1A         		ld	iy,tblPWM	; 32X only
(1) 1163/     5EB : DD 21 64 1A         		ld	ix,pwmcom
(1) 1164/     5EF :                     ; 		ld	b,0D0h
(1) 1165/     5EF : CD 70 06            		call	.silnc_list
(1) 1166/     5F2 : 3E 01               		ld	a,1
(1) 1167/     5F4 : CF                  		rst	8
(1) 1168/     5F5 : 32 C6 19            		ld	(marsUpd),a
(1) 1169/     5F8 : FD 21 20 1A         		ld	iy,tblFM6
(1) 1170/     5FC : DD 21 B6 18         		ld	ix,daccom
(1) 1171/     600 :                     ; 		ld	b,0C0h
(1) 1172/     600 : CD 49 06            		call	.silnc_singl
(1) 1173/     603 : FD 21 F0 19         		ld	iy,tblPSGN
(1) 1174/     607 : DD 21 65 17         		ld	ix,psgcom+3
(1) 1175/     60B :                     ; 		ld	b,90h
(1) 1176/     60B : CD 49 06            		call	.silnc_singl
(1) 1177/     60E : CF                  		rst	8
(1) 1178/     60F : FD 21 F8 19         		ld	iy,tblFM	; silence floating channels
(1) 1179/     613 : DD 21 96 17         		ld	ix,fmcom	; includes FM3 special
(1) 1180/     617 :                     ; 		ld	b,0A0h
(1) 1181/     617 : CD 70 06            		call	.silnc_list
(1) 1182/     61A : FD 21 D6 19         		ld	iy,tblPSG
(1) 1183/     61E : DD 21 62 17         		ld	ix,psgcom
(1) 1184/     622 :                     ; 		ld	b,080h
(1) 1185/     622 : 18 4C               		jr	.silnc_list
(1) 1186/     624 :                     .mk_chip:
(1) 1187/     624 : FD 7E 13            		ld	a,(iy+trk_status)
(1) 1188/     627 : B7                  		or	a
(1) 1189/     628 : F0                  		ret	p
(1) 1190/     629 : 22 BD 19            		ld	(currInsData),hl
(1) 1191/     62C : FD 22 C3 19         		ld	(currTrkCtrl),iy
(1) 1192/     630 :                     ; 		rst	8
(1) 1193/     630 : 11 20 00            		ld	de,20h
(1) 1194/     633 : FD 19               		add	iy,de
(1) 1195/     635 : 06 12               		ld	b,MAX_TRKCHN
(1) 1196/     637 :                     .nxt_chnl:
(1) 1197/     637 : FD 7E 07            		ld	a,(iy+chnl_Flags)	; Get status bits
(1) 1198/     63A : E6 0F               		and	00001111b
(1) 1199/     63C : B7                  		or	a			; Check for non-zero
(1) 1200/     63D : C4 A8 06            		call	nz,.do_chnl
(1) 1201/     640 : CF                  		rst	8
(1) 1202/     641 : 11 08 00            		ld	de,8			; Next CHANNEL
(1) 1203/     644 : FD 19               		add	iy,de
(1) 1204/     646 : 10 EF               		djnz	.nxt_chnl
(1) 1205/     648 : C9                  		ret
(1) 1206/     649 :                     
(1) 1207/     649 :                     ; ----------------------------------------
(1) 1208/     649 :                     ; iy - table
(1) 1209/     649 :                     ; ix - chip com port
(1) 1210/     649 :                     ;  b - target ID
(1) 1211/     649 :                     ;  c - ignore ID
(1) 1212/     649 :                     .silnc_singl:
(1) 1213/     649 : FD 7E 01            		ld	a,(iy+1)	; Get link MSB
(1) 1214/     64C : CF                  		rst	8
(1) 1215/     64D : 67                  		ld	h,a		; hl - link
(1) 1216/     64E : FD 6E 00            		ld	l,(iy)
(1) 1217/     651 : 7E                  		ld	a,(hl)		; *** DIRECT chnl_Chip
(1) 1218/     652 : 5F                  		ld	e,a
(1) 1219/     653 : B7                  		or	a
(1) 1220/     654 : 28 06               		jr	z,.fltin_s
(1) 1221/     656 : CF                  		rst	8
(1) 1222/     657 : 7B                  		ld	a,e
(1) 1223/     658 : E6 F0               		and	11110000b
(1) 1224/     65A : B8                  		cp	b
(1) 1225/     65B : C0                  		ret 	nz
(1) 1226/     65C :                     .fltin_s:
(1) 1227/     65C : DD E5               		push	ix
(1) 1228/     65E : E1                  		pop	hl
(1) 1229/     65F : 19                  		add	hl,de
(1) 1230/     660 : 7E                  		ld	a,(hl)		; already set?
(1) 1231/     661 : E6 07               		and	0111b
(1) 1232/     663 : B7                  		or	a
(1) 1233/     664 : C0                  		ret	nz
(1) 1234/     665 : 36 04               		ld	(hl),100b
(1) 1235/     667 : FD 36 00 00         		ld	(iy),0
(1) 1236/     66B : FD 36 01 00         		ld	(iy+1),0
(1) 1237/     66F :                     ; 		ld	(iy+3),0
(1) 1238/     66F :                     ; 		ld	(iy+4),0
(1) 1239/     66F :                     ; 		ld	(iy+5),0
(1) 1240/     66F :                     ; 		ld	(iy+6),0
(1) 1241/     66F :                     ; 		ld	(iy+7),0
(1) 1242/     66F : C9                  		ret
(1) 1243/     670 :                     .silnc_list:
(1) 1244/     670 : FD 7E 01            		ld	a,(iy+1)	; Get link MSB
(1) 1245/     673 : FE FF               		cp	-1		; if 0FFxxh, end
(1) 1246/     675 : C8                  		ret	z
(1) 1247/     676 : B7                  		or	a		; if 00xx, mute it
(1) 1248/     677 : 28 0A               		jr	z,.flotin
(1) 1249/     679 : 67                  		ld	h,a		; hl - link
(1) 1250/     67A : FD 6E 00            		ld	l,(iy)
(1) 1251/     67D : 7E                  		ld	a,(hl)		; *** DIRECT chnl_Chip
(1) 1252/     67E : E6 F0               		and	11110000b
(1) 1253/     680 : B7                  		or	a
(1) 1254/     681 : 20 1E               		jr	nz,.busy
(1) 1255/     683 :                     ; 		and	11110000b
(1) 1256/     683 :                     ; 		cp	b
(1) 1257/     683 :                     ; 		jr	z,.busy
(1) 1258/     683 :                     
(1) 1259/     683 :                     .flotin:
(1) 1260/     683 : CF                  		rst	8
(1) 1261/     684 : FD 7E 02            		ld	a,(iy+2)
(1) 1262/     687 : E6 07               		and	000111b		;
(1) 1263/     689 : 16 00               		ld	d,0
(1) 1264/     68B : 5F                  		ld	e,a
(1) 1265/     68C : CF                  		rst	8
(1) 1266/     68D : DD E5               		push	ix
(1) 1267/     68F : E1                  		pop	hl
(1) 1268/     690 : 19                  		add	hl,de
(1) 1269/     691 : 7E                  		ld	a,(hl)		; already set?
(1) 1270/     692 : E6 07               		and	0111b
(1) 1271/     694 : B7                  		or	a
(1) 1272/     695 : 20 0A               		jr	nz,.busy
(1) 1273/     697 : 36 04               		ld	(hl),100b
(1) 1274/     699 : FD 36 00 00         		ld	(iy),0
(1) 1275/     69D : FD 36 01 00         		ld	(iy+1),0
(1) 1276/     6A1 :                     ; 		ld	(iy+3),0
(1) 1277/     6A1 :                     ; 		ld	(iy+4),0
(1) 1278/     6A1 :                     ; 		ld	(iy+5),0
(1) 1279/     6A1 :                     ; 		ld	(iy+6),0
(1) 1280/     6A1 :                     ; 		ld	(iy+7),0
(1) 1281/     6A1 :                     .busy:
(1) 1282/     6A1 : 11 08 00            		ld	de,8
(1) 1283/     6A4 : FD 19               		add	iy,de
(1) 1284/     6A6 : 18 C8               		jr	.silnc_list
(1) 1285/     6A8 :                     
(1) 1286/     6A8 :                     ; ----------------------------------------
(1) 1287/     6A8 :                     ; Channel requested update
(1) 1288/     6A8 :                     ;
(1) 1289/     6A8 :                     ; iy - Current channel
(1) 1290/     6A8 :                     ; ----------------------------------------
(1) 1291/     6A8 :                     
(1) 1292/     6A8 :                     .do_chnl:
(1) 1293/     6A8 : C5                  		push	bc
(1) 1294/     6A9 : CD 93 0E            		call	.check_ins
(1) 1295/     6AC : FE FF               		cp	-1
(1) 1296/     6AE : 28 3B               		jr	z,.no_chnl
(1) 1297/     6B0 : CD A3 0D            		call	.chip_swap	; check if tracker channel swapped chip
(1) 1298/     6B3 : CD A6 0E            		call	.check_chnl	; a - chip requested
(1) 1299/     6B6 : FE FF               		cp	-1		; Ran out of chip channels.
(1) 1300/     6B8 : 28 27               		jr	z,.ran_out
(1) 1301/     6BA : 22 C1 19            		ld	(currInsPos),hl
(1) 1302/     6BD : DD 22 BF 19         		ld	(currTblPos),ix
(1) 1303/     6C1 : CD 8E 14            		call	dac_fill
(1) 1304/     6C4 : FD CB 07 4E         		bit	1,(iy+chnl_Flags)
(1) 1305/     6C8 : C4 F4 06            		call	nz,.req_ins
(1) 1306/     6CB : FD CB 07 56         		bit	2,(iy+chnl_Flags)
(1) 1307/     6CF : C4 51 08            		call	nz,.req_vol
(1) 1308/     6D2 : CF                  		rst	8
(1) 1309/     6D3 : FD CB 07 5E         		bit	3,(iy+chnl_Flags)
(1) 1310/     6D7 : C4 EC 08            		call	nz,.req_eff
(1) 1311/     6DA : FD CB 07 46         		bit	0,(iy+chnl_Flags)
(1) 1312/     6DE : C4 48 0B            		call	nz,.req_note
(1) 1313/     6E1 :                     ; 		ld	a,(iy+chnl_Flags)	; Instrument+effect also allowed.
(1) 1314/     6E1 :                     ; 		and	1010b
(1) 1315/     6E1 :                     ; 		or	a
(1) 1316/     6E1 :                     ; 		call	nz,.req_note
(1) 1317/     6E1 :                     
(1) 1318/     6E1 :                     .ran_out:
(1) 1319/     6E1 : FD 7E 07            		ld	a,(iy+chnl_Flags)	; Clear status bits
(1) 1320/     6E4 : E6 F0               		and	11110000b
(1) 1321/     6E6 : FD 77 07            		ld	(iy+chnl_Flags),a
(1) 1322/     6E9 : C1                  		pop	bc
(1) 1323/     6EA : C9                  		ret
(1) 1324/     6EB :                     .no_chnl:
(1) 1325/     6EB : CD A3 0D            		call	.chip_swap		; TODO: check if this breaks.
(1) 1326/     6EE : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1327/     6F2 :                     ; 		ld	(ix+chnl_Flags),0
(1) 1328/     6F2 : C1                  		pop	bc
(1) 1329/     6F3 : C9                  		ret
(1) 1330/     6F4 :                     
(1) 1331/     6F4 :                     ; ----------------------------------------
(1) 1332/     6F4 :                     ; bit 1: Intrument
(1) 1333/     6F4 :                     ; ----------------------------------------
(1) 1334/     6F4 :                     
(1) 1335/     6F4 :                     .req_ins:
(1) 1336/     6F4 : 2A C1 19            		ld	hl,(currInsPos)
(1) 1337/     6F7 : DD 2A BF 19         		ld	ix,(currTblPos)
(1) 1338/     6FB : 7E                  		ld	a,(hl)
(1) 1339/     6FC : E6 F0               		and	11110000b
(1) 1340/     6FE : FE 80               		cp	80h		; PSG normal
(1) 1341/     700 : 28 5A               		jr	z,.ins_psg
(1) 1342/     702 : FE 90               		cp	90h		; PSG noise
(1) 1343/     704 : 28 50               		jr	z,.ins_psgn
(1) 1344/     706 : CF                  		rst	8
(1) 1345/     707 : FE A0               		cp	0A0h		; FM normal
(1) 1346/     709 : CA D4 07            		jp	z,.ins_fm
(1) 1347/     70C : FE B0               		cp	0B0h		; FM special
(1) 1348/     70E : CA C5 07            		jp	z,.ins_fm3
(1) 1349/     711 : FE C0               		cp	0C0h		; DAC
(1) 1350/     713 : 28 76               		jr	z,.ins_dac
(1) 1351/     715 : FE D0               		cp	0D0h		; PWM
(1) 1352/     717 : CA 1B 07            		jp	z,.ins_pwm
(1) 1353/     71A : C9                  		ret
(1) 1354/     71B :                     
(1) 1355/     71B :                     ; --------------------------------
(1) 1356/     71B :                     ; FM,FM3,FM6
(1) 1357/     71B :                     ; --------------------------------
(1) 1358/     71B :                     
(1) 1359/     71B :                     .ins_pwm:
(1) 1360/     71B : 56                  		ld	d,(hl)		; d - Flags
(1) 1361/     71C : 23                  		inc	hl
(1) 1362/     71D : 7E                  		ld	a,(hl)		; Save pitch
(1) 1363/     71E : 23                  		inc	hl
(1) 1364/     71F : DD 77 03            		ld	(ix+3),a
(1) 1365/     722 : DD 7E 02            		ld	a,(ix+2)
(1) 1366/     725 : DD 21 64 1A         		ld	ix,pwmcom	; ix - pwmcom
(1) 1367/     729 : E6 07               		and	000111b
(1) 1368/     72B : 06 00               		ld	b,0
(1) 1369/     72D : 4F                  		ld	c,a
(1) 1370/     72E : DD 09               		add	ix,bc
(1) 1371/     730 : 7E                  		ld	a,(hl)		; SH2 BANK
(1) 1372/     731 : 23                  		inc	hl
(1) 1373/     732 : E6 0F               		and	00001111b
(1) 1374/     734 : 47                  		ld	b,a		; b - Section, ROM or SDRAM
(1) 1375/     735 : DD 7E 18            		ld	a,(ix+PWOUTF)
(1) 1376/     738 : E6 30               		and	00110000b	; keep flag LR
(1) 1377/     73A : 4F                  		ld	c,a		; save them as C
(1) 1378/     73B : 7A                  		ld	a,d
(1) 1379/     73C : E6 03               		and	00000011b	; Stereo|Loop bits
(1) 1380/     73E : 0F                  		rrca			; carry...
(1) 1381/     73F : 0F                  		rrca
(1) 1382/     740 : B1                  		or	c
(1) 1383/     741 : B0                  		or	b
(1) 1384/     742 : DD 77 18            		ld	(ix+PWOUTF),a
(1) 1385/     745 : 7E                  		ld	a,(hl)		; Grab the 24-bit address (BIG endian)
(1) 1386/     746 : 23                  		inc	hl
(1) 1387/     747 : DD 77 20            		ld	(ix+PWINSH),a
(1) 1388/     74A : CF                  		rst	8
(1) 1389/     74B : 7E                  		ld	a,(hl)
(1) 1390/     74C : 23                  		inc	hl
(1) 1391/     74D : DD 77 28            		ld	(ix+PWINSM),a
(1) 1392/     750 : 7E                  		ld	a,(hl)
(1) 1393/     751 : 23                  		inc	hl
(1) 1394/     752 : DD 77 30            		ld	(ix+PWINSL),a
(1) 1395/     755 : C9                  		ret
(1) 1396/     756 :                     
(1) 1397/     756 :                     ; --------------------------------
(1) 1398/     756 :                     ; PSG1-3,PSGN
(1) 1399/     756 :                     ; --------------------------------
(1) 1400/     756 :                     
(1) 1401/     756 :                     .ins_psgn:
(1) 1402/     756 : 7E                  		ld	a,(hl)		; Extra bits for NOISE
(1) 1403/     757 : E6 07               		and	111b
(1) 1404/     759 : DD 77 04            		ld	(ix+4),a
(1) 1405/     75C :                     .ins_psg:
(1) 1406/     75C : CF                  		rst	8
(1) 1407/     75D : 23                  		inc	hl		; Skip ID
(1) 1408/     75E : 7E                  		ld	a,(hl)
(1) 1409/     75F : DD 77 03            		ld	(ix+3),a	; Save pitch
(1) 1410/     762 : 23                  		inc	hl
(1) 1411/     763 : DD 7E 02            		ld	a,(ix+2)
(1) 1412/     766 : E6 03               		and	11b
(1) 1413/     768 : 16 00               		ld	d,0
(1) 1414/     76A : 5F                  		ld	e,a
(1) 1415/     76B : DD 21 62 17         		ld	ix,psgcom
(1) 1416/     76F : DD 19               		add	ix,de
(1) 1417/     771 : 7E                  		ld	a,(hl)
(1) 1418/     772 :                     
(1) 1419/     772 :                     	; TODO: ponerlos en un buffer separado
(1) 1420/     772 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 1421/     775 : 23                  		inc	hl
(1) 1422/     776 : 7E                  		ld	a,(hl)
(1) 1423/     777 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 1424/     77A : 23                  		inc	hl
(1) 1425/     77B : CF                  		rst	8
(1) 1426/     77C : 7E                  		ld	a,(hl)
(1) 1427/     77D : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 1428/     780 : 23                  		inc	hl
(1) 1429/     781 : 7E                  		ld	a,(hl)
(1) 1430/     782 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 1431/     785 : 23                  		inc	hl
(1) 1432/     786 : 7E                  		ld	a,(hl)
(1) 1433/     787 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 1434/     78A : C9                  		ret
(1) 1435/     78B :                     
(1) 1436/     78B :                     ; --------------------------------
(1) 1437/     78B :                     ; FM,FM3,FM6
(1) 1438/     78B :                     ; --------------------------------
(1) 1439/     78B :                     
(1) 1440/     78B :                     .ins_dac:
(1) 1441/     78B : DD 36 04 01         		ld	(ix+4),1	; e - alternate mode flag (FM6 as DAC)
(1) 1442/     78F : 7E                  		ld	a,(hl)		; Grab flags from ID
(1) 1443/     790 : E6 01               		and	001b
(1) 1444/     792 : 32 D5 19            		ld	(wave_Flags),a
(1) 1445/     795 : 23                  		inc	hl
(1) 1446/     796 : 7E                  		ld	a,(hl)		; Save pitch
(1) 1447/     797 : DD 77 03            		ld	(ix+3),a
(1) 1448/     79A : 23                  		inc	hl
(1) 1449/     79B : 4E                  		ld	c,(hl)		; Grab the 24-bit address
(1) 1450/     79C : 23                  		inc	hl		; big endian this time.
(1) 1451/     79D : CF                  		rst	8
(1) 1452/     79E : 56                  		ld	d,(hl)
(1) 1453/     79F : 23                  		inc	hl
(1) 1454/     7A0 : 5E                  		ld	e,(hl)
(1) 1455/     7A1 :                     
(1) 1456/     7A1 : CF                  		rst	8
(1) 1457/     7A2 : 6B                  		ld	l,e
(1) 1458/     7A3 : 62                  		ld	h,d
(1) 1459/     7A4 : 79                  		ld	a,c
(1) 1460/     7A5 : E5                  		push	hl		; Recieve LEN and LOOP
(1) 1461/     7A6 : F5                  		push	af		; from the WAVE itself
(1) 1462/     7A7 : 11 CD 19            		ld	de,wave_Len
(1) 1463/     7AA : 01 06 00            		ld	bc,6
(1) 1464/     7AD : CF                  		rst	8
(1) 1465/     7AE : CD 34 10            		call	transferRom
(1) 1466/     7B1 : F1                  		pop	af
(1) 1467/     7B2 : E1                  		pop	hl
(1) 1468/     7B3 : 01 06 00            		ld	bc,6		; skip LEN point
(1) 1469/     7B6 : 09                  		add	hl,bc
(1) 1470/     7B7 : CE 00               		adc	a,0
(1) 1471/     7B9 : 22 CA 19            		ld	(wave_Start),hl	; save START point
(1) 1472/     7BC : 32 CC 19            		ld	(wave_Start+2),a
(1) 1473/     7BF : 3E 04               		ld	a,100b		; Force FM6 off
(1) 1474/     7C1 : 32 9B 17            		ld	(fmcom+5),a
(1) 1475/     7C4 : C9                  		ret
(1) 1476/     7C5 :                     
(1) 1477/     7C5 :                     ; FM3 special mode
(1) 1478/     7C5 :                     .ins_fm3:
(1) 1479/     7C5 : 3E 02               		ld	a,2		; manual index
(1) 1480/     7C7 : 1E 01               		ld	e,1		; set as alternate FM
(1) 1481/     7C9 : CD FF 07            		call	.rd_fmins
(1) 1482/     7CC : 21 98 17            		ld	hl,fmcom+2
(1) 1483/     7CF : 7E                  		ld	a,(hl)		; instrument update bit
(1) 1484/     7D0 : F6 10               		or	00010000b	; flag
(1) 1485/     7D2 : 77                  		ld	(hl),a
(1) 1486/     7D3 : C9                  		ret
(1) 1487/     7D4 :                     ; Regular FM
(1) 1488/     7D4 :                     .ins_fm:
(1) 1489/     7D4 : CF                  		rst	8
(1) 1490/     7D5 : 1E 00               		ld	e,0		; Set as normal FM
(1) 1491/     7D7 : DD 7E 02            		ld	a,(ix+2)
(1) 1492/     7DA : E6 07               		and	00000111b
(1) 1493/     7DC : FE 05               		cp	5		; Check if we are on FM6
(1) 1494/     7DE : 20 08               		jr	nz,.not_prdac
(1) 1495/     7E0 : 57                  		ld	d,a
(1) 1496/     7E1 : 3E 04               		ld	a,100b		; Force DAC stop
(1) 1497/     7E3 : CF                  		rst	8
(1) 1498/     7E4 : 32 B6 18            		ld	(daccom),a
(1) 1499/     7E7 : 7A                  		ld	a,d
(1) 1500/     7E8 :                     .not_prdac:
(1) 1501/     7E8 : 1E 00               		ld	e,0		; Set as Normal
(1) 1502/     7EA : CD FF 07            		call	.rd_fmins
(1) 1503/     7ED : DD 7E 02            		ld	a,(ix+2)
(1) 1504/     7F0 : E6 07               		and	00000111b
(1) 1505/     7F2 : 16 00               		ld	d,0
(1) 1506/     7F4 : CF                  		rst	8
(1) 1507/     7F5 : 5F                  		ld	e,a
(1) 1508/     7F6 : 21 96 17            		ld	hl,fmcom
(1) 1509/     7F9 : 19                  		add	hl,de
(1) 1510/     7FA : 7E                  		ld	a,(hl)		; instrument update bit
(1) 1511/     7FB : F6 10               		or	00010000b	; flag
(1) 1512/     7FD : 77                  		ld	(hl),a
(1) 1513/     7FE : C9                  		ret
(1) 1514/     7FF :                     
(1) 1515/     7FF :                     ; Read FM instrument
(1) 1516/     7FF :                     ;
(1) 1517/     7FF :                     ; e - alternate mode flag
(1) 1518/     7FF :                     .rd_fmins:
(1) 1519/     7FF : DD 73 04            		ld	(ix+4),e	; e - alternate mode flag
(1) 1520/     802 : 23                  		inc	hl		; skip ID and pitch
(1) 1521/     803 : 5E                  		ld	e,(hl)
(1) 1522/     804 : DD 73 03            		ld	(ix+3),e	; save pitch
(1) 1523/     807 : 23                  		inc	hl
(1) 1524/     808 : 87                  		add	a,a
(1) 1525/     809 : 16 00               		ld	d,0
(1) 1526/     80B : 5F                  		ld	e,a
(1) 1527/     80C : CF                  		rst	8
(1) 1528/     80D : E5                  		push	hl		; save ins hl
(1) 1529/     80E : 21 45 08            		ld	hl,.fmpickins
(1) 1530/     811 : 19                  		add	hl,de
(1) 1531/     812 : 5E                  		ld	e,(hl)		; get output location
(1) 1532/     813 : 23                  		inc	hl		; from list
(1) 1533/     814 : 56                  		ld	d,(hl)
(1) 1534/     815 : CF                  		rst	8
(1) 1535/     816 : E1                  		pop	hl
(1) 1536/     817 : 7E                  		ld	a,(hl)		; a - xx0000
(1) 1537/     818 : 23                  		inc	hl
(1) 1538/     819 : 4E                  		ld	c,(hl)		; c - 00xx00
(1) 1539/     81A : 23                  		inc	hl
(1) 1540/     81B : 6E                  		ld	l,(hl)		; l - 0000xx
(1) 1541/     81C : 61                  		ld	h,c		; c to h
(1) 1542/     81D : D5                  		push	de
(1) 1543/     81E : CF                  		rst	8
(1) 1544/     81F : 4F                  		ld	c,a
(1) 1545/     820 : DD 7E 07            		ld	a,(ix+7)
(1) 1546/     823 : B9                  		cp	c
(1) 1547/     824 : 20 0C               		jr	nz,.confm_rd
(1) 1548/     826 : DD 7E 06            		ld	a,(ix+6)
(1) 1549/     829 : BC                  		cp	h
(1) 1550/     82A : 20 06               		jr	nz,.confm_rd
(1) 1551/     82C : DD 7E 05            		ld	a,(ix+5)
(1) 1552/     82F : BD                  		cp	l
(1) 1553/     830 : 28 11               		jr	z,.fmsame_ins
(1) 1554/     832 :                     .confm_rd:
(1) 1555/     832 : CF                  		rst	8
(1) 1556/     833 : DD 75 05            		ld	(ix+5),l
(1) 1557/     836 : DD 74 06            		ld	(ix+6),h
(1) 1558/     839 : DD 71 07            		ld	(ix+7),c
(1) 1559/     83C : 79                  		ld	a,c
(1) 1560/     83D : 01 28 00            		ld	bc,028h		; 28h bytes
(1) 1561/     840 : CD 34 10            		call	transferRom	; Transfer instrument data from ROM
(1) 1562/     843 :                     .fmsame_ins:
(1) 1563/     843 : E1                  		pop	hl
(1) 1564/     844 : C9                  		ret
(1) 1565/     845 :                     
(1) 1566/     845 :                     ; manual location for each instr cache
(1) 1567/     845 :                     ; 28h bytes each
(1) 1568/     845 :                     .fmpickins:
(1) 1569/     845 : BA 17               		dw fmins_com
(1) 1570/     847 : E2 17               		dw fmins_com2
(1) 1571/     849 : 0A 18               		dw fmins_com3
(1) 1572/     84B : 32 18               		dw fmins_com4
(1) 1573/     84D : 5A 18               		dw fmins_com5
(1) 1574/     84F : 82 18               		dw fmins_com6
(1) 1575/     851 :                     
(1) 1576/     851 :                     ; ----------------------------------------
(1) 1577/     851 :                     ; bit 2
(1) 1578/     851 :                     ; ----------------------------------------
(1) 1579/     851 :                     
(1) 1580/     851 :                     .req_vol:
(1) 1581/     851 : 2A C1 19            		ld	hl,(currInsPos)
(1) 1582/     854 : DD 2A BF 19         		ld	ix,(currTblPos)
(1) 1583/     858 : 7E                  		ld	a,(hl)
(1) 1584/     859 : E6 F0               		and	11110000b
(1) 1585/     85B : FE 80               		cp	80h		; PSG normal
(1) 1586/     85D : 28 45               		jr	z,.vol_psg
(1) 1587/     85F : FE 90               		cp	90h		; PSG noise
(1) 1588/     861 : 28 41               		jr	z,.vol_psg
(1) 1589/     863 : CF                  		rst	8
(1) 1590/     864 : FE A0               		cp	0A0h		; FM normal
(1) 1591/     866 : 28 5F               		jr	z,.vol_fm
(1) 1592/     868 : FE B0               		cp	0B0h		; FM special (same thing)
(1) 1593/     86A : 28 5B               		jr	z,.vol_fm
(1) 1594/     86C :                     ; 		cp	0C0h		; DAC
(1) 1595/     86C :                     ; 		jr	z,.vol_dac
(1) 1596/     86C : FE D0               		cp	0D0h		; PWM
(1) 1597/     86E : 28 01               		jr	z,.vol_pwm
(1) 1598/     870 : C9                  		ret
(1) 1599/     871 :                     
(1) 1600/     871 :                     ; --------------------------------
(1) 1601/     871 :                     ; FM,FM3,FM6
(1) 1602/     871 :                     .vol_pwm:
(1) 1603/     871 : 01 00 00            		ld	bc,0
(1) 1604/     874 : DD 7E 02            		ld	a,(ix+2)
(1) 1605/     877 : E6 07               		and	00000111b
(1) 1606/     879 : 4F                  		ld	c,a
(1) 1607/     87A : CF                  		rst	8
(1) 1608/     87B : DD 21 64 1A         		ld	ix,pwmcom
(1) 1609/     87F : DD 09               		add	ix,bc
(1) 1610/     881 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1611/     884 : E6 03               		and	00000011b
(1) 1612/     886 : 4F                  		ld	c,a		; c - MSB Pitch bits
(1) 1613/     887 : FD 7E 03            		ld	a,(iy+chnl_Vol)
(1) 1614/     88A : D6 40               		sub	a,40h
(1) 1615/     88C : CF                  		rst	8
(1) 1616/     88D : ED 44               		neg	a		; reverse impulse volume
(1) 1617/     88F : 87                  		add	a,a
(1) 1618/     890 : 87                  		add	a,a
(1) 1619/     891 : 30 03               		jr	nc,.pvmuch
(1) 1620/     893 : 3E FF               		ld	a,-1
(1) 1621/     895 : CF                  		rst	8
(1) 1622/     896 :                     .pvmuch:
(1) 1623/     896 : B1                  		or	c
(1) 1624/     897 : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1625/     89A : DD CB 00 EE         		set	5,(ix)		; set volume update bit
(1) 1626/     89E : 3E 01               		ld	a,1
(1) 1627/     8A0 : 32 C6 19            		ld	(marsUpd),a
(1) 1628/     8A3 : C9                  		ret
(1) 1629/     8A4 :                     
(1) 1630/     8A4 :                     ; --------------------------------
(1) 1631/     8A4 :                     ; PSG1-3,PSGN
(1) 1632/     8A4 :                     
(1) 1633/     8A4 :                     .vol_psg:
(1) 1634/     8A4 : DD 7E 02            		ld	a,(ix+2)
(1) 1635/     8A7 : DD 21 62 17         		ld	ix,psgcom
(1) 1636/     8AB : E6 03               		and	11b
(1) 1637/     8AD : 16 00               		ld	d,0
(1) 1638/     8AF : 5F                  		ld	e,a
(1) 1639/     8B0 : DD 19               		add	ix,de
(1) 1640/     8B2 : FD 7E 03            		ld	a,(iy+chnl_Vol)
(1) 1641/     8B5 : D6 40               		sub	a,40h
(1) 1642/     8B7 : ED 44               		neg	a
(1) 1643/     8B9 : 4F                  		ld	c,a
(1) 1644/     8BA : FE 40               		cp	40h
(1) 1645/     8BC : 20 02               		jr	nz,.vmuch
(1) 1646/     8BE : 0E FF               		ld	c,-1
(1) 1647/     8C0 :                     .vmuch:
(1) 1648/     8C0 : 79                  		ld	a,c
(1) 1649/     8C1 : 87                  		add	a,a
(1) 1650/     8C2 : 87                  		add	a,a
(1) 1651/     8C3 : DD 77 30            		ld	(ix+PVOL),a
(1) 1652/     8C6 :                     ; 		ld	a,(ix)
(1) 1653/     8C6 :                     ; 		or	00100000b	; Set volume
(1) 1654/     8C6 :                     ; 		ld	(ix),a		; update flag
(1) 1655/     8C6 : C9                  		ret
(1) 1656/     8C7 :                     
(1) 1657/     8C7 :                     ; --------------------------------
(1) 1658/     8C7 :                     ; FM,FM3,FM6
(1) 1659/     8C7 :                     .vol_fm:
(1) 1660/     8C7 : 01 00 00            		ld	bc,0
(1) 1661/     8CA : DD 7E 02            		ld	a,(ix+2)
(1) 1662/     8CD : E6 07               		and	00000111b
(1) 1663/     8CF : 4F                  		ld	c,a
(1) 1664/     8D0 : DD 21 96 17         		ld	ix,fmcom
(1) 1665/     8D4 : DD 09               		add	ix,bc
(1) 1666/     8D6 : FD 7E 03            		ld	a,(iy+chnl_Vol)
(1) 1667/     8D9 : D6 40               		sub	a,40h
(1) 1668/     8DB : CF                  		rst	8
(1) 1669/     8DC : ED 44               		neg	a		; reverse impulse volume
(1) 1670/     8DE : CB 3F               		srl	a		; /2
(1) 1671/     8E0 : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1672/     8E3 : DD 7E 00            		ld	a,(ix)		; volume update
(1) 1673/     8E6 : F6 20               		or	00100000b	; flag, plus keyon
(1) 1674/     8E8 : DD 77 00            		ld	(ix),a
(1) 1675/     8EB : C9                  		ret
(1) 1676/     8EC :                     
(1) 1677/     8EC :                     ; ----------------------------------------
(1) 1678/     8EC :                     ; bit 3
(1) 1679/     8EC :                     ; ----------------------------------------
(1) 1680/     8EC :                     
(1) 1681/     8EC :                     .req_eff:
(1) 1682/     8EC : 2A C1 19            		ld	hl,(currInsPos)
(1) 1683/     8EF : DD 2A BF 19         		ld	ix,(currTblPos)
(1) 1684/     8F3 : FD 7E 04            		ld	a,(iy+chnl_EffId)	; effect id == 0?
(1) 1685/     8F6 : B7                  		or	a
(1) 1686/     8F7 : C8                  		ret	z
(1) 1687/     8F8 : 57                  		ld	d,a
(1) 1688/     8F9 : 7E                  		ld	a,(hl)
(1) 1689/     8FA : E6 F0               		and	11110000b
(1) 1690/     8FC : FD 5E 05            		ld	e,(iy+chnl_EffArg)
(1) 1691/     8FF : CF                  		rst	8
(1) 1692/     900 : FE 80               		cp	80h			; PSG normal
(1) 1693/     902 : 28 16               		jr	z,.eff_psg
(1) 1694/     904 : FE 90               		cp	90h			; PSG noise
(1) 1695/     906 : 28 12               		jr	z,.eff_psg
(1) 1696/     908 : FE A0               		cp	0A0h			; FM Normal
(1) 1697/     90A : 28 21               		jr	z,.eff_fm
(1) 1698/     90C : CF                  		rst	8
(1) 1699/     90D : FE B0               		cp	0B0h			; FM Special
(1) 1700/     90F : 28 1C               		jr	z,.eff_fm
(1) 1701/     911 : FE C0               		cp	0C0h			; DAC
(1) 1702/     913 : 28 2F               		jr	z,.eff_dac
(1) 1703/     915 : FE D0               		cp	0D0h			; PWM
(1) 1704/     917 : 28 3D               		jr	z,.eff_pwm
(1) 1705/     919 : C9                  		ret
(1) 1706/     91A :                     
(1) 1707/     91A :                     ; --------------------------------
(1) 1708/     91A :                     
(1) 1709/     91A :                     .eff_psg:
(1) 1710/     91A : 7A                  		ld	a,d
(1) 1711/     91B : FE 04               		cp	4		; Effect D?
(1) 1712/     91D : CA 6D 09            		jp	z,.effPsg_D
(1) 1713/     920 : FE 05               		cp	5		; Effect E?
(1) 1714/     922 : CA ED 09            		jp	z,.effPsg_E
(1) 1715/     925 : CF                  		rst	8
(1) 1716/     926 : FE 06               		cp	6		; Effect F?
(1) 1717/     928 : CA 1F 0A            		jp	z,.effPsg_F
(1) 1718/     92B : CF                  		rst	8
(1) 1719/     92C : C9                  		ret
(1) 1720/     92D :                     .eff_fm:
(1) 1721/     92D : 7A                  		ld	a,d
(1) 1722/     92E : FE 04               		cp	4		; Effect D?
(1) 1723/     930 : CA 9B 09            		jp	z,.effFm_D
(1) 1724/     933 : FE 05               		cp	5		; Effect E?
(1) 1725/     935 : CA F7 09            		jp	z,.effFm_E
(1) 1726/     938 : CF                  		rst	8
(1) 1727/     939 : FE 06               		cp	6		; Effect F?
(1) 1728/     93B : CA 2D 0A            		jp	z,.effFm_F
(1) 1729/     93E : FE 18               		cp	24		; Effect X?
(1) 1730/     940 : CA 0A 0B            		jp	z,.effFm_X
(1) 1731/     943 : C9                  		ret
(1) 1732/     944 :                     .eff_dac:
(1) 1733/     944 : 7A                  		ld	a,d
(1) 1734/     945 : FE 05               		cp	5		; Effect E?
(1) 1735/     947 : CA 05 0A            		jp	z,.effDac_E
(1) 1736/     94A : FE 06               		cp	6		; Effect F?
(1) 1737/     94C : CA 34 0A            		jp	z,.effDac_F
(1) 1738/     94F : CF                  		rst	8
(1) 1739/     950 : FE 18               		cp	24		; Effect X?
(1) 1740/     952 : CA 0A 0B            		jp	z,.effFm_X
(1) 1741/     955 : C9                  		ret
(1) 1742/     956 :                     .eff_pwm:
(1) 1743/     956 : 3E 01               		ld	a,1
(1) 1744/     958 : 32 C6 19            		ld	(marsUpd),a
(1) 1745/     95B : 7A                  		ld	a,d
(1) 1746/     95C :                     ; 		cp	4		; Effect D?
(1) 1747/     95C :                     ; 		jp	z,.effFm_D
(1) 1748/     95C : FE 05               		cp	5		; Effect E?
(1) 1749/     95E : CA 12 0A            		jp	z,.effPwm_E
(1) 1750/     961 : CF                  		rst	8
(1) 1751/     962 : FE 06               		cp	6		; Effect F?
(1) 1752/     964 : CA 3A 0A            		jp	z,.effPwm_F
(1) 1753/     967 : FE 18               		cp	24		; Effect X?
(1) 1754/     969 : CA F1 0A            		jp	z,.effPwm_X	; recycle FM's panning
(1) 1755/     96C : C9                  		ret
(1) 1756/     96D :                     
(1) 1757/     96D :                     ; --------------------------------
(1) 1758/     96D :                     ; Effect D
(1) 1759/     96D :                     ; --------------------------------
(1) 1760/     96D :                     
(1) 1761/     96D :                     .effPsg_D:
(1) 1762/     96D : 7B                  		ld	a,e
(1) 1763/     96E : B7                  		or	a
(1) 1764/     96F : C8                  		ret	z
(1) 1765/     970 : 06 00               		ld	b,0
(1) 1766/     972 : DD 7E 02            		ld	a,(ix+2)
(1) 1767/     975 : E6 03               		and	011b
(1) 1768/     977 : 4F                  		ld	c,a
(1) 1769/     978 : DD 21 62 17         		ld	ix,psgcom
(1) 1770/     97C : DD 09               		add	ix,bc
(1) 1771/     97E : CD CA 09            		call	.grab_dval
(1) 1772/     981 : 87                  		add	a,a
(1) 1773/     982 : 87                  		add	a,a
(1) 1774/     983 : 87                  		add	a,a
(1) 1775/     984 : 4F                  		ld	c,a
(1) 1776/     985 : CB 79               		bit	7,c
(1) 1777/     987 : 20 09               		jr	nz,.lowp
(1) 1778/     989 : DD 7E 30            		ld	a,(ix+PVOL)
(1) 1779/     98C : 81                  		add	a,c
(1) 1780/     98D : D8                  		ret	c
(1) 1781/     98E : DD 77 30            		ld	(ix+PVOL),a
(1) 1782/     991 : C9                  		ret
(1) 1783/     992 :                     .lowp:
(1) 1784/     992 : DD 7E 30            		ld	a,(ix+PVOL)
(1) 1785/     995 : 81                  		add	a,c
(1) 1786/     996 : D0                  		ret	nc
(1) 1787/     997 : DD 77 30            		ld	(ix+PVOL),a
(1) 1788/     99A : C9                  		ret
(1) 1789/     99B :                     .effFm_D:
(1) 1790/     99B : 7B                  		ld	a,e
(1) 1791/     99C : B7                  		or	a
(1) 1792/     99D : C8                  		ret	z
(1) 1793/     99E : 06 00               		ld	b,0
(1) 1794/     9A0 : DD 7E 02            		ld	a,(ix+2)
(1) 1795/     9A3 : E6 07               		and	111b
(1) 1796/     9A5 : 4F                  		ld	c,a
(1) 1797/     9A6 : DD 21 96 17         		ld	ix,fmcom
(1) 1798/     9AA : DD 09               		add	ix,bc
(1) 1799/     9AC : CD CA 09            		call	.grab_dval
(1) 1800/     9AF :                     ; 		srl	a		; TODO: checar que tanto
(1) 1801/     9AF :                     ; 		srl	a		; shifteo esto
(1) 1802/     9AF : 4F                  		ld	c,a
(1) 1803/     9B0 : DD CB 00 EE         		set	5,(ix)
(1) 1804/     9B4 : CB 79               		bit	7,c
(1) 1805/     9B6 : 20 09               		jr	nz,.lowpf
(1) 1806/     9B8 : DD 7E 0C            		ld	a,(ix+FMVOL)
(1) 1807/     9BB : 81                  		add	a,c
(1) 1808/     9BC : D8                  		ret	c
(1) 1809/     9BD : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1810/     9C0 : C9                  		ret
(1) 1811/     9C1 :                     .lowpf:
(1) 1812/     9C1 : DD 7E 0C            		ld	a,(ix+FMVOL)
(1) 1813/     9C4 : 81                  		add	a,c
(1) 1814/     9C5 : D0                  		ret	nc
(1) 1815/     9C6 : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1816/     9C9 : C9                  		ret
(1) 1817/     9CA :                     
(1) 1818/     9CA :                     ; a - increment/decrement value
(1) 1819/     9CA :                     .grab_dval:
(1) 1820/     9CA : 7B                  		ld	a,e
(1) 1821/     9CB : E6 F0               		and	11110000b
(1) 1822/     9CD : FE F0               		cp	11110000b
(1) 1823/     9CF : 28 03               		jr	z,.go_down
(1) 1824/     9D1 : B7                  		or	a
(1) 1825/     9D2 : 20 09               		jr	nz,.go_up
(1) 1826/     9D4 :                     .go_down:
(1) 1827/     9D4 : 7B                  		ld	a,e
(1) 1828/     9D5 : E6 0F               		and	00001111b
(1) 1829/     9D7 : CB 7B               		bit	7,e
(1) 1830/     9D9 : C0                  		ret	nz
(1) 1831/     9DA : 87                  		add	a,a
(1) 1832/     9DB : CF                  		rst	8
(1) 1833/     9DC : C9                  		ret
(1) 1834/     9DD :                     .go_up:
(1) 1835/     9DD : 7B                  		ld	a,e
(1) 1836/     9DE : 0F                  		rrca
(1) 1837/     9DF : 0F                  		rrca
(1) 1838/     9E0 : 0F                  		rrca
(1) 1839/     9E1 : 0F                  		rrca
(1) 1840/     9E2 : CF                  		rst	8
(1) 1841/     9E3 : E6 0F               		and	00001111b
(1) 1842/     9E5 : ED 44               		neg	a
(1) 1843/     9E7 : CB 5B               		bit	3,e
(1) 1844/     9E9 : C0                  		ret	nz
(1) 1845/     9EA : 87                  		add	a,a
(1) 1846/     9EB : CF                  		rst	8
(1) 1847/     9EC : C9                  		ret
(1) 1848/     9ED :                     
(1) 1849/     9ED :                     ; --------------------------------
(1) 1850/     9ED :                     ; Effect E
(1) 1851/     9ED :                     ; --------------------------------
(1) 1852/     9ED :                     
(1) 1853/     9ED :                     .effPsg_E:
(1) 1854/     9ED : CD D2 0A            		call	.grab_prtm
(1) 1855/     9F0 : 16 00               		ld	d,0
(1) 1856/     9F2 : 87                  		add	a,a
(1) 1857/     9F3 : 5F                  		ld	e,a
(1) 1858/     9F4 : C3 A8 0A            		jp	.freqinc_psg
(1) 1859/     9F7 :                     .effFm_E:
(1) 1860/     9F7 : CD D2 0A            		call	.grab_prtm
(1) 1861/     9FA : ED 44               		neg	a
(1) 1862/     9FC : B7                  		or	a
(1) 1863/     9FD : 28 02               		jr	z,.e_neg
(1) 1864/     9FF : 16 FF               		ld	d,-1
(1) 1865/     A01 :                     .e_neg:
(1) 1866/     A01 : 5F                  		ld	e,a
(1) 1867/     A02 : C3 82 0A            		jp	.freqinc_fm
(1) 1868/     A05 :                     .effDac_E:
(1) 1869/     A05 : CD D2 0A            		call	.grab_prtm
(1) 1870/     A08 : ED 44               		neg	a
(1) 1871/     A0A : B7                  		or	a
(1) 1872/     A0B : 28 02               		jr	z,.e_negd
(1) 1873/     A0D : 16 FF               		ld	d,-1
(1) 1874/     A0F :                     .e_negd:
(1) 1875/     A0F : 5F                  		ld	e,a
(1) 1876/     A10 : 18 60               		jr	.freqinc_dac
(1) 1877/     A12 :                     
(1) 1878/     A12 :                     .effPwm_E:
(1) 1879/     A12 : CD D2 0A            		call	.grab_prtm
(1) 1880/     A15 :                     ; 		sra	a
(1) 1881/     A15 :                     ; 		sra	a
(1) 1882/     A15 : ED 44               		neg	a
(1) 1883/     A17 : B7                  		or	a
(1) 1884/     A18 : 28 02               		jr	z,.e_fnegd2
(1) 1885/     A1A : 16 FF               		ld	d,-1
(1) 1886/     A1C :                     .e_fnegd2:
(1) 1887/     A1C : 5F                  		ld	e,a
(1) 1888/     A1D : 18 1F               		jr	.freqinc_pwm
(1) 1889/     A1F :                     
(1) 1890/     A1F :                     ; --------------------------------
(1) 1891/     A1F :                     ; Effect F
(1) 1892/     A1F :                     ; --------------------------------
(1) 1893/     A1F :                     
(1) 1894/     A1F :                     ; PSG
(1) 1895/     A1F :                     .effPsg_F:
(1) 1896/     A1F : CD D2 0A            		call	.grab_prtm
(1) 1897/     A22 : 87                  		add	a,a
(1) 1898/     A23 : ED 44               		neg	a
(1) 1899/     A25 : B7                  		or	a
(1) 1900/     A26 : 28 02               		jr	z,.e_negp
(1) 1901/     A28 : 16 FF               		ld	d,-1
(1) 1902/     A2A :                     .e_negp:
(1) 1903/     A2A : 5F                  		ld	e,a
(1) 1904/     A2B : 18 7B               		jr	.freqinc_psg
(1) 1905/     A2D :                     .effFm_F:
(1) 1906/     A2D : CD D2 0A            		call	.grab_prtm
(1) 1907/     A30 : 87                  		add	a,a
(1) 1908/     A31 : 5F                  		ld	e,a
(1) 1909/     A32 : 18 4E               		jr	.freqinc_fm
(1) 1910/     A34 :                     .effDac_F:
(1) 1911/     A34 : CD D2 0A            		call	.grab_prtm
(1) 1912/     A37 : 5F                  		ld	e,a
(1) 1913/     A38 : 18 38               		jr	.freqinc_dac
(1) 1914/     A3A :                     .effPwm_F:
(1) 1915/     A3A : CD D2 0A            		call	.grab_prtm
(1) 1916/     A3D :                     ; 		sra	a
(1) 1917/     A3D :                     ; 		sra	a
(1) 1918/     A3D : 5F                  		ld	e,a
(1) 1919/     A3E :                     
(1) 1920/     A3E :                     ; --------------------------------
(1) 1921/     A3E :                     ; For effects E and F:
(1) 1922/     A3E :                     ;
(1) 1923/     A3E :                     ; de - freq incr/decr
(1) 1924/     A3E :                     
(1) 1925/     A3E :                     .freqinc_pwm:
(1) 1926/     A3E : DD 7E 02            		ld	a,(ix+2)
(1) 1927/     A41 : E6 07               		and	111b
(1) 1928/     A43 : DD 21 64 1A         		ld	ix,pwmcom
(1) 1929/     A47 : 06 00               		ld	b,0
(1) 1930/     A49 : 4F                  		ld	c,a
(1) 1931/     A4A : CF                  		rst	8
(1) 1932/     A4B : DD 09               		add	ix,bc
(1) 1933/     A4D : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1934/     A50 : E6 03               		and	00000011b
(1) 1935/     A52 : 67                  		ld	h,a
(1) 1936/     A53 : DD 6E 10            		ld	l,(ix+PWPHL)
(1) 1937/     A56 : 19                  		add	hl,de
(1) 1938/     A57 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1939/     A5A : E6 FC               		and	11111100b
(1) 1940/     A5C : CF                  		rst	8
(1) 1941/     A5D : B4                  		or	h
(1) 1942/     A5E : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1943/     A61 : DD 75 10            		ld	(ix+PWPHL),l
(1) 1944/     A64 : DD 7E 00            		ld	a,(ix)			; pitch bend request
(1) 1945/     A67 : F6 10               		or	00010000b
(1) 1946/     A69 : DD 77 00            		ld	(ix),a
(1) 1947/     A6C : 3E 01               		ld	a,1
(1) 1948/     A6E : 32 C6 19            		ld	(marsUpd),a
(1) 1949/     A71 : C9                  		ret
(1) 1950/     A72 :                     
(1) 1951/     A72 :                     .freqinc_dac:
(1) 1952/     A72 : 2A D3 19            		ld	hl,(wave_Pitch)		; tricky one...
(1) 1953/     A75 : 19                  		add	hl,de
(1) 1954/     A76 : 22 D3 19            		ld	(wave_Pitch),hl
(1) 1955/     A79 : 3A B6 18            		ld	a,(daccom)
(1) 1956/     A7C : F6 10               		or	00010000b
(1) 1957/     A7E : 32 B6 18            		ld	(daccom),a
(1) 1958/     A81 : C9                  		ret
(1) 1959/     A82 :                     
(1) 1960/     A82 :                     .freqinc_fm:
(1) 1961/     A82 : DD 7E 02            		ld	a,(ix+2)
(1) 1962/     A85 : E6 07               		and	111b
(1) 1963/     A87 : DD 21 96 17         		ld	ix,fmcom
(1) 1964/     A8B : 06 00               		ld	b,0
(1) 1965/     A8D : 4F                  		ld	c,a
(1) 1966/     A8E : CF                  		rst	8
(1) 1967/     A8F : DD 09               		add	ix,bc
(1) 1968/     A91 : DD 66 18            		ld	h,(ix+FMFRQH)
(1) 1969/     A94 : DD 6E 1E            		ld	l,(ix+FMFRQL)
(1) 1970/     A97 : 19                  		add	hl,de
(1) 1971/     A98 : DD 74 18            		ld	(ix+FMFRQH),h
(1) 1972/     A9B : CF                  		rst	8
(1) 1973/     A9C : DD 75 1E            		ld	(ix+FMFRQL),l
(1) 1974/     A9F : DD 7E 00            		ld	a,(ix)
(1) 1975/     AA2 : F6 01               		or	00000001b
(1) 1976/     AA4 : DD 77 00            		ld	(ix),a
(1) 1977/     AA7 : C9                  		ret
(1) 1978/     AA8 :                     .freqinc_psg:
(1) 1979/     AA8 : DD 7E 02            		ld	a,(ix+2)
(1) 1980/     AAB : E6 03               		and	011b
(1) 1981/     AAD : DD 21 62 17         		ld	ix,psgcom
(1) 1982/     AB1 : 06 00               		ld	b,0
(1) 1983/     AB3 : 4F                  		ld	c,a
(1) 1984/     AB4 : DD 09               		add	ix,bc
(1) 1985/     AB6 : CF                  		rst	8
(1) 1986/     AB7 : DD 66 20            		ld	h,(ix+DTH)
(1) 1987/     ABA : DD 6E 1C            		ld	l,(ix+DTL)
(1) 1988/     ABD : 19                  		add	hl,de
(1) 1989/     ABE : 7C                  		ld	a,h
(1) 1990/     ABF : E6 07               		and	00000111b
(1) 1991/     AC1 : 67                  		ld	h,a
(1) 1992/     AC2 : CF                  		rst	8
(1) 1993/     AC3 : DD 74 20            		ld	(ix+DTH),h
(1) 1994/     AC6 : DD 75 1C            		ld	(ix+DTL),l
(1) 1995/     AC9 : DD 7E 00            		ld	a,(ix)
(1) 1996/     ACC : F6 01               		or	00000001b
(1) 1997/     ACE : DD 77 00            		ld	(ix),a
(1) 1998/     AD1 : C9                  		ret
(1) 1999/     AD2 :                     ; grab portametro value
(1) 2000/     AD2 :                     .grab_prtm:
(1) 2001/     AD2 : 16 00               		ld	d,0
(1) 2002/     AD4 : 7B                  		ld	a,e
(1) 2003/     AD5 : E6 F0               		and	11110000b
(1) 2004/     AD7 : FE F0               		cp	0F0h
(1) 2005/     AD9 : 20 07               		jr	nz,.e_nof
(1) 2006/     ADB : CF                  		rst	8
(1) 2007/     ADC : 7B                  		ld	a,e
(1) 2008/     ADD : E6 0F               		and	0Fh
(1) 2009/     ADF : 87                  		add	a,a
(1) 2010/     AE0 : 18 0E               		jr	.e_go
(1) 2011/     AE2 :                     .e_nof:
(1) 2012/     AE2 : CF                  		rst	8
(1) 2013/     AE3 : FE E0               		cp	0E0h
(1) 2014/     AE5 : 20 05               		jr	nz,.e_noef
(1) 2015/     AE7 : 7B                  		ld	a,e
(1) 2016/     AE8 : E6 0F               		and	0Fh
(1) 2017/     AEA : 18 04               		jr	.e_go
(1) 2018/     AEC :                     .e_noef:
(1) 2019/     AEC : CF                  		rst	8
(1) 2020/     AED : 7B                  		ld	a,e
(1) 2021/     AEE : 87                  		add	a,a
(1) 2022/     AEF : 87                  		add	a,a
(1) 2023/     AF0 :                     .e_go:
(1) 2024/     AF0 : C9                  		ret
(1) 2025/     AF1 :                     
(1) 2026/     AF1 :                     ; --------------------------------
(1) 2027/     AF1 :                     ; Effect X: Panning
(1) 2028/     AF1 :                     ; --------------------------------
(1) 2029/     AF1 :                     
(1) 2030/     AF1 :                     ; PWM points here too.
(1) 2031/     AF1 :                     .effPwm_X:
(1) 2032/     AF1 : 7B                  		ld	a,e
(1) 2033/     AF2 : 07                  		rlca
(1) 2034/     AF3 : 07                  		rlca
(1) 2035/     AF4 : E6 03               		and	00000011b
(1) 2036/     AF6 : 21 44 0B            		ld	hl,.fmpan_list
(1) 2037/     AF9 : 11 00 00            		ld	de,0
(1) 2038/     AFC : 5F                  		ld	e,a
(1) 2039/     AFD : CF                  		rst	8
(1) 2040/     AFE : 19                  		add	hl,de
(1) 2041/     AFF : 5E                  		ld	e,(hl)
(1) 2042/     B00 : FD 7E 07            		ld	a,(iy+chnl_Flags)
(1) 2043/     B03 : E6 CF               		and	11001111b
(1) 2044/     B05 : B3                  		or	e
(1) 2045/     B06 : FD 77 07            		ld	(iy+chnl_Flags),a
(1) 2046/     B09 : C9                  		ret
(1) 2047/     B0A :                     
(1) 2048/     B0A :                     ; PWM points here too.
(1) 2049/     B0A :                     .effFm_X:
(1) 2050/     B0A : DD 7E 02            		ld	a,(ix+2)
(1) 2051/     B0D : E6 07               		and	111b
(1) 2052/     B0F : 06 00               		ld	b,0
(1) 2053/     B11 : 4F                  		ld	c,a
(1) 2054/     B12 : DD 21 96 17         		ld	ix,fmcom
(1) 2055/     B16 : DD 09               		add	ix,bc
(1) 2056/     B18 : 7B                  		ld	a,e
(1) 2057/     B19 : 07                  		rlca
(1) 2058/     B1A : 07                  		rlca
(1) 2059/     B1B : E6 03               		and	00000011b
(1) 2060/     B1D : 21 44 0B            		ld	hl,.fmpan_list
(1) 2061/     B20 : 11 00 00            		ld	de,0
(1) 2062/     B23 : 5F                  		ld	e,a
(1) 2063/     B24 : CF                  		rst	8
(1) 2064/     B25 : 19                  		add	hl,de
(1) 2065/     B26 : 5E                  		ld	e,(hl)
(1) 2066/     B27 : FD 7E 07            		ld	a,(iy+chnl_Flags)
(1) 2067/     B2A : E6 CF               		and	11001111b
(1) 2068/     B2C : B3                  		or	e
(1) 2069/     B2D : FD 77 07            		ld	(iy+chnl_Flags),a
(1) 2070/     B30 : FD 7E 07            		ld	a,(iy+chnl_Flags)
(1) 2071/     B33 : 87                  		add	a,a		; move LR bits
(1) 2072/     B34 : 87                  		add	a,a
(1) 2073/     B35 : 2F                  		cpl
(1) 2074/     B36 : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(1) 2075/     B38 : DD 77 12            		ld	(ix+FMPAN),a
(1) 2076/     B3B :                     
(1) 2077/     B3B :                     ; 		ld	a,(iy+chnl_Flags)
(1) 2078/     B3B :                     ; 		add	a,a		; move LR bits
(1) 2079/     B3B :                     ; 		add	a,a
(1) 2080/     B3B :                     ; 		cpl
(1) 2081/     B3B :                     ; 		and	11000000b	; Set Panning ENABLE bits
(1) 2082/     B3B :                     ; 		ld	(ix+FMPAN),a
(1) 2083/     B3B :                     ; 		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(1) 2084/     B3B :                     ; 		rst	8
(1) 2085/     B3B :                     ; 		ld	(ix+FMKEYS),e
(1) 2086/     B3B : DD 7E 00            		ld	a,(ix)		; key on
(1) 2087/     B3E : F6 40               		or	01000000b
(1) 2088/     B40 : DD 77 00            		ld	(ix),a
(1) 2089/     B43 :                     
(1) 2090/     B43 : C9                  		ret
(1) 2091/     B44 :                     .fmpan_list:
(1) 2092/     B44 : 10                  		db 00010000b	; 000h
(1) 2093/     B45 : 10                  		db 00010000b	; 040h
(1) 2094/     B46 : 00                  		db 00000000b	; 080h
(1) 2095/     B47 : 20                  		db 00100000b	; 0C0h
(1) 2096/     B48 :                     
(1) 2097/     B48 :                     ; ----------------------------------------
(1) 2098/     B48 :                     ; bit 0
(1) 2099/     B48 :                     ; ----------------------------------------
(1) 2100/     B48 :                     
(1) 2101/     B48 :                     .req_note:
(1) 2102/     B48 : 2A C1 19            		ld	hl,(currInsPos)
(1) 2103/     B4B : DD 2A BF 19         		ld	ix,(currTblPos)
(1) 2104/     B4F : 7E                  		ld	a,(hl)
(1) 2105/     B50 : 4F                  		ld	c,a		; special copy
(1) 2106/     B51 : E6 F0               		and	11110000b
(1) 2107/     B53 : FE 80               		cp	80h		; PSG normal
(1) 2108/     B55 : CA 31 0C            		jp	z,.note_psg
(1) 2109/     B58 : FE 90               		cp	90h		; PSG noise
(1) 2110/     B5A : CA 04 0C            		jp	z,.note_psgn
(1) 2111/     B5D : FE A0               		cp	0A0h
(1) 2112/     B5F : CA 02 0D            		jp	z,.note_fm
(1) 2113/     B62 : CF                  		rst	8
(1) 2114/     B63 : FE B0               		cp	0B0h
(1) 2115/     B65 : CA DE 0C            		jp	z,.note_fm3
(1) 2116/     B68 : FE C0               		cp	0C0h
(1) 2117/     B6A : CA 9B 0C            		jp	z,.note_dac
(1) 2118/     B6D : FE D0               		cp	0D0h
(1) 2119/     B6F : CA 73 0B            		jp	z,.note_pwm
(1) 2120/     B72 : C9                  		ret
(1) 2121/     B73 :                     
(1) 2122/     B73 :                     ; --------------------------------
(1) 2123/     B73 :                     ; Note: PWM
(1) 2124/     B73 :                     ; --------------------------------
(1) 2125/     B73 :                     
(1) 2126/     B73 :                     .note_pwm:
(1) 2127/     B73 : 3E 01               		ld	a,1			; Send MARS request
(1) 2128/     B75 : 32 C6 19            		ld	(marsUpd),a
(1) 2129/     B78 : 21 64 1A            		ld	hl,pwmcom
(1) 2130/     B7B : DD 7E 02            		ld	a,(ix+2)
(1) 2131/     B7E : E6 07               		and	000111b
(1) 2132/     B80 : 06 00               		ld	b,0
(1) 2133/     B82 : 4F                  		ld	c,a
(1) 2134/     B83 : 09                  		add	hl,bc
(1) 2135/     B84 : CF                  		rst	8
(1) 2136/     B85 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2137/     B88 : FE FF               		cp	-1
(1) 2138/     B8A : CA D5 0B            		jp	z,.pwm_keyoff
(1) 2139/     B8D : FE FE               		cp	-2
(1) 2140/     B8F : CA D9 0B            		jp	z,.pwm_keycut
(1) 2141/     B92 : 11 00 00            		ld	de,0
(1) 2142/     B95 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(1) 2143/     B98 : 83                  		add	a,e
(1) 2144/     B99 : 87                  		add	a,a
(1) 2145/     B9A : CF                  		rst	8
(1) 2146/     B9B : 5F                  		ld	e,a
(1) 2147/     B9C : 79                  		ld	a,c
(1) 2148/     B9D : F6 D0               		or	0D0h
(1) 2149/     B9F : FD 77 00            		ld	(iy+chnl_Chip),a	; Set as PWM
(1) 2150/     BA2 : E5                  		push	hl
(1) 2151/     BA3 : DD E1               		pop	ix
(1) 2152/     BA5 : 21 72 16            		ld	hl,wavFreq_List
(1) 2153/     BA8 : 19                  		add	hl,de
(1) 2154/     BA9 : 5E                  		ld	e,(hl)
(1) 2155/     BAA : 23                  		inc	hl
(1) 2156/     BAB : 56                  		ld	d,(hl)			; note: max 111b
(1) 2157/     BAC : CF                  		rst	8
(1) 2158/     BAD : DD CB 00 C6         		set	0,(ix)			; Note-on
(1) 2159/     BB1 : 7A                  		ld	a,d
(1) 2160/     BB2 : FD CB 07 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(1) 2161/     BB6 : 28 06               		jr	z,.pwmn_kpv
(1) 2162/     BB8 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 2163/     BBB : E6 FC               		and	11111100b
(1) 2164/     BBD : B2                  		or	d
(1) 2165/     BBE :                     .pwmn_kpv:
(1) 2166/     BBE : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 2167/     BC1 : DD 73 10            		ld	(ix+PWPHL),e
(1) 2168/     BC4 : DD 7E 18            		ld	a,(ix+PWOUTF)
(1) 2169/     BC7 : E6 CF               		and	11001111b		; Keep other bits
(1) 2170/     BC9 : 4F                  		ld	c,a
(1) 2171/     BCA : FD 7E 07            		ld	a,(iy+chnl_Flags)	; 00LR 0000
(1) 2172/     BCD : 2F                  		cpl
(1) 2173/     BCE : E6 30               		and	00110000b
(1) 2174/     BD0 : B1                  		or	c
(1) 2175/     BD1 : DD 77 18            		ld	(ix+PWOUTF),a
(1) 2176/     BD4 : C9                  		ret
(1) 2177/     BD5 :                     
(1) 2178/     BD5 :                     ; PSG Keyoff
(1) 2179/     BD5 :                     .pwm_keyoff:
(1) 2180/     BD5 : 0E 02               		ld	c,010b
(1) 2181/     BD7 : 71                  		ld	(hl),c
(1) 2182/     BD8 : C9                  		ret
(1) 2183/     BD9 :                     .pwm_keycut:
(1) 2184/     BD9 : 0E 04               		ld	c,100b
(1) 2185/     BDB : 18 06               		jr	.chnl_unlink
(1) 2186/     BDD :                     
(1) 2187/     BDD :                     ; 		ld	a,100b			; Request DAC stop
(1) 2188/     BDD :                     ; 		ld	(daccom),a
(1) 2189/     BDD :                     ; .doff:
(1) 2190/     BDD :                     ; 		ld	hl,0
(1) 2191/     BDD :                     ; 		ld	(tblFM6),hl
(1) 2192/     BDD :                     ; 		ld	(iy+chnl_Chip),0
(1) 2193/     BDD :                     ; 		ret
(1) 2194/     BDD :                     
(1) 2195/     BDD :                     ; --------------------------------
(1) 2196/     BDD :                     ; Note: PSG1-3,PSGN
(1) 2197/     BDD :                     ; --------------------------------
(1) 2198/     BDD :                     
(1) 2199/     BDD :                     ; PSG Keyoff
(1) 2200/     BDD :                     .poff:
(1) 2201/     BDD : 0E 02               		ld	c,010b
(1) 2202/     BDF : 71                  		ld	(hl),c
(1) 2203/     BE0 : C9                  		ret
(1) 2204/     BE1 :                     ; PSG Keycut
(1) 2205/     BE1 :                     .pcut:
(1) 2206/     BE1 : 0E 04               		ld	c,100b
(1) 2207/     BE3 :                     .chnl_unlink:
(1) 2208/     BE3 : CF                  		rst	8
(1) 2209/     BE4 : FD E5               		push	iy
(1) 2210/     BE6 : D1                  		pop	de
(1) 2211/     BE7 : DD 7E 00            		ld	a,(ix)
(1) 2212/     BEA : BB                  		cp	e
(1) 2213/     BEB : C0                  		ret	nz
(1) 2214/     BEC : DD 7E 01            		ld	a,(ix+1)
(1) 2215/     BEF : BA                  		cp	d
(1) 2216/     BF0 : C0                  		ret	nz
(1) 2217/     BF1 : CF                  		rst	8
(1) 2218/     BF2 : 71                  		ld	(hl),c
(1) 2219/     BF3 : DD 36 00 00         		ld	(ix),0
(1) 2220/     BF7 : DD 36 01 00         		ld	(ix+1),0
(1) 2221/     BFB : DD 36 03 00         		ld	(ix+3),0	; pitch zero
(1) 2222/     BFF : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 2223/     C03 :                     ; 		ld	a,(iy+chnl_Flags)
(1) 2224/     C03 :                     ; 		and	11001111b
(1) 2225/     C03 :                     ; 		ld	(iy+chnl_Flags),a
(1) 2226/     C03 : C9                  		ret
(1) 2227/     C04 :                     
(1) 2228/     C04 :                     ; Play PSG note
(1) 2229/     C04 :                     .note_psgn:
(1) 2230/     C04 : DD 7E 02            		ld	a,(ix+2)
(1) 2231/     C07 : F6 90               		or	90h
(1) 2232/     C09 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2233/     C0C : 21 65 17            		ld 	hl,psgcom+3
(1) 2234/     C0F : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2235/     C12 : FE FE               		cp	-2
(1) 2236/     C14 : CA E1 0B            		jp	z,.pcut
(1) 2237/     C17 : FE FF               		cp	-1
(1) 2238/     C19 : CA DD 0B            		jp	z,.poff
(1) 2239/     C1C : 5F                  		ld	e,a
(1) 2240/     C1D : DD 7E 04            		ld 	a,(ix+4)
(1) 2241/     C20 : 32 F7 1E            		ld	(psgHatMode),a
(1) 2242/     C23 : E6 03               		and	011b
(1) 2243/     C25 : FE 03               		cp	011b
(1) 2244/     C27 : 20 05               		jr	nz,.np2_n
(1) 2245/     C29 : 3E 04               		ld	a,100b
(1) 2246/     C2B : 32 64 17            		ld	(psgcom+2),a
(1) 2247/     C2E :                     .np2_n:
(1) 2248/     C2E : 7B                  		ld	a,e
(1) 2249/     C2F : 18 32               		jr	.notepsg_fn
(1) 2250/     C31 :                     .note_psg:
(1) 2251/     C31 : DD 7E 02            		ld	a,(ix+2)
(1) 2252/     C34 : F6 80               		or	80h
(1) 2253/     C36 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2254/     C39 : DD 7E 02            		ld	a,(ix+2)
(1) 2255/     C3C : CF                  		rst	8
(1) 2256/     C3D : E6 03               		and	11b
(1) 2257/     C3F : 16 00               		ld	d,0
(1) 2258/     C41 : 5F                  		ld	e,a
(1) 2259/     C42 : 21 62 17            		ld 	hl,psgcom
(1) 2260/     C45 : 19                  		add	hl,de
(1) 2261/     C46 : FE 02               		cp	2
(1) 2262/     C48 : 20 0C               		jr	nz,.notepsg_c
(1) 2263/     C4A : 3A F7 1E            		ld	a,(psgHatMode)
(1) 2264/     C4D : E6 03               		and	011b
(1) 2265/     C4F : FE 03               		cp	011b
(1) 2266/     C51 : 20 03               		jr	nz,.notepsg_c
(1) 2267/     C53 : 36 04               		ld	(hl),100b	; key-cut PSG3 but dont unlink
(1) 2268/     C55 : C9                  		ret
(1) 2269/     C56 :                     .notepsg_c:
(1) 2270/     C56 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2271/     C59 : FE FE               		cp	-2
(1) 2272/     C5B : CA E1 0B            		jp	z,.pcut
(1) 2273/     C5E : FE FF               		cp	-1
(1) 2274/     C60 : CA DD 0B            		jp	z,.poff
(1) 2275/     C63 :                     .notepsg_fn:
(1) 2276/     C63 : CF                  		rst	8
(1) 2277/     C64 : E5                  		push	hl		; save psgcom
(1) 2278/     C65 : 21 80 15            		ld	hl,psgFreq_List
(1) 2279/     C68 : DD 4E 03            		ld	c,(ix+3)
(1) 2280/     C6B : 81                  		add	a,c
(1) 2281/     C6C : 87                  		add	a,a
(1) 2282/     C6D : 11 00 00            		ld	de,0
(1) 2283/     C70 : 5F                  		ld	e,a
(1) 2284/     C71 : 19                  		add	hl,de
(1) 2285/     C72 : 5E                  		ld	e,(hl)
(1) 2286/     C73 : 23                  		inc	hl
(1) 2287/     C74 : 56                  		ld	d,(hl)
(1) 2288/     C75 : 01 00 00            		ld	bc,0
(1) 2289/     C78 : E6 03               		and	11b
(1) 2290/     C7A : 4F                  		ld	c,a
(1) 2291/     C7B : DD E5               		push	ix		; swap ix to hl
(1) 2292/     C7D : E1                  		pop	hl
(1) 2293/     C7E : CF                  		rst	8
(1) 2294/     C7F : 23                  		inc	hl		; skip link
(1) 2295/     C80 : 23                  		inc	hl
(1) 2296/     C81 : 23                  		inc 	hl		; channel id
(1) 2297/     C82 : 23                  		inc	hl		; pitch
(1) 2298/     C83 :                     ; 		ld	a,c
(1) 2299/     C83 :                     ; 		cp	3
(1) 2300/     C83 :                     ; 		jr	nz,.npsg2
(1) 2301/     C83 :                     ; 		ld 	a,(ix+4)
(1) 2302/     C83 :                     ; 		ld	(psgHatMode),a
(1) 2303/     C83 :                     ; .npsg2:
(1) 2304/     C83 : DD E1               		pop	ix			; restore psgcom as ix
(1) 2305/     C85 : FD 7E 07            		ld	a,(iy+chnl_Flags)	; Check is volume bit
(1) 2306/     C88 : CB 57               		bit	2,a			; is being used
(1) 2307/     C8A : 20 04               		jr	nz,.nodefv
(1) 2308/     C8C : DD 36 30 00         		ld	(ix+PVOL),0		; if not, set max volume
(1) 2309/     C90 :                     .nodefv:
(1) 2310/     C90 : DD 73 1C            		ld	(ix+DTL),e
(1) 2311/     C93 : DD 72 20            		ld	(ix+DTH),d
(1) 2312/     C96 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 2313/     C9A : C9                  		ret
(1) 2314/     C9B :                     
(1) 2315/     C9B :                     ; --------------------------------
(1) 2316/     C9B :                     ; Note: FM,FM3,FM6
(1) 2317/     C9B :                     ; --------------------------------
(1) 2318/     C9B :                     
(1) 2319/     C9B :                     .note_dac:
(1) 2320/     C9B : 21 B6 18            		ld	hl,daccom
(1) 2321/     C9E : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2322/     CA1 : FE FF               		cp	-1
(1) 2323/     CA3 : CA 9A 0D            		jp	z,.fm_keyoff
(1) 2324/     CA6 : FE FE               		cp	-2
(1) 2325/     CA8 : CA 9E 0D            		jp	z,.fm_keycut
(1) 2326/     CAB : FD 36 00 C0         		ld	(iy+chnl_Chip),0C0h	; Set as DAC
(1) 2327/     CAF : 11 00 00            		ld	de,0
(1) 2328/     CB2 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(1) 2329/     CB5 : 83                  		add	a,e
(1) 2330/     CB6 : 87                  		add	a,a
(1) 2331/     CB7 : 5F                  		ld	e,a
(1) 2332/     CB8 : 21 72 16            		ld	hl,wavFreq_List
(1) 2333/     CBB : 19                  		add	hl,de
(1) 2334/     CBC : 7E                  		ld	a,(hl)
(1) 2335/     CBD : 23                  		inc	hl
(1) 2336/     CBE : 66                  		ld	h,(hl)
(1) 2337/     CBF : CF                  		rst	8
(1) 2338/     CC0 : 6F                  		ld	l,a
(1) 2339/     CC1 : 11 E8 FF            		ld	de,ZSET_WTUNE		; Fine-tune to desired
(1) 2340/     CC4 : 19                  		add	hl,de			; WAVE frequency
(1) 2341/     CC5 : 22 D3 19            		ld	(wave_Pitch),hl
(1) 2342/     CC8 :                     ; 		ld	a,1
(1) 2343/     CC8 :                     ; 		and	001b
(1) 2344/     CC8 :                     ; 		ld	(wave_Flags),a
(1) 2345/     CC8 : 3E 01               		ld	a,001b			; Request DAC play
(1) 2346/     CCA : 32 B6 18            		ld	(daccom),a
(1) 2347/     CCD : C9                  		ret
(1) 2348/     CCE :                     .dcut:
(1) 2349/     CCE : 3E 04               		ld	a,100b			; Request DAC stop
(1) 2350/     CD0 : 32 B6 18            		ld	(daccom),a
(1) 2351/     CD3 :                     .doff:
(1) 2352/     CD3 : 21 00 00            		ld	hl,0
(1) 2353/     CD6 : 22 20 1A            		ld	(tblFM6),hl
(1) 2354/     CD9 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 2355/     CDD : C9                  		ret
(1) 2356/     CDE :                     ; FM3 special
(1) 2357/     CDE :                     .note_fm3:
(1) 2358/     CDE : 21 98 17            		ld	hl,fmcom+2		; Channel 3 fmcom
(1) 2359/     CE1 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2360/     CE4 : FE FF               		cp	-1
(1) 2361/     CE6 : CA 9A 0D            		jp	z,.fm_keyoff
(1) 2362/     CE9 : FE FE               		cp	-2
(1) 2363/     CEB : CA 9E 0D            		jp	z,.fm_keycut
(1) 2364/     CEE : FD 36 00 B0         		ld	(iy+chnl_Chip),0B0h	; Set as FM3 special
(1) 2365/     CF2 : 16 27               		ld	d,27h
(1) 2366/     CF4 : 3E 40               		ld	a,01000000b
(1) 2367/     CF6 : 32 F8 1E            		ld	(fmSpcMode),a
(1) 2368/     CF9 : 5F                  		ld	e,a
(1) 2369/     CFA : CD 1A 14            		call	fm_send_1
(1) 2370/     CFD : E5                  		push	hl
(1) 2371/     CFE : DD E1               		pop	ix
(1) 2372/     D00 : 18 74               		jr	.fm_chnlkon
(1) 2373/     D02 :                     ; Normal FM
(1) 2374/     D02 :                     .note_fm:
(1) 2375/     D02 : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2376/     D05 : 57                  		ld	d,a
(1) 2377/     D06 : DD 5E 03            		ld	e,(ix+3)
(1) 2378/     D09 : 83                  		add	a,e
(1) 2379/     D0A : CF                  		rst	8
(1) 2380/     D0B : 4F                  		ld	c,a			; c - Note+pitch
(1) 2381/     D0C : DD 7E 02            		ld	a,(ix+2)
(1) 2382/     D0F : 47                  		ld	b,a
(1) 2383/     D10 : E6 07               		and	00000111b
(1) 2384/     D12 : 21 96 17            		ld	hl,fmcom		; hl - fmcom list
(1) 2385/     D15 : 11 00 00            		ld	de,0
(1) 2386/     D18 : E6 07               		and	111b
(1) 2387/     D1A : 5F                  		ld	e,a
(1) 2388/     D1B : 19                  		add	hl,de
(1) 2389/     D1C : CF                  		rst	8
(1) 2390/     D1D : FD 7E 01            		ld	a,(iy+chnl_Note)
(1) 2391/     D20 : FE FF               		cp	-1
(1) 2392/     D22 : 28 76               		jr	z,.fm_keyoff
(1) 2393/     D24 : FE FE               		cp	-2
(1) 2394/     D26 : 28 76               		jr	z,.fm_keycut
(1) 2395/     D28 : 78                  		ld	a,b			; Set chip as FM
(1) 2396/     D29 : E6 07               		and	111b
(1) 2397/     D2B : FE 02               		cp	2			; Check if we got into channel 3
(1) 2398/     D2D : 20 0E               		jr	nz,.rd_nt3
(1) 2399/     D2F : 47                  		ld	b,a
(1) 2400/     D30 : 16 27               		ld	d,27h			; Disable CH3 special mode
(1) 2401/     D32 : 3E 00               		ld	a,00000000b
(1) 2402/     D34 : 32 F8 1E            		ld	(fmSpcMode),a
(1) 2403/     D37 : CF                  		rst	8
(1) 2404/     D38 : 5F                  		ld	e,a
(1) 2405/     D39 : CD 1A 14            		call	fm_send_1
(1) 2406/     D3C : 78                  		ld	a,b
(1) 2407/     D3D :                     .rd_nt3:
(1) 2408/     D3D : F6 A0               		or	0A0h
(1) 2409/     D3F : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2410/     D42 : 79                  		ld	a,c
(1) 2411/     D43 : CF                  		rst	8
(1) 2412/     D44 : 06 00               		ld	b,0			; b - octave
(1) 2413/     D46 : 1E 07               		ld	e,7
(1) 2414/     D48 :                     .get_oct:
(1) 2415/     D48 : 4F                  		ld	c,a
(1) 2416/     D49 : D6 0C               		sub	12
(1) 2417/     D4B : B7                  		or	a
(1) 2418/     D4C : FA 53 0D            		jp	m,.fnd_oct
(1) 2419/     D4F : 04                  		inc	b
(1) 2420/     D50 : 1D                  		dec	e
(1) 2421/     D51 : 20 F5               		jr	nz,.get_oct
(1) 2422/     D53 :                     .fnd_oct:
(1) 2423/     D53 :                     	; b - octave / c - note
(1) 2424/     D53 : D5                  		push	de
(1) 2425/     D54 : CF                  		rst	8		; ix - current fmcom
(1) 2426/     D55 : 79                  		ld	a,c
(1) 2427/     D56 : 87                  		add	a,a
(1) 2428/     D57 : 4F                  		ld	c,a		; c - freq word
(1) 2429/     D58 : 78                  		ld	a,b
(1) 2430/     D59 : 87                  		add	a,a
(1) 2431/     D5A : 87                  		add	a,a
(1) 2432/     D5B : 87                  		add	a,a
(1) 2433/     D5C : 06 00               		ld	b,0
(1) 2434/     D5E : E5                  		push	hl
(1) 2435/     D5F : CF                  		rst	8
(1) 2436/     D60 : DD E1               		pop	ix
(1) 2437/     D62 : 21 68 15            		ld	hl,fmFreq_List
(1) 2438/     D65 : 09                  		add	hl,bc
(1) 2439/     D66 : 23                  		inc	hl
(1) 2440/     D67 : 4F                  		ld	c,a		; c - octave << 3
(1) 2441/     D68 : 7E                  		ld	a,(hl)		; Note MSB
(1) 2442/     D69 : B1                  		or	c		; add octave
(1) 2443/     D6A : 57                  		ld	d,a
(1) 2444/     D6B : 2B                  		dec	hl
(1) 2445/     D6C : CF                  		rst	8
(1) 2446/     D6D : 7E                  		ld	a,(hl)
(1) 2447/     D6E : 5F                  		ld	e,a
(1) 2448/     D6F : DD 72 18            		ld	(ix+FMFRQH),d	; Save freq MSB
(1) 2449/     D72 : DD 73 1E            		ld	(ix+FMFRQL),e	; Save freq LSB
(1) 2450/     D75 : D1                  		pop	de
(1) 2451/     D76 :                     .fm_chnlkon:
(1) 2452/     D76 : FD 7E 07            		ld	a,(iy+chnl_Flags)
(1) 2453/     D79 : 87                  		add	a,a		; move LR bits
(1) 2454/     D7A : 87                  		add	a,a
(1) 2455/     D7B : 2F                  		cpl
(1) 2456/     D7C : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(1) 2457/     D7E : DD 77 12            		ld	(ix+FMPAN),a
(1) 2458/     D81 : 1E F0               		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(1) 2459/     D83 : CF                  		rst	8
(1) 2460/     D84 : DD 73 06            		ld	(ix+FMKEYS),e
(1) 2461/     D87 : DD 7E 00            		ld	a,(ix)		; key on
(1) 2462/     D8A : F6 41               		or	01000001b
(1) 2463/     D8C : DD 77 00            		ld	(ix),a
(1) 2464/     D8F : FD CB 07 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(1) 2465/     D93 : 20 04               		jr	nz,.fm_kpv
(1) 2466/     D95 : DD 36 0C 00         		ld	(ix+FMVOL),0
(1) 2467/     D99 :                     .fm_kpv:
(1) 2468/     D99 : C9                  		ret
(1) 2469/     D9A :                     
(1) 2470/     D9A :                     ; keyoff/cut
(1) 2471/     D9A :                     .fm_keyoff:
(1) 2472/     D9A : 0E 02               		ld	c,010b
(1) 2473/     D9C : 71                  		ld	(hl),c
(1) 2474/     D9D : C9                  		ret
(1) 2475/     D9E :                     .fm_keycut:
(1) 2476/     D9E : 0E 04               		ld	c,100b
(1) 2477/     DA0 :                     .fm_dlink:
(1) 2478/     DA0 : C3 E3 0B            		jp	.chnl_unlink
(1) 2479/     DA3 :                     
(1) 2480/     DA3 :                     ; ----------------------------------------
(1) 2481/     DA3 :                     ; Channel chip swap
(1) 2482/     DA3 :                     ; ----------------------------------------
(1) 2483/     DA3 :                     
(1) 2484/     DA3 :                     .chip_swap:
(1) 2485/     DA3 : 4F                  		ld	c,a		; c - New chip ID
(1) 2486/     DA4 : E6 F0               		and	11110000b
(1) 2487/     DA6 : 47                  		ld	b,a
(1) 2488/     DA7 : FD 7E 00            		ld	a,(iy+chnl_Chip)
(1) 2489/     DAA : CF                  		rst	8
(1) 2490/     DAB : 5F                  		ld	e,a		; e - Old chip ID
(1) 2491/     DAC : E6 F0               		and	11110000b
(1) 2492/     DAE : B8                  		cp	b
(1) 2493/     DAF : 28 2E               		jr	z,.chip_out
(1) 2494/     DB1 : 57                  		ld	d,a		; d - reuse last ID
(1) 2495/     DB2 : 79                  		ld	a,c		; New chip-ins is null?
(1) 2496/     DB3 : FE FF               		cp	-1
(1) 2497/     DB5 : 20 05               		jr	nz,.from_nl
(1) 2498/     DB7 : 7B                  		ld	a,e		; Reuse OLD ID
(1) 2499/     DB8 : CF                  		rst	8
(1) 2500/     DB9 : E6 F0               		and	11110000b
(1) 2501/     DBB : 57                  		ld	d,a		; new id to check
(1) 2502/     DBC :                     .from_nl:
(1) 2503/     DBC : 7A                  		ld	a,d
(1) 2504/     DBD : 16 00               		ld	d,0
(1) 2505/     DBF : FE 80               		cp	80h
(1) 2506/     DC1 : CC 2E 0E            		call	z,.psg_out
(1) 2507/     DC4 : FE 90               		cp	90h
(1) 2508/     DC6 : CC 20 0E            		call	z,.psgn_out
(1) 2509/     DC9 : CF                  		rst	8
(1) 2510/     DCA : FE A0               		cp	0A0h
(1) 2511/     DCC : CC 4E 0E            		call	z,.fm_out
(1) 2512/     DCF : FE B0               		cp	0B0h
(1) 2513/     DD1 : CC 12 0E            		call	z,.fm3_out
(1) 2514/     DD4 : FE C0               		cp	0C0h
(1) 2515/     DD6 : CC 04 0E            		call	z,.dac_out
(1) 2516/     DD9 : FE D0               		cp	0D0h
(1) 2517/     DDB : CC E1 0D            		call	z,.pwm_out
(1) 2518/     DDE : CF                  		rst	8
(1) 2519/     DDF :                     .chip_out:
(1) 2520/     DDF : 79                  		ld	a,c
(1) 2521/     DE0 : C9                  		ret
(1) 2522/     DE1 :                     
(1) 2523/     DE1 :                     .pwm_out:
(1) 2524/     DE1 : E5                  		push	hl
(1) 2525/     DE2 : 7B                  		ld	a,e
(1) 2526/     DE3 : E6 07               		and	111b
(1) 2527/     DE5 : 47                  		ld	b,a
(1) 2528/     DE6 : 5F                  		ld	e,a
(1) 2529/     DE7 : CF                  		rst	8
(1) 2530/     DE8 : 87                  		add	a,a
(1) 2531/     DE9 : 87                  		add	a,a
(1) 2532/     DEA : 87                  		add	a,a
(1) 2533/     DEB : 5F                  		ld	e,a
(1) 2534/     DEC : 21 2A 1A            		ld	hl,tblPWM
(1) 2535/     DEF : 19                  		add	hl,de
(1) 2536/     DF0 : CD 6C 0E            		call	.chp_unlk
(1) 2537/     DF3 : CF                  		rst	8
(1) 2538/     DF4 : 16 00               		ld	d,0
(1) 2539/     DF6 : 58                  		ld	e,b
(1) 2540/     DF7 : 21 64 1A            		ld	hl,pwmcom
(1) 2541/     DFA : 19                  		add	hl,de
(1) 2542/     DFB : 36 04               		ld	(hl),100b
(1) 2543/     DFD : 3E 01               		ld	a,1
(1) 2544/     DFF : 32 C6 19            		ld	(marsUpd),a
(1) 2545/     E02 : 18 48               		jr	.p_out
(1) 2546/     E04 :                     
(1) 2547/     E04 :                     .dac_out:
(1) 2548/     E04 : E5                  		push	hl
(1) 2549/     E05 : 21 20 1A            		ld	hl,tblFM6
(1) 2550/     E08 : CD 6C 0E            		call	.chp_unlk
(1) 2551/     E0B : 21 B6 18            		ld	hl,daccom
(1) 2552/     E0E : 36 04               		ld	(hl),100b
(1) 2553/     E10 : E1                  		pop	hl
(1) 2554/     E11 : C9                  		ret
(1) 2555/     E12 :                     .fm3_out:
(1) 2556/     E12 : E5                  		push	hl
(1) 2557/     E13 : 21 18 1A            		ld	hl,tblFM3
(1) 2558/     E16 : CD 6C 0E            		call	.chp_unlk
(1) 2559/     E19 : 21 98 17            		ld	hl,fmcom+2
(1) 2560/     E1C : 36 04               		ld	(hl),100b
(1) 2561/     E1E : E1                  		pop	hl
(1) 2562/     E1F : C9                  		ret
(1) 2563/     E20 :                     .psgn_out:
(1) 2564/     E20 : E5                  		push	hl
(1) 2565/     E21 : 21 F0 19            		ld	hl,tblPSGN
(1) 2566/     E24 : CD 6C 0E            		call	.chp_unlk
(1) 2567/     E27 : 21 65 17            		ld	hl,psgcom+3
(1) 2568/     E2A : 36 04               		ld	(hl),100b
(1) 2569/     E2C : E1                  		pop	hl
(1) 2570/     E2D : C9                  		ret
(1) 2571/     E2E :                     .psg_out:
(1) 2572/     E2E : E5                  		push	hl
(1) 2573/     E2F : 7B                  		ld	a,e
(1) 2574/     E30 : E6 03               		and	011b
(1) 2575/     E32 : 47                  		ld	b,a
(1) 2576/     E33 : 5F                  		ld	e,a
(1) 2577/     E34 : 87                  		add	a,a
(1) 2578/     E35 : CF                  		rst	8
(1) 2579/     E36 : 87                  		add	a,a
(1) 2580/     E37 : 87                  		add	a,a
(1) 2581/     E38 : 5F                  		ld	e,a
(1) 2582/     E39 : 21 D6 19            		ld	hl,tblPSG
(1) 2583/     E3C : 19                  		add	hl,de
(1) 2584/     E3D : CD 6C 0E            		call	.chp_unlk
(1) 2585/     E40 : 20 0A               		jr	nz,.p_out
(1) 2586/     E42 : CF                  		rst	8
(1) 2587/     E43 : 16 00               		ld	d,0
(1) 2588/     E45 : 58                  		ld	e,b
(1) 2589/     E46 : 21 62 17            		ld	hl,psgcom
(1) 2590/     E49 : 19                  		add	hl,de
(1) 2591/     E4A : 36 04               		ld	(hl),100b
(1) 2592/     E4C :                     .p_out:
(1) 2593/     E4C : E1                  		pop	hl
(1) 2594/     E4D : C9                  		ret
(1) 2595/     E4E :                     .fm_out:
(1) 2596/     E4E : E5                  		push	hl
(1) 2597/     E4F : 7B                  		ld	a,e
(1) 2598/     E50 : E6 07               		and	111b
(1) 2599/     E52 : 47                  		ld	b,a
(1) 2600/     E53 : 5F                  		ld	e,a
(1) 2601/     E54 : CF                  		rst	8
(1) 2602/     E55 : 87                  		add	a,a
(1) 2603/     E56 : 87                  		add	a,a
(1) 2604/     E57 : 87                  		add	a,a
(1) 2605/     E58 : 5F                  		ld	e,a
(1) 2606/     E59 : 21 F8 19            		ld	hl,tblFM
(1) 2607/     E5C : 19                  		add	hl,de
(1) 2608/     E5D : CD 6C 0E            		call	.chp_unlk
(1) 2609/     E60 : CF                  		rst	8
(1) 2610/     E61 : 16 00               		ld	d,0
(1) 2611/     E63 : 58                  		ld	e,b
(1) 2612/     E64 : 21 96 17            		ld	hl,fmcom
(1) 2613/     E67 : 19                  		add	hl,de
(1) 2614/     E68 : 36 04               		ld	(hl),100b
(1) 2615/     E6A : 18 E0               		jr	.p_out
(1) 2616/     E6C :                     
(1) 2617/     E6C :                     .chp_unlk:
(1) 2618/     E6C : FD E5               		push	iy
(1) 2619/     E6E : D1                  		pop	de
(1) 2620/     E6F : CF                  		rst	8
(1) 2621/     E70 : 7E                  		ld	a,(hl)
(1) 2622/     E71 : BB                  		cp	e
(1) 2623/     E72 : C0                  		ret	nz
(1) 2624/     E73 : 23                  		inc	hl
(1) 2625/     E74 : 7E                  		ld	a,(hl)
(1) 2626/     E75 : BA                  		cp	d
(1) 2627/     E76 : C0                  		ret	nz
(1) 2628/     E77 : 2B                  		dec	hl
(1) 2629/     E78 : CF                  		rst	8
(1) 2630/     E79 : 36 00               		ld	(hl),0
(1) 2631/     E7B : 23                  		inc	hl
(1) 2632/     E7C : 36 00               		ld	(hl),0
(1) 2633/     E7E : 23                  		inc	hl
(1) 2634/     E7F : 5E                  		ld	e,(hl)	; c - ID
(1) 2635/     E80 : 23                  		inc	hl
(1) 2636/     E81 : 36 00               		ld	(hl),0	; reset 5 bytes of settings
(1) 2637/     E83 : CF                  		rst	8
(1) 2638/     E84 : 23                  		inc	hl
(1) 2639/     E85 : 36 00               		ld	(hl),0
(1) 2640/     E87 : 23                  		inc	hl
(1) 2641/     E88 : 36 00               		ld	(hl),0
(1) 2642/     E8A : 23                  		inc	hl
(1) 2643/     E8B : 36 00               		ld	(hl),0
(1) 2644/     E8D : 23                  		inc	hl
(1) 2645/     E8E : 36 00               		ld	(hl),0
(1) 2646/     E90 : AF                  		xor	a
(1) 2647/     E91 : B7                  		or	a
(1) 2648/     E92 : C9                  		ret
(1) 2649/     E93 :                     
(1) 2650/     E93 :                     ; ----------------------------------------
(1) 2651/     E93 :                     ; Sets current instrument data
(1) 2652/     E93 :                     ;
(1) 2653/     E93 :                     ;   -1 - Null instrument
(1) 2654/     E93 :                     ;  80h - PSG
(1) 2655/     E93 :                     ;  90h - PSG Noise
(1) 2656/     E93 :                     ; 0A0h - FM
(1) 2657/     E93 :                     ; 0B0h - FM3 Special
(1) 2658/     E93 :                     ; 0C0h - FM6 Sample
(1) 2659/     E93 :                     ; 0D0h - PWM (or extra)
(1) 2660/     E93 :                     ; ----------------------------------------
(1) 2661/     E93 :                     
(1) 2662/     E93 :                     .check_ins:
(1) 2663/     E93 : FD 7E 02            		ld	a,(iy+chnl_Ins)
(1) 2664/     E96 : 3D                  		dec	a		; minus 1
(1) 2665/     E97 : F8                  		ret	m		; return as -1 if no ins is used.
(1) 2666/     E98 : 87                  		add	a,a		; * 08h
(1) 2667/     E99 : 87                  		add	a,a
(1) 2668/     E9A : CF                  		rst	8
(1) 2669/     E9B : 87                  		add	a,a
(1) 2670/     E9C : 2A BD 19            		ld	hl,(currInsData)
(1) 2671/     E9F : 11 00 00            		ld	de,0
(1) 2672/     EA2 : 5F                  		ld	e,a
(1) 2673/     EA3 : 19                  		add	hl,de
(1) 2674/     EA4 : 7E                  		ld	a,(hl)
(1) 2675/     EA5 : C9                  		ret
(1) 2676/     EA6 :                     
(1) 2677/     EA6 :                     ; ----------------------------------------
(1) 2678/     EA6 :                     ; Checks which channel type is using
(1) 2679/     EA6 :                     ; auto-set channel
(1) 2680/     EA6 :                     ;
(1) 2681/     EA6 :                     ; a - sound chip
(1) 2682/     EA6 :                     ; ----------------------------------------
(1) 2683/     EA6 :                     
(1) 2684/     EA6 :                     .check_chnl:
(1) 2685/     EA6 : FE FF               		cp	-1		; if -1: Null
(1) 2686/     EA8 : C8                  		ret	z
(1) 2687/     EA9 : CF                  		rst	8
(1) 2688/     EAA : 4F                  		ld	c,a		; save copy to c
(1) 2689/     EAB : 87                  		add	a,a		; * 2
(1) 2690/     EAC : 16 00               		ld	d,0
(1) 2691/     EAE : 0F                  		rrca
(1) 2692/     EAF : 0F                  		rrca
(1) 2693/     EB0 : 0F                  		rrca
(1) 2694/     EB1 : 0F                  		rrca
(1) 2695/     EB2 : E6 0F               		and	00001111b
(1) 2696/     EB4 : 5F                  		ld	e,a
(1) 2697/     EB5 : DD 21 D7 0E         		ld	ix,.tbllist	; get table from list
(1) 2698/     EB9 : DD 19               		add	ix,de
(1) 2699/     EBB : DD 5E 00            		ld	e,(ix)
(1) 2700/     EBE : DD 56 01            		ld	d,(ix+1)
(1) 2701/     EC1 : CF                  		rst	8
(1) 2702/     EC2 : D5                  		push	de
(1) 2703/     EC3 : DD E1               		pop	ix
(1) 2704/     EC5 : 79                  		ld	a,c		; restore from c
(1) 2705/     EC6 : FE 90               		cp	90h		; type PSGN?
(1) 2706/     EC8 : 28 19               		jr	z,.chk_tbln
(1) 2707/     ECA : FE B0               		cp	0B0h		; type FM3?
(1) 2708/     ECC : 28 15               		jr	z,.chk_tbln
(1) 2709/     ECE : FE C0               		cp	0C0h		; type DAC?
(1) 2710/     ED0 : 28 11               		jr	z,.chk_tbln
(1) 2711/     ED2 : 18 2A               		jr	.chk_tbl
(1) 2712/     ED4 :                     .bad_ins:
(1) 2713/     ED4 : 3E FF               		ld	a,-1
(1) 2714/     ED6 : C9                  		ret
(1) 2715/     ED7 :                     
(1) 2716/     ED7 :                     ; --------------------------------------------
(1) 2717/     ED7 :                     
(1) 2718/     ED7 :                     .tbllist:
(1) 2719/     ED7 : D6 19               		dw tblPSG	;  80h
(1) 2720/     ED9 : F0 19               		dw tblPSGN	;  90h
(1) 2721/     EDB : F8 19               		dw tblFM	; 0A0h
(1) 2722/     EDD : 18 1A               		dw tblFM3	; 0B0h
(1) 2723/     EDF : 20 1A               		dw tblFM6	; 0C0h
(1) 2724/     EE1 : 2A 1A               		dw tblPWM	; 0D0h
(1) 2725/     EE3 :                     
(1) 2726/     EE3 :                     ; --------------------------------------------
(1) 2727/     EE3 :                     ; Check SINGLE channel table
(1) 2728/     EE3 :                     ; (FM3,FM6,PSGN)
(1) 2729/     EE3 :                     ; --------------------------------------------
(1) 2730/     EE3 :                     
(1) 2731/     EE3 :                     ; This auto-replaces the LINKED channel
(1) 2732/     EE3 :                     .chk_tbln:
(1) 2733/     EE3 : FD E5               		push	iy
(1) 2734/     EE5 : D1                  		pop	de		; de - Copy of curr track-channel
(1) 2735/     EE6 : CF                  		rst	8
(1) 2736/     EE7 : DD 7E 01            		ld	a,(ix+1)
(1) 2737/     EEA : B7                  		or	a
(1) 2738/     EEB : 28 05               		jr	z,.new
(1) 2739/     EED : BA                  		cp	d		; Same Channel MSB?
(1) 2740/     EEE : 28 02               		jr	z,.new
(1) 2741/     EF0 : 30 09               		jr	nc,.busy_s	; If not, skip
(1) 2742/     EF2 :                     .new:
(1) 2743/     EF2 : CF                  		rst	8
(1) 2744/     EF3 : DD 73 00            		ld	(ix),e		; NEW slot
(1) 2745/     EF6 : DD 72 01            		ld	(ix+1),d
(1) 2746/     EF9 : AF                  		xor	a		; Found free slot, pick it.
(1) 2747/     EFA : C9                  		ret
(1) 2748/     EFB :                     .busy_s:
(1) 2749/     EFB : 3E FF               		ld	a,-1
(1) 2750/     EFD : C9                  		ret
(1) 2751/     EFE :                     
(1) 2752/     EFE :                     ; --------------------------------------------
(1) 2753/     EFE :                     ; Check available channel slot from list
(1) 2754/     EFE :                     ; --------------------------------------------
(1) 2755/     EFE :                     
(1) 2756/     EFE :                     .chk_tbl:
(1) 2757/     EFE : 01 00 00            		ld	bc,0		; bc - Free slot point
(1) 2758/     F01 :                     .next:
(1) 2759/     F01 : DD 7E 01            		ld	a,(ix+1)	; Check MSB first
(1) 2760/     F04 : FE FF               		cp	-1		; End of list? (as WORD: 0FFxxh)
(1) 2761/     F06 : 28 3F               		jr	z,.chkfree
(1) 2762/     F08 : FD E5               		push	iy
(1) 2763/     F0A : D1                  		pop	de		; de - Copy of curr track-channel
(1) 2764/     F0B : CF                  		rst	8
(1) 2765/     F0C : BA                  		cp	d
(1) 2766/     F0D : 20 08               		jr	nz,.diffr
(1) 2767/     F0F : DD 7E 00            		ld	a,(ix)
(1) 2768/     F12 : BB                  		cp	e
(1) 2769/     F13 : 20 02               		jr	nz,.diffr
(1) 2770/     F15 : AF                  		xor	a		; return 0
(1) 2771/     F16 : C9                  		ret
(1) 2772/     F17 :                     
(1) 2773/     F17 :                     ; d - MSB to check for auto-priority
(1) 2774/     F17 :                     .diffr:
(1) 2775/     F17 : 79                  		ld	a,c		; already found link at bc?
(1) 2776/     F18 : B0                  		or	b
(1) 2777/     F19 : 20 25               		jr	nz,.alrdfnd
(1) 2778/     F1B : CF                  		rst	8
(1) 2779/     F1C : DD 5E 01            		ld	e,(ix+1)	; Check if this link == 0
(1) 2780/     F1F : DD 7E 00            		ld	a,(ix)
(1) 2781/     F22 : B3                  		or	e
(1) 2782/     F23 : 28 17               		jr	z,.fndlink
(1) 2783/     F25 : D5                  		push	de		; Check if this link is
(1) 2784/     F26 : DD 56 01            		ld	d,(ix+1)	; floating.
(1) 2785/     F29 : DD 5E 00            		ld	e,(ix)
(1) 2786/     F2C : 13                  		inc	de
(1) 2787/     F2D : CF                  		rst	8
(1) 2788/     F2E : 1A                  		ld	a,(de)
(1) 2789/     F2F : D1                  		pop	de
(1) 2790/     F30 : FE FE               		cp	-2
(1) 2791/     F32 : 28 08               		jr	z,.fndlink
(1) 2792/     F34 : FE FF               		cp	-1
(1) 2793/     F36 : 28 04               		jr	z,.fndlink
(1) 2794/     F38 : 7B                  		ld	a,e		; Check if MSB is higher
(1) 2795/     F39 : BA                  		cp	d
(1) 2796/     F3A : 30 04               		jr	nc,.alrdfnd
(1) 2797/     F3C :                     .fndlink:
(1) 2798/     F3C : DD E5               		push	ix		; bc - got new link
(1) 2799/     F3E : C1                  		pop	bc
(1) 2800/     F3F : CF                  		rst	8
(1) 2801/     F40 :                     .alrdfnd:
(1) 2802/     F40 : 11 08 00            		ld	de,8		; Next channel table
(1) 2803/     F43 : DD 19               		add	ix,de
(1) 2804/     F45 : 18 BA               		jr	.next
(1) 2805/     F47 :                     
(1) 2806/     F47 :                     ; free link slot
(1) 2807/     F47 :                     .chkfree:
(1) 2808/     F47 : 79                  		ld	a,c		; found free link?
(1) 2809/     F48 : B0                  		or	b
(1) 2810/     F49 : 28 0F               		jr	z,.fndslot
(1) 2811/     F4B :                     
(1) 2812/     F4B :                     
(1) 2813/     F4B :                     ; 		cp	d		; Same Channel MSB?
(1) 2814/     F4B :                     ; 		jr	z,.fndslot	; If not, skip
(1) 2815/     F4B :                     ; 		jr	c,.fndslot
(1) 2816/     F4B : C5                  		push	bc
(1) 2817/     F4C : DD E1               		pop	ix		; tell ix is the new slot
(1) 2818/     F4E : FD E5               		push	iy
(1) 2819/     F50 : D1                  		pop	de		; and mark it on buffer
(1) 2820/     F51 : CF                  		rst	8
(1) 2821/     F52 : DD 73 00            		ld	(ix),e
(1) 2822/     F55 : DD 72 01            		ld	(ix+1),d
(1) 2823/     F58 : AF                  		xor	a
(1) 2824/     F59 : C9                  		ret
(1) 2825/     F5A :                     .fndslot:
(1) 2826/     F5A : 3E FF               		ld	a,-1		; linksteal check goes here
(1) 2827/     F5C : C9                  		ret
(1) 2828/     F5D :                     
(1) 2829/     F5D :                     ; ====================================================================
(1) 2830/     F5D :                     ; ----------------------------------------------------------------
(1) 2831/     F5D :                     ; Subroutines
(1) 2832/     F5D :                     ; ----------------------------------------------------------------
(1) 2833/     F5D :                     
(1) 2834/     F5D :                     ; --------------------------------------------------------
(1) 2835/     F5D :                     ; Init sound engine
(1) 2836/     F5D :                     ; --------------------------------------------------------
(1) 2837/     F5D :                     
(1) 2838/     F5D :                     gema_init:
(1) 2839/     F5D : CD 45 14            		call	dac_off
(1) 2840/     F60 : 21 00 1B            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2841/     F63 : 11 01 1B            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2842/     F66 : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2843/     F69 : 36 80               		ld	(hl),80h	; Set first byte
(1) 2844/     F6B : ED B0               		ldir			; Start copying
(1) 2845/     F6D : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2846/     F70 : 36 9F               		ld	(hl),09Fh
(1) 2847/     F72 : 36 BF               		ld	(hl),0BFh
(1) 2848/     F74 : 36 DF               		ld	(hl),0DFh
(1) 2849/     F76 : 36 FF               		ld	(hl),0FFh
(1) 2850/     F78 : 11 0B 22            		ld	de,2208h|3	; Set default LFO
(1) 2851/     F7B : CD 1A 14            		call	fm_send_1
(1) 2852/     F7E : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2853/     F81 : CD 1A 14            		call	fm_send_1
(1) 2854/     F84 : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2855/     F87 : CD 1A 14            		call	fm_send_1
(1) 2856/     F8A : 1C                  		inc	e
(1) 2857/     F8B : CD 1A 14            		call	fm_send_1
(1) 2858/     F8E : 1C                  		inc	e
(1) 2859/     F8F : CD 1A 14            		call	fm_send_1
(1) 2860/     F92 : 1C                  		inc	e
(1) 2861/     F93 : 1C                  		inc	e
(1) 2862/     F94 : CD 1A 14            		call	fm_send_1
(1) 2863/     F97 : 1C                  		inc	e
(1) 2864/     F98 : CD 1A 14            		call	fm_send_1
(1) 2865/     F9B : 1C                  		inc	e
(1) 2866/     F9C : CD 1A 14            		call	fm_send_1
(1) 2867/     F9F :                     
(1) 2868/     F9F :                     	; set each tracks' settings
(1) 2869/     F9F : FD 21 00 1E         		ld	iy,trkBuff_0
(1) 2870/     FA3 : 21 00 1C            		ld	hl,trkData_0
(1) 2871/     FA6 : 1E 12               		ld	e,MAX_TRKCHN
(1) 2872/     FA8 : 16 80               		ld	d,8*16			; maximum size
(1) 2873/     FAA : CD B8 0F            		call	.set_it
(1) 2874/     FAD : FD 21 00 1F         		ld	iy,trkBuff_1
(1) 2875/     FB1 : 21 00 1D            		ld	hl,trkData_1
(1) 2876/     FB4 : 1E 12               		ld	e,MAX_TRKCHN
(1) 2877/     FB6 : 16 80               		ld	d,8*16
(1) 2878/     FB8 :                     .set_it:
(1) 2879/     FB8 : FD 75 1A            		ld	(iy+trk_CachNotes),l
(1) 2880/     FBB : FD 74 1B            		ld	(iy+(trk_CachNotes+1)),h
(1) 2881/     FBE : FD 73 16            		ld	(iy+trk_numChnls),e
(1) 2882/     FC1 : FD 72 17            		ld	(iy+trk_sizeIns),d
(1) 2883/     FC4 : C9                  		ret
(1) 2884/     FC5 :                     
(1) 2885/     FC5 :                     ; --------------------------------------------------------
(1) 2886/     FC5 :                     ; get_tick
(1) 2887/     FC5 :                     ;
(1) 2888/     FC5 :                     ; Checks if VBlank triggred a TICK
(1) 2889/     FC5 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 2890/     FC5 :                     ; --------------------------------------------------------
(1) 2891/     FC5 :                     
(1) 2892/     FC5 :                     get_tick:
(1) 2893/     FC5 : F3                  		di				; Disable ints
(1) 2894/     FC6 : F5                  		push	af
(1) 2895/     FC7 : E5                  		push	hl
(1) 2896/     FC8 : 21 C8 19            		ld	hl,tickFlag+1		; read last TICK flag
(1) 2897/     FCB : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 2898/     FCC : B7                  		or 	a
(1) 2899/     FCD : 28 13               		jr	z,.ctnotick
(1) 2900/     FCF : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2901/     FD1 : 23                  		inc	hl			; Move to tickCnt
(1) 2902/     FD2 : 34                  		inc	(hl)			; and increment
(1) 2903/     FD3 : CF                  		rst	8
(1) 2904/     FD4 : D5                  		push	de
(1) 2905/     FD5 : 2A 24 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2906/     FD8 : ED 5B 22 00         		ld	de,(sbeatPtck)
(1) 2907/     FDC : CF                  		rst	8
(1) 2908/     FDD : 19                  		add	hl,de
(1) 2909/     FDE : 22 24 00            		ld	(sbeatAcc),hl
(1) 2910/     FE1 : D1                  		pop	de
(1) 2911/     FE2 :                     .ctnotick:
(1) 2912/     FE2 : E1                  		pop	hl
(1) 2913/     FE3 : F1                  		pop	af
(1) 2914/     FE4 : FB                  		ei				; Enable ints again
(1) 2915/     FE5 : C9                  		ret
(1) 2916/     FE6 :                     
(1) 2917/     FE6 :                     ; --------------------------------------------------------
(1) 2918/     FE6 :                     ; showRom:
(1) 2919/     FE6 :                     ; Get ROM position visible for reading
(1) 2920/     FE6 :                     ;
(1) 2921/     FE6 :                     ; Input:
(1) 2922/     FE6 :                     ;  b - ROM address $xx0000
(1) 2923/     FE6 :                     ; hl - ROM address $00xxxx
(1) 2924/     FE6 :                     ;
(1) 2925/     FE6 :                     ; Output:
(1) 2926/     FE6 :                     ; hl - ROM position ready to use for reading
(1) 2927/     FE6 :                     ; --------------------------------------------------------
(1) 2928/     FE6 :                     
(1) 2929/     FE6 :                     showRom:
(1) 2930/     FE6 : CF                  		rst	8
(1) 2931/     FE7 : D5                  		push	de
(1) 2932/     FE8 : C5                  		push	bc
(1) 2933/     FE9 : 11 00 60            		ld	de,6000h
(1) 2934/     FEC : 7C                  		ld	a,h
(1) 2935/     FED : 07                  		rlca
(1) 2936/     FEE : CF                  		rst	8
(1) 2937/     FEF : 12                  		ld	(de),a
(1) 2938/     FF0 : 78                  		ld	a,b
(1) 2939/     FF1 : 12                  		ld	(de),a
(1) 2940/     FF2 : 1F                  		rra
(1) 2941/     FF3 : 12                  		ld	(de),a
(1) 2942/     FF4 : 1F                  		rra
(1) 2943/     FF5 : 12                  		ld	(de),a
(1) 2944/     FF6 : 1F                  		rra
(1) 2945/     FF7 : CF                  		rst	8
(1) 2946/     FF8 : 12                  		ld	(de),a
(1) 2947/     FF9 : 1F                  		rra
(1) 2948/     FFA : 12                  		ld	(de),a
(1) 2949/     FFB : 1F                  		rra
(1) 2950/     FFC : 12                  		ld	(de),a
(1) 2951/     FFD : 1F                  		rra
(1) 2952/     FFE : 12                  		ld	(de),a
(1) 2953/     FFF : 1F                  		rra
(1) 2954/    1000 : 12                  		ld	(de),a
(1) 2955/    1001 : CF                  		rst	8
(1) 2956/    1002 : C1                  		pop	bc
(1) 2957/    1003 : D1                  		pop	de
(1) 2958/    1004 : CB FC               		set	7,h
(1) 2959/    1006 : C9                  		ret
(1) 2960/    1007 :                     
(1) 2961/    1007 :                     ; --------------------------------------------------------
(1) 2962/    1007 :                     ; readRomB:
(1) 2963/    1007 :                     ; Reads a byte from ROM safetly, for a single and quick
(1) 2964/    1007 :                     ; byte-read only, NOT autoswitchable.
(1) 2965/    1007 :                     ; CALL showRom FIRST, DO NOT CALL dac_fill BEFORE
(1) 2966/    1007 :                     ; GETTING HERE
(1) 2967/    1007 :                     ;
(1) 2968/    1007 :                     ; Input:
(1) 2969/    1007 :                     ; hl - ROM position in Z80's area
(1) 2970/    1007 :                     ;      (BANK must be set already)
(1) 2971/    1007 :                     ;
(1) 2972/    1007 :                     ; Output:
(1) 2973/    1007 :                     ; a - byte recieved
(1) 2974/    1007 :                     ; --------------------------------------------------------
(1) 2975/    1007 :                     
(1) 2976/    1007 :                     ; ALL this code just to read one byte without bothering
(1) 2977/    1007 :                     ; the DMA from the 68k side
(1) 2978/    1007 :                     
(1) 2979/    1007 :                     readRomB:
(1) 2980/    1007 : DD E5               		push	ix
(1) 2981/    1009 : DD 21 1C 00         		ld	ix,commZRomBlk
(1) 2982/    100D : DD CB 01 C6         		set	0,(ix+1)	; ROM read request
(1) 2983/    1011 : DD CB 00 46         		bit	0,(ix)		; 68k is on DMA?
(1) 2984/    1015 : 20 09               		jr	nz,.wait
(1) 2985/    1017 : 7E                  .imback:	ld	a,(hl)		; Read the byte.
(1) 2986/    1018 : DD CB 01 86         		res	0,(ix+1)
(1) 2987/    101C : CF                  		rst	8
(1) 2988/    101D : DD E1               		pop	ix
(1) 2989/    101F : C9                  		ret
(1) 2990/    1020 :                     .wait:
(1) 2991/    1020 : DD CB 01 86         		res	0,(ix+1)	; Not reading ROM
(1) 2992/    1024 :                     .w2:
(1) 2993/    1024 : CF                  		rst	8
(1) 2994/    1025 : 00                  		nop
(1) 2995/    1026 : 00                  		nop
(1) 2996/    1027 : CF                  		rst	8
(1) 2997/    1028 : DD CB 00 46         		bit	0,(ix)		; Is ROM free from 68K?
(1) 2998/    102C : 20 F6               		jr	nz,.w2
(1) 2999/    102E : DD CB 01 C6         		set	0,(ix+1)	; Reading ROM again.
(1) 3000/    1032 : 18 E3               		jr	.imback
(1) 3001/    1034 :                     
(1) 3002/    1034 :                     ; --------------------------------------------------------
(1) 3003/    1034 :                     ; transferRom
(1) 3004/    1034 :                     ;
(1) 3005/    1034 :                     ; Transfer bytes from ROM to Z80, this also tells
(1) 3006/    1034 :                     ; to 68k that we are reading fom ROM
(1) 3007/    1034 :                     ;
(1) 3008/    1034 :                     ; Input:
(1) 3009/    1034 :                     ; a  - Source ROM address $xx0000
(1) 3010/    1034 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3011/    1034 :                     ; hl - Source ROM address $00xxxx
(1) 3012/    1034 :                     ; de - Destination address
(1) 3013/    1034 :                     ;
(1) 3014/    1034 :                     ; Uses:
(1) 3015/    1034 :                     ; b, ix
(1) 3016/    1034 :                     ;
(1) 3017/    1034 :                     ; Notes:
(1) 3018/    1034 :                     ; call dac_fill first if transfering anything other than
(1) 3019/    1034 :                     ; sample data, just to be safe
(1) 3020/    1034 :                     ; --------------------------------------------------------
(1) 3021/    1034 :                     
(1) 3022/    1034 :                     ; Note: got this from GEMS...
(1) 3023/    1034 :                     
(1) 3024/    1034 :                     transferRom:
(1) 3025/    1034 : CF                  		rst	8
(1) 3026/    1035 : DD E5               		push	ix
(1) 3027/    1037 : DD 21 1C 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3028/    103B : 22 BB 19            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3029/    103E : CB BC               		res	7,h
(1) 3030/    1040 : 06 00               		ld	b,0
(1) 3031/    1042 : 0B                  		dec	bc
(1) 3032/    1043 : 09                  		add	hl,bc
(1) 3033/    1044 : CB 7C               		bit	7,h
(1) 3034/    1046 : 20 0B               		jr	nz,.double
(1) 3035/    1048 : 2A BB 19            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3036/    104B : 0C                  		inc	c
(1) 3037/    104C : 47                  		ld	b,a
(1) 3038/    104D : CD 78 10            		call	.transfer
(1) 3039/    1050 : DD E1               		pop	ix
(1) 3040/    1052 : C9                  		ret
(1) 3041/    1053 :                     .double:
(1) 3042/    1053 : CF                  		rst	8
(1) 3043/    1054 : 47                  		ld	b,a		; double transfer
(1) 3044/    1055 : C5                  		push	bc
(1) 3045/    1056 : E5                  		push	hl
(1) 3046/    1057 : 79                  		ld	a,c
(1) 3047/    1058 : 95                  		sub	a,l
(1) 3048/    1059 : 4F                  		ld	c,a
(1) 3049/    105A : 2A BB 19            		ld	hl,(x68ksrclsb)
(1) 3050/    105D : CD 78 10            		call	.transfer
(1) 3051/    1060 : E1                  		pop	hl
(1) 3052/    1061 : C1                  		pop	bc
(1) 3053/    1062 : CF                  		rst	8
(1) 3054/    1063 : 4D                  		ld	c,l
(1) 3055/    1064 : 0C                  		inc	c
(1) 3056/    1065 : 3A BC 19            		ld	a,(x68ksrcmid)
(1) 3057/    1068 : E6 80               		and	80h
(1) 3058/    106A : C6 80               		add	a,80h
(1) 3059/    106C : 67                  		ld	h,a
(1) 3060/    106D : 2E 00               		ld	l,0
(1) 3061/    106F : 30 01               		jr	nc,.x68knocarry
(1) 3062/    1071 : 04                  		inc	b
(1) 3063/    1072 :                     .x68knocarry:
(1) 3064/    1072 : CD 78 10            		call	.transfer
(1) 3065/    1075 : DD E1               		pop	ix
(1) 3066/    1077 : C9                  		ret
(1) 3067/    1078 :                     
(1) 3068/    1078 :                     ; ------------------------------------------------
(1) 3069/    1078 :                     ; b  - Source ROM xx0000
(1) 3070/    1078 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3071/    1078 :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3072/    1078 :                     ; de - Destination address
(1) 3073/    1078 :                     ;
(1) 3074/    1078 :                     ; Uses:
(1) 3075/    1078 :                     ; a
(1) 3076/    1078 :                     ; ------------------------------------------------
(1) 3077/    1078 :                     
(1) 3078/    1078 :                     .transfer:
(1) 3079/    1078 : CD E6 0F            		call	showRom
(1) 3080/    107B :                     
(1) 3081/    107B :                     	; Transfer data in packs of bytes
(1) 3082/    107B :                     	; while playing cache WAV in the process
(1) 3083/    107B :                     	; *** CRITICAL PROCESS FOR WAV PLAYBACK ***
(1) 3084/    107B :                     	;
(1) 3085/    107B :                     	; pseudo-ref for ldir:
(1) 3086/    107B :                     	; ld (de),(hl)
(1) 3087/    107B :                     	; inc de
(1) 3088/    107B :                     	; inc hl
(1) 3089/    107B :                     	; dec bc
(1) 3090/    107B :                     	;
(1) 3091/    107B : 06 00               		ld	b,0
(1) 3092/    107D : 79                  		ld	a,c		; a - pieces counter
(1) 3093/    107E : DD CB 01 C6         		set	0,(ix+1)	; Tell to 68k that we are reading from ROM
(1) 3094/    1082 : D6 06               		sub	6		; LENGHT lower than 6?
(1) 3095/    1084 : 38 11               		jr	c,.x68klast	; Process single piece only
(1) 3096/    1086 :                     .x68kloop:
(1) 3097/    1086 : CF                  		rst	8
(1) 3098/    1087 : 0E 05               		ld	c,6-1
(1) 3099/    1089 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 3100/    108D : 20 1A               		jr	nz,.x68klpwt
(1) 3101/    108F :                     .x68klpcont:
(1) 3102/    108F : CF                  		rst	8
(1) 3103/    1090 : ED B0               		ldir			; (de) to (hl) until bc==0
(1) 3104/    1092 : D6 05               		sub	a,6-1
(1) 3105/    1094 : D2 86 10            		jp	nc,.x68kloop
(1) 3106/    1097 :                     ; last block
(1) 3107/    1097 :                     .x68klast:
(1) 3108/    1097 : C6 06               		add	a,6
(1) 3109/    1099 : 4F                  		ld	c,a
(1) 3110/    109A : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 3111/    109E : C2 BC 10            		jp	nz,.x68klstwt
(1) 3112/    10A1 :                     .x68klstcont:
(1) 3113/    10A1 : CF                  		rst	8
(1) 3114/    10A2 : ED B0               		ldir
(1) 3115/    10A4 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are done reading
(1) 3116/    10A8 : C9                  		ret
(1) 3117/    10A9 :                     
(1) 3118/    10A9 :                     ; If Genesis wants to do DMA, loop indef here until it finishes.
(1) 3119/    10A9 :                     ; if on mid-loop
(1) 3120/    10A9 :                     .x68klpwt:
(1) 3121/    10A9 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(1) 3122/    10AD :                     .x68kpwtlp:
(1) 3123/    10AD : CF                  		rst	8
(1) 3124/    10AE : 00                  		nop
(1) 3125/    10AF : CF                  		rst	8
(1) 3126/    10B0 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3127/    10B4 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3128/    10B6 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(1) 3129/    10BA : 18 D3               		jr	.x68klpcont
(1) 3130/    10BC :                     
(1) 3131/    10BC :                     ; or in the last piece
(1) 3132/    10BC :                     .x68klstwt:
(1) 3133/    10BC : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(1) 3134/    10C0 :                     .x68klstwtlp:
(1) 3135/    10C0 : CF                  		rst	8
(1) 3136/    10C1 : 00                  		nop
(1) 3137/    10C2 : CF                  		rst	8
(1) 3138/    10C3 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3139/    10C7 : 20 F7               		jr	nz,.x68klstwtlp
(1) 3140/    10C9 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(1) 3141/    10CD : 18 D2               		jr	.x68klstcont
(1) 3142/    10CF :                     
(1) 3143/    10CF :                     ; ====================================================================
(1) 3144/    10CF :                     ; ----------------------------------------------------------------
(1) 3145/    10CF :                     ; Sound chip routines
(1) 3146/    10CF :                     ; ----------------------------------------------------------------
(1) 3147/    10CF :                     
(1) 3148/    10CF :                     ; --------------------------------------------------------
(1) 3149/    10CF :                     ; chip_env
(1) 3150/    10CF :                     ;
(1) 3151/    10CF :                     ; Process PSG and FM
(1) 3152/    10CF :                     ; --------------------------------------------------------
(1) 3153/    10CF :                     
(1) 3154/    10CF :                     ; Read PSG list backwards so it autodetects
(1) 3155/    10CF :                     ; Tone3 mode
(1) 3156/    10CF :                     
(1) 3157/    10CF :                     chip_env:
(1) 3158/    10CF : FD 21 65 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3159/    10D3 : 21 11 7F            		ld	hl,Zpsg_ctrl
(1) 3160/    10D6 : 16 E0               		ld	d,0E0h			; PSG first ctrl command
(1) 3161/    10D8 : 1E 04               		ld	e,4			; 4 channels
(1) 3162/    10DA :                     .vloop:
(1) 3163/    10DA : CF                  		rst	8
(1) 3164/    10DB : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(1) 3165/    10DE : FD 36 00 00         		ld	(iy+COM),0
(1) 3166/    10E2 : CB 51               		bit	2,c			; bit 2 - stop sound
(1) 3167/    10E4 : 28 17               		jr	z,.ckof
(1) 3168/    10E6 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3169/    10EA : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3170/    10EE : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3171/    10F2 : 7B                  		ld	a,e
(1) 3172/    10F3 : FE 04               		cp	4
(1) 3173/    10F5 : 20 06               		jr	nz,.ckof
(1) 3174/    10F7 : 3E 00               		ld	a,0
(1) 3175/    10F9 : 32 F7 1E            		ld	(psgHatMode),a
(1) 3176/    10FC : CF                  		rst	8
(1) 3177/    10FD :                     .ckof:
(1) 3178/    10FD : CB 49               		bit	1,c			; bit 1 - key off
(1) 3179/    10FF : 28 19               		jr      z,.ckon
(1) 3180/    1101 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3181/    1104 : B7                  		or	a
(1) 3182/    1105 : 28 13               		jr	z,.ckon
(1) 3183/    1107 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3184/    110B : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3185/    110F : 7B                  		ld	a,e
(1) 3186/    1110 : FE 04               		cp	4
(1) 3187/    1112 : 20 06               		jr	nz,.ckon
(1) 3188/    1114 : 3E 00               		ld	a,0
(1) 3189/    1116 : 32 F7 1E            		ld	(psgHatMode),a
(1) 3190/    1119 : CF                  		rst	8
(1) 3191/    111A :                     .ckon:
(1) 3192/    111A : CB 41               		bit	0,c			; bit 0 - key on
(1) 3193/    111C : 28 57               		jr	z,.envproc
(1) 3194/    111E : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3195/    1122 : 3A F7 1E            		ld	a,(psgHatMode)		; check if using tone3 mode.
(1) 3196/    1125 : 4F                  		ld	c,a
(1) 3197/    1126 : E6 03               		and	11b
(1) 3198/    1128 : FE 03               		cp	11b
(1) 3199/    112A : 28 24               		jr	z,.tnmode
(1) 3200/    112C :                     .wrfreq:
(1) 3201/    112C : 7B                  		ld	a,e
(1) 3202/    112D : FE 04               		cp	4
(1) 3203/    112F : 28 35               		jr	z,.sethat
(1) 3204/    1131 : CF                  		rst	8
(1) 3205/    1132 :                     
(1) 3206/    1132 : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 right bits
(1) 3207/    1135 : E6 0F               		and	00001111b
(1) 3208/    1137 : B2                  		or	d		; OR with current channel
(1) 3209/    1138 : 77                  		ld	(hl),a		; write it
(1) 3210/    1139 : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 left bits
(1) 3211/    113C : 0F                  		rrca
(1) 3212/    113D : 0F                  		rrca
(1) 3213/    113E : 0F                  		rrca
(1) 3214/    113F : 0F                  		rrca
(1) 3215/    1140 : E6 0F               		and	00001111b
(1) 3216/    1142 : 4F                  		ld	c,a
(1) 3217/    1143 : FD 7E 20            		ld	a,(iy+DTH)	; Grab MSB bits
(1) 3218/    1146 : 07                  		rlca
(1) 3219/    1147 : 07                  		rlca
(1) 3220/    1148 : 07                  		rlca
(1) 3221/    1149 : 07                  		rlca
(1) 3222/    114A : E6 30               		and	00110000b
(1) 3223/    114C : B1                  		or	c
(1) 3224/    114D : 77                  		ld	(hl),a
(1) 3225/    114E :                     
(1) 3226/    114E : 18 1C               		jr	.nskip
(1) 3227/    1150 :                     ; Tone3 mode
(1) 3228/    1150 :                     .tnmode:
(1) 3229/    1150 : 7B                  		ld	a,e
(1) 3230/    1151 : FE 04               		cp	4			; NOISE
(1) 3231/    1153 : 28 06               		jr	z,.psteal
(1) 3232/    1155 : FE 03               		cp	3			; PSG3, can't play
(1) 3233/    1157 : 28 13               		jr	z,.nskip
(1) 3234/    1159 : 18 D1               		jr	.wrfreq
(1) 3235/    115B :                     .psteal:
(1) 3236/    115B : CF                  		rst	8
(1) 3237/    115C : FD 7E 1C            		ld	a,(iy+DTL)		; Steal PSG3's freq
(1) 3238/    115F : F6 C0               		or	0C0h
(1) 3239/    1161 : 77                  		ld	(hl),a
(1) 3240/    1162 : FD 7E 20            		ld	a,(iy+DTH)
(1) 3241/    1165 : 77                  		ld	(hl),a
(1) 3242/    1166 :                     .sethat:
(1) 3243/    1166 : CF                  		rst	8
(1) 3244/    1167 : 3A F7 1E            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3245/    116A : B2                  		or	d
(1) 3246/    116B : 77                  		ld	(hl),a
(1) 3247/    116C :                     .nskip:
(1) 3248/    116C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3249/    1170 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3250/    1174 : CF                  		rst	8
(1) 3251/    1175 :                     
(1) 3252/    1175 :                     ; ----------------------------
(1) 3253/    1175 :                     ; Process effects
(1) 3254/    1175 :                     ; ----------------------------
(1) 3255/    1175 :                     
(1) 3256/    1175 :                     .envproc:
(1) 3257/    1175 : CF                  		rst	8
(1) 3258/    1176 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3259/    1179 : B7                  		or	a			; no modes
(1) 3260/    117A : CA 00 12            		jp	z,.vedlp
(1) 3261/    117D : FE 01               		cp 	001b			; Attack mode
(1) 3262/    117F : 20 2C               		jr	nz,.chk2
(1) 3263/    1181 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3264/    1185 : FD 46 24            		ld	b,(iy+ALV)
(1) 3265/    1188 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3266/    118B : B7                  		or	a
(1) 3267/    118C : 28 16               		jr	z,.atkend
(1) 3268/    118E : 4F                  		ld	c,a			; c - attack rate
(1) 3269/    118F : 78                  		ld	a,b			; a - attack level
(1) 3270/    1190 : CF                  		rst	8
(1) 3271/    1191 : FD 46 24            		ld	b,(iy+ALV)		; b - OLD attack level
(1) 3272/    1194 : 91                  		sub	a,c			; (attack rate) - (level)
(1) 3273/    1195 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3274/    1197 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3275/    1199 : B8                  		cp	b			; attack rate == level?
(1) 3276/    119A : 38 08               		jr	c,.atkend
(1) 3277/    119C : 28 06               		jr	z,.atkend
(1) 3278/    119E : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3279/    11A1 : CF                  		rst	8
(1) 3280/    11A2 : 18 5C               		jr	.vedlp
(1) 3281/    11A4 :                     .atkend:
(1) 3282/    11A4 : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(1) 3283/    11A7 :                     .atkzero:
(1) 3284/    11A7 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3285/    11AB : 18 53               		jr	.vedlp
(1) 3286/    11AD :                     .chk2:
(1) 3287/    11AD :                     
(1) 3288/    11AD : FE 02               		cp	010b			; Decay mode
(1) 3289/    11AF : 20 31               		jr	nz,.chk4
(1) 3290/    11B1 :                     .dectmr:
(1) 3291/    11B1 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3292/    11B5 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3293/    11B8 : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(1) 3294/    11BB : B8                  		cp	b
(1) 3295/    11BC : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3296/    11BE : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3297/    11C0 : CF                  		rst	8
(1) 3298/    11C1 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3299/    11C4 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3300/    11C6 : B8                  		cp	b			; compare level
(1) 3301/    11C7 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3302/    11C9 : 18 08               		jr	.dksav
(1) 3303/    11CB :                     .dkadd:
(1) 3304/    11CB : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3305/    11CE : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3306/    11D0 : B8                  		cp	b			; compare level
(1) 3307/    11D1 : 30 05               		jr	nc,.dkyend
(1) 3308/    11D3 :                     .dksav:
(1) 3309/    11D3 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3310/    11D6 : 18 28               		jr	.vedlp
(1) 3311/    11D8 :                     .dkyend:
(1) 3312/    11D8 : CF                  		rst	8
(1) 3313/    11D9 : FD 70 04            		ld	(iy+LEV),b		; save last attack
(1) 3314/    11DC : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3315/    11E0 : 18 1E               		jr	.vedlp
(1) 3316/    11E2 :                     .chk4:
(1) 3317/    11E2 : FE 04               		cp	100b			; Sustain phase
(1) 3318/    11E4 : 20 1A               		jr	nz,.vedlp
(1) 3319/    11E6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3320/    11EA : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3321/    11ED : CF                  		rst	8
(1) 3322/    11EE : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3323/    11F1 : 38 05               		jr	c,.killenv		; release done
(1) 3324/    11F3 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3325/    11F6 : 18 08               		jr	.vedlp
(1) 3326/    11F8 :                     .killenv:
(1) 3327/    11F8 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3328/    11FC : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3329/    1200 :                     .vedlp:
(1) 3330/    1200 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3331/    1203 : B7                  		or	a
(1) 3332/    1204 : 28 1E               		jr	z,.noupd
(1) 3333/    1206 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3334/    120A : CF                  		rst	8
(1) 3335/    120B : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(1) 3336/    120E : FD 86 30            		add	a,(iy+PVOL)	; Level + master volume
(1) 3337/    1211 : 30 02               		jr	nc,.vlmuch
(1) 3338/    1213 : 3E FF               		ld	a,-1
(1) 3339/    1215 :                     .vlmuch:
(1) 3340/    1215 : CB 3F               		srl	a		; (Level >> 4)
(1) 3341/    1217 : CB 3F               		srl	a
(1) 3342/    1219 : CB 3F               		srl	a
(1) 3343/    121B : CF                  		rst	8
(1) 3344/    121C : CB 3F               		srl	a
(1) 3345/    121E : E6 0F               		and	00001111b
(1) 3346/    1220 : F6 90               		or	90h		; Set volume-set mode
(1) 3347/    1222 : B2                  		or	d		; add current channel
(1) 3349/    1223 : 77                  		ld	(hl),a		; Write volume
(1) 3351/    1224 :                     
(1) 3352/    1224 :                     .noupd:
(1) 3353/    1224 : FD 2B               		dec	iy		; next COM to check
(1) 3354/    1226 : 7A                  		ld	a,d
(1) 3355/    1227 : CF                  		rst	8
(1) 3356/    1228 : D6 20               		sub	a,20h		; next PSG (backwards)
(1) 3357/    122A : 57                  		ld	d,a
(1) 3358/    122B : 1D                  		dec	e
(1) 3359/    122C : C2 DA 10            		jp	nz,.vloop
(1) 3360/    122F :                     
(1) 3361/    122F :                     ; ----------------------------
(1) 3362/    122F :                     ; FM section
(1) 3363/    122F :                     ; ----------------------------
(1) 3364/    122F :                     
(1) 3365/    122F :                     	; Read FM channels
(1) 3366/    122F :                     	; iy - FM com
(1) 3367/    122F :                     	; ix - FM current instrument data
(1) 3368/    122F :                     	;  c - FM channel ID
(1) 3369/    122F :                     
(1) 3370/    122F :                     
(1) 3371/    122F : FD 21 96 17         		ld	iy,fmcom
(1) 3372/    1233 : DD 21 BA 17         		ld	ix,fmins_com
(1) 3373/    1237 : 01 00 05            		ld	bc,0500h
(1) 3374/    123A : C5                  .nextfm_1:	push	bc
(1) 3375/    123B : CD 91 12            		call	.fm_chnl	; Channel 1
(1) 3376/    123E : C1                  		pop	bc
(1) 3377/    123F : 11 28 00            		ld	de,28h
(1) 3378/    1242 : DD 19               		add	ix,de
(1) 3379/    1244 : FD 23               		inc	iy
(1) 3380/    1246 : CF                  		rst	8
(1) 3381/    1247 : 0C                  		inc	c
(1) 3382/    1248 : 79                  		ld	a,c
(1) 3383/    1249 : FE 03               		cp	3		; c == 3?
(1) 3384/    124B : 20 02               		jr	nz,.nomidc
(1) 3385/    124D : 0C                  		inc	c
(1) 3386/    124E : CF                  		rst	8
(1) 3387/    124F :                     .nomidc:
(1) 3388/    124F : 10 E9               		djnz	.nextfm_1
(1) 3389/    1251 :                     
(1) 3390/    1251 :                     	; Special check for Channel 6
(1) 3391/    1251 : 3A B6 18            		ld	a,(daccom)	; Channel 6 / DAC
(1) 3392/    1254 : 5F                  		ld	e,a
(1) 3393/    1255 : AF                  		xor	a
(1) 3394/    1256 : 32 B6 18            		ld	(daccom),a
(1) 3395/    1259 : CB 43               		bit	0,e		; WAVE sample request
(1) 3396/    125B : 20 21               		jr	nz,.req_dac
(1) 3397/    125D : CB 63               		bit	4,e
(1) 3398/    125F : 20 2A               		jr	nz,.req_pitch
(1) 3399/    1261 : CF                  		rst	8
(1) 3400/    1262 : CB 53               		bit	2,e		; key-cut?
(1) 3401/    1264 : C2 45 14            		jp	nz,dac_off
(1) 3402/    1267 : CB 4B               		bit	1,e		; key-off?
(1) 3403/    1269 : C0                  		ret	nz
(1) 3404/    126A : 3A 08 00            		ld 	a,(dac_me)	; manually check if
(1) 3405/    126D : FE D9               		cp	zopcExx		; WAVE playback is active
(1) 3406/    126F : C8                  		ret	z
(1) 3407/    1270 : 11 28 00            		ld	de,28h
(1) 3408/    1273 : DD 19               		add	ix,de
(1) 3409/    1275 : CF                  		rst	8
(1) 3410/    1276 : DD 7E 00            		ld	a,(ix)
(1) 3411/    1279 : FD 23               		inc	iy
(1) 3412/    127B : 0C                  		inc	c
(1) 3413/    127C : 18 13               		jr	.fm_chnl			; Channel 6 (normal)
(1) 3414/    127E :                     .req_dac:
(1) 3415/    127E : 16 B6               		ld	d,0B6h			; Panning for DAC
(1) 3416/    1280 : 3A AD 17            		ld	a,((fmcom+5)+FMPAN)	; Reuse FM6's panning
(1) 3417/    1283 : 1E C0               		ld	e,11000000b
(1) 3418/    1285 : CD 25 14            		call	fm_send_2
(1) 3419/    1288 : C3 5A 14            		jp	dac_play		; Set playback
(1) 3420/    128B :                     .req_pitch:
(1) 3421/    128B : D9                  		exx
(1) 3422/    128C : 2A D3 19            		ld	hl,(wave_Pitch)
(1) 3423/    128F : D9                  		exx
(1) 3424/    1290 :                     ; 		bit	4,c
(1) 3425/    1290 :                     ; 		ret	nz
(1) 3426/    1290 :                     ; 		exx
(1) 3427/    1290 :                     ; 		push	de
(1) 3428/    1290 :                     ; 		exx
(1) 3429/    1290 :                     ; 		pop	hl
(1) 3430/    1290 :                     ; 		rst	8
(1) 3431/    1290 :                     ; 		add	hl,de
(1) 3432/    1290 :                     ; 		push	hl
(1) 3433/    1290 :                     ; 		exx
(1) 3434/    1290 :                     ; 		pop	de
(1) 3435/    1290 :                     ; 		exx
(1) 3436/    1290 : C9                  		ret
(1) 3437/    1291 :                     
(1) 3438/    1291 :                     ; ----------------------------------------
(1) 3439/    1291 :                     ; Control current FM channel
(1) 3440/    1291 :                     ;
(1) 3441/    1291 :                     ; iy - fmcom
(1) 3442/    1291 :                     ; ix - Instrument data pointer
(1) 3443/    1291 :                     ;  c - FM chip ID
(1) 3444/    1291 :                     ; ----------------------------------------
(1) 3445/    1291 :                     
(1) 3446/    1291 :                     	; 0pvi 0cop
(1) 3447/    1291 :                     	; pvi - update bits:
(1) 3448/    1291 :                     	;      volume(v)
(1) 3449/    1291 :                     	;      instrument(i)
(1) 3450/    1291 :                     	;      panning(p)
(1) 3451/    1291 :                     	;
(1) 3452/    1291 :                     	; c/o/p key cut, key off, key on
(1) 3453/    1291 :                     .fm_chnl:
(1) 3454/    1291 : FD 7E 00            		ld	a,(iy)		; Get comm bits
(1) 3455/    1294 : B7                  		or	a
(1) 3456/    1295 : C8                  		ret	z
(1) 3457/    1296 : FD 36 00 00         		ld	(iy),0		; Reset
(1) 3458/    129A :                     
(1) 3459/    129A : CB 57               		bit	2,a		; Key-cut (010b) bit?
(1) 3460/    129C : C2 24 13            		jp	nz,.fm_keycut
(1) 3461/    129F : CB 4F               		bit	1,a		; Key-off (100b) bit?
(1) 3462/    12A1 : C2 39 13            		jp	nz,.fm_keyoff
(1) 3463/    12A4 : 47                  		ld	b,a		; b - other update bits
(1) 3464/    12A5 : 79                  		ld	a,c		; check for Channel 6
(1) 3465/    12A6 : FE 06               		cp	6
(1) 3466/    12A8 : CC 45 14            		call	z,dac_off	; auto-mute WAVE playback
(1) 3467/    12AB : CF                  		rst	8
(1) 3468/    12AC : CB 60               		bit	4,b		; Instrument-update bit?  (%0001xxxx)
(1) 3469/    12AE : C4 59 13            		call	nz,.fm_insupd
(1) 3470/    12B1 : CB 68               		bit	5,b		; Volume-update bit? (%0010xxxx)
(1) 3471/    12B3 : C4 C0 13            		call	nz,.fm_volupd	;
(1) 3472/    12B6 : CB 70               		bit	6,b		; Panning update bit? (%0100xxxx)
(1) 3473/    12B8 : C4 40 13            		call	nz,.fm_panupd
(1) 3474/    12BB : CB 40               		bit	0,b		; Key-on (001b) bit?
(1) 3475/    12BD : C8                  		ret	z
(1) 3476/    12BE :                     	; freq update
(1) 3477/    12BE :                     	; all this code is for OP4 (if FM3 is in special)
(1) 3478/    12BE : CF                  		rst	8
(1) 3479/    12BF : 79                  		ld	a,c
(1) 3480/    12C0 : E6 03               		and	11b
(1) 3481/    12C2 : F6 A4               		or	0A4h
(1) 3482/    12C4 : 57                  		ld	d,a
(1) 3483/    12C5 : FD 5E 18            		ld	e,(iy+FMFRQH)
(1) 3484/    12C8 : CB 51               		bit	2,c
(1) 3485/    12CA : C4 25 14            		call	nz,fm_send_2
(1) 3486/    12CD : CC 1A 14            		call	z,fm_send_1
(1) 3487/    12D0 : CF                  		rst	8
(1) 3488/    12D1 : 15                  		dec	d
(1) 3489/    12D2 : 15                  		dec	d
(1) 3490/    12D3 : 15                  		dec	d
(1) 3491/    12D4 : 15                  		dec	d
(1) 3492/    12D5 : FD 5E 1E            		ld	e,(iy+FMFRQL)
(1) 3493/    12D8 : CB 51               		bit	2,c
(1) 3494/    12DA : C4 25 14            		call	nz,fm_send_2
(1) 3495/    12DD : CC 1A 14            		call	z,fm_send_1
(1) 3496/    12E0 : CF                  		rst	8
(1) 3497/    12E1 :                     
(1) 3498/    12E1 : 79                  		ld	a,c
(1) 3499/    12E2 : E6 03               		and	11b
(1) 3500/    12E4 : F6 B0               		or	0B0h
(1) 3501/    12E6 : 57                  		ld	d,a
(1) 3502/    12E7 : DD 5E 1C            		ld	e,(ix+1Ch)
(1) 3503/    12EA : CB 51               		bit	2,c
(1) 3504/    12EC : C4 25 14            		call	nz,fm_send_2
(1) 3505/    12EF : CC 1A 14            		call	z,fm_send_1
(1) 3506/    12F2 : 14                  		inc	d
(1) 3507/    12F3 : 14                  		inc	d
(1) 3508/    12F4 : CF                  		rst	8
(1) 3509/    12F5 : 14                  		inc	d
(1) 3510/    12F6 : 14                  		inc	d
(1) 3511/    12F7 :                     ; 		call	.fm_panset
(1) 3512/    12F7 :                     
(1) 3513/    12F7 :                     	; For Special FM3 mode it just copy-pastes regs
(1) 3514/    12F7 :                     	; from a separate list
(1) 3515/    12F7 : 79                  		ld	a,c		; FM3 special check
(1) 3516/    12F8 : FE 02               		cp	2
(1) 3517/    12FA : 20 19               		jr	nz,.notfm3
(1) 3518/    12FC : 3A F8 1E            		ld	a,(fmSpcMode)
(1) 3519/    12FF : E6 40               		and	01000000b
(1) 3520/    1301 : B7                  		or	a
(1) 3521/    1302 : 28 11               		jr	z,.notfm3
(1) 3522/    1304 : CF                  		rst	8
(1) 3523/    1305 : 21 AA 18            		ld	hl,fm3reg
(1) 3524/    1308 : 06 06               		ld	b,3*2
(1) 3525/    130A :                     .copyops:
(1) 3526/    130A : 5E                  		ld	e,(hl)
(1) 3527/    130B : 23                  		inc	hl
(1) 3528/    130C : 56                  		ld	d,(hl)
(1) 3529/    130D : 23                  		inc	hl
(1) 3530/    130E : 00                  		nop
(1) 3531/    130F : CF                  		rst	8
(1) 3532/    1310 : CD 1A 14            		call	fm_send_1
(1) 3533/    1313 : 10 F5               		djnz	.copyops
(1) 3534/    1315 :                     .notfm3:
(1) 3535/    1315 :                     
(1) 3536/    1315 : CF                  		rst	8
(1) 3537/    1316 : 16 28               		ld	d,28h		; Keys
(1) 3538/    1318 : DD 7E 1F            		ld	a,(ix+01Fh)	; a - Read this ins keys
(1) 3539/    131B : FD 46 06            		ld	b,(iy+FMKEYS)	; b - ALLOWED bits from fmcom
(1) 3540/    131E : A0                  		and	b
(1) 3541/    131F : B1                  		or	c
(1) 3542/    1320 : 5F                  		ld	e,a
(1) 3546/    1321 : C3 1A 14            		jp	fm_send_1
(1) 3547/    1324 :                     
(1) 3548/    1324 :                     .fm_keycut:
(1) 3549/    1324 : 79                  		ld	a,c
(1) 3550/    1325 : E6 03               		and	11b
(1) 3551/    1327 : F6 B4               		or	0B4h
(1) 3552/    1329 : 57                  		ld	d,a
(1) 3553/    132A : CF                  		rst	8
(1) 3554/    132B : DD 7E 1D            		ld	a,(ix+1Dh)
(1) 3555/    132E : E6 07               		and	00000111b
(1) 3556/    1330 : 5F                  		ld	e,a
(1) 3557/    1331 : CB 51               		bit	2,c
(1) 3558/    1333 : CC 1A 14            		call	z,fm_send_1
(1) 3559/    1336 : C4 25 14            		call	nz,fm_send_2
(1) 3560/    1339 :                     .fm_keyoff:
(1) 3561/    1339 : CF                  		rst	8
(1) 3562/    133A : 59                  		ld	e,c
(1) 3563/    133B : 16 28               		ld	d,28h
(1) 3564/    133D : C3 1A 14            		jp	fm_send_1
(1) 3565/    1340 :                     
(1) 3566/    1340 :                     ; d - 0B4h+
(1) 3567/    1340 :                     .fm_panupd:
(1) 3568/    1340 : 79                  		ld	a,c
(1) 3569/    1341 : E6 03               		and	11b
(1) 3570/    1343 : F6 B4               		or	0B4h
(1) 3571/    1345 : 57                  		ld	d,a
(1) 3572/    1346 :                     .fm_panset:
(1) 3573/    1346 : DD 5E 1D            		ld	e,(ix+1Dh)
(1) 3574/    1349 : FD 7E 12            		ld	a,(iy+FMPAN)
(1) 3575/    134C : E6 C0               		and	11000000b
(1) 3576/    134E : B3                  		or	e
(1) 3577/    134F : 5F                  		ld	e,a
(1) 3578/    1350 : CB 51               		bit	2,c
(1) 3579/    1352 : C4 25 14            		call	nz,fm_send_2
(1) 3580/    1355 : CC 1A 14            		call	z,fm_send_1
(1) 3581/    1358 : C9                  		ret
(1) 3582/    1359 :                     
(1) 3583/    1359 :                     ; CPU-intense
(1) 3584/    1359 :                     ; only call this if needed
(1) 3585/    1359 :                     .fm_insupd:
(1) 3586/    1359 : C5                  		push	bc
(1) 3587/    135A : CD 39 13            		call	.fm_keyoff	; restart chip channel
(1) 3588/    135D : CD 8E 14            		call	dac_fill	; TODO: check if it slowdowns here...
(1) 3589/    1360 : DD E5               		push	ix		; copy ix to hl
(1) 3590/    1362 : E1                  		pop	hl
(1) 3591/    1363 : 79                  		ld	a,c
(1) 3592/    1364 : E6 03               		and	011b
(1) 3593/    1366 : F6 30               		or	30h
(1) 3594/    1368 : CF                  		rst	8
(1) 3595/    1369 : 57                  		ld	d,a
(1) 3596/    136A : 06 1C               		ld	b,4*7
(1) 3597/    136C :                     .copy_1:
(1) 3598/    136C : CF                  		rst	8
(1) 3599/    136D : 5E                  		ld	e,(hl)
(1) 3600/    136E : CB 51               		bit	2,c
(1) 3601/    1370 : CC 1A 14            		call	z,fm_send_1
(1) 3602/    1373 : C4 25 14            		call	nz,fm_send_2
(1) 3603/    1376 : 23                  		inc	hl
(1) 3604/    1377 : 14                  		inc	d
(1) 3605/    1378 : CF                  		rst	8
(1) 3606/    1379 : 00                  		nop
(1) 3607/    137A : 14                  		inc	d
(1) 3608/    137B : 14                  		inc	d
(1) 3609/    137C : 14                  		inc	d
(1) 3610/    137D : 10 ED               		djnz	.copy_1
(1) 3611/    137F : 11 04 00            		ld	de,4		; skip AMS, FMS,
(1) 3612/    1382 : 19                  		add	hl,de		; old FM3 check (oops) and keys
(1) 3613/    1383 : 79                  		ld	a,c		; check for Channel 3
(1) 3614/    1384 : FE 02               		cp	2
(1) 3615/    1386 : 20 36               		jr	nz,.fm_ins_ex
(1) 3616/    1388 : CF                  		rst	8
(1) 3617/    1389 : 3A F8 1E            		ld	a,(fmSpcMode)	; Is it in special mode?
(1) 3618/    138C : CB 77               		bit	6,a
(1) 3619/    138E : 28 2E               		jr	z,.fm_ins_ex
(1) 3620/    1390 : DD E5               		push	ix
(1) 3621/    1392 : DD 21 AA 18         		ld	ix,fm3reg
(1) 3622/    1396 : 06 03               		ld	b,3
(1) 3623/    1398 :                     .copyops3:
(1) 3624/    1398 : 56                  		ld	d,(hl)		; Read OP1-3 freqs
(1) 3625/    1399 : 23                  		inc	hl
(1) 3626/    139A : CF                  		rst	8
(1) 3627/    139B : 5E                  		ld	e,(hl)
(1) 3628/    139C : 23                  		inc	hl
(1) 3629/    139D : DD 72 00            		ld	(ix),d
(1) 3630/    13A0 : DD 73 02            		ld	(ix+2),e
(1) 3631/    13A3 : DD 23               		inc	ix
(1) 3632/    13A5 : CF                  		rst	8
(1) 3633/    13A6 : DD 23               		inc	ix
(1) 3634/    13A8 : DD 23               		inc	ix
(1) 3635/    13AA : DD 23               		inc	ix
(1) 3636/    13AC : 10 EA               		djnz	.copyops3
(1) 3637/    13AE : DD 21 98 17         		ld	ix,fmcom+2	; Read OP4 freq
(1) 3638/    13B2 : 56                  		ld	d,(hl)
(1) 3639/    13B3 : 23                  		inc	hl
(1) 3640/    13B4 : CF                  		rst	8
(1) 3641/    13B5 : 5E                  		ld	e,(hl)
(1) 3642/    13B6 : DD 72 18            		ld	(ix+FMFRQH),d
(1) 3643/    13B9 : DD 73 1E            		ld	(ix+FMFRQL),e
(1) 3644/    13BC : DD E1               		pop	ix
(1) 3645/    13BE :                     .fm_ins_ex:
(1) 3646/    13BE : C1                  		pop	bc
(1) 3647/    13BF : C9                  		ret
(1) 3648/    13C0 :                     
(1) 3649/    13C0 :                     ; b - Volume decrement
(1) 3650/    13C0 :                     ; c - Channel id
(1) 3651/    13C0 :                     ; d - 40h+ base reg
(1) 3652/    13C0 :                     ; h - Algorithm
(1) 3653/    13C0 :                     .fm_volupd:
(1) 3654/    13C0 : C5                  		push	bc
(1) 3655/    13C1 : FD 46 0C            		ld	b,(iy+FMVOL)
(1) 3656/    13C4 :                     .fm_chnlvol:
(1) 3657/    13C4 : DD E5               		push	ix
(1) 3658/    13C6 : DD 7E 1C            		ld	a,(ix+1Ch)
(1) 3659/    13C9 : E6 07               		and	111b
(1) 3660/    13CB : 67                  		ld	h,a
(1) 3661/    13CC : 11 04 00            		ld	de,4
(1) 3662/    13CF : DD 19               		add	ix,de
(1) 3663/    13D1 : 79                  		ld	a,c
(1) 3664/    13D2 : E6 03               		and	11b
(1) 3665/    13D4 : CF                  		rst	8
(1) 3666/    13D5 : F6 40               		or	40h
(1) 3667/    13D7 : 57                  		ld	d,a
(1) 3668/    13D8 : 7C                  		ld	a,h		; Check 40h
(1) 3669/    13D9 : FE 07               		cp	7		; Algorithm == 07h?
(1) 3670/    13DB : CC 06 14            		call	z,.do_vol
(1) 3671/    13DE : 7A                  		ld	a,d
(1) 3672/    13DF : C6 04               		add	a,4
(1) 3673/    13E1 : CF                  		rst	8
(1) 3674/    13E2 : 57                  		ld	d,a
(1) 3675/    13E3 : DD 23               		inc	ix
(1) 3676/    13E5 : 7C                  		ld	a,h		; Check 44h
(1) 3677/    13E6 : FE 05               		cp	5		; Algorithm > 05h?
(1) 3678/    13E8 : D4 06 14            		call	nc,.do_vol
(1) 3679/    13EB : 7A                  		ld	a,d
(1) 3680/    13EC : C6 04               		add	a,4
(1) 3681/    13EE : 57                  		ld	d,a
(1) 3682/    13EF : DD 23               		inc	ix
(1) 3683/    13F1 : CF                  		rst	8
(1) 3684/    13F2 : 7C                  		ld	a,h		; Check 48h
(1) 3685/    13F3 : FE 04               		cp	4		; Algorithm > 04h?
(1) 3686/    13F5 : D4 06 14            		call	nc,.do_vol
(1) 3687/    13F8 : 7A                  		ld	a,d
(1) 3688/    13F9 : C6 04               		add	a,4
(1) 3689/    13FB : 57                  		ld	d,a
(1) 3690/    13FC : DD 23               		inc	ix
(1) 3691/    13FE : CD 06 14            		call	.do_vol		; Do 4Ch
(1) 3692/    1401 : DD E1               		pop	ix
(1) 3693/    1403 : C1                  		pop	bc
(1) 3694/    1404 : CF                  		rst	8
(1) 3695/    1405 : C9                  		ret
(1) 3696/    1406 :                     .do_vol:
(1) 3697/    1406 : DD 7E 00            		ld	a,(ix)
(1) 3698/    1409 : 80                  		add	a,b
(1) 3699/    140A : FE 7F               		cp	7Fh
(1) 3700/    140C : 38 02               		jr	c,.vmuch
(1) 3701/    140E : 3E 7F               		ld	a,7Fh
(1) 3702/    1410 :                     .vmuch:
(1) 3703/    1410 : 5F                  		ld	e,a
(1) 3704/    1411 : CB 51               		bit	2,c
(1) 3705/    1413 : CC 1A 14            		call	z,fm_send_1
(1) 3706/    1416 : C4 25 14            		call	nz,fm_send_2
(1) 3707/    1419 : C9                  		ret
(1) 3708/    141A :                     
(1) 3709/    141A :                     ; ---------------------------------------------
(1) 3710/    141A :                     ; FM send registers
(1) 3711/    141A :                     ;
(1) 3712/    141A :                     ; Input:
(1) 3713/    141A :                     ; d - ctrl
(1) 3714/    141A :                     ; e - data
(1) 3715/    141A :                     ; ---------------------------------------------
(1) 3716/    141A :                     
(1) 3717/    141A :                     ; Channels 1-3 and global registers
(1) 3718/    141A :                     fm_send_1:
(1) 3719/    141A : 7A                  		ld	a,d
(1) 3720/    141B : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3721/    141E : 00                  		nop
(1) 3722/    141F : 7B                  		ld	a,e
(1) 3723/    1420 : 32 01 40            		ld	(Zym_data_1),a
(1) 3724/    1423 : 00                  		nop
(1) 3725/    1424 : C9                  		ret
(1) 3726/    1425 :                     ; Channels 4-6
(1) 3727/    1425 :                     fm_send_2:
(1) 3728/    1425 : 7A                  		ld	a,d
(1) 3729/    1426 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3730/    1429 : 00                  		nop
(1) 3731/    142A : 7B                  		ld	a,e
(1) 3732/    142B : 32 03 40            		ld	(Zym_data_2),a
(1) 3733/    142E : 00                  		nop
(1) 3734/    142F : C9                  		ret
(1) 3735/    1430 :                     
(1) 3736/    1430 :                     ; --------------------------------------------------------
(1) 3737/    1430 :                     ; brute-force WAVE ON/OFF playback
(1) 3738/    1430 :                     ; --------------------------------------------------------
(1) 3739/    1430 :                     
(1) 3740/    1430 :                     dac_on:
(1) 3741/    1430 : 3E 2B               		ld	a,2Bh
(1) 3742/    1432 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3743/    1435 : 3E 80               		ld	a,80h
(1) 3744/    1437 : 32 01 40            		ld	(Zym_data_1),a
(1) 3745/    143A : 3E D9               		ld 	a,zopcExx
(1) 3746/    143C : 32 08 00            		ld	(dac_me),a
(1) 3747/    143F : 3E F5               		ld 	a,zopcPushAf
(1) 3748/    1441 : 32 8E 14            		ld	(dac_fill),a
(1) 3749/    1444 : C9                  		ret
(1) 3750/    1445 :                     dac_off:
(1) 3751/    1445 : 3E 2B               		ld	a,2Bh
(1) 3752/    1447 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3753/    144A : 3E 00               		ld	a,00h
(1) 3754/    144C : 32 01 40            		ld	(Zym_data_1),a
(1) 3755/    144F : 3E C9               		ld 	a,zopcRet
(1) 3756/    1451 : 32 08 00            		ld	(dac_me),a
(1) 3757/    1454 : 3E C9               		ld 	a,zopcRet
(1) 3758/    1456 : 32 8E 14            		ld	(dac_fill),a
(1) 3759/    1459 : C9                  		ret
(1) 3760/    145A :                     
(1) 3761/    145A :                     ; --------------------------------------------------------
(1) 3762/    145A :                     ; dac_play
(1) 3763/    145A :                     ;
(1) 3764/    145A :                     ; Plays a new sample
(1) 3765/    145A :                     ; --------------------------------------------------------
(1) 3766/    145A :                     
(1) 3767/    145A :                     dac_play:
(1) 3768/    145A : F3                  		di
(1) 3769/    145B : CD 45 14            		call	dac_off
(1) 3770/    145E : D9                  		exx				; get exx regs
(1) 3771/    145F : 01 1B 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3772/    1462 : ED 5B D3 19         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3773/    1466 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3774/    1469 : D9                  		exx				; move them back
(1) 3775/    146A : 2A CA 19            		ld	hl,(wave_Start)
(1) 3776/    146D : 3A CC 19            		ld 	a,(wave_Start+2)
(1) 3777/    1470 : 22 F0 1E            		ld	(dDacPntr),hl
(1) 3778/    1473 : 32 F2 1E            		ld	(dDacPntr+2),a
(1) 3779/    1476 : 2A CD 19            		ld	hl,(wave_Len)
(1) 3780/    1479 : 3A CF 19            		ld 	a,(wave_Len+2)
(1) 3781/    147C : 22 F3 1E            		ld	(dDacCntr),hl
(1) 3782/    147F : 32 F5 1E            		ld	(dDacCntr+2),a
(1) 3783/    1482 : AF                  		xor	a
(1) 3784/    1483 : 32 F6 1E            		ld	(dDacFifoMid),a
(1) 3785/    1486 : CD 9C 14            		call	dac_firstfill
(1) 3786/    1489 : CD 30 14            		call	dac_on
(1) 3787/    148C : FB                  		ei
(1) 3788/    148D : C9                  		ret
(1) 3789/    148E :                     
(1) 3790/    148E :                     ; --------------------------------------------------------
(1) 3791/    148E :                     ; dac_fill
(1) 3792/    148E :                     ;
(1) 3793/    148E :                     ; Refills a half of the WAVE FIFO data, automatic
(1) 3794/    148E :                     ;
(1) 3795/    148E :                     ; *** self-modifiable code ***
(1) 3796/    148E :                     ; --------------------------------------------------------
(1) 3797/    148E :                     
(1) 3798/    148E : F5                  dac_fill:	push	af		; <-- code changes between PUSH AF(playing) and RET(stopped)
(1) 3799/    148F : 3A F6 1E            		ld	a,(dDacFifoMid)
(1) 3800/    1492 : D9                  		exx
(1) 3801/    1493 : AC                  		xor	h		; xx.00
(1) 3802/    1494 : D9                  		exx
(1) 3803/    1495 : E6 80               		and	80h
(1) 3804/    1497 : C2 A0 14            		jp	nz,dac_refill
(1) 3805/    149A : F1                  		pop	af
(1) 3806/    149B : C9                  		ret
(1) 3807/    149C :                     
(1) 3808/    149C :                     ; First wave fill
(1) 3809/    149C :                     dac_firstfill:
(1) 3810/    149C : CD C5 0F            		call	get_tick
(1) 3811/    149F : F5                  		push	af
(1) 3812/    14A0 :                     
(1) 3813/    14A0 :                     ; Wave refill request
(1) 3814/    14A0 :                     ; Got this from GEMS, but I changed it to play
(1) 3815/    14A0 :                     ; larger samples (7FFFFFh maximum)
(1) 3816/    14A0 :                     dac_refill:
(1) 3817/    14A0 : CF                  		rst	8
(1) 3818/    14A1 : C5                  		push	bc
(1) 3819/    14A2 : D5                  		push	de
(1) 3820/    14A3 : E5                  		push	hl
(1) 3821/    14A4 : 3A D5 19            		ld	a,(wave_Flags)
(1) 3822/    14A7 : FE 07               		cp	111b
(1) 3823/    14A9 : D2 60 15            		jp	nc,.FDF7
(1) 3824/    14AC : 3A F5 1E            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3825/    14AF : 2A F3 1E            		ld	hl,(dDacCntr)
(1) 3826/    14B2 : 01 80 00            		ld	bc,80h
(1) 3827/    14B5 : 37                  		scf
(1) 3828/    14B6 : 3F                  		ccf
(1) 3829/    14B7 : ED 42               		sbc	hl,bc
(1) 3830/    14B9 : DE 00               		sbc	a,0
(1) 3831/    14BB : 32 F5 1E            		ld	(dDacCntr+2),a
(1) 3832/    14BE : 22 F3 1E            		ld	(dDacCntr),hl
(1) 3833/    14C1 : 16 1B               		ld	d,dWaveBuff>>8
(1) 3834/    14C3 : B7                  		or	a
(1) 3835/    14C4 : FA EE 14            		jp	m,.dac_over
(1) 3836/    14C7 :                     .keepcntr:
(1) 3837/    14C7 : 3A F6 1E            		ld	a,(dDacFifoMid)
(1) 3838/    14CA : 5F                  		ld	e,a
(1) 3839/    14CB : C6 80               		add 	a,80h
(1) 3840/    14CD : 32 F6 1E            		ld	(dDacFifoMid),a
(1) 3841/    14D0 : 2A F0 1E            		ld	hl,(dDacPntr)
(1) 3842/    14D3 : 3A F2 1E            		ld	a,(dDacPntr+2)
(1) 3843/    14D6 : CD 34 10            		call	transferRom
(1) 3844/    14D9 : 2A F0 1E            		ld	hl,(dDacPntr)
(1) 3845/    14DC : 3A F2 1E            		ld	a,(dDacPntr+2)
(1) 3846/    14DF : 01 80 00            		ld	bc,80h
(1) 3847/    14E2 : 09                  		add	hl,bc
(1) 3848/    14E3 : CE 00               		adc	a,0
(1) 3849/    14E5 : 22 F0 1E            		ld	(dDacPntr),hl
(1) 3850/    14E8 : 32 F2 1E            		ld	(dDacPntr+2),a
(1) 3851/    14EB : C3 63 15            		jp	.FDFreturn
(1) 3852/    14EE :                     
(1) 3853/    14EE :                     ; if wav's len-timer finished:
(1) 3854/    14EE :                     .dac_over:
(1) 3855/    14EE : 16 1B               		ld	d,dWaveBuff>>8
(1) 3856/    14F0 : 3A D5 19            		ld	a,(wave_Flags)
(1) 3857/    14F3 : E6 01               		and	01b
(1) 3858/    14F5 : B7                  		or	a
(1) 3859/    14F6 : C2 19 15            		jp	nz,.FDF72
(1) 3860/    14F9 : 7D                  		ld	a,l
(1) 3861/    14FA : C6 80               		add	a,80h
(1) 3862/    14FC : 4F                  		ld	c,a
(1) 3863/    14FD : 06 00               		ld	b,0
(1) 3864/    14FF : C5                  		push	bc
(1) 3865/    1500 : 3A F6 1E            		ld	a,(dDacFifoMid)
(1) 3866/    1503 : 5F                  		ld	e,a
(1) 3867/    1504 : C6 80               		add	a,80h
(1) 3868/    1506 : 32 F6 1E            		ld	(dDacFifoMid),a
(1) 3869/    1509 : C1                  		pop	bc			; C <- # just xfered
(1) 3870/    150A : 79                  		ld	a,c
(1) 3871/    150B : B0                  		or	b
(1) 3872/    150C : 28 52               		jr	z,.FDF7
(1) 3873/    150E : 2A F0 1E            		ld	hl,(dDacPntr)
(1) 3874/    1511 : 3A F2 1E            		ld	a,(dDacPntr+2)
(1) 3875/    1514 : CD 34 10            		call	transferRom
(1) 3876/    1517 : 18 47               		jr	.FDF7
(1) 3877/    1519 :                     .FDF72:
(1) 3878/    1519 :                     
(1) 3879/    1519 :                     	; loop sample
(1) 3880/    1519 : C5                  		push	bc
(1) 3881/    151A : D5                  		push	de
(1) 3882/    151B : 3A D2 19            		ld	a,(wave_Loop+2)
(1) 3883/    151E : 4F                  		ld	c,a
(1) 3884/    151F : ED 5B D0 19         		ld	de,(wave_Loop)
(1) 3885/    1523 : 2A CA 19            		ld	hl,(wave_Start)
(1) 3886/    1526 : 3A CC 19            		ld 	a,(wave_Start+2)
(1) 3887/    1529 : 81                  		add	a,c
(1) 3888/    152A : 19                  		add	hl,de
(1) 3889/    152B : CE 00               		adc	a,0
(1) 3890/    152D : 22 F0 1E            		ld	(dDacPntr),hl
(1) 3891/    1530 : 32 F2 1E            		ld	(dDacPntr+2),a
(1) 3892/    1533 : 2A CD 19            		ld	hl,(wave_Len)
(1) 3893/    1536 : 3A CF 19            		ld 	a,(wave_Len+2)
(1) 3894/    1539 : 91                  		sub	a,c
(1) 3895/    153A : 37                  		scf
(1) 3896/    153B : 3F                  		ccf
(1) 3897/    153C : ED 52               		sbc	hl,de
(1) 3898/    153E : DE 00               		sbc	a,0
(1) 3899/    1540 : 22 F3 1E            		ld	(dDacCntr),hl
(1) 3900/    1543 : 32 F5 1E            		ld	(dDacCntr+2),a
(1) 3901/    1546 : D1                  		pop	de
(1) 3902/    1547 : C1                  		pop	bc
(1) 3903/    1548 : 78                  		ld	a,b
(1) 3904/    1549 : B1                  		or	c
(1) 3905/    154A : 28 17               		jr	z,.FDFreturn
(1) 3906/    154C : 3A F6 1E            		ld	a,(dDacFifoMid)
(1) 3907/    154F : 5F                  		ld	e,a
(1) 3908/    1550 : C6 80               		add	a,80h
(1) 3909/    1552 : 32 F6 1E            		ld	(dDacFifoMid),a
(1) 3910/    1555 : 2A F0 1E            		ld	hl,(dDacPntr)
(1) 3911/    1558 : 3A F2 1E            		ld	a,(dDacPntr+2)
(1) 3912/    155B : CD 34 10            		call	transferRom
(1) 3913/    155E : 18 03               		jr	.FDFreturn
(1) 3914/    1560 :                     .FDF7:
(1) 3915/    1560 : CD 45 14            		call	dac_off		; DAC finished
(1) 3916/    1563 :                     .FDFreturn:
(1) 3917/    1563 : E1                  		pop	hl
(1) 3918/    1564 : D1                  		pop	de
(1) 3919/    1565 : C1                  		pop	bc
(1) 3920/    1566 : F1                  		pop	af
(1) 3921/    1567 : C9                  		ret
(1) 3922/    1568 :                     
(1) 3923/    1568 :                     ; ====================================================================
(1) 3924/    1568 :                     ; ----------------------------------------------------------------
(1) 3925/    1568 :                     ; Tables
(1) 3926/    1568 :                     ; ----------------------------------------------------------------
(1) 3927/    1568 :                     
(1) 3928/    1568 : 84 02               fmFreq_List:	dw 644
(1) 3929/    156A : A9 02               		dw 681
(1) 3930/    156C : D2 02               		dw 722
(1) 3931/    156E : FD 02               		dw 765
(1) 3932/    1570 : 2A 03               		dw 810
(1) 3933/    1572 : 5A 03               		dw 858
(1) 3934/    1574 : 8E 03               		dw 910
(1) 3935/    1576 : C4 03               		dw 964
(1) 3936/    1578 : FD 03               		dw 1021
(1) 3937/    157A : 39 04               		dw 1081
(1) 3938/    157C : 7A 04               		dw 1146
(1) 3939/    157E : BE 04               		dw 1214
(1) 3940/    1580 :                     psgFreq_List:
(1) 3941/    1580 : FF FF               		dw -1		; C-0 $0
(1) 3942/    1582 : FF FF               		dw -1
(1) 3943/    1584 : FF FF               		dw -1
(1) 3944/    1586 : FF FF               		dw -1
(1) 3945/    1588 : FF FF               		dw -1
(1) 3946/    158A : FF FF               		dw -1
(1) 3947/    158C : FF FF               		dw -1
(1) 3948/    158E : FF FF               		dw -1
(1) 3949/    1590 : FF FF               		dw -1
(1) 3950/    1592 : FF FF               		dw -1
(1) 3951/    1594 : FF FF               		dw -1
(1) 3952/    1596 : FF FF               		dw -1
(1) 3953/    1598 : FF FF               		dw -1		; C-1 $C
(1) 3954/    159A : FF FF               		dw -1
(1) 3955/    159C : FF FF               		dw -1
(1) 3956/    159E : FF FF               		dw -1
(1) 3957/    15A0 : FF FF               		dw -1
(1) 3958/    15A2 : FF FF               		dw -1
(1) 3959/    15A4 : FF FF               		dw -1
(1) 3960/    15A6 : FF FF               		dw -1
(1) 3961/    15A8 : FF FF               		dw -1
(1) 3962/    15AA : FF FF               		dw -1
(1) 3963/    15AC : FF FF               		dw -1
(1) 3964/    15AE : FF FF               		dw -1
(1) 3965/    15B0 : FF FF               		dw -1		; C-2 $18
(1) 3966/    15B2 : FF FF               		dw -1
(1) 3967/    15B4 : FF FF               		dw -1
(1) 3968/    15B6 : FF FF               		dw -1
(1) 3969/    15B8 : FF FF               		dw -1
(1) 3970/    15BA : FF FF               		dw -1
(1) 3971/    15BC : FF FF               		dw -1
(1) 3972/    15BE : FF FF               		dw -1
(1) 3973/    15C0 : FF FF               		dw -1
(1) 3974/    15C2 : FF FF               		dw -1
(1) 3975/    15C4 : FF FF               		dw -1
(1) 3976/    15C6 : FF FF               		dw -1
(1) 3977/    15C8 : FF FF               		dw -1		; C-3 $24
(1) 3978/    15CA : FF FF               		dw -1
(1) 3979/    15CC : FF FF               		dw -1
(1) 3980/    15CE : FF FF               		dw -1
(1) 3981/    15D0 : FF FF               		dw -1
(1) 3982/    15D2 : FF FF               		dw -1
(1) 3983/    15D4 : FF FF               		dw -1
(1) 3984/    15D6 : FF FF               		dw -1
(1) 3985/    15D8 : FF FF               		dw -1
(1) 3986/    15DA : F8 03               		dw 3F8h
(1) 3987/    15DC : BF 03               		dw 3BFh
(1) 3988/    15DE : 89 03               		dw 389h
(1) 3989/    15E0 : 56 03               		dw 356h		;C-4 30
(1) 3990/    15E2 : 26 03               		dw 326h
(1) 3991/    15E4 : F9 02               		dw 2F9h
(1) 3992/    15E6 : CE 02               		dw 2CEh
(1) 3993/    15E8 : A5 02               		dw 2A5h
(1) 3994/    15EA : 80 02               		dw 280h
(1) 3995/    15EC : 5C 02               		dw 25Ch
(1) 3996/    15EE : 3A 02               		dw 23Ah
(1) 3997/    15F0 : 1A 02               		dw 21Ah
(1) 3998/    15F2 : FB 01               		dw 1FBh
(1) 3999/    15F4 : DF 01               		dw 1DFh
(1) 4000/    15F6 : C4 01               		dw 1C4h
(1) 4001/    15F8 : AB 01               		dw 1ABh		;C-5 3C
(1) 4002/    15FA : 93 01               		dw 193h
(1) 4003/    15FC : 7D 01               		dw 17Dh
(1) 4004/    15FE : 67 01               		dw 167h
(1) 4005/    1600 : 53 01               		dw 153h
(1) 4006/    1602 : 40 01               		dw 140h
(1) 4007/    1604 : 2E 01               		dw 12Eh
(1) 4008/    1606 : 1D 01               		dw 11Dh
(1) 4009/    1608 : 0D 01               		dw 10Dh
(1) 4010/    160A : FE 00               		dw 0FEh
(1) 4011/    160C : EF 00               		dw 0EFh
(1) 4012/    160E : E2 00               		dw 0E2h
(1) 4013/    1610 : D6 00               		dw 0D6h		;C-6 48
(1) 4014/    1612 : C9 00               		dw 0C9h
(1) 4015/    1614 : BE 00               		dw 0BEh
(1) 4016/    1616 : B4 00               		dw 0B4h
(1) 4017/    1618 : A9 00               		dw 0A9h
(1) 4018/    161A : A0 00               		dw 0A0h
(1) 4019/    161C : 97 00               		dw 97h
(1) 4020/    161E : 8F 00               		dw 8Fh
(1) 4021/    1620 : 87 00               		dw 87h
(1) 4022/    1622 : 7F 00               		dw 7Fh
(1) 4023/    1624 : 78 00               		dw 78h
(1) 4024/    1626 : 71 00               		dw 71h
(1) 4025/    1628 : 6B 00               		dw 6Bh		; C-7 54
(1) 4026/    162A : 65 00               		dw 65h
(1) 4027/    162C : 5F 00               		dw 5Fh
(1) 4028/    162E : 5A 00               		dw 5Ah
(1) 4029/    1630 : 55 00               		dw 55h
(1) 4030/    1632 : 50 00               		dw 50h
(1) 4031/    1634 : 4B 00               		dw 4Bh
(1) 4032/    1636 : 47 00               		dw 47h
(1) 4033/    1638 : 43 00               		dw 43h
(1) 4034/    163A : 40 00               		dw 40h
(1) 4035/    163C : 3C 00               		dw 3Ch
(1) 4036/    163E : 39 00               		dw 39h
(1) 4037/    1640 : 36 00               		dw 36h		; C-8 $60
(1) 4038/    1642 : 33 00               		dw 33h
(1) 4039/    1644 : 30 00               		dw 30h
(1) 4040/    1646 : 2D 00               		dw 2Dh
(1) 4041/    1648 : 2B 00               		dw 2Bh
(1) 4042/    164A : 28 00               		dw 28h
(1) 4043/    164C : 26 00               		dw 26h
(1) 4044/    164E : 24 00               		dw 24h
(1) 4045/    1650 : 22 00               		dw 22h
(1) 4046/    1652 : 20 00               		dw 20h
(1) 4047/    1654 : 1F 00               		dw 1Fh
(1) 4048/    1656 : 1D 00               		dw 1Dh
(1) 4049/    1658 : 1B 00               		dw 1Bh		; C-9 $6C
(1) 4050/    165A : 1A 00               		dw 1Ah
(1) 4051/    165C : 18 00               		dw 18h
(1) 4052/    165E : 17 00               		dw 17h
(1) 4053/    1660 : 16 00               		dw 16h
(1) 4054/    1662 : 15 00               		dw 15h
(1) 4055/    1664 : 13 00               		dw 13h
(1) 4056/    1666 : 12 00               		dw 12h
(1) 4057/    1668 : 11 00               		dw 11h
(1) 4058/    166A : 10 00                		dw 10h
(1) 4059/    166C : 09 00                		dw 9h
(1) 4060/    166E : 08 00                		dw 8h
(1) 4061/    1670 : 00 00               		dw 0
(1) 4062/    1672 :                     
(1) 4063/    1672 :                     ; TODO: some of these freqs need checking
(1) 4064/    1672 : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 4065/    1674 : 00 01               		dw 100h
(1) 4066/    1676 : 00 01               		dw 100h
(1) 4067/    1678 : 00 01               		dw 100h
(1) 4068/    167A : 00 01               		dw 100h
(1) 4069/    167C : 00 01               		dw 100h
(1) 4070/    167E : 00 01               		dw 100h
(1) 4071/    1680 : 00 01               		dw 100h
(1) 4072/    1682 : 00 01               		dw 100h
(1) 4073/    1684 : 00 01               		dw 100h
(1) 4074/    1686 : 00 01               		dw 100h
(1) 4075/    1688 : 00 01               		dw 100h
(1) 4076/    168A : 00 01               		dw 100h		; C-1
(1) 4077/    168C : 00 01               		dw 100h
(1) 4078/    168E : 00 01               		dw 100h
(1) 4079/    1690 : 00 01               		dw 100h
(1) 4080/    1692 : 00 01               		dw 100h
(1) 4081/    1694 : 00 01               		dw 100h
(1) 4082/    1696 : 00 01               		dw 100h
(1) 4083/    1698 : 00 01               		dw 100h
(1) 4084/    169A : 00 01               		dw 100h
(1) 4085/    169C : 00 01               		dw 100h
(1) 4086/    169E : 00 01               		dw 100h
(1) 4087/    16A0 : 00 01               		dw 100h
(1) 4088/    16A2 : 00 01               		dw 100h		; C-2
(1) 4089/    16A4 : 00 01               		dw 100h
(1) 4090/    16A6 : 00 01               		dw 100h
(1) 4091/    16A8 : 00 01               		dw 100h
(1) 4092/    16AA : 00 01               		dw 100h
(1) 4093/    16AC : 00 01               		dw 100h
(1) 4094/    16AE : 00 01               		dw 100h
(1) 4095/    16B0 : 00 01               		dw 100h
(1) 4096/    16B2 : 00 01               		dw 100h
(1) 4097/    16B4 : 00 01               		dw 100h
(1) 4098/    16B6 : 36 00               		dw 036h
(1) 4099/    16B8 : 3B 00               		dw 03Bh
(1) 4100/    16BA : 3E 00               		dw 03Eh		; C-3 5512
(1) 4101/    16BC : 43 00               		dw 043h		; C#3
(1) 4102/    16BE : 46 00               		dw 046h		; D-3
(1) 4103/    16C0 : 49 00               		dw 049h		; D#3
(1) 4104/    16C2 : 4E 00               		dw 04Eh		; E-3
(1) 4105/    16C4 : 54 00               		dw 054h		; F-3
(1) 4106/    16C6 : 58 00               		dw 058h		; F#3
(1) 4107/    16C8 : 5E 00               		dw 05Eh		; G-3 8363 -17
(1) 4108/    16CA : 63 00               		dw 063h		; G#3
(1) 4109/    16CC : 68 00               		dw 068h		; A-3
(1) 4110/    16CE : 70 00               		dw 070h		; A#3
(1) 4111/    16D0 : 75 00               		dw 075h		; B-3
(1) 4112/    16D2 : 85 00               		dw 085h		; C-4 11025 -12
(1) 4113/    16D4 : 87 00               		dw 087h		; C#4
(1) 4114/    16D6 : 8C 00               		dw 08Ch		; D-4
(1) 4115/    16D8 : 9A 00               		dw 09Ah		; D#4
(1) 4116/    16DA : 9E 00               		dw 09Eh		; E-4
(1) 4117/    16DC : AD 00               		dw 0ADh		; F-4
(1) 4118/    16DE : B2 00               		dw 0B2h		; F#4
(1) 4119/    16E0 : C0 00               		dw 0C0h		; G-4
(1) 4120/    16E2 : CC 00               		dw 0CCh		; G#4
(1) 4121/    16E4 : D7 00               		dw 0D7h		; A-4
(1) 4122/    16E6 : E6 00               		dw 0E6h		; A#4
(1) 4123/    16E8 : F0 00               		dw 0F0h		; B-4
(1) 4124/    16EA : 00 01               		dw 100h		; C-5 22050
(1) 4125/    16EC : 10 01               		dw 110h		; C#5
(1) 4126/    16EE : 20 01               		dw 120h		; D-5
(1) 4127/    16F0 : 2C 01               		dw 12Ch		; D#5
(1) 4128/    16F2 : 42 01               		dw 142h		; E-5
(1) 4129/    16F4 : 58 01               		dw 158h		; F-5
(1) 4130/    16F6 : 6A 01               		dw 16Ah		; F#5 32000 +6
(1) 4131/    16F8 : 7E 01               		dw 17Eh		; G-5
(1) 4132/    16FA : 90 01               		dw 190h		; G#5
(1) 4133/    16FC : AC 01               		dw 1ACh		; A-5
(1) 4134/    16FE : C2 01               		dw 1C2h		; A#5
(1) 4135/    1700 : E0 01               		dw 1E0h		; B-5
(1) 4136/    1702 : F8 01               		dw 1F8h		; C-6 44100 +12
(1) 4137/    1704 : 10 02               		dw 210h		; C#6
(1) 4138/    1706 : 40 02               		dw 240h		; D-6
(1) 4139/    1708 : 60 02               		dw 260h		; D#6
(1) 4140/    170A : 80 02               		dw 280h		; E-6
(1) 4141/    170C : A0 02               		dw 2A0h		; F-6
(1) 4142/    170E : D0 02               		dw 2D0h		; F#6
(1) 4143/    1710 : F8 02               		dw 2F8h		; G-6
(1) 4144/    1712 : 20 03               		dw 320h		; G#6
(1) 4145/    1714 : 50 03               		dw 350h		; A-6
(1) 4146/    1716 : 80 03               		dw 380h		; A#6
(1) 4147/    1718 : C0 03               		dw 3C0h		; B-6
(1) 4148/    171A : 00 04               		dw 400h		; C-7 88200
(1) 4149/    171C : 00 01               		dw 100h
(1) 4150/    171E : 00 01               		dw 100h
(1) 4151/    1720 : 00 01               		dw 100h
(1) 4152/    1722 : 00 01               		dw 100h
(1) 4153/    1724 : 00 01               		dw 100h
(1) 4154/    1726 : 00 01               		dw 100h
(1) 4155/    1728 : 00 01               		dw 100h
(1) 4156/    172A : 00 01               		dw 100h
(1) 4157/    172C : 00 01               		dw 100h
(1) 4158/    172E : 00 01               		dw 100h
(1) 4159/    1730 : 00 01               		dw 100h
(1) 4160/    1732 : 00 01               		dw 100h		; C-8
(1) 4161/    1734 : 00 01               		dw 100h
(1) 4162/    1736 : 00 01               		dw 100h
(1) 4163/    1738 : 00 01               		dw 100h
(1) 4164/    173A : 00 01               		dw 100h
(1) 4165/    173C : 00 01               		dw 100h
(1) 4166/    173E : 00 01               		dw 100h
(1) 4167/    1740 : 00 01               		dw 100h
(1) 4168/    1742 : 00 01               		dw 100h
(1) 4169/    1744 : 00 01               		dw 100h
(1) 4170/    1746 : 00 01               		dw 100h
(1) 4171/    1748 : 00 01               		dw 100h
(1) 4172/    174A : 00 01               		dw 100h		; C-9
(1) 4173/    174C : 00 01               		dw 100h
(1) 4174/    174E : 00 01               		dw 100h
(1) 4175/    1750 : 00 01               		dw 100h
(1) 4176/    1752 : 00 01               		dw 100h
(1) 4177/    1754 : 00 01               		dw 100h
(1) 4178/    1756 : 00 01               		dw 100h
(1) 4179/    1758 : 00 01               		dw 100h
(1) 4180/    175A : 00 01               		dw 100h
(1) 4181/    175C : 00 01               		dw 100h
(1) 4182/    175E : 00 01               		dw 100h
(1) 4183/    1760 : 00 01               		dw 100h
(1) 4184/    1762 :                     
(1) 4185/    1762 :                     ; --------------------------------------------------------
(1) 4186/    1762 :                     
(1) 4187/    1762 :                     	; PSG psuedo-controls
(1) 4188/    1762 : 00 00 00 00         psgcom		db 00h,00h,00h,00h	;  0 command 1 = key on, 2 = key off, 4 = stop snd
(1) 4189/    1766 : FF FF FF FF         psglev		db -1, -1, -1, -1	;  4 output level attenuation (%llll.0000, -1 = silent)
(1) 4190/    176A : 00 00 00 00         psgatk		db 00h,00h,00h,00h	;  8 attack rate
(1) 4191/    176E : 00 00 00 00         psgdec		db 00h,00h,00h,00h	; 12 decay rate
(1) 4192/    1772 : 00 00 00 00         psgslv		db 00h,00h,00h,00h	; 16 sustain level attenuation
(1) 4193/    1776 : 00 00 00 00         psgrrt		db 00h,00h,00h,00h	; 20 release rate
(1) 4194/    177A : 00 00 00 00         psgenv		db 00h,00h,00h,00h	; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(1) 4195/    177E : 00 00 00 00         psgdtl		db 00h,00h,00h,00h	; 28 tone bottom 4 bits
(1) 4196/    1782 : 00 00 00 00         psgdth		db 00h,00h,00h,00h	; 32 tone upper 6 bits
(1) 4197/    1786 : 00 00 00 00         psgalv		db 00h,00h,00h,00h	; 36 attack level attenuation
(1) 4198/    178A : 00 00 00 00         whdflg		db 00h,00h,00h,00h	; 40 flags to indicate hardware should be updated
(1) 4199/    178E : 00 00 00 00         psgtim		db 00h,00h,00h,00h	; 44 timer for sustain
(1) 4200/    1792 : 00 00 00 00         psgvol		db 00h,00h,00h,00h
(1) 4201/    1796 : 00 00 00 00 00 00   fmcom:		db 00h,00h,00h,00h,00h,00h	;  0 - play bits: 2-cut 1-off 0-play
(1) 4202/    179C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	;  6 - keys xxxx0000b
(1) 4203/    17A2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 12 - volume (for 40h+)
(1) 4204/    17A8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 18 - panning (%LR000000)
(1) 4205/    17AE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 24 - A4h+ (MSB FIRST)
(1) 4206/    17B4 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 30 - A0h+
(1) 4207/    17BA :                     fmins_com:	ds 028h			; Current instrument data for each FM
(1) 4208/    17E2 :                     fmins_com2:	ds 028h
(1) 4209/    180A :                     fmins_com3:	ds 028h
(1) 4210/    1832 :                     fmins_com4:	ds 028h
(1) 4211/    185A :                     fmins_com5:	ds 028h
(1) 4212/    1882 :                     fmins_com6:	ds 028h
(1) 4213/    18AA : 00 AC 00 A8         fm3reg:		dw 0AC00h,0A800h	; S3-S1, S4 is at A6/A2
(1) 4214/    18AE : 00 AD 00 A9         		dw 0AD00h,0A900h
(1) 4215/    18B2 : 00 AE 00 AA         		dw 0AE00h,0AA00h
(1) 4216/    18B6 : 00                  daccom:		db 0			; single byte for key on, off and cut
(1) 4217/    18B7 :                     
(1) 4218/    18B7 :                     trkPointers:
(1) 4219/    18B7 : 00 1E               		dw trkBuff_0
(1) 4220/    18B9 : 00 1F               		dw trkBuff_1
(1) 4221/    18BB :                     
(1) 4222/    18BB :                     ; ====================================================================
(1) 4223/    18BB :                     ; ----------------------------------------------------------------
(1) 4224/    18BB :                     ; Z80 RAM
(1) 4225/    18BB :                     ; ----------------------------------------------------------------
(1) 4226/    18BB :                     
(1) 4227/    18BB :                     insDataC_0	ds 8*16		; Instrument data for each Track slot
(1) 4228/    193B :                     insDataC_1	ds 8*16		; 8*MAX_INS
(1) 4229/    19BB : 00                  x68ksrclsb	db 0			; transferRom temporal LSB
(1) 4230/    19BC : 00                  x68ksrcmid	db 0			; transferRom temporal MID
(1) 4231/    19BD : 00 00               currInsData	dw 0
(1) 4232/    19BF : 00 00               currTblPos	dw 0
(1) 4233/    19C1 : 00 00               currInsPos	dw 0
(1) 4234/    19C3 : 00 00               currTrkCtrl	dw 0
(1) 4235/    19C5 : 00                  currTickBits	db 0		; Current Tick/Tempo bitflags (000000BTb B-beat, T-tick)
(1) 4236/    19C6 : 00                  marsUpd		db 0		; update PWM sound
(1) 4237/    19C7 : 00 00               tickFlag	dw 0			; Tick flag from VBlank, Read as (tickFlag+1) for reading/reseting
(1) 4238/    19C9 : 00                  tickCnt		db 0			; Tick counter (PUT THIS TAG AFTER tickFlag)
(1) 4239/    19CA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4240/    19CC : 00                  		db 0
(1) 4241/    19CD : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4242/    19CF : 00                  		db 0
(1) 4243/    19D0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit (MUST BE BELOW wave_Len)
(1) 4244/    19D2 : 00                  		db 0
(1) 4245/    19D3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4246/    19D5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4247/    19D6 :                     
(1) 4248/    19D6 :                     	; Channel tables: 10h bytes
(1) 4249/    19D6 :                     	; 0  - Link addr (0000h = free, used chnls start from +0020h)
(1) 4250/    19D6 :                     	; 2  - Channel index (ID is set extrenally)
(1) 4251/    19D6 :                     	; 3  - Pitch
(1) 4252/    19D6 :                     	; 4+ - Channel specific...
(1) 4253/    19D6 :                     
(1) 4254/    19D6 :                     	; PSG (80h+)
(1) 4255/    19D6 :                     	;  4 - psgNoise mode
(1) 4256/    19D6 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4257/    19DE : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4258/    19E6 : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4259/    19EE : FF FF               		dw -1	; end-of-list
(1) 4260/    19F0 : 00 00 03 00 00 00   tblPSGN:	db 00h,00h,03h,00h,00h,00h,00h,00h	; Noise (DIRECT CHECK only)
                    00 00 
(1) 4261/    19F8 :                     
(1) 4262/    19F8 :                     	; FM: 90h+ FM3: 0A0h DAC: 0B0h
(1) 4263/    19F8 :                     	;  4 - Special mode (FM3: Special, FM6: DAC)
(1) 4264/    19F8 :                     	;  5 - 24-bit copy of ROM instrument pointer
(1) 4265/    19F8 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4266/    1A00 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4267/    1A08 : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(1) 4268/    1A10 : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(1) 4269/    1A18 : 00 00 02 00 00 00   tblFM3:		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4270/    1A20 : 00 00 05 00 00 00   tblFM6:		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(1) 4271/    1A28 : FF FF               		dw -1	; end-of-list
(1) 4272/    1A2A :                     
(1) 4273/    1A2A : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4274/    1A32 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4275/    1A3A : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4276/    1A42 : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(1) 4277/    1A4A : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(1) 4278/    1A52 : 00 00 05 00 00 00   		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(1) 4279/    1A5A : 00 00 06 00 00 00   		db 00h,00h,06h,00h,00h,00h,00h,00h	; Channel 7
                    00 00 
(1) 4280/    1A62 : FF FF               		dw -1
(1) 4281/    1A64 :                     
(1) 4282/    1A64 :                     	; Format:
(1) 4283/    1A64 :                     	; %00VP0CFO
(1) 4284/    1A64 :                     	; $vp
(1) 4285/    1A64 :                     	; $pp
(1) 4286/    1A64 :                     	; $fi + flags
(1) 4287/    1A64 :                     	; $ii
(1) 4288/    1A64 :                     	; $ii
(1) 4289/    1A64 :                     	; $ii
(1) 4290/    1A64 :                     ; 	 align 8
(1) 4291/    1A64 : 00 00 00 00 00 00   pwmcom:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Playback bits: KeyOn/KeyOff/KeyCut/other update bits
                    00 00 
(1) 4292/    1A6C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; Volume | Pitch MSB
                    00 00 
(1) 4293/    1A74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; Pitch LSB
                    00 00 
(1) 4294/    1A7C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; Playback flags: Loop/Stereo/Left/Right | 32-bit
                    00 00 
(1) 4295/    1A84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; sample location
                    00 00 
(1) 4296/    1A8C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4297/    1A94 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4298/    1A9C :                     
(1) 4299/    1A9C : (MACRO)             		org 1B00h
(1) 4299/    1A9C : 00                                                  db 0
(1) 4299/    1A9D : 00                                                  db 0
(1) 4299/    1A9E : 00                                                  db 0
(1) 4299/    1A9F : 00                                                  db 0
(1) 4299/    1AA0 : 00                                                  db 0
(1) 4299/    1AA1 : 00                                                  db 0
(1) 4299/    1AA2 : 00                                                  db 0
(1) 4299/    1AA3 : 00                                                  db 0
(1) 4299/    1AA4 : 00                                                  db 0
(1) 4299/    1AA5 : 00                                                  db 0
(1) 4299/    1AA6 : 00                                                  db 0
(1) 4299/    1AA7 : 00                                                  db 0
(1) 4299/    1AA8 : 00                                                  db 0
(1) 4299/    1AA9 : 00                                                  db 0
(1) 4299/    1AAA : 00                                                  db 0
(1) 4299/    1AAB : 00                                                  db 0
(1) 4299/    1AAC : 00                                                  db 0
(1) 4299/    1AAD : 00                                                  db 0
(1) 4299/    1AAE : 00                                                  db 0
(1) 4299/    1AAF : 00                                                  db 0
(1) 4299/    1AB0 : 00                                                  db 0
(1) 4299/    1AB1 : 00                                                  db 0
(1) 4299/    1AB2 : 00                                                  db 0
(1) 4299/    1AB3 : 00                                                  db 0
(1) 4299/    1AB4 : 00                                                  db 0
(1) 4299/    1AB5 : 00                                                  db 0
(1) 4299/    1AB6 : 00                                                  db 0
(1) 4299/    1AB7 : 00                                                  db 0
(1) 4299/    1AB8 : 00                                                  db 0
(1) 4299/    1AB9 : 00                                                  db 0
(1) 4299/    1ABA : 00                                                  db 0
(1) 4299/    1ABB : 00                                                  db 0
(1) 4299/    1ABC : 00                                                  db 0
(1) 4299/    1ABD : 00                                                  db 0
(1) 4299/    1ABE : 00                                                  db 0
(1) 4299/    1ABF : 00                                                  db 0
(1) 4299/    1AC0 : 00                                                  db 0
(1) 4299/    1AC1 : 00                                                  db 0
(1) 4299/    1AC2 : 00                                                  db 0
(1) 4299/    1AC3 : 00                                                  db 0
(1) 4299/    1AC4 : 00                                                  db 0
(1) 4299/    1AC5 : 00                                                  db 0
(1) 4299/    1AC6 : 00                                                  db 0
(1) 4299/    1AC7 : 00                                                  db 0
(1) 4299/    1AC8 : 00                                                  db 0
(1) 4299/    1AC9 : 00                                                  db 0
(1) 4299/    1ACA : 00                                                  db 0
(1) 4299/    1ACB : 00                                                  db 0
(1) 4299/    1ACC : 00                                                  db 0
(1) 4299/    1ACD : 00                                                  db 0
(1) 4299/    1ACE : 00                                                  db 0
(1) 4299/    1ACF : 00                                                  db 0
(1) 4299/    1AD0 : 00                                                  db 0
(1) 4299/    1AD1 : 00                                                  db 0
(1) 4299/    1AD2 : 00                                                  db 0
(1) 4299/    1AD3 : 00                                                  db 0
(1) 4299/    1AD4 : 00                                                  db 0
(1) 4299/    1AD5 : 00                                                  db 0
(1) 4299/    1AD6 : 00                                                  db 0
(1) 4299/    1AD7 : 00                                                  db 0
(1) 4299/    1AD8 : 00                                                  db 0
(1) 4299/    1AD9 : 00                                                  db 0
(1) 4299/    1ADA : 00                                                  db 0
(1) 4299/    1ADB : 00                                                  db 0
(1) 4299/    1ADC : 00                                                  db 0
(1) 4299/    1ADD : 00                                                  db 0
(1) 4299/    1ADE : 00                                                  db 0
(1) 4299/    1ADF : 00                                                  db 0
(1) 4299/    1AE0 : 00                                                  db 0
(1) 4299/    1AE1 : 00                                                  db 0
(1) 4299/    1AE2 : 00                                                  db 0
(1) 4299/    1AE3 : 00                                                  db 0
(1) 4299/    1AE4 : 00                                                  db 0
(1) 4299/    1AE5 : 00                                                  db 0
(1) 4299/    1AE6 : 00                                                  db 0
(1) 4299/    1AE7 : 00                                                  db 0
(1) 4299/    1AE8 : 00                                                  db 0
(1) 4299/    1AE9 : 00                                                  db 0
(1) 4299/    1AEA : 00                                                  db 0
(1) 4299/    1AEB : 00                                                  db 0
(1) 4299/    1AEC : 00                                                  db 0
(1) 4299/    1AED : 00                                                  db 0
(1) 4299/    1AEE : 00                                                  db 0
(1) 4299/    1AEF : 00                                                  db 0
(1) 4299/    1AF0 : 00                                                  db 0
(1) 4299/    1AF1 : 00                                                  db 0
(1) 4299/    1AF2 : 00                                                  db 0
(1) 4299/    1AF3 : 00                                                  db 0
(1) 4299/    1AF4 : 00                                                  db 0
(1) 4299/    1AF5 : 00                                                  db 0
(1) 4299/    1AF6 : 00                                                  db 0
(1) 4299/    1AF7 : 00                                                  db 0
(1) 4299/    1AF8 : 00                                                  db 0
(1) 4299/    1AF9 : 00                                                  db 0
(1) 4299/    1AFA : 00                                                  db 0
(1) 4299/    1AFB : 00                                                  db 0
(1) 4299/    1AFC : 00                                                  db 0
(1) 4299/    1AFD : 00                                                  db 0
(1) 4299/    1AFE : 00                                                  db 0
(1) 4299/    1AFF : 00                                                  db 0
(1) 4299/    1B00 :                     
(1) 4300/    1B00 :                     dWaveBuff	ds 100h			; WAVE data buffer: 100h bytes, updates every 80h
(1) 4301/    1C00 :                     trkData_0	ds 100h			; Track note-cache buffers: 100h bytes, updates every 80h
(1) 4302/    1D00 :                     trkData_1	ds 100h
(1) 4303/    1E00 :                     trkBuff_0	ds 20h+(MAX_TRKCHN*8)	;  *** TRACK BUFFER 0, 100h aligned ****
(1) 4304/    1EB0 :                     commZfifo	ds 40h			; Buffer for command requests from 68k (40h bytes, loops)
(1) 4305/    1EF0 : 00 00 00            dDacPntr	db 0,0,0		; WAVE play current ROM position
(1) 4306/    1EF3 : 00 00 00            dDacCntr	db 0,0,0		; WAVE play length counter
(1) 4307/    1EF6 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1) 4308/    1EF7 : 00                  psgHatMode	db 0
(1) 4309/    1EF8 : 00                  fmSpcMode	db 0
(1) 4310/    1EF9 : 00                  flagResChip	db 0			; reset chips flag
(1) 4311/    1EFA :                     trkHdOut	ds 6			; temporal Header for reading Track position/row count
(1) 4312/    1F00 :                     trkBuff_1	ds 20h+(MAX_TRKCHN*8)	;  *** TRACK BUFFER 1, 100h aligned ****
(1) 4313/    1FB0 :                     
(1) 4314/    1FB0 :                     ; Stack area
(1) 4315/    1FB0 :                     
      51/    1FB0 :                     		cpu 68000
      52/    1FB0 :                     		padding off
      53/    497C :                     		phase Z80_CODE+*
      54/    497C :                     Z80_CODE_END:
      55/    497C :                     		align 2
      56/    497C :                     		include "sound/instr.asm"
(1)    1/    497C :                     ; ====================================================================
(1)    2/    497C :                     ; ----------------------------------------------------------------
(1)    3/    497C :                     ; PSG, FM, DAC and PWM instruments go here
(1)    4/    497C :                     ;
(1)    5/    497C :                     ; Any 68k BANK must be set externally if required.
(1)    6/    497C :                     ; (macros add the bank automaticly)
(1)    7/    497C :                     ; ----------------------------------------------------------------
(1)    8/    497C :                     
(1)    9/    497C :                     ; Special include macro for samples
(1)   10/    497C :                     ; Works for both DAC and PWM
(1)   11/    497C :                     ;
(1)   12/    497C :                     ; aligns by 4 at the end so the sample can recycled on 32X
(1)   13/    497C :                     gSmpl macro locate,loop
(1)   14/    497C :                     .start
(1)   15/    497C :                     	dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)	; length
(1)   16/    497C :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   17/    497C :                     	binclude locate,$2C	; actual data
(1)   18/    497C :                     .end
(1)   19/    497C :                     	align 4			; align 4 for pwm's
(1)   20/    497C :                     	endm
(1)   21/    497C :                     
(1)   22/    497C :                     ; --------------------------------------------------------
(1)   23/    497C :                     ; DAC samples
(1)   24/    497C :                     ; --------------------------------------------------------
(1)   25/    497C :                     
(1)   26/    497C :                     	align 4			; FIRST ALIGN FOR PWMs
(1)   27/    497C :                     DacIns_Magic2:
(1)   28/    497C : (MACRO)             	gSmpl "sound/instr/smpl/magic_2.wav",0
(1)   28/    497C :                     .start
(1)   28/    497C : 3A8E 01                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   28/    497F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/    4982 :                             binclude "sound/instr/smpl/magic_2.wav",$2C     ; actual data
(1)   28/   1D7B6 :                     .end
(1)   28/   1D7B6 :                             align 4                 ; align 4 for pwm's
(1)   29/   1D7B8 :                     DacIns_Snare_Gem:
(1)   30/   1D7B8 : (MACRO)             	gSmpl "sound/instr/smpl/snare_lobo.wav",0
(1)   30/   1D7B8 :                     .start
(1)   30/   1D7B8 : 2A11 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   30/   1D7BB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   30/   1D7BE :                             binclude "sound/instr/smpl/snare_lobo.wav",$2C     ; actual data
(1)   30/   1E8E2 :                     .end
(1)   30/   1E8E2 :                             align 4                 ; align 4 for pwm's
(1)   31/   1E8E4 :                     DacIns_CdSnare:
(1)   32/   1E8E4 : (MACRO)             	gSmpl "sound/instr/smpl/cd_snare.wav",0
(1)   32/   1E8E4 :                     .start
(1)   32/   1E8E4 : FA19 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   32/   1E8E7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/   1E8EA :                             binclude "sound/instr/smpl/cd_snare.wav",$2C     ; actual data
(1)   32/   202DE :                     .end
(1)   32/   202DE :                             align 4                 ; align 4 for pwm's
(1)   33/   202E0 :                     DacIns_SaurKick:
(1)   34/   202E0 : (MACRO)             	gSmpl "sound/instr/smpl/sauron_kick.wav",0
(1)   34/   202E0 :                     .start
(1)   34/   202E0 : 940F 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   34/   202E3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/   202E6 :                             binclude "sound/instr/smpl/sauron_kick.wav",$2C     ; actual data
(1)   34/   21274 :                     .end
(1)   34/   21274 :                             align 4                 ; align 4 for pwm's
(1)   35/   21274 :                     DacIns_SaurSnare:
(1)   36/   21274 : (MACRO)             	gSmpl "sound/instr/smpl/sauron_snare.wav",0
(1)   36/   21274 :                     .start
(1)   36/   21274 : E60C 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   36/   21277 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/   2127A :                             binclude "sound/instr/smpl/sauron_snare.wav",$2C     ; actual data
(1)   36/   21F5A :                     .end
(1)   36/   21F5A :                             align 4                 ; align 4 for pwm's
(1)   37/   21F5C :                     DacIns_String1:
(1)   38/   21F5C : (MACRO)             	gSmpl "sound/instr/smpl/string_1.wav",0
(1)   38/   21F5C :                     .start
(1)   38/   21F5C : 5C48 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   38/   21F5F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/   21F62 :                             binclude "sound/instr/smpl/string_1.wav",$2C     ; actual data
(1)   38/   267B8 :                     .end
(1)   38/   267B8 :                             align 4                 ; align 4 for pwm's
(1)   39/   267B8 :                     DacIns_LowString:
(1)   40/   267B8 : (MACRO)             	gSmpl "sound/instr/smpl/lowstring.wav",1200
(1)   40/   267B8 :                     .start
(1)   40/   267B8 : 8A8B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   40/   267BB : B004 00                     dc.b ((1200)&$FF),(((1200)>>8)&$FF),(((1200)>>16)&$FF)
(1)   40/   267BE :                             binclude "sound/instr/smpl/lowstring.wav",$2C     ; actual data
(1)   40/   2F342 :                     .end
(1)   40/   2F342 :                             align 4                 ; align 4 for pwm's
(1)   41/   2F344 :                     
(1)   42/   2F344 :                     ; --------------------------------------------------------
(1)   43/   2F344 :                     ; FM instruments/patches
(1)   44/   2F344 :                     ; --------------------------------------------------------
(1)   45/   2F344 :                     
(1)   46/   2F344 :                     ; Sizes
(1)   47/   2F344 :                     ; Normal FM ins: $20
(1)   48/   2F344 :                     ; Special FM ins: $28
(1)   49/   2F344 :                     ;
(1)   50/   2F344 :                     
(1)   51/   2F344 :                     ; FM3 Special
(1)   52/   2F344 :                     FmIns_Fm3_OpenHat:
(1)   53/   2F344 :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   54/   2F36C :                     FmIns_Fm3_ClosedHat:
(1)   55/   2F36C :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   56/   2F394 :                     FmIns_Fm3_Explosion:
(1)   57/   2F394 :                     		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   58/   2F3BC :                     
(1)   59/   2F3BC :                     ; Normal
(1)   60/   2F3BC :                     FmIns_Guitar_gem:
(1)   61/   2F3BC :                     		binclude "sound/instr/fm/guitar_gem.gsx",$2478,$20
(1)   62/   2F3DC :                     Fmins_Guitar_Heavy:
(1)   63/   2F3DC :                     		binclude "sound/instr/fm/guitar_heavy.gsx",$2478,$20
(1)   64/   2F3FC :                     Fmins_Guitar_puy:
(1)   65/   2F3FC :                     		binclude "sound/instr/fm/guitar_puy.gsx",$2478,$20
(1)   66/   2F41C :                     Fmins_Guitar_puy_2:
(1)   67/   2F41C :                     		binclude "sound/instr/fm/guitar_puy_2.gsx",$2478,$20
(1)   68/   2F43C :                     FmIns_DrumKick_gem:
(1)   69/   2F43C :                     		binclude "sound/instr/fm/drum_kick_gem.gsx",$2478,$20
(1)   70/   2F45C :                     
(1)   71/   2F45C :                     ; FmIns_DrumKick:
(1)   72/   2F45C :                     ; 		binclude "sound/instr/fm/drum_kick.gsx",$2478,$20
(1)   73/   2F45C :                     ; FmIns_DrumSnare:
(1)   74/   2F45C :                     ; 		binclude "sound/instr/fm/drum_snare.gsx",$2478,$20
(1)   75/   2F45C :                     ; ; ; FmIns_DrumCloseHat:
(1)   76/   2F45C :                     ; ; ; 		binclude "sound/instr/fm/drum_closehat.gsx",$2478,$20
(1)   77/   2F45C :                     FmIns_PianoM1:
(1)   78/   2F45C :                     		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)   79/   2F47C :                     ; FmIns_PianoM116:
(1)   80/   2F47C :                     ; 		binclude "sound/instr/fm/piano_m116.gsx",$2478,$20
(1)   81/   2F47C :                     
(1)   82/   2F47C :                     ; ;
(1)   83/   2F47C :                     ; ; ; FmIns_Bass_gum:
(1)   84/   2F47C :                     ; ; ; 		binclude "sound/instr/fm/bass_gum.gsx",$2478,$20
(1)   85/   2F47C :                     FmIns_Bass_calm:
(1)   86/   2F47C :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   87/   2F49C :                     FmIns_Bass_heavy:
(1)   88/   2F49C :                     		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)   89/   2F4BC :                     ; FmIns_Bass_ambient:
(1)   90/   2F4BC :                     ; 		binclude "sound/instr/fm/bass_ambient.gsx",$2478,$20
(1)   91/   2F4BC :                     ; ; ; FmIns_Brass_gummy:
(1)   92/   2F4BC :                     ; ; ; 		binclude "sound/instr/fm/brass_gummy.gsx",$2478,$20
(1)   93/   2F4BC :                     ; ; ; FmIns_Flaute_1:
(1)   94/   2F4BC :                     ; ; ; 		binclude "sound/instr/fm/flaute_1.gsx",$2478,$20
(1)   95/   2F4BC :                     ; FmIns_Bass_1:
(1)   96/   2F4BC :                     ; 		binclude "sound/instr/fm/bass_1.gsx",$2478,$20
(1)   97/   2F4BC :                     ; FmIns_Bass_2:
(1)   98/   2F4BC :                     ; 		binclude "sound/instr/fm/bass_2.gsx",$2478,$20
(1)   99/   2F4BC :                     FmIns_Bass_3:
(1)  100/   2F4BC :                     		binclude "sound/instr/fm/bass_3.gsx",$2478,$20
(1)  101/   2F4DC :                     FmIns_Bass_4:
(1)  102/   2F4DC :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)  103/   2F4FC :                     ; FmIns_Bass_5:
(1)  104/   2F4FC :                     ; 		binclude "sound/instr/fm/bass_5.gsx",$2478,$20
(1)  105/   2F4FC :                     ; FmIns_Bass_6:
(1)  106/   2F4FC :                     ; 		binclude "sound/instr/fm/bass_6.gsx",$2478,$20
(1)  107/   2F4FC :                     FmIns_Bass_groove:
(1)  108/   2F4FC :                     		binclude "sound/instr/fm/bass_groove.gsx",$2478,$20
(1)  109/   2F51C :                     FmIns_Bass_groove_2:
(1)  110/   2F51C :                     		binclude "sound/instr/fm/bass_groove_2.gsx",$2478,$20
(1)  111/   2F53C :                     FmIns_Bass_groove_gem:
(1)  112/   2F53C :                     		binclude "sound/instr/fm/bass_groove_gem.gsx",$2478,$20
(1)  113/   2F55C :                     FmIns_Bass_italo:
(1)  114/   2F55C :                     		binclude "sound/instr/fm/bass_italo.gsx",$2478,$20
(1)  115/   2F57C :                     FmIns_Bass_kon:
(1)  116/   2F57C :                     		binclude "sound/instr/fm/bass_kon.gsx",$2478,$20
(1)  117/   2F59C :                     
(1)  118/   2F59C :                     ; FmIns_Bass_mecan:
(1)  119/   2F59C :                     ; 		binclude "sound/instr/fm/bass_mecan.gsx",$2478,$20
(1)  120/   2F59C :                     ;
(1)  121/   2F59C :                     ; ; ; FmIns_Bass_heavy:
(1)  122/   2F59C :                     ; ; ; 		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)  123/   2F59C :                     ; ; ; FmIns_Bass_metal:
(1)  124/   2F59C :                     ; ; ; 		binclude "sound/instr/fm/bass_metal.gsx",$2478,$20
(1)  125/   2F59C :                     FmIns_Bass_synth:
(1)  126/   2F59C :                     		binclude "sound/instr/fm/bass_synth_1.gsx",$2478,$20
(1)  127/   2F5BC :                     ; FmIns_Guitar_1:
(1)  128/   2F5BC :                     ; 		binclude "sound/instr/fm/guitar_1.gsx",$2478,$20
(1)  129/   2F5BC :                     ; ; ; FmIns_Horn_1:
(1)  130/   2F5BC :                     ; ; ; 		binclude "sound/instr/fm/horn_1.gsx",$2478,$20
(1)  131/   2F5BC :                     FmIns_Organ_M1:
(1)  132/   2F5BC :                     		binclude "sound/instr/fm/organ_m1.gsx",$2478,$20
(1)  133/   2F5DC :                     ; ; ; FmIns_Bass_Beach:
(1)  134/   2F5DC :                     ; ; ; 		binclude "sound/instr/fm/bass_beach.gsx",$2478,$20
(1)  135/   2F5DC :                     ; ; ; FmIns_Bass_Beach_2:
(1)  136/   2F5DC :                     ; ; ; 		binclude "sound/instr/fm/bass_beach_2.gsx",$2478,$20
(1)  137/   2F5DC :                     ; ; ; FmIns_Brass_Cave:
(1)  138/   2F5DC :                     ; ; ; 		binclude "sound/instr/fm/brass_cave.gsx",$2478,$20
(1)  139/   2F5DC :                     ; ; FmIns_Brass_Gem:
(1)  140/   2F5DC :                     ; ; 		binclude "sound/instr/fm/brass_gem.gsx",$2478,$20
(1)  141/   2F5DC :                     ; ; FmIns_Piano_Small:
(1)  142/   2F5DC :                     ; ; 		binclude "sound/instr/fm/piano_small.gsx",$2478,$20
(1)  143/   2F5DC :                     ; ; FmIns_Piano:
(1)  144/   2F5DC :                     ; ; 		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)  145/   2F5DC :                     FmIns_Trumpet_1:
(1)  146/   2F5DC :                     		binclude "sound/instr/fm/trumpet_1.gsx",$2478,$20
(1)  147/   2F5FC :                     FmIns_Trumpet_2:
(1)  148/   2F5FC :                     		binclude "sound/instr/fm/trumpet_2.gsx",$2478,$20
(1)  149/   2F61C :                     FmIns_Trumpet_kon:
(1)  150/   2F61C :                     		binclude "sound/instr/fm/trumpet_kon.gsx",$2478,$20
(1)  151/   2F63C :                     FmIns_Trumpet_puy:
(1)  152/   2F63C :                     		binclude "sound/instr/fm/trumpet_puy.gsx",$2478,$20
(1)  153/   2F65C :                     FmIns_Trumpet_carnival:
(1)  154/   2F65C :                     		binclude "sound/instr/fm/trumpet_carnivl.gsx",$2478,$20
(1)  155/   2F67C :                     
(1)  156/   2F67C :                     ; ; ; FmIns_Bell_Glass:
(1)  157/   2F67C :                     ; ; ; 		binclude "sound/instr/fm/bell_glass.gsx",$2478,$20
(1)  158/   2F67C :                     ; ; ; FmIns_Marimba_1:
(1)  159/   2F67C :                     ; ; ; 		binclude "sound/instr/fm/marimba_1.gsx",$2478,$20
(1)  160/   2F67C :                     
(1)  161/   2F67C :                     FmIns_Ambient_dark:
(1)  162/   2F67C :                     		binclude "sound/instr/fm/ambient_dark.gsx",$2478,$20
(1)  163/   2F69C :                     FmIns_Ambient_spook:
(1)  164/   2F69C :                     		binclude "sound/instr/fm/ambient_spook.gsx",$2478,$20
(1)  165/   2F6BC :                     FmIns_Ambient_3:
(1)  166/   2F6BC :                     		binclude "sound/instr/fm/ambient_3.gsx",$2478,$20
(1)  167/   2F6DC :                     FmIns_Ding_toy:
(1)  168/   2F6DC :                     		binclude "sound/instr/fm/ding_toy.gsx",$2478,$20
(1)  169/   2F6FC :                     FmIns_Bell_China:
(1)  170/   2F6FC :                     		binclude "sound/instr/fm/bell_china.gsx",$2478,$20
(1)  171/   2F71C :                     FmIns_Brass_Eur:
(1)  172/   2F71C :                     		binclude "sound/instr/fm/brass_eur.gsx",$2478,$20
(1)  173/   2F73C :                     FmIns_Brass_Puy:
(1)  174/   2F73C :                     		binclude "sound/instr/fm/brass_puy.gsx",$2478,$20
(1)  175/   2F75C :                     FmIns_Flaute_cave:
(1)  176/   2F75C :                     		binclude "sound/instr/fm/flaute_cave.gsx",$2478,$20
(1)  177/   2F77C :                     FmIns_Banjo_puy:
(1)  178/   2F77C :                     		binclude "sound/instr/fm/banjo_puy.gsx",$2478,$20
(1)  179/   2F79C :                     FmIns_Violin_gem:
(1)  180/   2F79C :                     		binclude "sound/instr/fm/violin_gem.gsx",$2478,$20
(1)  181/   2F7BC :                     
      57/   2F7BC :                     
      58/   2F7BC :                     ; ====================================================================
      59/   2F7BC :                     ; ----------------------------------------------------------------
      60/   2F7BC :                     ; 68k code-sections for RAM
      61/   2F7BC :                     ; ----------------------------------------------------------------
      62/   2F7BC :                     
      63/   2F7BC :                     RamCode_Default:
      64/  FF2092 :                     		phase RAMCODE_USER
      65/  FF2092 :                     		include "code/default.asm"
(1)    1/  FF2092 :                     ; ====================================================================
(1)    2/  FF2092 :                     ; ----------------------------------------------------------------
(1)    3/  FF2092 :                     ; Default gamemode
(1)    4/  FF2092 :                     ; ----------------------------------------------------------------
(1)    5/  FF2092 :                     
(1)    6/  FF2092 :                     ; ====================================================================
(1)    7/  FF2092 :                     ; ------------------------------------------------------
(1)    8/  FF2092 :                     ; Variables
(1)    9/  FF2092 :                     ; ------------------------------------------------------
(1)   10/  FF2092 :                     
(1)   11/  FF2092 : =$4000              var_MoveSpd	equ	$4000
(1)   12/  FF2092 : =$3                 MAX_TSTTRKS	equ	3
(1)   13/  FF2092 : =$5                 MAX_TSTENTRY	equ	5
(1)   14/  FF2092 :                     
(1)   15/  FF2092 :                     ; ====================================================================
(1)   16/  FF2092 :                     ; ------------------------------------------------------
(1)   17/  FF2092 :                     ; Structs
(1)   18/  FF2092 :                     ; ------------------------------------------------------
(1)   19/  FF2092 :                     
(1)   20/  FF2092 :                     ; 		struct 0
(1)   21/  FF2092 :                     ; strc_xpos	ds.w 1
(1)   22/  FF2092 :                     ; strc_ypos	ds.w 1
(1)   23/  FF2092 :                     ; 		finish
(1)   24/  FF2092 :                     
(1)   25/  FF2092 :                     ; ====================================================================
(1)   26/  FF2092 :                     ; ------------------------------------------------------
(1)   27/  FF2092 :                     ; This mode's RAM
(1)   28/  FF2092 :                     ; ------------------------------------------------------
(1)   29/  FF2092 :                     
(1)   30/  FF2092 : (MACRO)             		struct RAM_ModeBuff
(1)   30/  FF2092 : =$FF2092            GLBL_LASTPC     set *
(1)   30/   2F7BC :                                     dephase
(1)   30/   2F7BC : =$2F7BC             GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFF9000 :                                     phase RAM_MODEBUFF
(1)   31/FFFFFFFFFFFF9000 :                     RAM_EmiPosX	ds.l 1
(1)   32/FFFFFFFFFFFF9004 :                     RAM_EmiPosY	ds.l 1
(1)   33/FFFFFFFFFFFF9008 :                     RAM_Ypos	ds.l 1
(1)   34/FFFFFFFFFFFF900C :                     RAM_XposFg	ds.l 1
(1)   35/FFFFFFFFFFFF9010 :                     RAM_XposBg	ds.l 1
(1)   36/FFFFFFFFFFFF9014 :                     RAM_CurrGfx	ds.w 1
(1)   37/FFFFFFFFFFFF9016 :                     RAM_EmiChar	ds.w 1
(1)   38/FFFFFFFFFFFF9018 :                     RAM_EmiAnim	ds.w 1
(1)   39/FFFFFFFFFFFF901A :                     RAM_EmiHide	ds.w 1
(1)   40/FFFFFFFFFFFF901C :                     RAM_ShakeMe	ds.w 1
(1)   41/FFFFFFFFFFFF901E :                     RAM_BoardUpd	ds.w 1
(1)   42/FFFFFFFFFFFF9020 :                     RAM_CurrMode	ds.w 1
(1)   43/FFFFFFFFFFFF9022 :                     RAM_BgCamera	ds.w 1
(1)   44/FFFFFFFFFFFF9024 :                     RAM_CurrSelc	ds.w 1
(1)   45/FFFFFFFFFFFF9026 :                     RAM_CurrIndx	ds.w 1
(1)   46/FFFFFFFFFFFF9028 :                     RAM_CurrTrack	ds.w 1
(1)   47/FFFFFFFFFFFF902A :                     RAM_CurrTicks	ds.w 1
(1)   48/FFFFFFFFFFFF902C :                     RAM_CurrTempo	ds.w 1
(1)   49/FFFFFFFFFFFF902E :                     RAM_WindowCurr	ds.w 1
(1)   50/FFFFFFFFFFFF9030 :                     RAM_WindowNew	ds.w 1
(1)   51/FFFFFFFFFFFF9032 : (MACRO)             		finish
(1)   51/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)   51/  FF2092 :                                     phase GLBL_LASTPC
(1)   52/  FF2092 :                     
(1)   53/  FF2092 :                     ; ====================================================================
(1)   54/  FF2092 :                     ; ------------------------------------------------------
(1)   55/  FF2092 :                     ; Code start
(1)   56/  FF2092 :                     ; ------------------------------------------------------
(1)   57/  FF2092 :                     
(1)   58/  FF2092 :                     thisCode_Top:
(1)   59/  FF2092 : 46FC 2700           		move.w	#$2700,sr
(1)   60/  FF2096 : 6100 DFB0           		bsr	Sound_init
(1)   61/  FF209A : 6100 E1E2           		bsr	Video_init
(1)   62/  FF209E : 6100 FA9C           		bsr	System_Init
(1)   63/  FF20A2 :                     
(1)   64/  FF20A2 : 6100 FF4E           		bsr	Mode_Init
(1)   65/  FF20A6 : 6100 E436           		bsr	Video_PrintInit
(1)   66/  FF20AA : 303C 9200           		move.w	#$9200,d0
(1)   67/  FF20AE : 31C0 902E           		move.w	d0,(RAM_WindowCurr).w
(1)   68/  FF20B2 : 31C0 9030           		move.w	d0,(RAM_WindowNew).w
(1)   69/  FF20B6 :                     
(1)   70/  FF20B6 :                     ; 		lea	test_polygon(pc),a0
(1)   71/  FF20B6 :                     ; 		lea	(RAM_MdMarsPlgn),a1
(1)   72/  FF20B6 :                     ; 		move.w	#($38/4)-1,d0
(1)   73/  FF20B6 :                     ; .copy_polygn:
(1)   74/  FF20B6 :                     ; 		move.l	(a0)+,(a1)+
(1)   75/  FF20B6 :                     ; 		dbf	d0,.copy_polygn
(1)   76/  FF20B6 :                     ; 		move.l	#1,(RAM_MdMarsPlgnNum).w
(1)   77/  FF20B6 :                     
(1)   78/  FF20B6 :                     ; 		move.l	#ART_FGTEST,d0
(1)   79/  FF20B6 :                     ; 		move.w	#1*$20,d1
(1)   80/  FF20B6 :                     ; 		move.w	#ART_FGTEST_e-ART_FGTEST,d2
(1)   81/  FF20B6 :                     ; 		bsr	Video_LoadArt
(1)   82/  FF20B6 :                     ; 		lea	(MAP_FGTEST),a0
(1)   83/  FF20B6 :                     ; 		move.l	#locate(1,8,0),d0
(1)   84/  FF20B6 :                     ; 		move.l	#mapsize(192,224),d1
(1)   85/  FF20B6 :                     ; 		move.w	#1+$2000,d2
(1)   86/  FF20B6 :                     ; 		bsr	Video_LoadMap
(1)   87/  FF20B6 :                     ; 		lea	(MAP_FGTEST),a0
(1)   88/  FF20B6 :                     ; 		move.l	#locate(1,8+32,0),d0
(1)   89/  FF20B6 :                     ; 		move.l	#mapsize(192,224),d1
(1)   90/  FF20B6 :                     ; 		move.w	#1+$2000,d2
(1)   91/  FF20B6 :                     ; 		bsr	Video_LoadMap
(1)   92/  FF20B6 :                     
(1)   93/  FF20B6 :                     ; 		lea	str_Title(pc),a0		; GEMA tester text on WINDOW
(1)   94/  FF20B6 :                     ; 		move.l	#locate(0,2,2),d0
(1)   95/  FF20B6 :                     ; 		bsr	Video_Print
(1)   96/  FF20B6 : 41FA 056E           		lea	str_Gema(pc),a0			; GEMA tester text on WINDOW
(1)   97/  FF20BA : 203C 0002 0202      		move.l	#locate(2,2,2),d0
(1)   98/  FF20C0 : 6100 E448           		bsr	Video_Print
(1)   99/  FF20C4 :                     
(1)  100/  FF20C4 :                     	; Load palettes for fade-in
(1)  101/  FF20C4 :                     ; 		lea	PAL_EMI(pc),a0
(1)  102/  FF20C4 :                     ; 		moveq	#0,d0
(1)  103/  FF20C4 :                     ; 		move.w	#$F,d1
(1)  104/  FF20C4 :                     ; 		bsr	Video_LoadPal
(1)  105/  FF20C4 : 41FA 0620           		lea	PAL_TESTBOARD(pc),a0
(1)  106/  FF20C8 : 7010                		moveq	#$10,d0
(1)  107/  FF20CA : 323C 000F           		move.w	#$F,d1
(1)  108/  FF20CE : 6100 E258           		bsr	Video_LoadPal
(1)  109/  FF20D2 : 41F9 0093 45F2      		lea	(TESTMARS_BG_PAL),a0
(1)  110/  FF20D8 : 7000                		moveq	#0,d0
(1)  111/  FF20DA : 323C 0100           		move.w	#256,d1
(1)  112/  FF20DE : 7400                		moveq	#0,d2
(1)  113/  FF20E0 : 6100 E8C2           		bsr	Video_LoadPal_Mars
(1)  114/  FF20E4 : 31FC 0002 9014      		move.w	#2,(RAM_CurrGfx).w
(1)  115/  FF20EA : 7002                		moveq	#2,d0
(1)  116/  FF20EC : 6100 E87C           		bsr	Video_MarsSetGfx
(1)  117/  FF20F0 :                     ; 		move.w	#1,(RAM_FadeMdSpd).w		; Fade-in speed(s)
(1)  118/  FF20F0 :                     ; 		move.w	#1,(RAM_FadeMarsSpd).w
(1)  119/  FF20F0 :                     ; 		move.w	#1,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  120/  FF20F0 :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  121/  FF20F0 : 08F9 0006 FFFF A60B 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l	; Enable Genesis display
(1)  122/  FF20F8 : 6100 E208           		bsr	Video_Update
(1)  123/  FF20FC : 31FC 00A0 9000      		move.w	#320/2,(RAM_EmiPosX).w
(1)  124/  FF2102 : 31FC 0070 9004      		move.w	#224/2,(RAM_EmiPosY).w
(1)  125/  FF2108 : 41FA 0340           		lea	MasterTrkList(pc),a0
(1)  126/  FF210C : 3228 000C           		move.w	$C(a0),d1
(1)  127/  FF2110 : 3628 000E           		move.w	$E(a0),d3
(1)  128/  FF2114 : 7000                		moveq	#0,d0
(1)  129/  FF2116 : 7400                		moveq	#0,d2
(1)  130/  FF2118 : 6100 E0B0           		bsr	Sound_TrkPlay
(1)  131/  FF211C :                     
(1)  132/  FF211C :                     ; ====================================================================
(1)  133/  FF211C :                     ; ------------------------------------------------------
(1)  134/  FF211C :                     ; Loop
(1)  135/  FF211C :                     ; ------------------------------------------------------
(1)  136/  FF211C :                     
(1)  137/  FF211C :                     .loop:
(1)  138/  FF211C : 6100 FF06           		bsr	System_MdMarsDreq
(1)  139/  FF2120 : 6100 FDF6           		bsr	System_VBlank
(1)  140/  FF2124 : 3438 902E           		move.w	(RAM_WindowCurr).w,d2		; Window up/down
(1)  141/  FF2128 : 3238 9030           		move.w	(RAM_WindowNew).w,d1		; animation
(1)  142/  FF212C : B242                		cmp.w	d2,d1
(1)  143/  FF212E : 6718                		beq.s	.same_w
(1)  144/  FF2130 : 303C 0001           		move.w	#1,d0
(1)  145/  FF2134 : 9242                		sub.w	d2,d1
(1)  146/  FF2136 : 6A04                		bpl.s	.revers
(1)  147/  FF2138 : 303C FFFF           		move.w	#-1,d0
(1)  148/  FF213C :                     .revers:
(1)  149/  FF213C : D178 902E           		add.w	d0,(RAM_WindowCurr).w
(1)  150/  FF2140 : 33F8 902E 00C0 0004 		move.w	(RAM_WindowCurr).w,(vdp_ctrl).l
(1)  151/  FF2148 :                     .same_w:
(1)  152/  FF2148 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    A606                
(1)  153/  FF2152 : 6100 FE72           		bsr	System_VBlank_Exit
(1)  154/  FF2156 : 41FA 055E           		lea	str_InfoMouse(pc),a0
(1)  155/  FF215A : 203C 0000 0217      		move.l	#locate(0,2,23),d0
(1)  156/  FF2160 : 6100 E3A8           		bsr	Video_Print
(1)  157/  FF2164 :                     
(1)  158/  FF2164 : 3038 9020           		move.w	(RAM_CurrMode).w,d0
(1)  159/  FF2168 : C07C 001F           		and.w	#%11111,d0
(1)  160/  FF216C : D040                		add.w	d0,d0
(1)  161/  FF216E : D040                		add.w	d0,d0
(1)  162/  FF2170 : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)  163/  FF2174 : 60A6                		bra	.loop
(1)  164/  FF2176 :                     
(1)  165/  FF2176 :                     ; ====================================================================
(1)  166/  FF2176 :                     ; ------------------------------------------------------
(1)  167/  FF2176 :                     ; Mode sections
(1)  168/  FF2176 :                     ; ------------------------------------------------------
(1)  169/  FF2176 :                     
(1)  170/  FF2176 :                     .list:
(1)  171/  FF2176 : 6000 000A           		bra.w	.mode0
(1)  172/  FF217A : 6000 012E           		bra.w	.mode1
(1)  173/  FF217E : 6000 0002           		bra.w	.mode0
(1)  174/  FF2182 :                     
(1)  175/  FF2182 :                     ; --------------------------------------------------
(1)  176/  FF2182 :                     ; Mode 0
(1)  177/  FF2182 :                     ; --------------------------------------------------
(1)  178/  FF2182 :                     
(1)  179/  FF2182 :                     .mode0:
(1)  180/  FF2182 : 4A78 9020           		tst.w	(RAM_CurrMode).w
(1)  181/  FF2186 : 6B06                		bmi	.mode0_loop
(1)  182/  FF2188 : 0078 8000 9020      		or.w	#$8000,(RAM_CurrMode).w
(1)  183/  FF218E :                     
(1)  184/  FF218E :                     .mode0_loop:
(1)  185/  FF218E : 6100 E1BC           		bsr	Video_PalFade
(1)  186/  FF2192 : 6100 E838           		bsr	Video_MarsPalFade
(1)  187/  FF2196 : 3E38 A5FE           		move.w	(RAM_FadeMarsReq),d7
(1)  188/  FF219A : 3C38 A5F6           		move.w	(RAM_FadeMdReq),d6
(1)  189/  FF219E : 8E46                		or.w	d6,d7
(1)  190/  FF21A0 :                     ; 		bne	.loop
(1)  191/  FF21A0 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  192/  FF21A4 : 0807 0007           		btst	#bitJoyStart,d7
(1)  193/  FF21A8 : 670C                		beq.s	.no_mode0
(1)  194/  FF21AA : 31FC 0001 9020      		move.w	#1,(RAM_CurrMode).w
(1)  195/  FF21B0 : 31FC 920D 9030      		move.w	#$920D,(RAM_WindowNew).w
(1)  196/  FF21B6 :                     .no_mode0:
(1)  197/  FF21B6 :                     
(1)  198/  FF21B6 : 2038 AA80           		move.l	(RAM_MdDreq+Dreq_BgXPos).w,d0
(1)  199/  FF21BA : 2238 AA84           		move.l	(RAM_MdDreq+Dreq_BgYPos).w,d1
(1)  200/  FF21BE : 3438 9822           		move.w	(RAM_HorScroll+2).w,d2
(1)  201/  FF21C2 : 3638 9BE2           		move.w	(RAM_VerScroll+2).w,d3
(1)  202/  FF21C6 : 2A3C 0001 0000      		move.l	#$10000,d5
(1)  203/  FF21CC : 2C3C 0000 0001      		move.l	#1,d6
(1)  204/  FF21D2 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  205/  FF21D6 : 0807 0003           		btst	#bitJoyRight,d7
(1)  206/  FF21DA : 6704                		beq.s	.nor_m
(1)  207/  FF21DC : D085                		add.l	d5,d0
(1)  208/  FF21DE : 9446                		sub.w	d6,d2
(1)  209/  FF21E0 :                     .nor_m:
(1)  210/  FF21E0 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  211/  FF21E4 : 6704                		beq.s	.nol_m
(1)  212/  FF21E6 : 9085                		sub.l	d5,d0
(1)  213/  FF21E8 : D446                		add.w	d6,d2
(1)  214/  FF21EA :                     .nol_m:
(1)  215/  FF21EA : 0807 0001           		btst	#bitJoyDown,d7
(1)  216/  FF21EE : 6704                		beq.s	.nod_m
(1)  217/  FF21F0 : D285                		add.l	d5,d1
(1)  218/  FF21F2 : D646                		add.w	d6,d3
(1)  219/  FF21F4 :                     .nod_m:
(1)  220/  FF21F4 : 0807 0000           		btst	#bitJoyUp,d7
(1)  221/  FF21F8 : 6704                		beq.s	.nou_m
(1)  222/  FF21FA : 9285                		sub.l	d5,d1
(1)  223/  FF21FC : 9646                		sub.w	d6,d3
(1)  224/  FF21FE :                     .nou_m:
(1)  225/  FF21FE : 21C0 AA80           		move.l	d0,(RAM_MdDreq+Dreq_BgXPos).w
(1)  226/  FF2202 : 21C1 AA84           		move.l	d1,(RAM_MdDreq+Dreq_BgYPos).w
(1)  227/  FF2206 : 31C2 9822           		move.w	d2,(RAM_HorScroll+2).w
(1)  228/  FF220A : 31C3 9BE2           		move.w	d3,(RAM_VerScroll+2).w
(1)  229/  FF220E :                     
(1)  230/  FF220E :                     ; 	Test movement
(1)  231/  FF220E : 203C 0000 0000      		move.l	#0,d0
(1)  232/  FF2214 : 223C 0000 0000      		move.l	#0,d1
(1)  233/  FF221A : 7C01                		moveq	#1,d6
(1)  234/  FF221C : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  235/  FF2220 : 0807 0004           		btst	#bitJoyB,d7
(1)  236/  FF2224 : 670E                		beq.s	.nor_m2
(1)  237/  FF2226 : 0678 0001 9014      		add.w	#1,(RAM_CurrGfx).w
(1)  238/  FF222C : 3038 9014           		move.w	(RAM_CurrGfx).w,d0
(1)  239/  FF2230 : 6100 E738           		bsr	Video_MarsSetGfx
(1)  240/  FF2234 :                     .nor_m2:
(1)  241/  FF2234 : 0807 0006           		btst	#bitJoyA,d7
(1)  242/  FF2238 : 670E                		beq.s	.nol_m2
(1)  243/  FF223A : 0478 0001 9014      		sub.w	#1,(RAM_CurrGfx).w
(1)  244/  FF2240 : 3038 9014           		move.w	(RAM_CurrGfx).w,d0
(1)  245/  FF2244 : 6100 E724           		bsr	Video_MarsSetGfx
(1)  246/  FF2248 :                     .nol_m2:
(1)  247/  FF2248 :                     ; 		btst	#bitJoyUp,d7
(1)  248/  FF2248 :                     ; 		beq.s	.nou_m2
(1)  249/  FF2248 :                     ; 		move.l	#-1,d1
(1)  250/  FF2248 :                     ; .nou_m2:
(1)  251/  FF2248 :                     ; 		btst	#bitJoyDown,d7
(1)  252/  FF2248 :                     ; 		beq.s	.nod_m2
(1)  253/  FF2248 :                     ; 		move.l	#1,d1
(1)  254/  FF2248 :                     ; .nod_m2:
(1)  255/  FF2248 :                     ; 		lea	(RAM_MdMarsPlgn),a0
(1)  256/  FF2248 :                     ; ; 		add.w	(RAM_CurrGfx),a0
(1)  257/  FF2248 :                     ; 		move.l	(a0),d4
(1)  258/  FF2248 :                     ; 		add.l	d0,d4
(1)  259/  FF2248 :                     ; 		move.l	d4,(a0)
(1)  260/  FF2248 :                     ; 		move.l	4(a0),d4
(1)  261/  FF2248 :                     ; 		add.l	d1,d4
(1)  262/  FF2248 :                     ; 		move.l	d4,4(a0)
(1)  263/  FF2248 :                     
(1)  264/  FF2248 :                     ; 		moveq	#0,d2
(1)  265/  FF2248 :                     ; 		moveq	#0,d3
(1)  266/  FF2248 :                     ; 		move.w	(Controller_2+mouse_x),d2
(1)  267/  FF2248 :                     ; 		move.w	(Controller_2+mouse_y),d3
(1)  268/  FF2248 :                     ; 		move.w	#$10,d4
(1)  269/  FF2248 :                     ; 		move.w	d4,d5
(1)  270/  FF2248 :                     ; 		tst.w	d2
(1)  271/  FF2248 :                     ; 		bmi.s	.xminus
(1)  272/  FF2248 :                     ; 		beq.s	.xgo
(1)  273/  FF2248 :                     ; 		cmp.w	d4,d2
(1)  274/  FF2248 :                     ; 		bcs.s	.xgo
(1)  275/  FF2248 :                     ; 		move.w	d4,d2
(1)  276/  FF2248 :                     ; 		bra.s	.xgo
(1)  277/  FF2248 :                     ; .xminus:
(1)  278/  FF2248 :                     ; 		neg.w	d4
(1)  279/  FF2248 :                     ; 		cmp.w	d4,d2
(1)  280/  FF2248 :                     ; 		bcc.s	.xgo
(1)  281/  FF2248 :                     ; 		move.w	d4,d2
(1)  282/  FF2248 :                     ; .xgo:
(1)  283/  FF2248 :                     ; 		tst.w	d3
(1)  284/  FF2248 :                     ; 		bmi.s	.yminus
(1)  285/  FF2248 :                     ; 		beq.s	.ygo
(1)  286/  FF2248 :                     ; 		cmp.w	d5,d3
(1)  287/  FF2248 :                     ; 		bcs.s	.ygo
(1)  288/  FF2248 :                     ; 		move.w	d5,d3
(1)  289/  FF2248 :                     ; 		bra.s	.ygo
(1)  290/  FF2248 :                     ; .yminus:
(1)  291/  FF2248 :                     ; 		neg.w	d5
(1)  292/  FF2248 :                     ; 		cmp.w	d5,d3
(1)  293/  FF2248 :                     ; 		bcc.s	.ygo
(1)  294/  FF2248 :                     ; 		move.w	d5,d3
(1)  295/  FF2248 :                     ; .ygo:
(1)  296/  FF2248 :                     ; 		swap	d2
(1)  297/  FF2248 :                     ; 		swap	d3
(1)  298/  FF2248 :                     ; 		move.l	(RAM_MdMarsBg).w,d0
(1)  299/  FF2248 :                     ; 		move.l	(RAM_MdMarsBg+4).w,d1
(1)  300/  FF2248 :                     ; 		add.l	d2,d0
(1)  301/  FF2248 :                     ; 		add.l	d3,d1
(1)  302/  FF2248 :                     ; 		move.l	d0,(RAM_MdMarsBg).w
(1)  303/  FF2248 :                     ; 		move.l	d1,(RAM_MdMarsBg+4).w
(1)  304/  FF2248 :                     
(1)  305/  FF2248 : 3038 A638           		move.w	(Controller_2+mouse_x),d0
(1)  306/  FF224C : 3238 A63A           		move.w	(Controller_2+mouse_y),d1
(1)  307/  FF2250 : 48C0                		ext.l	d0
(1)  308/  FF2252 : 48C1                		ext.l	d1
(1)  309/  FF2254 : 41F8 AA88           		lea	(RAM_MdDreq+Dreq_Polygons),a0
(1)  310/  FF2258 : 2810                		move.l	(a0),d4
(1)  311/  FF225A : D880                		add.l	d0,d4
(1)  312/  FF225C : 2084                		move.l	d4,(a0)
(1)  313/  FF225E : 2828 0004           		move.l	4(a0),d4
(1)  314/  FF2262 : D881                		add.l	d1,d4
(1)  315/  FF2264 : 2144 0004           		move.l	d4,4(a0)
(1)  316/  FF2268 :                     
(1)  317/  FF2268 : 203C 0000 0001      		move.l	#1,d0
(1)  318/  FF226E : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  319/  FF2272 : 0807 0003           		btst	#bitJoyRight,d7
(1)  320/  FF2276 : 6706                		beq.s	.nor_m3
(1)  321/  FF2278 : 2810                		move.l	(a0),d4
(1)  322/  FF227A : D880                		add.l	d0,d4
(1)  323/  FF227C : 2084                		move.l	d4,(a0)
(1)  324/  FF227E :                     .nor_m3:
(1)  325/  FF227E : 0807 0002           		btst	#bitJoyLeft,d7
(1)  326/  FF2282 : 6706                		beq.s	.nol_m4
(1)  327/  FF2284 : 2810                		move.l	(a0),d4
(1)  328/  FF2286 : 9880                		sub.l	d0,d4
(1)  329/  FF2288 : 2084                		move.l	d4,(a0)
(1)  330/  FF228A :                     .nol_m4:
(1)  331/  FF228A :                     
(1)  332/  FF228A :                     
(1)  333/  FF228A : 3038 A636           		move.w	(Controller_2+on_press),d0
(1)  334/  FF228E : 3200                		move.w	d0,d1
(1)  335/  FF2290 : 0801 0005           		btst	#bitJoyC,d1
(1)  336/  FF2294 : 6712                		beq.s	.no_clkl
(1)  337/  FF2296 : 08F9 0006 00A1 512E 		bset	#6,(sysmars_reg+comm14).l	; Request REDRAW on Master
(1)  338/  FF229E : 0839 0006 00A1 512E .wait3:		btst	#6,(sysmars_reg+comm14).l	; and wait until it finishes
(1)  339/  FF22A6 : 66F6                		bne.s	.wait3
(1)  340/  FF22A8 :                     ; 		add.w	#8,(RAM_CurrGfx).w
(1)  341/  FF22A8 :                     ; 		and.w	#$18,(RAM_CurrGfx).w
(1)  342/  FF22A8 :                     .no_clkl
(1)  343/  FF22A8 : 4E75                		rts
(1)  344/  FF22AA :                     
(1)  345/  FF22AA :                     
(1)  346/  FF22AA :                     ;
(1)  347/  FF22AA :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  348/  FF22AA :                     ; 		lsr.w	#8,d7
(1)  349/  FF22AA :                     ; 		btst	#bitJoyX,d7
(1)  350/  FF22AA :                     ; 		beq.s	.nox
(1)  351/  FF22AA :                     ; 		move.w	#4,(RAM_FadeMarsSpd).w
(1)  352/  FF22AA :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  353/  FF22AA :                     ; .nox:
(1)  354/  FF22AA :                     ; 		btst	#bitJoyY,d7
(1)  355/  FF22AA :                     ; 		beq.s	.noy
(1)  356/  FF22AA :                     ; 		move.w	#4,(RAM_FadeMarsSpd).w
(1)  357/  FF22AA :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  358/  FF22AA :                     ; .noy:
(1)  359/  FF22AA :                     ;
(1)  360/  FF22AA :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  361/  FF22AA :                     ; 		btst	#bitJoyA,d7
(1)  362/  FF22AA :                     ; 		beq.s	.noa
(1)  363/  FF22AA :                     ; 		move.w	#1,(RAM_FadeMdSpd).w
(1)  364/  FF22AA :                     ; 		move.w	#2,(RAM_FadeMdReq).w
(1)  365/  FF22AA :                     ; .noa:
(1)  366/  FF22AA :                     ; 		btst	#bitJoyB,d7
(1)  367/  FF22AA :                     ; 		beq.s	.nob
(1)  368/  FF22AA :                     ; 		move.w	#1,(RAM_FadeMdSpd).w
(1)  369/  FF22AA :                     ; 		move.w	#1,(RAM_FadeMdReq).w
(1)  370/  FF22AA :                     ; .nob:
(1)  371/  FF22AA :                     ;
(1)  372/  FF22AA :                     ;
(1)  373/  FF22AA :                     ; 	; Test movement
(1)  374/  FF22AA :                     ; 		move.l	(RAM_MdMarsBg).w,d0
(1)  375/  FF22AA :                     ; 		move.l	(RAM_MdMarsBg+4).w,d1
(1)  376/  FF22AA :                     ; 		move.w	(RAM_HorScroll+2).w,d2
(1)  377/  FF22AA :                     ; 		move.w	(RAM_VerScroll+2).w,d3
(1)  378/  FF22AA :                     ; 		move.l	#$20000,d5
(1)  379/  FF22AA :                     ; 		move.l	#1,d6
(1)  380/  FF22AA :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  381/  FF22AA :                     ; 		btst	#bitJoyRight,d7
(1)  382/  FF22AA :                     ; 		beq.s	.nor_m
(1)  383/  FF22AA :                     ; 		add.l	d5,d0
(1)  384/  FF22AA :                     ; 		sub.w	d6,d2
(1)  385/  FF22AA :                     ; .nor_m:
(1)  386/  FF22AA :                     ; 		btst	#bitJoyLeft,d7
(1)  387/  FF22AA :                     ; 		beq.s	.nol_m
(1)  388/  FF22AA :                     ; 		sub.l	d5,d0
(1)  389/  FF22AA :                     ; 		add.w	d6,d2
(1)  390/  FF22AA :                     ; .nol_m:
(1)  391/  FF22AA :                     ; 		btst	#bitJoyDown,d7
(1)  392/  FF22AA :                     ; 		beq.s	.nod_m
(1)  393/  FF22AA :                     ; 		add.l	d5,d1
(1)  394/  FF22AA :                     ; 		add.w	d6,d3
(1)  395/  FF22AA :                     ; .nod_m:
(1)  396/  FF22AA :                     ; 		btst	#bitJoyUp,d7
(1)  397/  FF22AA :                     ; 		beq.s	.nou_m
(1)  398/  FF22AA :                     ; 		sub.l	d5,d1
(1)  399/  FF22AA :                     ; 		sub.w	d6,d3
(1)  400/  FF22AA :                     ; .nou_m:
(1)  401/  FF22AA :                     ;
(1)  402/  FF22AA :                     ; 		move.l	d0,(RAM_MdMarsBg).w
(1)  403/  FF22AA :                     ; 		move.l	d1,(RAM_MdMarsBg+4).w
(1)  404/  FF22AA :                     ; 		move.w	d2,(RAM_HorScroll+2).w
(1)  405/  FF22AA :                     ; 		move.w	d3,(RAM_VerScroll+2).w
(1)  406/  FF22AA :                     ;
(1)  407/  FF22AA :                     ; ; 	BOOM TEST
(1)  408/  FF22AA :                     ; 		move.w	(Controller_1+on_press),d7
(1)  409/  FF22AA :                     ; 		lsr.w	#8,d7
(1)  410/  FF22AA :                     ; 		btst	#bitJoyZ,d7
(1)  411/  FF22AA :                     ; 		beq.s	.noah
(1)  412/  FF22AA :                     ; ; 		move.w	#$20,(RAM_ShakeMe).w
(1)  413/  FF22AA :                     ; 		moveq	#0,d2
(1)  414/  FF22AA :                     ; 		bsr	PlayThisSfx
(1)  415/  FF22AA :                     ; .noah:
(1)  416/  FF22AA :                     ;
(1)  417/  FF22AA :                     ; 		bsr	Emilie_Move
(1)  418/  FF22AA :                     ; 		bsr	Emilie_MkSprite
(1)  419/  FF22AA :                     
(1)  420/  FF22AA :                     ; 		lea	str_TempVal(pc),a0		; Main title
(1)  421/  FF22AA :                     ; 		move.l	#locate(0,0,0),d0
(1)  422/  FF22AA :                     ; 		bsr	Video_Print
(1)  423/  FF22AA :                     
(1)  424/  FF22AA :                     
(1)  425/  FF22AA :                     
(1)  426/  FF22AA :                     
(1)  427/  FF22AA :                     ; 		bset	#0,(RAM_BoardUpd).w
(1)  428/  FF22AA :                     
(1)  429/  FF22AA :                     ; 	; Emilie player input
(1)  430/  FF22AA :                     ; 		move.b	(RAM_EmiFlags).w,d7
(1)  431/  FF22AA :                     
(1)  432/  FF22AA :                     ; 		btst	#7,(RAM_EmiFlags).w
(1)  433/  FF22AA :                     ; 		bne	.lockcontrl
(1)  434/  FF22AA :                     ; 		btst	#7,d7
(1)  435/  FF22AA :                     ; 		beq.s	.after
(1)  436/  FF22AA :                     ; 		lea	(RAM_BoardBlocks),a6
(1)  437/  FF22AA :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  438/  FF22AA :                     ; 		or.w	(RAM_EmiBlockY).w,d7
(1)  439/  FF22AA :                     ; 		bmi.s	.after
(1)  440/  FF22AA :                     ; 		move.w	(RAM_EmiBlockX).w,d0
(1)  441/  FF22AA :                     ; 		cmp.w	#6,d0
(1)  442/  FF22AA :                     ; 		bge.s	.after
(1)  443/  FF22AA :                     ; 		move.w	(RAM_EmiBlockY).w,d1
(1)  444/  FF22AA :                     ; 		cmp.w	#6,d1
(1)  445/  FF22AA :                     ; 		bge.s	.after
(1)  446/  FF22AA :                     ; 		mulu.w	#6,d1
(1)  447/  FF22AA :                     ; 		add.w	d1,d0
(1)  448/  FF22AA :                     ; 		adda	d0,a6
(1)  449/  FF22AA :                     ; 		bchg	#0,(a6)
(1)  450/  FF22AA :                     ; 		bset	#0,(RAM_BoardUpd).w
(1)  451/  FF22AA :                     ; 		moveq	#1,d2
(1)  452/  FF22AA :                     ; 		bsr	PlayThisSfx
(1)  453/  FF22AA :                     ; 		bsr	Board_CheckMatch
(1)  454/  FF22AA :                     ; .after:
(1)  455/  FF22AA :                     ;
(1)  456/  FF22AA :                     ; 	; UDLR
(1)  457/  FF22AA :                     ; 		move.w	#0,d4
(1)  458/  FF22AA :                     ; 		move.w	(Controller_1+on_press),d7
(1)  459/  FF22AA :                     ; 		btst	#bitJoyDown,d7
(1)  460/  FF22AA :                     ; 		beq.s	.noz_down
(1)  461/  FF22AA :                     ; 		add.w	#$18,(RAM_EmiMoveY).w
(1)  462/  FF22AA :                     ; 		add.w	#1,(RAM_EmiBlockY).w
(1)  463/  FF22AA :                     ; 		move.w	d4,(RAM_EmiChar).w
(1)  464/  FF22AA :                     ; 		move.l	#-$20000,(RAM_EmiJumpSpd).l
(1)  465/  FF22AA :                     ; .noz_down:
(1)  466/  FF22AA :                     ; 		move.w	#4,d4
(1)  467/  FF22AA :                     ; 		move.w	(Controller_1+on_press),d7
(1)  468/  FF22AA :                     ; 		btst	#bitJoyUp,d7
(1)  469/  FF22AA :                     ; 		beq.s	.noz_up
(1)  470/  FF22AA :                     ; 		add.w	#-$18,(RAM_EmiMoveY).w
(1)  471/  FF22AA :                     ; 		sub.w	#1,(RAM_EmiBlockY).w
(1)  472/  FF22AA :                     ; 		move.w	d4,(RAM_EmiChar).w
(1)  473/  FF22AA :                     ; 		move.l	#-$20000,(RAM_EmiJumpSpd).l
(1)  474/  FF22AA :                     ; .noz_up:
(1)  475/  FF22AA :                     ; 		move.w	#8,d4
(1)  476/  FF22AA :                     ; 		move.w	(Controller_1+on_press),d7
(1)  477/  FF22AA :                     ; 		btst	#bitJoyRight,d7
(1)  478/  FF22AA :                     ; 		beq.s	.noz_r
(1)  479/  FF22AA :                     ; 		add.w	#$20,(RAM_EmiMoveX).w
(1)  480/  FF22AA :                     ; 		add.w	#1,(RAM_EmiBlockX).w
(1)  481/  FF22AA :                     ; 		move.w	d4,(RAM_EmiChar).w
(1)  482/  FF22AA :                     ; 		move.l	#-$20000,(RAM_EmiJumpSpd).l
(1)  483/  FF22AA :                     ; .noz_r:
(1)  484/  FF22AA :                     ; 		move.w	#$C,d4
(1)  485/  FF22AA :                     ; 		move.w	(Controller_1+on_press),d7
(1)  486/  FF22AA :                     ; 		btst	#bitJoyLeft,d7
(1)  487/  FF22AA :                     ; 		beq.s	.noz_l
(1)  488/  FF22AA :                     ; 		add.w	#-$20,(RAM_EmiMoveX).w
(1)  489/  FF22AA :                     ; 		sub.w	#1,(RAM_EmiBlockX).w
(1)  490/  FF22AA :                     ; 		move.w	d4,(RAM_EmiChar).w
(1)  491/  FF22AA :                     ; 		move.l	#-$20000,(RAM_EmiJumpSpd).l
(1)  492/  FF22AA :                     ; .noz_l:
(1)  493/  FF22AA :                     ; 		rts
(1)  494/  FF22AA :                     ;
(1)  495/  FF22AA :                     ; .lockcontrl:
(1)  496/  FF22AA :                     ; 		add.w	#6,(RAM_EmiJumpTan).w
(1)  497/  FF22AA :                     ; 		rts
(1)  498/  FF22AA :                     
(1)  499/  FF22AA :                     ; --------------------------------------------------
(1)  500/  FF22AA :                     ; Mode 1
(1)  501/  FF22AA :                     ; --------------------------------------------------
(1)  502/  FF22AA :                     
(1)  503/  FF22AA :                     .mode1:
(1)  504/  FF22AA : 4A78 9020           		tst.w	(RAM_CurrMode).w
(1)  505/  FF22AE : 6B0A                		bmi	.mode1_loop
(1)  506/  FF22B0 : 0078 8000 9020      		or.w	#$8000,(RAM_CurrMode).w
(1)  507/  FF22B6 : 6100 011C           		bsr	.print_cursor
(1)  508/  FF22BA :                     ; 		move.w	#1,(RAM_EmiHide).w
(1)  509/  FF22BA :                     ; 		move.w	#1,(RAM_EmiUpd).w
(1)  510/  FF22BA :                     
(1)  511/  FF22BA :                     .mode1_loop:
(1)  512/  FF22BA : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  513/  FF22BE : 0807 0007           		btst	#bitJoyStart,d7
(1)  514/  FF22C2 : 670C                		beq.s	.no_mode1
(1)  515/  FF22C4 : 31FC 0000 9020      		move.w	#0,(RAM_CurrMode).w
(1)  516/  FF22CA : 31FC 9200 9030      		move.w	#$9200,(RAM_WindowNew).w
(1)  517/  FF22D0 :                     .no_mode1:
(1)  518/  FF22D0 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  519/  FF22D4 : E04F                		lsr.w	#8,d7
(1)  520/  FF22D6 : 0807 0000           		btst	#bitJoyZ,d7
(1)  521/  FF22DA : 671C                		beq.s	.noc_up
(1)  522/  FF22DC : 1E39 00A1 512F      .wait:		move.b	(sysmars_reg+comm15),d7
(1)  523/  FF22E2 : CE7C 00F0           		and.w	#%11110000,d7
(1)  524/  FF22E6 : 66F4                		bne.s	.wait
(1)  525/  FF22E8 : 1E39 00A1 512F      		move.b	(sysmars_reg+comm15),d7
(1)  526/  FF22EE : 8E7C 0001           		or.w	#1,d7
(1)  527/  FF22F2 : 13C7 00A1 512F      		move.b	d7,(sysmars_reg+comm15)
(1)  528/  FF22F8 :                     .noc_up:
(1)  529/  FF22F8 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  530/  FF22FC : E04F                		lsr.w	#8,d7
(1)  531/  FF22FE : 0807 0001           		btst	#bitJoyY,d7
(1)  532/  FF2302 : 6712                		beq.s	.noy2
(1)  533/  FF2304 : 0C78 0001 9026      		cmp.w	#1,(RAM_CurrIndx).w
(1)  534/  FF230A : 670A                		beq.	.noy2
(1)  535/  FF230C : 0678 0001 9026      		add.w	#1,(RAM_CurrIndx).w
(1)  536/  FF2312 : 6100 00C0           		bsr	.print_cursor
(1)  537/  FF2316 :                     .noy2:
(1)  538/  FF2316 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  539/  FF231A : E04F                		lsr.w	#8,d7
(1)  540/  FF231C : 0807 0002           		btst	#bitJoyX,d7
(1)  541/  FF2320 : 6710                		beq.s	.nox2
(1)  542/  FF2322 : 4A78 9026           		tst.w	(RAM_CurrIndx).w
(1)  543/  FF2326 : 670A                		beq.s	.nox2
(1)  544/  FF2328 : 0478 0001 9026      		sub.w	#1,(RAM_CurrIndx).w
(1)  545/  FF232E : 6100 00A4           		bsr	.print_cursor
(1)  546/  FF2332 :                     .nox2:
(1)  547/  FF2332 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  548/  FF2336 : 0807 0000           		btst	#bitJoyUp,d7
(1)  549/  FF233A : 6710                		beq.s	.nou2
(1)  550/  FF233C : 4A78 9024           		tst.w	(RAM_CurrSelc).w
(1)  551/  FF2340 : 670A                		beq.s	.nou2
(1)  552/  FF2342 : 0478 0001 9024      		sub.w	#1,(RAM_CurrSelc).w
(1)  553/  FF2348 : 6100 008A           		bsr	.print_cursor
(1)  554/  FF234C :                     .nou2:
(1)  555/  FF234C : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  556/  FF2350 : 0807 0001           		btst	#bitJoyDown,d7
(1)  557/  FF2354 : 6710                		beq.s	.nod2
(1)  558/  FF2356 : 0C78 0005 9024      		cmp.w	#MAX_TSTENTRY,(RAM_CurrSelc).w
(1)  559/  FF235C : 6C08                		bge.s	.nod2
(1)  560/  FF235E : 0678 0001 9024      		add.w	#1,(RAM_CurrSelc).w
(1)  561/  FF2364 : 616E                		bsr	.print_cursor
(1)  562/  FF2366 :                     .nod2:
(1)  563/  FF2366 :                     
(1)  564/  FF2366 :                     	; LEFT/RIGHT
(1)  565/  FF2366 : 43F8 9028           		lea	(RAM_CurrTrack),a1
(1)  566/  FF236A : 0C78 0004 9024      		cmp.w	#4,(RAM_CurrSelc).w
(1)  567/  FF2370 : 6604                		bne.s	.toptrk
(1)  568/  FF2372 : D2FC 0002           		add	#2,a1
(1)  569/  FF2376 :                     .toptrk:
(1)  570/  FF2376 : 0C78 0005 9024      		cmp.w	#5,(RAM_CurrSelc).w
(1)  571/  FF237C : 6604                		bne.s	.toptrk2
(1)  572/  FF237E : D2FC 0004           		add	#2*2,a1
(1)  573/  FF2382 :                     .toptrk2:
(1)  574/  FF2382 :                     
(1)  575/  FF2382 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  576/  FF2386 : CE7C 0010           		and.w	#JoyB,d7
(1)  577/  FF238A : 6706                		beq.s	.noba
(1)  578/  FF238C : 0651 0001           		add.w	#1,(a1)
(1)  579/  FF2390 : 6142                		bsr	.print_cursor
(1)  580/  FF2392 :                     .noba:
(1)  581/  FF2392 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  582/  FF2396 : CE7C 0040           		and.w	#JoyA,d7
(1)  583/  FF239A : 6706                		beq.s	.noaa
(1)  584/  FF239C : 0451 0001           		sub.w	#1,(a1)
(1)  585/  FF23A0 : 6132                		bsr	.print_cursor
(1)  586/  FF23A2 :                     .noaa:
(1)  587/  FF23A2 :                     
(1)  588/  FF23A2 :                     
(1)  589/  FF23A2 :                     
(1)  590/  FF23A2 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  591/  FF23A6 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  592/  FF23AA : 6706                		beq.s	.nol
(1)  593/  FF23AC :                     ; 		tst.w	(a1)
(1)  594/  FF23AC :                     ; 		beq.s	.nol
(1)  595/  FF23AC : 0451 0001           		sub.w	#1,(a1)
(1)  596/  FF23B0 : 6122                		bsr	.print_cursor
(1)  597/  FF23B2 :                     .nol:
(1)  598/  FF23B2 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  599/  FF23B6 : 0807 0003           		btst	#bitJoyRight,d7
(1)  600/  FF23BA : 6706                		beq.s	.nor
(1)  601/  FF23BC :                     ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1)  602/  FF23BC :                     ; 		bge.s	.nor
(1)  603/  FF23BC : 0651 0001           		add.w	#1,(a1)
(1)  604/  FF23C0 : 6112                		bsr	.print_cursor
(1)  605/  FF23C2 :                     .nor:
(1)  606/  FF23C2 :                     
(1)  607/  FF23C2 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  608/  FF23C6 : CE7C 0020           		and.w	#JoyC,d7
(1)  609/  FF23CA : 6706                		beq.s	.noc_c
(1)  610/  FF23CC : 3038 9026           		move.w	(RAM_CurrIndx).w,d0
(1)  611/  FF23D0 : 6126                		bsr	.procs_task
(1)  612/  FF23D2 :                     .noc_c:
(1)  613/  FF23D2 :                     
(1)  614/  FF23D2 :                     
(1)  615/  FF23D2 :                     ; 		lea	str_COMM(pc),a0
(1)  616/  FF23D2 :                     ; 		move.l	#locate(0,2,9),d0
(1)  617/  FF23D2 :                     ; 		bsr	Video_Print
(1)  618/  FF23D2 : 4E75                		rts
(1)  619/  FF23D4 :                     
(1)  620/  FF23D4 :                     ; --------------------------------------------------
(1)  621/  FF23D4 :                     
(1)  622/  FF23D4 :                     .print_cursor:
(1)  623/  FF23D4 : 41FA 0230           		lea	str_Status(pc),a0
(1)  624/  FF23D8 : 203C 0002 1404      		move.l	#locate(2,20,4),d0
(1)  625/  FF23DE : 6100 E12A           		bsr	Video_Print
(1)  626/  FF23E2 : 41FA 021C           		lea	str_Cursor(pc),a0
(1)  627/  FF23E6 : 7000                		moveq	#0,d0
(1)  628/  FF23E8 : 3038 9024           		move.w	(RAM_CurrSelc).w,d0
(1)  629/  FF23EC : D0BC 0002 0205      		add.l	#locate(2,2,5),d0
(1)  630/  FF23F2 : 6100 E116           		bsr	Video_Print
(1)  631/  FF23F6 : 4E75                		rts
(1)  632/  FF23F8 :                     
(1)  633/  FF23F8 :                     ; d1 - Track slot
(1)  634/  FF23F8 :                     .procs_task:
(1)  635/  FF23F8 : 3E38 9024           		move.w	(RAM_CurrSelc).w,d7
(1)  636/  FF23FC : DE47                		add.w	d7,d7
(1)  637/  FF23FE : 3E3B 7006           		move.w	.tasklist(pc,d7.w),d7
(1)  638/  FF2402 : 4EFB 7002           		jmp	.tasklist(pc,d7.w)
(1)  639/  FF2406 :                     .tasklist:
(1)  640/  FF2406 : 000C                		dc.w .task_00-.tasklist
(1)  641/  FF2408 : 0028                		dc.w .task_01-.tasklist
(1)  642/  FF240A : 002C                		dc.w .task_02-.tasklist
(1)  643/  FF240C : 0030                		dc.w .task_03-.tasklist
(1)  644/  FF240E : 0034                		dc.w .task_04-.tasklist
(1)  645/  FF2410 : 003C                		dc.w .task_05-.tasklist
(1)  646/  FF2412 :                     
(1)  647/  FF2412 :                     ; d0 - Track slot
(1)  648/  FF2412 :                     .task_00:
(1)  649/  FF2412 : 41FA 0036           		lea	MasterTrkList(pc),a0
(1)  650/  FF2416 : 3E38 9028           		move.w	(RAM_CurrTrack).w,d7
(1)  651/  FF241A : E94F                		lsl.w	#4,d7
(1)  652/  FF241C : 41F0 7000           		lea	(a0,d7.w),a0
(1)  653/  FF2420 : 3228 000C           		move.w	$C(a0),d1
(1)  654/  FF2424 : 7400                		moveq	#0,d2
(1)  655/  FF2426 : 3628 000E           		move.w	$E(a0),d3
(1)  656/  FF242A : 6000 DD9E           		bra	Sound_TrkPlay
(1)  657/  FF242E :                     .task_01:
(1)  658/  FF242E : 6000 DDD4           		bra	Sound_TrkStop
(1)  659/  FF2432 :                     .task_02:
(1)  660/  FF2432 : 6000 DDE6           		bra	Sound_TrkPause
(1)  661/  FF2436 :                     .task_03:
(1)  662/  FF2436 : 6000 DDF8           		bra	Sound_TrkResume
(1)  663/  FF243A :                     .task_04:
(1)  664/  FF243A : 3238 902A           		move.w	(RAM_CurrTicks).w,d1
(1)  665/  FF243E : 6000 DE06           		bra	Sound_TrkTicks
(1)  666/  FF2442 :                     .task_05:
(1)  667/  FF2442 : 3238 902C           		move.w	(RAM_CurrTempo).w,d1
(1)  668/  FF2446 : 6000 DE1A           		bra	Sound_GlbTempo
(1)  669/  FF244A :                     
(1)  670/  FF244A :                     ; test playlist
(1)  671/  FF244A :                     MasterTrkList:
(1)  672/  FF244A : 0093 284C 0093 283B 	dc.l GemaTrk_patt_bemine,GemaTrk_blk_bemine,GemaTrk_ins_bemine
                    0093 393E           
(1)  673/  FF2456 : 000A 0000           	dc.w $A,0
(1)  674/  FF245A : 0093 00D0 0093 00C1 	dc.l GemaTrk_patt_Vectr,GemaTrk_blk_Vectr,GemaTrk_ins_Vectr
                    0093 27CB           
(1)  675/  FF2466 : 0007 0000           	dc.w 7,0
(1)  676/  FF246A : 0093 3A12 0093 3A06 	dc.l GemaTrk_patt_HILLS,GemaTrk_blk_HILLS,GemaTrk_ins_HILLS
                    0093 4589           
(1)  677/  FF2476 : 0007 0000           	dc.w 7,0
(1)  678/  FF247A :                     ; 	dc.l GemaTrk_patt_TEST2,GemaTrk_blk_TEST2,GemaTrk_ins_TEST2
(1)  679/  FF247A :                     ; 	dc.w 2,1
(1)  680/  FF247A :                     ; 	dc.l GemaTrk_patt_chrono,GemaTrk_blk_chrono,GemaTrk_ins_chrono
(1)  681/  FF247A :                     ; 	dc.w 3,1
(1)  682/  FF247A :                     ; 	dc.l GemaTrk_mecano_patt,GemaTrk_mecano_blk,GemaTrk_mecano_ins
(1)  683/  FF247A :                     ; 	dc.w 1,1
(1)  684/  FF247A :                     	align 2
(1)  685/  FF247A :                     
(1)  686/  FF247A :                     ; ====================================================================
(1)  687/  FF247A :                     ; ------------------------------------------------------
(1)  688/  FF247A :                     ; Subroutines
(1)  689/  FF247A :                     ; ------------------------------------------------------
(1)  690/  FF247A :                     
(1)  691/  FF247A :                     ; d2 - BLOCK
(1)  692/  FF247A :                     PlayThisSfx:
(1)  693/  FF247A : 41F9 0093 004E      		lea	(GemaTrkData_Sfx),a0
(1)  694/  FF2480 : 7001                		moveq	#1,d0
(1)  695/  FF2482 : 7206                		moveq	#6,d1
(1)  696/  FF2484 :                     ; 		moveq	#0,d2
(1)  697/  FF2484 : 7600                		moveq	#0,d3
(1)  698/  FF2486 : 6000 DD42           		bra	Sound_TrkPlay
(1)  699/  FF248A :                     
(1)  700/  FF248A :                     
(1)  701/  FF248A :                     Emilie_Move:
(1)  702/  FF248A : 0678 0001 9018      		add.w	#1,(RAM_EmiAnim).w
(1)  703/  FF2490 : 41F8 A632           		lea	(Controller_2),a0
(1)  704/  FF2494 : 1010                		move.b	(a0),d0
(1)  705/  FF2496 : B03C 0003           		cmp.b	#$03,d0
(1)  706/  FF249A : 6648                		bne.s	.not_mouse
(1)  707/  FF249C :                     
(1)  708/  FF249C : 343C 0140           		move.w	#320,d2
(1)  709/  FF24A0 : 3238 9000           		move.w	(RAM_EmiPosX).w,d1
(1)  710/  FF24A4 : 3028 0006           		move.w	mouse_x(a0),d0
(1)  711/  FF24A8 : C1FC 000E           		muls.w	#$0E,d0
(1)  712/  FF24AC : E840                		asr.w	#4,d0
(1)  713/  FF24AE : D240                		add.w	d0,d1
(1)  714/  FF24B0 : 8241                		or.w	d1,d1
(1)  715/  FF24B2 : 6A02                		bpl.s	.left_x
(1)  716/  FF24B4 : 4241                		clr.w	d1
(1)  717/  FF24B6 :                     .left_x:
(1)  718/  FF24B6 : B242                		cmp.w	d2,d1
(1)  719/  FF24B8 : 6D02                		blt.s	.right_x
(1)  720/  FF24BA : 3202                		move.w	d2,d1
(1)  721/  FF24BC :                     .right_x:
(1)  722/  FF24BC : 31C1 9000           		move.w	d1,(RAM_EmiPosX).w
(1)  723/  FF24C0 :                     
(1)  724/  FF24C0 : 343C 00E0           		move.w	#224,d2
(1)  725/  FF24C4 : 3238 9004           		move.w	(RAM_EmiPosY).w,d1
(1)  726/  FF24C8 : 3028 0008           		move.w	mouse_Y(a0),d0
(1)  727/  FF24CC : C1FC 000E           		muls.w	#$0E,d0
(1)  728/  FF24D0 : E840                		asr.w	#4,d0
(1)  729/  FF24D2 : D240                		add.w	d0,d1
(1)  730/  FF24D4 : 8241                		or.w	d1,d1
(1)  731/  FF24D6 : 6A02                		bpl.s	.left_y
(1)  732/  FF24D8 : 4241                		clr.w	d1
(1)  733/  FF24DA :                     .left_y:
(1)  734/  FF24DA : B242                		cmp.w	d2,d1
(1)  735/  FF24DC : 6D02                		blt.s	.right_y
(1)  736/  FF24DE : 3202                		move.w	d2,d1
(1)  737/  FF24E0 :                     .right_y:
(1)  738/  FF24E0 : 31C1 9004           		move.w	d1,(RAM_EmiPosY).w
(1)  739/  FF24E4 :                     
(1)  740/  FF24E4 :                     .not_mouse:
(1)  741/  FF24E4 : 4E75                		rts
(1)  742/  FF24E6 :                     
(1)  743/  FF24E6 :                     Emilie_MkSprite:
(1)  744/  FF24E6 : 4DF8 9C30           		lea	(RAM_Sprites),a6
(1)  745/  FF24EA : 2038 9004           		move.l	(RAM_EmiPosY),d0
(1)  746/  FF24EE : 2238 9000           		move.l	(RAM_EmiPosX),d1
(1)  747/  FF24F2 : 4840                		swap	d0
(1)  748/  FF24F4 : 4841                		swap	d1
(1)  749/  FF24F6 : D07C 00A0           		add.w	#$80+32,d0
(1)  750/  FF24FA : D27C 00A0           		add.w	#$80+32,d1
(1)  751/  FF24FE : 3438 9018           		move.w	(RAM_EmiAnim),d2
(1)  752/  FF2502 : E64A                		lsr.w	#3,d2
(1)  753/  FF2504 : C47C 0007           		and.w	#7,d2
(1)  754/  FF2508 : D442                		add.w	d2,d2
(1)  755/  FF250A : 41FA 0204           		lea	Map_Nicole(pc),a0
(1)  756/  FF250E : 3430 2000           		move.w	(a0,d2.w),d2
(1)  757/  FF2512 : D0C2                		adda	d2,a0
(1)  758/  FF2514 : 1818                		move.b	(a0)+,d4
(1)  759/  FF2516 : C87C 00FF           		and.w	#$FF,d4
(1)  760/  FF251A : 987C 0001           		sub.w	#1,d4
(1)  761/  FF251E : 3A3C 0001           		move.w	#$0001,d5
(1)  762/  FF2522 : 3C3C 0500           		move.w	#$0500,d6
(1)  763/  FF2526 :                     .nxt_pz:
(1)  764/  FF2526 : 1618                		move.b	(a0)+,d3
(1)  765/  FF2528 : 4883                		ext.w	d3
(1)  766/  FF252A : D640                		add.w	d0,d3
(1)  767/  FF252C : 3CC3                		move.w	d3,(a6)+
(1)  768/  FF252E :                     
(1)  769/  FF252E : 1618                		move.b	(a0)+,d3
(1)  770/  FF2530 : E14B                		lsl.w	#8,d3
(1)  771/  FF2532 : D645                		add.w	d5,d3
(1)  772/  FF2534 : 3CC3                		move.w	d3,(a6)+
(1)  773/  FF2536 :                     
(1)  774/  FF2536 : 1618                		move.b	(a0)+,d3
(1)  775/  FF2538 : E14B                		lsl.w	#8,d3
(1)  776/  FF253A : 1418                		move.b	(a0)+,d2
(1)  777/  FF253C : C47C 00FF           		and.w	#$FF,d2
(1)  778/  FF2540 : D443                		add.w	d3,d2
(1)  779/  FF2542 : D446                		add.w	d6,d2
(1)  780/  FF2544 : 3CC2                		move.w	d2,(a6)+
(1)  781/  FF2546 :                     
(1)  782/  FF2546 : 1618                		move.b	(a0)+,d3
(1)  783/  FF2548 : 4883                		ext.w	d3
(1)  784/  FF254A : D641                		add.w	d1,d3
(1)  785/  FF254C : 3CC3                		move.w	d3,(a6)+
(1)  786/  FF254E : DA7C 0001           		add.w	#1,d5
(1)  787/  FF2552 : 51CC FFD2           		dbf	d4,.nxt_pz
(1)  788/  FF2556 : 429E                		clr.l	(a6)+
(1)  789/  FF2558 : 429E                		clr.l	(a6)+
(1)  790/  FF255A :                     
(1)  791/  FF255A :                     	; DPLC
(1)  792/  FF255A : 3438 9018           		move.w	(RAM_EmiAnim),d2
(1)  793/  FF255E : E64A                		lsr.w	#3,d2
(1)  794/  FF2560 : C47C 0007           		and.w	#7,d2
(1)  795/  FF2564 : D442                		add.w	d2,d2
(1)  796/  FF2566 : 41FA 0314           		lea	Dplc_Nicole(pc),a0
(1)  797/  FF256A : 3430 2000           		move.w	(a0,d2.w),d2
(1)  798/  FF256E : D0C2                		adda	d2,a0
(1)  799/  FF2570 : 3818                		move.w	(a0)+,d4
(1)  800/  FF2572 : C87C 00FF           		and.w	#$FF,d4
(1)  801/  FF2576 : 987C 0001           		sub.w	#1,d4
(1)  802/  FF257A : 3A3C 0500           		move.w	#$500,d5
(1)  803/  FF257E :                     
(1)  804/  FF257E :                     
(1)  805/  FF257E :                     	; d0 - graphics
(1)  806/  FF257E :                     	; d5 - VRAM OUTPUT
(1)  807/  FF257E : EB4D                		lsl.w	#5,d5
(1)  808/  FF2580 :                     .nxt_dpz:
(1)  809/  FF2580 : 203C 0003 BC80      		move.l	#ART_EMI,d0
(1)  810/  FF2586 : 3218                		move.w	(a0)+,d1
(1)  811/  FF2588 : 3401                		move.w	d1,d2
(1)  812/  FF258A : C27C 07FF           		and.w	#$7FF,d1
(1)  813/  FF258E : EB49                		lsl.w	#5,d1
(1)  814/  FF2590 : D081                		add.l	d1,d0
(1)  815/  FF2592 : 3205                		move.w	d5,d1
(1)  816/  FF2594 : EE4A                		lsr.w	#7,d2
(1)  817/  FF2596 : D47C 0020           		add.w	#$20,d2
(1)  818/  FF259A : 3602                		move.w	d2,d3
(1)  819/  FF259C : 6100 E2A8           		bsr	Video_DmaSet
(1)  820/  FF25A0 : DA43                		add.w	d3,d5
(1)  821/  FF25A2 : 51CC FFDC           		dbf	d4,.nxt_dpz
(1)  822/  FF25A6 :                     .no_upd:
(1)  823/  FF25A6 : 4E75                		rts
(1)  824/  FF25A8 :                     ;
(1)  825/  FF25A8 :                     .hidefuji:
(1)  826/  FF25A8 : 4DF8 9C30           		lea	(RAM_Sprites),a6
(1)  827/  FF25AC : 2CFC 0000 0000      		move.l	#0,(a6)+
(1)  828/  FF25B2 : 2CFC 0000 0000      		move.l	#0,(a6)+
(1)  829/  FF25B8 : 2CFC 0000 0000      		move.l	#0,(a6)+
(1)  830/  FF25BE : 2CFC 0000 0000      		move.l	#0,(a6)+
(1)  831/  FF25C4 : 4E75                		rts
(1)  832/  FF25C6 :                     
(1)  833/  FF25C6 :                     ; VBLANK only
(1)  834/  FF25C6 :                     Emilie_Show:
(1)  835/  FF25C6 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  836/  FF25CC : 2D7C 7800 0003 0004 		move.l	#$78000003,4(a6)
(1)  837/  FF25D4 : 4BF8 9C30           		lea	(RAM_Sprites),a5
(1)  838/  FF25D8 : 3E3C 0007           		move.w	#8-1,d7
(1)  839/  FF25DC :                     .sprdata:
(1)  840/  FF25DC : 2C9D                		move.l	(a5)+,(a6)
(1)  841/  FF25DE : 2C9D                		move.l	(a5)+,(a6)
(1)  842/  FF25E0 : 2C9D                		move.l	(a5)+,(a6)
(1)  843/  FF25E2 : 2C9D                		move.l	(a5)+,(a6)
(1)  844/  FF25E4 : 51CF FFF6           		dbf	d7,.sprdata
(1)  845/  FF25E8 : 4E75                		rts
(1)  846/  FF25EA :                     
(1)  847/  FF25EA :                     ; ====================================================================
(1)  848/  FF25EA :                     ; ------------------------------------------------------
(1)  849/  FF25EA :                     ; VBlank
(1)  850/  FF25EA :                     ; ------------------------------------------------------
(1)  851/  FF25EA :                     
(1)  852/  FF25EA :                     ; ------------------------------------------------------
(1)  853/  FF25EA :                     ; HBlank
(1)  854/  FF25EA :                     ; ------------------------------------------------------
(1)  855/  FF25EA :                     
(1)  856/  FF25EA :                     ; ====================================================================
(1)  857/  FF25EA :                     ; ------------------------------------------------------
(1)  858/  FF25EA :                     ; DATA
(1)  859/  FF25EA :                     ;
(1)  860/  FF25EA :                     ; Small stuff goes here
(1)  861/  FF25EA :                     ; ------------------------------------------------------
(1)  862/  FF25EA :                     
(1)  863/  FF25EA :                     str_Title:
(1)  864/  FF25EA : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO 202X",0
                    4D41 5253 4941 4E4F 
                    2032 3032 5800      
(1)  865/  FF2600 :                     		align 2
(1)  866/  FF2600 :                     
(1)  867/  FF2600 : 200A                str_Cursor:	dc.b " ",$A
(1)  868/  FF2602 : 3E0A                		dc.b ">",$A
(1)  869/  FF2604 : 2000                		dc.b " ",0
(1)  870/  FF2606 :                     
(1)  871/  FF2606 :                     str_Status:
(1)  872/  FF2606 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1)  873/  FF260A : 5C77 0A0A 0A0A      		dc.b "\\w",$A,$A,$A,$A
(1)  874/  FF2610 : 5C77 0A             		dc.b "\\w",$A
(1)  875/  FF2613 : 5C77 00             		dc.b "\\w",0
(1)  876/  FF2616 : FFFF 9026           		dc.l RAM_CurrIndx
(1)  877/  FF261A : FFFF 9028           		dc.l RAM_CurrTrack
(1)  878/  FF261E : FFFF 902A           		dc.l RAM_CurrTicks
(1)  879/  FF2622 : FFFF 902C           		dc.l RAM_CurrTempo
(1)  880/  FF2626 :                     		align 2
(1)  881/  FF2626 :                     str_Gema:
(1)  882/  FF2626 : 4745 4D41 2053 4F55 		dc.b "GEMA SOUND DRIVER",$A
                    4E44 2044 5249 5645 
                    520A                
(1)  883/  FF2638 : 0A                  		dc.b $A
(1)  884/  FF2639 : 5472 6163 6B20 696E 		dc.b "Track index -----",$A,$A
                    6465 7820 2D2D 2D2D 
                    2D0A 0A             
(1)  885/  FF264C : 2020 536F 756E 645F 		dc.b "  Sound_TrkPlay",$A
                    5472 6B50 6C61 790A 
(1)  886/  FF265C : 2020 536F 756E 645F 		dc.b "  Sound_TrkStop",$A
                    5472 6B53 746F 700A 
(1)  887/  FF266C : 2020 536F 756E 645F 		dc.b "  Sound_TrkPause**",$A
                    5472 6B50 6175 7365 
                    2A2A 0A             
(1)  888/  FF267F : 2020 536F 756E 645F 		dc.b "  Sound_TrkResume**",$A
                    5472 6B52 6573 756D 
                    652A 2A0A           
(1)  889/  FF2693 : 2020 536F 756E 645F 		dc.b "  Sound_TrkTicks",$A
                    5472 6B54 6963 6B73 
                    0A                  
(1)  890/  FF26A4 : 2020 536F 756E 645F 		dc.b "  Sound_GlbTempo",0
                    476C 6254 656D 706F 
                    00                  
(1)  891/  FF26B5 :                     		align 2
(1)  892/  FF26B6 :                     ; str_COMM:
(1)  893/  FF26B6 :                     ; 		dc.b "\\w \\w \\w \\w",$A
(1)  894/  FF26B6 :                     ; 		dc.b "\\w \\w \\w \\w",0
(1)  895/  FF26B6 :                     ; 		dc.l sysmars_reg+comm0
(1)  896/  FF26B6 :                     ; 		dc.l sysmars_reg+comm2
(1)  897/  FF26B6 :                     ; 		dc.l sysmars_reg+comm4
(1)  898/  FF26B6 :                     ; 		dc.l sysmars_reg+comm6
(1)  899/  FF26B6 :                     ; 		dc.l sysmars_reg+comm8
(1)  900/  FF26B6 :                     ; 		dc.l sysmars_reg+comm10
(1)  901/  FF26B6 :                     ; 		dc.l sysmars_reg+comm12
(1)  902/  FF26B6 :                     ; 		dc.l sysmars_reg+comm14
(1)  903/  FF26B6 :                     ; 		align 2
(1)  904/  FF26B6 :                     
(1)  905/  FF26B6 :                     str_InfoMouse:
(1)  906/  FF26B6 : 4766 784D 6F64 653A 		dc.b "GfxMode: \\w",0
                    205C 7700           
(1)  907/  FF26C2 :                     ; 		dc.b "\\l \\l \\l \\l",$A
(1)  908/  FF26C2 :                     ; 		dc.b "\\l \\l \\l \\l",0
(1)  909/  FF26C2 : FFFF 9014           		dc.l RAM_CurrGfx
(1)  910/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+8
(1)  911/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+$C
(1)  912/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn
(1)  913/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+4
(1)  914/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+$10
(1)  915/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+$14
(1)  916/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+$18
(1)  917/  FF26C6 :                     ; 		dc.l RAM_MdMarsPlgn+$1C
(1)  918/  FF26C6 :                     		align 2
(1)  919/  FF26C6 :                     
(1)  920/  FF26C6 :                     PAL_EMI:
(1)  921/  FF26C6 : 0000                		dc.w 0
(1)  922/  FF26C8 :                     		binclude "data/md/sprites/emi_pal.bin",2
(1)  923/  FF26E6 :                     		align 2
(1)  924/  FF26E6 :                     
(1)  925/  FF26E6 :                     PAL_TESTBOARD:
(1)  926/  FF26E6 :                     		binclude "data/md/bg/fg_pal.bin"
(1)  927/  FF2704 :                     		align 2
(1)  928/  FF2704 :                     PAL_BG:
(1)  929/  FF2704 :                     		binclude "data/md/bg/bg_pal.bin"
(1)  930/  FF2710 :                     		align 2
(1)  931/  FF2710 :                     
(1)  932/  FF2710 :                     Map_Nicole:
(1)  933/  FF2710 :                     		include "data/md/sprites/emi_map.asm"
(2)    1/  FF2710 :                     .mappings:
(2)    2/  FF2710 : 0010                		dc.w .frame_0-.mappings
(2)    3/  FF2712 : 0048                		dc.w .frame_1-.mappings
(2)    4/  FF2714 : 007B                		dc.w .frame_2-.mappings
(2)    5/  FF2716 : 00A4                		dc.w .frame_3-.mappings
(2)    6/  FF2718 : 00C8                		dc.w .frame_4-.mappings
(2)    7/  FF271A : 00F6                		dc.w .frame_5-.mappings
(2)    8/  FF271C : 0115                		dc.w .frame_6-.mappings
(2)    9/  FF271E : 013E                		dc.w .frame_7-.mappings
(2)   10/  FF2720 :                     .frame_0:
(2)   11/  FF2720 : 0B                  		dc.b $B
(2)   12/  FF2721 :                     
(2)   13/  FF2721 : E80C 0000 C0        		dc.b $E8,$C,$0,$0,$C0
(2)   14/  FF2726 : E00C 0004 C8        		dc.b $E0,$C,$0,$4,$C8
(2)   15/  FF272B : D80C 0008 D0        		dc.b $D8,$C,$0,$8,$D0
(2)   16/  FF2730 : F00C 000C D0        		dc.b $F0,$C,$0,$C,$D0
(2)   17/  FF2735 : C80D 0010 D8        		dc.b $C8,$D,$0,$10,$D8
(2)   18/  FF273A : C008 0018 E0        		dc.b $C0,$8,$0,$18,$E0
(2)   19/  FF273F : E804 001B E0        		dc.b $E8,$4,$0,$1B,$E0
(2)   20/  FF2744 : E008 001D E8        		dc.b $E0,$8,$0,$1D,$E8
(2)   21/  FF2749 : F808 0020 E8        		dc.b $F8,$8,$0,$20,$E8
(2)   22/  FF274E : D804 0023 F0        		dc.b $D8,$4,$0,$23,$F0
(2)   23/  FF2753 : F004 0025 F0        		dc.b $F0,$4,$0,$25,$F0
(2)   24/  FF2758 :                     .frame_1:
(2)   25/  FF2758 : 0A                  		dc.b $A
(2)   26/  FF2759 :                     
(2)   27/  FF2759 : E80D 0000 C8        		dc.b $E8,$D,$0,$0,$C8
(2)   28/  FF275E : D00C 0008 D0        		dc.b $D0,$C,$0,$8,$D0
(2)   29/  FF2763 : E00C 000C D0        		dc.b $E0,$C,$0,$C,$D0
(2)   30/  FF2768 : C80C 0010 D8        		dc.b $C8,$C,$0,$10,$D8
(2)   31/  FF276D : D80C 0014 D8        		dc.b $D8,$C,$0,$14,$D8
(2)   32/  FF2772 : F808 0018 D8        		dc.b $F8,$8,$0,$18,$D8
(2)   33/  FF2777 : C008 001B E0        		dc.b $C0,$8,$0,$1B,$E0
(2)   34/  FF277C : E804 001E E8        		dc.b $E8,$4,$0,$1E,$E8
(2)   35/  FF2781 : D000 0020 F0        		dc.b $D0,$0,$0,$20,$F0
(2)   36/  FF2786 : E000 0021 F0        		dc.b $E0,$0,$0,$21,$F0
(2)   37/  FF278B :                     .frame_2:
(2)   38/  FF278B : 08                  		dc.b $8
(2)   39/  FF278C :                     
(2)   40/  FF278C : D00C 0000 D0        		dc.b $D0,$C,$0,$0,$D0
(2)   41/  FF2791 : E007 0004 D0        		dc.b $E0,$7,$0,$4,$D0
(2)   42/  FF2796 : C00D 000C D8        		dc.b $C0,$D,$0,$C,$D8
(2)   43/  FF279B : D80C 0014 D8        		dc.b $D8,$C,$0,$14,$D8
(2)   44/  FF27A0 : E001 0018 E0        		dc.b $E0,$1,$0,$18,$E0
(2)   45/  FF27A5 : F800 001A E0        		dc.b $F8,$0,$0,$1A,$E0
(2)   46/  FF27AA : E000 001B E8        		dc.b $E0,$0,$0,$1B,$E8
(2)   47/  FF27AF : D000 001C F0        		dc.b $D0,$0,$0,$1C,$F0
(2)   48/  FF27B4 :                     .frame_3:
(2)   49/  FF27B4 : 07                  		dc.b $7
(2)   50/  FF27B5 :                     
(2)   51/  FF27B5 : F00D 0000 C8        		dc.b $F0,$D,$0,$0,$C8
(2)   52/  FF27BA : D80E 0008 D0        		dc.b $D8,$E,$0,$8,$D0
(2)   53/  FF27BF : C80D 0014 D8        		dc.b $C8,$D,$0,$14,$D8
(2)   54/  FF27C4 : C008 001C E0        		dc.b $C0,$8,$0,$1C,$E0
(2)   55/  FF27C9 : F001 001F E8        		dc.b $F0,$1,$0,$1F,$E8
(2)   56/  FF27CE : D802 0021 F0        		dc.b $D8,$2,$0,$21,$F0
(2)   57/  FF27D3 : F800 0024 F0        		dc.b $F8,$0,$0,$24,$F0
(2)   58/  FF27D8 :                     .frame_4:
(2)   59/  FF27D8 : 09                  		dc.b $9
(2)   60/  FF27D9 :                     
(2)   61/  FF27D9 : E809 0000 C0        		dc.b $E8,$9,$0,$0,$C0
(2)   62/  FF27DE : E00C 0006 C8        		dc.b $E0,$C,$0,$6,$C8
(2)   63/  FF27E3 : D00D 000A D0        		dc.b $D0,$D,$0,$A,$D0
(2)   64/  FF27E8 : C80C 0012 D8        		dc.b $C8,$C,$0,$12,$D8
(2)   65/  FF27ED : E804 0016 D8        		dc.b $E8,$4,$0,$16,$D8
(2)   66/  FF27F2 : C008 0018 E0        		dc.b $C0,$8,$0,$18,$E0
(2)   67/  FF27F7 : F009 001B E0        		dc.b $F0,$9,$0,$1B,$E0
(2)   68/  FF27FC : E004 0021 E8        		dc.b $E0,$4,$0,$21,$E8
(2)   69/  FF2801 : D001 0023 F0        		dc.b $D0,$1,$0,$23,$F0
(2)   70/  FF2806 :                     .frame_5:
(2)   71/  FF2806 : 06                  		dc.b $6
(2)   72/  FF2807 :                     
(2)   73/  FF2807 : F00C 0000 C8        		dc.b $F0,$C,$0,$0,$C8
(2)   74/  FF280C : D00F 0004 D0        		dc.b $D0,$F,$0,$4,$D0
(2)   75/  FF2811 : C80C 0014 D8        		dc.b $C8,$C,$0,$14,$D8
(2)   76/  FF2816 : F808 0018 D8        		dc.b $F8,$8,$0,$18,$D8
(2)   77/  FF281B : C008 001B E0        		dc.b $C0,$8,$0,$1B,$E0
(2)   78/  FF2820 : D003 001E F0        		dc.b $D0,$3,$0,$1E,$F0
(2)   79/  FF2825 :                     .frame_6:
(2)   80/  FF2825 : 08                  		dc.b $8
(2)   81/  FF2826 :                     
(2)   82/  FF2826 : D00C 0000 D0        		dc.b $D0,$C,$0,$0,$D0
(2)   83/  FF282B : E007 0004 D0        		dc.b $E0,$7,$0,$4,$D0
(2)   84/  FF2830 : C00D 000C D8        		dc.b $C0,$D,$0,$C,$D8
(2)   85/  FF2835 : D80C 0014 D8        		dc.b $D8,$C,$0,$14,$D8
(2)   86/  FF283A : E001 0018 E0        		dc.b $E0,$1,$0,$18,$E0
(2)   87/  FF283F : F800 001A E0        		dc.b $F8,$0,$0,$1A,$E0
(2)   88/  FF2844 : E000 001B E8        		dc.b $E0,$0,$0,$1B,$E8
(2)   89/  FF2849 : D000 001C F0        		dc.b $D0,$0,$0,$1C,$F0
(2)   90/  FF284E :                     .frame_7:
(2)   91/  FF284E : 09                  		dc.b $9
(2)   92/  FF284F :                     
(2)   93/  FF284F : F00D 0000 C8        		dc.b $F0,$D,$0,$0,$C8
(2)   94/  FF2854 : D00C 0008 D0        		dc.b $D0,$C,$0,$8,$D0
(2)   95/  FF2859 : E00D 000C D0        		dc.b $E0,$D,$0,$C,$D0
(2)   96/  FF285E : C80C 0014 D8        		dc.b $C8,$C,$0,$14,$D8
(2)   97/  FF2863 : D80C 0018 D8        		dc.b $D8,$C,$0,$18,$D8
(2)   98/  FF2868 : C008 001C E0        		dc.b $C0,$8,$0,$1C,$E0
(2)   99/  FF286D : F001 001F E8        		dc.b $F0,$1,$0,$1F,$E8
(2)  100/  FF2872 : D000 0021 F0        		dc.b $D0,$0,$0,$21,$F0
(2)  101/  FF2877 : E001 0022 F0        		dc.b $E0,$1,$0,$22,$F0
(2)  102/  FF287C :                     
(1)  934/  FF287C :                     		align 2
(1)  935/  FF287C :                     Dplc_Nicole:
(1)  936/  FF287C :                     		include "data/md/sprites/emi_plc.asm"
(2)    1/  FF287C :                     .dplc:
(2)    2/  FF287C : 0010                		dc.w .frame_0-.dplc
(2)    3/  FF287E : 0028                		dc.w .frame_1-.dplc
(2)    4/  FF2880 : 003E                		dc.w .frame_2-.dplc
(2)    5/  FF2882 : 0050                		dc.w .frame_3-.dplc
(2)    6/  FF2884 : 0060                		dc.w .frame_4-.dplc
(2)    7/  FF2886 : 0074                		dc.w .frame_5-.dplc
(2)    8/  FF2888 : 0082                		dc.w .frame_6-.dplc
(2)    9/  FF288A : 0094                		dc.w .frame_7-.dplc
(2)   10/  FF288C :                     .frame_0:
(2)   11/  FF288C : 000B                		dc.w $B
(2)   12/  FF288E :                     
(2)   13/  FF288E : 3000                		dc.w $3000
(2)   14/  FF2890 : 3004                		dc.w $3004
(2)   15/  FF2892 : 3008                		dc.w $3008
(2)   16/  FF2894 : 300C                		dc.w $300C
(2)   17/  FF2896 : 7010                		dc.w $7010
(2)   18/  FF2898 : 2018                		dc.w $2018
(2)   19/  FF289A : 101B                		dc.w $101B
(2)   20/  FF289C : 201D                		dc.w $201D
(2)   21/  FF289E : 2020                		dc.w $2020
(2)   22/  FF28A0 : 1023                		dc.w $1023
(2)   23/  FF28A2 : 1025                		dc.w $1025
(2)   24/  FF28A4 :                     .frame_1:
(2)   25/  FF28A4 : 000A                		dc.w $A
(2)   26/  FF28A6 :                     
(2)   27/  FF28A6 : 7027                		dc.w $7027
(2)   28/  FF28A8 : 302F                		dc.w $302F
(2)   29/  FF28AA : 3033                		dc.w $3033
(2)   30/  FF28AC : 3037                		dc.w $3037
(2)   31/  FF28AE : 303B                		dc.w $303B
(2)   32/  FF28B0 : 203F                		dc.w $203F
(2)   33/  FF28B2 : 2042                		dc.w $2042
(2)   34/  FF28B4 : 1045                		dc.w $1045
(2)   35/  FF28B6 : 0047                		dc.w $47
(2)   36/  FF28B8 : 0048                		dc.w $48
(2)   37/  FF28BA :                     .frame_2:
(2)   38/  FF28BA : 0008                		dc.w $8
(2)   39/  FF28BC :                     
(2)   40/  FF28BC : 3049                		dc.w $3049
(2)   41/  FF28BE : 704D                		dc.w $704D
(2)   42/  FF28C0 : 7055                		dc.w $7055
(2)   43/  FF28C2 : 305D                		dc.w $305D
(2)   44/  FF28C4 : 1061                		dc.w $1061
(2)   45/  FF28C6 : 0063                		dc.w $63
(2)   46/  FF28C8 : 0064                		dc.w $64
(2)   47/  FF28CA : 0065                		dc.w $65
(2)   48/  FF28CC :                     .frame_3:
(2)   49/  FF28CC : 0007                		dc.w $7
(2)   50/  FF28CE :                     
(2)   51/  FF28CE : 7066                		dc.w $7066
(2)   52/  FF28D0 : B06E                		dc.w $B06E
(2)   53/  FF28D2 : 707A                		dc.w $707A
(2)   54/  FF28D4 : 2082                		dc.w $2082
(2)   55/  FF28D6 : 1085                		dc.w $1085
(2)   56/  FF28D8 : 2087                		dc.w $2087
(2)   57/  FF28DA : 008A                		dc.w $8A
(2)   58/  FF28DC :                     .frame_4:
(2)   59/  FF28DC : 0009                		dc.w $9
(2)   60/  FF28DE :                     
(2)   61/  FF28DE : 508B                		dc.w $508B
(2)   62/  FF28E0 : 3091                		dc.w $3091
(2)   63/  FF28E2 : 7095                		dc.w $7095
(2)   64/  FF28E4 : 309D                		dc.w $309D
(2)   65/  FF28E6 : 10A1                		dc.w $10A1
(2)   66/  FF28E8 : 20A3                		dc.w $20A3
(2)   67/  FF28EA : 50A6                		dc.w $50A6
(2)   68/  FF28EC : 10AC                		dc.w $10AC
(2)   69/  FF28EE : 10AE                		dc.w $10AE
(2)   70/  FF28F0 :                     .frame_5:
(2)   71/  FF28F0 : 0006                		dc.w $6
(2)   72/  FF28F2 :                     
(2)   73/  FF28F2 : 30B0                		dc.w $30B0
(2)   74/  FF28F4 : F0B4                		dc.w $F0B4
(2)   75/  FF28F6 : 30C4                		dc.w $30C4
(2)   76/  FF28F8 : 20C8                		dc.w $20C8
(2)   77/  FF28FA : 20CB                		dc.w $20CB
(2)   78/  FF28FC : 30CE                		dc.w $30CE
(2)   79/  FF28FE :                     .frame_6:
(2)   80/  FF28FE : 0008                		dc.w $8
(2)   81/  FF2900 :                     
(2)   82/  FF2900 : 30D2                		dc.w $30D2
(2)   83/  FF2902 : 70D6                		dc.w $70D6
(2)   84/  FF2904 : 70DE                		dc.w $70DE
(2)   85/  FF2906 : 30E6                		dc.w $30E6
(2)   86/  FF2908 : 10EA                		dc.w $10EA
(2)   87/  FF290A : 00EC                		dc.w $EC
(2)   88/  FF290C : 00ED                		dc.w $ED
(2)   89/  FF290E : 00EE                		dc.w $EE
(2)   90/  FF2910 :                     .frame_7:
(2)   91/  FF2910 : 0009                		dc.w $9
(2)   92/  FF2912 :                     
(2)   93/  FF2912 : 70EF                		dc.w $70EF
(2)   94/  FF2914 : 30F7                		dc.w $30F7
(2)   95/  FF2916 : 70FB                		dc.w $70FB
(2)   96/  FF2918 : 3103                		dc.w $3103
(2)   97/  FF291A : 3107                		dc.w $3107
(2)   98/  FF291C : 210B                		dc.w $210B
(2)   99/  FF291E : 110E                		dc.w $110E
(2)  100/  FF2920 : 0110                		dc.w $110
(2)  101/  FF2922 : 1111                		dc.w $1111
(2)  102/  FF2924 :                     
(1)  937/  FF2924 :                     		align 2
(1)  938/  FF2924 :                     
(1)  939/  FF2924 :                     
(1)  940/  FF2924 :                     ; ====================================================================
(1)  941/  FF2924 :                     ; Report size
(1)  946/  FF2924 :                     
      66/   3004E :                     		dephase
      67/   3004E :                     
      68/   3004E :                     ; ====================================================================
      69/   3004E :                     ; ----------------------------------------------------------------
      70/   3004E :                     ; 68k DATA BANKs at $900000 1MB max
      71/   3004E :                     ; ----------------------------------------------------------------
      72/   3004E :                     
      73/   3004E :                     	; First one is smaller than the others...
      74/  93004E :                     		phase $900000+*				; Only one currently
      75/  93004E :                     		include "sound/tracks.asm"
(1)    1/  93004E :                     ; ================================================================
(1)    2/  93004E :                     ; ------------------------------------------------------------
(1)    3/  93004E :                     ; DATA SECTION
(1)    4/  93004E :                     ; 
(1)    5/  93004E :                     ; SOUND
(1)    6/  93004E :                     ; ------------------------------------------------------------
(1)    7/  93004E :                     
(1)    8/  93004E :                     ; PWM pitches:
(1)    9/  93004E :                     ; -17 - 8000
(1)   10/  93004E :                     
(1)   11/  93004E :                     ; Instrument macros
(1)   12/  93004E :                     ; do note that some 24-bit pointers add 90h to the MSB
(1)   13/  93004E :                     ;
(1)   14/  93004E :                     ; TODO: this might fail to work. if possible use ALL instruments
(1)   15/  93004E :                     ; on your tracks
(1)   16/  93004E :                     gInsNull macro
(1)   17/  93004E :                     	dc.b  -1,$00,$00,$00
(1)   18/  93004E :                     	dc.b $00,$00,$00,$00
(1)   19/  93004E :                     	endm
(1)   20/  93004E :                     
(1)   21/  93004E :                     ; alv: attack level (00=high)
(1)   22/  93004E :                     ; atk: attack rate
(1)   23/  93004E :                     ; slv: sustain (00=high)
(1)   24/  93004E :                     ; dky: decay rate (up)
(1)   25/  93004E :                     ; rrt: release rate (down)
(1)   26/  93004E :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt
(1)   27/  93004E :                     	dc.b $80,pitch,alv,atk
(1)   28/  93004E :                     	dc.b slv,dky,rrt,$00
(1)   29/  93004E :                     	endm
(1)   30/  93004E :                     
(1)   31/  93004E :                     ; same arguments as gInsPsg, but for the last one:
(1)   32/  93004E :                     ; mode: noise mode %tmm (PSGN only) t-Bass(0)|Noise(1) mm-Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   33/  93004E :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,mode
(1)   34/  93004E :                     	dc.b $90|mode,pitch,alv,atk
(1)   35/  93004E :                     	dc.b slv,dky,rrt,0
(1)   36/  93004E :                     	endm
(1)   37/  93004E :                     
(1)   38/  93004E :                     ; fmins - 24-bit ROM pointer to patch data
(1)   39/  93004E :                     ; automaticly sets to the $900000 area
(1)   40/  93004E :                     gInsFm macro pitch,fmins
(1)   41/  93004E :                     	dc.b $A0,pitch,((fmins>>16)&$FF)|$90,((fmins>>8)&$FF)
(1)   42/  93004E :                     	dc.b fmins&$FF,$00,$00,$00
(1)   43/  93004E :                     	endm
(1)   44/  93004E :                     
(1)   45/  93004E :                     ; Same as gInsFm
(1)   46/  93004E :                     ; But the last 4 words are manually-set frequencies
(1)   47/  93004E :                     ; for each operator in this order: OP1 OP2 OP3 OP4
(1)   48/  93004E :                     gInsFm3	macro pitch,fmins
(1)   49/  93004E :                     	dc.b $B0,pitch,((fmins>>16)&$FF)|$90,((fmins>>8)&$FF)
(1)   50/  93004E :                     	dc.b fmins&$FF,$00,$00,$00
(1)   51/  93004E :                     	endm
(1)   52/  93004E :                     
(1)   53/  93004E :                     ; start: Pointer to sample data:
(1)   54/  93004E :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   55/  93004E :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   56/  93004E :                     ;        dc.b (sound data)	; Then the actual sound data
(1)   57/  93004E :                     ;
(1)   58/  93004E :                     ; flags: %0-dont loop, %1-loop
(1)   59/  93004E :                     gInsDac	macro pitch,start,flags
(1)   60/  93004E :                     	dc.b $C0|flags,pitch,((start>>16)&$FF)|$90,((start>>8)&$FF)
(1)   61/  93004E :                     	dc.b start&$FF,0,0,0
(1)   62/  93004E :                     	endm
(1)   63/  93004E :                     
(1)   64/  93004E :                     ; start: Pointer to sample data:
(1)   65/  93004E :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   66/  93004E :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   67/  93004E :                     ;        dc.b (sound data)	; Then the actual sound data
(1)   68/  93004E :                     ;
(1)   69/  93004E :                     ; flags: %00SL
(1)   70/  93004E :                     ;        L - Loop sample
(1)   71/  93004E :                     ;        S - Sample is in stereo
(1)   72/  93004E :                     gInsPwm	macro pitch,start,flags
(1)   73/  93004E :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   74/  93004E :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   75/  93004E :                     	endm
(1)   76/  93004E :                     
(1)   77/  93004E :                     ; ------------------------------------------------------------
(1)   78/  93004E :                     ; SFX tracks
(1)   79/  93004E :                     ; ------------------------------------------------------------
(1)   80/  93004E :                     
(1)   81/  93004E :                     GemaTrkData_Sfx:
(1)   82/  93004E : 0093 005D           	dc.l GemaSfxPat_Boom
(1)   83/  930052 : 0093 005A           	dc.l GemaSfxBlk_Boom
(1)   84/  930056 : 0093 00A9           	dc.l GemaSfxIns_Boom
(1)   85/  93005A :                     GemaSfxBlk_Boom:
(1)   86/  93005A :                     	binclude "sound/tracks/sfxpack_blk.bin"
(1)   87/  93005D :                     GemaSfxPat_Boom:
(1)   88/  93005D :                     	binclude "sound/tracks/sfxpack_patt.bin"
(1)   89/  9300A9 :                     GemaSfxIns_Boom:
(1)   90/  9300A9 : (MACRO)             	gInsFm3 0,FmIns_Fm3_Explosion
(1)   90/  9300A9 : B000 92F3                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF)|$90,((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)   90/  9300AD : 9400 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)   91/  9300B1 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$02,%110
(1)   91/  9300B1 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)   91/  9300B5 : 0000 0200                   dc.b $00,$00,$02,0
(1)   92/  9300B9 : (MACRO)             	gInsFm 0,FmIns_Ding_toy
(1)   92/  9300B9 : A000 92F6                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF)|$90,((FMINS_DING_TOY>>8)&$FF)
(1)   92/  9300BD : DC00 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)   93/  9300C1 :                     
(1)   94/  9300C1 :                     GemaTrk_blk_Vectr:
(1)   95/  9300C1 :                     	binclude "sound/tracks/vectr_blk.bin"
(1)   96/  9300D0 :                     GemaTrk_patt_Vectr:
(1)   97/  9300D0 :                     	binclude "sound/tracks/vectr_patt.bin"
(1)   98/  9327CB :                     GemaTrk_ins_Vectr:
(1)   99/  9327CB : (MACRO)             	gInsPwm -17,SmpIns_Vctr01,%001
(1)   99/  9327CB : D1EF 0204                   dc.b $D0|%001,-17,((SMPINS_VCTR01>>24)&$FF),((SMPINS_VCTR01>>16)&$FF)
(1)   99/  9327CF : 40E0 0000                   dc.b ((SMPINS_VCTR01>>8)&$FF),SMPINS_VCTR01&$FF,0,0
(1)  100/  9327D3 : (MACRO)             	gInsNull
(1)  100/  9327D3 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  100/  9327D7 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  101/  9327DB : (MACRO)             	gInsPwm -15,SmpIns_VctrCrash,0
(1)  101/  9327DB : D0F1 0204                   dc.b $D0|0,-15,((SMPINS_VCTRCRASH>>24)&$FF),((SMPINS_VCTRCRASH>>16)&$FF)
(1)  101/  9327DF : D6D4 0000                   dc.b ((SMPINS_VCTRCRASH>>8)&$FF),SMPINS_VCTRCRASH&$FF,0,0
(1)  102/  9327E3 : (MACRO)             	gInsPwm -17,SmpIns_Vctr04,%001
(1)  102/  9327E3 : D1EF 0204                   dc.b $D0|%001,-17,((SMPINS_VCTR04>>24)&$FF),((SMPINS_VCTR04>>16)&$FF)
(1)  102/  9327E7 : 5D18 0000                   dc.b ((SMPINS_VCTR04>>8)&$FF),SMPINS_VCTR04&$FF,0,0
(1)  103/  9327EB : (MACRO)             	gInsNull
(1)  103/  9327EB : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  103/  9327EF : 0000 0000                   dc.b $00,$00,$00,$00
(1)  104/  9327F3 : (MACRO)             	gInsPwm -15,SmpIns_VctrTimpani,%001
(1)  104/  9327F3 : D1F1 0204                   dc.b $D0|%001,-15,((SMPINS_VCTRTIMPANI>>24)&$FF),((SMPINS_VCTRTIMPANI>>16)&$FF)
(1)  104/  9327F7 : A460 0000                   dc.b ((SMPINS_VCTRTIMPANI>>8)&$FF),SMPINS_VCTRTIMPANI&$FF,0,0
(1)  105/  9327FB : (MACRO)             	gInsFm -22,FmIns_Bass_4
(1)  105/  9327FB : A0EA 92F4                   dc.b $A0,-22,((FMINS_BASS_4>>16)&$FF)|$90,((FMINS_BASS_4>>8)&$FF)
(1)  105/  9327FF : DC00 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  106/  932803 : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$01
(1)  106/  932803 : 8000 0000                   dc.b $80,0,$00,$00
(1)  106/  932807 : 0000 0100                   dc.b $00,$00,$01,$00
(1)  107/  93280B : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$01
(1)  107/  93280B : 8000 0000                   dc.b $80,0,$00,$00
(1)  107/  93280F : 0000 0100                   dc.b $00,$00,$01,$00
(1)  108/  932813 : (MACRO)             	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  108/  932813 : D0EF 0204                   dc.b $D0|%000,-17,((SMPINS_VCTRSNARE>>24)&$FF),((SMPINS_VCTRSNARE>>16)&$FF)
(1)  108/  932817 : 7788 0000                   dc.b ((SMPINS_VCTRSNARE>>8)&$FF),SMPINS_VCTRSNARE&$FF,0,0
(1)  109/  93281B : (MACRO)             	gInsPwm -17,SmpIns_VctrKick,%000
(1)  109/  93281B : D0EF 0204                   dc.b $D0|%000,-17,((SMPINS_VCTRKICK>>24)&$FF),((SMPINS_VCTRKICK>>16)&$FF)
(1)  109/  93281F : 94CC 0000                   dc.b ((SMPINS_VCTRKICK>>8)&$FF),SMPINS_VCTRKICK&$FF,0,0
(1)  110/  932823 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$10,%100
(1)  110/  932823 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  110/  932827 : 0000 1000                   dc.b $00,$00,$10,0
(1)  111/  93282B : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$08,%100
(1)  111/  93282B : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  111/  93282F : 0000 0800                   dc.b $00,$00,$08,0
(1)  112/  932833 : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  112/  932833 : D1EF 0205                   dc.b $D0|%001,-17,((SMPINS_VCTRBRASS>>24)&$FF),((SMPINS_VCTRBRASS>>16)&$FF)
(1)  112/  932837 : 133C 0000                   dc.b ((SMPINS_VCTRBRASS>>8)&$FF),SMPINS_VCTRBRASS&$FF,0,0
(1)  113/  93283B :                     
(1)  114/  93283B :                     GemaTrk_blk_BeMine:
(1)  115/  93283B :                     	binclude "sound/tracks/bemine_blk.bin"
(1)  116/  93284C :                     GemaTrk_patt_BeMine:
(1)  117/  93284C :                     	binclude "sound/tracks/bemine_patt.bin"
(1)  118/  93393E :                     GemaTrk_ins_BeMine:
(1)  119/  93393E : (MACRO)             	gInsPwm -17,SmpIns_Bell_Ice,0
(1)  119/  93393E : D0EF 0205                   dc.b $D0|0,-17,((SMPINS_BELL_ICE>>24)&$FF),((SMPINS_BELL_ICE>>16)&$FF)
(1)  119/  933942 : 4224 0000                   dc.b ((SMPINS_BELL_ICE>>8)&$FF),SMPINS_BELL_ICE&$FF,0,0
(1)  120/  933946 : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Hi,%01
(1)  120/  933946 : D1EF 0205                   dc.b $D0|%01,-17,((SMPINS_BRASS1_HI>>24)&$FF),((SMPINS_BRASS1_HI>>16)&$FF)
(1)  120/  93394A : 7D50 0000                   dc.b ((SMPINS_BRASS1_HI>>8)&$FF),SMPINS_BRASS1_HI&$FF,0,0
(1)  121/  93394E : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Low,%01
(1)  121/  93394E : D1EF 0205                   dc.b $D0|%01,-17,((SMPINS_BRASS1_LOW>>24)&$FF),((SMPINS_BRASS1_LOW>>16)&$FF)
(1)  121/  933952 : F91C 0000                   dc.b ((SMPINS_BRASS1_LOW>>8)&$FF),SMPINS_BRASS1_LOW&$FF,0,0
(1)  122/  933956 : (MACRO)             	gInsFm  -24,FmIns_Bass_groove
(1)  122/  933956 : A0E8 92F4                   dc.b $A0,-24,((FMINS_BASS_GROOVE>>16)&$FF)|$90,((FMINS_BASS_GROOVE>>8)&$FF)
(1)  122/  93395A : FC00 0000                   dc.b FMINS_BASS_GROOVE&$FF,$00,$00,$00
(1)  123/  93395E : (MACRO)             	gInsFm3   0,FmIns_Fm3_OpenHat
(1)  123/  93395E : B000 92F3                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF)|$90,((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  123/  933962 : 4400 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  124/  933966 : (MACRO)             	gInsPwm -17,SmpIns_Snare_jam,0
(1)  124/  933966 : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_SNARE_JAM>>24)&$FF),((SMPINS_SNARE_JAM>>16)&$FF)
(1)  124/  93396A : C8A0 0000                   dc.b ((SMPINS_SNARE_JAM>>8)&$FF),SMPINS_SNARE_JAM&$FF,0,0
(1)  125/  93396E : (MACRO)             	gInsPwm -17,SmpIns_Kick_jam,0
(1)  125/  93396E : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_KICK_JAM>>24)&$FF),((SMPINS_KICK_JAM>>16)&$FF)
(1)  125/  933972 : BDD4 0000                   dc.b ((SMPINS_KICK_JAM>>8)&$FF),SMPINS_KICK_JAM&$FF,0,0
(1)  126/  933976 : (MACRO)             	gInsPwm -17,SmpIns_SnrTom_1,0
(1)  126/  933976 : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_SNRTOM_1>>24)&$FF),((SMPINS_SNRTOM_1>>16)&$FF)
(1)  126/  93397A : D20C 0000                   dc.b ((SMPINS_SNRTOM_1>>8)&$FF),SMPINS_SNRTOM_1&$FF,0,0
(1)  127/  93397E : (MACRO)             	gInsPwm -17,SmpIns_Forest_1,0
(1)  127/  93397E : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_FOREST_1>>24)&$FF),((SMPINS_FOREST_1>>16)&$FF)
(1)  127/  933982 : 74E8 0000                   dc.b ((SMPINS_FOREST_1>>8)&$FF),SMPINS_FOREST_1&$FF,0,0
(1)  128/  933986 : (MACRO)             	gInsNull
(1)  128/  933986 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  128/  93398A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  129/  93398E : (MACRO)             	gInsNull
(1)  129/  93398E : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  129/  933992 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  130/  933996 : (MACRO)             	gInsNull
(1)  130/  933996 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  130/  93399A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  131/  93399E : (MACRO)             	gInsNull
(1)  131/  93399E : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  131/  9339A2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  132/  9339A6 : (MACRO)             	gInsNull
(1)  132/  9339A6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  132/  9339AA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  133/  9339AE : (MACRO)             	gInsNull
(1)  133/  9339AE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  133/  9339B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  134/  9339B6 : (MACRO)             	gInsNull
(1)  134/  9339B6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  134/  9339BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  135/  9339BE : (MACRO)             	gInsNull
(1)  135/  9339BE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  135/  9339C2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  136/  9339C6 : (MACRO)             	gInsNull
(1)  136/  9339C6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  136/  9339CA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  137/  9339CE : (MACRO)             	gInsNull
(1)  137/  9339CE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  137/  9339D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  138/  9339D6 : (MACRO)             	gInsNull
(1)  138/  9339D6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  138/  9339DA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  139/  9339DE : (MACRO)             	gInsNull
(1)  139/  9339DE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  139/  9339E2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  140/  9339E6 : (MACRO)             	gInsNull
(1)  140/  9339E6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  140/  9339EA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  141/  9339EE : (MACRO)             	gInsNull
(1)  141/  9339EE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  141/  9339F2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  142/  9339F6 : (MACRO)             	gInsNull
(1)  142/  9339F6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  142/  9339FA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  143/  9339FE : (MACRO)             	gInsNull
(1)  143/  9339FE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  143/  933A02 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  144/  933A06 :                     
(1)  145/  933A06 :                     GemaTrk_blk_HILLS:
(1)  146/  933A06 :                     	binclude "sound/tracks/hill_blk.bin"
(1)  147/  933A12 :                     GemaTrk_patt_HILLS:
(1)  148/  933A12 :                     	binclude "sound/tracks/hill_patt.bin"
(1)  149/  934589 :                     GemaTrk_ins_HILLS:
(1)  150/  934589 : (MACRO)             	gInsPsg +2,$40,$02,$30,$10,$00
(1)  150/  934589 : 8002 4002                   dc.b $80,+2,$40,$02
(1)  150/  93458D : 3010 0000                   dc.b $30,$10,$00,$00
(1)  151/  934591 : (MACRO)             	gInsFm -10,FmIns_Trumpet_1
(1)  151/  934591 : A0F6 92F5                   dc.b $A0,-10,((FMINS_TRUMPET_1>>16)&$FF)|$90,((FMINS_TRUMPET_1>>8)&$FF)
(1)  151/  934595 : DC00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  152/  934599 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$04,%110
(1)  152/  934599 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  152/  93459D : 0000 0400                   dc.b $00,$00,$04,0
(1)  153/  9345A1 : (MACRO)             	gInsDac -3,DacIns_LowString,1;gInsPwm -8,DacIns_LowString,1
(1)  153/  9345A1 : C1FD 9267                   dc.b $C0|1,-3,((DACINS_LOWSTRING>>16)&$FF)|$90,((DACINS_LOWSTRING>>8)&$FF)
(1)  153/  9345A5 : B800 0000                   dc.b DACINS_LOWSTRING&$FF,0,0,0
(1)  154/  9345A9 : (MACRO)             	gInsFm -8-12,FmIns_Ding_Toy
(1)  154/  9345A9 : A0EC 92F6                   dc.b $A0,-8-12,((FMINS_DING_TOY>>16)&$FF)|$90,((FMINS_DING_TOY>>8)&$FF)
(1)  154/  9345AD : DC00 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  155/  9345B1 : (MACRO)             	gInsFm -25,FmIns_Bass_3
(1)  155/  9345B1 : A0E7 92F4                   dc.b $A0,-25,((FMINS_BASS_3>>16)&$FF)|$90,((FMINS_BASS_3>>8)&$FF)
(1)  155/  9345B5 : BC00 0000                   dc.b FMINS_BASS_3&$FF,$00,$00,$00
(1)  156/  9345B9 : (MACRO)             	gInsNull
(1)  156/  9345B9 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  156/  9345BD : 0000 0000                   dc.b $00,$00,$00,$00
(1)  157/  9345C1 : (MACRO)             	gInsNull
(1)  157/  9345C1 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  157/  9345C5 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  158/  9345C9 : (MACRO)             	gInsNull
(1)  158/  9345C9 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  158/  9345CD : 0000 0000                   dc.b $00,$00,$00,$00
(1)  159/  9345D1 : (MACRO)             	gInsNull
(1)  159/  9345D1 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  159/  9345D5 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  160/  9345D9 : (MACRO)             	gInsNull
(1)  160/  9345D9 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  160/  9345DD : 0000 0000                   dc.b $00,$00,$00,$00
(1)  161/  9345E1 : (MACRO)             	gInsNull
(1)  161/  9345E1 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  161/  9345E5 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  162/  9345E9 : (MACRO)             	gInsNull
(1)  162/  9345E9 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  162/  9345ED : 0000 0000                   dc.b $00,$00,$00,$00
(1)  163/  9345F1 :                     
      76/  9345F1 :                     		include "data/md_bank0.asm"
(1)    1/  9345F1 :                     ; ====================================================================
(1)    2/  9345F1 :                     ; ----------------------------------------------------------------
(1)    3/  9345F1 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/  9345F1 :                     ; for big stuff like maps, levels, etc.
(1)    5/  9345F1 :                     ;
(1)    6/  9345F1 :                     ; For graphics use DMA and place your files at
(1)    7/  9345F1 :                     ; md_dma.asm (Watch out for the $20000-section limit.)
(1)    8/  9345F1 :                     ;
(1)    9/  9345F1 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/  9345F1 :                     ; ----------------------------------------------------------------
(1)   11/  9345F1 :                     
(1)   12/  9345F1 :                     		align 2
(1)   13/  9345F2 :                     TESTMARS_BG_PAL:
(1)   14/  9345F2 :                     		binclude "data/mars/test_pal.bin"
(1)   15/  9346F2 :                     		binclude "data/mars/polygon/majo_pal.bin"
(1)   16/  9347F2 :                     		align 2
(1)   17/  9347F2 :                     MAP_FGTEST:	binclude "data/md/bg/fg_map.bin"
(1)   18/  934D32 :                     		align 2
(1)   19/  934D32 :                     MAP_BGTEST:	binclude "data/md/bg/bg_map.bin"
(1)   20/  935D32 :                     		align 2
(1)   21/  935D32 :                     
      77/   35D32 :                     		dephase
      78/   35D32 :                     ; 		org $100000-4				; Fill this bank and
      79/   35D32 :                     ; 		dc.b "BNK0"				; add a tag at the end
      80/   35D32 :                     
      81/   35D32 :                     ; 		phase $900000;+*
      82/   35D32 :                     ; 		include "data/md_bank1.asm"
      83/   35D32 :                     ; 		dephase
      84/   35D32 :                     ; 		org $200000-4
      85/   35D32 :                     ; 		dc.b "BNK1"
      86/   35D32 :                     
      87/   35D32 :                     ; 		phase $900000;+*
      88/   35D32 :                     ; 		include "data/md_bank2.asm"
      89/   35D32 :                     ; 		dephase
      90/   35D32 :                     ; 		org $300000-4
      91/   35D32 :                     ; 		dc.b "BNK2"
      92/   35D32 :                     
      93/   35D32 :                     ; 		phase $900000;+*
      94/   35D32 :                     ; 		include "data/md_bank3.asm"
      95/   35D32 :                     ; 		dephase
      96/   35D32 :                     ; 		org $400000-4
      97/   35D32 :                     ; 		dc.b "BNK3"
      98/   35D32 :                     
      99/   35D32 :                     ; ====================================================================
     100/   35D32 :                     ; ----------------------------------------------------------------
     101/   35D32 :                     ; MD DMA data, BANK-free but requres RV=1
     102/   35D32 :                     ; ----------------------------------------------------------------
     103/   35D32 :                     
     104/   35D32 :                     		align 4
     105/   35D34 :                     		include "data/md_dma.asm"
(1)    1/   35D34 :                     ; ====================================================================
(1)    2/   35D34 :                     ; ----------------------------------------------------------------
(1)    3/   35D34 :                     ; DMA ROM DATA Transfer section
(1)    4/   35D34 :                     ; 
(1)    5/   35D34 :                     ; RV bit must be enabled to read from here
(1)    6/   35D34 :                     ; ----------------------------------------------------------------
(1)    7/   35D34 :                     
(1)    8/   35D34 :                     		align $8000
(1)    9/   38000 :                     ART_BGTEST:	binclude "data/md/bg/bg_art.bin"
(1)   10/   38540 :                     ART_BGTEST_e:
(1)   11/   38540 :                     ART_FGTEST:	binclude "data/md/bg/fg_art.bin"
(1)   12/   3BC80 :                     ART_FGTEST_e:
(1)   13/   3BC80 :                     ART_EMI:	binclude "data/md/sprites/emi_art.bin"
(1)   14/   3DEE0 :                     ART_EMI_e:
(1)   15/   3DEE0 :                     
(1)   16/   3DEE0 :                     
     106/   3DEE0 :                     
     107/   3DEE0 :                     ; ====================================================================
     108/   3DEE0 :                     ; ----------------------------------------------------------------
     109/   3DEE0 :                     ; SH2 CODE
     110/   3DEE0 :                     ; ----------------------------------------------------------------
     111/   3DEE0 :                     
     112/   3DEE0 :                     		align 4
     113/   3DEE0 :                     MARS_RAMDATA:
     114/   3DEE0 :                     		include "system/mars/code.asm"
(1)    1/   3DEE0 :                     ; ====================================================================
(1)    2/   3DEE0 :                     ; ----------------------------------------------------------------
(1)    3/   3DEE0 :                     ; MARS SH2 Section
(1)    4/   3DEE0 :                     ;
(1)    5/   3DEE0 :                     ; CODE for both CPUs
(1)    6/   3DEE0 :                     ; RAM and some DATA go here
(1)    7/   3DEE0 :                     ; ----------------------------------------------------------------
(1)    8/   3DEE0 :                     
(1)    9/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   10/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   11/ 6000000 :                     
(1)   12/ 6000000 :                     ; ====================================================================
(1)   13/ 6000000 :                     ; ----------------------------------------------------------------
(1)   14/ 6000000 :                     ; User settings
(1)   15/ 6000000 :                     ; ----------------------------------------------------------------
(1)   16/ 6000000 :                     
(1)   17/ 6000000 :                     ; ----------------------------------------
(1)   18/ 6000000 :                     ; Normal sprite settings
(1)   19/ 6000000 :                     ; ----------------------------------------
(1)   20/ 6000000 :                     
(1)   21/ 6000000 : =$80                MAX_MSPR	equ	128	; Maximum sprites
(1)   22/ 6000000 :                     
(1)   23/ 6000000 :                     ; ====================================================================
(1)   24/ 6000000 :                     ; ----------------------------------------------------------------
(1)   25/ 6000000 :                     ; MARS DEFAULT gbr variables for both SH2
(1)   26/ 6000000 :                     ; ----------------------------------------------------------------
(1)   27/ 6000000 :                     
(1)   28/ 6000000 : (MACRO)             			struct 0
(1)   28/ 6000000 : =$6000000           GLBL_LASTPC     set *
(1)   28/   3DEE0 :                                     dephase
(1)   28/   3DEE0 : =$3DEE0             GLBL_LASTORG    set *
(1)   28/       0 :                                     phase 0
(1)   29/       0 :                     marsGbl_DreqRead	ds.l 1	; DREQ Read/Write pointers
(1)   30/       4 :                     marsGbl_DreqWrite	ds.l 1	; these get swapped on VBlank
(1)   31/       8 :                     marsGbl_PlyPzList_R	ds.l 1	; Current graphic piece to draw
(1)   32/       C :                     marsGbl_PlyPzList_W	ds.l 1	; Current graphic piece to write
(1)   33/      10 :                     marsGbl_CurrPlgn	ds.l 1	; Current polygon to slice
(1)   34/      14 :                     marsGbl_WdgMode		ds.w 1	; Current Watchdog task
(1)   35/      16 :                     marsGbl_GrphsCopy	ds.w 1	; Copy of graphics mode
(1)   36/      18 :                     marsGbl_PlyPzCntr	ds.w 1	; Number of graphic pieces to draw
(1)   37/      1A :                     marsGbl_PlgnCntr	ds.w 1	; Number of polygons to slice
(1)   38/      1C :                     marsGbl_DrwPause	ds.w 1	; Pause background drawing
(1)   39/      1E :                     marsGbl_DivStop_M	ds.w 1	; Flag to tell Watchdog we are in the middle of hardware division
(1)   40/      20 :                     marsGbl_XShift		ds.w 1	; Xshift bit at the start of master_loop (TODO: maybe a HBlank list?)
(1)   41/      22 :                     marsGbl_XPatch		ds.w 1	; Redraw counter for the $xxFF fix, set to 0 on X/Y change
(1)   42/      24 :                     marsGbl_CurrFb		ds.w 1	; Current framebuffer number (Note: it's a byte)
(1)   43/      26 :                     sizeof_MarsGbl		ds.l 0
(1)   44/      28 : (MACRO)             			finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/ 6000000 :                                     phase GLBL_LASTPC
(1)   45/ 6000000 :                     
(1)   46/ 6000000 :                     ; ====================================================================
(1)   47/ 6000000 :                     ; ----------------------------------------------------------------
(1)   48/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   49/ 6000000 :                     ; ----------------------------------------------------------------
(1)   50/ 6000000 :                     
(1)   51/ 6000000 :                     		align 4
(1)   52/ 6000000 :                     SH2_Master:
(1)   53/ 6000000 : 0600 109C 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Power PC, Stack
(1)   54/ 6000008 : 0600 109C 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Reset PC, Stack
(1)   55/ 6000010 :                     
(1)   56/ 6000010 : 0600 030C           		dc.l SH2_M_Error		; Illegal instruction
(1)   57/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   58/ 6000018 : 0600 030C           		dc.l SH2_M_Error		; Invalid slot instruction
(1)   59/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   60/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   61/ 6000024 : 0600 030C           		dc.l SH2_M_Error		; CPU address error
(1)   62/ 6000028 : 0600 030C           		dc.l SH2_M_Error		; DMA address error
(1)   63/ 600002C : 0600 030C           		dc.l SH2_M_Error		; NMI vector
(1)   64/ 6000030 : 0600 030C           		dc.l SH2_M_Error		; User break vector
(1)   65/ 6000034 :                     
(1)   66/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(1)   67/ 600005C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   68/ 6000080 :                     
(1)   69/ 6000080 : 0600 030C           		dc.l SH2_M_Error	; Trap user vectors
(1)   70/ 6000084 : 0600 030C           		dc.l SH2_M_Error
(1)   71/ 6000088 : 0600 030C           		dc.l SH2_M_Error
(1)   72/ 600008C : 0600 030C           		dc.l SH2_M_Error
(1)   73/ 6000090 : 0600 030C           		dc.l SH2_M_Error
(1)   74/ 6000094 : 0600 030C           		dc.l SH2_M_Error
(1)   75/ 6000098 : 0600 030C           		dc.l SH2_M_Error
(1)   76/ 600009C : 0600 030C           		dc.l SH2_M_Error
(1)   77/ 60000A0 : 0600 030C           		dc.l SH2_M_Error
(1)   78/ 60000A4 : 0600 030C           		dc.l SH2_M_Error
(1)   79/ 60000A8 : 0600 030C           		dc.l SH2_M_Error
(1)   80/ 60000AC : 0600 030C           		dc.l SH2_M_Error
(1)   81/ 60000B0 : 0600 030C           		dc.l SH2_M_Error
(1)   82/ 60000B4 : 0600 030C           		dc.l SH2_M_Error
(1)   83/ 60000B8 : 0600 030C           		dc.l SH2_M_Error
(1)   84/ 60000BC : 0600 030C           		dc.l SH2_M_Error
(1)   85/ 60000C0 : 0600 030C           		dc.l SH2_M_Error
(1)   86/ 60000C4 : 0600 030C           		dc.l SH2_M_Error
(1)   87/ 60000C8 : 0600 030C           		dc.l SH2_M_Error
(1)   88/ 60000CC : 0600 030C           		dc.l SH2_M_Error
(1)   89/ 60000D0 : 0600 030C           		dc.l SH2_M_Error
(1)   90/ 60000D4 : 0600 030C           		dc.l SH2_M_Error
(1)   91/ 60000D8 : 0600 030C           		dc.l SH2_M_Error
(1)   92/ 60000DC : 0600 030C           		dc.l SH2_M_Error
(1)   93/ 60000E0 : 0600 030C           		dc.l SH2_M_Error
(1)   94/ 60000E4 : 0600 030C           		dc.l SH2_M_Error
(1)   95/ 60000E8 : 0600 030C           		dc.l SH2_M_Error
(1)   96/ 60000EC : 0600 030C           		dc.l SH2_M_Error
(1)   97/ 60000F0 : 0600 030C           		dc.l SH2_M_Error
(1)   98/ 60000F4 : 0600 030C           		dc.l SH2_M_Error
(1)   99/ 60000F8 : 0600 030C           		dc.l SH2_M_Error
(1)  100/ 60000FC : 0600 030C           		dc.l SH2_M_Error
(1)  101/ 6000100 : 0600 0248            		dc.l master_irq		; Level 1 IRQ
(1)  102/ 6000104 : 0600 0248           		dc.l master_irq		; Level 2 & 3 IRQ
(1)  103/ 6000108 : 0600 0248           		dc.l master_irq		; Level 4 & 5 IRQ
(1)  104/ 600010C : 0600 0248           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  105/ 6000110 : 0600 0248           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  106/ 6000114 : 0600 0248           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  107/ 6000118 : 0600 0248           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  108/ 600011C : 0600 0248           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  109/ 6000120 :                     
(1)  110/ 6000120 :                     	; ON-chip interrupts go here (vbr+$120)
(1)  111/ 6000120 : 0600 0248           		dc.l master_irq		; Watchdog (custom)
(1)  112/ 6000124 :                     
(1)  113/ 6000124 :                     ; ====================================================================
(1)  114/ 6000124 :                     ; ----------------------------------------------------------------
(1)  115/ 6000124 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  116/ 6000124 :                     ; ----------------------------------------------------------------
(1)  117/ 6000124 :                     
(1)  118/ 6000124 :                     		align 4
(1)  119/ 6000124 :                     SH2_Slave:
(1)  120/ 6000124 : 0600 13D4 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Cold PC,SP
(1)  121/ 600012C : 0600 13D4 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Manual PC,SP
(1)  122/ 6000134 :                     
(1)  123/ 6000134 : 0600 033C           		dc.l SH2_S_Error			; Illegal instruction
(1)  124/ 6000138 : 0000 0000           		dc.l 0				; reserved
(1)  125/ 600013C : 0600 033C           		dc.l SH2_S_Error			; Invalid slot instruction
(1)  126/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(1)  127/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(1)  128/ 6000148 : 0600 033C           		dc.l SH2_S_Error			; CPU address error
(1)  129/ 600014C : 0600 033C           		dc.l SH2_S_Error			; DMA address error
(1)  130/ 6000150 : 0600 033C           		dc.l SH2_S_Error			; NMI vector
(1)  131/ 6000154 : 0600 033C           		dc.l SH2_S_Error			; User break vector
(1)  132/ 6000158 :                     
(1)  133/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0,0	; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
(1)  134/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  135/ 60001A4 :                     
(1)  136/ 60001A4 : 0600 033C           		dc.l SH2_S_Error			; Trap user vectors
(1)  137/ 60001A8 : 0600 033C           		dc.l SH2_S_Error
(1)  138/ 60001AC : 0600 033C           		dc.l SH2_S_Error
(1)  139/ 60001B0 : 0600 033C           		dc.l SH2_S_Error
(1)  140/ 60001B4 : 0600 033C           		dc.l SH2_S_Error
(1)  141/ 60001B8 : 0600 033C           		dc.l SH2_S_Error
(1)  142/ 60001BC : 0600 033C           		dc.l SH2_S_Error
(1)  143/ 60001C0 : 0600 033C           		dc.l SH2_S_Error
(1)  144/ 60001C4 : 0600 033C           		dc.l SH2_S_Error
(1)  145/ 60001C8 : 0600 033C           		dc.l SH2_S_Error
(1)  146/ 60001CC : 0600 033C           		dc.l SH2_S_Error
(1)  147/ 60001D0 : 0600 033C           		dc.l SH2_S_Error
(1)  148/ 60001D4 : 0600 033C           		dc.l SH2_S_Error
(1)  149/ 60001D8 : 0600 033C           		dc.l SH2_S_Error
(1)  150/ 60001DC : 0600 033C           		dc.l SH2_S_Error
(1)  151/ 60001E0 : 0600 033C           		dc.l SH2_S_Error
(1)  152/ 60001E4 : 0600 033C           		dc.l SH2_S_Error
(1)  153/ 60001E8 : 0600 033C           		dc.l SH2_S_Error
(1)  154/ 60001EC : 0600 033C           		dc.l SH2_S_Error
(1)  155/ 60001F0 : 0600 033C           		dc.l SH2_S_Error
(1)  156/ 60001F4 : 0600 033C           		dc.l SH2_S_Error
(1)  157/ 60001F8 : 0600 033C           		dc.l SH2_S_Error
(1)  158/ 60001FC : 0600 033C           		dc.l SH2_S_Error
(1)  159/ 6000200 : 0600 033C           		dc.l SH2_S_Error
(1)  160/ 6000204 : 0600 033C           		dc.l SH2_S_Error
(1)  161/ 6000208 : 0600 033C           		dc.l SH2_S_Error
(1)  162/ 600020C : 0600 033C           		dc.l SH2_S_Error
(1)  163/ 6000210 : 0600 033C           		dc.l SH2_S_Error
(1)  164/ 6000214 : 0600 033C           		dc.l SH2_S_Error
(1)  165/ 6000218 : 0600 033C           		dc.l SH2_S_Error
(1)  166/ 600021C : 0600 033C           		dc.l SH2_S_Error
(1)  167/ 6000220 : 0600 033C           		dc.l SH2_S_Error
(1)  168/ 6000224 : 0600 02AC            		dc.l slave_irq			; Level 1 IRQ
(1)  169/ 6000228 : 0600 02AC           		dc.l slave_irq			; Level 2 & 3 IRQ
(1)  170/ 600022C : 0600 02AC           		dc.l slave_irq			; Level 4 & 5 IRQ
(1)  171/ 6000230 : 0600 02AC           		dc.l slave_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  172/ 6000234 : 0600 02AC           		dc.l slave_irq			; Level 8 & 9 IRQ: Command interupt
(1)  173/ 6000238 : 0600 02AC           		dc.l slave_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  174/ 600023C : 0600 02AC           		dc.l slave_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  175/ 6000240 : 0600 02AC           		dc.l slave_irq			; Level 14 & 15 IRQ: Reset Button
(1)  176/ 6000244 :                     
(1)  177/ 6000244 :                     	; ON-chip interrupts go here (vbr+$120)
(1)  178/ 6000244 : 0600 02AC           		dc.l slave_irq			; Watchdog (custom)
(1)  179/ 6000248 :                     
(1)  180/ 6000248 :                     ; ====================================================================
(1)  181/ 6000248 :                     ; ----------------------------------------------------------------
(1)  182/ 6000248 :                     ; irq
(1)  183/ 6000248 :                     ;
(1)  184/ 6000248 :                     ; r0-r1 are safe
(1)  185/ 6000248 :                     ; ----------------------------------------------------------------
(1)  186/ 6000248 :                     
(1)  187/ 6000248 :                     		align 4
(1)  188/ 6000248 :                     master_irq:
(1)  189/ 6000248 : 2F06                		mov.l	r0,@-r15
(1)  190/ 600024A : 2F16                		mov.l	r1,@-r15
(1)  191/ 600024C : 4F22                		sts.l	pr,@-r15
(1)  192/ 600024E :                     
(1)  193/ 600024E : 0002                		stc	sr,r0
(1)  194/ 6000250 : 4009                		shlr2	r0
(1)  195/ 6000252 : C93C                		and	#$3C,r0
(1)  196/ 6000254 : D104                		mov	#int_m_list,r1
(1)  197/ 6000256 : 301C                		add	r1,r0
(1)  198/ 6000258 : 6102                		mov	@r0,r1
(1)  199/ 600025A : 410B                		jsr	@r1
(1)  200/ 600025C : 0009                		nop
(1)  201/ 600025E :                     
(1)  202/ 600025E : 4F26                		lds.l	@r15+,pr
(1)  203/ 6000260 : 61F6                		mov.l	@r15+,r1
(1)  204/ 6000262 : 60F6                		mov.l	@r15+,r0
(1)  205/ 6000264 : 002B                		rte
(1)  206/ 6000266 : 0009                		nop
(1)  207/ 6000268 :                     		align 4
(1)  208/ 6000268 : 0600 026C           		ltorg
(1)  209/ 600026C :                     
(1)  210/ 600026C :                     ; ------------------------------------------------
(1)  211/ 600026C :                     ; irq list
(1)  212/ 600026C :                     ; ------------------------------------------------
(1)  213/ 600026C :                     
(1)  214/ 600026C :                     		align 4
(1)  215/ 600026C :                     int_m_list:
(1)  216/ 600026C : 0600 0348 0600 0348 		dc.l m_irq_bad,m_irq_bad
(1)  217/ 6000274 : 0600 0348 0600 0348 		dc.l m_irq_bad,m_irq_bad
(1)  218/ 600027C : 0600 0348 C000 0000 		dc.l m_irq_bad,m_irq_custom
(1)  219/ 6000284 : 0600 034C 0600 034C 		dc.l m_irq_pwm,m_irq_pwm
(1)  220/ 600028C : 0600 036C 0600 036C 		dc.l m_irq_cmd,m_irq_cmd
(1)  221/ 6000294 : 0600 03FA 0600 03FA 		dc.l m_irq_h,m_irq_h
(1)  222/ 600029C : 0600 0420 0600 0420 		dc.l m_irq_v,m_irq_v
(1)  223/ 60002A4 : 0600 0448 0600 0448 		dc.l m_irq_vres,m_irq_vres
(1)  224/ 60002AC :                     
(1)  225/ 60002AC :                     ; ====================================================================
(1)  226/ 60002AC :                     ; ----------------------------------------------------------------
(1)  227/ 60002AC :                     ; irq
(1)  228/ 60002AC :                     ;
(1)  229/ 60002AC :                     ; r0-r1 are safe
(1)  230/ 60002AC :                     ; ----------------------------------------------------------------
(1)  231/ 60002AC :                     
(1)  232/ 60002AC :                     slave_irq:
(1)  233/ 60002AC : 2F06                		mov.l	r0,@-r15
(1)  234/ 60002AE : 2F16                		mov.l	r1,@-r15
(1)  235/ 60002B0 : 4F22                		sts.l	pr,@-r15
(1)  236/ 60002B2 :                     
(1)  237/ 60002B2 : 0002                		stc	sr,r0
(1)  238/ 60002B4 : 4009                		shlr2	r0
(1)  239/ 60002B6 : C93C                		and	#$3C,r0
(1)  240/ 60002B8 : D143                		mov	#int_s_list,r1
(1)  241/ 60002BA : 301C                		add	r1,r0
(1)  242/ 60002BC : 6102                		mov	@r0,r1
(1)  243/ 60002BE : 410B                		jsr	@r1
(1)  244/ 60002C0 : 0009                		nop
(1)  245/ 60002C2 :                     
(1)  246/ 60002C2 : 4F26                		lds.l	@r15+,pr
(1)  247/ 60002C4 : 61F6                		mov.l	@r15+,r1
(1)  248/ 60002C6 : 60F6                		mov.l	@r15+,r0
(1)  249/ 60002C8 : 002B                		rte
(1)  250/ 60002CA : 0009                		nop
(1)  251/ 60002CC :                     		align 4
(1)  252/ 60002CC :                     
(1)  253/ 60002CC :                     ; ------------------------------------------------
(1)  254/ 60002CC :                     ; irq list
(1)  255/ 60002CC :                     ; ------------------------------------------------
(1)  256/ 60002CC :                     
(1)  257/ 60002CC :                     int_s_list:
(1)  258/ 60002CC : 0600 04BE 0600 04BE 		dc.l s_irq_bad,s_irq_bad
(1)  259/ 60002D4 : 0600 04BE 0600 04BE 		dc.l s_irq_bad,s_irq_bad
(1)  260/ 60002DC : 0600 04BE 0600 14E4 		dc.l s_irq_bad,s_irq_custom
(1)  261/ 60002E4 : 0600 04C4 0600 04C4 		dc.l s_irq_pwm,s_irq_pwm
(1)  262/ 60002EC : 0600 04EC 0600 04EC 		dc.l s_irq_cmd,s_irq_cmd
(1)  263/ 60002F4 : 0600 06B8 0600 06B8 		dc.l s_irq_h,s_irq_h
(1)  264/ 60002FC : 0600 06D8 0600 06D8 		dc.l s_irq_v,s_irq_v
(1)  265/ 6000304 : 0600 06F8 0600 06F8 		dc.l s_irq_vres,s_irq_vres
(1)  266/ 600030C :                     
(1)  267/ 600030C :                     ; ====================================================================
(1)  268/ 600030C :                     ; ----------------------------------------------------------------
(1)  269/ 600030C :                     ; Noraml error trap
(1)  270/ 600030C :                     ; ----------------------------------------------------------------
(1)  271/ 600030C :                     
(1)  272/ 600030C :                     ; Master only
(1)  273/ 600030C :                     SH2_M_Error:
(1)  274/ 600030C : D12F                		mov	#StrM_Oops,r1		; Print text on screen
(1)  275/ 600030E : E200                		mov	#0,r2
(1)  276/ 6000310 : B262                		bsr	MarsVdp_Print
(1)  277/ 6000312 : E300                		mov	#0,r3
(1)  278/ 6000314 : D12E                		mov	#_vdpreg,r1		; Show it on next FB
(1)  279/ 6000316 : 841B                		mov.b	@(framectl,r1),r0
(1)  280/ 6000318 : CA01                		xor	#1,r0
(1)  281/ 600031A : 801B                		mov.b	r0,@(framectl,r1)
(1)  282/ 600031C :                     
(1)  283/ 600031C : D12D                		mov	#_sysreg+comm14,r1
(1)  284/ 600031E : E0FF                		mov	#-1,r0
(1)  285/ 6000320 : 2100                		mov.b	r0,@r1
(1)  286/ 6000322 : 0009                .infin:		nop
(1)  287/ 6000324 : AFFD                		bra	.infin
(1)  288/ 6000326 : 0009                		nop
(1)  289/ 6000328 :                     		align 4
(1)  290/ 6000328 :                     StrM_Oops:
(1)  291/ 6000328 : 4572 726F 7220 6F6E 		dc.b "Error on MASTER CPU",0
                    204D 4153 5445 5220 
                    4350 5500           
(1)  292/ 600033C :                     		align 4
(1)  293/ 600033C :                     
(1)  294/ 600033C :                     ; Slave only
(1)  295/ 600033C :                     ; TODO: a way report that Slave failed
(1)  296/ 600033C :                     SH2_S_Error:
(1)  297/ 600033C : D126                		mov	#_sysreg+comm15,r1
(1)  298/ 600033E : E0FF                		mov	#-1,r0
(1)  299/ 6000340 : 2100                		mov.b	r0,@r1
(1)  300/ 6000342 : 0009                .infin:		nop
(1)  301/ 6000344 : AFFD                		bra	.infin
(1)  302/ 6000346 : 0009                		nop
(1)  303/ 6000348 :                     		align 4
(1)  304/ 6000348 :                     
(1)  305/ 6000348 :                     ; ====================================================================
(1)  306/ 6000348 :                     ; ----------------------------------------------------------------
(1)  307/ 6000348 :                     ; MARS Interrupts
(1)  308/ 6000348 :                     ; ----------------------------------------------------------------
(1)  309/ 6000348 :                     
(1)  310/ 6000348 :                     ; =================================================================
(1)  311/ 6000348 :                     ; ------------------------------------------------
(1)  312/ 6000348 :                     ; Master | Unused interrupt
(1)  313/ 6000348 :                     ; ------------------------------------------------
(1)  314/ 6000348 :                     
(1)  315/ 6000348 :                     m_irq_bad:
(1)  316/ 6000348 : 000B                		rts
(1)  317/ 600034A : 0009                		nop
(1)  318/ 600034C :                     		align 4
(1)  319/ 600034C :                     
(1)  320/ 600034C :                     ; =================================================================
(1)  321/ 600034C :                     ; ------------------------------------------------
(1)  322/ 600034C :                     ; Master | PWM Interrupt
(1)  323/ 600034C :                     ; ------------------------------------------------
(1)  324/ 600034C :                     
(1)  325/ 600034C :                     m_irq_pwm:
(1)  326/ 600034C : 904E                		mov	#$F0,r0
(1)  327/ 600034E : 400E                		ldc	r0,sr
(1)  328/ 6000350 : 914D                		mov	#_FRT,r1
(1)  329/ 6000352 : 8417                		mov.b	@(7,r1),r0
(1)  330/ 6000354 : CA02                		xor	#2,r0
(1)  331/ 6000356 : 8017                		mov.b	r0,@(7,r1)
(1)  332/ 6000358 : D120                		mov	#_sysreg+pwmintclr,r1
(1)  333/ 600035A : 2101                		mov.w	r0,@r1
(1)  334/ 600035C : 0009                		nop
(1)  335/ 600035E : 0009                		nop
(1)  336/ 6000360 : 0009                		nop
(1)  337/ 6000362 : 0009                		nop
(1)  338/ 6000364 : 0009                		nop
(1)  339/ 6000366 : 000B                		rts
(1)  340/ 6000368 : 0009                		nop
(1)  341/ 600036A :                     		align 4
(1)  342/ 600036C :                     
(1)  343/ 600036C :                     ; =================================================================
(1)  344/ 600036C :                     ; ------------------------------------------------
(1)  345/ 600036C :                     ; Master | CMD Interrupt
(1)  346/ 600036C :                     ; ------------------------------------------------
(1)  347/ 600036C :                     
(1)  348/ 600036C :                     m_irq_cmd:
(1)  349/ 600036C : 903E                		mov	#$F0,r0
(1)  350/ 600036E : 400E                		ldc	r0,sr
(1)  351/ 6000370 : 913D                		mov	#_FRT,r1
(1)  352/ 6000372 : 8417                		mov.b	@(7,r1),r0
(1)  353/ 6000374 : CA02                		xor	#2,r0
(1)  354/ 6000376 : 8017                		mov.b	r0,@(7,r1)
(1)  355/ 6000378 : D119                		mov	#_sysreg+cmdintclr,r1
(1)  356/ 600037A : 2101                		mov.w	r0,@r1
(1)  357/ 600037C : 2F26                		mov	r2,@-r15
(1)  358/ 600037E : 2F36                		mov	r3,@-r15
(1)  359/ 6000380 : 2F46                		mov	r4,@-r15
(1)  360/ 6000382 : D418                		mov	#_sysreg,r4
(1)  361/ 6000384 : E380                		mov	#_DMASOURCE0,r3
(1)  362/ 6000386 : D213                		mov	#_sysreg+comm14,r2
(1)  363/ 6000388 : 9032                		mov	#%0100010011100000,r0		; Transfer mode (DMA enable bit is 0)
(1)  364/ 600038A : 1303                		mov	r0,@($C,r3)
(1)  365/ 600038C : D116                		mov	#_sysreg+dreqfifo,r1
(1)  366/ 600038E : C601                		mov	@(marsGbl_DreqWrite,gbr),r0
(1)  367/ 6000390 : 2312                		mov	r1,@r3				; Source
(1)  368/ 6000392 : 1301                		mov	r0,@(4,r3)			; Destination
(1)  369/ 6000394 : 8548                		mov.w	@(dreqlen,r4),r0
(1)  370/ 6000396 : 1302                		mov	r0,@(8,r3)			; Length
(1)  371/ 6000398 : 912B                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(1)  372/ 600039A : 902B                		mov.w   #$A518,r0
(1)  373/ 600039C : 2101                		mov.w   r0,@r1
(1)  374/ 600039E : 6020                		mov.b	@r2,r0
(1)  375/ 60003A0 : CB80                		or	#%10000000,r0			; Tell Genesis we are few instructions away from
(1)  376/ 60003A2 : 2200                		mov.b	r0,@r2				; reading the DREQ FIFO port
(1)  377/ 60003A4 : 5033                		mov	@($C,r3),r0			; (?)
(1)  378/ 60003A6 : 9026                		mov	#%0100010011100001,r0		; Transfer mode + DMA enable
(1)  379/ 60003A8 : 1303                		mov	r0,@($C,r3)			; Dest:Fwd(01) Src:Stay(00) Size:Word(01)
(1)  380/ 60003AA : E001                		mov	#1,r0				; _DMAOPERATION = 1
(1)  381/ 60003AC : 130C                		mov	r0,@($30,r3)
(1)  382/ 60003AE : 9120                		mov.l   #$FFFFFE80,r1			; Start watchdog
(1)  383/ 60003B0 : 9022                		mov.w   #$A518|$20,r0
(1)  384/ 60003B2 : 2101                		mov.w   r0,@r1
(1)  385/ 60003B4 : 64F6                		mov	@r15+,r4
(1)  386/ 60003B6 : 63F6                		mov	@r15+,r3
(1)  387/ 60003B8 : 62F6                		mov	@r15+,r2
(1)  388/ 60003BA : 0009                		nop
(1)  389/ 60003BC : 0009                		nop
(1)  390/ 60003BE : 0009                		nop
(1)  391/ 60003C0 : 0009                		nop
(1)  392/ 60003C2 : 0009                		nop
(1)  393/ 60003C4 : 000B                		rts
(1)  394/ 60003C6 : 0009                		nop
(1)  395/ 60003C8 :                     		align 4
(1)  396/ 60003C8 : 0600 02CC 0600 0328 		ltorg
                    2000 4100 2000 402E 
                    2000 402F 2000 401C 
                    2000 401A 2000 4000 
                    2000 4012 00F0 FE10 
                    44E0 FE80 A518 44E1 
                    A538                
(1)  397/ 60003FA :                     
(1)  398/ 60003FA :                     ; =================================================================
(1)  399/ 60003FA :                     ; ------------------------------------------------
(1)  400/ 60003FA :                     ; Master | HBlank
(1)  401/ 60003FA :                     ; ------------------------------------------------
(1)  402/ 60003FA :                     
(1)  403/ 60003FA :                     m_irq_h:
(1)  404/ 60003FA : 900F                		mov	#$F0,r0
(1)  405/ 60003FC : 400E                		ldc	r0,sr
(1)  406/ 60003FE : 910E                		mov	#_FRT,r1
(1)  407/ 6000400 : 8417                		mov.b	@(7,r1),r0
(1)  408/ 6000402 : CA02                		xor	#2,r0
(1)  409/ 6000404 : 8017                		mov.b	r0,@(7,r1)
(1)  410/ 6000406 : D104                		mov	#_sysreg+hintclr,r1
(1)  411/ 6000408 : 2101                		mov.w	r0,@r1
(1)  412/ 600040A : 0009                		nop
(1)  413/ 600040C : 0009                		nop
(1)  414/ 600040E : 0009                		nop
(1)  415/ 6000410 : 0009                		nop
(1)  416/ 6000412 : 0009                		nop
(1)  417/ 6000414 : 000B                		rts
(1)  418/ 6000416 : 0009                		nop
(1)  419/ 6000418 :                     		align 4
(1)  420/ 6000418 : 2000 4018 00F0 FE10 		ltorg
(1)  421/ 6000420 :                     
(1)  422/ 6000420 :                     ; =================================================================
(1)  423/ 6000420 :                     ; ------------------------------------------------
(1)  424/ 6000420 :                     ; Master | VBlank
(1)  425/ 6000420 :                     ; ------------------------------------------------
(1)  426/ 6000420 :                     
(1)  427/ 6000420 :                     m_irq_v:
(1)  428/ 6000420 : 9010                		mov	#$F0,r0
(1)  429/ 6000422 : 400E                		ldc	r0,sr
(1)  430/ 6000424 : 910F                		mov	#_FRT,r1
(1)  431/ 6000426 : 8417                		mov.b	@(7,r1),r0
(1)  432/ 6000428 : CA02                		xor	#2,r0
(1)  433/ 600042A : 8017                		mov.b	r0,@(7,r1)
(1)  434/ 600042C : D104                		mov	#_sysreg+vintclr,r1
(1)  435/ 600042E : 2101                		mov.w	r0,@r1
(1)  436/ 6000430 : 0009                		nop
(1)  437/ 6000432 : 0009                		nop
(1)  438/ 6000434 : 0009                		nop
(1)  439/ 6000436 : 0009                		nop
(1)  440/ 6000438 : 0009                		nop
(1)  441/ 600043A : 000B                		rts
(1)  442/ 600043C : 0009                		nop
(1)  443/ 600043E :                     		align 4
(1)  444/ 6000440 : 2000 4016 00F0 FE10 		ltorg
(1)  445/ 6000448 :                     
(1)  446/ 6000448 :                     ; =================================================================
(1)  447/ 6000448 :                     ; ------------------------------------------------
(1)  448/ 6000448 :                     ; Master | VRES Interrupt (RESET on Genesis)
(1)  449/ 6000448 :                     ; ------------------------------------------------
(1)  450/ 6000448 :                     
(1)  451/ 6000448 :                     m_irq_vres:
(1)  452/ 6000448 : 9034                		mov	#$F0,r0
(1)  453/ 600044A : 400E                		ldc	r0,sr
(1)  454/ 600044C : D013                		mov.l	#_sysreg,r0
(1)  455/ 600044E : 401E                		ldc	r0,gbr
(1)  456/ 6000450 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  457/ 6000452 :                     
(1)  458/ 6000452 :                     	; TODO: Checar bien esto.
(1)  459/ 6000452 :                     	; Ya no se traba mucho como antes pero
(1)  460/ 6000452 :                     	; igual por si el USER resetea a lo wey.
(1)  461/ 6000452 :                     	;
(1)  462/ 6000452 :                     	; Mismo para SLAVE
(1)  463/ 6000452 : C407                		mov.b	@(dreqctl,gbr),r0
(1)  464/ 6000454 : C801                		tst	#1,r0
(1)  465/ 6000456 : 8B1B                		bf	.mars_reset
(1)  466/ 6000458 :                     .md_reset:
(1)  467/ 6000458 : D111                		mov.l	#"68UP",r1		; wait for the 68K to show up
(1)  468/ 600045A : C60B                		mov.l	@(comm12,gbr),r0
(1)  469/ 600045C : 3100                		cmp/eq	r0,r1
(1)  470/ 600045E : 8BFB                		bf	.md_reset
(1)  471/ 6000460 :                     .sh_wait:
(1)  472/ 6000460 : D110                		mov.l	#"S_OK",r1		; wait for the Slave CPU to show up
(1)  473/ 6000462 : C609                		mov.l	@(comm4,gbr),r0
(1)  474/ 6000464 : 3100                		cmp/eq	r0,r1
(1)  475/ 6000466 : 8BFB                		bf	.sh_wait
(1)  476/ 6000468 : D00F                		mov.l	#"M_OK",r0		; let the others know master ready
(1)  477/ 600046A : C208                		mov.l	r0,@(comm0,gbr)
(1)  478/ 600046C : 9123                		mov.l   #$FFFFFE80,r1		; Stop watchdog
(1)  479/ 600046E : 9023                		mov.w   #$A518,r0
(1)  480/ 6000470 : 2101                		mov.w   r0,@r1
(1)  481/ 6000472 :                     
(1)  482/ 6000472 : DF0E                		mov.l	#CS3|$40000-8,r15	; Set reset values
(1)  483/ 6000474 : D00E                		mov.l	#SH2_M_HotStart,r0
(1)  484/ 6000476 : 2F02                		mov.l	r0,@r15
(1)  485/ 6000478 : 901C                		mov.w	#$F0,r0
(1)  486/ 600047A : 1F01                		mov.l	r0,@(4,r15)
(1)  487/ 600047C : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  488/ 600047E : E000                		mov.l	#0,r0
(1)  489/ 6000480 : 2102                		mov.l	r0,@r1			; Turn any DMA tasks OFF
(1)  490/ 6000482 : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  491/ 6000484 : E000                		mov.l	#0,r0
(1)  492/ 6000486 : 2102                		mov.l	r0,@r1
(1)  493/ 6000488 : 9117                		mov.l	#%0100010011100000,r1
(1)  494/ 600048A : 2102                		mov.l	r0,@r1			; Channel control
(1)  495/ 600048C : 002B                		rte
(1)  496/ 600048E : 0009                		nop
(1)  497/ 6000490 :                     .mars_reset:
(1)  498/ 6000490 : 9114                		mov	#_FRT,r1
(1)  499/ 6000492 : 8417                		mov.b	@(_TOCR,r1),r0
(1)  500/ 6000494 : CB01                		or	#$01,r0
(1)  501/ 6000496 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  502/ 6000498 :                     .vresloop:
(1)  503/ 6000498 : AFFE                		bra	.vresloop
(1)  504/ 600049A : 0009                		nop
(1)  505/ 600049C :                     		align 4
(1)  506/ 600049C : 2000 4000 3638 5550 		ltorg			; Save MASTER IRQ literals here
                    535F 4F4B 4D5F 4F4B 
                    0603 FFF8 0600 10E2 
                    00F0 FE80 A518 44E0 
                    FE10                
(1)  507/ 60004BE :                     
(1)  508/ 60004BE :                     ; =================================================================
(1)  509/ 60004BE :                     ; ------------------------------------------------
(1)  510/ 60004BE :                     ; Slave | Unused Interrupt
(1)  511/ 60004BE :                     ; ------------------------------------------------
(1)  512/ 60004BE :                     
(1)  513/ 60004BE :                     s_irq_bad:
(1)  514/ 60004BE : 000B                		rts
(1)  515/ 60004C0 : 0009                		nop
(1)  516/ 60004C2 :                     		align 4
(1)  517/ 60004C4 :                     
(1)  518/ 60004C4 :                     ; =================================================================
(1)  519/ 60004C4 :                     ; ------------------------------------------------
(1)  520/ 60004C4 :                     ; Slave | PWM Interrupt
(1)  521/ 60004C4 :                     ; ------------------------------------------------
(1)  522/ 60004C4 :                     
(1)  523/ 60004C4 :                     s_irq_pwm:
(1)  524/ 60004C4 : 90F4                		mov	#$F0,r0
(1)  525/ 60004C6 : 400E                		ldc	r0,sr
(1)  526/ 60004C8 : 91F3                		mov	#_FRT,r1
(1)  527/ 60004CA : 8417                		mov.b	@(7,r1),r0
(1)  528/ 60004CC : CA02                		xor	#2,r0
(1)  529/ 60004CE : 8017                		mov.b	r0,@(7,r1)
(1)  530/ 60004D0 : D16B                		mov	#_sysreg+pwmintclr,r1
(1)  531/ 60004D2 : 2101                		mov.w	r0,@r1
(1)  532/ 60004D4 :                     
(1)  533/ 60004D4 : D16B                		mov	#_sysreg+monowidth,r1
(1)  534/ 60004D6 : 6010                		mov.b	@r1,r0
(1)  535/ 60004D8 : C880                 		tst	#$80,r0
(1)  536/ 60004DA : 8B04                 		bf	.exit
(1)  537/ 60004DC : 4F22                		sts	pr,@-r15
(1)  538/ 60004DE : D06A                		mov	#MarsSound_ReadPwm,r0
(1)  539/ 60004E0 : 400B                		jsr	@r0
(1)  540/ 60004E2 : 0009                		nop
(1)  541/ 60004E4 : 4F26                		lds	@r15+,pr
(1)  542/ 60004E6 :                     .exit:
(1)  543/ 60004E6 : 000B                		rts
(1)  544/ 60004E8 : 0009                		nop
(1)  545/ 60004EA :                     		align 4
(1)  546/ 60004EC :                     
(1)  547/ 60004EC :                     ; =================================================================
(1)  548/ 60004EC :                     ; ------------------------------------------------
(1)  549/ 60004EC :                     ; Slave | CMD Interrupt
(1)  550/ 60004EC :                     ; ------------------------------------------------
(1)  551/ 60004EC :                     
(1)  552/ 60004EC :                     s_irq_cmd:
(1)  553/ 60004EC : 90E0                		mov	#$F0,r0
(1)  554/ 60004EE : 400E                		ldc	r0,sr
(1)  555/ 60004F0 : 91DF                		mov	#_FRT,r1
(1)  556/ 60004F2 : 8417                		mov.b	@(7,r1),r0
(1)  557/ 60004F4 : CA02                		xor	#2,r0
(1)  558/ 60004F6 : 8017                		mov.b	r0,@(7,r1)
(1)  559/ 60004F8 : D164                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  560/ 60004FA : 2101                		mov.w	r0,@r1
(1)  561/ 60004FC :                     
(1)  562/ 60004FC : 2F26                		mov	r2,@-r15
(1)  563/ 60004FE : 2F36                		mov	r3,@-r15
(1)  564/ 6000500 : 2F46                		mov	r4,@-r15
(1)  565/ 6000502 : 2F56                		mov	r5,@-r15
(1)  566/ 6000504 : 2F66                		mov	r6,@-r15
(1)  567/ 6000506 : 2F76                		mov	r7,@-r15
(1)  568/ 6000508 : 2F86                		mov	r8,@-r15
(1)  569/ 600050A : 2F96                		mov	r9,@-r15
(1)  570/ 600050C : 2FA6                		mov	r10,@-r15
(1)  571/ 600050E : 2FB6                		mov	r11,@-r15
(1)  572/ 6000510 : 2FC6                		mov	r12,@-r15
(1)  573/ 6000512 : 2FD6                		mov	r13,@-r15
(1)  574/ 6000514 : 2FE6                		mov	r14,@-r15
(1)  575/ 6000516 : 4F12                		sts	macl,@-r15
(1)  576/ 6000518 : 4F02                		sts	mach,@-r15
(1)  577/ 600051A : 4F22                		sts	pr,@-r15
(1)  578/ 600051C :                     
(1)  579/ 600051C : D45C                		mov	#_sysreg+comm15,r4	; control comm
(1)  580/ 600051E : D25D                		mov	#MarsSnd_PwmControl,r2
(1)  581/ 6000520 : E304                		mov	#4,r3			; number of passes (hard-coded, check Z80)
(1)  582/ 6000522 :                     .wait_1:
(1)  583/ 6000522 : 0009                		nop
(1)  584/ 6000524 : 0009                		nop
(1)  585/ 6000526 : 6040                		mov.b	@r4,r0			; wait first CLOCK
(1)  586/ 6000528 : C980                		and	#%10000000,r0		; from Z80
(1)  587/ 600052A : 2008                		tst	r0,r0
(1)  588/ 600052C : 89F9                		bt	.wait_1
(1)  589/ 600052E : E607                		mov	#7,r6
(1)  590/ 6000530 : D559                		mov	#_sysreg+comm0,r5
(1)  591/ 6000532 :                     .copy_1:
(1)  592/ 6000532 : 6055                		mov.w	@r5+,r0
(1)  593/ 6000534 : 2201                		mov.w	r0,@r2
(1)  594/ 6000536 : 4610                		dt	r6
(1)  595/ 6000538 : 8FFB                		bf/s	.copy_1
(1)  596/ 600053A : 7202                		add	#2,r2
(1)  597/ 600053C : 6040                		mov.b	@r4,r0			; tell Z80 CLK finished
(1)  598/ 600053E : C97F                		and	#%01111111,r0
(1)  599/ 6000540 : 2400                		mov.b	r0,@r4
(1)  600/ 6000542 : 4310                		dt	r3
(1)  601/ 6000544 : 8BED                		bf	.wait_1
(1)  602/ 6000546 :                     	; ---------------------------------
(1)  603/ 6000546 :                     	; *** GEMA PWM DRIVER ***
(1)  604/ 6000546 :                     	; ---------------------------------
(1)  605/ 6000546 : E100                		mov	#0,r1				; r1 - Current PWM slot
(1)  606/ 6000548 : DE54                		mov	#MarsSnd_PwmControl,r14
(1)  607/ 600054A : 9AB3                		mov	#MAX_PWMCHNL,r10
(1)  608/ 600054C :                     .next_chnl:
(1)  609/ 600054C : 60E0                		mov.b	@r14,r0
(1)  610/ 600054E : C9FF                		and	#$FF,r0
(1)  611/ 6000550 : 8800                		cmp/eq	#0,r0
(1)  612/ 6000552 : 8976                		bt	.no_req
(1)  613/ 6000554 : 2DDA                		xor	r13,r13
(1)  614/ 6000556 : 2ED0                		mov.b	r13,@r14
(1)  615/ 6000558 : 6703                		mov	r0,r7
(1)  616/ 600055A : C907                		and	#%111,r0
(1)  617/ 600055C : 8804                		cmp/eq	#4,r0
(1)  618/ 600055E : 8901                		bt	.pwm_keycut
(1)  619/ 6000560 : 8802                		cmp/eq	#2,r0
(1)  620/ 6000562 : 8B05                		bf	.no_keyoff
(1)  621/ 6000564 :                     .pwm_keycut:
(1)  622/ 6000564 : E200                		mov	#0,r2
(1)  623/ 6000566 : D04E                		mov	#MarsSound_PwmEnable,r0
(1)  624/ 6000568 : 400B                		jsr	@r0
(1)  625/ 600056A : 0009                		nop
(1)  626/ 600056C : A069                		bra	.no_req
(1)  627/ 600056E : 0009                		nop
(1)  628/ 6000570 :                     	; Normal playback
(1)  629/ 6000570 :                     .no_keyoff:
(1)  630/ 6000570 : 6073                		mov	r7,r0
(1)  631/ 6000572 : C810                		tst	#$10,r0
(1)  632/ 6000574 : 890E                		bt	.no_pitchbnd
(1)  633/ 6000576 : 6DE3                		mov	r14,r13
(1)  634/ 6000578 : 7D08                		add	#8,r13		; skip COM
(1)  635/ 600057A : 60D0                		mov.b	@r13,r0		; r2 - Get pitch MSB bits
(1)  636/ 600057C : 7D08                		add	#8,r13
(1)  637/ 600057E : C903                		and	#%11,r0
(1)  638/ 6000580 : 4018                		shll8	r0
(1)  639/ 6000582 : 6203                		mov	r0,r2
(1)  640/ 6000584 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  641/ 6000586 : 7D08                		add	#8,r13
(1)  642/ 6000588 : C9FF                		and	#$FF,r0
(1)  643/ 600058A : 202B                		or	r2,r0
(1)  644/ 600058C : 6203                		mov	r0,r2
(1)  645/ 600058E : D045                		mov	#MarsSound_SetPwmPitch,r0
(1)  646/ 6000590 : 400B                		jsr	@r0
(1)  647/ 6000592 : 0009                		nop
(1)  648/ 6000594 :                     .no_pitchbnd:
(1)  649/ 6000594 : 6073                		mov	r7,r0
(1)  650/ 6000596 : C820                		tst	#$20,r0
(1)  651/ 6000598 : 8908                		bt	.no_volumebnd
(1)  652/ 600059A : 6703                		mov	r0,r7
(1)  653/ 600059C : 6DE3                		mov	r14,r13
(1)  654/ 600059E : 7D08                		add	#8,r13		; point to volume values
(1)  655/ 60005A0 : 60D0                		mov.b	@r13,r0
(1)  656/ 60005A2 : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  657/ 60005A4 : 6203                		mov	r0,r2
(1)  658/ 60005A6 : D040                		mov	#MarsSound_SetVolume,r0
(1)  659/ 60005A8 : 400B                		jsr	@r0
(1)  660/ 60005AA : 0009                		nop
(1)  661/ 60005AC :                     .no_volumebnd:
(1)  662/ 60005AC : 6073                		mov	r7,r0
(1)  663/ 60005AE : C801                		tst	#$01,r0		; key-on?
(1)  664/ 60005B0 : 8947                		bt	.no_req
(1)  665/ 60005B2 : 6DE3                		mov	r14,r13
(1)  666/ 60005B4 : 7D08                		add	#8,r13		; skip COM
(1)  667/ 60005B6 : 60D0                		mov.b	@r13,r0
(1)  668/ 60005B8 : 7D08                		add	#8,r13
(1)  669/ 60005BA : 6503                		mov	r0,r5
(1)  670/ 60005BC : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  671/ 60005BE : 6603                		mov	r0,r6		; r6 - Volume
(1)  672/ 60005C0 : 6053                		mov	r5,r0		; r5 - Get pitch MSB bits
(1)  673/ 60005C2 : C903                		and	#%00000011,r0
(1)  674/ 60005C4 : 4018                		shll8	r0
(1)  675/ 60005C6 : 6503                		mov	r0,r5
(1)  676/ 60005C8 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  677/ 60005CA : 7D08                		add	#8,r13
(1)  678/ 60005CC : C9FF                		and	#$FF,r0
(1)  679/ 60005CE : 205B                		or	r5,r0
(1)  680/ 60005D0 : 6503                		mov	r0,r5
(1)  681/ 60005D2 : 60D0                		mov.b	@r13,r0		; flags | SH2 BANK
(1)  682/ 60005D4 : 7D08                		add	#8,r13
(1)  683/ 60005D6 : 6703                		mov	r0,r7		; r7 - Flags
(1)  684/ 60005D8 : C90F                		and	#%1111,r0
(1)  685/ 60005DA : 6803                		mov	r0,r8		; r8 - SH2 section (ROM or SDRAM)
(1)  686/ 60005DC : 4828                		shll16	r8
(1)  687/ 60005DE : 4818                		shll8	r8
(1)  688/ 60005E0 : 4709                		shlr2	r7
(1)  689/ 60005E2 : 4709                		shlr2	r7
(1)  690/ 60005E4 : 60D0                		mov.b	@r13,r0		; r2 - START point
(1)  691/ 60005E6 : 7D08                		add	#8,r13
(1)  692/ 60005E8 : C9FF                		and	#$FF,r0
(1)  693/ 60005EA : 4028                		shll16	r0
(1)  694/ 60005EC : 6303                		mov	r0,r3
(1)  695/ 60005EE : 60D0                		mov.b	@r13,r0
(1)  696/ 60005F0 : 7D08                		add	#8,r13
(1)  697/ 60005F2 : C9FF                		and	#$FF,r0
(1)  698/ 60005F4 : 4018                		shll8	r0
(1)  699/ 60005F6 : 6203                		mov	r0,r2
(1)  700/ 60005F8 : 60D0                		mov.b	@r13,r0
(1)  701/ 60005FA : 7D08                		add	#8,r13
(1)  702/ 60005FC : C9FF                		and	#$FF,r0
(1)  703/ 60005FE : 203B                		or	r3,r0
(1)  704/ 6000600 : 202B                		or	r2,r0
(1)  705/ 6000602 : 6203                		mov	r0,r2
(1)  706/ 6000604 : 6423                		mov	r2,r4		; r4 - START copy
(1)  707/ 6000606 : 228B                		or	r8,r2		; add CS2
(1)  708/ 6000608 : 6024                		mov.b	@r2+,r0		; r3 - Length
(1)  709/ 600060A : C9FF                		and	#$FF,r0
(1)  710/ 600060C : 6303                		mov	r0,r3
(1)  711/ 600060E : 6024                		mov.b	@r2+,r0
(1)  712/ 6000610 : C9FF                		and	#$FF,r0
(1)  713/ 6000612 : 4018                		shll8	r0
(1)  714/ 6000614 : 230B                		or	r0,r3
(1)  715/ 6000616 : 6024                		mov.b	@r2+,r0
(1)  716/ 6000618 : C9FF                		and	#$FF,r0
(1)  717/ 600061A : 4028                		shll16	r0
(1)  718/ 600061C : 230B                		or	r0,r3
(1)  719/ 600061E : 334C                		add	r4,r3		; add end+start
(1)  720/ 6000620 : 238B                		or	r8,r3		; add CS2
(1)  721/ 6000622 : 6024                		mov.b	@r2+,r0		; get loop point
(1)  722/ 6000624 : C9FF                		and	#$FF,r0
(1)  723/ 6000626 : 6403                		mov	r0,r4
(1)  724/ 6000628 : 6024                		mov.b	@r2+,r0
(1)  725/ 600062A : C9FF                		and	#$FF,r0
(1)  726/ 600062C : 4018                		shll8	r0
(1)  727/ 600062E : 240B                		or	r0,r4
(1)  728/ 6000630 : 6024                		mov.b	@r2+,r0
(1)  729/ 6000632 : C9FF                		and	#$FF,r0
(1)  730/ 6000634 : 4028                		shll16	r0
(1)  731/ 6000636 : 240B                		or	r0,r4
(1)  732/ 6000638 : 903D                		mov	#%11111100,r0
(1)  733/ 600063A : 2809                		and	r0,r8
(1)  734/ 600063C : D01B                		mov	#MarsSound_SetPwm,r0
(1)  735/ 600063E : 400B                		jsr	@r0
(1)  736/ 6000640 : 0009                		nop
(1)  737/ 6000642 :                     .no_req:
(1)  738/ 6000642 : 7101                		add	#1,r1		; next PWM slot
(1)  739/ 6000644 : 4A10                		dt	r10
(1)  740/ 6000646 : 8F81                		bf/s	.next_chnl
(1)  741/ 6000648 : 7E01                		add	#1,r14		; next PWM entry
(1)  742/ 600064A : D111                		mov	#_sysreg+comm15,r1
(1)  743/ 600064C : 6010                		mov.b	@r1,r0		; Now we are free.
(1)  744/ 600064E : C97F                		and	#%01111111,r0
(1)  745/ 6000650 : 2100                		mov.b	r0,@r1
(1)  746/ 6000652 :                     .no_ztrnsfr:
(1)  747/ 6000652 :                     
(1)  748/ 6000652 :                     ; 	; ---------------------------------
(1)  749/ 6000652 :                     ; 	; PWM wave backup Enter/Exit bits
(1)  750/ 6000652 :                     ; 	;
(1)  751/ 6000652 :                     ; 	; In case Genesis side wants
(1)  752/ 6000652 :                     ; 	; to do it's DMA
(1)  753/ 6000652 :                     ; 	; ---------------------------------
(1)  754/ 6000652 :                     ;
(1)  755/ 6000652 :                     ; 		mov	#_sysreg+comm15,r9	; ENTER
(1)  756/ 6000652 :                     ; 		mov.b	@r9,r0
(1)  757/ 6000652 :                     ; 		and	#%00100000,r0
(1)  758/ 6000652 :                     ; 		cmp/eq	#%00100000,r0
(1)  759/ 6000652 :                     ; 		bf	.refill_in
(1)  760/ 6000652 :                     ; 		mov	#MarsSnd_Refill,r0
(1)  761/ 6000652 :                     ; 		jsr	@r0
(1)  762/ 6000652 :                     ; 		nop
(1)  763/ 6000652 :                     ; 		mov	#MarsSnd_RvMode,r1	; Set backup-playback flag
(1)  764/ 6000652 :                     ; 		mov	#1,r0
(1)  765/ 6000652 :                     ; 		mov	r0,@r1
(1)  766/ 6000652 :                     ; 		mov.b	@r9,r0			; Refill is ready.
(1)  767/ 6000652 :                     ; 		and	#%11011111,r0
(1)  768/ 6000652 :                     ; 		mov.b	r0,@r9
(1)  769/ 6000652 :                     ; .refill_in:
(1)  770/ 6000652 :                     ; 		mov	#_sysreg+comm15,r9	; EXIT
(1)  771/ 6000652 :                     ; 		mov.b	@r9,r0
(1)  772/ 6000652 :                     ; 		and	#%00010000,r0
(1)  773/ 6000652 :                     ; 		cmp/eq	#%00010000,r0
(1)  774/ 6000652 :                     ; 		bf	.refill_out
(1)  775/ 6000652 :                     ; 		mov	#MarsSnd_RvMode,r1	; Clear backup-playback flag
(1)  776/ 6000652 :                     ; 		mov	#0,r0
(1)  777/ 6000652 :                     ; 		mov	r0,@r1
(1)  778/ 6000652 :                     ; 		mov.b	@r9,r0
(1)  779/ 6000652 :                     ; 		and	#%11101111,r0
(1)  780/ 6000652 :                     ; 		mov.b	r0,@r9
(1)  781/ 6000652 :                     ; .refill_out:
(1)  782/ 6000652 :                     
(1)  783/ 6000652 :                     	; ---------------------------------
(1)  784/ 6000652 :                     	; *** END of PWM driver for GEMA
(1)  785/ 6000652 :                     	; ---------------------------------
(1)  786/ 6000652 :                     
(1)  787/ 6000652 : 4F26                		lds	@r15+,pr
(1)  788/ 6000654 : 4F06                		lds	@r15+,mach
(1)  789/ 6000656 : 4F16                		lds	@r15+,macl
(1)  790/ 6000658 : 6EF6                		mov	@r15+,r14
(1)  791/ 600065A : 6DF6                		mov	@r15+,r13
(1)  792/ 600065C : 6CF6                		mov	@r15+,r12
(1)  793/ 600065E : 6BF6                		mov	@r15+,r11
(1)  794/ 6000660 : 6AF6                		mov	@r15+,r10
(1)  795/ 6000662 : 69F6                		mov	@r15+,r9
(1)  796/ 6000664 : 68F6                		mov	@r15+,r8
(1)  797/ 6000666 : 67F6                		mov	@r15+,r7
(1)  798/ 6000668 : 66F6                		mov	@r15+,r6
(1)  799/ 600066A : 65F6                		mov	@r15+,r5
(1)  800/ 600066C : 64F6                		mov	@r15+,r4
(1)  801/ 600066E : 63F6                		mov	@r15+,r3
(1)  802/ 6000670 : 62F6                		mov	@r15+,r2
(1)  803/ 6000672 :                     
(1)  804/ 6000672 : 0009                		nop
(1)  805/ 6000674 : 0009                		nop
(1)  806/ 6000676 : 0009                		nop
(1)  807/ 6000678 : 0009                		nop
(1)  808/ 600067A : 0009                		nop
(1)  809/ 600067C : 000B                		rts
(1)  810/ 600067E : 0009                		nop
(1)  811/ 6000680 :                     		align 4
(1)  812/ 6000680 : 2000 401C 2000 4038 		ltorg
                    C000 04D0 2000 401A 
                    2000 402F C000 0498 
                    2000 4020 C000 0498 
                    0600 100C 0600 0FDC 
                    0600 0FF4 0600 0FA0 
                    00F0 FE10 0007 00FC 
(1)  813/ 60006B8 :                     
(1)  814/ 60006B8 :                     ; =================================================================
(1)  815/ 60006B8 :                     ; ------------------------------------------------
(1)  816/ 60006B8 :                     ; Slave | HBlank
(1)  817/ 60006B8 :                     ; ------------------------------------------------
(1)  818/ 60006B8 :                     
(1)  819/ 60006B8 :                     s_irq_h:
(1)  820/ 60006B8 : 9056                		mov	#$F0,r0
(1)  821/ 60006BA : 400E                		ldc	r0,sr
(1)  822/ 60006BC : 9155                		mov	#_FRT,r1
(1)  823/ 60006BE : 8417                		mov.b	@(7,r1),r0
(1)  824/ 60006C0 : CA02                		xor	#2,r0
(1)  825/ 60006C2 : 8017                		mov.b	r0,@(7,r1)
(1)  826/ 60006C4 : D120                		mov	#_sysreg+hintclr,r1
(1)  827/ 60006C6 : 2101                		mov.w	r0,@r1
(1)  828/ 60006C8 : 0009                		nop
(1)  829/ 60006CA : 0009                		nop
(1)  830/ 60006CC : 0009                		nop
(1)  831/ 60006CE : 0009                		nop
(1)  832/ 60006D0 : 0009                		nop
(1)  833/ 60006D2 : 000B                		rts
(1)  834/ 60006D4 : 0009                		nop
(1)  835/ 60006D6 :                     		align 4
(1)  836/ 60006D8 :                     
(1)  837/ 60006D8 :                     ; =================================================================
(1)  838/ 60006D8 :                     ; ------------------------------------------------
(1)  839/ 60006D8 :                     ; Slave | VBlank
(1)  840/ 60006D8 :                     ; ------------------------------------------------
(1)  841/ 60006D8 :                     
(1)  842/ 60006D8 :                     s_irq_v:
(1)  843/ 60006D8 : 9046                		mov	#$F0,r0
(1)  844/ 60006DA : 400E                		ldc	r0,sr
(1)  845/ 60006DC : 9145                		mov	#_FRT,r1
(1)  846/ 60006DE : 8417                		mov.b	@(7,r1),r0
(1)  847/ 60006E0 : CA02                		xor	#2,r0
(1)  848/ 60006E2 : 8017                		mov.b	r0,@(7,r1)
(1)  849/ 60006E4 : D119                		mov	#_sysreg+vintclr,r1
(1)  850/ 60006E6 : 2101                		mov.w	r0,@r1
(1)  851/ 60006E8 : 0009                		nop
(1)  852/ 60006EA : 0009                		nop
(1)  853/ 60006EC : 0009                		nop
(1)  854/ 60006EE : 0009                		nop
(1)  855/ 60006F0 : 0009                		nop
(1)  856/ 60006F2 : 000B                		rts
(1)  857/ 60006F4 : 0009                		nop
(1)  858/ 60006F6 :                     		align 4
(1)  859/ 60006F8 :                     
(1)  860/ 60006F8 :                     ; =================================================================
(1)  861/ 60006F8 :                     ; ------------------------------------------------
(1)  862/ 60006F8 :                     ; Slave | VRES Interrupt (Pressed RESET on Genesis)
(1)  863/ 60006F8 :                     ; ------------------------------------------------
(1)  864/ 60006F8 :                     
(1)  865/ 60006F8 :                     s_irq_vres:
(1)  866/ 60006F8 : 9036                		mov	#$F0,r0
(1)  867/ 60006FA : 400E                		ldc	r0,sr
(1)  868/ 60006FC : D014                		mov.l	#_sysreg,r0
(1)  869/ 60006FE : 401E                		ldc	r0,gbr
(1)  870/ 6000700 : C10A                		mov.w	r0,@(vresintclr,gbr)	; V interrupt clear
(1)  871/ 6000702 : C407                		mov.b	@(dreqctl,gbr),r0
(1)  872/ 6000704 : C801                		tst	#1,r0
(1)  873/ 6000706 : 8B18                		bf	.mars_reset
(1)  874/ 6000708 :                     .md_reset:
(1)  875/ 6000708 : D112                		mov.l	#"68UP",r1		; wait for the 68k to show up
(1)  876/ 600070A : C60B                		mov.l	@(comm12,gbr),r0
(1)  877/ 600070C : 3100                		cmp/eq	r0,r1
(1)  878/ 600070E : 8BFB                		bf	.md_reset
(1)  879/ 6000710 : D011                		mov.l	#"S_OK",r0		; tell the others slave is ready
(1)  880/ 6000712 : C209                		mov.l	r0,@(comm4,gbr)
(1)  881/ 6000714 :                     .sh_wait:
(1)  882/ 6000714 : D111                		mov.l	#"M_OK",r1		; wait for the slave to show up
(1)  883/ 6000716 : C608                		mov.l	@(comm0,gbr),r0
(1)  884/ 6000718 : 3100                		cmp/eq	r0,r1
(1)  885/ 600071A : 8BFB                		bf	.sh_wait
(1)  886/ 600071C : DF10                		mov.l	#CS3|$3F000-8,r15
(1)  887/ 600071E : D011                		mov.l	#SH2_S_HotStart,r0
(1)  888/ 6000720 : 2F02                		mov.l	r0,@r15
(1)  889/ 6000722 : 9021                		mov.w	#$F0,r0
(1)  890/ 6000724 : 1F01                		mov.l	r0,@(4,r15)
(1)  891/ 6000726 : E1B0                		mov.l	#_DMAOPERATION,r1
(1)  892/ 6000728 : E000                		mov.l	#0,r0
(1)  893/ 600072A : 2102                		mov.l	r0,@r1			; DMA off
(1)  894/ 600072C : E18C                		mov.l	#_DMACHANNEL0,r1
(1)  895/ 600072E : E000                		mov.l	#0,r0
(1)  896/ 6000730 : 2102                		mov.l	r0,@r1
(1)  897/ 6000732 : 911B                		mov.l	#%0100010011100000,r1
(1)  898/ 6000734 : 2102                		mov.l	r0,@r1			; Channel control
(1)  899/ 6000736 : 002B                		rte
(1)  900/ 6000738 : 0009                		nop
(1)  901/ 600073A :                     .mars_reset:
(1)  902/ 600073A : 9116                		mov	#_FRT,r1
(1)  903/ 600073C : 8417                		mov.b	@(_TOCR,r1),r0
(1)  904/ 600073E : CB01                		or	#$01,r0
(1)  905/ 6000740 : 8017                		mov.b	r0,@(_TOCR,r1)
(1)  906/ 6000742 :                     .vresloop:
(1)  907/ 6000742 : AFFE                		bra	.vresloop
(1)  908/ 6000744 : 0009                		nop
(1)  909/ 6000746 :                     		align 4
(1)  910/ 6000748 : 2000 4018 2000 4016 		ltorg			; Save Slave IRQ literals
                    2000 4000 3638 5550 
                    535F 4F4B 4D5F 4F4B 
                    0603 EFF8 0600 1410 
                    00F0 FE10 44E0      
(1)  911/ 600076E :                     
(1)  912/ 600076E :                     ; ====================================================================
(1)  913/ 600076E :                     ; ----------------------------------------------------------------
(1)  914/ 600076E :                     ; MARS System features
(1)  915/ 600076E :                     ; ----------------------------------------------------------------
(1)  916/ 600076E :                     
(1)  917/ 600076E :                     		include "system/mars/video.asm"
(2)    1/ 600076E :                     ; ====================================================================
(2)    2/ 600076E :                     ; ----------------------------------------------------------------
(2)    3/ 600076E :                     ; MARS Video section
(2)    4/ 600076E :                     ; ----------------------------------------------------------------
(2)    5/ 600076E :                     
(2)    6/ 600076E :                     ; ----------------------------------------
(2)    7/ 600076E :                     ; Settings
(2)    8/ 600076E :                     ; ----------------------------------------
(2)    9/ 600076E :                     
(2)   10/ 600076E : =$80                NUM_POLYGONS	equ 128
(2)   11/ 600076E : =$1D000             FBVRAM_PATCH	equ $1D000			; Framebuffer location for the affected XShift lines
(2)   12/ 600076E :                     
(2)   13/ 600076E :                     ; ----------------------------------------
(2)   14/ 600076E :                     ; Variables
(2)   15/ 600076E :                     ; ----------------------------------------
(2)   16/ 600076E :                     
(2)   17/ 600076E :                     ; 3D drawing area, affects 3D positions too.
(2)   18/ 600076E : =$140               SCREEN_WIDTH	equ 320
(2)   19/ 600076E : =$E0                SCREEN_HEIGHT	equ 224
(2)   20/ 600076E :                     
(2)   21/ 600076E :                     ; MSB
(2)   22/ 600076E : =$80                PLGN_TEXURE	equ %10000000
(2)   23/ 600076E : =$40                PLGN_TRI	equ %01000000
(2)   24/ 600076E :                     
(2)   25/ 600076E :                     ; ----------------------------------------
(2)   26/ 600076E :                     ; Structs
(2)   27/ 600076E :                     ; ----------------------------------------
(2)   28/ 600076E :                     
(2)   29/ 600076E :                     ; Be careful modifing these...
(2)   30/ 600076E :                     ; The SH2 has limitation with indexing, bytes go first.
(2)   31/ 600076E :                     ; (dont forget to align it)
(2)   32/ 600076E :                     
(2)   33/ 600076E : (MACRO)             		struct 0
(2)   33/ 600076E : =$600076E           GLBL_LASTPC     set *
(2)   33/   3E64E :                                     dephase
(2)   33/   3E64E : =$3E64E             GLBL_LASTORG    set *
(2)   33/       0 :                                     phase 0
(2)   34/       0 :                     mbg_redraw	ds.b 1
(2)   35/       1 :                     mbg_flags	ds.b 1		; Current type of pixel-data: Indexed or Direct
(2)   36/       2 :                     mbg_xset	ds.b 1		; X-counter
(2)   37/       3 :                     mbg_yset	ds.b 1		; Y-counter
(2)   38/       4 :                     mbg_xpos_old	ds.w 1
(2)   39/       6 :                     mbg_ypos_old	ds.w 1
(2)   40/       8 :                     mbg_xinc_l	ds.w 1
(2)   41/       A :                     mbg_xinc_r	ds.w 1
(2)   42/       C :                     mbg_yinc_u	ds.w 1
(2)   43/       E :                     mbg_yinc_d	ds.w 1
(2)   44/      10 :                     mbg_width	ds.w 1
(2)   45/      12 :                     mbg_height	ds.w 1
(2)   46/      14 :                     mbg_yfb		ds.w 1		; TOP Y position, multiply by WIDTH externally
(2)   47/      16 :                     mbg_intrl_blk	ds.w 1		; Block size
(2)   48/      18 :                     mbg_intrl_w	ds.w 1		; Internal scrolling Width (MUST be larger than 320)
(2)   49/      1A :                     mbg_intrl_h	ds.w 1		; Internal scrolling Height
(2)   50/      1C :                     mbg_intrl_size	ds.l 1		;
(2)   51/      20 :                     mbg_data	ds.l 1
(2)   52/      24 :                     mbg_fbpos	ds.l 1		; Framebuffer TOPLEFT position
(2)   53/      28 :                     mbg_fbdata	ds.l 1		; Pixeldata location on Framebuffer
(2)   54/      2C :                     mbg_rfill	ds.l 1		; Refill buffer
(2)   55/      30 :                     mbg_indxinc	ds.l 1		; Index increment (NOTE: for all 4 pixels)
(2)   56/      34 :                     mbg_xpos	ds.l 1		; 0000.0000
(2)   57/      38 :                     mbg_ypos	ds.l 1		; 0000.0000
(2)   58/      3C :                     sizeof_marsbg	ds.l 0
(2)   59/      3E : (MACRO)             		finish
(2)   59/       0 :                                     !org GLBL_LASTORG
(2)   59/ 600076E :                                     phase GLBL_LASTPC
(2)   60/ 600076E :                     
(2)   61/ 600076E :                     ; ----------------------------------------
(2)   62/ 600076E :                     
(2)   63/ 600076E :                     ; model objects
(2)   64/ 600076E : (MACRO)             		struct 0
(2)   64/ 600076E : =$600076E           GLBL_LASTPC     set *
(2)   64/   3E64E :                                     dephase
(2)   64/   3E64E : =$3E64E             GLBL_LASTORG    set *
(2)   64/       0 :                                     phase 0
(2)   65/       0 :                     mdl_data	ds.l 1			; Model data pointer, if zero: no model
(2)   66/       4 :                     mdl_option	ds.l 1			; Model options: pixelvalue add
(2)   67/       8 :                     mdl_x_pos	ds.l 1			; X position $000000.00
(2)   68/       C :                     mdl_y_pos	ds.l 1			; Y position $000000.00
(2)   69/      10 :                     mdl_z_pos	ds.l 1			; Z position $000000.00
(2)   70/      14 :                     mdl_x_rot	ds.l 1			; X rotation $000000.00
(2)   71/      18 :                     mdl_y_rot	ds.l 1			; Y rotation $000000.00
(2)   72/      1C :                     mdl_z_rot	ds.l 1			; Z rotation $000000.00
(2)   73/      20 :                     mdl_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   74/      24 :                     mdl_animframe	ds.l 1			; Current frame in animation
(2)   75/      28 :                     mdl_animtimer	ds.l 1			; Animation timer
(2)   76/      2C :                     mdl_animspd	ds.l 1			; Animation USER speed setting
(2)   77/      30 :                     sizeof_mdlobj	ds.l 0
(2)   78/      32 : (MACRO)             		finish
(2)   78/       0 :                                     !org GLBL_LASTORG
(2)   78/ 600076E :                                     phase GLBL_LASTPC
(2)   79/ 600076E :                     
(2)   80/ 600076E :                     ; field view camera
(2)   81/ 600076E :                     ; 		struct 0
(2)   82/ 600076E :                     ; cam_x_pos	ds.l 1			; X position $000000.00
(2)   83/ 600076E :                     ; cam_y_pos	ds.l 1			; Y position $000000.00
(2)   84/ 600076E :                     ; cam_z_pos	ds.l 1			; Z position $000000.00
(2)   85/ 600076E :                     ; cam_x_rot	ds.l 1			; X rotation $000000.00
(2)   86/ 600076E :                     ; cam_y_rot	ds.l 1			; Y rotation $000000.00
(2)   87/ 600076E :                     ; cam_z_rot	ds.l 1			; Z rotation $000000.00
(2)   88/ 600076E :                     ; cam_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   89/ 600076E :                     ; cam_animframe	ds.l 1			; Current frame in animation
(2)   90/ 600076E :                     ; cam_animtimer	ds.l 1			; Animation timer
(2)   91/ 600076E :                     ; cam_animspd	ds.l 1			; Animation speed
(2)   92/ 600076E :                     ; sizeof_camera	ds.l 0
(2)   93/ 600076E :                     ; 		finish
(2)   94/ 600076E :                     
(2)   95/ 600076E :                     ; 		struct 0
(2)   96/ 600076E :                     ; mdllay_data	ds.l 1			; Model layout data, zero: Don't use layout
(2)   97/ 600076E :                     ; mdllay_x	ds.l 1			; X position
(2)   98/ 600076E :                     ; mdllay_y	ds.l 1			; Y position
(2)   99/ 600076E :                     ; mdllay_z	ds.l 1			; Z position
(2)  100/ 600076E :                     ; mdllay_x_last	ds.l 1			; LAST saved X position
(2)  101/ 600076E :                     ; mdllay_y_last	ds.l 1			; LAST saved Y position
(2)  102/ 600076E :                     ; mdllay_z_last	ds.l 1			; LAST saved Z position
(2)  103/ 600076E :                     ; mdllay_xr_last	ds.l 1			; LAST saved X rotation
(2)  104/ 600076E :                     ; sizeof_layout	ds.l 0
(2)  105/ 600076E :                     ; 		finish
(2)  106/ 600076E :                     
(2)  107/ 600076E : (MACRO)             		struct 0
(2)  107/ 600076E : =$600076E           GLBL_LASTPC     set *
(2)  107/   3E64E :                                     dephase
(2)  107/   3E64E : =$3E64E             GLBL_LASTORG    set *
(2)  107/       0 :                                     phase 0
(2)  108/       0 :                     plypz_type	ds.l 1			; Type | Option
(2)  109/       4 :                     plypz_mtrl	ds.l 1
(2)  110/       8 :                     plypz_ypos	ds.l 1			; Ytop | Ybottom
(2)  111/       C :                     plypz_xl	ds.l 1
(2)  112/      10 :                     plypz_xl_dx	ds.l 1
(2)  113/      14 :                     plypz_xr	ds.l 1
(2)  114/      18 :                     plypz_xr_dx	ds.l 1
(2)  115/      1C :                     plypz_src_xl	ds.l 1
(2)  116/      20 :                     plypz_src_xl_dx	ds.l 1
(2)  117/      24 :                     plypz_src_yl	ds.l 1
(2)  118/      28 :                     plypz_src_yl_dx	ds.l 1
(2)  119/      2C :                     plypz_src_xr	ds.l 1
(2)  120/      30 :                     plypz_src_xr_dx	ds.l 1
(2)  121/      34 :                     plypz_src_yr	ds.l 1
(2)  122/      38 :                     plypz_src_yr_dx	ds.l 1
(2)  123/      3C :                     sizeof_plypz	ds.l 0
(2)  124/      3E : (MACRO)             		finish
(2)  124/       0 :                                     !org GLBL_LASTORG
(2)  124/ 600076E :                                     phase GLBL_LASTPC
(2)  125/ 600076E :                     
(2)  126/ 600076E :                     ; $38 bytes
(2)  127/ 600076E : (MACRO)             		struct 0
(2)  127/ 600076E : =$600076E           GLBL_LASTPC     set *
(2)  127/   3E64E :                                     dephase
(2)  127/   3E64E : =$3E64E             GLBL_LASTORG    set *
(2)  127/       0 :                                     phase 0
(2)  128/       0 :                     polygn_type	ds.l 1		; %MSTw wwww xxxx aaaa | Type bits and Material option (Width or PalIncr)
(2)  129/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)  130/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)  131/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points (16-bit), ignored on solidcolor
(2)  132/      38 :                     sizeof_polygn	ds.l 0
(2)  133/      3A : (MACRO)             		finish
(2)  133/       0 :                                     !org GLBL_LASTORG
(2)  133/ 600076E :                                     phase GLBL_LASTPC
(2)  134/ 600076E :                     
(2)  135/ 600076E :                     ; ====================================================================
(2)  136/ 600076E :                     ; ----------------------------------------------------------------
(2)  137/ 600076E :                     ; Init MARS Video
(2)  138/ 600076E :                     ; ----------------------------------------------------------------
(2)  139/ 600076E :                     
(2)  140/ 600076E :                     MarsVideo_Init:
(2)  141/ 600076E : 4F22                		sts	pr,@-r15
(2)  142/ 6000770 : D113                		mov	#_sysreg,r1
(2)  143/ 6000772 : 902F                		mov 	#FM,r0			; Set SVDP permission to SH2, but the Genesis
(2)  144/ 6000774 : 8010                  		mov.b	r0,@(adapter,r1)	; will control the pallete using DREQ
(2)  145/ 6000776 : D113                		mov 	#_vdpreg,r1
(2)  146/ 6000778 : E000                		mov	#0,r0			; Start at blank
(2)  147/ 600077A : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)  148/ 600077C : D212                		mov	#_framebuffer,r2	; Make null nametables
(2)  149/ 600077E : B00F                		bsr	.def_fb
(2)  150/ 6000780 : 0009                		nop
(2)  151/ 6000782 : B00D                		bsr	.def_fb
(2)  152/ 6000784 : 0009                		nop
(2)  153/ 6000786 :                     
(2)  154/ 6000786 :                     	; Clear values
(2)  155/ 6000786 :                     	; TODO: checar bien esto porque se rompe en RESET
(2)  156/ 6000786 : D111                		mov	#RAM_Mars_Background,r1
(2)  157/ 6000788 : E000                		mov	#0,r0
(2)  158/ 600078A : 1108                		mov	r0,@(mbg_data,r1)
(2)  159/ 600078C : 110D                		mov	r0,@(mbg_xpos,r1)
(2)  160/ 600078E : 110E                		mov	r0,@(mbg_ypos,r1)
(2)  161/ 6000790 : 8112                		mov.w	r0,@(mbg_xpos_old,r1)
(2)  162/ 6000792 : 8113                		mov.w	r0,@(mbg_ypos_old,r1)
(2)  163/ 6000794 : 8012                		mov.b	r0,@(mbg_xset,r1)
(2)  164/ 6000796 : 8013                		mov.b	r0,@(mbg_yset,r1)
(2)  165/ 6000798 : 4F26                		lds	@r15+,pr
(2)  166/ 600079A : 000B                		rts
(2)  167/ 600079C : 0009                		nop
(2)  168/ 600079E :                     		align 4
(2)  169/ 60007A0 :                     
(2)  170/ 60007A0 :                     ; Default linetable
(2)  171/ 60007A0 :                     .def_fb:
(2)  172/ 60007A0 : 6323                		mov	r2,r3
(2)  173/ 60007A2 : D00B                		mov	#$1FD80/2,r0		; very last usable (blank) line
(2)  174/ 60007A4 : 9417                		mov	#240,r4
(2)  175/ 60007A6 :                     .nxt_lne:
(2)  176/ 60007A6 : 2301                		mov.w	r0,@r3
(2)  177/ 60007A8 : 4410                		dt	r4
(2)  178/ 60007AA : 8FFC                		bf/s	.nxt_lne
(2)  179/ 60007AC : 7302                		add	#2,r3
(2)  180/ 60007AE : 841B                		mov.b	@(framectl,r1),r0	; Frameswap & wait
(2)  181/ 60007B0 : CA01                		xor	#1,r0
(2)  182/ 60007B2 : 6303                		mov	r0,r3
(2)  183/ 60007B4 : 801B                		mov.b	r0,@(framectl,r1)
(2)  184/ 60007B6 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0
(2)  185/ 60007B8 : 3300                		cmp/eq	r0,r3
(2)  186/ 60007BA : 8BFC                		bf	.wait_frm
(2)  187/ 60007BC : 000B                		rts
(2)  188/ 60007BE : 0009                		nop
(2)  189/ 60007C0 :                     		align 4
(2)  190/ 60007C0 :                     
(2)  191/ 60007C0 : 2000 4000 2000 4100 		ltorg
                    0400 0000 0600 6298 
                    0000 FEC0 0080 00F0 
(2)  192/ 60007D8 :                     
(2)  193/ 60007D8 :                     ; ====================================================================
(2)  194/ 60007D8 :                     ; ----------------------------------------------------------------
(2)  195/ 60007D8 :                     ; Default subroutines
(2)  196/ 60007D8 :                     ; ----------------------------------------------------------------
(2)  197/ 60007D8 :                     
(2)  198/ 60007D8 :                     ; ------------------------------------
(2)  199/ 60007D8 :                     ; MarsVdp_LoadPal
(2)  200/ 60007D8 :                     ;
(2)  201/ 60007D8 :                     ; Load palette to RAM
(2)  202/ 60007D8 :                     ; then the Palette will be transfered
(2)  203/ 60007D8 :                     ; on VBlank
(2)  204/ 60007D8 :                     ;
(2)  205/ 60007D8 :                     ; Input:
(2)  206/ 60007D8 :                     ; r1 - Palette data
(2)  207/ 60007D8 :                     ; r2 - Start index
(2)  208/ 60007D8 :                     ; r3 - Number of colors
(2)  209/ 60007D8 :                     ; r4 - OR value ($0000 or $8000)
(2)  210/ 60007D8 :                     ;
(2)  211/ 60007D8 :                     ; Uses:
(2)  212/ 60007D8 :                     ; r0,r4-r6
(2)  213/ 60007D8 :                     ; ------------------------------------
(2)  214/ 60007D8 :                     
(2)  215/ 60007D8 :                     ; MarsVideo_LoadPal:
(2)  216/ 60007D8 :                     ; ; 		mov.w	@(marsGbl_PalDmaMidWr,gbr),r0
(2)  217/ 60007D8 :                     ; ; 		cmp/eq	#1,r0
(2)  218/ 60007D8 :                     ; ; 		bt	MarsVideo_LoadPal
(2)  219/ 60007D8 :                     ; 		mov 	r1,r5
(2)  220/ 60007D8 :                     ; 		mov 	#RAM_Mars_Palette,r6
(2)  221/ 60007D8 :                     ; 		mov 	r2,r0
(2)  222/ 60007D8 :                     ; 		shll	r0
(2)  223/ 60007D8 :                     ; 		add 	r0,r6
(2)  224/ 60007D8 :                     ; 		mov 	r3,r0
(2)  225/ 60007D8 :                     ; ; 		and	#$FF,r0
(2)  226/ 60007D8 :                     ; ; 		cmp/pl	r0
(2)  227/ 60007D8 :                     ; ; 		bf	.badlen
(2)  228/ 60007D8 :                     ; 		mov	#256,r7
(2)  229/ 60007D8 :                     ; 		cmp/gt	r7,r0
(2)  230/ 60007D8 :                     ; 		bt	.loop
(2)  231/ 60007D8 :                     ; 		mov	r0,r7
(2)  232/ 60007D8 :                     ; .loop:
(2)  233/ 60007D8 :                     ; 		mov.w	@r5+,r0
(2)  234/ 60007D8 :                     ; 		or	r4,r0
(2)  235/ 60007D8 :                     ; 		mov.w	r0,@r6
(2)  236/ 60007D8 :                     ; 		dt	r7
(2)  237/ 60007D8 :                     ; 		bf/s	.loop
(2)  238/ 60007D8 :                     ; 		add 	#2,r6
(2)  239/ 60007D8 :                     ; .badlen:
(2)  240/ 60007D8 :                     ; 		mov	#RAM_Mars_Palette,r1	; lazy fix
(2)  241/ 60007D8 :                     ; 		mov.w	@r1,r0			; for background
(2)  242/ 60007D8 :                     ; 		mov	#$7FFF,r2
(2)  243/ 60007D8 :                     ; 		and	r2,r0
(2)  244/ 60007D8 :                     ; 		mov.w	r0,@r1
(2)  245/ 60007D8 :                     ; 		rts
(2)  246/ 60007D8 :                     ; 		nop
(2)  247/ 60007D8 :                     ; 		align 4
(2)  248/ 60007D8 :                     ; 		ltorg
(2)  249/ 60007D8 :                     
(2)  250/ 60007D8 :                     ; ------------------------------------
(2)  251/ 60007D8 :                     ; MarsVdp_Print
(2)  252/ 60007D8 :                     ;
(2)  253/ 60007D8 :                     ; Prints text on screen
(2)  254/ 60007D8 :                     ;
(2)  255/ 60007D8 :                     ; Input:
(2)  256/ 60007D8 :                     ; r1 - String data
(2)  257/ 60007D8 :                     ; r2 - X pos
(2)  258/ 60007D8 :                     ; r3 - Y pos
(2)  259/ 60007D8 :                     ; ------------------------------------
(2)  260/ 60007D8 :                     
(2)  261/ 60007D8 :                     ; TODO: a ver si puedo copy-pastear
(2)  262/ 60007D8 :                     ; el de Genesis, para los valores
(2)  263/ 60007D8 :                     ; llamar _PrintVal
(2)  264/ 60007D8 :                     
(2)  265/ 60007D8 :                     MarsVdp_Print:
(2)  266/ 60007D8 : 4F22                		sts	pr,@-r15
(2)  267/ 60007DA : DE3D                		mov	#RAM_Mars_Background,r14
(2)  268/ 60007DC : DD3D                		mov	#_framebuffer,r13
(2)  269/ 60007DE : D93E                		mov	#m_ascii,r9
(2)  270/ 60007E0 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  271/ 60007E2 : 6A03                		mov	r0,r10
(2)  272/ 60007E4 :                     
(2)  273/ 60007E4 : 85EA                		mov.w	@(mbg_yfb,r14),r0
(2)  274/ 60007E6 : 303C                		add	r3,r0
(2)  275/ 60007E8 : 20AE                		mulu	r10,r0
(2)  276/ 60007EA : 50EA                		mov	@(mbg_fbdata,r14),r0
(2)  277/ 60007EC : 6B03                		mov	r0,r11
(2)  278/ 60007EE : 50E9                		mov	@(mbg_fbpos,r14),r0
(2)  279/ 60007F0 : 3B0C                		add	r0,r11
(2)  280/ 60007F2 : 6023                		mov	r2,r0
(2)  281/ 60007F4 : 4008                		shll2	r0
(2)  282/ 60007F6 : 4000                		shll	r0
(2)  283/ 60007F8 : 3B0C                		add	r0,r11
(2)  284/ 60007FA : 001A                		sts	macl,r0
(2)  285/ 60007FC : 3B0C                		add	r0,r11
(2)  286/ 60007FE : 6CB3                		mov	r11,r12
(2)  287/ 6000800 :                     .nxt_chr:
(2)  288/ 6000800 : 6010                		mov.b	@r1,r0
(2)  289/ 6000802 : C9FF                		and	#$FF,r0
(2)  290/ 6000804 : 8800                		cmp/eq	#$00,r0
(2)  291/ 6000806 : 890D                		bt	.chr_exit
(2)  292/ 6000808 : 880A                		cmp/eq	#$0A,r0
(2)  293/ 600080A : 8904                		bt	.chr_enter
(2)  294/ 600080C : B00E                		bsr	.put_chr
(2)  295/ 600080E : 0009                		nop
(2)  296/ 6000810 : 7B08                		add	#8,r11
(2)  297/ 6000812 : AFF5                		bra	.nxt_chr
(2)  298/ 6000814 : 7101                		add	#1,r1
(2)  299/ 6000816 :                     
(2)  300/ 6000816 :                     .chr_enter:
(2)  301/ 6000816 : E008                		mov	#8,r0
(2)  302/ 6000818 : 2A0E                		mulu	r0,r10
(2)  303/ 600081A : 001A                		sts	macl,r0
(2)  304/ 600081C : 3C0C                		add	r0,r12
(2)  305/ 600081E : 6BC3                		mov	r12,r11
(2)  306/ 6000820 : AFEE                		bra	.nxt_chr
(2)  307/ 6000822 : 7101                		add	#1,r1
(2)  308/ 6000824 :                     
(2)  309/ 6000824 :                     .chr_exit:
(2)  310/ 6000824 : 4F26                		lds	@r15+,pr
(2)  311/ 6000826 : 000B                		rts
(2)  312/ 6000828 : 0009                		nop
(2)  313/ 600082A :                     		align 4
(2)  314/ 600082C :                     
(2)  315/ 600082C :                     .put_chr:
(2)  316/ 600082C : E820                		mov	#$20,r8
(2)  317/ 600082E : 3088                		sub	r8,r0
(2)  318/ 6000830 : 4008                		shll2	r0		; *$40
(2)  319/ 6000832 : 4008                		shll2	r0
(2)  320/ 6000834 : 4008                		shll2	r0
(2)  321/ 6000836 : 6893                		mov	r9,r8
(2)  322/ 6000838 : 380C                		add	r0,r8
(2)  323/ 600083A : 67D3                		mov	r13,r7
(2)  324/ 600083C : 37BC                		add	r11,r7
(2)  325/ 600083E : E608                		mov	#8,r6
(2)  326/ 6000840 :                     .nxt_lns:
(2)  327/ 6000840 : 6086                		mov	@r8+,r0
(2)  328/ 6000842 : 2702                		mov	r0,@r7
(2)  329/ 6000844 : 6086                		mov	@r8+,r0
(2)  330/ 6000846 : 1701                		mov	r0,@(4,r7)
(2)  331/ 6000848 : 4610                		dt	r6
(2)  332/ 600084A : 8FF9                		bf/s	.nxt_lns
(2)  333/ 600084C : 37AC                		add	r10,r7
(2)  334/ 600084E : 000B                		rts
(2)  335/ 6000850 : 0009                		nop
(2)  336/ 6000852 :                     		align 4
(2)  337/ 6000854 :                     
(2)  338/ 6000854 :                     ; ------------------------------------
(2)  339/ 6000854 :                     ; MarsVdp_PrintVal
(2)  340/ 6000854 :                     ;
(2)  341/ 6000854 :                     ; Prints a value from ROM/RAM on
(2)  342/ 6000854 :                     ; screen
(2)  343/ 6000854 :                     ;
(2)  344/ 6000854 :                     ; Input:
(2)  345/ 6000854 :                     ; r1 - Value
(2)  346/ 6000854 :                     ; r2 - X pos
(2)  347/ 6000854 :                     ; r3 - Y pos
(2)  348/ 6000854 :                     ; r4 - Type
(2)  349/ 6000854 :                     ; ------------------------------------
(2)  350/ 6000854 :                     
(2)  351/ 6000854 :                     ; *** CURRENTLY 4BYTE LONGS ONLY ***
(2)  352/ 6000854 :                     
(2)  353/ 6000854 :                     MarsVdp_PrintVal:
(2)  354/ 6000854 : 4F22                		sts	pr,@-r15
(2)  355/ 6000856 : DE21                		mov	#RAM_Mars_Background,r14
(2)  356/ 6000858 : DD1E                		mov	#_framebuffer,r13
(2)  357/ 600085A : DC21                		mov	#m_ascii,r12
(2)  358/ 600085C : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  359/ 600085E : 6A03                		mov	r0,r10
(2)  360/ 6000860 : 85EA                		mov.w	@(mbg_yfb,r14),r0
(2)  361/ 6000862 : 303C                		add	r3,r0
(2)  362/ 6000864 : 20AE                		mulu	r10,r0
(2)  363/ 6000866 : 50EA                		mov	@(mbg_fbdata,r14),r0
(2)  364/ 6000868 : 6B03                		mov	r0,r11
(2)  365/ 600086A : 50E9                		mov	@(mbg_fbpos,r14),r0
(2)  366/ 600086C : 3B0C                		add	r0,r11
(2)  367/ 600086E : 6023                		mov	r2,r0
(2)  368/ 6000870 : 4008                		shll2	r0
(2)  369/ 6000872 : 4000                		shll	r0
(2)  370/ 6000874 : 3B0C                		add	r0,r11
(2)  371/ 6000876 : 001A                		sts	macl,r0
(2)  372/ 6000878 : 3B0C                		add	r0,r11
(2)  373/ 600087A :                     
(2)  374/ 600087A : 6413                		mov	r1,r4
(2)  375/ 600087C : B004                		bsr	.put_value
(2)  376/ 600087E : 0009                		nop
(2)  377/ 6000880 :                     .chr_exit:
(2)  378/ 6000880 : 4F26                		lds	@r15+,pr
(2)  379/ 6000882 : 000B                		rts
(2)  380/ 6000884 : 0009                		nop
(2)  381/ 6000886 :                     		align 4
(2)  382/ 6000888 :                     
(2)  383/ 6000888 :                     ; r4 - Value
(2)  384/ 6000888 :                     ; r5 - Type (1-byte 2-word 4-long)
(2)  385/ 6000888 :                     ;
(2)  386/ 6000888 :                     ; Uses:
(2)  387/ 6000888 :                     ; r7-r9
(2)  388/ 6000888 :                     
(2)  389/ 6000888 :                     .put_value:
(2)  390/ 6000888 : E504                		mov	#4,r5		; LONG temporal
(2)  391/ 600088A : 4500                		shll	r5
(2)  392/ 600088C :                     .wrt_nibl:
(2)  393/ 600088C : 4404                		rotl	r4
(2)  394/ 600088E : 4404                		rotl	r4
(2)  395/ 6000890 : 4404                		rotl	r4
(2)  396/ 6000892 : 4404                		rotl	r4
(2)  397/ 6000894 : 6043                		mov	r4,r0
(2)  398/ 6000896 : C90F                		and	#%1111,r0
(2)  399/ 6000898 : E70A                		mov	#$A,r7
(2)  400/ 600089A : 3073                		cmp/ge	r7,r0
(2)  401/ 600089C : 8B00                		bf	.a_plus
(2)  402/ 600089E : 7007                		add	#7,r0
(2)  403/ 60008A0 :                     .a_plus:
(2)  404/ 60008A0 : 7010                		add	#$10,r0
(2)  405/ 60008A2 : 4008                		shll2	r0		; *$40
(2)  406/ 60008A4 : 4008                		shll2	r0
(2)  407/ 60008A6 : 4008                		shll2	r0
(2)  408/ 60008A8 : 67C3                		mov	r12,r7
(2)  409/ 60008AA : 370C                		add	r0,r7
(2)  410/ 60008AC : 68D3                		mov	r13,r8
(2)  411/ 60008AE : 38BC                		add	r11,r8
(2)  412/ 60008B0 : E0FC                		mov	#-4,r0
(2)  413/ 60008B2 : 2809                		and	r0,r8
(2)  414/ 60008B4 : E908                		mov	#8,r9
(2)  415/ 60008B6 :                     .nxt_lns:
(2)  416/ 60008B6 : 6076                		mov	@r7+,r0
(2)  417/ 60008B8 : 2802                		mov	r0,@r8
(2)  418/ 60008BA : 6076                		mov	@r7+,r0
(2)  419/ 60008BC : 1801                		mov	r0,@(4,r8)
(2)  420/ 60008BE : 4910                		dt	r9
(2)  421/ 60008C0 : 8FF9                		bf/s	.nxt_lns
(2)  422/ 60008C2 : 38AC                		add	r10,r8
(2)  423/ 60008C4 : 7B08                		add	#8,r11
(2)  424/ 60008C6 : 4510                		dt	r5
(2)  425/ 60008C8 : 8BE0                		bf	.wrt_nibl
(2)  426/ 60008CA : 000B                		rts
(2)  427/ 60008CC : 0009                		nop
(2)  428/ 60008CE :                     		align 4
(2)  429/ 60008D0 :                     
(2)  430/ 60008D0 :                     	; write literals
(2)  431/ 60008D0 : 0600 6298 0400 0000 		ltorg
                    0600 4A00 0600 6298 
                    0600 4A00           
(2)  432/ 60008E4 :                     
(2)  433/ 60008E4 :                     ; ====================================================================
(2)  434/ 60008E4 :                     ; ----------------------------------------------------------------
(2)  435/ 60008E4 :                     ; 256-color Scrolling background
(2)  436/ 60008E4 :                     ; ----------------------------------------------------------------
(2)  437/ 60008E4 :                     
(2)  438/ 60008E4 :                     ; ---------------------------------------
(2)  439/ 60008E4 :                     ; Draw ALL the pixel data on
(2)  440/ 60008E4 :                     ; current framebuffer
(2)  441/ 60008E4 :                     ;
(2)  442/ 60008E4 :                     ; r1 - X pos
(2)  443/ 60008E4 :                     ; r2 - Y pos
(2)  444/ 60008E4 :                     ;
(2)  445/ 60008E4 :                     ; *** THE OTHER DRAWING TIMERS U/D/L/R
(2)  446/ 60008E4 :                     ; MUST BE ZERO BEFORE GETTING HERE ***
(2)  447/ 60008E4 :                     ; ---------------------------------------
(2)  448/ 60008E4 :                     
(2)  449/ 60008E4 :                     MarsVideo_DrawAllBg:
(2)  450/ 60008E4 : 4F22                		sts	pr,@-r15
(2)  451/ 60008E6 : DE56                		mov	#RAM_Mars_Background,r14
(2)  452/ 60008E8 : 50E8                		mov	@(mbg_data,r14),r0
(2)  453/ 60008EA : 8800                		cmp/eq	#0,r0
(2)  454/ 60008EC : 8962                		bt	.no_data
(2)  455/ 60008EE : 51ED                		mov	@(mbg_xpos,r14),r1
(2)  456/ 60008F0 : 52EE                		mov	@(mbg_ypos,r14),r2
(2)  457/ 60008F2 : 4129                		shlr16	r1
(2)  458/ 60008F4 : 4229                		shlr16	r2
(2)  459/ 60008F6 : 611F                		exts.w	r1,r1
(2)  460/ 60008F8 : 622F                		exts.w	r2,r2
(2)  461/ 60008FA : 6D03                		mov	r0,r13				; r13 - pixel data
(2)  462/ 60008FC : DC51                		mov	#_framebuffer,r12
(2)  463/ 60008FE : 50EA                		mov	@(mbg_fbdata,r14),r0
(2)  464/ 6000900 : 3C0C                		add	r0,r12
(2)  465/ 6000902 : 85E8                		mov.w	@(mbg_width,r14),r0		; r11 - pixel-data WIDTH
(2)  466/ 6000904 : 6B03                		mov	r0,r11
(2)  467/ 6000906 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0		; r10 - internal WIDTH
(2)  468/ 6000908 : 6A03                		mov	r0,r10
(2)  469/ 600090A : 85E9                		mov.w	@(mbg_height,r14),r0
(2)  470/ 600090C : 6903                		mov	r0,r9
(2)  471/ 600090E : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2)  472/ 6000910 : 6803                		mov	r0,r8
(2)  473/ 6000912 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  474/ 6000914 : 6703                		mov	r0,r7
(2)  475/ 6000916 : 667B                		neg	r7,r6
(2)  476/ 6000918 : 55E7                		mov	@(mbg_intrl_size,r14),r5
(2)  477/ 600091A : 9495                		mov	#320,r4
(2)  478/ 600091C : 84E1                		mov.b	@(mbg_flags,r14),r0
(2)  479/ 600091E : C901                		and	#1,r0
(2)  480/ 6000920 : 2008                		tst	r0,r0
(2)  481/ 6000922 : 8900                		bt	.indxmode
(2)  482/ 6000924 : 4400                		shll	r4
(2)  483/ 6000926 :                     ; 		shll	r11
(2)  484/ 6000926 :                     .indxmode:
(2)  485/ 6000926 :                     
(2)  486/ 6000926 :                     	; Set X/Y draw heads
(2)  487/ 6000926 :                     .xinit_l:
(2)  488/ 6000926 : 4111                		cmp/pz	r1
(2)  489/ 6000928 : 8901                		bt	.xbg_back
(2)  490/ 600092A : AFFC                		bra	.xinit_l
(2)  491/ 600092C : 31BC                		add	r11,r1
(2)  492/ 600092E :                     .xbg_back:
(2)  493/ 600092E : 31B7                		cmp/gt	r11,r1			; First X limiter
(2)  494/ 6000930 : 8B01                		bf	.xbg_inc
(2)  495/ 6000932 : AFFC                		bra	.xbg_back
(2)  496/ 6000934 : 31B8                		sub	r11,r1
(2)  497/ 6000936 :                     .xbg_inc:
(2)  498/ 6000936 : 4211                		cmp/pz	r2
(2)  499/ 6000938 : 8901                		bt	.ybg_back
(2)  500/ 600093A : AFFC                		bra	.xbg_inc
(2)  501/ 600093C : 329C                		add	r9,r2
(2)  502/ 600093E :                     .ybg_back:
(2)  503/ 600093E : 3297                		cmp/gt	r9,r2			; First Y limiter
(2)  504/ 6000940 : 8B01                		bf	.ybg_inc
(2)  505/ 6000942 : AFFC                		bra	.ybg_back
(2)  506/ 6000944 : 3298                		sub	r9,r2
(2)  507/ 6000946 :                     .ybg_inc:
(2)  508/ 6000946 : 6013                		mov	r1,r0
(2)  509/ 6000948 : 81E4                		mov.w	r0,@(mbg_xinc_l,r14)
(2)  510/ 600094A : 304C                		add	r4,r0
(2)  511/ 600094C : 30B7                .lwr_xnxt:	cmp/gt	r11,r0
(2)  512/ 600094E : 8B01                		bf	.lwr_xvld
(2)  513/ 6000950 : AFFC                		bra	.lwr_xnxt
(2)  514/ 6000952 : 30B8                		sub	r11,r0
(2)  515/ 6000954 :                     .lwr_xvld:
(2)  516/ 6000954 : 81E5                		mov.w	r0,@(mbg_xinc_r,r14)
(2)  517/ 6000956 :                     
(2)  518/ 6000956 : 6023                		mov	r2,r0
(2)  519/ 6000958 : 81E6                		mov.w	r0,@(mbg_yinc_u,r14)
(2)  520/ 600095A : 6303                		mov	r0,r3
(2)  521/ 600095C :                     
(2)  522/ 600095C : 338C                		add	r8,r3
(2)  523/ 600095E : 3378                		sub	r7,r3
(2)  524/ 6000960 : 3393                .lwr_ynxt:	cmp/ge	r9,r3
(2)  525/ 6000962 : 8B01                		bf	.lwr_yvld
(2)  526/ 6000964 : AFFC                		bra	.lwr_ynxt
(2)  527/ 6000966 : 3398                		sub	r9,r3
(2)  528/ 6000968 :                     .lwr_yvld:
(2)  529/ 6000968 : 6033                		mov	r3,r0
(2)  530/ 600096A : 81E7                		mov.w	r0,@(mbg_yinc_d,r14)
(2)  531/ 600096C :                     
(2)  532/ 600096C :                     	; r1 - X bg pos
(2)  533/ 600096C :                     	; r2 - Y bg pos
(2)  534/ 600096C :                     	; r3 - Framebuffer BASE
(2)  535/ 600096C :                     	; r4 - Y FB pos &BLKSIZE
(2)  536/ 600096C :                     	; Set X/Y framebuffer blocks
(2)  537/ 600096C : 85EA                		mov.w	@(mbg_yfb,r14),r0
(2)  538/ 600096E : 6403                		mov	r0,r4
(2)  539/ 6000970 : 53E9                		mov	@(mbg_fbpos,r14),r3
(2)  540/ 6000972 : 2469                		and	r6,r4
(2)  541/ 6000974 : 2369                		and	r6,r3
(2)  542/ 6000976 : 2269                		and	r6,r2
(2)  543/ 6000978 : 2169                		and	r6,r1
(2)  544/ 600097A : E600                		mov	#0,r6
(2)  545/ 600097C :                     .nxt_y:
(2)  546/ 600097C : 3293                		cmp/ge	r9,r2		; Y limiters
(2)  547/ 600097E : 8B00                		bf	.ybg_l
(2)  548/ 6000980 : 3298                		sub	r9,r2
(2)  549/ 6000982 :                     .ybg_l:
(2)  550/ 6000982 : 2F66                		mov	r6,@-r15
(2)  551/ 6000984 : 2F36                		mov	r3,@-r15
(2)  552/ 6000986 : 2F16                		mov	r1,@-r15
(2)  553/ 6000988 : E600                		mov	#0,r6
(2)  554/ 600098A :                     .nxt_x:
(2)  555/ 600098A : 31B3                		cmp/ge	r11,r1		; X pixel-data wrap
(2)  556/ 600098C : 8B00                		bf	.xbg_l
(2)  557/ 600098E : 31B8                		sub	r11,r1
(2)  558/ 6000990 :                     .xbg_l:
(2)  559/ 6000990 : B014                		bsr	.mk_piece
(2)  560/ 6000992 : 0009                		nop
(2)  561/ 6000994 : 317C                		add	r7,r1
(2)  562/ 6000996 : 367C                		add	r7,r6
(2)  563/ 6000998 : 36A3                		cmp/ge	r10,r6
(2)  564/ 600099A : 8FF6                		bf/s	.nxt_x
(2)  565/ 600099C : 337C                		add	r7,r3		; No MAP WIDTH check needed here
(2)  566/ 600099E : 61F6                		mov	@r15+,r1
(2)  567/ 60009A0 : 63F6                		mov	@r15+,r3
(2)  568/ 60009A2 : 66F6                		mov	@r15+,r6
(2)  569/ 60009A4 :                     
(2)  570/ 60009A4 : 347C                		add	r7,r4
(2)  571/ 60009A6 : 3487                		cmp/gt	r8,r4
(2)  572/ 60009A8 : 8B00                		bf	.nxt_y_l
(2)  573/ 60009AA : 3488                		sub	r8,r4
(2)  574/ 60009AC :                     .nxt_y_l:
(2)  575/ 60009AC : 327C                		add	r7,r2
(2)  576/ 60009AE : 367C                		add 	r7,r6
(2)  577/ 60009B0 : 3683                		cmp/ge	r8,r6
(2)  578/ 60009B2 : 8BE3                		bf	.nxt_y
(2)  579/ 60009B4 :                     .no_data:
(2)  580/ 60009B4 : 4F26                		lds	@r15+,pr
(2)  581/ 60009B6 : 000B                		rts
(2)  582/ 60009B8 : 0009                		nop
(2)  583/ 60009BA :                     		align 4
(2)  584/ 60009BC :                     
(2)  585/ 60009BC :                     ; r1 - X pos
(2)  586/ 60009BC :                     ; r2 - Y pos
(2)  587/ 60009BC :                     .mk_piece:
(2)  588/ 60009BC : 2F36                		mov	r3,@-r15
(2)  589/ 60009BE : 2F46                		mov	r4,@-r15
(2)  590/ 60009C0 : 2F56                		mov	r5,@-r15
(2)  591/ 60009C2 : 2F66                		mov	r6,@-r15
(2)  592/ 60009C4 : 2F76                		mov	r7,@-r15
(2)  593/ 60009C6 : 2F86                		mov	r8,@-r15
(2)  594/ 60009C8 : 2F96                		mov	r9,@-r15
(2)  595/ 60009CA :                     
(2)  596/ 60009CA : 2A4E                		mulu	r4,r10
(2)  597/ 60009CC : 061A                		sts	macl,r6
(2)  598/ 60009CE : 363C                		add	r3,r6
(2)  599/ 60009D0 : 3653                		cmp/ge	r5,r6
(2)  600/ 60009D2 : 8B00                		bf	.lrgrfb
(2)  601/ 60009D4 : 3658                		sub	r5,r6
(2)  602/ 60009D6 :                     .lrgrfb:
(2)  603/ 60009D6 :                     	; Framebuffer X/Y add
(2)  604/ 60009D6 : 68D3                		mov	r13,r8		; BG X/Y add
(2)  605/ 60009D8 : 22BE                		mulu	r11,r2
(2)  606/ 60009DA : 001A                		sts	macl,r0
(2)  607/ 60009DC : 380C                		add	r0,r8
(2)  608/ 60009DE : 381C                		add	r1,r8
(2)  609/ 60009E0 : 67C3                		mov	r12,r7		; FB X add
(2)  610/ 60009E2 : 376C                		add	r6,r7
(2)  611/ 60009E4 :                     
(2)  612/ 60009E4 :                     	; Hidden line
(2)  613/ 60009E4 : 9930                		mov	#320,r9
(2)  614/ 60009E6 : 84E1                		mov.b	@(mbg_flags,r14),r0
(2)  615/ 60009E8 : C901                		and	#1,r0
(2)  616/ 60009EA : 2008                		tst	r0,r0
(2)  617/ 60009EC : 8900                		bt	.indxmoden
(2)  618/ 60009EE : 4900                		shll	r9
(2)  619/ 60009F0 :                     .indxmoden:
(2)  620/ 60009F0 : 3693                		cmp/ge	r9,r6
(2)  621/ 60009F2 : 890B                		bt	.y_nohdnln
(2)  622/ 60009F4 : 6393                		mov	r9,r3
(2)  623/ 60009F6 : 4309                		shlr2	r3
(2)  624/ 60009F8 : 50E7                		mov	@(mbg_intrl_size,r14),r0
(2)  625/ 60009FA : 360C                		add	r0,r6
(2)  626/ 60009FC : 36CC                		add	r12,r6
(2)  627/ 60009FE : 6583                		mov	r8,r5
(2)  628/ 6000A00 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  629/ 6000A02 :                     .nxtlnghdn:
(2)  630/ 6000A02 : 6056                		mov	@r5+,r0
(2)  631/ 6000A04 : 2602                		mov	r0,@r6
(2)  632/ 6000A06 : 4310                		dt	r3
(2)  633/ 6000A08 : 8FFB                		bf/s	.nxtlnghdn
(2)  634/ 6000A0A : 7604                		add	#4,r6
(2)  635/ 6000A0C :                     .y_nohdnln:
(2)  636/ 6000A0C : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  637/ 6000A0E : 6903                		mov	r0,r9
(2)  638/ 6000A10 :                     .yblk_loopn:
(2)  639/ 6000A10 : 6583                		mov	r8,r5
(2)  640/ 6000A12 : 6673                		mov	r7,r6
(2)  641/ 6000A14 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  642/ 6000A16 : 6303                		mov	r0,r3
(2)  643/ 6000A18 : 4309                		shlr2	r3
(2)  644/ 6000A1A :                     .nxtlng:
(2)  645/ 6000A1A : 6056                		mov	@r5+,r0
(2)  646/ 6000A1C : 2602                		mov	r0,@r6
(2)  647/ 6000A1E : 4310                		dt	r3
(2)  648/ 6000A20 : 8FFB                		bf/s	.nxtlng
(2)  649/ 6000A22 : 7604                		add	#4,r6
(2)  650/ 6000A24 :                     
(2)  651/ 6000A24 : 38BC                		add	r11,r8
(2)  652/ 6000A26 : 4910                		dt	r9
(2)  653/ 6000A28 : 8FF2                		bf/s	.yblk_loopn
(2)  654/ 6000A2A : 37AC                		add	r10,r7
(2)  655/ 6000A2C :                     .yblk_ex:
(2)  656/ 6000A2C : 69F6                		mov	@r15+,r9
(2)  657/ 6000A2E : 68F6                		mov	@r15+,r8
(2)  658/ 6000A30 : 67F6                		mov	@r15+,r7
(2)  659/ 6000A32 : 66F6                		mov	@r15+,r6
(2)  660/ 6000A34 : 65F6                		mov	@r15+,r5
(2)  661/ 6000A36 : 64F6                		mov	@r15+,r4
(2)  662/ 6000A38 : 63F6                		mov	@r15+,r3
(2)  663/ 6000A3A : 000B                		rts
(2)  664/ 6000A3C : 0009                		nop
(2)  665/ 6000A3E :                     		align 4
(2)  666/ 6000A40 : 0600 6298 0400 0000 		ltorg
                    0140                
(2)  667/ 6000A4A :                     
(2)  668/ 6000A4A :                     ; ---------------------------------------
(2)  669/ 6000A4A :                     ; Background:
(2)  670/ 6000A4A :                     ; Draw Left/Right sections
(2)  671/ 6000A4A :                     ; ---------------------------------------
(2)  672/ 6000A4A :                     
(2)  673/ 6000A4A :                     MarsVideo_BgDrawLR:
(2)  674/ 6000A4A : DE21                		mov	#RAM_Mars_Background,r14
(2)  675/ 6000A4C : 50E8                		mov	@(mbg_data,r14),r0
(2)  676/ 6000A4E : 4015                		cmp/pl	r0
(2)  677/ 6000A50 : 8B28                		bf	.nxt_drawud
(2)  678/ 6000A52 : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2)  679/ 6000A54 : 6D03                		mov	r0,r13
(2)  680/ 6000A56 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  681/ 6000A58 : 640B                		neg	r0,r4
(2)  682/ 6000A5A : 4009                		shlr2	r0
(2)  683/ 6000A5C : 6C03                		mov	r0,r12
(2)  684/ 6000A5E : DB1D                		mov	#Cach_BgFbPos_H,r11
(2)  685/ 6000A60 : 6BB2                		mov	@r11,r11
(2)  686/ 6000A62 : D31D                		mov	#Cach_BgFbPos_V,r3
(2)  687/ 6000A64 : 6332                		mov	@r3,r3
(2)  688/ 6000A66 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  689/ 6000A68 : 203F                		muls	r3,r0
(2)  690/ 6000A6A : 001A                		sts	macl,r0
(2)  691/ 6000A6C : 3B0C                		add	r0,r11
(2)  692/ 6000A6E : 5AE7                		mov	@(mbg_intrl_size,r14),r10
(2)  693/ 6000A70 : 59EA                		mov	@(mbg_fbdata,r14),r9
(2)  694/ 6000A72 : D01A                		mov	#_framebuffer,r0
(2)  695/ 6000A74 : 390C                		add	r0,r9
(2)  696/ 6000A76 : 50E8                		mov	@(mbg_data,r14),r0
(2)  697/ 6000A78 : 6803                		mov	r0,r8
(2)  698/ 6000A7A : 6703                		mov	r0,r7
(2)  699/ 6000A7C : 85E9                		mov.w	@(mbg_height,r14),r0
(2)  700/ 6000A7E : 6603                		mov	r0,r6
(2)  701/ 6000A80 : 85E8                		mov.w	@(mbg_width,r14),r0
(2)  702/ 6000A82 : 206E                		mulu	r6,r0
(2)  703/ 6000A84 : 061A                		sts	macl,r6
(2)  704/ 6000A86 : 367C                		add	r7,r6
(2)  705/ 6000A88 : 6303                		mov	r0,r3
(2)  706/ 6000A8A : D015                		mov	#Cach_YHead_U,r0
(2)  707/ 6000A8C : 6002                		mov	@r0,r0
(2)  708/ 6000A8E : 203E                		mulu	r3,r0
(2)  709/ 6000A90 : 001A                		sts	macl,r0
(2)  710/ 6000A92 : 380C                		add	r0,r8
(2)  711/ 6000A94 : D113                		mov	#Cach_Drw_R,r1
(2)  712/ 6000A96 : D214                		mov	#Cach_Drw_L,r2
(2)  713/ 6000A98 : 6012                		mov	@r1,r0
(2)  714/ 6000A9A : 8800                		cmp/eq	#0,r0
(2)  715/ 6000A9C : 8B0A                		bf	.dtsk01_dright
(2)  716/ 6000A9E : 6022                		mov	@r2,r0
(2)  717/ 6000AA0 : 8800                		cmp/eq	#0,r0
(2)  718/ 6000AA2 : 8B01                		bf	.dtsk01_dleft
(2)  719/ 6000AA4 :                     .nxt_drawud:
(2)  720/ 6000AA4 : 000B                		rts
(2)  721/ 6000AA6 : 0009                		nop
(2)  722/ 6000AA8 :                     		align 4
(2)  723/ 6000AA8 :                     
(2)  724/ 6000AA8 :                     .dtsk01_dleft:
(2)  725/ 6000AA8 : 4010                		dt	r0
(2)  726/ 6000AAA : 2202                		mov	r0,@r2
(2)  727/ 6000AAC : D00F                		mov	#Cach_XHead_L,r0
(2)  728/ 6000AAE : 6002                		mov	@r0,r0
(2)  729/ 6000AB0 : A021                		bra	dtsk01_lrdraw
(2)  730/ 6000AB2 : 6503                		mov	r0,r5
(2)  731/ 6000AB4 :                     .dtsk01_dright:
(2)  732/ 6000AB4 : 4010                		dt	r0
(2)  733/ 6000AB6 : 2102                		mov	r0,@r1
(2)  734/ 6000AB8 : 931C                		mov	#320,r3			; Set FB position
(2)  735/ 6000ABA : 84E1                		mov.b	@(mbg_flags,r14),r0
(2)  736/ 6000ABC : C901                		and	#1,r0
(2)  737/ 6000ABE : 2008                		tst	r0,r0
(2)  738/ 6000AC0 : 8900                		bt	.indxmode
(2)  739/ 6000AC2 : 4300                		shll	r3
(2)  740/ 6000AC4 :                     .indxmode:
(2)  741/ 6000AC4 : 3B3C                		add	r3,r11
(2)  742/ 6000AC6 : 2B49                		and	r4,r11
(2)  743/ 6000AC8 : D009                		mov	#Cach_XHead_R,r0
(2)  744/ 6000ACA : 6002                		mov	@r0,r0
(2)  745/ 6000ACC : A013                		bra	dtsk01_lrdraw
(2)  746/ 6000ACE : 6503                		mov	r0,r5
(2)  747/ 6000AD0 :                     		align 4
(2)  748/ 6000AD0 : 0600 6298 C000 0690 		ltorg
                    C000 068C 0400 0000 
                    C000 0684 C000 0678 
                    C000 0674 C000 067C 
                    C000 0680 0140      
(2)  749/ 6000AF6 :                     
(2)  750/ 6000AF6 :                     	; r13 - Y lines
(2)  751/ 6000AF6 :                     	; r12 - X block width
(2)  752/ 6000AF6 :                     	; r11 - drawzone pos
(2)  753/ 6000AF6 :                     	; r10 - drawzone size
(2)  754/ 6000AF6 :                     	;  r9 - Framebuffer BASE
(2)  755/ 6000AF6 :                     	;  r8 - Pixeldata Y-Current
(2)  756/ 6000AF6 :                     	;  r7 - Pixeldata Y-Start
(2)  757/ 6000AF6 :                     	;  r6 - Pixeldata Y-End
(2)  758/ 6000AF6 :                     	;  r5 - Xadd
(2)  759/ 6000AF6 :                     dtsk01_lrdraw:
(2)  760/ 6000AF6 : 3863                		cmp/ge	r6,r8
(2)  761/ 6000AF8 : 8B00                		bf	.yres
(2)  762/ 6000AFA : 6873                		mov	r7,r8
(2)  763/ 6000AFC :                     .yres:
(2)  764/ 6000AFC : 64C3                		mov	r12,r4
(2)  765/ 6000AFE : 63B3                		mov	r11,r3
(2)  766/ 6000B00 : 6283                		mov	r8,r2
(2)  767/ 6000B02 : 325C                		add	r5,r2
(2)  768/ 6000B04 :                     ; X draw
(2)  769/ 6000B04 :                     .xline:
(2)  770/ 6000B04 : 33A3                		cmp/ge	r10,r3
(2)  771/ 6000B06 : 8B01                		bf	.prefix_r
(2)  772/ 6000B08 : 33A8                		sub	r10,r3
(2)  773/ 6000B0A : 6B33                		mov	r3,r11
(2)  774/ 6000B0C :                     .prefix_r:
(2)  775/ 6000B0C : 6133                		mov	r3,r1
(2)  776/ 6000B0E : 319C                		add	r9,r1
(2)  777/ 6000B10 : 6022                		mov	@r2,r0
(2)  778/ 6000B12 : 2102                		mov	r0,@r1
(2)  779/ 6000B14 : 918A                		mov	#320,r1			; Hidden line
(2)  780/ 6000B16 : 84E1                		mov.b	@(mbg_flags,r14),r0
(2)  781/ 6000B18 : C901                		and	#1,r0
(2)  782/ 6000B1A : 2008                		tst	r0,r0
(2)  783/ 6000B1C : 8900                		bt	.indxmode
(2)  784/ 6000B1E : 4100                		shll	r1
(2)  785/ 6000B20 :                     .indxmode:
(2)  786/ 6000B20 : 3317                		cmp/gt	r1,r3
(2)  787/ 6000B22 : 8904                		bt	.not_l2
(2)  788/ 6000B24 : 6133                		mov	r3,r1
(2)  789/ 6000B26 : 319C                		add	r9,r1
(2)  790/ 6000B28 : 31AC                		add	r10,r1
(2)  791/ 6000B2A : 6022                		mov	@r2,r0
(2)  792/ 6000B2C : 2102                		mov	r0,@r1
(2)  793/ 6000B2E :                     .not_l2:
(2)  794/ 6000B2E : 7204                		add	#4,r2
(2)  795/ 6000B30 : 4410                		dt	r4
(2)  796/ 6000B32 : 8FE7                		bf/s	.xline
(2)  797/ 6000B34 : 7304                		add	#4,r3
(2)  798/ 6000B36 : 85E8                		mov.w	@(mbg_width,r14),r0
(2)  799/ 6000B38 : 380C                		add	r0,r8
(2)  800/ 6000B3A : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  801/ 6000B3C : 4D10                		dt	r13
(2)  802/ 6000B3E : 8FDA                		bf/s	dtsk01_lrdraw
(2)  803/ 6000B40 : 3B0C                		add	r0,r11
(2)  804/ 6000B42 : 000B                		rts
(2)  805/ 6000B44 : 0009                		nop
(2)  806/ 6000B46 :                     		align 4
(2)  807/ 6000B48 :                     
(2)  808/ 6000B48 :                     ; ---------------------------------------
(2)  809/ 6000B48 :                     ; Background:
(2)  810/ 6000B48 :                     ; Draw Up/Down sections
(2)  811/ 6000B48 :                     ; ---------------------------------------
(2)  812/ 6000B48 :                     
(2)  813/ 6000B48 :                     MarsVideo_BgDrawUD:
(2)  814/ 6000B48 : 5DEA                		mov	@(mbg_fbdata,r14),r13
(2)  815/ 6000B4A : D030                		mov	#_framebuffer,r0
(2)  816/ 6000B4C : 3D0C                		add	r0,r13
(2)  817/ 6000B4E : 50E8                		mov	@(mbg_data,r14),r0
(2)  818/ 6000B50 : 6B03                		mov	r0,r11
(2)  819/ 6000B52 : 6C03                		mov	r0,r12
(2)  820/ 6000B54 : D02E                		mov	#Cach_BgFbPos_H,r0
(2)  821/ 6000B56 : 6A02                		mov	@r0,r10
(2)  822/ 6000B58 : D02E                		mov	#Cach_BgFbPos_V,r0
(2)  823/ 6000B5A : 6902                		mov	@r0,r9
(2)  824/ 6000B5C : 58E7                		mov	@(mbg_intrl_size,r14),r8
(2)  825/ 6000B5E : 85E8                		mov.w	@(mbg_width,r14),r0
(2)  826/ 6000B60 : 6703                		mov	r0,r7
(2)  827/ 6000B62 :                     ; 		mov.b	@(mbg_flags,r14),r0
(2)  828/ 6000B62 :                     ; 		and	#1,r0
(2)  829/ 6000B62 :                     ; 		tst	r0,r0
(2)  830/ 6000B62 :                     ; 		bt	.indxmodew
(2)  831/ 6000B62 :                     ; 		shll	r7
(2)  832/ 6000B62 :                     ; .indxmodew:
(2)  833/ 6000B62 : D02D                		mov	#Cach_XHead_L,r0
(2)  834/ 6000B64 : 6002                		mov	@r0,r0
(2)  835/ 6000B66 : 3C0C                		add	r0,r12
(2)  836/ 6000B68 : 6693                		mov	r9,r6
(2)  837/ 6000B6A :                     
(2)  838/ 6000B6A : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2)  839/ 6000B6C : 6503                		mov	r0,r5
(2)  840/ 6000B6E : 6403                		mov	r0,r4
(2)  841/ 6000B70 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  842/ 6000B72 : 3408                		sub	r0,r4
(2)  843/ 6000B74 : 364C                		add	r4,r6
(2)  844/ 6000B76 : 3657                .wrpagain:	cmp/gt	r5,r6
(2)  845/ 6000B78 : 8B01                		bf	.upwrp
(2)  846/ 6000B7A : AFFC                		bra	.wrpagain
(2)  847/ 6000B7C : 3658                		sub	r5,r6
(2)  848/ 6000B7E :                     .upwrp:
(2)  849/ 6000B7E : D127                		mov	#Cach_Drw_U,r1
(2)  850/ 6000B80 : D227                		mov	#Cach_Drw_D,r2
(2)  851/ 6000B82 : 6012                		mov	@r1,r0
(2)  852/ 6000B84 : 8800                		cmp/eq	#0,r0
(2)  853/ 6000B86 : 8B0C                		bf	.tsk00_up
(2)  854/ 6000B88 : 6022                		mov	@r2,r0
(2)  855/ 6000B8A : 8800                		cmp/eq	#0,r0
(2)  856/ 6000B8C : 893C                		bt	drw_ud_exit
(2)  857/ 6000B8E :                     .tsk00_down:
(2)  858/ 6000B8E : 4010                		dt	r0
(2)  859/ 6000B90 : 2202                		mov	r0,@r2
(2)  860/ 6000B92 :                     
(2)  861/ 6000B92 : D024                		mov	#Cach_YHead_D,r0
(2)  862/ 6000B94 : 6002                		mov	@r0,r0
(2)  863/ 6000B96 : 207E                		mulu	r7,r0
(2)  864/ 6000B98 : 001A                		sts	macl,r0
(2)  865/ 6000B9A : 3C0C                		add	r0,r12
(2)  866/ 6000B9C : 3B0C                		add	r0,r11
(2)  867/ 6000B9E : A008                		bra	.do_updown
(2)  868/ 6000BA0 : 6963                		mov	r6,r9
(2)  869/ 6000BA2 :                     .tsk00_up:
(2)  870/ 6000BA2 : 4010                		dt	r0
(2)  871/ 6000BA4 : 2102                		mov	r0,@r1
(2)  872/ 6000BA6 : D020                		mov	#Cach_YHead_U,r0
(2)  873/ 6000BA8 : 6002                		mov	@r0,r0
(2)  874/ 6000BAA : 207E                		mulu	r7,r0
(2)  875/ 6000BAC : 001A                		sts	macl,r0
(2)  876/ 6000BAE : 3C0C                		add	r0,r12
(2)  877/ 6000BB0 : 3B0C                		add	r0,r11
(2)  878/ 6000BB2 :                     
(2)  879/ 6000BB2 :                     	; Main U/D loop
(2)  880/ 6000BB2 :                     	; r12 - pixel-data current pos
(2)  881/ 6000BB2 :                     	; r11 - pixel-data loop pos
(2)  882/ 6000BB2 :                     	; r10 - Internal scroll TOPLEFT
(2)  883/ 6000BB2 :                     	; r9 - Internal scroll Y-add
(2)  884/ 6000BB2 :                     	; r8 - Internal scroll drawarea size
(2)  885/ 6000BB2 :                     	; r7 - pixel-data WIDTH
(2)  886/ 6000BB2 :                     .do_updown:
(2)  887/ 6000BB2 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  888/ 6000BB4 : 209E                		mulu	r9,r0
(2)  889/ 6000BB6 : 001A                		sts	macl,r0
(2)  890/ 6000BB8 : 3A0C                		add	r0,r10
(2)  891/ 6000BBA : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  892/ 6000BBC : 6603                		mov	r0,r6
(2)  893/ 6000BBE :                     .y_loop:
(2)  894/ 6000BBE : 63C3                		mov	r12,r3
(2)  895/ 6000BC0 : 64B3                		mov	r11,r4
(2)  896/ 6000BC2 : 347C                		add	r7,r4
(2)  897/ 6000BC4 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0	; WIDTH / 4
(2)  898/ 6000BC6 : 4009                		shlr2	r0
(2)  899/ 6000BC8 : 6503                		mov	r0,r5
(2)  900/ 6000BCA :                     .x_loop:
(2)  901/ 6000BCA : 3A83                		cmp/ge	r8,r10			; topleft fb pos
(2)  902/ 6000BCC : 8B00                		bf	.lwrfb
(2)  903/ 6000BCE : 3A88                		sub	r8,r10
(2)  904/ 6000BD0 :                     .lwrfb:
(2)  905/ 6000BD0 : 3343                		cmp/ge	r4,r3
(2)  906/ 6000BD2 : 8B00                		bf	.srclow
(2)  907/ 6000BD4 : 63B3                		mov	r11,r3
(2)  908/ 6000BD6 :                     .srclow:
(2)  909/ 6000BD6 : 6136                		mov	@r3+,r1
(2)  910/ 6000BD8 : 62A3                		mov	r10,r2
(2)  911/ 6000BDA : 32DC                		add	r13,r2
(2)  912/ 6000BDC : 6013                		mov	r1,r0
(2)  913/ 6000BDE : 2202                		mov	r0,@r2
(2)  914/ 6000BE0 :                     
(2)  915/ 6000BE0 : 9224                		mov	#320,r2			; Hidden line
(2)  916/ 6000BE2 : 84E1                		mov.b	@(mbg_flags,r14),r0
(2)  917/ 6000BE4 : C901                		and	#1,r0
(2)  918/ 6000BE6 : 2008                		tst	r0,r0
(2)  919/ 6000BE8 : 8900                		bt	.indxmode
(2)  920/ 6000BEA : 4200                		shll	r2
(2)  921/ 6000BEC :                     .indxmode:
(2)  922/ 6000BEC : 3A27                		cmp/gt	r2,r10
(2)  923/ 6000BEE : 8904                		bt	.hdnx
(2)  924/ 6000BF0 : 62A3                		mov	r10,r2
(2)  925/ 6000BF2 : 32DC                		add	r13,r2
(2)  926/ 6000BF4 : 328C                		add	r8,r2
(2)  927/ 6000BF6 : 6013                		mov	r1,r0
(2)  928/ 6000BF8 : 2202                		mov	r0,@r2
(2)  929/ 6000BFA :                     .hdnx:
(2)  930/ 6000BFA :                     
(2)  931/ 6000BFA : 4510                		dt	r5
(2)  932/ 6000BFC : 8FE5                		bf/s	.x_loop
(2)  933/ 6000BFE : 7A04                		add	#4,r10
(2)  934/ 6000C00 : 3B7C                		add	r7,r11			; Next SRC Y
(2)  935/ 6000C02 : 4610                		dt	r6
(2)  936/ 6000C04 : 8FDB                		bf/s	.y_loop
(2)  937/ 6000C06 : 3C7C                		add	r7,r12
(2)  938/ 6000C08 :                     drw_ud_exit:
(2)  939/ 6000C08 : 000B                		rts
(2)  940/ 6000C0A : 0009                		nop
(2)  941/ 6000C0C :                     		align 4
(2)  942/ 6000C0C : 0400 0000 C000 0690 		ltorg
                    C000 068C C000 067C 
                    C000 066C C000 0670 
                    C000 0688 C000 0684 
                    0140                
(2)  943/ 6000C2E :                     
(2)  944/ 6000C2E :                     ; ---------------------------------------
(2)  945/ 6000C2E :                     ; MarsVideo_MoveBg
(2)  946/ 6000C2E :                     ;
(2)  947/ 6000C2E :                     ; This updates the background's
(2)  948/ 6000C2E :                     ; X/Y position
(2)  949/ 6000C2E :                     ;
(2)  950/ 6000C2E :                     ; Call this during VBlank.
(2)  951/ 6000C2E :                     ; ---------------------------------------
(2)  952/ 6000C2E :                     
(2)  953/ 6000C2E :                     MarsVideo_MoveBg:
(2)  954/ 6000C2E : DE7A                		mov	#RAM_Mars_Background,r14
(2)  955/ 6000C30 : 50E8                		mov	@(mbg_data,r14),r0
(2)  956/ 6000C32 : 8800                		cmp/eq	#0,r0
(2)  957/ 6000C34 : 8B01                		bf	.has_scrldata
(2)  958/ 6000C36 : 000B                		rts
(2)  959/ 6000C38 : 0009                		nop
(2)  960/ 6000C3A :                     .has_scrldata:
(2)  961/ 6000C3A : E100                		mov	#0,r1
(2)  962/ 6000C3C : E200                		mov	#0,r2
(2)  963/ 6000C3E : 50ED                		mov	@(mbg_xpos,r14),r0	; 0000.0000
(2)  964/ 6000C40 : 4029                		shlr16	r0
(2)  965/ 6000C42 : 600F                		exts.w	r0,r0
(2)  966/ 6000C44 : 6303                		mov	r0,r3
(2)  967/ 6000C46 : 85E2                		mov.w	@(mbg_xpos_old,r14),r0
(2)  968/ 6000C48 : 3300                		cmp/eq	r0,r3
(2)  969/ 6000C4A : 8901                		bt	.xequ
(2)  970/ 6000C4C : 6133                		mov	r3,r1
(2)  971/ 6000C4E : 3108                		sub	r0,r1
(2)  972/ 6000C50 :                     .xequ:
(2)  973/ 6000C50 : 6033                		mov	r3,r0
(2)  974/ 6000C52 : 81E2                		mov.w	r0,@(mbg_xpos_old,r14)
(2)  975/ 6000C54 : 50EE                		mov	@(mbg_ypos,r14),r0	; 0000.0000
(2)  976/ 6000C56 : 4029                		shlr16	r0
(2)  977/ 6000C58 : 600F                		exts.w	r0,r0
(2)  978/ 6000C5A : 6303                		mov	r0,r3
(2)  979/ 6000C5C : 85E3                		mov.w	@(mbg_ypos_old,r14),r0
(2)  980/ 6000C5E : 3300                		cmp/eq	r0,r3
(2)  981/ 6000C60 : 8901                		bt	.yequ
(2)  982/ 6000C62 : 6233                		mov	r3,r2
(2)  983/ 6000C64 : 3208                		sub	r0,r2
(2)  984/ 6000C66 :                     .yequ:
(2)  985/ 6000C66 : 6033                		mov	r3,r0
(2)  986/ 6000C68 : 81E3                		mov.w	r0,@(mbg_ypos_old,r14)
(2)  987/ 6000C6A : 4111                		cmp/pz	r1
(2)  988/ 6000C6C : 8900                		bt	.x_stend
(2)  989/ 6000C6E : 611F                		exts	r1,r1
(2)  990/ 6000C70 :                     .x_stend:
(2)  991/ 6000C70 : 4211                		cmp/pz	r2
(2)  992/ 6000C72 : 8900                		bt	.y_stend
(2)  993/ 6000C74 : 622F                		exts	r2,r2
(2)  994/ 6000C76 :                     .y_stend:
(2)  995/ 6000C76 :                     
(2)  996/ 6000C76 :                     	; 256-color BG mode flag goes here
(2)  997/ 6000C76 :                     ; 		mov	r1,r0
(2)  998/ 6000C76 :                     ; 		or	r2,r0
(2)  999/ 6000C76 :                     ; 		cmp/eq	#0,r0
(2) 1000/ 6000C76 :                     ; 		bt	.no_chng
(2) 1001/ 6000C76 :                     ; 		mov	#0,r0
(2) 1002/ 6000C76 :                     ; 		mov.w	r0,@(marsGbl_XPatch,gbr)
(2) 1003/ 6000C76 :                     .no_chng:
(2) 1004/ 6000C76 : C510                		mov.w	@(marsGbl_XShift,gbr),r0	; Also update the XShift
(2) 1005/ 6000C78 : 301C                		add	r1,r0				; bit for 256-color mode
(2) 1006/ 6000C7A : C110                		mov.w	r0,@(marsGbl_XShift,gbr)
(2) 1007/ 6000C7C :                     
(2) 1008/ 6000C7C :                     	; ---------------------------------------
(2) 1009/ 6000C7C :                     	; Y Framebuffer position
(2) 1010/ 6000C7C :                     	; ---------------------------------------
(2) 1011/ 6000C7C :                     
(2) 1012/ 6000C7C : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2) 1013/ 6000C7E : 6303                		mov	r0,r3
(2) 1014/ 6000C80 : 85EA                		mov.w	@(mbg_yfb,r14),r0
(2) 1015/ 6000C82 : 6403                		mov	r0,r4
(2) 1016/ 6000C84 : 342C                		add	r2,r4
(2) 1017/ 6000C86 : 4215                		cmp/pl	r2
(2) 1018/ 6000C88 : 8B02                		bf	.ypu_negtv
(2) 1019/ 6000C8A : 3433                		cmp/ge	r3,r4
(2) 1020/ 6000C8C : 8B00                		bf	.ypu_negtv
(2) 1021/ 6000C8E : 3438                		sub	r3,r4
(2) 1022/ 6000C90 :                     .ypu_negtv:
(2) 1023/ 6000C90 : 4211                		cmp/pz	r2
(2) 1024/ 6000C92 : 8902                		bt	.ypu_postv
(2) 1025/ 6000C94 : 4411                		cmp/pz	r4
(2) 1026/ 6000C96 : 8900                		bt	.ypu_postv
(2) 1027/ 6000C98 : 343C                		add	r3,r4
(2) 1028/ 6000C9A :                     .ypu_postv:
(2) 1029/ 6000C9A : 6043                		mov	r4,r0
(2) 1030/ 6000C9C : 81EA                		mov.w	r0,@(mbg_yfb,r14)
(2) 1031/ 6000C9E :                     
(2) 1032/ 6000C9E :                     	; ---------------------------------------
(2) 1033/ 6000C9E :                     	; Update Framebuffer TOP-LEFT position
(2) 1034/ 6000C9E :                     	; ---------------------------------------
(2) 1035/ 6000C9E :                     
(2) 1036/ 6000C9E : 53E7                		mov	@(mbg_intrl_size,r14),r3
(2) 1037/ 6000CA0 : 50E9                		mov	@(mbg_fbpos,r14),r0
(2) 1038/ 6000CA2 : 301C                		add	r1,r0
(2) 1039/ 6000CA4 : 4115                		cmp/pl	r1
(2) 1040/ 6000CA6 : 8B02                		bf	.yx_negtv
(2) 1041/ 6000CA8 : 3033                		cmp/ge	r3,r0
(2) 1042/ 6000CAA : 8B00                		bf	.yx_negtv
(2) 1043/ 6000CAC : 3038                		sub	r3,r0
(2) 1044/ 6000CAE :                     .yx_negtv:
(2) 1045/ 6000CAE : 4111                		cmp/pz	r1
(2) 1046/ 6000CB0 : 8902                		bt	.yx_postv
(2) 1047/ 6000CB2 : 4011                		cmp/pz	r0
(2) 1048/ 6000CB4 : 8900                		bt	.yx_postv
(2) 1049/ 6000CB6 : 303C                		add	r3,r0
(2) 1050/ 6000CB8 :                     .yx_postv:
(2) 1051/ 6000CB8 : 1E09                		mov	r0,@(mbg_fbpos,r14)
(2) 1052/ 6000CBA :                     
(2) 1053/ 6000CBA :                     	; ---------------------------------------
(2) 1054/ 6000CBA :                     	; Update background draw-heads
(2) 1055/ 6000CBA :                     	; r1 - X left/right
(2) 1056/ 6000CBA :                     	; r2 - Y up/down
(2) 1057/ 6000CBA :                     	; ---------------------------------------
(2) 1058/ 6000CBA :                     
(2) 1059/ 6000CBA : 85E8                		mov.w	@(mbg_width,r14),r0
(2) 1060/ 6000CBC : 6303                		mov	r0,r3
(2) 1061/ 6000CBE : 85E9                		mov.w	@(mbg_height,r14),r0
(2) 1062/ 6000CC0 : 6403                		mov	r0,r4
(2) 1063/ 6000CC2 : 85E5                		mov.w	@(mbg_xinc_r,r14),r0
(2) 1064/ 6000CC4 : 6503                		mov	r0,r5
(2) 1065/ 6000CC6 : 85E4                		mov.w	@(mbg_xinc_l,r14),r0
(2) 1066/ 6000CC8 : 6603                		mov	r0,r6
(2) 1067/ 6000CCA : 85E6                		mov.w	@(mbg_yinc_u,r14),r0
(2) 1068/ 6000CCC : 6703                		mov	r0,r7
(2) 1069/ 6000CCE : 85E7                		mov.w	@(mbg_yinc_d,r14),r0
(2) 1070/ 6000CD0 : 6803                		mov	r0,r8
(2) 1071/ 6000CD2 : 351C                		add	r1,r5
(2) 1072/ 6000CD4 : 4115                		cmp/pl	r1
(2) 1073/ 6000CD6 : 8B02                		bf	.xnegtv
(2) 1074/ 6000CD8 : 3533                		cmp/ge	r3,r5
(2) 1075/ 6000CDA : 8B00                		bf	.xnegtv
(2) 1076/ 6000CDC : 3538                		sub	r3,r5
(2) 1077/ 6000CDE :                     .xnegtv:
(2) 1078/ 6000CDE : 4111                		cmp/pz	r1
(2) 1079/ 6000CE0 : 8902                		bt	.xpostv
(2) 1080/ 6000CE2 : 4511                		cmp/pz	r5
(2) 1081/ 6000CE4 : 8900                		bt	.xpostv
(2) 1082/ 6000CE6 : 353C                		add	r3,r5
(2) 1083/ 6000CE8 :                     .xpostv:
(2) 1084/ 6000CE8 : 361C                		add	r1,r6
(2) 1085/ 6000CEA : 4115                		cmp/pl	r1
(2) 1086/ 6000CEC : 8B02                		bf	.xnegtvl
(2) 1087/ 6000CEE : 3633                		cmp/ge	r3,r6
(2) 1088/ 6000CF0 : 8B00                		bf	.xnegtvl
(2) 1089/ 6000CF2 : 3638                		sub	r3,r6
(2) 1090/ 6000CF4 :                     .xnegtvl:
(2) 1091/ 6000CF4 : 4111                		cmp/pz	r1
(2) 1092/ 6000CF6 : 8902                		bt	.xpostvl
(2) 1093/ 6000CF8 : 4611                		cmp/pz	r6
(2) 1094/ 6000CFA : 8900                		bt	.xpostvl
(2) 1095/ 6000CFC : 363C                		add	r3,r6
(2) 1096/ 6000CFE :                     .xpostvl:
(2) 1097/ 6000CFE :                     
(2) 1098/ 6000CFE : 372C                		add	r2,r7
(2) 1099/ 6000D00 : 4215                		cmp/pl	r2
(2) 1100/ 6000D02 : 8B02                		bf	.ynegtv
(2) 1101/ 6000D04 : 3743                		cmp/ge	r4,r7
(2) 1102/ 6000D06 : 8B00                		bf	.ynegtv
(2) 1103/ 6000D08 : 3748                		sub	r4,r7
(2) 1104/ 6000D0A :                     .ynegtv:
(2) 1105/ 6000D0A : 4211                		cmp/pz	r2
(2) 1106/ 6000D0C : 8902                		bt	.ypostv
(2) 1107/ 6000D0E : 4711                		cmp/pz	r7
(2) 1108/ 6000D10 : 8900                		bt	.ypostv
(2) 1109/ 6000D12 : 374C                		add	r4,r7
(2) 1110/ 6000D14 :                     .ypostv:
(2) 1111/ 6000D14 : 382C                		add	r2,r8
(2) 1112/ 6000D16 : 4215                		cmp/pl	r2
(2) 1113/ 6000D18 : 8B02                		bf	.ynegtvl
(2) 1114/ 6000D1A : 3843                		cmp/ge	r4,r8
(2) 1115/ 6000D1C : 8B00                		bf	.ynegtvl
(2) 1116/ 6000D1E : 3848                		sub	r4,r8
(2) 1117/ 6000D20 :                     .ynegtvl:
(2) 1118/ 6000D20 : 4211                		cmp/pz	r2
(2) 1119/ 6000D22 : 8902                		bt	.ypostvl
(2) 1120/ 6000D24 : 4811                		cmp/pz	r8
(2) 1121/ 6000D26 : 8900                		bt	.ypostvl
(2) 1122/ 6000D28 : 384C                		add	r4,r8
(2) 1123/ 6000D2A :                     .ypostvl:
(2) 1124/ 6000D2A : 6053                		mov	r5,r0
(2) 1125/ 6000D2C : 81E5                		mov.w	r0,@(mbg_xinc_r,r14)
(2) 1126/ 6000D2E : 6063                		mov	r6,r0
(2) 1127/ 6000D30 : 81E4                		mov.w	r0,@(mbg_xinc_l,r14)
(2) 1128/ 6000D32 : 6073                		mov	r7,r0
(2) 1129/ 6000D34 : 81E6                		mov.w	r0,@(mbg_yinc_u,r14)
(2) 1130/ 6000D36 : 6083                		mov	r8,r0
(2) 1131/ 6000D38 : 81E7                		mov.w	r0,@(mbg_yinc_d,r14)
(2) 1132/ 6000D3A :                     
(2) 1133/ 6000D3A :                     	; ---------------------------------------
(2) 1134/ 6000D3A :                     
(2) 1135/ 6000D3A : D838                		mov	#Cach_Drw_U,r8
(2) 1136/ 6000D3C : D938                		mov	#Cach_Drw_D,r9
(2) 1137/ 6000D3E : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1138/ 6000D40 : 6303                		mov	r0,r3
(2) 1139/ 6000D42 : 2309                		and	r0,r3			; r3 - block size to check
(2) 1140/ 6000D44 : E500                		mov	#0,r5
(2) 1141/ 6000D46 : 84E3                		mov.b	@(mbg_yset,r14),r0
(2) 1142/ 6000D48 : 302C                		add	r2,r0
(2) 1143/ 6000D4A : 6603                		mov	r0,r6
(2) 1144/ 6000D4C : 2038                		tst	r3,r0
(2) 1145/ 6000D4E : 8915                		bt	.ydr_busy
(2) 1146/ 6000D50 : 4215                		cmp/pl	r2
(2) 1147/ 6000D52 : 8B08                		bf	.reqd_b
(2) 1148/ 6000D54 : 6082                		mov	@r8,r0
(2) 1149/ 6000D56 : 6403                		mov	r0,r4
(2) 1150/ 6000D58 : 6092                		mov	@r9,r0
(2) 1151/ 6000D5A : 204B                		or	r4,r0
(2) 1152/ 6000D5C : 8800                		cmp/eq	#0,r0
(2) 1153/ 6000D5E : 8B0D                		bf	.ydr_busy
(2) 1154/ 6000D60 : E002                		mov	#2,r0
(2) 1155/ 6000D62 : 2902                		mov	r0,@r9
(2) 1156/ 6000D64 : 7501                		add	#$01,r5
(2) 1157/ 6000D66 :                     .reqd_b:
(2) 1158/ 6000D66 : 4211                		cmp/pz	r2
(2) 1159/ 6000D68 : 8908                		bt	.ydr_busy
(2) 1160/ 6000D6A : 6082                		mov	@r8,r0
(2) 1161/ 6000D6C : 6403                		mov	r0,r4
(2) 1162/ 6000D6E : 6092                		mov	@r9,r0
(2) 1163/ 6000D70 : 204B                		or	r4,r0
(2) 1164/ 6000D72 : 8800                		cmp/eq	#0,r0
(2) 1165/ 6000D74 : 8B02                		bf	.ydr_busy
(2) 1166/ 6000D76 : E002                		mov	#2,r0
(2) 1167/ 6000D78 : 2802                		mov	r0,@r8
(2) 1168/ 6000D7A : 7501                		add	#$01,r5
(2) 1169/ 6000D7C :                     .ydr_busy:
(2) 1170/ 6000D7C :                     
(2) 1171/ 6000D7C : D829                		mov	#Cach_Drw_L,r8
(2) 1172/ 6000D7E : D92A                		mov	#Cach_Drw_R,r9
(2) 1173/ 6000D80 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1174/ 6000D82 : 6403                		mov	r0,r4
(2) 1175/ 6000D84 : 6063                		mov	r6,r0
(2) 1176/ 6000D86 : 4410                		dt	r4
(2) 1177/ 6000D88 : 2049                		and	r4,r0
(2) 1178/ 6000D8A : 80E3                		mov.b	r0,@(mbg_yset,r14)
(2) 1179/ 6000D8C : 84E2                		mov.b	@(mbg_xset,r14),r0
(2) 1180/ 6000D8E : 301C                		add	r1,r0
(2) 1181/ 6000D90 : 6603                		mov	r0,r6
(2) 1182/ 6000D92 : 2038                		tst	r3,r0
(2) 1183/ 6000D94 : 8915                		bt	.ydl_busy
(2) 1184/ 6000D96 : 4115                		cmp/pl	r1
(2) 1185/ 6000D98 : 8B08                		bf	.reqr_b
(2) 1186/ 6000D9A : 6082                		mov	@r8,r0
(2) 1187/ 6000D9C : 6403                		mov	r0,r4
(2) 1188/ 6000D9E : 6092                		mov	@r9,r0
(2) 1189/ 6000DA0 : 204B                		or	r4,r0
(2) 1190/ 6000DA2 : 8800                		cmp/eq	#0,r0
(2) 1191/ 6000DA4 : 8B0D                		bf	.ydl_busy
(2) 1192/ 6000DA6 : E002                		mov	#2,r0
(2) 1193/ 6000DA8 : 2902                		mov	r0,@r9
(2) 1194/ 6000DAA : 7502                		add	#$02,r5
(2) 1195/ 6000DAC :                     .reqr_b:
(2) 1196/ 6000DAC : 4111                		cmp/pz	r1
(2) 1197/ 6000DAE : 8908                		bt	.ydl_busy
(2) 1198/ 6000DB0 : 6082                		mov	@r8,r0
(2) 1199/ 6000DB2 : 6403                		mov	r0,r4
(2) 1200/ 6000DB4 : 6092                		mov	@r9,r0
(2) 1201/ 6000DB6 : 204B                		or	r4,r0
(2) 1202/ 6000DB8 : 8800                		cmp/eq	#0,r0
(2) 1203/ 6000DBA : 8B02                		bf	.ydl_busy
(2) 1204/ 6000DBC : E002                		mov	#2,r0
(2) 1205/ 6000DBE : 2802                		mov	r0,@r8
(2) 1206/ 6000DC0 : 7502                		add	#$02,r5
(2) 1207/ 6000DC2 :                     .ydl_busy:
(2) 1208/ 6000DC2 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1209/ 6000DC4 : 6403                		mov	r0,r4
(2) 1210/ 6000DC6 : 6063                		mov	r6,r0
(2) 1211/ 6000DC8 : 4410                		dt	r4
(2) 1212/ 6000DCA : 2049                		and	r4,r0
(2) 1213/ 6000DCC : 80E2                		mov.b	r0,@(mbg_xset,r14)
(2) 1214/ 6000DCE :                     
(2) 1215/ 6000DCE :                     	; Make snapshot of scroll variables for drawing
(2) 1216/ 6000DCE : 4515                		cmp/pl	r5
(2) 1217/ 6000DD0 : 8B20                		bf	.dont_snap
(2) 1218/ 6000DD2 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1219/ 6000DD4 : 600B                		neg	r0,r0
(2) 1220/ 6000DD6 : 6703                		mov	r0,r7
(2) 1221/ 6000DD8 : D114                		mov	#Cach_XHead_L,r1
(2) 1222/ 6000DDA : D215                		mov	#Cach_XHead_R,r2
(2) 1223/ 6000DDC : D315                		mov	#Cach_YHead_U,r3
(2) 1224/ 6000DDE : D416                		mov	#Cach_YHead_D,r4
(2) 1225/ 6000DE0 : D516                		mov	#Cach_BgFbPos_V,r5
(2) 1226/ 6000DE2 : D617                		mov	#Cach_BgFbPos_H,r6
(2) 1227/ 6000DE4 : 85E4                		mov.w	@(mbg_xinc_l,r14),r0
(2) 1228/ 6000DE6 : 2079                		and	r7,r0
(2) 1229/ 6000DE8 : 2102                		mov	r0,@r1
(2) 1230/ 6000DEA : 85E5                		mov.w	@(mbg_xinc_r,r14),r0
(2) 1231/ 6000DEC : 2079                		and	r7,r0
(2) 1232/ 6000DEE : 2202                		mov	r0,@r2
(2) 1233/ 6000DF0 : 85E6                		mov.w	@(mbg_yinc_u,r14),r0
(2) 1234/ 6000DF2 : 2079                		and	r7,r0
(2) 1235/ 6000DF4 : 2302                		mov	r0,@r3
(2) 1236/ 6000DF6 : 85E7                		mov.w	@(mbg_yinc_d,r14),r0
(2) 1237/ 6000DF8 : 2079                		and	r7,r0
(2) 1238/ 6000DFA : 2402                		mov	r0,@r4
(2) 1239/ 6000DFC : 85EA                		mov.w	@(mbg_yfb,r14),r0
(2) 1240/ 6000DFE : 2079                		and	r7,r0
(2) 1241/ 6000E00 : 2502                		mov	r0,@r5
(2) 1242/ 6000E02 : 50E9                		mov	@(mbg_fbpos,r14),r0
(2) 1243/ 6000E04 : 2079                		and	r7,r0
(2) 1244/ 6000E06 : 6703                		mov	r0,r7
(2) 1245/ 6000E08 : 84E1                		mov.b	@(mbg_flags,r14),r0
(2) 1246/ 6000E0A : C901                		and	#1,r0
(2) 1247/ 6000E0C : 2008                		tst	r0,r0
(2) 1248/ 6000E0E : 8900                		bt	.indxmode
(2) 1249/ 6000E10 : 4700                		shll	r7
(2) 1250/ 6000E12 :                     .indxmode:
(2) 1251/ 6000E12 : 2672                		mov	r7,@r6
(2) 1252/ 6000E14 :                     .dont_snap:
(2) 1253/ 6000E14 :                     
(2) 1254/ 6000E14 : 000B                		rts
(2) 1255/ 6000E16 : 0009                		nop
(2) 1256/ 6000E18 :                     		align 4
(2) 1257/ 6000E18 : 0600 6298 C000 066C 		ltorg
                    C000 0670 C000 0674 
                    C000 0678 C000 067C 
                    C000 0680 C000 0684 
                    C000 0688 C000 068C 
                    C000 0690           
(2) 1258/ 6000E44 :                     
(2) 1259/ 6000E44 :                     ; ---------------------------------------
(2) 1260/ 6000E44 :                     ; Make a visible section on screen
(2) 1261/ 6000E44 :                     ;
(2) 1262/ 6000E44 :                     ; r1 - Background buffer
(2) 1263/ 6000E44 :                     ; r2 - Top Y
(2) 1264/ 6000E44 :                     ; r3 - Bottom Y
(2) 1265/ 6000E44 :                     ; ---------------------------------------
(2) 1266/ 6000E44 :                     
(2) 1267/ 6000E44 :                     MarsVideo_MakeTbl:
(2) 1268/ 6000E44 : DE23                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2) 1269/ 6000E46 : 5D1A                		mov	@(mbg_fbdata,r1),r13		; r13 - Framebuffer pixeldata position
(2) 1270/ 6000E48 : 5C17                		mov	@(mbg_intrl_size,r1),r12	; r12 - Full size of screen-scroll
(2) 1271/ 6000E4A : EA00                		mov	#0,r10				; r10 - line counter
(2) 1272/ 6000E4C : 851C                		mov.w	@(mbg_intrl_w,r1),r0
(2) 1273/ 6000E4E : 6903                		mov	r0,r9				;  r9 - Next line to add
(2) 1274/ 6000E50 : 6623                		mov	r2,r6
(2) 1275/ 6000E52 : 68E3                		mov	r14,r8
(2) 1276/ 6000E54 : 6023                		mov	r2,r0
(2) 1277/ 6000E56 : 4000                		shll	r0
(2) 1278/ 6000E58 : 380C                		add	r0,r8
(2) 1279/ 6000E5A : 851A                		mov.w	@(mbg_yfb,r1),r0
(2) 1280/ 6000E5C : 209E                		mulu	r9,r0
(2) 1281/ 6000E5E : 5519                		mov	@(mbg_fbpos,r1),r5
(2) 1282/ 6000E60 :                     ; 		shll	r5
(2) 1283/ 6000E60 : 6753                		mov	r5,r7
(2) 1284/ 6000E62 : 001A                		sts	macl,r0
(2) 1285/ 6000E64 : 370C                		add	r0,r7
(2) 1286/ 6000E66 : 943B                		mov	#$FF,r4
(2) 1287/ 6000E68 :                     .ln_loop:
(2) 1288/ 6000E68 : 6573                		mov	r7,r5
(2) 1289/ 6000E6A : 35C3                		cmp/ge	r12,r5
(2) 1290/ 6000E6C : 8B00                		bf	.xl_r
(2) 1291/ 6000E6E : 35C8                		sub	r12,r5
(2) 1292/ 6000E70 :                     .xl_r:
(2) 1293/ 6000E70 : 4511                		cmp/pz	r5
(2) 1294/ 6000E72 : 8900                		bt	.xl_l
(2) 1295/ 6000E74 : 35CC                		add	r12,r5
(2) 1296/ 6000E76 :                     .xl_l:
(2) 1297/ 6000E76 : 6753                		mov	r5,r7
(2) 1298/ 6000E78 : 379C                		add	r9,r7		; Add Y
(2) 1299/ 6000E7A : 35DC                		add	r13,r5		; Add Framebuffer position
(2) 1300/ 6000E7C : 4501                		shlr	r5		; divide by 2 (shift reg does the missing bit 0)
(2) 1301/ 6000E7E : 2851                		mov.w	r5,@r8		; send to FB's table
(2) 1302/ 6000E80 : 7802                		add	#2,r8
(2) 1303/ 6000E82 : 7A02                		add	#2,r10
(2) 1304/ 6000E84 : 3630                		cmp/eq	r3,r6
(2) 1305/ 6000E86 : 8FEF                		bf/s	.ln_loop
(2) 1306/ 6000E88 : 7601                		add	#1,r6
(2) 1307/ 6000E8A :                     
(2) 1308/ 6000E8A :                     .no_lines:
(2) 1309/ 6000E8A : 000B                		rts
(2) 1310/ 6000E8C : 0009                		nop
(2) 1311/ 6000E8E :                     		align 4
(2) 1312/ 6000E90 :                     
(2) 1313/ 6000E90 :                     ; ---------------------------------------
(2) 1314/ 6000E90 :                     ; Call this after BEFORE swapping
(2) 1315/ 6000E90 :                     ; to fix that Xshift bit issue on
(2) 1316/ 6000E90 :                     ; Real Hardware
(2) 1317/ 6000E90 :                     ; ---------------------------------------
(2) 1318/ 6000E90 :                     
(2) 1319/ 6000E90 :                     MarsVideo_FixTblShift:
(2) 1320/ 6000E90 : C510                		mov.w	@(marsGbl_XShift,gbr),r0
(2) 1321/ 6000E92 : C901                		and	#1,r0
(2) 1322/ 6000E94 : 8801                		cmp/eq	#1,r0
(2) 1323/ 6000E96 : 8B1A                		bf	.ptchset
(2) 1324/ 6000E98 : DE0E                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2) 1325/ 6000E9A :                     ; 		mov.b	@(mbg_flags,r1),r0		; Background is Indexed?
(2) 1326/ 6000E9A :                     ; 		and	#%00000001,r0
(2) 1327/ 6000E9A :                     ; 		tst	r0,r0
(2) 1328/ 6000E9A :                     ; 		bf	.ptchset
(2) 1329/ 6000E9A : 6DE3                		mov	r14,r13
(2) 1330/ 6000E9C : DC0E                		mov	#_framebuffer+FBVRAM_PATCH,r12	; r13 - Output for patched pixel lines
(2) 1331/ 6000E9E : 9B20                		mov	#240,r11
(2) 1332/ 6000EA0 : 9A1E                		mov	#$FF,r10
(2) 1333/ 6000EA2 : D90E                		mov	#$FFFF,r9
(2) 1334/ 6000EA4 :                     ; 		mov	#-2,r8
(2) 1335/ 6000EA4 :                     .loop:
(2) 1336/ 6000EA4 : 60D1                		mov.w	@r13,r0
(2) 1337/ 6000EA6 : 2099                		and	r9,r0
(2) 1338/ 6000EA8 : 6703                		mov	r0,r7
(2) 1339/ 6000EAA : 20A9                		and	r10,r0
(2) 1340/ 6000EAC : 30A0                		cmp/eq	r10,r0
(2) 1341/ 6000EAE : 8B0B                		bf	.tblexit
(2) 1342/ 6000EB0 : 4700                		shll	r7
(2) 1343/ 6000EB2 : 37EC                		add	r14,r7
(2) 1344/ 6000EB4 : 60C3                		mov	r12,r0
(2) 1345/ 6000EB6 : 4001                		shlr	r0
(2) 1346/ 6000EB8 : 2D01                		mov.w	r0,@r13
(2) 1347/ 6000EBA : 9313                		mov	#(320+4)/2,r3
(2) 1348/ 6000EBC :                     .copy:
(2) 1349/ 6000EBC : 6071                		mov.w	@r7,r0
(2) 1350/ 6000EBE : 2C01                		mov.w	r0,@r12
(2) 1351/ 6000EC0 : 7702                		add	#2,r7
(2) 1352/ 6000EC2 : 4310                		dt	r3
(2) 1353/ 6000EC4 : 8FFA                		bf/s	.copy
(2) 1354/ 6000EC6 : 7C02                		add	#2,r12
(2) 1355/ 6000EC8 :                     .tblexit:
(2) 1356/ 6000EC8 : 4B10                		dt	r11
(2) 1357/ 6000ECA : 8FEB                		bf/s	.loop
(2) 1358/ 6000ECC : 7D02                		add	#2,r13
(2) 1359/ 6000ECE :                     .ptchset:
(2) 1360/ 6000ECE : 000B                		rts
(2) 1361/ 6000ED0 : 0009                		nop
(2) 1362/ 6000ED2 :                     		align 4
(2) 1363/ 6000ED4 : 0400 0000 0401 D000 		ltorg
                    0000 FFFF 00FF 00F0 
                    00A2                
(2) 1364/ 6000EE6 :                     
(2) 1365/ 6000EE6 :                     ; ------------------------------------------------
(2) 1366/ 6000EE6 :                     ; MarsVideo_MkScrlField
(2) 1367/ 6000EE6 :                     ;
(2) 1368/ 6000EE6 :                     ; Make a new internal background
(2) 1369/ 6000EE6 :                     ; scrolling buffer
(2) 1370/ 6000EE6 :                     ;
(2) 1371/ 6000EE6 :                     ; First call this, set your values
(2) 1372/ 6000EE6 :                     ; Then call MarsVideo_SetBg to set
(2) 1373/ 6000EE6 :                     ; the source image (ROM or RAM)
(2) 1374/ 6000EE6 :                     ;
(2) 1375/ 6000EE6 :                     ; r1 - Background buffer
(2) 1376/ 6000EE6 :                     ; r2 - Output framebuffer data
(2) 1377/ 6000EE6 :                     ; r3 - Scroll block size (4 BYTE ALIGNED)
(2) 1378/ 6000EE6 :                     ; r4 - Scroll visible width
(2) 1379/ 6000EE6 :                     ; r5 - Scroll visible height
(2) 1380/ 6000EE6 :                     ; r6 - Type: Indexed or Direct (TODO)
(2) 1381/ 6000EE6 :                     ; ------------------------------------------------
(2) 1382/ 6000EE6 :                     
(2) 1383/ 6000EE6 :                     MarsVideo_MkScrlField:
(2) 1384/ 6000EE6 : 6063                		mov	r6,r0
(2) 1385/ 6000EE8 : C901                		and	#1,r0
(2) 1386/ 6000EEA : 2008                		tst	r0,r0
(2) 1387/ 6000EEC : 8900                		bt	.no_indx
(2) 1388/ 6000EEE : 4400                		shll	r4
(2) 1389/ 6000EF0 :                     .no_indx:
(2) 1390/ 6000EF0 : 343C                		add	r3,r4		; add block to width/height
(2) 1391/ 6000EF2 : 353C                		add	r3,r5
(2) 1392/ 6000EF4 : 112A                		mov	r2,@(mbg_fbdata,r1)
(2) 1393/ 6000EF6 : 6033                		mov	r3,r0
(2) 1394/ 6000EF8 : 811B                		mov.w	r0,@(mbg_intrl_blk,r1)
(2) 1395/ 6000EFA : 6043                		mov	r4,r0
(2) 1396/ 6000EFC : 811C                		mov.w	r0,@(mbg_intrl_w,r1)
(2) 1397/ 6000EFE : 6053                		mov	r5,r0
(2) 1398/ 6000F00 : 811D                		mov.w	r0,@(mbg_intrl_h,r1)
(2) 1399/ 6000F02 : 254E                		mulu	r4,r5
(2) 1400/ 6000F04 : 001A                		sts	macl,r0
(2) 1401/ 6000F06 : 1107                		mov	r0,@(mbg_intrl_size,r1)
(2) 1402/ 6000F08 : 6063                		mov	r6,r0
(2) 1403/ 6000F0A : 8011                		mov.b	r0,@(mbg_flags,r1)
(2) 1404/ 6000F0C : 000B                		rts
(2) 1405/ 6000F0E : 0009                		nop
(2) 1406/ 6000F10 :                     		align 4
(2) 1407/ 6000F10 :                     		ltorg
(2) 1408/ 6000F10 :                     
(2) 1409/ 6000F10 :                     ; ------------------------------------------------
(2) 1410/ 6000F10 :                     ; MarsVideo_SetBg
(2) 1411/ 6000F10 :                     ;
(2) 1412/ 6000F10 :                     ; Set pointer to read the pixel-data
(2) 1413/ 6000F10 :                     ;
(2) 1414/ 6000F10 :                     ; r1 - Background buffer
(2) 1415/ 6000F10 :                     ; r2 - Pixeldata output location on Framebuffer
(2) 1416/ 6000F10 :                     ; r3 - Source image WIDTH
(2) 1417/ 6000F10 :                     ; r4 - Source image HEIGHT
(2) 1418/ 6000F10 :                     ;
(2) 1419/ 6000F10 :                     ; WIDTH AND HEIGHT MUST BE ALIGNED IN "BLOCKS"
(2) 1420/ 6000F10 :                     ; ------------------------------------------------
(2) 1421/ 6000F10 :                     
(2) 1422/ 6000F10 :                     MarsVideo_SetBg:
(2) 1423/ 6000F10 : D106                		mov	#RAM_Mars_Background,r1
(2) 1424/ 6000F12 : 1128                		mov	r2,@(mbg_data,r1)
(2) 1425/ 6000F14 : 8411                		mov.b	@(mbg_flags,r1),r0
(2) 1426/ 6000F16 : C901                		and	#1,r0
(2) 1427/ 6000F18 : 2008                		tst	r0,r0
(2) 1428/ 6000F1A : 8900                		bt	.indxmode
(2) 1429/ 6000F1C : 4300                		shll	r3
(2) 1430/ 6000F1E :                     .indxmode:
(2) 1431/ 6000F1E : 6033                		mov	r3,r0
(2) 1432/ 6000F20 : 8118                		mov.w	r0,@(mbg_width,r1)
(2) 1433/ 6000F22 : 6043                		mov	r4,r0
(2) 1434/ 6000F24 : 8119                		mov.w	r0,@(mbg_height,r1)
(2) 1435/ 6000F26 : 000B                		rts
(2) 1436/ 6000F28 : 0009                		nop
(2) 1437/ 6000F2A :                     		align 4
(2) 1438/ 6000F2C : 0600 6298           		ltorg
(2) 1439/ 6000F30 :                     
(2) 1440/ 6000F30 :                     ; ------------------------------------------------
(2) 1441/ 6000F30 :                     
(2) 1442/ 6000F30 :                     ; ; r1 - Left X
(2) 1443/ 6000F30 :                     ; ; r2 - Right X
(2) 1444/ 6000F30 :                     ; ; r3 - Y Position (max 240)
(2) 1445/ 6000F30 :                     ; ; r4 - Using these pixel(s)
(2) 1446/ 6000F30 :                     ; ;
(2) 1447/ 6000F30 :                     ; ; Uses the first background's
(2) 1448/ 6000F30 :                     ; ; top-left and Y
(2) 1449/ 6000F30 :                     ;
(2) 1450/ 6000F30 :                     ; ; TODO: a DirectColor version of this
(2) 1451/ 6000F30 :                     ; VideoMars_DrawLine:
(2) 1452/ 6000F30 :                     ; 		cmp/eq	r1,r2
(2) 1453/ 6000F30 :                     ; 		bt	.same_x
(2) 1454/ 6000F30 :                     ; 		mov	r2,r6
(2) 1455/ 6000F30 :                     ; 		sub	r1,r6
(2) 1456/ 6000F30 :                     ; 		cmp/pl	r6
(2) 1457/ 6000F30 :                     ; 		bf	.same_x
(2) 1458/ 6000F30 :                     ; 		shlr	r6
(2) 1459/ 6000F30 :                     ; 		mov	#RAM_Mars_Background,r14
(2) 1460/ 6000F30 :                     ; 		mov	#_vdpreg,r13
(2) 1461/ 6000F30 :                     ;
(2) 1462/ 6000F30 :                     ; 		mov.w	@(mbg_intrl_h,r14),r0
(2) 1463/ 6000F30 :                     ; 		mov	r0,r7
(2) 1464/ 6000F30 :                     ; 		mov.w	@(mbg_intrl_w,r14),r0
(2) 1465/ 6000F30 :                     ; 		mov	r0,r5
(2) 1466/ 6000F30 :                     ; 		mov.w	@(mbg_yfb,r14),r0
(2) 1467/ 6000F30 :                     ; 		add	r3,r0
(2) 1468/ 6000F30 :                     ; 		cmp/ge	r7,r0
(2) 1469/ 6000F30 :                     ; 		bf	.ylowr
(2) 1470/ 6000F30 :                     ; 		sub	r7,r0
(2) 1471/ 6000F30 :                     ; .ylowr:
(2) 1472/ 6000F30 :                     ; 		mulu	r5,r0
(2) 1473/ 6000F30 :                     ; 		sts	macl,r5
(2) 1474/ 6000F30 :                     ; 		mov	@(mbg_fbdata,r14),r0
(2) 1475/ 6000F30 :                     ; 		add	r0,r5
(2) 1476/ 6000F30 :                     ; 		mov	@(mbg_fbpos,r14),r0
(2) 1477/ 6000F30 :                     ; 		add	r0,r5
(2) 1478/ 6000F30 :                     ; 		add	r1,r5
(2) 1479/ 6000F30 :                     ; 		mov	@(mbg_intrl_size,r14),r0
(2) 1480/ 6000F30 :                     ; 		cmp/gt	r0,r5
(2) 1481/ 6000F30 :                     ; 		bf	.fb_decr
(2) 1482/ 6000F30 :                     ; 		sub	r0,r5
(2) 1483/ 6000F30 :                     ; .fb_decr:
(2) 1484/ 6000F30 :                     ; 		shlr	r5
(2) 1485/ 6000F30 :                     ;
(2) 1486/ 6000F30 :                     ; 	; r5 - topleft pos
(2) 1487/ 6000F30 :                     ; 	; r6 - length
(2) 1488/ 6000F30 :                     ;
(2) 1489/ 6000F30 :                     ; 	; Cross-check
(2) 1490/ 6000F30 :                     ; 		mov	r6,r0
(2) 1491/ 6000F30 :                     ; 		add	r5,r0
(2) 1492/ 6000F30 :                     ; 		mov	r0,r7
(2) 1493/ 6000F30 :                     ; 		mov	r5,r8
(2) 1494/ 6000F30 :                     ; 		shlr8	r7
(2) 1495/ 6000F30 :                     ; 		shlr8	r8
(2) 1496/ 6000F30 :                     ; 		cmp/eq	r7,r8
(2) 1497/ 6000F30 :                     ; 		bt	.single
(2) 1498/ 6000F30 :                     ; 		mov	r0,r8
(2) 1499/ 6000F30 :                     ; 		and	#$FF,r0
(2) 1500/ 6000F30 :                     ; 		cmp/eq	#0,r0
(2) 1501/ 6000F30 :                     ; 		bt	.single
(2) 1502/ 6000F30 :                     ;
(2) 1503/ 6000F30 :                     ; 	; Left write
(2) 1504/ 6000F30 :                     ; 		mov	r6,r7
(2) 1505/ 6000F30 :                     ; 		sub	r0,r6
(2) 1506/ 6000F30 :                     ; 		mov	r6,r0
(2) 1507/ 6000F30 :                     ; 		dt	r0
(2) 1508/ 6000F30 :                     ; 		mov.w	r0,@(filllength,r13)
(2) 1509/ 6000F30 :                     ; 		mov	r5,r0
(2) 1510/ 6000F30 :                     ; 		mov.w	r0,@(fillstart,r13)
(2) 1511/ 6000F30 :                     ; 		mov	r4,r0
(2) 1512/ 6000F30 :                     ; 		mov.w	r0,@(filldata,r13)
(2) 1513/ 6000F30 :                     ; .wait_l:	mov.w	@(vdpsts,r13),r0
(2) 1514/ 6000F30 :                     ; 		and	#%10,r0
(2) 1515/ 6000F30 :                     ; 		tst	r0,r0
(2) 1516/ 6000F30 :                     ; 		bf	.wait_l
(2) 1517/ 6000F30 :                     ;
(2) 1518/ 6000F30 :                     ; 		add	r7,r5
(2) 1519/ 6000F30 :                     ; 		mov	#$100,r6
(2) 1520/ 6000F30 :                     ; 		mov.w	@(fillstart,r13),r0
(2) 1521/ 6000F30 :                     ; 		add	r6,r0
(2) 1522/ 6000F30 :                     ; 		mov.w	r0,@(fillstart,r13)
(2) 1523/ 6000F30 :                     ; 		sub	r0,r5
(2) 1524/ 6000F30 :                     ; 		mov	r5,r0
(2) 1525/ 6000F30 :                     ; 		dt	r0
(2) 1526/ 6000F30 :                     ; 		mov.w	r0,@(filllength,r13)
(2) 1527/ 6000F30 :                     ; 		mov	r4,r0
(2) 1528/ 6000F30 :                     ; 		mov.w	r0,@(filldata,r13)
(2) 1529/ 6000F30 :                     ; .wait_r:	mov.w	@(vdpsts,r13),r0
(2) 1530/ 6000F30 :                     ; 		and	#%10,r0
(2) 1531/ 6000F30 :                     ; 		tst	r0,r0
(2) 1532/ 6000F30 :                     ; 		bf	.wait_r
(2) 1533/ 6000F30 :                     ; 		rts
(2) 1534/ 6000F30 :                     ; 		nop
(2) 1535/ 6000F30 :                     ; 		align 4
(2) 1536/ 6000F30 :                     ;
(2) 1537/ 6000F30 :                     ; ; Single write
(2) 1538/ 6000F30 :                     ; .single:
(2) 1539/ 6000F30 :                     ; 		mov	r6,r0
(2) 1540/ 6000F30 :                     ; 		dt	r0
(2) 1541/ 6000F30 :                     ; 		mov.w	r0,@(filllength,r13)
(2) 1542/ 6000F30 :                     ; 		mov	r5,r0
(2) 1543/ 6000F30 :                     ; 		mov.w	r0,@(fillstart,r13)
(2) 1544/ 6000F30 :                     ; 		mov	r4,r0
(2) 1545/ 6000F30 :                     ; 		mov.w	r0,@(filldata,r13)
(2) 1546/ 6000F30 :                     ; .wait_fb:	mov.w	@(vdpsts,r13),r0
(2) 1547/ 6000F30 :                     ; 		and	#%10,r0
(2) 1548/ 6000F30 :                     ; 		tst	r0,r0
(2) 1549/ 6000F30 :                     ; 		bf	.wait_fb
(2) 1550/ 6000F30 :                     ; 		rts
(2) 1551/ 6000F30 :                     ; 		nop
(2) 1552/ 6000F30 :                     ; 		align 4
(2) 1553/ 6000F30 :                     ; .same_x:
(2) 1554/ 6000F30 :                     ; 		rts
(2) 1555/ 6000F30 :                     ; 		nop
(2) 1556/ 6000F30 :                     ; 		align 4
(2) 1557/ 6000F30 :                     ; 		ltorg
(2) 1558/ 6000F30 :                     
(2) 1559/ 6000F30 :                     ; ====================================================================
(2) 1560/ 6000F30 :                     ; ----------------------------------------------------------------
(2) 1561/ 6000F30 :                     ; Polygons
(2) 1562/ 6000F30 :                     ; ----------------------------------------------------------------
(2) 1563/ 6000F30 :                     
(2) 1564/ 6000F30 :                     
(2) 1565/ 6000F30 :                     ; ====================================================================
(2) 1566/ 6000F30 :                     ; ----------------------------------------------------------------
(2) 1567/ 6000F30 :                     ; 3D SYSTEM
(2) 1568/ 6000F30 :                     ; ----------------------------------------------------------------
(2) 1569/ 6000F30 :                     
(2) 1570/ 6000F30 :                     ; r7 - rotate
(2) 1571/ 6000F30 :                     ; r5 - X
(2) 1572/ 6000F30 :                     ; r6 - Y
(2) 1573/ 6000F30 :                     Rotate_Point
(2) 1574/ 6000F30 : 4708                	shll2	r7
(2) 1575/ 6000F32 : 6073                	mov	r7,r0
(2) 1576/ 6000F34 : D10C                	mov	#sin_table,r1
(2) 1577/ 6000F36 : D20D                	mov	#sin_table+$800,r2
(2) 1578/ 6000F38 : 031E                	mov	@(r0,r1),r3
(2) 1579/ 6000F3A : 042E                	mov	@(r0,r2),r4
(2) 1580/ 6000F3C :                     
(2) 1581/ 6000F3C : 345D                	dmuls.l	r5,r4		; x cos @
(2) 1582/ 6000F3E : 001A                	sts	macl,r0
(2) 1583/ 6000F40 : 010A                	sts	mach,r1
(2) 1584/ 6000F42 : 201D                	xtrct	r1,r0
(2) 1585/ 6000F44 : 336D                	dmuls.l	r6,r3		; y sin @
(2) 1586/ 6000F46 : 011A                	sts	macl,r1
(2) 1587/ 6000F48 : 020A                	sts	mach,r2
(2) 1588/ 6000F4A : 212D                	xtrct	r2,r1
(2) 1589/ 6000F4C : 301C                	add	r1,r0
(2) 1590/ 6000F4E :                     
(2) 1591/ 6000F4E : 633B                	neg	r3,r3
(2) 1592/ 6000F50 : 335D                	dmuls.l	r5,r3		; x -sin @
(2) 1593/ 6000F52 : 011A                	sts	macl,r1
(2) 1594/ 6000F54 : 020A                	sts	mach,r2
(2) 1595/ 6000F56 : 212D                	xtrct	r2,r1
(2) 1596/ 6000F58 : 346D                	dmuls.l	r6,r4		; y cos @
(2) 1597/ 6000F5A : 021A                	sts	macl,r2
(2) 1598/ 6000F5C : 030A                	sts	mach,r3
(2) 1599/ 6000F5E : 223D                	xtrct	r3,r2
(2) 1600/ 6000F60 : 312C                	add	r2,r1
(2) 1601/ 6000F62 :                     
(2) 1602/ 6000F62 : 000B                	rts
(2) 1603/ 6000F64 : 0009                	nop
(2) 1604/ 6000F66 :                     	align 4
(2) 1605/ 6000F68 : 0600 2200 0600 2A00 	ltorg
(2) 1606/ 6000F70 :                     
(2) 1607/ 6000F70 :                     
(1)  918/ 6000F70 :                     		include "system/mars/sound.asm"
(2)    1/ 6000F70 :                     ; ====================================================================
(2)    2/ 6000F70 :                     ; ----------------------------------------------------------------
(2)    3/ 6000F70 :                     ; MARS Sound
(2)    4/ 6000F70 :                     ; ----------------------------------------------------------------
(2)    5/ 6000F70 :                     
(2)    6/ 6000F70 : =$7                 MAX_PWMCHNL	equ	7
(2)    7/ 6000F70 :                     
(2)    8/ 6000F70 :                     ; 32X sound channel
(2)    9/ 6000F70 : (MACRO)             		struct 0
(2)    9/ 6000F70 : =$6000F70           GLBL_LASTPC     set *
(2)    9/   3EE50 :                                     dephase
(2)    9/   3EE50 : =$3EE50             GLBL_LASTORG    set *
(2)    9/       0 :                                     phase 0
(2)   10/       0 :                     mchnsnd_enbl	ds.l 1
(2)   11/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   12/       8 :                     mchnsnd_cchread	ds.l 1
(2)   13/       C :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   14/      10 :                     mchnsnd_start	ds.l 1
(2)   15/      14 :                     mchnsnd_end	ds.l 1
(2)   16/      18 :                     mchnsnd_loop	ds.l 1
(2)   17/      1C :                     mchnsnd_pitch	ds.l 1
(2)   18/      20 :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   19/      24 :                     mchnsnd_vol	ds.l 1
(2)   20/      28 :                     sizeof_sndchn	ds.l 0
(2)   21/      28 : (MACRO)             		finish
(2)   21/       0 :                                     !org GLBL_LASTORG
(2)   21/ 6000F70 :                                     phase GLBL_LASTPC
(2)   22/ 6000F70 :                     
(2)   23/ 6000F70 :                     ; *** PWM INTERRUPT MOVED TO CACHE (see cache.asm)
(2)   24/ 6000F70 :                     
(2)   25/ 6000F70 :                     ; ====================================================================
(2)   26/ 6000F70 :                     ; ----------------------------------------------------------------
(2)   27/ 6000F70 :                     ; Subroutines
(2)   28/ 6000F70 :                     ; ----------------------------------------------------------------
(2)   29/ 6000F70 :                     
(2)   30/ 6000F70 :                     ; --------------------------------------------------------
(2)   31/ 6000F70 :                     ; Init Sound PWM
(2)   32/ 6000F70 :                     ;
(2)   33/ 6000F70 :                     ; Frequency values:
(2)   34/ 6000F70 :                     ; 23011361 NTSC
(2)   35/ 6000F70 :                     ; 22801467 PAL
(2)   36/ 6000F70 :                     ;
(2)   37/ 6000F70 :                     ; NOTE: The CLICK sound is normal.
(2)   38/ 6000F70 :                     ; --------------------------------------------------------
(2)   39/ 6000F70 :                     
(2)   40/ 6000F70 :                     MarsSound_Init:
(2)   41/ 6000F70 : 4F22                		sts	pr,@-r15
(2)   42/ 6000F72 : 4F13                		stc	gbr,@-r15
(2)   43/ 6000F74 : D03D                		mov	#_sysreg,r0
(2)   44/ 6000F76 : 401E                		ldc	r0,gbr
(2)   45/ 6000F78 : 908C                		mov	#$0105,r0
(2)   46/ 6000F7A : C118                		mov.w	r0,@(timerctl,gbr)
(2)   47/ 6000F7C : 908B                		mov	#((((23011361<<1)/22050+1)>>1)+1),r0	; 22050 best
(2)   48/ 6000F7E : C119                		mov.w	r0,@(cycle,gbr)
(2)   49/ 6000F80 : E001                		mov	#1,r0
(2)   50/ 6000F82 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   51/ 6000F84 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   52/ 6000F86 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   53/ 6000F88 : E000                		mov	#0,r0
(2)   54/ 6000F8A : D139                		mov	#MarsSnd_PwmChnls,r1
(2)   55/ 6000F8C : E207                		mov	#MAX_PWMCHNL,r2
(2)   56/ 6000F8E : E328                		mov	#sizeof_sndchn,r3
(2)   57/ 6000F90 :                     .clr_enbl:
(2)   58/ 6000F90 : 1100                		mov	r0,@(mchnsnd_enbl,r1)
(2)   59/ 6000F92 : 4210                		dt	r2
(2)   60/ 6000F94 : 8FFC                		bf/s	.clr_enbl
(2)   61/ 6000F96 : 313C                		add	r3,r1
(2)   62/ 6000F98 : 4F17                		ldc	@r15+,gbr
(2)   63/ 6000F9A : 4F26                		lds	@r15+,pr
(2)   64/ 6000F9C : 000B                		rts
(2)   65/ 6000F9E : 0009                		nop
(2)   66/ 6000FA0 :                     		align 4
(2)   67/ 6000FA0 :                     
(2)   68/ 6000FA0 :                     ; --------------------------------------------------------
(2)   69/ 6000FA0 :                     ; MarsSound_SetPwm
(2)   70/ 6000FA0 :                     ;
(2)   71/ 6000FA0 :                     ; Set new sound data to a single channel
(2)   72/ 6000FA0 :                     ;
(2)   73/ 6000FA0 :                     ; Input:
(2)   74/ 6000FA0 :                     ; r1 | Channel
(2)   75/ 6000FA0 :                     ; r2 | Start address
(2)   76/ 6000FA0 :                     ; r3 | End address
(2)   77/ 6000FA0 :                     ; r4 | Loop address (ignored if loop flag isn't set)
(2)   78/ 6000FA0 :                     ; r5 | Pitch ($xxxxxx.xx, $100 default speed)
(2)   79/ 6000FA0 :                     ; r6 | Volume
(2)   80/ 6000FA0 :                     ; r7 | Flags (Currently: %xxxxslLR)
(2)   81/ 6000FA0 :                     ;      LR - output
(2)   82/ 6000FA0 :                     ;      l - LOOP flag
(2)   83/ 6000FA0 :                     ;      s - Sample is in stereo
(2)   84/ 6000FA0 :                     ;
(2)   85/ 6000FA0 :                     ; Uses:
(2)   86/ 6000FA0 :                     ; r0,r8-r9
(2)   87/ 6000FA0 :                     ; --------------------------------------------------------
(2)   88/ 6000FA0 :                     
(2)   89/ 6000FA0 :                     MarsSound_SetPwm:
(2)   90/ 6000FA0 : D834                		mov	#MarsSnd_PwmChnls,r8
(2)   91/ 6000FA2 : E028                		mov 	#sizeof_sndchn,r0
(2)   92/ 6000FA4 : 201E                		mulu	r1,r0
(2)   93/ 6000FA6 : 001A                		sts	macl,r0
(2)   94/ 6000FA8 : 380C                		add 	r0,r8
(2)   95/ 6000FAA : E000                		mov 	#0,r0
(2)   96/ 6000FAC : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)   97/ 6000FAE :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)   98/ 6000FAE :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)   99/ 6000FAE : 1857                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  100/ 6000FB0 : 1869                		mov 	r6,@(mchnsnd_vol,r8)
(2)  101/ 6000FB2 : 1878                		mov 	r7,@(mchnsnd_flags,r8)
(2)  102/ 6000FB4 : 6023                		mov 	r2,r0				; Set MSB
(2)  103/ 6000FB6 : D930                		mov 	#$FF000000,r9
(2)  104/ 6000FB8 : 2099                		and 	r9,r0
(2)  105/ 6000FBA : 1803                		mov 	r0,@(mchnsnd_bank,r8)
(2)  106/ 6000FBC : 6043                		mov 	r4,r0				; Set POINTS
(2)  107/ 6000FBE : 88FF                		cmp/eq	#-1,r0
(2)  108/ 6000FC0 : 8900                		bt	.endmrk
(2)  109/ 6000FC2 : 4018                		shll8	r0
(2)  110/ 6000FC4 :                     .endmrk:
(2)  111/ 6000FC4 : 1806                		mov	r0,@(mchnsnd_loop,r8)
(2)  112/ 6000FC6 : 6033                		mov 	r3,r0
(2)  113/ 6000FC8 : 4018                		shll8	r0
(2)  114/ 6000FCA : 1805                		mov	r0,@(mchnsnd_end,r8)
(2)  115/ 6000FCC : 6023                		mov 	r2,r0
(2)  116/ 6000FCE : 4018                		shll8	r0
(2)  117/ 6000FD0 : 1804                		mov 	r0,@(mchnsnd_start,r8)
(2)  118/ 6000FD2 : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  119/ 6000FD4 : E001                		mov 	#1,r0
(2)  120/ 6000FD6 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  121/ 6000FD8 : 000B                		rts
(2)  122/ 6000FDA : 0009                		nop
(2)  123/ 6000FDC :                     		align 4
(2)  124/ 6000FDC :                     
(2)  125/ 6000FDC :                     ; --------------------------------------------------------
(2)  126/ 6000FDC :                     ; MarsSound_MulPwmPitch
(2)  127/ 6000FDC :                     ;
(2)  128/ 6000FDC :                     ; Set pitch data to 8 consecutive sound channels
(2)  129/ 6000FDC :                     ; starting from specific slot
(2)  130/ 6000FDC :                     ;
(2)  131/ 6000FDC :                     ; Input:
(2)  132/ 6000FDC :                     ; r1 | Channel slot
(2)  133/ 6000FDC :                     ; r2 | Pitch data
(2)  134/ 6000FDC :                     ;
(2)  135/ 6000FDC :                     ; Uses:
(2)  136/ 6000FDC :                     ; r8
(2)  137/ 6000FDC :                     ; --------------------------------------------------------
(2)  138/ 6000FDC :                     
(2)  139/ 6000FDC :                     MarsSound_SetPwmPitch:
(2)  140/ 6000FDC : D827                		mov	#MarsSnd_PwmChnls,r8
(2)  141/ 6000FDE : E028                		mov 	#sizeof_sndchn,r0
(2)  142/ 6000FE0 : 201E                		mulu	r1,r0
(2)  143/ 6000FE2 : 001A                		sts	macl,r0
(2)  144/ 6000FE4 : 380C                		add 	r0,r8
(2)  145/ 6000FE6 : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  146/ 6000FE8 : 8801                		cmp/eq	#1,r0
(2)  147/ 6000FEA : 8B01                		bf	.off_1
(2)  148/ 6000FEC : 5081                		mov	@(mchnsnd_read,r8),r0
(2)  149/ 6000FEE : 1827                		mov	r2,@(mchnsnd_pitch,r8)
(2)  150/ 6000FF0 :                     .off_1:
(2)  151/ 6000FF0 : 000B                		rts
(2)  152/ 6000FF2 : 0009                		nop
(2)  153/ 6000FF4 :                     		align 4
(2)  154/ 6000FF4 :                     
(2)  155/ 6000FF4 :                     ; --------------------------------------------------------
(2)  156/ 6000FF4 :                     ; MarsSound_SetVolume
(2)  157/ 6000FF4 :                     ;
(2)  158/ 6000FF4 :                     ; Input:
(2)  159/ 6000FF4 :                     ; r1 | Channel slot
(2)  160/ 6000FF4 :                     ; r2 | Volume data
(2)  161/ 6000FF4 :                     ;
(2)  162/ 6000FF4 :                     ; Uses:
(2)  163/ 6000FF4 :                     ; r8
(2)  164/ 6000FF4 :                     ; --------------------------------------------------------
(2)  165/ 6000FF4 :                     
(2)  166/ 6000FF4 :                     MarsSound_SetVolume:
(2)  167/ 6000FF4 : D822                		mov	#MarsSnd_PwmChnls,r8
(2)  168/ 6000FF6 : E028                		mov 	#sizeof_sndchn,r0
(2)  169/ 6000FF8 : 201E                		mulu	r1,r0
(2)  170/ 6000FFA : 001A                		sts	macl,r0
(2)  171/ 6000FFC : 380C                		add 	r0,r8
(2)  172/ 6000FFE : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  173/ 6001000 : 8801                		cmp/eq	#1,r0
(2)  174/ 6001002 : 8B01                		bf	.off_1
(2)  175/ 6001004 : 6023                		mov	r2,r0
(2)  176/ 6001006 : 1809                		mov	r0,@(mchnsnd_vol,r8)
(2)  177/ 6001008 :                     .off_1:
(2)  178/ 6001008 : 000B                		rts
(2)  179/ 600100A : 0009                		nop
(2)  180/ 600100C :                     		align 4
(2)  181/ 600100C :                     
(2)  182/ 600100C :                     ; --------------------------------------------------------
(2)  183/ 600100C :                     ; MarsSound_PwmEnable
(2)  184/ 600100C :                     ;
(2)  185/ 600100C :                     ; Turns ON or OFF Current PWM slot
(2)  186/ 600100C :                     ;
(2)  187/ 600100C :                     ; Input:
(2)  188/ 600100C :                     ; r1 | Slot
(2)  189/ 600100C :                     ; r2 | Enable/Disable
(2)  190/ 600100C :                     ;
(2)  191/ 600100C :                     ; Uses:
(2)  192/ 600100C :                     ; r8
(2)  193/ 600100C :                     ; --------------------------------------------------------
(2)  194/ 600100C :                     
(2)  195/ 600100C :                     MarsSound_PwmEnable:
(2)  196/ 600100C : D81D                		mov	#MarsSnd_PwmChnls,r8
(2)  197/ 600100E : E028                		mov 	#sizeof_sndchn,r0
(2)  198/ 6001010 : 201E                		mulu	r1,r0
(2)  199/ 6001012 : 001A                		sts	macl,r0
(2)  200/ 6001014 : 380C                		add 	r0,r8
(2)  201/ 6001016 : 1820                		mov 	r2,@(mchnsnd_enbl,r8)
(2)  202/ 6001018 :                     ; 		mov 	#0,r0
(2)  203/ 6001018 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  204/ 6001018 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  205/ 6001018 : 000B                		rts
(2)  206/ 600101A : 0009                		nop
(2)  207/ 600101C :                     		align 4
(2)  208/ 600101C :                     
(2)  209/ 600101C :                     ; --------------------------------------------------------
(2)  210/ 600101C :                     ; MarsSound_Refill
(2)  211/ 600101C :                     ;
(2)  212/ 600101C :                     ; Uses:
(2)  213/ 600101C :                     ; r1-r8
(2)  214/ 600101C :                     ; --------------------------------------------------------
(2)  215/ 600101C :                     
(2)  216/ 600101C :                     ; The trick here is to keep PWM interrupt enabled while
(2)  217/ 600101C :                     ; filling the backup data
(2)  218/ 600101C :                     
(2)  219/ 600101C :                     MarsSnd_Refill:
(2)  220/ 600101C : D81A                		mov	#MarsSnd_PwmChnls,r8
(2)  221/ 600101E : E607                		mov	#MAX_PWMCHNL,r6
(2)  222/ 6001020 : E728                		mov	#sizeof_sndchn,r7
(2)  223/ 6001022 : D51A                		mov	#MarsSnd_PwmCache,r5
(2)  224/ 6001024 :                     .next_one:
(2)  225/ 6001024 : 5080                		mov	@(mchnsnd_enbl,r8),r0	; Finished already?
(2)  226/ 6001026 : 8801                		cmp/eq	#1,r0
(2)  227/ 6001028 : 8B19                		bf	.not_enbl
(2)  228/ 600102A : 5083                		mov	@(mchnsnd_bank,r8),r0
(2)  229/ 600102C : D218                		mov	#CS1,r2
(2)  230/ 600102E : 3020                		cmp/eq	r2,r0
(2)  231/ 6001030 : 8B15                		bf	.not_enbl
(2)  232/ 6001032 : E100                		mov	#0,r1
(2)  233/ 6001034 : 1812                		mov	r1,@(mchnsnd_cchread,r8)
(2)  234/ 6001036 : 6153                		mov	r5,r1
(2)  235/ 6001038 : E220                		mov	#$80/4,r2
(2)  236/ 600103A : 5481                		mov	@(mchnsnd_read,r8),r4	; r4 - OLD READ pos
(2)  237/ 600103C : 6343                		mov	r4,r3
(2)  238/ 600103E : 4319                		shlr8	r3
(2)  239/ 6001040 : 330C                		add	r0,r3
(2)  240/ 6001042 :                     .copy_now:
(2)  241/ 6001042 : 6034                		mov.b	@r3+,r0
(2)  242/ 6001044 : 2100                		mov.b	r0,@r1
(2)  243/ 6001046 : 7101                		add	#1,r1
(2)  244/ 6001048 : 6034                		mov.b	@r3+,r0
(2)  245/ 600104A : 2100                		mov.b	r0,@r1
(2)  246/ 600104C : 7101                		add	#1,r1
(2)  247/ 600104E : 6034                		mov.b	@r3+,r0
(2)  248/ 6001050 : 2100                		mov.b	r0,@r1
(2)  249/ 6001052 : 7101                		add	#1,r1
(2)  250/ 6001054 : 6034                		mov.b	@r3+,r0
(2)  251/ 6001056 : 2100                		mov.b	r0,@r1
(2)  252/ 6001058 : 4210                		dt	r2
(2)  253/ 600105A : 8FF2                		bf/s	.copy_now
(2)  254/ 600105C : 7101                		add	#1,r1
(2)  255/ 600105E :                     .not_enbl:
(2)  256/ 600105E : 901B                		mov	#$80,r0
(2)  257/ 6001060 : 350C                		add	r0,r5
(2)  258/ 6001062 : 4610                		dt	r6
(2)  259/ 6001064 : 8FDE                		bf/s	.next_one
(2)  260/ 6001066 : 387C                		add	r7,r8
(2)  261/ 6001068 : 000B                		rts
(2)  262/ 600106A : 0009                		nop
(2)  263/ 600106C :                     		align 4
(2)  264/ 600106C : 2000 4000 C000 0380 		ltorg
                    C000 0380 FF00 0000 
                    C000 0380 C000 0380 
                    C000 0380 C000 0380 
                    C000 0000 0200 0000 
                    0105 0415 0080      
(2)  265/ 600109A :                     
(2)  266/ 600109A :                     ; ====================================================================
(2)  267/ 600109A :                     
(2)  268/ 600109A :                     		ltorg			; Save literals
(2)  269/ 600109A :                     
(1)  919/ 600109A :                     		align 4
(1)  920/ 600109C :                     
(1)  921/ 600109C :                     ; ====================================================================
(1)  922/ 600109C :                     ; ----------------------------------------------------------------
(1)  923/ 600109C :                     ; Master entry
(1)  924/ 600109C :                     ; ----------------------------------------------------------------
(1)  925/ 600109C :                     
(1)  926/ 600109C :                     		align 4
(1)  927/ 600109C :                     SH2_M_Entry:
(1)  928/ 600109C : DF23                		mov	#CS3|$40000,r15		; Set default Stack for Master
(1)  929/ 600109E : 9159                		mov	#_FRT,r1
(1)  930/ 60010A0 : E000                		mov     #0,r0
(1)  931/ 60010A2 : 8010                		mov.b   r0,@(0,r1)
(1)  932/ 60010A4 : E0E2                		mov     #$FFFFFFE2,r0
(1)  933/ 60010A6 : 8017                		mov.b   r0,@(7,r1)
(1)  934/ 60010A8 : E000                		mov     #0,r0
(1)  935/ 60010AA : 8014                		mov.b   r0,@(4,r1)
(1)  936/ 60010AC : E001                		mov     #1,r0
(1)  937/ 60010AE : 8015                		mov.b   r0,@(5,r1)
(1)  938/ 60010B0 : E000                		mov     #0,r0
(1)  939/ 60010B2 : 8016                		mov.b   r0,@(6,r1)
(1)  940/ 60010B4 : E001                		mov     #1,r0
(1)  941/ 60010B6 : 8011                		mov.b   r0,@(1,r1)
(1)  942/ 60010B8 : E000                		mov     #0,r0
(1)  943/ 60010BA : 8013                		mov.b   r0,@(3,r1)
(1)  944/ 60010BC : 8012                		mov.b   r0,@(2,r1)
(1)  945/ 60010BE : 904A                		mov	#$FFFFFEE2,r0		; Watchdog: Set interrupt priority bits (IPRA)
(1)  946/ 60010C0 : E150                		mov     #%0101<<4,r1
(1)  947/ 60010C2 : 2011                		mov.w   r1,@r0
(1)  948/ 60010C4 : 9048                		mov	#$FFFFFEE4,r0
(1)  949/ 60010C6 : E148                		mov     #$120/4,r1		; Watchdog: Set jump pointer: VBR + (this/4) (WITV)
(1)  950/ 60010C8 : 4118                		shll8   r1
(1)  951/ 60010CA : 2011                		mov.w   r1,@r0
(1)  952/ 60010CC :                     
(1)  953/ 60010CC :                     ; ------------------------------------------------
(1)  954/ 60010CC :                     ; Wait for Genesis and Slave CPU
(1)  955/ 60010CC :                     ; ------------------------------------------------
(1)  956/ 60010CC :                     
(1)  957/ 60010CC :                     .wait_md:
(1)  958/ 60010CC : D218                		mov 	#_sysreg+comm0,r2	; Wait for Genesis
(1)  959/ 60010CE : 6022                		mov.l	@r2,r0
(1)  960/ 60010D0 : 8800                		cmp/eq	#0,r0
(1)  961/ 60010D2 : 8BFB                		bf	.wait_md
(1)  962/ 60010D4 : D117                		mov.l	#"SLAV",r1
(1)  963/ 60010D6 :                     .wait_slave:
(1)  964/ 60010D6 : 5022                		mov.l	@(8,r2),r0		; Wait for Slave CPU to finish booting
(1)  965/ 60010D8 : 3010                		cmp/eq	r1,r0
(1)  966/ 60010DA : 8BFC                		bf	.wait_slave
(1)  967/ 60010DC : E000                		mov	#0,r0			; clear "SLAV"
(1)  968/ 60010DE : 1202                		mov	r0,@(8,r2)
(1)  969/ 60010E0 : 2202                		mov	r0,@r2
(1)  970/ 60010E2 :                     
(1)  971/ 60010E2 :                     ; ====================================================================
(1)  972/ 60010E2 :                     ; ----------------------------------------------------------------
(1)  973/ 60010E2 :                     ; Master main code
(1)  974/ 60010E2 :                     ;
(1)  975/ 60010E2 :                     ; This CPU is exclusively used for Visual tasks:
(1)  976/ 60010E2 :                     ; Background, Sprites and Polygons.
(1)  977/ 60010E2 :                     ;
(1)  978/ 60010E2 :                     ; The GENESIS side will control almost(?) all of this.
(1)  979/ 60010E2 :                     ; ----------------------------------------------------------------
(1)  980/ 60010E2 :                     
(1)  981/ 60010E2 :                     SH2_M_HotStart:
(1)  982/ 60010E2 : DF12                		mov	#CS3|$40000,r15			; Stack reset
(1)  983/ 60010E4 : DE14                		mov	#RAM_Mars_Global,r14		; GBR - Global values/variables go here.
(1)  984/ 60010E6 : 4E1E                		ldc	r14,gbr
(1)  985/ 60010E8 : 9037                		mov	#$F0,r0				; Interrupts OFF
(1)  986/ 60010EA : 400E                		ldc	r0,sr
(1)  987/ 60010EC : 9136                		mov	#_CCR,r1
(1)  988/ 60010EE : E008                		mov	#%00001000,r0			; Cache OFF
(1)  989/ 60010F0 : 2101                		mov.w	r0,@r1
(1)  990/ 60010F2 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1)  991/ 60010F4 : 2101                		mov.w	r0,@r1
(1)  992/ 60010F6 : D111                		mov	#_sysreg,r1
(1)  993/ 60010F8 : E002                		mov	#CMDIRQ_ON,r0			; Enable usage of these interrupts
(1)  994/ 60010FA : 8011                    		mov.b	r0,@(intmask,r1)
(1)  995/ 60010FC : D110                		mov 	#CACHE_MASTER,r1		; Transfer Master's "fast code" to CACHE
(1)  996/ 60010FE : D211                		mov 	#$C0000000,r2
(1)  997/ 6001100 : 932D                		mov 	#(CACHE_MASTER_E-CACHE_MASTER)/4,r3
(1)  998/ 6001102 :                     .copy:
(1)  999/ 6001102 : 6016                		mov 	@r1+,r0
(1) 1000/ 6001104 : 2202                		mov 	r0,@r2
(1) 1001/ 6001106 : 4310                		dt	r3
(1) 1002/ 6001108 : 8FFB                		bf/s	.copy
(1) 1003/ 600110A : 7204                		add 	#4,r2
(1) 1004/ 600110C : E18C                		mov	#_DMACHANNEL0,r1		; Turn DMA Off
(1) 1005/ 600110E : E000                		mov	#0,r0
(1) 1006/ 6001110 : 110C                		mov	r0,@($30,r1)
(1) 1007/ 6001112 : 1103                		mov	r0,@($C,r1)
(1) 1008/ 6001114 : D00C                		mov	#MarsRam_Dreq0,r0		; Set DREQ Read/Write points
(1) 1009/ 6001116 : C200                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1010/ 6001118 : D00C                		mov	#MarsRam_Dreq1,r0
(1) 1011/ 600111A : C201                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1012/ 600111C : D00C                		mov	#MarsVideo_Init,r0		; Init Video
(1) 1013/ 600111E : 400B                		jsr	@r0
(1) 1014/ 6001120 : 0009                		nop
(1) 1015/ 6001122 : E020                		mov	#$20,r0				; Enable interrupts
(1) 1016/ 6001124 : 400E                		ldc	r0,sr
(1) 1017/ 6001126 : A01B                		bra	master_loop
(1) 1018/ 6001128 : 0009                		nop
(1) 1019/ 600112A :                     		align 4
(1) 1020/ 600112C : 0604 0000 2000 4020 		ltorg
                    534C 4156 0600 6200 
                    2000 4000 0600 1510 
                    C000 0000 0600 DB10 
                    0600 E310 0600 076E 
                    FE10 FEE2 FEE4 00F0 
                    FE92 01A5           
(1) 1021/ 6001160 :                     
(1) 1022/ 6001160 :                     ; ----------------------------------------------------------------
(1) 1023/ 6001160 :                     ; MASTER Loop
(1) 1024/ 6001160 :                     ; ----------------------------------------------------------------
(1) 1025/ 6001160 :                     
(1) 1026/ 6001160 :                     master_loop:
(1) 1027/ 6001160 :                     	; ---------------------------------------
(1) 1028/ 6001160 :                     	; Wait for frameswap
(1) 1029/ 6001160 : D15C                		mov	#_vdpreg,r1			; r1 - SVDP area
(1) 1030/ 6001162 : C424                		mov.b	@(marsGbl_CurrFb,gbr),r0	; r2 - NEW Framebuffer number
(1) 1031/ 6001164 : 6203                		mov	r0,r2
(1) 1032/ 6001166 : 841B                .wait_frmswp:	mov.b	@(framectl,r1),r0		; Framebuffer ready?
(1) 1033/ 6001168 : 3200                		cmp/eq	r0,r2
(1) 1034/ 600116A : 8BFC                		bf	.wait_frmswp
(1) 1035/ 600116C : C510                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first
(1) 1036/ 600116E : D15A                		mov	#_vdpreg+shift,r1		; For the indexed-scrolling
(1) 1037/ 6001170 : C901                		and	#1,r0
(1) 1038/ 6001172 : 2101                		mov.w	r0,@r1
(1) 1039/ 6001174 : D157                		mov	#_vdpreg,r1
(1) 1040/ 6001176 : 841A                .wait:		mov.b	@(vdpsts,r1),r0
(1) 1041/ 6001178 : C920                		and	#$20,r0
(1) 1042/ 600117A : 2008                		tst	r0,r0				; Palette unlocked?
(1) 1043/ 600117C : 89FB                		bt	.wait
(1) 1044/ 600117E : ED00                		mov	#Dreq_Palette,r13
(1) 1045/ 6001180 : C600                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1046/ 6001182 : 3D0C                		add	r0,r13
(1) 1047/ 6001184 : 6103                		mov	r0,r1
(1) 1048/ 6001186 : D255                		mov	#_palette,r2
(1) 1049/ 6001188 : E310                 		mov	#256/16,r3
(1) 1050/ 600118A :                     .copy_pal:
(1) 1051/ 600118A :                     	rept 16
(1) 1052/ 600118A :                     		mov.w	@r1+,r0
(1) 1053/ 600118A :                     		mov.w	r0,@r2
(1) 1054/ 600118A :                     		add	#2,r2
(1) 1055/ 600118A :                     	endm
(1) 1052/ 600118A : 6015                		mov.w	@r1+,r0
(1) 1053/ 600118C : 2201                		mov.w	r0,@r2
(1) 1054/ 600118E : 7202                		add	#2,r2
(1) 1052/ 6001190 : 6015                		mov.w	@r1+,r0
(1) 1053/ 6001192 : 2201                		mov.w	r0,@r2
(1) 1054/ 6001194 : 7202                		add	#2,r2
(1) 1052/ 6001196 : 6015                		mov.w	@r1+,r0
(1) 1053/ 6001198 : 2201                		mov.w	r0,@r2
(1) 1054/ 600119A : 7202                		add	#2,r2
(1) 1052/ 600119C : 6015                		mov.w	@r1+,r0
(1) 1053/ 600119E : 2201                		mov.w	r0,@r2
(1) 1054/ 60011A0 : 7202                		add	#2,r2
(1) 1052/ 60011A2 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011A4 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011A6 : 7202                		add	#2,r2
(1) 1052/ 60011A8 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011AA : 2201                		mov.w	r0,@r2
(1) 1054/ 60011AC : 7202                		add	#2,r2
(1) 1052/ 60011AE : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011B0 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011B2 : 7202                		add	#2,r2
(1) 1052/ 60011B4 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011B6 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011B8 : 7202                		add	#2,r2
(1) 1052/ 60011BA : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011BC : 2201                		mov.w	r0,@r2
(1) 1054/ 60011BE : 7202                		add	#2,r2
(1) 1052/ 60011C0 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011C2 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011C4 : 7202                		add	#2,r2
(1) 1052/ 60011C6 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011C8 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011CA : 7202                		add	#2,r2
(1) 1052/ 60011CC : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011CE : 2201                		mov.w	r0,@r2
(1) 1054/ 60011D0 : 7202                		add	#2,r2
(1) 1052/ 60011D2 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011D4 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011D6 : 7202                		add	#2,r2
(1) 1052/ 60011D8 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011DA : 2201                		mov.w	r0,@r2
(1) 1054/ 60011DC : 7202                		add	#2,r2
(1) 1052/ 60011DE : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011E0 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011E2 : 7202                		add	#2,r2
(1) 1052/ 60011E4 : 6015                		mov.w	@r1+,r0
(1) 1053/ 60011E6 : 2201                		mov.w	r0,@r2
(1) 1054/ 60011E8 : 7202                		add	#2,r2
(1) 1056/ 60011EA : 4310                		dt	r3
(1) 1057/ 60011EC : 8BCD                		bf	.copy_pal
(1) 1058/ 60011EE :                     .no_pal:
(1) 1059/ 60011EE : E18C                		mov	#_DMACHANNEL0,r1		; DREQ transfer and swap
(1) 1060/ 60011F0 : 6012                		mov	@r1,r0
(1) 1061/ 60011F2 : C901                		and	#%01,r0				; Check if DMA is enabled
(1) 1062/ 60011F4 : 2008                		tst	r0,r0
(1) 1063/ 60011F6 : 890D                		bt	.not_yet			; Not yet.
(1) 1064/ 60011F8 : 4F03                		stc	sr,@-r15
(1) 1065/ 60011FA : 9089                		mov	#$F0,r0				; Interrupts OFF, Ignore new requests
(1) 1066/ 60011FC : 400E                		ldc	r0,sr
(1) 1067/ 60011FE : 6012                .wait_dma:	mov	@r1,r0				; Middle of DMA transfer?
(1) 1068/ 6001200 : C902                		and	#%10,r0
(1) 1069/ 6001202 : 2008                		tst	r0,r0
(1) 1070/ 6001204 : 89FB                		bt	.wait_dma
(1) 1071/ 6001206 : C600                		mov	@(marsGbl_DreqRead,gbr),r0	; Swap READ/WRITE pointers
(1) 1072/ 6001208 : 6103                		mov	r0,r1
(1) 1073/ 600120A : C601                		mov	@(marsGbl_DreqWrite,gbr),r0
(1) 1074/ 600120C : C200                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1075/ 600120E : 6013                		mov	r1,r0
(1) 1076/ 6001210 : C201                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1077/ 6001212 : 4F07                		ldc	@r15+,sr			; Interrupts ON, get CMD requests again.
(1) 1078/ 6001214 :                     .not_yet:
(1) 1079/ 6001214 : D12F                		mov	#_vdpreg,r1			; Still on VBlank?
(1) 1080/ 6001216 :                     .no_dreq:
(1) 1081/ 6001216 : 841A                		mov.b	@(vdpsts,r1),r0
(1) 1082/ 6001218 : C980                		and	#$80,r0
(1) 1083/ 600121A : 2008                		tst	r0,r0
(1) 1084/ 600121C : 8BFB                		bf	.no_dreq
(1) 1085/ 600121E :                     
(1) 1086/ 600121E :                     ; ---------------------------------------
(1) 1087/ 600121E :                     ; Pick graphics mode on comm14
(1) 1088/ 600121E :                     ; ---------------------------------------
(1) 1089/ 600121E :                     
(1) 1090/ 600121E : D130                		mov	#_sysreg+comm14,r1
(1) 1091/ 6001220 : 6010                		mov.b	@r1,r0
(1) 1092/ 6001222 : 6203                		mov	r0,r2
(1) 1093/ 6001224 : E340                		mov	#%01000000,r3
(1) 1094/ 6001226 : C903                		and	#%00000011,r0
(1) 1095/ 6001228 : 2239                		and	r3,r2
(1) 1096/ 600122A : 4008                		shll2	r0
(1) 1097/ 600122C : D32D                		mov	#.list,r3
(1) 1098/ 600122E : 033E                		mov	@(r3,r0),r3
(1) 1099/ 6001230 : 2228                		tst	r2,r2
(1) 1100/ 6001232 : 89FF                		bt	.no_rdrw
(1) 1101/ 6001234 :                     .no_rdrw:
(1) 1102/ 6001234 : 432B                		jmp	@r3
(1) 1103/ 6001236 : 0009                		nop
(1) 1104/ 6001238 :                     .list:
(1) 1105/ 6001238 : 0600 1248           		dc.l mstr_gfx_0
(1) 1106/ 600123C : 0600 125C           		dc.l mstr_gfx_1
(1) 1107/ 6001240 : 0600 131A           		dc.l mstr_gfx_2
(1) 1108/ 6001244 : 0600 131A           		dc.l mstr_gfx_2
(1) 1109/ 6001248 :                     
(1) 1110/ 6001248 :                     ; ---------------------------------------
(1) 1111/ 6001248 :                     ; Mode 0: BLANK
(1) 1112/ 6001248 :                     ; ---------------------------------------
(1) 1113/ 6001248 :                     
(1) 1114/ 6001248 :                     mstr_gfx_0:
(1) 1115/ 6001248 : 2228                		tst	r2,r2
(1) 1116/ 600124A : 8905                		bt	.lel
(1) 1117/ 600124C : 6010                		mov.b	@r1,r0
(1) 1118/ 600124E : C9BF                		and	#%10111111,r0
(1) 1119/ 6001250 : 2100                		mov.b	r0,@r1
(1) 1120/ 6001252 : D120                		mov 	#_vdpreg,r1
(1) 1121/ 6001254 : E000                		mov	#0,r0
(1) 1122/ 6001256 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1123/ 6001258 :                     .lel:
(1) 1124/ 6001258 : A0B0                		bra	mstr_nextframe
(1) 1125/ 600125A : 0009                		nop
(1) 1126/ 600125C :                     
(1) 1127/ 600125C :                     ; ---------------------------------------
(1) 1128/ 600125C :                     ; Mode 1: Scrolling background and
(1) 1129/ 600125C :                     ; sprites
(1) 1130/ 600125C :                     ; ---------------------------------------
(1) 1131/ 600125C :                     
(1) 1132/ 600125C :                     mstr_gfx_1:
(1) 1133/ 600125C : 2228                		tst	r2,r2
(1) 1134/ 600125E : 8915                		bt	.lel
(1) 1135/ 6001260 : 6010                		mov.b	@r1,r0
(1) 1136/ 6001262 : C9BF                		and	#%10111111,r0
(1) 1137/ 6001264 : 2100                		mov.b	r0,@r1
(1) 1138/ 6001266 : D120                		mov	#Cach_Drw_All,r1		; DrawAll request (2 times)
(1) 1139/ 6001268 : E002                		mov	#2,r0
(1) 1140/ 600126A : 2102                		mov	r0,@r1
(1) 1141/ 600126C : D11F                		mov	#RAM_Mars_Background,r1
(1) 1142/ 600126E : 9250                		mov	#$200,r2
(1) 1143/ 6001270 : E310                		mov	#16,r3
(1) 1144/ 6001272 : 944F                		mov	#320,r4
(1) 1145/ 6001274 : 954F                		mov	#256,r5
(1) 1146/ 6001276 : BE36                		bsr	MarsVideo_MkScrlField
(1) 1147/ 6001278 : E600                		mov	#0,r6
(1) 1148/ 600127A : D11D                		mov	#RAM_Mars_Background,r1
(1) 1149/ 600127C : D21D                		mov	#TESTMARS_BG,r2			; Image / RAM section
(1) 1150/ 600127E : 9349                		mov	#320,r3
(1) 1151/ 6001280 : 944A                		mov	#224,r4
(1) 1152/ 6001282 : BE45                		bsr	MarsVideo_SetBg
(1) 1153/ 6001284 : 0009                		nop
(1) 1154/ 6001286 : D113                		mov 	#_vdpreg,r1
(1) 1155/ 6001288 : E001                		mov	#1,r0
(1) 1156/ 600128A : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1157/ 600128C :                     .lel:
(1) 1158/ 600128C :                     	; ---------------------------------------
(1) 1159/ 600128C : DE1A                		mov	#RAM_Mars_Background,r14	; Move background
(1) 1160/ 600128E : 9D40                		mov	#Dreq_BgXpos,r13
(1) 1161/ 6001290 : C600                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1162/ 6001292 : 3D0C                		add	r0,r13
(1) 1163/ 6001294 : 61D6                		mov	@r13+,r1
(1) 1164/ 6001296 : 62D6                		mov	@r13+,r2
(1) 1165/ 6001298 : 1E1D                		mov	r1,@(mbg_xpos,r14)
(1) 1166/ 600129A : 1E2E                		mov	r2,@(mbg_ypos,r14)
(1) 1167/ 600129C : DE17                		mov	#RAM_Mars_Background,r14
(1) 1168/ 600129E : BCC6                		bsr	MarsVideo_MoveBg
(1) 1169/ 60012A0 : 0009                		nop
(1) 1170/ 60012A2 :                     	; ---------------------------------------
(1) 1171/ 60012A2 : DD17                		mov	#Cach_Drw_All,r13		; DrawAll != 0?
(1) 1172/ 60012A4 : 60D2                		mov	@r13,r0
(1) 1173/ 60012A6 : 8800                		cmp/eq	#0,r0
(1) 1174/ 60012A8 : 8905                		bt	.no_redraw
(1) 1175/ 60012AA : 4010                		dt	r0
(1) 1176/ 60012AC : 2D02                		mov	r0,@r13
(1) 1177/ 60012AE : BB19                		bsr	MarsVideo_DrawAllBg
(1) 1178/ 60012B0 : 0009                		nop
(1) 1179/ 60012B2 : A006                		bra	.from_drwall			; Don't need to draw off-screen
(1) 1180/ 60012B4 : 0009                		nop
(1) 1181/ 60012B6 :                     .no_redraw:
(1) 1182/ 60012B6 : D013                		mov	#MarsVideo_BgDrawLR,r0		; Process U/D/L/R
(1) 1183/ 60012B8 : 400B                		jsr	@r0
(1) 1184/ 60012BA : 0009                		nop
(1) 1185/ 60012BC : D012                		mov	#MarsVideo_BgDrawUD,r0
(1) 1186/ 60012BE : 400B                		jsr	@r0
(1) 1187/ 60012C0 : 0009                		nop
(1) 1188/ 60012C2 :                     .from_drwall:
(1) 1189/ 60012C2 :                     	; ---------------------------------------
(1) 1190/ 60012C2 :                     	; Build linetable
(1) 1191/ 60012C2 :                     	; ---------------------------------------
(1) 1192/ 60012C2 : D112                		mov	#RAM_Mars_Background,r1		; Make visible background
(1) 1193/ 60012C4 : E200                		mov	#0,r2				; section on screen
(1) 1194/ 60012C6 : 9327                		mov	#224,r3
(1) 1195/ 60012C8 : BDBC                		bsr	MarsVideo_MakeTbl
(1) 1196/ 60012CA : 0009                		nop
(1) 1197/ 60012CC : BDE0                		bsr	MarsVideo_FixTblShift		; Fix those Xshift lines
(1) 1198/ 60012CE : 0009                		nop
(1) 1199/ 60012D0 :                     ; .wait_pz:	mov.w	@(marsGbl_PlgnCntr,gbr),r0	; Active polygon pieces?
(1) 1200/ 60012D0 :                     ; 		cmp/pl	r0
(1) 1201/ 60012D0 :                     ; 		bt	.wait_pz
(1) 1202/ 60012D0 : A074                		bra	mstr_nextframe
(1) 1203/ 60012D2 : 0009                		nop
(1) 1204/ 60012D4 :                     		align 4
(1) 1205/ 60012D4 : 2000 4100 2000 4102 		ltorg
                    2000 4200 2000 402E 
                    0600 1238 C000 0668 
                    0600 6298 0600 6298 
                    0207 553C 0600 6298 
                    0600 6298 C000 0668 
                    0600 0A4A 0600 0B48 
                    0600 6298 00F0 0200 
                    0140 0100 00E0      
(1) 1206/ 600131A :                     
(1) 1207/ 600131A :                     ; ---------------------------------------
(1) 1208/ 600131A :                     ; Mode 2: Polygons
(1) 1209/ 600131A :                     ; ---------------------------------------
(1) 1210/ 600131A :                     
(1) 1211/ 600131A :                     mstr_gfx_2:
(1) 1212/ 600131A : 2228                		tst	r2,r2
(1) 1213/ 600131C : 8908                		bt	.lel
(1) 1214/ 600131E : 6010                		mov.b	@r1,r0
(1) 1215/ 6001320 : C9BF                		and	#%10111111,r0
(1) 1216/ 6001322 : 2100                		mov.b	r0,@r1
(1) 1217/ 6001324 : D148                		mov	#Cach_Drw_All,r1		; DrawAll request (2 times)
(1) 1218/ 6001326 : E002                		mov	#2,r0
(1) 1219/ 6001328 : 2102                		mov	r0,@r1
(1) 1220/ 600132A : D148                		mov 	#_vdpreg,r1
(1) 1221/ 600132C : E001                		mov	#1,r0
(1) 1222/ 600132E : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1223/ 6001330 :                     .lel:
(1) 1224/ 6001330 : DD47                		mov	#Cach_Drw_All,r13		; DrawAll != 0?
(1) 1225/ 6001332 : 60D2                		mov	@r13,r0
(1) 1226/ 6001334 : 8800                		cmp/eq	#0,r0
(1) 1227/ 6001336 : 890A                		bt	.no_redraw
(1) 1228/ 6001338 : 4010                		dt	r0
(1) 1229/ 600133A : 2D02                		mov	r0,@r13
(1) 1230/ 600133C : D345                		mov	#_framebuffer,r3
(1) 1231/ 600133E : 90A1                		mov	#$200/2,r0		; very last usable (blank) line
(1) 1232/ 6001340 : 6103                		mov	r0,r1
(1) 1233/ 6001342 : 94A0                		mov	#240,r4
(1) 1234/ 6001344 :                     .nxt_lne:
(1) 1235/ 6001344 : 2301                		mov.w	r0,@r3
(1) 1236/ 6001346 : 301C                		add	r1,r0
(1) 1237/ 6001348 : 4410                		dt	r4
(1) 1238/ 600134A : 8FFB                		bf/s	.nxt_lne
(1) 1239/ 600134C : 7302                		add	#2,r3
(1) 1240/ 600134E :                     .no_redraw:
(1) 1241/ 600134E :                     ; 	---------------------------------------
(1) 1242/ 600134E :                     ; 	***READ MODELS HERE AND UPDATE POLYGONS
(1) 1243/ 600134E : C600                		mov	@(marsGbl_DreqRead,gbr),r0	; Set WD Polygon pointer/number
(1) 1244/ 6001350 : 919A                		mov	#Dreq_Polygons,r1
(1) 1245/ 6001352 : 310C                		add	r0,r1
(1) 1246/ 6001354 : D240                		mov	#test_polygon+polygn_points,r2
(1) 1247/ 6001356 : 6316                		mov	@r1+,r3
(1) 1248/ 6001358 : 6416                		mov	@r1+,r4
(1) 1249/ 600135A : 2232                		mov	r3,@r2
(1) 1250/ 600135C : 1241                		mov	r4,@(4,r2)
(1) 1251/ 600135E : D03F                		mov	#test_polygon,r0		; ***TEMPORAL***
(1) 1252/ 6001360 : C204                		mov	r0,@(marsGbl_CurrPlgn,gbr)
(1) 1253/ 6001362 : E001                		mov	#1,r0
(1) 1254/ 6001364 : C10D                		mov.w	r0,@(marsGbl_PlgnCntr,gbr)
(1) 1255/ 6001366 :                     
(1) 1256/ 6001366 :                     	; ---------------------------------------
(1) 1257/ 6001366 :                     	; Prepare WATCHDOG interrupt
(1) 1258/ 6001366 : D03E                		mov	#RAM_Mars_VdpDrwList,r0		; Reset DDA pieces Read/Write points
(1) 1259/ 6001368 : C202                		mov	r0,@(marsGbl_PlyPzList_R,gbr)	; And counter
(1) 1260/ 600136A : C203                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(1) 1261/ 600136C : E000                		mov	#0,r0
(1) 1262/ 600136E : C10C                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(1) 1263/ 6001370 : C10A                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(1) 1264/ 6001372 : 918A                		mov	#$FFFFFE80,r1
(1) 1265/ 6001374 : 908A                		mov.w	#$5A20,r0			; Watchdog pre-timer
(1) 1266/ 6001376 : 2101                		mov.w	r0,@r1
(1) 1267/ 6001378 : 9089                		mov.w	#$A538,r0			; Enable Watchdog
(1) 1268/ 600137A : 2101                		mov.w	r0,@r1
(1) 1269/ 600137C :                     
(1) 1270/ 600137C :                     	; ---------------------------------------
(1) 1271/ 600137C :                     	; Draw polygons using pieces
(1) 1272/ 600137C :                     	; ---------------------------------------
(1) 1273/ 600137C :                     
(1) 1274/ 600137C : D133                		mov	#_vdpreg,r1
(1) 1275/ 600137E : 9281                		mov	#$100,r2
(1) 1276/ 6001380 : 6323                		mov	r2,r3
(1) 1277/ 6001382 : 9480                		mov	#240,r4
(1) 1278/ 6001384 :                     .fb_loop:
(1) 1279/ 6001384 : 9084                		mov	#320/2,r0
(1) 1280/ 6001386 : 8112                		mov.w	r0,@(filllength,r1)
(1) 1281/ 6001388 : 6023                		mov	r2,r0
(1) 1282/ 600138A : 8113                		mov.w	r0,@(fillstart,r1)
(1) 1283/ 600138C : E000                		mov	#0,r0
(1) 1284/ 600138E : 8114                		mov.w	r0,@(filldata,r1)
(1) 1285/ 6001390 : 8515                .wait_fb2:	mov.w	@(vdpsts,r1),r0
(1) 1286/ 6001392 : C902                		and	#%10,r0
(1) 1287/ 6001394 : 2008                		tst	r0,r0
(1) 1288/ 6001396 : 8BFB                		bf	.wait_fb2
(1) 1289/ 6001398 : 4410                		dt	r4
(1) 1290/ 600139A : 8FF3                		bf/s	.fb_loop
(1) 1291/ 600139C : 323C                		add	r3,r2
(1) 1292/ 600139E : C50A                .wait_pz:	mov.w	@(marsGbl_WdgMode,gbr),r0	; Active polygon pieces?
(1) 1293/ 60013A0 : 2008                		tst	r0,r0
(1) 1294/ 60013A2 : 89FC                		bt	.wait_pz
(1) 1295/ 60013A4 : C50C                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(1) 1296/ 60013A6 : 4015                		cmp/pl	r0
(1) 1297/ 60013A8 : 8B08                		bf	.no_polygns
(1) 1298/ 60013AA : 6103                		mov	r0,r1
(1) 1299/ 60013AC :                     .nxt_pz:
(1) 1300/ 60013AC : 2F16                		mov	r1,@-r15
(1) 1301/ 60013AE : D02D                		mov	#VideoMars_DrwPlgnPz,r0
(1) 1302/ 60013B0 : 400B                		jsr	@r0
(1) 1303/ 60013B2 : 0009                		nop
(1) 1304/ 60013B4 : 61F6                		mov	@r15+,r1
(1) 1305/ 60013B6 : 4110                		dt	r1
(1) 1306/ 60013B8 : 8FF8                		bf/s	.nxt_pz
(1) 1307/ 60013BA : 7E3C                		add	#sizeof_plypz,r14
(1) 1308/ 60013BC :                     .no_polygns:
(1) 1309/ 60013BC :                     
(1) 1310/ 60013BC :                     ; ---------------------------------------
(1) 1311/ 60013BC :                     ; *** Frameswap exit, JUMP only
(1) 1312/ 60013BC :                     ; ---------------------------------------
(1) 1313/ 60013BC :                     
(1) 1314/ 60013BC :                     mstr_nextframe:
(1) 1315/ 60013BC : D123                		mov	#_vdpreg,r1
(1) 1316/ 60013BE : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0			; SVDP FILL active?
(1) 1317/ 60013C0 : C902                		and	#2,r0
(1) 1318/ 60013C2 : 2008                		tst	r0,r0
(1) 1319/ 60013C4 : 8BFB                		bf	.wait_fb
(1) 1320/ 60013C6 : 841B                		mov.b	@(framectl,r1),r0		; Framebuffer swap REQUEST
(1) 1321/ 60013C8 : CA01                		xor	#1,r0
(1) 1322/ 60013CA : 801B                		mov.b	r0,@(framectl,r1)
(1) 1323/ 60013CC : C024                		mov.b	r0,@(marsGbl_CurrFb,gbr)	; copy new bit for checking
(1) 1324/ 60013CE : AEC7                		bra	master_loop
(1) 1325/ 60013D0 : 0009                		nop
(1) 1326/ 60013D2 :                     
(1) 1327/ 60013D2 :                     ; ====================================================================
(1) 1328/ 60013D2 :                     ; ----------------------------------------------------------------
(1) 1329/ 60013D2 :                     ; Slave entry
(1) 1330/ 60013D2 :                     ; ----------------------------------------------------------------
(1) 1331/ 60013D2 :                     
(1) 1332/ 60013D2 :                     		align 4
(1) 1333/ 60013D4 :                     SH2_S_Entry:
(1) 1334/ 60013D4 : DF24                		mov.l	#CS3|$3F000,r15		; Reset stack
(1) 1335/ 60013D6 : 915C                		mov	#_FRT,r1
(1) 1336/ 60013D8 : E000                		mov     #0,r0
(1) 1337/ 60013DA : 8010                		mov.b   r0,@(0,r1)
(1) 1338/ 60013DC : E0E2                		mov     #$FFFFFFE2,r0
(1) 1339/ 60013DE : 8017                		mov.b   r0,@(7,r1)
(1) 1340/ 60013E0 : E000                		mov     #0,r0
(1) 1341/ 60013E2 : 8014                		mov.b   r0,@(4,r1)
(1) 1342/ 60013E4 : E001                		mov     #1,r0
(1) 1343/ 60013E6 : 8015                		mov.b   r0,@(5,r1)
(1) 1344/ 60013E8 : E000                		mov     #0,r0
(1) 1345/ 60013EA : 8016                		mov.b   r0,@(6,r1)
(1) 1346/ 60013EC : E001                		mov     #1,r0
(1) 1347/ 60013EE : 8011                		mov.b   r0,@(1,r1)
(1) 1348/ 60013F0 : E000                		mov     #0,r0
(1) 1349/ 60013F2 : 8013                		mov.b   r0,@(3,r1)
(1) 1350/ 60013F4 : 8012                		mov.b   r0,@(2,r1)
(1) 1351/ 60013F6 : 904D                		mov	#$FFFFFEE2,r0		; Watchdog: Set interrupt priority bits (IPRA)
(1) 1352/ 60013F8 : E150                		mov     #%0101<<4,r1
(1) 1353/ 60013FA : 2011                		mov.w   r1,@r0
(1) 1354/ 60013FC : 904B                		mov	#$FFFFFEE4,r0
(1) 1355/ 60013FE : E148                		mov     #$120/4,r1		; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1) 1356/ 6001400 : 4118                		shll8   r1
(1) 1357/ 6001402 : 2011                		mov.w   r1,@r0
(1) 1358/ 6001404 :                     
(1) 1359/ 6001404 :                     ; ------------------------------------------------
(1) 1360/ 6001404 :                     ; Wait for Genesis, report to Master SH2
(1) 1361/ 6001404 :                     ; ------------------------------------------------
(1) 1362/ 6001404 :                     
(1) 1363/ 6001404 :                     .wait_md:
(1) 1364/ 6001404 : D219                		mov 	#_sysreg+comm0,r2
(1) 1365/ 6001406 : 6022                		mov.l	@r2,r0
(1) 1366/ 6001408 : 8800                		cmp/eq	#0,r0
(1) 1367/ 600140A : 8BFB                		bf	.wait_md
(1) 1368/ 600140C : D018                		mov.l	#"SLAV",r0
(1) 1369/ 600140E : 1202                		mov.l	r0,@(8,r2)
(1) 1370/ 6001410 :                     
(1) 1371/ 6001410 :                     ; ====================================================================
(1) 1372/ 6001410 :                     ; ----------------------------------------------------------------
(1) 1373/ 6001410 :                     ; Slave main code
(1) 1374/ 6001410 :                     ; ----------------------------------------------------------------
(1) 1375/ 6001410 :                     
(1) 1376/ 6001410 :                     SH2_S_HotStart:
(1) 1377/ 6001410 : DF15                		mov.l	#CS3|$3F000,r15			; Reset stack
(1) 1378/ 6001412 : DE18                		mov.l	#RAM_Mars_Global,r14		; Reset gbr
(1) 1379/ 6001414 : 4E1E                		ldc	r14,gbr
(1) 1380/ 6001416 : 9036                		mov.l	#$F0,r0				; Interrupts OFF
(1) 1381/ 6001418 : 400E                		ldc	r0,sr
(1) 1382/ 600141A : 913D                		mov.l	#_CCR,r1
(1) 1383/ 600141C : E008                		mov	#%00001000,r0			; Cache OFF
(1) 1384/ 600141E : 2101                		mov.w	r0,@r1
(1) 1385/ 6001420 : E019                		mov	#%00011001,r0			; Cache purge / Two-way mode / Cache ON
(1) 1386/ 6001422 : 2101                		mov.w	r0,@r1
(1) 1387/ 6001424 : D114                		mov	#_sysreg,r1
(1) 1388/ 6001426 : E003                		mov	#PWMIRQ_ON|CMDIRQ_ON,r0		; Enable these interrupts
(1) 1389/ 6001428 : 8011                    		mov.b	r0,@(intmask,r1)		; (Watchdog is external)
(1) 1390/ 600142A : D114                		mov 	#CACHE_SLAVE,r1			; Transfer Slave's fast-code to CACHE
(1) 1391/ 600142C : D214                		mov 	#$C0000000,r2
(1) 1392/ 600142E : 9334                		mov 	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r3
(1) 1393/ 6001430 :                     .copy:
(1) 1394/ 6001430 : 6016                		mov 	@r1+,r0
(1) 1395/ 6001432 : 2202                		mov 	r0,@r2
(1) 1396/ 6001434 : 4310                		dt	r3
(1) 1397/ 6001436 : 8FFB                		bf/s	.copy
(1) 1398/ 6001438 : 7204                		add 	#4,r2
(1) 1399/ 600143A : BD99                		bsr	MarsSound_Init			; Init Sound
(1) 1400/ 600143C : 0009                		nop
(1) 1401/ 600143E : E020                		mov	#$20,r0				; Interrupts ON
(1) 1402/ 6001440 : 400E                		ldc	r0,sr
(1) 1403/ 6001442 : A02B                		bra	slave_loop
(1) 1404/ 6001444 : 0009                		nop
(1) 1405/ 6001446 :                     		align 4
(1) 1406/ 6001448 : C000 0668 2000 4100 		ltorg
                    C000 0668 0400 0000 
                    0600 21D0 0600 21C8 
                    0600 9F10 C000 0366 
                    0603 F000 2000 4020 
                    534C 4156 0600 6200 
                    2000 4000 0600 1BA4 
                    C000 0000 0100 00F0 
                    0208 FE80 5A20 A538 
                    00A0 FE10 FEE2 FEE4 
                    FE92 0189           
(1) 1407/ 600149C :                     
(1) 1408/ 600149C :                     ; --------------------------------------------------------
(1) 1409/ 600149C :                     ; Loop
(1) 1410/ 600149C :                     ; --------------------------------------------------------
(1) 1411/ 600149C :                     
(1) 1412/ 600149C :                     slave_loop:
(1) 1413/ 600149C :                     
(1) 1414/ 600149C :                     ; 	; *** GEMA PWM DRIVER ***
(1) 1415/ 600149C :                     ; 	;
(1) 1416/ 600149C :                     ; 	; COMM15: %RCIOxxxx
(1) 1417/ 600149C :                     ; 	; R - REQUEST
(1) 1418/ 600149C :                     ; 	;     Request new PWM channels to play from the Z80.
(1) 1419/ 600149C :                     ; 	;     it requires usage of the next bit:
(1) 1420/ 600149C :                     ; 	; C - CLOCK, for the Z80-to-SH2 transfer part
(1) 1421/ 600149C :                     ; 	;     The Z80 will copy the pwmcom buffer to
(1) 1422/ 600149C :                     ; 	;     comms 0,2,4,6,8,10,12, the writes CLOCK
(1) 1423/ 600149C :                     ; 	;     the SH2 side (here) will copy those bytes to the
(1) 1424/ 600149C :                     ; 	;     MarsSnd_PwmControl buffer in 4 packets
(1) 1425/ 600149C :                     ; 	;     (hardcoded on both CPUs), bit clears on finish.
(1) 1426/ 600149C :                     ; 	; I - PWM RV-protection Enter
(1) 1427/ 600149C :                     ; 	;     Makes a temporal backup of the playing sample in
(1) 1428/ 600149C :                     ; 	;     CACHE and sets a RV-backup flag so it keeps playing
(1) 1429/ 600149C :                     ; 	;     the sample like normal while the Genesis does it's
(1) 1430/ 600149C :                     ; 	;     DMA Transfers (Only for samples stored in the ROM area)
(1) 1431/ 600149C :                     ; 	;     Write to this bit on the Genesis side and wait
(1) 1432/ 600149C :                     ; 	;     until it clears.
(1) 1433/ 600149C :                     ; 	; O - PWM RV-protection exit
(1) 1434/ 600149C :                     ; 	;     Set this after ALL DMA task from the Genesis side
(1) 1435/ 600149C :                     ; 	;     are finished.
(1) 1436/ 600149C :                     ; 	;     Same thing: Write to this bit on the Genesis
(1) 1437/ 600149C :                     ; 	;     wait until it clears.
(1) 1438/ 600149C :                     ; 	;
(1) 1439/ 600149C :                     ; 	; the other bits are free to use
(1) 1440/ 600149C :                     ; 		mov	#_sysreg+comm15,r9	; control comm
(1) 1441/ 600149C :                     ; 		mov.b	@r9,r0
(1) 1442/ 600149C :                     ; 		mov	#%10000000,r1
(1) 1443/ 600149C :                     ; 		and	r1,r0
(1) 1444/ 600149C :                     ; 		tst	r0,r0
(1) 1445/ 600149C :                     ; 		bf	.non_zero
(1) 1446/ 600149C :                     ; 		bra	.no_ztrnsfr
(1) 1447/ 600149C :                     ; 		nop
(1) 1448/ 600149C :                     ; .non_zero:
(1) 1449/ 600149C :                     ; 		mov	#MarsSnd_PwmControl,r7
(1) 1450/ 600149C :                     ; 		mov	#4,r5			; number of passes (hard-coded, check Z80)
(1) 1451/ 600149C :                     ; .wait_1:
(1) 1452/ 600149C :                     ; 		nop
(1) 1453/ 600149C :                     ; 		nop
(1) 1454/ 600149C :                     ; 		mov.b	@r9,r0			; wait first CLOCK
(1) 1455/ 600149C :                     ; 		and	#%01000000,r0		; from Z80
(1) 1456/ 600149C :                     ; 		tst	r0,r0
(1) 1457/ 600149C :                     ; 		bt	.wait_1
(1) 1458/ 600149C :                     ; 		mov	#7,r6
(1) 1459/ 600149C :                     ; 		mov	#_sysreg+comm0,r8
(1) 1460/ 600149C :                     ; .copy_1:
(1) 1461/ 600149C :                     ; 		mov.w	@r8+,r0
(1) 1462/ 600149C :                     ; 		mov.w	r0,@r7
(1) 1463/ 600149C :                     ; 		dt	r6
(1) 1464/ 600149C :                     ; 		bf/s	.copy_1
(1) 1465/ 600149C :                     ; 		add	#2,r7
(1) 1466/ 600149C :                     ; 		mov.b	@r9,r0			; tell Z80 CLK finished
(1) 1467/ 600149C :                     ; 		and	#%10111111,r0
(1) 1468/ 600149C :                     ; 		mov.b	r0,@r9
(1) 1469/ 600149C :                     ; 		dt	r5
(1) 1470/ 600149C :                     ; 		bf	.wait_1
(1) 1471/ 600149C :                     ; 	; *** TRANSFER END
(1) 1472/ 600149C :                     ;
(1) 1473/ 600149C :                     ; 	; ---------------------------------
(1) 1474/ 600149C :                     ; 	; Process PWM
(1) 1475/ 600149C :                     ; 	; ---------------------------------
(1) 1476/ 600149C :                     ;
(1) 1477/ 600149C :                     ; 		mov	#0,r1				; r1 - Current PWM slot
(1) 1478/ 600149C :                     ; 		mov	#MarsSnd_PwmControl,r14
(1) 1479/ 600149C :                     ; 		mov	#MAX_PWMCHNL,r10
(1) 1480/ 600149C :                     ; .next_chnl:
(1) 1481/ 600149C :                     ; 		mov.b	@r14,r0
(1) 1482/ 600149C :                     ; 		and	#$FF,r0
(1) 1483/ 600149C :                     ; 		cmp/eq	#0,r0
(1) 1484/ 600149C :                     ; 		bt	.no_req
(1) 1485/ 600149C :                     ; 		xor	r13,r13
(1) 1486/ 600149C :                     ; 		mov.b	r13,@r14
(1) 1487/ 600149C :                     ; 		mov	r0,r7
(1) 1488/ 600149C :                     ; 		and	#%111,r0
(1) 1489/ 600149C :                     ; 		cmp/eq	#4,r0
(1) 1490/ 600149C :                     ; 		bt	.pwm_keycut
(1) 1491/ 600149C :                     ; 		cmp/eq	#2,r0
(1) 1492/ 600149C :                     ; 		bf	.no_keyoff
(1) 1493/ 600149C :                     ; .pwm_keycut:
(1) 1494/ 600149C :                     ; 		mov	#0,r2
(1) 1495/ 600149C :                     ; 		mov	#MarsSound_PwmEnable,r0
(1) 1496/ 600149C :                     ; 		jsr	@r0
(1) 1497/ 600149C :                     ; 		nop
(1) 1498/ 600149C :                     ; 		bra	.no_req
(1) 1499/ 600149C :                     ; 		nop
(1) 1500/ 600149C :                     ;
(1) 1501/ 600149C :                     ; 	; Normal playback
(1) 1502/ 600149C :                     ; .no_keyoff:
(1) 1503/ 600149C :                     ; 		mov	r7,r0
(1) 1504/ 600149C :                     ; 		tst	#$10,r0
(1) 1505/ 600149C :                     ; 		bt	.no_pitchbnd
(1) 1506/ 600149C :                     ; 		mov	r14,r13
(1) 1507/ 600149C :                     ; 		add	#8,r13		; skip COM
(1) 1508/ 600149C :                     ; 		mov.b	@r13,r0		; r2 - Get pitch MSB bits
(1) 1509/ 600149C :                     ; 		add	#8,r13
(1) 1510/ 600149C :                     ; 		and	#%11,r0
(1) 1511/ 600149C :                     ; 		shll8	r0
(1) 1512/ 600149C :                     ; 		mov	r0,r2
(1) 1513/ 600149C :                     ; 		mov.b	@r13,r0		; Pitch LSB
(1) 1514/ 600149C :                     ; 		add	#8,r13
(1) 1515/ 600149C :                     ; 		and	#$FF,r0
(1) 1516/ 600149C :                     ; 		or	r2,r0
(1) 1517/ 600149C :                     ; 		mov	r0,r2
(1) 1518/ 600149C :                     ; 		mov	#MarsSound_SetPwmPitch,r0
(1) 1519/ 600149C :                     ; 		jsr	@r0
(1) 1520/ 600149C :                     ; 		nop
(1) 1521/ 600149C :                     ; .no_pitchbnd:
(1) 1522/ 600149C :                     ; 		mov	r7,r0
(1) 1523/ 600149C :                     ; 		tst	#$20,r0
(1) 1524/ 600149C :                     ; 		bt	.no_volumebnd
(1) 1525/ 600149C :                     ; 		mov	r0,r7
(1) 1526/ 600149C :                     ; 		mov	r14,r13
(1) 1527/ 600149C :                     ; 		add	#8,r13		; point to volume values
(1) 1528/ 600149C :                     ; 		mov.b	@r13,r0
(1) 1529/ 600149C :                     ; 		and	#%11111100,r0	; skip MSB pitch bits
(1) 1530/ 600149C :                     ; 		mov	r0,r2
(1) 1531/ 600149C :                     ; 		mov	#MarsSound_SetVolume,r0
(1) 1532/ 600149C :                     ; 		jsr	@r0
(1) 1533/ 600149C :                     ; 		nop
(1) 1534/ 600149C :                     ; .no_volumebnd:
(1) 1535/ 600149C :                     ; 		mov	r7,r0
(1) 1536/ 600149C :                     ; 		tst	#$01,r0		; key-on?
(1) 1537/ 600149C :                     ; 		bt	.no_req
(1) 1538/ 600149C :                     ; 		mov	r14,r13
(1) 1539/ 600149C :                     ; 		add	#8,r13		; skip COM
(1) 1540/ 600149C :                     ; 		mov.b	@r13,r0
(1) 1541/ 600149C :                     ; 		add	#8,r13
(1) 1542/ 600149C :                     ; 		mov	r0,r5
(1) 1543/ 600149C :                     ; 		and	#%11111100,r0	; skip MSB pitch bits
(1) 1544/ 600149C :                     ; 		mov	r0,r6		; r6 - Volume
(1) 1545/ 600149C :                     ; 		mov	r5,r0		; r5 - Get pitch MSB bits
(1) 1546/ 600149C :                     ; 		and	#%00000011,r0
(1) 1547/ 600149C :                     ; 		shll8	r0
(1) 1548/ 600149C :                     ; 		mov	r0,r5
(1) 1549/ 600149C :                     ; 		mov.b	@r13,r0		; Pitch LSB
(1) 1550/ 600149C :                     ; 		add	#8,r13
(1) 1551/ 600149C :                     ; 		and	#$FF,r0
(1) 1552/ 600149C :                     ; 		or	r5,r0
(1) 1553/ 600149C :                     ; 		mov	r0,r5
(1) 1554/ 600149C :                     ; 		mov.b	@r13,r0		; flags | SH2 BANK
(1) 1555/ 600149C :                     ; 		add	#8,r13
(1) 1556/ 600149C :                     ; 		mov	r0,r7		; r7 - Flags
(1) 1557/ 600149C :                     ; 		and	#%1111,r0
(1) 1558/ 600149C :                     ; 		mov	r0,r8		; r8 - SH2 section (ROM or SDRAM)
(1) 1559/ 600149C :                     ; 		shll16	r8
(1) 1560/ 600149C :                     ; 		shll8	r8
(1) 1561/ 600149C :                     ; 		shlr2	r7
(1) 1562/ 600149C :                     ; 		shlr2	r7
(1) 1563/ 600149C :                     ; 		mov.b	@r13,r0		; r2 - START point
(1) 1564/ 600149C :                     ; 		add	#8,r13
(1) 1565/ 600149C :                     ; 		and	#$FF,r0
(1) 1566/ 600149C :                     ; 		shll16	r0
(1) 1567/ 600149C :                     ; 		mov	r0,r3
(1) 1568/ 600149C :                     ; 		mov.b	@r13,r0
(1) 1569/ 600149C :                     ; 		add	#8,r13
(1) 1570/ 600149C :                     ; 		and	#$FF,r0
(1) 1571/ 600149C :                     ; 		shll8	r0
(1) 1572/ 600149C :                     ; 		mov	r0,r2
(1) 1573/ 600149C :                     ; 		mov.b	@r13,r0
(1) 1574/ 600149C :                     ; 		add	#8,r13
(1) 1575/ 600149C :                     ; 		and	#$FF,r0
(1) 1576/ 600149C :                     ; 		or	r3,r0
(1) 1577/ 600149C :                     ; 		or	r2,r0
(1) 1578/ 600149C :                     ; 		mov	r0,r2
(1) 1579/ 600149C :                     ; 		mov	r2,r4		; r4 - START copy
(1) 1580/ 600149C :                     ; 		or	r8,r2		; add CS2
(1) 1581/ 600149C :                     ; 		mov.b	@r2+,r0		; r3 - Length
(1) 1582/ 600149C :                     ; 		and	#$FF,r0
(1) 1583/ 600149C :                     ; 		mov	r0,r3
(1) 1584/ 600149C :                     ; 		mov.b	@r2+,r0
(1) 1585/ 600149C :                     ; 		and	#$FF,r0
(1) 1586/ 600149C :                     ; 		shll8	r0
(1) 1587/ 600149C :                     ; 		or	r0,r3
(1) 1588/ 600149C :                     ; 		mov.b	@r2+,r0
(1) 1589/ 600149C :                     ; 		and	#$FF,r0
(1) 1590/ 600149C :                     ; 		shll16	r0
(1) 1591/ 600149C :                     ; 		or	r0,r3
(1) 1592/ 600149C :                     ; 		add	r4,r3		; add end+start
(1) 1593/ 600149C :                     ; 		or	r8,r3		; add CS2
(1) 1594/ 600149C :                     ; 		mov.b	@r2+,r0		; get loop point
(1) 1595/ 600149C :                     ; 		and	#$FF,r0
(1) 1596/ 600149C :                     ; 		mov	r0,r4
(1) 1597/ 600149C :                     ; 		mov.b	@r2+,r0
(1) 1598/ 600149C :                     ; 		and	#$FF,r0
(1) 1599/ 600149C :                     ; 		shll8	r0
(1) 1600/ 600149C :                     ; 		or	r0,r4
(1) 1601/ 600149C :                     ; 		mov.b	@r2+,r0
(1) 1602/ 600149C :                     ; 		and	#$FF,r0
(1) 1603/ 600149C :                     ; 		shll16	r0
(1) 1604/ 600149C :                     ; 		or	r0,r4
(1) 1605/ 600149C :                     ; 		mov	#%11111100,r0
(1) 1606/ 600149C :                     ; 		and	r0,r8
(1) 1607/ 600149C :                     ; 		mov	#MarsSound_SetPwm,r0
(1) 1608/ 600149C :                     ; 		jsr	@r0
(1) 1609/ 600149C :                     ; 		nop
(1) 1610/ 600149C :                     ; .no_req:
(1) 1611/ 600149C :                     ; 		add	#1,r1		; next PWM slot
(1) 1612/ 600149C :                     ; 		dt	r10
(1) 1613/ 600149C :                     ; 		bf/s	.next_chnl
(1) 1614/ 600149C :                     ; 		add	#1,r14		; next PWM entry
(1) 1615/ 600149C :                     ; 		mov	#_sysreg+comm15,r1
(1) 1616/ 600149C :                     ; 		mov.b	@r1,r0		; Now we are free.
(1) 1617/ 600149C :                     ; 		and	#%01111111,r0
(1) 1618/ 600149C :                     ; 		mov.b	r0,@r1
(1) 1619/ 600149C :                     ; .no_ztrnsfr:
(1) 1620/ 600149C :                     
(1) 1621/ 600149C :                     	; ---------------------------------
(1) 1622/ 600149C :                     	; PWM wave backup Enter/Exit bits
(1) 1623/ 600149C :                     	;
(1) 1624/ 600149C :                     	; In case Genesis side wants
(1) 1625/ 600149C :                     	; to do it's DMA
(1) 1626/ 600149C :                     	; ---------------------------------
(1) 1627/ 600149C :                     
(1) 1628/ 600149C : D90D                		mov	#_sysreg+comm15,r9	; ENTER
(1) 1629/ 600149E : 6090                		mov.b	@r9,r0
(1) 1630/ 60014A0 : C920                		and	#%00100000,r0
(1) 1631/ 60014A2 : 8820                		cmp/eq	#%00100000,r0
(1) 1632/ 60014A4 : 8B08                		bf	.refill_in
(1) 1633/ 60014A6 : D00C                		mov	#MarsSnd_Refill,r0
(1) 1634/ 60014A8 : 400B                		jsr	@r0
(1) 1635/ 60014AA : 0009                		nop
(1) 1636/ 60014AC : D10B                		mov	#MarsSnd_RvMode,r1	; Set backup-playback flag
(1) 1637/ 60014AE : E001                		mov	#1,r0
(1) 1638/ 60014B0 : 2102                		mov	r0,@r1
(1) 1639/ 60014B2 : 6090                		mov.b	@r9,r0			; Refill is ready.
(1) 1640/ 60014B4 : C9DF                		and	#%11011111,r0
(1) 1641/ 60014B6 : 2900                		mov.b	r0,@r9
(1) 1642/ 60014B8 :                     .refill_in:
(1) 1643/ 60014B8 : D906                		mov	#_sysreg+comm15,r9	; EXIT
(1) 1644/ 60014BA : 6090                		mov.b	@r9,r0
(1) 1645/ 60014BC : C910                		and	#%00010000,r0
(1) 1646/ 60014BE : 8810                		cmp/eq	#%00010000,r0
(1) 1647/ 60014C0 : 8B05                		bf	.refill_out
(1) 1648/ 60014C2 : D107                		mov	#MarsSnd_RvMode,r1	; Clear backup-playback flag
(1) 1649/ 60014C4 : E000                		mov	#0,r0
(1) 1650/ 60014C6 : 2102                		mov	r0,@r1
(1) 1651/ 60014C8 : 6090                		mov.b	@r9,r0
(1) 1652/ 60014CA : C9EF                		and	#%11101111,r0
(1) 1653/ 60014CC : 2900                		mov.b	r0,@r9
(1) 1654/ 60014CE :                     .refill_out:
(1) 1655/ 60014CE :                     	; *** END of PWM driver for GEMA
(1) 1656/ 60014CE :                     
(1) 1657/ 60014CE : AFE5                		bra	slave_loop
(1) 1658/ 60014D0 : 0009                		nop
(1) 1659/ 60014D2 :                     		align 4
(1) 1660/ 60014D4 : 2000 402F 0600 101C 		ltorg
                    C000 061C C000 061C 
(1) 1661/ 60014E4 :                     
(1) 1662/ 60014E4 :                     ; =================================================================
(1) 1663/ 60014E4 :                     ; ------------------------------------------------
(1) 1664/ 60014E4 :                     ; Slave | Watchdog interrupt
(1) 1665/ 60014E4 :                     ; ------------------------------------------------
(1) 1666/ 60014E4 :                     
(1) 1667/ 60014E4 :                     s_irq_custom:
(1) 1668/ 60014E4 : 2F26                		mov	r2,@-r15
(1) 1669/ 60014E6 : 910F                		mov	#_FRT,r1
(1) 1670/ 60014E8 : 8417                		mov.b   @(7,r1),r0
(1) 1671/ 60014EA : CA02                		xor     #2,r0
(1) 1672/ 60014EC : 8017                		mov.b   r0,@(7,r1)
(1) 1673/ 60014EE :                     
(1) 1674/ 60014EE : 910C                		mov	#$FFFFFE80,r1
(1) 1675/ 60014F0 : 900C                		mov.w   #$A518,r0		; Watchdog OFF
(1) 1676/ 60014F2 : 2101                		mov.w   r0,@r1
(1) 1677/ 60014F4 : CB20                		or      #$20,r0			; ON again
(1) 1678/ 60014F6 : 2101                		mov.w   r0,@r1
(1) 1679/ 60014F8 : E210                		mov	#$10,r2
(1) 1680/ 60014FA : 9008                		mov.w   #$5A00,r0		; Timer for the next one
(1) 1681/ 60014FC : 202B                		or	r2,r0
(1) 1682/ 60014FE : 2101                		mov.w	r0,@r1
(1) 1683/ 6001500 :                     
(1) 1684/ 6001500 : 62F6                		mov	@r15+,r2
(1) 1685/ 6001502 : 000B                		rts
(1) 1686/ 6001504 : 0009                		nop
(1) 1687/ 6001506 :                     		align 4
(1) 1688/ 6001508 : FE10 FE80 A518 5A00 		ltorg
(1) 1689/ 6001510 :                     
(1) 1690/ 6001510 :                     ; ====================================================================
(1) 1691/ 6001510 :                     ; ----------------------------------------------------------------
(1) 1692/ 6001510 :                     ; Cache routines
(1) 1693/ 6001510 :                     ; ----------------------------------------------------------------
(1) 1694/ 6001510 :                     
(1) 1695/ 6001510 :                     		include "system/mars/cache.asm"
(2)    1/ 6001510 :                     ; ====================================================================
(2)    2/ 6001510 :                     ; ----------------------------------------------------------------
(2)    3/ 6001510 :                     ; CACHE code for Master CPU
(2)    4/ 6001510 :                     ;
(2)    5/ 6001510 :                     ; LIMIT: $800 bytes for each CPU
(2)    6/ 6001510 :                     ; ----------------------------------------------------------------
(2)    7/ 6001510 :                     
(2)    8/ 6001510 :                     		align 4
(2)    9/ 6001510 :                     CACHE_MASTER:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   13/FFFFFFFFC0000000 :                     ; POLYGON SLICER as Watchdog interrupt
(2)   14/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)   15/FFFFFFFFC0000000 :                     
(2)   16/FFFFFFFFC0000000 :                     ; *** THIS USES DIVISION ***
(2)   17/FFFFFFFFC0000000 :                     
(2)   18/FFFFFFFFC0000000 :                     m_irq_custom:
(2)   19/FFFFFFFFC0000000 : 90C6                		mov	#$F0,r0
(2)   20/FFFFFFFFC0000002 : 400E                		ldc	r0,sr
(2)   21/FFFFFFFFC0000004 : 91C5                		mov	#_FRT,r1
(2)   22/FFFFFFFFC0000006 : 8417                		mov.b	@(7,r1),r0
(2)   23/FFFFFFFFC0000008 : CA02                		xor	#2,r0
(2)   24/FFFFFFFFC000000A : 8017                		mov.b	r0,@(7,r1)
(2)   25/FFFFFFFFC000000C :                     
(2)   26/FFFFFFFFC000000C : C50A                		mov.w	@(marsGbl_WdgMode,gbr),r0
(2)   27/FFFFFFFFC000000E : 8800                		cmp/eq	#0,r0
(2)   28/FFFFFFFFC0000010 : 8904                		bt	wdg_task_0
(2)   29/FFFFFFFFC0000012 :                     
(2)   30/FFFFFFFFC0000012 : 91BF                		mov.l   #$FFFFFE80,r1			; Stop watchdog
(2)   31/FFFFFFFFC0000014 : 90BF                		mov.w   #$A518,r0
(2)   32/FFFFFFFFC0000016 : 2101                		mov.w   r0,@r1
(2)   33/FFFFFFFFC0000018 : A0A8                		bra	wdm_exit
(2)   34/FFFFFFFFC000001A : 0009                		nop
(2)   35/FFFFFFFFC000001C :                     		align 4
(2)   36/FFFFFFFFC000001C :                     
(2)   37/FFFFFFFFC000001C :                     wdg_task_0:
(2)   38/FFFFFFFFC000001C : C50D                		mov.w	@(marsGbl_PlgnCntr,gbr),r0
(2)   39/FFFFFFFFC000001E : 4015                		cmp/pl	r0
(2)   40/FFFFFFFFC0000020 : 8904                		bt	.valid
(2)   41/FFFFFFFFC0000022 : E001                		mov	#1,r0
(2)   42/FFFFFFFFC0000024 : C10A                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)   43/FFFFFFFFC0000026 : A0A1                		bra	wdm_exit
(2)   44/FFFFFFFFC0000028 : 0009                		nop
(2)   45/FFFFFFFFC000002A :                     		align 4
(2)   46/FFFFFFFFC000002C :                     .valid:
(2)   47/FFFFFFFFC000002C : 4010                		dt	r0
(2)   48/FFFFFFFFC000002E : C10D                		mov.w	r0,@(marsGbl_PlgnCntr,gbr)
(2)   49/FFFFFFFFC0000030 : C604                		mov	@(marsGbl_CurrPlgn,gbr),r0
(2)   50/FFFFFFFFC0000032 : 6E03                		mov	r0,r14
(2)   51/FFFFFFFFC0000034 : D04E                		mov	#Cach_Bkup_S,r0
(2)   52/FFFFFFFFC0000036 : 2026                		mov	r2,@-r0
(2)   53/FFFFFFFFC0000038 : 2036                		mov	r3,@-r0
(2)   54/FFFFFFFFC000003A : 2046                		mov	r4,@-r0
(2)   55/FFFFFFFFC000003C : 2056                		mov	r5,@-r0
(2)   56/FFFFFFFFC000003E : 2066                		mov	r6,@-r0
(2)   57/FFFFFFFFC0000040 : 2076                		mov	r7,@-r0
(2)   58/FFFFFFFFC0000042 : 2086                		mov	r8,@-r0
(2)   59/FFFFFFFFC0000044 : 2096                		mov	r9,@-r0
(2)   60/FFFFFFFFC0000046 : 20A6                		mov	r10,@-r0
(2)   61/FFFFFFFFC0000048 : 20B6                		mov	r11,@-r0
(2)   62/FFFFFFFFC000004A : 20C6                		mov	r12,@-r0
(2)   63/FFFFFFFFC000004C : 20D6                		mov	r13,@-r0
(2)   64/FFFFFFFFC000004E : 20E6                		mov	r14,@-r0
(2)   65/FFFFFFFFC0000050 : 4012                		sts	macl,@-r0
(2)   66/FFFFFFFFC0000052 : 4002                		sts	mach,@-r0
(2)   67/FFFFFFFFC0000054 : 4022                		sts	pr,@-r0
(2)   68/FFFFFFFFC0000056 : DD47                		mov	#Cach_DDA_Last,r13		; r13 - DDA last point
(2)   69/FFFFFFFFC0000058 : DC47                		mov	#Cach_DDA_Top,r12		; r12 - DDA first point
(2)   70/FFFFFFFFC000005A : 50E0                		mov	@(polygn_type,r14),r0		; Read type settings
(2)   71/FFFFFFFFC000005C : 4029                		shlr16	r0
(2)   72/FFFFFFFFC000005E : 4019                		shlr8	r0
(2)   73/FFFFFFFFC0000060 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)   74/FFFFFFFFC0000062 : 8B00                		bf	.tringl
(2)   75/FFFFFFFFC0000064 : 7D08                		add	#8,r13				; If quad: add 8
(2)   76/FFFFFFFFC0000066 :                     .tringl:
(2)   77/FFFFFFFFC0000066 : 61E3                		mov	r14,r1
(2)   78/FFFFFFFFC0000068 : 62C3                		mov	r12,r2
(2)   79/FFFFFFFFC000006A : D344                		mov	#Cach_DDA_Src,r3
(2)   80/FFFFFFFFC000006C : 7108                		add	#polygn_points,r1
(2)   81/FFFFFFFFC000006E :                     
(2)   82/FFFFFFFFC000006E :                     ; ----------------------------------------
(2)   83/FFFFFFFFC000006E :                     ; Polygon points
(2)   84/FFFFFFFFC000006E :                     ; ----------------------------------------
(2)   85/FFFFFFFFC000006E :                     
(2)   86/FFFFFFFFC000006E :                     	; Copy polygon points Cache's DDA
(2)   87/FFFFFFFFC000006E : E804                		mov	#4,r8
(2)   88/FFFFFFFFC0000070 : 9692                		mov	#SCREEN_WIDTH/2,r6
(2)   89/FFFFFFFFC0000072 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)   90/FFFFFFFFC0000074 :                     .setpnts:
(2)   91/FFFFFFFFC0000074 : 6416                		mov	@r1+,r4			; Get X
(2)   92/FFFFFFFFC0000076 : 6516                		mov	@r1+,r5			; Get Y
(2)   93/FFFFFFFFC0000078 : 346C                		add	r6,r4			; X + width
(2)   94/FFFFFFFFC000007A : 357C                		add	r7,r5			; Y + height
(2)   95/FFFFFFFFC000007C : 2242                		mov	r4,@r2
(2)   96/FFFFFFFFC000007E : 1251                		mov	r5,@(4,r2)
(2)   97/FFFFFFFFC0000080 : 4810                		dt	r8
(2)   98/FFFFFFFFC0000082 : 8FF7                		bf/s	.setpnts
(2)   99/FFFFFFFFC0000084 : 7208                		add	#8,r2
(2)  100/FFFFFFFFC0000086 :                     
(2)  101/FFFFFFFFC0000086 :                     	; Copy texture source points
(2)  102/FFFFFFFFC0000086 :                     	; to Cache
(2)  103/FFFFFFFFC0000086 : E804                		mov	#4,r8
(2)  104/FFFFFFFFC0000088 :                     .src_pnts:
(2)  105/FFFFFFFFC0000088 : 6415                		mov.w	@r1+,r4
(2)  106/FFFFFFFFC000008A : 6515                		mov.w	@r1+,r5
(2)  107/FFFFFFFFC000008C : 2342                		mov	r4,@r3
(2)  108/FFFFFFFFC000008E : 1351                		mov	r5,@(4,r3)
(2)  109/FFFFFFFFC0000090 : 4810                		dt	r8
(2)  110/FFFFFFFFC0000092 : 8FF9                		bf/s	.src_pnts
(2)  111/FFFFFFFFC0000094 : 7308                		add	#8,r3
(2)  112/FFFFFFFFC0000096 :                     
(2)  113/FFFFFFFFC0000096 :                     	; Here we search for the lowest Y point
(2)  114/FFFFFFFFC0000096 :                     	; and highest Y
(2)  115/FFFFFFFFC0000096 :                     	; r10 - Top Y
(2)  116/FFFFFFFFC0000096 :                     	; r11 - Bottom Y
(2)  117/FFFFFFFFC0000096 :                     .start_math:
(2)  118/FFFFFFFFC0000096 : E903                		mov	#3,r9
(2)  119/FFFFFFFFC0000098 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  120/FFFFFFFFC000009A : 8B00                		bf	.ytringl
(2)  121/FFFFFFFFC000009C : 7901                		add	#1,r9
(2)  122/FFFFFFFFC000009E :                     .ytringl:
(2)  123/FFFFFFFFC000009E : DA38                		mov	#$7FFFFFFF,r10
(2)  124/FFFFFFFFC00000A0 : EBFF                		mov	#$FFFFFFFF,r11
(2)  125/FFFFFFFFC00000A2 : 67C3                		mov 	r12,r7
(2)  126/FFFFFFFFC00000A4 : 68C3                		mov	r12,r8
(2)  127/FFFFFFFFC00000A6 :                     .find_top:
(2)  128/FFFFFFFFC00000A6 : 5071                		mov	@(4,r7),r0
(2)  129/FFFFFFFFC00000A8 : 30B7                		cmp/gt	r11,r0
(2)  130/FFFFFFFFC00000AA : 8B00                		bf	.is_low
(2)  131/FFFFFFFFC00000AC : 6B03                		mov 	r0,r11
(2)  132/FFFFFFFFC00000AE :                     .is_low:
(2)  133/FFFFFFFFC00000AE : 5081                		mov	@(4,r8),r0
(2)  134/FFFFFFFFC00000B0 : 30A7                		cmp/gt	r10,r0
(2)  135/FFFFFFFFC00000B2 : 8901                		bt	.is_high
(2)  136/FFFFFFFFC00000B4 : 6A03                		mov 	r0,r10
(2)  137/FFFFFFFFC00000B6 : 6183                		mov	r8,r1
(2)  138/FFFFFFFFC00000B8 :                     .is_high:
(2)  139/FFFFFFFFC00000B8 : 7708                		add 	#8,r7
(2)  140/FFFFFFFFC00000BA : 4910                		dt	r9
(2)  141/FFFFFFFFC00000BC : 8FF3                		bf/s	.find_top
(2)  142/FFFFFFFFC00000BE : 7808                		add	#8,r8
(2)  143/FFFFFFFFC00000C0 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2)  144/FFFFFFFFC00000C2 : 8937                		bt	.exit
(2)  145/FFFFFFFFC00000C4 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  146/FFFFFFFFC00000C6 : 8B35                		bf	.exit
(2)  147/FFFFFFFFC00000C8 : 9067                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  148/FFFFFFFFC00000CA : 3A03                		cmp/ge	r0,r10
(2)  149/FFFFFFFFC00000CC : 8932                		bt	.exit
(2)  150/FFFFFFFFC00000CE :                     
(2)  151/FFFFFFFFC00000CE :                     	; r2 - Left DDA READ pointer
(2)  152/FFFFFFFFC00000CE :                     	; r3 - Right DDA READ pointer
(2)  153/FFFFFFFFC00000CE :                     	; r4 - Left X
(2)  154/FFFFFFFFC00000CE :                     	; r5 - Left DX
(2)  155/FFFFFFFFC00000CE :                     	; r6 - Right X
(2)  156/FFFFFFFFC00000CE :                     	; r7 - Right DX
(2)  157/FFFFFFFFC00000CE :                     	; r8 - Left width
(2)  158/FFFFFFFFC00000CE :                     	; r9 - Right width
(2)  159/FFFFFFFFC00000CE :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  160/FFFFFFFFC00000CE :                     	; r11 - Bottom Y
(2)  161/FFFFFFFFC00000CE :                     	; r12 - First DST point
(2)  162/FFFFFFFFC00000CE :                     	; r13 - Last DST point
(2)  163/FFFFFFFFC00000CE : 6213                		mov	r1,r2				; r2 - X left to process
(2)  164/FFFFFFFFC00000D0 : 6313                		mov	r1,r3				; r3 - X right to process
(2)  165/FFFFFFFFC00000D2 : B064                		bsr	set_left
(2)  166/FFFFFFFFC00000D4 : 0009                		nop
(2)  167/FFFFFFFFC00000D6 : B0A1                		bsr	set_right
(2)  168/FFFFFFFFC00000D8 : 0009                		nop
(2)  169/FFFFFFFFC00000DA :                     .next_pz:
(2)  170/FFFFFFFFC00000DA : 905E                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  171/FFFFFFFFC00000DC : 3A07                		cmp/gt	r0,r10
(2)  172/FFFFFFFFC00000DE : 8929                		bt	.exit
(2)  173/FFFFFFFFC00000E0 : 3AB3                		cmp/ge	r11,r10				; Y top => Y bottom?
(2)  174/FFFFFFFFC00000E2 : 8927                		bt	.exit
(2)  175/FFFFFFFFC00000E4 : C603                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  176/FFFFFFFFC00000E6 : 6103                		mov	r0,r1
(2)  177/FFFFFFFFC00000E8 : D026                		mov	#RAM_Mars_VdpDrwList_e,r0	; pointer reached end of the list?
(2)  178/FFFFFFFFC00000EA : 3103                		cmp/ge	r0,r1
(2)  179/FFFFFFFFC00000EC : 8B02                		bf	.dontreset
(2)  180/FFFFFFFFC00000EE : D026                		mov	#RAM_Mars_VdpDrwList,r0		; Return WRITE pointer to the top of the list
(2)  181/FFFFFFFFC00000F0 : 6103                		mov	r0,r1
(2)  182/FFFFFFFFC00000F2 : C203                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  183/FFFFFFFFC00000F4 :                     .dontreset:
(2)  184/FFFFFFFFC00000F4 : 5821                		mov	@(4,r2),r8
(2)  185/FFFFFFFFC00000F6 : 5931                		mov	@(4,r3),r9
(2)  186/FFFFFFFFC00000F8 : 38A8                		sub	r10,r8
(2)  187/FFFFFFFFC00000FA : 39A8                		sub	r10,r9
(2)  188/FFFFFFFFC00000FC : 6083                		mov	r8,r0
(2)  189/FFFFFFFFC00000FE : 3987                		cmp/gt	r8,r9
(2)  190/FFFFFFFFC0000100 : 8900                		bt	.lefth
(2)  191/FFFFFFFFC0000102 : 6093                		mov	r9,r0
(2)  192/FFFFFFFFC0000104 :                     .lefth:
(2)  193/FFFFFFFFC0000104 : 2F26                		mov	r2,@-r15
(2)  194/FFFFFFFFC0000106 : 2F36                		mov	r3,@-r15
(2)  195/FFFFFFFFC0000108 : 2F56                		mov	r5,@-r15
(2)  196/FFFFFFFFC000010A : 2F76                		mov	r7,@-r15
(2)  197/FFFFFFFFC000010C : 2F86                		mov	r8,@-r15
(2)  198/FFFFFFFFC000010E : 2F96                		mov	r9,@-r15
(2)  199/FFFFFFFFC0000110 : B0C4                		bsr	put_piece
(2)  200/FFFFFFFFC0000112 : 0009                		nop
(2)  201/FFFFFFFFC0000114 : 69F6                		mov	@r15+,r9
(2)  202/FFFFFFFFC0000116 : 68F6                		mov	@r15+,r8
(2)  203/FFFFFFFFC0000118 : 67F6                		mov	@r15+,r7
(2)  204/FFFFFFFFC000011A : 65F6                		mov	@r15+,r5
(2)  205/FFFFFFFFC000011C : 63F6                		mov	@r15+,r3
(2)  206/FFFFFFFFC000011E : 62F6                		mov	@r15+,r2
(2)  207/FFFFFFFFC0000120 :                     	; X direction update
(2)  208/FFFFFFFFC0000120 : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  209/FFFFFFFFC0000122 : 8B03                		bf	.lefth2
(2)  210/FFFFFFFFC0000124 : B07A                		bsr	set_right
(2)  211/FFFFFFFFC0000126 : 0009                		nop
(2)  212/FFFFFFFFC0000128 : AFD7                		bra	.next_pz
(2)  213/FFFFFFFFC000012A : 0009                		nop
(2)  214/FFFFFFFFC000012C :                     .lefth2:
(2)  215/FFFFFFFFC000012C : B037                		bsr	set_left
(2)  216/FFFFFFFFC000012E : 0009                		nop
(2)  217/FFFFFFFFC0000130 : AFD3                		bra	.next_pz
(2)  218/FFFFFFFFC0000132 : 0009                		nop
(2)  219/FFFFFFFFC0000134 :                     .exit:
(2)  220/FFFFFFFFC0000134 : D015                		mov	#Cach_Bkup_L,r0
(2)  221/FFFFFFFFC0000136 : 4026                		lds	@r0+,pr
(2)  222/FFFFFFFFC0000138 : 4006                		lds	@r0+,mach
(2)  223/FFFFFFFFC000013A : 4016                		lds	@r0+,macl
(2)  224/FFFFFFFFC000013C : 6E06                		mov	@r0+,r14
(2)  225/FFFFFFFFC000013E : 6D06                		mov	@r0+,r13
(2)  226/FFFFFFFFC0000140 : 6C06                		mov	@r0+,r12
(2)  227/FFFFFFFFC0000142 : 6B06                		mov	@r0+,r11
(2)  228/FFFFFFFFC0000144 : 6A06                		mov	@r0+,r10
(2)  229/FFFFFFFFC0000146 : 6906                		mov	@r0+,r9
(2)  230/FFFFFFFFC0000148 : 6806                		mov	@r0+,r8
(2)  231/FFFFFFFFC000014A : 6706                		mov	@r0+,r7
(2)  232/FFFFFFFFC000014C : 6606                		mov	@r0+,r6
(2)  233/FFFFFFFFC000014E : 6506                		mov	@r0+,r5
(2)  234/FFFFFFFFC0000150 : 6406                		mov	@r0+,r4
(2)  235/FFFFFFFFC0000152 : 6306                		mov	@r0+,r3
(2)  236/FFFFFFFFC0000154 : 6206                		mov	@r0+,r2
(2)  237/FFFFFFFFC0000156 :                     
(2)  238/FFFFFFFFC0000156 : E038                		mov	#sizeof_polygn,r0
(2)  239/FFFFFFFFC0000158 : 3E0C                		add	r0,r14
(2)  240/FFFFFFFFC000015A : 60E3                		mov	r14,r0
(2)  241/FFFFFFFFC000015C : C204                		mov	r0,@(marsGbl_CurrPlgn,gbr)
(2)  242/FFFFFFFFC000015E : 9119                		mov.l   #$FFFFFE80,r1
(2)  243/FFFFFFFFC0000160 : 9019                		mov.w   #$A518,r0	; OFF
(2)  244/FFFFFFFFC0000162 : 2101                		mov.w   r0,@r1
(2)  245/FFFFFFFFC0000164 : CB20                		or      #$20,r0		; ON
(2)  246/FFFFFFFFC0000166 : 2101                		mov.w   r0,@r1
(2)  247/FFFFFFFFC0000168 : 9018                		mov.w   #$5A10,r0	; Timer for the next WD
(2)  248/FFFFFFFFC000016A : 2101                		mov.w   r0,@r1
(2)  249/FFFFFFFFC000016C :                     wdm_exit:
(2)  250/FFFFFFFFC000016C : 000B                		rts
(2)  251/FFFFFFFFC000016E : 0009                		nop
(2)  252/FFFFFFFFC0000170 :                     		align 4
(2)  253/FFFFFFFFC0000170 : C000 05F0 C000 0618 		ltorg
                    C000 0608 C000 0628 
                    7FFF FFFF 0600 DB10 
                    0600 9F10 C000 05B0 
                    00F0 FE10 FE80 A518 
                    00A0 00E0 5A10      
(2)  254/FFFFFFFFC000019E :                     
(2)  255/FFFFFFFFC000019E :                     ; --------------------------------
(2)  256/FFFFFFFFC000019E :                     
(2)  257/FFFFFFFFC000019E :                     set_left:
(2)  258/FFFFFFFFC000019E : 6823                		mov	r2,r8			; Get a copy of Xleft pointer
(2)  259/FFFFFFFFC00001A0 : 7820                		add	#$20,r8			; To read Texture SRC points
(2)  260/FFFFFFFFC00001A2 : 6482                		mov	@r8,r4
(2)  261/FFFFFFFFC00001A4 : 5581                		mov	@(4,r8),r5
(2)  262/FFFFFFFFC00001A6 : D863                		mov	#Cach_DDA_Src_L,r8
(2)  263/FFFFFFFFC00001A8 : 6043                		mov	r4,r0
(2)  264/FFFFFFFFC00001AA : 4028                		shll16	r0
(2)  265/FFFFFFFFC00001AC : 2802                		mov	r0,@r8
(2)  266/FFFFFFFFC00001AE : 6053                		mov	r5,r0
(2)  267/FFFFFFFFC00001B0 : 4028                		shll16	r0
(2)  268/FFFFFFFFC00001B2 : 1802                		mov	r0,@(8,r8)
(2)  269/FFFFFFFFC00001B4 : 6122                		mov	@r2,r1
(2)  270/FFFFFFFFC00001B6 : 5821                		mov	@(4,r2),r8
(2)  271/FFFFFFFFC00001B8 : 7208                		add	#8,r2
(2)  272/FFFFFFFFC00001BA : 32D7                		cmp/gt	r13,r2
(2)  273/FFFFFFFFC00001BC : 8B00                		bf	.lft_ok
(2)  274/FFFFFFFFC00001BE : 62C3                		mov 	r12,r2
(2)  275/FFFFFFFFC00001C0 :                     .lft_ok:
(2)  276/FFFFFFFFC00001C0 : 5021                		mov	@(4,r2),r0
(2)  277/FFFFFFFFC00001C2 : 3088                		sub	r8,r0
(2)  278/FFFFFFFFC00001C4 : 8800                		cmp/eq	#0,r0
(2)  279/FFFFFFFFC00001C6 : 89EA                		bt	set_left
(2)  280/FFFFFFFFC00001C8 : 4011                		cmp/pz	r0
(2)  281/FFFFFFFFC00001CA : 8B25                		bf	.lft_skip
(2)  282/FFFFFFFFC00001CC :                     
(2)  283/FFFFFFFFC00001CC : 400A                		lds	r0,mach
(2)  284/FFFFFFFFC00001CE : 6823                		mov	r2,r8
(2)  285/FFFFFFFFC00001D0 : 7820                		add	#$20,r8
(2)  286/FFFFFFFFC00001D2 : 6082                		mov 	@r8,r0
(2)  287/FFFFFFFFC00001D4 : 3048                		sub 	r4,r0
(2)  288/FFFFFFFFC00001D6 : 5481                		mov 	@(4,r8),r4
(2)  289/FFFFFFFFC00001D8 : 3458                		sub 	r5,r4
(2)  290/FFFFFFFFC00001DA : 6503                		mov	r0,r5
(2)  291/FFFFFFFFC00001DC : 4418                		shll8	r4
(2)  292/FFFFFFFFC00001DE : 4518                		shll8	r5
(2)  293/FFFFFFFFC00001E0 : 080A                		sts	mach,r8
(2)  294/FFFFFFFFC00001E2 : 90BF                		mov	#_JR,r0
(2)  295/FFFFFFFFC00001E4 : 2082                		mov	r8,@r0
(2)  296/FFFFFFFFC00001E6 : 1051                		mov	r5,@(4,r0)
(2)  297/FFFFFFFFC00001E8 : 0009                		nop
(2)  298/FFFFFFFFC00001EA : 5501                		mov	@(4,r0),r5
(2)  299/FFFFFFFFC00001EC : 90BA                		mov	#_JR,r0
(2)  300/FFFFFFFFC00001EE : 2082                		mov	r8,@r0
(2)  301/FFFFFFFFC00001F0 : 1041                		mov	r4,@(4,r0)
(2)  302/FFFFFFFFC00001F2 : 0009                		nop
(2)  303/FFFFFFFFC00001F4 : 5401                		mov	@(4,r0),r4
(2)  304/FFFFFFFFC00001F6 : 4418                		shll8	r4
(2)  305/FFFFFFFFC00001F8 : 4518                		shll8	r5
(2)  306/FFFFFFFFC00001FA : D04F                		mov	#Cach_DDA_Src_L+$C,r0
(2)  307/FFFFFFFFC00001FC : 2042                		mov	r4,@r0
(2)  308/FFFFFFFFC00001FE : D04F                		mov	#Cach_DDA_Src_L+4,r0
(2)  309/FFFFFFFFC0000200 : 2052                		mov	r5,@r0
(2)  310/FFFFFFFFC0000202 : 6522                		mov	@r2,r5
(2)  311/FFFFFFFFC0000204 : 3518                		sub 	r1,r5
(2)  312/FFFFFFFFC0000206 : 6413                		mov 	r1,r4
(2)  313/FFFFFFFFC0000208 : 4518                		shll8	r5
(2)  314/FFFFFFFFC000020A : 4428                		shll16	r4
(2)  315/FFFFFFFFC000020C : 90AA                		mov	#_JR,r0
(2)  316/FFFFFFFFC000020E : 2082                		mov	r8,@r0
(2)  317/FFFFFFFFC0000210 : 1051                		mov	r5,@(4,r0)
(2)  318/FFFFFFFFC0000212 : 0009                		nop
(2)  319/FFFFFFFFC0000214 : 5501                		mov	@(4,r0),r5
(2)  320/FFFFFFFFC0000216 : 4518                		shll8	r5
(2)  321/FFFFFFFFC0000218 :                     .lft_skip:
(2)  322/FFFFFFFFC0000218 : 000B                		rts
(2)  323/FFFFFFFFC000021A : 0009                		nop
(2)  324/FFFFFFFFC000021C :                     		align 4
(2)  325/FFFFFFFFC000021C :                     
(2)  326/FFFFFFFFC000021C :                     ; --------------------------------
(2)  327/FFFFFFFFC000021C :                     
(2)  328/FFFFFFFFC000021C :                     set_right:
(2)  329/FFFFFFFFC000021C : 6933                		mov	r3,r9
(2)  330/FFFFFFFFC000021E : 7920                		add	#$20,r9
(2)  331/FFFFFFFFC0000220 : 6692                		mov	@r9,r6
(2)  332/FFFFFFFFC0000222 : 5791                		mov	@(4,r9),r7
(2)  333/FFFFFFFFC0000224 : D946                		mov	#Cach_DDA_Src_R,r9
(2)  334/FFFFFFFFC0000226 : 6063                		mov	r6,r0
(2)  335/FFFFFFFFC0000228 : 4028                		shll16	r0
(2)  336/FFFFFFFFC000022A : 2902                		mov	r0,@r9
(2)  337/FFFFFFFFC000022C : 6073                		mov	r7,r0
(2)  338/FFFFFFFFC000022E : 4028                		shll16	r0
(2)  339/FFFFFFFFC0000230 : 1902                		mov	r0,@(8,r9)
(2)  340/FFFFFFFFC0000232 :                     
(2)  341/FFFFFFFFC0000232 : 6132                		mov	@r3,r1
(2)  342/FFFFFFFFC0000234 : 5931                		mov	@(4,r3),r9
(2)  343/FFFFFFFFC0000236 : 73F8                		add	#-8,r3
(2)  344/FFFFFFFFC0000238 : 33C3                		cmp/ge	r12,r3
(2)  345/FFFFFFFFC000023A : 8900                		bt	.rgt_ok
(2)  346/FFFFFFFFC000023C : 63D3                		mov 	r13,r3
(2)  347/FFFFFFFFC000023E :                     .rgt_ok:
(2)  348/FFFFFFFFC000023E : 5031                		mov	@(4,r3),r0
(2)  349/FFFFFFFFC0000240 : 3098                		sub	r9,r0
(2)  350/FFFFFFFFC0000242 : 8800                		cmp/eq	#0,r0
(2)  351/FFFFFFFFC0000244 : 89EA                		bt	set_right
(2)  352/FFFFFFFFC0000246 : 4011                		cmp/pz	r0
(2)  353/FFFFFFFFC0000248 : 8B25                		bf	.rgt_skip
(2)  354/FFFFFFFFC000024A : 400A                		lds	r0,mach
(2)  355/FFFFFFFFC000024C : 6933                		mov	r3,r9
(2)  356/FFFFFFFFC000024E : 7920                		add	#$20,r9
(2)  357/FFFFFFFFC0000250 : 6092                		mov 	@r9,r0
(2)  358/FFFFFFFFC0000252 : 3068                		sub 	r6,r0
(2)  359/FFFFFFFFC0000254 : 5691                		mov 	@(4,r9),r6
(2)  360/FFFFFFFFC0000256 : 3678                		sub 	r7,r6
(2)  361/FFFFFFFFC0000258 : 6703                		mov	r0,r7
(2)  362/FFFFFFFFC000025A : 4618                		shll8	r6
(2)  363/FFFFFFFFC000025C : 4718                		shll8	r7
(2)  364/FFFFFFFFC000025E : 090A                		sts	mach,r9
(2)  365/FFFFFFFFC0000260 : 9080                		mov	#_JR,r0
(2)  366/FFFFFFFFC0000262 : 2092                		mov	r9,@r0
(2)  367/FFFFFFFFC0000264 : 1071                		mov	r7,@(4,r0)
(2)  368/FFFFFFFFC0000266 : 0009                		nop
(2)  369/FFFFFFFFC0000268 : 5701                		mov	@(4,r0),r7
(2)  370/FFFFFFFFC000026A : 907B                		mov	#_JR,r0
(2)  371/FFFFFFFFC000026C : 2092                		mov	r9,@r0
(2)  372/FFFFFFFFC000026E : 1061                		mov	r6,@(4,r0)
(2)  373/FFFFFFFFC0000270 : 0009                		nop
(2)  374/FFFFFFFFC0000272 : 5601                		mov	@(4,r0),r6
(2)  375/FFFFFFFFC0000274 : 4618                		shll8	r6
(2)  376/FFFFFFFFC0000276 : 4718                		shll8	r7
(2)  377/FFFFFFFFC0000278 : D032                		mov	#Cach_DDA_Src_R+4,r0
(2)  378/FFFFFFFFC000027A : 2072                		mov	r7,@r0
(2)  379/FFFFFFFFC000027C : D032                		mov	#Cach_DDA_Src_R+$C,r0
(2)  380/FFFFFFFFC000027E : 2062                		mov	r6,@r0
(2)  381/FFFFFFFFC0000280 : 6732                		mov	@r3,r7
(2)  382/FFFFFFFFC0000282 : 3718                		sub 	r1,r7
(2)  383/FFFFFFFFC0000284 : 6613                		mov 	r1,r6
(2)  384/FFFFFFFFC0000286 : 4628                		shll16	r6
(2)  385/FFFFFFFFC0000288 : 4718                		shll8	r7
(2)  386/FFFFFFFFC000028A : 906B                		mov	#_JR,r0
(2)  387/FFFFFFFFC000028C : 2092                		mov	r9,@r0
(2)  388/FFFFFFFFC000028E : 1071                		mov	r7,@(4,r0)
(2)  389/FFFFFFFFC0000290 : 0009                		nop
(2)  390/FFFFFFFFC0000292 : 5701                		mov	@(4,r0),r7
(2)  391/FFFFFFFFC0000294 : 4718                		shll8	r7
(2)  392/FFFFFFFFC0000296 :                     .rgt_skip:
(2)  393/FFFFFFFFC0000296 : 000B                		rts
(2)  394/FFFFFFFFC0000298 : 0009                		nop
(2)  395/FFFFFFFFC000029A :                     		align 4
(2)  396/FFFFFFFFC000029C :                     
(2)  397/FFFFFFFFC000029C :                     ; --------------------------------
(2)  398/FFFFFFFFC000029C :                     ; Mark piece
(2)  399/FFFFFFFFC000029C :                     ; --------------------------------
(2)  400/FFFFFFFFC000029C :                     
(2)  401/FFFFFFFFC000029C :                     put_piece:
(2)  402/FFFFFFFFC000029C : 1143                		mov 	r4,@(plypz_xl,r1)
(2)  403/FFFFFFFFC000029E : 1154                		mov 	r5,@(plypz_xl_dx,r1)
(2)  404/FFFFFFFFC00002A0 : 1165                		mov 	r6,@(plypz_xr,r1)
(2)  405/FFFFFFFFC00002A2 : 1176                		mov 	r7,@(plypz_xr_dx,r1)
(2)  406/FFFFFFFFC00002A4 : 350D                		dmuls	r0,r5
(2)  407/FFFFFFFFC00002A6 : 021A                		sts	macl,r2
(2)  408/FFFFFFFFC00002A8 : 370D                		dmuls	r0,r7
(2)  409/FFFFFFFFC00002AA : 031A                		sts	macl,r3
(2)  410/FFFFFFFFC00002AC : 342C                		add 	r2,r4
(2)  411/FFFFFFFFC00002AE : 363C                		add	r3,r6
(2)  412/FFFFFFFFC00002B0 : 62A3                		mov	r10,r2
(2)  413/FFFFFFFFC00002B2 : 3A0C                		add	r0,r10
(2)  414/FFFFFFFFC00002B4 : 63A3                		mov	r10,r3
(2)  415/FFFFFFFFC00002B6 : 4228                		shll16	r2
(2)  416/FFFFFFFFC00002B8 : 232B                		or	r2,r3
(2)  417/FFFFFFFFC00002BA : 1132                		mov	r3,@(plypz_ypos,r1)
(2)  418/FFFFFFFFC00002BC : 2F36                		mov	r3,@-r15
(2)  419/FFFFFFFFC00002BE : D223                		mov	#Cach_DDA_Src_L,r2
(2)  420/FFFFFFFFC00002C0 : 6522                		mov	@r2,r5
(2)  421/FFFFFFFFC00002C2 : 1157                		mov	r5,@(plypz_src_xl,r1)
(2)  422/FFFFFFFFC00002C4 : 5721                		mov	@(4,r2),r7
(2)  423/FFFFFFFFC00002C6 : 1178                		mov	r7,@(plypz_src_xl_dx,r1)
(2)  424/FFFFFFFFC00002C8 : 5822                		mov	@(8,r2),r8
(2)  425/FFFFFFFFC00002CA : 1189                		mov	r8,@(plypz_src_yl,r1)
(2)  426/FFFFFFFFC00002CC : 5923                		mov	@($C,r2),r9
(2)  427/FFFFFFFFC00002CE : 119A                		mov	r9,@(plypz_src_yl_dx,r1)
(2)  428/FFFFFFFFC00002D0 : 370D                		dmuls	r0,r7
(2)  429/FFFFFFFFC00002D2 : 021A                		sts	macl,r2
(2)  430/FFFFFFFFC00002D4 : 390D                		dmuls	r0,r9
(2)  431/FFFFFFFFC00002D6 : 031A                		sts	macl,r3
(2)  432/FFFFFFFFC00002D8 : 352C                		add 	r2,r5
(2)  433/FFFFFFFFC00002DA : 383C                		add	r3,r8
(2)  434/FFFFFFFFC00002DC : D21C                		mov	#Cach_DDA_Src_L,r2
(2)  435/FFFFFFFFC00002DE : 2252                		mov	r5,@r2
(2)  436/FFFFFFFFC00002E0 : 1282                		mov	r8,@(8,r2)
(2)  437/FFFFFFFFC00002E2 : D21C                		mov	#Cach_DDA_Src_R,r2
(2)  438/FFFFFFFFC00002E4 : 6522                		mov	@r2,r5
(2)  439/FFFFFFFFC00002E6 : 115B                		mov	r5,@(plypz_src_xr,r1)
(2)  440/FFFFFFFFC00002E8 : 5721                		mov	@(4,r2),r7
(2)  441/FFFFFFFFC00002EA : 117C                		mov	r7,@(plypz_src_xr_dx,r1)
(2)  442/FFFFFFFFC00002EC : 5822                		mov	@(8,r2),r8
(2)  443/FFFFFFFFC00002EE : 118D                		mov	r8,@(plypz_src_yr,r1)
(2)  444/FFFFFFFFC00002F0 : 5923                		mov	@($C,r2),r9
(2)  445/FFFFFFFFC00002F2 : 119E                		mov	r9,@(plypz_src_yr_dx,r1)
(2)  446/FFFFFFFFC00002F4 : 370D                		dmuls	r0,r7
(2)  447/FFFFFFFFC00002F6 : 021A                		sts	macl,r2
(2)  448/FFFFFFFFC00002F8 : 390D                		dmuls	r0,r9
(2)  449/FFFFFFFFC00002FA : 031A                		sts	macl,r3
(2)  450/FFFFFFFFC00002FC : 352C                		add 	r2,r5
(2)  451/FFFFFFFFC00002FE : 383C                		add	r3,r8
(2)  452/FFFFFFFFC0000300 : D215                		mov	#Cach_DDA_Src_R,r2
(2)  453/FFFFFFFFC0000302 : 2252                		mov	r5,@r2
(2)  454/FFFFFFFFC0000304 : 1282                		mov	r8,@(8,r2)
(2)  455/FFFFFFFFC0000306 : 63F6                		mov	@r15+,r3
(2)  456/FFFFFFFFC0000308 : 4315                		cmp/pl	r3			; TOP check, 2 steps
(2)  457/FFFFFFFFC000030A : 8902                		bt	.top_neg
(2)  458/FFFFFFFFC000030C : 4328                		shll16	r3
(2)  459/FFFFFFFFC000030E : 4315                		cmp/pl	r3
(2)  460/FFFFFFFFC0000310 : 8B0E                		bf	.bad_piece
(2)  461/FFFFFFFFC0000312 :                     .top_neg:
(2)  462/FFFFFFFFC0000312 : 50E1                		mov	@(polygn_mtrl,r14),r0
(2)  463/FFFFFFFFC0000314 : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2)  464/FFFFFFFFC0000316 : 50E0                		mov	@(polygn_type,r14),r0
(2)  465/FFFFFFFFC0000318 : 1100                		mov 	r0,@(plypz_type,r1)
(2)  466/FFFFFFFFC000031A : 713C                		add	#sizeof_plypz,r1
(2)  467/FFFFFFFFC000031C : 6013                		mov	r1,r0
(2)  468/FFFFFFFFC000031E : D80F                		mov	#RAM_Mars_VdpDrwList_e,r8
(2)  469/FFFFFFFFC0000320 : 3083                		cmp/ge	r8,r0
(2)  470/FFFFFFFFC0000322 : 8B01                		bf	.dontreset_pz
(2)  471/FFFFFFFFC0000324 : D00E                		mov	#RAM_Mars_VdpDrwList,r0
(2)  472/FFFFFFFFC0000326 : 6103                		mov	r0,r1
(2)  473/FFFFFFFFC0000328 :                     .dontreset_pz:
(2)  474/FFFFFFFFC0000328 : C203                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  475/FFFFFFFFC000032A : C50C                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2)  476/FFFFFFFFC000032C : 7001                		add	#1,r0
(2)  477/FFFFFFFFC000032E : C10C                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  478/FFFFFFFFC0000330 :                     .bad_piece:
(2)  479/FFFFFFFFC0000330 : 000B                		rts
(2)  480/FFFFFFFFC0000332 : 0009                		nop
(2)  481/FFFFFFFFC0000334 :                     		align 4
(2)  482/FFFFFFFFC0000334 : C000 0648 C000 0654 		ltorg
                    C000 064C C000 0658 
                    C000 065C C000 0664 
                    C000 0648 C000 0648 
                    C000 0658 C000 0658 
                    0600 DB10 0600 9F10 
                    FF00                
(2)  483/FFFFFFFFC0000366 :                     
(2)  484/FFFFFFFFC0000366 :                     ; ---------------------------------------
(2)  485/FFFFFFFFC0000366 :                     ; Draw polygon pieces
(2)  486/FFFFFFFFC0000366 :                     ; ---------------------------------------
(2)  487/FFFFFFFFC0000366 :                     
(2)  488/FFFFFFFFC0000366 :                     VideoMars_DrwPlgnPz:
(2)  489/FFFFFFFFC0000366 : C602                		mov	@(marsGbl_PlyPzList_R,gbr),r0	; r14 - Current pieces pointer to READ
(2)  490/FFFFFFFFC0000368 : 6E03                		mov	r0,r14
(2)  491/FFFFFFFFC000036A : 59E2                		mov	@(plypz_ypos,r14),r9		; Start grabbing StartY/EndY positions
(2)  492/FFFFFFFFC000036C : 6A93                		mov	r9,r10
(2)  493/FFFFFFFFC000036E : D008                		mov	#$FFFF,r0
(2)  494/FFFFFFFFC0000370 : 4929                		shlr16	r9
(2)  495/FFFFFFFFC0000372 : 699F                		exts	r9,r9			;  r9 - Top
(2)  496/FFFFFFFFC0000374 : 2A09                		and	r0,r10			; r10 - Bottom
(2)  497/FFFFFFFFC0000376 : 3090                		cmp/eq	r9,r0			; if Top==Bottom, exit
(2)  498/FFFFFFFFC0000378 : 8908                		bt	.invld_y
(2)  499/FFFFFFFFC000037A : 900B                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  500/FFFFFFFFC000037C : 3903                		cmp/ge	r0,r9
(2)  501/FFFFFFFFC000037E : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  502/FFFFFFFFC0000380 : 3A07                		cmp/gt	r0,r10
(2)  503/FFFFFFFFC0000382 : 8B00                		bf	.len_max
(2)  504/FFFFFFFFC0000384 : 6A03                		mov	r0,r10
(2)  505/FFFFFFFFC0000386 :                     .len_max:
(2)  506/FFFFFFFFC0000386 : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2)  507/FFFFFFFFC0000388 : 4A15                		cmp/pl	r10
(2)  508/FFFFFFFFC000038A : 8904                		bt	drwtsk1_vld_y
(2)  509/FFFFFFFFC000038C :                     .invld_y:
(2)  510/FFFFFFFFC000038C : A0EE                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2)  511/FFFFFFFFC000038E : 0009                		nop
(2)  512/FFFFFFFFC0000390 :                     		align 4
(2)  513/FFFFFFFFC0000390 : 0000 FFFF 00E0      		ltorg
(2)  514/FFFFFFFFC0000396 :                     
(2)  515/FFFFFFFFC0000396 :                     ; ------------------------------------
(2)  516/FFFFFFFFC0000396 :                     ; If Y top / Y len are valid:
(2)  517/FFFFFFFFC0000396 :                     ; ------------------------------------
(2)  518/FFFFFFFFC0000396 :                     
(2)  519/FFFFFFFFC0000396 :                     drwtsk1_vld_y:
(2)  520/FFFFFFFFC0000396 : 51E3                		mov	@(plypz_xl,r14),r1		; r1 - X left
(2)  521/FFFFFFFFC0000398 : 52E4                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  522/FFFFFFFFC000039A : 53E5                		mov	@(plypz_xr,r14),r3		; r3 - X right
(2)  523/FFFFFFFFC000039C : 54E6                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  524/FFFFFFFFC000039E : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2)  525/FFFFFFFFC00003A0 : 4029                		shlr16	r0
(2)  526/FFFFFFFFC00003A2 : 4019                		shlr8	r0
(2)  527/FFFFFFFFC00003A4 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2)  528/FFFFFFFFC00003A6 : 8B05                 		bf	drwtsk_texmode
(2)  529/FFFFFFFFC00003A8 : A094                		bra	drwtsk_solidmode
(2)  530/FFFFFFFFC00003AA : 0009                		nop
(2)  531/FFFFFFFFC00003AC :                     
(2)  532/FFFFFFFFC00003AC :                     ; ------------------------------------
(2)  533/FFFFFFFFC00003AC :                     ; Texture mode
(2)  534/FFFFFFFFC00003AC :                     ;
(2)  535/FFFFFFFFC00003AC :                     ; r1  - XL
(2)  536/FFFFFFFFC00003AC :                     ; r2  - XL DX
(2)  537/FFFFFFFFC00003AC :                     ; r3  - XR
(2)  538/FFFFFFFFC00003AC :                     ; r4  - XR DX
(2)  539/FFFFFFFFC00003AC :                     ; r5  - SRC XL
(2)  540/FFFFFFFFC00003AC :                     ; r6  - SRC XR
(2)  541/FFFFFFFFC00003AC :                     ; r7  - SRC YL
(2)  542/FFFFFFFFC00003AC :                     ; r8  - SRC YR
(2)  543/FFFFFFFFC00003AC :                     ; r9  - Y current
(2)  544/FFFFFFFFC00003AC :                     ; r10  - Number of lines
(2)  545/FFFFFFFFC00003AC :                     ; ------------------------------------
(2)  546/FFFFFFFFC00003AC :                     
(2)  547/FFFFFFFFC00003AC :                     go_drwsld_updline_tex:
(2)  548/FFFFFFFFC00003AC : A074                		bra	drwsld_updline_tex
(2)  549/FFFFFFFFC00003AE : 0009                		nop
(2)  550/FFFFFFFFC00003B0 :                     go_drwtex_gonxtpz:
(2)  551/FFFFFFFFC00003B0 : A080                		bra	drwtex_gonxtpz
(2)  552/FFFFFFFFC00003B2 : 0009                		nop
(2)  553/FFFFFFFFC00003B4 :                     drwtsk_texmode:
(2)  554/FFFFFFFFC00003B4 : 55E7                		mov	@(plypz_src_xl,r14),r5		; Texture X left
(2)  555/FFFFFFFFC00003B6 : 56EB                		mov	@(plypz_src_xr,r14),r6		; Texture X right
(2)  556/FFFFFFFFC00003B8 : 57E9                		mov	@(plypz_src_yl,r14),r7		; Texture Y up
(2)  557/FFFFFFFFC00003BA : 58ED                		mov	@(plypz_src_yr,r14),r8		; Texture Y down
(2)  558/FFFFFFFFC00003BC :                     
(2)  559/FFFFFFFFC00003BC :                     drwsld_nxtline_tex:
(2)  560/FFFFFFFFC00003BC : 4911                		cmp/pz	r9			; Y Start below 0?
(2)  561/FFFFFFFFC00003BE : 8BF5                		bf	go_drwsld_updline_tex
(2)  562/FFFFFFFFC00003C0 : D043                		mov	tag_yhght,r0		; Y Start after 224?
(2)  563/FFFFFFFFC00003C2 : 3903                		cmp/ge	r0,r9
(2)  564/FFFFFFFFC00003C4 : 89F4                		bt	go_drwtex_gonxtpz
(2)  565/FFFFFFFFC00003C6 : 2F26                		mov	r2,@-r15
(2)  566/FFFFFFFFC00003C8 : 2F36                		mov	r3,@-r15
(2)  567/FFFFFFFFC00003CA : 2F46                		mov	r4,@-r15
(2)  568/FFFFFFFFC00003CC : 2F56                		mov	r5,@-r15
(2)  569/FFFFFFFFC00003CE : 2F66                		mov	r6,@-r15
(2)  570/FFFFFFFFC00003D0 : 2F76                		mov	r7,@-r15
(2)  571/FFFFFFFFC00003D2 : 2F86                		mov	r8,@-r15
(2)  572/FFFFFFFFC00003D4 : 2FA6                		mov	r10,@-r15
(2)  573/FFFFFFFFC00003D6 : 2FD6                		mov	r13,@-r15
(2)  574/FFFFFFFFC00003D8 : 6B13                		mov	r1,r11			; r11 - X left copy
(2)  575/FFFFFFFFC00003DA : 6C33                		mov	r3,r12			; r12 - X right copy
(2)  576/FFFFFFFFC00003DC : 4B29                		shlr16	r11
(2)  577/FFFFFFFFC00003DE : 4C29                		shlr16	r12
(2)  578/FFFFFFFFC00003E0 : 6BBF                		exts	r11,r11
(2)  579/FFFFFFFFC00003E2 : 6CCF                		exts	r12,r12
(2)  580/FFFFFFFFC00003E4 : 60C3                		mov	r12,r0			; r0: X Right - X Left
(2)  581/FFFFFFFFC00003E6 : 30B8                		sub	r11,r0
(2)  582/FFFFFFFFC00003E8 : 4015                		cmp/pl	r0			; Line reversed?
(2)  583/FFFFFFFFC00003EA : 8908                		bt	.txrevers
(2)  584/FFFFFFFFC00003EC : 60C3                		mov	r12,r0			; Swap XL and XR values
(2)  585/FFFFFFFFC00003EE : 6CB3                		mov	r11,r12
(2)  586/FFFFFFFFC00003F0 : 6B03                		mov	r0,r11
(2)  587/FFFFFFFFC00003F2 : 6053                		mov	r5,r0
(2)  588/FFFFFFFFC00003F4 : 6563                		mov	r6,r5
(2)  589/FFFFFFFFC00003F6 : 6603                		mov	r0,r6
(2)  590/FFFFFFFFC00003F8 : 6073                		mov	r7,r0
(2)  591/FFFFFFFFC00003FA : 6783                		mov	r8,r7
(2)  592/FFFFFFFFC00003FC : 6803                		mov	r0,r8
(2)  593/FFFFFFFFC00003FE :                     .txrevers:
(2)  594/FFFFFFFFC00003FE : 3CB0                		cmp/eq	r11,r12				; Same X position?
(2)  595/FFFFFFFFC0000400 : 8941                		bt	.tex_skip_line
(2)  596/FFFFFFFFC0000402 : D032                		mov	tag_width,r0		; X right < 0?
(2)  597/FFFFFFFFC0000404 : 4C15                		cmp/pl	r12
(2)  598/FFFFFFFFC0000406 : 8B3E                		bf	.tex_skip_line
(2)  599/FFFFFFFFC0000408 : 3B07                		cmp/gt	r0,r11				; X left > 320?
(2)  600/FFFFFFFFC000040A : 893C                		bt	.tex_skip_line
(2)  601/FFFFFFFFC000040C : 62C3                		mov	r12,r2
(2)  602/FFFFFFFFC000040E : 60B3                		mov 	r11,r0
(2)  603/FFFFFFFFC0000410 : 3208                		sub 	r0,r2
(2)  604/FFFFFFFFC0000412 : 3658                		sub	r5,r6
(2)  605/FFFFFFFFC0000414 : 3878                		sub	r7,r8
(2)  606/FFFFFFFFC0000416 :                     
(2)  607/FFFFFFFFC0000416 :                     	; Calculate new DX values
(2)  608/FFFFFFFFC0000416 :                     	; make sure DIV is available
(2)  609/FFFFFFFFC0000416 :                     	; (marsGbl_DivStop_M == 0)
(2)  610/FFFFFFFFC0000416 : 90C5                		mov	#_JR,r0				; r6 / r2
(2)  611/FFFFFFFFC0000418 : 2022                		mov	r2,@r0
(2)  612/FFFFFFFFC000041A : 1061                		mov	r6,@(4,r0)
(2)  613/FFFFFFFFC000041C : 0009                		nop
(2)  614/FFFFFFFFC000041E : 5601                		mov	@(4,r0),r6			; r8 / r2
(2)  615/FFFFFFFFC0000420 : 2022                		mov	r2,@r0
(2)  616/FFFFFFFFC0000422 : 1081                		mov	r8,@(4,r0)
(2)  617/FFFFFFFFC0000424 : 0009                		nop
(2)  618/FFFFFFFFC0000426 : 5801                		mov	@(4,r0),r8
(2)  619/FFFFFFFFC0000428 :                     
(2)  620/FFFFFFFFC0000428 :                     	; Limit X destination points
(2)  621/FFFFFFFFC0000428 :                     	; and correct the texture's X positions
(2)  622/FFFFFFFFC0000428 : D028                		mov	tag_width,r0		; XR point > 320?
(2)  623/FFFFFFFFC000042A : 3C07                		cmp/gt	r0,r12
(2)  624/FFFFFFFFC000042C : 8B00                		bf	.tr_fix
(2)  625/FFFFFFFFC000042E : 6C03                		mov	r0,r12				; Force XR to 320
(2)  626/FFFFFFFFC0000430 :                     .tr_fix:
(2)  627/FFFFFFFFC0000430 : 4B15                		cmp/pl	r11				; XL point < 0?
(2)  628/FFFFFFFFC0000432 : 8907                		bt	.tl_fix
(2)  629/FFFFFFFFC0000434 : 62BB                		neg	r11,r2				; Fix texture positions
(2)  630/FFFFFFFFC0000436 : 326D                		dmuls	r6,r2
(2)  631/FFFFFFFFC0000438 : 001A                		sts	macl,r0
(2)  632/FFFFFFFFC000043A : 350C                		add	r0,r5
(2)  633/FFFFFFFFC000043C : 328D                		dmuls	r8,r2
(2)  634/FFFFFFFFC000043E : 001A                		sts	macl,r0
(2)  635/FFFFFFFFC0000440 : 370C                		add	r0,r7
(2)  636/FFFFFFFFC0000442 : 2BBA                		xor	r11,r11				; And reset XL to 0
(2)  637/FFFFFFFFC0000444 :                     .tl_fix:
(2)  638/FFFFFFFFC0000444 :                     
(2)  639/FFFFFFFFC0000444 :                     	; ***OLD, STABLE
(2)  640/FFFFFFFFC0000444 : 3CB8                		sub 	r11,r12
(2)  641/FFFFFFFFC0000446 : 4C15                		cmp/pl	r12
(2)  642/FFFFFFFFC0000448 : 8B1D                		bf	.tex_skip_line
(2)  643/FFFFFFFFC000044A :                     ; 		mov	#RAM_Mars_Background,r4
(2)  644/FFFFFFFFC000044A :                     ; 		mov	@(mbg_fbdata,r4),r10
(2)  645/FFFFFFFFC000044A :                     ; 		mov	@(mbg_fbpos,r4),r0
(2)  646/FFFFFFFFC000044A :                     ; 		add	r0,r10
(2)  647/FFFFFFFFC000044A :                     ; 		mov.w	@(mbg_intrl_w,r4),r0
(2)  648/FFFFFFFFC000044A :                     ; 		mov	r0,r2
(2)  649/FFFFFFFFC000044A :                     ; 		mov.w	@(mbg_yfb,r4),r0
(2)  650/FFFFFFFFC000044A :                     ; 		mulu	r2,r0
(2)  651/FFFFFFFFC000044A :                     ; 		sts	macl,r0
(2)  652/FFFFFFFFC000044A :                     ; 		add	r0,r10
(2)  653/FFFFFFFFC000044A :                     ; 		mov 	r9,r0				; Y position * $200
(2)  654/FFFFFFFFC000044A :                     ; 		mulu	r0,r2				; background
(2)  655/FFFFFFFFC000044A :                     ; 		sts	macl,r0
(2)  656/FFFFFFFFC000044A :                     ; 		add 	r0,r10				; Add Y
(2)  657/FFFFFFFFC000044A :                     ; 		add 	r11,r10				; Add X
(2)  658/FFFFFFFFC000044A :                     ; 		mov	@(mbg_intrl_size,r4),r0
(2)  659/FFFFFFFFC000044A :                     ; 		cmp/ge	r0,r10
(2)  660/FFFFFFFFC000044A :                     ; 		bf	.lrgrsx
(2)  661/FFFFFFFFC000044A :                     ; 		sub	r0,r10
(2)  662/FFFFFFFFC000044A :                     ; .lrgrsx:
(2)  663/FFFFFFFFC000044A :                     ; 		mov	#_overwrite,r0
(2)  664/FFFFFFFFC000044A :                     ; 		add	r0,r10
(2)  665/FFFFFFFFC000044A :                     
(2)  666/FFFFFFFFC000044A : DA50                		mov	#_framebuffer+$200,r10
(2)  667/FFFFFFFFC000044C : 6093                		mov 	r9,r0				; Y position * $200
(2)  668/FFFFFFFFC000044E : 4018                		shll8	r0
(2)  669/FFFFFFFFC0000450 : 4000                		shll	r0
(2)  670/FFFFFFFFC0000452 : 3A0C                		add 	r0,r10				; Add Y
(2)  671/FFFFFFFFC0000454 : 3ABC                		add 	r11,r10				; Add X
(2)  672/FFFFFFFFC0000456 :                     
(2)  673/FFFFFFFFC0000456 : 90A6                		mov	#$FF,r0
(2)  674/FFFFFFFFC0000458 : 5BE1                		mov	@(plypz_mtrl,r14),r11		; r11 - texture data
(2)  675/FFFFFFFFC000045A : 54E0                		mov	@(plypz_type,r14),r4		;  r4 - texture width|palinc
(2)  676/FFFFFFFFC000045C : 6D43                		mov	r4,r13
(2)  677/FFFFFFFFC000045E : 4429                		shlr16	r4
(2)  678/FFFFFFFFC0000460 : 92A2                		mov	#$1FFF,r2
(2)  679/FFFFFFFFC0000462 : 2429                		and	r2,r4
(2)  680/FFFFFFFFC0000464 : 2D09                		and	r0,r13
(2)  681/FFFFFFFFC0000466 :                     .tex_xloop:
(2)  682/FFFFFFFFC0000466 : 6273                		mov	r7,r2
(2)  683/FFFFFFFFC0000468 : 4229                		shlr16	r2
(2)  684/FFFFFFFFC000046A : 242E                		mulu	r2,r4
(2)  685/FFFFFFFFC000046C : 6253                		mov	r5,r2	   		; Build column index
(2)  686/FFFFFFFFC000046E : 001A                		sts	macl,r0
(2)  687/FFFFFFFFC0000470 : 4229                		shlr16	r2
(2)  688/FFFFFFFFC0000472 : 302C                		add	r2,r0
(2)  689/FFFFFFFFC0000474 : 00BC                		mov.b	@(r0,r11),r0		; Read texture pixel
(2)  690/FFFFFFFFC0000476 : 30DC                		add	r13,r0			; Add index increment
(2)  691/FFFFFFFFC0000478 : C9FF                		and	#$FF,r0
(2)  692/FFFFFFFFC000047A : 2A00                		mov.b	r0,@r10	   		; Write pixel to Framebuffer
(2)  693/FFFFFFFFC000047C : 7A01                		add 	#1,r10
(2)  694/FFFFFFFFC000047E : 356C                		add	r6,r5			; Update X
(2)  695/FFFFFFFFC0000480 : 4C10                		dt	r12
(2)  696/FFFFFFFFC0000482 : 8FF0                		bf/s	.tex_xloop
(2)  697/FFFFFFFFC0000484 : 378C                		add	r8,r7			; Update Y
(2)  698/FFFFFFFFC0000486 :                     	; ****OLD
(2)  699/FFFFFFFFC0000486 :                     
(2)  700/FFFFFFFFC0000486 :                     .tex_skip_line:
(2)  701/FFFFFFFFC0000486 : 6DF6                		mov	@r15+,r13
(2)  702/FFFFFFFFC0000488 : 6AF6                		mov	@r15+,r10
(2)  703/FFFFFFFFC000048A : 68F6                		mov	@r15+,r8
(2)  704/FFFFFFFFC000048C : 67F6                		mov	@r15+,r7
(2)  705/FFFFFFFFC000048E : 66F6                		mov	@r15+,r6
(2)  706/FFFFFFFFC0000490 : 65F6                		mov	@r15+,r5
(2)  707/FFFFFFFFC0000492 : 64F6                		mov	@r15+,r4
(2)  708/FFFFFFFFC0000494 : 63F6                		mov	@r15+,r3
(2)  709/FFFFFFFFC0000496 : 62F6                		mov	@r15+,r2
(2)  710/FFFFFFFFC0000498 :                     drwsld_updline_tex:
(2)  711/FFFFFFFFC0000498 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  712/FFFFFFFFC000049A : 350C                		add	r0,r5
(2)  713/FFFFFFFFC000049C : 50EC                		mov	@(plypz_src_xr_dx,r14),r0
(2)  714/FFFFFFFFC000049E : 360C                		add	r0,r6
(2)  715/FFFFFFFFC00004A0 : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2)  716/FFFFFFFFC00004A2 : 370C                		add	r0,r7
(2)  717/FFFFFFFFC00004A4 : 50EE                		mov	@(plypz_src_yr_dx,r14),r0
(2)  718/FFFFFFFFC00004A6 : 380C                		add	r0,r8
(2)  719/FFFFFFFFC00004A8 : 312C                		add	r2,r1				; Update X postions
(2)  720/FFFFFFFFC00004AA : 334C                		add	r4,r3
(2)  721/FFFFFFFFC00004AC : 4A10                		dt	r10
(2)  722/FFFFFFFFC00004AE : 8901                		bt	drwtex_gonxtpz
(2)  723/FFFFFFFFC00004B0 : AF84                		bra	drwsld_nxtline_tex
(2)  724/FFFFFFFFC00004B2 : 7901                		add	#1,r9
(2)  725/FFFFFFFFC00004B4 :                     
(2)  726/FFFFFFFFC00004B4 :                     drwtex_gonxtpz:
(2)  727/FFFFFFFFC00004B4 : 7E3C                		add	#sizeof_plypz,r14		; And set new point
(2)  728/FFFFFFFFC00004B6 : 60E3                		mov	r14,r0
(2)  729/FFFFFFFFC00004B8 : DE35                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2)  730/FFFFFFFFC00004BA : 30E3                		cmp/ge	r14,r0
(2)  731/FFFFFFFFC00004BC : 8B00                		bf	.reset_rd
(2)  732/FFFFFFFFC00004BE : D035                		mov	#RAM_Mars_VdpDrwList,r0
(2)  733/FFFFFFFFC00004C0 :                     .reset_rd:
(2)  734/FFFFFFFFC00004C0 : C202                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  735/FFFFFFFFC00004C2 : C50C                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece
(2)  736/FFFFFFFFC00004C4 : 70FF                		add	#-1,r0
(2)  737/FFFFFFFFC00004C6 : C10C                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  738/FFFFFFFFC00004C8 : A05E                		bra	drwtask_return
(2)  739/FFFFFFFFC00004CA : E210                		mov	#$10,r2				; Timer for next watchdog
(2)  740/FFFFFFFFC00004CC :                     		align 4
(2)  741/FFFFFFFFC00004CC : 0000 0140           tag_width:	dc.l SCREEN_WIDTH
(2)  742/FFFFFFFFC00004D0 : 0000 00E0           tag_yhght:	dc.l SCREEN_HEIGHT
(2)  743/FFFFFFFFC00004D4 :                     
(2)  744/FFFFFFFFC00004D4 :                     
(2)  745/FFFFFFFFC00004D4 :                     ; ------------------------------------
(2)  746/FFFFFFFFC00004D4 :                     ; Solid Color
(2)  747/FFFFFFFFC00004D4 :                     ;
(2)  748/FFFFFFFFC00004D4 :                     ; r1  - XL
(2)  749/FFFFFFFFC00004D4 :                     ; r2  - XL DX
(2)  750/FFFFFFFFC00004D4 :                     ; r3  - XR
(2)  751/FFFFFFFFC00004D4 :                     ; r4  - XR DX
(2)  752/FFFFFFFFC00004D4 :                     ; r9  - Y current
(2)  753/FFFFFFFFC00004D4 :                     ; r10  - Number of lines
(2)  754/FFFFFFFFC00004D4 :                     ; ------------------------------------
(2)  755/FFFFFFFFC00004D4 :                     
(2)  756/FFFFFFFFC00004D4 :                     drwtsk_solidmode:
(2)  757/FFFFFFFFC00004D4 : AFFE                 bra *
(2)  758/FFFFFFFFC00004D6 : 0009                 nop
(2)  759/FFFFFFFFC00004D8 : 9065                		mov	#$FF,r0
(2)  760/FFFFFFFFC00004DA : 56E1                		mov	@(plypz_mtrl,r14),r6
(2)  761/FFFFFFFFC00004DC : 55E0                		mov	@(plypz_type,r14),r5
(2)  762/FFFFFFFFC00004DE : 2509                		and	r0,r5
(2)  763/FFFFFFFFC00004E0 : 2609                		and	r0,r6
(2)  764/FFFFFFFFC00004E2 : 365C                		add	r5,r6
(2)  765/FFFFFFFFC00004E4 : DD2C                		mov	#_vdpreg,r13
(2)  766/FFFFFFFFC00004E6 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  767/FFFFFFFFC00004E8 : C802                		tst	#2,r0
(2)  768/FFFFFFFFC00004EA : 8BFC                		bf	.wait
(2)  769/FFFFFFFFC00004EC :                     drwsld_nxtline:
(2)  770/FFFFFFFFC00004EC : 6093                		mov	r9,r0
(2)  771/FFFFFFFFC00004EE : 30AC                		add	r10,r0
(2)  772/FFFFFFFFC00004F0 : 4015                		cmp/pl	r0
(2)  773/FFFFFFFFC00004F2 : 8B3B                		bf	drwsld_nextpz
(2)  774/FFFFFFFFC00004F4 : 4911                		cmp/pz	r9
(2)  775/FFFFFFFFC00004F6 : 8B34                		bf	drwsld_updline
(2)  776/FFFFFFFFC00004F8 : 9057                		mov	#SCREEN_HEIGHT,r0
(2)  777/FFFFFFFFC00004FA : 3907                		cmp/gt	r0,r9
(2)  778/FFFFFFFFC00004FC : 8936                		bt	drwsld_nextpz
(2)  779/FFFFFFFFC00004FE :                     
(2)  780/FFFFFFFFC00004FE : 6B13                		mov	r1,r11
(2)  781/FFFFFFFFC0000500 : 6C33                		mov	r3,r12
(2)  782/FFFFFFFFC0000502 : 4B29                		shlr16	r11
(2)  783/FFFFFFFFC0000504 : 4C29                		shlr16	r12
(2)  784/FFFFFFFFC0000506 : 6BBF                		exts	r11,r11
(2)  785/FFFFFFFFC0000508 : 6CCF                		exts	r12,r12
(2)  786/FFFFFFFFC000050A : 60C3                		mov	r12,r0
(2)  787/FFFFFFFFC000050C : 30B8                		sub	r11,r0
(2)  788/FFFFFFFFC000050E : 4011                		cmp/pz	r0
(2)  789/FFFFFFFFC0000510 : 8902                		bt	.revers
(2)  790/FFFFFFFFC0000512 : 60C3                		mov	r12,r0
(2)  791/FFFFFFFFC0000514 : 6CB3                		mov	r11,r12
(2)  792/FFFFFFFFC0000516 : 6B03                		mov	r0,r11
(2)  793/FFFFFFFFC0000518 :                     .revers:
(2)  794/FFFFFFFFC0000518 : 9048                		mov	#SCREEN_WIDTH-2,r0
(2)  795/FFFFFFFFC000051A : 4C15                		cmp/pl	r12
(2)  796/FFFFFFFFC000051C : 8B21                		bf	drwsld_updline
(2)  797/FFFFFFFFC000051E : 3B07                		cmp/gt	r0,r11
(2)  798/FFFFFFFFC0000520 : 891F                		bt	drwsld_updline
(2)  799/FFFFFFFFC0000522 : 3C07                		cmp/gt	r0,r12
(2)  800/FFFFFFFFC0000524 : 8B00                		bf	.r_fix
(2)  801/FFFFFFFFC0000526 : 6C03                		mov	r0,r12
(2)  802/FFFFFFFFC0000528 :                     .r_fix:
(2)  803/FFFFFFFFC0000528 : 4B15                		cmp/pl	r11
(2)  804/FFFFFFFFC000052A : 8900                		bt	.l_fix
(2)  805/FFFFFFFFC000052C : 2BBA                		xor	r11,r11
(2)  806/FFFFFFFFC000052E :                     .l_fix:
(2)  807/FFFFFFFFC000052E : E0FE                		mov	#-2,r0
(2)  808/FFFFFFFFC0000530 : 2B09                		and	r0,r11
(2)  809/FFFFFFFFC0000532 : 2C09                		and	r0,r12
(2)  810/FFFFFFFFC0000534 : 60C3                		mov	r12,r0
(2)  811/FFFFFFFFC0000536 : 30B8                		sub	r11,r0
(2)  812/FFFFFFFFC0000538 : 4015                		cmp/pl	r0
(2)  813/FFFFFFFFC000053A : 8B12                		bf	drwsld_updline
(2)  814/FFFFFFFFC000053C :                     
(2)  815/FFFFFFFFC000053C : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  816/FFFFFFFFC000053E : C802                		tst	#2,r0
(2)  817/FFFFFFFFC0000540 : 8BFC                		bf	.wait
(2)  818/FFFFFFFFC0000542 : 60C3                		mov	r12,r0
(2)  819/FFFFFFFFC0000544 : 30B8                		sub	r11,r0
(2)  820/FFFFFFFFC0000546 : 6C03                		mov	r0,r12
(2)  821/FFFFFFFFC0000548 : 4001                		shlr	r0
(2)  822/FFFFFFFFC000054A : 81D2                		mov.w	r0,@(4,r13)	; length
(2)  823/FFFFFFFFC000054C : 60B3                		mov	r11,r0
(2)  824/FFFFFFFFC000054E : 4001                		shlr	r0
(2)  825/FFFFFFFFC0000550 : 6593                		mov	r9,r5
(2)  826/FFFFFFFFC0000552 : 7501                		add	#1,r5
(2)  827/FFFFFFFFC0000554 : 4518                		shll8	r5
(2)  828/FFFFFFFFC0000556 : 305C                		add	r5,r0
(2)  829/FFFFFFFFC0000558 : 81D3                		mov.w	r0,@(6,r13)	; address
(2)  830/FFFFFFFFC000055A : 6063                		mov	r6,r0
(2)  831/FFFFFFFFC000055C : 4018                		shll8	r0
(2)  832/FFFFFFFFC000055E : 206B                		or	r6,r0
(2)  833/FFFFFFFFC0000560 : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2)  834/FFFFFFFFC0000562 :                     ; .wait:	mov.w	@(10,r13),r0
(2)  835/FFFFFFFFC0000562 :                     ; 		tst	#2,r0
(2)  836/FFFFFFFFC0000562 :                     ; 		bf	.wait
(2)  837/FFFFFFFFC0000562 :                     
(2)  838/FFFFFFFFC0000562 :                     ; 	If the line is too large, leave it to VDP
(2)  839/FFFFFFFFC0000562 :                     ; 	and exit watchdog, we will come back on
(2)  840/FFFFFFFFC0000562 :                     ; 	next trigger.
(2)  841/FFFFFFFFC0000562 :                     ; 		mov	#$28,r0
(2)  842/FFFFFFFFC0000562 :                     ; 		cmp/gt	r0,r12
(2)  843/FFFFFFFFC0000562 :                     ; 		bf	drwsld_updline
(2)  844/FFFFFFFFC0000562 :                     ; 		mov	#2,r0
(2)  845/FFFFFFFFC0000562 :                     ; 		mov.w	r0,@(marsGbl_DrwTask,gbr)
(2)  846/FFFFFFFFC0000562 :                     ; 		mov	#Cach_Bkup_S,r0
(2)  847/FFFFFFFFC0000562 :                     ; 		mov	r1,@-r0
(2)  848/FFFFFFFFC0000562 :                     ; 		mov	r2,@-r0
(2)  849/FFFFFFFFC0000562 :                     ; 		mov	r3,@-r0
(2)  850/FFFFFFFFC0000562 :                     ; 		mov	r4,@-r0
(2)  851/FFFFFFFFC0000562 :                     ; 		mov	r5,@-r0
(2)  852/FFFFFFFFC0000562 :                     ; 		mov	r6,@-r0
(2)  853/FFFFFFFFC0000562 :                     ; 		mov	r7,@-r0
(2)  854/FFFFFFFFC0000562 :                     ; 		mov	r8,@-r0
(2)  855/FFFFFFFFC0000562 :                     ; 		mov	r9,@-r0
(2)  856/FFFFFFFFC0000562 :                     ; 		mov	r10,@-r0
(2)  857/FFFFFFFFC0000562 :                     ; 		mov	r11,@-r0
(2)  858/FFFFFFFFC0000562 :                     ; 		mov	r12,@-r0
(2)  859/FFFFFFFFC0000562 :                     ; 		mov	r13,@-r0
(2)  860/FFFFFFFFC0000562 :                     ; 		mov	r14,@-r0
(2)  861/FFFFFFFFC0000562 :                     ; 		bra	drwtask_return
(2)  862/FFFFFFFFC0000562 :                     ; 		mov	#$10,r2			; Exit and re-enter
(2)  863/FFFFFFFFC0000562 :                     drwsld_updline:
(2)  864/FFFFFFFFC0000562 : 312C                		add	r2,r1
(2)  865/FFFFFFFFC0000564 : 334C                		add	r4,r3
(2)  866/FFFFFFFFC0000566 : 4A10                		dt	r10
(2)  867/FFFFFFFFC0000568 : 8FC0                		bf/s	drwsld_nxtline
(2)  868/FFFFFFFFC000056A : 7901                		add	#1,r9
(2)  869/FFFFFFFFC000056C :                     
(2)  870/FFFFFFFFC000056C :                     ; ------------------------------------
(2)  871/FFFFFFFFC000056C :                     
(2)  872/FFFFFFFFC000056C :                     drwsld_nextpz:
(2)  873/FFFFFFFFC000056C : 7E3C                		add	#sizeof_plypz,r14		; And set new point
(2)  874/FFFFFFFFC000056E : 60E3                		mov	r14,r0
(2)  875/FFFFFFFFC0000570 : DE0A                		mov	#RAM_Mars_VdpDrwList_e,r14	; End-of-list?
(2)  876/FFFFFFFFC0000572 : 30E3                		cmp/ge	r14,r0
(2)  877/FFFFFFFFC0000574 : 8B00                		bf	.reset_rd
(2)  878/FFFFFFFFC0000576 : D00A                		mov	#RAM_Mars_VdpDrwList,r0
(2)  879/FFFFFFFFC0000578 :                     .reset_rd:
(2)  880/FFFFFFFFC0000578 : C202                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  881/FFFFFFFFC000057A : C50C                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece
(2)  882/FFFFFFFFC000057C : 70FF                		add	#-1,r0
(2)  883/FFFFFFFFC000057E : C10C                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  884/FFFFFFFFC0000580 : 4015                		cmp/pl	r0
(2)  885/FFFFFFFFC0000582 : 8B01                		bf	.finish_it
(2)  886/FFFFFFFFC0000584 : AEEF                		bra	VideoMars_DrwPlgnPz
(2)  887/FFFFFFFFC0000586 : 0009                		nop
(2)  888/FFFFFFFFC0000588 :                     .finish_it:
(2)  889/FFFFFFFFC0000588 :                     
(2)  890/FFFFFFFFC0000588 :                     drwtask_return:
(2)  891/FFFFFFFFC0000588 :                     
(2)  892/FFFFFFFFC0000588 :                     drwtask_exit:
(2)  893/FFFFFFFFC0000588 : 000B                		rts
(2)  894/FFFFFFFFC000058A : 0009                		nop
(2)  895/FFFFFFFFC000058C :                     		align 4
(2)  896/FFFFFFFFC000058C : 0400 0200 0600 DB10 		ltorg
                    0600 9F10 2000 4100 
                    0600 DB10 0600 9F10 
                    FF00 00FF 1FFF 00E0 
                    013E                
(2)  897/FFFFFFFFC00005AE :                     
(2)  898/FFFFFFFFC00005AE :                     ; ------------------------------------------------
(2)  899/FFFFFFFFC00005AE :                     
(2)  900/FFFFFFFFC00005AE :                     		align 4
(2)  901/FFFFFFFFC00005B0 :                     Cach_Bkup_L	ds.l 16		;
(2)  902/FFFFFFFFC00005F0 :                     Cach_Bkup_S	ds.l 0		; <-- Reads backwards
(2)  903/FFFFFFFFC00005F0 :                     Cach_BkupP_L	ds.l 6
(2)  904/FFFFFFFFC0000608 :                     Cach_BkupP_S	ds.l 0
(2)  905/FFFFFFFFC0000608 :                     Cach_DDA_Top	ds.l 2*2	; First 2 points
(2)  906/FFFFFFFFC0000618 :                     Cach_DDA_Last	ds.l 2*2	; Triangle or Quad (+8)
(2)  907/FFFFFFFFC0000628 :                     Cach_DDA_Src	ds.l 4*2
(2)  908/FFFFFFFFC0000648 :                     Cach_DDA_Src_L	ds.l 4		; X/DX/Y/DX result for textures
(2)  909/FFFFFFFFC0000658 :                     Cach_DDA_Src_R	ds.l 4
(2)  910/FFFFFFFFC0000668 :                     
(2)  911/FFFFFFFFC0000668 :                     Cach_Drw_All	ds.l 1		; Draw timers moved here
(2)  912/FFFFFFFFC000066C :                     Cach_Drw_U	ds.l 1
(2)  913/FFFFFFFFC0000670 :                     Cach_Drw_D	ds.l 1
(2)  914/FFFFFFFFC0000674 :                     Cach_Drw_L	ds.l 1
(2)  915/FFFFFFFFC0000678 :                     Cach_Drw_R	ds.l 1
(2)  916/FFFFFFFFC000067C :                     Cach_XHead_L	ds.l 1		; Left draw beam
(2)  917/FFFFFFFFC0000680 :                     Cach_XHead_R	ds.l 1		; Right draw beam
(2)  918/FFFFFFFFC0000684 :                     Cach_YHead_U	ds.l 1		; Top draw beam
(2)  919/FFFFFFFFC0000688 :                     Cach_YHead_D	ds.l 1		; Bottom draw beam
(2)  920/FFFFFFFFC000068C :                     Cach_BgFbPos_V	ds.l 1		; Framebuffer Y DIRECT position (then multiply with internal WIDTH externally)
(2)  921/FFFFFFFFC0000690 :                     Cach_BgFbPos_H	ds.l 1		; Framebuffer TOPLEFT position
(2)  922/FFFFFFFFC0000694 :                     
(2)  923/FFFFFFFFC0000694 :                     ; ------------------------------------------------
(2)  924/ 6001BA4 :                     .end:		phase CACHE_MASTER+.end&$1FFF
(2)  925/ 6001BA4 :                     CACHE_MASTER_E:
(2)  926/ 6001BA4 :                     		align 4
(2)  930/ 6001BA4 :                     
(2)  931/ 6001BA4 :                     ; ====================================================================
(2)  932/ 6001BA4 :                     ; ----------------------------------------------------------------
(2)  933/ 6001BA4 :                     ; CACHE code for Slave CPU
(2)  934/ 6001BA4 :                     ;
(2)  935/ 6001BA4 :                     ; LIMIT: $800 bytes
(2)  936/ 6001BA4 :                     ; ----------------------------------------------------------------
(2)  937/ 6001BA4 :                     
(2)  938/ 6001BA4 :                     		align 4
(2)  939/ 6001BA4 :                     CACHE_SLAVE:
(2)  940/FFFFFFFFC0000000 :                     		phase $C0000000
(2)  941/FFFFFFFFC0000000 :                     
(2)  942/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)  943/FFFFFFFFC0000000 :                     ; Small sample storage for the DMA-protection
(2)  944/FFFFFFFFC0000000 :                     ; ------------------------------------------------
(2)  945/FFFFFFFFC0000000 :                     
(2)  946/FFFFFFFFC0000000 :                     MarsSnd_PwmCache	ds.b $80*MAX_PWMCHNL
(2)  947/FFFFFFFFC0000380 :                     MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(2)  948/FFFFFFFFC0000498 :                     MarsSnd_PwmControl	ds.b $38	; 7 bytes per channel.
(2)  949/FFFFFFFFC00004D0 :                     
(2)  950/FFFFFFFFC00004D0 :                     ; ------------------------------------------------
(2)  951/FFFFFFFFC00004D0 :                     ; Mars PWM playback (Runs on PWM interrupt)
(2)  952/FFFFFFFFC00004D0 :                     ; r0-r10 only
(2)  953/FFFFFFFFC00004D0 :                     ; ------------------------------------------------
(2)  954/FFFFFFFFC00004D0 :                     
(2)  955/FFFFFFFFC00004D0 :                     ; **** CRITICAL ROUTINE, MUST BE FAST ***
(2)  956/FFFFFFFFC00004D0 :                     
(2)  957/FFFFFFFFC00004D0 :                     MarsSound_ReadPwm:
(2)  958/FFFFFFFFC00004D0 : 2F26                		mov	r2,@-r15
(2)  959/FFFFFFFFC00004D2 : 2F36                		mov	r3,@-r15
(2)  960/FFFFFFFFC00004D4 : 2F46                		mov	r4,@-r15
(2)  961/FFFFFFFFC00004D6 : 2F56                		mov	r5,@-r15
(2)  962/FFFFFFFFC00004D8 : 2F66                		mov	r6,@-r15
(2)  963/FFFFFFFFC00004DA : 2F76                		mov	r7,@-r15
(2)  964/FFFFFFFFC00004DC : 2F86                		mov	r8,@-r15
(2)  965/FFFFFFFFC00004DE : 2F96                		mov	r9,@-r15
(2)  966/FFFFFFFFC00004E0 : 2FA6                		mov	r10,@-r15
(2)  967/FFFFFFFFC00004E2 : 4F12                		sts	macl,@-r15
(2)  968/FFFFFFFFC00004E4 :                     
(2)  969/FFFFFFFFC00004E4 :                     ; ------------------------------------------------
(2)  970/FFFFFFFFC00004E4 :                     
(2)  971/FFFFFFFFC00004E4 : DA45                		mov	#MarsSnd_PwmCache,r10
(2)  972/FFFFFFFFC00004E6 : D946                		mov	#MarsSnd_PwmChnls,r9	; r9 - Channel list
(2)  973/FFFFFFFFC00004E8 : E807                		mov 	#MAX_PWMCHNL,r8		; r8 - Number of channels
(2)  974/FFFFFFFFC00004EA : E700                		mov 	#0,r7			; r7 - RIGHT BASE wave
(2)  975/FFFFFFFFC00004EC : E600                		mov 	#0,r6			; r6 - LEFT BASE wave
(2)  976/FFFFFFFFC00004EE :                     .loop:
(2)  977/FFFFFFFFC00004EE : 5090                		mov	@(mchnsnd_enbl,r9),r0	; Channel enabled? (non-Zero)
(2)  978/FFFFFFFFC00004F0 : 8800                		cmp/eq	#0,r0
(2)  979/FFFFFFFFC00004F2 : 8B03                		bf	.on
(2)  980/FFFFFFFFC00004F4 :                     .silent:
(2)  981/FFFFFFFFC00004F4 : E07F                		mov	#$7F,r0
(2)  982/FFFFFFFFC00004F6 : 6203                		mov	r0,r2
(2)  983/FFFFFFFFC00004F8 : A05F                		bra	.skip
(2)  984/FFFFFFFFC00004FA : 6103                		mov	r0,r1
(2)  985/FFFFFFFFC00004FC :                     .on:
(2)  986/FFFFFFFFC00004FC : 5491                		mov 	@(mchnsnd_read,r9),r4
(2)  987/FFFFFFFFC00004FE : 6343                		mov	r4,r3
(2)  988/FFFFFFFFC0000500 : 5095                		mov 	@(mchnsnd_end,r9),r0
(2)  989/FFFFFFFFC0000502 : D140                		mov	#$00FFFFFF,r1
(2)  990/FFFFFFFFC0000504 : 4319                		shlr8	r3
(2)  991/FFFFFFFFC0000506 : 4019                		shlr8	r0
(2)  992/FFFFFFFFC0000508 : 2319                		and	r1,r3
(2)  993/FFFFFFFFC000050A : 2019                		and	r1,r0
(2)  994/FFFFFFFFC000050C : 3302                		cmp/hs	r0,r3
(2)  995/FFFFFFFFC000050E : 8B0D                		bf	.read
(2)  996/FFFFFFFFC0000510 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  997/FFFFFFFFC0000512 : C804                		tst	#%00000100,r0
(2)  998/FFFFFFFFC0000514 : 8B03                		bf	.loop_me
(2)  999/FFFFFFFFC0000516 : E000                		mov 	#0,r0
(2) 1000/FFFFFFFFC0000518 : 1900                		mov 	r0,@(mchnsnd_enbl,r9)
(2) 1001/FFFFFFFFC000051A : AFEB                		bra	.silent
(2) 1002/FFFFFFFFC000051C : 0009                		nop
(2) 1003/FFFFFFFFC000051E :                     .loop_me:
(2) 1004/FFFFFFFFC000051E : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2) 1005/FFFFFFFFC0000520 : 5196                		mov	@(mchnsnd_loop,r9),r1
(2) 1006/FFFFFFFFC0000522 : 5494                		mov 	@(mchnsnd_start,r9),r4
(2) 1007/FFFFFFFFC0000524 : C808                		tst	#%00001000,r0
(2) 1008/FFFFFFFFC0000526 : 8900                		bt	.mono_l
(2) 1009/FFFFFFFFC0000528 : 4100                		shll	r1
(2) 1010/FFFFFFFFC000052A :                     .mono_l:
(2) 1011/FFFFFFFFC000052A : 341C                		add	r1,r4
(2) 1012/FFFFFFFFC000052C :                     
(2) 1013/FFFFFFFFC000052C :                     ; read wave
(2) 1014/FFFFFFFFC000052C :                     ; r4 - WAVE READ pointer
(2) 1015/FFFFFFFFC000052C :                     .read:
(2) 1016/FFFFFFFFC000052C : 5597                		mov 	@(mchnsnd_pitch,r9),r5	; Check if sample is on ROM
(2) 1017/FFFFFFFFC000052E : 5293                		mov 	@(mchnsnd_bank,r9),r2
(2) 1018/FFFFFFFFC0000530 : D035                		mov	#CS1,r0
(2) 1019/FFFFFFFFC0000532 : 3200                		cmp/eq	r0,r2
(2) 1020/FFFFFFFFC0000534 : 8B11                		bf	.not_rom
(2) 1021/FFFFFFFFC0000536 : D135                		mov	#MarsSnd_RvMode,r1
(2) 1022/FFFFFFFFC0000538 : 6012                		mov	@r1,r0
(2) 1023/FFFFFFFFC000053A : 8801                		cmp/eq	#1,r0
(2) 1024/FFFFFFFFC000053C : 8B0D                		bf	.not_rom
(2) 1025/FFFFFFFFC000053E :                     
(2) 1026/FFFFFFFFC000053E :                     	; r1 - left WAV
(2) 1027/FFFFFFFFC000053E :                     	; r3 - right WAV
(2) 1028/FFFFFFFFC000053E :                     	; r4 - original READ point
(2) 1029/FFFFFFFFC000053E :                     	; r5 - Pitch
(2) 1030/FFFFFFFFC000053E : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2) 1031/FFFFFFFFC0000540 : 6153                		mov	r5,r1
(2) 1032/FFFFFFFFC0000542 : C808                		tst	#%00001000,r0
(2) 1033/FFFFFFFFC0000544 : 8900                		bt	.mono_c
(2) 1034/FFFFFFFFC0000546 : 4100                		shll	r1
(2) 1035/FFFFFFFFC0000548 :                     .mono_c:
(2) 1036/FFFFFFFFC0000548 : 5292                		mov	@(mchnsnd_cchread,r9),r2
(2) 1037/FFFFFFFFC000054A : 4219                		shlr8	r2
(2) 1038/FFFFFFFFC000054C : E17F                		mov	#$7F,r1
(2) 1039/FFFFFFFFC000054E : 2219                		and	r1,r2
(2) 1040/FFFFFFFFC0000550 : 32AC                		add	r10,r2
(2) 1041/FFFFFFFFC0000552 : 6124                		mov.b	@r2+,r1
(2) 1042/FFFFFFFFC0000554 : 6324                		mov.b	@r2+,r3			; null in MONO samples
(2) 1043/FFFFFFFFC0000556 : A00B                		bra	.from_rv
(2) 1044/FFFFFFFFC0000558 : 0009                		nop
(2) 1045/FFFFFFFFC000055A :                     
(2) 1046/FFFFFFFFC000055A :                     ; Play as normal
(2) 1047/FFFFFFFFC000055A :                     ; r0 - flags
(2) 1048/FFFFFFFFC000055A :                     ; r4 - READ pointer
(2) 1049/FFFFFFFFC000055A :                     .not_rom:
(2) 1050/FFFFFFFFC000055A : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2) 1051/FFFFFFFFC000055C : 6343                		mov 	r4,r3
(2) 1052/FFFFFFFFC000055E : 4319                		shlr8	r3
(2) 1053/FFFFFFFFC0000560 : D128                		mov	#$00FFFFFF,r1
(2) 1054/FFFFFFFFC0000562 : C808                		tst	#%00001000,r0
(2) 1055/FFFFFFFFC0000564 : 8900                		bt	.mono_a
(2) 1056/FFFFFFFFC0000566 : 71FF                		add	#-1,r1
(2) 1057/FFFFFFFFC0000568 :                     .mono_a:
(2) 1058/FFFFFFFFC0000568 : 2319                		and	r1,r3
(2) 1059/FFFFFFFFC000056A : 232B                		or	r2,r3
(2) 1060/FFFFFFFFC000056C : 6134                		mov.b	@r3+,r1
(2) 1061/FFFFFFFFC000056E : 6334                		mov.b	@r3+,r3
(2) 1062/FFFFFFFFC0000570 :                     .from_rv:
(2) 1063/FFFFFFFFC0000570 : 6213                		mov	r1,r2
(2) 1064/FFFFFFFFC0000572 : C808                		tst	#%00001000,r0
(2) 1065/FFFFFFFFC0000574 : 8901                		bt	.mono
(2) 1066/FFFFFFFFC0000576 : 6233                		mov	r3,r2
(2) 1067/FFFFFFFFC0000578 : 4500                		shll	r5
(2) 1068/FFFFFFFFC000057A :                     .mono:
(2) 1069/FFFFFFFFC000057A : 345C                		add	r5,r4
(2) 1070/FFFFFFFFC000057C : 1941                		mov	r4,@(mchnsnd_read,r9)
(2) 1071/FFFFFFFFC000057E : 5392                		mov	@(mchnsnd_cchread,r9),r3
(2) 1072/FFFFFFFFC0000580 : 335C                		add	r5,r3
(2) 1073/FFFFFFFFC0000582 : 1932                		mov	r3,@(mchnsnd_cchread,r9)
(2) 1074/FFFFFFFFC0000584 : 933E                		mov	#$FF,r3
(2) 1075/FFFFFFFFC0000586 : 2139                		and	r3,r1
(2) 1076/FFFFFFFFC0000588 : 2239                		and	r3,r2
(2) 1077/FFFFFFFFC000058A : C802                		tst	#%00000010,r0	; LEFT enabled?
(2) 1078/FFFFFFFFC000058C : 8B00                		bf	.no_l
(2) 1079/FFFFFFFFC000058E : E17F                		mov	#$7F,r1		; Force LEFT off
(2) 1080/FFFFFFFFC0000590 :                     .no_l:
(2) 1081/FFFFFFFFC0000590 : C801                		tst	#%00000001,r0	; RIGHT enabled?
(2) 1082/FFFFFFFFC0000592 : 8B00                		bf	.no_r
(2) 1083/FFFFFFFFC0000594 : E27F                		mov	#$7F,r2		; Force RIGHT off
(2) 1084/FFFFFFFFC0000596 :                     .no_r:
(2) 1085/FFFFFFFFC0000596 : 5099                		mov	@(mchnsnd_vol,r9),r0
(2) 1086/FFFFFFFFC0000598 : 4015                		cmp/pl	r0
(2) 1087/FFFFFFFFC000059A : 8B0E                		bf	.skip
(2) 1088/FFFFFFFFC000059C : 7001                		add	#1,r0
(2) 1089/FFFFFFFFC000059E : 210E                		mulu	r0,r1
(2) 1090/FFFFFFFFC00005A0 : 041A                		sts	macl,r4
(2) 1091/FFFFFFFFC00005A2 : 4419                		shlr8	r4
(2) 1092/FFFFFFFFC00005A4 : 3148                		sub	r4,r1
(2) 1093/FFFFFFFFC00005A6 : 220E                		mulu	r0,r2
(2) 1094/FFFFFFFFC00005A8 : 041A                		sts	macl,r4
(2) 1095/FFFFFFFFC00005AA : 4419                		shlr8	r4
(2) 1096/FFFFFFFFC00005AC : 3248                		sub	r4,r2
(2) 1097/FFFFFFFFC00005AE : E47F                		mov	#$7F,r4
(2) 1098/FFFFFFFFC00005B0 : 240E                		mulu	r0,r4
(2) 1099/FFFFFFFFC00005B2 : 001A                		sts	macl,r0
(2) 1100/FFFFFFFFC00005B4 : 4019                		shlr8	r0
(2) 1101/FFFFFFFFC00005B6 : 310C                		add	r0,r1
(2) 1102/FFFFFFFFC00005B8 : 320C                		add	r0,r2
(2) 1103/FFFFFFFFC00005BA :                     .skip:
(2) 1104/FFFFFFFFC00005BA : 7101                		add	#1,r1
(2) 1105/FFFFFFFFC00005BC : 7201                		add	#1,r2
(2) 1106/FFFFFFFFC00005BE : 361C                		add	r1,r6
(2) 1107/FFFFFFFFC00005C0 : 372C                		add	r2,r7
(2) 1108/FFFFFFFFC00005C2 : 9029                		mov	#$80,r0
(2) 1109/FFFFFFFFC00005C4 : 3A0C                		add	r0,r10
(2) 1110/FFFFFFFFC00005C6 : 4810                		dt	r8
(2) 1111/FFFFFFFFC00005C8 : 8F91                		bf/s	.loop
(2) 1112/FFFFFFFFC00005CA : 7928                		add	#sizeof_sndchn,r9
(2) 1113/FFFFFFFFC00005CC : 9025                		mov	#$3FF,r0		; Overflow protection
(2) 1114/FFFFFFFFC00005CE : 3607                		cmp/gt	r0,r6
(2) 1115/FFFFFFFFC00005D0 : 8B00                		bf	.lmuch
(2) 1116/FFFFFFFFC00005D2 : 6603                		mov	r0,r6
(2) 1117/FFFFFFFFC00005D4 :                     .lmuch:
(2) 1118/FFFFFFFFC00005D4 : 3707                		cmp/gt	r0,r7
(2) 1119/FFFFFFFFC00005D6 : 8B00                		bf	.rmuch
(2) 1120/FFFFFFFFC00005D8 : 6703                		mov	r0,r7
(2) 1121/FFFFFFFFC00005DA :                     .rmuch:
(2) 1122/FFFFFFFFC00005DA : D10D                		mov	#_sysreg+lchwidth,r1	; Write WAVE result
(2) 1123/FFFFFFFFC00005DC : D20D                		mov	#_sysreg+rchwidth,r2
(2) 1124/FFFFFFFFC00005DE : 2161                 		mov.w	r6,@r1
(2) 1125/FFFFFFFFC00005E0 : 2271                 		mov.w	r7,@r2
(2) 1126/FFFFFFFFC00005E2 :                     ; 		mov	#_sysreg+monowidth,r3	; Works fine without this...
(2) 1127/FFFFFFFFC00005E2 :                     ; 		mov.b	@r3,r0
(2) 1128/FFFFFFFFC00005E2 :                     ; 		tst	#$80,r0
(2) 1129/FFFFFFFFC00005E2 :                     ; 		bf	.retry
(2) 1130/FFFFFFFFC00005E2 : 4F16                		lds	@r15+,macl
(2) 1131/FFFFFFFFC00005E4 : 6AF6                		mov	@r15+,r10
(2) 1132/FFFFFFFFC00005E6 : 69F6                		mov	@r15+,r9
(2) 1133/FFFFFFFFC00005E8 : 68F6                		mov	@r15+,r8
(2) 1134/FFFFFFFFC00005EA : 67F6                		mov	@r15+,r7
(2) 1135/FFFFFFFFC00005EC : 66F6                		mov	@r15+,r6
(2) 1136/FFFFFFFFC00005EE : 65F6                		mov	@r15+,r5
(2) 1137/FFFFFFFFC00005F0 : 64F6                		mov	@r15+,r4
(2) 1138/FFFFFFFFC00005F2 : 63F6                		mov	@r15+,r3
(2) 1139/FFFFFFFFC00005F4 : 62F6                		mov	@r15+,r2
(2) 1140/FFFFFFFFC00005F6 : 000B                		rts
(2) 1141/FFFFFFFFC00005F8 : 0009                		nop
(2) 1142/FFFFFFFFC00005FA :                     		align 4
(2) 1143/FFFFFFFFC00005FC : C000 0000 C000 0380 		ltorg
                    00FF FFFF 0200 0000 
                    C000 061C 2000 4034 
                    2000 4036 0080 03FF 
(2) 1144/FFFFFFFFC000061C :                     
(2) 1145/FFFFFFFFC000061C :                     ; ------------------------------------------------
(2) 1146/FFFFFFFFC000061C :                     		align 4
(2) 1147/FFFFFFFFC000061C :                     MarsSnd_RvMode	ds.l 1
(2) 1148/FFFFFFFFC0000620 :                     MarsSnd_Active	ds.l 1
(2) 1149/FFFFFFFFC0000624 :                     ; ------------------------------------------------
(2) 1150/ 60021C8 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1151/ 60021C8 :                     CACHE_SLAVE_E:
(2) 1152/ 60021C8 :                     		align 4
(2) 1156/ 60021C8 :                     
(1) 1696/ 60021C8 :                     
(1) 1697/ 60021C8 :                     ; ====================================================================
(1) 1698/ 60021C8 :                     ; ----------------------------------------------------------------
(1) 1699/ 60021C8 :                     ; Data
(1) 1700/ 60021C8 :                     ; ----------------------------------------------------------------
(1) 1701/ 60021C8 :                     
(1) 1702/ 60021C8 :                     		align 4
(1) 1703/ 60021C8 :                     test_polygon:
(1) 1704/ 60021C8 : 8280                		dc.w (PLGN_TEXURE<<8)|640
(1) 1705/ 60021CA : 0080                		dc.w $80
(1) 1706/ 60021CC : 0208 6D3C           		dc.l TESTMARS_MAJO
(1) 1707/ 60021D0 : 0000 0046 FFFF FFD8 		dc.l 70,-40
(1) 1708/ 60021D8 : FFFF FFBA FFFF FFD8 		dc.l -70,-40
(1) 1709/ 60021E0 : FFFF FFBA 0000 0028 		dc.l -70, 40
(1) 1710/ 60021E8 : 0000 0046 0000 0028 		dc.l  70, 40
(1) 1711/ 60021F0 : 0280 0000           		dc.w 640,0
(1) 1712/ 60021F4 : 0000 0000           		dc.w   0,0
(1) 1713/ 60021F8 : 0000 01E0           		dc.w   0,480
(1) 1714/ 60021FC : 0280 01E0           		dc.w 640,480
(1) 1715/ 6002200 :                     
(1) 1716/ 6002200 :                     
(1) 1717/ 6002200 :                     		align 4
(1) 1718/ 6002200 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1719/ 6004A00 :                     m_ascii		binclude "system/mars/data/m_ascii.bin"
(1) 1720/ 6006200 :                     		align 4
(1) 1721/ 6006200 :                     		include "data/mars_sdram.asm"
(2)    1/ 6006200 :                     ; ====================================================================
(2)    2/ 6006200 :                     ; ----------------------------------------------------------------
(2)    3/ 6006200 :                     ; SH2 SDRAM data
(2)    4/ 6006200 :                     ; 
(2)    5/ 6006200 :                     ; This data is stored on SDRAM, always available to use on the 32X
(2)    6/ 6006200 :                     ; side and can be rewritible, but it is smaller than ROM
(2)    7/ 6006200 :                     ;
(2)    8/ 6006200 :                     ; Your palettes, textures, models go here
(2)    9/ 6006200 :                     ; PWM samples can be used here but those take a lot of space...
(2)   10/ 6006200 :                     ; use ROM (mars_rom.asm) instead, those are RV-protected on SH2
(2)   11/ 6006200 :                     ; ----------------------------------------------------------------
(2)   12/ 6006200 :                     
(2)   13/ 6006200 :                     	align 4
(2)   14/ 6006200 :                     
(2)   15/ 6006200 :                     
(1) 1722/ 6006200 :                     
(1) 1723/ 6006200 :                     ; ====================================================================
(1) 1724/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1725/ 6006200 :                     ; MARS SH2 RAM
(1) 1726/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1727/ 6006200 :                     
(1) 1728/ 6006200 :                     		align $10
(1) 1729/ 6006200 :                     SH2_RAM:
(1) 1730/ 6006200 : (MACRO)             		struct SH2_RAM
(1) 1730/ 6006200 : =$6006200           GLBL_LASTPC     set *
(1) 1730/   440E0 :                                     dephase
(1) 1730/   440E0 : =$440E0             GLBL_LASTORG    set *
(1) 1730/ 6006200 :                                     phase SH2_RAM
(1) 1738/ 6006200 :                     MarsRam_System	ds.b (sizeof_marssys-MarsRam_System)
(1) 1739/ 6006298 :                     MarsRam_Video	ds.b (sizeof_marsvid-MarsRam_Video)
(1) 1740/ 600DB10 :                     MarsRam_Dreq0	ds.b MAX_MDDREQ				; Shared with Genesis side
(1) 1741/ 600E310 :                     MarsRam_Dreq1	ds.b MAX_MDDREQ
(1) 1742/ 600EB10 :                     sizeof_marsram	ds.l 0
(1) 1744/ 600EB10 :                     
(1) 1745/ 600EB10 :                     .here:
(1) 1749/ 600EB10 : (MACRO)             		finish
(1) 1749/ 6006200 :                                     !org GLBL_LASTORG
(1) 1749/ 6006200 :                                     phase GLBL_LASTPC
(1) 1750/ 6006200 :                     
(1) 1751/ 6006200 :                     ; ====================================================================
(1) 1752/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1753/ 6006200 :                     ; MARS Sound RAM
(1) 1754/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1755/ 6006200 :                     
(1) 1756/ 6006200 :                     ; MOVED TO CACHE
(1) 1757/ 6006200 :                     
(1) 1758/ 6006200 :                     ; ====================================================================
(1) 1759/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1760/ 6006200 :                     ; MARS Video RAM
(1) 1761/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1762/ 6006200 :                     
(1) 1763/ 6006200 : (MACRO)             			struct MarsRam_Video
(1) 1763/ 6006200 : =$6006200           GLBL_LASTPC     set *
(1) 1763/   440E0 :                                     dephase
(1) 1763/   440E0 : =$440E0             GLBL_LASTORG    set *
(1) 1763/ 6006298 :                                     phase MARSRAM_VIDEO
(1) 1764/ 6006298 :                     ; RAM_Mars_BgData		ds.b (320+8)*(224+8)
(1) 1765/ 6006298 :                     RAM_Mars_Background	ds.w sizeof_marsbg
(1) 1766/ 6006310 :                     RAM_Mars_PlgnList	ds.l 2*NUM_POLYGONS
(1) 1767/ 6006710 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*NUM_POLYGONS
(1) 1768/ 6008310 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*NUM_POLYGONS
(1) 1769/ 6009F10 :                     RAM_Mars_VdpDrwList	ds.b sizeof_plypz*256		; Output polygon pieces to process
(1) 1770/ 600DB10 :                     RAM_Mars_VdpDrwList_e	ds.l 0				; (END point)
(1) 1771/ 600DB10 :                     sizeof_marsvid		ds.l 0
(1) 1772/ 600DB10 : (MACRO)             			finish
(1) 1772/ 6006298 :                                     !org GLBL_LASTORG
(1) 1772/ 6006200 :                                     phase GLBL_LASTPC
(1) 1773/ 6006200 :                     
(1) 1774/ 6006200 :                     ; ====================================================================
(1) 1775/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1776/ 6006200 :                     ; MARS System RAM
(1) 1777/ 6006200 :                     ; ----------------------------------------------------------------
(1) 1778/ 6006200 :                     
(1) 1779/ 6006200 : (MACRO)             			struct MarsRam_System
(1) 1779/ 6006200 : =$6006200           GLBL_LASTPC     set *
(1) 1779/   440E0 :                                     dephase
(1) 1779/   440E0 : =$440E0             GLBL_LASTORG    set *
(1) 1779/ 6006200 :                                     phase MARSRAM_SYSTEM
(1) 1780/ 6006200 :                     RAM_Mars_Global		ds.l sizeof_MarsGbl		; gbr values go here.
(1) 1781/ 6006298 :                     sizeof_marssys		ds.l 0
(1) 1782/ 6006298 : (MACRO)             			finish
(1) 1782/ 6006200 :                                     !org GLBL_LASTORG
(1) 1782/ 6006200 :                                     phase GLBL_LASTPC
(1) 1783/ 6006200 :                     
(1) 1784/ 6006200 :                     ; ====================================================================
(1) 1785/ 6006200 :                     
     115/ 6006200 :                     		cpu 68000
     116/ 6006200 :                     		padding off
     117/   440E0 :                     		dephase
     118/   440E0 :                     MARS_RAMDATA_E:
     119/   440E0 :                     		align 4
     120/   440E0 :                     
     121/   440E0 :                     ; --------------------------------------------------------
     122/   440E0 :                     ; MARS data for SH2's ROM view
     123/   440E0 :                     ; This section will be gone if RV=1
     124/   440E0 :                     ; --------------------------------------------------------
     125/   440E0 :                     
     126/ 20440E0 :                     		phase CS1+*
     127/ 20440E0 :                     		align 4
     128/ 20440E0 :                     		include "data/mars_rom.asm"
(1)    1/ 20440E0 :                     ; ====================================================================
(1)    2/ 20440E0 :                     ; ----------------------------------------------------------------
(1)    3/ 20440E0 :                     ; SH2 ROM data
(1)    4/ 20440E0 :                     ;
(1)    5/ 20440E0 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 20440E0 :                     ; BUT keep in mind that this entire section will be gone
(1)    7/ 20440E0 :                     ; if the Genesis performs DMA-to-VDP Transfers
(1)    8/ 20440E0 :                     ; which requires RV=1 (Revert ROM to original position)
(1)    9/ 20440E0 :                     ; ***EMULATORS IGNORE THIS LIMITATION***
(1)   10/ 20440E0 :                     ;
(1)   11/ 20440E0 :                     ; Only access here on these conditions:
(1)   12/ 20440E0 :                     ; - Stop all tracks that use PWM samples
(1)   13/ 20440E0 :                     ; - If you wanna keep any tracks active: set 1 to marsBlock
(1)   14/ 20440E0 :                     ;   in the Z80 driver, all tracks will continue playing
(1)   15/ 20440E0 :                     ;   only with PSG and FM instruments
(1)   16/ 20440E0 :                     ;   (TODO: check how it peforms)
(1)   17/ 20440E0 :                     ;
(1)   18/ 20440E0 :                     ; The PWM samples are safe to use with the implementation
(1)   19/ 20440E0 :                     ; of a sample-backup routine that the 68K requests before
(1)   20/ 20440E0 :                     ; doing DMA
(1)   21/ 20440E0 :                     ; ----------------------------------------------------------------
(1)   22/ 20440E0 :                     
(1)   23/ 20440E0 :                     	align 4
(1)   24/ 20440E0 :                     
(1)   25/ 20440E0 :                     ; --------------------------------------------------------
(1)   26/ 20440E0 :                     ; PWM samples
(1)   27/ 20440E0 :                     ; --------------------------------------------------------
(1)   28/ 20440E0 :                     
(1)   29/ 20440E0 :                     SmpIns_Vctr01:
(1)   30/ 20440E0 : (MACRO)             	gSmpl "sound/instr/smpl/vctr01.wav",58
(1)   30/ 20440E0 :                     .start
(1)   30/ 20440E0 : 351C 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   30/ 20440E3 : 3A00 00                     dc.b ((58)&$FF),(((58)>>8)&$FF),(((58)>>16)&$FF)
(1)   30/ 20440E6 :                             binclude "sound/instr/smpl/vctr01.wav",$2C     ; actual data
(1)   30/ 2045D15 :                     .end
(1)   30/ 2045D15 :                             align 4                 ; align 4 for pwm's
(1)   31/ 2045D18 :                     SmpIns_Vctr04:
(1)   32/ 2045D18 : (MACRO)             	gSmpl "sound/instr/smpl/vctr04.wav",124
(1)   32/ 2045D18 :                     .start
(1)   32/ 2045D18 : 6D1A 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   32/ 2045D1B : 7C00 00                     dc.b ((124)&$FF),(((124)>>8)&$FF),(((124)>>16)&$FF)
(1)   32/ 2045D1E :                             binclude "sound/instr/smpl/vctr04.wav",$2C     ; actual data
(1)   32/ 2047785 :                     .end
(1)   32/ 2047785 :                             align 4                 ; align 4 for pwm's
(1)   33/ 2047788 :                     SmpIns_VctrSnare:
(1)   34/ 2047788 : (MACRO)             	gSmpl "sound/instr/smpl/vctrSnare.wav",0
(1)   34/ 2047788 :                     .start
(1)   34/ 2047788 : 441D 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   34/ 204778B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/ 204778E :                             binclude "sound/instr/smpl/vctrSnare.wav",$2C     ; actual data
(1)   34/ 20494CC :                     .end
(1)   34/ 20494CC :                             align 4                 ; align 4 for pwm's
(1)   35/ 20494CC :                     SmpIns_VctrKick:
(1)   36/ 20494CC : (MACRO)             	gSmpl "sound/instr/smpl/vctrKick.wav",0
(1)   36/ 20494CC :                     .start
(1)   36/ 20494CC : 920F 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   36/ 20494CF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/ 20494D2 :                             binclude "sound/instr/smpl/vctrKick.wav",$2C     ; actual data
(1)   36/ 204A45E :                     .end
(1)   36/ 204A45E :                             align 4                 ; align 4 for pwm's
(1)   37/ 204A460 :                     SmpIns_VctrTimpani:
(1)   38/ 204A460 : (MACRO)             	gSmpl "sound/instr/smpl/vctrTimpani.wav",0
(1)   38/ 204A460 :                     .start
(1)   38/ 204A460 : 7132 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   38/ 204A463 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/ 204A466 :                             binclude "sound/instr/smpl/vctrTimpani.wav",$2C     ; actual data
(1)   38/ 204D6D1 :                     .end
(1)   38/ 204D6D1 :                             align 4                 ; align 4 for pwm's
(1)   39/ 204D6D4 :                     SmpIns_VctrCrash:
(1)   40/ 204D6D4 : (MACRO)             	gSmpl "sound/instr/smpl/vctrCrash.wav",0
(1)   40/ 204D6D4 :                     .start
(1)   40/ 204D6D4 : 663C 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   40/ 204D6D7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   40/ 204D6DA :                             binclude "sound/instr/smpl/vctrCrash.wav",$2C     ; actual data
(1)   40/ 205133A :                     .end
(1)   40/ 205133A :                             align 4                 ; align 4 for pwm's
(1)   41/ 205133C :                     SmpIns_VctrBrass:
(1)   42/ 205133C : (MACRO)             	gSmpl "sound/instr/smpl/vctrBrass.wav",1004
(1)   42/ 205133C :                     .start
(1)   42/ 205133C : 7417 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   42/ 205133F : EC03 00                     dc.b ((1004)&$FF),(((1004)>>8)&$FF),(((1004)>>16)&$FF)
(1)   42/ 2051342 :                             binclude "sound/instr/smpl/vctrBrass.wav",$2C     ; actual data
(1)   42/ 2052AB0 :                     .end
(1)   42/ 2052AB0 :                             align 4                 ; align 4 for pwm's
(1)   43/ 2052AB0 :                     SmpIns_VctrAmbient:
(1)   44/ 2052AB0 : (MACRO)             	gSmpl "sound/instr/smpl/vctrBrass.wav",124
(1)   44/ 2052AB0 :                     .start
(1)   44/ 2052AB0 : 7417 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   44/ 2052AB3 : 7C00 00                     dc.b ((124)&$FF),(((124)>>8)&$FF),(((124)>>16)&$FF)
(1)   44/ 2052AB6 :                             binclude "sound/instr/smpl/vctrBrass.wav",$2C     ; actual data
(1)   44/ 2054224 :                     .end
(1)   44/ 2054224 :                             align 4                 ; align 4 for pwm's
(1)   45/ 2054224 :                     
(1)   46/ 2054224 :                     SmpIns_Bell_Ice:
(1)   47/ 2054224 : (MACRO)             	gSmpl "sound/instr/smpl/bell_ice.wav",0
(1)   47/ 2054224 :                     .start
(1)   47/ 2054224 : 2A3B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   47/ 2054227 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   47/ 205422A :                             binclude "sound/instr/smpl/bell_ice.wav",$2C     ; actual data
(1)   47/ 2057D4E :                     .end
(1)   47/ 2057D4E :                             align 4                 ; align 4 for pwm's
(1)   48/ 2057D50 :                     SmpIns_Brass1_Hi:
(1)   49/ 2057D50 : (MACRO)             	gSmpl "sound/instr/smpl/brass1_hi.wav",0
(1)   49/ 2057D50 :                     .start
(1)   49/ 2057D50 : CA7B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   49/ 2057D53 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   49/ 2057D56 :                             binclude "sound/instr/smpl/brass1_hi.wav",$2C     ; actual data
(1)   49/ 205F91A :                     .end
(1)   49/ 205F91A :                             align 4                 ; align 4 for pwm's
(1)   50/ 205F91C :                     SmpIns_Brass1_Low:
(1)   51/ 205F91C : (MACRO)             	gSmpl "sound/instr/smpl/brass1_low.wav",0
(1)   51/ 205F91C :                     .start
(1)   51/ 205F91C : CA7B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   51/ 205F91F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   51/ 205F922 :                             binclude "sound/instr/smpl/brass1_low.wav",$2C     ; actual data
(1)   51/ 20674E6 :                     .end
(1)   51/ 20674E6 :                             align 4                 ; align 4 for pwm's
(1)   52/ 20674E8 :                     SmpIns_Forest_1:
(1)   53/ 20674E8 : (MACRO)             	gSmpl "sound/instr/smpl/forest1.wav",0
(1)   53/ 20674E8 :                     .start
(1)   53/ 20674E8 : EC48 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   53/ 20674EB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   53/ 20674EE :                             binclude "sound/instr/smpl/forest1.wav",$2C     ; actual data
(1)   53/ 206BDD4 :                     .end
(1)   53/ 206BDD4 :                             align 4                 ; align 4 for pwm's
(1)   54/ 206BDD4 :                     SmpIns_Kick_jam:
(1)   55/ 206BDD4 : (MACRO)             	gSmpl "sound/instr/smpl/kick_jam.wav",0
(1)   55/ 206BDD4 :                     .start
(1)   55/ 206BDD4 : CA0A 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   55/ 206BDD7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   55/ 206BDDA :                             binclude "sound/instr/smpl/kick_jam.wav",$2C     ; actual data
(1)   55/ 206C89E :                     .end
(1)   55/ 206C89E :                             align 4                 ; align 4 for pwm's
(1)   56/ 206C8A0 :                     SmpIns_Snare_jam:
(1)   57/ 206C8A0 : (MACRO)             	gSmpl "sound/instr/smpl/snare_jam.wav",0
(1)   57/ 206C8A0 :                     .start
(1)   57/ 206C8A0 : 6A09 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   57/ 206C8A3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   57/ 206C8A6 :                             binclude "sound/instr/smpl/snare_jam.wav",$2C     ; actual data
(1)   57/ 206D20A :                     .end
(1)   57/ 206D20A :                             align 4                 ; align 4 for pwm's
(1)   58/ 206D20C :                     SmpIns_SnrTom_1:
(1)   59/ 206D20C : (MACRO)             	gSmpl "sound/instr/smpl/snrtom_1.wav",0
(1)   59/ 206D20C :                     .start
(1)   59/ 206D20C : A614 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   59/ 206D20F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   59/ 206D212 :                             binclude "sound/instr/smpl/snrtom_1.wav",$2C     ; actual data
(1)   59/ 206E6B2 :                     .end
(1)   59/ 206E6B2 :                             align 4                 ; align 4 for pwm's
(1)   60/ 206E6B4 :                     SmpIns_PIANO_1:
(1)   61/ 206E6B4 : (MACRO)             	gSmpl "sound/instr/smpl/PIANO__1.wav",0
(1)   61/ 206E6B4 :                     .start
(1)   61/ 206E6B4 : 1A47 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   61/ 206E6B7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   61/ 206E6BA :                             binclude "sound/instr/smpl/PIANO__1.wav",$2C     ; actual data
(1)   61/ 2072DCE :                     .end
(1)   61/ 2072DCE :                             align 4                 ; align 4 for pwm's
(1)   62/ 2072DD0 :                     SmpIns_SSTR162A:
(1)   63/ 2072DD0 : (MACRO)             	gSmpl "sound/instr/smpl/SSTR162A.wav",0
(1)   63/ 2072DD0 :                     .start
(1)   63/ 2072DD0 : 6A27 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   63/ 2072DD3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   63/ 2072DD6 :                             binclude "sound/instr/smpl/SSTR162A.wav",$2C     ; actual data
(1)   63/ 207553A :                     .end
(1)   63/ 207553A :                             align 4                 ; align 4 for pwm's
(1)   64/ 207553C :                     
(1)   65/ 207553C :                     
(1)   66/ 207553C :                     
(1)   67/ 207553C :                     ; --------------------------------------------------------
(1)   68/ 207553C :                     ; Other
(1)   69/ 207553C :                     ; --------------------------------------------------------
(1)   70/ 207553C :                     
(1)   71/ 207553C :                     TESTMARS_BG:
(1)   72/ 207553C :                     	binclude "data/mars/test_art.bin"
(1)   73/ 2086D3C :                     	align 4
(1)   74/ 2086D3C :                     
(1)   75/ 2086D3C :                     TESTMARS_MAJO:
(1)   76/ 2086D3C :                     	binclude "data/mars/polygon/majo_art.bin"
(1)   77/ 20D1D3C :                     	align 4
(1)   78/ 20D1D3C :                     
(1)   79/ 20D1D3C :                     
     129/   D1D3C :                     		dephase
     130/   D1D3C :                     
     131/   D1D3C :                     ; ====================================================================
     132/   D1D3C :                     ; ---------------------------------------------
     133/   D1D3C :                     ; End
     134/   D1D3C :                     ; ---------------------------------------------
     135/   D1D3C :                     		
     136/   D1D3C :                     ROM_END:
     137/   D1D3C :                     		align $8000
     138/   D8000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 1/27/2022 21:19:14


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*ART_BGTEST :                 38000 C | *ART_BGTEST_E :               38540 C |
 ART_EMI :                    3BC80 C | *ART_EMI_E :                  3DEE0 C |
*ART_FGTEST :                 38540 C | *ART_FGTEST_E :               3BC80 C |
 ASCII_FONT :                FF0B3C C |  ASCII_FONT_E :              FF1B3C C |
 ASCII_PAL :                 FF0B1C C | *ASCII_PAL_E :               FF0B3C C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITHINT :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
 BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     3 - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - |  BITJOYX :                        2 - |
 BITJOYY :                        1 - |  BITJOYZ :                        0 - |
 BITMAPMD :                       1 - | *BITV30 :                         3 - |
 BITVINT :                        3 - | *BITVINTENBL :                    5 - |
*BRANCHEXT :                      0 - |  CACHE_MASTER :             6001510 C |
 CACHE_MASTER_E :           6001BA4 C |  CACHE_SLAVE :              6001BA4 C |
 CACHE_SLAVE_E :            60021C8 C |  CACH_BGFBPOS_H :  FFFFFFFFC0000690 C |
 CACH_BGFBPOS_H.END :                                      FFFFFFFFC0000694 C |
 CACH_BGFBPOS_V :  FFFFFFFFC000068C C | *CACH_BKUPP_L :    FFFFFFFFC00005F0 C |
*CACH_BKUPP_S :    FFFFFFFFC0000608 C |  CACH_BKUP_L :     FFFFFFFFC00005B0 C |
 CACH_BKUP_S :     FFFFFFFFC00005F0 C |  CACH_DDA_LAST :   FFFFFFFFC0000618 C |
 CACH_DDA_SRC :    FFFFFFFFC0000628 C |  CACH_DDA_SRC_L :  FFFFFFFFC0000648 C |
 CACH_DDA_SRC_R :  FFFFFFFFC0000658 C |  CACH_DDA_TOP :    FFFFFFFFC0000608 C |
 CACH_DRW_ALL :    FFFFFFFFC0000668 C |  CACH_DRW_D :      FFFFFFFFC0000670 C |
 CACH_DRW_L :      FFFFFFFFC0000674 C |  CACH_DRW_R :      FFFFFFFFC0000678 C |
 CACH_DRW_U :      FFFFFFFFC000066C C |  CACH_XHEAD_L :    FFFFFFFFC000067C C |
 CACH_XHEAD_R :    FFFFFFFFC0000680 C |  CACH_YHEAD_D :    FFFFFFFFC0000688 C |
 CACH_YHEAD_U :    FFFFFFFFC0000684 C | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CHIP_ENV :                    10CF C |
 CHIP_ENV.ATKEND :             11A4 C | *CHIP_ENV.ATKZERO :            11A7 C |
 CHIP_ENV.CHK2 :               11AD C |  CHIP_ENV.CHK4 :               11E2 C |
 CHIP_ENV.CKOF :               10FD C |  CHIP_ENV.CKON :               111A C |
 CHIP_ENV.COPYOPS :            130A C |  CHIP_ENV.COPYOPS3 :           1398 C |
 CHIP_ENV.COPY_1 :             136C C | *CHIP_ENV.DECTMR :             11B1 C |
 CHIP_ENV.DKADD :              11CB C |  CHIP_ENV.DKSAV :              11D3 C |
 CHIP_ENV.DKYEND :             11D8 C |  CHIP_ENV.DO_VOL :             1406 C |
 CHIP_ENV.ENVPROC :            1175 C |  CHIP_ENV.FM_CHNL :            1291 C |
*CHIP_ENV.FM_CHNLVOL :         13C4 C |  CHIP_ENV.FM_INSUPD :          1359 C |
 CHIP_ENV.FM_INS_EX :          13BE C |  CHIP_ENV.FM_KEYCUT :          1324 C |
 CHIP_ENV.FM_KEYOFF :          1339 C | *CHIP_ENV.FM_PANSET :          1346 C |
 CHIP_ENV.FM_PANUPD :          1340 C |  CHIP_ENV.FM_VOLUPD :          13C0 C |
 CHIP_ENV.KILLENV :            11F8 C |  CHIP_ENV.NEXTFM_1 :           123A C |
 CHIP_ENV.NOMIDC :             124F C |  CHIP_ENV.NOTFM3 :             1315 C |
 CHIP_ENV.NOUPD :              1224 C |  CHIP_ENV.NSKIP :              116C C |
 CHIP_ENV.PSTEAL :             115B C |  CHIP_ENV.REQ_DAC :            127E C |
 CHIP_ENV.REQ_PITCH :          128B C |  CHIP_ENV.SETHAT :             1166 C |
 CHIP_ENV.TNMODE :             1150 C |  CHIP_ENV.VEDLP :              1200 C |
 CHIP_ENV.VLMUCH :             1215 C |  CHIP_ENV.VLOOP :              10DA C |
 CHIP_ENV.VMUCH :              1410 C |  CHIP_ENV.WRFREQ :             112C C |
 CHNL_CHIP :                      0 - |  CHNL_EFFARG :                    5 - |
 CHNL_EFFID :                     4 - |  CHNL_FLAGS :                     7 - |
 CHNL_INS :                       2 - |  CHNL_NOTE :                      1 - |
 CHNL_TYPE :                      6 - |  CHNL_VOL :                       3 - |
*CLICKL :                         1 - | *CLICKM :                         4 - |
*CLICKR :                         2 - | *CLICKS :                         8 - |
 CMDINTCLR :                     1A - |  CMDIRQ_ON :                      2 - |
 COM :                            0 - |  COMM0 :                         20 - |
*COMM10 :                        2A - |  COMM12 :                        2C - |
 COMM14 :                        2E - |  COMM15 :                        2F - |
*COMM2 :                         22 - |  COMM4 :                         24 - |
*COMM6 :                         26 - |  COMM8 :                         28 - |
 COMMZFIFO :                   1EB0 C |  COMMZREAD :                     1E C |
 COMMZROMBLK :                   1C C |  COMMZROMRD :                    1D C |
 COMMZWRITE :                    1F C | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFA622 - |  CONTROLLER_2 :    FFFFFFFFFFFFA632 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CURRINSDATA :                 19BD C |  CURRINSPOS :                  19C1 C |
 CURRTBLPOS :                  19BF C |  CURRTICKBITS :                19C5 C |
 CURRTRKCTRL :                 19C3 C |  CYCLE :                         32 - |
 DACCOM :                      18B6 C | *DACINS_CDSNARE :             1E8E4 C |
 DACINS_LOWSTRING :           267B8 C | *DACINS_MAGIC2 :               497C C |
*DACINS_SAURKICK :            202E0 C | *DACINS_SAURSNARE :           21274 C |
*DACINS_SNARE_GEM :           1D7B8 C | *DACINS_STRING1 :             21F5C C |
 DAC_FILL :                    148E C |  DAC_FIRSTFILL :               149C C |
 DAC_ME :                         8 C |  DAC_OFF :                     1445 C |
 DAC_ON :                      1430 C |  DAC_PLAY :                    145A C |
 DAC_REFILL :                  14A0 C |  DAC_REFILL.DAC_OVER :         14EE C |
 DAC_REFILL.FDF7 :             1560 C |  DAC_REFILL.FDF72 :            1519 C |
 DAC_REFILL.FDFRETURN :        1563 C | *DAC_REFILL.KEEPCNTR :         14C7 C |
*DATE :                   1/27/2022 - |  DDACCNTR :                    1EF3 C |
 DDACFIFOMID :                 1EF6 C |  DDACPNTR :                    1EF0 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DPLC_NICOLE :               FF287C C |  DPLC_NICOLE.DPLC :          FF287C C |
*DPLC_NICOLE.END :           FF2924 C |  DPLC_NICOLE.FRAME_0 :       FF288C C |
 DPLC_NICOLE.FRAME_1 :       FF28A4 C |  DPLC_NICOLE.FRAME_2 :       FF28BA C |
 DPLC_NICOLE.FRAME_3 :       FF28CC C |  DPLC_NICOLE.FRAME_4 :       FF28DC C |
 DPLC_NICOLE.FRAME_5 :       FF28F0 C |  DPLC_NICOLE.FRAME_6 :       FF28FE C |
 DPLC_NICOLE.FRAME_7 :       FF2910 C |  DREQCTL :                        7 - |
*DREQDEST :                       C - |  DREQFIFO :                      12 - |
 DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DREQ_BGXPOS :                  200 C |  DREQ_BGYPOS :                  204 C |
 DREQ_PALETTE :                   0 C |  DREQ_POLYGONS :                208 C |
 DRV_LOOP :                      42 C |  DRV_LOOP.CMND_0 :               EC C |
 DRV_LOOP.CMND_TRKPAUSE :       15C C |  DRV_LOOP.CMND_TRKPLAY :         F0 C |
 DRV_LOOP.CMND_TRKRESUME :      169 C |  DRV_LOOP.CMND_TRKSTOP :        14C C |
 DRV_LOOP.CMND_TRKTEMPO :       188 C |  DRV_LOOP.CMND_TRKTICKS :       176 C |
 DRV_LOOP.LIST :                 AC C |  DRV_LOOP.NEITHER :              84 C |
 DRV_LOOP.NEXT_CMD :             8B C |  DRV_LOOP.NOBEATS :              6C C |
 DRV_LOOP.NOTICKS :              5F C |  DRWSLD_NEXTPZ :   FFFFFFFFC000056C C |
 DRWSLD_NEXTPZ.FINISH_IT :                                 FFFFFFFFC0000588 C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000578 C |
 DRWSLD_NXTLINE :  FFFFFFFFC00004EC C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC000052E C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC0000518 C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC0000528 C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC000053C C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC00003BC C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC0000486 C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC0000466 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC0000444 C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC0000430 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC00003FE C |
 DRWSLD_UPDLINE :  FFFFFFFFC0000562 C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC0000498 C |
*DRWTASK_EXIT :    FFFFFFFFC0000588 C |  DRWTASK_RETURN :  FFFFFFFFC0000588 C |
 DRWTEX_GONXTPZ :  FFFFFFFFC00004B4 C |
 DRWTEX_GONXTPZ.RESET_RD :                                 FFFFFFFFC00004C0 C |
 DRWTSK1_VLD_Y :   FFFFFFFFC0000396 C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC00004D4 C |
 DRWTSK_SOLIDMODE.WAIT :                                   FFFFFFFFC00004E6 C |
 DRWTSK_TEXMODE :  FFFFFFFFC00003B4 C |  DRW_UD_EXIT :              6000C08 C |
 DTH :                           20 - |  DTL :                           1C - |
 DTSK01_LRDRAW :            6000AF6 C |  DTSK01_LRDRAW.INDXMODE :   6000B20 C |
 DTSK01_LRDRAW.NOT_L2 :     6000B2E C |  DTSK01_LRDRAW.PREFIX_R :   6000B0C C |
 DTSK01_LRDRAW.XLINE :      6000B04 C |  DTSK01_LRDRAW.YRES :       6000AFC C |
 DWAVEBUFF :                   1B00 C | *EMILIE_MKSPRITE :           FF24E6 C |
*EMILIE_MKSPRITE.HIDEFUJI :  FF25A8 C | *EMILIE_MKSPRITE.NO_UPD :    FF25A6 C |
 EMILIE_MKSPRITE.NXT_DPZ :   FF2580 C |  EMILIE_MKSPRITE.NXT_PZ :    FF2526 C |
*EMILIE_MOVE :               FF248A C |  EMILIE_MOVE.LEFT_X :        FF24B6 C |
 EMILIE_MOVE.LEFT_Y :        FF24DA C |  EMILIE_MOVE.NOT_MOUSE :     FF24E4 C |
 EMILIE_MOVE.RIGHT_X :       FF24BC C |  EMILIE_MOVE.RIGHT_Y :       FF24E0 C |
*EMILIE_SHOW :               FF25C6 C |  EMILIE_SHOW.SPRDATA :       FF25DC C |
*EXTR_3 :                         A C | *EXTR_4 :                         C C |
*EXTR_5 :                         E C | *FALSE :                          0 - |
 FBVRAM_PATCH :               1D000 - | *FEN :                            2 - |
 FILLDATA :                       8 - |  FILLLENGTH :                     4 - |
 FILLSTART :                      6 - |  FLAGRESCHIP :                 1EF9 C |
 FLG :                           28 - |  FM :                            80 - |
 FM3REG :                      18AA C |  FMCOM :                       1796 C |
 FMFREQ_LIST :                 1568 C |  FMFRQH :                        18 - |
 FMFRQL :                        1E - | *FMINS_AMBIENT_3 :            2F6BC C |
*FMINS_AMBIENT_DARK :         2F67C C | *FMINS_AMBIENT_SPOOK :        2F69C C |
*FMINS_BANJO_PUY :            2F77C C |  FMINS_BASS_3 :               2F4BC C |
 FMINS_BASS_4 :               2F4DC C | *FMINS_BASS_CALM :            2F47C C |
 FMINS_BASS_GROOVE :          2F4FC C | *FMINS_BASS_GROOVE_2 :        2F51C C |
*FMINS_BASS_GROOVE_GEM :      2F53C C | *FMINS_BASS_HEAVY :           2F49C C |
*FMINS_BASS_ITALO :           2F55C C | *FMINS_BASS_KON :             2F57C C |
*FMINS_BASS_SYNTH :           2F59C C | *FMINS_BELL_CHINA :           2F6FC C |
*FMINS_BRASS_EUR :            2F71C C | *FMINS_BRASS_PUY :            2F73C C |
 FMINS_COM :                   17BA C |  FMINS_COM2 :                  17E2 C |
 FMINS_COM3 :                  180A C |  FMINS_COM4 :                  1832 C |
 FMINS_COM5 :                  185A C |  FMINS_COM6 :                  1882 C |
 FMINS_DING_TOY :             2F6DC C | *FMINS_DRUMKICK_GEM :         2F43C C |
*FMINS_FLAUTE_CAVE :          2F75C C | *FMINS_FM3_CLOSEDHAT :        2F36C C |
 FMINS_FM3_EXPLOSION :        2F394 C |  FMINS_FM3_OPENHAT :          2F344 C |
*FMINS_GUITAR_GEM :           2F3BC C | *FMINS_GUITAR_HEAVY :         2F3DC C |
*FMINS_GUITAR_PUY :           2F3FC C | *FMINS_GUITAR_PUY_2 :         2F41C C |
*FMINS_ORGAN_M1 :             2F5BC C | *FMINS_PIANOM1 :              2F45C C |
 FMINS_TRUMPET_1 :            2F5DC C | *FMINS_TRUMPET_2 :            2F5FC C |
*FMINS_TRUMPET_CARNIVAL :     2F65C C | *FMINS_TRUMPET_KON :          2F61C C |
*FMINS_TRUMPET_PUY :          2F63C C | *FMINS_VIOLIN_GEM :           2F79C C |
 FMKEYS :                         6 - |  FMPAN :                         12 - |
 FMSPCMODE :                   1EF8 C |  FMVOL :                          C - |
 FM_SEND_1 :                   141A C |  FM_SEND_2 :                   1425 C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMASFXBLK_BOOM :           93005A C |
 GEMASFXINS_BOOM :           9300A9 C |  GEMASFXPAT_BOOM :           93005D C |
 GEMATRKDATA_SFX :           93004E C |  GEMATRK_BLK_BEMINE :        93283B C |
 GEMATRK_BLK_HILLS :         933A06 C |  GEMATRK_BLK_VECTR :         9300C1 C |
 GEMATRK_INS_BEMINE :        93393E C |  GEMATRK_INS_HILLS :         934589 C |
 GEMATRK_INS_VECTR :         9327CB C |  GEMATRK_PATT_BEMINE :       93284C C |
 GEMATRK_PATT_HILLS :        933A12 C |  GEMATRK_PATT_VECTR :        9300D0 C |
 GEMA_INIT :                    F5D C |  GEMA_INIT.SET_IT :             FB8 C |
 GET_CMDBYTE :                  1AE C |  GET_CMDBYTE.GETCBYTEL :        1B1 C |
 GET_TICK :                     FC5 C |  GET_TICK.CTNOTICK :            FE2 C |
 GET_TRKINDX :                  19D C |  GLBL_LASTORG :               440E0 - |
 GLBL_LASTPC :              6006200 - |
 GO_DRWSLD_UPDLINE_TEX :                                   FFFFFFFFC00003AC C |
 GO_DRWTEX_GONXTPZ :                                       FFFFFFFFC00003B0 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              FF2022 C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
 INSDATAC_0 :                  18BB C |  INSDATAC_1 :                  193B C |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 INTMASK :                        1 - |  INT_M_LIST :               600026C C |
 INT_S_LIST :               60002CC C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - |  LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :              FF0B08 C |  LITERAL_F_00000000_1 :     6000268 C |
 LITERAL_F_00000001_1 :     60003C8 C |  LITERAL_F_00000002_1 :     60003CC C |
 LITERAL_F_00000003_1 :     60004B0 C |  LITERAL_F_00000004_1 :     6000688 C |
 LITERAL_F_00000005_1 :     6000694 C |  LITERAL_F_00000006_1 :     600069C C |
 LITERAL_F_00000007_1 :     60006B4 C |  LITERAL_F_00000008_1 :     60006A0 C |
 LITERAL_F_00000009_1 :     60006A4 C |  LITERAL_F_0000000A_1 :     60006A8 C |
 LITERAL_F_0000000B_1 :     60006AC C |  LITERAL_F_0000000C_1 :     6000764 C |
 LITERAL_F_0000000D_1 :     60007CC C |  LITERAL_F_0000000E_1 :     60008D0 C |
 LITERAL_F_0000000F_1 :     60008D8 C |  LITERAL_F_00000010_1 :     60008DC C |
 LITERAL_F_00000011_1 :     60008E0 C |  LITERAL_F_00000012_1 :     6000A40 C |
 LITERAL_F_00000013_1 :     6000AD0 C |  LITERAL_F_00000014_1 :     6000AD4 C |
 LITERAL_F_00000015_1 :     6000AD8 C |  LITERAL_F_00000016_1 :     6000AE0 C |
 LITERAL_F_00000017_1 :     6000AE4 C |  LITERAL_F_00000018_1 :     6000AE8 C |
 LITERAL_F_00000019_1 :     6000AEC C |  LITERAL_F_0000001A_1 :     6000AF0 C |
 LITERAL_F_0000001B_1 :     6000C10 C |  LITERAL_F_0000001C_1 :     6000C14 C |
 LITERAL_F_0000001D_1 :     6000C18 C |  LITERAL_F_0000001E_1 :     6000C1C C |
 LITERAL_F_0000001F_1 :     6000C20 C |  LITERAL_F_00000020_1 :     6000C24 C |
 LITERAL_F_00000021_1 :     6000C28 C |  LITERAL_F_00000022_1 :     6000E18 C |
 LITERAL_F_00000023_1 :     6000E1C C |  LITERAL_F_00000024_1 :     6000E20 C |
 LITERAL_F_00000025_1 :     6000E24 C |  LITERAL_F_00000026_1 :     6000E28 C |
 LITERAL_F_00000027_1 :     6000E2C C |  LITERAL_F_00000028_1 :     6000E30 C |
 LITERAL_F_00000029_1 :     6000E34 C |  LITERAL_F_0000002A_1 :     6000E38 C |
 LITERAL_F_0000002B_1 :     6000E3C C |  LITERAL_F_0000002C_1 :     6000E40 C |
 LITERAL_F_0000002D_1 :     6000F2C C |  LITERAL_F_0000002E_1 :     6000F68 C |
 LITERAL_F_0000002F_1 :     6000F6C C |  LITERAL_F_00000030_1 :     6001070 C |
 LITERAL_F_00000031_1 :     6001074 C |  LITERAL_F_00000032_1 :     600107C C |
 LITERAL_F_00000033_1 :     6001080 C |  LITERAL_F_00000034_1 :     6001084 C |
 LITERAL_F_00000035_1 :     6001088 C |  LITERAL_F_00000036_1 :     600108C C |
 LITERAL_F_00000037_1 :     6001138 C |  LITERAL_F_00000038_1 :     6001140 C |
 LITERAL_F_00000039_1 :     600115E C |  LITERAL_F_0000003A_1 :     6001148 C |
 LITERAL_F_0000003B_1 :     600114C C |  LITERAL_F_0000003C_1 :     60012E4 C |
 LITERAL_F_0000003D_1 :     60012E8 C |  LITERAL_F_0000003E_1 :     60012EC C |
 LITERAL_F_0000003F_1 :     60012F0 C |  LITERAL_F_00000040_1 :     60012F4 C |
 LITERAL_F_00000041_1 :     60012F8 C |  LITERAL_F_00000042_1 :     60012FC C |
 LITERAL_F_00000043_1 :     6001300 C |  LITERAL_F_00000044_1 :     600130C C |
 LITERAL_F_00000045_1 :     6001448 C |  LITERAL_F_00000046_1 :     6001450 C |
 LITERAL_F_00000047_1 :     6001458 C |  LITERAL_F_00000048_1 :     600145C C |
 LITERAL_F_00000049_1 :     6001460 C |  LITERAL_F_0000004A_1 :     6001464 C |
 LITERAL_F_0000004B_1 :     6001474 C |  LITERAL_F_0000004C_1 :     600147C C |
 LITERAL_F_0000004D_1 :     600149A C |  LITERAL_F_0000004E_1 :     60014DC C |
 LITERAL_F_0000004F_1 :     60014E0 C |
 LITERAL_F_00000050_1 :                                    FFFFFFFFC0000170 C |
 LITERAL_F_00000051_1 :                                    FFFFFFFFC0000174 C |
 LITERAL_F_00000052_1 :                                    FFFFFFFFC0000178 C |
 LITERAL_F_00000053_1 :                                    FFFFFFFFC000017C C |
 LITERAL_F_00000054_1 :                                    FFFFFFFFC0000184 C |
 LITERAL_F_00000055_1 :                                    FFFFFFFFC0000188 C |
 LITERAL_F_00000056_1 :                                    FFFFFFFFC000018C C |
 LITERAL_F_00000057_1 :                                    FFFFFFFFC0000334 C |
 LITERAL_F_00000058_1 :                                    FFFFFFFFC0000338 C |
 LITERAL_F_00000059_1 :                                    FFFFFFFFC000033C C |
 LITERAL_F_0000005A_1 :                                    FFFFFFFFC0000340 C |
 LITERAL_F_0000005B_1 :                                    FFFFFFFFC0000344 C |
 LITERAL_F_0000005C_1 :                                    FFFFFFFFC0000348 C |
 LITERAL_F_0000005D_1 :                                    FFFFFFFFC000034C C |
 LITERAL_F_0000005E_1 :                                    FFFFFFFFC0000350 C |
 LITERAL_F_0000005F_1 :                                    FFFFFFFFC0000354 C |
 LITERAL_F_00000060_1 :                                    FFFFFFFFC0000358 C |
 LITERAL_F_00000061_1 :                                    FFFFFFFFC000035C C |
 LITERAL_F_00000062_1 :                                    FFFFFFFFC0000360 C |
 LITERAL_F_00000063_1 :                                    FFFFFFFFC0000590 C |
 LITERAL_F_00000064_1 :                                    FFFFFFFFC0000594 C |
 LITERAL_F_00000065_1 :                                    FFFFFFFFC000059C C |
 LITERAL_F_00000066_1 :                                    FFFFFFFFC00005A0 C |
 LITERAL_F_00000067_1 :                                    FFFFFFFFC000060C C |
 LITERAL_L_0000FEC0_1 :     60007D0 C |  LITERAL_L_0000FFFF_1 :     6000EDC C |
 LITERAL_L_0000FFFF_2 :                                    FFFFFFFFC0000390 C |
 LITERAL_L_00FFFFFF_1 :                                    FFFFFFFFC0000604 C |
 LITERAL_L_02000000_1 :     6001090 C |
 LITERAL_L_02000000_2 :                                    FFFFFFFFC0000608 C |
 LITERAL_L_04000000_1 :     60007C8 C |  LITERAL_L_04000000_2 :     60008D4 C |
 LITERAL_L_04000000_3 :     6000A44 C |  LITERAL_L_04000000_4 :     6000ADC C |
 LITERAL_L_04000000_5 :     6000C0C C |  LITERAL_L_04000000_6 :     6000ED4 C |
 LITERAL_L_04000000_7 :     6001454 C |
 LITERAL_L_04000200_1 :                                    FFFFFFFFC000058C C |
 LITERAL_L_0401D000_1 :     6000ED8 C |  LITERAL_L_0600076E_1 :     6001150 C |
 LITERAL_L_06000A4A_1 :     6001304 C |  LITERAL_L_06000B48_1 :     6001308 C |
 LITERAL_L_0600101C_1 :     60014D8 C |  LITERAL_L_0603EFF8_1 :     6000760 C |
 LITERAL_L_0603F000_1 :     6001468 C |  LITERAL_L_0603FFF8_1 :     60004AC C |
 LITERAL_L_06040000_1 :     600112C C |  LITERAL_L_20004000_1 :     60003E4 C |
 LITERAL_L_20004000_2 :     600049C C |  LITERAL_L_20004000_3 :     6000750 C |
 LITERAL_L_20004000_4 :     60007C0 C |  LITERAL_L_20004000_5 :     600106C C |
 LITERAL_L_20004000_6 :     600113C C |  LITERAL_L_20004000_7 :     6001478 C |
 LITERAL_L_20004012_1 :     60003E8 C |  LITERAL_L_20004016_1 :     6000440 C |
 LITERAL_L_20004016_2 :     600074C C |  LITERAL_L_20004018_1 :     6000418 C |
 LITERAL_L_20004018_2 :     6000748 C |  LITERAL_L_2000401A_1 :     60003E0 C |
 LITERAL_L_2000401A_2 :     600068C C |  LITERAL_L_2000401C_1 :     60003DC C |
 LITERAL_L_2000401C_2 :     6000680 C |  LITERAL_L_20004020_1 :     6000698 C |
 LITERAL_L_20004020_2 :     6001130 C |  LITERAL_L_20004020_3 :     600146C C |
 LITERAL_L_2000402E_1 :     60003D4 C |  LITERAL_L_2000402E_2 :     60012E0 C |
 LITERAL_L_2000402F_1 :     60003D8 C |  LITERAL_L_2000402F_2 :     6000690 C |
 LITERAL_L_2000402F_3 :     60014D4 C |
 LITERAL_L_20004034_1 :                                    FFFFFFFFC0000610 C |
 LITERAL_L_20004036_1 :                                    FFFFFFFFC0000614 C |
 LITERAL_L_20004038_1 :     6000684 C |  LITERAL_L_20004100_1 :     60003D0 C |
 LITERAL_L_20004100_2 :     60007C4 C |  LITERAL_L_20004100_3 :     60012D4 C |
 LITERAL_L_20004100_4 :     600144C C |
 LITERAL_L_20004100_5 :                                    FFFFFFFFC0000598 C |
 LITERAL_L_20004102_1 :     60012D8 C |  LITERAL_L_20004200_1 :     60012DC C |
 LITERAL_L_36385550_1 :     60004A0 C |  LITERAL_L_36385550_2 :     6000754 C |
 LITERAL_L_4D5F4F4B_1 :     60004A8 C |  LITERAL_L_4D5F4F4B_2 :     600075C C |
 LITERAL_L_534C4156_1 :     6001134 C |  LITERAL_L_534C4156_2 :     6001470 C |
 LITERAL_L_535F4F4B_1 :     60004A4 C |  LITERAL_L_535F4F4B_2 :     6000758 C |
 LITERAL_L_7FFFFFFF_1 :                                    FFFFFFFFC0000180 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6001144 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     6001480 C |
 LITERAL_L_FFFFFFFFC0000000_3 :                            FFFFFFFFC00005FC C |
 LITERAL_L_FFFFFFFFC0000380_1 :                            FFFFFFFFC0000600 C |
 LITERAL_L_FFFFFFFFFF000000_1 :                                     6001078 C |
 LITERAL_W_0080_1 :         60007D4 C |  LITERAL_W_0080_2 :         6001098 C |
 LITERAL_W_0080_3 :                                        FFFFFFFFC0000618 C |
 LITERAL_W_00A0_1 :         6001490 C |
 LITERAL_W_00A0_2 :                                        FFFFFFFFC0000198 C |
 LITERAL_W_00A2_1 :         6000EE4 C |  LITERAL_W_00E0_1 :         6001318 C |
 LITERAL_W_00E0_2 :                                        FFFFFFFFC000019A C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC0000394 C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC00005AA C |
 LITERAL_W_00F0_1 :         60003EC C |  LITERAL_W_00F0_2 :         600041C C |
 LITERAL_W_00F0_3 :         6000444 C |  LITERAL_W_00F0_4 :         60004B4 C |
 LITERAL_W_00F0_5 :         60006B0 C |  LITERAL_W_00F0_6 :         6000768 C |
 LITERAL_W_00F0_7 :         60007D6 C |  LITERAL_W_00F0_8 :         6000EE2 C |
 LITERAL_W_00F0_9 :         600115A C |  LITERAL_W_00F0_A :         6001310 C |
 LITERAL_W_00F0_B :         6001486 C |
 LITERAL_W_00F0_C :                                        FFFFFFFFC0000190 C |
 LITERAL_W_00FC_1 :         60006B6 C |  LITERAL_W_00FF_1 :         6000EE0 C |
 LITERAL_W_00FF_2 :                                        FFFFFFFFC00005A6 C |
 LITERAL_W_0100_1 :         6001316 C |  LITERAL_W_0100_2 :         6001484 C |
 LITERAL_W_0105_1 :         6001094 C |
 LITERAL_W_013E_1 :                                        FFFFFFFFC00005AC C |
 LITERAL_W_0140_1 :         6000A48 C |  LITERAL_W_0140_2 :         6000AF4 C |
 LITERAL_W_0140_3 :         6000C2C C |  LITERAL_W_0140_4 :         6001314 C |
 LITERAL_W_0200_1 :         6001312 C |  LITERAL_W_0208_1 :         6001488 C |
 LITERAL_W_03FF_1 :                                        FFFFFFFFC000061A C |
 LITERAL_W_0415_1 :         6001096 C |
 LITERAL_W_1FFF_1 :                                        FFFFFFFFC00005A8 C |
 LITERAL_W_44E0_1 :         60003F0 C |  LITERAL_W_44E0_2 :         60004BA C |
 LITERAL_W_44E0_3 :         600076C C |  LITERAL_W_44E1_1 :         60003F6 C |
 LITERAL_W_5A00_1 :         600150E C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC000019C C |
 LITERAL_W_5A20_1 :         600148C C |  LITERAL_W_A518_1 :         60003F4 C |
 LITERAL_W_A518_2 :         60004B8 C |  LITERAL_W_A518_3 :         600150C C |
 LITERAL_W_A518_4 :                                        FFFFFFFFC0000196 C |
 LITERAL_W_A538_1 :         60003F8 C |  LITERAL_W_A538_2 :         600148E C |
 LITERAL_W_FE10_1 :         60003EE C |  LITERAL_W_FE10_2 :         600041E C |
 LITERAL_W_FE10_3 :         6000446 C |  LITERAL_W_FE10_4 :         60004BC C |
 LITERAL_W_FE10_5 :         60006B2 C |  LITERAL_W_FE10_6 :         600076A C |
 LITERAL_W_FE10_7 :         6001154 C |  LITERAL_W_FE10_8 :         6001492 C |
 LITERAL_W_FE10_9 :         6001508 C |
 LITERAL_W_FE10_A :                                        FFFFFFFFC0000192 C |
 LITERAL_W_FE80_1 :         60003F2 C |  LITERAL_W_FE80_2 :         60004B6 C |
 LITERAL_W_FE80_3 :         600148A C |  LITERAL_W_FE80_4 :         600150A C |
 LITERAL_W_FE80_5 :                                        FFFFFFFFC0000194 C |
 LITERAL_W_FE92_1 :         600115C C |  LITERAL_W_FE92_2 :         6001498 C |
 LITERAL_W_FEE2_1 :         6001156 C |  LITERAL_W_FEE2_2 :         6001494 C |
 LITERAL_W_FEE4_1 :         6001158 C |  LITERAL_W_FEE4_2 :         6001496 C |
 LITERAL_W_FF00_1 :                                        FFFFFFFFC0000364 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC00005A4 C |
*MACEXP :                         7 - | *MAP_BGTEST :                934D32 C |
*MAP_FGTEST :                9347F2 C |  MAP_NICOLE :                FF2710 C |
 MAP_NICOLE.FRAME_0 :        FF2720 C |  MAP_NICOLE.FRAME_1 :        FF2758 C |
 MAP_NICOLE.FRAME_2 :        FF278B C |  MAP_NICOLE.FRAME_3 :        FF27B4 C |
 MAP_NICOLE.FRAME_4 :        FF27D8 C |  MAP_NICOLE.FRAME_5 :        FF2806 C |
 MAP_NICOLE.FRAME_6 :        FF2825 C |  MAP_NICOLE.FRAME_7 :        FF284E C |
 MAP_NICOLE.MAPPINGS :       FF2710 C | *MARS :                           1 - |
 MARSBLOCK :                     20 C | *MARSCD :                         0 - |
 MARSGBL_CURRFB :                24 C |  MARSGBL_CURRPLGN :              10 C |
*MARSGBL_DIVSTOP_M :             1E C |  MARSGBL_DREQREAD :               0 C |
 MARSGBL_DREQWRITE :              4 C | *MARSGBL_DRWPAUSE :              1C C |
*MARSGBL_GRPHSCOPY :             16 C |  MARSGBL_PLGNCNTR :              1A C |
 MARSGBL_PLYPZCNTR :             18 C |  MARSGBL_PLYPZLIST_R :            8 C |
 MARSGBL_PLYPZLIST_W :            C C |  MARSGBL_WDGMODE :               14 C |
*MARSGBL_XPATCH :                22 C |  MARSGBL_XSHIFT :                20 C |
 MARSRAM_DREQ0 :            600DB10 C |  MARSRAM_DREQ1 :            600E310 C |
 MARSRAM_SYSTEM :           6006200 C |  MARSRAM_VIDEO :            6006298 C |
*MARSSND_ACTIVE :  FFFFFFFFC0000620 C |
 MARSSND_ACTIVE.END :                                      FFFFFFFFC0000624 C |
 MARSSND_PWMCACHE :                                        FFFFFFFFC0000000 C |
 MARSSND_PWMCHNLS :                                        FFFFFFFFC0000380 C |
 MARSSND_PWMCONTROL :                                      FFFFFFFFC0000498 C |
 MARSSND_REFILL :           600101C C |  MARSSND_REFILL.COPY_NOW :  6001042 C |
 MARSSND_REFILL.NEXT_ONE :  6001024 C |  MARSSND_REFILL.NOT_ENBL :  600105E C |
 MARSSND_RVMODE :  FFFFFFFFC000061C C |  MARSSOUND_INIT :           6000F70 C |
 MARSSOUND_INIT.CLR_ENBL :  6000F90 C |  MARSSOUND_PWMENABLE :      600100C C |
 MARSSOUND_READPWM :                                       FFFFFFFFC00004D0 C |
 MARSSOUND_READPWM.FROM_RV :                               FFFFFFFFC0000570 C |
 MARSSOUND_READPWM.LMUCH :                                 FFFFFFFFC00005D4 C |
 MARSSOUND_READPWM.LOOP :                                  FFFFFFFFC00004EE C |
 MARSSOUND_READPWM.LOOP_ME :                               FFFFFFFFC000051E C |
 MARSSOUND_READPWM.MONO :                                  FFFFFFFFC000057A C |
 MARSSOUND_READPWM.MONO_A :                                FFFFFFFFC0000568 C |
 MARSSOUND_READPWM.MONO_C :                                FFFFFFFFC0000548 C |
 MARSSOUND_READPWM.MONO_L :                                FFFFFFFFC000052A C |
 MARSSOUND_READPWM.NOT_ROM :                               FFFFFFFFC000055A C |
 MARSSOUND_READPWM.NO_L :                                  FFFFFFFFC0000590 C |
 MARSSOUND_READPWM.NO_R :                                  FFFFFFFFC0000596 C |
 MARSSOUND_READPWM.ON :                                    FFFFFFFFC00004FC C |
 MARSSOUND_READPWM.READ :                                  FFFFFFFFC000052C C |
 MARSSOUND_READPWM.RMUCH :                                 FFFFFFFFC00005DA C |
 MARSSOUND_READPWM.SILENT :                                FFFFFFFFC00004F4 C |
 MARSSOUND_READPWM.SKIP :                                  FFFFFFFFC00005BA C |
 MARSSOUND_SETPWM :         6000FA0 C |  MARSSOUND_SETPWM.ENDMRK :  6000FC4 C |
 MARSSOUND_SETPWMPITCH :    6000FDC C |
 MARSSOUND_SETPWMPITCH.OFF_1 :                                      6000FF0 C |
 MARSSOUND_SETVOLUME :      6000FF4 C |
 MARSSOUND_SETVOLUME.OFF_1 :                                        6001008 C |
 MARSUPD :                     19C6 C |  MARSVDP_PRINT :            60007D8 C |
 MARSVDP_PRINT.CHR_ENTER :  6000816 C |  MARSVDP_PRINT.CHR_EXIT :   6000824 C |
 MARSVDP_PRINT.NXT_CHR :    6000800 C |  MARSVDP_PRINT.NXT_LNS :    6000840 C |
 MARSVDP_PRINT.PUT_CHR :    600082C C | *MARSVDP_PRINTVAL :         6000854 C |
 MARSVDP_PRINTVAL.A_PLUS :  60008A0 C |
*MARSVDP_PRINTVAL.CHR_EXIT :                                        6000880 C |
 MARSVDP_PRINTVAL.NXT_LNS : 60008B6 C |
 MARSVDP_PRINTVAL.PUT_VALUE :                                       6000888 C |
 MARSVDP_PRINTVAL.WRT_NIBL :                                        600088C C |
 MARSVIDEO_BGDRAWLR :       6000A4A C |
 MARSVIDEO_BGDRAWLR.DTSK01_DLEFT :                                  6000AA8 C |
 MARSVIDEO_BGDRAWLR.DTSK01_DRIGHT :                                 6000AB4 C |
 MARSVIDEO_BGDRAWLR.INDXMODE :                                      6000AC4 C |
 MARSVIDEO_BGDRAWLR.NXT_DRAWUD :                                    6000AA4 C |
 MARSVIDEO_BGDRAWUD :       6000B48 C |
 MARSVIDEO_BGDRAWUD.DO_UPDOWN :                                     6000BB2 C |
 MARSVIDEO_BGDRAWUD.HDNX :  6000BFA C |
 MARSVIDEO_BGDRAWUD.INDXMODE :                                      6000BEC C |
 MARSVIDEO_BGDRAWUD.LWRFB : 6000BD0 C |
 MARSVIDEO_BGDRAWUD.SRCLOW :                                        6000BD6 C |
*MARSVIDEO_BGDRAWUD.TSK00_DOWN :                                    6000B8E C |
 MARSVIDEO_BGDRAWUD.TSK00_UP :                                      6000BA2 C |
 MARSVIDEO_BGDRAWUD.UPWRP : 6000B7E C |
 MARSVIDEO_BGDRAWUD.WRPAGAIN :                                      6000B76 C |
 MARSVIDEO_BGDRAWUD.X_LOOP :                                        6000BCA C |
 MARSVIDEO_BGDRAWUD.Y_LOOP :                                        6000BBE C |
 MARSVIDEO_DRAWALLBG :      60008E4 C |
 MARSVIDEO_DRAWALLBG.INDXMODE :                                     6000926 C |
 MARSVIDEO_DRAWALLBG.INDXMODEN :                                    60009F0 C |
 MARSVIDEO_DRAWALLBG.LRGRFB :                                       60009D6 C |
 MARSVIDEO_DRAWALLBG.LWR_XNXT :                                     600094C C |
 MARSVIDEO_DRAWALLBG.LWR_XVLD :                                     6000954 C |
 MARSVIDEO_DRAWALLBG.LWR_YNXT :                                     6000960 C |
 MARSVIDEO_DRAWALLBG.LWR_YVLD :                                     6000968 C |
 MARSVIDEO_DRAWALLBG.MK_PIECE :                                     60009BC C |
 MARSVIDEO_DRAWALLBG.NO_DATA :                                      60009B4 C |
 MARSVIDEO_DRAWALLBG.NXTLNG :                                       6000A1A C |
 MARSVIDEO_DRAWALLBG.NXTLNGHDN :                                    6000A02 C |
 MARSVIDEO_DRAWALLBG.NXT_X :                                        600098A C |
 MARSVIDEO_DRAWALLBG.NXT_Y :                                        600097C C |
 MARSVIDEO_DRAWALLBG.NXT_Y_L :                                      60009AC C |
 MARSVIDEO_DRAWALLBG.XBG_BACK :                                     600092E C |
 MARSVIDEO_DRAWALLBG.XBG_INC :                                      6000936 C |
 MARSVIDEO_DRAWALLBG.XBG_L :                                        6000990 C |
 MARSVIDEO_DRAWALLBG.XINIT_L :                                      6000926 C |
 MARSVIDEO_DRAWALLBG.YBG_BACK :                                     600093E C |
 MARSVIDEO_DRAWALLBG.YBG_INC :                                      6000946 C |
 MARSVIDEO_DRAWALLBG.YBG_L :                                        6000982 C |
*MARSVIDEO_DRAWALLBG.YBLK_EX :                                      6000A2C C |
 MARSVIDEO_DRAWALLBG.YBLK_LOOPN :                                   6000A10 C |
 MARSVIDEO_DRAWALLBG.Y_NOHDNLN :                                    6000A0C C |
 MARSVIDEO_FIXTBLSHIFT :    6000E90 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6000EBC C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       6000EA4 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    6000ECE C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6000EC8 C |
 MARSVIDEO_INIT :           600076E C |  MARSVIDEO_INIT.DEF_FB :    60007A0 C |
 MARSVIDEO_INIT.NXT_LNE :   60007A6 C |  MARSVIDEO_INIT.WAIT_FRM :  60007B6 C |
 MARSVIDEO_MAKETBL :        6000E44 C |
 MARSVIDEO_MAKETBL.LN_LOOP :                                        6000E68 C |
*MARSVIDEO_MAKETBL.NO_LINES :                                       6000E8A C |
 MARSVIDEO_MAKETBL.XL_L :   6000E76 C |  MARSVIDEO_MAKETBL.XL_R :   6000E70 C |
 MARSVIDEO_MKSCRLFIELD :    6000EE6 C |
 MARSVIDEO_MKSCRLFIELD.NO_INDX :                                    6000EF0 C |
 MARSVIDEO_MOVEBG :         6000C2E C |
 MARSVIDEO_MOVEBG.DONT_SNAP :                                       6000E14 C |
 MARSVIDEO_MOVEBG.HAS_SCRLDATA :                                    6000C3A C |
 MARSVIDEO_MOVEBG.INDXMODE :                                        6000E12 C |
*MARSVIDEO_MOVEBG.NO_CHNG : 6000C76 C |  MARSVIDEO_MOVEBG.REQD_B :  6000D66 C |
 MARSVIDEO_MOVEBG.REQR_B :  6000DAC C |  MARSVIDEO_MOVEBG.XEQU :    6000C50 C |
 MARSVIDEO_MOVEBG.XNEGTV :  6000CDE C |  MARSVIDEO_MOVEBG.XNEGTVL : 6000CF4 C |
 MARSVIDEO_MOVEBG.XPOSTV :  6000CE8 C |  MARSVIDEO_MOVEBG.XPOSTVL : 6000CFE C |
 MARSVIDEO_MOVEBG.X_STEND : 6000C70 C |
 MARSVIDEO_MOVEBG.YDL_BUSY :                                        6000DC2 C |
 MARSVIDEO_MOVEBG.YDR_BUSY :                                        6000D7C C |
 MARSVIDEO_MOVEBG.YEQU :    6000C66 C |  MARSVIDEO_MOVEBG.YNEGTV :  6000D0A C |
 MARSVIDEO_MOVEBG.YNEGTVL : 6000D20 C |  MARSVIDEO_MOVEBG.YPOSTV :  6000D14 C |
 MARSVIDEO_MOVEBG.YPOSTVL : 6000D2A C |
 MARSVIDEO_MOVEBG.YPU_NEGTV :                                       6000C90 C |
 MARSVIDEO_MOVEBG.YPU_POSTV :                                       6000C9A C |
 MARSVIDEO_MOVEBG.YX_NEGTV :                                        6000CAE C |
 MARSVIDEO_MOVEBG.YX_POSTV :                                        6000CB8 C |
 MARSVIDEO_MOVEBG.Y_STEND : 6000C76 C |  MARSVIDEO_SETBG :          6000F10 C |
 MARSVIDEO_SETBG.INDXMODE : 6000F1E C |  MARS_ENTRY :                   800 C |
 MARS_ENTRY.ADAPTERENABLE :     872 C |  MARS_ENTRY.NO_MARS :           880 C |
 MARS_ENTRY.RAMCODE :           84A C |  MARS_ENTRY.RESTARTICD :        85A C |
 MARS_RAMDATA :               3DEE0 C |  MARS_RAMDATA_E :             440E0 C |
 MARS_SCOMM :                   54C C |  MARS_SCOMM.BLOCKED :           5BF C |
 MARS_SCOMM.CLRCOM :            5C4 C |  MARS_SCOMM.NEXT_COMM :         59B C |
 MARS_SCOMM.NEXT_PASS :         591 C |  MARS_SCOMM.WAIT_CMD :          589 C |
 MARS_SCOMM.WAIT_ENTER :        57C C |  MARS_SCOMM.W_PASS2 :           5B5 C |
 MASTERTRKLIST :             FF244A C |  MASTER_IRQ :               6000248 C |
 MASTER_LOOP :              6001160 C |  MASTER_LOOP.COPY_PAL :     600118A C |
 MASTER_LOOP.LIST :         6001238 C |  MASTER_LOOP.NOT_YET :      6001214 C |
 MASTER_LOOP.NO_DREQ :      6001216 C | *MASTER_LOOP.NO_PAL :       60011EE C |
 MASTER_LOOP.NO_RDRW :      6001234 C |  MASTER_LOOP.WAIT :         6001176 C |
 MASTER_LOOP.WAIT_DMA :     60011FE C |  MASTER_LOOP.WAIT_FRMSWP :  6001166 C |
 MAX_MDDMATSK :                  10 - |  MAX_MDDREQ :                   800 - |
 MAX_MDERAM :                   800 - | *MAX_MSPR :                      80 - |
 MAX_PWMCHNL :                    7 - |  MAX_TRKCHN :                    12 - |
 MAX_TSTENTRY :                   5 - | *MAX_TSTTRKS :                    3 - |
 MBG_DATA :                      20 C |  MBG_FBDATA :                    28 C |
 MBG_FBPOS :                     24 C |  MBG_FLAGS :                      1 C |
 MBG_HEIGHT :                    12 C | *MBG_INDXINC :                   30 C |
 MBG_INTRL_BLK :                 16 C |  MBG_INTRL_H :                   1A C |
 MBG_INTRL_SIZE :                1C C |  MBG_INTRL_W :                   18 C |
*MBG_REDRAW :                     0 C | *MBG_RFILL :                     2C C |
 MBG_WIDTH :                     10 C |  MBG_XINC_L :                     8 C |
 MBG_XINC_R :                     A C |  MBG_XPOS :                      34 C |
 MBG_XPOS_OLD :                   4 C |  MBG_XSET :                       2 C |
 MBG_YFB :                       14 C |  MBG_YINC_D :                     E C |
 MBG_YINC_U :                     C C |  MBG_YPOS :                      38 C |
 MBG_YPOS_OLD :                   6 C |  MBG_YSET :                       3 C |
*MCD :                            0 - |  MCHNSND_BANK :                   C C |
 MCHNSND_CCHREAD :                8 C |  MCHNSND_ENBL :                   0 C |
 MCHNSND_END :                   14 C |  MCHNSND_FLAGS :                 20 C |
 MCHNSND_LOOP :                  18 C |  MCHNSND_PITCH :                 1C C |
 MCHNSND_READ :                   4 C |  MCHNSND_START :                 10 C |
 MCHNSND_VOL :                   24 C | *MDL_ANIMDATA :                  20 C |
*MDL_ANIMFRAME :                 24 C | *MDL_ANIMSPD :                   2C C |
*MDL_ANIMTIMER :                 28 C | *MDL_DATA :                       0 C |
*MDL_OPTION :                     4 C | *MDL_X_POS :                      8 C |
*MDL_X_ROT :                     14 C | *MDL_Y_POS :                      C C |
*MDL_Y_ROT :                     18 C | *MDL_Z_POS :                     10 C |
*MDL_Z_ROT :                     1C C |  MDRAMCODE :                    938 C |
 MDRAMCODE_END :               29CA C |  MDRAM_START :             FFFF9000 - |
 MDSYS_SINEDATA :            FF1DCA C |  MD_BANK_SRAM :              A130F1 - |
 MD_ERRADDR :                   898 C |  MD_ERRBUS :                    898 C |
 MD_ERRCHK :                    898 C |  MD_ERRILL :                    898 C |
 MD_ERROREX :                   898 C |  MD_ERRORTRAP :                 898 C |
 MD_ERRPRIVL :                  898 C |  MD_ERRTRAPV :                  898 C |
 MD_ERRZDIV :                   898 C |  MD_HOTSTART :                  8D8 C |
 MD_HOTSTART.CLRRAM :           90A C |  MD_HOTSTART.WAITFRAME :        8EA C |
 MD_INIT :                      89A C |  MD_INIT.WM :                   8AC C |
 MD_INIT.WS :                   8B6 C |  MD_LINE1010 :                  898 C |
 MD_LINE1111 :                  898 C |  MD_TRACE :                     898 C |
*MINFO_RAM_S :               FF0000 C |  MODE :                          18 - |
 MODE_INIT :                 FF1FF2 C |  MODE_INIT.CLR :             FF2000 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        6 C |
 MOUSE_Y :                        8 C |  MSTR_GFX_0 :               6001248 C |
 MSTR_GFX_0.LEL :           6001258 C |  MSTR_GFX_1 :               600125C C |
 MSTR_GFX_1.FROM_DRWALL :   60012C2 C |  MSTR_GFX_1.LEL :           600128C C |
 MSTR_GFX_1.NO_REDRAW :     60012B6 C |  MSTR_GFX_2 :               600131A C |
 MSTR_GFX_2.FB_LOOP :       6001384 C |  MSTR_GFX_2.LEL :           6001330 C |
 MSTR_GFX_2.NO_POLYGNS :    60013BC C |  MSTR_GFX_2.NO_REDRAW :     600134E C |
 MSTR_GFX_2.NXT_LNE :       6001344 C |  MSTR_GFX_2.NXT_PZ :        60013AC C |
 MSTR_GFX_2.WAIT_FB2 :      6001390 C |  MSTR_GFX_2.WAIT_PZ :       600139E C |
 MSTR_NEXTFRAME :           60013BC C |  MSTR_NEXTFRAME.WAIT_FB :   60013BE C |
 M_ASCII :                  6004A00 C |  M_IRQ_BAD :                6000348 C |
 M_IRQ_CMD :                600036C C |  M_IRQ_CUSTOM :    FFFFFFFFC0000000 C |
 M_IRQ_H :                  60003FA C |  M_IRQ_PWM :                600034C C |
 M_IRQ_V :                  6000420 C |  M_IRQ_VRES :               6000448 C |
 M_IRQ_VRES.MARS_RESET :    6000490 C |  M_IRQ_VRES.MD_RESET :      6000458 C |
 M_IRQ_VRES.SH_WAIT :       6000460 C |  M_IRQ_VRES.VRESLOOP :      6000498 C |
*NESTMAX :                      100 - |  NUM_POLYGONS :                  80 - |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*PACKING :                        0 - | *PADDING :                        0 - |
*PADDINGSOFAR :                   0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C | *PALMODE :                       21 C |
*PAL_BG :                    FF2704 C | *PAL_EMI :                   FF26C6 C |
 PAL_TESTBOARD :             FF26E6 C | *PEN :                           20 - |
*PLAYTHISSFX :               FF247A C |  PLGN_TEXURE :                   80 - |
 PLGN_TRI :                      40 - |  PLYPZ_MTRL :                     4 C |
 PLYPZ_SRC_XL :                  1C C |  PLYPZ_SRC_XL_DX :               20 C |
 PLYPZ_SRC_XR :                  2C C |  PLYPZ_SRC_XR_DX :               30 C |
 PLYPZ_SRC_YL :                  24 C |  PLYPZ_SRC_YL_DX :               28 C |
 PLYPZ_SRC_YR :                  34 C |  PLYPZ_SRC_YR_DX :               38 C |
 PLYPZ_TYPE :                     0 C |  PLYPZ_XL :                       C C |
 PLYPZ_XL_DX :                   10 C |  PLYPZ_XR :                      14 C |
 PLYPZ_XR_DX :                   18 C |  PLYPZ_YPOS :                     8 C |
 POLYGN_MTRL :                    4 C |  POLYGN_POINTS :                  8 C |
*POLYGN_SRCPNTS :                28 C |  POLYGN_TYPE :                    0 C |
*PSGALV :                      1786 C | *PSGATK :                      176A C |
 PSGCOM :                      1762 C | *PSGDEC :                      176E C |
*PSGDTH :                      1782 C | *PSGDTL :                      177E C |
*PSGENV :                      177A C |  PSGFREQ_LIST :                1580 C |
 PSGHATMODE :                  1EF7 C | *PSGLEV :                      1766 C |
*PSGRRT :                      1776 C | *PSGSLV :                      1772 C |
*PSGTIM :                      178E C | *PSGVOL :                      1792 C |
*PSG_CTRL :                  C00011 - |  PUT_PIECE :       FFFFFFFFC000029C C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC0000330 C |
 PUT_PIECE.DONTRESET_PZ :                                  FFFFFFFFC0000328 C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC0000312 C |
 PVOL :                          30 - | *PWCOM :                          0 - |
 PWINSH :                        20 - |  PWINSL :                        30 - |
 PWINSM :                        28 - |  PWMCOM :                      1A64 C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWOUTF :                        18 - |
 PWPHL :                         10 - |  PWPTH_V :                        8 - |
 RAMCODE_DEFAULT :            2F7BC C |  RAMCODE_USER :              FF2092 C |
*RAM_BGCAMERA :    FFFFFFFFFFFF9022 C | *RAM_BOARDUPD :    FFFFFFFFFFFF901E C |
 RAM_CURRGFX :     FFFFFFFFFFFF9014 C |  RAM_CURRINDX :    FFFFFFFFFFFF9026 C |
 RAM_CURRMODE :    FFFFFFFFFFFF9020 C |  RAM_CURRSELC :    FFFFFFFFFFFF9024 C |
 RAM_CURRTEMPO :   FFFFFFFFFFFF902C C |  RAM_CURRTICKS :   FFFFFFFFFFFF902A C |
 RAM_CURRTRACK :   FFFFFFFFFFFF9028 C |  RAM_EMIANIM :     FFFFFFFFFFFF9018 C |
*RAM_EMICHAR :     FFFFFFFFFFFF9016 C | *RAM_EMIHIDE :     FFFFFFFFFFFF901A C |
 RAM_EMIPOSX :     FFFFFFFFFFFF9000 C |  RAM_EMIPOSY :     FFFFFFFFFFFF9004 C |
*RAM_FADEMARSDEL : FFFFFFFFFFFFA602 C |  RAM_FADEMARSREQ : FFFFFFFFFFFFA5FE C |
 RAM_FADEMARSSPD : FFFFFFFFFFFFA600 C | *RAM_FADEMARSTMR : FFFFFFFFFFFFA604 C |
*RAM_FADEMDDEL :   FFFFFFFFFFFFA5FA C |  RAM_FADEMDREQ :   FFFFFFFFFFFFA5F6 C |
 RAM_FADEMDSPD :   FFFFFFFFFFFFA5F8 C | *RAM_FADEMDTMR :   FFFFFFFFFFFFA5FC C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFA606 C |  RAM_HORSCROLL :   FFFFFFFFFFFF9820 C |
 RAM_INITFLUG :    FFFFFFFFFFFFA86A C |  RAM_INPUTDATA :   FFFFFFFFFFFFA622 C |
 RAM_MARS_BACKGROUND :      6006298 C |  RAM_MARS_GLOBAL :          6006200 C |
*RAM_MARS_PLGNLIST :        6006310 C | *RAM_MARS_POLYGONS_0 :      6006710 C |
*RAM_MARS_POLYGONS_1 :      6008310 C |  RAM_MARS_VDPDRWLIST :      6009F10 C |
 RAM_MARS_VDPDRWLIST_E :    600DB10 C |  RAM_MDDREQ :      FFFFFFFFFFFFA880 C |
*RAM_MDGLBL_NULL : FFFFFFFFFFFFA87C C |  RAM_MDGLOBAL :    FFFFFFFFFFFFA87C C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFA874 C |  RAM_MDMARSPALFD : FFFFFFFFFFFFA110 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFA86E C |  RAM_MDSOUND :     FFFFFFFFFFFF9800 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFA622 C |  RAM_MDVIDEO :     FFFFFFFFFFFF9820 C |
 RAM_MODEBUFF :    FFFFFFFFFFFF9000 C |  RAM_PALETTE :     FFFFFFFFFFFFA090 C |
 RAM_PALETTEFD :   FFFFFFFFFFFFA310 C | *RAM_SAVEDATA :    FFFFFFFFFFFFA662 C |
*RAM_SHAKEME :     FFFFFFFFFFFF901C C |  RAM_SNDSAVEREG :  FFFFFFFFFFFF9800 C |
 RAM_SPRITES :     FFFFFFFFFFFF9C30 C | *RAM_SYSFLAGS :    FFFFFFFFFFFFA87A C |
 RAM_SYSRANDSEED : FFFFFFFFFFFFA866 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFA862 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFA5F0 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFA390 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFA5F2 C |  RAM_VDPREGS :     FFFFFFFFFFFFA60A C |
 RAM_VERSCROLL :   FFFFFFFFFFFF9BE0 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFA470 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFA5F4 C |  RAM_WINDOWCURR :  FFFFFFFFFFFF902E C |
 RAM_WINDOWNEW :   FFFFFFFFFFFF9030 C | *RAM_XPOSBG :      FFFFFFFFFFFF9010 C |
*RAM_XPOSFG :      FFFFFFFFFFFF900C C | *RAM_YPOS :        FFFFFFFFFFFF9008 C |
 RCHWIDTH :                      36 - |  READROMB :                    1007 C |
 READROMB.IMBACK :             1017 C |  READROMB.W2 :                 1024 C |
 READROMB.WAIT :               1020 C | *RELAXED :                        0 - |
 ROM_END :                    D1D3C C | *ROTATE_POINT :             6000F30 C |
 RRT :                           14 - |  SBEATACC :                      24 C |
 SBEATPTCK :                     22 C |  SCREEN_HEIGHT :                 E0 - |
 SCREEN_WIDTH :                 140 - |  SETUPCHIP :                    5CA C |
 SETUPCHIP.ALRDFND :            F40 C | *SETUPCHIP.BAD_INS :            ED4 C |
 SETUPCHIP.BUSY :               6A1 C |  SETUPCHIP.BUSY_S :             EFB C |
 SETUPCHIP.CHECK_CHNL :         EA6 C |  SETUPCHIP.CHECK_INS :          E93 C |
 SETUPCHIP.CHIP_OUT :           DDF C |  SETUPCHIP.CHIP_SWAP :          DA3 C |
 SETUPCHIP.CHKFREE :            F47 C |  SETUPCHIP.CHK_TBL :            EFE C |
 SETUPCHIP.CHK_TBLN :           EE3 C |  SETUPCHIP.CHNL_UNLINK :        BE3 C |
 SETUPCHIP.CHP_UNLK :           E6C C |  SETUPCHIP.CONFM_RD :           832 C |
 SETUPCHIP.DAC_OUT :            E04 C | *SETUPCHIP.DCUT :               CCE C |
 SETUPCHIP.DIFFR :              F17 C | *SETUPCHIP.DOFF :               CD3 C |
 SETUPCHIP.DO_CHNL :            6A8 C |  SETUPCHIP.EFFDAC_E :           A05 C |
 SETUPCHIP.EFFDAC_F :           A34 C |  SETUPCHIP.EFFFM_D :            99B C |
 SETUPCHIP.EFFFM_E :            9F7 C |  SETUPCHIP.EFFFM_F :            A2D C |
 SETUPCHIP.EFFFM_X :            B0A C |  SETUPCHIP.EFFPSG_D :           96D C |
 SETUPCHIP.EFFPSG_E :           9ED C |  SETUPCHIP.EFFPSG_F :           A1F C |
 SETUPCHIP.EFFPWM_E :           A12 C |  SETUPCHIP.EFFPWM_F :           A3A C |
 SETUPCHIP.EFFPWM_X :           AF1 C |  SETUPCHIP.EFF_DAC :            944 C |
 SETUPCHIP.EFF_FM :             92D C |  SETUPCHIP.EFF_PSG :            91A C |
 SETUPCHIP.EFF_PWM :            956 C |  SETUPCHIP.E_FNEGD2 :           A1C C |
 SETUPCHIP.E_GO :               AF0 C |  SETUPCHIP.E_NEG :              A01 C |
 SETUPCHIP.E_NEGD :             A0F C |  SETUPCHIP.E_NEGP :             A2A C |
 SETUPCHIP.E_NOEF :             AEC C |  SETUPCHIP.E_NOF :              AE2 C |
 SETUPCHIP.FLOTIN :             683 C |  SETUPCHIP.FLTIN_S :            65C C |
 SETUPCHIP.FM3_OUT :            E12 C |  SETUPCHIP.FMPAN_LIST :         B44 C |
 SETUPCHIP.FMPICKINS :          845 C |  SETUPCHIP.FMSAME_INS :         843 C |
 SETUPCHIP.FM_CHNLKON :         D76 C | *SETUPCHIP.FM_DLINK :           DA0 C |
 SETUPCHIP.FM_KEYCUT :          D9E C |  SETUPCHIP.FM_KEYOFF :          D9A C |
 SETUPCHIP.FM_KPV :             D99 C |  SETUPCHIP.FM_OUT :             E4E C |
 SETUPCHIP.FNDLINK :            F3C C |  SETUPCHIP.FNDSLOT :            F5A C |
 SETUPCHIP.FND_OCT :            D53 C |  SETUPCHIP.FREQINC_DAC :        A72 C |
 SETUPCHIP.FREQINC_FM :         A82 C |  SETUPCHIP.FREQINC_PSG :        AA8 C |
 SETUPCHIP.FREQINC_PWM :        A3E C |  SETUPCHIP.FROM_NL :            DBC C |
 SETUPCHIP.GET_OCT :            D48 C |  SETUPCHIP.GO_DOWN :            9D4 C |
 SETUPCHIP.GO_UP :              9DD C |  SETUPCHIP.GRAB_DVAL :          9CA C |
 SETUPCHIP.GRAB_PRTM :          AD2 C |  SETUPCHIP.INS_DAC :            78B C |
 SETUPCHIP.INS_FM :             7D4 C |  SETUPCHIP.INS_FM3 :            7C5 C |
 SETUPCHIP.INS_PSG :            75C C |  SETUPCHIP.INS_PSGN :           756 C |
 SETUPCHIP.INS_PWM :            71B C |  SETUPCHIP.LOWP :               992 C |
 SETUPCHIP.LOWPF :              9C1 C |  SETUPCHIP.MK_CHIP :            624 C |
 SETUPCHIP.NEW :                EF2 C |  SETUPCHIP.NEXT :               F01 C |
 SETUPCHIP.NODEFV :             C90 C |  SETUPCHIP.NOTEPSG_C :          C56 C |
 SETUPCHIP.NOTEPSG_FN :         C63 C |  SETUPCHIP.NOTE_DAC :           C9B C |
 SETUPCHIP.NOTE_FM :            D02 C |  SETUPCHIP.NOTE_FM3 :           CDE C |
 SETUPCHIP.NOTE_PSG :           C31 C |  SETUPCHIP.NOTE_PSGN :          C04 C |
 SETUPCHIP.NOTE_PWM :           B73 C |  SETUPCHIP.NOT_PRDAC :          7E8 C |
 SETUPCHIP.NO_CHNL :            6EB C |  SETUPCHIP.NP2_N :              C2E C |
 SETUPCHIP.NXT_CHNL :           637 C |  SETUPCHIP.PCUT :               BE1 C |
 SETUPCHIP.POFF :               BDD C |  SETUPCHIP.PSGN_OUT :           E20 C |
 SETUPCHIP.PSG_OUT :            E2E C |  SETUPCHIP.PVMUCH :             896 C |
 SETUPCHIP.PWMN_KPV :           BBE C |  SETUPCHIP.PWM_KEYCUT :         BD9 C |
 SETUPCHIP.PWM_KEYOFF :         BD5 C |  SETUPCHIP.PWM_OUT :            DE1 C |
 SETUPCHIP.P_OUT :              E4C C |  SETUPCHIP.RAN_OUT :            6E1 C |
 SETUPCHIP.RD_FMINS :           7FF C |  SETUPCHIP.RD_NT3 :             D3D C |
 SETUPCHIP.REQ_EFF :            8EC C |  SETUPCHIP.REQ_INS :            6F4 C |
 SETUPCHIP.REQ_NOTE :           B48 C |  SETUPCHIP.REQ_VOL :            851 C |
 SETUPCHIP.SILNC_LIST :         670 C |  SETUPCHIP.SILNC_SINGL :        649 C |
 SETUPCHIP.TBLLIST :            ED7 C |  SETUPCHIP.VMUCH :              8C0 C |
 SETUPCHIP.VOL_FM :             8C7 C |  SETUPCHIP.VOL_PSG :            8A4 C |
 SETUPCHIP.VOL_PWM :            871 C |  SET_LEFT :        FFFFFFFFC000019E C |
 SET_LEFT.LFT_OK : FFFFFFFFC00001C0 C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC0000218 C |
 SET_RIGHT :       FFFFFFFFC000021C C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC000023E C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC0000296 C |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              600109C C |
 SH2_M_ENTRY.WAIT_MD :      60010CC C |  SH2_M_ENTRY.WAIT_SLAVE :   60010D6 C |
 SH2_M_ERROR :              600030C C |  SH2_M_ERROR.INFIN :        6000322 C |
 SH2_M_HOTSTART :           60010E2 C |  SH2_M_HOTSTART.COPY :      6001102 C |
 SH2_RAM :                  6006200 C |  SH2_SLAVE :                6000124 C |
 SH2_S_ENTRY :              60013D4 C |  SH2_S_ENTRY.WAIT_MD :      6001404 C |
 SH2_S_ERROR :              600033C C |  SH2_S_ERROR.INFIN :        6000342 C |
 SH2_S_HOTSTART :           6001410 C |  SH2_S_HOTSTART.COPY :      6001430 C |
 SHIFT :                          2 - |  SHOWROM :                      FE6 C |
 SIN_TABLE :                6002200 C |  SIZEOF_DREQ :                  228 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MARSBG :                 3C C |
 SIZEOF_MARSGBL :                26 C | *SIZEOF_MARSRAM :           600EB10 C |
*SIZEOF_MARSRAM.HERE :      600EB10 C |  SIZEOF_MARSSYS :           6006298 C |
 SIZEOF_MARSVID :           600DB10 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFA880 C |
 SIZEOF_MDGLBL.COPYME :         926 C | *SIZEOF_MDLOBJ :                 30 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFB080 C |  SIZEOF_MDSND :    FFFFFFFFFFFF9820 C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFA87C C |  SIZEOF_MDVID :    FFFFFFFFFFFFA622 C |
 SIZEOF_PLYPZ :                  3C C |  SIZEOF_POLYGN :                 38 C |
 SIZEOF_SNDCHN :                 28 C |  SLAVE_IRQ :                60002AC C |
 SLAVE_LOOP :               600149C C |  SLAVE_LOOP.REFILL_IN :     60014B8 C |
 SLAVE_LOOP.REFILL_OUT :    60014CE C |  SLV :                           10 - |
 SMPINS_BELL_ICE :          2054224 C |  SMPINS_BRASS1_HI :         2057D50 C |
 SMPINS_BRASS1_LOW :        205F91C C |  SMPINS_FOREST_1 :          20674E8 C |
 SMPINS_KICK_JAM :          206BDD4 C | *SMPINS_PIANO_1 :           206E6B4 C |
 SMPINS_SNARE_JAM :         206C8A0 C |  SMPINS_SNRTOM_1 :          206D20C C |
*SMPINS_SSTR162A :          2072DD0 C |  SMPINS_VCTR01 :            20440E0 C |
 SMPINS_VCTR04 :            2045D18 C | *SMPINS_VCTRAMBIENT :       2052AB0 C |
 SMPINS_VCTRBRASS :         205133C C |  SMPINS_VCTRCRASH :         204D6D4 C |
 SMPINS_VCTRKICK :          20494CC C |  SMPINS_VCTRSNARE :         2047788 C |
 SMPINS_VCTRTIMPANI :       204A460 C |  SNDLOCKZ80 :                FF00A2 C |
 SNDLOCKZ80.WAIT :           FF00AA C |  SNDREQ_ENTER :              FF00C0 C |
 SNDREQ_ENTER.WAIT :         FF00E6 C |  SNDREQ_EXIT :               FF00F6 C |
 SNDREQ_SADDR :              FF011E C |  SNDREQ_SBYTE :              FF0126 C |
 SNDREQ_SCMD :               FF010C C | *SNDREQ_SLONG :              FF011A C |
 SNDREQ_SWORD :              FF0122 C |  SNDUNLOCKZ80 :              FF00B6 C |
 SOUND_DMA_PAUSE :           FF0134 C |  SOUND_DMA_PAUSE.RETRY :     FF0136 C |
 SOUND_DMA_PAUSE.SAFE :      FF0150 C |
 SOUND_DMA_PAUSE.WAIT_MARS1 :                                        FF0160 C |
 SOUND_DMA_PAUSE.WAIT_MARS2 :                                        FF017C C |
 SOUND_DMA_RESUME :          FF018C C |
 SOUND_DMA_RESUME.WAIT_MARS1 :                                       FF019E C |
 SOUND_DMA_RESUME.WAIT_MARS2 :                                       FF01BA C |
 SOUND_GLBTEMPO :            FF0262 C |  SOUND_INIT :                FF0048 C |
 SOUND_INIT.CLEANUP :        FF006E C |  SOUND_INIT.COPY :           FF0084 C |
 SOUND_INIT.WAIT :           FF0058 C |  SOUND_TRKPAUSE :            FF021A C |
 SOUND_TRKPLAY :             FF01CA C |  SOUND_TRKRESUME :           FF0230 C |
 SOUND_TRKSTOP :             FF0204 C |  SOUND_TRKTICKS :            FF0246 C |
 STANDBY :                        3 - |  STRM_OOPS :                6000328 C |
 STR_CURSOR :                FF2600 C |  STR_GEMA :                  FF2626 C |
 STR_INFOMOUSE :             FF26B6 C |  STR_STATUS :                FF2606 C |
*STR_TITLE :                 FF25EA C | *SYSMARS_ID :                A130EC - |
 SYSMARS_REG :               A15100 - |  SYSTEM_INIT :               FF1B3C C |
 SYSTEM_INIT.CLRINPUT :      FF1B7A C |  SYSTEM_INIT.WAIT :          FF1B4A C |
 SYSTEM_INPUT :              FF1BBE C |  SYSTEM_INPUT.EXIT :         FF1BF0 C |
 SYSTEM_INPUT.ID_03 :        FF1C16 C |  SYSTEM_INPUT.ID_0D :        FF1CC0 C |
 SYSTEM_INPUT.INVALID :      FF1CBA C |  SYSTEM_INPUT.LIST :         FF1BF6 C |
 SYSTEM_INPUT.OLDPAD :       FF1D38 C |  SYSTEM_INPUT.PICK_ID :      FF1D3E C |
 SYSTEM_INPUT.READ :         FF1D54 C |  SYSTEM_INPUT.STEP_1 :       FF1D60 C |
 SYSTEM_INPUT.STEP_2 :       FF1D6C C |  SYSTEM_INPUT.THIS_ONE :     FF1BD6 C |
 SYSTEM_INPUT.X_NEG :        FF1C88 C |  SYSTEM_INPUT.Y_NEG :        FF1CB4 C |
 SYSTEM_JUMPRAMCODE :        FF1FD4 C |
 SYSTEM_JUMPRAMCODE.COPYME2 :                                        FF1FE6 C |
 SYSTEM_MDMARSDREQ :         FF2024 C |  SYSTEM_MDMARSDREQ.L0 :      FF2072 C |
 SYSTEM_MDMARSDREQ.L1 :      FF207A C |  SYSTEM_MDMARSDREQ.RETRY :   FF2038 C |
 SYSTEM_MDMARSDREQ.WAIT_BIT :                                        FF2058 C |
 SYSTEM_MDMARSDREQ.WAIT_CMD :                                        FF204E C |
*SYSTEM_RANDOM :             FF1D6E C |  SYSTEM_SETINTS :            FF1ECA C |
 SYSTEM_SETINTS.NOHINT :     FF1EEE C |  SYSTEM_SETINTS.NOVINT :     FF1EDC C |
*SYSTEM_SINEWAVE :           FF1DAC C |  SYSTEM_SINEWAVE.DONT_NEG :  FF1DC8 C |
*SYSTEM_SINEWAVE_COS :       FF1D8C C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                      FF1DA6 C |
*SYSTEM_SRAMINIT :           FF1EF0 C |  SYSTEM_SRAMINIT.INITSAVE :  FF1F04 C |
 SYSTEM_VBLANK :             FF1F18 C |  SYSTEM_VBLANK_EXIT :        FF1FC6 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - | *SYS_IO :                    A10001 - |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                60004BE C |
 S_IRQ_CMD :                60004EC C |  S_IRQ_CMD.COPY_1 :         6000532 C |
 S_IRQ_CMD.NEXT_CHNL :      600054C C |  S_IRQ_CMD.NO_KEYOFF :      6000570 C |
 S_IRQ_CMD.NO_PITCHBND :    6000594 C |  S_IRQ_CMD.NO_REQ :         6000642 C |
 S_IRQ_CMD.NO_VOLUMEBND :   60005AC C | *S_IRQ_CMD.NO_ZTRNSFR :     6000652 C |
 S_IRQ_CMD.PWM_KEYCUT :     6000564 C |  S_IRQ_CMD.WAIT_1 :         6000522 C |
 S_IRQ_CUSTOM :             60014E4 C |  S_IRQ_H :                  60006B8 C |
 S_IRQ_PWM :                60004C4 C |  S_IRQ_PWM.EXIT :           60004E6 C |
 S_IRQ_V :                  60006D8 C |  S_IRQ_VRES :               60006F8 C |
 S_IRQ_VRES.MARS_RESET :    600073A C |  S_IRQ_VRES.MD_RESET :      6000708 C |
 S_IRQ_VRES.SH_WAIT :       6000714 C |  S_IRQ_VRES.VRESLOOP :      6000742 C |
 TAG_WIDTH :       FFFFFFFFC00004CC C |  TAG_YHGHT :       FFFFFFFFC00004D0 C |
 TBLFM :                       19F8 C |  TBLFM3 :                      1A18 C |
 TBLFM6 :                      1A20 C |  TBLPSG :                      19D6 C |
 TBLPSGN :                     19F0 C |  TBLPWM :                      1A2A C |
 TESTMARS_BG :              207553C C |  TESTMARS_BG_PAL :           9345F2 C |
 TESTMARS_MAJO :            2086D3C C |  TEST_POLYGON :             60021C8 C |
 TH :                      20000000 - | *THISCODE_TOP :              FF2092 C |
 THISCODE_TOP.LIST :         FF2176 C |  THISCODE_TOP.LOOP :         FF211C C |
 THISCODE_TOP.MODE0 :        FF2182 C |  THISCODE_TOP.MODE0_LOOP :   FF218E C |
 THISCODE_TOP.MODE1 :        FF22AA C |  THISCODE_TOP.MODE1_LOOP :   FF22BA C |
 THISCODE_TOP.NOAA :         FF23A2 C |  THISCODE_TOP.NOBA :         FF2392 C |
 THISCODE_TOP.NOC_C :        FF23D2 C |  THISCODE_TOP.NOC_UP :       FF22F8 C |
 THISCODE_TOP.NOD2 :         FF2366 C |  THISCODE_TOP.NOD_M :        FF21F4 C |
 THISCODE_TOP.NOL :          FF23B2 C |  THISCODE_TOP.NOL_M :        FF21EA C |
 THISCODE_TOP.NOL_M2 :       FF2248 C |  THISCODE_TOP.NOL_M4 :       FF228A C |
 THISCODE_TOP.NOR :          FF23C2 C |  THISCODE_TOP.NOR_M :        FF21E0 C |
 THISCODE_TOP.NOR_M2 :       FF2234 C |  THISCODE_TOP.NOR_M3 :       FF227E C |
 THISCODE_TOP.NOU2 :         FF234C C |  THISCODE_TOP.NOU_M :        FF21FE C |
 THISCODE_TOP.NOX2 :         FF2332 C |  THISCODE_TOP.NOY2 :         FF2316 C |
 THISCODE_TOP.NO_CLKL :      FF22A8 C |  THISCODE_TOP.NO_MODE0 :     FF21B6 C |
 THISCODE_TOP.NO_MODE1 :     FF22D0 C |  THISCODE_TOP.PRINT_CURSOR : FF23D4 C |
 THISCODE_TOP.PROCS_TASK :   FF23F8 C |  THISCODE_TOP.REVERS :       FF213C C |
 THISCODE_TOP.SAME_W :       FF2148 C |  THISCODE_TOP.TASKLIST :     FF2406 C |
 THISCODE_TOP.TASK_00 :      FF2412 C |  THISCODE_TOP.TASK_01 :      FF242E C |
 THISCODE_TOP.TASK_02 :      FF2432 C |  THISCODE_TOP.TASK_03 :      FF2436 C |
 THISCODE_TOP.TASK_04 :      FF243A C |  THISCODE_TOP.TASK_05 :      FF2442 C |
 THISCODE_TOP.TOPTRK :       FF2376 C |  THISCODE_TOP.TOPTRK2 :      FF2382 C |
 THISCODE_TOP.WAIT :         FF22DC C |  THISCODE_TOP.WAIT3 :        FF229E C |
 TICKCNT :                     19C9 C |  TICKFLAG :                    19C7 C |
*TIME :                    21:19:13 - |  TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    4AA C |
 TRACK_OUT.CLRFE :              4B9 C |  TRACK_OUT.NOCHIP :             4D2 C |
 TRANSFERROM :                 1034 C |  TRANSFERROM.DOUBLE :          1053 C |
 TRANSFERROM.TRANSFER :        1078 C |  TRANSFERROM.X68KLAST :        1097 C |
 TRANSFERROM.X68KLOOP :        1086 C |  TRANSFERROM.X68KLPCONT :      108F C |
 TRANSFERROM.X68KLPWT :        10A9 C |  TRANSFERROM.X68KLSTCONT :     10A1 C |
 TRANSFERROM.X68KLSTWT :       10BC C |  TRANSFERROM.X68KLSTWTLP :     10C0 C |
 TRANSFERROM.X68KNOCARRY :     1072 C |  TRANSFERROM.X68KPWTLP :       10AD C |
 TRKBUFF_0 :                   1E00 C |  TRKBUFF_1 :                   1F00 C |
 TRKDATA_0 :                   1C00 C |  TRKDATA_1 :                   1D00 C |
 TRKHDOUT :                    1EFA C |  TRKOUT_UNLK :                  4DE C |
 TRKOUT_UNLK.ISPSG_C :          517 C |  TRKOUT_UNLK.IS_FM :            52F C |
 TRKOUT_UNLK.IS_PSG :           503 C |  TRKOUT_UNLK.IS_PSGN :          514 C |
 TRKOUT_UNLK.IS_PWM :           52A C |  TRKOUT_UNLK.TLB_CONT :         532 C |
 TRKPOINTERS :                 18B7 C |  TRK_CACHNOTES :                 1A - |
 TRK_CURRBLK :                   11 - |  TRK_HALFWAY :                   10 - |
*TRK_HDHALFWAY :                 19 - |  TRK_NUMCHNLS :                  16 - |
 TRK_READ :                       C - |  TRK_ROMBLK :                     0 - |
 TRK_ROMINS :                     6 - |  TRK_ROMPATT :                    3 - |
 TRK_ROMPATTRD :                  9 - |  TRK_ROWPAUSE :                  18 - |
 TRK_ROWS :                       E - |  TRK_SETBLK :                    12 - |
 TRK_SIZEINS :                   17 - |  TRK_STATUS :                    13 - |
 TRK_TICKSET :                   15 - |  TRK_TICKTMR :                   14 - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPDTRACK :                     1CF C |  UPDTRACK.CLRF :                446 C |
 UPDTRACK.DECROW :              24E C |  UPDTRACK.DECROW_E :            251 C |
*UPDTRACK.DNTSLNCE :            453 C |  UPDTRACK.EFFECT_FILL :         420 C |
 UPDTRACK.EFF_A :               349 C |  UPDTRACK.EFF_B :               353 C |
 UPDTRACK.EFF_C :               36D C |  UPDTRACK.EXIT :                243 C |
 UPDTRACK.FIRST_FILL :          42C C |  UPDTRACK.GO_EFFECT :           466 C |
 UPDTRACK.GRAB_ASAP :           31A C |  UPDTRACK.HAS_NOTE :            25A C |
 UPDTRACK.INC_CPATT :           2FD C |  UPDTRACK.NEXT_NOTE :           231 C |
 UPDTRACK.NEXT_TRACK :          378 C |  UPDTRACK.NO_EFF :              2BE C |
 UPDTRACK.NO_INS :              2A0 C |  UPDTRACK.NO_NOTE :             295 C |
 UPDTRACK.NO_VOL :              2AC C |  UPDTRACK.OLD_TYPE :            289 C |
 UPDTRACK.READ_TRACK :          1E9 C |  UPDTRACK.RNOUT_CHNLS :         2F9 C |
 UPDTRACK.SET_TRACK :           37F C |  UPDTRACK.SFXMD :               1FE C |
 UPDTRACK.SZGOOD :              3F7 C |  UPDTRACK.SZMUCH :              3F2 C |
 UPDTRACK.TRACK_END :           493 C |  UPDTRACK.TRKEND_EFFC :         494 C |
 VARNULLVRAM :                  7FF - | *VAR_MOVESPD :                 4000 - |
*VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |
 VIDEOMARS_DRWPLGNPZ :                                     FFFFFFFFC0000366 C |
 VIDEOMARS_DRWPLGNPZ.INVLD_Y :                             FFFFFFFFC000038C C |
 VIDEOMARS_DRWPLGNPZ.LEN_MAX :                             FFFFFFFFC0000386 C |
 VIDEO_CLEAR :               FF02B4 C | *VIDEO_COPY :                FF0752 C |
 VIDEO_COPY.DMAW :           FF0766 C |  VIDEO_COPY.DMAWE :          FF07C0 C |
 VIDEO_DMABLAST :            FF07D8 C |  VIDEO_DMABLAST.END :        FF082E C |
 VIDEO_DMABLAST.EXIT :       FF0844 C |  VIDEO_DMABLAST.NEXT :       FF0808 C |
 VIDEO_DMASET :              FF0846 C |  VIDEO_FILL :                FF06DE C |
 VIDEO_FILL.DMAW :           FF06F2 C |  VIDEO_FILL.DMAWE :          FF073A C |
 VIDEO_INIT :                FF027E C |  VIDEO_INIT.CLRRAM :         FF0288 C |
*VIDEO_INIT.EXIT :           FF02B2 C |  VIDEO_INIT.LOOP :           FF02A4 C |
 VIDEO_LOADART :             FF08B8 C |  VIDEO_LOADART.FROM_RAM :    FF0956 C |
*VIDEO_LOADMAP :             FF0486 C |  VIDEO_LOADMAP.CONT :        FF04AC C |
 VIDEO_LOADMAP.NODBLE :      FF04CC C |  VIDEO_LOADMAP.NONULL :      FF04AA C |
 VIDEO_LOADMAP.XLOOP :       FF049C C |  VIDEO_LOADMAP.YLOOP :       FF0492 C |
 VIDEO_LOADPAL :             FF0328 C |  VIDEO_LOADPAL_MARS :        FF09A4 C |
 VIDEO_MARSPALFADE :         FF09CC C |
 VIDEO_MARSPALFADE.FADE_DONE :                                       FF09E0 C |
 VIDEO_MARSPALFADE.FADE_IN : FF09E2 C |
 VIDEO_MARSPALFADE.FADE_LIST :                                       FF09DA C |
 VIDEO_MARSPALFADE.FADE_OUT :                                        FF0A86 C |
 VIDEO_MARSPALFADE.NO_BLU :  FF0A5C C |
 VIDEO_MARSPALFADE.NO_BLU_O :                                        FF0AE2 C |
 VIDEO_MARSPALFADE.NO_FNSH : FF0A76 C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                                       FF0AF8 C |
 VIDEO_MARSPALFADE.NO_GRN :  FF0A3C C |
 VIDEO_MARSPALFADE.NO_GRN_O :                                        FF0ACA C |
 VIDEO_MARSPALFADE.NO_MOVE : FF0A84 C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                                       FF0B06 C |
 VIDEO_MARSPALFADE.NO_RED :  FF0A1C C |
 VIDEO_MARSPALFADE.NO_RED_O :                                        FF0AB2 C |
 VIDEO_MARSPALFADE.NXT_PAL : FF09FA C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                                       FF0A9A C |
*VIDEO_MARSREDRAW :          FF098A C |  VIDEO_MARSREDRAW.WAIT2 :    FF0992 C |
 VIDEO_MARSSETGFX :          FF096A C |  VIDEO_MARSSETGFX.WAIT2 :    FF097E C |
 VIDEO_PALFADE :             FF034C C |  VIDEO_PALFADE.FADE_DONE :   FF0360 C |
 VIDEO_PALFADE.FADE_IN :     FF0362 C |  VIDEO_PALFADE.FADE_LIST :   FF035A C |
 VIDEO_PALFADE.FADE_OUT :    FF0406 C |  VIDEO_PALFADE.NO_BLU :      FF03DE C |
 VIDEO_PALFADE.NO_BLU_O :    FF0462 C |  VIDEO_PALFADE.NO_FNSH :     FF03F6 C |
 VIDEO_PALFADE.NO_FNSH_O :   FF0476 C |  VIDEO_PALFADE.NO_GRN :      FF03BE C |
 VIDEO_PALFADE.NO_GRN_O :    FF044A C |  VIDEO_PALFADE.NO_MOVE :     FF0404 C |
 VIDEO_PALFADE.NO_MOVE_O :   FF0484 C |  VIDEO_PALFADE.NO_RED :      FF039E C |
 VIDEO_PALFADE.NO_RED_O :    FF0432 C |  VIDEO_PALFADE.NXT_PAL :     FF037C C |
 VIDEO_PALFADE.NXT_PAL_O :   FF041A C |  VIDEO_PALTARGET :           FF0322 C |
*VIDEO_PALTARGET_MARS :      FF099E C |  VIDEO_PRINT :               FF050A C |
 VIDEO_PRINT.DONIBL :        FF0624 C |  VIDEO_PRINT.EXIT :          FF0594 C |
 VIDEO_PRINT.ISBYTE :        FF055E C |  VIDEO_PRINT.ISLONG :        FF0582 C |
 VIDEO_PRINT.ISWORD :        FF0570 C |  VIDEO_PRINT.LNGLOOP :       FF0614 C |
 VIDEO_PRINT.LOOP :          FF051E C |  VIDEO_PRINT.LOWR :          FF0634 C |
 VIDEO_PRINT.NEWJUMP :       FF0518 C |  VIDEO_PRINT.NEXT :          FF0540 C |
 VIDEO_PRINT.NEXTV :         FF059E C |  VIDEO_PRINT.NOTHING :       FF0640 C |
 VIDEO_PRINT.PUTTEXT :       FF0532 C |  VIDEO_PRINT.SPECIAL :       FF0544 C |
 VIDEO_PRINT.VBYTE :         FF05D0 C |  VIDEO_PRINT.VLONG :         FF061C C |
 VIDEO_PRINT.VWORD :         FF05F2 C |  VIDEO_PRINTINIT :           FF04DE C |
 VIDEO_UPDATE :              FF0302 C | *VIDEO_UPDATE.EXIT :         FF0320 C |
 VIDEO_UPDATE.LOOP :         FF0314 C |  VIDMARS_PAL :               FF09A8 C |
 VIDMARS_PAL.LOOP :          FF09C0 C |  VIDMD_PAL :                 FF032C C |
 VIDMD_PAL.LOOP :            FF0344 C |  VID_PICKLAYER :             FF0642 C |
 VID_PICKLAYER.GOLYR :       FF0692 C |  VID_PICKLAYER.NOWD :        FF067C C |
 VID_PICKLAYER.PLAWND :      FF066A C |  VID_PICKLAYER.THISSZ :      FF06B2 C |
 VID_PICKLAYER.THISSZJ :     FF06DA C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :              FF2008 C |
*VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  19D5 C |  WAVE_LEN :                    19CD C |
 WAVE_LOOP :                   19D0 C |  WAVE_PITCH :                  19D3 C |
 WAVE_START :                  19CA C |  WAVFREQ_LIST :                1672 C |
 WDG_TASK_0 :      FFFFFFFFC000001C C |
 WDG_TASK_0.DONTRESET :                                    FFFFFFFFC00000F4 C |
 WDG_TASK_0.EXIT : FFFFFFFFC0000134 C |
 WDG_TASK_0.FIND_TOP :                                     FFFFFFFFC00000A6 C |
 WDG_TASK_0.IS_HIGH :                                      FFFFFFFFC00000B8 C |
 WDG_TASK_0.IS_LOW :                                       FFFFFFFFC00000AE C |
 WDG_TASK_0.LEFTH :                                        FFFFFFFFC0000104 C |
 WDG_TASK_0.LEFTH2 :                                       FFFFFFFFC000012C C |
 WDG_TASK_0.NEXT_PZ :                                      FFFFFFFFC00000DA C |
 WDG_TASK_0.SETPNTS :                                      FFFFFFFFC0000074 C |
 WDG_TASK_0.SRC_PNTS :                                     FFFFFFFFC0000088 C |
*WDG_TASK_0.START_MATH :                                   FFFFFFFFC0000096 C |
 WDG_TASK_0.TRINGL :                                       FFFFFFFFC0000066 C |
 WDG_TASK_0.VALID :                                        FFFFFFFFC000002C C |
 WDG_TASK_0.YTRINGL :                                      FFFFFFFFC000009E C |
 WDM_EXIT :        FFFFFFFFC000016C C | *WHDFLG :                      178A C |
 X68KSRCLSB :                  19BB C |  X68KSRCMID :                  19BC C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                    29CC C |
 Z80_CODE_END :                497C C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      3E C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZSET_WTUNE :      FFFFFFFFFFFFFFE8 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - |  _CCR :                    FFFFFE92 - |
 _DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
 _DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - |  _DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - |  _FRAMEBUFFER :             4000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
 _FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
 _JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :               4020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
 _TOCR :                          7 - |  _VDPREG :                 20004100 - |

   1715 symbols
    271 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 1/27/2022 21:19:14


  defined macros:
  ---------------

FINISH                                | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPL                                 | ORG                                  
STRUCT                                |

     11 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 1/27/2022 21:19:14


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               |

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 1/27/2022 21:19:14


  codepages:
  ----------

STANDARD (0 changed characters)


0.24 seconds assembly time

  13892 lines source file
  14464 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
