 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 8/5/2022 2:11:47


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT MARSIANO
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; for cells w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$0                 paddingSoFar set 0
(1)   33/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   34/       0 :                     
(1)   35/       0 :                     ; -------------------------------------
(1)   36/       0 :                     ; Reserve memory section
(1)   37/       0 :                     ;
(1)   38/       0 :                     ; NOTE: This doesn't work for Z80
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     
(1)   41/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   42/       0 :                     GLBL_LASTPC	set *
(1)   43/       0 :                     		dephase
(1)   44/       0 :                     GLBL_LASTORG	set *
(1)   45/       0 :                     		phase thisinput
(1)   46/       0 :                     		endm
(1)   47/       0 :                     		
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Finish struct
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     finish		macro				; Then finish custom struct.
(1)   53/       0 :                     		!org GLBL_LASTORG
(1)   54/       0 :                     		phase GLBL_LASTPC
(1)   55/       0 :                     		endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; -------------------------------------
(1)   58/       0 :                     ; Color debug
(1)   59/       0 :                     ; -------------------------------------
(1)   60/       0 :                     
(1)   61/       0 :                     colorme		macro this
(1)   62/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   63/       0 :                     		move.w	#this,(vdp_data).l
(1)   64/       0 :                     		endm
(1)   65/       0 :                     
(1)   66/       0 :                     ; -------------------------------------
(1)   67/       0 :                     ; Custom ORG
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; (from s2disasm)
(1)   70/       0 :                     ; -------------------------------------
(1)   71/       0 :                     
(1)   72/       0 :                     org macro address
(1)   73/       0 :                     	if notZ80(MOMCPU)
(1)   74/       0 :                     		if address < *
(1)   75/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   76/       0 :                     		elseif address > *
(1)   77/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   78/       0 :                     			!org address
(1)   79/       0 :                     		endif
(1)   80/       0 :                     	else
(1)   81/       0 :                     		if address < $
(1)   82/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   83/       0 :                     		else
(1)   84/       0 :                     			while address > $
(1)   85/       0 :                     				db 0
(1)   86/       0 :                     			endm
(1)   87/       0 :                     		endif
(1)   88/       0 :                     	endif
(1)   89/       0 :                         endm
(1)   90/       0 :                     
       7/       0 :                     		include	"system/shared.asm"	; Shared Genesis/32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/MARS shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 : =$C                 MAX_MODELS	equ 12		; MAX 3D Models
(1)   12/       0 : =$20                MAX_SUPERSPR	equ 32		; Number of Super Sprites
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Structs
(1)   16/       0 :                     ;
(1)   17/       0 :                     ; NOTE: SIZES MUST BE ALIGNED BY 4-bytes
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 : (MACRO)             		struct 0
(1)   20/       0 : =$0                 GLBL_LASTPC     set *
(1)   20/       0 :                                     dephase
(1)   20/       0 : =$0                 GLBL_LASTORG    set *
(1)   20/       0 :                                     phase 0
(1)   21/       0 :                     mdl_data	ds.l 1		; Model data pointer, if zero: no model
(1)   22/       4 :                     mdl_option	ds.l 1		; Model options: pixelvalue add
(1)   23/       8 :                     mdl_x_pos	ds.w 1		; X position $0800
(1)   24/       A :                     mdl_y_pos	ds.w 1		; Y position $0800
(1)   25/       C :                     mdl_z_pos	ds.w 1		; Z position $0800
(1)   26/       E :                     mdl_x_rot	ds.w 1		; X rotation $0800
(1)   27/      10 :                     mdl_y_rot	ds.w 1		; Y rotation $0800
(1)   28/      12 :                     mdl_z_rot	ds.w 1		; Z rotation $0800
(1)   29/      14 :                     mdl_frame	ds.w 1
(1)   30/      16 :                     mdl_flags	ds.w 1
(1)   31/      18 :                     sizeof_mdlobj	ds.l 0
(1)   32/      18 : (MACRO)             		finish
(1)   32/       0 :                                     !org GLBL_LASTORG
(1)   32/       0 :                                     phase GLBL_LASTPC
(1)   33/       0 :                     
(1)   34/       0 :                     ; "Super" sprite
(1)   35/       0 :                     ; RAM_MdDreq+Dreq_SuperSpr
(1)   36/       0 : (MACRO)             		struct 0
(1)   36/       0 : =$0                 GLBL_LASTPC     set *
(1)   36/       0 :                                     dephase
(1)   36/       0 : =$0                 GLBL_LASTORG    set *
(1)   36/       0 :                                     phase 0
(1)   37/       0 :                     marsspr_xs	ds.b 1		; Sprite X size
(1)   38/       1 :                     marsspr_ys	ds.b 1		; Sprite Y size
(1)   39/       2 :                     marsspr_xfrm	ds.b 1		; Animation X frame pos
(1)   40/       3 :                     marsspr_yfrm	ds.b 1		; Animation Y frame pos
(1)   41/       4 :                     marsspr_dwidth	ds.w 1		; Spritesheet WIDTH
(1)   42/       6 :                     marsspr_indx	ds.w 1		; Palette index base
(1)   43/       8 :                     marsspr_flags	ds.w 1		; Sprite flags: %VH
(1)   44/       A :                     marsspr_x	ds.w 1		; Screen X position
(1)   45/       C :                     marsspr_y	ds.w 1		; Screen Y position
(1)   46/       E :                     marsspr_fill	ds.w 1		; <-- 2 filler bytes
(1)   47/      10 :                     marsspr_data	ds.l 1		; Spritesheet DATA location in SH2 area (0 == end-of-spritelist)
(1)   48/      14 :                     marsspr_map	ds.l 1		; MAP data
(1)   49/      18 :                     sizeof_marsspr	ds.l 0
(1)   50/      18 : (MACRO)             		finish
(1)   50/       0 :                                     !org GLBL_LASTORG
(1)   50/       0 :                                     phase GLBL_LASTPC
(1)   51/       0 :                     
(1)   52/       0 :                     ; ------------------------------------------------
(1)   53/       0 :                     ; Structs for each pseudo-Screen, max $20 bytes
(1)   54/       0 :                     ;
(1)   55/       0 :                     ; Read these as: RAM_MdDreq+Dreq_BgExBuff
(1)   56/       0 :                     ; then read these as indirect(aX)
(1)   57/       0 :                     
(1)   58/       0 : (MACRO)             		struct 0
(1)   58/       0 : =$0                 GLBL_LASTPC     set *
(1)   58/       0 :                                     dephase
(1)   58/       0 : =$0                 GLBL_LASTORG    set *
(1)   58/       0 :                                     phase 0
(1)   59/       0 :                     scrlbg_flags	ds.w 1		; Flags
(1)   60/       2 :                     scrlbg_fill	ds.w 1
(1)   61/       4 :                     scrlbg_data	ds.l 1		; Screen mode 2: Source image (SH2's area)
(1)   62/       8 :                     scrlbg_x	ds.l 1		; X pos 0000.0000
(1)   63/       C :                     scrlbg_y	ds.l 1		; Y pos 0000.0000
(1)   64/      10 :                     scrlbg_w	ds.l 1		; Width
(1)   65/      14 :                     scrlbg_h	ds.l 1		; Height
(1)   66/      18 :                     sizeof_scrlbg	ds.l 0
(1)   67/      18 : (MACRO)             		finish
(1)   67/       0 :                                     !org GLBL_LASTORG
(1)   67/       0 :                                     phase GLBL_LASTPC
(1)   68/       0 :                     
(1)   69/       0 :                     ; ====================================================================
(1)   70/       0 :                     ; ----------------------------------------------------------------
(1)   71/       0 :                     ; DREQ RAM control, shared for both sides.
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; To read these labels...
(1)   74/       0 :                     ;
(1)   75/       0 :                     ; On the Genesis Side:
(1)   76/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   77/       0 :                     ;
(1)   78/       0 :                     ; On the 32X Side:
(1)   79/       0 :                     ; 	mov	#RAM_Mars_DreqRead+DREQ_LABEL,r1
(1)   80/       0 :                     ; ----------------------------------------------------------------
(1)   81/       0 :                     
(1)   82/       0 :                     ; *** List MUST be aligned in 8bytes (end with 0 or 8) ***
(1)   83/       0 :                     
(1)   84/       0 : (MACRO)             		struct 0
(1)   84/       0 : =$0                 GLBL_LASTPC     set *
(1)   84/       0 :                                     dephase
(1)   84/       0 : =$0                 GLBL_LASTORG    set *
(1)   84/       0 :                                     phase 0
(1)   85/       0 :                     Dreq_Palette	ds.w 256				; 256-color palette
(1)   86/     200 :                     Dreq_BgExBuff	ds.b $80				; 32X's FG scroll buffer (NOTE: manual size)
(1)   87/     280 :                     Dreq_Objects	ds.b sizeof_mdlobj*MAX_MODELS		; 3D Objects
(1)   88/     3A0 :                     Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_SUPERSPR	; Super sprites
(1)   89/     6A0 :                     sizeof_dreq	ds.l 0
(1)   90/     6A0 : (MACRO)             		finish
(1)   90/       0 :                                     !org GLBL_LASTORG
(1)   90/       0 :                                     phase GLBL_LASTPC
(1)   91/       0 :                     
DREQ RAM uses: 6A0
(1)   93/       0 :                     		message "DREQ RAM uses: \{sizeof_dreq}"
(1)   95/       0 :                     
       8/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
       9/       0 :                     		include	"system/md/const.asm"	; Genesis variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis side constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$10                MAX_MDDMATSK	equ 16			; MAX DMA BLAST entries
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Settings
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 : =$FFFF9000          MDRAM_START	equ $FFFF9000		; Start of Genesis working RAM
(1)   14/       0 : =$800               MAX_MDERAM	equ $800		; Maximum RAM for current Screen mode
(1)   15/       0 :                     
(1)   16/       0 :                     ; ====================================================================
(1)   17/       0 :                     ; ----------------------------------------------------------------
(1)   18/       0 :                     ; Input
(1)   19/       0 :                     ; ----------------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Controller
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; Controller buffer data (after calling System_Input)
(1)   26/       0 :                     ;
(1)   27/       0 :                     ; Type/Revision byte:
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; ID    |
(1)   30/       0 :                     ; $0D   | $00 - Original 3 button
(1)   31/       0 :                     ;       | $01 - 6 button version: XYZM
(1)   32/       0 :                     
(1)   33/       0 : (MACRO)             		struct 0
(1)   33/       0 : =$0                 GLBL_LASTPC     set *
(1)   33/       0 :                                     dephase
(1)   33/       0 : =$0                 GLBL_LASTORG    set *
(1)   33/       0 :                                     phase 0
(1)   34/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   35/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   36/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   37/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   38/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   39/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   40/       A :                     extr_3		ds.w 1
(1)   41/       C :                     extr_4		ds.w 1
(1)   42/       E :                     extr_5		ds.w 1
(1)   43/      10 :                     sizeof_input	ds.l 0
(1)   44/      10 : (MACRO)             		finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 :                     
(1)   46/       0 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   47/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   48/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   49/       0 :                     
(1)   50/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   51/       0 : =$1                 JoyUp		equ $0001
(1)   52/       0 : =$2                 JoyDown		equ $0002
(1)   53/       0 : =$4                 JoyLeft		equ $0004
(1)   54/       0 : =$8                 JoyRight	equ $0008
(1)   55/       0 : =$10                JoyB		equ $0010
(1)   56/       0 : =$20                JoyC		equ $0020
(1)   57/       0 : =$40                JoyA		equ $0040
(1)   58/       0 : =$80                JoyStart	equ $0080
(1)   59/       0 : =$100               JoyZ		equ $0100
(1)   60/       0 : =$200               JoyY		equ $0200
(1)   61/       0 : =$400               JoyX		equ $0400
(1)   62/       0 : =$800               JoyMode		equ $0800
(1)   63/       0 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   64/       0 : =$1                 bitJoyDown	equ 1
(1)   65/       0 : =$2                 bitJoyLeft	equ 2
(1)   66/       0 : =$3                 bitJoyRight	equ 3
(1)   67/       0 : =$4                 bitJoyB		equ 4
(1)   68/       0 : =$5                 bitJoyC		equ 5
(1)   69/       0 : =$6                 bitJoyA		equ 6
(1)   70/       0 : =$7                 bitJoyStart	equ 7
(1)   71/       0 : =$8                 bitJoyZ		equ 8
(1)   72/       0 : =$9                 bitJoyY		equ 9
(1)   73/       0 : =$A                 bitJoyX		equ 10
(1)   74/       0 : =$B                 bitJoyMode	equ 11
(1)   75/       0 :                     
(1)   76/       0 :                     ; Mega Mouse
(1)   77/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   78/       0 : =$1                 ClickR		equ $0001
(1)   79/       0 : =$2                 ClickL		equ $0002
(1)   80/       0 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   81/       0 : =$8                 ClickS		equ $0008	; (Untested)
(1)   82/       0 : =$0                 bitClickR	equ 0
(1)   83/       0 : =$1                 bitClickL	equ 1
(1)   84/       0 : =$2                 bitClickM	equ 2
(1)   85/       0 : =$3                 bitClickS	equ 3
(1)   86/       0 :                     
(1)   87/       0 :                     ; ====================================================================
(1)   88/       0 :                     ; ----------------------------------------------------------------
(1)   89/       0 :                     ; MD RAM
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)   92/       0 :                     ; From $FFFD00 to $FFFDFF is reserved for the MAIN-CPU's vectors
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 : (MACRO)             		struct MDRAM_START
(1)   95/       0 : =$0                 GLBL_LASTPC     set *
(1)   95/       0 :                                     dephase
(1)   95/       0 : =$0                 GLBL_LASTORG    set *
(1)   95/FFFFFFFFFFFF9000 :                                     phase MDRAM_START
(1)  105/FFFFFFFFFFFF9000 :                     RAM_ModeBuff	ds.b MAX_MDERAM			; Second pass: sizes are set
(1)  106/FFFFFFFFFFFF9800 :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  107/FFFFFFFFFFFF9820 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  108/FFFFFFFFFFFFA702 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  109/FFFFFFFFFFFFAB5E :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  110/FFFFFFFFFFFFAB62 :                     RAM_MdDreq	ds.b sizeof_dreq
(1)  111/FFFFFFFFFFFFB202 :                     sizeof_mdram	ds.l 0
(1)  113/FFFFFFFFFFFFB204 :                     
MD RAM: FF9000-FFB202
(1)  115/FFFFFFFFFFFFB204 :                     		message "MD RAM: \{(MDRAM_START)&$FFFFFF}-\{(sizeof_mdram)&$FFFFFF}"
(1)  117/FFFFFFFFFFFFB204 : (MACRO)             		finish
(1)  117/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  117/       0 :                                     phase GLBL_LASTPC
(1)  118/       0 :                     
(1)  119/       0 :                     
      10/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV bit is active.
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer section
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; Cache-thru OR | value
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers (Genesis side: sysmars_reg)
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer, first 240 are for the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite, $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   88/       0 : =$2                 shift		equ	$02		; Shift Control register
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      11/       0 :                     		include "code/global.asm"	; Global user variables on the Genesis
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global RAM variables on the Genesis side
(1)    4/       0 :                     ; (Score, Level, etc.)
(1)    5/       0 :                     ; ----------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 : (MACRO)             		struct RAM_MdGlobal
(1)    7/       0 : =$0                 GLBL_LASTPC     set *
(1)    7/       0 :                                     dephase
(1)    7/       0 : =$0                 GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFAB5E :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFAB5E :                     RAM_MdGlbl_Null	ds.l 1
(1)    9/FFFFFFFFFFFFAB62 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFAB62 : (MACRO)             		finish
(1)   10/FFFFFFFFFFFFAB5E :                                     !org GLBL_LASTORG
(1)   10/       0 :                                     phase GLBL_LASTPC
(1)   11/       0 :                     
(1)   12/       0 :                     
      12/       0 :                     		include	"system/head.asm"	; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; These labels still work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point: MUST point to $3F0
(1)   10/       8 : 0000 0820           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 0820           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 0820           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 0820           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 0820           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 0820           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 0820           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 0820           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 0820           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 0820           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 0820           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 0820           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 0820           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 0820           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 0820           		dc.l MD_ErrorEx
(1)   25/      44 : 0000 0820           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 0820           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 0820           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 0820           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 0820           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 0820           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 0820           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 0820           		dc.l MD_ErrorEx
(1)   33/      64 : 0000 0820           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 0820           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 0820           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF AB54           		dc.l RAM_MdMarsHInt		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 0820           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF AB4E           		dc.l RAM_MdMarsVInt		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 0820           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 0820           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 0820           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 0820           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 0820           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 0820           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 0820           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 0820           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 0820           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 0820           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 0820           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 0820           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 0820           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 0820           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 0820           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2022.???"
                    3230 3232 2E3F 3F3F 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto MARSIANO                               "
                    204D 4152 5349 414E 
                    4F20 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO                                "
                    4D41 5253 4941 4E4F 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 0013 58FC           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ;
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently active.
(1)   94/     200 :                     ;
(1)   95/     200 :                     ; Disable ALL interrupts if you are using the RV bit
(1)   96/     200 :                     ; ----------------------------------------------------------------
(1)   97/     200 :                     
(1)   98/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   99/     206 : 4EF9 0088 0820      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)  100/     20C : 4EF9 0088 0820      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  101/     212 : 4EF9 0088 0820      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  102/     218 : 4EF9 0088 0820      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  103/     21E : 4EF9 0088 0820      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  104/     224 : 4EF9 0088 0820      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  105/     22A : 4EF9 0088 0820      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  106/     230 : 4EF9 0088 0820      		jmp	($880000|MD_Trace).l			; Trace
(1)  107/     236 : 4EF9 0088 0820      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  108/     23C : 4EF9 0088 0820      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  109/     242 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  110/     248 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  111/     24E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  112/     254 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  113/     25A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  114/     260 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  115/     266 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  116/     26C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  117/     272 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  118/     278 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  119/     27E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  120/     284 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  121/     28A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  122/     290 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     296 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     29C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  125/     2A2 : 4EF9 FFFF AB54      		jmp	(RAM_MdMarsHInt).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  126/     2A8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  127/     2AE : 4EF9 FFFF AB4E      		jmp	(RAM_MdMarsVInt).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  128/     2B4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2BA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2C6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2CC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D2 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2D8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2DE : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2E4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2EA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2F6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     2FC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     302 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     308 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     30E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     314 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     31A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     320 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     326 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     32C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     332 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     338 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     33E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     344 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     34A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     350 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     356 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     35C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     362 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     368 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     36E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     374 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  161/     37A :                     
(1)  162/     37A :                     ; ----------------------------------------------------------------
(1)  163/     37A :                     
(1)  164/     37A :                     		align $3C0
(1)  165/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  166/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  167/     3D4 : 0004 13E0           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  168/     3D8 : 0000 0000           		dc.l 0					; Zero.
(1)  169/     3DC : 0000 6E50           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  170/     3E0 : 0600 0CD0           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map area)
(1)  171/     3E4 : 0600 1168           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map area)
(1)  172/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  173/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  174/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  175/     800 :                     
(1)  176/     800 :                     ; ====================================================================
(1)  177/     800 :                     ; ----------------------------------------------------------------
(1)  178/     800 :                     ; Entry point, this must be located at $800
(1)  179/     800 :                     ;
(1)  180/     800 :                     ; At this point, the initialization
(1)  181/     800 :                     ; returns the following bits:
(1)  182/     800 :                     ;
(1)  183/     800 :                     ; d0: %h0000000 rsc000ti
(1)  184/     800 :                     ; 	h - Cold start / Hot Start
(1)  185/     800 :                     ; 	r - SDRAM Self Check pass or error
(1)  186/     800 :                     ; 	s - Security check pass or error
(1)  187/     800 :                     ; 	c - Checksum pass or error
(1)  188/     800 :                     ; 	t - TV mode pass or error
(1)  189/     800 :                     ; 	i - MARS ID pass or error
(1)  190/     800 :                     ;
(1)  191/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  192/     800 :                     ; 	m - MARS TV mode
(1)  193/     800 :                     ; 	j - Country: Japan / Overseas
(1)  194/     800 :                     ; 	d - MD TV mode
(1)  195/     800 :                     ; 	k - DISK connected: Yes / No
(1)  196/     800 :                     ; 	v - Version
(1)  197/     800 :                     ;
(1)  198/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  199/     800 :                     ; 	cc: Test passed
(1)  200/     800 :                     ; 	cs: Test failed**
(1)  201/     800 :                     ;
(1)  202/     800 :                     ; ** HARDWARE BUG: This may still trigger if using
(1)  203/     800 :                     ; DREQ, DMA or Watchdog, and/or pressing RESET so many times.
(1)  204/     800 :                     ; (Found this on VRDX)
(1)  205/     800 :                     ; Workaround: after jumping to the "No 32X detected" loop,
(1)  206/     800 :                     ; test the checksum bit, and if it passes: Init as usual.
(1)  207/     800 :                     ; ----------------------------------------------------------------
(1)  208/     800 :                     
(1)  209/     800 :                     MARS_Entry:
(1)  210/     800 : 6436                		bcc	MD_Init				; Carry clear: pass
(1)  211/     802 :                     
(1)  212/     802 :                     ; ====================================================================
(1)  213/     802 :                     ; ----------------------------------------------------------------
(1)  214/     802 :                     ; If 32X is not detected...
(1)  215/     802 :                     ;
(1)  216/     802 :                     ; This only works in emulators, though.
(1)  217/     802 :                     ; ----------------------------------------------------------------
(1)  218/     802 :                     
(1)  219/     802 :                     .no_mars:
(1)  220/     802 : 0800 0005           		btst	#5,d0				; If for some reason we got here...
(1)  221/     806 : 6730                		beq.s	MD_Init				;
(1)  222/     808 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  223/     80C : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  224/     816 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l		; Write blue
(1)  225/     81E : 60FE                		bra.s	*				; Infinite loop.
(1)  226/     820 :                     
(1)  227/     820 :                     ; ====================================================================
(1)  228/     820 :                     ; ----------------------------------------------------------------
(1)  229/     820 :                     ; 68k's Error handlers
(1)  230/     820 :                     ; ----------------------------------------------------------------
(1)  231/     820 :                     
(1)  232/     820 :                     MD_ErrBus:		; Bus error
(1)  233/     820 :                     MD_ErrAddr:		; Address error
(1)  234/     820 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  235/     820 :                     MD_ErrZDiv:		; Divide by 0
(1)  236/     820 :                     MD_ErrChk:		; CHK Instruction
(1)  237/     820 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  238/     820 :                     MD_ErrPrivl:		; Privilege violation
(1)  239/     820 :                     MD_Trace:		; Trace
(1)  240/     820 :                     MD_Line1010:		; Line 1010 Emulator
(1)  241/     820 :                     MD_Line1111:		; Line 1111 Emulator
(1)  242/     820 :                     MD_ErrorEx:		; Error exception
(1)  243/     820 :                     MD_ErrorTrap:
(1)  244/     820 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  245/     824 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  246/     82E : 33FC 000E 00C0 0000 		move.w	#$000E,(vdp_data).l		; Write red
(1)  247/     836 : 60FE                		bra.s	*
(1)  248/     838 :                     
(1)  249/     838 :                     ; ====================================================================
(1)  250/     838 :                     ; ----------------------------------------------------------------
(1)  251/     838 :                     ; Init
(1)  252/     838 :                     ; ----------------------------------------------------------------
(1)  253/     838 :                     
(1)  254/     838 :                     MD_Init:
(1)  255/     838 : 46FC 2700           		move.w	#$2700,sr
(1)  256/     83C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l
(1)  257/     842 : 0800 000F           		btst	#15,d0			; TODO: this seems to fail...
(1)  258/     846 : 661A                		bne.s	.hotstart
(1)  259/     848 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  260/     84E : 0CAD 4D5F 4F4B 0020 .wm:		cmp.l	#"M_OK",comm0(a5)	; SH2 Master active?
(1)  261/     856 : 66F6                		bne.s	.wm
(1)  262/     858 : 0CAD 535F 4F4B 0024 .ws:		cmp.l	#"S_OK",comm4(a5)	; SH2 Slave active?
(1)  263/     860 : 66F6                		bne.s	.ws
(1)  264/     862 :                     .hotstart:
(1)  265/     862 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Cleanup our RAM
(1)  266/     868 : 223C FFFF B202      		move.l	#sizeof_mdram,d1
(1)  267/     86E : 7000                		moveq	#0,d0
(1)  268/     870 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  269/     872 : B1C1                		cmp.l	d1,a0
(1)  270/     874 : 65FA                		bcs.s	.loop_ram
(1)  271/     876 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clear registers using zeros from RAM
(1)  272/     87E : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  273/     884 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  274/     88A : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  275/     88C : 0807 0001           		btst	#1,d7
(1)  276/     890 : 66F8                		bne.s	.wait_dma
(1)  277/     892 : 2CBC 8004 8104      		move.l	#$80048104,(a6)		; Default top VDP regs
(1)  278/     898 : 7000                		moveq	#0,d0			; Flag to unlock both SH2
(1)  279/     89A : 2B40 0020           		move.l	d0,comm0(a5)
(1)  280/     89E : 2B40 0024           		move.l	d0,comm4(a5)
(1)  281/     8A2 : 2B40 0028           		move.l	d0,comm8(a5)
(1)  282/     8A6 :                     ; 		move.l	d0,comm12(a5)
(1)  283/     8A6 :                     
      13/     8A6 :                     
      14/     8A6 :                     ; ====================================================================
      15/     8A6 :                     ; ----------------------------------------------------------------
      16/     8A6 :                     ; Main
      17/     8A6 :                     ; ----------------------------------------------------------------
      18/     8A6 :                     
      19/     8A6 : 41F9 0088 08DA      		lea	(Md_TopCode+$880000),a0		; Transfer RAM-shared code
      20/     8AC : 43F9 00FF 0000      		lea	($FF0000),a1
      21/     8B2 : 303C 1679           		move.w	#((Md_TopCode_e-Md_TopCode))-1,d0
      22/     8B6 :                     .copyme:
      23/     8B6 : 12D8                		move.b	(a0)+,(a1)+
      24/     8B8 : 51C8 FFFC           		dbf	d0,.copyme
      25/     8BC : 4EB9 00FF 0026      		jsr	(Sound_init).l
      26/     8C2 : 4EB9 00FF 0254      		jsr	(Video_init).l
      27/     8C8 : 4EB9 00FF 1140      		jsr	(System_Init).l
      28/     8CE : 203C 0000 1F54      		move.l	#RamCode_Boot,d0
      29/     8D4 : 4EF9 00FF 129A      		jmp	(System_JumpRamCode).l
      30/     8DA :                     
      31/     8DA :                     ; ====================================================================
      32/     8DA :                     ; --------------------------------------------------------
      33/     8DA :                     ; All shared routines at the top of RAM
      34/     8DA :                     ; --------------------------------------------------------
      35/     8DA :                     
      36/     8DA :                     Md_TopCode:
      37/  FF0000 :                     		phase $FF0000
      38/  FF0000 :                     minfo_ram_s:
      39/  FF0000 :                     		include	"system/md/sound.asm"
(1)    1/  FF0000 :                     ; ====================================================================
(1)    2/  FF0000 :                     ; ----------------------------------------------------------------
(1)    3/  FF0000 :                     ; Genesis sound (GEMA Sound driver)
(1)    4/  FF0000 :                     ; ----------------------------------------------------------------
(1)    5/  FF0000 :                     
(1)    6/  FF0000 :                     ; ====================================================================
(1)    7/  FF0000 :                     ; ----------------------------------------------------------------
(1)    8/  FF0000 :                     ; Sound 68k RAM
(1)    9/  FF0000 :                     ; ----------------------------------------------------------------
(1)   10/  FF0000 :                     
(1)   11/  FF0000 : (MACRO)             		struct RAM_MdSound
(1)   11/  FF0000 : =$FF0000            GLBL_LASTPC     set *
(1)   11/     8DA :                                     dephase
(1)   11/     8DA : =$8DA               GLBL_LASTORG    set *
(1)   11/FFFFFFFFFFFF9800 :                                     phase RAM_MDSOUND
(1)   12/FFFFFFFFFFFF9800 :                     RAM_SndSaveReg	ds.l 8			; Backup registers
(1)   13/FFFFFFFFFFFF9820 :                     sizeof_mdsnd	ds.l 0
(1)   14/FFFFFFFFFFFF9822 : (MACRO)             		finish
(1)   14/FFFFFFFFFFFF9800 :                                     !org GLBL_LASTORG
(1)   14/  FF0000 :                                     phase GLBL_LASTPC
(1)   15/  FF0000 :                     
(1)   16/  FF0000 :                     ; ====================================================================
(1)   17/  FF0000 :                     ; --------------------------------------------------------
(1)   18/  FF0000 :                     ; Initialize Sound
(1)   19/  FF0000 :                     ;
(1)   20/  FF0000 :                     ; Uses:
(1)   21/  FF0000 :                     ; a0-a1,d0-d1
(1)   22/  FF0000 :                     ; --------------------------------------------------------
(1)   23/  FF0000 :                     
(1)   24/  FF0000 :                     		align $80
(1)   25/  FF0026 :                     Sound_Init:
(1)   26/  FF0026 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 stop
(1)   27/  FF002E : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Z80 reset
(1)   28/  FF0036 :                     .wait:
(1)   29/  FF0036 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   30/  FF003E : 66F6                		bne.s	.wait
(1)   31/  FF0040 : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 area first
(1)   32/  FF0046 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   33/  FF004A : 7200                		moveq	#0,d1
(1)   34/  FF004C :                     .cleanup:
(1)   35/  FF004C : 10C1                		move.b	d1,(a0)+
(1)   36/  FF004E : 51C8 FFFC           		dbf	d0,.cleanup
(1)   37/  FF0052 : 41F9 0088 2F26      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   38/  FF0058 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   39/  FF005E : 303C 1E65           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   40/  FF0062 :                     .copy:
(1)   41/  FF0062 : 12D8                		move.b	(a0)+,(a1)+
(1)   42/  FF0064 : 51C8 FFFC           		dbf	d0,.copy
(1)   43/  FF0068 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l
(1)   44/  FF0070 : 4E71                		nop
(1)   45/  FF0072 : 4E71                		nop
(1)   46/  FF0074 : 4E71                		nop
(1)   47/  FF0076 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   48/  FF007E : 4E75                		rts
(1)   49/  FF0080 :                     
(1)   50/  FF0080 :                     ; ====================================================================
(1)   51/  FF0080 :                     ; ----------------------------------------------------------------
(1)   52/  FF0080 :                     ; Subroutines
(1)   53/  FF0080 :                     ; ----------------------------------------------------------------
(1)   54/  FF0080 :                     
(1)   55/  FF0080 :                     ; ------------------------------------------------
(1)   56/  FF0080 :                     ; Lock Z80, get bus
(1)   57/  FF0080 :                     ; ------------------------------------------------
(1)   58/  FF0080 :                     
(1)   59/  FF0080 :                     sndLockZ80:
(1)   60/  FF0080 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)   61/  FF0088 :                     .wait:
(1)   62/  FF0088 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   63/  FF0090 : 66F6                		bne.s	.wait
(1)   64/  FF0092 : 4E75                		rts
(1)   65/  FF0094 :                     
(1)   66/  FF0094 :                     ; ------------------------------------------------
(1)   67/  FF0094 :                     ; Unlock Z80, return bus
(1)   68/  FF0094 :                     ; ------------------------------------------------
(1)   69/  FF0094 :                     
(1)   70/  FF0094 :                     sndUnlockZ80:
(1)   71/  FF0094 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   72/  FF009C : 4E75                		rts
(1)   73/  FF009E :                     
(1)   74/  FF009E :                     ; ------------------------------------------------
(1)   75/  FF009E :                     ; 68k-to-z80 Sound request
(1)   76/  FF009E :                     ; enter/exit routines
(1)   77/  FF009E :                     ;
(1)   78/  FF009E :                     ; d6 - commFifo index
(1)   79/  FF009E :                     ; ------------------------------------------------
(1)   80/  FF009E :                     
(1)   81/  FF009E :                     sndReq_Enter:
(1)   82/  FF009E : 48F9 60C0 FFFF 9800 		movem.l	d6-d7/a5-a6,(RAM_SndSaveReg).l	; <-- stack didn't work this time
(1)   83/  FF00A6 : 7C00                		moveq	#0,d6
(1)   84/  FF00A8 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)   85/  FF00B0 : 40C6                		move.w	sr,d6
(1)   86/  FF00B2 : 4846                		swap	d6
(1)   87/  FF00B4 : 007C 0700           		or.w	#$0700,sr			; disable ints
(1)   88/  FF00B8 : 4BF9 00A0 001F      		lea	(z80_cpu+commZWrite),a5		; a5 - commZWrite
(1)   89/  FF00BE : 4DF9 00A0 1E00      		lea	(z80_cpu+commZfifo),a6		; a6 - fifo command list
(1)   90/  FF00C4 :                     .wait:
(1)   91/  FF00C4 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)   92/  FF00CC : 66F6                		bne.s	.wait
(1)   93/  FF00CE : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)   94/  FF00D0 : 4886                		ext.w	d6				; extend to 16 bits
(1)   95/  FF00D2 : 4E75                		rts
(1)   96/  FF00D4 :                     ; JUMP ONLY
(1)   97/  FF00D4 :                     sndReq_Exit:
(1)   98/  FF00D4 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   99/  FF00DC : 4846                		swap	d6
(1)  100/  FF00DE : 46C6                		move.w	d6,sr
(1)  101/  FF00E0 : 4CF9 60C0 FFFF 9800 		movem.l	(RAM_SndSaveReg).l,d6-d7/a5-a6
(1)  102/  FF00E8 : 4E75                		rts
(1)  103/  FF00EA :                     
(1)  104/  FF00EA :                     ; ------------------------------------------------
(1)  105/  FF00EA :                     ; Send request id and arguments
(1)  106/  FF00EA :                     ;
(1)  107/  FF00EA :                     ; Input:
(1)  108/  FF00EA :                     ; d7 - byte to write
(1)  109/  FF00EA :                     ; d6 - index pointer
(1)  110/  FF00EA :                     ; a5 - commZWrite, update index
(1)  111/  FF00EA :                     ; a6 - commZfifo command list
(1)  112/  FF00EA :                     ;
(1)  113/  FF00EA :                     ; *** CALL sndReq_Enter FIRST ***
(1)  114/  FF00EA :                     ; ------------------------------------------------
(1)  115/  FF00EA :                     
(1)  116/  FF00EA :                     sndReq_scmd:
(1)  117/  FF00EA : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  118/  FF00F0 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  119/  FF00F2 : 0206 003F           		andi.b	#$3F,d6
(1)  120/  FF00F6 : 600C                		bra.s	sndReq_sbyte
(1)  121/  FF00F8 :                     sndReq_slong:
(1)  122/  FF00F8 : 610A                		bsr	sndReq_sbyte
(1)  123/  FF00FA : E09F                		ror.l	#8,d7
(1)  124/  FF00FC :                     sndReq_saddr:
(1)  125/  FF00FC : 6106                		bsr	sndReq_sbyte
(1)  126/  FF00FE : E09F                		ror.l	#8,d7
(1)  127/  FF0100 :                     sndReq_sword:
(1)  128/  FF0100 : 6102                		bsr	sndReq_sbyte
(1)  129/  FF0102 : E09F                		ror.l	#8,d7
(1)  130/  FF0104 :                     sndReq_sbyte:
(1)  131/  FF0104 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  132/  FF0108 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  133/  FF010A : 0206 003F           		andi.b	#$3F,d6
(1)  134/  FF010E : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  135/  FF0110 : 4E75                		rts
(1)  136/  FF0112 :                     
(1)  137/  FF0112 :                     ; ------------------------------------------------
(1)  138/  FF0112 :                     ; Make CMD request
(1)  139/  FF0112 :                     ;
(1)  140/  FF0112 :                     ; d6 - command
(1)  141/  FF0112 :                     ; ------------------------------------------------
(1)  142/  FF0112 :                     
(1)  143/  FF0112 :                     sndReqCmd:
(1)  144/  FF0112 : 1E39 00A1 512E      .wait_in:	move.b	(sysmars_reg+comm14),d7
(1)  145/  FF0118 : CE7C 00F0           		and.w	#%11110000,d7
(1)  146/  FF011C : 66F4                		bne.s	.wait_in
(1)  147/  FF011E : CC7C 000F           		and.w	#%00001111,d6
(1)  148/  FF0122 : 8E06                		or.b	d6,d7
(1)  149/  FF0124 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  150/  FF012A : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  151/  FF0130 : CE7C 000F           		and.w	#%00001111,d7
(1)  152/  FF0134 : BE06                		cmp.b	d6,d7
(1)  153/  FF0136 : 66DA                		bne.s	.wait_in
(1)  154/  FF0138 : 08F9 0007 00A1 512E 		bset	#7,(sysmars_reg+comm14).l
(1)  155/  FF0140 : 08F9 0001 00A1 5103 		bset	#1,(sysmars_reg+standby).l	; Request Slave CMD
(1)  156/  FF0148 :                     ; .wait_cmd:	btst	#1,(sysmars_reg+standby).l
(1)  157/  FF0148 :                     ; 		bne.s	.wait_cmd
(1)  158/  FF0148 : 1E39 00A1 512E      .wait_out:	move.b	(sysmars_reg+comm14),d7
(1)  159/  FF014E : CE7C 00F0           		and.w	#%11110000,d7
(1)  160/  FF0152 : 66F4                		bne.s	.wait_out
(1)  161/  FF0154 : 4E75                		rts
(1)  162/  FF0156 :                     
(1)  163/  FF0156 :                     ; --------------------------------------------------------
(1)  164/  FF0156 :                     ; Sound_DMA_Pause
(1)  165/  FF0156 :                     ;
(1)  166/  FF0156 :                     ; Call this BEFORE making any DMA task
(1)  167/  FF0156 :                     ;
(1)  168/  FF0156 :                     ; Uses:
(1)  169/  FF0156 :                     ; d6,d7
(1)  170/  FF0156 :                     ; --------------------------------------------------------
(1)  171/  FF0156 :                     
(1)  172/  FF0156 :                     Sound_DMA_Pause:
(1)  173/  FF0156 : 4847                		swap	d7
(1)  174/  FF0158 : 4846                		swap	d6
(1)  175/  FF015A :                     .retry:
(1)  176/  FF015A : 6100 FF24           		bsr	sndLockZ80
(1)  177/  FF015E : 1E39 00A0 001D      		move.b	(z80_cpu+commZRomRd),d7		; Get mid-read bit
(1)  178/  FF0164 : 6100 FF2E           		bsr	sndUnlockZ80
(1)  179/  FF0168 : 4A07                		tst.b	d7
(1)  180/  FF016A : 6708                		beq.s	.safe
(1)  181/  FF016C : 7E44                		moveq	#68,d7
(1)  182/  FF016E : 51CF FFFE           		dbf	d7,*
(1)  183/  FF0172 : 60E6                		bra.s	.retry
(1)  184/  FF0174 :                     .safe:
(1)  185/  FF0174 : 6100 FF0A           		bsr	sndLockZ80
(1)  186/  FF0178 : 13FC 0001 00A0 001C 		move.b	#1,(z80_cpu+commZRomBlk)	; Block flag for Z80
(1)  187/  FF0180 : 6100 FF12           		bsr	sndUnlockZ80
(1)  188/  FF0184 : 3C3C 0002           		move.w	#2,d6
(1)  189/  FF0188 : 6188                		bsr	sndReqCmd
(1)  190/  FF018A : 4846                		swap	d6
(1)  191/  FF018C : 4847                		swap	d7
(1)  192/  FF018E : 4E75                		rts
(1)  193/  FF0190 :                     
(1)  194/  FF0190 :                     ; --------------------------------------------------------
(1)  195/  FF0190 :                     ; Sound_DMA_Resume
(1)  196/  FF0190 :                     ;
(1)  197/  FF0190 :                     ; Call this AFTER finishing DMA
(1)  198/  FF0190 :                     ; --------------------------------------------------------
(1)  199/  FF0190 :                     
(1)  200/  FF0190 :                     Sound_DMA_Resume:
(1)  201/  FF0190 : 4847                		swap	d7
(1)  202/  FF0192 : 4846                		swap	d6
(1)  203/  FF0194 : 6100 FEEA           		bsr	sndLockZ80
(1)  204/  FF0198 : 13FC 0000 00A0 001C 		move.b	#0,(z80_cpu+commZRomBlk)
(1)  205/  FF01A0 : 6100 FEF2           		bsr	sndUnlockZ80
(1)  206/  FF01A4 : 3C3C 0003           		move.w	#3,d6
(1)  207/  FF01A8 : 6100 FF68           		bsr	sndReqCmd
(1)  208/  FF01AC : 4846                		swap	d6
(1)  209/  FF01AE : 4847                		swap	d7
(1)  210/  FF01B0 : 4E75                		rts
(1)  211/  FF01B2 :                     
(1)  212/  FF01B2 :                     ; --------------------------------------------------------
(1)  213/  FF01B2 :                     ; SoundReq_SetTrack
(1)  214/  FF01B2 :                     ;
(1)  215/  FF01B2 :                     ; a0 | Pointer to Pattern, Blocks and Instruments list
(1)  216/  FF01B2 :                     ;      in this order:
(1)  217/  FF01B2 :                     ;  	dc.l pattern_data
(1)  218/  FF01B2 :                     ;  	dc.l block_data
(1)  219/  FF01B2 :                     ;  	dc.l instrument_data
(1)  220/  FF01B2 :                     ;  	(Pointers should be in the
(1)  221/  FF01B2 :                     ;  	$880000/$900000 areas)
(1)  222/  FF01B2 :                     ;
(1)  223/  FF01B2 :                     ; d0 | BYTE - Track slot
(1)  224/  FF01B2 :                     ; d1 | BYTE - Ticks
(1)  225/  FF01B2 :                     ; d2 | BYTE - Start from this block position
(1)  226/  FF01B2 :                     ; d3 | BYTE - Flags: %00004321
(1)  227/  FF01B2 :                     ; 	      4321 - Use global tempos: 1,2,3 or 4
(1)  228/  FF01B2 :                     ;
(1)  229/  FF01B2 :                     ; Breaks:
(1)  230/  FF01B2 :                     ; d6-d7,a5-a6
(1)  231/  FF01B2 :                     ; --------------------------------------------------------
(1)  232/  FF01B2 :                     
(1)  233/  FF01B2 :                     Sound_TrkPlay:
(1)  234/  FF01B2 : 6100 FEEA           		bsr	sndReq_Enter
(1)  235/  FF01B6 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  236/  FF01BA : 6100 FF2E           		bsr	sndReq_scmd
(1)  237/  FF01BE : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  238/  FF01C0 : 6100 FF42           		bsr	sndReq_sbyte
(1)  239/  FF01C4 : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  240/  FF01C6 : 6100 FF3C           		bsr	sndReq_sbyte
(1)  241/  FF01CA : 1E02                		move.b	d2,d7		; d2 - Start block
(1)  242/  FF01CC : 6100 FF36           		bsr	sndReq_sbyte
(1)  243/  FF01D0 : 1E03                		move.b	d3,d7		; d3 - Flags (%321 enable these timers)
(1)  244/  FF01D2 : CE7C 0007           		and.w	#%111,d7
(1)  245/  FF01D6 : 6100 FF2C           		bsr	sndReq_sbyte
(1)  246/  FF01DA : 2E18                		move.l	(a0)+,d7	; Patt data point
(1)  247/  FF01DC : 6100 FF1E           		bsr	sndReq_saddr
(1)  248/  FF01E0 : 2E18                		move.l	(a0)+,d7	; Block data point
(1)  249/  FF01E2 : 6100 FF18           		bsr	sndReq_saddr
(1)  250/  FF01E6 : 2E18                		move.l	(a0)+,d7	; Intrument data
(1)  251/  FF01E8 : 6100 FF12           		bsr	sndReq_saddr
(1)  252/  FF01EC : 6000 FEE6           		bra 	sndReq_Exit
(1)  253/  FF01F0 :                     
(1)  254/  FF01F0 :                     ; --------------------------------------------------------
(1)  255/  FF01F0 :                     ; Sound_TrkStop (and pause)
(1)  256/  FF01F0 :                     ;
(1)  257/  FF01F0 :                     ; Stops OR Pauses current track
(1)  258/  FF01F0 :                     ;
(1)  259/  FF01F0 :                     ; Input:
(1)  260/  FF01F0 :                     ; d0 | BYTE - Track slot
(1)  261/  FF01F0 :                     ;
(1)  262/  FF01F0 :                     ; Breaks:
(1)  263/  FF01F0 :                     ; d6-d7,a5-a6
(1)  264/  FF01F0 :                     ; --------------------------------------------------------
(1)  265/  FF01F0 :                     
(1)  266/  FF01F0 :                     Sound_TrkStop:
(1)  267/  FF01F0 : 6100 FEAC           		bsr	sndReq_Enter
(1)  268/  FF01F4 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  269/  FF01F8 : 6100 FEF0           		bsr	sndReq_scmd
(1)  270/  FF01FC : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  271/  FF01FE : 6100 FF04           		bsr	sndReq_sbyte
(1)  272/  FF0202 : 6000 FED0           		bra 	sndReq_Exit
(1)  273/  FF0206 :                     
(1)  274/  FF0206 :                     ; --------------------------------------------------------
(1)  275/  FF0206 :                     ; Sound_TrkResume
(1)  276/  FF0206 :                     ;
(1)  277/  FF0206 :                     ; Resumes Stopped/Paused track
(1)  278/  FF0206 :                     ;
(1)  279/  FF0206 :                     ; Input:
(1)  280/  FF0206 :                     ; d0 | BYTE - Track slot
(1)  281/  FF0206 :                     ;
(1)  282/  FF0206 :                     ; Breaks:
(1)  283/  FF0206 :                     ; d6-d7,a5-a6
(1)  284/  FF0206 :                     ; --------------------------------------------------------
(1)  285/  FF0206 :                     
(1)  286/  FF0206 :                     Sound_TrkResume:
(1)  287/  FF0206 : 6100 FE96           		bsr	sndReq_Enter
(1)  288/  FF020A : 3E3C 0002           		move.w	#$02,d7		; Command $01
(1)  289/  FF020E : 6100 FEDA           		bsr	sndReq_scmd
(1)  290/  FF0212 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  291/  FF0214 : 6100 FEEE           		bsr	sndReq_sbyte
(1)  292/  FF0218 : 6000 FEBA           		bra 	sndReq_Exit
(1)  293/  FF021C :                     
(1)  294/  FF021C :                     ; --------------------------------------------------------
(1)  295/  FF021C :                     ; Sound_TrkTicks
(1)  296/  FF021C :                     ;
(1)  297/  FF021C :                     ; Set ticks for the current track
(1)  298/  FF021C :                     ; (NTSC: 150/tick, PAL: 120/tick)
(1)  299/  FF021C :                     ;
(1)  300/  FF021C :                     ; Input:
(1)  301/  FF021C :                     ; d0 | BYTE - Track slot
(1)  302/  FF021C :                     ; d1 | BYTE - Ticks
(1)  303/  FF021C :                     ;
(1)  304/  FF021C :                     ; Breaks:
(1)  305/  FF021C :                     ; d6-d7,a5-a6
(1)  306/  FF021C :                     ; --------------------------------------------------------
(1)  307/  FF021C :                     
(1)  308/  FF021C :                     Sound_TrkTicks:
(1)  309/  FF021C : 6100 FE80           		bsr	sndReq_Enter
(1)  310/  FF0220 : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  311/  FF0224 : 6100 FEC4           		bsr	sndReq_scmd
(1)  312/  FF0228 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  313/  FF022A : 6100 FED8           		bsr	sndReq_sbyte
(1)  314/  FF022E : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  315/  FF0230 : 6100 FED2           		bsr	sndReq_sbyte
(1)  316/  FF0234 : 6000 FE9E           		bra 	sndReq_Exit
(1)  317/  FF0238 :                     
(1)  318/  FF0238 :                     ; --------------------------------------------------------
(1)  319/  FF0238 :                     ; Sound_GlbBeats
(1)  320/  FF0238 :                     ;
(1)  321/  FF0238 :                     ; Set GLOBAL Sub-beats (not tempo...)
(1)  322/  FF0238 :                     ;
(1)  323/  FF0238 :                     ; Input:
(1)  324/  FF0238 :                     ; d0 | BYTE - Track slot
(1)  325/  FF0238 :                     ; d1 | WORD - Ticks
(1)  326/  FF0238 :                     ;
(1)  327/  FF0238 :                     ; Breaks:
(1)  328/  FF0238 :                     ; d6-d7,a5-a6
(1)  329/  FF0238 :                     ; --------------------------------------------------------
(1)  330/  FF0238 :                     
(1)  331/  FF0238 :                     Sound_GlbBeats:
(1)  332/  FF0238 : 6100 FE64           		bsr	sndReq_Enter
(1)  333/  FF023C : 3E3C 0010           		move.w	#$10,d7		; Command $10
(1)  334/  FF0240 : 6100 FEA8           		bsr	sndReq_scmd
(1)  335/  FF0244 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  336/  FF0246 : 6100 FEBC           		bsr	sndReq_sbyte
(1)  337/  FF024A : 3E01                		move.w	d1,d7		; d1 - Subbeats
(1)  338/  FF024C : 6100 FEB2           		bsr	sndReq_sword
(1)  339/  FF0250 : 6000 FE82           		bra 	sndReq_Exit
(1)  340/  FF0254 :                     
(1)  341/  FF0254 :                     ; --------------------------------------------------------
(1)  342/  FF0254 :                     
(1)  343/  FF0254 :                     ; Z80 code is located on the $880000 area
(1)  344/  FF0254 :                     
(1)  345/  FF0254 :                     
      40/  FF0254 :                     		include	"system/md/video.asm"
(1)    1/  FF0254 :                     ; ====================================================================
(1)    2/  FF0254 :                     ; ----------------------------------------------------------------
(1)    3/  FF0254 :                     ; Genesis Video
(1)    4/  FF0254 :                     ; ----------------------------------------------------------------
(1)    5/  FF0254 :                     
(1)    6/  FF0254 : =$FFFFFFFFFF..      RAM_BgBufferM	equ	RAM_MdDreq+Dreq_BgExBuff	; Relocate MARS layer control
(1)    7/  FF0254 :                     
(1)    8/  FF0254 :                     ; ====================================================================
(1)    9/  FF0254 :                     ; --------------------------------------------------------
(1)   10/  FF0254 :                     ; Settings
(1)   11/  FF0254 :                     ; --------------------------------------------------------
(1)   12/  FF0254 :                     
(1)   13/  FF0254 : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   14/  FF0254 : =$580               varPrintVram	equ $580	; Location of the PRINT text graphics
(1)   15/  FF0254 : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/  FF0254 :                     
(1)   17/  FF0254 :                     ; --------------------------------------------------------
(1)   18/  FF0254 :                     ; Variables
(1)   19/  FF0254 :                     ; --------------------------------------------------------
(1)   20/  FF0254 :                     
(1)   21/  FF0254 :                     ; VDP Register $80
(1)   22/  FF0254 : =$2                 HVStop		equ $02
(1)   23/  FF0254 : =$10                HintEnbl	equ $10
(1)   24/  FF0254 : =$1                 bitHVStop	equ 1
(1)   25/  FF0254 : =$4                 bitHintEnbl	equ 4
(1)   26/  FF0254 :                     
(1)   27/  FF0254 :                     ; VDP Register $81
(1)   28/  FF0254 : =$40                DispEnbl 	equ $40
(1)   29/  FF0254 : =$20                VintEnbl 	equ $20
(1)   30/  FF0254 : =$10                DmaEnbl		equ $10
(1)   31/  FF0254 : =$6                 bitDispEnbl	equ 6
(1)   32/  FF0254 : =$5                 bitVintEnbl	equ 5
(1)   33/  FF0254 : =$4                 bitDmaEnbl	equ 4
(1)   34/  FF0254 : =$3                 bitV30		equ 3
(1)   35/  FF0254 :                     
(1)   36/  FF0254 :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/  FF0254 : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   38/  FF0254 : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   39/  FF0254 : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   40/  FF0254 : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   41/  FF0254 : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   42/  FF0254 : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/  FF0254 : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   44/  FF0254 : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   45/  FF0254 : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   46/  FF0254 : =$0                 bitPal		equ 0
(1)   47/  FF0254 :                     
(1)   48/  FF0254 :                     ; md_bg_flags
(1)   49/  FF0254 : =$0                 bitDrwR		equ 0
(1)   50/  FF0254 : =$1                 bitDrwL		equ 1
(1)   51/  FF0254 : =$2                 bitDrwD		equ 2
(1)   52/  FF0254 : =$3                 bitDrwU		equ 3
(1)   53/  FF0254 : =$7                 bitBgOn		equ 7
(1)   54/  FF0254 : =$6                 bitMarsBg	equ 6
(1)   55/  FF0254 :                     
(1)   56/  FF0254 :                     ; ====================================================================
(1)   57/  FF0254 :                     ; ----------------------------------------------------------------
(1)   58/  FF0254 :                     ; Structs
(1)   59/  FF0254 :                     ; ----------------------------------------------------------------
(1)   60/  FF0254 :                     
(1)   61/  FF0254 :                     ; IN SH2 SIZES ORDER, still works fine on 68k
(1)   62/  FF0254 :                     
(1)   63/  FF0254 : (MACRO)             		struct 0
(1)   63/  FF0254 : =$FF0254            GLBL_LASTPC     set *
(1)   63/     B2E :                                     dephase
(1)   63/     B2E : =$B2E               GLBL_LASTORG    set *
(1)   63/       0 :                                     phase 0
(1)   64/       0 :                     md_bg_bw	ds.b 1		; Block Width
(1)   65/       1 :                     md_bg_bh	ds.b 1		; Block Height
(1)   66/       2 :                     md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   67/       3 :                     md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   68/       4 :                     md_bg_xset	ds.b 1		; X-counter
(1)   69/       5 :                     md_bg_yset	ds.b 1		; Y-counter
(1)   70/       6 :                     md_bg_movex	ds.b 1
(1)   71/       7 :                     md_bg_movey	ds.b 1
(1)   72/       8 :                     md_bg_w		ds.w 1		; Width in blocks
(1)   73/       A :                     md_bg_h		ds.w 1		; Height in blocks
(1)   74/       C :                     md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   75/       E :                     md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   76/      10 :                     md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   77/      12 :                     md_bg_xinc_r	ds.w 1
(1)   78/      14 :                     md_bg_yinc_u	ds.w 1
(1)   79/      16 :                     md_bg_yinc_d	ds.w 1
(1)   80/      18 :                     md_bg_x_old	ds.w 1		; OLD X position
(1)   81/      1A :                     md_bg_y_old	ds.w 1		; OLD Y position
(1)   82/      1C :                     md_bg_vpos	ds.w 1		; VRAM output for map
(1)   83/      1E :                     md_bg_vram	ds.w 1		; VRAM start for cells
(1)   84/      20 :                     md_bg_low	ds.l 1		; MAIN layout data
(1)   85/      24 :                     md_bg_hi	ds.l 1		; HI layout data
(1)   86/      28 :                     md_bg_blk	ds.l 1		; Block data
(1)   87/      2C :                     md_bg_col	ds.l 1		; Collision data (if needed)
(1)   88/      30 :                     md_bg_x		ds.l 1		; X pos 0000.0000
(1)   89/      34 :                     md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   90/      38 :                     sizeof_mdbg	ds.l 0
(1)   91/      3A : (MACRO)             		finish
(1)   91/       0 :                                     !org GLBL_LASTORG
(1)   91/  FF0254 :                                     phase GLBL_LASTPC
(1)   92/  FF0254 :                     
(1)   93/  FF0254 :                     ; md_bg_flags: %EM.. UDLR
(1)   94/  FF0254 :                     ; UDLR - off-screen update bits
(1)   95/  FF0254 :                     ;    M - Map belongs to: Genesis or 32X
(1)   96/  FF0254 :                     ;    E - Enable this map
(1)   97/  FF0254 :                     
(1)   98/  FF0254 :                     ; ====================================================================
(1)   99/  FF0254 :                     ; ----------------------------------------------------------------
(1)  100/  FF0254 :                     ; Video RAM
(1)  101/  FF0254 :                     ; ----------------------------------------------------------------
(1)  102/  FF0254 :                     
(1)  103/  FF0254 : (MACRO)             			struct RAM_MdVideo
(1)  103/  FF0254 : =$FF0254            GLBL_LASTPC     set *
(1)  103/     B2E :                                     dephase
(1)  103/     B2E : =$B2E               GLBL_LASTORG    set *
(1)  103/FFFFFFFFFFFF9820 :                                     phase RAM_MDVIDEO
(1)  104/FFFFFFFFFFFF9820 :                     RAM_BgBuffer		ds.b sizeof_mdbg*4	; Map backgrounds, back to front.
(1)  105/FFFFFFFFFFFF9900 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  106/FFFFFFFFFFFF9904 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  107/FFFFFFFFFFFF9CC4 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  108/FFFFFFFFFFFF9D14 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  109/FFFFFFFFFFFFA174 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  110/FFFFFFFFFFFFA1F4 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  111/FFFFFFFFFFFFA274 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  112/FFFFFFFFFFFFA474 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  113/FFFFFFFFFFFFA554 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  114/FFFFFFFFFFFFA6D4 :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  115/FFFFFFFFFFFFA6D6 :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  116/FFFFFFFFFFFFA6D8 :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  117/FFFFFFFFFFFFA6DA :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  118/FFFFFFFFFFFFA6DC :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  119/FFFFFFFFFFFFA6DE :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  120/FFFFFFFFFFFFA6E0 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  121/FFFFFFFFFFFFA6E2 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  122/FFFFFFFFFFFFA6E4 :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  123/FFFFFFFFFFFFA6E6 :                     RAM_FadeMarsDelay	ds.w 1
(1)  124/FFFFFFFFFFFFA6E8 :                     RAM_FadeMarsTmr		ds.w 1
(1)  125/FFFFFFFFFFFFA6EA :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  126/FFFFFFFFFFFFA702 :                     sizeof_mdvid		ds.l 0
(1)  127/FFFFFFFFFFFFA702 : (MACRO)             			finish
(1)  127/FFFFFFFFFFFF9820 :                                     !org GLBL_LASTORG
(1)  127/  FF0254 :                                     phase GLBL_LASTPC
(1)  128/  FF0254 :                     
(1)  129/  FF0254 :                     ; ====================================================================
(1)  130/  FF0254 :                     ; --------------------------------------------------------
(1)  131/  FF0254 :                     ; Init Genesis video
(1)  132/  FF0254 :                     ; --------------------------------------------------------
(1)  133/  FF0254 :                     
(1)  134/  FF0254 :                     Video_Init:		
(1)  135/  FF0254 : 4DF8 9820           		lea	(RAM_MdVideo),a6	; Clear RAM
(1)  136/  FF0258 : 7C00                		moveq	#0,d6
(1)  137/  FF025A : 3E3C 0EE1           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  138/  FF025E :                     .clrram:
(1)  139/  FF025E : 1CC6                		move.b	d6,(a6)+
(1)  140/  FF0260 : 51CF FFFC           		dbf	d7,.clrram
(1)  141/  FF0264 : 4DFA 0042           		lea	list_vdpregs(pc),a6
(1)  142/  FF0268 : 4BF8 A6EA           		lea	(RAM_VdpRegs).w,a5
(1)  143/  FF026C : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  144/  FF0272 : 3C3C 8000           		move.w	#$8000,d6
(1)  145/  FF0276 : 3E3C 0012           		move.w	#19-1,d7
(1)  146/  FF027A :                     .loop:
(1)  147/  FF027A : 1C1E                		move.b	(a6)+,d6
(1)  148/  FF027C : 1AC6                		move.b	d6,(a5)+
(1)  149/  FF027E : 3886                		move.w	d6,(a4)
(1)  150/  FF0280 : DC7C 0100           		add.w	#$100,d6
(1)  151/  FF0284 : 51CF FFF4           		dbf	d7,.loop
(1)  152/  FF0288 :                     .exit:
(1)  153/  FF0288 :                     
(1)  154/  FF0288 :                     ; --------------------------------------------------------
(1)  155/  FF0288 :                     ; Video_Update
(1)  156/  FF0288 :                     ;
(1)  157/  FF0288 :                     ; Writes register data stored in RAM to VDP
(1)  158/  FF0288 :                     ; from Registers $80 to $90, WINDOW registers
(1)  159/  FF0288 :                     ; $91 and $92 can be written manually.
(1)  160/  FF0288 :                     ;
(1)  161/  FF0288 :                     ; Breaks:
(1)  162/  FF0288 :                     ; d6-d7,a5-a6
(1)  163/  FF0288 :                     ; --------------------------------------------------------
(1)  164/  FF0288 :                     
(1)  165/  FF0288 :                     Video_Update:
(1)  166/  FF0288 : 4DF8 A6EA           		lea	(RAM_VdpRegs).w,a6
(1)  167/  FF028C : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  168/  FF0292 : 3C3C 8000           		move.w	#$8000,d6
(1)  169/  FF0296 : 3E3C 0010           		move.w	#17-1,d7
(1)  170/  FF029A :                     .loop:
(1)  171/  FF029A : 1C1E                		move.b	(a6)+,d6
(1)  172/  FF029C : 3A86                		move.w	d6,(a5)
(1)  173/  FF029E : DC7C 0100           		add.w	#$100,d6
(1)  174/  FF02A2 : 51CF FFF6           		dbf	d7,.loop
(1)  175/  FF02A6 :                     .exit:
(1)  176/  FF02A6 : 4E75                		rts
(1)  177/  FF02A8 :                     
(1)  178/  FF02A8 :                     ; --------------------------------------------------------
(1)  179/  FF02A8 :                     
(1)  180/  FF02A8 :                     list_vdpregs:
(1)  181/  FF02A8 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  182/  FF02A9 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  183/  FF02AA : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  184/  FF02AB : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  185/  FF02AC : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  186/  FF02AD : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  187/  FF02AE : 00                  		dc.b $00			; Unused
(1)  188/  FF02AF : 00                  		dc.b $00			; Background color: 0
(1)  189/  FF02B0 : 00                  		dc.b $00			; Unused
(1)  190/  FF02B1 : 00                  		dc.b $00			; Unused
(1)  191/  FF02B2 : 00                  		dc.b $00			; HInt value
(1)  192/  FF02B3 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  193/  FF02B4 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  194/  FF02B5 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  195/  FF02B6 : 00                  		dc.b $00			; Unused
(1)  196/  FF02B7 : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  197/  FF02B8 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  198/  FF02B9 : 00                  		dc.b $00
(1)  199/  FF02BA : 00                  		dc.b $00
(1)  200/  FF02BB :                     		align 2
(1)  201/  FF02BC :                     
(1)  202/  FF02BC : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  203/  FF02CC : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  204/  FF02DC :                     ASCII_PAL_e:
(1)  205/  FF02DC :                     		align 2
(1)  206/  FF02DC :                     
(1)  207/  FF02DC :                     ; --------------------------------------------------------
(1)  208/  FF02DC :                     ; Video_Clear
(1)  209/  FF02DC :                     ;
(1)  210/  FF02DC :                     ; Clear all video data from VRAM
(1)  211/  FF02DC :                     ; --------------------------------------------------------
(1)  212/  FF02DC :                     
(1)  213/  FF02DC :                     Video_Clear:
(1)  214/  FF02DC :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  215/  FF02DC :                     ; 		move.w	#0,d1
(1)  216/  FF02DC :                     ; 		move.w	#$57F*$20,d2
(1)  217/  FF02DC :                     ; 		bsr	Video_Fill
(1)  218/  FF02DC :                     
(1)  219/  FF02DC :                     Video_ClearScreen:
(1)  220/  FF02DC : 7000                		moveq	#0,d0
(1)  221/  FF02DE : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  222/  FF02E2 : 1239 FFFF A6EC      		move.b	(RAM_VdpRegs+2).l,d1	; FG
(1)  223/  FF02E8 : 0241 0038           		andi.w	#%111000,d1
(1)  224/  FF02EC : E149                		lsl.w	#8,d1
(1)  225/  FF02EE : E549                		lsl.w	#2,d1
(1)  226/  FF02F0 : 6100 04D6           		bsr	Video_Fill
(1)  227/  FF02F4 : 1239 FFFF A6EE      		move.b	(RAM_VdpRegs+4).l,d1	; BG
(1)  228/  FF02FA : 0241 0007           		andi.w	#%000111,d1
(1)  229/  FF02FE : E149                		lsl.w	#8,d1
(1)  230/  FF0300 : EB49                		lsl.w	#5,d1
(1)  231/  FF0302 : 6100 04C4           		bsr	Video_Fill
(1)  232/  FF0306 : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  233/  FF030A : 1239 FFFF A6ED      		move.b	(RAM_VdpRegs+3).l,d1	; Window
(1)  234/  FF0310 : 0241 003E           		andi.w	#%111110,d1
(1)  235/  FF0314 : E149                		lsl.w	#8,d1
(1)  236/  FF0316 : E549                		lsl.w	#2,d1
(1)  237/  FF0318 : 6100 04AE           		bsr	Video_Fill
(1)  238/  FF031C : 41F8 9904           		lea	(RAM_HorScroll),a0
(1)  239/  FF0320 : 3E3C 00EF           		move.w	#240-1,d7
(1)  240/  FF0324 : 7000                		moveq	#0,d0
(1)  241/  FF0326 :                     .xnext:
(1)  242/  FF0326 : 20C0                		move.l	d0,(a0)+
(1)  243/  FF0328 : 51CF FFFC           		dbf	d7,.xnext
(1)  244/  FF032C : 41F8 9CC4           		lea	(RAM_VerScroll),a0
(1)  245/  FF0330 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  246/  FF0334 : 7000                		moveq	#0,d0
(1)  247/  FF0336 :                     .ynext:
(1)  248/  FF0336 : 20C0                		move.l	d0,(a0)+
(1)  249/  FF0338 : 51CF FFFC           		dbf	d7,.ynext
(1)  250/  FF033C : 41F8 9D14           		lea	(RAM_Sprites),a0
(1)  251/  FF0340 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  252/  FF0344 : 7000                		moveq	#0,d0
(1)  253/  FF0346 :                     .snext:
(1)  254/  FF0346 : 20C0                		move.l	d0,(a0)+
(1)  255/  FF0348 : 51CF FFFC           		dbf	d7,.snext
(1)  256/  FF034C :                     
(1)  257/  FF034C : 41F8 A174           		lea	(RAM_Palette),a0
(1)  258/  FF0350 : 43F8 A1F4           		lea	(RAM_PaletteFd),a1
(1)  259/  FF0354 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  260/  FF0358 : 7000                		moveq	#0,d0
(1)  261/  FF035A :                     .pnext:
(1)  262/  FF035A : 20C0                		move.l	d0,(a0)+
(1)  263/  FF035C : 22C0                		move.l	d0,(a1)+
(1)  264/  FF035E : 51CF FFFA           		dbf	d7,.pnext
(1)  265/  FF0362 :                     	; Only the 256-color's fade...
(1)  266/  FF0362 : 41F8 A274           		lea	(RAM_MdMarsPalFd),a0
(1)  267/  FF0366 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  268/  FF036A : 7000                		moveq	#0,d0
(1)  269/  FF036C :                     .pmnext:
(1)  270/  FF036C : 20C0                		move.l	d0,(a0)+
(1)  271/  FF036E : 51CF FFFC           		dbf	d7,.pmnext
(1)  272/  FF0372 : 4E75                		rts
(1)  273/  FF0374 :                     
(1)  274/  FF0374 :                     ; ====================================================================
(1)  275/  FF0374 :                     ; ----------------------------------------------------------------
(1)  276/  FF0374 :                     ; Generic screen-drawing routines
(1)  277/  FF0374 :                     ; ----------------------------------------------------------------
(1)  278/  FF0374 :                     
(1)  279/  FF0374 :                     ; --------------------------------------------------------
(1)  280/  FF0374 :                     ; Video_LoadMap
(1)  281/  FF0374 :                     ;
(1)  282/  FF0374 :                     ; Loads map data, in Horizontal order
(1)  283/  FF0374 :                     ; Can autodetect layer width, height and
(1)  284/  FF0374 :                     ; double interlace mode
(1)  285/  FF0374 :                     ;
(1)  286/  FF0374 :                     ; Input:
(1)  287/  FF0374 :                     ; a0 - Map data
(1)  288/  FF0374 :                     ;
(1)  289/  FF0374 :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  290/  FF0374 :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  291/  FF0374 :                     ; d2 | WORD - VRAM
(1)  292/  FF0374 :                     ;
(1)  293/  FF0374 :                     ; Breaks:
(1)  294/  FF0374 :                     ; d4-d7,a6
(1)  295/  FF0374 :                     ; --------------------------------------------------------
(1)  296/  FF0374 :                     
(1)  297/  FF0374 :                     Video_LoadMap:
(1)  298/  FF0374 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  299/  FF037A : 6100 01B4           		bsr	vid_PickLayer
(1)  300/  FF037E : 3A01                		move.w	d1,d5		; Start here
(1)  301/  FF0380 :                     .yloop:
(1)  302/  FF0380 : 4845                		swap	d5
(1)  303/  FF0382 : 2D44 0004           		move.l	d4,4(a6)
(1)  304/  FF0386 : 2E01                		move.l	d1,d7
(1)  305/  FF0388 : 4847                		swap	d7
(1)  306/  FF038A :                     .xloop:
(1)  307/  FF038A : 3A18                		move.w	(a0)+,d5
(1)  308/  FF038C : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  309/  FF0390 : 6606                		bne.s	.nonull
(1)  310/  FF0392 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  311/  FF0396 : 6002                		bra.s	.cont
(1)  312/  FF0398 :                     .nonull:
(1)  313/  FF0398 : DA42                		add.w	d2,d5
(1)  314/  FF039A :                     .cont:
(1)  315/  FF039A :                     
(1)  316/  FF039A :                     	; Check for double interlace
(1)  317/  FF039A : 4847                		swap	d7
(1)  318/  FF039C : 1E39 FFFF A6F6      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  319/  FF03A2 : CE7C 0006           		and.w	#%110,d7
(1)  320/  FF03A6 : BE7C 0006           		cmp.w	#%110,d7
(1)  321/  FF03AA : 660E                		bne.s	.nodble
(1)  322/  FF03AC : 3E05                		move.w	d5,d7
(1)  323/  FF03AE : E24F                		lsr.w	#1,d7
(1)  324/  FF03B0 : CE7C 07FF           		and.w	#$7FF,d7
(1)  325/  FF03B4 : CA7C F800           		and.w	#$F800,d5
(1)  326/  FF03B8 : 8A47                		or.w	d7,d5
(1)  327/  FF03BA :                     .nodble:
(1)  328/  FF03BA : 4847                		swap	d7
(1)  329/  FF03BC : 3C85                		move.w	d5,(a6)
(1)  330/  FF03BE : 51CF FFCA           		dbf	d7,.xloop
(1)  331/  FF03C2 : D886                		add.l	d6,d4
(1)  332/  FF03C4 : 4845                		swap	d5
(1)  333/  FF03C6 : 51CD FFB8           		dbf	d5,.yloop
(1)  334/  FF03CA : 4E75                		rts
(1)  335/  FF03CC :                     
(1)  336/  FF03CC :                     ; ; --------------------------------------------------------
(1)  337/  FF03CC :                     ; ; Video_LoadMap_Vert
(1)  338/  FF03CC :                     ; ;
(1)  339/  FF03CC :                     ; ; Load map data, Vertical order
(1)  340/  FF03CC :                     ; ;
(1)  341/  FF03CC :                     ; ; a0 - Map data
(1)  342/  FF03CC :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  343/  FF03CC :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  344/  FF03CC :                     ; ; d2 | WORD - VRAM
(1)  345/  FF03CC :                     ;
(1)  346/  FF03CC :                     ; ; Breaks:
(1)  347/  FF03CC :                     ; ; a4-a5,d4-d7
(1)  348/  FF03CC :                     ; ; --------------------------------------------------------
(1)  349/  FF03CC :                     ;
(1)  350/  FF03CC :                     ; Video_LoadMap_Vert:
(1)  351/  FF03CC :                     ; 		lea	(vdp_data),a4
(1)  352/  FF03CC :                     ; 		bsr	vid_PickLayer
(1)  353/  FF03CC :                     ; 		move.l	d1,d5		; Start here
(1)  354/  FF03CC :                     ; 		swap	d5
(1)  355/  FF03CC :                     ; .xloop:
(1)  356/  FF03CC :                     ; 		swap	d5
(1)  357/  FF03CC :                     ; 		move.l	d4,-(sp)
(1)  358/  FF03CC :                     ; 		move.w	d1,d7
(1)  359/  FF03CC :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  360/  FF03CC :                     ; 		beq.s	.yloop
(1)  361/  FF03CC :                     ; 		lsr.w	#1,d7
(1)  362/  FF03CC :                     ; .yloop:
(1)  363/  FF03CC :                     ; 		move.l	d4,4(a4)
(1)  364/  FF03CC :                     ; 		move.w	(a0),d5
(1)  365/  FF03CC :                     ; 		cmp.w	#-1,d5
(1)  366/  FF03CC :                     ; 		bne.s	.nonull
(1)  367/  FF03CC :                     ; 		move.w	#varNullVram,d5
(1)  368/  FF03CC :                     ; 		bra.s	.cont
(1)  369/  FF03CC :                     ; .nonull:
(1)  370/  FF03CC :                     ; 		add.w	d2,d5
(1)  371/  FF03CC :                     ; .cont:
(1)  372/  FF03CC :                     ; 		swap	d7
(1)  373/  FF03CC :                     ; 		adda	#2,a0
(1)  374/  FF03CC :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  375/  FF03CC :                     ; 		beq.s	.nodble
(1)  376/  FF03CC :                     ; 		adda	#2,a0
(1)  377/  FF03CC :                     ; 		move.w	d5,d7
(1)  378/  FF03CC :                     ; 		lsr.w	#1,d7
(1)  379/  FF03CC :                     ; 		and.w	#$7FF,d7
(1)  380/  FF03CC :                     ; 		and.w	#$F800,d5
(1)  381/  FF03CC :                     ; 		or.w	d7,d5
(1)  382/  FF03CC :                     ; .nodble:
(1)  383/  FF03CC :                     ; 		swap	d7
(1)  384/  FF03CC :                     ; 		move.w	d5,(a4)
(1)  385/  FF03CC :                     ; 		add.l	d6,d4
(1)  386/  FF03CC :                     ; 		dbf	d7,.yloop
(1)  387/  FF03CC :                     ; .outdbl:
(1)  388/  FF03CC :                     ; 		move.l	(sp)+,d4
(1)  389/  FF03CC :                     ; 		add.l	#$20000,d4
(1)  390/  FF03CC :                     ; 		swap	d5
(1)  391/  FF03CC :                     ; 		dbf	d5,.xloop
(1)  392/  FF03CC :                     ; 		rts
(1)  393/  FF03CC :                     
(1)  394/  FF03CC :                     ; ; --------------------------------------------------------
(1)  395/  FF03CC :                     ; ; Video_AutoMap_Vert
(1)  396/  FF03CC :                     ; ;
(1)  397/  FF03CC :                     ; ; Make automatic map, Vertical order
(1)  398/  FF03CC :                     ; ;
(1)  399/  FF03CC :                     ; ; MCD: Use this to make a virtual screen
(1)  400/  FF03CC :                     ; ; for Stamps
(1)  401/  FF03CC :                     ; ;
(1)  402/  FF03CC :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  403/  FF03CC :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  404/  FF03CC :                     ; ; d2 | WORD - VRAM
(1)  405/  FF03CC :                     ;
(1)  406/  FF03CC :                     ; ; Breaks:
(1)  407/  FF03CC :                     ; ; a4-a5,d4-d7
(1)  408/  FF03CC :                     ; ; --------------------------------------------------------
(1)  409/  FF03CC :                     ;
(1)  410/  FF03CC :                     ; ; TODO: double interlace
(1)  411/  FF03CC :                     ; Video_AutoMap_Vert:
(1)  412/  FF03CC :                     ; 		lea	(vdp_data),a4
(1)  413/  FF03CC :                     ; 		bsr	vid_PickLayer
(1)  414/  FF03CC :                     ; 		move.w	d2,d7		; Start here
(1)  415/  FF03CC :                     ; 		move.l	d1,d5
(1)  416/  FF03CC :                     ; 		swap	d5
(1)  417/  FF03CC :                     ; .xloop:
(1)  418/  FF03CC :                     ; 		swap	d5
(1)  419/  FF03CC :                     ; 		move.l	d4,-(sp)
(1)  420/  FF03CC :                     ; 		move.w	d1,d5
(1)  421/  FF03CC :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  422/  FF03CC :                     ; 		beq.s	.yloop
(1)  423/  FF03CC :                     ; 		lsr.w	#1,d5
(1)  424/  FF03CC :                     ; .yloop:
(1)  425/  FF03CC :                     ; 		move.l	d4,4(a4)
(1)  426/  FF03CC :                     ; 		move.w	d7,(a4)
(1)  427/  FF03CC :                     ; 		add.w	#1,d7
(1)  428/  FF03CC :                     ; 		add.l	d6,d4
(1)  429/  FF03CC :                     ; 		dbf	d5,.yloop
(1)  430/  FF03CC :                     ;
(1)  431/  FF03CC :                     ; 		move.l	(sp)+,d4
(1)  432/  FF03CC :                     ; 		add.l	#$20000,d4
(1)  433/  FF03CC :                     ; 		swap	d5
(1)  434/  FF03CC :                     ; 		dbf	d5,.xloop
(1)  435/  FF03CC :                     ; 		rts
(1)  436/  FF03CC :                     
(1)  437/  FF03CC :                     ; ====================================================================
(1)  438/  FF03CC :                     ; ----------------------------------------------------------------
(1)  439/  FF03CC :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  440/  FF03CC :                     ; ----------------------------------------------------------------
(1)  441/  FF03CC :                     
(1)  442/  FF03CC :                     ; --------------------------------------------------------
(1)  443/  FF03CC :                     ; Video_PrintInit
(1)  444/  FF03CC :                     ;
(1)  445/  FF03CC :                     ; Initializes the default Graphics and Palette
(1)  446/  FF03CC :                     ; for the font.
(1)  447/  FF03CC :                     ;
(1)  448/  FF03CC :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  449/  FF03CC :                     ; --------------------------------------------------------
(1)  450/  FF03CC :                     
(1)  451/  FF03CC :                     Video_PrintInit:
(1)  452/  FF03CC : 203C 0003 8000      		move.l	#ASCII_FONT,d0
(1)  453/  FF03D2 : 323C B000           		move.w	#varPrintVram*$20,d1
(1)  454/  FF03D6 : 343C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  455/  FF03DA : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  456/  FF03DE : 31C3 A6D8           		move.w	d3,(RAM_VidPrntVram).w
(1)  457/  FF03E2 : 6100 04DA           		bsr	Video_LoadArt
(1)  458/  FF03E6 :                     Video_PrintPal:
(1)  459/  FF03E6 : 41FA FED4           		lea	ASCII_PAL(pc),a0
(1)  460/  FF03EA : 7030                		moveq	#(varPrintPal<<4),d0
(1)  461/  FF03EC : 323C 000F           		move.w	#$F,d1
(1)  462/  FF03F0 : 6100 01F6           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  463/  FF03F4 : 6000 01E8           		bra	Video_FadePal
(1)  464/  FF03F8 :                     
(1)  465/  FF03F8 :                     ; --------------------------------------------------------
(1)  466/  FF03F8 :                     ; Video_Print
(1)  467/  FF03F8 :                     ;
(1)  468/  FF03F8 :                     ; Prints string to layer
(1)  469/  FF03F8 :                     ; requires ASCII font
(1)  470/  FF03F8 :                     ;
(1)  471/  FF03F8 :                     ; a0 | DATA - String data w/special characters +
(1)  472/  FF03F8 :                     ;             list of RAM locations to read
(1)  473/  FF03F8 :                     ; d0 | LONG - Print location on-screen:
(1)  474/  FF03F8 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  475/  FF03F8 :                     ;
(1)  476/  FF03F8 :                     ; Special characters:
(1)  477/  FF03F8 :                     ; "//b" - Shows BYTE value
(1)  478/  FF03F8 :                     ; "//w" - Shows WORD value
(1)  479/  FF03F8 :                     ; "//l" - Shows LONG value
(1)  480/  FF03F8 :                     ;   $0A - Next line
(1)  481/  FF03F8 :                     ;   $00 - End of line
(1)  482/  FF03F8 :                     ;
(1)  483/  FF03F8 :                     ; After $00, put your RAM addresses in LONGS
(1)  484/  FF03F8 :                     ; don't forget to put align 2 at the end.
(1)  485/  FF03F8 :                     ;
(1)  486/  FF03F8 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  487/  FF03F8 :                     ;
(1)  488/  FF03F8 :                     ; Breaks:
(1)  489/  FF03F8 :                     ; d4-d7,a4-a6
(1)  490/  FF03F8 :                     ; --------------------------------------------------------
(1)  491/  FF03F8 :                     
(1)  492/  FF03F8 :                     Video_Print:
(1)  493/  FF03F8 :                     ; 		movem.l	d3-d7,-(sp)
(1)  494/  FF03F8 :                     ; 		movem.l	a4-a6,-(sp)
(1)  495/  FF03F8 :                     
(1)  496/  FF03F8 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  497/  FF03FE : 6100 0130           		bsr	vid_PickLayer
(1)  498/  FF0402 : 4BF8 A554           		lea	(RAM_VidPrntList),a5
(1)  499/  FF0406 :                     .newjump:
(1)  500/  FF0406 : 2D44 0004           		move.l	d4,4(a6)
(1)  501/  FF040A : 2A04                		move.l	d4,d5
(1)  502/  FF040C :                     .loop:
(1)  503/  FF040C : 1E18                		move.b	(a0)+,d7
(1)  504/  FF040E : 6772                		beq	.exit
(1)  505/  FF0410 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  506/  FF0414 : 6718                		beq.s	.next
(1)  507/  FF0416 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  508/  FF041A : 6716                		beq.s	.special
(1)  509/  FF041C : 0247 00FF           		andi.w	#$FF,d7
(1)  510/  FF0420 :                     .puttext:
(1)  511/  FF0420 : DE78 A6D8           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  512/  FF0424 : 3C87                		move.w	d7,(a6)
(1)  513/  FF0426 : DABC 0002 0000      		add.l	#$20000,d5
(1)  514/  FF042C : 60DE                		bra.s	.loop
(1)  515/  FF042E :                     ; Next line
(1)  516/  FF042E :                     .next:
(1)  517/  FF042E : D886                		add.l	d6,d4
(1)  518/  FF0430 : 60D4                		bra.s	.newjump
(1)  519/  FF0432 :                     
(1)  520/  FF0432 :                     ; Specials
(1)  521/  FF0432 :                     .special:
(1)  522/  FF0432 : 1E18                		move.b	(a0)+,d7
(1)  523/  FF0434 : 0C07 0062           		cmpi.b	#"b",d7
(1)  524/  FF0438 : 6712                		beq.s	.isbyte
(1)  525/  FF043A : 0C07 0077           		cmpi.b	#"w",d7
(1)  526/  FF043E : 671E                		beq.s	.isword
(1)  527/  FF0440 : 0C07 006C           		cmpi.b	#"l",d7
(1)  528/  FF0444 : 672A                		beq.s	.islong
(1)  529/  FF0446 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  530/  FF044A : 60D4                		bra.s	.puttext
(1)  531/  FF044C :                     
(1)  532/  FF044C :                     	; TEMPORAL VALUES
(1)  533/  FF044C :                     .isbyte:
(1)  534/  FF044C : 2AC5                		move.l	d5,(a5)+
(1)  535/  FF044E : 3AFC 0001           		move.w	#1,(a5)+
(1)  536/  FF0452 : DABC 0004 0000      		add.l	#$40000,d5
(1)  537/  FF0458 : 2D45 0004           		move.l	d5,4(a6)
(1)  538/  FF045C : 60AE                		bra	.loop
(1)  539/  FF045E :                     .isword:
(1)  540/  FF045E : 2AC5                		move.l	d5,(a5)+
(1)  541/  FF0460 : 3AFC 0002           		move.w	#2,(a5)+
(1)  542/  FF0464 : DABC 0008 0000      		add.l	#$80000,d5
(1)  543/  FF046A : 2D45 0004           		move.l	d5,4(a6)
(1)  544/  FF046E : 609C                		bra	.loop
(1)  545/  FF0470 :                     .islong:
(1)  546/  FF0470 : 2AC5                		move.l	d5,(a5)+
(1)  547/  FF0472 : 3AFC 0003           		move.w	#3,(a5)+
(1)  548/  FF0476 : DABC 0010 0000      		add.l	#$100000,d5
(1)  549/  FF047C : 2D45 0004           		move.l	d5,4(a6)
(1)  550/  FF0480 : 608A                		bra	.loop
(1)  551/  FF0482 :                     .exit:
(1)  552/  FF0482 :                     
(1)  553/  FF0482 :                     	; ----------------------------------------
(1)  554/  FF0482 :                     	; Print values
(1)  555/  FF0482 :                     	;
(1)  556/  FF0482 :                     	; vvvv vvvv tttt
(1)  557/  FF0482 :                     	; v - vdp pos
(1)  558/  FF0482 :                     	; t - value type
(1)  559/  FF0482 :                     	; ----------------------------------------
(1)  560/  FF0482 :                     
(1)  561/  FF0482 :                     	; reading byte by byte because longs doesn't get
(1)  562/  FF0482 :                     	; aligned after $00...
(1)  563/  FF0482 :                     
(1)  564/  FF0482 : 7800                		moveq	#0,d4
(1)  565/  FF0484 : 7A00                		moveq	#0,d5
(1)  566/  FF0486 : 7C00                		moveq	#0,d6
(1)  567/  FF0488 : 4BF8 A554           		lea	(RAM_VidPrntList),a5
(1)  568/  FF048C :                     .nextv:
(1)  569/  FF048C : 4A95                		tst.l	(a5)
(1)  570/  FF048E : 6700 009E           		beq	.nothing
(1)  571/  FF0492 :                     
(1)  572/  FF0492 :                     	; grab value
(1)  573/  FF0492 : 7800                		moveq	#0,d4
(1)  574/  FF0494 : 1818                		move.b	(a0)+,d4
(1)  575/  FF0496 : E19C                		rol.l	#8,d4
(1)  576/  FF0498 : 1818                		move.b	(a0)+,d4
(1)  577/  FF049A : E19C                		rol.l	#8,d4
(1)  578/  FF049C : 1818                		move.b	(a0)+,d4
(1)  579/  FF049E : E19C                		rol.l	#8,d4
(1)  580/  FF04A0 : 1818                		move.b	(a0)+,d4
(1)  581/  FF04A2 : 2844                		movea.l	d4,a4
(1)  582/  FF04A4 : 7800                		moveq	#0,d4
(1)  583/  FF04A6 :                     
(1)  584/  FF04A6 :                     	; get value
(1)  585/  FF04A6 : 3C2D 0004           		move.w	4(a5),d6
(1)  586/  FF04AA : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  587/  FF04AE : 660E                		bne.s	.vbyte
(1)  588/  FF04B0 : 1814                		move.b	(a4),d4
(1)  589/  FF04B2 : 2D55 0004           		move.l	(a5),4(a6)
(1)  590/  FF04B6 : E91C                		rol.b	#4,d4
(1)  591/  FF04B8 : 6158                		bsr.s	.donibl
(1)  592/  FF04BA : E91C                		rol.b	#4,d4
(1)  593/  FF04BC : 6154                		bsr.s	.donibl
(1)  594/  FF04BE :                     .vbyte:
(1)  595/  FF04BE : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  596/  FF04C2 : 661C                		bne.s	.vword
(1)  597/  FF04C4 : 1814                		move.b	(a4),d4
(1)  598/  FF04C6 : E15C                		rol.w	#8,d4
(1)  599/  FF04C8 : 182C 0001           		move.b	1(a4),d4
(1)  600/  FF04CC : 2D55 0004           		move.l	(a5),4(a6)
(1)  601/  FF04D0 : E95C                		rol.w	#4,d4
(1)  602/  FF04D2 : 613E                		bsr.s	.donibl
(1)  603/  FF04D4 : E95C                		rol.w	#4,d4
(1)  604/  FF04D6 : 613A                		bsr.s	.donibl
(1)  605/  FF04D8 : E95C                		rol.w	#4,d4
(1)  606/  FF04DA : 6136                		bsr.s	.donibl
(1)  607/  FF04DC : E95C                		rol.w	#4,d4
(1)  608/  FF04DE : 6132                		bsr.s	.donibl
(1)  609/  FF04E0 :                     .vword:
(1)  610/  FF04E0 :                     
(1)  611/  FF04E0 :                     	; TODO: might break on negative values
(1)  612/  FF04E0 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  613/  FF04E4 : 6624                		bne.s	.vlong
(1)  614/  FF04E6 : 1814                		move.b	(a4),d4
(1)  615/  FF04E8 : E19C                		rol.l	#8,d4
(1)  616/  FF04EA : 182C 0001           		move.b	1(a4),d4
(1)  617/  FF04EE : E19C                		rol.l	#8,d4
(1)  618/  FF04F0 : 182C 0002           		move.b	2(a4),d4
(1)  619/  FF04F4 : E19C                		rol.l	#8,d4
(1)  620/  FF04F6 : 182C 0003           		move.b	3(a4),d4
(1)  621/  FF04FA : 2D55 0004           		move.l	(a5),4(a6)
(1)  622/  FF04FE : 3C3C 0007           		move.w	#7,d6
(1)  623/  FF0502 : E99C                .lngloop:	rol.l	#4,d4
(1)  624/  FF0504 : 610C                		bsr.s	.donibl
(1)  625/  FF0506 : 51CE FFFA           		dbf	d6,.lngloop
(1)  626/  FF050A :                     .vlong:
(1)  627/  FF050A : 429D                		clr.l	(a5)+
(1)  628/  FF050C : 425D                		clr.w	(a5)+
(1)  629/  FF050E : 6000 FF7C           		bra	.nextv
(1)  630/  FF0512 :                     
(1)  631/  FF0512 :                     ; make nibble byte
(1)  632/  FF0512 :                     .donibl:
(1)  633/  FF0512 : 3A04                		move.w	d4,d5
(1)  634/  FF0514 : 0245 000F           		andi.w	#%1111,d5
(1)  635/  FF0518 : BA3C 000A           		cmp.b	#$A,d5
(1)  636/  FF051C : 6D04                		blt.s	.lowr
(1)  637/  FF051E : DA3C 0007           		add.b	#7,d5
(1)  638/  FF0522 :                     .lowr:
(1)  639/  FF0522 : DA7C 0030           		add.w	#"0",d5
(1)  640/  FF0526 : DA78 A6D8           		add.w	(RAM_VidPrntVram),d5
(1)  641/  FF052A : 3C85                		move.w	d5,(a6)
(1)  642/  FF052C : 4E75                		rts
(1)  643/  FF052E :                     ; exit
(1)  644/  FF052E :                     .nothing:
(1)  645/  FF052E :                     ; 		movem.l	(sp)+,a4-a6
(1)  646/  FF052E :                     ; 		movem.l	(sp)+,d3-d7
(1)  647/  FF052E : 4E75                		rts
(1)  648/  FF0530 :                     
(1)  649/  FF0530 :                     ; --------------------------------------------------------
(1)  650/  FF0530 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  651/  FF0530 :                     ; --------------------------------------------------------
(1)  652/  FF0530 :                     
(1)  653/  FF0530 :                     vid_PickLayer:
(1)  654/  FF0530 : 2C00                		move.l	d0,d6			; Pick layer
(1)  655/  FF0532 : 4846                		swap	d6
(1)  656/  FF0534 : 0806 0000           		btst	#0,d6
(1)  657/  FF0538 : 671E                		beq.s	.plawnd
(1)  658/  FF053A : 1839 FFFF A6EE      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  659/  FF0540 : 3A04                		move.w	d4,d5
(1)  660/  FF0542 : E24D                		lsr.w	#1,d5
(1)  661/  FF0544 : 0245 0003           		andi.w	#%11,d5
(1)  662/  FF0548 : 4844                		swap	d4
(1)  663/  FF054A : 3805                		move.w	d5,d4
(1)  664/  FF054C : 4844                		swap	d4
(1)  665/  FF054E : 0244 0001           		andi.w	#1,d4
(1)  666/  FF0552 : E14C                		lsl.w	#8,d4
(1)  667/  FF0554 : EB4C                		lsl.w	#5,d4
(1)  668/  FF0556 : 6028                		bra.s	.golyr
(1)  669/  FF0558 :                     .plawnd:
(1)  670/  FF0558 : 1839 FFFF A6EC      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  671/  FF055E : 0806 0001           		btst	#1,d6
(1)  672/  FF0562 : 6706                		beq.s	.nowd
(1)  673/  FF0564 : 1839 FFFF A6ED      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  674/  FF056A :                     .nowd:
(1)  675/  FF056A : 3A04                		move.w	d4,d5
(1)  676/  FF056C : E84D                		lsr.w	#4,d5
(1)  677/  FF056E : 0245 0003           		andi.w	#%11,d5
(1)  678/  FF0572 : 4844                		swap	d4
(1)  679/  FF0574 : 3805                		move.w	d5,d4
(1)  680/  FF0576 : 4844                		swap	d4
(1)  681/  FF0578 : 0244 000E           		andi.w	#%00001110,d4
(1)  682/  FF057C : E14C                		lsl.w	#8,d4
(1)  683/  FF057E : E54C                		lsl.w	#2,d4
(1)  684/  FF0580 :                     .golyr:
(1)  685/  FF0580 : 0044 4000           		ori.w	#$4000,d4
(1)  686/  FF0584 : 3A00                		move.w	d0,d5			; Y start pos
(1)  687/  FF0586 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  688/  FF058A : ED4D                		lsl.w	#6,d5
(1)  689/  FF058C : 1C38 A6FA           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  690/  FF0590 : 0246 0003           		andi.w	#%11,d6
(1)  691/  FF0594 : 670A                		beq.s	.thissz
(1)  692/  FF0596 : DA45                		add.w	d5,d5			; H64
(1)  693/  FF0598 : 0246 0002           		andi.w	#%10,d6
(1)  694/  FF059C : 6702                		beq.s	.thissz
(1)  695/  FF059E : DA45                		add.w	d5,d5			; H128
(1)  696/  FF05A0 :                     .thissz:
(1)  697/  FF05A0 : D845                		add.w	d5,d4
(1)  698/  FF05A2 : 3A00                		move.w	d0,d5
(1)  699/  FF05A4 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  700/  FF05A8 : EE4D                		lsr.w	#7,d5
(1)  701/  FF05AA : D845                		add.w	d5,d4			; X add
(1)  702/  FF05AC : 4844                		swap	d4
(1)  703/  FF05AE : 7C00                		moveq	#0,d6
(1)  704/  FF05B0 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  705/  FF05B4 : 1A38 A6FA           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  706/  FF05B8 : 0245 0003           		andi.w	#%11,d5
(1)  707/  FF05BC : 670A                		beq.s	.thisszj
(1)  708/  FF05BE : DC46                		add.w	d6,d6			; H64
(1)  709/  FF05C0 : 0245 0002           		andi.w	#%10,d5
(1)  710/  FF05C4 : 6702                		beq.s	.thisszj
(1)  711/  FF05C6 : DC46                		add.w	d6,d6			; H128
(1)  712/  FF05C8 :                     .thisszj:
(1)  713/  FF05C8 : 4846                		swap	d6
(1)  714/  FF05CA : 4E75                		rts
(1)  715/  FF05CC :                     
(1)  716/  FF05CC :                     ; ====================================================================
(1)  717/  FF05CC :                     ; ----------------------------------------------------------------
(1)  718/  FF05CC :                     ; Palette fade system, Genesis side
(1)  719/  FF05CC :                     ; ----------------------------------------------------------------
(1)  720/  FF05CC :                     
(1)  721/  FF05CC :                     ; --------------------------------------------------------
(1)  722/  FF05CC :                     ; Video_RunFade
(1)  723/  FF05CC :                     ;
(1)  724/  FF05CC :                     ; Processes palette fading and reports if requests
(1)  725/  FF05CC :                     ; finished on exit.
(1)  726/  FF05CC :                     ;
(1)  727/  FF05CC :                     ; Returns:
(1)  728/  FF05CC :                     ; bne - Still active
(1)  729/  FF05CC :                     ; beq - Finished
(1)  730/  FF05CC :                     ;
(1)  731/  FF05CC :                     ; *** CALL System_WaitFrame FIRST ***
(1)  732/  FF05CC :                     ; --------------------------------------------------------
(1)  733/  FF05CC :                     
(1)  734/  FF05CC :                     Video_RunFade:
(1)  735/  FF05CC : 613E                		bsr	Video_DoPalFade
(1)  736/  FF05CE : 6100 049C           		bsr	Video_MarsPalFade
(1)  737/  FF05D2 : 3E38 A6E2           		move.w	(RAM_FadeMarsReq),d7
(1)  738/  FF05D6 : 3C38 A6DA           		move.w	(RAM_FadeMdReq),d6
(1)  739/  FF05DA : 8E46                		or.w	d6,d7
(1)  740/  FF05DC : 4E75                		rts
(1)  741/  FF05DE :                     
(1)  742/  FF05DE :                     ; --------------------------------------------------------
(1)  743/  FF05DE :                     ; Video_LoadPal
(1)  744/  FF05DE :                     ; 
(1)  745/  FF05DE :                     ; Input:
(1)  746/  FF05DE :                     ; a0 - Palette data
(1)  747/  FF05DE :                     ; d0 - Start position
(1)  748/  FF05DE :                     ; d1 - Number of colors
(1)  749/  FF05DE :                     ; 
(1)  750/  FF05DE :                     ; Breaks:
(1)  751/  FF05DE :                     ; d5-d7,a6
(1)  752/  FF05DE :                     ; --------------------------------------------------------
(1)  753/  FF05DE :                     
(1)  754/  FF05DE :                     Video_FadePal:
(1)  755/  FF05DE : 4DF8 A1F4           		lea	(RAM_PaletteFd),a6
(1)  756/  FF05E2 : 4278 A6E0           		clr.w	(RAM_FadeMdTmr).w
(1)  757/  FF05E6 : 6004                		bra.s	vidMd_Pal
(1)  758/  FF05E8 :                     Video_LoadPal:
(1)  759/  FF05E8 : 4DF8 A174           		lea	(RAM_Palette),a6
(1)  760/  FF05EC :                     vidMd_Pal:
(1)  761/  FF05EC : 2A48                		move.l	a0,a5
(1)  762/  FF05EE : 7E00                		moveq	#0,d7
(1)  763/  FF05F0 : 3E00                		move.w	d0,d7
(1)  764/  FF05F2 : DE47                		add.w	d7,d7
(1)  765/  FF05F4 : DCC7                		adda	d7,a6
(1)  766/  FF05F6 : 3E01                		move.w	d1,d7
(1)  767/  FF05F8 : 9E7C 0001           		sub.w	#1,d7
(1)  768/  FF05FC : 3C02                		move.w	d2,d6
(1)  769/  FF05FE : CC7C 0001           		and.w	#1,d6
(1)  770/  FF0602 : E25E                		ror.w	#1,d6
(1)  771/  FF0604 :                     .loop:
(1)  772/  FF0604 : 3CDD                		move.w	(a5)+,(a6)+
(1)  773/  FF0606 : 51CF FFFC           		dbf	d7,.loop
(1)  774/  FF060A : 4E75                		rts
(1)  775/  FF060C :                     
(1)  776/  FF060C :                     ; --------------------------------------------------------
(1)  777/  FF060C :                     ; Video_DoPalFade
(1)  778/  FF060C :                     ;
(1)  779/  FF060C :                     ; RAM_ReqFadeMars: (WORD)
(1)  780/  FF060C :                     ; $00 - No task or finished.
(1)  781/  FF060C :                     ; $01 - Fade in
(1)  782/  FF060C :                     ; $02 - Fade out to black
(1)  783/  FF060C :                     ;
(1)  784/  FF060C :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  785/  FF060C :                     ; --------------------------------------------------------
(1)  786/  FF060C :                     
(1)  787/  FF060C :                     Video_DoPalFade:
(1)  788/  FF060C : 0478 0001 A6E0      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  789/  FF0612 : 6A14                		bpl.s	.active
(1)  790/  FF0614 : 31F8 A6DE A6E0      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  791/  FF061A : 3E38 A6DA           		move.w	(RAM_FadeMdReq).w,d7
(1)  792/  FF061E : DE47                		add.w	d7,d7
(1)  793/  FF0620 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  794/  FF0624 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  795/  FF0628 :                     .active:
(1)  796/  FF0628 : 4E75                		rts
(1)  797/  FF062A :                     
(1)  798/  FF062A :                     ; --------------------------------------------
(1)  799/  FF062A :                     
(1)  800/  FF062A :                     .fade_list:
(1)  801/  FF062A : 0006                		dc.w .fade_done-.fade_list
(1)  802/  FF062C : 0008                		dc.w .fade_in-.fade_list
(1)  803/  FF062E : 00AC                		dc.w .fade_out-.fade_list
(1)  804/  FF0630 :                     
(1)  805/  FF0630 :                     ; --------------------------------------------
(1)  806/  FF0630 :                     ; No fade or finished.
(1)  807/  FF0630 :                     ; --------------------------------------------
(1)  808/  FF0630 :                     
(1)  809/  FF0630 :                     .fade_done:
(1)  810/  FF0630 : 4E75                		rts
(1)  811/  FF0632 :                     
(1)  812/  FF0632 :                     ; --------------------------------------------
(1)  813/  FF0632 :                     ; Fade in
(1)  814/  FF0632 :                     ; --------------------------------------------
(1)  815/  FF0632 :                     
(1)  816/  FF0632 :                     .fade_in:
(1)  817/  FF0632 : 4DF8 A1F4           		lea	(RAM_PaletteFd),a6
(1)  818/  FF0636 : 4BF8 A174           		lea	(RAM_Palette),a5
(1)  819/  FF063A : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  820/  FF063E : 3238 A6DC           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  821/  FF0642 : D241                		add.w	d1,d1
(1)  822/  FF0644 : 3C00                		move.w	d0,d6
(1)  823/  FF0646 : 4846                		swap	d6
(1)  824/  FF0648 : 907C 0001           		sub.w	#1,d0
(1)  825/  FF064C :                     .nxt_pal:
(1)  826/  FF064C : 4242                		clr.w	d2		; Reset finished colorbits
(1)  827/  FF064E : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  828/  FF0650 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  829/  FF0652 : 3607                		move.w	d7,d3		; RED
(1)  830/  FF0654 : 3806                		move.w	d6,d4
(1)  831/  FF0656 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  832/  FF065A : C87C 000E           		and.w	#%0000000000001110,d4
(1)  833/  FF065E : C67C 000E           		and.w	#%0000000000001110,d3
(1)  834/  FF0662 : D841                		add.w	d1,d4
(1)  835/  FF0664 : B843                		cmp.w	d3,d4
(1)  836/  FF0666 : 6506                		bcs.s	.no_red
(1)  837/  FF0668 : 3803                		move.w	d3,d4
(1)  838/  FF066A : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  839/  FF066E :                     .no_red:
(1)  840/  FF066E : 8C44                		or.w	d4,d6
(1)  841/  FF0670 : E949                		lsl.w	#4,d1
(1)  842/  FF0672 : 3607                		move.w	d7,d3		; GREEN
(1)  843/  FF0674 : 3806                		move.w	d6,d4
(1)  844/  FF0676 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  845/  FF067A : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  846/  FF067E : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  847/  FF0682 : D841                		add.w	d1,d4
(1)  848/  FF0684 : B843                		cmp.w	d3,d4
(1)  849/  FF0686 : 6506                		bcs.s	.no_grn
(1)  850/  FF0688 : 3803                		move.w	d3,d4
(1)  851/  FF068A : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  852/  FF068E :                     .no_grn:
(1)  853/  FF068E : 8C44                		or.w	d4,d6
(1)  854/  FF0690 : E949                		lsl.w	#4,d1
(1)  855/  FF0692 : 3607                		move.w	d7,d3		; BLUE
(1)  856/  FF0694 : 3806                		move.w	d6,d4
(1)  857/  FF0696 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  858/  FF069A : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  859/  FF069E : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  860/  FF06A2 : D841                		add.w	d1,d4
(1)  861/  FF06A4 : B843                		cmp.w	d3,d4
(1)  862/  FF06A6 : 6506                		bcs.s	.no_blu
(1)  863/  FF06A8 : 3803                		move.w	d3,d4
(1)  864/  FF06AA : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  865/  FF06AE :                     .no_blu:
(1)  866/  FF06AE : 8C44                		or.w	d4,d6
(1)  867/  FF06B0 : E049                		lsr.w	#8,d1
(1)  868/  FF06B2 : 3AC6                		move.w	d6,(a5)+
(1)  869/  FF06B4 : DCFC 0002           		adda	#2,a6
(1)  870/  FF06B8 : B47C 0007           		cmp.w	#%111,d2
(1)  871/  FF06BC : 6608                		bne.s	.no_fnsh
(1)  872/  FF06BE : 4846                		swap	d6
(1)  873/  FF06C0 : 9C7C 0001           		sub.w	#1,d6
(1)  874/  FF06C4 : 4846                		swap	d6
(1)  875/  FF06C6 :                     .no_fnsh:
(1)  876/  FF06C6 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  877/  FF06CA : 4846                		swap	d6
(1)  878/  FF06CC : 4A46                		tst.w	d6
(1)  879/  FF06CE : 6604                		bne.s	.no_move
(1)  880/  FF06D0 : 4278 A6DA           		clr.w	(RAM_FadeMdReq).w
(1)  881/  FF06D4 :                     .no_move:
(1)  882/  FF06D4 : 4E75                		rts
(1)  883/  FF06D6 :                     
(1)  884/  FF06D6 :                     ; --------------------------------------------
(1)  885/  FF06D6 :                     ; Fade out
(1)  886/  FF06D6 :                     ; --------------------------------------------
(1)  887/  FF06D6 :                     
(1)  888/  FF06D6 :                     .fade_out:
(1)  889/  FF06D6 : 4DF8 A174           		lea	(RAM_Palette),a6
(1)  890/  FF06DA : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  891/  FF06DE : 3238 A6DC           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  892/  FF06E2 : 3C00                		move.w	d0,d6
(1)  893/  FF06E4 : 4846                		swap	d6
(1)  894/  FF06E6 : 907C 0001           		sub.w	#1,d0
(1)  895/  FF06EA :                     .nxt_pal_o:
(1)  896/  FF06EA : 4242                		clr.w	d2			; Reset finished colorbits
(1)  897/  FF06EC : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  898/  FF06EE : 3C07                		move.w	d7,d6
(1)  899/  FF06F0 : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  900/  FF06F4 : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  901/  FF06F8 : 9C41                		sub.w	d1,d6
(1)  902/  FF06FA : 6A06                		bpl.s	.no_red_o
(1)  903/  FF06FC : 4246                		clr.w	d6
(1)  904/  FF06FE : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  905/  FF0702 :                     .no_red_o:
(1)  906/  FF0702 : 8E46                		or.w	d6,d7
(1)  907/  FF0704 : E949                		lsl.w	#4,d1
(1)  908/  FF0706 : 3C07                		move.w	d7,d6
(1)  909/  FF0708 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  910/  FF070C : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  911/  FF0710 : 9C41                		sub.w	d1,d6
(1)  912/  FF0712 : 6A06                		bpl.s	.no_grn_o
(1)  913/  FF0714 : 4246                		clr.w	d6
(1)  914/  FF0716 : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  915/  FF071A :                     .no_grn_o:
(1)  916/  FF071A : 8E46                		or.w	d6,d7
(1)  917/  FF071C : E949                		lsl.w	#4,d1
(1)  918/  FF071E : 3C07                		move.w	d7,d6
(1)  919/  FF0720 : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  920/  FF0724 : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  921/  FF0728 : 9C41                		sub.w	d1,d6
(1)  922/  FF072A : 6A06                		bpl.s	.no_blu_o
(1)  923/  FF072C : 4246                		clr.w	d6
(1)  924/  FF072E : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  925/  FF0732 :                     .no_blu_o:
(1)  926/  FF0732 : 8E46                		or.w	d6,d7
(1)  927/  FF0734 : E049                		lsr.w	#8,d1
(1)  928/  FF0736 : 3CC7                		move.w	d7,(a6)+
(1)  929/  FF0738 : B47C 0007           		cmp.w	#%111,d2
(1)  930/  FF073C : 6608                		bne.s	.no_fnsh_o
(1)  931/  FF073E : 4846                		swap	d6
(1)  932/  FF0740 : 9C7C 0001           		sub.w	#1,d6
(1)  933/  FF0744 : 4846                		swap	d6
(1)  934/  FF0746 :                     .no_fnsh_o:
(1)  935/  FF0746 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  936/  FF074A : 4846                		swap	d6
(1)  937/  FF074C : 4A46                		tst.w	d6
(1)  938/  FF074E : 6604                		bne.s	.no_move_o
(1)  939/  FF0750 : 4278 A6DA           		clr.w	(RAM_FadeMdReq).w
(1)  940/  FF0754 :                     .no_move_o:
(1)  941/  FF0754 : 4E75                		rts
(1)  942/  FF0756 :                     
(1)  943/  FF0756 :                     ; ====================================================================
(1)  944/  FF0756 :                     ; --------------------------------------------------------
(1)  945/  FF0756 :                     ; Genesis DMA
(1)  946/  FF0756 :                     ; --------------------------------------------------------
(1)  947/  FF0756 :                     
(1)  948/  FF0756 :                     ; --------------------------------------------------------
(1)  949/  FF0756 :                     ; Video_DmaMkEntry
(1)  950/  FF0756 :                     ;
(1)  951/  FF0756 :                     ; Sets a new DMA transfer task to the Blast list
(1)  952/  FF0756 :                     ;
(1)  953/  FF0756 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  954/  FF0756 :                     ;
(1)  955/  FF0756 :                     ; d0 | LONG - Art data
(1)  956/  FF0756 :                     ; d1 | WORD - VRAM location
(1)  957/  FF0756 :                     ; d2 | WORD - Size
(1)  958/  FF0756 :                     ;
(1)  959/  FF0756 :                     ; Breaks:
(1)  960/  FF0756 :                     ; d6-d7,a6
(1)  961/  FF0756 :                     ; --------------------------------------------------------
(1)  962/  FF0756 :                     
(1)  963/  FF0756 :                     Video_DmaMkEntry:
(1)  964/  FF0756 : 31FC 0001 A6D6      		move.w	#1,(RAM_VdpDmaMod).w
(1)  965/  FF075C : 4DF8 A474           		lea	(RAM_VdpDmaList).w,a6
(1)  966/  FF0760 : 3E38 A6D4           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  967/  FF0764 : DCC7                		adda	d7,a6
(1)  968/  FF0766 : DE7C 000E           		add.w	#7*2,d7
(1)  969/  FF076A : 31C7 A6D4           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  970/  FF076E : 3E02                		move.w	d2,d7			; Length
(1)  971/  FF0770 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  972/  FF0776 : E24F                		lsr.w	#1,d7
(1)  973/  FF0778 : 1C07                		move.b	d7,d6
(1)  974/  FF077A : 4846                		swap	d6
(1)  975/  FF077C : E04F                		lsr.w	#8,d7
(1)  976/  FF077E : 1C07                		move.b	d7,d6
(1)  977/  FF0780 : 4846                		swap	d6
(1)  978/  FF0782 : 2CC6                		move.l	d6,(a6)+
(1)  979/  FF0784 : 2E00                		move.l	d0,d7			; Source
(1)  980/  FF0786 : E28F                  		lsr.l	#1,d7
(1)  981/  FF0788 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1)  982/  FF078E : 1C07                 		move.b	d7,d6
(1)  983/  FF0790 : E08F                 		lsr.l	#8,d7
(1)  984/  FF0792 : 4846                 		swap	d6
(1)  985/  FF0794 : 1C07                 		move.b	d7,d6
(1)  986/  FF0796 : 2CC6                 		move.l	d6,(a6)+
(1)  987/  FF0798 : 3C3C 9700            		move.w	#$9700,d6
(1)  988/  FF079C : E08F                 		lsr.l	#8,d7
(1)  989/  FF079E : 1C07                 		move.b	d7,d6
(1)  990/  FF07A0 : 3CC6                 		move.w	d6,(a6)+
(1)  991/  FF07A2 : 3E01                		move.w	d1,d7			; Destination
(1)  992/  FF07A4 :                     ; 		and.w	#$7FF,d7
(1)  993/  FF07A4 :                     ; 		lsl.w	#5,d7
(1)  994/  FF07A4 : 3C07                		move.w	d7,d6
(1)  995/  FF07A6 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1)  996/  FF07AC : 0047 4000           		ori.w	#$4000,d7
(1)  997/  FF07B0 : E04E                		lsr.w	#8,d6
(1)  998/  FF07B2 : EC4E                		lsr.w	#6,d6
(1)  999/  FF07B4 : 0246 0003           		andi.w	#%11,d6
(1) 1000/  FF07B8 : 0046 0080           		ori.w	#$80,d6
(1) 1001/  FF07BC : 3CC7                		move.w	d7,(a6)+
(1) 1002/  FF07BE : 3CC6                		move.w	d6,(a6)+
(1) 1003/  FF07C0 : 31FC 0000 A6D6      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1004/  FF07C6 : 4E75                		rts
(1) 1005/  FF07C8 :                     
(1) 1006/  FF07C8 :                     ; --------------------------------------------------------
(1) 1007/  FF07C8 :                     ; Video_Fill
(1) 1008/  FF07C8 :                     ;
(1) 1009/  FF07C8 :                     ; Fill data to VRAM
(1) 1010/  FF07C8 :                     ;
(1) 1011/  FF07C8 :                     ; d0 | WORD - Bytes to fill
(1) 1012/  FF07C8 :                     ; d1 | WORD - VRAM position
(1) 1013/  FF07C8 :                     ; d2 | WORD - Size (WORDS)
(1) 1014/  FF07C8 :                     ;
(1) 1015/  FF07C8 :                     ; Breaks:
(1) 1016/  FF07C8 :                     ; d6-d7,a6
(1) 1017/  FF07C8 :                     ; --------------------------------------------------------
(1) 1018/  FF07C8 :                     
(1) 1019/  FF07C8 :                     Video_Fill:
(1) 1020/  FF07C8 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1021/  FF07CE : 3E3C 8100           		move.w	#$8100,d7
(1) 1022/  FF07D2 : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1) 1023/  FF07D6 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1024/  FF07DA : 3C87                		move.w	d7,(a6)
(1) 1025/  FF07DC : 3E16                .dmaw:		move.w	(a6),d7
(1) 1026/  FF07DE : 0807 0001           		btst	#bitDma,d7
(1) 1027/  FF07E2 : 66F8                		bne.s	.dmaw
(1) 1028/  FF07E4 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1029/  FF07E8 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1030/  FF07EA : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1031/  FF07F0 : 1C07                		move.b	d7,d6
(1) 1032/  FF07F2 : 4846                		swap	d6
(1) 1033/  FF07F4 : E04F                		lsr.w	#8,d7
(1) 1034/  FF07F6 : 1C07                		move.b	d7,d6
(1) 1035/  FF07F8 : 4846                		swap	d6
(1) 1036/  FF07FA : 2C86                		move.l	d6,(a6)
(1) 1037/  FF07FC : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1038/  FF0800 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1039/  FF0802 :                     ; 		lsl.w	#5,d7
(1) 1040/  FF0802 : 3C07                		move.w	d7,d6
(1) 1041/  FF0804 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1042/  FF0808 : 0046 4000           		ori.w	#$4000,d6
(1) 1043/  FF080C : 4846                		swap	d6
(1) 1044/  FF080E : 3C07                		move.w	d7,d6
(1) 1045/  FF0810 : E04E                		lsr.w	#8,d6
(1) 1046/  FF0812 : EC4E                		lsr.w	#6,d6
(1) 1047/  FF0814 : 0246 0003           		andi.w	#%11,d6
(1) 1048/  FF0818 : 0046 0080           		ori.w	#$80,d6
(1) 1049/  FF081C : 2C86                		move.l	d6,(a6)
(1) 1050/  FF081E : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1051/  FF0822 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1052/  FF0824 : 0807 0001           		btst	#bitDma,d7
(1) 1053/  FF0828 : 66F8                		bne.s	.dmawe
(1) 1054/  FF082A : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1055/  FF082E : 3E3C 8100           		move.w	#$8100,d7
(1) 1056/  FF0832 : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1) 1057/  FF0836 : 3C87                		move.w	d7,(a6)
(1) 1058/  FF0838 : 4E75                		rts
(1) 1059/  FF083A :                     
(1) 1060/  FF083A :                     ; --------------------------------------------------------
(1) 1061/  FF083A :                     ; Video_Copy
(1) 1062/  FF083A :                     ;
(1) 1063/  FF083A :                     ; Copy VRAM data to another location
(1) 1064/  FF083A :                     ;
(1) 1065/  FF083A :                     ; d0 | WORD - VRAM Source
(1) 1066/  FF083A :                     ; d1 | WORD - VRAM Destination
(1) 1067/  FF083A :                     ; d2 | WORD - Size
(1) 1068/  FF083A :                     ;
(1) 1069/  FF083A :                     ; Breaks:
(1) 1070/  FF083A :                     ; d6-d7,a6
(1) 1071/  FF083A :                     ; --------------------------------------------------------
(1) 1072/  FF083A :                     
(1) 1073/  FF083A :                     ; TODO: test if this works again...
(1) 1074/  FF083A :                     
(1) 1075/  FF083A :                     Video_Copy:
(1) 1076/  FF083A : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1077/  FF0840 : 3E3C 8100           		move.w	#$8100,d7
(1) 1078/  FF0844 : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1) 1079/  FF0848 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1080/  FF084C : 3C87                		move.w	d7,(a6)
(1) 1081/  FF084E : 3E16                .dmaw:		move.w	(a6),d7
(1) 1082/  FF0850 : 0807 0001           		btst	#bitDma,d7
(1) 1083/  FF0854 : 66F8                		bne.s	.dmaw
(1) 1084/  FF0856 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1085/  FF085A : 3E02                		move.w	d2,d7			; SIZE
(1) 1086/  FF085C : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1087/  FF0862 :                     ; 		lsr.w	#1,d7
(1) 1088/  FF0862 : 1C07                		move.b	d7,d6
(1) 1089/  FF0864 : 4846                		swap	d6
(1) 1090/  FF0866 : E04F                		lsr.w	#8,d7
(1) 1091/  FF0868 : 1C07                		move.b	d7,d6
(1) 1092/  FF086A : 4846                		swap	d6
(1) 1093/  FF086C : 2C86                		move.l	d6,(a6)
(1) 1094/  FF086E : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1095/  FF0874 : 3E00                		move.w	d0,d7
(1) 1096/  FF0876 : 1C07                		move.b	d7,d6
(1) 1097/  FF0878 : 4846                		swap	d6
(1) 1098/  FF087A : E04F                		lsr.w	#8,d7
(1) 1099/  FF087C : 1C07                		move.b	d7,d6
(1) 1100/  FF087E : 2C86                		move.l	d6,(a6)
(1) 1101/  FF0880 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1102/  FF0884 : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1103/  FF0886 :                     ; 		lsl.w	#5,d7
(1) 1104/  FF0886 : 3C07                		move.w	d7,d6
(1) 1105/  FF0888 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1106/  FF088C : 0046 4000           		ori.w	#$4000,d6
(1) 1107/  FF0890 : 4846                		swap	d6
(1) 1108/  FF0892 : 3C07                		move.w	d7,d6
(1) 1109/  FF0894 : E04E                		lsr.w	#8,d6
(1) 1110/  FF0896 : EC4E                		lsr.w	#6,d6
(1) 1111/  FF0898 : 0246 0003           		andi.w	#%11,d6
(1) 1112/  FF089C : 0046 00C0           		ori.w	#$C0,d6
(1) 1113/  FF08A0 : 2C86                		move.l	d6,(a6)
(1) 1114/  FF08A2 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1115/  FF08A6 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1116/  FF08A8 : 0807 0001           		btst	#bitDma,d7
(1) 1117/  FF08AC : 66F8                		bne.s	.dmawe
(1) 1118/  FF08AE : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1119/  FF08B2 : 3E3C 8100           		move.w	#$8100,d7
(1) 1120/  FF08B6 : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1) 1121/  FF08BA : 3C87                		move.w	d7,(a6)
(1) 1122/  FF08BC : 4E75                		rts
(1) 1123/  FF08BE :                     
(1) 1124/  FF08BE :                     ; --------------------------------------------------------
(1) 1125/  FF08BE :                     ; Load graphics using DMA, direct
(1) 1126/  FF08BE :                     ;
(1) 1127/  FF08BE :                     ; d0 | LONG - Art data
(1) 1128/  FF08BE :                     ; d1 | WORD - VRAM location
(1) 1129/  FF08BE :                     ; d2 | WORD - Size
(1) 1130/  FF08BE :                     ;
(1) 1131/  FF08BE :                     ; *** For faster transfers call this during VBlank ***
(1) 1132/  FF08BE :                     ;
(1) 1133/  FF08BE :                     ; Breaks:
(1) 1134/  FF08BE :                     ; d5-d7,a4-a6
(1) 1135/  FF08BE :                     ; --------------------------------------------------------
(1) 1136/  FF08BE :                     
(1) 1137/  FF08BE :                     Video_LoadArt:
(1) 1138/  FF08BE : 40E7                		move.w	sr,-(sp)
(1) 1139/  FF08C0 : 007C 0700           		or	#$700,sr
(1) 1140/  FF08C4 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1141/  FF08CA : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1142/  FF08CE : 1C38 A6EB           		move.b	(RAM_VdpRegs+1),d6
(1) 1143/  FF08D2 : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1144/  FF08D6 : 3886                		move.w	d6,(a4)
(1) 1145/  FF08D8 : 3C02                		move.w	d2,d6			; Length
(1) 1146/  FF08DA : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1147/  FF08E0 : E24E                		lsr.w	#1,d6
(1) 1148/  FF08E2 : 1A06                		move.b	d6,d5
(1) 1149/  FF08E4 : 4845                		swap	d5
(1) 1150/  FF08E6 : E04E                		lsr.w	#8,d6
(1) 1151/  FF08E8 : 1A06                		move.b	d6,d5
(1) 1152/  FF08EA : 4845                		swap	d5
(1) 1153/  FF08EC : 2885                		move.l	d5,(a4)
(1) 1154/  FF08EE : 2C00                		move.l	d0,d6			; Source
(1) 1155/  FF08F0 : E28E                  		lsr.l	#1,d6
(1) 1156/  FF08F2 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1157/  FF08F8 : 1A06                 		move.b	d6,d5
(1) 1158/  FF08FA : E08E                 		lsr.l	#8,d6
(1) 1159/  FF08FC : 4845                 		swap	d5
(1) 1160/  FF08FE : 1A06                 		move.b	d6,d5
(1) 1161/  FF0900 : 2885                 		move.l	d5,(a4)
(1) 1162/  FF0902 : 3A3C 9700            		move.w	#$9700,d5
(1) 1163/  FF0906 : E08E                 		lsr.l	#8,d6
(1) 1164/  FF0908 : 1A06                 		move.b	d6,d5
(1) 1165/  FF090A : 3885                 		move.w	d5,(a4)
(1) 1166/  FF090C : 3C01                		move.w	d1,d6			; Destination
(1) 1167/  FF090E : 3A06                		move.w	d6,d5
(1) 1168/  FF0910 : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1169/  FF0916 : 0046 4000           		ori.w	#$4000,d6
(1) 1170/  FF091A : E04D                		lsr.w	#8,d5
(1) 1171/  FF091C : EC4D                		lsr.w	#6,d5
(1) 1172/  FF091E : 0245 0003           		andi.w	#%11,d5
(1) 1173/  FF0922 : 0045 0080           		ori.w	#$80,d5
(1) 1174/  FF0926 : 2E00                		move.l	d0,d7
(1) 1175/  FF0928 : 4847                		swap	d7
(1) 1176/  FF092A : E04F                		lsr.w	#8,d7
(1) 1177/  FF092C : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1178/  FF0930 : 672E                		beq.s	.from_ram
(1) 1179/  FF0932 : 4EB9 00FF 127C      		jsr	System_Dma_Enter
(1) 1180/  FF0938 : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1181/  FF0940 : 3F05                 		move.w	d5,-(sp)
(1) 1182/  FF0942 : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1183/  FF0944 : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1184/  FF0946 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1185/  FF094E : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1186/  FF0952 : 1C38 A6EB           		move.b	(RAM_VdpRegs+1),d6
(1) 1187/  FF0956 : 3886                		move.w	d6,(a4)
(1) 1188/  FF0958 : 46DF                		move.w	(sp)+,sr
(1) 1189/  FF095A : 4EF9 00FF 1284      		jmp	System_Dma_Exit
(1) 1190/  FF0960 :                     .from_ram:
(1) 1191/  FF0960 : 3887                		move.w	d7,(a4)
(1) 1192/  FF0962 : 3F05                 		move.w	d5,-(sp)
(1) 1193/  FF0964 : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1194/  FF0966 : 3E3C 8100           		move.w	#$8100,d7
(1) 1195/  FF096A : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1) 1196/  FF096E : 3887                		move.w	d7,(a4)
(1) 1197/  FF0970 : 46DF                		move.w	(sp)+,sr
(1) 1198/  FF0972 : 4E75                		rts
(1) 1199/  FF0974 :                     
(1) 1200/  FF0974 :                     ; --------------------------------------------------------
(1) 1201/  FF0974 :                     ; Video_DmaBlast
(1) 1202/  FF0974 :                     ;
(1) 1203/  FF0974 :                     ; Process DMA tasks from a predefined list in RAM
(1) 1204/  FF0974 :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1205/  FF0974 :                     ;
(1) 1206/  FF0974 :                     ; Breaks:
(1) 1207/  FF0974 :                     ; d5-d7,a3-a4
(1) 1208/  FF0974 :                     ; --------------------------------------------------------
(1) 1209/  FF0974 :                     
(1) 1210/  FF0974 :                     ; Entry format:
(1) 1211/  FF0974 :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1212/  FF0974 :                     ; $40000080 (vdp destination + dma bit)
(1) 1213/  FF0974 :                     
(1) 1214/  FF0974 :                     Video_DmaBlast:
(1) 1215/  FF0974 : 4A78 A6D6           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1216/  FF0978 : 666A                		bne.s	.exit
(1) 1217/  FF097A : 4A78 A6D4           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1218/  FF097E : 6764                		beq.s	.exit
(1) 1219/  FF0980 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1220/  FF0986 : 47F8 A474           		lea	(RAM_VdpDmaList).w,a3
(1) 1221/  FF098A : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1222/  FF098E : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1) 1223/  FF0992 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1224/  FF0996 : 3887                		move.w	d7,(a4)
(1) 1225/  FF0998 : 4EB9 00FF 127C      		jsr	System_Dma_Enter		; Request Z80 stop and SH2 backup
(1) 1226/  FF099E : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1227/  FF09A6 : 4A78 A6D4           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1228/  FF09AA : 6720                		beq.s	.end
(1) 1229/  FF09AC : 2893                		move.l	(a3),(a4)			; Size
(1) 1230/  FF09AE : 429B                		clr.l	(a3)+
(1) 1231/  FF09B0 : 2893                		move.l	(a3),(a4)			; Source
(1) 1232/  FF09B2 : 429B                		clr.l	(a3)+
(1) 1233/  FF09B4 : 3893                		move.w	(a3),(a4)
(1) 1234/  FF09B6 : 425B                		clr.w	(a3)+
(1) 1235/  FF09B8 : 3C13                		move.w	(a3),d6				; Destination
(1) 1236/  FF09BA : 425B                		clr.w	(a3)+
(1) 1237/  FF09BC : 3A13                		move.w	(a3),d5
(1) 1238/  FF09BE : 425B                		clr.w	(a3)+
(1) 1239/  FF09C0 : 3886                		move.w	d6,(a4)
(1) 1240/  FF09C2 : 3885                		move.w	d5,(a4)
(1) 1241/  FF09C4 : 0478 000E A6D4      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1242/  FF09CA : 60DA                		bra.s	.next
(1) 1243/  FF09CC :                     .end:
(1) 1244/  FF09CC : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1245/  FF09D4 : 4EB9 00FF 1284      		jsr	System_Dma_Exit			; Resume Z80 and SH2 direct
(1) 1246/  FF09DA : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1247/  FF09DE : 1E38 A6EB           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1248/  FF09E2 : 3887                		move.w	d7,(a4)
(1) 1249/  FF09E4 :                     .exit:
(1) 1250/  FF09E4 : 4E75                		rts
(1) 1251/  FF09E6 :                     
(1) 1252/  FF09E6 :                     ; ====================================================================
(1) 1253/  FF09E6 :                     ; ----------------------------------------------------------------
(1) 1254/  FF09E6 :                     ; Video routines for 32X
(1) 1255/  FF09E6 :                     ; ----------------------------------------------------------------
(1) 1256/  FF09E6 :                     
(1) 1257/  FF09E6 :                     ; --------------------------------------------------------
(1) 1258/  FF09E6 :                     ; Video_Mars_GfxMode
(1) 1259/  FF09E6 :                     ; Sets graphics mode on the 32X side
(1) 1260/  FF09E6 :                     ;
(1) 1261/  FF09E6 :                     ; Input:
(1) 1262/  FF09E6 :                     ; d0 - Graphics mode
(1) 1263/  FF09E6 :                     ; --------------------------------------------------------
(1) 1264/  FF09E6 :                     
(1) 1265/  FF09E6 :                     Video_Mars_GfxMode:
(1) 1266/  FF09E6 : 3C00                		move.w	d0,d6
(1) 1267/  FF09E8 : CC7C 0007           		and.w	#%00000111,d6			; Current limit: 8 modes
(1) 1268/  FF09EC : 08C6 0007           		bset	#7,d6
(1) 1269/  FF09F0 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Grab current comm12
(1) 1270/  FF09F6 : CE7C FF00           		and.w	#$FF00,d7			; Clear our byte
(1) 1271/  FF09FA : 8E46                		or.w	d6,d7				; merge changes
(1) 1272/  FF09FC : 33C7 00A1 512C      		move.w	d7,(sysmars_reg+comm12).l	; Write into it.
(1) 1273/  FF0A02 :                     ; .wait:		move.w	(sysmars_reg+comm12).l,d7
(1) 1274/  FF0A02 :                     ; 		and.w	#%11000000,d7
(1) 1275/  FF0A02 :                     ; 		bne.s	.wait
(1) 1276/  FF0A02 :                     ; 		rts
(1) 1277/  FF0A02 :                     
(1) 1278/  FF0A02 :                     ; --------------------------------------------------------
(1) 1279/  FF0A02 :                     ; Video_MarsRedraw
(1) 1280/  FF0A02 :                     ;
(1) 1281/  FF0A02 :                     ; Call this to redraw the entire screen
(1) 1282/  FF0A02 :                     ; on the 32X side.
(1) 1283/  FF0A02 :                     ; --------------------------------------------------------
(1) 1284/  FF0A02 :                     
(1) 1285/  FF0A02 :                     ; Video_Mars_Redraw:
(1) 1286/  FF0A02 :                     ; 		move.w	(sysmars_reg+comm12).l,d7
(1) 1287/  FF0A02 :                     ; 		bset	#7,d7
(1) 1288/  FF0A02 :                     ; 		move.w	d7,(sysmars_reg+comm12).l
(1) 1289/  FF0A02 :                     Video_Mars_WaitInit:
(1) 1290/  FF0A02 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7
(1) 1291/  FF0A08 : CE7C 00C0           		and.w	#%11000000,d7
(1) 1292/  FF0A0C : 66F4                		bne.s	Video_Mars_WaitInit
(1) 1293/  FF0A0E : 4E75                		rts
(1) 1294/  FF0A10 :                     
(1) 1295/  FF0A10 :                     ; --------------------------------------------------------
(1) 1296/  FF0A10 :                     ; Video_Mars_WaitFrame
(1) 1297/  FF0A10 :                     ;
(1) 1298/  FF0A10 :                     ;
(1) 1299/  FF0A10 :                     ; on the 32X side.
(1) 1300/  FF0A10 :                     ; --------------------------------------------------------
(1) 1301/  FF0A10 :                     
(1) 1302/  FF0A10 :                     Video_Mars_WaitFrame:
(1) 1303/  FF0A10 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Set R bit
(1) 1304/  FF0A16 : 08C7 0006           		bset	#6,d7
(1) 1305/  FF0A1A : 33C7 00A1 512C      		move.w	d7,(sysmars_reg+comm12).l
(1) 1306/  FF0A20 :                     .wait:
(1) 1307/  FF0A20 : 3E39 00C0 0004      		move.w	(vdp_ctrl),d7
(1) 1308/  FF0A26 : 0807 0003           		btst	#bitVBlk,d7
(1) 1309/  FF0A2A : 660C                		bne.s	.late
(1) 1310/  FF0A2C : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7
(1) 1311/  FF0A32 : 0807 0006           		btst	#6,d7
(1) 1312/  FF0A36 : 66E8                		bne.s	.wait
(1) 1313/  FF0A38 :                     .late:
(1) 1314/  FF0A38 : 4E75                		rts
(1) 1315/  FF0A3A :                     
(1) 1316/  FF0A3A :                     ; --------------------------------------------------------
(1) 1317/  FF0A3A :                     ; Video_LoadPal_Mars
(1) 1318/  FF0A3A :                     ;
(1) 1319/  FF0A3A :                     ; Load Indexed palette directly to Buffer
(1) 1320/  FF0A3A :                     ;
(1) 1321/  FF0A3A :                     ; d0 - Start at
(1) 1322/  FF0A3A :                     ; d1 - Number of colors
(1) 1323/  FF0A3A :                     ; d2 - Priority bit OFF/ON
(1) 1324/  FF0A3A :                     ; --------------------------------------------------------
(1) 1325/  FF0A3A :                     
(1) 1326/  FF0A3A :                     Video_FadePal_Mars:
(1) 1327/  FF0A3A : 4DF8 A274           		lea	(RAM_MdMarsPalFd),a6
(1) 1328/  FF0A3E : 4278 A6E8           		clr.w	(RAM_FadeMarsTmr).w
(1) 1329/  FF0A42 : 6004                		bra.s	vidMars_Pal
(1) 1330/  FF0A44 :                     Video_LoadPal_Mars:
(1) 1331/  FF0A44 : 4DF8 AB62           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1332/  FF0A48 :                     vidMars_Pal:
(1) 1333/  FF0A48 : 2A48                		move.l	a0,a5
(1) 1334/  FF0A4A : 7E00                		moveq	#0,d7
(1) 1335/  FF0A4C : 3E00                		move.w	d0,d7
(1) 1336/  FF0A4E : DE47                		add.w	d7,d7
(1) 1337/  FF0A50 : DCC7                		adda	d7,a6
(1) 1338/  FF0A52 : 3E01                		move.w	d1,d7
(1) 1339/  FF0A54 : 9E7C 0001           		sub.w	#1,d7
(1) 1340/  FF0A58 : 3C02                		move.w	d2,d6
(1) 1341/  FF0A5A : CC7C 0001           		and.w	#1,d6
(1) 1342/  FF0A5E : E25E                		ror.w	#1,d6
(1) 1343/  FF0A60 :                     .loop:
(1) 1344/  FF0A60 : 3A1D                		move.w	(a5)+,d5
(1) 1345/  FF0A62 : 8A46                		or.w	d6,d5
(1) 1346/  FF0A64 : 3CC5                		move.w	d5,(a6)+
(1) 1347/  FF0A66 : 51CF FFF8           		dbf	d7,.loop
(1) 1348/  FF0A6A : 4E75                		rts
(1) 1349/  FF0A6C :                     
(1) 1350/  FF0A6C :                     ; --------------------------------------------------------
(1) 1351/  FF0A6C :                     ; Video_MarsPalFade
(1) 1352/  FF0A6C :                     ;
(1) 1353/  FF0A6C :                     ; a0 - Palette data
(1) 1354/  FF0A6C :                     ; d0 - Number of colors
(1) 1355/  FF0A6C :                     ; d1 - Speed
(1) 1356/  FF0A6C :                     ;
(1) 1357/  FF0A6C :                     ; RAM_ReqFadeMars: (WORD)
(1) 1358/  FF0A6C :                     ; $00 - No task (or finished)
(1) 1359/  FF0A6C :                     ; $01 - Fade in
(1) 1360/  FF0A6C :                     ; $02 - Fade out to black
(1) 1361/  FF0A6C :                     ;
(1) 1362/  FF0A6C :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1363/  FF0A6C :                     ; --------------------------------------------------------
(1) 1364/  FF0A6C :                     
(1) 1365/  FF0A6C :                     ; TODO: luego ver que hago con el priority bit
(1) 1366/  FF0A6C :                     
(1) 1367/  FF0A6C :                     Video_MarsPalFade:
(1) 1368/  FF0A6C : 0478 0001 A6E8      		sub.w	#1,(RAM_FadeMarsTmr).w
(1) 1369/  FF0A72 : 6A14                		bpl.s	.active
(1) 1370/  FF0A74 : 31F8 A6E6 A6E8      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 1371/  FF0A7A : 3E38 A6E2           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1372/  FF0A7E : DE47                		add.w	d7,d7
(1) 1373/  FF0A80 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 1374/  FF0A84 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 1375/  FF0A88 :                     .active:
(1) 1376/  FF0A88 : 4E75                		rts
(1) 1377/  FF0A8A :                     
(1) 1378/  FF0A8A :                     ; --------------------------------------------
(1) 1379/  FF0A8A :                     
(1) 1380/  FF0A8A :                     .fade_list:
(1) 1381/  FF0A8A : 0006                		dc.w .fade_done-.fade_list
(1) 1382/  FF0A8C : 0008                		dc.w .fade_in-.fade_list
(1) 1383/  FF0A8E : 00B2                		dc.w .fade_out-.fade_list
(1) 1384/  FF0A90 :                     
(1) 1385/  FF0A90 :                     ; --------------------------------------------
(1) 1386/  FF0A90 :                     ; No fade or finished.
(1) 1387/  FF0A90 :                     ; --------------------------------------------
(1) 1388/  FF0A90 :                     
(1) 1389/  FF0A90 :                     .fade_done:
(1) 1390/  FF0A90 : 4E75                		rts
(1) 1391/  FF0A92 :                     
(1) 1392/  FF0A92 :                     ; --------------------------------------------
(1) 1393/  FF0A92 :                     ; Fade in
(1) 1394/  FF0A92 :                     ; --------------------------------------------
(1) 1395/  FF0A92 :                     
(1) 1396/  FF0A92 :                     .fade_in:
(1) 1397/  FF0A92 : 4DF8 A274           		lea	(RAM_MdMarsPalFd),a6
(1) 1398/  FF0A96 : 4BF8 AB62           		lea	(RAM_MdDreq+Dreq_Palette).w,a5
(1) 1399/  FF0A9A : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1400/  FF0A9E : 3238 A6E4           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1401/  FF0AA2 : 3C00                		move.w	d0,d6
(1) 1402/  FF0AA4 : 4846                		swap	d6
(1) 1403/  FF0AA6 : 907C 0001           		sub.w	#1,d0
(1) 1404/  FF0AAA :                     .nxt_pal:
(1) 1405/  FF0AAA : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1406/  FF0AAC : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1407/  FF0AAE : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1408/  FF0AB0 : 3607                		move.w	d7,d3		; RED
(1) 1409/  FF0AB2 : 3806                		move.w	d6,d4
(1) 1410/  FF0AB4 : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 1411/  FF0AB8 : C87C 001F           		and.w	#%0000000000011111,d4
(1) 1412/  FF0ABC : C67C 001F           		and.w	#%0000000000011111,d3
(1) 1413/  FF0AC0 : D841                		add.w	d1,d4
(1) 1414/  FF0AC2 : B843                		cmp.w	d3,d4
(1) 1415/  FF0AC4 : 6506                		bcs.s	.no_red
(1) 1416/  FF0AC6 : 3803                		move.w	d3,d4
(1) 1417/  FF0AC8 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1418/  FF0ACC :                     .no_red:
(1) 1419/  FF0ACC : 8C44                		or.w	d4,d6
(1) 1420/  FF0ACE : EB49                		lsl.w	#5,d1
(1) 1421/  FF0AD0 : 3607                		move.w	d7,d3		; GREEN
(1) 1422/  FF0AD2 : 3806                		move.w	d6,d4
(1) 1423/  FF0AD4 : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 1424/  FF0AD8 : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 1425/  FF0ADC : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 1426/  FF0AE0 : D841                		add.w	d1,d4
(1) 1427/  FF0AE2 : B843                		cmp.w	d3,d4
(1) 1428/  FF0AE4 : 6506                		bcs.s	.no_grn
(1) 1429/  FF0AE6 : 3803                		move.w	d3,d4
(1) 1430/  FF0AE8 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1431/  FF0AEC :                     .no_grn:
(1) 1432/  FF0AEC : 8C44                		or.w	d4,d6
(1) 1433/  FF0AEE : EB49                		lsl.w	#5,d1
(1) 1434/  FF0AF0 : 3607                		move.w	d7,d3		; BLUE
(1) 1435/  FF0AF2 : 3806                		move.w	d6,d4
(1) 1436/  FF0AF4 : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 1437/  FF0AF8 : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 1438/  FF0AFC : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 1439/  FF0B00 : D841                		add.w	d1,d4
(1) 1440/  FF0B02 : B843                		cmp.w	d3,d4
(1) 1441/  FF0B04 : 6506                		bcs.s	.no_blu
(1) 1442/  FF0B06 : 3803                		move.w	d3,d4
(1) 1443/  FF0B08 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1444/  FF0B0C :                     .no_blu:
(1) 1445/  FF0B0C : 8C44                		or.w	d4,d6
(1) 1446/  FF0B0E : E049                		lsr.w	#8,d1
(1) 1447/  FF0B10 : E449                		lsr.w	#2,d1
(1) 1448/  FF0B12 : CE7C 8000           		and.w	#$8000,d7	; Keep priority bit
(1) 1449/  FF0B16 : 8C47                		or.w	d7,d6
(1) 1450/  FF0B18 : 3AC6                		move.w	d6,(a5)+
(1) 1451/  FF0B1A : DCFC 0002           		adda	#2,a6
(1) 1452/  FF0B1E : B47C 0007           		cmp.w	#%111,d2
(1) 1453/  FF0B22 : 6608                		bne.s	.no_fnsh
(1) 1454/  FF0B24 : 4846                		swap	d6
(1) 1455/  FF0B26 : 9C7C 0001           		sub.w	#1,d6
(1) 1456/  FF0B2A : 4846                		swap	d6
(1) 1457/  FF0B2C :                     .no_fnsh:
(1) 1458/  FF0B2C : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 1459/  FF0B30 : 4846                		swap	d6
(1) 1460/  FF0B32 : 4A46                		tst.w	d6
(1) 1461/  FF0B34 : 6604                		bne.s	.no_move
(1) 1462/  FF0B36 : 4278 A6E2           		clr.w	(RAM_FadeMarsReq).w
(1) 1463/  FF0B3A :                     .no_move:
(1) 1464/  FF0B3A : 4E75                		rts
(1) 1465/  FF0B3C :                     
(1) 1466/  FF0B3C :                     ; --------------------------------------------
(1) 1467/  FF0B3C :                     ; Fade out
(1) 1468/  FF0B3C :                     ; --------------------------------------------
(1) 1469/  FF0B3C :                     
(1) 1470/  FF0B3C :                     .fade_out:
(1) 1471/  FF0B3C : 4DF8 AB62           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1472/  FF0B40 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1473/  FF0B44 : 3238 A6E4           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1474/  FF0B48 : 3C00                		move.w	d0,d6
(1) 1475/  FF0B4A : 4846                		swap	d6
(1) 1476/  FF0B4C : 907C 0001           		sub.w	#1,d0
(1) 1477/  FF0B50 :                     .nxt_pal_o:
(1) 1478/  FF0B50 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1479/  FF0B52 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1480/  FF0B54 : 3C07                		move.w	d7,d6
(1) 1481/  FF0B56 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 1482/  FF0B5A : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 1483/  FF0B5E : 9C41                		sub.w	d1,d6
(1) 1484/  FF0B60 : 6A06                		bpl.s	.no_red_o
(1) 1485/  FF0B62 : 4246                		clr.w	d6
(1) 1486/  FF0B64 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1487/  FF0B68 :                     .no_red_o:
(1) 1488/  FF0B68 : 8E46                		or.w	d6,d7
(1) 1489/  FF0B6A : EB49                		lsl.w	#5,d1
(1) 1490/  FF0B6C : 3C07                		move.w	d7,d6
(1) 1491/  FF0B6E : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 1492/  FF0B72 : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 1493/  FF0B76 : 9C41                		sub.w	d1,d6
(1) 1494/  FF0B78 : 6A06                		bpl.s	.no_grn_o
(1) 1495/  FF0B7A : 4246                		clr.w	d6
(1) 1496/  FF0B7C : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1497/  FF0B80 :                     .no_grn_o:
(1) 1498/  FF0B80 : 8E46                		or.w	d6,d7
(1) 1499/  FF0B82 : EB49                		lsl.w	#5,d1
(1) 1500/  FF0B84 : 3C07                		move.w	d7,d6
(1) 1501/  FF0B86 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 1502/  FF0B8A : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 1503/  FF0B8E : 9C41                		sub.w	d1,d6
(1) 1504/  FF0B90 : 6A06                		bpl.s	.no_blu_o
(1) 1505/  FF0B92 : 4246                		clr.w	d6
(1) 1506/  FF0B94 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1507/  FF0B98 :                     .no_blu_o:
(1) 1508/  FF0B98 : 8E46                		or.w	d6,d7
(1) 1509/  FF0B9A : E049                		lsr.w	#8,d1
(1) 1510/  FF0B9C : E449                		lsr.w	#2,d1
(1) 1511/  FF0B9E : 3CC7                		move.w	d7,(a6)+
(1) 1512/  FF0BA0 : B47C 0007           		cmp.w	#%111,d2
(1) 1513/  FF0BA4 : 6608                		bne.s	.no_fnsh_o
(1) 1514/  FF0BA6 : 4846                		swap	d6
(1) 1515/  FF0BA8 : 9C7C 0001           		sub.w	#1,d6
(1) 1516/  FF0BAC : 4846                		swap	d6
(1) 1517/  FF0BAE :                     .no_fnsh_o:
(1) 1518/  FF0BAE : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1519/  FF0BB2 : 4846                		swap	d6
(1) 1520/  FF0BB4 : 4A46                		tst.w	d6
(1) 1521/  FF0BB6 : 6604                		bne.s	.no_move_o
(1) 1522/  FF0BB8 : 4278 A6E2           		clr.w	(RAM_FadeMarsReq).w
(1) 1523/  FF0BBC :                     .no_move_o:
(1) 1524/  FF0BBC : 4E75                		rts
(1) 1525/  FF0BBE :                     
(1) 1526/  FF0BBE :                     ; ====================================================================
(1) 1527/  FF0BBE :                     ; ----------------------------------------------------------------
(1) 1528/  FF0BBE :                     ; MAP layout system
(1) 1529/  FF0BBE :                     ;
(1) 1530/  FF0BBE :                     ; Note: uses some RAM'd video registers.
(1) 1531/  FF0BBE :                     ; ----------------------------------------------------------------
(1) 1532/  FF0BBE :                     
(1) 1533/  FF0BBE :                     ; --------------------------------------------------------
(1) 1534/  FF0BBE :                     ; MdMap_Init
(1) 1535/  FF0BBE :                     ;
(1) 1536/  FF0BBE :                     ; Initializes all BG buffers
(1) 1537/  FF0BBE :                     ; --------------------------------------------------------
(1) 1538/  FF0BBE :                     
(1) 1539/  FF0BBE :                     MdMap_Init:
(1) 1540/  FF0BBE : 41F8 9820           		lea	(RAM_BgBuffer),a0
(1) 1541/  FF0BC2 : 323C 0037           		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1542/  FF0BC6 : 7000                		moveq	#0,d0
(1) 1543/  FF0BC8 :                     .clr:
(1) 1544/  FF0BC8 : 20C0                		move.l	d0,(a0)+
(1) 1545/  FF0BCA : 51C9 FFFC           		dbf	d1,.clr
(1) 1546/  FF0BCE : 4E75                		rts
(1) 1547/  FF0BD0 :                     
(1) 1548/  FF0BD0 :                     ; --------------------------------------------------------
(1) 1549/  FF0BD0 :                     ; MdMap_Set
(1) 1550/  FF0BD0 :                     ;
(1) 1551/  FF0BD0 :                     ; Sets a new scrolling section to use.
(1) 1552/  FF0BD0 :                     ;
(1) 1553/  FF0BD0 :                     ; **X and Y COORDS ARE SET EXTERNALLY
(1) 1554/  FF0BD0 :                     ; BEFORE GETTING HERE**
(1) 1555/  FF0BD0 :                     ;
(1) 1556/  FF0BD0 :                     ; Input:
(1) 1557/  FF0BD0 :                     ; ** Genesis side **
(1) 1558/  FF0BD0 :                     ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1559/  FF0BD0 :                     ; d1 | WORD - VRAM location for map data
(1) 1560/  FF0BD0 :                     ; d2 | WORD - VRAM add + palette
(1) 1561/  FF0BD0 :                     ; d3 | X start
(1) 1562/  FF0BD0 :                     ; d4 | Y start
(1) 1563/  FF0BD0 :                     ; a0 - Level header data:
(1) 1564/  FF0BD0 :                     ; 	dc.w width,height
(1) 1565/  FF0BD0 :                     ; 	dc.b blkwidth,blkheight
(1) 1566/  FF0BD0 :                     ; a1 - Block data
(1) 1567/  FF0BD0 :                     ; a2 - LOW priority layout data
(1) 1568/  FF0BD0 :                     ; a3 - HIGH priority layout data
(1) 1569/  FF0BD0 :                     ; d4 - Collision data
(1) 1570/  FF0BD0 :                     ;
(1) 1571/  FF0BD0 :                     ; Then load the graphics externally at the same
(1) 1572/  FF0BD0 :                     ; location set in d2
(1) 1573/  FF0BD0 :                     ;
(1) 1574/  FF0BD0 :                     ;
(1) 1575/  FF0BD0 :                     ; ** 32X side **
(1) 1576/  FF0BD0 :                     ; d0 | WORD - Write as -1
(1) 1577/  FF0BD0 :                     ; d1 | WORD - Scroll buffer to use on the 32X side
(1) 1578/  FF0BD0 :                     ; d2 | WORD - Index-palette increment
(1) 1579/  FF0BD0 :                     ; d3 | X start
(1) 1580/  FF0BD0 :                     ; d4 | Y start
(1) 1581/  FF0BD0 :                     ; a0 - Level header data: (GENESIS SIDE)
(1) 1582/  FF0BD0 :                     ; 	dc.w width,height
(1) 1583/  FF0BD0 :                     ; 	dc.b blkwidth,blkheight
(1) 1584/  FF0BD0 :                     ; a1 - Graphics data stored as blocks (*SH2 SIDE)
(1) 1585/  FF0BD0 :                     ; a2 - MAIN layout (*SH2 SIDE)
(1) 1586/  FF0BD0 :                     ; a3 - SUB layout (*for later, set to 0*)
(1) 1587/  FF0BD0 :                     ; a4 - Collision data
(1) 1588/  FF0BD0 :                     ;
(1) 1589/  FF0BD0 :                     ; Uses:
(1) 1590/  FF0BD0 :                     ; d0,d6-d7
(1) 1591/  FF0BD0 :                     ; --------------------------------------------------------
(1) 1592/  FF0BD0 :                     
(1) 1593/  FF0BD0 :                     MdMap_Set:
(1) 1594/  FF0BD0 : 4A40                		tst.w	d0
(1) 1595/  FF0BD2 : 6A0C                		bpl.s	.md_side
(1) 1596/  FF0BD4 : 4DF8 AD62           		lea	(RAM_BgBufferM),a6
(1) 1597/  FF0BD8 : 08EE 0006 0003      		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1598/  FF0BDE : 6010                		bra.s	.mars_side
(1) 1599/  FF0BE0 :                     .md_side:
(1) 1600/  FF0BE0 : 4DF8 9820           		lea	(RAM_BgBuffer),a6
(1) 1601/  FF0BE4 : C0FC 0038           		mulu.w	#sizeof_mdbg,d0
(1) 1602/  FF0BE8 : DCC0                		adda	d0,a6
(1) 1603/  FF0BEA : 08AE 0006 0003      		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1604/  FF0BF0 :                     .mars_side:
(1) 1605/  FF0BF0 : 3D41 001C           		move.w	d1,md_bg_vpos(a6)
(1) 1606/  FF0BF4 : 3D42 001E           		move.w	d2,md_bg_vram(a6)
(1) 1607/  FF0BF8 :                     
(1) 1608/  FF0BF8 : 7E00                		moveq	#0,d7
(1) 1609/  FF0BFA : 3E03                		move.w	d3,d7
(1) 1610/  FF0BFC : 4847                		swap	d7
(1) 1611/  FF0BFE : 2D47 0030           		move.l	d7,md_bg_x(a6)
(1) 1612/  FF0C02 : 3D43 0018           		move.w	d3,md_bg_x_old(a6)
(1) 1613/  FF0C06 : 1D43 0004           		move.b	d3,md_bg_xset(a6)
(1) 1614/  FF0C0A : 7E00                		moveq	#0,d7
(1) 1615/  FF0C0C : 3E04                		move.w	d4,d7
(1) 1616/  FF0C0E : 4847                		swap	d7
(1) 1617/  FF0C10 : 2D47 0034           		move.l	d7,md_bg_y(a6)
(1) 1618/  FF0C14 : 3D44 001A           		move.w	d4,md_bg_y_old(a6)
(1) 1619/  FF0C18 : 1D43 0005           		move.b	d3,md_bg_yset(a6)
(1) 1620/  FF0C1C :                     
(1) 1621/  FF0C1C : 4843                		swap	d3
(1) 1622/  FF0C1E : 4844                		swap	d4
(1) 1623/  FF0C20 : 2D49 0028           		move.l	a1,md_bg_blk(a6)
(1) 1624/  FF0C24 : 2D4A 0020           		move.l	a2,md_bg_low(a6)
(1) 1625/  FF0C28 : 2D4B 0024           		move.l	a3,md_bg_hi(a6)
(1) 1626/  FF0C2C : 2D4C 002C           		move.l	a4,md_bg_col(a6)
(1) 1627/  FF0C30 : 2A48                		move.l	a0,a5
(1) 1628/  FF0C32 : 3E1D                		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1629/  FF0C34 : 3C1D                		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1630/  FF0C36 : 181D                		move.b	(a5)+,d4	; BLOCK width
(1) 1631/  FF0C38 : 161D                		move.b	(a5)+,d3	; BLOCK height
(1) 1632/  FF0C3A : C87C 00FF           		and.w	#$FF,d4
(1) 1633/  FF0C3E : C67C 00FF           		and.w	#$FF,d3
(1) 1634/  FF0C42 : 3D47 0008           		move.w	d7,md_bg_w(a6)
(1) 1635/  FF0C46 : 3D46 000A           		move.w	d6,md_bg_h(a6)
(1) 1636/  FF0C4A : 1C84                		move.b	d4,md_bg_bw(a6)
(1) 1637/  FF0C4C : 1D43 0001           		move.b	d3,md_bg_bh(a6)
(1) 1638/  FF0C50 : CEC4                		mulu.w	d4,d7
(1) 1639/  FF0C52 : CCC3                		mulu.w	d3,d6
(1) 1640/  FF0C54 : 3D47 000C           		move.w	d7,md_bg_wf(a6)
(1) 1641/  FF0C58 : 3D46 000E           		move.w	d6,md_bg_hf(a6)
(1) 1642/  FF0C5C : 987C 0001           		sub.w	#1,d4
(1) 1643/  FF0C60 : 967C 0001           		sub.w	#1,d3
(1) 1644/  FF0C64 : C92E 0004           		and.b	d4,md_bg_xset(a6)
(1) 1645/  FF0C68 : C72E 0005           		and.b	d3,md_bg_yset(a6)
(1) 1646/  FF0C6C : 4843                		swap	d3
(1) 1647/  FF0C6E : 4844                		swap	d4
(1) 1648/  FF0C70 :                     
(1) 1649/  FF0C70 :                     	; TODO: cleanup
(1) 1650/  FF0C70 : 362E 0030           		move.w	md_bg_x(a6),d3
(1) 1651/  FF0C74 : 382E 0034           		move.w	md_bg_y(a6),d4
(1) 1652/  FF0C78 :                     	; X beams
(1) 1653/  FF0C78 : B647                .xl_l:		cmp.w	d7,d3
(1) 1654/  FF0C7A : 6D04                		blt.s	.xl_g
(1) 1655/  FF0C7C : 9647                		sub.w	d7,d3
(1) 1656/  FF0C7E : 60F8                		bra.s	.xl_l
(1) 1657/  FF0C80 :                     .xl_g:
(1) 1658/  FF0C80 : 3D43 0010           		move.w	d3,md_bg_xinc_l(a6)
(1) 1659/  FF0C84 : D67C 0140           		add.w	#320,d3				; <-- X resolution R
(1) 1660/  FF0C88 : B647                .xr_l:		cmp.w	d7,d3
(1) 1661/  FF0C8A : 6D04                		blt.s	.xr_g
(1) 1662/  FF0C8C : 9647                		sub.w	d7,d3
(1) 1663/  FF0C8E : 60F8                		bra.s	.xr_l
(1) 1664/  FF0C90 :                     .xr_g:
(1) 1665/  FF0C90 : 3D43 0012           		move.w	d3,md_bg_xinc_r(a6)
(1) 1666/  FF0C94 :                     
(1) 1667/  FF0C94 :                     	; Y beams
(1) 1668/  FF0C94 : B846                .yt_l:		cmp.w	d6,d4
(1) 1669/  FF0C96 : 6D04                		blt.s	.yt_g
(1) 1670/  FF0C98 : 9846                		sub.w	d6,d4
(1) 1671/  FF0C9A : 60F8                		bra.s	.yt_l
(1) 1672/  FF0C9C :                     .yt_g:
(1) 1673/  FF0C9C : 3D44 0014           		move.w	d4,md_bg_yinc_u(a6)
(1) 1674/  FF0CA0 : D87C 00E0           		add.w	#224,d4				; <-- Y resolution B
(1) 1675/  FF0CA4 : B846                .yb_l:		cmp.w	d6,d4
(1) 1676/  FF0CA6 : 6D04                		blt.s	.yb_g
(1) 1677/  FF0CA8 : 9846                		sub.w	d6,d4
(1) 1678/  FF0CAA : 60F8                		bra.s	.yb_l
(1) 1679/  FF0CAC :                     .yb_g:
(1) 1680/  FF0CAC : 3D44 0016           		move.w	d4,md_bg_yinc_d(a6)
(1) 1681/  FF0CB0 :                     
(1) 1682/  FF0CB0 : 08EE 0007 0003      		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1683/  FF0CB6 : 4E75                		rts
(1) 1684/  FF0CB8 :                     
(1) 1685/  FF0CB8 :                     ; --------------------------------------------------------
(1) 1686/  FF0CB8 :                     ; MdMap_Update
(1) 1687/  FF0CB8 :                     ;
(1) 1688/  FF0CB8 :                     ; Updates backgrounds internally
(1) 1689/  FF0CB8 :                     ;
(1) 1690/  FF0CB8 :                     ; For drawing the changes call MdMap_DrawScrl
(1) 1691/  FF0CB8 :                     ; on VBlank, this also applies to the 32X side as this
(1) 1692/  FF0CB8 :                     ; routine clears the draw bits there.
(1) 1693/  FF0CB8 :                     ;
(1) 1694/  FF0CB8 :                     ; For the 32X:
(1) 1695/  FF0CB8 :                     ; Call System_MarsUpdate AFTER this.
(1) 1696/  FF0CB8 :                     ; --------------------------------------------------------
(1) 1697/  FF0CB8 :                     
(1) 1698/  FF0CB8 :                     MdMap_Update:
(1) 1699/  FF0CB8 : 4DF8 AD62           		lea	(RAM_BgBufferM),a6
(1) 1700/  FF0CBC : 610A                		bsr.s	.this_bg
(1) 1701/  FF0CBE : 4DF8 9820           		lea	(RAM_BgBuffer),a6
(1) 1702/  FF0CC2 : 6104                		bsr.s	.this_bg
(1) 1703/  FF0CC4 : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 1704/  FF0CC8 :                     .this_bg:
(1) 1705/  FF0CC8 : 082E 0007 0003      		btst	#bitBgOn,md_bg_flags(a6)
(1) 1706/  FF0CCE : 6700 00AE           		beq	.no_bg
(1) 1707/  FF0CD2 : 7200                		moveq	#0,d1
(1) 1708/  FF0CD4 : 7400                		moveq	#0,d2
(1) 1709/  FF0CD6 : 362E 0030           		move.w	md_bg_x(a6),d3
(1) 1710/  FF0CDA : 302E 0018           		move.w	md_bg_x_old(a6),d0
(1) 1711/  FF0CDE : B640                		cmp.w	d0,d3
(1) 1712/  FF0CE0 : 6708                		beq.s	.xequ
(1) 1713/  FF0CE2 : 3203                		move.w	d3,d1
(1) 1714/  FF0CE4 : 9240                		sub.w	d0,d1
(1) 1715/  FF0CE6 : 3D43 0018           		move.w	d3,md_bg_x_old(a6)
(1) 1716/  FF0CEA :                     .xequ:
(1) 1717/  FF0CEA : 362E 0034           		move.w	md_bg_y(a6),d3
(1) 1718/  FF0CEE : 302E 001A           		move.w	md_bg_y_old(a6),d0
(1) 1719/  FF0CF2 : B640                		cmp.w	d0,d3
(1) 1720/  FF0CF4 : 6708                		beq.s	.yequ
(1) 1721/  FF0CF6 : 3403                		move.w	d3,d2
(1) 1722/  FF0CF8 : 9440                		sub.w	d0,d2
(1) 1723/  FF0CFA : 3D43 001A           		move.w	d3,md_bg_y_old(a6)
(1) 1724/  FF0CFE :                     .yequ:
(1) 1725/  FF0CFE :                     ; 		move.b	d1,md_bg_movex(a6)	; Save X/Y moves
(1) 1726/  FF0CFE :                     ; 		move.b	d2,md_bg_movey(a6)
(1) 1727/  FF0CFE :                     
(1) 1728/  FF0CFE :                     
(1) 1729/  FF0CFE :                     	; Increment drawing beams
(1) 1730/  FF0CFE : 3001                		move.w	d1,d0
(1) 1731/  FF0D00 : 3A2E 000C           		move.w	md_bg_wf(a6),d5
(1) 1732/  FF0D04 : 382E 0010           		move.w	md_bg_xinc_l(a6),d4
(1) 1733/  FF0D08 : 6176                		bsr.s	.beam_incr
(1) 1734/  FF0D0A : 3D44 0010           		move.w	d4,md_bg_xinc_l(a6)
(1) 1735/  FF0D0E : 382E 0012           		move.w	md_bg_xinc_r(a6),d4
(1) 1736/  FF0D12 : 616C                		bsr.s	.beam_incr
(1) 1737/  FF0D14 : 3D44 0012           		move.w	d4,md_bg_xinc_r(a6)
(1) 1738/  FF0D18 : 3002                		move.w	d2,d0
(1) 1739/  FF0D1A : 3A2E 000E           		move.w	md_bg_hf(a6),d5
(1) 1740/  FF0D1E : 382E 0014           		move.w	md_bg_yinc_u(a6),d4
(1) 1741/  FF0D22 : 615C                		bsr.s	.beam_incr
(1) 1742/  FF0D24 : 3D44 0014           		move.w	d4,md_bg_yinc_u(a6)
(1) 1743/  FF0D28 : 382E 0016           		move.w	md_bg_yinc_d(a6),d4
(1) 1744/  FF0D2C : 6152                		bsr.s	.beam_incr
(1) 1745/  FF0D2E : 3D44 0016           		move.w	d4,md_bg_yinc_d(a6)
(1) 1746/  FF0D32 :                     
(1) 1747/  FF0D32 :                     	; Update internal counters
(1) 1748/  FF0D32 : 7600                		moveq	#0,d3
(1) 1749/  FF0D34 : 1616                		move.b	md_bg_bw(a6),d3		; X set
(1) 1750/  FF0D36 : 102E 0004           		move.b	md_bg_xset(a6),d0
(1) 1751/  FF0D3A : D001                		add.b	d1,d0
(1) 1752/  FF0D3C : 1800                		move.b	d0,d4
(1) 1753/  FF0D3E : C843                		and.w	d3,d4
(1) 1754/  FF0D40 : 670C                		beq.s	.x_k
(1) 1755/  FF0D42 : 7800                		moveq	#bitDrwR,d4
(1) 1756/  FF0D44 : 4A41                		tst.w	d1
(1) 1757/  FF0D46 : 6A02                		bpl.s	.x_r
(1) 1758/  FF0D48 : 7801                		moveq	#bitDrwL,d4
(1) 1759/  FF0D4A :                     .x_r:
(1) 1760/  FF0D4A : 09EE 0003           		bset	d4,md_bg_flags(a6)
(1) 1761/  FF0D4E :                     .x_k:
(1) 1762/  FF0D4E : 967C 0001           		sub.w	#1,d3
(1) 1763/  FF0D52 : C003                		and.b	d3,d0
(1) 1764/  FF0D54 : 1D40 0004           		move.b	d0,md_bg_xset(a6)
(1) 1765/  FF0D58 : 162E 0001           		move.b	md_bg_bh(a6),d3		; Y set
(1) 1766/  FF0D5C : 102E 0005           		move.b	md_bg_yset(a6),d0
(1) 1767/  FF0D60 : D002                		add.b	d2,d0
(1) 1768/  FF0D62 : 1800                		move.b	d0,d4
(1) 1769/  FF0D64 : C843                		and.w	d3,d4
(1) 1770/  FF0D66 : 670C                		beq.s	.y_k
(1) 1771/  FF0D68 : 7802                		moveq	#bitDrwD,d4
(1) 1772/  FF0D6A : 4A42                		tst.w	d2
(1) 1773/  FF0D6C : 6A02                		bpl.s	.y_d
(1) 1774/  FF0D6E : 7803                		moveq	#bitDrwU,d4
(1) 1775/  FF0D70 :                     .y_d:
(1) 1776/  FF0D70 : 09EE 0003           		bset	d4,md_bg_flags(a6)
(1) 1777/  FF0D74 :                     .y_k:
(1) 1778/  FF0D74 : 967C 0001           		sub.w	#1,d3
(1) 1779/  FF0D78 : C003                		and.b	d3,d0
(1) 1780/  FF0D7A : 1D40 0005           		move.b	d0,md_bg_yset(a6)
(1) 1781/  FF0D7E :                     .no_bg:
(1) 1782/  FF0D7E : 4E75                		rts
(1) 1783/  FF0D80 :                     
(1) 1784/  FF0D80 :                     ; d0 - Increment by
(1) 1785/  FF0D80 :                     ; d4 - X/Y beam
(1) 1786/  FF0D80 :                     ; d5 - Max Width/Height
(1) 1787/  FF0D80 :                     .beam_incr:
(1) 1788/  FF0D80 : D840                		add.w	d0,d4
(1) 1789/  FF0D82 : 4A44                .xd_l:		tst.w	d4
(1) 1790/  FF0D84 : 6A04                		bpl.s	.xd_g
(1) 1791/  FF0D86 : D845                		add.w	d5,d4
(1) 1792/  FF0D88 : 60F8                		bra.s	.xd_l
(1) 1793/  FF0D8A : B845                .xd_g:		cmp.w	d5,d4
(1) 1794/  FF0D8C : 6D04                		blt.s	.val_h
(1) 1795/  FF0D8E : 9845                		sub.w	d5,d4
(1) 1796/  FF0D90 : 60F8                		bra.s	.xd_g
(1) 1797/  FF0D92 :                     .val_h:
(1) 1798/  FF0D92 : 4E75                		rts
(1) 1799/  FF0D94 :                     
(1) 1800/  FF0D94 :                     ; --------------------------------------------------------
(1) 1801/  FF0D94 :                     ; MdMap_DrawAll
(1) 1802/  FF0D94 :                     ;
(1) 1803/  FF0D94 :                     ; Call this only if DISPLAY is OFF or in VBlank
(1) 1804/  FF0D94 :                     ;
(1) 1805/  FF0D94 :                     ; Notes:
(1) 1806/  FF0D94 :                     ; - Does NOT check for off-bounds blocks
(1) 1807/  FF0D94 :                     ; - Blocks with ID $00 are skipped.
(1) 1808/  FF0D94 :                     ; --------------------------------------------------------
(1) 1809/  FF0D94 :                     
(1) 1810/  FF0D94 :                     MdMap_DrawAll:
(1) 1811/  FF0D94 : 4DF8 9820           		lea	(RAM_BgBuffer),a6
(1) 1812/  FF0D98 : 6104                		bsr	.this_bg
(1) 1813/  FF0D9A : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 1814/  FF0D9E :                     .this_bg:
(1) 1815/  FF0D9E : 082E 0007 0003      		btst	#bitBgOn,md_bg_flags(a6)
(1) 1816/  FF0DA4 : 6700 00C8           		beq	.no_bg
(1) 1817/  FF0DA8 : 2A6E 0028           		move.l	md_bg_blk(a6),a5
(1) 1818/  FF0DAC : 286E 0020           		move.l	md_bg_low(a6),a4
(1) 1819/  FF0DB0 : 266E 0024           		move.l	md_bg_hi(a6),a3
(1) 1820/  FF0DB4 : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 1821/  FF0DB8 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 1822/  FF0DBC : 1416                		move.b	md_bg_bw(a6),d2
(1) 1823/  FF0DBE : 162E 0001           		move.b	md_bg_bh(a6),d3
(1) 1824/  FF0DC2 : 382E 0008           		move.w	md_bg_w(a6),d4
(1) 1825/  FF0DC6 : 3A2E 000C           		move.w	md_bg_wf(a6),d5
(1) 1826/  FF0DCA : 3C2E 000E           		move.w	md_bg_hf(a6),d6
(1) 1827/  FF0DCE :                     
(1) 1828/  FF0DCE : C47C 00FF           		and.w	#$FF,d2
(1) 1829/  FF0DD2 : C0C2                		mulu.w	d2,d0
(1) 1830/  FF0DD4 : E048                		lsr.w	#8,d0
(1) 1831/  FF0DD6 : C67C 00FF           		and.w	#$FF,d3
(1) 1832/  FF0DDA : C2C3                		mulu.w	d3,d1
(1) 1833/  FF0DDC : E049                		lsr.w	#8,d1
(1) 1834/  FF0DDE : C2C4                		mulu.w	d4,d1
(1) 1835/  FF0DE0 : D081                		add.l	d1,d0
(1) 1836/  FF0DE2 : D9C0                		add.l	d0,a4
(1) 1837/  FF0DE4 : D7C0                		add.l	d0,a3
(1) 1838/  FF0DE6 : 323C 0080           		move.w	#$80,d1
(1) 1839/  FF0DEA : 3601                		move.w	d1,d3
(1) 1840/  FF0DEC : 4841                		swap	d1
(1) 1841/  FF0DEE : 967C 0001           		sub.w	#1,d3
(1) 1842/  FF0DF2 : 7400                		moveq	#0,d2
(1) 1843/  FF0DF4 : 342E 001E           		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1844/  FF0DF8 : 4843                		swap	d3
(1) 1845/  FF0DFA : 363C 0004           		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1846/  FF0DFE : 383C 3FFF           		move.w	#$3FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1847/  FF0E02 : 4844                		swap	d4
(1) 1848/  FF0E04 : 383C 0100           		move.w	#$100,d4
(1) 1849/  FF0E08 : 7A00                		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1850/  FF0E0A : 3C2E 001C           		move.w	md_bg_vpos(a6),d6	; <-- TODO: X/Y increment
(1) 1851/  FF0E0E : 3006                		move.w	d6,d0
(1) 1852/  FF0E10 : E55E                		rol.w	#2,d6
(1) 1853/  FF0E12 : CC7C 0003           		and.w	#%11,d6
(1) 1854/  FF0E16 : 4846                		swap	d6
(1) 1855/  FF0E18 : C07C 3FFF           		and.w	#$3FFF,d0
(1) 1856/  FF0E1C : 3C00                		move.w	d0,d6			; d6 - VDP 2nd|1st writes
(1) 1857/  FF0E1E : 3E3C 001F           		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1858/  FF0E22 : 4847                		swap	d7
(1) 1859/  FF0E24 : 3E3C 000F           		move.w	#(256/16)-1,d7
(1) 1860/  FF0E28 :                     
(1) 1861/  FF0E28 :                     	; a6 - Current BG buffer
(1) 1862/  FF0E28 :                     	; a5 - Block-data base
(1) 1863/  FF0E28 :                     	; a4 - LOW layout data Y
(1) 1864/  FF0E28 :                     	; a3 - HI layout data Y
(1) 1865/  FF0E28 :                     	; a2 - a4 current
(1) 1866/  FF0E28 :                     	; a1 - a3 current
(1) 1867/  FF0E28 :                     	; a0 - Block-data read
(1) 1868/  FF0E28 :                     
(1) 1869/  FF0E28 :                     	; d7 - X loop        | Y loop
(1) 1870/  FF0E28 :                     	; d6 - VDP 2nd Write | X/Y VDP pos
(1) 1871/  FF0E28 :                     	; d5 - X loop-save   | X VDP current
(1) 1872/  FF0E28 :                     	; d4 - Y wrap        | Y next block pos
(1) 1873/  FF0E28 :                     	; d3 - X wrap        | X next block pos
(1) 1874/  FF0E28 :                     	; d2 - Y block size  | VRAM-cell base
(1) 1875/  FF0E28 :                     	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1876/  FF0E28 :                     	; d0 -    ---        | ---
(1) 1877/  FF0E28 :                     
(1) 1878/  FF0E28 :                     .y_loop:
(1) 1879/  FF0E28 : 4847                		swap	d7
(1) 1880/  FF0E2A : 244C                		move.l	a4,a2		; a2 - LOW line
(1) 1881/  FF0E2C : 224B                		move.l	a3,a1		; a1 - HI line
(1) 1882/  FF0E2E : 3A07                		move.w	d7,d5
(1) 1883/  FF0E30 :                     .x_loop:
(1) 1884/  FF0E30 : 4845                		swap	d5
(1) 1885/  FF0E32 : 3202                		move.w	d2,d1
(1) 1886/  FF0E34 : 1012                		move.b	(a2),d0		; HI block?
(1) 1887/  FF0E36 : 6608                		bne.s	.got_blk
(1) 1888/  FF0E38 : D27C 8000           		add.w	#$8000,d1
(1) 1889/  FF0E3C : 1011                		move.b	(a1),d0
(1) 1890/  FF0E3E : 6702                		beq.s	.blank
(1) 1891/  FF0E40 :                     .got_blk:
(1) 1892/  FF0E40 : 612E                		bsr	.mk_block
(1) 1893/  FF0E42 :                     .blank:
(1) 1894/  FF0E42 : 2003                		move.l	d3,d0
(1) 1895/  FF0E44 : 4840                		swap	d0
(1) 1896/  FF0E46 : DA43                		add.w	d3,d5		; next VDP X pos
(1) 1897/  FF0E48 : CA40                		and.w	d0,d5
(1) 1898/  FF0E4A : D4FC 0001           		adda	#1,a2
(1) 1899/  FF0E4E : D2FC 0001           		adda	#1,a1
(1) 1900/  FF0E52 : 4845                		swap	d5
(1) 1901/  FF0E54 : 51CD FFDA           		dbf	d5,.x_loop
(1) 1902/  FF0E58 : 2004                		move.l	d4,d0
(1) 1903/  FF0E5A : 4840                		swap	d0
(1) 1904/  FF0E5C : DC44                		add.w	d4,d6		; <-- next VDP Y block
(1) 1905/  FF0E5E : CC40                		and.w	d0,d6
(1) 1906/  FF0E60 : 302E 0008           		move.w	md_bg_w(a6),d0 ; ***
(1) 1907/  FF0E64 : D8C0                		adda	d0,a4
(1) 1908/  FF0E66 : D6C0                		adda	d0,a3
(1) 1909/  FF0E68 : 4847                		swap	d7
(1) 1910/  FF0E6A : 51CF FFBC           		dbf	d7,.y_loop
(1) 1911/  FF0E6E :                     .no_bg:
(1) 1912/  FF0E6E : 4E75                		rts
(1) 1913/  FF0E70 :                     
(1) 1914/  FF0E70 :                     ; barely got free regs without using stack
(1) 1915/  FF0E70 :                     .mk_block:
(1) 1916/  FF0E70 : 4842                		swap	d2
(1) 1917/  FF0E72 : 204D                		move.l	a5,a0
(1) 1918/  FF0E74 : C07C 00FF           		and.w	#$FF,d0
(1) 1919/  FF0E78 : E748                		lsl.w	#3,d0		; * 8 bytes
(1) 1920/  FF0E7A : D0C0                		adda	d0,a0		; a0 - cell word data
(1) 1921/  FF0E7C : 3006                		move.w	d6,d0
(1) 1922/  FF0E7E : D045                		add.w	d5,d0
(1) 1923/  FF0E80 : 807C 4000           		or.w	#$4000,d0
(1) 1924/  FF0E84 : 4846                		swap	d6
(1) 1925/  FF0E86 :                     
(1) 1926/  FF0E86 :                     	; d0 - topleft VDP write | $4000
(1) 1927/  FF0E86 :                     	; d6 - right VDP write
(1) 1928/  FF0E86 :                     	; d2 is free
(1) 1929/  FF0E86 :                     	;
(1) 1930/  FF0E86 :                     	; currently working: 16x16
(1) 1931/  FF0E86 : 610C                		bsr.s	.drwy_16	; 1-
(1) 1932/  FF0E88 : D07C 0002           		add.w	#2,d0		; 2-
(1) 1933/  FF0E8C : 6106                		bsr.s	.drwy_16	; -3
(1) 1934/  FF0E8E :                     					; -4
(1) 1935/  FF0E8E : 4846                		swap	d6
(1) 1936/  FF0E90 : 4842                		swap	d2
(1) 1937/  FF0E92 : 4E75                		rts
(1) 1938/  FF0E94 :                     
(1) 1939/  FF0E94 :                     ; d0 - left vdp
(1) 1940/  FF0E94 :                     ; d6 - right vdp
(1) 1941/  FF0E94 :                     .drwy_16:
(1) 1942/  FF0E94 : 3400                		move.w	d0,d2
(1) 1943/  FF0E96 : 4840                		swap	d0
(1) 1944/  FF0E98 : 3018                		move.w	(a0)+,d0
(1) 1945/  FF0E9A : D041                		add.w	d1,d0
(1) 1946/  FF0E9C : 33C2 00C0 0004      		move.w	d2,(vdp_ctrl).l
(1) 1947/  FF0EA2 : 33C6 00C0 0004      		move.w	d6,(vdp_ctrl).l
(1) 1948/  FF0EA8 : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1) 1949/  FF0EAE : 4841                		swap	d1
(1) 1950/  FF0EB0 : D441                		add.w	d1,d2		; Next line
(1) 1951/  FF0EB2 : 4841                		swap	d1
(1) 1952/  FF0EB4 : 3018                		move.w	(a0)+,d0
(1) 1953/  FF0EB6 : D041                		add.w	d1,d0
(1) 1954/  FF0EB8 : 33C2 00C0 0004      		move.w	d2,(vdp_ctrl).l
(1) 1955/  FF0EBE : 33C6 00C0 0004      		move.w	d6,(vdp_ctrl).l
(1) 1956/  FF0EC4 : 33C0 00C0 0000      		move.w	d0,(vdp_data).l
(1) 1957/  FF0ECA : 4840                		swap	d0
(1) 1958/  FF0ECC : 4E75                		rts
(1) 1959/  FF0ECE :                     
(1) 1960/  FF0ECE :                     	; Block: 16x16 as 13
(1) 1961/  FF0ECE :                     	;                 24
(1) 1962/  FF0ECE :                     	; d0 - block ID
(1) 1963/  FF0ECE :                     	; d1 - VRAM-add base
(1) 1964/  FF0ECE :                     	; d6 - VDP out R | VDP out L
(1) 1965/  FF0ECE :                     ; 		and.w	#$FF,d0
(1) 1966/  FF0ECE :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1967/  FF0ECE :                     ; 		move.l	(a5,d0.w),d2
(1) 1968/  FF0ECE :                     ; 		add.l	d1,d2
(1) 1969/  FF0ECE :                     ; 		swap	d2
(1) 1970/  FF0ECE :                     ; 		move.l	4(a5,d0.w),d3
(1) 1971/  FF0ECE :                     ; 		add.l	d1,d3
(1) 1972/  FF0ECE :                     ; 		swap	d3
(1) 1973/  FF0ECE :                     ; 		move.w	d6,d0
(1) 1974/  FF0ECE :                     ; 		swap	d5
(1) 1975/  FF0ECE :                     ; 		add.w	d5,d0
(1) 1976/  FF0ECE :                     ; 		or.w	#$4000,d0
(1) 1977/  FF0ECE :                     ; 		swap	d5
(1) 1978/  FF0ECE :                     ; 		move.l	a0,d1
(1) 1979/  FF0ECE :                     ; 		and.w	d1,d5
(1) 1980/  FF0ECE :                     ; 		add.w	d5,d0
(1) 1981/  FF0ECE :                     ; 		swap	d6
(1) 1982/  FF0ECE :                     ; 		move.w	d0,(vdp_ctrl).l
(1) 1983/  FF0ECE :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1984/  FF0ECE :                     ; 		move.w	d2,(vdp_data).l
(1) 1985/  FF0ECE :                     ; 		move.w	d3,(vdp_data).l
(1) 1986/  FF0ECE :                     ; 		swap	d2
(1) 1987/  FF0ECE :                     ; 		swap	d3
(1) 1988/  FF0ECE :                     ; 		add.w	#$80,d0		; line add
(1) 1989/  FF0ECE :                     ; 		move.w	d0,(vdp_ctrl).l
(1) 1990/  FF0ECE :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1991/  FF0ECE :                     ; 		move.w	d2,(vdp_data).l
(1) 1992/  FF0ECE :                     ; 		move.w	d3,(vdp_data).l
(1) 1993/  FF0ECE :                     ; 		swap	d6
(1) 1994/  FF0ECE :                     ; 		rts
(1) 1995/  FF0ECE :                     
(1) 1996/  FF0ECE :                     ; --------------------------------------------------------
(1) 1997/  FF0ECE :                     ; MdMap_DrawScrl
(1) 1998/  FF0ECE :                     ;
(1) 1999/  FF0ECE :                     ; Draw off-screen changes
(1) 2000/  FF0ECE :                     ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 2001/  FF0ECE :                     ; --------------------------------------------------------
(1) 2002/  FF0ECE :                     
(1) 2003/  FF0ECE :                     MdMap_DrawScrl:
(1) 2004/  FF0ECE : 4DF8 AD62           		lea	(RAM_BgBufferM),a6
(1) 2005/  FF0ED2 : 6110                		bsr	.this_bg
(1) 2006/  FF0ED4 : 4DF8 9820           		lea	(RAM_BgBuffer),a6
(1) 2007/  FF0ED8 : 4BF9 00C0 0000      		lea	(vdp_data),a5
(1) 2008/  FF0EDE : 6104                		bsr.s	.this_bg
(1) 2009/  FF0EE0 : DCFC 0038           		adda	#sizeof_mdbg,a6
(1) 2010/  FF0EE4 :                     .this_bg:
(1) 2011/  FF0EE4 : 1E2E 0003           		move.b	md_bg_flags(a6),d7
(1) 2012/  FF0EE8 : 0807 0007           		btst	#bitBgOn,d7
(1) 2013/  FF0EEC : 6758                		beq	.no_bg
(1) 2014/  FF0EEE : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 2015/  FF0EF2 : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 2016/  FF0EF6 : 342E 0010           		move.w	md_bg_xinc_l(a6),d2
(1) 2017/  FF0EFA : 362E 0014           		move.w	md_bg_yinc_u(a6),d3
(1) 2018/  FF0EFE : 0887 0003           		bclr	#bitDrwU,d7
(1) 2019/  FF0F02 : 6704                		beq.s	.no_u
(1) 2020/  FF0F04 : 6100 00FC           		bsr	.mk_row
(1) 2021/  FF0F08 :                     .no_u:
(1) 2022/  FF0F08 : 0887 0002           		bclr	#bitDrwD,d7
(1) 2023/  FF0F0C : 670C                		beq.s	.no_d
(1) 2024/  FF0F0E : 362E 0016           		move.w	md_bg_yinc_d(a6),d3
(1) 2025/  FF0F12 : D27C 00E0           		add.w	#224,d1			; X add
(1) 2026/  FF0F16 : 6100 00EA           		bsr	.mk_row
(1) 2027/  FF0F1A :                     .no_d:
(1) 2028/  FF0F1A : 302E 0030           		move.w	md_bg_x(a6),d0		; X start
(1) 2029/  FF0F1E : 322E 0034           		move.w	md_bg_y(a6),d1		; Y start
(1) 2030/  FF0F22 : 342E 0010           		move.w	md_bg_xinc_l(a6),d2
(1) 2031/  FF0F26 : 362E 0014           		move.w	md_bg_yinc_u(a6),d3
(1) 2032/  FF0F2A : 0887 0001           		bclr	#bitDrwL,d7
(1) 2033/  FF0F2E : 6702                		beq.s	.no_l
(1) 2034/  FF0F30 : 6116                		bsr.s	.mk_clmn
(1) 2035/  FF0F32 :                     .no_l:
(1) 2036/  FF0F32 : 0887 0000           		bclr	#bitDrwR,d7
(1) 2037/  FF0F36 : 670A                		beq.s	.no_r
(1) 2038/  FF0F38 : 342E 0012           		move.w	md_bg_xinc_r(a6),d2
(1) 2039/  FF0F3C : D07C 0140           		add.w	#320,d0			; X add
(1) 2040/  FF0F40 : 6106                		bsr.s	.mk_clmn
(1) 2041/  FF0F42 :                     .no_r:
(1) 2042/  FF0F42 :                     
(1) 2043/  FF0F42 : 1D47 0003           		move.b	d7,md_bg_flags(a6)
(1) 2044/  FF0F46 :                     .no_bg:
(1) 2045/  FF0F46 : 4E75                		rts
(1) 2046/  FF0F48 :                     
(1) 2047/  FF0F48 :                     ; ------------------------------------------------
(1) 2048/  FF0F48 :                     ; Make column
(1) 2049/  FF0F48 :                     ; d0 - X
(1) 2050/  FF0F48 :                     ; d1 - Y
(1) 2051/  FF0F48 :                     ; d2 - X increment
(1) 2052/  FF0F48 :                     ; d3 - Y increment
(1) 2053/  FF0F48 :                     ; ------------------------------------------------
(1) 2054/  FF0F48 :                     
(1) 2055/  FF0F48 :                     .mk_clmn:
(1) 2056/  FF0F48 : 0807 0006           		btst	#bitMarsBg,d7
(1) 2057/  FF0F4C : 6600 00B2           		bne	.mars_ret_c
(1) 2058/  FF0F50 : 4847                		swap	d7
(1) 2059/  FF0F52 : 6100 0170           		bsr	.get_coords
(1) 2060/  FF0F56 : 4840                		swap	d0
(1) 2061/  FF0F58 : 3004                		move.w	d4,d0
(1) 2062/  FF0F5A : 4840                		swap	d0
(1) 2063/  FF0F5C : 363C 0FFF           		move.w	#$FFF,d3
(1) 2064/  FF0F60 : 4843                		swap	d3
(1) 2065/  FF0F62 : 363C 0100           		move.w	#$100,d3
(1) 2066/  FF0F66 :                     
(1) 2067/  FF0F66 :                     	; d0 -    X curr | Current cell X/Y (1st)
(1) 2068/  FF0F66 :                     	; d1 -    Y curr | VDP 1st write
(1) 2069/  FF0F66 :                     	; d2 - Cell VRAM | VDP 2nd write
(1) 2070/  FF0F66 :                     	; d3 -    Y wrap | Y add
(1) 2071/  FF0F66 :                     	; d4 -         *****
(1) 2072/  FF0F66 :                     	; d5 -         *****
(1) 2073/  FF0F66 :                     	; d6 -         *****
(1) 2074/  FF0F66 :                     	; d7 - lastflags | loop blocks
(1) 2075/  FF0F66 :                     
(1) 2076/  FF0F66 : 3E3C 000F           		move.w	#(256/16)-1,d7
(1) 2077/  FF0F6A :                     .y_blk:
(1) 2078/  FF0F6A : 7800                		moveq	#0,d4
(1) 2079/  FF0F6C : 7A00                		moveq	#0,d5
(1) 2080/  FF0F6E : 1C13                		move.b	(a3),d6
(1) 2081/  FF0F70 : 6616                		bne.s	.vld
(1) 2082/  FF0F72 : 1C12                		move.b	(a2),d6
(1) 2083/  FF0F74 : 6606                		bne.s	.prio
(1) 2084/  FF0F76 :                     .blnk:
(1) 2085/  FF0F76 : 7800                		moveq	#0,d4
(1) 2086/  FF0F78 : 7A00                		moveq	#0,d5
(1) 2087/  FF0F7A : 602E                		bra.s	.frce
(1) 2088/  FF0F7C :                     .prio:
(1) 2089/  FF0F7C : 283C 8000 8000      		move.l	#$80008000,d4
(1) 2090/  FF0F82 : 2A3C 8000 8000      		move.l	#$80008000,d5
(1) 2091/  FF0F88 :                     .vld:
(1) 2092/  FF0F88 : 204C                		move.l	a4,a0
(1) 2093/  FF0F8A : CC7C 00FF           		and.w	#$FF,d6
(1) 2094/  FF0F8E : E74E                		lsl.w	#3,d6
(1) 2095/  FF0F90 : D0C6                		adda	d6,a0
(1) 2096/  FF0F92 : 4842                		swap	d2
(1) 2097/  FF0F94 : D858                		add.w	(a0)+,d4
(1) 2098/  FF0F96 : DA58                		add.w	(a0)+,d5
(1) 2099/  FF0F98 : D842                		add.w	d2,d4
(1) 2100/  FF0F9A : DA42                		add.w	d2,d5
(1) 2101/  FF0F9C : 4844                		swap	d4
(1) 2102/  FF0F9E : 4845                		swap	d5
(1) 2103/  FF0FA0 : D858                		add.w	(a0)+,d4
(1) 2104/  FF0FA2 : DA58                		add.w	(a0)+,d5
(1) 2105/  FF0FA4 : D842                		add.w	d2,d4
(1) 2106/  FF0FA6 : DA42                		add.w	d2,d5
(1) 2107/  FF0FA8 : 4842                		swap	d2
(1) 2108/  FF0FAA :                     .frce:
(1) 2109/  FF0FAA : 3C00                		move.w	d0,d6
(1) 2110/  FF0FAC : DC41                		add.w	d1,d6
(1) 2111/  FF0FAE : 8C7C 4000           		or.w	#$4000,d6
(1) 2112/  FF0FB2 : 3B46 0004           		move.w	d6,4(a5)
(1) 2113/  FF0FB6 : 3B42 0004           		move.w	d2,4(a5)
(1) 2114/  FF0FBA : 2A84                		move.l	d4,(a5)
(1) 2115/  FF0FBC : DC7C 0080           		add.w	#$80,d6
(1) 2116/  FF0FC0 : 3B46 0004           		move.w	d6,4(a5)
(1) 2117/  FF0FC4 : 3B42 0004           		move.w	d2,4(a5)
(1) 2118/  FF0FC8 : 2A85                		move.l	d5,(a5)
(1) 2119/  FF0FCA : 2803                		move.l	d3,d4		; Next Y block
(1) 2120/  FF0FCC : 4844                		swap	d4
(1) 2121/  FF0FCE : D043                		add.w	d3,d0
(1) 2122/  FF0FD0 : C044                		and.w	d4,d0
(1) 2123/  FF0FD2 : 3C2E 0008           		move.w	md_bg_w(a6),d6
(1) 2124/  FF0FD6 : D6C6                		adda	d6,a3
(1) 2125/  FF0FD8 : D4C6                		adda	d6,a2
(1) 2126/  FF0FDA : 4841                		swap	d1		; <-- TODO: improve this later.
(1) 2127/  FF0FDC : D27C 0010           		add.w	#$10,d1
(1) 2128/  FF0FE0 : B26E 000E           		cmp.w	md_bg_hf(a6),d1
(1) 2129/  FF0FE4 : 6D12                		blt.s	.y_low
(1) 2130/  FF0FE6 : 4840                		swap	d0
(1) 2131/  FF0FE8 : 4241                		clr.w	d1
(1) 2132/  FF0FEA : 266E 0020           		move.l	md_bg_low(a6),a3
(1) 2133/  FF0FEE : 246E 0024           		move.l	md_bg_hi(a6),a2
(1) 2134/  FF0FF2 : D4C0                		adda	d0,a2
(1) 2135/  FF0FF4 : D6C0                		adda	d0,a3
(1) 2136/  FF0FF6 : 4840                		swap	d0
(1) 2137/  FF0FF8 :                     .y_low:
(1) 2138/  FF0FF8 : 4841                		swap	d1
(1) 2139/  FF0FFA :                     
(1) 2140/  FF0FFA : 51CF FF6E           		dbf	d7,.y_blk
(1) 2141/  FF0FFE : 4847                		swap	d7
(1) 2142/  FF1000 :                     .mars_ret_c:
(1) 2143/  FF1000 : 4E75                		rts
(1) 2144/  FF1002 :                     
(1) 2145/  FF1002 :                     ; ------------------------------------------------
(1) 2146/  FF1002 :                     ; Make row
(1) 2147/  FF1002 :                     ; d0 - X
(1) 2148/  FF1002 :                     ; d1 - Y
(1) 2149/  FF1002 :                     ; d2 - X increment
(1) 2150/  FF1002 :                     ; d3 - Y increment
(1) 2151/  FF1002 :                     ; ------------------------------------------------
(1) 2152/  FF1002 :                     
(1) 2153/  FF1002 :                     .mk_row:
(1) 2154/  FF1002 : 0807 0006           		btst	#bitMarsBg,d7
(1) 2155/  FF1006 : 66F8                		bne.s	.mars_ret_c
(1) 2156/  FF1008 : 4847                		swap	d7
(1) 2157/  FF100A : 6100 00B8           		bsr	.get_coords
(1) 2158/  FF100E : 4841                		swap	d1
(1) 2159/  FF1010 : 3205                		move.w	d5,d1
(1) 2160/  FF1012 : 4841                		swap	d1
(1) 2161/  FF1014 : 363C 007F           		move.w	#$7F,d3
(1) 2162/  FF1018 : 4843                		swap	d3
(1) 2163/  FF101A : 363C 0004           		move.w	#4,d3
(1) 2164/  FF101E :                     
(1) 2165/  FF101E :                     	; d0 -    X curr | Current cell X/Y (1st)
(1) 2166/  FF101E :                     	; d1 -    Y curr | VDP 1st write
(1) 2167/  FF101E :                     	; d2 - Cell VRAM | VDP 2nd write
(1) 2168/  FF101E :                     	; d3 -    X wrap | X add
(1) 2169/  FF101E :                     	; d4 -         *****
(1) 2170/  FF101E :                     	; d5 -         *****
(1) 2171/  FF101E :                     	; d6 - loopflags | *****
(1) 2172/  FF101E :                     	; d7 - lastflags | loop blocks
(1) 2173/  FF101E :                     
(1) 2174/  FF101E : 3C00                		move.w	d0,d6
(1) 2175/  FF1020 : CC7C FF00           		and.w	#-$100,d6	; Merge d1
(1) 2176/  FF1024 : D246                		add.w	d6,d1
(1) 2177/  FF1026 : 2A03                		move.l	d3,d5
(1) 2178/  FF1028 : 4845                		swap	d5
(1) 2179/  FF102A : C045                		and.w	d5,d0
(1) 2180/  FF102C : 3E3C 0014           		move.w	#((320+16)/16)-1,d7
(1) 2181/  FF1030 :                     .x_blk:
(1) 2182/  FF1030 : 7800                		moveq	#0,d4
(1) 2183/  FF1032 : 7A00                		moveq	#0,d5
(1) 2184/  FF1034 : 1C13                		move.b	(a3),d6
(1) 2185/  FF1036 : 6616                		bne.s	.xvld
(1) 2186/  FF1038 : 1C12                		move.b	(a2),d6
(1) 2187/  FF103A : 6606                		bne.s	.xprio
(1) 2188/  FF103C :                     .xblnk:
(1) 2189/  FF103C : 7800                		moveq	#0,d4
(1) 2190/  FF103E : 7A00                		moveq	#0,d5
(1) 2191/  FF1040 : 602E                		bra.s	.xfrce
(1) 2192/  FF1042 :                     .xprio:
(1) 2193/  FF1042 : 283C 8000 8000      		move.l	#$80008000,d4
(1) 2194/  FF1048 : 2A3C 8000 8000      		move.l	#$80008000,d5
(1) 2195/  FF104E :                     .xvld:
(1) 2196/  FF104E : 204C                		move.l	a4,a0
(1) 2197/  FF1050 : CC7C 00FF           		and.w	#$FF,d6
(1) 2198/  FF1054 : E74E                		lsl.w	#3,d6
(1) 2199/  FF1056 : D0C6                		adda	d6,a0
(1) 2200/  FF1058 : 4842                		swap	d2
(1) 2201/  FF105A : D858                		add.w	(a0)+,d4
(1) 2202/  FF105C : DA58                		add.w	(a0)+,d5
(1) 2203/  FF105E : D842                		add.w	d2,d4
(1) 2204/  FF1060 : DA42                		add.w	d2,d5
(1) 2205/  FF1062 : 4844                		swap	d4
(1) 2206/  FF1064 : 4845                		swap	d5
(1) 2207/  FF1066 : D858                		add.w	(a0)+,d4
(1) 2208/  FF1068 : DA58                		add.w	(a0)+,d5
(1) 2209/  FF106A : D842                		add.w	d2,d4
(1) 2210/  FF106C : DA42                		add.w	d2,d5
(1) 2211/  FF106E : 4842                		swap	d2
(1) 2212/  FF1070 :                     .xfrce:
(1) 2213/  FF1070 : 3C00                		move.w	d0,d6
(1) 2214/  FF1072 : DC41                		add.w	d1,d6
(1) 2215/  FF1074 : 8C7C 4000           		or.w	#$4000,d6
(1) 2216/  FF1078 : 3B46 0004           		move.w	d6,4(a5)
(1) 2217/  FF107C : 3B42 0004           		move.w	d2,4(a5)
(1) 2218/  FF1080 : 2A84                		move.l	d4,(a5)
(1) 2219/  FF1082 : DC7C 0080           		add.w	#$80,d6
(1) 2220/  FF1086 : 3B46 0004           		move.w	d6,4(a5)
(1) 2221/  FF108A : 3B42 0004           		move.w	d2,4(a5)
(1) 2222/  FF108E : 2A85                		move.l	d5,(a5)
(1) 2223/  FF1090 : D043                		add.w	d3,d0
(1) 2224/  FF1092 : 4843                		swap	d3
(1) 2225/  FF1094 : C043                		and.w	d3,d0
(1) 2226/  FF1096 : 4843                		swap	d3
(1) 2227/  FF1098 :                     
(1) 2228/  FF1098 :                     	; X wrap
(1) 2229/  FF1098 : 4840                		swap	d0
(1) 2230/  FF109A : D07C 0010           		add.w	#$10,d0
(1) 2231/  FF109E : B06E 000C           		cmp.w	md_bg_wf(a6),d0
(1) 2232/  FF10A2 : 6D0E                		blt.s	.x_low
(1) 2233/  FF10A4 : 906E 000C           		sub.w	md_bg_wf(a6),d0
(1) 2234/  FF10A8 : 7800                		moveq	#0,d4
(1) 2235/  FF10AA : 382E 0008           		move.w	md_bg_w(a6),d4
(1) 2236/  FF10AE : 95C4                		sub.l	d4,a2
(1) 2237/  FF10B0 : 97C4                		sub.l	d4,a3
(1) 2238/  FF10B2 :                     .x_low:
(1) 2239/  FF10B2 : D6FC 0001           		adda	#1,a3
(1) 2240/  FF10B6 : D4FC 0001           		adda	#1,a2
(1) 2241/  FF10BA :                     .x_new:
(1) 2242/  FF10BA : 4840                		swap	d0
(1) 2243/  FF10BC :                     
(1) 2244/  FF10BC : 51CF FF72           		dbf	d7,.x_blk
(1) 2245/  FF10C0 : 4847                		swap	d7
(1) 2246/  FF10C2 : 4E75                		rts
(1) 2247/  FF10C4 :                     
(1) 2248/  FF10C4 :                     ; ------------------------------------------------
(1) 2249/  FF10C4 :                     ; Input
(1) 2250/  FF10C4 :                     ; d0 - X position
(1) 2251/  FF10C4 :                     ; d1 - Y position
(1) 2252/  FF10C4 :                     ; d2 - X increment beam
(1) 2253/  FF10C4 :                     ; d3 - Y increment beam
(1) 2254/  FF10C4 :                     ;
(1) 2255/  FF10C4 :                     ; Out:
(1) 2256/  FF10C4 :                     ; d4 - X LEFT increment
(1) 2257/  FF10C4 :                     ; d5 - Y TOP increment
(1) 2258/  FF10C4 :                     
(1) 2259/  FF10C4 :                     .get_coords:
(1) 2260/  FF10C4 : 286E 0028           		move.l	md_bg_blk(a6),a4
(1) 2261/  FF10C8 : 266E 0020           		move.l	md_bg_low(a6),a3
(1) 2262/  FF10CC : 246E 0024           		move.l	md_bg_hi(a6),a2
(1) 2263/  FF10D0 : C07C FFF0           		and.w	#-$10,d0		; block X/Y limit
(1) 2264/  FF10D4 : C27C FFF0           		and.w	#-$10,d1
(1) 2265/  FF10D8 : C47C FFF0           		and.w	#-$10,d2
(1) 2266/  FF10DC : C67C FFF0           		and.w	#-$10,d3
(1) 2267/  FF10E0 : 4840                		swap	d0
(1) 2268/  FF10E2 : 4841                		swap	d1
(1) 2269/  FF10E4 : 3002                		move.w	d2,d0
(1) 2270/  FF10E6 : 3203                		move.w	d3,d1
(1) 2271/  FF10E8 : 4840                		swap	d0
(1) 2272/  FF10EA : 4841                		swap	d1
(1) 2273/  FF10EC :                     
(1) 2274/  FF10EC : 7800                		moveq	#0,d4
(1) 2275/  FF10EE : 7A00                		moveq	#0,d5
(1) 2276/  FF10F0 : 1C16                		move.b	md_bg_bw(a6),d6
(1) 2277/  FF10F2 : 1E2E 0001           		move.b	md_bg_bh(a6),d7
(1) 2278/  FF10F6 : CC7C 00FF           		and.w	#$FF,d6
(1) 2279/  FF10FA : CE7C 00FF           		and.w	#$FF,d7
(1) 2280/  FF10FE :                     
(1) 2281/  FF10FE : 3802                		move.w	d2,d4
(1) 2282/  FF1100 : C9C6                		muls.w	d6,d4
(1) 2283/  FF1102 : E044                		asr.w	#8,d4
(1) 2284/  FF1104 : 3A03                		move.w	d3,d5
(1) 2285/  FF1106 : CBC7                		muls.w	d7,d5
(1) 2286/  FF1108 : E045                		asr.w	#8,d5
(1) 2287/  FF110A : CBEE 0008           		muls.w	md_bg_w(a6),d5
(1) 2288/  FF110E : 7600                		moveq	#0,d3
(1) 2289/  FF1110 : 2604                		move.l	d4,d3
(1) 2290/  FF1112 : D685                		add.l	d5,d3
(1) 2291/  FF1114 : D7C3                		add.l	d3,a3
(1) 2292/  FF1116 : D5C3                		add.l	d3,a2
(1) 2293/  FF1118 :                     
(1) 2294/  FF1118 : 342E 001E           		move.w	md_bg_vram(a6),d2
(1) 2295/  FF111C : 4842                		swap	d2
(1) 2296/  FF111E : E449                		lsr.w	#2,d1			; Y >> 2
(1) 2297/  FF1120 : ED49                		lsl.w	#6,d1			; Y * $40
(1) 2298/  FF1122 : E448                		lsr.w	#2,d0			; X >> 2
(1) 2299/  FF1124 : C27C 0FFF           		and.w	#$FFF,d1
(1) 2300/  FF1128 : C07C 007C           		and.w	#$7C,d0
(1) 2301/  FF112C : D041                		add.w	d1,d0
(1) 2302/  FF112E : 322E 001C           		move.w	md_bg_vpos(a6),d1
(1) 2303/  FF1132 : 3401                		move.w	d1,d2
(1) 2304/  FF1134 : C27C 3FFF           		and.w	#$3FFF,d1
(1) 2305/  FF1138 : E55A                		rol.w	#2,d2
(1) 2306/  FF113A : C47C 0003           		and.w	#%11,d2
(1) 2307/  FF113E : 4E75                		rts
(1) 2308/  FF1140 :                     
      41/  FF1140 :                     		include	"system/md/system.asm"
(1)    1/  FF1140 :                     ; ====================================================================
(1)    2/  FF1140 :                     ; ----------------------------------------------------------------
(1)    3/  FF1140 :                     ; Genesis system routines
(1)    4/  FF1140 :                     ; ----------------------------------------------------------------
(1)    5/  FF1140 :                     
(1)    6/  FF1140 :                     ; ====================================================================
(1)    7/  FF1140 :                     ; ----------------------------------------------------------------
(1)    8/  FF1140 :                     ; RAM section
(1)    9/  FF1140 :                     ; ----------------------------------------------------------------
(1)   10/  FF1140 :                     
(1)   11/  FF1140 : (MACRO)             		struct RAM_MdSystem
(1)   11/  FF1140 : =$FF1140            GLBL_LASTPC     set *
(1)   11/    1A1A :                                     dephase
(1)   11/    1A1A : =$1A1A              GLBL_LASTORG    set *
(1)   11/FFFFFFFFFFFFA702 :                                     phase RAM_MDSYSTEM
(1)   12/FFFFFFFFFFFFA702 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   13/FFFFFFFFFFFFA742 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)   14/FFFFFFFFFFFFA942 :                     RAM_DmaCode	ds.b $200
(1)   15/FFFFFFFFFFFFAB42 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   16/FFFFFFFFFFFFAB46 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   17/FFFFFFFFFFFFAB4A :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   18/FFFFFFFFFFFFAB4E :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   19/FFFFFFFFFFFFAB54 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   20/FFFFFFFFFFFFAB5A :                     RAM_MdVBlkWait	ds.w 1
(1)   21/FFFFFFFFFFFFAB5C :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)   22/FFFFFFFFFFFFAB5E :                     sizeof_mdsys	ds.l 0
(1)   23/FFFFFFFFFFFFAB60 : (MACRO)             		finish
(1)   23/FFFFFFFFFFFFA702 :                                     !org GLBL_LASTORG
(1)   23/  FF1140 :                                     phase GLBL_LASTPC
(1)   24/  FF1140 :                     
(1)   25/  FF1140 :                     ; ====================================================================
(1)   26/  FF1140 :                     ; --------------------------------------------------------
(1)   27/  FF1140 :                     ; Init System
(1)   28/  FF1140 :                     ; 
(1)   29/  FF1140 :                     ; Uses:
(1)   30/  FF1140 :                     ; a0-a2,d0-d1
(1)   31/  FF1140 :                     ; --------------------------------------------------------
(1)   32/  FF1140 :                     
(1)   33/  FF1140 :                     System_Init:
(1)   34/  FF1140 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   35/  FF1144 : 40E7                		move.w	sr,-(sp)
(1)   36/  FF1146 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   37/  FF114E :                     .wait:
(1)   38/  FF114E : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   39/  FF1156 : 66F6                		bne.s	.wait
(1)   40/  FF1158 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   41/  FF115A : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   42/  FF1160 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   43/  FF1166 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   44/  FF116C : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   45/  FF1174 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   46/  FF1178 : 33C0 FFFF AB4E       		move.w	d0,(RAM_MdMarsVInt).l
(1)   47/  FF117E : 33C0 FFFF AB54      		move.w	d0,(RAM_MdMarsHInt).l
(1)   48/  FF1184 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)   49/  FF118A : 223C 9511 6102      		move.l	#$95116102,d1
(1)   50/  FF1190 : 23C0 FFFF AB42      		move.l	d0,(RAM_SysRandVal).l
(1)   51/  FF1196 : 23C1 FFFF AB46      		move.l	d1,(RAM_SysRandSeed).l
(1)   52/  FF119C : 203C 00FF 1660      		move.l	#VInt_Default,d0	; Set default ints
(1)   53/  FF11A2 : 223C 00FF 1678      		move.l	#Hint_Default,d1
(1)   54/  FF11A8 : 6100 0416           		bsr	System_SetInts
(1)   55/  FF11AC : 41F8 A702           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   56/  FF11B0 : 323C 0010           		move.w	#sizeof_input-1/2,d1
(1)   57/  FF11B4 : 7000                		moveq	#0,d0
(1)   58/  FF11B6 :                     .clrinput:
(1)   59/  FF11B6 : 30FC 0000           		move.w	#0,(a0)+
(1)   60/  FF11BA : 51C9 FFFA           		dbf	d1,.clrinput
(1)   61/  FF11BE : 46DF                		move.w	(sp)+,sr
(1)   62/  FF11C0 : 4E75                		rts
(1)   63/  FF11C2 :                     
(1)   64/  FF11C2 :                     ; 		lea	(vdp_ctrl),a6
(1)   65/  FF11C2 :                     ; .wait_in:	move.w	(a6),d4
(1)   66/  FF11C2 :                     ; 		btst	#bitVBlk,d4
(1)   67/  FF11C2 :                     ; 		beq.s	.wait_in
(1)   68/  FF11C2 :                     ; .wait_out:	move.w	(a6),d4
(1)   69/  FF11C2 :                     ; 		btst	#bitVBlk,d4
(1)   70/  FF11C2 :                     ; 		bne.s	.wait_out
(1)   71/  FF11C2 :                     ; 		bra	System_MarsUpdate
(1)   72/  FF11C2 :                     
(1)   73/  FF11C2 :                     ; --------------------------------------------------------
(1)   74/  FF11C2 :                     ; System_WaitFrame
(1)   75/  FF11C2 :                     ;
(1)   76/  FF11C2 :                     ; Call this to wait for a frame and process changes.
(1)   77/  FF11C2 :                     ; ***DISPLAY MUST BE ENABLED TO USE THIS***
(1)   78/  FF11C2 :                     ;
(1)   79/  FF11C2 :                     ; Before getting on VBlank:
(1)   80/  FF11C2 :                     ; The DREQ section from here will be transfered
(1)   81/  FF11C2 :                     ; to the 32X side
(1)   82/  FF11C2 :                     ;
(1)   83/  FF11C2 :                     ; Call this it will:
(1)   84/  FF11C2 :                     ; - Update the controllers
(1)   85/  FF11C2 :                     ; - Transfer the Genesis palette, sprites and scroll
(1)   86/  FF11C2 :                     ;   data from from RAM to VDP (Doesn't require RV bit)
(1)   87/  FF11C2 :                     ; - Process DMA tasks from the BLAST list
(1)   88/  FF11C2 :                     ; --------------------------------------------------------
(1)   89/  FF11C2 :                     
(1)   90/  FF11C2 :                     System_WaitFrame:
(1)   91/  FF11C2 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)   92/  FF11C8 : 3816                .wait_lag:	move.w	(a6),d4
(1)   93/  FF11CA : 0804 0003           		btst	#bitVBlk,d4
(1)   94/  FF11CE : 66F8                		bne.s	.wait_lag
(1)   95/  FF11D0 :                     ; 		bsr	Video_Mars_WaitFrame
(1)   96/  FF11D0 : 6100 00BA           		bsr	System_MarsUpdate
(1)   97/  FF11D4 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)   98/  FF11DA : 3816                .wait_in:	move.w	(a6),d4			; We are on DISPLAY, wait for VBlank
(1)   99/  FF11DC : 0804 0003           		btst	#bitVBlk,d4
(1)  100/  FF11E0 : 67F8                		beq.s	.wait_in
(1)  101/  FF11E2 : 6100 00D4           		bsr	System_Input		; Read inputs FIRST
(1)  102/  FF11E6 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; *** DMA'd Scroll and Palette
(1)  103/  FF11EC : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  104/  FF11F0 : 1E38 A6EB           		move.b	(RAM_VdpRegs+1),d7
(1)  105/  FF11F4 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  106/  FF11F8 : 3C87                		move.w	d7,(a6)
(1)  107/  FF11FA : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  108/  FF1200 : 2CBC 96CE 9562      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  109/  FF1206 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  110/  FF120A : 3CBC 4000           		move.w	#$4000,(a6)
(1)  111/  FF120E : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  112/  FF1212 : 3C9F                		move.w	(sp)+,(a6)
(1)  113/  FF1214 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  114/  FF121A : 2CBC 96CC 9582      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  115/  FF1220 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  116/  FF1224 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  117/  FF1228 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  118/  FF122C : 3C9F                		move.w	(sp)+,(a6)
(1)  119/  FF122E : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  120/  FF1234 : 2CBC 96CE 958A      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  121/  FF123A : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  122/  FF123E : 3CBC 7800           		move.w	#$7800,(a6)
(1)  123/  FF1242 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  124/  FF1246 : 3C9F                		move.w	(sp)+,(a6)
(1)  125/  FF1248 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  126/  FF124E : 2CBC 96D0 95BA      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  127/  FF1254 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  128/  FF1258 : 3CBC C000           		move.w	#$C000,(a6)
(1)  129/  FF125C : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  130/  FF1260 : 3C9F                		move.w	(sp)+,(a6)
(1)  131/  FF1262 : 3E3C 8100           		move.w	#$8100,d7
(1)  132/  FF1266 : 1E38 A6EB           		move.b	(RAM_VdpRegs+1).w,d7
(1)  133/  FF126A : 3C87                		move.w	d7,(a6)
(1)  134/  FF126C :                     ; 		jsr	(Video_DmaBlast).l		; Process DMA Blast list
(1)  135/  FF126C : 6100 FC60           		bsr	MdMap_DrawScrl
(1)  136/  FF1270 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    9900                
(1)  137/  FF127A : 4E75                		rts
(1)  138/  FF127C :                     
(1)  139/  FF127C :                     ; --------------------------------------------------------
(1)  140/  FF127C :                     ; System_Dma_Enter, System_Dma_Exit
(1)  141/  FF127C :                     ;
(1)  142/  FF127C :                     ; Call these before entering or exiting any
(1)  143/  FF127C :                     ; DMA ROM-to-VDP transfer
(1)  144/  FF127C :                     ;
(1)  145/  FF127C :                     ; Your Sound driver's Z80 pause calls go here
(1)  146/  FF127C :                     ; --------------------------------------------------------
(1)  147/  FF127C :                     
(1)  148/  FF127C :                     System_Dma_Enter:
(1)  149/  FF127C : 4EB9 00FF 0156      		jsr	(Sound_DMA_Pause).l
(1)  150/  FF1282 : 4E75                		rts
(1)  151/  FF1284 :                     
(1)  152/  FF1284 :                     System_Dma_Exit:
(1)  153/  FF1284 : 4EB9 00FF 0190      		jsr	(Sound_DMA_Resume).l
(1)  154/  FF128A : 4E75                		rts
(1)  155/  FF128C :                     
(1)  156/  FF128C :                     ; ====================================================================
(1)  157/  FF128C :                     ; ----------------------------------------------------------------
(1)  158/  FF128C :                     ; 32X ONLY
(1)  159/  FF128C :                     ; ----------------------------------------------------------------
(1)  160/  FF128C :                     
(1)  161/  FF128C :                     ; --------------------------------------------------------
(1)  162/  FF128C :                     ; System_MarsUpdate
(1)  163/  FF128C :                     ; --------------------------------------------------------
(1)  164/  FF128C :                     
(1)  165/  FF128C :                     System_MarsUpdate:
(1)  166/  FF128C : 41F8 AB62           		lea	(RAM_MdDreq),a0		; Send DREQ
(1)  167/  FF1290 : 303C 06A0           		move.w	#sizeof_dreq,d0
(1)  168/  FF1294 : 4EF9 0088 2EC8      		jmp	(System_RomSendDreq).l	; <-- external jump
(1)  169/  FF129A :                     
(1)  170/  FF129A :                     ; --------------------------------------------------------
(1)  171/  FF129A :                     ; System_JumpRamCode
(1)  172/  FF129A :                     ;
(1)  173/  FF129A :                     ; Send new code to the USER side of RAM and
(1)  174/  FF129A :                     ; jump into it.
(1)  175/  FF129A :                     ;
(1)  176/  FF129A :                     ; Input:
(1)  177/  FF129A :                     ; d0 - Location of the RAM code
(1)  178/  FF129A :                     ; --------------------------------------------------------
(1)  179/  FF129A :                     
(1)  180/  FF129A :                     System_JumpRamCode:
(1)  181/  FF129A : 80BC 0088 0000      		or.l	#$880000,d0
(1)  182/  FF12A0 : 2040                		move.l	d0,a0
(1)  183/  FF12A2 : 43F9 00FF 167A      		lea	(RAMCODE_USER),a1
(1)  184/  FF12A8 : 3E3C 4FFF           		move.w	#$5000-1,d7	; TODO: make custom sizes.
(1)  185/  FF12AC :                     .copyme2:
(1)  186/  FF12AC : 12D8                		move.b	(a0)+,(a1)+
(1)  187/  FF12AE : 51CF FFFC           		dbf	d7,.copyme2
(1)  188/  FF12B2 : 4EF9 00FF 167A      		jmp	(RAMCODE_USER).l
(1)  189/  FF12B8 :                     
(1)  190/  FF12B8 :                     ; ====================================================================
(1)  191/  FF12B8 :                     ; ----------------------------------------------------------------
(1)  192/  FF12B8 :                     ; Subroutines
(1)  193/  FF12B8 :                     ; ----------------------------------------------------------------
(1)  194/  FF12B8 :                     
(1)  195/  FF12B8 :                     ; --------------------------------------------------------
(1)  196/  FF12B8 :                     ; System_Input
(1)  197/  FF12B8 :                     ;
(1)  198/  FF12B8 :                     ; Reads data from the Controller ports
(1)  199/  FF12B8 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  200/  FF12B8 :                     ; 
(1)  201/  FF12B8 :                     ; Uses:
(1)  202/  FF12B8 :                     ; d4-d6,a4-a6
(1)  203/  FF12B8 :                     ; --------------------------------------------------------
(1)  204/  FF12B8 :                     
(1)  205/  FF12B8 :                     System_Input:
(1)  206/  FF12B8 :                     ; 		move.w	#$0100,(z80_bus).l
(1)  207/  FF12B8 :                     .wait:
(1)  208/  FF12B8 :                     ; 		btst	#0,(z80_bus).l
(1)  209/  FF12B8 :                     ; 		bne.s	.wait
(1)  210/  FF12B8 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  211/  FF12BE : 4DF8 A702           		lea	(RAM_InputData),a6	; a6 - Output
(1)  212/  FF12C2 : 6108                		bsr.s	.this_one
(1)  213/  FF12C4 : DAFC 0002           		adda	#2,a5
(1)  214/  FF12C8 : DCFC 0010           		adda	#sizeof_input,a6
(1)  215/  FF12CC :                     ; 		bsr.s	.this_one
(1)  216/  FF12CC :                     ; ; 		move.w	#0,(z80_bus).l
(1)  217/  FF12CC :                     ; 		rts
(1)  218/  FF12CC :                     
(1)  219/  FF12CC :                     ; --------------------------------------------------------	
(1)  220/  FF12CC :                     ; Read port
(1)  221/  FF12CC :                     ; 
(1)  222/  FF12CC :                     ; a5 - Current port
(1)  223/  FF12CC :                     ; a6 - Output data
(1)  224/  FF12CC :                     ; --------------------------------------------------------
(1)  225/  FF12CC :                     
(1)  226/  FF12CC :                     .this_one:
(1)  227/  FF12CC : 6100 0166           		bsr	.pick_id
(1)  228/  FF12D0 : 1C84                		move.b	d4,pad_id(a6)
(1)  229/  FF12D2 : B87C 000F           		cmp.w	#$F,d4
(1)  230/  FF12D6 : 670E                		beq.s	.exit
(1)  231/  FF12D8 : C87C 000F           		and.w	#$F,d4
(1)  232/  FF12DC : D844                		add.w	d4,d4
(1)  233/  FF12DE : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)  234/  FF12E2 : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)  235/  FF12E6 :                     .exit:
(1)  236/  FF12E6 : 422E 0001           		clr.b	pad_ver(a6)
(1)  237/  FF12EA : 4E75                		rts
(1)  238/  FF12EC :                     
(1)  239/  FF12EC :                     ; --------------------------------------------------------
(1)  240/  FF12EC :                     ; Grab ID
(1)  241/  FF12EC :                     ; --------------------------------------------------------
(1)  242/  FF12EC :                     
(1)  243/  FF12EC :                     .list:
(1)  244/  FF12EC : FFFA                		dc.w .exit-.list	; $00
(1)  245/  FF12EE : FFFA                		dc.w .exit-.list
(1)  246/  FF12F0 : FFFA                		dc.w .exit-.list
(1)  247/  FF12F2 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  248/  FF12F4 : FFFA                		dc.w .exit-.list	; $04
(1)  249/  FF12F6 : FFFA                		dc.w .exit-.list
(1)  250/  FF12F8 : FFFA                		dc.w .exit-.list
(1)  251/  FF12FA : FFFA                		dc.w .exit-.list
(1)  252/  FF12FC : FFFA                		dc.w .exit-.list	; $08
(1)  253/  FF12FE : FFFA                		dc.w .exit-.list
(1)  254/  FF1300 : FFFA                		dc.w .exit-.list
(1)  255/  FF1302 : FFFA                		dc.w .exit-.list
(1)  256/  FF1304 : FFFA                		dc.w .exit-.list	; $0C
(1)  257/  FF1306 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  258/  FF1308 : FFFA                		dc.w .exit-.list
(1)  259/  FF130A : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  260/  FF130C :                     
(1)  261/  FF130C :                     ; --------------------------------------------------------
(1)  262/  FF130C :                     ; ID $03
(1)  263/  FF130C :                     ;
(1)  264/  FF130C :                     ; Mega Mouse
(1)  265/  FF130C :                     ; --------------------------------------------------------
(1)  266/  FF130C :                     
(1)  267/  FF130C :                     ; *** NOT TESTED ON HARDWARE ***
(1)  268/  FF130C :                     .id_03:
(1)  269/  FF130C : 1ABC 0020           		move.b	#$20,(a5)
(1)  270/  FF1310 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  271/  FF1316 : 0815 0004           		btst	#4,(a5)
(1)  272/  FF131A : 6700 0094           		beq.w	.invalid
(1)  273/  FF131E : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  274/  FF1322 : 4E71                		nop
(1)  275/  FF1324 : 4E71                		nop
(1)  276/  FF1326 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  277/  FF132A : 4E71                		nop
(1)  278/  FF132C : 4E71                		nop
(1)  279/  FF132E : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  280/  FF1332 : 4E71                		nop
(1)  281/  FF1334 : 4E71                		nop
(1)  282/  FF1336 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  283/  FF1338 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  284/  FF133C : 4E71                		nop
(1)  285/  FF133E : 4E71                		nop
(1)  286/  FF1340 : 1E15                		move.b	(a5),d7
(1)  287/  FF1342 : CE7C 000F            		and.w	#%1111,d7
(1)  288/  FF1346 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  289/  FF134A : BF46                		eor.w	d7,d6
(1)  290/  FF134C : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  291/  FF1350 : CC47                		and.w	d7,d6
(1)  292/  FF1352 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  293/  FF1356 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  294/  FF135A : 4E71                		nop
(1)  295/  FF135C : 4E71                		nop
(1)  296/  FF135E : 1E15                		move.b	(a5),d7
(1)  297/  FF1360 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  298/  FF1364 : CE7C 000F           		and.w	#%1111,d7
(1)  299/  FF1368 : E94F                		lsl.w	#4,d7
(1)  300/  FF136A : 4E71                		nop
(1)  301/  FF136C : 1C15                		move.b	(a5),d6
(1)  302/  FF136E : CC7C 000F           		and.w	#%1111,d6
(1)  303/  FF1372 : 8E46                		or.w	d6,d7
(1)  304/  FF1374 : 0805 0000           		btst    #0,d5
(1)  305/  FF1378 : 6704                		beq.s	.x_neg
(1)  306/  FF137A : 4407                		neg.b	d7
(1)  307/  FF137C : 4447                		neg.w	d7
(1)  308/  FF137E :                     .x_neg:
(1)  309/  FF137E : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  310/  FF1382 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  311/  FF1386 : 4E71                		nop
(1)  312/  FF1388 : 4E71                		nop
(1)  313/  FF138A : 1E15                		move.b	(a5),d7
(1)  314/  FF138C : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  315/  FF1390 : CE7C 000F           		and.w	#%1111,d7
(1)  316/  FF1394 : E94F                		lsl.w	#4,d7
(1)  317/  FF1396 : 4E71                		nop
(1)  318/  FF1398 : 1C15                		move.b	(a5),d6
(1)  319/  FF139A : CC7C 000F           		and.w	#%1111,d6
(1)  320/  FF139E : 8E46                		or.w	d6,d7
(1)  321/  FF13A0 : 0805 0001           		btst    #1,d5
(1)  322/  FF13A4 : 6704                		beq.s	.y_neg
(1)  323/  FF13A6 : 4407                		neg.b	d7
(1)  324/  FF13A8 : 4447                		neg.w	d7
(1)  325/  FF13AA :                     .y_neg:
(1)  326/  FF13AA : 4447                		neg.w	d7		; Reverse Y
(1)  327/  FF13AC : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  328/  FF13B0 :                     
(1)  329/  FF13B0 :                     .invalid:
(1)  330/  FF13B0 : 1ABC 0060           		move.b	#$60,(a5)
(1)  331/  FF13B4 : 4E75                		rts
(1)  332/  FF13B6 :                     
(1)  333/  FF13B6 :                     ; --------------------------------------------------------
(1)  334/  FF13B6 :                     ; ID $0D
(1)  335/  FF13B6 :                     ; 
(1)  336/  FF13B6 :                     ; Normal controller: 3 button or 6 button.
(1)  337/  FF13B6 :                     ; --------------------------------------------------------
(1)  338/  FF13B6 :                     
(1)  339/  FF13B6 :                     .id_0D:
(1)  340/  FF13B6 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  341/  FF13BA : 4E71                		nop
(1)  342/  FF13BC : 4E71                		nop
(1)  343/  FF13BE : 1A15                		move.b	(a5),d5
(1)  344/  FF13C0 : CA7C 003F           		and.w	#%00111111,d5
(1)  345/  FF13C4 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  346/  FF13C8 : 4E71                		nop
(1)  347/  FF13CA : 4E71                		nop
(1)  348/  FF13CC : 1815                		move.b	(a5),d4		; The following flips are for
(1)  349/  FF13CE : E54C                		lsl.w	#2,d4		; the 6pad's internal counter:
(1)  350/  FF13D0 : C87C 00C0           		and.w	#%11000000,d4
(1)  351/  FF13D4 : 8845                		or.w	d5,d4
(1)  352/  FF13D6 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  353/  FF13DA : 4644                		not.w	d4
(1)  354/  FF13DC : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  355/  FF13E0 : B905                		eor.b	d4,d5
(1)  356/  FF13E2 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  357/  FF13E6 : 1D44 0003           		move.b	d4,on_hold+1(a6)
(1)  358/  FF13EA : CA04                		and.b	d4,d5
(1)  359/  FF13EC : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  360/  FF13F0 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  361/  FF13F4 : 4E71                		nop
(1)  362/  FF13F6 : 4E71                		nop
(1)  363/  FF13F8 : 1815                		move.b	(a5),d4		; Grab ??|MXYZ
(1)  364/  FF13FA : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  365/  FF13FE : 4E71                  		nop
(1)  366/  FF1400 : 4E71                  		nop
(1)  367/  FF1402 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  368/  FF1404 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  369/  FF1408 : 4E71                 		nop
(1)  370/  FF140A : 4E71                 		nop
(1)  371/  FF140C : CC7C 000F           		and.w	#$F,d6
(1)  372/  FF1410 : E44E                		lsr.w	#2,d6
(1)  373/  FF1412 : CC7C 0001           		and.w	#1,d6
(1)  374/  FF1416 : 6716                		beq.s	.oldpad
(1)  375/  FF1418 : 4604                		not.b	d4
(1)  376/  FF141A : C87C 000F            		and.w	#%1111,d4
(1)  377/  FF141E : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  378/  FF1422 : B905                		eor.b	d4,d5
(1)  379/  FF1424 : 1D44 0002           		move.b	d4,on_hold(a6)
(1)  380/  FF1428 : CA04                		and.b	d4,d5
(1)  381/  FF142A : 1D45 0004           		move.b	d5,on_press(a6)
(1)  382/  FF142E :                     .oldpad:
(1)  383/  FF142E : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  384/  FF1432 : 4E75                		rts
(1)  385/  FF1434 :                     		
(1)  386/  FF1434 :                     ; --------------------------------------------------------
(1)  387/  FF1434 :                     ; Grab ID
(1)  388/  FF1434 :                     ; --------------------------------------------------------
(1)  389/  FF1434 :                     
(1)  390/  FF1434 :                     .pick_id:
(1)  391/  FF1434 : 7800                		moveq	#0,d4
(1)  392/  FF1436 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  393/  FF143A : 4E71                		nop
(1)  394/  FF143C : 4E71                		nop
(1)  395/  FF143E : 610A                		bsr	.read
(1)  396/  FF1440 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  397/  FF1444 : 4E71                		nop
(1)  398/  FF1446 : 4E71                		nop
(1)  399/  FF1448 : D844                		add.w	d4,d4
(1)  400/  FF144A :                     .read:
(1)  401/  FF144A : 1A15                		move.b	(a5),d5
(1)  402/  FF144C : 1C05                		move.b	d5,d6
(1)  403/  FF144E : CC3C 000C           		and.b	#$C,d6
(1)  404/  FF1452 : 6702                		beq.s	.step_1
(1)  405/  FF1454 : 5244                		addq.w	#1,d4
(1)  406/  FF1456 :                     .step_1:
(1)  407/  FF1456 : D844                		add.w	d4,d4
(1)  408/  FF1458 : 1C05                		move.b	d5,d6
(1)  409/  FF145A : CC7C 0003           		and.w	#3,d6
(1)  410/  FF145E : 6702                		beq.s	.step_2
(1)  411/  FF1460 : 5244                		addq.w	#1,d4
(1)  412/  FF1462 :                     .step_2:
(1)  413/  FF1462 : 4E75                		rts
(1)  414/  FF1464 :                     
(1)  415/  FF1464 :                     ; --------------------------------------------------------
(1)  416/  FF1464 :                     ; System_Random
(1)  417/  FF1464 :                     ; 
(1)  418/  FF1464 :                     ; Picks a random value
(1)  419/  FF1464 :                     ; 
(1)  420/  FF1464 :                     ; Output:
(1)  421/  FF1464 :                     ; d0 | LONG
(1)  422/  FF1464 :                     ; --------------------------------------------------------
(1)  423/  FF1464 :                     
(1)  424/  FF1464 :                     ; TODO: rewrite this
(1)  425/  FF1464 :                     System_Random:
(1)  426/  FF1464 : 2A38 AB46           		move.l	(RAM_SysRandSeed),d5
(1)  427/  FF1468 : 2838 AB42           		move.l	(RAM_SysRandVal),d4
(1)  428/  FF146C : E39D                		rol.l	#1,d5
(1)  429/  FF146E : EAA4                		asr.l	d5,d4
(1)  430/  FF1470 : D885                		add.l	d5,d4
(1)  431/  FF1472 : 23C5 FFFF AB46      		move.l	d5,(RAM_SysRandSeed).l
(1)  432/  FF1478 : 23C4 FFFF AB42      		move.l	d4,(RAM_SysRandVal).l
(1)  433/  FF147E : 2004                		move.l	d4,d0
(1)  434/  FF1480 : 4E75                		rts
(1)  435/  FF1482 :                     
(1)  436/  FF1482 :                     ; --------------------------------------------------------
(1)  437/  FF1482 :                     ; System_SineWave_Cos / System_SineWave
(1)  438/  FF1482 :                     ;
(1)  439/  FF1482 :                     ; Get sinewave value
(1)  440/  FF1482 :                     ;
(1)  441/  FF1482 :                     ; Input:
(1)  442/  FF1482 :                     ; d0 | WORD - Tan
(1)  443/  FF1482 :                     ; d1 | WORD - Multiply
(1)  444/  FF1482 :                     ;
(1)  445/  FF1482 :                     ; Output:
(1)  446/  FF1482 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  447/  FF1482 :                     ; --------------------------------------------------------
(1)  448/  FF1482 :                     
(1)  449/  FF1482 :                     ; TODO: improve this.
(1)  450/  FF1482 :                     System_SineWave_Cos:
(1)  451/  FF1482 : 48A7 8000           		movem.w	d0,-(sp)
(1)  452/  FF1486 : 7400                		moveq	#0,d2
(1)  453/  FF1488 : D03C 0040           		add.b	#$40,d0
(1)  454/  FF148C : 1400                		move.b	d0,d2
(1)  455/  FF148E : E302                		asl.b	#1,d2
(1)  456/  FF1490 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  457/  FF1494 : C4C1                		mulu.w	d1,d2
(1)  458/  FF1496 : 8000                		or.b	d0,d0
(1)  459/  FF1498 : 6A02                		bpl.s	.dont_neg
(1)  460/  FF149A : 4482                		neg.l	d2
(1)  461/  FF149C :                     .dont_neg:
(1)  462/  FF149C : 4C9F 0001           		movem.w	(sp)+,d0
(1)  463/  FF14A0 : 4E75                		rts
(1)  464/  FF14A2 :                     
(1)  465/  FF14A2 :                     System_SineWave:
(1)  466/  FF14A2 : 48A7 8000           		movem.w	d0,-(sp)
(1)  467/  FF14A6 : C07C 007F           		and.w	#$7F,d0
(1)  468/  FF14AA : E340                		asl.w	#1,d0
(1)  469/  FF14AC : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  470/  FF14B0 : C4C1                		mulu.w	d1,d2
(1)  471/  FF14B2 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  472/  FF14B6 : 5182                		subq.l	#8,d2
(1)  473/  FF14B8 : 8000                		or.b	d0,d0
(1)  474/  FF14BA : 6A02                		bpl.s	.dont_neg
(1)  475/  FF14BC : 4482                		neg.l	d2
(1)  476/  FF14BE :                     .dont_neg:
(1)  477/  FF14BE : 4E75                		rts
(1)  478/  FF14C0 :                     
(1)  479/  FF14C0 : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  480/  FF14D6 : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  481/  FF14EA : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  482/  FF14FE : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  483/  FF1512 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  484/  FF1526 : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  485/  FF153A : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  486/  FF154C : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  487/  FF1560 : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  488/  FF1574 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  489/  FF1588 : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  490/  FF159C : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  491/  FF15B0 : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  492/  FF15C0 :                     
(1)  493/  FF15C0 :                     ; --------------------------------------------------------
(1)  494/  FF15C0 :                     ; System_SetInts
(1)  495/  FF15C0 :                     ;
(1)  496/  FF15C0 :                     ; Set new interrputs
(1)  497/  FF15C0 :                     ;
(1)  498/  FF15C0 :                     ; d0 | LONG - VBlank
(1)  499/  FF15C0 :                     ; d1 | LONG - HBlank
(1)  500/  FF15C0 :                     ;
(1)  501/  FF15C0 :                     ; Uses:
(1)  502/  FF15C0 :                     ; d4
(1)  503/  FF15C0 :                     ;
(1)  504/  FF15C0 :                     ; Notes:
(1)  505/  FF15C0 :                     ; Writing 0 or a negative number will skip change
(1)  506/  FF15C0 :                     ; to the interrupt pointer
(1)  507/  FF15C0 :                     ; --------------------------------------------------------
(1)  508/  FF15C0 :                     
(1)  509/  FF15C0 :                     System_SetInts:
(1)  510/  FF15C0 : 2800                		move.l	d0,d4
(1)  511/  FF15C2 : 670E                		beq.s	.novint
(1)  512/  FF15C4 : 6B0C                		bmi.s	.novint
(1)  513/  FF15C6 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  514/  FF15CC : 23C4 FFFF AB50       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  515/  FF15D2 :                     .novint:
(1)  516/  FF15D2 : 2801                		move.l	d1,d4
(1)  517/  FF15D4 : 670E                		beq.s	.nohint
(1)  518/  FF15D6 : 6B0C                		bmi.s	.nohint
(1)  519/  FF15D8 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  520/  FF15DE : 23C4 FFFF AB56      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  521/  FF15E4 :                     .nohint:
(1)  522/  FF15E4 : 4E75                		rts
(1)  523/  FF15E6 :                     
(1)  524/  FF15E6 :                     ; --------------------------------------------------------
(1)  525/  FF15E6 :                     ; System_SramInit
(1)  526/  FF15E6 :                     ; 
(1)  527/  FF15E6 :                     ; Init save data
(1)  528/  FF15E6 :                     ; 
(1)  529/  FF15E6 :                     ; Uses:
(1)  530/  FF15E6 :                     ; a4,d4-d5
(1)  531/  FF15E6 :                     ; --------------------------------------------------------
(1)  532/  FF15E6 :                     
(1)  533/  FF15E6 :                     ; TODO: Check if RV bit is needed here...
(1)  534/  FF15E6 :                     System_SramInit:
(1)  535/  FF15E6 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  536/  FF15EE : 49F9 0020 0001      		lea	($200001).l,a4
(1)  537/  FF15F4 : 7800                		moveq	#0,d4
(1)  538/  FF15F6 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  539/  FF15FA :                     .initsave:
(1)  540/  FF15FA : 1884                		move.b	d4,(a4)
(1)  541/  FF15FC : D8FC 0002           		adda	#2,a4
(1)  542/  FF1600 : 51CD FFF8           		dbf	d5,.initsave
(1)  543/  FF1604 : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  544/  FF160C : 4E75                		rts
(1)  545/  FF160E :                     
(1)  546/  FF160E :                     ; ====================================================================
(1)  547/  FF160E :                     ; ----------------------------------------------------------------
(1)  548/  FF160E :                     ; Screen mode subroutines
(1)  549/  FF160E :                     ; ----------------------------------------------------------------
(1)  550/  FF160E :                     
(1)  551/  FF160E :                     ; --------------------------------------------------------
(1)  552/  FF160E :                     ; Initialize current screen mode
(1)  553/  FF160E :                     ; --------------------------------------------------------
(1)  554/  FF160E :                     
(1)  555/  FF160E :                     Mode_Init:
(1)  556/  FF160E : 4EB9 00FF 02DC      		jsr	(Video_Clear).l
(1)  557/  FF1614 : 49F8 9000           		lea	(RAM_ModeBuff),a4
(1)  558/  FF1618 : 3A3C 03FF           		move.w	#(MAX_MDERAM/2)-1,d5
(1)  559/  FF161C : 7800                		moveq	#0,d4
(1)  560/  FF161E :                     .clr:
(1)  561/  FF161E : 38C4                		move.w	d4,(a4)+
(1)  562/  FF1620 : 51CD FFFC           		dbf	d5,.clr
(1)  563/  FF1624 : 303C 0000           		move.w	#0,d0
(1)  564/  FF1628 : 6100 F3BC           		bsr	Video_Mars_GfxMode
(1)  565/  FF162C : 4E75                		rts
(1)  566/  FF162E :                     
(1)  567/  FF162E :                     ; --------------------------------------------------------
(1)  568/  FF162E :                     
(1)  569/  FF162E :                     Mode_FadeOut:
(1)  570/  FF162E : 31FC 0002 A6DA      		move.w	#2,(RAM_FadeMdReq).w
(1)  571/  FF1634 : 31FC 0002 A6E2      		move.w	#2,(RAM_FadeMarsReq).w
(1)  572/  FF163A : 31FC 0001 A6DC      		move.w	#1,(RAM_FadeMdIncr).w
(1)  573/  FF1640 : 31FC 0004 A6E4      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  574/  FF1646 : 31FC 0000 A6DE      		move.w	#0,(RAM_FadeMdDelay).w
(1)  575/  FF164C : 31FC 0000 A6E6      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  576/  FF1652 :                     .loopw:
(1)  577/  FF1652 : 6100 FB6E           		bsr	System_WaitFrame
(1)  578/  FF1656 : 4EB9 00FF 05CC      		jsr	(Video_RunFade).l
(1)  579/  FF165C : 66F4                		bne.s	.loopw
(1)  580/  FF165E : 4E75                		rts
(1)  581/  FF1660 :                     
(1)  582/  FF1660 :                     ; ====================================================================
(1)  583/  FF1660 :                     ; ----------------------------------------------------------------
(1)  584/  FF1660 :                     ; Default interrupts
(1)  585/  FF1660 :                     ; ----------------------------------------------------------------
(1)  586/  FF1660 :                     
(1)  587/  FF1660 :                     ; --------------------------------------------------------
(1)  588/  FF1660 :                     ; VBlank
(1)  589/  FF1660 :                     ; --------------------------------------------------------
(1)  590/  FF1660 :                     
(1)  591/  FF1660 :                     VInt_Default:
(1)  592/  FF1660 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  593/  FF1664 : 6100 FC52           		bsr	System_Input
(1)  594/  FF1668 : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    9900                
(1)  595/  FF1672 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  596/  FF1676 : 4E73                		rte
(1)  597/  FF1678 :                     
(1)  598/  FF1678 :                     ; --------------------------------------------------------
(1)  599/  FF1678 :                     ; HBlank
(1)  600/  FF1678 :                     ; --------------------------------------------------------
(1)  601/  FF1678 :                     
(1)  602/  FF1678 :                     HInt_Default:
(1)  603/  FF1678 : 4E73                		rte
(1)  604/  FF167A :                     
(1)  605/  FF167A :                     ; ====================================================================
(1)  606/  FF167A :                     ; ----------------------------------------------------------------
(1)  607/  FF167A :                     ; System data
(1)  608/  FF167A :                     ; ----------------------------------------------------------------
(1)  609/  FF167A :                     
      46/  FF167A :                     RAMCODE_USER:
      47/    1F54 :                     		dephase
      48/    1F54 :                     Md_TopCode_e:
      49/    1F54 :                     		align 2
      50/    1F54 :                     
      51/    1F54 :                     ; ====================================================================
      52/    1F54 :                     ; --------------------------------------------------------
      53/    1F54 :                     ; RAM code sections for 68K
      54/    1F54 :                     ; --------------------------------------------------------
      55/    1F54 :                     
      56/    1F54 :                     RamCode_Boot:
      57/  FF167A :                     		phase RAMCODE_USER
      58/  FF167A :                     		include "code/main.asm"
(1)    1/  FF167A :                     ; ====================================================================
(1)    2/  FF167A :                     ; ----------------------------------------------------------------
(1)    3/  FF167A :                     ; Default gamemode
(1)    4/  FF167A :                     ; ----------------------------------------------------------------
(1)    5/  FF167A :                     
(1)    6/  FF167A :                     ; ====================================================================
(1)    7/  FF167A :                     ; ------------------------------------------------------
(1)    8/  FF167A :                     ; Variables
(1)    9/  FF167A :                     ; ------------------------------------------------------
(1)   10/  FF167A :                     
(1)   11/  FF167A : =$2                 TEST_MAINSPD	equ $02
(1)   12/  FF167A :                     ; emily_VRAM	equ $380
(1)   13/  FF167A :                     
(1)   14/  FF167A :                     ; ====================================================================
(1)   15/  FF167A :                     ; ------------------------------------------------------
(1)   16/  FF167A :                     ; Structs
(1)   17/  FF167A :                     ; ------------------------------------------------------
(1)   18/  FF167A :                     
(1)   19/  FF167A :                     ; 		struct 0
(1)   20/  FF167A :                     ; strc_xpos	ds.w 1
(1)   21/  FF167A :                     ; strc_ypos	ds.w 1
(1)   22/  FF167A :                     ; 		finish
(1)   23/  FF167A :                     
(1)   24/  FF167A :                     ; ====================================================================
(1)   25/  FF167A :                     ; ------------------------------------------------------
(1)   26/  FF167A :                     ; This mode's RAM
(1)   27/  FF167A :                     ; ------------------------------------------------------
(1)   28/  FF167A :                     
(1)   29/  FF167A : (MACRO)             		struct RAM_ModeBuff
(1)   29/  FF167A : =$FF167A            GLBL_LASTPC     set *
(1)   29/    1F54 :                                     dephase
(1)   29/    1F54 : =$1F54              GLBL_LASTORG    set *
(1)   29/FFFFFFFFFFFF9000 :                                     phase RAM_MODEBUFF
(1)   30/FFFFFFFFFFFF9000 :                     RAM_MapX	ds.l 1
(1)   31/FFFFFFFFFFFF9004 :                     RAM_MapY	ds.l 1
(1)   32/FFFFFFFFFFFF9008 :                     RAM_ThisSpeed	ds.l 1
(1)   33/FFFFFFFFFFFF900C :                     RAM_EmiFrame	ds.w 1
(1)   34/FFFFFFFFFFFF900E :                     RAM_EmiAnim	ds.w 1
(1)   35/FFFFFFFFFFFF9010 :                     RAM_EmiTimer	ds.w 1
(1)   36/FFFFFFFFFFFF9012 : (MACRO)             		finish
(1)   36/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)   36/  FF167A :                                     phase GLBL_LASTPC
(1)   37/  FF167A :                     
(1)   38/  FF167A :                     ; ====================================================================
(1)   39/  FF167A :                     ; ------------------------------------------------------
(1)   40/  FF167A :                     ; Code start
(1)   41/  FF167A :                     ; ------------------------------------------------------
(1)   42/  FF167A :                     
(1)   43/  FF167A :                     MD_Mode0:
(1)   44/  FF167A :                     ; 		bra	MD_DebugMenu
(1)   45/  FF167A :                     
(1)   46/  FF167A : 46FC 2700           		move.w	#$2700,sr
(1)   47/  FF167E : 08B9 0006 FFFF A6EB 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   48/  FF1686 : 6100 EC00           		bsr	Video_Update
(1)   49/  FF168A : 6182                		bsr	Mode_Init
(1)   50/  FF168C : 6100 ED3E           		bsr	Video_PrintInit
(1)   51/  FF1690 : 4278 A1F4           		clr.w	(RAM_PaletteFd).w
(1)   52/  FF1694 : 23FC 0001 0000 FFFF 		move.l	#$10000,(RAM_ThisSpeed).l
                    9008                
(1)   53/  FF169E :                     
(1)   54/  FF169E : 33FC 0000 FFFF 9000 		move.w	#0,(RAM_MapX).l
(1)   55/  FF16A6 : 33FC 0000 FFFF 9004 		move.w	#0,(RAM_MapY).l
(1)   56/  FF16AE : 6100 0174           		bsr	.update_pos
(1)   57/  FF16B2 :                     
(1)   58/  FF16B2 :                     	; Pick maps
(1)   59/  FF16B2 : 6100 F50A           		bsr	MdMap_Init
(1)   60/  FF16B6 : 6100 0334           		bsr	Level_PickMap
(1)   61/  FF16BA : 6100 01FE           		bsr	SuperSpr_Init
(1)   62/  FF16BE : 41F9 0092 F0A4      		lea	(MapPal_M),a0
(1)   63/  FF16C4 : 7000                		moveq	#0,d0
(1)   64/  FF16C6 : 323C 0100           		move.w	#256,d1
(1)   65/  FF16CA : 7401                		moveq	#1,d2
(1)   66/  FF16CC : 6100 F36C           		bsr	Video_FadePal_Mars
(1)   67/  FF16D0 : 0278 7FFF A274      		and.w	#$7FFF,(RAM_MdMarsPalFd).w
(1)   68/  FF16D6 : 6100 FBB4           		bsr	System_MarsUpdate		; Send first DREQ
(1)   69/  FF16DA : 7002                		moveq	#2,d0
(1)   70/  FF16DC : 6100 F308           		bsr	Video_Mars_GfxMode
(1)   71/  FF16E0 :                     	; ****
(1)   72/  FF16E0 : 6100 F6B2           		bsr	MdMap_DrawAll
(1)   73/  FF16E4 : 41F9 0092 F2A4      		lea	(Pal_level0),a0
(1)   74/  FF16EA : 7010                		moveq	#$10,d0
(1)   75/  FF16EC : 323C 0020           		move.w	#32,d1
(1)   76/  FF16F0 : 6100 EEEC           		bsr	Video_FadePal
(1)   77/  FF16F4 : 203C 0004 0000      		move.l	#Art_level0,d0
(1)   78/  FF16FA : 323C 0001           		move.w	#1,d1
(1)   79/  FF16FE : 343C 13E0           		move.w	#Art_level0_e-Art_level0,d2
(1)   80/  FF1702 : 6100 F1BA           		bsr	Video_LoadArt
(1)   81/  FF1706 :                     
(1)   82/  FF1706 : 31FC 0001 A6DC      		move.w	#1,(RAM_FadeMdIncr).w
(1)   83/  FF170C : 31FC 0002 A6E4      		move.w	#2,(RAM_FadeMarsIncr).w
(1)   84/  FF1712 : 31FC 0001 A6DE      		move.w	#1,(RAM_FadeMdDelay).w
(1)   85/  FF1718 : 31FC 0000 A6E6      		move.w	#0,(RAM_FadeMarsDelay).w
(1)   86/  FF171E : 31FC 0001 A6DA      		move.w	#1,(RAM_FadeMdReq).w
(1)   87/  FF1724 : 31FC 0001 A6E2      		move.w	#1,(RAM_FadeMarsReq).w
(1)   88/  FF172A : 08F9 0006 FFFF A6EB 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   89/  FF1732 : 13FC 0000 FFFF A6F5 		move.b	#%000,(RAM_VdpRegs+$B).l
(1)   90/  FF173A : 13FC 0010 FFFF A6F1 		move.b	#$10,(RAM_VdpRegs+7).l
(1)   91/  FF1742 : 6100 EB44           		bsr	Video_Update
(1)   92/  FF1746 :                     
(1)   93/  FF1746 :                     	; Prepare sound
(1)   94/  FF1746 : 7000                		moveq	#0,d0
(1)   95/  FF1748 : 6100 EAA6           		bsr	Sound_TrkStop
(1)   96/  FF174C : 323C 00E8           		move.w	#200+32,d1
(1)   97/  FF1750 : 6100 EAE6           		bsr	Sound_GlbBeats
(1)   98/  FF1754 : 41F9 0090 4E00      		lea	(GemaTrkData_Nadie_MARS),a0
(1)   99/  FF175A :                     ; 		lea	(GemaTrkData_Nadie_MD),a0
(1)  100/  FF175A : 7000                		moveq	#0,d0
(1)  101/  FF175C : 323C 0006           		move.w	#6,d1
(1)  102/  FF1760 : 7400                		moveq	#0,d2
(1)  103/  FF1762 : 363C 0001           		move.w	#%01,d3
(1)  104/  FF1766 : 6100 EA4A           		bsr	Sound_TrkPlay
(1)  105/  FF176A :                     
(1)  106/  FF176A :                     ; ====================================================================
(1)  107/  FF176A :                     ; ------------------------------------------------------
(1)  108/  FF176A :                     ; Loop
(1)  109/  FF176A :                     ; ------------------------------------------------------
(1)  110/  FF176A :                     
(1)  111/  FF176A :                     .loop:
(1)  112/  FF176A : 6100 F54C           		bsr	MdMap_Update
(1)  113/  FF176E : 6100 FA52           		bsr	System_WaitFrame
(1)  114/  FF1772 : 6100 EE58           		bsr	Video_RunFade
(1)  115/  FF1776 : 66F2                		bne.s	.loop
(1)  116/  FF1778 :                     
(1)  117/  FF1778 : 6100 0178           		bsr	SuperSpr_Main
(1)  118/  FF177C :                     
(1)  119/  FF177C :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  120/  FF177C :                     ; 		add.w	#8*4,mdl_x_rot(a0)
(1)  121/  FF177C :                     ; 		add.w	#8*2,mdl_y_rot(a0)
(1)  122/  FF177C :                     ; 		add.w	#8*5,mdl_z_rot(a0)
(1)  123/  FF177C :                     
(1)  124/  FF177C : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  125/  FF1780 : 0807 0005           		btst	#bitJoyC,d7
(1)  126/  FF1784 : 6720                		beq.s	.z_up
(1)  127/  FF1786 : 06B9 0001 0000 FFFF 		add.l	#$10000,(RAM_ThisSpeed).l
                    9008                
(1)  128/  FF1790 : 0CB9 0007 0000 FFFF 		cmp.l	#$70000,(RAM_ThisSpeed).l
                    9008                
(1)  129/  FF179A : 6F0A                		ble.s	.z_up
(1)  130/  FF179C : 23FC 0001 0000 FFFF 		move.l	#$10000,(RAM_ThisSpeed).l
                    9008                
(1)  131/  FF17A6 :                     .z_up:
(1)  132/  FF17A6 : 2038 9008           		move.l	(RAM_ThisSpeed),d0
(1)  133/  FF17AA : 2238 9008           		move.l	(RAM_ThisSpeed),d1
(1)  134/  FF17AE : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  135/  FF17B2 : 3C07                		move.w	d7,d6
(1)  136/  FF17B4 : 0807 0001           		btst	#bitJoyDown,d7
(1)  137/  FF17B8 : 6710                		beq.s	.noz_down
(1)  138/  FF17BA : 31FC 0000 900C      		move.w	#0,(RAM_EmiFrame).w
(1)  139/  FF17C0 : 0678 0001 900E      		add.w	#1,(RAM_EmiAnim).w
(1)  140/  FF17C6 : D3B8 9004           		add.l	d1,(RAM_MapY).w
(1)  141/  FF17CA :                     .noz_down:
(1)  142/  FF17CA : 3C07                		move.w	d7,d6
(1)  143/  FF17CC : 0806 0000           		btst	#bitJoyUp,d6
(1)  144/  FF17D0 : 6710                		beq.s	.noz_up
(1)  145/  FF17D2 : 31FC 0004 900C      		move.w	#4,(RAM_EmiFrame).w
(1)  146/  FF17D8 : 0678 0001 900E      		add.w	#1,(RAM_EmiAnim).w
(1)  147/  FF17DE : 93B8 9004           		sub.l	d1,(RAM_MapY).w
(1)  148/  FF17E2 :                     .noz_up:
(1)  149/  FF17E2 : 3C07                		move.w	d7,d6
(1)  150/  FF17E4 : 0806 0003           		btst	#bitJoyRight,d6
(1)  151/  FF17E8 : 6710                		beq.s	.noz_r
(1)  152/  FF17EA : 31FC 0008 900C      		move.w	#8,(RAM_EmiFrame).w
(1)  153/  FF17F0 : 0678 0001 900E      		add.w	#1,(RAM_EmiAnim).w
(1)  154/  FF17F6 : D1B8 9000           		add.l	d0,(RAM_MapX).w
(1)  155/  FF17FA :                     .noz_r:
(1)  156/  FF17FA : 3C07                		move.w	d7,d6
(1)  157/  FF17FC : 0806 0002           		btst	#bitJoyLeft,d6
(1)  158/  FF1800 : 6710                		beq.s	.noz_l
(1)  159/  FF1802 : 31FC 000C 900C      		move.w	#$C,(RAM_EmiFrame).w
(1)  160/  FF1808 : 0678 0001 900E      		add.w	#1,(RAM_EmiAnim).w
(1)  161/  FF180E : 91B8 9000           		sub.l	d0,(RAM_MapX).w
(1)  162/  FF1812 :                     .noz_l:
(1)  163/  FF1812 :                     
(1)  164/  FF1812 : 6110                		bsr.s	.update_pos
(1)  165/  FF1814 :                     
(1)  166/  FF1814 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  167/  FF1818 : 0807 0007           		btst	#bitJoyStart,d7
(1)  168/  FF181C : 6700 FF4C           		beq	.loop
(1)  169/  FF1820 : 6000 0264           		bra	MD_DebugMenu
(1)  170/  FF1824 :                     
(1)  171/  FF1824 :                     
(1)  172/  FF1824 :                     .update_pos:
(1)  173/  FF1824 : 3038 9000           		move.w	(RAM_MapX),d0
(1)  174/  FF1828 : 3238 9004           		move.w	(RAM_MapY),d1
(1)  175/  FF182C : 41F8 AD62           		lea	(RAM_BgBufferM),a0
(1)  176/  FF1830 : 3140 0030           		move.w	d0,md_bg_x(a0)
(1)  177/  FF1834 : 3141 0034           		move.w	d1,md_bg_y(a0)
(1)  178/  FF1838 : 41F8 9820           		lea	(RAM_BgBuffer),a0
(1)  179/  FF183C : E240                		asr.w	#1,d0
(1)  180/  FF183E : E241                		asr.w	#1,d1
(1)  181/  FF1840 : 3140 0030           		move.w	d0,md_bg_x(a0)
(1)  182/  FF1844 : 3141 0034           		move.w	d1,md_bg_y(a0)
(1)  183/  FF1848 : 31C0 9904           		move.w	d0,(RAM_HorScroll).w
(1)  184/  FF184C : 31C1 9CC4           		move.w	d1,(RAM_VerScroll).w
(1)  185/  FF1850 : D0FC 0038           		adda	#sizeof_mdbg,a0
(1)  186/  FF1854 : E240                		asr.w	#1,d0
(1)  187/  FF1856 : E241                		asr.w	#1,d1
(1)  188/  FF1858 : 3140 0030           		move.w	d0,md_bg_x(a0)
(1)  189/  FF185C : 3141 0034           		move.w	d1,md_bg_y(a0)
(1)  190/  FF1860 : 31C0 9906           		move.w	d0,(RAM_HorScroll+2).w
(1)  191/  FF1864 : 31C1 9CC6           		move.w	d1,(RAM_VerScroll+2).w
(1)  192/  FF1868 : 44B8 9904           		neg.l	(RAM_HorScroll).w
(1)  193/  FF186C : 4E75                		rts
(1)  194/  FF186E :                     
(1)  195/  FF186E :                     ; ====================================================================
(1)  196/  FF186E :                     ; ----------------------------------------------
(1)  197/  FF186E :                     ; common subs
(1)  198/  FF186E :                     ; ----------------------------------------------
(1)  199/  FF186E :                     
(1)  200/  FF186E :                     .fade_in:
(1)  201/  FF186E : 31FC 0001 A6DA      		move.w	#1,(RAM_FadeMdReq).w
(1)  202/  FF1874 : 31FC 0001 A6E2      		move.w	#1,(RAM_FadeMarsReq).w
(1)  203/  FF187A : 31FC 0001 A6DC      		move.w	#1,(RAM_FadeMdIncr).w
(1)  204/  FF1880 : 31FC 0004 A6E4      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  205/  FF1886 : 31FC 0000 A6DE      		move.w	#0,(RAM_FadeMdDelay).w
(1)  206/  FF188C : 31FC 0000 A6E6      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  207/  FF1892 : 4E75                		rts
(1)  208/  FF1894 :                     
(1)  209/  FF1894 :                     .fade_out:
(1)  210/  FF1894 : 31FC 0002 A6DA      		move.w	#2,(RAM_FadeMdReq).w
(1)  211/  FF189A : 31FC 0002 A6E2      		move.w	#2,(RAM_FadeMarsReq).w
(1)  212/  FF18A0 : 31FC 0001 A6DC      		move.w	#1,(RAM_FadeMdIncr).w
(1)  213/  FF18A6 : 31FC 0004 A6E4      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  214/  FF18AC : 31FC 0000 A6DE      		move.w	#0,(RAM_FadeMdDelay).w
(1)  215/  FF18B2 : 31FC 0000 A6E6      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  216/  FF18B8 : 4E75                		rts
(1)  217/  FF18BA :                     
(1)  218/  FF18BA :                     ; ====================================================================
(1)  219/  FF18BA :                     ; ------------------------------------------------------
(1)  220/  FF18BA :                     ; Subroutines
(1)  221/  FF18BA :                     ; ------------------------------------------------------
(1)  222/  FF18BA :                     
(1)  223/  FF18BA :                     ; Emilie_MkSprite:
(1)  224/  FF18BA :                     ; 		lea	(RAM_Sprites),a6
(1)  225/  FF18BA :                     ; 		move.l	(RAM_EmiPosY),d0
(1)  226/  FF18BA :                     ; 		move.l	(RAM_EmiPosX),d1
(1)  227/  FF18BA :                     ; 		swap	d0
(1)  228/  FF18BA :                     ; 		swap	d1
(1)  229/  FF18BA :                     ; 		add.w	#$80+32,d0
(1)  230/  FF18BA :                     ; 		add.w	#$80+32,d1
(1)  231/  FF18BA :                     ; 		move.w	(RAM_EmiAnim),d2
(1)  232/  FF18BA :                     ; 		lsr.w	#3,d2
(1)  233/  FF18BA :                     ; 		and.w	#%11,d2
(1)  234/  FF18BA :                     ; 		move.w	(RAM_EmiFrame),d3
(1)  235/  FF18BA :                     ; 		add.w	d3,d2
(1)  236/  FF18BA :                     ; 		add.w	d2,d2
(1)  237/  FF18BA :                     ; 		lea	Map_Nicole(pc),a0
(1)  238/  FF18BA :                     ; 		move.w	(a0,d2.w),d2
(1)  239/  FF18BA :                     ; 		adda	d2,a0
(1)  240/  FF18BA :                     ; 		move.b	(a0)+,d4
(1)  241/  FF18BA :                     ; 		and.w	#$FF,d4
(1)  242/  FF18BA :                     ; 		sub.w	#1,d4
(1)  243/  FF18BA :                     ; 		move.w	#$0001,d5
(1)  244/  FF18BA :                     ; 		move.w	#emily_VRAM,d6
(1)  245/  FF18BA :                     ; .nxt_pz:
(1)  246/  FF18BA :                     ; 		move.b	(a0)+,d3
(1)  247/  FF18BA :                     ; 		ext.w	d3
(1)  248/  FF18BA :                     ; 		add.w	d0,d3
(1)  249/  FF18BA :                     ; 		move.w	d3,(a6)+
(1)  250/  FF18BA :                     ;
(1)  251/  FF18BA :                     ; 		move.b	(a0)+,d3
(1)  252/  FF18BA :                     ; 		lsl.w	#8,d3
(1)  253/  FF18BA :                     ; 		add.w	d5,d3
(1)  254/  FF18BA :                     ; 		move.w	d3,(a6)+
(1)  255/  FF18BA :                     ;
(1)  256/  FF18BA :                     ; 		move.b	(a0)+,d3
(1)  257/  FF18BA :                     ; 		lsl.w	#8,d3
(1)  258/  FF18BA :                     ; 		move.b	(a0)+,d2
(1)  259/  FF18BA :                     ; 		and.w	#$FF,d2
(1)  260/  FF18BA :                     ; 		add.w	d3,d2
(1)  261/  FF18BA :                     ; 		add.w	d6,d2
(1)  262/  FF18BA :                     ; 		move.w	d2,(a6)+
(1)  263/  FF18BA :                     ;
(1)  264/  FF18BA :                     ; 		move.b	(a0)+,d3
(1)  265/  FF18BA :                     ; 		ext.w	d3
(1)  266/  FF18BA :                     ; 		add.w	d1,d3
(1)  267/  FF18BA :                     ; 		move.w	d3,(a6)+
(1)  268/  FF18BA :                     ; 		add.w	#1,d5
(1)  269/  FF18BA :                     ; 		dbf	d4,.nxt_pz
(1)  270/  FF18BA :                     ; 		clr.l	(a6)+
(1)  271/  FF18BA :                     ; 		clr.l	(a6)+
(1)  272/  FF18BA :                     ;
(1)  273/  FF18BA :                     ; 	; DPLC
(1)  274/  FF18BA :                     ; 		move.w	(RAM_EmiAnim),d2
(1)  275/  FF18BA :                     ; 		lsr.w	#3,d2
(1)  276/  FF18BA :                     ; 		and.w	#%11,d2
(1)  277/  FF18BA :                     ; 		move.w	(RAM_EmiFrame),d3
(1)  278/  FF18BA :                     ; 		add.w	d3,d2
(1)  279/  FF18BA :                     ; 		add.w	d2,d2
(1)  280/  FF18BA :                     ; 		lea	Dplc_Nicole(pc),a0
(1)  281/  FF18BA :                     ; 		move.w	(a0,d2.w),d2
(1)  282/  FF18BA :                     ; 		adda	d2,a0
(1)  283/  FF18BA :                     ; 		move.w	(a0)+,d4
(1)  284/  FF18BA :                     ; 		and.w	#$FF,d4
(1)  285/  FF18BA :                     ; 		sub.w	#1,d4
(1)  286/  FF18BA :                     ; 		move.w	#emily_VRAM,d5
(1)  287/  FF18BA :                     ;
(1)  288/  FF18BA :                     ;
(1)  289/  FF18BA :                     ; 	; d0 - graphics
(1)  290/  FF18BA :                     ; 	; d5 - VRAM OUTPUT
(1)  291/  FF18BA :                     ; 		lsl.w	#5,d5
(1)  292/  FF18BA :                     ; 		moveq	#0,d1
(1)  293/  FF18BA :                     ; .nxt_dpz:
(1)  294/  FF18BA :                     ; 		move.l	#ART_EMI,d0
(1)  295/  FF18BA :                     ; 		move.w	(a0)+,d1
(1)  296/  FF18BA :                     ; 		move.w	d1,d2
(1)  297/  FF18BA :                     ; 		and.w	#$7FF,d1
(1)  298/  FF18BA :                     ; 		lsl.w	#5,d1
(1)  299/  FF18BA :                     ; 		add.l	d1,d0
(1)  300/  FF18BA :                     ; 		move.w	d5,d1
(1)  301/  FF18BA :                     ; 		lsr.w	#7,d2
(1)  302/  FF18BA :                     ; 		add.w	#$20,d2
(1)  303/  FF18BA :                     ; 		move.w	d2,d3
(1)  304/  FF18BA :                     ; 		bsr	Video_DmaMkEntry
(1)  305/  FF18BA :                     ; 		add.w	d3,d5
(1)  306/  FF18BA :                     ; 		dbf	d4,.nxt_dpz
(1)  307/  FF18BA :                     ; .no_upd:
(1)  308/  FF18BA :                     ; 		rts
(1)  309/  FF18BA :                     
(1)  310/  FF18BA :                     ; ====================================================================
(1)  311/  FF18BA :                     ; ------------------------------------------------------
(1)  312/  FF18BA :                     ; Subroutines
(1)  313/  FF18BA :                     ; ------------------------------------------------------
(1)  314/  FF18BA :                     
(1)  315/  FF18BA :                     SuperSpr_Init:
(1)  316/  FF18BA : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  317/  FF18BE : 203C 0213 28FC      		move.l	#SuperSpr_Test,d0
(1)  318/  FF18C4 : 2200                		move.l	d0,d1
(1)  319/  FF18C6 : 82BC 2000 0000      		or.l	#TH,d1
(1)  320/  FF18CC : 2141 0010           		move.l	d1,marsspr_data(a0)
(1)  321/  FF18D0 : 317C 0040 0004      		move.w	#64,marsspr_dwidth(a0)
(1)  322/  FF18D6 : 317C 0090 000A      		move.w	#320/2-16,marsspr_x(a0)
(1)  323/  FF18DC : 317C 0060 000C      		move.w	#224/2-16,marsspr_y(a0)
(1)  324/  FF18E2 : 10BC 0020           		move.b	#32,marsspr_xs(a0)
(1)  325/  FF18E6 : 117C 0030 0001      		move.b	#48,marsspr_ys(a0)
(1)  326/  FF18EC : 317C 0080 0006      		move.w	#$80,marsspr_indx(a0)
(1)  327/  FF18F2 :                     
(1)  328/  FF18F2 :                     SuperSpr_Main:
(1)  329/  FF18F2 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  330/  FF18F6 : 0478 0001 9010      		sub.w	#1,(RAM_EmiTimer).w
(1)  331/  FF18FC : 6A2A                		bpl.s	.wspr
(1)  332/  FF18FE : 31FC 000E 9010      		move.w	#14,(RAM_EmiTimer).w
(1)  333/  FF1904 :                     
(1)  334/  FF1904 : 1028 0002           		move.b	marsspr_xfrm(a0),d0
(1)  335/  FF1908 : D07C 0001           		add.w	#1,d0
(1)  336/  FF190C : C07C 0001           		and.w	#1,d0
(1)  337/  FF1910 : 1140 0002           		move.b	d0,marsspr_xfrm(a0)
(1)  338/  FF1914 : D0FC 0018           		adda	#sizeof_marsspr,a0
(1)  339/  FF1918 : 1028 0003           		move.b	marsspr_yfrm(a0),d0
(1)  340/  FF191C : D07C 0001           		add.w	#1,d0
(1)  341/  FF1920 : C07C 0003           		and.w	#%11,d0
(1)  342/  FF1924 : 1140 0003           		move.b	d0,marsspr_yfrm(a0)
(1)  343/  FF1928 :                     .wspr:
(1)  344/  FF1928 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  345/  FF192C : 0807 000A           		btst	#bitJoyX,d7
(1)  346/  FF1930 : 6710                		beq	.not_hold3
(1)  347/  FF1932 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  348/  FF1936 : 0668 0001 0008      		add.w	#1,marsspr_flags(a0)
(1)  349/  FF193C : 0268 0003 0008      		and.w	#%11,marsspr_flags(a0)
(1)  350/  FF1942 :                     .not_hold3:
(1)  351/  FF1942 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  352/  FF1946 : 0807 0009           		btst	#bitJoyY,d7
(1)  353/  FF194A : 6710                		beq	.not_hold4
(1)  354/  FF194C : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  355/  FF1950 : 0628 0001 0003      		add.b	#1,marsspr_yfrm(a0)
(1)  356/  FF1956 : 0228 0003 0003      		and.b	#%11,marsspr_yfrm(a0)
(1)  357/  FF195C :                     .not_hold4:
(1)  358/  FF195C :                     
(1)  359/  FF195C : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  360/  FF1960 : 0807 0004           		btst	#bitJoyB,d7
(1)  361/  FF1964 : 673C                		beq	.not_hold2
(1)  362/  FF1966 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  363/  FF196A : 3028 000A           		move.w	marsspr_x(a0),d0
(1)  364/  FF196E : 3228 000C           		move.w	marsspr_y(a0),d1
(1)  365/  FF1972 : 7402                		moveq	#TEST_MAINSPD,d2
(1)  366/  FF1974 : 7602                		moveq	#TEST_MAINSPD,d3
(1)  367/  FF1976 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  368/  FF197A : 0807 0003           		btst	#bitJoyRight,d7
(1)  369/  FF197E : 6702                		beq.s	.nor_s
(1)  370/  FF1980 : D042                		add.w	d2,d0
(1)  371/  FF1982 :                     .nor_s:
(1)  372/  FF1982 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  373/  FF1986 : 6702                		beq.s	.nol_s
(1)  374/  FF1988 : 9042                		sub.w	d2,d0
(1)  375/  FF198A :                     .nol_s:
(1)  376/  FF198A : 0807 0001           		btst	#bitJoyDown,d7
(1)  377/  FF198E : 6702                		beq.s	.nod_s
(1)  378/  FF1990 : D243                		add.w	d3,d1
(1)  379/  FF1992 :                     .nod_s:
(1)  380/  FF1992 : 0807 0000           		btst	#bitJoyUp,d7
(1)  381/  FF1996 : 6702                		beq.s	.nou_s
(1)  382/  FF1998 : 9243                		sub.w	d3,d1
(1)  383/  FF199A :                     .nou_s:
(1)  384/  FF199A : 3140 000A           		move.w	d0,marsspr_x(a0)
(1)  385/  FF199E : 3141 000C           		move.w	d1,marsspr_y(a0)
(1)  386/  FF19A2 :                     .not_hold2:
(1)  387/  FF19A2 :                     
(1)  388/  FF19A2 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  389/  FF19A6 : 0807 0006           		btst	#bitJoyA,d7
(1)  390/  FF19AA : 6738                		beq.s	.not_hold
(1)  391/  FF19AC : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  392/  FF19B0 : 3010                		move.w	marsspr_xs(a0),d0
(1)  393/  FF19B2 : 3228 0001           		move.w	marsspr_ys(a0),d1
(1)  394/  FF19B6 : 7402                		moveq	#TEST_MAINSPD,d2
(1)  395/  FF19B8 : 7602                		moveq	#TEST_MAINSPD,d3
(1)  396/  FF19BA : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  397/  FF19BE : 0807 0003           		btst	#bitJoyRight,d7
(1)  398/  FF19C2 : 6702                		beq.s	.nor_s2
(1)  399/  FF19C4 : D042                		add.w	d2,d0
(1)  400/  FF19C6 :                     .nor_s2:
(1)  401/  FF19C6 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  402/  FF19CA : 6702                		beq.s	.nol_s2
(1)  403/  FF19CC : 9042                		sub.w	d2,d0
(1)  404/  FF19CE :                     .nol_s2:
(1)  405/  FF19CE : 0807 0001           		btst	#bitJoyDown,d7
(1)  406/  FF19D2 : 6702                		beq.s	.nod_s2
(1)  407/  FF19D4 : D243                		add.w	d3,d1
(1)  408/  FF19D6 :                     .nod_s2:
(1)  409/  FF19D6 : 0807 0000           		btst	#bitJoyUp,d7
(1)  410/  FF19DA : 6702                		beq.s	.nou_s2
(1)  411/  FF19DC : 9243                		sub.w	d3,d1
(1)  412/  FF19DE :                     .nou_s2:
(1)  413/  FF19DE : 3080                		move.w	d0,marsspr_xs(a0)
(1)  414/  FF19E0 : 3141 0001           		move.w	d1,marsspr_ys(a0)
(1)  415/  FF19E4 :                     .not_hold:
(1)  416/  FF19E4 :                     
(1)  417/  FF19E4 : 0678 0001 900C      		add.w	#1,(RAM_EmiFrame).w
(1)  418/  FF19EA : 4E75                		rts
(1)  419/  FF19EC :                     
(1)  420/  FF19EC :                     ; ====================================================================
(1)  421/  FF19EC :                     ; ------------------------------------------------------
(1)  422/  FF19EC :                     ; Pick map
(1)  423/  FF19EC :                     ; ------------------------------------------------------
(1)  424/  FF19EC :                     
(1)  425/  FF19EC :                     Level_PickMap:
(1)  426/  FF19EC : 207C 2093 1156      		move.l	#MapHead_M|TH,a0
(1)  427/  FF19F2 : 227C 2209 72FC      		move.l	#MapBlk_M|TH,a1
(1)  428/  FF19F8 : 247C 220A 73FC      		move.l	#MapFg_M|TH,a2
(1)  429/  FF19FE : 267C 0000 0000      		move.l	#0,a3
(1)  430/  FF1A04 : 287C 0000 0000      		move.l	#0,a4
(1)  431/  FF1A0A : 70FF                		moveq	#-1,d0
(1)  432/  FF1A0C : 7200                		moveq	#0,d1
(1)  433/  FF1A0E : 7400                		moveq	#0,d2
(1)  434/  FF1A10 : 3638 9000           		move.w	(RAM_MapX),d3
(1)  435/  FF1A14 : 3838 9004           		move.w	(RAM_MapY),d4
(1)  436/  FF1A18 : 6100 F1B6           		bsr	MdMap_Set
(1)  437/  FF1A1C :                     
(1)  438/  FF1A1C : 207C 0092 F2C4      		move.l	#MapHead_0,a0
(1)  439/  FF1A22 : 227C 0092 F2CE      		move.l	#MapBlk_0,a1
(1)  440/  FF1A28 : 247C 0092 FAD6      		move.l	#MapFgL_0,a2
(1)  441/  FF1A2E : 267C 0092 FF56      		move.l	#MapFgH_0,a3
(1)  442/  FF1A34 : 287C 0093 03D6      		move.l	#MapFgC_0,a4
(1)  443/  FF1A3A : 7000                		moveq	#0,d0
(1)  444/  FF1A3C : 323C C000           		move.w	#$C000,d1
(1)  445/  FF1A40 : 343C 2000           		move.w	#$2000,d2
(1)  446/  FF1A44 : 3638 9000           		move.w	(RAM_MapX),d3
(1)  447/  FF1A48 : 3838 9004           		move.w	(RAM_MapY),d4
(1)  448/  FF1A4C : 6100 F182           		bsr	MdMap_Set
(1)  449/  FF1A50 :                     
(1)  450/  FF1A50 : 207C 0092 F2C4      		move.l	#MapHead_0,a0
(1)  451/  FF1A56 : 227C 0092 F2CE      		move.l	#MapBlk_0,a1
(1)  452/  FF1A5C : 247C 0093 0856      		move.l	#MapBgL_0,a2
(1)  453/  FF1A62 : 267C 0093 0CD6      		move.l	#MapBgH_0,a3
(1)  454/  FF1A68 : 287C 0000 0000      		move.l	#0,a4
(1)  455/  FF1A6E : 7001                		moveq	#1,d0
(1)  456/  FF1A70 : 323C E000           		move.w	#$E000,d1
(1)  457/  FF1A74 : 343C 2000           		move.w	#$2000,d2
(1)  458/  FF1A78 : 3638 9000           		move.w	(RAM_MapX),d3
(1)  459/  FF1A7C : 3838 9004           		move.w	(RAM_MapY),d4
(1)  460/  FF1A80 : 6100 F14E           		bsr	MdMap_Set
(1)  461/  FF1A84 :                     
(1)  462/  FF1A84 : 4E75                		rts
(1)  463/  FF1A86 :                     
(1)  464/  FF1A86 :                     ; 		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  465/  FF1A86 :                     ; 		move.l	#TESTMARS_BG,scrlbg_Data(a0)
(1)  466/  FF1A86 :                     ; 		move.l	#512,scrlbg_W(a0)
(1)  467/  FF1A86 :                     ; 		move.l	#256,scrlbg_H(a0)
(1)  468/  FF1A86 :                     ; 		move.l	#$00000000,scrlbg_X(a0)
(1)  469/  FF1A86 :                     ; 		move.l	#$00000000,scrlbg_Y(a0)
(1)  470/  FF1A86 :                     
(1)  471/  FF1A86 :                     ; ====================================================================
(1)  472/  FF1A86 :                     ; ------------------------------------------------------
(1)  473/  FF1A86 :                     ; VBlank
(1)  474/  FF1A86 :                     ; ------------------------------------------------------
(1)  475/  FF1A86 :                     
(1)  476/  FF1A86 :                     ; ------------------------------------------------------
(1)  477/  FF1A86 :                     ; HBlank
(1)  478/  FF1A86 :                     ; ------------------------------------------------------
(1)  479/  FF1A86 :                     
(1)  480/  FF1A86 :                     ; ====================================================================
(1)  481/  FF1A86 :                     ; ------------------------------------------------------
(1)  482/  FF1A86 :                     ; DATA
(1)  483/  FF1A86 :                     ;
(1)  484/  FF1A86 :                     ; Small stuff goes here
(1)  485/  FF1A86 :                     ; ------------------------------------------------------
(1)  486/  FF1A86 :                     
(1)  487/  FF1A86 :                     ; Pal_Emily:
(1)  488/  FF1A86 :                     ; 		dc.w 0
(1)  489/  FF1A86 :                     ; 		binclude "data/md/sprites/emi_pal.bin",2
(1)  490/  FF1A86 :                     ; 		align 2
(1)  491/  FF1A86 :                     ; Map_Nicole:
(1)  492/  FF1A86 :                     ; 		include "data/md/sprites/emi_map.asm"
(1)  493/  FF1A86 :                     ; 		align 2
(1)  494/  FF1A86 :                     ; Dplc_Nicole:
(1)  495/  FF1A86 :                     ; 		include "data/md/sprites/emi_plc.asm"
(1)  496/  FF1A86 :                     ; 		align 2
(1)  497/  FF1A86 :                     
(1)  498/  FF1A86 :                     
      59/  FF1A86 :                     		include "code/debug.asm"
(1)    1/  FF1A86 :                     ; ====================================================================
(1)    2/  FF1A86 :                     ; ----------------------------------------------------------------
(1)    3/  FF1A86 :                     ; Default gamemode
(1)    4/  FF1A86 :                     ; ----------------------------------------------------------------
(1)    5/  FF1A86 :                     
(1)    6/  FF1A86 : =$20000             TEST_SPEED	equ	$02<<16
(1)    7/  FF1A86 : =$2                 TEST_SPRSPD	equ	$02
(1)    8/  FF1A86 :                     
(1)    9/  FF1A86 :                     ; ====================================================================
(1)   10/  FF1A86 :                     ; ------------------------------------------------------
(1)   11/  FF1A86 :                     ; Variables
(1)   12/  FF1A86 :                     ; ------------------------------------------------------
(1)   13/  FF1A86 :                     
(1)   14/  FF1A86 : =$0                 set_StartPage	equ	0
(1)   15/  FF1A86 : =$4                 MAX_PAGE0_EN	equ	4
(1)   16/  FF1A86 : =$4                 MAX_GEMAENTRY	equ	4
(1)   17/  FF1A86 : =$8                 SCN0_TIMER	equ	8
(1)   18/  FF1A86 :                     
(1)   19/  FF1A86 :                     ; ====================================================================
(1)   20/  FF1A86 :                     ; ------------------------------------------------------
(1)   21/  FF1A86 :                     ; Structs
(1)   22/  FF1A86 :                     ; ------------------------------------------------------
(1)   23/  FF1A86 :                     
(1)   24/  FF1A86 :                     ; 		struct 0
(1)   25/  FF1A86 :                     ; strc_xpos	ds.w 1
(1)   26/  FF1A86 :                     ; strc_ypos	ds.w 1
(1)   27/  FF1A86 :                     ; 		finish
(1)   28/  FF1A86 :                     
(1)   29/  FF1A86 :                     ; ====================================================================
(1)   30/  FF1A86 :                     ; ------------------------------------------------------
(1)   31/  FF1A86 :                     ; This mode's RAM
(1)   32/  FF1A86 :                     ; ------------------------------------------------------
(1)   33/  FF1A86 :                     
(1)   34/  FF1A86 : (MACRO)             		struct RAM_ModeBuff
(1)   34/  FF1A86 : =$FF1A86            GLBL_LASTPC     set *
(1)   34/    2360 :                                     dephase
(1)   34/    2360 : =$2360              GLBL_LASTORG    set *
(1)   34/FFFFFFFFFFFF9000 :                                     phase RAM_MODEBUFF
(1)   35/FFFFFFFFFFFF9000 :                     RAM_CurrPage	ds.w 1
(1)   36/FFFFFFFFFFFF9002 :                     RAM_CurrGfx	ds.w 1
(1)   37/FFFFFFFFFFFF9004 :                     RAM_CurrSelc	ds.w 1
(1)   38/FFFFFFFFFFFF9006 :                     RAM_CurrIndx	ds.w 1
(1)   39/FFFFFFFFFFFF9008 :                     RAM_CurrTrack	ds.w 1
(1)   40/FFFFFFFFFFFF900A :                     RAM_CurrTicks	ds.w 1
(1)   41/FFFFFFFFFFFF900C :                     RAM_CurrTempo	ds.w 1
(1)   42/FFFFFFFFFFFF900E :                     RAM_Scrn0_Frame	ds.w 1
(1)   43/FFFFFFFFFFFF9010 :                     RAM_Scrn0_Timer	ds.w 1
(1)   44/FFFFFFFFFFFF9012 :                     RAM_GemaUpd	ds.w 1
(1)   45/FFFFFFFFFFFF9014 :                     RAM_GemaList	ds.w 4
(1)   46/FFFFFFFFFFFF901C :                     RAM_GemaListFM	ds.w 6
(1)   47/FFFFFFFFFFFF9028 :                     RAM_GemaListPWM	ds.w 7
(1)   48/FFFFFFFFFFFF9036 :                     RAM_SprTimer	ds.w 1
(1)   49/FFFFFFFFFFFF9038 :                     RAM_SprFrame	ds.w 1
(1)   50/FFFFFFFFFFFF903A : (MACRO)             		finish
(1)   50/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)   50/  FF1A86 :                                     phase GLBL_LASTPC
(1)   51/  FF1A86 :                     
(1)   52/  FF1A86 :                     ; ====================================================================
(1)   53/  FF1A86 :                     ; ------------------------------------------------------
(1)   54/  FF1A86 :                     ; Code start
(1)   55/  FF1A86 :                     ; ------------------------------------------------------
(1)   56/  FF1A86 :                     
(1)   57/  FF1A86 :                     MD_DebugMenu:
(1)   58/  FF1A86 : 46FC 2700           		move.w	#$2700,sr
(1)   59/  FF1A8A : 08B9 0006 FFFF A6EB 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   60/  FF1A92 : 6100 E7F4           		bsr	Video_Update
(1)   61/  FF1A96 : 6100 FB76           		bsr	Mode_Init
(1)   62/  FF1A9A : 6100 E930           		bsr	Video_PrintInit
(1)   63/  FF1A9E : 7000                		moveq	#0,d0
(1)   64/  FF1AA0 : 6100 E74E           		bsr	Sound_TrkStop
(1)   65/  FF1AA4 : 7001                		moveq	#1,d0
(1)   66/  FF1AA6 : 6100 E748           		bsr	Sound_TrkStop
(1)   67/  FF1AAA : 4278 A1F4           		clr.w	(RAM_PaletteFd).w
(1)   68/  FF1AAE : 31FC 0000 9000      		move.w	#set_StartPage,(RAM_CurrPage).w
(1)   69/  FF1AB4 : 08F9 0006 FFFF A6EB 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   70/  FF1ABC : 13FC 0000 FFFF A6F5 		move.b	#%000,(RAM_VdpRegs+$B).l
(1)   71/  FF1AC4 : 13FC 0000 FFFF A6F1 		move.b	#0,(RAM_VdpRegs+7).l
(1)   72/  FF1ACC : 6100 E7BA           		bsr	Video_Update
(1)   73/  FF1AD0 :                     
(1)   74/  FF1AD0 :                     ; ====================================================================
(1)   75/  FF1AD0 :                     ; ------------------------------------------------------
(1)   76/  FF1AD0 :                     ; Loop
(1)   77/  FF1AD0 :                     ; ------------------------------------------------------
(1)   78/  FF1AD0 :                     
(1)   79/  FF1AD0 :                     .loop:
(1)   80/  FF1AD0 : 6100 F6F0           		bsr	System_WaitFrame
(1)   81/  FF1AD4 : 6100 EAF6           		bsr	Video_RunFade
(1)   82/  FF1AD8 : 66F6                		bne.s	.loop
(1)   83/  FF1ADA : 3038 9000           		move.w	(RAM_CurrPage).w,d0
(1)   84/  FF1ADE : C07C 001F           		and.w	#%11111,d0
(1)   85/  FF1AE2 : D040                		add.w	d0,d0
(1)   86/  FF1AE4 : D040                		add.w	d0,d0
(1)   87/  FF1AE6 : D040                		add.w	d0,d0
(1)   88/  FF1AE8 : 4A78 9000           		tst.w	(RAM_CurrPage).w
(1)   89/  FF1AEC : 6B06                		bmi.s	.on_loop
(1)   90/  FF1AEE : D0BC 0000 0004      		add.l	#4,d0
(1)   91/  FF1AF4 :                     .on_loop:
(1)   92/  FF1AF4 : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)   93/  FF1AF8 : 60D6                		bra	.loop
(1)   94/  FF1AFA :                     
(1)   95/  FF1AFA :                     ; ====================================================================
(1)   96/  FF1AFA :                     ; ------------------------------------------------------
(1)   97/  FF1AFA :                     ; Mode sections
(1)   98/  FF1AFA :                     ; ------------------------------------------------------
(1)   99/  FF1AFA :                     
(1)  100/  FF1AFA :                     .list:
(1)  101/  FF1AFA : 6000 008E           		bra.w	.page0
(1)  102/  FF1AFE : 6000 0034           		bra.w	.page0_init
(1)  103/  FF1B02 :                     
(1)  104/  FF1B02 : 6000 00F4           		bra.w	.page1
(1)  105/  FF1B06 : 6000 00B0           		bra.w	.page1_init
(1)  106/  FF1B0A :                     
(1)  107/  FF1B0A : 6000 0158           		bra.w	.page2
(1)  108/  FF1B0E : 6000 0102           		bra.w	.page2_init
(1)  109/  FF1B12 :                     
(1)  110/  FF1B12 : 6000 01AE           		bra.w	.page3
(1)  111/  FF1B16 : 6000 0166           		bra.w	.page3_init
(1)  112/  FF1B1A :                     
(1)  113/  FF1B1A : 6000 0224           		bra.w	.page4
(1)  114/  FF1B1E : 6000 01CE           		bra.w	.page4_init
(1)  115/  FF1B22 :                     
(1)  116/  FF1B22 : 6000 02A4           		bra.w	.page5
(1)  117/  FF1B26 : 6000 0262           		bra.w	.page5_init
(1)  118/  FF1B2A :                     
(1)  119/  FF1B2A : 6000 005E           		bra.w	.page0
(1)  120/  FF1B2E : 6000 0004           		bra.w	.page0_init
(1)  121/  FF1B32 :                     
(1)  122/  FF1B32 :                     ; ====================================================================
(1)  123/  FF1B32 :                     ; --------------------------------------------------
(1)  124/  FF1B32 :                     ; Page 0
(1)  125/  FF1B32 :                     ; --------------------------------------------------
(1)  126/  FF1B32 :                     
(1)  127/  FF1B32 :                     .page0_ret:
(1)  128/  FF1B32 : 4E75                		rts
(1)  129/  FF1B34 :                     .page0_init:
(1)  130/  FF1B34 : 08B9 0006 FFFF A6EB 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)  131/  FF1B3C : 6100 E74A           		bsr	Video_Update
(1)  132/  FF1B40 :                     
(1)  133/  FF1B40 : 6100 E79A           		bsr	Video_ClearScreen
(1)  134/  FF1B44 : 6100 E8A0           		bsr	Video_PrintPal
(1)  135/  FF1B48 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  136/  FF1B4E : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  137/  FF1B52 : 303C 0000           		move.w	#0,d0
(1)  138/  FF1B56 : 6100 EE8E           		bsr	Video_Mars_GfxMode
(1)  139/  FF1B5A : 41FA 06EC           		lea	str_Title(pc),a0	; Print menu
(1)  140/  FF1B5E : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  141/  FF1B64 : 6100 E892           		bsr	Video_Print
(1)  142/  FF1B68 : 6132                		bsr	.page0_cursor
(1)  143/  FF1B6A : 6100 048C           		bsr	.fade_in
(1)  144/  FF1B6E :                     
(1)  145/  FF1B6E : 13FC 0081 FFFF A6F6 		move.b	#$81,(RAM_VdpRegs+$C).l
(1)  146/  FF1B76 : 13FC 0000 FFFF A6F1 		move.b	#0,(RAM_VdpRegs+7).l
(1)  147/  FF1B7E : 08F9 0006 FFFF A6EB 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)  148/  FF1B86 : 6100 E700           		bsr	Video_Update
(1)  149/  FF1B8A :                     .page0:
(1)  150/  FF1B8A :                     ; 		lea	str_Stats(pc),a0
(1)  151/  FF1B8A :                     ; 		move.l	#locate(0,2,10),d0
(1)  152/  FF1B8A :                     ; 		bsr	Video_Print
(1)  153/  FF1B8A :                     
(1)  154/  FF1B8A : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  155/  FF1B8E : 0807 0007           		btst	#bitJoyStart,d7
(1)  156/  FF1B92 : 6612                		bne.s	.page0_jump
(1)  157/  FF1B94 : 7004                		moveq	#MAX_PAGE0_EN,d0			; Numof entries
(1)  158/  FF1B96 : 6100 04BE           		bsr	.move_cursor_ud		; Move U/D
(1)  159/  FF1B9A : 6796                		beq	.page0_ret
(1)  160/  FF1B9C :                     .page0_cursor:
(1)  161/  FF1B9C : 223C 0000 0203      		move.l	#locate(0,2,3),d1
(1)  162/  FF1BA2 : 6000 04A0           		bra	.print_cursor
(1)  163/  FF1BA6 :                     .page0_jump:
(1)  164/  FF1BA6 : 6100 0476           		bsr	.fade_out
(1)  165/  FF1BAA : 3038 9004           		move.w	(RAM_CurrSelc).w,d0
(1)  166/  FF1BAE : D07C 0001           		add.w	#1,d0
(1)  167/  FF1BB2 : 31C0 9000           		move.w	d0,(RAM_CurrPage).w
(1)  168/  FF1BB6 : 4E75                		rts
(1)  169/  FF1BB8 :                     
(1)  170/  FF1BB8 :                     ; ====================================================================
(1)  171/  FF1BB8 :                     ; --------------------------------------------------
(1)  172/  FF1BB8 :                     ; Page 1, Screen 00
(1)  173/  FF1BB8 :                     ; --------------------------------------------------
(1)  174/  FF1BB8 :                     
(1)  175/  FF1BB8 :                     .page1_init:
(1)  176/  FF1BB8 : 6100 E722           		bsr	Video_ClearScreen
(1)  177/  FF1BBC : 6100 E828           		bsr	Video_PrintPal
(1)  178/  FF1BC0 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  179/  FF1BC6 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  180/  FF1BCA : 303C 0000           		move.w	#0,d0
(1)  181/  FF1BCE : 6100 EE16           		bsr	Video_Mars_GfxMode
(1)  182/  FF1BD2 : 41FA 0712           		lea	str_Page1(pc),a0
(1)  183/  FF1BD6 : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  184/  FF1BDC : 6100 E81A           		bsr	Video_Print
(1)  185/  FF1BE0 : 13FC 0000 FFFF A6F6 		move.b	#0,(RAM_VdpRegs+$C).l
(1)  186/  FF1BE8 : 6100 E69E           		bsr	Video_Update
(1)  187/  FF1BEC :                     
(1)  188/  FF1BEC :                     ; 		lea	(PalData_Mars_Test2),a0
(1)  189/  FF1BEC :                     ; 		moveq	#0,d0
(1)  190/  FF1BEC :                     ; 		move.w	#256,d1
(1)  191/  FF1BEC :                     ; 		moveq	#0,d2
(1)  192/  FF1BEC :                     ; 		bsr	Video_FadePal_Mars
(1)  193/  FF1BEC : 4278 A274           		clr.w	(RAM_MdMarsPalFd).w
(1)  194/  FF1BF0 : 4278 AB62           		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  195/  FF1BF4 : 6100 0402           		bsr	.fade_in
(1)  196/  FF1BF8 :                     
(1)  197/  FF1BF8 :                     .page1:
(1)  198/  FF1BF8 :                     
(1)  199/  FF1BF8 : 6100 054E           		bsr	SuperSprite_Test
(1)  200/  FF1BFC :                     	; Start-button exit
(1)  201/  FF1BFC : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  202/  FF1C00 : 0807 0007           		btst	#bitJoyStart,d7
(1)  203/  FF1C04 : 670A                		beq.s	.page1_ret
(1)  204/  FF1C06 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  205/  FF1C0C : 6100 0410           		bsr	.fade_out
(1)  206/  FF1C10 :                     .page1_ret:
(1)  207/  FF1C10 : 4E75                		rts
(1)  208/  FF1C12 :                     
(1)  209/  FF1C12 :                     ; .page1_init:
(1)  210/  FF1C12 :                     ; 		bsr	Video_ClearScreen
(1)  211/  FF1C12 :                     ; 		bsr	Video_PrintPal
(1)  212/  FF1C12 :                     ; 		or.w	#$8000,(RAM_CurrPage).w
(1)  213/  FF1C12 :                     ; 		clr.w	(RAM_CurrSelc).w
(1)  214/  FF1C12 :                     ; 		bsr.s	.make_frame
(1)  215/  FF1C12 :                     ;
(1)  216/  FF1C12 :                     ; 		lea	(RAM_MdDreq+Dreq_ScrnBuff),a1
(1)  217/  FF1C12 :                     ; 		move.l	#2,Dreq_Scrn_Type(a1)
(1)  218/  FF1C12 :                     ; 		bsr	System_MarsUpdate
(1)  219/  FF1C12 :                     ;
(1)  220/  FF1C12 :                     ; 		lea	str_Page1(pc),a0
(1)  221/  FF1C12 :                     ; 		move.l	#locate(0,2,2),d0
(1)  222/  FF1C12 :                     ; 		bsr	Video_Print
(1)  223/  FF1C12 :                     ; 		move.w	#1,d0
(1)  224/  FF1C12 :                     ; 		bsr	Video_Mars_GfxMode
(1)  225/  FF1C12 :                     ; 		bsr	.fade_in
(1)  226/  FF1C12 :                     ; .page1:
(1)  227/  FF1C12 :                     ; 		sub.w	#1,(RAM_Scrn0_Timer).w
(1)  228/  FF1C12 :                     ; 		bpl.s	.keep
(1)  229/  FF1C12 :                     ; 		move.w	#SCN0_TIMER,(RAM_Scrn0_Timer).w
(1)  230/  FF1C12 :                     ; 		bsr.s	.make_frame
(1)  231/  FF1C12 :                     ; 		bsr	Video_Mars_WaitFrame
(1)  232/  FF1C12 :                     ; 		add.w	#1,(RAM_Scrn0_Frame).w
(1)  233/  FF1C12 :                     ; 		and.w	#%11,(RAM_Scrn0_Frame).w
(1)  234/  FF1C12 :                     ; .keep:
(1)  235/  FF1C12 :                     ; 		lea	str_Page1_info(pc),a0
(1)  236/  FF1C12 :                     ; 		move.l	#locate(0,2,4),d0
(1)  237/  FF1C12 :                     ; 		bsr	Video_Print
(1)  238/  FF1C12 :                     ; 		move.w	(Controller_1+on_press),d7
(1)  239/  FF1C12 :                     ; 		btst	#bitJoyStart,d7
(1)  240/  FF1C12 :                     ; 		beq.s	.page1_ret
(1)  241/  FF1C12 :                     ; 		move.w	#0,(RAM_CurrPage).w
(1)  242/  FF1C12 :                     ; 		bsr	.fade_out
(1)  243/  FF1C12 :                     ; .page1_ret:
(1)  244/  FF1C12 :                     ; 		rts
(1)  245/  FF1C12 :                     ;
(1)  246/  FF1C12 :                     ; .make_frame:
(1)  247/  FF1C12 :                     ; 		move.w	(RAM_Scrn0_Frame).w,d0
(1)  248/  FF1C12 :                     ; 		lsl.w	#2,d0
(1)  249/  FF1C12 :                     ; 		lea	.frames(pc),a0
(1)  250/  FF1C12 :                     ; 		lea	(RAM_MdDreq+Dreq_ScrnBuff),a1
(1)  251/  FF1C12 :                     ; 		move.l	(a0,d0.w),d0
(1)  252/  FF1C12 :                     ; 		add.l	#TH,d0
(1)  253/  FF1C12 :                     ; 		move.l	d0,Dreq_Scrn_Data(a1)
(1)  254/  FF1C12 :                     ; 		rts
(1)  255/  FF1C12 :                     ; .frames:
(1)  256/  FF1C12 :                     ; 		dc.l TESTMARS_DIRECT_1
(1)  257/  FF1C12 :                     ; 		dc.l TESTMARS_DIRECT_2
(1)  258/  FF1C12 :                     ; 		dc.l TESTMARS_DIRECT_3
(1)  259/  FF1C12 :                     ; 		dc.l TESTMARS_DIRECT_2
(1)  260/  FF1C12 :                     
(1)  261/  FF1C12 :                     ; ====================================================================
(1)  262/  FF1C12 :                     ; --------------------------------------------------
(1)  263/  FF1C12 :                     ; Page 2
(1)  264/  FF1C12 :                     ; --------------------------------------------------
(1)  265/  FF1C12 :                     
(1)  266/  FF1C12 :                     .page2_init:
(1)  267/  FF1C12 : 6100 E6C8           		bsr	Video_ClearScreen
(1)  268/  FF1C16 : 6100 E7CE           		bsr	Video_PrintPal
(1)  269/  FF1C1A : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  270/  FF1C20 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  271/  FF1C24 :                     
(1)  272/  FF1C24 :                     ; 		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  273/  FF1C24 :                     ; 		move.l	#TESTMARS_BG2|TH,Dreq_SclData(a0)
(1)  274/  FF1C24 :                     ; 		move.l	#$00000000,Dreq_SclX(a0)	; X pos
(1)  275/  FF1C24 :                     ; 		move.l	#$00000000,Dreq_SclY(a0)	; Y pos
(1)  276/  FF1C24 :                     ; 		move.l	#$00010000,Dreq_SclDX(a0)	; DX
(1)  277/  FF1C24 :                     ; 		move.l	#$00010000,Dreq_SclDY(a0)	; DY
(1)  278/  FF1C24 :                     ; 		move.l	#320,Dreq_SclWidth(a0)
(1)  279/  FF1C24 :                     ; 		move.l	#224,Dreq_SclHeight(a0)
(1)  280/  FF1C24 :                     ; 		move.l	#1,Dreq_SclMode(a0)		;
(1)  281/  FF1C24 :                     ; 		bsr	System_MarsUpdate
(1)  282/  FF1C24 :                     
(1)  283/  FF1C24 : 6100 04A6           		bsr	SuperSprite_Test_init
(1)  284/  FF1C28 : 6100 F662           		bsr	System_MarsUpdate
(1)  285/  FF1C2C : 6100 051A           		bsr	SuperSprite_Test
(1)  286/  FF1C30 :                     
(1)  287/  FF1C30 : 41FA 06E4           		lea	str_Page2(pc),a0	; Print text
(1)  288/  FF1C34 : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  289/  FF1C3A : 6100 E7BC           		bsr	Video_Print
(1)  290/  FF1C3E : 303C 0001           		move.w	#1,d0
(1)  291/  FF1C42 : 6100 EDA2           		bsr	Video_Mars_GfxMode
(1)  292/  FF1C46 : 41F9 0092 EAF4      		lea	(PalData_Mars_Test),a0
(1)  293/  FF1C4C : 7000                		moveq	#0,d0
(1)  294/  FF1C4E : 323C 0100           		move.w	#256,d1
(1)  295/  FF1C52 : 7400                		moveq	#0,d2
(1)  296/  FF1C54 : 6100 EDE4           		bsr	Video_FadePal_Mars
(1)  297/  FF1C58 : 4278 A274           		clr.w	(RAM_MdMarsPalFd).w
(1)  298/  FF1C5C : 4278 AB62           		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  299/  FF1C60 : 6100 0396           		bsr	.fade_in
(1)  300/  FF1C64 :                     .page2:
(1)  301/  FF1C64 :                     
(1)  302/  FF1C64 : 6100 04E2           		bsr	SuperSprite_Test
(1)  303/  FF1C68 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  304/  FF1C6C : 0807 0007           		btst	#bitJoyStart,d7
(1)  305/  FF1C70 : 670A                		beq.s	.page2_ret
(1)  306/  FF1C72 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  307/  FF1C78 : 6100 03A4           		bsr	.fade_out
(1)  308/  FF1C7C :                     .page2_ret:
(1)  309/  FF1C7C : 4E75                		rts
(1)  310/  FF1C7E :                     
(1)  311/  FF1C7E :                     ; ====================================================================
(1)  312/  FF1C7E :                     ; --------------------------------------------------
(1)  313/  FF1C7E :                     ; Page 3
(1)  314/  FF1C7E :                     ; --------------------------------------------------
(1)  315/  FF1C7E :                     
(1)  316/  FF1C7E :                     .page3_init:
(1)  317/  FF1C7E : 6100 E65C           		bsr	Video_ClearScreen
(1)  318/  FF1C82 : 6100 E762           		bsr	Video_PrintPal
(1)  319/  FF1C86 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  320/  FF1C8C : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  321/  FF1C90 :                     
(1)  322/  FF1C90 :                     ; 		lea	str_Page2(pc),a0
(1)  323/  FF1C90 :                     ; 		move.l	#locate(0,10,2),d0
(1)  324/  FF1C90 :                     ; 		bsr	Video_Print
(1)  325/  FF1C90 :                     
(1)  326/  FF1C90 : 6100 043A           		bsr	SuperSprite_Test_init
(1)  327/  FF1C94 :                     
(1)  328/  FF1C94 : 41FA 06A0           		lea	str_Page3_bg(pc),a0
(1)  329/  FF1C98 : 203C 0001 0808      		move.l	#locate(1,8,8),d0
(1)  330/  FF1C9E : 6100 E758           		bsr	Video_Print
(1)  331/  FF1CA2 :                     
(1)  332/  FF1CA2 :                     ; 		move.w	#$100,marsspr_dx(a0)
(1)  333/  FF1CA2 :                     ; 		move.w	#$100,marsspr_dy(a0)
(1)  334/  FF1CA2 :                     ; 		move.l	#$00000000,marsspr_t_x(a0)
(1)  335/  FF1CA2 :                     ; 		move.l	#$00000000,marsspr_b_x(a0)
(1)  336/  FF1CA2 :                     
(1)  337/  FF1CA2 :                     ; 		lea	str_Page2(pc),a0	; Print text
(1)  338/  FF1CA2 :                     ; 		move.l	#locate(0,2,2),d0
(1)  339/  FF1CA2 :                     ; 		bsr	Video_Print
(1)  340/  FF1CA2 :                     ; 		move.l	#ART_FGTEST,d0
(1)  341/  FF1CA2 :                     ; 		move.w	#$280*$20,d1
(1)  342/  FF1CA2 :                     ; 		move.w	#ART_FGTEST_e-ART_FGTEST,d2
(1)  343/  FF1CA2 :                     ; 		bsr	Video_LoadArt
(1)  344/  FF1CA2 :                     ; 		move.l	#ART_BGTEST,d0
(1)  345/  FF1CA2 :                     ; 		move.w	#1*$20,d1
(1)  346/  FF1CA2 :                     ; 		move.w	#ART_BGTEST_e-ART_BGTEST,d2
(1)  347/  FF1CA2 :                     ; 		bsr	Video_LoadArt
(1)  348/  FF1CA2 :                     ; 		lea	(MAP_FGTEST),a0
(1)  349/  FF1CA2 :                     ; 		move.l	#locate(0,0,0),d0
(1)  350/  FF1CA2 :                     ; 		move.l	#mapsize(512,256),d1
(1)  351/  FF1CA2 :                     ; 		move.w	#$2000+$0280,d2
(1)  352/  FF1CA2 :                     ; 		bsr	Video_LoadMap
(1)  353/  FF1CA2 :                     ; 		lea	(MAP_BGTEST),a0
(1)  354/  FF1CA2 :                     ; 		move.l	#locate(1,0,0),d0
(1)  355/  FF1CA2 :                     ; 		move.l	#mapsize(512,256),d1
(1)  356/  FF1CA2 :                     ; 		move.w	#$0001,d2
(1)  357/  FF1CA2 :                     ; 		bsr	Video_LoadMap
(1)  358/  FF1CA2 :                     
(1)  359/  FF1CA2 :                     ; 		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  360/  FF1CA2 :                     ; 		move.l	#TESTMARS_BG,scrlbg_Data(a0)
(1)  361/  FF1CA2 :                     ; 		move.l	#512,scrlbg_W(a0)
(1)  362/  FF1CA2 :                     ; 		move.l	#256,scrlbg_H(a0)
(1)  363/  FF1CA2 :                     ; 		move.l	#$00000000,scrlbg_X(a0)
(1)  364/  FF1CA2 :                     ; 		move.l	#$00000000,scrlbg_Y(a0)
(1)  365/  FF1CA2 :                     ; 		bsr	System_MarsUpdate
(1)  366/  FF1CA2 : 303C 0002           		move.w	#2,d0
(1)  367/  FF1CA6 : 6100 ED3E           		bsr	Video_Mars_GfxMode
(1)  368/  FF1CAA : 41F9 0092 EAF4      		lea	(PalData_Mars_Test),a0
(1)  369/  FF1CB0 : 7000                		moveq	#0,d0
(1)  370/  FF1CB2 : 323C 0100           		move.w	#256,d1
(1)  371/  FF1CB6 : 7400                		moveq	#0,d2
(1)  372/  FF1CB8 : 6100 ED80           		bsr	Video_FadePal_Mars
(1)  373/  FF1CBC :                     ; 		lea	PAL_TESTBOARD(pc),a0
(1)  374/  FF1CBC :                     ; 		moveq	#0,d0
(1)  375/  FF1CBC :                     ; 		move.w	#$20,d1
(1)  376/  FF1CBC :                     ; 		bsr	Video_FadePal
(1)  377/  FF1CBC :                     ; 		clr.w	(RAM_MdMarsPalFd).w
(1)  378/  FF1CBC :                     ; 		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  379/  FF1CBC : 612E                		bsr	.this_bg
(1)  380/  FF1CBE : 6100 0338           		bsr	.fade_in
(1)  381/  FF1CC2 :                     .page3:
(1)  382/  FF1CC2 : 41FA 068E           		lea	str_Page3(pc),a0
(1)  383/  FF1CC6 : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  384/  FF1CCC : 6100 E72A           		bsr	Video_Print
(1)  385/  FF1CD0 : 611A                		bsr	.this_bg
(1)  386/  FF1CD2 :                     
(1)  387/  FF1CD2 :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  388/  FF1CD2 :                     ; 		and.w	#JoyB+JoyA,d7
(1)  389/  FF1CD2 :                     ; 		bne.s	.stayoff
(1)  390/  FF1CD2 :                     ; 		move.l	(RAM_MdDreq+Dreq_ScrnBuff+scrlbg_X).w,d0
(1)  391/  FF1CD2 :                     ; 		move.l	(RAM_MdDreq+Dreq_ScrnBuff+scrlbg_Y).w,d1
(1)  392/  FF1CD2 :                     ; 		move.l	#TEST_SPEED,d5
(1)  393/  FF1CD2 :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  394/  FF1CD2 :                     ; 		btst	#bitJoyRight,d7
(1)  395/  FF1CD2 :                     ; 		beq.s	.nor_m
(1)  396/  FF1CD2 :                     ; 		add.l	d5,d0
(1)  397/  FF1CD2 :                     ; .nor_m:
(1)  398/  FF1CD2 :                     ; 		btst	#bitJoyLeft,d7
(1)  399/  FF1CD2 :                     ; 		beq.s	.nol_m
(1)  400/  FF1CD2 :                     ; 		sub.l	d5,d0
(1)  401/  FF1CD2 :                     ; .nol_m:
(1)  402/  FF1CD2 :                     ; 		btst	#bitJoyDown,d7
(1)  403/  FF1CD2 :                     ; 		beq.s	.nod_m
(1)  404/  FF1CD2 :                     ; 		add.l	d5,d1
(1)  405/  FF1CD2 :                     ; .nod_m:
(1)  406/  FF1CD2 :                     ; 		btst	#bitJoyUp,d7
(1)  407/  FF1CD2 :                     ; 		beq.s	.nou_m
(1)  408/  FF1CD2 :                     ; 		sub.l	d5,d1
(1)  409/  FF1CD2 :                     ; .nou_m:
(1)  410/  FF1CD2 :                     ; 		move.l	d0,(RAM_MdDreq+Dreq_ScrnBuff+scrlbg_X).w
(1)  411/  FF1CD2 :                     ; 		move.l	d1,(RAM_MdDreq+Dreq_ScrnBuff+scrlbg_Y).w
(1)  412/  FF1CD2 :                     ; 		swap	d0
(1)  413/  FF1CD2 :                     ; 		swap	d1
(1)  414/  FF1CD2 :                     ; 		neg.w	d0
(1)  415/  FF1CD2 :                     ; 		move.w	d0,(RAM_HorScroll+2).w
(1)  416/  FF1CD2 :                     ; 		move.w	d1,(RAM_VerScroll+2).w
(1)  417/  FF1CD2 :                     ; .stayoff:
(1)  418/  FF1CD2 :                     
(1)  419/  FF1CD2 : 6100 0474           		bsr	SuperSprite_Test
(1)  420/  FF1CD6 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  421/  FF1CDA : 0807 0007           		btst	#bitJoyStart,d7
(1)  422/  FF1CDE : 670A                		beq.s	.page3_ret
(1)  423/  FF1CE0 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  424/  FF1CE6 : 6100 0336           		bsr	.fade_out
(1)  425/  FF1CEA :                     .page3_ret:
(1)  426/  FF1CEA : 4E75                		rts
(1)  427/  FF1CEC :                     
(1)  428/  FF1CEC :                     .this_bg:
(1)  429/  FF1CEC :                     ; 		move.l	(RAM_MdDreq+scrlbg_X).w,d0
(1)  430/  FF1CEC :                     ; 		move.l	d0,d1
(1)  431/  FF1CEC :                     ; 		swap	d0
(1)  432/  FF1CEC :                     ; 		swap	d1
(1)  433/  FF1CEC :                     ; 		lsr.l	#1,d0
(1)  434/  FF1CEC :                     ; 		lsr.l	#2,d1
(1)  435/  FF1CEC :                     ; 		neg.w	d0
(1)  436/  FF1CEC :                     ; 		neg.w	d1
(1)  437/  FF1CEC :                     ; 		lea	(RAM_HorScroll),a0
(1)  438/  FF1CEC :                     ; 		move.w	#(224/2)-1,d7
(1)  439/  FF1CEC :                     ; .next:
(1)  440/  FF1CEC :                     ; 		move.w	d0,(a0)+
(1)  441/  FF1CEC :                     ; 		move.w	d1,(a0)+
(1)  442/  FF1CEC :                     ; 		move.w	d0,(a0)+
(1)  443/  FF1CEC :                     ; 		move.w	d1,(a0)+
(1)  444/  FF1CEC :                     ; 		dbf	d7,.next
(1)  445/  FF1CEC : 4E75                		rts
(1)  446/  FF1CEE :                     
(1)  447/  FF1CEE :                     ; ====================================================================
(1)  448/  FF1CEE :                     ; --------------------------------------------------
(1)  449/  FF1CEE :                     ; Page 4
(1)  450/  FF1CEE :                     ; --------------------------------------------------
(1)  451/  FF1CEE :                     
(1)  452/  FF1CEE :                     .page4_init:
(1)  453/  FF1CEE : 6100 E5EC           		bsr	Video_ClearScreen
(1)  454/  FF1CF2 : 6100 E6F2           		bsr	Video_PrintPal
(1)  455/  FF1CF6 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  456/  FF1CFC : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  457/  FF1D00 :                     
(1)  458/  FF1D00 : 41F8 ADE2           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  459/  FF1D04 : 20BC 2600 66D8      		move.l	#MarsObj_test|TH,mdl_data(a0)
(1)  460/  FF1D0A : 317C FC00 000C      		move.w	#-$400,mdl_z_pos(a0)
(1)  461/  FF1D10 :                     ; 		move.w	#$4000,mdl_y_pos(a0)
(1)  462/  FF1D10 : 41FA 065C           		lea	str_Page4(pc),a0	; Print text
(1)  463/  FF1D14 : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  464/  FF1D1A : 6100 E6DC           		bsr	Video_Print
(1)  465/  FF1D1E :                     
(1)  466/  FF1D1E : 6100 F56C           		bsr	System_MarsUpdate
(1)  467/  FF1D22 : 303C 0003           		move.w	#3,d0
(1)  468/  FF1D26 : 6100 ECBE           		bsr	Video_Mars_GfxMode
(1)  469/  FF1D2A : 41F9 0092 ECF4      		lea	(MDLDATA_PAL_TEST),a0
(1)  470/  FF1D30 : 7000                		moveq	#0,d0
(1)  471/  FF1D32 : 323C 0100           		move.w	#256,d1
(1)  472/  FF1D36 : 7400                		moveq	#0,d2
(1)  473/  FF1D38 : 6100 ED00           		bsr	Video_FadePal_Mars
(1)  474/  FF1D3C :                     
(1)  475/  FF1D3C : 6100 02BA           		bsr	.fade_in
(1)  476/  FF1D40 :                     .page4:
(1)  477/  FF1D40 : 41FA 086C           		lea	str_Stats(pc),a0
(1)  478/  FF1D44 : 203C 0000 0204      		move.l	#locate(0,2,4),d0
(1)  479/  FF1D4A : 6100 E6AC           		bsr	Video_Print
(1)  480/  FF1D4E : 41F8 ADE2           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  481/  FF1D52 : 0668 0010 000E      		add.w	#8*2,mdl_x_rot(a0)
(1)  482/  FF1D58 :                     ; 		add.w	#8*2,mdl_y_rot(a0)
(1)  483/  FF1D58 :                     ; 		add.w	#8*5,mdl_z_rot(a0)
(1)  484/  FF1D58 :                     
(1)  485/  FF1D58 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  486/  FF1D5C : 0807 0000           		btst	#bitJoyUp,d7
(1)  487/  FF1D60 : 6706                		beq.s	.z_up
(1)  488/  FF1D62 : 0468 0010 000C      		sub.w	#$10,mdl_z_pos(a0)
(1)  489/  FF1D68 :                     .z_up:
(1)  490/  FF1D68 : 0807 0001           		btst	#bitJoyDown,d7
(1)  491/  FF1D6C : 6706                		beq.s	.z_dw
(1)  492/  FF1D6E : 0668 0010 000C      		add.w	#$10,mdl_z_pos(a0)
(1)  493/  FF1D74 :                     .z_dw:
(1)  494/  FF1D74 :                     
(1)  495/  FF1D74 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  496/  FF1D78 : 0807 0007           		btst	#bitJoyStart,d7
(1)  497/  FF1D7C : 670A                		beq.s	.page4_ret
(1)  498/  FF1D7E : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  499/  FF1D84 : 6100 0298           		bsr	.fade_out
(1)  500/  FF1D88 :                     .page4_ret:
(1)  501/  FF1D88 : 4E75                		rts
(1)  502/  FF1D8A :                     
(1)  503/  FF1D8A :                     ; ====================================================================
(1)  504/  FF1D8A :                     ; --------------------------------------------------
(1)  505/  FF1D8A :                     ; Page 5
(1)  506/  FF1D8A :                     ; --------------------------------------------------
(1)  507/  FF1D8A :                     
(1)  508/  FF1D8A :                     .page5_init:
(1)  509/  FF1D8A : 6100 E550           		bsr	Video_ClearScreen
(1)  510/  FF1D8E : 6100 E656           		bsr	Video_PrintPal
(1)  511/  FF1D92 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  512/  FF1D98 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  513/  FF1D9C :                     
(1)  514/  FF1D9C :                     ; 		move.l	#ART_FGTEST,d0
(1)  515/  FF1D9C :                     ; 		move.w	#$280*$20,d1
(1)  516/  FF1D9C :                     ; 		move.w	#ART_FGTEST_e-ART_FGTEST,d2
(1)  517/  FF1D9C :                     ; 		bsr	Video_LoadArt
(1)  518/  FF1D9C :                     ; 		move.l	#ART_BGTEST,d0
(1)  519/  FF1D9C :                     ; 		move.w	#1*$20,d1
(1)  520/  FF1D9C :                     ; 		move.w	#ART_BGTEST_e-ART_BGTEST,d2
(1)  521/  FF1D9C :                     ; 		bsr	Video_LoadArt
(1)  522/  FF1D9C :                     ; 		lea	(MAP_FGTEST),a0
(1)  523/  FF1D9C :                     ; 		move.l	#locate(0,0,0),d0
(1)  524/  FF1D9C :                     ; 		move.l	#mapsize(512,256),d1
(1)  525/  FF1D9C :                     ; 		move.w	#$2000+$0280,d2
(1)  526/  FF1D9C :                     ; 		bsr	Video_LoadMap
(1)  527/  FF1D9C :                     ; 		lea	(MAP_BGTEST),a0
(1)  528/  FF1D9C :                     ; 		move.l	#locate(1,0,0),d0
(1)  529/  FF1D9C :                     ; 		move.l	#mapsize(512,256),d1
(1)  530/  FF1D9C :                     ; 		move.w	#$0001,d2
(1)  531/  FF1D9C :                     ; 		bsr	Video_LoadMap
(1)  532/  FF1D9C :                     
(1)  533/  FF1D9C : 41FA 060A           		lea	str_Gema(pc),a0
(1)  534/  FF1DA0 : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  535/  FF1DA6 : 6100 E650           		bsr	Video_Print
(1)  536/  FF1DAA : 41FA 067E           		lea	str_GemaStatus(pc),a0
(1)  537/  FF1DAE : 203C 0000 050C      		move.l	#locate(0,5,12),d0
(1)  538/  FF1DB4 : 6100 E642           		bsr	Video_Print
(1)  539/  FF1DB8 :                     
(1)  540/  FF1DB8 : 303C 0000           		move.w	#0,d0
(1)  541/  FF1DBC : 6100 EC28           		bsr	Video_Mars_GfxMode
(1)  542/  FF1DC0 : 6100 00FA           		bsr	.page5_update
(1)  543/  FF1DC4 : 6100 0232           		bsr	.fade_in
(1)  544/  FF1DC8 :                     .page5:
(1)  545/  FF1DC8 : 6100 0116           		bsr	.page5_updvars
(1)  546/  FF1DCC :                     
(1)  547/  FF1DCC :                     	; Controller
(1)  548/  FF1DCC : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  549/  FF1DD0 : 0807 0009           		btst	#bitJoyY,d7
(1)  550/  FF1DD4 : 6712                		beq.s	.noy2
(1)  551/  FF1DD6 : 0C78 0001 9006      		cmp.w	#1,(RAM_CurrIndx).w
(1)  552/  FF1DDC : 670A                		beq.	.noy2
(1)  553/  FF1DDE : 0678 0001 9006      		add.w	#1,(RAM_CurrIndx).w
(1)  554/  FF1DE4 : 6100 00D6           		bsr	.page5_update
(1)  555/  FF1DE8 :                     .noy2:
(1)  556/  FF1DE8 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  557/  FF1DEC : 0807 000A           		btst	#bitJoyX,d7
(1)  558/  FF1DF0 : 6710                		beq.s	.nox2
(1)  559/  FF1DF2 : 4A78 9006           		tst.w	(RAM_CurrIndx).w
(1)  560/  FF1DF6 : 670A                		beq.s	.nox2
(1)  561/  FF1DF8 : 0478 0001 9006      		sub.w	#1,(RAM_CurrIndx).w
(1)  562/  FF1DFE : 6100 00BC           		bsr	.page5_update
(1)  563/  FF1E02 :                     .nox2:
(1)  564/  FF1E02 :                     
(1)  565/  FF1E02 :                     	; UP/DOWN
(1)  566/  FF1E02 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  567/  FF1E06 : 0807 0000           		btst	#bitJoyUp,d7
(1)  568/  FF1E0A : 6710                		beq.s	.nou2
(1)  569/  FF1E0C : 4A78 9004           		tst.w	(RAM_CurrSelc).w
(1)  570/  FF1E10 : 670A                		beq.s	.nou2
(1)  571/  FF1E12 : 0478 0001 9004      		sub.w	#1,(RAM_CurrSelc).w
(1)  572/  FF1E18 : 6100 00A2           		bsr	.page5_update
(1)  573/  FF1E1C :                     .nou2:
(1)  574/  FF1E1C : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  575/  FF1E20 : 0807 0001           		btst	#bitJoyDown,d7
(1)  576/  FF1E24 : 6712                		beq.s	.nod2
(1)  577/  FF1E26 : 0C78 0004 9004      		cmp.w	#MAX_GEMAENTRY,(RAM_CurrSelc).w
(1)  578/  FF1E2C : 6C0A                		bge.s	.nod2
(1)  579/  FF1E2E : 0678 0001 9004      		add.w	#1,(RAM_CurrSelc).w
(1)  580/  FF1E34 : 6100 0086           		bsr	.page5_update
(1)  581/  FF1E38 :                     .nod2:
(1)  582/  FF1E38 :                     
(1)  583/  FF1E38 :                     ; 	; LEFT/RIGHT
(1)  584/  FF1E38 : 43F8 9008           		lea	(RAM_CurrTrack),a1
(1)  585/  FF1E3C : 0C78 0003 9004      		cmp.w	#3,(RAM_CurrSelc).w
(1)  586/  FF1E42 : 6604                		bne.s	.toptrk
(1)  587/  FF1E44 : D2FC 0002           		add	#2,a1
(1)  588/  FF1E48 :                     .toptrk:
(1)  589/  FF1E48 : 0C78 0004 9004      		cmp.w	#4,(RAM_CurrSelc).w
(1)  590/  FF1E4E : 6604                		bne.s	.toptrk2
(1)  591/  FF1E50 : D2FC 0004           		add	#2*2,a1
(1)  592/  FF1E54 :                     .toptrk2:
(1)  593/  FF1E54 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  594/  FF1E58 : CE7C 0010           		and.w	#JoyB,d7
(1)  595/  FF1E5C : 6706                		beq.s	.noba
(1)  596/  FF1E5E : 0651 0001           		add.w	#1,(a1)
(1)  597/  FF1E62 : 6158                		bsr	.page5_update
(1)  598/  FF1E64 :                     .noba:
(1)  599/  FF1E64 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1)  600/  FF1E68 : CE7C 0040           		and.w	#JoyA,d7
(1)  601/  FF1E6C : 6706                		beq.s	.noaa
(1)  602/  FF1E6E : 0451 0001           		sub.w	#1,(a1)
(1)  603/  FF1E72 : 6148                		bsr	.page5_update
(1)  604/  FF1E74 :                     .noaa:
(1)  605/  FF1E74 :                     
(1)  606/  FF1E74 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  607/  FF1E78 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  608/  FF1E7C : 6706                		beq.s	.nol
(1)  609/  FF1E7E :                     ; 		tst.w	(a1)
(1)  610/  FF1E7E :                     ; 		beq.s	.nol
(1)  611/  FF1E7E : 0451 0001           		sub.w	#1,(a1)
(1)  612/  FF1E82 : 6138                		bsr	.page5_update
(1)  613/  FF1E84 :                     .nol:
(1)  614/  FF1E84 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  615/  FF1E88 : 0807 0003           		btst	#bitJoyRight,d7
(1)  616/  FF1E8C : 6706                		beq.s	.nor
(1)  617/  FF1E8E :                     ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1)  618/  FF1E8E :                     ; 		bge.s	.nor
(1)  619/  FF1E8E : 0651 0001           		add.w	#1,(a1)
(1)  620/  FF1E92 : 6128                		bsr	.page5_update
(1)  621/  FF1E94 :                     .nor:
(1)  622/  FF1E94 :                     
(1)  623/  FF1E94 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  624/  FF1E98 : CE7C 0020           		and.w	#JoyC,d7
(1)  625/  FF1E9C : 6708                		beq.s	.noc_c
(1)  626/  FF1E9E : 3038 9006           		move.w	(RAM_CurrIndx).w,d0
(1)  627/  FF1EA2 : 6100 00E6           		bsr	.procs_task
(1)  628/  FF1EA6 :                     .noc_c:
(1)  629/  FF1EA6 :                     
(1)  630/  FF1EA6 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1)  631/  FF1EAA : 0807 0007           		btst	#bitJoyStart,d7
(1)  632/  FF1EAE : 670A                		beq.s	.page5_ret
(1)  633/  FF1EB0 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  634/  FF1EB6 : 6100 0166           		bsr	.fade_out
(1)  635/  FF1EBA :                     .page5_ret:
(1)  636/  FF1EBA : 4E75                		rts
(1)  637/  FF1EBC :                     .page5_update:
(1)  638/  FF1EBC : 41FA 04CA           		lea	str_Status(pc),a0
(1)  639/  FF1EC0 : 203C 0000 1404      		move.l	#locate(0,20,4),d0
(1)  640/  FF1EC6 : 6100 E530           		bsr	Video_Print
(1)  641/  FF1ECA : 41FA 0376           		lea	str_Cursor(pc),a0
(1)  642/  FF1ECE : 7000                		moveq	#0,d0
(1)  643/  FF1ED0 : 3038 9004           		move.w	(RAM_CurrSelc).w,d0
(1)  644/  FF1ED4 : D0BC 0000 0205      		add.l	#locate(0,2,5),d0
(1)  645/  FF1EDA : 6000 E51C           		bra	Video_Print
(1)  646/  FF1EDE : 4E75                		rts
(1)  647/  FF1EE0 :                     .page5_updvars:
(1)  648/  FF1EE0 : 4A78 9012           		tst.w	(RAM_GemaUpd).w
(1)  649/  FF1EE4 : 6770                		beq	.no_upd2
(1)  650/  FF1EE6 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  651/  FF1EEE :                     .wait:
(1)  652/  FF1EEE : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  653/  FF1EF6 : 66F6                		bne.s	.wait
(1)  654/  FF1EF8 : 4DF8 9014           		lea	(RAM_GemaList),a6
(1)  655/  FF1EFC : 49F9 00A0 1696      		lea	(z80_cpu+(psgcom)).l,a4
(1)  656/  FF1F02 : 4BF9 00A0 16B2      		lea	(z80_cpu+(psgdtl)).l,a5
(1)  657/  FF1F08 : 323C 0003           		move.w	#4-1,d1
(1)  658/  FF1F0C :                     .copy_1:
(1)  659/  FF1F0C : 303C FFFF           		move.w	#-1,d0
(1)  660/  FF1F10 : 102D 0006           		move.b	6(a5),d0
(1)  661/  FF1F14 : E148                		lsl.w	#8,d0
(1)  662/  FF1F16 : 101D                		move.b	(a5)+,d0
(1)  663/  FF1F18 : 3CC0                		move.w	d0,(a6)+
(1)  664/  FF1F1A : 51C9 FFF0           		dbf	d1,.copy_1
(1)  665/  FF1F1E :                     
(1)  666/  FF1F1E : 4BF9 00A0 168A      		lea	(z80_cpu+(fmcom+24)).l,a5
(1)  667/  FF1F24 : 323C 0005           		move.w	#6-1,d1
(1)  668/  FF1F28 :                     .copy_2:
(1)  669/  FF1F28 : 102D 0006           		move.b	6(a5),d0
(1)  670/  FF1F2C : E148                		lsl.w	#8,d0
(1)  671/  FF1F2E : 101D                		move.b	(a5)+,d0
(1)  672/  FF1F30 : E058                		ror.w	#8,d0
(1)  673/  FF1F32 : 3CC0                		move.w	d0,(a6)+
(1)  674/  FF1F34 : 51C9 FFF2           		dbf	d1,.copy_2
(1)  675/  FF1F38 :                     
(1)  676/  FF1F38 : 4BF9 00A0 1642      		lea	(z80_cpu+(pwmcom+8)).l,a5
(1)  677/  FF1F3E : 323C 0006           		move.w	#7-1,d1
(1)  678/  FF1F42 :                     .copy_3:
(1)  679/  FF1F42 : 102D 0008           		move.b	8(a5),d0
(1)  680/  FF1F46 : E148                		lsl.w	#8,d0
(1)  681/  FF1F48 : 101D                		move.b	(a5)+,d0
(1)  682/  FF1F4A : E058                		ror.w	#8,d0
(1)  683/  FF1F4C : C07C 03FF           		and.w	#$3FF,d0
(1)  684/  FF1F50 : 3CC0                		move.w	d0,(a6)+
(1)  685/  FF1F52 : 51C9 FFEE           		dbf	d1,.copy_3
(1)  686/  FF1F56 :                     
(1)  687/  FF1F56 :                     
(1)  688/  FF1F56 :                     .no_upd2:
(1)  689/  FF1F56 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  690/  FF1F5E :                     	; ****
(1)  691/  FF1F5E :                     
(1)  692/  FF1F5E : 41FA 05C6           		lea	str_GemaPsg(pc),a0
(1)  693/  FF1F62 : 203C 0000 0A0E      		move.l	#locate(0,10,14),d0
(1)  694/  FF1F68 : 6100 E48E           		bsr	Video_Print
(1)  695/  FF1F6C : 41FA 05D8           		lea	str_GemaFm(pc),a0
(1)  696/  FF1F70 : 203C 0000 140E      		move.l	#locate(0,20,14),d0
(1)  697/  FF1F76 : 6100 E480           		bsr	Video_Print
(1)  698/  FF1F7A : 41FA 05FA           		lea	str_GemaPwm(pc),a0
(1)  699/  FF1F7E : 203C 0000 1F0E      		move.l	#locate(0,31,14),d0
(1)  700/  FF1F84 : 6000 E472           		bra	Video_Print
(1)  701/  FF1F88 : 4E75                		rts
(1)  702/  FF1F8A :                     
(1)  703/  FF1F8A :                     ; d1 - Track slot
(1)  704/  FF1F8A :                     .procs_task:
(1)  705/  FF1F8A : 3E38 9004           		move.w	(RAM_CurrSelc).w,d7
(1)  706/  FF1F8E : DE47                		add.w	d7,d7
(1)  707/  FF1F90 : 3E3B 7006           		move.w	.tasklist(pc,d7.w),d7
(1)  708/  FF1F94 : 4EFB 7002           		jmp	.tasklist(pc,d7.w)
(1)  709/  FF1F98 :                     .tasklist:
(1)  710/  FF1F98 : 000A                		dc.w .task_00-.tasklist
(1)  711/  FF1F9A : 002E                		dc.w .task_01-.tasklist
(1)  712/  FF1F9C : 003A                		dc.w .task_02-.tasklist
(1)  713/  FF1F9E : 003E                		dc.w .task_03-.tasklist
(1)  714/  FF1FA0 : 0046                		dc.w .task_04-.tasklist
(1)  715/  FF1FA2 :                     ; 		dc.w .task_05-.tasklist
(1)  716/  FF1FA2 :                     
(1)  717/  FF1FA2 :                     ; d0 - Track slot
(1)  718/  FF1FA2 :                     .task_00:
(1)  719/  FF1FA2 : 41FA 00E8           		lea	MasterTrkList(pc),a0
(1)  720/  FF1FA6 : 3E38 9008           		move.w	(RAM_CurrTrack).w,d7
(1)  721/  FF1FAA : E94F                		lsl.w	#4,d7
(1)  722/  FF1FAC : 41F0 7000           		lea	(a0,d7.w),a0
(1)  723/  FF1FB0 : 3228 000C           		move.w	$C(a0),d1
(1)  724/  FF1FB4 : 7400                		moveq	#0,d2
(1)  725/  FF1FB6 : 3628 000E           		move.w	$E(a0),d3
(1)  726/  FF1FBA : 6100 E1F6           		bsr	Sound_TrkPlay
(1)  727/  FF1FBE : 31FC 0001 9012      		move.w	#1,(RAM_GemaUpd).w
(1)  728/  FF1FC4 : 6020                		bra.s	.cleanup
(1)  729/  FF1FC6 :                     .task_01:
(1)  730/  FF1FC6 : 31FC 0000 9012      		move.w	#0,(RAM_GemaUpd).w
(1)  731/  FF1FCC : 6100 E222           		bsr	Sound_TrkStop
(1)  732/  FF1FD0 : 6014                		bra.s	.cleanup
(1)  733/  FF1FD2 :                     .task_02:
(1)  734/  FF1FD2 : 6000 E232           		bra	Sound_TrkResume
(1)  735/  FF1FD6 :                     .task_03:
(1)  736/  FF1FD6 : 3238 900A           		move.w	(RAM_CurrTicks).w,d1
(1)  737/  FF1FDA : 6000 E240           		bra	Sound_TrkTicks
(1)  738/  FF1FDE :                     .task_04:
(1)  739/  FF1FDE : 3238 900C           		move.w	(RAM_CurrTempo).w,d1
(1)  740/  FF1FE2 : 6000 E254           		bra	Sound_GlbBeats
(1)  741/  FF1FE6 :                     
(1)  742/  FF1FE6 :                     .cleanup:
(1)  743/  FF1FE6 : 41F8 9014           		lea	(RAM_GemaList),a0
(1)  744/  FF1FEA : 7000                		moveq	#0,d0
(1)  745/  FF1FEC : 323C 0010           		move.w	#17-1,d1
(1)  746/  FF1FF0 :                     .clnup:
(1)  747/  FF1FF0 : 30C0                		move.w	d0,(a0)+
(1)  748/  FF1FF2 : 51C9 FFFC           		dbf	d1,.clnup
(1)  749/  FF1FF6 : 4E75                		rts
(1)  750/  FF1FF8 :                     
(1)  751/  FF1FF8 :                     ; ====================================================================
(1)  752/  FF1FF8 :                     ; ----------------------------------------------
(1)  753/  FF1FF8 :                     ; common subs
(1)  754/  FF1FF8 :                     ; ----------------------------------------------
(1)  755/  FF1FF8 :                     
(1)  756/  FF1FF8 :                     .fade_in:
(1)  757/  FF1FF8 : 31FC 0001 A6DA      		move.w	#1,(RAM_FadeMdReq).w
(1)  758/  FF1FFE : 31FC 0001 A6E2      		move.w	#1,(RAM_FadeMarsReq).w
(1)  759/  FF2004 : 31FC 0001 A6DC      		move.w	#1,(RAM_FadeMdIncr).w
(1)  760/  FF200A : 31FC 0004 A6E4      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  761/  FF2010 : 31FC 0000 A6DE      		move.w	#0,(RAM_FadeMdDelay).w
(1)  762/  FF2016 : 31FC 0000 A6E6      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  763/  FF201C : 4E75                		rts
(1)  764/  FF201E :                     
(1)  765/  FF201E :                     .fade_out:
(1)  766/  FF201E : 31FC 0002 A6DA      		move.w	#2,(RAM_FadeMdReq).w
(1)  767/  FF2024 : 31FC 0002 A6E2      		move.w	#2,(RAM_FadeMarsReq).w
(1)  768/  FF202A : 31FC 0001 A6DC      		move.w	#1,(RAM_FadeMdIncr).w
(1)  769/  FF2030 : 31FC 0004 A6E4      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  770/  FF2036 : 31FC 0000 A6DE      		move.w	#0,(RAM_FadeMdDelay).w
(1)  771/  FF203C : 31FC 0000 A6E6      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  772/  FF2042 : 4E75                		rts
(1)  773/  FF2044 :                     
(1)  774/  FF2044 :                     .print_cursor:
(1)  775/  FF2044 : 41FA 01FC           		lea	str_Cursor(pc),a0
(1)  776/  FF2048 : 7000                		moveq	#0,d0
(1)  777/  FF204A : 3038 9004           		move.w	(RAM_CurrSelc).w,d0
(1)  778/  FF204E : D081                		add.l	d1,d0
(1)  779/  FF2050 : 6100 E3A6           		bsr	Video_Print
(1)  780/  FF2054 : 4E75                		rts
(1)  781/  FF2056 :                     
(1)  782/  FF2056 :                     .move_cursor_ud:
(1)  783/  FF2056 : 7E00                		moveq	#0,d7
(1)  784/  FF2058 : 3C38 A706           		move.w	(Controller_1+on_press),d6
(1)  785/  FF205C : 0806 0000           		btst	#bitJoyUp,d6
(1)  786/  FF2060 : 670E                		beq.s	.p0_down
(1)  787/  FF2062 : 4A78 9004           		tst.w	(RAM_CurrSelc).w
(1)  788/  FF2066 : 6708                		beq.s	.p0_down
(1)  789/  FF2068 : 0478 0001 9004      		sub.w	#1,(RAM_CurrSelc).w
(1)  790/  FF206E : 7E01                		moveq	#1,d7
(1)  791/  FF2070 :                     .p0_down:
(1)  792/  FF2070 : 0806 0001           		btst	#bitJoyDown,d6
(1)  793/  FF2074 : 6710                		beq.s	.p0_up
(1)  794/  FF2076 : 3E38 9004           		move.w	(RAM_CurrSelc).w,d7
(1)  795/  FF207A : BE40                		cmp.w	d0,d7
(1)  796/  FF207C : 6C08                		bge.s	.p0_up
(1)  797/  FF207E : 0678 0001 9004      		add.w	#1,(RAM_CurrSelc).w
(1)  798/  FF2084 : 7E01                		moveq	#1,d7
(1)  799/  FF2086 :                     .p0_up:
(1)  800/  FF2086 : 4A47                		tst.w	d7
(1)  801/  FF2088 : 4E75                		rts
(1)  802/  FF208A :                     
(1)  803/  FF208A :                     ; 		lea	(MDLDATA_PAL_TEST),a0
(1)  804/  FF208A :                     ; 		cmp.w	#4,(RAM_CurrGfx).w
(1)  805/  FF208A :                     ; 		beq.s	.thispal
(1)  806/  FF208A :                     ; 		lea	(PalData_Mars_Test2),a0
(1)  807/  FF208A :                     ; 		cmp.w	#3,(RAM_CurrGfx).w
(1)  808/  FF208A :                     ; 		beq.s	.thispal
(1)  809/  FF208A :                     ; 		lea	(PalData_Mars_Test),a0
(1)  810/  FF208A :                     ; .thispal:
(1)  811/  FF208A :                     ; 		moveq	#0,d0
(1)  812/  FF208A :                     ; 		move.w	#256,d1
(1)  813/  FF208A :                     ; 		moveq	#0,d2
(1)  814/  FF208A :                     ; 		bsr	Video_FadePal_Mars
(1)  815/  FF208A :                     ; 		move.w	#1,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  816/  FF208A :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  817/  FF208A :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  818/  FF208A :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  819/  FF208A :                     ; 		move.w	#2,(RAM_FadeMdDelay).w
(1)  820/  FF208A :                     ; 		move.w	#2,(RAM_FadeMarsDelay).w
(1)  821/  FF208A :                     ; 		move.w	(RAM_CurrGfx).w,d0
(1)  822/  FF208A :                     ; 		bsr	Video_Mars_GfxMode
(1)  823/  FF208A :                     ; .page0_loop:
(1)  824/  FF208A :                     ; ; 		bsr	Emilie_MkSprite
(1)  825/  FF208A :                     ; 		bsr	Video_RunFade
(1)  826/  FF208A :                     ; 		bne	.loop
(1)  827/  FF208A :                     ; 		move.w	(Controller_1+on_press),d7
(1)  828/  FF208A :                     ; 		btst	#bitJoyStart,d7
(1)  829/  FF208A :                     ; 		beq.s	.no_mode0
(1)  830/  FF208A :                     ; 		move.w	#1,(RAM_CurrPage).w
(1)  831/  FF208A :                     ; 		move.w	#$920D,(RAM_WindowNew).w
(1)  832/  FF208A :                     ; .no_mode0:
(1)  833/  FF208A :                     ; 		move.w	(Controller_1+on_press),d7
(1)  834/  FF208A :                     ; 		btst	#bitJoyZ,d7
(1)  835/  FF208A :                     ; 		beq.s	.noah
(1)  836/  FF208A :                     ; 		moveq	#0,d2
(1)  837/  FF208A :                     ; 		bsr	PlayThisSfx
(1)  838/  FF208A :                     ; .noah:
(1)  839/  FF208A :                     ;
(1)  840/  FF208A :                     ; 		move.l	(RAM_MdDreq+scrlbg_X).w,d0
(1)  841/  FF208A :                     ; 		move.l	(RAM_MdDreq+scrlbg_Y).w,d1
(1)  842/  FF208A :                     ; 		move.l	#$10000,d5
(1)  843/  FF208A :                     ; 		move.l	#1,d6
(1)  844/  FF208A :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  845/  FF208A :                     ; 		btst	#bitJoyRight,d7
(1)  846/  FF208A :                     ; 		beq.s	.nor_m
(1)  847/  FF208A :                     ; 		add.l	d5,d0
(1)  848/  FF208A :                     ; 		sub.w	d6,d2
(1)  849/  FF208A :                     ; .nor_m:
(1)  850/  FF208A :                     ; 		btst	#bitJoyLeft,d7
(1)  851/  FF208A :                     ; 		beq.s	.nol_m
(1)  852/  FF208A :                     ; 		sub.l	d5,d0
(1)  853/  FF208A :                     ; 		add.w	d6,d2
(1)  854/  FF208A :                     ; .nol_m:
(1)  855/  FF208A :                     ; 		btst	#bitJoyDown,d7
(1)  856/  FF208A :                     ; 		beq.s	.nod_m
(1)  857/  FF208A :                     ; 		add.l	d5,d1
(1)  858/  FF208A :                     ; 		add.w	d6,d3
(1)  859/  FF208A :                     ; .nod_m:
(1)  860/  FF208A :                     ; 		btst	#bitJoyUp,d7
(1)  861/  FF208A :                     ; 		beq.s	.nou_m
(1)  862/  FF208A :                     ; 		sub.l	d5,d1
(1)  863/  FF208A :                     ; 		sub.w	d6,d3
(1)  864/  FF208A :                     ; .nou_m:
(1)  865/  FF208A :                     ; 		move.l	d0,(RAM_MdDreq+scrlbg_X).w
(1)  866/  FF208A :                     ; 		move.l	d1,(RAM_MdDreq+scrlbg_Y).w
(1)  867/  FF208A :                     ;
(1)  868/  FF208A :                     ; 		move.l	#0,d0
(1)  869/  FF208A :                     ; 		move.l	#0,d1
(1)  870/  FF208A :                     ; 		moveq	#0,d2
(1)  871/  FF208A :                     ; 		move.w	(Controller_1+on_press),d7
(1)  872/  FF208A :                     ; 		btst	#bitJoyB,d7
(1)  873/  FF208A :                     ; 		beq.s	.nor_m2
(1)  874/  FF208A :                     ; 		add.w	#1,(RAM_CurrGfx).w
(1)  875/  FF208A :                     ; 		moveq	#1,d2
(1)  876/  FF208A :                     ; .nor_m2:
(1)  877/  FF208A :                     ; 		btst	#bitJoyA,d7
(1)  878/  FF208A :                     ; 		beq.s	.nol_m2
(1)  879/  FF208A :                     ; 		sub.w	#1,(RAM_CurrGfx).w
(1)  880/  FF208A :                     ; 		moveq	#1,d2
(1)  881/  FF208A :                     ; .nol_m2:
(1)  882/  FF208A :                     ;
(1)  883/  FF208A :                     ; 		tst.w	d2
(1)  884/  FF208A :                     ; 		beq.s	.no_chng
(1)  885/  FF208A :                     ;
(1)  886/  FF208A :                     ; 		move.w	#2,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  887/  FF208A :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  888/  FF208A :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  889/  FF208A :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  890/  FF208A :                     ; 		move.w	#2,(RAM_FadeMdDelay).w
(1)  891/  FF208A :                     ; 		move.w	#2,(RAM_FadeMarsDelay).w
(1)  892/  FF208A :                     ; .fadeout:
(1)  893/  FF208A :                     ; 		bsr	Video_RunFade
(1)  894/  FF208A :                     ; 		beq.s	.exit
(1)  895/  FF208A :                     ; 		bsr	System_WaitFrame
(1)  896/  FF208A :                     ; 		lea	(RAM_MdDreq),a0
(1)  897/  FF208A :                     ; 		move.w	#sizeof_dreq,d0
(1)  898/  FF208A :                     ; 		bsr	System_SendDreq
(1)  899/  FF208A :                     ; 		bra.s	.fadeout
(1)  900/  FF208A :                     ; .exit
(1)  901/  FF208A :                     ; 		move.w	#0,(RAM_CurrPage).w
(1)  902/  FF208A :                     ; ; .thispal:
(1)  903/  FF208A :                     ; ; 		moveq	#0,d2
(1)  904/  FF208A :                     ; ; 		moveq	#0,d0
(1)  905/  FF208A :                     ; ; 		move.w	#256,d1
(1)  906/  FF208A :                     ; ; 		bsr	Video_LoadPal_Mars
(1)  907/  FF208A :                     ; ; 		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  908/  FF208A :                     ; .no_chng:
(1)  909/  FF208A :                     ; 		bsr	.move_model
(1)  910/  FF208A :                     
(1)  911/  FF208A :                     ; 	; Move Emily Fujiwara
(1)  912/  FF208A :                     ; 	; UDLR
(1)  913/  FF208A :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  914/  FF208A :                     ; 		move.w	d7,d6
(1)  915/  FF208A :                     ; 		btst	#bitJoyDown,d7
(1)  916/  FF208A :                     ; 		beq.s	.noz_down
(1)  917/  FF208A :                     ; 		move.w	#0,(RAM_EmiFrame).w
(1)  918/  FF208A :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  919/  FF208A :                     ; 		add.w	#1,(RAM_EmiPosY).w
(1)  920/  FF208A :                     ; .noz_down:
(1)  921/  FF208A :                     ; 		move.w	d7,d6
(1)  922/  FF208A :                     ; 		btst	#bitJoyUp,d6
(1)  923/  FF208A :                     ; 		beq.s	.noz_up
(1)  924/  FF208A :                     ; 		move.w	#4,(RAM_EmiFrame).w
(1)  925/  FF208A :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  926/  FF208A :                     ; 		add.w	#-1,(RAM_EmiPosY).w
(1)  927/  FF208A :                     ; .noz_up:
(1)  928/  FF208A :                     ; 		move.w	d7,d6
(1)  929/  FF208A :                     ; 		btst	#bitJoyRight,d6
(1)  930/  FF208A :                     ; 		beq.s	.noz_r
(1)  931/  FF208A :                     ; 		move.w	#8,(RAM_EmiFrame).w
(1)  932/  FF208A :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  933/  FF208A :                     ; 		add.w	#1,(RAM_EmiPosX).w
(1)  934/  FF208A :                     ; .noz_r:
(1)  935/  FF208A :                     ; 		move.w	d7,d6
(1)  936/  FF208A :                     ; 		btst	#bitJoyLeft,d6
(1)  937/  FF208A :                     ; 		beq.s	.noz_l
(1)  938/  FF208A :                     ; 		move.w	#$C,(RAM_EmiFrame).w
(1)  939/  FF208A :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  940/  FF208A :                     ; 		add.w	#-1,(RAM_EmiPosX).w
(1)  941/  FF208A :                     ; .noz_l:
(1)  942/  FF208A :                     
(1)  943/  FF208A :                     ; 		lea	(RAM_MdDreq),a0
(1)  944/  FF208A :                     ; 		move.l	Dreq_SclX(a0),d0
(1)  945/  FF208A :                     ; 		move.l	Dreq_SclY(a0),d1
(1)  946/  FF208A :                     ; 		move.l	Dreq_SclDX(a0),d2
(1)  947/  FF208A :                     ; 		move.l	Dreq_SclDY(a0),d3
(1)  948/  FF208A :                     ; 		move.l	#$100,d4
(1)  949/  FF208A :                     ; 		move.l	#$200,d5
(1)  950/  FF208A :                     ;
(1)  951/  FF208A :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  952/  FF208A :                     ; 		move.w	d7,d6
(1)  953/  FF208A :                     ; 		btst	#bitJoyDown,d7
(1)  954/  FF208A :                     ; 		beq.s	.noz_down
(1)  955/  FF208A :                     ; 		add.l	d4,d1
(1)  956/  FF208A :                     ; 		sub.l	d5,d3
(1)  957/  FF208A :                     ; .noz_down:
(1)  958/  FF208A :                     ; 		move.w	d7,d6
(1)  959/  FF208A :                     ; 		btst	#bitJoyUp,d6
(1)  960/  FF208A :                     ; 		beq.s	.noz_up
(1)  961/  FF208A :                     ; 		sub.l	d4,d1
(1)  962/  FF208A :                     ; 		add.l	d5,d3
(1)  963/  FF208A :                     ; .noz_up:
(1)  964/  FF208A :                     ; 		move.w	d7,d6
(1)  965/  FF208A :                     ; 		btst	#bitJoyRight,d6
(1)  966/  FF208A :                     ; 		beq.s	.noz_r
(1)  967/  FF208A :                     ; 		add.l	d4,d0
(1)  968/  FF208A :                     ; 		sub.l	d5,d2
(1)  969/  FF208A :                     ; .noz_r:
(1)  970/  FF208A :                     ; 		move.w	d7,d6
(1)  971/  FF208A :                     ; 		btst	#bitJoyLeft,d6
(1)  972/  FF208A :                     ; 		beq.s	.noz_l
(1)  973/  FF208A :                     ; 		sub.l	d4,d0
(1)  974/  FF208A :                     ; 		add.l	d5,d2
(1)  975/  FF208A :                     ; .noz_l:
(1)  976/  FF208A :                     ; 		move.l	d0,Dreq_SclX(a0)
(1)  977/  FF208A :                     ; 		move.l	d1,Dreq_SclY(a0)
(1)  978/  FF208A :                     ; 		move.l	d2,Dreq_SclDX(a0)
(1)  979/  FF208A :                     ; 		move.l	d3,Dreq_SclDY(a0)
(1)  980/  FF208A :                     ;
(1)  981/  FF208A :                     ; 		move.w	d7,d6
(1)  982/  FF208A :                     ; 		btst	#bitJoyX,d6
(1)  983/  FF208A :                     ; 		beq.s	.nox_x
(1)  984/  FF208A :                     ; 		lea	(RAM_MdDreq+Dreq_SclX),a0
(1)  985/  FF208A :                     ; 		move.l	#$00000000,(a0)+	; X pos
(1)  986/  FF208A :                     ; 		move.l	#$00000000,(a0)+	; Y pos
(1)  987/  FF208A :                     ; 		move.l	#$00010000,(a0)+	; DX
(1)  988/  FF208A :                     ; 		move.l	#$00010000,(a0)+	; DY
(1)  989/  FF208A :                     ; .nox_x:
(1)  990/  FF208A :                     
(1)  991/  FF208A :                     
(1)  992/  FF208A :                     ; 		move.w	d7,d6
(1)  993/  FF208A :                     ; 		btst	#bitJoyY,d6
(1)  994/  FF208A :                     ; 		beq.s	.noy
(1)  995/  FF208A :                     ; 		move.l	Dreq_SclDX(a0),d0
(1)  996/  FF208A :                     ; 		move.l	Dreq_SclDY(a0),d1
(1)  997/  FF208A :                     ; 		move.l	#$100,d2
(1)  998/  FF208A :                     ; 		add.l	d2,d0
(1)  999/  FF208A :                     ; 		add.l	d2,d1
(1) 1000/  FF208A :                     ; 		move.l	d0,Dreq_SclDX(a0)
(1) 1001/  FF208A :                     ; 		move.l	d1,Dreq_SclDY(a0)
(1) 1002/  FF208A :                     ; .noy:
(1) 1003/  FF208A :                     
(1) 1004/  FF208A :                     ; 		bsr	Emilie_Move
(1) 1005/  FF208A :                     ; 		bsr	.wave_backgrnd
(1) 1006/  FF208A : 4E75                		rts
(1) 1007/  FF208C :                     
(1) 1008/  FF208C :                     ; .wave_backgrnd:
(1) 1009/  FF208C :                     ; 	; wave background
(1) 1010/  FF208C :                     ; 		lea	(RAM_HorScroll),a0
(1) 1011/  FF208C :                     ; 		moveq	#112-1,d7
(1) 1012/  FF208C :                     ; 		move.w	(RAM_WaveTmr),d0
(1) 1013/  FF208C :                     ; 		move.w	#8,d1
(1) 1014/  FF208C :                     ; .next:
(1) 1015/  FF208C :                     ; 		bsr	System_SineWave
(1) 1016/  FF208C :                     ; 		lsr.l	#8,d2
(1) 1017/  FF208C :                     ; 		move.w	d2,2(a0)
(1) 1018/  FF208C :                     ; 		adda	#4,a0
(1) 1019/  FF208C :                     ; 		add.w	#1,d0
(1) 1020/  FF208C :                     ; 		bsr	System_SineWave
(1) 1021/  FF208C :                     ; 		lsr.l	#8,d2
(1) 1022/  FF208C :                     ; 		move.w	d2,2(a0)
(1) 1023/  FF208C :                     ; 		adda	#4,a0
(1) 1024/  FF208C :                     ; 		add.w	#1,d0
(1) 1025/  FF208C :                     ; 		dbf	d7,.next
(1) 1026/  FF208C :                     ; 		add.w	#1,(RAM_WaveTmr).w
(1) 1027/  FF208C :                     ;
(1) 1028/  FF208C :                     ; 		lea	(RAM_VerScroll),a0
(1) 1029/  FF208C :                     ; 		moveq	#(320/16)-1,d7
(1) 1030/  FF208C :                     ; 		move.w	(RAM_WaveTmr),d0
(1) 1031/  FF208C :                     ; 		move.w	#6,d1
(1) 1032/  FF208C :                     ; .next2:
(1) 1033/  FF208C :                     ; 		bsr	System_SineWave_Cos
(1) 1034/  FF208C :                     ; 		lsr.l	#8,d2
(1) 1035/  FF208C :                     ; 		move.w	d2,2(a0)
(1) 1036/  FF208C :                     ; 		adda	#4,a0
(1) 1037/  FF208C :                     ; 		add.w	#4,d0
(1) 1038/  FF208C :                     ; 		dbf	d7,.next2
(1) 1039/  FF208C :                     ; 		add.w	#1,(RAM_WaveTmr2).w
(1) 1040/  FF208C :                     ;
(1) 1041/  FF208C :                     ; ; 		bsr	Emilie_Move
(1) 1042/  FF208C :                     ; ; 		bsr	Emilie_MkSprite
(1) 1043/  FF208C :                     ; 		rts
(1) 1044/  FF208C :                     ;
(1) 1045/  FF208C :                     ; ; --------------------------------------------------
(1) 1046/  FF208C :                     ; ; Mode 1
(1) 1047/  FF208C :                     ; ; --------------------------------------------------
(1) 1048/  FF208C :                     ;
(1) 1049/  FF208C :                     ; .mode1:
(1) 1050/  FF208C :                     ; 		tst.w	(RAM_CurrPage).w
(1) 1051/  FF208C :                     ; 		bmi	.mode1_loop
(1) 1052/  FF208C :                     ; 		or.w	#$8000,(RAM_CurrPage).w
(1) 1053/  FF208C :                     ; 		bsr	.print_cursor
(1) 1054/  FF208C :                     ; ; 		move.w	#1,(RAM_EmiHide).w
(1) 1055/  FF208C :                     ; ; 		move.w	#1,(RAM_EmiUpd).w
(1) 1056/  FF208C :                     ;
(1) 1057/  FF208C :                     ; .mode1_loop:
(1) 1058/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1059/  FF208C :                     ; 		btst	#bitJoyStart,d7
(1) 1060/  FF208C :                     ; 		beq.s	.no_mode1
(1) 1061/  FF208C :                     ; 		move.w	#0,(RAM_CurrPage).w
(1) 1062/  FF208C :                     ; 		move.w	#$9200,(RAM_WindowNew).w
(1) 1063/  FF208C :                     ; .no_mode1:
(1) 1064/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1065/  FF208C :                     ; 		btst	#bitJoyY,d7
(1) 1066/  FF208C :                     ; 		beq.s	.noy2
(1) 1067/  FF208C :                     ; 		cmp.w	#1,(RAM_CurrIndx).w
(1) 1068/  FF208C :                     ; 		beq.	.noy2
(1) 1069/  FF208C :                     ; 		add.w	#1,(RAM_CurrIndx).w
(1) 1070/  FF208C :                     ; 		bsr	.print_cursor
(1) 1071/  FF208C :                     ; .noy2:
(1) 1072/  FF208C :                     ; 		move.w	(Controller_1+on_hold),d7
(1) 1073/  FF208C :                     ; 		btst	#bitJoyX,d7
(1) 1074/  FF208C :                     ; 		beq.s	.nox2
(1) 1075/  FF208C :                     ; 		tst.w	(RAM_CurrIndx).w
(1) 1076/  FF208C :                     ; 		beq.s	.nox2
(1) 1077/  FF208C :                     ; 		sub.w	#1,(RAM_CurrIndx).w
(1) 1078/  FF208C :                     ; 		bsr	.print_cursor
(1) 1079/  FF208C :                     ; .nox2:
(1) 1080/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1081/  FF208C :                     ; 		btst	#bitJoyUp,d7
(1) 1082/  FF208C :                     ; 		beq.s	.nou2
(1) 1083/  FF208C :                     ; 		tst.w	(RAM_CurrSelc).w
(1) 1084/  FF208C :                     ; 		beq.s	.nou2
(1) 1085/  FF208C :                     ; 		sub.w	#1,(RAM_CurrSelc).w
(1) 1086/  FF208C :                     ; 		bsr	.print_cursor
(1) 1087/  FF208C :                     ; .nou2:
(1) 1088/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1089/  FF208C :                     ; 		btst	#bitJoyDown,d7
(1) 1090/  FF208C :                     ; 		beq.s	.nod2
(1) 1091/  FF208C :                     ; 		cmp.w	#MAX_GEMAENTRY,(RAM_CurrSelc).w
(1) 1092/  FF208C :                     ; 		bge.s	.nod2
(1) 1093/  FF208C :                     ; 		add.w	#1,(RAM_CurrSelc).w
(1) 1094/  FF208C :                     ; 		bsr	.print_cursor
(1) 1095/  FF208C :                     ; .nod2:
(1) 1096/  FF208C :                     ;
(1) 1097/  FF208C :                     ; 	; LEFT/RIGHT
(1) 1098/  FF208C :                     ; 		lea	(RAM_CurrTrack),a1
(1) 1099/  FF208C :                     ; 		cmp.w	#3,(RAM_CurrSelc).w
(1) 1100/  FF208C :                     ; 		bne.s	.toptrk
(1) 1101/  FF208C :                     ; 		add	#2,a1
(1) 1102/  FF208C :                     ; .toptrk:
(1) 1103/  FF208C :                     ; 		cmp.w	#4,(RAM_CurrSelc).w
(1) 1104/  FF208C :                     ; 		bne.s	.toptrk2
(1) 1105/  FF208C :                     ; 		add	#2*2,a1
(1) 1106/  FF208C :                     ; .toptrk2:
(1) 1107/  FF208C :                     ;
(1) 1108/  FF208C :                     ; 		move.w	(Controller_1+on_hold),d7
(1) 1109/  FF208C :                     ; 		and.w	#JoyB,d7
(1) 1110/  FF208C :                     ; 		beq.s	.noba
(1) 1111/  FF208C :                     ; 		add.w	#1,(a1)
(1) 1112/  FF208C :                     ; 		bsr	.print_cursor
(1) 1113/  FF208C :                     ; .noba:
(1) 1114/  FF208C :                     ; 		move.w	(Controller_1+on_hold),d7
(1) 1115/  FF208C :                     ; 		and.w	#JoyA,d7
(1) 1116/  FF208C :                     ; 		beq.s	.noaa
(1) 1117/  FF208C :                     ; 		sub.w	#1,(a1)
(1) 1118/  FF208C :                     ; 		bsr	.print_cursor
(1) 1119/  FF208C :                     ; .noaa:
(1) 1120/  FF208C :                     ;
(1) 1121/  FF208C :                     ;
(1) 1122/  FF208C :                     ;
(1) 1123/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1124/  FF208C :                     ; 		btst	#bitJoyLeft,d7
(1) 1125/  FF208C :                     ; 		beq.s	.nol
(1) 1126/  FF208C :                     ; ; 		tst.w	(a1)
(1) 1127/  FF208C :                     ; ; 		beq.s	.nol
(1) 1128/  FF208C :                     ; 		sub.w	#1,(a1)
(1) 1129/  FF208C :                     ; 		bsr	.print_cursor
(1) 1130/  FF208C :                     ; .nol:
(1) 1131/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1132/  FF208C :                     ; 		btst	#bitJoyRight,d7
(1) 1133/  FF208C :                     ; 		beq.s	.nor
(1) 1134/  FF208C :                     ; ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1) 1135/  FF208C :                     ; ; 		bge.s	.nor
(1) 1136/  FF208C :                     ; 		add.w	#1,(a1)
(1) 1137/  FF208C :                     ; 		bsr	.print_cursor
(1) 1138/  FF208C :                     ; .nor:
(1) 1139/  FF208C :                     ;
(1) 1140/  FF208C :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1141/  FF208C :                     ; 		and.w	#JoyC,d7
(1) 1142/  FF208C :                     ; 		beq.s	.noc_c
(1) 1143/  FF208C :                     ; 		move.w	(RAM_CurrIndx).w,d0
(1) 1144/  FF208C :                     ; 		bsr	.procs_task
(1) 1145/  FF208C :                     ; .noc_c:
(1) 1146/  FF208C :                     ;
(1) 1147/  FF208C :                     ; ; 		bsr	.wave_backgrnd
(1) 1148/  FF208C :                     ; ; 		lea	str_COMM(pc),a0
(1) 1149/  FF208C :                     ; ; 		move.l	#locate(0,2,9),d0
(1) 1150/  FF208C :                     ; ; 		bsr	Video_Print
(1) 1151/  FF208C :                     ; ; 		rts
(1) 1152/  FF208C :                     ;
(1) 1153/  FF208C :                     ; .move_model:
(1) 1154/  FF208C :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a0
(1) 1155/  FF208C :                     ; 		add.l	#$4000,mdl_x_rot(a0)
(1) 1156/  FF208C :                     ; ; 		add.l	#$1000,mdl_z_rot(a0)
(1) 1157/  FF208C :                     ; 		rts
(1) 1158/  FF208C :                     ;
(1) 1159/  FF208C :                     ; ; --------------------------------------------------
(1) 1160/  FF208C :                     ;
(1) 1161/  FF208C :                     ; .print_cursor:
(1) 1162/  FF208C :                     ; ; 		lea	str_Status(pc),a0
(1) 1163/  FF208C :                     ; ; 		move.l	#locate(2,20,4),d0
(1) 1164/  FF208C :                     ; ; 		bsr	Video_Print
(1) 1165/  FF208C :                     ; 		lea	str_Cursor(pc),a0
(1) 1166/  FF208C :                     ; 		moveq	#0,d0
(1) 1167/  FF208C :                     ; 		move.w	(RAM_CurrSelc).w,d0
(1) 1168/  FF208C :                     ; 		add.l	#locate(2,2,5),d0
(1) 1169/  FF208C :                     ; 		bsr	Video_Print
(1) 1170/  FF208C :                     ; 		rts
(1) 1171/  FF208C :                     ;
(1) 1172/  FF208C :                     ; ; d1 - Track slot
(1) 1173/  FF208C :                     ; .procs_task:
(1) 1174/  FF208C :                     ; 		move.w	(RAM_CurrSelc).w,d7
(1) 1175/  FF208C :                     ; 		add.w	d7,d7
(1) 1176/  FF208C :                     ; 		move.w	.tasklist(pc,d7.w),d7
(1) 1177/  FF208C :                     ; 		jmp	.tasklist(pc,d7.w)
(1) 1178/  FF208C :                     ; .tasklist:
(1) 1179/  FF208C :                     ; 		dc.w .task_00-.tasklist
(1) 1180/  FF208C :                     ; 		dc.w .task_01-.tasklist
(1) 1181/  FF208C :                     ; 		dc.w .task_02-.tasklist
(1) 1182/  FF208C :                     ; 		dc.w .task_03-.tasklist
(1) 1183/  FF208C :                     ; 		dc.w .task_04-.tasklist
(1) 1184/  FF208C :                     ; ; 		dc.w .task_05-.tasklist
(1) 1185/  FF208C :                     ;
(1) 1186/  FF208C :                     ; ; d0 - Track slot
(1) 1187/  FF208C :                     ; .task_00:
(1) 1188/  FF208C :                     ; 		lea	MasterTrkList(pc),a0
(1) 1189/  FF208C :                     ; 		move.w	(RAM_CurrTrack).w,d7
(1) 1190/  FF208C :                     ; 		lsl.w	#4,d7
(1) 1191/  FF208C :                     ; 		lea	(a0,d7.w),a0
(1) 1192/  FF208C :                     ; 		move.w	$C(a0),d1
(1) 1193/  FF208C :                     ; 		moveq	#0,d2
(1) 1194/  FF208C :                     ; 		move.w	$E(a0),d3
(1) 1195/  FF208C :                     ; 		bra	Sound_TrkPlay
(1) 1196/  FF208C :                     ; .task_01:
(1) 1197/  FF208C :                     ; 		bra	Sound_TrkStop
(1) 1198/  FF208C :                     ; .task_02:
(1) 1199/  FF208C :                     ; 		bra	Sound_TrkResume
(1) 1200/  FF208C :                     ; .task_03:
(1) 1201/  FF208C :                     ; 		move.w	(RAM_CurrTicks).w,d1
(1) 1202/  FF208C :                     ; 		bra	Sound_TrkTicks
(1) 1203/  FF208C :                     ; .task_04:
(1) 1204/  FF208C :                     ; 		move.w	(RAM_CurrTempo).w,d1
(1) 1205/  FF208C :                     ; 		bra	Sound_GlbBeats
(1) 1206/  FF208C :                     ;
(1) 1207/  FF208C :                     ; ; test playlist
(1) 1208/  FF208C :                     MasterTrkList:
(1) 1209/  FF208C : 0091 1837 0091 1826 	dc.l GemaPat_BeMine,GemaBlk_BeMine,GemaIns_BeMine
                    0091 30FA           
(1) 1210/  FF2098 : 000A 0000           	dc.w $A,%000
(1) 1211/  FF209C : 0090 4E14 0090 4E0C 	dc.l GemaPat_Test,GemaBlk_Test,GemaIns_Test
                    0090 6032           
(1) 1212/  FF20A8 : 0006 0001           	dc.w 6,%001
(1) 1213/  FF20AC : 0090 A308 0090 A2F2 	dc.l GemaPat_Test2,GemaBlk_Test2,GemaIns_Test2
                    0090 BF38           
(1) 1214/  FF20B8 : 0002 0001           	dc.w 2,%001
(1) 1215/  FF20BC : 0090 BFB2 0090 BF94 	dc.l GemaPat_Test3,GemaBlk_Test3,GemaIns_Test3
                    0091 17A2           
(1) 1216/  FF20C8 : 0002 0001           	dc.w 2,%001
(1) 1217/  FF20CC :                     
(1) 1218/  FF20CC :                     	align 2
(1) 1219/  FF20CC :                     
(1) 1220/  FF20CC :                     ; ====================================================================
(1) 1221/  FF20CC :                     ; ------------------------------------------------------
(1) 1222/  FF20CC :                     ; Subroutines
(1) 1223/  FF20CC :                     ; ------------------------------------------------------
(1) 1224/  FF20CC :                     
(1) 1225/  FF20CC :                     SuperSprite_Test_init:
(1) 1226/  FF20CC : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1227/  FF20D0 : 203C 0213 28FC      		move.l	#SuperSpr_Test,d0
(1) 1228/  FF20D6 : 2200                		move.l	d0,d1
(1) 1229/  FF20D8 : 82BC 2000 0000      		or.l	#TH,d1
(1) 1230/  FF20DE : 2141 0010           		move.l	d1,marsspr_data(a0)
(1) 1231/  FF20E2 : 317C 0040 0004      		move.w	#64,marsspr_dwidth(a0)
(1) 1232/  FF20E8 : 317C 00B0 000A      		move.w	#$B0,marsspr_x(a0)
(1) 1233/  FF20EE : 317C 0060 000C      		move.w	#$60,marsspr_y(a0)
(1) 1234/  FF20F4 : 10BC 0020           		move.b	#32,marsspr_xs(a0)
(1) 1235/  FF20F8 : 117C 0030 0001      		move.b	#48,marsspr_ys(a0)
(1) 1236/  FF20FE : 317C 0080 0006      		move.w	#$80,marsspr_indx(a0)
(1) 1237/  FF2104 : 203C 0213 28FC      		move.l	#SuperSpr_Test,d0
(1) 1238/  FF210A : 2200                		move.l	d0,d1
(1) 1239/  FF210C : 82BC 2000 0000      		or.l	#TH,d1
(1) 1240/  FF2112 : D0FC 0018           		adda	#sizeof_marsspr,a0
(1) 1241/  FF2116 : 2141 0010           		move.l	d1,marsspr_data(a0)
(1) 1242/  FF211A : 317C 0040 0004      		move.w	#64,marsspr_dwidth(a0)
(1) 1243/  FF2120 : 317C 0060 000A      		move.w	#$60,marsspr_x(a0)
(1) 1244/  FF2126 : 317C 0050 000C      		move.w	#$50,marsspr_y(a0)
(1) 1245/  FF212C : 10BC 0020           		move.b	#32,marsspr_xs(a0)
(1) 1246/  FF2130 : 117C 0030 0001      		move.b	#48,marsspr_ys(a0)
(1) 1247/  FF2136 : 317C 0080 0006      		move.w	#$80,marsspr_indx(a0)
(1) 1248/  FF213C : D0FC 0018           		adda	#sizeof_marsspr,a0
(1) 1249/  FF2140 : 217C 0000 0000 0010 		move.l	#0,marsspr_data(a0)
(1) 1250/  FF2148 :                     
(1) 1251/  FF2148 :                     SuperSprite_Test:
(1) 1252/  FF2148 :                     	; SUPER SPRITE MOVE
(1) 1253/  FF2148 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1254/  FF214C : 0478 0001 9036      		sub.w	#1,(RAM_SprTimer).w
(1) 1255/  FF2152 : 6A2A                		bpl.s	.wspr
(1) 1256/  FF2154 : 31FC 000E 9036      		move.w	#14,(RAM_SprTimer).w
(1) 1257/  FF215A :                     
(1) 1258/  FF215A : 1028 0002           		move.b	marsspr_xfrm(a0),d0
(1) 1259/  FF215E : D07C 0001           		add.w	#1,d0
(1) 1260/  FF2162 : C07C 0001           		and.w	#1,d0
(1) 1261/  FF2166 : 1140 0002           		move.b	d0,marsspr_xfrm(a0)
(1) 1262/  FF216A : D0FC 0018           		adda	#sizeof_marsspr,a0
(1) 1263/  FF216E : 1028 0003           		move.b	marsspr_yfrm(a0),d0
(1) 1264/  FF2172 : D07C 0001           		add.w	#1,d0
(1) 1265/  FF2176 : C07C 0003           		and.w	#%11,d0
(1) 1266/  FF217A : 1140 0003           		move.b	d0,marsspr_yfrm(a0)
(1) 1267/  FF217E :                     .wspr:
(1) 1268/  FF217E : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1) 1269/  FF2182 : 0807 000A           		btst	#bitJoyX,d7
(1) 1270/  FF2186 : 6710                		beq	.not_hold3
(1) 1271/  FF2188 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1272/  FF218C : 0668 0001 0008      		add.w	#1,marsspr_flags(a0)
(1) 1273/  FF2192 : 0268 0003 0008      		and.w	#%11,marsspr_flags(a0)
(1) 1274/  FF2198 :                     .not_hold3:
(1) 1275/  FF2198 : 3E38 A706           		move.w	(Controller_1+on_press),d7
(1) 1276/  FF219C : 0807 0009           		btst	#bitJoyY,d7
(1) 1277/  FF21A0 : 6710                		beq	.not_hold4
(1) 1278/  FF21A2 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1279/  FF21A6 : 0628 0001 0003      		add.b	#1,marsspr_yfrm(a0)
(1) 1280/  FF21AC : 0228 0003 0003      		and.b	#%11,marsspr_yfrm(a0)
(1) 1281/  FF21B2 :                     .not_hold4:
(1) 1282/  FF21B2 :                     
(1) 1283/  FF21B2 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1) 1284/  FF21B6 : 0807 0004           		btst	#bitJoyB,d7
(1) 1285/  FF21BA : 673C                		beq	.not_hold2
(1) 1286/  FF21BC : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1287/  FF21C0 : 3028 000A           		move.w	marsspr_x(a0),d0
(1) 1288/  FF21C4 : 3228 000C           		move.w	marsspr_y(a0),d1
(1) 1289/  FF21C8 : 7402                		moveq	#TEST_SPRSPD,d2
(1) 1290/  FF21CA : 7602                		moveq	#TEST_SPRSPD,d3
(1) 1291/  FF21CC : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1) 1292/  FF21D0 : 0807 0003           		btst	#bitJoyRight,d7
(1) 1293/  FF21D4 : 6702                		beq.s	.nor_s
(1) 1294/  FF21D6 : D042                		add.w	d2,d0
(1) 1295/  FF21D8 :                     .nor_s:
(1) 1296/  FF21D8 : 0807 0002           		btst	#bitJoyLeft,d7
(1) 1297/  FF21DC : 6702                		beq.s	.nol_s
(1) 1298/  FF21DE : 9042                		sub.w	d2,d0
(1) 1299/  FF21E0 :                     .nol_s:
(1) 1300/  FF21E0 : 0807 0001           		btst	#bitJoyDown,d7
(1) 1301/  FF21E4 : 6702                		beq.s	.nod_s
(1) 1302/  FF21E6 : D243                		add.w	d3,d1
(1) 1303/  FF21E8 :                     .nod_s:
(1) 1304/  FF21E8 : 0807 0000           		btst	#bitJoyUp,d7
(1) 1305/  FF21EC : 6702                		beq.s	.nou_s
(1) 1306/  FF21EE : 9243                		sub.w	d3,d1
(1) 1307/  FF21F0 :                     .nou_s:
(1) 1308/  FF21F0 : 3140 000A           		move.w	d0,marsspr_x(a0)
(1) 1309/  FF21F4 : 3141 000C           		move.w	d1,marsspr_y(a0)
(1) 1310/  FF21F8 :                     .not_hold2:
(1) 1311/  FF21F8 :                     
(1) 1312/  FF21F8 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1) 1313/  FF21FC : 0807 0006           		btst	#bitJoyA,d7
(1) 1314/  FF2200 : 6738                		beq.s	.not_hold
(1) 1315/  FF2202 : 41F8 AF02           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1316/  FF2206 : 3010                		move.w	marsspr_xs(a0),d0
(1) 1317/  FF2208 : 3228 0001           		move.w	marsspr_ys(a0),d1
(1) 1318/  FF220C : 7402                		moveq	#TEST_SPRSPD,d2
(1) 1319/  FF220E : 7602                		moveq	#TEST_SPRSPD,d3
(1) 1320/  FF2210 : 3E38 A704           		move.w	(Controller_1+on_hold),d7
(1) 1321/  FF2214 : 0807 0003           		btst	#bitJoyRight,d7
(1) 1322/  FF2218 : 6702                		beq.s	.nor_s2
(1) 1323/  FF221A : D042                		add.w	d2,d0
(1) 1324/  FF221C :                     .nor_s2:
(1) 1325/  FF221C : 0807 0002           		btst	#bitJoyLeft,d7
(1) 1326/  FF2220 : 6702                		beq.s	.nol_s2
(1) 1327/  FF2222 : 9042                		sub.w	d2,d0
(1) 1328/  FF2224 :                     .nol_s2:
(1) 1329/  FF2224 : 0807 0001           		btst	#bitJoyDown,d7
(1) 1330/  FF2228 : 6702                		beq.s	.nod_s2
(1) 1331/  FF222A : D243                		add.w	d3,d1
(1) 1332/  FF222C :                     .nod_s2:
(1) 1333/  FF222C : 0807 0000           		btst	#bitJoyUp,d7
(1) 1334/  FF2230 : 6702                		beq.s	.nou_s2
(1) 1335/  FF2232 : 9243                		sub.w	d3,d1
(1) 1336/  FF2234 :                     .nou_s2:
(1) 1337/  FF2234 : 3080                		move.w	d0,marsspr_xs(a0)
(1) 1338/  FF2236 : 3141 0001           		move.w	d1,marsspr_ys(a0)
(1) 1339/  FF223A :                     .not_hold:
(1) 1340/  FF223A :                     
(1) 1341/  FF223A : 0678 0001 9038      		add.w	#1,(RAM_SprFrame).w
(1) 1342/  FF2240 : 4E75                		rts
(1) 1343/  FF2242 :                     
(1) 1344/  FF2242 :                     ; ====================================================================
(1) 1345/  FF2242 :                     ; ------------------------------------------------------
(1) 1346/  FF2242 :                     ; VBlank
(1) 1347/  FF2242 :                     ; ------------------------------------------------------
(1) 1348/  FF2242 :                     
(1) 1349/  FF2242 :                     ; ------------------------------------------------------
(1) 1350/  FF2242 :                     ; HBlank
(1) 1351/  FF2242 :                     ; ------------------------------------------------------
(1) 1352/  FF2242 :                     
(1) 1353/  FF2242 :                     ; ====================================================================
(1) 1354/  FF2242 :                     ; ------------------------------------------------------
(1) 1355/  FF2242 :                     ; DATA
(1) 1356/  FF2242 :                     ;
(1) 1357/  FF2242 :                     ; Small stuff goes here
(1) 1358/  FF2242 :                     ; ------------------------------------------------------
(1) 1359/  FF2242 :                     
(1) 1360/  FF2242 : 200A                str_Cursor:	dc.b " ",$A
(1) 1361/  FF2244 : 3E0A                		dc.b ">",$A
(1) 1362/  FF2246 : 2000                		dc.b " ",0
(1) 1363/  FF2248 :                     		align 2
(1) 1364/  FF2248 :                     str_Title:
(1) 1365/  FF2248 : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO tester",$A
                    4D41 5253 4941 4E4F 
                    2074 6573 7465 720A 
(1) 1366/  FF2260 : 0A                  		dc.b $A
(1) 1367/  FF2261 : 2020 5363 7265 656E 		dc.b "  Screen 00 BLANK",$A
                    2030 3020 424C 414E 
                    4B0A                
(1) 1368/  FF2273 : 2020 5363 7265 656E 		dc.b "  Screen 01 256-SuperSprites w/scale",$A
                    2030 3120 3235 362D 
                    5375 7065 7253 7072 
                    6974 6573 2077 2F73 
                    6361 6C65 0A        
(1) 1369/  FF2298 : 2020 5363 7265 656E 		dc.b "  Screen 02 256-Scroll+SuperSprites",$A
                    2030 3220 3235 362D 
                    5363 726F 6C6C 2B53 
                    7570 6572 5370 7269 
                    7465 730A           
(1) 1370/  FF22BC : 2020 5363 7265 656E 		dc.b "  Screen 03 3D objects",$A
                    2030 3320 3344 206F 
                    626A 6563 7473 0A   
(1) 1371/  FF22D3 : 2020 4745 4D41 2073 		dc.b "  GEMA sound test",0
                    6F75 6E64 2074 6573 
                    7400                
(1) 1372/  FF22E5 :                     		align 2
(1) 1373/  FF22E6 :                     
(1) 1374/  FF22E6 :                     ; str_Page1:
(1) 1375/  FF22E6 :                     ; 		dc.b "Testing GfxMode 01",0
(1) 1376/  FF22E6 :                     ; 		align 2
(1) 1377/  FF22E6 :                     ; str_Page1_l:
(1) 1378/  FF22E6 :                     ; 		dc.b "\\l \\l",0
(1) 1379/  FF22E6 :                     ; 		dc.l RAM_MdDreq+scrlbg_X
(1) 1380/  FF22E6 :                     ; 		dc.l RAM_MdDreq+scrlbg_Y
(1) 1381/  FF22E6 :                     ; 		align 2
(1) 1382/  FF22E6 :                     
(1) 1383/  FF22E6 :                     str_Page1:
(1) 1384/  FF22E6 : 4766 784D 6F64 6520 		dc.b "GfxMode 00 - BLANK",$A
                    3030 202D 2042 4C41 
                    4E4B 0A             
(1) 1385/  FF22F9 : 0A                  		dc.b $A
(1) 1386/  FF22FA : 5465 7374 696E 6720 		dc.b "Testing MD's H32 resolution",0
                    4D44 2773 2048 3332 
                    2072 6573 6F6C 7574 
                    696F 6E00           
(1) 1387/  FF2316 :                     		align 2
(1) 1388/  FF2316 :                     str_Page2:
(1) 1389/  FF2316 : 4766 784D 6F64 6520 		dc.b "GfxMode 01 - Super Sprites only",0
                    3031 202D 2053 7570 
                    6572 2053 7072 6974 
                    6573 206F 6E6C 7900 
(1) 1390/  FF2336 :                     		align 2
(1) 1391/  FF2336 :                     
(1) 1392/  FF2336 :                     str_Page3_bg:
(1) 1393/  FF2336 : 2A2A 2A20 4766 784D 		dc.b "*** GfxMode 02, LAYER B ***",0
                    6F64 6520 3032 2C20 
                    4C41 5945 5220 4220 
                    2A2A 2A00           
(1) 1394/  FF2352 :                     		align 2
(1) 1395/  FF2352 :                     str_Page3:
(1) 1396/  FF2352 : 2A2A 2A20 4766 784D 		dc.b "*** GfxMode 02, LAYER A ***",0;$A,$A
                    6F64 6520 3032 2C20 
                    4C41 5945 5220 4120 
                    2A2A 2A00           
(1) 1397/  FF236E :                     ; 		dc.b "X/Y: \\l \\l",0
(1) 1398/  FF236E :                     ; 		dc.l RAM_MdDreq+Dreq_ScrnBuff+scrlbg_X
(1) 1399/  FF236E :                     ; 		dc.l RAM_MdDreq+Dreq_ScrnBuff+scrlbg_Y
(1) 1400/  FF236E :                     		align 2
(1) 1401/  FF236E :                     str_Page4:
(1) 1402/  FF236E : 4766 784D 6F64 6520 		dc.b "GfxMode 03",0
                    3033 00             
(1) 1403/  FF2379 :                     		align 2
(1) 1404/  FF237A :                     str_Page1_info:
(1) 1405/  FF237A : 5C77 205C 7700      		dc.b "\\w \\w",0
(1) 1406/  FF2380 : FFFF 900E FFFF 9010 		dc.l RAM_Scrn0_Frame,RAM_Scrn0_Timer
(1) 1407/  FF2388 :                     		align 2
(1) 1408/  FF2388 :                     
(1) 1409/  FF2388 :                     str_Status:
(1) 1410/  FF2388 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1411/  FF238C : 5C77 0A0A 0A        		dc.b "\\w",$A,$A,$A
(1) 1412/  FF2391 : 5C77 0A             		dc.b "\\w",$A
(1) 1413/  FF2394 : 5C77 00             		dc.b "\\w",0
(1) 1414/  FF2397 : FFFF 9006           		dc.l RAM_CurrIndx
(1) 1415/  FF239B : FFFF 9008           		dc.l RAM_CurrTrack
(1) 1416/  FF239F : FFFF 900A           		dc.l RAM_CurrTicks
(1) 1417/  FF23A3 : FFFF 900C           		dc.l RAM_CurrTempo
(1) 1418/  FF23A7 :                     		align 2
(1) 1419/  FF23A8 :                     str_Gema:
(1) 1420/  FF23A8 : 4745 4D41 2053 4F55 		dc.b "GEMA SOUND DRIVER MD+32X",$A
                    4E44 2044 5249 5645 
                    5220 4D44 2B33 3258 
                    0A                  
(1) 1421/  FF23C1 : 0A                  		dc.b $A
(1) 1422/  FF23C2 : 5472 6163 6B20 696E 		dc.b "Track index -----",$A,$A
                    6465 7820 2D2D 2D2D 
                    2D0A 0A             
(1) 1423/  FF23D5 : 2020 536F 756E 645F 		dc.b "  Sound_TrkPlay",$A
                    5472 6B50 6C61 790A 
(1) 1424/  FF23E5 : 2020 536F 756E 645F 		dc.b "  Sound_TrkStop",$A
                    5472 6B53 746F 700A 
(1) 1425/  FF23F5 : 2020 536F 756E 645F 		dc.b "  Sound_TrkResume",$A
                    5472 6B52 6573 756D 
                    650A                
(1) 1426/  FF2407 : 2020 536F 756E 645F 		dc.b "  Sound_TrkTicks",$A
                    5472 6B54 6963 6B73 
                    0A                  
(1) 1427/  FF2418 : 2020 536F 756E 645F 		dc.b "  Sound_GlbBeats",0
                    476C 6242 6561 7473 
                    00                  
(1) 1428/  FF2429 :                     		align 2
(1) 1429/  FF242A :                     str_GemaStatus:
(1) 1430/  FF242A : 2020 2020 202A 2A2A 		dc.b "     *** Channel freqs ***",$A
                    2043 6861 6E6E 656C 
                    2066 7265 7173 202A 
                    2A2A 0A             
(1) 1431/  FF2445 : 0A                  		dc.b $A
(1) 1432/  FF2446 : 5053 4731 2020 2020 		dc.b "PSG1       FM1       PWM1     ",$A,$A
                    2020 2046 4D31 2020 
                    2020 2020 2050 574D 
                    3120 2020 2020 0A0A 
(1) 1433/  FF2466 : 5053 4732 2020 2020 		dc.b "PSG2       FM2       PWM2     ",$A,$A
                    2020 2046 4D32 2020 
                    2020 2020 2050 574D 
                    3220 2020 2020 0A0A 
(1) 1434/  FF2486 : 5053 4733 2020 2020 		dc.b "PSG3       FM3       PWM3     ",$A,$A
                    2020 2046 4D33 2020 
                    2020 2020 2050 574D 
                    3320 2020 2020 0A0A 
(1) 1435/  FF24A6 : 5048 4154 2020 2020 		dc.b "PHAT       FM4       PWM4     ",$A,$A
                    2020 2046 4D34 2020 
                    2020 2020 2050 574D 
                    3420 2020 2020 0A0A 
(1) 1436/  FF24C6 : 2020 2020 2020 2020 		dc.b "           FM5       PWM5     ",$A,$A
                    2020 2046 4D35 2020 
                    2020 2020 2050 574D 
                    3520 2020 2020 0A0A 
(1) 1437/  FF24E6 : 2020 2020 2020 2020 		dc.b "           FM6       PWM6     ",$A,$A
                    2020 2046 4D36 2020 
                    2020 2020 2050 574D 
                    3620 2020 2020 0A0A 
(1) 1438/  FF2506 : 2020 2020 2020 2020 		dc.b "                     PWM7     ",0
                    2020 2020 2020 2020 
                    2020 2020 2050 574D 
                    3720 2020 2020 00   
(1) 1439/  FF2525 :                     		align 2
(1) 1440/  FF2526 :                     str_GemaPsg:
(1) 1441/  FF2526 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1442/  FF252A : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1443/  FF252E : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1444/  FF2532 : 5C77 00             		dc.b "\\w",0
(1) 1445/  FF2535 : FFFF 9014           		dc.l RAM_GemaList
(1) 1446/  FF2539 : FFFF 9016           		dc.l RAM_GemaList+2
(1) 1447/  FF253D : FFFF 9018           		dc.l RAM_GemaList+4
(1) 1448/  FF2541 : FFFF 901A           		dc.l RAM_GemaList+6
(1) 1449/  FF2545 :                     		align 2
(1) 1450/  FF2546 :                     str_GemaFm:
(1) 1451/  FF2546 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1452/  FF254A : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1453/  FF254E : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1454/  FF2552 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1455/  FF2556 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1456/  FF255A : 5C77 00             		dc.b "\\w",0
(1) 1457/  FF255D : FFFF 901C           		dc.l RAM_GemaListFM
(1) 1458/  FF2561 : FFFF 901E           		dc.l RAM_GemaListFM+2
(1) 1459/  FF2565 : FFFF 9020           		dc.l RAM_GemaListFM+4
(1) 1460/  FF2569 : FFFF 9022           		dc.l RAM_GemaListFM+6
(1) 1461/  FF256D : FFFF 9024           		dc.l RAM_GemaListFM+8
(1) 1462/  FF2571 : FFFF 9026           		dc.l RAM_GemaListFM+10
(1) 1463/  FF2575 :                     		align 2
(1) 1464/  FF2576 :                     str_GemaPwm:
(1) 1465/  FF2576 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1466/  FF257A : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1467/  FF257E : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1468/  FF2582 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1469/  FF2586 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1470/  FF258A : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1471/  FF258E : 5C77 00             		dc.b "\\w",0
(1) 1472/  FF2591 : FFFF 9028           		dc.l RAM_GemaListPWM
(1) 1473/  FF2595 : FFFF 902A           		dc.l RAM_GemaListPWM+2
(1) 1474/  FF2599 : FFFF 902C           		dc.l RAM_GemaListPWM+4
(1) 1475/  FF259D : FFFF 902E           		dc.l RAM_GemaListPWM+6
(1) 1476/  FF25A1 : FFFF 9030           		dc.l RAM_GemaListPWM+8
(1) 1477/  FF25A5 : FFFF 9032           		dc.l RAM_GemaListPWM+10
(1) 1478/  FF25A9 : FFFF 9034           		dc.l RAM_GemaListPWM+12
(1) 1479/  FF25AD :                     		align 2
(1) 1480/  FF25AE :                     
(1) 1481/  FF25AE :                     str_Stats:
(1) 1482/  FF25AE : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1) 1483/  FF25BA : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A,$A
                    205C 770A 0A        
(1) 1484/  FF25C7 : 5C6C 00             		dc.b "\\l",0
(1) 1485/  FF25CA : 00A1 5120           		dc.l sysmars_reg+comm0
(1) 1486/  FF25CE : 00A1 5122           		dc.l sysmars_reg+comm2
(1) 1487/  FF25D2 : 00A1 5124           		dc.l sysmars_reg+comm4
(1) 1488/  FF25D6 : 00A1 5126           		dc.l sysmars_reg+comm6
(1) 1489/  FF25DA : 00A1 5128           		dc.l sysmars_reg+comm8
(1) 1490/  FF25DE : 00A1 512A           		dc.l sysmars_reg+comm10
(1) 1491/  FF25E2 : 00A1 512C           		dc.l sysmars_reg+comm12
(1) 1492/  FF25E6 : 00A1 512E           		dc.l sysmars_reg+comm14
(1) 1493/  FF25EA : FFFF 9900           		dc.l RAM_Framecount
(1) 1494/  FF25EE :                     		align 2
(1) 1495/  FF25EE :                     
(1) 1496/  FF25EE :                     ; str_StatsPage4:
(1) 1497/  FF25EE :                     ; 		dc.b "\\l \\l \\l",0
(1) 1498/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_x_pos
(1) 1499/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_y_pos
(1) 1500/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_z_pos
(1) 1501/  FF25EE :                     ; 		align 2
(1) 1502/  FF25EE :                     
(1) 1503/  FF25EE :                     ; str_InfoMouse:
(1) 1504/  FF25EE :                     ; 		dc.b "comm0: \\w",$A
(1) 1505/  FF25EE :                     ; 		dc.b "comm12: \\w comm14: \\w",$A,$A
(1) 1506/  FF25EE :                     ; ; 		dc.b "MD Framecount: \\l",$A
(1) 1507/  FF25EE :                     ; 		dc.b "\\l \\l",$A
(1) 1508/  FF25EE :                     ; 		dc.b "\\l \\l",0
(1) 1509/  FF25EE :                     ; 		dc.l sysmars_reg+comm0
(1) 1510/  FF25EE :                     ; 		dc.l sysmars_reg+comm12
(1) 1511/  FF25EE :                     ; 		dc.l sysmars_reg+comm14
(1) 1512/  FF25EE :                     ; ; 		dc.l RAM_Framecount
(1) 1513/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_SclX
(1) 1514/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_SclY
(1) 1515/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_SclDX
(1) 1516/  FF25EE :                     ; 		dc.l RAM_MdDreq+Dreq_SclDY
(1) 1517/  FF25EE :                     ;
(1) 1518/  FF25EE :                     ; ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_x_pos
(1) 1519/  FF25EE :                     ; ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_y_pos
(1) 1520/  FF25EE :                     ; ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_z_pos
(1) 1521/  FF25EE :                     ; 		align 2
(1) 1522/  FF25EE :                     
(1) 1523/  FF25EE :                     ; PAL_TESTBOARD:
(1) 1524/  FF25EE :                     ; 		binclude "data/md/bg/bg_pal.bin"
(1) 1525/  FF25EE :                     ; 		binclude "data/md/bg/fg_pal.bin"
(1) 1526/  FF25EE :                     ; 		align 2
(1) 1527/  FF25EE :                     ; PAL_BG:
(1) 1528/  FF25EE :                     ; 		binclude "data/md/bg/bg_pal.bin"
(1) 1529/  FF25EE :                     ; 		align 2
(1) 1530/  FF25EE :                     
(1) 1531/  FF25EE :                     ; Map_Nicole:
(1) 1532/  FF25EE :                     ; 		include "data/md/sprites/emi_map.asm"
(1) 1533/  FF25EE :                     ; 		align 2
(1) 1534/  FF25EE :                     ; Dplc_Nicole:
(1) 1535/  FF25EE :                     ; 		include "data/md/sprites/emi_plc.asm"
(1) 1536/  FF25EE :                     ; 		align 2
(1) 1537/  FF25EE :                     
(1) 1538/  FF25EE :                     
      60/    2EC8 :                     		dephase
      61/    2EC8 :                     .here:
      65/    2EC8 :                     ;
      66/    2EC8 :                     ; ; ====================================================================
      67/    2EC8 :                     ; ; --------------------------------------------------------
      68/    2EC8 :                     ; ; Section stored at the $880000 area
      69/    2EC8 :                     ; ; --------------------------------------------------------
      70/    2EC8 :                     ;
      71/    2EC8 :                     ; 		phase $FF0000
      72/    2EC8 :                     ; Md_TopCode:
      73/    2EC8 :                     ; 		include	"system/md/sound.asm"
      74/    2EC8 :                     ; 		include	"system/md/video.asm"
      75/    2EC8 :                     ; 		include	"system/md/system.asm"
      76/    2EC8 :                     ; 		include "code/main.asm"
      77/    2EC8 :                     ; 		include "code/debug.asm"
      78/    2EC8 :                     ; Md_TopCode_e:
      79/    2EC8 :                     ; 		dephase
      80/    2EC8 :                     ; 		align 2
      81/    2EC8 :                     ;
      82/    2EC8 :                     ; 	if MOMPASS=6
      83/    2EC8 :                     ; .end:
      84/    2EC8 :                     ; 		message "Fixed 68K code ends at: \{Md_TopCode_end}"
      85/    2EC8 :                     ; 	endif
      86/    2EC8 :                     
      87/    2EC8 :                     ; ====================================================================
      88/    2EC8 :                     ; --------------------------------------------------------
      89/    2EC8 :                     ; Stuff that needs to be stored on the $880000+ area
      90/    2EC8 :                     ; --------------------------------------------------------
      91/    2EC8 :                     
      92/    2EC8 :                     		align 4
      93/  882EC8 :                     		phase $880000+*
      94/  882EC8 :                     		include "system/md/sub_dreq.asm"
(1)    1/  882EC8 :                     ; --------------------------------------------------------
(1)    2/  882EC8 :                     ; System_RomSendDreq
(1)    3/  882EC8 :                     ;
(1)    4/  882EC8 :                     ; Send data to the 32X using DREQ and
(1)    5/  882EC8 :                     ; the CMD interrupt
(1)    6/  882EC8 :                     ;
(1)    7/  882EC8 :                     ; Input:
(1)    8/  882EC8 :                     ; a0 - LONG | Source data to transfer
(1)    9/  882EC8 :                     ; d0 - WORD | Size (aligned by 8, MUST end with 0 or 8)
(1)   10/  882EC8 :                     ;
(1)   11/  882EC8 :                     ; CALL THIS OUTSIDE OF VBLANK ONLY.
(1)   12/  882EC8 :                     ;
(1)   13/  882EC8 :                     ; NOTE: THIS CODE ONLY WORKS PROPERLY ON THE
(1)   14/  882EC8 :                     ; $880000/$900000 AREAS. (FOR real hardware)
(1)   15/  882EC8 :                     ; --------------------------------------------------------
(1)   16/  882EC8 :                     
(1)   17/  882EC8 :                     System_RomSendDreq:
(1)   18/  882EC8 : 40C7                		move.w	sr,d7
(1)   19/  882ECA : 46FC 2700           		move.w	#$2700,sr
(1)   20/  882ECE : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   21/  882ED4 : 49F9 00A1 5112      		lea	($A15112).l,a4
(1)   22/  882EDA : 082D 0007 0007      		btst	#7,dreqctl+1(a5)	; If FIFO got full, skip.
(1)   23/  882EE0 : 6640                		bne.s	.bad
(1)   24/  882EE2 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Set 68S
(1)   25/  882EE8 : 3C00                		move.w	d0,d6			; Length in bytes
(1)   26/  882EEA : E24E                		lsr.w	#1,d6			; d6 - (length/2)
(1)   27/  882EEC : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1)   28/  882EF0 : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1)   29/  882EF2 : E44D                		lsr.w	#2,d5
(1)   30/  882EF4 : 9A7C 0001           		sub.w	#1,d5
(1)   31/  882EF8 : 08ED 0000 0003      		bset	#0,standby(a5)
(1)   32/  882EFE : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)
(1)   33/  882F04 : 67F8                		beq.s	.wait_bit
(1)   34/  882F06 : 08AD 0006 002C      		bclr	#6,comm12(a5)
(1)   35/  882F0C : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S
(1)   36/  882F12 : 3898                .l0:		move.w  (a0)+,(a4)		; *** CRITICAL PART***
(1)   37/  882F14 : 3898                		move.w  (a0)+,(a4)
(1)   38/  882F16 : 3898                		move.w  (a0)+,(a4)
(1)   39/  882F18 : 3898                		move.w  (a0)+,(a4)
(1)   40/  882F1A : 51CD FFF6           		dbf	d5,.l0
(1)   41/  882F1E : 46C7                		move.w	d7,sr
(1)   42/  882F20 : 4E75                		rts
(1)   43/  882F22 :                     .bad:
(1)   44/  882F22 :                     ; 		move.w	#%000,dreqctl(a5)
(1)   45/  882F22 : 46C7                		move.w	d7,sr
(1)   46/  882F24 : 4E75                		rts
(1)   47/  882F26 :                     
(1)   48/  882F26 :                     ; OLD, STABLE
(1)   49/  882F26 :                     ; System_SendDreq:
(1)   50/  882F26 :                     ; 		move.w	sr,d7
(1)   51/  882F26 :                     ; 		move.w	#$2700,sr
(1)   52/  882F26 :                     ; .l1:		btst	#2,(sysmars_reg+dreqctl+1).l	; Wait until 68S finishes.
(1)   53/  882F26 :                     ; 		bne.s	.l1
(1)   54/  882F26 :                     ; 		lea	($A15112).l,a5			; a5 - DREQ FIFO port
(1)   55/  882F26 :                     ; 		move.w	d0,d6				; Length in bytes
(1)   56/  882F26 :                     ; 		lsr.w	#1,d6				; d6 - (length/2)
(1)   57/  882F26 :                     ; 		move.w	#0,(sysmars_reg+dreqctl).l	; Clear both 68S and RV
(1)   58/  882F26 :                     ; 		move.w	d6,(sysmars_reg+dreqlen).l	; Set transfer length (size/2)
(1)   59/  882F26 :                     ; 		bset	#2,(sysmars_reg+dreqctl+1).l	; Set 68S bit
(1)   60/  882F26 :                     ; 		bset	#0,(sysmars_reg+standby).l	; Request Master CMD
(1)   61/  882F26 :                     ; ; .wait_cmd:	btst	#0,(sysmars_reg+standby).l	; <-- not needed, we'll use this bit instead:
(1)   62/  882F26 :                     ; ; 		bne.s	.wait_cmd
(1)   63/  882F26 :                     ; .wait_bit:	btst	#6,(sysmars_reg+comm12).l	; Wait comm bit signal from SH2 to fill the first words.
(1)   64/  882F26 :                     ; 		beq.s	.wait_bit
(1)   65/  882F26 :                     ; 		bclr	#6,(sysmars_reg+comm12).l	; Clear it afterwards.
(1)   66/  882F26 :                     ; 		move.w	d6,d5				; (length/2)/4
(1)   67/  882F26 :                     ; 		lsr.w	#2,d5
(1)   68/  882F26 :                     ; 		sub.w	#1,d5				; minus 1 for the loop
(1)   69/  882F26 :                     ; .l0:		move.w  (a0)+,(a5)
(1)   70/  882F26 :                     ; 		move.w  (a0)+,(a5)
(1)   71/  882F26 :                     ; 		move.w  (a0)+,(a5)
(1)   72/  882F26 :                     ; 		move.w  (a0)+,(a5)			; FIFO-FULL check not needed.
(1)   73/  882F26 :                     ; 		dbf	d5,.l0
(1)   74/  882F26 :                     ; .bad_trnsfr:
(1)   75/  882F26 :                     ; 		move.w	d7,sr
(1)   76/  882F26 :                     ; 		rts
(1)   77/  882F26 :                     
      95/  882F26 :                     Z80_CODE:	include "system/md/z_driver.asm"
(1)    1/  882F26 :                     ; --------------------------------------------------------
(1)    2/  882F26 :                     ; GEMA sound driver, inspired by GEMS (kinda)
(1)    3/  882F26 :                     ;
(1)    4/  882F26 :                     ; Two playable track slots: BGM(0) and SFX(1)
(1)    5/  882F26 :                     ;
(1)    6/  882F26 :                     ; Slot 1 can either overwrite chip channels or
(1)    7/  882F26 :                     ; if possible grab unused slots
(1)    8/  882F26 :                     ;
(1)    9/  882F26 :                     ; WARNING: DAC sample playback has to be sync'd manually
(1)   10/  882F26 :                     ; on every code change, sample rate is at the
(1)   11/  882F26 :                     ; 18000hz range
(1)   12/  882F26 :                     ; --------------------------------------------------------
(1)   13/  882F26 :                     
(1)   14/  882F26 :                     Z80_TOP:
(1)   15/  882F26 :                     		cpu Z80			; Enter Z80
(1)   16/       0 :                     		phase 0			; And set PC to 0
(1)   17/       0 :                     
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     ; User settings
(1)   20/       0 :                     ; --------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =11H                MAX_TRKCHN	equ 17		; Max internal tracker channels (4PSG + 6FM + 7PWM)
(1)   23/       0 : =FFFFFFFFFFF..      ZSET_WTUNE	equ -27		; Manual frequency adjustment for DAC WAVE playback
(1)   24/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear" test the DAC playback
(1)   25/       0 : =13H                MAX_INS		equ 19
(1)   26/       0 :                     
(1)   27/       0 :                     ; --------------------------------------------------------
(1)   28/       0 :                     ; Structs
(1)   29/       0 :                     ;
(1)   30/       0 :                     ; NOTE: struct doesn't work here. use equs instead
(1)   31/       0 :                     ; --------------------------------------------------------
(1)   32/       0 :                     
(1)   33/       0 :                     ; trkBuff struct
(1)   34/       0 :                     ; LIMIT: 20h (32) bytes
(1)   35/       0 : =0H                 trk_romBlk	equ 00h	; 24-bit base block data
(1)   36/       0 : =3H                 trk_romPatt	equ 03h	; 24-bit base patt data
(1)   37/       0 : =6H                 trk_romIns	equ 06h	; 24-bit ROM instrument pointers
(1)   38/       0 : =9H                 trk_romPattRd	equ 09h	; same but for reading
(1)   39/       0 : =CH                 trk_Read	equ 0Ch	; Current track position (in our storage)
(1)   40/       0 : =EH                 trk_Rows	equ 0Eh	; Current track length
(1)   41/       0 : =10H                trk_Halfway	equ 10h	; Only 00h or 80h
(1)   42/       0 : =11H                trk_currBlk	equ 11h	; Current block
(1)   43/       0 : =12H                trk_setBlk	equ 12h	; Start on this block
(1)   44/       0 : =13H                trk_status	equ 13h	; %ERPB Sxxx | E-enabled / R-Init|Restart track / P-refill-on-playback / B-use global beats / S-silence
(1)   45/       0 : =14H                trk_tickTmr	equ 14h	; Ticks timer
(1)   46/       0 : =15H                trk_tickSet	equ 15h	; Ticks set for this track
(1)   47/       0 : =16H                trk_sizeIns	equ 16h	; Max instrument storage
(1)   48/       0 : =17H                trk_rowPause	equ 17h	; Row pause timer
(1)   49/       0 : =18H                trk_CachNotes	equ 18h	; Pointer to track storage (100h bytes long and aligned)
(1)   50/       0 : =1AH                trk_CmdReq	equ 1Ah	; Track command requests
(1)   51/       0 :                     
(1)   52/       0 :                     ; Tracker channel data, 8 bytes each.
(1)   53/       0 : =0H                 chnl_Chip	equ 0		; *** MUST BE AT 0 ***
(1)   54/       0 : =1H                 chnl_Flags	equ 1		; playback requests and other specific bits
(1)   55/       0 : =2H                 chnl_Note	equ 2
(1)   56/       0 : =3H                 chnl_Ins	equ 3
(1)   57/       0 : =4H                 chnl_Vol	equ 4
(1)   58/       0 : =5H                 chnl_EffId	equ 5
(1)   59/       0 : =6H                 chnl_EffArg	equ 6
(1)   60/       0 : =7H                 chnl_Type	equ 7		; Impulse-note bits
(1)   61/       0 :                     
(1)   62/       0 :                     ; --------------------------------------------------------
(1)   63/       0 :                     ; Variables
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     
(1)   66/       0 :                     ; To brute force DAC playback
(1)   67/       0 :                     ; on or off
(1)   68/       0 : =0H                 zopcNop		equ	00h
(1)   69/       0 : =8H                 zopcEx		equ	08h
(1)   70/       0 : =C9H                zopcRet		equ 	0C9h
(1)   71/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)   72/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)   73/       0 :                     
(1)   74/       0 :                     ; PSG external control
(1)   75/       0 : =0H                 COM		equ	0
(1)   76/       0 : =4H                 LEV		equ	4
(1)   77/       0 : =8H                 ATK		equ	8
(1)   78/       0 : =CH                 DKY		equ	12
(1)   79/       0 : =10H                SLV		equ	16
(1)   80/       0 : =14H                RRT		equ	20
(1)   81/       0 : =18H                MODE		equ	24
(1)   82/       0 : =1CH                DTL		equ	28
(1)   83/       0 : =20H                DTH		equ	32
(1)   84/       0 : =24H                ALV		equ	36
(1)   85/       0 : =28H                FLG		equ	40
(1)   86/       0 : =2CH                TMR		equ	44
(1)   87/       0 : =30H                PVOL		equ	48
(1)   88/       0 :                     
(1)   89/       0 :                     ; FMCOM		equ	0
(1)   90/       0 : =6H                 FMKEYS		equ	6
(1)   91/       0 : =CH                 FMVOL		equ	12
(1)   92/       0 : =12H                FMPAN 		equ	18
(1)   93/       0 : =18H                FMFRQH		equ	24
(1)   94/       0 : =1EH                FMFRQL		equ	30
(1)   95/       0 :                     
(1)   96/       0 : =0H                 PWCOM		equ	0
(1)   97/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (%VVVVVVPP)
(1)   98/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)   99/       0 : =18H                PWOUTF		equ	24	; Output mode/bits + SH2 section (ROM $02 or SDRAM $06)
(1)  100/       0 : =20H                PWINSH		equ	32	; 24-bit sample address
(1)  101/       0 : =28H                PWINSM		equ	40
(1)  102/       0 : =30H                PWINSL		equ	48
(1)  103/       0 :                     
(1)  104/       0 :                     ; ====================================================================
(1)  105/       0 :                     ; --------------------------------------------------------
(1)  106/       0 :                     ; Code starts here
(1)  107/       0 :                     ; --------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 : F3                  		di			; Disable interrputs
(1)  110/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  111/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  112/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  113/       8 :                     
(1)  114/       8 :                     ; --------------------------------------------------------
(1)  115/       8 :                     ; RST 8 (dac_me)
(1)  116/       8 :                     ; *** self-modifiable code ***
(1)  117/       8 :                     ;
(1)  118/       8 :                     ; Writes wave data to DAC using the data stored
(1)  119/       8 :                     ; on the wave buffer. call this routine every 6
(1)  120/       8 :                     ; or more lines of code to keep playing the sample
(1)  121/       8 :                     ; at the desired sample rate while processing code
(1)  122/       8 :                     ;
(1)  123/       8 :                     ; Input (EXX):
(1)  124/       8 :                     ;  c - WAVE buffer MSB
(1)  125/       8 :                     ; de - Pitch (xx.00)
(1)  126/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  127/       8 :                     ;
(1)  128/       8 :                     ; Uses (EXX):
(1)  129/       8 :                     ; b
(1)  130/       8 :                     ;
(1)  131/       8 :                     ; Notes:
(1)  132/       8 :                     ; call dac_on to enable WAVE playback
(1)  133/       8 :                     ; or
(1)  134/       8 :                     ; call dac_off to disable it (check for FM6 manually)
(1)  135/       8 :                     ; --------------------------------------------------------
(1)  136/       8 :                     
(1)  137/       8 :                     ; NOTE: This plays at 18000hz but we are using
(1)  138/       8 :                     ; 16000hz as the "center" note (C-5)
(1)  139/       8 :                     ; check ZSET_WTUNE if you want change the
(1)  140/       8 :                     ; "center" frequency.
(1)  141/       8 :                     
(1)  142/       8 : (MACRO)             		org 8
(1)  143/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  144/       9 : 08                  		ex	af,af'		; Swap af
(1)  145/       A : 45                  		ld	b,l		; Save pitch's .00 to b
(1)  146/       B : 3E 2A               		ld	a,2Ah		; YM register command 2Ah
(1)  147/       D : 32 00 40            		ld	(Zym_ctrl_1),a
(1)  148/      10 : 6C                  		ld	l,h		; L - xx.00 to 00xx
(1)  149/      11 : 61                  		ld	h,c		; H - Wave buffer MSB | 00xx
(1)  150/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  151/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  152/      16 : 65                  		ld	h,l		; get hl back
(1)  153/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  154/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  155/      19 : 08                  		ex	af,af'		; return af
(1)  156/      1A : D9                  		exx
(1)  157/      1B : C9                  		ret
(1)  158/      1C :                     
(1)  159/      1C :                     ; --------------------------------------------------------
(1)  160/      1C :                     
(1)  161/      1C : 00                  commZRomBlk	db 0			; 68k ROM block flag
(1)  162/      1D : 00                  commZRomRd	db 0			; Z80 ROM reading flag
(1)  163/      1E : 00                  commZRead	db 0			; cmd read pointer (here)
(1)  164/      1F : 00                  commZWrite	db 0			; cmd fifo wptr (from 68k)
(1)  165/      20 :                     
(1)  166/      20 :                     ; --------------------------------------------------------
(1)  167/      20 :                     ; RST 20h (dac_me)
(1)  168/      20 :                     ; *** self-modifiable code ***
(1)  169/      20 :                     ;
(1)  170/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  171/      20 :                     ; it playing.
(1)  172/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL IS REQUESTED ***
(1)  173/      20 :                     ; --------------------------------------------------------
(1)  174/      20 :                     
(1)  175/      20 : (MACRO)             		org 20h
(1)  176/      20 : F5                  dac_fill:	push	af		; <-- this changes between PUSH AF(playing) and RET(stopped)
(1)  177/      21 : 3A 5D 1E            		ld	a,(dDacFifoMid)	; a - Get current wavebuffer LSB (00h or 80h)
(1)  178/      24 : D9                  		exx
(1)  179/      25 : AC                  		xor	h		; 00xx.00
(1)  180/      26 : D9                  		exx
(1)  181/      27 : E6 80               		and	80h		; Check if bit changed
(1)  182/      29 : C2 73 13            		jp	nz,dac_refill	; If it did, refill and update LSB to check
(1)  183/      2C : F1                  		pop	af
(1)  184/      2D : C9                  		ret
(1)  185/      2E :                     
(1)  186/      2E :                     ; --------------------------------------------------------
(1)  187/      2E :                     
(1)  188/      2E : 00                  marsBlock	db 0		; flag to temporally disable PWM communication
(1)  189/      2F : 00                  currTickBits	db 0		; Current Tick/Tempo bitflags (000000BTb B-beat, T-tick)
(1)  190/      30 : 00                  marsUpd		db 0		; flag to request a PWM transfer
(1)  191/      31 : 00                  palMode		db 0		; PAL speed flag (TODO)
(1)  192/      32 : 90 00               sbeatPtck_1	dw 200-56	; Global tempo (sub beats) (-32 for PAL)
(1)  193/      34 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  194/      36 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1)  195/      37 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1)  196/      38 :                     
(1)  197/      38 :                     ; --------------------------------------------------------
(1)  198/      38 :                     ; Z80 Interrupt at 0038h
(1)  199/      38 :                     ; --------------------------------------------------------
(1)  200/      38 :                     
(1)  201/      38 : (MACRO)             		org 38h				; Align 38h
(1)  202/      38 : ED 73 48 1E         		ld	(tickFlag),sp		; Use sp to set the TICK flag (xx1F, read as tickFlag+1)
(1)  203/      3C : F3                  		di				; Disable interrupt
(1)  204/      3D : C9                  		ret
(1)  205/      3E :                     
(1)  206/      3E :                     ; --------------------------------------------------------
(1)  207/      3E :                     ; Initilize
(1)  208/      3E :                     ; --------------------------------------------------------
(1)  209/      3E :                     
(1)  210/      3E :                     z80_init:
(1)  211/      3E : CD 3A 0E            		call	gema_init		; Initilize VBLANK sound driver
(1)  212/      41 : FB                  		ei
(1)  213/      42 :                     
(1)  214/      42 :                     ; --------------------------------------------------------
(1)  215/      42 :                     ; MAIN LOOP
(1)  216/      42 :                     ; --------------------------------------------------------
(1)  217/      42 :                     
(1)  218/      42 :                     drv_loop:
(1)  219/      42 : CF                  		rst	8
(1)  220/      43 : CD A8 0E            		call	get_tick		; Check for Tick on VBlank
(1)  221/      46 : E7                  		rst	20h			; first dacfill
(1)  222/      47 : CF                  		rst	8
(1)  223/      48 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  224/      4A : 3A 4A 1E            		ld	a,(tickCnt)
(1)  225/      4D : D6 01               		sub	1
(1)  226/      4F : 38 0C               		jr	c,.noticks
(1)  227/      51 : 32 4A 1E            		ld	(tickCnt),a
(1)  228/      54 : CF                  		rst	8
(1)  229/      55 : CD B2 0F            		call	chip_env		; Process PSG volume and freqs manually
(1)  230/      58 : CD A8 0E            		call	get_tick		; Check for another tick
(1)  231/      5B : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  232/      5D :                     .noticks:
(1)  233/      5D : 3A 35 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  234/      60 : D6 01               		sub	1
(1)  235/      62 : 38 06               		jr	c,.nobeats
(1)  236/      64 : 32 35 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  237/      67 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  238/      69 : CF                  		rst	8
(1)  239/      6A :                     .nobeats:
(1)  240/      6A : CF                  		rst	8
(1)  241/      6B : 78                  		ld	a,b			; Any beat/tick change?
(1)  242/      6C : B7                  		or	a
(1)  243/      6D : 28 13               		jr	z,.neither
(1)  244/      6F : 32 2F 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  245/      72 : CD A8 0E            		call	get_tick
(1)  246/      75 : CD 57 05            		call	setupchip		; Send changes to sound chips
(1)  247/      78 : CD A8 0E            		call	get_tick
(1)  248/      7B : CD DA 01            		call	updtrack		; Update track data
(1)  249/      7E : CD A8 0E            		call	get_tick
(1)  250/      81 : CF                  		rst	8
(1)  251/      82 :                     .neither:
(1)  252/      82 : CD C8 04            		call	mars_scomm		; 32X communication for PWM playback
(1)  253/      85 : CD A8 0E            		call	get_tick
(1)  254/      88 : CF                  		rst	8
(1)  255/      89 :                     .next_cmd:
(1)  256/      89 : 3A 1F 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  257/      8C : 47                  		ld	b,a
(1)  258/      8D : 3A 1E 00            		ld	a,(commZRead)
(1)  259/      90 : B8                  		cp	b
(1)  260/      91 : 28 AF               		jr	z,drv_loop		; If both are equal: no requests
(1)  261/      93 : E7                  		rst	20h			; first dacfill
(1)  262/      94 : CF                  		rst	8
(1)  263/      95 : CD B9 01            		call	get_cmdbyte
(1)  264/      98 : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  265/      9A : 20 A6               		jr	nz,drv_loop
(1)  266/      9C : CD B9 01            		call	get_cmdbyte		; Read command number
(1)  267/      9F : 87                  		add	a,a			; * 2
(1)  268/      A0 : 21 AE 00            		ld	hl,.list		; Then jump to one of these...
(1)  269/      A3 : CF                  		rst	8
(1)  270/      A4 : 16 00               		ld	d,0
(1)  271/      A6 : 5F                  		ld	e,a
(1)  272/      A7 : 19                  		add	hl,de
(1)  273/      A8 : 7E                  		ld	a,(hl)
(1)  274/      A9 : CF                  		rst	8
(1)  275/      AA : 23                  		inc	hl
(1)  276/      AB : 66                  		ld	h,(hl)
(1)  277/      AC : 6F                  		ld	l,a
(1)  278/      AD : E9                  		jp	(hl)
(1)  279/      AE :                     .list:
(1)  280/      AE : F2 00               		dw .cmnd_trkplay		; $00 - Play
(1)  281/      B0 : 55 01               		dw .cmnd_trkstop		; $01 - Stop/Pause
(1)  282/      B2 : 70 01               		dw .cmnd_trkresume		; $02 - Resume
(1)  283/      B4 : EE 00               		dw .cmnd_0			; $03 -
(1)  284/      B6 : EE 00               		dw .cmnd_0			; $04 -
(1)  285/      B8 : EE 00               		dw .cmnd_0			; $05 -
(1)  286/      BA : EE 00               		dw .cmnd_0			; $06 -
(1)  287/      BC : EE 00               		dw .cmnd_0			; $07 -
(1)  288/      BE : 7D 01               		dw .cmnd_trkticks		; $08 - Set ticks
(1)  289/      C0 : EE 00               		dw .cmnd_0			; $09 -
(1)  290/      C2 : EE 00               		dw .cmnd_0			; $0A -
(1)  291/      C4 : EE 00               		dw .cmnd_0			; $0B -
(1)  292/      C6 : EE 00               		dw .cmnd_0			; $0C -
(1)  293/      C8 : EE 00               		dw .cmnd_0			; $0D -
(1)  294/      CA : EE 00               		dw .cmnd_0			; $0E -
(1)  295/      CC : EE 00               		dw .cmnd_0			; $0F -
(1)  296/      CE : 8F 01               		dw .cmnd_trktempo		; $10 - Set global subbeats
(1)  297/      D0 : EE 00               		dw .cmnd_0
(1)  298/      D2 : EE 00               		dw .cmnd_0
(1)  299/      D4 : EE 00               		dw .cmnd_0
(1)  300/      D6 : EE 00               		dw .cmnd_0			; $14
(1)  301/      D8 : EE 00               		dw .cmnd_0
(1)  302/      DA : EE 00               		dw .cmnd_0
(1)  303/      DC : EE 00               		dw .cmnd_0
(1)  304/      DE : EE 00               		dw .cmnd_0			; $18
(1)  305/      E0 : EE 00               		dw .cmnd_0
(1)  306/      E2 : EE 00               		dw .cmnd_0
(1)  307/      E4 : EE 00               		dw .cmnd_0
(1)  308/      E6 : EE 00               		dw .cmnd_0			; $1C
(1)  309/      E8 : EE 00               		dw .cmnd_0
(1)  310/      EA : EE 00               		dw .cmnd_0
(1)  311/      EC : EE 00               		dw .cmnd_0
(1)  312/      EE :                     
(1)  313/      EE :                     ; --------------------------------------------------------
(1)  314/      EE :                     ; Command list
(1)  315/      EE :                     ; --------------------------------------------------------
(1)  316/      EE :                     
(1)  317/      EE :                     .cmnd_0:
(1)  318/      EE : 18 FE               		jr	$			; BAD COMMAND
(1)  319/      F0 : 18 97               		jr	.next_cmd
(1)  320/      F2 :                     
(1)  321/      F2 :                     ; --------------------------------------------------------
(1)  322/      F2 :                     ; $01 - Set NEW track
(1)  323/      F2 :                     ; --------------------------------------------------------
(1)  324/      F2 :                     
(1)  325/      F2 :                     ; Slot
(1)  326/      F2 :                     ; Ticks
(1)  327/      F2 :                     ; 24-bit patt data
(1)  328/      F2 :                     ; 24-bit block data
(1)  329/      F2 :                     .cmnd_trkplay:
(1)  330/      F2 : CD B9 01            		call	get_cmdbyte		; Get track slot
(1)  331/      F5 : CD A4 01            		call	get_trkindx		; and read index iy
(1)  332/      F8 : CD 9D 04            		call	track_out		; track out.
(1)  333/      FB : FD 36 1A FE         		ld	(iy+trk_CmdReq),-2
(1)  334/      FF : CD B9 01            		call	get_cmdbyte		; Get ticks
(1)  335/     102 : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  336/     105 : CD B9 01            		call	get_cmdbyte		; Start block
(1)  337/     108 : FD 77 12            		ld	(iy+trk_setBlk),a
(1)  338/     10B : CD B9 01            		call	get_cmdbyte		; Flag bits
(1)  339/     10E : F6 C0               		or	11000000b		; Enable + First fill bits
(1)  340/     110 : FD 77 13            		ld	(iy+trk_status),a
(1)  341/     113 : CD B9 01            		call	get_cmdbyte		; Pattern data
(1)  342/     116 : FD 77 03            		ld	(iy+trk_romPatt),a
(1)  343/     119 : CD B9 01            		call	get_cmdbyte
(1)  344/     11C : FD 77 04            		ld	(iy+(trk_romPatt+1)),a
(1)  345/     11F : CD B9 01            		call	get_cmdbyte
(1)  346/     122 : FD 77 05            		ld	(iy+(trk_romPatt+2)),a
(1)  347/     125 : CD B9 01            		call	get_cmdbyte		; Block data
(1)  348/     128 : FD 77 00            		ld	(iy+trk_romBlk),a
(1)  349/     12B : CD B9 01            		call	get_cmdbyte
(1)  350/     12E : FD 77 01            		ld	(iy+(trk_romBlk+1)),a
(1)  351/     131 : CD B9 01            		call	get_cmdbyte
(1)  352/     134 : CD A8 0E            		call	get_tick
(1)  353/     137 : FD 77 02            		ld	(iy+(trk_romBlk+2)),a
(1)  354/     13A : CD B9 01            		call	get_cmdbyte		; Instrument data
(1)  355/     13D : FD 77 06            		ld	(iy+trk_romIns),a
(1)  356/     140 : CD B9 01            		call	get_cmdbyte
(1)  357/     143 : FD 77 07            		ld	(iy+(trk_romIns+1)),a
(1)  358/     146 : CD B9 01            		call	get_cmdbyte
(1)  359/     149 : FD 77 08            		ld	(iy+(trk_romIns+2)),a
(1)  360/     14C : 3E 01               		ld	a,1
(1)  361/     14E : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  362/     151 : CF                  		rst	8
(1)  363/     152 : C3 89 00            		jp	.next_cmd
(1)  364/     155 :                     
(1)  365/     155 :                     ; --------------------------------------------------------
(1)  366/     155 :                     ; $02 - Stop/Pause track
(1)  367/     155 :                     ; --------------------------------------------------------
(1)  368/     155 :                     
(1)  369/     155 :                     .cmnd_trkstop:
(1)  370/     155 : CD B9 01            		call	get_cmdbyte		; Get track slot
(1)  371/     158 : CD A4 01            		call	get_trkindx		; and read index iy
(1)  372/     15B : FD CB 13 7E         		bit	7,(iy+trk_status)	; This track is active?
(1)  373/     15F : CA 89 00            		jp	z,.next_cmd
(1)  374/     162 : CD 9D 04            		call	track_out		; track out.
(1)  375/     165 : FD 36 1A FF         		ld	(iy+trk_CmdReq),-1
(1)  376/     169 : FD CB 13 FE         		set	7,(iy+trk_status)
(1)  377/     16D : C3 89 00            		jp	.next_cmd
(1)  378/     170 :                     
(1)  379/     170 :                     ; --------------------------------------------------------
(1)  380/     170 :                     ; $03 - Resume track
(1)  381/     170 :                     ;
(1)  382/     170 :                     ; TODO: This doesn't work right. but I'm leaving
(1)  383/     170 :                     ; it here just in case.
(1)  384/     170 :                     ; --------------------------------------------------------
(1)  385/     170 :                     
(1)  386/     170 :                     .cmnd_trkresume:
(1)  387/     170 : CD B9 01            		call	get_cmdbyte		; Get track slot
(1)  388/     173 : CD A4 01            		call	get_trkindx		; and read index iy
(1)  389/     176 : FD CB 13 FE         		set	7,(iy+trk_status)	; Slot ON
(1)  390/     17A : C3 89 00            		jp	.next_cmd
(1)  391/     17D :                     
(1)  392/     17D :                     ; --------------------------------------------------------
(1)  393/     17D :                     ; $08 - Set track's ticks
(1)  394/     17D :                     ; --------------------------------------------------------
(1)  395/     17D :                     
(1)  396/     17D :                     .cmnd_trkticks:
(1)  397/     17D : CD B9 01            		call	get_cmdbyte		; Get track slot
(1)  398/     180 : CD A4 01            		call	get_trkindx		; and read index iyc
(1)  399/     183 : CD B9 01            		call	get_cmdbyte
(1)  400/     186 : FD 77 15            		ld	(iy+trk_tickSet),a
(1)  401/     189 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  402/     18C : C3 89 00            		jp	.next_cmd
(1)  403/     18F :                     
(1)  404/     18F :                     ; --------------------------------------------------------
(1)  405/     18F :                     ; $10 - Set global tempo
(1)  406/     18F :                     ; --------------------------------------------------------
(1)  407/     18F :                     
(1)  408/     18F :                     .cmnd_trktempo:
(1)  409/     18F : CD B9 01            		call	get_cmdbyte		; Get track slot
(1)  410/     192 : CD A4 01            		call	get_trkindx		; and read index iyc
(1)  411/     195 : CD B9 01            		call	get_cmdbyte
(1)  412/     198 : 32 32 00            		ld	(sbeatPtck_1),a
(1)  413/     19B : CD B9 01            		call	get_cmdbyte
(1)  414/     19E : 32 33 00            		ld	(sbeatPtck_1+1),a
(1)  415/     1A1 : C3 89 00            		jp	.next_cmd
(1)  416/     1A4 :                     
(1)  417/     1A4 :                     ; --------------------------------------------------------
(1)  418/     1A4 :                     ; Pick track buffer
(1)  419/     1A4 :                     ;
(1)  420/     1A4 :                     ; a - track index
(1)  421/     1A4 :                     ; --------------------------------------------------------
(1)  422/     1A4 :                     
(1)  423/     1A4 :                     get_trkindx:
(1)  424/     1A4 : 21 B5 01            		ld	hl,trkPointers
(1)  425/     1A7 : 87                  		add	a,a
(1)  426/     1A8 : 16 00               		ld	d,0
(1)  427/     1AA : 5F                  		ld	e,a
(1)  428/     1AB : CF                  		rst	8
(1)  429/     1AC : 19                  		add	hl,de
(1)  430/     1AD : 7E                  		ld	a,(hl)
(1)  431/     1AE : 23                  		inc	hl
(1)  432/     1AF : 66                  		ld	h,(hl)
(1)  433/     1B0 : 6F                  		ld	l,a
(1)  434/     1B1 : E5                  		push	hl
(1)  435/     1B2 : FD E1               		pop	iy
(1)  436/     1B4 : C9                  		ret
(1)  437/     1B5 :                     trkPointers:
(1)  438/     1B5 : 8A 19               		dw trkBuff_0
(1)  439/     1B7 : 32 1A               		dw trkBuff_1
(1)  440/     1B9 :                     
(1)  441/     1B9 :                     ; --------------------------------------------------------
(1)  442/     1B9 :                     ; Read cmd byte, auto re-aligns to 7Fh
(1)  443/     1B9 :                     ; --------------------------------------------------------
(1)  444/     1B9 :                     
(1)  445/     1B9 :                     get_cmdbyte:
(1)  446/     1B9 : C5                  		push	bc
(1)  447/     1BA : D5                  		push	de
(1)  448/     1BB : E5                  		push	hl
(1)  449/     1BC :                     .getcbytel:
(1)  450/     1BC : 3A 1F 00            		ld	a,(commZWrite)
(1)  451/     1BF : 47                  		ld	b,a
(1)  452/     1C0 : 3A 1E 00            		ld	a,(commZRead)
(1)  453/     1C3 : B8                  		cp	b
(1)  454/     1C4 : 28 F6               		jr	z,.getcbytel	; wait for a command from 68k
(1)  455/     1C6 : CF                  		rst	8
(1)  456/     1C7 : 06 00               		ld	b,0
(1)  457/     1C9 : 4F                  		ld	c,a
(1)  458/     1CA : 21 00 1E            		ld	hl,commZfifo
(1)  459/     1CD : 09                  		add	hl,bc
(1)  460/     1CE : 3C                  		inc	a
(1)  461/     1CF : E6 3F               		and	3Fh		; command list limit
(1)  462/     1D1 : CF                  		rst	8
(1)  463/     1D2 : 32 1E 00            		ld	(commZRead),a
(1)  464/     1D5 : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  465/     1D6 : E1                  		pop	hl
(1)  466/     1D7 : D1                  		pop	de
(1)  467/     1D8 : C1                  		pop	bc
(1)  468/     1D9 : C9                  		ret
(1)  469/     1DA :                     
(1)  470/     1DA :                     ; ====================================================================
(1)  471/     1DA :                     ; ----------------------------------------------------------------
(1)  472/     1DA :                     ; Sound playback code
(1)  473/     1DA :                     ; ----------------------------------------------------------------
(1)  474/     1DA :                     
(1)  475/     1DA :                     ; --------------------------------------------------------
(1)  476/     1DA :                     ; Read track data
(1)  477/     1DA :                     ; --------------------------------------------------------
(1)  478/     1DA :                     
(1)  479/     1DA :                     updtrack:
(1)  480/     1DA : E7                  		rst	20h
(1)  481/     1DB : FD 21 8A 19         		ld	iy,trkBuff_0		; BGM
(1)  482/     1DF : CF                  		rst	8
(1)  483/     1E0 : 11 55 18            		ld	de,insDataC_0
(1)  484/     1E3 : CD F2 01            		call	.read_track
(1)  485/     1E6 : FD 21 32 1A         		ld	iy,trkBuff_1		; SFX
(1)  486/     1EA : 11 ED 18            		ld	de,insDataC_1
(1)  487/     1ED : CF                  		rst	8
(1)  488/     1EE : CD F2 01            		call	.read_track
(1)  489/     1F1 : C9                  		ret
(1)  490/     1F2 :                     
(1)  491/     1F2 :                     ; ----------------------------------------
(1)  492/     1F2 :                     ; Read current track
(1)  493/     1F2 :                     ;
(1)  494/     1F2 :                     ; iy - Track control
(1)  495/     1F2 :                     ; ix - Track channels
(1)  496/     1F2 :                     ; de - Instrument CACHE point
(1)  497/     1F2 :                     ; ----------------------------------------
(1)  498/     1F2 :                     
(1)  499/     1F2 :                     .read_track:
(1)  500/     1F2 : FD 46 13            		ld	b,(iy+trk_status)	; b - Track status
(1)  501/     1F5 : CB 78               		bit	7,b			; Active?
(1)  502/     1F7 : C8                  		ret	z
(1)  503/     1F8 : FD 7E 1A            		ld	a,(iy+trk_CmdReq)	; Any mid-request?
(1)  504/     1FB : B7                  		or	a
(1)  505/     1FC : C0                  		ret	nz
(1)  506/     1FD : ED 53 40 1E         		ld	(currInsData),de	; save temporal InsData
(1)  507/     201 : CF                  		rst	8
(1)  508/     202 : 3A 2F 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  509/     205 : CB 40               		bit	0,b			; This track uses Beats?
(1)  510/     207 : 28 03               		jr	z,.sfxmd		; Nope
(1)  511/     209 : CB 4F               		bit	1,a			; BEAT passed?
(1)  512/     20B : C8                  		ret	z
(1)  513/     20C :                     .sfxmd:
(1)  514/     20C : CB 47               		bit	0,a			; TICK passed?
(1)  515/     20E : C8                  		ret	z
(1)  516/     20F : FD 7E 14            		ld	a,(iy+trk_tickTmr)	; TICK timer for this track
(1)  517/     212 : 3D                  		dec	a
(1)  518/     213 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  519/     216 : CF                  		rst	8
(1)  520/     217 : B7                  		or	a
(1)  521/     218 : C0                  		ret	nz			; If != 0, exit
(1)  522/     219 : CB 68               		bit	5,b			; Effect-requested track set?
(1)  523/     21B : C4 1F 04            		call	nz,.effect_fill
(1)  524/     21E : CB 70               		bit	6,b			; Restart/First time?
(1)  525/     220 : C4 27 04            		call	nz,.first_fill
(1)  526/     223 : FD 7E 15            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  527/     226 : FD 77 14            		ld	(iy+trk_tickTmr),a
(1)  528/     229 : CF                  		rst	8
(1)  529/     22A : FD 6E 0C            		ld	l,(iy+trk_Read)		; hl - Pattern data to read in cache
(1)  530/     22D : FD 66 0D            		ld	h,(iy+((trk_Read+1)))
(1)  531/     230 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  532/     233 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(1)  533/     236 : 79                  		ld	a,c
(1)  534/     237 : B0                  		or	b
(1)  535/     238 : CC 79 03            		call	z,.next_track		; If rowtimer == 0, get next track data
(1)  536/     23B :                     ; 		cp	-1
(1)  537/     23B :                     ; 		ret	z
(1)  538/     23B :                     ; 		rst	8
(1)  539/     23B :                     
(1)  540/     23B :                     ; --------------------------------
(1)  541/     23B :                     ; Main reading loop
(1)  542/     23B :                     ; --------------------------------
(1)  543/     23B :                     
(1)  544/     23B :                     .next_note:
(1)  545/     23B : FD 7E 17            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  546/     23E : B7                  		or	a
(1)  547/     23F : 20 17               		jr	nz,.decrow
(1)  548/     241 : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  549/     242 : B7                  		or	a
(1)  550/     243 : 28 08               		jr	z,.exit			; If == 00h: exit
(1)  551/     245 : FA 64 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  552/     248 : FD 77 17            		ld	(iy+trk_rowPause),a
(1)  553/     24B : 18 00               		jr	.exit			; make row-timer, set hl+1
(1)  554/     24D :                     
(1)  555/     24D :                     ; --------------------------------
(1)  556/     24D :                     ; Exit
(1)  557/     24D :                     ; --------------------------------
(1)  558/     24D :                     
(1)  559/     24D :                     .exit:
(1)  560/     24D : CD 00 03            		call	.inc_cpatt
(1)  561/     250 : FD 75 0C            		ld	(iy+trk_Read),l		; Update read location
(1)  562/     253 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  563/     256 : 18 03               		jr	.decrow_e
(1)  564/     258 :                     .decrow:
(1)  565/     258 : FD 35 17            		dec	(iy+trk_rowPause)
(1)  566/     25B :                     .decrow_e:
(1)  567/     25B : CF                  		rst	8
(1)  568/     25C : 0B                  		dec	bc			; Decrement this row
(1)  569/     25D : FD 71 0E            		ld	(iy+trk_Rows),c		; And update it
(1)  570/     260 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(1)  571/     263 : C9                  		ret
(1)  572/     264 :                     
(1)  573/     264 :                     ; --------------------------------
(1)  574/     264 :                     ; New note request
(1)  575/     264 :                     ; --------------------------------
(1)  576/     264 :                     
(1)  577/     264 :                     .has_note:
(1)  578/     264 : C5                  		push	bc			; Save rowcount
(1)  579/     265 : 4F                  		ld	c,a			; c - Copy of control+channel
(1)  580/     266 : CD 00 03            		call	.inc_cpatt
(1)  581/     269 : 79                  		ld	a,c
(1)  582/     26A : FD E5               		push	iy
(1)  583/     26C : DD E1               		pop	ix
(1)  584/     26E : 11 20 00            		ld	de,20h			; Point to track-data
(1)  585/     271 : DD 19               		add	ix,de
(1)  586/     273 : CF                  		rst	8
(1)  587/     274 : E6 3F               		and	00111111b
(1)  588/     276 :                     ; 		cp	(iy+trk_numChnls)	; TODO: mala idea.
(1)  589/     276 :                     ; 		jp	nc,.rnout_chnls
(1)  590/     276 : 87                  		add	a,a			; * 8
(1)  591/     277 : 87                  		add	a,a
(1)  592/     278 : 87                  		add	a,a
(1)  593/     279 : 16 00               		ld 	d,0
(1)  594/     27B : 5F                  		ld	e,a
(1)  595/     27C : DD 19               		add	ix,de
(1)  596/     27E : CF                  		rst	8
(1)  597/     27F : DD 46 07            		ld	b,(ix+chnl_Type)	; b - last Note type
(1)  598/     282 : CB 71               		bit	6,c			; Next byte is new type?
(1)  599/     284 : 28 06               		jr	z,.old_type
(1)  600/     286 : 7E                  		ld	a,(hl)
(1)  601/     287 : DD 77 07            		ld	(ix+chnl_Type),a
(1)  602/     28A : 47                  		ld	b,a
(1)  603/     28B : 2C                  		inc 	l
(1)  604/     28C :                     .old_type:
(1)  605/     28C :                     	; b - evinEVIN
(1)  606/     28C :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  607/     28C :                     	;     evin: byte is already stored on track-channel buffer
(1)  608/     28C :                     	;     EVIN: next byte(s) contain a new value, for eff:2 bytes
(1)  609/     28C : CF                  		rst	8
(1)  610/     28D : CB 40               		bit	0,b
(1)  611/     28F : 28 07               		jr	z,.no_note
(1)  612/     291 : 7E                  		ld	a,(hl)
(1)  613/     292 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  614/     295 : CD 00 03            		call	.inc_cpatt
(1)  615/     298 :                     .no_note:
(1)  616/     298 : CB 48               		bit	1,b
(1)  617/     29A : 28 07               		jr	z,.no_ins
(1)  618/     29C : 7E                  		ld	a,(hl)
(1)  619/     29D : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  620/     2A0 : CD 00 03            		call	.inc_cpatt
(1)  621/     2A3 :                     .no_ins:
(1)  622/     2A3 : CF                  		rst	8
(1)  623/     2A4 : CB 50               		bit	2,b
(1)  624/     2A6 : 28 07               		jr	z,.no_vol
(1)  625/     2A8 : 7E                  		ld	a,(hl)
(1)  626/     2A9 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  627/     2AC : CD 00 03            		call	.inc_cpatt
(1)  628/     2AF :                     .no_vol:
(1)  629/     2AF : CB 58               		bit	3,b
(1)  630/     2B1 : 28 0E               		jr	z,.no_eff
(1)  631/     2B3 : 7E                  		ld	a,(hl)
(1)  632/     2B4 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  633/     2B7 : CD 00 03            		call	.inc_cpatt
(1)  634/     2BA : 7E                  		ld	a,(hl)
(1)  635/     2BB : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  636/     2BE : CD 00 03            		call	.inc_cpatt
(1)  637/     2C1 :                     .no_eff:
(1)  638/     2C1 : CF                  		rst	8
(1)  639/     2C2 : 78                  		ld	a,b			; Merge the Impulse recycle bits to main bits
(1)  640/     2C3 : CB 3F               		srl	a
(1)  641/     2C5 : CB 3F               		srl	a
(1)  642/     2C7 : CB 3F               		srl	a
(1)  643/     2C9 : CB 3F               		srl	a
(1)  644/     2CB : E6 0F               		and	00001111b
(1)  645/     2CD : 4F                  		ld	c,a
(1)  646/     2CE : CF                  		rst	8
(1)  647/     2CF : 78                  		ld	a,b
(1)  648/     2D0 : E6 0F               		and	00001111b
(1)  649/     2D2 : B1                  		or	c
(1)  650/     2D3 : 4F                  		ld	c,a
(1)  651/     2D4 : DD 7E 01            		ld	a,(ix+chnl_Flags)
(1)  652/     2D7 : B1                  		or	c
(1)  653/     2D8 : DD 77 01            		ld	(ix+chnl_Flags),a
(1)  654/     2DB : CF                  		rst	8
(1)  655/     2DC : C1                  		pop	bc			; Restore rowcount
(1)  656/     2DD :                     
(1)  657/     2DD :                     	; Check for effects that change things
(1)  658/     2DD :                     	; to internal playback (jump, tempo, etc.)
(1)  659/     2DD : E6 08               		and	1000b		; Filter EFFECT bit only
(1)  660/     2DF : B7                  		or	a
(1)  661/     2E0 : CA 3B 02            		jp	z,.next_note
(1)  662/     2E3 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  663/     2E6 : B7                  		or	a		; 00h = invalid effect
(1)  664/     2E7 : CA 3B 02            		jp	z,.next_note
(1)  665/     2EA : FE 01               		cp	1		; Effect A: Tick set
(1)  666/     2EC : CC 4A 03            		call	z,.eff_A
(1)  667/     2EF : FE 02               		cp	2		; Effect B: Position Jump
(1)  668/     2F1 : CC 54 03            		call	z,.eff_B
(1)  669/     2F4 : FE 03               		cp	3		; Effect C: Pattern break
(1)  670/     2F6 : CC 6E 03            		call	z,.eff_C
(1)  671/     2F9 : C3 3B 02            		jp	.next_note
(1)  672/     2FC :                     .rnout_chnls:
(1)  673/     2FC : C1                  		pop	bc
(1)  674/     2FD : C3 3B 02            		jp	.next_note
(1)  675/     300 :                     
(1)  676/     300 :                     ; ----------------------------------------
(1)  677/     300 :                     ; Call this to increment the
(1)  678/     300 :                     ; cache pattern read pointer (iy+trk_Read)
(1)  679/     300 :                     ; it also refills the next section to
(1)  680/     300 :                     ; read if needed.
(1)  681/     300 :                     ;
(1)  682/     300 :                     ; NOTE: breaks A
(1)  683/     300 :                     ; ----------------------------------------
(1)  684/     300 :                     
(1)  685/     300 :                     .inc_cpatt:
(1)  686/     300 : 2C                  		inc	l
(1)  687/     301 : FD 7E 13            		ld	a,(iy+trk_status)	; Increment-fill enabled?
(1)  688/     304 : E6 10               		and	00010000b
(1)  689/     306 : B7                  		or	a
(1)  690/     307 : C8                  		ret	z
(1)  691/     308 : CF                  		rst	8
(1)  692/     309 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(1)  693/     30C : AD                  		xor	l
(1)  694/     30D : E6 80               		and	080h			; Check for 00h/80h
(1)  695/     30F : C8                  		ret	z
(1)  696/     310 : CF                  		rst	8
(1)  697/     311 : 3A 1C 00            		ld	a,(commZRomBlk)		; Got mid-DMA?
(1)  698/     314 : B7                  		or	a
(1)  699/     315 : 28 06               		jr	z,.grab_asap
(1)  700/     317 : 7D                  		ld	a,l			; Last chance
(1)  701/     318 : E6 7F               		and	07Fh
(1)  702/     31A : FE 70               		cp	070h
(1)  703/     31C : D8                  		ret	c
(1)  704/     31D :                     .grab_asap:
(1)  705/     31D : E7                  		rst	20h			; refill request
(1)  706/     31E : FD 7E 10            		ld	a,(iy+trk_Halfway)	; +80h to halfway
(1)  707/     321 : 54                  		ld	d,h
(1)  708/     322 : 5F                  		ld	e,a
(1)  709/     323 : CF                  		rst	8
(1)  710/     324 : C6 80               		add 	a,080h
(1)  711/     326 : FD 77 10            		ld	(iy+trk_Halfway),a
(1)  712/     329 : E5                  		push	hl
(1)  713/     32A : C5                  		push	bc
(1)  714/     32B : 01 80 00            		ld	bc,80h			; 80h size + increment value
(1)  715/     32E : FD 6E 09            		ld	l,(iy+trk_romPattRd)
(1)  716/     331 : FD 66 0A            		ld	h,(iy+(trk_romPattRd+1))
(1)  717/     334 : CF                  		rst	8
(1)  718/     335 : FD 7E 0B            		ld	a,(iy+(trk_romPattRd+2))
(1)  719/     338 : 09                  		add	hl,bc
(1)  720/     339 : CE 00               		adc	a,0
(1)  721/     33B : FD 75 09            		ld	(iy+trk_romPattRd),l
(1)  722/     33E : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1)  723/     341 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1)  724/     344 : CD 17 0F            		call	transferRom
(1)  725/     347 : C1                  		pop	bc
(1)  726/     348 : E1                  		pop	hl
(1)  727/     349 : C9                  		ret
(1)  728/     34A :                     
(1)  729/     34A :                     ; ----------------------------------------
(1)  730/     34A :                     ; Effect A: Set ticks
(1)  731/     34A :                     ; ----------------------------------------
(1)  732/     34A :                     
(1)  733/     34A :                     .eff_A:
(1)  734/     34A : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  735/     34D : FD 73 15            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  736/     350 : FD 73 14            		ld	(iy+trk_tickTmr),e
(1)  737/     353 : C9                  		ret
(1)  738/     354 :                     
(1)  739/     354 :                     ; ----------------------------------------
(1)  740/     354 :                     ; Effect B: jump to a new block
(1)  741/     354 :                     ; ----------------------------------------
(1)  742/     354 :                     
(1)  743/     354 :                     .eff_B:
(1)  744/     354 : F5                  		push	af
(1)  745/     355 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  746/     358 : FD 73 11            		ld 	(iy+trk_currBlk),e
(1)  747/     35B : CF                  		rst	8
(1)  748/     35C : FD 36 17 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  749/     360 : DD 36 05 00         		ld	(ix+chnl_EffId),0	; (failsafe)
(1)  750/     364 : DD 36 06 00         		ld	(ix+chnl_EffArg),0
(1)  751/     368 : FD CB 13 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  752/     36C : F1                  		pop	af
(1)  753/     36D : C9                  		ret
(1)  754/     36E :                     
(1)  755/     36E :                     ; ----------------------------------------
(1)  756/     36E :                     ; Effect C: Pattern break/exit
(1)  757/     36E :                     ; ***Not exactly as in Impulse but
(1)  758/     36E :                     ; jumps to the next block
(1)  759/     36E :                     ;
(1)  760/     36E :                     ; If set to -1 it will end the track,
(1)  761/     36E :                     ; so you can put multiple SFX into the
(1)  762/     36E :                     ; track file and call them by block.
(1)  763/     36E :                     ; ----------------------------------------
(1)  764/     36E :                     
(1)  765/     36E :                     .eff_C:
(1)  766/     36E : 01 00 00            		ld	bc,0			; clear rowcount
(1)  767/     371 : DD 7E 06            		ld	a,(ix+chnl_EffArg)
(1)  768/     374 : FE FF               		cp	-1			; EffArg == -1?
(1)  769/     376 : CA 8B 04            		jp	z,.trkend_effC		; Use it as track-end (for SFX)
(1)  770/     379 :                     
(1)  771/     379 :                     ; ----------------------------------------
(1)  772/     379 :                     ; If pattern finished, load the next one
(1)  773/     379 :                     ; ----------------------------------------
(1)  774/     379 :                     
(1)  775/     379 :                     .next_track:
(1)  776/     379 : FD 7E 11            		ld	a,(iy+trk_currBlk)	; Increment next block
(1)  777/     37C : 3C                  		inc	a
(1)  778/     37D : FD 77 11            		ld 	(iy+trk_currBlk),a
(1)  779/     380 :                     
(1)  780/     380 :                     ; Load track data to cache
(1)  781/     380 :                     ; a - Block
(1)  782/     380 :                     ;
(1)  783/     380 :                     ; hl - trk_read on halfway
(1)  784/     380 :                     .set_track:
(1)  785/     380 : CF                  		rst	8
(1)  786/     381 : FD 36 10 80         		ld	(iy+trk_Halfway),80h	; Reset halfway
(1)  787/     385 :                     ; 		ld	l,(iy+trk_CachNotes)	; Set trk_read point on halfway
(1)  788/     385 :                     ; 		ld	h,(iy+(trk_CachNotes+1))
(1)  789/     385 :                     ; 		ld	de,80h
(1)  790/     385 :                     ; 		add	hl,de
(1)  791/     385 : 2E 00               		ld	l,0			; quick reset trk_read
(1)  792/     387 : FD 75 0C            		ld	(iy+trk_Read),l
(1)  793/     38A : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  794/     38D :                     
(1)  795/     38D : E5                  		push	hl			; Save hl
(1)  796/     38E : 11 00 00            		ld	de,0
(1)  797/     391 : 5F                  		ld	e,a
(1)  798/     392 : CF                  		rst	8
(1)  799/     393 : FD 6E 00            		ld	l,(iy+trk_romBlk)	; Get block position
(1)  800/     396 : FD 66 01            		ld	h,(iy+(trk_romBlk+1))	; directly from ROM
(1)  801/     399 : FD 7E 02            		ld	a,(iy+(trk_romBlk+2))
(1)  802/     39C : 19                  		add	hl,de
(1)  803/     39D : CE 00               		adc	a,0
(1)  804/     39F : 47                  		ld	b,a
(1)  805/     3A0 : CF                  		rst	8
(1)  806/     3A1 : CD C9 0E            		call	showRom
(1)  807/     3A4 : CD EA 0E            		call	readRomB
(1)  808/     3A7 : FE FF               		cp	-1			; if block == -1, end
(1)  809/     3A9 : CA 8A 04            		jp	z,.track_end
(1)  810/     3AC :                     
(1)  811/     3AC :                     	; a - head index
(1)  812/     3AC : 87                  		add	a,a
(1)  813/     3AD : 87                  		add	a,a
(1)  814/     3AE : 16 00               		ld	d,0
(1)  815/     3B0 : 5F                  		ld	e,a
(1)  816/     3B1 : FD 6E 03            		ld	l,(iy+trk_romPatt)
(1)  817/     3B4 : CF                  		rst	8
(1)  818/     3B5 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1)  819/     3B8 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1)  820/     3BB : 19                  		add	hl,de
(1)  821/     3BC : CE 00               		adc	a,0
(1)  822/     3BE : 11 60 1E            		ld	de,trkHdOut
(1)  823/     3C1 : D5                  		push	de
(1)  824/     3C2 : 01 06 00            		ld	bc,6			; thispoint, rowcount, nextpoint
(1)  825/     3C5 : CD 17 0F            		call	transferRom
(1)  826/     3C8 : E1                  		pop	hl
(1)  827/     3C9 : 5E                  		ld	e,(hl)			; de - pointer increment
(1)  828/     3CA : 23                  		inc	hl
(1)  829/     3CB : 56                  		ld	d,(hl)
(1)  830/     3CC : 23                  		inc	hl
(1)  831/     3CD : 4E                  		ld	c,(hl)			; bc - row count
(1)  832/     3CE : 23                  		inc	hl
(1)  833/     3CF : 46                  		ld	b,(hl)
(1)  834/     3D0 : CF                  		rst	8
(1)  835/     3D1 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows to buffer
(1)  836/     3D4 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b	; on Tick pauses
(1)  837/     3D7 : C5                  		push	bc			; Save bc
(1)  838/     3D8 : E7                  		rst	20h			; refill wave
(1)  839/     3D9 :                     
(1)  840/     3D9 :                     	; Detect pattern size... last moment addition
(1)  841/     3D9 :                     	; for patterns lower than 80h.
(1)  842/     3D9 :                     	; This saves cycles if using SFX
(1)  843/     3D9 :                     	; hl - next pattern point (includes final)
(1)  844/     3D9 :                     	; de - this pattern
(1)  845/     3D9 :                     	; bc - final size for transferRom
(1)  846/     3D9 : 3A 64 1E            		ld	a,(trkHdOut+4)	; hl - de
(1)  847/     3DC : 6F                  		ld	l,a
(1)  848/     3DD : 3A 65 1E            		ld	a,(trkHdOut+5)
(1)  849/     3E0 : 67                  		ld	h,a
(1)  850/     3E1 : 3F                  		ccf			; remove carry first
(1)  851/     3E2 : ED 52               		sbc	hl,de
(1)  852/     3E4 : FD 4E 13            		ld	c,(iy+trk_status)
(1)  853/     3E7 : CB A1               		res	4,c
(1)  854/     3E9 : 7C                  		ld	a,h		; h == 0?
(1)  855/     3EA : B7                  		or	a
(1)  856/     3EB :                     ; 		jp	m,$
(1)  857/     3EB : 20 04               		jr	nz,.szmuch
(1)  858/     3ED : CB 7D               		bit	7,l
(1)  859/     3EF : 28 05               		jr	z,.szgood
(1)  860/     3F1 :                     .szmuch:
(1)  861/     3F1 : 21 80 00            		ld	hl,080h			; bc - max transfer size 080h
(1)  862/     3F4 : CB E1               		set	4,c
(1)  863/     3F6 :                     .szgood:
(1)  864/     3F6 : FD 71 13            		ld	(iy+trk_status),c
(1)  865/     3F9 : 44                  		ld	b,h
(1)  866/     3FA : 4D                  		ld	c,l
(1)  867/     3FB : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - ROM pattern data pointer
(1)  868/     3FE : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(1)  869/     401 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(1)  870/     404 : 19                  		add	hl,de			; hl + de
(1)  871/     405 : CE 00               		adc	a,0			; and highest byte too.
(1)  872/     407 : CF                  		rst	8
(1)  873/     408 : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer for READ
(1)  874/     40B : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(1)  875/     40E : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(1)  876/     411 : FD 56 0D            		ld	d,(iy+(trk_Read+1))	; de - destination to data CACHE
(1)  877/     414 : FD 5E 0C            		ld	e,(iy+trk_Read)
(1)  878/     417 :                     ; 		ld	bc,080h			; bc - 080h
(1)  879/     417 : CD 17 0F            		call	transferRom
(1)  880/     41A : CF                  		rst	8
(1)  881/     41B : C1                  		pop	bc			; Get bc back
(1)  882/     41C : E1                  		pop	hl			; hl too.
(1)  883/     41D : AF                  		xor	a			; return 0
(1)  884/     41E : C9                  		ret
(1)  885/     41F :                     
(1)  886/     41F :                     ; ----------------------------------------
(1)  887/     41F :                     ; First time playing or moving
(1)  888/     41F :                     ; to next track.
(1)  889/     41F :                     ; ----------------------------------------
(1)  890/     41F :                     
(1)  891/     41F :                     .effect_fill:
(1)  892/     41F : E7                  		rst	20h			; Refill wave data
(1)  893/     420 : CB A8               		res	5,b			; Reset refill-from-effect flag
(1)  894/     422 : FD 70 13            		ld	(iy+trk_status),b
(1)  895/     425 : 18 36               		jr	.go_effect
(1)  896/     427 :                     ; 		call	.go_effect
(1)  897/     427 :                     ; 		ret
(1)  898/     427 :                     
(1)  899/     427 :                     ; returns bc as row counter
(1)  900/     427 :                     .first_fill:
(1)  901/     427 : E7                  		rst	20h
(1)  902/     428 : CB B0               		res	6,b			; Reset FILL flag
(1)  903/     42A : FD 70 13            		ld	(iy+trk_status),b
(1)  904/     42D : FD E5               		push	iy
(1)  905/     42F : DD E1               		pop	ix			; copy iy to ix
(1)  906/     431 : 11 20 00            		ld	de,20h			; go to channel data
(1)  907/     434 : DD 19               		add	ix,de
(1)  908/     436 : CF                  		rst	8
(1)  909/     437 : 01 00 00            		ld	bc,0
(1)  910/     43A : 11 08 00            		ld	de,8
(1)  911/     43D : 06 11               		ld	b,MAX_TRKCHN
(1)  912/     43F :                     .clrf:
(1)  913/     43F : CF                  		rst	8
(1)  914/     440 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1)  915/     443 : B7                  		or	a
(1)  916/     444 : 28 09               		jr	z,.nochip
(1)  917/     446 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1)  918/     44A : DD 36 01 01         		ld	(ix+chnl_Flags),1
(1)  919/     44E : CF                  		rst	8
(1)  920/     44F :                     .nochip:
(1)  921/     44F : DD 19               		add	ix,de
(1)  922/     451 : 10 EC               		djnz	.clrf
(1)  923/     453 : FD 36 17 00         		ld	(iy+trk_rowPause),0	; Reset row timer
(1)  924/     457 : FD 7E 12            		ld	a,(iy+trk_setBlk)	; Set current block
(1)  925/     45A : FD 77 11            		ld 	(iy+trk_currBlk),a
(1)  926/     45D :                     .go_effect:
(1)  927/     45D : CF                  		rst	8			; First cache fills
(1)  928/     45E : FD 6E 06            		ld	l,(iy+trk_romIns)	; Recieve almost 100h of instrument pointers
(1)  929/     461 : FD 66 07            		ld	h,(iy+(trk_romIns+1))	; NOTE: transferRom can't do 100h
(1)  930/     464 : FD 7E 08            		ld	a,(iy+(trk_romIns+2))
(1)  931/     467 : ED 5B 40 1E         		ld	de,(currInsData)
(1)  932/     46B : 06 00               		ld	b,0
(1)  933/     46D : FD 4E 16            		ld	c,(iy+trk_sizeIns)
(1)  934/     470 : CD 17 0F            		call	transferRom
(1)  935/     473 : CF                  		rst	8
(1)  936/     474 : FD 6E 18            		ld	l,(iy+trk_CachNotes)	; Read first cache notes
(1)  937/     477 : FD 66 19            		ld	h,(iy+(trk_CachNotes+1))
(1)  938/     47A : 11 80 00            		ld	de,80h
(1)  939/     47D : 19                  		add	hl,de
(1)  940/     47E : FD 75 0C            		ld	(iy+trk_Read),l
(1)  941/     481 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(1)  942/     484 : FD 7E 11            		ld	a,(iy+trk_currBlk)
(1)  943/     487 : C3 80 03            		jp	.set_track
(1)  944/     48A :                     
(1)  945/     48A :                     ; If -1, track ends
(1)  946/     48A :                     ; Automutes channels too.
(1)  947/     48A :                     .track_end:
(1)  948/     48A : E1                  		pop	hl			; Get hl back
(1)  949/     48B :                     .trkend_effC:
(1)  950/     48B : CD 9D 04            		call	track_out
(1)  951/     48E :                     ; 		ld	(iy+trk_CmdReq),-1
(1)  952/     48E : CF                  		rst	8
(1)  953/     48F : FD 36 17 00         		ld	(iy+trk_rowPause),0
(1)  954/     493 : FD 36 14 00         		ld	(iy+trk_tickTmr),0
(1)  955/     497 : 01 00 00            		ld	bc,0			; Set bc rowcount to 0
(1)  956/     49A : 3E FF               		ld	a,-1			; Return -1
(1)  957/     49C : C9                  		ret
(1)  958/     49D :                     
(1)  959/     49D :                     ; ----------------------------------------
(1)  960/     49D :                     ; Delete all track data
(1)  961/     49D :                     ; ----------------------------------------
(1)  962/     49D :                     
(1)  963/     49D :                     track_out:
(1)  964/     49D : FD E5               		push	iy
(1)  965/     49F : DD E1               		pop	ix
(1)  966/     4A1 : 11 20 00            		ld	de,20h
(1)  967/     4A4 : DD 19               		add	ix,de
(1)  968/     4A6 : CF                  		rst	8
(1)  969/     4A7 : 11 08 00            		ld	de,8
(1)  970/     4AA : 06 11               		ld	b,MAX_TRKCHN
(1)  971/     4AC :                     .clrfe:
(1)  972/     4AC : DD 7E 00            		ld	a,(ix+chnl_Chip)
(1)  973/     4AF : B7                  		or	a
(1)  974/     4B0 : 28 0C               		jr	z,.nochip
(1)  975/     4B2 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1)  976/     4B6 : DD 7E 01            		ld	a,(ix+chnl_Flags)
(1)  977/     4B9 : 3E 01               		ld	a,1
(1)  978/     4BB : DD 77 01            		ld	(ix+chnl_Flags),a
(1)  979/     4BE :                     .nochip:
(1)  980/     4BE : DD 19               		add	ix,de
(1)  981/     4C0 : 10 EA               		djnz	.clrfe
(1)  982/     4C2 : 3E 01               		ld	a,1
(1)  983/     4C4 : 32 30 00            		ld	(marsUpd),a
(1)  984/     4C7 : C9                  		ret
(1)  985/     4C8 :                     
(1)  986/     4C8 :                     ; --------------------------------------------------------
(1)  987/     4C8 :                     ; ** 32X ONLY ***
(1)  988/     4C8 :                     ; Communicate to Slave SH2 to play
(1)  989/     4C8 :                     ; PWM sound channels
(1)  990/     4C8 :                     ; --------------------------------------------------------
(1)  991/     4C8 :                     
(1)  992/     4C8 :                     mars_scomm:
(1)  993/     4C8 : 21 00 60            		ld	hl,6000h	; Point BANK closely
(1)  994/     4CB : CF                  		rst	8		; to the 32X area
(1)  995/     4CC : 36 00               		ld	(hl),0
(1)  996/     4CE : 36 01               		ld	(hl),1
(1)  997/     4D0 : 36 00               		ld	(hl),0
(1)  998/     4D2 : 36 00               		ld	(hl),0
(1)  999/     4D4 : CF                  		rst	8
(1) 1000/     4D5 : 36 00               		ld	(hl),0
(1) 1001/     4D7 : 36 00               		ld	(hl),0
(1) 1002/     4D9 : 36 01               		ld	(hl),1
(1) 1003/     4DB : 36 00               		ld	(hl),0
(1) 1004/     4DD : CF                  		rst	8
(1) 1005/     4DE : 36 01               		ld	(hl),1
(1) 1006/     4E0 : FD 21 00 D1         		ld	iy,5100h|8000h	; iy - mars sysreg
(1) 1007/     4E4 : DD 21 3A 16         		ld	ix,pwmcom
(1) 1008/     4E8 : 3A 2E 00            		ld	a,(marsBlock)	; block MARS requests?
(1) 1009/     4EB : B7                  		or	a
(1) 1010/     4EC : 20 5E               		jr	nz,.blocked
(1) 1011/     4EE : 3A 30 00            		ld	a,(marsUpd)	; update?
(1) 1012/     4F1 : B7                  		or	a
(1) 1013/     4F2 : C8                  		ret	z
(1) 1014/     4F3 : CF                  		rst	8
(1) 1015/     4F4 : AF                  		xor	a
(1) 1016/     4F5 : 32 30 00            		ld	(marsUpd),a
(1) 1017/     4F8 :                     .wait_enter:
(1) 1018/     4F8 : 00                  		nop
(1) 1019/     4F9 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 1020/     4FC : CB 7F               		bit	7,a
(1) 1021/     4FE : 20 F8               		jr	nz,.wait_enter
(1) 1022/     500 : E6 F0               		and	11110000b
(1) 1023/     502 : F6 01               		or	1		; Set CMD task mode $01
(1) 1024/     504 : FD 77 2E            		ld	(iy+comm14),a
(1) 1025/     507 : CF                  		rst	8
(1) 1026/     508 : E6 0F               		and	00001111b	; Did it write?
(1) 1027/     50A : FE 01               		cp	1
(1) 1028/     50C : 20 EA               		jr	nz,.wait_enter
(1) 1029/     50E : FD CB 2E FE         		set	7,(iy+comm14)	; Set this as ours
(1) 1030/     512 : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 1031/     516 : CF                  		rst	8
(1) 1032/     517 :                     .wait_cmd:
(1) 1033/     517 :                     ; 		bit	1,(iy+standby)
(1) 1034/     517 :                     ; 		jr	nz,.wait_cmd
(1) 1035/     517 : 0E 0E               		ld	c,14		; c - 14 words
(1) 1036/     519 :                     .next_pass:
(1) 1037/     519 : FD E5               		push	iy
(1) 1038/     51B : E1                  		pop	hl
(1) 1039/     51C : CF                  		rst	8
(1) 1040/     51D : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 1041/     520 : 19                  		add	hl,de
(1) 1042/     521 : 06 02               		ld	b,2
(1) 1043/     523 :                     .next_comm:
(1) 1044/     523 : DD 56 00            		ld	d,(ix)
(1) 1045/     526 : DD 5E 01            		ld	e,(ix+1)
(1) 1046/     529 : DD 23               		inc	ix
(1) 1047/     52B : DD 23               		inc	ix
(1) 1048/     52D : CF                  		rst	8
(1) 1049/     52E : 72                  		ld	(hl),d
(1) 1050/     52F : 23                  		inc	hl
(1) 1051/     530 : 73                  		ld	(hl),e
(1) 1052/     531 : 23                  		inc	hl
(1) 1053/     532 : 10 EF               		djnz	.next_comm
(1) 1054/     534 : FD CB 2E F6         		set	6,(iy+comm14)	; Send CLK to Slave CMD
(1) 1055/     538 : CF                  		rst	8
(1) 1056/     539 :                     .w_pass2:
(1) 1057/     539 : 00                  		nop
(1) 1058/     53A : FD CB 2E 76         		bit	6,(iy+comm14)	; CLK cleared?
(1) 1059/     53E : 20 F9               		jr	nz,.w_pass2
(1) 1060/     540 : 0D                  		dec	c
(1) 1061/     541 : 20 D6               		jr	nz,.next_pass
(1) 1062/     543 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 1063/     547 : FD CB 2E B6         		res	6,(iy+comm14)	; Clear CLK
(1) 1064/     54B : CF                  		rst	8
(1) 1065/     54C :                     .blocked:
(1) 1066/     54C : 21 3A 16            		ld	hl,pwmcom	; clear our COM bytes
(1) 1067/     54F : 06 07               		ld	b,7		; MAX PWM channels
(1) 1068/     551 : AF                  		xor	a
(1) 1069/     552 :                     .clrcom:
(1) 1070/     552 : 77                  		ld	(hl),a
(1) 1071/     553 : 23                  		inc	hl
(1) 1072/     554 : 10 FC               		djnz	.clrcom
(1) 1073/     556 : C9                  		ret
(1) 1074/     557 :                     
(1) 1075/     557 :                     ; --------------------------------------------------------
(1) 1076/     557 :                     ; Set and play instruments in their respective channels
(1) 1077/     557 :                     ; --------------------------------------------------------
(1) 1078/     557 :                     
(1) 1079/     557 :                     setupchip:
(1) 1080/     557 : 21 55 18            		ld	hl,insDataC_0
(1) 1081/     55A : FD 21 8A 19         		ld	iy,trkBuff_0		; iy - Tracker channels
(1) 1082/     55E : CD 68 05            		call	.mk_chip
(1) 1083/     561 : 21 ED 18            		ld	hl,insDataC_1
(1) 1084/     564 : FD 21 32 1A         		ld	iy,trkBuff_1
(1) 1085/     568 :                     .mk_chip:
(1) 1086/     568 : FD 7E 13            		ld	a,(iy+trk_status)	; enable bit? (as plus/minus test)
(1) 1087/     56B : B7                  		or	a
(1) 1088/     56C : F0                  		ret	p
(1) 1089/     56D :                     
(1) 1090/     56D : FD 7E 1A            		ld	a,(iy+trk_CmdReq)
(1) 1091/     570 : FD 36 1A 00         		ld	(iy+trk_CmdReq),0
(1) 1092/     574 : FE FF               		cp	-1
(1) 1093/     576 : 20 04               		jr	nz,.clr
(1) 1094/     578 : FD CB 13 BE         		res	7,(iy+trk_status)
(1) 1095/     57C :                     .clr:
(1) 1096/     57C :                     
(1) 1097/     57C : 22 40 1E            		ld	(currInsData),hl
(1) 1098/     57F : FD 22 46 1E         		ld	(currTrkCtrl),iy
(1) 1099/     583 :                     ; 		rst	8
(1) 1100/     583 : 11 20 00            		ld	de,20h
(1) 1101/     586 : FD 19               		add	iy,de
(1) 1102/     588 : 06 11               		ld	b,MAX_TRKCHN
(1) 1103/     58A :                     .nxt_chnl:
(1) 1104/     58A : FD 7E 01            		ld	a,(iy+chnl_Flags)	; Get status bits
(1) 1105/     58D : E6 0F               		and	00001111b
(1) 1106/     58F : B7                  		or	a			; Check for non-zero
(1) 1107/     590 : C4 9C 05            		call	nz,.do_chnl
(1) 1108/     593 : CF                  		rst	8
(1) 1109/     594 : 11 08 00            		ld	de,8			; Next CHANNEL
(1) 1110/     597 : FD 19               		add	iy,de
(1) 1111/     599 : 10 EF               		djnz	.nxt_chnl
(1) 1112/     59B : C9                  		ret
(1) 1113/     59C :                     
(1) 1114/     59C :                     ; ----------------------------------------
(1) 1115/     59C :                     ; Channel requested update
(1) 1116/     59C :                     ;
(1) 1117/     59C :                     ; iy - Current channel
(1) 1118/     59C :                     ; ----------------------------------------
(1) 1119/     59C :                     
(1) 1120/     59C :                     .do_chnl:
(1) 1121/     59C : C5                  		push	bc
(1) 1122/     59D : CD 82 0D            		call	.check_ins
(1) 1123/     5A0 : FE FF               		cp	-1			; NULL instrument?
(1) 1124/     5A2 : 28 39               		jr	z,.no_chnl
(1) 1125/     5A4 : CD 92 0C            		call	.chip_swap		; check if this channel switched chip
(1) 1126/     5A7 : CD 95 0D            		call	.check_chnl		; a - chip requested
(1) 1127/     5AA : FE FF               		cp	-1
(1) 1128/     5AC : 28 25               		jr	z,.ran_out
(1) 1129/     5AE : 22 44 1E            		ld	(currInsPos),hl
(1) 1130/     5B1 : DD 22 42 1E         		ld	(currTblPos),ix
(1) 1131/     5B5 : E7                  		rst	20h
(1) 1132/     5B6 : FD CB 01 4E         		bit	1,(iy+chnl_Flags)
(1) 1133/     5BA : C4 E3 05            		call	nz,.req_ins
(1) 1134/     5BD : FD CB 01 56         		bit	2,(iy+chnl_Flags)
(1) 1135/     5C1 : C4 40 07            		call	nz,.req_vol
(1) 1136/     5C4 : CF                  		rst	8
(1) 1137/     5C5 : FD CB 01 5E         		bit	3,(iy+chnl_Flags)
(1) 1138/     5C9 : C4 DB 07            		call	nz,.req_eff
(1) 1139/     5CC : FD CB 01 46         		bit	0,(iy+chnl_Flags)
(1) 1140/     5D0 : C4 37 0A            		call	nz,.req_note
(1) 1141/     5D3 :                     ; 		ld	a,(iy+chnl_Flags)	; Instrument+effect also allowed.
(1) 1142/     5D3 :                     ; 		and	1010b
(1) 1143/     5D3 :                     ; 		or	a
(1) 1144/     5D3 :                     ; 		call	nz,.req_note
(1) 1145/     5D3 :                     
(1) 1146/     5D3 :                     .ran_out:
(1) 1147/     5D3 : FD 7E 01            		ld	a,(iy+chnl_Flags)	; Clear status bits
(1) 1148/     5D6 : E6 F0               		and	11110000b
(1) 1149/     5D8 : FD 77 01            		ld	(iy+chnl_Flags),a
(1) 1150/     5DB : C1                  		pop	bc
(1) 1151/     5DC : C9                  		ret
(1) 1152/     5DD :                     .no_chnl:
(1) 1153/     5DD :                     ; 		call	.chip_swap
(1) 1154/     5DD : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 1155/     5E1 :                     ; 		ld	(ix+chnl_Flags),0
(1) 1156/     5E1 : C1                  		pop	bc
(1) 1157/     5E2 : C9                  		ret
(1) 1158/     5E3 :                     
(1) 1159/     5E3 :                     ; ----------------------------------------
(1) 1160/     5E3 :                     ; bit 1: Intrument
(1) 1161/     5E3 :                     ; ----------------------------------------
(1) 1162/     5E3 :                     
(1) 1163/     5E3 :                     .req_ins:
(1) 1164/     5E3 : 2A 44 1E            		ld	hl,(currInsPos)
(1) 1165/     5E6 : DD 2A 42 1E         		ld	ix,(currTblPos)
(1) 1166/     5EA : 7E                  		ld	a,(hl)
(1) 1167/     5EB : E6 F0               		and	11110000b
(1) 1168/     5ED : FE 80               		cp	80h		; PSG normal
(1) 1169/     5EF : 28 5A               		jr	z,.ins_psg
(1) 1170/     5F1 : FE 90               		cp	90h		; PSG noise
(1) 1171/     5F3 : 28 50               		jr	z,.ins_psgn
(1) 1172/     5F5 : CF                  		rst	8
(1) 1173/     5F6 : FE A0               		cp	0A0h		; FM normal
(1) 1174/     5F8 : CA C3 06            		jp	z,.ins_fm
(1) 1175/     5FB : FE B0               		cp	0B0h		; FM special
(1) 1176/     5FD : CA B4 06            		jp	z,.ins_fm3
(1) 1177/     600 : FE C0               		cp	0C0h		; DAC
(1) 1178/     602 : 28 76               		jr	z,.ins_dac
(1) 1179/     604 : FE D0               		cp	0D0h		; PWM
(1) 1180/     606 : CA 0A 06            		jp	z,.ins_pwm
(1) 1181/     609 : C9                  		ret
(1) 1182/     60A :                     
(1) 1183/     60A :                     ; --------------------------------
(1) 1184/     60A :                     ; FM,FM3,FM6
(1) 1185/     60A :                     ; --------------------------------
(1) 1186/     60A :                     
(1) 1187/     60A :                     .ins_pwm:
(1) 1188/     60A : 56                  		ld	d,(hl)		; d - Flags
(1) 1189/     60B : 23                  		inc	hl
(1) 1190/     60C : 7E                  		ld	a,(hl)		; Save pitch
(1) 1191/     60D : 23                  		inc	hl
(1) 1192/     60E : DD 77 03            		ld	(ix+3),a
(1) 1193/     611 : DD 7E 02            		ld	a,(ix+2)
(1) 1194/     614 : DD 21 3A 16         		ld	ix,pwmcom	; ix - pwmcom
(1) 1195/     618 : E6 07               		and	000111b
(1) 1196/     61A : 06 00               		ld	b,0
(1) 1197/     61C : 4F                  		ld	c,a
(1) 1198/     61D : DD 09               		add	ix,bc
(1) 1199/     61F : 7E                  		ld	a,(hl)		; SH2 BANK
(1) 1200/     620 : 23                  		inc	hl
(1) 1201/     621 : E6 0F               		and	00001111b
(1) 1202/     623 : 47                  		ld	b,a		; b - Section, ROM or SDRAM
(1) 1203/     624 : DD 7E 18            		ld	a,(ix+PWOUTF)
(1) 1204/     627 : E6 30               		and	00110000b	; keep flag LR
(1) 1205/     629 : 4F                  		ld	c,a		; save them as C
(1) 1206/     62A : 7A                  		ld	a,d
(1) 1207/     62B : E6 03               		and	00000011b	; Stereo|Loop bits
(1) 1208/     62D : 0F                  		rrca			; carry...
(1) 1209/     62E : 0F                  		rrca
(1) 1210/     62F : B1                  		or	c
(1) 1211/     630 : B0                  		or	b
(1) 1212/     631 : DD 77 18            		ld	(ix+PWOUTF),a
(1) 1213/     634 : 7E                  		ld	a,(hl)		; Grab the 24-bit address (BIG endian)
(1) 1214/     635 : 23                  		inc	hl
(1) 1215/     636 : DD 77 20            		ld	(ix+PWINSH),a
(1) 1216/     639 : CF                  		rst	8
(1) 1217/     63A : 7E                  		ld	a,(hl)
(1) 1218/     63B : 23                  		inc	hl
(1) 1219/     63C : DD 77 28            		ld	(ix+PWINSM),a
(1) 1220/     63F : 7E                  		ld	a,(hl)
(1) 1221/     640 : 23                  		inc	hl
(1) 1222/     641 : DD 77 30            		ld	(ix+PWINSL),a
(1) 1223/     644 : C9                  		ret
(1) 1224/     645 :                     
(1) 1225/     645 :                     ; --------------------------------
(1) 1226/     645 :                     ; PSG1-3,PSGN
(1) 1227/     645 :                     ; --------------------------------
(1) 1228/     645 :                     
(1) 1229/     645 :                     .ins_psgn:
(1) 1230/     645 : 7E                  		ld	a,(hl)		; Extra bits for NOISE
(1) 1231/     646 : E6 07               		and	111b
(1) 1232/     648 : DD 77 04            		ld	(ix+4),a
(1) 1233/     64B :                     .ins_psg:
(1) 1234/     64B : CF                  		rst	8
(1) 1235/     64C : 23                  		inc	hl		; Skip ID
(1) 1236/     64D : 7E                  		ld	a,(hl)
(1) 1237/     64E : DD 77 03            		ld	(ix+3),a	; Save pitch
(1) 1238/     651 : 23                  		inc	hl
(1) 1239/     652 : DD 7E 02            		ld	a,(ix+2)
(1) 1240/     655 : E6 03               		and	11b
(1) 1241/     657 : 16 00               		ld	d,0
(1) 1242/     659 : 5F                  		ld	e,a
(1) 1243/     65A : DD 21 96 16         		ld	ix,psgcom
(1) 1244/     65E : DD 19               		add	ix,de
(1) 1245/     660 : 7E                  		ld	a,(hl)
(1) 1246/     661 :                     
(1) 1247/     661 :                     	; TODO: ponerlos en un buffer separado
(1) 1248/     661 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 1249/     664 : 23                  		inc	hl
(1) 1250/     665 : 7E                  		ld	a,(hl)
(1) 1251/     666 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 1252/     669 : 23                  		inc	hl
(1) 1253/     66A : CF                  		rst	8
(1) 1254/     66B : 7E                  		ld	a,(hl)
(1) 1255/     66C : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 1256/     66F : 23                  		inc	hl
(1) 1257/     670 : 7E                  		ld	a,(hl)
(1) 1258/     671 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 1259/     674 : 23                  		inc	hl
(1) 1260/     675 : 7E                  		ld	a,(hl)
(1) 1261/     676 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 1262/     679 : C9                  		ret
(1) 1263/     67A :                     
(1) 1264/     67A :                     ; --------------------------------
(1) 1265/     67A :                     ; FM,FM3,FM6
(1) 1266/     67A :                     ; --------------------------------
(1) 1267/     67A :                     
(1) 1268/     67A :                     .ins_dac:
(1) 1269/     67A : DD 36 04 01         		ld	(ix+4),1	; e - alternate mode flag (FM6 as DAC)
(1) 1270/     67E : 7E                  		ld	a,(hl)		; Grab flags from ID
(1) 1271/     67F : E6 01               		and	001b
(1) 1272/     681 : 32 56 1E            		ld	(wave_Flags),a
(1) 1273/     684 : 23                  		inc	hl
(1) 1274/     685 : 7E                  		ld	a,(hl)		; Save pitch
(1) 1275/     686 : DD 77 03            		ld	(ix+3),a
(1) 1276/     689 : 23                  		inc	hl
(1) 1277/     68A : 4E                  		ld	c,(hl)		; Grab the 24-bit address
(1) 1278/     68B : 23                  		inc	hl		; big endian this time.
(1) 1279/     68C : CF                  		rst	8
(1) 1280/     68D : 56                  		ld	d,(hl)
(1) 1281/     68E : 23                  		inc	hl
(1) 1282/     68F : 5E                  		ld	e,(hl)
(1) 1283/     690 :                     
(1) 1284/     690 : CF                  		rst	8
(1) 1285/     691 : 6B                  		ld	l,e
(1) 1286/     692 : 62                  		ld	h,d
(1) 1287/     693 : 79                  		ld	a,c
(1) 1288/     694 : E5                  		push	hl		; Recieve LEN and LOOP
(1) 1289/     695 : F5                  		push	af		; from the WAVE itself
(1) 1290/     696 : 11 4E 1E            		ld	de,wave_Len
(1) 1291/     699 : 01 06 00            		ld	bc,6
(1) 1292/     69C : CF                  		rst	8
(1) 1293/     69D : CD 17 0F            		call	transferRom
(1) 1294/     6A0 : F1                  		pop	af
(1) 1295/     6A1 : E1                  		pop	hl
(1) 1296/     6A2 : 01 06 00            		ld	bc,6		; skip LEN point
(1) 1297/     6A5 : 09                  		add	hl,bc
(1) 1298/     6A6 : CE 00               		adc	a,0
(1) 1299/     6A8 : 22 4B 1E            		ld	(wave_Start),hl	; save START point
(1) 1300/     6AB : 32 4D 1E            		ld	(wave_Start+2),a
(1) 1301/     6AE : 3E 04               		ld	a,100b		; Force FM6 off
(1) 1302/     6B0 : 32 77 16            		ld	(fmcom+5),a
(1) 1303/     6B3 : C9                  		ret
(1) 1304/     6B4 :                     
(1) 1305/     6B4 :                     ; FM3 special mode
(1) 1306/     6B4 :                     .ins_fm3:
(1) 1307/     6B4 : 3E 02               		ld	a,2		; manual index
(1) 1308/     6B6 : 1E 01               		ld	e,1		; set as alternate FM
(1) 1309/     6B8 : CD EE 06            		call	.rd_fmins
(1) 1310/     6BB : 21 74 16            		ld	hl,fmcom+2
(1) 1311/     6BE : 7E                  		ld	a,(hl)		; instrument update bit
(1) 1312/     6BF : F6 10               		or	00010000b	; flag
(1) 1313/     6C1 : 77                  		ld	(hl),a
(1) 1314/     6C2 : C9                  		ret
(1) 1315/     6C3 :                     ; Regular FM
(1) 1316/     6C3 :                     .ins_fm:
(1) 1317/     6C3 : CF                  		rst	8
(1) 1318/     6C4 : 1E 00               		ld	e,0		; Set as normal FM
(1) 1319/     6C6 : DD 7E 02            		ld	a,(ix+2)
(1) 1320/     6C9 : E6 07               		and	00000111b
(1) 1321/     6CB : FE 05               		cp	5		; Check if we are on FM6
(1) 1322/     6CD : 20 08               		jr	nz,.not_prdac
(1) 1323/     6CF : 57                  		ld	d,a
(1) 1324/     6D0 : 3E 04               		ld	a,100b		; Force DAC stop
(1) 1325/     6D2 : CF                  		rst	8
(1) 1326/     6D3 : 32 C6 17            		ld	(daccom),a
(1) 1327/     6D6 : 7A                  		ld	a,d
(1) 1328/     6D7 :                     .not_prdac:
(1) 1329/     6D7 : 1E 00               		ld	e,0		; Set as Normal
(1) 1330/     6D9 : CD EE 06            		call	.rd_fmins
(1) 1331/     6DC : DD 7E 02            		ld	a,(ix+2)
(1) 1332/     6DF : E6 07               		and	00000111b
(1) 1333/     6E1 : 16 00               		ld	d,0
(1) 1334/     6E3 : CF                  		rst	8
(1) 1335/     6E4 : 5F                  		ld	e,a
(1) 1336/     6E5 : 21 72 16            		ld	hl,fmcom
(1) 1337/     6E8 : 19                  		add	hl,de
(1) 1338/     6E9 : 7E                  		ld	a,(hl)		; instrument update bit
(1) 1339/     6EA : F6 10               		or	00010000b	; flag
(1) 1340/     6EC : 77                  		ld	(hl),a
(1) 1341/     6ED : C9                  		ret
(1) 1342/     6EE :                     
(1) 1343/     6EE :                     ; Read FM instrument
(1) 1344/     6EE :                     ;
(1) 1345/     6EE :                     ; e - alternate mode flag
(1) 1346/     6EE :                     .rd_fmins:
(1) 1347/     6EE : DD 73 04            		ld	(ix+4),e	; e - alternate mode flag
(1) 1348/     6F1 : 23                  		inc	hl		; skip ID and pitch
(1) 1349/     6F2 : 5E                  		ld	e,(hl)
(1) 1350/     6F3 : DD 73 03            		ld	(ix+3),e	; save pitch
(1) 1351/     6F6 : 23                  		inc	hl
(1) 1352/     6F7 : 87                  		add	a,a
(1) 1353/     6F8 : 16 00               		ld	d,0
(1) 1354/     6FA : 5F                  		ld	e,a
(1) 1355/     6FB : CF                  		rst	8
(1) 1356/     6FC : E5                  		push	hl		; save ins hl
(1) 1357/     6FD : 21 34 07            		ld	hl,.fmpickins
(1) 1358/     700 : 19                  		add	hl,de
(1) 1359/     701 : 5E                  		ld	e,(hl)		; get output location
(1) 1360/     702 : 23                  		inc	hl		; from list
(1) 1361/     703 : 56                  		ld	d,(hl)
(1) 1362/     704 : CF                  		rst	8
(1) 1363/     705 : E1                  		pop	hl
(1) 1364/     706 : 7E                  		ld	a,(hl)		; a - xx0000
(1) 1365/     707 : 23                  		inc	hl
(1) 1366/     708 : 4E                  		ld	c,(hl)		; c - 00xx00
(1) 1367/     709 : 23                  		inc	hl
(1) 1368/     70A : 6E                  		ld	l,(hl)		; l - 0000xx
(1) 1369/     70B : 61                  		ld	h,c		; c to h
(1) 1370/     70C : D5                  		push	de
(1) 1371/     70D : CF                  		rst	8
(1) 1372/     70E : 4F                  		ld	c,a
(1) 1373/     70F : DD 7E 07            		ld	a,(ix+7)
(1) 1374/     712 : B9                  		cp	c
(1) 1375/     713 : 20 0C               		jr	nz,.confm_rd
(1) 1376/     715 : DD 7E 06            		ld	a,(ix+6)
(1) 1377/     718 : BC                  		cp	h
(1) 1378/     719 : 20 06               		jr	nz,.confm_rd
(1) 1379/     71B : DD 7E 05            		ld	a,(ix+5)
(1) 1380/     71E : BD                  		cp	l
(1) 1381/     71F : 28 11               		jr	z,.fmsame_ins
(1) 1382/     721 :                     .confm_rd:
(1) 1383/     721 : CF                  		rst	8
(1) 1384/     722 : DD 75 05            		ld	(ix+5),l
(1) 1385/     725 : DD 74 06            		ld	(ix+6),h
(1) 1386/     728 : DD 71 07            		ld	(ix+7),c
(1) 1387/     72B : 79                  		ld	a,c
(1) 1388/     72C : 01 28 00            		ld	bc,028h		; 28h bytes
(1) 1389/     72F : CD 17 0F            		call	transferRom	; Transfer instrument data from ROM
(1) 1390/     732 :                     .fmsame_ins:
(1) 1391/     732 : E1                  		pop	hl
(1) 1392/     733 : C9                  		ret
(1) 1393/     734 :                     
(1) 1394/     734 :                     ; manual location for each instr cache
(1) 1395/     734 :                     ; 28h bytes each
(1) 1396/     734 :                     .fmpickins:
(1) 1397/     734 : CA 16               		dw fmins_com
(1) 1398/     736 : F2 16               		dw fmins_com2
(1) 1399/     738 : 1A 17               		dw fmins_com3
(1) 1400/     73A : 42 17               		dw fmins_com4
(1) 1401/     73C : 6A 17               		dw fmins_com5
(1) 1402/     73E : 92 17               		dw fmins_com6
(1) 1403/     740 :                     
(1) 1404/     740 :                     ; ----------------------------------------
(1) 1405/     740 :                     ; bit 2
(1) 1406/     740 :                     ; ----------------------------------------
(1) 1407/     740 :                     
(1) 1408/     740 :                     .req_vol:
(1) 1409/     740 : 2A 44 1E            		ld	hl,(currInsPos)
(1) 1410/     743 : DD 2A 42 1E         		ld	ix,(currTblPos)
(1) 1411/     747 : 7E                  		ld	a,(hl)
(1) 1412/     748 : E6 F0               		and	11110000b
(1) 1413/     74A : FE 80               		cp	80h		; PSG normal
(1) 1414/     74C : 28 45               		jr	z,.vol_psg
(1) 1415/     74E : FE 90               		cp	90h		; PSG noise
(1) 1416/     750 : 28 41               		jr	z,.vol_psg
(1) 1417/     752 : CF                  		rst	8
(1) 1418/     753 : FE A0               		cp	0A0h		; FM normal
(1) 1419/     755 : 28 5F               		jr	z,.vol_fm
(1) 1420/     757 : FE B0               		cp	0B0h		; FM special (same thing)
(1) 1421/     759 : 28 5B               		jr	z,.vol_fm
(1) 1422/     75B :                     ; 		cp	0C0h		; DAC
(1) 1423/     75B :                     ; 		jr	z,.vol_dac
(1) 1424/     75B : FE D0               		cp	0D0h		; PWM
(1) 1425/     75D : 28 01               		jr	z,.vol_pwm
(1) 1426/     75F : C9                  		ret
(1) 1427/     760 :                     
(1) 1428/     760 :                     ; --------------------------------
(1) 1429/     760 :                     ; FM,FM3,FM6
(1) 1430/     760 :                     .vol_pwm:
(1) 1431/     760 : 01 00 00            		ld	bc,0
(1) 1432/     763 : DD 7E 02            		ld	a,(ix+2)
(1) 1433/     766 : E6 07               		and	00000111b
(1) 1434/     768 : 4F                  		ld	c,a
(1) 1435/     769 : CF                  		rst	8
(1) 1436/     76A : DD 21 3A 16         		ld	ix,pwmcom
(1) 1437/     76E : DD 09               		add	ix,bc
(1) 1438/     770 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1439/     773 : E6 03               		and	00000011b
(1) 1440/     775 : 4F                  		ld	c,a		; c - MSB Pitch bits
(1) 1441/     776 : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1) 1442/     779 : D6 40               		sub	a,40h
(1) 1443/     77B : CF                  		rst	8
(1) 1444/     77C : ED 44               		neg	a		; reverse impulse volume
(1) 1445/     77E : 87                  		add	a,a
(1) 1446/     77F : 87                  		add	a,a
(1) 1447/     780 : 30 03               		jr	nc,.pvmuch
(1) 1448/     782 : 3E FF               		ld	a,-1
(1) 1449/     784 : CF                  		rst	8
(1) 1450/     785 :                     .pvmuch:
(1) 1451/     785 : B1                  		or	c
(1) 1452/     786 : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1453/     789 : DD CB 00 EE         		set	5,(ix)		; set volume update bit
(1) 1454/     78D : 3E 01               		ld	a,1
(1) 1455/     78F : 32 30 00            		ld	(marsUpd),a
(1) 1456/     792 : C9                  		ret
(1) 1457/     793 :                     
(1) 1458/     793 :                     ; --------------------------------
(1) 1459/     793 :                     ; PSG1-3,PSGN
(1) 1460/     793 :                     
(1) 1461/     793 :                     .vol_psg:
(1) 1462/     793 : DD 7E 02            		ld	a,(ix+2)
(1) 1463/     796 : DD 21 96 16         		ld	ix,psgcom
(1) 1464/     79A : E6 03               		and	11b
(1) 1465/     79C : 16 00               		ld	d,0
(1) 1466/     79E : 5F                  		ld	e,a
(1) 1467/     79F : DD 19               		add	ix,de
(1) 1468/     7A1 : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1) 1469/     7A4 : D6 40               		sub	a,40h
(1) 1470/     7A6 : ED 44               		neg	a
(1) 1471/     7A8 : 4F                  		ld	c,a
(1) 1472/     7A9 : FE 40               		cp	40h
(1) 1473/     7AB : 20 02               		jr	nz,.vmuch
(1) 1474/     7AD : 0E FF               		ld	c,-1
(1) 1475/     7AF :                     .vmuch:
(1) 1476/     7AF : 79                  		ld	a,c
(1) 1477/     7B0 : 87                  		add	a,a
(1) 1478/     7B1 : 87                  		add	a,a
(1) 1479/     7B2 : DD 77 30            		ld	(ix+PVOL),a
(1) 1480/     7B5 :                     ; 		ld	a,(ix)
(1) 1481/     7B5 :                     ; 		or	00100000b	; Set volume
(1) 1482/     7B5 :                     ; 		ld	(ix),a		; update flag
(1) 1483/     7B5 : C9                  		ret
(1) 1484/     7B6 :                     
(1) 1485/     7B6 :                     ; --------------------------------
(1) 1486/     7B6 :                     ; FM,FM3,FM6
(1) 1487/     7B6 :                     .vol_fm:
(1) 1488/     7B6 : 01 00 00            		ld	bc,0
(1) 1489/     7B9 : DD 7E 02            		ld	a,(ix+2)
(1) 1490/     7BC : E6 07               		and	00000111b
(1) 1491/     7BE : 4F                  		ld	c,a
(1) 1492/     7BF : DD 21 72 16         		ld	ix,fmcom
(1) 1493/     7C3 : DD 09               		add	ix,bc
(1) 1494/     7C5 : FD 7E 04            		ld	a,(iy+chnl_Vol)
(1) 1495/     7C8 : D6 40               		sub	a,40h
(1) 1496/     7CA : CF                  		rst	8
(1) 1497/     7CB : ED 44               		neg	a		; reverse impulse volume
(1) 1498/     7CD : CB 3F               		srl	a		; /2
(1) 1499/     7CF : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1500/     7D2 : DD 7E 00            		ld	a,(ix)		; volume update
(1) 1501/     7D5 : F6 20               		or	00100000b	; flag, plus keyon
(1) 1502/     7D7 : DD 77 00            		ld	(ix),a
(1) 1503/     7DA : C9                  		ret
(1) 1504/     7DB :                     
(1) 1505/     7DB :                     ; ----------------------------------------
(1) 1506/     7DB :                     ; bit 3
(1) 1507/     7DB :                     ; ----------------------------------------
(1) 1508/     7DB :                     
(1) 1509/     7DB :                     .req_eff:
(1) 1510/     7DB : 2A 44 1E            		ld	hl,(currInsPos)
(1) 1511/     7DE : DD 2A 42 1E         		ld	ix,(currTblPos)
(1) 1512/     7E2 : FD 7E 05            		ld	a,(iy+chnl_EffId)	; effect id == 0?
(1) 1513/     7E5 : B7                  		or	a
(1) 1514/     7E6 : C8                  		ret	z
(1) 1515/     7E7 : 57                  		ld	d,a
(1) 1516/     7E8 : 7E                  		ld	a,(hl)
(1) 1517/     7E9 : E6 F0               		and	11110000b
(1) 1518/     7EB : FD 5E 06            		ld	e,(iy+chnl_EffArg)
(1) 1519/     7EE : CF                  		rst	8
(1) 1520/     7EF : FE 80               		cp	80h			; PSG normal
(1) 1521/     7F1 : 28 16               		jr	z,.eff_psg
(1) 1522/     7F3 : FE 90               		cp	90h			; PSG noise
(1) 1523/     7F5 : 28 12               		jr	z,.eff_psg
(1) 1524/     7F7 : FE A0               		cp	0A0h			; FM Normal
(1) 1525/     7F9 : 28 21               		jr	z,.eff_fm
(1) 1526/     7FB : CF                  		rst	8
(1) 1527/     7FC : FE B0               		cp	0B0h			; FM Special
(1) 1528/     7FE : 28 1C               		jr	z,.eff_fm
(1) 1529/     800 : FE C0               		cp	0C0h			; DAC
(1) 1530/     802 : 28 2F               		jr	z,.eff_dac
(1) 1531/     804 : FE D0               		cp	0D0h			; PWM
(1) 1532/     806 : 28 3D               		jr	z,.eff_pwm
(1) 1533/     808 : C9                  		ret
(1) 1534/     809 :                     
(1) 1535/     809 :                     ; --------------------------------
(1) 1536/     809 :                     
(1) 1537/     809 :                     .eff_psg:
(1) 1538/     809 : 7A                  		ld	a,d
(1) 1539/     80A : FE 04               		cp	4		; Effect D?
(1) 1540/     80C : CA 5C 08            		jp	z,.effPsg_D
(1) 1541/     80F : FE 05               		cp	5		; Effect E?
(1) 1542/     811 : CA DC 08            		jp	z,.effPsg_E
(1) 1543/     814 : CF                  		rst	8
(1) 1544/     815 : FE 06               		cp	6		; Effect F?
(1) 1545/     817 : CA 0E 09            		jp	z,.effPsg_F
(1) 1546/     81A : CF                  		rst	8
(1) 1547/     81B : C9                  		ret
(1) 1548/     81C :                     .eff_fm:
(1) 1549/     81C : 7A                  		ld	a,d
(1) 1550/     81D : FE 04               		cp	4		; Effect D?
(1) 1551/     81F : CA 8A 08            		jp	z,.effFm_D
(1) 1552/     822 : FE 05               		cp	5		; Effect E?
(1) 1553/     824 : CA E6 08            		jp	z,.effFm_E
(1) 1554/     827 : CF                  		rst	8
(1) 1555/     828 : FE 06               		cp	6		; Effect F?
(1) 1556/     82A : CA 1C 09            		jp	z,.effFm_F
(1) 1557/     82D : FE 18               		cp	24		; Effect X?
(1) 1558/     82F : CA F9 09            		jp	z,.effFm_X
(1) 1559/     832 : C9                  		ret
(1) 1560/     833 :                     .eff_dac:
(1) 1561/     833 : 7A                  		ld	a,d
(1) 1562/     834 : FE 05               		cp	5		; Effect E?
(1) 1563/     836 : CA F4 08            		jp	z,.effDac_E
(1) 1564/     839 : FE 06               		cp	6		; Effect F?
(1) 1565/     83B : CA 23 09            		jp	z,.effDac_F
(1) 1566/     83E : CF                  		rst	8
(1) 1567/     83F : FE 18               		cp	24		; Effect X?
(1) 1568/     841 : CA F9 09            		jp	z,.effFm_X
(1) 1569/     844 : C9                  		ret
(1) 1570/     845 :                     .eff_pwm:
(1) 1571/     845 : 3E 01               		ld	a,1
(1) 1572/     847 : 32 30 00            		ld	(marsUpd),a
(1) 1573/     84A : 7A                  		ld	a,d
(1) 1574/     84B :                     ; 		cp	4		; Effect D?
(1) 1575/     84B :                     ; 		jp	z,.effFm_D
(1) 1576/     84B : FE 05               		cp	5		; Effect E?
(1) 1577/     84D : CA 01 09            		jp	z,.effPwm_E
(1) 1578/     850 : CF                  		rst	8
(1) 1579/     851 : FE 06               		cp	6		; Effect F?
(1) 1580/     853 : CA 29 09            		jp	z,.effPwm_F
(1) 1581/     856 : FE 18               		cp	24		; Effect X?
(1) 1582/     858 : CA E0 09            		jp	z,.effPwm_X	; recycle FM's panning
(1) 1583/     85B : C9                  		ret
(1) 1584/     85C :                     
(1) 1585/     85C :                     ; --------------------------------
(1) 1586/     85C :                     ; Effect D
(1) 1587/     85C :                     ; --------------------------------
(1) 1588/     85C :                     
(1) 1589/     85C :                     .effPsg_D:
(1) 1590/     85C : 7B                  		ld	a,e
(1) 1591/     85D : B7                  		or	a
(1) 1592/     85E : C8                  		ret	z
(1) 1593/     85F : 06 00               		ld	b,0
(1) 1594/     861 : DD 7E 02            		ld	a,(ix+2)
(1) 1595/     864 : E6 03               		and	011b
(1) 1596/     866 : 4F                  		ld	c,a
(1) 1597/     867 : DD 21 96 16         		ld	ix,psgcom
(1) 1598/     86B : DD 09               		add	ix,bc
(1) 1599/     86D : CD B9 08            		call	.grab_dval
(1) 1600/     870 : 87                  		add	a,a
(1) 1601/     871 : 87                  		add	a,a
(1) 1602/     872 : 87                  		add	a,a
(1) 1603/     873 : 4F                  		ld	c,a
(1) 1604/     874 : CB 79               		bit	7,c
(1) 1605/     876 : 20 09               		jr	nz,.lowp
(1) 1606/     878 : DD 7E 30            		ld	a,(ix+PVOL)
(1) 1607/     87B : 81                  		add	a,c
(1) 1608/     87C : D8                  		ret	c
(1) 1609/     87D : DD 77 30            		ld	(ix+PVOL),a
(1) 1610/     880 : C9                  		ret
(1) 1611/     881 :                     .lowp:
(1) 1612/     881 : DD 7E 30            		ld	a,(ix+PVOL)
(1) 1613/     884 : 81                  		add	a,c
(1) 1614/     885 : D0                  		ret	nc
(1) 1615/     886 : DD 77 30            		ld	(ix+PVOL),a
(1) 1616/     889 : C9                  		ret
(1) 1617/     88A :                     .effFm_D:
(1) 1618/     88A : 7B                  		ld	a,e
(1) 1619/     88B : B7                  		or	a
(1) 1620/     88C : C8                  		ret	z
(1) 1621/     88D : 06 00               		ld	b,0
(1) 1622/     88F : DD 7E 02            		ld	a,(ix+2)
(1) 1623/     892 : E6 07               		and	111b
(1) 1624/     894 : 4F                  		ld	c,a
(1) 1625/     895 : DD 21 72 16         		ld	ix,fmcom
(1) 1626/     899 : DD 09               		add	ix,bc
(1) 1627/     89B : CD B9 08            		call	.grab_dval
(1) 1628/     89E :                     ; 		srl	a		; TODO: checar que tanto
(1) 1629/     89E :                     ; 		srl	a		; shifteo esto
(1) 1630/     89E : 4F                  		ld	c,a
(1) 1631/     89F : DD CB 00 EE         		set	5,(ix)
(1) 1632/     8A3 : CB 79               		bit	7,c
(1) 1633/     8A5 : 20 09               		jr	nz,.lowpf
(1) 1634/     8A7 : DD 7E 0C            		ld	a,(ix+FMVOL)
(1) 1635/     8AA : 81                  		add	a,c
(1) 1636/     8AB : D8                  		ret	c
(1) 1637/     8AC : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1638/     8AF : C9                  		ret
(1) 1639/     8B0 :                     .lowpf:
(1) 1640/     8B0 : DD 7E 0C            		ld	a,(ix+FMVOL)
(1) 1641/     8B3 : 81                  		add	a,c
(1) 1642/     8B4 : D0                  		ret	nc
(1) 1643/     8B5 : DD 77 0C            		ld	(ix+FMVOL),a
(1) 1644/     8B8 : C9                  		ret
(1) 1645/     8B9 :                     
(1) 1646/     8B9 :                     ; a - increment/decrement value
(1) 1647/     8B9 :                     .grab_dval:
(1) 1648/     8B9 : 7B                  		ld	a,e
(1) 1649/     8BA : E6 F0               		and	11110000b
(1) 1650/     8BC : FE F0               		cp	11110000b
(1) 1651/     8BE : 28 03               		jr	z,.go_down
(1) 1652/     8C0 : B7                  		or	a
(1) 1653/     8C1 : 20 09               		jr	nz,.go_up
(1) 1654/     8C3 :                     .go_down:
(1) 1655/     8C3 : 7B                  		ld	a,e
(1) 1656/     8C4 : E6 0F               		and	00001111b
(1) 1657/     8C6 : CB 7B               		bit	7,e
(1) 1658/     8C8 : C0                  		ret	nz
(1) 1659/     8C9 : 87                  		add	a,a
(1) 1660/     8CA : CF                  		rst	8
(1) 1661/     8CB : C9                  		ret
(1) 1662/     8CC :                     .go_up:
(1) 1663/     8CC : 7B                  		ld	a,e
(1) 1664/     8CD : 0F                  		rrca
(1) 1665/     8CE : 0F                  		rrca
(1) 1666/     8CF : 0F                  		rrca
(1) 1667/     8D0 : 0F                  		rrca
(1) 1668/     8D1 : CF                  		rst	8
(1) 1669/     8D2 : E6 0F               		and	00001111b
(1) 1670/     8D4 : ED 44               		neg	a
(1) 1671/     8D6 : CB 5B               		bit	3,e
(1) 1672/     8D8 : C0                  		ret	nz
(1) 1673/     8D9 : 87                  		add	a,a
(1) 1674/     8DA : CF                  		rst	8
(1) 1675/     8DB : C9                  		ret
(1) 1676/     8DC :                     
(1) 1677/     8DC :                     ; --------------------------------
(1) 1678/     8DC :                     ; Effect E
(1) 1679/     8DC :                     ; --------------------------------
(1) 1680/     8DC :                     
(1) 1681/     8DC :                     .effPsg_E:
(1) 1682/     8DC : CD C1 09            		call	.grab_prtm
(1) 1683/     8DF : 16 00               		ld	d,0
(1) 1684/     8E1 : 87                  		add	a,a
(1) 1685/     8E2 : 5F                  		ld	e,a
(1) 1686/     8E3 : C3 97 09            		jp	.freqinc_psg
(1) 1687/     8E6 :                     .effFm_E:
(1) 1688/     8E6 : CD C1 09            		call	.grab_prtm
(1) 1689/     8E9 : ED 44               		neg	a
(1) 1690/     8EB : B7                  		or	a
(1) 1691/     8EC : 28 02               		jr	z,.e_neg
(1) 1692/     8EE : 16 FF               		ld	d,-1
(1) 1693/     8F0 :                     .e_neg:
(1) 1694/     8F0 : 5F                  		ld	e,a
(1) 1695/     8F1 : C3 71 09            		jp	.freqinc_fm
(1) 1696/     8F4 :                     .effDac_E:
(1) 1697/     8F4 : CD C1 09            		call	.grab_prtm
(1) 1698/     8F7 : ED 44               		neg	a
(1) 1699/     8F9 : B7                  		or	a
(1) 1700/     8FA : 28 02               		jr	z,.e_negd
(1) 1701/     8FC : 16 FF               		ld	d,-1
(1) 1702/     8FE :                     .e_negd:
(1) 1703/     8FE : 5F                  		ld	e,a
(1) 1704/     8FF : 18 60               		jr	.freqinc_dac
(1) 1705/     901 :                     
(1) 1706/     901 :                     .effPwm_E:
(1) 1707/     901 : CD C1 09            		call	.grab_prtm
(1) 1708/     904 :                     ; 		sra	a
(1) 1709/     904 :                     ; 		sra	a
(1) 1710/     904 : ED 44               		neg	a
(1) 1711/     906 : B7                  		or	a
(1) 1712/     907 : 28 02               		jr	z,.e_fnegd2
(1) 1713/     909 : 16 FF               		ld	d,-1
(1) 1714/     90B :                     .e_fnegd2:
(1) 1715/     90B : 5F                  		ld	e,a
(1) 1716/     90C : 18 1F               		jr	.freqinc_pwm
(1) 1717/     90E :                     
(1) 1718/     90E :                     ; --------------------------------
(1) 1719/     90E :                     ; Effect F
(1) 1720/     90E :                     ; --------------------------------
(1) 1721/     90E :                     
(1) 1722/     90E :                     ; PSG
(1) 1723/     90E :                     .effPsg_F:
(1) 1724/     90E : CD C1 09            		call	.grab_prtm
(1) 1725/     911 : 87                  		add	a,a
(1) 1726/     912 : ED 44               		neg	a
(1) 1727/     914 : B7                  		or	a
(1) 1728/     915 : 28 02               		jr	z,.e_negp
(1) 1729/     917 : 16 FF               		ld	d,-1
(1) 1730/     919 :                     .e_negp:
(1) 1731/     919 : 5F                  		ld	e,a
(1) 1732/     91A : 18 7B               		jr	.freqinc_psg
(1) 1733/     91C :                     .effFm_F:
(1) 1734/     91C : CD C1 09            		call	.grab_prtm
(1) 1735/     91F : 87                  		add	a,a
(1) 1736/     920 : 5F                  		ld	e,a
(1) 1737/     921 : 18 4E               		jr	.freqinc_fm
(1) 1738/     923 :                     .effDac_F:
(1) 1739/     923 : CD C1 09            		call	.grab_prtm
(1) 1740/     926 : 5F                  		ld	e,a
(1) 1741/     927 : 18 38               		jr	.freqinc_dac
(1) 1742/     929 :                     .effPwm_F:
(1) 1743/     929 : CD C1 09            		call	.grab_prtm
(1) 1744/     92C :                     ; 		sra	a
(1) 1745/     92C :                     ; 		sra	a
(1) 1746/     92C : 5F                  		ld	e,a
(1) 1747/     92D :                     
(1) 1748/     92D :                     ; --------------------------------
(1) 1749/     92D :                     ; For effects E and F:
(1) 1750/     92D :                     ;
(1) 1751/     92D :                     ; de - freq incr/decr
(1) 1752/     92D :                     
(1) 1753/     92D :                     .freqinc_pwm:
(1) 1754/     92D : DD 7E 02            		ld	a,(ix+2)
(1) 1755/     930 : E6 07               		and	111b
(1) 1756/     932 : DD 21 3A 16         		ld	ix,pwmcom
(1) 1757/     936 : 06 00               		ld	b,0
(1) 1758/     938 : 4F                  		ld	c,a
(1) 1759/     939 : CF                  		rst	8
(1) 1760/     93A : DD 09               		add	ix,bc
(1) 1761/     93C : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1762/     93F : E6 03               		and	00000011b
(1) 1763/     941 : 67                  		ld	h,a
(1) 1764/     942 : DD 6E 10            		ld	l,(ix+PWPHL)
(1) 1765/     945 : 19                  		add	hl,de
(1) 1766/     946 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1767/     949 : E6 FC               		and	11111100b
(1) 1768/     94B : CF                  		rst	8
(1) 1769/     94C : B4                  		or	h
(1) 1770/     94D : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1771/     950 : DD 75 10            		ld	(ix+PWPHL),l
(1) 1772/     953 : DD 7E 00            		ld	a,(ix)			; pitch bend request
(1) 1773/     956 : F6 10               		or	00010000b
(1) 1774/     958 : DD 77 00            		ld	(ix),a
(1) 1775/     95B : 3E 01               		ld	a,1
(1) 1776/     95D : 32 30 00            		ld	(marsUpd),a
(1) 1777/     960 : C9                  		ret
(1) 1778/     961 :                     
(1) 1779/     961 :                     .freqinc_dac:
(1) 1780/     961 : 2A 54 1E            		ld	hl,(wave_Pitch)		; tricky one...
(1) 1781/     964 : 19                  		add	hl,de
(1) 1782/     965 : 22 54 1E            		ld	(wave_Pitch),hl
(1) 1783/     968 : 3A C6 17            		ld	a,(daccom)
(1) 1784/     96B : F6 10               		or	00010000b
(1) 1785/     96D : 32 C6 17            		ld	(daccom),a
(1) 1786/     970 : C9                  		ret
(1) 1787/     971 :                     
(1) 1788/     971 :                     .freqinc_fm:
(1) 1789/     971 : DD 7E 02            		ld	a,(ix+2)
(1) 1790/     974 : E6 07               		and	111b
(1) 1791/     976 : DD 21 72 16         		ld	ix,fmcom
(1) 1792/     97A : 06 00               		ld	b,0
(1) 1793/     97C : 4F                  		ld	c,a
(1) 1794/     97D : CF                  		rst	8
(1) 1795/     97E : DD 09               		add	ix,bc
(1) 1796/     980 : DD 66 18            		ld	h,(ix+FMFRQH)
(1) 1797/     983 : DD 6E 1E            		ld	l,(ix+FMFRQL)
(1) 1798/     986 : 19                  		add	hl,de
(1) 1799/     987 : DD 74 18            		ld	(ix+FMFRQH),h
(1) 1800/     98A : CF                  		rst	8
(1) 1801/     98B : DD 75 1E            		ld	(ix+FMFRQL),l
(1) 1802/     98E : DD 7E 00            		ld	a,(ix)
(1) 1803/     991 : F6 01               		or	00000001b
(1) 1804/     993 : DD 77 00            		ld	(ix),a
(1) 1805/     996 : C9                  		ret
(1) 1806/     997 :                     .freqinc_psg:
(1) 1807/     997 : DD 7E 02            		ld	a,(ix+2)
(1) 1808/     99A : E6 03               		and	011b
(1) 1809/     99C : DD 21 96 16         		ld	ix,psgcom
(1) 1810/     9A0 : 06 00               		ld	b,0
(1) 1811/     9A2 : 4F                  		ld	c,a
(1) 1812/     9A3 : DD 09               		add	ix,bc
(1) 1813/     9A5 : CF                  		rst	8
(1) 1814/     9A6 : DD 66 20            		ld	h,(ix+DTH)
(1) 1815/     9A9 : DD 6E 1C            		ld	l,(ix+DTL)
(1) 1816/     9AC : 19                  		add	hl,de
(1) 1817/     9AD : 7C                  		ld	a,h
(1) 1818/     9AE : E6 07               		and	00000111b
(1) 1819/     9B0 : 67                  		ld	h,a
(1) 1820/     9B1 : CF                  		rst	8
(1) 1821/     9B2 : DD 74 20            		ld	(ix+DTH),h
(1) 1822/     9B5 : DD 75 1C            		ld	(ix+DTL),l
(1) 1823/     9B8 : DD 7E 00            		ld	a,(ix)
(1) 1824/     9BB : F6 01               		or	00000001b
(1) 1825/     9BD : DD 77 00            		ld	(ix),a
(1) 1826/     9C0 : C9                  		ret
(1) 1827/     9C1 :                     ; grab portametro value
(1) 1828/     9C1 :                     .grab_prtm:
(1) 1829/     9C1 : 16 00               		ld	d,0
(1) 1830/     9C3 : 7B                  		ld	a,e
(1) 1831/     9C4 : E6 F0               		and	11110000b
(1) 1832/     9C6 : FE F0               		cp	0F0h
(1) 1833/     9C8 : 20 07               		jr	nz,.e_nof
(1) 1834/     9CA : CF                  		rst	8
(1) 1835/     9CB : 7B                  		ld	a,e
(1) 1836/     9CC : E6 0F               		and	0Fh
(1) 1837/     9CE : 87                  		add	a,a
(1) 1838/     9CF : 18 0E               		jr	.e_go
(1) 1839/     9D1 :                     .e_nof:
(1) 1840/     9D1 : CF                  		rst	8
(1) 1841/     9D2 : FE E0               		cp	0E0h
(1) 1842/     9D4 : 20 05               		jr	nz,.e_noef
(1) 1843/     9D6 : 7B                  		ld	a,e
(1) 1844/     9D7 : E6 0F               		and	0Fh
(1) 1845/     9D9 : 18 04               		jr	.e_go
(1) 1846/     9DB :                     .e_noef:
(1) 1847/     9DB : CF                  		rst	8
(1) 1848/     9DC : 7B                  		ld	a,e
(1) 1849/     9DD : 87                  		add	a,a
(1) 1850/     9DE : 87                  		add	a,a
(1) 1851/     9DF :                     .e_go:
(1) 1852/     9DF : C9                  		ret
(1) 1853/     9E0 :                     
(1) 1854/     9E0 :                     ; --------------------------------
(1) 1855/     9E0 :                     ; Effect X: Panning
(1) 1856/     9E0 :                     ; --------------------------------
(1) 1857/     9E0 :                     
(1) 1858/     9E0 :                     ; PWM points here too.
(1) 1859/     9E0 :                     .effPwm_X:
(1) 1860/     9E0 : 7B                  		ld	a,e
(1) 1861/     9E1 : 07                  		rlca
(1) 1862/     9E2 : 07                  		rlca
(1) 1863/     9E3 : E6 03               		and	00000011b
(1) 1864/     9E5 : 21 33 0A            		ld	hl,.fmpan_list
(1) 1865/     9E8 : 11 00 00            		ld	de,0
(1) 1866/     9EB : 5F                  		ld	e,a
(1) 1867/     9EC : CF                  		rst	8
(1) 1868/     9ED : 19                  		add	hl,de
(1) 1869/     9EE : 5E                  		ld	e,(hl)
(1) 1870/     9EF : FD 7E 01            		ld	a,(iy+chnl_Flags)
(1) 1871/     9F2 : E6 CF               		and	11001111b
(1) 1872/     9F4 : B3                  		or	e
(1) 1873/     9F5 : FD 77 01            		ld	(iy+chnl_Flags),a
(1) 1874/     9F8 : C9                  		ret
(1) 1875/     9F9 :                     
(1) 1876/     9F9 :                     ; PWM points here too.
(1) 1877/     9F9 :                     .effFm_X:
(1) 1878/     9F9 : DD 7E 02            		ld	a,(ix+2)
(1) 1879/     9FC : E6 07               		and	111b
(1) 1880/     9FE : 06 00               		ld	b,0
(1) 1881/     A00 : 4F                  		ld	c,a
(1) 1882/     A01 : DD 21 72 16         		ld	ix,fmcom
(1) 1883/     A05 : DD 09               		add	ix,bc
(1) 1884/     A07 : 7B                  		ld	a,e
(1) 1885/     A08 : 07                  		rlca
(1) 1886/     A09 : 07                  		rlca
(1) 1887/     A0A : E6 03               		and	00000011b
(1) 1888/     A0C : 21 33 0A            		ld	hl,.fmpan_list
(1) 1889/     A0F : 11 00 00            		ld	de,0
(1) 1890/     A12 : 5F                  		ld	e,a
(1) 1891/     A13 : CF                  		rst	8
(1) 1892/     A14 : 19                  		add	hl,de
(1) 1893/     A15 : 5E                  		ld	e,(hl)
(1) 1894/     A16 : FD 7E 01            		ld	a,(iy+chnl_Flags)
(1) 1895/     A19 : E6 CF               		and	11001111b
(1) 1896/     A1B : B3                  		or	e
(1) 1897/     A1C : FD 77 01            		ld	(iy+chnl_Flags),a
(1) 1898/     A1F : FD 7E 01            		ld	a,(iy+chnl_Flags)
(1) 1899/     A22 : 87                  		add	a,a		; move LR bits
(1) 1900/     A23 : 87                  		add	a,a
(1) 1901/     A24 : 2F                  		cpl
(1) 1902/     A25 : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(1) 1903/     A27 : DD 77 12            		ld	(ix+FMPAN),a
(1) 1904/     A2A :                     
(1) 1905/     A2A :                     ; 		ld	a,(iy+chnl_Flags)
(1) 1906/     A2A :                     ; 		add	a,a		; move LR bits
(1) 1907/     A2A :                     ; 		add	a,a
(1) 1908/     A2A :                     ; 		cpl
(1) 1909/     A2A :                     ; 		and	11000000b	; Set Panning ENABLE bits
(1) 1910/     A2A :                     ; 		ld	(ix+FMPAN),a
(1) 1911/     A2A :                     ; 		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(1) 1912/     A2A :                     ; 		rst	8
(1) 1913/     A2A :                     ; 		ld	(ix+FMKEYS),e
(1) 1914/     A2A : DD 7E 00            		ld	a,(ix)		; key on
(1) 1915/     A2D : F6 40               		or	01000000b
(1) 1916/     A2F : DD 77 00            		ld	(ix),a
(1) 1917/     A32 :                     
(1) 1918/     A32 : C9                  		ret
(1) 1919/     A33 :                     .fmpan_list:
(1) 1920/     A33 : 10                  		db 00010000b	; 000h
(1) 1921/     A34 : 10                  		db 00010000b	; 040h
(1) 1922/     A35 : 00                  		db 00000000b	; 080h
(1) 1923/     A36 : 20                  		db 00100000b	; 0C0h
(1) 1924/     A37 :                     
(1) 1925/     A37 :                     ; ----------------------------------------
(1) 1926/     A37 :                     ; bit 0
(1) 1927/     A37 :                     ; ----------------------------------------
(1) 1928/     A37 :                     
(1) 1929/     A37 :                     .req_note:
(1) 1930/     A37 : 2A 44 1E            		ld	hl,(currInsPos)
(1) 1931/     A3A : DD 2A 42 1E         		ld	ix,(currTblPos)
(1) 1932/     A3E : 7E                  		ld	a,(hl)
(1) 1933/     A3F : 4F                  		ld	c,a		; special copy
(1) 1934/     A40 : E6 F0               		and	11110000b
(1) 1935/     A42 : FE 80               		cp	80h		; PSG normal
(1) 1936/     A44 : CA 20 0B            		jp	z,.note_psg
(1) 1937/     A47 : FE 90               		cp	90h		; PSG noise
(1) 1938/     A49 : CA F3 0A            		jp	z,.note_psgn
(1) 1939/     A4C : FE A0               		cp	0A0h
(1) 1940/     A4E : CA F1 0B            		jp	z,.note_fm
(1) 1941/     A51 : CF                  		rst	8
(1) 1942/     A52 : FE B0               		cp	0B0h
(1) 1943/     A54 : CA CD 0B            		jp	z,.note_fm3
(1) 1944/     A57 : FE C0               		cp	0C0h
(1) 1945/     A59 : CA 8A 0B            		jp	z,.note_dac
(1) 1946/     A5C : FE D0               		cp	0D0h
(1) 1947/     A5E : CA 62 0A            		jp	z,.note_pwm
(1) 1948/     A61 : C9                  		ret
(1) 1949/     A62 :                     
(1) 1950/     A62 :                     ; --------------------------------
(1) 1951/     A62 :                     ; Note: PWM
(1) 1952/     A62 :                     ; --------------------------------
(1) 1953/     A62 :                     
(1) 1954/     A62 :                     .note_pwm:
(1) 1955/     A62 : 3E 01               		ld	a,1			; Send MARS request
(1) 1956/     A64 : 32 30 00            		ld	(marsUpd),a
(1) 1957/     A67 : 21 3A 16            		ld	hl,pwmcom
(1) 1958/     A6A : DD 7E 02            		ld	a,(ix+2)
(1) 1959/     A6D : E6 07               		and	000111b
(1) 1960/     A6F : 06 00               		ld	b,0
(1) 1961/     A71 : 4F                  		ld	c,a
(1) 1962/     A72 : 09                  		add	hl,bc
(1) 1963/     A73 : CF                  		rst	8
(1) 1964/     A74 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 1965/     A77 : FE FF               		cp	-1
(1) 1966/     A79 : CA C4 0A            		jp	z,.pwm_keyoff
(1) 1967/     A7C : FE FE               		cp	-2
(1) 1968/     A7E : CA C8 0A            		jp	z,.pwm_keycut
(1) 1969/     A81 : 11 00 00            		ld	de,0
(1) 1970/     A84 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(1) 1971/     A87 : 83                  		add	a,e
(1) 1972/     A88 : 87                  		add	a,a
(1) 1973/     A89 : CF                  		rst	8
(1) 1974/     A8A : 5F                  		ld	e,a
(1) 1975/     A8B : 79                  		ld	a,c
(1) 1976/     A8C : F6 D0               		or	0D0h
(1) 1977/     A8E : FD 77 00            		ld	(iy+chnl_Chip),a	; Set as PWM
(1) 1978/     A91 : E5                  		push	hl
(1) 1979/     A92 : DD E1               		pop	ix
(1) 1980/     A94 : 21 45 15            		ld	hl,wavFreq_List
(1) 1981/     A97 : 19                  		add	hl,de
(1) 1982/     A98 : 5E                  		ld	e,(hl)
(1) 1983/     A99 : 23                  		inc	hl
(1) 1984/     A9A : 56                  		ld	d,(hl)			; note: max 111b
(1) 1985/     A9B : CF                  		rst	8
(1) 1986/     A9C : DD CB 00 C6         		set	0,(ix)			; Note-on
(1) 1987/     AA0 : 7A                  		ld	a,d
(1) 1988/     AA1 : FD CB 01 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(1) 1989/     AA5 : 28 06               		jr	z,.pwmn_kpv
(1) 1990/     AA7 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(1) 1991/     AAA : E6 FC               		and	11111100b
(1) 1992/     AAC : B2                  		or	d
(1) 1993/     AAD :                     .pwmn_kpv:
(1) 1994/     AAD : DD 77 08            		ld	(ix+PWPTH_V),a
(1) 1995/     AB0 : DD 73 10            		ld	(ix+PWPHL),e
(1) 1996/     AB3 : DD 7E 18            		ld	a,(ix+PWOUTF)
(1) 1997/     AB6 : E6 CF               		and	11001111b		; Keep other bits
(1) 1998/     AB8 : 4F                  		ld	c,a
(1) 1999/     AB9 : FD 7E 01            		ld	a,(iy+chnl_Flags)	; 00LR 0000
(1) 2000/     ABC : 2F                  		cpl
(1) 2001/     ABD : E6 30               		and	00110000b
(1) 2002/     ABF : B1                  		or	c
(1) 2003/     AC0 : DD 77 18            		ld	(ix+PWOUTF),a
(1) 2004/     AC3 : C9                  		ret
(1) 2005/     AC4 :                     
(1) 2006/     AC4 :                     ; PSG Keyoff
(1) 2007/     AC4 :                     .pwm_keyoff:
(1) 2008/     AC4 : 0E 02               		ld	c,010b
(1) 2009/     AC6 : 71                  		ld	(hl),c
(1) 2010/     AC7 : C9                  		ret
(1) 2011/     AC8 :                     .pwm_keycut:
(1) 2012/     AC8 : 0E 04               		ld	c,100b
(1) 2013/     ACA : 18 06               		jr	.chnl_unlink
(1) 2014/     ACC :                     
(1) 2015/     ACC :                     ; 		ld	a,100b			; Request DAC stop
(1) 2016/     ACC :                     ; 		ld	(daccom),a
(1) 2017/     ACC :                     ; .doff:
(1) 2018/     ACC :                     ; 		ld	hl,0
(1) 2019/     ACC :                     ; 		ld	(tblFM6),hl
(1) 2020/     ACC :                     ; 		ld	(iy+chnl_Chip),0
(1) 2021/     ACC :                     ; 		ret
(1) 2022/     ACC :                     
(1) 2023/     ACC :                     ; --------------------------------
(1) 2024/     ACC :                     ; Note: PSG1-3,PSGN
(1) 2025/     ACC :                     ; --------------------------------
(1) 2026/     ACC :                     
(1) 2027/     ACC :                     ; PSG Keyoff
(1) 2028/     ACC :                     .poff:
(1) 2029/     ACC : 0E 02               		ld	c,010b
(1) 2030/     ACE : 71                  		ld	(hl),c
(1) 2031/     ACF : C9                  		ret
(1) 2032/     AD0 :                     ; PSG Keycut
(1) 2033/     AD0 :                     .pcut:
(1) 2034/     AD0 : 0E 04               		ld	c,100b
(1) 2035/     AD2 :                     .chnl_unlink:
(1) 2036/     AD2 : CF                  		rst	8
(1) 2037/     AD3 : FD E5               		push	iy
(1) 2038/     AD5 : D1                  		pop	de
(1) 2039/     AD6 : DD 7E 00            		ld	a,(ix)
(1) 2040/     AD9 : BB                  		cp	e
(1) 2041/     ADA : C0                  		ret	nz
(1) 2042/     ADB : DD 7E 01            		ld	a,(ix+1)
(1) 2043/     ADE : BA                  		cp	d
(1) 2044/     ADF : C0                  		ret	nz
(1) 2045/     AE0 : CF                  		rst	8
(1) 2046/     AE1 : 71                  		ld	(hl),c
(1) 2047/     AE2 : DD 36 00 00         		ld	(ix),0
(1) 2048/     AE6 : DD 36 01 00         		ld	(ix+1),0
(1) 2049/     AEA : DD 36 03 00         		ld	(ix+3),0	; pitch zero
(1) 2050/     AEE : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 2051/     AF2 : C9                  		ret
(1) 2052/     AF3 :                     
(1) 2053/     AF3 :                     ; Play PSG note
(1) 2054/     AF3 :                     .note_psgn:
(1) 2055/     AF3 : DD 7E 02            		ld	a,(ix+2)
(1) 2056/     AF6 : F6 90               		or	90h
(1) 2057/     AF8 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2058/     AFB : 21 99 16            		ld 	hl,psgcom+3
(1) 2059/     AFE : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 2060/     B01 : FE FE               		cp	-2
(1) 2061/     B03 : CA D0 0A            		jp	z,.pcut
(1) 2062/     B06 : FE FF               		cp	-1
(1) 2063/     B08 : CA CC 0A            		jp	z,.poff
(1) 2064/     B0B : 5F                  		ld	e,a
(1) 2065/     B0C : DD 7E 04            		ld 	a,(ix+4)
(1) 2066/     B0F : 32 5E 1E            		ld	(psgHatMode),a
(1) 2067/     B12 : E6 03               		and	011b
(1) 2068/     B14 : FE 03               		cp	011b
(1) 2069/     B16 : 20 05               		jr	nz,.np2_n
(1) 2070/     B18 : 3E 04               		ld	a,100b
(1) 2071/     B1A : 32 98 16            		ld	(psgcom+2),a
(1) 2072/     B1D :                     .np2_n:
(1) 2073/     B1D : 7B                  		ld	a,e
(1) 2074/     B1E : 18 32               		jr	.notepsg_fn
(1) 2075/     B20 :                     .note_psg:
(1) 2076/     B20 : DD 7E 02            		ld	a,(ix+2)
(1) 2077/     B23 : F6 80               		or	80h
(1) 2078/     B25 : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2079/     B28 : DD 7E 02            		ld	a,(ix+2)
(1) 2080/     B2B : CF                  		rst	8
(1) 2081/     B2C : E6 03               		and	11b
(1) 2082/     B2E : 16 00               		ld	d,0
(1) 2083/     B30 : 5F                  		ld	e,a
(1) 2084/     B31 : 21 96 16            		ld 	hl,psgcom
(1) 2085/     B34 : 19                  		add	hl,de
(1) 2086/     B35 : FE 02               		cp	2
(1) 2087/     B37 : 20 0C               		jr	nz,.notepsg_c
(1) 2088/     B39 : 3A 5E 1E            		ld	a,(psgHatMode)
(1) 2089/     B3C : E6 03               		and	011b
(1) 2090/     B3E : FE 03               		cp	011b
(1) 2091/     B40 : 20 03               		jr	nz,.notepsg_c
(1) 2092/     B42 : 36 04               		ld	(hl),100b	; key-cut PSG3 but dont unlink
(1) 2093/     B44 : C9                  		ret
(1) 2094/     B45 :                     .notepsg_c:
(1) 2095/     B45 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 2096/     B48 : FE FE               		cp	-2
(1) 2097/     B4A : CA D0 0A            		jp	z,.pcut
(1) 2098/     B4D : FE FF               		cp	-1
(1) 2099/     B4F : CA CC 0A            		jp	z,.poff
(1) 2100/     B52 :                     .notepsg_fn:
(1) 2101/     B52 : CF                  		rst	8
(1) 2102/     B53 : E5                  		push	hl		; save psgcom
(1) 2103/     B54 : 21 53 14            		ld	hl,psgFreq_List
(1) 2104/     B57 : DD 4E 03            		ld	c,(ix+3)
(1) 2105/     B5A : 81                  		add	a,c
(1) 2106/     B5B : 87                  		add	a,a
(1) 2107/     B5C : 11 00 00            		ld	de,0
(1) 2108/     B5F : 5F                  		ld	e,a
(1) 2109/     B60 : 19                  		add	hl,de
(1) 2110/     B61 : 5E                  		ld	e,(hl)
(1) 2111/     B62 : 23                  		inc	hl
(1) 2112/     B63 : 56                  		ld	d,(hl)
(1) 2113/     B64 : 01 00 00            		ld	bc,0
(1) 2114/     B67 : E6 03               		and	11b
(1) 2115/     B69 : 4F                  		ld	c,a
(1) 2116/     B6A : DD E5               		push	ix		; swap ix to hl
(1) 2117/     B6C : E1                  		pop	hl
(1) 2118/     B6D : CF                  		rst	8
(1) 2119/     B6E : 23                  		inc	hl		; skip link
(1) 2120/     B6F : 23                  		inc	hl
(1) 2121/     B70 : 23                  		inc 	hl		; channel id
(1) 2122/     B71 : 23                  		inc	hl		; pitch
(1) 2123/     B72 :                     ; 		ld	a,c
(1) 2124/     B72 :                     ; 		cp	3
(1) 2125/     B72 :                     ; 		jr	nz,.npsg2
(1) 2126/     B72 :                     ; 		ld 	a,(ix+4)
(1) 2127/     B72 :                     ; 		ld	(psgHatMode),a
(1) 2128/     B72 :                     ; .npsg2:
(1) 2129/     B72 : DD E1               		pop	ix			; restore psgcom as ix
(1) 2130/     B74 : FD 7E 01            		ld	a,(iy+chnl_Flags)	; Check is volume bit
(1) 2131/     B77 : CB 57               		bit	2,a			; is being used
(1) 2132/     B79 : 20 04               		jr	nz,.nodefv
(1) 2133/     B7B : DD 36 30 00         		ld	(ix+PVOL),0		; if not, set max volume
(1) 2134/     B7F :                     .nodefv:
(1) 2135/     B7F : DD 73 1C            		ld	(ix+DTL),e
(1) 2136/     B82 : DD 72 20            		ld	(ix+DTH),d
(1) 2137/     B85 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 2138/     B89 : C9                  		ret
(1) 2139/     B8A :                     
(1) 2140/     B8A :                     ; --------------------------------
(1) 2141/     B8A :                     ; Note: FM,FM3,FM6
(1) 2142/     B8A :                     ; --------------------------------
(1) 2143/     B8A :                     
(1) 2144/     B8A :                     .note_dac:
(1) 2145/     B8A : 21 C6 17            		ld	hl,daccom
(1) 2146/     B8D : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 2147/     B90 : FE FF               		cp	-1
(1) 2148/     B92 : CA 8E 0C            		jp	z,.fm_keyoff
(1) 2149/     B95 : FE FE               		cp	-2
(1) 2150/     B97 : CA 89 0C            		jp	z,.fm_keycut
(1) 2151/     B9A : FD 36 00 C0         		ld	(iy+chnl_Chip),0C0h	; Set as DAC
(1) 2152/     B9E : 11 00 00            		ld	de,0
(1) 2153/     BA1 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(1) 2154/     BA4 : 83                  		add	a,e
(1) 2155/     BA5 : 87                  		add	a,a
(1) 2156/     BA6 : 5F                  		ld	e,a
(1) 2157/     BA7 : 21 45 15            		ld	hl,wavFreq_List
(1) 2158/     BAA : 19                  		add	hl,de
(1) 2159/     BAB : 7E                  		ld	a,(hl)
(1) 2160/     BAC : 23                  		inc	hl
(1) 2161/     BAD : 66                  		ld	h,(hl)
(1) 2162/     BAE : CF                  		rst	8
(1) 2163/     BAF : 6F                  		ld	l,a
(1) 2164/     BB0 : 11 E5 FF            		ld	de,ZSET_WTUNE		; Fine-tune to desired
(1) 2165/     BB3 : 19                  		add	hl,de			; WAVE frequency
(1) 2166/     BB4 : 22 54 1E            		ld	(wave_Pitch),hl
(1) 2167/     BB7 :                     ; 		ld	a,1
(1) 2168/     BB7 :                     ; 		and	001b
(1) 2169/     BB7 :                     ; 		ld	(wave_Flags),a
(1) 2170/     BB7 : 3E 01               		ld	a,001b			; Request DAC play
(1) 2171/     BB9 : 32 C6 17            		ld	(daccom),a
(1) 2172/     BBC : C9                  		ret
(1) 2173/     BBD :                     .dcut:
(1) 2174/     BBD : 3E 04               		ld	a,100b			; Request DAC stop
(1) 2175/     BBF : 32 C6 17            		ld	(daccom),a
(1) 2176/     BC2 :                     .doff:
(1) 2177/     BC2 : 21 00 00            		ld	hl,0
(1) 2178/     BC5 : 22 11 18            		ld	(tblFM6),hl
(1) 2179/     BC8 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(1) 2180/     BCC : C9                  		ret
(1) 2181/     BCD :                     ; FM3 special
(1) 2182/     BCD :                     .note_fm3:
(1) 2183/     BCD : 21 74 16            		ld	hl,fmcom+2		; Channel 3 fmcom
(1) 2184/     BD0 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 2185/     BD3 : FE FF               		cp	-1
(1) 2186/     BD5 : CA 8E 0C            		jp	z,.fm_keyoff
(1) 2187/     BD8 : FE FE               		cp	-2
(1) 2188/     BDA : CA 89 0C            		jp	z,.fm_keycut
(1) 2189/     BDD : FD 36 00 B0         		ld	(iy+chnl_Chip),0B0h	; Set as FM3 special
(1) 2190/     BE1 : 16 27               		ld	d,27h
(1) 2191/     BE3 : 3E 40               		ld	a,01000000b
(1) 2192/     BE5 : 32 5F 1E            		ld	(fmSpcMode),a
(1) 2193/     BE8 : 5F                  		ld	e,a
(1) 2194/     BE9 : CD FB 12            		call	fm_send_1
(1) 2195/     BEC : E5                  		push	hl
(1) 2196/     BED : DD E1               		pop	ix
(1) 2197/     BEF : 18 74               		jr	.fm_chnlkon
(1) 2198/     BF1 :                     ; Normal FM
(1) 2199/     BF1 :                     .note_fm:
(1) 2200/     BF1 : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 2201/     BF4 : 57                  		ld	d,a
(1) 2202/     BF5 : DD 5E 03            		ld	e,(ix+3)
(1) 2203/     BF8 : 83                  		add	a,e
(1) 2204/     BF9 : CF                  		rst	8
(1) 2205/     BFA : 4F                  		ld	c,a			; c - Note+pitch
(1) 2206/     BFB : DD 7E 02            		ld	a,(ix+2)
(1) 2207/     BFE : 47                  		ld	b,a
(1) 2208/     BFF : E6 07               		and	00000111b
(1) 2209/     C01 : 21 72 16            		ld	hl,fmcom		; hl - fmcom list
(1) 2210/     C04 : 11 00 00            		ld	de,0
(1) 2211/     C07 : E6 07               		and	111b
(1) 2212/     C09 : 5F                  		ld	e,a
(1) 2213/     C0A : 19                  		add	hl,de
(1) 2214/     C0B : CF                  		rst	8
(1) 2215/     C0C : FD 7E 02            		ld	a,(iy+chnl_Note)
(1) 2216/     C0F : FE FF               		cp	-1
(1) 2217/     C11 : 28 7B               		jr	z,.fm_keyoff
(1) 2218/     C13 : FE FE               		cp	-2
(1) 2219/     C15 : 28 72               		jr	z,.fm_keycut
(1) 2220/     C17 : 78                  		ld	a,b			; Set chip as FM
(1) 2221/     C18 : E6 07               		and	111b
(1) 2222/     C1A : FE 02               		cp	2			; Check if we got into channel 3
(1) 2223/     C1C : 20 0E               		jr	nz,.rd_nt3
(1) 2224/     C1E : 47                  		ld	b,a
(1) 2225/     C1F : 16 27               		ld	d,27h			; Disable CH3 special mode
(1) 2226/     C21 : 3E 00               		ld	a,00000000b
(1) 2227/     C23 : 32 5F 1E            		ld	(fmSpcMode),a
(1) 2228/     C26 : CF                  		rst	8
(1) 2229/     C27 : 5F                  		ld	e,a
(1) 2230/     C28 : CD FB 12            		call	fm_send_1
(1) 2231/     C2B : 78                  		ld	a,b
(1) 2232/     C2C :                     .rd_nt3:
(1) 2233/     C2C : F6 A0               		or	0A0h
(1) 2234/     C2E : FD 77 00            		ld	(iy+chnl_Chip),a
(1) 2235/     C31 : 79                  		ld	a,c
(1) 2236/     C32 : CF                  		rst	8
(1) 2237/     C33 : 06 00               		ld	b,0			; b - octave
(1) 2238/     C35 : 1E 07               		ld	e,7
(1) 2239/     C37 :                     .get_oct:
(1) 2240/     C37 : 4F                  		ld	c,a
(1) 2241/     C38 : D6 0C               		sub	12
(1) 2242/     C3A : B7                  		or	a
(1) 2243/     C3B : FA 42 0C            		jp	m,.fnd_oct
(1) 2244/     C3E : 04                  		inc	b
(1) 2245/     C3F : 1D                  		dec	e
(1) 2246/     C40 : 20 F5               		jr	nz,.get_oct
(1) 2247/     C42 :                     .fnd_oct:
(1) 2248/     C42 :                     	; b - octave / c - note
(1) 2249/     C42 : D5                  		push	de
(1) 2250/     C43 : CF                  		rst	8		; ix - current fmcom
(1) 2251/     C44 : 79                  		ld	a,c
(1) 2252/     C45 : 87                  		add	a,a
(1) 2253/     C46 : 4F                  		ld	c,a		; c - freq word
(1) 2254/     C47 : 78                  		ld	a,b
(1) 2255/     C48 : 87                  		add	a,a
(1) 2256/     C49 : 87                  		add	a,a
(1) 2257/     C4A : 87                  		add	a,a
(1) 2258/     C4B : 06 00               		ld	b,0
(1) 2259/     C4D : E5                  		push	hl
(1) 2260/     C4E : CF                  		rst	8
(1) 2261/     C4F : DD E1               		pop	ix
(1) 2262/     C51 : 21 3B 14            		ld	hl,fmFreq_List
(1) 2263/     C54 : 09                  		add	hl,bc
(1) 2264/     C55 : 23                  		inc	hl
(1) 2265/     C56 : 4F                  		ld	c,a		; c - octave << 3
(1) 2266/     C57 : 7E                  		ld	a,(hl)		; Note MSB
(1) 2267/     C58 : B1                  		or	c		; add octave
(1) 2268/     C59 : 57                  		ld	d,a
(1) 2269/     C5A : 2B                  		dec	hl
(1) 2270/     C5B : CF                  		rst	8
(1) 2271/     C5C : 7E                  		ld	a,(hl)
(1) 2272/     C5D : 5F                  		ld	e,a
(1) 2273/     C5E : DD 72 18            		ld	(ix+FMFRQH),d	; Save freq MSB
(1) 2274/     C61 : DD 73 1E            		ld	(ix+FMFRQL),e	; Save freq LSB
(1) 2275/     C64 : D1                  		pop	de
(1) 2276/     C65 :                     .fm_chnlkon:
(1) 2277/     C65 : FD 7E 01            		ld	a,(iy+chnl_Flags)
(1) 2278/     C68 : 87                  		add	a,a		; move LR bits
(1) 2279/     C69 : 87                  		add	a,a
(1) 2280/     C6A : 2F                  		cpl
(1) 2281/     C6B : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(1) 2282/     C6D : DD 77 12            		ld	(ix+FMPAN),a
(1) 2283/     C70 : 1E F0               		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(1) 2284/     C72 : CF                  		rst	8
(1) 2285/     C73 : DD 73 06            		ld	(ix+FMKEYS),e
(1) 2286/     C76 : DD 7E 00            		ld	a,(ix)		; key on
(1) 2287/     C79 : F6 41               		or	01000001b
(1) 2288/     C7B : DD 77 00            		ld	(ix),a
(1) 2289/     C7E : FD CB 01 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(1) 2290/     C82 : 20 04               		jr	nz,.fm_kpv
(1) 2291/     C84 : DD 36 0C 00         		ld	(ix+FMVOL),0
(1) 2292/     C88 :                     .fm_kpv:
(1) 2293/     C88 : C9                  		ret
(1) 2294/     C89 :                     
(1) 2295/     C89 :                     ; keyoff/cut
(1) 2296/     C89 :                     .fm_keycut:
(1) 2297/     C89 : 0E 04               		ld	c,100b
(1) 2298/     C8B : C3 D2 0A            		jp	.chnl_unlink
(1) 2299/     C8E :                     .fm_keyoff:
(1) 2300/     C8E : 0E 02               		ld	c,010b
(1) 2301/     C90 : 71                  		ld	(hl),c
(1) 2302/     C91 : C9                  		ret
(1) 2303/     C92 :                     
(1) 2304/     C92 :                     ; ----------------------------------------
(1) 2305/     C92 :                     ; Channel chip swap
(1) 2306/     C92 :                     ; ----------------------------------------
(1) 2307/     C92 :                     
(1) 2308/     C92 :                     .chip_swap:
(1) 2309/     C92 : 4F                  		ld	c,a		; c - New chip ID
(1) 2310/     C93 : E6 F0               		and	11110000b
(1) 2311/     C95 : 47                  		ld	b,a
(1) 2312/     C96 : FD 7E 00            		ld	a,(iy+chnl_Chip)
(1) 2313/     C99 : CF                  		rst	8
(1) 2314/     C9A : 5F                  		ld	e,a		; e - Old chip ID
(1) 2315/     C9B : E6 F0               		and	11110000b
(1) 2316/     C9D : B8                  		cp	b
(1) 2317/     C9E : 28 2E               		jr	z,.chip_out
(1) 2318/     CA0 : 57                  		ld	d,a		; d - reuse last ID
(1) 2319/     CA1 : 79                  		ld	a,c		; New chip-ins is null?
(1) 2320/     CA2 : FE FF               		cp	-1
(1) 2321/     CA4 : 20 05               		jr	nz,.from_nl
(1) 2322/     CA6 : 7B                  		ld	a,e		; Reuse OLD ID
(1) 2323/     CA7 : CF                  		rst	8
(1) 2324/     CA8 : E6 F0               		and	11110000b
(1) 2325/     CAA : 57                  		ld	d,a		; new id to check
(1) 2326/     CAB :                     .from_nl:
(1) 2327/     CAB : 7A                  		ld	a,d
(1) 2328/     CAC : 16 00               		ld	d,0
(1) 2329/     CAE : FE 80               		cp	80h
(1) 2330/     CB0 : CC 1D 0D            		call	z,.psg_out
(1) 2331/     CB3 : FE 90               		cp	90h
(1) 2332/     CB5 : CC 0F 0D            		call	z,.psgn_out
(1) 2333/     CB8 : CF                  		rst	8
(1) 2334/     CB9 : FE A0               		cp	0A0h
(1) 2335/     CBB : CC 3D 0D            		call	z,.fm_out
(1) 2336/     CBE : FE B0               		cp	0B0h
(1) 2337/     CC0 : CC 01 0D            		call	z,.fm3_out
(1) 2338/     CC3 : FE C0               		cp	0C0h
(1) 2339/     CC5 : CC F3 0C            		call	z,.dac_out
(1) 2340/     CC8 : FE D0               		cp	0D0h
(1) 2341/     CCA : CC D0 0C            		call	z,.pwm_out
(1) 2342/     CCD : CF                  		rst	8
(1) 2343/     CCE :                     .chip_out:
(1) 2344/     CCE : 79                  		ld	a,c
(1) 2345/     CCF : C9                  		ret
(1) 2346/     CD0 :                     
(1) 2347/     CD0 :                     .pwm_out:
(1) 2348/     CD0 : E5                  		push	hl
(1) 2349/     CD1 : 7B                  		ld	a,e
(1) 2350/     CD2 : E6 07               		and	111b
(1) 2351/     CD4 : 47                  		ld	b,a
(1) 2352/     CD5 : 5F                  		ld	e,a
(1) 2353/     CD6 : CF                  		rst	8
(1) 2354/     CD7 : 87                  		add	a,a
(1) 2355/     CD8 : 87                  		add	a,a
(1) 2356/     CD9 : 87                  		add	a,a
(1) 2357/     CDA : 5F                  		ld	e,a
(1) 2358/     CDB : 21 1B 18            		ld	hl,tblPWM
(1) 2359/     CDE : 19                  		add	hl,de
(1) 2360/     CDF : CD 5B 0D            		call	.chp_unlk
(1) 2361/     CE2 : CF                  		rst	8
(1) 2362/     CE3 : 16 00               		ld	d,0
(1) 2363/     CE5 : 58                  		ld	e,b
(1) 2364/     CE6 : 21 3A 16            		ld	hl,pwmcom
(1) 2365/     CE9 : 19                  		add	hl,de
(1) 2366/     CEA : 36 04               		ld	(hl),100b
(1) 2367/     CEC : 3E 01               		ld	a,1
(1) 2368/     CEE : 32 30 00            		ld	(marsUpd),a
(1) 2369/     CF1 : 18 48               		jr	.p_out
(1) 2370/     CF3 :                     
(1) 2371/     CF3 :                     .dac_out:
(1) 2372/     CF3 : E5                  		push	hl
(1) 2373/     CF4 : 21 11 18            		ld	hl,tblFM6
(1) 2374/     CF7 : CD 5B 0D            		call	.chp_unlk
(1) 2375/     CFA : 21 C6 17            		ld	hl,daccom
(1) 2376/     CFD : 36 04               		ld	(hl),100b
(1) 2377/     CFF : E1                  		pop	hl
(1) 2378/     D00 : C9                  		ret
(1) 2379/     D01 :                     .fm3_out:
(1) 2380/     D01 : E5                  		push	hl
(1) 2381/     D02 : 21 09 18            		ld	hl,tblFM3
(1) 2382/     D05 : CD 5B 0D            		call	.chp_unlk
(1) 2383/     D08 : 21 74 16            		ld	hl,fmcom+2
(1) 2384/     D0B : 36 04               		ld	(hl),100b
(1) 2385/     D0D : E1                  		pop	hl
(1) 2386/     D0E : C9                  		ret
(1) 2387/     D0F :                     .psgn_out:
(1) 2388/     D0F : E5                  		push	hl
(1) 2389/     D10 : 21 E1 17            		ld	hl,tblPSGN
(1) 2390/     D13 : CD 5B 0D            		call	.chp_unlk
(1) 2391/     D16 : 21 99 16            		ld	hl,psgcom+3
(1) 2392/     D19 : 36 04               		ld	(hl),100b
(1) 2393/     D1B : E1                  		pop	hl
(1) 2394/     D1C : C9                  		ret
(1) 2395/     D1D :                     .psg_out:
(1) 2396/     D1D : E5                  		push	hl
(1) 2397/     D1E : 7B                  		ld	a,e
(1) 2398/     D1F : E6 03               		and	011b
(1) 2399/     D21 : 47                  		ld	b,a
(1) 2400/     D22 : 5F                  		ld	e,a
(1) 2401/     D23 : 87                  		add	a,a
(1) 2402/     D24 : CF                  		rst	8
(1) 2403/     D25 : 87                  		add	a,a
(1) 2404/     D26 : 87                  		add	a,a
(1) 2405/     D27 : 5F                  		ld	e,a
(1) 2406/     D28 : 21 C7 17            		ld	hl,tblPSG
(1) 2407/     D2B : 19                  		add	hl,de
(1) 2408/     D2C : CD 5B 0D            		call	.chp_unlk
(1) 2409/     D2F : 20 0A               		jr	nz,.p_out
(1) 2410/     D31 : CF                  		rst	8
(1) 2411/     D32 : 16 00               		ld	d,0
(1) 2412/     D34 : 58                  		ld	e,b
(1) 2413/     D35 : 21 96 16            		ld	hl,psgcom
(1) 2414/     D38 : 19                  		add	hl,de
(1) 2415/     D39 : 36 04               		ld	(hl),100b
(1) 2416/     D3B :                     .p_out:
(1) 2417/     D3B : E1                  		pop	hl
(1) 2418/     D3C : C9                  		ret
(1) 2419/     D3D :                     .fm_out:
(1) 2420/     D3D : E5                  		push	hl
(1) 2421/     D3E : 7B                  		ld	a,e
(1) 2422/     D3F : E6 07               		and	111b
(1) 2423/     D41 : 47                  		ld	b,a
(1) 2424/     D42 : 5F                  		ld	e,a
(1) 2425/     D43 : CF                  		rst	8
(1) 2426/     D44 : 87                  		add	a,a
(1) 2427/     D45 : 87                  		add	a,a
(1) 2428/     D46 : 87                  		add	a,a
(1) 2429/     D47 : 5F                  		ld	e,a
(1) 2430/     D48 : 21 E9 17            		ld	hl,tblFM
(1) 2431/     D4B : 19                  		add	hl,de
(1) 2432/     D4C : CD 5B 0D            		call	.chp_unlk
(1) 2433/     D4F : CF                  		rst	8
(1) 2434/     D50 : 16 00               		ld	d,0
(1) 2435/     D52 : 58                  		ld	e,b
(1) 2436/     D53 : 21 72 16            		ld	hl,fmcom
(1) 2437/     D56 : 19                  		add	hl,de
(1) 2438/     D57 : 36 04               		ld	(hl),100b
(1) 2439/     D59 : 18 E0               		jr	.p_out
(1) 2440/     D5B :                     
(1) 2441/     D5B :                     .chp_unlk:
(1) 2442/     D5B : FD E5               		push	iy
(1) 2443/     D5D : D1                  		pop	de
(1) 2444/     D5E : CF                  		rst	8
(1) 2445/     D5F : 7E                  		ld	a,(hl)
(1) 2446/     D60 : BB                  		cp	e
(1) 2447/     D61 : C0                  		ret	nz
(1) 2448/     D62 : 23                  		inc	hl
(1) 2449/     D63 : 7E                  		ld	a,(hl)
(1) 2450/     D64 : BA                  		cp	d
(1) 2451/     D65 : C0                  		ret	nz
(1) 2452/     D66 : 2B                  		dec	hl
(1) 2453/     D67 : CF                  		rst	8
(1) 2454/     D68 : 36 00               		ld	(hl),0
(1) 2455/     D6A : 23                  		inc	hl
(1) 2456/     D6B : 36 00               		ld	(hl),0
(1) 2457/     D6D : 23                  		inc	hl
(1) 2458/     D6E : 5E                  		ld	e,(hl)	; c - ID
(1) 2459/     D6F : 23                  		inc	hl
(1) 2460/     D70 : 36 00               		ld	(hl),0	; reset 5 bytes of settings
(1) 2461/     D72 : CF                  		rst	8
(1) 2462/     D73 : 23                  		inc	hl
(1) 2463/     D74 : 36 00               		ld	(hl),0
(1) 2464/     D76 : 23                  		inc	hl
(1) 2465/     D77 : 36 00               		ld	(hl),0
(1) 2466/     D79 : 23                  		inc	hl
(1) 2467/     D7A : 36 00               		ld	(hl),0
(1) 2468/     D7C : 23                  		inc	hl
(1) 2469/     D7D : 36 00               		ld	(hl),0
(1) 2470/     D7F : AF                  		xor	a
(1) 2471/     D80 : B7                  		or	a
(1) 2472/     D81 : C9                  		ret
(1) 2473/     D82 :                     
(1) 2474/     D82 :                     ; ----------------------------------------
(1) 2475/     D82 :                     ; Sets current instrument data
(1) 2476/     D82 :                     ;
(1) 2477/     D82 :                     ;   -1 - Null instrument
(1) 2478/     D82 :                     ;  80h - PSG
(1) 2479/     D82 :                     ;  90h - PSG Noise
(1) 2480/     D82 :                     ; 0A0h - FM
(1) 2481/     D82 :                     ; 0B0h - FM3 Special
(1) 2482/     D82 :                     ; 0C0h - FM6 Sample
(1) 2483/     D82 :                     ; 0D0h - PWM (or extra)
(1) 2484/     D82 :                     ; ----------------------------------------
(1) 2485/     D82 :                     
(1) 2486/     D82 :                     .check_ins:
(1) 2487/     D82 : FD 7E 03            		ld	a,(iy+chnl_Ins)
(1) 2488/     D85 : 3D                  		dec	a		; minus 1
(1) 2489/     D86 : F8                  		ret	m		; return as -1 if no ins is used.
(1) 2490/     D87 : 87                  		add	a,a		; * 08h
(1) 2491/     D88 : 87                  		add	a,a
(1) 2492/     D89 : CF                  		rst	8
(1) 2493/     D8A : 87                  		add	a,a
(1) 2494/     D8B : 2A 40 1E            		ld	hl,(currInsData)
(1) 2495/     D8E : 11 00 00            		ld	de,0
(1) 2496/     D91 : 5F                  		ld	e,a
(1) 2497/     D92 : 19                  		add	hl,de
(1) 2498/     D93 : 7E                  		ld	a,(hl)
(1) 2499/     D94 : C9                  		ret
(1) 2500/     D95 :                     
(1) 2501/     D95 :                     ; ----------------------------------------
(1) 2502/     D95 :                     ; Checks which channel type is using
(1) 2503/     D95 :                     ; auto-set channel
(1) 2504/     D95 :                     ;
(1) 2505/     D95 :                     ; a - sound chip
(1) 2506/     D95 :                     ; ----------------------------------------
(1) 2507/     D95 :                     
(1) 2508/     D95 :                     .check_chnl:
(1) 2509/     D95 : FE FF               		cp	-1		; if -1: Null
(1) 2510/     D97 : C8                  		ret	z
(1) 2511/     D98 : CF                  		rst	8
(1) 2512/     D99 : 4F                  		ld	c,a		; save copy to c
(1) 2513/     D9A : 87                  		add	a,a		; * 2
(1) 2514/     D9B : 16 00               		ld	d,0
(1) 2515/     D9D : 0F                  		rrca
(1) 2516/     D9E : 0F                  		rrca
(1) 2517/     D9F : 0F                  		rrca
(1) 2518/     DA0 : 0F                  		rrca
(1) 2519/     DA1 : E6 0F               		and	00001111b
(1) 2520/     DA3 : 5F                  		ld	e,a
(1) 2521/     DA4 : DD 21 C6 0D         		ld	ix,.tbllist	; get table from list
(1) 2522/     DA8 : DD 19               		add	ix,de
(1) 2523/     DAA : DD 5E 00            		ld	e,(ix)
(1) 2524/     DAD : DD 56 01            		ld	d,(ix+1)
(1) 2525/     DB0 : CF                  		rst	8
(1) 2526/     DB1 : D5                  		push	de
(1) 2527/     DB2 : DD E1               		pop	ix
(1) 2528/     DB4 : 79                  		ld	a,c		; restore from c
(1) 2529/     DB5 : FE 90               		cp	90h		; type PSGN?
(1) 2530/     DB7 : 28 19               		jr	z,.chk_tbln
(1) 2531/     DB9 : FE B0               		cp	0B0h		; type FM3?
(1) 2532/     DBB : 28 15               		jr	z,.chk_tbln
(1) 2533/     DBD : FE C0               		cp	0C0h		; type DAC?
(1) 2534/     DBF : 28 11               		jr	z,.chk_tbln
(1) 2535/     DC1 : 18 2D               		jr	.chk_tbl
(1) 2536/     DC3 :                     .bad_ins:
(1) 2537/     DC3 : 3E FF               		ld	a,-1
(1) 2538/     DC5 : C9                  		ret
(1) 2539/     DC6 :                     
(1) 2540/     DC6 :                     ; --------------------------------------------
(1) 2541/     DC6 :                     
(1) 2542/     DC6 :                     .tbllist:
(1) 2543/     DC6 : C7 17               		dw tblPSG	;  80h
(1) 2544/     DC8 : E1 17               		dw tblPSGN	;  90h
(1) 2545/     DCA : E9 17               		dw tblFM	; 0A0h
(1) 2546/     DCC : 09 18               		dw tblFM3	; 0B0h
(1) 2547/     DCE : 11 18               		dw tblFM6	; 0C0h
(1) 2548/     DD0 : 1B 18               		dw tblPWM	; 0D0h
(1) 2549/     DD2 :                     
(1) 2550/     DD2 :                     ; --------------------------------------------
(1) 2551/     DD2 :                     ; Check SINGLE channel table
(1) 2552/     DD2 :                     ; (FM3,FM6,PSGN)
(1) 2553/     DD2 :                     ; --------------------------------------------
(1) 2554/     DD2 :                     
(1) 2555/     DD2 :                     ; This auto-replaces the LINKED channel
(1) 2556/     DD2 :                     .chk_tbln:
(1) 2557/     DD2 : FD E5               		push	iy
(1) 2558/     DD4 : D1                  		pop	de		; de - Copy of curr track-channel
(1) 2559/     DD5 :                     
(1) 2560/     DD5 :                     	; **** MSB priority overwrite
(1) 2561/     DD5 : CF                  		rst	8
(1) 2562/     DD6 : DD 7E 01            		ld	a,(ix+1)	; MSB | LSB
(1) 2563/     DD9 : DD B6 00            		or	(ix)		; Check if blank
(1) 2564/     DDC : 28 06               		jr	z,.new
(1) 2565/     DDE : DD 7E 01            		ld	a,(ix+1)
(1) 2566/     DE1 : BA                  		cp	d
(1) 2567/     DE2 : 38 09               		jr	c,.busy_s
(1) 2568/     DE4 :                     .new:
(1) 2569/     DE4 : CF                  		rst	8
(1) 2570/     DE5 : DD 73 00            		ld	(ix),e		; NEW slot
(1) 2571/     DE8 : DD 72 01            		ld	(ix+1),d
(1) 2572/     DEB : AF                  		xor	a		; Found free slot, pick it.
(1) 2573/     DEC : C9                  		ret
(1) 2574/     DED :                     .busy_s:
(1) 2575/     DED : 3E FF               		ld	a,-1
(1) 2576/     DEF : C9                  		ret
(1) 2577/     DF0 :                     
(1) 2578/     DF0 :                     ; --------------------------------------------
(1) 2579/     DF0 :                     ; Check available channel slot from list
(1) 2580/     DF0 :                     ; --------------------------------------------
(1) 2581/     DF0 :                     
(1) 2582/     DF0 :                     .chk_tbl:
(1) 2583/     DF0 : 01 00 00            		ld	bc,0		; bc - Free slot point
(1) 2584/     DF3 :                     .next:
(1) 2585/     DF3 : DD 7E 01            		ld	a,(ix+1)	; Check MSB first
(1) 2586/     DF6 : FE FF               		cp	-1		; End of list? (as WORD: 0FFxxh)
(1) 2587/     DF8 : 28 2A               		jr	z,.chkfree
(1) 2588/     DFA : FD E5               		push	iy
(1) 2589/     DFC : D1                  		pop	de		; de - Copy of curr track-channel
(1) 2590/     DFD : CF                  		rst	8
(1) 2591/     DFE : BA                  		cp	d		; check if link matches
(1) 2592/     DFF : 20 08               		jr	nz,.diffr
(1) 2593/     E01 : DD 7E 00            		ld	a,(ix)
(1) 2594/     E04 : BB                  		cp	e
(1) 2595/     E05 : 20 02               		jr	nz,.diffr
(1) 2596/     E07 : AF                  		xor	a		; return 0
(1) 2597/     E08 : C9                  		ret
(1) 2598/     E09 :                     .diffr:
(1) 2599/     E09 : 79                  		ld	a,c		; bc link already set?
(1) 2600/     E0A : B0                  		or	b
(1) 2601/     E0B : 20 10               		jr	nz,.alrdfnd
(1) 2602/     E0D : CF                  		rst	8
(1) 2603/     E0E : DD 5E 01            		ld	e,(ix+1)	; Check if this link == 0
(1) 2604/     E11 : DD 7E 00            		ld	a,(ix)
(1) 2605/     E14 : B3                  		or	e
(1) 2606/     E15 : 28 02               		jr	z,.fndlink
(1) 2607/     E17 :                     
(1) 2608/     E17 :                     	; priority
(1) 2609/     E17 :                     
(1) 2610/     E17 : 18 04               		jr	.alrdfnd
(1) 2611/     E19 :                     
(1) 2612/     E19 :                     ; 		push	de		; Check if this link is
(1) 2613/     E19 :                     ; 		ld	d,(ix+1)	; floating.
(1) 2614/     E19 :                     ; 		ld	e,(ix)
(1) 2615/     E19 :                     ; 		inc	de
(1) 2616/     E19 :                     ; 		rst	8
(1) 2617/     E19 :                     ; 		ld	a,(de)
(1) 2618/     E19 :                     ; 		pop	de
(1) 2619/     E19 :                     ; 		cp	-2
(1) 2620/     E19 :                     ; 		jr	z,.fndlink
(1) 2621/     E19 :                     ; 		cp	-1
(1) 2622/     E19 :                     ; 		jr	z,.fndlink
(1) 2623/     E19 :                     
(1) 2624/     E19 :                     ; 		jr	.alrdfnd
(1) 2625/     E19 :                     	; **** MSB priority overwrite
(1) 2626/     E19 :                     ; 		ld	a,e
(1) 2627/     E19 :                     ; 		cp	d
(1) 2628/     E19 :                     ; 		jr	nc,.alrdfnd
(1) 2629/     E19 :                     	; ****
(1) 2630/     E19 :                     
(1) 2631/     E19 :                     .fndlink:
(1) 2632/     E19 : DD E5               		push	ix		; bc - got new link
(1) 2633/     E1B : C1                  		pop	bc
(1) 2634/     E1C : CF                  		rst	8
(1) 2635/     E1D :                     .alrdfnd:
(1) 2636/     E1D : 11 08 00            		ld	de,8		; Next channel table
(1) 2637/     E20 : DD 19               		add	ix,de
(1) 2638/     E22 : 18 CF               		jr	.next
(1) 2639/     E24 :                     
(1) 2640/     E24 :                     ; free link slot
(1) 2641/     E24 :                     .chkfree:
(1) 2642/     E24 : 79                  		ld	a,c		; found free link?
(1) 2643/     E25 : B0                  		or	b
(1) 2644/     E26 : 28 0F               		jr	z,.fndslot
(1) 2645/     E28 : C5                  		push	bc
(1) 2646/     E29 : DD E1               		pop	ix		; tell ix is the new slot
(1) 2647/     E2B : FD E5               		push	iy
(1) 2648/     E2D : D1                  		pop	de		; and mark it on buffer
(1) 2649/     E2E : CF                  		rst	8
(1) 2650/     E2F : DD 73 00            		ld	(ix),e
(1) 2651/     E32 : DD 72 01            		ld	(ix+1),d
(1) 2652/     E35 : AF                  		xor	a
(1) 2653/     E36 : C9                  		ret
(1) 2654/     E37 :                     .fndslot:
(1) 2655/     E37 : 3E FF               		ld	a,-1		; linksteal check goes here
(1) 2656/     E39 : C9                  		ret
(1) 2657/     E3A :                     
(1) 2658/     E3A :                     ; ====================================================================
(1) 2659/     E3A :                     ; ----------------------------------------------------------------
(1) 2660/     E3A :                     ; Subroutines
(1) 2661/     E3A :                     ; ----------------------------------------------------------------
(1) 2662/     E3A :                     
(1) 2663/     E3A :                     ; --------------------------------------------------------
(1) 2664/     E3A :                     ; Init sound engine
(1) 2665/     E3A :                     ; --------------------------------------------------------
(1) 2666/     E3A :                     
(1) 2667/     E3A :                     gema_init:
(1) 2668/     E3A : CD 26 13            		call	dac_off
(1) 2669/     E3D : 06 00               		ld	b,0		; Reset bank
(1) 2670/     E3F : 21 00 00            		ld	hl,0
(1) 2671/     E42 : CD C9 0E            		call	showRom
(1) 2672/     E45 : 77                  		ld	(hl),a
(1) 2673/     E46 : 21 00 1B            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2674/     E49 : 11 01 1B            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2675/     E4C : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2676/     E4F : 36 80               		ld	(hl),80h	; Set first byte
(1) 2677/     E51 : ED B0               		ldir			; Start copying
(1) 2678/     E53 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2679/     E56 : 36 9F               		ld	(hl),09Fh
(1) 2680/     E58 : 36 BF               		ld	(hl),0BFh
(1) 2681/     E5A : 36 DF               		ld	(hl),0DFh
(1) 2682/     E5C : 36 FF               		ld	(hl),0FFh
(1) 2683/     E5E : 11 0B 22            		ld	de,2208h|3	; Set default LFO
(1) 2684/     E61 : CD FB 12            		call	fm_send_1
(1) 2685/     E64 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2686/     E67 : CD FB 12            		call	fm_send_1
(1) 2687/     E6A : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2688/     E6D : CD FB 12            		call	fm_send_1
(1) 2689/     E70 : 1C                  		inc	e
(1) 2690/     E71 : CD FB 12            		call	fm_send_1
(1) 2691/     E74 : 1C                  		inc	e
(1) 2692/     E75 : CD FB 12            		call	fm_send_1
(1) 2693/     E78 : 1C                  		inc	e
(1) 2694/     E79 : 1C                  		inc	e
(1) 2695/     E7A : CD FB 12            		call	fm_send_1
(1) 2696/     E7D : 1C                  		inc	e
(1) 2697/     E7E : CD FB 12            		call	fm_send_1
(1) 2698/     E81 : 1C                  		inc	e
(1) 2699/     E82 : CD FB 12            		call	fm_send_1
(1) 2700/     E85 :                     
(1) 2701/     E85 :                     	; set each tracks' settings
(1) 2702/     E85 : FD 21 8A 19         		ld	iy,trkBuff_0
(1) 2703/     E89 : 21 00 1C            		ld	hl,trkData_0
(1) 2704/     E8C : 1E 11               		ld	e,MAX_TRKCHN
(1) 2705/     E8E : 16 80               		ld	d,8*16			; maximum size
(1) 2706/     E90 : CD 9E 0E            		call	.set_it
(1) 2707/     E93 : FD 21 32 1A         		ld	iy,trkBuff_1
(1) 2708/     E97 : 21 00 1D            		ld	hl,trkData_1
(1) 2709/     E9A : 1E 11               		ld	e,MAX_TRKCHN
(1) 2710/     E9C : 16 80               		ld	d,8*16
(1) 2711/     E9E :                     .set_it:
(1) 2712/     E9E : FD 75 18            		ld	(iy+trk_CachNotes),l
(1) 2713/     EA1 : FD 74 19            		ld	(iy+(trk_CachNotes+1)),h
(1) 2714/     EA4 :                     ; 		ld	(iy+trk_numChnls),e
(1) 2715/     EA4 : FD 72 16            		ld	(iy+trk_sizeIns),d
(1) 2716/     EA7 : C9                  		ret
(1) 2717/     EA8 :                     
(1) 2718/     EA8 :                     ; --------------------------------------------------------
(1) 2719/     EA8 :                     ; get_tick
(1) 2720/     EA8 :                     ;
(1) 2721/     EA8 :                     ; Checks if VBlank triggred a TICK
(1) 2722/     EA8 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 2723/     EA8 :                     ; --------------------------------------------------------
(1) 2724/     EA8 :                     
(1) 2725/     EA8 :                     get_tick:
(1) 2726/     EA8 : F3                  		di				; Disable ints
(1) 2727/     EA9 : F5                  		push	af
(1) 2728/     EAA : E5                  		push	hl
(1) 2729/     EAB : 21 49 1E            		ld	hl,tickFlag+1		; read last TICK flag
(1) 2730/     EAE : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 2731/     EAF : B7                  		or 	a
(1) 2732/     EB0 : 28 13               		jr	z,.ctnotick
(1) 2733/     EB2 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2734/     EB4 : 23                  		inc	hl			; Move to tickCnt
(1) 2735/     EB5 : 34                  		inc	(hl)			; and increment
(1) 2736/     EB6 : CF                  		rst	8
(1) 2737/     EB7 : D5                  		push	de
(1) 2738/     EB8 : 2A 34 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2739/     EBB : ED 5B 32 00         		ld	de,(sbeatPtck_1)
(1) 2740/     EBF : CF                  		rst	8
(1) 2741/     EC0 : 19                  		add	hl,de
(1) 2742/     EC1 : 22 34 00            		ld	(sbeatAcc),hl
(1) 2743/     EC4 : D1                  		pop	de
(1) 2744/     EC5 :                     .ctnotick:
(1) 2745/     EC5 : E1                  		pop	hl
(1) 2746/     EC6 : F1                  		pop	af
(1) 2747/     EC7 : FB                  		ei				; Enable ints again
(1) 2748/     EC8 : C9                  		ret
(1) 2749/     EC9 :                     
(1) 2750/     EC9 :                     ; --------------------------------------------------------
(1) 2751/     EC9 :                     ; showRom:
(1) 2752/     EC9 :                     ; Get ROM position visible for reading
(1) 2753/     EC9 :                     ;
(1) 2754/     EC9 :                     ; Input:
(1) 2755/     EC9 :                     ;  b - ROM address $xx0000
(1) 2756/     EC9 :                     ; hl - ROM address $00xxxx
(1) 2757/     EC9 :                     ;
(1) 2758/     EC9 :                     ; Output:
(1) 2759/     EC9 :                     ; hl - ROM position ready to use for reading
(1) 2760/     EC9 :                     ; --------------------------------------------------------
(1) 2761/     EC9 :                     
(1) 2762/     EC9 :                     showRom:
(1) 2763/     EC9 : CF                  		rst	8
(1) 2764/     ECA : D5                  		push	de
(1) 2765/     ECB : C5                  		push	bc
(1) 2766/     ECC : 11 00 60            		ld	de,6000h
(1) 2767/     ECF : 7C                  		ld	a,h
(1) 2768/     ED0 : 07                  		rlca
(1) 2769/     ED1 : CF                  		rst	8
(1) 2770/     ED2 : 12                  		ld	(de),a
(1) 2771/     ED3 : 78                  		ld	a,b
(1) 2772/     ED4 : 12                  		ld	(de),a
(1) 2773/     ED5 : 1F                  		rra
(1) 2774/     ED6 : 12                  		ld	(de),a
(1) 2775/     ED7 : 1F                  		rra
(1) 2776/     ED8 : 12                  		ld	(de),a
(1) 2777/     ED9 : 1F                  		rra
(1) 2778/     EDA : CF                  		rst	8
(1) 2779/     EDB : 12                  		ld	(de),a
(1) 2780/     EDC : 1F                  		rra
(1) 2781/     EDD : 12                  		ld	(de),a
(1) 2782/     EDE : 1F                  		rra
(1) 2783/     EDF : 12                  		ld	(de),a
(1) 2784/     EE0 : 1F                  		rra
(1) 2785/     EE1 : 12                  		ld	(de),a
(1) 2786/     EE2 : 1F                  		rra
(1) 2787/     EE3 : 12                  		ld	(de),a
(1) 2788/     EE4 : CF                  		rst	8
(1) 2789/     EE5 : C1                  		pop	bc
(1) 2790/     EE6 : D1                  		pop	de
(1) 2791/     EE7 : CB FC               		set	7,h
(1) 2792/     EE9 : C9                  		ret
(1) 2793/     EEA :                     
(1) 2794/     EEA :                     ; --------------------------------------------------------
(1) 2795/     EEA :                     ; readRomB:
(1) 2796/     EEA :                     ; Reads a byte from ROM safetly, for a single and quick
(1) 2797/     EEA :                     ; byte-read only, NOT autoswitchable.
(1) 2798/     EEA :                     ; CALL showRom FIRST, DO NOT CALL RST 20h (dac_fill)
(1) 2799/     EEA :                     ; BEFORE GETTING HERE
(1) 2800/     EEA :                     ;
(1) 2801/     EEA :                     ; Input:
(1) 2802/     EEA :                     ; hl - ROM position in Z80's area
(1) 2803/     EEA :                     ;      (BANK must be set already)
(1) 2804/     EEA :                     ;
(1) 2805/     EEA :                     ; Output:
(1) 2806/     EEA :                     ; a - byte recieved
(1) 2807/     EEA :                     ; --------------------------------------------------------
(1) 2808/     EEA :                     
(1) 2809/     EEA :                     ; ALL this code just to read one byte without bothering
(1) 2810/     EEA :                     ; the DMA from the 68k side
(1) 2811/     EEA :                     
(1) 2812/     EEA :                     readRomB:
(1) 2813/     EEA : DD E5               		push	ix
(1) 2814/     EEC : DD 21 1C 00         		ld	ix,commZRomBlk
(1) 2815/     EF0 : DD CB 01 C6         		set	0,(ix+1)	; ROM read request
(1) 2816/     EF4 : DD CB 00 46         		bit	0,(ix)		; 68k is on DMA?
(1) 2817/     EF8 : 20 09               		jr	nz,.wait
(1) 2818/     EFA : 7E                  .imback:	ld	a,(hl)		; Read the byte.
(1) 2819/     EFB : DD CB 01 86         		res	0,(ix+1)
(1) 2820/     EFF : CF                  		rst	8
(1) 2821/     F00 : DD E1               		pop	ix
(1) 2822/     F02 : C9                  		ret
(1) 2823/     F03 :                     .wait:
(1) 2824/     F03 : DD CB 01 86         		res	0,(ix+1)	; Not reading ROM
(1) 2825/     F07 :                     .w2:
(1) 2826/     F07 : CF                  		rst	8
(1) 2827/     F08 : 00                  		nop
(1) 2828/     F09 : 00                  		nop
(1) 2829/     F0A : CF                  		rst	8
(1) 2830/     F0B : DD CB 00 46         		bit	0,(ix)		; Is ROM free from 68K?
(1) 2831/     F0F : 20 F6               		jr	nz,.w2
(1) 2832/     F11 : DD CB 01 C6         		set	0,(ix+1)	; Reading ROM again.
(1) 2833/     F15 : 18 E3               		jr	.imback
(1) 2834/     F17 :                     
(1) 2835/     F17 :                     ; --------------------------------------------------------
(1) 2836/     F17 :                     ; transferRom
(1) 2837/     F17 :                     ;
(1) 2838/     F17 :                     ; Transfer bytes from ROM to Z80, this also tells
(1) 2839/     F17 :                     ; to 68k that we are reading fom ROM
(1) 2840/     F17 :                     ;
(1) 2841/     F17 :                     ; Input:
(1) 2842/     F17 :                     ; a  - Source ROM address $xx0000
(1) 2843/     F17 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 2844/     F17 :                     ; hl - Source ROM address $00xxxx
(1) 2845/     F17 :                     ; de - Destination address
(1) 2846/     F17 :                     ;
(1) 2847/     F17 :                     ; Uses:
(1) 2848/     F17 :                     ; b, ix
(1) 2849/     F17 :                     ;
(1) 2850/     F17 :                     ; Notes:
(1) 2851/     F17 :                     ; call dac_fill first if transfering anything other than
(1) 2852/     F17 :                     ; sample data, just to be safe
(1) 2853/     F17 :                     ; --------------------------------------------------------
(1) 2854/     F17 :                     
(1) 2855/     F17 :                     ; Note: got this from GEMS...
(1) 2856/     F17 :                     
(1) 2857/     F17 :                     transferRom:
(1) 2858/     F17 : CF                  		rst	8
(1) 2859/     F18 : DD E5               		push	ix
(1) 2860/     F1A : DD 21 1C 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 2861/     F1E : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 2862/     F21 : CB BC               		res	7,h
(1) 2863/     F23 : 06 00               		ld	b,0
(1) 2864/     F25 : 0B                  		dec	bc
(1) 2865/     F26 : 09                  		add	hl,bc
(1) 2866/     F27 : CB 7C               		bit	7,h
(1) 2867/     F29 : 20 0B               		jr	nz,.double
(1) 2868/     F2B : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 2869/     F2E : 0C                  		inc	c
(1) 2870/     F2F : 47                  		ld	b,a
(1) 2871/     F30 : CD 5B 0F            		call	.transfer
(1) 2872/     F33 : DD E1               		pop	ix
(1) 2873/     F35 : C9                  		ret
(1) 2874/     F36 :                     .double:
(1) 2875/     F36 : CF                  		rst	8
(1) 2876/     F37 : 47                  		ld	b,a		; double transfer
(1) 2877/     F38 : C5                  		push	bc
(1) 2878/     F39 : E5                  		push	hl
(1) 2879/     F3A : 79                  		ld	a,c
(1) 2880/     F3B : 95                  		sub	a,l
(1) 2881/     F3C : 4F                  		ld	c,a
(1) 2882/     F3D : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 2883/     F40 : CD 5B 0F            		call	.transfer
(1) 2884/     F43 : E1                  		pop	hl
(1) 2885/     F44 : C1                  		pop	bc
(1) 2886/     F45 : CF                  		rst	8
(1) 2887/     F46 : 4D                  		ld	c,l
(1) 2888/     F47 : 0C                  		inc	c
(1) 2889/     F48 : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 2890/     F4B : E6 80               		and	80h
(1) 2891/     F4D : C6 80               		add	a,80h
(1) 2892/     F4F : 67                  		ld	h,a
(1) 2893/     F50 : 2E 00               		ld	l,0
(1) 2894/     F52 : 30 01               		jr	nc,.x68knocarry
(1) 2895/     F54 : 04                  		inc	b
(1) 2896/     F55 :                     .x68knocarry:
(1) 2897/     F55 : CD 5B 0F            		call	.transfer
(1) 2898/     F58 : DD E1               		pop	ix
(1) 2899/     F5A : C9                  		ret
(1) 2900/     F5B :                     
(1) 2901/     F5B :                     ; ------------------------------------------------
(1) 2902/     F5B :                     ; b  - Source ROM xx0000
(1) 2903/     F5B :                     ;  c - Bytes to transfer (00h not allowed)
(1) 2904/     F5B :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 2905/     F5B :                     ; de - Destination address
(1) 2906/     F5B :                     ;
(1) 2907/     F5B :                     ; Uses:
(1) 2908/     F5B :                     ; a
(1) 2909/     F5B :                     ; ------------------------------------------------
(1) 2910/     F5B :                     
(1) 2911/     F5B :                     .transfer:
(1) 2912/     F5B : CD C9 0E            		call	showRom
(1) 2913/     F5E :                     
(1) 2914/     F5E :                     	; Transfer data in packs of bytes
(1) 2915/     F5E :                     	; while playing cache WAV in the process
(1) 2916/     F5E :                     	; *** CRITICAL PROCESS FOR WAV PLAYBACK ***
(1) 2917/     F5E :                     	;
(1) 2918/     F5E :                     	; pseudo-ref for ldir:
(1) 2919/     F5E :                     	; ld (de),(hl)
(1) 2920/     F5E :                     	; inc de
(1) 2921/     F5E :                     	; inc hl
(1) 2922/     F5E :                     	; dec bc
(1) 2923/     F5E :                     	;
(1) 2924/     F5E : 06 00               		ld	b,0
(1) 2925/     F60 : 79                  		ld	a,c		; a - pieces counter
(1) 2926/     F61 : DD CB 01 C6         		set	0,(ix+1)	; Tell to 68k that we are reading from ROM
(1) 2927/     F65 : D6 06               		sub	6		; LENGHT lower than 6?
(1) 2928/     F67 : 38 11               		jr	c,.x68klast	; Process single piece only
(1) 2929/     F69 :                     .x68kloop:
(1) 2930/     F69 : CF                  		rst	8
(1) 2931/     F6A : 0E 05               		ld	c,6-1
(1) 2932/     F6C : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 2933/     F70 : 20 1A               		jr	nz,.x68klpwt
(1) 2934/     F72 :                     .x68klpcont:
(1) 2935/     F72 : CF                  		rst	8
(1) 2936/     F73 : ED B0               		ldir			; (de) to (hl) until bc==0
(1) 2937/     F75 : D6 05               		sub	a,6-1
(1) 2938/     F77 : D2 69 0F            		jp	nc,.x68kloop
(1) 2939/     F7A :                     ; last block
(1) 2940/     F7A :                     .x68klast:
(1) 2941/     F7A : C6 06               		add	a,6
(1) 2942/     F7C : 4F                  		ld	c,a
(1) 2943/     F7D : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(1) 2944/     F81 : C2 9F 0F            		jp	nz,.x68klstwt
(1) 2945/     F84 :                     .x68klstcont:
(1) 2946/     F84 : CF                  		rst	8
(1) 2947/     F85 : ED B0               		ldir
(1) 2948/     F87 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are done reading
(1) 2949/     F8B : C9                  		ret
(1) 2950/     F8C :                     
(1) 2951/     F8C :                     ; If Genesis wants to do DMA, wait here until it finishes.
(1) 2952/     F8C :                     .x68klpwt:
(1) 2953/     F8C : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(1) 2954/     F90 :                     .x68kpwtlp:
(1) 2955/     F90 : CF                  		rst	8
(1) 2956/     F91 : 00                  		nop
(1) 2957/     F92 : CF                  		rst	8
(1) 2958/     F93 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 2959/     F97 : 20 F7               		jr	nz,.x68kpwtlp
(1) 2960/     F99 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(1) 2961/     F9D : 18 D3               		jr	.x68klpcont
(1) 2962/     F9F :                     
(1) 2963/     F9F :                     ; or in the last piece
(1) 2964/     F9F :                     .x68klstwt:
(1) 2965/     F9F : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(1) 2966/     FA3 :                     .x68klstwtlp:
(1) 2967/     FA3 : CF                  		rst	8
(1) 2968/     FA4 : 00                  		nop
(1) 2969/     FA5 : CF                  		rst	8
(1) 2970/     FA6 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 2971/     FAA : 20 F7               		jr	nz,.x68klstwtlp
(1) 2972/     FAC : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(1) 2973/     FB0 : 18 D2               		jr	.x68klstcont
(1) 2974/     FB2 :                     
(1) 2975/     FB2 :                     ; ====================================================================
(1) 2976/     FB2 :                     ; ----------------------------------------------------------------
(1) 2977/     FB2 :                     ; Sound chip routines
(1) 2978/     FB2 :                     ; ----------------------------------------------------------------
(1) 2979/     FB2 :                     
(1) 2980/     FB2 :                     ; --------------------------------------------------------
(1) 2981/     FB2 :                     ; chip_env
(1) 2982/     FB2 :                     ;
(1) 2983/     FB2 :                     ; Process PSG and FM
(1) 2984/     FB2 :                     ; --------------------------------------------------------
(1) 2985/     FB2 :                     
(1) 2986/     FB2 :                     ; Read PSG list backwards so it autodetects
(1) 2987/     FB2 :                     ; Tone3 mode
(1) 2988/     FB2 :                     
(1) 2989/     FB2 :                     chip_env:
(1) 2990/     FB2 : FD 21 99 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 2991/     FB6 : 21 11 7F            		ld	hl,Zpsg_ctrl
(1) 2992/     FB9 : 16 E0               		ld	d,0E0h			; PSG first ctrl command
(1) 2993/     FBB : 1E 04               		ld	e,4			; 4 channels
(1) 2994/     FBD :                     .vloop:
(1) 2995/     FBD : CF                  		rst	8
(1) 2996/     FBE : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(1) 2997/     FC1 : FD 36 00 00         		ld	(iy+COM),0
(1) 2998/     FC5 : CB 51               		bit	2,c			; bit 2 - stop sound
(1) 2999/     FC7 : 28 17               		jr	z,.ckof
(1) 3000/     FC9 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3001/     FCD : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3002/     FD1 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3003/     FD5 : 7B                  		ld	a,e
(1) 3004/     FD6 : FE 04               		cp	4
(1) 3005/     FD8 : 20 06               		jr	nz,.ckof
(1) 3006/     FDA : 3E 00               		ld	a,0
(1) 3007/     FDC : 32 5E 1E            		ld	(psgHatMode),a
(1) 3008/     FDF : CF                  		rst	8
(1) 3009/     FE0 :                     .ckof:
(1) 3010/     FE0 : CB 49               		bit	1,c			; bit 1 - key off
(1) 3011/     FE2 : 28 19               		jr      z,.ckon
(1) 3012/     FE4 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3013/     FE7 : B7                  		or	a
(1) 3014/     FE8 : 28 13               		jr	z,.ckon
(1) 3015/     FEA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3016/     FEE : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3017/     FF2 : 7B                  		ld	a,e
(1) 3018/     FF3 : FE 04               		cp	4
(1) 3019/     FF5 : 20 06               		jr	nz,.ckon
(1) 3020/     FF7 : 3E 00               		ld	a,0
(1) 3021/     FF9 : 32 5E 1E            		ld	(psgHatMode),a
(1) 3022/     FFC : CF                  		rst	8
(1) 3023/     FFD :                     .ckon:
(1) 3024/     FFD : CB 41               		bit	0,c			; bit 0 - key on
(1) 3025/     FFF : 28 57               		jr	z,.envproc
(1) 3026/    1001 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3027/    1005 : 3A 5E 1E            		ld	a,(psgHatMode)		; check if using tone3 mode.
(1) 3028/    1008 : 4F                  		ld	c,a
(1) 3029/    1009 : E6 03               		and	11b
(1) 3030/    100B : FE 03               		cp	11b
(1) 3031/    100D : 28 24               		jr	z,.tnmode
(1) 3032/    100F :                     .wrfreq:
(1) 3033/    100F : 7B                  		ld	a,e
(1) 3034/    1010 : FE 04               		cp	4
(1) 3035/    1012 : 28 35               		jr	z,.sethat
(1) 3036/    1014 : CF                  		rst	8
(1) 3037/    1015 :                     
(1) 3038/    1015 : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 right bits
(1) 3039/    1018 : E6 0F               		and	00001111b
(1) 3040/    101A : B2                  		or	d		; OR with current channel
(1) 3041/    101B : 77                  		ld	(hl),a		; write it
(1) 3042/    101C : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 left bits
(1) 3043/    101F : 0F                  		rrca
(1) 3044/    1020 : 0F                  		rrca
(1) 3045/    1021 : 0F                  		rrca
(1) 3046/    1022 : 0F                  		rrca
(1) 3047/    1023 : E6 0F               		and	00001111b
(1) 3048/    1025 : 4F                  		ld	c,a
(1) 3049/    1026 : FD 7E 20            		ld	a,(iy+DTH)	; Grab MSB bits
(1) 3050/    1029 : 07                  		rlca
(1) 3051/    102A : 07                  		rlca
(1) 3052/    102B : 07                  		rlca
(1) 3053/    102C : 07                  		rlca
(1) 3054/    102D : E6 30               		and	00110000b
(1) 3055/    102F : B1                  		or	c
(1) 3056/    1030 : 77                  		ld	(hl),a
(1) 3057/    1031 :                     
(1) 3058/    1031 : 18 1C               		jr	.nskip
(1) 3059/    1033 :                     ; Tone3 mode
(1) 3060/    1033 :                     .tnmode:
(1) 3061/    1033 : 7B                  		ld	a,e
(1) 3062/    1034 : FE 04               		cp	4			; NOISE
(1) 3063/    1036 : 28 06               		jr	z,.psteal
(1) 3064/    1038 : FE 03               		cp	3			; PSG3, can't play
(1) 3065/    103A : 28 13               		jr	z,.nskip
(1) 3066/    103C : 18 D1               		jr	.wrfreq
(1) 3067/    103E :                     .psteal:
(1) 3068/    103E : CF                  		rst	8
(1) 3069/    103F : FD 7E 1C            		ld	a,(iy+DTL)		; Steal PSG3's freq
(1) 3070/    1042 : F6 C0               		or	0C0h
(1) 3071/    1044 : 77                  		ld	(hl),a
(1) 3072/    1045 : FD 7E 20            		ld	a,(iy+DTH)
(1) 3073/    1048 : 77                  		ld	(hl),a
(1) 3074/    1049 :                     .sethat:
(1) 3075/    1049 : CF                  		rst	8
(1) 3076/    104A : 3A 5E 1E            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3077/    104D : B2                  		or	d
(1) 3078/    104E : 77                  		ld	(hl),a
(1) 3079/    104F :                     .nskip:
(1) 3080/    104F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3081/    1053 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3082/    1057 : CF                  		rst	8
(1) 3083/    1058 :                     
(1) 3084/    1058 :                     ; ----------------------------
(1) 3085/    1058 :                     ; Process effects
(1) 3086/    1058 :                     ; ----------------------------
(1) 3087/    1058 :                     
(1) 3088/    1058 :                     .envproc:
(1) 3089/    1058 : CF                  		rst	8
(1) 3090/    1059 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3091/    105C : B7                  		or	a			; no modes
(1) 3092/    105D : CA E3 10            		jp	z,.vedlp
(1) 3093/    1060 : FE 01               		cp 	001b			; Attack mode
(1) 3094/    1062 : 20 2C               		jr	nz,.chk2
(1) 3095/    1064 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3096/    1068 : FD 46 24            		ld	b,(iy+ALV)
(1) 3097/    106B : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3098/    106E : B7                  		or	a
(1) 3099/    106F : 28 16               		jr	z,.atkend
(1) 3100/    1071 : 4F                  		ld	c,a			; c - attack rate
(1) 3101/    1072 : 78                  		ld	a,b			; a - attack level
(1) 3102/    1073 : CF                  		rst	8
(1) 3103/    1074 : FD 46 24            		ld	b,(iy+ALV)		; b - OLD attack level
(1) 3104/    1077 : 91                  		sub	a,c			; (attack rate) - (level)
(1) 3105/    1078 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3106/    107A : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3107/    107C : B8                  		cp	b			; attack rate == level?
(1) 3108/    107D : 38 08               		jr	c,.atkend
(1) 3109/    107F : 28 06               		jr	z,.atkend
(1) 3110/    1081 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3111/    1084 : CF                  		rst	8
(1) 3112/    1085 : 18 5C               		jr	.vedlp
(1) 3113/    1087 :                     .atkend:
(1) 3114/    1087 : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(1) 3115/    108A :                     .atkzero:
(1) 3116/    108A : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3117/    108E : 18 53               		jr	.vedlp
(1) 3118/    1090 :                     .chk2:
(1) 3119/    1090 :                     
(1) 3120/    1090 : FE 02               		cp	010b			; Decay mode
(1) 3121/    1092 : 20 31               		jr	nz,.chk4
(1) 3122/    1094 :                     .dectmr:
(1) 3123/    1094 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3124/    1098 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3125/    109B : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(1) 3126/    109E : B8                  		cp	b
(1) 3127/    109F : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3128/    10A1 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3129/    10A3 : CF                  		rst	8
(1) 3130/    10A4 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3131/    10A7 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3132/    10A9 : B8                  		cp	b			; compare level
(1) 3133/    10AA : 38 0F               		jr	c,.dkyend		; and finish
(1) 3134/    10AC : 18 08               		jr	.dksav
(1) 3135/    10AE :                     .dkadd:
(1) 3136/    10AE : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3137/    10B1 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3138/    10B3 : B8                  		cp	b			; compare level
(1) 3139/    10B4 : 30 05               		jr	nc,.dkyend
(1) 3140/    10B6 :                     .dksav:
(1) 3141/    10B6 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3142/    10B9 : 18 28               		jr	.vedlp
(1) 3143/    10BB :                     .dkyend:
(1) 3144/    10BB : CF                  		rst	8
(1) 3145/    10BC : FD 70 04            		ld	(iy+LEV),b		; save last attack
(1) 3146/    10BF : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3147/    10C3 : 18 1E               		jr	.vedlp
(1) 3148/    10C5 :                     .chk4:
(1) 3149/    10C5 : FE 04               		cp	100b			; Sustain phase
(1) 3150/    10C7 : 20 1A               		jr	nz,.vedlp
(1) 3151/    10C9 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3152/    10CD : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3153/    10D0 : CF                  		rst	8
(1) 3154/    10D1 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3155/    10D4 : 38 05               		jr	c,.killenv		; release done
(1) 3156/    10D6 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3157/    10D9 : 18 08               		jr	.vedlp
(1) 3158/    10DB :                     .killenv:
(1) 3159/    10DB : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3160/    10DF : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3161/    10E3 :                     .vedlp:
(1) 3162/    10E3 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3163/    10E6 : B7                  		or	a
(1) 3164/    10E7 : 28 1E               		jr	z,.noupd
(1) 3165/    10E9 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3166/    10ED : CF                  		rst	8
(1) 3167/    10EE : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(1) 3168/    10F1 : FD 86 30            		add	a,(iy+PVOL)	; Level + master volume
(1) 3169/    10F4 : 30 02               		jr	nc,.vlmuch
(1) 3170/    10F6 : 3E FF               		ld	a,-1
(1) 3171/    10F8 :                     .vlmuch:
(1) 3172/    10F8 : CB 3F               		srl	a		; (Level >> 4)
(1) 3173/    10FA : CB 3F               		srl	a
(1) 3174/    10FC : CB 3F               		srl	a
(1) 3175/    10FE : CF                  		rst	8
(1) 3176/    10FF : CB 3F               		srl	a
(1) 3177/    1101 : E6 0F               		and	00001111b
(1) 3178/    1103 : F6 90               		or	90h		; Set volume-set mode
(1) 3179/    1105 : B2                  		or	d		; add current channel
(1) 3181/    1106 : 77                  		ld	(hl),a		; Write volume
(1) 3183/    1107 :                     
(1) 3184/    1107 :                     .noupd:
(1) 3185/    1107 : FD 2B               		dec	iy		; next COM to check
(1) 3186/    1109 : 7A                  		ld	a,d
(1) 3187/    110A : CF                  		rst	8
(1) 3188/    110B : D6 20               		sub	a,20h		; next PSG (backwards)
(1) 3189/    110D : 57                  		ld	d,a
(1) 3190/    110E : 1D                  		dec	e
(1) 3191/    110F : C2 BD 0F            		jp	nz,.vloop
(1) 3192/    1112 :                     
(1) 3193/    1112 :                     ; ----------------------------
(1) 3194/    1112 :                     ; FM section
(1) 3195/    1112 :                     ; ----------------------------
(1) 3196/    1112 :                     
(1) 3197/    1112 :                     	; Read FM channels
(1) 3198/    1112 :                     	; iy - FM com
(1) 3199/    1112 :                     	; ix - FM current instrument data
(1) 3200/    1112 :                     	;  c - FM channel ID
(1) 3201/    1112 : FD 21 72 16         		ld	iy,fmcom
(1) 3202/    1116 : DD 21 CA 16         		ld	ix,fmins_com
(1) 3203/    111A : 01 00 05            		ld	bc,0500h
(1) 3204/    111D : C5                  .nextfm_1:	push	bc
(1) 3205/    111E : CD 74 11            		call	.fm_chnl	; Channel 1
(1) 3206/    1121 : C1                  		pop	bc
(1) 3207/    1122 : 11 28 00            		ld	de,28h
(1) 3208/    1125 : DD 19               		add	ix,de
(1) 3209/    1127 : FD 23               		inc	iy
(1) 3210/    1129 : CF                  		rst	8
(1) 3211/    112A : 0C                  		inc	c
(1) 3212/    112B : 79                  		ld	a,c
(1) 3213/    112C : FE 03               		cp	3		; c == 3?
(1) 3214/    112E : 20 02               		jr	nz,.nomidc
(1) 3215/    1130 : 0C                  		inc	c
(1) 3216/    1131 : CF                  		rst	8
(1) 3217/    1132 :                     .nomidc:
(1) 3218/    1132 : 10 E9               		djnz	.nextfm_1
(1) 3219/    1134 :                     
(1) 3220/    1134 :                     	; Special check for Channel 6
(1) 3221/    1134 : 3A C6 17            		ld	a,(daccom)	; Channel 6 / DAC
(1) 3222/    1137 : 5F                  		ld	e,a
(1) 3223/    1138 : AF                  		xor	a
(1) 3224/    1139 : 32 C6 17            		ld	(daccom),a
(1) 3225/    113C : CB 43               		bit	0,e		; WAVE sample request
(1) 3226/    113E : 20 21               		jr	nz,.req_dac
(1) 3227/    1140 : CB 63               		bit	4,e
(1) 3228/    1142 : 20 2A               		jr	nz,.req_pitch
(1) 3229/    1144 : CF                  		rst	8
(1) 3230/    1145 : CB 53               		bit	2,e		; key-cut?
(1) 3231/    1147 : C2 26 13            		jp	nz,dac_off
(1) 3232/    114A : CB 4B               		bit	1,e		; key-off?
(1) 3233/    114C : C0                  		ret	nz
(1) 3234/    114D : 3A 08 00            		ld 	a,(dac_me)	; manually check if
(1) 3235/    1150 : FE D9               		cp	zopcExx		; WAVE playback is active
(1) 3236/    1152 : C8                  		ret	z
(1) 3237/    1153 : 11 28 00            		ld	de,28h
(1) 3238/    1156 : DD 19               		add	ix,de
(1) 3239/    1158 : CF                  		rst	8
(1) 3240/    1159 : DD 7E 00            		ld	a,(ix)
(1) 3241/    115C : FD 23               		inc	iy
(1) 3242/    115E : 0C                  		inc	c
(1) 3243/    115F : 18 13               		jr	.fm_chnl			; Channel 6 (normal)
(1) 3244/    1161 :                     .req_dac:
(1) 3245/    1161 : 16 B6               		ld	d,0B6h			; Panning for DAC
(1) 3246/    1163 : 3A 89 16            		ld	a,((fmcom+5)+FMPAN)	; Reuse FM6's panning
(1) 3247/    1166 : 1E C0               		ld	e,11000000b
(1) 3248/    1168 : CD 06 13            		call	fm_send_2
(1) 3249/    116B : C3 3B 13            		jp	dac_play		; Set playback
(1) 3250/    116E :                     .req_pitch:
(1) 3251/    116E : D9                  		exx
(1) 3252/    116F : 2A 54 1E            		ld	hl,(wave_Pitch)
(1) 3253/    1172 : D9                  		exx
(1) 3254/    1173 :                     ; 		bit	4,c
(1) 3255/    1173 :                     ; 		ret	nz
(1) 3256/    1173 :                     ; 		exx
(1) 3257/    1173 :                     ; 		push	de
(1) 3258/    1173 :                     ; 		exx
(1) 3259/    1173 :                     ; 		pop	hl
(1) 3260/    1173 :                     ; 		rst	8
(1) 3261/    1173 :                     ; 		add	hl,de
(1) 3262/    1173 :                     ; 		push	hl
(1) 3263/    1173 :                     ; 		exx
(1) 3264/    1173 :                     ; 		pop	de
(1) 3265/    1173 :                     ; 		exx
(1) 3266/    1173 : C9                  		ret
(1) 3267/    1174 :                     
(1) 3268/    1174 :                     ; ----------------------------------------
(1) 3269/    1174 :                     ; Control current FM channel
(1) 3270/    1174 :                     ;
(1) 3271/    1174 :                     ; iy - fmcom
(1) 3272/    1174 :                     ; ix - Instrument data pointer
(1) 3273/    1174 :                     ;  c - FM chip ID
(1) 3274/    1174 :                     ; ----------------------------------------
(1) 3275/    1174 :                     
(1) 3276/    1174 :                     	; 0pvi 0cop
(1) 3277/    1174 :                     	; pvi - update bits:
(1) 3278/    1174 :                     	;      volume(v)
(1) 3279/    1174 :                     	;      instrument(i)
(1) 3280/    1174 :                     	;      panning(p)
(1) 3281/    1174 :                     	;
(1) 3282/    1174 :                     	; c/o/p key cut, key off, key on
(1) 3283/    1174 :                     .fm_chnl:
(1) 3284/    1174 : FD 7E 00            		ld	a,(iy)		; Get comm bits
(1) 3285/    1177 : B7                  		or	a
(1) 3286/    1178 : C8                  		ret	z
(1) 3287/    1179 : FD 36 00 00         		ld	(iy),0		; Reset
(1) 3288/    117D : CB 57               		bit	2,a		; Key-cut (010b) bit?
(1) 3289/    117F : C2 07 12            		jp	nz,.fm_keycut
(1) 3290/    1182 : CB 4F               		bit	1,a		; Key-off (100b) bit?
(1) 3291/    1184 : C2 1C 12            		jp	nz,.fm_keyoff
(1) 3292/    1187 : 47                  		ld	b,a		; b - other update bits
(1) 3293/    1188 : 79                  		ld	a,c		; check for Channel 6
(1) 3294/    1189 : FE 06               		cp	6
(1) 3295/    118B : CC 26 13            		call	z,dac_off	; auto-mute WAVE playback
(1) 3296/    118E : CF                  		rst	8
(1) 3297/    118F : CB 60               		bit	4,b		; Instrument-update bit?  (%0001xxxx)
(1) 3298/    1191 : C4 3C 12            		call	nz,.fm_insupd
(1) 3299/    1194 : CB 68               		bit	5,b		; Volume-update bit? (%0010xxxx)
(1) 3300/    1196 : C4 A1 12            		call	nz,.fm_volupd	;
(1) 3301/    1199 : CB 70               		bit	6,b		; Panning update bit? (%0100xxxx)
(1) 3302/    119B : C4 23 12            		call	nz,.fm_panupd
(1) 3303/    119E : CB 40               		bit	0,b		; Key-on (001b) bit?
(1) 3304/    11A0 : C8                  		ret	z
(1) 3305/    11A1 :                     	; freq update
(1) 3306/    11A1 :                     	; all this code is for OP4 (if FM3 is in special)
(1) 3307/    11A1 : CF                  		rst	8
(1) 3308/    11A2 : 79                  		ld	a,c
(1) 3309/    11A3 : E6 03               		and	11b
(1) 3310/    11A5 : F6 A4               		or	0A4h
(1) 3311/    11A7 : 57                  		ld	d,a
(1) 3312/    11A8 : FD 5E 18            		ld	e,(iy+FMFRQH)
(1) 3313/    11AB : CB 51               		bit	2,c
(1) 3314/    11AD : C4 06 13            		call	nz,fm_send_2
(1) 3315/    11B0 : CC FB 12            		call	z,fm_send_1
(1) 3316/    11B3 : CF                  		rst	8
(1) 3317/    11B4 : 15                  		dec	d
(1) 3318/    11B5 : 15                  		dec	d
(1) 3319/    11B6 : 15                  		dec	d
(1) 3320/    11B7 : 15                  		dec	d
(1) 3321/    11B8 : FD 5E 1E            		ld	e,(iy+FMFRQL)
(1) 3322/    11BB : CB 51               		bit	2,c
(1) 3323/    11BD : C4 06 13            		call	nz,fm_send_2
(1) 3324/    11C0 : CC FB 12            		call	z,fm_send_1
(1) 3325/    11C3 : CF                  		rst	8
(1) 3326/    11C4 :                     
(1) 3327/    11C4 : 79                  		ld	a,c
(1) 3328/    11C5 : E6 03               		and	11b
(1) 3329/    11C7 : F6 B0               		or	0B0h
(1) 3330/    11C9 : 57                  		ld	d,a
(1) 3331/    11CA : DD 5E 1C            		ld	e,(ix+1Ch)
(1) 3332/    11CD : CB 51               		bit	2,c
(1) 3333/    11CF : C4 06 13            		call	nz,fm_send_2
(1) 3334/    11D2 : CC FB 12            		call	z,fm_send_1
(1) 3335/    11D5 : 14                  		inc	d
(1) 3336/    11D6 : 14                  		inc	d
(1) 3337/    11D7 : CF                  		rst	8
(1) 3338/    11D8 : 14                  		inc	d
(1) 3339/    11D9 : 14                  		inc	d
(1) 3340/    11DA :                     ; 		call	.fm_panset
(1) 3341/    11DA :                     
(1) 3342/    11DA :                     	; For Special FM3 mode it just copy-pastes regs
(1) 3343/    11DA :                     	; from a separate list
(1) 3344/    11DA : 79                  		ld	a,c		; FM3 special check
(1) 3345/    11DB : FE 02               		cp	2
(1) 3346/    11DD : 20 19               		jr	nz,.notfm3
(1) 3347/    11DF : 3A 5F 1E            		ld	a,(fmSpcMode)
(1) 3348/    11E2 : E6 40               		and	01000000b
(1) 3349/    11E4 : B7                  		or	a
(1) 3350/    11E5 : 28 11               		jr	z,.notfm3
(1) 3351/    11E7 : CF                  		rst	8
(1) 3352/    11E8 : 21 BA 17            		ld	hl,fm3reg
(1) 3353/    11EB : 06 06               		ld	b,3*2
(1) 3354/    11ED :                     .copyops:
(1) 3355/    11ED : 5E                  		ld	e,(hl)
(1) 3356/    11EE : 23                  		inc	hl
(1) 3357/    11EF : 56                  		ld	d,(hl)
(1) 3358/    11F0 : 23                  		inc	hl
(1) 3359/    11F1 : 00                  		nop
(1) 3360/    11F2 : CF                  		rst	8
(1) 3361/    11F3 : CD FB 12            		call	fm_send_1
(1) 3362/    11F6 : 10 F5               		djnz	.copyops
(1) 3363/    11F8 :                     .notfm3:
(1) 3364/    11F8 :                     
(1) 3365/    11F8 : CF                  		rst	8
(1) 3366/    11F9 : 16 28               		ld	d,28h		; Keys
(1) 3367/    11FB : DD 7E 1F            		ld	a,(ix+01Fh)	; a - Read this ins keys
(1) 3368/    11FE : FD 46 06            		ld	b,(iy+FMKEYS)	; b - ALLOWED bits from fmcom
(1) 3369/    1201 : A0                  		and	b
(1) 3370/    1202 : B1                  		or	c
(1) 3371/    1203 : 5F                  		ld	e,a
(1) 3375/    1204 : C3 FB 12            		jp	fm_send_1
(1) 3376/    1207 :                     
(1) 3377/    1207 :                     .fm_keycut:
(1) 3378/    1207 : 79                  		ld	a,c
(1) 3379/    1208 : E6 03               		and	11b
(1) 3380/    120A : F6 B4               		or	0B4h
(1) 3381/    120C : 57                  		ld	d,a
(1) 3382/    120D : CF                  		rst	8
(1) 3383/    120E : DD 7E 1D            		ld	a,(ix+1Dh)
(1) 3384/    1211 : E6 07               		and	00000111b
(1) 3385/    1213 : 5F                  		ld	e,a
(1) 3386/    1214 : CB 51               		bit	2,c
(1) 3387/    1216 : CC FB 12            		call	z,fm_send_1
(1) 3388/    1219 : C4 06 13            		call	nz,fm_send_2
(1) 3389/    121C :                     .fm_keyoff:
(1) 3390/    121C : CF                  		rst	8
(1) 3391/    121D : 59                  		ld	e,c
(1) 3392/    121E : 16 28               		ld	d,28h
(1) 3393/    1220 : C3 FB 12            		jp	fm_send_1
(1) 3394/    1223 :                     ; d - 0B4h+
(1) 3395/    1223 :                     .fm_panupd:
(1) 3396/    1223 : 79                  		ld	a,c
(1) 3397/    1224 : E6 03               		and	11b
(1) 3398/    1226 : F6 B4               		or	0B4h
(1) 3399/    1228 : 57                  		ld	d,a
(1) 3400/    1229 :                     .fm_panset:
(1) 3401/    1229 : DD 5E 1D            		ld	e,(ix+1Dh)
(1) 3402/    122C : FD 7E 12            		ld	a,(iy+FMPAN)
(1) 3403/    122F : E6 C0               		and	11000000b
(1) 3404/    1231 : B3                  		or	e
(1) 3405/    1232 : 5F                  		ld	e,a
(1) 3406/    1233 : CB 51               		bit	2,c
(1) 3407/    1235 : C4 06 13            		call	nz,fm_send_2
(1) 3408/    1238 : CC FB 12            		call	z,fm_send_1
(1) 3409/    123B : C9                  		ret
(1) 3410/    123C :                     
(1) 3411/    123C :                     ; CPU-intense
(1) 3412/    123C :                     ; only call this if needed
(1) 3413/    123C :                     .fm_insupd:
(1) 3414/    123C : C5                  		push	bc
(1) 3415/    123D : CD 1C 12            		call	.fm_keyoff		; restart chip channel
(1) 3416/    1240 : E7                  		rst	20h			; <--- TODO: si se pone lento, quitarlo
(1) 3417/    1241 : DD E5               		push	ix			; copy ix to hl
(1) 3418/    1243 : E1                  		pop	hl
(1) 3419/    1244 : 79                  		ld	a,c
(1) 3420/    1245 : E6 03               		and	011b
(1) 3421/    1247 : F6 30               		or	30h
(1) 3422/    1249 : CF                  		rst	8
(1) 3423/    124A : 57                  		ld	d,a
(1) 3424/    124B : 06 1C               		ld	b,4*7
(1) 3425/    124D :                     .copy_1:
(1) 3426/    124D : CF                  		rst	8
(1) 3427/    124E : 5E                  		ld	e,(hl)
(1) 3428/    124F : CB 51               		bit	2,c
(1) 3429/    1251 : CC FB 12            		call	z,fm_send_1
(1) 3430/    1254 : C4 06 13            		call	nz,fm_send_2
(1) 3431/    1257 : 23                  		inc	hl
(1) 3432/    1258 : 14                  		inc	d
(1) 3433/    1259 : CF                  		rst	8
(1) 3434/    125A : 00                  		nop
(1) 3435/    125B : 14                  		inc	d
(1) 3436/    125C : 14                  		inc	d
(1) 3437/    125D : 14                  		inc	d
(1) 3438/    125E : 10 ED               		djnz	.copy_1
(1) 3439/    1260 : 11 04 00            		ld	de,4		; skip AMS, FMS,
(1) 3440/    1263 : 19                  		add	hl,de		; old FM3 check (oops) and keys
(1) 3441/    1264 : 79                  		ld	a,c		; check for Channel 3
(1) 3442/    1265 : FE 02               		cp	2
(1) 3443/    1267 : 20 36               		jr	nz,.fm_ins_ex
(1) 3444/    1269 : CF                  		rst	8
(1) 3445/    126A : 3A 5F 1E            		ld	a,(fmSpcMode)	; Is it in special mode?
(1) 3446/    126D : CB 77               		bit	6,a
(1) 3447/    126F : 28 2E               		jr	z,.fm_ins_ex
(1) 3448/    1271 : DD E5               		push	ix
(1) 3449/    1273 : DD 21 BA 17         		ld	ix,fm3reg
(1) 3450/    1277 : 06 03               		ld	b,3
(1) 3451/    1279 :                     .copyops3:
(1) 3452/    1279 : 56                  		ld	d,(hl)		; Read OP1-3 freqs
(1) 3453/    127A : 23                  		inc	hl
(1) 3454/    127B : CF                  		rst	8
(1) 3455/    127C : 5E                  		ld	e,(hl)
(1) 3456/    127D : 23                  		inc	hl
(1) 3457/    127E : DD 72 00            		ld	(ix),d
(1) 3458/    1281 : DD 73 02            		ld	(ix+2),e
(1) 3459/    1284 : DD 23               		inc	ix
(1) 3460/    1286 : CF                  		rst	8
(1) 3461/    1287 : DD 23               		inc	ix
(1) 3462/    1289 : DD 23               		inc	ix
(1) 3463/    128B : DD 23               		inc	ix
(1) 3464/    128D : 10 EA               		djnz	.copyops3
(1) 3465/    128F : DD 21 74 16         		ld	ix,fmcom+2	; Read OP4 freq
(1) 3466/    1293 : 56                  		ld	d,(hl)
(1) 3467/    1294 : 23                  		inc	hl
(1) 3468/    1295 : CF                  		rst	8
(1) 3469/    1296 : 5E                  		ld	e,(hl)
(1) 3470/    1297 : DD 72 18            		ld	(ix+FMFRQH),d
(1) 3471/    129A : DD 73 1E            		ld	(ix+FMFRQL),e
(1) 3472/    129D : DD E1               		pop	ix
(1) 3473/    129F :                     .fm_ins_ex:
(1) 3474/    129F : C1                  		pop	bc
(1) 3475/    12A0 : C9                  		ret
(1) 3476/    12A1 :                     
(1) 3477/    12A1 :                     ; b - Volume decrement
(1) 3478/    12A1 :                     ; c - Channel id
(1) 3479/    12A1 :                     ; d - 40h+ base reg
(1) 3480/    12A1 :                     ; h - Algorithm
(1) 3481/    12A1 :                     .fm_volupd:
(1) 3482/    12A1 : C5                  		push	bc
(1) 3483/    12A2 : FD 46 0C            		ld	b,(iy+FMVOL)
(1) 3484/    12A5 :                     .fm_chnlvol:
(1) 3485/    12A5 : DD E5               		push	ix
(1) 3486/    12A7 : DD 7E 1C            		ld	a,(ix+1Ch)
(1) 3487/    12AA : E6 07               		and	111b
(1) 3488/    12AC : 67                  		ld	h,a
(1) 3489/    12AD : 11 04 00            		ld	de,4
(1) 3490/    12B0 : DD 19               		add	ix,de
(1) 3491/    12B2 : 79                  		ld	a,c
(1) 3492/    12B3 : E6 03               		and	11b
(1) 3493/    12B5 : CF                  		rst	8
(1) 3494/    12B6 : F6 40               		or	40h
(1) 3495/    12B8 : 57                  		ld	d,a
(1) 3496/    12B9 : 7C                  		ld	a,h		; Check 40h
(1) 3497/    12BA : FE 07               		cp	7		; Algorithm == 07h?
(1) 3498/    12BC : CC E7 12            		call	z,.do_vol
(1) 3499/    12BF : 7A                  		ld	a,d
(1) 3500/    12C0 : C6 04               		add	a,4
(1) 3501/    12C2 : CF                  		rst	8
(1) 3502/    12C3 : 57                  		ld	d,a
(1) 3503/    12C4 : DD 23               		inc	ix
(1) 3504/    12C6 : 7C                  		ld	a,h		; Check 44h
(1) 3505/    12C7 : FE 05               		cp	5		; Algorithm > 05h?
(1) 3506/    12C9 : D4 E7 12            		call	nc,.do_vol
(1) 3507/    12CC : 7A                  		ld	a,d
(1) 3508/    12CD : C6 04               		add	a,4
(1) 3509/    12CF : 57                  		ld	d,a
(1) 3510/    12D0 : DD 23               		inc	ix
(1) 3511/    12D2 : CF                  		rst	8
(1) 3512/    12D3 : 7C                  		ld	a,h		; Check 48h
(1) 3513/    12D4 : FE 04               		cp	4		; Algorithm > 04h?
(1) 3514/    12D6 : D4 E7 12            		call	nc,.do_vol
(1) 3515/    12D9 : 7A                  		ld	a,d
(1) 3516/    12DA : C6 04               		add	a,4
(1) 3517/    12DC : 57                  		ld	d,a
(1) 3518/    12DD : DD 23               		inc	ix
(1) 3519/    12DF : CD E7 12            		call	.do_vol		; Do 4Ch
(1) 3520/    12E2 : DD E1               		pop	ix
(1) 3521/    12E4 : C1                  		pop	bc
(1) 3522/    12E5 : CF                  		rst	8
(1) 3523/    12E6 : C9                  		ret
(1) 3524/    12E7 :                     .do_vol:
(1) 3525/    12E7 : DD 7E 00            		ld	a,(ix)
(1) 3526/    12EA : 80                  		add	a,b
(1) 3527/    12EB : FE 7F               		cp	7Fh
(1) 3528/    12ED : 38 02               		jr	c,.vmuch
(1) 3529/    12EF : 3E 7F               		ld	a,7Fh
(1) 3530/    12F1 :                     .vmuch:
(1) 3531/    12F1 : 5F                  		ld	e,a
(1) 3532/    12F2 : CB 51               		bit	2,c
(1) 3533/    12F4 : CC FB 12            		call	z,fm_send_1
(1) 3534/    12F7 : C4 06 13            		call	nz,fm_send_2
(1) 3535/    12FA : C9                  		ret
(1) 3536/    12FB :                     
(1) 3537/    12FB :                     ; ---------------------------------------------
(1) 3538/    12FB :                     ; FM send registers
(1) 3539/    12FB :                     ;
(1) 3540/    12FB :                     ; Input:
(1) 3541/    12FB :                     ; d - ctrl
(1) 3542/    12FB :                     ; e - data
(1) 3543/    12FB :                     ; ---------------------------------------------
(1) 3544/    12FB :                     
(1) 3545/    12FB :                     ; Channels 1-3 and global registers
(1) 3546/    12FB :                     fm_send_1:
(1) 3547/    12FB : 7A                  		ld	a,d
(1) 3548/    12FC : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3549/    12FF : 00                  		nop
(1) 3550/    1300 : 7B                  		ld	a,e
(1) 3551/    1301 : 32 01 40            		ld	(Zym_data_1),a
(1) 3552/    1304 : 00                  		nop
(1) 3553/    1305 : C9                  		ret
(1) 3554/    1306 :                     ; Channels 4-6
(1) 3555/    1306 :                     fm_send_2:
(1) 3556/    1306 : 7A                  		ld	a,d
(1) 3557/    1307 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3558/    130A : 00                  		nop
(1) 3559/    130B : 7B                  		ld	a,e
(1) 3560/    130C : 32 03 40            		ld	(Zym_data_2),a
(1) 3561/    130F : 00                  		nop
(1) 3562/    1310 : C9                  		ret
(1) 3563/    1311 :                     
(1) 3564/    1311 :                     ; --------------------------------------------------------
(1) 3565/    1311 :                     ; brute-force WAVE ON/OFF playback
(1) 3566/    1311 :                     ; --------------------------------------------------------
(1) 3567/    1311 :                     
(1) 3568/    1311 :                     dac_on:
(1) 3569/    1311 : 3E 2B               		ld	a,2Bh
(1) 3570/    1313 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3571/    1316 : 3E 80               		ld	a,80h
(1) 3572/    1318 : 32 01 40            		ld	(Zym_data_1),a
(1) 3573/    131B : 3E D9               		ld 	a,zopcExx
(1) 3574/    131D : 32 08 00            		ld	(dac_me),a
(1) 3575/    1320 : 3E F5               		ld 	a,zopcPushAf
(1) 3576/    1322 : 32 20 00            		ld	(dac_fill),a
(1) 3577/    1325 : C9                  		ret
(1) 3578/    1326 :                     dac_off:
(1) 3579/    1326 : 3E 2B               		ld	a,2Bh
(1) 3580/    1328 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3581/    132B : 3E 00               		ld	a,00h
(1) 3582/    132D : 32 01 40            		ld	(Zym_data_1),a
(1) 3583/    1330 : 3E C9               		ld 	a,zopcRet
(1) 3584/    1332 : 32 08 00            		ld	(dac_me),a
(1) 3585/    1335 : 3E C9               		ld 	a,zopcRet
(1) 3586/    1337 : 32 20 00            		ld	(dac_fill),a
(1) 3587/    133A : C9                  		ret
(1) 3588/    133B :                     
(1) 3589/    133B :                     ; --------------------------------------------------------
(1) 3590/    133B :                     ; dac_play
(1) 3591/    133B :                     ;
(1) 3592/    133B :                     ; Plays a new sample
(1) 3593/    133B :                     ; --------------------------------------------------------
(1) 3594/    133B :                     
(1) 3595/    133B :                     dac_play:
(1) 3596/    133B : F3                  		di
(1) 3597/    133C : CD 26 13            		call	dac_off
(1) 3598/    133F : D9                  		exx				; get exx regs
(1) 3599/    1340 : 01 1B 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3600/    1343 : ED 5B 54 1E         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3601/    1347 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3602/    134A : D9                  		exx				; move them back
(1) 3603/    134B : 2A 4B 1E            		ld	hl,(wave_Start)
(1) 3604/    134E : 3A 4D 1E            		ld 	a,(wave_Start+2)
(1) 3605/    1351 : 22 57 1E            		ld	(dDacPntr),hl
(1) 3606/    1354 : 32 59 1E            		ld	(dDacPntr+2),a
(1) 3607/    1357 : 2A 4E 1E            		ld	hl,(wave_Len)
(1) 3608/    135A : 3A 50 1E            		ld 	a,(wave_Len+2)
(1) 3609/    135D : 22 5A 1E            		ld	(dDacCntr),hl
(1) 3610/    1360 : 32 5C 1E            		ld	(dDacCntr+2),a
(1) 3611/    1363 : AF                  		xor	a
(1) 3612/    1364 : 32 5D 1E            		ld	(dDacFifoMid),a
(1) 3613/    1367 : CD 6F 13            		call	dac_firstfill
(1) 3614/    136A : CD 11 13            		call	dac_on
(1) 3615/    136D : FB                  		ei
(1) 3616/    136E : C9                  		ret
(1) 3617/    136F :                     
(1) 3618/    136F :                     ; --------------------------------------------------------
(1) 3619/    136F :                     
(1) 3620/    136F :                     ; First wave fill
(1) 3621/    136F :                     dac_firstfill:
(1) 3622/    136F : CD A8 0E            		call	get_tick
(1) 3623/    1372 : F5                  		push	af
(1) 3624/    1373 :                     
(1) 3625/    1373 :                     ; Wave refill request
(1) 3626/    1373 :                     ; Got this from GEMS, but I changed it to play
(1) 3627/    1373 :                     ; larger samples (7FFFFFh maximum)
(1) 3628/    1373 :                     dac_refill:
(1) 3629/    1373 : CF                  		rst	8
(1) 3630/    1374 : C5                  		push	bc
(1) 3631/    1375 : D5                  		push	de
(1) 3632/    1376 : E5                  		push	hl
(1) 3633/    1377 : 3A 56 1E            		ld	a,(wave_Flags)
(1) 3634/    137A : FE 07               		cp	111b
(1) 3635/    137C : D2 33 14            		jp	nc,.FDF7
(1) 3636/    137F : 3A 5C 1E            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3637/    1382 : 2A 5A 1E            		ld	hl,(dDacCntr)
(1) 3638/    1385 : 01 80 00            		ld	bc,80h
(1) 3639/    1388 : 37                  		scf
(1) 3640/    1389 : 3F                  		ccf
(1) 3641/    138A : ED 42               		sbc	hl,bc
(1) 3642/    138C : DE 00               		sbc	a,0
(1) 3643/    138E : 32 5C 1E            		ld	(dDacCntr+2),a
(1) 3644/    1391 : 22 5A 1E            		ld	(dDacCntr),hl
(1) 3645/    1394 : 16 1B               		ld	d,dWaveBuff>>8
(1) 3646/    1396 : B7                  		or	a
(1) 3647/    1397 : FA C1 13            		jp	m,.dac_over
(1) 3648/    139A :                     .keepcntr:
(1) 3649/    139A : 3A 5D 1E            		ld	a,(dDacFifoMid)
(1) 3650/    139D : 5F                  		ld	e,a
(1) 3651/    139E : C6 80               		add 	a,80h
(1) 3652/    13A0 : 32 5D 1E            		ld	(dDacFifoMid),a
(1) 3653/    13A3 : 2A 57 1E            		ld	hl,(dDacPntr)
(1) 3654/    13A6 : 3A 59 1E            		ld	a,(dDacPntr+2)
(1) 3655/    13A9 : CD 17 0F            		call	transferRom
(1) 3656/    13AC : 2A 57 1E            		ld	hl,(dDacPntr)
(1) 3657/    13AF : 3A 59 1E            		ld	a,(dDacPntr+2)
(1) 3658/    13B2 : 01 80 00            		ld	bc,80h
(1) 3659/    13B5 : 09                  		add	hl,bc
(1) 3660/    13B6 : CE 00               		adc	a,0
(1) 3661/    13B8 : 22 57 1E            		ld	(dDacPntr),hl
(1) 3662/    13BB : 32 59 1E            		ld	(dDacPntr+2),a
(1) 3663/    13BE : C3 36 14            		jp	.FDFreturn
(1) 3664/    13C1 :                     
(1) 3665/    13C1 :                     ; if wav's len-timer finished:
(1) 3666/    13C1 :                     .dac_over:
(1) 3667/    13C1 : 16 1B               		ld	d,dWaveBuff>>8
(1) 3668/    13C3 : 3A 56 1E            		ld	a,(wave_Flags)
(1) 3669/    13C6 : E6 01               		and	01b
(1) 3670/    13C8 : B7                  		or	a
(1) 3671/    13C9 : C2 EC 13            		jp	nz,.FDF72
(1) 3672/    13CC : 7D                  		ld	a,l
(1) 3673/    13CD : C6 80               		add	a,80h
(1) 3674/    13CF : 4F                  		ld	c,a
(1) 3675/    13D0 : 06 00               		ld	b,0
(1) 3676/    13D2 : C5                  		push	bc
(1) 3677/    13D3 : 3A 5D 1E            		ld	a,(dDacFifoMid)
(1) 3678/    13D6 : 5F                  		ld	e,a
(1) 3679/    13D7 : C6 80               		add	a,80h
(1) 3680/    13D9 : 32 5D 1E            		ld	(dDacFifoMid),a
(1) 3681/    13DC : C1                  		pop	bc			; C <- # just xfered
(1) 3682/    13DD : 79                  		ld	a,c
(1) 3683/    13DE : B0                  		or	b
(1) 3684/    13DF : 28 52               		jr	z,.FDF7
(1) 3685/    13E1 : 2A 57 1E            		ld	hl,(dDacPntr)
(1) 3686/    13E4 : 3A 59 1E            		ld	a,(dDacPntr+2)
(1) 3687/    13E7 : CD 17 0F            		call	transferRom
(1) 3688/    13EA : 18 47               		jr	.FDF7
(1) 3689/    13EC :                     .FDF72:
(1) 3690/    13EC :                     
(1) 3691/    13EC :                     	; loop sample
(1) 3692/    13EC : C5                  		push	bc
(1) 3693/    13ED : D5                  		push	de
(1) 3694/    13EE : 3A 53 1E            		ld	a,(wave_Loop+2)
(1) 3695/    13F1 : 4F                  		ld	c,a
(1) 3696/    13F2 : ED 5B 51 1E         		ld	de,(wave_Loop)
(1) 3697/    13F6 : 2A 4B 1E            		ld	hl,(wave_Start)
(1) 3698/    13F9 : 3A 4D 1E            		ld 	a,(wave_Start+2)
(1) 3699/    13FC : 81                  		add	a,c
(1) 3700/    13FD : 19                  		add	hl,de
(1) 3701/    13FE : CE 00               		adc	a,0
(1) 3702/    1400 : 22 57 1E            		ld	(dDacPntr),hl
(1) 3703/    1403 : 32 59 1E            		ld	(dDacPntr+2),a
(1) 3704/    1406 : 2A 4E 1E            		ld	hl,(wave_Len)
(1) 3705/    1409 : 3A 50 1E            		ld 	a,(wave_Len+2)
(1) 3706/    140C : 91                  		sub	a,c
(1) 3707/    140D : 37                  		scf
(1) 3708/    140E : 3F                  		ccf
(1) 3709/    140F : ED 52               		sbc	hl,de
(1) 3710/    1411 : DE 00               		sbc	a,0
(1) 3711/    1413 : 22 5A 1E            		ld	(dDacCntr),hl
(1) 3712/    1416 : 32 5C 1E            		ld	(dDacCntr+2),a
(1) 3713/    1419 : D1                  		pop	de
(1) 3714/    141A : C1                  		pop	bc
(1) 3715/    141B : 78                  		ld	a,b
(1) 3716/    141C : B1                  		or	c
(1) 3717/    141D : 28 17               		jr	z,.FDFreturn
(1) 3718/    141F : 3A 5D 1E            		ld	a,(dDacFifoMid)
(1) 3719/    1422 : 5F                  		ld	e,a
(1) 3720/    1423 : C6 80               		add	a,80h
(1) 3721/    1425 : 32 5D 1E            		ld	(dDacFifoMid),a
(1) 3722/    1428 : 2A 57 1E            		ld	hl,(dDacPntr)
(1) 3723/    142B : 3A 59 1E            		ld	a,(dDacPntr+2)
(1) 3724/    142E : CD 17 0F            		call	transferRom
(1) 3725/    1431 : 18 03               		jr	.FDFreturn
(1) 3726/    1433 :                     .FDF7:
(1) 3727/    1433 : CD 26 13            		call	dac_off		; DAC finished
(1) 3728/    1436 :                     .FDFreturn:
(1) 3729/    1436 : E1                  		pop	hl
(1) 3730/    1437 : D1                  		pop	de
(1) 3731/    1438 : C1                  		pop	bc
(1) 3732/    1439 : F1                  		pop	af
(1) 3733/    143A : C9                  		ret
(1) 3734/    143B :                     
(1) 3735/    143B :                     ; ====================================================================
(1) 3736/    143B :                     ; ----------------------------------------------------------------
(1) 3737/    143B :                     ; Tables
(1) 3738/    143B :                     ; ----------------------------------------------------------------
(1) 3739/    143B :                     
(1) 3740/    143B : 84 02               fmFreq_List:	dw 644
(1) 3741/    143D : A9 02               		dw 681
(1) 3742/    143F : D2 02               		dw 722
(1) 3743/    1441 : FD 02               		dw 765
(1) 3744/    1443 : 2A 03               		dw 810
(1) 3745/    1445 : 5A 03               		dw 858
(1) 3746/    1447 : 8E 03               		dw 910
(1) 3747/    1449 : C4 03               		dw 964
(1) 3748/    144B : FD 03               		dw 1021
(1) 3749/    144D : 39 04               		dw 1081
(1) 3750/    144F : 7A 04               		dw 1146
(1) 3751/    1451 : BE 04               		dw 1214
(1) 3752/    1453 :                     psgFreq_List:
(1) 3753/    1453 : FF FF               		dw -1		; C-0 $0
(1) 3754/    1455 : FF FF               		dw -1
(1) 3755/    1457 : FF FF               		dw -1
(1) 3756/    1459 : FF FF               		dw -1
(1) 3757/    145B : FF FF               		dw -1
(1) 3758/    145D : FF FF               		dw -1
(1) 3759/    145F : FF FF               		dw -1
(1) 3760/    1461 : FF FF               		dw -1
(1) 3761/    1463 : FF FF               		dw -1
(1) 3762/    1465 : FF FF               		dw -1
(1) 3763/    1467 : FF FF               		dw -1
(1) 3764/    1469 : FF FF               		dw -1
(1) 3765/    146B : FF FF               		dw -1		; C-1 $C
(1) 3766/    146D : FF FF               		dw -1
(1) 3767/    146F : FF FF               		dw -1
(1) 3768/    1471 : FF FF               		dw -1
(1) 3769/    1473 : FF FF               		dw -1
(1) 3770/    1475 : FF FF               		dw -1
(1) 3771/    1477 : FF FF               		dw -1
(1) 3772/    1479 : FF FF               		dw -1
(1) 3773/    147B : FF FF               		dw -1
(1) 3774/    147D : FF FF               		dw -1
(1) 3775/    147F : FF FF               		dw -1
(1) 3776/    1481 : FF FF               		dw -1
(1) 3777/    1483 : FF FF               		dw -1		; C-2 $18
(1) 3778/    1485 : FF FF               		dw -1
(1) 3779/    1487 : FF FF               		dw -1
(1) 3780/    1489 : FF FF               		dw -1
(1) 3781/    148B : FF FF               		dw -1
(1) 3782/    148D : FF FF               		dw -1
(1) 3783/    148F : FF FF               		dw -1
(1) 3784/    1491 : FF FF               		dw -1
(1) 3785/    1493 : FF FF               		dw -1
(1) 3786/    1495 : FF FF               		dw -1
(1) 3787/    1497 : FF FF               		dw -1
(1) 3788/    1499 : FF FF               		dw -1
(1) 3789/    149B : FF FF               		dw -1		; C-3 $24
(1) 3790/    149D : FF FF               		dw -1
(1) 3791/    149F : FF FF               		dw -1
(1) 3792/    14A1 : FF FF               		dw -1
(1) 3793/    14A3 : FF FF               		dw -1
(1) 3794/    14A5 : FF FF               		dw -1
(1) 3795/    14A7 : FF FF               		dw -1
(1) 3796/    14A9 : FF FF               		dw -1
(1) 3797/    14AB : FF FF               		dw -1
(1) 3798/    14AD : F8 03               		dw 3F8h
(1) 3799/    14AF : BF 03               		dw 3BFh
(1) 3800/    14B1 : 89 03               		dw 389h
(1) 3801/    14B3 : 56 03               		dw 356h		;C-4 30
(1) 3802/    14B5 : 26 03               		dw 326h
(1) 3803/    14B7 : F9 02               		dw 2F9h
(1) 3804/    14B9 : CE 02               		dw 2CEh
(1) 3805/    14BB : A5 02               		dw 2A5h
(1) 3806/    14BD : 80 02               		dw 280h
(1) 3807/    14BF : 5C 02               		dw 25Ch
(1) 3808/    14C1 : 3A 02               		dw 23Ah
(1) 3809/    14C3 : 1A 02               		dw 21Ah
(1) 3810/    14C5 : FB 01               		dw 1FBh
(1) 3811/    14C7 : DF 01               		dw 1DFh
(1) 3812/    14C9 : C4 01               		dw 1C4h
(1) 3813/    14CB : AB 01               		dw 1ABh		;C-5 3C
(1) 3814/    14CD : 93 01               		dw 193h
(1) 3815/    14CF : 7D 01               		dw 17Dh
(1) 3816/    14D1 : 67 01               		dw 167h
(1) 3817/    14D3 : 53 01               		dw 153h
(1) 3818/    14D5 : 40 01               		dw 140h
(1) 3819/    14D7 : 2E 01               		dw 12Eh
(1) 3820/    14D9 : 1D 01               		dw 11Dh
(1) 3821/    14DB : 0D 01               		dw 10Dh
(1) 3822/    14DD : FE 00               		dw 0FEh
(1) 3823/    14DF : EF 00               		dw 0EFh
(1) 3824/    14E1 : E2 00               		dw 0E2h
(1) 3825/    14E3 : D6 00               		dw 0D6h		;C-6 48
(1) 3826/    14E5 : C9 00               		dw 0C9h
(1) 3827/    14E7 : BE 00               		dw 0BEh
(1) 3828/    14E9 : B4 00               		dw 0B4h
(1) 3829/    14EB : A9 00               		dw 0A9h
(1) 3830/    14ED : A0 00               		dw 0A0h
(1) 3831/    14EF : 97 00               		dw 97h
(1) 3832/    14F1 : 8F 00               		dw 8Fh
(1) 3833/    14F3 : 87 00               		dw 87h
(1) 3834/    14F5 : 7F 00               		dw 7Fh
(1) 3835/    14F7 : 78 00               		dw 78h
(1) 3836/    14F9 : 71 00               		dw 71h
(1) 3837/    14FB : 6B 00               		dw 6Bh		; C-7 54
(1) 3838/    14FD : 65 00               		dw 65h
(1) 3839/    14FF : 5F 00               		dw 5Fh
(1) 3840/    1501 : 5A 00               		dw 5Ah
(1) 3841/    1503 : 55 00               		dw 55h
(1) 3842/    1505 : 50 00               		dw 50h
(1) 3843/    1507 : 4B 00               		dw 4Bh
(1) 3844/    1509 : 47 00               		dw 47h
(1) 3845/    150B : 43 00               		dw 43h
(1) 3846/    150D : 40 00               		dw 40h
(1) 3847/    150F : 3C 00               		dw 3Ch
(1) 3848/    1511 : 39 00               		dw 39h
(1) 3849/    1513 : 36 00               		dw 36h		; C-8 $60
(1) 3850/    1515 : 33 00               		dw 33h
(1) 3851/    1517 : 30 00               		dw 30h
(1) 3852/    1519 : 2D 00               		dw 2Dh
(1) 3853/    151B : 2B 00               		dw 2Bh
(1) 3854/    151D : 28 00               		dw 28h
(1) 3855/    151F : 26 00               		dw 26h
(1) 3856/    1521 : 24 00               		dw 24h
(1) 3857/    1523 : 22 00               		dw 22h
(1) 3858/    1525 : 20 00               		dw 20h
(1) 3859/    1527 : 1F 00               		dw 1Fh
(1) 3860/    1529 : 1D 00               		dw 1Dh
(1) 3861/    152B : 1B 00               		dw 1Bh		; C-9 $6C
(1) 3862/    152D : 1A 00               		dw 1Ah
(1) 3863/    152F : 18 00               		dw 18h
(1) 3864/    1531 : 17 00               		dw 17h
(1) 3865/    1533 : 16 00               		dw 16h
(1) 3866/    1535 : 15 00               		dw 15h
(1) 3867/    1537 : 13 00               		dw 13h
(1) 3868/    1539 : 12 00               		dw 12h
(1) 3869/    153B : 11 00               		dw 11h
(1) 3870/    153D : 10 00                		dw 10h
(1) 3871/    153F : 09 00                		dw 9h
(1) 3872/    1541 : 08 00                		dw 8h
(1) 3873/    1543 : 00 00               		dw 0
(1) 3874/    1545 :                     
(1) 3875/    1545 :                     ; TODO: some of these freqs need checking
(1) 3876/    1545 : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3877/    1547 : 00 01               		dw 100h
(1) 3878/    1549 : 00 01               		dw 100h
(1) 3879/    154B : 00 01               		dw 100h
(1) 3880/    154D : 00 01               		dw 100h
(1) 3881/    154F : 00 01               		dw 100h
(1) 3882/    1551 : 00 01               		dw 100h
(1) 3883/    1553 : 00 01               		dw 100h
(1) 3884/    1555 : 00 01               		dw 100h
(1) 3885/    1557 : 00 01               		dw 100h
(1) 3886/    1559 : 00 01               		dw 100h
(1) 3887/    155B : 00 01               		dw 100h
(1) 3888/    155D : 00 01               		dw 100h		; C-1
(1) 3889/    155F : 00 01               		dw 100h
(1) 3890/    1561 : 00 01               		dw 100h
(1) 3891/    1563 : 00 01               		dw 100h
(1) 3892/    1565 : 00 01               		dw 100h
(1) 3893/    1567 : 00 01               		dw 100h
(1) 3894/    1569 : 00 01               		dw 100h
(1) 3895/    156B : 00 01               		dw 100h
(1) 3896/    156D : 00 01               		dw 100h
(1) 3897/    156F : 00 01               		dw 100h
(1) 3898/    1571 : 00 01               		dw 100h
(1) 3899/    1573 : 00 01               		dw 100h
(1) 3900/    1575 : 00 01               		dw 100h		; C-2
(1) 3901/    1577 : 00 01               		dw 100h
(1) 3902/    1579 : 00 01               		dw 100h
(1) 3903/    157B : 00 01               		dw 100h
(1) 3904/    157D : 00 01               		dw 100h
(1) 3905/    157F : 00 01               		dw 100h
(1) 3906/    1581 : 00 01               		dw 100h
(1) 3907/    1583 : 00 01               		dw 100h
(1) 3908/    1585 : 00 01               		dw 100h
(1) 3909/    1587 : 00 01               		dw 100h
(1) 3910/    1589 : 36 00               		dw 036h
(1) 3911/    158B : 3B 00               		dw 03Bh
(1) 3912/    158D : 3E 00               		dw 03Eh		; C-3 5512
(1) 3913/    158F : 43 00               		dw 043h		; C#3
(1) 3914/    1591 : 46 00               		dw 046h		; D-3
(1) 3915/    1593 : 49 00               		dw 049h		; D#3
(1) 3916/    1595 : 4E 00               		dw 04Eh		; E-3
(1) 3917/    1597 : 54 00               		dw 054h		; F-3
(1) 3918/    1599 : 58 00               		dw 058h		; F#3
(1) 3919/    159B : 5E 00               		dw 05Eh		; G-3 8363 -17
(1) 3920/    159D : 63 00               		dw 063h		; G#3
(1) 3921/    159F : 68 00               		dw 068h		; A-3
(1) 3922/    15A1 : 70 00               		dw 070h		; A#3
(1) 3923/    15A3 : 75 00               		dw 075h		; B-3
(1) 3924/    15A5 : 85 00               		dw 085h		; C-4 11025 -12
(1) 3925/    15A7 : 87 00               		dw 087h		; C#4
(1) 3926/    15A9 : 8C 00               		dw 08Ch		; D-4
(1) 3927/    15AB : 9A 00               		dw 09Ah		; D#4
(1) 3928/    15AD : 9E 00               		dw 09Eh		; E-4
(1) 3929/    15AF : AD 00               		dw 0ADh		; F-4
(1) 3930/    15B1 : B2 00               		dw 0B2h		; F#4
(1) 3931/    15B3 : C0 00               		dw 0C0h		; G-4
(1) 3932/    15B5 : CC 00               		dw 0CCh		; G#4
(1) 3933/    15B7 : D7 00               		dw 0D7h		; A-4
(1) 3934/    15B9 : E6 00               		dw 0E6h		; A#4
(1) 3935/    15BB : F0 00               		dw 0F0h		; B-4
(1) 3936/    15BD : 00 01               		dw 100h		; C-5 22050
(1) 3937/    15BF : 10 01               		dw 110h		; C#5
(1) 3938/    15C1 : 20 01               		dw 120h		; D-5
(1) 3939/    15C3 : 2E 01               		dw 12Eh		; D#5
(1) 3940/    15C5 : 42 01               		dw 142h		; E-5
(1) 3941/    15C7 : 5A 01               		dw 15Ah		; F-5
(1) 3942/    15C9 : 6A 01               		dw 16Ah		; F#5 32000 +6
(1) 3943/    15CB : 7F 01               		dw 17Fh		; G-5
(1) 3944/    15CD : 91 01               		dw 191h		; G#5
(1) 3945/    15CF : AC 01               		dw 1ACh		; A-5
(1) 3946/    15D1 : C2 01               		dw 1C2h		; A#5
(1) 3947/    15D3 : E0 01               		dw 1E0h		; B-5
(1) 3948/    15D5 : F8 01               		dw 1F8h		; C-6 44100 +12
(1) 3949/    15D7 : 10 02               		dw 210h		; C#6
(1) 3950/    15D9 : 40 02               		dw 240h		; D-6
(1) 3951/    15DB : 60 02               		dw 260h		; D#6
(1) 3952/    15DD : 80 02               		dw 280h		; E-6
(1) 3953/    15DF : A0 02               		dw 2A0h		; F-6
(1) 3954/    15E1 : D0 02               		dw 2D0h		; F#6
(1) 3955/    15E3 : F8 02               		dw 2F8h		; G-6
(1) 3956/    15E5 : 20 03               		dw 320h		; G#6
(1) 3957/    15E7 : 50 03               		dw 350h		; A-6
(1) 3958/    15E9 : 80 03               		dw 380h		; A#6
(1) 3959/    15EB : C0 03               		dw 3C0h		; B-6
(1) 3960/    15ED : 00 04               		dw 400h		; C-7 88200
(1) 3961/    15EF : 00 01               		dw 100h
(1) 3962/    15F1 : 00 01               		dw 100h
(1) 3963/    15F3 : 00 01               		dw 100h
(1) 3964/    15F5 : 00 01               		dw 100h
(1) 3965/    15F7 : 00 01               		dw 100h
(1) 3966/    15F9 : 00 01               		dw 100h
(1) 3967/    15FB : 00 01               		dw 100h
(1) 3968/    15FD : 00 01               		dw 100h
(1) 3969/    15FF : 00 01               		dw 100h
(1) 3970/    1601 : 00 01               		dw 100h
(1) 3971/    1603 : 00 01               		dw 100h
(1) 3972/    1605 : 00 01               		dw 100h		; C-8
(1) 3973/    1607 : 00 01               		dw 100h
(1) 3974/    1609 : 00 01               		dw 100h
(1) 3975/    160B : 00 01               		dw 100h
(1) 3976/    160D : 00 01               		dw 100h
(1) 3977/    160F : 00 01               		dw 100h
(1) 3978/    1611 : 00 01               		dw 100h
(1) 3979/    1613 : 00 01               		dw 100h
(1) 3980/    1615 : 00 01               		dw 100h
(1) 3981/    1617 : 00 01               		dw 100h
(1) 3982/    1619 : 00 01               		dw 100h
(1) 3983/    161B : 00 01               		dw 100h
(1) 3984/    161D : 00 01               		dw 100h		; C-9
(1) 3985/    161F : 00 01               		dw 100h
(1) 3986/    1621 : 00 01               		dw 100h
(1) 3987/    1623 : 00 01               		dw 100h
(1) 3988/    1625 : 00 01               		dw 100h
(1) 3989/    1627 : 00 01               		dw 100h
(1) 3990/    1629 : 00 01               		dw 100h
(1) 3991/    162B : 00 01               		dw 100h
(1) 3992/    162D : 00 01               		dw 100h
(1) 3993/    162F : 00 01               		dw 100h
(1) 3994/    1631 : 00 01               		dw 100h
(1) 3995/    1633 : 00 01               		dw 100h
(1) 3996/    1635 :                     
(1) 3997/    1635 :                     ; ====================================================================
(1) 3998/    1635 :                     ; ----------------------------------------------------------------
(1) 3999/    1635 :                     ; Z80 RAM
(1) 4000/    1635 :                     ; ----------------------------------------------------------------
(1) 4001/    1635 :                     
(1) 4002/    1635 :                     		align 10h
(1) 4003/    163A : 00 00 00 00 00 00   pwmcom:		db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyOn/KeyOff/KeyCut/other update bits
                    00 00 
(1) 4004/    1642 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 4005/    164A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 4006/    1652 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Playback flags: Loop/Stereo/Left/Right | 32-bit
                    00 00 
(1) 4007/    165A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - sample location
                    00 00 
(1) 4008/    1662 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4009/    166A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4010/    1672 : 00 00 00 00 00 00   fmcom:		db 00h,00h,00h,00h,00h,00h	;  0 - play bits: 2-cut 1-off 0-play
(1) 4011/    1678 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	;  6 - keys xxxx0000b
(1) 4012/    167E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 12 - volume (for 40h+)
(1) 4013/    1684 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 18 - panning (%LR000000)
(1) 4014/    168A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 24 - A4h+ (MSB FIRST)
(1) 4015/    1690 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 30 - A0h+
(1) 4016/    1696 : 00 00 00 00         psgcom		db 00h,00h,00h,00h		;  0 command 1 = key on, 2 = key off, 4 = stop snd
(1) 4017/    169A : FF FF FF FF         psglev		db -1, -1, -1, -1		;  4 output level attenuation (%llll.0000, -1 = silent)
(1) 4018/    169E : 00 00 00 00         psgatk		db 00h,00h,00h,00h		;  8 attack rate
(1) 4019/    16A2 : 00 00 00 00         psgdec		db 00h,00h,00h,00h		; 12 decay rate
(1) 4020/    16A6 : 00 00 00 00         psgslv		db 00h,00h,00h,00h		; 16 sustain level attenuation
(1) 4021/    16AA : 00 00 00 00         psgrrt		db 00h,00h,00h,00h		; 20 release rate
(1) 4022/    16AE : 00 00 00 00         psgenv		db 00h,00h,00h,00h		; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(1) 4023/    16B2 : 00 00 00 00         psgdtl		db 00h,00h,00h,00h		; 28 tone bottom 4 bits
(1) 4024/    16B6 : 00 00 00 00         psgdth		db 00h,00h,00h,00h		; 32 tone upper 6 bits
(1) 4025/    16BA : 00 00 00 00         psgalv		db 00h,00h,00h,00h		; 36 attack level attenuation
(1) 4026/    16BE : 00 00 00 00         whdflg		db 00h,00h,00h,00h		; 40 flags to indicate hardware should be updated
(1) 4027/    16C2 : 00 00 00 00         psgtim		db 00h,00h,00h,00h		; 44 timer for sustain
(1) 4028/    16C6 : 00 00 00 00         psgvol		db 00h,00h,00h,00h
(1) 4029/    16CA :                     fmins_com:	ds 028h				; Current instrument data for each FM
(1) 4030/    16F2 :                     fmins_com2:	ds 028h
(1) 4031/    171A :                     fmins_com3:	ds 028h
(1) 4032/    1742 :                     fmins_com4:	ds 028h
(1) 4033/    176A :                     fmins_com5:	ds 028h
(1) 4034/    1792 :                     fmins_com6:	ds 028h
(1) 4035/    17BA : 00 AC 00 A8         fm3reg:		dw 0AC00h,0A800h		; S3-S1, S4 is at A6/A2
(1) 4036/    17BE : 00 AD 00 A9         		dw 0AD00h,0A900h
(1) 4037/    17C2 : 00 AE 00 AA         		dw 0AE00h,0AA00h
(1) 4038/    17C6 : 00                  daccom:		db 0				; single byte for key on, off and cut
(1) 4039/    17C7 :                     
(1) 4040/    17C7 :                     	; Channel tables: 10h bytes
(1) 4041/    17C7 :                     	; 0  - Link addr (0000h = free, used chnls start from +0020h)
(1) 4042/    17C7 :                     	; 2  - Channel index (ID is set extrenally)
(1) 4043/    17C7 :                     	; 3  - Pitch
(1) 4044/    17C7 :                     	; 4+ - Channel specific...
(1) 4045/    17C7 :                     
(1) 4046/    17C7 :                     	; PSG (80h+)
(1) 4047/    17C7 :                     	;  4 - psgNoise mode
(1) 4048/    17C7 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4049/    17CF : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4050/    17D7 : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4051/    17DF : FF FF               		dw -1	; end-of-list
(1) 4052/    17E1 : 00 00 03 00 00 00   tblPSGN:	db 00h,00h,03h,00h,00h,00h,00h,00h	; Noise (DIRECT CHECK only)
                    00 00 
(1) 4053/    17E9 :                     
(1) 4054/    17E9 :                     	; FM: 90h+ FM3: 0A0h DAC: 0B0h
(1) 4055/    17E9 :                     	;  4 - Special mode (FM3: Special, FM6: DAC)
(1) 4056/    17E9 :                     	;  5 - 24-bit copy of ROM instrument pointer
(1) 4057/    17E9 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4058/    17F1 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4059/    17F9 : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(1) 4060/    1801 : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(1) 4061/    1809 : 00 00 02 00 00 00   tblFM3:		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4062/    1811 : 00 00 05 00 00 00   tblFM6:		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(1) 4063/    1819 : FF FF               		dw -1	; end-of-list
(1) 4064/    181B :                     
(1) 4065/    181B : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 4066/    1823 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(1) 4067/    182B : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(1) 4068/    1833 : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(1) 4069/    183B : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(1) 4070/    1843 : 00 00 05 00 00 00   		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(1) 4071/    184B : 00 00 06 00 00 00   		db 00h,00h,06h,00h,00h,00h,00h,00h	; Channel 7
                    00 00 
(1) 4072/    1853 : FF FF               		dw -1
(1) 4073/    1855 :                     
(1) 4074/    1855 :                     insDataC_0	ds 8*MAX_INS	; Instrument data for each Track slot
(1) 4075/    18ED :                     insDataC_1	ds 8*MAX_INS	; 8*MAX_INS
(1) 4076/    1985 :                     
(1) 4077/    1985 :                     		align 10h
(1) 4078/    198A :                     ; NOTE: MSB is used as the priority.
(1) 4079/    198A :                     trkBuff_0	ds 20h+(MAX_TRKCHN*8)	;  *** TRACK BUFFER 0****
(1) 4080/    1A32 :                     trkBuff_1	ds 20h+(MAX_TRKCHN*8)	;  *** TRACK BUFFER 1****
(1) 4081/    1ADA :                     
(1) 4082/    1ADA : (MACRO)             		org 1B00h
(1) 4082/    1ADA : 00                                                  db 0
(1) 4082/    1ADB : 00                                                  db 0
(1) 4082/    1ADC : 00                                                  db 0
(1) 4082/    1ADD : 00                                                  db 0
(1) 4082/    1ADE : 00                                                  db 0
(1) 4082/    1ADF : 00                                                  db 0
(1) 4082/    1AE0 : 00                                                  db 0
(1) 4082/    1AE1 : 00                                                  db 0
(1) 4082/    1AE2 : 00                                                  db 0
(1) 4082/    1AE3 : 00                                                  db 0
(1) 4082/    1AE4 : 00                                                  db 0
(1) 4082/    1AE5 : 00                                                  db 0
(1) 4082/    1AE6 : 00                                                  db 0
(1) 4082/    1AE7 : 00                                                  db 0
(1) 4082/    1AE8 : 00                                                  db 0
(1) 4082/    1AE9 : 00                                                  db 0
(1) 4082/    1AEA : 00                                                  db 0
(1) 4082/    1AEB : 00                                                  db 0
(1) 4082/    1AEC : 00                                                  db 0
(1) 4082/    1AED : 00                                                  db 0
(1) 4082/    1AEE : 00                                                  db 0
(1) 4082/    1AEF : 00                                                  db 0
(1) 4082/    1AF0 : 00                                                  db 0
(1) 4082/    1AF1 : 00                                                  db 0
(1) 4082/    1AF2 : 00                                                  db 0
(1) 4082/    1AF3 : 00                                                  db 0
(1) 4082/    1AF4 : 00                                                  db 0
(1) 4082/    1AF5 : 00                                                  db 0
(1) 4082/    1AF6 : 00                                                  db 0
(1) 4082/    1AF7 : 00                                                  db 0
(1) 4082/    1AF8 : 00                                                  db 0
(1) 4082/    1AF9 : 00                                                  db 0
(1) 4082/    1AFA : 00                                                  db 0
(1) 4082/    1AFB : 00                                                  db 0
(1) 4082/    1AFC : 00                                                  db 0
(1) 4082/    1AFD : 00                                                  db 0
(1) 4082/    1AFE : 00                                                  db 0
(1) 4082/    1AFF : 00                                                  db 0
(1) 4082/    1B00 :                     
(1) 4083/    1B00 :                     dWaveBuff	ds 100h			; WAVE data buffer: 100h bytes, updates every 80h
(1) 4084/    1C00 :                     trkData_0	ds 100h			; Track note-cache buffers: 100h bytes, updates every 80h
(1) 4085/    1D00 :                     trkData_1	ds 100h
(1) 4086/    1E00 :                     
(1) 4087/    1E00 :                     ; very last variables...
(1) 4088/    1E00 :                     commZfifo	ds 40h			; Buffer for command requests from 68k (40h bytes, loops)
(1) 4089/    1E40 : 00 00               currInsData	dw 0
(1) 4090/    1E42 : 00 00               currTblPos	dw 0
(1) 4091/    1E44 : 00 00               currInsPos	dw 0
(1) 4092/    1E46 : 00 00               currTrkCtrl	dw 0
(1) 4093/    1E48 : 00 00               tickFlag	dw 0		; Tick flag from VBlank, Read as (tickFlag+1) for reading/reseting
(1) 4094/    1E4A : 00                  tickCnt		db 0		; Tick counter (PUT THIS TAG AFTER tickFlag)
(1) 4095/    1E4B : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4096/    1E4D : 00                  		db 0
(1) 4097/    1E4E : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4098/    1E50 : 00                  		db 0
(1) 4099/    1E51 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit (MUST BE BELOW wave_Len)
(1) 4100/    1E53 : 00                  		db 0
(1) 4101/    1E54 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4102/    1E56 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4103/    1E57 : 00 00 00            dDacPntr	db 0,0,0		; WAVE play current ROM position
(1) 4104/    1E5A : 00 00 00            dDacCntr	db 0,0,0		; WAVE play length counter
(1) 4105/    1E5D : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1) 4106/    1E5E : 00                  psgHatMode	db 0
(1) 4107/    1E5F : 00                  fmSpcMode	db 0
(1) 4108/    1E60 :                     trkHdOut	ds 6			; temporal Header for reading Track position/row count
(1) 4109/    1E66 :                     
(1) 4110/    1E66 :                     ; Stack area
(1) 4111/    1E66 :                     
(1) 4112/    1E66 :                     	; EXIT Z80
(1) 4113/    1E66 :                     		cpu 68000
(1) 4114/    1E66 :                     		padding off
(1) 4115/  884D8C :                     		phase Z80_TOP+*
(1) 4116/  884D8C :                     
      96/  884D8C :                     Z80_CODE_END:
      97/    4D8C :                     		dephase
      98/    4D8C :                     		align 2
      99/    4D8C :                     
     100/    4D8C :                     ; ====================================================================
     101/    4D8C :                     ; ----------------------------------------------------------------
     102/    4D8C :                     ; 68K DATA BANKs at $900000 1MB max
     103/    4D8C :                     ; ----------------------------------------------------------------
     104/    4D8C :                     
     105/    4D8C :                     ; ---------------------------------------------
     106/    4D8C :                     ; BANK 0
     107/    4D8C :                     ;
     108/    4D8C :                     ; First one is smaller than the others...
     109/    4D8C :                     ; ---------------------------------------------
     110/    4D8C :                     
     111/  904D8C :                     		phase $900000+*			; Only one currently
     112/  904D8C :                     MDBNK0_START:
     113/  904D8C :                     		include "sound/tracks.asm"
(1)    1/  904D8C :                     ; ================================================================
(1)    2/  904D8C :                     ; ------------------------------------------------------------
(1)    3/  904D8C :                     ; DATA SECTION
(1)    4/  904D8C :                     ;
(1)    5/  904D8C :                     ; SOUND
(1)    6/  904D8C :                     ; ------------------------------------------------------------
(1)    7/  904D8C :                     
(1)    8/  904D8C :                     ; PWM pitches:
(1)    9/  904D8C :                     ; -17 - 8000
(1)   10/  904D8C :                     
(1)   11/  904D8C :                     ; NORMAL FM TL LEVEL: $0E AVERAGE
(1)   12/  904D8C :                     
(1)   13/  904D8C :                     ; Instrument macros
(1)   14/  904D8C :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   15/  904D8C :                     ;
(1)   16/  904D8C :                     ; TODO: this might fail to work.
(1)   17/  904D8C :                     gInsNull macro
(1)   18/  904D8C :                     	dc.b  -1,$00,$00,$00
(1)   19/  904D8C :                     	dc.b $00,$00,$00,$00
(1)   20/  904D8C :                     	endm
(1)   21/  904D8C :                     
(1)   22/  904D8C :                     ; alv: attack level (00=high)
(1)   23/  904D8C :                     ; atk: attack rate
(1)   24/  904D8C :                     ; slv: sustain (00=high)
(1)   25/  904D8C :                     ; dky: decay rate (up)
(1)   26/  904D8C :                     ; rrt: release rate (down)
(1)   27/  904D8C :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt
(1)   28/  904D8C :                     	dc.b $80,pitch,alv,atk
(1)   29/  904D8C :                     	dc.b slv,dky,rrt,$00
(1)   30/  904D8C :                     	endm
(1)   31/  904D8C :                     
(1)   32/  904D8C :                     ; same arguments as gInsPsg, but for the last one:
(1)   33/  904D8C :                     ; mode: noise mode %tmm (PSGN only) t-Bass(0)|Noise(1) mm-Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   34/  904D8C :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,mode
(1)   35/  904D8C :                     	dc.b $90|mode,pitch,alv,atk
(1)   36/  904D8C :                     	dc.b slv,dky,rrt,0
(1)   37/  904D8C :                     	endm
(1)   38/  904D8C :                     
(1)   39/  904D8C :                     ; fmins - 24-bit ROM pointer to patch data
(1)   40/  904D8C :                     gInsFm macro pitch,fmins
(1)   41/  904D8C :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   42/  904D8C :                     	dc.b fmins&$FF,$00,$00,$00
(1)   43/  904D8C :                     	endm
(1)   44/  904D8C :                     
(1)   45/  904D8C :                     ; Same as gInsFm
(1)   46/  904D8C :                     ; But the last 4 words on the patch data are the custom frequencies
(1)   47/  904D8C :                     ; for each operator in this order: OP1 OP2 OP3 OP4
(1)   48/  904D8C :                     gInsFm3	macro pitch,fmins
(1)   49/  904D8C :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   50/  904D8C :                     	dc.b fmins&$FF,$00,$00,$00
(1)   51/  904D8C :                     	endm
(1)   52/  904D8C :                     
(1)   53/  904D8C :                     ; start: Pointer to sample data:
(1)   54/  904D8C :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   55/  904D8C :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   56/  904D8C :                     ;        dc.b (sound data)	; Then the actual sound data
(1)   57/  904D8C :                     ; flags: %0-don't loop
(1)   58/  904D8C :                     ; 	 %1-loop
(1)   59/  904D8C :                     gInsDac	macro pitch,start,flags
(1)   60/  904D8C :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   61/  904D8C :                     	dc.b start&$FF,0,0,0
(1)   62/  904D8C :                     	endm
(1)   63/  904D8C :                     
(1)   64/  904D8C :                     ; start: Pointer to sample data:
(1)   65/  904D8C :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   66/  904D8C :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   67/  904D8C :                     ;        dc.b (data)		; Then the actual sound data
(1)   68/  904D8C :                     ; flags: %00SL
(1)   69/  904D8C :                     ;        L - Loop sample No/Yes
(1)   70/  904D8C :                     ;        S - Sample data is in stereo
(1)   71/  904D8C :                     gInsPwm	macro pitch,start,flags
(1)   72/  904D8C :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   73/  904D8C :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   74/  904D8C :                     	endm
(1)   75/  904D8C :                     
(1)   76/  904D8C :                     ; ------------------------------------------------------------
(1)   77/  904D8C :                     ; SFX tracks
(1)   78/  904D8C :                     ; ------------------------------------------------------------
(1)   79/  904D8C :                     
(1)   80/  904D8C :                     GemaTrkData_Sfx:
(1)   81/  904D8C : 0090 4D9C           	dc.l GemaSfxPat_Boom
(1)   82/  904D90 : 0090 4D98           	dc.l GemaSfxBlk_Boom
(1)   83/  904D94 : 0090 4DE8           	dc.l GemaSfxIns_Boom
(1)   84/  904D98 :                     GemaSfxBlk_Boom:
(1)   85/  904D98 :                     	binclude "sound/tracks/sfxpack_blk.bin"
(1)   86/  904D9B :                     	align 2
(1)   87/  904D9C :                     GemaSfxPat_Boom:
(1)   88/  904D9C :                     	binclude "sound/tracks/sfxpack_patt.bin"
(1)   89/  904DE8 :                     	align 2
(1)   90/  904DE8 :                     GemaSfxIns_Boom:
(1)   91/  904DE8 : (MACRO)             	gInsFm3 0,FmIns_Fm3_Explosion
(1)   91/  904DE8 : B000 9132                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)   91/  904DEC : 1200 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)   92/  904DF0 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$02,%110
(1)   92/  904DF0 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)   92/  904DF4 : 0000 0200                   dc.b $00,$00,$02,0
(1)   93/  904DF8 : (MACRO)             	gInsFm 0,FmIns_Ding_toy
(1)   93/  904DF8 : A000 9135                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)   93/  904DFC : 3A00 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)   94/  904E00 :                     
(1)   95/  904E00 :                     ; ------------------------------------------------------------
(1)   96/  904E00 :                     ; BGM tracks
(1)   97/  904E00 :                     ; ------------------------------------------------------------
(1)   98/  904E00 :                     
(1)   99/  904E00 :                     GemaTrkData_Test:
(1)  100/  904E00 :                     GemaTrkData_Nadie_MARS:
(1)  101/  904E00 : 0090 4E14           	dc.l GemaPat_Test
(1)  102/  904E04 : 0090 4E0C           	dc.l GemaBlk_Test
(1)  103/  904E08 : 0090 6032           	dc.l GemaIns_Test
(1)  104/  904E0C :                     GemaBlk_Test:
(1)  105/  904E0C :                     	binclude "sound/tracks/nadie_blk.bin"
(1)  106/  904E13 :                     	align 2
(1)  107/  904E14 :                     GemaPat_Test:
(1)  108/  904E14 :                     	binclude "sound/tracks/nadie_patt.bin"
(1)  109/  906031 :                     	align 2
(1)  110/  906032 :                     GemaIns_Test:
(1)  111/  906032 : (MACRO)             	gInsPwm 0,SmpIns_Nadie,%10
(1)  111/  906032 : D200 0206                   dc.b $D0|%10,0,((SMPINS_NADIE>>24)&$FF),((SMPINS_NADIE>>16)&$FF)
(1)  111/  906036 : 9548 0000                   dc.b ((SMPINS_NADIE>>8)&$FF),SMPINS_NADIE&$FF,0,0
(1)  112/  90603A : (MACRO)             	gInsFm -36,FmIns_Piano_Aqua
(1)  112/  90603A : A0DC 9134                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  112/  90603E : 1A00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  113/  906042 : (MACRO)             	gInsFm -12,FmIns_HBeat_tom
(1)  113/  906042 : A0F4 9136                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  113/  906046 : 3A00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  114/  90604A : (MACRO)             	gInsPwm -12,SmpIns_PKick,%00
(1)  114/  90604A : D0F4 0208                   dc.b $D0|%00,-12,((SMPINS_PKICK>>24)&$FF),((SMPINS_PKICK>>16)&$FF)
(1)  114/  90604E : FDC4 0000                   dc.b ((SMPINS_PKICK>>8)&$FF),SMPINS_PKICK&$FF,0,0
(1)  115/  906052 : (MACRO)             	gInsPsg 0,$40,$60,$10,$08,$0A
(1)  115/  906052 : 8000 4060                   dc.b $80,0,$40,$60
(1)  115/  906056 : 1008 0A00                   dc.b $10,$08,$0A,$00
(1)  116/  90605A : (MACRO)             	gInsFm 0,FmIns_Trumpet_1
(1)  116/  90605A : A000 9134                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  116/  90605E : 3A00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  117/  906062 : (MACRO)             	gInsPwm 0,SmpIns_Piano,%00
(1)  117/  906062 : D000 0209                   dc.b $D0|%00,0,((SMPINS_PIANO>>24)&$FF),((SMPINS_PIANO>>16)&$FF)
(1)  117/  906066 : 1100 0000                   dc.b ((SMPINS_PIANO>>8)&$FF),SMPINS_PIANO&$FF,0,0
(1)  118/  90606A : (MACRO)             	gInsPwm -12,SmpIns_PTom,%00
(1)  118/  90606A : D0F4 0209                   dc.b $D0|%00,-12,((SMPINS_PTOM>>24)&$FF),((SMPINS_PTOM>>16)&$FF)
(1)  118/  90606E : 0540 0000                   dc.b ((SMPINS_PTOM>>8)&$FF),SMPINS_PTOM&$FF,0,0
(1)  119/  906072 : (MACRO)             	gInsNull
(1)  119/  906072 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  119/  906076 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  120/  90607A :                     
(1)  121/  90607A :                     GemaTrkData_Nadie_MD:
(1)  122/  90607A : 0090 608E           	dc.l .patt
(1)  123/  90607E : 0090 6086           	dc.l .blk
(1)  124/  906082 : 0090 74CA           	dc.l .inst
(1)  125/  906086 :                     .blk:
(1)  126/  906086 :                     	binclude "sound/tracks/nadie_md_blk.bin"
(1)  127/  90608D :                     	align 2
(1)  128/  90608E :                     .patt:
(1)  129/  90608E :                     	binclude "sound/tracks/nadie_md_patt.bin"
(1)  130/  9074CA :                     	align 2
(1)  131/  9074CA :                     .inst:
(1)  132/  9074CA : (MACRO)             	gInsDac 0,DacIns_Nadie,0
(1)  132/  9074CA : C000 9203                   dc.b $C0|0,0,((DACINS_NADIE>>16)&$FF),((DACINS_NADIE>>8)&$FF)
(1)  132/  9074CE : 3000 0000                   dc.b DACINS_NADIE&$FF,0,0,0
(1)  133/  9074D2 : (MACRO)             	gInsFm -36,FmIns_Piano_Aqua
(1)  133/  9074D2 : A0DC 9134                   dc.b $A0,-36,((FMINS_PIANO_AQUA>>16)&$FF),((FMINS_PIANO_AQUA>>8)&$FF)
(1)  133/  9074D6 : 1A00 0000                   dc.b FMINS_PIANO_AQUA&$FF,$00,$00,$00
(1)  134/  9074DA : (MACRO)             	gInsFm -12,FmIns_HBeat_tom
(1)  134/  9074DA : A0F4 9136                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  134/  9074DE : 3A00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  135/  9074E2 : (MACRO)             	gInsFm -37,FmIns_DrumKick_gem
(1)  135/  9074E2 : A0DB 9132                   dc.b $A0,-37,((FMINS_DRUMKICK_GEM>>16)&$FF),((FMINS_DRUMKICK_GEM>>8)&$FF)
(1)  135/  9074E6 : 9A00 0000                   dc.b FMINS_DRUMKICK_GEM&$FF,$00,$00,$00
(1)  136/  9074EA : (MACRO)             	gInsPsg 0,$40,$60,$10,$08,$0A
(1)  136/  9074EA : 8000 4060                   dc.b $80,0,$40,$60
(1)  136/  9074EE : 1008 0A00                   dc.b $10,$08,$0A,$00
(1)  137/  9074F2 : (MACRO)             	gInsFm 0,FmIns_Trumpet_1
(1)  137/  9074F2 : A000 9134                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  137/  9074F6 : 3A00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  138/  9074FA : (MACRO)             	gInsNull
(1)  138/  9074FA : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  138/  9074FE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  139/  907502 : (MACRO)             	gInsFm3 0,FmIns_Fm3_ClosedHat
(1)  139/  907502 : B000 9131                   dc.b $B0,0,((FMINS_FM3_CLOSEDHAT>>16)&$FF),((FMINS_FM3_CLOSEDHAT>>8)&$FF)
(1)  139/  907506 : EA00 0000                   dc.b FMINS_FM3_CLOSEDHAT&$FF,$00,$00,$00
(1)  140/  90750A : (MACRO)             	gInsFm3 0,FmIns_Fm3_OpenHat
(1)  140/  90750A : B000 9131                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF),((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  140/  90750E : C200 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  141/  907512 :                     
(1)  142/  907512 :                     GemaTrkData_Mecano:
(1)  143/  907512 : 0090 752C           	dc.l GemaPat_Mecano
(1)  144/  907516 : 0090 751E           	dc.l GemaBlk_Mecano
(1)  145/  90751A : 0090 A246           	dc.l GemaIns_Mecano
(1)  146/  90751E :                     GemaBlk_Mecano:
(1)  147/  90751E :                     	binclude "sound/tracks/mecano_blk.bin"
(1)  148/  90752B :                     	align 2
(1)  149/  90752C :                     GemaPat_Mecano:
(1)  150/  90752C :                     	binclude "sound/tracks/mecano_patt.bin"
(1)  151/  90A246 :                     	align 2
(1)  152/  90A246 :                     GemaIns_Mecano:
(1)  153/  90A246 : (MACRO)             	gInsNull
(1)  153/  90A246 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  153/  90A24A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  154/  90A24E : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$0C,%100
(1)  154/  90A24E : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  154/  90A252 : 0000 0C00                   dc.b $00,$00,$0C,0
(1)  155/  90A256 : (MACRO)             	gInsFm 0,FmIns_PianoM1
(1)  155/  90A256 : A000 9132                   dc.b $A0,0,((FMINS_PIANOM1>>16)&$FF),((FMINS_PIANOM1>>8)&$FF)
(1)  155/  90A25A : BA00 0000                   dc.b FMINS_PIANOM1&$FF,$00,$00,$00
(1)  156/  90A25E : (MACRO)             	gInsFm -12,FmIns_Trumpet_carnival
(1)  156/  90A25E : A0F4 9134                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  156/  90A262 : 9A00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  157/  90A266 : (MACRO)             	gInsFm 0,FmIns_Bass_italo
(1)  157/  90A266 : A000 9133                   dc.b $A0,0,((FMINS_BASS_ITALO>>16)&$FF),((FMINS_BASS_ITALO>>8)&$FF)
(1)  157/  90A26A : DA00 0000                   dc.b FMINS_BASS_ITALO&$FF,$00,$00,$00
(1)  158/  90A26E : (MACRO)             	gInsDac 0,DacIns_wegot_kick,0
(1)  158/  90A26E : C000 9180                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  158/  90A272 : 0000 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  159/  90A276 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$08,%110
(1)  159/  90A276 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  159/  90A27A : 0000 0800                   dc.b $00,$00,$08,0
(1)  160/  90A27E : (MACRO)             	gInsDac -12,DacIns_snare_lobo,0
(1)  160/  90A27E : C0F4 9187                   dc.b $C0|0,-12,((DACINS_SNARE_LOBO>>16)&$FF),((DACINS_SNARE_LOBO>>8)&$FF)
(1)  160/  90A282 : 7A00 0000                   dc.b DACINS_SNARE_LOBO&$FF,0,0,0
(1)  161/  90A286 : (MACRO)             	gInsNull
(1)  161/  90A286 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  161/  90A28A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  162/  90A28E : (MACRO)             	gInsNull
(1)  162/  90A28E : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  162/  90A292 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  163/  90A296 : (MACRO)             	gInsNull
(1)  163/  90A296 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  163/  90A29A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  164/  90A29E : (MACRO)             	gInsNull
(1)  164/  90A29E : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  164/  90A2A2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  165/  90A2A6 : (MACRO)             	gInsNull
(1)  165/  90A2A6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  165/  90A2AA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  166/  90A2AE : (MACRO)             	gInsFm 0,FmIns_Bass_2
(1)  166/  90A2AE : A000 9133                   dc.b $A0,0,((FMINS_BASS_2>>16)&$FF),((FMINS_BASS_2>>8)&$FF)
(1)  166/  90A2B2 : 1A00 0000                   dc.b FMINS_BASS_2&$FF,$00,$00,$00
(1)  167/  90A2B6 : (MACRO)             	gInsNull
(1)  167/  90A2B6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  167/  90A2BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  168/  90A2BE : (MACRO)             	gInsNull
(1)  168/  90A2BE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  168/  90A2C2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  169/  90A2C6 : (MACRO)             	gInsNull
(1)  169/  90A2C6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  169/  90A2CA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  170/  90A2CE : (MACRO)             	gInsNull
(1)  170/  90A2CE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  170/  90A2D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  171/  90A2D6 : (MACRO)             	gInsNull
(1)  171/  90A2D6 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  171/  90A2DA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  172/  90A2DE : (MACRO)             	gInsNull
(1)  172/  90A2DE : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  172/  90A2E2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  173/  90A2E6 :                     
(1)  174/  90A2E6 :                     GemaTrkData_Test2:
(1)  175/  90A2E6 : 0090 A308           	dc.l GemaPat_Test2
(1)  176/  90A2EA : 0090 A2F2           	dc.l GemaBlk_Test2
(1)  177/  90A2EE : 0090 BF38           	dc.l GemaIns_Test2
(1)  178/  90A2F2 :                     GemaBlk_Test2:
(1)  179/  90A2F2 :                     	binclude "sound/tracks/wegot_blk.bin"
(1)  180/  90A307 :                     	align 2
(1)  181/  90A308 :                     GemaPat_Test2:
(1)  182/  90A308 :                     	binclude "sound/tracks/wegot_patt.bin"
(1)  183/  90BF38 :                     	align 2
(1)  184/  90BF38 :                     GemaIns_Test2:
(1)  185/  90BF38 : (MACRO)             	gInsFm 0,FmIns_PSynth_plus
(1)  185/  90BF38 : A000 9135                   dc.b $A0,0,((FMINS_PSYNTH_PLUS>>16)&$FF),((FMINS_PSYNTH_PLUS>>8)&$FF)
(1)  185/  90BF3C : DA00 0000                   dc.b FMINS_PSYNTH_PLUS&$FF,$00,$00,$00
(1)  186/  90BF40 : (MACRO)             	gInsFm 0,FmIns_Bass_groove_2
(1)  186/  90BF40 : A000 9133                   dc.b $A0,0,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(1)  186/  90BF44 : 9A00 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(1)  187/  90BF48 : (MACRO)             	gInsDac -36,DacIns_wegot_kick,0
(1)  187/  90BF48 : C0DC 9180                   dc.b $C0|0,-36,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  187/  90BF4C : 0000 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  188/  90BF50 : (MACRO)             	gInsFm 0,FmIns_Bass_club
(1)  188/  90BF50 : A000 9133                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(1)  188/  90BF54 : 3A00 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(1)  189/  90BF58 : (MACRO)             	gInsFm3 0,FmIns_Fm3_OpenHat
(1)  189/  90BF58 : B000 9131                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF),((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  189/  90BF5C : C200 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  190/  90BF60 : (MACRO)             	gInsPsg 0,$20,$40,$10,$01,$04
(1)  190/  90BF60 : 8000 2040                   dc.b $80,0,$20,$40
(1)  190/  90BF64 : 1001 0400                   dc.b $10,$01,$04,$00
(1)  191/  90BF68 : (MACRO)             	gInsDac -36,DacIns_wegot_crash,0
(1)  191/  90BF68 : C0DC 9198                   dc.b $C0|0,-36,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(1)  191/  90BF6C : A400 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(1)  192/  90BF70 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$10,%100
(1)  192/  90BF70 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  192/  90BF74 : 0000 1000                   dc.b $00,$00,$10,0
(1)  193/  90BF78 : (MACRO)             	gInsNull
(1)  193/  90BF78 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  193/  90BF7C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  194/  90BF80 : (MACRO)             	gInsNull
(1)  194/  90BF80 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  194/  90BF84 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/  90BF88 :                     
(1)  196/  90BF88 :                     GemaTrkData_Test3:
(1)  197/  90BF88 : 0090 BFB2           	dc.l GemaPat_Test3
(1)  198/  90BF8C : 0090 BF94           	dc.l GemaBlk_Test3
(1)  199/  90BF90 : 0091 17A2           	dc.l GemaIns_Test3
(1)  200/  90BF94 :                     GemaBlk_Test3:
(1)  201/  90BF94 :                     	binclude "sound/tracks/vuela_blk.bin"
(1)  202/  90BFB2 :                     	align 2
(1)  203/  90BFB2 :                     GemaPat_Test3:
(1)  204/  90BFB2 :                     	binclude "sound/tracks/vuela_patt.bin"
(1)  205/  9117A1 :                     	align 2
(1)  206/  9117A2 :                     GemaIns_Test3:
(1)  207/  9117A2 : (MACRO)             	gInsFm -12,FmIns_Brass_Eur
(1)  207/  9117A2 : A0F4 9135                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  207/  9117A6 : 5A00 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  208/  9117AA : (MACRO)             	gInsFm 0,FmIns_Bass_italo
(1)  208/  9117AA : A000 9133                   dc.b $A0,0,((FMINS_BASS_ITALO>>16)&$FF),((FMINS_BASS_ITALO>>8)&$FF)
(1)  208/  9117AE : DA00 0000                   dc.b FMINS_BASS_ITALO&$FF,$00,$00,$00
(1)  209/  9117B2 : (MACRO)             	gInsDac -36,DacIns_wegot_kick,0
(1)  209/  9117B2 : C0DC 9180                   dc.b $C0|0,-36,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  209/  9117B6 : 0000 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  210/  9117BA : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$0E,%100
(1)  210/  9117BA : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  210/  9117BE : 0000 0E00                   dc.b $00,$00,$0E,0
(1)  211/  9117C2 : (MACRO)             	gInsNull
(1)  211/  9117C2 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  211/  9117C6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  212/  9117CA : (MACRO)             	gInsPsg 0,$20,$40,$10,$06,$08
(1)  212/  9117CA : 8000 2040                   dc.b $80,0,$20,$40
(1)  212/  9117CE : 1006 0800                   dc.b $10,$06,$08,$00
(1)  213/  9117D2 : (MACRO)             	gInsDac +16,DacIns_snare_magn,0
(1)  213/  9117D2 : C010 91DF                   dc.b $C0|0,+16,((DACINS_SNARE_MAGN>>16)&$FF),((DACINS_SNARE_MAGN>>8)&$FF)
(1)  213/  9117D6 : 6800 0000                   dc.b DACINS_SNARE_MAGN&$FF,0,0,0
(1)  214/  9117DA : (MACRO)             	gInsFm -24,FmIns_Brass_Eur
(1)  214/  9117DA : A0E8 9135                   dc.b $A0,-24,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  214/  9117DE : 5A00 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  215/  9117E2 : (MACRO)             	gInsNull
(1)  215/  9117E2 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  215/  9117E6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  216/  9117EA : (MACRO)             	gInsNull
(1)  216/  9117EA : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  216/  9117EE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  217/  9117F2 : (MACRO)             	gInsNull
(1)  217/  9117F2 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  217/  9117F6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  218/  9117FA : (MACRO)             	gInsNull
(1)  218/  9117FA : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  218/  9117FE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  219/  911802 : (MACRO)             	gInsFm -24,FmIns_Trumpet_carnival
(1)  219/  911802 : A0E8 9134                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  219/  911806 : 9A00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  220/  91180A : (MACRO)             	gInsFm -12,FmIns_Ding_toy
(1)  220/  91180A : A0F4 9135                   dc.b $A0,-12,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)  220/  91180E : 3A00 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  221/  911812 : (MACRO)             	gInsNull
(1)  221/  911812 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  221/  911816 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  222/  91181A :                     
(1)  223/  91181A :                     GemaTrkData_BeMine:
(1)  224/  91181A : 0091 1837           	dc.l GemaPat_BeMine
(1)  225/  91181E : 0091 1826           	dc.l GemaBlk_BeMine
(1)  226/  911822 : 0091 30FA           	dc.l GemaIns_BeMine
(1)  227/  911826 :                     GemaBlk_BeMine:
(1)  228/  911826 :                     	binclude "sound/tracks/bemine_blk.bin"
(1)  229/  911837 :                     GemaPat_BeMine:
(1)  230/  911837 :                     	binclude "sound/tracks/bemine_patt.bin"
(1)  231/  9130FA :                     GemaIns_BeMine:
(1)  232/  9130FA : (MACRO)             	gInsPwm -17,SmpIns_Bell_Ice,0
(1)  232/  9130FA : D0EF 0204                   dc.b $D0|0,-17,((SMPINS_BELL_ICE>>24)&$FF),((SMPINS_BELL_ICE>>16)&$FF)
(1)  232/  9130FE : 8230 0000                   dc.b ((SMPINS_BELL_ICE>>8)&$FF),SMPINS_BELL_ICE&$FF,0,0
(1)  233/  913102 : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Hi,%01
(1)  233/  913102 : D1EF 0204                   dc.b $D0|%01,-17,((SMPINS_BRASS1_HI>>24)&$FF),((SMPINS_BRASS1_HI>>16)&$FF)
(1)  233/  913106 : BD5C 0000                   dc.b ((SMPINS_BRASS1_HI>>8)&$FF),SMPINS_BRASS1_HI&$FF,0,0
(1)  234/  91310A : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Low,%01
(1)  234/  91310A : D1EF 0205                   dc.b $D0|%01,-17,((SMPINS_BRASS1_LOW>>24)&$FF),((SMPINS_BRASS1_LOW>>16)&$FF)
(1)  234/  91310E : 3928 0000                   dc.b ((SMPINS_BRASS1_LOW>>8)&$FF),SMPINS_BRASS1_LOW&$FF,0,0
(1)  235/  913112 : (MACRO)             	gInsFm  -24,FmIns_Bass_groove
(1)  235/  913112 : A0E8 9133                   dc.b $A0,-24,((FMINS_BASS_GROOVE>>16)&$FF),((FMINS_BASS_GROOVE>>8)&$FF)
(1)  235/  913116 : 7A00 0000                   dc.b FMINS_BASS_GROOVE&$FF,$00,$00,$00
(1)  236/  91311A : (MACRO)             	gInsFm3   0,FmIns_Fm3_OpenHat
(1)  236/  91311A : B000 9131                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF),((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  236/  91311E : C200 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  237/  913122 : (MACRO)             	gInsPwm -17,SmpIns_Snare_jam,0
(1)  237/  913122 : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_SNARE_JAM>>24)&$FF),((SMPINS_SNARE_JAM>>16)&$FF)
(1)  237/  913126 : 08AC 0000                   dc.b ((SMPINS_SNARE_JAM>>8)&$FF),SMPINS_SNARE_JAM&$FF,0,0
(1)  238/  91312A : (MACRO)             	gInsPwm -17,SmpIns_Kick_jam,0
(1)  238/  91312A : D0EF 0205                   dc.b $D0|0,-17,((SMPINS_KICK_JAM>>24)&$FF),((SMPINS_KICK_JAM>>16)&$FF)
(1)  238/  91312E : FDE0 0000                   dc.b ((SMPINS_KICK_JAM>>8)&$FF),SMPINS_KICK_JAM&$FF,0,0
(1)  239/  913132 : (MACRO)             	gInsPwm -17,SmpIns_SnrTom_1,0
(1)  239/  913132 : D0EF 0206                   dc.b $D0|0,-17,((SMPINS_SNRTOM_1>>24)&$FF),((SMPINS_SNRTOM_1>>16)&$FF)
(1)  239/  913136 : 1218 0000                   dc.b ((SMPINS_SNRTOM_1>>8)&$FF),SMPINS_SNRTOM_1&$FF,0,0
(1)  240/  91313A : (MACRO)             	gInsPwm -17,SmpIns_Forest_1,0
(1)  240/  91313A : D0EF 0205                   dc.b $D0|0,-17,((SMPINS_FOREST_1>>24)&$FF),((SMPINS_FOREST_1>>16)&$FF)
(1)  240/  91313E : B4F4 0000                   dc.b ((SMPINS_FOREST_1>>8)&$FF),SMPINS_FOREST_1&$FF,0,0
(1)  241/  913142 : (MACRO)             	gInsFm -36,FmIns_Ambient_dark
(1)  241/  913142 : A0DC 9134                   dc.b $A0,-36,((FMINS_AMBIENT_DARK>>16)&$FF),((FMINS_AMBIENT_DARK>>8)&$FF)
(1)  241/  913146 : DA00 0000                   dc.b FMINS_AMBIENT_DARK&$FF,$00,$00,$00
(1)  242/  91314A : (MACRO)             	gInsPsg +12,$00,$00,$00,$08,$04
(1)  242/  91314A : 800C 0000                   dc.b $80,+12,$00,$00
(1)  242/  91314E : 0008 0400                   dc.b $00,$08,$04,$00
(1)  243/  913152 : (MACRO)             	gInsNull
(1)  243/  913152 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  243/  913156 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  244/  91315A : (MACRO)             	gInsNull
(1)  244/  91315A : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  244/  91315E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  245/  913162 : (MACRO)             	gInsNull
(1)  245/  913162 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  245/  913166 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  246/  91316A : (MACRO)             	gInsNull
(1)  246/  91316A : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  246/  91316E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  247/  913172 : (MACRO)             	gInsNull
(1)  247/  913172 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  247/  913176 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  248/  91317A : (MACRO)             	gInsNull
(1)  248/  91317A : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  248/  91317E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  249/  913182 : (MACRO)             	gInsNull
(1)  249/  913182 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  249/  913186 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  250/  91318A : (MACRO)             	gInsNull
(1)  250/  91318A : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  250/  91318E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/  913192 : (MACRO)             	gInsNull
(1)  251/  913192 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  251/  913196 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/  91319A : (MACRO)             	gInsNull
(1)  252/  91319A : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  252/  91319E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  253/  9131A2 : (MACRO)             	gInsNull
(1)  253/  9131A2 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  253/  9131A6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  254/  9131AA : (MACRO)             	gInsNull
(1)  254/  9131AA : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  254/  9131AE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  255/  9131B2 : (MACRO)             	gInsNull
(1)  255/  9131B2 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  255/  9131B6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  256/  9131BA : (MACRO)             	gInsNull
(1)  256/  9131BA : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  256/  9131BE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  257/  9131C2 :                     
     114/  9131C2 :                     		include "sound/instr.asm"
(1)    1/  9131C2 :                     ; ====================================================================
(1)    2/  9131C2 :                     ; FM instrument patches
(1)    3/  9131C2 :                     ;
(1)    4/  9131C2 :                     ; This must be located at the 900000 area.
(1)    5/  9131C2 :                     ;
(1)    6/  9131C2 :                     ; And the 68K BANK set to 0 currently.
(1)    7/  9131C2 :                     ; ====================================================================
(1)    8/  9131C2 :                     
(1)    9/  9131C2 :                     ; Savestate FM data at: $2478
(1)   10/  9131C2 :                     ;
(1)   11/  9131C2 :                     ; Sizes:
(1)   12/  9131C2 :                     ; Normal FM ins: $20
(1)   13/  9131C2 :                     ; Special FM ins: $28
(1)   14/  9131C2 :                     
(1)   15/  9131C2 :                     ; FM3 Special
(1)   16/  9131C2 :                     FmIns_Fm3_OpenHat:
(1)   17/  9131C2 :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   18/  9131EA :                     FmIns_Fm3_ClosedHat:
(1)   19/  9131EA :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   20/  913212 :                     FmIns_Fm3_Explosion:
(1)   21/  913212 :                     		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   22/  91323A :                     FmIns_Bass_Oil:	binclude "sound/instr/fm/bass_oil.gsx",$2478,$20
(1)   23/  91325A :                     
(1)   24/  91325A :                     FmIns_Organ_Ito:
(1)   25/  91325A :                     		binclude "sound/instr/fm/organ_ito.gsx",$2478,$20
(1)   26/  91327A :                     FmIns_Ding_Baseball:
(1)   27/  91327A :                     		binclude "sound/instr/fm/ding_baseball.gsx",$2478,$20
(1)   28/  91329A :                     
(1)   29/  91329A :                     ; FmIns_Guitar_gem:
(1)   30/  91329A :                     ; 		binclude "sound/instr/fm/guitar_gem.gsx",$2478,$20
(1)   31/  91329A :                     ; Fmins_Guitar_Heavy:
(1)   32/  91329A :                     ; 		binclude "sound/instr/fm/guitar_heavy.gsx",$2478,$20
(1)   33/  91329A :                     ; Fmins_Guitar_puy:
(1)   34/  91329A :                     ; 		binclude "sound/instr/fm/guitar_puy.gsx",$2478,$20
(1)   35/  91329A :                     ; Fmins_Guitar_puy_2:
(1)   36/  91329A :                     ; 		binclude "sound/instr/fm/guitar_puy_2.gsx",$2478,$20
(1)   37/  91329A :                     FmIns_DrumKick_gem:
(1)   38/  91329A :                     		binclude "sound/instr/fm/drum_kick_gem.gsx",$2478,$20
(1)   39/  9132BA :                     ;
(1)   40/  9132BA :                     ; ; FmIns_DrumKick:
(1)   41/  9132BA :                     ; ; 		binclude "sound/instr/fm/drum_kick.gsx",$2478,$20
(1)   42/  9132BA :                     ; ; FmIns_DrumSnare:
(1)   43/  9132BA :                     ; ; 		binclude "sound/instr/fm/drum_snare.gsx",$2478,$20
(1)   44/  9132BA :                     ; ; ; ; FmIns_DrumCloseHat:
(1)   45/  9132BA :                     ; ; ; ; 		binclude "sound/instr/fm/drum_closehat.gsx",$2478,$20
(1)   46/  9132BA :                     FmIns_PianoM1:
(1)   47/  9132BA :                     		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)   48/  9132DA :                     ; ; FmIns_PianoM116:
(1)   49/  9132DA :                     ; ; 		binclude "sound/instr/fm/piano_m116.gsx",$2478,$20
(1)   50/  9132DA :                     ;
(1)   51/  9132DA :                     ; ; ;
(1)   52/  9132DA :                     ; ; ; ; FmIns_Bass_gum:
(1)   53/  9132DA :                     ; ; ; ; 		binclude "sound/instr/fm/bass_gum.gsx",$2478,$20
(1)   54/  9132DA :                     FmIns_Bass_calm:
(1)   55/  9132DA :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   56/  9132FA :                     ; FmIns_Bass_heavy:
(1)   57/  9132FA :                     ; 		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)   58/  9132FA :                     ; FmIns_Bass_ambient:
(1)   59/  9132FA :                     ; 		binclude "sound/instr/fm/bass_ambient.gsx",$2478,$20
(1)   60/  9132FA :                     ; ; ; FmIns_Brass_gummy:
(1)   61/  9132FA :                     ; ; ; 		binclude "sound/instr/fm/brass_gummy.gsx",$2478,$20
(1)   62/  9132FA :                     ; FmIns_Flaute_1:
(1)   63/  9132FA :                     ; 		binclude "sound/instr/fm/flaute_1.gsx",$2478,$20
(1)   64/  9132FA :                     FmIns_Bass_1:
(1)   65/  9132FA :                     		binclude "sound/instr/fm/bass_low.gsx",$2478,$20
(1)   66/  91331A :                     FmIns_Bass_2:
(1)   67/  91331A :                     		binclude "sound/instr/fm/bass_strong.gsx",$2478,$20
(1)   68/  91333A :                     ; FmIns_Bass_3:
(1)   69/  91333A :                     ; 		binclude "sound/instr/fm/bass_3.gsx",$2478,$20
(1)   70/  91333A :                     ; FmIns_Bass_4:
(1)   71/  91333A :                     ; 		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   72/  91333A :                     ; FmIns_Bass_5:
(1)   73/  91333A :                     ; 		binclude "sound/instr/fm/bass_5.gsx",$2478,$20
(1)   74/  91333A :                     FmIns_Bass_club:
(1)   75/  91333A :                     		binclude "sound/instr/fm/bass_club.gsx",$2478,$20
(1)   76/  91335A :                     FmIns_Bass_donna:
(1)   77/  91335A :                     		binclude "sound/instr/fm/bass_feellove.gsx",$2478,$20
(1)   78/  91337A :                     FmIns_Bass_groove:
(1)   79/  91337A :                     		binclude "sound/instr/fm/bass_groove.gsx",$2478,$20
(1)   80/  91339A :                     FmIns_Bass_groove_2:
(1)   81/  91339A :                     		binclude "sound/instr/fm/bass_groove_2.gsx",$2478,$20
(1)   82/  9133BA :                     FmIns_Bass_groove_gem:
(1)   83/  9133BA :                     		binclude "sound/instr/fm/bass_groove_gem.gsx",$2478,$20
(1)   84/  9133DA :                     FmIns_Bass_italo:
(1)   85/  9133DA :                     		binclude "sound/instr/fm/bass_italo.gsx",$2478,$20
(1)   86/  9133FA :                     FmIns_Bass_duck:
(1)   87/  9133FA :                     		binclude "sound/instr/fm/bass_duck.gsx",$2478,$20
(1)   88/  91341A :                     
(1)   89/  91341A :                     ; FmIns_Bass_kon:
(1)   90/  91341A :                     ; 		binclude "sound/instr/fm/bass_kon.gsx",$2478,$20
(1)   91/  91341A :                     
(1)   92/  91341A :                     ; FmIns_Bass_mecan:
(1)   93/  91341A :                     ; 		binclude "sound/instr/fm/bass_mecan.gsx",$2478,$20
(1)   94/  91341A :                     ;
(1)   95/  91341A :                     ; ; ; FmIns_Bass_heavy:
(1)   96/  91341A :                     ; ; ; 		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)   97/  91341A :                     ; ; ; FmIns_Bass_metal:
(1)   98/  91341A :                     ; ; ; 		binclude "sound/instr/fm/bass_metal.gsx",$2478,$20
(1)   99/  91341A :                     ; FmIns_Bass_synth:
(1)  100/  91341A :                     ; 		binclude "sound/instr/fm/bass_synth_1.gsx",$2478,$20
(1)  101/  91341A :                     ; FmIns_Guitar_1:
(1)  102/  91341A :                     ; 		binclude "sound/instr/fm/guitar_1.gsx",$2478,$20
(1)  103/  91341A :                     ; ; ; FmIns_Horn_1:
(1)  104/  91341A :                     ; ; ; 		binclude "sound/instr/fm/horn_1.gsx",$2478,$20
(1)  105/  91341A :                     ; FmIns_Organ_M1:
(1)  106/  91341A :                     ; 		binclude "sound/instr/fm/organ_m1.gsx",$2478,$20
(1)  107/  91341A :                     ; ; ; FmIns_Bass_Beach:
(1)  108/  91341A :                     ; ; ; 		binclude "sound/instr/fm/bass_beach.gsx",$2478,$20
(1)  109/  91341A :                     ; ; ; FmIns_Bass_Beach_2:
(1)  110/  91341A :                     ; ; ; 		binclude "sound/instr/fm/bass_beach_2.gsx",$2478,$20
(1)  111/  91341A :                     ; ; ; FmIns_Brass_Cave:
(1)  112/  91341A :                     ; ; ; 		binclude "sound/instr/fm/brass_cave.gsx",$2478,$20
(1)  113/  91341A :                     ; ; FmIns_Brass_Gem:
(1)  114/  91341A :                     ; ; 		binclude "sound/instr/fm/brass_gem.gsx",$2478,$20
(1)  115/  91341A :                     ; ; FmIns_Piano_Small:
(1)  116/  91341A :                     ; ; 		binclude "sound/instr/fm/piano_small.gsx",$2478,$20
(1)  117/  91341A :                     FmIns_Piano_Aqua:
(1)  118/  91341A :                     		binclude "sound/instr/fm/piano_aqua.gsx",$2478,$20
(1)  119/  91343A :                     
(1)  120/  91343A :                     FmIns_Trumpet_1:
(1)  121/  91343A :                     		binclude "sound/instr/fm/trumpet_1.gsx",$2478,$20
(1)  122/  91345A :                     FmIns_Trumpet_2:
(1)  123/  91345A :                     		binclude "sound/instr/fm/trumpet_2.gsx",$2478,$20
(1)  124/  91347A :                     FmIns_Trumpet_kon:
(1)  125/  91347A :                     		binclude "sound/instr/fm/trumpet_kon.gsx",$2478,$20
(1)  126/  91349A :                     ; FmIns_Trumpet_puy:
(1)  127/  91349A :                     ; 		binclude "sound/instr/fm/trumpet_puy.gsx",$2478,$20
(1)  128/  91349A :                     FmIns_Trumpet_carnival:
(1)  129/  91349A :                     		binclude "sound/instr/fm/trumpet_carnivl.gsx",$2478,$20
(1)  130/  9134BA :                     
(1)  131/  9134BA :                     ; FmIns_Bell_Glass:
(1)  132/  9134BA :                     ; 		binclude "sound/instr/fm/bell_glass.gsx",$2478,$20
(1)  133/  9134BA :                     FmIns_Marimba:
(1)  134/  9134BA :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)  135/  9134DA :                     
(1)  136/  9134DA :                     FmIns_Ambient_dark:
(1)  137/  9134DA :                     		binclude "sound/instr/fm/ambient_dark.gsx",$2478,$20
(1)  138/  9134FA :                     FmIns_Ambient_spook:
(1)  139/  9134FA :                     		binclude "sound/instr/fm/ambient_spook.gsx",$2478,$20
(1)  140/  91351A :                     FmIns_Ambient_3:
(1)  141/  91351A :                     		binclude "sound/instr/fm/ambient_3.gsx",$2478,$20
(1)  142/  91353A :                     FmIns_Ding_toy:
(1)  143/  91353A :                     		binclude "sound/instr/fm/ding_toy.gsx",$2478,$20
(1)  144/  91355A :                     ; FmIns_Bell_China:
(1)  145/  91355A :                     ; 		binclude "sound/instr/fm/bell_china.gsx",$2478,$20
(1)  146/  91355A :                     FmIns_Brass_Eur:
(1)  147/  91355A :                     		binclude "sound/instr/fm/brass_eur.gsx",$2478,$20
(1)  148/  91357A :                     FmIns_Brass_Puy:
(1)  149/  91357A :                     		binclude "sound/instr/fm/brass_puy.gsx",$2478,$20
(1)  150/  91359A :                     FmIns_Flaute_cave:
(1)  151/  91359A :                     		binclude "sound/instr/fm/flaute_sea.gsx",$2478,$20
(1)  152/  9135BA :                     FmIns_Banjo_puy:
(1)  153/  9135BA :                     		binclude "sound/instr/fm/banjo_puy.gsx",$2478,$20
(1)  154/  9135DA :                     ; FmIns_Violin_gem:
(1)  155/  9135DA :                     ; 		binclude "sound/instr/fm/violin_gem.gsx",$2478,$20
(1)  156/  9135DA :                     
(1)  157/  9135DA :                     FmIns_PSynth_plus:
(1)  158/  9135DA :                     		binclude "sound/instr/fm/psynth_plus.gsx",$2478,$20
(1)  159/  9135FA :                     FmIns_Ding_1:
(1)  160/  9135FA :                     		binclude "sound/instr/fm/ding_gem.gsx",$2478,$20
(1)  161/  91361A :                     FmIns_Trombone_gem:
(1)  162/  91361A :                     		binclude "sound/instr/fm/trombone_gem.gsx",$2478,$20
(1)  163/  91363A :                     
(1)  164/  91363A :                     FmIns_HBeat_tom:
(1)  165/  91363A :                     		binclude "sound/instr/fm/nadia_tom.gsx",$2478,$20
(1)  166/  91365A :                     
     115/  91365A :                     		include "sound/smpl_dac.asm"
(1)    1/  91365A :                     ; ====================================================================
(1)    2/  91365A :                     ; DAC samples
(1)    3/  91365A :                     ;
(1)    4/  91365A :                     ; This must be located at the 900000 area.
(1)    5/  91365A :                     ; ====================================================================
(1)    6/  91365A :                     
(1)    7/  91365A :                     ; Special sample data macro
(1)    8/  91365A :                     gSmpHead macro len,loop
(1)    9/  91365A :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   10/  91365A :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   11/  91365A :                     	endm
(1)   12/  91365A :                     
(1)   13/  91365A :                     	align $8000
(1)   14/  918000 :                     DacIns_wegot_kick:
(1)   15/  918000 : (MACRO)             	gSmpHead .end-.start,0
(1)   15/  918000 : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   15/  918003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   16/  918006 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   17/  91877A :                     .end:
(1)   18/  91877A :                     DacIns_snare_lobo:
(1)   19/  91877A : (MACRO)             	gSmpHead .end-.start,0
(1)   19/  91877A : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/  91877D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/  918780 :                     .start:	binclude "sound/instr/smpl/snare_lobo.wav",$2C
(1)   21/  9198A4 :                     .end:
(1)   22/  9198A4 :                     
(1)   23/  9198A4 :                     
(1)   24/  9198A4 :                     DacIns_wegot_crash:
(1)   25/  9198A4 : (MACRO)             	gSmpHead .end-.start,0
(1)   25/  9198A4 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   25/  9198A7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/  9198AA :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   27/  91C56E :                     .end:
(1)   28/  91C56E :                     
(1)   29/  91C56E :                     
(1)   30/  91C56E :                     DacIns_snare_scd:
(1)   31/  91C56E : (MACRO)             	gSmpHead .end-.start,0
(1)   31/  91C56E : F419 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   31/  91C571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   32/  91C574 :                     .start:	binclude "sound/instr/smpl/snare_scd.wav",$2C
(1)   33/  91DF68 :                     .end:
(1)   34/  91DF68 :                     DacIns_snare_magn:
(1)   35/  91DF68 : (MACRO)             	gSmpHead .end-.start,0
(1)   35/  91DF68 : D413 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   35/  91DF6B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/  91DF6E :                     .start:	binclude "sound/instr/smpl/snare_magn.wav",$2C
(1)   37/  91F342 :                     .end:
(1)   38/  91F342 :                     DacIns_kick:
(1)   39/  91F342 : (MACRO)             	gSmpHead .end-.start,0
(1)   39/  91F342 : E80F 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   39/  91F345 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   40/  91F348 :                     .start:	binclude "sound/instr/smpl/stKick.wav",$2C
(1)   41/  920330 :                     .end:
(1)   42/  920330 :                     
(1)   43/  920330 :                     DacIns_Nadie:
(1)   44/  920330 : (MACRO)             	gSmpHead .end-.start,0
(1)   44/  920330 : BEE7 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   44/  920333 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   45/  920336 :                     .start:	binclude "sound/instr/smpl/nadie.wav",$2C
(1)   46/  92EAF2 :                     	align 4
(1)   47/  92EAF4 :                     .end:
(1)   48/  92EAF4 :                     
(1)   49/  92EAF4 :                     
     116/  92EAF4 :                     		include "data/md_bank0.asm"
(1)    1/  92EAF4 :                     ; ====================================================================
(1)    2/  92EAF4 :                     ; ----------------------------------------------------------------
(1)    3/  92EAF4 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/  92EAF4 :                     ; for big stuff like maps, levels, etc.
(1)    5/  92EAF4 :                     ;
(1)    6/  92EAF4 :                     ; For graphics use DMA and place your files at
(1)    7/  92EAF4 :                     ; md_dma.asm (Watch out for the $20000-section limit.)
(1)    8/  92EAF4 :                     ;
(1)    9/  92EAF4 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/  92EAF4 :                     ; ----------------------------------------------------------------
(1)   11/  92EAF4 :                     
(1)   12/  92EAF4 :                     		include "data/mars/palettes.asm"	; All 32X palettes will be here.
(2)    1/  92EAF4 :                     ; ====================================================================
(2)    2/  92EAF4 :                     ; ----------------------------------------------------------------
(2)    3/  92EAF4 :                     ; Put your 32X palettes here
(2)    4/  92EAF4 :                     ;
(2)    5/  92EAF4 :                     ; These are located on a single 68K $900000+ bank
(2)    6/  92EAF4 :                     ;
(2)    7/  92EAF4 :                     ; Labels MUST be aligned by 2
(2)    8/  92EAF4 :                     ; ----------------------------------------------------------------
(2)    9/  92EAF4 :                     
(2)   10/  92EAF4 :                     		align 2
(2)   11/  92EAF4 :                     PalData_Mars_Test:
(2)   12/  92EAF4 :                     		binclude "data/mars/tests/test_pal.bin"
(2)   13/  92ECF4 :                     ; 		binclude "data/mars/tests/sprites/sprites_pal.bin"
(2)   14/  92ECF4 :                     		align 2
(2)   15/  92ECF4 :                     ; PalData_Mars_Test2:
(2)   16/  92ECF4 :                     ; 		binclude "data/mars/tests/test2_pal.bin"
(2)   17/  92ECF4 :                     ; 		align 2
(2)   18/  92ECF4 :                     MDLDATA_PAL_TEST:
(2)   19/  92ECF4 :                     		binclude "data/mars/objects/mtrl/yui_pal.bin"
(2)   20/  92EEF4 :                     		align 2
(2)   21/  92EEF4 :                     ; MDLDATA_PAL_TEST2:
(2)   22/  92EEF4 :                     ; 		binclude "data/mars/objects/mtrl/link_pal.bin"
(2)   23/  92EEF4 :                     ; 		align 2
(2)   24/  92EEF4 :                     TestMars_YuiP:
(2)   25/  92EEF4 :                     		binclude "data/mars/tests/yui_mars_pal.bin"
(2)   26/  92F0A2 :                     		align 4
(2)   27/  92F0A4 :                     
(2)   28/  92F0A4 :                     MapPal_M:	binclude "data/md/maps/level0/pal_m.bin"
(2)   29/  92F2A4 :                     		align 2
(2)   30/  92F2A4 :                     
(1)   13/  92F2A4 :                     
(1)   14/  92F2A4 :                     		align 2
(1)   15/  92F2A4 :                     Pal_level0:	binclude "data/md/maps/level0/pal.bin"
(1)   16/  92F2C4 :                     		align 2
(1)   17/  92F2C4 :                     ; ----------------------------------------------------------------
(1)   18/  92F2C4 :                     
(1)   19/  92F2C4 :                     		align 2
(1)   20/  92F2C4 :                     MapHead_0:	binclude "data/md/maps/level0/head.bin"
(1)   21/  92F2CE :                     MapBlk_0:	binclude "data/md/maps/level0/blocks.bin"
(1)   22/  92FAD6 :                     		align 2
(1)   23/  92FAD6 :                     MapFgL_0:	binclude "data/md/maps/level0/fg_low.bin"
(1)   24/  92FF56 :                     		align 2
(1)   25/  92FF56 :                     MapFgH_0:	binclude "data/md/maps/level0/fg_hi.bin"
(1)   26/  9303D6 :                     		align 2
(1)   27/  9303D6 :                     MapFgC_0:	binclude "data/md/maps/level0/fg_col.bin"
(1)   28/  930856 :                     		align 2
(1)   29/  930856 :                     MapBgL_0:	binclude "data/md/maps/level0/bg_low.bin"
(1)   30/  930CD6 :                     		align 2
(1)   31/  930CD6 :                     MapBgH_0:	binclude "data/md/maps/level0/bg_hi.bin"
(1)   32/  931156 :                     		align 2
(1)   33/  931156 :                     
(1)   34/  931156 :                     ; ----------------------------------------------------------------
(1)   35/  931156 :                     ; Headers for 32X maps go here...
(1)   36/  931156 :                     
(1)   37/  931156 :                     		align 2
(1)   38/  931156 :                     MapHead_M:	binclude "data/md/maps/level0/head_m.bin"
(1)   39/  93115C :                     		align 2
(1)   40/  93115C :                     
     117/  93115C :                     MDBNK0_END:
     118/   3115C :                     		dephase
     119/   3115C :                     ; 		org $100000-4			; Fill this bank and
     120/   3115C :                     ; 		dc.b "BNK0"			; add a tag at the end
     121/   3115C :                     
     126/   3115C :                     
     127/   3115C :                     ; ---------------------------------------------
     128/   3115C :                     ; BANK 1
     129/   3115C :                     ; ---------------------------------------------
     130/   3115C :                     
     131/   3115C :                     ; 		phase $900000
     132/   3115C :                     ; 		include "data/md_bank1.asm"
     133/   3115C :                     ; 		dephase
     134/   3115C :                     ; 		org $200000-4
     135/   3115C :                     ; 		dc.b "BNK1"
     136/   3115C :                     
     137/   3115C :                     ; ---------------------------------------------
     138/   3115C :                     ; BANK 2
     139/   3115C :                     ; ---------------------------------------------
     140/   3115C :                     
     141/   3115C :                     ; 		phase $900000
     142/   3115C :                     ; 		include "data/md_bank2.asm"
     143/   3115C :                     ; 		dephase
     144/   3115C :                     ; 		org $300000-4
     145/   3115C :                     ; 		dc.b "BNK2"
     146/   3115C :                     
     147/   3115C :                     ; ---------------------------------------------
     148/   3115C :                     ; BANK 3
     149/   3115C :                     ; ---------------------------------------------
     150/   3115C :                     
     151/   3115C :                     ; 		phase $900000
     152/   3115C :                     ; 		include "data/md_bank3.asm"
     153/   3115C :                     ; 		dephase
     154/   3115C :                     ; 		org $400000-4
     155/   3115C :                     ; 		dc.b "BNK3"
     156/   3115C :                     
     157/   3115C :                     ; ====================================================================
     158/   3115C :                     ; ----------------------------------------------------------------
     159/   3115C :                     ; MD DMA data: BANK-free but requres RV=1
     160/   3115C :                     ; ----------------------------------------------------------------
     161/   3115C :                     
     162/   3115C :                     		align 4
     163/   3115C :                     		include "data/md_dma.asm"
(1)    1/   3115C :                     ; ====================================================================
(1)    2/   3115C :                     ; ----------------------------------------------------------------
(1)    3/   3115C :                     ; DMA ROM DATA Transfer section
(1)    4/   3115C :                     ; 
(1)    5/   3115C :                     ; RV bit must be enabled to read from here
(1)    6/   3115C :                     ; ----------------------------------------------------------------
(1)    7/   3115C :                     
(1)    8/   3115C :                     		align $8000
(1)    9/   38000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   10/   39000 :                     ASCII_FONT_e:
(1)   11/   39000 :                     
(1)   12/   39000 :                     		align $8000
(1)   13/   40000 :                     ; ART_EMI:	binclude "data/md/sprites/emi_art.bin"
(1)   14/   40000 :                     ; ART_EMI_e:
(1)   15/   40000 :                     Art_level0:	binclude "data/md/maps/level0/art.bin"
(1)   16/   413E0 :                     Art_level0_e:
(1)   17/   413E0 :                     
(1)   18/   413E0 :                     
(1)   19/   413E0 :                     
(1)   20/   413E0 :                     
(1)   21/   413E0 :                     
     164/   413E0 :                     
     165/   413E0 :                     ; ====================================================================
     166/   413E0 :                     ; ----------------------------------------------------------------
     167/   413E0 :                     ; SH2 RAM CODE
     168/   413E0 :                     ; ----------------------------------------------------------------
     169/   413E0 :                     
     170/   413E0 :                     		align 4
     171/   413E0 :                     MARS_RAMDATA:
     172/   413E0 :                     		include "system/mars/code.asm"
(1)    1/   413E0 :                     ; ====================================================================
(1)    2/   413E0 :                     ; ----------------------------------------------------------------
(1)    3/   413E0 :                     ; MARS SH2 CODE section, stored on SDRAM
(1)    4/   413E0 :                     ;
(1)    5/   413E0 :                     ; CODE for both CPUs
(1)    6/   413E0 :                     ; RAM and some DATA also goes here
(1)    7/   413E0 :                     ; ----------------------------------------------------------------
(1)    8/   413E0 :                     
(1)    9/   413E0 :                     ; *************************************************
(1)   10/   413E0 :                     ; communication setup:
(1)   11/   413E0 :                     ;
(1)   12/   413E0 :                     ; comm0-comm7  - ** FREE ***
(1)   13/   413E0 :                     ; comm8-comm11 - Used to transfer data manually
(1)   14/   413E0 :                     ;                from Z80 to SH2 side, 68k uses DREQ.
(1)   15/   413E0 :                     ; comm12       - Master CPU control
(1)   16/   413E0 :                     ; comm14       - Slave CPU control
(1)   17/   413E0 :                     ; *************************************************
(1)   18/   413E0 :                     
(1)   19/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   20/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   21/ 6000000 :                     
(1)   22/ 6000000 :                     ; CPU TEST MACRO
(1)   23/ 6000000 :                     testme macro miau
(1)   24/ 6000000 :                     		mov	#miau,r1
(1)   25/ 6000000 :                     		mov	#_vdpreg,r2
(1)   26/ 6000000 :                     		mov	#_vdpreg+bitmapmd,r3
(1)   27/ 6000000 :                     -		mov.b	@(vdpsts,r2),r0
(1)   28/ 6000000 :                     		tst	#HBLK,r0
(1)   29/ 6000000 :                     		bt	-
(1)   30/ 6000000 :                     ; -		mov.b	@(vdpsts,r2),r0
(1)   31/ 6000000 :                     ; 		tst	#HBLK,r0
(1)   32/ 6000000 :                     ;  		bf	-
(1)   33/ 6000000 :                     		mov.b	r1,@r3
(1)   34/ 6000000 :                     	endm
(1)   35/ 6000000 :                     
(1)   36/ 6000000 :                     ; ====================================================================
(1)   37/ 6000000 :                     ; ----------------------------------------------------------------
(1)   38/ 6000000 :                     ; Settings
(1)   39/ 6000000 :                     ; ----------------------------------------------------------------
(1)   40/ 6000000 :                     
(1)   41/ 6000000 : =$0                 SH2_DEBUG	equ 0		; Set to 1 too see if CPUs are active using comm counters (0 and 1)
(1)   42/ 6000000 : =$6040000           STACK_MSTR	equ CS3|$40000
(1)   43/ 6000000 : =$603F000           STACK_SLV	equ CS3|$3F000
(1)   44/ 6000000 :                     
(1)   45/ 6000000 :                     ; ====================================================================
(1)   46/ 6000000 :                     ; ----------------------------------------------------------------
(1)   47/ 6000000 :                     ; MARS GLOBAL gbr variables for both SH2
(1)   48/ 6000000 :                     ; ----------------------------------------------------------------
(1)   49/ 6000000 :                     
(1)   50/ 6000000 : (MACRO)             			struct 0
(1)   50/ 6000000 : =$6000000           GLBL_LASTPC     set *
(1)   50/   413E0 :                                     dephase
(1)   50/   413E0 : =$413E0             GLBL_LASTORG    set *
(1)   50/       0 :                                     phase 0
(1)   51/       0 :                     marsGbl_PlyPzList_R	ds.l 1	; Current graphic piece to draw
(1)   52/       4 :                     marsGbl_PlyPzList_W	ds.l 1	; Current graphic piece to write
(1)   53/       8 :                     marsGbl_PlyPzList_Start	ds.l 1	; Polygon pieces list Start point
(1)   54/       C :                     marsGbl_PlyPzList_End	ds.l 1	; Polygon pieces list End point
(1)   55/      10 :                     marsGbl_CurrRdPlgn	ds.l 1	; Current polygon to read for slicing
(1)   56/      14 :                     marsGbl_CurrZList	ds.l 1	; Current Zsort entry
(1)   57/      18 :                     marsGbl_CurrZTop	ds.l 1	; Current Zsort list
(1)   58/      1C :                     marsGbl_CurrFacePos	ds.l 1	; Current top face of the list while reading model data
(1)   59/      20 :                     marsGbl_CurrNumFaces	ds.w 1	; and the number of faces stored on that list
(1)   60/      22 :                     marsGbl_WdgMode		ds.w 1	; Current watchdog task
(1)   61/      24 :                     marsGbl_WdgHold		ds.w 1	; Watchdog pause
(1)   62/      26 :                     marsGbl_PolyBuffNum	ds.w 1	; Polygon-list swap number
(1)   63/      28 :                     marsGbl_PlyPzCntr	ds.w 1	; Number of graphic pieces to draw
(1)   64/      2A :                     marsGbl_CntrRdPlgn	ds.w 1	; Number of polygons to slice
(1)   65/      2C :                     marsGbl_CntrRdSpr	ds.w 1	; Number of sprites to read
(1)   66/      2E :                     marsGbl_XShift		ds.w 1	; Xshift bit at the start of master_loop (TODO: a HBlank list)
(1)   67/      30 :                     marsGbl_MdDrawTmr	ds.w 1	; Screen init counter for redrawing the entire screen (Write $02)
(1)   68/      32 :                     marsGbl_WaveEnable	ds.w 1	; General linetable wave effect: Disable/Enable
(1)   69/      34 :                     marsGbl_WaveSpd		ds.w 1	; Linetable wave speed
(1)   70/      36 :                     marsGbl_WaveMax		ds.w 1	; Maximum wave
(1)   71/      38 :                     marsGbl_WaveDeform	ds.w 1	; Wave increment value
(1)   72/      3A :                     marsGbl_WaveTan		ds.w 1	; Linetable wave tan
(1)   73/      3C :                     marsGbl_DivStop_M	ds.w 1
(1)   74/      3E :                     marsGbl_DrwPause	ds.w 1
(1)   75/      40 :                     sizeof_MarsGbl		ds.l 0
(1)   76/      40 : (MACRO)             			finish
(1)   76/       0 :                                     !org GLBL_LASTORG
(1)   76/ 6000000 :                                     phase GLBL_LASTPC
(1)   77/ 6000000 :                     
(1)   78/ 6000000 :                     ; ====================================================================
(1)   79/ 6000000 :                     ; ----------------------------------------------------------------
(1)   80/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   81/ 6000000 :                     ; ----------------------------------------------------------------
(1)   82/ 6000000 :                     
(1)   83/ 6000000 :                     		align 4
(1)   84/ 6000000 :                     SH2_Master:
(1)   85/ 6000000 : 0600 0CD0 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
(1)   86/ 6000008 : 0600 0CD0 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
(1)   87/ 6000010 : 0600 0328           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   88/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   89/ 6000018 : 0600 032C           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   90/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   91/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   92/ 6000024 : 0600 0330           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   93/ 6000028 : 0600 0334           		dc.l SH2_M_ErrDma		; DMA address error
(1)   94/ 600002C : 0600 0338           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   95/ 6000030 : 0600 033C           		dc.l SH2_M_ErrUser		; User break vector
(1)   96/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   97/ 6000058 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   98/ 600007C : 0000 0000           		dc.l 0
(1)   99/ 6000080 : 0600 0324           		dc.l SH2_M_Error		; Trap user vectors
(1)  100/ 6000084 : 0600 0324           		dc.l SH2_M_Error
(1)  101/ 6000088 : 0600 0324           		dc.l SH2_M_Error
(1)  102/ 600008C : 0600 0324           		dc.l SH2_M_Error
(1)  103/ 6000090 : 0600 0324           		dc.l SH2_M_Error
(1)  104/ 6000094 : 0600 0324           		dc.l SH2_M_Error
(1)  105/ 6000098 : 0600 0324           		dc.l SH2_M_Error
(1)  106/ 600009C : 0600 0324           		dc.l SH2_M_Error
(1)  107/ 60000A0 : 0600 0324           		dc.l SH2_M_Error
(1)  108/ 60000A4 : 0600 0324           		dc.l SH2_M_Error
(1)  109/ 60000A8 : 0600 0324           		dc.l SH2_M_Error
(1)  110/ 60000AC : 0600 0324           		dc.l SH2_M_Error
(1)  111/ 60000B0 : 0600 0324           		dc.l SH2_M_Error
(1)  112/ 60000B4 : 0600 0324           		dc.l SH2_M_Error
(1)  113/ 60000B8 : 0600 0324           		dc.l SH2_M_Error
(1)  114/ 60000BC : 0600 0324           		dc.l SH2_M_Error
(1)  115/ 60000C0 : 0600 0324           		dc.l SH2_M_Error
(1)  116/ 60000C4 : 0600 0324           		dc.l SH2_M_Error
(1)  117/ 60000C8 : 0600 0324           		dc.l SH2_M_Error
(1)  118/ 60000CC : 0600 0324           		dc.l SH2_M_Error
(1)  119/ 60000D0 : 0600 0324           		dc.l SH2_M_Error
(1)  120/ 60000D4 : 0600 0324           		dc.l SH2_M_Error
(1)  121/ 60000D8 : 0600 0324           		dc.l SH2_M_Error
(1)  122/ 60000DC : 0600 0324           		dc.l SH2_M_Error
(1)  123/ 60000E0 : 0600 0324           		dc.l SH2_M_Error
(1)  124/ 60000E4 : 0600 0324           		dc.l SH2_M_Error
(1)  125/ 60000E8 : 0600 0324           		dc.l SH2_M_Error
(1)  126/ 60000EC : 0600 0324           		dc.l SH2_M_Error
(1)  127/ 60000F0 : 0600 0324           		dc.l SH2_M_Error
(1)  128/ 60000F4 : 0600 0324           		dc.l SH2_M_Error
(1)  129/ 60000F8 : 0600 0324           		dc.l SH2_M_Error
(1)  130/ 60000FC : 0600 0324           		dc.l SH2_M_Error
(1)  131/ 6000100 : 0600 0248            		dc.l master_irq		; Level 1 IRQ
(1)  132/ 6000104 : 0600 0248           		dc.l master_irq		; Level 2 & 3 IRQ
(1)  133/ 6000108 : 0600 0248           		dc.l master_irq		; Level 4 & 5 IRQ
(1)  134/ 600010C : 0600 0248           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  135/ 6000110 : 0600 0248           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  136/ 6000114 : 0600 0248           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  137/ 6000118 : 0600 0248           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  138/ 600011C : 0600 0248           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  139/ 6000120 :                     	; ON-chip interrupts go here (vbr+$120)
(1)  140/ 6000120 : 0600 0248           		dc.l master_irq		; Watchdog (custom)
(1)  141/ 6000124 :                     
(1)  142/ 6000124 :                     ; ====================================================================
(1)  143/ 6000124 :                     ; ----------------------------------------------------------------
(1)  144/ 6000124 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  145/ 6000124 :                     ; ----------------------------------------------------------------
(1)  146/ 6000124 :                     
(1)  147/ 6000124 :                     		align 4
(1)  148/ 6000124 :                     SH2_Slave:
(1)  149/ 6000124 : 0600 1168 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
(1)  150/ 600012C : 0600 1168 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
(1)  151/ 6000134 : 0600 0354           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  152/ 6000138 : 0000 0000           		dc.l 0				; reserved
(1)  153/ 600013C : 0600 0358           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  154/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(1)  155/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(1)  156/ 6000148 : 0600 035C           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  157/ 600014C : 0600 0360           		dc.l SH2_S_ErrDma		; DMA address error
(1)  158/ 6000150 : 0600 0364           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  159/ 6000154 : 0600 0368           		dc.l SH2_S_ErrUser		; User break vector
(1)  160/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  161/ 600017C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  162/ 60001A0 : 0000 0000           		dc.l 0
(1)  163/ 60001A4 : 0600 0350           		dc.l SH2_S_Error		; Trap user vectors
(1)  164/ 60001A8 : 0600 0350           		dc.l SH2_S_Error
(1)  165/ 60001AC : 0600 0350           		dc.l SH2_S_Error
(1)  166/ 60001B0 : 0600 0350           		dc.l SH2_S_Error
(1)  167/ 60001B4 : 0600 0350           		dc.l SH2_S_Error
(1)  168/ 60001B8 : 0600 0350           		dc.l SH2_S_Error
(1)  169/ 60001BC : 0600 0350           		dc.l SH2_S_Error
(1)  170/ 60001C0 : 0600 0350           		dc.l SH2_S_Error
(1)  171/ 60001C4 : 0600 0350           		dc.l SH2_S_Error
(1)  172/ 60001C8 : 0600 0350           		dc.l SH2_S_Error
(1)  173/ 60001CC : 0600 0350           		dc.l SH2_S_Error
(1)  174/ 60001D0 : 0600 0350           		dc.l SH2_S_Error
(1)  175/ 60001D4 : 0600 0350           		dc.l SH2_S_Error
(1)  176/ 60001D8 : 0600 0350           		dc.l SH2_S_Error
(1)  177/ 60001DC : 0600 0350           		dc.l SH2_S_Error
(1)  178/ 60001E0 : 0600 0350           		dc.l SH2_S_Error
(1)  179/ 60001E4 : 0600 0350           		dc.l SH2_S_Error
(1)  180/ 60001E8 : 0600 0350           		dc.l SH2_S_Error
(1)  181/ 60001EC : 0600 0350           		dc.l SH2_S_Error
(1)  182/ 60001F0 : 0600 0350           		dc.l SH2_S_Error
(1)  183/ 60001F4 : 0600 0350           		dc.l SH2_S_Error
(1)  184/ 60001F8 : 0600 0350           		dc.l SH2_S_Error
(1)  185/ 60001FC : 0600 0350           		dc.l SH2_S_Error
(1)  186/ 6000200 : 0600 0350           		dc.l SH2_S_Error
(1)  187/ 6000204 : 0600 0350           		dc.l SH2_S_Error
(1)  188/ 6000208 : 0600 0350           		dc.l SH2_S_Error
(1)  189/ 600020C : 0600 0350           		dc.l SH2_S_Error
(1)  190/ 6000210 : 0600 0350           		dc.l SH2_S_Error
(1)  191/ 6000214 : 0600 0350           		dc.l SH2_S_Error
(1)  192/ 6000218 : 0600 0350           		dc.l SH2_S_Error
(1)  193/ 600021C : 0600 0350           		dc.l SH2_S_Error
(1)  194/ 6000220 : 0600 0350           		dc.l SH2_S_Error
(1)  195/ 6000224 : 0600 0270            		dc.l slave_irq			; Level 1 IRQ
(1)  196/ 6000228 : 0600 0270           		dc.l slave_irq			; Level 2 & 3 IRQ
(1)  197/ 600022C : 0600 0270           		dc.l slave_irq			; Level 4 & 5 IRQ
(1)  198/ 6000230 : 0600 0270           		dc.l slave_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  199/ 6000234 : 0600 0270           		dc.l slave_irq			; Level 8 & 9 IRQ: Command interupt
(1)  200/ 6000238 : 0600 0270           		dc.l slave_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  201/ 600023C : 0600 0270           		dc.l slave_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  202/ 6000240 : 0600 0270           		dc.l slave_irq			; Level 14 & 15 IRQ: Reset Button
(1)  203/ 6000244 :                     	; ON-chip interrupts go here (vbr+$120)
(1)  204/ 6000244 : 0600 0270           		dc.l slave_irq			; Watchdog (custom)
(1)  205/ 6000248 :                     
(1)  206/ 6000248 :                     ; ====================================================================
(1)  207/ 6000248 :                     ; ----------------------------------------------------------------
(1)  208/ 6000248 :                     ; IRQ
(1)  209/ 6000248 :                     ;
(1)  210/ 6000248 :                     ; r0-r1 are saved first.
(1)  211/ 6000248 :                     ; ----------------------------------------------------------------
(1)  212/ 6000248 :                     
(1)  213/ 6000248 :                     		align 4
(1)  214/ 6000248 :                     master_irq:
(1)  215/ 6000248 : 2F06                		mov.l	r0,@-r15
(1)  216/ 600024A : 2F16                		mov.l	r1,@-r15
(1)  217/ 600024C : 4F22                		sts.l	pr,@-r15
(1)  218/ 600024E : 0002                		stc	sr,r0
(1)  219/ 6000250 : 4009                		shlr2	r0
(1)  220/ 6000252 : C93C                		and	#$3C,r0
(1)  221/ 6000254 : 6103                		mov	r0,r1
(1)  222/ 6000256 : 9023                		mov	#$F0,r0
(1)  223/ 6000258 : 400E                		ldc	r0,sr
(1)  224/ 600025A : D00F                		mov	#int_m_list,r0
(1)  225/ 600025C : 301C                		add	r1,r0
(1)  226/ 600025E : 6102                		mov	@r0,r1
(1)  227/ 6000260 : 410B                		jsr	@r1
(1)  228/ 6000262 : 0009                		nop
(1)  229/ 6000264 : 4F26                		lds.l	@r15+,pr
(1)  230/ 6000266 : 61F6                		mov.l	@r15+,r1
(1)  231/ 6000268 : 60F6                		mov.l	@r15+,r0
(1)  232/ 600026A : 002B                		rte
(1)  233/ 600026C : 0009                		nop
(1)  234/ 600026E :                     		align 4
(1)  235/ 6000270 :                     
(1)  236/ 6000270 :                     ; ====================================================================
(1)  237/ 6000270 :                     ; ----------------------------------------------------------------
(1)  238/ 6000270 :                     ; IRQ
(1)  239/ 6000270 :                     ;
(1)  240/ 6000270 :                     ; r0-r1 are saved first
(1)  241/ 6000270 :                     ; ----------------------------------------------------------------
(1)  242/ 6000270 :                     
(1)  243/ 6000270 :                     slave_irq:
(1)  244/ 6000270 : 2F06                		mov.l	r0,@-r15
(1)  245/ 6000272 : 2F16                		mov.l	r1,@-r15
(1)  246/ 6000274 : 4F22                		sts.l	pr,@-r15
(1)  247/ 6000276 : 0002                		stc	sr,r0
(1)  248/ 6000278 : 4009                		shlr2	r0
(1)  249/ 600027A : C93C                		and	#$3C,r0
(1)  250/ 600027C : 6103                		mov	r0,r1
(1)  251/ 600027E : 900F                		mov	#$F0,r0
(1)  252/ 6000280 : 400E                		ldc	r0,sr
(1)  253/ 6000282 : D006                		mov	#int_s_list,r0
(1)  254/ 6000284 : 301C                		add	r1,r0
(1)  255/ 6000286 : 6102                		mov	@r0,r1
(1)  256/ 6000288 : 410B                		jsr	@r1
(1)  257/ 600028A : 0009                		nop
(1)  258/ 600028C : 4F26                		lds.l	@r15+,pr
(1)  259/ 600028E : 61F6                		mov.l	@r15+,r1
(1)  260/ 6000290 : 60F6                		mov.l	@r15+,r0
(1)  261/ 6000292 : 002B                		rte
(1)  262/ 6000294 : 0009                		nop
(1)  263/ 6000296 :                     		align 4
(1)  264/ 6000298 : 0600 02A4 0600 02E4 		ltorg
                    00F0                
(1)  265/ 60002A2 :                     
(1)  266/ 60002A2 :                     ; ------------------------------------------------
(1)  267/ 60002A2 :                     ; irq list
(1)  268/ 60002A2 :                     ; ------------------------------------------------
(1)  269/ 60002A2 :                     
(1)  270/ 60002A2 :                     		align 4
(1)  271/ 60002A4 :                     int_m_list:
(1)  272/ 60002A4 : 0600 0394 0600 0394 		dc.l m_irq_bad,m_irq_bad
(1)  273/ 60002AC : 0600 0394 0600 0394 		dc.l m_irq_bad,m_irq_bad
(1)  274/ 60002B4 : 0600 0394 C000 0000 		dc.l m_irq_bad,$C0000000	; <-- TOP code on Cache
(1)  275/ 60002BC : 0600 0398 0600 0398 		dc.l m_irq_pwm,m_irq_pwm
(1)  276/ 60002C4 : 0600 03B0 0600 03B0 		dc.l m_irq_cmd,m_irq_cmd
(1)  277/ 60002CC : 0600 0410 0600 0410 		dc.l m_irq_h,m_irq_h
(1)  278/ 60002D4 : 0600 0428 0600 0428 		dc.l m_irq_v,m_irq_v
(1)  279/ 60002DC : 0600 0440 0600 0440 		dc.l m_irq_vres,m_irq_vres
(1)  280/ 60002E4 :                     int_s_list:
(1)  281/ 60002E4 : 0600 04B4 0600 04B4 		dc.l s_irq_bad,s_irq_bad
(1)  282/ 60002EC : 0600 04B4 0600 04B4 		dc.l s_irq_bad,s_irq_bad
(1)  283/ 60002F4 : 0600 04B4 C000 0000 		dc.l s_irq_bad,$C0000000	; <-- TOP code on Cache
(1)  284/ 60002FC : C000 0014 C000 0014 		dc.l s_irq_pwm,s_irq_pwm
(1)  285/ 6000304 : 0600 04B8 0600 04B8 		dc.l s_irq_cmd,s_irq_cmd
(1)  286/ 600030C : 0600 0708 0600 0708 		dc.l s_irq_h,s_irq_h
(1)  287/ 6000314 : 0600 0724 0600 0724 		dc.l s_irq_v,s_irq_v
(1)  288/ 600031C : 0600 0740 0600 0740 		dc.l s_irq_vres,s_irq_vres
(1)  289/ 6000324 :                     
(1)  290/ 6000324 :                     ; ====================================================================
(1)  291/ 6000324 :                     ; ----------------------------------------------------------------
(1)  292/ 6000324 :                     ; Error handler
(1)  293/ 6000324 :                     ; ----------------------------------------------------------------
(1)  294/ 6000324 :                     
(1)  295/ 6000324 :                     ; *** Only works on HARDWARE ***
(1)  296/ 6000324 :                     ;
(1)  297/ 6000324 :                     ; comm2: (CPU)(CODE)
(1)  298/ 6000324 :                     ; comm4: PC counter
(1)  299/ 6000324 :                     ;
(1)  300/ 6000324 :                     ;  CPU | The CPU who got the error:
(1)  301/ 6000324 :                     ;        $00 - Master
(1)  302/ 6000324 :                     ;        $01 - Slave
(1)  303/ 6000324 :                     ;
(1)  304/ 6000324 :                     ; CODE | Error type:
(1)  305/ 6000324 :                     ;	  -1: Unknown error
(1)  306/ 6000324 :                     ;	 $01: Illegal instruction
(1)  307/ 6000324 :                     ;	 $02: Invalid slot instruction
(1)  308/ 6000324 :                     ;	 $03: Address error
(1)  309/ 6000324 :                     ;	 $04: DMA error
(1)  310/ 6000324 :                     ;	 $05: NMI vector
(1)  311/ 6000324 :                     ;	 $06: User break
(1)  312/ 6000324 :                     
(1)  313/ 6000324 :                     SH2_M_Error:
(1)  314/ 6000324 : A00C                		bra	SH2_M_ErrCode
(1)  315/ 6000326 : 9021                		mov	#$00FF,r0
(1)  316/ 6000328 :                     SH2_M_ErrIllg:
(1)  317/ 6000328 : A00A                		bra	SH2_M_ErrCode
(1)  318/ 600032A : E001                		mov	#1,r0
(1)  319/ 600032C :                     SH2_M_ErrInvl:
(1)  320/ 600032C : A008                		bra	SH2_M_ErrCode
(1)  321/ 600032E : E002                		mov	#2,r0
(1)  322/ 6000330 :                     SH2_M_ErrAddr:
(1)  323/ 6000330 : A006                		bra	SH2_M_ErrCode
(1)  324/ 6000332 : E003                		mov	#3,r0
(1)  325/ 6000334 :                     SH2_M_ErrDma:
(1)  326/ 6000334 : A004                		bra	SH2_M_ErrCode
(1)  327/ 6000336 : E004                		mov	#4,r0
(1)  328/ 6000338 :                     SH2_M_ErrNmi:
(1)  329/ 6000338 : A002                		bra	SH2_M_ErrCode
(1)  330/ 600033A : E005                		mov	#5,r0
(1)  331/ 600033C :                     SH2_M_ErrUser:
(1)  332/ 600033C : A000                		bra	SH2_M_ErrCode
(1)  333/ 600033E : E006                		mov	#6,r0
(1)  334/ 6000340 :                     ; r0 - value
(1)  335/ 6000340 :                     SH2_M_ErrCode:
(1)  336/ 6000340 : D10E                		mov	#_sysreg+comm2,r1
(1)  337/ 6000342 : 2101                		mov.w	r0,@r1
(1)  338/ 6000344 : D10E                		mov	#_sysreg+comm4,r1
(1)  339/ 6000346 : 60F2                		mov	@r15,r0
(1)  340/ 6000348 : 2102                		mov	r0,@r1
(1)  341/ 600034A : AFFE                		bra	*
(1)  342/ 600034C : 0009                		nop
(1)  343/ 600034E :                     		align 4
(1)  344/ 6000350 :                     
(1)  345/ 6000350 :                     ; ----------------------------------------------------
(1)  346/ 6000350 :                     
(1)  347/ 6000350 :                     SH2_S_Error:
(1)  348/ 6000350 : A00C                		bra	SH2_S_ErrCode
(1)  349/ 6000352 : 900C                		mov	#$01FF,r0
(1)  350/ 6000354 :                     SH2_S_ErrIllg:
(1)  351/ 6000354 : A00A                		bra	SH2_S_ErrCode
(1)  352/ 6000356 : 900D                		mov	#$0101,r0
(1)  353/ 6000358 :                     SH2_S_ErrInvl:
(1)  354/ 6000358 : A008                		bra	SH2_S_ErrCode
(1)  355/ 600035A : 900E                		mov	#$0102,r0
(1)  356/ 600035C :                     SH2_S_ErrAddr:
(1)  357/ 600035C : A006                		bra	SH2_S_ErrCode
(1)  358/ 600035E : 900F                		mov	#$0103,r0
(1)  359/ 6000360 :                     SH2_S_ErrDma:
(1)  360/ 6000360 : A004                		bra	SH2_S_ErrCode
(1)  361/ 6000362 : 9010                		mov	#$0104,r0
(1)  362/ 6000364 :                     SH2_S_ErrNmi:
(1)  363/ 6000364 : A002                		bra	SH2_S_ErrCode
(1)  364/ 6000366 : 9011                		mov	#$0105,r0
(1)  365/ 6000368 :                     SH2_S_ErrUser:
(1)  366/ 6000368 : A000                		bra	SH2_S_ErrCode
(1)  367/ 600036A : 9012                		mov	#$0106,r0
(1)  368/ 600036C :                     ; r0 - value
(1)  369/ 600036C :                     SH2_S_ErrCode:
(1)  370/ 600036C : D103                		mov	#_sysreg+comm2,r1
(1)  371/ 600036E : 2101                		mov.w	r0,@r1
(1)  372/ 6000370 : D103                		mov	#_sysreg+comm4,r1
(1)  373/ 6000372 : 60F2                		mov	@r15,r0
(1)  374/ 6000374 : 2102                		mov	r0,@r1
(1)  375/ 6000376 : AFFE                		bra	*
(1)  376/ 6000378 : 0009                		nop
(1)  377/ 600037A :                     		align 4
(1)  378/ 600037C : 2000 4022 2000 4024 		ltorg
                    00FF 01FF 0101 0102 
                    0103 0104 0105 0106 
(1)  379/ 6000394 :                     
(1)  380/ 6000394 :                     ; ====================================================================
(1)  381/ 6000394 :                     ; ----------------------------------------------------------------
(1)  382/ 6000394 :                     ; Interrupts
(1)  383/ 6000394 :                     ; ----------------------------------------------------------------
(1)  384/ 6000394 :                     
(1)  385/ 6000394 :                     ; =================================================================
(1)  386/ 6000394 :                     ; ------------------------------------------------
(1)  387/ 6000394 :                     ; Master | Unused interrupt
(1)  388/ 6000394 :                     ; ------------------------------------------------
(1)  389/ 6000394 :                     
(1)  390/ 6000394 :                     		align 4
(1)  391/ 6000394 :                     m_irq_bad:
(1)  392/ 6000394 : 000B                		rts
(1)  393/ 6000396 : 0009                		nop
(1)  394/ 6000398 :                     		align 4
(1)  395/ 6000398 :                     
(1)  396/ 6000398 :                     ; =================================================================
(1)  397/ 6000398 :                     ; ------------------------------------------------
(1)  398/ 6000398 :                     ; Master | PWM Interrupt
(1)  399/ 6000398 :                     ; ------------------------------------------------
(1)  400/ 6000398 :                     
(1)  401/ 6000398 :                     m_irq_pwm:
(1)  402/ 6000398 : 9188                		mov	#_FRT,r1
(1)  403/ 600039A : 8417                		mov.b	@(7,r1),r0
(1)  404/ 600039C : CA02                		xor	#2,r0
(1)  405/ 600039E : 8017                		mov.b	r0,@(7,r1)
(1)  406/ 60003A0 : D136                		mov	#_sysreg+pwmintclr,r1
(1)  407/ 60003A2 : 2101                		mov.w	r0,@r1
(1)  408/ 60003A4 : 0009                		nop
(1)  409/ 60003A6 : 0009                		nop
(1)  410/ 60003A8 : 0009                		nop
(1)  411/ 60003AA : 0009                		nop
(1)  412/ 60003AC : 000B                		rts
(1)  413/ 60003AE : 0009                		nop
(1)  414/ 60003B0 :                     		align 4
(1)  415/ 60003B0 :                     
(1)  416/ 60003B0 :                     ; =================================================================
(1)  417/ 60003B0 :                     ; ------------------------------------------------
(1)  418/ 60003B0 :                     ; Master | CMD Interrupt
(1)  419/ 60003B0 :                     ; ------------------------------------------------
(1)  420/ 60003B0 :                     
(1)  421/ 60003B0 :                     	; *** HARDWARE NOTE ***
(1)  422/ 60003B0 :                     	; DMA takes a little to start properly:
(1)  423/ 60003B0 :                     	; after writing _DMAOPERATION = 1 put
(1)  424/ 60003B0 :                     	; 2 instructions (or 2 nops) in case
(1)  425/ 60003B0 :                     	; you need to manually check if the
(1)  426/ 60003B0 :                     	; DMA it's active.
(1)  427/ 60003B0 :                     	;
(1)  428/ 60003B0 :                     	; On Emulators it just starts right away.
(1)  429/ 60003B0 :                     m_irq_cmd:
(1)  430/ 60003B0 : 917C                		mov	#_FRT,r1
(1)  431/ 60003B2 : 8417                		mov.b	@(7,r1),r0
(1)  432/ 60003B4 : CA02                		xor	#2,r0
(1)  433/ 60003B6 : 8017                		mov.b	r0,@(7,r1)
(1)  434/ 60003B8 : D131                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  435/ 60003BA : 2101                		mov.w	r0,@r1
(1)  436/ 60003BC : 6011                		mov.w	@r1,r0
(1)  437/ 60003BE : D131                		mov	#_vdpreg,r1		; <-- make sure we don't get in VBlank
(1)  438/ 60003C0 : 841A                -		mov.b	@(vdpsts,r1),r0
(1)  439/ 60003C2 : C880                		tst	#VBLK,r0
(1)  440/ 60003C4 : 8BFC                		bf	-
(1)  441/ 60003C6 : 2F26                		mov	r2,@-r15
(1)  442/ 60003C8 : 2F36                		mov	r3,@-r15
(1)  443/ 60003CA : 2F46                		mov	r4,@-r15
(1)  444/ 60003CC :                     ; 		mov	#0,r0
(1)  445/ 60003CC :                     ; 		mov.w	r0,@(marsGbl_WdgHold,gbr)
(1)  446/ 60003CC : D42E                		mov	#_sysreg,r4		; r4 - sysreg base
(1)  447/ 60003CE : E380                		mov	#_DMASOURCE0,r3		; r3 - DMA base register
(1)  448/ 60003D0 : D22E                		mov	#_sysreg+comm12,r2	; r2 - comm to write the signal
(1)  449/ 60003D2 : D12F                		mov	#_sysreg+dreqfifo,r1	; r1 - Source point: DREQ FIFO
(1)  450/ 60003D4 : 906B                		mov	#%0100010011100000,r0	; Transfer mode + DMA enable bit OFF
(1)  451/ 60003D6 : 1303                		mov	r0,@($C,r3)
(1)  452/ 60003D8 : D02E                		mov	#RAM_Mars_DreqDma,r0
(1)  453/ 60003DA : 1301                		mov	r0,@(4,r3)		; Destination
(1)  454/ 60003DC : 8548                		mov.w	@(dreqlen,r4),r0	; TODO: needs a 0-size check.
(1)  455/ 60003DE : 600D                		extu.w	r0,r0
(1)  456/ 60003E0 : 1302                		mov	r0,@(8,r3)		; Length (set by 68k)
(1)  457/ 60003E2 : 2312                		mov	r1,@r3			; Source
(1)  458/ 60003E4 : 9064                		mov	#%0100010011100001,r0	; Transfer mode + DMA enable bit ON
(1)  459/ 60003E6 : 1303                		mov	r0,@($C,r3)		; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  460/ 60003E8 : E001                		mov	#1,r0			; _DMAOPERATION = 1
(1)  461/ 60003EA : 130C                		mov	r0,@($30,r3)
(1)  462/ 60003EC : 6020                		mov.b	@r2,r0			; Tell Genesis we are ready to
(1)  463/ 60003EE : CB40                		or	#%01000000,r0		; recieve the data from DREQ
(1)  464/ 60003F0 : 2200                		mov.b	r0,@r2
(1)  465/ 60003F2 : 0009                		nop
(1)  466/ 60003F4 : 0009                		nop
(1)  467/ 60003F6 :                     	; Watchdog is still active here.
(1)  468/ 60003F6 :                     	; (hopefully)
(1)  469/ 60003F6 : 5033                .wait_dma:	mov	@($C,r3),r0		; DMA active?
(1)  470/ 60003F8 : C802                		tst	#%10,r0
(1)  471/ 60003FA : 89FC                		bt	.wait_dma
(1)  472/ 60003FC : E000                		mov	#0,r0			; _DMAOPERATION = 0
(1)  473/ 60003FE : 130C                		mov	r0,@($30,r3)
(1)  474/ 6000400 : 9055                		mov	#%0100010011100000,r0	; Transfer mode + DMA enable = 0
(1)  475/ 6000402 : 1303                		mov	r0,@($C,r3)
(1)  476/ 6000404 : 64F6                		mov	@r15+,r4
(1)  477/ 6000406 : 63F6                		mov	@r15+,r3
(1)  478/ 6000408 : 62F6                		mov	@r15+,r2
(1)  479/ 600040A : 000B                		rts
(1)  480/ 600040C : 0009                		nop
(1)  481/ 600040E :                     		align 4
(1)  482/ 6000410 :                     
(1)  483/ 6000410 :                     ; =================================================================
(1)  484/ 6000410 :                     ; ------------------------------------------------
(1)  485/ 6000410 :                     ; Master | HBlank
(1)  486/ 6000410 :                     ; ------------------------------------------------
(1)  487/ 6000410 :                     
(1)  488/ 6000410 :                     m_irq_h:
(1)  489/ 6000410 : 914C                		mov	#_FRT,r1
(1)  490/ 6000412 : 8417                		mov.b	@(7,r1),r0
(1)  491/ 6000414 : CA02                		xor	#2,r0
(1)  492/ 6000416 : 8017                		mov.b	r0,@(7,r1)
(1)  493/ 6000418 : D11F                		mov	#_sysreg+hintclr,r1
(1)  494/ 600041A : 2101                		mov.w	r0,@r1
(1)  495/ 600041C : 0009                		nop
(1)  496/ 600041E : 0009                		nop
(1)  497/ 6000420 : 0009                		nop
(1)  498/ 6000422 : 0009                		nop
(1)  499/ 6000424 : 000B                		rts
(1)  500/ 6000426 : 0009                		nop
(1)  501/ 6000428 :                     		align 4
(1)  502/ 6000428 :                     
(1)  503/ 6000428 :                     ; =================================================================
(1)  504/ 6000428 :                     ; ------------------------------------------------
(1)  505/ 6000428 :                     ; Master | VBlank
(1)  506/ 6000428 :                     ; ------------------------------------------------
(1)  507/ 6000428 :                     
(1)  508/ 6000428 :                     m_irq_v:
(1)  509/ 6000428 : 9140                		mov	#_FRT,r1
(1)  510/ 600042A : 8417                		mov.b	@(7,r1),r0
(1)  511/ 600042C : CA02                		xor	#2,r0
(1)  512/ 600042E : 8017                		mov.b	r0,@(7,r1)
(1)  513/ 6000430 : D11A                		mov	#_sysreg+vintclr,r1
(1)  514/ 6000432 : 2101                		mov.w	r0,@r1
(1)  515/ 6000434 :                     
(1)  516/ 6000434 :                     ; 		mov	#_vdpreg,r1			; Check if we got here
(1)  517/ 6000434 :                     ; -		mov.b	@(vdpsts,r1),r0			; too late.
(1)  518/ 6000434 :                     ; 		tst	#VBLK,r0
(1)  519/ 6000434 :                     ; 		bt	-
(1)  520/ 6000434 :                     ; 		xor	r0,r0
(1)  521/ 6000434 :                     ; 		mov.w	r0,@(marsGbl_FrameReady,gbr)
(1)  522/ 6000434 :                     ; 		mov	r2,@-r15
(1)  523/ 6000434 :                     ; 		mov	r3,@-r15
(1)  524/ 6000434 :                     ; 		mov	r4,@-r15
(1)  525/ 6000434 :                     ;  		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first
(1)  526/ 6000434 :                     ; 		mov	#_vdpreg+shift,r1		; For the indexed-scrolling mode.
(1)  527/ 6000434 :                     ; 		and	#1,r0
(1)  528/ 6000434 :                     ; 		mov.w	r0,@r1
(1)  529/ 6000434 :                     ; 		mov	#RAM_Mars_DreqRead+Dreq_Palette,r1
(1)  530/ 6000434 :                     ; 		mov	#_palette,r2
(1)  531/ 6000434 :                     ;  		mov	#(256/8),r3
(1)  532/ 6000434 :                     ; .copy_pal:
(1)  533/ 6000434 :                     ; 	rept 4
(1)  534/ 6000434 :                     ; 		mov	@r1+,r0				; Copy as LONGs, works on HW
(1)  535/ 6000434 :                     ; 		mov	r0,@r2
(1)  536/ 6000434 :                     ; 		add	#4,r2
(1)  537/ 6000434 :                     ; 	endm
(1)  538/ 6000434 :                     ; 		dt	r3
(1)  539/ 6000434 :                     ; 		bf	.copy_pal
(1)  540/ 6000434 :                     ; .not_ready:
(1)  541/ 6000434 :                     ; 		mov	#_sysreg+comm12+1,r1		; Clear comm R bit
(1)  542/ 6000434 :                     ; 		mov.b	@r1,r0				; this tells to 68k that the frame is ready.
(1)  543/ 6000434 :                     ; 		and	#%10111111,r0
(1)  544/ 6000434 :                     ; 		mov.b	r0,@r1
(1)  545/ 6000434 :                     
(1)  546/ 6000434 : 64F6                		mov	@r15+,r4
(1)  547/ 6000436 : 63F6                		mov	@r15+,r3
(1)  548/ 6000438 : 62F6                		mov	@r15+,r2
(1)  549/ 600043A : 000B                		rts
(1)  550/ 600043C : 0009                		nop
(1)  551/ 600043E :                     		align 4
(1)  552/ 6000440 :                     
(1)  553/ 6000440 :                     ; =================================================================
(1)  554/ 6000440 :                     ; ------------------------------------------------
(1)  555/ 6000440 :                     ; Master | VRES Interrupt (RESET button on Genesis)
(1)  556/ 6000440 :                     ; ------------------------------------------------
(1)  557/ 6000440 :                     
(1)  558/ 6000440 :                     m_irq_vres:
(1)  559/ 6000440 : D111                		mov	#_sysreg,r1
(1)  560/ 6000442 : 60F3                		mov	r15,r0
(1)  561/ 6000444 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  562/ 6000446 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  563/ 6000448 : C801                		tst	#1,r0
(1)  564/ 600044A : 8B11                		bf	.rv_busy
(1)  565/ 600044C : DF14                		mov	#(CS3|$40000)-8,r15
(1)  566/ 600044E : D015                		mov	#SH2_M_HotStart,r0
(1)  567/ 6000450 : 2F02                		mov	r0,@r15
(1)  568/ 6000452 : 902E                		mov.w   #$F0,r0
(1)  569/ 6000454 : 1F01                		mov	r0,@(4,r15)
(1)  570/ 6000456 : D10C                		mov	#_sysreg,r1
(1)  571/ 6000458 : D013                		mov	#"M_OK",r0
(1)  572/ 600045A : 1108                		mov	r0,@(comm0,r1)
(1)  573/ 600045C :                     
(1)  574/ 600045C : E1B0                		mov	#_DMAOPERATION,r1
(1)  575/ 600045E : E000                		mov     #0,r0
(1)  576/ 6000460 : 2102                		mov	r0,@r1
(1)  577/ 6000462 : E18C                		mov	#_DMACHANNEL0,r1
(1)  578/ 6000464 : E000                		mov     #0,r0
(1)  579/ 6000466 : 2102                		mov	r0,@r1
(1)  580/ 6000468 : 9121                		mov	#$44E0,r1
(1)  581/ 600046A : 2102                		mov	r0,@r1
(1)  582/ 600046C : 002B                		rte
(1)  583/ 600046E : 0009                		nop
(1)  584/ 6000470 :                     		align 4
(1)  585/ 6000470 :                     .rv_busy:
(1)  586/ 6000470 : 911C                		mov	#_FRT,r1
(1)  587/ 6000472 : 8417                		mov.b	@(7,r1),r0
(1)  588/ 6000474 : CA02                		xor	#2,r0
(1)  589/ 6000476 : 8017                		mov.b	r0,@(7,r1)
(1)  590/ 6000478 : AFFE                		bra	*
(1)  591/ 600047A : 0009                		nop
(1)  592/ 600047C :                     		align 4
(1)  593/ 600047C : 2000 401C 2000 401A 		ltorg		; Save literals
                    2000 4100 2000 4000 
                    2000 402C 2000 4012 
                    2600 6E50 2000 4018 
                    2000 4016 0603 FFF8 
                    0600 0D0E 4D5F 4F4B 
                    FE10 44E0 44E1 00F0 
(1)  594/ 60004B4 :                     
(1)  595/ 60004B4 :                     ; =================================================================
(1)  596/ 60004B4 :                     ; ------------------------------------------------
(1)  597/ 60004B4 :                     ; Slave | Unused Interrupt
(1)  598/ 60004B4 :                     ; ------------------------------------------------
(1)  599/ 60004B4 :                     
(1)  600/ 60004B4 :                     		align 4
(1)  601/ 60004B4 :                     s_irq_bad:
(1)  602/ 60004B4 : 000B                		rts
(1)  603/ 60004B6 : 0009                		nop
(1)  604/ 60004B8 :                     		align 4
(1)  605/ 60004B8 :                     
(1)  606/ 60004B8 :                     ; =================================================================
(1)  607/ 60004B8 :                     ; ------------------------------------------------
(1)  608/ 60004B8 :                     ; Slave | PWM Interrupt
(1)  609/ 60004B8 :                     ; ------------------------------------------------
(1)  610/ 60004B8 :                     
(1)  611/ 60004B8 :                     ; check cache_slv.asm
(1)  612/ 60004B8 :                     ; s_irq_pwm:
(1)  613/ 60004B8 :                     
(1)  614/ 60004B8 :                     ; =================================================================
(1)  615/ 60004B8 :                     ; ------------------------------------------------
(1)  616/ 60004B8 :                     ; Slave | CMD Interrupt
(1)  617/ 60004B8 :                     ; ------------------------------------------------
(1)  618/ 60004B8 :                     
(1)  619/ 60004B8 :                     		align 4
(1)  620/ 60004B8 :                     s_irq_cmd:
(1)  621/ 60004B8 : D112                		mov	.tag_FRT,r1
(1)  622/ 60004BA : 8417                		mov.b	@(7,r1),r0
(1)  623/ 60004BC : CA02                		xor	#2,r0
(1)  624/ 60004BE : 8017                		mov.b	r0,@(7,r1)
(1)  625/ 60004C0 : D182                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  626/ 60004C2 : 2101                		mov.w	r0,@r1
(1)  627/ 60004C4 : 6011                		mov.w	@r1,r0
(1)  628/ 60004C6 :                     
(1)  629/ 60004C6 :                     	; ---------------------------------
(1)  630/ 60004C6 : D182                		mov	#_sysreg+comm14,r1
(1)  631/ 60004C8 : 6010                		mov.b	@r1,r0			; MSB only
(1)  632/ 60004CA : C90F                		and	#%00001111,r0
(1)  633/ 60004CC : 2008                		tst	r0,r0
(1)  634/ 60004CE : 8915                		bt	.go_exit
(1)  635/ 60004D0 : 2F26                		mov	r2,@-r15
(1)  636/ 60004D2 : 2F36                		mov	r3,@-r15
(1)  637/ 60004D4 : 2F46                		mov	r4,@-r15
(1)  638/ 60004D6 : 2F56                		mov	r5,@-r15
(1)  639/ 60004D8 : 2F66                		mov	r6,@-r15
(1)  640/ 60004DA : 2F76                		mov	r7,@-r15
(1)  641/ 60004DC : 2F86                		mov	r8,@-r15
(1)  642/ 60004DE : 2F96                		mov	r9,@-r15
(1)  643/ 60004E0 : 2FA6                		mov	r10,@-r15
(1)  644/ 60004E2 : 2FB6                		mov	r11,@-r15
(1)  645/ 60004E4 : 2FC6                		mov	r12,@-r15
(1)  646/ 60004E6 : 2FD6                		mov	r13,@-r15
(1)  647/ 60004E8 : 2FE6                		mov	r14,@-r15
(1)  648/ 60004EA : 4F12                		sts	macl,@-r15
(1)  649/ 60004EC : 4F02                		sts	mach,@-r15
(1)  650/ 60004EE : 4F22                		sts	pr,@-r15
(1)  651/ 60004F0 : 4008                		shll2	r0
(1)  652/ 60004F2 : D178                		mov	#.list,r1
(1)  653/ 60004F4 : 310C                		add	r0,r1
(1)  654/ 60004F6 : 6012                		mov	@r1,r0
(1)  655/ 60004F8 : 402B                		jmp	@r0
(1)  656/ 60004FA : 0009                		nop
(1)  657/ 60004FC :                     		align 4
(1)  658/ 60004FC :                     .go_exit:
(1)  659/ 60004FC : A0E4                		bra	.no_cmdtask
(1)  660/ 60004FE : 0009                		nop
(1)  661/ 6000500 :                     		align 4
(1)  662/ 6000500 : 0000 00F0           .tag_F0:	dc.l $F0
(1)  663/ 6000504 : FFFF FE10           .tag_FRT:	dc.l _FRT
(1)  664/ 6000508 :                     
(1)  665/ 6000508 :                     ; ---------------------------------
(1)  666/ 6000508 :                     
(1)  667/ 6000508 :                     .list:
(1)  668/ 6000508 : 0600 06A8           		dc.l .no_trnsfrex
(1)  669/ 600050C : 0600 056C           		dc.l .mode_1		; PWM transfer from Z80
(1)  670/ 6000510 : 0600 0548           		dc.l .mode_2		; PWM backup enter
(1)  671/ 6000514 : 0600 055C           		dc.l .mode_3		; PWM backup exit
(1)  672/ 6000518 : 0600 06A8           		dc.l .no_trnsfrex
(1)  673/ 600051C : 0600 06A8           		dc.l .no_trnsfrex
(1)  674/ 6000520 : 0600 06A8           		dc.l .no_trnsfrex
(1)  675/ 6000524 : 0600 06A8           		dc.l .no_trnsfrex
(1)  676/ 6000528 : 0600 06A8           		dc.l .no_trnsfrex
(1)  677/ 600052C : 0600 06A8           		dc.l .no_trnsfrex
(1)  678/ 6000530 : 0600 06A8           		dc.l .no_trnsfrex
(1)  679/ 6000534 : 0600 06A8           		dc.l .no_trnsfrex
(1)  680/ 6000538 : 0600 06A8           		dc.l .no_trnsfrex
(1)  681/ 600053C : 0600 06A8           		dc.l .no_trnsfrex
(1)  682/ 6000540 : 0600 06A8           		dc.l .no_trnsfrex
(1)  683/ 6000544 : 0600 06A8           		dc.l .no_trnsfrex
(1)  684/ 6000548 :                     
(1)  685/ 6000548 :                     ; ---------------------------------
(1)  686/ 6000548 :                     ; CMD Mode 2: PWM Backup enter
(1)  687/ 6000548 :                     ; ---------------------------------
(1)  688/ 6000548 :                     
(1)  689/ 6000548 :                     .mode_2:
(1)  690/ 6000548 : D063                		mov	#MarsSnd_Refill,r0
(1)  691/ 600054A : 400B                		jsr	@r0
(1)  692/ 600054C : 0009                		nop
(1)  693/ 600054E : D163                		mov	#MarsSnd_RvMode,r1	; Set backup-playback flag
(1)  694/ 6000550 : E001                		mov	#1,r0
(1)  695/ 6000552 : 2102                		mov	r0,@r1
(1)  696/ 6000554 : D15E                		mov	#_sysreg+comm14,r1
(1)  697/ 6000556 : E000                		mov	#0,r0
(1)  698/ 6000558 : A0A6                		bra	.no_trnsfrex
(1)  699/ 600055A : 2100                		mov.b	r0,@r1
(1)  700/ 600055C :                     		align 4
(1)  701/ 600055C :                     
(1)  702/ 600055C :                     ; ---------------------------------
(1)  703/ 600055C :                     ; CMD Mode 3: PWM Backup exit
(1)  704/ 600055C :                     ; ---------------------------------
(1)  705/ 600055C :                     
(1)  706/ 600055C :                     .mode_3:
(1)  707/ 600055C : D160                		mov	#MarsSnd_RvMode,r1	; Clear backup-playback flag
(1)  708/ 600055E : E000                		mov	#0,r0
(1)  709/ 6000560 : 2102                		mov	r0,@r1
(1)  710/ 6000562 : D15B                		mov	#_sysreg+comm14,r1
(1)  711/ 6000564 : E000                		mov	#0,r0
(1)  712/ 6000566 : A09F                		bra	.no_trnsfrex
(1)  713/ 6000568 : 2100                		mov.b	r0,@r1
(1)  714/ 600056A :                     		align 4
(1)  715/ 600056C :                     
(1)  716/ 600056C :                     ; ---------------------------------
(1)  717/ 600056C :                     ; CMD Mode 1: Z80 transfer
(1)  718/ 600056C :                     ; AND process new PWM's
(1)  719/ 600056C :                     ; ---------------------------------
(1)  720/ 600056C :                     
(1)  721/ 600056C :                     .mode_1:
(1)  722/ 600056C :                     	; First we recieve changes from Z80
(1)  723/ 600056C :                     	; using comm8  for data
(1)  724/ 600056C :                     	;  and  comm14 for busy/clock bits (bits 7,6)
(1)  725/ 600056C : D15D                		mov	#_sysreg+comm8,r1	; Input
(1)  726/ 600056E : D25E                		mov	#MarsSnd_PwmControl,r2	; Output
(1)  727/ 6000570 : D357                		mov	#_sysreg+comm14,r3	; control comm
(1)  728/ 6000572 :                     .wait_1:
(1)  729/ 6000572 : 6030                		mov.b	@r3,r0
(1)  730/ 6000574 : C880                		tst	#%10000000,r0		; Z80 enter/exit
(1)  731/ 6000576 : 8909                		bt	.exit_c
(1)  732/ 6000578 : C840                		tst	#%01000000,r0		; wait CLOCK
(1)  733/ 600057A : 89FA                		bt	.wait_1
(1)  734/ 600057C :                     .copy_1:
(1)  735/ 600057C : 6012                		mov	@r1,r0
(1)  736/ 600057E : 2202                		mov	r0,@r2
(1)  737/ 6000580 : 7204                		add	#4,r2
(1)  738/ 6000582 : 6030                		mov.b	@r3,r0			; CLK done
(1)  739/ 6000584 : C9BF                		and	#%10111111,r0
(1)  740/ 6000586 : 2300                		mov.b	r0,@r3
(1)  741/ 6000588 : AFF3                		bra	.wait_1
(1)  742/ 600058A : 0009                		nop
(1)  743/ 600058C :                     .exit_c:
(1)  744/ 600058C :                     
(1)  745/ 600058C :                     	; Now loop for channels that need updating
(1)  746/ 600058C :                     	;
(1)  747/ 600058C :                     	; TODO: rushed... but it works.
(1)  748/ 600058C : E100                		mov	#0,r1				; r1 - Current PWM slot
(1)  749/ 600058E : DE57                		mov	#MarsSnd_PwmControl,r14
(1)  750/ 6000590 : 9AB8                		mov	#MAX_PWMCHNL,r10
(1)  751/ 6000592 :                     .next_chnl:
(1)  752/ 6000592 : 60E0                		mov.b	@r14,r0
(1)  753/ 6000594 : C9FF                		and	#$FF,r0
(1)  754/ 6000596 : 8800                		cmp/eq	#0,r0
(1)  755/ 6000598 : 890F                		bt	.no_req2
(1)  756/ 600059A : 2DDA                		xor	r13,r13
(1)  757/ 600059C : 2ED0                		mov.b	r13,@r14
(1)  758/ 600059E : 6703                		mov	r0,r7
(1)  759/ 60005A0 : C907                		and	#%111,r0
(1)  760/ 60005A2 : 8801                		cmp/eq	#%001,r0
(1)  761/ 60005A4 : 8912                		bt	.no_keyoff
(1)  762/ 60005A6 : 8802                		cmp/eq	#%010,r0
(1)  763/ 60005A8 : 8903                		bt	.pwm_keyoff
(1)  764/ 60005AA : 8804                		cmp/eq	#%100,r0
(1)  765/ 60005AC : 8907                		bt	.pwm_keycut
(1)  766/ 60005AE : A076                		bra	.no_req
(1)  767/ 60005B0 : 0009                		nop
(1)  768/ 60005B2 :                     .pwm_keyoff:
(1)  769/ 60005B2 : E240                		mov	#$40,r2
(1)  770/ 60005B4 : D04E                		mov	#MarsSound_SetVolume,r0
(1)  771/ 60005B6 : 400B                		jsr	@r0
(1)  772/ 60005B8 : 0009                		nop
(1)  773/ 60005BA :                     .no_req2:
(1)  774/ 60005BA : A070                		bra	.no_req
(1)  775/ 60005BC : 0009                		nop
(1)  776/ 60005BE :                     .pwm_keycut:
(1)  777/ 60005BE : E200                		mov	#0,r2
(1)  778/ 60005C0 : D04C                		mov	#MarsSound_PwmEnable,r0
(1)  779/ 60005C2 : 400B                		jsr	@r0
(1)  780/ 60005C4 : 0009                		nop
(1)  781/ 60005C6 : A06A                		bra	.no_req
(1)  782/ 60005C8 : 0009                		nop
(1)  783/ 60005CA :                     		align 4
(1)  784/ 60005CC :                     	; Normal playback
(1)  785/ 60005CC :                     .no_keyoff:
(1)  786/ 60005CC : 6073                		mov	r7,r0
(1)  787/ 60005CE : C810                		tst	#$10,r0
(1)  788/ 60005D0 : 890E                		bt	.no_pitchbnd
(1)  789/ 60005D2 : 6DE3                		mov	r14,r13
(1)  790/ 60005D4 : 7D08                		add	#8,r13		; skip COM
(1)  791/ 60005D6 : 60D0                		mov.b	@r13,r0		; r2 - Get pitch MSB bits
(1)  792/ 60005D8 : 7D08                		add	#8,r13
(1)  793/ 60005DA : C903                		and	#%11,r0
(1)  794/ 60005DC : 4018                		shll8	r0
(1)  795/ 60005DE : 6203                		mov	r0,r2
(1)  796/ 60005E0 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  797/ 60005E2 : 7D08                		add	#8,r13
(1)  798/ 60005E4 : C9FF                		and	#$FF,r0
(1)  799/ 60005E6 : 202B                		or	r2,r0
(1)  800/ 60005E8 : 6203                		mov	r0,r2
(1)  801/ 60005EA : D043                		mov	#MarsSound_SetPwmPitch,r0
(1)  802/ 60005EC : 400B                		jsr	@r0
(1)  803/ 60005EE : 0009                		nop
(1)  804/ 60005F0 :                     .no_pitchbnd:
(1)  805/ 60005F0 : 6073                		mov	r7,r0
(1)  806/ 60005F2 : C820                		tst	#$20,r0
(1)  807/ 60005F4 : 8908                		bt	.no_volumebnd
(1)  808/ 60005F6 : 6703                		mov	r0,r7
(1)  809/ 60005F8 : 6DE3                		mov	r14,r13
(1)  810/ 60005FA : 7D08                		add	#8,r13		; point to volume values
(1)  811/ 60005FC : 60D0                		mov.b	@r13,r0
(1)  812/ 60005FE : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  813/ 6000600 : 6203                		mov	r0,r2
(1)  814/ 6000602 : D03E                		mov	#MarsSound_SetVolume,r0
(1)  815/ 6000604 : 400B                		jsr	@r0
(1)  816/ 6000606 : 0009                		nop
(1)  817/ 6000608 :                     .no_volumebnd:
(1)  818/ 6000608 : 6073                		mov	r7,r0
(1)  819/ 600060A : C801                		tst	#$01,r0		; key-on?
(1)  820/ 600060C : 8947                		bt	.no_req
(1)  821/ 600060E : 6DE3                		mov	r14,r13
(1)  822/ 6000610 : 7D08                		add	#8,r13		; skip COM
(1)  823/ 6000612 : 60D0                		mov.b	@r13,r0
(1)  824/ 6000614 : 7D08                		add	#8,r13
(1)  825/ 6000616 : 6503                		mov	r0,r5
(1)  826/ 6000618 : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  827/ 600061A : 6603                		mov	r0,r6		; r6 - Volume
(1)  828/ 600061C : 6053                		mov	r5,r0		; r5 - Get pitch MSB bits
(1)  829/ 600061E : C903                		and	#%00000011,r0
(1)  830/ 6000620 : 4018                		shll8	r0
(1)  831/ 6000622 : 6503                		mov	r0,r5
(1)  832/ 6000624 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  833/ 6000626 : 7D08                		add	#8,r13
(1)  834/ 6000628 : C9FF                		and	#$FF,r0
(1)  835/ 600062A : 205B                		or	r5,r0
(1)  836/ 600062C : 6503                		mov	r0,r5
(1)  837/ 600062E : 60D0                		mov.b	@r13,r0		; flags | SH2 BANK
(1)  838/ 6000630 : 7D08                		add	#8,r13
(1)  839/ 6000632 : 6703                		mov	r0,r7		; r7 - Flags
(1)  840/ 6000634 : C90F                		and	#%1111,r0
(1)  841/ 6000636 : 6803                		mov	r0,r8		; r8 - SH2 section (ROM or SDRAM)
(1)  842/ 6000638 : 4828                		shll16	r8
(1)  843/ 600063A : 4818                		shll8	r8
(1)  844/ 600063C : 4709                		shlr2	r7
(1)  845/ 600063E : 4709                		shlr2	r7
(1)  846/ 6000640 : 60D0                		mov.b	@r13,r0		; r2 - START point
(1)  847/ 6000642 : 7D08                		add	#8,r13
(1)  848/ 6000644 : C9FF                		and	#$FF,r0
(1)  849/ 6000646 : 4028                		shll16	r0
(1)  850/ 6000648 : 6303                		mov	r0,r3
(1)  851/ 600064A : 60D0                		mov.b	@r13,r0
(1)  852/ 600064C : 7D08                		add	#8,r13
(1)  853/ 600064E : C9FF                		and	#$FF,r0
(1)  854/ 6000650 : 4018                		shll8	r0
(1)  855/ 6000652 : 6203                		mov	r0,r2
(1)  856/ 6000654 : 60D0                		mov.b	@r13,r0
(1)  857/ 6000656 : 7D08                		add	#8,r13
(1)  858/ 6000658 : C9FF                		and	#$FF,r0
(1)  859/ 600065A : 203B                		or	r3,r0
(1)  860/ 600065C : 202B                		or	r2,r0
(1)  861/ 600065E : 6203                		mov	r0,r2
(1)  862/ 6000660 : 6423                		mov	r2,r4		; r4 - START copy
(1)  863/ 6000662 : 228B                		or	r8,r2		; add CS2
(1)  864/ 6000664 : 6024                		mov.b	@r2+,r0		; r3 - Length
(1)  865/ 6000666 : C9FF                		and	#$FF,r0
(1)  866/ 6000668 : 6303                		mov	r0,r3
(1)  867/ 600066A : 6024                		mov.b	@r2+,r0
(1)  868/ 600066C : C9FF                		and	#$FF,r0
(1)  869/ 600066E : 4018                		shll8	r0
(1)  870/ 6000670 : 230B                		or	r0,r3
(1)  871/ 6000672 : 6024                		mov.b	@r2+,r0
(1)  872/ 6000674 : C9FF                		and	#$FF,r0
(1)  873/ 6000676 : 4028                		shll16	r0
(1)  874/ 6000678 : 230B                		or	r0,r3
(1)  875/ 600067A : 334C                		add	r4,r3		; add end+start
(1)  876/ 600067C : 238B                		or	r8,r3		; add CS2
(1)  877/ 600067E : 6024                		mov.b	@r2+,r0		; get loop point
(1)  878/ 6000680 : C9FF                		and	#$FF,r0
(1)  879/ 6000682 : 6403                		mov	r0,r4
(1)  880/ 6000684 : 6024                		mov.b	@r2+,r0
(1)  881/ 6000686 : C9FF                		and	#$FF,r0
(1)  882/ 6000688 : 4018                		shll8	r0
(1)  883/ 600068A : 240B                		or	r0,r4
(1)  884/ 600068C : 6024                		mov.b	@r2+,r0
(1)  885/ 600068E : C9FF                		and	#$FF,r0
(1)  886/ 6000690 : 4028                		shll16	r0
(1)  887/ 6000692 : 240B                		or	r0,r4
(1)  888/ 6000694 : 9037                		mov	#%11111100,r0
(1)  889/ 6000696 : 2809                		and	r0,r8
(1)  890/ 6000698 : D019                		mov	#MarsSound_SetPwm,r0
(1)  891/ 600069A : 400B                		jsr	@r0
(1)  892/ 600069C : 0009                		nop
(1)  893/ 600069E :                     .no_req:
(1)  894/ 600069E : 7101                		add	#1,r1		; next PWM slot
(1)  895/ 60006A0 : 4A10                		dt	r10
(1)  896/ 60006A2 : 8901                		bt	.end_chnls
(1)  897/ 60006A4 : AF75                		bra	.next_chnl
(1)  898/ 60006A6 : 7E01                		add	#1,r14		; next PWM entry
(1)  899/ 60006A8 :                     .end_chnls:
(1)  900/ 60006A8 :                     
(1)  901/ 60006A8 :                     	; ---------------------------------
(1)  902/ 60006A8 :                     	; *** END of PWM driver for GEMA
(1)  903/ 60006A8 :                     	; ---------------------------------
(1)  904/ 60006A8 :                     
(1)  905/ 60006A8 :                     .no_trnsfrex:
(1)  906/ 60006A8 : 4F26                		lds	@r15+,pr
(1)  907/ 60006AA : 4F06                		lds	@r15+,mach
(1)  908/ 60006AC : 4F16                		lds	@r15+,macl
(1)  909/ 60006AE : 6EF6                		mov	@r15+,r14
(1)  910/ 60006B0 : 6DF6                		mov	@r15+,r13
(1)  911/ 60006B2 : 6CF6                		mov	@r15+,r12
(1)  912/ 60006B4 : 6BF6                		mov	@r15+,r11
(1)  913/ 60006B6 : 6AF6                		mov	@r15+,r10
(1)  914/ 60006B8 : 69F6                		mov	@r15+,r9
(1)  915/ 60006BA : 68F6                		mov	@r15+,r8
(1)  916/ 60006BC : 67F6                		mov	@r15+,r7
(1)  917/ 60006BE : 66F6                		mov	@r15+,r6
(1)  918/ 60006C0 : 65F6                		mov	@r15+,r5
(1)  919/ 60006C2 : 64F6                		mov	@r15+,r4
(1)  920/ 60006C4 : 63F6                		mov	@r15+,r3
(1)  921/ 60006C6 : 62F6                		mov	@r15+,r2
(1)  922/ 60006C8 :                     .no_cmdtask:
(1)  923/ 60006C8 : 000B                		rts
(1)  924/ 60006CA : 0009                		nop
(1)  925/ 60006CC :                     		align 4
(1)  926/ 60006CC : 2000 401A 2000 402E 		ltorg
                    0600 0508 0600 0C54 
                    C000 0728 C000 0728 
                    2000 4028 C000 06F0 
                    C000 06F0 0600 0C2C 
                    0600 0C44 0600 0C14 
                    0600 0C2C 0600 0BD8 
                    0007 00FC           
(1)  927/ 6000708 :                     
(1)  928/ 6000708 :                     ; =================================================================
(1)  929/ 6000708 :                     ; ------------------------------------------------
(1)  930/ 6000708 :                     ; Slave | HBlank
(1)  931/ 6000708 :                     ; ------------------------------------------------
(1)  932/ 6000708 :                     
(1)  933/ 6000708 :                     s_irq_h:
(1)  934/ 6000708 :                     ; 		mov	#$F0,r0
(1)  935/ 6000708 :                     ; 		ldc	r0,sr
(1)  936/ 6000708 : 9144                		mov	#_FRT,r1
(1)  937/ 600070A : 8417                		mov.b	@(7,r1),r0
(1)  938/ 600070C : CA02                		xor	#2,r0
(1)  939/ 600070E : 8017                		mov.b	r0,@(7,r1)
(1)  940/ 6000710 : D11A                		mov	#_sysreg+hintclr,r1
(1)  941/ 6000712 : 2101                		mov.w	r0,@r1
(1)  942/ 6000714 : 0009                		nop
(1)  943/ 6000716 : 0009                		nop
(1)  944/ 6000718 : 0009                		nop
(1)  945/ 600071A : 0009                		nop
(1)  946/ 600071C : 0009                		nop
(1)  947/ 600071E : 000B                		rts
(1)  948/ 6000720 : 0009                		nop
(1)  949/ 6000722 :                     		align 4
(1)  950/ 6000724 :                     
(1)  951/ 6000724 :                     ; =================================================================
(1)  952/ 6000724 :                     ; ------------------------------------------------
(1)  953/ 6000724 :                     ; Slave | VBlank
(1)  954/ 6000724 :                     ; ------------------------------------------------
(1)  955/ 6000724 :                     
(1)  956/ 6000724 :                     s_irq_v:
(1)  957/ 6000724 :                     ; 		mov	#$F0,r0
(1)  958/ 6000724 :                     ; 		ldc	r0,sr
(1)  959/ 6000724 : 9136                		mov	#_FRT,r1
(1)  960/ 6000726 : 8417                		mov.b	@(7,r1),r0
(1)  961/ 6000728 : CA02                		xor	#2,r0
(1)  962/ 600072A : 8017                		mov.b	r0,@(7,r1)
(1)  963/ 600072C : D114                		mov	#_sysreg+vintclr,r1
(1)  964/ 600072E : 2101                		mov.w	r0,@r1
(1)  965/ 6000730 : 0009                		nop
(1)  966/ 6000732 : 0009                		nop
(1)  967/ 6000734 : 0009                		nop
(1)  968/ 6000736 : 0009                		nop
(1)  969/ 6000738 : 0009                		nop
(1)  970/ 600073A : 000B                		rts
(1)  971/ 600073C : 0009                		nop
(1)  972/ 600073E :                     		align 4
(1)  973/ 6000740 :                     
(1)  974/ 6000740 :                     ; =================================================================
(1)  975/ 6000740 :                     ; ------------------------------------------------
(1)  976/ 6000740 :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  977/ 6000740 :                     ; ------------------------------------------------
(1)  978/ 6000740 :                     
(1)  979/ 6000740 :                     s_irq_vres:
(1)  980/ 6000740 : D110                		mov	#_sysreg,r1
(1)  981/ 6000742 : 60F3                		mov	r15,r0
(1)  982/ 6000744 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  983/ 6000746 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  984/ 6000748 : C801                		tst	#1,r0
(1)  985/ 600074A : 8B11                		bf	.rv_busy
(1)  986/ 600074C : DF0E                		mov	#(CS3|$3F000)-8,r15
(1)  987/ 600074E : D00F                		mov	#SH2_S_HotStart,r0
(1)  988/ 6000750 : 2F02                		mov	r0,@r15
(1)  989/ 6000752 : 9020                		mov.w   #$F0,r0
(1)  990/ 6000754 : 1F01                		mov	r0,@(4,r15)
(1)  991/ 6000756 : D10B                		mov	#_sysreg,r1
(1)  992/ 6000758 : D00D                		mov	#"S_OK",r0
(1)  993/ 600075A : 1109                		mov	r0,@(comm4,r1)
(1)  994/ 600075C : E1B0                		mov	#_DMAOPERATION,r1
(1)  995/ 600075E : E000                		mov     #0,r0
(1)  996/ 6000760 : 2102                		mov	r0,@r1
(1)  997/ 6000762 : E18C                		mov	#_DMACHANNEL0,r1
(1)  998/ 6000764 : E000                		mov     #0,r0
(1)  999/ 6000766 : 2102                		mov	r0,@r1
(1) 1000/ 6000768 : 9116                		mov	#$44E0,r1
(1) 1001/ 600076A : 2102                		mov	r0,@r1
(1) 1002/ 600076C : 002B                		rte
(1) 1003/ 600076E : 0009                		nop
(1) 1004/ 6000770 :                     		align 4
(1) 1005/ 6000770 :                     .rv_busy:
(1) 1006/ 6000770 : 9110                		mov	#_FRT,r1
(1) 1007/ 6000772 : 8417                		mov.b	@(7,r1),r0
(1) 1008/ 6000774 : CA02                		xor	#2,r0
(1) 1009/ 6000776 : 8017                		mov.b	r0,@(7,r1)
(1) 1010/ 6000778 : AFFE                		bra	*
(1) 1011/ 600077A : 0009                		nop
(1) 1012/ 600077C :                     		align 4
(1) 1013/ 600077C : 2000 4018 2000 4016 		ltorg		; Save literals
                    2000 4000 0603 EFF8 
                    0600 11B4 535F 4F4B 
                    FE10 00F0 44E0      
(1) 1014/ 600079A :                     
(1) 1015/ 600079A :                     ; ; =================================================================
(1) 1016/ 600079A :                     ; ; ------------------------------------------------
(1) 1017/ 600079A :                     ; ; Master | Watchdog interrupt
(1) 1018/ 600079A :                     ; ; ------------------------------------------------
(1) 1019/ 600079A :                     ;
(1) 1020/ 600079A :                     ; ; m_irq_wdg:
(1) 1021/ 600079A :                     ; ; check cache_m_plgn.asm
(1) 1022/ 600079A :                     ;
(1) 1023/ 600079A :                     ; ; =================================================================
(1) 1024/ 600079A :                     ; ; ------------------------------------------------
(1) 1025/ 600079A :                     ; ; Slave | Watchdog interrupt
(1) 1026/ 600079A :                     ; ; ------------------------------------------------
(1) 1027/ 600079A :                     ;
(1) 1028/ 600079A :                     ; 		align 4
(1) 1029/ 600079A :                     ; s_irq_wdg:
(1) 1030/ 600079A :                     ; ; 		mov	#$F0,r0
(1) 1031/ 600079A :                     ; ; 		ldc	r0,sr
(1) 1032/ 600079A :                     ; 		mov	r2,@-r15
(1) 1033/ 600079A :                     ; 		mov	#_FRT,r1
(1) 1034/ 600079A :                     ; 		mov.b   @(7,r1),r0
(1) 1035/ 600079A :                     ; 		xor     #2,r0
(1) 1036/ 600079A :                     ; 		mov.b   r0,@(7,r1)
(1) 1037/ 600079A :                     ;
(1) 1038/ 600079A :                     ; 		mov	#$FFFFFE80,r1
(1) 1039/ 600079A :                     ; 		mov.w   #$A518,r0		; Watchdog OFF
(1) 1040/ 600079A :                     ; 		mov.w   r0,@r1
(1) 1041/ 600079A :                     ; 		or      #$20,r0			; ON again
(1) 1042/ 600079A :                     ; 		mov.w   r0,@r1
(1) 1043/ 600079A :                     ; 		mov	#$10,r2
(1) 1044/ 600079A :                     ; 		mov.w   #$5A00,r0		; Timer for the next one
(1) 1045/ 600079A :                     ; 		or	r2,r0
(1) 1046/ 600079A :                     ; 		mov.w	r0,@r1
(1) 1047/ 600079A :                     ;
(1) 1048/ 600079A :                     ; 		mov	@r15+,r2
(1) 1049/ 600079A :                     ; 		rts
(1) 1050/ 600079A :                     ; 		nop
(1) 1051/ 600079A :                     ; 		align 4
(1) 1052/ 600079A :                     ; 		ltorg
(1) 1053/ 600079A :                     
(1) 1054/ 600079A :                     ; ====================================================================
(1) 1055/ 600079A :                     ; ----------------------------------------------------------------
(1) 1056/ 600079A :                     ; Mars_ClearCacheRam
(1) 1057/ 600079A :                     ;
(1) 1058/ 600079A :                     ; Clear the entire "fast code" section for the current CPU
(1) 1059/ 600079A :                     ; ----------------------------------------------------------------
(1) 1060/ 600079A :                     
(1) 1061/ 600079A :                     Mars_ClearCacheRam:
(1) 1062/ 600079A : D10D                		mov.l	#$C0000000+$800,r1
(1) 1063/ 600079C : E000                		mov	#0,r0
(1) 1064/ 600079E : 921B                		mov.w	#$80,r2
(1) 1065/ 60007A0 :                     .loop:
(1) 1066/ 60007A0 : 2106                		mov	r0,@-r1
(1) 1067/ 60007A2 : 2106                		mov	r0,@-r1
(1) 1068/ 60007A4 : 2106                		mov	r0,@-r1
(1) 1069/ 60007A6 : 2106                		mov	r0,@-r1
(1) 1070/ 60007A8 : 4210                		dt	r2
(1) 1071/ 60007AA : 8BF9                		bf	.loop
(1) 1072/ 60007AC : 000B                		rts
(1) 1073/ 60007AE : 0009                		nop
(1) 1074/ 60007B0 :                     		align 4
(1) 1075/ 60007B0 :                     
(1) 1076/ 60007B0 :                     ; ----------------------------------------------------------------
(1) 1077/ 60007B0 :                     ; Mars_LoadCacheRam
(1) 1078/ 60007B0 :                     ;
(1) 1079/ 60007B0 :                     ; Loads "fast code" into the SH2's cache
(1) 1080/ 60007B0 :                     ; ($800 bytes max)
(1) 1081/ 60007B0 :                     ;
(1) 1082/ 60007B0 :                     ; Input:
(1) 1083/ 60007B0 :                     ; r1 - Code to transfer
(1) 1084/ 60007B0 :                     ; r2 - Size / 4
(1) 1085/ 60007B0 :                     ;
(1) 1086/ 60007B0 :                     ; Breaks:
(1) 1087/ 60007B0 :                     ; r3
(1) 1088/ 60007B0 :                     ;
(1) 1089/ 60007B0 :                     ; NOTE:
(1) 1090/ 60007B0 :                     ; Interrupts MUST be OFF
(1) 1091/ 60007B0 :                     ; ----------------------------------------------------------------
(1) 1092/ 60007B0 :                     
(1) 1093/ 60007B0 :                     		align 4
(1) 1094/ 60007B0 :                     Mars_LoadCacheRam:
(1) 1095/ 60007B0 : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 1096/ 60007B2 : 9012                		mov	#$F0,r0
(1) 1097/ 60007B4 : 400E                		ldc	r0,sr
(1) 1098/ 60007B6 : 9311                		mov	#_CCR,r3
(1) 1099/ 60007B8 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 1100/ 60007BA : 2301                		mov.w	r0,@r3
(1) 1101/ 60007BC : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 1102/ 60007BE : 2301                		mov.w	r0,@r3
(1) 1103/ 60007C0 : D304                		mov 	#$C0000000,r3
(1) 1104/ 60007C2 :                     .copy:
(1) 1105/ 60007C2 : 6016                		mov 	@r1+,r0
(1) 1106/ 60007C4 : 2302                		mov 	r0,@r3
(1) 1107/ 60007C6 : 4210                		dt	r2
(1) 1108/ 60007C8 : 8FFB                		bf/s	.copy
(1) 1109/ 60007CA : 7304                		add 	#4,r3
(1) 1110/ 60007CC : 000B                		rts
(1) 1111/ 60007CE : 4F07                		ldc	@r15+,sr
(1) 1112/ 60007D0 :                     		align 4
(1) 1113/ 60007D0 : C000 0800 C000 0000 		ltorg
                    0080 00F0 FE92      
(1) 1114/ 60007DE :                     		align 4
(1) 1115/ 60007E0 :                     
(1) 1116/ 60007E0 :                     ; ====================================================================
(1) 1117/ 60007E0 :                     ; ----------------------------------------------------------------
(1) 1118/ 60007E0 :                     ; MARS System features
(1) 1119/ 60007E0 :                     ; ----------------------------------------------------------------
(1) 1120/ 60007E0 :                     
(1) 1121/ 60007E0 :                     		include "system/mars/video.asm"
(2)    1/ 60007E0 :                     ; ====================================================================
(2)    2/ 60007E0 :                     ; ----------------------------------------------------------------
(2)    3/ 60007E0 :                     ; 32X Video
(2)    4/ 60007E0 :                     ;
(2)    5/ 60007E0 :                     ; Some routines are located on the cache.asm for
(2)    6/ 60007E0 :                     ; speedup reasons.
(2)    7/ 60007E0 :                     ; ----------------------------------------------------------------
(2)    8/ 60007E0 :                     
(2)    9/ 60007E0 :                     ; --------------------------------------------------------
(2)   10/ 60007E0 :                     ; Settings
(2)   11/ 60007E0 :                     ; --------------------------------------------------------
(2)   12/ 60007E0 :                     
(2)   13/ 60007E0 : =$20000             MAX_SCRNBUFF	equ $20000	; MAX SDRAM for each fake-screen mode
(2)   14/ 60007E0 : =$1F800             FBVRAM_LAST	equ $1F800	; BLANK line (the very last one)
(2)   15/ 60007E0 : =$1D000             FBVRAM_PATCH	equ $1D000	; Framebuffer location for the affected XShift lines
(2)   16/ 60007E0 : =$280               MAX_FACES	equ 640		; MAX polygon faces for models
(2)   17/ 60007E0 : =$2A0               MAX_SVDP_PZ	equ 640+32	; MAX polygon pieces to draw (MAX_FACES+few_pieces)
(2)   18/ 60007E0 : =$FFFFFFFFFF..      MAX_ZDIST	equ -$1000	; Maximum 3D field distance (-Z)
(2)   19/ 60007E0 :                     
(2)   20/ 60007E0 :                     ; --------------------------------------------------------
(2)   21/ 60007E0 :                     ; Variables
(2)   22/ 60007E0 :                     ; --------------------------------------------------------
(2)   23/ 60007E0 :                     
(2)   24/ 60007E0 :                     ; Variables for 3D mode.
(2)   25/ 60007E0 : =$140               SCREEN_WIDTH	equ 320		; Screen width and height positions used
(2)   26/ 60007E0 : =$E0                SCREEN_HEIGHT	equ 224		; by 3D object rendering
(2)   27/ 60007E0 : =$80                PLGN_TEXURE	equ %10000000	; plypz_type (MSB byte)
(2)   28/ 60007E0 : =$40                PLGN_TRI	equ %01000000
(2)   29/ 60007E0 :                     
(2)   30/ 60007E0 :                     ; --------------------------------------------------------
(2)   31/ 60007E0 :                     ; Structs
(2)   32/ 60007E0 :                     ; --------------------------------------------------------
(2)   33/ 60007E0 :                     
(2)   34/ 60007E0 : (MACRO)             		struct 0
(2)   34/ 60007E0 : =$60007E0           GLBL_LASTPC     set *
(2)   34/   41BC0 :                                     dephase
(2)   34/   41BC0 : =$41BC0             GLBL_LASTORG    set *
(2)   34/       0 :                                     phase 0
(2)   35/       0 :                     scrl_xpos_old	ds.w 1		; OLD Xpos position
(2)   36/       2 :                     scrl_ypos_old	ds.w 1		; OLD Ypos position
(2)   37/       4 :                     scrl_fbpos_y	ds.w 1		; This field's REAL Y position
(2)   38/       6 :                     scrl_null_w	ds.w 1		; ** FILLER, free to use **
(2)   39/       8 :                     scrl_intrl_w	ds.w 1		; Internal scroll Width (MUST be larger than 320)
(2)   40/       A :                     scrl_intrl_h	ds.w 1		; Internal scroll Height
(2)   41/       C :                     scrl_intrl_size	ds.l 1		; Internal scroll FULL size (scrl_intrl_w*scrl_intrl_h)
(2)   42/      10 :                     scrl_fbpos	ds.l 1		; Top-left position of this field
(2)   43/      14 :                     scrl_fbdata	ds.l 1		; Location of the pixel data in the framebuffer
(2)   44/      18 :                     scrl_xpos	ds.l 1		; 0000.0000
(2)   45/      1C :                     scrl_ypos	ds.l 1		; 0000.0000
(2)   46/      20 :                     sizeof_mscrl	ds.l 0
(2)   47/      20 : (MACRO)             		finish
(2)   47/       0 :                                     !org GLBL_LASTORG
(2)   47/ 60007E0 :                                     phase GLBL_LASTPC
(2)   48/ 60007E0 :                     
(2)   49/ 60007E0 :                     ; Current camera view values
(2)   50/ 60007E0 : (MACRO)             		struct 0
(2)   50/ 60007E0 : =$60007E0           GLBL_LASTPC     set *
(2)   50/   41BC0 :                                     dephase
(2)   50/   41BC0 : =$41BC0             GLBL_LASTORG    set *
(2)   50/       0 :                                     phase 0
(2)   51/       0 :                     cam_x_pos	ds.l 1		; X position $000000.00
(2)   52/       4 :                     cam_y_pos	ds.l 1		; Y position $000000.00
(2)   53/       8 :                     cam_z_pos	ds.l 1		; Z position $000000.00
(2)   54/       C :                     cam_x_rot	ds.l 1		; X rotation $000000.00
(2)   55/      10 :                     cam_y_rot	ds.l 1		; Y rotation $000000.00
(2)   56/      14 :                     cam_z_rot	ds.l 1		; Z rotation $000000.00
(2)   57/      18 :                     sizeof_camera	ds.l 0
(2)   58/      18 : (MACRO)             		finish
(2)   58/       0 :                                     !org GLBL_LASTORG
(2)   58/ 60007E0 :                                     phase GLBL_LASTPC
(2)   59/ 60007E0 :                     
(2)   60/ 60007E0 : (MACRO)             		struct 0
(2)   60/ 60007E0 : =$60007E0           GLBL_LASTPC     set *
(2)   60/   41BC0 :                                     dephase
(2)   60/   41BC0 : =$41BC0             GLBL_LASTORG    set *
(2)   60/       0 :                                     phase 0
(2)   61/       0 :                     plypz_type	ds.l 1		; Type + Material settings (width + index add)
(2)   62/       4 :                     plypz_mtrl	ds.l 1		; Material data (ROM or SDRAM)
(2)   63/       8 :                     plypz_ytb	ds.l 1		; Ytop | Ybottom
(2)   64/       C :                     plypz_xl	ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   65/      10 :                     plypz_src_xl	ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   66/      14 :                     plypz_src_yl	ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   67/      18 :                     plypz_xl_dx	ds.l 1		; 0000.0000
(2)   68/      1C :                     plypz_xr_dx	ds.l 1		; 0000.0000
(2)   69/      20 :                     plypz_src_xl_dx	ds.l 1
(2)   70/      24 :                     plypz_src_xr_dx	ds.l 1
(2)   71/      28 :                     plypz_src_yl_dx	ds.l 1
(2)   72/      2C :                     plypz_src_yr_dx	ds.l 1
(2)   73/      30 :                     sizeof_plypz	ds.l 0
(2)   74/      30 : (MACRO)             		finish
(2)   74/       0 :                                     !org GLBL_LASTORG
(2)   74/ 60007E0 :                                     phase GLBL_LASTPC
(2)   75/ 60007E0 :                     
(2)   76/ 60007E0 :                     ; Polygon data, Size: $38
(2)   77/ 60007E0 : (MACRO)             		struct 0
(2)   77/ 60007E0 : =$60007E0           GLBL_LASTPC     set *
(2)   77/   41BC0 :                                     dephase
(2)   77/   41BC0 : =$41BC0             GLBL_LASTORG    set *
(2)   77/       0 :                                     phase 0
(2)   78/       0 :                     polygn_type	ds.l 1		; %MSww wwww 0000 aaaa | %MS w-Texture width, a-Pixel increment
(2)   79/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)   80/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)   81/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points (WORDS), ignored on solid colors
(2)   82/      38 :                     sizeof_polygn	ds.l 0
(2)   83/      38 : (MACRO)             		finish
(2)   83/       0 :                                     !org GLBL_LASTORG
(2)   83/ 60007E0 :                                     phase GLBL_LASTPC
(2)   84/ 60007E0 :                     
(2)   85/ 60007E0 :                     ; ====================================================================
(2)   86/ 60007E0 :                     ; ----------------------------------------------------------------
(2)   87/ 60007E0 :                     ; Init MARS Video
(2)   88/ 60007E0 :                     ; ----------------------------------------------------------------
(2)   89/ 60007E0 :                     
(2)   90/ 60007E0 :                     		align 4
(2)   91/ 60007E0 :                     MarsVideo_Init:
(2)   92/ 60007E0 : 4F22                		sts	pr,@-r15
(2)   93/ 60007E2 : D10F                		mov	#_sysreg,r1
(2)   94/ 60007E4 : 9024                		mov 	#FM,r0			; Set SVDP permission to SH2.
(2)   95/ 60007E6 : 8010                  		mov.b	r0,@(adapter,r1)	; * The Genesis side will still control the
(2)   96/ 60007E8 : D10E                		mov 	#_vdpreg,r1		; 256-color palette using DREQ *
(2)   97/ 60007EA : E000                		mov	#0,r0			; Start at BLANK
(2)   98/ 60007EC : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)   99/ 60007EE : D20E                		mov	#_framebuffer,r2	; Make default nametables
(2)  100/ 60007F0 : B006                		bsr	.def_fb
(2)  101/ 60007F2 : 0009                		nop
(2)  102/ 60007F4 : B004                		bsr	.def_fb
(2)  103/ 60007F6 : 0009                		nop
(2)  104/ 60007F8 : 4F26                		lds	@r15+,pr
(2)  105/ 60007FA : 000B                		rts
(2)  106/ 60007FC : 0009                		nop
(2)  107/ 60007FE :                     		align 4
(2)  108/ 6000800 :                     .def_fb:
(2)  109/ 6000800 : 6323                		mov	r2,r3
(2)  110/ 6000802 : D00A                		mov	#FBVRAM_LAST/2,r0	; The very last usable (blank) line.
(2)  111/ 6000804 : 9415                		mov	#240,r4
(2)  112/ 6000806 :                     .nxt_lne:
(2)  113/ 6000806 : 2301                		mov.w	r0,@r3
(2)  114/ 6000808 : 4410                		dt	r4
(2)  115/ 600080A : 8FFC                		bf/s	.nxt_lne
(2)  116/ 600080C : 7302                		add	#2,r3
(2)  117/ 600080E : 841B                		mov.b	@(framectl,r1),r0	; Frameswap request
(2)  118/ 6000810 : CA01                		xor	#1,r0
(2)  119/ 6000812 : 6303                		mov	r0,r3
(2)  120/ 6000814 : 801B                		mov.b	r0,@(framectl,r1)
(2)  121/ 6000816 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0	; And wait until it flips
(2)  122/ 6000818 : 3300                		cmp/eq	r0,r3
(2)  123/ 600081A : 8BFC                		bf	.wait_frm
(2)  124/ 600081C : 000B                		rts
(2)  125/ 600081E : 0009                		nop
(2)  126/ 6000820 :                     		align 4
(2)  127/ 6000820 : 2000 4000 2000 4100 		ltorg
                    2400 0000 0000 FC00 
                    0080 00F0           
(2)  128/ 6000834 :                     
(2)  129/ 6000834 :                     ; ====================================================================
(2)  130/ 6000834 :                     ; ----------------------------------------------------------------
(2)  131/ 6000834 :                     ; Subroutines
(2)  132/ 6000834 :                     ; ----------------------------------------------------------------
(2)  133/ 6000834 :                     
(2)  134/ 6000834 :                     ; --------------------------------------------------------
(2)  135/ 6000834 :                     ; VideoMars_ClearScreen
(2)  136/ 6000834 :                     ;
(2)  137/ 6000834 :                     ; Clears screen using VDPFILL
(2)  138/ 6000834 :                     ;
(2)  139/ 6000834 :                     ; Input:
(2)  140/ 6000834 :                     ; r1 | Framebuffer VRAM location
(2)  141/ 6000834 :                     ; r2 | Width / 2
(2)  142/ 6000834 :                     ; r3 | Height
(2)  143/ 6000834 :                     ; r4 | Pixel(s) to write
(2)  144/ 6000834 :                     ;
(2)  145/ 6000834 :                     ; Uses:
(2)  146/ 6000834 :                     ; r5-r6
(2)  147/ 6000834 :                     ;
(2)  148/ 6000834 :                     ; *** 512-pixel lines ONLY ***
(2)  149/ 6000834 :                     ; --------------------------------------------------------
(2)  150/ 6000834 :                     
(2)  151/ 6000834 :                     		align 4
(2)  152/ 6000834 :                     MarsVideo_ClearScreen:
(2)  153/ 6000834 : 4101                		shlr	r1
(2)  154/ 6000836 : 6513                		mov	r1,r5
(2)  155/ 6000838 : D63C                		mov	#_vdpreg,r6
(2)  156/ 600083A :                     .fb_loop:
(2)  157/ 600083A : 6023                		mov	r2,r0
(2)  158/ 600083C : 8162                		mov.w	r0,@(filllength,r6)
(2)  159/ 600083E : 6013                		mov	r1,r0
(2)  160/ 6000840 : 8163                		mov.w	r0,@(fillstart,r6)
(2)  161/ 6000842 : 6043                		mov	r4,r0
(2)  162/ 6000844 : 8164                		mov.w	r0,@(filldata,r6)
(2)  163/ 6000846 : 8565                .wait_fb2:	mov.w	@(vdpsts,r6),r0
(2)  164/ 6000848 : C802                		tst	#%10,r0
(2)  165/ 600084A : 8BFC                		bf	.wait_fb2
(2)  166/ 600084C : 4310                		dt	r3
(2)  167/ 600084E : 8FF4                		bf/s	.fb_loop
(2)  168/ 6000850 : 315C                		add	r5,r1
(2)  169/ 6000852 :                     .no_redraw_2:
(2)  170/ 6000852 : 000B                		rts
(2)  171/ 6000854 : 0009                		nop
(2)  172/ 6000856 :                     		align 4
(2)  173/ 6000858 :                     
(2)  174/ 6000858 :                     ; --------------------------------------------------------
(2)  175/ 6000858 :                     ; MarsVideo_ResetNameTbl
(2)  176/ 6000858 :                     ;
(2)  177/ 6000858 :                     ; Reset the nametable, all lines point to a BLANK line
(2)  178/ 6000858 :                     ; --------------------------------------------------------
(2)  179/ 6000858 :                     
(2)  180/ 6000858 :                     MarsVideo_ResetNameTbl:
(2)  181/ 6000858 : D135                		mov	#_framebuffer,r1
(2)  182/ 600085A : D036                		mov	#FBVRAM_LAST,r0
(2)  183/ 600085C : 9270                		mov	#240,r2
(2)  184/ 600085E :                     .nxt_lne2:
(2)  185/ 600085E : 2101                		mov.w	r0,@r1
(2)  186/ 6000860 : 4210                		dt	r2
(2)  187/ 6000862 : 8FFC                		bf/s	.nxt_lne2
(2)  188/ 6000864 : 7102                		add	#2,r1
(2)  189/ 6000866 : 000B                		rts
(2)  190/ 6000868 : 0009                		nop
(2)  191/ 600086A :                     		align 4
(2)  192/ 600086C :                     
(2)  193/ 600086C :                     ; --------------------------------------------------------
(2)  194/ 600086C :                     ; MarsVideo_MakeNametbl
(2)  195/ 600086C :                     ;
(2)  196/ 600086C :                     ; Builds the nametable for a normal screen, if
(2)  197/ 600086C :                     ; marsGbl_WaveEnable is set, it will add a
(2)  198/ 600086C :                     ; wave effect to the linetable (in WORDS)
(2)  199/ 600086C :                     ;
(2)  200/ 600086C :                     ; Input:
(2)  201/ 600086C :                     ; r1 | Framebuffer position
(2)  202/ 600086C :                     ; r2 | Width (Width*2 for Direct color)
(2)  203/ 600086C :                     ; r3 | Height
(2)  204/ 600086C :                     ; r4 | Y line position
(2)  205/ 600086C :                     ;
(2)  206/ 600086C :                     ; Uses:
(2)  207/ 600086C :                     ; r5-r11
(2)  208/ 600086C :                     ; --------------------------------------------------------
(2)  209/ 600086C :                     
(2)  210/ 600086C :                     MarsVideo_MakeNameTbl:
(2)  211/ 600086C : DA30                		mov	#_framebuffer,r10
(2)  212/ 600086E : 4400                		shll	r4
(2)  213/ 6000870 : 3A4C                		add	r4,r10
(2)  214/ 6000872 : D52E                		mov 	#_vdpreg,r5
(2)  215/ 6000874 : 8451                		mov.b	@(bitmapmd,r5),r0	; Cannot mess with the RLE lines.
(2)  216/ 6000876 : C903                		and	#%11,r0
(2)  217/ 6000878 : 8803                		cmp/eq	#3,r0
(2)  218/ 600087A : 892C                		bt	.cant_use
(2)  219/ 600087C : C519                		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  220/ 600087E : 2008                		tst	r0,r0
(2)  221/ 6000880 : 8922                		bt	.linetbl_normal
(2)  222/ 6000882 :                     
(2)  223/ 6000882 :                     	; Special linetable with
(2)  224/ 6000882 :                     	; wave deformation.
(2)  225/ 6000882 : C51A                		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  226/ 6000884 : 6403                		mov	r0,r4
(2)  227/ 6000886 : C51D                		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  228/ 6000888 : 955B                		mov	#$7FF,r5
(2)  229/ 600088A : 304C                		add	r4,r0			; wave speed
(2)  230/ 600088C : 2059                		and	r5,r0
(2)  231/ 600088E : C11D                		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  232/ 6000890 : 6703                		mov	r0,r7
(2)  233/ 6000892 : C51B                		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  234/ 6000894 : 6503                		mov	r0,r5
(2)  235/ 6000896 : C51C                		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  236/ 6000898 : 6403                		mov	r0,r4
(2)  237/ 600089A : E600                		mov	#0,r6
(2)  238/ 600089C : 9B51                		mov	#$7FF,r11
(2)  239/ 600089E : DC26                		mov	#sin_table,r12
(2)  240/ 60008A0 :                     .nxt_lne:
(2)  241/ 60008A0 : 6073                		mov	r7,r0
(2)  242/ 60008A2 : 374C                		add	r4,r7			; wave distord
(2)  243/ 60008A4 : 27B9                		and	r11,r7
(2)  244/ 60008A6 : 4008                		shll2	r0
(2)  245/ 60008A8 : 09CE                		mov	@(r0,r12),r9
(2)  246/ 60008AA : 395D                		dmuls	r5,r9
(2)  247/ 60008AC : 091A                		sts	macl,r9
(2)  248/ 60008AE : 4929                		shlr16	r9
(2)  249/ 60008B0 : 699F                		exts.w	r9,r9
(2)  250/ 60008B2 : 6013                		mov	r1,r0
(2)  251/ 60008B4 : 306C                		add	r6,r0
(2)  252/ 60008B6 : 309C                		add	r9,r0
(2)  253/ 60008B8 : 4001                		shlr	r0
(2)  254/ 60008BA : 2A01                		mov.w	r0,@r10
(2)  255/ 60008BC : 362C                		add	r2,r6
(2)  256/ 60008BE : 4310                		dt	r3
(2)  257/ 60008C0 : 8FEE                		bf/s	.nxt_lne
(2)  258/ 60008C2 : 7A02                		add	#2,r10
(2)  259/ 60008C4 : 000B                		rts
(2)  260/ 60008C6 : 0009                		nop
(2)  261/ 60008C8 :                     		align 4
(2)  262/ 60008C8 :                     
(2)  263/ 60008C8 :                     .linetbl_normal:
(2)  264/ 60008C8 : 4101                		shlr	r1
(2)  265/ 60008CA : 4201                		shlr	r2
(2)  266/ 60008CC :                     .nxt_lne2:
(2)  267/ 60008CC : 2A11                		mov.w	r1,@r10
(2)  268/ 60008CE : 312C                		add	r2,r1
(2)  269/ 60008D0 : 4310                		dt	r3
(2)  270/ 60008D2 : 8FFB                		bf/s	.nxt_lne2
(2)  271/ 60008D4 : 7A02                		add	#2,r10
(2)  272/ 60008D6 :                     .cant_use:
(2)  273/ 60008D6 : 000B                		rts
(2)  274/ 60008D8 : 0009                		nop
(2)  275/ 60008DA :                     		align 4
(2)  276/ 60008DC :                     
(2)  277/ 60008DC :                     ; --------------------------------------------------------
(2)  278/ 60008DC :                     ; MarsVideo_FixTblShift
(2)  279/ 60008DC :                     ;
(2)  280/ 60008DC :                     ; If your current screen mode manipulates the linetable
(2)  281/ 60008DC :                     ; for scrolling, call this BEFORE swaping the framebuffer
(2)  282/ 60008DC :                     ; to solve a HARDWARE BUG that causes
(2)  283/ 60008DC :                     ; Xshift not to work with lines that end with $xxFF
(2)  284/ 60008DC :                     ;
(2)  285/ 60008DC :                     ; Emulators ignore this.
(2)  286/ 60008DC :                     ; --------------------------------------------------------
(2)  287/ 60008DC :                     
(2)  288/ 60008DC :                     MarsVideo_FixTblShift:
(2)  289/ 60008DC : DE13                		mov	#_vdpreg,r14
(2)  290/ 60008DE : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  291/ 60008E0 : C903                		and	#%11,r0
(2)  292/ 60008E2 : 8801                		cmp/eq	#1,r0
(2)  293/ 60008E4 : 8B1F                		bf	.ptchset
(2)  294/ 60008E6 : C517                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set?
(2)  295/ 60008E8 : C901                		and	#1,r0
(2)  296/ 60008EA : 2008                		tst	r0,r0
(2)  297/ 60008EC : 891B                		bt	.ptchset
(2)  298/ 60008EE : DE10                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  299/ 60008F0 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  300/ 60008F2 : DC12                		mov	#_framebuffer+FBVRAM_PATCH,r12	; r12 - Framebuffer output for the patched pixel lines
(2)  301/ 60008F4 : 9B24                		mov	#240,r11			; r11 - Lines to check
(2)  302/ 60008F6 : E0FF                		mov	#-1,r0
(2)  303/ 60008F8 : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  304/ 60008FA : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  305/ 60008FC :                     .loop:
(2)  306/ 60008FC : 60D1                		mov.w	@r13,r0
(2)  307/ 60008FE : 2099                		and	r9,r0
(2)  308/ 6000900 : 6703                		mov	r0,r7
(2)  309/ 6000902 : 20A9                		and	r10,r0
(2)  310/ 6000904 : 30A0                		cmp/eq	r10,r0
(2)  311/ 6000906 : 8B0B                		bf	.tblexit
(2)  312/ 6000908 : 4700                		shll	r7
(2)  313/ 600090A : 37EC                		add	r14,r7
(2)  314/ 600090C : 60C3                		mov	r12,r0
(2)  315/ 600090E : 4001                		shlr	r0
(2)  316/ 6000910 : 2D01                		mov.w	r0,@r13
(2)  317/ 6000912 : 9317                		mov	#(320+4)/2,r3
(2)  318/ 6000914 :                     .copy:
(2)  319/ 6000914 : 6071                		mov.w	@r7,r0
(2)  320/ 6000916 : 2C01                		mov.w	r0,@r12
(2)  321/ 6000918 : 7702                		add	#2,r7
(2)  322/ 600091A : 4310                		dt	r3
(2)  323/ 600091C : 8FFA                		bf/s	.copy
(2)  324/ 600091E : 7C02                		add	#2,r12
(2)  325/ 6000920 :                     .tblexit:
(2)  326/ 6000920 : 4B10                		dt	r11
(2)  327/ 6000922 : 8FEB                		bf/s	.loop
(2)  328/ 6000924 : 7D02                		add	#2,r13
(2)  329/ 6000926 :                     .ptchset:
(2)  330/ 6000926 : 000B                		rts
(2)  331/ 6000928 : 0009                		nop
(2)  332/ 600092A :                     		align 4
(2)  333/ 600092C : 2000 4100 2400 0000 		ltorg
                    0001 F800 0600 26D8 
                    2401 D000 00F0 07FF 
                    00A2                
(2)  334/ 6000946 :                     
(2)  335/ 6000946 :                     ; ====================================================================
(2)  336/ 6000946 :                     ; ----------------------------------------------------------------
(2)  337/ 6000946 :                     ; 2D Section
(2)  338/ 6000946 :                     ;
(2)  339/ 6000946 :                     ; The routines that write to the framebuffer are
(2)  340/ 6000946 :                     ; located at cache_m_scrlbg.asm
(2)  341/ 6000946 :                     ; ----------------------------------------------------------------
(2)  342/ 6000946 :                     
(2)  343/ 6000946 :                     ; --------------------------------------------------------
(2)  344/ 6000946 :                     ; MarsVideo_MkScrlField
(2)  345/ 6000946 :                     ;
(2)  346/ 6000946 :                     ; This makes a new internal scrolling background
(2)  347/ 6000946 :                     ;
(2)  348/ 6000946 :                     ; Call this first to setup the internal scrolling values,
(2)  349/ 6000946 :                     ; then after this call MarsVideo_SetBg to set your
(2)  350/ 6000946 :                     ; source image and it's size.
(2)  351/ 6000946 :                     ;
(2)  352/ 6000946 :                     ; Input:
(2)  353/ 6000946 :                     ; r1 | Background buffer to initialize
(2)  354/ 6000946 :                     ; r2 | Output framebuffer data
(2)  355/ 6000946 :                     ; r3 | Scroll Width (320 or large)
(2)  356/ 6000946 :                     ; r4 | Scroll Height
(2)  357/ 6000946 :                     ; r5 | Scroll block size (4 pixels minimum)
(2)  358/ 6000946 :                     ;
(2)  359/ 6000946 :                     ; NOTE:
(2)  360/ 6000946 :                     ; At the very last usable line the next 320 pixels
(2)  361/ 6000946 :                     ; will be visible that line reaches into the first
(2)  362/ 6000946 :                     ; line again.
(2)  363/ 6000946 :                     ; When writing pixels in the buffer: If you are
(2)  364/ 6000946 :                     ; in the range of 0-320, write the same pixels at
(2)  365/ 6000946 :                     ; the very end of the scrolling area (width*height)
(2)  366/ 6000946 :                     ;
(2)  367/ 6000946 :                     ; Breaks:
(2)  368/ 6000946 :                     ; r3-r4,macl
(2)  369/ 6000946 :                     ; --------------------------------------------------------
(2)  370/ 6000946 :                     
(2)  371/ 6000946 :                     		align 4
(2)  372/ 6000948 :                     MarsVideo_MkScrlField:
(2)  373/ 6000948 : E020                		mov	#sizeof_mscrl,r0
(2)  374/ 600094A : 210E                		mulu	r0,r1
(2)  375/ 600094C : 011A                		sts	macl,r1
(2)  376/ 600094E : D033                		mov	#RAM_Mars_ScrlBuff,r0
(2)  377/ 6000950 : 310C                		add	r0,r1
(2)  378/ 6000952 :                     
(2)  379/ 6000952 : 335C                		add	r5,r3	; add "block" into width/height
(2)  380/ 6000954 : 345C                		add	r5,r4
(2)  381/ 6000956 :                     
(2)  382/ 6000956 : 1125                		mov	r2,@(scrl_fbdata,r1)
(2)  383/ 6000958 : 6033                		mov	r3,r0
(2)  384/ 600095A : 8114                		mov.w	r0,@(scrl_intrl_w,r1)
(2)  385/ 600095C : 6043                		mov	r4,r0
(2)  386/ 600095E : 8115                		mov.w	r0,@(scrl_intrl_h,r1)
(2)  387/ 6000960 :                     ; 		mov	r5,r0
(2)  388/ 6000960 :                     ; 		mov.w	r0,@(scrl_intrl_blk,r1)
(2)  389/ 6000960 : 243E                		mulu	r3,r4
(2)  390/ 6000962 : 001A                		sts	macl,r0
(2)  391/ 6000964 : 1103                		mov	r0,@(scrl_intrl_size,r1)
(2)  392/ 6000966 :                     
(2)  393/ 6000966 : 200A                		xor	r0,r0
(2)  394/ 6000968 :                     ; 		mov.b	r0,@(scrl_xset,r1)
(2)  395/ 6000968 :                     ; 		mov.b	r0,@(scrl_yset,r1)
(2)  396/ 6000968 : 8110                		mov.w	r0,@(scrl_xpos_old,r1)
(2)  397/ 600096A : 8111                		mov.w	r0,@(scrl_ypos_old,r1)
(2)  398/ 600096C : 1104                		mov	r0,@(scrl_fbpos,r1)
(2)  399/ 600096E : 8112                		mov.w	r0,@(scrl_fbpos_y,r1)
(2)  400/ 6000970 : 000B                		rts
(2)  401/ 6000972 : 0009                		nop
(2)  402/ 6000974 :                     		align 4
(2)  403/ 6000974 :                     
(2)  404/ 6000974 :                     ; --------------------------------------------------------
(2)  405/ 6000974 :                     ; MarsVideo_SetScrlBg
(2)  406/ 6000974 :                     ;
(2)  407/ 6000974 :                     ; Sets the source data for the background
(2)  408/ 6000974 :                     ;
(2)  409/ 6000974 :                     ; Input:
(2)  410/ 6000974 :                     ; r1 | Background buffer
(2)  411/ 6000974 :                     ; r2 | Pixel data location
(2)  412/ 6000974 :                     ; r3 | Map data location
(2)  413/ 6000974 :                     ; r4 | Block size
(2)  414/ 6000974 :                     ; r5 | Map width in blocks
(2)  415/ 6000974 :                     ; r6 | Map height in blocks
(2)  416/ 6000974 :                     ;
(2)  417/ 6000974 :                     ; Breaks:
(2)  418/ 6000974 :                     ; r0,r1
(2)  419/ 6000974 :                     ;
(2)  420/ 6000974 :                     ; NOTES:
(2)  421/ 6000974 :                     ; - ROM data is NOT protected.
(2)  422/ 6000974 :                     ; --------------------------------------------------------
(2)  423/ 6000974 :                     
(2)  424/ 6000974 :                     ; MarsVideo_SetScrlBg:
(2)  425/ 6000974 :                     ; 		mov	r2,@(scrl_data,r1)
(2)  426/ 6000974 :                     ; 		mov	r3,@(scrl_mapdata,r1)
(2)  427/ 6000974 :                     ; 		mov	r4,r0
(2)  428/ 6000974 :                     ; 		mov.b	r0,@(scrl_bg_bw,r1)
(2)  429/ 6000974 :                     ; 		mov	r5,r0
(2)  430/ 6000974 :                     ; 		mov.w	r0,@(scrl_width,r1)
(2)  431/ 6000974 :                     ; 		mov	r6,r0
(2)  432/ 6000974 :                     ; 		mov.w	r0,@(scrl_height,r1)
(2)  433/ 6000974 :                     ; 		rts
(2)  434/ 6000974 :                     ; 		nop
(2)  435/ 6000974 :                     ; 		align 4
(2)  436/ 6000974 :                     ; 		ltorg
(2)  437/ 6000974 :                     
(2)  438/ 6000974 :                     ; ; --------------------------------------------------------
(2)  439/ 6000974 :                     ; ; MarsVideo_SetScrlBg
(2)  440/ 6000974 :                     ; ;
(2)  441/ 6000974 :                     ; ; Sets the source data for the background
(2)  442/ 6000974 :                     ; ;
(2)  443/ 6000974 :                     ; ; Input:
(2)  444/ 6000974 :                     ; ; r1 | Background buffer
(2)  445/ 6000974 :                     ; ; r2 | Source image location (ROM or SDRAM)
(2)  446/ 6000974 :                     ; ; r3 | Source image Width
(2)  447/ 6000974 :                     ; ; r4 | Source image Height
(2)  448/ 6000974 :                     ; ;
(2)  449/ 6000974 :                     ; ; Breaks:
(2)  450/ 6000974 :                     ; ; r0,r1
(2)  451/ 6000974 :                     ; ;
(2)  452/ 6000974 :                     ; ; NOTES:
(2)  453/ 6000974 :                     ; ; - Width and Height must be aligned by the current
(2)  454/ 6000974 :                     ; ; buffer's block size
(2)  455/ 6000974 :                     ; ; - ROM data is NOT protected
(2)  456/ 6000974 :                     ; ; --------------------------------------------------------
(2)  457/ 6000974 :                     ;
(2)  458/ 6000974 :                     ; MarsVideo_SetScrlBg:
(2)  459/ 6000974 :                     ; 		mov	r2,@(scrl_data,r1)
(2)  460/ 6000974 :                     ; 		mov.b	@(scrl_flags,r1),r0
(2)  461/ 6000974 :                     ; 		and	#%10,r0
(2)  462/ 6000974 :                     ; 		tst	r0,r0
(2)  463/ 6000974 :                     ; 		bt	.indxmode
(2)  464/ 6000974 :                     ; 		shll	r3
(2)  465/ 6000974 :                     ; .indxmode:
(2)  466/ 6000974 :                     ; 		mov	r3,r0
(2)  467/ 6000974 :                     ; 		mov.w	r0,@(scrl_width,r1)
(2)  468/ 6000974 :                     ; 		mov	r4,r0
(2)  469/ 6000974 :                     ; 		mov.w	r0,@(scrl_height,r1)
(2)  470/ 6000974 :                     ; 		rts
(2)  471/ 6000974 :                     ; 		nop
(2)  472/ 6000974 :                     ; 		align 4
(2)  473/ 6000974 :                     ; 		ltorg
(2)  474/ 6000974 :                     
(2)  475/ 6000974 :                     ; --------------------------------------------------------
(2)  476/ 6000974 :                     ; MarsVideo_ShowScrlBg
(2)  477/ 6000974 :                     ;
(2)  478/ 6000974 :                     ; Make a visible section of any scrolling area
(2)  479/ 6000974 :                     ; into the current framebuffer.
(2)  480/ 6000974 :                     ;
(2)  481/ 6000974 :                     ; Input:
(2)  482/ 6000974 :                     ; r1 | Background buffer
(2)  483/ 6000974 :                     ; r2 | Top Y
(2)  484/ 6000974 :                     ; r3 | Bottom Y
(2)  485/ 6000974 :                     ;
(2)  486/ 6000974 :                     ; NOTE:
(2)  487/ 6000974 :                     ; After finishing all your screens call
(2)  488/ 6000974 :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  489/ 6000974 :                     ; --------------------------------------------------------
(2)  490/ 6000974 :                     
(2)  491/ 6000974 :                     MarsVideo_ShowScrlBg:
(2)  492/ 6000974 : DE2A                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  493/ 6000976 : 5D15                		mov	@(scrl_fbdata,r1),r13		; r13 - Framebuffer pixeldata position
(2)  494/ 6000978 : 5C13                		mov	@(scrl_intrl_size,r1),r12	; r12 - Full size of screen-scroll
(2)  495/ 600097A : EB00                		mov	#0,r11				; r11 - line counter
(2)  496/ 600097C : 8514                		mov.w	@(scrl_intrl_w,r1),r0
(2)  497/ 600097E : 6A03                		mov	r0,r10				; r10 - Next line to add
(2)  498/ 6000980 : 6623                		mov	r2,r6
(2)  499/ 6000982 : 6023                		mov	r2,r0
(2)  500/ 6000984 : 4000                		shll	r0
(2)  501/ 6000986 : 3E0C                		add	r0,r14
(2)  502/ 6000988 : 8512                		mov.w	@(scrl_fbpos_y,r1),r0
(2)  503/ 600098A : 20AE                		mulu	r10,r0
(2)  504/ 600098C : 5714                		mov	@(scrl_fbpos,r1),r7
(2)  505/ 600098E : 001A                		sts	macl,r0
(2)  506/ 6000990 : 370C                		add	r0,r7
(2)  507/ 6000992 : C519                		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  508/ 6000994 : 2008                		tst	r0,r0
(2)  509/ 6000996 : 8B13                		bf	.ln_wavy
(2)  510/ 6000998 :                     .ln_loop:
(2)  511/ 6000998 : 6873                		mov	r7,r8
(2)  512/ 600099A : 38C3                		cmp/ge	r12,r8
(2)  513/ 600099C : 8B00                		bf	.xl_r
(2)  514/ 600099E : 38C8                		sub	r12,r8
(2)  515/ 60009A0 :                     .xl_r:
(2)  516/ 60009A0 : 4811                		cmp/pz	r8
(2)  517/ 60009A2 : 8900                		bt	.xl_l
(2)  518/ 60009A4 : 38CC                		add	r12,r8
(2)  519/ 60009A6 :                     .xl_l:
(2)  520/ 60009A6 : 6783                		mov	r8,r7
(2)  521/ 60009A8 : 37AC                		add	r10,r7		; Add Y
(2)  522/ 60009AA : 38DC                		add	r13,r8		; Add Framebuffer position
(2)  523/ 60009AC : 4801                		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  524/ 60009AE : 2E81                		mov.w	r8,@r14		; send to FB's table
(2)  525/ 60009B0 : 7E02                		add	#2,r14
(2)  526/ 60009B2 : 7B02                		add	#2,r11
(2)  527/ 60009B4 : 3630                		cmp/eq	r3,r6
(2)  528/ 60009B6 : 8FEF                		bf/s	.ln_loop
(2)  529/ 60009B8 : 7601                		add	#1,r6
(2)  530/ 60009BA : 000B                		rts
(2)  531/ 60009BC : 0009                		nop
(2)  532/ 60009BE :                     		align 4
(2)  533/ 60009C0 :                     .ln_wavy:
(2)  534/ 60009C0 : C51A                		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  535/ 60009C2 : 6403                		mov	r0,r4
(2)  536/ 60009C4 : C51D                		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  537/ 60009C6 : 952F                		mov	#$7FF,r5
(2)  538/ 60009C8 : 304C                		add	r4,r0			; wave speed
(2)  539/ 60009CA : 2059                		and	r5,r0
(2)  540/ 60009CC : C11D                		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  541/ 60009CE : 6903                		mov	r0,r9
(2)  542/ 60009D0 : C51B                		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  543/ 60009D2 : 6503                		mov	r0,r5
(2)  544/ 60009D4 : C51C                		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  545/ 60009D6 : 6403                		mov	r0,r4
(2)  546/ 60009D8 :                     .ln_loop_w:
(2)  547/ 60009D8 : 9826                		mov	#$7FF,r8
(2)  548/ 60009DA : 6093                		mov	r9,r0
(2)  549/ 60009DC : 394C                		add	r4,r9		; wave distord
(2)  550/ 60009DE : 2989                		and	r8,r9
(2)  551/ 60009E0 : 4008                		shll2	r0
(2)  552/ 60009E2 : D810                		mov	#sin_table,r8
(2)  553/ 60009E4 : 008E                		mov	@(r0,r8),r0
(2)  554/ 60009E6 : 305D                		dmuls	r5,r0
(2)  555/ 60009E8 : 001A                		sts	macl,r0
(2)  556/ 60009EA : 4029                		shlr16	r0
(2)  557/ 60009EC : 600F                		exts.w	r0,r0
(2)  558/ 60009EE : 6873                		mov	r7,r8
(2)  559/ 60009F0 : 38C3                		cmp/ge	r12,r8
(2)  560/ 60009F2 : 8B00                		bf	.wxl_r
(2)  561/ 60009F4 : 38C8                		sub	r12,r8
(2)  562/ 60009F6 :                     .wxl_r:
(2)  563/ 60009F6 : 4811                		cmp/pz	r8
(2)  564/ 60009F8 : 8900                		bt	.wxl_l
(2)  565/ 60009FA : 38CC                		add	r12,r8
(2)  566/ 60009FC :                     .wxl_l:
(2)  567/ 60009FC : 6783                		mov	r8,r7
(2)  568/ 60009FE : 37AC                		add	r10,r7		; Add Y
(2)  569/ 6000A00 : 38DC                		add	r13,r8		; Add Framebuffer position
(2)  570/ 6000A02 : 380C                		add	r0,r8
(2)  571/ 6000A04 : 4801                		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  572/ 6000A06 : 2E81                		mov.w	r8,@r14		; send to FB's table
(2)  573/ 6000A08 : 7E02                		add	#2,r14
(2)  574/ 6000A0A : 7B02                		add	#2,r11
(2)  575/ 6000A0C : 3630                		cmp/eq	r3,r6
(2)  576/ 6000A0E : 8FE3                		bf/s	.ln_loop_w
(2)  577/ 6000A10 : 7601                		add	#1,r6
(2)  578/ 6000A12 : 000B                		rts
(2)  579/ 6000A14 : 0009                		nop
(2)  580/ 6000A16 :                     		align 4
(2)  581/ 6000A18 :                     .no_lines:
(2)  582/ 6000A18 : 000B                		rts
(2)  583/ 6000A1A : 0009                		nop
(2)  584/ 6000A1C :                     		align 4
(2)  585/ 6000A1C : C000 0378 2400 0000 		ltorg
                    0600 26D8 07FF      
(2)  586/ 6000A2A :                     
(2)  587/ 6000A2A :                     ; --------------------------------------------------------
(2)  588/ 6000A2A :                     ; MarsVideo_Bg_MdMove
(2)  589/ 6000A2A :                     ;
(2)  590/ 6000A2A :                     ; Input:
(2)  591/ 6000A2A :                     ; r14 | Genesis background buffer
(2)  592/ 6000A2A :                     ; r13 | Scrolling-area buffer
(2)  593/ 6000A2A :                     ; --------------------------------------------------------
(2)  594/ 6000A2A :                     
(2)  595/ 6000A2A :                     		align 4
(2)  596/ 6000A2C :                     MarsVideo_Bg_MdMove:
(2)  597/ 6000A2C : 50EC                		mov	@(md_bg_x,r14),r0
(2)  598/ 6000A2E : 1D06                		mov	r0,@(scrl_xpos,r13)
(2)  599/ 6000A30 : 50ED                		mov	@(md_bg_y,r14),r0
(2)  600/ 6000A32 : 1D07                		mov	r0,@(scrl_ypos,r13)
(2)  601/ 6000A34 :                     
(2)  602/ 6000A34 : E100                		mov	#0,r1
(2)  603/ 6000A36 : E200                		mov	#0,r2
(2)  604/ 6000A38 : 50D6                		mov	@(scrl_xpos,r13),r0		; 0000.0000
(2)  605/ 6000A3A : 4029                		shlr16	r0
(2)  606/ 6000A3C : C117                		mov.w	r0,@(marsGbl_XShift,gbr)	; Update X/Y, include XShift bit
(2)  607/ 6000A3E : 600F                		exts.w	r0,r0
(2)  608/ 6000A40 : 6303                		mov	r0,r3
(2)  609/ 6000A42 : 85D0                		mov.w	@(scrl_xpos_old,r13),r0
(2)  610/ 6000A44 : 3300                		cmp/eq	r0,r3
(2)  611/ 6000A46 : 8901                		bt	.xequ
(2)  612/ 6000A48 : 6133                		mov	r3,r1
(2)  613/ 6000A4A : 3108                		sub	r0,r1
(2)  614/ 6000A4C :                     .xequ:
(2)  615/ 6000A4C : 6033                		mov	r3,r0
(2)  616/ 6000A4E : 81D0                		mov.w	r0,@(scrl_xpos_old,r13)
(2)  617/ 6000A50 : 50D7                		mov	@(scrl_ypos,r13),r0	; 0000.0000
(2)  618/ 6000A52 : 4029                		shlr16	r0
(2)  619/ 6000A54 : 600F                		exts.w	r0,r0
(2)  620/ 6000A56 : 6303                		mov	r0,r3
(2)  621/ 6000A58 : 85D1                		mov.w	@(scrl_ypos_old,r13),r0
(2)  622/ 6000A5A : 3300                		cmp/eq	r0,r3
(2)  623/ 6000A5C : 8901                		bt	.yequ
(2)  624/ 6000A5E : 6233                		mov	r3,r2
(2)  625/ 6000A60 : 3208                		sub	r0,r2
(2)  626/ 6000A62 :                     .yequ:
(2)  627/ 6000A62 : 6033                		mov	r3,r0
(2)  628/ 6000A64 : 81D1                		mov.w	r0,@(scrl_ypos_old,r13)
(2)  629/ 6000A66 : 611F                		exts.w	r1,r1
(2)  630/ 6000A68 : 622F                		exts.w	r2,r2
(2)  631/ 6000A6A :                     
(2)  632/ 6000A6A :                     	; ---------------------------------------
(2)  633/ 6000A6A :                     	; Y Framebuffer position
(2)  634/ 6000A6A :                     	; ---------------------------------------
(2)  635/ 6000A6A :                     
(2)  636/ 6000A6A : 85D5                		mov.w	@(scrl_intrl_h,r13),r0
(2)  637/ 6000A6C : 6303                		mov	r0,r3
(2)  638/ 6000A6E : 85D2                		mov.w	@(scrl_fbpos_y,r13),r0
(2)  639/ 6000A70 : 6403                		mov	r0,r4
(2)  640/ 6000A72 : 342C                		add	r2,r4
(2)  641/ 6000A74 : 4215                		cmp/pl	r2
(2)  642/ 6000A76 : 8B02                		bf	.ypu_negtv
(2)  643/ 6000A78 : 3433                		cmp/ge	r3,r4
(2)  644/ 6000A7A : 8B00                		bf	.ypu_negtv
(2)  645/ 6000A7C : 3438                		sub	r3,r4
(2)  646/ 6000A7E :                     .ypu_negtv:
(2)  647/ 6000A7E : 4211                		cmp/pz	r2
(2)  648/ 6000A80 : 8902                		bt	.ypu_postv
(2)  649/ 6000A82 : 4411                		cmp/pz	r4
(2)  650/ 6000A84 : 8900                		bt	.ypu_postv
(2)  651/ 6000A86 : 343C                		add	r3,r4
(2)  652/ 6000A88 :                     .ypu_postv:
(2)  653/ 6000A88 : 6043                		mov	r4,r0
(2)  654/ 6000A8A : 81D2                		mov.w	r0,@(scrl_fbpos_y,r13)
(2)  655/ 6000A8C :                     
(2)  656/ 6000A8C :                     	; ---------------------------------------
(2)  657/ 6000A8C :                     	; Update Framebuffer TOP-LEFT position
(2)  658/ 6000A8C :                     	; ---------------------------------------
(2)  659/ 6000A8C :                     
(2)  660/ 6000A8C : 53D3                		mov	@(scrl_intrl_size,r13),r3
(2)  661/ 6000A8E : 50D4                		mov	@(scrl_fbpos,r13),r0
(2)  662/ 6000A90 : 301C                		add	r1,r0
(2)  663/ 6000A92 : 4115                		cmp/pl	r1
(2)  664/ 6000A94 : 8B02                		bf	.yx_negtv
(2)  665/ 6000A96 : 3033                		cmp/ge	r3,r0
(2)  666/ 6000A98 : 8B00                		bf	.yx_negtv
(2)  667/ 6000A9A : 3038                		sub	r3,r0
(2)  668/ 6000A9C :                     .yx_negtv:
(2)  669/ 6000A9C : 4111                		cmp/pz	r1
(2)  670/ 6000A9E : 8902                		bt	.yx_postv
(2)  671/ 6000AA0 : 4011                		cmp/pz	r0
(2)  672/ 6000AA2 : 8900                		bt	.yx_postv
(2)  673/ 6000AA4 : 303C                		add	r3,r0
(2)  674/ 6000AA6 :                     .yx_postv:
(2)  675/ 6000AA6 : 1D04                		mov	r0,@(scrl_fbpos,r13)
(2)  676/ 6000AA8 : 000B                		rts
(2)  677/ 6000AAA : 0009                		nop
(2)  678/ 6000AAC :                     		align 4
(2)  679/ 6000AAC :                     
(2)  680/ 6000AAC :                     ; --------------------------------------------------------
(2)  681/ 6000AAC :                     ; MarsVideo_Bg_MdReq
(2)  682/ 6000AAC :                     ;
(2)  683/ 6000AAC :                     ; Input:
(2)  684/ 6000AAC :                     ; r14 | Genesis background buffer
(2)  685/ 6000AAC :                     ; r13 | Scrolling-area buffer
(2)  686/ 6000AAC :                     ;
(2)  687/ 6000AAC :                     ; Note: The drawing bits are cleared on the Genesis-side.
(2)  688/ 6000AAC :                     ; --------------------------------------------------------
(2)  689/ 6000AAC :                     
(2)  690/ 6000AAC :                     ; TODO: merge the bits
(2)  691/ 6000AAC :                     
(2)  692/ 6000AAC :                     		align 4
(2)  693/ 6000AAC :                     MarsVideo_Bg_MdReq:
(2)  694/ 6000AAC : 4F22                		sts	pr,@-r15
(2)  695/ 6000AAE : 84E3                		mov.b	@(md_bg_flags,r14),r0
(2)  696/ 6000AB0 : D22C                		mov	#Cach_DrawTimers,r2
(2)  697/ 6000AB2 : C9FF                		and	#$FF,r0
(2)  698/ 6000AB4 : 6123                		mov	r2,r1			; Set NEW screen timers ($02)
(2)  699/ 6000AB6 : E302                		mov	#2,r3
(2)  700/ 6000AB8 : C801                		tst	#%00000001,r0		; bitDrwR
(2)  701/ 6000ABA : 8900                		bt	.no_r
(2)  702/ 6000ABC : 2132                		mov	r3,@r1
(2)  703/ 6000ABE :                     .no_r:
(2)  704/ 6000ABE : 7104                		add	#4,r1
(2)  705/ 6000AC0 : C802                		tst	#%00000010,r0		; bitDrwL
(2)  706/ 6000AC2 : 8900                		bt	.no_l
(2)  707/ 6000AC4 : 2132                		mov	r3,@r1
(2)  708/ 6000AC6 :                     .no_l:
(2)  709/ 6000AC6 : 7104                		add	#4,r1
(2)  710/ 6000AC8 : C804                		tst	#%00000100,r0		; bitDrwD
(2)  711/ 6000ACA : 8900                		bt	.no_d
(2)  712/ 6000ACC : 2132                		mov	r3,@r1
(2)  713/ 6000ACE :                     .no_d:
(2)  714/ 6000ACE : 7104                		add	#4,r1
(2)  715/ 6000AD0 : C808                		tst	#%00001000,r0		; bitDrwU
(2)  716/ 6000AD2 : 8900                		bt	.no_upd
(2)  717/ 6000AD4 : 2132                		mov	r3,@r1
(2)  718/ 6000AD6 :                     .no_upd:
(2)  719/ 6000AD6 :                     
(2)  720/ 6000AD6 :                     	; mach - Watchdog settings
(2)  721/ 6000AD6 :                     	;  r14 - Background buffer
(2)  722/ 6000AD6 :                     	;  r13 - Scroll area buffer
(2)  723/ 6000AD6 :                     	;  r12 - Layout data
(2)  724/ 6000AD6 :                     	;  r11 - Framebuffer X/Y pos
(2)  725/ 6000AD6 :                     	;  r10 - Layout width
(2)  726/ 6000AD6 :                     	;   r9 - Scroll width (next line)
(2)  727/ 6000AD6 :                     	;   r8 - Scroll FULL size (w*h)
(2)  728/ 6000AD6 :                     	;   r7 - Framebuffer BASE
(2)  729/ 6000AD6 :                     	;   r6 - Block data
(2)  730/ 6000AD6 :                     	;   r5 - Block timer
(2)  731/ 6000AD6 :                     	;   r4 - X or Y increment
(2)  732/ 6000AD6 :                     	;   r3 - Layout increment
(2)  733/ 6000AD6 :                     	;   r2 - Screen timers RLDU
(2)  734/ 6000AD6 :                     
(2)  735/ 6000AD6 : 5CE8                		mov	@(md_bg_low,r14),r12
(2)  736/ 6000AD8 : D323                		mov	#Cach_WdgBuffWr,r3
(2)  737/ 6000ADA : 5BD4                		mov	@(scrl_fbpos,r13),r11
(2)  738/ 6000ADC : E1F0                		mov	#-16,r1			; <-- manual size
(2)  739/ 6000ADE : 85E4                		mov.w	@(md_bg_w,r14),r0
(2)  740/ 6000AE0 : 6A0D                		extu.w	r0,r10
(2)  741/ 6000AE2 : 85D4                		mov.w	@(scrl_intrl_w,r13),r0
(2)  742/ 6000AE4 : 690D                		extu.w	r0,r9
(2)  743/ 6000AE6 : 58D3                		mov	@(scrl_intrl_size,r13),r8
(2)  744/ 6000AE8 : D020                		mov	#_framebuffer,r0
(2)  745/ 6000AEA : 57D5                		mov	@(scrl_fbdata,r13),r7
(2)  746/ 6000AEC : 370C                		add	r0,r7
(2)  747/ 6000AEE : 56EA                		mov	@(md_bg_blk,r14),r6
(2)  748/ 6000AF0 : E50F                		mov	#((240+16)/16)-1,r5		; Timer for L/R
(2)  749/ 6000AF2 : 85E2                		mov.w	@(scrl_fbpos_y,r14),r0
(2)  750/ 6000AF4 : 430A                		lds	r3,mach
(2)  751/ 6000AF6 : 600D                		extu.w	r0,r0
(2)  752/ 6000AF8 : 290E                		mulu	r0,r9
(2)  753/ 6000AFA : 001A                		sts	macl,r0
(2)  754/ 6000AFC : 2B19                		and	r1,r11
(2)  755/ 6000AFE :                     
(2)  756/ 6000AFE :                     	; L/R draw
(2)  757/ 6000AFE : 6DC3                		mov	r12,r13			; <-- copy layout
(2)  758/ 6000B00 : 85EA                		mov.w	@(md_bg_yinc_u,r14),r0	; Move top Y
(2)  759/ 6000B02 : E110                		mov	#16,r1
(2)  760/ 6000B04 : 201F                		muls	r1,r0
(2)  761/ 6000B06 : 001A                		sts	macl,r0
(2)  762/ 6000B08 : 4019                		shlr8	r0
(2)  763/ 6000B0A : 20AE                		mulu	r10,r0
(2)  764/ 6000B0C : 001A                		sts	macl,r0
(2)  765/ 6000B0E : 3D0C                		add	r0,r13
(2)  766/ 6000B10 :                     
(2)  767/ 6000B10 : 85E9                		mov.w	@(md_bg_xinc_r,r14),r0
(2)  768/ 6000B12 : 630F                		exts.w	r0,r3
(2)  769/ 6000B14 : 942C                		mov	#320,r4			; r4 - X increment
(2)  770/ 6000B16 : B009                		bsr	.x_draw
(2)  771/ 6000B18 : 0009                		nop
(2)  772/ 6000B1A : 85E8                		mov.w	@(md_bg_xinc_l,r14),r0
(2)  773/ 6000B1C : 630F                		exts.w	r0,r3
(2)  774/ 6000B1E : E400                		mov	#0,r4
(2)  775/ 6000B20 : B004                		bsr	.x_draw
(2)  776/ 6000B22 : 7204                		add	#4,r2			; <-- Next timer to check
(2)  777/ 6000B24 :                     
(2)  778/ 6000B24 :                     .lr_done:
(2)  779/ 6000B24 : 4F26                		lds	@r15+,pr
(2)  780/ 6000B26 : 000B                		rts
(2)  781/ 6000B28 : 0009                		nop
(2)  782/ 6000B2A :                     		align 4
(2)  783/ 6000B2C :                     
(2)  784/ 6000B2C :                     .x_draw:
(2)  785/ 6000B2C : 6022                		mov	@r2,r0
(2)  786/ 6000B2E : 2008                		tst	r0,r0
(2)  787/ 6000B30 : 8915                		bt	.no_timer
(2)  788/ 6000B32 : 4010                		dt	r0
(2)  789/ 6000B34 : 2202                		mov	r0,@r2
(2)  790/ 6000B36 :                     
(2)  791/ 6000B36 : E110                		mov	#16,r1
(2)  792/ 6000B38 : 231F                		muls	r1,r3
(2)  793/ 6000B3A : 031A                		sts	macl,r3
(2)  794/ 6000B3C : 4319                		shlr8	r3
(2)  795/ 6000B3E :                     
(2)  796/ 6000B3E : 61B3                		mov	r11,r1
(2)  797/ 6000B40 : 314C                		add	r4,r1
(2)  798/ 6000B42 : 3183                		cmp/ge	r8,r1
(2)  799/ 6000B44 : 8B00                		bf	.sz_safe
(2)  800/ 6000B46 : 3188                		sub	r8,r1
(2)  801/ 6000B48 :                     .sz_safe:
(2)  802/ 6000B48 : 000A                		sts	mach,r0
(2)  803/ 6000B4A : 2056                		mov	r5,@-r0
(2)  804/ 6000B4C : 2066                		mov	r6,@-r0
(2)  805/ 6000B4E : 2076                		mov	r7,@-r0
(2)  806/ 6000B50 : 2086                		mov	r8,@-r0
(2)  807/ 6000B52 : 2096                		mov	r9,@-r0
(2)  808/ 6000B54 : 20A6                		mov	r10,@-r0
(2)  809/ 6000B56 : 2016                		mov	 r1,@-r0	; <-- copy of r11
(2)  810/ 6000B58 : 61C3                		mov	r12,r1
(2)  811/ 6000B5A : 313C                		add	 r3,r1
(2)  812/ 6000B5C : 2016                		mov	 r1,@-r0
(2)  813/ 6000B5E :                     
(2)  814/ 6000B5E :                     .no_timer:
(2)  815/ 6000B5E : 000B                		rts
(2)  816/ 6000B60 : 0009                		nop
(2)  817/ 6000B62 :                     		align 4
(2)  818/ 6000B64 :                     
(2)  819/ 6000B64 : C000 0470 C000 0418 		ltorg
                    2400 0000 0140      
(2)  820/ 6000B72 :                     
(2)  821/ 6000B72 :                     ; ====================================================================
(2)  822/ 6000B72 :                     ; ----------------------------------------------------------------
(2)  823/ 6000B72 :                     ; Super sprites
(2)  824/ 6000B72 :                     ; ----------------------------------------------------------------
(2)  825/ 6000B72 :                     
(2)  826/ 6000B72 :                     ; --------------------------------------------------------
(2)  827/ 6000B72 :                     ; MarsVideo_SetSuperSpr
(2)  828/ 6000B72 :                     ;
(2)  829/ 6000B72 :                     ; Sets external screen variables for drawing the
(2)  830/ 6000B72 :                     ; Super Sprites (Cache'd variables)
(2)  831/ 6000B72 :                     ;
(2)  832/ 6000B72 :                     ; Input:
(2)  833/ 6000B72 :                     ; r1 - VRAM base
(2)  834/ 6000B72 :                     ; r2 - X VRAM position
(2)  835/ 6000B72 :                     ; r3 - Y position
(2)  836/ 6000B72 :                     ; r4 - Scrolling area Width
(2)  837/ 6000B72 :                     ; r5 - Scrolling area Height
(2)  838/ 6000B72 :                     ; r6 - Scroll area size
(2)  839/ 6000B72 :                     ; --------------------------------------------------------
(2)  840/ 6000B72 :                     
(2)  841/ 6000B72 :                     		align 4
(2)  842/ 6000B74 :                     MarsVideo_SetSuperSpr:
(2)  843/ 6000B74 : D704                		mov	#Cach_Intrl_Size+4,r7
(2)  844/ 6000B76 : 2766                		mov	r6,@-r7
(2)  845/ 6000B78 : 2756                		mov	r5,@-r7
(2)  846/ 6000B7A : 2746                		mov	r4,@-r7
(2)  847/ 6000B7C : 2736                		mov	r3,@-r7
(2)  848/ 6000B7E : 2726                		mov	r2,@-r7
(2)  849/ 6000B80 : 2716                		mov	r1,@-r7
(2)  850/ 6000B82 : 000B                		rts
(2)  851/ 6000B84 : 0009                		nop
(2)  852/ 6000B86 :                     		align 4
(2)  853/ 6000B88 : C000 0498           		ltorg
(2)  854/ 6000B8C :                     
(2)  855/ 6000B8C :                     ; --------------------------------------------------------
(2)  856/ 6000B8C :                     ; MarsVideo_SetSprFill
(2)  857/ 6000B8C :                     ;
(2)  858/ 6000B8C :                     ; Makes the redraw-boxes for Screen Mode 2
(2)  859/ 6000B8C :                     ; call this AFTER drawing the Super Sprites.
(2)  860/ 6000B8C :                     ;
(2)  861/ 6000B8C :                     ; Input:
(2)  862/ 6000B8C :                     ; r14 - Background buffer to use
(2)  863/ 6000B8C :                     ; r13 - Super sprites list
(2)  864/ 6000B8C :                     ; r12 - Block refill list
(2)  865/ 6000B8C :                     ; --------------------------------------------------------
(2)  866/ 6000B8C :                     
(2)  867/ 6000B8C :                     ; TODO: make a duplicate-block check.
(2)  868/ 6000B8C :                     
(2)  869/ 6000B8C :                     ; 		align 4
(2)  870/ 6000B8C :                     ; MarsVideo_SetSprFill:
(2)  871/ 6000B8C :                     ; 		mov	#$80000000,r11
(2)  872/ 6000B8C :                     ; 		mov	#$7FFFFFFF,r10
(2)  873/ 6000B8C :                     ; 		mov	#MAX_SUPERSPR,r9
(2)  874/ 6000B8C :                     ; 		mov	@(marsspr_data,r13),r0
(2)  875/ 6000B8C :                     ; 		tst	r0,r0
(2)  876/ 6000B8C :                     ; 		bt	.exit
(2)  877/ 6000B8C :                     ; .next_one:
(2)  878/ 6000B8C :                     ; 		cmp/pl	r9
(2)  879/ 6000B8C :                     ; 		bf	.exit
(2)  880/ 6000B8C :                     ; 		mov.w	@(marsspr_x,r13),r0		; r1 - X pos (left)
(2)  881/ 6000B8C :                     ; 		mov	r0,r1
(2)  882/ 6000B8C :                     ; 		mov.w	@(marsspr_y,r13),r0		; r2 - Y pos (top)
(2)  883/ 6000B8C :                     ; 		mov	r0,r2
(2)  884/ 6000B8C :                     ; 		mov.b	@(marsspr_xs,r13),r0		; r3 - XS (right)
(2)  885/ 6000B8C :                     ; 		extu.b	r0,r3
(2)  886/ 6000B8C :                     ; 		mov.b	@(marsspr_ys,r13),r0		; r4 - YS (bottom)
(2)  887/ 6000B8C :                     ; 		extu.b	r0,r4
(2)  888/ 6000B8C :                     ; 		mov.w	@(scrl_intrl_blk,r14),r0		; r5 - block size
(2)  889/ 6000B8C :                     ; 		mov	r0,r5
(2)  890/ 6000B8C :                     ; 		mov	@(scrl_xpos,r14),r6
(2)  891/ 6000B8C :                     ; 		shlr16	r6
(2)  892/ 6000B8C :                     ; 		mov	@(scrl_ypos,r14),r7
(2)  893/ 6000B8C :                     ; 		shlr16	r7
(2)  894/ 6000B8C :                     ; 		add	r1,r3
(2)  895/ 6000B8C :                     ; 		add	r2,r4
(2)  896/ 6000B8C :                     ;
(2)  897/ 6000B8C :                     ; 		mov	r5,r0		; Extra size add
(2)  898/ 6000B8C :                     ; 		shar	r0		; <-- TODO: lower = faster
(2)  899/ 6000B8C :                     ; 		sub	r0,r2
(2)  900/ 6000B8C :                     ; 		add	r0,r4
(2)  901/ 6000B8C :                     ; 		sub	r0,r1
(2)  902/ 6000B8C :                     ; 		add	r0,r3
(2)  903/ 6000B8C :                     ; 		mov	r5,r0		; BG X/Y add
(2)  904/ 6000B8C :                     ; 		dt	r0
(2)  905/ 6000B8C :                     ; 		and	r0,r6
(2)  906/ 6000B8C :                     ; 		and	r0,r7
(2)  907/ 6000B8C :                     ; 		add	r6,r1
(2)  908/ 6000B8C :                     ; 		add	r6,r3
(2)  909/ 6000B8C :                     ; 		add	r7,r2
(2)  910/ 6000B8C :                     ; 		add	r7,r4
(2)  911/ 6000B8C :                     ;
(2)  912/ 6000B8C :                     ; 	; TODO: X/Y REVERSE CHECK
(2)  913/ 6000B8C :                     ; 		mov	#320,r6
(2)  914/ 6000B8C :                     ; 		mov	#224,r7
(2)  915/ 6000B8C :                     ; 		add	r5,r6
(2)  916/ 6000B8C :                     ; 		add	r5,r7
(2)  917/ 6000B8C :                     ; 		cmp/pl	r1
(2)  918/ 6000B8C :                     ; 		bt	.xl_l
(2)  919/ 6000B8C :                     ; 		xor	r1,r1
(2)  920/ 6000B8C :                     ; .xl_l:
(2)  921/ 6000B8C :                     ; 		cmp/ge	r6,r1
(2)  922/ 6000B8C :                     ; 		bf	.xl_r
(2)  923/ 6000B8C :                     ; 		mov	r6,r1
(2)  924/ 6000B8C :                     ; .xl_r:
(2)  925/ 6000B8C :                     ; 		cmp/pl	r3
(2)  926/ 6000B8C :                     ; 		bt	.xr_l
(2)  927/ 6000B8C :                     ; 		xor	r3,r3
(2)  928/ 6000B8C :                     ; .xr_l:
(2)  929/ 6000B8C :                     ; 		cmp/ge	r6,r3
(2)  930/ 6000B8C :                     ; 		bf	.xr_r
(2)  931/ 6000B8C :                     ; 		mov	r6,r3
(2)  932/ 6000B8C :                     ; .xr_r:
(2)  933/ 6000B8C :                     ;
(2)  934/ 6000B8C :                     ; 		cmp/pl	r2
(2)  935/ 6000B8C :                     ; 		bt	.yt_l
(2)  936/ 6000B8C :                     ; 		xor	r2,r2
(2)  937/ 6000B8C :                     ; .yt_l:
(2)  938/ 6000B8C :                     ; 		cmp/ge	r7,r2
(2)  939/ 6000B8C :                     ; 		bf	.yt_r
(2)  940/ 6000B8C :                     ; 		mov	r7,r2
(2)  941/ 6000B8C :                     ; .yt_r:
(2)  942/ 6000B8C :                     ; 		cmp/pl	r4
(2)  943/ 6000B8C :                     ; 		bt	.yb_l
(2)  944/ 6000B8C :                     ; 		xor	r4,r4
(2)  945/ 6000B8C :                     ; .yb_l:
(2)  946/ 6000B8C :                     ; 		cmp/ge	r7,r4
(2)  947/ 6000B8C :                     ; 		bf	.yb_r
(2)  948/ 6000B8C :                     ; 		mov	r7,r4
(2)  949/ 6000B8C :                     ; .yb_r:
(2)  950/ 6000B8C :                     ; 		shlr2	r1
(2)  951/ 6000B8C :                     ; 		shlr2	r2
(2)  952/ 6000B8C :                     ; 		shlr2	r3
(2)  953/ 6000B8C :                     ; 		shlr2	r4
(2)  954/ 6000B8C :                     ; 		cmp/eq	r1,r3
(2)  955/ 6000B8C :                     ; 		bt	.bad_xy
(2)  956/ 6000B8C :                     ; 		cmp/eq	r2,r4
(2)  957/ 6000B8C :                     ; 		bt	.bad_xy
(2)  958/ 6000B8C :                     ;
(2)  959/ 6000B8C :                     ; 	; Set coords
(2)  960/ 6000B8C :                     ; 		mov	r1,r0
(2)  961/ 6000B8C :                     ; 		and	#$FF,r0
(2)  962/ 6000B8C :                     ; 		mov	r2,r6
(2)  963/ 6000B8C :                     ; 		shll8	r6
(2)  964/ 6000B8C :                     ; 		or	r6,r0
(2)  965/ 6000B8C :                     ; 		shll8	r4
(2)  966/ 6000B8C :                     ; 		shll16	r0
(2)  967/ 6000B8C :                     ; 		or	r4,r0
(2)  968/ 6000B8C :                     ; 		or	r3,r0
(2)  969/ 6000B8C :                     ; 		mov	@r12,r5
(2)  970/ 6000B8C :                     ; 		and	r10,r5		; Filter draw bits
(2)  971/ 6000B8C :                     ; 		cmp/eq	r5,r0
(2)  972/ 6000B8C :                     ; 		bt	.same_en
(2)  973/ 6000B8C :                     ; 		or	r11,r0		; Add draw bits
(2)  974/ 6000B8C :                     ; 		mov	r0,@r12
(2)  975/ 6000B8C :                     ; .same_en:
(2)  976/ 6000B8C :                     ; 		add	#4,r12
(2)  977/ 6000B8C :                     ; 		dt	r9
(2)  978/ 6000B8C :                     ; .bad_xy:
(2)  979/ 6000B8C :                     ; 		bra	.next_one
(2)  980/ 6000B8C :                     ; 		add	#sizeof_marsspr,r13
(2)  981/ 6000B8C :                     ; .exit:
(2)  982/ 6000B8C :                     ; 		rts
(2)  983/ 6000B8C :                     ; 		nop
(2)  984/ 6000B8C :                     ; 		align 4
(2)  985/ 6000B8C :                     ; 		ltorg
(2)  986/ 6000B8C :                     
(2)  987/ 6000B8C :                     ; ******************************
(2)  988/ 6000B8C :                     ; MarsVideo_DrawSuperSpr
(2)  989/ 6000B8C :                     ; is located on cache_m_scrlbg.asm
(2)  990/ 6000B8C :                     
(2)  991/ 6000B8C :                     ; ====================================================================
(2)  992/ 6000B8C :                     ; ----------------------------------------------------------------
(2)  993/ 6000B8C :                     ; 3D Section
(2)  994/ 6000B8C :                     ; ----------------------------------------------------------------
(2)  995/ 6000B8C :                     
(2)  996/ 6000B8C :                     ; Moved to cache_slv.asm
(2)  997/ 6000B8C :                     
(2)  998/ 6000B8C :                     ; ====================================================================
(2)  999/ 6000B8C :                     ; ----------------------------------------------------------------
(2) 1000/ 6000B8C :                     ; Other
(2) 1001/ 6000B8C :                     ; ----------------------------------------------------------------
(2) 1002/ 6000B8C :                     
(2) 1003/ 6000B8C :                     ; --------------------------------------------------------
(2) 1004/ 6000B8C :                     ; MarsVideo_SetWatchdog
(2) 1005/ 6000B8C :                     ;
(2) 1006/ 6000B8C :                     ; Prepares watchdog interrupt for Master
(2) 1007/ 6000B8C :                     ;
(2) 1008/ 6000B8C :                     ; Input:
(2) 1009/ 6000B8C :                     ; r1 - Watchdog CPU clock divider
(2) 1010/ 6000B8C :                     ; r2 - Watchdog Pre-timer
(2) 1011/ 6000B8C :                     ; --------------------------------------------------------
(2) 1012/ 6000B8C :                     
(2) 1013/ 6000B8C :                     		align 4
(2) 1014/ 6000B8C :                     MarsVideo_SetWatchdog:
(2) 1015/ 6000B8C : 0402                		stc	sr,r4
(2) 1016/ 6000B8E : 900F                		mov	#$F0,r0
(2) 1017/ 6000B90 : 400E                		ldc 	r0,sr
(2) 1018/ 6000B92 : 930E                		mov.l	#_CCR,r3				; Refresh Cache
(2) 1019/ 6000B94 : E008                		mov	#%00001000,r0				; Two-way mode
(2) 1020/ 6000B96 : 2301                		mov.w	r0,@r3
(2) 1021/ 6000B98 : E019                		mov	#%00011001,r0				; Cache purge / Two-way mode / Cache ON
(2) 1022/ 6000B9A : 2301                		mov.w	r0,@r3
(2) 1023/ 6000B9C : 930A                		mov	#$FFFFFE80,r3
(2) 1024/ 6000B9E : 900A                		mov.w	#$5A00,r0				; Watchdog pre-timer
(2) 1025/ 6000BA0 : 202B                		or	r2,r0
(2) 1026/ 6000BA2 : 2301                		mov.w	r0,@r3
(2) 1027/ 6000BA4 : 9008                		mov.w	#$A538,r0				; Enable Watchdog
(2) 1028/ 6000BA6 : 201B                		or	r1,r0
(2) 1029/ 6000BA8 : 2301                		mov.w	r0,@r3
(2) 1030/ 6000BAA : 440E                		ldc	r4,sr
(2) 1031/ 6000BAC : 000B                		rts
(2) 1032/ 6000BAE : 0009                		nop
(2) 1033/ 6000BB0 :                     		align 4
(2) 1034/ 6000BB0 : 00F0 FE92 FE80 5A00 		ltorg
                    A538                
(2) 1035/ 6000BBA :                     		align 4
(2) 1036/ 6000BBC :                     
(1) 1122/ 6000BBC :                     		include "system/mars/sound.asm"
(2)    1/ 6000BBC :                     ; ====================================================================
(2)    2/ 6000BBC :                     ; ----------------------------------------------------------------
(2)    3/ 6000BBC :                     ; 32X Sound
(2)    4/ 6000BBC :                     ; ----------------------------------------------------------------
(2)    5/ 6000BBC :                     
(2)    6/ 6000BBC :                     ; --------------------------------------------------------
(2)    7/ 6000BBC :                     ; Settings
(2)    8/ 6000BBC :                     ; --------------------------------------------------------
(2)    9/ 6000BBC :                     
(2)   10/ 6000BBC : =$7                 MAX_PWMCHNL	equ	7	; MAXIMUM usable PWM channels (TODO: keep it like this, might break the Z80 side...)
(2)   11/ 6000BBC : =$80                MAX_PWMBACKUP	equ	$80	; 1-bit sizes only. ($40,$80,$100...)
(2)   12/ 6000BBC : =$5622              SAMPLE_RATE	equ	22050
(2)   13/ 6000BBC :                     
(2)   14/ 6000BBC :                     ; --------------------------------------------------------
(2)   15/ 6000BBC :                     ; Structs
(2)   16/ 6000BBC :                     ; --------------------------------------------------------
(2)   17/ 6000BBC :                     
(2)   18/ 6000BBC :                     ; 32X sound channel
(2)   19/ 6000BBC : (MACRO)             		struct 0
(2)   19/ 6000BBC : =$6000BBC           GLBL_LASTPC     set *
(2)   19/   41F9C :                                     dephase
(2)   19/   41F9C : =$41F9C             GLBL_LASTORG    set *
(2)   19/       0 :                                     phase 0
(2)   20/       0 :                     mchnsnd_enbl	ds.l 1
(2)   21/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   22/       8 :                     mchnsnd_cchread	ds.l 1
(2)   23/       C :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   24/      10 :                     mchnsnd_start	ds.l 1
(2)   25/      14 :                     mchnsnd_end	ds.l 1
(2)   26/      18 :                     mchnsnd_loop	ds.l 1
(2)   27/      1C :                     mchnsnd_pitch	ds.l 1
(2)   28/      20 :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   29/      24 :                     mchnsnd_vol	ds.l 1
(2)   30/      28 :                     sizeof_sndchn	ds.l 0
(2)   31/      28 : (MACRO)             		finish
(2)   31/       0 :                                     !org GLBL_LASTORG
(2)   31/ 6000BBC :                                     phase GLBL_LASTPC
(2)   32/ 6000BBC :                     
(2)   33/ 6000BBC :                     ; ====================================================================
(2)   34/ 6000BBC :                     
(2)   35/ 6000BBC :                     ; *** The main PWM playback code (PWM interrupt) and the
(2)   36/ 6000BBC :                     ; channel list is located on the cache.asm file. ***
(2)   37/ 6000BBC :                     
(2)   38/ 6000BBC :                     ; ====================================================================
(2)   39/ 6000BBC :                     ; --------------------------------------------------------
(2)   40/ 6000BBC :                     ; Init Sound PWM
(2)   41/ 6000BBC :                     ;
(2)   42/ 6000BBC :                     ; Cycle register formula for
(2)   43/ 6000BBC :                     ; NTSC: ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   44/ 6000BBC :                     ; PAL:  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   45/ 6000BBC :                     ;
(2)   46/ 6000BBC :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   47/ 6000BBC :                     ; --------------------------------------------------------
(2)   48/ 6000BBC :                     
(2)   49/ 6000BBC :                     		align 4
(2)   50/ 6000BBC :                     MarsSound_Init:
(2)   51/ 6000BBC : 4F13                		stc	gbr,@-r15
(2)   52/ 6000BBE : D039                		mov	#_sysreg,r0
(2)   53/ 6000BC0 : 401E                		ldc	r0,gbr
(2)   54/ 6000BC2 : 9081                		mov	#$0105,r0				; Timing interval $01, output L/R
(2)   55/ 6000BC4 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   56/ 6000BC6 : 9080                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Samplerate
(2)   57/ 6000BC8 : C119                		mov.w	r0,@(cycle,gbr)
(2)   58/ 6000BCA : E001                		mov	#1,r0
(2)   59/ 6000BCC : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   60/ 6000BCE : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   61/ 6000BD0 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   62/ 6000BD2 : 4F17                		ldc	@r15+,gbr
(2)   63/ 6000BD4 : 000B                		rts
(2)   64/ 6000BD6 : 0009                		nop
(2)   65/ 6000BD8 :                     		align 4
(2)   66/ 6000BD8 :                     
(2)   67/ 6000BD8 :                     ; ====================================================================
(2)   68/ 6000BD8 :                     ; ----------------------------------------------------------------
(2)   69/ 6000BD8 :                     ; Subroutines
(2)   70/ 6000BD8 :                     ; ----------------------------------------------------------------
(2)   71/ 6000BD8 :                     
(2)   72/ 6000BD8 :                     ; --------------------------------------------------------
(2)   73/ 6000BD8 :                     ; MarsSound_SetPwm
(2)   74/ 6000BD8 :                     ;
(2)   75/ 6000BD8 :                     ; Sets new sound data to a channel slot, automaticly
(2)   76/ 6000BD8 :                     ; plays.
(2)   77/ 6000BD8 :                     ;
(2)   78/ 6000BD8 :                     ; Input:
(2)   79/ 6000BD8 :                     ; r1 | Channel
(2)   80/ 6000BD8 :                     ; r2 | Start address (SH2 AREA)
(2)   81/ 6000BD8 :                     ; r3 | End address (SH2 AREA)
(2)   82/ 6000BD8 :                     ; r4 | Loop address (SH2 AREA, ignored if loop bit isn't set)
(2)   83/ 6000BD8 :                     ; r5 | Pitch ($xxxxxx.xx, $100 default speed)
(2)   84/ 6000BD8 :                     ; r6 | Volume (Reverse: higher value is lower)
(2)   85/ 6000BD8 :                     ; r7 | Flags: %xxxxslLR
(2)   86/ 6000BD8 :                     ;      LR - Enable output to these speakers
(2)   87/ 6000BD8 :                     ;       l - LOOP flag
(2)   88/ 6000BD8 :                     ;       s - Sample data is in Stereo (16-bit)
(2)   89/ 6000BD8 :                     ;
(2)   90/ 6000BD8 :                     ; Breaks:
(2)   91/ 6000BD8 :                     ; r0,r8-r9,macl
(2)   92/ 6000BD8 :                     ; --------------------------------------------------------
(2)   93/ 6000BD8 :                     
(2)   94/ 6000BD8 :                     MarsSound_SetPwm:
(2)   95/ 6000BD8 : D833                		mov	#MarsSnd_PwmChnls,r8
(2)   96/ 6000BDA : E028                		mov 	#sizeof_sndchn,r0
(2)   97/ 6000BDC : 201E                		mulu	r1,r0
(2)   98/ 6000BDE : 001A                		sts	macl,r0
(2)   99/ 6000BE0 : 380C                		add 	r0,r8
(2)  100/ 6000BE2 : E000                		mov 	#0,r0
(2)  101/ 6000BE4 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  102/ 6000BE6 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  103/ 6000BE6 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  104/ 6000BE6 : 1857                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  105/ 6000BE8 : 1869                		mov 	r6,@(mchnsnd_vol,r8)
(2)  106/ 6000BEA : 1878                		mov 	r7,@(mchnsnd_flags,r8)
(2)  107/ 6000BEC : 6023                		mov 	r2,r0				; Set MSB
(2)  108/ 6000BEE : D92F                		mov 	#$FF000000,r9
(2)  109/ 6000BF0 : 2099                		and 	r9,r0
(2)  110/ 6000BF2 : 1803                		mov 	r0,@(mchnsnd_bank,r8)
(2)  111/ 6000BF4 : 6043                		mov 	r4,r0				; Set POINTS
(2)  112/ 6000BF6 : 88FF                		cmp/eq	#-1,r0
(2)  113/ 6000BF8 : 8900                		bt	.endmrk
(2)  114/ 6000BFA : 4018                		shll8	r0
(2)  115/ 6000BFC :                     .endmrk:
(2)  116/ 6000BFC : 1806                		mov	r0,@(mchnsnd_loop,r8)
(2)  117/ 6000BFE : 6033                		mov 	r3,r0
(2)  118/ 6000C00 : 4018                		shll8	r0
(2)  119/ 6000C02 : 1805                		mov	r0,@(mchnsnd_end,r8)
(2)  120/ 6000C04 : 6023                		mov 	r2,r0
(2)  121/ 6000C06 : 4018                		shll8	r0
(2)  122/ 6000C08 : 1804                		mov 	r0,@(mchnsnd_start,r8)
(2)  123/ 6000C0A : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  124/ 6000C0C : E001                		mov 	#1,r0
(2)  125/ 6000C0E : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  126/ 6000C10 : 000B                		rts
(2)  127/ 6000C12 : 0009                		nop
(2)  128/ 6000C14 :                     		align 4
(2)  129/ 6000C14 :                     
(2)  130/ 6000C14 :                     ; --------------------------------------------------------
(2)  131/ 6000C14 :                     ; MarsSound_SetPwmPitch
(2)  132/ 6000C14 :                     ;
(2)  133/ 6000C14 :                     ; Sets pitch data of a channel slot
(2)  134/ 6000C14 :                     ;
(2)  135/ 6000C14 :                     ; Input:
(2)  136/ 6000C14 :                     ; r1 | Channel
(2)  137/ 6000C14 :                     ; r2 | Pitch ($xxxxxx.xx, $100 default)
(2)  138/ 6000C14 :                     ;
(2)  139/ 6000C14 :                     ; Breaks:
(2)  140/ 6000C14 :                     ; r8,macl
(2)  141/ 6000C14 :                     ; --------------------------------------------------------
(2)  142/ 6000C14 :                     
(2)  143/ 6000C14 :                     MarsSound_SetPwmPitch:
(2)  144/ 6000C14 : D826                		mov	#MarsSnd_PwmChnls,r8
(2)  145/ 6000C16 : E028                		mov 	#sizeof_sndchn,r0
(2)  146/ 6000C18 : 201E                		mulu	r1,r0
(2)  147/ 6000C1A : 001A                		sts	macl,r0
(2)  148/ 6000C1C : 380C                		add 	r0,r8
(2)  149/ 6000C1E : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  150/ 6000C20 : 8801                		cmp/eq	#1,r0
(2)  151/ 6000C22 : 8B01                		bf	.off_1
(2)  152/ 6000C24 : 5081                		mov	@(mchnsnd_read,r8),r0
(2)  153/ 6000C26 : 1827                		mov	r2,@(mchnsnd_pitch,r8)
(2)  154/ 6000C28 :                     .off_1:
(2)  155/ 6000C28 : 000B                		rts
(2)  156/ 6000C2A : 0009                		nop
(2)  157/ 6000C2C :                     		align 4
(2)  158/ 6000C2C :                     
(2)  159/ 6000C2C :                     ; --------------------------------------------------------
(2)  160/ 6000C2C :                     ; MarsSound_SetVolume
(2)  161/ 6000C2C :                     ;
(2)  162/ 6000C2C :                     ; Changes the volume of a channel slot
(2)  163/ 6000C2C :                     ;
(2)  164/ 6000C2C :                     ; Input:
(2)  165/ 6000C2C :                     ; r1 | Channel
(2)  166/ 6000C2C :                     ; r2 | Volume (in reverse: higher value is low)
(2)  167/ 6000C2C :                     ;
(2)  168/ 6000C2C :                     ; Breaks:
(2)  169/ 6000C2C :                     ; r8,macl
(2)  170/ 6000C2C :                     ; --------------------------------------------------------
(2)  171/ 6000C2C :                     
(2)  172/ 6000C2C :                     MarsSound_SetVolume:
(2)  173/ 6000C2C : D821                		mov	#MarsSnd_PwmChnls,r8
(2)  174/ 6000C2E : E028                		mov 	#sizeof_sndchn,r0
(2)  175/ 6000C30 : 201E                		mulu	r1,r0
(2)  176/ 6000C32 : 001A                		sts	macl,r0
(2)  177/ 6000C34 : 380C                		add 	r0,r8
(2)  178/ 6000C36 : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  179/ 6000C38 : 8801                		cmp/eq	#1,r0
(2)  180/ 6000C3A : 8B01                		bf	.off_1
(2)  181/ 6000C3C : 6023                		mov	r2,r0
(2)  182/ 6000C3E : 1809                		mov	r0,@(mchnsnd_vol,r8)
(2)  183/ 6000C40 :                     .off_1:
(2)  184/ 6000C40 : 000B                		rts
(2)  185/ 6000C42 : 0009                		nop
(2)  186/ 6000C44 :                     		align 4
(2)  187/ 6000C44 :                     
(2)  188/ 6000C44 :                     ; --------------------------------------------------------
(2)  189/ 6000C44 :                     ; MarsSound_PwmEnable
(2)  190/ 6000C44 :                     ;
(2)  191/ 6000C44 :                     ; Turns ON or OFF Current PWM slot
(2)  192/ 6000C44 :                     ;
(2)  193/ 6000C44 :                     ; Input:
(2)  194/ 6000C44 :                     ; r1 | Channel
(2)  195/ 6000C44 :                     ; r2 | Enable/Disable
(2)  196/ 6000C44 :                     ;
(2)  197/ 6000C44 :                     ; Breaks:
(2)  198/ 6000C44 :                     ; r8,macl
(2)  199/ 6000C44 :                     ; --------------------------------------------------------
(2)  200/ 6000C44 :                     
(2)  201/ 6000C44 :                     MarsSound_PwmEnable:
(2)  202/ 6000C44 : D81C                		mov	#MarsSnd_PwmChnls,r8
(2)  203/ 6000C46 : E028                		mov 	#sizeof_sndchn,r0
(2)  204/ 6000C48 : 201E                		mulu	r1,r0
(2)  205/ 6000C4A : 001A                		sts	macl,r0
(2)  206/ 6000C4C : 380C                		add 	r0,r8
(2)  207/ 6000C4E : 1820                		mov 	r2,@(mchnsnd_enbl,r8)
(2)  208/ 6000C50 :                     ; 		mov 	#0,r0
(2)  209/ 6000C50 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  210/ 6000C50 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  211/ 6000C50 : 000B                		rts
(2)  212/ 6000C52 : 0009                		nop
(2)  213/ 6000C54 :                     		align 4
(2)  214/ 6000C54 :                     
(2)  215/ 6000C54 :                     ; --------------------------------------------------------
(2)  216/ 6000C54 :                     ; MarsSound_Refill
(2)  217/ 6000C54 :                     ;
(2)  218/ 6000C54 :                     ; Call this before the 68K side closes ROM access
(2)  219/ 6000C54 :                     ; (before 68k side sets RV=1)
(2)  220/ 6000C54 :                     ;
(2)  221/ 6000C54 :                     ; Breaks:
(2)  222/ 6000C54 :                     ; r1-r8
(2)  223/ 6000C54 :                     ;
(2)  224/ 6000C54 :                     ; NOTE:
(2)  225/ 6000C54 :                     ; The trick here is to keep PWM interrupt enabled
(2)  226/ 6000C54 :                     ; while filling the backup data
(2)  227/ 6000C54 :                     ; --------------------------------------------------------
(2)  228/ 6000C54 :                     
(2)  229/ 6000C54 :                     MarsSnd_Refill:
(2)  230/ 6000C54 : D819                		mov	#MarsSnd_PwmChnls,r8
(2)  231/ 6000C56 : E607                		mov	#MAX_PWMCHNL,r6
(2)  232/ 6000C58 : E728                		mov	#sizeof_sndchn,r7
(2)  233/ 6000C5A : D519                		mov	#MarsSnd_PwmCache,r5
(2)  234/ 6000C5C :                     .next_one:
(2)  235/ 6000C5C : 5080                		mov	@(mchnsnd_enbl,r8),r0	; This channel is active?
(2)  236/ 6000C5E : 8801                		cmp/eq	#1,r0
(2)  237/ 6000C60 : 8B19                		bf	.not_enbl
(2)  238/ 6000C62 : 5083                		mov	@(mchnsnd_bank,r8),r0	; ROM area?
(2)  239/ 6000C64 : D217                		mov	#CS1,r2
(2)  240/ 6000C66 : 3020                		cmp/eq	r2,r0
(2)  241/ 6000C68 : 8B15                		bf	.not_enbl
(2)  242/ 6000C6A : E100                		mov	#0,r1			; Reset backup LSB
(2)  243/ 6000C6C : 1812                		mov	r1,@(mchnsnd_cchread,r8)
(2)  244/ 6000C6E : 6153                		mov	r5,r1
(2)  245/ 6000C70 : E220                		mov	#MAX_PWMBACKUP/4,r2	; Max bytes / 4
(2)  246/ 6000C72 : 5481                		mov	@(mchnsnd_read,r8),r4	; r4 - OLD READ pos
(2)  247/ 6000C74 : 6343                		mov	r4,r3
(2)  248/ 6000C76 : 4319                		shlr8	r3
(2)  249/ 6000C78 : 330C                		add	r0,r3
(2)  250/ 6000C7A :                     
(2)  251/ 6000C7A :                     	; TODO: luego checar si ya puedo usar LONGs.
(2)  252/ 6000C7A :                     .copy_now:
(2)  253/ 6000C7A :                     	rept 4-1
(2)  254/ 6000C7A :                     		mov.b	@r3+,r0		; byte by byte...
(2)  255/ 6000C7A :                     		mov.b	r0,@r1
(2)  256/ 6000C7A :                     		add	#1,r1
(2)  257/ 6000C7A :                     	endm
(2)  254/ 6000C7A : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  255/ 6000C7C : 2100                		mov.b	r0,@r1
(2)  256/ 6000C7E : 7101                		add	#1,r1
(2)  254/ 6000C80 : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  255/ 6000C82 : 2100                		mov.b	r0,@r1
(2)  256/ 6000C84 : 7101                		add	#1,r1
(2)  254/ 6000C86 : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  255/ 6000C88 : 2100                		mov.b	r0,@r1
(2)  256/ 6000C8A : 7101                		add	#1,r1
(2)  258/ 6000C8C : 6034                		mov.b	@r3+,r0
(2)  259/ 6000C8E : 2100                		mov.b	r0,@r1
(2)  260/ 6000C90 : 4210                		dt	r2
(2)  261/ 6000C92 : 8FF2                		bf/s	.copy_now
(2)  262/ 6000C94 : 7101                		add	#1,r1
(2)  263/ 6000C96 :                     .not_enbl:
(2)  264/ 6000C96 : 9019                		mov	#MAX_PWMBACKUP,r0
(2)  265/ 6000C98 : 350C                		add	r0,r5
(2)  266/ 6000C9A : 4610                		dt	r6
(2)  267/ 6000C9C : 8FDE                		bf/s	.next_one
(2)  268/ 6000C9E : 387C                		add	r7,r8
(2)  269/ 6000CA0 : 000B                		rts
(2)  270/ 6000CA2 : 0009                		nop
(2)  271/ 6000CA4 :                     		align 4
(2)  272/ 6000CA4 :                     
(2)  273/ 6000CA4 :                     ; ====================================================================
(2)  274/ 6000CA4 :                     
(2)  275/ 6000CA4 : 2000 4000 C000 05D8 		ltorg			; Save literals
                    FF00 0000 C000 05D8 
                    C000 05D8 C000 05D8 
                    C000 05D8 2600 7C90 
                    0200 0000 0105 0415 
                    0080                
(2)  276/ 6000CCE :                     
(1) 1123/ 6000CCE :                     		align 4
(1) 1124/ 6000CD0 :                     
(1) 1125/ 6000CD0 :                     ; ====================================================================
(1) 1126/ 6000CD0 :                     ; ----------------------------------------------------------------
(1) 1127/ 6000CD0 :                     ; Master entry
(1) 1128/ 6000CD0 :                     ; ----------------------------------------------------------------
(1) 1129/ 6000CD0 :                     
(1) 1130/ 6000CD0 :                     		align 4
(1) 1131/ 6000CD0 :                     SH2_M_Entry:
(1) 1132/ 6000CD0 : DF20                		mov	#STACK_MSTR,r15			; Reset stack
(1) 1133/ 6000CD2 : D021                		mov	#SH2_Master,r0			; Reset vbr
(1) 1134/ 6000CD4 : 402E                		ldc	r0,vbr
(1) 1135/ 6000CD6 : 914D                		mov.l	#_FRT,r1
(1) 1136/ 6000CD8 : E000                		mov	#0,r0
(1) 1137/ 6000CDA : 8010                		mov.b	r0,@(0,r1)
(1) 1138/ 6000CDC : E0E2                		mov	#$FFFFFFE2,r0
(1) 1139/ 6000CDE : 8017                		mov.b	r0,@(7,r1)
(1) 1140/ 6000CE0 : E000                		mov	#0,r0
(1) 1141/ 6000CE2 : 8014                		mov.b	r0,@(4,r1)
(1) 1142/ 6000CE4 : E001                		mov	#1,r0
(1) 1143/ 6000CE6 : 8015                		mov.b	r0,@(5,r1)
(1) 1144/ 6000CE8 : E000                		mov	#0,r0
(1) 1145/ 6000CEA : 8016                		mov.b	r0,@(6,r1)
(1) 1146/ 6000CEC : E001                		mov	#1,r0
(1) 1147/ 6000CEE : 8011                		mov.b	r0,@(1,r1)
(1) 1148/ 6000CF0 : E000                		mov	#0,r0
(1) 1149/ 6000CF2 : 8013                		mov.b	r0,@(3,r1)
(1) 1150/ 6000CF4 : 8012                		mov.b	r0,@(2,r1)
(1) 1151/ 6000CF6 :                     ; 		mov	#$FFFFFFF2,r0			; <-- not needed here
(1) 1152/ 6000CF6 :                     ; 		mov.b	r0,@(7,r1)
(1) 1153/ 6000CF6 :                     ; 		mov	#0,r0
(1) 1154/ 6000CF6 :                     ; 		mov.b	r0,@(4,r1)
(1) 1155/ 6000CF6 :                     ; 		mov	#1,r0
(1) 1156/ 6000CF6 :                     ; 		mov.b	r0,@(5,r1)
(1) 1157/ 6000CF6 :                     ; 		mov	#$FFFFFFE2,r0
(1) 1158/ 6000CF6 :                     ; 		mov.b	r0,@(7,r1)
(1) 1159/ 6000CF6 : 903E                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1) 1160/ 6000CF8 : E150                		mov     #%0101<<4,r1
(1) 1161/ 6000CFA : 2011                		mov.w   r1,@r0
(1) 1162/ 6000CFC : 903C                		mov.l   #$FFFFFEE4,r0
(1) 1163/ 6000CFE : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer: VBR + (this/4) (WITV)
(1) 1164/ 6000D00 : 4118                		shll8   r1
(1) 1165/ 6000D02 : 2011                		mov.w   r1,@r0
(1) 1166/ 6000D04 : D015                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1167/ 6000D06 : 401E                		ldc	r0,gbr
(1) 1168/ 6000D08 : D015                		mov	#MarsVideo_Init,r0		; Init Video
(1) 1169/ 6000D0A : 400B                		jsr	@r0
(1) 1170/ 6000D0C : 0009                		nop
(1) 1171/ 6000D0E :                     
(1) 1172/ 6000D0E :                     ; ====================================================================
(1) 1173/ 6000D0E :                     ; ----------------------------------------------------------------
(1) 1174/ 6000D0E :                     ; Master main code
(1) 1175/ 6000D0E :                     ;
(1) 1176/ 6000D0E :                     ; This CPU is exclusively used for the visuals:
(1) 1177/ 6000D0E :                     ; software-rendered backgrounds, sprites and polygons.
(1) 1178/ 6000D0E :                     ; ----------------------------------------------------------------
(1) 1179/ 6000D0E :                     
(1) 1180/ 6000D0E :                     ; HARDWARE NOTE: If the 68k and/or Z80 requested any of both
(1) 1181/ 6000D0E :                     ; CMD interrupts in the middle of Soft-Reset (RESET button) the
(1) 1182/ 6000D0E :                     ; interrupt will get stuck on "pending" and any new requests will
(1) 1183/ 6000D0E :                     ; not gonna happen.
(1) 1184/ 6000D0E :                     ; The workaround is to write intmask to 0 then set back again the
(1) 1185/ 6000D0E :                     ; interrupt bits that you are going to use.
(1) 1186/ 6000D0E :                     ; (this applies for BOTH SH2)
(1) 1187/ 6000D0E :                     
(1) 1188/ 6000D0E :                     SH2_M_HotStart:
(1) 1189/ 6000D0E : 9134                		mov	#$FFFFFE80,r1
(1) 1190/ 6000D10 : 9034                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1191/ 6000D12 : 2101                		mov.w	r0,@r1
(1) 1192/ 6000D14 : 9133                		mov	#_CCR,r1		; Reset CACHE
(1) 1193/ 6000D16 : E010                		mov	#$10,r0
(1) 1194/ 6000D18 : 2100                		mov.b	r0,@r1
(1) 1195/ 6000D1A : 0009                		nop
(1) 1196/ 6000D1C : 0009                		nop
(1) 1197/ 6000D1E : 0009                		nop
(1) 1198/ 6000D20 : 0009                		nop
(1) 1199/ 6000D22 : 0009                		nop
(1) 1200/ 6000D24 : 200A                		xor	r0,r0
(1) 1201/ 6000D26 : D20F                		mov	#_sysreg+comm12,r2
(1) 1202/ 6000D28 : 2201                		mov.w	r0,@r2
(1) 1203/ 6000D2A : E009                		mov	#9,r0
(1) 1204/ 6000D2C : 2100                		mov.b	r0,@r1
(1) 1205/ 6000D2E : BD34                		bsr	Mars_ClearCacheRam
(1) 1206/ 6000D30 : 0009                		nop
(1) 1207/ 6000D32 : D10D                		mov	#_sysreg,r1
(1) 1208/ 6000D34 : 6011                		mov.w	@r1,r0
(1) 1209/ 6000D36 : CB02                		or	#CMDIRQ_ON,r0
(1) 1210/ 6000D38 : 2101                		mov.w	r0,@r1
(1) 1211/ 6000D3A :                     ;     		mov	#0,r0
(1) 1212/ 6000D3A :                     ; 		mov.w	r0,@(vresintclr,r1)
(1) 1213/ 6000D3A :                     ; 		mov.w	r0,@(vintclr,r1)
(1) 1214/ 6000D3A :                     ; 		mov.w	r0,@(hintclr,r1)
(1) 1215/ 6000D3A :                     ; 		mov.w	r0,@(cmdintclr,r1)
(1) 1216/ 6000D3A :                     ; 		mov.w	r0,@(pwmintclr,r1)
(1) 1217/ 6000D3A : D10C                		mov	#_sysreg+comm8,r1
(1) 1218/ 6000D3C : 6011                		mov.w	@r1,r0
(1) 1219/ 6000D3E : 2008                .wait_md:	tst	r0,r0
(1) 1220/ 6000D40 : 8BFD                		bf	.wait_md
(1) 1221/ 6000D42 : D10B                		mov	#_sysreg+comm14,r1
(1) 1222/ 6000D44 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1223/ 6000D46 : 2008                		tst	r0,r0
(1) 1224/ 6000D48 : 8BFC                		bf	.wait_slv
(1) 1225/ 6000D4A : E020                		mov	#$20,r0				; Interrupts ON
(1) 1226/ 6000D4C : 400E                		ldc	r0,sr
(1) 1227/ 6000D4E : A017                		bra	master_loop
(1) 1228/ 6000D50 : 0009                		nop
(1) 1229/ 6000D52 :                     		align 4
(1) 1230/ 6000D54 : 0604 0000 0600 0000 		ltorg
                    2600 7B90 0600 07E0 
                    2000 402C 2000 4000 
                    2000 4028 2000 402E 
                    FE10 FEE2 FEE4 FE80 
                    A518 FE92           
(1) 1231/ 6000D80 :                     
(1) 1232/ 6000D80 :                     ; 		mov	#1,r0
(1) 1233/ 6000D80 :                     ; 		mov.w	r0,@(marsGbl_WaveEnable,gbr)	; *** TEMPORAL
(1) 1234/ 6000D80 :                     ; 		mov	#16,r0
(1) 1235/ 6000D80 :                     ; 		mov.w	r0,@(marsGbl_WaveSpd,gbr)	; ***
(1) 1236/ 6000D80 :                     ; 		mov	#8,r0
(1) 1237/ 6000D80 :                     ; 		mov.w	r0,@(marsGbl_WaveMax,gbr)	; ***
(1) 1238/ 6000D80 :                     ; 		mov	#16,r0
(1) 1239/ 6000D80 :                     ; 		mov.w	r0,@(marsGbl_WaveDeform,gbr)	; ***
(1) 1240/ 6000D80 :                     
(1) 1241/ 6000D80 :                     ; ----------------------------------------------------------------
(1) 1242/ 6000D80 :                     ; MASTER CPU loop
(1) 1243/ 6000D80 :                     ;
(1) 1244/ 6000D80 :                     ; comm12:
(1) 1245/ 6000D80 :                     ; bssscccc ii000lll
(1) 1246/ 6000D80 :                     ;
(1) 1247/ 6000D80 :                     ; b - Busy bit, this CPU can't be interrupted by request.
(1) 1248/ 6000D80 :                     ; s - Status bits for some CMD interrupt tasks
(1) 1249/ 6000D80 :                     ; c - Command number for CMD interrupt
(1) 1250/ 6000D80 :                     ; i - Screen initialization bit(s)
(1) 1251/ 6000D80 :                     ; l - MAIN LOOP command/task. for any mode change add $80 (i bit)
(1) 1252/ 6000D80 :                     ; ----------------------------------------------------------------
(1) 1253/ 6000D80 :                     
(1) 1254/ 6000D80 :                     		align 4
(1) 1255/ 6000D80 :                     master_loop:
(1) 1256/ 6000D80 :                     ; 		mov	#_DMASOURCE0,r3		; *** DOESNT WORK ***
(1) 1257/ 6000D80 :                     ; 		mov	@($C,r3),r0		; DMA enabled?
(1) 1258/ 6000D80 :                     ; 		tst	#%01,r0
(1) 1259/ 6000D80 :                     ; 		bt	.no_dma
(1) 1260/ 6000D80 :                     ; .wait_dma:	mov	@($C,r3),r0		; DMA active?
(1) 1261/ 6000D80 :                     ; 		tst	#%10,r0
(1) 1262/ 6000D80 :                     ; 		bt	.wait_dma
(1) 1263/ 6000D80 :                     ; 		mov	#0,r0			; _DMAOPERATION = 0
(1) 1264/ 6000D80 :                     ; 		mov	r0,@($30,r3)
(1) 1265/ 6000D80 :                     ; 		mov	#%0100010011100000,r0	; Transfer mode + DMA enable = 0
(1) 1266/ 6000D80 :                     ; 		mov	r0,@($C,r3)
(1) 1267/ 6000D80 :                     ; .no_dma:
(1) 1268/ 6000D80 :                     
(1) 1275/ 6000D80 :                     
(1) 1276/ 6000D80 :                     	; ---------------------------------------
(1) 1277/ 6000D80 :                     	; Wait for VBlank
(1) 1278/ 6000D80 :                     	; ---------------------------------------
(1) 1279/ 6000D80 :                     
(1) 1280/ 6000D80 : D122                		mov	#_vdpreg,r1			; Check if we got here
(1) 1281/ 6000D82 : 841A                -		mov.b	@(vdpsts,r1),r0			; too late.
(1) 1282/ 6000D84 : C880                		tst	#VBLK,r0
(1) 1283/ 6000D86 : 89FC                		bt	-
(1) 1284/ 6000D88 : C517                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first
(1) 1285/ 6000D8A : D121                		mov	#_vdpreg+shift,r1		; For the indexed-scrolling mode.
(1) 1286/ 6000D8C : C901                		and	#1,r0
(1) 1287/ 6000D8E : 2101                		mov.w	r0,@r1
(1) 1288/ 6000D90 : D120                		mov	#RAM_Mars_DreqRead+Dreq_Palette,r1
(1) 1289/ 6000D92 : D221                		mov	#_palette,r2
(1) 1290/ 6000D94 : E320                 		mov	#(256/8),r3
(1) 1291/ 6000D96 :                     .copy_pal:
(1) 1292/ 6000D96 :                     	rept 4
(1) 1293/ 6000D96 :                     		mov	@r1+,r0				; Copy as LONGs, works on HW
(1) 1294/ 6000D96 :                     		mov	r0,@r2
(1) 1295/ 6000D96 :                     		add	#4,r2
(1) 1296/ 6000D96 :                     	endm
(1) 1293/ 6000D96 : 6016                		mov	@r1+,r0				; Copy as LONGs, works on HW
(1) 1294/ 6000D98 : 2202                		mov	r0,@r2
(1) 1295/ 6000D9A : 7204                		add	#4,r2
(1) 1293/ 6000D9C : 6016                		mov	@r1+,r0				; Copy as LONGs, works on HW
(1) 1294/ 6000D9E : 2202                		mov	r0,@r2
(1) 1295/ 6000DA0 : 7204                		add	#4,r2
(1) 1293/ 6000DA2 : 6016                		mov	@r1+,r0				; Copy as LONGs, works on HW
(1) 1294/ 6000DA4 : 2202                		mov	r0,@r2
(1) 1295/ 6000DA6 : 7204                		add	#4,r2
(1) 1293/ 6000DA8 : 6016                		mov	@r1+,r0				; Copy as LONGs, works on HW
(1) 1294/ 6000DAA : 2202                		mov	r0,@r2
(1) 1295/ 6000DAC : 7204                		add	#4,r2
(1) 1297/ 6000DAE : 4310                		dt	r3
(1) 1298/ 6000DB0 : 8BF1                		bf	.copy_pal
(1) 1299/ 6000DB2 :                     .not_ready:
(1) 1300/ 6000DB2 : D11A                		mov	#_sysreg+comm12+1,r1		; Clear comm R bit
(1) 1301/ 6000DB4 : 6010                		mov.b	@r1,r0				; this tells to 68k that the frame is ready.
(1) 1302/ 6000DB6 : C9BF                		and	#%10111111,r0
(1) 1303/ 6000DB8 : 2100                		mov.b	r0,@r1
(1) 1304/ 6000DBA :                     
(1) 1305/ 6000DBA : 4F03                		stc	sr,@-r15
(1) 1306/ 6000DBC : 9038                		mov	#$F0,r0
(1) 1307/ 6000DBE : 400E                		ldc	r0,sr
(1) 1308/ 6000DC0 : D117                		mov	#RAM_Mars_DreqDma,r1
(1) 1309/ 6000DC2 : D218                		mov	#RAM_Mars_DreqRead,r2
(1) 1310/ 6000DC4 : 9335                		mov	#sizeof_dreq/4,r3
(1) 1311/ 6000DC6 :                     .copy_safe:
(1) 1312/ 6000DC6 : 6016                		mov	@r1+,r0
(1) 1313/ 6000DC8 : 2202                		mov	r0,@r2
(1) 1314/ 6000DCA : 4310                		dt	r3
(1) 1315/ 6000DCC : 8FFB                		bf/s	.copy_safe
(1) 1316/ 6000DCE : 7204                		add	#4,r2
(1) 1317/ 6000DD0 : 4F07                		ldc	@r15+,sr
(1) 1318/ 6000DD2 :                     
(1) 1319/ 6000DD2 :                     ; ---------------------------------------
(1) 1320/ 6000DD2 :                     ; Init/Loop the current mode
(1) 1321/ 6000DD2 :                     ;
(1) 1322/ 6000DD2 :                     ; Init uses 2 separate jumps in case
(1) 1323/ 6000DD2 :                     ; some routines need to be called twice.
(1) 1324/ 6000DD2 :                     ; (Framebuffer updates)
(1) 1325/ 6000DD2 :                     ;
(1) 1326/ 6000DD2 :                     ; NOTE:
(1) 1327/ 6000DD2 :                     ; The LOOP part starts very early at
(1) 1328/ 6000DD2 :                     ; VBlank, add some work to make sure it
(1) 1329/ 6000DD2 :                     ; exits on display.
(1) 1330/ 6000DD2 :                     ; ---------------------------------------
(1) 1331/ 6000DD2 :                     
(1) 1332/ 6000DD2 : D315                		mov	#mstr_gfxlist,r3		; Default LOOP points
(1) 1333/ 6000DD4 : D215                		mov	#_sysreg+comm12,r2
(1) 1334/ 6000DD6 : 6021                		mov.w	@r2,r0				; r0 - bit check
(1) 1335/ 6000DD8 : 6103                		mov	r0,r1				; r1 - current mode
(1) 1336/ 6000DDA : C8C0                		tst	#%11000000,r0			; Init counter?
(1) 1337/ 6000DDC : 8907                		bt	.no_init
(1) 1338/ 6000DDE : E440                		mov	#%01000000,r4
(1) 1339/ 6000DE0 : 6021                		mov.w	@r2,r0				; Decrement init bits
(1) 1340/ 6000DE2 : 3048                		sub	r4,r0
(1) 1341/ 6000DE4 : 2201                		mov.w	r0,@r2
(1) 1342/ 6000DE6 : C840                		tst	#%01000000,r0
(1) 1343/ 6000DE8 : 8901                		bt	.no_init
(1) 1344/ 6000DEA : E002                		mov	#2,r0				; Set Init timer.
(1) 1345/ 6000DEC : C118                		mov.w	r0,@(marsGbl_MdDrawTmr,gbr)
(1) 1346/ 6000DEE :                     .no_init:
(1) 1347/ 6000DEE : C518                		mov.w	@(marsGbl_MdDrawTmr,gbr),r0	; r2 - Add init timer
(1) 1348/ 6000DF0 : 6203                		mov	r0,r2
(1) 1349/ 6000DF2 : 2008                		tst	r0,r0
(1) 1350/ 6000DF4 : 8901                		bt	.tmr_off
(1) 1351/ 6000DF6 : 4010                		dt	r0
(1) 1352/ 6000DF8 : C118                		mov.w	r0,@(marsGbl_MdDrawTmr,gbr)
(1) 1353/ 6000DFA :                     .tmr_off:
(1) 1354/ 6000DFA : 4208                		shll2	r2
(1) 1355/ 6000DFC : 6013                		mov	r1,r0
(1) 1356/ 6000DFE : C907                		and	#%111,r0
(1) 1357/ 6000E00 : 4008                		shll2	r0
(1) 1358/ 6000E02 : 4008                		shll2	r0
(1) 1359/ 6000E04 : 302C                		add	r2,r0
(1) 1360/ 6000E06 : 033E                		mov	@(r3,r0),r3
(1) 1361/ 6000E08 : 432B                		jmp	@r3
(1) 1362/ 6000E0A : 0009                		nop
(1) 1363/ 6000E0C :                     		align 4
(1) 1364/ 6000E0C : 2000 4100 2000 4102 		ltorg
                    2600 74F0 2000 4200 
                    2000 402D 2600 6E50 
                    2600 74F0 0600 0E34 
                    2000 402C 00F0 01A8 
(1) 1365/ 6000E34 :                     
(1) 1366/ 6000E34 :                     ; ---------------------------------------
(1) 1367/ 6000E34 :                     ; jump lists
(1) 1368/ 6000E34 :                     ;
(1) 1369/ 6000E34 :                     ; NOTE: the LOOP parts starts at
(1) 1370/ 6000E34 :                     ; very top of VBlank.
(1) 1371/ 6000E34 :                     
(1) 1372/ 6000E34 :                     		align 4
(1) 1373/ 6000E34 : 0600 0ECE           mstr_gfxlist:	dc.l mstr_gfx0_loop	; $00
(1) 1374/ 6000E38 : 0600 0EB8           		dc.l mstr_gfx0_init_2
(1) 1375/ 6000E3C : 0600 0EBE           		dc.l mstr_gfx0_init_1
(1) 1376/ 6000E40 : 0600 0EB4           mstr_gfxlist_h:	dc.l mstr_gfx0_hblk
(1) 1377/ 6000E44 : 0600 0F06           		dc.l mstr_gfx1_loop	; $01
(1) 1378/ 6000E48 : 0600 0EF4           		dc.l mstr_gfx1_init_2
(1) 1379/ 6000E4C : 0600 0ED8           		dc.l mstr_gfx1_init_1
(1) 1380/ 6000E50 : 0600 0ED4           		dc.l mstr_gfx1_hblk
(1) 1381/ 6000E54 : 0600 0F74           		dc.l mstr_gfx2_loop	; $02
(1) 1382/ 6000E58 : 0600 0F64           		dc.l mstr_gfx2_init_2
(1) 1383/ 6000E5C : 0600 0F3C           		dc.l mstr_gfx2_init_1
(1) 1384/ 6000E60 : 0600 0F38           		dc.l mstr_gfx2_hblk
(1) 1385/ 6000E64 : 0600 104E           		dc.l mstr_gfx3_loop	; $03
(1) 1386/ 6000E68 : 0600 1040           		dc.l mstr_gfx3_init_2
(1) 1387/ 6000E6C : 0600 1024           		dc.l mstr_gfx3_init_1
(1) 1388/ 6000E70 : 0600 101E           		dc.l mstr_gfx3_hblk
(1) 1389/ 6000E74 : 0600 0ECE           		dc.l mstr_gfx0_loop	; $04
(1) 1390/ 6000E78 : 0600 0EB8           		dc.l mstr_gfx0_init_2
(1) 1391/ 6000E7C : 0600 0EBE           		dc.l mstr_gfx0_init_1
(1) 1392/ 6000E80 : 0600 0EB4           		dc.l mstr_gfx0_hblk
(1) 1393/ 6000E84 : 0600 0ECE           		dc.l mstr_gfx0_loop	; $05
(1) 1394/ 6000E88 : 0600 0EB8           		dc.l mstr_gfx0_init_2
(1) 1395/ 6000E8C : 0600 0EBE           		dc.l mstr_gfx0_init_1
(1) 1396/ 6000E90 : 0600 0EB4           		dc.l mstr_gfx0_hblk
(1) 1397/ 6000E94 : 0600 0ECE           		dc.l mstr_gfx0_loop	; $06
(1) 1398/ 6000E98 : 0600 0EB8           		dc.l mstr_gfx0_init_2
(1) 1399/ 6000E9C : 0600 0EBE           		dc.l mstr_gfx0_init_1
(1) 1400/ 6000EA0 : 0600 0EB4           		dc.l mstr_gfx0_hblk
(1) 1401/ 6000EA4 : 0600 0ECE           		dc.l mstr_gfx0_loop	; $07
(1) 1402/ 6000EA8 : 0600 0EB8           		dc.l mstr_gfx0_init_2
(1) 1403/ 6000EAC : 0600 0EBE           		dc.l mstr_gfx0_init_1
(1) 1404/ 6000EB0 : 0600 0EB4           		dc.l mstr_gfx0_hblk
(1) 1405/ 6000EB4 :                     
(1) 1406/ 6000EB4 :                     ; ============================================================
(1) 1407/ 6000EB4 :                     ; ---------------------------------------
(1) 1408/ 6000EB4 :                     ; Pseudo-screen mode $00: BLANK
(1) 1409/ 6000EB4 :                     ;
(1) 1410/ 6000EB4 :                     ; YOU must use set this mode if you are
(1) 1411/ 6000EB4 :                     ; doing using these VDP settings
(1) 1412/ 6000EB4 :                     ; on the Genesis side:
(1) 1413/ 6000EB4 :                     ;
(1) 1414/ 6000EB4 :                     ; - H32 mode
(1) 1415/ 6000EB4 :                     ; - Double interlace mode
(1) 1416/ 6000EB4 :                     ;   (both H32 and H40)
(1) 1417/ 6000EB4 :                     ; ---------------------------------------
(1) 1418/ 6000EB4 :                     
(1) 1419/ 6000EB4 :                     ; -------------------------------
(1) 1420/ 6000EB4 :                     ; HBlank
(1) 1421/ 6000EB4 :                     ; -------------------------------
(1) 1422/ 6000EB4 :                     
(1) 1423/ 6000EB4 :                     mstr_gfx0_hblk:
(1) 1424/ 6000EB4 : 000B                		rts
(1) 1425/ 6000EB6 : 0009                		nop
(1) 1426/ 6000EB8 :                     		align 4
(1) 1427/ 6000EB8 :                     
(1) 1428/ 6000EB8 :                     ; -------------------------------
(1) 1429/ 6000EB8 :                     ; Init
(1) 1430/ 6000EB8 :                     ; -------------------------------
(1) 1431/ 6000EB8 :                     
(1) 1432/ 6000EB8 :                     mstr_gfx0_init_2:
(1) 1433/ 6000EB8 : D13F                		mov 	#_vdpreg,r1
(1) 1434/ 6000EBA : E000                		mov	#0,r0
(1) 1435/ 6000EBC : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1436/ 6000EBE :                     mstr_gfx0_init_1:
(1) 1437/ 6000EBE :                     ; 		mov	#$200,r1
(1) 1438/ 6000EBE :                     ; 		mov	#511,r2
(1) 1439/ 6000EBE :                     ; 		mov	#240,r3
(1) 1440/ 6000EBE :                     ; 		mov	#0,r4
(1) 1441/ 6000EBE :                     ; 		mov	#MarsVideo_ClearScreen,r0
(1) 1442/ 6000EBE :                     ; 		jsr	@r0
(1) 1443/ 6000EBE :                     ; 		nop
(1) 1444/ 6000EBE : D13E                		mov	#_vdpreg,r1		; In case we are still on VBlank...
(1) 1445/ 6000EC0 : 841A                -		mov.b	@(vdpsts,r1),r0
(1) 1446/ 6000EC2 : C880                		tst	#VBLK,r0
(1) 1447/ 6000EC4 : 8BFC                		bf	-
(1) 1448/ 6000EC6 : D13C                		mov	#_vdpreg,r1		; Framebuffer swap REQUEST
(1) 1449/ 6000EC8 : 841B                		mov.b	@(framectl,r1),r0
(1) 1450/ 6000ECA : CA01                		xor	#1,r0
(1) 1451/ 6000ECC : 801B                		mov.b	r0,@(framectl,r1)
(1) 1452/ 6000ECE :                     
(1) 1453/ 6000ECE :                     ; -------------------------------
(1) 1454/ 6000ECE :                     ; Loop
(1) 1455/ 6000ECE :                     ; -------------------------------
(1) 1456/ 6000ECE :                     
(1) 1457/ 6000ECE :                     mstr_gfx0_loop:
(1) 1458/ 6000ECE : A11E                		bra	mstr_ready
(1) 1459/ 6000ED0 : 0009                		nop
(1) 1460/ 6000ED2 :                     		align 4
(1) 1461/ 6000ED4 :                     
(1) 1462/ 6000ED4 :                     ; ============================================================
(1) 1463/ 6000ED4 :                     ; ---------------------------------------
(1) 1464/ 6000ED4 :                     ; Pseudo-screen mode $01:
(1) 1465/ 6000ED4 :                     ;
(1) 1466/ 6000ED4 :                     ; Super Sprites ONLY, with scaling and
(1) 1467/ 6000ED4 :                     ; rotation.
(1) 1468/ 6000ED4 :                     ; ---------------------------------------
(1) 1469/ 6000ED4 :                     
(1) 1470/ 6000ED4 :                     ; -------------------------------
(1) 1471/ 6000ED4 :                     ; HBlank
(1) 1472/ 6000ED4 :                     ; -------------------------------
(1) 1473/ 6000ED4 :                     
(1) 1474/ 6000ED4 :                     mstr_gfx1_hblk:
(1) 1475/ 6000ED4 : 000B                		rts
(1) 1476/ 6000ED6 : 0009                		nop
(1) 1477/ 6000ED8 :                     		align 4
(1) 1478/ 6000ED8 :                     
(1) 1479/ 6000ED8 :                     ; -------------------------------
(1) 1480/ 6000ED8 :                     ; Init
(1) 1481/ 6000ED8 :                     ; -------------------------------
(1) 1482/ 6000ED8 :                     
(1) 1483/ 6000ED8 :                     ; -------------------------------
(1) 1484/ 6000ED8 :                     ; Init
(1) 1485/ 6000ED8 :                     ; -------------------------------
(1) 1486/ 6000ED8 :                     
(1) 1487/ 6000ED8 :                     mstr_gfx1_init_1:
(1) 1488/ 6000ED8 : 200A                		xor	r0,r0				; Cleanup our screen RAM
(1) 1489/ 6000EDA : D138                		mov	#RAM_Mars_ScrnBuff,r1
(1) 1490/ 6000EDC : 9294                		mov	#(end_scrn02-RAM_Mars_ScrnBuff)/4,r2
(1) 1491/ 6000EDE :                     .clr_scrn:
(1) 1492/ 6000EDE : 2102                		mov	r0,@r1
(1) 1493/ 6000EE0 : 4210                		dt	r2
(1) 1494/ 6000EE2 : 8FFC                		bf/s	.clr_scrn
(1) 1495/ 6000EE4 : 7104                		add	#4,r1
(1) 1496/ 6000EE6 : D136                		mov	#CACHE_MSTR_SCRL,r1		; Load CACHE code
(1) 1497/ 6000EE8 : 928F                		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1498/ 6000EEA : D036                		mov	#Mars_LoadCacheRam,r0
(1) 1499/ 6000EEC : 400B                		jsr	@r0
(1) 1500/ 6000EEE : 0009                		nop
(1) 1501/ 6000EF0 : A003                		bra	mstr_gfx1_cont
(1) 1502/ 6000EF2 : 0009                		nop
(1) 1503/ 6000EF4 :                     
(1) 1504/ 6000EF4 :                     mstr_gfx1_init_2:
(1) 1505/ 6000EF4 : D130                		mov 	#_vdpreg,r1
(1) 1506/ 6000EF6 : E001                		mov	#1,r0
(1) 1507/ 6000EF8 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1508/ 6000EFA :                     
(1) 1509/ 6000EFA :                     mstr_gfx1_cont:
(1) 1510/ 6000EFA : 9187                		mov	#$200,r1
(1) 1511/ 6000EFC : 9286                		mov	#512,r2
(1) 1512/ 6000EFE : 9386                		mov	#240,r3
(1) 1513/ 6000F00 : D031                		mov	#MarsVideo_MakeNametbl,r0
(1) 1514/ 6000F02 : 400B                		jsr	@r0
(1) 1515/ 6000F04 : E400                		mov	#0,r4
(1) 1516/ 6000F06 :                     
(1) 1517/ 6000F06 :                     ; -------------------------------
(1) 1518/ 6000F06 :                     ; Loop
(1) 1519/ 6000F06 :                     ; -------------------------------
(1) 1520/ 6000F06 :                     
(1) 1521/ 6000F06 :                     mstr_gfx1_loop:
(1) 1522/ 6000F06 : 9181                		mov	#$200,r1		; *** This also counts as a delay for Watchdog ***
(1) 1523/ 6000F08 : 9282                		mov	#(320+16)/2,r2
(1) 1524/ 6000F0A : 9380                		mov	#240,r3
(1) 1525/ 6000F0C :                     
(1) 1526/ 6000F0C : D02F                		mov	#MarsVideo_ClearScreen,r0
(1) 1527/ 6000F0E : 400B                		jsr	@r0
(1) 1528/ 6000F10 : E400                		mov	#0,r4
(1) 1529/ 6000F12 : 917B                		mov	#$200,r1
(1) 1530/ 6000F14 : E200                		mov	#0,r2
(1) 1531/ 6000F16 : E300                		mov	#0,r3
(1) 1532/ 6000F18 : 9478                		mov	#512,r4
(1) 1533/ 6000F1A : 9578                		mov	#240,r5
(1) 1534/ 6000F1C : D62C                		mov	#512*240,r6
(1) 1535/ 6000F1E : D02D                		mov	#MarsVideo_SetSuperSpr,r0
(1) 1536/ 6000F20 : 400B                		jsr	@r0
(1) 1537/ 6000F22 : 0009                		nop
(1) 1538/ 6000F24 : D02C                		mov	#MarsVideo_DrawSuperSpr,r0	; Draw Super Sprites
(1) 1539/ 6000F26 : 400B                		jsr	@r0
(1) 1540/ 6000F28 : 0009                		nop
(1) 1541/ 6000F2A : D123                		mov	#_vdpreg,r1			; Framebuffer swap REQUEST
(1) 1542/ 6000F2C : 841B                		mov.b	@(framectl,r1),r0
(1) 1543/ 6000F2E : CA01                		xor	#1,r0
(1) 1544/ 6000F30 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1545/ 6000F32 :                     
(1) 1546/ 6000F32 : A0EC                		bra	mstr_ready
(1) 1547/ 6000F34 : 0009                		nop
(1) 1548/ 6000F36 :                     		align 4
(1) 1549/ 6000F38 :                     
(1) 1550/ 6000F38 :                     ; ============================================================
(1) 1551/ 6000F38 :                     ; ---------------------------------------
(1) 1552/ 6000F38 :                     ; Pseudo-screen mode $02:
(1) 1553/ 6000F38 :                     ;
(1) 1554/ 6000F38 :                     ; 256-color smooth scrolling map
(1) 1555/ 6000F38 :                     ; ---------------------------------------
(1) 1556/ 6000F38 :                     
(1) 1557/ 6000F38 :                     ; -------------------------------
(1) 1558/ 6000F38 :                     ; HBlank
(1) 1559/ 6000F38 :                     ; -------------------------------
(1) 1560/ 6000F38 :                     
(1) 1561/ 6000F38 :                     mstr_gfx2_hblk:
(1) 1562/ 6000F38 : 000B                		rts
(1) 1563/ 6000F3A : 0009                		nop
(1) 1564/ 6000F3C :                     		align 4
(1) 1565/ 6000F3C :                     
(1) 1566/ 6000F3C :                     ; -------------------------------
(1) 1567/ 6000F3C :                     ; Init
(1) 1568/ 6000F3C :                     ; -------------------------------
(1) 1569/ 6000F3C :                     
(1) 1570/ 6000F3C :                     mstr_gfx2_init_1:
(1) 1571/ 6000F3C : 200A                		xor	r0,r0					; Cleanup our screen RAM
(1) 1572/ 6000F3E : D127                		mov	#RAM_Mars_ScrnBuff,r1
(1) 1573/ 6000F40 : 9267                		mov	#(end_scrn02-RAM_Mars_ScrnBuff)/4,r2
(1) 1574/ 6000F42 :                     .clr_scrn:
(1) 1575/ 6000F42 : 2102                		mov	r0,@r1
(1) 1576/ 6000F44 : 4210                		dt	r2
(1) 1577/ 6000F46 : 8FFC                		bf/s	.clr_scrn
(1) 1578/ 6000F48 : 7104                		add	#4,r1
(1) 1579/ 6000F4A : D125                		mov	#CACHE_MSTR_SCRL,r1			; Load CACHE code
(1) 1580/ 6000F4C : 9262                		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1581/ 6000F4E : D01D                		mov	#Mars_LoadCacheRam,r0
(1) 1582/ 6000F50 : 400B                		jsr	@r0
(1) 1583/ 6000F52 : 0009                		nop
(1) 1584/ 6000F54 :                     
(1) 1585/ 6000F54 :                     	; *** Create scrolling Section 0
(1) 1586/ 6000F54 : E100                		mov	#0,r1			; Make a scrolling section
(1) 1587/ 6000F56 : 9259                		mov	#$200,r2		; Framebuffer VRAM position
(1) 1588/ 6000F58 : 935D                		mov	#320,r3
(1) 1589/ 6000F5A : 945D                		mov	#224,r4
(1) 1590/ 6000F5C : BCF4                		bsr	MarsVideo_MkScrlField
(1) 1591/ 6000F5E : E510                		mov	#16,r5			; <-- block size
(1) 1592/ 6000F60 : A003                		bra	mstr_gfx2_init_cont
(1) 1593/ 6000F62 : 0009                		nop
(1) 1594/ 6000F64 :                     
(1) 1595/ 6000F64 :                     mstr_gfx2_init_2:
(1) 1596/ 6000F64 : D114                		mov 	#_vdpreg,r1
(1) 1597/ 6000F66 : E001                		mov	#1,r0
(1) 1598/ 6000F68 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1599/ 6000F6A :                     mstr_gfx2_init_cont:
(1) 1600/ 6000F6A : DE1E                		mov	#RAM_Mars_DreqRead+Dreq_BgExBuff,r14
(1) 1601/ 6000F6C : DD1E                		mov	#RAM_Mars_ScrlBuff,r13
(1) 1602/ 6000F6E : D01F                		mov	#MarsVideo_DrawAll,r0
(1) 1603/ 6000F70 : 400B                		jsr	@r0
(1) 1604/ 6000F72 : 0009                		nop
(1) 1605/ 6000F74 :                     
(1) 1606/ 6000F74 :                     ; -------------------------------
(1) 1607/ 6000F74 :                     ; Loop
(1) 1608/ 6000F74 :                     ; -------------------------------
(1) 1609/ 6000F74 :                     
(1) 1610/ 6000F74 :                     mstr_gfx2_loop:
(1) 1611/ 6000F74 : DE1E                		mov	#RAM_Mars_DreqRead+Dreq_BgExBuff,r14
(1) 1612/ 6000F76 : DD1F                		mov	#RAM_Mars_ScrlBuff,r13
(1) 1613/ 6000F78 : BD58                		bsr	MarsVideo_Bg_MdMove
(1) 1614/ 6000F7A : 0009                		nop
(1) 1615/ 6000F7C : BD96                		bsr	MarsVideo_Bg_MdReq
(1) 1616/ 6000F7E : 0009                		nop
(1) 1617/ 6000F80 : E001                		mov.w	#1,r0				; Setup Watchdog interrupt
(1) 1618/ 6000F82 : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(1) 1619/ 6000F84 : E100                		mov	#0,r1
(1) 1620/ 6000F86 : E210                		mov	#$10,r2
(1) 1621/ 6000F88 : D01B                		mov	#MarsVideo_SetWatchdog,r0
(1) 1622/ 6000F8A : 400B                		jsr	@r0
(1) 1623/ 6000F8C : 0009                		nop
(1) 1624/ 6000F8E :                     
(1) 1625/ 6000F8E :                     ; 		mov.w	@(marsGbl_MdDrawTmr,gbr),r0
(1) 1626/ 6000F8E :                     ; 		tst	r0,r0
(1) 1627/ 6000F8E :                     ; 		bt	.no_timer
(1) 1628/ 6000F8E :                     
(1) 1629/ 6000F8E :                     ; .no_timer:
(1) 1630/ 6000F8E :                     
(1) 1631/ 6000F8E :                     ; 		mov	@(scrl_fbdata,r14),r1
(1) 1632/ 6000F8E :                     ; 		mov	@(scrl_fbpos,r14),r2
(1) 1633/ 6000F8E :                     ; 		mov.w	@(scrl_fbpos_y,r14),r0
(1) 1634/ 6000F8E :                     ; 		mov	r0,r3
(1) 1635/ 6000F8E :                     ; 		mov.w	@(scrl_intrl_w,r14),r0
(1) 1636/ 6000F8E :                     ; 		mov	r0,r4
(1) 1637/ 6000F8E :                     ; 		mov.w	@(scrl_intrl_h,r14),r0
(1) 1638/ 6000F8E :                     ; 		mov	r0,r5
(1) 1639/ 6000F8E :                     ; 		mov	@(scrl_intrl_size,r14),r6
(1) 1640/ 6000F8E :                     ; 		mov	#MarsVideo_SetSuperSpr,r0
(1) 1641/ 6000F8E :                     ; 		jsr	@r0
(1) 1642/ 6000F8E :                     ; 		nop
(1) 1643/ 6000F8E :                     ; 		mov	#RAM_Mars_ScrlBuff,r14
(1) 1644/ 6000F8E :                     ; 		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r13
(1) 1645/ 6000F8E :                     ; 		mov	#RAM_Mars_RdrwBlocks,r12
(1) 1646/ 6000F8E :                     ; 		mov	#MarsVideo_SetSprFill,r0	; Set redraw blocks for the next frame
(1) 1647/ 6000F8E :                     ; 		jsr	@r0
(1) 1648/ 6000F8E :                     ; 		nop
(1) 1649/ 6000F8E :                     ; 		mov	#MarsVideo_DrawSuperSpr,r0	; Draw sprites graphics
(1) 1650/ 6000F8E :                     ; 		jsr	@r0
(1) 1651/ 6000F8E :                     ; 		nop
(1) 1652/ 6000F8E :                     
(1) 1653/ 6000F8E : D11B                		mov	#RAM_Mars_ScrlBuff,r1		; *** Make a visible section
(1) 1654/ 6000F90 : E200                		mov	#0,r2				; of the scrolling data
(1) 1655/ 6000F92 : 933C                		mov	#240,r3				; From Y 0 to 240
(1) 1656/ 6000F94 : D01A                		mov	#MarsVideo_ShowScrlBg,r0
(1) 1657/ 6000F96 : 400B                		jsr	@r0
(1) 1658/ 6000F98 : 0009                		nop
(1) 1659/ 6000F9A : C511                .wait_wdg:	mov.w	@(marsGbl_WdgMode,gbr),r0	; Watchdog finished?
(1) 1660/ 6000F9C : 2008                		tst	r0,r0
(1) 1661/ 6000F9E : 8BFC                		bf	.wait_wdg
(1) 1662/ 6000FA0 : 913B                		mov.l   #$FFFFFE80,r1			; Watchdog OFF
(1) 1663/ 6000FA2 : 903B                		mov.w   #$A518,r0
(1) 1664/ 6000FA4 : 2101                		mov.w   r0,@r1
(1) 1665/ 6000FA6 : D017                		mov	#MarsVideo_FixTblShift,r0	; HW: Fix those broken lines that
(1) 1666/ 6000FA8 : 400B                		jsr	@r0				; the Xshift register can't move.
(1) 1667/ 6000FAA : 0009                		nop
(1) 1668/ 6000FAC : D102                		mov	#_vdpreg,r1			; Wait framebuffer
(1) 1669/ 6000FAE : 841B                		mov.b	@(framectl,r1),r0
(1) 1670/ 6000FB0 : CA01                		xor	#1,r0
(1) 1671/ 6000FB2 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1672/ 6000FB4 :                     
(1) 1673/ 6000FB4 : A0AB                		bra	mstr_ready
(1) 1674/ 6000FB6 : 0009                		nop
(1) 1675/ 6000FB8 :                     		align 4
(1) 1676/ 6000FB8 : 2000 4100 2600 8010 		ltorg
                    0600 12DC 0600 07B0 
                    0600 086C 0600 0834 
                    0001 E000 0600 0B74 
                    C000 0220 2600 8010 
                    0600 12DC 2600 76F0 
                    C000 0378 C000 00F0 
                    2600 76F0 C000 0378 
                    0600 0B8C C000 0378 
                    0600 0974 0600 08DC 
                    5E00 0126 0200 00F0 
                    00A8 5E00 0126 0140 
                    00E0 FE80 A518      
(1) 1677/ 600101E :                     
(1) 1678/ 600101E :                     ; ============================================================
(1) 1679/ 600101E :                     ; ---------------------------------------
(1) 1680/ 600101E :                     ; Mode 4: 3D MODE Polygons-only
(1) 1681/ 600101E :                     ;
(1) 1682/ 600101E :                     ; Objects are divided into read/write
(1) 1683/ 600101E :                     ; buffers:
(1) 1684/ 600101E :                     ;
(1) 1685/ 600101E :                     ; - This CPU draws the polygons from
(1) 1686/ 600101E :                     ; the READ buffer
(1) 1687/ 600101E :                     ; - at the same time the Slave CPU is
(1) 1688/ 600101E :                     ; building the 3d models and
(1) 1689/ 600101E :                     ; sorts the polygons FOR THE NEXT FRAME
(1) 1690/ 600101E :                     ; (NOT current)
(1) 1691/ 600101E :                     ; ---------------------------------------
(1) 1692/ 600101E :                     
(1) 1693/ 600101E :                     ; -------------------------------
(1) 1694/ 600101E :                     ; HBlank
(1) 1695/ 600101E :                     ; -------------------------------
(1) 1696/ 600101E :                     
(1) 1697/ 600101E :                     mstr_gfx3_hblk:
(1) 1698/ 600101E : 000B                		rts
(1) 1699/ 6001020 : 0009                		nop
(1) 1700/ 6001022 :                     		align 4
(1) 1701/ 6001024 :                     
(1) 1702/ 6001024 :                     ; -------------------------------
(1) 1703/ 6001024 :                     ; Init
(1) 1704/ 6001024 :                     ; -------------------------------
(1) 1705/ 6001024 :                     
(1) 1706/ 6001024 :                     mstr_gfx3_init_1:
(1) 1707/ 6001024 : D13B                		mov	#_sysreg+comm14,r1
(1) 1708/ 6001026 : 6011                .slv_init:	mov.w	@r1,r0
(1) 1709/ 6001028 : C97F                		and	#%01111111,r0
(1) 1710/ 600102A : 2008                		tst	r0,r0
(1) 1711/ 600102C : 8BFB                		bf	.slv_init
(1) 1712/ 600102E : D13A                		mov	#CACHE_MSTR_PLGN,r1
(1) 1713/ 6001030 : 9292                		mov	#(CACHE_MSTR_PLGN_E-CACHE_MSTR_PLGN)/4,r2
(1) 1714/ 6001032 : D03A                		mov	#Mars_LoadCacheRam,r0
(1) 1715/ 6001034 : 400B                		jsr	@r0
(1) 1716/ 6001036 : 0009                		nop
(1) 1717/ 6001038 : E000                		mov	#0,r0
(1) 1718/ 600103A : C117                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1719/ 600103C : A003                		bra	mstr_gfx3_init_cont
(1) 1720/ 600103E : 0009                		nop
(1) 1721/ 6001040 :                     mstr_gfx3_init_2:
(1) 1722/ 6001040 : D137                		mov 	#_vdpreg,r1
(1) 1723/ 6001042 : E001                		mov	#1,r0
(1) 1724/ 6001044 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1725/ 6001046 :                     mstr_gfx3_init_cont:
(1) 1726/ 6001046 : D136                		mov	#_vdpreg,r1
(1) 1727/ 6001048 : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0			; Wait until framebuffer is unlocked
(1) 1728/ 600104A : C802                		tst	#2,r0
(1) 1729/ 600104C : 8BFC                		bf	.wait_fb
(1) 1730/ 600104E :                     
(1) 1731/ 600104E :                     ; -------------------------------
(1) 1732/ 600104E :                     ; Loop
(1) 1733/ 600104E :                     ; -------------------------------
(1) 1734/ 600104E :                     
(1) 1735/ 600104E :                     mstr_gfx3_loop:
(1) 1736/ 600104E : D135                		mov	#_sysreg+comm12,r1
(1) 1737/ 6001050 : D430                		mov	#_sysreg+comm14,r4
(1) 1738/ 6001052 :                     .slv_busy2:
(1) 1739/ 6001052 : 6011                		mov.w	@r1,r0
(1) 1740/ 6001054 : C90F                		and	#%1111,r0
(1) 1741/ 6001056 : 8803                		cmp/eq	#3,r0			; MODE $03?
(1) 1742/ 6001058 : 8B59                		bf	.got_out
(1) 1743/ 600105A : 6041                		mov.w	@r4,r0
(1) 1744/ 600105C : C97F                		and	#%01111111,r0
(1) 1745/ 600105E : 2008                		tst	r0,r0
(1) 1746/ 6001060 : 8B55                		bf	.got_out
(1) 1747/ 6001062 :                     
(1) 1748/ 6001062 : D131                		mov	#RAM_Mars_DreqRead+Dreq_Objects,r1	; Copy Dreq models into a safe place
(1) 1749/ 6001064 : D231                		mov	#RAM_Mars_Objects,r2			; to prevent BUS problems.
(1) 1750/ 6001066 : E348                		mov	#(sizeof_mdlobj*MAX_MODELS)/4,r3	; <-- LONG size
(1) 1751/ 6001068 :                     .copy_safe:
(1) 1752/ 6001068 : 6016                		mov	@r1+,r0
(1) 1753/ 600106A : 2202                		mov	r0,@r2
(1) 1754/ 600106C : 4310                		dt	r3
(1) 1755/ 600106E : 8FFB                		bf/s	.copy_safe
(1) 1756/ 6001070 : 7204                		add	#4,r2
(1) 1757/ 6001072 : C513                		mov.w	@(marsGbl_PolyBuffNum,gbr),r0		; Swap Read/Write sections
(1) 1758/ 6001074 : CA01                		xor	#1,r0
(1) 1759/ 6001076 : C113                		mov.w	r0,@(marsGbl_PolyBuffNum,gbr)
(1) 1760/ 6001078 : 6041                		mov.w	@r4,r0
(1) 1761/ 600107A : CB01                		or	#$01,r0
(1) 1762/ 600107C : 2401                		mov.w	r0,@r4
(1) 1763/ 600107E :                     
(1) 1764/ 600107E : D128                		mov	#_vdpreg,r1
(1) 1765/ 6001080 : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0			; Wait until framebuffer is unlocked
(1) 1766/ 6001082 : C802                		tst	#2,r0
(1) 1767/ 6001084 : 8BFC                		bf	.wait_fb
(1) 1768/ 6001086 : 9068                		mov	#$A5,r0				; VDPFILL: Pre-start at $A5
(1) 1769/ 6001088 : 8113                		mov.w	r0,@(6,r1)
(1) 1770/ 600108A : D029                		mov	#RAM_Mars_SVdpDrwList,r0	; Reset DDA Start/End/Read/Write points
(1) 1771/ 600108C : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(1) 1772/ 600108E : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(1) 1773/ 6001090 : C202                		mov	r0,@(marsGbl_PlyPzList_Start,gbr)
(1) 1774/ 6001092 : D028                		mov	#RAM_Mars_SVdpDrwList_E,r0
(1) 1775/ 6001094 : C203                		mov	r0,@(marsGbl_PlyPzList_End,gbr)
(1) 1776/ 6001096 : E000                		mov	#0,r0
(1) 1777/ 6001098 : C114                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)	; And pieces counter
(1) 1778/ 600109A : E007                		mov	#7,r0				; Start on last mode
(1) 1779/ 600109C : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(1) 1780/ 600109E : 905D                		mov	#224,r0				; Lines to clear (WdgMode $07)
(1) 1781/ 60010A0 : D125                		mov	#Cach_ClrLines,r1
(1) 1782/ 60010A2 : 2102                		mov	r0,@r1
(1) 1783/ 60010A4 : 915B                		mov	#$200,r1
(1) 1784/ 60010A6 : 925A                		mov	#512,r2			; <-- fixed WIDTH
(1) 1785/ 60010A8 : 935A                		mov	#240,r3
(1) 1786/ 60010AA : D024                		mov	#MarsVideo_MakeNametbl,r0
(1) 1787/ 60010AC : 400B                		jsr	@r0
(1) 1788/ 60010AE : E400                		mov	#0,r4
(1) 1789/ 60010B0 :                     ; 		mov	#_vdpreg,r1		; Wait framebuffer and request swap
(1) 1790/ 60010B0 :                     ; .waitv:	mov.b	@(vdpsts,r1),r0
(1) 1791/ 60010B0 :                     ; 		tst	#VBLK,r0
(1) 1792/ 60010B0 :                     ; 		bf	.waitv
(1) 1793/ 60010B0 : E100                		mov	#0,r1
(1) 1794/ 60010B2 : E210                		mov	#$10,r2
(1) 1795/ 60010B4 : D022                		mov	#MarsVideo_SetWatchdog,r0
(1) 1796/ 60010B6 : 400B                		jsr	@r0
(1) 1797/ 60010B8 : 0009                		nop
(1) 1798/ 60010BA :                     
(1) 1799/ 60010BA :                     	; While doing this: the watchdog is
(1) 1800/ 60010BA :                     	; drawing the polygons using the "pieces" list
(1) 1801/ 60010BA :                     	;
(1) 1802/ 60010BA :                     	; r14 - Polygon pointers list
(1) 1803/ 60010BA :                     	; r13 - Number of polygons to build
(1) 1804/ 60010BA : C513                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0	; Start drawing polygons from the READ buffer
(1) 1805/ 60010BC : C801                		tst     #1,r0				; Check for which buffer to use
(1) 1806/ 60010BE : 8902                		bt	.page_2
(1) 1807/ 60010C0 : DE20                		mov 	#RAM_Mars_PlgnList_0,r14
(1) 1808/ 60010C2 : A003                		bra	.cont_plgn
(1) 1809/ 60010C4 : DD1F                		mov	#RAM_Mars_PlgnNum_0,r13
(1) 1810/ 60010C6 :                     .page_2:
(1) 1811/ 60010C6 : DE21                		mov 	#RAM_Mars_PlgnList_1,r14
(1) 1812/ 60010C8 : 0009                		nop
(1) 1813/ 60010CA : DD21                		mov	#RAM_Mars_PlgnNum_1,r13
(1) 1814/ 60010CC :                     .cont_plgn:
(1) 1815/ 60010CC : 6DD2                		mov	@r13,r13
(1) 1816/ 60010CE : 4D15                		cmp/pl	r13
(1) 1817/ 60010D0 : 8B0D                		bf	.skip
(1) 1818/ 60010D2 :                     .loop:
(1) 1819/ 60010D2 : 50E1                		mov	@(4,r14),r0			; Get location of the polygon
(1) 1820/ 60010D4 : 4015                		cmp/pl	r0				; Zero?
(1) 1821/ 60010D6 : 8B07                		bf	.invalid			; if yes, skip
(1) 1822/ 60010D8 : 2FE6                		mov	r14,@-r15
(1) 1823/ 60010DA : 2FD6                		mov	r13,@-r15
(1) 1824/ 60010DC : 6E03                		mov	r0,r14
(1) 1825/ 60010DE : D01D                		mov 	#MarsVideo_SlicePlgn,r0
(1) 1826/ 60010E0 : 400B                		jsr	@r0
(1) 1827/ 60010E2 : 0009                		nop
(1) 1828/ 60010E4 : 6DF6                		mov	@r15+,r13
(1) 1829/ 60010E6 : 6EF6                		mov	@r15+,r14
(1) 1830/ 60010E8 :                     .invalid:
(1) 1831/ 60010E8 : 4D10                		dt	r13				; Decrement numof_polygons
(1) 1832/ 60010EA : 8FF2                		bf/s	.loop
(1) 1833/ 60010EC : 7E08                		add	#8,r14				; Move to next entry
(1) 1834/ 60010EE :                     .skip:
(1) 1835/ 60010EE :                     
(1) 1836/ 60010EE : C514                .wait_pz: 	mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces remaining?
(1) 1837/ 60010F0 : 2008                		tst	r0,r0
(1) 1838/ 60010F2 : 8BFC                		bf	.wait_pz
(1) 1839/ 60010F4 : C511                .wait_wdg:	mov.w	@(marsGbl_WdgMode,gbr),r0	; Watchdog finished?
(1) 1840/ 60010F6 : 2008                		tst	r0,r0
(1) 1841/ 60010F8 : 8BFC                		bf	.wait_wdg
(1) 1842/ 60010FA : 9132                		mov.l   #$FFFFFE80,r1
(1) 1843/ 60010FC : 9032                		mov.w   #$A518,r0
(1) 1844/ 60010FE : 2101                		mov.w   r0,@r1
(1) 1845/ 6001100 : D107                		mov	#_vdpreg,r1		; Wait framebuffer
(1) 1846/ 6001102 : 8515                .wait:		mov.w	@(vdpsts,r1),r0
(1) 1847/ 6001104 : C802                		tst	#%10,r0
(1) 1848/ 6001106 : 8BFC                		bf	.wait
(1) 1849/ 6001108 : 841B                		mov.b	@(framectl,r1),r0
(1) 1850/ 600110A : CA01                		xor	#1,r0
(1) 1851/ 600110C : 801B                		mov.b	r0,@(framectl,r1)
(1) 1852/ 600110E :                     
(1) 1853/ 600110E :                     ; 		mov	#_sysreg+comm12,r1
(1) 1854/ 600110E :                     ; 		mov	#_sysreg+comm14,r4
(1) 1855/ 600110E :                     ; .slv_busy2:
(1) 1856/ 600110E :                     ; 		mov.w	@r1,r0
(1) 1857/ 600110E :                     ; 		cmp/eq	#4,r0
(1) 1858/ 600110E :                     ; 		bf	.got_out
(1) 1859/ 600110E :                     ; 		mov.w	@r4,r0
(1) 1860/ 600110E :                     ; 		and	#%01111111,r0
(1) 1861/ 600110E :                     ; 		tst	r0,r0
(1) 1862/ 600110E :                     ; 		bf	.slv_busy2
(1) 1863/ 600110E :                     .got_out:
(1) 1864/ 600110E :                     
(1) 1865/ 600110E :                     ; ============================================================
(1) 1866/ 600110E :                     
(1) 1867/ 600110E :                     mstr_ready:
(1) 1868/ 600110E : AE37                		bra	master_loop
(1) 1869/ 6001110 : 0009                		nop
(1) 1870/ 6001112 :                     		align 4
(1) 1871/ 6001114 : 2000 402E 0600 1774 		ltorg
                    0600 07B0 2000 4100 
                    2000 402C 2600 7770 
                    2602 1610 2600 8010 
                    2600 FE10 C000 06D4 
                    0600 086C 0600 0B8C 
                    2602 1748 2602 3F48 
                    2602 2B48 2602 3F4C 
                    C000 03E4 01F3 00A5 
                    00E0 0200 00F0 FE80 
                    A518                
(1) 1872/ 6001166 :                     
(1) 1873/ 6001166 :                     ; ; ============================================================
(1) 1874/ 6001166 :                     ; ; ---------------------------------------
(1) 1875/ 6001166 :                     ; ; Pseudo-screen mode $01:
(1) 1876/ 6001166 :                     ; ;
(1) 1877/ 6001166 :                     ; ; A Generic screen in any
(1) 1878/ 6001166 :                     ; ; bitmap mode: Indexed, Direct or RLE
(1) 1879/ 6001166 :                     ; ;
(1) 1880/ 6001166 :                     ; ; Watch out for the limited lines
(1) 1881/ 6001166 :                     ; ; available for DIRECT COLOR
(1) 1882/ 6001166 :                     ; ; ---------------------------------------
(1) 1883/ 6001166 :                     ;
(1) 1884/ 6001166 :                     ; ; -------------------------------
(1) 1885/ 6001166 :                     ; ; HBlank
(1) 1886/ 6001166 :                     ; ; -------------------------------
(1) 1887/ 6001166 :                     ;
(1) 1888/ 6001166 :                     ; mstr_gfx1_hblk:
(1) 1889/ 6001166 :                     ; 		rts
(1) 1890/ 6001166 :                     ; 		nop
(1) 1891/ 6001166 :                     ; 		align 4
(1) 1892/ 6001166 :                     ;
(1) 1893/ 6001166 :                     ; ; -------------------------------
(1) 1894/ 6001166 :                     ; ; Init
(1) 1895/ 6001166 :                     ; ; -------------------------------
(1) 1896/ 6001166 :                     ;
(1) 1897/ 6001166 :                     ; mstr_gfx1_init_2:
(1) 1898/ 6001166 :                     ; 		mov	#0,r0
(1) 1899/ 6001166 :                     ; 		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1900/ 6001166 :                     ; 		mov 	#_vdpreg,r1
(1) 1901/ 6001166 :                     ; 		mov	#2,r0
(1) 1902/ 6001166 :                     ; 		mov.b	r0,@(bitmapmd,r1)
(1) 1903/ 6001166 :                     ; mstr_gfx1_init_1:
(1) 1904/ 6001166 :                     ; 		mov	#MarsVideo_ResetNameTbl,r0
(1) 1905/ 6001166 :                     ; 		jsr	@r0
(1) 1906/ 6001166 :                     ; 		nop
(1) 1907/ 6001166 :                     ;
(1) 1908/ 6001166 :                     ; ; -------------------------------
(1) 1909/ 6001166 :                     ; ; Loop
(1) 1910/ 6001166 :                     ; ; -------------------------------
(1) 1911/ 6001166 :                     ;
(1) 1912/ 6001166 :                     ; mstr_gfx1_loop:
(1) 1913/ 6001166 :                     ; 		mov	#RAM_Mars_DreqRead+Dreq_ScrlBuff,r1
(1) 1914/ 6001166 :                     ; 		mov	@(Dreq_Scrn_Type,r1),r0
(1) 1915/ 6001166 :                     ; 		and	#%11,r0
(1) 1916/ 6001166 :                     ; 		shll2	r0
(1) 1917/ 6001166 :                     ; 		mov	#.m1list,r2
(1) 1918/ 6001166 :                     ; 		mov	@(r0,r2),r2
(1) 1919/ 6001166 :                     ; 		jmp	@r2
(1) 1920/ 6001166 :                     ; 		nop
(1) 1921/ 6001166 :                     ; 		align 4
(1) 1922/ 6001166 :                     ; .m1list:
(1) 1923/ 6001166 :                     ; 		dc.l mstr_ready
(1) 1924/ 6001166 :                     ; 		dc.l mstr_ready		; Indexed
(1) 1925/ 6001166 :                     ; 		dc.l .direct		; Direct
(1) 1926/ 6001166 :                     ; 		dc.l mstr_ready
(1) 1927/ 6001166 :                     ;
(1) 1928/ 6001166 :                     ; ; -------------------------------
(1) 1929/ 6001166 :                     ; ; Direct color
(1) 1930/ 6001166 :                     ; ; currently 320x200 (DOS-style)
(1) 1931/ 6001166 :                     ; .direct:
(1) 1932/ 6001166 :                     ; 		mov	@(Dreq_Scrn_Data,r1),r1
(1) 1933/ 6001166 :                     ; 		mov	#_framebuffer+$200,r2
(1) 1934/ 6001166 :                     ; 		mov	#(320*200/2)/2,r3	; <- fixed size
(1) 1935/ 6001166 :                     ; .copy_me:
(1) 1936/ 6001166 :                     ; 		mov	@r1+,r0
(1) 1937/ 6001166 :                     ; 		mov	r0,@r2
(1) 1938/ 6001166 :                     ; 		add	#4,r2
(1) 1939/ 6001166 :                     ; 		mov	@r1+,r0
(1) 1940/ 6001166 :                     ; 		mov	r0,@r2
(1) 1941/ 6001166 :                     ; 		dt	r3
(1) 1942/ 6001166 :                     ; 		bf/s	.copy_me
(1) 1943/ 6001166 :                     ; 		add	#4,r2
(1) 1944/ 6001166 :                     ; .dont_rdrw:
(1) 1945/ 6001166 :                     ; 		mov	#$200,r1
(1) 1946/ 6001166 :                     ; 		mov	#320*2,r2
(1) 1947/ 6001166 :                     ; 		mov	#200,r3
(1) 1948/ 6001166 :                     ; 		mov	#MarsVideo_MakeNametbl,r0
(1) 1949/ 6001166 :                     ; 		jsr	@r0
(1) 1950/ 6001166 :                     ; 		mov	#12,r4
(1) 1951/ 6001166 :                     ; 		mov	#_vdpreg,r1		; In case we are still on VBlank...
(1) 1952/ 6001166 :                     ; -		mov.b	@(vdpsts,r1),r0
(1) 1953/ 6001166 :                     ; 		tst	#VBLK,r0
(1) 1954/ 6001166 :                     ; 		bf	-
(1) 1955/ 6001166 :                     ; 		mov	#_vdpreg,r1		; Framebuffer swap REQUEST
(1) 1956/ 6001166 :                     ; 		mov.b	@(framectl,r1),r0
(1) 1957/ 6001166 :                     ; 		xor	#1,r0
(1) 1958/ 6001166 :                     ; 		mov.b	r0,@(framectl,r1)
(1) 1959/ 6001166 :                     ;
(1) 1960/ 6001166 :                     ; 		bra	mstr_ready
(1) 1961/ 6001166 :                     ; 		nop
(1) 1962/ 6001166 :                     ;
(1) 1963/ 6001166 :                     ; ; -------------------------------
(1) 1964/ 6001166 :                     ; ; RLE indexed-compressed image
(1) 1965/ 6001166 :                     ;
(1) 1966/ 6001166 :                     ; .rle:
(1) 1967/ 6001166 :                     ; 		bra	mstr_ready
(1) 1968/ 6001166 :                     ; 		nop
(1) 1969/ 6001166 :                     
(1) 1970/ 6001166 :                     ; ; ============================================================
(1) 1971/ 6001166 :                     ; ; ---------------------------------------
(1) 1972/ 6001166 :                     ; ; Pseudo-screen mode $03:
(1) 1973/ 6001166 :                     ; ; Scalable 256-color screen
(1) 1974/ 6001166 :                     ; ;
(1) 1975/ 6001166 :                     ; ; Not as smooth as Mode 2
(1) 1976/ 6001166 :                     ; ; ---------------------------------------
(1) 1977/ 6001166 :                     ;
(1) 1978/ 6001166 :                     ; ; -------------------------------
(1) 1979/ 6001166 :                     ; ; HBlank
(1) 1980/ 6001166 :                     ; ; -------------------------------
(1) 1981/ 6001166 :                     ;
(1) 1982/ 6001166 :                     ; mstr_gfx3_hblk:
(1) 1983/ 6001166 :                     ; 		rts
(1) 1984/ 6001166 :                     ; 		nop
(1) 1985/ 6001166 :                     ; 		align 4
(1) 1986/ 6001166 :                     ;
(1) 1987/ 6001166 :                     ; ; -------------------------------
(1) 1988/ 6001166 :                     ; ; Init
(1) 1989/ 6001166 :                     ; ; -------------------------------
(1) 1990/ 6001166 :                     ;
(1) 1991/ 6001166 :                     ; mstr_gfx3_init_1:
(1) 1992/ 6001166 :                     ; 		mov	#CACHE_MSTR_SCRL,r1
(1) 1993/ 6001166 :                     ; 		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1994/ 6001166 :                     ; 		mov	#Mars_LoadCacheRam,r0
(1) 1995/ 6001166 :                     ; 		jsr	@r0
(1) 1996/ 6001166 :                     ; 		nop
(1) 1997/ 6001166 :                     ; 		mov	#0,r0
(1) 1998/ 6001166 :                     ; 		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1999/ 6001166 :                     ; 		bra	mstr_gfx3_loop
(1) 2000/ 6001166 :                     ; 		nop
(1) 2001/ 6001166 :                     ;
(1) 2002/ 6001166 :                     ; mstr_gfx3_init_2:
(1) 2003/ 6001166 :                     ; 		mov 	#_vdpreg,r1
(1) 2004/ 6001166 :                     ; 		mov	#1,r0
(1) 2005/ 6001166 :                     ; 		mov.b	r0,@(bitmapmd,r1)
(1) 2006/ 6001166 :                     ;
(1) 2007/ 6001166 :                     ; ; -------------------------------
(1) 2008/ 6001166 :                     ; ; Loop
(1) 2009/ 6001166 :                     ; ; -------------------------------
(1) 2010/ 6001166 :                     ;
(1) 2011/ 6001166 :                     ; mstr_gfx3_loop:
(1) 2012/ 6001166 :                     ; 		mov	#$200,r1
(1) 2013/ 6001166 :                     ; 		mov	#0,r2
(1) 2014/ 6001166 :                     ; 		mov	#0,r3
(1) 2015/ 6001166 :                     ; 		mov	#320,r4
(1) 2016/ 6001166 :                     ; 		mov	#240,r5
(1) 2017/ 6001166 :                     ; 		mov	#320*240,r6
(1) 2018/ 6001166 :                     ; 		mov	#MarsVideo_SetSuperSpr,r0
(1) 2019/ 6001166 :                     ; 		jsr	@r0
(1) 2020/ 6001166 :                     ; 		nop
(1) 2021/ 6001166 :                     ; 		mov	#MarsVideo_DrawScaled,r0
(1) 2022/ 6001166 :                     ; 		jsr	@r0
(1) 2023/ 6001166 :                     ; 		nop
(1) 2024/ 6001166 :                     ; 		mov	#MarsVideo_DrawSuperSpr,r0	; Draw Super Sprites
(1) 2025/ 6001166 :                     ; 		jsr	@r0
(1) 2026/ 6001166 :                     ; 		nop
(1) 2027/ 6001166 :                     ; 		mov	#$200,r1
(1) 2028/ 6001166 :                     ; 		mov	#320,r2
(1) 2029/ 6001166 :                     ; 		mov	#240,r3
(1) 2030/ 6001166 :                     ; 		mov	#MarsVideo_MakeNametbl,r0
(1) 2031/ 6001166 :                     ; 		jsr	@r0
(1) 2032/ 6001166 :                     ; 		mov	#0,r4
(1) 2033/ 6001166 :                     ; 		mov	#_vdpreg,r1			; Framebuffer swap REQUEST
(1) 2034/ 6001166 :                     ; 		mov.b	@(framectl,r1),r0
(1) 2035/ 6001166 :                     ; 		xor	#1,r0
(1) 2036/ 6001166 :                     ; 		mov.b	r0,@(framectl,r1)
(1) 2037/ 6001166 :                     ; 		bra	mstr_ready
(1) 2038/ 6001166 :                     ; 		nop
(1) 2039/ 6001166 :                     ; 		align 4
(1) 2040/ 6001166 :                     ; 		ltorg
(1) 2041/ 6001166 :                     ; 		align 4
(1) 2042/ 6001166 :                     
(1) 2043/ 6001166 :                     ; ============================================================
(1) 2044/ 6001166 :                     
(1) 2045/ 6001166 :                     ; 	; ---------------------------------------
(1) 2046/ 6001166 :                     ; 	; Prepare WATCHDOG interrupt
(1) 2047/ 6001166 :                     ; 		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 2048/ 6001166 :                     ; 		tst     #1,r0
(1) 2049/ 6001166 :                     ; 		bf	.page_2
(1) 2050/ 6001166 :                     ; 		mov	#RAM_Mars_PlgnList_0,r0
(1) 2051/ 6001166 :                     ; 		mov	#RAM_Mars_PlgnNum_0,r1
(1) 2052/ 6001166 :                     ; 		bra	.cont_plgn
(1) 2053/ 6001166 :                     ; 		nop
(1) 2054/ 6001166 :                     ; .page_2:
(1) 2055/ 6001166 :                     ; 		mov	#RAM_Mars_PlgnList_1,r0
(1) 2056/ 6001166 :                     ; 		mov	#RAM_Mars_PlgnNum_1,r1
(1) 2057/ 6001166 :                     ; 		nop
(1) 2058/ 6001166 :                     ; .cont_plgn:
(1) 2059/ 6001166 :                     ; 		mov	r0,@(marsGbl_CurrRdPlgn,gbr)
(1) 2060/ 6001166 :                     ; 		mov	@r1,r0
(1) 2061/ 6001166 :                     ; 		mov.w	r0,@(marsGbl_CntrRdPlgn,gbr)
(1) 2062/ 6001166 :                     ;
(1) 2063/ 6001166 :                     ; 		mov	#RAM_Mars_SVdpDrwList,r0		; Reset DDA pieces Read/Write points
(1) 2064/ 6001166 :                     ; 		mov	r0,@(marsGbl_PlyPzList_R,gbr)		; And counter
(1) 2065/ 6001166 :                     ; 		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(1) 2066/ 6001166 :                     ; 		mov	r0,@(marsGbl_PlyPzList_Start,gbr)
(1) 2067/ 6001166 :                     ; 		mov	#RAM_Mars_SVdpDrwList_E,r0
(1) 2068/ 6001166 :                     ; 		mov	r0,@(marsGbl_PlyPzList_End,gbr)
(1) 2069/ 6001166 :                     ; 		mov	#0,r1
(1) 2070/ 6001166 :                     ; 		mov	#$20,r2
(1) 2071/ 6001166 :                     ; 		mov	#MarsVideo_SetWatchdog,r0
(1) 2072/ 6001166 :                     ; 		jsr	@r0
(1) 2073/ 6001166 :                     ; 		nop
(1) 2074/ 6001166 :                     ;
(1) 2075/ 6001166 :                     ; 	; ---------------------------------------
(1) 2076/ 6001166 :                     ; 	; Clear screen
(1) 2077/ 6001166 :                     ; 	; ---------------------------------------
(1) 2078/ 6001166 :                     ; 		mov.w	@(marsGbl_MdDrawTmr,gbr),r0
(1) 2079/ 6001166 :                     ; 		tst	r0,r0
(1) 2080/ 6001166 :                     ; 		bf	.no_redraw_2
(1) 2081/ 6001166 :                     ; 		mov	#$200,r1		; *** This also counts as a delay for Watchdog ***
(1) 2082/ 6001166 :                     ; 		mov	#(320+16)/2,r2
(1) 2083/ 6001166 :                     ; 		mov	#240,r3
(1) 2084/ 6001166 :                     ; 		mov	#0,r4
(1) 2085/ 6001166 :                     ; 		mov	#MarsVideo_ClearScreen,r0
(1) 2086/ 6001166 :                     ; 		jsr	@r0
(1) 2087/ 6001166 :                     ; 		nop
(1) 2088/ 6001166 :                     ; .no_redraw_2:
(1) 2089/ 6001166 :                     ; 		mov	#$200,r1
(1) 2090/ 6001166 :                     ; 		mov	#512,r2			; <-- fixed WIDTH
(1) 2091/ 6001166 :                     ; 		mov	#240,r3
(1) 2092/ 6001166 :                     ; 		mov	#MarsVideo_MakeNametbl,r0
(1) 2093/ 6001166 :                     ; 		jsr	@r0
(1) 2094/ 6001166 :                     ; 		mov	#0,r4
(1) 2095/ 6001166 :                     ;
(1) 2096/ 6001166 :                     ; 	; ---------------------------------------
(1) 2097/ 6001166 :                     ;
(1) 2098/ 6001166 :                     ; .wait_wd:	mov.w	@(marsGbl_WdgStatus,gbr),r0
(1) 2099/ 6001166 :                     ; 		tst	r0,r0
(1) 2100/ 6001166 :                     ; 		bt	.wait_wd
(1) 2101/ 6001166 :                     ; 		mov	#MarsVideo_DrawPzPlgns,r0
(1) 2102/ 6001166 :                     ; 		jsr	@r0
(1) 2103/ 6001166 :                     ; 		nop
(1) 2104/ 6001166 :                     ; .no_swap:
(1) 2105/ 6001166 :                     ; 		mov	#_sysreg+comm14,r1	; Wait Slave CPU
(1) 2106/ 6001166 :                     ; .wait:		mov.w	@r1,r0
(1) 2107/ 6001166 :                     ; 		and	#$FF,r0
(1) 2108/ 6001166 :                     ; 		tst	r0,r0
(1) 2109/ 6001166 :                     ; 		bf	.wait
(1) 2110/ 6001166 :                     ; 		mov	#_vdpreg,r1		; Framebuffer swap REQUEST
(1) 2111/ 6001166 :                     ; 		mov.b	@(framectl,r1),r0
(1) 2112/ 6001166 :                     ; 		xor	#1,r0
(1) 2113/ 6001166 :                     ; 		mov.b	r0,@(framectl,r1)
(1) 2114/ 6001166 :                     
(1) 2115/ 6001166 :                     ; 		bra	mstr_ready
(1) 2116/ 6001166 :                     ; 		nop
(1) 2117/ 6001166 :                     ; 		align 4
(1) 2118/ 6001166 :                     ; 		ltorg
(1) 2119/ 6001166 :                     
(1) 2120/ 6001166 :                     ; ====================================================================
(1) 2121/ 6001166 :                     ; ----------------------------------------------------------------
(1) 2122/ 6001166 :                     ; Slave entry
(1) 2123/ 6001166 :                     ; ----------------------------------------------------------------
(1) 2124/ 6001166 :                     
(1) 2125/ 6001166 :                     		align 4
(1) 2126/ 6001168 :                     SH2_S_Entry:
(1) 2127/ 6001168 : DF2D                		mov	#STACK_SLV,r15		; Reset stack
(1) 2128/ 600116A : D02E                		mov	#SH2_Slave,r0		; Reset vbr
(1) 2129/ 600116C : 402E                		ldc	r0,vbr
(1) 2130/ 600116E : 916D                		mov.l	#_FRT,r1
(1) 2131/ 6001170 : E000                		mov	#0,r0
(1) 2132/ 6001172 : 8010                		mov.b	r0,@(0,r1)
(1) 2133/ 6001174 : E0E2                		mov	#$FFFFFFE2,r0
(1) 2134/ 6001176 : 8017                		mov.b	r0,@(7,r1)
(1) 2135/ 6001178 : E000                		mov	#0,r0
(1) 2136/ 600117A : 8014                		mov.b	r0,@(4,r1)
(1) 2137/ 600117C : E001                		mov	#1,r0
(1) 2138/ 600117E : 8015                		mov.b	r0,@(5,r1)
(1) 2139/ 6001180 : E000                		mov	#0,r0
(1) 2140/ 6001182 : 8016                		mov.b	r0,@(6,r1)
(1) 2141/ 6001184 : E001                		mov	#1,r0
(1) 2142/ 6001186 : 8011                		mov.b	r0,@(1,r1)
(1) 2143/ 6001188 : E000                		mov	#0,r0
(1) 2144/ 600118A : 8013                		mov.b	r0,@(3,r1)
(1) 2145/ 600118C : 8012                		mov.b	r0,@(2,r1)
(1) 2146/ 600118E : E0F2                		mov	#$FFFFFFF2,r0		; <-- PWM interrupt needs this
(1) 2147/ 6001190 : 8017                		mov.b	r0,@(7,r1)		; or it will freeze for no reason.
(1) 2148/ 6001192 : E000                		mov	#0,r0
(1) 2149/ 6001194 : 8014                		mov.b	r0,@(4,r1)
(1) 2150/ 6001196 : E001                		mov	#1,r0
(1) 2151/ 6001198 : 8015                		mov.b	r0,@(5,r1)
(1) 2152/ 600119A : E0E2                		mov	#$FFFFFFE2,r0
(1) 2153/ 600119C : 8017                		mov.b	r0,@(7,r1)		; <-- ***
(1) 2154/ 600119E : 9056                		mov.l   #$FFFFFEE2,r0		; Watchdog: Set interrupt priority bits (IPRA)
(1) 2155/ 60011A0 : E150                		mov     #%0101<<4,r1
(1) 2156/ 60011A2 : 2011                		mov.w   r1,@r0
(1) 2157/ 60011A4 : 9054                		mov.l   #$FFFFFEE4,r0
(1) 2158/ 60011A6 : E148                		mov     #$120/4,r1		; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1) 2159/ 60011A8 : 4118                		shll8   r1
(1) 2160/ 60011AA : 2011                		mov.w   r1,@r0
(1) 2161/ 60011AC : D01E                		mov	#RAM_Mars_Global,r0	; Reset gbr
(1) 2162/ 60011AE : 401E                		ldc	r0,gbr
(1) 2163/ 60011B0 : BD04                		bsr	MarsSound_Init		; Init sound
(1) 2164/ 60011B2 : 0009                		nop
(1) 2165/ 60011B4 :                     
(1) 2166/ 60011B4 :                     ; ====================================================================
(1) 2167/ 60011B4 :                     ; ----------------------------------------------------------------
(1) 2168/ 60011B4 :                     ; Slave main code
(1) 2169/ 60011B4 :                     ; ----------------------------------------------------------------
(1) 2170/ 60011B4 :                     
(1) 2171/ 60011B4 :                     SH2_S_HotStart:
(1) 2172/ 60011B4 : 914D                		mov	#$FFFFFE80,r1
(1) 2173/ 60011B6 : 904D                		mov.w	#$A518,r0		; Disable Watchdog
(1) 2174/ 60011B8 : 2101                		mov.w	r0,@r1
(1) 2175/ 60011BA : 914C                		mov	#_CCR,r1		; Reset CACHE
(1) 2176/ 60011BC : E010                		mov	#$10,r0
(1) 2177/ 60011BE : 2100                		mov.b	r0,@r1
(1) 2178/ 60011C0 : 0009                		nop
(1) 2179/ 60011C2 : 0009                		nop
(1) 2180/ 60011C4 : 0009                		nop
(1) 2181/ 60011C6 : 0009                		nop
(1) 2182/ 60011C8 : 0009                		nop
(1) 2183/ 60011CA : 200A                		xor	r0,r0
(1) 2184/ 60011CC : D217                		mov	#_sysreg+comm14,r2
(1) 2185/ 60011CE : 2201                		mov.w	r0,@r2
(1) 2186/ 60011D0 : E009                		mov	#9,r0
(1) 2187/ 60011D2 : 2100                		mov.b	r0,@r1
(1) 2188/ 60011D4 : D016                		mov	#Mars_ClearCacheRam,r0
(1) 2189/ 60011D6 : 400B                		jsr	@r0
(1) 2190/ 60011D8 : 0009                		nop
(1) 2191/ 60011DA : D116                		mov	#CACHE_SLAVE,r1
(1) 2192/ 60011DC : 923C                		mov	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r2
(1) 2193/ 60011DE : D016                		mov	#Mars_LoadCacheRam,r0
(1) 2194/ 60011E0 : 400B                		jsr	@r0
(1) 2195/ 60011E2 : 0009                		nop
(1) 2196/ 60011E4 : E000                		mov	#0,r0			; Stop ALL active PWM channels
(1) 2197/ 60011E6 : D115                		mov	#MarsSnd_PwmChnls,r1
(1) 2198/ 60011E8 : E207                		mov	#MAX_PWMCHNL,r2
(1) 2199/ 60011EA : E328                		mov	#sizeof_sndchn,r3
(1) 2200/ 60011EC :                     .clr_enbl:
(1) 2201/ 60011EC : 1100                		mov	r0,@(mchnsnd_enbl,r1)
(1) 2202/ 60011EE : 4210                		dt	r2
(1) 2203/ 60011F0 : 8FFC                		bf/s	.clr_enbl
(1) 2204/ 60011F2 : 313C                		add	r3,r1
(1) 2205/ 60011F4 : D112                		mov	#_sysreg,r1
(1) 2206/ 60011F6 : 6011                		mov.w	@r1,r0
(1) 2207/ 60011F8 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0
(1) 2208/ 60011FA : 2101                		mov.w	r0,@r1
(1) 2209/ 60011FC : E000                    		mov	#0,r0
(1) 2210/ 60011FE : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 2211/ 6001200 : 811B                		mov.w	r0,@(vintclr,r1)
(1) 2212/ 6001202 : 811C                		mov.w	r0,@(hintclr,r1)
(1) 2213/ 6001204 : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 2214/ 6001206 : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 2215/ 6001208 : D10E                		mov	#_sysreg+comm10,r1
(1) 2216/ 600120A : 6011                		mov.w	@r1,r0
(1) 2217/ 600120C : 2008                .wait_md:	tst	r0,r0
(1) 2218/ 600120E : 8BFD                		bf	.wait_md
(1) 2219/ 6001210 : D10D                		mov	#_sysreg+comm12,r1
(1) 2220/ 6001212 : 6011                .wait_mst:	mov.w	@r1,r0
(1) 2221/ 6001214 : 2008                		tst	r0,r0
(1) 2222/ 6001216 : 8BFC                		bf	.wait_mst
(1) 2223/ 6001218 : E020                		mov	#$20,r0				; Interrupts ON
(1) 2224/ 600121A : 400E                		ldc	r0,sr
(1) 2225/ 600121C : A01E                		bra	slave_loop
(1) 2226/ 600121E : 0009                		nop
(1) 2227/ 6001220 :                     		align 4
(1) 2228/ 6001220 : 0603 F000 0600 0124 		ltorg
                    2600 7B90 2000 402E 
                    0600 079A 0600 1F40 
                    0600 07B0 C000 05D8 
                    2000 4000 2000 402A 
                    2000 402C FE10 FEE2 
                    FEE4 FE80 A518 FE92 
                    01E6                
(1) 2229/ 600125A :                     
(1) 2230/ 600125A :                     ; ----------------------------------------------------------------
(1) 2231/ 600125A :                     ; SLAVE CPU loop
(1) 2232/ 600125A :                     ;
(1) 2233/ 600125A :                     ; comm14:
(1) 2234/ 600125A :                     ; bssscccc llllllll
(1) 2235/ 600125A :                     ;
(1) 2236/ 600125A :                     ; b - busy bit on the CMD interrupt
(1) 2237/ 600125A :                     ;     (so 68k knows that the interrupt is active)
(1) 2238/ 600125A :                     ; s - status bits for some CMD interrupt tasks
(1) 2239/ 600125A :                     ; c - command number for CMD interrupt
(1) 2240/ 600125A :                     ; l - MAIN LOOP command/task, clears on finish
(1) 2241/ 600125A :                     ; ----------------------------------------------------------------
(1) 2242/ 600125A :                     
(1) 2243/ 600125A :                     		align 4
(1) 2244/ 600125C :                     slave_loop:
(1) 2251/ 600125C : D31B                		mov	#.list,r3		; Default LOOP points
(1) 2252/ 600125E : D21C                		mov	#_sysreg+comm14,r2
(1) 2253/ 6001260 : 6021                		mov.w	@r2,r0			; r0 - INIT bit
(1) 2254/ 6001262 : C90F                		and	#%00001111,r0
(1) 2255/ 6001264 : 4008                		shll2	r0
(1) 2256/ 6001266 : 043E                		mov	@(r3,r0),r4
(1) 2257/ 6001268 : 442B                		jmp	@r4
(1) 2258/ 600126A : 0009                		nop
(1) 2259/ 600126C :                     		align 4
(1) 2260/ 600126C :                     .list:
(1) 2261/ 600126C : 0600 125C           		dc.l slave_loop		; $00
(1) 2262/ 6001270 : 0600 12AC           		dc.l .slv_task_1	; $01 - Build 3D models for the next frame
(1) 2263/ 6001274 : 0600 12B8           		dc.l .slv_task_2	; $02
(1) 2264/ 6001278 : 0600 125C           		dc.l slave_loop		; $03
(1) 2265/ 600127C : 0600 125C           		dc.l slave_loop		; $04
(1) 2266/ 6001280 : 0600 125C           		dc.l slave_loop		; $05
(1) 2267/ 6001284 : 0600 125C           		dc.l slave_loop		; $06
(1) 2268/ 6001288 : 0600 125C           		dc.l slave_loop		; $07
(1) 2269/ 600128C : 0600 125C           		dc.l slave_loop		; $08
(1) 2270/ 6001290 : 0600 125C           		dc.l slave_loop		; $09
(1) 2271/ 6001294 : 0600 125C           		dc.l slave_loop		; $0A
(1) 2272/ 6001298 : 0600 125C           		dc.l slave_loop		; $0B
(1) 2273/ 600129C : 0600 125C           		dc.l slave_loop		; $0C
(1) 2274/ 60012A0 : 0600 125C           		dc.l slave_loop		; $0D
(1) 2275/ 60012A4 : 0600 125C           		dc.l slave_loop		; $0E
(1) 2276/ 60012A8 : 0600 125C           		dc.l slave_loop		; $0F
(1) 2277/ 60012AC :                     
(1) 2278/ 60012AC :                     ; ============================================================
(1) 2279/ 60012AC :                     ; ---------------------------------------
(1) 2280/ 60012AC :                     ; Slave task $01
(1) 2281/ 60012AC :                     ; ---------------------------------------
(1) 2282/ 60012AC :                     
(1) 2283/ 60012AC :                     		align 4
(1) 2284/ 60012AC :                     .slv_task_1:
(1) 2285/ 60012AC : D009                		mov	#MarsMdl_MdlLoop,r0
(1) 2286/ 60012AE : 400B                		jsr	@r0
(1) 2287/ 60012B0 : 0009                		nop
(1) 2288/ 60012B2 : A003                		bra	.slv_exit
(1) 2289/ 60012B4 : 0009                		nop
(1) 2290/ 60012B6 :                     		align 4
(1) 2291/ 60012B8 :                     
(1) 2292/ 60012B8 :                     ; ============================================================
(1) 2293/ 60012B8 :                     ; ---------------------------------------
(1) 2294/ 60012B8 :                     ; Slave task $02
(1) 2295/ 60012B8 :                     ; ---------------------------------------
(1) 2296/ 60012B8 :                     
(1) 2297/ 60012B8 :                     		align 4
(1) 2298/ 60012B8 :                     .slv_task_2:
(1) 2299/ 60012B8 : A000                		bra	.slv_exit
(1) 2300/ 60012BA : 0009                		nop
(1) 2301/ 60012BC :                     		align 4
(1) 2302/ 60012BC :                     
(1) 2303/ 60012BC :                     ; ============================================================
(1) 2304/ 60012BC :                     
(1) 2305/ 60012BC :                     ; JMP only
(1) 2306/ 60012BC :                     .slv_exit:
(1) 2307/ 60012BC : D404                		mov	#_sysreg+comm14,r4	; Finish task
(1) 2308/ 60012BE : D106                		mov	#$FF00,r1
(1) 2309/ 60012C0 : 6041                		mov.w	@r4,r0
(1) 2310/ 60012C2 : 2019                		and	r1,r0
(1) 2311/ 60012C4 : 2401                		mov.w	r0,@r4
(1) 2312/ 60012C6 : AFC9                		bra	slave_loop
(1) 2313/ 60012C8 : 0009                		nop
(1) 2314/ 60012CA :                     		align 4
(1) 2315/ 60012CC : 0600 126C 2000 402E 		ltorg
                    C000 0178 0000 FF00 
(1) 2316/ 60012DC :                     
(1) 2317/ 60012DC :                     ; ------------------------------------------------
(1) 2318/ 60012DC :                     ; Includes
(1) 2319/ 60012DC :                     ; ------------------------------------------------
(1) 2320/ 60012DC :                     
(1) 2321/ 60012DC :                     		include "system/mars/cache/cache_m_scrlbg.asm"
(2)    1/ 60012DC :                     ; ====================================================================
(2)    2/ 60012DC :                     ; ----------------------------------------------------------------
(2)    3/ 60012DC :                     ; CACHE code for MASTER CPU
(2)    4/ 60012DC :                     ;
(2)    5/ 60012DC :                     ; LIMIT: $800 bytes
(2)    6/ 60012DC :                     ; ----------------------------------------------------------------
(2)    7/ 60012DC :                     
(2)    8/ 60012DC :                     		align 4
(2)    9/ 60012DC :                     CACHE_MSTR_SCRL:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 9170                		mov	#_FRT,r1
(2)   18/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   19/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   20/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   21/FFFFFFFFC0000008 :                     
(2)   22/FFFFFFFFC0000008 : D132                		mov	#Cach_WdgBuffWr-4,r1
(2)   23/FFFFFFFFC000000A : 6012                		mov	@r1,r0
(2)   24/FFFFFFFFC000000C : 2008                		tst	r0,r0
(2)   25/FFFFFFFFC000000E : 8B0B                		bf	.draw_lr
(2)   26/FFFFFFFFC0000010 : E020                		mov	#$20,r0
(2)   27/FFFFFFFFC0000012 : 3108                		sub	r0,r1
(2)   28/FFFFFFFFC0000014 : 6012                		mov	@r1,r0
(2)   29/FFFFFFFFC0000016 : 2008                		tst	r0,r0
(2)   30/FFFFFFFFC0000018 : 8B50                		bf	.draw_ud
(2)   31/FFFFFFFFC000001A :                     .finish:
(2)   32/FFFFFFFFC000001A : E000                		mov	#0,r0
(2)   33/FFFFFFFFC000001C : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)   34/FFFFFFFFC000001E : 9162                		mov	#$FFFFFE80,r1			; Stop watchdog
(2)   35/FFFFFFFFC0000020 : 9062                		mov.w   #$A518,r0
(2)   36/FFFFFFFFC0000022 : 2101                		mov.w   r0,@r1
(2)   37/FFFFFFFFC0000024 : 000B                		rts
(2)   38/FFFFFFFFC0000026 : 0009                		nop
(2)   39/FFFFFFFFC0000028 :                     		align 4
(2)   40/FFFFFFFFC0000028 :                     
(2)   41/FFFFFFFFC0000028 :                     ; ----------------------------------------
(2)   42/FFFFFFFFC0000028 :                     ; Draw timer L/R
(2)   43/FFFFFFFFC0000028 :                     ; ----------------------------------------
(2)   44/FFFFFFFFC0000028 :                     
(2)   45/FFFFFFFFC0000028 :                     .draw_lr:
(2)   46/FFFFFFFFC0000028 : 4010                		dt	r0
(2)   47/FFFFFFFFC000002A : 2102                		mov	r0,@r1
(2)   48/FFFFFFFFC000002C :                     
(2)   49/FFFFFFFFC000002C : D02A                		mov	#Cach_WdBackup_S,r0
(2)   50/FFFFFFFFC000002E : 2026                		mov	r2,@-r0
(2)   51/FFFFFFFFC0000030 : 2036                		mov	r3,@-r0
(2)   52/FFFFFFFFC0000032 : 2046                		mov	r4,@-r0
(2)   53/FFFFFFFFC0000034 : 2056                		mov	r5,@-r0
(2)   54/FFFFFFFFC0000036 : 2066                		mov	r6,@-r0
(2)   55/FFFFFFFFC0000038 : 2076                		mov	r7,@-r0
(2)   56/FFFFFFFFC000003A : 2086                		mov	r8,@-r0
(2)   57/FFFFFFFFC000003C : 2096                		mov	r9,@-r0
(2)   58/FFFFFFFFC000003E : 20A6                		mov	r10,@-r0
(2)   59/FFFFFFFFC0000040 : 20B6                		mov	r11,@-r0
(2)   60/FFFFFFFFC0000042 : 20C6                		mov	r12,@-r0
(2)   61/FFFFFFFFC0000044 : 20D6                		mov	r13,@-r0
(2)   62/FFFFFFFFC0000046 : 20E6                		mov	r14,@-r0
(2)   63/FFFFFFFFC0000048 : 4012                		sts	macl,@-r0
(2)   64/FFFFFFFFC000004A :                     
(2)   65/FFFFFFFFC000004A :                     ; $00 - Layout data (read)
(2)   66/FFFFFFFFC000004A :                     ; $04 - FB pos (read)
(2)   67/FFFFFFFFC000004A :                     ; $08 - Layout width (next block)
(2)   68/FFFFFFFFC000004A :                     ; $0C - FB width (next line)
(2)   69/FFFFFFFFC000004A :                     ; $10 - FB FULL size
(2)   70/FFFFFFFFC000004A :                     ; $14 - FB base
(2)   71/FFFFFFFFC000004A :                     ; $18 - Block data
(2)   72/FFFFFFFFC000004A :                     ; $1C - Block counter
(2)   73/FFFFFFFFC000004A :                     
(2)   74/FFFFFFFFC000004A : DE24                		mov	#Cach_WdgBuffRd,r14
(2)   75/FFFFFFFFC000004C : 5DE5                		mov	@($14,r14),r13		; r13 - FB base
(2)   76/FFFFFFFFC000004E : 5CE4                		mov	@($10,r14),r12		; r12 - FB full size
(2)   77/FFFFFFFFC0000050 : 5BE3                		mov	@($0C,r14),r11		; r11 - FB width
(2)   78/FFFFFFFFC0000052 : 5AE1                		mov	@($04,r14),r10		; r10 - FB x/y pos
(2)   79/FFFFFFFFC0000054 : 59E6                		mov	@($18,r14),r9		; r9 - Block data
(2)   80/FFFFFFFFC0000056 : 68E2                		mov	@r14,r8			; r8 - Layout data
(2)   81/FFFFFFFFC0000058 : 9547                		mov	#320,r5
(2)   82/FFFFFFFFC000005A :                     
(2)   83/FFFFFFFFC000005A : 6080                		mov.b	@r8,r0
(2)   84/FFFFFFFFC000005C : C9FF                		and	#$FF,r0
(2)   85/FFFFFFFFC000005E : 9145                		mov	#16*16,r1
(2)   86/FFFFFFFFC0000060 : 210E                		mulu	r0,r1
(2)   87/FFFFFFFFC0000062 : 001A                		sts	macl,r0
(2)   88/FFFFFFFFC0000064 : 390C                		add	r0,r9
(2)   89/FFFFFFFFC0000066 :                     
(2)   90/FFFFFFFFC0000066 : E710                		mov	#16,r7
(2)   91/FFFFFFFFC0000068 :                     .y_loop:
(2)   92/FFFFFFFFC0000068 : 3AC7                		cmp/gt	r12,r10
(2)   93/FFFFFFFFC000006A : 8B00                		bf	.lne_sz
(2)   94/FFFFFFFFC000006C : 3AC8                		sub	r12,r10
(2)   95/FFFFFFFFC000006E :                     .lne_sz:
(2)   96/FFFFFFFFC000006E : 63A3                		mov	r10,r3
(2)   97/FFFFFFFFC0000070 : E604                		mov	#16/4,r6
(2)   98/FFFFFFFFC0000072 :                     .x_loop:
(2)   99/FFFFFFFFC0000072 : 64D3                		mov	r13,r4
(2)  100/FFFFFFFFC0000074 : 343C                		add	r3,r4
(2)  101/FFFFFFFFC0000076 : 6096                		mov	@r9+,r0
(2)  102/FFFFFFFFC0000078 : 2402                		mov	r0,@r4
(2)  103/FFFFFFFFC000007A : 3353                		cmp/ge	r5,r3
(2)  104/FFFFFFFFC000007C : 8903                		bt	.ex_line
(2)  105/FFFFFFFFC000007E : 64D3                		mov	r13,r4
(2)  106/FFFFFFFFC0000080 : 343C                		add	r3,r4
(2)  107/FFFFFFFFC0000082 : 34CC                		add	r12,r4
(2)  108/FFFFFFFFC0000084 : 2402                		mov	r0,@r4
(2)  109/FFFFFFFFC0000086 :                     .ex_line:
(2)  110/FFFFFFFFC0000086 : 4610                		dt	r6
(2)  111/FFFFFFFFC0000088 : 8FF3                		bf/s	.x_loop
(2)  112/FFFFFFFFC000008A : 7304                		add	#4,r3
(2)  113/FFFFFFFFC000008C : 4710                		dt	r7
(2)  114/FFFFFFFFC000008E : 8FEB                		bf/s	.y_loop
(2)  115/FFFFFFFFC0000090 : 3ABC                		add	r11,r10
(2)  116/FFFFFFFFC0000092 :                     
(2)  117/FFFFFFFFC0000092 : 50E2                		mov	@($08,r14),r0
(2)  118/FFFFFFFFC0000094 : 380C                		add	r0,r8
(2)  119/FFFFFFFFC0000096 : 2E82                		mov	r8,@r14
(2)  120/FFFFFFFFC0000098 : 1EA1                		mov	r10,@($04,r14)	; Save FB pos
(2)  121/FFFFFFFFC000009A :                     
(2)  122/FFFFFFFFC000009A : D011                		mov	#Cach_WdBackup_L,r0
(2)  123/FFFFFFFFC000009C : 4016                		lds	@r0+,macl
(2)  124/FFFFFFFFC000009E : 6E06                		mov	@r0+,r14
(2)  125/FFFFFFFFC00000A0 : 6D06                		mov	@r0+,r13
(2)  126/FFFFFFFFC00000A2 : 6C06                		mov	@r0+,r12
(2)  127/FFFFFFFFC00000A4 : 6B06                		mov	@r0+,r11
(2)  128/FFFFFFFFC00000A6 : 6A06                		mov	@r0+,r10
(2)  129/FFFFFFFFC00000A8 : 6906                		mov	@r0+,r9
(2)  130/FFFFFFFFC00000AA : 6806                		mov	@r0+,r8
(2)  131/FFFFFFFFC00000AC : 6706                		mov	@r0+,r7
(2)  132/FFFFFFFFC00000AE : 6606                		mov	@r0+,r6
(2)  133/FFFFFFFFC00000B0 : 6506                		mov	@r0+,r5
(2)  134/FFFFFFFFC00000B2 : 6406                		mov	@r0+,r4
(2)  135/FFFFFFFFC00000B4 : 6306                		mov	@r0+,r3
(2)  136/FFFFFFFFC00000B6 : 6206                		mov	@r0+,r2
(2)  137/FFFFFFFFC00000B8 : A002                		bra	.next_wd
(2)  138/FFFFFFFFC00000BA : 0009                		nop
(2)  139/FFFFFFFFC00000BC :                     
(2)  140/FFFFFFFFC00000BC :                     ; ----------------------------------------
(2)  141/FFFFFFFFC00000BC :                     ; Draw timer U/D
(2)  142/FFFFFFFFC00000BC :                     ; ----------------------------------------
(2)  143/FFFFFFFFC00000BC :                     
(2)  144/FFFFFFFFC00000BC :                     .draw_ud:
(2)  145/FFFFFFFFC00000BC : 4010                		dt	r0
(2)  146/FFFFFFFFC00000BE : 2102                		mov	r0,@r1
(2)  147/FFFFFFFFC00000C0 :                     
(2)  148/FFFFFFFFC00000C0 :                     ; ----------------------------------------
(2)  149/FFFFFFFFC00000C0 :                     
(2)  150/FFFFFFFFC00000C0 :                     .next_wd:
(2)  151/FFFFFFFFC00000C0 : 9111                		mov	#$FFFFFE80,r1
(2)  152/FFFFFFFFC00000C2 : 9011                		mov.w   #$A518,r0		; OFF
(2)  153/FFFFFFFFC00000C4 : 2101                		mov.w   r0,@r1
(2)  154/FFFFFFFFC00000C6 : CB20                		or      #$20,r0			; ON
(2)  155/FFFFFFFFC00000C8 : 2101                		mov.w   r0,@r1
(2)  156/FFFFFFFFC00000CA : 9010                		mov.w   #$5A20,r0		; Timer for the next WD
(2)  157/FFFFFFFFC00000CC : 2101                		mov.w   r0,@r1
(2)  158/FFFFFFFFC00000CE : 000B                		rts
(2)  159/FFFFFFFFC00000D0 : 0009                		nop
(2)  160/FFFFFFFFC00000D2 :                     		align 4
(2)  161/FFFFFFFFC00000D4 :                     
(2)  162/FFFFFFFFC00000D4 : C000 0414 C000 0470 		ltorg
                    C000 03F8 C000 0438 
                    FE10 FE80 A518 0140 
                    0100 5A20           
(2)  163/FFFFFFFFC00000F0 :                     
(2)  164/FFFFFFFFC00000F0 :                     ; 	; NEXT ENTER
(2)  165/FFFFFFFFC00000F0 :                     ; 		mov.l   #$FFFFFE80,r1
(2)  166/FFFFFFFFC00000F0 :                     ; 		mov.w   #$A518,r0		; OFF
(2)  167/FFFFFFFFC00000F0 :                     ; 		mov.w   r0,@r1
(2)  168/FFFFFFFFC00000F0 :                     ; 		or      #$20,r0			; ON
(2)  169/FFFFFFFFC00000F0 :                     ; 		mov.w   r0,@r1
(2)  170/FFFFFFFFC00000F0 :                     ; 		mov.w   #$5A20,r0		; Timer for the next WD
(2)  171/FFFFFFFFC00000F0 :                     ; 		mov.w   r0,@r1
(2)  172/FFFFFFFFC00000F0 :                     ; 		rts
(2)  173/FFFFFFFFC00000F0 :                     ; 		nop
(2)  174/FFFFFFFFC00000F0 :                     ; 		align 4
(2)  175/FFFFFFFFC00000F0 :                     ; .finish_now:
(2)  176/FFFFFFFFC00000F0 :                     ; 		mov	#1,r0
(2)  177/FFFFFFFFC00000F0 :                     ; 		mov.w	r0,@(marsGbl_WdgStatus,gbr)
(2)  178/FFFFFFFFC00000F0 :                     ; 		mov	#$FFFFFE80,r1		; Stop watchdog
(2)  179/FFFFFFFFC00000F0 :                     ; 		mov.w   #$A518,r0
(2)  180/FFFFFFFFC00000F0 :                     ; 		mov.w   r0,@r1
(2)  181/FFFFFFFFC00000F0 :                     ; 		rts
(2)  182/FFFFFFFFC00000F0 :                     ; 		nop
(2)  183/FFFFFFFFC00000F0 :                     ; 		align 4
(2)  184/FFFFFFFFC00000F0 :                     ; 		ltorg
(2)  185/FFFFFFFFC00000F0 :                     
(2)  186/FFFFFFFFC00000F0 :                     ; ====================================================================
(2)  187/FFFFFFFFC00000F0 :                     ; ----------------------------------------------------------------
(2)  188/FFFFFFFFC00000F0 :                     ; Drawing routines for the smooth-scrolling background
(2)  189/FFFFFFFFC00000F0 :                     ;
(2)  190/FFFFFFFFC00000F0 :                     ; NOTE: NO RV-ROM PROTECTION
(2)  191/FFFFFFFFC00000F0 :                     ; ----------------------------------------------------------------
(2)  192/FFFFFFFFC00000F0 :                     
(2)  193/FFFFFFFFC00000F0 :                     ; --------------------------------------------------------
(2)  194/FFFFFFFFC00000F0 :                     ; MarsVideo_DrawAll
(2)  195/FFFFFFFFC00000F0 :                     ;
(2)  196/FFFFFFFFC00000F0 :                     ; Draws the entire map into the current section of
(2)  197/FFFFFFFFC00000F0 :                     ; the Framebuffer.
(2)  198/FFFFFFFFC00000F0 :                     ;
(2)  199/FFFFFFFFC00000F0 :                     ; NOTE: Call this TWICE to draw on BOTH framebuffers.
(2)  200/FFFFFFFFC00000F0 :                     ;
(2)  201/FFFFFFFFC00000F0 :                     ; Input:
(2)  202/FFFFFFFFC00000F0 :                     ; r14 | Scrolling section (Output)
(2)  203/FFFFFFFFC00000F0 :                     ; r13 | Background buffer (Input)
(2)  204/FFFFFFFFC00000F0 :                     ; --------------------------------------------------------
(2)  205/FFFFFFFFC00000F0 :                     
(2)  206/FFFFFFFFC00000F0 :                     		align 4
(2)  207/FFFFFFFFC00000F0 :                     MarsVideo_DrawAll:
(2)  208/FFFFFFFFC00000F0 : 4F22                		sts	pr,@-r15
(2)  209/FFFFFFFFC00000F2 : 5CD3                		mov	@(scrl_intrl_size,r13),r12
(2)  210/FFFFFFFFC00000F4 : D544                		mov	#_framebuffer,r5
(2)  211/FFFFFFFFC00000F6 : 85D4                		mov.w	@(scrl_intrl_w,r13),r0
(2)  212/FFFFFFFFC00000F8 : 6B0D                		extu.w	r0,r11
(2)  213/FFFFFFFFC00000FA : 85D5                		mov.w	@(scrl_intrl_h,r13),r0
(2)  214/FFFFFFFFC00000FC : 6A0D                		extu.w	r0,r10
(2)  215/FFFFFFFFC00000FE : 50D5                		mov	@(scrl_fbdata,r13),r0
(2)  216/FFFFFFFFC0000100 : 350C                		add	r0,r5
(2)  217/FFFFFFFFC0000102 : 51EC                		mov	@(md_bg_x,r14),r1
(2)  218/FFFFFFFFC0000104 : 4129                		shlr16	r1
(2)  219/FFFFFFFFC0000106 : 52ED                		mov	@(md_bg_y,r14),r2
(2)  220/FFFFFFFFC0000108 : 4229                		shlr16	r2
(2)  221/FFFFFFFFC000010A : 59EA                		mov	@(md_bg_blk,r14),r9
(2)  222/FFFFFFFFC000010C : 611F                		exts.w	r1,r1
(2)  223/FFFFFFFFC000010E : 58E8                		mov	@(md_bg_low,r14),r8
(2)  224/FFFFFFFFC0000110 : 622F                		exts.w	r2,r2
(2)  225/FFFFFFFFC0000112 : 84E0                		mov.b	@(md_bg_bw,r14),r0
(2)  226/FFFFFFFFC0000114 : 630C                		extu.b	r0,r3
(2)  227/FFFFFFFFC0000116 : 84E1                		mov.b	@(md_bg_bh,r14),r0
(2)  228/FFFFFFFFC0000118 : 640C                		extu.b	r0,r4
(2)  229/FFFFFFFFC000011A : 85E4                		mov.w	@(md_bg_w,r14),r0
(2)  230/FFFFFFFFC000011C : 670D                		extu.w	r0,r7
(2)  231/FFFFFFFFC000011E : 85E5                		mov.w	@(md_bg_h,r14),r0
(2)  232/FFFFFFFFC0000120 : 660D                		extu.w	r0,r6
(2)  233/FFFFFFFFC0000122 : 450A                		lds	r5,mach
(2)  234/FFFFFFFFC0000124 : E0F0                		mov	#-16,r0
(2)  235/FFFFFFFFC0000126 : 2109                		and	r0,r1
(2)  236/FFFFFFFFC0000128 : 2209                		and	r0,r2
(2)  237/FFFFFFFFC000012A :                     
(2)  238/FFFFFFFFC000012A :                     	; TODO: X/Y map wrap check
(2)  239/FFFFFFFFC000012A : 213E                		mulu	r3,r1
(2)  240/FFFFFFFFC000012C : 001A                		sts	macl,r0
(2)  241/FFFFFFFFC000012E : 4019                		shlr8	r0
(2)  242/FFFFFFFFC0000130 : 380C                		add	r0,r8
(2)  243/FFFFFFFFC0000132 : 224E                		mulu	r4,r2
(2)  244/FFFFFFFFC0000134 : 001A                		sts	macl,r0
(2)  245/FFFFFFFFC0000136 : 4019                		shlr8	r0
(2)  246/FFFFFFFFC0000138 : 207E                		mulu	r7,r0
(2)  247/FFFFFFFFC000013A : 001A                		sts	macl,r0
(2)  248/FFFFFFFFC000013C : 380C                		add	r0,r8
(2)  249/FFFFFFFFC000013E :                     
(2)  250/FFFFFFFFC000013E :                     .x_in:
(2)  251/FFFFFFFFC000013E : 4115                		cmp/pl	r1		; X set
(2)  252/FFFFFFFFC0000140 : 8901                		bt	.x_pl
(2)  253/FFFFFFFFC0000142 : AFFC                		bra	.x_in
(2)  254/FFFFFFFFC0000144 : 31CC                		add	r12,r1		; <-- full size
(2)  255/FFFFFFFFC0000146 :                     .x_pl:
(2)  256/FFFFFFFFC0000146 : 31C3                		cmp/ge	r12,r1
(2)  257/FFFFFFFFC0000148 : 8B01                		bf	.x_fl
(2)  258/FFFFFFFFC000014A : AFFC                		bra	.x_pl
(2)  259/FFFFFFFFC000014C : 31C8                		sub	r12,r1
(2)  260/FFFFFFFFC000014E :                     .x_fl:
(2)  261/FFFFFFFFC000014E : 4215                		cmp/pl	r2		; Y set
(2)  262/FFFFFFFFC0000150 : 8901                		bt	.y_pl
(2)  263/FFFFFFFFC0000152 : AFFC                		bra	.x_fl
(2)  264/FFFFFFFFC0000154 : 32AC                		add	r10,r2
(2)  265/FFFFFFFFC0000156 :                     .y_pl:
(2)  266/FFFFFFFFC0000156 : 32A3                		cmp/ge	r10,r2
(2)  267/FFFFFFFFC0000158 : 8B01                		bf	.y_fl
(2)  268/FFFFFFFFC000015A : AFFC                		bra	.y_pl
(2)  269/FFFFFFFFC000015C : 32A8                		sub	r10,r2
(2)  270/FFFFFFFFC000015E :                     .y_fl:
(2)  271/FFFFFFFFC000015E : 22BE                		mulu	r11,r2
(2)  272/FFFFFFFFC0000160 : 021A                		sts	macl,r2
(2)  273/FFFFFFFFC0000162 : 6523                		mov	r2,r5
(2)  274/FFFFFFFFC0000164 : 351C                		add	r1,r5
(2)  275/FFFFFFFFC0000166 :                     
(2)  276/FFFFFFFFC0000166 :                     	; mach - _framebuffer area
(2)  277/FFFFFFFFC0000166 :                     	;  r12 - FULL Scroll area size
(2)  278/FFFFFFFFC0000166 :                     	;  r11 - Scroll area width
(2)  279/FFFFFFFFC0000166 :                     	;  r10 - Scroll area height
(2)  280/FFFFFFFFC0000166 :                     	;   r9 - Block graphics data
(2)  281/FFFFFFFFC0000166 :                     	;   r8 - Map data
(2)  282/FFFFFFFFC0000166 :                     	;   r7 - Map width
(2)  283/FFFFFFFFC0000166 :                     	;   r6 - Map height
(2)  284/FFFFFFFFC0000166 :                     	;   r5 - Current FB top
(2)  285/FFFFFFFFC0000166 :                     
(2)  286/FFFFFFFFC0000166 : E010                		mov	#16,r0
(2)  287/FFFFFFFFC0000168 : 20AE                		mulu	r10,r0
(2)  288/FFFFFFFFC000016A : 021A                		sts	macl,r2
(2)  289/FFFFFFFFC000016C : 4219                		shlr8	r2
(2)  290/FFFFFFFFC000016E :                     .y_loop:
(2)  291/FFFFFFFFC000016E : D027                		mov	#Cach_InRead_S,r0
(2)  292/FFFFFFFFC0000170 : 2056                		mov	r5,@-r0
(2)  293/FFFFFFFFC0000172 : 2086                		mov	r8,@-r0
(2)  294/FFFFFFFFC0000174 : 35C3                		cmp/ge	r12,r5
(2)  295/FFFFFFFFC0000176 : 8B00                		bf	.xy_g
(2)  296/FFFFFFFFC0000178 : 35C8                		sub	r12,r5
(2)  297/FFFFFFFFC000017A :                     .xy_g:
(2)  298/FFFFFFFFC000017A : E010                		mov	#16,r0
(2)  299/FFFFFFFFC000017C : 20BE                		mulu	r11,r0
(2)  300/FFFFFFFFC000017E : 031A                		sts	macl,r3
(2)  301/FFFFFFFFC0000180 : 4319                		shlr8	r3
(2)  302/FFFFFFFFC0000182 :                     .x_loop:
(2)  303/FFFFFFFFC0000182 : B011                		bsr	.this_blk
(2)  304/FFFFFFFFC0000184 : 6084                		mov.b	@r8+,r0
(2)  305/FFFFFFFFC0000186 : E010                		mov	#16,r0
(2)  306/FFFFFFFFC0000188 : 4310                		dt	r3
(2)  307/FFFFFFFFC000018A : 8FFA                		bf/s	.x_loop
(2)  308/FFFFFFFFC000018C : 350C                		add	r0,r5
(2)  309/FFFFFFFFC000018E : D020                		mov	#Cach_InRead_L,r0
(2)  310/FFFFFFFFC0000190 : 6806                		mov	@r0+,r8
(2)  311/FFFFFFFFC0000192 : 6506                		mov	@r0+,r5
(2)  312/FFFFFFFFC0000194 :                     
(2)  313/FFFFFFFFC0000194 : E010                		mov	#16,r0
(2)  314/FFFFFFFFC0000196 : 20BE                		mulu	r11,r0
(2)  315/FFFFFFFFC0000198 : 001A                		sts	macl,r0
(2)  316/FFFFFFFFC000019A : 350C                		add	r0,r5
(2)  317/FFFFFFFFC000019C : 387C                		add	r7,r8
(2)  318/FFFFFFFFC000019E : 4210                		dt	r2
(2)  319/FFFFFFFFC00001A0 : 8BE5                		bf	.y_loop
(2)  320/FFFFFFFFC00001A2 :                     
(2)  321/FFFFFFFFC00001A2 : 4F26                		lds	@r15+,pr
(2)  322/FFFFFFFFC00001A4 : 000B                		rts
(2)  323/FFFFFFFFC00001A6 : 0009                		nop
(2)  324/FFFFFFFFC00001A8 :                     		align 4
(2)  325/FFFFFFFFC00001A8 :                     .this_blk:
(2)  326/FFFFFFFFC00001A8 : C9FF                		and	#$FF,r0
(2)  327/FFFFFFFFC00001AA : 9137                		mov	#16*16,r1
(2)  328/FFFFFFFFC00001AC : 201E                		mulu	r1,r0
(2)  329/FFFFFFFFC00001AE : D019                		mov	#Cach_BlkBackup_S,r0
(2)  330/FFFFFFFFC00001B0 : 2026                		mov	r2,@-r0
(2)  331/FFFFFFFFC00001B2 : 2036                		mov	r3,@-r0
(2)  332/FFFFFFFFC00001B4 : 2046                		mov	r4,@-r0
(2)  333/FFFFFFFFC00001B6 : 2056                		mov	r5,@-r0
(2)  334/FFFFFFFFC00001B8 : 2066                		mov	r6,@-r0
(2)  335/FFFFFFFFC00001BA : 2096                		mov	r9,@-r0
(2)  336/FFFFFFFFC00001BC : 001A                		sts	macl,r0
(2)  337/FFFFFFFFC00001BE : 390C                		add	r0,r9
(2)  338/FFFFFFFFC00001C0 : E410                		mov	#16,r4
(2)  339/FFFFFFFFC00001C2 :                     .yb_line:
(2)  340/FFFFFFFFC00001C2 : 35C3                		cmp/ge	r12,r5
(2)  341/FFFFFFFFC00001C4 : 8B00                		bf	.xy_g2
(2)  342/FFFFFFFFC00001C6 : 35C8                		sub	r12,r5
(2)  343/FFFFFFFFC00001C8 :                     .xy_g2:
(2)  344/FFFFFFFFC00001C8 : 6253                		mov	r5,r2
(2)  345/FFFFFFFFC00001CA : E310                		mov	#16,r3
(2)  346/FFFFFFFFC00001CC : 4309                		shlr2	r3
(2)  347/FFFFFFFFC00001CE :                     .xb_line:
(2)  348/FFFFFFFFC00001CE : 010A                		sts	mach,r1
(2)  349/FFFFFFFFC00001D0 : 312C                		add	r2,r1
(2)  350/FFFFFFFFC00001D2 : 6092                		mov	@r9,r0
(2)  351/FFFFFFFFC00001D4 : 2102                		mov	r0,@r1
(2)  352/FFFFFFFFC00001D6 : 9022                		mov	#320,r0
(2)  353/FFFFFFFFC00001D8 : 3203                		cmp/ge	r0,r2
(2)  354/FFFFFFFFC00001DA : 8904                		bt	.x_ex
(2)  355/FFFFFFFFC00001DC : 010A                		sts	mach,r1
(2)  356/FFFFFFFFC00001DE : 312C                		add	r2,r1
(2)  357/FFFFFFFFC00001E0 : 31CC                		add	r12,r1
(2)  358/FFFFFFFFC00001E2 : 6092                		mov	@r9,r0
(2)  359/FFFFFFFFC00001E4 : 2102                		mov	r0,@r1
(2)  360/FFFFFFFFC00001E6 :                     .x_ex:
(2)  361/FFFFFFFFC00001E6 : 7904                		add	#4,r9
(2)  362/FFFFFFFFC00001E8 : 4310                		dt	r3
(2)  363/FFFFFFFFC00001EA : 8FF0                		bf/s	.xb_line
(2)  364/FFFFFFFFC00001EC : 7204                		add	#4,r2
(2)  365/FFFFFFFFC00001EE : 4410                		dt	r4
(2)  366/FFFFFFFFC00001F0 : 8FE7                		bf/s	.yb_line
(2)  367/FFFFFFFFC00001F2 : 35BC                		add	r11,r5
(2)  368/FFFFFFFFC00001F4 :                     
(2)  369/FFFFFFFFC00001F4 : D008                		mov	#Cach_BlkBackup_L,r0
(2)  370/FFFFFFFFC00001F6 : 6906                		mov	@r0+,r9
(2)  371/FFFFFFFFC00001F8 : 6606                		mov	@r0+,r6
(2)  372/FFFFFFFFC00001FA : 6506                		mov	@r0+,r5
(2)  373/FFFFFFFFC00001FC : 6406                		mov	@r0+,r4
(2)  374/FFFFFFFFC00001FE : 6306                		mov	@r0+,r3
(2)  375/FFFFFFFFC0000200 : 6206                		mov	@r0+,r2
(2)  376/FFFFFFFFC0000202 : 000B                		rts
(2)  377/FFFFFFFFC0000204 : 0009                		nop
(2)  378/FFFFFFFFC0000206 :                     		align 4
(2)  379/FFFFFFFFC0000208 : 2400 0000 C000 0420 		ltorg
                    C000 0418 C000 0438 
                    C000 0420 0100 0140 
(2)  380/FFFFFFFFC0000220 :                     
(2)  381/FFFFFFFFC0000220 :                     ; ; --------------------------------------------------------
(2)  382/FFFFFFFFC0000220 :                     ; ; MarsVideo_DrawScrlLR
(2)  383/FFFFFFFFC0000220 :                     ; ;
(2)  384/FFFFFFFFC0000220 :                     ; ; Draws the left and right sides of
(2)  385/FFFFFFFFC0000220 :                     ; ; the scrolling background on movement
(2)  386/FFFFFFFFC0000220 :                     ; ;
(2)  387/FFFFFFFFC0000220 :                     ; ; Input:
(2)  388/FFFFFFFFC0000220 :                     ; ; r14 | Background buffer
(2)  389/FFFFFFFFC0000220 :                     ; ; --------------------------------------------------------
(2)  390/FFFFFFFFC0000220 :                     ;
(2)  391/FFFFFFFFC0000220 :                     ; ; TODO: improve this.
(2)  392/FFFFFFFFC0000220 :                     ;
(2)  393/FFFFFFFFC0000220 :                     ; 		align 4
(2)  394/FFFFFFFFC0000220 :                     ; MarsVideo_DrawScrlLR:
(2)  395/FFFFFFFFC0000220 :                     ; 		mov	#RAM_Mars_ScrlBuff,r14
(2)  396/FFFFFFFFC0000220 :                     ; 		mov	#_framebuffer,r1
(2)  397/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_fbpos_y,r14),r0
(2)  398/FFFFFFFFC0000220 :                     ; 		mov	r0,r4
(2)  399/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_blk,r14),r0
(2)  400/FFFFFFFFC0000220 :                     ; 		mov	r0,r5
(2)  401/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_intrl_size,r14),r0
(2)  402/FFFFFFFFC0000220 :                     ; 		mov	r0,r6
(2)  403/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_h,r14),r0
(2)  404/FFFFFFFFC0000220 :                     ; 		mov	r0,r7
(2)  405/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_w,r14),r0
(2)  406/FFFFFFFFC0000220 :                     ; 		mov	r0,r8
(2)  407/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_yinc_u,r14),r0
(2)  408/FFFFFFFFC0000220 :                     ; 		mov	r0,r9
(2)  409/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_fbpos,r14),r10
(2)  410/FFFFFFFFC0000220 :                     ; 		neg	r5,r2
(2)  411/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_height,r14),r0
(2)  412/FFFFFFFFC0000220 :                     ; 		mov	r0,r11
(2)  413/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_width,r14),r0
(2)  414/FFFFFFFFC0000220 :                     ; 		mov	r0,r12
(2)  415/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_data,r14),r13
(2)  416/FFFFFFFFC0000220 :                     ; 		and	r2,r4
(2)  417/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_fbdata,r14),r3
(2)  418/FFFFFFFFC0000220 :                     ; 		and	r2,r10
(2)  419/FFFFFFFFC0000220 :                     ; 		add	r3,r1
(2)  420/FFFFFFFFC0000220 :                     ; 		and	r2,r9
(2)  421/FFFFFFFFC0000220 :                     ; 		mov	r0,r2
(2)  422/FFFFFFFFC0000220 :                     ; 		lds	r1,mach
(2)  423/FFFFFFFFC0000220 :                     ;
(2)  424/FFFFFFFFC0000220 :                     ; 	; mach - Framebuffer+fbdata
(2)  425/FFFFFFFFC0000220 :                     ; 	;  r13 - Pixel data
(2)  426/FFFFFFFFC0000220 :                     ; 	;  r12 - Pixeldata Width
(2)  427/FFFFFFFFC0000220 :                     ; 	;  r11 - Pixeldata Height
(2)  428/FFFFFFFFC0000220 :                     ; 	;  r10 - Current FB X pos
(2)  429/FFFFFFFFC0000220 :                     ; 	;   r9 - Source data Y pos
(2)  430/FFFFFFFFC0000220 :                     ; 	;   r8 - Internal scroll Width
(2)  431/FFFFFFFFC0000220 :                     ; 	;   r7 - Internal scroll Height
(2)  432/FFFFFFFFC0000220 :                     ; 	;   r6 - Internal scroll Full size (W*H)
(2)  433/FFFFFFFFC0000220 :                     ; 	;   r5 - Internal scroll Blocksize
(2)  434/FFFFFFFFC0000220 :                     ; 	;   r4 - Current FB TOP Y pos
(2)  435/FFFFFFFFC0000220 :                     ; 	;   r3 - X increment for FB topleft
(2)  436/FFFFFFFFC0000220 :                     ; 	;   r2 - Source data Right X pos
(2)  437/FFFFFFFFC0000220 :                     ; 	;   r1 - Source data Left X pos
(2)  438/FFFFFFFFC0000220 :                     ;
(2)  439/FFFFFFFFC0000220 :                     ; 		mov	r8,r3
(2)  440/FFFFFFFFC0000220 :                     ; 		sub	r5,r3
(2)  441/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_xinc_l,r14),r0
(2)  442/FFFFFFFFC0000220 :                     ; 		mov	r0,r1
(2)  443/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_xinc_r,r14),r0
(2)  444/FFFFFFFFC0000220 :                     ; 		mov	r0,r2
(2)  445/FFFFFFFFC0000220 :                     ; 		mov.b	@(scrl_xdrw_r,r14),r0
(2)  446/FFFFFFFFC0000220 :                     ; 		tst	r0,r0
(2)  447/FFFFFFFFC0000220 :                     ; 		bf	.right
(2)  448/FFFFFFFFC0000220 :                     ; 		mov	r1,r2
(2)  449/FFFFFFFFC0000220 :                     ; 		mov.b	@(scrl_xdrw_l,r14),r0
(2)  450/FFFFFFFFC0000220 :                     ; 		tst	r0,r0
(2)  451/FFFFFFFFC0000220 :                     ; 		bf	.left
(2)  452/FFFFFFFFC0000220 :                     ; 		rts
(2)  453/FFFFFFFFC0000220 :                     ; 		nop
(2)  454/FFFFFFFFC0000220 :                     ; 		align 4
(2)  455/FFFFFFFFC0000220 :                     ; .left:
(2)  456/FFFFFFFFC0000220 :                     ; 		dt	r0
(2)  457/FFFFFFFFC0000220 :                     ; 		bra	.start
(2)  458/FFFFFFFFC0000220 :                     ; 		mov.b	r0,@(scrl_xdrw_l,r14)
(2)  459/FFFFFFFFC0000220 :                     ; .right:
(2)  460/FFFFFFFFC0000220 :                     ; 		dt	r0
(2)  461/FFFFFFFFC0000220 :                     ; 		add	r3,r10
(2)  462/FFFFFFFFC0000220 :                     ; 		mov.b	r0,@(scrl_xdrw_r,r14)
(2)  463/FFFFFFFFC0000220 :                     ; .start:
(2)  464/FFFFFFFFC0000220 :                     ; 		neg	r5,r0
(2)  465/FFFFFFFFC0000220 :                     ; 		and	r0,r2
(2)  466/FFFFFFFFC0000220 :                     ; 		add	r2,r13
(2)  467/FFFFFFFFC0000220 :                     ; 		mulu	r8,r4
(2)  468/FFFFFFFFC0000220 :                     ; 		sts	macl,r0
(2)  469/FFFFFFFFC0000220 :                     ; 		add	r0,r10
(2)  470/FFFFFFFFC0000220 :                     ; .y_line:
(2)  471/FFFFFFFFC0000220 :                     ; 		cmp/ge	r6,r10
(2)  472/FFFFFFFFC0000220 :                     ; 		bf	.x_max
(2)  473/FFFFFFFFC0000220 :                     ; 		sub	r6,r10
(2)  474/FFFFFFFFC0000220 :                     ; .x_max:
(2)  475/FFFFFFFFC0000220 :                     ; 		mov	r13,r1
(2)  476/FFFFFFFFC0000220 :                     ; 		mulu	r9,r12
(2)  477/FFFFFFFFC0000220 :                     ; 		sts	macl,r1
(2)  478/FFFFFFFFC0000220 :                     ; 		add	r13,r1
(2)  479/FFFFFFFFC0000220 :                     ; 		sts	mach,r2
(2)  480/FFFFFFFFC0000220 :                     ; 		add	r10,r2
(2)  481/FFFFFFFFC0000220 :                     ; 		mov	r5,r3
(2)  482/FFFFFFFFC0000220 :                     ; 		shlr2	r3
(2)  483/FFFFFFFFC0000220 :                     ; 		mov	r3,r4
(2)  484/FFFFFFFFC0000220 :                     ; .x_line:
(2)  485/FFFFFFFFC0000220 :                     ; 		mov	@r1+,r0
(2)  486/FFFFFFFFC0000220 :                     ; 		mov	r0,@r2
(2)  487/FFFFFFFFC0000220 :                     ; 		dt	r3
(2)  488/FFFFFFFFC0000220 :                     ; 		bf/s	.x_line
(2)  489/FFFFFFFFC0000220 :                     ; 		add	#4,r2
(2)  490/FFFFFFFFC0000220 :                     ; 		mov	#320,r0		; extra line
(2)  491/FFFFFFFFC0000220 :                     ; 		cmp/ge	r0,r10
(2)  492/FFFFFFFFC0000220 :                     ; 		bt	.no_ex
(2)  493/FFFFFFFFC0000220 :                     ; 		sts	macl,r1
(2)  494/FFFFFFFFC0000220 :                     ; 		add	r13,r1
(2)  495/FFFFFFFFC0000220 :                     ; 		sts	mach,r2
(2)  496/FFFFFFFFC0000220 :                     ; 		add	r10,r2
(2)  497/FFFFFFFFC0000220 :                     ; 		add	r6,r2
(2)  498/FFFFFFFFC0000220 :                     ; .xlne_2:
(2)  499/FFFFFFFFC0000220 :                     ; 		mov	@r1+,r0
(2)  500/FFFFFFFFC0000220 :                     ; 		mov	r0,@r2
(2)  501/FFFFFFFFC0000220 :                     ; 		dt	r4
(2)  502/FFFFFFFFC0000220 :                     ; 		bf/s	.xlne_2
(2)  503/FFFFFFFFC0000220 :                     ; 		add	#4,r2
(2)  504/FFFFFFFFC0000220 :                     ; .no_ex:
(2)  505/FFFFFFFFC0000220 :                     ; 		add	#1,r9
(2)  506/FFFFFFFFC0000220 :                     ; 		cmp/ge	r11,r9
(2)  507/FFFFFFFFC0000220 :                     ; 		bf	.h_low
(2)  508/FFFFFFFFC0000220 :                     ; 		sub	r11,r9
(2)  509/FFFFFFFFC0000220 :                     ; .h_low:
(2)  510/FFFFFFFFC0000220 :                     ; 		dt	r7
(2)  511/FFFFFFFFC0000220 :                     ; 		bf/s	.y_line
(2)  512/FFFFFFFFC0000220 :                     ; 		add	r8,r10
(2)  513/FFFFFFFFC0000220 :                     ; 		rts
(2)  514/FFFFFFFFC0000220 :                     ; 		nop
(2)  515/FFFFFFFFC0000220 :                     ; 		align 4
(2)  516/FFFFFFFFC0000220 :                     ;
(2)  517/FFFFFFFFC0000220 :                     ; ; --------------------------------------------------------
(2)  518/FFFFFFFFC0000220 :                     ; ; MarsVideo_DrawScrlUD
(2)  519/FFFFFFFFC0000220 :                     ; ;
(2)  520/FFFFFFFFC0000220 :                     ; ; Draws the left and right sides of
(2)  521/FFFFFFFFC0000220 :                     ; ; the scrolling background on movement
(2)  522/FFFFFFFFC0000220 :                     ; ;
(2)  523/FFFFFFFFC0000220 :                     ; ; Input:
(2)  524/FFFFFFFFC0000220 :                     ; ; r14 | Background buffer
(2)  525/FFFFFFFFC0000220 :                     ; ;
(2)  526/FFFFFFFFC0000220 :                     ; ; Uses external variables
(2)  527/FFFFFFFFC0000220 :                     ; ; --------------------------------------------------------
(2)  528/FFFFFFFFC0000220 :                     ;
(2)  529/FFFFFFFFC0000220 :                     ; 		align 4
(2)  530/FFFFFFFFC0000220 :                     ; MarsVideo_DrawScrlUD:
(2)  531/FFFFFFFFC0000220 :                     ; 		mov	#RAM_Mars_ScrlBuff,r14
(2)  532/FFFFFFFFC0000220 :                     ; 		mov	#_framebuffer,r11
(2)  533/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_fbpos_y,r14),r0
(2)  534/FFFFFFFFC0000220 :                     ; 		mov	r0,r4
(2)  535/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_blk,r14),r0
(2)  536/FFFFFFFFC0000220 :                     ; 		mov	r0,r5
(2)  537/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_intrl_size,r14),r0
(2)  538/FFFFFFFFC0000220 :                     ; 		mov	r0,r6
(2)  539/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_h,r14),r0
(2)  540/FFFFFFFFC0000220 :                     ; 		mov	r0,r7
(2)  541/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_w,r14),r0
(2)  542/FFFFFFFFC0000220 :                     ; 		mov	r0,r8
(2)  543/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_xinc_l,r14),r0
(2)  544/FFFFFFFFC0000220 :                     ; 		mov	r0,r9
(2)  545/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_fbpos,r14),r10
(2)  546/FFFFFFFFC0000220 :                     ; 		neg	r5,r2
(2)  547/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_width,r14),r0
(2)  548/FFFFFFFFC0000220 :                     ; 		mov	r0,r12
(2)  549/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_data,r14),r13
(2)  550/FFFFFFFFC0000220 :                     ; 		and	r2,r4
(2)  551/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_fbdata,r14),r3
(2)  552/FFFFFFFFC0000220 :                     ; 		and	r2,r10
(2)  553/FFFFFFFFC0000220 :                     ; 		add	r3,r11
(2)  554/FFFFFFFFC0000220 :                     ; 		and	r2,r9
(2)  555/FFFFFFFFC0000220 :                     ; 		mov	r0,r2
(2)  556/FFFFFFFFC0000220 :                     ; ; 		lds	r1,mach
(2)  557/FFFFFFFFC0000220 :                     ;
(2)  558/FFFFFFFFC0000220 :                     ; 	;  r13 - Pixel data
(2)  559/FFFFFFFFC0000220 :                     ; 	;  r12 - Pixeldata Width
(2)  560/FFFFFFFFC0000220 :                     ; 	;  r11 - Framebuffer+fbdata output
(2)  561/FFFFFFFFC0000220 :                     ; 	;  r10 - Current FB X pos
(2)  562/FFFFFFFFC0000220 :                     ; 	;   r9 - Source data X pos
(2)  563/FFFFFFFFC0000220 :                     ; 	;   r8 - Internal scroll Width
(2)  564/FFFFFFFFC0000220 :                     ; 	;   r7 - Internal scroll Height
(2)  565/FFFFFFFFC0000220 :                     ; 	;   r6 - Internal scroll Full size (W*H)
(2)  566/FFFFFFFFC0000220 :                     ; 	;   r5 - Internal scroll Blocksize
(2)  567/FFFFFFFFC0000220 :                     ; 	;   r4 - Current FB TOP Y pos
(2)  568/FFFFFFFFC0000220 :                     ; 	;   r3 - X increment for FB topleft
(2)  569/FFFFFFFFC0000220 :                     ; 	;   r2 - Source data Bottom Y pos
(2)  570/FFFFFFFFC0000220 :                     ; 	;   r1 - Source data Top Y pos
(2)  571/FFFFFFFFC0000220 :                     ;
(2)  572/FFFFFFFFC0000220 :                     ; 		mov	r7,r3
(2)  573/FFFFFFFFC0000220 :                     ; 		sub	r5,r3
(2)  574/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_yinc_u,r14),r0
(2)  575/FFFFFFFFC0000220 :                     ; 		mov	r0,r1
(2)  576/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_yinc_d,r14),r0
(2)  577/FFFFFFFFC0000220 :                     ; 		mov	r0,r2
(2)  578/FFFFFFFFC0000220 :                     ; 		mov.b	@(scrl_ydrw_d,r14),r0
(2)  579/FFFFFFFFC0000220 :                     ; 		tst	r0,r0
(2)  580/FFFFFFFFC0000220 :                     ; 		bf	.right
(2)  581/FFFFFFFFC0000220 :                     ; 		mov	r1,r2
(2)  582/FFFFFFFFC0000220 :                     ; 		mov.b	@(scrl_ydrw_u,r14),r0
(2)  583/FFFFFFFFC0000220 :                     ; 		tst	r0,r0
(2)  584/FFFFFFFFC0000220 :                     ; 		bf	.left
(2)  585/FFFFFFFFC0000220 :                     ; 		rts
(2)  586/FFFFFFFFC0000220 :                     ; 		nop
(2)  587/FFFFFFFFC0000220 :                     ; 		align 4
(2)  588/FFFFFFFFC0000220 :                     ; .left:
(2)  589/FFFFFFFFC0000220 :                     ; 		dt	r0
(2)  590/FFFFFFFFC0000220 :                     ; 		bra	.start
(2)  591/FFFFFFFFC0000220 :                     ; 		mov.b	r0,@(scrl_ydrw_u,r14)
(2)  592/FFFFFFFFC0000220 :                     ; .right:
(2)  593/FFFFFFFFC0000220 :                     ; 		dt	r0
(2)  594/FFFFFFFFC0000220 :                     ; 		add	r3,r4
(2)  595/FFFFFFFFC0000220 :                     ; 		mov.b	r0,@(scrl_ydrw_d,r14)
(2)  596/FFFFFFFFC0000220 :                     ; .start:
(2)  597/FFFFFFFFC0000220 :                     ; 		cmp/ge	r7,r4
(2)  598/FFFFFFFFC0000220 :                     ; 		bf	.h_low
(2)  599/FFFFFFFFC0000220 :                     ; 		sub	r7,r4
(2)  600/FFFFFFFFC0000220 :                     ; .h_low:
(2)  601/FFFFFFFFC0000220 :                     ; 		mulu	r8,r4
(2)  602/FFFFFFFFC0000220 :                     ; 		sts	macl,r4
(2)  603/FFFFFFFFC0000220 :                     ; 		add	r4,r10
(2)  604/FFFFFFFFC0000220 :                     ;
(2)  605/FFFFFFFFC0000220 :                     ; 		neg	r5,r0
(2)  606/FFFFFFFFC0000220 :                     ; 		and	r0,r2
(2)  607/FFFFFFFFC0000220 :                     ; 		mulu	r2,r12
(2)  608/FFFFFFFFC0000220 :                     ; 		sts	macl,r0
(2)  609/FFFFFFFFC0000220 :                     ; 		add	r0,r13
(2)  610/FFFFFFFFC0000220 :                     ; .y_next:
(2)  611/FFFFFFFFC0000220 :                     ; 		mov	r9,r1
(2)  612/FFFFFFFFC0000220 :                     ; 		mov	r10,r2
(2)  613/FFFFFFFFC0000220 :                     ; 		mov	r8,r4
(2)  614/FFFFFFFFC0000220 :                     ; 		shlr2	r4
(2)  615/FFFFFFFFC0000220 :                     ; .x_line:
(2)  616/FFFFFFFFC0000220 :                     ; 		cmp/ge	r12,r1
(2)  617/FFFFFFFFC0000220 :                     ; 		bf	.xs_lrg
(2)  618/FFFFFFFFC0000220 :                     ; 		sub	r12,r1
(2)  619/FFFFFFFFC0000220 :                     ; .xs_lrg:
(2)  620/FFFFFFFFC0000220 :                     ; 		cmp/ge	r6,r2
(2)  621/FFFFFFFFC0000220 :                     ; 		bf	.xd_lrg
(2)  622/FFFFFFFFC0000220 :                     ; 		sub	r6,r2
(2)  623/FFFFFFFFC0000220 :                     ; .xd_lrg:
(2)  624/FFFFFFFFC0000220 :                     ; 		mov	r13,r3
(2)  625/FFFFFFFFC0000220 :                     ; 		add	r1,r3
(2)  626/FFFFFFFFC0000220 :                     ; 		mov	@r3,r0
(2)  627/FFFFFFFFC0000220 :                     ; 		mov	r11,r3
(2)  628/FFFFFFFFC0000220 :                     ; 		add	r2,r3
(2)  629/FFFFFFFFC0000220 :                     ; 		mov	r0,@r3
(2)  630/FFFFFFFFC0000220 :                     ; 		mov	#320,r0
(2)  631/FFFFFFFFC0000220 :                     ; 		cmp/ge	r0,r2
(2)  632/FFFFFFFFC0000220 :                     ; 		bt	.x_ex
(2)  633/FFFFFFFFC0000220 :                     ; 		mov	r13,r3
(2)  634/FFFFFFFFC0000220 :                     ; 		add	r1,r3
(2)  635/FFFFFFFFC0000220 :                     ; 		mov	@r3,r0
(2)  636/FFFFFFFFC0000220 :                     ; 		mov	r11,r3
(2)  637/FFFFFFFFC0000220 :                     ; 		add	r2,r3
(2)  638/FFFFFFFFC0000220 :                     ; 		add	r6,r3
(2)  639/FFFFFFFFC0000220 :                     ; 		mov	r0,@r3
(2)  640/FFFFFFFFC0000220 :                     ; .x_ex:
(2)  641/FFFFFFFFC0000220 :                     ; 		add	#4,r1
(2)  642/FFFFFFFFC0000220 :                     ; 		dt	r4
(2)  643/FFFFFFFFC0000220 :                     ; 		bf/s	.x_line
(2)  644/FFFFFFFFC0000220 :                     ; 		add	#4,r2
(2)  645/FFFFFFFFC0000220 :                     ; 		add	r12,r13
(2)  646/FFFFFFFFC0000220 :                     ; 		dt	r5
(2)  647/FFFFFFFFC0000220 :                     ; 		bf/s	.y_next
(2)  648/FFFFFFFFC0000220 :                     ; 		add	r8,r10
(2)  649/FFFFFFFFC0000220 :                     ;
(2)  650/FFFFFFFFC0000220 :                     ; 		rts
(2)  651/FFFFFFFFC0000220 :                     ; 		nop
(2)  652/FFFFFFFFC0000220 :                     ; 		align 4
(2)  653/FFFFFFFFC0000220 :                     		ltorg
(2)  654/FFFFFFFFC0000220 :                     
(2)  655/FFFFFFFFC0000220 :                     ; ====================================================================
(2)  656/FFFFFFFFC0000220 :                     ; ----------------------------------------------------------------
(2)  657/FFFFFFFFC0000220 :                     ; Drawing routines for the Super-sprites
(2)  658/FFFFFFFFC0000220 :                     ; ----------------------------------------------------------------
(2)  659/FFFFFFFFC0000220 :                     
(2)  660/FFFFFFFFC0000220 :                     ; ; --------------------------------------------------------
(2)  661/FFFFFFFFC0000220 :                     ; ; MarsVideo_DrwSprBlk
(2)  662/FFFFFFFFC0000220 :                     ; ;
(2)  663/FFFFFFFFC0000220 :                     ; ; Redraws the background sections overwriten
(2)  664/FFFFFFFFC0000220 :                     ; ; by the Super Sprites using a list generated
(2)  665/FFFFFFFFC0000220 :                     ; ; by MarsVideo_SetSprFill
(2)  666/FFFFFFFFC0000220 :                     ; ;
(2)  667/FFFFFFFFC0000220 :                     ; ; Call this BEFORE updating the X/Y background positions.
(2)  668/FFFFFFFFC0000220 :                     ; ;
(2)  669/FFFFFFFFC0000220 :                     ; ; Input:
(2)  670/FFFFFFFFC0000220 :                     ; ; r14 | Background buffer to use
(2)  671/FFFFFFFFC0000220 :                     ; ; r13 | List of sprite-redraw pieces
(2)  672/FFFFFFFFC0000220 :                     ; ;
(2)  673/FFFFFFFFC0000220 :                     ; ; Note:
(2)  674/FFFFFFFFC0000220 :                     ; ; CPU-intensive, and doesn't have any overflow protection.
(2)  675/FFFFFFFFC0000220 :                     ; ; --------------------------------------------------------
(2)  676/FFFFFFFFC0000220 :                     ;
(2)  677/FFFFFFFFC0000220 :                     ; 		align 4
(2)  678/FFFFFFFFC0000220 :                     ; MarsVideo_DrwSprBlk:
(2)  679/FFFFFFFFC0000220 :                     ; 		sts	pr,@-r15
(2)  680/FFFFFFFFC0000220 :                     ;
(2)  681/FFFFFFFFC0000220 :                     ; 		mov	#_framebuffer,r12
(2)  682/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_fbdata,r14),r0
(2)  683/FFFFFFFFC0000220 :                     ; 		tst	r0,r0
(2)  684/FFFFFFFFC0000220 :                     ; 		bt	.end
(2)  685/FFFFFFFFC0000220 :                     ; 		add	r0,r12
(2)  686/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_data,r14),r0
(2)  687/FFFFFFFFC0000220 :                     ; 		lds	r0,mach
(2)  688/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_blk,r14),r0
(2)  689/FFFFFFFFC0000220 :                     ; 		mov	r0,r11
(2)  690/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_intrl_size,r14),r0
(2)  691/FFFFFFFFC0000220 :                     ; 		mov	r0,r10
(2)  692/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_h,r14),r0
(2)  693/FFFFFFFFC0000220 :                     ; 		mov	r0,r9
(2)  694/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_intrl_w,r14),r0
(2)  695/FFFFFFFFC0000220 :                     ; 		mov	r0,r8
(2)  696/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_height,r14),r0
(2)  697/FFFFFFFFC0000220 :                     ; 		mov	r0,r7
(2)  698/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_width,r14),r0
(2)  699/FFFFFFFFC0000220 :                     ; 		mov	r0,r6
(2)  700/FFFFFFFFC0000220 :                     ; 		mov	@(scrl_fbpos,r14),r5
(2)  701/FFFFFFFFC0000220 :                     ; 		neg	r11,r1
(2)  702/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_ypos_old,r14),r0	; <-- use OLD position
(2)  703/FFFFFFFFC0000220 :                     ; 		exts.w	r0,r4
(2)  704/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_xpos_old,r14),r0	; <-- use OLD position
(2)  705/FFFFFFFFC0000220 :                     ; 		exts.w	r0,r3
(2)  706/FFFFFFFFC0000220 :                     ; 		mov.w	@(scrl_fbpos_y,r14),r0
(2)  707/FFFFFFFFC0000220 :                     ; 		mov	r0,r2
(2)  708/FFFFFFFFC0000220 :                     ; 		exts.w	r4,r4
(2)  709/FFFFFFFFC0000220 :                     ; 		exts.w	r3,r3
(2)  710/FFFFFFFFC0000220 :                     ; .xin:
(2)  711/FFFFFFFFC0000220 :                     ; 		cmp/pz	r3
(2)  712/FFFFFFFFC0000220 :                     ; 		bt	.xp_t
(2)  713/FFFFFFFFC0000220 :                     ; 		bra	.xin
(2)  714/FFFFFFFFC0000220 :                     ; 		add	r6,r3
(2)  715/FFFFFFFFC0000220 :                     ; .xp_t:
(2)  716/FFFFFFFFC0000220 :                     ; 		cmp/gt	r6,r3
(2)  717/FFFFFFFFC0000220 :                     ; 		bf	.xp_b
(2)  718/FFFFFFFFC0000220 :                     ; 		bra	.xp_t
(2)  719/FFFFFFFFC0000220 :                     ; 		sub	r6,r3
(2)  720/FFFFFFFFC0000220 :                     ; .xp_b:
(2)  721/FFFFFFFFC0000220 :                     ; 		cmp/pz	r4
(2)  722/FFFFFFFFC0000220 :                     ; 		bt	.yp_t
(2)  723/FFFFFFFFC0000220 :                     ; 		bra	.xp_b
(2)  724/FFFFFFFFC0000220 :                     ; 		add	r7,r4
(2)  725/FFFFFFFFC0000220 :                     ; .yp_t:
(2)  726/FFFFFFFFC0000220 :                     ; 		cmp/gt	r7,r4
(2)  727/FFFFFFFFC0000220 :                     ; 		bf	.yp_b
(2)  728/FFFFFFFFC0000220 :                     ; 		bra	.yp_t
(2)  729/FFFFFFFFC0000220 :                     ; 		sub	r7,r4
(2)  730/FFFFFFFFC0000220 :                     ; .yp_b:
(2)  731/FFFFFFFFC0000220 :                     ; 		and	r1,r2
(2)  732/FFFFFFFFC0000220 :                     ; 		and	r1,r5
(2)  733/FFFFFFFFC0000220 :                     ; 		mulu	r8,r2
(2)  734/FFFFFFFFC0000220 :                     ; 		sts	macl,r0
(2)  735/FFFFFFFFC0000220 :                     ; 		add	r0,r5
(2)  736/FFFFFFFFC0000220 :                     ; 		and	r1,r5
(2)  737/FFFFFFFFC0000220 :                     ; 		and	r1,r4
(2)  738/FFFFFFFFC0000220 :                     ; 		and	r1,r3
(2)  739/FFFFFFFFC0000220 :                     ; 		cmp/ge	r10,r5
(2)  740/FFFFFFFFC0000220 :                     ; 		bf	.fb_ovri
(2)  741/FFFFFFFFC0000220 :                     ; 		sub	r10,r5
(2)  742/FFFFFFFFC0000220 :                     ; .fb_ovri:
(2)  743/FFFFFFFFC0000220 :                     ;
(2)  744/FFFFFFFFC0000220 :                     ; 	; mach - Image pixel-data
(2)  745/FFFFFFFFC0000220 :                     ; 	;  r14 - Block-redraw list TOP
(2)  746/FFFFFFFFC0000220 :                     ; 	;  r13 - Block-redraw list BOTTOM
(2)  747/FFFFFFFFC0000220 :                     ; 	;  r12 - Framebuffer+FbBase
(2)  748/FFFFFFFFC0000220 :                     ; 	;  r11 - Block size
(2)  749/FFFFFFFFC0000220 :                     ; 	;  r10 - BG internal scroll size (W*H)
(2)  750/FFFFFFFFC0000220 :                     ; 	;   r9 - BG internal scroll height
(2)  751/FFFFFFFFC0000220 :                     ; 	;   r8 - BG internal scroll width
(2)  752/FFFFFFFFC0000220 :                     ; 	;   r7 - Image height
(2)  753/FFFFFFFFC0000220 :                     ; 	;   r6 - Image width
(2)  754/FFFFFFFFC0000220 :                     ; 	;   r5 - Background internal X+Y position
(2)  755/FFFFFFFFC0000220 :                     ; 	;   r4 - Background camera Y pos
(2)  756/FFFFFFFFC0000220 :                     ; 	;   r3 - Background camera X pos
(2)  757/FFFFFFFFC0000220 :                     ; 	;   r2 - Y read
(2)  758/FFFFFFFFC0000220 :                     ; 	;   r1 - X read
(2)  759/FFFFFFFFC0000220 :                     ; 	;
(2)  760/FFFFFFFFC0000220 :                     ; 	;   Index format:
(2)  761/FFFFFFFFC0000220 :                     ; 	;   %EEyyyyyy xxxxxxxx wwwwwwww hhhhhhhh
(2)  762/FFFFFFFFC0000220 :                     ; 	;     y_pos/4  x_pos/4  width/4 height/4
(2)  763/FFFFFFFFC0000220 :                     ; .indx_read:
(2)  764/FFFFFFFFC0000220 :                     ; 		mov	@r13,r0
(2)  765/FFFFFFFFC0000220 :                     ; 		cmp/pz	r0
(2)  766/FFFFFFFFC0000220 :                     ; 		bt	.end
(2)  767/FFFFFFFFC0000220 :                     ; 		bsr	.mk_block
(2)  768/FFFFFFFFC0000220 :                     ; 		mov	r0,r1
(2)  769/FFFFFFFFC0000220 :                     ; 		xor	r0,r0
(2)  770/FFFFFFFFC0000220 :                     ; 		mov	r0,@r13
(2)  771/FFFFFFFFC0000220 :                     ; 		bra	.indx_read
(2)  772/FFFFFFFFC0000220 :                     ; 		add	#4,r13
(2)  773/FFFFFFFFC0000220 :                     ; .end:
(2)  774/FFFFFFFFC0000220 :                     ; 		lds	@r15+,pr
(2)  775/FFFFFFFFC0000220 :                     ; 		rts
(2)  776/FFFFFFFFC0000220 :                     ; 		nop
(2)  777/FFFFFFFFC0000220 :                     ; 		align 4
(2)  778/FFFFFFFFC0000220 :                     ; .mk_block:
(2)  779/FFFFFFFFC0000220 :                     ; 		mov	#Cach_BlkBackup_S,r0
(2)  780/FFFFFFFFC0000220 :                     ; 		mov	r1,@-r0
(2)  781/FFFFFFFFC0000220 :                     ; 		mov	r2,@-r0
(2)  782/FFFFFFFFC0000220 :                     ; 		mov	r3,@-r0
(2)  783/FFFFFFFFC0000220 :                     ; 		mov	r4,@-r0
(2)  784/FFFFFFFFC0000220 :                     ; 		mov	r5,@-r0
(2)  785/FFFFFFFFC0000220 :                     ; 		mov	r8,@-r0
(2)  786/FFFFFFFFC0000220 :                     ; 		mov	r9,@-r0
(2)  787/FFFFFFFFC0000220 :                     ; 		mov	r11,@-r0
(2)  788/FFFFFFFFC0000220 :                     ; 		mov	r13,@-r0
(2)  789/FFFFFFFFC0000220 :                     ; 		mov	r14,@-r0
(2)  790/FFFFFFFFC0000220 :                     ;
(2)  791/FFFFFFFFC0000220 :                     ; 	; r14 - Y
(2)  792/FFFFFFFFC0000220 :                     ; 	; r13 - X
(2)  793/FFFFFFFFC0000220 :                     ; 		mov	r1,r2
(2)  794/FFFFFFFFC0000220 :                     ; 		mov	r1,r14
(2)  795/FFFFFFFFC0000220 :                     ; 		mov	r1,r13
(2)  796/FFFFFFFFC0000220 :                     ; 		shlr8	r14
(2)  797/FFFFFFFFC0000220 :                     ; 		extu.b	r14,r14
(2)  798/FFFFFFFFC0000220 :                     ; 		extu.b	r13,r13
(2)  799/FFFFFFFFC0000220 :                     ;
(2)  800/FFFFFFFFC0000220 :                     ;
(2)  801/FFFFFFFFC0000220 :                     ; 		shlr16	r1
(2)  802/FFFFFFFFC0000220 :                     ; 		shlr16	r2
(2)  803/FFFFFFFFC0000220 :                     ; 		mov	r2,r0
(2)  804/FFFFFFFFC0000220 :                     ; 		shlr8	r0
(2)  805/FFFFFFFFC0000220 :                     ; 		and	#$7F,r0
(2)  806/FFFFFFFFC0000220 :                     ; 		extu.b	r0,r2
(2)  807/FFFFFFFFC0000220 :                     ; 		extu.b	r1,r1
(2)  808/FFFFFFFFC0000220 :                     ; 		shll2	r1
(2)  809/FFFFFFFFC0000220 :                     ; 		shll2	r2
(2)  810/FFFFFFFFC0000220 :                     ; 		shll2	r14
(2)  811/FFFFFFFFC0000220 :                     ; 		shll2	r13
(2)  812/FFFFFFFFC0000220 :                     ; 		sub	r2,r14
(2)  813/FFFFFFFFC0000220 :                     ; 		sub	r1,r13
(2)  814/FFFFFFFFC0000220 :                     ; 		mov	r5,r9
(2)  815/FFFFFFFFC0000220 :                     ; 		mulu	r2,r8
(2)  816/FFFFFFFFC0000220 :                     ; 		sts	macl,r0
(2)  817/FFFFFFFFC0000220 :                     ; 		add	r0,r9
(2)  818/FFFFFFFFC0000220 :                     ; 		add	r1,r9
(2)  819/FFFFFFFFC0000220 :                     ; 		add	r3,r1
(2)  820/FFFFFFFFC0000220 :                     ; 		add	r4,r2
(2)  821/FFFFFFFFC0000220 :                     ;
(2)  822/FFFFFFFFC0000220 :                     ; .y_line:
(2)  823/FFFFFFFFC0000220 :                     ; 		cmp/ge	r7,r2
(2)  824/FFFFFFFFC0000220 :                     ; 		bf	.y_hght
(2)  825/FFFFFFFFC0000220 :                     ; 		sub	r7,r2
(2)  826/FFFFFFFFC0000220 :                     ; .y_hght:
(2)  827/FFFFFFFFC0000220 :                     ; 		mov	r1,r3
(2)  828/FFFFFFFFC0000220 :                     ; 		mulu	r2,r6
(2)  829/FFFFFFFFC0000220 :                     ; 		cmp/ge	r10,r9
(2)  830/FFFFFFFFC0000220 :                     ; 		bf	.fb_m
(2)  831/FFFFFFFFC0000220 :                     ; 		sub	r10,r9
(2)  832/FFFFFFFFC0000220 :                     ; .fb_m:
(2)  833/FFFFFFFFC0000220 :                     ; 		mov	r13,r11
(2)  834/FFFFFFFFC0000220 :                     ; 		shlr2	r11
(2)  835/FFFFFFFFC0000220 :                     ; 		mov	r9,r5
(2)  836/FFFFFFFFC0000220 :                     ; .x_line:
(2)  837/FFFFFFFFC0000220 :                     ; 		cmp/ge	r6,r3
(2)  838/FFFFFFFFC0000220 :                     ; 		bf	.x_wdth
(2)  839/FFFFFFFFC0000220 :                     ; 		sub	r6,r3
(2)  840/FFFFFFFFC0000220 :                     ; .x_wdth:
(2)  841/FFFFFFFFC0000220 :                     ; 		sts	mach,r4
(2)  842/FFFFFFFFC0000220 :                     ; 		sts	macl,r0
(2)  843/FFFFFFFFC0000220 :                     ; 		add	r0,r4
(2)  844/FFFFFFFFC0000220 :                     ; 		add	r3,r4
(2)  845/FFFFFFFFC0000220 :                     ; 		mov	@r4,r0
(2)  846/FFFFFFFFC0000220 :                     ; 		or	r4,r0		; TEST DOTS
(2)  847/FFFFFFFFC0000220 :                     ; 		mov	r5,r4
(2)  848/FFFFFFFFC0000220 :                     ; 		add	r12,r4
(2)  849/FFFFFFFFC0000220 :                     ; 		mov	r0,@r4
(2)  850/FFFFFFFFC0000220 :                     ; 		mov	#320,r4
(2)  851/FFFFFFFFC0000220 :                     ; 		cmp/ge	r4,r5
(2)  852/FFFFFFFFC0000220 :                     ; 		bt	.fb_ex
(2)  853/FFFFFFFFC0000220 :                     ; 		mov	r5,r4
(2)  854/FFFFFFFFC0000220 :                     ; 		add	r10,r4
(2)  855/FFFFFFFFC0000220 :                     ; 		add	r12,r4
(2)  856/FFFFFFFFC0000220 :                     ; 		mov	r0,@r4
(2)  857/FFFFFFFFC0000220 :                     ; .fb_ex:
(2)  858/FFFFFFFFC0000220 :                     ; 		add	#4,r3
(2)  859/FFFFFFFFC0000220 :                     ; 		dt	r11
(2)  860/FFFFFFFFC0000220 :                     ; 		bf/s	.x_line
(2)  861/FFFFFFFFC0000220 :                     ; 		add	#4,r5
(2)  862/FFFFFFFFC0000220 :                     ; 		add	#1,r2
(2)  863/FFFFFFFFC0000220 :                     ; 		dt	r14
(2)  864/FFFFFFFFC0000220 :                     ; 		bf/s	.y_line
(2)  865/FFFFFFFFC0000220 :                     ; 		add	r8,r9
(2)  866/FFFFFFFFC0000220 :                     ;
(2)  867/FFFFFFFFC0000220 :                     ; 		mov	#Cach_SprBkup_LB,r0
(2)  868/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r14
(2)  869/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r13
(2)  870/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r11
(2)  871/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r9
(2)  872/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r8
(2)  873/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r5
(2)  874/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r4
(2)  875/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r3
(2)  876/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r2
(2)  877/FFFFFFFFC0000220 :                     ; 		mov	@r0+,r1
(2)  878/FFFFFFFFC0000220 :                     ; 		rts
(2)  879/FFFFFFFFC0000220 :                     ; 		nop
(2)  880/FFFFFFFFC0000220 :                     ; 		align 4
(2)  881/FFFFFFFFC0000220 :                     ; 		ltorg
(2)  882/FFFFFFFFC0000220 :                     
(2)  883/FFFFFFFFC0000220 :                     ; --------------------------------------------------------
(2)  884/FFFFFFFFC0000220 :                     ; MarsVideo_DrawSuperSpr
(2)  885/FFFFFFFFC0000220 :                     ;
(2)  886/FFFFFFFFC0000220 :                     ; Draws the Super-sprites directly recieved on DREQ
(2)  887/FFFFFFFFC0000220 :                     ;
(2)  888/FFFFFFFFC0000220 :                     ; Call MarsVideo_SetSuperSpr FIRST to setup the
(2)  889/FFFFFFFFC0000220 :                     ; main screen coordinates
(2)  890/FFFFFFFFC0000220 :                     ;
(2)  891/FFFFFFFFC0000220 :                     ; Input:
(2)  892/FFFFFFFFC0000220 :                     ; r14 - Super sprites data
(2)  893/FFFFFFFFC0000220 :                     ; --------------------------------------------------------
(2)  894/FFFFFFFFC0000220 :                     
(2)  895/FFFFFFFFC0000220 :                     		align 4
(2)  896/FFFFFFFFC0000220 :                     MarsVideo_DrawSuperSpr:
(2)  897/FFFFFFFFC0000220 : DE4C                		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r14
(2)  898/FFFFFFFFC0000222 : DB4D                		mov	#Cach_Intrl_W,r11
(2)  899/FFFFFFFFC0000224 : 6BB2                		mov	@r11,r11
(2)  900/FFFFFFFFC0000226 : DA4D                		mov	#Cach_Intrl_H,r10
(2)  901/FFFFFFFFC0000228 : 6AA2                		mov	@r10,r10
(2)  902/FFFFFFFFC000022A : D94D                		mov	#Cach_Intrl_Size,r9
(2)  903/FFFFFFFFC000022C : 6992                		mov	@r9,r9
(2)  904/FFFFFFFFC000022E : 0009                		nop
(2)  905/FFFFFFFFC0000230 :                     MarsVideo_NxtSuprSpr:
(2)  906/FFFFFFFFC0000230 : 50E4                		mov	@(marsspr_data,r14),r0
(2)  907/FFFFFFFFC0000232 : 2008                		tst	r0,r0
(2)  908/FFFFFFFFC0000234 : 8B02                		bf	.valid
(2)  909/FFFFFFFFC0000236 : 000B                		rts
(2)  910/FFFFFFFFC0000238 : 0009                		nop
(2)  911/FFFFFFFFC000023A :                     		align 4
(2)  912/FFFFFFFFC000023C :                     .valid:
(2)  913/FFFFFFFFC000023C : 85E3                		mov.w	@(marsspr_indx,r14),r0
(2)  914/FFFFFFFFC000023E : 6C03                		mov	r0,r12
(2)  915/FFFFFFFFC0000240 : 85E5                		mov.w	@(marsspr_x,r14),r0
(2)  916/FFFFFFFFC0000242 : 650F                		exts.w	r0,r5
(2)  917/FFFFFFFFC0000244 : 85E6                		mov.w	@(marsspr_y,r14),r0
(2)  918/FFFFFFFFC0000246 : 660F                		exts.w	r0,r6
(2)  919/FFFFFFFFC0000248 : 84E0                		mov.b	@(marsspr_xs,r14),r0
(2)  920/FFFFFFFFC000024A : 670E                		exts.b	r0,r7
(2)  921/FFFFFFFFC000024C : 84E1                		mov.b	@(marsspr_ys,r14),r0
(2)  922/FFFFFFFFC000024E : 680E                		exts.b	r0,r8
(2)  923/FFFFFFFFC0000250 : 6373                		mov	r7,r3			; Copy old XS / YS
(2)  924/FFFFFFFFC0000252 : 6483                		mov	r8,r4
(2)  925/FFFFFFFFC0000254 : 375C                		add	r5,r7
(2)  926/FFFFFFFFC0000256 : 386C                		add	r6,r8
(2)  927/FFFFFFFFC0000258 : 4815                		cmp/pl	r8
(2)  928/FFFFFFFFC000025A : 8B78                		bf	.spr_out
(2)  929/FFFFFFFFC000025C : 4715                		cmp/pl	r7
(2)  930/FFFFFFFFC000025E : 8B76                		bf	.spr_out
(2)  931/FFFFFFFFC0000260 : 35B3                		cmp/ge	r11,r5
(2)  932/FFFFFFFFC0000262 : 8974                		bt	.spr_out
(2)  933/FFFFFFFFC0000264 : 36A3                		cmp/ge	r10,r6
(2)  934/FFFFFFFFC0000266 : 8972                		bt	.spr_out
(2)  935/FFFFFFFFC0000268 : 85E2                		mov.w	@(marsspr_dwidth,r14),r0
(2)  936/FFFFFFFFC000026A : 6103                		mov	r0,r1
(2)  937/FFFFFFFFC000026C : 85E1                		mov.w	@(marsspr_xfrm,r14),r0	; X frame
(2)  938/FFFFFFFFC000026E : 6203                		mov	r0,r2
(2)  939/FFFFFFFFC0000270 : 5DE4                		mov	@(marsspr_data,r14),r13
(2)  940/FFFFFFFFC0000272 : 241E                		mulu	r1,r4
(2)  941/FFFFFFFFC0000274 : 041A                		sts	macl,r4
(2)  942/FFFFFFFFC0000276 : C9FF                		and	#$FF,r0
(2)  943/FFFFFFFFC0000278 : 204E                		mulu	r4,r0
(2)  944/FFFFFFFFC000027A : 001A                		sts	macl,r0
(2)  945/FFFFFFFFC000027C : 3D0C                		add	r0,r13
(2)  946/FFFFFFFFC000027E : 6023                		mov	r2,r0
(2)  947/FFFFFFFFC0000280 : 4019                		shlr8	r0
(2)  948/FFFFFFFFC0000282 : C9FF                		and	#$FF,r0
(2)  949/FFFFFFFFC0000284 : 203E                		mulu	r3,r0
(2)  950/FFFFFFFFC0000286 : 001A                		sts	macl,r0
(2)  951/FFFFFFFFC0000288 : 3D0C                		add	r0,r13
(2)  952/FFFFFFFFC000028A :                     	; XR / YB
(2)  953/FFFFFFFFC000028A : 9073                		mov	#320,r0
(2)  954/FFFFFFFFC000028C : 3703                		cmp/ge	r0,r7
(2)  955/FFFFFFFFC000028E : 8B00                		bf	.xb_e
(2)  956/FFFFFFFFC0000290 : 6703                		mov	r0,r7
(2)  957/FFFFFFFFC0000292 :                     .xb_e:
(2)  958/FFFFFFFFC0000292 : 9070                		mov	#224,r0
(2)  959/FFFFFFFFC0000294 : 3803                		cmp/ge	r0,r8
(2)  960/FFFFFFFFC0000296 : 8B00                		bf	.yb_e
(2)  961/FFFFFFFFC0000298 : 6803                		mov	r0,r8
(2)  962/FFFFFFFFC000029A :                     .yb_e:
(2)  963/FFFFFFFFC000029A : D232                		mov	#Cach_FbData,r2
(2)  964/FFFFFFFFC000029C : 6222                		mov	@r2,r2
(2)  965/FFFFFFFFC000029E : D032                		mov	#_framebuffer,r0
(2)  966/FFFFFFFFC00002A0 : 302C                		add	r2,r0
(2)  967/FFFFFFFFC00002A2 : 400A                		lds	r0,mach
(2)  968/FFFFFFFFC00002A4 : 85E2                		mov.w	@(marsspr_dwidth,r14),r0
(2)  969/FFFFFFFFC00002A6 : 620D                		extu.w	r0,r2
(2)  970/FFFFFFFFC00002A8 : 85E4                		mov.w	@(marsspr_flags,r14),r0
(2)  971/FFFFFFFFC00002AA : C802                		tst	#%10,r0		; Y flip?
(2)  972/FFFFFFFFC00002AC : 8902                		bt	.flp_v
(2)  973/FFFFFFFFC00002AE : 3D4C                		add	r4,r13
(2)  974/FFFFFFFFC00002B0 : 3D28                		sub	r2,r13
(2)  975/FFFFFFFFC00002B2 : 622B                		neg	r2,r2
(2)  976/FFFFFFFFC00002B4 :                     .flp_v:
(2)  977/FFFFFFFFC00002B4 : E401                		mov	#1,r4
(2)  978/FFFFFFFFC00002B6 : C801                		tst	#%01,r0		; X flip?
(2)  979/FFFFFFFFC00002B8 : 8901                		bt	.flp_h
(2)  980/FFFFFFFFC00002BA : 3D3C                		add	r3,r13		; move beam
(2)  981/FFFFFFFFC00002BC : E4FF                		mov	#-1,r4		; decrement line
(2)  982/FFFFFFFFC00002BE :                     .flp_h:
(2)  983/FFFFFFFFC00002BE : 4611                		cmp/pz	r6
(2)  984/FFFFFFFFC00002C0 : 8907                		bt	.yt_e
(2)  985/FFFFFFFFC00002C2 : 606B                		neg	r6,r0
(2)  986/FFFFFFFFC00002C4 : 266A                		xor	r6,r6
(2)  987/FFFFFFFFC00002C6 : 210F                		muls	r0,r1
(2)  988/FFFFFFFFC00002C8 : 001A                		sts	macl,r0
(2)  989/FFFFFFFFC00002CA : 4211                		cmp/pz	r2
(2)  990/FFFFFFFFC00002CC : 8900                		bt	.yfinc
(2)  991/FFFFFFFFC00002CE : 600B                		neg	r0,r0
(2)  992/FFFFFFFFC00002D0 :                     .yfinc:
(2)  993/FFFFFFFFC00002D0 : 3D0C                		add	r0,r13
(2)  994/FFFFFFFFC00002D2 :                     .yt_e:
(2)  995/FFFFFFFFC00002D2 : 4511                		cmp/pz	r5
(2)  996/FFFFFFFFC00002D4 : 8905                		bt	.xt_e
(2)  997/FFFFFFFFC00002D6 : 6053                		mov	r5,r0
(2)  998/FFFFFFFFC00002D8 : 4411                		cmp/pz	r4
(2)  999/FFFFFFFFC00002DA : 8900                		bt	.xfinc
(2) 1000/FFFFFFFFC00002DC : 600B                		neg	r0,r0
(2) 1001/FFFFFFFFC00002DE :                     .xfinc:
(2) 1002/FFFFFFFFC00002DE : 3D08                		sub	r0,r13
(2) 1003/FFFFFFFFC00002E0 : 255A                		xor	r5,r5
(2) 1004/FFFFFFFFC00002E2 :                     .xt_e:
(2) 1005/FFFFFFFFC00002E2 : 604D                		extu.w	r4,r0
(2) 1006/FFFFFFFFC00002E4 : 4228                		shll16	r2
(2) 1007/FFFFFFFFC00002E6 : 202B                		or	r2,r0
(2) 1008/FFFFFFFFC00002E8 : D420                		mov	#Cach_FbPos_Y,r4
(2) 1009/FFFFFFFFC00002EA : D221                		mov	#Cach_FbPos,r2
(2) 1010/FFFFFFFFC00002EC : 6442                		mov	@r4,r4
(2) 1011/FFFFFFFFC00002EE : 346C                		add	r6,r4
(2) 1012/FFFFFFFFC00002F0 : 34A3                		cmp/ge	r10,r4
(2) 1013/FFFFFFFFC00002F2 : 8B00                		bf	.y_snap
(2) 1014/FFFFFFFFC00002F4 : 34A8                		sub	r10,r4
(2) 1015/FFFFFFFFC00002F6 :                     .y_snap:
(2) 1016/FFFFFFFFC00002F6 : 24BE                		mulu	r11,r4
(2) 1017/FFFFFFFFC00002F8 : 6222                		mov	@r2,r2
(2) 1018/FFFFFFFFC00002FA : 041A                		sts	macl,r4
(2) 1019/FFFFFFFFC00002FC : 342C                		add	r2,r4
(2) 1020/FFFFFFFFC00002FE : 401A                		lds	r0,macl
(2) 1021/FFFFFFFFC0000300 :                     
(2) 1022/FFFFFFFFC0000300 :                     	; macl - Spritesheet Ydraw direction | Xdraw direction
(2) 1023/FFFFFFFFC0000300 :                     	; mach - _framebuffer + base
(2) 1024/FFFFFFFFC0000300 :                     	;  r14 - Sprite data
(2) 1025/FFFFFFFFC0000300 :                     	;  r13 - Texture data
(2) 1026/FFFFFFFFC0000300 :                     	;  r12 - Texture index
(2) 1027/FFFFFFFFC0000300 :                     	;  r11 - Internal WIDTH
(2) 1028/FFFFFFFFC0000300 :                     	;  r10 - Internal HEIGHT
(2) 1029/FFFFFFFFC0000300 :                     	;   r9 - Internal WIDTH+HEIGHT
(2) 1030/FFFFFFFFC0000300 :                     	;   r8 - Y End
(2) 1031/FFFFFFFFC0000300 :                     	;   r7 - X End
(2) 1032/FFFFFFFFC0000300 :                     	;   r6 - Y Start
(2) 1033/FFFFFFFFC0000300 :                     	;   r5 - X Start
(2) 1034/FFFFFFFFC0000300 :                     	;   r4 - FB output position
(2) 1035/FFFFFFFFC0000300 :                     	;
(2) 1036/FFFFFFFFC0000300 :                     	; *** start ***
(2) 1037/FFFFFFFFC0000300 :                     .y_loop:
(2) 1038/FFFFFFFFC0000300 : 3493                		cmp/ge	r9,r4			; Wrap FB output
(2) 1039/FFFFFFFFC0000302 : 8B00                		bf	.y_max
(2) 1040/FFFFFFFFC0000304 : 3498                		sub	r9,r4
(2) 1041/FFFFFFFFC0000306 :                     .y_max:
(2) 1042/FFFFFFFFC0000306 : 61D3                		mov	r13,r1			; r1 - Texture IN
(2) 1043/FFFFFFFFC0000308 : 6253                		mov	r5,r2			; r2 - X counter
(2) 1044/FFFFFFFFC000030A :                     .x_loop:
(2) 1045/FFFFFFFFC000030A : 6010                		mov.b	@r1,r0			; r0 - pixel
(2) 1046/FFFFFFFFC000030C : 2008                		tst	r0,r0			; blank pixel 0?
(2) 1047/FFFFFFFFC000030E : 8900                		bt	.blnk
(2) 1048/FFFFFFFFC0000310 : 30CC                		add	r12,r0			; add pixel increment
(2) 1049/FFFFFFFFC0000312 :                     .blnk:
(2) 1050/FFFFFFFFC0000312 : 030A                		sts	mach,r3			; r3 - Framebuffer + FbData
(2) 1051/FFFFFFFFC0000314 : 334C                		add	r4,r3			; add top-left position
(2) 1052/FFFFFFFFC0000316 : 332C                		add	r2,r3			; add X position
(2) 1053/FFFFFFFFC0000318 : 2300                		mov.b	r0,@r3			; Write pixel
(2) 1054/FFFFFFFFC000031A : 902B                		mov	#320,r0			; Check for hidden line (X < 320)
(2) 1055/FFFFFFFFC000031C : 3023                		cmp/ge	r2,r0
(2) 1056/FFFFFFFFC000031E : 8908                		bt	.ex_line
(2) 1057/FFFFFFFFC0000320 : 6010                		mov.b	@r1,r0			; Repeat same thing but
(2) 1058/FFFFFFFFC0000322 : 2008                		tst	r0,r0			; but add r9 to the
(2) 1059/FFFFFFFFC0000324 : 8900                		bt	.blnk2			; destination
(2) 1060/FFFFFFFFC0000326 : 30CC                		add	r12,r0
(2) 1061/FFFFFFFFC0000328 :                     .blnk2:
(2) 1062/FFFFFFFFC0000328 : 030A                		sts	mach,r3
(2) 1063/FFFFFFFFC000032A : 334C                		add	r4,r3
(2) 1064/FFFFFFFFC000032C : 332C                		add	r2,r3
(2) 1065/FFFFFFFFC000032E : 339C                		add	r9,r3
(2) 1066/FFFFFFFFC0000330 : 2300                		mov.b	r0,@r3
(2) 1067/FFFFFFFFC0000332 :                     .ex_line:
(2) 1068/FFFFFFFFC0000332 : 7201                		add	#1,r2			; Increment X pos
(2) 1069/FFFFFFFFC0000334 : 001A                		sts	macl,r0
(2) 1070/FFFFFFFFC0000336 : 600F                		exts.w	r0,r0
(2) 1071/FFFFFFFFC0000338 : 3273                		cmp/ge	r7,r2
(2) 1072/FFFFFFFFC000033A : 8FE6                		bf/s	.x_loop
(2) 1073/FFFFFFFFC000033C : 310C                		add	r0,r1			; Increment texture pos
(2) 1074/FFFFFFFFC000033E : 001A                		sts	macl,r0
(2) 1075/FFFFFFFFC0000340 : 4029                		shlr16	r0
(2) 1076/FFFFFFFFC0000342 : 600F                		exts.w	r0,r0
(2) 1077/FFFFFFFFC0000344 : 3D0C                		add	r0,r13			; Next texture line
(2) 1078/FFFFFFFFC0000346 : 7601                		add	#1,r6			; Increment loop Y
(2) 1079/FFFFFFFFC0000348 : 3683                		cmp/ge	r8,r6			; Y start > Y end?
(2) 1080/FFFFFFFFC000034A : 8FD9                		bf/s	.y_loop
(2) 1081/FFFFFFFFC000034C : 34BC                		add	r11,r4			; Next FB top-left line
(2) 1082/FFFFFFFFC000034E :                     .spr_out:
(2) 1083/FFFFFFFFC000034E : AF6F                		bra	MarsVideo_NxtSuprSpr
(2) 1084/FFFFFFFFC0000350 : 7E18                		add 	#sizeof_marsspr,r14
(2) 1085/FFFFFFFFC0000352 :                     		align 4
(2) 1086/FFFFFFFFC0000354 : 2600 7890 C000 048C 		ltorg
                    C000 0490 C000 0494 
                    C000 0480 2400 0000 
                    C000 0488 C000 0484 
                    0140 00E0           
(2) 1087/FFFFFFFFC0000378 :                     
(2) 1088/FFFFFFFFC0000378 :                     ; ; --------------------------------------------------------
(2) 1089/FFFFFFFFC0000378 :                     ; ; MarsVideo_DrawScaled
(2) 1090/FFFFFFFFC0000378 :                     ; ;
(2) 1091/FFFFFFFFC0000378 :                     ; ; Draws an entire image and scales it.
(2) 1092/FFFFFFFFC0000378 :                     ; ; Set your internal screen as 320x240
(2) 1093/FFFFFFFFC0000378 :                     ; ; --------------------------------------------------------
(2) 1094/FFFFFFFFC0000378 :                     ;
(2) 1095/FFFFFFFFC0000378 :                     ; 	; MAIN scaler
(2) 1096/FFFFFFFFC0000378 :                     ; 	; r1 - X pos xxxx.0000
(2) 1097/FFFFFFFFC0000378 :                     ; 	; r2 - Y pos yyyy.0000
(2) 1098/FFFFFFFFC0000378 :                     ; 	; r3 - X dx  xxxx.0000
(2) 1099/FFFFFFFFC0000378 :                     ; 	; r4 - Y dx  yyyy.0000
(2) 1100/FFFFFFFFC0000378 :                     ; 	; r5 - Source WIDTH
(2) 1101/FFFFFFFFC0000378 :                     ; 	; r6 - Source HEIGHT
(2) 1102/FFFFFFFFC0000378 :                     ; 	; r7 - Source DATA
(2) 1103/FFFFFFFFC0000378 :                     ; 	; r8 - Output
(2) 1104/FFFFFFFFC0000378 :                     ; 	; r9 - Loop: Line width / 2
(2) 1105/FFFFFFFFC0000378 :                     ; 	; r10 - Loop: Number of lines
(2) 1106/FFFFFFFFC0000378 :                     ; 		align 4
(2) 1107/FFFFFFFFC0000378 :                     ; MarsVideo_DrawScaled:
(2) 1108/FFFFFFFFC0000378 :                     ; 		mov	#RAM_Mars_DreqRead+Dreq_ScrnBuff,r14
(2) 1109/FFFFFFFFC0000378 :                     ; 		mov	#_framebuffer+$200,r13	; r13 - Output
(2) 1110/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r7		; r7 - Input
(2) 1111/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r1		; r1 - X pos (2 pixels wide)
(2) 1112/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r2		; r2 - Y pos
(2) 1113/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r5		; r5 - X width
(2) 1114/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r6		; r6 - Y height
(2) 1115/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r3		; r3 - DX
(2) 1116/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r4		; r4 - DY
(2) 1117/FFFFFFFFC0000378 :                     ; 		mov	@r14+,r9		; r9 - Mode
(2) 1118/FFFFFFFFC0000378 :                     ; 		mov	#TH,r0			; Force source as Cache-Thru
(2) 1119/FFFFFFFFC0000378 :                     ; 		or	r0,r7
(2) 1120/FFFFFFFFC0000378 :                     ; 		shll16	r5
(2) 1121/FFFFFFFFC0000378 :                     ; 		shll16	r6
(2) 1122/FFFFFFFFC0000378 :                     ; 		dmuls	r1,r5			; Topleft X/Y calc
(2) 1123/FFFFFFFFC0000378 :                     ; 		sts	mach,r0
(2) 1124/FFFFFFFFC0000378 :                     ; 		sts	macl,r1
(2) 1125/FFFFFFFFC0000378 :                     ; 		xtrct	r0,r1
(2) 1126/FFFFFFFFC0000378 :                     ; 		dmuls	r2,r6
(2) 1127/FFFFFFFFC0000378 :                     ; 		sts	mach,r0
(2) 1128/FFFFFFFFC0000378 :                     ; 		sts	macl,r2
(2) 1129/FFFFFFFFC0000378 :                     ; 		xtrct	r0,r2
(2) 1130/FFFFFFFFC0000378 :                     ; 		lds	r9,mach			; mach - mode number
(2) 1131/FFFFFFFFC0000378 :                     ; 		mov	#320/2,r9		; r9  - X loop
(2) 1132/FFFFFFFFC0000378 :                     ; 		mov	#240,r10		; r10 - Y loop
(2) 1133/FFFFFFFFC0000378 :                     ;
(2) 1134/FFFFFFFFC0000378 :                     ; 	; X check
(2) 1135/FFFFFFFFC0000378 :                     ; 		sts	mach,r0
(2) 1136/FFFFFFFFC0000378 :                     ; 		tst	r0,r0
(2) 1137/FFFFFFFFC0000378 :                     ; 		bt	.x_cont
(2) 1138/FFFFFFFFC0000378 :                     ; .x_fix:
(2) 1139/FFFFFFFFC0000378 :                     ; 		cmp/pz	r1
(2) 1140/FFFFFFFFC0000378 :                     ; 		bt	.x_cont
(2) 1141/FFFFFFFFC0000378 :                     ; 		bra	.x_fix
(2) 1142/FFFFFFFFC0000378 :                     ; 		add	r5,r1
(2) 1143/FFFFFFFFC0000378 :                     ; .x_cont:
(2) 1144/FFFFFFFFC0000378 :                     ;
(2) 1145/FFFFFFFFC0000378 :                     ;
(2) 1146/FFFFFFFFC0000378 :                     ; ; *** LOOP
(2) 1147/FFFFFFFFC0000378 :                     ; .y_loop:
(2) 1148/FFFFFFFFC0000378 :                     ; 		sts	mach,r0
(2) 1149/FFFFFFFFC0000378 :                     ; 		tst	r0,r0
(2) 1150/FFFFFFFFC0000378 :                     ; 		bt	.y_high
(2) 1151/FFFFFFFFC0000378 :                     ; 		cmp/pz	r2
(2) 1152/FFFFFFFFC0000378 :                     ; 		bt	.xy_set
(2) 1153/FFFFFFFFC0000378 :                     ; 		bra	.y_loop
(2) 1154/FFFFFFFFC0000378 :                     ; 		add	r6,r2
(2) 1155/FFFFFFFFC0000378 :                     ; .xy_set:
(2) 1156/FFFFFFFFC0000378 :                     ; 		cmp/ge	r6,r2
(2) 1157/FFFFFFFFC0000378 :                     ; 		bf	.y_high
(2) 1158/FFFFFFFFC0000378 :                     ; 		bra	.xy_set
(2) 1159/FFFFFFFFC0000378 :                     ; 		sub	r6,r2
(2) 1160/FFFFFFFFC0000378 :                     ; .y_high:
(2) 1161/FFFFFFFFC0000378 :                     ; 		mov	r1,r11
(2) 1162/FFFFFFFFC0000378 :                     ; 		shar	r11		; /2
(2) 1163/FFFFFFFFC0000378 :                     ; 		mov	r2,r0
(2) 1164/FFFFFFFFC0000378 :                     ; 		shlr16	r0
(2) 1165/FFFFFFFFC0000378 :                     ; 		mov	r5,r8
(2) 1166/FFFFFFFFC0000378 :                     ; 		shlr16	r8
(2) 1167/FFFFFFFFC0000378 :                     ; 		muls	r8,r0
(2) 1168/FFFFFFFFC0000378 :                     ; 		sts	macl,r12
(2) 1169/FFFFFFFFC0000378 :                     ; 		add	r7,r12
(2) 1170/FFFFFFFFC0000378 :                     ; 		mov	r13,r8
(2) 1171/FFFFFFFFC0000378 :                     ; 		mov	r9,r14
(2) 1172/FFFFFFFFC0000378 :                     ; .x_loop:
(2) 1173/FFFFFFFFC0000378 :                     ; 	; 00 - single scale
(2) 1174/FFFFFFFFC0000378 :                     ; 		sts	mach,r0
(2) 1175/FFFFFFFFC0000378 :                     ; 		tst	r0,r0
(2) 1176/FFFFFFFFC0000378 :                     ; 		bf	.x_rept
(2) 1177/FFFFFFFFC0000378 :                     ; 		cmp/pz	r11
(2) 1178/FFFFFFFFC0000378 :                     ; 		bt	.xwpos
(2) 1179/FFFFFFFFC0000378 :                     ; 		bra	.x_next
(2) 1180/FFFFFFFFC0000378 :                     ; 		mov	#0,r0
(2) 1181/FFFFFFFFC0000378 :                     ; .xwpos:
(2) 1182/FFFFFFFFC0000378 :                     ; 		mov	r5,r0
(2) 1183/FFFFFFFFC0000378 :                     ; 		shar	r0		; /2
(2) 1184/FFFFFFFFC0000378 :                     ; 		cmp/ge	r0,r11
(2) 1185/FFFFFFFFC0000378 :                     ; 		bf	.x_go
(2) 1186/FFFFFFFFC0000378 :                     ; 		bra	.x_next
(2) 1187/FFFFFFFFC0000378 :                     ; 		mov	#0,r0
(2) 1188/FFFFFFFFC0000378 :                     ; .x_go:
(2) 1189/FFFFFFFFC0000378 :                     ; 		mov	#0,r0
(2) 1190/FFFFFFFFC0000378 :                     ; 		cmp/pz	r2		; <-- TODO: checar bien esto
(2) 1191/FFFFFFFFC0000378 :                     ; 		bf	.x_next
(2) 1192/FFFFFFFFC0000378 :                     ; 		cmp/ge	r6,r2
(2) 1193/FFFFFFFFC0000378 :                     ; 		bt	.x_next
(2) 1194/FFFFFFFFC0000378 :                     ; 		bra	.x_high
(2) 1195/FFFFFFFFC0000378 :                     ; 		nop
(2) 1196/FFFFFFFFC0000378 :                     ; .x_rept:
(2) 1197/FFFFFFFFC0000378 :                     ; 	; 01 - repeat check
(2) 1198/FFFFFFFFC0000378 :                     ; 		mov	r5,r0
(2) 1199/FFFFFFFFC0000378 :                     ; 		shar	r0		; /2
(2) 1200/FFFFFFFFC0000378 :                     ; 		cmp/pl	r11
(2) 1201/FFFFFFFFC0000378 :                     ; 		bt	.xwpos2
(2) 1202/FFFFFFFFC0000378 :                     ; .x_loopm:	cmp/ge	r0,r11
(2) 1203/FFFFFFFFC0000378 :                     ; 		bt	.x_high
(2) 1204/FFFFFFFFC0000378 :                     ; 		bra	.x_loopm
(2) 1205/FFFFFFFFC0000378 :                     ; 		add	r0,r11
(2) 1206/FFFFFFFFC0000378 :                     ; .xwpos2:
(2) 1207/FFFFFFFFC0000378 :                     ; 		cmp/ge	r0,r11
(2) 1208/FFFFFFFFC0000378 :                     ; 		bf	.x_high
(2) 1209/FFFFFFFFC0000378 :                     ; 		bra	.xwpos2
(2) 1210/FFFFFFFFC0000378 :                     ; 		sub	r0,r11
(2) 1211/FFFFFFFFC0000378 :                     ; .x_high:
(2) 1212/FFFFFFFFC0000378 :                     ; 		mov	r11,r0
(2) 1213/FFFFFFFFC0000378 :                     ; 		shlr16	r0
(2) 1214/FFFFFFFFC0000378 :                     ; 		exts	r0,r0
(2) 1215/FFFFFFFFC0000378 :                     ; 		shll	r0
(2) 1216/FFFFFFFFC0000378 :                     ; 		mov.w	@(r12,r0),r0
(2) 1217/FFFFFFFFC0000378 :                     ; .x_next:
(2) 1218/FFFFFFFFC0000378 :                     ; 		add	r3,r11
(2) 1219/FFFFFFFFC0000378 :                     ; 		mov.w	r0,@r8
(2) 1220/FFFFFFFFC0000378 :                     ; 		dt	r14
(2) 1221/FFFFFFFFC0000378 :                     ; 		bf/s	.x_loop
(2) 1222/FFFFFFFFC0000378 :                     ; 		add	#2,r8
(2) 1223/FFFFFFFFC0000378 :                     ; 		add	r4,r2
(2) 1224/FFFFFFFFC0000378 :                     ; 		mov	#320,r0
(2) 1225/FFFFFFFFC0000378 :                     ; 		dt	r10
(2) 1226/FFFFFFFFC0000378 :                     ; 		bf/s	.y_loop
(2) 1227/FFFFFFFFC0000378 :                     ; 		add	r0,r13
(2) 1228/FFFFFFFFC0000378 :                     ; 		rts
(2) 1229/FFFFFFFFC0000378 :                     ; 		nop
(2) 1230/FFFFFFFFC0000378 :                     ; 		align 4
(2) 1231/FFFFFFFFC0000378 :                     ; 		ltorg
(2) 1232/FFFFFFFFC0000378 :                     
(2) 1233/FFFFFFFFC0000378 :                     ; --------------------------------------------------------
(2) 1234/FFFFFFFFC0000378 :                     ; Quick RAM
(2) 1235/FFFFFFFFC0000378 :                     ; --------------------------------------------------------
(2) 1236/FFFFFFFFC0000378 :                     
(2) 1237/FFFFFFFFC0000378 :                     ; Cach_WdgDrawBuff:
(2) 1238/FFFFFFFFC0000378 :                     ; $00 - Layout data (read)
(2) 1239/FFFFFFFFC0000378 :                     ; $04 - FB pos (read)
(2) 1240/FFFFFFFFC0000378 :                     ; $08 - Layout width (next block)
(2) 1241/FFFFFFFFC0000378 :                     ; $0C - FB width (next line)
(2) 1242/FFFFFFFFC0000378 :                     ; $10 - FB FULL size
(2) 1243/FFFFFFFFC0000378 :                     ; $14 - FB base
(2) 1244/FFFFFFFFC0000378 :                     ; $18 - Block data
(2) 1245/FFFFFFFFC0000378 :                     ; $1C - Block counter
(2) 1246/FFFFFFFFC0000378 :                     
(2) 1247/FFFFFFFFC0000378 :                     			align 4
(2) 1248/FFFFFFFFC0000378 :                     RAM_Mars_ScrlBuff	ds.w sizeof_mscrl*2	; Scrolling buffers
(2) 1249/FFFFFFFFC00003F8 :                     Cach_WdgBuffRd		ds.l 8
(2) 1250/FFFFFFFFC0000418 :                     Cach_WdgBuffWr		ds.l 0		; <-- read backwards
(2) 1251/FFFFFFFFC0000418 :                     Cach_InRead_L		ds.l 2
(2) 1252/FFFFFFFFC0000420 :                     Cach_InRead_S		ds.l 0		; <-- read backwards
(2) 1253/FFFFFFFFC0000420 :                     Cach_BlkBackup_L	ds.l 6
(2) 1254/FFFFFFFFC0000438 :                     Cach_BlkBackup_S	ds.l 0		; <-- read backwards
(2) 1255/FFFFFFFFC0000438 :                     Cach_WdBackup_L		ds.l 14
(2) 1256/FFFFFFFFC0000470 :                     Cach_WdBackup_S		ds.l 0		; <-- read backwards
(2) 1257/FFFFFFFFC0000470 :                     Cach_DrawTimers		ds.l 4		; Screen draw-request timers, write $02 to these
(2) 1258/FFFFFFFFC0000480 :                     
(2) 1259/FFFFFFFFC0000480 :                     Cach_FbData		ds.l 1		; *** KEEP THIS ORDER
(2) 1260/FFFFFFFFC0000484 :                     Cach_FbPos		ds.l 1
(2) 1261/FFFFFFFFC0000488 :                     Cach_FbPos_Y		ds.l 1
(2) 1262/FFFFFFFFC000048C :                     Cach_Intrl_W		ds.l 1
(2) 1263/FFFFFFFFC0000490 :                     Cach_Intrl_H		ds.l 1
(2) 1264/FFFFFFFFC0000494 :                     Cach_Intrl_Size		ds.l 1		; ***
(2) 1265/FFFFFFFFC0000498 :                     
(2) 1266/FFFFFFFFC0000498 :                     ; --------------------------------------------------------
(2) 1267/ 6001774 :                     .end:		phase CACHE_MSTR_SCRL+.end&$1FFF
(2) 1268/ 6001774 :                     		align 4
(2) 1269/ 6001774 :                     CACHE_MSTR_SCRL_E:
(2) 1273/ 6001774 :                     
(1) 2322/ 6001774 :                     		include "system/mars/cache/cache_m_plgn.asm"
(2)    1/ 6001774 :                     ; ====================================================================
(2)    2/ 6001774 :                     ; ----------------------------------------------------------------
(2)    3/ 6001774 :                     ; CACHE code for MASTER CPU
(2)    4/ 6001774 :                     ;
(2)    5/ 6001774 :                     ; LIMIT: $800 bytes
(2)    6/ 6001774 :                     ; ----------------------------------------------------------------
(2)    7/ 6001774 :                     
(2)    8/ 6001774 :                     		align 4
(2)    9/ 6001774 :                     CACHE_MSTR_PLGN:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 912C                		mov	#_FRT,r1
(2)   18/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   19/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   20/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   21/FFFFFFFFC0000008 : C512                		mov.w	@(marsGbl_WdgHold,gbr),r0
(2)   22/FFFFFFFFC000000A : 8801                		cmp/eq	#1,r0
(2)   23/FFFFFFFFC000000C : 891E                		bt	.exit
(2)   24/FFFFFFFFC000000E : C511                		mov.w	@(marsGbl_WdgMode,gbr),r0	; Framebuffer clear request ($07)?
(2)   25/FFFFFFFFC0000010 : 8807                		cmp/eq	#7,r0
(2)   26/FFFFFFFFC0000012 : 8B29                		bf	maindrw_tasks
(2)   27/FFFFFFFFC0000014 :                     
(2)   28/FFFFFFFFC0000014 :                     ; ------------------------------------------------
(2)   29/FFFFFFFFC0000014 :                     ; First task: clear Framebuffer
(2)   30/FFFFFFFFC0000014 :                     ; ------------------------------------------------
(2)   31/FFFFFFFFC0000014 :                     
(2)   32/FFFFFFFFC0000014 : D10F                		mov	#_vdpreg,r1
(2)   33/FFFFFFFFC0000016 : 8515                .wait_fb:	mov.w   @($A,r1),r0			; Framebuffer free?
(2)   34/FFFFFFFFC0000018 : C802                		tst     #2,r0
(2)   35/FFFFFFFFC000001A : 8BFC                		bf      .wait_fb
(2)   36/FFFFFFFFC000001C : 8513                		mov.w   @(6,r1),r0			; SVDP-fill address
(2)   37/FFFFFFFFC000001E : 705B                		add     #$5B,r0				; pre-increment
(2)   38/FFFFFFFFC0000020 : 8113                		mov.w   r0,@(6,r1)
(2)   39/FFFFFFFFC0000022 : 901C                		mov.w   #328/2,r0			; SVDP-fill size (320 pixels)
(2)   40/FFFFFFFFC0000024 : 8112                		mov.w   r0,@(4,r1)
(2)   41/FFFFFFFFC0000026 : E000                		mov.w	#$0000,r0			; SVDP-fill pixel data
(2)   42/FFFFFFFFC0000028 : 8114                		mov.w   r0,@(8,r1)			; now SVDP-fill is now busy.
(2)   43/FFFFFFFFC000002A : 9119                		mov	#$FFFFFE80,r1
(2)   44/FFFFFFFFC000002C : 9019                		mov.w   #$A518,r0			; OFF
(2)   45/FFFFFFFFC000002E : 2101                		mov.w   r0,@r1
(2)   46/FFFFFFFFC0000030 : CB20                		or      #$20,r0				; ON
(2)   47/FFFFFFFFC0000032 : 2101                		mov.w   r0,@r1
(2)   48/FFFFFFFFC0000034 : 9016                		mov.w   #$5A10,r0			; Timer before next watchdog
(2)   49/FFFFFFFFC0000036 : 2101                		mov.w   r0,@r1
(2)   50/FFFFFFFFC0000038 : D107                		mov	#Cach_ClrLines,r1		; Decrement a line to progress
(2)   51/FFFFFFFFC000003A : 6012                		mov	@r1,r0
(2)   52/FFFFFFFFC000003C : 4010                		dt	r0
(2)   53/FFFFFFFFC000003E : 8F02                		bf/s	.on_clr
(2)   54/FFFFFFFFC0000040 : 2102                		mov	r0,@r1
(2)   55/FFFFFFFFC0000042 : E001                		mov	#1,r0				; If finished: set task $01
(2)   56/FFFFFFFFC0000044 : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)   57/FFFFFFFFC0000046 :                     .on_clr:
(2)   58/FFFFFFFFC0000046 : 000B                		rts
(2)   59/FFFFFFFFC0000048 : 0009                		nop
(2)   60/FFFFFFFFC000004A :                     		align 4
(2)   61/FFFFFFFFC000004C : 2F26                .exit:		mov	r2,@-r15
(2)   62/FFFFFFFFC000004E : A1AC                		bra	drwtask_exit
(2)   63/FFFFFFFFC0000050 : E210                		mov	#$10,r2
(2)   64/FFFFFFFFC0000052 :                     		align 4
(2)   65/FFFFFFFFC0000054 : 2000 4100 C000 06D4 		ltorg
                    FE10 00A4 FE80 A518 
                    5A10                
(2)   66/FFFFFFFFC0000066 :                     
(2)   67/FFFFFFFFC0000066 :                     ; ------------------------------------------------
(2)   68/FFFFFFFFC0000066 :                     ; Main drawing routines
(2)   69/FFFFFFFFC0000066 :                     ; ------------------------------------------------
(2)   70/FFFFFFFFC0000066 :                     
(2)   71/FFFFFFFFC0000066 :                     		align 4
(2)   72/FFFFFFFFC0000068 :                     maindrw_tasks:
(2)   73/FFFFFFFFC0000068 : 4008                		shll2	r0
(2)   74/FFFFFFFFC000006A : D134                		mov	#.list,r1
(2)   75/FFFFFFFFC000006C : 001E                		mov	@(r1,r0),r0
(2)   76/FFFFFFFFC000006E : 402B                		jmp	@r0
(2)   77/FFFFFFFFC0000070 : 0009                		nop
(2)   78/FFFFFFFFC0000072 :                     		align 4
(2)   79/FFFFFFFFC0000074 :                     .list:
(2)   80/FFFFFFFFC0000074 : C000 0384           		dc.l slvplgn_00		;
(2)   81/FFFFFFFFC0000078 : C000 00C8           		dc.l slvplgn_01		; Main drawing routine
(2)   82/FFFFFFFFC000007C : C000 0080           		dc.l slvplgn_02		; Resume from solid color
(2)   83/FFFFFFFFC0000080 :                     
(2)   84/FFFFFFFFC0000080 :                     ; --------------------------------
(2)   85/FFFFFFFFC0000080 :                     ; Task $02
(2)   86/FFFFFFFFC0000080 :                     ; --------------------------------
(2)   87/FFFFFFFFC0000080 :                     
(2)   88/FFFFFFFFC0000080 :                     ; NOTE: It only resumes from solid_color
(2)   89/FFFFFFFFC0000080 :                     
(2)   90/FFFFFFFFC0000080 :                     slvplgn_02:
(2)   91/FFFFFFFFC0000080 : 2F26                		mov	r2,@-r15
(2)   92/FFFFFFFFC0000082 : 2F36                		mov	r3,@-r15
(2)   93/FFFFFFFFC0000084 : 2F46                		mov	r4,@-r15
(2)   94/FFFFFFFFC0000086 : 2F56                		mov	r5,@-r15
(2)   95/FFFFFFFFC0000088 : 2F66                		mov	r6,@-r15
(2)   96/FFFFFFFFC000008A : 2F76                		mov	r7,@-r15
(2)   97/FFFFFFFFC000008C : 2F86                		mov	r8,@-r15
(2)   98/FFFFFFFFC000008E : 2F96                		mov	r9,@-r15
(2)   99/FFFFFFFFC0000090 : 2FA6                		mov	r10,@-r15
(2)  100/FFFFFFFFC0000092 : 2FB6                		mov	r11,@-r15
(2)  101/FFFFFFFFC0000094 : 2FC6                		mov	r12,@-r15
(2)  102/FFFFFFFFC0000096 : 2FD6                		mov	r13,@-r15
(2)  103/FFFFFFFFC0000098 : 2FE6                		mov	r14,@-r15
(2)  104/FFFFFFFFC000009A : 4F12                		sts	macl,@-r15
(2)  105/FFFFFFFFC000009C : 4F02                		sts	mach,@-r15
(2)  106/FFFFFFFFC000009E : D028                		mov	#Cach_LnDrw_L,r0
(2)  107/FFFFFFFFC00000A0 : 6E06                		mov	@r0+,r14
(2)  108/FFFFFFFFC00000A2 : 6D06                		mov	@r0+,r13
(2)  109/FFFFFFFFC00000A4 : 6C06                		mov	@r0+,r12
(2)  110/FFFFFFFFC00000A6 : 6B06                		mov	@r0+,r11
(2)  111/FFFFFFFFC00000A8 : 6A06                		mov	@r0+,r10
(2)  112/FFFFFFFFC00000AA : 6906                		mov	@r0+,r9
(2)  113/FFFFFFFFC00000AC : 6806                		mov	@r0+,r8
(2)  114/FFFFFFFFC00000AE : 6706                		mov	@r0+,r7
(2)  115/FFFFFFFFC00000B0 : 6606                		mov	@r0+,r6
(2)  116/FFFFFFFFC00000B2 : 6506                		mov	@r0+,r5
(2)  117/FFFFFFFFC00000B4 : 6406                		mov	@r0+,r4
(2)  118/FFFFFFFFC00000B6 : 6306                		mov	@r0+,r3
(2)  119/FFFFFFFFC00000B8 : 6206                		mov	@r0+,r2
(2)  120/FFFFFFFFC00000BA : 6106                		mov	@r0+,r1
(2)  121/FFFFFFFFC00000BC : E001                		mov	#1,r0
(2)  122/FFFFFFFFC00000BE : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  123/FFFFFFFFC00000C0 : A14F                		bra	drwsld_updline
(2)  124/FFFFFFFFC00000C2 : 0009                		nop
(2)  125/FFFFFFFFC00000C4 : A171                .exit:		bra	drwtask_exit
(2)  126/FFFFFFFFC00000C6 : E210                		mov	#$10,r2
(2)  127/FFFFFFFFC00000C8 :                     		align 4
(2)  128/FFFFFFFFC00000C8 :                     
(2)  129/FFFFFFFFC00000C8 :                     ; --------------------------------
(2)  130/FFFFFFFFC00000C8 :                     ; Task $01
(2)  131/FFFFFFFFC00000C8 :                     ; ------------------------------f--
(2)  132/FFFFFFFFC00000C8 :                     
(2)  133/FFFFFFFFC00000C8 :                     slvplgn_01:
(2)  134/FFFFFFFFC00000C8 : 2F26                		mov	r2,@-r15
(2)  135/FFFFFFFFC00000CA : C514                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces to draw?
(2)  136/FFFFFFFFC00000CC : 4015                		cmp/pl	r0
(2)  137/FFFFFFFFC00000CE : 8903                		bt	.has_pz
(2)  138/FFFFFFFFC00000D0 : E000                		mov	#0,r0
(2)  139/FFFFFFFFC00000D2 : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  140/FFFFFFFFC00000D4 : A169                .exit:		bra	drwtask_exit
(2)  141/FFFFFFFFC00000D6 : E210                		mov	#$10,r2
(2)  142/FFFFFFFFC00000D8 :                     .has_pz:
(2)  143/FFFFFFFFC00000D8 : 2F36                		mov	r3,@-r15			; Save all these regs
(2)  144/FFFFFFFFC00000DA : 2F46                		mov	r4,@-r15
(2)  145/FFFFFFFFC00000DC : 2F56                		mov	r5,@-r15
(2)  146/FFFFFFFFC00000DE : 2F66                		mov	r6,@-r15
(2)  147/FFFFFFFFC00000E0 : 2F76                		mov	r7,@-r15
(2)  148/FFFFFFFFC00000E2 : 2F86                		mov	r8,@-r15
(2)  149/FFFFFFFFC00000E4 : 2F96                		mov	r9,@-r15
(2)  150/FFFFFFFFC00000E6 : 2FA6                		mov	r10,@-r15
(2)  151/FFFFFFFFC00000E8 : 2FB6                		mov	r11,@-r15
(2)  152/FFFFFFFFC00000EA : 2FC6                		mov	r12,@-r15
(2)  153/FFFFFFFFC00000EC : 2FD6                		mov	r13,@-r15
(2)  154/FFFFFFFFC00000EE : 2FE6                		mov	r14,@-r15
(2)  155/FFFFFFFFC00000F0 : 4F12                		sts	macl,@-r15
(2)  156/FFFFFFFFC00000F2 : 4F02                		sts	mach,@-r15
(2)  157/FFFFFFFFC00000F4 :                     drwtsk1_newpz:
(2)  158/FFFFFFFFC00000F4 : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0
(2)  159/FFFFFFFFC00000F6 : 6E03                		mov	r0,r14
(2)  160/FFFFFFFFC00000F8 : 59E2                		mov	@(plypz_ytb,r14),r9	; Start grabbing StartY/EndY positions
(2)  161/FFFFFFFFC00000FA : 6A9F                		exts.w	r9,r10			; r10 - Bottom
(2)  162/FFFFFFFFC00000FC : 4929                		shlr16	r9
(2)  163/FFFFFFFFC00000FE : 699F                		exts.w	r9,r9			;  r9 - Top
(2)  164/FFFFFFFFC0000100 : 3A90                		cmp/eq	r9,r10			; if Top==Bottom, exit
(2)  165/FFFFFFFFC0000102 : 8908                		bt	.invld_y
(2)  166/FFFFFFFFC0000104 : 901E                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  167/FFFFFFFFC0000106 : 3903                		cmp/ge	r0,r9
(2)  168/FFFFFFFFC0000108 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  169/FFFFFFFFC000010A : 3A07                		cmp/gt	r0,r10
(2)  170/FFFFFFFFC000010C : 8B00                		bf	.len_max
(2)  171/FFFFFFFFC000010E : 6A03                		mov	r0,r10
(2)  172/FFFFFFFFC0000110 :                     .len_max:
(2)  173/FFFFFFFFC0000110 : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2)  174/FFFFFFFFC0000112 : 4A15                		cmp/pl	r10
(2)  175/FFFFFFFFC0000114 : 8904                		bt	.valid_y
(2)  176/FFFFFFFFC0000116 :                     .invld_y:
(2)  177/FFFFFFFFC0000116 : A129                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2)  178/FFFFFFFFC0000118 : 0009                		nop
(2)  179/FFFFFFFFC000011A :                     .no_pz:
(2)  180/FFFFFFFFC000011A : A146                		bra	drwtask_exit
(2)  181/FFFFFFFFC000011C : 0009                		nop
(2)  182/FFFFFFFFC000011E :                     		align 4
(2)  183/FFFFFFFFC0000120 :                     .valid_y:
(2)  184/FFFFFFFFC0000120 : 51E3                		mov	@(plypz_xl,r14),r1
(2)  185/FFFFFFFFC0000122 : 6313                		mov	r1,r3
(2)  186/FFFFFFFFC0000124 : 52E6                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  187/FFFFFFFFC0000126 : 4129                		shlr16	r1
(2)  188/FFFFFFFFC0000128 : 54E7                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  189/FFFFFFFFC000012A : 4128                		shll16	r1
(2)  190/FFFFFFFFC000012C : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2)  191/FFFFFFFFC000012E : 4328                		shll16	r3
(2)  192/FFFFFFFFC0000130 : 4029                		shlr16	r0
(2)  193/FFFFFFFFC0000132 : 4019                		shlr8	r0
(2)  194/FFFFFFFFC0000134 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2)  195/FFFFFFFFC0000136 : 8B0B                 		bf	drwtsk_texmode
(2)  196/FFFFFFFFC0000138 : A0B8                		bra	drwtsk_solidmode
(2)  197/FFFFFFFFC000013A : 0009                		nop
(2)  198/FFFFFFFFC000013C :                     		align 4
(2)  199/FFFFFFFFC000013C : C000 0074 C000 0738 		ltorg
                    00E0                
(2)  200/FFFFFFFFC0000146 :                     
(2)  201/FFFFFFFFC0000146 :                     ; ------------------------------------
(2)  202/FFFFFFFFC0000146 :                     ; Texture mode
(2)  203/FFFFFFFFC0000146 :                     ;
(2)  204/FFFFFFFFC0000146 :                     ; r1  - XL
(2)  205/FFFFFFFFC0000146 :                     ; r2  - XL DX
(2)  206/FFFFFFFFC0000146 :                     ; r3  - XR
(2)  207/FFFFFFFFC0000146 :                     ; r4  - XR DX
(2)  208/FFFFFFFFC0000146 :                     ; r5  - SRC XL
(2)  209/FFFFFFFFC0000146 :                     ; r6  - SRC XR
(2)  210/FFFFFFFFC0000146 :                     ; r7  - SRC YL
(2)  211/FFFFFFFFC0000146 :                     ; r8  - SRC YR
(2)  212/FFFFFFFFC0000146 :                     ; r9  - Y current
(2)  213/FFFFFFFFC0000146 :                     ; r10  - Number of lines
(2)  214/FFFFFFFFC0000146 :                     ; ------------------------------------
(2)  215/FFFFFFFFC0000146 :                     
(2)  216/FFFFFFFFC0000146 :                     go_drwsld_updline_tex:
(2)  217/FFFFFFFFC0000146 : A09B                		bra	drwsld_updline_tex
(2)  218/FFFFFFFFC0000148 : 0009                		nop
(2)  219/FFFFFFFFC000014A :                     go_drwtex_gonxtpz:
(2)  220/FFFFFFFFC000014A : A10F                		bra	drwsld_nextpz
(2)  221/FFFFFFFFC000014C : 0009                		nop
(2)  222/FFFFFFFFC000014E :                     		align 4
(2)  223/FFFFFFFFC0000150 :                     drwtsk_texmode:
(2)  224/FFFFFFFFC0000150 : C51E                		mov.w	@(marsGbl_DivStop_M,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2)  225/FFFFFFFFC0000152 : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2)  226/FFFFFFFFC0000154 : 8B02                		bf	.texvalid
(2)  227/FFFFFFFFC0000156 : A11A                		bra	drwtask_return
(2)  228/FFFFFFFFC0000158 : 0009                		nop
(2)  229/FFFFFFFFC000015A :                     		align 4
(2)  230/FFFFFFFFC000015C :                     .texvalid:
(2)  231/FFFFFFFFC000015C : 55E4                		mov	@(plypz_src_xl,r14),r5		; Texture X left/right
(2)  232/FFFFFFFFC000015E : 6653                		mov	r5,r6
(2)  233/FFFFFFFFC0000160 : 57E5                		mov	@(plypz_src_yl,r14),r7		; Texture Y up/down
(2)  234/FFFFFFFFC0000162 : 4529                		shlr16	r5
(2)  235/FFFFFFFFC0000164 : 6873                		mov	r7,r8
(2)  236/FFFFFFFFC0000166 : 4729                		shlr16	r7
(2)  237/FFFFFFFFC0000168 :                     
(2)  238/FFFFFFFFC0000168 : 4528                		shll16	r5
(2)  239/FFFFFFFFC000016A : 4628                		shll16	r6
(2)  240/FFFFFFFFC000016C : 4728                		shll16	r7
(2)  241/FFFFFFFFC000016E : 4828                		shll16	r8
(2)  242/FFFFFFFFC0000170 :                     drwsld_nxtline_tex:
(2)  243/FFFFFFFFC0000170 : 4911                		cmp/pz	r9				; Y Start below 0?
(2)  244/FFFFFFFFC0000172 : 8BE8                		bf	go_drwsld_updline_tex
(2)  245/FFFFFFFFC0000174 : D04C                		mov	tag_yhght,r0			; Y Start after 224?
(2)  246/FFFFFFFFC0000176 : 3903                		cmp/ge	r0,r9
(2)  247/FFFFFFFFC0000178 : 89E7                		bt	go_drwtex_gonxtpz
(2)  248/FFFFFFFFC000017A :                     
(2)  249/FFFFFFFFC000017A : D091                		mov	#Cach_Bkup_S,r0
(2)  250/FFFFFFFFC000017C : 2016                		mov	r1,@-r0
(2)  251/FFFFFFFFC000017E : 2026                		mov	r2,@-r0
(2)  252/FFFFFFFFC0000180 : 2036                		mov	r3,@-r0
(2)  253/FFFFFFFFC0000182 : 2046                		mov	r4,@-r0
(2)  254/FFFFFFFFC0000184 : 2056                		mov	r5,@-r0
(2)  255/FFFFFFFFC0000186 : 2066                		mov	r6,@-r0
(2)  256/FFFFFFFFC0000188 : 2076                		mov	r7,@-r0
(2)  257/FFFFFFFFC000018A : 2086                		mov	r8,@-r0
(2)  258/FFFFFFFFC000018C : 2096                		mov	r9,@-r0
(2)  259/FFFFFFFFC000018E : 20A6                		mov	r10,@-r0
(2)  260/FFFFFFFFC0000190 : 20B6                		mov	r11,@-r0
(2)  261/FFFFFFFFC0000192 :                     
(2)  262/FFFFFFFFC0000192 :                     	; r11-r12 are free now.
(2)  263/FFFFFFFFC0000192 : 4129                		shlr16	r1
(2)  264/FFFFFFFFC0000194 : 4329                		shlr16	r3
(2)  265/FFFFFFFFC0000196 : 611F                		exts	r1,r1
(2)  266/FFFFFFFFC0000198 : 633F                		exts	r3,r3
(2)  267/FFFFFFFFC000019A : 6033                		mov	r3,r0			; r0: X Right - X Left
(2)  268/FFFFFFFFC000019C : 3018                		sub	r1,r0
(2)  269/FFFFFFFFC000019E : 4015                		cmp/pl	r0			; Line reversed?
(2)  270/FFFFFFFFC00001A0 : 8908                		bt	.txrevers
(2)  271/FFFFFFFFC00001A2 : 6033                		mov	r3,r0			; Swap XL and XR values
(2)  272/FFFFFFFFC00001A4 : 6313                		mov	r1,r3
(2)  273/FFFFFFFFC00001A6 : 6103                		mov	r0,r1
(2)  274/FFFFFFFFC00001A8 : 6053                		mov	r5,r0
(2)  275/FFFFFFFFC00001AA : 6563                		mov	r6,r5
(2)  276/FFFFFFFFC00001AC : 6603                		mov	r0,r6
(2)  277/FFFFFFFFC00001AE : 6073                		mov	r7,r0
(2)  278/FFFFFFFFC00001B0 : 6783                		mov	r8,r7
(2)  279/FFFFFFFFC00001B2 : 6803                		mov	r0,r8
(2)  280/FFFFFFFFC00001B4 :                     .txrevers:
(2)  281/FFFFFFFFC00001B4 : 3310                		cmp/eq	r1,r3				; Same X position?
(2)  282/FFFFFFFFC00001B6 : 8956                		bt	.tex_skip_line
(2)  283/FFFFFFFFC00001B8 : D03A                		mov	tag_width,r0			; X right < 0?
(2)  284/FFFFFFFFC00001BA : 4311                		cmp/pz	r3
(2)  285/FFFFFFFFC00001BC : 8B53                		bf	.tex_skip_line
(2)  286/FFFFFFFFC00001BE : 3107                		cmp/gt	r0,r1				; X left > 320?
(2)  287/FFFFFFFFC00001C0 : 8951                		bt	.tex_skip_line
(2)  288/FFFFFFFFC00001C2 : 6233                		mov	r3,r2
(2)  289/FFFFFFFFC00001C4 : 6013                		mov 	r1,r0
(2)  290/FFFFFFFFC00001C6 : 3208                		sub 	r0,r2
(2)  291/FFFFFFFFC00001C8 : 3658                		sub	r5,r6
(2)  292/FFFFFFFFC00001CA : 3878                		sub	r7,r8
(2)  293/FFFFFFFFC00001CC :                     
(2)  294/FFFFFFFFC00001CC :                     	; Calculate new DX values
(2)  295/FFFFFFFFC00001CC :                     	; make sure DIV is not in use
(2)  296/FFFFFFFFC00001CC :                     	; before getting here.
(2)  297/FFFFFFFFC00001CC :                     	; (set marsGbl_DivStop_M to 1)
(2)  298/FFFFFFFFC00001CC : D034                		mov	tag_JR,r0			; r6 / r2
(2)  299/FFFFFFFFC00001CE : 2022                		mov	r2,@r0
(2)  300/FFFFFFFFC00001D0 : 1061                		mov	r6,@(4,r0)
(2)  301/FFFFFFFFC00001D2 : 0009                		nop
(2)  302/FFFFFFFFC00001D4 : 5601                		mov	@(4,r0),r6			; r8 / r2
(2)  303/FFFFFFFFC00001D6 : 2022                		mov	r2,@r0
(2)  304/FFFFFFFFC00001D8 : 1081                		mov	r8,@(4,r0)
(2)  305/FFFFFFFFC00001DA : 0009                		nop
(2)  306/FFFFFFFFC00001DC : 5801                		mov	@(4,r0),r8
(2)  307/FFFFFFFFC00001DE :                     
(2)  308/FFFFFFFFC00001DE :                     	; Limit X destination points
(2)  309/FFFFFFFFC00001DE :                     	; and correct the texture's X positions
(2)  310/FFFFFFFFC00001DE : D031                		mov	tag_width,r0		; XR point > 320?
(2)  311/FFFFFFFFC00001E0 : 3307                		cmp/gt	r0,r3
(2)  312/FFFFFFFFC00001E2 : 8B00                		bf	.tr_fix
(2)  313/FFFFFFFFC00001E4 : 6303                		mov	r0,r3				; Force XR to 320
(2)  314/FFFFFFFFC00001E6 :                     .tr_fix:
(2)  315/FFFFFFFFC00001E6 : 4111                		cmp/pz	r1				; XL point < 0?
(2)  316/FFFFFFFFC00001E8 : 8907                		bt	.tl_fix
(2)  317/FFFFFFFFC00001EA : 621B                		neg	r1,r2				; Fix texture positions
(2)  318/FFFFFFFFC00001EC : 326D                		dmuls	r6,r2
(2)  319/FFFFFFFFC00001EE : 001A                		sts	macl,r0
(2)  320/FFFFFFFFC00001F0 : 350C                		add	r0,r5
(2)  321/FFFFFFFFC00001F2 : 328D                		dmuls	r8,r2
(2)  322/FFFFFFFFC00001F4 : 001A                		sts	macl,r0
(2)  323/FFFFFFFFC00001F6 : 370C                		add	r0,r7
(2)  324/FFFFFFFFC00001F8 : 211A                		xor	r1,r1				; And reset XL to 0
(2)  325/FFFFFFFFC00001FA :                     .tl_fix:
(2)  326/FFFFFFFFC00001FA :                     
(2)  327/FFFFFFFFC00001FA :                     	; start
(2)  328/FFFFFFFFC00001FA : E0FE                		mov	#-2,r0
(2)  329/FFFFFFFFC00001FC : 2109                		and	r0,r1
(2)  330/FFFFFFFFC00001FE : 7301                		add	#1,r3			; XR add
(2)  331/FFFFFFFFC0000200 : 2309                		and	r0,r3
(2)  332/FFFFFFFFC0000202 : 3318                		sub 	r1,r3
(2)  333/FFFFFFFFC0000204 : 4321                		shar	r3
(2)  334/FFFFFFFFC0000206 : 4315                		cmp/pl	r3
(2)  335/FFFFFFFFC0000208 : 8B2D                		bf	.tex_skip_line
(2)  336/FFFFFFFFC000020A : DA6E                		mov	#_overwrite+$200,r10
(2)  337/FFFFFFFFC000020C : 54E0                		mov	@(plypz_type,r14),r4	;  r4 - texture width|palinc
(2)  338/FFFFFFFFC000020E : 6D43                		mov	r4,r13
(2)  339/FFFFFFFFC0000210 : 4429                		shlr16	r4
(2)  340/FFFFFFFFC0000212 : 90DF                		mov	#$FF,r0
(2)  341/FFFFFFFFC0000214 : 92DF                		mov	#$3FFF,r2
(2)  342/FFFFFFFFC0000216 : 2429                		and	r2,r4
(2)  343/FFFFFFFFC0000218 : 2D09                		and	r0,r13
(2)  344/FFFFFFFFC000021A : 6093                		mov 	r9,r0			; Y position * $200
(2)  345/FFFFFFFFC000021C : 4018                		shll8	r0
(2)  346/FFFFFFFFC000021E : 4000                		shll	r0
(2)  347/FFFFFFFFC0000220 : 3A0C                		add 	r0,r10			; Add Y
(2)  348/FFFFFFFFC0000222 : 3A1C                		add 	r1,r10			; Add X
(2)  349/FFFFFFFFC0000224 : 51E1                		mov	@(plypz_mtrl,r14),r1
(2)  350/FFFFFFFFC0000226 :                     .tex_xloop:
(2)  351/FFFFFFFFC0000226 : 6273                		mov	r7,r2
(2)  352/FFFFFFFFC0000228 : 4229                		shlr16	r2
(2)  353/FFFFFFFFC000022A : 242E                		mulu	r2,r4
(2)  354/FFFFFFFFC000022C : 6253                		mov	r5,r2	   		; Build column index
(2)  355/FFFFFFFFC000022E : 001A                		sts	macl,r0
(2)  356/FFFFFFFFC0000230 : 4229                		shlr16	r2
(2)  357/FFFFFFFFC0000232 : 302C                		add	r2,r0
(2)  358/FFFFFFFFC0000234 : 001C                		mov.b	@(r0,r1),r0		; Read left pixel
(2)  359/FFFFFFFFC0000236 : 30DC                		add	r13,r0			; color-index increment
(2)  360/FFFFFFFFC0000238 : C9FF                		and	#$FF,r0
(2)  361/FFFFFFFFC000023A : 4018                		shll8	r0
(2)  362/FFFFFFFFC000023C : 400A                		lds	r0,mach			; Save left pixel
(2)  363/FFFFFFFFC000023E :                     
(2)  364/FFFFFFFFC000023E : 356C                		add	r6,r5			; Update X
(2)  365/FFFFFFFFC0000240 : 378C                		add	r8,r7			; Update Y
(2)  366/FFFFFFFFC0000242 : 6273                		mov	r7,r2
(2)  367/FFFFFFFFC0000244 : 4229                		shlr16	r2
(2)  368/FFFFFFFFC0000246 : 242E                		mulu	r2,r4
(2)  369/FFFFFFFFC0000248 : 6253                		mov	r5,r2	   		; Build column index
(2)  370/FFFFFFFFC000024A : 001A                		sts	macl,r0
(2)  371/FFFFFFFFC000024C : 4229                		shlr16	r2
(2)  372/FFFFFFFFC000024E : 302C                		add	r2,r0
(2)  373/FFFFFFFFC0000250 : 001C                		mov.b	@(r0,r1),r0		; Read right pixel
(2)  374/FFFFFFFFC0000252 : 30DC                		add	r13,r0			; color-index increment
(2)  375/FFFFFFFFC0000254 : C9FF                		and	#$FF,r0
(2)  376/FFFFFFFFC0000256 :                     
(2)  377/FFFFFFFFC0000256 : 020A                		sts	mach,r2
(2)  378/FFFFFFFFC0000258 : 202B                		or	r2,r0
(2)  379/FFFFFFFFC000025A : 2A01                		mov.w	r0,@r10
(2)  380/FFFFFFFFC000025C : 7A02                		add	#2,r10
(2)  381/FFFFFFFFC000025E : 356C                		add	r6,r5			; Update X
(2)  382/FFFFFFFFC0000260 : 4310                		dt	r3
(2)  383/FFFFFFFFC0000262 : 8FE0                		bf/s	.tex_xloop
(2)  384/FFFFFFFFC0000264 : 378C                		add	r8,r7			; Update Y
(2)  385/FFFFFFFFC0000266 :                     .tex_skip_line:
(2)  386/FFFFFFFFC0000266 : D058                		mov	#Cach_Bkup_LB,r0
(2)  387/FFFFFFFFC0000268 : 6B06                		mov	@r0+,r11
(2)  388/FFFFFFFFC000026A : 6A06                		mov	@r0+,r10
(2)  389/FFFFFFFFC000026C : 6906                		mov	@r0+,r9
(2)  390/FFFFFFFFC000026E : 6806                		mov	@r0+,r8
(2)  391/FFFFFFFFC0000270 : 6706                		mov	@r0+,r7
(2)  392/FFFFFFFFC0000272 : 6606                		mov	@r0+,r6
(2)  393/FFFFFFFFC0000274 : 6506                		mov	@r0+,r5
(2)  394/FFFFFFFFC0000276 : 6406                		mov	@r0+,r4
(2)  395/FFFFFFFFC0000278 : 6306                		mov	@r0+,r3
(2)  396/FFFFFFFFC000027A : 6206                		mov	@r0+,r2
(2)  397/FFFFFFFFC000027C : 6106                		mov	@r0+,r1
(2)  398/FFFFFFFFC000027E : 0009                		nop
(2)  399/FFFFFFFFC0000280 :                     drwsld_updline_tex:
(2)  400/FFFFFFFFC0000280 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  401/FFFFFFFFC0000282 : 350C                		add	r0,r5
(2)  402/FFFFFFFFC0000284 : 50E9                		mov	@(plypz_src_xr_dx,r14),r0
(2)  403/FFFFFFFFC0000286 : 360C                		add	r0,r6
(2)  404/FFFFFFFFC0000288 : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2)  405/FFFFFFFFC000028A : 370C                		add	r0,r7
(2)  406/FFFFFFFFC000028C : 50EB                		mov	@(plypz_src_yr_dx,r14),r0
(2)  407/FFFFFFFFC000028E : 380C                		add	r0,r8
(2)  408/FFFFFFFFC0000290 : 312C                		add	r2,r1				; Update X postions
(2)  409/FFFFFFFFC0000292 : 4A10                		dt	r10
(2)  410/FFFFFFFFC0000294 : 8D02                		bt/s	drwtex_nextpz
(2)  411/FFFFFFFFC0000296 : 334C                		add	r4,r3
(2)  412/FFFFFFFFC0000298 : AF6A                		bra	drwsld_nxtline_tex
(2)  413/FFFFFFFFC000029A : 7901                		add	#1,r9
(2)  414/FFFFFFFFC000029C :                     drwtex_nextpz:
(2)  415/FFFFFFFFC000029C : A066                		bra	drwsld_nextpz
(2)  416/FFFFFFFFC000029E : 0009                		nop
(2)  417/FFFFFFFFC00002A0 :                     		align 4
(2)  418/FFFFFFFFC00002A0 : FFFF FF00           tag_JR:		dc.l _JR
(2)  419/FFFFFFFFC00002A4 : 0000 0140           tag_width:	dc.l	SCREEN_WIDTH
(2)  420/FFFFFFFFC00002A8 : 0000 00E0           tag_yhght:	dc.l	SCREEN_HEIGHT
(2)  421/FFFFFFFFC00002AC :                     
(2)  422/FFFFFFFFC00002AC :                     ; ------------------------------------
(2)  423/FFFFFFFFC00002AC :                     ; Solid Color
(2)  424/FFFFFFFFC00002AC :                     ;
(2)  425/FFFFFFFFC00002AC :                     ; r1  - XL
(2)  426/FFFFFFFFC00002AC :                     ; r2  - XL DX
(2)  427/FFFFFFFFC00002AC :                     ; r3  - XR
(2)  428/FFFFFFFFC00002AC :                     ; r4  - XR DX
(2)  429/FFFFFFFFC00002AC :                     ; r9  - Y current
(2)  430/FFFFFFFFC00002AC :                     ; r10  - Number of lines
(2)  431/FFFFFFFFC00002AC :                     ; ------------------------------------
(2)  432/FFFFFFFFC00002AC :                     
(2)  433/FFFFFFFFC00002AC :                     drwtsk_solidmode:
(2)  434/FFFFFFFFC00002AC : 9092                		mov	#$FF,r0
(2)  435/FFFFFFFFC00002AE : 56E1                		mov	@(plypz_mtrl,r14),r6
(2)  436/FFFFFFFFC00002B0 : 55E0                		mov	@(plypz_type,r14),r5
(2)  437/FFFFFFFFC00002B2 : 2509                		and	r0,r5
(2)  438/FFFFFFFFC00002B4 : 2609                		and	r0,r6
(2)  439/FFFFFFFFC00002B6 : 365C                		add	r5,r6
(2)  440/FFFFFFFFC00002B8 : DD44                		mov	#_vdpreg,r13
(2)  441/FFFFFFFFC00002BA : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  442/FFFFFFFFC00002BC : C802                		tst	#2,r0
(2)  443/FFFFFFFFC00002BE : 8BFC                		bf	.wait
(2)  444/FFFFFFFFC00002C0 :                     drwsld_nxtline:
(2)  445/FFFFFFFFC00002C0 : 6093                		mov	r9,r0
(2)  446/FFFFFFFFC00002C2 : 30AC                		add	r10,r0
(2)  447/FFFFFFFFC00002C4 : 4015                		cmp/pl	r0
(2)  448/FFFFFFFFC00002C6 : 8B51                		bf	drwsld_nextpz
(2)  449/FFFFFFFFC00002C8 : 4911                		cmp/pz	r9
(2)  450/FFFFFFFFC00002CA : 8B4A                		bf	drwsld_updline
(2)  451/FFFFFFFFC00002CC : 9084                		mov	#SCREEN_HEIGHT,r0
(2)  452/FFFFFFFFC00002CE : 3907                		cmp/gt	r0,r9
(2)  453/FFFFFFFFC00002D0 : 894C                		bt	drwsld_nextpz
(2)  454/FFFFFFFFC00002D2 :                     
(2)  455/FFFFFFFFC00002D2 : 6B13                		mov	r1,r11
(2)  456/FFFFFFFFC00002D4 : 6C33                		mov	r3,r12
(2)  457/FFFFFFFFC00002D6 : 4B29                		shlr16	r11
(2)  458/FFFFFFFFC00002D8 : 4C29                		shlr16	r12
(2)  459/FFFFFFFFC00002DA : 6BBF                		exts.w	r11,r11
(2)  460/FFFFFFFFC00002DC : 6CCF                		exts.w	r12,r12
(2)  461/FFFFFFFFC00002DE : 60C3                		mov	r12,r0
(2)  462/FFFFFFFFC00002E0 : 30B8                		sub	r11,r0
(2)  463/FFFFFFFFC00002E2 : 4011                		cmp/pz	r0
(2)  464/FFFFFFFFC00002E4 : 8902                		bt	.revers
(2)  465/FFFFFFFFC00002E6 : 60C3                		mov	r12,r0
(2)  466/FFFFFFFFC00002E8 : 6CB3                		mov	r11,r12
(2)  467/FFFFFFFFC00002EA : 6B03                		mov	r0,r11
(2)  468/FFFFFFFFC00002EC :                     .revers:
(2)  469/FFFFFFFFC00002EC : 9075                		mov	#SCREEN_WIDTH-2,r0
(2)  470/FFFFFFFFC00002EE : 4C15                		cmp/pl	r12
(2)  471/FFFFFFFFC00002F0 : 8B37                		bf	drwsld_updline
(2)  472/FFFFFFFFC00002F2 : 3B07                		cmp/gt	r0,r11
(2)  473/FFFFFFFFC00002F4 : 8935                		bt	drwsld_updline
(2)  474/FFFFFFFFC00002F6 : 3C07                		cmp/gt	r0,r12
(2)  475/FFFFFFFFC00002F8 : 8B00                		bf	.r_fix
(2)  476/FFFFFFFFC00002FA : 6C03                		mov	r0,r12
(2)  477/FFFFFFFFC00002FC :                     .r_fix:
(2)  478/FFFFFFFFC00002FC : 4B15                		cmp/pl	r11
(2)  479/FFFFFFFFC00002FE : 8900                		bt	.l_fix
(2)  480/FFFFFFFFC0000300 : 2BBA                		xor	r11,r11
(2)  481/FFFFFFFFC0000302 :                     .l_fix:
(2)  482/FFFFFFFFC0000302 : E0FE                		mov	#-2,r0
(2)  483/FFFFFFFFC0000304 : 2B09                		and	r0,r11
(2)  484/FFFFFFFFC0000306 : 2C09                		and	r0,r12
(2)  485/FFFFFFFFC0000308 : 60C3                		mov	r12,r0
(2)  486/FFFFFFFFC000030A : 30B8                		sub	r11,r0
(2)  487/FFFFFFFFC000030C : 4015                		cmp/pl	r0
(2)  488/FFFFFFFFC000030E : 8B28                		bf	drwsld_updline
(2)  489/FFFFFFFFC0000310 :                     
(2)  490/FFFFFFFFC0000310 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  491/FFFFFFFFC0000312 : C802                		tst	#2,r0
(2)  492/FFFFFFFFC0000314 : 8BFC                		bf	.wait
(2)  493/FFFFFFFFC0000316 : 60C3                		mov	r12,r0
(2)  494/FFFFFFFFC0000318 : 30B8                		sub	r11,r0
(2)  495/FFFFFFFFC000031A : 6C03                		mov	r0,r12
(2)  496/FFFFFFFFC000031C : 4001                		shlr	r0
(2)  497/FFFFFFFFC000031E : 81D2                		mov.w	r0,@(4,r13)	; length
(2)  498/FFFFFFFFC0000320 : 60B3                		mov	r11,r0
(2)  499/FFFFFFFFC0000322 : 4001                		shlr	r0
(2)  500/FFFFFFFFC0000324 : 6593                		mov	r9,r5
(2)  501/FFFFFFFFC0000326 : 7501                		add	#1,r5
(2)  502/FFFFFFFFC0000328 : 4518                		shll8	r5
(2)  503/FFFFFFFFC000032A : 305C                		add	r5,r0
(2)  504/FFFFFFFFC000032C : 81D3                		mov.w	r0,@(6,r13)	; address
(2)  505/FFFFFFFFC000032E : 6063                		mov	r6,r0
(2)  506/FFFFFFFFC0000330 : 4018                		shll8	r0
(2)  507/FFFFFFFFC0000332 : 206B                		or	r6,r0
(2)  508/FFFFFFFFC0000334 : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2)  509/FFFFFFFFC0000336 :                     ; .wait:	mov.w	@(10,r13),r0
(2)  510/FFFFFFFFC0000336 :                     ; 		tst	#2,r0
(2)  511/FFFFFFFFC0000336 :                     ; 		bf	.wait
(2)  512/FFFFFFFFC0000336 :                     
(2)  513/FFFFFFFFC0000336 :                     ; 	If the line is too large, leave it to VDP
(2)  514/FFFFFFFFC0000336 :                     ; 	and exit watchdog, we will come back on
(2)  515/FFFFFFFFC0000336 :                     ; 	next trigger.
(2)  516/FFFFFFFFC0000336 : E028                		mov	#$28,r0
(2)  517/FFFFFFFFC0000338 : 3C07                		cmp/gt	r0,r12
(2)  518/FFFFFFFFC000033A : 8B12                		bf	drwsld_updline
(2)  519/FFFFFFFFC000033C : E002                		mov	#2,r0
(2)  520/FFFFFFFFC000033E : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  521/FFFFFFFFC0000340 : D023                		mov	#Cach_LnDrw_S,r0
(2)  522/FFFFFFFFC0000342 : 2016                		mov	r1,@-r0
(2)  523/FFFFFFFFC0000344 : 2026                		mov	r2,@-r0
(2)  524/FFFFFFFFC0000346 : 2036                		mov	r3,@-r0
(2)  525/FFFFFFFFC0000348 : 2046                		mov	r4,@-r0
(2)  526/FFFFFFFFC000034A : 2056                		mov	r5,@-r0
(2)  527/FFFFFFFFC000034C : 2066                		mov	r6,@-r0
(2)  528/FFFFFFFFC000034E : 2076                		mov	r7,@-r0
(2)  529/FFFFFFFFC0000350 : 2086                		mov	r8,@-r0
(2)  530/FFFFFFFFC0000352 : 2096                		mov	r9,@-r0
(2)  531/FFFFFFFFC0000354 : 20A6                		mov	r10,@-r0
(2)  532/FFFFFFFFC0000356 : 20B6                		mov	r11,@-r0
(2)  533/FFFFFFFFC0000358 : 20C6                		mov	r12,@-r0
(2)  534/FFFFFFFFC000035A : 20D6                		mov	r13,@-r0
(2)  535/FFFFFFFFC000035C : 20E6                		mov	r14,@-r0
(2)  536/FFFFFFFFC000035E : A016                		bra	drwtask_return
(2)  537/FFFFFFFFC0000360 : E208                		mov	#$08,r2			; Exit and re-enter
(2)  538/FFFFFFFFC0000362 :                     drwsld_updline:
(2)  539/FFFFFFFFC0000362 : 312C                		add	r2,r1
(2)  540/FFFFFFFFC0000364 : 334C                		add	r4,r3
(2)  541/FFFFFFFFC0000366 : 4A10                		dt	r10
(2)  542/FFFFFFFFC0000368 : 8FAA                		bf/s	drwsld_nxtline
(2)  543/FFFFFFFFC000036A : 7901                		add	#1,r9
(2)  544/FFFFFFFFC000036C :                     
(2)  545/FFFFFFFFC000036C :                     ; ------------------------------------
(2)  546/FFFFFFFFC000036C :                     
(2)  547/FFFFFFFFC000036C :                     drwsld_nextpz:
(2)  548/FFFFFFFFC000036C : C603                		mov	@(marsGbl_PlyPzList_End,gbr),r0
(2)  549/FFFFFFFFC000036E : 7E30                		add	#sizeof_plypz,r14		; And set new point
(2)  550/FFFFFFFFC0000370 : 3E03                		cmp/ge	r0,r14
(2)  551/FFFFFFFFC0000372 : 8B00                		bf	.reset_rd
(2)  552/FFFFFFFFC0000374 : C602                		mov	@(marsGbl_PlyPzList_Start,gbr),r0
(2)  553/FFFFFFFFC0000376 :                     .reset_rd:
(2)  554/FFFFFFFFC0000376 : 60E3                		mov	r14,r0
(2)  555/FFFFFFFFC0000378 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  556/FFFFFFFFC000037A : C514                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece
(2)  557/FFFFFFFFC000037C : 70FF                		add	#-1,r0
(2)  558/FFFFFFFFC000037E : C114                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  559/FFFFFFFFC0000380 : A005                		bra	drwtask_return
(2)  560/FFFFFFFFC0000382 : E210                		mov	#$10,r2			; Timer for next watchdog
(2)  561/FFFFFFFFC0000384 :                     
(2)  562/FFFFFFFFC0000384 :                     ; --------------------------------
(2)  563/FFFFFFFFC0000384 :                     ; Task $00
(2)  564/FFFFFFFFC0000384 :                     ; --------------------------------
(2)  565/FFFFFFFFC0000384 :                     
(2)  566/FFFFFFFFC0000384 :                     slvplgn_00:
(2)  567/FFFFFFFFC0000384 : 2F26                		mov	r2,@-r15
(2)  568/FFFFFFFFC0000386 : E000                		mov	#0,r0
(2)  569/FFFFFFFFC0000388 : C111                		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  570/FFFFFFFFC000038A : A00E                		bra	drwtask_exit
(2)  571/FFFFFFFFC000038C : E210                		mov	#$10,r2
(2)  572/FFFFFFFFC000038E :                     
(2)  573/FFFFFFFFC000038E :                     drwtask_return:
(2)  574/FFFFFFFFC000038E : 4F06                		lds	@r15+,mach
(2)  575/FFFFFFFFC0000390 : 4F16                		lds	@r15+,macl
(2)  576/FFFFFFFFC0000392 : 6EF6                		mov	@r15+,r14
(2)  577/FFFFFFFFC0000394 : 6DF6                		mov	@r15+,r13
(2)  578/FFFFFFFFC0000396 : 6CF6                		mov	@r15+,r12
(2)  579/FFFFFFFFC0000398 : 6BF6                		mov	@r15+,r11
(2)  580/FFFFFFFFC000039A : 6AF6                		mov	@r15+,r10
(2)  581/FFFFFFFFC000039C : 69F6                		mov	@r15+,r9
(2)  582/FFFFFFFFC000039E : 68F6                		mov	@r15+,r8
(2)  583/FFFFFFFFC00003A0 : 67F6                		mov	@r15+,r7
(2)  584/FFFFFFFFC00003A2 : 66F6                		mov	@r15+,r6
(2)  585/FFFFFFFFC00003A4 : 65F6                		mov	@r15+,r5
(2)  586/FFFFFFFFC00003A6 : 64F6                		mov	@r15+,r4
(2)  587/FFFFFFFFC00003A8 : 63F6                		mov	@r15+,r3
(2)  588/FFFFFFFFC00003AA :                     drwtask_exit:
(2)  589/FFFFFFFFC00003AA : 9117                		mov.l   #$FFFFFE80,r1
(2)  590/FFFFFFFFC00003AC : 9017                		mov.w   #$A518,r0	; OFF
(2)  591/FFFFFFFFC00003AE : 2101                		mov.w   r0,@r1
(2)  592/FFFFFFFFC00003B0 : CB20                		or      #$20,r0		; ON
(2)  593/FFFFFFFFC00003B2 : 2101                		mov.w   r0,@r1
(2)  594/FFFFFFFFC00003B4 : 9014                		mov.w   #$5A00,r0	; r2 - Timer
(2)  595/FFFFFFFFC00003B6 : 202B                		or	r2,r0
(2)  596/FFFFFFFFC00003B8 : 2101                		mov.w   r0,@r1
(2)  597/FFFFFFFFC00003BA : 62F6                		mov	@r15+,r2
(2)  598/FFFFFFFFC00003BC : 000B                		rts
(2)  599/FFFFFFFFC00003BE : 0009                		nop
(2)  600/FFFFFFFFC00003C0 :                     		align 4
(2)  601/FFFFFFFFC00003C0 : C000 07B0 2402 0200 		ltorg
                    C000 0784 2000 4100 
                    C000 0770 00FF 3FFF 
                    00E0 013E FE80 A518 
                    5A00                
(2)  602/FFFFFFFFC00003E2 :                     
(2)  603/FFFFFFFFC00003E2 :                     ; ====================================================================
(2)  604/FFFFFFFFC00003E2 :                     ; ----------------------------------------------------------------
(2)  605/FFFFFFFFC00003E2 :                     ; 3D Rendering routines
(2)  606/FFFFFFFFC00003E2 :                     ; ----------------------------------------------------------------
(2)  607/FFFFFFFFC00003E2 :                     
(2)  608/FFFFFFFFC00003E2 :                     ; ------------------------------------------------
(2)  609/FFFFFFFFC00003E2 :                     ; MarsVideo_SlicePlgn
(2)  610/FFFFFFFFC00003E2 :                     ;
(2)  611/FFFFFFFFC00003E2 :                     ; This slices polygons into pieces.
(2)  612/FFFFFFFFC00003E2 :                     ;
(2)  613/FFFFFFFFC00003E2 :                     ; Input:
(2)  614/FFFFFFFFC00003E2 :                     ; r14 | Polygon data
(2)  615/FFFFFFFFC00003E2 :                     ; ------------------------------------------------
(2)  616/FFFFFFFFC00003E2 :                     
(2)  617/FFFFFFFFC00003E2 :                     		align 4
(2)  618/FFFFFFFFC00003E4 :                     MarsVideo_SlicePlgn:
(2)  619/FFFFFFFFC00003E4 : 4F22                		sts	pr,@-r15
(2)  620/FFFFFFFFC00003E6 : DD3A                		mov	#Cach_DDA_Last,r13		; r13 - DDA last point
(2)  621/FFFFFFFFC00003E8 : DC3A                		mov	#Cach_DDA_Top,r12		; r12 - DDA first point
(2)  622/FFFFFFFFC00003EA : 50E0                		mov	@(polygn_type,r14),r0		; Read type settings
(2)  623/FFFFFFFFC00003EC : 4029                		shlr16	r0
(2)  624/FFFFFFFFC00003EE : 4019                		shlr8	r0
(2)  625/FFFFFFFFC00003F0 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)  626/FFFFFFFFC00003F2 : 8B00                		bf	.tringl
(2)  627/FFFFFFFFC00003F4 : 7D08                		add	#8,r13				; If quad: add 8
(2)  628/FFFFFFFFC00003F6 :                     .tringl:
(2)  629/FFFFFFFFC00003F6 : 61E3                		mov	r14,r1
(2)  630/FFFFFFFFC00003F8 : 62C3                		mov	r12,r2
(2)  631/FFFFFFFFC00003FA : D337                		mov	#Cach_DDA_Src,r3
(2)  632/FFFFFFFFC00003FC : 7108                		add	#polygn_points,r1
(2)  633/FFFFFFFFC00003FE :                     
(2)  634/FFFFFFFFC00003FE :                     	; ----------------------------------------
(2)  635/FFFFFFFFC00003FE :                     	; Polygon points
(2)  636/FFFFFFFFC00003FE :                     	; ----------------------------------------
(2)  637/FFFFFFFFC00003FE :                     
(2)  638/FFFFFFFFC00003FE :                     	; TODO: make these w/h halfs customizable
(2)  639/FFFFFFFFC00003FE : E804                		mov	#4,r8			; Copy polygon points Cache's DDA
(2)  640/FFFFFFFFC0000400 : 9672                		mov	#SCREEN_WIDTH/2,r6
(2)  641/FFFFFFFFC0000402 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)  642/FFFFFFFFC0000404 :                     .setpnts:
(2)  643/FFFFFFFFC0000404 : 6416                		mov	@r1+,r4			; Get X
(2)  644/FFFFFFFFC0000406 : 6516                		mov	@r1+,r5			; Get Y
(2)  645/FFFFFFFFC0000408 : 346C                		add	r6,r4			; X + width
(2)  646/FFFFFFFFC000040A : 357C                		add	r7,r5			; Y + height
(2)  647/FFFFFFFFC000040C : 2242                		mov	r4,@r2
(2)  648/FFFFFFFFC000040E : 1251                		mov	r5,@(4,r2)
(2)  649/FFFFFFFFC0000410 : 4810                		dt	r8
(2)  650/FFFFFFFFC0000412 : 8FF7                		bf/s	.setpnts
(2)  651/FFFFFFFFC0000414 : 7208                		add	#8,r2
(2)  652/FFFFFFFFC0000416 : E804                		mov	#4,r8			; Copy texture source points to Cache
(2)  653/FFFFFFFFC0000418 :                     .src_pnts:
(2)  654/FFFFFFFFC0000418 : 6415                		mov.w	@r1+,r4
(2)  655/FFFFFFFFC000041A : 6515                		mov.w	@r1+,r5
(2)  656/FFFFFFFFC000041C : 2342                		mov	r4,@r3
(2)  657/FFFFFFFFC000041E : 1351                		mov	r5,@(4,r3)
(2)  658/FFFFFFFFC0000420 : 4810                		dt	r8
(2)  659/FFFFFFFFC0000422 : 8FF9                		bf/s	.src_pnts
(2)  660/FFFFFFFFC0000424 : 7308                		add	#8,r3
(2)  661/FFFFFFFFC0000426 :                     
(2)  662/FFFFFFFFC0000426 :                     	; Search for the lowest Y and highest Y
(2)  663/FFFFFFFFC0000426 :                     	; r10 - Top Y
(2)  664/FFFFFFFFC0000426 :                     	; r11 - Bottom Y
(2)  665/FFFFFFFFC0000426 :                     .start_math:
(2)  666/FFFFFFFFC0000426 : E903                		mov	#3,r9
(2)  667/FFFFFFFFC0000428 : C840                		tst	#PLGN_TRI,r0		; PLGN_TRI set?
(2)  668/FFFFFFFFC000042A : 8B00                		bf	.ytringl
(2)  669/FFFFFFFFC000042C : 7901                		add	#1,r9
(2)  670/FFFFFFFFC000042E :                     .ytringl:
(2)  671/FFFFFFFFC000042E : DA2B                		mov	#$7FFFFFFF,r10
(2)  672/FFFFFFFFC0000430 : EBFF                		mov	#-1,r11			; $FFFFFFFF
(2)  673/FFFFFFFFC0000432 : 67C3                		mov 	r12,r7
(2)  674/FFFFFFFFC0000434 : 68C3                		mov	r12,r8
(2)  675/FFFFFFFFC0000436 :                     .find_top:
(2)  676/FFFFFFFFC0000436 : 5071                		mov	@(4,r7),r0
(2)  677/FFFFFFFFC0000438 : 30B7                		cmp/gt	r11,r0
(2)  678/FFFFFFFFC000043A : 8B00                		bf	.is_low
(2)  679/FFFFFFFFC000043C : 6B03                		mov 	r0,r11
(2)  680/FFFFFFFFC000043E :                     .is_low:
(2)  681/FFFFFFFFC000043E : 5081                		mov	@(4,r8),r0
(2)  682/FFFFFFFFC0000440 : 30A7                		cmp/gt	r10,r0
(2)  683/FFFFFFFFC0000442 : 8901                		bt	.is_high
(2)  684/FFFFFFFFC0000444 : 6A03                		mov 	r0,r10
(2)  685/FFFFFFFFC0000446 : 6183                		mov	r8,r1
(2)  686/FFFFFFFFC0000448 :                     .is_high:
(2)  687/FFFFFFFFC0000448 : 7708                		add 	#8,r7
(2)  688/FFFFFFFFC000044A : 4910                		dt	r9
(2)  689/FFFFFFFFC000044C : 8FF3                		bf/s	.find_top
(2)  690/FFFFFFFFC000044E : 7808                		add	#8,r8
(2)  691/FFFFFFFFC0000450 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2)  692/FFFFFFFFC0000452 : 8939                		bt	.exit
(2)  693/FFFFFFFFC0000454 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  694/FFFFFFFFC0000456 : 8B37                		bf	.exit
(2)  695/FFFFFFFFC0000458 : 9047                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  696/FFFFFFFFC000045A : 3A03                		cmp/ge	r0,r10
(2)  697/FFFFFFFFC000045C : 8934                		bt	.exit
(2)  698/FFFFFFFFC000045E :                     
(2)  699/FFFFFFFFC000045E :                     	; r2 - Left DDA READ pointer
(2)  700/FFFFFFFFC000045E :                     	; r3 - Right DDA READ pointer
(2)  701/FFFFFFFFC000045E :                     	; r4 - Left X
(2)  702/FFFFFFFFC000045E :                     	; r5 - Left DX
(2)  703/FFFFFFFFC000045E :                     	; r6 - Right X
(2)  704/FFFFFFFFC000045E :                     	; r7 - Right DX
(2)  705/FFFFFFFFC000045E :                     	; r8 - Left width
(2)  706/FFFFFFFFC000045E :                     	; r9 - Right width
(2)  707/FFFFFFFFC000045E :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  708/FFFFFFFFC000045E :                     	; r11 - Bottom Y
(2)  709/FFFFFFFFC000045E :                     	; r12 - First DST point
(2)  710/FFFFFFFFC000045E :                     	; r13 - Last DST point
(2)  711/FFFFFFFFC000045E : 6213                		mov	r1,r2				; r2 - X left to process
(2)  712/FFFFFFFFC0000460 : 6313                		mov	r1,r3				; r3 - X right to process
(2)  713/FFFFFFFFC0000462 : B043                		bsr	set_left
(2)  714/FFFFFFFFC0000464 : 0009                		nop
(2)  715/FFFFFFFFC0000466 : B085                		bsr	set_right
(2)  716/FFFFFFFFC0000468 : 0009                		nop
(2)  717/FFFFFFFFC000046A :                     .next_pz:
(2)  718/FFFFFFFFC000046A : 903E                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  719/FFFFFFFFC000046C : 3A07                		cmp/gt	r0,r10
(2)  720/FFFFFFFFC000046E : 892B                		bt	.exit
(2)  721/FFFFFFFFC0000470 : 3AB3                		cmp/ge	r11,r10				; Y top => Y bottom?
(2)  722/FFFFFFFFC0000472 : 8929                		bt	.exit
(2)  723/FFFFFFFFC0000474 :                     
(2)  724/FFFFFFFFC0000474 : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  725/FFFFFFFFC0000476 : 6103                		mov	r0,r1
(2)  726/FFFFFFFFC0000478 : 5821                		mov	@(4,r2),r8
(2)  727/FFFFFFFFC000047A : 5931                		mov	@(4,r3),r9
(2)  728/FFFFFFFFC000047C : 38A8                		sub	r10,r8
(2)  729/FFFFFFFFC000047E : 39A8                		sub	r10,r9
(2)  730/FFFFFFFFC0000480 : 6083                		mov	r8,r0
(2)  731/FFFFFFFFC0000482 : 3987                		cmp/gt	r8,r9
(2)  732/FFFFFFFFC0000484 : 8900                		bt	.lefth
(2)  733/FFFFFFFFC0000486 : 6093                		mov	r9,r0
(2)  734/FFFFFFFFC0000488 :                     .lefth:
(2)  735/FFFFFFFFC0000488 : D015                		mov	#Cach_Bkup_SPZ,r0
(2)  736/FFFFFFFFC000048A : 2026                		mov	r2,@-r0
(2)  737/FFFFFFFFC000048C : 2036                		mov	r3,@-r0
(2)  738/FFFFFFFFC000048E : 2056                		mov	r5,@-r0
(2)  739/FFFFFFFFC0000490 : 2076                		mov	r7,@-r0
(2)  740/FFFFFFFFC0000492 : 2086                		mov	r8,@-r0
(2)  741/FFFFFFFFC0000494 : 2096                		mov	r9,@-r0
(2)  742/FFFFFFFFC0000496 : 20B6                		mov	r11,@-r0
(2)  743/FFFFFFFFC0000498 : E001                		mov	#1,r0
(2)  744/FFFFFFFFC000049A : C112                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Tell watchdog we are mid-write
(2)  745/FFFFFFFFC000049C : B0AE                		bsr	put_piece
(2)  746/FFFFFFFFC000049E : 0009                		nop
(2)  747/FFFFFFFFC00004A0 : E000                		mov	#0,r0
(2)  748/FFFFFFFFC00004A2 : C112                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Unlock.
(2)  749/FFFFFFFFC00004A4 : D00F                		mov	#Cach_Bkup_LPZ,r0
(2)  750/FFFFFFFFC00004A6 : 6B06                		mov	@r0+,r11
(2)  751/FFFFFFFFC00004A8 : 6906                		mov	@r0+,r9
(2)  752/FFFFFFFFC00004AA : 6806                		mov	@r0+,r8
(2)  753/FFFFFFFFC00004AC : 6706                		mov	@r0+,r7
(2)  754/FFFFFFFFC00004AE : 6506                		mov	@r0+,r5
(2)  755/FFFFFFFFC00004B0 : 6306                		mov	@r0+,r3
(2)  756/FFFFFFFFC00004B2 : 6206                		mov	@r0+,r2
(2)  757/FFFFFFFFC00004B4 :                     	; X direction update
(2)  758/FFFFFFFFC00004B4 : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  759/FFFFFFFFC00004B6 : 8B03                		bf	.lefth2
(2)  760/FFFFFFFFC00004B8 : B05C                		bsr	set_right
(2)  761/FFFFFFFFC00004BA : 0009                		nop
(2)  762/FFFFFFFFC00004BC : AFD5                		bra	.next_pz
(2)  763/FFFFFFFFC00004BE : 0009                		nop
(2)  764/FFFFFFFFC00004C0 :                     .lefth2:
(2)  765/FFFFFFFFC00004C0 : B014                		bsr	set_left
(2)  766/FFFFFFFFC00004C2 : 0009                		nop
(2)  767/FFFFFFFFC00004C4 : AFD1                		bra	.next_pz
(2)  768/FFFFFFFFC00004C6 : 0009                		nop
(2)  769/FFFFFFFFC00004C8 :                     .exit:
(2)  770/FFFFFFFFC00004C8 : 4F26                		lds	@r15+,pr
(2)  771/FFFFFFFFC00004CA : 000B                		rts
(2)  772/FFFFFFFFC00004CC : 0009                		nop
(2)  773/FFFFFFFFC00004CE :                     		align 4
(2)  774/FFFFFFFFC00004D0 : C000 06E8 C000 06D8 		ltorg
                    C000 06F8 7FFF FFFF 
                    C000 07CC C000 07B0 
                    00A0 00E0           
(2)  775/FFFFFFFFC00004EC :                     
(2)  776/FFFFFFFFC00004EC :                     		align 4
(2)  777/FFFFFFFFC00004EC :                     set_left:
(2)  778/FFFFFFFFC00004EC : 6823                		mov	r2,r8				; Get a copy of Xleft pointer
(2)  779/FFFFFFFFC00004EE : 7820                		add	#$20,r8				; To read Texture SRC points
(2)  780/FFFFFFFFC00004F0 : 6482                		mov	@r8,r4
(2)  781/FFFFFFFFC00004F2 : 5581                		mov	@(4,r8),r5
(2)  782/FFFFFFFFC00004F4 : D86E                		mov	#Cach_DDA_Src_L,r8
(2)  783/FFFFFFFFC00004F6 : 6043                		mov	r4,r0
(2)  784/FFFFFFFFC00004F8 : 4028                		shll16	r0
(2)  785/FFFFFFFFC00004FA : 2802                		mov	r0,@r8
(2)  786/FFFFFFFFC00004FC : 6053                		mov	r5,r0
(2)  787/FFFFFFFFC00004FE : 4028                		shll16	r0
(2)  788/FFFFFFFFC0000500 : 1802                		mov	r0,@(8,r8)
(2)  789/FFFFFFFFC0000502 : 6122                		mov	@r2,r1
(2)  790/FFFFFFFFC0000504 : 5821                		mov	@(4,r2),r8
(2)  791/FFFFFFFFC0000506 : 7208                		add	#8,r2
(2)  792/FFFFFFFFC0000508 : 32D7                		cmp/gt	r13,r2
(2)  793/FFFFFFFFC000050A : 8B00                		bf	.lft_ok
(2)  794/FFFFFFFFC000050C : 62C3                		mov 	r12,r2
(2)  795/FFFFFFFFC000050E :                     .lft_ok:
(2)  796/FFFFFFFFC000050E : 5021                		mov	@(4,r2),r0
(2)  797/FFFFFFFFC0000510 : 3088                		sub	r8,r0
(2)  798/FFFFFFFFC0000512 : 8800                		cmp/eq	#0,r0
(2)  799/FFFFFFFFC0000514 : 89EA                		bt	set_left
(2)  800/FFFFFFFFC0000516 : 4011                		cmp/pz	r0
(2)  801/FFFFFFFFC0000518 : 8B29                		bf	.lft_skip
(2)  802/FFFFFFFFC000051A :                     
(2)  803/FFFFFFFFC000051A : 400A                		lds	r0,mach
(2)  804/FFFFFFFFC000051C : 6823                		mov	r2,r8
(2)  805/FFFFFFFFC000051E : 7820                		add	#$20,r8
(2)  806/FFFFFFFFC0000520 : 6082                		mov 	@r8,r0
(2)  807/FFFFFFFFC0000522 : 3048                		sub 	r4,r0
(2)  808/FFFFFFFFC0000524 : 5481                		mov 	@(4,r8),r4
(2)  809/FFFFFFFFC0000526 : 3458                		sub 	r5,r4
(2)  810/FFFFFFFFC0000528 : 6503                		mov	r0,r5
(2)  811/FFFFFFFFC000052A : 4418                		shll8	r4
(2)  812/FFFFFFFFC000052C : 4518                		shll8	r5
(2)  813/FFFFFFFFC000052E :                     
(2)  814/FFFFFFFFC000052E : E001                		mov	#1,r0
(2)  815/FFFFFFFFC0000530 : C11E                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  816/FFFFFFFFC0000532 : 080A                		sts	mach,r8
(2)  817/FFFFFFFFC0000534 : 90CC                		mov	#_JR,r0
(2)  818/FFFFFFFFC0000536 : 2082                		mov	r8,@r0
(2)  819/FFFFFFFFC0000538 : 1051                		mov	r5,@(4,r0)
(2)  820/FFFFFFFFC000053A : 0009                		nop
(2)  821/FFFFFFFFC000053C : 5501                		mov	@(4,r0),r5
(2)  822/FFFFFFFFC000053E : 90C7                		mov	#_JR,r0
(2)  823/FFFFFFFFC0000540 : 2082                		mov	r8,@r0
(2)  824/FFFFFFFFC0000542 : 1041                		mov	r4,@(4,r0)
(2)  825/FFFFFFFFC0000544 : 0009                		nop
(2)  826/FFFFFFFFC0000546 : 5401                		mov	@(4,r0),r4
(2)  827/FFFFFFFFC0000548 : 4418                		shll8	r4
(2)  828/FFFFFFFFC000054A : 4518                		shll8	r5
(2)  829/FFFFFFFFC000054C : D059                		mov	#Cach_DDA_Src_L+$C,r0
(2)  830/FFFFFFFFC000054E : 2042                		mov	r4,@r0
(2)  831/FFFFFFFFC0000550 : D059                		mov	#Cach_DDA_Src_L+4,r0
(2)  832/FFFFFFFFC0000552 : 2052                		mov	r5,@r0
(2)  833/FFFFFFFFC0000554 : 6522                		mov	@r2,r5
(2)  834/FFFFFFFFC0000556 : 3518                		sub 	r1,r5
(2)  835/FFFFFFFFC0000558 : 6413                		mov 	r1,r4
(2)  836/FFFFFFFFC000055A : 4518                		shll8	r5
(2)  837/FFFFFFFFC000055C : 4428                		shll16	r4
(2)  838/FFFFFFFFC000055E : 90B7                		mov	#_JR,r0
(2)  839/FFFFFFFFC0000560 : 2082                		mov	r8,@r0
(2)  840/FFFFFFFFC0000562 : 1051                		mov	r5,@(4,r0)
(2)  841/FFFFFFFFC0000564 : 0009                		nop
(2)  842/FFFFFFFFC0000566 : 5501                		mov	@(4,r0),r5
(2)  843/FFFFFFFFC0000568 : 4518                		shll8	r5
(2)  844/FFFFFFFFC000056A : E000                		mov	#0,r0
(2)  845/FFFFFFFFC000056C : C11E                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  846/FFFFFFFFC000056E :                     .lft_skip:
(2)  847/FFFFFFFFC000056E : 000B                		rts
(2)  848/FFFFFFFFC0000570 : 0009                		nop
(2)  849/FFFFFFFFC0000572 :                     		align 4
(2)  850/FFFFFFFFC0000574 :                     
(2)  851/FFFFFFFFC0000574 :                     ; --------------------------------------------------------
(2)  852/FFFFFFFFC0000574 :                     
(2)  853/FFFFFFFFC0000574 :                     set_right:
(2)  854/FFFFFFFFC0000574 : 6933                		mov	r3,r9
(2)  855/FFFFFFFFC0000576 : 7920                		add	#$20,r9
(2)  856/FFFFFFFFC0000578 : 6692                		mov	@r9,r6
(2)  857/FFFFFFFFC000057A : 5791                		mov	@(4,r9),r7
(2)  858/FFFFFFFFC000057C : D94F                		mov	#Cach_DDA_Src_R,r9
(2)  859/FFFFFFFFC000057E : 6063                		mov	r6,r0
(2)  860/FFFFFFFFC0000580 : 4028                		shll16	r0
(2)  861/FFFFFFFFC0000582 : 2902                		mov	r0,@r9
(2)  862/FFFFFFFFC0000584 : 6073                		mov	r7,r0
(2)  863/FFFFFFFFC0000586 : 4028                		shll16	r0
(2)  864/FFFFFFFFC0000588 : 1902                		mov	r0,@(8,r9)
(2)  865/FFFFFFFFC000058A :                     
(2)  866/FFFFFFFFC000058A : 6132                		mov	@r3,r1
(2)  867/FFFFFFFFC000058C : 5931                		mov	@(4,r3),r9
(2)  868/FFFFFFFFC000058E : 73F8                		add	#-8,r3
(2)  869/FFFFFFFFC0000590 : 33C3                		cmp/ge	r12,r3
(2)  870/FFFFFFFFC0000592 : 8900                		bt	.rgt_ok
(2)  871/FFFFFFFFC0000594 : 63D3                		mov 	r13,r3
(2)  872/FFFFFFFFC0000596 :                     .rgt_ok:
(2)  873/FFFFFFFFC0000596 : 5031                		mov	@(4,r3),r0
(2)  874/FFFFFFFFC0000598 : 3098                		sub	r9,r0
(2)  875/FFFFFFFFC000059A : 8800                		cmp/eq	#0,r0
(2)  876/FFFFFFFFC000059C : 89EA                		bt	set_right
(2)  877/FFFFFFFFC000059E : 4011                		cmp/pz	r0
(2)  878/FFFFFFFFC00005A0 : 8B29                		bf	.rgt_skip
(2)  879/FFFFFFFFC00005A2 : 400A                		lds	r0,mach
(2)  880/FFFFFFFFC00005A4 : 6933                		mov	r3,r9
(2)  881/FFFFFFFFC00005A6 : 7920                		add	#$20,r9
(2)  882/FFFFFFFFC00005A8 : 6092                		mov 	@r9,r0
(2)  883/FFFFFFFFC00005AA : 3068                		sub 	r6,r0
(2)  884/FFFFFFFFC00005AC : 5691                		mov 	@(4,r9),r6
(2)  885/FFFFFFFFC00005AE : 3678                		sub 	r7,r6
(2)  886/FFFFFFFFC00005B0 : 6703                		mov	r0,r7
(2)  887/FFFFFFFFC00005B2 : 4618                		shll8	r6
(2)  888/FFFFFFFFC00005B4 : 4718                		shll8	r7
(2)  889/FFFFFFFFC00005B6 :                     
(2)  890/FFFFFFFFC00005B6 : E001                		mov	#1,r0
(2)  891/FFFFFFFFC00005B8 : C11E                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  892/FFFFFFFFC00005BA : 090A                		sts	mach,r9
(2)  893/FFFFFFFFC00005BC : 9088                		mov	#_JR,r0
(2)  894/FFFFFFFFC00005BE : 2092                		mov	r9,@r0
(2)  895/FFFFFFFFC00005C0 : 1071                		mov	r7,@(4,r0)
(2)  896/FFFFFFFFC00005C2 : 0009                		nop
(2)  897/FFFFFFFFC00005C4 : 5701                		mov	@(4,r0),r7
(2)  898/FFFFFFFFC00005C6 : 9083                		mov	#_JR,r0
(2)  899/FFFFFFFFC00005C8 : 2092                		mov	r9,@r0
(2)  900/FFFFFFFFC00005CA : 1061                		mov	r6,@(4,r0)
(2)  901/FFFFFFFFC00005CC : 0009                		nop
(2)  902/FFFFFFFFC00005CE : 5601                		mov	@(4,r0),r6
(2)  903/FFFFFFFFC00005D0 : 4618                		shll8	r6
(2)  904/FFFFFFFFC00005D2 : 4718                		shll8	r7
(2)  905/FFFFFFFFC00005D4 : D03A                		mov	#Cach_DDA_Src_R+4,r0
(2)  906/FFFFFFFFC00005D6 : 2072                		mov	r7,@r0
(2)  907/FFFFFFFFC00005D8 : D03A                		mov	#Cach_DDA_Src_R+$C,r0
(2)  908/FFFFFFFFC00005DA : 2062                		mov	r6,@r0
(2)  909/FFFFFFFFC00005DC : 6732                		mov	@r3,r7
(2)  910/FFFFFFFFC00005DE : 3718                		sub 	r1,r7
(2)  911/FFFFFFFFC00005E0 : 6613                		mov 	r1,r6
(2)  912/FFFFFFFFC00005E2 : 4628                		shll16	r6
(2)  913/FFFFFFFFC00005E4 : 4718                		shll8	r7
(2)  914/FFFFFFFFC00005E6 : 9073                		mov	#_JR,r0
(2)  915/FFFFFFFFC00005E8 : 2092                		mov	r9,@r0
(2)  916/FFFFFFFFC00005EA : 1071                		mov	r7,@(4,r0)
(2)  917/FFFFFFFFC00005EC : 0009                		nop
(2)  918/FFFFFFFFC00005EE : 5701                		mov	@(4,r0),r7
(2)  919/FFFFFFFFC00005F0 : 4718                		shll8	r7
(2)  920/FFFFFFFFC00005F2 : E000                		mov	#0,r0
(2)  921/FFFFFFFFC00005F4 : C11E                		mov.w	r0,@(marsGbl_DivStop_M,gbr)
(2)  922/FFFFFFFFC00005F6 :                     .rgt_skip:
(2)  923/FFFFFFFFC00005F6 : 000B                		rts
(2)  924/FFFFFFFFC00005F8 : 0009                		nop
(2)  925/FFFFFFFFC00005FA :                     		align 4
(2)  926/FFFFFFFFC00005FC :                     
(2)  927/FFFFFFFFC00005FC :                     ; --------------------------------------------------------
(2)  928/FFFFFFFFC00005FC :                     
(2)  929/FFFFFFFFC00005FC :                     	; r2
(2)  930/FFFFFFFFC00005FC :                     	; r3
(2)  931/FFFFFFFFC00005FC :                     	; r4 - Left X
(2)  932/FFFFFFFFC00005FC :                     	; r5
(2)  933/FFFFFFFFC00005FC :                     	; r6 - Right X
(2)  934/FFFFFFFFC00005FC :                     	; r7
(2)  935/FFFFFFFFC00005FC :                     	; r8
(2)  936/FFFFFFFFC00005FC :                     	; r9
(2)  937/FFFFFFFFC00005FC :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  938/FFFFFFFFC00005FC :                     
(2)  939/FFFFFFFFC00005FC :                     put_piece:
(2)  940/FFFFFFFFC00005FC : 5821                		mov	@(4,r2),r8	; Left DDA's Y
(2)  941/FFFFFFFFC00005FE : 5931                		mov	@(4,r3),r9	; Right DDA's Y
(2)  942/FFFFFFFFC0000600 : 38A8                		sub	r10,r8
(2)  943/FFFFFFFFC0000602 : 39A8                		sub	r10,r9
(2)  944/FFFFFFFFC0000604 : 3897                		cmp/gt	r9,r8
(2)  945/FFFFFFFFC0000606 : 8900                		bt	.lefth
(2)  946/FFFFFFFFC0000608 : 6983                		mov	r8,r9
(2)  947/FFFFFFFFC000060A :                     .lefth:
(2)  948/FFFFFFFFC000060A : 6843                		mov	r4,r8
(2)  949/FFFFFFFFC000060C : 6063                		mov	r6,r0
(2)  950/FFFFFFFFC000060E : 4829                		shlr16	r8
(2)  951/FFFFFFFFC0000610 : 208D                		xtrct	r8,r0
(2)  952/FFFFFFFFC0000612 : 1103                		mov	r0,@(plypz_xl,r1)
(2)  953/FFFFFFFFC0000614 : 1156                		mov 	r5,@(plypz_xl_dx,r1)
(2)  954/FFFFFFFFC0000616 : 359D                		dmuls	r9,r5
(2)  955/FFFFFFFFC0000618 : 1177                		mov 	r7,@(plypz_xr_dx,r1)
(2)  956/FFFFFFFFC000061A : 021A                		sts	macl,r2
(2)  957/FFFFFFFFC000061C : 379D                		dmuls	r9,r7
(2)  958/FFFFFFFFC000061E : 031A                		sts	macl,r3
(2)  959/FFFFFFFFC0000620 : 342C                		add 	r2,r4
(2)  960/FFFFFFFFC0000622 : 363C                		add	r3,r6
(2)  961/FFFFFFFFC0000624 : 62A3                		mov	r10,r2
(2)  962/FFFFFFFFC0000626 : 3A9C                		add	r9,r10
(2)  963/FFFFFFFFC0000628 : 6BA3                		mov	r10,r11
(2)  964/FFFFFFFFC000062A : 4228                		shll16	r2
(2)  965/FFFFFFFFC000062C : 2B2B                		or	r2,r11
(2)  966/FFFFFFFFC000062E : 11B2                		mov	r11,@(plypz_ytb,r1)
(2)  967/FFFFFFFFC0000630 :                     
(2)  968/FFFFFFFFC0000630 :                     	; r9 - Y multiply
(2)  969/FFFFFFFFC0000630 :                     	;
(2)  970/FFFFFFFFC0000630 :                     	; free:
(2)  971/FFFFFFFFC0000630 :                     	; r2,r3,r5,r7,r8,r11
(2)  972/FFFFFFFFC0000630 : D825                		mov	#Cach_DDA_Src_L,r8
(2)  973/FFFFFFFFC0000632 : D726                		mov	#Cach_DDA_Src_R,r7
(2)  974/FFFFFFFFC0000634 : 6282                		mov	@r8,r2
(2)  975/FFFFFFFFC0000636 : 6372                		mov	@r7,r3
(2)  976/FFFFFFFFC0000638 : 6523                		mov	r2,r5
(2)  977/FFFFFFFFC000063A : 6033                		mov	r3,r0
(2)  978/FFFFFFFFC000063C : 4529                		shlr16	r5
(2)  979/FFFFFFFFC000063E : 205D                		xtrct	r5,r0
(2)  980/FFFFFFFFC0000640 : 1104                		mov	r0,@(plypz_src_xl,r1)
(2)  981/FFFFFFFFC0000642 :                     ; 		mov	r2,@(plypz_src_xl,r1)
(2)  982/FFFFFFFFC0000642 :                     ; 		mov	r3,@(plypz_src_xr,r1)
(2)  983/FFFFFFFFC0000642 :                     
(2)  984/FFFFFFFFC0000642 : 5081                		mov	@(4,r8),r0
(2)  985/FFFFFFFFC0000644 : 5571                		mov	@(4,r7),r5
(2)  986/FFFFFFFFC0000646 : 1108                		mov	r0,@(plypz_src_xl_dx,r1)
(2)  987/FFFFFFFFC0000648 : 1159                		mov	r5,@(plypz_src_xr_dx,r1)
(2)  988/FFFFFFFFC000064A : 309D                		dmuls	r9,r0
(2)  989/FFFFFFFFC000064C : 001A                		sts	macl,r0
(2)  990/FFFFFFFFC000064E : 359D                		dmuls	r9,r5
(2)  991/FFFFFFFFC0000650 : 051A                		sts	macl,r5
(2)  992/FFFFFFFFC0000652 : 320C                		add 	r0,r2
(2)  993/FFFFFFFFC0000654 : 335C                		add	r5,r3
(2)  994/FFFFFFFFC0000656 : 2822                		mov	r2,@r8
(2)  995/FFFFFFFFC0000658 : 2732                		mov	r3,@r7
(2)  996/FFFFFFFFC000065A :                     
(2)  997/FFFFFFFFC000065A : 7808                		add	#8,r8	; Go to Y/DY
(2)  998/FFFFFFFFC000065C : 7708                		add	#8,r7
(2)  999/FFFFFFFFC000065E : 6282                		mov	@r8,r2
(2) 1000/FFFFFFFFC0000660 : 6372                		mov	@r7,r3
(2) 1001/FFFFFFFFC0000662 : 6523                		mov	r2,r5
(2) 1002/FFFFFFFFC0000664 : 6033                		mov	r3,r0
(2) 1003/FFFFFFFFC0000666 : 4529                		shlr16	r5
(2) 1004/FFFFFFFFC0000668 : 205D                		xtrct	r5,r0
(2) 1005/FFFFFFFFC000066A : 1105                		mov	r0,@(plypz_src_yl,r1)
(2) 1006/FFFFFFFFC000066C :                     
(2) 1007/FFFFFFFFC000066C :                     ; 		mov	r2,@(plypz_src_yl,r1)
(2) 1008/FFFFFFFFC000066C :                     ; 		mov	r3,@(plypz_src_yr,r1)
(2) 1009/FFFFFFFFC000066C : 5081                		mov	@(4,r8),r0
(2) 1010/FFFFFFFFC000066E : 5571                		mov	@(4,r7),r5
(2) 1011/FFFFFFFFC0000670 : 110A                		mov	r0,@(plypz_src_yl_dx,r1)
(2) 1012/FFFFFFFFC0000672 : 115B                		mov	r5,@(plypz_src_yr_dx,r1)
(2) 1013/FFFFFFFFC0000674 : 309D                		dmuls	r9,r0
(2) 1014/FFFFFFFFC0000676 : 001A                		sts	macl,r0
(2) 1015/FFFFFFFFC0000678 : 359D                		dmuls	r9,r5
(2) 1016/FFFFFFFFC000067A : 051A                		sts	macl,r5
(2) 1017/FFFFFFFFC000067C : 320C                		add 	r0,r2
(2) 1018/FFFFFFFFC000067E : 335C                		add	r5,r3
(2) 1019/FFFFFFFFC0000680 : 2822                		mov	r2,@r8
(2) 1020/FFFFFFFFC0000682 : 2732                		mov	r3,@r7
(2) 1021/FFFFFFFFC0000684 :                     
(2) 1022/FFFFFFFFC0000684 : 4B15                		cmp/pl	r11			; TOP check, 2 steps
(2) 1023/FFFFFFFFC0000686 : 8902                		bt	.top_neg
(2) 1024/FFFFFFFFC0000688 : 4B28                		shll16	r11
(2) 1025/FFFFFFFFC000068A : 4B15                		cmp/pl	r11
(2) 1026/FFFFFFFFC000068C : 8B0E                		bf	.bad_piece
(2) 1027/FFFFFFFFC000068E :                     .top_neg:
(2) 1028/FFFFFFFFC000068E : 50E1                		mov	@(polygn_mtrl,r14),r0
(2) 1029/FFFFFFFFC0000690 : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2) 1030/FFFFFFFFC0000692 : 50E0                		mov	@(polygn_type,r14),r0
(2) 1031/FFFFFFFFC0000694 : 1100                		mov 	r0,@(plypz_type,r1)
(2) 1032/FFFFFFFFC0000696 :                     
(2) 1033/FFFFFFFFC0000696 :                     	; next piece
(2) 1034/FFFFFFFFC0000696 : 7130                		add	#sizeof_plypz,r1
(2) 1035/FFFFFFFFC0000698 : C603                		mov	@(marsGbl_PlyPzList_End,gbr),r0
(2) 1036/FFFFFFFFC000069A : 3103                		cmp/ge	r0,r1
(2) 1037/FFFFFFFFC000069C : 8B01                		bf	.dontres
(2) 1038/FFFFFFFFC000069E : C602                		mov	@(marsGbl_PlyPzList_Start,gbr),r0
(2) 1039/FFFFFFFFC00006A0 : 6103                		mov	r0,r1
(2) 1040/FFFFFFFFC00006A2 :                     .dontres:
(2) 1041/FFFFFFFFC00006A2 : 6013                		mov	r1,r0
(2) 1042/FFFFFFFFC00006A4 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2) 1043/FFFFFFFFC00006A6 :                     
(2) 1044/FFFFFFFFC00006A6 : C514                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2) 1045/FFFFFFFFC00006A8 : 7001                		add	#1,r0
(2) 1046/FFFFFFFFC00006AA : C114                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 1047/FFFFFFFFC00006AC :                     .bad_piece:
(2) 1048/FFFFFFFFC00006AC : 000B                		rts
(2) 1049/FFFFFFFFC00006AE : 0009                		nop
(2) 1050/FFFFFFFFC00006B0 :                     		align 4
(2) 1051/FFFFFFFFC00006B0 : C000 0718 C000 0724 		ltorg
                    C000 071C C000 0728 
                    C000 072C C000 0734 
                    C000 0718 C000 0728 
                    FF00                
(2) 1052/FFFFFFFFC00006D2 :                     		align 4
(2) 1053/FFFFFFFFC00006D4 :                     
(2) 1054/FFFFFFFFC00006D4 :                     ; ------------------------------------------------
(2) 1055/FFFFFFFFC00006D4 :                     
(2) 1056/FFFFFFFFC00006D4 :                     		align 4
(2) 1057/FFFFFFFFC00006D4 :                     Cach_ClrLines	ds.l 1		; Current lines to clear
(2) 1058/FFFFFFFFC00006D8 :                     Cach_DDA_Top	ds.l 2*2	; First 2 points
(2) 1059/FFFFFFFFC00006E8 :                     Cach_DDA_Last	ds.l 2*2	; Triangle or Quad (+8)
(2) 1060/FFFFFFFFC00006F8 :                     Cach_DDA_Src	ds.l 4*2
(2) 1061/FFFFFFFFC0000718 :                     Cach_DDA_Src_L	ds.l 4		; X/DX/Y/DX result for textures
(2) 1062/FFFFFFFFC0000728 :                     Cach_DDA_Src_R	ds.l 4
(2) 1063/FFFFFFFFC0000738 :                     Cach_LnDrw_L	ds.l 14		;
(2) 1064/FFFFFFFFC0000770 :                     Cach_LnDrw_S	ds.l 0		; <-- Reads backwards
(2) 1065/FFFFFFFFC0000770 :                     Cach_Bkup_LT	ds.l 5
(2) 1066/FFFFFFFFC0000784 :                     Cach_Bkup_LB	ds.l 11
(2) 1067/FFFFFFFFC00007B0 :                     Cach_Bkup_S	ds.l 0		; <-- Reads backwards
(2) 1068/FFFFFFFFC00007B0 :                     Cach_Bkup_LPZ	ds.l 7
(2) 1069/FFFFFFFFC00007CC :                     Cach_Bkup_SPZ	ds.l 0		; <-- Reads backwards
(2) 1070/FFFFFFFFC00007CC :                     
(2) 1071/FFFFFFFFC00007CC :                     ; ------------------------------------------------
(2) 1072/ 6001F40 :                     .end:		phase CACHE_MSTR_PLGN+.end&$1FFF
(2) 1073/ 6001F40 :                     		align 4
(2) 1074/ 6001F40 :                     CACHE_MSTR_PLGN_E:
(2) 1078/ 6001F40 :                     
(1) 2323/ 6001F40 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6001F40 :                     ; ====================================================================
(2)    2/ 6001F40 :                     ; ----------------------------------------------------------------
(2)    3/ 6001F40 :                     ; CACHE code for SLAVE CPU
(2)    4/ 6001F40 :                     ;
(2)    5/ 6001F40 :                     ; LIMIT: $800 bytes
(2)    6/ 6001F40 :                     ; ----------------------------------------------------------------
(2)    7/ 6001F40 :                     
(2)    8/ 6001F40 :                     		align 4
(2)    9/ 6001F40 :                     CACHE_SLAVE:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 91B4                		mov	#_FRT,r1
(2)   18/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   19/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   20/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   21/FFFFFFFFC0000008 : 91B1                		mov	#$FFFFFE80,r1	; Stop watchdog
(2)   22/FFFFFFFFC000000A : 90B1                		mov.w   #$A518,r0
(2)   23/FFFFFFFFC000000C : 2101                		mov.w   r0,@r1
(2)   24/FFFFFFFFC000000E : 000B                		rts
(2)   25/FFFFFFFFC0000010 : 0009                		nop
(2)   26/FFFFFFFFC0000012 :                     		align 4
(2)   27/FFFFFFFFC0000014 :                     
(2)   28/FFFFFFFFC0000014 :                     ; ====================================================================
(2)   29/FFFFFFFFC0000014 :                     ; --------------------------------------------------------
(2)   30/FFFFFFFFC0000014 :                     ; PWM Interrupt for playback
(2)   31/FFFFFFFFC0000014 :                     ; --------------------------------------------------------
(2)   32/FFFFFFFFC0000014 :                     
(2)   33/FFFFFFFFC0000014 :                     ; **** MUST BE FAST ***
(2)   34/FFFFFFFFC0000014 :                     
(2)   35/FFFFFFFFC0000014 :                     s_irq_pwm:
(2)   36/FFFFFFFFC0000014 : 91AA                		mov	#_FRT,r1
(2)   37/FFFFFFFFC0000016 : 8417                		mov.b	@(7,r1),r0
(2)   38/FFFFFFFFC0000018 : CA02                		xor	#2,r0
(2)   39/FFFFFFFFC000001A : 8017                		mov.b	r0,@(7,r1)
(2)   40/FFFFFFFFC000001C : D14B                		mov	#_sysreg+pwmintclr,r1
(2)   41/FFFFFFFFC000001E : 2101                		mov.w	r0,@r1
(2)   42/FFFFFFFFC0000020 : 6011                		mov.w	@r1,r0
(2)   43/FFFFFFFFC0000022 :                     
(2)   44/FFFFFFFFC0000022 :                     ; ------------------------------------------------
(2)   45/FFFFFFFFC0000022 :                     
(2)   46/FFFFFFFFC0000022 : 2F26                		mov	r2,@-r15
(2)   47/FFFFFFFFC0000024 : 2F36                		mov	r3,@-r15
(2)   48/FFFFFFFFC0000026 : 2F46                		mov	r4,@-r15
(2)   49/FFFFFFFFC0000028 : 2F56                		mov	r5,@-r15
(2)   50/FFFFFFFFC000002A : 2F66                		mov	r6,@-r15
(2)   51/FFFFFFFFC000002C : 2F76                		mov	r7,@-r15
(2)   52/FFFFFFFFC000002E : 2F86                		mov	r8,@-r15
(2)   53/FFFFFFFFC0000030 : 2F96                		mov	r9,@-r15
(2)   54/FFFFFFFFC0000032 : 2FA6                		mov	r10,@-r15
(2)   55/FFFFFFFFC0000034 : 4F12                		sts	macl,@-r15
(2)   56/FFFFFFFFC0000036 :                     
(2)   57/FFFFFFFFC0000036 : DA46                		mov	#MarsSnd_PwmCache,r10
(2)   58/FFFFFFFFC0000038 : D946                		mov	#MarsSnd_PwmChnls,r9	; r9 - Channel list
(2)   59/FFFFFFFFC000003A : E807                		mov 	#MAX_PWMCHNL,r8		; r8 - Number of channels
(2)   60/FFFFFFFFC000003C : E700                		mov 	#0,r7			; r7 - RIGHT BASE wave
(2)   61/FFFFFFFFC000003E : E600                		mov 	#0,r6			; r6 - LEFT BASE wave
(2)   62/FFFFFFFFC0000040 :                     .loop:
(2)   63/FFFFFFFFC0000040 : 5090                		mov	@(mchnsnd_enbl,r9),r0	; Channel enabled? (non-Zero)
(2)   64/FFFFFFFFC0000042 : 8800                		cmp/eq	#0,r0
(2)   65/FFFFFFFFC0000044 : 8B03                		bf	.on
(2)   66/FFFFFFFFC0000046 :                     .silent:
(2)   67/FFFFFFFFC0000046 : E07F                		mov	#$7F,r0			; Silence...
(2)   68/FFFFFFFFC0000048 : 6203                		mov	r0,r2
(2)   69/FFFFFFFFC000004A : A05F                		bra	.skip
(2)   70/FFFFFFFFC000004C : 6103                		mov	r0,r1
(2)   71/FFFFFFFFC000004E :                     .on:
(2)   72/FFFFFFFFC000004E : 5491                		mov 	@(mchnsnd_read,r9),r4
(2)   73/FFFFFFFFC0000050 : 6343                		mov	r4,r3
(2)   74/FFFFFFFFC0000052 : 5095                		mov 	@(mchnsnd_end,r9),r0
(2)   75/FFFFFFFFC0000054 : D140                		mov	#$00FFFFFF,r1
(2)   76/FFFFFFFFC0000056 : 4319                		shlr8	r3
(2)   77/FFFFFFFFC0000058 : 4019                		shlr8	r0
(2)   78/FFFFFFFFC000005A : 2319                		and	r1,r3
(2)   79/FFFFFFFFC000005C : 2019                		and	r1,r0
(2)   80/FFFFFFFFC000005E : 3302                		cmp/hs	r0,r3
(2)   81/FFFFFFFFC0000060 : 8B0D                		bf	.read
(2)   82/FFFFFFFFC0000062 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)   83/FFFFFFFFC0000064 : C804                		tst	#%00000100,r0
(2)   84/FFFFFFFFC0000066 : 8B03                		bf	.loop_me
(2)   85/FFFFFFFFC0000068 : E000                		mov 	#0,r0
(2)   86/FFFFFFFFC000006A : 1900                		mov 	r0,@(mchnsnd_enbl,r9)
(2)   87/FFFFFFFFC000006C : AFEB                		bra	.silent
(2)   88/FFFFFFFFC000006E : 0009                		nop
(2)   89/FFFFFFFFC0000070 :                     .loop_me:
(2)   90/FFFFFFFFC0000070 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)   91/FFFFFFFFC0000072 : 5196                		mov	@(mchnsnd_loop,r9),r1
(2)   92/FFFFFFFFC0000074 : 5494                		mov 	@(mchnsnd_start,r9),r4
(2)   93/FFFFFFFFC0000076 : C808                		tst	#%00001000,r0
(2)   94/FFFFFFFFC0000078 : 8900                		bt	.mono_l
(2)   95/FFFFFFFFC000007A : 4100                		shll	r1
(2)   96/FFFFFFFFC000007C :                     .mono_l:
(2)   97/FFFFFFFFC000007C : 341C                		add	r1,r4
(2)   98/FFFFFFFFC000007E :                     
(2)   99/FFFFFFFFC000007E :                     ; read wave
(2)  100/FFFFFFFFC000007E :                     ; r4 - WAVE READ pointer
(2)  101/FFFFFFFFC000007E :                     .read:
(2)  102/FFFFFFFFC000007E : 5597                		mov 	@(mchnsnd_pitch,r9),r5	; Check if sample is on ROM
(2)  103/FFFFFFFFC0000080 : 5293                		mov 	@(mchnsnd_bank,r9),r2
(2)  104/FFFFFFFFC0000082 : D036                		mov	#CS1,r0
(2)  105/FFFFFFFFC0000084 : 3200                		cmp/eq	r0,r2
(2)  106/FFFFFFFFC0000086 : 8B11                		bf	.not_rom
(2)  107/FFFFFFFFC0000088 : D135                		mov	#MarsSnd_RvMode,r1
(2)  108/FFFFFFFFC000008A : 6012                		mov	@r1,r0
(2)  109/FFFFFFFFC000008C : 8801                		cmp/eq	#1,r0
(2)  110/FFFFFFFFC000008E : 8B0D                		bf	.not_rom
(2)  111/FFFFFFFFC0000090 :                     
(2)  112/FFFFFFFFC0000090 :                     	; r1 - left WAV
(2)  113/FFFFFFFFC0000090 :                     	; r3 - right WAV
(2)  114/FFFFFFFFC0000090 :                     	; r4 - original READ point
(2)  115/FFFFFFFFC0000090 :                     	; r5 - Pitch
(2)  116/FFFFFFFFC0000090 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  117/FFFFFFFFC0000092 : 6153                		mov	r5,r1
(2)  118/FFFFFFFFC0000094 : C808                		tst	#%00001000,r0
(2)  119/FFFFFFFFC0000096 : 8900                		bt	.mono_c
(2)  120/FFFFFFFFC0000098 : 4100                		shll	r1
(2)  121/FFFFFFFFC000009A :                     .mono_c:
(2)  122/FFFFFFFFC000009A : 5292                		mov	@(mchnsnd_cchread,r9),r2
(2)  123/FFFFFFFFC000009C : 4219                		shlr8	r2
(2)  124/FFFFFFFFC000009E : E17F                		mov	#MAX_PWMBACKUP-1,r1	; backup size limit
(2)  125/FFFFFFFFC00000A0 : 2219                		and	r1,r2
(2)  126/FFFFFFFFC00000A2 : 32AC                		add	r10,r2
(2)  127/FFFFFFFFC00000A4 : 6124                		mov.b	@r2+,r1
(2)  128/FFFFFFFFC00000A6 : 6324                		mov.b	@r2+,r3			; null in MONO samples
(2)  129/FFFFFFFFC00000A8 : A00B                		bra	.from_rv
(2)  130/FFFFFFFFC00000AA : 0009                		nop
(2)  131/FFFFFFFFC00000AC :                     
(2)  132/FFFFFFFFC00000AC :                     ; Play as normal
(2)  133/FFFFFFFFC00000AC :                     ; r0 - flags
(2)  134/FFFFFFFFC00000AC :                     ; r4 - READ pointer
(2)  135/FFFFFFFFC00000AC :                     .not_rom:
(2)  136/FFFFFFFFC00000AC : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  137/FFFFFFFFC00000AE : 6343                		mov 	r4,r3
(2)  138/FFFFFFFFC00000B0 : 4319                		shlr8	r3
(2)  139/FFFFFFFFC00000B2 : D129                		mov	#$00FFFFFF,r1
(2)  140/FFFFFFFFC00000B4 : C808                		tst	#%00001000,r0
(2)  141/FFFFFFFFC00000B6 : 8900                		bt	.mono_a
(2)  142/FFFFFFFFC00000B8 : 71FF                		add	#-1,r1
(2)  143/FFFFFFFFC00000BA :                     .mono_a:
(2)  144/FFFFFFFFC00000BA : 2319                		and	r1,r3
(2)  145/FFFFFFFFC00000BC : 232B                		or	r2,r3
(2)  146/FFFFFFFFC00000BE : 6134                		mov.b	@r3+,r1
(2)  147/FFFFFFFFC00000C0 : 6334                		mov.b	@r3+,r3
(2)  148/FFFFFFFFC00000C2 :                     .from_rv:
(2)  149/FFFFFFFFC00000C2 : 6213                		mov	r1,r2
(2)  150/FFFFFFFFC00000C4 : C808                		tst	#%00001000,r0
(2)  151/FFFFFFFFC00000C6 : 8901                		bt	.mono
(2)  152/FFFFFFFFC00000C8 : 6233                		mov	r3,r2
(2)  153/FFFFFFFFC00000CA : 4500                		shll	r5
(2)  154/FFFFFFFFC00000CC :                     .mono:
(2)  155/FFFFFFFFC00000CC : 345C                		add	r5,r4
(2)  156/FFFFFFFFC00000CE : 1941                		mov	r4,@(mchnsnd_read,r9)
(2)  157/FFFFFFFFC00000D0 : 5392                		mov	@(mchnsnd_cchread,r9),r3
(2)  158/FFFFFFFFC00000D2 : 335C                		add	r5,r3
(2)  159/FFFFFFFFC00000D4 : 1932                		mov	r3,@(mchnsnd_cchread,r9)
(2)  160/FFFFFFFFC00000D6 : 933F                		mov	#$FF,r3
(2)  161/FFFFFFFFC00000D8 : 2139                		and	r3,r1
(2)  162/FFFFFFFFC00000DA : 2239                		and	r3,r2
(2)  163/FFFFFFFFC00000DC : C802                		tst	#%00000010,r0	; LEFT enabled?
(2)  164/FFFFFFFFC00000DE : 8B00                		bf	.no_l
(2)  165/FFFFFFFFC00000E0 : E17F                		mov	#$7F,r1		; Force LEFT off
(2)  166/FFFFFFFFC00000E2 :                     .no_l:
(2)  167/FFFFFFFFC00000E2 : C801                		tst	#%00000001,r0	; RIGHT enabled?
(2)  168/FFFFFFFFC00000E4 : 8B00                		bf	.no_r
(2)  169/FFFFFFFFC00000E6 : E27F                		mov	#$7F,r2		; Force RIGHT off
(2)  170/FFFFFFFFC00000E8 :                     .no_r:
(2)  171/FFFFFFFFC00000E8 :                     
(2)  172/FFFFFFFFC00000E8 :                     	; Clearly rushed...
(2)  173/FFFFFFFFC00000E8 : 5099                		mov	@(mchnsnd_vol,r9),r0
(2)  174/FFFFFFFFC00000EA : 4015                		cmp/pl	r0
(2)  175/FFFFFFFFC00000EC : 8B0E                		bf	.skip
(2)  176/FFFFFFFFC00000EE : 7001                		add	#1,r0
(2)  177/FFFFFFFFC00000F0 : 210E                		mulu	r0,r1
(2)  178/FFFFFFFFC00000F2 : 041A                		sts	macl,r4
(2)  179/FFFFFFFFC00000F4 : 4419                		shlr8	r4
(2)  180/FFFFFFFFC00000F6 : 3148                		sub	r4,r1
(2)  181/FFFFFFFFC00000F8 : 220E                		mulu	r0,r2
(2)  182/FFFFFFFFC00000FA : 041A                		sts	macl,r4
(2)  183/FFFFFFFFC00000FC : 4419                		shlr8	r4
(2)  184/FFFFFFFFC00000FE : 3248                		sub	r4,r2
(2)  185/FFFFFFFFC0000100 : E47F                		mov	#$7F,r4
(2)  186/FFFFFFFFC0000102 : 240E                		mulu	r0,r4
(2)  187/FFFFFFFFC0000104 : 001A                		sts	macl,r0
(2)  188/FFFFFFFFC0000106 : 4019                		shlr8	r0
(2)  189/FFFFFFFFC0000108 : 310C                		add	r0,r1
(2)  190/FFFFFFFFC000010A : 320C                		add	r0,r2
(2)  191/FFFFFFFFC000010C :                     .skip:
(2)  192/FFFFFFFFC000010C : 7101                		add	#1,r1
(2)  193/FFFFFFFFC000010E : 7201                		add	#1,r2
(2)  194/FFFFFFFFC0000110 : 361C                		add	r1,r6
(2)  195/FFFFFFFFC0000112 : 372C                		add	r2,r7
(2)  196/FFFFFFFFC0000114 : 902D                		mov	#MAX_PWMBACKUP,r0
(2)  197/FFFFFFFFC0000116 : 3A0C                		add	r0,r10
(2)  198/FFFFFFFFC0000118 : 4810                		dt	r8
(2)  199/FFFFFFFFC000011A : 8F91                		bf/s	.loop
(2)  200/FFFFFFFFC000011C : 7928                		add	#sizeof_sndchn,r9
(2)  201/FFFFFFFFC000011E : 9029                		mov	#$3FF,r0		; Overflow protection
(2)  202/FFFFFFFFC0000120 : 3607                		cmp/gt	r0,r6
(2)  203/FFFFFFFFC0000122 : 8B00                		bf	.lmuch
(2)  204/FFFFFFFFC0000124 : 6603                		mov	r0,r6
(2)  205/FFFFFFFFC0000126 :                     .lmuch:
(2)  206/FFFFFFFFC0000126 : 3707                		cmp/gt	r0,r7
(2)  207/FFFFFFFFC0000128 : 8B00                		bf	.rmuch
(2)  208/FFFFFFFFC000012A : 6703                		mov	r0,r7
(2)  209/FFFFFFFFC000012C :                     .rmuch:
(2)  210/FFFFFFFFC000012C : D10D                		mov	#_sysreg+lchwidth,r1	; Write WAVE result
(2)  211/FFFFFFFFC000012E : D20E                		mov	#_sysreg+rchwidth,r2
(2)  212/FFFFFFFFC0000130 : 2161                 		mov.w	r6,@r1
(2)  213/FFFFFFFFC0000132 : 2271                 		mov.w	r7,@r2
(2)  214/FFFFFFFFC0000134 :                     
(2)  215/FFFFFFFFC0000134 : 4F16                		lds	@r15+,macl
(2)  216/FFFFFFFFC0000136 : 6AF6                		mov	@r15+,r10
(2)  217/FFFFFFFFC0000138 : 69F6                		mov	@r15+,r9
(2)  218/FFFFFFFFC000013A : 68F6                		mov	@r15+,r8
(2)  219/FFFFFFFFC000013C : 67F6                		mov	@r15+,r7
(2)  220/FFFFFFFFC000013E : 66F6                		mov	@r15+,r6
(2)  221/FFFFFFFFC0000140 : 65F6                		mov	@r15+,r5
(2)  222/FFFFFFFFC0000142 : 64F6                		mov	@r15+,r4
(2)  223/FFFFFFFFC0000144 : 63F6                		mov	@r15+,r3
(2)  224/FFFFFFFFC0000146 : 000B                		rts
(2)  225/FFFFFFFFC0000148 : 62F6                		mov	@r15+,r2
(2)  226/FFFFFFFFC000014A :                     		align 4
(2)  227/FFFFFFFFC000014C : 2000 401C 2600 7C90 		ltorg
                    C000 05D8 00FF FFFF 
                    0200 0000 C000 0728 
                    2000 4034 2000 4036 
                    FE10 FE80 A518 0080 
                    03FF                
(2)  228/FFFFFFFFC0000176 :                     
(2)  229/FFFFFFFFC0000176 :                     ; ====================================================================
(2)  230/FFFFFFFFC0000176 :                     ; ----------------------------------------------------------------
(2)  231/FFFFFFFFC0000176 :                     ; 3D Section
(2)  232/FFFFFFFFC0000176 :                     ; ----------------------------------------------------------------
(2)  233/FFFFFFFFC0000176 :                     
(2)  234/FFFFFFFFC0000176 :                     ; --------------------------------------------------------
(2)  235/FFFFFFFFC0000176 :                     ; MarsMdl_MdlLoop
(2)  236/FFFFFFFFC0000176 :                     ;
(2)  237/FFFFFFFFC0000176 :                     ; Call this to start building the 3D objects
(2)  238/FFFFFFFFC0000176 :                     ; --------------------------------------------------------
(2)  239/FFFFFFFFC0000176 :                     
(2)  240/FFFFFFFFC0000176 :                     		align 4
(2)  241/FFFFFFFFC0000178 :                     MarsMdl_MdlLoop:
(2)  242/FFFFFFFFC0000178 : 4F22                		sts	pr,@-r15
(2)  243/FFFFFFFFC000017A : D115                		mov 	#RAM_Mars_Polygons_0,r1
(2)  244/FFFFFFFFC000017C : D215                		mov	#RAM_Mars_PlgnList_0,r2
(2)  245/FFFFFFFFC000017E : C513                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2)  246/FFFFFFFFC0000180 : C801                		tst     #1,r0
(2)  247/FFFFFFFFC0000182 : 8901                		bt	.go_mdl
(2)  248/FFFFFFFFC0000184 : D114                		mov 	#RAM_Mars_Polygons_1,r1
(2)  249/FFFFFFFFC0000186 : D215                		mov	#RAM_Mars_PlgnList_1,r2
(2)  250/FFFFFFFFC0000188 :                     .go_mdl:
(2)  251/FFFFFFFFC0000188 : 6013                		mov	r1,r0
(2)  252/FFFFFFFFC000018A : C207                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2)  253/FFFFFFFFC000018C : 6023                		mov	r2,r0
(2)  254/FFFFFFFFC000018E : C205                		mov	r0,@(marsGbl_CurrZList,gbr)
(2)  255/FFFFFFFFC0000190 : C206                		mov	r0,@(marsGbl_CurrZTop,gbr)
(2)  256/FFFFFFFFC0000192 : 200A                		xor	r0,r0
(2)  257/FFFFFFFFC0000194 : C110                		mov.w	r0,@(marsGbl_CurrNumFaces,gbr)
(2)  258/FFFFFFFFC0000196 : DE12                		mov	#RAM_Mars_Objects,r14
(2)  259/FFFFFFFFC0000198 : ED0C                		mov	#MAX_MODELS,r13
(2)  260/FFFFFFFFC000019A :                     .loop:
(2)  261/FFFFFFFFC000019A : 50E0                		mov	@(mdl_data,r14),r0		; Object model data == 0 or -1?
(2)  262/FFFFFFFFC000019C : 4015                		cmp/pl	r0
(2)  263/FFFFFFFFC000019E : 8B0A                		bf	.invlid
(2)  264/FFFFFFFFC00001A0 : D010                		mov	#MarsMdl_ReadModel,r0
(2)  265/FFFFFFFFC00001A2 : 400B                		jsr	@r0
(2)  266/FFFFFFFFC00001A4 : 2FD6                		mov	r13,@-r15
(2)  267/FFFFFFFFC00001A6 : 6DF6                		mov	@r15+,r13
(2)  268/FFFFFFFFC00001A8 : C510                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0	; Ran out of space to store faces?
(2)  269/FFFFFFFFC00001AA : 9121                		mov	#MAX_FACES,r1
(2)  270/FFFFFFFFC00001AC : 3013                		cmp/ge	r1,r0
(2)  271/FFFFFFFFC00001AE : 8B02                		bf	.invlid
(2)  272/FFFFFFFFC00001B0 : 6013                		mov	r1,r0
(2)  273/FFFFFFFFC00001B2 : A003                		bra	.skip
(2)  274/FFFFFFFFC00001B4 : C208                		mov	r0,@(marsGbl_CurrNumFaces,gbr)
(2)  275/FFFFFFFFC00001B6 :                     .invlid:
(2)  276/FFFFFFFFC00001B6 : 4D10                		dt	r13
(2)  277/FFFFFFFFC00001B8 : 8FEF                		bf/s	.loop
(2)  278/FFFFFFFFC00001BA : 7E18                		add	#sizeof_mdlobj,r14
(2)  279/FFFFFFFFC00001BC :                     .skip:
(2)  280/FFFFFFFFC00001BC : D10A                		mov 	#RAM_Mars_PlgnNum_0,r1
(2)  281/FFFFFFFFC00001BE : C513                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2)  282/FFFFFFFFC00001C0 : C801                		tst     #1,r0
(2)  283/FFFFFFFFC00001C2 : 8900                		bt	.page_2
(2)  284/FFFFFFFFC00001C4 : D109                		mov 	#RAM_Mars_PlgnNum_1,r1
(2)  285/FFFFFFFFC00001C6 :                     .page_2:
(2)  286/FFFFFFFFC00001C6 : C510                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0
(2)  287/FFFFFFFFC00001C8 : 2102                		mov	r0,@r1
(2)  288/FFFFFFFFC00001CA : 4F26                		lds	@r15+,pr
(2)  289/FFFFFFFFC00001CC : 000B                		rts
(2)  290/FFFFFFFFC00001CE : 0009                		nop
(2)  291/FFFFFFFFC00001D0 :                     		align 4
(2)  292/FFFFFFFFC00001D0 : 2600 FE10 2602 1748 		ltorg
                    2601 8A10 2602 2B48 
                    2602 1610 C000 01F4 
                    2602 3F48 2602 3F4C 
                    0280                
(2)  293/FFFFFFFFC00001F2 :                     
(2)  294/FFFFFFFFC00001F2 :                     ; ------------------------------------------------
(2)  295/FFFFFFFFC00001F2 :                     ; Read model
(2)  296/FFFFFFFFC00001F2 :                     ; ------------------------------------------------
(2)  297/FFFFFFFFC00001F2 :                     
(2)  298/FFFFFFFFC00001F2 :                     		align 4
(2)  299/FFFFFFFFC00001F4 :                     MarsMdl_ReadModel:
(2)  300/FFFFFFFFC00001F4 : 4F22                		sts	pr,@-r15
(2)  301/FFFFFFFFC00001F6 :                     ; 		mov	@(mdl_animdata,r14),r13
(2)  302/FFFFFFFFC00001F6 :                     ; 		cmp/pl	r13
(2)  303/FFFFFFFFC00001F6 :                     ; 		bf	.no_anim
(2)  304/FFFFFFFFC00001F6 :                     ; 		mov	@(mdl_animtimer,r14),r0
(2)  305/FFFFFFFFC00001F6 :                     ; 		add	#-1,r0
(2)  306/FFFFFFFFC00001F6 :                     ; 		cmp/pl 	r0
(2)  307/FFFFFFFFC00001F6 :                     ; 		bt	.wait_camanim
(2)  308/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r2
(2)  309/FFFFFFFFC00001F6 :                     ; 		mov	@(mdl_animframe,r14),r0
(2)  310/FFFFFFFFC00001F6 :                     ; 		add	#1,r0
(2)  311/FFFFFFFFC00001F6 :                     ; 		cmp/eq	r2,r0
(2)  312/FFFFFFFFC00001F6 :                     ; 		bf	.on_frames
(2)  313/FFFFFFFFC00001F6 :                     ; 		xor	r0,r0
(2)  314/FFFFFFFFC00001F6 :                     ; .on_frames:
(2)  315/FFFFFFFFC00001F6 :                     ; 		mov	r0,r1
(2)  316/FFFFFFFFC00001F6 :                     ; 		mov	r0,@(mdl_animframe,r14)
(2)  317/FFFFFFFFC00001F6 :                     ; 		mov	#$18,r0
(2)  318/FFFFFFFFC00001F6 :                     ; 		mulu	r0,r1
(2)  319/FFFFFFFFC00001F6 :                     ; 		sts	macl,r0
(2)  320/FFFFFFFFC00001F6 :                     ; 		add	r0,r13
(2)  321/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r1
(2)  322/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r2
(2)  323/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r3
(2)  324/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r4
(2)  325/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r5
(2)  326/FFFFFFFFC00001F6 :                     ; 		mov	@r13+,r6
(2)  327/FFFFFFFFC00001F6 :                     ; ; 		neg	r4,r4
(2)  328/FFFFFFFFC00001F6 :                     ; 		mov	r1,@(mdl_x_pos,r14)
(2)  329/FFFFFFFFC00001F6 :                     ; 		mov	r2,@(mdl_y_pos,r14)
(2)  330/FFFFFFFFC00001F6 :                     ; 		mov	r3,@(mdl_z_pos,r14)
(2)  331/FFFFFFFFC00001F6 :                     ; 		mov	r4,@(mdl_x_rot,r14)
(2)  332/FFFFFFFFC00001F6 :                     ; 		mov	r5,@(mdl_y_rot,r14)
(2)  333/FFFFFFFFC00001F6 :                     ; 		mov	r6,@(mdl_z_rot,r14)
(2)  334/FFFFFFFFC00001F6 :                     ; 		mov	@(mdl_animspd,r14),r0		; TODO: make a timer setting
(2)  335/FFFFFFFFC00001F6 :                     ; .wait_camanim:
(2)  336/FFFFFFFFC00001F6 :                     ; 		mov	r0,@(mdl_animtimer,r14)
(2)  337/FFFFFFFFC00001F6 :                     ; .no_anim:
(2)  338/FFFFFFFFC00001F6 :                     
(2)  339/FFFFFFFFC00001F6 :                     	; Now start reading
(2)  340/FFFFFFFFC00001F6 : DD95                		mov	#Cach_CurrPlygn,r13		; r13 - temporal face output
(2)  341/FFFFFFFFC00001F8 : 5CE0                		mov	@(mdl_data,r14),r12		; r12 - model header
(2)  342/FFFFFFFFC00001FA : 5BC2                		mov 	@(8,r12),r11			; r11 - face data
(2)  343/FFFFFFFFC00001FC : 5AC1                		mov 	@(4,r12),r10			; r10 - vertice data (X,Y,Z)
(2)  344/FFFFFFFFC00001FE : 69C1                		mov.w	@r12,r9				;  r9 - Number of faces used on model
(2)  345/FFFFFFFFC0000200 : C605                		mov	@(marsGbl_CurrZList,gbr),r0	;  r8 - Zlist for sorting
(2)  346/FFFFFFFFC0000202 : 6803                		mov	r0,r8
(2)  347/FFFFFFFFC0000204 :                     .next_face:
(2)  348/FFFFFFFFC0000204 : C510                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0	; Ran out of space to store faces?
(2)  349/FFFFFFFFC0000206 : D102                		mov	.tag_maxfaces,r1
(2)  350/FFFFFFFFC0000208 : 3013                		cmp/ge	r1,r0
(2)  351/FFFFFFFFC000020A : 8B03                		bf	.can_build
(2)  352/FFFFFFFFC000020C :                     .no_model:
(2)  353/FFFFFFFFC000020C : A11A                		bra	.exit_model
(2)  354/FFFFFFFFC000020E : 0009                		nop
(2)  355/FFFFFFFFC0000210 :                     		align 4
(2)  356/FFFFFFFFC0000210 : 0000 0280           .tag_maxfaces:	dc.l	MAX_FACES
(2)  357/FFFFFFFFC0000214 :                     
(2)  358/FFFFFFFFC0000214 :                     ; --------------------------------
(2)  359/FFFFFFFFC0000214 :                     
(2)  360/FFFFFFFFC0000214 :                     .can_build:
(2)  361/FFFFFFFFC0000214 : 64B5                		mov.w	@r11+,r4		; Read type
(2)  362/FFFFFFFFC0000216 : E703                		mov	#3,r7			; r7 - Current polygon type: triangle (3)
(2)  363/FFFFFFFFC0000218 : 6043                		mov	r4,r0
(2)  364/FFFFFFFFC000021A : 4019                		shlr8	r0
(2)  365/FFFFFFFFC000021C : C840                		tst	#PLGN_TRI,r0		; Model face uses triangle?
(2)  366/FFFFFFFFC000021E : 8B00                		bf	.set_tri
(2)  367/FFFFFFFFC0000220 : 7701                		add	#1,r7			; Face is quad, r7 = 4 points
(2)  368/FFFFFFFFC0000222 :                     .set_tri:
(2)  369/FFFFFFFFC0000222 : 4415                		cmp/pl	r4			; Faces uses texture? ($8xxx)
(2)  370/FFFFFFFFC0000224 : 893C                		bt	.solid_type
(2)  371/FFFFFFFFC0000226 :                     
(2)  372/FFFFFFFFC0000226 :                     ; --------------------------------
(2)  373/FFFFFFFFC0000226 :                     ; Set texture material
(2)  374/FFFFFFFFC0000226 :                     ; --------------------------------
(2)  375/FFFFFFFFC0000226 :                     
(2)  376/FFFFFFFFC0000226 : 56C3                		mov	@($C,r12),r6		; r6 - Material data
(2)  377/FFFFFFFFC0000228 : 65D3                		mov	r13,r5			; r5 - Go to UV section
(2)  378/FFFFFFFFC000022A : 7528                		add 	#polygn_srcpnts,r5
(2)  379/FFFFFFFFC000022C : 6373                		mov	r7,r3			; r3 - copy of current face points (3 or 4)
(2)  380/FFFFFFFFC000022E :                     
(2)  381/FFFFFFFFC000022E :                     	; Faster read
(2)  382/FFFFFFFFC000022E :                     	rept 3
(2)  383/FFFFFFFFC000022E :                     		mov.w	@r11+,r0		; Read UV index
(2)  384/FFFFFFFFC000022E :                     		extu	r0,r0
(2)  385/FFFFFFFFC000022E :                     		shll2	r0
(2)  386/FFFFFFFFC000022E :                     		mov	@(r6,r0),r0
(2)  387/FFFFFFFFC000022E :                     		mov.w	r0,@(2,r5)
(2)  388/FFFFFFFFC000022E :                     		shlr16	r0
(2)  389/FFFFFFFFC000022E :                     		mov.w	r0,@r5
(2)  390/FFFFFFFFC000022E :                     		add	#4,r5
(2)  391/FFFFFFFFC000022E :                     	endm
(2)  383/FFFFFFFFC000022E : 60B5                		mov.w	@r11+,r0		; Read UV index
(2)  384/FFFFFFFFC0000230 : 600D                		extu	r0,r0
(2)  385/FFFFFFFFC0000232 : 4008                		shll2	r0
(2)  386/FFFFFFFFC0000234 : 006E                		mov	@(r6,r0),r0
(2)  387/FFFFFFFFC0000236 : 8151                		mov.w	r0,@(2,r5)
(2)  388/FFFFFFFFC0000238 : 4029                		shlr16	r0
(2)  389/FFFFFFFFC000023A : 2501                		mov.w	r0,@r5
(2)  390/FFFFFFFFC000023C : 7504                		add	#4,r5
(2)  383/FFFFFFFFC000023E : 60B5                		mov.w	@r11+,r0		; Read UV index
(2)  384/FFFFFFFFC0000240 : 600D                		extu	r0,r0
(2)  385/FFFFFFFFC0000242 : 4008                		shll2	r0
(2)  386/FFFFFFFFC0000244 : 006E                		mov	@(r6,r0),r0
(2)  387/FFFFFFFFC0000246 : 8151                		mov.w	r0,@(2,r5)
(2)  388/FFFFFFFFC0000248 : 4029                		shlr16	r0
(2)  389/FFFFFFFFC000024A : 2501                		mov.w	r0,@r5
(2)  390/FFFFFFFFC000024C : 7504                		add	#4,r5
(2)  383/FFFFFFFFC000024E : 60B5                		mov.w	@r11+,r0		; Read UV index
(2)  384/FFFFFFFFC0000250 : 600D                		extu	r0,r0
(2)  385/FFFFFFFFC0000252 : 4008                		shll2	r0
(2)  386/FFFFFFFFC0000254 : 006E                		mov	@(r6,r0),r0
(2)  387/FFFFFFFFC0000256 : 8151                		mov.w	r0,@(2,r5)
(2)  388/FFFFFFFFC0000258 : 4029                		shlr16	r0
(2)  389/FFFFFFFFC000025A : 2501                		mov.w	r0,@r5
(2)  390/FFFFFFFFC000025C : 7504                		add	#4,r5
(2)  392/FFFFFFFFC000025E : E003                		mov	#3,r0			; Triangle?
(2)  393/FFFFFFFFC0000260 : 3700                		cmp/eq	r0,r7
(2)  394/FFFFFFFFC0000262 : 8906                		bt	.alluvdone		; If yes, skip this
(2)  395/FFFFFFFFC0000264 : 60B5                		mov.w	@r11+,r0		; Read extra UV index
(2)  396/FFFFFFFFC0000266 : 600D                		extu	r0,r0
(2)  397/FFFFFFFFC0000268 : 4008                		shll2	r0
(2)  398/FFFFFFFFC000026A : 006E                		mov	@(r6,r0),r0
(2)  399/FFFFFFFFC000026C : 8151                		mov.w	r0,@(2,r5)
(2)  400/FFFFFFFFC000026E : 4029                		shlr16	r0
(2)  401/FFFFFFFFC0000270 : 2501                		mov.w	r0,@r5
(2)  402/FFFFFFFFC0000272 :                     .alluvdone:
(2)  403/FFFFFFFFC0000272 :                     
(2)  404/FFFFFFFFC0000272 : 50E1                		mov	@(mdl_option,r14),r0
(2)  405/FFFFFFFFC0000274 : C9FF                		and	#$FF,r0
(2)  406/FFFFFFFFC0000276 : 6103                		mov	r0,r1
(2)  407/FFFFFFFFC0000278 : 6043                		mov	r4,r0
(2)  408/FFFFFFFFC000027A : D508                		mov	.tag_andmtrl,r5
(2)  409/FFFFFFFFC000027C : 2059                		and	r5,r0
(2)  410/FFFFFFFFC000027E : 4008                		shll2	r0
(2)  411/FFFFFFFFC0000280 : 4000                		shll	r0
(2)  412/FFFFFFFFC0000282 : 56C4                		mov	@($10,r12),r6
(2)  413/FFFFFFFFC0000284 : 360C                		add	r0,r6
(2)  414/FFFFFFFFC0000286 : D072                		mov	#$C000,r0		; grab special bits
(2)  415/FFFFFFFFC0000288 : 2409                		and	r0,r4
(2)  416/FFFFFFFFC000028A : 4428                		shll16	r4
(2)  417/FFFFFFFFC000028C : 5061                		mov	@(4,r6),r0
(2)  418/FFFFFFFFC000028E : 240B                		or	r0,r4
(2)  419/FFFFFFFFC0000290 : 341C                		add	r1,r4
(2)  420/FFFFFFFFC0000292 : 1D40                		mov	r4,@(polygn_type,r13)
(2)  421/FFFFFFFFC0000294 : 6062                		mov	@r6,r0
(2)  422/FFFFFFFFC0000296 : 1D01                		mov	r0,@(polygn_mtrl,r13)
(2)  423/FFFFFFFFC0000298 : A00D                		bra	.go_faces
(2)  424/FFFFFFFFC000029A : 0009                		nop
(2)  425/FFFFFFFFC000029C :                     		align 4
(2)  426/FFFFFFFFC000029C :                     .tag_andmtrl:
(2)  427/FFFFFFFFC000029C : 0000 3FFF           		dc.l $3FFF
(2)  428/FFFFFFFFC00002A0 :                     
(2)  429/FFFFFFFFC00002A0 :                     ; --------------------------------
(2)  430/FFFFFFFFC00002A0 :                     ; Set texture material
(2)  431/FFFFFFFFC00002A0 :                     ; --------------------------------
(2)  432/FFFFFFFFC00002A0 :                     
(2)  433/FFFFFFFFC00002A0 :                     .solid_type:
(2)  434/FFFFFFFFC00002A0 : 50E1                		mov	@(mdl_option,r14),r0
(2)  435/FFFFFFFFC00002A2 : C9FF                		and	#$FF,r0
(2)  436/FFFFFFFFC00002A4 : 6103                		mov	r0,r1
(2)  437/FFFFFFFFC00002A6 : 6043                		mov	r4,r0
(2)  438/FFFFFFFFC00002A8 : D56A                		mov	#$E000,r5
(2)  439/FFFFFFFFC00002AA : 2459                		and	r5,r4
(2)  440/FFFFFFFFC00002AC : 4428                		shll16	r4
(2)  441/FFFFFFFFC00002AE : 341C                		add	r1,r4
(2)  442/FFFFFFFFC00002B0 : 1D40                		mov	r4,@(polygn_type,r13)		; Set type 0 (tri) or quad (1)
(2)  443/FFFFFFFFC00002B2 : C9FF                		and	#$FF,r0
(2)  444/FFFFFFFFC00002B4 : 1D01                		mov	r0,@(polygn_mtrl,r13)		; Set pixel color (0-255)
(2)  445/FFFFFFFFC00002B6 :                     
(2)  446/FFFFFFFFC00002B6 :                     ; --------------------------------
(2)  447/FFFFFFFFC00002B6 :                     ; Read faces
(2)  448/FFFFFFFFC00002B6 :                     ; --------------------------------
(2)  449/FFFFFFFFC00002B6 :                     
(2)  450/FFFFFFFFC00002B6 :                     .go_faces:
(2)  451/FFFFFFFFC00002B6 : 61D3                		mov	r13,r1
(2)  452/FFFFFFFFC00002B8 : 7108                		add 	#polygn_points,r1
(2)  453/FFFFFFFFC00002BA : 66B3                		mov	r11,r6
(2)  454/FFFFFFFFC00002BC : 6073                		mov	r7,r0
(2)  455/FFFFFFFFC00002BE : 4000                		shll	r0
(2)  456/FFFFFFFFC00002C0 : 3B0C                		add	r0,r11
(2)  457/FFFFFFFFC00002C2 :                     
(2)  458/FFFFFFFFC00002C2 : D065                		mov	#Cach_BkupS_S,r0
(2)  459/FFFFFFFFC00002C4 : 2086                		mov 	r8,@-r0
(2)  460/FFFFFFFFC00002C6 : 2096                		mov 	r9,@-r0
(2)  461/FFFFFFFFC00002C8 : 20B6                		mov 	r11,@-r0
(2)  462/FFFFFFFFC00002CA : 20C6                		mov 	r12,@-r0
(2)  463/FFFFFFFFC00002CC : 20D6                		mov 	r13,@-r0
(2)  464/FFFFFFFFC00002CE : D831                		mov	.tag_xl,r8
(2)  465/FFFFFFFFC00002D0 : 698B                		neg	r8,r9
(2)  466/FFFFFFFFC00002D2 : EB90                		mov	#-112,r11
(2)  467/FFFFFFFFC00002D4 : 6CBB                		neg	r11,r12
(2)  468/FFFFFFFFC00002D6 : D561                		mov	#$7FFFFFFF,r5
(2)  469/FFFFFFFFC00002D8 : EDFF                		mov	#-1,r13		; $FFFFFFFF
(2)  470/FFFFFFFFC00002DA :                     
(2)  471/FFFFFFFFC00002DA :                     	; Do 3 points
(2)  472/FFFFFFFFC00002DA :                     	rept 3
(2)  473/FFFFFFFFC00002DA :                     		mov	#0,r0
(2)  474/FFFFFFFFC00002DA :                     		mov.w 	@r6+,r0
(2)  475/FFFFFFFFC00002DA :                     		mov	#$C,r4
(2)  476/FFFFFFFFC00002DA :                     		mulu	r4,r0
(2)  477/FFFFFFFFC00002DA :                     		sts	macl,r0
(2)  478/FFFFFFFFC00002DA :                     		mov	r10,r4
(2)  479/FFFFFFFFC00002DA :                     		add 	r0,r4
(2)  480/FFFFFFFFC00002DA :                     		mov	@r4,r2
(2)  481/FFFFFFFFC00002DA :                     		mov	@(4,r4),r3
(2)  482/FFFFFFFFC00002DA :                     		mov	@(8,r4),r4
(2)  483/FFFFFFFFC00002DA :                     		bsr	mdlrd_setpoint
(2)  484/FFFFFFFFC00002DA :                     		nop
(2)  485/FFFFFFFFC00002DA :                     		mov	r2,@r1
(2)  486/FFFFFFFFC00002DA :                     		mov	r3,@(4,r1)
(2)  487/FFFFFFFFC00002DA :                     		add	#8,r1
(2)  488/FFFFFFFFC00002DA :                     	endm
(2)  473/FFFFFFFFC00002DA : E000                		mov	#0,r0
(2)  474/FFFFFFFFC00002DC : 6065                		mov.w 	@r6+,r0
(2)  475/FFFFFFFFC00002DE : E40C                		mov	#$C,r4
(2)  476/FFFFFFFFC00002E0 : 204E                		mulu	r4,r0
(2)  477/FFFFFFFFC00002E2 : 001A                		sts	macl,r0
(2)  478/FFFFFFFFC00002E4 : 64A3                		mov	r10,r4
(2)  479/FFFFFFFFC00002E6 : 340C                		add 	r0,r4
(2)  480/FFFFFFFFC00002E8 : 6242                		mov	@r4,r2
(2)  481/FFFFFFFFC00002EA : 5341                		mov	@(4,r4),r3
(2)  482/FFFFFFFFC00002EC : 5442                		mov	@(8,r4),r4
(2)  483/FFFFFFFFC00002EE : B0BB                		bsr	mdlrd_setpoint
(2)  484/FFFFFFFFC00002F0 : 0009                		nop
(2)  485/FFFFFFFFC00002F2 : 2122                		mov	r2,@r1
(2)  486/FFFFFFFFC00002F4 : 1131                		mov	r3,@(4,r1)
(2)  487/FFFFFFFFC00002F6 : 7108                		add	#8,r1
(2)  473/FFFFFFFFC00002F8 : E000                		mov	#0,r0
(2)  474/FFFFFFFFC00002FA : 6065                		mov.w 	@r6+,r0
(2)  475/FFFFFFFFC00002FC : E40C                		mov	#$C,r4
(2)  476/FFFFFFFFC00002FE : 204E                		mulu	r4,r0
(2)  477/FFFFFFFFC0000300 : 001A                		sts	macl,r0
(2)  478/FFFFFFFFC0000302 : 64A3                		mov	r10,r4
(2)  479/FFFFFFFFC0000304 : 340C                		add 	r0,r4
(2)  480/FFFFFFFFC0000306 : 6242                		mov	@r4,r2
(2)  481/FFFFFFFFC0000308 : 5341                		mov	@(4,r4),r3
(2)  482/FFFFFFFFC000030A : 5442                		mov	@(8,r4),r4
(2)  483/FFFFFFFFC000030C : B0AC                		bsr	mdlrd_setpoint
(2)  484/FFFFFFFFC000030E : 0009                		nop
(2)  485/FFFFFFFFC0000310 : 2122                		mov	r2,@r1
(2)  486/FFFFFFFFC0000312 : 1131                		mov	r3,@(4,r1)
(2)  487/FFFFFFFFC0000314 : 7108                		add	#8,r1
(2)  473/FFFFFFFFC0000316 : E000                		mov	#0,r0
(2)  474/FFFFFFFFC0000318 : 6065                		mov.w 	@r6+,r0
(2)  475/FFFFFFFFC000031A : E40C                		mov	#$C,r4
(2)  476/FFFFFFFFC000031C : 204E                		mulu	r4,r0
(2)  477/FFFFFFFFC000031E : 001A                		sts	macl,r0
(2)  478/FFFFFFFFC0000320 : 64A3                		mov	r10,r4
(2)  479/FFFFFFFFC0000322 : 340C                		add 	r0,r4
(2)  480/FFFFFFFFC0000324 : 6242                		mov	@r4,r2
(2)  481/FFFFFFFFC0000326 : 5341                		mov	@(4,r4),r3
(2)  482/FFFFFFFFC0000328 : 5442                		mov	@(8,r4),r4
(2)  483/FFFFFFFFC000032A : B09D                		bsr	mdlrd_setpoint
(2)  484/FFFFFFFFC000032C : 0009                		nop
(2)  485/FFFFFFFFC000032E : 2122                		mov	r2,@r1
(2)  486/FFFFFFFFC0000330 : 1131                		mov	r3,@(4,r1)
(2)  487/FFFFFFFFC0000332 : 7108                		add	#8,r1
(2)  489/FFFFFFFFC0000334 : E003                		mov	#3,r0			; Triangle?
(2)  490/FFFFFFFFC0000336 : 3700                		cmp/eq	r0,r7
(2)  491/FFFFFFFFC0000338 : 890D                		bt	.alldone		; If yes, skip this
(2)  492/FFFFFFFFC000033A : E000                		mov	#0,r0
(2)  493/FFFFFFFFC000033C : 6065                		mov.w 	@r6+,r0
(2)  494/FFFFFFFFC000033E : E40C                		mov	#$C,r4
(2)  495/FFFFFFFFC0000340 : 204E                		mulu	r4,r0
(2)  496/FFFFFFFFC0000342 : 001A                		sts	macl,r0
(2)  497/FFFFFFFFC0000344 : 64A3                		mov	r10,r4
(2)  498/FFFFFFFFC0000346 : 340C                		add 	r0,r4
(2)  499/FFFFFFFFC0000348 : 6242                		mov	@r4,r2
(2)  500/FFFFFFFFC000034A : 5341                		mov	@(4,r4),r3
(2)  501/FFFFFFFFC000034C : 5442                		mov	@(8,r4),r4
(2)  502/FFFFFFFFC000034E : B08B                		bsr	mdlrd_setpoint
(2)  503/FFFFFFFFC0000350 : 0009                		nop
(2)  504/FFFFFFFFC0000352 : 2122                		mov	r2,@r1
(2)  505/FFFFFFFFC0000354 : 1131                		mov	r3,@(4,r1)
(2)  506/FFFFFFFFC0000356 :                     .alldone:
(2)  507/FFFFFFFFC0000356 : 6183                		mov	r8,r1
(2)  508/FFFFFFFFC0000358 : 6293                		mov	r9,r2
(2)  509/FFFFFFFFC000035A : 63B3                		mov	r11,r3
(2)  510/FFFFFFFFC000035C : 64C3                		mov	r12,r4
(2)  511/FFFFFFFFC000035E : 66D3                		mov	r13,r6
(2)  512/FFFFFFFFC0000360 :                     
(2)  513/FFFFFFFFC0000360 : D03F                		mov	#Cach_BkupS_L,r0
(2)  514/FFFFFFFFC0000362 : 6D06                		mov	@r0+,r13
(2)  515/FFFFFFFFC0000364 : 6C06                		mov	@r0+,r12
(2)  516/FFFFFFFFC0000366 : 6B06                		mov	@r0+,r11
(2)  517/FFFFFFFFC0000368 : 6906                		mov	@r0+,r9
(2)  518/FFFFFFFFC000036A : 6806                		mov	@r0+,r8
(2)  519/FFFFFFFFC000036C :                     
(2)  520/FFFFFFFFC000036C :                     	; NOTE: if you don't like how the perspective works
(2)  521/FFFFFFFFC000036C :                     	; change this instruction depending how you want to ignore
(2)  522/FFFFFFFFC000036C :                     	; faces closer to the camera:
(2)  523/FFFFFFFFC000036C :                     	;
(2)  524/FFFFFFFFC000036C :                     	; r5 - Back Z point, keep affine limitations
(2)  525/FFFFFFFFC000036C :                     	; r6 - Front Z point, skip face but larger faces are affected
(2)  526/FFFFFFFFC000036C :                     
(2)  527/FFFFFFFFC000036C : 4511                		cmp/pz	r5			; *** back z
(2)  528/FFFFFFFFC000036E : 890E                		bt	.go_fout
(2)  529/FFFFFFFFC0000370 :                     ; 		cmp/pz	r6			; *** front z
(2)  530/FFFFFFFFC0000370 :                     ; 		bt	.go_fout
(2)  531/FFFFFFFFC0000370 :                     
(2)  532/FFFFFFFFC0000370 : 9078                		mov	#MAX_ZDIST,r0		; Draw distance
(2)  533/FFFFFFFFC0000372 : 3503                		cmp/ge	r0,r5
(2)  534/FFFFFFFFC0000374 : 8B0B                		bf	.go_fout
(2)  535/FFFFFFFFC0000376 : 9076                		mov	#-(SCREEN_WIDTH/2),r0
(2)  536/FFFFFFFFC0000378 : 3107                		cmp/gt	r0,r1
(2)  537/FFFFFFFFC000037A : 8B08                		bf	.go_fout
(2)  538/FFFFFFFFC000037C : 600B                		neg	r0,r0
(2)  539/FFFFFFFFC000037E : 3203                		cmp/ge	r0,r2
(2)  540/FFFFFFFFC0000380 : 8905                		bt	.go_fout
(2)  541/FFFFFFFFC0000382 : E090                		mov	#-(SCREEN_HEIGHT/2),r0
(2)  542/FFFFFFFFC0000384 : 3307                		cmp/gt	r0,r3
(2)  543/FFFFFFFFC0000386 : 8B02                		bf	.go_fout
(2)  544/FFFFFFFFC0000388 : 600B                		neg	r0,r0
(2)  545/FFFFFFFFC000038A : 3403                		cmp/ge	r0,r4
(2)  546/FFFFFFFFC000038C : 8B04                		bf	.face_ok
(2)  547/FFFFFFFFC000038E : A053                .go_fout:	bra	.face_out
(2)  548/FFFFFFFFC0000390 : 0009                		nop
(2)  549/FFFFFFFFC0000392 :                     		align 4
(2)  550/FFFFFFFFC0000394 : FFFF FF60           .tag_xl:	dc.l -160
(2)  551/FFFFFFFFC0000398 :                     
(2)  552/FFFFFFFFC0000398 :                     ; --------------------------------
(2)  553/FFFFFFFFC0000398 :                     
(2)  554/FFFFFFFFC0000398 :                     .face_ok:
(2)  555/FFFFFFFFC0000398 : C510                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0	; Add 1 face to the list
(2)  556/FFFFFFFFC000039A : 7001                		add	#1,r0
(2)  557/FFFFFFFFC000039C : C110                		mov.w	r0,@(marsGbl_CurrNumFaces,gbr)
(2)  558/FFFFFFFFC000039E : C607                		mov	@(marsGbl_CurrFacePos,gbr),r0
(2)  559/FFFFFFFFC00003A0 : 6103                		mov	r0,r1
(2)  560/FFFFFFFFC00003A2 : 62D3                		mov	r13,r2
(2)  561/FFFFFFFFC00003A4 : 2852                		mov	r5,@r8				; Store current Z to Zlist
(2)  562/FFFFFFFFC00003A6 : 1811                		mov	r1,@(4,r8)			; And it's address
(2)  563/FFFFFFFFC00003A8 :                     
(2)  564/FFFFFFFFC00003A8 :                     ; 	Sort this face
(2)  565/FFFFFFFFC00003A8 :                     ; 	r7 - Curr Z
(2)  566/FFFFFFFFC00003A8 :                     ; 	r6 - Past Z
(2)  567/FFFFFFFFC00003A8 : C510                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0
(2)  568/FFFFFFFFC00003AA : 8801                		cmp/eq	#1,r0
(2)  569/FFFFFFFFC00003AC : 8917                		bt	.first_face
(2)  570/FFFFFFFFC00003AE : 8802                		cmp/eq	#2,r0
(2)  571/FFFFFFFFC00003B0 : 8915                		bt	.first_face
(2)  572/FFFFFFFFC00003B2 : 6783                		mov	r8,r7
(2)  573/FFFFFFFFC00003B4 : 77F8                		add	#-8,r7
(2)  574/FFFFFFFFC00003B6 : C606                		mov	@(marsGbl_CurrZTop,gbr),r0
(2)  575/FFFFFFFFC00003B8 : 6603                		mov	r0,r6
(2)  576/FFFFFFFFC00003BA :                     .page_2:
(2)  577/FFFFFFFFC00003BA : 3763                		cmp/ge	r6,r7
(2)  578/FFFFFFFFC00003BC : 8B0F                		bf	.first_face
(2)  579/FFFFFFFFC00003BE : 5472                		mov	@(8,r7),r4
(2)  580/FFFFFFFFC00003C0 : 6572                		mov	@r7,r5
(2)  581/FFFFFFFFC00003C2 : 3540                		cmp/eq	r4,r5
(2)  582/FFFFFFFFC00003C4 : 890B                		bt	.first_face
(2)  583/FFFFFFFFC00003C6 : 3547                		cmp/gt	r4,r5
(2)  584/FFFFFFFFC00003C8 : 8B07                		bf	.swap_me
(2)  585/FFFFFFFFC00003CA : 6472                		mov	@r7,r4
(2)  586/FFFFFFFFC00003CC : 5572                		mov	@(8,r7),r5
(2)  587/FFFFFFFFC00003CE : 2752                		mov	r5,@r7
(2)  588/FFFFFFFFC00003D0 : 1742                		mov	r4,@(8,r7)
(2)  589/FFFFFFFFC00003D2 : 5471                		mov	@(4,r7),r4
(2)  590/FFFFFFFFC00003D4 : 5573                		mov	@($C,r7),r5
(2)  591/FFFFFFFFC00003D6 : 1751                		mov	r5,@(4,r7)
(2)  592/FFFFFFFFC00003D8 : 1743                		mov	r4,@($C,r7)
(2)  593/FFFFFFFFC00003DA :                     .swap_me:
(2)  594/FFFFFFFFC00003DA : AFEE                		bra	.page_2
(2)  595/FFFFFFFFC00003DC : 77F8                		add	#-8,r7
(2)  596/FFFFFFFFC00003DE :                     
(2)  597/FFFFFFFFC00003DE :                     .first_face:
(2)  598/FFFFFFFFC00003DE : 7808                		add	#8,r8			; Next Zlist entry
(2)  599/FFFFFFFFC00003E0 :                     	rept sizeof_polygn/4			; Copy words manually
(2)  600/FFFFFFFFC00003E0 :                     		mov	@r2+,r0
(2)  601/FFFFFFFFC00003E0 :                     		mov	r0,@r1
(2)  602/FFFFFFFFC00003E0 :                     		add	#4,r1
(2)  603/FFFFFFFFC00003E0 :                     	endm
(2)  600/FFFFFFFFC00003E0 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC00003E2 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC00003E4 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC00003E6 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC00003E8 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC00003EA : 7104                		add	#4,r1
(2)  600/FFFFFFFFC00003EC : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC00003EE : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC00003F0 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC00003F2 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC00003F4 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC00003F6 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC00003F8 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC00003FA : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC00003FC : 7104                		add	#4,r1
(2)  600/FFFFFFFFC00003FE : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC0000400 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC0000402 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC0000404 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC0000406 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC0000408 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC000040A : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC000040C : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC000040E : 7104                		add	#4,r1
(2)  600/FFFFFFFFC0000410 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC0000412 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC0000414 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC0000416 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC0000418 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC000041A : 7104                		add	#4,r1
(2)  600/FFFFFFFFC000041C : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC000041E : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC0000420 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC0000422 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC0000424 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC0000426 : 7104                		add	#4,r1
(2)  600/FFFFFFFFC0000428 : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC000042A : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC000042C : 7104                		add	#4,r1
(2)  600/FFFFFFFFC000042E : 6026                		mov	@r2+,r0
(2)  601/FFFFFFFFC0000430 : 2102                		mov	r0,@r1
(2)  602/FFFFFFFFC0000432 : 7104                		add	#4,r1
(2)  604/FFFFFFFFC0000434 : 6013                		mov	r1,r0
(2)  605/FFFFFFFFC0000436 : C207                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2)  606/FFFFFFFFC0000438 :                     .face_out:
(2)  607/FFFFFFFFC0000438 : 4910                		dt	r9
(2)  608/FFFFFFFFC000043A : 8901                		bt	.finish_this
(2)  609/FFFFFFFFC000043C : AEE2                		bra	.next_face
(2)  610/FFFFFFFFC000043E : 0009                		nop
(2)  611/FFFFFFFFC0000440 :                     .finish_this:
(2)  612/FFFFFFFFC0000440 : 6083                		mov	r8,r0
(2)  613/FFFFFFFFC0000442 : C205                		mov	r0,@(marsGbl_CurrZList,gbr)
(2)  614/FFFFFFFFC0000444 :                     .exit_model:
(2)  615/FFFFFFFFC0000444 : 4F26                		lds	@r15+,pr
(2)  616/FFFFFFFFC0000446 : 000B                		rts
(2)  617/FFFFFFFFC0000448 : 0009                		nop
(2)  618/FFFFFFFFC000044A :                     		align 4
(2)  619/FFFFFFFFC000044C : C000 0760 0000 C000 		ltorg
                    0000 E000 C000 0760 
                    7FFF FFFF C000 074C 
                    F000 FF60           
(2)  620/FFFFFFFFC0000468 :                     
(2)  621/FFFFFFFFC0000468 :                     ; ----------------------------------------
(2)  622/FFFFFFFFC0000468 :                     ; Modify position to current point
(2)  623/FFFFFFFFC0000468 :                     ; ----------------------------------------
(2)  624/FFFFFFFFC0000468 :                     
(2)  625/FFFFFFFFC0000468 :                     		align 4
(2)  626/FFFFFFFFC0000468 :                     mdlrd_setpoint:
(2)  627/FFFFFFFFC0000468 : D045                		mov	#Cach_BkupPnt_S,r0
(2)  628/FFFFFFFFC000046A : 4022                		sts	pr,@-r0
(2)  629/FFFFFFFFC000046C : 2056                		mov 	r5,@-r0
(2)  630/FFFFFFFFC000046E : 2066                		mov 	r6,@-r0
(2)  631/FFFFFFFFC0000470 : 2076                		mov 	r7,@-r0
(2)  632/FFFFFFFFC0000472 : 2086                		mov 	r8,@-r0
(2)  633/FFFFFFFFC0000474 : 2096                		mov 	r9,@-r0
(2)  634/FFFFFFFFC0000476 : 20A6                		mov 	r10,@-r0
(2)  635/FFFFFFFFC0000478 : 20B6                		mov 	r11,@-r0
(2)  636/FFFFFFFFC000047A :                     
(2)  637/FFFFFFFFC000047A :                     	; Object rotation
(2)  638/FFFFFFFFC000047A : 6523                		mov	r2,r5			; r5 - X
(2)  639/FFFFFFFFC000047C : 6643                		mov	r4,r6			; r6 - Z
(2)  640/FFFFFFFFC000047E : 85E7                  		mov.w 	@(mdl_x_rot,r14),r0
(2)  641/FFFFFFFFC0000480 : B088                  		bsr	mdlrd_rotate
(2)  642/FFFFFFFFC0000482 : 4009                  		shlr2	r0
(2)  643/FFFFFFFFC0000484 : 6273                   		mov	r7,r2
(2)  644/FFFFFFFFC0000486 : 6533                   		mov	r3,r5
(2)  645/FFFFFFFFC0000488 : 6683                  		mov	r8,r6
(2)  646/FFFFFFFFC000048A : 85E9                  		mov.w	@(mdl_z_rot,r14),r0
(2)  647/FFFFFFFFC000048C : 4001                  		shlr	r0
(2)  648/FFFFFFFFC000048E : B081                  		bsr	mdlrd_rotate
(2)  649/FFFFFFFFC0000490 : 4009                  		shlr2	r0
(2)  650/FFFFFFFFC0000492 : 6483                   		mov	r8,r4
(2)  651/FFFFFFFFC0000494 : 6523                   		mov	r2,r5
(2)  652/FFFFFFFFC0000496 : 6673                   		mov	r7,r6
(2)  653/FFFFFFFFC0000498 : 85E8                   		mov.w	@(mdl_y_rot,r14),r0
(2)  654/FFFFFFFFC000049A : 4001                  		shlr	r0
(2)  655/FFFFFFFFC000049C : B07A                  		bsr	mdlrd_rotate
(2)  656/FFFFFFFFC000049E : 4009                  		shlr2	r0
(2)  657/FFFFFFFFC00004A0 : 6273                   		mov	r7,r2
(2)  658/FFFFFFFFC00004A2 : 6383                   		mov	r8,r3
(2)  659/FFFFFFFFC00004A4 : 85E4                		mov.w	@(mdl_x_pos,r14),r0
(2)  660/FFFFFFFFC00004A6 : 650F                		exts.w	r0,r5
(2)  661/FFFFFFFFC00004A8 : 85E5                		mov.w	@(mdl_y_pos,r14),r0
(2)  662/FFFFFFFFC00004AA : 660F                		exts.w	r0,r6
(2)  663/FFFFFFFFC00004AC : 85E6                		mov.w	@(mdl_z_pos,r14),r0
(2)  664/FFFFFFFFC00004AE : 670F                		exts.w	r0,r7
(2)  665/FFFFFFFFC00004B0 : 4521                 		shar	r5
(2)  666/FFFFFFFFC00004B2 : 4621                 		shar	r6
(2)  667/FFFFFFFFC00004B4 : 4721                 		shar	r7
(2)  668/FFFFFFFFC00004B6 : 325C                		add 	r5,r2
(2)  669/FFFFFFFFC00004B8 : 336C                		add 	r6,r3
(2)  670/FFFFFFFFC00004BA : 347C                		add 	r7,r4
(2)  671/FFFFFFFFC00004BC :                     
(2)  672/FFFFFFFFC00004BC :                     	; Include camera changes
(2)  673/FFFFFFFFC00004BC : DB31                		mov 	#RAM_Mars_ObjCamera,r11
(2)  674/FFFFFFFFC00004BE : 55B0                		mov	@(cam_x_pos,r11),r5
(2)  675/FFFFFFFFC00004C0 : 56B1                		mov	@(cam_y_pos,r11),r6
(2)  676/FFFFFFFFC00004C2 : 57B2                		mov	@(cam_z_pos,r11),r7
(2)  677/FFFFFFFFC00004C4 : 4519                		shlr8	r5
(2)  678/FFFFFFFFC00004C6 : 4619                		shlr8	r6
(2)  679/FFFFFFFFC00004C8 : 4719                		shlr8	r7
(2)  680/FFFFFFFFC00004CA : 655F                		exts	r5,r5
(2)  681/FFFFFFFFC00004CC : 666F                		exts	r6,r6
(2)  682/FFFFFFFFC00004CE : 677F                		exts	r7,r7
(2)  683/FFFFFFFFC00004D0 : 3258                		sub 	r5,r2
(2)  684/FFFFFFFFC00004D2 : 3368                		sub 	r6,r3
(2)  685/FFFFFFFFC00004D4 : 347C                		add 	r7,r4
(2)  686/FFFFFFFFC00004D6 :                     
(2)  687/FFFFFFFFC00004D6 : 6523                		mov	r2,r5
(2)  688/FFFFFFFFC00004D8 : 6643                		mov	r4,r6
(2)  689/FFFFFFFFC00004DA : 50B3                  		mov 	@(cam_x_rot,r11),r0
(2)  690/FFFFFFFFC00004DC : 4009                  		shlr2	r0
(2)  691/FFFFFFFFC00004DE : 4001                  		shlr	r0
(2)  692/FFFFFFFFC00004E0 : B058                  		bsr	mdlrd_rotate
(2)  693/FFFFFFFFC00004E2 : 4019                		shlr8	r0
(2)  694/FFFFFFFFC00004E4 : 6273                   		mov	r7,r2
(2)  695/FFFFFFFFC00004E6 : 6483                   		mov	r8,r4
(2)  696/FFFFFFFFC00004E8 : 6533                   		mov	r3,r5
(2)  697/FFFFFFFFC00004EA : 6683                  		mov	r8,r6
(2)  698/FFFFFFFFC00004EC : 50B4                  		mov 	@(cam_y_rot,r11),r0
(2)  699/FFFFFFFFC00004EE : 4009                  		shlr2	r0
(2)  700/FFFFFFFFC00004F0 : 4001                  		shlr	r0
(2)  701/FFFFFFFFC00004F2 : B04F                  		bsr	mdlrd_rotate
(2)  702/FFFFFFFFC00004F4 : 4019                		shlr8	r0
(2)  703/FFFFFFFFC00004F6 : 6483                   		mov	r8,r4
(2)  704/FFFFFFFFC00004F8 : 6523                   		mov	r2,r5
(2)  705/FFFFFFFFC00004FA : 6673                   		mov	r7,r6
(2)  706/FFFFFFFFC00004FC : 50B5                   		mov 	@(cam_z_rot,r11),r0
(2)  707/FFFFFFFFC00004FE : 4009                  		shlr2	r0
(2)  708/FFFFFFFFC0000500 : 4001                  		shlr	r0
(2)  709/FFFFFFFFC0000502 : B047                  		bsr	mdlrd_rotate
(2)  710/FFFFFFFFC0000504 : 4019                		shlr8	r0
(2)  711/FFFFFFFFC0000506 : 6273                   		mov	r7,r2
(2)  712/FFFFFFFFC0000508 : 6383                   		mov	r8,r3
(2)  713/FFFFFFFFC000050A :                     
(2)  714/FFFFFFFFC000050A :                     	; Weak perspective projection
(2)  715/FFFFFFFFC000050A :                     	; this is the best I got,
(2)  716/FFFFFFFFC000050A :                     	; It breaks on large faces
(2)  717/FFFFFFFFC000050A : 9841                		mov 	#_JR,r8
(2)  718/FFFFFFFFC000050C : D71E                		mov	#256<<17,r7
(2)  719/FFFFFFFFC000050E : 604B                		neg	r4,r0		; reverse Z
(2)  720/FFFFFFFFC0000510 : 4015                		cmp/pl	r0
(2)  721/FFFFFFFFC0000512 : 890C                		bt	.inside
(2)  722/FFFFFFFFC0000514 : E001                		mov	#1,r0
(2)  723/FFFFFFFFC0000516 : 4709                		shlr2	r7
(2)  724/FFFFFFFFC0000518 : 4709                		shlr2	r7
(2)  725/FFFFFFFFC000051A :                     ; 		shlr	r7
(2)  726/FFFFFFFFC000051A : 327D                		dmuls	r7,r2
(2)  727/FFFFFFFFC000051C : 000A                		sts	mach,r0
(2)  728/FFFFFFFFC000051E : 021A                		sts	macl,r2
(2)  729/FFFFFFFFC0000520 : 220D                		xtrct	r0,r2
(2)  730/FFFFFFFFC0000522 : 337D                		dmuls	r7,r3
(2)  731/FFFFFFFFC0000524 : 000A                		sts	mach,r0
(2)  732/FFFFFFFFC0000526 : 031A                		sts	macl,r3
(2)  733/FFFFFFFFC0000528 : 230D                		xtrct	r0,r3
(2)  734/FFFFFFFFC000052A : A00C                		bra	.zmulti
(2)  735/FFFFFFFFC000052C : 0009                		nop
(2)  736/FFFFFFFFC000052E :                     .inside:
(2)  737/FFFFFFFFC000052E : 2802                		mov 	r0,@r8
(2)  738/FFFFFFFFC0000530 : 1871                		mov 	r7,@(4,r8)
(2)  739/FFFFFFFFC0000532 : 0009                		nop
(2)  740/FFFFFFFFC0000534 : 5781                		mov 	@(4,r8),r7
(2)  741/FFFFFFFFC0000536 : 327D                		dmuls	r7,r2
(2)  742/FFFFFFFFC0000538 : 000A                		sts	mach,r0
(2)  743/FFFFFFFFC000053A : 021A                		sts	macl,r2
(2)  744/FFFFFFFFC000053C : 220D                		xtrct	r0,r2
(2)  745/FFFFFFFFC000053E : 337D                		dmuls	r7,r3
(2)  746/FFFFFFFFC0000540 : 000A                		sts	mach,r0
(2)  747/FFFFFFFFC0000542 : 031A                		sts	macl,r3
(2)  748/FFFFFFFFC0000544 : 230D                		xtrct	r0,r3
(2)  749/FFFFFFFFC0000546 :                     .zmulti:
(2)  750/FFFFFFFFC0000546 : D011                		mov	#Cach_BkupPnt_L,r0
(2)  751/FFFFFFFFC0000548 : 6B06                		mov	@r0+,r11
(2)  752/FFFFFFFFC000054A : 6A06                		mov	@r0+,r10
(2)  753/FFFFFFFFC000054C : 6906                		mov	@r0+,r9
(2)  754/FFFFFFFFC000054E : 6806                		mov	@r0+,r8
(2)  755/FFFFFFFFC0000550 : 6706                		mov	@r0+,r7
(2)  756/FFFFFFFFC0000552 : 6606                		mov	@r0+,r6
(2)  757/FFFFFFFFC0000554 : 6506                		mov	@r0+,r5
(2)  758/FFFFFFFFC0000556 : 4026                		lds	@r0+,pr
(2)  759/FFFFFFFFC0000558 :                     
(2)  760/FFFFFFFFC0000558 :                     	; Set the most far points
(2)  761/FFFFFFFFC0000558 :                     	; for each direction (X,Y,Z)
(2)  762/FFFFFFFFC0000558 : 34D7                		cmp/gt	r13,r4
(2)  763/FFFFFFFFC000055A : 8B00                		bf	.save_z2
(2)  764/FFFFFFFFC000055C : 6D43                		mov	r4,r13
(2)  765/FFFFFFFFC000055E :                     .save_z2:
(2)  766/FFFFFFFFC000055E : 3457                		cmp/gt	r5,r4
(2)  767/FFFFFFFFC0000560 : 8900                		bt	.save_z
(2)  768/FFFFFFFFC0000562 : 6543                		mov	r4,r5
(2)  769/FFFFFFFFC0000564 :                     .save_z:
(2)  770/FFFFFFFFC0000564 : 3287                		cmp/gt	r8,r2
(2)  771/FFFFFFFFC0000566 : 8B00                		bf	.x_lw
(2)  772/FFFFFFFFC0000568 : 6823                		mov	r2,r8
(2)  773/FFFFFFFFC000056A :                     .x_lw:
(2)  774/FFFFFFFFC000056A : 3297                		cmp/gt	r9,r2
(2)  775/FFFFFFFFC000056C : 8900                		bt	.x_rw
(2)  776/FFFFFFFFC000056E : 6923                		mov	r2,r9
(2)  777/FFFFFFFFC0000570 :                     .x_rw:
(2)  778/FFFFFFFFC0000570 : 33B7                		cmp/gt	r11,r3
(2)  779/FFFFFFFFC0000572 : 8B00                		bf	.y_lw
(2)  780/FFFFFFFFC0000574 : 6B33                		mov	r3,r11
(2)  781/FFFFFFFFC0000576 :                     .y_lw:
(2)  782/FFFFFFFFC0000576 : 33C7                		cmp/gt	r12,r3
(2)  783/FFFFFFFFC0000578 : 8900                		bt	.y_rw
(2)  784/FFFFFFFFC000057A : 6C33                		mov	r3,r12
(2)  785/FFFFFFFFC000057C :                     .y_rw:
(2)  786/FFFFFFFFC000057C : 000B                		rts
(2)  787/FFFFFFFFC000057E : 0009                		nop
(2)  788/FFFFFFFFC0000580 :                     		align 4
(2)  789/FFFFFFFFC0000580 : C000 074C 2602 1730 		ltorg
                    0200 0000 C000 072C 
                    FF00                
(2)  790/FFFFFFFFC0000592 :                     
(2)  791/FFFFFFFFC0000592 :                     ; ------------------------------
(2)  792/FFFFFFFFC0000592 :                     ; Rotate point
(2)  793/FFFFFFFFC0000592 :                     ;
(2)  794/FFFFFFFFC0000592 :                     ; Entry:
(2)  795/FFFFFFFFC0000592 :                     ; r5: x
(2)  796/FFFFFFFFC0000592 :                     ; r6: y
(2)  797/FFFFFFFFC0000592 :                     ; r0: theta
(2)  798/FFFFFFFFC0000592 :                     ;
(2)  799/FFFFFFFFC0000592 :                     ; Returns:
(2)  800/FFFFFFFFC0000592 :                     ; r7: (x  cos @) + (y sin @)
(2)  801/FFFFFFFFC0000592 :                     ; r8: (x -sin @) + (y cos @)
(2)  802/FFFFFFFFC0000592 :                     ; ------------------------------
(2)  803/FFFFFFFFC0000592 :                     
(2)  804/FFFFFFFFC0000592 :                     		align 4
(2)  805/FFFFFFFFC0000594 :                     mdlrd_rotate:
(2)  806/FFFFFFFFC0000594 : 971E                    		mov	#$7FF,r7
(2)  807/FFFFFFFFC0000596 : 2079                    		and	r7,r0
(2)  808/FFFFFFFFC0000598 : 4008                   		shll2	r0
(2)  809/FFFFFFFFC000059A : D70C                		mov	#sin_table,r7
(2)  810/FFFFFFFFC000059C : D80C                		mov	#sin_table+$800,r8
(2)  811/FFFFFFFFC000059E : 097E                		mov	@(r0,r7),r9
(2)  812/FFFFFFFFC00005A0 : 0A8E                		mov	@(r0,r8),r10
(2)  813/FFFFFFFFC00005A2 :                     
(2)  814/FFFFFFFFC00005A2 : 3A5D                		dmuls	r5,r10		; x cos @
(2)  815/FFFFFFFFC00005A4 : 071A                		sts	macl,r7
(2)  816/FFFFFFFFC00005A6 : 000A                		sts	mach,r0
(2)  817/FFFFFFFFC00005A8 : 270D                		xtrct	r0,r7
(2)  818/FFFFFFFFC00005AA : 396D                		dmuls	r6,r9		; y sin @
(2)  819/FFFFFFFFC00005AC : 081A                		sts	macl,r8
(2)  820/FFFFFFFFC00005AE : 000A                		sts	mach,r0
(2)  821/FFFFFFFFC00005B0 : 280D                		xtrct	r0,r8
(2)  822/FFFFFFFFC00005B2 : 378C                		add	r8,r7
(2)  823/FFFFFFFFC00005B4 :                     
(2)  824/FFFFFFFFC00005B4 : 699B                		neg	r9,r9
(2)  825/FFFFFFFFC00005B6 : 395D                		dmuls	r5,r9		; x -sin @
(2)  826/FFFFFFFFC00005B8 : 081A                		sts	macl,r8
(2)  827/FFFFFFFFC00005BA : 000A                		sts	mach,r0
(2)  828/FFFFFFFFC00005BC : 280D                		xtrct	r0,r8
(2)  829/FFFFFFFFC00005BE : 3A6D                		dmuls	r6,r10		; y cos @
(2)  830/FFFFFFFFC00005C0 : 091A                		sts	macl,r9
(2)  831/FFFFFFFFC00005C2 : 000A                		sts	mach,r0
(2)  832/FFFFFFFFC00005C4 : 290D                		xtrct	r0,r9
(2)  833/FFFFFFFFC00005C6 : 389C                		add	r9,r8
(2)  834/FFFFFFFFC00005C8 : 000B                 		rts
(2)  835/FFFFFFFFC00005CA : 0009                		nop
(2)  836/FFFFFFFFC00005CC :                     		align 4
(2)  837/FFFFFFFFC00005CC : 0600 26D8 0600 2ED8 		ltorg
                    07FF                
(2)  838/FFFFFFFFC00005D6 :                     
(2)  839/FFFFFFFFC00005D6 :                     ; ------------------------------------------------
(2)  840/FFFFFFFFC00005D6 :                     
(2)  841/FFFFFFFFC00005D6 :                     			align 4
(2)  842/FFFFFFFFC00005D8 :                     MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(2)  843/FFFFFFFFC00006F0 :                     MarsSnd_PwmControl	ds.b $38		; 8 bytes per channel.
(2)  844/FFFFFFFFC0000728 :                     MarsSnd_RvMode		ds.l 1			; ROM RV protection flag
(2)  845/FFFFFFFFC000072C :                     Cach_BkupPnt_L		ds.l 8			; **
(2)  846/FFFFFFFFC000074C :                     Cach_BkupPnt_S		ds.l 0			; <-- Reads backwards
(2)  847/FFFFFFFFC000074C :                     Cach_BkupS_L		ds.l 5			; **
(2)  848/FFFFFFFFC0000760 :                     Cach_BkupS_S		ds.l 0			; <-- Reads backwards
(2)  849/FFFFFFFFC0000760 :                     Cach_CurrPlygn		ds.b sizeof_polygn	; Current reading polygon
(2)  850/FFFFFFFFC0000798 :                     
(2)  851/FFFFFFFFC0000798 :                     ; ------------------------------------------------
(2)  852/ 60026D8 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2)  853/ 60026D8 :                     
(2)  854/ 60026D8 :                     		align 4
(2)  855/ 60026D8 :                     CACHE_SLAVE_E:
(2)  859/ 60026D8 :                     
(1) 2324/ 60026D8 :                     
(1) 2325/ 60026D8 :                     ; ====================================================================
(1) 2326/ 60026D8 :                     ; ----------------------------------------------------------------
(1) 2327/ 60026D8 :                     ; Data
(1) 2328/ 60026D8 :                     ; ----------------------------------------------------------------
(1) 2329/ 60026D8 :                     
(1) 2330/ 60026D8 :                     		align 4
(1) 2331/ 60026D8 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 2332/ 6004ED8 :                     m_ascii		binclude "system/mars/data/m_ascii.bin"
(1) 2333/ 60066D8 :                     
(1) 2334/ 60066D8 :                     		align 4
(1) 2335/ 60066D8 :                     		include "data/mars_sdram.asm"
(2)    1/ 60066D8 :                     ; ====================================================================
(2)    2/ 60066D8 :                     ; ----------------------------------------------------------------
(2)    3/ 60066D8 :                     ; SH2 SDRAM data
(2)    4/ 60066D8 :                     ; 
(2)    5/ 60066D8 :                     ; This data is stored on SDRAM, always available to use on the 32X
(2)    6/ 60066D8 :                     ; side and can be rewritible, but it is smaller than ROM
(2)    7/ 60066D8 :                     ;
(2)    8/ 60066D8 :                     ; Your palettes, textures, models go here
(2)    9/ 60066D8 :                     ; PWM samples can be used here but those take a lot of space...
(2)   10/ 60066D8 :                     ; use ROM (mars_rom.asm) instead, those are RV-protected on SH2
(2)   11/ 60066D8 :                     ; ----------------------------------------------------------------
(2)   12/ 60066D8 :                     
(2)   13/ 60066D8 :                     	align 4
(2)   14/ 60066D8 :                     
(2)   15/ 60066D8 :                     ; --------------------------------------------------------
(2)   16/ 60066D8 :                     ; Models
(2)   17/ 60066D8 :                     ; --------------------------------------------------------
(2)   18/ 60066D8 :                     
(2)   19/ 60066D8 :                     	include "data/mars/objects/mdl/test/head.asm"
(3)    1/ 60066D8 :                     MarsObj_test:
(3)    2/ 60066D8 : 0050 002A           		dc.w 80,42
(3)    3/ 60066DC : 0600 66EC 0600 68E4 		dc.l .vert,.face,.vrtx,.mtrl
                    0600 6D44 0600 6E44 
(3)    4/ 60066EC :                     .vert:		binclude "data/mars/objects/mdl/test/vert.bin"
(3)    5/ 60068E4 :                     .face:		binclude "data/mars/objects/mdl/test/face.bin"
(3)    6/ 6006D44 :                     .vrtx:		binclude "data/mars/objects/mdl/test/vrtx.bin"
(3)    7/ 6006E44 :                     .mtrl:		include "data/mars/objects/mdl/test/mtrl.asm"
(4)    1/ 6006E44 : 020E 087C           	 dc.l Textr_test_yui
(4)    2/ 6006E48 : 01F4                	 dc.w 500
(4)    3/ 6006E4A : 0000                	 dc.w 0
(4)    4/ 6006E4C :                     
(3)    8/ 6006E4C :                     		align 4
(2)   20/ 6006E4C :                     
(1) 2336/ 6006E4C :                     
(1) 2337/ 6006E4C :                     ; ====================================================================
(1) 2338/ 6006E4C :                     ; ----------------------------------------------------------------
(1) 2339/ 6006E4C :                     ; MARS SH2 RAM
(1) 2340/ 6006E4C :                     ; ----------------------------------------------------------------
(1) 2341/ 6006E4C :                     
(1) 2342/ 6006E4C :                     		align $10
(1) 2343/ 6006E50 :                     SH2_RAM:
(1) 2344/ 6006E50 : (MACRO)             		struct SH2_RAM|TH
(1) 2344/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2344/   48230 :                                     dephase
(1) 2344/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2344/26006E50 :                                     phase SH2_RAM|TH
(1) 2351/26006E50 :                     MarsRam_System		ds.b (sizeof_marssys-MarsRam_System)
(1) 2352/26007C90 :                     MarsRam_Sound		ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 2353/26008010 :                     MarsRam_Video		ds.b (sizeof_marsvid-MarsRam_Video)
(1) 2354/26028010 :                     sizeof_marsram		ds.l 0
(1) 2356/26028010 :                     
(1) 2357/26028010 :                     .here:
(1) 2361/26028010 : (MACRO)             		finish
(1) 2361/26006E50 :                                     !org GLBL_LASTORG
(1) 2361/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2362/ 6006E50 :                     
(1) 2363/ 6006E50 :                     ; ====================================================================
(1) 2364/ 6006E50 :                     ; ----------------------------------------------------------------
(1) 2365/ 6006E50 :                     ; MARS Sound RAM
(1) 2366/ 6006E50 :                     ; ----------------------------------------------------------------
(1) 2367/ 6006E50 :                     
(1) 2368/ 6006E50 : (MACRO)             			struct MarsRam_Sound
(1) 2368/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2368/   48230 :                                     dephase
(1) 2368/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2368/26007C90 :                                     phase MARSRAM_SOUND
(1) 2369/26007C90 :                     MarsSnd_PwmCache	ds.b $80*MAX_PWMCHNL
(1) 2370/26008010 :                     sizeof_marssnd		ds.l 0
(1) 2371/26008010 : (MACRO)             			finish
(1) 2371/26007C90 :                                     !org GLBL_LASTORG
(1) 2371/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2372/ 6006E50 :                     
(1) 2373/ 6006E50 :                     ; ====================================================================
(1) 2374/ 6006E50 :                     ; ----------------------------------------------------------------
(1) 2375/ 6006E50 :                     ; MARS Video RAM
(1) 2376/ 6006E50 :                     ;
(1) 2377/ 6006E50 :                     ; RAM_Mars_ScrnBuff is recycled for all pseudo-screen modes,
(1) 2378/ 6006E50 :                     ; check MAX_SCRNBUFF to set the maximum size.
(1) 2379/ 6006E50 :                     ; ----------------------------------------------------------------
(1) 2380/ 6006E50 :                     
(1) 2381/ 6006E50 : (MACRO)             			struct MarsRam_Video
(1) 2381/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2381/   48230 :                                     dephase
(1) 2381/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2381/26008010 :                                     phase MARSRAM_VIDEO
(1) 2382/26008010 :                     RAM_Mars_ScrnBuff	ds.b MAX_SCRNBUFF			; Single buffer for all screen modes
(1) 2383/26028010 :                     sizeof_marsvid		ds.l 0
(1) 2384/26028010 : (MACRO)             			finish
(1) 2384/26008010 :                                     !org GLBL_LASTORG
(1) 2384/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2385/ 6006E50 :                     
(1) 2386/ 6006E50 :                     ; --------------------------------------------------------
(1) 2387/ 6006E50 :                     ; per-screen RAM
(1) 2388/ 6006E50 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2388/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2388/   48230 :                                     dephase
(1) 2388/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2388/26008010 :                                     phase RAM_MARS_SCRNBUFF
(1) 2389/26008010 :                     RAM_Mars_PixlScroll	ds.b (320+16)*(240+16)
(1) 2390/2601D010 :                     RAM_Mars_HudDisplay	ds.b 320*32
(1) 2391/2601F810 :                     end_scrn02		ds.l 0
(1) 2392/2601F810 : (MACRO)             			finish
(1) 2392/26008010 :                                     !org GLBL_LASTORG
(1) 2392/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2393/ 6006E50 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2393/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2393/   48230 :                                     dephase
(1) 2393/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2393/26008010 :                                     phase RAM_MARS_SCRNBUFF
(1) 2394/26008010 :                     RAM_SCRN03_FILLER	ds.l 1
(1) 2395/26008014 :                     sizeof_scrn03		ds.l 0
(1) 2396/26008014 : (MACRO)             			finish
(1) 2396/26008010 :                                     !org GLBL_LASTORG
(1) 2396/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2397/ 6006E50 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2397/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2397/   48230 :                                     dephase
(1) 2397/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2397/26008010 :                                     phase RAM_MARS_SCRNBUFF
(1) 2398/26008010 :                     RAM_Mars_SVdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ		; Sprites / Polygon pieces
(1) 2399/2600FE10 :                     RAM_Mars_SVdpDrwList_e	ds.l 0					; (END point label)
(1) 2400/2600FE10 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES
(1) 2401/26018A10 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES
(1) 2402/26021610 :                     RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS
(1) 2403/26021730 :                     RAM_Mars_ObjCamera	ds.b sizeof_camera		; 3D Camera buffer
(1) 2404/26021748 :                     RAM_Mars_PlgnList_0	ds.l 2*MAX_FACES		; polygondata, Zpos
(1) 2405/26022B48 :                     RAM_Mars_PlgnList_1	ds.l 2*MAX_FACES
(1) 2406/26023F48 :                     RAM_Mars_PlgnNum_0	ds.l 1				; Number of polygons to process
(1) 2407/26023F4C :                     RAM_Mars_PlgnNum_1	ds.l 1
(1) 2408/26023F50 :                     sizeof_scrn04		ds.l 0
(1) 2409/26023F50 : (MACRO)             			finish
(1) 2409/26008010 :                                     !org GLBL_LASTORG
(1) 2409/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2419/ 6006E50 :                     
(1) 2420/ 6006E50 :                     ; ====================================================================
(1) 2421/ 6006E50 :                     ; ----------------------------------------------------------------
(1) 2422/ 6006E50 :                     ; MARS System RAM
(1) 2423/ 6006E50 :                     ; ----------------------------------------------------------------
(1) 2424/ 6006E50 :                     
(1) 2425/ 6006E50 : (MACRO)             			struct MarsRam_System
(1) 2425/ 6006E50 : =$6006E50           GLBL_LASTPC     set *
(1) 2425/   48230 :                                     dephase
(1) 2425/   48230 : =$48230             GLBL_LASTORG    set *
(1) 2425/26006E50 :                                     phase MARSRAM_SYSTEM
(1) 2426/26006E50 :                     RAM_Mars_DreqDma	ds.b sizeof_dreq	; DREQ data recieved from Genesis in DMA ***DO NOT READ FROM HERE***
(1) 2427/260074F0 :                     RAM_Mars_DreqRead	ds.b sizeof_dreq	; Copy of DREQ for reading.
(1) 2428/26007B90 :                     RAM_Mars_Global		ds.l sizeof_MarsGbl	; gbr values go here
(1) 2429/26007C90 :                     sizeof_marssys		ds.l 0
(1) 2430/26007C90 : (MACRO)             			finish
(1) 2430/26006E50 :                                     !org GLBL_LASTORG
(1) 2430/ 6006E50 :                                     phase GLBL_LASTPC
(1) 2431/ 6006E50 :                     
(1) 2432/ 6006E50 :                     ; ====================================================================
(1) 2433/ 6006E50 :                     
     173/ 6006E50 :                     		cpu 68000
     174/ 6006E50 :                     		padding off
     175/   48230 :                     		dephase
     176/   48230 :                     MARS_RAMDATA_E:
     177/   48230 :                     		align 4
     178/   48230 :                     
     179/   48230 :                     ; ====================================================================
     180/   48230 :                     ; --------------------------------------------------------
     181/   48230 :                     ; 32X data for SH2's ROM view
     182/   48230 :                     ; This section will be gone if RV=1
     183/   48230 :                     ; --------------------------------------------------------
     184/   48230 :                     
     185/ 2048230 :                     		phase CS1+*
     186/ 2048230 :                     		align 4
     187/ 2048230 :                     		include "data/mars_rom.asm"
(1)    1/ 2048230 :                     ; ====================================================================
(1)    2/ 2048230 :                     ; ----------------------------------------------------------------
(1)    3/ 2048230 :                     ; SH2 ROM data
(1)    4/ 2048230 :                     ;
(1)    5/ 2048230 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 2048230 :                     ; BUT keep in mind that this entire section will be gone
(1)    7/ 2048230 :                     ; if the Genesis performs DMA-to-VDP Transfers
(1)    8/ 2048230 :                     ; which requires RV=1 (Revert ROM to original position)
(1)    9/ 2048230 :                     ; ***EMULATORS IGNORE THIS LIMITATION***
(1)   10/ 2048230 :                     ;
(1)   11/ 2048230 :                     ; Only access here on these conditions:
(1)   12/ 2048230 :                     ; - Stop all tracks that use PWM samples
(1)   13/ 2048230 :                     ; - If you wanna keep any tracks active: set 1 to marsBlock
(1)   14/ 2048230 :                     ;   in the Z80 driver, all tracks will continue playing using
(1)   15/ 2048230 :                     ;   only the PSG and FM instruments
(1)   16/ 2048230 :                     ;   (TODO: check how it peforms)
(1)   17/ 2048230 :                     ;
(1)   18/ 2048230 :                     ; The PWM samples are safe to use with the implementation
(1)   19/ 2048230 :                     ; of a sample-backup routine that the 68K requests before
(1)   20/ 2048230 :                     ; doing DMA
(1)   21/ 2048230 :                     ; ----------------------------------------------------------------
(1)   22/ 2048230 :                     
(1)   23/ 2048230 :                     	align 4
(1)   24/ 2048230 :                     
(1)   25/ 2048230 :                     ; --------------------------------------------------------
(1)   26/ 2048230 :                     ; PWM samples
(1)   27/ 2048230 :                     ; --------------------------------------------------------
(1)   28/ 2048230 :                     
(1)   29/ 2048230 :                     	include "sound/smpl_pwm.asm"
(2)    1/ 2048230 :                     ; ====================================================================
(2)    2/ 2048230 :                     ; PWM samples
(2)    3/ 2048230 :                     ;
(2)    4/ 2048230 :                     ; For SH2's visible areas: ROM ($02000000) or SDRAM ($06000000)
(2)    5/ 2048230 :                     ;
(2)    6/ 2048230 :                     ; - SDRAM is safest but it has very LOW storage
(2)    7/ 2048230 :                     ; - ROM area can use all the 4 Megabytes of storage, BUT when the
(2)    8/ 2048230 :                     ; RV bit is set: the sample data will be lost. Luckily
(2)    9/ 2048230 :                     ; a "Wave-backup" feature is implemented to copy a small
(2)   10/ 2048230 :                     ; amount of bytes of the sample data into a safe place for playback
(2)   11/ 2048230 :                     ; while RV bit is active.
(2)   12/ 2048230 :                     ;
(2)   13/ 2048230 :                     ; Do note that if the RV bit stays active too long it will ran out of
(2)   14/ 2048230 :                     ; backup data and the sample will play trash bytes.
(2)   15/ 2048230 :                     ;
(2)   16/ 2048230 :                     ; SAMPLE DATA IS 8-BIT WAV, THIS INCLUDES STEREO SAMPLES
(2)   17/ 2048230 :                     ; ====================================================================
(2)   18/ 2048230 :                     
(2)   19/ 2048230 :                     	align 4		; First align
(2)   20/ 2048230 :                     SmpIns_Bell_Ice:
(2)   21/ 2048230 : (MACRO)             	gSmpHead .end-.start,0
(2)   21/ 2048230 : 263B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   21/ 2048233 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   22/ 2048236 :                     .start:	binclude "sound/instr/smpl/bell_ice.wav",$2C
(2)   23/ 204BD5A :                     	align 4
(2)   24/ 204BD5C :                     .end:
(2)   25/ 204BD5C :                     
(2)   26/ 204BD5C :                     SmpIns_Brass1_Hi:
(2)   27/ 204BD5C : (MACRO)             	gSmpHead .end-.start,0
(2)   27/ 204BD5C : C67B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   27/ 204BD5F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   28/ 204BD62 :                     .start:	binclude "sound/instr/smpl/brass1_hi.wav",$2C
(2)   29/ 2053926 :                     	align 4
(2)   30/ 2053928 :                     .end:
(2)   31/ 2053928 :                     
(2)   32/ 2053928 :                     SmpIns_Brass1_Low:
(2)   33/ 2053928 : (MACRO)             	gSmpHead .end-.start,0
(2)   33/ 2053928 : C67B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   33/ 205392B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   34/ 205392E :                     .start:	binclude "sound/instr/smpl/brass1_low.wav",$2C
(2)   35/ 205B4F2 :                     	align 4
(2)   36/ 205B4F4 :                     .end:
(2)   37/ 205B4F4 :                     
(2)   38/ 205B4F4 :                     SmpIns_Forest_1:
(2)   39/ 205B4F4 : (MACRO)             	gSmpHead .end-.start,0
(2)   39/ 205B4F4 : E648 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   39/ 205B4F7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   40/ 205B4FA :                     .start:	binclude "sound/instr/smpl/forest1.wav",$2C
(2)   41/ 205FDE0 :                     	align 4
(2)   42/ 205FDE0 :                     .end:
(2)   43/ 205FDE0 :                     
(2)   44/ 205FDE0 :                     SmpIns_Kick_jam:
(2)   45/ 205FDE0 : (MACRO)             	gSmpHead .end-.start,0
(2)   45/ 205FDE0 : C60A 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   45/ 205FDE3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   46/ 205FDE6 :                     .start:	binclude "sound/instr/smpl/kick_jam.wav",$2C
(2)   47/ 20608AA :                     	align 4
(2)   48/ 20608AC :                     .end:
(2)   49/ 20608AC :                     
(2)   50/ 20608AC :                     SmpIns_Snare_jam:
(2)   51/ 20608AC : (MACRO)             	gSmpHead .end-.start,0
(2)   51/ 20608AC : 6609 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   51/ 20608AF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   52/ 20608B2 :                     .start:	binclude "sound/instr/smpl/snare_jam.wav",$2C
(2)   53/ 2061216 :                     	align 4
(2)   54/ 2061218 :                     .end:
(2)   55/ 2061218 :                     
(2)   56/ 2061218 :                     SmpIns_SnrTom_1:
(2)   57/ 2061218 : (MACRO)             	gSmpHead .end-.start,0
(2)   57/ 2061218 : A214 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   57/ 206121B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   58/ 206121E :                     .start:	binclude "sound/instr/smpl/snrtom_1.wav",$2C
(2)   59/ 20626BE :                     	align 4
(2)   60/ 20626C0 :                     .end:
(2)   61/ 20626C0 :                     
(2)   62/ 20626C0 :                     SmpIns_PIANO_1:
(2)   63/ 20626C0 : (MACRO)             	gSmpHead .end-.start,0
(2)   63/ 20626C0 : 1647 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   63/ 20626C3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   64/ 20626C6 :                     .start:	binclude "sound/instr/smpl/PIANO__1.wav",$2C
(2)   65/ 2066DDA :                     	align 4
(2)   66/ 2066DDC :                     .end:
(2)   67/ 2066DDC :                     
(2)   68/ 2066DDC :                     SmpIns_SSTR162A:
(2)   69/ 2066DDC : (MACRO)             	gSmpHead .end-.start,0
(2)   69/ 2066DDC : 6627 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   69/ 2066DDF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   70/ 2066DE2 :                     .start:	binclude "sound/instr/smpl/SSTR162A.wav",$2C
(2)   71/ 2069546 :                     	align 4
(2)   72/ 2069548 :                     .end:
(2)   73/ 2069548 :                     
(2)   74/ 2069548 :                     SmpIns_Nadie:
(2)   75/ 2069548 : (MACRO)             	gSmpHead .end-.start,0
(2)   75/ 2069548 : 7668 02                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   75/ 206954B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   76/ 206954E :                     .start:	binclude "sound/instr/smpl/nadie_st.wav",$2C
(2)   77/ 208FDC2 :                     	align 4
(2)   78/ 208FDC4 :                     .end:
(2)   79/ 208FDC4 :                     
(2)   80/ 208FDC4 :                     SmpIns_PKick:
(2)   81/ 208FDC4 : (MACRO)             	gSmpHead .end-.start,0
(2)   81/ 208FDC4 : 7607 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   81/ 208FDC7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   82/ 208FDCA :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(2)   83/ 209053E :                     	align 4
(2)   84/ 2090540 :                     .end:
(2)   85/ 2090540 :                     
(2)   86/ 2090540 :                     SmpIns_PTom:
(2)   87/ 2090540 : (MACRO)             	gSmpHead .end-.start,0
(2)   87/ 2090540 : BA0B 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   87/ 2090543 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   88/ 2090546 :                     .start:	binclude "sound/instr/smpl/sauron_tom.wav",$2C
(2)   89/ 2091100 :                     	align 4
(2)   90/ 2091100 :                     .end:
(2)   91/ 2091100 :                     
(2)   92/ 2091100 :                     SmpIns_Piano:
(2)   93/ 2091100 : (MACRO)             	gSmpHead .end-.start,0
(2)   93/ 2091100 : F661 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   93/ 2091103 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   94/ 2091106 :                     .start:	binclude "sound/instr/smpl/piano_1.wav",$2C
(2)   95/ 20972FC :                     	align 4
(2)   96/ 20972FC :                     .end:
(2)   97/ 20972FC :                     
(2)   98/ 20972FC :                     
(1)   30/ 20972FC :                     
(1)   31/ 20972FC :                     ; --------------------------------------------------------
(1)   32/ 20972FC :                     ; Map data
(1)   33/ 20972FC :                     ; --------------------------------------------------------
(1)   34/ 20972FC :                     
(1)   35/ 20972FC :                     		align 4
(1)   36/ 20972FC :                     ; MapHead_M:	binclude "data/md/maps/level0/head_m.bin"
(1)   37/ 20972FC :                     ; 		align 4
(1)   38/ 20972FC :                     MapBlk_M:	binclude "data/md/maps/level0/art_m.bin"
(1)   39/ 20A73FC :                     		align 4
(1)   40/ 20A73FC :                     MapFg_M:	binclude "data/md/maps/level0/fg_main.bin"
(1)   41/ 20A787C :                     		align 4
(1)   42/ 20A787C :                     
(1)   43/ 20A787C :                     ; --------------------------------------------------------
(1)   44/ 20A787C :                     ; Graphics
(1)   45/ 20A787C :                     ; --------------------------------------------------------
(1)   46/ 20A787C :                     
(1)   47/ 20A787C :                     	include "data/mars/graphics.asm"
(2)    1/ 20A787C :                     ; ====================================================================
(2)    2/ 20A787C :                     ; ----------------------------------------------------------------
(2)    3/ 20A787C :                     ; Put your 32X graphics here, indexed or direct
(2)    4/ 20A787C :                     ;
(2)    5/ 20A787C :                     ; These are located on the SH2's ROM area, this will be gone
(2)    6/ 20A787C :                     ; if RV is set to 1
(2)    7/ 20A787C :                     ;
(2)    8/ 20A787C :                     ; Labels MUST be aligned by 4
(2)    9/ 20A787C :                     ; ----------------------------------------------------------------
(2)   10/ 20A787C :                     
(2)   11/ 20A787C :                     		align 4
(2)   12/ 20A787C :                     TESTMARS_BG:
(2)   13/ 20A787C :                     		binclude "data/mars/tests/test_art.bin"
(2)   14/ 20C787C :                     		align 4
(2)   15/ 20C787C :                     ; TESTMARS_BG2:
(2)   16/ 20C787C :                     ; 		binclude "data/mars/tests/test2_art.bin"
(2)   17/ 20C787C :                     ; 		align 4
(2)   18/ 20C787C :                     TestMars_Yui:
(2)   19/ 20C787C :                     		binclude "data/mars/tests/yui_mars_art.bin"
(2)   20/ 20E087C :                     		align 4
(2)   21/ 20E087C :                     
(2)   22/ 20E087C :                     ; TESTMARS_DIRECT_1:
(2)   23/ 20E087C :                     ; 		binclude "data/mars/tests/direct/frame0_art.bin"
(2)   24/ 20E087C :                     ; 		align 4
(2)   25/ 20E087C :                     ; TESTMARS_DIRECT_2:
(2)   26/ 20E087C :                     ; 		binclude "data/mars/tests/direct/frame1_art.bin"
(2)   27/ 20E087C :                     ; 		align 4
(2)   28/ 20E087C :                     ; TESTMARS_DIRECT_3:
(2)   29/ 20E087C :                     ; 		binclude "data/mars/tests/direct/frame2_art.bin"
(2)   30/ 20E087C :                     ; 		align 4
(2)   31/ 20E087C :                     
(2)   32/ 20E087C :                     Textr_test_yui:
(2)   33/ 20E087C :                     		binclude "data/mars/objects/mtrl/yui_art.bin"
(2)   34/ 21328FC :                     		align 4
(2)   35/ 21328FC :                     ; Textr_linkoot:
(2)   36/ 21328FC :                     ; 		binclude "data/mars/objects/mtrl/link_art.bin"
(2)   37/ 21328FC :                     ; 		align 4
(2)   38/ 21328FC :                     
(2)   39/ 21328FC :                     SuperSpr_Test:
(2)   40/ 21328FC :                     	binclude "data/mars/tests/sprites/sprites_art.bin"
(2)   41/ 21358FC :                     	align 4
(2)   42/ 21358FC :                     
(1)   48/ 21358FC :                     
     188/  1358FC :                     		dephase
     189/  1358FC :                     
     190/  1358FC :                     ; ====================================================================
     191/  1358FC :                     ; ---------------------------------------------
     192/  1358FC :                     ; End
     193/  1358FC :                     ; ---------------------------------------------
     194/  1358FC :                     
     195/  1358FC :                     ROM_END:
     196/  1358FC :                     		align $8000
     197/  138000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 8/5/2022 2:11:47


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ART_LEVEL0 :                 40000 C |  ART_LEVEL0_E :               413E0 C |
 ASCII_FONT :                 38000 C |  ASCII_FONT_E :               39000 C |
 ASCII_PAL :                 FF02BC C | *ASCII_PAL_E :               FF02DC C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
 BITBGON :                        7 - | *BITCLICKL :                      1 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      0 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
 BITDRWD :                        2 - |  BITDRWL :                        1 - |
 BITDRWR :                        0 - |  BITDRWU :                        3 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - |  BITJOYA :                        6 - |
 BITJOYB :                        4 - |  BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - |  BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
 BITJOYX :                        A - |  BITJOYY :                        9 - |
*BITJOYZ :                        8 - |  BITMAPMD :                       1 - |
 BITMARSBG :                      6 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BRANCHEXT :                      0 - |
 CACHE_MSTR_PLGN :          6001774 C |
 CACHE_MSTR_PLGN.EXIT :                                    FFFFFFFFC000004C C |
 CACHE_MSTR_PLGN.ON_CLR :                                  FFFFFFFFC0000046 C |
 CACHE_MSTR_PLGN.WAIT_FB :                                 FFFFFFFFC0000016 C |
 CACHE_MSTR_PLGN_E :        6001F40 C |  CACHE_MSTR_SCRL :          60012DC C |
 CACHE_MSTR_SCRL.DRAW_LR :                                 FFFFFFFFC0000028 C |
 CACHE_MSTR_SCRL.DRAW_UD :                                 FFFFFFFFC00000BC C |
 CACHE_MSTR_SCRL.EX_LINE :                                 FFFFFFFFC0000086 C |
*CACHE_MSTR_SCRL.FINISH :                                  FFFFFFFFC000001A C |
 CACHE_MSTR_SCRL.LNE_SZ :                                  FFFFFFFFC000006E C |
 CACHE_MSTR_SCRL.NEXT_WD :                                 FFFFFFFFC00000C0 C |
 CACHE_MSTR_SCRL.X_LOOP :                                  FFFFFFFFC0000072 C |
 CACHE_MSTR_SCRL.Y_LOOP :                                  FFFFFFFFC0000068 C |
 CACHE_MSTR_SCRL_E :        6001774 C |  CACHE_SLAVE :              6001F40 C |
 CACHE_SLAVE_E :            60026D8 C |  CACH_BKUPPNT_L :  FFFFFFFFC000072C C |
 CACH_BKUPPNT_S :  FFFFFFFFC000074C C |  CACH_BKUPS_L :    FFFFFFFFC000074C C |
 CACH_BKUPS_S :    FFFFFFFFC0000760 C |  CACH_BKUP_LB :    FFFFFFFFC0000784 C |
 CACH_BKUP_LPZ :   FFFFFFFFC00007B0 C | *CACH_BKUP_LT :    FFFFFFFFC0000770 C |
 CACH_BKUP_S :     FFFFFFFFC00007B0 C |  CACH_BKUP_SPZ :   FFFFFFFFC00007CC C |
 CACH_BKUP_SPZ.END :                                       FFFFFFFFC00007CC C |
 CACH_BLKBACKUP_L :                                        FFFFFFFFC0000420 C |
 CACH_BLKBACKUP_S :                                        FFFFFFFFC0000438 C |
 CACH_CLRLINES :   FFFFFFFFC00006D4 C |  CACH_CURRPLYGN :  FFFFFFFFC0000760 C |
 CACH_CURRPLYGN.END :                                      FFFFFFFFC0000798 C |
 CACH_DDA_LAST :   FFFFFFFFC00006E8 C |  CACH_DDA_SRC :    FFFFFFFFC00006F8 C |
 CACH_DDA_SRC_L :  FFFFFFFFC0000718 C |  CACH_DDA_SRC_R :  FFFFFFFFC0000728 C |
 CACH_DDA_TOP :    FFFFFFFFC00006D8 C |  CACH_DRAWTIMERS : FFFFFFFFC0000470 C |
 CACH_FBDATA :     FFFFFFFFC0000480 C |  CACH_FBPOS :      FFFFFFFFC0000484 C |
 CACH_FBPOS_Y :    FFFFFFFFC0000488 C |  CACH_INREAD_L :   FFFFFFFFC0000418 C |
 CACH_INREAD_S :   FFFFFFFFC0000420 C |  CACH_INTRL_H :    FFFFFFFFC0000490 C |
 CACH_INTRL_SIZE : FFFFFFFFC0000494 C |
 CACH_INTRL_SIZE.END :                                     FFFFFFFFC0000498 C |
 CACH_INTRL_W :    FFFFFFFFC000048C C |  CACH_LNDRW_L :    FFFFFFFFC0000738 C |
 CACH_LNDRW_S :    FFFFFFFFC0000770 C |  CACH_WDBACKUP_L : FFFFFFFFC0000438 C |
 CACH_WDBACKUP_S : FFFFFFFFC0000470 C |  CACH_WDGBUFFRD :  FFFFFFFFC00003F8 C |
 CACH_WDGBUFFWR :  FFFFFFFFC0000418 C |  CAM_X_POS :                      0 C |
 CAM_X_ROT :                      C C |  CAM_Y_POS :                      4 C |
 CAM_Y_ROT :                     10 C |  CAM_Z_POS :                      8 C |
 CAM_Z_ROT :                     14 C | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CHIP_ENV :                     FB2 C |
 CHIP_ENV.ATKEND :             1087 C | *CHIP_ENV.ATKZERO :            108A C |
 CHIP_ENV.CHK2 :               1090 C |  CHIP_ENV.CHK4 :               10C5 C |
 CHIP_ENV.CKOF :                FE0 C |  CHIP_ENV.CKON :                FFD C |
 CHIP_ENV.COPYOPS :            11ED C |  CHIP_ENV.COPYOPS3 :           1279 C |
 CHIP_ENV.COPY_1 :             124D C | *CHIP_ENV.DECTMR :             1094 C |
 CHIP_ENV.DKADD :              10AE C |  CHIP_ENV.DKSAV :              10B6 C |
 CHIP_ENV.DKYEND :             10BB C |  CHIP_ENV.DO_VOL :             12E7 C |
 CHIP_ENV.ENVPROC :            1058 C |  CHIP_ENV.FM_CHNL :            1174 C |
*CHIP_ENV.FM_CHNLVOL :         12A5 C |  CHIP_ENV.FM_INSUPD :          123C C |
 CHIP_ENV.FM_INS_EX :          129F C |  CHIP_ENV.FM_KEYCUT :          1207 C |
 CHIP_ENV.FM_KEYOFF :          121C C | *CHIP_ENV.FM_PANSET :          1229 C |
 CHIP_ENV.FM_PANUPD :          1223 C |  CHIP_ENV.FM_VOLUPD :          12A1 C |
 CHIP_ENV.KILLENV :            10DB C |  CHIP_ENV.NEXTFM_1 :           111D C |
 CHIP_ENV.NOMIDC :             1132 C |  CHIP_ENV.NOTFM3 :             11F8 C |
 CHIP_ENV.NOUPD :              1107 C |  CHIP_ENV.NSKIP :              104F C |
 CHIP_ENV.PSTEAL :             103E C |  CHIP_ENV.REQ_DAC :            1161 C |
 CHIP_ENV.REQ_PITCH :          116E C |  CHIP_ENV.SETHAT :             1049 C |
 CHIP_ENV.TNMODE :             1033 C |  CHIP_ENV.VEDLP :              10E3 C |
 CHIP_ENV.VLMUCH :             10F8 C |  CHIP_ENV.VLOOP :               FBD C |
 CHIP_ENV.VMUCH :              12F1 C |  CHIP_ENV.WRFREQ :             100F C |
 CHNL_CHIP :                      0 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     1 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
 CMDINTCLR :                     1A - |  CMDIRQ_ON :                      2 - |
 COM :                            0 - |  COMM0 :                         20 - |
*COMM1 :                         21 - |  COMM10 :                        2A - |
*COMM11 :                        2B - |  COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - |  COMM2 :                         22 - |
*COMM3 :                         23 - |  COMM4 :                         24 - |
*COMM5 :                         25 - |  COMM6 :                         26 - |
*COMM7 :                         27 - |  COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                   1E00 C |
 COMMZREAD :                     1E C |  COMMZROMBLK :                   1C C |
 COMMZROMRD :                    1D C |  COMMZWRITE :                    1F C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFA702 - |
*CONTROLLER_2 :    FFFFFFFFFFFFA712 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - |  CURRINSDATA :                 1E40 C |
 CURRINSPOS :                  1E44 C |  CURRTBLPOS :                  1E42 C |
 CURRTICKBITS :                  2F C |  CURRTRKCTRL :                 1E46 C |
 CYCLE :                         32 - |  DACCOM :                      17C6 C |
*DACINS_KICK :               91F342 C |  DACINS_KICK.END :           920330 C |
 DACINS_KICK.START :         91F348 C |  DACINS_NADIE :              920330 C |
 DACINS_NADIE.END :          92EAF4 C |  DACINS_NADIE.START :        920336 C |
 DACINS_SNARE_LOBO :         91877A C |  DACINS_SNARE_LOBO.END :     9198A4 C |
 DACINS_SNARE_LOBO.START :   918780 C |  DACINS_SNARE_MAGN :         91DF68 C |
 DACINS_SNARE_MAGN.END :     91F342 C |  DACINS_SNARE_MAGN.START :   91DF6E C |
*DACINS_SNARE_SCD :          91C56E C |  DACINS_SNARE_SCD.END :      91DF68 C |
 DACINS_SNARE_SCD.START :    91C574 C |  DACINS_WEGOT_CRASH :        9198A4 C |
 DACINS_WEGOT_CRASH.END :    91C56E C |  DACINS_WEGOT_CRASH.START :  9198AA C |
 DACINS_WEGOT_KICK :         918000 C |  DACINS_WEGOT_KICK.END :     91877A C |
 DACINS_WEGOT_KICK.START :   918006 C |  DAC_FILL :                      20 C |
 DAC_FIRSTFILL :               136F C |  DAC_ME :                         8 C |
 DAC_OFF :                     1326 C |  DAC_ON :                      1311 C |
 DAC_PLAY :                    133B C |  DAC_REFILL :                  1373 C |
 DAC_REFILL.DAC_OVER :         13C1 C |  DAC_REFILL.FDF7 :             1433 C |
 DAC_REFILL.FDF72 :            13EC C |  DAC_REFILL.FDFRETURN :        1436 C |
*DAC_REFILL.KEEPCNTR :         139A C | *DATE :                    8/5/2022 - |
 DDACCNTR :                    1E5A C |  DDACFIFOMID :                 1E5D C |
 DDACPNTR :                    1E57 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - |  DREQCTL :                        6 - |
*DREQDEST :                       C - |  DREQFIFO :                      12 - |
 DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DREQ_BGEXBUFF :                200 C |  DREQ_OBJECTS :                 280 C |
 DREQ_PALETTE :                   0 C |  DREQ_SUPERSPR :                3A0 C |
 DRV_LOOP :                      42 C |  DRV_LOOP.CMND_0 :               EE C |
 DRV_LOOP.CMND_TRKPLAY :         F2 C |  DRV_LOOP.CMND_TRKRESUME :      170 C |
 DRV_LOOP.CMND_TRKSTOP :        155 C |  DRV_LOOP.CMND_TRKTEMPO :       18F C |
 DRV_LOOP.CMND_TRKTICKS :       17D C |  DRV_LOOP.LIST :                 AE C |
 DRV_LOOP.NEITHER :              82 C |  DRV_LOOP.NEXT_CMD :             89 C |
 DRV_LOOP.NOBEATS :              6A C |  DRV_LOOP.NOTICKS :              5D C |
 DRWSLD_NEXTPZ :   FFFFFFFFC000036C C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000376 C |
 DRWSLD_NXTLINE :  FFFFFFFFC00002C0 C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC0000302 C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC00002EC C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC00002FC C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC0000310 C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC0000170 C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC0000266 C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC0000226 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC00001FA C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC00001E6 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC00001B4 C |
 DRWSLD_UPDLINE :  FFFFFFFFC0000362 C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC0000280 C |
 DRWTASK_EXIT :    FFFFFFFFC00003AA C |  DRWTASK_RETURN :  FFFFFFFFC000038E C |
 DRWTEX_NEXTPZ :   FFFFFFFFC000029C C | *DRWTSK1_NEWPZ :   FFFFFFFFC00000F4 C |
 DRWTSK1_NEWPZ.INVLD_Y :                                   FFFFFFFFC0000116 C |
 DRWTSK1_NEWPZ.LEN_MAX :                                   FFFFFFFFC0000110 C |
*DRWTSK1_NEWPZ.NO_PZ :                                     FFFFFFFFC000011A C |
 DRWTSK1_NEWPZ.VALID_Y :                                   FFFFFFFFC0000120 C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC00002AC C |
 DRWTSK_SOLIDMODE.WAIT :                                   FFFFFFFFC00002BA C |
 DRWTSK_TEXMODE :  FFFFFFFFC0000150 C |
 DRWTSK_TEXMODE.TEXVALID :                                 FFFFFFFFC000015C C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1B00 C |  END_SCRN02 :              2601F810 C |
*EXTR_3 :                         A C | *EXTR_4 :                         C C |
*EXTR_5 :                         E C | *FALSE :                          0 - |
 FBVRAM_LAST :                1F800 - |  FBVRAM_PATCH :               1D000 - |
*FEN :                            2 - |  FILLDATA :                       8 - |
 FILLLENGTH :                     4 - |  FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FM3REG :                      17BA C |  FMCOM :                       1672 C |
 FMFREQ_LIST :                 143B C |  FMFRQH :                        18 - |
 FMFRQL :                        1E - | *FMINS_AMBIENT_3 :           91351A C |
 FMINS_AMBIENT_DARK :        9134DA C | *FMINS_AMBIENT_SPOOK :       9134FA C |
*FMINS_BANJO_PUY :           9135BA C | *FMINS_BASS_1 :              9132FA C |
 FMINS_BASS_2 :              91331A C | *FMINS_BASS_CALM :           9132DA C |
 FMINS_BASS_CLUB :           91333A C | *FMINS_BASS_DONNA :          91335A C |
*FMINS_BASS_DUCK :           9133FA C |  FMINS_BASS_GROOVE :         91337A C |
 FMINS_BASS_GROOVE_2 :       91339A C | *FMINS_BASS_GROOVE_GEM :     9133BA C |
 FMINS_BASS_ITALO :          9133DA C | *FMINS_BASS_OIL :            91323A C |
 FMINS_BRASS_EUR :           91355A C | *FMINS_BRASS_PUY :           91357A C |
 FMINS_COM :                   16CA C |  FMINS_COM2 :                  16F2 C |
 FMINS_COM3 :                  171A C |  FMINS_COM4 :                  1742 C |
 FMINS_COM5 :                  176A C |  FMINS_COM6 :                  1792 C |
*FMINS_DING_1 :              9135FA C | *FMINS_DING_BASEBALL :       91327A C |
 FMINS_DING_TOY :            91353A C |  FMINS_DRUMKICK_GEM :        91329A C |
*FMINS_FLAUTE_CAVE :         91359A C |  FMINS_FM3_CLOSEDHAT :       9131EA C |
 FMINS_FM3_EXPLOSION :       913212 C |  FMINS_FM3_OPENHAT :         9131C2 C |
 FMINS_HBEAT_TOM :           91363A C | *FMINS_MARIMBA :             9134BA C |
*FMINS_ORGAN_ITO :           91325A C |  FMINS_PIANOM1 :             9132BA C |
 FMINS_PIANO_AQUA :          91341A C |  FMINS_PSYNTH_PLUS :         9135DA C |
*FMINS_TROMBONE_GEM :        91361A C |  FMINS_TRUMPET_1 :           91343A C |
*FMINS_TRUMPET_2 :           91345A C |  FMINS_TRUMPET_CARNIVAL :    91349A C |
*FMINS_TRUMPET_KON :         91347A C |  FMKEYS :                         6 - |
 FMPAN :                         12 - |  FMSPCMODE :                   1E5F C |
 FMVOL :                          C - |  FM_SEND_1 :                   12FB C |
 FM_SEND_2 :                   1306 C |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMABLK_BEMINE :            911826 C |  GEMABLK_MECANO :            90751E C |
 GEMABLK_TEST :              904E0C C |  GEMABLK_TEST2 :             90A2F2 C |
 GEMABLK_TEST3 :             90BF94 C |  GEMAINS_BEMINE :            9130FA C |
 GEMAINS_MECANO :            90A246 C |  GEMAINS_TEST :              906032 C |
 GEMAINS_TEST2 :             90BF38 C |  GEMAINS_TEST3 :             9117A2 C |
 GEMAPAT_BEMINE :            911837 C |  GEMAPAT_MECANO :            90752C C |
 GEMAPAT_TEST :              904E14 C |  GEMAPAT_TEST2 :             90A308 C |
 GEMAPAT_TEST3 :             90BFB2 C |  GEMASFXBLK_BOOM :           904D98 C |
 GEMASFXINS_BOOM :           904DE8 C |  GEMASFXPAT_BOOM :           904D9C C |
*GEMATRKDATA_BEMINE :        91181A C | *GEMATRKDATA_MECANO :        907512 C |
 GEMATRKDATA_NADIE_MARS :    904E00 C | *GEMATRKDATA_NADIE_MD :      90607A C |
 GEMATRKDATA_NADIE_MD.BLK :  906086 C |  GEMATRKDATA_NADIE_MD.INST : 9074CA C |
 GEMATRKDATA_NADIE_MD.PATT : 90608E C | *GEMATRKDATA_SFX :           904D8C C |
*GEMATRKDATA_TEST :          904E00 C | *GEMATRKDATA_TEST2 :         90A2E6 C |
*GEMATRKDATA_TEST3 :         90BF88 C |  GEMA_INIT :                    E3A C |
 GEMA_INIT.SET_IT :             E9E C |  GET_CMDBYTE :                  1B9 C |
 GET_CMDBYTE.GETCBYTEL :        1BC C |  GET_TICK :                     EA8 C |
 GET_TICK.CTNOTICK :            EC5 C |  GET_TRKINDX :                  1A4 C |
 GLBL_LASTORG :               48230 - |  GLBL_LASTPC :              6006E50 - |
 GO_DRWSLD_UPDLINE_TEX :                                   FFFFFFFFC0000146 C |
 GO_DRWTEX_GONXTPZ :                                       FFFFFFFFC000014A C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              FF1678 C | *HINT_DEFAULT.HERE :         FF167A C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - |  INSDATAC_0 :                  1855 C |
 INSDATAC_1 :                  18ED C | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 INT_M_LIST :               60002A4 C |  INT_S_LIST :               60002E4 C |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LCHWIDTH :                      34 - |  LEV :                            4 - |
 LEVEL_PICKMAP :             FF19EC C | *LISTON :                         3 - |
 LIST_VDPREGS :              FF02A8 C |  LITERAL_F_00000000_1 :     6000298 C |
 LITERAL_F_00000001_1 :     600029C C |  LITERAL_F_00000002_1 :     6000494 C |
 LITERAL_F_00000003_1 :     60004A4 C |  LITERAL_F_00000004_1 :     60006D4 C |
 LITERAL_F_00000005_1 :     60006D8 C |  LITERAL_F_00000006_1 :     60006DC C |
 LITERAL_F_00000007_1 :     60006E0 C |  LITERAL_F_00000008_1 :     60006E8 C |
 LITERAL_F_00000009_1 :     60006EC C |  LITERAL_F_0000000A_1 :     6000704 C |
 LITERAL_F_0000000B_1 :     60006F0 C |  LITERAL_F_0000000C_1 :     60006F4 C |
 LITERAL_F_0000000D_1 :     60006F8 C |  LITERAL_F_0000000E_1 :     60006FC C |
 LITERAL_F_0000000F_1 :     6000700 C |  LITERAL_F_00000010_1 :     600078C C |
 LITERAL_F_00000011_1 :     6000938 C |  LITERAL_F_00000012_1 :     6000A1C C |
 LITERAL_F_00000013_1 :     6000A24 C |  LITERAL_F_00000014_1 :     6000B64 C |
 LITERAL_F_00000015_1 :     6000B68 C |  LITERAL_F_00000016_1 :     6000B88 C |
 LITERAL_F_00000017_1 :     6000CA8 C |  LITERAL_F_00000018_1 :     6000CB0 C |
 LITERAL_F_00000019_1 :     6000CB4 C |  LITERAL_F_0000001A_1 :     6000CB8 C |
 LITERAL_F_0000001B_1 :     6000CBC C |  LITERAL_F_0000001C_1 :     6000CC0 C |
 LITERAL_F_0000001D_1 :     6000D5C C |  LITERAL_F_0000001E_1 :     6000E14 C |
 LITERAL_F_0000001F_1 :     6000E20 C |  LITERAL_F_00000020_1 :     6000E24 C |
 LITERAL_F_00000021_1 :     6000E28 C |  LITERAL_F_00000022_1 :     6000FBC C |
 LITERAL_F_00000023_1 :     6001008 C |  LITERAL_F_00000024_1 :     6000FC0 C |
 LITERAL_F_00000025_1 :     600100A C |  LITERAL_F_00000026_1 :     6000FD8 C |
 LITERAL_F_00000027_1 :     6000FDC C |  LITERAL_F_00000028_1 :     6001012 C |
 LITERAL_F_00000029_1 :     6000FE0 C |  LITERAL_F_0000002A_1 :     6001014 C |
 LITERAL_F_0000002B_1 :     6000FE4 C |  LITERAL_F_0000002C_1 :     6000FE8 C |
 LITERAL_F_0000002D_1 :     6000FEC C |  LITERAL_F_0000002E_1 :     6000FF0 C |
 LITERAL_F_0000002F_1 :     6000FF4 C |  LITERAL_F_00000030_1 :     6000FFC C |
 LITERAL_F_00000031_1 :     6001118 C |  LITERAL_F_00000032_1 :     6001158 C |
 LITERAL_F_00000033_1 :     6001128 C |  LITERAL_F_00000034_1 :     600112C C |
 LITERAL_F_00000035_1 :     6001130 C |  LITERAL_F_00000036_1 :     6001134 C |
 LITERAL_F_00000037_1 :     6001138 C |  LITERAL_F_00000038_1 :     6001144 C |
 LITERAL_F_00000039_1 :     6001148 C |  LITERAL_F_0000003A_1 :     600114C C |
 LITERAL_F_0000003B_1 :     6001150 C |  LITERAL_F_0000003C_1 :     6001154 C |
 LITERAL_F_0000003D_1 :     6001228 C |  LITERAL_F_0000003E_1 :     6001234 C |
 LITERAL_F_0000003F_1 :     6001258 C |  LITERAL_F_00000040_1 :     600123C C |
 LITERAL_F_00000041_1 :     60012CC C |  LITERAL_F_00000042_1 :     60012D4 C |
 LITERAL_F_00000043_1 :                                    FFFFFFFFC00000D4 C |
 LITERAL_F_00000044_1 :                                    FFFFFFFFC00000D8 C |
 LITERAL_F_00000045_1 :                                    FFFFFFFFC00000DC C |
 LITERAL_F_00000046_1 :                                    FFFFFFFFC00000E0 C |
 LITERAL_F_00000047_1 :                                    FFFFFFFFC000020C C |
 LITERAL_F_00000048_1 :                                    FFFFFFFFC0000210 C |
 LITERAL_F_00000049_1 :                                    FFFFFFFFC0000214 C |
 LITERAL_F_0000004A_1 :                                    FFFFFFFFC0000218 C |
 LITERAL_F_0000004B_1 :                                    FFFFFFFFC0000354 C |
 LITERAL_F_0000004C_1 :                                    FFFFFFFFC0000358 C |
 LITERAL_F_0000004D_1 :                                    FFFFFFFFC000035C C |
 LITERAL_F_0000004E_1 :                                    FFFFFFFFC0000360 C |
 LITERAL_F_0000004F_1 :                                    FFFFFFFFC0000364 C |
 LITERAL_F_00000050_1 :                                    FFFFFFFFC000036C C |
 LITERAL_F_00000051_1 :                                    FFFFFFFFC0000370 C |
 LITERAL_F_00000052_1 :                                    FFFFFFFFC0000058 C |
 LITERAL_F_00000053_1 :                                    FFFFFFFFC000013C C |
 LITERAL_F_00000054_1 :                                    FFFFFFFFC0000140 C |
 LITERAL_F_00000055_1 :                                    FFFFFFFFC00003C0 C |
 LITERAL_F_00000056_1 :                                    FFFFFFFFC00003C8 C |
 LITERAL_F_00000057_1 :                                    FFFFFFFFC00003D0 C |
 LITERAL_F_00000058_1 :                                    FFFFFFFFC00004D0 C |
 LITERAL_F_00000059_1 :                                    FFFFFFFFC00004D4 C |
 LITERAL_F_0000005A_1 :                                    FFFFFFFFC00004D8 C |
 LITERAL_F_0000005B_1 :                                    FFFFFFFFC00004E0 C |
 LITERAL_F_0000005C_1 :                                    FFFFFFFFC00004E4 C |
 LITERAL_F_0000005D_1 :                                    FFFFFFFFC00006B0 C |
 LITERAL_F_0000005E_1 :                                    FFFFFFFFC00006B4 C |
 LITERAL_F_0000005F_1 :                                    FFFFFFFFC00006B8 C |
 LITERAL_F_00000060_1 :                                    FFFFFFFFC00006BC C |
 LITERAL_F_00000061_1 :                                    FFFFFFFFC00006C0 C |
 LITERAL_F_00000062_1 :                                    FFFFFFFFC00006C4 C |
 LITERAL_F_00000063_1 :                                    FFFFFFFFC00006C8 C |
 LITERAL_F_00000064_1 :                                    FFFFFFFFC00006CC C |
 LITERAL_F_00000065_1 :                                    FFFFFFFFC0000150 C |
 LITERAL_F_00000066_1 :                                    FFFFFFFFC0000154 C |
 LITERAL_F_00000067_1 :                                    FFFFFFFFC0000160 C |
 LITERAL_F_00000068_1 :                                    FFFFFFFFC00001D0 C |
 LITERAL_F_00000069_1 :                                    FFFFFFFFC00001D4 C |
 LITERAL_F_0000006A_1 :                                    FFFFFFFFC00001D8 C |
 LITERAL_F_0000006B_1 :                                    FFFFFFFFC00001DC C |
 LITERAL_F_0000006C_1 :                                    FFFFFFFFC00001E0 C |
 LITERAL_F_0000006D_1 :                                    FFFFFFFFC00001E4 C |
 LITERAL_F_0000006E_1 :                                    FFFFFFFFC00001E8 C |
 LITERAL_F_0000006F_1 :                                    FFFFFFFFC00001EC C |
 LITERAL_F_00000070_1 :                                    FFFFFFFFC000044C C |
 LITERAL_F_00000071_1 :                                    FFFFFFFFC0000458 C |
 LITERAL_F_00000072_1 :                                    FFFFFFFFC0000460 C |
 LITERAL_F_00000073_1 :                                    FFFFFFFFC0000580 C |
 LITERAL_F_00000074_1 :                                    FFFFFFFFC0000584 C |
 LITERAL_F_00000075_1 :                                    FFFFFFFFC000058C C |
 LITERAL_F_00000076_1 :                                    FFFFFFFFC00005CC C |
 LITERAL_F_00000077_1 :                                    FFFFFFFFC00005D0 C |
 LITERAL_L_0000C000_1 :                                    FFFFFFFFC0000450 C |
 LITERAL_L_0000E000_1 :                                    FFFFFFFFC0000454 C |
 LITERAL_L_0000FC00_1 :     600082C C |  LITERAL_L_0000FF00_1 :     60012D8 C |
 LITERAL_L_0001E000_1 :     6000FD0 C |  LITERAL_L_0001F800_1 :     6000934 C |
 LITERAL_L_00FFFFFF_1 :                                    FFFFFFFFC0000158 C |
 LITERAL_L_02000000_1 :     6000CC4 C |
 LITERAL_L_02000000_2 :                                    FFFFFFFFC000015C C |
 LITERAL_L_02000000_3 :                                    FFFFFFFFC0000588 C |
 LITERAL_L_06000000_1 :     6000D58 C |  LITERAL_L_06000124_1 :     6001224 C |
 LITERAL_L_0600079A_1 :     6001230 C |  LITERAL_L_060007B0_1 :     6000FC4 C |
 LITERAL_L_060007B0_2 :     600111C C |  LITERAL_L_060007B0_3 :     6001238 C |
 LITERAL_L_060007E0_1 :     6000D60 C |  LITERAL_L_06000834_1 :     6000FCC C |
 LITERAL_L_0600086C_1 :     6000FC8 C |  LITERAL_L_0600086C_2 :     600113C C |
 LITERAL_L_060008DC_1 :     6001004 C |  LITERAL_L_06000974_1 :     6001000 C |
 LITERAL_L_06000B74_1 :     6000FD4 C |  LITERAL_L_06000B8C_1 :     6000FF8 C |
 LITERAL_L_06000B8C_2 :     6001140 C |  LITERAL_L_0603EFF8_1 :     6000788 C |
 LITERAL_L_0603F000_1 :     6001220 C |  LITERAL_L_0603FFF8_1 :     60004A0 C |
 LITERAL_L_06040000_1 :     6000D54 C |  LITERAL_L_20004000_1 :     6000488 C |
 LITERAL_L_20004000_2 :     6000784 C |  LITERAL_L_20004000_3 :     6000820 C |
 LITERAL_L_20004000_4 :     6000CA4 C |  LITERAL_L_20004000_5 :     6000D68 C |
 LITERAL_L_20004000_6 :     6001240 C |  LITERAL_L_20004012_1 :     6000490 C |
 LITERAL_L_20004016_1 :     600049C C |  LITERAL_L_20004016_2 :     6000780 C |
 LITERAL_L_20004018_1 :     6000498 C |  LITERAL_L_20004018_2 :     600077C C |
 LITERAL_L_2000401A_1 :     6000480 C |  LITERAL_L_2000401A_2 :     60006CC C |
 LITERAL_L_2000401C_1 :     600047C C |
 LITERAL_L_2000401C_2 :                                    FFFFFFFFC000014C C |
 LITERAL_L_20004022_1 :     600037C C |  LITERAL_L_20004024_1 :     6000380 C |
 LITERAL_L_20004028_1 :     60006E4 C |  LITERAL_L_20004028_2 :     6000D6C C |
 LITERAL_L_2000402A_1 :     6001244 C |  LITERAL_L_2000402C_1 :     600048C C |
 LITERAL_L_2000402C_2 :     6000D64 C |  LITERAL_L_2000402C_3 :     6000E2C C |
 LITERAL_L_2000402C_4 :     6001124 C |  LITERAL_L_2000402C_5 :     6001248 C |
 LITERAL_L_2000402D_1 :     6000E1C C |  LITERAL_L_2000402E_1 :     60006D0 C |
 LITERAL_L_2000402E_2 :     6000D70 C |  LITERAL_L_2000402E_3 :     6001114 C |
 LITERAL_L_2000402E_4 :     600122C C |  LITERAL_L_2000402E_5 :     60012D0 C |
 LITERAL_L_20004034_1 :                                    FFFFFFFFC0000164 C |
 LITERAL_L_20004036_1 :                                    FFFFFFFFC0000168 C |
 LITERAL_L_20004100_1 :     6000484 C |  LITERAL_L_20004100_2 :     6000824 C |
 LITERAL_L_20004100_3 :     600092C C |  LITERAL_L_20004100_4 :     6000E0C C |
 LITERAL_L_20004100_5 :     6000FB8 C |  LITERAL_L_20004100_6 :     6001120 C |
 LITERAL_L_20004100_7 :                                    FFFFFFFFC0000054 C |
 LITERAL_L_20004100_8 :                                    FFFFFFFFC00003CC C |
 LITERAL_L_20004102_1 :     6000E10 C |  LITERAL_L_20004200_1 :     6000E18 C |
 LITERAL_L_24000000_1 :     6000828 C |  LITERAL_L_24000000_2 :     6000930 C |
 LITERAL_L_24000000_3 :     6000A20 C |  LITERAL_L_24000000_4 :     6000B6C C |
 LITERAL_L_24000000_5 :                                    FFFFFFFFC0000208 C |
 LITERAL_L_24000000_6 :                                    FFFFFFFFC0000368 C |
 LITERAL_L_2401D000_1 :     600093C C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC00003C4 C |
 LITERAL_L_4D5F4F4B_1 :     60004A8 C |  LITERAL_L_535F4F4B_1 :     6000790 C |
 LITERAL_L_7FFFFFFF_1 :                                    FFFFFFFFC00004DC C |
 LITERAL_L_7FFFFFFF_2 :                                    FFFFFFFFC000045C C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     60007D4 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     60007D0 C |
 LITERAL_L_FFFFFFFFFF000000_1 :                                     6000CAC C |
 LITERAL_W_0080_1 :         60007D8 C |  LITERAL_W_0080_2 :         6000830 C |
 LITERAL_W_0080_3 :         6000CCC C |
 LITERAL_W_0080_4 :                                        FFFFFFFFC0000172 C |
 LITERAL_W_00A0_1 :                                        FFFFFFFFC00004E8 C |
 LITERAL_W_00A2_1 :         6000944 C |
 LITERAL_W_00A4_1 :                                        FFFFFFFFC000005E C |
 LITERAL_W_00A5_1 :         600115A C |  LITERAL_W_00A8_1 :         6001010 C |
 LITERAL_W_00E0_1 :         6001018 C |  LITERAL_W_00E0_2 :         600115C C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC0000376 C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC0000144 C |
 LITERAL_W_00E0_5 :                                        FFFFFFFFC00003D8 C |
 LITERAL_W_00E0_6 :                                        FFFFFFFFC00004EA C |
 LITERAL_W_00F0_1 :         60002A0 C |  LITERAL_W_00F0_2 :         60004B2 C |
 LITERAL_W_00F0_3 :         6000796 C |  LITERAL_W_00F0_4 :         60007DA C |
 LITERAL_W_00F0_5 :         6000832 C |  LITERAL_W_00F0_6 :         6000940 C |
 LITERAL_W_00F0_7 :         6000BB0 C |  LITERAL_W_00F0_8 :         6000E30 C |
 LITERAL_W_00F0_9 :         600100E C |  LITERAL_W_00F0_A :         6001160 C |
 LITERAL_W_00FC_1 :         6000706 C |  LITERAL_W_00FF_1 :         6000384 C |
 LITERAL_W_00FF_2 :                                        FFFFFFFFC00003D4 C |
 LITERAL_W_0100_1 :                                        FFFFFFFFC00000EC C |
 LITERAL_W_0100_2 :                                        FFFFFFFFC000021C C |
 LITERAL_W_0101_1 :         6000388 C |  LITERAL_W_0102_1 :         600038A C |
 LITERAL_W_0103_1 :         600038C C |  LITERAL_W_0104_1 :         600038E C |
 LITERAL_W_0105_1 :         6000390 C |  LITERAL_W_0105_2 :         6000CC8 C |
 LITERAL_W_0106_1 :         6000392 C |
 LITERAL_W_013E_1 :                                        FFFFFFFFC00003DA C |
 LITERAL_W_0140_1 :         6000B70 C |  LITERAL_W_0140_2 :         6001016 C |
 LITERAL_W_0140_3 :                                        FFFFFFFFC00000EA C |
 LITERAL_W_0140_4 :                                        FFFFFFFFC000021E C |
 LITERAL_W_0140_5 :                                        FFFFFFFFC0000374 C |
 LITERAL_W_01A8_1 :         6000E32 C |  LITERAL_W_01FF_1 :         6000386 C |
 LITERAL_W_0200_1 :         600100C C |  LITERAL_W_0200_2 :         600115E C |
 LITERAL_W_0280_1 :                                        FFFFFFFFC00001F0 C |
 LITERAL_W_03FF_1 :                                        FFFFFFFFC0000174 C |
 LITERAL_W_0415_1 :         6000CCA C |  LITERAL_W_07FF_1 :         6000942 C |
 LITERAL_W_07FF_2 :         6000A28 C |
 LITERAL_W_07FF_3 :                                        FFFFFFFFC00005D4 C |
 LITERAL_W_3FFF_1 :                                        FFFFFFFFC00003D6 C |
 LITERAL_W_44E0_1 :         60004AE C |  LITERAL_W_44E0_2 :         6000798 C |
 LITERAL_W_44E1_1 :         60004B0 C |  LITERAL_W_5A00_1 :         6000BB6 C |
 LITERAL_W_5A00_2 :                                        FFFFFFFFC00003E0 C |
 LITERAL_W_5A10_1 :                                        FFFFFFFFC0000064 C |
 LITERAL_W_5A20_1 :                                        FFFFFFFFC00000EE C |
 LITERAL_W_A518_1 :         6000D7C C |  LITERAL_W_A518_2 :         600101C C |
 LITERAL_W_A518_3 :         6001164 C |  LITERAL_W_A518_4 :         6001254 C |
 LITERAL_W_A518_5 :                                        FFFFFFFFC00000E8 C |
 LITERAL_W_A518_6 :                                        FFFFFFFFC0000062 C |
 LITERAL_W_A518_7 :                                        FFFFFFFFC00003DE C |
 LITERAL_W_A518_8 :                                        FFFFFFFFC0000170 C |
 LITERAL_W_A538_1 :         6000BB8 C |
 LITERAL_W_F000_1 :                                        FFFFFFFFC0000464 C |
 LITERAL_W_FE10_1 :         60004AC C |  LITERAL_W_FE10_2 :         6000794 C |
 LITERAL_W_FE10_3 :         6000D74 C |  LITERAL_W_FE10_4 :         600124C C |
 LITERAL_W_FE10_5 :                                        FFFFFFFFC00000E4 C |
 LITERAL_W_FE10_6 :                                        FFFFFFFFC000005C C |
 LITERAL_W_FE10_7 :                                        FFFFFFFFC000016C C |
 LITERAL_W_FE80_1 :         6000BB4 C |  LITERAL_W_FE80_2 :         6000D7A C |
 LITERAL_W_FE80_3 :         600101A C |  LITERAL_W_FE80_4 :         6001162 C |
 LITERAL_W_FE80_5 :         6001252 C |
 LITERAL_W_FE80_6 :                                        FFFFFFFFC00000E6 C |
 LITERAL_W_FE80_7 :                                        FFFFFFFFC0000060 C |
 LITERAL_W_FE80_8 :                                        FFFFFFFFC00003DC C |
 LITERAL_W_FE80_9 :                                        FFFFFFFFC000016E C |
 LITERAL_W_FE92_1 :         60007DC C |  LITERAL_W_FE92_2 :         6000BB2 C |
 LITERAL_W_FE92_3 :         6000D7E C |  LITERAL_W_FE92_4 :         6001256 C |
 LITERAL_W_FEE2_1 :         6000D76 C |  LITERAL_W_FEE2_2 :         600124E C |
 LITERAL_W_FEE4_1 :         6000D78 C |  LITERAL_W_FEE4_2 :         6001250 C |
 LITERAL_W_FF00_1 :                                        FFFFFFFFC00006D0 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC0000590 C |
 LITERAL_W_FF60_1 :                                        FFFFFFFFC0000466 C |
*MACEXP :                         7 - |  MAINDRW_TASKS :   FFFFFFFFC0000068 C |
 MAINDRW_TASKS.LIST :                                      FFFFFFFFC0000074 C |
 MAPBGH_0 :                  930CD6 C |  MAPBGL_0 :                  930856 C |
 MAPBLK_0 :                  92F2CE C |  MAPBLK_M :                 20972FC C |
 MAPFGC_0 :                  9303D6 C |  MAPFGH_0 :                  92FF56 C |
 MAPFGL_0 :                  92FAD6 C |  MAPFG_M :                  20A73FC C |
 MAPHEAD_0 :                 92F2C4 C |  MAPHEAD_M :                 931156 C |
 MAPPAL_M :                  92F0A4 C | *MARS :                           1 - |
 MARSBLOCK :                     2E C | *MARSCD :                         0 - |
*MARSGBL_CNTRRDPLGN :            2A C | *MARSGBL_CNTRRDSPR :             2C C |
 MARSGBL_CURRFACEPOS :           1C C |  MARSGBL_CURRNUMFACES :          20 C |
*MARSGBL_CURRRDPLGN :            10 C |  MARSGBL_CURRZLIST :             14 C |
 MARSGBL_CURRZTOP :              18 C |  MARSGBL_DIVSTOP_M :             3C C |
*MARSGBL_DRWPAUSE :              3E C |  MARSGBL_MDDRAWTMR :             30 C |
 MARSGBL_PLYPZCNTR :             28 C |  MARSGBL_PLYPZLIST_END :          C C |
 MARSGBL_PLYPZLIST_R :            0 C |  MARSGBL_PLYPZLIST_START :        8 C |
 MARSGBL_PLYPZLIST_W :            4 C |  MARSGBL_POLYBUFFNUM :           26 C |
 MARSGBL_WAVEDEFORM :            38 C |  MARSGBL_WAVEENABLE :            32 C |
 MARSGBL_WAVEMAX :               36 C |  MARSGBL_WAVESPD :               34 C |
 MARSGBL_WAVETAN :               3A C |  MARSGBL_WDGHOLD :               24 C |
 MARSGBL_WDGMODE :               22 C |  MARSGBL_XSHIFT :                2E C |
 MARSMDL_MDLLOOP : FFFFFFFFC0000178 C |
 MARSMDL_MDLLOOP.GO_MDL :                                  FFFFFFFFC0000188 C |
 MARSMDL_MDLLOOP.INVLID :                                  FFFFFFFFC00001B6 C |
 MARSMDL_MDLLOOP.LOOP :                                    FFFFFFFFC000019A C |
 MARSMDL_MDLLOOP.PAGE_2 :                                  FFFFFFFFC00001C6 C |
 MARSMDL_MDLLOOP.SKIP :                                    FFFFFFFFC00001BC C |
 MARSMDL_READMODEL :                                       FFFFFFFFC00001F4 C |
 MARSMDL_READMODEL.ALLDONE :                               FFFFFFFFC0000356 C |
 MARSMDL_READMODEL.ALLUVDONE :                             FFFFFFFFC0000272 C |
 MARSMDL_READMODEL.CAN_BUILD :                             FFFFFFFFC0000214 C |
 MARSMDL_READMODEL.EXIT_MODEL :                            FFFFFFFFC0000444 C |
 MARSMDL_READMODEL.FACE_OK :                               FFFFFFFFC0000398 C |
 MARSMDL_READMODEL.FACE_OUT :                              FFFFFFFFC0000438 C |
 MARSMDL_READMODEL.FINISH_THIS :                           FFFFFFFFC0000440 C |
 MARSMDL_READMODEL.FIRST_FACE :                            FFFFFFFFC00003DE C |
 MARSMDL_READMODEL.GO_FACES :                              FFFFFFFFC00002B6 C |
 MARSMDL_READMODEL.GO_FOUT :                               FFFFFFFFC000038E C |
 MARSMDL_READMODEL.NEXT_FACE :                             FFFFFFFFC0000204 C |
*MARSMDL_READMODEL.NO_MODEL :                              FFFFFFFFC000020C C |
 MARSMDL_READMODEL.PAGE_2 :                                FFFFFFFFC00003BA C |
 MARSMDL_READMODEL.SET_TRI :                               FFFFFFFFC0000222 C |
 MARSMDL_READMODEL.SOLID_TYPE :                            FFFFFFFFC00002A0 C |
 MARSMDL_READMODEL.SWAP_ME :                               FFFFFFFFC00003DA C |
 MARSMDL_READMODEL.TAG_ANDMTRL :                           FFFFFFFFC000029C C |
 MARSMDL_READMODEL.TAG_MAXFACES :                          FFFFFFFFC0000210 C |
 MARSMDL_READMODEL.TAG_XL :                                FFFFFFFFC0000394 C |
 MARSOBJ_TEST :             60066D8 C |  MARSOBJ_TEST.FACE :        60068E4 C |
 MARSOBJ_TEST.MTRL :        6006E44 C |  MARSOBJ_TEST.VERT :        60066EC C |
 MARSOBJ_TEST.VRTX :        6006D44 C |  MARSRAM_SOUND :           26007C90 C |
 MARSRAM_SYSTEM :          26006E50 C |  MARSRAM_VIDEO :           26008010 C |
 MARSSND_PWMCACHE :        26007C90 C |
 MARSSND_PWMCHNLS :                                        FFFFFFFFC00005D8 C |
 MARSSND_PWMCONTROL :                                      FFFFFFFFC00006F0 C |
 MARSSND_REFILL :           6000C54 C |  MARSSND_REFILL.COPY_NOW :  6000C7A C |
 MARSSND_REFILL.NEXT_ONE :  6000C5C C |  MARSSND_REFILL.NOT_ENBL :  6000C96 C |
 MARSSND_RVMODE :  FFFFFFFFC0000728 C |  MARSSOUND_INIT :           6000BBC C |
 MARSSOUND_PWMENABLE :      6000C44 C |  MARSSOUND_SETPWM :         6000BD8 C |
 MARSSOUND_SETPWM.ENDMRK :  6000BFC C |  MARSSOUND_SETPWMPITCH :    6000C14 C |
 MARSSOUND_SETPWMPITCH.OFF_1 :                                      6000C28 C |
 MARSSOUND_SETVOLUME :      6000C2C C |
 MARSSOUND_SETVOLUME.OFF_1 :                                        6000C40 C |
 MARSSPR_DATA :                  10 C |  MARSSPR_DWIDTH :                 4 C |
*MARSSPR_FILL :                   E C |  MARSSPR_FLAGS :                  8 C |
 MARSSPR_INDX :                   6 C | *MARSSPR_MAP :                   14 C |
 MARSSPR_X :                      A C |  MARSSPR_XFRM :                   2 C |
 MARSSPR_XS :                     0 C |  MARSSPR_Y :                      C C |
 MARSSPR_YFRM :                   3 C |  MARSSPR_YS :                     1 C |
 MARSUPD :                       30 C |  MARSVIDEO_BG_MDMOVE :      6000A2C C |
 MARSVIDEO_BG_MDMOVE.XEQU : 6000A4C C |  MARSVIDEO_BG_MDMOVE.YEQU : 6000A62 C |
 MARSVIDEO_BG_MDMOVE.YPU_NEGTV :                                    6000A7E C |
 MARSVIDEO_BG_MDMOVE.YPU_POSTV :                                    6000A88 C |
 MARSVIDEO_BG_MDMOVE.YX_NEGTV :                                     6000A9C C |
 MARSVIDEO_BG_MDMOVE.YX_POSTV :                                     6000AA6 C |
 MARSVIDEO_BG_MDREQ :       6000AAC C |
*MARSVIDEO_BG_MDREQ.LR_DONE :                                       6000B24 C |
 MARSVIDEO_BG_MDREQ.NO_D :  6000ACE C |  MARSVIDEO_BG_MDREQ.NO_L :  6000AC6 C |
 MARSVIDEO_BG_MDREQ.NO_R :  6000ABE C |
 MARSVIDEO_BG_MDREQ.NO_TIMER :                                      6000B5E C |
 MARSVIDEO_BG_MDREQ.NO_UPD :                                        6000AD6 C |
 MARSVIDEO_BG_MDREQ.SZ_SAFE :                                       6000B48 C |
 MARSVIDEO_BG_MDREQ.X_DRAW :                                        6000B2C C |
 MARSVIDEO_CLEARSCREEN :    6000834 C |
 MARSVIDEO_CLEARSCREEN.FB_LOOP :                                    600083A C |
*MARSVIDEO_CLEARSCREEN.NO_REDRAW_2 :                                6000852 C |
 MARSVIDEO_CLEARSCREEN.WAIT_FB2 :                                   6000846 C |
 MARSVIDEO_DRAWALL :                                       FFFFFFFFC00000F0 C |
 MARSVIDEO_DRAWALL.THIS_BLK :                              FFFFFFFFC00001A8 C |
 MARSVIDEO_DRAWALL.XB_LINE :                               FFFFFFFFC00001CE C |
 MARSVIDEO_DRAWALL.XY_G :                                  FFFFFFFFC000017A C |
 MARSVIDEO_DRAWALL.XY_G2 :                                 FFFFFFFFC00001C8 C |
 MARSVIDEO_DRAWALL.X_EX :                                  FFFFFFFFC00001E6 C |
 MARSVIDEO_DRAWALL.X_FL :                                  FFFFFFFFC000014E C |
 MARSVIDEO_DRAWALL.X_IN :                                  FFFFFFFFC000013E C |
 MARSVIDEO_DRAWALL.X_LOOP :                                FFFFFFFFC0000182 C |
 MARSVIDEO_DRAWALL.X_PL :                                  FFFFFFFFC0000146 C |
 MARSVIDEO_DRAWALL.YB_LINE :                               FFFFFFFFC00001C2 C |
 MARSVIDEO_DRAWALL.Y_FL :                                  FFFFFFFFC000015E C |
 MARSVIDEO_DRAWALL.Y_LOOP :                                FFFFFFFFC000016E C |
 MARSVIDEO_DRAWALL.Y_PL :                                  FFFFFFFFC0000156 C |
 MARSVIDEO_DRAWSUPERSPR :                                  FFFFFFFFC0000220 C |
 MARSVIDEO_FIXTBLSHIFT :    60008DC C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6000914 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       60008FC C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    6000926 C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6000920 C |
 MARSVIDEO_INIT :           60007E0 C |  MARSVIDEO_INIT.DEF_FB :    6000800 C |
 MARSVIDEO_INIT.NXT_LNE :   6000806 C |  MARSVIDEO_INIT.WAIT_FRM :  6000816 C |
 MARSVIDEO_MAKENAMETBL :    600086C C |
 MARSVIDEO_MAKENAMETBL.CANT_USE :                                   60008D6 C |
 MARSVIDEO_MAKENAMETBL.LINETBL_NORMAL :                             60008C8 C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE :                                    60008A0 C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE2 :                                   60008CC C |
 MARSVIDEO_MKSCRLFIELD :    6000948 C |
 MARSVIDEO_NXTSUPRSPR :                                    FFFFFFFFC0000230 C |
 MARSVIDEO_NXTSUPRSPR.BLNK :                               FFFFFFFFC0000312 C |
 MARSVIDEO_NXTSUPRSPR.BLNK2 :                              FFFFFFFFC0000328 C |
 MARSVIDEO_NXTSUPRSPR.EX_LINE :                            FFFFFFFFC0000332 C |
 MARSVIDEO_NXTSUPRSPR.FLP_H :                              FFFFFFFFC00002BE C |
 MARSVIDEO_NXTSUPRSPR.FLP_V :                              FFFFFFFFC00002B4 C |
 MARSVIDEO_NXTSUPRSPR.SPR_OUT :                            FFFFFFFFC000034E C |
 MARSVIDEO_NXTSUPRSPR.VALID :                              FFFFFFFFC000023C C |
 MARSVIDEO_NXTSUPRSPR.XB_E :                               FFFFFFFFC0000292 C |
 MARSVIDEO_NXTSUPRSPR.XFINC :                              FFFFFFFFC00002DE C |
 MARSVIDEO_NXTSUPRSPR.XT_E :                               FFFFFFFFC00002E2 C |
 MARSVIDEO_NXTSUPRSPR.X_LOOP :                             FFFFFFFFC000030A C |
 MARSVIDEO_NXTSUPRSPR.YB_E :                               FFFFFFFFC000029A C |
 MARSVIDEO_NXTSUPRSPR.YFINC :                              FFFFFFFFC00002D0 C |
 MARSVIDEO_NXTSUPRSPR.YT_E :                               FFFFFFFFC00002D2 C |
 MARSVIDEO_NXTSUPRSPR.Y_LOOP :                             FFFFFFFFC0000300 C |
 MARSVIDEO_NXTSUPRSPR.Y_MAX :                              FFFFFFFFC0000306 C |
 MARSVIDEO_NXTSUPRSPR.Y_SNAP :                             FFFFFFFFC00002F6 C |
*MARSVIDEO_RESETNAMETBL :   6000858 C |
 MARSVIDEO_RESETNAMETBL.NXT_LNE2 :                                  600085E C |
 MARSVIDEO_SETSUPERSPR :    6000B74 C |  MARSVIDEO_SETWATCHDOG :    6000B8C C |
 MARSVIDEO_SHOWSCRLBG :     6000974 C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     6000998 C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP_W :                                   60009D8 C |
 MARSVIDEO_SHOWSCRLBG.LN_WAVY :                                     60009C0 C |
*MARSVIDEO_SHOWSCRLBG.NO_LINES :                                    6000A18 C |
 MARSVIDEO_SHOWSCRLBG.WXL_L :                                       60009FC C |
 MARSVIDEO_SHOWSCRLBG.WXL_R :                                       60009F6 C |
 MARSVIDEO_SHOWSCRLBG.XL_L :                                        60009A6 C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        60009A0 C |
 MARSVIDEO_SLICEPLGN :                                     FFFFFFFFC00003E4 C |
 MARSVIDEO_SLICEPLGN.EXIT :                                FFFFFFFFC00004C8 C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                            FFFFFFFFC0000436 C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                             FFFFFFFFC0000448 C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                              FFFFFFFFC000043E C |
 MARSVIDEO_SLICEPLGN.LEFTH :                               FFFFFFFFC0000488 C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                              FFFFFFFFC00004C0 C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                             FFFFFFFFC000046A C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                             FFFFFFFFC0000404 C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                            FFFFFFFFC0000418 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                          FFFFFFFFC0000426 C |
 MARSVIDEO_SLICEPLGN.TRINGL :                              FFFFFFFFC00003F6 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                             FFFFFFFFC000042E C |
 MARS_CLEARCACHERAM :       600079A C |  MARS_CLEARCACHERAM.LOOP :  60007A0 C |
 MARS_ENTRY :                   800 C | *MARS_ENTRY.NO_MARS :           802 C |
 MARS_LOADCACHERAM :        60007B0 C |  MARS_LOADCACHERAM.COPY :   60007C2 C |
 MARS_RAMDATA :               413E0 C |  MARS_RAMDATA_E :             48230 C |
 MARS_SCOMM :                   4C8 C |  MARS_SCOMM.BLOCKED :           54C C |
 MARS_SCOMM.CLRCOM :            552 C |  MARS_SCOMM.NEXT_COMM :         523 C |
 MARS_SCOMM.NEXT_PASS :         519 C | *MARS_SCOMM.WAIT_CMD :          517 C |
 MARS_SCOMM.WAIT_ENTER :        4F8 C |  MARS_SCOMM.W_PASS2 :           539 C |
 MASTERTRKLIST :             FF208C C |  MASTER_IRQ :               6000248 C |
 MASTER_LOOP :              6000D80 C |  MAX_FACES :                    280 - |
 MAX_GEMAENTRY :                  4 - |  MAX_INS :                       13 - |
 MAX_MDDMATSK :                  10 - |  MAX_MDERAM :                   800 - |
 MAX_MODELS :                     C - |  MAX_PAGE0_EN :                   4 - |
 MAX_PWMBACKUP :                 80 - |  MAX_PWMCHNL :                    7 - |
 MAX_SCRNBUFF :               20000 - |  MAX_SUPERSPR :                  20 - |
 MAX_SVDP_PZ :                  2A0 - |  MAX_TRKCHN :                    11 - |
 MAX_ZDIST :       FFFFFFFFFFFFF000 - | *MCD :                            0 - |
 MCHNSND_BANK :                   C C |  MCHNSND_CCHREAD :                8 C |
 MCHNSND_ENBL :                   0 C |  MCHNSND_END :                   14 C |
 MCHNSND_FLAGS :                 20 C |  MCHNSND_LOOP :                  18 C |
 MCHNSND_PITCH :                 1C C |  MCHNSND_READ :                   4 C |
 MCHNSND_START :                 10 C |  MCHNSND_VOL :                   24 C |
*MDBNK0_END :                93115C C | *MDBNK0_END.END :             3115C C |
*MDBNK0_START :              904D8C C |  MDLDATA_PAL_TEST :          92ECF4 C |
 MDLRD_ROTATE :    FFFFFFFFC0000594 C |  MDLRD_SETPOINT :  FFFFFFFFC0000468 C |
 MDLRD_SETPOINT.INSIDE :                                   FFFFFFFFC000052E C |
 MDLRD_SETPOINT.SAVE_Z :                                   FFFFFFFFC0000564 C |
 MDLRD_SETPOINT.SAVE_Z2 :                                  FFFFFFFFC000055E C |
 MDLRD_SETPOINT.X_LW :                                     FFFFFFFFC000056A C |
 MDLRD_SETPOINT.X_RW :                                     FFFFFFFFC0000570 C |
 MDLRD_SETPOINT.Y_LW :                                     FFFFFFFFC0000576 C |
 MDLRD_SETPOINT.Y_RW :                                     FFFFFFFFC000057C C |
 MDLRD_SETPOINT.ZMULTI :                                   FFFFFFFFC0000546 C |
 MDL_DATA :                       0 C | *MDL_FLAGS :                     16 C |
*MDL_FRAME :                     14 C |  MDL_OPTION :                     4 C |
 MDL_X_POS :                      8 C |  MDL_X_ROT :                      E C |
 MDL_Y_POS :                      A C |  MDL_Y_ROT :                     10 C |
 MDL_Z_POS :                      C C |  MDL_Z_ROT :                     12 C |
 MDMAP_DRAWALL :             FF0D94 C |  MDMAP_DRAWALL.BLANK :       FF0E42 C |
 MDMAP_DRAWALL.DRWY_16 :     FF0E94 C |  MDMAP_DRAWALL.GOT_BLK :     FF0E40 C |
 MDMAP_DRAWALL.MK_BLOCK :    FF0E70 C |  MDMAP_DRAWALL.NO_BG :       FF0E6E C |
 MDMAP_DRAWALL.THIS_BG :     FF0D9E C |  MDMAP_DRAWALL.X_LOOP :      FF0E30 C |
 MDMAP_DRAWALL.Y_LOOP :      FF0E28 C |  MDMAP_DRAWSCRL :            FF0ECE C |
*MDMAP_DRAWSCRL.BLNK :       FF0F76 C |  MDMAP_DRAWSCRL.FRCE :       FF0FAA C |
 MDMAP_DRAWSCRL.GET_COORDS : FF10C4 C |  MDMAP_DRAWSCRL.MARS_RET_C : FF1000 C |
 MDMAP_DRAWSCRL.MK_CLMN :    FF0F48 C |  MDMAP_DRAWSCRL.MK_ROW :     FF1002 C |
 MDMAP_DRAWSCRL.NO_BG :      FF0F46 C |  MDMAP_DRAWSCRL.NO_D :       FF0F1A C |
 MDMAP_DRAWSCRL.NO_L :       FF0F32 C |  MDMAP_DRAWSCRL.NO_R :       FF0F42 C |
 MDMAP_DRAWSCRL.NO_U :       FF0F08 C |  MDMAP_DRAWSCRL.PRIO :       FF0F7C C |
 MDMAP_DRAWSCRL.THIS_BG :    FF0EE4 C |  MDMAP_DRAWSCRL.VLD :        FF0F88 C |
*MDMAP_DRAWSCRL.XBLNK :      FF103C C |  MDMAP_DRAWSCRL.XFRCE :      FF1070 C |
 MDMAP_DRAWSCRL.XPRIO :      FF1042 C |  MDMAP_DRAWSCRL.XVLD :       FF104E C |
 MDMAP_DRAWSCRL.X_BLK :      FF1030 C |  MDMAP_DRAWSCRL.X_LOW :      FF10B2 C |
*MDMAP_DRAWSCRL.X_NEW :      FF10BA C |  MDMAP_DRAWSCRL.Y_BLK :      FF0F6A C |
 MDMAP_DRAWSCRL.Y_LOW :      FF0FF8 C |  MDMAP_INIT :                FF0BBE C |
 MDMAP_INIT.CLR :            FF0BC8 C |  MDMAP_SET :                 FF0BD0 C |
 MDMAP_SET.MARS_SIDE :       FF0BF0 C |  MDMAP_SET.MD_SIDE :         FF0BE0 C |
 MDMAP_SET.XL_G :            FF0C80 C |  MDMAP_SET.XL_L :            FF0C78 C |
 MDMAP_SET.XR_G :            FF0C90 C |  MDMAP_SET.XR_L :            FF0C88 C |
 MDMAP_SET.YB_G :            FF0CAC C |  MDMAP_SET.YB_L :            FF0CA4 C |
 MDMAP_SET.YT_G :            FF0C9C C |  MDMAP_SET.YT_L :            FF0C94 C |
 MDMAP_UPDATE :              FF0CB8 C |  MDMAP_UPDATE.BEAM_INCR :    FF0D80 C |
 MDMAP_UPDATE.NO_BG :        FF0D7E C |  MDMAP_UPDATE.THIS_BG :      FF0CC8 C |
 MDMAP_UPDATE.VAL_H :        FF0D92 C |  MDMAP_UPDATE.XD_G :         FF0D8A C |
 MDMAP_UPDATE.XD_L :         FF0D82 C |  MDMAP_UPDATE.XEQU :         FF0CEA C |
 MDMAP_UPDATE.X_K :          FF0D4E C |  MDMAP_UPDATE.X_R :          FF0D4A C |
 MDMAP_UPDATE.YEQU :         FF0CFE C |  MDMAP_UPDATE.Y_D :          FF0D70 C |
 MDMAP_UPDATE.Y_K :          FF0D74 C |  MDRAM_START :             FFFF9000 - |
 MDSYS_SINEDATA :            FF14C0 C |  MD_BANK_SRAM :              A130F1 - |
 MD_BG_BH :                       1 C |  MD_BG_BLK :                     28 C |
*MD_BG_BLKW :                     2 C |  MD_BG_BW :                       0 C |
 MD_BG_COL :                     2C C |  MD_BG_FLAGS :                    3 C |
 MD_BG_H :                        A C |  MD_BG_HF :                       E C |
 MD_BG_HI :                      24 C |  MD_BG_LOW :                     20 C |
*MD_BG_MOVEX :                    6 C | *MD_BG_MOVEY :                    7 C |
 MD_BG_VPOS :                    1C C |  MD_BG_VRAM :                    1E C |
 MD_BG_W :                        8 C |  MD_BG_WF :                       C C |
 MD_BG_X :                       30 C |  MD_BG_XINC_L :                  10 C |
 MD_BG_XINC_R :                  12 C |  MD_BG_XSET :                     4 C |
 MD_BG_X_OLD :                   18 C |  MD_BG_Y :                       34 C |
 MD_BG_YINC_D :                  16 C |  MD_BG_YINC_U :                  14 C |
 MD_BG_YSET :                     5 C |  MD_BG_Y_OLD :                   1A C |
 MD_DEBUGMENU :              FF1A86 C |  MD_DEBUGMENU.CLEANUP :      FF1FE6 C |
 MD_DEBUGMENU.CLNUP :        FF1FF0 C |  MD_DEBUGMENU.COPY_1 :       FF1F0C C |
 MD_DEBUGMENU.COPY_2 :       FF1F28 C |  MD_DEBUGMENU.COPY_3 :       FF1F42 C |
 MD_DEBUGMENU.FADE_IN :      FF1FF8 C |  MD_DEBUGMENU.FADE_OUT :     FF201E C |
 MD_DEBUGMENU.LIST :         FF1AFA C |  MD_DEBUGMENU.LOOP :         FF1AD0 C |
 MD_DEBUGMENU.MOVE_CURSOR_UD :                                       FF2056 C |
 MD_DEBUGMENU.NOAA :         FF1E74 C |  MD_DEBUGMENU.NOBA :         FF1E64 C |
 MD_DEBUGMENU.NOC_C :        FF1EA6 C |  MD_DEBUGMENU.NOD2 :         FF1E38 C |
 MD_DEBUGMENU.NOL :          FF1E84 C |  MD_DEBUGMENU.NOR :          FF1E94 C |
 MD_DEBUGMENU.NOU2 :         FF1E1C C |  MD_DEBUGMENU.NOX2 :         FF1E02 C |
 MD_DEBUGMENU.NOY2 :         FF1DE8 C |  MD_DEBUGMENU.NO_UPD2 :      FF1F56 C |
 MD_DEBUGMENU.ON_LOOP :      FF1AF4 C |  MD_DEBUGMENU.P0_DOWN :      FF2070 C |
 MD_DEBUGMENU.P0_UP :        FF2086 C |  MD_DEBUGMENU.PAGE0 :        FF1B8A C |
 MD_DEBUGMENU.PAGE0_CURSOR : FF1B9C C |  MD_DEBUGMENU.PAGE0_INIT :   FF1B34 C |
 MD_DEBUGMENU.PAGE0_JUMP :   FF1BA6 C |  MD_DEBUGMENU.PAGE0_RET :    FF1B32 C |
 MD_DEBUGMENU.PAGE1 :        FF1BF8 C |  MD_DEBUGMENU.PAGE1_INIT :   FF1BB8 C |
 MD_DEBUGMENU.PAGE1_RET :    FF1C10 C |  MD_DEBUGMENU.PAGE2 :        FF1C64 C |
 MD_DEBUGMENU.PAGE2_INIT :   FF1C12 C |  MD_DEBUGMENU.PAGE2_RET :    FF1C7C C |
 MD_DEBUGMENU.PAGE3 :        FF1CC2 C |  MD_DEBUGMENU.PAGE3_INIT :   FF1C7E C |
 MD_DEBUGMENU.PAGE3_RET :    FF1CEA C |  MD_DEBUGMENU.PAGE4 :        FF1D40 C |
 MD_DEBUGMENU.PAGE4_INIT :   FF1CEE C |  MD_DEBUGMENU.PAGE4_RET :    FF1D88 C |
 MD_DEBUGMENU.PAGE5 :        FF1DC8 C |  MD_DEBUGMENU.PAGE5_INIT :   FF1D8A C |
 MD_DEBUGMENU.PAGE5_RET :    FF1EBA C |  MD_DEBUGMENU.PAGE5_UPDATE : FF1EBC C |
 MD_DEBUGMENU.PAGE5_UPDVARS :                                        FF1EE0 C |
 MD_DEBUGMENU.PRINT_CURSOR : FF2044 C |  MD_DEBUGMENU.PROCS_TASK :   FF1F8A C |
 MD_DEBUGMENU.TASKLIST :     FF1F98 C |  MD_DEBUGMENU.TASK_00 :      FF1FA2 C |
 MD_DEBUGMENU.TASK_01 :      FF1FC6 C |  MD_DEBUGMENU.TASK_02 :      FF1FD2 C |
 MD_DEBUGMENU.TASK_03 :      FF1FD6 C |  MD_DEBUGMENU.TASK_04 :      FF1FDE C |
 MD_DEBUGMENU.THIS_BG :      FF1CEC C |  MD_DEBUGMENU.TOPTRK :       FF1E48 C |
 MD_DEBUGMENU.TOPTRK2 :      FF1E54 C |  MD_DEBUGMENU.WAIT :         FF1EEE C |
 MD_DEBUGMENU.Z_DW :         FF1D74 C |  MD_DEBUGMENU.Z_UP :         FF1D68 C |
 MD_ERRADDR :                   820 C |  MD_ERRBUS :                    820 C |
 MD_ERRCHK :                    820 C |  MD_ERRILL :                    820 C |
 MD_ERROREX :                   820 C |  MD_ERRORTRAP :                 820 C |
 MD_ERRPRIVL :                  820 C |  MD_ERRTRAPV :                  820 C |
 MD_ERRZDIV :                   820 C |  MD_INIT :                      838 C |
 MD_INIT.COPYME :               8B6 C |  MD_INIT.HOTSTART :             862 C |
 MD_INIT.LOOP_RAM :             870 C |  MD_INIT.WAIT_DMA :             88A C |
 MD_INIT.WM :                   84E C |  MD_INIT.WS :                   858 C |
 MD_LINE1010 :                  820 C |  MD_LINE1111 :                  820 C |
*MD_MODE0 :                  FF167A C | *MD_MODE0.FADE_IN :          FF186E C |
*MD_MODE0.FADE_OUT :         FF1894 C |  MD_MODE0.LOOP :             FF176A C |
 MD_MODE0.NOZ_DOWN :         FF17CA C |  MD_MODE0.NOZ_L :            FF1812 C |
 MD_MODE0.NOZ_R :            FF17FA C |  MD_MODE0.NOZ_UP :           FF17E2 C |
 MD_MODE0.UPDATE_POS :       FF1824 C |  MD_MODE0.Z_UP :             FF17A6 C |
 MD_TOPCODE :                   8DA C |  MD_TOPCODE_E :                1F54 C |
 MD_TRACE :                     820 C | *MINFO_RAM_S :               FF0000 C |
 MODE :                          18 - | *MODE_FADEOUT :              FF162E C |
 MODE_FADEOUT.LOOPW :        FF1652 C |  MODE_INIT :                 FF160E C |
 MODE_INIT.CLR :             FF161E C |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - |  MONOWIDTH :                     38 - |
 MOUSE_X :                        6 C |  MOUSE_Y :                        8 C |
 MSTR_GFX0_HBLK :           6000EB4 C |  MSTR_GFX0_INIT_1 :         6000EBE C |
 MSTR_GFX0_INIT_2 :         6000EB8 C |  MSTR_GFX0_LOOP :           6000ECE C |
 MSTR_GFX1_CONT :           6000EFA C |  MSTR_GFX1_HBLK :           6000ED4 C |
 MSTR_GFX1_INIT_1 :         6000ED8 C |
 MSTR_GFX1_INIT_1.CLR_SCRN :                                        6000EDE C |
 MSTR_GFX1_INIT_2 :         6000EF4 C |  MSTR_GFX1_LOOP :           6000F06 C |
 MSTR_GFX2_HBLK :           6000F38 C |  MSTR_GFX2_INIT_1 :         6000F3C C |
 MSTR_GFX2_INIT_1.CLR_SCRN :                                        6000F42 C |
 MSTR_GFX2_INIT_2 :         6000F64 C |  MSTR_GFX2_INIT_CONT :      6000F6A C |
 MSTR_GFX2_LOOP :           6000F74 C |  MSTR_GFX2_LOOP.WAIT_WDG :  6000F9A C |
 MSTR_GFX3_HBLK :           600101E C |  MSTR_GFX3_INIT_1 :         6001024 C |
 MSTR_GFX3_INIT_1.SLV_INIT :                                        6001026 C |
 MSTR_GFX3_INIT_2 :         6001040 C |  MSTR_GFX3_INIT_CONT :      6001046 C |
 MSTR_GFX3_INIT_CONT.WAIT_FB :                                      6001048 C |
 MSTR_GFX3_LOOP :           600104E C |  MSTR_GFX3_LOOP.CONT_PLGN : 60010CC C |
 MSTR_GFX3_LOOP.COPY_SAFE : 6001068 C |  MSTR_GFX3_LOOP.GOT_OUT :   600110E C |
 MSTR_GFX3_LOOP.INVALID :   60010E8 C |  MSTR_GFX3_LOOP.LOOP :      60010D2 C |
 MSTR_GFX3_LOOP.PAGE_2 :    60010C6 C |  MSTR_GFX3_LOOP.SKIP :      60010EE C |
*MSTR_GFX3_LOOP.SLV_BUSY2 : 6001052 C |  MSTR_GFX3_LOOP.WAIT :      6001102 C |
 MSTR_GFX3_LOOP.WAIT_FB :   6001080 C |  MSTR_GFX3_LOOP.WAIT_PZ :   60010EE C |
 MSTR_GFX3_LOOP.WAIT_WDG :  60010F4 C |  MSTR_GFXLIST :             6000E34 C |
*MSTR_GFXLIST_H :           6000E40 C |  MSTR_READY :               600110E C |
*M_ASCII :                  6004ED8 C |  M_IRQ_BAD :                6000394 C |
 M_IRQ_CMD :                60003B0 C |  M_IRQ_H :                  6000410 C |
 M_IRQ_PWM :                6000398 C |  M_IRQ_V :                  6000428 C |
 M_IRQ_VRES :               6000440 C |  M_IRQ_VRES.RV_BUSY :       6000470 C |
*NESTMAX :                      100 - |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
 PALDATA_MARS_TEST :         92EAF4 C | *PALMODE :                       31 C |
 PAL_LEVEL0 :                92F2A4 C | *PEN :                           20 - |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYPZ_MTRL :                     4 C |  PLYPZ_SRC_XL :                  10 C |
 PLYPZ_SRC_XL_DX :               20 C |  PLYPZ_SRC_XR_DX :               24 C |
 PLYPZ_SRC_YL :                  14 C |  PLYPZ_SRC_YL_DX :               28 C |
 PLYPZ_SRC_YR_DX :               2C C |  PLYPZ_TYPE :                     0 C |
 PLYPZ_XL :                       C C |  PLYPZ_XL_DX :                   18 C |
 PLYPZ_XR_DX :                   1C C |  PLYPZ_YTB :                      8 C |
 POLYGN_MTRL :                    4 C |  POLYGN_POINTS :                  8 C |
 POLYGN_SRCPNTS :                28 C |  POLYGN_TYPE :                    0 C |
*PSGALV :                      16BA C | *PSGATK :                      169E C |
 PSGCOM :                      1696 C | *PSGDEC :                      16A2 C |
*PSGDTH :                      16B6 C |  PSGDTL :                      16B2 C |
*PSGENV :                      16AE C |  PSGFREQ_LIST :                1453 C |
 PSGHATMODE :                  1E5E C | *PSGLEV :                      169A C |
*PSGRRT :                      16AA C | *PSGSLV :                      16A6 C |
*PSGTIM :                      16C2 C | *PSGVOL :                      16C6 C |
*PSG_CTRL :                  C00011 - |  PUT_PIECE :       FFFFFFFFC00005FC C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC00006AC C |
 PUT_PIECE.DONTRES :                                       FFFFFFFFC00006A2 C |
 PUT_PIECE.LEFTH : FFFFFFFFC000060A C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC000068E C |
 PVOL :                          30 - | *PWCOM :                          0 - |
 PWINSH :                        20 - |  PWINSL :                        30 - |
 PWINSM :                        28 - |  PWMCOM :                      163A C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWOUTF :                        18 - |
 PWPHL :                         10 - |  PWPTH_V :                        8 - |
 RAMCODE_BOOT :                1F54 C |  RAMCODE_USER :              FF167A C |
 RAM_BGBUFFER :    FFFFFFFFFFFF9820 C |  RAM_BGBUFFERM :   FFFFFFFFFFFFAD62 - |
*RAM_CURRGFX :     FFFFFFFFFFFF9002 C |  RAM_CURRINDX :    FFFFFFFFFFFF9006 C |
 RAM_CURRPAGE :    FFFFFFFFFFFF9000 C |  RAM_CURRSELC :    FFFFFFFFFFFF9004 C |
 RAM_CURRTEMPO :   FFFFFFFFFFFF900C C |  RAM_CURRTICKS :   FFFFFFFFFFFF900A C |
 RAM_CURRTRACK :   FFFFFFFFFFFF9008 C | *RAM_DMACODE :     FFFFFFFFFFFFA942 C |
 RAM_EMIANIM :     FFFFFFFFFFFF900E C |  RAM_EMIFRAME :    FFFFFFFFFFFF900C C |
 RAM_EMITIMER :    FFFFFFFFFFFF9010 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFA6E6 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFA6E4 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFA6E2 C |  RAM_FADEMARSTMR : FFFFFFFFFFFFA6E8 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFA6DE C |  RAM_FADEMDINCR :  FFFFFFFFFFFFA6DC C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFA6DA C |  RAM_FADEMDTMR :   FFFFFFFFFFFFA6E0 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF9900 C |  RAM_GEMALIST :    FFFFFFFFFFFF9014 C |
 RAM_GEMALISTFM :  FFFFFFFFFFFF901C C |  RAM_GEMALISTPWM : FFFFFFFFFFFF9028 C |
 RAM_GEMAUPD :     FFFFFFFFFFFF9012 C |  RAM_HORSCROLL :   FFFFFFFFFFFF9904 C |
*RAM_INITFLUG :    FFFFFFFFFFFFAB4A C |  RAM_INPUTDATA :   FFFFFFFFFFFFA702 C |
 RAM_MAPX :        FFFFFFFFFFFF9000 C |  RAM_MAPY :        FFFFFFFFFFFF9004 C |
 RAM_MARS_DREQDMA :        26006E50 C |  RAM_MARS_DREQREAD :       260074F0 C |
 RAM_MARS_GLOBAL :         26007B90 C | *RAM_MARS_HUDDISPLAY :     2601D010 C |
 RAM_MARS_OBJCAMERA :      26021730 C |  RAM_MARS_OBJECTS :        26021610 C |
*RAM_MARS_PIXLSCROLL :     26008010 C |  RAM_MARS_PLGNLIST_0 :     26021748 C |
 RAM_MARS_PLGNLIST_1 :     26022B48 C |  RAM_MARS_PLGNNUM_0 :      26023F48 C |
 RAM_MARS_PLGNNUM_1 :      26023F4C C |  RAM_MARS_POLYGONS_0 :     2600FE10 C |
 RAM_MARS_POLYGONS_1 :     26018A10 C |
 RAM_MARS_SCRLBUFF :                                       FFFFFFFFC0000378 C |
 RAM_MARS_SCRNBUFF :       26008010 C |  RAM_MARS_SVDPDRWLIST :    26008010 C |
 RAM_MARS_SVDPDRWLIST_E :  2600FE10 C |  RAM_MDDREQ :      FFFFFFFFFFFFAB62 C |
*RAM_MDGLBL_NULL : FFFFFFFFFFFFAB5E C |  RAM_MDGLOBAL :    FFFFFFFFFFFFAB5E C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFAB54 C |  RAM_MDMARSPALFD : FFFFFFFFFFFFA274 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFAB4E C |  RAM_MDSOUND :     FFFFFFFFFFFF9800 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFA702 C | *RAM_MDVBLKWAIT :  FFFFFFFFFFFFAB5A C |
 RAM_MDVIDEO :     FFFFFFFFFFFF9820 C |  RAM_MODEBUFF :    FFFFFFFFFFFF9000 C |
 RAM_PALETTE :     FFFFFFFFFFFFA174 C |  RAM_PALETTEFD :   FFFFFFFFFFFFA1F4 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFA742 C | *RAM_SCRN03_FILLER :       26008010 C |
 RAM_SCRN0_FRAME : FFFFFFFFFFFF900E C |  RAM_SCRN0_TIMER : FFFFFFFFFFFF9010 C |
 RAM_SNDSAVEREG :  FFFFFFFFFFFF9800 C |  RAM_SPRFRAME :    FFFFFFFFFFFF9038 C |
 RAM_SPRITES :     FFFFFFFFFFFF9D14 C |  RAM_SPRTIMER :    FFFFFFFFFFFF9036 C |
*RAM_SYSFLAGS :    FFFFFFFFFFFFAB5C C |  RAM_SYSRANDSEED : FFFFFFFFFFFFAB46 C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFFAB42 C |  RAM_THISSPEED :   FFFFFFFFFFFF9008 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFA6D4 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFA474 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFA6D6 C |  RAM_VDPREGS :     FFFFFFFFFFFFA6EA C |
 RAM_VERSCROLL :   FFFFFFFFFFFF9CC4 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFA554 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFA6D8 C |  RCHWIDTH :                      36 - |
 READROMB :                     EEA C |  READROMB.IMBACK :              EFA C |
 READROMB.W2 :                  F07 C |  READROMB.WAIT :                F03 C |
*RELAXED :                        0 - |  ROM_END :                   1358FC C |
 RRT :                           14 - |  SAMPLE_RATE :                 5622 - |
 SBEATACC :                      34 C |  SBEATPTCK_1 :                   32 C |
*SCN0_TIMER :                     8 - |  SCREEN_HEIGHT :                 E0 - |
 SCREEN_WIDTH :                 140 - | *SCRLBG_DATA :                    4 C |
*SCRLBG_FILL :                    2 C | *SCRLBG_FLAGS :                   0 C |
*SCRLBG_H :                      14 C | *SCRLBG_W :                      10 C |
*SCRLBG_X :                       8 C | *SCRLBG_Y :                       C C |
 SCRL_FBDATA :                   14 C |  SCRL_FBPOS :                    10 C |
 SCRL_FBPOS_Y :                   4 C |  SCRL_INTRL_H :                   A C |
 SCRL_INTRL_SIZE :                C C |  SCRL_INTRL_W :                   8 C |
*SCRL_NULL_W :                    6 C |  SCRL_XPOS :                     18 C |
 SCRL_XPOS_OLD :                  0 C |  SCRL_YPOS :                     1C C |
 SCRL_YPOS_OLD :                  2 C |  SETUPCHIP :                    557 C |
 SETUPCHIP.ALRDFND :            E1D C | *SETUPCHIP.BAD_INS :            DC3 C |
 SETUPCHIP.BUSY_S :             DED C |  SETUPCHIP.CHECK_CHNL :         D95 C |
 SETUPCHIP.CHECK_INS :          D82 C |  SETUPCHIP.CHIP_OUT :           CCE C |
 SETUPCHIP.CHIP_SWAP :          C92 C |  SETUPCHIP.CHKFREE :            E24 C |
 SETUPCHIP.CHK_TBL :            DF0 C |  SETUPCHIP.CHK_TBLN :           DD2 C |
 SETUPCHIP.CHNL_UNLINK :        AD2 C |  SETUPCHIP.CHP_UNLK :           D5B C |
 SETUPCHIP.CLR :                57C C |  SETUPCHIP.CONFM_RD :           721 C |
 SETUPCHIP.DAC_OUT :            CF3 C | *SETUPCHIP.DCUT :               BBD C |
 SETUPCHIP.DIFFR :              E09 C | *SETUPCHIP.DOFF :               BC2 C |
 SETUPCHIP.DO_CHNL :            59C C |  SETUPCHIP.EFFDAC_E :           8F4 C |
 SETUPCHIP.EFFDAC_F :           923 C |  SETUPCHIP.EFFFM_D :            88A C |
 SETUPCHIP.EFFFM_E :            8E6 C |  SETUPCHIP.EFFFM_F :            91C C |
 SETUPCHIP.EFFFM_X :            9F9 C |  SETUPCHIP.EFFPSG_D :           85C C |
 SETUPCHIP.EFFPSG_E :           8DC C |  SETUPCHIP.EFFPSG_F :           90E C |
 SETUPCHIP.EFFPWM_E :           901 C |  SETUPCHIP.EFFPWM_F :           929 C |
 SETUPCHIP.EFFPWM_X :           9E0 C |  SETUPCHIP.EFF_DAC :            833 C |
 SETUPCHIP.EFF_FM :             81C C |  SETUPCHIP.EFF_PSG :            809 C |
 SETUPCHIP.EFF_PWM :            845 C |  SETUPCHIP.E_FNEGD2 :           90B C |
 SETUPCHIP.E_GO :               9DF C |  SETUPCHIP.E_NEG :              8F0 C |
 SETUPCHIP.E_NEGD :             8FE C |  SETUPCHIP.E_NEGP :             919 C |
 SETUPCHIP.E_NOEF :             9DB C |  SETUPCHIP.E_NOF :              9D1 C |
 SETUPCHIP.FM3_OUT :            D01 C |  SETUPCHIP.FMPAN_LIST :         A33 C |
 SETUPCHIP.FMPICKINS :          734 C |  SETUPCHIP.FMSAME_INS :         732 C |
 SETUPCHIP.FM_CHNLKON :         C65 C |  SETUPCHIP.FM_KEYCUT :          C89 C |
 SETUPCHIP.FM_KEYOFF :          C8E C |  SETUPCHIP.FM_KPV :             C88 C |
 SETUPCHIP.FM_OUT :             D3D C |  SETUPCHIP.FNDLINK :            E19 C |
 SETUPCHIP.FNDSLOT :            E37 C |  SETUPCHIP.FND_OCT :            C42 C |
 SETUPCHIP.FREQINC_DAC :        961 C |  SETUPCHIP.FREQINC_FM :         971 C |
 SETUPCHIP.FREQINC_PSG :        997 C |  SETUPCHIP.FREQINC_PWM :        92D C |
 SETUPCHIP.FROM_NL :            CAB C |  SETUPCHIP.GET_OCT :            C37 C |
 SETUPCHIP.GO_DOWN :            8C3 C |  SETUPCHIP.GO_UP :              8CC C |
 SETUPCHIP.GRAB_DVAL :          8B9 C |  SETUPCHIP.GRAB_PRTM :          9C1 C |
 SETUPCHIP.INS_DAC :            67A C |  SETUPCHIP.INS_FM :             6C3 C |
 SETUPCHIP.INS_FM3 :            6B4 C |  SETUPCHIP.INS_PSG :            64B C |
 SETUPCHIP.INS_PSGN :           645 C |  SETUPCHIP.INS_PWM :            60A C |
 SETUPCHIP.LOWP :               881 C |  SETUPCHIP.LOWPF :              8B0 C |
 SETUPCHIP.MK_CHIP :            568 C |  SETUPCHIP.NEW :                DE4 C |
 SETUPCHIP.NEXT :               DF3 C |  SETUPCHIP.NODEFV :             B7F C |
 SETUPCHIP.NOTEPSG_C :          B45 C |  SETUPCHIP.NOTEPSG_FN :         B52 C |
 SETUPCHIP.NOTE_DAC :           B8A C |  SETUPCHIP.NOTE_FM :            BF1 C |
 SETUPCHIP.NOTE_FM3 :           BCD C |  SETUPCHIP.NOTE_PSG :           B20 C |
 SETUPCHIP.NOTE_PSGN :          AF3 C |  SETUPCHIP.NOTE_PWM :           A62 C |
 SETUPCHIP.NOT_PRDAC :          6D7 C |  SETUPCHIP.NO_CHNL :            5DD C |
 SETUPCHIP.NP2_N :              B1D C |  SETUPCHIP.NXT_CHNL :           58A C |
 SETUPCHIP.PCUT :               AD0 C |  SETUPCHIP.POFF :               ACC C |
 SETUPCHIP.PSGN_OUT :           D0F C |  SETUPCHIP.PSG_OUT :            D1D C |
 SETUPCHIP.PVMUCH :             785 C |  SETUPCHIP.PWMN_KPV :           AAD C |
 SETUPCHIP.PWM_KEYCUT :         AC8 C |  SETUPCHIP.PWM_KEYOFF :         AC4 C |
 SETUPCHIP.PWM_OUT :            CD0 C |  SETUPCHIP.P_OUT :              D3B C |
 SETUPCHIP.RAN_OUT :            5D3 C |  SETUPCHIP.RD_FMINS :           6EE C |
 SETUPCHIP.RD_NT3 :             C2C C |  SETUPCHIP.REQ_EFF :            7DB C |
 SETUPCHIP.REQ_INS :            5E3 C |  SETUPCHIP.REQ_NOTE :           A37 C |
 SETUPCHIP.REQ_VOL :            740 C |  SETUPCHIP.TBLLIST :            DC6 C |
 SETUPCHIP.VMUCH :              7AF C |  SETUPCHIP.VOL_FM :             7B6 C |
 SETUPCHIP.VOL_PSG :            793 C |  SETUPCHIP.VOL_PWM :            760 C |
 SET_LEFT :        FFFFFFFFC00004EC C |  SET_LEFT.LFT_OK : FFFFFFFFC000050E C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC000056E C |
 SET_RIGHT :       FFFFFFFFC0000574 C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC0000596 C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC00005F6 C |
 SET_STARTPAGE :                  0 - |  SH2_DEBUG :                      0 - |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              6000CD0 C |
 SH2_M_ERRADDR :            6000330 C |  SH2_M_ERRCODE :            6000340 C |
 SH2_M_ERRDMA :             6000334 C |  SH2_M_ERRILLG :            6000328 C |
 SH2_M_ERRINVL :            600032C C |  SH2_M_ERRNMI :             6000338 C |
 SH2_M_ERROR :              6000324 C |  SH2_M_ERRUSER :            600033C C |
 SH2_M_HOTSTART :           6000D0E C |  SH2_M_HOTSTART.WAIT_MD :   6000D3E C |
 SH2_M_HOTSTART.WAIT_SLV :  6000D44 C |  SH2_RAM :                  6006E50 C |
 SH2_SLAVE :                6000124 C |  SH2_S_ENTRY :              6001168 C |
 SH2_S_ERRADDR :            600035C C |  SH2_S_ERRCODE :            600036C C |
 SH2_S_ERRDMA :             6000360 C |  SH2_S_ERRILLG :            6000354 C |
 SH2_S_ERRINVL :            6000358 C |  SH2_S_ERRNMI :             6000364 C |
 SH2_S_ERROR :              6000350 C |  SH2_S_ERRUSER :            6000368 C |
 SH2_S_HOTSTART :           60011B4 C |  SH2_S_HOTSTART.CLR_ENBL :  60011EC C |
 SH2_S_HOTSTART.WAIT_MD :   600120C C |  SH2_S_HOTSTART.WAIT_MST :  6001212 C |
 SHIFT :                          2 - |  SHOWROM :                      EC9 C |
 SIN_TABLE :                60026D8 C |  SIZEOF_CAMERA :                 18 C |
 SIZEOF_DREQ :                  6A0 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MARSGBL :                40 C | *SIZEOF_MARSRAM :          26028010 C |
*SIZEOF_MARSRAM.HERE :     26028010 C |  SIZEOF_MARSSND :          26008010 C |
 SIZEOF_MARSSPR :                18 C |  SIZEOF_MARSSYS :          26007C90 C |
 SIZEOF_MARSVID :          26028010 C |  SIZEOF_MDBG :                   38 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFAB62 C |  SIZEOF_MDLOBJ :                 18 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFB202 C |  SIZEOF_MDSND :    FFFFFFFFFFFF9820 C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFAB5E C |  SIZEOF_MDVID :    FFFFFFFFFFFFA702 C |
 SIZEOF_MSCRL :                  20 C |  SIZEOF_PLYPZ :                  30 C |
 SIZEOF_POLYGN :                 38 C | *SIZEOF_SCRLBG :                 18 C |
*SIZEOF_SCRN03 :           26008014 C | *SIZEOF_SCRN04 :           26023F50 C |
 SIZEOF_SNDCHN :                 28 C |  SLAVE_IRQ :                6000270 C |
 SLAVE_LOOP :               600125C C |  SLAVE_LOOP.LIST :          600126C C |
 SLAVE_LOOP.SLV_EXIT :      60012BC C |  SLAVE_LOOP.SLV_TASK_1 :    60012AC C |
 SLAVE_LOOP.SLV_TASK_2 :    60012B8 C |  SLV :                           10 - |
 SLVPLGN_00 :      FFFFFFFFC0000384 C |  SLVPLGN_01 :      FFFFFFFFC00000C8 C |
*SLVPLGN_01.EXIT : FFFFFFFFC00000D4 C |
 SLVPLGN_01.HAS_PZ :                                       FFFFFFFFC00000D8 C |
 SLVPLGN_02 :      FFFFFFFFC0000080 C | *SLVPLGN_02.EXIT : FFFFFFFFC00000C4 C |
 SMPINS_BELL_ICE :          2048230 C |  SMPINS_BELL_ICE.END :      204BD5C C |
 SMPINS_BELL_ICE.START :    2048236 C |  SMPINS_BRASS1_HI :         204BD5C C |
 SMPINS_BRASS1_HI.END :     2053928 C |  SMPINS_BRASS1_HI.START :   204BD62 C |
 SMPINS_BRASS1_LOW :        2053928 C |  SMPINS_BRASS1_LOW.END :    205B4F4 C |
 SMPINS_BRASS1_LOW.START :  205392E C |  SMPINS_FOREST_1 :          205B4F4 C |
 SMPINS_FOREST_1.END :      205FDE0 C |  SMPINS_FOREST_1.START :    205B4FA C |
 SMPINS_KICK_JAM :          205FDE0 C |  SMPINS_KICK_JAM.END :      20608AC C |
 SMPINS_KICK_JAM.START :    205FDE6 C |  SMPINS_NADIE :             2069548 C |
 SMPINS_NADIE.END :         208FDC4 C |  SMPINS_NADIE.START :       206954E C |
 SMPINS_PIANO :             2091100 C |  SMPINS_PIANO.END :         20972FC C |
 SMPINS_PIANO.START :       2091106 C | *SMPINS_PIANO_1 :           20626C0 C |
 SMPINS_PIANO_1.END :       2066DDC C |  SMPINS_PIANO_1.START :     20626C6 C |
 SMPINS_PKICK :             208FDC4 C |  SMPINS_PKICK.END :         2090540 C |
 SMPINS_PKICK.START :       208FDCA C |  SMPINS_PTOM :              2090540 C |
 SMPINS_PTOM.END :          2091100 C |  SMPINS_PTOM.START :        2090546 C |
 SMPINS_SNARE_JAM :         20608AC C |  SMPINS_SNARE_JAM.END :     2061218 C |
 SMPINS_SNARE_JAM.START :   20608B2 C |  SMPINS_SNRTOM_1 :          2061218 C |
 SMPINS_SNRTOM_1.END :      20626C0 C |  SMPINS_SNRTOM_1.START :    206121E C |
*SMPINS_SSTR162A :          2066DDC C |  SMPINS_SSTR162A.END :      2069548 C |
 SMPINS_SSTR162A.START :    2066DE2 C |  SNDLOCKZ80 :                FF0080 C |
 SNDLOCKZ80.WAIT :           FF0088 C |  SNDREQCMD :                 FF0112 C |
 SNDREQCMD.WAIT_IN :         FF0112 C |  SNDREQCMD.WAIT_OUT :        FF0148 C |
 SNDREQ_ENTER :              FF009E C |  SNDREQ_ENTER.WAIT :         FF00C4 C |
 SNDREQ_EXIT :               FF00D4 C |  SNDREQ_SADDR :              FF00FC C |
 SNDREQ_SBYTE :              FF0104 C |  SNDREQ_SCMD :               FF00EA C |
*SNDREQ_SLONG :              FF00F8 C |  SNDREQ_SWORD :              FF0100 C |
 SNDUNLOCKZ80 :              FF0094 C |  SOUND_DMA_PAUSE :           FF0156 C |
 SOUND_DMA_PAUSE.RETRY :     FF015A C |  SOUND_DMA_PAUSE.SAFE :      FF0174 C |
 SOUND_DMA_RESUME :          FF0190 C |  SOUND_GLBBEATS :            FF0238 C |
 SOUND_INIT :                FF0026 C |  SOUND_INIT.CLEANUP :        FF004C C |
 SOUND_INIT.COPY :           FF0062 C |  SOUND_INIT.WAIT :           FF0036 C |
 SOUND_TRKPLAY :             FF01B2 C |  SOUND_TRKRESUME :           FF0206 C |
 SOUND_TRKSTOP :             FF01F0 C |  SOUND_TRKTICKS :            FF021C C |
 STACK_MSTR :               6040000 - |  STACK_SLV :                603F000 - |
 STANDBY :                        3 - |  STR_CURSOR :                FF2242 C |
 STR_GEMA :                  FF23A8 C |  STR_GEMAFM :                FF2546 C |
 STR_GEMAPSG :               FF2526 C |  STR_GEMAPWM :               FF2576 C |
 STR_GEMASTATUS :            FF242A C |  STR_PAGE1 :                 FF22E6 C |
*STR_PAGE1_INFO :            FF237A C |  STR_PAGE2 :                 FF2316 C |
 STR_PAGE3 :                 FF2352 C |  STR_PAGE3_BG :              FF2336 C |
 STR_PAGE4 :                 FF236E C |  STR_STATS :                 FF25AE C |
*STR_STATS.HERE :              2EC8 C |  STR_STATUS :                FF2388 C |
 STR_TITLE :                 FF2248 C |  SUPERSPRITE_TEST :          FF2148 C |
 SUPERSPRITE_TEST.NOD_S :    FF21E8 C |  SUPERSPRITE_TEST.NOD_S2 :   FF222C C |
 SUPERSPRITE_TEST.NOL_S :    FF21E0 C |  SUPERSPRITE_TEST.NOL_S2 :   FF2224 C |
 SUPERSPRITE_TEST.NOR_S :    FF21D8 C |  SUPERSPRITE_TEST.NOR_S2 :   FF221C C |
 SUPERSPRITE_TEST.NOT_HOLD : FF223A C |
 SUPERSPRITE_TEST.NOT_HOLD2 :                                        FF21F8 C |
 SUPERSPRITE_TEST.NOT_HOLD3 :                                        FF2198 C |
 SUPERSPRITE_TEST.NOT_HOLD4 :                                        FF21B2 C |
 SUPERSPRITE_TEST.NOU_S :    FF21F0 C |  SUPERSPRITE_TEST.NOU_S2 :   FF2234 C |
 SUPERSPRITE_TEST.WSPR :     FF217E C |  SUPERSPRITE_TEST_INIT :     FF20CC C |
 SUPERSPR_INIT :             FF18BA C |  SUPERSPR_MAIN :             FF18F2 C |
 SUPERSPR_MAIN.NOD_S :       FF1992 C |  SUPERSPR_MAIN.NOD_S2 :      FF19D6 C |
 SUPERSPR_MAIN.NOL_S :       FF198A C |  SUPERSPR_MAIN.NOL_S2 :      FF19CE C |
 SUPERSPR_MAIN.NOR_S :       FF1982 C |  SUPERSPR_MAIN.NOR_S2 :      FF19C6 C |
 SUPERSPR_MAIN.NOT_HOLD :    FF19E4 C |  SUPERSPR_MAIN.NOT_HOLD2 :   FF19A2 C |
 SUPERSPR_MAIN.NOT_HOLD3 :   FF1942 C |  SUPERSPR_MAIN.NOT_HOLD4 :   FF195C C |
 SUPERSPR_MAIN.NOU_S :       FF199A C |  SUPERSPR_MAIN.NOU_S2 :      FF19DE C |
 SUPERSPR_MAIN.WSPR :        FF1928 C |  SUPERSPR_TEST :            21328FC C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSTEM_DMA_ENTER :          FF127C C |  SYSTEM_DMA_EXIT :           FF1284 C |
 SYSTEM_INIT :               FF1140 C |  SYSTEM_INIT.CLRINPUT :      FF11B6 C |
 SYSTEM_INIT.WAIT :          FF114E C |  SYSTEM_INPUT :              FF12B8 C |
 SYSTEM_INPUT.EXIT :         FF12E6 C |  SYSTEM_INPUT.ID_03 :        FF130C C |
 SYSTEM_INPUT.ID_0D :        FF13B6 C |  SYSTEM_INPUT.INVALID :      FF13B0 C |
 SYSTEM_INPUT.LIST :         FF12EC C |  SYSTEM_INPUT.OLDPAD :       FF142E C |
 SYSTEM_INPUT.PICK_ID :      FF1434 C |  SYSTEM_INPUT.READ :         FF144A C |
 SYSTEM_INPUT.STEP_1 :       FF1456 C |  SYSTEM_INPUT.STEP_2 :       FF1462 C |
 SYSTEM_INPUT.THIS_ONE :     FF12CC C | *SYSTEM_INPUT.WAIT :         FF12B8 C |
 SYSTEM_INPUT.X_NEG :        FF137E C |  SYSTEM_INPUT.Y_NEG :        FF13AA C |
 SYSTEM_JUMPRAMCODE :        FF129A C |
 SYSTEM_JUMPRAMCODE.COPYME2 :                                        FF12AC C |
 SYSTEM_MARSUPDATE :         FF128C C | *SYSTEM_RANDOM :             FF1464 C |
 SYSTEM_ROMSENDDREQ :        882EC8 C |  SYSTEM_ROMSENDDREQ.BAD :    882F22 C |
 SYSTEM_ROMSENDDREQ.L0 :     882F12 C |
 SYSTEM_ROMSENDDREQ.WAIT_BIT :                                       882EFE C |
 SYSTEM_SETINTS :            FF15C0 C |  SYSTEM_SETINTS.NOHINT :     FF15E4 C |
 SYSTEM_SETINTS.NOVINT :     FF15D2 C | *SYSTEM_SINEWAVE :           FF14A2 C |
 SYSTEM_SINEWAVE.DONT_NEG :  FF14BE C | *SYSTEM_SINEWAVE_COS :       FF1482 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                      FF149C C |
*SYSTEM_SRAMINIT :           FF15E6 C |  SYSTEM_SRAMINIT.INITSAVE :  FF15FA C |
 SYSTEM_WAITFRAME :          FF11C2 C |  SYSTEM_WAITFRAME.WAIT_IN :  FF11DA C |
 SYSTEM_WAITFRAME.WAIT_LAG : FF11C8 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                60004B4 C |  S_IRQ_CMD :                60004B8 C |
*S_IRQ_CMD.COPY_1 :         600057C C |  S_IRQ_CMD.END_CHNLS :      60006A8 C |
 S_IRQ_CMD.EXIT_C :         600058C C |  S_IRQ_CMD.GO_EXIT :        60004FC C |
 S_IRQ_CMD.LIST :           6000508 C |  S_IRQ_CMD.MODE_1 :         600056C C |
 S_IRQ_CMD.MODE_2 :         6000548 C |  S_IRQ_CMD.MODE_3 :         600055C C |
 S_IRQ_CMD.NEXT_CHNL :      6000592 C |  S_IRQ_CMD.NO_CMDTASK :     60006C8 C |
 S_IRQ_CMD.NO_KEYOFF :      60005CC C |  S_IRQ_CMD.NO_PITCHBND :    60005F0 C |
 S_IRQ_CMD.NO_REQ :         600069E C |  S_IRQ_CMD.NO_REQ2 :        60005BA C |
 S_IRQ_CMD.NO_TRNSFREX :    60006A8 C |  S_IRQ_CMD.NO_VOLUMEBND :   6000608 C |
 S_IRQ_CMD.PWM_KEYCUT :     60005BE C |  S_IRQ_CMD.PWM_KEYOFF :     60005B2 C |
*S_IRQ_CMD.TAG_F0 :         6000500 C |  S_IRQ_CMD.TAG_FRT :        6000504 C |
 S_IRQ_CMD.WAIT_1 :         6000572 C |  S_IRQ_H :                  6000708 C |
 S_IRQ_PWM :       FFFFFFFFC0000014 C |
 S_IRQ_PWM.FROM_RV :                                       FFFFFFFFC00000C2 C |
 S_IRQ_PWM.LMUCH : FFFFFFFFC0000126 C |  S_IRQ_PWM.LOOP :  FFFFFFFFC0000040 C |
 S_IRQ_PWM.LOOP_ME :                                       FFFFFFFFC0000070 C |
 S_IRQ_PWM.MONO :  FFFFFFFFC00000CC C |
 S_IRQ_PWM.MONO_A :                                        FFFFFFFFC00000BA C |
 S_IRQ_PWM.MONO_C :                                        FFFFFFFFC000009A C |
 S_IRQ_PWM.MONO_L :                                        FFFFFFFFC000007C C |
 S_IRQ_PWM.NOT_ROM :                                       FFFFFFFFC00000AC C |
 S_IRQ_PWM.NO_L :  FFFFFFFFC00000E2 C |  S_IRQ_PWM.NO_R :  FFFFFFFFC00000E8 C |
 S_IRQ_PWM.ON :    FFFFFFFFC000004E C |  S_IRQ_PWM.READ :  FFFFFFFFC000007E C |
 S_IRQ_PWM.RMUCH : FFFFFFFFC000012C C |
 S_IRQ_PWM.SILENT :                                        FFFFFFFFC0000046 C |
 S_IRQ_PWM.SKIP :  FFFFFFFFC000010C C |  S_IRQ_V :                  6000724 C |
 S_IRQ_VRES :               6000740 C |  S_IRQ_VRES.RV_BUSY :       6000770 C |
 TAG_JR :          FFFFFFFFC00002A0 C |  TAG_WIDTH :       FFFFFFFFC00002A4 C |
 TAG_YHGHT :       FFFFFFFFC00002A8 C |  TBLFM :                       17E9 C |
 TBLFM3 :                      1809 C |  TBLFM6 :                      1811 C |
 TBLPSG :                      17C7 C |  TBLPSGN :                     17E1 C |
 TBLPWM :                      181B C | *TESTMARS_BG :              20A787C C |
*TESTMARS_YUI :             20C787C C | *TESTMARS_YUIP :             92EEF4 C |
 TEST_MAINSPD :                   2 - | *TEST_SPEED :                 20000 - |
 TEST_SPRSPD :                    2 - |  TEXTR_TEST_YUI :           20E087C C |
 TH :                      20000000 - |  TICKCNT :                     1E4A C |
 TICKFLAG :                    1E48 C | *TIME :                     2:11:47 - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    49D C |  TRACK_OUT.CLRFE :              4AC C |
 TRACK_OUT.NOCHIP :             4BE C |  TRANSFERROM :                  F17 C |
 TRANSFERROM.DOUBLE :           F36 C |  TRANSFERROM.TRANSFER :         F5B C |
 TRANSFERROM.X68KLAST :         F7A C |  TRANSFERROM.X68KLOOP :         F69 C |
 TRANSFERROM.X68KLPCONT :       F72 C |  TRANSFERROM.X68KLPWT :         F8C C |
 TRANSFERROM.X68KLSTCONT :      F84 C |  TRANSFERROM.X68KLSTWT :        F9F C |
 TRANSFERROM.X68KLSTWTLP :      FA3 C |  TRANSFERROM.X68KNOCARRY :      F55 C |
 TRANSFERROM.X68KPWTLP :        F90 C |  TRKBUFF_0 :                   198A C |
 TRKBUFF_1 :                   1A32 C |  TRKDATA_0 :                   1C00 C |
 TRKDATA_1 :                   1D00 C |  TRKHDOUT :                    1E60 C |
 TRKPOINTERS :                  1B5 C |  TRK_CACHNOTES :                 18 - |
 TRK_CMDREQ :                    1A - |  TRK_CURRBLK :                   11 - |
 TRK_HALFWAY :                   10 - |  TRK_READ :                       C - |
 TRK_ROMBLK :                     0 - |  TRK_ROMINS :                     6 - |
 TRK_ROMPATT :                    3 - |  TRK_ROMPATTRD :                  9 - |
 TRK_ROWPAUSE :                  17 - |  TRK_ROWS :                       E - |
 TRK_SETBLK :                    12 - |  TRK_SIZEINS :                   16 - |
 TRK_STATUS :                    13 - |  TRK_TICKSET :                   15 - |
 TRK_TICKTMR :                   14 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPDTRACK :                     1DA C |
 UPDTRACK.CLRF :                43F C |  UPDTRACK.DECROW :              258 C |
 UPDTRACK.DECROW_E :            25B C |  UPDTRACK.EFFECT_FILL :         41F C |
 UPDTRACK.EFF_A :               34A C |  UPDTRACK.EFF_B :               354 C |
 UPDTRACK.EFF_C :               36E C |  UPDTRACK.EXIT :                24D C |
 UPDTRACK.FIRST_FILL :          427 C |  UPDTRACK.GO_EFFECT :           45D C |
 UPDTRACK.GRAB_ASAP :           31D C |  UPDTRACK.HAS_NOTE :            264 C |
 UPDTRACK.INC_CPATT :           300 C |  UPDTRACK.NEXT_NOTE :           23B C |
 UPDTRACK.NEXT_TRACK :          379 C |  UPDTRACK.NOCHIP :              44F C |
 UPDTRACK.NO_EFF :              2C1 C |  UPDTRACK.NO_INS :              2A3 C |
 UPDTRACK.NO_NOTE :             298 C |  UPDTRACK.NO_VOL :              2AF C |
 UPDTRACK.OLD_TYPE :            28C C |  UPDTRACK.READ_TRACK :          1F2 C |
*UPDTRACK.RNOUT_CHNLS :         2FC C |  UPDTRACK.SET_TRACK :           380 C |
 UPDTRACK.SFXMD :               20C C |  UPDTRACK.SZGOOD :              3F6 C |
 UPDTRACK.SZMUCH :              3F1 C |  UPDTRACK.TRACK_END :           48A C |
 UPDTRACK.TRKEND_EFFC :         48B C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :               FF02DC C |
 VIDEO_CLEARSCREEN :         FF02DC C |  VIDEO_CLEARSCREEN.PMNEXT :  FF036C C |
 VIDEO_CLEARSCREEN.PNEXT :   FF035A C |  VIDEO_CLEARSCREEN.SNEXT :   FF0346 C |
 VIDEO_CLEARSCREEN.XNEXT :   FF0326 C |  VIDEO_CLEARSCREEN.YNEXT :   FF0336 C |
*VIDEO_COPY :                FF083A C |  VIDEO_COPY.DMAW :           FF084E C |
 VIDEO_COPY.DMAWE :          FF08A6 C | *VIDEO_DMABLAST :            FF0974 C |
 VIDEO_DMABLAST.END :        FF09CC C |  VIDEO_DMABLAST.EXIT :       FF09E4 C |
 VIDEO_DMABLAST.NEXT :       FF09A6 C | *VIDEO_DMAMKENTRY :          FF0756 C |
 VIDEO_DOPALFADE :           FF060C C |  VIDEO_DOPALFADE.ACTIVE :    FF0628 C |
 VIDEO_DOPALFADE.FADE_DONE : FF0630 C |  VIDEO_DOPALFADE.FADE_IN :   FF0632 C |
 VIDEO_DOPALFADE.FADE_LIST : FF062A C |  VIDEO_DOPALFADE.FADE_OUT :  FF06D6 C |
 VIDEO_DOPALFADE.NO_BLU :    FF06AE C |  VIDEO_DOPALFADE.NO_BLU_O :  FF0732 C |
 VIDEO_DOPALFADE.NO_FNSH :   FF06C6 C |  VIDEO_DOPALFADE.NO_FNSH_O : FF0746 C |
 VIDEO_DOPALFADE.NO_GRN :    FF068E C |  VIDEO_DOPALFADE.NO_GRN_O :  FF071A C |
 VIDEO_DOPALFADE.NO_MOVE :   FF06D4 C |  VIDEO_DOPALFADE.NO_MOVE_O : FF0754 C |
 VIDEO_DOPALFADE.NO_RED :    FF066E C |  VIDEO_DOPALFADE.NO_RED_O :  FF0702 C |
 VIDEO_DOPALFADE.NXT_PAL :   FF064C C |  VIDEO_DOPALFADE.NXT_PAL_O : FF06EA C |
 VIDEO_FADEPAL :             FF05DE C |  VIDEO_FADEPAL_MARS :        FF0A3A C |
 VIDEO_FILL :                FF07C8 C |  VIDEO_FILL.DMAW :           FF07DC C |
 VIDEO_FILL.DMAWE :          FF0822 C |  VIDEO_INIT :                FF0254 C |
 VIDEO_INIT.CLRRAM :         FF025E C | *VIDEO_INIT.EXIT :           FF0288 C |
 VIDEO_INIT.LOOP :           FF027A C |  VIDEO_LOADART :             FF08BE C |
 VIDEO_LOADART.FROM_RAM :    FF0960 C | *VIDEO_LOADMAP :             FF0374 C |
 VIDEO_LOADMAP.CONT :        FF039A C |  VIDEO_LOADMAP.NODBLE :      FF03BA C |
 VIDEO_LOADMAP.NONULL :      FF0398 C |  VIDEO_LOADMAP.XLOOP :       FF038A C |
 VIDEO_LOADMAP.YLOOP :       FF0380 C |  VIDEO_LOADPAL :             FF05E8 C |
*VIDEO_LOADPAL_MARS :        FF0A44 C |  VIDEO_MARSPALFADE :         FF0A6C C |
 VIDEO_MARSPALFADE.ACTIVE :  FF0A88 C |
 VIDEO_MARSPALFADE.FADE_DONE :                                       FF0A90 C |
 VIDEO_MARSPALFADE.FADE_IN : FF0A92 C |
 VIDEO_MARSPALFADE.FADE_LIST :                                       FF0A8A C |
 VIDEO_MARSPALFADE.FADE_OUT :                                        FF0B3C C |
 VIDEO_MARSPALFADE.NO_BLU :  FF0B0C C |
 VIDEO_MARSPALFADE.NO_BLU_O :                                        FF0B98 C |
 VIDEO_MARSPALFADE.NO_FNSH : FF0B2C C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                                       FF0BAE C |
 VIDEO_MARSPALFADE.NO_GRN :  FF0AEC C |
 VIDEO_MARSPALFADE.NO_GRN_O :                                        FF0B80 C |
 VIDEO_MARSPALFADE.NO_MOVE : FF0B3A C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                                       FF0BBC C |
 VIDEO_MARSPALFADE.NO_RED :  FF0ACC C |
 VIDEO_MARSPALFADE.NO_RED_O :                                        FF0B68 C |
 VIDEO_MARSPALFADE.NXT_PAL : FF0AAA C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                                       FF0B50 C |
 VIDEO_MARS_GFXMODE :        FF09E6 C | *VIDEO_MARS_WAITFRAME :      FF0A10 C |
 VIDEO_MARS_WAITFRAME.LATE : FF0A38 C |  VIDEO_MARS_WAITFRAME.WAIT : FF0A20 C |
 VIDEO_MARS_WAITINIT :       FF0A02 C |  VIDEO_PRINT :               FF03F8 C |
 VIDEO_PRINT.DONIBL :        FF0512 C |  VIDEO_PRINT.EXIT :          FF0482 C |
 VIDEO_PRINT.ISBYTE :        FF044C C |  VIDEO_PRINT.ISLONG :        FF0470 C |
 VIDEO_PRINT.ISWORD :        FF045E C |  VIDEO_PRINT.LNGLOOP :       FF0502 C |
 VIDEO_PRINT.LOOP :          FF040C C |  VIDEO_PRINT.LOWR :          FF0522 C |
 VIDEO_PRINT.NEWJUMP :       FF0406 C |  VIDEO_PRINT.NEXT :          FF042E C |
 VIDEO_PRINT.NEXTV :         FF048C C |  VIDEO_PRINT.NOTHING :       FF052E C |
 VIDEO_PRINT.PUTTEXT :       FF0420 C |  VIDEO_PRINT.SPECIAL :       FF0432 C |
 VIDEO_PRINT.VBYTE :         FF04BE C |  VIDEO_PRINT.VLONG :         FF050A C |
 VIDEO_PRINT.VWORD :         FF04E0 C |  VIDEO_PRINTINIT :           FF03CC C |
 VIDEO_PRINTPAL :            FF03E6 C |  VIDEO_RUNFADE :             FF05CC C |
 VIDEO_UPDATE :              FF0288 C | *VIDEO_UPDATE.EXIT :         FF02A6 C |
 VIDEO_UPDATE.LOOP :         FF029A C |  VIDMARS_PAL :               FF0A48 C |
 VIDMARS_PAL.LOOP :          FF0A60 C |  VIDMD_PAL :                 FF05EC C |
 VIDMD_PAL.LOOP :            FF0604 C |  VID_PICKLAYER :             FF0530 C |
 VID_PICKLAYER.GOLYR :       FF0580 C |  VID_PICKLAYER.NOWD :        FF056A C |
 VID_PICKLAYER.PLAWND :      FF0558 C |  VID_PICKLAYER.THISSZ :      FF05A0 C |
 VID_PICKLAYER.THISSZJ :     FF05C8 C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :              FF1660 C |
*VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1E56 C |  WAVE_LEN :                    1E4E C |
 WAVE_LOOP :                   1E51 C |  WAVE_PITCH :                  1E54 C |
 WAVE_START :                  1E4B C |  WAVFREQ_LIST :                1545 C |
*WHDFLG :                      16BE C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  882F26 C |  Z80_CODE_END :              884D8C C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
 Z80_RESET :                 A11200 - |  Z80_TOP :                   882F26 C |
*ZBANK :                       6000 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZSET_WTUNE :      FFFFFFFFFFFFFFE5 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - |  _CCR :                    FFFFFE92 - |
 _DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
 _DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - |  _DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - |  _FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
 _FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
 _JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - |  _OVERWRITE :              24020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - |  _VDPREG :                 20004100 - |
 __BACK0 :                  60003C0 C |  __BACK0.WAIT_DMA :         60003F6 C |
 __BACK1 :                  6000D82 C |  __BACK1.COPY_PAL :         6000D96 C |
 __BACK1.COPY_SAFE :        6000DC6 C | *__BACK1.NOT_READY :        6000DB2 C |
 __BACK1.NO_INIT :          6000DEE C |  __BACK1.TMR_OFF :          6000DFA C |
 __BACK2 :                  6000EC0 C |

   2116 symbols
    273 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 8/5/2022 2:11:47


  defined macros:
  ---------------

COLORME                               | FINISH                               
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ORG                                   | STRUCT                               
TESTME                                |

     13 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 8/5/2022 2:11:47


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               | DWORD                                

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 8/5/2022 2:11:47


  codepages:
  ----------

STANDARD (0 changed characters)


0.28 seconds assembly time

  18203 lines source file
  18816 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
