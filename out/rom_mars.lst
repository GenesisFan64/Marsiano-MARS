 AS V1.42 Beta [Bld 118] - source file mars.asm - page 1 - 5/13/2022 20:32:21


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; PROJECT MARSIANO
       4/       0 :                     ; +-----------------------------------------------------------------+
       5/       0 :                     
       6/       0 :                     		include	"system/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; AS Main settings
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 :                     		!org 0				; Start at 0
(1)   11/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later
(1)   12/       0 :                     		padding		off		; Dont pad dc.b
(1)   13/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
(1)   14/       0 :                     		supmode 	on 		; Supervisor mode
(1)   15/       0 :                     		dottedstructs	off		; If needed
(1)   16/       0 :                     		page 		0
(1)   17/       0 :                     
(1)   18/       0 :                     ; ====================================================================
(1)   19/       0 :                     ; ---------------------------------------------
(1)   20/       0 :                     ; Functions
(1)   21/       0 :                     ; ---------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; doubleword 	function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   24/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; for cells w/h use doubleword
(1)   25/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   26/       0 :                     
(1)   27/       0 :                     ; ====================================================================
(1)   28/       0 :                     ; ---------------------------------------------
(1)   29/       0 :                     ; Macros
(1)   30/       0 :                     ; ---------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 : =$0                 paddingSoFar set 0
(1)   33/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   34/       0 :                     
(1)   35/       0 :                     ; -------------------------------------
(1)   36/       0 :                     ; Reserve memory section
(1)   37/       0 :                     ;
(1)   38/       0 :                     ; NOTE: This doesn't work for Z80
(1)   39/       0 :                     ; -------------------------------------
(1)   40/       0 :                     
(1)   41/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   42/       0 :                     GLBL_LASTPC	set *
(1)   43/       0 :                     		dephase
(1)   44/       0 :                     GLBL_LASTORG	set *
(1)   45/       0 :                     		phase thisinput
(1)   46/       0 :                     		endm
(1)   47/       0 :                     		
(1)   48/       0 :                     ; -------------------------------------
(1)   49/       0 :                     ; Finish
(1)   50/       0 :                     ; -------------------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     finish		macro				; Then finish custom struct.
(1)   53/       0 :                     		!org GLBL_LASTORG
(1)   54/       0 :                     		phase GLBL_LASTPC
(1)   55/       0 :                     		endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; -------------------------------------
(1)   58/       0 :                     ; Custom ORG
(1)   59/       0 :                     ;
(1)   60/       0 :                     ; (from s2disasm)
(1)   61/       0 :                     ; -------------------------------------
(1)   62/       0 :                     
(1)   63/       0 :                     org macro address
(1)   64/       0 :                     	if notZ80(MOMCPU)
(1)   65/       0 :                     		if address < *
(1)   66/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   67/       0 :                     		elseif address > *
(1)   68/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)   69/       0 :                     			!org address
(1)   70/       0 :                     		endif
(1)   71/       0 :                     	else
(1)   72/       0 :                     		if address < $
(1)   73/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			while address > $
(1)   76/       0 :                     				db 0
(1)   77/       0 :                     			endm
(1)   78/       0 :                     		endif
(1)   79/       0 :                     	endif
(1)   80/       0 :                         endm
(1)   81/       0 :                     
       7/       0 :                     		include	"system/shared.asm"	; Shared Genesis/32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/MARS shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 : =$E                 MAX_MODELS	equ 14		; MAX 3D Models
(1)   12/       0 : =$20                MAX_SUPERSPR	equ 32		; Number of Super Sprites
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Structs
(1)   16/       0 :                     ;
(1)   17/       0 :                     ; NOTE: SIZES MUST BE ALIGNED BY 4-bytes
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 : (MACRO)             		struct 0
(1)   20/       0 : =$0                 GLBL_LASTPC     set *
(1)   20/       0 :                                     dephase
(1)   20/       0 : =$0                 GLBL_LASTORG    set *
(1)   20/       0 :                                     phase 0
(1)   21/       0 :                     mdl_data	ds.l 1			; Model data pointer, if zero: no model
(1)   22/       4 :                     mdl_option	ds.l 1			; Model options: pixelvalue add
(1)   23/       8 :                     mdl_x_pos	ds.l 1			; X position $000000.00
(1)   24/       C :                     mdl_y_pos	ds.l 1			; Y position $000000.00
(1)   25/      10 :                     mdl_z_pos	ds.l 1			; Z position $000000.00
(1)   26/      14 :                     mdl_x_rot	ds.l 1			; X rotation $000000.00
(1)   27/      18 :                     mdl_y_rot	ds.l 1			; Y rotation $000000.00
(1)   28/      1C :                     mdl_z_rot	ds.l 1			; Z rotation $000000.00
(1)   29/      20 :                     ; mdl_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(1)   30/      20 :                     ; mdl_animframe	ds.l 1			; Current frame in animation
(1)   31/      20 :                     ; mdl_animtimer	ds.l 1			; Animation timer
(1)   32/      20 :                     ; mdl_animspd	ds.l 1			; Animation USER speed setting
(1)   33/      20 :                     sizeof_mdlobj	ds.l 0
(1)   34/      20 : (MACRO)             		finish
(1)   34/       0 :                                     !org GLBL_LASTORG
(1)   34/       0 :                                     phase GLBL_LASTPC
(1)   35/       0 :                     
(1)   36/       0 :                     ; "Super" sprite
(1)   37/       0 : (MACRO)             		struct 0
(1)   37/       0 : =$0                 GLBL_LASTPC     set *
(1)   37/       0 :                                     dephase
(1)   37/       0 : =$0                 GLBL_LASTORG    set *
(1)   37/       0 :                                     phase 0
(1)   38/       0 :                     marsspr_data	ds.l 1		; Sprite pixel data (Cache'd or not), if 0 == end-of-list
(1)   39/       4 :                     marsspr_dwidth	ds.w 1		; WIDTH size of spritesheet
(1)   40/       6 :                     marsspr_indx	ds.w 1		; Palette index base
(1)   41/       8 :                     marsspr_x	ds.w 1		; Screen X position
(1)   42/       A :                     marsspr_y	ds.w 1		; Screen Y position
(1)   43/       C :                     marsspr_xs	ds.w 1		; Sprite X size (Scrn Xpos + this)
(1)   44/       E :                     marsspr_ys	ds.w 1		; Sprite Y size (Scrn Ypos + this)
(1)   45/      10 :                     marsspr_xtex	ds.b 1		; Texture X size
(1)   46/      11 :                     marsspr_ytex	ds.b 1		; Texture Y size
(1)   47/      12 :                     marsspr_xindx	ds.b 1		; Frame in X order
(1)   48/      13 :                     marsspr_yindx	ds.b 1		; Frame in Y order
(1)   49/      14 :                     sizeof_marsspr	ds.l 0
(1)   50/      14 : (MACRO)             		finish
(1)   50/       0 :                                     !org GLBL_LASTORG
(1)   50/       0 :                                     phase GLBL_LASTPC
(1)   51/       0 :                     
(1)   52/       0 :                     ; ------------------------------------------------
(1)   53/       0 :                     ; Structs for each pseudo-Screen, max $20 bytes
(1)   54/       0 :                     ;
(1)   55/       0 :                     ; Read these as:
(1)   56/       0 :                     ; RAM_MdDreq+Dreq_ScrnBuff
(1)   57/       0 :                     
(1)   58/       0 : (MACRO)             		struct 0
(1)   58/       0 : =$0                 GLBL_LASTPC     set *
(1)   58/       0 :                                     dephase
(1)   58/       0 : =$0                 GLBL_LASTORG    set *
(1)   58/       0 :                                     phase 0
(1)   59/       0 :                     Dreq_Scrn1_Data	ds.l 1		; Screen mode 1: Source image (SH2's area)
(1)   60/       4 :                     Dreq_Scrn1_Type	ds.l 1		; Source format: 0-NULL 1-Indexed 2-Direct 3-RLE
(1)   61/       8 : (MACRO)             		finish
(1)   61/       0 :                                     !org GLBL_LASTORG
(1)   61/       0 :                                     phase GLBL_LASTPC
(1)   62/       0 :                     
(1)   63/       0 : (MACRO)             		struct 0
(1)   63/       0 : =$0                 GLBL_LASTPC     set *
(1)   63/       0 :                                     dephase
(1)   63/       0 : =$0                 GLBL_LASTORG    set *
(1)   63/       0 :                                     phase 0
(1)   64/       0 :                     Dreq_Scrn2_Data	ds.l 1		; Screen mode 2: Source image (SH2's area)
(1)   65/       4 :                     Dreq_Scrn2_X	ds.l 1		; X pos 0000.0000
(1)   66/       8 :                     Dreq_Scrn2_Y	ds.l 1		; Y pos 0000.0000
(1)   67/       C :                     Dreq_Scrn2_W	ds.l 1		; Width
(1)   68/      10 :                     Dreq_Scrn2_H	ds.l 1		; Height
(1)   69/      14 : (MACRO)             		finish
(1)   69/       0 :                                     !org GLBL_LASTORG
(1)   69/       0 :                                     phase GLBL_LASTPC
(1)   70/       0 :                     
(1)   71/       0 : (MACRO)             		struct 0
(1)   71/       0 : =$0                 GLBL_LASTPC     set *
(1)   71/       0 :                                     dephase
(1)   71/       0 : =$0                 GLBL_LASTORG    set *
(1)   71/       0 :                                     phase 0
(1)   72/       0 :                     Dreq_SclData	ds.l 1		; Screen mode 3: Source data (SH2's area)
(1)   73/       4 :                     Dreq_SclX	ds.l 1		; X pos 0000.0000
(1)   74/       8 :                     Dreq_SclY	ds.l 1		; Y pos 0000.0000
(1)   75/       C :                     Dreq_SclWidth	ds.l 1		; Width
(1)   76/      10 :                     Dreq_SclHeight	ds.l 1		; Height
(1)   77/      14 :                     Dreq_SclDX	ds.l 1		; DX 0000.0000
(1)   78/      18 :                     Dreq_SclDY	ds.l 1		; DY 0000.0000
(1)   79/      1C :                     Dreq_SclMode	ds.l 1
(1)   80/      20 : (MACRO)             		finish
(1)   80/       0 :                                     !org GLBL_LASTORG
(1)   80/       0 :                                     phase GLBL_LASTPC
(1)   81/       0 :                     
(1)   82/       0 :                     ; ====================================================================
(1)   83/       0 :                     ; ----------------------------------------------------------------
(1)   84/       0 :                     ; DREQ RAM control, shared for both sides.
(1)   85/       0 :                     ;
(1)   86/       0 :                     ; To read these labels...
(1)   87/       0 :                     ;
(1)   88/       0 :                     ; On the Genesis Side:
(1)   89/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; On the 32X Side:
(1)   92/       0 :                     ; 	mov	#RAM_Mars_DreqRead+DREQ_LABEL,r1
(1)   93/       0 :                     ; ----------------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; *** List MUST be aligned by 8bytes (end with 0 or 8) ***
(1)   96/       0 :                     
(1)   97/       0 : (MACRO)             		struct 0
(1)   97/       0 : =$0                 GLBL_LASTPC     set *
(1)   97/       0 :                                     dephase
(1)   97/       0 : =$0                 GLBL_LASTORG    set *
(1)   97/       0 :                                     phase 0
(1)   98/       0 :                     Dreq_Palette	ds.w 256				; 256-color palette
(1)   99/     200 :                     Dreq_ScrnBuff	ds.b $20				; <-- only one buffer per screen
(1)  100/     220 :                     Dreq_Objects	ds.b sizeof_mdlobj*MAX_MODELS		; 3D Objects
(1)  101/     3E0 :                     Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_SUPERSPR	; SuperVDP sprites
(1)  102/     660 :                     sizeof_dreq	ds.l 0
(1)  103/     660 : (MACRO)             		finish
(1)  103/       0 :                                     !org GLBL_LASTORG
(1)  103/       0 :                                     phase GLBL_LASTPC
(1)  104/       0 :                     
(1)  105/       0 :                     ; MAX_DREQ		equ sizeof_dreq
(1)  106/       0 :                     
DREQ RAM uses: 660
(1)  108/       0 :                     		message "DREQ RAM uses: \{sizeof_dreq}"
(1)  110/       0 :                     
       8/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
(1)   40/       0 :                     ; ----------------------------------------------------------------
(1)   41/       0 :                     ; 32X registers
(1)   42/       0 :                     ; ----------------------------------------------------------------
(1)   43/       0 :                     
(1)   44/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   45/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   46/       0 :                     
       9/       0 :                     		include	"system/md/const.asm"	; Genesis variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis side constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$10                MAX_MDDMATSK	equ 16			; MAX DMA BLAST entries
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; Settings
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 : =$FFFF9000          MDRAM_START	equ $FFFF9000		; Start of Genesis working RAM
(1)   14/       0 : =$800               MAX_MDERAM	equ $800		; Maximum RAM for current Screen mode
(1)   15/       0 :                     
(1)   16/       0 :                     ; ====================================================================
(1)   17/       0 :                     ; ----------------------------------------------------------------
(1)   18/       0 :                     ; Input
(1)   19/       0 :                     ; ----------------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Controller
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; Controller buffer data (after calling System_Input)
(1)   26/       0 :                     ;
(1)   27/       0 :                     ; Type/Revision byte:
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; ID    |
(1)   30/       0 :                     ; $0D   | $00 - Original 3 button
(1)   31/       0 :                     ;       | $01 - 6 button version: XYZM
(1)   32/       0 :                     
(1)   33/       0 : (MACRO)             		struct 0
(1)   33/       0 : =$0                 GLBL_LASTPC     set *
(1)   33/       0 :                                     dephase
(1)   33/       0 : =$0                 GLBL_LASTORG    set *
(1)   33/       0 :                                     phase 0
(1)   34/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   35/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   36/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   37/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   38/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   39/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   40/       A :                     extr_3		ds.w 1
(1)   41/       C :                     extr_4		ds.w 1
(1)   42/       E :                     extr_5		ds.w 1
(1)   43/      10 :                     sizeof_input	ds.l 0
(1)   44/      10 : (MACRO)             		finish
(1)   44/       0 :                                     !org GLBL_LASTORG
(1)   44/       0 :                                     phase GLBL_LASTPC
(1)   45/       0 :                     
(1)   46/       0 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   47/       0 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   48/       0 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   49/       0 :                     
(1)   50/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   51/       0 : =$1                 JoyUp		equ $0001
(1)   52/       0 : =$2                 JoyDown		equ $0002
(1)   53/       0 : =$4                 JoyLeft		equ $0004
(1)   54/       0 : =$8                 JoyRight	equ $0008
(1)   55/       0 : =$10                JoyB		equ $0010
(1)   56/       0 : =$20                JoyC		equ $0020
(1)   57/       0 : =$40                JoyA		equ $0040
(1)   58/       0 : =$80                JoyStart	equ $0080
(1)   59/       0 : =$100               JoyZ		equ $0100
(1)   60/       0 : =$200               JoyY		equ $0200
(1)   61/       0 : =$400               JoyX		equ $0400
(1)   62/       0 : =$800               JoyMode		equ $0800
(1)   63/       0 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   64/       0 : =$1                 bitJoyDown	equ 1
(1)   65/       0 : =$2                 bitJoyLeft	equ 2
(1)   66/       0 : =$3                 bitJoyRight	equ 3
(1)   67/       0 : =$4                 bitJoyB		equ 4
(1)   68/       0 : =$5                 bitJoyC		equ 5
(1)   69/       0 : =$6                 bitJoyA		equ 6
(1)   70/       0 : =$7                 bitJoyStart	equ 7
(1)   71/       0 : =$8                 bitJoyZ		equ 8
(1)   72/       0 : =$9                 bitJoyY		equ 9
(1)   73/       0 : =$A                 bitJoyX		equ 10
(1)   74/       0 : =$B                 bitJoyMode	equ 11
(1)   75/       0 :                     
(1)   76/       0 :                     ; Mega Mouse
(1)   77/       0 :                     ; Read WORD in +on_hold or +on_press
(1)   78/       0 : =$1                 ClickR		equ $0001
(1)   79/       0 : =$2                 ClickL		equ $0002
(1)   80/       0 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   81/       0 : =$8                 ClickS		equ $0008	; (Untested)
(1)   82/       0 : =$0                 bitClickR	equ 0
(1)   83/       0 : =$1                 bitClickL	equ 1
(1)   84/       0 : =$2                 bitClickM	equ 2
(1)   85/       0 : =$3                 bitClickS	equ 3
(1)   86/       0 :                     
(1)   87/       0 :                     ; ====================================================================
(1)   88/       0 :                     ; ----------------------------------------------------------------
(1)   89/       0 :                     ; System RAM
(1)   90/       0 :                     ; ----------------------------------------------------------------
(1)   91/       0 :                     
(1)   92/       0 : (MACRO)             		struct RAM_MdSystem
(1)   92/       0 : =$0                 GLBL_LASTPC     set *
(1)   92/       0 :                                     dephase
(1)   92/       0 : =$0                 GLBL_LASTORG    set *
(1)   92/FFFFFFFFFFFFA622 :                                     phase RAM_MDSYSTEM
(1)   93/FFFFFFFFFFFFA622 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   94/FFFFFFFFFFFFA662 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)   95/FFFFFFFFFFFFA862 :                     RAM_DmaCode	ds.b $200
(1)   96/FFFFFFFFFFFFAA62 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   97/FFFFFFFFFFFFAA66 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   98/FFFFFFFFFFFFAA6A :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   99/FFFFFFFFFFFFAA6E :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  100/FFFFFFFFFFFFAA74 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  101/FFFFFFFFFFFFAA7A :                     RAM_MdVBlkWait	ds.w 1
(1)  102/FFFFFFFFFFFFAA7C :                     RAM_SysFlags	ds.w 1				; Game engine flags (note: it's a byte)
(1)  103/FFFFFFFFFFFFAA7E :                     sizeof_mdsys	ds.l 0
(1)  104/FFFFFFFFFFFFAA7E : (MACRO)             		finish
(1)  104/FFFFFFFFFFFFA622 :                                     !org GLBL_LASTORG
(1)  104/       0 :                                     phase GLBL_LASTPC
(1)  105/       0 :                     
(1)  106/       0 :                     ; ====================================================================
(1)  107/       0 :                     ; ----------------------------------------------------------------
(1)  108/       0 :                     ; Sound 68k RAM
(1)  109/       0 :                     ; ----------------------------------------------------------------
(1)  110/       0 :                     
(1)  111/       0 : (MACRO)             		struct RAM_MdSound
(1)  111/       0 : =$0                 GLBL_LASTPC     set *
(1)  111/       0 :                                     dephase
(1)  111/       0 : =$0                 GLBL_LASTORG    set *
(1)  111/FFFFFFFFFFFF9800 :                                     phase RAM_MDSOUND
(1)  112/FFFFFFFFFFFF9800 :                     RAM_SndSaveReg	ds.l 8			; Backup registers here instead of stack (TODO)
(1)  113/FFFFFFFFFFFF9820 :                     sizeof_mdsnd	ds.l 0
(1)  114/FFFFFFFFFFFF9820 : (MACRO)             		finish
(1)  114/FFFFFFFFFFFF9800 :                                     !org GLBL_LASTORG
(1)  114/       0 :                                     phase GLBL_LASTPC
(1)  115/       0 :                     		
(1)  116/       0 :                     ; ====================================================================
(1)  117/       0 :                     ; ----------------------------------------------------------------
(1)  118/       0 :                     ; Video RAM
(1)  119/       0 :                     ; ----------------------------------------------------------------
(1)  120/       0 :                     
(1)  121/       0 : (MACRO)             			struct RAM_MdVideo
(1)  121/       0 : =$0                 GLBL_LASTPC     set *
(1)  121/       0 :                                     dephase
(1)  121/       0 : =$0                 GLBL_LASTORG    set *
(1)  121/FFFFFFFFFFFF9820 :                                     phase RAM_MDVIDEO
(1)  122/FFFFFFFFFFFF9820 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  123/FFFFFFFFFFFF9BE0 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data (TODO: check if this is the correct size)
(1)  124/FFFFFFFFFFFF9C30 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  125/FFFFFFFFFFFFA090 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  126/FFFFFFFFFFFFA110 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  127/FFFFFFFFFFFFA190 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out
(1)  128/FFFFFFFFFFFFA390 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST Transfer list for VBlank
(1)  129/FFFFFFFFFFFFA470 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  130/FFFFFFFFFFFFA5F0 :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  131/FFFFFFFFFFFFA5F2 :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  132/FFFFFFFFFFFFA5F4 :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  133/FFFFFFFFFFFFA5F6 :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  134/FFFFFFFFFFFFA5F8 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  135/FFFFFFFFFFFFA5FA :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  136/FFFFFFFFFFFFA5FC :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer (Write to both FadeMdDel and here)
(1)  137/FFFFFFFFFFFFA5FE :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  138/FFFFFFFFFFFFA600 :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize Genesis FadeIn/Out)
(1)  139/FFFFFFFFFFFFA602 :                     RAM_FadeMarsDelay	ds.w 1
(1)  140/FFFFFFFFFFFFA604 :                     RAM_FadeMarsTmr		ds.w 1
(1)  141/FFFFFFFFFFFFA606 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  142/FFFFFFFFFFFFA60A :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  143/FFFFFFFFFFFFA622 :                     sizeof_mdvid		ds.l 0
(1)  144/FFFFFFFFFFFFA624 : (MACRO)             			finish
(1)  144/FFFFFFFFFFFF9820 :                                     !org GLBL_LASTORG
(1)  144/       0 :                                     phase GLBL_LASTPC
(1)  145/       0 :                     
(1)  146/       0 :                     ; ====================================================================
(1)  147/       0 :                     ; ----------------------------------------------------------------
(1)  148/       0 :                     ; MD RAM
(1)  149/       0 :                     ;
(1)  150/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)  151/       0 :                     ; $FFFD00 to $FFFDFF is reserved for the MAIN-CPU's vectors
(1)  152/       0 :                     ; ----------------------------------------------------------------
(1)  153/       0 :                     
(1)  154/       0 : (MACRO)             		struct MDRAM_START
(1)  154/       0 : =$0                 GLBL_LASTPC     set *
(1)  154/       0 :                                     dephase
(1)  154/       0 : =$0                 GLBL_LASTORG    set *
(1)  154/FFFFFFFFFFFF9000 :                                     phase MDRAM_START
(1)  164/FFFFFFFFFFFF9000 :                     RAM_ModeBuff	ds.b MAX_MDERAM			; Second pass: sizes are set
(1)  165/FFFFFFFFFFFF9800 :                     RAM_MdSound	ds.b sizeof_mdsnd-RAM_MdSound
(1)  166/FFFFFFFFFFFF9820 :                     RAM_MdVideo	ds.b sizeof_mdvid-RAM_MdVideo
(1)  167/FFFFFFFFFFFFA622 :                     RAM_MdSystem	ds.b sizeof_mdsys-RAM_MdSystem
(1)  168/FFFFFFFFFFFFAA7E :                     RAM_MdGlobal	ds.b sizeof_mdglbl-RAM_MdGlobal
(1)  169/FFFFFFFFFFFFAA82 :                     RAM_MdDreq	ds.b sizeof_dreq
(1)  170/FFFFFFFFFFFFB0E2 :                     sizeof_mdram	ds.l 0
(1)  172/FFFFFFFFFFFFB0E4 :                     
MD RAM: FF9000-FFB0E2
(1)  174/FFFFFFFFFFFFB0E4 :                     		message "MD RAM: \{(MDRAM_START)&$FFFFFF}-\{(sizeof_mdram)&$FFFFFF}"
(1)  176/FFFFFFFFFFFFB0E4 : (MACRO)             		finish
(1)  176/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)  176/       0 :                                     phase GLBL_LASTPC
(1)  177/       0 :                     
      10/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot rom & system registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data (all 4MB), Locked if RV bit is active.
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer section
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; Cache-thru OR | value
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers (Genesis side: sysmars_reg)
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer, first 240 are for the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite, $00-byte writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode register
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode register
(1)   88/       0 : =$2                 shift		equ	$02		; Shift Control register
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR:		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      11/       0 :                     		include "code/global.asm"	; Global user variables on the Genesis
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global RAM variables on the Genesis side
(1)    4/       0 :                     ; (Score, Level, etc.)
(1)    5/       0 :                     ; ----------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 : (MACRO)             		struct RAM_MdGlobal
(1)    7/       0 : =$0                 GLBL_LASTPC     set *
(1)    7/       0 :                                     dephase
(1)    7/       0 : =$0                 GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFAA7E :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFAA7E :                     RAM_MdGlbl_Null	ds.l 1
(1)    9/FFFFFFFFFFFFAA82 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFAA82 : (MACRO)             		finish
(1)   10/FFFFFFFFFFFFAA7E :                                     !org GLBL_LASTORG
(1)   10/       0 :                                     phase GLBL_LASTPC
(1)   11/       0 :                     
(1)   12/       0 :                     
      12/       0 :                     		include	"system/head.asm"	; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM HEADER FOR 32X
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; These labels still work even if the 32X isn't present
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 0000 0000           		dc.l 0				; Stack point
(1)    9/       4 : 0000 03F0           		dc.l $3F0			; Entry point (always $3F0)
(1)   10/       8 : 0000 089A           		dc.l MD_ErrBus			; Bus error
(1)   11/       C : 0000 089A           		dc.l MD_ErrAddr			; Address error
(1)   12/      10 : 0000 089A           		dc.l MD_ErrIll			; ILLEGAL Instruction
(1)   13/      14 : 0000 089A           		dc.l MD_ErrZDiv			; Divide by 0
(1)   14/      18 : 0000 089A           		dc.l MD_ErrChk			; CHK Instruction
(1)   15/      1C : 0000 089A           		dc.l MD_ErrTrapV		; TRAPV Instruction
(1)   16/      20 : 0000 089A           		dc.l MD_ErrPrivl		; Privilege violation
(1)   17/      24 : 0000 089A           		dc.l MD_Trace			; Trace
(1)   18/      28 : 0000 089A           		dc.l MD_Line1010		; Line 1010 Emulator
(1)   19/      2C : 0000 089A           		dc.l MD_Line1111		; Line 1111 Emulator
(1)   20/      30 : 0000 089A           		dc.l MD_ErrorEx			; Error exception
(1)   21/      34 : 0000 089A           		dc.l MD_ErrorEx
(1)   22/      38 : 0000 089A           		dc.l MD_ErrorEx
(1)   23/      3C : 0000 089A           		dc.l MD_ErrorEx
(1)   24/      40 : 0000 089A           		dc.l MD_ErrorEx
(1)   25/      44 : 0000 089A           		dc.l MD_ErrorEx
(1)   26/      48 : 0000 089A           		dc.l MD_ErrorEx
(1)   27/      4C : 0000 089A           		dc.l MD_ErrorEx
(1)   28/      50 : 0000 089A           		dc.l MD_ErrorEx
(1)   29/      54 : 0000 089A           		dc.l MD_ErrorEx
(1)   30/      58 : 0000 089A           		dc.l MD_ErrorEx
(1)   31/      5C : 0000 089A           		dc.l MD_ErrorEx
(1)   32/      60 : 0000 089A           		dc.l MD_ErrorEx
(1)   33/      64 : 0000 089A           		dc.l MD_ErrorTrap
(1)   34/      68 : 0000 089A           		dc.l MD_ErrorTrap
(1)   35/      6C : 0000 089A           		dc.l MD_ErrorTrap
(1)   36/      70 : FFFF AA74           		dc.l RAM_MdMarsHInt		; RAM jump for HBlank (JMP xxxx xxxx)
(1)   37/      74 : 0000 089A           		dc.l MD_ErrorTrap
(1)   38/      78 : FFFF AA6E           		dc.l RAM_MdMarsVInt		; RAM jump for VBlank (JMP xxxx xxxx)
(1)   39/      7C : 0000 089A           		dc.l MD_ErrorTrap
(1)   40/      80 : 0000 089A           		dc.l MD_ErrorTrap
(1)   41/      84 : 0000 089A           		dc.l MD_ErrorTrap
(1)   42/      88 : 0000 089A           		dc.l MD_ErrorTrap
(1)   43/      8C : 0000 089A           		dc.l MD_ErrorTrap
(1)   44/      90 : 0000 089A           		dc.l MD_ErrorTrap
(1)   45/      94 : 0000 089A           		dc.l MD_ErrorTrap
(1)   46/      98 : 0000 089A           		dc.l MD_ErrorTrap
(1)   47/      9C : 0000 089A           		dc.l MD_ErrorTrap
(1)   48/      A0 : 0000 089A           		dc.l MD_ErrorTrap
(1)   49/      A4 : 0000 089A           		dc.l MD_ErrorTrap
(1)   50/      A8 : 0000 089A           		dc.l MD_ErrorTrap
(1)   51/      AC : 0000 089A           		dc.l MD_ErrorTrap
(1)   52/      B0 : 0000 089A           		dc.l MD_ErrorTrap
(1)   53/      B4 : 0000 089A           		dc.l MD_ErrorTrap
(1)   54/      B8 : 0000 089A           		dc.l MD_ErrorTrap
(1)   55/      BC : 0000 089A           		dc.l MD_ErrorTrap
(1)   56/      C0 : 0000 089A           		dc.l MD_ErrorTrap
(1)   57/      C4 : 0000 089A           		dc.l MD_ErrorTrap
(1)   58/      C8 : 0000 089A           		dc.l MD_ErrorTrap
(1)   59/      CC : 0000 089A           		dc.l MD_ErrorTrap
(1)   60/      D0 : 0000 089A           		dc.l MD_ErrorTrap
(1)   61/      D4 : 0000 089A           		dc.l MD_ErrorTrap
(1)   62/      D8 : 0000 089A           		dc.l MD_ErrorTrap
(1)   63/      DC : 0000 089A           		dc.l MD_ErrorTrap
(1)   64/      E0 : 0000 089A           		dc.l MD_ErrorTrap
(1)   65/      E4 : 0000 089A           		dc.l MD_ErrorTrap
(1)   66/      E8 : 0000 089A           		dc.l MD_ErrorTrap
(1)   67/      EC : 0000 089A           		dc.l MD_ErrorTrap
(1)   68/      F0 : 0000 089A           		dc.l MD_ErrorTrap
(1)   69/      F4 : 0000 089A           		dc.l MD_ErrorTrap
(1)   70/      F8 : 0000 089A           		dc.l MD_ErrorTrap
(1)   71/      FC : 0000 089A           		dc.l MD_ErrorTrap
(1)   72/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   73/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2022.???"
                    3230 3232 2E3F 3F3F 
(1)   74/     120 : 5072 6F79 6563 746F 		dc.b "Proyecto MARSIANO                               "
                    204D 4152 5349 414E 
                    4F20 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   75/     150 : 5072 6F6A 6563 7420 		dc.b "Project MARSIANO                                "
                    4D41 5253 4941 4E4F 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     180 : 474D 2048 4F4D 4542 		dc.b "GM HOMEBREW-00"
                    5245 572D 3030      
(1)   77/     18E : 0000                		dc.w 0
(1)   78/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   79/     1A0 : 0000 0000           		dc.l 0
(1)   80/     1A4 : 0012 6418           		dc.l ROM_END
(1)   81/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   82/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   83/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   84/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   85/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   86/     1BC :                     		align $1F0
(1)   87/     1F0 : 5520 2020 2020 2020 		dc.b "U               "
                    2020 2020 2020 2020 
(1)   88/     200 :                     
(1)   89/     200 :                     ; ====================================================================
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     ; Second header for 32X
(1)   92/     200 :                     ;
(1)   93/     200 :                     ; These new jumps are for the 68K if the 32X is currently
(1)   94/     200 :                     ; active.
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   98/     206 : 4EF9 0088 089A      		jmp	($880000|MD_ErrBus).l			; Bus error
(1)   99/     20C : 4EF9 0088 089A      		jmp	($880000|MD_ErrAddr).l			; Address error
(1)  100/     212 : 4EF9 0088 089A      		jmp	($880000|MD_ErrIll).l			; ILLEGAL Instruction
(1)  101/     218 : 4EF9 0088 089A      		jmp	($880000|MD_ErrZDiv).l			; Divide by 0
(1)  102/     21E : 4EF9 0088 089A      		jmp	($880000|MD_ErrChk).l			; CHK Instruction
(1)  103/     224 : 4EF9 0088 089A      		jmp	($880000|MD_ErrTrapV).l			; TRAPV Instruction
(1)  104/     22A : 4EF9 0088 089A      		jmp	($880000|MD_ErrPrivl).l			; Privilege violation
(1)  105/     230 : 4EF9 0088 089A      		jmp	($880000|MD_Trace).l			; Trace
(1)  106/     236 : 4EF9 0088 089A      		jmp	($880000|MD_Line1010).l			; Line 1010 Emulator
(1)  107/     23C : 4EF9 0088 089A      		jmp	($880000|MD_Line1111).l			; Line 1111 Emulator
(1)  108/     242 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l			; Error exception
(1)  109/     248 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  110/     24E : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  111/     254 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  112/     25A : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  113/     260 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  114/     266 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  115/     26C : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  116/     272 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  117/     278 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  118/     27E : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  119/     284 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  120/     28A : 4EF9 0088 089A      		jmp	($880000|MD_ErrorEx).l
(1)  121/     290 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  122/     296 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     29C : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2A2 : 4EF9 FFFF AA74      		jmp	(RAM_MdMarsHInt).l			; RAM jump for HBlank (JMP xxxx xxxx)
(1)  125/     2A8 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2AE : 4EF9 FFFF AA6E      		jmp	(RAM_MdMarsVInt).l			; RAM jump for VBlank (JMP xxxx xxxx)
(1)  127/     2B4 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2BA : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2C0 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2C6 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2CC : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2D2 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2D8 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2DE : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     2E4 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     2EA : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     2F0 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     2F6 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     2FC : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     302 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     308 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     30E : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     314 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     31A : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     320 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     326 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     32C : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     332 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     338 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     33E : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     344 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     34A : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     350 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     356 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     35C : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  156/     362 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  157/     368 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  158/     36E : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  159/     374 : 4EF9 0088 089A      		jmp	($880000|MD_ErrorTrap).l
(1)  160/     37A :                     
(1)  161/     37A :                     ; ----------------------------------------------------------------
(1)  162/     37A :                     
(1)  163/     37A :                     		align $3C0
(1)  164/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  165/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  166/     3D4 : 0002 63C0           		dc.l MARS_RAMDATA			; Set to 0 if SH2 code points to ROM
(1)  167/     3D8 : 0000 0000           		dc.l 0					; Zero.
(1)  168/     3DC : 0000 7CD0           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; Set to 4 if SH2 code points to ROM
(1)  169/     3E0 : 0600 11B0           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map area)
(1)  170/     3E4 : 0600 172C           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map area)
(1)  171/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  172/     3EC : 0600 0124           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  173/     3F0 :                     		binclude "system/mars/data/security.bin"
(1)  174/     800 :                     
(1)  175/     800 :                     ; ====================================================================
(1)  176/     800 :                     ; ----------------------------------------------------------------
(1)  177/     800 :                     ; Entry point, this must be located at $800
(1)  178/     800 :                     ;
(1)  179/     800 :                     ; At this point, the initialization
(1)  180/     800 :                     ; returns the following bits:
(1)  181/     800 :                     ;
(1)  182/     800 :                     ; d0: %h0000000 rsc000ti
(1)  183/     800 :                     ; 	h - Cold start / Hot Start
(1)  184/     800 :                     ; 	r - SDRAM Self Check pass or error
(1)  185/     800 :                     ; 	s - Security check pass or error
(1)  186/     800 :                     ; 	c - Checksum pass or error
(1)  187/     800 :                     ; 	t - TV mode pass or error
(1)  188/     800 :                     ; 	i - MARS ID pass or error
(1)  189/     800 :                     ;
(1)  190/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  191/     800 :                     ; 	m - MARS TV mode
(1)  192/     800 :                     ; 	j - Country: Japan / Overseas
(1)  193/     800 :                     ; 	d - MD TV mode
(1)  194/     800 :                     ; 	k - DISK connected: Yes / No
(1)  195/     800 :                     ; 	v - Version
(1)  196/     800 :                     ;
(1)  197/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  198/     800 :                     ; 	cc: Test passed
(1)  199/     800 :                     ; 	cs: Test failed**
(1)  200/     800 :                     ;
(1)  201/     800 :                     ; ** HARDWARE BUG: This may still trigger if using
(1)  202/     800 :                     ; DREQ, DMA or Watchdog, and/or pressing RESET so many times.
(1)  203/     800 :                     ; (Found this on VRDX)
(1)  204/     800 :                     ; workaround: after jumping into the "No 32X detected" loop,
(1)  205/     800 :                     ; check for the checksum bit. and if it passes: Init as usual.
(1)  206/     800 :                     ; ----------------------------------------------------------------
(1)  207/     800 :                     
(1)  208/     800 :                     MARS_Entry:
(1)  209/     800 : 657A                		bcs	.no_mars
(1)  210/     802 : 23FC 0000 0000 FFFF 		move.l	#0,(RAM_initflug).l	; Reset "INIT" flag
                    AA6A                
(1)  211/     80C : 0800 000F           		btst	#15,d0			; Soft reset?
(1)  212/     810 : 6700 00A0           		beq	MD_Init
(1)  213/     814 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5	; a5 - MARS register
(1)  214/     81A : 082D 0000 0001      		btst.b	#0,1(a5)		; 32X enabled?
(1)  215/     820 : 664A                		bne	.adapter_enbl		; If yes, start booting
(1)  216/     822 : 41FA 0020           		lea	.ram_code(pc),a0	; Copy the adapter-retry code to RAM
(1)  217/     826 : 43F9 00FF 0000      		lea	($FF0000).l,a1		; and jump there.
(1)  218/     82C : 22D8                		move.l	(a0)+,(a1)+
(1)  219/     82E : 22D8                		move.l	(a0)+,(a1)+
(1)  220/     830 : 22D8                		move.l	(a0)+,(a1)+
(1)  221/     832 : 22D8                		move.l	(a0)+,(a1)+
(1)  222/     834 : 22D8                		move.l	(a0)+,(a1)+
(1)  223/     836 : 22D8                		move.l	(a0)+,(a1)+
(1)  224/     838 : 22D8                		move.l	(a0)+,(a1)+
(1)  225/     83A : 22D8                		move.l	(a0)+,(a1)+
(1)  226/     83C : 41F9 00FF 0000      		lea	($FF0000).l,a0
(1)  227/     842 : 4ED0                		jmp	(a0)
(1)  228/     844 :                     .ram_code:
(1)  229/     844 : 1ABC 0001           		move.b	#1,adapter(a5)		; Enable adapter.
(1)  230/     848 : 41FA 000A           		lea	.restarticd(pc),a0	; JUMP to the following code in
(1)  231/     84C : D1FC 0088 0000      		adda.l	#$880000,a0		; the new 68k location
(1)  232/     852 : 4ED0                		jmp	(a0)
(1)  233/     854 :                     .restarticd:
(1)  234/     854 : 4BF9 00A1 0000      		lea	($A10000).l,a5		; a5 - MD's I/O area
(1)  235/     85A : 287C FFFF FFC0      		move.l	#-64,a4			; a4 - $FFFFFF9C
(1)  236/     860 : 3E3C 0F3C           		move.w	#3900,d7		; d7 - loop this many times
(1)  237/     864 : 43F9 0088 06E4      		lea	($880000+$6E4),a1	; Jump to ?res_wait (check ICD_MARS.PRG)
(1)  238/     86A : 4ED1                		jmp	(a1)
(1)  239/     86C :                     .adapter_enbl:
(1)  240/     86C : 4BF9 00A1 5100      		lea	(sysmars_reg),a5
(1)  241/     872 : 082D 0001 0001      		btst.b	#1,1(a5)		; SH2 Reset request?
(1)  242/     878 : 667A                		bne	MD_HotStart		; If not, we are on hotstart
(1)  243/     87A : 60D8                		bra.s	.restarticd
(1)  244/     87C :                     
(1)  245/     87C :                     ; ====================================================================
(1)  246/     87C :                     ; ----------------------------------------------------------------
(1)  247/     87C :                     ; If 32X is not detected...
(1)  248/     87C :                     ;
(1)  249/     87C :                     ; This only works in emulators, though.
(1)  250/     87C :                     ; ----------------------------------------------------------------
(1)  251/     87C :                     
(1)  252/     87C :                     .no_mars:
(1)  253/     87C : 0800 0005           		btst	#5,d0			; If for some reason we got here...
(1)  254/     880 : 6630                		bne.s	MD_Init			;
(1)  255/     882 :                     
(1)  256/     882 :                     	; And if 32X is not actually present...
(1)  257/     882 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  258/     886 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  259/     890 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l		; Write blue
(1)  260/     898 : 60FE                		bra.s	*				; Infinite loop.
(1)  261/     89A :                     
(1)  262/     89A :                     ; ====================================================================
(1)  263/     89A :                     ; ----------------------------------------------------------------
(1)  264/     89A :                     ; 68k's Error handlers
(1)  265/     89A :                     ; ----------------------------------------------------------------
(1)  266/     89A :                     
(1)  267/     89A :                     MD_ErrBus:		; Bus error
(1)  268/     89A :                     MD_ErrAddr:		; Address error
(1)  269/     89A :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  270/     89A :                     MD_ErrZDiv:		; Divide by 0
(1)  271/     89A :                     MD_ErrChk:		; CHK Instruction
(1)  272/     89A :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  273/     89A :                     MD_ErrPrivl:		; Privilege violation
(1)  274/     89A :                     MD_Trace:		; Trace
(1)  275/     89A :                     MD_Line1010:		; Line 1010 Emulator
(1)  276/     89A :                     MD_Line1111:		; Line 1111 Emulator
(1)  277/     89A :                     MD_ErrorEx:		; Error exception
(1)  278/     89A :                     MD_ErrorTrap:
(1)  279/     89A : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  280/     89E : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l		; VDP: Point to Color 0
                    0004                
(1)  281/     8A8 : 33FC 000E 00C0 0000 		move.w	#$000E,(vdp_data).l		; Write blue
(1)  282/     8B0 : 60FE                		bra.s	*
(1)  283/     8B2 :                     
(1)  284/     8B2 :                     ; ------------------------------------------------
(1)  285/     8B2 :                     ; Init
(1)  286/     8B2 :                     ; ------------------------------------------------
(1)  287/     8B2 :                     
(1)  288/     8B2 :                     MD_Init:
(1)  289/     8B2 : 46FC 2700           		move.w	#$2700,sr
(1)  290/     8B6 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  291/     8BC : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  292/     8C2 : 3E16                .wait_blk:	move.w	(a6),d7
(1)  293/     8C4 : 0807 0007           		btst	#7,d7
(1)  294/     8C8 : 67F8                		beq.s	.wait_blk
(1)  295/     8CA : 23FC 8004 8104 00C0 		move.l	#$80048104,(vdp_ctrl).l		; Default top VDP regs
                    0004                
(1)  296/     8D4 : 3E16                .wait_dma:	move.w	(a6),d7				; Check if our DMA is active.
(1)  297/     8D6 : 0807 0001           		btst	#1,d7
(1)  298/     8DA : 66F8                		bne.s	.wait_dma
(1)  299/     8DC :                     
(1)  300/     8DC :                     	; This doesn't work properly...
(1)  301/     8DC :                     ; .wm:		cmp.l	#"M_OK",comm0(a5)		; SH2 Master active?
(1)  302/     8DC :                     ; 		bne.s	.wm
(1)  303/     8DC :                     ; .ws:		cmp.l	#"S_OK",comm4(a5)		; SH2 Slave active?
(1)  304/     8DC :                     ; 		bne.s	.ws
(1)  305/     8DC :                     
(1)  306/     8DC : 7000                		moveq	#0,d0				; Reset comm values
(1)  307/     8DE : 2B40 0020           		move.l	d0,comm0(a5)
(1)  308/     8E2 : 2B40 0024           		move.l	d0,comm4(a5)
(1)  309/     8E6 : 2B40 002C           		move.l	d0,comm12(a5)			; Clear last modes
(1)  310/     8EA : 23FC 494E 4954 FFFF 		move.l	#"INIT",(RAM_initflug).l	; Set "INIT" as our boot flag
                    AA6A                
(1)  311/     8F4 :                     MD_HotStart:
(1)  312/     8F4 : 0CB9 494E 4954 FFFF 		cmp.l	#"INIT",(RAM_initflug).l
                    AA6A                
(1)  313/     8FE : 66B2                		bne	MD_Init
(1)  314/     900 : 7000                		moveq	#0,d0				; Clear USP
(1)  315/     902 : 2C40                		movea.l	d0,a6
(1)  316/     904 : 4E66                		move.l	a6,usp
(1)  317/     906 : 41F9 FFFF 0000      		lea	($FFFF0000),a0			; Clear our RAM
(1)  318/     90C : 223C FFFF B0E2      		move.l	#sizeof_mdram,d1
(1)  319/     912 : 7000                		moveq	#0,d0
(1)  320/     914 :                     .loop_ram:
(1)  321/     914 : 30C0                		move.w	d0,(a0)+
(1)  322/     916 : B1C1                		cmp.l	d1,a0
(1)  323/     918 : 65FA                		bcs.s	.loop_ram
(1)  324/     91A : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6			; Clear registers (using zeros from RAM)
(1)  325/     922 :                     	; jump goes here...
(1)  326/     922 :                     
      13/     922 :                     
      14/     922 :                     ; ====================================================================
      15/     922 :                     ; ----------------------------------------------------------------
      16/     922 :                     ; Main
      17/     922 :                     ; ----------------------------------------------------------------
      18/     922 :                     
      19/     922 : 46FC 2700           		move.w	#$2700,sr
      20/     926 : 4EB9 0088 0980      		jsr	(Sound_init).l
      21/     92C : 4EB9 0088 2A16      		jsr	(Video_init).l
      22/     932 : 4EB9 0088 33C0      		jsr	(System_Init).l
      23/     938 : 4EF9 0088 391E      		jmp	(MD_Mode0).l
      24/     93E :                     
      25/     93E :                     ; ====================================================================
      26/     93E :                     ; --------------------------------------------------------
      27/     93E :                     ; Section stored at the $880000 area
      28/     93E :                     ; --------------------------------------------------------
      29/     93E :                     
      30/  88093E :                     		phase $880000+*
      31/  88093E :                     Md_TopCode:
      32/  88093E :                     		include	"system/md/sound.asm"
(1)    1/  88093E :                     ; ====================================================================
(1)    2/  88093E :                     ; ----------------------------------------------------------------
(1)    3/  88093E :                     ; Genesis sound (GEMA Sound driver)
(1)    4/  88093E :                     ; ----------------------------------------------------------------
(1)    5/  88093E :                     
(1)    6/  88093E :                     ; --------------------------------------------------------
(1)    7/  88093E :                     ; Initialize Sound
(1)    8/  88093E :                     ;
(1)    9/  88093E :                     ; Uses:
(1)   10/  88093E :                     ; a0-a1,d0-d1
(1)   11/  88093E :                     ; --------------------------------------------------------
(1)   12/  88093E :                     
(1)   13/  88093E :                     	; This align is for GEMS emulator only
(1)   14/  88093E :                     	; in case gets stuck in a black screen
(1)   15/  88093E :                     		align $80
(1)   16/  880980 :                     Sound_Init:
(1)   17/  880980 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 stop
(1)   18/  880988 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; And reset
(1)   19/  880990 :                     .wait:
(1)   20/  880990 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   21/  880998 : 66F6                		bne.s	.wait
(1)   22/  88099A : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 area first
(1)   23/  8809A0 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   24/  8809A4 : 7200                		moveq	#0,d1
(1)   25/  8809A6 :                     .cleanup:
(1)   26/  8809A6 : 10C1                		move.b	d1,(a0)+
(1)   27/  8809A8 : 51C8 FFFC           		dbf	d0,.cleanup
(1)   28/  8809AC : 41F9 0088 0BB0      		lea	(Z80_CODE|$880000).l,a0		; a0 - Z80 code (on $880000 area)
(1)   29/  8809B2 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 area
(1)   30/  8809B8 : 303C 1E65           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   31/  8809BC :                     .copy:
(1)   32/  8809BC : 12D8                		move.b	(a0)+,(a1)+
(1)   33/  8809BE : 51C8 FFFC           		dbf	d0,.copy
(1)   34/  8809C2 : 13FC 0001 00A1 1200 		move.b	#1,(z80_reset).l		; Reset again
(1)   35/  8809CA : 4E71                		nop
(1)   36/  8809CC : 4E71                		nop
(1)   37/  8809CE : 4E71                		nop
(1)   38/  8809D0 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   39/  8809D8 : 4E75                		rts
(1)   40/  8809DA :                     
(1)   41/  8809DA :                     ; ====================================================================
(1)   42/  8809DA :                     ; ----------------------------------------------------------------
(1)   43/  8809DA :                     ; Subroutines
(1)   44/  8809DA :                     ; ----------------------------------------------------------------
(1)   45/  8809DA :                     
(1)   46/  8809DA :                     ; ------------------------------------------------
(1)   47/  8809DA :                     ; Lock Z80, get bus
(1)   48/  8809DA :                     ; ------------------------------------------------
(1)   49/  8809DA :                     
(1)   50/  8809DA :                     sndLockZ80:
(1)   51/  8809DA : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)   52/  8809E2 :                     .wait:
(1)   53/  8809E2 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   54/  8809EA : 66F6                		bne.s	.wait
(1)   55/  8809EC : 4E75                		rts
(1)   56/  8809EE :                     
(1)   57/  8809EE :                     ; ------------------------------------------------
(1)   58/  8809EE :                     ; Unlock Z80, return bus
(1)   59/  8809EE :                     ; ------------------------------------------------
(1)   60/  8809EE :                     
(1)   61/  8809EE :                     sndUnlockZ80:
(1)   62/  8809EE : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   63/  8809F6 : 4E75                		rts
(1)   64/  8809F8 :                     
(1)   65/  8809F8 :                     ; ------------------------------------------------
(1)   66/  8809F8 :                     ; 68k-to-z80 Sound request
(1)   67/  8809F8 :                     ; enter/exit routines
(1)   68/  8809F8 :                     ;
(1)   69/  8809F8 :                     ; d6 - commFifo index
(1)   70/  8809F8 :                     ; ------------------------------------------------
(1)   71/  8809F8 :                     
(1)   72/  8809F8 :                     sndReq_Enter:
(1)   73/  8809F8 : 48F9 60C0 FFFF 9800 		movem.l	d6-d7/a5-a6,(RAM_SndSaveReg).l	; <-- stack didn't work this time
(1)   74/  880A00 : 7C00                		moveq	#0,d6
(1)   75/  880A02 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)   76/  880A0A : 40C6                		move.w	sr,d6
(1)   77/  880A0C : 4846                		swap	d6
(1)   78/  880A0E : 007C 0700           		or.w	#$0700,sr			; disable ints
(1)   79/  880A12 : 4BF9 00A0 001F      		lea	(z80_cpu+commZWrite),a5		; a5 - commZWrite
(1)   80/  880A18 : 4DF9 00A0 1E00      		lea	(z80_cpu+commZfifo),a6		; a6 - fifo command list
(1)   81/  880A1E :                     .wait:
(1)   82/  880A1E : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)   83/  880A26 : 66F6                		bne.s	.wait
(1)   84/  880A28 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)   85/  880A2A : 4886                		ext.w	d6				; extend to 16 bits
(1)   86/  880A2C : 4E75                		rts
(1)   87/  880A2E :                     ; JUMP ONLY
(1)   88/  880A2E :                     sndReq_Exit:
(1)   89/  880A2E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)   90/  880A36 : 4846                		swap	d6
(1)   91/  880A38 : 46C6                		move.w	d6,sr
(1)   92/  880A3A : 4CF9 60C0 FFFF 9800 		movem.l	(RAM_SndSaveReg).l,d6-d7/a5-a6
(1)   93/  880A42 : 4E75                		rts
(1)   94/  880A44 :                     
(1)   95/  880A44 :                     ; ------------------------------------------------
(1)   96/  880A44 :                     ; Send request id and arguments
(1)   97/  880A44 :                     ;
(1)   98/  880A44 :                     ; Input:
(1)   99/  880A44 :                     ; d7 - byte to write
(1)  100/  880A44 :                     ; d6 - index pointer
(1)  101/  880A44 :                     ; a5 - commZWrite, update index
(1)  102/  880A44 :                     ; a6 - commZfifo command list
(1)  103/  880A44 :                     ;
(1)  104/  880A44 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  105/  880A44 :                     ; ------------------------------------------------
(1)  106/  880A44 :                     
(1)  107/  880A44 :                     sndReq_scmd:
(1)  108/  880A44 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  109/  880A4A : 5206                		addq.b	#1,d6				; next fifo pos
(1)  110/  880A4C : 0206 003F           		andi.b	#$3F,d6
(1)  111/  880A50 : 600C                		bra.s	sndReq_sbyte
(1)  112/  880A52 :                     sndReq_slong:
(1)  113/  880A52 : 610A                		bsr	sndReq_sbyte
(1)  114/  880A54 : E09F                		ror.l	#8,d7
(1)  115/  880A56 :                     sndReq_saddr:
(1)  116/  880A56 : 6106                		bsr	sndReq_sbyte
(1)  117/  880A58 : E09F                		ror.l	#8,d7
(1)  118/  880A5A :                     sndReq_sword:
(1)  119/  880A5A : 6102                		bsr	sndReq_sbyte
(1)  120/  880A5C : E09F                		ror.l	#8,d7
(1)  121/  880A5E :                     sndReq_sbyte:
(1)  122/  880A5E : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  123/  880A62 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  124/  880A64 : 0206 003F           		andi.b	#$3F,d6
(1)  125/  880A68 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  126/  880A6A : 4E75                		rts
(1)  127/  880A6C :                     
(1)  128/  880A6C :                     ; ------------------------------------------------
(1)  129/  880A6C :                     ; Make CMD request
(1)  130/  880A6C :                     ;
(1)  131/  880A6C :                     ; d6 - command
(1)  132/  880A6C :                     ; ------------------------------------------------
(1)  133/  880A6C :                     
(1)  134/  880A6C :                     sndReqCmd:
(1)  135/  880A6C : 1E39 00A1 512E      .wait_in:	move.b	(sysmars_reg+comm14),d7
(1)  136/  880A72 : CE7C 00F0           		and.w	#%11110000,d7
(1)  137/  880A76 : 66F4                		bne.s	.wait_in
(1)  138/  880A78 : CC7C 000F           		and.w	#%00001111,d6
(1)  139/  880A7C : 8E06                		or.b	d6,d7
(1)  140/  880A7E : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  141/  880A84 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  142/  880A8A : CE7C 000F           		and.w	#%00001111,d7
(1)  143/  880A8E : BE06                		cmp.b	d6,d7
(1)  144/  880A90 : 66DA                		bne.s	.wait_in
(1)  145/  880A92 : 08F9 0007 00A1 512E 		bset	#7,(sysmars_reg+comm14).l
(1)  146/  880A9A : 08F9 0001 00A1 5103 		bset	#1,(sysmars_reg+standby).l	; Request Slave CMD
(1)  147/  880AA2 :                     ; .wait_cmd:	btst	#1,(sysmars_reg+standby).l
(1)  148/  880AA2 :                     ; 		bne.s	.wait_cmd
(1)  149/  880AA2 : 1E39 00A1 512E      .wait_out:	move.b	(sysmars_reg+comm14),d7
(1)  150/  880AA8 : CE7C 00F0           		and.w	#%11110000,d7
(1)  151/  880AAC : 66F4                		bne.s	.wait_out
(1)  152/  880AAE : 4E75                		rts
(1)  153/  880AB0 :                     
(1)  154/  880AB0 :                     ; --------------------------------------------------------
(1)  155/  880AB0 :                     ; Sound_DMA_Pause
(1)  156/  880AB0 :                     ;
(1)  157/  880AB0 :                     ; Call this BEFORE making any DMA task
(1)  158/  880AB0 :                     ;
(1)  159/  880AB0 :                     ; Uses:
(1)  160/  880AB0 :                     ; d6,d7
(1)  161/  880AB0 :                     ; --------------------------------------------------------
(1)  162/  880AB0 :                     
(1)  163/  880AB0 :                     Sound_DMA_Pause:
(1)  164/  880AB0 : 4847                		swap	d7
(1)  165/  880AB2 : 4846                		swap	d6
(1)  166/  880AB4 :                     .retry:
(1)  167/  880AB4 : 6100 FF24           		bsr	sndLockZ80
(1)  168/  880AB8 : 1E39 00A0 001D      		move.b	(z80_cpu+commZRomRd),d7		; Get mid-read bit
(1)  169/  880ABE : 6100 FF2E           		bsr	sndUnlockZ80
(1)  170/  880AC2 : 4A07                		tst.b	d7
(1)  171/  880AC4 : 6708                		beq.s	.safe
(1)  172/  880AC6 : 7E44                		moveq	#68,d7
(1)  173/  880AC8 : 51CF FFFE           		dbf	d7,*
(1)  174/  880ACC : 60E6                		bra.s	.retry
(1)  175/  880ACE :                     .safe:
(1)  176/  880ACE : 6100 FF0A           		bsr	sndLockZ80
(1)  177/  880AD2 : 13FC 0001 00A0 001C 		move.b	#1,(z80_cpu+commZRomBlk)	; Block flag for Z80
(1)  178/  880ADA : 6100 FF12           		bsr	sndUnlockZ80
(1)  179/  880ADE : 3C3C 0002           		move.w	#2,d6
(1)  180/  880AE2 : 6188                		bsr	sndReqCmd
(1)  181/  880AE4 : 4846                		swap	d6
(1)  182/  880AE6 : 4847                		swap	d7
(1)  183/  880AE8 : 4E75                		rts
(1)  184/  880AEA :                     
(1)  185/  880AEA :                     ; --------------------------------------------------------
(1)  186/  880AEA :                     ; Sound_DMA_Resume
(1)  187/  880AEA :                     ;
(1)  188/  880AEA :                     ; Call this AFTER finishing DMA
(1)  189/  880AEA :                     ; --------------------------------------------------------
(1)  190/  880AEA :                     
(1)  191/  880AEA :                     Sound_DMA_Resume:
(1)  192/  880AEA : 4847                		swap	d7
(1)  193/  880AEC : 4846                		swap	d6
(1)  194/  880AEE : 6100 FEEA           		bsr	sndLockZ80
(1)  195/  880AF2 : 13FC 0000 00A0 001C 		move.b	#0,(z80_cpu+commZRomBlk)
(1)  196/  880AFA : 6100 FEF2           		bsr	sndUnlockZ80
(1)  197/  880AFE : 3C3C 0003           		move.w	#3,d6
(1)  198/  880B02 : 6100 FF68           		bsr	sndReqCmd
(1)  199/  880B06 : 4846                		swap	d6
(1)  200/  880B08 : 4847                		swap	d7
(1)  201/  880B0A : 4E75                		rts
(1)  202/  880B0C :                     
(1)  203/  880B0C :                     ; --------------------------------------------------------
(1)  204/  880B0C :                     ; SoundReq_SetTrack
(1)  205/  880B0C :                     ;
(1)  206/  880B0C :                     ; a0 | Pointer to Pattern, Blocks and Instruments list
(1)  207/  880B0C :                     ;      in this order:
(1)  208/  880B0C :                     ;  	dc.l pattern_data
(1)  209/  880B0C :                     ;  	dc.l block_data
(1)  210/  880B0C :                     ;  	dc.l instrument_data
(1)  211/  880B0C :                     ;  	(Pointers should be in the
(1)  212/  880B0C :                     ;  	$880000/$900000 areas)
(1)  213/  880B0C :                     ;
(1)  214/  880B0C :                     ; d0 | BYTE - Track slot
(1)  215/  880B0C :                     ; d1 | BYTE - Ticks
(1)  216/  880B0C :                     ; d2 | BYTE - Start from this block position
(1)  217/  880B0C :                     ; d3 | BYTE - Flags: %00004321
(1)  218/  880B0C :                     ; 	      4321 - Use global tempos: 1,2,3 or 4
(1)  219/  880B0C :                     ;
(1)  220/  880B0C :                     ; Breaks:
(1)  221/  880B0C :                     ; d6-d7,a5-a6
(1)  222/  880B0C :                     ; --------------------------------------------------------
(1)  223/  880B0C :                     
(1)  224/  880B0C :                     Sound_TrkPlay:
(1)  225/  880B0C : 6100 FEEA           		bsr	sndReq_Enter
(1)  226/  880B10 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  227/  880B14 : 6100 FF2E           		bsr	sndReq_scmd
(1)  228/  880B18 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  229/  880B1A : 6100 FF42           		bsr	sndReq_sbyte
(1)  230/  880B1E : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  231/  880B20 : 6100 FF3C           		bsr	sndReq_sbyte
(1)  232/  880B24 : 1E02                		move.b	d2,d7		; d2 - Start block
(1)  233/  880B26 : 6100 FF36           		bsr	sndReq_sbyte
(1)  234/  880B2A : 1E03                		move.b	d3,d7		; d3 - Flags (%321 enable these timers)
(1)  235/  880B2C : CE7C 0007           		and.w	#%111,d7
(1)  236/  880B30 : 6100 FF2C           		bsr	sndReq_sbyte
(1)  237/  880B34 : 2E18                		move.l	(a0)+,d7	; Patt data point
(1)  238/  880B36 : 6100 FF1E           		bsr	sndReq_saddr
(1)  239/  880B3A : 2E18                		move.l	(a0)+,d7	; Block data point
(1)  240/  880B3C : 6100 FF18           		bsr	sndReq_saddr
(1)  241/  880B40 : 2E18                		move.l	(a0)+,d7	; Intrument data
(1)  242/  880B42 : 6100 FF12           		bsr	sndReq_saddr
(1)  243/  880B46 : 6000 FEE6           		bra 	sndReq_Exit
(1)  244/  880B4A :                     
(1)  245/  880B4A :                     ; --------------------------------------------------------
(1)  246/  880B4A :                     ; SoundReq_StopTrack (Pause too.)
(1)  247/  880B4A :                     ;
(1)  248/  880B4A :                     ; Stops OR Pauses current track
(1)  249/  880B4A :                     ;
(1)  250/  880B4A :                     ; Input:
(1)  251/  880B4A :                     ; d0 | BYTE - Track slot
(1)  252/  880B4A :                     ;
(1)  253/  880B4A :                     ; Breaks:
(1)  254/  880B4A :                     ; d6-d7,a5-a6
(1)  255/  880B4A :                     ; --------------------------------------------------------
(1)  256/  880B4A :                     
(1)  257/  880B4A :                     Sound_TrkStop:
(1)  258/  880B4A : 6100 FEAC           		bsr	sndReq_Enter
(1)  259/  880B4E : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  260/  880B52 : 6100 FEF0           		bsr	sndReq_scmd
(1)  261/  880B56 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  262/  880B58 : 6100 FF04           		bsr	sndReq_sbyte
(1)  263/  880B5C : 6000 FED0           		bra 	sndReq_Exit
(1)  264/  880B60 :                     
(1)  265/  880B60 :                     ; --------------------------------------------------------
(1)  266/  880B60 :                     ; Sound_TrkResume
(1)  267/  880B60 :                     ;
(1)  268/  880B60 :                     ; Resumes Paused track
(1)  269/  880B60 :                     ;
(1)  270/  880B60 :                     ; Input:
(1)  271/  880B60 :                     ; d0 | BYTE - Track slot
(1)  272/  880B60 :                     ;
(1)  273/  880B60 :                     ; Breaks:
(1)  274/  880B60 :                     ; d6-d7,a5-a6
(1)  275/  880B60 :                     ; --------------------------------------------------------
(1)  276/  880B60 :                     
(1)  277/  880B60 :                     Sound_TrkResume:
(1)  278/  880B60 : 6100 FE96           		bsr	sndReq_Enter
(1)  279/  880B64 : 3E3C 0002           		move.w	#$02,d7		; Command $01
(1)  280/  880B68 : 6100 FEDA           		bsr	sndReq_scmd
(1)  281/  880B6C : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  282/  880B6E : 6100 FEEE           		bsr	sndReq_sbyte
(1)  283/  880B72 : 6000 FEBA           		bra 	sndReq_Exit
(1)  284/  880B76 :                     
(1)  285/  880B76 :                     ; --------------------------------------------------------
(1)  286/  880B76 :                     ; Sound_TrkTicks
(1)  287/  880B76 :                     ;
(1)  288/  880B76 :                     ; Set ticks for the current track
(1)  289/  880B76 :                     ; (NTSC: 150/tick, PAL: 120/tick)
(1)  290/  880B76 :                     ;
(1)  291/  880B76 :                     ; Input:
(1)  292/  880B76 :                     ; d0 | BYTE - Track slot
(1)  293/  880B76 :                     ; d1 | BYTE - Ticks
(1)  294/  880B76 :                     ;
(1)  295/  880B76 :                     ; Breaks:
(1)  296/  880B76 :                     ; d6-d7,a5-a6
(1)  297/  880B76 :                     ; --------------------------------------------------------
(1)  298/  880B76 :                     
(1)  299/  880B76 :                     Sound_TrkTicks:
(1)  300/  880B76 : 6100 FE80           		bsr	sndReq_Enter
(1)  301/  880B7A : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  302/  880B7E : 6100 FEC4           		bsr	sndReq_scmd
(1)  303/  880B82 : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  304/  880B84 : 6100 FED8           		bsr	sndReq_sbyte
(1)  305/  880B88 : 1E01                		move.b	d1,d7		; d1 - Ticks
(1)  306/  880B8A : 6100 FED2           		bsr	sndReq_sbyte
(1)  307/  880B8E : 6000 FE9E           		bra 	sndReq_Exit
(1)  308/  880B92 :                     
(1)  309/  880B92 :                     ; --------------------------------------------------------
(1)  310/  880B92 :                     ; Sound_GlbBeats
(1)  311/  880B92 :                     ;
(1)  312/  880B92 :                     ; Set GLOBAL Sub-beats (not tempo...)
(1)  313/  880B92 :                     ;
(1)  314/  880B92 :                     ; Input:
(1)  315/  880B92 :                     ; d0 | BYTE - Track slot (TODO: for later...)
(1)  316/  880B92 :                     ; d1 | WORD - Ticks
(1)  317/  880B92 :                     ;
(1)  318/  880B92 :                     ; Breaks:
(1)  319/  880B92 :                     ; d6-d7,a5-a6
(1)  320/  880B92 :                     ; --------------------------------------------------------
(1)  321/  880B92 :                     
(1)  322/  880B92 :                     Sound_GlbBeats:
(1)  323/  880B92 : 6100 FE64           		bsr	sndReq_Enter
(1)  324/  880B96 : 3E3C 0010           		move.w	#$10,d7		; Command $10
(1)  325/  880B9A : 6100 FEA8           		bsr	sndReq_scmd
(1)  326/  880B9E : 1E00                		move.b	d0,d7		; d0 - Slot
(1)  327/  880BA0 : 6100 FEBC           		bsr	sndReq_sbyte
(1)  328/  880BA4 : 3E01                		move.w	d1,d7		; d1 - Subbeats
(1)  329/  880BA6 : 6100 FEB2           		bsr	sndReq_sword
(1)  330/  880BAA : 6000 FE82           		bra 	sndReq_Exit
(1)  331/  880BAE :                     
(1)  332/  880BAE :                     ; --------------------------------------------------------
(1)  333/  880BAE :                     
(1)  334/  880BAE :                     		align 4
(1)  335/  880BB0 :                     Z80_CODE:
(1)  336/  880BB0 :                     		cpu Z80			; Set Z80 here
(1)  337/       0 :                     		phase 0			; And set PC to 0
(1)  338/       0 :                     		include "system/md/z_driver.asm"
(2)    1/       0 :                     ; --------------------------------------------------------
(2)    2/       0 :                     ; GEMA sound driver, inspired by GEMS (kinda)
(2)    3/       0 :                     ;
(2)    4/       0 :                     ; Two playable track slots: BGM(0) and SFX(1)
(2)    5/       0 :                     ;
(2)    6/       0 :                     ; Slot 1 can either overwrite chip channels or
(2)    7/       0 :                     ; if possible grab unused slots
(2)    8/       0 :                     ;
(2)    9/       0 :                     ; WARNING: DAC sample playback has to be sync'd manually
(2)   10/       0 :                     ; on every code change, sample rate is at the
(2)   11/       0 :                     ; 18000hz range
(2)   12/       0 :                     ; --------------------------------------------------------
(2)   13/       0 :                     
(2)   14/       0 :                     ; --------------------------------------------------------
(2)   15/       0 :                     ; User settings
(2)   16/       0 :                     ; --------------------------------------------------------
(2)   17/       0 :                     
(2)   18/       0 : =11H                MAX_TRKCHN	equ 17		; Max internal tracker channels (4PSG + 6FM + 7PWM)
(2)   19/       0 : =FFFFFFFFFFF..      ZSET_WTUNE	equ -24		; Manual frequency adjustment for DAC WAVE playback
(2)   20/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear" test the DAC playback
(2)   21/       0 : =10H                MAX_INS		equ 16
(2)   22/       0 :                     
(2)   23/       0 :                     ; --------------------------------------------------------
(2)   24/       0 :                     ; Structs
(2)   25/       0 :                     ;
(2)   26/       0 :                     ; NOTE: struct doesn't work here. use equs instead
(2)   27/       0 :                     ; --------------------------------------------------------
(2)   28/       0 :                     
(2)   29/       0 :                     ; trkBuff struct
(2)   30/       0 :                     ; LIMIT: 20h (32) bytes
(2)   31/       0 : =0H                 trk_romBlk	equ 00h	; 24-bit base block data
(2)   32/       0 : =3H                 trk_romPatt	equ 03h	; 24-bit base patt data
(2)   33/       0 : =6H                 trk_romIns	equ 06h	; 24-bit ROM instrument pointers
(2)   34/       0 : =9H                 trk_romPattRd	equ 09h	; same but for reading
(2)   35/       0 : =CH                 trk_Read	equ 0Ch	; Current track position (in our storage)
(2)   36/       0 : =EH                 trk_Rows	equ 0Eh	; Current track length
(2)   37/       0 :                     
(2)   38/       0 : =10H                trk_Halfway	equ 10h	; Only 00h or 80h
(2)   39/       0 : =11H                trk_currBlk	equ 11h	; Current block
(2)   40/       0 : =12H                trk_setBlk	equ 12h	; Start on this block
(2)   41/       0 : =13H                trk_status	equ 13h	; %ERPB Sxxx | E-enabled / R-Init|Restart track / P-refill-on-playback / B-use global beats / S-silence
(2)   42/       0 :                     
(2)   43/       0 : =14H                trk_tickTmr	equ 14h	; Ticks timer
(2)   44/       0 : =15H                trk_tickSet	equ 15h	; Ticks set for this track
(2)   45/       0 : =16H                trk_sizeIns	equ 16h	; Max instrument storage
(2)   46/       0 : =17H                trk_rowPause	equ 17h	; Row pause timer
(2)   47/       0 : =18H                trk_CachNotes	equ 18h	; Pointer to track storage (100h bytes long and aligned)
(2)   48/       0 : =1AH                trk_CmdReq	equ 1Ah	; Track command requests
(2)   49/       0 :                     
(2)   50/       0 :                     ; Tracker channel data, 8 bytes each.
(2)   51/       0 : =0H                 chnl_Chip	equ 0		; *** MUST BE AT 0 ***
(2)   52/       0 : =1H                 chnl_Flags	equ 1		; playback requests and other specific bits
(2)   53/       0 : =2H                 chnl_Note	equ 2
(2)   54/       0 : =3H                 chnl_Ins	equ 3
(2)   55/       0 : =4H                 chnl_Vol	equ 4
(2)   56/       0 : =5H                 chnl_EffId	equ 5
(2)   57/       0 : =6H                 chnl_EffArg	equ 6
(2)   58/       0 : =7H                 chnl_Type	equ 7		; Impulse-note bits
(2)   59/       0 :                     
(2)   60/       0 :                     ; --------------------------------------------------------
(2)   61/       0 :                     ; Variables
(2)   62/       0 :                     ; --------------------------------------------------------
(2)   63/       0 :                     
(2)   64/       0 :                     ; To brute force DAC playback
(2)   65/       0 :                     ; on or off
(2)   66/       0 : =0H                 zopcNop		equ	00h
(2)   67/       0 : =8H                 zopcEx		equ	08h
(2)   68/       0 : =C9H                zopcRet		equ 	0C9h
(2)   69/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(2)   70/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(2)   71/       0 :                     
(2)   72/       0 :                     ; PSG external control
(2)   73/       0 : =0H                 COM		equ	0
(2)   74/       0 : =4H                 LEV		equ	4
(2)   75/       0 : =8H                 ATK		equ	8
(2)   76/       0 : =CH                 DKY		equ	12
(2)   77/       0 : =10H                SLV		equ	16
(2)   78/       0 : =14H                RRT		equ	20
(2)   79/       0 : =18H                MODE		equ	24
(2)   80/       0 : =1CH                DTL		equ	28
(2)   81/       0 : =20H                DTH		equ	32
(2)   82/       0 : =24H                ALV		equ	36
(2)   83/       0 : =28H                FLG		equ	40
(2)   84/       0 : =2CH                TMR		equ	44
(2)   85/       0 : =30H                PVOL		equ	48
(2)   86/       0 :                     
(2)   87/       0 :                     ; FMCOM		equ	0
(2)   88/       0 : =6H                 FMKEYS		equ	6
(2)   89/       0 : =CH                 FMVOL		equ	12
(2)   90/       0 : =12H                FMPAN 		equ	18
(2)   91/       0 : =18H                FMFRQH		equ	24
(2)   92/       0 : =1EH                FMFRQL		equ	30
(2)   93/       0 :                     
(2)   94/       0 : =0H                 PWCOM		equ	0
(2)   95/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (%VVVVVVPP)
(2)   96/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(2)   97/       0 : =18H                PWOUTF		equ	24	; Output mode/bits + SH2 section (ROM $02 or SDRAM $06)
(2)   98/       0 : =20H                PWINSH		equ	32	; 24-bit sample address
(2)   99/       0 : =28H                PWINSM		equ	40
(2)  100/       0 : =30H                PWINSL		equ	48
(2)  101/       0 :                     
(2)  102/       0 :                     ; ====================================================================
(2)  103/       0 :                     ; --------------------------------------------------------
(2)  104/       0 :                     ; Code starts here
(2)  105/       0 :                     ; --------------------------------------------------------
(2)  106/       0 :                     
(2)  107/       0 : F3                  		di			; Disable interrputs
(2)  108/       1 : ED 56               		im	1		; Interrupt mode 1
(2)  109/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(2)  110/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(2)  111/       8 :                     
(2)  112/       8 :                     ; --------------------------------------------------------
(2)  113/       8 :                     ; RST 8 (dac_me)
(2)  114/       8 :                     ; *** self-modifiable code ***
(2)  115/       8 :                     ;
(2)  116/       8 :                     ; Writes wave data to DAC using the data stored
(2)  117/       8 :                     ; on the wave buffer. call this routine every 6
(2)  118/       8 :                     ; or more lines of code to keep playing the sample
(2)  119/       8 :                     ; at the desired sample rate while processing code
(2)  120/       8 :                     ;
(2)  121/       8 :                     ; Input (EXX):
(2)  122/       8 :                     ;  c - WAVE buffer MSB
(2)  123/       8 :                     ; de - Pitch (xx.00)
(2)  124/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(2)  125/       8 :                     ;
(2)  126/       8 :                     ; Uses (EXX):
(2)  127/       8 :                     ; b
(2)  128/       8 :                     ;
(2)  129/       8 :                     ; Notes:
(2)  130/       8 :                     ; call dac_on to enable WAVE playback
(2)  131/       8 :                     ; or
(2)  132/       8 :                     ; call dac_off to disable it (check for FM6 manually)
(2)  133/       8 :                     ; --------------------------------------------------------
(2)  134/       8 :                     
(2)  135/       8 :                     ; NOTE: This plays at 18000hz but we are using
(2)  136/       8 :                     ; 16000hz as the "center" note (C-5)
(2)  137/       8 :                     ; check ZSET_WTUNE if you want change the
(2)  138/       8 :                     ; "center" frequency.
(2)  139/       8 :                     
(2)  140/       8 : (MACRO)             		org 8
(2)  141/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(2)  142/       9 : 08                  		ex	af,af'		; Swap af
(2)  143/       A : 45                  		ld	b,l		; Save pitch's .00 to b
(2)  144/       B : 3E 2A               		ld	a,2Ah		; YM register command 2Ah
(2)  145/       D : 32 00 40            		ld	(Zym_ctrl_1),a
(2)  146/      10 : 6C                  		ld	l,h		; L - xx.00 to 00xx
(2)  147/      11 : 61                  		ld	h,c		; H - Wave buffer MSB | 00xx
(2)  148/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(2)  149/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(2)  150/      16 : 65                  		ld	h,l		; get hl back
(2)  151/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(2)  152/      18 : 19                  		add	hl,de		; Pitch increment hl
(2)  153/      19 : 08                  		ex	af,af'		; return af
(2)  154/      1A : D9                  		exx
(2)  155/      1B : C9                  		ret
(2)  156/      1C :                     
(2)  157/      1C :                     ; --------------------------------------------------------
(2)  158/      1C :                     
(2)  159/      1C : 00                  commZRomBlk	db 0			; 68k ROM block flag
(2)  160/      1D : 00                  commZRomRd	db 0			; Z80 ROM reading flag
(2)  161/      1E : 00                  commZRead	db 0			; cmd read pointer (here)
(2)  162/      1F : 00                  commZWrite	db 0			; cmd fifo wptr (from 68k)
(2)  163/      20 :                     
(2)  164/      20 :                     ; --------------------------------------------------------
(2)  165/      20 :                     ; RST 20h (dac_me)
(2)  166/      20 :                     ; *** self-modifiable code ***
(2)  167/      20 :                     ;
(2)  168/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(2)  169/      20 :                     ; it playing.
(2)  170/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL IS REQUESTED ***
(2)  171/      20 :                     ; --------------------------------------------------------
(2)  172/      20 :                     
(2)  173/      20 : (MACRO)             		org 20h
(2)  174/      20 : F5                  dac_fill:	push	af		; <-- this changes between PUSH AF(playing) and RET(stopped)
(2)  175/      21 : 3A 5D 1E            		ld	a,(dDacFifoMid)	; a - Get current wavebuffer LSB (00h or 80h)
(2)  176/      24 : D9                  		exx
(2)  177/      25 : AC                  		xor	h		; 00xx.00
(2)  178/      26 : D9                  		exx
(2)  179/      27 : E6 80               		and	80h		; Check if bit changed
(2)  180/      29 : C2 6B 13            		jp	nz,dac_refill	; If it did, refill and update LSB to check
(2)  181/      2C : F1                  		pop	af
(2)  182/      2D : C9                  		ret
(2)  183/      2E :                     
(2)  184/      2E :                     ; --------------------------------------------------------
(2)  185/      2E :                     
(2)  186/      2E : 00                  marsBlock	db 0		; flag to temporally disable PWM communication
(2)  187/      2F : 00                  currTickBits	db 0		; Current Tick/Tempo bitflags (000000BTb B-beat, T-tick)
(2)  188/      30 : 00                  marsUpd		db 0		; flag to request a PWM transfer
(2)  189/      31 : 00                  palMode		db 0		; PAL speed flag (TODO)
(2)  190/      32 : 90 00               sbeatPtck_1	dw 200-56	; Global tempo (sub beats) (-32 for PAL)
(2)  191/      34 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(2)  192/      36 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(2)  193/      37 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(2)  194/      38 :                     
(2)  195/      38 :                     ; --------------------------------------------------------
(2)  196/      38 :                     ; Z80 Interrupt at 0038h
(2)  197/      38 :                     ; --------------------------------------------------------
(2)  198/      38 :                     
(2)  199/      38 : (MACRO)             		org 38h				; Align 38h
(2)  200/      38 : ED 73 48 1E         		ld	(tickFlag),sp		; Use sp to set the TICK flag (xx1F, read as tickFlag+1)
(2)  201/      3C : F3                  		di				; Disable interrupt
(2)  202/      3D : C9                  		ret
(2)  203/      3E :                     
(2)  204/      3E :                     ; --------------------------------------------------------
(2)  205/      3E :                     ; Initilize
(2)  206/      3E :                     ; --------------------------------------------------------
(2)  207/      3E :                     
(2)  208/      3E :                     z80_init:
(2)  209/      3E : CD 3B 0E            		call	gema_init		; Initilize VBLANK sound driver
(2)  210/      41 : FB                  		ei
(2)  211/      42 :                     
(2)  212/      42 :                     ; --------------------------------------------------------
(2)  213/      42 :                     ; MAIN LOOP
(2)  214/      42 :                     ; --------------------------------------------------------
(2)  215/      42 :                     
(2)  216/      42 :                     drv_loop:
(2)  217/      42 : CF                  		rst	8
(2)  218/      43 : CD A0 0E            		call	get_tick		; Check for Tick on VBlank
(2)  219/      46 : E7                  		rst	20h			; first dacfill
(2)  220/      47 : CF                  		rst	8
(2)  221/      48 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(2)  222/      4A : 3A 4A 1E            		ld	a,(tickCnt)
(2)  223/      4D : D6 01               		sub	1
(2)  224/      4F : 38 0C               		jr	c,.noticks
(2)  225/      51 : 32 4A 1E            		ld	(tickCnt),a
(2)  226/      54 : CF                  		rst	8
(2)  227/      55 : CD AA 0F            		call	chip_env		; Process PSG volume and freqs manually
(2)  228/      58 : CD A0 0E            		call	get_tick		; Check for another tick
(2)  229/      5B : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(2)  230/      5D :                     .noticks:
(2)  231/      5D : 3A 35 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(2)  232/      60 : D6 01               		sub	1
(2)  233/      62 : 38 06               		jr	c,.nobeats
(2)  234/      64 : 32 35 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(2)  235/      67 : CB C8               		set	1,b			; Set BEAT (10b) flag
(2)  236/      69 : CF                  		rst	8
(2)  237/      6A :                     .nobeats:
(2)  238/      6A : CF                  		rst	8
(2)  239/      6B : 78                  		ld	a,b			; Any beat/tick change?
(2)  240/      6C : B7                  		or	a
(2)  241/      6D : 28 13               		jr	z,.neither
(2)  242/      6F : 32 2F 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(2)  243/      72 : CD A0 0E            		call	get_tick
(2)  244/      75 : CD 58 05            		call	setupchip		; Send changes to sound chips
(2)  245/      78 : CD A0 0E            		call	get_tick
(2)  246/      7B : CD DA 01            		call	updtrack		; Update track data
(2)  247/      7E : CD A0 0E            		call	get_tick
(2)  248/      81 : CF                  		rst	8
(2)  249/      82 :                     .neither:
(2)  250/      82 : CD C8 04            		call	mars_scomm		; 32X communication for PWM playback
(2)  251/      85 : CD A0 0E            		call	get_tick
(2)  252/      88 : CF                  		rst	8
(2)  253/      89 :                     .next_cmd:
(2)  254/      89 : 3A 1F 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(2)  255/      8C : 47                  		ld	b,a
(2)  256/      8D : 3A 1E 00            		ld	a,(commZRead)
(2)  257/      90 : B8                  		cp	b
(2)  258/      91 : 28 AF               		jr	z,drv_loop		; If both are equal: no requests
(2)  259/      93 : E7                  		rst	20h			; first dacfill
(2)  260/      94 : CF                  		rst	8
(2)  261/      95 : CD B9 01            		call	get_cmdbyte
(2)  262/      98 : FE FF               		cp	-1			; Got -1? (Start of command)
(2)  263/      9A : 20 A6               		jr	nz,drv_loop
(2)  264/      9C : CD B9 01            		call	get_cmdbyte		; Read command number
(2)  265/      9F : 87                  		add	a,a			; * 2
(2)  266/      A0 : 21 AE 00            		ld	hl,.list		; Then jump to one of these...
(2)  267/      A3 : CF                  		rst	8
(2)  268/      A4 : 16 00               		ld	d,0
(2)  269/      A6 : 5F                  		ld	e,a
(2)  270/      A7 : 19                  		add	hl,de
(2)  271/      A8 : 7E                  		ld	a,(hl)
(2)  272/      A9 : CF                  		rst	8
(2)  273/      AA : 23                  		inc	hl
(2)  274/      AB : 66                  		ld	h,(hl)
(2)  275/      AC : 6F                  		ld	l,a
(2)  276/      AD : E9                  		jp	(hl)
(2)  277/      AE :                     .list:
(2)  278/      AE : F2 00               		dw .cmnd_trkplay		; $00 - Play
(2)  279/      B0 : 55 01               		dw .cmnd_trkstop		; $01 - Stop/Pause
(2)  280/      B2 : 70 01               		dw .cmnd_trkresume		; $02 - Resume
(2)  281/      B4 : EE 00               		dw .cmnd_0			; $03 -
(2)  282/      B6 : EE 00               		dw .cmnd_0			; $04 -
(2)  283/      B8 : EE 00               		dw .cmnd_0			; $05 -
(2)  284/      BA : EE 00               		dw .cmnd_0			; $06 -
(2)  285/      BC : EE 00               		dw .cmnd_0			; $07 -
(2)  286/      BE : 7D 01               		dw .cmnd_trkticks		; $08 - Set ticks
(2)  287/      C0 : EE 00               		dw .cmnd_0			; $09 -
(2)  288/      C2 : EE 00               		dw .cmnd_0			; $0A -
(2)  289/      C4 : EE 00               		dw .cmnd_0			; $0B -
(2)  290/      C6 : EE 00               		dw .cmnd_0			; $0C -
(2)  291/      C8 : EE 00               		dw .cmnd_0			; $0D -
(2)  292/      CA : EE 00               		dw .cmnd_0			; $0E -
(2)  293/      CC : EE 00               		dw .cmnd_0			; $0F -
(2)  294/      CE : 8F 01               		dw .cmnd_trktempo		; $10 - Set global subbeats
(2)  295/      D0 : EE 00               		dw .cmnd_0
(2)  296/      D2 : EE 00               		dw .cmnd_0
(2)  297/      D4 : EE 00               		dw .cmnd_0
(2)  298/      D6 : EE 00               		dw .cmnd_0			; $14
(2)  299/      D8 : EE 00               		dw .cmnd_0
(2)  300/      DA : EE 00               		dw .cmnd_0
(2)  301/      DC : EE 00               		dw .cmnd_0
(2)  302/      DE : EE 00               		dw .cmnd_0			; $18
(2)  303/      E0 : EE 00               		dw .cmnd_0
(2)  304/      E2 : EE 00               		dw .cmnd_0
(2)  305/      E4 : EE 00               		dw .cmnd_0
(2)  306/      E6 : EE 00               		dw .cmnd_0			; $1C
(2)  307/      E8 : EE 00               		dw .cmnd_0
(2)  308/      EA : EE 00               		dw .cmnd_0
(2)  309/      EC : EE 00               		dw .cmnd_0
(2)  310/      EE :                     
(2)  311/      EE :                     ; --------------------------------------------------------
(2)  312/      EE :                     ; Command list
(2)  313/      EE :                     ; --------------------------------------------------------
(2)  314/      EE :                     
(2)  315/      EE :                     .cmnd_0:
(2)  316/      EE : 18 FE               		jr	$			; BAD COMMAND
(2)  317/      F0 : 18 97               		jr	.next_cmd
(2)  318/      F2 :                     
(2)  319/      F2 :                     ; --------------------------------------------------------
(2)  320/      F2 :                     ; $01 - Set NEW track
(2)  321/      F2 :                     ; --------------------------------------------------------
(2)  322/      F2 :                     
(2)  323/      F2 :                     ; Slot
(2)  324/      F2 :                     ; Ticks
(2)  325/      F2 :                     ; 24-bit patt data
(2)  326/      F2 :                     ; 24-bit block data
(2)  327/      F2 :                     .cmnd_trkplay:
(2)  328/      F2 : CD B9 01            		call	get_cmdbyte		; Get track slot
(2)  329/      F5 : CD A4 01            		call	get_trkindx		; and read index iy
(2)  330/      F8 : CD 9D 04            		call	track_out		; track out.
(2)  331/      FB : FD 36 1A FE         		ld	(iy+trk_CmdReq),-2
(2)  332/      FF : CD B9 01            		call	get_cmdbyte		; Get ticks
(2)  333/     102 : FD 77 15            		ld	(iy+trk_tickSet),a
(2)  334/     105 : CD B9 01            		call	get_cmdbyte		; Start block
(2)  335/     108 : FD 77 12            		ld	(iy+trk_setBlk),a
(2)  336/     10B : CD B9 01            		call	get_cmdbyte		; Flag bits
(2)  337/     10E : F6 C0               		or	11000000b		; Enable + First fill bits
(2)  338/     110 : FD 77 13            		ld	(iy+trk_status),a
(2)  339/     113 : CD B9 01            		call	get_cmdbyte		; Pattern data
(2)  340/     116 : FD 77 03            		ld	(iy+trk_romPatt),a
(2)  341/     119 : CD B9 01            		call	get_cmdbyte
(2)  342/     11C : FD 77 04            		ld	(iy+(trk_romPatt+1)),a
(2)  343/     11F : CD B9 01            		call	get_cmdbyte
(2)  344/     122 : FD 77 05            		ld	(iy+(trk_romPatt+2)),a
(2)  345/     125 : CD B9 01            		call	get_cmdbyte		; Block data
(2)  346/     128 : FD 77 00            		ld	(iy+trk_romBlk),a
(2)  347/     12B : CD B9 01            		call	get_cmdbyte
(2)  348/     12E : FD 77 01            		ld	(iy+(trk_romBlk+1)),a
(2)  349/     131 : CD B9 01            		call	get_cmdbyte
(2)  350/     134 : CD A0 0E            		call	get_tick
(2)  351/     137 : FD 77 02            		ld	(iy+(trk_romBlk+2)),a
(2)  352/     13A : CD B9 01            		call	get_cmdbyte		; Instrument data
(2)  353/     13D : FD 77 06            		ld	(iy+trk_romIns),a
(2)  354/     140 : CD B9 01            		call	get_cmdbyte
(2)  355/     143 : FD 77 07            		ld	(iy+(trk_romIns+1)),a
(2)  356/     146 : CD B9 01            		call	get_cmdbyte
(2)  357/     149 : FD 77 08            		ld	(iy+(trk_romIns+2)),a
(2)  358/     14C : 3E 01               		ld	a,1
(2)  359/     14E : FD 77 14            		ld	(iy+trk_tickTmr),a
(2)  360/     151 : CF                  		rst	8
(2)  361/     152 : C3 89 00            		jp	.next_cmd
(2)  362/     155 :                     
(2)  363/     155 :                     ; --------------------------------------------------------
(2)  364/     155 :                     ; $02 - Stop/Pause track
(2)  365/     155 :                     ; --------------------------------------------------------
(2)  366/     155 :                     
(2)  367/     155 :                     .cmnd_trkstop:
(2)  368/     155 : CD B9 01            		call	get_cmdbyte		; Get track slot
(2)  369/     158 : CD A4 01            		call	get_trkindx		; and read index iy
(2)  370/     15B : FD CB 13 7E         		bit	7,(iy+trk_status)	; This track is active?
(2)  371/     15F : CA 89 00            		jp	z,.next_cmd
(2)  372/     162 : CD 9D 04            		call	track_out		; track out.
(2)  373/     165 : FD 36 1A FF         		ld	(iy+trk_CmdReq),-1
(2)  374/     169 : FD CB 13 FE         		set	7,(iy+trk_status)
(2)  375/     16D : C3 89 00            		jp	.next_cmd
(2)  376/     170 :                     
(2)  377/     170 :                     ; --------------------------------------------------------
(2)  378/     170 :                     ; $03 - Resume track
(2)  379/     170 :                     ;
(2)  380/     170 :                     ; TODO: This doesn't work right. but I'm leaving
(2)  381/     170 :                     ; it here just in case.
(2)  382/     170 :                     ; --------------------------------------------------------
(2)  383/     170 :                     
(2)  384/     170 :                     .cmnd_trkresume:
(2)  385/     170 : CD B9 01            		call	get_cmdbyte		; Get track slot
(2)  386/     173 : CD A4 01            		call	get_trkindx		; and read index iy
(2)  387/     176 : FD CB 13 FE         		set	7,(iy+trk_status)	; Slot ON
(2)  388/     17A : C3 89 00            		jp	.next_cmd
(2)  389/     17D :                     
(2)  390/     17D :                     ; --------------------------------------------------------
(2)  391/     17D :                     ; $08 - Set track's ticks
(2)  392/     17D :                     ; --------------------------------------------------------
(2)  393/     17D :                     
(2)  394/     17D :                     .cmnd_trkticks:
(2)  395/     17D : CD B9 01            		call	get_cmdbyte		; Get track slot
(2)  396/     180 : CD A4 01            		call	get_trkindx		; and read index iyc
(2)  397/     183 : CD B9 01            		call	get_cmdbyte
(2)  398/     186 : FD 77 15            		ld	(iy+trk_tickSet),a
(2)  399/     189 : FD 77 14            		ld	(iy+trk_tickTmr),a
(2)  400/     18C : C3 89 00            		jp	.next_cmd
(2)  401/     18F :                     
(2)  402/     18F :                     ; --------------------------------------------------------
(2)  403/     18F :                     ; $10 - Set global tempo
(2)  404/     18F :                     ; --------------------------------------------------------
(2)  405/     18F :                     
(2)  406/     18F :                     .cmnd_trktempo:
(2)  407/     18F : CD B9 01            		call	get_cmdbyte		; Get track slot
(2)  408/     192 : CD A4 01            		call	get_trkindx		; and read index iyc
(2)  409/     195 : CD B9 01            		call	get_cmdbyte
(2)  410/     198 : 32 32 00            		ld	(sbeatPtck_1),a
(2)  411/     19B : CD B9 01            		call	get_cmdbyte
(2)  412/     19E : 32 33 00            		ld	(sbeatPtck_1+1),a
(2)  413/     1A1 : C3 89 00            		jp	.next_cmd
(2)  414/     1A4 :                     
(2)  415/     1A4 :                     ; --------------------------------------------------------
(2)  416/     1A4 :                     ; Pick track buffer
(2)  417/     1A4 :                     ;
(2)  418/     1A4 :                     ; a - track index
(2)  419/     1A4 :                     ; --------------------------------------------------------
(2)  420/     1A4 :                     
(2)  421/     1A4 :                     get_trkindx:
(2)  422/     1A4 : 21 B5 01            		ld	hl,trkPointers
(2)  423/     1A7 : 87                  		add	a,a
(2)  424/     1A8 : 16 00               		ld	d,0
(2)  425/     1AA : 5F                  		ld	e,a
(2)  426/     1AB : CF                  		rst	8
(2)  427/     1AC : 19                  		add	hl,de
(2)  428/     1AD : 7E                  		ld	a,(hl)
(2)  429/     1AE : 23                  		inc	hl
(2)  430/     1AF : 66                  		ld	h,(hl)
(2)  431/     1B0 : 6F                  		ld	l,a
(2)  432/     1B1 : E5                  		push	hl
(2)  433/     1B2 : FD E1               		pop	iy
(2)  434/     1B4 : C9                  		ret
(2)  435/     1B5 :                     trkPointers:
(2)  436/     1B5 : 50 19               		dw trkBuff_0
(2)  437/     1B7 : F8 19               		dw trkBuff_1
(2)  438/     1B9 :                     
(2)  439/     1B9 :                     ; --------------------------------------------------------
(2)  440/     1B9 :                     ; Read cmd byte, auto re-aligns to 7Fh
(2)  441/     1B9 :                     ; --------------------------------------------------------
(2)  442/     1B9 :                     
(2)  443/     1B9 :                     get_cmdbyte:
(2)  444/     1B9 : C5                  		push	bc
(2)  445/     1BA : D5                  		push	de
(2)  446/     1BB : E5                  		push	hl
(2)  447/     1BC :                     .getcbytel:
(2)  448/     1BC : 3A 1F 00            		ld	a,(commZWrite)
(2)  449/     1BF : 47                  		ld	b,a
(2)  450/     1C0 : 3A 1E 00            		ld	a,(commZRead)
(2)  451/     1C3 : B8                  		cp	b
(2)  452/     1C4 : 28 F6               		jr	z,.getcbytel	; wait for a command from 68k
(2)  453/     1C6 : CF                  		rst	8
(2)  454/     1C7 : 06 00               		ld	b,0
(2)  455/     1C9 : 4F                  		ld	c,a
(2)  456/     1CA : 21 00 1E            		ld	hl,commZfifo
(2)  457/     1CD : 09                  		add	hl,bc
(2)  458/     1CE : 3C                  		inc	a
(2)  459/     1CF : E6 3F               		and	3Fh		; command list limit
(2)  460/     1D1 : CF                  		rst	8
(2)  461/     1D2 : 32 1E 00            		ld	(commZRead),a
(2)  462/     1D5 : 7E                  		ld	a,(hl)		; a - the byte we got
(2)  463/     1D6 : E1                  		pop	hl
(2)  464/     1D7 : D1                  		pop	de
(2)  465/     1D8 : C1                  		pop	bc
(2)  466/     1D9 : C9                  		ret
(2)  467/     1DA :                     
(2)  468/     1DA :                     ; ====================================================================
(2)  469/     1DA :                     ; ----------------------------------------------------------------
(2)  470/     1DA :                     ; Sound playback code
(2)  471/     1DA :                     ; ----------------------------------------------------------------
(2)  472/     1DA :                     
(2)  473/     1DA :                     ; --------------------------------------------------------
(2)  474/     1DA :                     ; Read track data
(2)  475/     1DA :                     ; --------------------------------------------------------
(2)  476/     1DA :                     
(2)  477/     1DA :                     updtrack:
(2)  478/     1DA : E7                  		rst	20h
(2)  479/     1DB : FD 21 50 19         		ld	iy,trkBuff_0		; BGM
(2)  480/     1DF : CF                  		rst	8
(2)  481/     1E0 : 11 4B 18            		ld	de,insDataC_0
(2)  482/     1E3 : CD F2 01            		call	.read_track
(2)  483/     1E6 : FD 21 F8 19         		ld	iy,trkBuff_1		; SFX
(2)  484/     1EA : 11 CB 18            		ld	de,insDataC_1
(2)  485/     1ED : CF                  		rst	8
(2)  486/     1EE : CD F2 01            		call	.read_track
(2)  487/     1F1 : C9                  		ret
(2)  488/     1F2 :                     
(2)  489/     1F2 :                     ; ----------------------------------------
(2)  490/     1F2 :                     ; Read current track
(2)  491/     1F2 :                     ;
(2)  492/     1F2 :                     ; iy - Track control
(2)  493/     1F2 :                     ; ix - Track channels
(2)  494/     1F2 :                     ; de - Instrument CACHE point
(2)  495/     1F2 :                     ; ----------------------------------------
(2)  496/     1F2 :                     
(2)  497/     1F2 :                     .read_track:
(2)  498/     1F2 : FD 46 13            		ld	b,(iy+trk_status)	; b - Track status
(2)  499/     1F5 : CB 78               		bit	7,b			; Active?
(2)  500/     1F7 : C8                  		ret	z
(2)  501/     1F8 : FD 7E 1A            		ld	a,(iy+trk_CmdReq)	; Any mid-request?
(2)  502/     1FB : B7                  		or	a
(2)  503/     1FC : C0                  		ret	nz
(2)  504/     1FD : ED 53 40 1E         		ld	(currInsData),de	; save temporal InsData
(2)  505/     201 : CF                  		rst	8
(2)  506/     202 : 3A 2F 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(2)  507/     205 : CB 40               		bit	0,b			; This track uses Beats?
(2)  508/     207 : 28 03               		jr	z,.sfxmd		; Nope
(2)  509/     209 : CB 4F               		bit	1,a			; BEAT passed?
(2)  510/     20B : C8                  		ret	z
(2)  511/     20C :                     .sfxmd:
(2)  512/     20C : CB 47               		bit	0,a			; TICK passed?
(2)  513/     20E : C8                  		ret	z
(2)  514/     20F : FD 7E 14            		ld	a,(iy+trk_tickTmr)	; TICK timer for this track
(2)  515/     212 : 3D                  		dec	a
(2)  516/     213 : FD 77 14            		ld	(iy+trk_tickTmr),a
(2)  517/     216 : CF                  		rst	8
(2)  518/     217 : B7                  		or	a
(2)  519/     218 : C0                  		ret	nz			; If != 0, exit
(2)  520/     219 : CB 68               		bit	5,b			; Effect-requested track set?
(2)  521/     21B : C4 1F 04            		call	nz,.effect_fill
(2)  522/     21E : CB 70               		bit	6,b			; Restart/First time?
(2)  523/     220 : C4 27 04            		call	nz,.first_fill
(2)  524/     223 : FD 7E 15            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(2)  525/     226 : FD 77 14            		ld	(iy+trk_tickTmr),a
(2)  526/     229 : CF                  		rst	8
(2)  527/     22A : FD 6E 0C            		ld	l,(iy+trk_Read)		; hl - Pattern data to read in cache
(2)  528/     22D : FD 66 0D            		ld	h,(iy+((trk_Read+1)))
(2)  529/     230 : FD 4E 0E            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(2)  530/     233 : FD 46 0F            		ld	b,(iy+(trk_Rows+1))
(2)  531/     236 : 79                  		ld	a,c
(2)  532/     237 : B0                  		or	b
(2)  533/     238 : CC 79 03            		call	z,.next_track		; If rowtimer == 0, get next track data
(2)  534/     23B :                     ; 		cp	-1
(2)  535/     23B :                     ; 		ret	z
(2)  536/     23B :                     ; 		rst	8
(2)  537/     23B :                     
(2)  538/     23B :                     ; --------------------------------
(2)  539/     23B :                     ; Main reading loop
(2)  540/     23B :                     ; --------------------------------
(2)  541/     23B :                     
(2)  542/     23B :                     .next_note:
(2)  543/     23B : FD 7E 17            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(2)  544/     23E : B7                  		or	a
(2)  545/     23F : 20 17               		jr	nz,.decrow
(2)  546/     241 : 7E                  		ld	a,(hl)			; Check if timer or note
(2)  547/     242 : B7                  		or	a
(2)  548/     243 : 28 08               		jr	z,.exit			; If == 00h: exit
(2)  549/     245 : FA 64 02            		jp	m,.has_note		; 80h-0FFh: note data
(2)  550/     248 : FD 77 17            		ld	(iy+trk_rowPause),a
(2)  551/     24B : 18 00               		jr	.exit			; make row-timer, set hl+1
(2)  552/     24D :                     
(2)  553/     24D :                     ; --------------------------------
(2)  554/     24D :                     ; Exit
(2)  555/     24D :                     ; --------------------------------
(2)  556/     24D :                     
(2)  557/     24D :                     .exit:
(2)  558/     24D : CD 00 03            		call	.inc_cpatt
(2)  559/     250 : FD 75 0C            		ld	(iy+trk_Read),l		; Update read location
(2)  560/     253 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(2)  561/     256 : 18 03               		jr	.decrow_e
(2)  562/     258 :                     .decrow:
(2)  563/     258 : FD 35 17            		dec	(iy+trk_rowPause)
(2)  564/     25B :                     .decrow_e:
(2)  565/     25B : CF                  		rst	8
(2)  566/     25C : 0B                  		dec	bc			; Decrement this row
(2)  567/     25D : FD 71 0E            		ld	(iy+trk_Rows),c		; And update it
(2)  568/     260 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b
(2)  569/     263 : C9                  		ret
(2)  570/     264 :                     
(2)  571/     264 :                     ; --------------------------------
(2)  572/     264 :                     ; New note request
(2)  573/     264 :                     ; --------------------------------
(2)  574/     264 :                     
(2)  575/     264 :                     .has_note:
(2)  576/     264 : C5                  		push	bc			; Save rowcount
(2)  577/     265 : 4F                  		ld	c,a			; c - Copy of control+channel
(2)  578/     266 : CD 00 03            		call	.inc_cpatt
(2)  579/     269 : 79                  		ld	a,c
(2)  580/     26A : FD E5               		push	iy
(2)  581/     26C : DD E1               		pop	ix
(2)  582/     26E : 11 20 00            		ld	de,20h			; Point to track-data
(2)  583/     271 : DD 19               		add	ix,de
(2)  584/     273 : CF                  		rst	8
(2)  585/     274 : E6 3F               		and	00111111b
(2)  586/     276 :                     ; 		cp	(iy+trk_numChnls)	; TODO: mala idea.
(2)  587/     276 :                     ; 		jp	nc,.rnout_chnls
(2)  588/     276 : 87                  		add	a,a			; * 8
(2)  589/     277 : 87                  		add	a,a
(2)  590/     278 : 87                  		add	a,a
(2)  591/     279 : 16 00               		ld 	d,0
(2)  592/     27B : 5F                  		ld	e,a
(2)  593/     27C : DD 19               		add	ix,de
(2)  594/     27E : CF                  		rst	8
(2)  595/     27F : DD 46 07            		ld	b,(ix+chnl_Type)	; b - last Note type
(2)  596/     282 : CB 71               		bit	6,c			; Next byte is new type?
(2)  597/     284 : 28 06               		jr	z,.old_type
(2)  598/     286 : 7E                  		ld	a,(hl)
(2)  599/     287 : DD 77 07            		ld	(ix+chnl_Type),a
(2)  600/     28A : 47                  		ld	b,a
(2)  601/     28B : 2C                  		inc 	l
(2)  602/     28C :                     .old_type:
(2)  603/     28C :                     	; b - evinEVIN
(2)  604/     28C :                     	;     E-effect/V-volume/I-instrument/N-note
(2)  605/     28C :                     	;     evin: byte is already stored on track-channel buffer
(2)  606/     28C :                     	;     EVIN: next byte(s) contain a new value, for eff:2 bytes
(2)  607/     28C : CF                  		rst	8
(2)  608/     28D : CB 40               		bit	0,b
(2)  609/     28F : 28 07               		jr	z,.no_note
(2)  610/     291 : 7E                  		ld	a,(hl)
(2)  611/     292 : DD 77 02            		ld	(ix+chnl_Note),a
(2)  612/     295 : CD 00 03            		call	.inc_cpatt
(2)  613/     298 :                     .no_note:
(2)  614/     298 : CB 48               		bit	1,b
(2)  615/     29A : 28 07               		jr	z,.no_ins
(2)  616/     29C : 7E                  		ld	a,(hl)
(2)  617/     29D : DD 77 03            		ld	(ix+chnl_Ins),a
(2)  618/     2A0 : CD 00 03            		call	.inc_cpatt
(2)  619/     2A3 :                     .no_ins:
(2)  620/     2A3 : CF                  		rst	8
(2)  621/     2A4 : CB 50               		bit	2,b
(2)  622/     2A6 : 28 07               		jr	z,.no_vol
(2)  623/     2A8 : 7E                  		ld	a,(hl)
(2)  624/     2A9 : DD 77 04            		ld	(ix+chnl_Vol),a
(2)  625/     2AC : CD 00 03            		call	.inc_cpatt
(2)  626/     2AF :                     .no_vol:
(2)  627/     2AF : CB 58               		bit	3,b
(2)  628/     2B1 : 28 0E               		jr	z,.no_eff
(2)  629/     2B3 : 7E                  		ld	a,(hl)
(2)  630/     2B4 : DD 77 05            		ld	(ix+chnl_EffId),a
(2)  631/     2B7 : CD 00 03            		call	.inc_cpatt
(2)  632/     2BA : 7E                  		ld	a,(hl)
(2)  633/     2BB : DD 77 06            		ld	(ix+chnl_EffArg),a
(2)  634/     2BE : CD 00 03            		call	.inc_cpatt
(2)  635/     2C1 :                     .no_eff:
(2)  636/     2C1 : CF                  		rst	8
(2)  637/     2C2 : 78                  		ld	a,b			; Merge the Impulse recycle bits to main bits
(2)  638/     2C3 : CB 3F               		srl	a
(2)  639/     2C5 : CB 3F               		srl	a
(2)  640/     2C7 : CB 3F               		srl	a
(2)  641/     2C9 : CB 3F               		srl	a
(2)  642/     2CB : E6 0F               		and	00001111b
(2)  643/     2CD : 4F                  		ld	c,a
(2)  644/     2CE : CF                  		rst	8
(2)  645/     2CF : 78                  		ld	a,b
(2)  646/     2D0 : E6 0F               		and	00001111b
(2)  647/     2D2 : B1                  		or	c
(2)  648/     2D3 : 4F                  		ld	c,a
(2)  649/     2D4 : DD 7E 01            		ld	a,(ix+chnl_Flags)
(2)  650/     2D7 : B1                  		or	c
(2)  651/     2D8 : DD 77 01            		ld	(ix+chnl_Flags),a
(2)  652/     2DB : CF                  		rst	8
(2)  653/     2DC : C1                  		pop	bc			; Restore rowcount
(2)  654/     2DD :                     
(2)  655/     2DD :                     	; Check for effects that change things
(2)  656/     2DD :                     	; to internal playback (jump, tempo, etc.)
(2)  657/     2DD : E6 08               		and	1000b		; Filter EFFECT bit only
(2)  658/     2DF : B7                  		or	a
(2)  659/     2E0 : CA 3B 02            		jp	z,.next_note
(2)  660/     2E3 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(2)  661/     2E6 : B7                  		or	a		; 00h = invalid effect
(2)  662/     2E7 : CA 3B 02            		jp	z,.next_note
(2)  663/     2EA : FE 01               		cp	1		; Effect A: Tick set
(2)  664/     2EC : CC 4A 03            		call	z,.eff_A
(2)  665/     2EF : FE 02               		cp	2		; Effect B: Position Jump
(2)  666/     2F1 : CC 54 03            		call	z,.eff_B
(2)  667/     2F4 : FE 03               		cp	3		; Effect C: Pattern break
(2)  668/     2F6 : CC 6E 03            		call	z,.eff_C
(2)  669/     2F9 : C3 3B 02            		jp	.next_note
(2)  670/     2FC :                     .rnout_chnls:
(2)  671/     2FC : C1                  		pop	bc
(2)  672/     2FD : C3 3B 02            		jp	.next_note
(2)  673/     300 :                     
(2)  674/     300 :                     ; ----------------------------------------
(2)  675/     300 :                     ; Call this to increment the
(2)  676/     300 :                     ; cache pattern read pointer (iy+trk_Read)
(2)  677/     300 :                     ; it also refills the next section to
(2)  678/     300 :                     ; read if needed.
(2)  679/     300 :                     ;
(2)  680/     300 :                     ; NOTE: breaks A
(2)  681/     300 :                     ; ----------------------------------------
(2)  682/     300 :                     
(2)  683/     300 :                     .inc_cpatt:
(2)  684/     300 : 2C                  		inc	l
(2)  685/     301 : FD 7E 13            		ld	a,(iy+trk_status)	; Increment-fill enabled?
(2)  686/     304 : E6 10               		and	00010000b
(2)  687/     306 : B7                  		or	a
(2)  688/     307 : C8                  		ret	z
(2)  689/     308 : CF                  		rst	8
(2)  690/     309 : FD 7E 10            		ld	a,(iy+trk_Halfway)
(2)  691/     30C : AD                  		xor	l
(2)  692/     30D : E6 80               		and	080h			; Check for 00h/80h
(2)  693/     30F : C8                  		ret	z
(2)  694/     310 : CF                  		rst	8
(2)  695/     311 : 3A 1C 00            		ld	a,(commZRomBlk)		; Got mid-DMA?
(2)  696/     314 : B7                  		or	a
(2)  697/     315 : 28 06               		jr	z,.grab_asap
(2)  698/     317 : 7D                  		ld	a,l			; Last chance
(2)  699/     318 : E6 7F               		and	07Fh
(2)  700/     31A : FE 70               		cp	070h
(2)  701/     31C : D8                  		ret	c
(2)  702/     31D :                     .grab_asap:
(2)  703/     31D : E7                  		rst	20h			; refill request
(2)  704/     31E : FD 7E 10            		ld	a,(iy+trk_Halfway)	; +80h to halfway
(2)  705/     321 : 54                  		ld	d,h
(2)  706/     322 : 5F                  		ld	e,a
(2)  707/     323 : CF                  		rst	8
(2)  708/     324 : C6 80               		add 	a,080h
(2)  709/     326 : FD 77 10            		ld	(iy+trk_Halfway),a
(2)  710/     329 : E5                  		push	hl
(2)  711/     32A : C5                  		push	bc
(2)  712/     32B : 01 80 00            		ld	bc,80h			; 80h size + increment value
(2)  713/     32E : FD 6E 09            		ld	l,(iy+trk_romPattRd)
(2)  714/     331 : FD 66 0A            		ld	h,(iy+(trk_romPattRd+1))
(2)  715/     334 : CF                  		rst	8
(2)  716/     335 : FD 7E 0B            		ld	a,(iy+(trk_romPattRd+2))
(2)  717/     338 : 09                  		add	hl,bc
(2)  718/     339 : CE 00               		adc	a,0
(2)  719/     33B : FD 75 09            		ld	(iy+trk_romPattRd),l
(2)  720/     33E : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(2)  721/     341 : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(2)  722/     344 : CD 0F 0F            		call	transferRom
(2)  723/     347 : C1                  		pop	bc
(2)  724/     348 : E1                  		pop	hl
(2)  725/     349 : C9                  		ret
(2)  726/     34A :                     
(2)  727/     34A :                     ; ----------------------------------------
(2)  728/     34A :                     ; Effect A: Set ticks
(2)  729/     34A :                     ; ----------------------------------------
(2)  730/     34A :                     
(2)  731/     34A :                     .eff_A:
(2)  732/     34A : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(2)  733/     34D : FD 73 15            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(2)  734/     350 : FD 73 14            		ld	(iy+trk_tickTmr),e
(2)  735/     353 : C9                  		ret
(2)  736/     354 :                     
(2)  737/     354 :                     ; ----------------------------------------
(2)  738/     354 :                     ; Effect B: jump to a new block
(2)  739/     354 :                     ; ----------------------------------------
(2)  740/     354 :                     
(2)  741/     354 :                     .eff_B:
(2)  742/     354 : F5                  		push	af
(2)  743/     355 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(2)  744/     358 : FD 73 11            		ld 	(iy+trk_currBlk),e
(2)  745/     35B : CF                  		rst	8
(2)  746/     35C : FD 36 17 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(2)  747/     360 : DD 36 05 00         		ld	(ix+chnl_EffId),0	; (failsafe)
(2)  748/     364 : DD 36 06 00         		ld	(ix+chnl_EffArg),0
(2)  749/     368 : FD CB 13 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(2)  750/     36C : F1                  		pop	af
(2)  751/     36D : C9                  		ret
(2)  752/     36E :                     
(2)  753/     36E :                     ; ----------------------------------------
(2)  754/     36E :                     ; Effect C: Pattern break/exit
(2)  755/     36E :                     ; ***Not exactly as in Impulse but
(2)  756/     36E :                     ; jumps to the next block
(2)  757/     36E :                     ;
(2)  758/     36E :                     ; If set to -1 it will end the track,
(2)  759/     36E :                     ; so you can put multiple SFX into the
(2)  760/     36E :                     ; track file and call them by block.
(2)  761/     36E :                     ; ----------------------------------------
(2)  762/     36E :                     
(2)  763/     36E :                     .eff_C:
(2)  764/     36E : 01 00 00            		ld	bc,0			; clear rowcount
(2)  765/     371 : DD 7E 06            		ld	a,(ix+chnl_EffArg)
(2)  766/     374 : FE FF               		cp	-1			; EffArg == -1?
(2)  767/     376 : CA 8B 04            		jp	z,.trkend_effC		; Use it as track-end (for SFX)
(2)  768/     379 :                     
(2)  769/     379 :                     ; ----------------------------------------
(2)  770/     379 :                     ; If pattern finished, load the next one
(2)  771/     379 :                     ; ----------------------------------------
(2)  772/     379 :                     
(2)  773/     379 :                     .next_track:
(2)  774/     379 : FD 7E 11            		ld	a,(iy+trk_currBlk)	; Increment next block
(2)  775/     37C : 3C                  		inc	a
(2)  776/     37D : FD 77 11            		ld 	(iy+trk_currBlk),a
(2)  777/     380 :                     
(2)  778/     380 :                     ; Load track data to cache
(2)  779/     380 :                     ; a - Block
(2)  780/     380 :                     ;
(2)  781/     380 :                     ; hl - trk_read on halfway
(2)  782/     380 :                     .set_track:
(2)  783/     380 : CF                  		rst	8
(2)  784/     381 : FD 36 10 80         		ld	(iy+trk_Halfway),80h	; Reset halfway
(2)  785/     385 :                     ; 		ld	l,(iy+trk_CachNotes)	; Set trk_read point on halfway
(2)  786/     385 :                     ; 		ld	h,(iy+(trk_CachNotes+1))
(2)  787/     385 :                     ; 		ld	de,80h
(2)  788/     385 :                     ; 		add	hl,de
(2)  789/     385 : 2E 00               		ld	l,0			; quick reset trk_read
(2)  790/     387 : FD 75 0C            		ld	(iy+trk_Read),l
(2)  791/     38A : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(2)  792/     38D :                     
(2)  793/     38D : E5                  		push	hl			; Save hl
(2)  794/     38E : 11 00 00            		ld	de,0
(2)  795/     391 : 5F                  		ld	e,a
(2)  796/     392 : CF                  		rst	8
(2)  797/     393 : FD 6E 00            		ld	l,(iy+trk_romBlk)	; Get block position
(2)  798/     396 : FD 66 01            		ld	h,(iy+(trk_romBlk+1))	; directly from ROM
(2)  799/     399 : FD 7E 02            		ld	a,(iy+(trk_romBlk+2))
(2)  800/     39C : 19                  		add	hl,de
(2)  801/     39D : CE 00               		adc	a,0
(2)  802/     39F : 47                  		ld	b,a
(2)  803/     3A0 : CF                  		rst	8
(2)  804/     3A1 : CD C1 0E            		call	showRom
(2)  805/     3A4 : CD E2 0E            		call	readRomB
(2)  806/     3A7 : FE FF               		cp	-1			; if block == -1, end
(2)  807/     3A9 : CA 8A 04            		jp	z,.track_end
(2)  808/     3AC :                     
(2)  809/     3AC :                     	; a - head index
(2)  810/     3AC : 87                  		add	a,a
(2)  811/     3AD : 87                  		add	a,a
(2)  812/     3AE : 16 00               		ld	d,0
(2)  813/     3B0 : 5F                  		ld	e,a
(2)  814/     3B1 : FD 6E 03            		ld	l,(iy+trk_romPatt)
(2)  815/     3B4 : CF                  		rst	8
(2)  816/     3B5 : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(2)  817/     3B8 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(2)  818/     3BB : 19                  		add	hl,de
(2)  819/     3BC : CE 00               		adc	a,0
(2)  820/     3BE : 11 60 1E            		ld	de,trkHdOut
(2)  821/     3C1 : D5                  		push	de
(2)  822/     3C2 : 01 06 00            		ld	bc,6			; thispoint, rowcount, nextpoint
(2)  823/     3C5 : CD 0F 0F            		call	transferRom
(2)  824/     3C8 : E1                  		pop	hl
(2)  825/     3C9 : 5E                  		ld	e,(hl)			; de - pointer increment
(2)  826/     3CA : 23                  		inc	hl
(2)  827/     3CB : 56                  		ld	d,(hl)
(2)  828/     3CC : 23                  		inc	hl
(2)  829/     3CD : 4E                  		ld	c,(hl)			; bc - row count
(2)  830/     3CE : 23                  		inc	hl
(2)  831/     3CF : 46                  		ld	b,(hl)
(2)  832/     3D0 : CF                  		rst	8
(2)  833/     3D1 : FD 71 0E            		ld	(iy+trk_Rows),c		; Save this number of rows to buffer
(2)  834/     3D4 : FD 70 0F            		ld	(iy+(trk_Rows+1)),b	; on Tick pauses
(2)  835/     3D7 : C5                  		push	bc			; Save bc
(2)  836/     3D8 : E7                  		rst	20h			; refill wave
(2)  837/     3D9 :                     
(2)  838/     3D9 :                     	; Detect pattern size... last moment addition
(2)  839/     3D9 :                     	; for patterns lower than 80h.
(2)  840/     3D9 :                     	; This saves cycles if using SFX
(2)  841/     3D9 :                     	; hl - next pattern point (includes final)
(2)  842/     3D9 :                     	; de - this pattern
(2)  843/     3D9 :                     	; bc - final size for transferRom
(2)  844/     3D9 : 3A 64 1E            		ld	a,(trkHdOut+4)	; hl - de
(2)  845/     3DC : 6F                  		ld	l,a
(2)  846/     3DD : 3A 65 1E            		ld	a,(trkHdOut+5)
(2)  847/     3E0 : 67                  		ld	h,a
(2)  848/     3E1 : 3F                  		ccf			; remove carry first
(2)  849/     3E2 : ED 52               		sbc	hl,de
(2)  850/     3E4 : FD 4E 13            		ld	c,(iy+trk_status)
(2)  851/     3E7 : CB A1               		res	4,c
(2)  852/     3E9 : 7C                  		ld	a,h		; h == 0?
(2)  853/     3EA : B7                  		or	a
(2)  854/     3EB :                     ; 		jp	m,$
(2)  855/     3EB : 20 04               		jr	nz,.szmuch
(2)  856/     3ED : CB 7D               		bit	7,l
(2)  857/     3EF : 28 05               		jr	z,.szgood
(2)  858/     3F1 :                     .szmuch:
(2)  859/     3F1 : 21 80 00            		ld	hl,080h			; bc - max transfer size 080h
(2)  860/     3F4 : CB E1               		set	4,c
(2)  861/     3F6 :                     .szgood:
(2)  862/     3F6 : FD 71 13            		ld	(iy+trk_status),c
(2)  863/     3F9 : 44                  		ld	b,h
(2)  864/     3FA : 4D                  		ld	c,l
(2)  865/     3FB : FD 6E 03            		ld	l,(iy+trk_romPatt)	; hl - ROM pattern data pointer
(2)  866/     3FE : FD 66 04            		ld	h,(iy+(trk_romPatt+1))
(2)  867/     401 : FD 7E 05            		ld	a,(iy+(trk_romPatt+2))
(2)  868/     404 : 19                  		add	hl,de			; hl + de
(2)  869/     405 : CE 00               		adc	a,0			; and highest byte too.
(2)  870/     407 : CF                  		rst	8
(2)  871/     408 : FD 75 09            		ld	(iy+trk_romPattRd),l	; Save copy of the pointer for READ
(2)  872/     40B : FD 74 0A            		ld	(iy+(trk_romPattRd+1)),h
(2)  873/     40E : FD 77 0B            		ld	(iy+(trk_romPattRd+2)),a
(2)  874/     411 : FD 56 0D            		ld	d,(iy+(trk_Read+1))	; de - destination to data CACHE
(2)  875/     414 : FD 5E 0C            		ld	e,(iy+trk_Read)
(2)  876/     417 :                     ; 		ld	bc,080h			; bc - 080h
(2)  877/     417 : CD 0F 0F            		call	transferRom
(2)  878/     41A : CF                  		rst	8
(2)  879/     41B : C1                  		pop	bc			; Get bc back
(2)  880/     41C : E1                  		pop	hl			; hl too.
(2)  881/     41D : AF                  		xor	a			; return 0
(2)  882/     41E : C9                  		ret
(2)  883/     41F :                     
(2)  884/     41F :                     ; ----------------------------------------
(2)  885/     41F :                     ; First time playing or moving
(2)  886/     41F :                     ; to next track.
(2)  887/     41F :                     ; ----------------------------------------
(2)  888/     41F :                     
(2)  889/     41F :                     .effect_fill:
(2)  890/     41F : E7                  		rst	20h			; Refill wave data
(2)  891/     420 : CB A8               		res	5,b			; Reset refill-from-effect flag
(2)  892/     422 : FD 70 13            		ld	(iy+trk_status),b
(2)  893/     425 : 18 36               		jr	.go_effect
(2)  894/     427 :                     ; 		call	.go_effect
(2)  895/     427 :                     ; 		ret
(2)  896/     427 :                     
(2)  897/     427 :                     ; returns bc as row counter
(2)  898/     427 :                     .first_fill:
(2)  899/     427 : E7                  		rst	20h
(2)  900/     428 : CB B0               		res	6,b			; Reset FILL flag
(2)  901/     42A : FD 70 13            		ld	(iy+trk_status),b
(2)  902/     42D : FD E5               		push	iy
(2)  903/     42F : DD E1               		pop	ix			; copy iy to ix
(2)  904/     431 : 11 20 00            		ld	de,20h			; go to channel data
(2)  905/     434 : DD 19               		add	ix,de
(2)  906/     436 : CF                  		rst	8
(2)  907/     437 : 01 00 00            		ld	bc,0
(2)  908/     43A : 11 08 00            		ld	de,8
(2)  909/     43D : 06 11               		ld	b,MAX_TRKCHN
(2)  910/     43F :                     .clrf:
(2)  911/     43F : CF                  		rst	8
(2)  912/     440 : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  913/     443 : B7                  		or	a
(2)  914/     444 : 28 09               		jr	z,.nochip
(2)  915/     446 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(2)  916/     44A : DD 36 01 01         		ld	(ix+chnl_Flags),1
(2)  917/     44E : CF                  		rst	8
(2)  918/     44F :                     .nochip:
(2)  919/     44F : DD 19               		add	ix,de
(2)  920/     451 : 10 EC               		djnz	.clrf
(2)  921/     453 : FD 36 17 00         		ld	(iy+trk_rowPause),0	; Reset row timer
(2)  922/     457 : FD 7E 12            		ld	a,(iy+trk_setBlk)	; Set current block
(2)  923/     45A : FD 77 11            		ld 	(iy+trk_currBlk),a
(2)  924/     45D :                     .go_effect:
(2)  925/     45D : CF                  		rst	8			; First cache fills
(2)  926/     45E : FD 6E 06            		ld	l,(iy+trk_romIns)	; Recieve almost 100h of instrument pointers
(2)  927/     461 : FD 66 07            		ld	h,(iy+(trk_romIns+1))	; NOTE: transferRom can't do 100h
(2)  928/     464 : FD 7E 08            		ld	a,(iy+(trk_romIns+2))
(2)  929/     467 : ED 5B 40 1E         		ld	de,(currInsData)
(2)  930/     46B : 06 00               		ld	b,0
(2)  931/     46D : FD 4E 16            		ld	c,(iy+trk_sizeIns)
(2)  932/     470 : CD 0F 0F            		call	transferRom
(2)  933/     473 : CF                  		rst	8
(2)  934/     474 : FD 6E 18            		ld	l,(iy+trk_CachNotes)	; Read first cache notes
(2)  935/     477 : FD 66 19            		ld	h,(iy+(trk_CachNotes+1))
(2)  936/     47A : 11 80 00            		ld	de,80h
(2)  937/     47D : 19                  		add	hl,de
(2)  938/     47E : FD 75 0C            		ld	(iy+trk_Read),l
(2)  939/     481 : FD 74 0D            		ld	(iy+((trk_Read+1))),h
(2)  940/     484 : FD 7E 11            		ld	a,(iy+trk_currBlk)
(2)  941/     487 : C3 80 03            		jp	.set_track
(2)  942/     48A :                     
(2)  943/     48A :                     ; If -1, track ends
(2)  944/     48A :                     ; Automutes channels too.
(2)  945/     48A :                     .track_end:
(2)  946/     48A : E1                  		pop	hl			; Get hl back
(2)  947/     48B :                     .trkend_effC:
(2)  948/     48B : CD 9D 04            		call	track_out
(2)  949/     48E :                     ; 		ld	(iy+trk_CmdReq),-1
(2)  950/     48E : CF                  		rst	8
(2)  951/     48F : FD 36 17 00         		ld	(iy+trk_rowPause),0
(2)  952/     493 : FD 36 14 00         		ld	(iy+trk_tickTmr),0
(2)  953/     497 : 01 00 00            		ld	bc,0			; Set bc rowcount to 0
(2)  954/     49A : 3E FF               		ld	a,-1			; Return -1
(2)  955/     49C : C9                  		ret
(2)  956/     49D :                     
(2)  957/     49D :                     ; ----------------------------------------
(2)  958/     49D :                     ; Delete all track data
(2)  959/     49D :                     ; ----------------------------------------
(2)  960/     49D :                     
(2)  961/     49D :                     track_out:
(2)  962/     49D : FD E5               		push	iy
(2)  963/     49F : DD E1               		pop	ix
(2)  964/     4A1 : 11 20 00            		ld	de,20h
(2)  965/     4A4 : DD 19               		add	ix,de
(2)  966/     4A6 : CF                  		rst	8
(2)  967/     4A7 : 11 08 00            		ld	de,8
(2)  968/     4AA : 06 11               		ld	b,MAX_TRKCHN
(2)  969/     4AC :                     .clrfe:
(2)  970/     4AC : DD 7E 00            		ld	a,(ix+chnl_Chip)
(2)  971/     4AF : B7                  		or	a
(2)  972/     4B0 : 28 0C               		jr	z,.nochip
(2)  973/     4B2 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(2)  974/     4B6 : DD 7E 01            		ld	a,(ix+chnl_Flags)
(2)  975/     4B9 : 3E 01               		ld	a,1
(2)  976/     4BB : DD 77 01            		ld	(ix+chnl_Flags),a
(2)  977/     4BE :                     .nochip:
(2)  978/     4BE : DD 19               		add	ix,de
(2)  979/     4C0 : 10 EA               		djnz	.clrfe
(2)  980/     4C2 : 3E 01               		ld	a,1
(2)  981/     4C4 : 32 30 00            		ld	(marsUpd),a
(2)  982/     4C7 : C9                  		ret
(2)  983/     4C8 :                     
(2)  984/     4C8 :                     ; --------------------------------------------------------
(2)  985/     4C8 :                     ; ** 32X ONLY ***
(2)  986/     4C8 :                     ; Communicate to Slave SH2 to play
(2)  987/     4C8 :                     ; PWM sound channels
(2)  988/     4C8 :                     ; --------------------------------------------------------
(2)  989/     4C8 :                     
(2)  990/     4C8 :                     mars_scomm:
(2)  991/     4C8 : 21 00 60            		ld	hl,6000h	; Point BANK closely
(2)  992/     4CB : CF                  		rst	8		; to the 32X area
(2)  993/     4CC : 36 00               		ld	(hl),0
(2)  994/     4CE : 36 01               		ld	(hl),1
(2)  995/     4D0 : 36 00               		ld	(hl),0
(2)  996/     4D2 : 36 00               		ld	(hl),0
(2)  997/     4D4 : CF                  		rst	8
(2)  998/     4D5 : 36 00               		ld	(hl),0
(2)  999/     4D7 : 36 00               		ld	(hl),0
(2) 1000/     4D9 : 36 01               		ld	(hl),1
(2) 1001/     4DB : 36 00               		ld	(hl),0
(2) 1002/     4DD : CF                  		rst	8
(2) 1003/     4DE : 36 01               		ld	(hl),1
(2) 1004/     4E0 : FD 21 00 D1         		ld	iy,5100h|8000h	; iy - mars sysreg
(2) 1005/     4E4 : DD 21 30 16         		ld	ix,pwmcom
(2) 1006/     4E8 : 3A 2E 00            		ld	a,(marsBlock)	; block MARS requests?
(2) 1007/     4EB : B7                  		or	a
(2) 1008/     4EC : 20 5F               		jr	nz,.blocked
(2) 1009/     4EE : 3A 30 00            		ld	a,(marsUpd)	; update?
(2) 1010/     4F1 : B7                  		or	a
(2) 1011/     4F2 : C8                  		ret	z
(2) 1012/     4F3 : CF                  		rst	8
(2) 1013/     4F4 : AF                  		xor	a
(2) 1014/     4F5 : 32 30 00            		ld	(marsUpd),a
(2) 1015/     4F8 :                     
(2) 1016/     4F8 :                     .wait_enter:
(2) 1017/     4F8 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(2) 1018/     4FB : CB 7F               		bit	7,a
(2) 1019/     4FD : 20 F9               		jr	nz,.wait_enter
(2) 1020/     4FF : F6 01               		or	1		; Set CMD mode 1
(2) 1021/     501 : FD 77 2E            		ld	(iy+comm14),a
(2) 1022/     504 : CF                  		rst	8
(2) 1023/     505 : E6 0F               		and	00001111b	; did it write?
(2) 1024/     507 : FE 01               		cp	1
(2) 1025/     509 : 20 ED               		jr	nz,.wait_enter
(2) 1026/     50B : FD CB 2E FE         		set	7,(iy+comm14)	; Set busy flag
(2) 1027/     50F : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(2) 1028/     513 : CF                  		rst	8
(2) 1029/     514 :                     .wait_cmd:
(2) 1030/     514 : FD CB 03 4E         		bit	1,(iy+standby)	; Got in?
(2) 1031/     518 : 20 FA               		jr	nz,.wait_cmd
(2) 1032/     51A : 0E 0E               		ld	c,14		; c - 14 words
(2) 1033/     51C :                     .next_pass:
(2) 1034/     51C : FD E5               		push	iy
(2) 1035/     51E : E1                  		pop	hl
(2) 1036/     51F : CF                  		rst	8
(2) 1037/     520 : 11 28 00            		ld	de,comm8	; hl - comm8
(2) 1038/     523 : 19                  		add	hl,de
(2) 1039/     524 : 06 02               		ld	b,2
(2) 1040/     526 :                     .next_comm:
(2) 1041/     526 : DD 56 00            		ld	d,(ix)
(2) 1042/     529 : DD 5E 01            		ld	e,(ix+1)
(2) 1043/     52C : DD 23               		inc	ix
(2) 1044/     52E : DD 23               		inc	ix
(2) 1045/     530 : CF                  		rst	8
(2) 1046/     531 : 72                  		ld	(hl),d
(2) 1047/     532 : 23                  		inc	hl
(2) 1048/     533 : 73                  		ld	(hl),e
(2) 1049/     534 : 23                  		inc	hl
(2) 1050/     535 : 10 EF               		djnz	.next_comm
(2) 1051/     537 : FD CB 2E F6         		set	6,(iy+comm14)	; Send CLK to Slave CMD
(2) 1052/     53B : CF                  		rst	8
(2) 1053/     53C :                     .w_pass2:
(2) 1054/     53C : FD CB 2E 76         		bit	6,(iy+comm14)	; CLK cleared?
(2) 1055/     540 : 20 FA               		jr	nz,.w_pass2
(2) 1056/     542 : 0D                  		dec	c
(2) 1057/     543 : 20 D7               		jr	nz,.next_pass
(2) 1058/     545 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(2) 1059/     549 : FD CB 2E B6         		res	6,(iy+comm14)	; Clear CLK
(2) 1060/     54D :                     
(2) 1061/     54D :                     	; clear COM bytes here.
(2) 1062/     54D :                     .blocked:
(2) 1063/     54D : 21 30 16            		ld	hl,pwmcom
(2) 1064/     550 : 06 07               		ld	b,7		; MAX PWM channels
(2) 1065/     552 :                     .clrcom:
(2) 1066/     552 : 36 00               		ld	(hl),0
(2) 1067/     554 : 23                  		inc	hl
(2) 1068/     555 : 10 FB               		djnz	.clrcom
(2) 1069/     557 : C9                  		ret
(2) 1070/     558 :                     
(2) 1071/     558 :                     ; --------------------------------------------------------
(2) 1072/     558 :                     ; Set and play instruments in their respective channels
(2) 1073/     558 :                     ; --------------------------------------------------------
(2) 1074/     558 :                     
(2) 1075/     558 :                     setupchip:
(2) 1076/     558 : 21 4B 18            		ld	hl,insDataC_0
(2) 1077/     55B : FD 21 50 19         		ld	iy,trkBuff_0		; iy - Tracker channels
(2) 1078/     55F : CD 69 05            		call	.mk_chip
(2) 1079/     562 : 21 CB 18            		ld	hl,insDataC_1
(2) 1080/     565 : FD 21 F8 19         		ld	iy,trkBuff_1
(2) 1081/     569 :                     .mk_chip:
(2) 1082/     569 : FD 7E 13            		ld	a,(iy+trk_status)	; enable bit? (as plus/minus test)
(2) 1083/     56C : B7                  		or	a
(2) 1084/     56D : F0                  		ret	p
(2) 1085/     56E :                     
(2) 1086/     56E : FD 7E 1A            		ld	a,(iy+trk_CmdReq)
(2) 1087/     571 : FD 36 1A 00         		ld	(iy+trk_CmdReq),0
(2) 1088/     575 : FE FF               		cp	-1
(2) 1089/     577 : 20 04               		jr	nz,.clr
(2) 1090/     579 : FD CB 13 BE         		res	7,(iy+trk_status)
(2) 1091/     57D :                     .clr:
(2) 1092/     57D :                     
(2) 1093/     57D : 22 40 1E            		ld	(currInsData),hl
(2) 1094/     580 : FD 22 46 1E         		ld	(currTrkCtrl),iy
(2) 1095/     584 :                     ; 		rst	8
(2) 1096/     584 : 11 20 00            		ld	de,20h
(2) 1097/     587 : FD 19               		add	iy,de
(2) 1098/     589 : 06 11               		ld	b,MAX_TRKCHN
(2) 1099/     58B :                     .nxt_chnl:
(2) 1100/     58B : FD 7E 01            		ld	a,(iy+chnl_Flags)	; Get status bits
(2) 1101/     58E : E6 0F               		and	00001111b
(2) 1102/     590 : B7                  		or	a			; Check for non-zero
(2) 1103/     591 : C4 9D 05            		call	nz,.do_chnl
(2) 1104/     594 : CF                  		rst	8
(2) 1105/     595 : 11 08 00            		ld	de,8			; Next CHANNEL
(2) 1106/     598 : FD 19               		add	iy,de
(2) 1107/     59A : 10 EF               		djnz	.nxt_chnl
(2) 1108/     59C : C9                  		ret
(2) 1109/     59D :                     
(2) 1110/     59D :                     ; ----------------------------------------
(2) 1111/     59D :                     ; Channel requested update
(2) 1112/     59D :                     ;
(2) 1113/     59D :                     ; iy - Current channel
(2) 1114/     59D :                     ; ----------------------------------------
(2) 1115/     59D :                     
(2) 1116/     59D :                     .do_chnl:
(2) 1117/     59D : C5                  		push	bc
(2) 1118/     59E : CD 83 0D            		call	.check_ins
(2) 1119/     5A1 : FE FF               		cp	-1			; NULL instrument?
(2) 1120/     5A3 : 28 39               		jr	z,.no_chnl
(2) 1121/     5A5 : CD 93 0C            		call	.chip_swap		; check if this channel switched chip
(2) 1122/     5A8 : CD 96 0D            		call	.check_chnl		; a - chip requested
(2) 1123/     5AB : FE FF               		cp	-1
(2) 1124/     5AD : 28 25               		jr	z,.ran_out
(2) 1125/     5AF : 22 44 1E            		ld	(currInsPos),hl
(2) 1126/     5B2 : DD 22 42 1E         		ld	(currTblPos),ix
(2) 1127/     5B6 : E7                  		rst	20h
(2) 1128/     5B7 : FD CB 01 4E         		bit	1,(iy+chnl_Flags)
(2) 1129/     5BB : C4 E4 05            		call	nz,.req_ins
(2) 1130/     5BE : FD CB 01 56         		bit	2,(iy+chnl_Flags)
(2) 1131/     5C2 : C4 41 07            		call	nz,.req_vol
(2) 1132/     5C5 : CF                  		rst	8
(2) 1133/     5C6 : FD CB 01 5E         		bit	3,(iy+chnl_Flags)
(2) 1134/     5CA : C4 DC 07            		call	nz,.req_eff
(2) 1135/     5CD : FD CB 01 46         		bit	0,(iy+chnl_Flags)
(2) 1136/     5D1 : C4 38 0A            		call	nz,.req_note
(2) 1137/     5D4 :                     ; 		ld	a,(iy+chnl_Flags)	; Instrument+effect also allowed.
(2) 1138/     5D4 :                     ; 		and	1010b
(2) 1139/     5D4 :                     ; 		or	a
(2) 1140/     5D4 :                     ; 		call	nz,.req_note
(2) 1141/     5D4 :                     
(2) 1142/     5D4 :                     .ran_out:
(2) 1143/     5D4 : FD 7E 01            		ld	a,(iy+chnl_Flags)	; Clear status bits
(2) 1144/     5D7 : E6 F0               		and	11110000b
(2) 1145/     5D9 : FD 77 01            		ld	(iy+chnl_Flags),a
(2) 1146/     5DC : C1                  		pop	bc
(2) 1147/     5DD : C9                  		ret
(2) 1148/     5DE :                     .no_chnl:
(2) 1149/     5DE :                     ; 		call	.chip_swap
(2) 1150/     5DE : FD 36 00 00         		ld	(iy+chnl_Chip),0
(2) 1151/     5E2 :                     ; 		ld	(ix+chnl_Flags),0
(2) 1152/     5E2 : C1                  		pop	bc
(2) 1153/     5E3 : C9                  		ret
(2) 1154/     5E4 :                     
(2) 1155/     5E4 :                     ; ----------------------------------------
(2) 1156/     5E4 :                     ; bit 1: Intrument
(2) 1157/     5E4 :                     ; ----------------------------------------
(2) 1158/     5E4 :                     
(2) 1159/     5E4 :                     .req_ins:
(2) 1160/     5E4 : 2A 44 1E            		ld	hl,(currInsPos)
(2) 1161/     5E7 : DD 2A 42 1E         		ld	ix,(currTblPos)
(2) 1162/     5EB : 7E                  		ld	a,(hl)
(2) 1163/     5EC : E6 F0               		and	11110000b
(2) 1164/     5EE : FE 80               		cp	80h		; PSG normal
(2) 1165/     5F0 : 28 5A               		jr	z,.ins_psg
(2) 1166/     5F2 : FE 90               		cp	90h		; PSG noise
(2) 1167/     5F4 : 28 50               		jr	z,.ins_psgn
(2) 1168/     5F6 : CF                  		rst	8
(2) 1169/     5F7 : FE A0               		cp	0A0h		; FM normal
(2) 1170/     5F9 : CA C4 06            		jp	z,.ins_fm
(2) 1171/     5FC : FE B0               		cp	0B0h		; FM special
(2) 1172/     5FE : CA B5 06            		jp	z,.ins_fm3
(2) 1173/     601 : FE C0               		cp	0C0h		; DAC
(2) 1174/     603 : 28 76               		jr	z,.ins_dac
(2) 1175/     605 : FE D0               		cp	0D0h		; PWM
(2) 1176/     607 : CA 0B 06            		jp	z,.ins_pwm
(2) 1177/     60A : C9                  		ret
(2) 1178/     60B :                     
(2) 1179/     60B :                     ; --------------------------------
(2) 1180/     60B :                     ; FM,FM3,FM6
(2) 1181/     60B :                     ; --------------------------------
(2) 1182/     60B :                     
(2) 1183/     60B :                     .ins_pwm:
(2) 1184/     60B : 56                  		ld	d,(hl)		; d - Flags
(2) 1185/     60C : 23                  		inc	hl
(2) 1186/     60D : 7E                  		ld	a,(hl)		; Save pitch
(2) 1187/     60E : 23                  		inc	hl
(2) 1188/     60F : DD 77 03            		ld	(ix+3),a
(2) 1189/     612 : DD 7E 02            		ld	a,(ix+2)
(2) 1190/     615 : DD 21 30 16         		ld	ix,pwmcom	; ix - pwmcom
(2) 1191/     619 : E6 07               		and	000111b
(2) 1192/     61B : 06 00               		ld	b,0
(2) 1193/     61D : 4F                  		ld	c,a
(2) 1194/     61E : DD 09               		add	ix,bc
(2) 1195/     620 : 7E                  		ld	a,(hl)		; SH2 BANK
(2) 1196/     621 : 23                  		inc	hl
(2) 1197/     622 : E6 0F               		and	00001111b
(2) 1198/     624 : 47                  		ld	b,a		; b - Section, ROM or SDRAM
(2) 1199/     625 : DD 7E 18            		ld	a,(ix+PWOUTF)
(2) 1200/     628 : E6 30               		and	00110000b	; keep flag LR
(2) 1201/     62A : 4F                  		ld	c,a		; save them as C
(2) 1202/     62B : 7A                  		ld	a,d
(2) 1203/     62C : E6 03               		and	00000011b	; Stereo|Loop bits
(2) 1204/     62E : 0F                  		rrca			; carry...
(2) 1205/     62F : 0F                  		rrca
(2) 1206/     630 : B1                  		or	c
(2) 1207/     631 : B0                  		or	b
(2) 1208/     632 : DD 77 18            		ld	(ix+PWOUTF),a
(2) 1209/     635 : 7E                  		ld	a,(hl)		; Grab the 24-bit address (BIG endian)
(2) 1210/     636 : 23                  		inc	hl
(2) 1211/     637 : DD 77 20            		ld	(ix+PWINSH),a
(2) 1212/     63A : CF                  		rst	8
(2) 1213/     63B : 7E                  		ld	a,(hl)
(2) 1214/     63C : 23                  		inc	hl
(2) 1215/     63D : DD 77 28            		ld	(ix+PWINSM),a
(2) 1216/     640 : 7E                  		ld	a,(hl)
(2) 1217/     641 : 23                  		inc	hl
(2) 1218/     642 : DD 77 30            		ld	(ix+PWINSL),a
(2) 1219/     645 : C9                  		ret
(2) 1220/     646 :                     
(2) 1221/     646 :                     ; --------------------------------
(2) 1222/     646 :                     ; PSG1-3,PSGN
(2) 1223/     646 :                     ; --------------------------------
(2) 1224/     646 :                     
(2) 1225/     646 :                     .ins_psgn:
(2) 1226/     646 : 7E                  		ld	a,(hl)		; Extra bits for NOISE
(2) 1227/     647 : E6 07               		and	111b
(2) 1228/     649 : DD 77 04            		ld	(ix+4),a
(2) 1229/     64C :                     .ins_psg:
(2) 1230/     64C : CF                  		rst	8
(2) 1231/     64D : 23                  		inc	hl		; Skip ID
(2) 1232/     64E : 7E                  		ld	a,(hl)
(2) 1233/     64F : DD 77 03            		ld	(ix+3),a	; Save pitch
(2) 1234/     652 : 23                  		inc	hl
(2) 1235/     653 : DD 7E 02            		ld	a,(ix+2)
(2) 1236/     656 : E6 03               		and	11b
(2) 1237/     658 : 16 00               		ld	d,0
(2) 1238/     65A : 5F                  		ld	e,a
(2) 1239/     65B : DD 21 8C 16         		ld	ix,psgcom
(2) 1240/     65F : DD 19               		add	ix,de
(2) 1241/     661 : 7E                  		ld	a,(hl)
(2) 1242/     662 :                     
(2) 1243/     662 :                     	; TODO: ponerlos en un buffer separado
(2) 1244/     662 : DD 77 24            		ld	(ix+ALV),a	; ALV
(2) 1245/     665 : 23                  		inc	hl
(2) 1246/     666 : 7E                  		ld	a,(hl)
(2) 1247/     667 : DD 77 08            		ld	(ix+ATK),a	; ATK
(2) 1248/     66A : 23                  		inc	hl
(2) 1249/     66B : CF                  		rst	8
(2) 1250/     66C : 7E                  		ld	a,(hl)
(2) 1251/     66D : DD 77 10            		ld	(ix+SLV),a	; SLV
(2) 1252/     670 : 23                  		inc	hl
(2) 1253/     671 : 7E                  		ld	a,(hl)
(2) 1254/     672 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(2) 1255/     675 : 23                  		inc	hl
(2) 1256/     676 : 7E                  		ld	a,(hl)
(2) 1257/     677 : DD 77 14            		ld	(ix+RRT),a	; RRT
(2) 1258/     67A : C9                  		ret
(2) 1259/     67B :                     
(2) 1260/     67B :                     ; --------------------------------
(2) 1261/     67B :                     ; FM,FM3,FM6
(2) 1262/     67B :                     ; --------------------------------
(2) 1263/     67B :                     
(2) 1264/     67B :                     .ins_dac:
(2) 1265/     67B : DD 36 04 01         		ld	(ix+4),1	; e - alternate mode flag (FM6 as DAC)
(2) 1266/     67F : 7E                  		ld	a,(hl)		; Grab flags from ID
(2) 1267/     680 : E6 01               		and	001b
(2) 1268/     682 : 32 56 1E            		ld	(wave_Flags),a
(2) 1269/     685 : 23                  		inc	hl
(2) 1270/     686 : 7E                  		ld	a,(hl)		; Save pitch
(2) 1271/     687 : DD 77 03            		ld	(ix+3),a
(2) 1272/     68A : 23                  		inc	hl
(2) 1273/     68B : 4E                  		ld	c,(hl)		; Grab the 24-bit address
(2) 1274/     68C : 23                  		inc	hl		; big endian this time.
(2) 1275/     68D : CF                  		rst	8
(2) 1276/     68E : 56                  		ld	d,(hl)
(2) 1277/     68F : 23                  		inc	hl
(2) 1278/     690 : 5E                  		ld	e,(hl)
(2) 1279/     691 :                     
(2) 1280/     691 : CF                  		rst	8
(2) 1281/     692 : 6B                  		ld	l,e
(2) 1282/     693 : 62                  		ld	h,d
(2) 1283/     694 : 79                  		ld	a,c
(2) 1284/     695 : E5                  		push	hl		; Recieve LEN and LOOP
(2) 1285/     696 : F5                  		push	af		; from the WAVE itself
(2) 1286/     697 : 11 4E 1E            		ld	de,wave_Len
(2) 1287/     69A : 01 06 00            		ld	bc,6
(2) 1288/     69D : CF                  		rst	8
(2) 1289/     69E : CD 0F 0F            		call	transferRom
(2) 1290/     6A1 : F1                  		pop	af
(2) 1291/     6A2 : E1                  		pop	hl
(2) 1292/     6A3 : 01 06 00            		ld	bc,6		; skip LEN point
(2) 1293/     6A6 : 09                  		add	hl,bc
(2) 1294/     6A7 : CE 00               		adc	a,0
(2) 1295/     6A9 : 22 4B 1E            		ld	(wave_Start),hl	; save START point
(2) 1296/     6AC : 32 4D 1E            		ld	(wave_Start+2),a
(2) 1297/     6AF : 3E 04               		ld	a,100b		; Force FM6 off
(2) 1298/     6B1 : 32 6D 16            		ld	(fmcom+5),a
(2) 1299/     6B4 : C9                  		ret
(2) 1300/     6B5 :                     
(2) 1301/     6B5 :                     ; FM3 special mode
(2) 1302/     6B5 :                     .ins_fm3:
(2) 1303/     6B5 : 3E 02               		ld	a,2		; manual index
(2) 1304/     6B7 : 1E 01               		ld	e,1		; set as alternate FM
(2) 1305/     6B9 : CD EF 06            		call	.rd_fmins
(2) 1306/     6BC : 21 6A 16            		ld	hl,fmcom+2
(2) 1307/     6BF : 7E                  		ld	a,(hl)		; instrument update bit
(2) 1308/     6C0 : F6 10               		or	00010000b	; flag
(2) 1309/     6C2 : 77                  		ld	(hl),a
(2) 1310/     6C3 : C9                  		ret
(2) 1311/     6C4 :                     ; Regular FM
(2) 1312/     6C4 :                     .ins_fm:
(2) 1313/     6C4 : CF                  		rst	8
(2) 1314/     6C5 : 1E 00               		ld	e,0		; Set as normal FM
(2) 1315/     6C7 : DD 7E 02            		ld	a,(ix+2)
(2) 1316/     6CA : E6 07               		and	00000111b
(2) 1317/     6CC : FE 05               		cp	5		; Check if we are on FM6
(2) 1318/     6CE : 20 08               		jr	nz,.not_prdac
(2) 1319/     6D0 : 57                  		ld	d,a
(2) 1320/     6D1 : 3E 04               		ld	a,100b		; Force DAC stop
(2) 1321/     6D3 : CF                  		rst	8
(2) 1322/     6D4 : 32 BC 17            		ld	(daccom),a
(2) 1323/     6D7 : 7A                  		ld	a,d
(2) 1324/     6D8 :                     .not_prdac:
(2) 1325/     6D8 : 1E 00               		ld	e,0		; Set as Normal
(2) 1326/     6DA : CD EF 06            		call	.rd_fmins
(2) 1327/     6DD : DD 7E 02            		ld	a,(ix+2)
(2) 1328/     6E0 : E6 07               		and	00000111b
(2) 1329/     6E2 : 16 00               		ld	d,0
(2) 1330/     6E4 : CF                  		rst	8
(2) 1331/     6E5 : 5F                  		ld	e,a
(2) 1332/     6E6 : 21 68 16            		ld	hl,fmcom
(2) 1333/     6E9 : 19                  		add	hl,de
(2) 1334/     6EA : 7E                  		ld	a,(hl)		; instrument update bit
(2) 1335/     6EB : F6 10               		or	00010000b	; flag
(2) 1336/     6ED : 77                  		ld	(hl),a
(2) 1337/     6EE : C9                  		ret
(2) 1338/     6EF :                     
(2) 1339/     6EF :                     ; Read FM instrument
(2) 1340/     6EF :                     ;
(2) 1341/     6EF :                     ; e - alternate mode flag
(2) 1342/     6EF :                     .rd_fmins:
(2) 1343/     6EF : DD 73 04            		ld	(ix+4),e	; e - alternate mode flag
(2) 1344/     6F2 : 23                  		inc	hl		; skip ID and pitch
(2) 1345/     6F3 : 5E                  		ld	e,(hl)
(2) 1346/     6F4 : DD 73 03            		ld	(ix+3),e	; save pitch
(2) 1347/     6F7 : 23                  		inc	hl
(2) 1348/     6F8 : 87                  		add	a,a
(2) 1349/     6F9 : 16 00               		ld	d,0
(2) 1350/     6FB : 5F                  		ld	e,a
(2) 1351/     6FC : CF                  		rst	8
(2) 1352/     6FD : E5                  		push	hl		; save ins hl
(2) 1353/     6FE : 21 35 07            		ld	hl,.fmpickins
(2) 1354/     701 : 19                  		add	hl,de
(2) 1355/     702 : 5E                  		ld	e,(hl)		; get output location
(2) 1356/     703 : 23                  		inc	hl		; from list
(2) 1357/     704 : 56                  		ld	d,(hl)
(2) 1358/     705 : CF                  		rst	8
(2) 1359/     706 : E1                  		pop	hl
(2) 1360/     707 : 7E                  		ld	a,(hl)		; a - xx0000
(2) 1361/     708 : 23                  		inc	hl
(2) 1362/     709 : 4E                  		ld	c,(hl)		; c - 00xx00
(2) 1363/     70A : 23                  		inc	hl
(2) 1364/     70B : 6E                  		ld	l,(hl)		; l - 0000xx
(2) 1365/     70C : 61                  		ld	h,c		; c to h
(2) 1366/     70D : D5                  		push	de
(2) 1367/     70E : CF                  		rst	8
(2) 1368/     70F : 4F                  		ld	c,a
(2) 1369/     710 : DD 7E 07            		ld	a,(ix+7)
(2) 1370/     713 : B9                  		cp	c
(2) 1371/     714 : 20 0C               		jr	nz,.confm_rd
(2) 1372/     716 : DD 7E 06            		ld	a,(ix+6)
(2) 1373/     719 : BC                  		cp	h
(2) 1374/     71A : 20 06               		jr	nz,.confm_rd
(2) 1375/     71C : DD 7E 05            		ld	a,(ix+5)
(2) 1376/     71F : BD                  		cp	l
(2) 1377/     720 : 28 11               		jr	z,.fmsame_ins
(2) 1378/     722 :                     .confm_rd:
(2) 1379/     722 : CF                  		rst	8
(2) 1380/     723 : DD 75 05            		ld	(ix+5),l
(2) 1381/     726 : DD 74 06            		ld	(ix+6),h
(2) 1382/     729 : DD 71 07            		ld	(ix+7),c
(2) 1383/     72C : 79                  		ld	a,c
(2) 1384/     72D : 01 28 00            		ld	bc,028h		; 28h bytes
(2) 1385/     730 : CD 0F 0F            		call	transferRom	; Transfer instrument data from ROM
(2) 1386/     733 :                     .fmsame_ins:
(2) 1387/     733 : E1                  		pop	hl
(2) 1388/     734 : C9                  		ret
(2) 1389/     735 :                     
(2) 1390/     735 :                     ; manual location for each instr cache
(2) 1391/     735 :                     ; 28h bytes each
(2) 1392/     735 :                     .fmpickins:
(2) 1393/     735 : C0 16               		dw fmins_com
(2) 1394/     737 : E8 16               		dw fmins_com2
(2) 1395/     739 : 10 17               		dw fmins_com3
(2) 1396/     73B : 38 17               		dw fmins_com4
(2) 1397/     73D : 60 17               		dw fmins_com5
(2) 1398/     73F : 88 17               		dw fmins_com6
(2) 1399/     741 :                     
(2) 1400/     741 :                     ; ----------------------------------------
(2) 1401/     741 :                     ; bit 2
(2) 1402/     741 :                     ; ----------------------------------------
(2) 1403/     741 :                     
(2) 1404/     741 :                     .req_vol:
(2) 1405/     741 : 2A 44 1E            		ld	hl,(currInsPos)
(2) 1406/     744 : DD 2A 42 1E         		ld	ix,(currTblPos)
(2) 1407/     748 : 7E                  		ld	a,(hl)
(2) 1408/     749 : E6 F0               		and	11110000b
(2) 1409/     74B : FE 80               		cp	80h		; PSG normal
(2) 1410/     74D : 28 45               		jr	z,.vol_psg
(2) 1411/     74F : FE 90               		cp	90h		; PSG noise
(2) 1412/     751 : 28 41               		jr	z,.vol_psg
(2) 1413/     753 : CF                  		rst	8
(2) 1414/     754 : FE A0               		cp	0A0h		; FM normal
(2) 1415/     756 : 28 5F               		jr	z,.vol_fm
(2) 1416/     758 : FE B0               		cp	0B0h		; FM special (same thing)
(2) 1417/     75A : 28 5B               		jr	z,.vol_fm
(2) 1418/     75C :                     ; 		cp	0C0h		; DAC
(2) 1419/     75C :                     ; 		jr	z,.vol_dac
(2) 1420/     75C : FE D0               		cp	0D0h		; PWM
(2) 1421/     75E : 28 01               		jr	z,.vol_pwm
(2) 1422/     760 : C9                  		ret
(2) 1423/     761 :                     
(2) 1424/     761 :                     ; --------------------------------
(2) 1425/     761 :                     ; FM,FM3,FM6
(2) 1426/     761 :                     .vol_pwm:
(2) 1427/     761 : 01 00 00            		ld	bc,0
(2) 1428/     764 : DD 7E 02            		ld	a,(ix+2)
(2) 1429/     767 : E6 07               		and	00000111b
(2) 1430/     769 : 4F                  		ld	c,a
(2) 1431/     76A : CF                  		rst	8
(2) 1432/     76B : DD 21 30 16         		ld	ix,pwmcom
(2) 1433/     76F : DD 09               		add	ix,bc
(2) 1434/     771 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(2) 1435/     774 : E6 03               		and	00000011b
(2) 1436/     776 : 4F                  		ld	c,a		; c - MSB Pitch bits
(2) 1437/     777 : FD 7E 04            		ld	a,(iy+chnl_Vol)
(2) 1438/     77A : D6 40               		sub	a,40h
(2) 1439/     77C : CF                  		rst	8
(2) 1440/     77D : ED 44               		neg	a		; reverse impulse volume
(2) 1441/     77F : 87                  		add	a,a
(2) 1442/     780 : 87                  		add	a,a
(2) 1443/     781 : 30 03               		jr	nc,.pvmuch
(2) 1444/     783 : 3E FF               		ld	a,-1
(2) 1445/     785 : CF                  		rst	8
(2) 1446/     786 :                     .pvmuch:
(2) 1447/     786 : B1                  		or	c
(2) 1448/     787 : DD 77 08            		ld	(ix+PWPTH_V),a
(2) 1449/     78A : DD CB 00 EE         		set	5,(ix)		; set volume update bit
(2) 1450/     78E : 3E 01               		ld	a,1
(2) 1451/     790 : 32 30 00            		ld	(marsUpd),a
(2) 1452/     793 : C9                  		ret
(2) 1453/     794 :                     
(2) 1454/     794 :                     ; --------------------------------
(2) 1455/     794 :                     ; PSG1-3,PSGN
(2) 1456/     794 :                     
(2) 1457/     794 :                     .vol_psg:
(2) 1458/     794 : DD 7E 02            		ld	a,(ix+2)
(2) 1459/     797 : DD 21 8C 16         		ld	ix,psgcom
(2) 1460/     79B : E6 03               		and	11b
(2) 1461/     79D : 16 00               		ld	d,0
(2) 1462/     79F : 5F                  		ld	e,a
(2) 1463/     7A0 : DD 19               		add	ix,de
(2) 1464/     7A2 : FD 7E 04            		ld	a,(iy+chnl_Vol)
(2) 1465/     7A5 : D6 40               		sub	a,40h
(2) 1466/     7A7 : ED 44               		neg	a
(2) 1467/     7A9 : 4F                  		ld	c,a
(2) 1468/     7AA : FE 40               		cp	40h
(2) 1469/     7AC : 20 02               		jr	nz,.vmuch
(2) 1470/     7AE : 0E FF               		ld	c,-1
(2) 1471/     7B0 :                     .vmuch:
(2) 1472/     7B0 : 79                  		ld	a,c
(2) 1473/     7B1 : 87                  		add	a,a
(2) 1474/     7B2 : 87                  		add	a,a
(2) 1475/     7B3 : DD 77 30            		ld	(ix+PVOL),a
(2) 1476/     7B6 :                     ; 		ld	a,(ix)
(2) 1477/     7B6 :                     ; 		or	00100000b	; Set volume
(2) 1478/     7B6 :                     ; 		ld	(ix),a		; update flag
(2) 1479/     7B6 : C9                  		ret
(2) 1480/     7B7 :                     
(2) 1481/     7B7 :                     ; --------------------------------
(2) 1482/     7B7 :                     ; FM,FM3,FM6
(2) 1483/     7B7 :                     .vol_fm:
(2) 1484/     7B7 : 01 00 00            		ld	bc,0
(2) 1485/     7BA : DD 7E 02            		ld	a,(ix+2)
(2) 1486/     7BD : E6 07               		and	00000111b
(2) 1487/     7BF : 4F                  		ld	c,a
(2) 1488/     7C0 : DD 21 68 16         		ld	ix,fmcom
(2) 1489/     7C4 : DD 09               		add	ix,bc
(2) 1490/     7C6 : FD 7E 04            		ld	a,(iy+chnl_Vol)
(2) 1491/     7C9 : D6 40               		sub	a,40h
(2) 1492/     7CB : CF                  		rst	8
(2) 1493/     7CC : ED 44               		neg	a		; reverse impulse volume
(2) 1494/     7CE : CB 3F               		srl	a		; /2
(2) 1495/     7D0 : DD 77 0C            		ld	(ix+FMVOL),a
(2) 1496/     7D3 : DD 7E 00            		ld	a,(ix)		; volume update
(2) 1497/     7D6 : F6 20               		or	00100000b	; flag, plus keyon
(2) 1498/     7D8 : DD 77 00            		ld	(ix),a
(2) 1499/     7DB : C9                  		ret
(2) 1500/     7DC :                     
(2) 1501/     7DC :                     ; ----------------------------------------
(2) 1502/     7DC :                     ; bit 3
(2) 1503/     7DC :                     ; ----------------------------------------
(2) 1504/     7DC :                     
(2) 1505/     7DC :                     .req_eff:
(2) 1506/     7DC : 2A 44 1E            		ld	hl,(currInsPos)
(2) 1507/     7DF : DD 2A 42 1E         		ld	ix,(currTblPos)
(2) 1508/     7E3 : FD 7E 05            		ld	a,(iy+chnl_EffId)	; effect id == 0?
(2) 1509/     7E6 : B7                  		or	a
(2) 1510/     7E7 : C8                  		ret	z
(2) 1511/     7E8 : 57                  		ld	d,a
(2) 1512/     7E9 : 7E                  		ld	a,(hl)
(2) 1513/     7EA : E6 F0               		and	11110000b
(2) 1514/     7EC : FD 5E 06            		ld	e,(iy+chnl_EffArg)
(2) 1515/     7EF : CF                  		rst	8
(2) 1516/     7F0 : FE 80               		cp	80h			; PSG normal
(2) 1517/     7F2 : 28 16               		jr	z,.eff_psg
(2) 1518/     7F4 : FE 90               		cp	90h			; PSG noise
(2) 1519/     7F6 : 28 12               		jr	z,.eff_psg
(2) 1520/     7F8 : FE A0               		cp	0A0h			; FM Normal
(2) 1521/     7FA : 28 21               		jr	z,.eff_fm
(2) 1522/     7FC : CF                  		rst	8
(2) 1523/     7FD : FE B0               		cp	0B0h			; FM Special
(2) 1524/     7FF : 28 1C               		jr	z,.eff_fm
(2) 1525/     801 : FE C0               		cp	0C0h			; DAC
(2) 1526/     803 : 28 2F               		jr	z,.eff_dac
(2) 1527/     805 : FE D0               		cp	0D0h			; PWM
(2) 1528/     807 : 28 3D               		jr	z,.eff_pwm
(2) 1529/     809 : C9                  		ret
(2) 1530/     80A :                     
(2) 1531/     80A :                     ; --------------------------------
(2) 1532/     80A :                     
(2) 1533/     80A :                     .eff_psg:
(2) 1534/     80A : 7A                  		ld	a,d
(2) 1535/     80B : FE 04               		cp	4		; Effect D?
(2) 1536/     80D : CA 5D 08            		jp	z,.effPsg_D
(2) 1537/     810 : FE 05               		cp	5		; Effect E?
(2) 1538/     812 : CA DD 08            		jp	z,.effPsg_E
(2) 1539/     815 : CF                  		rst	8
(2) 1540/     816 : FE 06               		cp	6		; Effect F?
(2) 1541/     818 : CA 0F 09            		jp	z,.effPsg_F
(2) 1542/     81B : CF                  		rst	8
(2) 1543/     81C : C9                  		ret
(2) 1544/     81D :                     .eff_fm:
(2) 1545/     81D : 7A                  		ld	a,d
(2) 1546/     81E : FE 04               		cp	4		; Effect D?
(2) 1547/     820 : CA 8B 08            		jp	z,.effFm_D
(2) 1548/     823 : FE 05               		cp	5		; Effect E?
(2) 1549/     825 : CA E7 08            		jp	z,.effFm_E
(2) 1550/     828 : CF                  		rst	8
(2) 1551/     829 : FE 06               		cp	6		; Effect F?
(2) 1552/     82B : CA 1D 09            		jp	z,.effFm_F
(2) 1553/     82E : FE 18               		cp	24		; Effect X?
(2) 1554/     830 : CA FA 09            		jp	z,.effFm_X
(2) 1555/     833 : C9                  		ret
(2) 1556/     834 :                     .eff_dac:
(2) 1557/     834 : 7A                  		ld	a,d
(2) 1558/     835 : FE 05               		cp	5		; Effect E?
(2) 1559/     837 : CA F5 08            		jp	z,.effDac_E
(2) 1560/     83A : FE 06               		cp	6		; Effect F?
(2) 1561/     83C : CA 24 09            		jp	z,.effDac_F
(2) 1562/     83F : CF                  		rst	8
(2) 1563/     840 : FE 18               		cp	24		; Effect X?
(2) 1564/     842 : CA FA 09            		jp	z,.effFm_X
(2) 1565/     845 : C9                  		ret
(2) 1566/     846 :                     .eff_pwm:
(2) 1567/     846 : 3E 01               		ld	a,1
(2) 1568/     848 : 32 30 00            		ld	(marsUpd),a
(2) 1569/     84B : 7A                  		ld	a,d
(2) 1570/     84C :                     ; 		cp	4		; Effect D?
(2) 1571/     84C :                     ; 		jp	z,.effFm_D
(2) 1572/     84C : FE 05               		cp	5		; Effect E?
(2) 1573/     84E : CA 02 09            		jp	z,.effPwm_E
(2) 1574/     851 : CF                  		rst	8
(2) 1575/     852 : FE 06               		cp	6		; Effect F?
(2) 1576/     854 : CA 2A 09            		jp	z,.effPwm_F
(2) 1577/     857 : FE 18               		cp	24		; Effect X?
(2) 1578/     859 : CA E1 09            		jp	z,.effPwm_X	; recycle FM's panning
(2) 1579/     85C : C9                  		ret
(2) 1580/     85D :                     
(2) 1581/     85D :                     ; --------------------------------
(2) 1582/     85D :                     ; Effect D
(2) 1583/     85D :                     ; --------------------------------
(2) 1584/     85D :                     
(2) 1585/     85D :                     .effPsg_D:
(2) 1586/     85D : 7B                  		ld	a,e
(2) 1587/     85E : B7                  		or	a
(2) 1588/     85F : C8                  		ret	z
(2) 1589/     860 : 06 00               		ld	b,0
(2) 1590/     862 : DD 7E 02            		ld	a,(ix+2)
(2) 1591/     865 : E6 03               		and	011b
(2) 1592/     867 : 4F                  		ld	c,a
(2) 1593/     868 : DD 21 8C 16         		ld	ix,psgcom
(2) 1594/     86C : DD 09               		add	ix,bc
(2) 1595/     86E : CD BA 08            		call	.grab_dval
(2) 1596/     871 : 87                  		add	a,a
(2) 1597/     872 : 87                  		add	a,a
(2) 1598/     873 : 87                  		add	a,a
(2) 1599/     874 : 4F                  		ld	c,a
(2) 1600/     875 : CB 79               		bit	7,c
(2) 1601/     877 : 20 09               		jr	nz,.lowp
(2) 1602/     879 : DD 7E 30            		ld	a,(ix+PVOL)
(2) 1603/     87C : 81                  		add	a,c
(2) 1604/     87D : D8                  		ret	c
(2) 1605/     87E : DD 77 30            		ld	(ix+PVOL),a
(2) 1606/     881 : C9                  		ret
(2) 1607/     882 :                     .lowp:
(2) 1608/     882 : DD 7E 30            		ld	a,(ix+PVOL)
(2) 1609/     885 : 81                  		add	a,c
(2) 1610/     886 : D0                  		ret	nc
(2) 1611/     887 : DD 77 30            		ld	(ix+PVOL),a
(2) 1612/     88A : C9                  		ret
(2) 1613/     88B :                     .effFm_D:
(2) 1614/     88B : 7B                  		ld	a,e
(2) 1615/     88C : B7                  		or	a
(2) 1616/     88D : C8                  		ret	z
(2) 1617/     88E : 06 00               		ld	b,0
(2) 1618/     890 : DD 7E 02            		ld	a,(ix+2)
(2) 1619/     893 : E6 07               		and	111b
(2) 1620/     895 : 4F                  		ld	c,a
(2) 1621/     896 : DD 21 68 16         		ld	ix,fmcom
(2) 1622/     89A : DD 09               		add	ix,bc
(2) 1623/     89C : CD BA 08            		call	.grab_dval
(2) 1624/     89F :                     ; 		srl	a		; TODO: checar que tanto
(2) 1625/     89F :                     ; 		srl	a		; shifteo esto
(2) 1626/     89F : 4F                  		ld	c,a
(2) 1627/     8A0 : DD CB 00 EE         		set	5,(ix)
(2) 1628/     8A4 : CB 79               		bit	7,c
(2) 1629/     8A6 : 20 09               		jr	nz,.lowpf
(2) 1630/     8A8 : DD 7E 0C            		ld	a,(ix+FMVOL)
(2) 1631/     8AB : 81                  		add	a,c
(2) 1632/     8AC : D8                  		ret	c
(2) 1633/     8AD : DD 77 0C            		ld	(ix+FMVOL),a
(2) 1634/     8B0 : C9                  		ret
(2) 1635/     8B1 :                     .lowpf:
(2) 1636/     8B1 : DD 7E 0C            		ld	a,(ix+FMVOL)
(2) 1637/     8B4 : 81                  		add	a,c
(2) 1638/     8B5 : D0                  		ret	nc
(2) 1639/     8B6 : DD 77 0C            		ld	(ix+FMVOL),a
(2) 1640/     8B9 : C9                  		ret
(2) 1641/     8BA :                     
(2) 1642/     8BA :                     ; a - increment/decrement value
(2) 1643/     8BA :                     .grab_dval:
(2) 1644/     8BA : 7B                  		ld	a,e
(2) 1645/     8BB : E6 F0               		and	11110000b
(2) 1646/     8BD : FE F0               		cp	11110000b
(2) 1647/     8BF : 28 03               		jr	z,.go_down
(2) 1648/     8C1 : B7                  		or	a
(2) 1649/     8C2 : 20 09               		jr	nz,.go_up
(2) 1650/     8C4 :                     .go_down:
(2) 1651/     8C4 : 7B                  		ld	a,e
(2) 1652/     8C5 : E6 0F               		and	00001111b
(2) 1653/     8C7 : CB 7B               		bit	7,e
(2) 1654/     8C9 : C0                  		ret	nz
(2) 1655/     8CA : 87                  		add	a,a
(2) 1656/     8CB : CF                  		rst	8
(2) 1657/     8CC : C9                  		ret
(2) 1658/     8CD :                     .go_up:
(2) 1659/     8CD : 7B                  		ld	a,e
(2) 1660/     8CE : 0F                  		rrca
(2) 1661/     8CF : 0F                  		rrca
(2) 1662/     8D0 : 0F                  		rrca
(2) 1663/     8D1 : 0F                  		rrca
(2) 1664/     8D2 : CF                  		rst	8
(2) 1665/     8D3 : E6 0F               		and	00001111b
(2) 1666/     8D5 : ED 44               		neg	a
(2) 1667/     8D7 : CB 5B               		bit	3,e
(2) 1668/     8D9 : C0                  		ret	nz
(2) 1669/     8DA : 87                  		add	a,a
(2) 1670/     8DB : CF                  		rst	8
(2) 1671/     8DC : C9                  		ret
(2) 1672/     8DD :                     
(2) 1673/     8DD :                     ; --------------------------------
(2) 1674/     8DD :                     ; Effect E
(2) 1675/     8DD :                     ; --------------------------------
(2) 1676/     8DD :                     
(2) 1677/     8DD :                     .effPsg_E:
(2) 1678/     8DD : CD C2 09            		call	.grab_prtm
(2) 1679/     8E0 : 16 00               		ld	d,0
(2) 1680/     8E2 : 87                  		add	a,a
(2) 1681/     8E3 : 5F                  		ld	e,a
(2) 1682/     8E4 : C3 98 09            		jp	.freqinc_psg
(2) 1683/     8E7 :                     .effFm_E:
(2) 1684/     8E7 : CD C2 09            		call	.grab_prtm
(2) 1685/     8EA : ED 44               		neg	a
(2) 1686/     8EC : B7                  		or	a
(2) 1687/     8ED : 28 02               		jr	z,.e_neg
(2) 1688/     8EF : 16 FF               		ld	d,-1
(2) 1689/     8F1 :                     .e_neg:
(2) 1690/     8F1 : 5F                  		ld	e,a
(2) 1691/     8F2 : C3 72 09            		jp	.freqinc_fm
(2) 1692/     8F5 :                     .effDac_E:
(2) 1693/     8F5 : CD C2 09            		call	.grab_prtm
(2) 1694/     8F8 : ED 44               		neg	a
(2) 1695/     8FA : B7                  		or	a
(2) 1696/     8FB : 28 02               		jr	z,.e_negd
(2) 1697/     8FD : 16 FF               		ld	d,-1
(2) 1698/     8FF :                     .e_negd:
(2) 1699/     8FF : 5F                  		ld	e,a
(2) 1700/     900 : 18 60               		jr	.freqinc_dac
(2) 1701/     902 :                     
(2) 1702/     902 :                     .effPwm_E:
(2) 1703/     902 : CD C2 09            		call	.grab_prtm
(2) 1704/     905 :                     ; 		sra	a
(2) 1705/     905 :                     ; 		sra	a
(2) 1706/     905 : ED 44               		neg	a
(2) 1707/     907 : B7                  		or	a
(2) 1708/     908 : 28 02               		jr	z,.e_fnegd2
(2) 1709/     90A : 16 FF               		ld	d,-1
(2) 1710/     90C :                     .e_fnegd2:
(2) 1711/     90C : 5F                  		ld	e,a
(2) 1712/     90D : 18 1F               		jr	.freqinc_pwm
(2) 1713/     90F :                     
(2) 1714/     90F :                     ; --------------------------------
(2) 1715/     90F :                     ; Effect F
(2) 1716/     90F :                     ; --------------------------------
(2) 1717/     90F :                     
(2) 1718/     90F :                     ; PSG
(2) 1719/     90F :                     .effPsg_F:
(2) 1720/     90F : CD C2 09            		call	.grab_prtm
(2) 1721/     912 : 87                  		add	a,a
(2) 1722/     913 : ED 44               		neg	a
(2) 1723/     915 : B7                  		or	a
(2) 1724/     916 : 28 02               		jr	z,.e_negp
(2) 1725/     918 : 16 FF               		ld	d,-1
(2) 1726/     91A :                     .e_negp:
(2) 1727/     91A : 5F                  		ld	e,a
(2) 1728/     91B : 18 7B               		jr	.freqinc_psg
(2) 1729/     91D :                     .effFm_F:
(2) 1730/     91D : CD C2 09            		call	.grab_prtm
(2) 1731/     920 : 87                  		add	a,a
(2) 1732/     921 : 5F                  		ld	e,a
(2) 1733/     922 : 18 4E               		jr	.freqinc_fm
(2) 1734/     924 :                     .effDac_F:
(2) 1735/     924 : CD C2 09            		call	.grab_prtm
(2) 1736/     927 : 5F                  		ld	e,a
(2) 1737/     928 : 18 38               		jr	.freqinc_dac
(2) 1738/     92A :                     .effPwm_F:
(2) 1739/     92A : CD C2 09            		call	.grab_prtm
(2) 1740/     92D :                     ; 		sra	a
(2) 1741/     92D :                     ; 		sra	a
(2) 1742/     92D : 5F                  		ld	e,a
(2) 1743/     92E :                     
(2) 1744/     92E :                     ; --------------------------------
(2) 1745/     92E :                     ; For effects E and F:
(2) 1746/     92E :                     ;
(2) 1747/     92E :                     ; de - freq incr/decr
(2) 1748/     92E :                     
(2) 1749/     92E :                     .freqinc_pwm:
(2) 1750/     92E : DD 7E 02            		ld	a,(ix+2)
(2) 1751/     931 : E6 07               		and	111b
(2) 1752/     933 : DD 21 30 16         		ld	ix,pwmcom
(2) 1753/     937 : 06 00               		ld	b,0
(2) 1754/     939 : 4F                  		ld	c,a
(2) 1755/     93A : CF                  		rst	8
(2) 1756/     93B : DD 09               		add	ix,bc
(2) 1757/     93D : DD 7E 08            		ld	a,(ix+PWPTH_V)
(2) 1758/     940 : E6 03               		and	00000011b
(2) 1759/     942 : 67                  		ld	h,a
(2) 1760/     943 : DD 6E 10            		ld	l,(ix+PWPHL)
(2) 1761/     946 : 19                  		add	hl,de
(2) 1762/     947 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(2) 1763/     94A : E6 FC               		and	11111100b
(2) 1764/     94C : CF                  		rst	8
(2) 1765/     94D : B4                  		or	h
(2) 1766/     94E : DD 77 08            		ld	(ix+PWPTH_V),a
(2) 1767/     951 : DD 75 10            		ld	(ix+PWPHL),l
(2) 1768/     954 : DD 7E 00            		ld	a,(ix)			; pitch bend request
(2) 1769/     957 : F6 10               		or	00010000b
(2) 1770/     959 : DD 77 00            		ld	(ix),a
(2) 1771/     95C : 3E 01               		ld	a,1
(2) 1772/     95E : 32 30 00            		ld	(marsUpd),a
(2) 1773/     961 : C9                  		ret
(2) 1774/     962 :                     
(2) 1775/     962 :                     .freqinc_dac:
(2) 1776/     962 : 2A 54 1E            		ld	hl,(wave_Pitch)		; tricky one...
(2) 1777/     965 : 19                  		add	hl,de
(2) 1778/     966 : 22 54 1E            		ld	(wave_Pitch),hl
(2) 1779/     969 : 3A BC 17            		ld	a,(daccom)
(2) 1780/     96C : F6 10               		or	00010000b
(2) 1781/     96E : 32 BC 17            		ld	(daccom),a
(2) 1782/     971 : C9                  		ret
(2) 1783/     972 :                     
(2) 1784/     972 :                     .freqinc_fm:
(2) 1785/     972 : DD 7E 02            		ld	a,(ix+2)
(2) 1786/     975 : E6 07               		and	111b
(2) 1787/     977 : DD 21 68 16         		ld	ix,fmcom
(2) 1788/     97B : 06 00               		ld	b,0
(2) 1789/     97D : 4F                  		ld	c,a
(2) 1790/     97E : CF                  		rst	8
(2) 1791/     97F : DD 09               		add	ix,bc
(2) 1792/     981 : DD 66 18            		ld	h,(ix+FMFRQH)
(2) 1793/     984 : DD 6E 1E            		ld	l,(ix+FMFRQL)
(2) 1794/     987 : 19                  		add	hl,de
(2) 1795/     988 : DD 74 18            		ld	(ix+FMFRQH),h
(2) 1796/     98B : CF                  		rst	8
(2) 1797/     98C : DD 75 1E            		ld	(ix+FMFRQL),l
(2) 1798/     98F : DD 7E 00            		ld	a,(ix)
(2) 1799/     992 : F6 01               		or	00000001b
(2) 1800/     994 : DD 77 00            		ld	(ix),a
(2) 1801/     997 : C9                  		ret
(2) 1802/     998 :                     .freqinc_psg:
(2) 1803/     998 : DD 7E 02            		ld	a,(ix+2)
(2) 1804/     99B : E6 03               		and	011b
(2) 1805/     99D : DD 21 8C 16         		ld	ix,psgcom
(2) 1806/     9A1 : 06 00               		ld	b,0
(2) 1807/     9A3 : 4F                  		ld	c,a
(2) 1808/     9A4 : DD 09               		add	ix,bc
(2) 1809/     9A6 : CF                  		rst	8
(2) 1810/     9A7 : DD 66 20            		ld	h,(ix+DTH)
(2) 1811/     9AA : DD 6E 1C            		ld	l,(ix+DTL)
(2) 1812/     9AD : 19                  		add	hl,de
(2) 1813/     9AE : 7C                  		ld	a,h
(2) 1814/     9AF : E6 07               		and	00000111b
(2) 1815/     9B1 : 67                  		ld	h,a
(2) 1816/     9B2 : CF                  		rst	8
(2) 1817/     9B3 : DD 74 20            		ld	(ix+DTH),h
(2) 1818/     9B6 : DD 75 1C            		ld	(ix+DTL),l
(2) 1819/     9B9 : DD 7E 00            		ld	a,(ix)
(2) 1820/     9BC : F6 01               		or	00000001b
(2) 1821/     9BE : DD 77 00            		ld	(ix),a
(2) 1822/     9C1 : C9                  		ret
(2) 1823/     9C2 :                     ; grab portametro value
(2) 1824/     9C2 :                     .grab_prtm:
(2) 1825/     9C2 : 16 00               		ld	d,0
(2) 1826/     9C4 : 7B                  		ld	a,e
(2) 1827/     9C5 : E6 F0               		and	11110000b
(2) 1828/     9C7 : FE F0               		cp	0F0h
(2) 1829/     9C9 : 20 07               		jr	nz,.e_nof
(2) 1830/     9CB : CF                  		rst	8
(2) 1831/     9CC : 7B                  		ld	a,e
(2) 1832/     9CD : E6 0F               		and	0Fh
(2) 1833/     9CF : 87                  		add	a,a
(2) 1834/     9D0 : 18 0E               		jr	.e_go
(2) 1835/     9D2 :                     .e_nof:
(2) 1836/     9D2 : CF                  		rst	8
(2) 1837/     9D3 : FE E0               		cp	0E0h
(2) 1838/     9D5 : 20 05               		jr	nz,.e_noef
(2) 1839/     9D7 : 7B                  		ld	a,e
(2) 1840/     9D8 : E6 0F               		and	0Fh
(2) 1841/     9DA : 18 04               		jr	.e_go
(2) 1842/     9DC :                     .e_noef:
(2) 1843/     9DC : CF                  		rst	8
(2) 1844/     9DD : 7B                  		ld	a,e
(2) 1845/     9DE : 87                  		add	a,a
(2) 1846/     9DF : 87                  		add	a,a
(2) 1847/     9E0 :                     .e_go:
(2) 1848/     9E0 : C9                  		ret
(2) 1849/     9E1 :                     
(2) 1850/     9E1 :                     ; --------------------------------
(2) 1851/     9E1 :                     ; Effect X: Panning
(2) 1852/     9E1 :                     ; --------------------------------
(2) 1853/     9E1 :                     
(2) 1854/     9E1 :                     ; PWM points here too.
(2) 1855/     9E1 :                     .effPwm_X:
(2) 1856/     9E1 : 7B                  		ld	a,e
(2) 1857/     9E2 : 07                  		rlca
(2) 1858/     9E3 : 07                  		rlca
(2) 1859/     9E4 : E6 03               		and	00000011b
(2) 1860/     9E6 : 21 34 0A            		ld	hl,.fmpan_list
(2) 1861/     9E9 : 11 00 00            		ld	de,0
(2) 1862/     9EC : 5F                  		ld	e,a
(2) 1863/     9ED : CF                  		rst	8
(2) 1864/     9EE : 19                  		add	hl,de
(2) 1865/     9EF : 5E                  		ld	e,(hl)
(2) 1866/     9F0 : FD 7E 01            		ld	a,(iy+chnl_Flags)
(2) 1867/     9F3 : E6 CF               		and	11001111b
(2) 1868/     9F5 : B3                  		or	e
(2) 1869/     9F6 : FD 77 01            		ld	(iy+chnl_Flags),a
(2) 1870/     9F9 : C9                  		ret
(2) 1871/     9FA :                     
(2) 1872/     9FA :                     ; PWM points here too.
(2) 1873/     9FA :                     .effFm_X:
(2) 1874/     9FA : DD 7E 02            		ld	a,(ix+2)
(2) 1875/     9FD : E6 07               		and	111b
(2) 1876/     9FF : 06 00               		ld	b,0
(2) 1877/     A01 : 4F                  		ld	c,a
(2) 1878/     A02 : DD 21 68 16         		ld	ix,fmcom
(2) 1879/     A06 : DD 09               		add	ix,bc
(2) 1880/     A08 : 7B                  		ld	a,e
(2) 1881/     A09 : 07                  		rlca
(2) 1882/     A0A : 07                  		rlca
(2) 1883/     A0B : E6 03               		and	00000011b
(2) 1884/     A0D : 21 34 0A            		ld	hl,.fmpan_list
(2) 1885/     A10 : 11 00 00            		ld	de,0
(2) 1886/     A13 : 5F                  		ld	e,a
(2) 1887/     A14 : CF                  		rst	8
(2) 1888/     A15 : 19                  		add	hl,de
(2) 1889/     A16 : 5E                  		ld	e,(hl)
(2) 1890/     A17 : FD 7E 01            		ld	a,(iy+chnl_Flags)
(2) 1891/     A1A : E6 CF               		and	11001111b
(2) 1892/     A1C : B3                  		or	e
(2) 1893/     A1D : FD 77 01            		ld	(iy+chnl_Flags),a
(2) 1894/     A20 : FD 7E 01            		ld	a,(iy+chnl_Flags)
(2) 1895/     A23 : 87                  		add	a,a		; move LR bits
(2) 1896/     A24 : 87                  		add	a,a
(2) 1897/     A25 : 2F                  		cpl
(2) 1898/     A26 : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(2) 1899/     A28 : DD 77 12            		ld	(ix+FMPAN),a
(2) 1900/     A2B :                     
(2) 1901/     A2B :                     ; 		ld	a,(iy+chnl_Flags)
(2) 1902/     A2B :                     ; 		add	a,a		; move LR bits
(2) 1903/     A2B :                     ; 		add	a,a
(2) 1904/     A2B :                     ; 		cpl
(2) 1905/     A2B :                     ; 		and	11000000b	; Set Panning ENABLE bits
(2) 1906/     A2B :                     ; 		ld	(ix+FMPAN),a
(2) 1907/     A2B :                     ; 		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(2) 1908/     A2B :                     ; 		rst	8
(2) 1909/     A2B :                     ; 		ld	(ix+FMKEYS),e
(2) 1910/     A2B : DD 7E 00            		ld	a,(ix)		; key on
(2) 1911/     A2E : F6 40               		or	01000000b
(2) 1912/     A30 : DD 77 00            		ld	(ix),a
(2) 1913/     A33 :                     
(2) 1914/     A33 : C9                  		ret
(2) 1915/     A34 :                     .fmpan_list:
(2) 1916/     A34 : 10                  		db 00010000b	; 000h
(2) 1917/     A35 : 10                  		db 00010000b	; 040h
(2) 1918/     A36 : 00                  		db 00000000b	; 080h
(2) 1919/     A37 : 20                  		db 00100000b	; 0C0h
(2) 1920/     A38 :                     
(2) 1921/     A38 :                     ; ----------------------------------------
(2) 1922/     A38 :                     ; bit 0
(2) 1923/     A38 :                     ; ----------------------------------------
(2) 1924/     A38 :                     
(2) 1925/     A38 :                     .req_note:
(2) 1926/     A38 : 2A 44 1E            		ld	hl,(currInsPos)
(2) 1927/     A3B : DD 2A 42 1E         		ld	ix,(currTblPos)
(2) 1928/     A3F : 7E                  		ld	a,(hl)
(2) 1929/     A40 : 4F                  		ld	c,a		; special copy
(2) 1930/     A41 : E6 F0               		and	11110000b
(2) 1931/     A43 : FE 80               		cp	80h		; PSG normal
(2) 1932/     A45 : CA 21 0B            		jp	z,.note_psg
(2) 1933/     A48 : FE 90               		cp	90h		; PSG noise
(2) 1934/     A4A : CA F4 0A            		jp	z,.note_psgn
(2) 1935/     A4D : FE A0               		cp	0A0h
(2) 1936/     A4F : CA F2 0B            		jp	z,.note_fm
(2) 1937/     A52 : CF                  		rst	8
(2) 1938/     A53 : FE B0               		cp	0B0h
(2) 1939/     A55 : CA CE 0B            		jp	z,.note_fm3
(2) 1940/     A58 : FE C0               		cp	0C0h
(2) 1941/     A5A : CA 8B 0B            		jp	z,.note_dac
(2) 1942/     A5D : FE D0               		cp	0D0h
(2) 1943/     A5F : CA 63 0A            		jp	z,.note_pwm
(2) 1944/     A62 : C9                  		ret
(2) 1945/     A63 :                     
(2) 1946/     A63 :                     ; --------------------------------
(2) 1947/     A63 :                     ; Note: PWM
(2) 1948/     A63 :                     ; --------------------------------
(2) 1949/     A63 :                     
(2) 1950/     A63 :                     .note_pwm:
(2) 1951/     A63 : 3E 01               		ld	a,1			; Send MARS request
(2) 1952/     A65 : 32 30 00            		ld	(marsUpd),a
(2) 1953/     A68 : 21 30 16            		ld	hl,pwmcom
(2) 1954/     A6B : DD 7E 02            		ld	a,(ix+2)
(2) 1955/     A6E : E6 07               		and	000111b
(2) 1956/     A70 : 06 00               		ld	b,0
(2) 1957/     A72 : 4F                  		ld	c,a
(2) 1958/     A73 : 09                  		add	hl,bc
(2) 1959/     A74 : CF                  		rst	8
(2) 1960/     A75 : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 1961/     A78 : FE FF               		cp	-1
(2) 1962/     A7A : CA C5 0A            		jp	z,.pwm_keyoff
(2) 1963/     A7D : FE FE               		cp	-2
(2) 1964/     A7F : CA C9 0A            		jp	z,.pwm_keycut
(2) 1965/     A82 : 11 00 00            		ld	de,0
(2) 1966/     A85 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(2) 1967/     A88 : 83                  		add	a,e
(2) 1968/     A89 : 87                  		add	a,a
(2) 1969/     A8A : CF                  		rst	8
(2) 1970/     A8B : 5F                  		ld	e,a
(2) 1971/     A8C : 79                  		ld	a,c
(2) 1972/     A8D : F6 D0               		or	0D0h
(2) 1973/     A8F : FD 77 00            		ld	(iy+chnl_Chip),a	; Set as PWM
(2) 1974/     A92 : E5                  		push	hl
(2) 1975/     A93 : DD E1               		pop	ix
(2) 1976/     A95 : 21 3D 15            		ld	hl,wavFreq_List
(2) 1977/     A98 : 19                  		add	hl,de
(2) 1978/     A99 : 5E                  		ld	e,(hl)
(2) 1979/     A9A : 23                  		inc	hl
(2) 1980/     A9B : 56                  		ld	d,(hl)			; note: max 111b
(2) 1981/     A9C : CF                  		rst	8
(2) 1982/     A9D : DD CB 00 C6         		set	0,(ix)			; Note-on
(2) 1983/     AA1 : 7A                  		ld	a,d
(2) 1984/     AA2 : FD CB 01 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(2) 1985/     AA6 : 28 06               		jr	z,.pwmn_kpv
(2) 1986/     AA8 : DD 7E 08            		ld	a,(ix+PWPTH_V)
(2) 1987/     AAB : E6 FC               		and	11111100b
(2) 1988/     AAD : B2                  		or	d
(2) 1989/     AAE :                     .pwmn_kpv:
(2) 1990/     AAE : DD 77 08            		ld	(ix+PWPTH_V),a
(2) 1991/     AB1 : DD 73 10            		ld	(ix+PWPHL),e
(2) 1992/     AB4 : DD 7E 18            		ld	a,(ix+PWOUTF)
(2) 1993/     AB7 : E6 CF               		and	11001111b		; Keep other bits
(2) 1994/     AB9 : 4F                  		ld	c,a
(2) 1995/     ABA : FD 7E 01            		ld	a,(iy+chnl_Flags)	; 00LR 0000
(2) 1996/     ABD : 2F                  		cpl
(2) 1997/     ABE : E6 30               		and	00110000b
(2) 1998/     AC0 : B1                  		or	c
(2) 1999/     AC1 : DD 77 18            		ld	(ix+PWOUTF),a
(2) 2000/     AC4 : C9                  		ret
(2) 2001/     AC5 :                     
(2) 2002/     AC5 :                     ; PSG Keyoff
(2) 2003/     AC5 :                     .pwm_keyoff:
(2) 2004/     AC5 : 0E 02               		ld	c,010b
(2) 2005/     AC7 : 71                  		ld	(hl),c
(2) 2006/     AC8 : C9                  		ret
(2) 2007/     AC9 :                     .pwm_keycut:
(2) 2008/     AC9 : 0E 04               		ld	c,100b
(2) 2009/     ACB : 18 06               		jr	.chnl_unlink
(2) 2010/     ACD :                     
(2) 2011/     ACD :                     ; 		ld	a,100b			; Request DAC stop
(2) 2012/     ACD :                     ; 		ld	(daccom),a
(2) 2013/     ACD :                     ; .doff:
(2) 2014/     ACD :                     ; 		ld	hl,0
(2) 2015/     ACD :                     ; 		ld	(tblFM6),hl
(2) 2016/     ACD :                     ; 		ld	(iy+chnl_Chip),0
(2) 2017/     ACD :                     ; 		ret
(2) 2018/     ACD :                     
(2) 2019/     ACD :                     ; --------------------------------
(2) 2020/     ACD :                     ; Note: PSG1-3,PSGN
(2) 2021/     ACD :                     ; --------------------------------
(2) 2022/     ACD :                     
(2) 2023/     ACD :                     ; PSG Keyoff
(2) 2024/     ACD :                     .poff:
(2) 2025/     ACD : 0E 02               		ld	c,010b
(2) 2026/     ACF : 71                  		ld	(hl),c
(2) 2027/     AD0 : C9                  		ret
(2) 2028/     AD1 :                     ; PSG Keycut
(2) 2029/     AD1 :                     .pcut:
(2) 2030/     AD1 : 0E 04               		ld	c,100b
(2) 2031/     AD3 :                     .chnl_unlink:
(2) 2032/     AD3 : CF                  		rst	8
(2) 2033/     AD4 : FD E5               		push	iy
(2) 2034/     AD6 : D1                  		pop	de
(2) 2035/     AD7 : DD 7E 00            		ld	a,(ix)
(2) 2036/     ADA : BB                  		cp	e
(2) 2037/     ADB : C0                  		ret	nz
(2) 2038/     ADC : DD 7E 01            		ld	a,(ix+1)
(2) 2039/     ADF : BA                  		cp	d
(2) 2040/     AE0 : C0                  		ret	nz
(2) 2041/     AE1 : CF                  		rst	8
(2) 2042/     AE2 : 71                  		ld	(hl),c
(2) 2043/     AE3 : DD 36 00 00         		ld	(ix),0
(2) 2044/     AE7 : DD 36 01 00         		ld	(ix+1),0
(2) 2045/     AEB : DD 36 03 00         		ld	(ix+3),0	; pitch zero
(2) 2046/     AEF : FD 36 00 00         		ld	(iy+chnl_Chip),0
(2) 2047/     AF3 : C9                  		ret
(2) 2048/     AF4 :                     
(2) 2049/     AF4 :                     ; Play PSG note
(2) 2050/     AF4 :                     .note_psgn:
(2) 2051/     AF4 : DD 7E 02            		ld	a,(ix+2)
(2) 2052/     AF7 : F6 90               		or	90h
(2) 2053/     AF9 : FD 77 00            		ld	(iy+chnl_Chip),a
(2) 2054/     AFC : 21 8F 16            		ld 	hl,psgcom+3
(2) 2055/     AFF : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 2056/     B02 : FE FE               		cp	-2
(2) 2057/     B04 : CA D1 0A            		jp	z,.pcut
(2) 2058/     B07 : FE FF               		cp	-1
(2) 2059/     B09 : CA CD 0A            		jp	z,.poff
(2) 2060/     B0C : 5F                  		ld	e,a
(2) 2061/     B0D : DD 7E 04            		ld 	a,(ix+4)
(2) 2062/     B10 : 32 5E 1E            		ld	(psgHatMode),a
(2) 2063/     B13 : E6 03               		and	011b
(2) 2064/     B15 : FE 03               		cp	011b
(2) 2065/     B17 : 20 05               		jr	nz,.np2_n
(2) 2066/     B19 : 3E 04               		ld	a,100b
(2) 2067/     B1B : 32 8E 16            		ld	(psgcom+2),a
(2) 2068/     B1E :                     .np2_n:
(2) 2069/     B1E : 7B                  		ld	a,e
(2) 2070/     B1F : 18 32               		jr	.notepsg_fn
(2) 2071/     B21 :                     .note_psg:
(2) 2072/     B21 : DD 7E 02            		ld	a,(ix+2)
(2) 2073/     B24 : F6 80               		or	80h
(2) 2074/     B26 : FD 77 00            		ld	(iy+chnl_Chip),a
(2) 2075/     B29 : DD 7E 02            		ld	a,(ix+2)
(2) 2076/     B2C : CF                  		rst	8
(2) 2077/     B2D : E6 03               		and	11b
(2) 2078/     B2F : 16 00               		ld	d,0
(2) 2079/     B31 : 5F                  		ld	e,a
(2) 2080/     B32 : 21 8C 16            		ld 	hl,psgcom
(2) 2081/     B35 : 19                  		add	hl,de
(2) 2082/     B36 : FE 02               		cp	2
(2) 2083/     B38 : 20 0C               		jr	nz,.notepsg_c
(2) 2084/     B3A : 3A 5E 1E            		ld	a,(psgHatMode)
(2) 2085/     B3D : E6 03               		and	011b
(2) 2086/     B3F : FE 03               		cp	011b
(2) 2087/     B41 : 20 03               		jr	nz,.notepsg_c
(2) 2088/     B43 : 36 04               		ld	(hl),100b	; key-cut PSG3 but dont unlink
(2) 2089/     B45 : C9                  		ret
(2) 2090/     B46 :                     .notepsg_c:
(2) 2091/     B46 : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 2092/     B49 : FE FE               		cp	-2
(2) 2093/     B4B : CA D1 0A            		jp	z,.pcut
(2) 2094/     B4E : FE FF               		cp	-1
(2) 2095/     B50 : CA CD 0A            		jp	z,.poff
(2) 2096/     B53 :                     .notepsg_fn:
(2) 2097/     B53 : CF                  		rst	8
(2) 2098/     B54 : E5                  		push	hl		; save psgcom
(2) 2099/     B55 : 21 4B 14            		ld	hl,psgFreq_List
(2) 2100/     B58 : DD 4E 03            		ld	c,(ix+3)
(2) 2101/     B5B : 81                  		add	a,c
(2) 2102/     B5C : 87                  		add	a,a
(2) 2103/     B5D : 11 00 00            		ld	de,0
(2) 2104/     B60 : 5F                  		ld	e,a
(2) 2105/     B61 : 19                  		add	hl,de
(2) 2106/     B62 : 5E                  		ld	e,(hl)
(2) 2107/     B63 : 23                  		inc	hl
(2) 2108/     B64 : 56                  		ld	d,(hl)
(2) 2109/     B65 : 01 00 00            		ld	bc,0
(2) 2110/     B68 : E6 03               		and	11b
(2) 2111/     B6A : 4F                  		ld	c,a
(2) 2112/     B6B : DD E5               		push	ix		; swap ix to hl
(2) 2113/     B6D : E1                  		pop	hl
(2) 2114/     B6E : CF                  		rst	8
(2) 2115/     B6F : 23                  		inc	hl		; skip link
(2) 2116/     B70 : 23                  		inc	hl
(2) 2117/     B71 : 23                  		inc 	hl		; channel id
(2) 2118/     B72 : 23                  		inc	hl		; pitch
(2) 2119/     B73 :                     ; 		ld	a,c
(2) 2120/     B73 :                     ; 		cp	3
(2) 2121/     B73 :                     ; 		jr	nz,.npsg2
(2) 2122/     B73 :                     ; 		ld 	a,(ix+4)
(2) 2123/     B73 :                     ; 		ld	(psgHatMode),a
(2) 2124/     B73 :                     ; .npsg2:
(2) 2125/     B73 : DD E1               		pop	ix			; restore psgcom as ix
(2) 2126/     B75 : FD 7E 01            		ld	a,(iy+chnl_Flags)	; Check is volume bit
(2) 2127/     B78 : CB 57               		bit	2,a			; is being used
(2) 2128/     B7A : 20 04               		jr	nz,.nodefv
(2) 2129/     B7C : DD 36 30 00         		ld	(ix+PVOL),0		; if not, set max volume
(2) 2130/     B80 :                     .nodefv:
(2) 2131/     B80 : DD 73 1C            		ld	(ix+DTL),e
(2) 2132/     B83 : DD 72 20            		ld	(ix+DTH),d
(2) 2133/     B86 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(2) 2134/     B8A : C9                  		ret
(2) 2135/     B8B :                     
(2) 2136/     B8B :                     ; --------------------------------
(2) 2137/     B8B :                     ; Note: FM,FM3,FM6
(2) 2138/     B8B :                     ; --------------------------------
(2) 2139/     B8B :                     
(2) 2140/     B8B :                     .note_dac:
(2) 2141/     B8B : 21 BC 17            		ld	hl,daccom
(2) 2142/     B8E : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 2143/     B91 : FE FF               		cp	-1
(2) 2144/     B93 : CA 8F 0C            		jp	z,.fm_keyoff
(2) 2145/     B96 : FE FE               		cp	-2
(2) 2146/     B98 : CA 8A 0C            		jp	z,.fm_keycut
(2) 2147/     B9B : FD 36 00 C0         		ld	(iy+chnl_Chip),0C0h	; Set as DAC
(2) 2148/     B9F : 11 00 00            		ld	de,0
(2) 2149/     BA2 : DD 5E 03            		ld	e,(ix+3)		; Get pitch
(2) 2150/     BA5 : 83                  		add	a,e
(2) 2151/     BA6 : 87                  		add	a,a
(2) 2152/     BA7 : 5F                  		ld	e,a
(2) 2153/     BA8 : 21 3D 15            		ld	hl,wavFreq_List
(2) 2154/     BAB : 19                  		add	hl,de
(2) 2155/     BAC : 7E                  		ld	a,(hl)
(2) 2156/     BAD : 23                  		inc	hl
(2) 2157/     BAE : 66                  		ld	h,(hl)
(2) 2158/     BAF : CF                  		rst	8
(2) 2159/     BB0 : 6F                  		ld	l,a
(2) 2160/     BB1 : 11 E8 FF            		ld	de,ZSET_WTUNE		; Fine-tune to desired
(2) 2161/     BB4 : 19                  		add	hl,de			; WAVE frequency
(2) 2162/     BB5 : 22 54 1E            		ld	(wave_Pitch),hl
(2) 2163/     BB8 :                     ; 		ld	a,1
(2) 2164/     BB8 :                     ; 		and	001b
(2) 2165/     BB8 :                     ; 		ld	(wave_Flags),a
(2) 2166/     BB8 : 3E 01               		ld	a,001b			; Request DAC play
(2) 2167/     BBA : 32 BC 17            		ld	(daccom),a
(2) 2168/     BBD : C9                  		ret
(2) 2169/     BBE :                     .dcut:
(2) 2170/     BBE : 3E 04               		ld	a,100b			; Request DAC stop
(2) 2171/     BC0 : 32 BC 17            		ld	(daccom),a
(2) 2172/     BC3 :                     .doff:
(2) 2173/     BC3 : 21 00 00            		ld	hl,0
(2) 2174/     BC6 : 22 07 18            		ld	(tblFM6),hl
(2) 2175/     BC9 : FD 36 00 00         		ld	(iy+chnl_Chip),0
(2) 2176/     BCD : C9                  		ret
(2) 2177/     BCE :                     ; FM3 special
(2) 2178/     BCE :                     .note_fm3:
(2) 2179/     BCE : 21 6A 16            		ld	hl,fmcom+2		; Channel 3 fmcom
(2) 2180/     BD1 : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 2181/     BD4 : FE FF               		cp	-1
(2) 2182/     BD6 : CA 8F 0C            		jp	z,.fm_keyoff
(2) 2183/     BD9 : FE FE               		cp	-2
(2) 2184/     BDB : CA 8A 0C            		jp	z,.fm_keycut
(2) 2185/     BDE : FD 36 00 B0         		ld	(iy+chnl_Chip),0B0h	; Set as FM3 special
(2) 2186/     BE2 : 16 27               		ld	d,27h
(2) 2187/     BE4 : 3E 40               		ld	a,01000000b
(2) 2188/     BE6 : 32 5F 1E            		ld	(fmSpcMode),a
(2) 2189/     BE9 : 5F                  		ld	e,a
(2) 2190/     BEA : CD F3 12            		call	fm_send_1
(2) 2191/     BED : E5                  		push	hl
(2) 2192/     BEE : DD E1               		pop	ix
(2) 2193/     BF0 : 18 74               		jr	.fm_chnlkon
(2) 2194/     BF2 :                     ; Normal FM
(2) 2195/     BF2 :                     .note_fm:
(2) 2196/     BF2 : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 2197/     BF5 : 57                  		ld	d,a
(2) 2198/     BF6 : DD 5E 03            		ld	e,(ix+3)
(2) 2199/     BF9 : 83                  		add	a,e
(2) 2200/     BFA : CF                  		rst	8
(2) 2201/     BFB : 4F                  		ld	c,a			; c - Note+pitch
(2) 2202/     BFC : DD 7E 02            		ld	a,(ix+2)
(2) 2203/     BFF : 47                  		ld	b,a
(2) 2204/     C00 : E6 07               		and	00000111b
(2) 2205/     C02 : 21 68 16            		ld	hl,fmcom		; hl - fmcom list
(2) 2206/     C05 : 11 00 00            		ld	de,0
(2) 2207/     C08 : E6 07               		and	111b
(2) 2208/     C0A : 5F                  		ld	e,a
(2) 2209/     C0B : 19                  		add	hl,de
(2) 2210/     C0C : CF                  		rst	8
(2) 2211/     C0D : FD 7E 02            		ld	a,(iy+chnl_Note)
(2) 2212/     C10 : FE FF               		cp	-1
(2) 2213/     C12 : 28 7B               		jr	z,.fm_keyoff
(2) 2214/     C14 : FE FE               		cp	-2
(2) 2215/     C16 : 28 72               		jr	z,.fm_keycut
(2) 2216/     C18 : 78                  		ld	a,b			; Set chip as FM
(2) 2217/     C19 : E6 07               		and	111b
(2) 2218/     C1B : FE 02               		cp	2			; Check if we got into channel 3
(2) 2219/     C1D : 20 0E               		jr	nz,.rd_nt3
(2) 2220/     C1F : 47                  		ld	b,a
(2) 2221/     C20 : 16 27               		ld	d,27h			; Disable CH3 special mode
(2) 2222/     C22 : 3E 00               		ld	a,00000000b
(2) 2223/     C24 : 32 5F 1E            		ld	(fmSpcMode),a
(2) 2224/     C27 : CF                  		rst	8
(2) 2225/     C28 : 5F                  		ld	e,a
(2) 2226/     C29 : CD F3 12            		call	fm_send_1
(2) 2227/     C2C : 78                  		ld	a,b
(2) 2228/     C2D :                     .rd_nt3:
(2) 2229/     C2D : F6 A0               		or	0A0h
(2) 2230/     C2F : FD 77 00            		ld	(iy+chnl_Chip),a
(2) 2231/     C32 : 79                  		ld	a,c
(2) 2232/     C33 : CF                  		rst	8
(2) 2233/     C34 : 06 00               		ld	b,0			; b - octave
(2) 2234/     C36 : 1E 07               		ld	e,7
(2) 2235/     C38 :                     .get_oct:
(2) 2236/     C38 : 4F                  		ld	c,a
(2) 2237/     C39 : D6 0C               		sub	12
(2) 2238/     C3B : B7                  		or	a
(2) 2239/     C3C : FA 43 0C            		jp	m,.fnd_oct
(2) 2240/     C3F : 04                  		inc	b
(2) 2241/     C40 : 1D                  		dec	e
(2) 2242/     C41 : 20 F5               		jr	nz,.get_oct
(2) 2243/     C43 :                     .fnd_oct:
(2) 2244/     C43 :                     	; b - octave / c - note
(2) 2245/     C43 : D5                  		push	de
(2) 2246/     C44 : CF                  		rst	8		; ix - current fmcom
(2) 2247/     C45 : 79                  		ld	a,c
(2) 2248/     C46 : 87                  		add	a,a
(2) 2249/     C47 : 4F                  		ld	c,a		; c - freq word
(2) 2250/     C48 : 78                  		ld	a,b
(2) 2251/     C49 : 87                  		add	a,a
(2) 2252/     C4A : 87                  		add	a,a
(2) 2253/     C4B : 87                  		add	a,a
(2) 2254/     C4C : 06 00               		ld	b,0
(2) 2255/     C4E : E5                  		push	hl
(2) 2256/     C4F : CF                  		rst	8
(2) 2257/     C50 : DD E1               		pop	ix
(2) 2258/     C52 : 21 33 14            		ld	hl,fmFreq_List
(2) 2259/     C55 : 09                  		add	hl,bc
(2) 2260/     C56 : 23                  		inc	hl
(2) 2261/     C57 : 4F                  		ld	c,a		; c - octave << 3
(2) 2262/     C58 : 7E                  		ld	a,(hl)		; Note MSB
(2) 2263/     C59 : B1                  		or	c		; add octave
(2) 2264/     C5A : 57                  		ld	d,a
(2) 2265/     C5B : 2B                  		dec	hl
(2) 2266/     C5C : CF                  		rst	8
(2) 2267/     C5D : 7E                  		ld	a,(hl)
(2) 2268/     C5E : 5F                  		ld	e,a
(2) 2269/     C5F : DD 72 18            		ld	(ix+FMFRQH),d	; Save freq MSB
(2) 2270/     C62 : DD 73 1E            		ld	(ix+FMFRQL),e	; Save freq LSB
(2) 2271/     C65 : D1                  		pop	de
(2) 2272/     C66 :                     .fm_chnlkon:
(2) 2273/     C66 : FD 7E 01            		ld	a,(iy+chnl_Flags)
(2) 2274/     C69 : 87                  		add	a,a		; move LR bits
(2) 2275/     C6A : 87                  		add	a,a
(2) 2276/     C6B : 2F                  		cpl
(2) 2277/     C6C : E6 C0               		and	11000000b	; Set Panning ENABLE bits
(2) 2278/     C6E : DD 77 12            		ld	(ix+FMPAN),a
(2) 2279/     C71 : 1E F0               		ld	e,11110000b	; ALLOWED keys (TEMPORAL)
(2) 2280/     C73 : CF                  		rst	8
(2) 2281/     C74 : DD 73 06            		ld	(ix+FMKEYS),e
(2) 2282/     C77 : DD 7E 00            		ld	a,(ix)		; key on
(2) 2283/     C7A : F6 41               		or	01000001b
(2) 2284/     C7C : DD 77 00            		ld	(ix),a
(2) 2285/     C7F : FD CB 01 56         		bit	2,(iy+chnl_Flags)	; check if volume is being used
(2) 2286/     C83 : 20 04               		jr	nz,.fm_kpv
(2) 2287/     C85 : DD 36 0C 00         		ld	(ix+FMVOL),0
(2) 2288/     C89 :                     .fm_kpv:
(2) 2289/     C89 : C9                  		ret
(2) 2290/     C8A :                     
(2) 2291/     C8A :                     ; keyoff/cut
(2) 2292/     C8A :                     .fm_keycut:
(2) 2293/     C8A : 0E 04               		ld	c,100b
(2) 2294/     C8C : C3 D3 0A            		jp	.chnl_unlink
(2) 2295/     C8F :                     .fm_keyoff:
(2) 2296/     C8F : 0E 02               		ld	c,010b
(2) 2297/     C91 : 71                  		ld	(hl),c
(2) 2298/     C92 : C9                  		ret
(2) 2299/     C93 :                     
(2) 2300/     C93 :                     ; ----------------------------------------
(2) 2301/     C93 :                     ; Channel chip swap
(2) 2302/     C93 :                     ; ----------------------------------------
(2) 2303/     C93 :                     
(2) 2304/     C93 :                     .chip_swap:
(2) 2305/     C93 : 4F                  		ld	c,a		; c - New chip ID
(2) 2306/     C94 : E6 F0               		and	11110000b
(2) 2307/     C96 : 47                  		ld	b,a
(2) 2308/     C97 : FD 7E 00            		ld	a,(iy+chnl_Chip)
(2) 2309/     C9A : CF                  		rst	8
(2) 2310/     C9B : 5F                  		ld	e,a		; e - Old chip ID
(2) 2311/     C9C : E6 F0               		and	11110000b
(2) 2312/     C9E : B8                  		cp	b
(2) 2313/     C9F : 28 2E               		jr	z,.chip_out
(2) 2314/     CA1 : 57                  		ld	d,a		; d - reuse last ID
(2) 2315/     CA2 : 79                  		ld	a,c		; New chip-ins is null?
(2) 2316/     CA3 : FE FF               		cp	-1
(2) 2317/     CA5 : 20 05               		jr	nz,.from_nl
(2) 2318/     CA7 : 7B                  		ld	a,e		; Reuse OLD ID
(2) 2319/     CA8 : CF                  		rst	8
(2) 2320/     CA9 : E6 F0               		and	11110000b
(2) 2321/     CAB : 57                  		ld	d,a		; new id to check
(2) 2322/     CAC :                     .from_nl:
(2) 2323/     CAC : 7A                  		ld	a,d
(2) 2324/     CAD : 16 00               		ld	d,0
(2) 2325/     CAF : FE 80               		cp	80h
(2) 2326/     CB1 : CC 1E 0D            		call	z,.psg_out
(2) 2327/     CB4 : FE 90               		cp	90h
(2) 2328/     CB6 : CC 10 0D            		call	z,.psgn_out
(2) 2329/     CB9 : CF                  		rst	8
(2) 2330/     CBA : FE A0               		cp	0A0h
(2) 2331/     CBC : CC 3E 0D            		call	z,.fm_out
(2) 2332/     CBF : FE B0               		cp	0B0h
(2) 2333/     CC1 : CC 02 0D            		call	z,.fm3_out
(2) 2334/     CC4 : FE C0               		cp	0C0h
(2) 2335/     CC6 : CC F4 0C            		call	z,.dac_out
(2) 2336/     CC9 : FE D0               		cp	0D0h
(2) 2337/     CCB : CC D1 0C            		call	z,.pwm_out
(2) 2338/     CCE : CF                  		rst	8
(2) 2339/     CCF :                     .chip_out:
(2) 2340/     CCF : 79                  		ld	a,c
(2) 2341/     CD0 : C9                  		ret
(2) 2342/     CD1 :                     
(2) 2343/     CD1 :                     .pwm_out:
(2) 2344/     CD1 : E5                  		push	hl
(2) 2345/     CD2 : 7B                  		ld	a,e
(2) 2346/     CD3 : E6 07               		and	111b
(2) 2347/     CD5 : 47                  		ld	b,a
(2) 2348/     CD6 : 5F                  		ld	e,a
(2) 2349/     CD7 : CF                  		rst	8
(2) 2350/     CD8 : 87                  		add	a,a
(2) 2351/     CD9 : 87                  		add	a,a
(2) 2352/     CDA : 87                  		add	a,a
(2) 2353/     CDB : 5F                  		ld	e,a
(2) 2354/     CDC : 21 11 18            		ld	hl,tblPWM
(2) 2355/     CDF : 19                  		add	hl,de
(2) 2356/     CE0 : CD 5C 0D            		call	.chp_unlk
(2) 2357/     CE3 : CF                  		rst	8
(2) 2358/     CE4 : 16 00               		ld	d,0
(2) 2359/     CE6 : 58                  		ld	e,b
(2) 2360/     CE7 : 21 30 16            		ld	hl,pwmcom
(2) 2361/     CEA : 19                  		add	hl,de
(2) 2362/     CEB : 36 04               		ld	(hl),100b
(2) 2363/     CED : 3E 01               		ld	a,1
(2) 2364/     CEF : 32 30 00            		ld	(marsUpd),a
(2) 2365/     CF2 : 18 48               		jr	.p_out
(2) 2366/     CF4 :                     
(2) 2367/     CF4 :                     .dac_out:
(2) 2368/     CF4 : E5                  		push	hl
(2) 2369/     CF5 : 21 07 18            		ld	hl,tblFM6
(2) 2370/     CF8 : CD 5C 0D            		call	.chp_unlk
(2) 2371/     CFB : 21 BC 17            		ld	hl,daccom
(2) 2372/     CFE : 36 04               		ld	(hl),100b
(2) 2373/     D00 : E1                  		pop	hl
(2) 2374/     D01 : C9                  		ret
(2) 2375/     D02 :                     .fm3_out:
(2) 2376/     D02 : E5                  		push	hl
(2) 2377/     D03 : 21 FF 17            		ld	hl,tblFM3
(2) 2378/     D06 : CD 5C 0D            		call	.chp_unlk
(2) 2379/     D09 : 21 6A 16            		ld	hl,fmcom+2
(2) 2380/     D0C : 36 04               		ld	(hl),100b
(2) 2381/     D0E : E1                  		pop	hl
(2) 2382/     D0F : C9                  		ret
(2) 2383/     D10 :                     .psgn_out:
(2) 2384/     D10 : E5                  		push	hl
(2) 2385/     D11 : 21 D7 17            		ld	hl,tblPSGN
(2) 2386/     D14 : CD 5C 0D            		call	.chp_unlk
(2) 2387/     D17 : 21 8F 16            		ld	hl,psgcom+3
(2) 2388/     D1A : 36 04               		ld	(hl),100b
(2) 2389/     D1C : E1                  		pop	hl
(2) 2390/     D1D : C9                  		ret
(2) 2391/     D1E :                     .psg_out:
(2) 2392/     D1E : E5                  		push	hl
(2) 2393/     D1F : 7B                  		ld	a,e
(2) 2394/     D20 : E6 03               		and	011b
(2) 2395/     D22 : 47                  		ld	b,a
(2) 2396/     D23 : 5F                  		ld	e,a
(2) 2397/     D24 : 87                  		add	a,a
(2) 2398/     D25 : CF                  		rst	8
(2) 2399/     D26 : 87                  		add	a,a
(2) 2400/     D27 : 87                  		add	a,a
(2) 2401/     D28 : 5F                  		ld	e,a
(2) 2402/     D29 : 21 BD 17            		ld	hl,tblPSG
(2) 2403/     D2C : 19                  		add	hl,de
(2) 2404/     D2D : CD 5C 0D            		call	.chp_unlk
(2) 2405/     D30 : 20 0A               		jr	nz,.p_out
(2) 2406/     D32 : CF                  		rst	8
(2) 2407/     D33 : 16 00               		ld	d,0
(2) 2408/     D35 : 58                  		ld	e,b
(2) 2409/     D36 : 21 8C 16            		ld	hl,psgcom
(2) 2410/     D39 : 19                  		add	hl,de
(2) 2411/     D3A : 36 04               		ld	(hl),100b
(2) 2412/     D3C :                     .p_out:
(2) 2413/     D3C : E1                  		pop	hl
(2) 2414/     D3D : C9                  		ret
(2) 2415/     D3E :                     .fm_out:
(2) 2416/     D3E : E5                  		push	hl
(2) 2417/     D3F : 7B                  		ld	a,e
(2) 2418/     D40 : E6 07               		and	111b
(2) 2419/     D42 : 47                  		ld	b,a
(2) 2420/     D43 : 5F                  		ld	e,a
(2) 2421/     D44 : CF                  		rst	8
(2) 2422/     D45 : 87                  		add	a,a
(2) 2423/     D46 : 87                  		add	a,a
(2) 2424/     D47 : 87                  		add	a,a
(2) 2425/     D48 : 5F                  		ld	e,a
(2) 2426/     D49 : 21 DF 17            		ld	hl,tblFM
(2) 2427/     D4C : 19                  		add	hl,de
(2) 2428/     D4D : CD 5C 0D            		call	.chp_unlk
(2) 2429/     D50 : CF                  		rst	8
(2) 2430/     D51 : 16 00               		ld	d,0
(2) 2431/     D53 : 58                  		ld	e,b
(2) 2432/     D54 : 21 68 16            		ld	hl,fmcom
(2) 2433/     D57 : 19                  		add	hl,de
(2) 2434/     D58 : 36 04               		ld	(hl),100b
(2) 2435/     D5A : 18 E0               		jr	.p_out
(2) 2436/     D5C :                     
(2) 2437/     D5C :                     .chp_unlk:
(2) 2438/     D5C : FD E5               		push	iy
(2) 2439/     D5E : D1                  		pop	de
(2) 2440/     D5F : CF                  		rst	8
(2) 2441/     D60 : 7E                  		ld	a,(hl)
(2) 2442/     D61 : BB                  		cp	e
(2) 2443/     D62 : C0                  		ret	nz
(2) 2444/     D63 : 23                  		inc	hl
(2) 2445/     D64 : 7E                  		ld	a,(hl)
(2) 2446/     D65 : BA                  		cp	d
(2) 2447/     D66 : C0                  		ret	nz
(2) 2448/     D67 : 2B                  		dec	hl
(2) 2449/     D68 : CF                  		rst	8
(2) 2450/     D69 : 36 00               		ld	(hl),0
(2) 2451/     D6B : 23                  		inc	hl
(2) 2452/     D6C : 36 00               		ld	(hl),0
(2) 2453/     D6E : 23                  		inc	hl
(2) 2454/     D6F : 5E                  		ld	e,(hl)	; c - ID
(2) 2455/     D70 : 23                  		inc	hl
(2) 2456/     D71 : 36 00               		ld	(hl),0	; reset 5 bytes of settings
(2) 2457/     D73 : CF                  		rst	8
(2) 2458/     D74 : 23                  		inc	hl
(2) 2459/     D75 : 36 00               		ld	(hl),0
(2) 2460/     D77 : 23                  		inc	hl
(2) 2461/     D78 : 36 00               		ld	(hl),0
(2) 2462/     D7A : 23                  		inc	hl
(2) 2463/     D7B : 36 00               		ld	(hl),0
(2) 2464/     D7D : 23                  		inc	hl
(2) 2465/     D7E : 36 00               		ld	(hl),0
(2) 2466/     D80 : AF                  		xor	a
(2) 2467/     D81 : B7                  		or	a
(2) 2468/     D82 : C9                  		ret
(2) 2469/     D83 :                     
(2) 2470/     D83 :                     ; ----------------------------------------
(2) 2471/     D83 :                     ; Sets current instrument data
(2) 2472/     D83 :                     ;
(2) 2473/     D83 :                     ;   -1 - Null instrument
(2) 2474/     D83 :                     ;  80h - PSG
(2) 2475/     D83 :                     ;  90h - PSG Noise
(2) 2476/     D83 :                     ; 0A0h - FM
(2) 2477/     D83 :                     ; 0B0h - FM3 Special
(2) 2478/     D83 :                     ; 0C0h - FM6 Sample
(2) 2479/     D83 :                     ; 0D0h - PWM (or extra)
(2) 2480/     D83 :                     ; ----------------------------------------
(2) 2481/     D83 :                     
(2) 2482/     D83 :                     .check_ins:
(2) 2483/     D83 : FD 7E 03            		ld	a,(iy+chnl_Ins)
(2) 2484/     D86 : 3D                  		dec	a		; minus 1
(2) 2485/     D87 : F8                  		ret	m		; return as -1 if no ins is used.
(2) 2486/     D88 : 87                  		add	a,a		; * 08h
(2) 2487/     D89 : 87                  		add	a,a
(2) 2488/     D8A : CF                  		rst	8
(2) 2489/     D8B : 87                  		add	a,a
(2) 2490/     D8C : 2A 40 1E            		ld	hl,(currInsData)
(2) 2491/     D8F : 11 00 00            		ld	de,0
(2) 2492/     D92 : 5F                  		ld	e,a
(2) 2493/     D93 : 19                  		add	hl,de
(2) 2494/     D94 : 7E                  		ld	a,(hl)
(2) 2495/     D95 : C9                  		ret
(2) 2496/     D96 :                     
(2) 2497/     D96 :                     ; ----------------------------------------
(2) 2498/     D96 :                     ; Checks which channel type is using
(2) 2499/     D96 :                     ; auto-set channel
(2) 2500/     D96 :                     ;
(2) 2501/     D96 :                     ; a - sound chip
(2) 2502/     D96 :                     ; ----------------------------------------
(2) 2503/     D96 :                     
(2) 2504/     D96 :                     .check_chnl:
(2) 2505/     D96 : FE FF               		cp	-1		; if -1: Null
(2) 2506/     D98 : C8                  		ret	z
(2) 2507/     D99 : CF                  		rst	8
(2) 2508/     D9A : 4F                  		ld	c,a		; save copy to c
(2) 2509/     D9B : 87                  		add	a,a		; * 2
(2) 2510/     D9C : 16 00               		ld	d,0
(2) 2511/     D9E : 0F                  		rrca
(2) 2512/     D9F : 0F                  		rrca
(2) 2513/     DA0 : 0F                  		rrca
(2) 2514/     DA1 : 0F                  		rrca
(2) 2515/     DA2 : E6 0F               		and	00001111b
(2) 2516/     DA4 : 5F                  		ld	e,a
(2) 2517/     DA5 : DD 21 C7 0D         		ld	ix,.tbllist	; get table from list
(2) 2518/     DA9 : DD 19               		add	ix,de
(2) 2519/     DAB : DD 5E 00            		ld	e,(ix)
(2) 2520/     DAE : DD 56 01            		ld	d,(ix+1)
(2) 2521/     DB1 : CF                  		rst	8
(2) 2522/     DB2 : D5                  		push	de
(2) 2523/     DB3 : DD E1               		pop	ix
(2) 2524/     DB5 : 79                  		ld	a,c		; restore from c
(2) 2525/     DB6 : FE 90               		cp	90h		; type PSGN?
(2) 2526/     DB8 : 28 19               		jr	z,.chk_tbln
(2) 2527/     DBA : FE B0               		cp	0B0h		; type FM3?
(2) 2528/     DBC : 28 15               		jr	z,.chk_tbln
(2) 2529/     DBE : FE C0               		cp	0C0h		; type DAC?
(2) 2530/     DC0 : 28 11               		jr	z,.chk_tbln
(2) 2531/     DC2 : 18 2D               		jr	.chk_tbl
(2) 2532/     DC4 :                     .bad_ins:
(2) 2533/     DC4 : 3E FF               		ld	a,-1
(2) 2534/     DC6 : C9                  		ret
(2) 2535/     DC7 :                     
(2) 2536/     DC7 :                     ; --------------------------------------------
(2) 2537/     DC7 :                     
(2) 2538/     DC7 :                     .tbllist:
(2) 2539/     DC7 : BD 17               		dw tblPSG	;  80h
(2) 2540/     DC9 : D7 17               		dw tblPSGN	;  90h
(2) 2541/     DCB : DF 17               		dw tblFM	; 0A0h
(2) 2542/     DCD : FF 17               		dw tblFM3	; 0B0h
(2) 2543/     DCF : 07 18               		dw tblFM6	; 0C0h
(2) 2544/     DD1 : 11 18               		dw tblPWM	; 0D0h
(2) 2545/     DD3 :                     
(2) 2546/     DD3 :                     ; --------------------------------------------
(2) 2547/     DD3 :                     ; Check SINGLE channel table
(2) 2548/     DD3 :                     ; (FM3,FM6,PSGN)
(2) 2549/     DD3 :                     ; --------------------------------------------
(2) 2550/     DD3 :                     
(2) 2551/     DD3 :                     ; This auto-replaces the LINKED channel
(2) 2552/     DD3 :                     .chk_tbln:
(2) 2553/     DD3 : FD E5               		push	iy
(2) 2554/     DD5 : D1                  		pop	de		; de - Copy of curr track-channel
(2) 2555/     DD6 :                     
(2) 2556/     DD6 :                     	; **** MSB priority overwrite
(2) 2557/     DD6 : CF                  		rst	8
(2) 2558/     DD7 : DD 7E 01            		ld	a,(ix+1)	; MSB | LSB
(2) 2559/     DDA : DD B6 00            		or	(ix)		; Check if blank
(2) 2560/     DDD : 28 06               		jr	z,.new
(2) 2561/     DDF : DD 7E 01            		ld	a,(ix+1)
(2) 2562/     DE2 : BA                  		cp	d
(2) 2563/     DE3 : 38 09               		jr	c,.busy_s
(2) 2564/     DE5 :                     .new:
(2) 2565/     DE5 : CF                  		rst	8
(2) 2566/     DE6 : DD 73 00            		ld	(ix),e		; NEW slot
(2) 2567/     DE9 : DD 72 01            		ld	(ix+1),d
(2) 2568/     DEC : AF                  		xor	a		; Found free slot, pick it.
(2) 2569/     DED : C9                  		ret
(2) 2570/     DEE :                     .busy_s:
(2) 2571/     DEE : 3E FF               		ld	a,-1
(2) 2572/     DF0 : C9                  		ret
(2) 2573/     DF1 :                     
(2) 2574/     DF1 :                     ; --------------------------------------------
(2) 2575/     DF1 :                     ; Check available channel slot from list
(2) 2576/     DF1 :                     ; --------------------------------------------
(2) 2577/     DF1 :                     
(2) 2578/     DF1 :                     .chk_tbl:
(2) 2579/     DF1 : 01 00 00            		ld	bc,0		; bc - Free slot point
(2) 2580/     DF4 :                     .next:
(2) 2581/     DF4 : DD 7E 01            		ld	a,(ix+1)	; Check MSB first
(2) 2582/     DF7 : FE FF               		cp	-1		; End of list? (as WORD: 0FFxxh)
(2) 2583/     DF9 : 28 2A               		jr	z,.chkfree
(2) 2584/     DFB : FD E5               		push	iy
(2) 2585/     DFD : D1                  		pop	de		; de - Copy of curr track-channel
(2) 2586/     DFE : CF                  		rst	8
(2) 2587/     DFF : BA                  		cp	d		; check if link matches
(2) 2588/     E00 : 20 08               		jr	nz,.diffr
(2) 2589/     E02 : DD 7E 00            		ld	a,(ix)
(2) 2590/     E05 : BB                  		cp	e
(2) 2591/     E06 : 20 02               		jr	nz,.diffr
(2) 2592/     E08 : AF                  		xor	a		; return 0
(2) 2593/     E09 : C9                  		ret
(2) 2594/     E0A :                     .diffr:
(2) 2595/     E0A : 79                  		ld	a,c		; bc link already set?
(2) 2596/     E0B : B0                  		or	b
(2) 2597/     E0C : 20 10               		jr	nz,.alrdfnd
(2) 2598/     E0E : CF                  		rst	8
(2) 2599/     E0F : DD 5E 01            		ld	e,(ix+1)	; Check if this link == 0
(2) 2600/     E12 : DD 7E 00            		ld	a,(ix)
(2) 2601/     E15 : B3                  		or	e
(2) 2602/     E16 : 28 02               		jr	z,.fndlink
(2) 2603/     E18 :                     
(2) 2604/     E18 :                     	; priority
(2) 2605/     E18 :                     
(2) 2606/     E18 : 18 04               		jr	.alrdfnd
(2) 2607/     E1A :                     
(2) 2608/     E1A :                     ; 		push	de		; Check if this link is
(2) 2609/     E1A :                     ; 		ld	d,(ix+1)	; floating.
(2) 2610/     E1A :                     ; 		ld	e,(ix)
(2) 2611/     E1A :                     ; 		inc	de
(2) 2612/     E1A :                     ; 		rst	8
(2) 2613/     E1A :                     ; 		ld	a,(de)
(2) 2614/     E1A :                     ; 		pop	de
(2) 2615/     E1A :                     ; 		cp	-2
(2) 2616/     E1A :                     ; 		jr	z,.fndlink
(2) 2617/     E1A :                     ; 		cp	-1
(2) 2618/     E1A :                     ; 		jr	z,.fndlink
(2) 2619/     E1A :                     
(2) 2620/     E1A :                     ; 		jr	.alrdfnd
(2) 2621/     E1A :                     	; **** MSB priority overwrite
(2) 2622/     E1A :                     ; 		ld	a,e
(2) 2623/     E1A :                     ; 		cp	d
(2) 2624/     E1A :                     ; 		jr	nc,.alrdfnd
(2) 2625/     E1A :                     	; ****
(2) 2626/     E1A :                     
(2) 2627/     E1A :                     .fndlink:
(2) 2628/     E1A : DD E5               		push	ix		; bc - got new link
(2) 2629/     E1C : C1                  		pop	bc
(2) 2630/     E1D : CF                  		rst	8
(2) 2631/     E1E :                     .alrdfnd:
(2) 2632/     E1E : 11 08 00            		ld	de,8		; Next channel table
(2) 2633/     E21 : DD 19               		add	ix,de
(2) 2634/     E23 : 18 CF               		jr	.next
(2) 2635/     E25 :                     
(2) 2636/     E25 :                     ; free link slot
(2) 2637/     E25 :                     .chkfree:
(2) 2638/     E25 : 79                  		ld	a,c		; found free link?
(2) 2639/     E26 : B0                  		or	b
(2) 2640/     E27 : 28 0F               		jr	z,.fndslot
(2) 2641/     E29 : C5                  		push	bc
(2) 2642/     E2A : DD E1               		pop	ix		; tell ix is the new slot
(2) 2643/     E2C : FD E5               		push	iy
(2) 2644/     E2E : D1                  		pop	de		; and mark it on buffer
(2) 2645/     E2F : CF                  		rst	8
(2) 2646/     E30 : DD 73 00            		ld	(ix),e
(2) 2647/     E33 : DD 72 01            		ld	(ix+1),d
(2) 2648/     E36 : AF                  		xor	a
(2) 2649/     E37 : C9                  		ret
(2) 2650/     E38 :                     .fndslot:
(2) 2651/     E38 : 3E FF               		ld	a,-1		; linksteal check goes here
(2) 2652/     E3A : C9                  		ret
(2) 2653/     E3B :                     
(2) 2654/     E3B :                     ; ====================================================================
(2) 2655/     E3B :                     ; ----------------------------------------------------------------
(2) 2656/     E3B :                     ; Subroutines
(2) 2657/     E3B :                     ; ----------------------------------------------------------------
(2) 2658/     E3B :                     
(2) 2659/     E3B :                     ; --------------------------------------------------------
(2) 2660/     E3B :                     ; Init sound engine
(2) 2661/     E3B :                     ; --------------------------------------------------------
(2) 2662/     E3B :                     
(2) 2663/     E3B :                     gema_init:
(2) 2664/     E3B : CD 1E 13            		call	dac_off
(2) 2665/     E3E : 21 00 1B            		ld	hl,dWaveBuff	; hl - Wave buffer START
(2) 2666/     E41 : 11 01 1B            		ld	de,dWaveBuff+1	; de - Wave next byte
(2) 2667/     E44 : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(2) 2668/     E47 : 36 80               		ld	(hl),80h	; Set first byte
(2) 2669/     E49 : ED B0               		ldir			; Start copying
(2) 2670/     E4B : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(2) 2671/     E4E : 36 9F               		ld	(hl),09Fh
(2) 2672/     E50 : 36 BF               		ld	(hl),0BFh
(2) 2673/     E52 : 36 DF               		ld	(hl),0DFh
(2) 2674/     E54 : 36 FF               		ld	(hl),0FFh
(2) 2675/     E56 : 11 0B 22            		ld	de,2208h|3	; Set default LFO
(2) 2676/     E59 : CD F3 12            		call	fm_send_1
(2) 2677/     E5C : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(2) 2678/     E5F : CD F3 12            		call	fm_send_1
(2) 2679/     E62 : 11 00 28            		ld	de,2800h	; FM KEYS off
(2) 2680/     E65 : CD F3 12            		call	fm_send_1
(2) 2681/     E68 : 1C                  		inc	e
(2) 2682/     E69 : CD F3 12            		call	fm_send_1
(2) 2683/     E6C : 1C                  		inc	e
(2) 2684/     E6D : CD F3 12            		call	fm_send_1
(2) 2685/     E70 : 1C                  		inc	e
(2) 2686/     E71 : 1C                  		inc	e
(2) 2687/     E72 : CD F3 12            		call	fm_send_1
(2) 2688/     E75 : 1C                  		inc	e
(2) 2689/     E76 : CD F3 12            		call	fm_send_1
(2) 2690/     E79 : 1C                  		inc	e
(2) 2691/     E7A : CD F3 12            		call	fm_send_1
(2) 2692/     E7D :                     
(2) 2693/     E7D :                     	; set each tracks' settings
(2) 2694/     E7D : FD 21 50 19         		ld	iy,trkBuff_0
(2) 2695/     E81 : 21 00 1C            		ld	hl,trkData_0
(2) 2696/     E84 : 1E 11               		ld	e,MAX_TRKCHN
(2) 2697/     E86 : 16 80               		ld	d,8*16			; maximum size
(2) 2698/     E88 : CD 96 0E            		call	.set_it
(2) 2699/     E8B : FD 21 F8 19         		ld	iy,trkBuff_1
(2) 2700/     E8F : 21 00 1D            		ld	hl,trkData_1
(2) 2701/     E92 : 1E 11               		ld	e,MAX_TRKCHN
(2) 2702/     E94 : 16 80               		ld	d,8*16
(2) 2703/     E96 :                     .set_it:
(2) 2704/     E96 : FD 75 18            		ld	(iy+trk_CachNotes),l
(2) 2705/     E99 : FD 74 19            		ld	(iy+(trk_CachNotes+1)),h
(2) 2706/     E9C :                     ; 		ld	(iy+trk_numChnls),e
(2) 2707/     E9C : FD 72 16            		ld	(iy+trk_sizeIns),d
(2) 2708/     E9F : C9                  		ret
(2) 2709/     EA0 :                     
(2) 2710/     EA0 :                     ; --------------------------------------------------------
(2) 2711/     EA0 :                     ; get_tick
(2) 2712/     EA0 :                     ;
(2) 2713/     EA0 :                     ; Checks if VBlank triggred a TICK
(2) 2714/     EA0 :                     ; (1/150 NTSC, 1/120 PAL)
(2) 2715/     EA0 :                     ; --------------------------------------------------------
(2) 2716/     EA0 :                     
(2) 2717/     EA0 :                     get_tick:
(2) 2718/     EA0 : F3                  		di				; Disable ints
(2) 2719/     EA1 : F5                  		push	af
(2) 2720/     EA2 : E5                  		push	hl
(2) 2721/     EA3 : 21 49 1E            		ld	hl,tickFlag+1		; read last TICK flag
(2) 2722/     EA6 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(2) 2723/     EA7 : B7                  		or 	a
(2) 2724/     EA8 : 28 13               		jr	z,.ctnotick
(2) 2725/     EAA : 36 00               		ld	(hl),0			; Reset TICK flag
(2) 2726/     EAC : 23                  		inc	hl			; Move to tickCnt
(2) 2727/     EAD : 34                  		inc	(hl)			; and increment
(2) 2728/     EAE : CF                  		rst	8
(2) 2729/     EAF : D5                  		push	de
(2) 2730/     EB0 : 2A 34 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(2) 2731/     EB3 : ED 5B 32 00         		ld	de,(sbeatPtck_1)
(2) 2732/     EB7 : CF                  		rst	8
(2) 2733/     EB8 : 19                  		add	hl,de
(2) 2734/     EB9 : 22 34 00            		ld	(sbeatAcc),hl
(2) 2735/     EBC : D1                  		pop	de
(2) 2736/     EBD :                     .ctnotick:
(2) 2737/     EBD : E1                  		pop	hl
(2) 2738/     EBE : F1                  		pop	af
(2) 2739/     EBF : FB                  		ei				; Enable ints again
(2) 2740/     EC0 : C9                  		ret
(2) 2741/     EC1 :                     
(2) 2742/     EC1 :                     ; --------------------------------------------------------
(2) 2743/     EC1 :                     ; showRom:
(2) 2744/     EC1 :                     ; Get ROM position visible for reading
(2) 2745/     EC1 :                     ;
(2) 2746/     EC1 :                     ; Input:
(2) 2747/     EC1 :                     ;  b - ROM address $xx0000
(2) 2748/     EC1 :                     ; hl - ROM address $00xxxx
(2) 2749/     EC1 :                     ;
(2) 2750/     EC1 :                     ; Output:
(2) 2751/     EC1 :                     ; hl - ROM position ready to use for reading
(2) 2752/     EC1 :                     ; --------------------------------------------------------
(2) 2753/     EC1 :                     
(2) 2754/     EC1 :                     showRom:
(2) 2755/     EC1 : CF                  		rst	8
(2) 2756/     EC2 : D5                  		push	de
(2) 2757/     EC3 : C5                  		push	bc
(2) 2758/     EC4 : 11 00 60            		ld	de,6000h
(2) 2759/     EC7 : 7C                  		ld	a,h
(2) 2760/     EC8 : 07                  		rlca
(2) 2761/     EC9 : CF                  		rst	8
(2) 2762/     ECA : 12                  		ld	(de),a
(2) 2763/     ECB : 78                  		ld	a,b
(2) 2764/     ECC : 12                  		ld	(de),a
(2) 2765/     ECD : 1F                  		rra
(2) 2766/     ECE : 12                  		ld	(de),a
(2) 2767/     ECF : 1F                  		rra
(2) 2768/     ED0 : 12                  		ld	(de),a
(2) 2769/     ED1 : 1F                  		rra
(2) 2770/     ED2 : CF                  		rst	8
(2) 2771/     ED3 : 12                  		ld	(de),a
(2) 2772/     ED4 : 1F                  		rra
(2) 2773/     ED5 : 12                  		ld	(de),a
(2) 2774/     ED6 : 1F                  		rra
(2) 2775/     ED7 : 12                  		ld	(de),a
(2) 2776/     ED8 : 1F                  		rra
(2) 2777/     ED9 : 12                  		ld	(de),a
(2) 2778/     EDA : 1F                  		rra
(2) 2779/     EDB : 12                  		ld	(de),a
(2) 2780/     EDC : CF                  		rst	8
(2) 2781/     EDD : C1                  		pop	bc
(2) 2782/     EDE : D1                  		pop	de
(2) 2783/     EDF : CB FC               		set	7,h
(2) 2784/     EE1 : C9                  		ret
(2) 2785/     EE2 :                     
(2) 2786/     EE2 :                     ; --------------------------------------------------------
(2) 2787/     EE2 :                     ; readRomB:
(2) 2788/     EE2 :                     ; Reads a byte from ROM safetly, for a single and quick
(2) 2789/     EE2 :                     ; byte-read only, NOT autoswitchable.
(2) 2790/     EE2 :                     ; CALL showRom FIRST, DO NOT CALL RST 20h (dac_fill)
(2) 2791/     EE2 :                     ; BEFORE GETTING HERE
(2) 2792/     EE2 :                     ;
(2) 2793/     EE2 :                     ; Input:
(2) 2794/     EE2 :                     ; hl - ROM position in Z80's area
(2) 2795/     EE2 :                     ;      (BANK must be set already)
(2) 2796/     EE2 :                     ;
(2) 2797/     EE2 :                     ; Output:
(2) 2798/     EE2 :                     ; a - byte recieved
(2) 2799/     EE2 :                     ; --------------------------------------------------------
(2) 2800/     EE2 :                     
(2) 2801/     EE2 :                     ; ALL this code just to read one byte without bothering
(2) 2802/     EE2 :                     ; the DMA from the 68k side
(2) 2803/     EE2 :                     
(2) 2804/     EE2 :                     readRomB:
(2) 2805/     EE2 : DD E5               		push	ix
(2) 2806/     EE4 : DD 21 1C 00         		ld	ix,commZRomBlk
(2) 2807/     EE8 : DD CB 01 C6         		set	0,(ix+1)	; ROM read request
(2) 2808/     EEC : DD CB 00 46         		bit	0,(ix)		; 68k is on DMA?
(2) 2809/     EF0 : 20 09               		jr	nz,.wait
(2) 2810/     EF2 : 7E                  .imback:	ld	a,(hl)		; Read the byte.
(2) 2811/     EF3 : DD CB 01 86         		res	0,(ix+1)
(2) 2812/     EF7 : CF                  		rst	8
(2) 2813/     EF8 : DD E1               		pop	ix
(2) 2814/     EFA : C9                  		ret
(2) 2815/     EFB :                     .wait:
(2) 2816/     EFB : DD CB 01 86         		res	0,(ix+1)	; Not reading ROM
(2) 2817/     EFF :                     .w2:
(2) 2818/     EFF : CF                  		rst	8
(2) 2819/     F00 : 00                  		nop
(2) 2820/     F01 : 00                  		nop
(2) 2821/     F02 : CF                  		rst	8
(2) 2822/     F03 : DD CB 00 46         		bit	0,(ix)		; Is ROM free from 68K?
(2) 2823/     F07 : 20 F6               		jr	nz,.w2
(2) 2824/     F09 : DD CB 01 C6         		set	0,(ix+1)	; Reading ROM again.
(2) 2825/     F0D : 18 E3               		jr	.imback
(2) 2826/     F0F :                     
(2) 2827/     F0F :                     ; --------------------------------------------------------
(2) 2828/     F0F :                     ; transferRom
(2) 2829/     F0F :                     ;
(2) 2830/     F0F :                     ; Transfer bytes from ROM to Z80, this also tells
(2) 2831/     F0F :                     ; to 68k that we are reading fom ROM
(2) 2832/     F0F :                     ;
(2) 2833/     F0F :                     ; Input:
(2) 2834/     F0F :                     ; a  - Source ROM address $xx0000
(2) 2835/     F0F :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(2) 2836/     F0F :                     ; hl - Source ROM address $00xxxx
(2) 2837/     F0F :                     ; de - Destination address
(2) 2838/     F0F :                     ;
(2) 2839/     F0F :                     ; Uses:
(2) 2840/     F0F :                     ; b, ix
(2) 2841/     F0F :                     ;
(2) 2842/     F0F :                     ; Notes:
(2) 2843/     F0F :                     ; call dac_fill first if transfering anything other than
(2) 2844/     F0F :                     ; sample data, just to be safe
(2) 2845/     F0F :                     ; --------------------------------------------------------
(2) 2846/     F0F :                     
(2) 2847/     F0F :                     ; Note: got this from GEMS...
(2) 2848/     F0F :                     
(2) 2849/     F0F :                     transferRom:
(2) 2850/     F0F : CF                  		rst	8
(2) 2851/     F10 : DD E5               		push	ix
(2) 2852/     F12 : DD 21 1C 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(2) 2853/     F16 : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(2) 2854/     F19 : CB BC               		res	7,h
(2) 2855/     F1B : 06 00               		ld	b,0
(2) 2856/     F1D : 0B                  		dec	bc
(2) 2857/     F1E : 09                  		add	hl,bc
(2) 2858/     F1F : CB 7C               		bit	7,h
(2) 2859/     F21 : 20 0B               		jr	nz,.double
(2) 2860/     F23 : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(2) 2861/     F26 : 0C                  		inc	c
(2) 2862/     F27 : 47                  		ld	b,a
(2) 2863/     F28 : CD 53 0F            		call	.transfer
(2) 2864/     F2B : DD E1               		pop	ix
(2) 2865/     F2D : C9                  		ret
(2) 2866/     F2E :                     .double:
(2) 2867/     F2E : CF                  		rst	8
(2) 2868/     F2F : 47                  		ld	b,a		; double transfer
(2) 2869/     F30 : C5                  		push	bc
(2) 2870/     F31 : E5                  		push	hl
(2) 2871/     F32 : 79                  		ld	a,c
(2) 2872/     F33 : 95                  		sub	a,l
(2) 2873/     F34 : 4F                  		ld	c,a
(2) 2874/     F35 : 2A 36 00            		ld	hl,(x68ksrclsb)
(2) 2875/     F38 : CD 53 0F            		call	.transfer
(2) 2876/     F3B : E1                  		pop	hl
(2) 2877/     F3C : C1                  		pop	bc
(2) 2878/     F3D : CF                  		rst	8
(2) 2879/     F3E : 4D                  		ld	c,l
(2) 2880/     F3F : 0C                  		inc	c
(2) 2881/     F40 : 3A 37 00            		ld	a,(x68ksrcmid)
(2) 2882/     F43 : E6 80               		and	80h
(2) 2883/     F45 : C6 80               		add	a,80h
(2) 2884/     F47 : 67                  		ld	h,a
(2) 2885/     F48 : 2E 00               		ld	l,0
(2) 2886/     F4A : 30 01               		jr	nc,.x68knocarry
(2) 2887/     F4C : 04                  		inc	b
(2) 2888/     F4D :                     .x68knocarry:
(2) 2889/     F4D : CD 53 0F            		call	.transfer
(2) 2890/     F50 : DD E1               		pop	ix
(2) 2891/     F52 : C9                  		ret
(2) 2892/     F53 :                     
(2) 2893/     F53 :                     ; ------------------------------------------------
(2) 2894/     F53 :                     ; b  - Source ROM xx0000
(2) 2895/     F53 :                     ;  c - Bytes to transfer (00h not allowed)
(2) 2896/     F53 :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(2) 2897/     F53 :                     ; de - Destination address
(2) 2898/     F53 :                     ;
(2) 2899/     F53 :                     ; Uses:
(2) 2900/     F53 :                     ; a
(2) 2901/     F53 :                     ; ------------------------------------------------
(2) 2902/     F53 :                     
(2) 2903/     F53 :                     .transfer:
(2) 2904/     F53 : CD C1 0E            		call	showRom
(2) 2905/     F56 :                     
(2) 2906/     F56 :                     	; Transfer data in packs of bytes
(2) 2907/     F56 :                     	; while playing cache WAV in the process
(2) 2908/     F56 :                     	; *** CRITICAL PROCESS FOR WAV PLAYBACK ***
(2) 2909/     F56 :                     	;
(2) 2910/     F56 :                     	; pseudo-ref for ldir:
(2) 2911/     F56 :                     	; ld (de),(hl)
(2) 2912/     F56 :                     	; inc de
(2) 2913/     F56 :                     	; inc hl
(2) 2914/     F56 :                     	; dec bc
(2) 2915/     F56 :                     	;
(2) 2916/     F56 : 06 00               		ld	b,0
(2) 2917/     F58 : 79                  		ld	a,c		; a - pieces counter
(2) 2918/     F59 : DD CB 01 C6         		set	0,(ix+1)	; Tell to 68k that we are reading from ROM
(2) 2919/     F5D : D6 06               		sub	6		; LENGHT lower than 6?
(2) 2920/     F5F : 38 11               		jr	c,.x68klast	; Process single piece only
(2) 2921/     F61 :                     .x68kloop:
(2) 2922/     F61 : CF                  		rst	8
(2) 2923/     F62 : 0E 05               		ld	c,6-1
(2) 2924/     F64 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(2) 2925/     F68 : 20 1A               		jr	nz,.x68klpwt
(2) 2926/     F6A :                     .x68klpcont:
(2) 2927/     F6A : CF                  		rst	8
(2) 2928/     F6B : ED B0               		ldir			; (de) to (hl) until bc==0
(2) 2929/     F6D : D6 05               		sub	a,6-1
(2) 2930/     F6F : D2 61 0F            		jp	nc,.x68kloop
(2) 2931/     F72 :                     ; last block
(2) 2932/     F72 :                     .x68klast:
(2) 2933/     F72 : C6 06               		add	a,6
(2) 2934/     F74 : 4F                  		ld	c,a
(2) 2935/     F75 : DD CB 00 46         		bit	0,(ix)		; If 68k requested ROM block from here
(2) 2936/     F79 : C2 97 0F            		jp	nz,.x68klstwt
(2) 2937/     F7C :                     .x68klstcont:
(2) 2938/     F7C : CF                  		rst	8
(2) 2939/     F7D : ED B0               		ldir
(2) 2940/     F7F : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are done reading
(2) 2941/     F83 : C9                  		ret
(2) 2942/     F84 :                     
(2) 2943/     F84 :                     ; If Genesis wants to do DMA, wait here until it finishes.
(2) 2944/     F84 :                     .x68klpwt:
(2) 2945/     F84 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(2) 2946/     F88 :                     .x68kpwtlp:
(2) 2947/     F88 : CF                  		rst	8
(2) 2948/     F89 : 00                  		nop
(2) 2949/     F8A : CF                  		rst	8
(2) 2950/     F8B : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(2) 2951/     F8F : 20 F7               		jr	nz,.x68kpwtlp
(2) 2952/     F91 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(2) 2953/     F95 : 18 D3               		jr	.x68klpcont
(2) 2954/     F97 :                     
(2) 2955/     F97 :                     ; or in the last piece
(2) 2956/     F97 :                     .x68klstwt:
(2) 2957/     F97 : DD CB 01 86         		res	0,(ix+1)	; Tell 68k we are out, waiting.
(2) 2958/     F9B :                     .x68klstwtlp:
(2) 2959/     F9B : CF                  		rst	8
(2) 2960/     F9C : 00                  		nop
(2) 2961/     F9D : CF                  		rst	8
(2) 2962/     F9E : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(2) 2963/     FA2 : 20 F7               		jr	nz,.x68klstwtlp
(2) 2964/     FA4 : DD CB 01 C6         		set	0,(ix+1)	; Set Z80 read flag again, and return
(2) 2965/     FA8 : 18 D2               		jr	.x68klstcont
(2) 2966/     FAA :                     
(2) 2967/     FAA :                     ; ====================================================================
(2) 2968/     FAA :                     ; ----------------------------------------------------------------
(2) 2969/     FAA :                     ; Sound chip routines
(2) 2970/     FAA :                     ; ----------------------------------------------------------------
(2) 2971/     FAA :                     
(2) 2972/     FAA :                     ; --------------------------------------------------------
(2) 2973/     FAA :                     ; chip_env
(2) 2974/     FAA :                     ;
(2) 2975/     FAA :                     ; Process PSG and FM
(2) 2976/     FAA :                     ; --------------------------------------------------------
(2) 2977/     FAA :                     
(2) 2978/     FAA :                     ; Read PSG list backwards so it autodetects
(2) 2979/     FAA :                     ; Tone3 mode
(2) 2980/     FAA :                     
(2) 2981/     FAA :                     chip_env:
(2) 2982/     FAA : FD 21 8F 16         		ld	iy,psgcom+3		; Start from NOISE first
(2) 2983/     FAE : 21 11 7F            		ld	hl,Zpsg_ctrl
(2) 2984/     FB1 : 16 E0               		ld	d,0E0h			; PSG first ctrl command
(2) 2985/     FB3 : 1E 04               		ld	e,4			; 4 channels
(2) 2986/     FB5 :                     .vloop:
(2) 2987/     FB5 : CF                  		rst	8
(2) 2988/     FB6 : FD 4E 00            		ld	c,(iy+COM)		; c - current command
(2) 2989/     FB9 : FD 36 00 00         		ld	(iy+COM),0
(2) 2990/     FBD : CB 51               		bit	2,c			; bit 2 - stop sound
(2) 2991/     FBF : 28 17               		jr	z,.ckof
(2) 2992/     FC1 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(2) 2993/     FC5 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(2) 2994/     FC9 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(2) 2995/     FCD : 7B                  		ld	a,e
(2) 2996/     FCE : FE 04               		cp	4
(2) 2997/     FD0 : 20 06               		jr	nz,.ckof
(2) 2998/     FD2 : 3E 00               		ld	a,0
(2) 2999/     FD4 : 32 5E 1E            		ld	(psgHatMode),a
(2) 3000/     FD7 : CF                  		rst	8
(2) 3001/     FD8 :                     .ckof:
(2) 3002/     FD8 : CB 49               		bit	1,c			; bit 1 - key off
(2) 3003/     FDA : 28 19               		jr      z,.ckon
(2) 3004/     FDC : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(2) 3005/     FDF : B7                  		or	a
(2) 3006/     FE0 : 28 13               		jr	z,.ckon
(2) 3007/     FE2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2) 3008/     FE6 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(2) 3009/     FEA : 7B                  		ld	a,e
(2) 3010/     FEB : FE 04               		cp	4
(2) 3011/     FED : 20 06               		jr	nz,.ckon
(2) 3012/     FEF : 3E 00               		ld	a,0
(2) 3013/     FF1 : 32 5E 1E            		ld	(psgHatMode),a
(2) 3014/     FF4 : CF                  		rst	8
(2) 3015/     FF5 :                     .ckon:
(2) 3016/     FF5 : CB 41               		bit	0,c			; bit 0 - key on
(2) 3017/     FF7 : 28 57               		jr	z,.envproc
(2) 3018/     FF9 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(2) 3019/     FFD : 3A 5E 1E            		ld	a,(psgHatMode)		; check if using tone3 mode.
(2) 3020/    1000 : 4F                  		ld	c,a
(2) 3021/    1001 : E6 03               		and	11b
(2) 3022/    1003 : FE 03               		cp	11b
(2) 3023/    1005 : 28 24               		jr	z,.tnmode
(2) 3024/    1007 :                     .wrfreq:
(2) 3025/    1007 : 7B                  		ld	a,e
(2) 3026/    1008 : FE 04               		cp	4
(2) 3027/    100A : 28 35               		jr	z,.sethat
(2) 3028/    100C : CF                  		rst	8
(2) 3029/    100D :                     
(2) 3030/    100D : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 right bits
(2) 3031/    1010 : E6 0F               		and	00001111b
(2) 3032/    1012 : B2                  		or	d		; OR with current channel
(2) 3033/    1013 : 77                  		ld	(hl),a		; write it
(2) 3034/    1014 : FD 7E 1C            		ld	a,(iy+DTL)	; Grab LSB 4 left bits
(2) 3035/    1017 : 0F                  		rrca
(2) 3036/    1018 : 0F                  		rrca
(2) 3037/    1019 : 0F                  		rrca
(2) 3038/    101A : 0F                  		rrca
(2) 3039/    101B : E6 0F               		and	00001111b
(2) 3040/    101D : 4F                  		ld	c,a
(2) 3041/    101E : FD 7E 20            		ld	a,(iy+DTH)	; Grab MSB bits
(2) 3042/    1021 : 07                  		rlca
(2) 3043/    1022 : 07                  		rlca
(2) 3044/    1023 : 07                  		rlca
(2) 3045/    1024 : 07                  		rlca
(2) 3046/    1025 : E6 30               		and	00110000b
(2) 3047/    1027 : B1                  		or	c
(2) 3048/    1028 : 77                  		ld	(hl),a
(2) 3049/    1029 :                     
(2) 3050/    1029 : 18 1C               		jr	.nskip
(2) 3051/    102B :                     ; Tone3 mode
(2) 3052/    102B :                     .tnmode:
(2) 3053/    102B : 7B                  		ld	a,e
(2) 3054/    102C : FE 04               		cp	4			; NOISE
(2) 3055/    102E : 28 06               		jr	z,.psteal
(2) 3056/    1030 : FE 03               		cp	3			; PSG3, can't play
(2) 3057/    1032 : 28 13               		jr	z,.nskip
(2) 3058/    1034 : 18 D1               		jr	.wrfreq
(2) 3059/    1036 :                     .psteal:
(2) 3060/    1036 : CF                  		rst	8
(2) 3061/    1037 : FD 7E 1C            		ld	a,(iy+DTL)		; Steal PSG3's freq
(2) 3062/    103A : F6 C0               		or	0C0h
(2) 3063/    103C : 77                  		ld	(hl),a
(2) 3064/    103D : FD 7E 20            		ld	a,(iy+DTH)
(2) 3065/    1040 : 77                  		ld	(hl),a
(2) 3066/    1041 :                     .sethat:
(2) 3067/    1041 : CF                  		rst	8
(2) 3068/    1042 : 3A 5E 1E            		ld	a,(psgHatMode)		; write hat mode only.
(2) 3069/    1045 : B2                  		or	d
(2) 3070/    1046 : 77                  		ld	(hl),a
(2) 3071/    1047 :                     .nskip:
(2) 3072/    1047 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2) 3073/    104B : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(2) 3074/    104F : CF                  		rst	8
(2) 3075/    1050 :                     
(2) 3076/    1050 :                     ; ----------------------------
(2) 3077/    1050 :                     ; Process effects
(2) 3078/    1050 :                     ; ----------------------------
(2) 3079/    1050 :                     
(2) 3080/    1050 :                     .envproc:
(2) 3081/    1050 : CF                  		rst	8
(2) 3082/    1051 : FD 7E 18            		ld	a,(iy+MODE)
(2) 3083/    1054 : B7                  		or	a			; no modes
(2) 3084/    1055 : CA DB 10            		jp	z,.vedlp
(2) 3085/    1058 : FE 01               		cp 	001b			; Attack mode
(2) 3086/    105A : 20 2C               		jr	nz,.chk2
(2) 3087/    105C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2) 3088/    1060 : FD 46 24            		ld	b,(iy+ALV)
(2) 3089/    1063 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(2) 3090/    1066 : B7                  		or	a
(2) 3091/    1067 : 28 16               		jr	z,.atkend
(2) 3092/    1069 : 4F                  		ld	c,a			; c - attack rate
(2) 3093/    106A : 78                  		ld	a,b			; a - attack level
(2) 3094/    106B : CF                  		rst	8
(2) 3095/    106C : FD 46 24            		ld	b,(iy+ALV)		; b - OLD attack level
(2) 3096/    106F : 91                  		sub	a,c			; (attack rate) - (level)
(2) 3097/    1070 : 38 0D               		jr	c,.atkend		; if carry: already finished
(2) 3098/    1072 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(2) 3099/    1074 : B8                  		cp	b			; attack rate == level?
(2) 3100/    1075 : 38 08               		jr	c,.atkend
(2) 3101/    1077 : 28 06               		jr	z,.atkend
(2) 3102/    1079 : FD 77 04            		ld	(iy+LEV),a		; set new level
(2) 3103/    107C : CF                  		rst	8
(2) 3104/    107D : 18 5C               		jr	.vedlp
(2) 3105/    107F :                     .atkend:
(2) 3106/    107F : FD 70 04            		ld	(iy+LEV),b		; attack level = new level
(2) 3107/    1082 :                     .atkzero:
(2) 3108/    1082 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(2) 3109/    1086 : 18 53               		jr	.vedlp
(2) 3110/    1088 :                     .chk2:
(2) 3111/    1088 :                     
(2) 3112/    1088 : FE 02               		cp	010b			; Decay mode
(2) 3113/    108A : 20 31               		jr	nz,.chk4
(2) 3114/    108C :                     .dectmr:
(2) 3115/    108C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2) 3116/    1090 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(2) 3117/    1093 : FD 46 10            		ld	b,(iy+SLV)		; b - Sustain
(2) 3118/    1096 : B8                  		cp	b
(2) 3119/    1097 : 38 0D               		jr	c,.dkadd		; if carry: add
(2) 3120/    1099 : 28 18               		jr	z,.dkyend		; if zero:  finish
(2) 3121/    109B : CF                  		rst	8
(2) 3122/    109C : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(2) 3123/    109F : 38 12               		jr	c,.dkyend		; finish if wraped.
(2) 3124/    10A1 : B8                  		cp	b			; compare level
(2) 3125/    10A2 : 38 0F               		jr	c,.dkyend		; and finish
(2) 3126/    10A4 : 18 08               		jr	.dksav
(2) 3127/    10A6 :                     .dkadd:
(2) 3128/    10A6 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(2) 3129/    10A9 : 38 08               		jr	c,.dkyend		; finish if wraped.
(2) 3130/    10AB : B8                  		cp	b			; compare level
(2) 3131/    10AC : 30 05               		jr	nc,.dkyend
(2) 3132/    10AE :                     .dksav:
(2) 3133/    10AE : FD 77 04            		ld	(iy+LEV),a		; save new level
(2) 3134/    10B1 : 18 28               		jr	.vedlp
(2) 3135/    10B3 :                     .dkyend:
(2) 3136/    10B3 : CF                  		rst	8
(2) 3137/    10B4 : FD 70 04            		ld	(iy+LEV),b		; save last attack
(2) 3138/    10B7 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(2) 3139/    10BB : 18 1E               		jr	.vedlp
(2) 3140/    10BD :                     .chk4:
(2) 3141/    10BD : FE 04               		cp	100b			; Sustain phase
(2) 3142/    10BF : 20 1A               		jr	nz,.vedlp
(2) 3143/    10C1 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(2) 3144/    10C5 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(2) 3145/    10C8 : CF                  		rst	8
(2) 3146/    10C9 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(2) 3147/    10CC : 38 05               		jr	c,.killenv		; release done
(2) 3148/    10CE : FD 77 04            		ld	(iy+LEV),a		; set new Level
(2) 3149/    10D1 : 18 08               		jr	.vedlp
(2) 3150/    10D3 :                     .killenv:
(2) 3151/    10D3 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(2) 3152/    10D7 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(2) 3153/    10DB :                     .vedlp:
(2) 3154/    10DB : FD 7E 28            		ld	a,(iy+FLG)
(2) 3155/    10DE : B7                  		or	a
(2) 3156/    10DF : 28 1E               		jr	z,.noupd
(2) 3157/    10E1 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(2) 3158/    10E5 : CF                  		rst	8
(2) 3159/    10E6 : FD 7E 04            		ld	a,(iy+LEV)	; a - Level
(2) 3160/    10E9 : FD 86 30            		add	a,(iy+PVOL)	; Level + master volume
(2) 3161/    10EC : 30 02               		jr	nc,.vlmuch
(2) 3162/    10EE : 3E FF               		ld	a,-1
(2) 3163/    10F0 :                     .vlmuch:
(2) 3164/    10F0 : CB 3F               		srl	a		; (Level >> 4)
(2) 3165/    10F2 : CB 3F               		srl	a
(2) 3166/    10F4 : CB 3F               		srl	a
(2) 3167/    10F6 : CF                  		rst	8
(2) 3168/    10F7 : CB 3F               		srl	a
(2) 3169/    10F9 : E6 0F               		and	00001111b
(2) 3170/    10FB : F6 90               		or	90h		; Set volume-set mode
(2) 3171/    10FD : B2                  		or	d		; add current channel
(2) 3173/    10FE : 77                  		ld	(hl),a		; Write volume
(2) 3175/    10FF :                     
(2) 3176/    10FF :                     .noupd:
(2) 3177/    10FF : FD 2B               		dec	iy		; next COM to check
(2) 3178/    1101 : 7A                  		ld	a,d
(2) 3179/    1102 : CF                  		rst	8
(2) 3180/    1103 : D6 20               		sub	a,20h		; next PSG (backwards)
(2) 3181/    1105 : 57                  		ld	d,a
(2) 3182/    1106 : 1D                  		dec	e
(2) 3183/    1107 : C2 B5 0F            		jp	nz,.vloop
(2) 3184/    110A :                     
(2) 3185/    110A :                     ; ----------------------------
(2) 3186/    110A :                     ; FM section
(2) 3187/    110A :                     ; ----------------------------
(2) 3188/    110A :                     
(2) 3189/    110A :                     	; Read FM channels
(2) 3190/    110A :                     	; iy - FM com
(2) 3191/    110A :                     	; ix - FM current instrument data
(2) 3192/    110A :                     	;  c - FM channel ID
(2) 3193/    110A : FD 21 68 16         		ld	iy,fmcom
(2) 3194/    110E : DD 21 C0 16         		ld	ix,fmins_com
(2) 3195/    1112 : 01 00 05            		ld	bc,0500h
(2) 3196/    1115 : C5                  .nextfm_1:	push	bc
(2) 3197/    1116 : CD 6C 11            		call	.fm_chnl	; Channel 1
(2) 3198/    1119 : C1                  		pop	bc
(2) 3199/    111A : 11 28 00            		ld	de,28h
(2) 3200/    111D : DD 19               		add	ix,de
(2) 3201/    111F : FD 23               		inc	iy
(2) 3202/    1121 : CF                  		rst	8
(2) 3203/    1122 : 0C                  		inc	c
(2) 3204/    1123 : 79                  		ld	a,c
(2) 3205/    1124 : FE 03               		cp	3		; c == 3?
(2) 3206/    1126 : 20 02               		jr	nz,.nomidc
(2) 3207/    1128 : 0C                  		inc	c
(2) 3208/    1129 : CF                  		rst	8
(2) 3209/    112A :                     .nomidc:
(2) 3210/    112A : 10 E9               		djnz	.nextfm_1
(2) 3211/    112C :                     
(2) 3212/    112C :                     	; Special check for Channel 6
(2) 3213/    112C : 3A BC 17            		ld	a,(daccom)	; Channel 6 / DAC
(2) 3214/    112F : 5F                  		ld	e,a
(2) 3215/    1130 : AF                  		xor	a
(2) 3216/    1131 : 32 BC 17            		ld	(daccom),a
(2) 3217/    1134 : CB 43               		bit	0,e		; WAVE sample request
(2) 3218/    1136 : 20 21               		jr	nz,.req_dac
(2) 3219/    1138 : CB 63               		bit	4,e
(2) 3220/    113A : 20 2A               		jr	nz,.req_pitch
(2) 3221/    113C : CF                  		rst	8
(2) 3222/    113D : CB 53               		bit	2,e		; key-cut?
(2) 3223/    113F : C2 1E 13            		jp	nz,dac_off
(2) 3224/    1142 : CB 4B               		bit	1,e		; key-off?
(2) 3225/    1144 : C0                  		ret	nz
(2) 3226/    1145 : 3A 08 00            		ld 	a,(dac_me)	; manually check if
(2) 3227/    1148 : FE D9               		cp	zopcExx		; WAVE playback is active
(2) 3228/    114A : C8                  		ret	z
(2) 3229/    114B : 11 28 00            		ld	de,28h
(2) 3230/    114E : DD 19               		add	ix,de
(2) 3231/    1150 : CF                  		rst	8
(2) 3232/    1151 : DD 7E 00            		ld	a,(ix)
(2) 3233/    1154 : FD 23               		inc	iy
(2) 3234/    1156 : 0C                  		inc	c
(2) 3235/    1157 : 18 13               		jr	.fm_chnl			; Channel 6 (normal)
(2) 3236/    1159 :                     .req_dac:
(2) 3237/    1159 : 16 B6               		ld	d,0B6h			; Panning for DAC
(2) 3238/    115B : 3A 7F 16            		ld	a,((fmcom+5)+FMPAN)	; Reuse FM6's panning
(2) 3239/    115E : 1E C0               		ld	e,11000000b
(2) 3240/    1160 : CD FE 12            		call	fm_send_2
(2) 3241/    1163 : C3 33 13            		jp	dac_play		; Set playback
(2) 3242/    1166 :                     .req_pitch:
(2) 3243/    1166 : D9                  		exx
(2) 3244/    1167 : 2A 54 1E            		ld	hl,(wave_Pitch)
(2) 3245/    116A : D9                  		exx
(2) 3246/    116B :                     ; 		bit	4,c
(2) 3247/    116B :                     ; 		ret	nz
(2) 3248/    116B :                     ; 		exx
(2) 3249/    116B :                     ; 		push	de
(2) 3250/    116B :                     ; 		exx
(2) 3251/    116B :                     ; 		pop	hl
(2) 3252/    116B :                     ; 		rst	8
(2) 3253/    116B :                     ; 		add	hl,de
(2) 3254/    116B :                     ; 		push	hl
(2) 3255/    116B :                     ; 		exx
(2) 3256/    116B :                     ; 		pop	de
(2) 3257/    116B :                     ; 		exx
(2) 3258/    116B : C9                  		ret
(2) 3259/    116C :                     
(2) 3260/    116C :                     ; ----------------------------------------
(2) 3261/    116C :                     ; Control current FM channel
(2) 3262/    116C :                     ;
(2) 3263/    116C :                     ; iy - fmcom
(2) 3264/    116C :                     ; ix - Instrument data pointer
(2) 3265/    116C :                     ;  c - FM chip ID
(2) 3266/    116C :                     ; ----------------------------------------
(2) 3267/    116C :                     
(2) 3268/    116C :                     	; 0pvi 0cop
(2) 3269/    116C :                     	; pvi - update bits:
(2) 3270/    116C :                     	;      volume(v)
(2) 3271/    116C :                     	;      instrument(i)
(2) 3272/    116C :                     	;      panning(p)
(2) 3273/    116C :                     	;
(2) 3274/    116C :                     	; c/o/p key cut, key off, key on
(2) 3275/    116C :                     .fm_chnl:
(2) 3276/    116C : FD 7E 00            		ld	a,(iy)		; Get comm bits
(2) 3277/    116F : B7                  		or	a
(2) 3278/    1170 : C8                  		ret	z
(2) 3279/    1171 : FD 36 00 00         		ld	(iy),0		; Reset
(2) 3280/    1175 : CB 57               		bit	2,a		; Key-cut (010b) bit?
(2) 3281/    1177 : C2 FF 11            		jp	nz,.fm_keycut
(2) 3282/    117A : CB 4F               		bit	1,a		; Key-off (100b) bit?
(2) 3283/    117C : C2 14 12            		jp	nz,.fm_keyoff
(2) 3284/    117F : 47                  		ld	b,a		; b - other update bits
(2) 3285/    1180 : 79                  		ld	a,c		; check for Channel 6
(2) 3286/    1181 : FE 06               		cp	6
(2) 3287/    1183 : CC 1E 13            		call	z,dac_off	; auto-mute WAVE playback
(2) 3288/    1186 : CF                  		rst	8
(2) 3289/    1187 : CB 60               		bit	4,b		; Instrument-update bit?  (%0001xxxx)
(2) 3290/    1189 : C4 34 12            		call	nz,.fm_insupd
(2) 3291/    118C : CB 68               		bit	5,b		; Volume-update bit? (%0010xxxx)
(2) 3292/    118E : C4 99 12            		call	nz,.fm_volupd	;
(2) 3293/    1191 : CB 70               		bit	6,b		; Panning update bit? (%0100xxxx)
(2) 3294/    1193 : C4 1B 12            		call	nz,.fm_panupd
(2) 3295/    1196 : CB 40               		bit	0,b		; Key-on (001b) bit?
(2) 3296/    1198 : C8                  		ret	z
(2) 3297/    1199 :                     	; freq update
(2) 3298/    1199 :                     	; all this code is for OP4 (if FM3 is in special)
(2) 3299/    1199 : CF                  		rst	8
(2) 3300/    119A : 79                  		ld	a,c
(2) 3301/    119B : E6 03               		and	11b
(2) 3302/    119D : F6 A4               		or	0A4h
(2) 3303/    119F : 57                  		ld	d,a
(2) 3304/    11A0 : FD 5E 18            		ld	e,(iy+FMFRQH)
(2) 3305/    11A3 : CB 51               		bit	2,c
(2) 3306/    11A5 : C4 FE 12            		call	nz,fm_send_2
(2) 3307/    11A8 : CC F3 12            		call	z,fm_send_1
(2) 3308/    11AB : CF                  		rst	8
(2) 3309/    11AC : 15                  		dec	d
(2) 3310/    11AD : 15                  		dec	d
(2) 3311/    11AE : 15                  		dec	d
(2) 3312/    11AF : 15                  		dec	d
(2) 3313/    11B0 : FD 5E 1E            		ld	e,(iy+FMFRQL)
(2) 3314/    11B3 : CB 51               		bit	2,c
(2) 3315/    11B5 : C4 FE 12            		call	nz,fm_send_2
(2) 3316/    11B8 : CC F3 12            		call	z,fm_send_1
(2) 3317/    11BB : CF                  		rst	8
(2) 3318/    11BC :                     
(2) 3319/    11BC : 79                  		ld	a,c
(2) 3320/    11BD : E6 03               		and	11b
(2) 3321/    11BF : F6 B0               		or	0B0h
(2) 3322/    11C1 : 57                  		ld	d,a
(2) 3323/    11C2 : DD 5E 1C            		ld	e,(ix+1Ch)
(2) 3324/    11C5 : CB 51               		bit	2,c
(2) 3325/    11C7 : C4 FE 12            		call	nz,fm_send_2
(2) 3326/    11CA : CC F3 12            		call	z,fm_send_1
(2) 3327/    11CD : 14                  		inc	d
(2) 3328/    11CE : 14                  		inc	d
(2) 3329/    11CF : CF                  		rst	8
(2) 3330/    11D0 : 14                  		inc	d
(2) 3331/    11D1 : 14                  		inc	d
(2) 3332/    11D2 :                     ; 		call	.fm_panset
(2) 3333/    11D2 :                     
(2) 3334/    11D2 :                     	; For Special FM3 mode it just copy-pastes regs
(2) 3335/    11D2 :                     	; from a separate list
(2) 3336/    11D2 : 79                  		ld	a,c		; FM3 special check
(2) 3337/    11D3 : FE 02               		cp	2
(2) 3338/    11D5 : 20 19               		jr	nz,.notfm3
(2) 3339/    11D7 : 3A 5F 1E            		ld	a,(fmSpcMode)
(2) 3340/    11DA : E6 40               		and	01000000b
(2) 3341/    11DC : B7                  		or	a
(2) 3342/    11DD : 28 11               		jr	z,.notfm3
(2) 3343/    11DF : CF                  		rst	8
(2) 3344/    11E0 : 21 B0 17            		ld	hl,fm3reg
(2) 3345/    11E3 : 06 06               		ld	b,3*2
(2) 3346/    11E5 :                     .copyops:
(2) 3347/    11E5 : 5E                  		ld	e,(hl)
(2) 3348/    11E6 : 23                  		inc	hl
(2) 3349/    11E7 : 56                  		ld	d,(hl)
(2) 3350/    11E8 : 23                  		inc	hl
(2) 3351/    11E9 : 00                  		nop
(2) 3352/    11EA : CF                  		rst	8
(2) 3353/    11EB : CD F3 12            		call	fm_send_1
(2) 3354/    11EE : 10 F5               		djnz	.copyops
(2) 3355/    11F0 :                     .notfm3:
(2) 3356/    11F0 :                     
(2) 3357/    11F0 : CF                  		rst	8
(2) 3358/    11F1 : 16 28               		ld	d,28h		; Keys
(2) 3359/    11F3 : DD 7E 1F            		ld	a,(ix+01Fh)	; a - Read this ins keys
(2) 3360/    11F6 : FD 46 06            		ld	b,(iy+FMKEYS)	; b - ALLOWED bits from fmcom
(2) 3361/    11F9 : A0                  		and	b
(2) 3362/    11FA : B1                  		or	c
(2) 3363/    11FB : 5F                  		ld	e,a
(2) 3367/    11FC : C3 F3 12            		jp	fm_send_1
(2) 3368/    11FF :                     
(2) 3369/    11FF :                     .fm_keycut:
(2) 3370/    11FF : 79                  		ld	a,c
(2) 3371/    1200 : E6 03               		and	11b
(2) 3372/    1202 : F6 B4               		or	0B4h
(2) 3373/    1204 : 57                  		ld	d,a
(2) 3374/    1205 : CF                  		rst	8
(2) 3375/    1206 : DD 7E 1D            		ld	a,(ix+1Dh)
(2) 3376/    1209 : E6 07               		and	00000111b
(2) 3377/    120B : 5F                  		ld	e,a
(2) 3378/    120C : CB 51               		bit	2,c
(2) 3379/    120E : CC F3 12            		call	z,fm_send_1
(2) 3380/    1211 : C4 FE 12            		call	nz,fm_send_2
(2) 3381/    1214 :                     .fm_keyoff:
(2) 3382/    1214 : CF                  		rst	8
(2) 3383/    1215 : 59                  		ld	e,c
(2) 3384/    1216 : 16 28               		ld	d,28h
(2) 3385/    1218 : C3 F3 12            		jp	fm_send_1
(2) 3386/    121B :                     ; d - 0B4h+
(2) 3387/    121B :                     .fm_panupd:
(2) 3388/    121B : 79                  		ld	a,c
(2) 3389/    121C : E6 03               		and	11b
(2) 3390/    121E : F6 B4               		or	0B4h
(2) 3391/    1220 : 57                  		ld	d,a
(2) 3392/    1221 :                     .fm_panset:
(2) 3393/    1221 : DD 5E 1D            		ld	e,(ix+1Dh)
(2) 3394/    1224 : FD 7E 12            		ld	a,(iy+FMPAN)
(2) 3395/    1227 : E6 C0               		and	11000000b
(2) 3396/    1229 : B3                  		or	e
(2) 3397/    122A : 5F                  		ld	e,a
(2) 3398/    122B : CB 51               		bit	2,c
(2) 3399/    122D : C4 FE 12            		call	nz,fm_send_2
(2) 3400/    1230 : CC F3 12            		call	z,fm_send_1
(2) 3401/    1233 : C9                  		ret
(2) 3402/    1234 :                     
(2) 3403/    1234 :                     ; CPU-intense
(2) 3404/    1234 :                     ; only call this if needed
(2) 3405/    1234 :                     .fm_insupd:
(2) 3406/    1234 : C5                  		push	bc
(2) 3407/    1235 : CD 14 12            		call	.fm_keyoff		; restart chip channel
(2) 3408/    1238 : E7                  		rst	20h			; <--- TODO: si se pone lento, quitarlo
(2) 3409/    1239 : DD E5               		push	ix			; copy ix to hl
(2) 3410/    123B : E1                  		pop	hl
(2) 3411/    123C : 79                  		ld	a,c
(2) 3412/    123D : E6 03               		and	011b
(2) 3413/    123F : F6 30               		or	30h
(2) 3414/    1241 : CF                  		rst	8
(2) 3415/    1242 : 57                  		ld	d,a
(2) 3416/    1243 : 06 1C               		ld	b,4*7
(2) 3417/    1245 :                     .copy_1:
(2) 3418/    1245 : CF                  		rst	8
(2) 3419/    1246 : 5E                  		ld	e,(hl)
(2) 3420/    1247 : CB 51               		bit	2,c
(2) 3421/    1249 : CC F3 12            		call	z,fm_send_1
(2) 3422/    124C : C4 FE 12            		call	nz,fm_send_2
(2) 3423/    124F : 23                  		inc	hl
(2) 3424/    1250 : 14                  		inc	d
(2) 3425/    1251 : CF                  		rst	8
(2) 3426/    1252 : 00                  		nop
(2) 3427/    1253 : 14                  		inc	d
(2) 3428/    1254 : 14                  		inc	d
(2) 3429/    1255 : 14                  		inc	d
(2) 3430/    1256 : 10 ED               		djnz	.copy_1
(2) 3431/    1258 : 11 04 00            		ld	de,4		; skip AMS, FMS,
(2) 3432/    125B : 19                  		add	hl,de		; old FM3 check (oops) and keys
(2) 3433/    125C : 79                  		ld	a,c		; check for Channel 3
(2) 3434/    125D : FE 02               		cp	2
(2) 3435/    125F : 20 36               		jr	nz,.fm_ins_ex
(2) 3436/    1261 : CF                  		rst	8
(2) 3437/    1262 : 3A 5F 1E            		ld	a,(fmSpcMode)	; Is it in special mode?
(2) 3438/    1265 : CB 77               		bit	6,a
(2) 3439/    1267 : 28 2E               		jr	z,.fm_ins_ex
(2) 3440/    1269 : DD E5               		push	ix
(2) 3441/    126B : DD 21 B0 17         		ld	ix,fm3reg
(2) 3442/    126F : 06 03               		ld	b,3
(2) 3443/    1271 :                     .copyops3:
(2) 3444/    1271 : 56                  		ld	d,(hl)		; Read OP1-3 freqs
(2) 3445/    1272 : 23                  		inc	hl
(2) 3446/    1273 : CF                  		rst	8
(2) 3447/    1274 : 5E                  		ld	e,(hl)
(2) 3448/    1275 : 23                  		inc	hl
(2) 3449/    1276 : DD 72 00            		ld	(ix),d
(2) 3450/    1279 : DD 73 02            		ld	(ix+2),e
(2) 3451/    127C : DD 23               		inc	ix
(2) 3452/    127E : CF                  		rst	8
(2) 3453/    127F : DD 23               		inc	ix
(2) 3454/    1281 : DD 23               		inc	ix
(2) 3455/    1283 : DD 23               		inc	ix
(2) 3456/    1285 : 10 EA               		djnz	.copyops3
(2) 3457/    1287 : DD 21 6A 16         		ld	ix,fmcom+2	; Read OP4 freq
(2) 3458/    128B : 56                  		ld	d,(hl)
(2) 3459/    128C : 23                  		inc	hl
(2) 3460/    128D : CF                  		rst	8
(2) 3461/    128E : 5E                  		ld	e,(hl)
(2) 3462/    128F : DD 72 18            		ld	(ix+FMFRQH),d
(2) 3463/    1292 : DD 73 1E            		ld	(ix+FMFRQL),e
(2) 3464/    1295 : DD E1               		pop	ix
(2) 3465/    1297 :                     .fm_ins_ex:
(2) 3466/    1297 : C1                  		pop	bc
(2) 3467/    1298 : C9                  		ret
(2) 3468/    1299 :                     
(2) 3469/    1299 :                     ; b - Volume decrement
(2) 3470/    1299 :                     ; c - Channel id
(2) 3471/    1299 :                     ; d - 40h+ base reg
(2) 3472/    1299 :                     ; h - Algorithm
(2) 3473/    1299 :                     .fm_volupd:
(2) 3474/    1299 : C5                  		push	bc
(2) 3475/    129A : FD 46 0C            		ld	b,(iy+FMVOL)
(2) 3476/    129D :                     .fm_chnlvol:
(2) 3477/    129D : DD E5               		push	ix
(2) 3478/    129F : DD 7E 1C            		ld	a,(ix+1Ch)
(2) 3479/    12A2 : E6 07               		and	111b
(2) 3480/    12A4 : 67                  		ld	h,a
(2) 3481/    12A5 : 11 04 00            		ld	de,4
(2) 3482/    12A8 : DD 19               		add	ix,de
(2) 3483/    12AA : 79                  		ld	a,c
(2) 3484/    12AB : E6 03               		and	11b
(2) 3485/    12AD : CF                  		rst	8
(2) 3486/    12AE : F6 40               		or	40h
(2) 3487/    12B0 : 57                  		ld	d,a
(2) 3488/    12B1 : 7C                  		ld	a,h		; Check 40h
(2) 3489/    12B2 : FE 07               		cp	7		; Algorithm == 07h?
(2) 3490/    12B4 : CC DF 12            		call	z,.do_vol
(2) 3491/    12B7 : 7A                  		ld	a,d
(2) 3492/    12B8 : C6 04               		add	a,4
(2) 3493/    12BA : CF                  		rst	8
(2) 3494/    12BB : 57                  		ld	d,a
(2) 3495/    12BC : DD 23               		inc	ix
(2) 3496/    12BE : 7C                  		ld	a,h		; Check 44h
(2) 3497/    12BF : FE 05               		cp	5		; Algorithm > 05h?
(2) 3498/    12C1 : D4 DF 12            		call	nc,.do_vol
(2) 3499/    12C4 : 7A                  		ld	a,d
(2) 3500/    12C5 : C6 04               		add	a,4
(2) 3501/    12C7 : 57                  		ld	d,a
(2) 3502/    12C8 : DD 23               		inc	ix
(2) 3503/    12CA : CF                  		rst	8
(2) 3504/    12CB : 7C                  		ld	a,h		; Check 48h
(2) 3505/    12CC : FE 04               		cp	4		; Algorithm > 04h?
(2) 3506/    12CE : D4 DF 12            		call	nc,.do_vol
(2) 3507/    12D1 : 7A                  		ld	a,d
(2) 3508/    12D2 : C6 04               		add	a,4
(2) 3509/    12D4 : 57                  		ld	d,a
(2) 3510/    12D5 : DD 23               		inc	ix
(2) 3511/    12D7 : CD DF 12            		call	.do_vol		; Do 4Ch
(2) 3512/    12DA : DD E1               		pop	ix
(2) 3513/    12DC : C1                  		pop	bc
(2) 3514/    12DD : CF                  		rst	8
(2) 3515/    12DE : C9                  		ret
(2) 3516/    12DF :                     .do_vol:
(2) 3517/    12DF : DD 7E 00            		ld	a,(ix)
(2) 3518/    12E2 : 80                  		add	a,b
(2) 3519/    12E3 : FE 7F               		cp	7Fh
(2) 3520/    12E5 : 38 02               		jr	c,.vmuch
(2) 3521/    12E7 : 3E 7F               		ld	a,7Fh
(2) 3522/    12E9 :                     .vmuch:
(2) 3523/    12E9 : 5F                  		ld	e,a
(2) 3524/    12EA : CB 51               		bit	2,c
(2) 3525/    12EC : CC F3 12            		call	z,fm_send_1
(2) 3526/    12EF : C4 FE 12            		call	nz,fm_send_2
(2) 3527/    12F2 : C9                  		ret
(2) 3528/    12F3 :                     
(2) 3529/    12F3 :                     ; ---------------------------------------------
(2) 3530/    12F3 :                     ; FM send registers
(2) 3531/    12F3 :                     ;
(2) 3532/    12F3 :                     ; Input:
(2) 3533/    12F3 :                     ; d - ctrl
(2) 3534/    12F3 :                     ; e - data
(2) 3535/    12F3 :                     ; ---------------------------------------------
(2) 3536/    12F3 :                     
(2) 3537/    12F3 :                     ; Channels 1-3 and global registers
(2) 3538/    12F3 :                     fm_send_1:
(2) 3539/    12F3 : 7A                  		ld	a,d
(2) 3540/    12F4 : 32 00 40            		ld	(Zym_ctrl_1),a
(2) 3541/    12F7 : 00                  		nop
(2) 3542/    12F8 : 7B                  		ld	a,e
(2) 3543/    12F9 : 32 01 40            		ld	(Zym_data_1),a
(2) 3544/    12FC : 00                  		nop
(2) 3545/    12FD : C9                  		ret
(2) 3546/    12FE :                     ; Channels 4-6
(2) 3547/    12FE :                     fm_send_2:
(2) 3548/    12FE : 7A                  		ld	a,d
(2) 3549/    12FF : 32 02 40            		ld	(Zym_ctrl_2),a
(2) 3550/    1302 : 00                  		nop
(2) 3551/    1303 : 7B                  		ld	a,e
(2) 3552/    1304 : 32 03 40            		ld	(Zym_data_2),a
(2) 3553/    1307 : 00                  		nop
(2) 3554/    1308 : C9                  		ret
(2) 3555/    1309 :                     
(2) 3556/    1309 :                     ; --------------------------------------------------------
(2) 3557/    1309 :                     ; brute-force WAVE ON/OFF playback
(2) 3558/    1309 :                     ; --------------------------------------------------------
(2) 3559/    1309 :                     
(2) 3560/    1309 :                     dac_on:
(2) 3561/    1309 : 3E 2B               		ld	a,2Bh
(2) 3562/    130B : 32 00 40            		ld	(Zym_ctrl_1),a
(2) 3563/    130E : 3E 80               		ld	a,80h
(2) 3564/    1310 : 32 01 40            		ld	(Zym_data_1),a
(2) 3565/    1313 : 3E D9               		ld 	a,zopcExx
(2) 3566/    1315 : 32 08 00            		ld	(dac_me),a
(2) 3567/    1318 : 3E F5               		ld 	a,zopcPushAf
(2) 3568/    131A : 32 20 00            		ld	(dac_fill),a
(2) 3569/    131D : C9                  		ret
(2) 3570/    131E :                     dac_off:
(2) 3571/    131E : 3E 2B               		ld	a,2Bh
(2) 3572/    1320 : 32 00 40            		ld	(Zym_ctrl_1),a
(2) 3573/    1323 : 3E 00               		ld	a,00h
(2) 3574/    1325 : 32 01 40            		ld	(Zym_data_1),a
(2) 3575/    1328 : 3E C9               		ld 	a,zopcRet
(2) 3576/    132A : 32 08 00            		ld	(dac_me),a
(2) 3577/    132D : 3E C9               		ld 	a,zopcRet
(2) 3578/    132F : 32 20 00            		ld	(dac_fill),a
(2) 3579/    1332 : C9                  		ret
(2) 3580/    1333 :                     
(2) 3581/    1333 :                     ; --------------------------------------------------------
(2) 3582/    1333 :                     ; dac_play
(2) 3583/    1333 :                     ;
(2) 3584/    1333 :                     ; Plays a new sample
(2) 3585/    1333 :                     ; --------------------------------------------------------
(2) 3586/    1333 :                     
(2) 3587/    1333 :                     dac_play:
(2) 3588/    1333 : F3                  		di
(2) 3589/    1334 : CD 1E 13            		call	dac_off
(2) 3590/    1337 : D9                  		exx				; get exx regs
(2) 3591/    1338 : 01 1B 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(2) 3592/    133B : ED 5B 54 1E         		ld	de,(wave_Pitch)		; de - Pitch
(2) 3593/    133F : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(2) 3594/    1342 : D9                  		exx				; move them back
(2) 3595/    1343 : 2A 4B 1E            		ld	hl,(wave_Start)
(2) 3596/    1346 : 3A 4D 1E            		ld 	a,(wave_Start+2)
(2) 3597/    1349 : 22 57 1E            		ld	(dDacPntr),hl
(2) 3598/    134C : 32 59 1E            		ld	(dDacPntr+2),a
(2) 3599/    134F : 2A 4E 1E            		ld	hl,(wave_Len)
(2) 3600/    1352 : 3A 50 1E            		ld 	a,(wave_Len+2)
(2) 3601/    1355 : 22 5A 1E            		ld	(dDacCntr),hl
(2) 3602/    1358 : 32 5C 1E            		ld	(dDacCntr+2),a
(2) 3603/    135B : AF                  		xor	a
(2) 3604/    135C : 32 5D 1E            		ld	(dDacFifoMid),a
(2) 3605/    135F : CD 67 13            		call	dac_firstfill
(2) 3606/    1362 : CD 09 13            		call	dac_on
(2) 3607/    1365 : FB                  		ei
(2) 3608/    1366 : C9                  		ret
(2) 3609/    1367 :                     
(2) 3610/    1367 :                     ; --------------------------------------------------------
(2) 3611/    1367 :                     
(2) 3612/    1367 :                     ; First wave fill
(2) 3613/    1367 :                     dac_firstfill:
(2) 3614/    1367 : CD A0 0E            		call	get_tick
(2) 3615/    136A : F5                  		push	af
(2) 3616/    136B :                     
(2) 3617/    136B :                     ; Wave refill request
(2) 3618/    136B :                     ; Got this from GEMS, but I changed it to play
(2) 3619/    136B :                     ; larger samples (7FFFFFh maximum)
(2) 3620/    136B :                     dac_refill:
(2) 3621/    136B : CF                  		rst	8
(2) 3622/    136C : C5                  		push	bc
(2) 3623/    136D : D5                  		push	de
(2) 3624/    136E : E5                  		push	hl
(2) 3625/    136F : 3A 56 1E            		ld	a,(wave_Flags)
(2) 3626/    1372 : FE 07               		cp	111b
(2) 3627/    1374 : D2 2B 14            		jp	nc,.FDF7
(2) 3628/    1377 : 3A 5C 1E            		ld	a,(dDacCntr+2)	; Last bytes
(2) 3629/    137A : 2A 5A 1E            		ld	hl,(dDacCntr)
(2) 3630/    137D : 01 80 00            		ld	bc,80h
(2) 3631/    1380 : 37                  		scf
(2) 3632/    1381 : 3F                  		ccf
(2) 3633/    1382 : ED 42               		sbc	hl,bc
(2) 3634/    1384 : DE 00               		sbc	a,0
(2) 3635/    1386 : 32 5C 1E            		ld	(dDacCntr+2),a
(2) 3636/    1389 : 22 5A 1E            		ld	(dDacCntr),hl
(2) 3637/    138C : 16 1B               		ld	d,dWaveBuff>>8
(2) 3638/    138E : B7                  		or	a
(2) 3639/    138F : FA B9 13            		jp	m,.dac_over
(2) 3640/    1392 :                     .keepcntr:
(2) 3641/    1392 : 3A 5D 1E            		ld	a,(dDacFifoMid)
(2) 3642/    1395 : 5F                  		ld	e,a
(2) 3643/    1396 : C6 80               		add 	a,80h
(2) 3644/    1398 : 32 5D 1E            		ld	(dDacFifoMid),a
(2) 3645/    139B : 2A 57 1E            		ld	hl,(dDacPntr)
(2) 3646/    139E : 3A 59 1E            		ld	a,(dDacPntr+2)
(2) 3647/    13A1 : CD 0F 0F            		call	transferRom
(2) 3648/    13A4 : 2A 57 1E            		ld	hl,(dDacPntr)
(2) 3649/    13A7 : 3A 59 1E            		ld	a,(dDacPntr+2)
(2) 3650/    13AA : 01 80 00            		ld	bc,80h
(2) 3651/    13AD : 09                  		add	hl,bc
(2) 3652/    13AE : CE 00               		adc	a,0
(2) 3653/    13B0 : 22 57 1E            		ld	(dDacPntr),hl
(2) 3654/    13B3 : 32 59 1E            		ld	(dDacPntr+2),a
(2) 3655/    13B6 : C3 2E 14            		jp	.FDFreturn
(2) 3656/    13B9 :                     
(2) 3657/    13B9 :                     ; if wav's len-timer finished:
(2) 3658/    13B9 :                     .dac_over:
(2) 3659/    13B9 : 16 1B               		ld	d,dWaveBuff>>8
(2) 3660/    13BB : 3A 56 1E            		ld	a,(wave_Flags)
(2) 3661/    13BE : E6 01               		and	01b
(2) 3662/    13C0 : B7                  		or	a
(2) 3663/    13C1 : C2 E4 13            		jp	nz,.FDF72
(2) 3664/    13C4 : 7D                  		ld	a,l
(2) 3665/    13C5 : C6 80               		add	a,80h
(2) 3666/    13C7 : 4F                  		ld	c,a
(2) 3667/    13C8 : 06 00               		ld	b,0
(2) 3668/    13CA : C5                  		push	bc
(2) 3669/    13CB : 3A 5D 1E            		ld	a,(dDacFifoMid)
(2) 3670/    13CE : 5F                  		ld	e,a
(2) 3671/    13CF : C6 80               		add	a,80h
(2) 3672/    13D1 : 32 5D 1E            		ld	(dDacFifoMid),a
(2) 3673/    13D4 : C1                  		pop	bc			; C <- # just xfered
(2) 3674/    13D5 : 79                  		ld	a,c
(2) 3675/    13D6 : B0                  		or	b
(2) 3676/    13D7 : 28 52               		jr	z,.FDF7
(2) 3677/    13D9 : 2A 57 1E            		ld	hl,(dDacPntr)
(2) 3678/    13DC : 3A 59 1E            		ld	a,(dDacPntr+2)
(2) 3679/    13DF : CD 0F 0F            		call	transferRom
(2) 3680/    13E2 : 18 47               		jr	.FDF7
(2) 3681/    13E4 :                     .FDF72:
(2) 3682/    13E4 :                     
(2) 3683/    13E4 :                     	; loop sample
(2) 3684/    13E4 : C5                  		push	bc
(2) 3685/    13E5 : D5                  		push	de
(2) 3686/    13E6 : 3A 53 1E            		ld	a,(wave_Loop+2)
(2) 3687/    13E9 : 4F                  		ld	c,a
(2) 3688/    13EA : ED 5B 51 1E         		ld	de,(wave_Loop)
(2) 3689/    13EE : 2A 4B 1E            		ld	hl,(wave_Start)
(2) 3690/    13F1 : 3A 4D 1E            		ld 	a,(wave_Start+2)
(2) 3691/    13F4 : 81                  		add	a,c
(2) 3692/    13F5 : 19                  		add	hl,de
(2) 3693/    13F6 : CE 00               		adc	a,0
(2) 3694/    13F8 : 22 57 1E            		ld	(dDacPntr),hl
(2) 3695/    13FB : 32 59 1E            		ld	(dDacPntr+2),a
(2) 3696/    13FE : 2A 4E 1E            		ld	hl,(wave_Len)
(2) 3697/    1401 : 3A 50 1E            		ld 	a,(wave_Len+2)
(2) 3698/    1404 : 91                  		sub	a,c
(2) 3699/    1405 : 37                  		scf
(2) 3700/    1406 : 3F                  		ccf
(2) 3701/    1407 : ED 52               		sbc	hl,de
(2) 3702/    1409 : DE 00               		sbc	a,0
(2) 3703/    140B : 22 5A 1E            		ld	(dDacCntr),hl
(2) 3704/    140E : 32 5C 1E            		ld	(dDacCntr+2),a
(2) 3705/    1411 : D1                  		pop	de
(2) 3706/    1412 : C1                  		pop	bc
(2) 3707/    1413 : 78                  		ld	a,b
(2) 3708/    1414 : B1                  		or	c
(2) 3709/    1415 : 28 17               		jr	z,.FDFreturn
(2) 3710/    1417 : 3A 5D 1E            		ld	a,(dDacFifoMid)
(2) 3711/    141A : 5F                  		ld	e,a
(2) 3712/    141B : C6 80               		add	a,80h
(2) 3713/    141D : 32 5D 1E            		ld	(dDacFifoMid),a
(2) 3714/    1420 : 2A 57 1E            		ld	hl,(dDacPntr)
(2) 3715/    1423 : 3A 59 1E            		ld	a,(dDacPntr+2)
(2) 3716/    1426 : CD 0F 0F            		call	transferRom
(2) 3717/    1429 : 18 03               		jr	.FDFreturn
(2) 3718/    142B :                     .FDF7:
(2) 3719/    142B : CD 1E 13            		call	dac_off		; DAC finished
(2) 3720/    142E :                     .FDFreturn:
(2) 3721/    142E : E1                  		pop	hl
(2) 3722/    142F : D1                  		pop	de
(2) 3723/    1430 : C1                  		pop	bc
(2) 3724/    1431 : F1                  		pop	af
(2) 3725/    1432 : C9                  		ret
(2) 3726/    1433 :                     
(2) 3727/    1433 :                     ; ====================================================================
(2) 3728/    1433 :                     ; ----------------------------------------------------------------
(2) 3729/    1433 :                     ; Tables
(2) 3730/    1433 :                     ; ----------------------------------------------------------------
(2) 3731/    1433 :                     
(2) 3732/    1433 : 84 02               fmFreq_List:	dw 644
(2) 3733/    1435 : A9 02               		dw 681
(2) 3734/    1437 : D2 02               		dw 722
(2) 3735/    1439 : FD 02               		dw 765
(2) 3736/    143B : 2A 03               		dw 810
(2) 3737/    143D : 5A 03               		dw 858
(2) 3738/    143F : 8E 03               		dw 910
(2) 3739/    1441 : C4 03               		dw 964
(2) 3740/    1443 : FD 03               		dw 1021
(2) 3741/    1445 : 39 04               		dw 1081
(2) 3742/    1447 : 7A 04               		dw 1146
(2) 3743/    1449 : BE 04               		dw 1214
(2) 3744/    144B :                     psgFreq_List:
(2) 3745/    144B : FF FF               		dw -1		; C-0 $0
(2) 3746/    144D : FF FF               		dw -1
(2) 3747/    144F : FF FF               		dw -1
(2) 3748/    1451 : FF FF               		dw -1
(2) 3749/    1453 : FF FF               		dw -1
(2) 3750/    1455 : FF FF               		dw -1
(2) 3751/    1457 : FF FF               		dw -1
(2) 3752/    1459 : FF FF               		dw -1
(2) 3753/    145B : FF FF               		dw -1
(2) 3754/    145D : FF FF               		dw -1
(2) 3755/    145F : FF FF               		dw -1
(2) 3756/    1461 : FF FF               		dw -1
(2) 3757/    1463 : FF FF               		dw -1		; C-1 $C
(2) 3758/    1465 : FF FF               		dw -1
(2) 3759/    1467 : FF FF               		dw -1
(2) 3760/    1469 : FF FF               		dw -1
(2) 3761/    146B : FF FF               		dw -1
(2) 3762/    146D : FF FF               		dw -1
(2) 3763/    146F : FF FF               		dw -1
(2) 3764/    1471 : FF FF               		dw -1
(2) 3765/    1473 : FF FF               		dw -1
(2) 3766/    1475 : FF FF               		dw -1
(2) 3767/    1477 : FF FF               		dw -1
(2) 3768/    1479 : FF FF               		dw -1
(2) 3769/    147B : FF FF               		dw -1		; C-2 $18
(2) 3770/    147D : FF FF               		dw -1
(2) 3771/    147F : FF FF               		dw -1
(2) 3772/    1481 : FF FF               		dw -1
(2) 3773/    1483 : FF FF               		dw -1
(2) 3774/    1485 : FF FF               		dw -1
(2) 3775/    1487 : FF FF               		dw -1
(2) 3776/    1489 : FF FF               		dw -1
(2) 3777/    148B : FF FF               		dw -1
(2) 3778/    148D : FF FF               		dw -1
(2) 3779/    148F : FF FF               		dw -1
(2) 3780/    1491 : FF FF               		dw -1
(2) 3781/    1493 : FF FF               		dw -1		; C-3 $24
(2) 3782/    1495 : FF FF               		dw -1
(2) 3783/    1497 : FF FF               		dw -1
(2) 3784/    1499 : FF FF               		dw -1
(2) 3785/    149B : FF FF               		dw -1
(2) 3786/    149D : FF FF               		dw -1
(2) 3787/    149F : FF FF               		dw -1
(2) 3788/    14A1 : FF FF               		dw -1
(2) 3789/    14A3 : FF FF               		dw -1
(2) 3790/    14A5 : F8 03               		dw 3F8h
(2) 3791/    14A7 : BF 03               		dw 3BFh
(2) 3792/    14A9 : 89 03               		dw 389h
(2) 3793/    14AB : 56 03               		dw 356h		;C-4 30
(2) 3794/    14AD : 26 03               		dw 326h
(2) 3795/    14AF : F9 02               		dw 2F9h
(2) 3796/    14B1 : CE 02               		dw 2CEh
(2) 3797/    14B3 : A5 02               		dw 2A5h
(2) 3798/    14B5 : 80 02               		dw 280h
(2) 3799/    14B7 : 5C 02               		dw 25Ch
(2) 3800/    14B9 : 3A 02               		dw 23Ah
(2) 3801/    14BB : 1A 02               		dw 21Ah
(2) 3802/    14BD : FB 01               		dw 1FBh
(2) 3803/    14BF : DF 01               		dw 1DFh
(2) 3804/    14C1 : C4 01               		dw 1C4h
(2) 3805/    14C3 : AB 01               		dw 1ABh		;C-5 3C
(2) 3806/    14C5 : 93 01               		dw 193h
(2) 3807/    14C7 : 7D 01               		dw 17Dh
(2) 3808/    14C9 : 67 01               		dw 167h
(2) 3809/    14CB : 53 01               		dw 153h
(2) 3810/    14CD : 40 01               		dw 140h
(2) 3811/    14CF : 2E 01               		dw 12Eh
(2) 3812/    14D1 : 1D 01               		dw 11Dh
(2) 3813/    14D3 : 0D 01               		dw 10Dh
(2) 3814/    14D5 : FE 00               		dw 0FEh
(2) 3815/    14D7 : EF 00               		dw 0EFh
(2) 3816/    14D9 : E2 00               		dw 0E2h
(2) 3817/    14DB : D6 00               		dw 0D6h		;C-6 48
(2) 3818/    14DD : C9 00               		dw 0C9h
(2) 3819/    14DF : BE 00               		dw 0BEh
(2) 3820/    14E1 : B4 00               		dw 0B4h
(2) 3821/    14E3 : A9 00               		dw 0A9h
(2) 3822/    14E5 : A0 00               		dw 0A0h
(2) 3823/    14E7 : 97 00               		dw 97h
(2) 3824/    14E9 : 8F 00               		dw 8Fh
(2) 3825/    14EB : 87 00               		dw 87h
(2) 3826/    14ED : 7F 00               		dw 7Fh
(2) 3827/    14EF : 78 00               		dw 78h
(2) 3828/    14F1 : 71 00               		dw 71h
(2) 3829/    14F3 : 6B 00               		dw 6Bh		; C-7 54
(2) 3830/    14F5 : 65 00               		dw 65h
(2) 3831/    14F7 : 5F 00               		dw 5Fh
(2) 3832/    14F9 : 5A 00               		dw 5Ah
(2) 3833/    14FB : 55 00               		dw 55h
(2) 3834/    14FD : 50 00               		dw 50h
(2) 3835/    14FF : 4B 00               		dw 4Bh
(2) 3836/    1501 : 47 00               		dw 47h
(2) 3837/    1503 : 43 00               		dw 43h
(2) 3838/    1505 : 40 00               		dw 40h
(2) 3839/    1507 : 3C 00               		dw 3Ch
(2) 3840/    1509 : 39 00               		dw 39h
(2) 3841/    150B : 36 00               		dw 36h		; C-8 $60
(2) 3842/    150D : 33 00               		dw 33h
(2) 3843/    150F : 30 00               		dw 30h
(2) 3844/    1511 : 2D 00               		dw 2Dh
(2) 3845/    1513 : 2B 00               		dw 2Bh
(2) 3846/    1515 : 28 00               		dw 28h
(2) 3847/    1517 : 26 00               		dw 26h
(2) 3848/    1519 : 24 00               		dw 24h
(2) 3849/    151B : 22 00               		dw 22h
(2) 3850/    151D : 20 00               		dw 20h
(2) 3851/    151F : 1F 00               		dw 1Fh
(2) 3852/    1521 : 1D 00               		dw 1Dh
(2) 3853/    1523 : 1B 00               		dw 1Bh		; C-9 $6C
(2) 3854/    1525 : 1A 00               		dw 1Ah
(2) 3855/    1527 : 18 00               		dw 18h
(2) 3856/    1529 : 17 00               		dw 17h
(2) 3857/    152B : 16 00               		dw 16h
(2) 3858/    152D : 15 00               		dw 15h
(2) 3859/    152F : 13 00               		dw 13h
(2) 3860/    1531 : 12 00               		dw 12h
(2) 3861/    1533 : 11 00               		dw 11h
(2) 3862/    1535 : 10 00                		dw 10h
(2) 3863/    1537 : 09 00                		dw 9h
(2) 3864/    1539 : 08 00                		dw 8h
(2) 3865/    153B : 00 00               		dw 0
(2) 3866/    153D :                     
(2) 3867/    153D :                     ; TODO: some of these freqs need checking
(2) 3868/    153D : 00 01               wavFreq_List:	dw 100h		; C-0
(2) 3869/    153F : 00 01               		dw 100h
(2) 3870/    1541 : 00 01               		dw 100h
(2) 3871/    1543 : 00 01               		dw 100h
(2) 3872/    1545 : 00 01               		dw 100h
(2) 3873/    1547 : 00 01               		dw 100h
(2) 3874/    1549 : 00 01               		dw 100h
(2) 3875/    154B : 00 01               		dw 100h
(2) 3876/    154D : 00 01               		dw 100h
(2) 3877/    154F : 00 01               		dw 100h
(2) 3878/    1551 : 00 01               		dw 100h
(2) 3879/    1553 : 00 01               		dw 100h
(2) 3880/    1555 : 00 01               		dw 100h		; C-1
(2) 3881/    1557 : 00 01               		dw 100h
(2) 3882/    1559 : 00 01               		dw 100h
(2) 3883/    155B : 00 01               		dw 100h
(2) 3884/    155D : 00 01               		dw 100h
(2) 3885/    155F : 00 01               		dw 100h
(2) 3886/    1561 : 00 01               		dw 100h
(2) 3887/    1563 : 00 01               		dw 100h
(2) 3888/    1565 : 00 01               		dw 100h
(2) 3889/    1567 : 00 01               		dw 100h
(2) 3890/    1569 : 00 01               		dw 100h
(2) 3891/    156B : 00 01               		dw 100h
(2) 3892/    156D : 00 01               		dw 100h		; C-2
(2) 3893/    156F : 00 01               		dw 100h
(2) 3894/    1571 : 00 01               		dw 100h
(2) 3895/    1573 : 00 01               		dw 100h
(2) 3896/    1575 : 00 01               		dw 100h
(2) 3897/    1577 : 00 01               		dw 100h
(2) 3898/    1579 : 00 01               		dw 100h
(2) 3899/    157B : 00 01               		dw 100h
(2) 3900/    157D : 00 01               		dw 100h
(2) 3901/    157F : 00 01               		dw 100h
(2) 3902/    1581 : 36 00               		dw 036h
(2) 3903/    1583 : 3B 00               		dw 03Bh
(2) 3904/    1585 : 3E 00               		dw 03Eh		; C-3 5512
(2) 3905/    1587 : 43 00               		dw 043h		; C#3
(2) 3906/    1589 : 46 00               		dw 046h		; D-3
(2) 3907/    158B : 49 00               		dw 049h		; D#3
(2) 3908/    158D : 4E 00               		dw 04Eh		; E-3
(2) 3909/    158F : 54 00               		dw 054h		; F-3
(2) 3910/    1591 : 58 00               		dw 058h		; F#3
(2) 3911/    1593 : 5E 00               		dw 05Eh		; G-3 8363 -17
(2) 3912/    1595 : 63 00               		dw 063h		; G#3
(2) 3913/    1597 : 68 00               		dw 068h		; A-3
(2) 3914/    1599 : 70 00               		dw 070h		; A#3
(2) 3915/    159B : 75 00               		dw 075h		; B-3
(2) 3916/    159D : 85 00               		dw 085h		; C-4 11025 -12
(2) 3917/    159F : 87 00               		dw 087h		; C#4
(2) 3918/    15A1 : 8C 00               		dw 08Ch		; D-4
(2) 3919/    15A3 : 9A 00               		dw 09Ah		; D#4
(2) 3920/    15A5 : 9E 00               		dw 09Eh		; E-4
(2) 3921/    15A7 : AD 00               		dw 0ADh		; F-4
(2) 3922/    15A9 : B2 00               		dw 0B2h		; F#4
(2) 3923/    15AB : C0 00               		dw 0C0h		; G-4
(2) 3924/    15AD : CC 00               		dw 0CCh		; G#4
(2) 3925/    15AF : D7 00               		dw 0D7h		; A-4
(2) 3926/    15B1 : E6 00               		dw 0E6h		; A#4
(2) 3927/    15B3 : F0 00               		dw 0F0h		; B-4
(2) 3928/    15B5 : 00 01               		dw 100h		; C-5 22050
(2) 3929/    15B7 : 10 01               		dw 110h		; C#5
(2) 3930/    15B9 : 20 01               		dw 120h		; D-5
(2) 3931/    15BB : 2E 01               		dw 12Eh		; D#5
(2) 3932/    15BD : 42 01               		dw 142h		; E-5
(2) 3933/    15BF : 5A 01               		dw 15Ah		; F-5
(2) 3934/    15C1 : 6A 01               		dw 16Ah		; F#5 32000 +6
(2) 3935/    15C3 : 7F 01               		dw 17Fh		; G-5
(2) 3936/    15C5 : 91 01               		dw 191h		; G#5
(2) 3937/    15C7 : AC 01               		dw 1ACh		; A-5
(2) 3938/    15C9 : C2 01               		dw 1C2h		; A#5
(2) 3939/    15CB : E0 01               		dw 1E0h		; B-5
(2) 3940/    15CD : F8 01               		dw 1F8h		; C-6 44100 +12
(2) 3941/    15CF : 10 02               		dw 210h		; C#6
(2) 3942/    15D1 : 40 02               		dw 240h		; D-6
(2) 3943/    15D3 : 60 02               		dw 260h		; D#6
(2) 3944/    15D5 : 80 02               		dw 280h		; E-6
(2) 3945/    15D7 : A0 02               		dw 2A0h		; F-6
(2) 3946/    15D9 : D0 02               		dw 2D0h		; F#6
(2) 3947/    15DB : F8 02               		dw 2F8h		; G-6
(2) 3948/    15DD : 20 03               		dw 320h		; G#6
(2) 3949/    15DF : 50 03               		dw 350h		; A-6
(2) 3950/    15E1 : 80 03               		dw 380h		; A#6
(2) 3951/    15E3 : C0 03               		dw 3C0h		; B-6
(2) 3952/    15E5 : 00 04               		dw 400h		; C-7 88200
(2) 3953/    15E7 : 00 01               		dw 100h
(2) 3954/    15E9 : 00 01               		dw 100h
(2) 3955/    15EB : 00 01               		dw 100h
(2) 3956/    15ED : 00 01               		dw 100h
(2) 3957/    15EF : 00 01               		dw 100h
(2) 3958/    15F1 : 00 01               		dw 100h
(2) 3959/    15F3 : 00 01               		dw 100h
(2) 3960/    15F5 : 00 01               		dw 100h
(2) 3961/    15F7 : 00 01               		dw 100h
(2) 3962/    15F9 : 00 01               		dw 100h
(2) 3963/    15FB : 00 01               		dw 100h
(2) 3964/    15FD : 00 01               		dw 100h		; C-8
(2) 3965/    15FF : 00 01               		dw 100h
(2) 3966/    1601 : 00 01               		dw 100h
(2) 3967/    1603 : 00 01               		dw 100h
(2) 3968/    1605 : 00 01               		dw 100h
(2) 3969/    1607 : 00 01               		dw 100h
(2) 3970/    1609 : 00 01               		dw 100h
(2) 3971/    160B : 00 01               		dw 100h
(2) 3972/    160D : 00 01               		dw 100h
(2) 3973/    160F : 00 01               		dw 100h
(2) 3974/    1611 : 00 01               		dw 100h
(2) 3975/    1613 : 00 01               		dw 100h
(2) 3976/    1615 : 00 01               		dw 100h		; C-9
(2) 3977/    1617 : 00 01               		dw 100h
(2) 3978/    1619 : 00 01               		dw 100h
(2) 3979/    161B : 00 01               		dw 100h
(2) 3980/    161D : 00 01               		dw 100h
(2) 3981/    161F : 00 01               		dw 100h
(2) 3982/    1621 : 00 01               		dw 100h
(2) 3983/    1623 : 00 01               		dw 100h
(2) 3984/    1625 : 00 01               		dw 100h
(2) 3985/    1627 : 00 01               		dw 100h
(2) 3986/    1629 : 00 01               		dw 100h
(2) 3987/    162B : 00 01               		dw 100h
(2) 3988/    162D :                     
(2) 3989/    162D :                     ; ====================================================================
(2) 3990/    162D :                     ; ----------------------------------------------------------------
(2) 3991/    162D :                     ; Z80 RAM
(2) 3992/    162D :                     ; ----------------------------------------------------------------
(2) 3993/    162D :                     
(2) 3994/    162D :                     		align 10h
(2) 3995/    1630 : 00 00 00 00 00 00   pwmcom:		db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyOn/KeyOff/KeyCut/other update bits
                    00 00 
(2) 3996/    1638 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(2) 3997/    1640 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(2) 3998/    1648 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Playback flags: Loop/Stereo/Left/Right | 32-bit
                    00 00 
(2) 3999/    1650 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - sample location
                    00 00 
(2) 4000/    1658 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 4001/    1660 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(2) 4002/    1668 : 00 00 00 00 00 00   fmcom:		db 00h,00h,00h,00h,00h,00h	;  0 - play bits: 2-cut 1-off 0-play
(2) 4003/    166E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	;  6 - keys xxxx0000b
(2) 4004/    1674 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 12 - volume (for 40h+)
(2) 4005/    167A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 18 - panning (%LR000000)
(2) 4006/    1680 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 24 - A4h+ (MSB FIRST)
(2) 4007/    1686 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h	; 30 - A0h+
(2) 4008/    168C : 00 00 00 00         psgcom		db 00h,00h,00h,00h		;  0 command 1 = key on, 2 = key off, 4 = stop snd
(2) 4009/    1690 : FF FF FF FF         psglev		db -1, -1, -1, -1		;  4 output level attenuation (%llll.0000, -1 = silent)
(2) 4010/    1694 : 00 00 00 00         psgatk		db 00h,00h,00h,00h		;  8 attack rate
(2) 4011/    1698 : 00 00 00 00         psgdec		db 00h,00h,00h,00h		; 12 decay rate
(2) 4012/    169C : 00 00 00 00         psgslv		db 00h,00h,00h,00h		; 16 sustain level attenuation
(2) 4013/    16A0 : 00 00 00 00         psgrrt		db 00h,00h,00h,00h		; 20 release rate
(2) 4014/    16A4 : 00 00 00 00         psgenv		db 00h,00h,00h,00h		; 24 envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain, 4
(2) 4015/    16A8 : 00 00 00 00         psgdtl		db 00h,00h,00h,00h		; 28 tone bottom 4 bits
(2) 4016/    16AC : 00 00 00 00         psgdth		db 00h,00h,00h,00h		; 32 tone upper 6 bits
(2) 4017/    16B0 : 00 00 00 00         psgalv		db 00h,00h,00h,00h		; 36 attack level attenuation
(2) 4018/    16B4 : 00 00 00 00         whdflg		db 00h,00h,00h,00h		; 40 flags to indicate hardware should be updated
(2) 4019/    16B8 : 00 00 00 00         psgtim		db 00h,00h,00h,00h		; 44 timer for sustain
(2) 4020/    16BC : 00 00 00 00         psgvol		db 00h,00h,00h,00h
(2) 4021/    16C0 :                     fmins_com:	ds 028h				; Current instrument data for each FM
(2) 4022/    16E8 :                     fmins_com2:	ds 028h
(2) 4023/    1710 :                     fmins_com3:	ds 028h
(2) 4024/    1738 :                     fmins_com4:	ds 028h
(2) 4025/    1760 :                     fmins_com5:	ds 028h
(2) 4026/    1788 :                     fmins_com6:	ds 028h
(2) 4027/    17B0 : 00 AC 00 A8         fm3reg:		dw 0AC00h,0A800h		; S3-S1, S4 is at A6/A2
(2) 4028/    17B4 : 00 AD 00 A9         		dw 0AD00h,0A900h
(2) 4029/    17B8 : 00 AE 00 AA         		dw 0AE00h,0AA00h
(2) 4030/    17BC : 00                  daccom:		db 0				; single byte for key on, off and cut
(2) 4031/    17BD :                     
(2) 4032/    17BD :                     	; Channel tables: 10h bytes
(2) 4033/    17BD :                     	; 0  - Link addr (0000h = free, used chnls start from +0020h)
(2) 4034/    17BD :                     	; 2  - Channel index (ID is set extrenally)
(2) 4035/    17BD :                     	; 3  - Pitch
(2) 4036/    17BD :                     	; 4+ - Channel specific...
(2) 4037/    17BD :                     
(2) 4038/    17BD :                     	; PSG (80h+)
(2) 4039/    17BD :                     	;  4 - psgNoise mode
(2) 4040/    17BD : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(2) 4041/    17C5 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(2) 4042/    17CD : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(2) 4043/    17D5 : FF FF               		dw -1	; end-of-list
(2) 4044/    17D7 : 00 00 03 00 00 00   tblPSGN:	db 00h,00h,03h,00h,00h,00h,00h,00h	; Noise (DIRECT CHECK only)
                    00 00 
(2) 4045/    17DF :                     
(2) 4046/    17DF :                     	; FM: 90h+ FM3: 0A0h DAC: 0B0h
(2) 4047/    17DF :                     	;  4 - Special mode (FM3: Special, FM6: DAC)
(2) 4048/    17DF :                     	;  5 - 24-bit copy of ROM instrument pointer
(2) 4049/    17DF : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(2) 4050/    17E7 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(2) 4051/    17EF : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(2) 4052/    17F7 : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(2) 4053/    17FF : 00 00 02 00 00 00   tblFM3:		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(2) 4054/    1807 : 00 00 05 00 00 00   tblFM6:		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(2) 4055/    180F : FF FF               		dw -1	; end-of-list
(2) 4056/    1811 :                     
(2) 4057/    1811 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(2) 4058/    1819 : 00 00 01 00 00 00   		db 00h,00h,01h,00h,00h,00h,00h,00h	; Channel 2
                    00 00 
(2) 4059/    1821 : 00 00 02 00 00 00   		db 00h,00h,02h,00h,00h,00h,00h,00h	; Channel 3
                    00 00 
(2) 4060/    1829 : 00 00 03 00 00 00   		db 00h,00h,03h,00h,00h,00h,00h,00h	; Channel 4
                    00 00 
(2) 4061/    1831 : 00 00 04 00 00 00   		db 00h,00h,04h,00h,00h,00h,00h,00h	; Channel 5
                    00 00 
(2) 4062/    1839 : 00 00 05 00 00 00   		db 00h,00h,05h,00h,00h,00h,00h,00h	; Channel 6
                    00 00 
(2) 4063/    1841 : 00 00 06 00 00 00   		db 00h,00h,06h,00h,00h,00h,00h,00h	; Channel 7
                    00 00 
(2) 4064/    1849 : FF FF               		dw -1
(2) 4065/    184B :                     
(2) 4066/    184B :                     insDataC_0	ds 8*MAX_INS	; Instrument data for each Track slot
(2) 4067/    18CB :                     insDataC_1	ds 8*MAX_INS	; 8*MAX_INS
(2) 4068/    194B :                     
(2) 4069/    194B :                     		align 10h
(2) 4070/    1950 :                     ; NOTE: MSB is used as the priority.
(2) 4071/    1950 :                     trkBuff_0	ds 20h+(MAX_TRKCHN*8)	;  *** TRACK BUFFER 0****
(2) 4072/    19F8 :                     trkBuff_1	ds 20h+(MAX_TRKCHN*8)	;  *** TRACK BUFFER 1****
(2) 4073/    1AA0 :                     
(2) 4074/    1AA0 : (MACRO)             		org 1B00h
(2) 4074/    1AA0 : 00                                                  db 0
(2) 4074/    1AA1 : 00                                                  db 0
(2) 4074/    1AA2 : 00                                                  db 0
(2) 4074/    1AA3 : 00                                                  db 0
(2) 4074/    1AA4 : 00                                                  db 0
(2) 4074/    1AA5 : 00                                                  db 0
(2) 4074/    1AA6 : 00                                                  db 0
(2) 4074/    1AA7 : 00                                                  db 0
(2) 4074/    1AA8 : 00                                                  db 0
(2) 4074/    1AA9 : 00                                                  db 0
(2) 4074/    1AAA : 00                                                  db 0
(2) 4074/    1AAB : 00                                                  db 0
(2) 4074/    1AAC : 00                                                  db 0
(2) 4074/    1AAD : 00                                                  db 0
(2) 4074/    1AAE : 00                                                  db 0
(2) 4074/    1AAF : 00                                                  db 0
(2) 4074/    1AB0 : 00                                                  db 0
(2) 4074/    1AB1 : 00                                                  db 0
(2) 4074/    1AB2 : 00                                                  db 0
(2) 4074/    1AB3 : 00                                                  db 0
(2) 4074/    1AB4 : 00                                                  db 0
(2) 4074/    1AB5 : 00                                                  db 0
(2) 4074/    1AB6 : 00                                                  db 0
(2) 4074/    1AB7 : 00                                                  db 0
(2) 4074/    1AB8 : 00                                                  db 0
(2) 4074/    1AB9 : 00                                                  db 0
(2) 4074/    1ABA : 00                                                  db 0
(2) 4074/    1ABB : 00                                                  db 0
(2) 4074/    1ABC : 00                                                  db 0
(2) 4074/    1ABD : 00                                                  db 0
(2) 4074/    1ABE : 00                                                  db 0
(2) 4074/    1ABF : 00                                                  db 0
(2) 4074/    1AC0 : 00                                                  db 0
(2) 4074/    1AC1 : 00                                                  db 0
(2) 4074/    1AC2 : 00                                                  db 0
(2) 4074/    1AC3 : 00                                                  db 0
(2) 4074/    1AC4 : 00                                                  db 0
(2) 4074/    1AC5 : 00                                                  db 0
(2) 4074/    1AC6 : 00                                                  db 0
(2) 4074/    1AC7 : 00                                                  db 0
(2) 4074/    1AC8 : 00                                                  db 0
(2) 4074/    1AC9 : 00                                                  db 0
(2) 4074/    1ACA : 00                                                  db 0
(2) 4074/    1ACB : 00                                                  db 0
(2) 4074/    1ACC : 00                                                  db 0
(2) 4074/    1ACD : 00                                                  db 0
(2) 4074/    1ACE : 00                                                  db 0
(2) 4074/    1ACF : 00                                                  db 0
(2) 4074/    1AD0 : 00                                                  db 0
(2) 4074/    1AD1 : 00                                                  db 0
(2) 4074/    1AD2 : 00                                                  db 0
(2) 4074/    1AD3 : 00                                                  db 0
(2) 4074/    1AD4 : 00                                                  db 0
(2) 4074/    1AD5 : 00                                                  db 0
(2) 4074/    1AD6 : 00                                                  db 0
(2) 4074/    1AD7 : 00                                                  db 0
(2) 4074/    1AD8 : 00                                                  db 0
(2) 4074/    1AD9 : 00                                                  db 0
(2) 4074/    1ADA : 00                                                  db 0
(2) 4074/    1ADB : 00                                                  db 0
(2) 4074/    1ADC : 00                                                  db 0
(2) 4074/    1ADD : 00                                                  db 0
(2) 4074/    1ADE : 00                                                  db 0
(2) 4074/    1ADF : 00                                                  db 0
(2) 4074/    1AE0 : 00                                                  db 0
(2) 4074/    1AE1 : 00                                                  db 0
(2) 4074/    1AE2 : 00                                                  db 0
(2) 4074/    1AE3 : 00                                                  db 0
(2) 4074/    1AE4 : 00                                                  db 0
(2) 4074/    1AE5 : 00                                                  db 0
(2) 4074/    1AE6 : 00                                                  db 0
(2) 4074/    1AE7 : 00                                                  db 0
(2) 4074/    1AE8 : 00                                                  db 0
(2) 4074/    1AE9 : 00                                                  db 0
(2) 4074/    1AEA : 00                                                  db 0
(2) 4074/    1AEB : 00                                                  db 0
(2) 4074/    1AEC : 00                                                  db 0
(2) 4074/    1AED : 00                                                  db 0
(2) 4074/    1AEE : 00                                                  db 0
(2) 4074/    1AEF : 00                                                  db 0
(2) 4074/    1AF0 : 00                                                  db 0
(2) 4074/    1AF1 : 00                                                  db 0
(2) 4074/    1AF2 : 00                                                  db 0
(2) 4074/    1AF3 : 00                                                  db 0
(2) 4074/    1AF4 : 00                                                  db 0
(2) 4074/    1AF5 : 00                                                  db 0
(2) 4074/    1AF6 : 00                                                  db 0
(2) 4074/    1AF7 : 00                                                  db 0
(2) 4074/    1AF8 : 00                                                  db 0
(2) 4074/    1AF9 : 00                                                  db 0
(2) 4074/    1AFA : 00                                                  db 0
(2) 4074/    1AFB : 00                                                  db 0
(2) 4074/    1AFC : 00                                                  db 0
(2) 4074/    1AFD : 00                                                  db 0
(2) 4074/    1AFE : 00                                                  db 0
(2) 4074/    1AFF : 00                                                  db 0
(2) 4074/    1B00 :                     
(2) 4075/    1B00 :                     dWaveBuff	ds 100h			; WAVE data buffer: 100h bytes, updates every 80h
(2) 4076/    1C00 :                     trkData_0	ds 100h			; Track note-cache buffers: 100h bytes, updates every 80h
(2) 4077/    1D00 :                     trkData_1	ds 100h
(2) 4078/    1E00 :                     
(2) 4079/    1E00 :                     ; very last variables...
(2) 4080/    1E00 :                     commZfifo	ds 40h			; Buffer for command requests from 68k (40h bytes, loops)
(2) 4081/    1E40 : 00 00               currInsData	dw 0
(2) 4082/    1E42 : 00 00               currTblPos	dw 0
(2) 4083/    1E44 : 00 00               currInsPos	dw 0
(2) 4084/    1E46 : 00 00               currTrkCtrl	dw 0
(2) 4085/    1E48 : 00 00               tickFlag	dw 0		; Tick flag from VBlank, Read as (tickFlag+1) for reading/reseting
(2) 4086/    1E4A : 00                  tickCnt		db 0		; Tick counter (PUT THIS TAG AFTER tickFlag)
(2) 4087/    1E4B : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(2) 4088/    1E4D : 00                  		db 0
(2) 4089/    1E4E : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(2) 4090/    1E50 : 00                  		db 0
(2) 4091/    1E51 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit (MUST BE BELOW wave_Len)
(2) 4092/    1E53 : 00                  		db 0
(2) 4093/    1E54 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(2) 4094/    1E56 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(2) 4095/    1E57 : 00 00 00            dDacPntr	db 0,0,0		; WAVE play current ROM position
(2) 4096/    1E5A : 00 00 00            dDacCntr	db 0,0,0		; WAVE play length counter
(2) 4097/    1E5D : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(2) 4098/    1E5E : 00                  psgHatMode	db 0
(2) 4099/    1E5F : 00                  fmSpcMode	db 0
(2) 4100/    1E60 :                     trkHdOut	ds 6			; temporal Header for reading Track position/row count
(2) 4101/    1E66 :                     
(2) 4102/    1E66 :                     ; Stack area
(2) 4103/    1E66 :                     
(1)  339/    1E66 :                     		cpu 68000
(1)  340/    1E66 :                     		padding off
(1)  341/  882A16 :                     		phase Z80_CODE+*
(1)  342/  882A16 :                     Z80_CODE_END:
(1)  343/  882A16 :                     		align 2
(1)  344/  882A16 :                     
      33/  882A16 :                     		include	"system/md/video.asm"
(1)    1/  882A16 :                     ; ====================================================================
(1)    2/  882A16 :                     ; ----------------------------------------------------------------
(1)    3/  882A16 :                     ; Genesis Video
(1)    4/  882A16 :                     ; ----------------------------------------------------------------
(1)    5/  882A16 :                     
(1)    6/  882A16 :                     ; --------------------------------------------------------
(1)    7/  882A16 :                     ; Settings
(1)    8/  882A16 :                     ; --------------------------------------------------------
(1)    9/  882A16 :                     
(1)   10/  882A16 : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   11/  882A16 : =$580               varPrintVram	equ $580	; Location of the PRINT text graphics
(1)   12/  882A16 : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   13/  882A16 :                     
(1)   14/  882A16 :                     ; --------------------------------------------------------
(1)   15/  882A16 :                     ; Variables
(1)   16/  882A16 :                     ; --------------------------------------------------------
(1)   17/  882A16 :                     
(1)   18/  882A16 :                     ; VDP Register $80
(1)   19/  882A16 : =$2                 HVStop		equ $02
(1)   20/  882A16 : =$10                HintEnbl	equ $10
(1)   21/  882A16 : =$1                 bitHVStop	equ 1
(1)   22/  882A16 : =$4                 bitHintEnbl	equ 4
(1)   23/  882A16 :                     
(1)   24/  882A16 :                     ; VDP Register $81
(1)   25/  882A16 : =$40                DispEnbl 	equ $40
(1)   26/  882A16 : =$20                VintEnbl 	equ $20
(1)   27/  882A16 : =$10                DmaEnbl		equ $10
(1)   28/  882A16 : =$6                 bitDispEnbl	equ 6
(1)   29/  882A16 : =$5                 bitVintEnbl	equ 5
(1)   30/  882A16 : =$4                 bitDmaEnbl	equ 4
(1)   31/  882A16 : =$3                 bitV30		equ 3
(1)   32/  882A16 :                     
(1)   33/  882A16 :                     ; vdp_ctrl READ bits (full WORD)
(1)   34/  882A16 : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   35/  882A16 : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   36/  882A16 : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   37/  882A16 : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   38/  882A16 : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   39/  882A16 : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   40/  882A16 : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   41/  882A16 : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   42/  882A16 : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   43/  882A16 : =$0                 bitPal		equ 0
(1)   44/  882A16 :                     
(1)   45/  882A16 :                     ; ====================================================================
(1)   46/  882A16 :                     ; --------------------------------------------------------
(1)   47/  882A16 :                     ; Init Genesis video
(1)   48/  882A16 :                     ; --------------------------------------------------------
(1)   49/  882A16 :                     
(1)   50/  882A16 :                     Video_Init:		
(1)   51/  882A16 : 4DF8 9820           		lea	(RAM_MdVideo),a6	; Clear RAM
(1)   52/  882A1A : 7C00                		moveq	#0,d6
(1)   53/  882A1C : 3E3C 0E01           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)   54/  882A20 :                     .clrram:
(1)   55/  882A20 : 1CC6                		move.b	d6,(a6)+
(1)   56/  882A22 : 51CF FFFC           		dbf	d7,.clrram
(1)   57/  882A26 : 4DFA 0060           		lea	list_vdpregs(pc),a6	; Init registers
(1)   58/  882A2A : 4BF8 A60A           		lea	(RAM_VdpRegs).w,a5
(1)   59/  882A2E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)   60/  882A34 : 3C3C 8000           		move.w	#$8000,d6
(1)   61/  882A38 : 3E3C 0012           		move.w	#19-1,d7
(1)   62/  882A3C :                     .loop:
(1)   63/  882A3C : 1C1E                		move.b	(a6)+,d6
(1)   64/  882A3E : 1AC6                		move.b	d6,(a5)+
(1)   65/  882A40 : 3886                		move.w	d6,(a4)
(1)   66/  882A42 : DC7C 0100           		add.w	#$100,d6
(1)   67/  882A46 : 51CF FFF4           		dbf	d7,.loop
(1)   68/  882A4A :                     .exit:
(1)   69/  882A4A : 7000                		moveq	#0,d0
(1)   70/  882A4C : 6100 0794           		bsr	Video_Mars_GfxMode
(1)   71/  882A50 :                     
(1)   72/  882A50 :                     	; DMA RV-bit safe code
(1)   73/  882A50 :                     	; TODO: solo copiarme el write final en
(1)   74/  882A50 :                     	; vez de todo el codigo.
(1)   75/  882A50 : 43F9 0088 30BA      		lea	(dmacode_start),a1
(1)   76/  882A56 : 41F9 FFFF A862      		lea	(RAM_DmaCode).l,a0
(1)   77/  882A5C : 303C 0049           		move.w	#((dmacode_end-dmacode_start)/4)-1,d0
(1)   78/  882A60 :                     .copysafe:
(1)   79/  882A60 : 20D9                		move.l	(a1)+,(a0)+
(1)   80/  882A62 : 51C8 FFFC           		dbf	d0,.copysafe
(1)   81/  882A66 : 4E75                		rts
(1)   82/  882A68 :                     
(1)   83/  882A68 :                     ; --------------------------------------------------------
(1)   84/  882A68 :                     ; Video_Update
(1)   85/  882A68 :                     ;
(1)   86/  882A68 :                     ; Refreshes register data stored in RAM
(1)   87/  882A68 :                     ; to VDP, from Registers $80 to $90
(1)   88/  882A68 :                     ;
(1)   89/  882A68 :                     ; Breaks:
(1)   90/  882A68 :                     ; d6-d7,a5-a6
(1)   91/  882A68 :                     ; --------------------------------------------------------
(1)   92/  882A68 :                     
(1)   93/  882A68 :                     Video_Update:
(1)   94/  882A68 : 4DF8 A60A           		lea	(RAM_VdpRegs).w,a6
(1)   95/  882A6C : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)   96/  882A72 : 3C3C 8000           		move.w	#$8000,d6
(1)   97/  882A76 : 3E3C 0010           		move.w	#17-1,d7
(1)   98/  882A7A :                     .loop:
(1)   99/  882A7A : 1C1E                		move.b	(a6)+,d6
(1)  100/  882A7C : 3A86                		move.w	d6,(a5)
(1)  101/  882A7E : DC7C 0100           		add.w	#$100,d6
(1)  102/  882A82 : 51CF FFF6           		dbf	d7,.loop
(1)  103/  882A86 :                     .exit:
(1)  104/  882A86 : 4E75                		rts
(1)  105/  882A88 :                     
(1)  106/  882A88 :                     ; --------------------------------------------------------
(1)  107/  882A88 :                     
(1)  108/  882A88 :                     list_vdpregs:
(1)  109/  882A88 : 04                  		dc.b $04			; HBlank int off, HV Counter on
(1)  110/  882A89 : 44                  		dc.b $44			; Display ON, VBlank int off
(1)  111/  882A8A : 30                  		dc.b (($C000)>>10)		; ForeGrd at VRAM $C000 (%00xxx000)
(1)  112/  882A8B : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  113/  882A8C : 07                  		dc.b (($E000)>>13)		; BackGrd at VRAM $E000 (%00000xxx)
(1)  114/  882A8D : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  115/  882A8E : 00                  		dc.b $00			; Unused
(1)  116/  882A8F : 00                  		dc.b $00			; Background color: 0
(1)  117/  882A90 : 00                  		dc.b $00			; Unused
(1)  118/  882A91 : 00                  		dc.b $00			; Unused
(1)  119/  882A92 : 00                  		dc.b $00			; HInt value
(1)  120/  882A93 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  121/  882A94 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  122/  882A95 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  123/  882A96 : 00                  		dc.b $00			; Unused
(1)  124/  882A97 : 02                  		dc.b $02			; VDP Auto increment by $02
(1)  125/  882A98 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  126/  882A99 : 00                  		dc.b $00
(1)  127/  882A9A : 00                  		dc.b $00
(1)  128/  882A9B :                     		align 2
(1)  129/  882A9C :                     
(1)  130/  882A9C : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  131/  882AAC : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  132/  882ABC :                     ASCII_PAL_e:
(1)  133/  882ABC :                     		align 2
(1)  134/  882ABC :                     
(1)  135/  882ABC :                     ; --------------------------------------------------------
(1)  136/  882ABC :                     ; Video_Clear
(1)  137/  882ABC :                     ;
(1)  138/  882ABC :                     ; Clear all video data from VRAM
(1)  139/  882ABC :                     ; --------------------------------------------------------
(1)  140/  882ABC :                     
(1)  141/  882ABC :                     Video_Clear:
(1)  142/  882ABC : 303C 0000           		move.w	#0,d0			; Clears until $57F
(1)  143/  882AC0 : 323C 0000           		move.w	#0,d1
(1)  144/  882AC4 : 343C AFE0           		move.w	#$57F*$20,d2
(1)  145/  882AC8 : 6100 04EE           		bsr	Video_Fill
(1)  146/  882ACC :                     
(1)  147/  882ACC :                     Video_ClearScreen:
(1)  148/  882ACC : 7000                		moveq	#0,d0
(1)  149/  882ACE : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  150/  882AD2 : 1239 FFFF A60C      		move.b	(RAM_VdpRegs+2).l,d1	; FG
(1)  151/  882AD8 : 0241 0038           		andi.w	#%111000,d1
(1)  152/  882ADC : E149                		lsl.w	#8,d1
(1)  153/  882ADE : E549                		lsl.w	#2,d1
(1)  154/  882AE0 : 6100 04D6           		bsr	Video_Fill
(1)  155/  882AE4 :                     
(1)  156/  882AE4 : 1239 FFFF A60E      		move.b	(RAM_VdpRegs+4).l,d1	; BG
(1)  157/  882AEA : 0241 0007           		andi.w	#%000111,d1
(1)  158/  882AEE : E149                		lsl.w	#8,d1
(1)  159/  882AF0 : EB49                		lsl.w	#5,d1
(1)  160/  882AF2 : 6100 04C4           		bsr	Video_Fill
(1)  161/  882AF6 :                     
(1)  162/  882AF6 : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  163/  882AFA : 1239 FFFF A60D      		move.b	(RAM_VdpRegs+3).l,d1	; Window
(1)  164/  882B00 : 0241 003E           		andi.w	#%111110,d1
(1)  165/  882B04 : E149                		lsl.w	#8,d1
(1)  166/  882B06 : E549                		lsl.w	#2,d1
(1)  167/  882B08 : 6100 04AE           		bsr	Video_Fill
(1)  168/  882B0C :                     
(1)  169/  882B0C : 41F8 9820           		lea	(RAM_HorScroll),a0
(1)  170/  882B10 : 3E3C 00EF           		move.w	#240-1,d7
(1)  171/  882B14 : 7000                		moveq	#0,d0
(1)  172/  882B16 :                     .xnext:
(1)  173/  882B16 : 20C0                		move.l	d0,(a0)+
(1)  174/  882B18 : 51CF FFFC           		dbf	d7,.xnext
(1)  175/  882B1C : 41F8 9BE0           		lea	(RAM_VerScroll),a0
(1)  176/  882B20 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  177/  882B24 : 7000                		moveq	#0,d0
(1)  178/  882B26 :                     .ynext:
(1)  179/  882B26 : 20C0                		move.l	d0,(a0)+
(1)  180/  882B28 : 51CF FFFC           		dbf	d7,.ynext
(1)  181/  882B2C : 41F8 9C30           		lea	(RAM_Sprites),a0
(1)  182/  882B30 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  183/  882B34 : 7000                		moveq	#0,d0
(1)  184/  882B36 :                     .snext:
(1)  185/  882B36 : 20C0                		move.l	d0,(a0)+
(1)  186/  882B38 : 51CF FFFC           		dbf	d7,.snext
(1)  187/  882B3C :                     
(1)  188/  882B3C : 41F8 A090           		lea	(RAM_Palette),a0
(1)  189/  882B40 : 43F8 A110           		lea	(RAM_PaletteFd),a1
(1)  190/  882B44 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  191/  882B48 : 7000                		moveq	#0,d0
(1)  192/  882B4A :                     .pnext:
(1)  193/  882B4A : 20C0                		move.l	d0,(a0)+
(1)  194/  882B4C : 22C0                		move.l	d0,(a1)+
(1)  195/  882B4E : 51CF FFFA           		dbf	d7,.pnext
(1)  196/  882B52 :                     	; Only the 256-color's fade...
(1)  197/  882B52 : 41F8 A190           		lea	(RAM_MdMarsPalFd),a0
(1)  198/  882B56 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  199/  882B5A : 7000                		moveq	#0,d0
(1)  200/  882B5C :                     .pmnext:
(1)  201/  882B5C : 20C0                		move.l	d0,(a0)+
(1)  202/  882B5E : 51CF FFFC           		dbf	d7,.pmnext
(1)  203/  882B62 : 4E75                		rts
(1)  204/  882B64 :                     
(1)  205/  882B64 :                     ; ====================================================================
(1)  206/  882B64 :                     ; ----------------------------------------------------------------
(1)  207/  882B64 :                     ; Layer screens
(1)  208/  882B64 :                     ; ----------------------------------------------------------------
(1)  209/  882B64 :                     
(1)  210/  882B64 :                     ; --------------------------------------------------------
(1)  211/  882B64 :                     ; Video_LoadMap
(1)  212/  882B64 :                     ;
(1)  213/  882B64 :                     ; Loads map data, in Horizontal order
(1)  214/  882B64 :                     ; Can autodetect layer width, height and
(1)  215/  882B64 :                     ; double interlace mode
(1)  216/  882B64 :                     ;
(1)  217/  882B64 :                     ; a0 | DATA - Map data
(1)  218/  882B64 :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  219/  882B64 :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  220/  882B64 :                     ; d2 | WORD - VRAM
(1)  221/  882B64 :                     ;
(1)  222/  882B64 :                     ; Breaks:
(1)  223/  882B64 :                     ; d4-d7,a6
(1)  224/  882B64 :                     ; --------------------------------------------------------
(1)  225/  882B64 :                     
(1)  226/  882B64 :                     Video_LoadMap:
(1)  227/  882B64 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  228/  882B6A : 6100 01B4           		bsr	vid_PickLayer
(1)  229/  882B6E : 3A01                		move.w	d1,d5		; Start here
(1)  230/  882B70 :                     .yloop:
(1)  231/  882B70 : 4845                		swap	d5
(1)  232/  882B72 : 2D44 0004           		move.l	d4,4(a6)
(1)  233/  882B76 : 2E01                		move.l	d1,d7
(1)  234/  882B78 : 4847                		swap	d7
(1)  235/  882B7A :                     .xloop:
(1)  236/  882B7A : 3A18                		move.w	(a0)+,d5
(1)  237/  882B7C : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  238/  882B80 : 6606                		bne.s	.nonull
(1)  239/  882B82 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  240/  882B86 : 6002                		bra.s	.cont
(1)  241/  882B88 :                     .nonull:
(1)  242/  882B88 : DA42                		add.w	d2,d5
(1)  243/  882B8A :                     .cont:
(1)  244/  882B8A :                     
(1)  245/  882B8A :                     	; Check for double interlace
(1)  246/  882B8A : 4847                		swap	d7
(1)  247/  882B8C : 1E39 FFFF A616      		move.b	(RAM_VdpRegs+$C).l,d7
(1)  248/  882B92 : CE7C 0006           		and.w	#%110,d7
(1)  249/  882B96 : BE7C 0006           		cmp.w	#%110,d7
(1)  250/  882B9A : 660E                		bne.s	.nodble
(1)  251/  882B9C : 3E05                		move.w	d5,d7
(1)  252/  882B9E : E24F                		lsr.w	#1,d7
(1)  253/  882BA0 : CE7C 07FF           		and.w	#$7FF,d7
(1)  254/  882BA4 : CA7C F800           		and.w	#$F800,d5
(1)  255/  882BA8 : 8A47                		or.w	d7,d5
(1)  256/  882BAA :                     .nodble:
(1)  257/  882BAA : 4847                		swap	d7
(1)  258/  882BAC : 3C85                		move.w	d5,(a6)
(1)  259/  882BAE : 51CF FFCA           		dbf	d7,.xloop
(1)  260/  882BB2 : D886                		add.l	d6,d4
(1)  261/  882BB4 : 4845                		swap	d5
(1)  262/  882BB6 : 51CD FFB8           		dbf	d5,.yloop
(1)  263/  882BBA : 4E75                		rts
(1)  264/  882BBC :                     
(1)  265/  882BBC :                     ; ; --------------------------------------------------------
(1)  266/  882BBC :                     ; ; Video_LoadMap_Vert
(1)  267/  882BBC :                     ; ;
(1)  268/  882BBC :                     ; ; Load map data, Vertical order
(1)  269/  882BBC :                     ; ;
(1)  270/  882BBC :                     ; ; a0 - Map data
(1)  271/  882BBC :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  272/  882BBC :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  273/  882BBC :                     ; ; d2 | WORD - VRAM
(1)  274/  882BBC :                     ;
(1)  275/  882BBC :                     ; ; Breaks:
(1)  276/  882BBC :                     ; ; a4-a5,d4-d7
(1)  277/  882BBC :                     ; ; --------------------------------------------------------
(1)  278/  882BBC :                     ;
(1)  279/  882BBC :                     ; Video_LoadMap_Vert:
(1)  280/  882BBC :                     ; 		lea	(vdp_data),a4
(1)  281/  882BBC :                     ; 		bsr	vid_PickLayer
(1)  282/  882BBC :                     ; 		move.l	d1,d5		; Start here
(1)  283/  882BBC :                     ; 		swap	d5
(1)  284/  882BBC :                     ; .xloop:
(1)  285/  882BBC :                     ; 		swap	d5
(1)  286/  882BBC :                     ; 		move.l	d4,-(sp)
(1)  287/  882BBC :                     ; 		move.w	d1,d7
(1)  288/  882BBC :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  289/  882BBC :                     ; 		beq.s	.yloop
(1)  290/  882BBC :                     ; 		lsr.w	#1,d7
(1)  291/  882BBC :                     ; .yloop:
(1)  292/  882BBC :                     ; 		move.l	d4,4(a4)
(1)  293/  882BBC :                     ; 		move.w	(a0),d5
(1)  294/  882BBC :                     ; 		cmp.w	#-1,d5
(1)  295/  882BBC :                     ; 		bne.s	.nonull
(1)  296/  882BBC :                     ; 		move.w	#varNullVram,d5
(1)  297/  882BBC :                     ; 		bra.s	.cont
(1)  298/  882BBC :                     ; .nonull:
(1)  299/  882BBC :                     ; 		add.w	d2,d5
(1)  300/  882BBC :                     ; .cont:
(1)  301/  882BBC :                     ; 		swap	d7
(1)  302/  882BBC :                     ; 		adda	#2,a0
(1)  303/  882BBC :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  304/  882BBC :                     ; 		beq.s	.nodble
(1)  305/  882BBC :                     ; 		adda	#2,a0
(1)  306/  882BBC :                     ; 		move.w	d5,d7
(1)  307/  882BBC :                     ; 		lsr.w	#1,d7
(1)  308/  882BBC :                     ; 		and.w	#$7FF,d7
(1)  309/  882BBC :                     ; 		and.w	#$F800,d5
(1)  310/  882BBC :                     ; 		or.w	d7,d5
(1)  311/  882BBC :                     ; .nodble:
(1)  312/  882BBC :                     ; 		swap	d7
(1)  313/  882BBC :                     ; 		move.w	d5,(a4)
(1)  314/  882BBC :                     ; 		add.l	d6,d4
(1)  315/  882BBC :                     ; 		dbf	d7,.yloop
(1)  316/  882BBC :                     ; .outdbl:
(1)  317/  882BBC :                     ; 		move.l	(sp)+,d4
(1)  318/  882BBC :                     ; 		add.l	#$20000,d4
(1)  319/  882BBC :                     ; 		swap	d5
(1)  320/  882BBC :                     ; 		dbf	d5,.xloop
(1)  321/  882BBC :                     ; 		rts
(1)  322/  882BBC :                     
(1)  323/  882BBC :                     ; ; --------------------------------------------------------
(1)  324/  882BBC :                     ; ; Video_AutoMap_Vert
(1)  325/  882BBC :                     ; ;
(1)  326/  882BBC :                     ; ; Make automatic map, Vertical order
(1)  327/  882BBC :                     ; ;
(1)  328/  882BBC :                     ; ; MCD: Use this to make a virtual screen
(1)  329/  882BBC :                     ; ; for Stamps
(1)  330/  882BBC :                     ; ;
(1)  331/  882BBC :                     ; ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  332/  882BBC :                     ; ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  333/  882BBC :                     ; ; d2 | WORD - VRAM
(1)  334/  882BBC :                     ;
(1)  335/  882BBC :                     ; ; Breaks:
(1)  336/  882BBC :                     ; ; a4-a5,d4-d7
(1)  337/  882BBC :                     ; ; --------------------------------------------------------
(1)  338/  882BBC :                     ;
(1)  339/  882BBC :                     ; ; TODO: double interlace
(1)  340/  882BBC :                     ; Video_AutoMap_Vert:
(1)  341/  882BBC :                     ; 		lea	(vdp_data),a4
(1)  342/  882BBC :                     ; 		bsr	vid_PickLayer
(1)  343/  882BBC :                     ; 		move.w	d2,d7		; Start here
(1)  344/  882BBC :                     ; 		move.l	d1,d5
(1)  345/  882BBC :                     ; 		swap	d5
(1)  346/  882BBC :                     ; .xloop:
(1)  347/  882BBC :                     ; 		swap	d5
(1)  348/  882BBC :                     ; 		move.l	d4,-(sp)
(1)  349/  882BBC :                     ; 		move.w	d1,d5
(1)  350/  882BBC :                     ; 		btst	#2,(RAM_VdpRegs+$C).l
(1)  351/  882BBC :                     ; 		beq.s	.yloop
(1)  352/  882BBC :                     ; 		lsr.w	#1,d5
(1)  353/  882BBC :                     ; .yloop:
(1)  354/  882BBC :                     ; 		move.l	d4,4(a4)
(1)  355/  882BBC :                     ; 		move.w	d7,(a4)
(1)  356/  882BBC :                     ; 		add.w	#1,d7
(1)  357/  882BBC :                     ; 		add.l	d6,d4
(1)  358/  882BBC :                     ; 		dbf	d5,.yloop
(1)  359/  882BBC :                     ;
(1)  360/  882BBC :                     ; 		move.l	(sp)+,d4
(1)  361/  882BBC :                     ; 		add.l	#$20000,d4
(1)  362/  882BBC :                     ; 		swap	d5
(1)  363/  882BBC :                     ; 		dbf	d5,.xloop
(1)  364/  882BBC :                     ; 		rts
(1)  365/  882BBC :                     
(1)  366/  882BBC :                     ; ====================================================================
(1)  367/  882BBC :                     ; ----------------------------------------------------------------
(1)  368/  882BBC :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  369/  882BBC :                     ; ----------------------------------------------------------------
(1)  370/  882BBC :                     
(1)  371/  882BBC :                     ; --------------------------------------------------------
(1)  372/  882BBC :                     ; Video_PrintInit
(1)  373/  882BBC :                     ;
(1)  374/  882BBC :                     ; Initializes the default Graphics and Palette
(1)  375/  882BBC :                     ; for the font.
(1)  376/  882BBC :                     ; --------------------------------------------------------
(1)  377/  882BBC :                     
(1)  378/  882BBC :                     Video_PrintInit:
(1)  379/  882BBC : 203C 0002 0000      		move.l	#ASCII_FONT,d0
(1)  380/  882BC2 : 323C B000           		move.w	#varPrintVram*$20,d1
(1)  381/  882BC6 : 343C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  382/  882BCA : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  383/  882BCE : 31C3 A5F4           		move.w	d3,(RAM_VidPrntVram).w
(1)  384/  882BD2 : 6100 04E0           		bsr	Video_LoadArt
(1)  385/  882BD6 :                     Video_PrintPal:
(1)  386/  882BD6 : 41FA FEC4           		lea	ASCII_PAL(pc),a0
(1)  387/  882BDA : 7030                		moveq	#(varPrintPal<<4),d0
(1)  388/  882BDC : 323C 000F           		move.w	#$F,d1
(1)  389/  882BE0 : 6100 01F6           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  390/  882BE4 : 6000 01E8           		bra	Video_FadePal
(1)  391/  882BE8 :                     
(1)  392/  882BE8 :                     ; --------------------------------------------------------
(1)  393/  882BE8 :                     ; Video_Print
(1)  394/  882BE8 :                     ;
(1)  395/  882BE8 :                     ; Prints string to layer
(1)  396/  882BE8 :                     ; requires ASCII font
(1)  397/  882BE8 :                     ;
(1)  398/  882BE8 :                     ; a0 | DATA - String data w/special characters +
(1)  399/  882BE8 :                     ;             list of RAM locations to read
(1)  400/  882BE8 :                     ; d0 | LONG - Print location on-screen:
(1)  401/  882BE8 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  402/  882BE8 :                     ;
(1)  403/  882BE8 :                     ; Special characters:
(1)  404/  882BE8 :                     ; "//b" - Shows BYTE value
(1)  405/  882BE8 :                     ; "//w" - Shows WORD value
(1)  406/  882BE8 :                     ; "//l" - Shows LONG value
(1)  407/  882BE8 :                     ;   $0A - Next line
(1)  408/  882BE8 :                     ;   $00 - End of line
(1)  409/  882BE8 :                     ;
(1)  410/  882BE8 :                     ; After $00, put your RAM addresses in LONGS
(1)  411/  882BE8 :                     ; don't forget to put align 2 at the end.
(1)  412/  882BE8 :                     ;
(1)  413/  882BE8 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  414/  882BE8 :                     ;
(1)  415/  882BE8 :                     ; Breaks:
(1)  416/  882BE8 :                     ; d4-d7,a4-a6
(1)  417/  882BE8 :                     ; --------------------------------------------------------
(1)  418/  882BE8 :                     
(1)  419/  882BE8 :                     Video_Print:
(1)  420/  882BE8 :                     ; 		movem.l	d3-d7,-(sp)
(1)  421/  882BE8 :                     ; 		movem.l	a4-a6,-(sp)
(1)  422/  882BE8 :                     
(1)  423/  882BE8 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  424/  882BEE : 6100 0130           		bsr	vid_PickLayer
(1)  425/  882BF2 : 4BF8 A470           		lea	(RAM_VidPrntList),a5
(1)  426/  882BF6 :                     .newjump:
(1)  427/  882BF6 : 2D44 0004           		move.l	d4,4(a6)
(1)  428/  882BFA : 2A04                		move.l	d4,d5
(1)  429/  882BFC :                     .loop:
(1)  430/  882BFC : 1E18                		move.b	(a0)+,d7
(1)  431/  882BFE : 6772                		beq	.exit
(1)  432/  882C00 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  433/  882C04 : 6718                		beq.s	.next
(1)  434/  882C06 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  435/  882C0A : 6716                		beq.s	.special
(1)  436/  882C0C : 0247 00FF           		andi.w	#$FF,d7
(1)  437/  882C10 :                     .puttext:
(1)  438/  882C10 : DE78 A5F4           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  439/  882C14 : 3C87                		move.w	d7,(a6)
(1)  440/  882C16 : DABC 0002 0000      		add.l	#$20000,d5
(1)  441/  882C1C : 60DE                		bra.s	.loop
(1)  442/  882C1E :                     ; Next line
(1)  443/  882C1E :                     .next:
(1)  444/  882C1E : D886                		add.l	d6,d4
(1)  445/  882C20 : 60D4                		bra.s	.newjump
(1)  446/  882C22 :                     
(1)  447/  882C22 :                     ; Specials
(1)  448/  882C22 :                     .special:
(1)  449/  882C22 : 1E18                		move.b	(a0)+,d7
(1)  450/  882C24 : 0C07 0062           		cmpi.b	#"b",d7
(1)  451/  882C28 : 6712                		beq.s	.isbyte
(1)  452/  882C2A : 0C07 0077           		cmpi.b	#"w",d7
(1)  453/  882C2E : 671E                		beq.s	.isword
(1)  454/  882C30 : 0C07 006C           		cmpi.b	#"l",d7
(1)  455/  882C34 : 672A                		beq.s	.islong
(1)  456/  882C36 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  457/  882C3A : 60D4                		bra.s	.puttext
(1)  458/  882C3C :                     
(1)  459/  882C3C :                     	; TEMPORAL VALUES
(1)  460/  882C3C :                     .isbyte:
(1)  461/  882C3C : 2AC5                		move.l	d5,(a5)+
(1)  462/  882C3E : 3AFC 0001           		move.w	#1,(a5)+
(1)  463/  882C42 : DABC 0004 0000      		add.l	#$40000,d5
(1)  464/  882C48 : 2D45 0004           		move.l	d5,4(a6)
(1)  465/  882C4C : 60AE                		bra	.loop
(1)  466/  882C4E :                     .isword:
(1)  467/  882C4E : 2AC5                		move.l	d5,(a5)+
(1)  468/  882C50 : 3AFC 0002           		move.w	#2,(a5)+
(1)  469/  882C54 : DABC 0008 0000      		add.l	#$80000,d5
(1)  470/  882C5A : 2D45 0004           		move.l	d5,4(a6)
(1)  471/  882C5E : 609C                		bra	.loop
(1)  472/  882C60 :                     .islong:
(1)  473/  882C60 : 2AC5                		move.l	d5,(a5)+
(1)  474/  882C62 : 3AFC 0003           		move.w	#3,(a5)+
(1)  475/  882C66 : DABC 0010 0000      		add.l	#$100000,d5
(1)  476/  882C6C : 2D45 0004           		move.l	d5,4(a6)
(1)  477/  882C70 : 608A                		bra	.loop
(1)  478/  882C72 :                     .exit:
(1)  479/  882C72 :                     
(1)  480/  882C72 :                     	; ----------------------------------------
(1)  481/  882C72 :                     	; Print values
(1)  482/  882C72 :                     	;
(1)  483/  882C72 :                     	; vvvv vvvv tttt
(1)  484/  882C72 :                     	; v - vdp pos
(1)  485/  882C72 :                     	; t - value type
(1)  486/  882C72 :                     	; ----------------------------------------
(1)  487/  882C72 :                     
(1)  488/  882C72 :                     	; reading byte by byte because longs doesn't get
(1)  489/  882C72 :                     	; aligned after $00...
(1)  490/  882C72 :                     
(1)  491/  882C72 : 7800                		moveq	#0,d4
(1)  492/  882C74 : 7A00                		moveq	#0,d5
(1)  493/  882C76 : 7C00                		moveq	#0,d6
(1)  494/  882C78 : 4BF8 A470           		lea	(RAM_VidPrntList),a5
(1)  495/  882C7C :                     .nextv:
(1)  496/  882C7C : 4A95                		tst.l	(a5)
(1)  497/  882C7E : 6700 009E           		beq	.nothing
(1)  498/  882C82 :                     
(1)  499/  882C82 :                     	; grab value
(1)  500/  882C82 : 7800                		moveq	#0,d4
(1)  501/  882C84 : 1818                		move.b	(a0)+,d4
(1)  502/  882C86 : E19C                		rol.l	#8,d4
(1)  503/  882C88 : 1818                		move.b	(a0)+,d4
(1)  504/  882C8A : E19C                		rol.l	#8,d4
(1)  505/  882C8C : 1818                		move.b	(a0)+,d4
(1)  506/  882C8E : E19C                		rol.l	#8,d4
(1)  507/  882C90 : 1818                		move.b	(a0)+,d4
(1)  508/  882C92 : 2844                		movea.l	d4,a4
(1)  509/  882C94 : 7800                		moveq	#0,d4
(1)  510/  882C96 :                     
(1)  511/  882C96 :                     	; get value
(1)  512/  882C96 : 3C2D 0004           		move.w	4(a5),d6
(1)  513/  882C9A : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  514/  882C9E : 660E                		bne.s	.vbyte
(1)  515/  882CA0 : 1814                		move.b	(a4),d4
(1)  516/  882CA2 : 2D55 0004           		move.l	(a5),4(a6)
(1)  517/  882CA6 : E91C                		rol.b	#4,d4
(1)  518/  882CA8 : 6158                		bsr.s	.donibl
(1)  519/  882CAA : E91C                		rol.b	#4,d4
(1)  520/  882CAC : 6154                		bsr.s	.donibl
(1)  521/  882CAE :                     .vbyte:
(1)  522/  882CAE : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  523/  882CB2 : 661C                		bne.s	.vword
(1)  524/  882CB4 : 1814                		move.b	(a4),d4
(1)  525/  882CB6 : E15C                		rol.w	#8,d4
(1)  526/  882CB8 : 182C 0001           		move.b	1(a4),d4
(1)  527/  882CBC : 2D55 0004           		move.l	(a5),4(a6)
(1)  528/  882CC0 : E95C                		rol.w	#4,d4
(1)  529/  882CC2 : 613E                		bsr.s	.donibl
(1)  530/  882CC4 : E95C                		rol.w	#4,d4
(1)  531/  882CC6 : 613A                		bsr.s	.donibl
(1)  532/  882CC8 : E95C                		rol.w	#4,d4
(1)  533/  882CCA : 6136                		bsr.s	.donibl
(1)  534/  882CCC : E95C                		rol.w	#4,d4
(1)  535/  882CCE : 6132                		bsr.s	.donibl
(1)  536/  882CD0 :                     .vword:
(1)  537/  882CD0 :                     
(1)  538/  882CD0 :                     	; TODO: might break on negative values
(1)  539/  882CD0 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  540/  882CD4 : 6624                		bne.s	.vlong
(1)  541/  882CD6 : 1814                		move.b	(a4),d4
(1)  542/  882CD8 : E19C                		rol.l	#8,d4
(1)  543/  882CDA : 182C 0001           		move.b	1(a4),d4
(1)  544/  882CDE : E19C                		rol.l	#8,d4
(1)  545/  882CE0 : 182C 0002           		move.b	2(a4),d4
(1)  546/  882CE4 : E19C                		rol.l	#8,d4
(1)  547/  882CE6 : 182C 0003           		move.b	3(a4),d4
(1)  548/  882CEA : 2D55 0004           		move.l	(a5),4(a6)
(1)  549/  882CEE : 3C3C 0007           		move.w	#7,d6
(1)  550/  882CF2 : E99C                .lngloop:	rol.l	#4,d4
(1)  551/  882CF4 : 610C                		bsr.s	.donibl
(1)  552/  882CF6 : 51CE FFFA           		dbf	d6,.lngloop
(1)  553/  882CFA :                     .vlong:
(1)  554/  882CFA : 429D                		clr.l	(a5)+
(1)  555/  882CFC : 425D                		clr.w	(a5)+
(1)  556/  882CFE : 6000 FF7C           		bra	.nextv
(1)  557/  882D02 :                     
(1)  558/  882D02 :                     ; make nibble byte
(1)  559/  882D02 :                     .donibl:
(1)  560/  882D02 : 3A04                		move.w	d4,d5
(1)  561/  882D04 : 0245 000F           		andi.w	#%1111,d5
(1)  562/  882D08 : BA3C 000A           		cmp.b	#$A,d5
(1)  563/  882D0C : 6D04                		blt.s	.lowr
(1)  564/  882D0E : DA3C 0007           		add.b	#7,d5
(1)  565/  882D12 :                     .lowr:
(1)  566/  882D12 : DA7C 0030           		add.w	#"0",d5
(1)  567/  882D16 : DA78 A5F4           		add.w	(RAM_VidPrntVram),d5
(1)  568/  882D1A : 3C85                		move.w	d5,(a6)
(1)  569/  882D1C : 4E75                		rts
(1)  570/  882D1E :                     ; exit
(1)  571/  882D1E :                     .nothing:
(1)  572/  882D1E :                     ; 		movem.l	(sp)+,a4-a6
(1)  573/  882D1E :                     ; 		movem.l	(sp)+,d3-d7
(1)  574/  882D1E : 4E75                		rts
(1)  575/  882D20 :                     
(1)  576/  882D20 :                     ; --------------------------------------------------------
(1)  577/  882D20 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  578/  882D20 :                     ; --------------------------------------------------------
(1)  579/  882D20 :                     
(1)  580/  882D20 :                     vid_PickLayer:
(1)  581/  882D20 : 2C00                		move.l	d0,d6			; Pick layer
(1)  582/  882D22 : 4846                		swap	d6
(1)  583/  882D24 : 0806 0000           		btst	#0,d6
(1)  584/  882D28 : 671E                		beq.s	.plawnd
(1)  585/  882D2A : 1839 FFFF A60E      		move.b	(RAM_VdpRegs+4).l,d4	; BG
(1)  586/  882D30 : 3A04                		move.w	d4,d5
(1)  587/  882D32 : E24D                		lsr.w	#1,d5
(1)  588/  882D34 : 0245 0003           		andi.w	#%11,d5
(1)  589/  882D38 : 4844                		swap	d4
(1)  590/  882D3A : 3805                		move.w	d5,d4
(1)  591/  882D3C : 4844                		swap	d4
(1)  592/  882D3E : 0244 0001           		andi.w	#1,d4
(1)  593/  882D42 : E14C                		lsl.w	#8,d4
(1)  594/  882D44 : EB4C                		lsl.w	#5,d4
(1)  595/  882D46 : 6028                		bra.s	.golyr
(1)  596/  882D48 :                     .plawnd:
(1)  597/  882D48 : 1839 FFFF A60C      		move.b	(RAM_VdpRegs+2).l,d4	; FG
(1)  598/  882D4E : 0806 0001           		btst	#1,d6
(1)  599/  882D52 : 6706                		beq.s	.nowd
(1)  600/  882D54 : 1839 FFFF A60D      		move.b	(RAM_VdpRegs+3).l,d4	; WINDOW
(1)  601/  882D5A :                     .nowd:
(1)  602/  882D5A : 3A04                		move.w	d4,d5
(1)  603/  882D5C : E84D                		lsr.w	#4,d5
(1)  604/  882D5E : 0245 0003           		andi.w	#%11,d5
(1)  605/  882D62 : 4844                		swap	d4
(1)  606/  882D64 : 3805                		move.w	d5,d4
(1)  607/  882D66 : 4844                		swap	d4
(1)  608/  882D68 : 0244 000E           		andi.w	#%00001110,d4
(1)  609/  882D6C : E14C                		lsl.w	#8,d4
(1)  610/  882D6E : E54C                		lsl.w	#2,d4
(1)  611/  882D70 :                     .golyr:
(1)  612/  882D70 : 0044 4000           		ori.w	#$4000,d4
(1)  613/  882D74 : 3A00                		move.w	d0,d5			; Y start pos
(1)  614/  882D76 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  615/  882D7A : ED4D                		lsl.w	#6,d5
(1)  616/  882D7C : 1C38 A61A           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  617/  882D80 : 0246 0003           		andi.w	#%11,d6
(1)  618/  882D84 : 670A                		beq.s	.thissz
(1)  619/  882D86 : DA45                		add.w	d5,d5			; H64
(1)  620/  882D88 : 0246 0002           		andi.w	#%10,d6
(1)  621/  882D8C : 6702                		beq.s	.thissz
(1)  622/  882D8E : DA45                		add.w	d5,d5			; H128
(1)  623/  882D90 :                     .thissz:
(1)  624/  882D90 : D845                		add.w	d5,d4
(1)  625/  882D92 : 3A00                		move.w	d0,d5
(1)  626/  882D94 : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  627/  882D98 : EE4D                		lsr.w	#7,d5
(1)  628/  882D9A : D845                		add.w	d5,d4			; X add
(1)  629/  882D9C : 4844                		swap	d4
(1)  630/  882D9E : 7C00                		moveq	#0,d6
(1)  631/  882DA0 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  632/  882DA4 : 1A38 A61A           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  633/  882DA8 : 0245 0003           		andi.w	#%11,d5
(1)  634/  882DAC : 670A                		beq.s	.thisszj
(1)  635/  882DAE : DC46                		add.w	d6,d6			; H64
(1)  636/  882DB0 : 0245 0002           		andi.w	#%10,d5
(1)  637/  882DB4 : 6702                		beq.s	.thisszj
(1)  638/  882DB6 : DC46                		add.w	d6,d6			; H128
(1)  639/  882DB8 :                     .thisszj:
(1)  640/  882DB8 : 4846                		swap	d6
(1)  641/  882DBA : 4E75                		rts
(1)  642/  882DBC :                     
(1)  643/  882DBC :                     ; ====================================================================
(1)  644/  882DBC :                     ; ----------------------------------------------------------------
(1)  645/  882DBC :                     ; Palette fade system, Genesis side
(1)  646/  882DBC :                     ; ----------------------------------------------------------------
(1)  647/  882DBC :                     
(1)  648/  882DBC :                     ; --------------------------------------------------------
(1)  649/  882DBC :                     ; Video_RunFade
(1)  650/  882DBC :                     ;
(1)  651/  882DBC :                     ; Processes palette fading and reports if requests
(1)  652/  882DBC :                     ; finished on exit.
(1)  653/  882DBC :                     ;
(1)  654/  882DBC :                     ; Returns:
(1)  655/  882DBC :                     ; bne - Still active
(1)  656/  882DBC :                     ; beq - Finished
(1)  657/  882DBC :                     ;
(1)  658/  882DBC :                     ; *** CALL System_WaitFrame FIRST ***
(1)  659/  882DBC :                     ; --------------------------------------------------------
(1)  660/  882DBC :                     
(1)  661/  882DBC :                     Video_RunFade:
(1)  662/  882DBC : 613E                		bsr	Video_DoPalFade
(1)  663/  882DBE : 6100 04AE           		bsr	Video_MarsPalFade
(1)  664/  882DC2 : 3E38 A5FE           		move.w	(RAM_FadeMarsReq),d7
(1)  665/  882DC6 : 3C38 A5F6           		move.w	(RAM_FadeMdReq),d6
(1)  666/  882DCA : 8E46                		or.w	d6,d7
(1)  667/  882DCC : 4E75                		rts
(1)  668/  882DCE :                     
(1)  669/  882DCE :                     ; --------------------------------------------------------
(1)  670/  882DCE :                     ; Video_LoadPal
(1)  671/  882DCE :                     ; 
(1)  672/  882DCE :                     ; Input:
(1)  673/  882DCE :                     ; a0 - Palette data
(1)  674/  882DCE :                     ; d0 - Start position
(1)  675/  882DCE :                     ; d1 - Number of colors
(1)  676/  882DCE :                     ; 
(1)  677/  882DCE :                     ; Breaks:
(1)  678/  882DCE :                     ; d5-d7,a6
(1)  679/  882DCE :                     ; --------------------------------------------------------
(1)  680/  882DCE :                     
(1)  681/  882DCE :                     Video_FadePal:
(1)  682/  882DCE : 4DF8 A110           		lea	(RAM_PaletteFd),a6
(1)  683/  882DD2 : 4278 A5FC           		clr.w	(RAM_FadeMdTmr).w
(1)  684/  882DD6 : 6004                		bra.s	vidMd_Pal
(1)  685/  882DD8 :                     Video_LoadPal:
(1)  686/  882DD8 : 4DF8 A090           		lea	(RAM_Palette),a6
(1)  687/  882DDC :                     vidMd_Pal:
(1)  688/  882DDC : 2A48                		move.l	a0,a5
(1)  689/  882DDE : 7E00                		moveq	#0,d7
(1)  690/  882DE0 : 3E00                		move.w	d0,d7
(1)  691/  882DE2 : DE47                		add.w	d7,d7
(1)  692/  882DE4 : DCC7                		adda	d7,a6
(1)  693/  882DE6 : 3E01                		move.w	d1,d7
(1)  694/  882DE8 : 9E7C 0001           		sub.w	#1,d7
(1)  695/  882DEC : 3C02                		move.w	d2,d6
(1)  696/  882DEE : CC7C 0001           		and.w	#1,d6
(1)  697/  882DF2 : E25E                		ror.w	#1,d6
(1)  698/  882DF4 :                     .loop:
(1)  699/  882DF4 : 3CDD                		move.w	(a5)+,(a6)+
(1)  700/  882DF6 : 51CF FFFC           		dbf	d7,.loop
(1)  701/  882DFA : 4E75                		rts
(1)  702/  882DFC :                     
(1)  703/  882DFC :                     ; --------------------------------------------------------
(1)  704/  882DFC :                     ; Video_DoPalFade
(1)  705/  882DFC :                     ;
(1)  706/  882DFC :                     ; RAM_ReqFadeMars: (WORD)
(1)  707/  882DFC :                     ; $00 - No task or finished.
(1)  708/  882DFC :                     ; $01 - Fade in
(1)  709/  882DFC :                     ; $02 - Fade out to black
(1)  710/  882DFC :                     ;
(1)  711/  882DFC :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  712/  882DFC :                     ; --------------------------------------------------------
(1)  713/  882DFC :                     
(1)  714/  882DFC :                     Video_DoPalFade:
(1)  715/  882DFC : 0478 0001 A5FC      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  716/  882E02 : 6A14                		bpl.s	.active
(1)  717/  882E04 : 31F8 A5FA A5FC      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  718/  882E0A : 3E38 A5F6           		move.w	(RAM_FadeMdReq).w,d7
(1)  719/  882E0E : DE47                		add.w	d7,d7
(1)  720/  882E10 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  721/  882E14 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  722/  882E18 :                     .active:
(1)  723/  882E18 : 4E75                		rts
(1)  724/  882E1A :                     
(1)  725/  882E1A :                     ; --------------------------------------------
(1)  726/  882E1A :                     
(1)  727/  882E1A :                     .fade_list:
(1)  728/  882E1A : 0006                		dc.w .fade_done-.fade_list
(1)  729/  882E1C : 0008                		dc.w .fade_in-.fade_list
(1)  730/  882E1E : 00AC                		dc.w .fade_out-.fade_list
(1)  731/  882E20 :                     
(1)  732/  882E20 :                     ; --------------------------------------------
(1)  733/  882E20 :                     ; No fade or finished.
(1)  734/  882E20 :                     ; --------------------------------------------
(1)  735/  882E20 :                     
(1)  736/  882E20 :                     .fade_done:
(1)  737/  882E20 : 4E75                		rts
(1)  738/  882E22 :                     
(1)  739/  882E22 :                     ; --------------------------------------------
(1)  740/  882E22 :                     ; Fade in
(1)  741/  882E22 :                     ; --------------------------------------------
(1)  742/  882E22 :                     
(1)  743/  882E22 :                     .fade_in:
(1)  744/  882E22 : 4DF8 A110           		lea	(RAM_PaletteFd),a6
(1)  745/  882E26 : 4BF8 A090           		lea	(RAM_Palette),a5
(1)  746/  882E2A : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  747/  882E2E : 3238 A5F8           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  748/  882E32 : D241                		add.w	d1,d1
(1)  749/  882E34 : 3C00                		move.w	d0,d6
(1)  750/  882E36 : 4846                		swap	d6
(1)  751/  882E38 : 907C 0001           		sub.w	#1,d0
(1)  752/  882E3C :                     .nxt_pal:
(1)  753/  882E3C : 4242                		clr.w	d2		; Reset finished colorbits
(1)  754/  882E3E : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  755/  882E40 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  756/  882E42 : 3607                		move.w	d7,d3		; RED
(1)  757/  882E44 : 3806                		move.w	d6,d4
(1)  758/  882E46 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  759/  882E4A : C87C 000E           		and.w	#%0000000000001110,d4
(1)  760/  882E4E : C67C 000E           		and.w	#%0000000000001110,d3
(1)  761/  882E52 : D841                		add.w	d1,d4
(1)  762/  882E54 : B843                		cmp.w	d3,d4
(1)  763/  882E56 : 6506                		bcs.s	.no_red
(1)  764/  882E58 : 3803                		move.w	d3,d4
(1)  765/  882E5A : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  766/  882E5E :                     .no_red:
(1)  767/  882E5E : 8C44                		or.w	d4,d6
(1)  768/  882E60 : E949                		lsl.w	#4,d1
(1)  769/  882E62 : 3607                		move.w	d7,d3		; GREEN
(1)  770/  882E64 : 3806                		move.w	d6,d4
(1)  771/  882E66 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  772/  882E6A : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  773/  882E6E : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  774/  882E72 : D841                		add.w	d1,d4
(1)  775/  882E74 : B843                		cmp.w	d3,d4
(1)  776/  882E76 : 6506                		bcs.s	.no_grn
(1)  777/  882E78 : 3803                		move.w	d3,d4
(1)  778/  882E7A : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  779/  882E7E :                     .no_grn:
(1)  780/  882E7E : 8C44                		or.w	d4,d6
(1)  781/  882E80 : E949                		lsl.w	#4,d1
(1)  782/  882E82 : 3607                		move.w	d7,d3		; BLUE
(1)  783/  882E84 : 3806                		move.w	d6,d4
(1)  784/  882E86 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  785/  882E8A : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  786/  882E8E : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  787/  882E92 : D841                		add.w	d1,d4
(1)  788/  882E94 : B843                		cmp.w	d3,d4
(1)  789/  882E96 : 6506                		bcs.s	.no_blu
(1)  790/  882E98 : 3803                		move.w	d3,d4
(1)  791/  882E9A : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  792/  882E9E :                     .no_blu:
(1)  793/  882E9E : 8C44                		or.w	d4,d6
(1)  794/  882EA0 : E049                		lsr.w	#8,d1
(1)  795/  882EA2 : 3AC6                		move.w	d6,(a5)+
(1)  796/  882EA4 : DCFC 0002           		adda	#2,a6
(1)  797/  882EA8 : B47C 0007           		cmp.w	#%111,d2
(1)  798/  882EAC : 6608                		bne.s	.no_fnsh
(1)  799/  882EAE : 4846                		swap	d6
(1)  800/  882EB0 : 9C7C 0001           		sub.w	#1,d6
(1)  801/  882EB4 : 4846                		swap	d6
(1)  802/  882EB6 :                     .no_fnsh:
(1)  803/  882EB6 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  804/  882EBA : 4846                		swap	d6
(1)  805/  882EBC : 4A46                		tst.w	d6
(1)  806/  882EBE : 6604                		bne.s	.no_move
(1)  807/  882EC0 : 4278 A5F6           		clr.w	(RAM_FadeMdReq).w
(1)  808/  882EC4 :                     .no_move:
(1)  809/  882EC4 : 4E75                		rts
(1)  810/  882EC6 :                     
(1)  811/  882EC6 :                     ; --------------------------------------------
(1)  812/  882EC6 :                     ; Fade out
(1)  813/  882EC6 :                     ; --------------------------------------------
(1)  814/  882EC6 :                     
(1)  815/  882EC6 :                     .fade_out:
(1)  816/  882EC6 : 4DF8 A090           		lea	(RAM_Palette),a6
(1)  817/  882ECA : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  818/  882ECE : 3238 A5F8           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  819/  882ED2 : 3C00                		move.w	d0,d6
(1)  820/  882ED4 : 4846                		swap	d6
(1)  821/  882ED6 : 907C 0001           		sub.w	#1,d0
(1)  822/  882EDA :                     .nxt_pal_o:
(1)  823/  882EDA : 4242                		clr.w	d2			; Reset finished colorbits
(1)  824/  882EDC : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  825/  882EDE : 3C07                		move.w	d7,d6
(1)  826/  882EE0 : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  827/  882EE4 : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  828/  882EE8 : 9C41                		sub.w	d1,d6
(1)  829/  882EEA : 6A06                		bpl.s	.no_red_o
(1)  830/  882EEC : 4246                		clr.w	d6
(1)  831/  882EEE : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  832/  882EF2 :                     .no_red_o:
(1)  833/  882EF2 : 8E46                		or.w	d6,d7
(1)  834/  882EF4 : E949                		lsl.w	#4,d1
(1)  835/  882EF6 : 3C07                		move.w	d7,d6
(1)  836/  882EF8 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  837/  882EFC : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  838/  882F00 : 9C41                		sub.w	d1,d6
(1)  839/  882F02 : 6A06                		bpl.s	.no_grn_o
(1)  840/  882F04 : 4246                		clr.w	d6
(1)  841/  882F06 : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  842/  882F0A :                     .no_grn_o:
(1)  843/  882F0A : 8E46                		or.w	d6,d7
(1)  844/  882F0C : E949                		lsl.w	#4,d1
(1)  845/  882F0E : 3C07                		move.w	d7,d6
(1)  846/  882F10 : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  847/  882F14 : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  848/  882F18 : 9C41                		sub.w	d1,d6
(1)  849/  882F1A : 6A06                		bpl.s	.no_blu_o
(1)  850/  882F1C : 4246                		clr.w	d6
(1)  851/  882F1E : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  852/  882F22 :                     .no_blu_o:
(1)  853/  882F22 : 8E46                		or.w	d6,d7
(1)  854/  882F24 : E049                		lsr.w	#8,d1
(1)  855/  882F26 : 3CC7                		move.w	d7,(a6)+
(1)  856/  882F28 : B47C 0007           		cmp.w	#%111,d2
(1)  857/  882F2C : 6608                		bne.s	.no_fnsh_o
(1)  858/  882F2E : 4846                		swap	d6
(1)  859/  882F30 : 9C7C 0001           		sub.w	#1,d6
(1)  860/  882F34 : 4846                		swap	d6
(1)  861/  882F36 :                     .no_fnsh_o:
(1)  862/  882F36 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  863/  882F3A : 4846                		swap	d6
(1)  864/  882F3C : 4A46                		tst.w	d6
(1)  865/  882F3E : 6604                		bne.s	.no_move_o
(1)  866/  882F40 : 4278 A5F6           		clr.w	(RAM_FadeMdReq).w
(1)  867/  882F44 :                     .no_move_o:
(1)  868/  882F44 : 4E75                		rts
(1)  869/  882F46 :                     
(1)  870/  882F46 :                     ; ====================================================================
(1)  871/  882F46 :                     ; --------------------------------------------------------
(1)  872/  882F46 :                     ; Genesis DMA
(1)  873/  882F46 :                     ; --------------------------------------------------------
(1)  874/  882F46 :                     
(1)  875/  882F46 :                     ; --------------------------------------------------------
(1)  876/  882F46 :                     ; Video_DmaMkEntry
(1)  877/  882F46 :                     ;
(1)  878/  882F46 :                     ; Sets a new DMA transfer task to the Blast list
(1)  879/  882F46 :                     ;
(1)  880/  882F46 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  881/  882F46 :                     ;
(1)  882/  882F46 :                     ; d0 | LONG - Art data
(1)  883/  882F46 :                     ; d1 | WORD - VRAM location
(1)  884/  882F46 :                     ; d2 | WORD - Size
(1)  885/  882F46 :                     ;
(1)  886/  882F46 :                     ; Breaks:
(1)  887/  882F46 :                     ; d6-d7,a6
(1)  888/  882F46 :                     ; --------------------------------------------------------
(1)  889/  882F46 :                     
(1)  890/  882F46 :                     Video_DmaMkEntry:
(1)  891/  882F46 : 31FC 0001 A5F2      		move.w	#1,(RAM_VdpDmaMod).w
(1)  892/  882F4C : 4DF8 A390           		lea	(RAM_VdpDmaList).w,a6
(1)  893/  882F50 : 3E38 A5F0           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  894/  882F54 : DCC7                		adda	d7,a6
(1)  895/  882F56 : DE7C 000E           		add.w	#7*2,d7
(1)  896/  882F5A : 31C7 A5F0           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  897/  882F5E : 3E02                		move.w	d2,d7			; Length
(1)  898/  882F60 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  899/  882F66 : E24F                		lsr.w	#1,d7
(1)  900/  882F68 : 1C07                		move.b	d7,d6
(1)  901/  882F6A : 4846                		swap	d6
(1)  902/  882F6C : E04F                		lsr.w	#8,d7
(1)  903/  882F6E : 1C07                		move.b	d7,d6
(1)  904/  882F70 : 4846                		swap	d6
(1)  905/  882F72 : 2CC6                		move.l	d6,(a6)+
(1)  906/  882F74 : 2E00                		move.l	d0,d7			; Source
(1)  907/  882F76 : E28F                  		lsr.l	#1,d7
(1)  908/  882F78 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1)  909/  882F7E : 1C07                 		move.b	d7,d6
(1)  910/  882F80 : E08F                 		lsr.l	#8,d7
(1)  911/  882F82 : 4846                 		swap	d6
(1)  912/  882F84 : 1C07                 		move.b	d7,d6
(1)  913/  882F86 : 2CC6                 		move.l	d6,(a6)+
(1)  914/  882F88 : 3C3C 9700            		move.w	#$9700,d6
(1)  915/  882F8C : E08F                 		lsr.l	#8,d7
(1)  916/  882F8E : 1C07                 		move.b	d7,d6
(1)  917/  882F90 : 3CC6                 		move.w	d6,(a6)+
(1)  918/  882F92 : 3E01                		move.w	d1,d7			; Destination
(1)  919/  882F94 :                     ; 		and.w	#$7FF,d7
(1)  920/  882F94 :                     ; 		lsl.w	#5,d7
(1)  921/  882F94 : 3C07                		move.w	d7,d6
(1)  922/  882F96 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1)  923/  882F9C : 0047 4000           		ori.w	#$4000,d7
(1)  924/  882FA0 : E04E                		lsr.w	#8,d6
(1)  925/  882FA2 : EC4E                		lsr.w	#6,d6
(1)  926/  882FA4 : 0246 0003           		andi.w	#%11,d6
(1)  927/  882FA8 : 0046 0080           		ori.w	#$80,d6
(1)  928/  882FAC : 3CC7                		move.w	d7,(a6)+
(1)  929/  882FAE : 3CC6                		move.w	d6,(a6)+
(1)  930/  882FB0 : 31FC 0000 A5F2      		move.w	#0,(RAM_VdpDmaMod).w
(1)  931/  882FB6 : 4E75                		rts
(1)  932/  882FB8 :                     
(1)  933/  882FB8 :                     ; --------------------------------------------------------
(1)  934/  882FB8 :                     ; Video_Fill
(1)  935/  882FB8 :                     ;
(1)  936/  882FB8 :                     ; Fill data to VRAM
(1)  937/  882FB8 :                     ;
(1)  938/  882FB8 :                     ; d0 | WORD - Bytes to fill
(1)  939/  882FB8 :                     ; d1 | WORD - VRAM position
(1)  940/  882FB8 :                     ; d2 | WORD - Size (WORDS)
(1)  941/  882FB8 :                     ;
(1)  942/  882FB8 :                     ; Breaks:
(1)  943/  882FB8 :                     ; d6-d7,a6
(1)  944/  882FB8 :                     ; --------------------------------------------------------
(1)  945/  882FB8 :                     
(1)  946/  882FB8 :                     Video_Fill:
(1)  947/  882FB8 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  948/  882FBE : 3E3C 8100           		move.w	#$8100,d7
(1)  949/  882FC2 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  950/  882FC6 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  951/  882FCA : 3C87                		move.w	d7,(a6)
(1)  952/  882FCC : 3E16                .dmaw:		move.w	(a6),d7
(1)  953/  882FCE : 0807 0001           		btst	#bitDma,d7
(1)  954/  882FD2 : 66F8                		bne.s	.dmaw
(1)  955/  882FD4 : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1)  956/  882FD8 : 3E02                		move.w	d2,d7		; d2 - Size
(1)  957/  882FDA : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  958/  882FE0 : 1C07                		move.b	d7,d6
(1)  959/  882FE2 : 4846                		swap	d6
(1)  960/  882FE4 : E04F                		lsr.w	#8,d7
(1)  961/  882FE6 : 1C07                		move.b	d7,d6
(1)  962/  882FE8 : 4846                		swap	d6
(1)  963/  882FEA : 2C86                		move.l	d6,(a6)
(1)  964/  882FEC : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1)  965/  882FF0 : 3E01                		move.w	d1,d7		; d1 - Destination
(1)  966/  882FF2 :                     ; 		lsl.w	#5,d7
(1)  967/  882FF2 : 3C07                		move.w	d7,d6
(1)  968/  882FF4 : 0246 3FFF           		andi.w	#$3FFF,d6
(1)  969/  882FF8 : 0046 4000           		ori.w	#$4000,d6
(1)  970/  882FFC : 4846                		swap	d6
(1)  971/  882FFE : 3C07                		move.w	d7,d6
(1)  972/  883000 : E04E                		lsr.w	#8,d6
(1)  973/  883002 : EC4E                		lsr.w	#6,d6
(1)  974/  883004 : 0246 0003           		andi.w	#%11,d6
(1)  975/  883008 : 0046 0080           		ori.w	#$80,d6
(1)  976/  88300C : 2C86                		move.l	d6,(a6)
(1)  977/  88300E : 3D40 FFFC           		move.w	d0,-4(a6)
(1)  978/  883012 : 3E16                .dmawe:		move.w	(a6),d7
(1)  979/  883014 : 0807 0001           		btst	#bitDma,d7
(1)  980/  883018 : 66F8                		bne.s	.dmawe
(1)  981/  88301A : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1)  982/  88301E : 3E3C 8100           		move.w	#$8100,d7
(1)  983/  883022 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)  984/  883026 : 3C87                		move.w	d7,(a6)
(1)  985/  883028 : 4E75                		rts
(1)  986/  88302A :                     
(1)  987/  88302A :                     ; --------------------------------------------------------
(1)  988/  88302A :                     ; Video_Copy
(1)  989/  88302A :                     ;
(1)  990/  88302A :                     ; Copy VRAM data to another location
(1)  991/  88302A :                     ;
(1)  992/  88302A :                     ; d0 | WORD - VRAM Source
(1)  993/  88302A :                     ; d1 | WORD - VRAM Destination
(1)  994/  88302A :                     ; d2 | WORD - Size
(1)  995/  88302A :                     ;
(1)  996/  88302A :                     ; Breaks:
(1)  997/  88302A :                     ; d6-d7,a6
(1)  998/  88302A :                     ; --------------------------------------------------------
(1)  999/  88302A :                     
(1) 1000/  88302A :                     ; TODO: test if this works again...
(1) 1001/  88302A :                     
(1) 1002/  88302A :                     Video_Copy:
(1) 1003/  88302A : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1004/  883030 : 3E3C 8100           		move.w	#$8100,d7
(1) 1005/  883034 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1) 1006/  883038 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1007/  88303C : 3C87                		move.w	d7,(a6)
(1) 1008/  88303E : 3E16                .dmaw:		move.w	(a6),d7
(1) 1009/  883040 : 0807 0001           		btst	#bitDma,d7
(1) 1010/  883044 : 66F8                		bne.s	.dmaw
(1) 1011/  883046 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1012/  88304A : 3E02                		move.w	d2,d7			; SIZE
(1) 1013/  88304C : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1014/  883052 :                     ; 		lsr.w	#1,d7
(1) 1015/  883052 : 1C07                		move.b	d7,d6
(1) 1016/  883054 : 4846                		swap	d6
(1) 1017/  883056 : E04F                		lsr.w	#8,d7
(1) 1018/  883058 : 1C07                		move.b	d7,d6
(1) 1019/  88305A : 4846                		swap	d6
(1) 1020/  88305C : 2C86                		move.l	d6,(a6)
(1) 1021/  88305E : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1022/  883064 : 3E00                		move.w	d0,d7
(1) 1023/  883066 : 1C07                		move.b	d7,d6
(1) 1024/  883068 : 4846                		swap	d6
(1) 1025/  88306A : E04F                		lsr.w	#8,d7
(1) 1026/  88306C : 1C07                		move.b	d7,d6
(1) 1027/  88306E : 2C86                		move.l	d6,(a6)
(1) 1028/  883070 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1029/  883074 : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1030/  883076 :                     ; 		lsl.w	#5,d7
(1) 1031/  883076 : 3C07                		move.w	d7,d6
(1) 1032/  883078 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1033/  88307C : 0046 4000           		ori.w	#$4000,d6
(1) 1034/  883080 : 4846                		swap	d6
(1) 1035/  883082 : 3C07                		move.w	d7,d6
(1) 1036/  883084 : E04E                		lsr.w	#8,d6
(1) 1037/  883086 : EC4E                		lsr.w	#6,d6
(1) 1038/  883088 : 0246 0003           		andi.w	#%11,d6
(1) 1039/  88308C : 0046 00C0           		ori.w	#$C0,d6
(1) 1040/  883090 : 2C86                		move.l	d6,(a6)
(1) 1041/  883092 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1042/  883096 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1043/  883098 : 0807 0001           		btst	#bitDma,d7
(1) 1044/  88309C : 66F8                		bne.s	.dmawe
(1) 1045/  88309E : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1046/  8830A2 : 3E3C 8100           		move.w	#$8100,d7
(1) 1047/  8830A6 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1) 1048/  8830AA : 3C87                		move.w	d7,(a6)
(1) 1049/  8830AC : 4E75                		rts
(1) 1050/  8830AE :                     
(1) 1051/  8830AE :                     ; --------------------------------------------------------
(1) 1052/  8830AE :                     ; Video_DmaBlast
(1) 1053/  8830AE :                     ;
(1) 1054/  8830AE :                     ; Process DMA tasks from a predefined list in RAM
(1) 1055/  8830AE :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1056/  8830AE :                     ;
(1) 1057/  8830AE :                     ; Breaks:
(1) 1058/  8830AE :                     ; d5-d7,a3-a4
(1) 1059/  8830AE :                     ; --------------------------------------------------------
(1) 1060/  8830AE :                     
(1) 1061/  8830AE :                     ; Entry format:
(1) 1062/  8830AE :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1063/  8830AE :                     ; $40000080 (vdp destination + dma bit)
(1) 1064/  8830AE :                     
(1) 1065/  8830AE :                     Video_DmaBlast:
(1) 1066/  8830AE : 4EF9 FFFF A918      		jmp	(RAMDMA_Blast+RAM_DmaCode).l
(1) 1067/  8830B4 :                     
(1) 1068/  8830B4 :                     ; --------------------------------------------------------
(1) 1069/  8830B4 :                     ; Load graphics using DMA, direct
(1) 1070/  8830B4 :                     ;
(1) 1071/  8830B4 :                     ; d0 | LONG - Art data
(1) 1072/  8830B4 :                     ; d1 | WORD - VRAM location
(1) 1073/  8830B4 :                     ; d2 | WORD - Size
(1) 1074/  8830B4 :                     ;
(1) 1075/  8830B4 :                     ; *** For faster transfers call this during VBlank ***
(1) 1076/  8830B4 :                     ;
(1) 1077/  8830B4 :                     ; Breaks:
(1) 1078/  8830B4 :                     ; d5-d7,a4-a6
(1) 1079/  8830B4 :                     ; --------------------------------------------------------
(1) 1080/  8830B4 :                     
(1) 1081/  8830B4 :                     Video_LoadArt:
(1) 1082/  8830B4 : 4EF9 FFFF A862      		jmp	(RAMDMA_Load+RAM_DmaCode).l
(1) 1083/  8830BA :                     
(1) 1084/  8830BA :                     ; ====================================================================
(1) 1085/  8830BA :                     ; --------------------------------------------------------
(1) 1086/  8830BA :                     ; Code stored on RAM, these use the RV bit
(1) 1087/  8830BA :                     ; --------------------------------------------------------
(1) 1088/  8830BA :                     
(1) 1089/  8830BA :                     ; *** RAM CODE ***
(1) 1090/  8830BA :                     
(1) 1091/  8830BA :                     dmacode_start:
(1) 1092/       0 :                     		phase 0
(1) 1093/       0 :                     
(1) 1094/       0 :                     ; Single DMA process
(1) 1095/       0 :                     RAMDMA_Load:
(1) 1096/       0 : 40E7                		move.w	sr,-(sp)
(1) 1097/       2 : 007C 0700           		or	#$700,sr
(1) 1098/       6 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1099/       C : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1100/      10 : 1C38 A60B           		move.b	(RAM_VdpRegs+1),d6
(1) 1101/      14 : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1102/      18 : 3886                		move.w	d6,(a4)
(1) 1103/      1A : 3C02                		move.w	d2,d6			; Length
(1) 1104/      1C : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1105/      22 : E24E                		lsr.w	#1,d6
(1) 1106/      24 : 1A06                		move.b	d6,d5
(1) 1107/      26 : 4845                		swap	d5
(1) 1108/      28 : E04E                		lsr.w	#8,d6
(1) 1109/      2A : 1A06                		move.b	d6,d5
(1) 1110/      2C : 4845                		swap	d5
(1) 1111/      2E : 2885                		move.l	d5,(a4)
(1) 1112/      30 : 2C00                		move.l	d0,d6			; Source
(1) 1113/      32 : E28E                  		lsr.l	#1,d6
(1) 1114/      34 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1115/      3A : 1A06                 		move.b	d6,d5
(1) 1116/      3C : E08E                 		lsr.l	#8,d6
(1) 1117/      3E : 4845                 		swap	d5
(1) 1118/      40 : 1A06                 		move.b	d6,d5
(1) 1119/      42 : 2885                 		move.l	d5,(a4)
(1) 1120/      44 : 3A3C 9700            		move.w	#$9700,d5
(1) 1121/      48 : E08E                 		lsr.l	#8,d6
(1) 1122/      4A : 1A06                 		move.b	d6,d5
(1) 1123/      4C : 3885                 		move.w	d5,(a4)
(1) 1124/      4E : 3C01                		move.w	d1,d6			; Destination
(1) 1125/      50 : 3A06                		move.w	d6,d5
(1) 1126/      52 : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1127/      58 : 0046 4000           		ori.w	#$4000,d6
(1) 1128/      5C : E04D                		lsr.w	#8,d5
(1) 1129/      5E : EC4D                		lsr.w	#6,d5
(1) 1130/      60 : 0245 0003           		andi.w	#%11,d5
(1) 1131/      64 : 0045 0080           		ori.w	#$80,d5
(1) 1132/      68 : 2E00                		move.l	d0,d7
(1) 1133/      6A : 4847                		swap	d7
(1) 1134/      6C : E04F                		lsr.w	#8,d7
(1) 1135/      6E : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1136/      72 : 672E                		beq.s	.from_ram
(1) 1137/      74 : 4EB9 0088 34F6      		jsr	System_Dma_Enter
(1) 1138/      7A : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1139/      82 : 3F05                 		move.w	d5,-(sp)
(1) 1140/      84 : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1141/      86 : 389F                		move.w	(sp)+,(a4)			; *** Second write, CPU freezes until DMA ends
(1) 1142/      88 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1143/      90 : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1144/      94 : 1C38 A60B           		move.b	(RAM_VdpRegs+1),d6
(1) 1145/      98 : 3886                		move.w	d6,(a4)
(1) 1146/      9A : 46DF                		move.w	(sp)+,sr
(1) 1147/      9C : 4EF9 0088 34FC      		jmp	System_Dma_Exit
(1) 1148/      A2 :                     .from_ram:
(1) 1149/      A2 : 3887                		move.w	d7,(a4)
(1) 1150/      A4 : 3F05                 		move.w	d5,-(sp)
(1) 1151/      A6 : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1152/      A8 : 3E3C 8100           		move.w	#$8100,d7
(1) 1153/      AC : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1) 1154/      B0 : 3887                		move.w	d7,(a4)
(1) 1155/      B2 : 46DF                		move.w	(sp)+,sr
(1) 1156/      B4 : 4E75                		rts
(1) 1157/      B6 :                     
(1) 1158/      B6 :                     ; DMA blast process
(1) 1159/      B6 :                     RAMDMA_Blast:
(1) 1160/      B6 : 4A78 A5F2           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1161/      BA : 666A                		bne.s	.exit
(1) 1162/      BC : 4A78 A5F0           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1163/      C0 : 6764                		beq.s	.exit
(1) 1164/      C2 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1165/      C8 : 47F8 A390           		lea	(RAM_VdpDmaList).w,a3
(1) 1166/      CC : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1167/      D0 : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1) 1168/      D4 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1169/      D8 : 3887                		move.w	d7,(a4)
(1) 1170/      DA : 4EB9 0088 34F6      		jsr	System_Dma_Enter		; Request Z80 stop and SH2 backup
(1) 1171/      E0 : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1172/      E8 : 4A78 A5F0           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1173/      EC : 6720                		beq.s	.end
(1) 1174/      EE : 2893                		move.l	(a3),(a4)			; Size
(1) 1175/      F0 : 429B                		clr.l	(a3)+
(1) 1176/      F2 : 2893                		move.l	(a3),(a4)			; Source
(1) 1177/      F4 : 429B                		clr.l	(a3)+
(1) 1178/      F6 : 3893                		move.w	(a3),(a4)
(1) 1179/      F8 : 425B                		clr.w	(a3)+
(1) 1180/      FA : 3C13                		move.w	(a3),d6				; Destination
(1) 1181/      FC : 425B                		clr.w	(a3)+
(1) 1182/      FE : 3A13                		move.w	(a3),d5
(1) 1183/     100 : 425B                		clr.w	(a3)+
(1) 1184/     102 : 3886                		move.w	d6,(a4)
(1) 1185/     104 : 3885                		move.w	d5,(a4)
(1) 1186/     106 : 0478 000E A5F0      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1187/     10C : 60DA                		bra.s	.next
(1) 1188/     10E :                     .end:
(1) 1189/     10E : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1190/     116 : 4EB9 0088 34FC      		jsr	System_Dma_Exit			; Resume Z80 and SH2 direct
(1) 1191/     11C : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1192/     120 : 1E38 A60B           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1193/     124 : 3887                		move.w	d7,(a4)
(1) 1194/     126 :                     .exit:
(1) 1195/     126 : 4E75                		rts
(1) 1196/    31E2 :                     		dephase
(1) 1197/  8831E2 :                     		phase $880000+*
(1) 1198/  8831E2 :                     dmacode_end:
(1) 1199/  8831E2 :                     
(1) 1200/  8831E2 :                     ; ====================================================================
(1) 1201/  8831E2 :                     ; ----------------------------------------------------------------
(1) 1202/  8831E2 :                     ; Video routines for 32X
(1) 1203/  8831E2 :                     ; ----------------------------------------------------------------
(1) 1204/  8831E2 :                     
(1) 1205/  8831E2 :                     ; --------------------------------------------------------
(1) 1206/  8831E2 :                     ; Video_Mars_GfxMode
(1) 1207/  8831E2 :                     ; Sets graphics mode on the 32X side
(1) 1208/  8831E2 :                     ;
(1) 1209/  8831E2 :                     ; Input:
(1) 1210/  8831E2 :                     ; d0 - Graphics mode
(1) 1211/  8831E2 :                     ; --------------------------------------------------------
(1) 1212/  8831E2 :                     
(1) 1213/  8831E2 :                     Video_Mars_GfxMode:
(1) 1214/  8831E2 : 3C00                		move.w	d0,d6
(1) 1215/  8831E4 : CC7C 0007           		and.w	#%00000111,d6			; Current limit: 8 modes
(1) 1216/  8831E8 : 08C6 0007           		bset	#7,d6
(1) 1217/  8831EC : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Grab current comm12
(1) 1218/  8831F2 : CE7C FF00           		and.w	#$FF00,d7			; Clear our byte
(1) 1219/  8831F6 : 8E46                		or.w	d6,d7				; merge changes
(1) 1220/  8831F8 : 33C7 00A1 512C      		move.w	d7,(sysmars_reg+comm12).l	; Write into it.
(1) 1221/  8831FE : 6010                		bra	Video_Mars_WaitInit
(1) 1222/  883200 :                     
(1) 1223/  883200 :                     ; --------------------------------------------------------
(1) 1224/  883200 :                     ; Video_MarsRedraw
(1) 1225/  883200 :                     ;
(1) 1226/  883200 :                     ; Call this to redraw the entire screen
(1) 1227/  883200 :                     ; on the 32X side.
(1) 1228/  883200 :                     ; --------------------------------------------------------
(1) 1229/  883200 :                     
(1) 1230/  883200 :                     Video_Mars_Redraw:
(1) 1231/  883200 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7
(1) 1232/  883206 : 08C7 0007           		bset	#7,d7
(1) 1233/  88320A : 33C7 00A1 512C      		move.w	d7,(sysmars_reg+comm12).l
(1) 1234/  883210 :                     Video_Mars_WaitInit:
(1) 1235/  883210 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7
(1) 1236/  883216 : 0807 0007           		btst	#7,d7
(1) 1237/  88321A : 66F4                		bne.s	Video_Mars_WaitInit
(1) 1238/  88321C : 4E75                		rts
(1) 1239/  88321E :                     
(1) 1240/  88321E :                     ; --------------------------------------------------------
(1) 1241/  88321E :                     ; Video_Mars_WaitFrame
(1) 1242/  88321E :                     ;
(1) 1243/  88321E :                     ;
(1) 1244/  88321E :                     ; on the 32X side.
(1) 1245/  88321E :                     ; --------------------------------------------------------
(1) 1246/  88321E :                     
(1) 1247/  88321E :                     Video_Mars_WaitFrame:
(1) 1248/  88321E : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Set R bit
(1) 1249/  883224 : 08C7 0006           		bset	#6,d7
(1) 1250/  883228 : 33C7 00A1 512C      		move.w	d7,(sysmars_reg+comm12).l
(1) 1251/  88322E :                     .wait:
(1) 1252/  88322E : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7
(1) 1253/  883234 : 0807 0006           		btst	#6,d7
(1) 1254/  883238 : 66F4                		bne.s	.wait
(1) 1255/  88323A : 4E75                		rts
(1) 1256/  88323C :                     
(1) 1257/  88323C :                     ; --------------------------------------------------------
(1) 1258/  88323C :                     ; Video_LoadPal_Mars
(1) 1259/  88323C :                     ;
(1) 1260/  88323C :                     ; Load Indexed palette directly to Buffer
(1) 1261/  88323C :                     ;
(1) 1262/  88323C :                     ; d0 - Start at
(1) 1263/  88323C :                     ; d1 - Number of colors
(1) 1264/  88323C :                     ; d2 - Priority bit OFF/ON
(1) 1265/  88323C :                     ; --------------------------------------------------------
(1) 1266/  88323C :                     
(1) 1267/  88323C :                     Video_FadePal_Mars:
(1) 1268/  88323C : 4DF8 A190           		lea	(RAM_MdMarsPalFd),a6
(1) 1269/  883240 : 4278 A604           		clr.w	(RAM_FadeMarsTmr).w
(1) 1270/  883244 : 6004                		bra.s	vidMars_Pal
(1) 1271/  883246 :                     Video_LoadPal_Mars:
(1) 1272/  883246 : 4DF8 AA82           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1273/  88324A :                     vidMars_Pal:
(1) 1274/  88324A : 2A48                		move.l	a0,a5
(1) 1275/  88324C : 7E00                		moveq	#0,d7
(1) 1276/  88324E : 3E00                		move.w	d0,d7
(1) 1277/  883250 : DE47                		add.w	d7,d7
(1) 1278/  883252 : DCC7                		adda	d7,a6
(1) 1279/  883254 : 3E01                		move.w	d1,d7
(1) 1280/  883256 : 9E7C 0001           		sub.w	#1,d7
(1) 1281/  88325A : 3C02                		move.w	d2,d6
(1) 1282/  88325C : CC7C 0001           		and.w	#1,d6
(1) 1283/  883260 : E25E                		ror.w	#1,d6
(1) 1284/  883262 :                     .loop:
(1) 1285/  883262 : 3A1D                		move.w	(a5)+,d5
(1) 1286/  883264 : 8A46                		or.w	d6,d5
(1) 1287/  883266 : 3CC5                		move.w	d5,(a6)+
(1) 1288/  883268 : 51CF FFF8           		dbf	d7,.loop
(1) 1289/  88326C : 4E75                		rts
(1) 1290/  88326E :                     
(1) 1291/  88326E :                     ; --------------------------------------------------------
(1) 1292/  88326E :                     ; Video_MarsPalFade
(1) 1293/  88326E :                     ;
(1) 1294/  88326E :                     ; a0 - Palette data
(1) 1295/  88326E :                     ; d0 - Number of colors
(1) 1296/  88326E :                     ; d1 - Speed
(1) 1297/  88326E :                     ;
(1) 1298/  88326E :                     ; RAM_ReqFadeMars: (WORD)
(1) 1299/  88326E :                     ; $00 - No task (or finished)
(1) 1300/  88326E :                     ; $01 - Fade in
(1) 1301/  88326E :                     ; $02 - Fade out to black
(1) 1302/  88326E :                     ;
(1) 1303/  88326E :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 1304/  88326E :                     ; --------------------------------------------------------
(1) 1305/  88326E :                     
(1) 1306/  88326E :                     ; TODO: luego ver que hago con el priority bit
(1) 1307/  88326E :                     
(1) 1308/  88326E :                     Video_MarsPalFade:
(1) 1309/  88326E : 0478 0001 A604      		sub.w	#1,(RAM_FadeMarsTmr).w
(1) 1310/  883274 : 6A14                		bpl.s	.active
(1) 1311/  883276 : 31F8 A602 A604      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 1312/  88327C : 3E38 A5FE           		move.w	(RAM_FadeMarsReq).w,d7
(1) 1313/  883280 : DE47                		add.w	d7,d7
(1) 1314/  883282 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 1315/  883286 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 1316/  88328A :                     .active:
(1) 1317/  88328A : 4E75                		rts
(1) 1318/  88328C :                     
(1) 1319/  88328C :                     ; --------------------------------------------
(1) 1320/  88328C :                     
(1) 1321/  88328C :                     .fade_list:
(1) 1322/  88328C : 0006                		dc.w .fade_done-.fade_list
(1) 1323/  88328E : 0008                		dc.w .fade_in-.fade_list
(1) 1324/  883290 : 00B2                		dc.w .fade_out-.fade_list
(1) 1325/  883292 :                     
(1) 1326/  883292 :                     ; --------------------------------------------
(1) 1327/  883292 :                     ; No fade or finished.
(1) 1328/  883292 :                     ; --------------------------------------------
(1) 1329/  883292 :                     
(1) 1330/  883292 :                     .fade_done:
(1) 1331/  883292 : 4E75                		rts
(1) 1332/  883294 :                     
(1) 1333/  883294 :                     ; --------------------------------------------
(1) 1334/  883294 :                     ; Fade in
(1) 1335/  883294 :                     ; --------------------------------------------
(1) 1336/  883294 :                     
(1) 1337/  883294 :                     .fade_in:
(1) 1338/  883294 : 4DF8 A190           		lea	(RAM_MdMarsPalFd),a6
(1) 1339/  883298 : 4BF8 AA82           		lea	(RAM_MdDreq+Dreq_Palette).w,a5
(1) 1340/  88329C : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1341/  8832A0 : 3238 A600           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1342/  8832A4 : 3C00                		move.w	d0,d6
(1) 1343/  8832A6 : 4846                		swap	d6
(1) 1344/  8832A8 : 907C 0001           		sub.w	#1,d0
(1) 1345/  8832AC :                     .nxt_pal:
(1) 1346/  8832AC : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1347/  8832AE : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1348/  8832B0 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 1349/  8832B2 : 3607                		move.w	d7,d3		; RED
(1) 1350/  8832B4 : 3806                		move.w	d6,d4
(1) 1351/  8832B6 : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 1352/  8832BA : C87C 001F           		and.w	#%0000000000011111,d4
(1) 1353/  8832BE : C67C 001F           		and.w	#%0000000000011111,d3
(1) 1354/  8832C2 : D841                		add.w	d1,d4
(1) 1355/  8832C4 : B843                		cmp.w	d3,d4
(1) 1356/  8832C6 : 6506                		bcs.s	.no_red
(1) 1357/  8832C8 : 3803                		move.w	d3,d4
(1) 1358/  8832CA : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1359/  8832CE :                     .no_red:
(1) 1360/  8832CE : 8C44                		or.w	d4,d6
(1) 1361/  8832D0 : EB49                		lsl.w	#5,d1
(1) 1362/  8832D2 : 3607                		move.w	d7,d3		; GREEN
(1) 1363/  8832D4 : 3806                		move.w	d6,d4
(1) 1364/  8832D6 : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 1365/  8832DA : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 1366/  8832DE : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 1367/  8832E2 : D841                		add.w	d1,d4
(1) 1368/  8832E4 : B843                		cmp.w	d3,d4
(1) 1369/  8832E6 : 6506                		bcs.s	.no_grn
(1) 1370/  8832E8 : 3803                		move.w	d3,d4
(1) 1371/  8832EA : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1372/  8832EE :                     .no_grn:
(1) 1373/  8832EE : 8C44                		or.w	d4,d6
(1) 1374/  8832F0 : EB49                		lsl.w	#5,d1
(1) 1375/  8832F2 : 3607                		move.w	d7,d3		; BLUE
(1) 1376/  8832F4 : 3806                		move.w	d6,d4
(1) 1377/  8832F6 : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 1378/  8832FA : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 1379/  8832FE : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 1380/  883302 : D841                		add.w	d1,d4
(1) 1381/  883304 : B843                		cmp.w	d3,d4
(1) 1382/  883306 : 6506                		bcs.s	.no_blu
(1) 1383/  883308 : 3803                		move.w	d3,d4
(1) 1384/  88330A : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1385/  88330E :                     .no_blu:
(1) 1386/  88330E : 8C44                		or.w	d4,d6
(1) 1387/  883310 : E049                		lsr.w	#8,d1
(1) 1388/  883312 : E449                		lsr.w	#2,d1
(1) 1389/  883314 : CE7C 8000           		and.w	#$8000,d7
(1) 1390/  883318 : 8C47                		or.w	d7,d6
(1) 1391/  88331A : 3AC6                		move.w	d6,(a5)+
(1) 1392/  88331C : DCFC 0002           		adda	#2,a6
(1) 1393/  883320 : B47C 0007           		cmp.w	#%111,d2
(1) 1394/  883324 : 6608                		bne.s	.no_fnsh
(1) 1395/  883326 : 4846                		swap	d6
(1) 1396/  883328 : 9C7C 0001           		sub.w	#1,d6
(1) 1397/  88332C : 4846                		swap	d6
(1) 1398/  88332E :                     .no_fnsh:
(1) 1399/  88332E : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 1400/  883332 : 4846                		swap	d6
(1) 1401/  883334 : 4A46                		tst.w	d6
(1) 1402/  883336 : 6604                		bne.s	.no_move
(1) 1403/  883338 : 4278 A5FE           		clr.w	(RAM_FadeMarsReq).w
(1) 1404/  88333C :                     .no_move:
(1) 1405/  88333C : 4E75                		rts
(1) 1406/  88333E :                     
(1) 1407/  88333E :                     ; --------------------------------------------
(1) 1408/  88333E :                     ; Fade out
(1) 1409/  88333E :                     ; --------------------------------------------
(1) 1410/  88333E :                     
(1) 1411/  88333E :                     .fade_out:
(1) 1412/  88333E : 4DF8 AA82           		lea	(RAM_MdDreq+Dreq_Palette).w,a6
(1) 1413/  883342 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 1414/  883346 : 3238 A600           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 1415/  88334A : 3C00                		move.w	d0,d6
(1) 1416/  88334C : 4846                		swap	d6
(1) 1417/  88334E : 907C 0001           		sub.w	#1,d0
(1) 1418/  883352 :                     .nxt_pal_o:
(1) 1419/  883352 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 1420/  883354 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 1421/  883356 : 3C07                		move.w	d7,d6
(1) 1422/  883358 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 1423/  88335C : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 1424/  883360 : 9C41                		sub.w	d1,d6
(1) 1425/  883362 : 6A06                		bpl.s	.no_red_o
(1) 1426/  883364 : 4246                		clr.w	d6
(1) 1427/  883366 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 1428/  88336A :                     .no_red_o:
(1) 1429/  88336A : 8E46                		or.w	d6,d7
(1) 1430/  88336C : EB49                		lsl.w	#5,d1
(1) 1431/  88336E : 3C07                		move.w	d7,d6
(1) 1432/  883370 : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 1433/  883374 : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 1434/  883378 : 9C41                		sub.w	d1,d6
(1) 1435/  88337A : 6A06                		bpl.s	.no_grn_o
(1) 1436/  88337C : 4246                		clr.w	d6
(1) 1437/  88337E : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 1438/  883382 :                     .no_grn_o:
(1) 1439/  883382 : 8E46                		or.w	d6,d7
(1) 1440/  883384 : EB49                		lsl.w	#5,d1
(1) 1441/  883386 : 3C07                		move.w	d7,d6
(1) 1442/  883388 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 1443/  88338C : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 1444/  883390 : 9C41                		sub.w	d1,d6
(1) 1445/  883392 : 6A06                		bpl.s	.no_blu_o
(1) 1446/  883394 : 4246                		clr.w	d6
(1) 1447/  883396 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 1448/  88339A :                     .no_blu_o:
(1) 1449/  88339A : 8E46                		or.w	d6,d7
(1) 1450/  88339C : E049                		lsr.w	#8,d1
(1) 1451/  88339E : E449                		lsr.w	#2,d1
(1) 1452/  8833A0 : 3CC7                		move.w	d7,(a6)+
(1) 1453/  8833A2 : B47C 0007           		cmp.w	#%111,d2
(1) 1454/  8833A6 : 6608                		bne.s	.no_fnsh_o
(1) 1455/  8833A8 : 4846                		swap	d6
(1) 1456/  8833AA : 9C7C 0001           		sub.w	#1,d6
(1) 1457/  8833AE : 4846                		swap	d6
(1) 1458/  8833B0 :                     .no_fnsh_o:
(1) 1459/  8833B0 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 1460/  8833B4 : 4846                		swap	d6
(1) 1461/  8833B6 : 4A46                		tst.w	d6
(1) 1462/  8833B8 : 6604                		bne.s	.no_move_o
(1) 1463/  8833BA : 4278 A5FE           		clr.w	(RAM_FadeMarsReq).w
(1) 1464/  8833BE :                     .no_move_o:
(1) 1465/  8833BE : 4E75                		rts
(1) 1466/  8833C0 :                     
      34/  8833C0 :                     		include	"system/md/system.asm"
(1)    1/  8833C0 :                     ; ====================================================================
(1)    2/  8833C0 :                     ; ----------------------------------------------------------------
(1)    3/  8833C0 :                     ; Genesis system routines
(1)    4/  8833C0 :                     ; ----------------------------------------------------------------
(1)    5/  8833C0 :                     
(1)    6/  8833C0 :                     ; ====================================================================
(1)    7/  8833C0 :                     ; --------------------------------------------------------
(1)    8/  8833C0 :                     ; Init System
(1)    9/  8833C0 :                     ; 
(1)   10/  8833C0 :                     ; Uses:
(1)   11/  8833C0 :                     ; a0-a2,d0-d1
(1)   12/  8833C0 :                     ; --------------------------------------------------------
(1)   13/  8833C0 :                     
(1)   14/  8833C0 :                     System_Init:
(1)   15/  8833C0 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)   16/  8833C4 : 40E7                		move.w	sr,-(sp)
(1)   17/  8833C6 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)   18/  8833CE :                     .wait:
(1)   19/  8833CE : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)   20/  8833D6 : 66F6                		bne.s	.wait
(1)   21/  8833D8 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)   22/  8833DA : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)   23/  8833E0 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)   24/  8833E6 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)   25/  8833EC : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)   26/  8833F4 : 41F8 A622           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)   27/  8833F8 : 323C 0010           		move.w	#sizeof_input-1/2,d1
(1)   28/  8833FC : 7000                		moveq	#0,d0
(1)   29/  8833FE :                     .clrinput:
(1)   30/  8833FE : 30FC 0000           		move.w	#0,(a0)+
(1)   31/  883402 : 51C9 FFFA           		dbf	d1,.clrinput
(1)   32/  883406 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)   33/  88340A : 33C0 FFFF AA6E       		move.w	d0,(RAM_MdMarsVInt).l
(1)   34/  883410 : 33C0 FFFF AA74      		move.w	d0,(RAM_MdMarsHInt).l
(1)   35/  883416 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)   36/  88341C : 223C 9511 6102      		move.l	#$95116102,d1
(1)   37/  883422 : 23C0 FFFF AA62      		move.l	d0,(RAM_SysRandVal).l
(1)   38/  883428 : 23C1 FFFF AA66      		move.l	d1,(RAM_SysRandSeed).l
(1)   39/  88342E : 203C 0088 3904      		move.l	#VInt_Default,d0	; Set default ints
(1)   40/  883434 : 223C 0088 391C      		move.l	#Hint_Default,d1
(1)   41/  88343A : 6100 0448           		bsr	System_SetInts
(1)   42/  88343E : 46DF                		move.w	(sp)+,sr
(1)   43/  883440 : 4E75                		rts
(1)   44/  883442 :                     
(1)   45/  883442 :                     ; --------------------------------------------------------
(1)   46/  883442 :                     ; System_WaitFrame
(1)   47/  883442 :                     ;
(1)   48/  883442 :                     ; Call this to wait and update next frame.
(1)   49/  883442 :                     ;
(1)   50/  883442 :                     ; This will also update the controllers, process DMA tasks
(1)   51/  883442 :                     ; from the BLAST list, and transfer the
(1)   52/  883442 :                     ; Genesis palette, sprites and the scrolling lines/2cells
(1)   53/  883442 :                     ; from RAM to VDP (Doesn't require RV bit)
(1)   54/  883442 :                     ; --------------------------------------------------------
(1)   55/  883442 :                     
(1)   56/  883442 :                     System_WaitFrame:
(1)   57/  883442 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)   58/  883448 : 3816                .wait_lag:	move.w	(a6),d4			; LAG frame?
(1)   59/  88344A : 0804 0003           		btst	#bitVBlk,d4
(1)   60/  88344E : 66F8                		bne.s	.wait_lag
(1)   61/  883450 : 6100 00BC           		bsr	System_MarsUpdate_Out	; Process DREQ now.
(1)   62/  883454 : 3816                .wait_in:	move.w	(a6),d4			; We are on DISPLAY, wait for VBlank
(1)   63/  883456 : 0804 0003           		btst	#bitVBlk,d4
(1)   64/  88345A : 67F8                		beq.s	.wait_in
(1)   65/  88345C : 6100 011A           		bsr	System_Input		; Read inputs FIRST
(1)   66/  883460 :                     
(1)   67/  883460 :                     	; DMA'd Scroll and Palette
(1)   68/  883460 :                     	; RV bit not needed here
(1)   69/  883460 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)   70/  883466 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1)   71/  88346A : 1E38 A60B           		move.b	(RAM_VdpRegs+1),d7
(1)   72/  88346E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)   73/  883472 : 3C87                		move.w	d7,(a6)
(1)   74/  883474 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)   75/  88347A : 2CBC 96CD 95F0      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)   76/  883480 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)   77/  883484 : 3CBC 4000           		move.w	#$4000,(a6)
(1)   78/  883488 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)   79/  88348C : 3C9F                		move.w	(sp)+,(a6)
(1)   80/  88348E : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)   81/  883494 : 2CBC 96CC 9510      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)   82/  88349A : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)   83/  88349E : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)   84/  8834A2 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)   85/  8834A6 : 3C9F                		move.w	(sp)+,(a6)
(1)   86/  8834A8 : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)   87/  8834AE : 2CBC 96CE 9518      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)   88/  8834B4 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)   89/  8834B8 : 3CBC 7800           		move.w	#$7800,(a6)
(1)   90/  8834BC : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)   91/  8834C0 : 3C9F                		move.w	(sp)+,(a6)
(1)   92/  8834C2 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)   93/  8834C8 : 2CBC 96D0 9548      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)   94/  8834CE : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)   95/  8834D2 : 3CBC C000           		move.w	#$C000,(a6)
(1)   96/  8834D6 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)   97/  8834DA : 3C9F                		move.w	(sp)+,(a6)
(1)   98/  8834DC : 3E3C 8100           		move.w	#$8100,d7
(1)   99/  8834E0 : 1E38 A60B           		move.b	(RAM_VdpRegs+1).w,d7
(1)  100/  8834E4 : 3C87                		move.w	d7,(a6)
(1)  101/  8834E6 : 6100 FBC6           		bsr	Video_DmaBlast		; Process DMA Blast list
(1)  102/  8834EA : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_Framecount).l
                    A606                
(1)  103/  8834F4 :                     
(1)  104/  8834F4 :                     ; 		lea	(vdp_ctrl),a6
(1)  105/  8834F4 :                     ; .wait_out:	move.w	(a6),d4
(1)  106/  8834F4 :                     ; 		btst	#bitVBlk,d4
(1)  107/  8834F4 :                     ; 		bne.s	.wait_out
(1)  108/  8834F4 :                     
(1)  109/  8834F4 : 4E75                		rts
(1)  110/  8834F6 :                     
(1)  111/  8834F6 :                     ; --------------------------------------------------------
(1)  112/  8834F6 :                     ; System_Dma_Enter, System_Dma_Exit
(1)  113/  8834F6 :                     ;
(1)  114/  8834F6 :                     ; Call these before entering or exiting any
(1)  115/  8834F6 :                     ; DMA ROM-to-VDP transfers
(1)  116/  8834F6 :                     ;
(1)  117/  8834F6 :                     ; Your Sound driver's z80 pause calls go here
(1)  118/  8834F6 :                     ; --------------------------------------------------------
(1)  119/  8834F6 :                     
(1)  120/  8834F6 :                     System_Dma_Enter:
(1)  121/  8834F6 : 6100 D5B8           		bsr	Sound_DMA_Pause
(1)  122/  8834FA : 4E75                		rts
(1)  123/  8834FC :                     
(1)  124/  8834FC :                     System_Dma_Exit:
(1)  125/  8834FC : 6100 D5EC           		bsr	Sound_DMA_Resume
(1)  126/  883500 : 4E75                		rts
(1)  127/  883502 :                     
(1)  128/  883502 :                     ; ====================================================================
(1)  129/  883502 :                     ; ----------------------------------------------------------------
(1)  130/  883502 :                     ; 32X ONLY
(1)  131/  883502 :                     ; ----------------------------------------------------------------
(1)  132/  883502 :                     
(1)  133/  883502 :                     ; --------------------------------------------------------
(1)  134/  883502 :                     ; System_MarsUpdate
(1)  135/  883502 :                     ;
(1)  136/  883502 :                     ; Call this on any change to the RAM_MdDreq area
(1)  137/  883502 :                     ;
(1)  138/  883502 :                     ; NOTE:
(1)  139/  883502 :                     ; Only call this OUTSIDE of VBlank.
(1)  140/  883502 :                     ; --------------------------------------------------------
(1)  141/  883502 :                     
(1)  142/  883502 :                     System_MarsUpdate:
(1)  143/  883502 : 3839 00C0 0004      		move.w	(vdp_ctrl),d4		; Got on VBlank?
(1)  144/  883508 : 0804 0003           		btst	#bitVBlk,d4
(1)  145/  88350C : 66F4                		bne.s	System_MarsUpdate
(1)  146/  88350E :                     System_MarsUpdate_Out:
(1)  147/  88350E : 41F8 AA82           		lea	(RAM_MdDreq),a0		; Send DREQ
(1)  148/  883512 : 303C 0660           		move.w	#sizeof_dreq,d0
(1)  149/  883516 :                     
(1)  150/  883516 :                     ; --------------------------------------------------------
(1)  151/  883516 :                     ; System_SendDreq
(1)  152/  883516 :                     ;
(1)  153/  883516 :                     ; Send data to the 32X using DREQ and CMD interrupt
(1)  154/  883516 :                     ;
(1)  155/  883516 :                     ; Input:
(1)  156/  883516 :                     ; a0 - LONG | Source data to transfer
(1)  157/  883516 :                     ; d0 - WORD | Size (aligned by 8, MUST end with 0 or 8)
(1)  158/  883516 :                     ;
(1)  159/  883516 :                     ; NOTE: THIS CODE ONLY WORKS PROPERLY ON THE
(1)  160/  883516 :                     ; $880000/$900000 AREAS. (FOR real hardware)
(1)  161/  883516 :                     ;
(1)  162/  883516 :                     ; CALL THIS OUTSIDE OF VBLANK ONLY.
(1)  163/  883516 :                     ; --------------------------------------------------------
(1)  164/  883516 :                     
(1)  165/  883516 :                     System_SendDreq:
(1)  166/  883516 : 40C7                		move.w	sr,d7
(1)  167/  883518 : 46FC 2700           		move.w	#$2700,sr
(1)  168/  88351C : 0839 0002 00A1 5107 .l1:		btst	#2,(sysmars_reg+dreqctl+1).l	; Wait until 68S finishes.
(1)  169/  883524 : 66F6                		bne.s	.l1
(1)  170/  883526 : 4BF9 00A1 5112      		lea	($A15112).l,a5			; a5 - DREQ FIFO port
(1)  171/  88352C : 3C00                		move.w	d0,d6				; Length in bytes
(1)  172/  88352E : E24E                		lsr.w	#1,d6				; d6 - (length/2)
(1)  173/  883530 : 33FC 0000 00A1 5106 		move.w	#0,(sysmars_reg+dreqctl).l	; Clear both 68S and RV
(1)  174/  883538 : 33C6 00A1 5110      		move.w	d6,(sysmars_reg+dreqlen).l	; Set transfer length (size/2)
(1)  175/  88353E : 08F9 0002 00A1 5107 		bset	#2,(sysmars_reg+dreqctl+1).l	; Set 68S bit
(1)  176/  883546 : 08F9 0000 00A1 5103 		bset	#0,(sysmars_reg+standby).l	; Request Master CMD
(1)  177/  88354E :                     ; .wait_cmd:	btst	#0,(sysmars_reg+standby).l	; <-- not needed, we'll use this bit instead:
(1)  178/  88354E :                     ; 		bne.s	.wait_cmd
(1)  179/  88354E : 0839 0006 00A1 512C .wait_bit:	btst	#6,(sysmars_reg+comm12).l	; Wait comm bit signal from SH2 to fill the first words.
(1)  180/  883556 : 67F6                		beq.s	.wait_bit
(1)  181/  883558 : 08B9 0006 00A1 512C 		bclr	#6,(sysmars_reg+comm12).l	; Clear it afterwards.
(1)  182/  883560 :                     	; *** CRITICAL PART, MUST BE SYNCRONIZED ***
(1)  183/  883560 : 3A06                		move.w	d6,d5				; (length/2)/4
(1)  184/  883562 : E44D                		lsr.w	#2,d5
(1)  185/  883564 : 9A7C 0001           		sub.w	#1,d5				; minus 1 for the loop
(1)  186/  883568 : 3A98                .l0:		move.w  (a0)+,(a5)
(1)  187/  88356A : 3A98                		move.w  (a0)+,(a5)
(1)  188/  88356C : 3A98                		move.w  (a0)+,(a5)
(1)  189/  88356E : 3A98                		move.w  (a0)+,(a5)			; FIFO-FULL check not needed.
(1)  190/  883570 : 51CD FFF6           		dbf	d5,.l0
(1)  191/  883574 :                     .bad_trnsfr:
(1)  192/  883574 : 46C7                		move.w	d7,sr
(1)  193/  883576 : 4E75                		rts
(1)  194/  883578 :                     
(1)  195/  883578 :                     ; ====================================================================
(1)  196/  883578 :                     ; ----------------------------------------------------------------
(1)  197/  883578 :                     ; Subroutines
(1)  198/  883578 :                     ; ----------------------------------------------------------------
(1)  199/  883578 :                     
(1)  200/  883578 :                     ; --------------------------------------------------------
(1)  201/  883578 :                     ; System_Input
(1)  202/  883578 :                     ;
(1)  203/  883578 :                     ; Reads data from the Controller ports
(1)  204/  883578 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  205/  883578 :                     ; 
(1)  206/  883578 :                     ; Uses:
(1)  207/  883578 :                     ; d4-d6,a4-a6
(1)  208/  883578 :                     ; --------------------------------------------------------
(1)  209/  883578 :                     
(1)  210/  883578 :                     System_Input:
(1)  211/  883578 :                     ; 		move.w	#$0100,(z80_bus).l
(1)  212/  883578 :                     ; .wait:
(1)  213/  883578 :                     ; 		btst	#0,(z80_bus).l
(1)  214/  883578 :                     ; 		bne.s	.wait
(1)  215/  883578 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  216/  88357E : 4DF8 A622           		lea	(RAM_InputData),a6	; a6 - Output
(1)  217/  883582 : 610C                		bsr.s	.this_one
(1)  218/  883584 : DAFC 0002           		adda	#2,a5
(1)  219/  883588 : DCFC 0010           		adda	#sizeof_input,a6
(1)  220/  88358C : 6102                		bsr.s	.this_one
(1)  221/  88358E :                     ; 		move.w	#0,(z80_bus).l
(1)  222/  88358E : 4E75                		rts
(1)  223/  883590 :                     
(1)  224/  883590 :                     ; --------------------------------------------------------	
(1)  225/  883590 :                     ; Read port
(1)  226/  883590 :                     ; 
(1)  227/  883590 :                     ; a5 - Current port
(1)  228/  883590 :                     ; a6 - Output data
(1)  229/  883590 :                     ; --------------------------------------------------------
(1)  230/  883590 :                     
(1)  231/  883590 :                     .this_one:
(1)  232/  883590 : 6100 0166           		bsr	.pick_id
(1)  233/  883594 : 1C84                		move.b	d4,pad_id(a6)
(1)  234/  883596 : B87C 000F           		cmp.w	#$F,d4
(1)  235/  88359A : 670E                		beq.s	.exit
(1)  236/  88359C : C87C 000F           		and.w	#$F,d4
(1)  237/  8835A0 : D844                		add.w	d4,d4
(1)  238/  8835A2 : 3A3B 400C           		move.w	.list(pc,d4.w),d5
(1)  239/  8835A6 : 4EFB 5008           		jmp	.list(pc,d5.w)
(1)  240/  8835AA :                     .exit:
(1)  241/  8835AA : 422E 0001           		clr.b	pad_ver(a6)
(1)  242/  8835AE : 4E75                		rts
(1)  243/  8835B0 :                     
(1)  244/  8835B0 :                     ; --------------------------------------------------------
(1)  245/  8835B0 :                     ; Grab ID
(1)  246/  8835B0 :                     ; --------------------------------------------------------
(1)  247/  8835B0 :                     
(1)  248/  8835B0 :                     .list:
(1)  249/  8835B0 : FFFA                		dc.w .exit-.list	; $00
(1)  250/  8835B2 : FFFA                		dc.w .exit-.list
(1)  251/  8835B4 : FFFA                		dc.w .exit-.list
(1)  252/  8835B6 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  253/  8835B8 : FFFA                		dc.w .exit-.list	; $04
(1)  254/  8835BA : FFFA                		dc.w .exit-.list
(1)  255/  8835BC : FFFA                		dc.w .exit-.list
(1)  256/  8835BE : FFFA                		dc.w .exit-.list
(1)  257/  8835C0 : FFFA                		dc.w .exit-.list	; $08
(1)  258/  8835C2 : FFFA                		dc.w .exit-.list
(1)  259/  8835C4 : FFFA                		dc.w .exit-.list
(1)  260/  8835C6 : FFFA                		dc.w .exit-.list
(1)  261/  8835C8 : FFFA                		dc.w .exit-.list	; $0C
(1)  262/  8835CA : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  263/  8835CC : FFFA                		dc.w .exit-.list
(1)  264/  8835CE : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  265/  8835D0 :                     
(1)  266/  8835D0 :                     ; --------------------------------------------------------
(1)  267/  8835D0 :                     ; ID $03
(1)  268/  8835D0 :                     ;
(1)  269/  8835D0 :                     ; Mega Mouse
(1)  270/  8835D0 :                     ; --------------------------------------------------------
(1)  271/  8835D0 :                     
(1)  272/  8835D0 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  273/  8835D0 :                     .id_03:
(1)  274/  8835D0 : 1ABC 0020           		move.b	#$20,(a5)
(1)  275/  8835D4 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  276/  8835DA : 0815 0004           		btst	#4,(a5)
(1)  277/  8835DE : 6700 0094           		beq.w	.invalid
(1)  278/  8835E2 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  279/  8835E6 : 4E71                		nop
(1)  280/  8835E8 : 4E71                		nop
(1)  281/  8835EA : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  282/  8835EE : 4E71                		nop
(1)  283/  8835F0 : 4E71                		nop
(1)  284/  8835F2 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  285/  8835F6 : 4E71                		nop
(1)  286/  8835F8 : 4E71                		nop
(1)  287/  8835FA : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  288/  8835FC : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  289/  883600 : 4E71                		nop
(1)  290/  883602 : 4E71                		nop
(1)  291/  883604 : 1E15                		move.b	(a5),d7
(1)  292/  883606 : CE7C 000F            		and.w	#%1111,d7
(1)  293/  88360A : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  294/  88360E : BF46                		eor.w	d7,d6
(1)  295/  883610 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  296/  883614 : CC47                		and.w	d7,d6
(1)  297/  883616 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  298/  88361A : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  299/  88361E : 4E71                		nop
(1)  300/  883620 : 4E71                		nop
(1)  301/  883622 : 1E15                		move.b	(a5),d7
(1)  302/  883624 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  303/  883628 : CE7C 000F           		and.w	#%1111,d7
(1)  304/  88362C : E94F                		lsl.w	#4,d7
(1)  305/  88362E : 4E71                		nop
(1)  306/  883630 : 1C15                		move.b	(a5),d6
(1)  307/  883632 : CC7C 000F           		and.w	#%1111,d6
(1)  308/  883636 : 8E46                		or.w	d6,d7
(1)  309/  883638 : 0805 0000           		btst    #0,d5
(1)  310/  88363C : 6704                		beq.s	.x_neg
(1)  311/  88363E : 4407                		neg.b	d7
(1)  312/  883640 : 4447                		neg.w	d7
(1)  313/  883642 :                     .x_neg:
(1)  314/  883642 : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  315/  883646 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  316/  88364A : 4E71                		nop
(1)  317/  88364C : 4E71                		nop
(1)  318/  88364E : 1E15                		move.b	(a5),d7
(1)  319/  883650 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  320/  883654 : CE7C 000F           		and.w	#%1111,d7
(1)  321/  883658 : E94F                		lsl.w	#4,d7
(1)  322/  88365A : 4E71                		nop
(1)  323/  88365C : 1C15                		move.b	(a5),d6
(1)  324/  88365E : CC7C 000F           		and.w	#%1111,d6
(1)  325/  883662 : 8E46                		or.w	d6,d7
(1)  326/  883664 : 0805 0001           		btst    #1,d5
(1)  327/  883668 : 6704                		beq.s	.y_neg
(1)  328/  88366A : 4407                		neg.b	d7
(1)  329/  88366C : 4447                		neg.w	d7
(1)  330/  88366E :                     .y_neg:
(1)  331/  88366E : 4447                		neg.w	d7		; Reverse Y
(1)  332/  883670 : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  333/  883674 :                     
(1)  334/  883674 :                     .invalid:
(1)  335/  883674 : 1ABC 0060           		move.b	#$60,(a5)
(1)  336/  883678 : 4E75                		rts
(1)  337/  88367A :                     
(1)  338/  88367A :                     ; --------------------------------------------------------
(1)  339/  88367A :                     ; ID $0D
(1)  340/  88367A :                     ; 
(1)  341/  88367A :                     ; Normal controller: 3 button or 6 button.
(1)  342/  88367A :                     ; --------------------------------------------------------
(1)  343/  88367A :                     
(1)  344/  88367A :                     .id_0D:
(1)  345/  88367A : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  346/  88367E : 4E71                		nop
(1)  347/  883680 : 4E71                		nop
(1)  348/  883682 : 1A15                		move.b	(a5),d5
(1)  349/  883684 : CA7C 003F           		and.w	#%00111111,d5
(1)  350/  883688 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  351/  88368C : 4E71                		nop
(1)  352/  88368E : 4E71                		nop
(1)  353/  883690 : 1815                		move.b	(a5),d4		; The following flips are for
(1)  354/  883692 : E54C                		lsl.w	#2,d4		; the 6pad's internal counter:
(1)  355/  883694 : C87C 00C0           		and.w	#%11000000,d4
(1)  356/  883698 : 8845                		or.w	d5,d4
(1)  357/  88369A : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  358/  88369E : 4644                		not.w	d4
(1)  359/  8836A0 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  360/  8836A4 : B905                		eor.b	d4,d5
(1)  361/  8836A6 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  362/  8836AA : 1D44 0003           		move.b	d4,on_hold+1(a6)
(1)  363/  8836AE : CA04                		and.b	d4,d5
(1)  364/  8836B0 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  365/  8836B4 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  366/  8836B8 : 4E71                		nop
(1)  367/  8836BA : 4E71                		nop
(1)  368/  8836BC : 1815                		move.b	(a5),d4		; Grab ??|MXYZ
(1)  369/  8836BE : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  370/  8836C2 : 4E71                  		nop
(1)  371/  8836C4 : 4E71                  		nop
(1)  372/  8836C6 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  373/  8836C8 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  374/  8836CC : 4E71                 		nop
(1)  375/  8836CE : 4E71                 		nop
(1)  376/  8836D0 : CC7C 000F           		and.w	#$F,d6
(1)  377/  8836D4 : E44E                		lsr.w	#2,d6
(1)  378/  8836D6 : CC7C 0001           		and.w	#1,d6
(1)  379/  8836DA : 6716                		beq.s	.oldpad
(1)  380/  8836DC : 4604                		not.b	d4
(1)  381/  8836DE : C87C 000F            		and.w	#%1111,d4
(1)  382/  8836E2 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  383/  8836E6 : B905                		eor.b	d4,d5
(1)  384/  8836E8 : 1D44 0002           		move.b	d4,on_hold(a6)
(1)  385/  8836EC : CA04                		and.b	d4,d5
(1)  386/  8836EE : 1D45 0004           		move.b	d5,on_press(a6)
(1)  387/  8836F2 :                     .oldpad:
(1)  388/  8836F2 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  389/  8836F6 : 4E75                		rts
(1)  390/  8836F8 :                     		
(1)  391/  8836F8 :                     ; --------------------------------------------------------
(1)  392/  8836F8 :                     ; Grab ID
(1)  393/  8836F8 :                     ; --------------------------------------------------------
(1)  394/  8836F8 :                     
(1)  395/  8836F8 :                     .pick_id:
(1)  396/  8836F8 : 7800                		moveq	#0,d4
(1)  397/  8836FA : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  398/  8836FE : 4E71                		nop
(1)  399/  883700 : 4E71                		nop
(1)  400/  883702 : 610A                		bsr	.read
(1)  401/  883704 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  402/  883708 : 4E71                		nop
(1)  403/  88370A : 4E71                		nop
(1)  404/  88370C : D844                		add.w	d4,d4
(1)  405/  88370E :                     .read:
(1)  406/  88370E : 1A15                		move.b	(a5),d5
(1)  407/  883710 : 1C05                		move.b	d5,d6
(1)  408/  883712 : CC3C 000C           		and.b	#$C,d6
(1)  409/  883716 : 6702                		beq.s	.step_1
(1)  410/  883718 : 5244                		addq.w	#1,d4
(1)  411/  88371A :                     .step_1:
(1)  412/  88371A : D844                		add.w	d4,d4
(1)  413/  88371C : 1C05                		move.b	d5,d6
(1)  414/  88371E : CC7C 0003           		and.w	#3,d6
(1)  415/  883722 : 6702                		beq.s	.step_2
(1)  416/  883724 : 5244                		addq.w	#1,d4
(1)  417/  883726 :                     .step_2:
(1)  418/  883726 : 4E75                		rts
(1)  419/  883728 :                     
(1)  420/  883728 :                     ; --------------------------------------------------------
(1)  421/  883728 :                     ; System_Random
(1)  422/  883728 :                     ; 
(1)  423/  883728 :                     ; Picks a random value
(1)  424/  883728 :                     ; 
(1)  425/  883728 :                     ; Output:
(1)  426/  883728 :                     ; d0 | LONG
(1)  427/  883728 :                     ; --------------------------------------------------------
(1)  428/  883728 :                     
(1)  429/  883728 :                     ; TODO: rewrite this
(1)  430/  883728 :                     System_Random:
(1)  431/  883728 : 2A38 AA66           		move.l	(RAM_SysRandSeed),d5
(1)  432/  88372C : 2838 AA62           		move.l	(RAM_SysRandVal),d4
(1)  433/  883730 : E39D                		rol.l	#1,d5
(1)  434/  883732 : EAA4                		asr.l	d5,d4
(1)  435/  883734 : D885                		add.l	d5,d4
(1)  436/  883736 : 23C5 FFFF AA66      		move.l	d5,(RAM_SysRandSeed).l
(1)  437/  88373C : 23C4 FFFF AA62      		move.l	d4,(RAM_SysRandVal).l
(1)  438/  883742 : 2004                		move.l	d4,d0
(1)  439/  883744 : 4E75                		rts
(1)  440/  883746 :                     
(1)  441/  883746 :                     ; --------------------------------------------------------
(1)  442/  883746 :                     ; System_SineWave_Cos / System_SineWave
(1)  443/  883746 :                     ;
(1)  444/  883746 :                     ; Get sinewave value
(1)  445/  883746 :                     ;
(1)  446/  883746 :                     ; Input:
(1)  447/  883746 :                     ; d0 | WORD - Tan
(1)  448/  883746 :                     ; d1 | WORD - Multiply
(1)  449/  883746 :                     ;
(1)  450/  883746 :                     ; Output:
(1)  451/  883746 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  452/  883746 :                     ; --------------------------------------------------------
(1)  453/  883746 :                     
(1)  454/  883746 :                     ; TODO: improve this.
(1)  455/  883746 :                     System_SineWave_Cos:
(1)  456/  883746 : 48A7 8000           		movem.w	d0,-(sp)
(1)  457/  88374A : 7400                		moveq	#0,d2
(1)  458/  88374C : D03C 0040           		add.b	#$40,d0
(1)  459/  883750 : 1400                		move.b	d0,d2
(1)  460/  883752 : E302                		asl.b	#1,d2
(1)  461/  883754 : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  462/  883758 : C4C1                		mulu.w	d1,d2
(1)  463/  88375A : 8000                		or.b	d0,d0
(1)  464/  88375C : 6A02                		bpl.s	.dont_neg
(1)  465/  88375E : 4482                		neg.l	d2
(1)  466/  883760 :                     .dont_neg:
(1)  467/  883760 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  468/  883764 : 4E75                		rts
(1)  469/  883766 :                     
(1)  470/  883766 :                     System_SineWave:
(1)  471/  883766 : 48A7 8000           		movem.w	d0,-(sp)
(1)  472/  88376A : C07C 007F           		and.w	#$7F,d0
(1)  473/  88376E : E340                		asl.w	#1,d0
(1)  474/  883770 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  475/  883774 : C4C1                		mulu.w	d1,d2
(1)  476/  883776 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  477/  88377A : 5182                		subq.l	#8,d2
(1)  478/  88377C : 8000                		or.b	d0,d0
(1)  479/  88377E : 6A02                		bpl.s	.dont_neg
(1)  480/  883780 : 4482                		neg.l	d2
(1)  481/  883782 :                     .dont_neg:
(1)  482/  883782 : 4E75                		rts
(1)  483/  883784 :                     
(1)  484/  883784 : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  485/  88379A : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  486/  8837AE : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  487/  8837C2 : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  488/  8837D6 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  489/  8837EA : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  490/  8837FE : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  491/  883810 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  492/  883824 : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  493/  883838 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  494/  88384C : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  495/  883860 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  496/  883874 : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  497/  883884 :                     
(1)  498/  883884 :                     ; --------------------------------------------------------
(1)  499/  883884 :                     ; System_SetInts
(1)  500/  883884 :                     ;
(1)  501/  883884 :                     ; Set new interrputs
(1)  502/  883884 :                     ;
(1)  503/  883884 :                     ; d0 | LONG - VBlank
(1)  504/  883884 :                     ; d1 | LONG - HBlank
(1)  505/  883884 :                     ;
(1)  506/  883884 :                     ; Uses:
(1)  507/  883884 :                     ; d4
(1)  508/  883884 :                     ;
(1)  509/  883884 :                     ; Notes:
(1)  510/  883884 :                     ; Writing 0 or a negative number will skip change
(1)  511/  883884 :                     ; to the interrupt pointer
(1)  512/  883884 :                     ; --------------------------------------------------------
(1)  513/  883884 :                     
(1)  514/  883884 :                     System_SetInts:
(1)  515/  883884 : 2800                		move.l	d0,d4
(1)  516/  883886 : 670E                		beq.s	.novint
(1)  517/  883888 : 6B0C                		bmi.s	.novint
(1)  518/  88388A : 88BC 0088 0000      		or.l	#$880000,d4
(1)  519/  883890 : 23C4 FFFF AA70       		move.l	d4,(RAM_MdMarsVInt+2).l
(1)  520/  883896 :                     .novint:
(1)  521/  883896 : 2801                		move.l	d1,d4
(1)  522/  883898 : 670E                		beq.s	.nohint
(1)  523/  88389A : 6B0C                		bmi.s	.nohint
(1)  524/  88389C : 88BC 0088 0000      		or.l	#$880000,d4
(1)  525/  8838A2 : 23C4 FFFF AA76      		move.l	d4,(RAM_MdMarsHInt+2).l
(1)  526/  8838A8 :                     .nohint:
(1)  527/  8838A8 : 4E75                		rts
(1)  528/  8838AA :                     
(1)  529/  8838AA :                     ; --------------------------------------------------------
(1)  530/  8838AA :                     ; System_SramInit
(1)  531/  8838AA :                     ; 
(1)  532/  8838AA :                     ; Init save data
(1)  533/  8838AA :                     ; 
(1)  534/  8838AA :                     ; Uses:
(1)  535/  8838AA :                     ; a4,d4-d5
(1)  536/  8838AA :                     ; --------------------------------------------------------
(1)  537/  8838AA :                     
(1)  538/  8838AA :                     ; TODO: Check if RV bit is needed here...
(1)  539/  8838AA :                     System_SramInit:
(1)  540/  8838AA : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  541/  8838B2 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  542/  8838B8 : 7800                		moveq	#0,d4
(1)  543/  8838BA : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  544/  8838BE :                     .initsave:
(1)  545/  8838BE : 1884                		move.b	d4,(a4)
(1)  546/  8838C0 : D8FC 0002           		adda	#2,a4
(1)  547/  8838C4 : 51CD FFF8           		dbf	d5,.initsave
(1)  548/  8838C8 : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  549/  8838D0 : 4E75                		rts
(1)  550/  8838D2 :                     
(1)  551/  8838D2 :                     ; ====================================================================
(1)  552/  8838D2 :                     ; ----------------------------------------------------------------
(1)  553/  8838D2 :                     ; Screen mode subroutines
(1)  554/  8838D2 :                     ; ----------------------------------------------------------------
(1)  555/  8838D2 :                     
(1)  556/  8838D2 :                     ; --------------------------------------------------------
(1)  557/  8838D2 :                     ; Initialize current screen mode
(1)  558/  8838D2 :                     ; --------------------------------------------------------
(1)  559/  8838D2 :                     
(1)  560/  8838D2 :                     Mode_Init:
(1)  561/  8838D2 :                     ; 		bsr	Video_Clear
(1)  562/  8838D2 :                     ; 		lea	(RAM_ModeBuff),a4
(1)  563/  8838D2 :                     ; 		move.w	#(MAX_MDERAM/2)-1,d5
(1)  564/  8838D2 :                     ; 		moveq	#0,d4
(1)  565/  8838D2 :                     ; .clr:
(1)  566/  8838D2 :                     ; 		move.w	d4,(a4)+
(1)  567/  8838D2 :                     ; 		dbf	d5,.clr
(1)  568/  8838D2 :                     
(1)  569/  8838D2 :                     
(1)  570/  8838D2 :                     
(1)  571/  8838D2 : 4E75                		rts
(1)  572/  8838D4 :                     
(1)  573/  8838D4 :                     ; --------------------------------------------------------
(1)  574/  8838D4 :                     
(1)  575/  8838D4 :                     Mode_FadeOut:
(1)  576/  8838D4 : 31FC 0002 A5F6      		move.w	#2,(RAM_FadeMdReq).w
(1)  577/  8838DA : 31FC 0002 A5FE      		move.w	#2,(RAM_FadeMarsReq).w
(1)  578/  8838E0 : 31FC 0001 A5F8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  579/  8838E6 : 31FC 0004 A600      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  580/  8838EC : 31FC 0000 A5FA      		move.w	#0,(RAM_FadeMdDelay).w
(1)  581/  8838F2 : 31FC 0000 A602      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  582/  8838F8 :                     .loopw:
(1)  583/  8838F8 : 6100 FB48           		bsr	System_WaitFrame
(1)  584/  8838FC : 6100 F4BE           		bsr	Video_RunFade
(1)  585/  883900 : 66F6                		bne.s	.loopw
(1)  586/  883902 : 4E75                		rts
(1)  587/  883904 :                     
(1)  588/  883904 :                     ; ====================================================================
(1)  589/  883904 :                     ; ----------------------------------------------------------------
(1)  590/  883904 :                     ; Default interrupts
(1)  591/  883904 :                     ; ----------------------------------------------------------------
(1)  592/  883904 :                     
(1)  593/  883904 :                     ; --------------------------------------------------------
(1)  594/  883904 :                     ; VBlank
(1)  595/  883904 :                     ; --------------------------------------------------------
(1)  596/  883904 :                     
(1)  597/  883904 :                     VInt_Default:
(1)  598/  883904 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  599/  883908 : 6100 FC6E           		bsr	System_Input
(1)  600/  88390C : 06B9 0000 0001 FFFF 		add.l	#1,(RAM_FrameCount).l
                    A606                
(1)  601/  883916 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  602/  88391A : 4E73                		rte
(1)  603/  88391C :                     
(1)  604/  88391C :                     ; --------------------------------------------------------
(1)  605/  88391C :                     ; HBlank
(1)  606/  88391C :                     ; --------------------------------------------------------
(1)  607/  88391C :                     
(1)  608/  88391C :                     HInt_Default:
(1)  609/  88391C : 4E73                		rte
(1)  610/  88391E :                     
(1)  611/  88391E :                     ; ====================================================================
(1)  612/  88391E :                     ; ----------------------------------------------------------------
(1)  613/  88391E :                     ; System data
(1)  614/  88391E :                     ; ----------------------------------------------------------------
(1)  615/  88391E :                     
      35/  88391E :                     		include "code/main.asm"
(1)    1/  88391E :                     ; ====================================================================
(1)    2/  88391E :                     ; ----------------------------------------------------------------
(1)    3/  88391E :                     ; Default gamemode
(1)    4/  88391E :                     ; ----------------------------------------------------------------
(1)    5/  88391E :                     
(1)    6/  88391E :                     ; ====================================================================
(1)    7/  88391E :                     ; ------------------------------------------------------
(1)    8/  88391E :                     ; Variables
(1)    9/  88391E :                     ; ------------------------------------------------------
(1)   10/  88391E :                     
(1)   11/  88391E : =$380               emily_VRAM	equ $380
(1)   12/  88391E :                     
(1)   13/  88391E :                     ; ====================================================================
(1)   14/  88391E :                     ; ------------------------------------------------------
(1)   15/  88391E :                     ; Structs
(1)   16/  88391E :                     ; ------------------------------------------------------
(1)   17/  88391E :                     
(1)   18/  88391E :                     ; 		struct 0
(1)   19/  88391E :                     ; strc_xpos	ds.w 1
(1)   20/  88391E :                     ; strc_ypos	ds.w 1
(1)   21/  88391E :                     ; 		finish
(1)   22/  88391E :                     
(1)   23/  88391E :                     ; ====================================================================
(1)   24/  88391E :                     ; ------------------------------------------------------
(1)   25/  88391E :                     ; This mode's RAM
(1)   26/  88391E :                     ; ------------------------------------------------------
(1)   27/  88391E :                     
(1)   28/  88391E : (MACRO)             		struct RAM_ModeBuff
(1)   28/  88391E : =$88391E            GLBL_LASTPC     set *
(1)   28/    391E :                                     dephase
(1)   28/    391E : =$391E              GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFF9000 :                                     phase RAM_MODEBUFF
(1)   29/FFFFFFFFFFFF9000 :                     RAM_EmiFrame	ds.w 1
(1)   30/FFFFFFFFFFFF9002 :                     RAM_EmiAnim	ds.w 1
(1)   31/FFFFFFFFFFFF9004 :                     RAM_EmiPosX	ds.w 1
(1)   32/FFFFFFFFFFFF9006 :                     RAM_EmiPosY	ds.w 1
(1)   33/FFFFFFFFFFFF9008 :                     RAM_EmiUpd	ds.w 1
(1)   34/FFFFFFFFFFFF900A : (MACRO)             		finish
(1)   34/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)   34/  88391E :                                     phase GLBL_LASTPC
(1)   35/  88391E :                     
(1)   36/  88391E :                     ; ====================================================================
(1)   37/  88391E :                     ; ------------------------------------------------------
(1)   38/  88391E :                     ; Code start
(1)   39/  88391E :                     ; ------------------------------------------------------
(1)   40/  88391E :                     
(1)   41/  88391E :                     MD_Mode0:
(1)   42/  88391E : 6000 043E           		bra	MD_DebugMenu
(1)   43/  883922 :                     
(1)   44/  883922 : 46FC 2700           		move.w	#$2700,sr
(1)   45/  883926 : 08B9 0006 FFFF A60B 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   46/  88392E : 6100 F138           		bsr	Video_Update
(1)   47/  883932 : 619E                		bsr	Mode_Init
(1)   48/  883934 : 6100 F286           		bsr	Video_PrintInit
(1)   49/  883938 :                     
(1)   50/  883938 : 41FA 040A           		lea	str_Main(pc),a0
(1)   51/  88393C : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)   52/  883942 : 6100 F2A4           		bsr	Video_Print
(1)   53/  883946 :                     
(1)   54/  883946 : 41FA 0226           		lea	Pal_Emily(pc),a0
(1)   55/  88394A : 7000                		moveq	#0,d0
(1)   56/  88394C : 323C 0010           		move.w	#16,d1
(1)   57/  883950 : 6100 F47C           		bsr	Video_FadePal
(1)   58/  883954 :                     ; 		lea	Pal_TestMap(pc),a0
(1)   59/  883954 :                     ; 		moveq	#$10,d0
(1)   60/  883954 :                     ; 		move.w	#16,d1
(1)   61/  883954 :                     ; 		bsr	Video_FadePal
(1)   62/  883954 :                     
(1)   63/  883954 :                     ; 		move.l	#Art_TestMap,d0
(1)   64/  883954 :                     ; 		move.w	#$20*$0001,d1
(1)   65/  883954 :                     ; 		move.w	#Art_TestMap_e-Art_TestMap,d2
(1)   66/  883954 :                     ; 		bsr	Video_LoadArt
(1)   67/  883954 :                     ; 		lea	(Map_TestMap),a0
(1)   68/  883954 :                     ; 		move.l	#locate(0,0,0),d0
(1)   69/  883954 :                     ; 		move.l	#mapsize(512,256),d1
(1)   70/  883954 :                     ; 		move.w	#$2000|$0001,d2
(1)   71/  883954 :                     ; 		bsr	Video_LoadMap
(1)   72/  883954 :                     
(1)   73/  883954 :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)   74/  883954 :                     ; 		move.l	#MarsObj_test,mdl_data(a0)
(1)   75/  883954 :                     ; 		move.l	#-$600,mdl_z_pos(a0)
(1)   76/  883954 :                     ; 		move.w	#4,d0
(1)   77/  883954 :                     ; 		bsr	Video_Mars_GfxMode
(1)   78/  883954 :                     ; 		lea	(MDLDATA_PAL_TEST),a0
(1)   79/  883954 :                     ; 		moveq	#0,d0
(1)   80/  883954 :                     ; 		move.w	#256,d1
(1)   81/  883954 :                     ; 		moveq	#1,d2
(1)   82/  883954 :                     ; 		bsr	Video_FadePal_Mars
(1)   83/  883954 :                     ; 		clr.w	(RAM_MdMarsPalFd).w
(1)   84/  883954 :                     
(1)   85/  883954 :                     	; variables
(1)   86/  883954 : 31FC 00B0 9004      		move.w	#(320/2)+16,(RAM_EmiPosX).w
(1)   87/  88395A : 31FC 0078 9006      		move.w	#(224/2)+8,(RAM_EmiPosY).w
(1)   88/  883960 :                     
(1)   89/  883960 : 31FC 0001 A5F6      		move.w	#1,(RAM_FadeMdReq).w
(1)   90/  883966 : 31FC 0001 A5FE      		move.w	#1,(RAM_FadeMarsReq).w
(1)   91/  88396C : 31FC 0001 A5F8      		move.w	#1,(RAM_FadeMdIncr).w
(1)   92/  883972 : 31FC 0004 A600      		move.w	#4,(RAM_FadeMarsIncr).w
(1)   93/  883978 : 31FC 0000 A5FA      		move.w	#0,(RAM_FadeMdDelay).w
(1)   94/  88397E : 31FC 0000 A602      		move.w	#0,(RAM_FadeMarsDelay).w
(1)   95/  883984 : 08F9 0006 FFFF A60B 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   96/  88398C : 13FC 0000 FFFF A615 		move.b	#%000,(RAM_VdpRegs+$B).l
(1)   97/  883994 : 13FC 0010 FFFF A611 		move.b	#$10,(RAM_VdpRegs+7).l
(1)   98/  88399C : 6100 F0CA           		bsr	Video_Update
(1)   99/  8839A0 :                     
(1)  100/  8839A0 : 7000                		moveq	#0,d0
(1)  101/  8839A2 : 6100 D1A6           		bsr	Sound_TrkStop
(1)  102/  8839A6 : 323C 008C           		move.w	#128+12,d1
(1)  103/  8839AA : 6100 D1E6           		bsr	Sound_GlbBeats
(1)  104/  8839AE :                     
(1)  105/  8839AE : 41F9 0090 49AC      		lea	(GemaTrkData_Test),a0
(1)  106/  8839B4 : 43FA 0B84           		lea	MasterTrkList(pc),a1
(1)  107/  8839B8 : 7000                		moveq	#0,d0
(1)  108/  8839BA : 323C 0004           		move.w	#4,d1
(1)  109/  8839BE : 7400                		moveq	#0,d2
(1)  110/  8839C0 : 363C 0000           		move.w	#0,d3
(1)  111/  8839C4 : 6100 D146           		bsr	Sound_TrkPlay
(1)  112/  8839C8 :                     
(1)  113/  8839C8 :                     ; 		move.w	#$2700,sr
(1)  114/  8839C8 :                     ; 		move.l	#$C0200000,(vdp_ctrl).l
(1)  115/  8839C8 :                     ; 		move.w	#$0E8,(vdp_data).l
(1)  116/  8839C8 :                     ; 		bra.s	*
(1)  117/  8839C8 :                     
(1)  118/  8839C8 :                     ; ====================================================================
(1)  119/  8839C8 :                     ; ------------------------------------------------------
(1)  120/  8839C8 :                     ; Loop
(1)  121/  8839C8 :                     ; ------------------------------------------------------
(1)  122/  8839C8 :                     
(1)  123/  8839C8 :                     .loop:
(1)  124/  8839C8 : 6100 FA78           		bsr	System_WaitFrame
(1)  125/  8839CC : 6100 F3EE           		bsr	Video_RunFade
(1)  126/  8839D0 : 66F6                		bne.s	.loop
(1)  127/  8839D2 :                     
(1)  128/  8839D2 :                     
(1)  129/  8839D2 :                     	; Move Emily Fujiwara
(1)  130/  8839D2 :                     	; UDLR
(1)  131/  8839D2 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  132/  8839D6 : 3C07                		move.w	d7,d6
(1)  133/  8839D8 : 0807 0001           		btst	#bitJoyDown,d7
(1)  134/  8839DC : 6712                		beq.s	.noz_down
(1)  135/  8839DE : 31FC 0000 9000      		move.w	#0,(RAM_EmiFrame).w
(1)  136/  8839E4 : 0678 0001 9002      		add.w	#1,(RAM_EmiAnim).w
(1)  137/  8839EA : 0678 0001 9006      		add.w	#1,(RAM_EmiPosY).w
(1)  138/  8839F0 :                     .noz_down:
(1)  139/  8839F0 : 3C07                		move.w	d7,d6
(1)  140/  8839F2 : 0806 0000           		btst	#bitJoyUp,d6
(1)  141/  8839F6 : 6712                		beq.s	.noz_up
(1)  142/  8839F8 : 31FC 0004 9000      		move.w	#4,(RAM_EmiFrame).w
(1)  143/  8839FE : 0678 0001 9002      		add.w	#1,(RAM_EmiAnim).w
(1)  144/  883A04 : 0678 FFFF 9006      		add.w	#-1,(RAM_EmiPosY).w
(1)  145/  883A0A :                     .noz_up:
(1)  146/  883A0A : 3C07                		move.w	d7,d6
(1)  147/  883A0C : 0806 0003           		btst	#bitJoyRight,d6
(1)  148/  883A10 : 6712                		beq.s	.noz_r
(1)  149/  883A12 : 31FC 0008 9000      		move.w	#8,(RAM_EmiFrame).w
(1)  150/  883A18 : 0678 0001 9002      		add.w	#1,(RAM_EmiAnim).w
(1)  151/  883A1E : 0678 0001 9004      		add.w	#1,(RAM_EmiPosX).w
(1)  152/  883A24 :                     .noz_r:
(1)  153/  883A24 : 3C07                		move.w	d7,d6
(1)  154/  883A26 : 0806 0002           		btst	#bitJoyLeft,d6
(1)  155/  883A2A : 6712                		beq.s	.noz_l
(1)  156/  883A2C : 31FC 000C 9000      		move.w	#$C,(RAM_EmiFrame).w
(1)  157/  883A32 : 0678 0001 9002      		add.w	#1,(RAM_EmiAnim).w
(1)  158/  883A38 : 0678 FFFF 9004      		add.w	#-1,(RAM_EmiPosX).w
(1)  159/  883A3E :                     .noz_l:
(1)  160/  883A3E : 615E                		bsr	Emilie_MkSprite
(1)  161/  883A40 :                     
(1)  162/  883A40 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  163/  883A44 : 0807 0007           		btst	#bitJoyStart,d7
(1)  164/  883A48 : 6700 FF7E           		beq	.loop
(1)  165/  883A4C : 6000 0310           		bra	MD_DebugMenu
(1)  166/  883A50 :                     
(1)  167/  883A50 :                     ; ====================================================================
(1)  168/  883A50 :                     ; ----------------------------------------------
(1)  169/  883A50 :                     ; common subs
(1)  170/  883A50 :                     ; ----------------------------------------------
(1)  171/  883A50 :                     
(1)  172/  883A50 :                     .fade_in:
(1)  173/  883A50 : 31FC 0001 A5F6      		move.w	#1,(RAM_FadeMdReq).w
(1)  174/  883A56 : 31FC 0001 A5FE      		move.w	#1,(RAM_FadeMarsReq).w
(1)  175/  883A5C : 31FC 0001 A5F8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  176/  883A62 : 31FC 0004 A600      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  177/  883A68 : 31FC 0000 A5FA      		move.w	#0,(RAM_FadeMdDelay).w
(1)  178/  883A6E : 31FC 0000 A602      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  179/  883A74 : 4E75                		rts
(1)  180/  883A76 :                     
(1)  181/  883A76 :                     .fade_out:
(1)  182/  883A76 : 31FC 0002 A5F6      		move.w	#2,(RAM_FadeMdReq).w
(1)  183/  883A7C : 31FC 0002 A5FE      		move.w	#2,(RAM_FadeMarsReq).w
(1)  184/  883A82 : 31FC 0001 A5F8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  185/  883A88 : 31FC 0004 A600      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  186/  883A8E : 31FC 0000 A5FA      		move.w	#0,(RAM_FadeMdDelay).w
(1)  187/  883A94 : 31FC 0000 A602      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  188/  883A9A : 4E75                		rts
(1)  189/  883A9C :                     
(1)  190/  883A9C :                     
(1)  191/  883A9C :                     ; 		lea	(MDLDATA_PAL_TEST),a0
(1)  192/  883A9C :                     ; 		cmp.w	#4,(RAM_CurrGfx).w
(1)  193/  883A9C :                     ; 		beq.s	.thispal
(1)  194/  883A9C :                     ; 		lea	(PalData_Mars_Test2),a0
(1)  195/  883A9C :                     ; 		cmp.w	#3,(RAM_CurrGfx).w
(1)  196/  883A9C :                     ; 		beq.s	.thispal
(1)  197/  883A9C :                     ; 		lea	(PalData_Mars_Test),a0
(1)  198/  883A9C :                     ; .thispal:
(1)  199/  883A9C :                     ; 		moveq	#0,d0
(1)  200/  883A9C :                     ; 		move.w	#256,d1
(1)  201/  883A9C :                     ; 		moveq	#0,d2
(1)  202/  883A9C :                     ; 		bsr	Video_FadePal_Mars
(1)  203/  883A9C :                     ; 		move.w	#1,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  204/  883A9C :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  205/  883A9C :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  206/  883A9C :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  207/  883A9C :                     ; 		move.w	#2,(RAM_FadeMdDelay).w
(1)  208/  883A9C :                     ; 		move.w	#2,(RAM_FadeMarsDelay).w
(1)  209/  883A9C :                     ; 		move.w	(RAM_CurrGfx).w,d0
(1)  210/  883A9C :                     ; 		bsr	Video_Mars_GfxMode
(1)  211/  883A9C :                     ; .page0_loop:
(1)  212/  883A9C :                     ; ; 		bsr	Emilie_MkSprite
(1)  213/  883A9C :                     ; 		bsr	Video_RunFade
(1)  214/  883A9C :                     ; 		bne	.loop
(1)  215/  883A9C :                     ; 		move.w	(Controller_1+on_press),d7
(1)  216/  883A9C :                     ; 		btst	#bitJoyStart,d7
(1)  217/  883A9C :                     ; 		beq.s	.no_mode0
(1)  218/  883A9C :                     ; 		move.w	#1,(RAM_CurrPage).w
(1)  219/  883A9C :                     ; 		move.w	#$920D,(RAM_WindowNew).w
(1)  220/  883A9C :                     ; .no_mode0:
(1)  221/  883A9C :                     ; 		move.w	(Controller_1+on_press),d7
(1)  222/  883A9C :                     ; 		btst	#bitJoyZ,d7
(1)  223/  883A9C :                     ; 		beq.s	.noah
(1)  224/  883A9C :                     ; 		moveq	#0,d2
(1)  225/  883A9C :                     ; 		bsr	PlayThisSfx
(1)  226/  883A9C :                     ; .noah:
(1)  227/  883A9C :                     ;
(1)  228/  883A9C :                     ; 		move.l	(RAM_MdDreq+Dreq_Scrn2_X).w,d0
(1)  229/  883A9C :                     ; 		move.l	(RAM_MdDreq+Dreq_Scrn2_Y).w,d1
(1)  230/  883A9C :                     ; 		move.l	#$10000,d5
(1)  231/  883A9C :                     ; 		move.l	#1,d6
(1)  232/  883A9C :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  233/  883A9C :                     ; 		btst	#bitJoyRight,d7
(1)  234/  883A9C :                     ; 		beq.s	.nor_m
(1)  235/  883A9C :                     ; 		add.l	d5,d0
(1)  236/  883A9C :                     ; 		sub.w	d6,d2
(1)  237/  883A9C :                     ; .nor_m:
(1)  238/  883A9C :                     ; 		btst	#bitJoyLeft,d7
(1)  239/  883A9C :                     ; 		beq.s	.nol_m
(1)  240/  883A9C :                     ; 		sub.l	d5,d0
(1)  241/  883A9C :                     ; 		add.w	d6,d2
(1)  242/  883A9C :                     ; .nol_m:
(1)  243/  883A9C :                     ; 		btst	#bitJoyDown,d7
(1)  244/  883A9C :                     ; 		beq.s	.nod_m
(1)  245/  883A9C :                     ; 		add.l	d5,d1
(1)  246/  883A9C :                     ; 		add.w	d6,d3
(1)  247/  883A9C :                     ; .nod_m:
(1)  248/  883A9C :                     ; 		btst	#bitJoyUp,d7
(1)  249/  883A9C :                     ; 		beq.s	.nou_m
(1)  250/  883A9C :                     ; 		sub.l	d5,d1
(1)  251/  883A9C :                     ; 		sub.w	d6,d3
(1)  252/  883A9C :                     ; .nou_m:
(1)  253/  883A9C :                     ; 		move.l	d0,(RAM_MdDreq+Dreq_Scrn2_X).w
(1)  254/  883A9C :                     ; 		move.l	d1,(RAM_MdDreq+Dreq_Scrn2_Y).w
(1)  255/  883A9C :                     ;
(1)  256/  883A9C :                     ; 		move.l	#0,d0
(1)  257/  883A9C :                     ; 		move.l	#0,d1
(1)  258/  883A9C :                     ; 		moveq	#0,d2
(1)  259/  883A9C :                     ; 		move.w	(Controller_1+on_press),d7
(1)  260/  883A9C :                     ; 		btst	#bitJoyB,d7
(1)  261/  883A9C :                     ; 		beq.s	.nor_m2
(1)  262/  883A9C :                     ; 		add.w	#1,(RAM_CurrGfx).w
(1)  263/  883A9C :                     ; 		moveq	#1,d2
(1)  264/  883A9C :                     ; .nor_m2:
(1)  265/  883A9C :                     ; 		btst	#bitJoyA,d7
(1)  266/  883A9C :                     ; 		beq.s	.nol_m2
(1)  267/  883A9C :                     ; 		sub.w	#1,(RAM_CurrGfx).w
(1)  268/  883A9C :                     ; 		moveq	#1,d2
(1)  269/  883A9C :                     ; .nol_m2:
(1)  270/  883A9C :                     ;
(1)  271/  883A9C :                     ; 		tst.w	d2
(1)  272/  883A9C :                     ; 		beq.s	.no_chng
(1)  273/  883A9C :                     ;
(1)  274/  883A9C :                     ; 		move.w	#2,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  275/  883A9C :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  276/  883A9C :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  277/  883A9C :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  278/  883A9C :                     ; 		move.w	#2,(RAM_FadeMdDelay).w
(1)  279/  883A9C :                     ; 		move.w	#2,(RAM_FadeMarsDelay).w
(1)  280/  883A9C :                     ; .fadeout:
(1)  281/  883A9C :                     ; 		bsr	Video_RunFade
(1)  282/  883A9C :                     ; 		beq.s	.exit
(1)  283/  883A9C :                     ; 		bsr	System_WaitFrame
(1)  284/  883A9C :                     ; 		lea	(RAM_MdDreq),a0
(1)  285/  883A9C :                     ; 		move.w	#sizeof_dreq,d0
(1)  286/  883A9C :                     ; 		bsr	System_SendDreq
(1)  287/  883A9C :                     ; 		bra.s	.fadeout
(1)  288/  883A9C :                     ; .exit
(1)  289/  883A9C :                     ; 		move.w	#0,(RAM_CurrPage).w
(1)  290/  883A9C :                     ; ; .thispal:
(1)  291/  883A9C :                     ; ; 		moveq	#0,d2
(1)  292/  883A9C :                     ; ; 		moveq	#0,d0
(1)  293/  883A9C :                     ; ; 		move.w	#256,d1
(1)  294/  883A9C :                     ; ; 		bsr	Video_LoadPal_Mars
(1)  295/  883A9C :                     ; ; 		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  296/  883A9C :                     ; .no_chng:
(1)  297/  883A9C :                     ; 		bsr	.move_model
(1)  298/  883A9C :                     
(1)  299/  883A9C :                     
(1)  300/  883A9C :                     
(1)  301/  883A9C :                     ; 		lea	(RAM_MdDreq),a0
(1)  302/  883A9C :                     ; 		move.l	Dreq_SclX(a0),d0
(1)  303/  883A9C :                     ; 		move.l	Dreq_SclY(a0),d1
(1)  304/  883A9C :                     ; 		move.l	Dreq_SclDX(a0),d2
(1)  305/  883A9C :                     ; 		move.l	Dreq_SclDY(a0),d3
(1)  306/  883A9C :                     ; 		move.l	#$100,d4
(1)  307/  883A9C :                     ; 		move.l	#$200,d5
(1)  308/  883A9C :                     ;
(1)  309/  883A9C :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  310/  883A9C :                     ; 		move.w	d7,d6
(1)  311/  883A9C :                     ; 		btst	#bitJoyDown,d7
(1)  312/  883A9C :                     ; 		beq.s	.noz_down
(1)  313/  883A9C :                     ; 		add.l	d4,d1
(1)  314/  883A9C :                     ; 		sub.l	d5,d3
(1)  315/  883A9C :                     ; .noz_down:
(1)  316/  883A9C :                     ; 		move.w	d7,d6
(1)  317/  883A9C :                     ; 		btst	#bitJoyUp,d6
(1)  318/  883A9C :                     ; 		beq.s	.noz_up
(1)  319/  883A9C :                     ; 		sub.l	d4,d1
(1)  320/  883A9C :                     ; 		add.l	d5,d3
(1)  321/  883A9C :                     ; .noz_up:
(1)  322/  883A9C :                     ; 		move.w	d7,d6
(1)  323/  883A9C :                     ; 		btst	#bitJoyRight,d6
(1)  324/  883A9C :                     ; 		beq.s	.noz_r
(1)  325/  883A9C :                     ; 		add.l	d4,d0
(1)  326/  883A9C :                     ; 		sub.l	d5,d2
(1)  327/  883A9C :                     ; .noz_r:
(1)  328/  883A9C :                     ; 		move.w	d7,d6
(1)  329/  883A9C :                     ; 		btst	#bitJoyLeft,d6
(1)  330/  883A9C :                     ; 		beq.s	.noz_l
(1)  331/  883A9C :                     ; 		sub.l	d4,d0
(1)  332/  883A9C :                     ; 		add.l	d5,d2
(1)  333/  883A9C :                     ; .noz_l:
(1)  334/  883A9C :                     ; 		move.l	d0,Dreq_SclX(a0)
(1)  335/  883A9C :                     ; 		move.l	d1,Dreq_SclY(a0)
(1)  336/  883A9C :                     ; 		move.l	d2,Dreq_SclDX(a0)
(1)  337/  883A9C :                     ; 		move.l	d3,Dreq_SclDY(a0)
(1)  338/  883A9C :                     ;
(1)  339/  883A9C :                     ; 		move.w	d7,d6
(1)  340/  883A9C :                     ; 		btst	#bitJoyX,d6
(1)  341/  883A9C :                     ; 		beq.s	.nox_x
(1)  342/  883A9C :                     ; 		lea	(RAM_MdDreq+Dreq_SclX),a0
(1)  343/  883A9C :                     ; 		move.l	#$00000000,(a0)+	; X pos
(1)  344/  883A9C :                     ; 		move.l	#$00000000,(a0)+	; Y pos
(1)  345/  883A9C :                     ; 		move.l	#$00010000,(a0)+	; DX
(1)  346/  883A9C :                     ; 		move.l	#$00010000,(a0)+	; DY
(1)  347/  883A9C :                     ; .nox_x:
(1)  348/  883A9C :                     
(1)  349/  883A9C :                     
(1)  350/  883A9C :                     ; 		move.w	d7,d6
(1)  351/  883A9C :                     ; 		btst	#bitJoyY,d6
(1)  352/  883A9C :                     ; 		beq.s	.noy
(1)  353/  883A9C :                     ; 		move.l	Dreq_SclDX(a0),d0
(1)  354/  883A9C :                     ; 		move.l	Dreq_SclDY(a0),d1
(1)  355/  883A9C :                     ; 		move.l	#$100,d2
(1)  356/  883A9C :                     ; 		add.l	d2,d0
(1)  357/  883A9C :                     ; 		add.l	d2,d1
(1)  358/  883A9C :                     ; 		move.l	d0,Dreq_SclDX(a0)
(1)  359/  883A9C :                     ; 		move.l	d1,Dreq_SclDY(a0)
(1)  360/  883A9C :                     ; .noy:
(1)  361/  883A9C :                     
(1)  362/  883A9C :                     ; 		bsr	Emilie_Move
(1)  363/  883A9C :                     ; 		bsr	.wave_backgrnd
(1)  364/  883A9C : 4E75                		rts
(1)  365/  883A9E :                     
(1)  366/  883A9E :                     ; .wave_backgrnd:
(1)  367/  883A9E :                     ; 	; wave background
(1)  368/  883A9E :                     ; 		lea	(RAM_HorScroll),a0
(1)  369/  883A9E :                     ; 		moveq	#112-1,d7
(1)  370/  883A9E :                     ; 		move.w	(RAM_WaveTmr),d0
(1)  371/  883A9E :                     ; 		move.w	#8,d1
(1)  372/  883A9E :                     ; .next:
(1)  373/  883A9E :                     ; 		bsr	System_SineWave
(1)  374/  883A9E :                     ; 		lsr.l	#8,d2
(1)  375/  883A9E :                     ; 		move.w	d2,2(a0)
(1)  376/  883A9E :                     ; 		adda	#4,a0
(1)  377/  883A9E :                     ; 		add.w	#1,d0
(1)  378/  883A9E :                     ; 		bsr	System_SineWave
(1)  379/  883A9E :                     ; 		lsr.l	#8,d2
(1)  380/  883A9E :                     ; 		move.w	d2,2(a0)
(1)  381/  883A9E :                     ; 		adda	#4,a0
(1)  382/  883A9E :                     ; 		add.w	#1,d0
(1)  383/  883A9E :                     ; 		dbf	d7,.next
(1)  384/  883A9E :                     ; 		add.w	#1,(RAM_WaveTmr).w
(1)  385/  883A9E :                     ;
(1)  386/  883A9E :                     ; 		lea	(RAM_VerScroll),a0
(1)  387/  883A9E :                     ; 		moveq	#(320/16)-1,d7
(1)  388/  883A9E :                     ; 		move.w	(RAM_WaveTmr),d0
(1)  389/  883A9E :                     ; 		move.w	#6,d1
(1)  390/  883A9E :                     ; .next2:
(1)  391/  883A9E :                     ; 		bsr	System_SineWave_Cos
(1)  392/  883A9E :                     ; 		lsr.l	#8,d2
(1)  393/  883A9E :                     ; 		move.w	d2,2(a0)
(1)  394/  883A9E :                     ; 		adda	#4,a0
(1)  395/  883A9E :                     ; 		add.w	#4,d0
(1)  396/  883A9E :                     ; 		dbf	d7,.next2
(1)  397/  883A9E :                     ; 		add.w	#1,(RAM_WaveTmr2).w
(1)  398/  883A9E :                     ;
(1)  399/  883A9E :                     ; ; 		bsr	Emilie_Move
(1)  400/  883A9E :                     ; ; 		bsr	Emilie_MkSprite
(1)  401/  883A9E :                     ; 		rts
(1)  402/  883A9E :                     ;
(1)  403/  883A9E :                     ; ; --------------------------------------------------
(1)  404/  883A9E :                     ; ; Mode 1
(1)  405/  883A9E :                     ; ; --------------------------------------------------
(1)  406/  883A9E :                     ;
(1)  407/  883A9E :                     ; .mode1:
(1)  408/  883A9E :                     ; 		tst.w	(RAM_CurrPage).w
(1)  409/  883A9E :                     ; 		bmi	.mode1_loop
(1)  410/  883A9E :                     ; 		or.w	#$8000,(RAM_CurrPage).w
(1)  411/  883A9E :                     ; 		bsr	.print_cursor
(1)  412/  883A9E :                     ; ; 		move.w	#1,(RAM_EmiHide).w
(1)  413/  883A9E :                     ; ; 		move.w	#1,(RAM_EmiUpd).w
(1)  414/  883A9E :                     ;
(1)  415/  883A9E :                     ; .mode1_loop:
(1)  416/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  417/  883A9E :                     ; 		btst	#bitJoyStart,d7
(1)  418/  883A9E :                     ; 		beq.s	.no_mode1
(1)  419/  883A9E :                     ; 		move.w	#0,(RAM_CurrPage).w
(1)  420/  883A9E :                     ; 		move.w	#$9200,(RAM_WindowNew).w
(1)  421/  883A9E :                     ; .no_mode1:
(1)  422/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  423/  883A9E :                     ; 		btst	#bitJoyY,d7
(1)  424/  883A9E :                     ; 		beq.s	.noy2
(1)  425/  883A9E :                     ; 		cmp.w	#1,(RAM_CurrIndx).w
(1)  426/  883A9E :                     ; 		beq.	.noy2
(1)  427/  883A9E :                     ; 		add.w	#1,(RAM_CurrIndx).w
(1)  428/  883A9E :                     ; 		bsr	.print_cursor
(1)  429/  883A9E :                     ; .noy2:
(1)  430/  883A9E :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  431/  883A9E :                     ; 		btst	#bitJoyX,d7
(1)  432/  883A9E :                     ; 		beq.s	.nox2
(1)  433/  883A9E :                     ; 		tst.w	(RAM_CurrIndx).w
(1)  434/  883A9E :                     ; 		beq.s	.nox2
(1)  435/  883A9E :                     ; 		sub.w	#1,(RAM_CurrIndx).w
(1)  436/  883A9E :                     ; 		bsr	.print_cursor
(1)  437/  883A9E :                     ; .nox2:
(1)  438/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  439/  883A9E :                     ; 		btst	#bitJoyUp,d7
(1)  440/  883A9E :                     ; 		beq.s	.nou2
(1)  441/  883A9E :                     ; 		tst.w	(RAM_CurrSelc).w
(1)  442/  883A9E :                     ; 		beq.s	.nou2
(1)  443/  883A9E :                     ; 		sub.w	#1,(RAM_CurrSelc).w
(1)  444/  883A9E :                     ; 		bsr	.print_cursor
(1)  445/  883A9E :                     ; .nou2:
(1)  446/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  447/  883A9E :                     ; 		btst	#bitJoyDown,d7
(1)  448/  883A9E :                     ; 		beq.s	.nod2
(1)  449/  883A9E :                     ; 		cmp.w	#MAX_GEMAENTRY,(RAM_CurrSelc).w
(1)  450/  883A9E :                     ; 		bge.s	.nod2
(1)  451/  883A9E :                     ; 		add.w	#1,(RAM_CurrSelc).w
(1)  452/  883A9E :                     ; 		bsr	.print_cursor
(1)  453/  883A9E :                     ; .nod2:
(1)  454/  883A9E :                     ;
(1)  455/  883A9E :                     ; 	; LEFT/RIGHT
(1)  456/  883A9E :                     ; 		lea	(RAM_CurrTrack),a1
(1)  457/  883A9E :                     ; 		cmp.w	#3,(RAM_CurrSelc).w
(1)  458/  883A9E :                     ; 		bne.s	.toptrk
(1)  459/  883A9E :                     ; 		add	#2,a1
(1)  460/  883A9E :                     ; .toptrk:
(1)  461/  883A9E :                     ; 		cmp.w	#4,(RAM_CurrSelc).w
(1)  462/  883A9E :                     ; 		bne.s	.toptrk2
(1)  463/  883A9E :                     ; 		add	#2*2,a1
(1)  464/  883A9E :                     ; .toptrk2:
(1)  465/  883A9E :                     ;
(1)  466/  883A9E :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  467/  883A9E :                     ; 		and.w	#JoyB,d7
(1)  468/  883A9E :                     ; 		beq.s	.noba
(1)  469/  883A9E :                     ; 		add.w	#1,(a1)
(1)  470/  883A9E :                     ; 		bsr	.print_cursor
(1)  471/  883A9E :                     ; .noba:
(1)  472/  883A9E :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  473/  883A9E :                     ; 		and.w	#JoyA,d7
(1)  474/  883A9E :                     ; 		beq.s	.noaa
(1)  475/  883A9E :                     ; 		sub.w	#1,(a1)
(1)  476/  883A9E :                     ; 		bsr	.print_cursor
(1)  477/  883A9E :                     ; .noaa:
(1)  478/  883A9E :                     ;
(1)  479/  883A9E :                     ;
(1)  480/  883A9E :                     ;
(1)  481/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  482/  883A9E :                     ; 		btst	#bitJoyLeft,d7
(1)  483/  883A9E :                     ; 		beq.s	.nol
(1)  484/  883A9E :                     ; ; 		tst.w	(a1)
(1)  485/  883A9E :                     ; ; 		beq.s	.nol
(1)  486/  883A9E :                     ; 		sub.w	#1,(a1)
(1)  487/  883A9E :                     ; 		bsr	.print_cursor
(1)  488/  883A9E :                     ; .nol:
(1)  489/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  490/  883A9E :                     ; 		btst	#bitJoyRight,d7
(1)  491/  883A9E :                     ; 		beq.s	.nor
(1)  492/  883A9E :                     ; ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1)  493/  883A9E :                     ; ; 		bge.s	.nor
(1)  494/  883A9E :                     ; 		add.w	#1,(a1)
(1)  495/  883A9E :                     ; 		bsr	.print_cursor
(1)  496/  883A9E :                     ; .nor:
(1)  497/  883A9E :                     ;
(1)  498/  883A9E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  499/  883A9E :                     ; 		and.w	#JoyC,d7
(1)  500/  883A9E :                     ; 		beq.s	.noc_c
(1)  501/  883A9E :                     ; 		move.w	(RAM_CurrIndx).w,d0
(1)  502/  883A9E :                     ; 		bsr	.procs_task
(1)  503/  883A9E :                     ; .noc_c:
(1)  504/  883A9E :                     ;
(1)  505/  883A9E :                     ; ; 		bsr	.wave_backgrnd
(1)  506/  883A9E :                     ; ; 		lea	str_COMM(pc),a0
(1)  507/  883A9E :                     ; ; 		move.l	#locate(0,2,9),d0
(1)  508/  883A9E :                     ; ; 		bsr	Video_Print
(1)  509/  883A9E :                     ; ; 		rts
(1)  510/  883A9E :                     ;
(1)  511/  883A9E :                     ; .move_model:
(1)  512/  883A9E :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  513/  883A9E :                     ; 		add.l	#$4000,mdl_x_rot(a0)
(1)  514/  883A9E :                     ; ; 		add.l	#$1000,mdl_z_rot(a0)
(1)  515/  883A9E :                     ; 		rts
(1)  516/  883A9E :                     ;
(1)  517/  883A9E :                     ; ; --------------------------------------------------
(1)  518/  883A9E :                     ;
(1)  519/  883A9E :                     ; .print_cursor:
(1)  520/  883A9E :                     ; ; 		lea	str_Status(pc),a0
(1)  521/  883A9E :                     ; ; 		move.l	#locate(2,20,4),d0
(1)  522/  883A9E :                     ; ; 		bsr	Video_Print
(1)  523/  883A9E :                     ; 		lea	str_Cursor(pc),a0
(1)  524/  883A9E :                     ; 		moveq	#0,d0
(1)  525/  883A9E :                     ; 		move.w	(RAM_CurrSelc).w,d0
(1)  526/  883A9E :                     ; 		add.l	#locate(2,2,5),d0
(1)  527/  883A9E :                     ; 		bsr	Video_Print
(1)  528/  883A9E :                     ; 		rts
(1)  529/  883A9E :                     ;
(1)  530/  883A9E :                     ; ; d1 - Track slot
(1)  531/  883A9E :                     ; .procs_task:
(1)  532/  883A9E :                     ; 		move.w	(RAM_CurrSelc).w,d7
(1)  533/  883A9E :                     ; 		add.w	d7,d7
(1)  534/  883A9E :                     ; 		move.w	.tasklist(pc,d7.w),d7
(1)  535/  883A9E :                     ; 		jmp	.tasklist(pc,d7.w)
(1)  536/  883A9E :                     ; .tasklist:
(1)  537/  883A9E :                     ; 		dc.w .task_00-.tasklist
(1)  538/  883A9E :                     ; 		dc.w .task_01-.tasklist
(1)  539/  883A9E :                     ; 		dc.w .task_02-.tasklist
(1)  540/  883A9E :                     ; 		dc.w .task_03-.tasklist
(1)  541/  883A9E :                     ; 		dc.w .task_04-.tasklist
(1)  542/  883A9E :                     ; ; 		dc.w .task_05-.tasklist
(1)  543/  883A9E :                     ;
(1)  544/  883A9E :                     ; ; d0 - Track slot
(1)  545/  883A9E :                     ; .task_00:
(1)  546/  883A9E :                     ; 		lea	MasterTrkList(pc),a0
(1)  547/  883A9E :                     ; 		move.w	(RAM_CurrTrack).w,d7
(1)  548/  883A9E :                     ; 		lsl.w	#4,d7
(1)  549/  883A9E :                     ; 		lea	(a0,d7.w),a0
(1)  550/  883A9E :                     ; 		move.w	$C(a0),d1
(1)  551/  883A9E :                     ; 		moveq	#0,d2
(1)  552/  883A9E :                     ; 		move.w	$E(a0),d3
(1)  553/  883A9E :                     ; 		bra	Sound_TrkPlay
(1)  554/  883A9E :                     ; .task_01:
(1)  555/  883A9E :                     ; 		bra	Sound_TrkStop
(1)  556/  883A9E :                     ; .task_02:
(1)  557/  883A9E :                     ; 		bra	Sound_TrkResume
(1)  558/  883A9E :                     ; .task_03:
(1)  559/  883A9E :                     ; 		move.w	(RAM_CurrTicks).w,d1
(1)  560/  883A9E :                     ; 		bra	Sound_TrkTicks
(1)  561/  883A9E :                     ; .task_04:
(1)  562/  883A9E :                     ; 		move.w	(RAM_CurrTempo).w,d1
(1)  563/  883A9E :                     ; 		bra	Sound_GlbTempo
(1)  564/  883A9E :                     ;
(1)  565/  883A9E :                     ;
(1)  566/  883A9E :                     ; ====================================================================
(1)  567/  883A9E :                     ; ------------------------------------------------------
(1)  568/  883A9E :                     ; Subroutines
(1)  569/  883A9E :                     ; ------------------------------------------------------
(1)  570/  883A9E :                     ;
(1)  571/  883A9E :                     ; ; d2 - BLOCK
(1)  572/  883A9E :                     ; PlayThisSfx:
(1)  573/  883A9E :                     ; 		lea	(GemaTrkData_Sfx),a0
(1)  574/  883A9E :                     ; 		moveq	#1,d0
(1)  575/  883A9E :                     ; 		moveq	#6,d1
(1)  576/  883A9E :                     ; ; 		moveq	#0,d2
(1)  577/  883A9E :                     ; 		moveq	#0,d3
(1)  578/  883A9E :                     ; 		bra	Sound_TrkPlay
(1)  579/  883A9E :                     ;
(1)  580/  883A9E :                     ;
(1)  581/  883A9E :                     ; Emilie_Move:
(1)  582/  883A9E :                     ;
(1)  583/  883A9E :                     ; 		lea	(Controller_2),a0
(1)  584/  883A9E :                     ; 		move.b	(a0),d0
(1)  585/  883A9E :                     ; 		cmp.b	#$03,d0
(1)  586/  883A9E :                     ; 		bne.s	.not_mouse
(1)  587/  883A9E :                     ;
(1)  588/  883A9E :                     ; 		move.w	#320,d2
(1)  589/  883A9E :                     ; 		move.w	(RAM_EmiPosX).w,d1
(1)  590/  883A9E :                     ; 		move.w	mouse_x(a0),d0
(1)  591/  883A9E :                     ; 		muls.w	#$0E,d0
(1)  592/  883A9E :                     ; 		asr.w	#4,d0
(1)  593/  883A9E :                     ; 		add.w	d0,d1
(1)  594/  883A9E :                     ; 		or.w	d1,d1
(1)  595/  883A9E :                     ; 		bpl.s	.left_x
(1)  596/  883A9E :                     ; 		clr.w	d1
(1)  597/  883A9E :                     ; .left_x:
(1)  598/  883A9E :                     ; 		cmp.w	d2,d1
(1)  599/  883A9E :                     ; 		blt.s	.right_x
(1)  600/  883A9E :                     ; 		move.w	d2,d1
(1)  601/  883A9E :                     ; .right_x:
(1)  602/  883A9E :                     ; 		move.w	d1,(RAM_EmiPosX).w
(1)  603/  883A9E :                     ;
(1)  604/  883A9E :                     ; 		move.w	#224,d2
(1)  605/  883A9E :                     ; 		move.w	(RAM_EmiPosY).w,d1
(1)  606/  883A9E :                     ; 		move.w	mouse_Y(a0),d0
(1)  607/  883A9E :                     ; 		muls.w	#$0E,d0
(1)  608/  883A9E :                     ; 		asr.w	#4,d0
(1)  609/  883A9E :                     ; 		add.w	d0,d1
(1)  610/  883A9E :                     ; 		or.w	d1,d1
(1)  611/  883A9E :                     ; 		bpl.s	.left_y
(1)  612/  883A9E :                     ; 		clr.w	d1
(1)  613/  883A9E :                     ; .left_y:
(1)  614/  883A9E :                     ; 		cmp.w	d2,d1
(1)  615/  883A9E :                     ; 		blt.s	.right_y
(1)  616/  883A9E :                     ; 		move.w	d2,d1
(1)  617/  883A9E :                     ; .right_y:
(1)  618/  883A9E :                     ; 		move.w	d1,(RAM_EmiPosY).w
(1)  619/  883A9E :                     ;
(1)  620/  883A9E :                     ; .not_mouse:
(1)  621/  883A9E :                     ; 		rts
(1)  622/  883A9E :                     ;
(1)  623/  883A9E :                     Emilie_MkSprite:
(1)  624/  883A9E : 4DF8 9C30           		lea	(RAM_Sprites),a6
(1)  625/  883AA2 : 2038 9006           		move.l	(RAM_EmiPosY),d0
(1)  626/  883AA6 : 2238 9004           		move.l	(RAM_EmiPosX),d1
(1)  627/  883AAA : 4840                		swap	d0
(1)  628/  883AAC : 4841                		swap	d1
(1)  629/  883AAE : D07C 00A0           		add.w	#$80+32,d0
(1)  630/  883AB2 : D27C 00A0           		add.w	#$80+32,d1
(1)  631/  883AB6 : 3438 9002           		move.w	(RAM_EmiAnim),d2
(1)  632/  883ABA : E64A                		lsr.w	#3,d2
(1)  633/  883ABC : C47C 0003           		and.w	#%11,d2
(1)  634/  883AC0 : 3638 9000           		move.w	(RAM_EmiFrame),d3
(1)  635/  883AC4 : D443                		add.w	d3,d2
(1)  636/  883AC6 : D442                		add.w	d2,d2
(1)  637/  883AC8 : 41FA 00BA           		lea	Map_Nicole(pc),a0
(1)  638/  883ACC : 3430 2000           		move.w	(a0,d2.w),d2
(1)  639/  883AD0 : D0C2                		adda	d2,a0
(1)  640/  883AD2 : 1818                		move.b	(a0)+,d4
(1)  641/  883AD4 : C87C 00FF           		and.w	#$FF,d4
(1)  642/  883AD8 : 987C 0001           		sub.w	#1,d4
(1)  643/  883ADC : 3A3C 0001           		move.w	#$0001,d5
(1)  644/  883AE0 : 3C3C 0380           		move.w	#emily_VRAM,d6
(1)  645/  883AE4 :                     .nxt_pz:
(1)  646/  883AE4 : 1618                		move.b	(a0)+,d3
(1)  647/  883AE6 : 4883                		ext.w	d3
(1)  648/  883AE8 : D640                		add.w	d0,d3
(1)  649/  883AEA : 3CC3                		move.w	d3,(a6)+
(1)  650/  883AEC :                     
(1)  651/  883AEC : 1618                		move.b	(a0)+,d3
(1)  652/  883AEE : E14B                		lsl.w	#8,d3
(1)  653/  883AF0 : D645                		add.w	d5,d3
(1)  654/  883AF2 : 3CC3                		move.w	d3,(a6)+
(1)  655/  883AF4 :                     
(1)  656/  883AF4 : 1618                		move.b	(a0)+,d3
(1)  657/  883AF6 : E14B                		lsl.w	#8,d3
(1)  658/  883AF8 : 1418                		move.b	(a0)+,d2
(1)  659/  883AFA : C47C 00FF           		and.w	#$FF,d2
(1)  660/  883AFE : D443                		add.w	d3,d2
(1)  661/  883B00 : D446                		add.w	d6,d2
(1)  662/  883B02 : 3CC2                		move.w	d2,(a6)+
(1)  663/  883B04 :                     
(1)  664/  883B04 : 1618                		move.b	(a0)+,d3
(1)  665/  883B06 : 4883                		ext.w	d3
(1)  666/  883B08 : D641                		add.w	d1,d3
(1)  667/  883B0A : 3CC3                		move.w	d3,(a6)+
(1)  668/  883B0C : DA7C 0001           		add.w	#1,d5
(1)  669/  883B10 : 51CC FFD2           		dbf	d4,.nxt_pz
(1)  670/  883B14 : 429E                		clr.l	(a6)+
(1)  671/  883B16 : 429E                		clr.l	(a6)+
(1)  672/  883B18 :                     
(1)  673/  883B18 :                     	; DPLC
(1)  674/  883B18 : 3438 9002           		move.w	(RAM_EmiAnim),d2
(1)  675/  883B1C : E64A                		lsr.w	#3,d2
(1)  676/  883B1E : C47C 0003           		and.w	#%11,d2
(1)  677/  883B22 : 3638 9000           		move.w	(RAM_EmiFrame),d3
(1)  678/  883B26 : D443                		add.w	d3,d2
(1)  679/  883B28 : D442                		add.w	d2,d2
(1)  680/  883B2A : 41FA 0178           		lea	Dplc_Nicole(pc),a0
(1)  681/  883B2E : 3430 2000           		move.w	(a0,d2.w),d2
(1)  682/  883B32 : D0C2                		adda	d2,a0
(1)  683/  883B34 : 3818                		move.w	(a0)+,d4
(1)  684/  883B36 : C87C 00FF           		and.w	#$FF,d4
(1)  685/  883B3A : 987C 0001           		sub.w	#1,d4
(1)  686/  883B3E : 3A3C 0380           		move.w	#emily_VRAM,d5
(1)  687/  883B42 :                     
(1)  688/  883B42 :                     
(1)  689/  883B42 :                     	; d0 - graphics
(1)  690/  883B42 :                     	; d5 - VRAM OUTPUT
(1)  691/  883B42 : EB4D                		lsl.w	#5,d5
(1)  692/  883B44 : 7200                		moveq	#0,d1
(1)  693/  883B46 :                     .nxt_dpz:
(1)  694/  883B46 : 203C 0001 8000      		move.l	#ART_EMI,d0
(1)  695/  883B4C : 3218                		move.w	(a0)+,d1
(1)  696/  883B4E : 3401                		move.w	d1,d2
(1)  697/  883B50 : C27C 07FF           		and.w	#$7FF,d1
(1)  698/  883B54 : EB49                		lsl.w	#5,d1
(1)  699/  883B56 : D081                		add.l	d1,d0
(1)  700/  883B58 : 3205                		move.w	d5,d1
(1)  701/  883B5A : EE4A                		lsr.w	#7,d2
(1)  702/  883B5C : D47C 0020           		add.w	#$20,d2
(1)  703/  883B60 : 3602                		move.w	d2,d3
(1)  704/  883B62 : 6100 F3E2           		bsr	Video_DmaMkEntry
(1)  705/  883B66 : DA43                		add.w	d3,d5
(1)  706/  883B68 : 51CC FFDC           		dbf	d4,.nxt_dpz
(1)  707/  883B6C :                     .no_upd:
(1)  708/  883B6C : 4E75                		rts
(1)  709/  883B6E :                     
(1)  710/  883B6E :                     ; ====================================================================
(1)  711/  883B6E :                     ; ------------------------------------------------------
(1)  712/  883B6E :                     ; VBlank
(1)  713/  883B6E :                     ; ------------------------------------------------------
(1)  714/  883B6E :                     
(1)  715/  883B6E :                     ; ------------------------------------------------------
(1)  716/  883B6E :                     ; HBlank
(1)  717/  883B6E :                     ; ------------------------------------------------------
(1)  718/  883B6E :                     
(1)  719/  883B6E :                     ; ====================================================================
(1)  720/  883B6E :                     ; ------------------------------------------------------
(1)  721/  883B6E :                     ; DATA
(1)  722/  883B6E :                     ;
(1)  723/  883B6E :                     ; Small stuff goes here
(1)  724/  883B6E :                     ; ------------------------------------------------------
(1)  725/  883B6E :                     
(1)  726/  883B6E :                     ; PAL_TESTBOARD:
(1)  727/  883B6E :                     ; 		binclude "data/md/bg/bg_pal.bin"
(1)  728/  883B6E :                     ; 		binclude "data/md/bg/fg_pal.bin"
(1)  729/  883B6E :                     ; 		align 2
(1)  730/  883B6E :                     Pal_Emily:
(1)  731/  883B6E : 0000                		dc.w 0
(1)  732/  883B70 :                     		binclude "data/md/sprites/emi_pal.bin",2
(1)  733/  883B84 :                     		align 2
(1)  734/  883B84 :                     ; Pal_TestMap:
(1)  735/  883B84 :                     ; 		binclude "data/md/bg/test_pal.bin"
(1)  736/  883B84 :                     ; 		align 2
(1)  737/  883B84 :                     ; Map_TestMap:
(1)  738/  883B84 :                     ; 		binclude "data/md/bg/test_map.bin"
(1)  739/  883B84 :                     ; 		align 2
(1)  740/  883B84 :                     
(1)  741/  883B84 :                     Map_Nicole:
(1)  742/  883B84 :                     		include "data/md/sprites/emi_map.asm"
(2)    1/  883B84 :                     .mappings:
(2)    2/  883B84 : 0020                		dc.w .frame_0-.mappings
(2)    3/  883B86 : 0030                		dc.w .frame_1-.mappings
(2)    4/  883B88 : 0045                		dc.w .frame_2-.mappings
(2)    5/  883B8A : 0055                		dc.w .frame_3-.mappings
(2)    6/  883B8C : 0065                		dc.w .frame_4-.mappings
(2)    7/  883B8E : 0075                		dc.w .frame_5-.mappings
(2)    8/  883B90 : 0085                		dc.w .frame_6-.mappings
(2)    9/  883B92 : 0095                		dc.w .frame_7-.mappings
(2)   10/  883B94 : 00A5                		dc.w .frame_8-.mappings
(2)   11/  883B96 : 00B5                		dc.w .frame_9-.mappings
(2)   12/  883B98 : 00C5                		dc.w .frame_10-.mappings
(2)   13/  883B9A : 00D5                		dc.w .frame_11-.mappings
(2)   14/  883B9C : 00E5                		dc.w .frame_12-.mappings
(2)   15/  883B9E : 00F5                		dc.w .frame_13-.mappings
(2)   16/  883BA0 : 0105                		dc.w .frame_14-.mappings
(2)   17/  883BA2 : 0115                		dc.w .frame_15-.mappings
(2)   18/  883BA4 :                     .frame_0:
(2)   19/  883BA4 : 03                  		dc.b $3
(2)   20/  883BA5 :                     
(2)   21/  883BA5 : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   22/  883BAA : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   23/  883BAF : E808 0014 C8        		dc.b $E8,$8,$0,$14,$C8
(2)   24/  883BB4 :                     .frame_1:
(2)   25/  883BB4 : 04                  		dc.b $4
(2)   26/  883BB5 :                     
(2)   27/  883BB5 : C00E 0000 C0        		dc.b $C0,$E,$0,$0,$C0
(2)   28/  883BBA : E00C 000C C0        		dc.b $E0,$C,$0,$C,$C0
(2)   29/  883BBF : D808 0010 C8        		dc.b $D8,$8,$0,$10,$C8
(2)   30/  883BC4 : E804 0013 C8        		dc.b $E8,$4,$0,$13,$C8
(2)   31/  883BC9 :                     .frame_2:
(2)   32/  883BC9 : 03                  		dc.b $3
(2)   33/  883BCA :                     
(2)   34/  883BCA : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   35/  883BCF : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   36/  883BD4 : E808 0014 C8        		dc.b $E8,$8,$0,$14,$C8
(2)   37/  883BD9 :                     .frame_3:
(2)   38/  883BD9 : 03                  		dc.b $3
(2)   39/  883BDA :                     
(2)   40/  883BDA : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   41/  883BDF : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   42/  883BE4 : E804 0014 C8        		dc.b $E8,$4,$0,$14,$C8
(2)   43/  883BE9 :                     .frame_4:
(2)   44/  883BE9 : 03                  		dc.b $3
(2)   45/  883BEA :                     
(2)   46/  883BEA : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   47/  883BEF : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   48/  883BF4 : E808 0014 C8        		dc.b $E8,$8,$0,$14,$C8
(2)   49/  883BF9 :                     .frame_5:
(2)   50/  883BF9 : 03                  		dc.b $3
(2)   51/  883BFA :                     
(2)   52/  883BFA : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   53/  883BFF : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   54/  883C04 : E804 0014 C8        		dc.b $E8,$4,$0,$14,$C8
(2)   55/  883C09 :                     .frame_6:
(2)   56/  883C09 : 03                  		dc.b $3
(2)   57/  883C0A :                     
(2)   58/  883C0A : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   59/  883C0F : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   60/  883C14 : E808 0014 C8        		dc.b $E8,$8,$0,$14,$C8
(2)   61/  883C19 :                     .frame_7:
(2)   62/  883C19 : 03                  		dc.b $3
(2)   63/  883C1A :                     
(2)   64/  883C1A : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   65/  883C1F : E00C 0010 C0        		dc.b $E0,$C,$0,$10,$C0
(2)   66/  883C24 : E804 0014 C8        		dc.b $E8,$4,$0,$14,$C8
(2)   67/  883C29 :                     .frame_8:
(2)   68/  883C29 : 03                  		dc.b $3
(2)   69/  883C2A :                     
(2)   70/  883C2A : C00B 0000 C0        		dc.b $C0,$B,$0,$0,$C0
(2)   71/  883C2F : E005 000C C8        		dc.b $E0,$5,$0,$C,$C8
(2)   72/  883C34 : C002 0010 D8        		dc.b $C0,$2,$0,$10,$D8
(2)   73/  883C39 :                     .frame_9:
(2)   74/  883C39 : 03                  		dc.b $3
(2)   75/  883C3A :                     
(2)   76/  883C3A : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   77/  883C3F : E80C 0010 C0        		dc.b $E8,$C,$0,$10,$C0
(2)   78/  883C44 : E008 0014 C8        		dc.b $E0,$8,$0,$14,$C8
(2)   79/  883C49 :                     .frame_10:
(2)   80/  883C49 : 03                  		dc.b $3
(2)   81/  883C4A :                     
(2)   82/  883C4A : C00B 0000 C0        		dc.b $C0,$B,$0,$0,$C0
(2)   83/  883C4F : E005 000C C8        		dc.b $E0,$5,$0,$C,$C8
(2)   84/  883C54 : C002 0010 D8        		dc.b $C0,$2,$0,$10,$D8
(2)   85/  883C59 :                     .frame_11:
(2)   86/  883C59 : 03                  		dc.b $3
(2)   87/  883C5A :                     
(2)   88/  883C5A : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)   89/  883C5F : E80C 0010 C0        		dc.b $E8,$C,$0,$10,$C0
(2)   90/  883C64 : E008 0014 C8        		dc.b $E0,$8,$0,$14,$C8
(2)   91/  883C69 :                     .frame_12:
(2)   92/  883C69 : 03                  		dc.b $3
(2)   93/  883C6A :                     
(2)   94/  883C6A : C00E 0000 C0        		dc.b $C0,$E,$0,$0,$C0
(2)   95/  883C6F : D806 000C C8        		dc.b $D8,$6,$0,$C,$C8
(2)   96/  883C74 : D800 0012 D8        		dc.b $D8,$0,$0,$12,$D8
(2)   97/  883C79 :                     .frame_13:
(2)   98/  883C79 : 03                  		dc.b $3
(2)   99/  883C7A :                     
(2)  100/  883C7A : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)  101/  883C7F : E009 0010 C0        		dc.b $E0,$9,$0,$10,$C0
(2)  102/  883C84 : E800 0016 D8        		dc.b $E8,$0,$0,$16,$D8
(2)  103/  883C89 :                     .frame_14:
(2)  104/  883C89 : 03                  		dc.b $3
(2)  105/  883C8A :                     
(2)  106/  883C8A : C00E 0000 C0        		dc.b $C0,$E,$0,$0,$C0
(2)  107/  883C8F : D806 000C C8        		dc.b $D8,$6,$0,$C,$C8
(2)  108/  883C94 : D800 0012 D8        		dc.b $D8,$0,$0,$12,$D8
(2)  109/  883C99 :                     .frame_15:
(2)  110/  883C99 : 02                  		dc.b $2
(2)  111/  883C9A :                     
(2)  112/  883C9A : C00F 0000 C0        		dc.b $C0,$F,$0,$0,$C0
(2)  113/  883C9F : E00D 0010 C0        		dc.b $E0,$D,$0,$10,$C0
(2)  114/  883CA4 :                     
(1)  743/  883CA4 :                     		align 2
(1)  744/  883CA4 :                     Dplc_Nicole:
(1)  745/  883CA4 :                     		include "data/md/sprites/emi_plc.asm"
(2)    1/  883CA4 :                     .dplc:
(2)    2/  883CA4 : 0020                		dc.w .frame_0-.dplc
(2)    3/  883CA6 : 0028                		dc.w .frame_1-.dplc
(2)    4/  883CA8 : 0032                		dc.w .frame_2-.dplc
(2)    5/  883CAA : 003A                		dc.w .frame_3-.dplc
(2)    6/  883CAC : 0042                		dc.w .frame_4-.dplc
(2)    7/  883CAE : 004A                		dc.w .frame_5-.dplc
(2)    8/  883CB0 : 0052                		dc.w .frame_6-.dplc
(2)    9/  883CB2 : 005A                		dc.w .frame_7-.dplc
(2)   10/  883CB4 : 0062                		dc.w .frame_8-.dplc
(2)   11/  883CB6 : 006A                		dc.w .frame_9-.dplc
(2)   12/  883CB8 : 0072                		dc.w .frame_10-.dplc
(2)   13/  883CBA : 007A                		dc.w .frame_11-.dplc
(2)   14/  883CBC : 0082                		dc.w .frame_12-.dplc
(2)   15/  883CBE : 008A                		dc.w .frame_13-.dplc
(2)   16/  883CC0 : 0092                		dc.w .frame_14-.dplc
(2)   17/  883CC2 : 009A                		dc.w .frame_15-.dplc
(2)   18/  883CC4 :                     .frame_0:
(2)   19/  883CC4 : 0003                		dc.w $3
(2)   20/  883CC6 :                     
(2)   21/  883CC6 : F000                		dc.w $F000
(2)   22/  883CC8 : 3010                		dc.w $3010
(2)   23/  883CCA : 2014                		dc.w $2014
(2)   24/  883CCC :                     .frame_1:
(2)   25/  883CCC : 0004                		dc.w $4
(2)   26/  883CCE :                     
(2)   27/  883CCE : B017                		dc.w $B017
(2)   28/  883CD0 : 3023                		dc.w $3023
(2)   29/  883CD2 : 2027                		dc.w $2027
(2)   30/  883CD4 : 102A                		dc.w $102A
(2)   31/  883CD6 :                     .frame_2:
(2)   32/  883CD6 : 0003                		dc.w $3
(2)   33/  883CD8 :                     
(2)   34/  883CD8 : F02C                		dc.w $F02C
(2)   35/  883CDA : 303C                		dc.w $303C
(2)   36/  883CDC : 2040                		dc.w $2040
(2)   37/  883CDE :                     .frame_3:
(2)   38/  883CDE : 0003                		dc.w $3
(2)   39/  883CE0 :                     
(2)   40/  883CE0 : F043                		dc.w $F043
(2)   41/  883CE2 : 3053                		dc.w $3053
(2)   42/  883CE4 : 1057                		dc.w $1057
(2)   43/  883CE6 :                     .frame_4:
(2)   44/  883CE6 : 0003                		dc.w $3
(2)   45/  883CE8 :                     
(2)   46/  883CE8 : F059                		dc.w $F059
(2)   47/  883CEA : 3069                		dc.w $3069
(2)   48/  883CEC : 206D                		dc.w $206D
(2)   49/  883CEE :                     .frame_5:
(2)   50/  883CEE : 0003                		dc.w $3
(2)   51/  883CF0 :                     
(2)   52/  883CF0 : F070                		dc.w $F070
(2)   53/  883CF2 : 3080                		dc.w $3080
(2)   54/  883CF4 : 1084                		dc.w $1084
(2)   55/  883CF6 :                     .frame_6:
(2)   56/  883CF6 : 0003                		dc.w $3
(2)   57/  883CF8 :                     
(2)   58/  883CF8 : F086                		dc.w $F086
(2)   59/  883CFA : 3096                		dc.w $3096
(2)   60/  883CFC : 209A                		dc.w $209A
(2)   61/  883CFE :                     .frame_7:
(2)   62/  883CFE : 0003                		dc.w $3
(2)   63/  883D00 :                     
(2)   64/  883D00 : F09D                		dc.w $F09D
(2)   65/  883D02 : 30AD                		dc.w $30AD
(2)   66/  883D04 : 10B1                		dc.w $10B1
(2)   67/  883D06 :                     .frame_8:
(2)   68/  883D06 : 0003                		dc.w $3
(2)   69/  883D08 :                     
(2)   70/  883D08 : B0B3                		dc.w $B0B3
(2)   71/  883D0A : 30BF                		dc.w $30BF
(2)   72/  883D0C : 20C3                		dc.w $20C3
(2)   73/  883D0E :                     .frame_9:
(2)   74/  883D0E : 0003                		dc.w $3
(2)   75/  883D10 :                     
(2)   76/  883D10 : F0C6                		dc.w $F0C6
(2)   77/  883D12 : 30D6                		dc.w $30D6
(2)   78/  883D14 : 20DA                		dc.w $20DA
(2)   79/  883D16 :                     .frame_10:
(2)   80/  883D16 : 0003                		dc.w $3
(2)   81/  883D18 :                     
(2)   82/  883D18 : B0DD                		dc.w $B0DD
(2)   83/  883D1A : 30E9                		dc.w $30E9
(2)   84/  883D1C : 20ED                		dc.w $20ED
(2)   85/  883D1E :                     .frame_11:
(2)   86/  883D1E : 0003                		dc.w $3
(2)   87/  883D20 :                     
(2)   88/  883D20 : F0F0                		dc.w $F0F0
(2)   89/  883D22 : 3100                		dc.w $3100
(2)   90/  883D24 : 2104                		dc.w $2104
(2)   91/  883D26 :                     .frame_12:
(2)   92/  883D26 : 0003                		dc.w $3
(2)   93/  883D28 :                     
(2)   94/  883D28 : B107                		dc.w $B107
(2)   95/  883D2A : 5113                		dc.w $5113
(2)   96/  883D2C : 0119                		dc.w $119
(2)   97/  883D2E :                     .frame_13:
(2)   98/  883D2E : 0003                		dc.w $3
(2)   99/  883D30 :                     
(2)  100/  883D30 : F11A                		dc.w $F11A
(2)  101/  883D32 : 512A                		dc.w $512A
(2)  102/  883D34 : 0130                		dc.w $130
(2)  103/  883D36 :                     .frame_14:
(2)  104/  883D36 : 0003                		dc.w $3
(2)  105/  883D38 :                     
(2)  106/  883D38 : B131                		dc.w $B131
(2)  107/  883D3A : 513D                		dc.w $513D
(2)  108/  883D3C : 0143                		dc.w $143
(2)  109/  883D3E :                     .frame_15:
(2)  110/  883D3E : 0002                		dc.w $2
(2)  111/  883D40 :                     
(2)  112/  883D40 : F144                		dc.w $F144
(2)  113/  883D42 : 7154                		dc.w $7154
(2)  114/  883D44 :                     
(1)  746/  883D44 :                     		align 2
(1)  747/  883D44 :                     
(1)  748/  883D44 :                     str_Main:
(1)  749/  883D44 : 5072 6F62 616E 646F 		dc.b "Probando cosas aqui nomas",0
                    2063 6F73 6173 2061 
                    7175 6920 6E6F 6D61 
                    7300                
(1)  750/  883D5E :                     		align 2
(1)  751/  883D5E :                     
      36/  883D5E :                     		include "code/debug.asm"
(1)    1/  883D5E :                     ; ====================================================================
(1)    2/  883D5E :                     ; ----------------------------------------------------------------
(1)    3/  883D5E :                     ; Default gamemode
(1)    4/  883D5E :                     ; ----------------------------------------------------------------
(1)    5/  883D5E :                     
(1)    6/  883D5E :                     ; ====================================================================
(1)    7/  883D5E :                     ; ------------------------------------------------------
(1)    8/  883D5E :                     ; Variables
(1)    9/  883D5E :                     ; ------------------------------------------------------
(1)   10/  883D5E :                     
(1)   11/  883D5E : =$0                 set_StartPage	equ	0
(1)   12/  883D5E : =$4                 MAX_PAGE0_EN	equ	4
(1)   13/  883D5E : =$4                 MAX_GEMAENTRY	equ	4
(1)   14/  883D5E : =$8                 SCN0_TIMER	equ	8
(1)   15/  883D5E :                     
(1)   16/  883D5E :                     ; ====================================================================
(1)   17/  883D5E :                     ; ------------------------------------------------------
(1)   18/  883D5E :                     ; Structs
(1)   19/  883D5E :                     ; ------------------------------------------------------
(1)   20/  883D5E :                     
(1)   21/  883D5E :                     ; 		struct 0
(1)   22/  883D5E :                     ; strc_xpos	ds.w 1
(1)   23/  883D5E :                     ; strc_ypos	ds.w 1
(1)   24/  883D5E :                     ; 		finish
(1)   25/  883D5E :                     
(1)   26/  883D5E :                     ; ====================================================================
(1)   27/  883D5E :                     ; ------------------------------------------------------
(1)   28/  883D5E :                     ; This mode's RAM
(1)   29/  883D5E :                     ; ------------------------------------------------------
(1)   30/  883D5E :                     
(1)   31/  883D5E : (MACRO)             		struct RAM_ModeBuff
(1)   31/  883D5E : =$883D5E            GLBL_LASTPC     set *
(1)   31/    3D5E :                                     dephase
(1)   31/    3D5E : =$3D5E              GLBL_LASTORG    set *
(1)   31/FFFFFFFFFFFF9000 :                                     phase RAM_MODEBUFF
(1)   32/FFFFFFFFFFFF9000 :                     RAM_CurrPage	ds.w 1
(1)   33/FFFFFFFFFFFF9002 :                     RAM_CurrGfx	ds.w 1
(1)   34/FFFFFFFFFFFF9004 :                     RAM_CurrSelc	ds.w 1
(1)   35/FFFFFFFFFFFF9006 :                     RAM_CurrIndx	ds.w 1
(1)   36/FFFFFFFFFFFF9008 :                     RAM_CurrTrack	ds.w 1
(1)   37/FFFFFFFFFFFF900A :                     RAM_CurrTicks	ds.w 1
(1)   38/FFFFFFFFFFFF900C :                     RAM_CurrTempo	ds.w 1
(1)   39/FFFFFFFFFFFF900E :                     RAM_Scrn0_Frame	ds.w 1
(1)   40/FFFFFFFFFFFF9010 :                     RAM_Scrn0_Timer	ds.w 1
(1)   41/FFFFFFFFFFFF9012 :                     RAM_GemaUpd	ds.w 1
(1)   42/FFFFFFFFFFFF9014 :                     RAM_GemaList	ds.w 4
(1)   43/FFFFFFFFFFFF901C :                     RAM_GemaListFM	ds.w 6
(1)   44/FFFFFFFFFFFF9028 :                     RAM_GemaListPWM	ds.w 7
(1)   45/FFFFFFFFFFFF9036 :                     RAM_SprTimer	ds.w 1
(1)   46/FFFFFFFFFFFF9038 :                     RAM_SprFrame	ds.w 1
(1)   47/FFFFFFFFFFFF903A : (MACRO)             		finish
(1)   47/FFFFFFFFFFFF9000 :                                     !org GLBL_LASTORG
(1)   47/  883D5E :                                     phase GLBL_LASTPC
(1)   48/  883D5E :                     
(1)   49/  883D5E :                     ; ====================================================================
(1)   50/  883D5E :                     ; ------------------------------------------------------
(1)   51/  883D5E :                     ; Code start
(1)   52/  883D5E :                     ; ------------------------------------------------------
(1)   53/  883D5E :                     
(1)   54/  883D5E :                     MD_DebugMenu:
(1)   55/  883D5E : 46FC 2700           		move.w	#$2700,sr
(1)   56/  883D62 : 6100 FB70           		bsr	Mode_FadeOut
(1)   57/  883D66 : 6100 FB6A           		bsr	Mode_Init
(1)   58/  883D6A : 6100 EE50           		bsr	Video_PrintInit
(1)   59/  883D6E :                     
(1)   60/  883D6E : 7000                		moveq	#0,d0
(1)   61/  883D70 : 6100 CDD8           		bsr	Sound_TrkStop
(1)   62/  883D74 : 7001                		moveq	#1,d0
(1)   63/  883D76 : 6100 CDD2           		bsr	Sound_TrkStop
(1)   64/  883D7A : 4278 A110           		clr.w	(RAM_PaletteFd).w
(1)   65/  883D7E :                     
(1)   66/  883D7E : 08B9 0006 FFFF A60B 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   67/  883D86 : 6100 ECE0           		bsr	Video_Update
(1)   68/  883D8A : 31FC 0000 9000      		move.w	#set_StartPage,(RAM_CurrPage).w
(1)   69/  883D90 : 08F9 0006 FFFF A60B 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   70/  883D98 : 13FC 0007 FFFF A615 		move.b	#%111,(RAM_VdpRegs+$B).l
(1)   71/  883DA0 : 13FC 0000 FFFF A611 		move.b	#0,(RAM_VdpRegs+7).l
(1)   72/  883DA8 : 6100 ECBE           		bsr	Video_Update
(1)   73/  883DAC :                     
(1)   74/  883DAC :                     ; ====================================================================
(1)   75/  883DAC :                     ; ------------------------------------------------------
(1)   76/  883DAC :                     ; Loop
(1)   77/  883DAC :                     ; ------------------------------------------------------
(1)   78/  883DAC :                     
(1)   79/  883DAC :                     .loop:
(1)   80/  883DAC : 6100 F694           		bsr	System_WaitFrame
(1)   81/  883DB0 : 6100 F00A           		bsr	Video_RunFade
(1)   82/  883DB4 : 66F6                		bne.s	.loop
(1)   83/  883DB6 : 3038 9000           		move.w	(RAM_CurrPage).w,d0
(1)   84/  883DBA : C07C 001F           		and.w	#%11111,d0
(1)   85/  883DBE : D040                		add.w	d0,d0
(1)   86/  883DC0 : D040                		add.w	d0,d0
(1)   87/  883DC2 : D040                		add.w	d0,d0
(1)   88/  883DC4 : 4A78 9000           		tst.w	(RAM_CurrPage).w
(1)   89/  883DC8 : 6B06                		bmi.s	.on_loop
(1)   90/  883DCA : D0BC 0000 0004      		add.l	#4,d0
(1)   91/  883DD0 :                     .on_loop:
(1)   92/  883DD0 : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)   93/  883DD4 : 60D6                		bra	.loop
(1)   94/  883DD6 :                     
(1)   95/  883DD6 :                     ; ====================================================================
(1)   96/  883DD6 :                     ; ------------------------------------------------------
(1)   97/  883DD6 :                     ; Mode sections
(1)   98/  883DD6 :                     ; ------------------------------------------------------
(1)   99/  883DD6 :                     
(1)  100/  883DD6 :                     .list:
(1)  101/  883DD6 : 6000 0066           		bra.w	.page0
(1)  102/  883DDA : 6000 0034           		bra.w	.page0_init
(1)  103/  883DDE :                     
(1)  104/  883DDE : 6000 00D8           		bra.w	.page1
(1)  105/  883DE2 : 6000 0096           		bra.w	.page1_init
(1)  106/  883DE6 :                     
(1)  107/  883DE6 : 6000 021E           		bra.w	.page2
(1)  108/  883DEA : 6000 013C           		bra.w	.page2_init
(1)  109/  883DEE :                     
(1)  110/  883DEE : 6000 02FA           		bra.w	.page3
(1)  111/  883DF2 : 6000 026A           		bra.w	.page3_init
(1)  112/  883DF6 :                     
(1)  113/  883DF6 : 6000 03F0           		bra.w	.page4
(1)  114/  883DFA : 6000 0398           		bra.w	.page4_init
(1)  115/  883DFE :                     
(1)  116/  883DFE : 6000 0476           		bra.w	.page5
(1)  117/  883E02 : 6000 0434           		bra.w	.page5_init
(1)  118/  883E06 :                     
(1)  119/  883E06 : 6000 0036           		bra.w	.page0
(1)  120/  883E0A : 6000 0004           		bra.w	.page0_init
(1)  121/  883E0E :                     
(1)  122/  883E0E :                     ; ====================================================================
(1)  123/  883E0E :                     ; --------------------------------------------------
(1)  124/  883E0E :                     ; Page 0
(1)  125/  883E0E :                     ; --------------------------------------------------
(1)  126/  883E0E :                     
(1)  127/  883E0E :                     .page0_ret:
(1)  128/  883E0E : 4E75                		rts
(1)  129/  883E10 :                     .page0_init:
(1)  130/  883E10 : 6100 ECBA           		bsr	Video_ClearScreen
(1)  131/  883E14 : 6100 EDC0           		bsr	Video_PrintPal
(1)  132/  883E18 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  133/  883E1E : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  134/  883E22 :                     
(1)  135/  883E22 : 303C 0000           		move.w	#0,d0
(1)  136/  883E26 : 6100 F3BA           		bsr	Video_Mars_GfxMode
(1)  137/  883E2A : 41FA 0798           		lea	str_Title(pc),a0	; Print menu
(1)  138/  883E2E : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  139/  883E34 : 6100 EDB2           		bsr	Video_Print
(1)  140/  883E38 : 6124                		bsr	.page0_cursor
(1)  141/  883E3A : 6100 066A           		bsr	.fade_in
(1)  142/  883E3E :                     
(1)  143/  883E3E :                     .page0:
(1)  144/  883E3E : 41FA 0A58           		lea	str_StatsPage0(pc),a0
(1)  145/  883E42 : 203C 0000 020A      		move.l	#locate(0,2,10),d0
(1)  146/  883E48 : 6100 ED9E           		bsr	Video_Print
(1)  147/  883E4C :                     
(1)  148/  883E4C : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  149/  883E50 : 0807 0007           		btst	#bitJoyStart,d7
(1)  150/  883E54 : 6612                		bne.s	.page0_jump
(1)  151/  883E56 : 7004                		moveq	#MAX_PAGE0_EN,d0			; Numof entries
(1)  152/  883E58 : 6100 06AA           		bsr	.move_cursor_ud		; Move U/D
(1)  153/  883E5C : 67B0                		beq	.page0_ret
(1)  154/  883E5E :                     .page0_cursor:
(1)  155/  883E5E : 223C 0000 0203      		move.l	#locate(0,2,3),d1
(1)  156/  883E64 : 6000 068C           		bra	.print_cursor
(1)  157/  883E68 :                     .page0_jump:
(1)  158/  883E68 : 6100 0662           		bsr	.fade_out
(1)  159/  883E6C : 3038 9004           		move.w	(RAM_CurrSelc).w,d0
(1)  160/  883E70 : D07C 0001           		add.w	#1,d0
(1)  161/  883E74 : 31C0 9000           		move.w	d0,(RAM_CurrPage).w
(1)  162/  883E78 : 4E75                		rts
(1)  163/  883E7A :                     
(1)  164/  883E7A :                     ; ====================================================================
(1)  165/  883E7A :                     ; --------------------------------------------------
(1)  166/  883E7A :                     ; Page 1
(1)  167/  883E7A :                     ; --------------------------------------------------
(1)  168/  883E7A :                     
(1)  169/  883E7A :                     .page1_init:
(1)  170/  883E7A : 6100 EC50           		bsr	Video_ClearScreen
(1)  171/  883E7E : 6100 ED56           		bsr	Video_PrintPal
(1)  172/  883E82 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  173/  883E88 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  174/  883E8C : 616E                		bsr.s	.make_frame
(1)  175/  883E8E :                     
(1)  176/  883E8E : 43F8 AC82           		lea	(RAM_MdDreq+Dreq_ScrnBuff),a1
(1)  177/  883E92 : 237C 0000 0002 0004 		move.l	#2,Dreq_Scrn1_Type(a1)
(1)  178/  883E9A : 6100 F666           		bsr	System_MarsUpdate
(1)  179/  883E9E :                     
(1)  180/  883E9E : 41FA 07A0           		lea	str_Page1(pc),a0
(1)  181/  883EA2 : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  182/  883EA8 : 6100 ED3E           		bsr	Video_Print
(1)  183/  883EAC : 303C 0001           		move.w	#1,d0
(1)  184/  883EB0 : 6100 F330           		bsr	Video_Mars_GfxMode
(1)  185/  883EB4 : 6100 05F0           		bsr	.fade_in
(1)  186/  883EB8 :                     .page1:
(1)  187/  883EB8 : 0478 0001 9010      		sub.w	#1,(RAM_Scrn0_Timer).w
(1)  188/  883EBE : 6A18                		bpl.s	.keep
(1)  189/  883EC0 : 31FC 0008 9010      		move.w	#SCN0_TIMER,(RAM_Scrn0_Timer).w
(1)  190/  883EC6 : 6134                		bsr.s	.make_frame
(1)  191/  883EC8 : 6100 F354           		bsr	Video_Mars_WaitFrame
(1)  192/  883ECC : 0678 0001 900E      		add.w	#1,(RAM_Scrn0_Frame).w
(1)  193/  883ED2 : 0278 0003 900E      		and.w	#%11,(RAM_Scrn0_Frame).w
(1)  194/  883ED8 :                     .keep:
(1)  195/  883ED8 : 41FA 078A           		lea	str_Page1_info(pc),a0
(1)  196/  883EDC : 203C 0000 0204      		move.l	#locate(0,2,4),d0
(1)  197/  883EE2 : 6100 ED04           		bsr	Video_Print
(1)  198/  883EE6 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  199/  883EEA : 0807 0007           		btst	#bitJoyStart,d7
(1)  200/  883EEE : 670A                		beq.s	.page1_ret
(1)  201/  883EF0 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  202/  883EF6 : 6100 05D4           		bsr	.fade_out
(1)  203/  883EFA :                     .page1_ret:
(1)  204/  883EFA : 4E75                		rts
(1)  205/  883EFC :                     
(1)  206/  883EFC :                     .make_frame:
(1)  207/  883EFC : 3038 900E           		move.w	(RAM_Scrn0_Frame).w,d0
(1)  208/  883F00 : E548                		lsl.w	#2,d0
(1)  209/  883F02 : 41FA 0014           		lea	.frames(pc),a0
(1)  210/  883F06 : 43F8 AC82           		lea	(RAM_MdDreq+Dreq_ScrnBuff),a1
(1)  211/  883F0A : 2030 0000           		move.l	(a0,d0.w),d0
(1)  212/  883F0E : D0BC 2000 0000      		add.l	#TH,d0
(1)  213/  883F14 : 2280                		move.l	d0,Dreq_Scrn1_Data(a1)
(1)  214/  883F16 : 4E75                		rts
(1)  215/  883F18 :                     .frames:
(1)  216/  883F18 : 0207 3798           		dc.l TESTMARS_DIRECT_1
(1)  217/  883F1C : 0209 2B98           		dc.l TESTMARS_DIRECT_2
(1)  218/  883F20 : 020B 1F98           		dc.l TESTMARS_DIRECT_3
(1)  219/  883F24 : 0209 2B98           		dc.l TESTMARS_DIRECT_2
(1)  220/  883F28 :                     
(1)  221/  883F28 :                     ; ====================================================================
(1)  222/  883F28 :                     ; --------------------------------------------------
(1)  223/  883F28 :                     ; Page 2
(1)  224/  883F28 :                     ; --------------------------------------------------
(1)  225/  883F28 :                     
(1)  226/  883F28 :                     .page2_init:
(1)  227/  883F28 : 6100 EBA2           		bsr	Video_ClearScreen
(1)  228/  883F2C : 6100 ECA8           		bsr	Video_PrintPal
(1)  229/  883F30 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  230/  883F36 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  231/  883F3A :                     
(1)  232/  883F3A :                     	; SUPER SPRITES TEST
(1)  233/  883F3A : 41F8 AE62           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1)  234/  883F3E :                     
(1)  235/  883F3E : 203C 0212 3418      		move.l	#SuperSpr_Test,d0
(1)  236/  883F44 : 2200                		move.l	d0,d1
(1)  237/  883F46 : 82BC 2000 0000      		or.l	#TH,d1
(1)  238/  883F4C : 2081                		move.l	d1,marsspr_data(a0)
(1)  239/  883F4E : 317C 0040 0004      		move.w	#64,marsspr_dwidth(a0)
(1)  240/  883F54 : 317C 0000 0008      		move.w	#0,marsspr_x(a0)
(1)  241/  883F5A : 317C 0000 000A      		move.w	#0,marsspr_y(a0)
(1)  242/  883F60 : 317C 0020 000C      		move.w	#32,marsspr_xs(a0)
(1)  243/  883F66 : 317C 0030 000E      		move.w	#48,marsspr_ys(a0)
(1)  244/  883F6C : 317C 0080 0006      		move.w	#$80,marsspr_indx(a0)
(1)  245/  883F72 :                     
(1)  246/  883F72 : 203C 0212 3418      		move.l	#SuperSpr_Test,d0
(1)  247/  883F78 : D0BC 0000 0C00      		add.l	#(32*48)*2,d0
(1)  248/  883F7E : 2200                		move.l	d0,d1
(1)  249/  883F80 : 82BC 2000 0000      		or.l	#TH,d1
(1)  250/  883F86 : D0FC 0014           		adda	#sizeof_marsspr,a0
(1)  251/  883F8A : 2081                		move.l	d1,marsspr_data(a0)
(1)  252/  883F8C : 317C 0040 0004      		move.w	#64,marsspr_dwidth(a0)
(1)  253/  883F92 : 317C 0060 0008      		move.w	#(320/2)-64,marsspr_x(a0)
(1)  254/  883F98 : 317C 0030 000A      		move.w	#(224/2)-64,marsspr_y(a0)
(1)  255/  883F9E : 317C 0020 000C      		move.w	#32,marsspr_xs(a0)
(1)  256/  883FA4 : 317C 0030 000E      		move.w	#48,marsspr_ys(a0)
(1)  257/  883FAA : 317C 0080 0006      		move.w	#$80,marsspr_indx(a0)
(1)  258/  883FB0 :                     
(1)  259/  883FB0 :                     
(1)  260/  883FB0 :                     ; 		move.w	#$100,marsspr_dx(a0)
(1)  261/  883FB0 :                     ; 		move.w	#$100,marsspr_dy(a0)
(1)  262/  883FB0 :                     ; 		move.l	#$00000000,marsspr_t_x(a0)
(1)  263/  883FB0 :                     ; 		move.l	#$00000000,marsspr_b_x(a0)
(1)  264/  883FB0 :                     
(1)  265/  883FB0 :                     ; 		lea	str_Page2(pc),a0	; Print text
(1)  266/  883FB0 :                     ; 		move.l	#locate(0,2,2),d0
(1)  267/  883FB0 :                     ; 		bsr	Video_Print
(1)  268/  883FB0 :                     ; 		move.l	#ART_FGTEST,d0
(1)  269/  883FB0 :                     ; 		move.w	#$280*$20,d1
(1)  270/  883FB0 :                     ; 		move.w	#ART_FGTEST_e-ART_FGTEST,d2
(1)  271/  883FB0 :                     ; 		bsr	Video_LoadArt
(1)  272/  883FB0 :                     ; 		move.l	#ART_BGTEST,d0
(1)  273/  883FB0 :                     ; 		move.w	#1*$20,d1
(1)  274/  883FB0 :                     ; 		move.w	#ART_BGTEST_e-ART_BGTEST,d2
(1)  275/  883FB0 :                     ; 		bsr	Video_LoadArt
(1)  276/  883FB0 :                     ; 		lea	(MAP_FGTEST),a0
(1)  277/  883FB0 :                     ; 		move.l	#locate(0,0,0),d0
(1)  278/  883FB0 :                     ; 		move.l	#mapsize(512,256),d1
(1)  279/  883FB0 :                     ; 		move.w	#$2000+$0280,d2
(1)  280/  883FB0 :                     ; 		bsr	Video_LoadMap
(1)  281/  883FB0 :                     ; 		lea	(MAP_BGTEST),a0
(1)  282/  883FB0 :                     ; 		move.l	#locate(1,0,0),d0
(1)  283/  883FB0 :                     ; 		move.l	#mapsize(512,256),d1
(1)  284/  883FB0 :                     ; 		move.w	#$0001,d2
(1)  285/  883FB0 :                     ; 		bsr	Video_LoadMap
(1)  286/  883FB0 :                     
(1)  287/  883FB0 : 41F8 AC82           		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  288/  883FB4 : 20BC 0204 F398      		move.l	#TESTMARS_BG,Dreq_Scrn2_Data(a0)
(1)  289/  883FBA : 217C 0000 0140 000C 		move.l	#320,Dreq_Scrn2_W(a0)
(1)  290/  883FC2 : 217C 0000 00F0 0010 		move.l	#240,Dreq_Scrn2_H(a0)
(1)  291/  883FCA : 217C 0000 0000 0004 		move.l	#$00000000,Dreq_Scrn2_X(a0)
(1)  292/  883FD2 : 217C 0000 0000 0008 		move.l	#$00000000,Dreq_Scrn2_Y(a0)
(1)  293/  883FDA : 6100 F526           		bsr	System_MarsUpdate
(1)  294/  883FDE : 303C 0002           		move.w	#2,d0
(1)  295/  883FE2 : 6100 F1FE           		bsr	Video_Mars_GfxMode
(1)  296/  883FE6 : 41F9 0091 6936      		lea	(PalData_Mars_Test),a0
(1)  297/  883FEC : 7000                		moveq	#0,d0
(1)  298/  883FEE : 323C 0100           		move.w	#256,d1
(1)  299/  883FF2 : 7401                		moveq	#1,d2
(1)  300/  883FF4 : 6100 F246           		bsr	Video_FadePal_Mars
(1)  301/  883FF8 :                     ; 		lea	PAL_TESTBOARD(pc),a0
(1)  302/  883FF8 :                     ; 		moveq	#0,d0
(1)  303/  883FF8 :                     ; 		move.w	#$20,d1
(1)  304/  883FF8 :                     ; 		bsr	Video_FadePal
(1)  305/  883FF8 : 4278 A190           		clr.w	(RAM_MdMarsPalFd).w
(1)  306/  883FFC : 4278 AA82           		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  307/  884000 : 615A                		bsr	.this_bg
(1)  308/  884002 : 6100 04A2           		bsr	.fade_in
(1)  309/  884006 :                     .page2:
(1)  310/  884006 : 6154                		bsr	.this_bg
(1)  311/  884008 : 2038 AC86           		move.l	(RAM_MdDreq+Dreq_ScrnBuff+Dreq_Scrn2_X).w,d0
(1)  312/  88400C : 2238 AC8A           		move.l	(RAM_MdDreq+Dreq_ScrnBuff+Dreq_Scrn2_Y).w,d1
(1)  313/  884010 : 2A3C 0002 0000      		move.l	#$20000,d5
(1)  314/  884016 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  315/  88401A : 0807 0003           		btst	#bitJoyRight,d7
(1)  316/  88401E : 6702                		beq.s	.nor_m
(1)  317/  884020 : D085                		add.l	d5,d0
(1)  318/  884022 :                     .nor_m:
(1)  319/  884022 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  320/  884026 : 6702                		beq.s	.nol_m
(1)  321/  884028 : 9085                		sub.l	d5,d0
(1)  322/  88402A :                     .nol_m:
(1)  323/  88402A : 0807 0001           		btst	#bitJoyDown,d7
(1)  324/  88402E : 6702                		beq.s	.nod_m
(1)  325/  884030 : D285                		add.l	d5,d1
(1)  326/  884032 :                     .nod_m:
(1)  327/  884032 : 0807 0000           		btst	#bitJoyUp,d7
(1)  328/  884036 : 6702                		beq.s	.nou_m
(1)  329/  884038 : 9285                		sub.l	d5,d1
(1)  330/  88403A :                     .nou_m:
(1)  331/  88403A : 21C0 AC86           		move.l	d0,(RAM_MdDreq+Dreq_ScrnBuff+Dreq_Scrn2_X).w
(1)  332/  88403E : 21C1 AC8A           		move.l	d1,(RAM_MdDreq+Dreq_ScrnBuff+Dreq_Scrn2_Y).w
(1)  333/  884042 :                     
(1)  334/  884042 : 6100 0536           		bsr	SuperSprite_Test
(1)  335/  884046 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  336/  88404A : 0807 0007           		btst	#bitJoyStart,d7
(1)  337/  88404E : 670A                		beq.s	.page2_ret
(1)  338/  884050 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  339/  884056 : 6100 0474           		bsr	.fade_out
(1)  340/  88405A :                     .page2_ret:
(1)  341/  88405A : 4E75                		rts
(1)  342/  88405C :                     
(1)  343/  88405C :                     .this_bg:
(1)  344/  88405C :                     ; 		move.l	(RAM_MdDreq+Dreq_Scrn2_X).w,d0
(1)  345/  88405C :                     ; 		move.l	d0,d1
(1)  346/  88405C :                     ; 		swap	d0
(1)  347/  88405C :                     ; 		swap	d1
(1)  348/  88405C :                     ; 		lsr.l	#1,d0
(1)  349/  88405C :                     ; 		lsr.l	#2,d1
(1)  350/  88405C :                     ; 		neg.w	d0
(1)  351/  88405C :                     ; 		neg.w	d1
(1)  352/  88405C :                     ; 		lea	(RAM_HorScroll),a0
(1)  353/  88405C :                     ; 		move.w	#(224/2)-1,d7
(1)  354/  88405C :                     ; .next:
(1)  355/  88405C :                     ; 		move.w	d0,(a0)+
(1)  356/  88405C :                     ; 		move.w	d1,(a0)+
(1)  357/  88405C :                     ; 		move.w	d0,(a0)+
(1)  358/  88405C :                     ; 		move.w	d1,(a0)+
(1)  359/  88405C :                     ; 		dbf	d7,.next
(1)  360/  88405C : 4E75                		rts
(1)  361/  88405E :                     
(1)  362/  88405E :                     ; ====================================================================
(1)  363/  88405E :                     ; --------------------------------------------------
(1)  364/  88405E :                     ; Page 3
(1)  365/  88405E :                     ; --------------------------------------------------
(1)  366/  88405E :                     
(1)  367/  88405E :                     .page3_init:
(1)  368/  88405E : 6100 EA6C           		bsr	Video_ClearScreen
(1)  369/  884062 : 6100 EB72           		bsr	Video_PrintPal
(1)  370/  884066 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  371/  88406C : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  372/  884070 :                     
(1)  373/  884070 : 41F8 AC82           		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  374/  884074 : 20BC 2206 1F98      		move.l	#TESTMARS_BG2|TH,Dreq_SclData(a0)
(1)  375/  88407A : 217C 0000 0000 0004 		move.l	#$00000000,Dreq_SclX(a0)	; X pos
(1)  376/  884082 : 217C 0000 0000 0008 		move.l	#$00000000,Dreq_SclY(a0)	; Y pos
(1)  377/  88408A : 217C 0001 0000 0014 		move.l	#$00010000,Dreq_SclDX(a0)	; DX
(1)  378/  884092 : 217C 0001 0000 0018 		move.l	#$00010000,Dreq_SclDY(a0)	; DY
(1)  379/  88409A : 217C 0000 0140 000C 		move.l	#320,Dreq_SclWidth(a0)
(1)  380/  8840A2 : 217C 0000 00E0 0010 		move.l	#224,Dreq_SclHeight(a0)
(1)  381/  8840AA : 217C 0000 0001 001C 		move.l	#1,Dreq_SclMode(a0)		;
(1)  382/  8840B2 : 6100 F44E           		bsr	System_MarsUpdate
(1)  383/  8840B6 :                     
(1)  384/  8840B6 : 41FA 0594           		lea	str_Page3(pc),a0	; Print text
(1)  385/  8840BA : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  386/  8840C0 : 6100 EB26           		bsr	Video_Print
(1)  387/  8840C4 : 303C 0003           		move.w	#3,d0
(1)  388/  8840C8 : 6100 F118           		bsr	Video_Mars_GfxMode
(1)  389/  8840CC : 41F9 0091 6A6A      		lea	(PalData_Mars_Test2),a0
(1)  390/  8840D2 : 7000                		moveq	#0,d0
(1)  391/  8840D4 : 323C 0100           		move.w	#256,d1
(1)  392/  8840D8 : 7400                		moveq	#0,d2
(1)  393/  8840DA : 6100 F160           		bsr	Video_FadePal_Mars
(1)  394/  8840DE : 4278 A190           		clr.w	(RAM_MdMarsPalFd).w
(1)  395/  8840E2 : 4278 AA82           		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  396/  8840E6 : 6100 03BE           		bsr	.fade_in
(1)  397/  8840EA :                     .page3:
(1)  398/  8840EA : 41F8 AC82           		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  399/  8840EE : 2028 0004           		move.l	Dreq_SclX(a0),d0
(1)  400/  8840F2 : 2228 0008           		move.l	Dreq_SclY(a0),d1
(1)  401/  8840F6 : 2428 0014           		move.l	Dreq_SclDX(a0),d2
(1)  402/  8840FA : 2628 0018           		move.l	Dreq_SclDY(a0),d3
(1)  403/  8840FE : 283C 0000 0400      		move.l	#$400,d4
(1)  404/  884104 : 2A3C 0000 0800      		move.l	#$400*2,d5
(1)  405/  88410A :                     
(1)  406/  88410A : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  407/  88410E : 3C07                		move.w	d7,d6
(1)  408/  884110 : 0807 0001           		btst	#bitJoyDown,d7
(1)  409/  884114 : 6704                		beq.s	.noz_down
(1)  410/  884116 : D284                		add.l	d4,d1
(1)  411/  884118 : 9685                		sub.l	d5,d3
(1)  412/  88411A :                     .noz_down:
(1)  413/  88411A : 3C07                		move.w	d7,d6
(1)  414/  88411C : 0806 0000           		btst	#bitJoyUp,d6
(1)  415/  884120 : 6704                		beq.s	.noz_up
(1)  416/  884122 : 9284                		sub.l	d4,d1
(1)  417/  884124 : D685                		add.l	d5,d3
(1)  418/  884126 :                     .noz_up:
(1)  419/  884126 : 3C07                		move.w	d7,d6
(1)  420/  884128 : 0806 0003           		btst	#bitJoyRight,d6
(1)  421/  88412C : 6704                		beq.s	.noz_r
(1)  422/  88412E : D084                		add.l	d4,d0
(1)  423/  884130 : 9485                		sub.l	d5,d2
(1)  424/  884132 :                     .noz_r:
(1)  425/  884132 : 3C07                		move.w	d7,d6
(1)  426/  884134 : 0806 0002           		btst	#bitJoyLeft,d6
(1)  427/  884138 : 6704                		beq.s	.noz_l
(1)  428/  88413A : 9084                		sub.l	d4,d0
(1)  429/  88413C : D485                		add.l	d5,d2
(1)  430/  88413E :                     .noz_l:
(1)  431/  88413E : 2140 0004           		move.l	d0,Dreq_SclX(a0)
(1)  432/  884142 : 2141 0008           		move.l	d1,Dreq_SclY(a0)
(1)  433/  884146 : 2142 0014           		move.l	d2,Dreq_SclDX(a0)
(1)  434/  88414A : 2143 0018           		move.l	d3,Dreq_SclDY(a0)
(1)  435/  88414E :                     
(1)  436/  88414E : 3C07                		move.w	d7,d6
(1)  437/  884150 : 0806 000A           		btst	#bitJoyX,d6
(1)  438/  884154 : 6724                		beq.s	.nox_x
(1)  439/  884156 : 41F8 AC82           		lea	(RAM_MdDreq+Dreq_ScrnBuff),a0
(1)  440/  88415A : 217C 0000 0000 0004 		move.l	#$00000000,Dreq_SclX(a0)	; X pos
(1)  441/  884162 : 217C 0000 0000 0008 		move.l	#$00000000,Dreq_SclY(a0)	; Y pos
(1)  442/  88416A : 217C 0001 0000 0014 		move.l	#$00010000,Dreq_SclDX(a0)	; DX
(1)  443/  884172 : 217C 0001 0000 0018 		move.l	#$00010000,Dreq_SclDY(a0)	; DY
(1)  444/  88417A :                     .nox_x:
(1)  445/  88417A :                     
(1)  446/  88417A : 6100 03FE           		bsr	SuperSprite_Test
(1)  447/  88417E : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  448/  884182 : 0807 0007           		btst	#bitJoyStart,d7
(1)  449/  884186 : 670A                		beq.s	.page3_ret
(1)  450/  884188 : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  451/  88418E : 6100 033C           		bsr	.fade_out
(1)  452/  884192 :                     .page3_ret:
(1)  453/  884192 : 4E75                		rts
(1)  454/  884194 :                     
(1)  455/  884194 :                     ; ====================================================================
(1)  456/  884194 :                     ; --------------------------------------------------
(1)  457/  884194 :                     ; Page 4
(1)  458/  884194 :                     ; --------------------------------------------------
(1)  459/  884194 :                     
(1)  460/  884194 :                     .page4_init:
(1)  461/  884194 : 6100 E936           		bsr	Video_ClearScreen
(1)  462/  884198 : 6100 EA3C           		bsr	Video_PrintPal
(1)  463/  88419C : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  464/  8841A2 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  465/  8841A6 :                     
(1)  466/  8841A6 : 41F8 ACA2           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  467/  8841AA : 20BC 2600 6DB0      		move.l	#MarsObj_test|TH,mdl_data(a0)
(1)  468/  8841B0 : 217C FFFF FA00 0010 		move.l	#-$600,mdl_z_pos(a0)
(1)  469/  8841B8 :                     ; 		move.l	#$4000,mdl_y_pos(a0)
(1)  470/  8841B8 : 41FA 049E           		lea	str_Page4(pc),a0	; Print text
(1)  471/  8841BC : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  472/  8841C2 : 6100 EA24           		bsr	Video_Print
(1)  473/  8841C6 :                     
(1)  474/  8841C6 : 6100 F33A           		bsr	System_MarsUpdate
(1)  475/  8841CA : 303C 0004           		move.w	#4,d0
(1)  476/  8841CE : 6100 F012           		bsr	Video_Mars_GfxMode
(1)  477/  8841D2 : 41F9 0091 6C6A      		lea	(MDLDATA_PAL_TEST),a0
(1)  478/  8841D8 : 7000                		moveq	#0,d0
(1)  479/  8841DA : 323C 0100           		move.w	#256,d1
(1)  480/  8841DE : 7400                		moveq	#0,d2
(1)  481/  8841E0 : 6100 F05A           		bsr	Video_FadePal_Mars
(1)  482/  8841E4 :                     
(1)  483/  8841E4 : 6100 02C0           		bsr	.fade_in
(1)  484/  8841E8 :                     .page4:
(1)  485/  8841E8 : 41FA 06AE           		lea	str_StatsPage0(pc),a0
(1)  486/  8841EC : 203C 0000 0204      		move.l	#locate(0,2,4),d0
(1)  487/  8841F2 : 6100 E9F4           		bsr	Video_Print
(1)  488/  8841F6 : 41F8 ACA2           		lea	(RAM_MdDreq+Dreq_Objects),a0
(1)  489/  8841FA : 06A8 0000 3000 0014 		add.l	#$3000,mdl_x_rot(a0)
(1)  490/  884202 :                     ; 		add.l	#$2000,mdl_y_rot(a0)
(1)  491/  884202 :                     ; 		add.l	#$2000,mdl_z_rot(a0)
(1)  492/  884202 :                     
(1)  493/  884202 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  494/  884206 : 0807 0000           		btst	#bitJoyUp,d7
(1)  495/  88420A : 6708                		beq.s	.z_up
(1)  496/  88420C : 04A8 0000 0010 0010 		sub.l	#$10,mdl_z_pos(a0)
(1)  497/  884214 :                     .z_up:
(1)  498/  884214 : 0807 0001           		btst	#bitJoyDown,d7
(1)  499/  884218 : 6708                		beq.s	.z_dw
(1)  500/  88421A : 06A8 0000 0010 0010 		add.l	#$10,mdl_z_pos(a0)
(1)  501/  884222 :                     .z_dw:
(1)  502/  884222 :                     
(1)  503/  884222 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  504/  884226 : 0807 0007           		btst	#bitJoyStart,d7
(1)  505/  88422A : 670A                		beq.s	.page4_ret
(1)  506/  88422C : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  507/  884232 : 6100 0298           		bsr	.fade_out
(1)  508/  884236 :                     .page4_ret:
(1)  509/  884236 : 4E75                		rts
(1)  510/  884238 :                     
(1)  511/  884238 :                     ; ====================================================================
(1)  512/  884238 :                     ; --------------------------------------------------
(1)  513/  884238 :                     ; Page 5
(1)  514/  884238 :                     ; --------------------------------------------------
(1)  515/  884238 :                     
(1)  516/  884238 :                     .page5_init:
(1)  517/  884238 : 6100 E892           		bsr	Video_ClearScreen
(1)  518/  88423C : 6100 E998           		bsr	Video_PrintPal
(1)  519/  884240 : 0078 8000 9000      		or.w	#$8000,(RAM_CurrPage).w
(1)  520/  884246 : 4278 9004           		clr.w	(RAM_CurrSelc).w
(1)  521/  88424A :                     
(1)  522/  88424A :                     ; 		move.l	#ART_FGTEST,d0
(1)  523/  88424A :                     ; 		move.w	#$280*$20,d1
(1)  524/  88424A :                     ; 		move.w	#ART_FGTEST_e-ART_FGTEST,d2
(1)  525/  88424A :                     ; 		bsr	Video_LoadArt
(1)  526/  88424A :                     ; 		move.l	#ART_BGTEST,d0
(1)  527/  88424A :                     ; 		move.w	#1*$20,d1
(1)  528/  88424A :                     ; 		move.w	#ART_BGTEST_e-ART_BGTEST,d2
(1)  529/  88424A :                     ; 		bsr	Video_LoadArt
(1)  530/  88424A :                     ; 		lea	(MAP_FGTEST),a0
(1)  531/  88424A :                     ; 		move.l	#locate(0,0,0),d0
(1)  532/  88424A :                     ; 		move.l	#mapsize(512,256),d1
(1)  533/  88424A :                     ; 		move.w	#$2000+$0280,d2
(1)  534/  88424A :                     ; 		bsr	Video_LoadMap
(1)  535/  88424A :                     ; 		lea	(MAP_BGTEST),a0
(1)  536/  88424A :                     ; 		move.l	#locate(1,0,0),d0
(1)  537/  88424A :                     ; 		move.l	#mapsize(512,256),d1
(1)  538/  88424A :                     ; 		move.w	#$0001,d2
(1)  539/  88424A :                     ; 		bsr	Video_LoadMap
(1)  540/  88424A :                     
(1)  541/  88424A : 41FA 0446           		lea	str_Gema(pc),a0
(1)  542/  88424E : 203C 0000 0202      		move.l	#locate(0,2,2),d0
(1)  543/  884254 : 6100 E992           		bsr	Video_Print
(1)  544/  884258 : 41FA 04BA           		lea	str_GemaStatus(pc),a0
(1)  545/  88425C : 203C 0000 050C      		move.l	#locate(0,5,12),d0
(1)  546/  884262 : 6100 E984           		bsr	Video_Print
(1)  547/  884266 :                     
(1)  548/  884266 : 303C 0000           		move.w	#0,d0
(1)  549/  88426A : 6100 EF76           		bsr	Video_Mars_GfxMode
(1)  550/  88426E : 6100 00FA           		bsr	.page5_update
(1)  551/  884272 : 6100 0232           		bsr	.fade_in
(1)  552/  884276 :                     .page5:
(1)  553/  884276 : 6100 0116           		bsr	.page5_updvars
(1)  554/  88427A :                     
(1)  555/  88427A :                     	; Controller
(1)  556/  88427A : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  557/  88427E : 0807 0009           		btst	#bitJoyY,d7
(1)  558/  884282 : 6712                		beq.s	.noy2
(1)  559/  884284 : 0C78 0001 9006      		cmp.w	#1,(RAM_CurrIndx).w
(1)  560/  88428A : 670A                		beq.	.noy2
(1)  561/  88428C : 0678 0001 9006      		add.w	#1,(RAM_CurrIndx).w
(1)  562/  884292 : 6100 00D6           		bsr	.page5_update
(1)  563/  884296 :                     .noy2:
(1)  564/  884296 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  565/  88429A : 0807 000A           		btst	#bitJoyX,d7
(1)  566/  88429E : 6710                		beq.s	.nox2
(1)  567/  8842A0 : 4A78 9006           		tst.w	(RAM_CurrIndx).w
(1)  568/  8842A4 : 670A                		beq.s	.nox2
(1)  569/  8842A6 : 0478 0001 9006      		sub.w	#1,(RAM_CurrIndx).w
(1)  570/  8842AC : 6100 00BC           		bsr	.page5_update
(1)  571/  8842B0 :                     .nox2:
(1)  572/  8842B0 :                     
(1)  573/  8842B0 :                     	; UP/DOWN
(1)  574/  8842B0 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  575/  8842B4 : 0807 0000           		btst	#bitJoyUp,d7
(1)  576/  8842B8 : 6710                		beq.s	.nou2
(1)  577/  8842BA : 4A78 9004           		tst.w	(RAM_CurrSelc).w
(1)  578/  8842BE : 670A                		beq.s	.nou2
(1)  579/  8842C0 : 0478 0001 9004      		sub.w	#1,(RAM_CurrSelc).w
(1)  580/  8842C6 : 6100 00A2           		bsr	.page5_update
(1)  581/  8842CA :                     .nou2:
(1)  582/  8842CA : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  583/  8842CE : 0807 0001           		btst	#bitJoyDown,d7
(1)  584/  8842D2 : 6712                		beq.s	.nod2
(1)  585/  8842D4 : 0C78 0004 9004      		cmp.w	#MAX_GEMAENTRY,(RAM_CurrSelc).w
(1)  586/  8842DA : 6C0A                		bge.s	.nod2
(1)  587/  8842DC : 0678 0001 9004      		add.w	#1,(RAM_CurrSelc).w
(1)  588/  8842E2 : 6100 0086           		bsr	.page5_update
(1)  589/  8842E6 :                     .nod2:
(1)  590/  8842E6 :                     
(1)  591/  8842E6 :                     ; 	; LEFT/RIGHT
(1)  592/  8842E6 : 43F8 9008           		lea	(RAM_CurrTrack),a1
(1)  593/  8842EA : 0C78 0003 9004      		cmp.w	#3,(RAM_CurrSelc).w
(1)  594/  8842F0 : 6604                		bne.s	.toptrk
(1)  595/  8842F2 : D2FC 0002           		add	#2,a1
(1)  596/  8842F6 :                     .toptrk:
(1)  597/  8842F6 : 0C78 0004 9004      		cmp.w	#4,(RAM_CurrSelc).w
(1)  598/  8842FC : 6604                		bne.s	.toptrk2
(1)  599/  8842FE : D2FC 0004           		add	#2*2,a1
(1)  600/  884302 :                     .toptrk2:
(1)  601/  884302 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  602/  884306 : CE7C 0010           		and.w	#JoyB,d7
(1)  603/  88430A : 6706                		beq.s	.noba
(1)  604/  88430C : 0651 0001           		add.w	#1,(a1)
(1)  605/  884310 : 6158                		bsr	.page5_update
(1)  606/  884312 :                     .noba:
(1)  607/  884312 : 3E38 A624           		move.w	(Controller_1+on_hold),d7
(1)  608/  884316 : CE7C 0040           		and.w	#JoyA,d7
(1)  609/  88431A : 6706                		beq.s	.noaa
(1)  610/  88431C : 0451 0001           		sub.w	#1,(a1)
(1)  611/  884320 : 6148                		bsr	.page5_update
(1)  612/  884322 :                     .noaa:
(1)  613/  884322 :                     
(1)  614/  884322 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  615/  884326 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  616/  88432A : 6706                		beq.s	.nol
(1)  617/  88432C :                     ; 		tst.w	(a1)
(1)  618/  88432C :                     ; 		beq.s	.nol
(1)  619/  88432C : 0451 0001           		sub.w	#1,(a1)
(1)  620/  884330 : 6138                		bsr	.page5_update
(1)  621/  884332 :                     .nol:
(1)  622/  884332 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  623/  884336 : 0807 0003           		btst	#bitJoyRight,d7
(1)  624/  88433A : 6706                		beq.s	.nor
(1)  625/  88433C :                     ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1)  626/  88433C :                     ; 		bge.s	.nor
(1)  627/  88433C : 0651 0001           		add.w	#1,(a1)
(1)  628/  884340 : 6128                		bsr	.page5_update
(1)  629/  884342 :                     .nor:
(1)  630/  884342 :                     
(1)  631/  884342 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  632/  884346 : CE7C 0020           		and.w	#JoyC,d7
(1)  633/  88434A : 6708                		beq.s	.noc_c
(1)  634/  88434C : 3038 9006           		move.w	(RAM_CurrIndx).w,d0
(1)  635/  884350 : 6100 00E6           		bsr	.procs_task
(1)  636/  884354 :                     .noc_c:
(1)  637/  884354 :                     
(1)  638/  884354 : 3E38 A626           		move.w	(Controller_1+on_press),d7
(1)  639/  884358 : 0807 0007           		btst	#bitJoyStart,d7
(1)  640/  88435C : 670A                		beq.s	.page5_ret
(1)  641/  88435E : 31FC 0000 9000      		move.w	#0,(RAM_CurrPage).w
(1)  642/  884364 : 6100 0166           		bsr	.fade_out
(1)  643/  884368 :                     .page5_ret:
(1)  644/  884368 : 4E75                		rts
(1)  645/  88436A :                     .page5_update:
(1)  646/  88436A : 41FA 0306           		lea	str_Status(pc),a0
(1)  647/  88436E : 203C 0000 1404      		move.l	#locate(0,20,4),d0
(1)  648/  884374 : 6100 E872           		bsr	Video_Print
(1)  649/  884378 : 41FA 0244           		lea	str_Cursor(pc),a0
(1)  650/  88437C : 7000                		moveq	#0,d0
(1)  651/  88437E : 3038 9004           		move.w	(RAM_CurrSelc).w,d0
(1)  652/  884382 : D0BC 0000 0205      		add.l	#locate(0,2,5),d0
(1)  653/  884388 : 6000 E85E           		bra	Video_Print
(1)  654/  88438C : 4E75                		rts
(1)  655/  88438E :                     .page5_updvars:
(1)  656/  88438E : 4A78 9012           		tst.w	(RAM_GemaUpd).w
(1)  657/  884392 : 6770                		beq	.no_upd2
(1)  658/  884394 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  659/  88439C :                     .wait:
(1)  660/  88439C : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  661/  8843A4 : 66F6                		bne.s	.wait
(1)  662/  8843A6 : 4DF8 9014           		lea	(RAM_GemaList),a6
(1)  663/  8843AA : 49F9 00A0 168C      		lea	(z80_cpu+(psgcom)).l,a4
(1)  664/  8843B0 : 4BF9 00A0 16A8      		lea	(z80_cpu+(psgdtl)).l,a5
(1)  665/  8843B6 : 323C 0003           		move.w	#4-1,d1
(1)  666/  8843BA :                     .copy_1:
(1)  667/  8843BA : 303C FFFF           		move.w	#-1,d0
(1)  668/  8843BE : 102D 0006           		move.b	6(a5),d0
(1)  669/  8843C2 : E148                		lsl.w	#8,d0
(1)  670/  8843C4 : 101D                		move.b	(a5)+,d0
(1)  671/  8843C6 : 3CC0                		move.w	d0,(a6)+
(1)  672/  8843C8 : 51C9 FFF0           		dbf	d1,.copy_1
(1)  673/  8843CC :                     
(1)  674/  8843CC : 4BF9 00A0 1680      		lea	(z80_cpu+(fmcom+24)).l,a5
(1)  675/  8843D2 : 323C 0005           		move.w	#6-1,d1
(1)  676/  8843D6 :                     .copy_2:
(1)  677/  8843D6 : 102D 0006           		move.b	6(a5),d0
(1)  678/  8843DA : E148                		lsl.w	#8,d0
(1)  679/  8843DC : 101D                		move.b	(a5)+,d0
(1)  680/  8843DE : E058                		ror.w	#8,d0
(1)  681/  8843E0 : 3CC0                		move.w	d0,(a6)+
(1)  682/  8843E2 : 51C9 FFF2           		dbf	d1,.copy_2
(1)  683/  8843E6 :                     
(1)  684/  8843E6 : 4BF9 00A0 1638      		lea	(z80_cpu+(pwmcom+8)).l,a5
(1)  685/  8843EC : 323C 0006           		move.w	#7-1,d1
(1)  686/  8843F0 :                     .copy_3:
(1)  687/  8843F0 : 102D 0008           		move.b	8(a5),d0
(1)  688/  8843F4 : E148                		lsl.w	#8,d0
(1)  689/  8843F6 : 101D                		move.b	(a5)+,d0
(1)  690/  8843F8 : E058                		ror.w	#8,d0
(1)  691/  8843FA : C07C 03FF           		and.w	#$3FF,d0
(1)  692/  8843FE : 3CC0                		move.w	d0,(a6)+
(1)  693/  884400 : 51C9 FFEE           		dbf	d1,.copy_3
(1)  694/  884404 :                     
(1)  695/  884404 :                     
(1)  696/  884404 :                     .no_upd2:
(1)  697/  884404 : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  698/  88440C :                     	; ****
(1)  699/  88440C :                     
(1)  700/  88440C : 41FA 0402           		lea	str_GemaPsg(pc),a0
(1)  701/  884410 : 203C 0000 0A0E      		move.l	#locate(0,10,14),d0
(1)  702/  884416 : 6100 E7D0           		bsr	Video_Print
(1)  703/  88441A : 41FA 0414           		lea	str_GemaFm(pc),a0
(1)  704/  88441E : 203C 0000 140E      		move.l	#locate(0,20,14),d0
(1)  705/  884424 : 6100 E7C2           		bsr	Video_Print
(1)  706/  884428 : 41FA 0436           		lea	str_GemaPwm(pc),a0
(1)  707/  88442C : 203C 0000 1F0E      		move.l	#locate(0,31,14),d0
(1)  708/  884432 : 6000 E7B4           		bra	Video_Print
(1)  709/  884436 : 4E75                		rts
(1)  710/  884438 :                     
(1)  711/  884438 :                     ; d1 - Track slot
(1)  712/  884438 :                     .procs_task:
(1)  713/  884438 : 3E38 9004           		move.w	(RAM_CurrSelc).w,d7
(1)  714/  88443C : DE47                		add.w	d7,d7
(1)  715/  88443E : 3E3B 7006           		move.w	.tasklist(pc,d7.w),d7
(1)  716/  884442 : 4EFB 7002           		jmp	.tasklist(pc,d7.w)
(1)  717/  884446 :                     .tasklist:
(1)  718/  884446 : 000A                		dc.w .task_00-.tasklist
(1)  719/  884448 : 002E                		dc.w .task_01-.tasklist
(1)  720/  88444A : 003A                		dc.w .task_02-.tasklist
(1)  721/  88444C : 003E                		dc.w .task_03-.tasklist
(1)  722/  88444E : 0046                		dc.w .task_04-.tasklist
(1)  723/  884450 :                     ; 		dc.w .task_05-.tasklist
(1)  724/  884450 :                     
(1)  725/  884450 :                     ; d0 - Track slot
(1)  726/  884450 :                     .task_00:
(1)  727/  884450 : 41FA 00E8           		lea	MasterTrkList(pc),a0
(1)  728/  884454 : 3E38 9008           		move.w	(RAM_CurrTrack).w,d7
(1)  729/  884458 : E94F                		lsl.w	#4,d7
(1)  730/  88445A : 41F0 7000           		lea	(a0,d7.w),a0
(1)  731/  88445E : 3228 000C           		move.w	$C(a0),d1
(1)  732/  884462 : 7400                		moveq	#0,d2
(1)  733/  884464 : 3628 000E           		move.w	$E(a0),d3
(1)  734/  884468 : 6100 C6A2           		bsr	Sound_TrkPlay
(1)  735/  88446C : 31FC 0001 9012      		move.w	#1,(RAM_GemaUpd).w
(1)  736/  884472 : 6020                		bra.s	.cleanup
(1)  737/  884474 :                     .task_01:
(1)  738/  884474 : 31FC 0000 9012      		move.w	#0,(RAM_GemaUpd).w
(1)  739/  88447A : 6100 C6CE           		bsr	Sound_TrkStop
(1)  740/  88447E : 6014                		bra.s	.cleanup
(1)  741/  884480 :                     .task_02:
(1)  742/  884480 : 6000 C6DE           		bra	Sound_TrkResume
(1)  743/  884484 :                     .task_03:
(1)  744/  884484 : 3238 900A           		move.w	(RAM_CurrTicks).w,d1
(1)  745/  884488 : 6000 C6EC           		bra	Sound_TrkTicks
(1)  746/  88448C :                     .task_04:
(1)  747/  88448C : 3238 900C           		move.w	(RAM_CurrTempo).w,d1
(1)  748/  884490 : 6000 C700           		bra	Sound_GlbBeats
(1)  749/  884494 :                     
(1)  750/  884494 :                     .cleanup:
(1)  751/  884494 : 41F8 9014           		lea	(RAM_GemaList),a0
(1)  752/  884498 : 7000                		moveq	#0,d0
(1)  753/  88449A : 323C 0010           		move.w	#17-1,d1
(1)  754/  88449E :                     .clnup:
(1)  755/  88449E : 30C0                		move.w	d0,(a0)+
(1)  756/  8844A0 : 51C9 FFFC           		dbf	d1,.clnup
(1)  757/  8844A4 : 4E75                		rts
(1)  758/  8844A6 :                     
(1)  759/  8844A6 :                     ; ====================================================================
(1)  760/  8844A6 :                     ; ----------------------------------------------
(1)  761/  8844A6 :                     ; common subs
(1)  762/  8844A6 :                     ; ----------------------------------------------
(1)  763/  8844A6 :                     
(1)  764/  8844A6 :                     .fade_in:
(1)  765/  8844A6 : 31FC 0001 A5F6      		move.w	#1,(RAM_FadeMdReq).w
(1)  766/  8844AC : 31FC 0001 A5FE      		move.w	#1,(RAM_FadeMarsReq).w
(1)  767/  8844B2 : 31FC 0001 A5F8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  768/  8844B8 : 31FC 0004 A600      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  769/  8844BE : 31FC 0000 A5FA      		move.w	#0,(RAM_FadeMdDelay).w
(1)  770/  8844C4 : 31FC 0000 A602      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  771/  8844CA : 4E75                		rts
(1)  772/  8844CC :                     
(1)  773/  8844CC :                     .fade_out:
(1)  774/  8844CC : 31FC 0002 A5F6      		move.w	#2,(RAM_FadeMdReq).w
(1)  775/  8844D2 : 31FC 0002 A5FE      		move.w	#2,(RAM_FadeMarsReq).w
(1)  776/  8844D8 : 31FC 0001 A5F8      		move.w	#1,(RAM_FadeMdIncr).w
(1)  777/  8844DE : 31FC 0004 A600      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  778/  8844E4 : 31FC 0000 A5FA      		move.w	#0,(RAM_FadeMdDelay).w
(1)  779/  8844EA : 31FC 0000 A602      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  780/  8844F0 : 4E75                		rts
(1)  781/  8844F2 :                     
(1)  782/  8844F2 :                     .print_cursor:
(1)  783/  8844F2 : 41FA 00CA           		lea	str_Cursor(pc),a0
(1)  784/  8844F6 : 7000                		moveq	#0,d0
(1)  785/  8844F8 : 3038 9004           		move.w	(RAM_CurrSelc).w,d0
(1)  786/  8844FC : D081                		add.l	d1,d0
(1)  787/  8844FE : 6100 E6E8           		bsr	Video_Print
(1)  788/  884502 : 4E75                		rts
(1)  789/  884504 :                     
(1)  790/  884504 :                     .move_cursor_ud:
(1)  791/  884504 : 7E00                		moveq	#0,d7
(1)  792/  884506 : 3C38 A626           		move.w	(Controller_1+on_press),d6
(1)  793/  88450A : 0806 0000           		btst	#bitJoyUp,d6
(1)  794/  88450E : 670E                		beq.s	.p0_down
(1)  795/  884510 : 4A78 9004           		tst.w	(RAM_CurrSelc).w
(1)  796/  884514 : 6708                		beq.s	.p0_down
(1)  797/  884516 : 0478 0001 9004      		sub.w	#1,(RAM_CurrSelc).w
(1)  798/  88451C : 7E01                		moveq	#1,d7
(1)  799/  88451E :                     .p0_down:
(1)  800/  88451E : 0806 0001           		btst	#bitJoyDown,d6
(1)  801/  884522 : 6710                		beq.s	.p0_up
(1)  802/  884524 : 3E38 9004           		move.w	(RAM_CurrSelc).w,d7
(1)  803/  884528 : BE40                		cmp.w	d0,d7
(1)  804/  88452A : 6C08                		bge.s	.p0_up
(1)  805/  88452C : 0678 0001 9004      		add.w	#1,(RAM_CurrSelc).w
(1)  806/  884532 : 7E01                		moveq	#1,d7
(1)  807/  884534 :                     .p0_up:
(1)  808/  884534 : 4A47                		tst.w	d7
(1)  809/  884536 : 4E75                		rts
(1)  810/  884538 :                     
(1)  811/  884538 :                     ; 		lea	(MDLDATA_PAL_TEST),a0
(1)  812/  884538 :                     ; 		cmp.w	#4,(RAM_CurrGfx).w
(1)  813/  884538 :                     ; 		beq.s	.thispal
(1)  814/  884538 :                     ; 		lea	(PalData_Mars_Test2),a0
(1)  815/  884538 :                     ; 		cmp.w	#3,(RAM_CurrGfx).w
(1)  816/  884538 :                     ; 		beq.s	.thispal
(1)  817/  884538 :                     ; 		lea	(PalData_Mars_Test),a0
(1)  818/  884538 :                     ; .thispal:
(1)  819/  884538 :                     ; 		moveq	#0,d0
(1)  820/  884538 :                     ; 		move.w	#256,d1
(1)  821/  884538 :                     ; 		moveq	#0,d2
(1)  822/  884538 :                     ; 		bsr	Video_FadePal_Mars
(1)  823/  884538 :                     ; 		move.w	#1,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  824/  884538 :                     ; 		move.w	#1,(RAM_FadeMarsReq).w
(1)  825/  884538 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  826/  884538 :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  827/  884538 :                     ; 		move.w	#2,(RAM_FadeMdDelay).w
(1)  828/  884538 :                     ; 		move.w	#2,(RAM_FadeMarsDelay).w
(1)  829/  884538 :                     ; 		move.w	(RAM_CurrGfx).w,d0
(1)  830/  884538 :                     ; 		bsr	Video_Mars_GfxMode
(1)  831/  884538 :                     ; .page0_loop:
(1)  832/  884538 :                     ; ; 		bsr	Emilie_MkSprite
(1)  833/  884538 :                     ; 		bsr	Video_RunFade
(1)  834/  884538 :                     ; 		bne	.loop
(1)  835/  884538 :                     ; 		move.w	(Controller_1+on_press),d7
(1)  836/  884538 :                     ; 		btst	#bitJoyStart,d7
(1)  837/  884538 :                     ; 		beq.s	.no_mode0
(1)  838/  884538 :                     ; 		move.w	#1,(RAM_CurrPage).w
(1)  839/  884538 :                     ; 		move.w	#$920D,(RAM_WindowNew).w
(1)  840/  884538 :                     ; .no_mode0:
(1)  841/  884538 :                     ; 		move.w	(Controller_1+on_press),d7
(1)  842/  884538 :                     ; 		btst	#bitJoyZ,d7
(1)  843/  884538 :                     ; 		beq.s	.noah
(1)  844/  884538 :                     ; 		moveq	#0,d2
(1)  845/  884538 :                     ; 		bsr	PlayThisSfx
(1)  846/  884538 :                     ; .noah:
(1)  847/  884538 :                     ;
(1)  848/  884538 :                     ; 		move.l	(RAM_MdDreq+Dreq_Scrn2_X).w,d0
(1)  849/  884538 :                     ; 		move.l	(RAM_MdDreq+Dreq_Scrn2_Y).w,d1
(1)  850/  884538 :                     ; 		move.l	#$10000,d5
(1)  851/  884538 :                     ; 		move.l	#1,d6
(1)  852/  884538 :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  853/  884538 :                     ; 		btst	#bitJoyRight,d7
(1)  854/  884538 :                     ; 		beq.s	.nor_m
(1)  855/  884538 :                     ; 		add.l	d5,d0
(1)  856/  884538 :                     ; 		sub.w	d6,d2
(1)  857/  884538 :                     ; .nor_m:
(1)  858/  884538 :                     ; 		btst	#bitJoyLeft,d7
(1)  859/  884538 :                     ; 		beq.s	.nol_m
(1)  860/  884538 :                     ; 		sub.l	d5,d0
(1)  861/  884538 :                     ; 		add.w	d6,d2
(1)  862/  884538 :                     ; .nol_m:
(1)  863/  884538 :                     ; 		btst	#bitJoyDown,d7
(1)  864/  884538 :                     ; 		beq.s	.nod_m
(1)  865/  884538 :                     ; 		add.l	d5,d1
(1)  866/  884538 :                     ; 		add.w	d6,d3
(1)  867/  884538 :                     ; .nod_m:
(1)  868/  884538 :                     ; 		btst	#bitJoyUp,d7
(1)  869/  884538 :                     ; 		beq.s	.nou_m
(1)  870/  884538 :                     ; 		sub.l	d5,d1
(1)  871/  884538 :                     ; 		sub.w	d6,d3
(1)  872/  884538 :                     ; .nou_m:
(1)  873/  884538 :                     ; 		move.l	d0,(RAM_MdDreq+Dreq_Scrn2_X).w
(1)  874/  884538 :                     ; 		move.l	d1,(RAM_MdDreq+Dreq_Scrn2_Y).w
(1)  875/  884538 :                     ;
(1)  876/  884538 :                     ; 		move.l	#0,d0
(1)  877/  884538 :                     ; 		move.l	#0,d1
(1)  878/  884538 :                     ; 		moveq	#0,d2
(1)  879/  884538 :                     ; 		move.w	(Controller_1+on_press),d7
(1)  880/  884538 :                     ; 		btst	#bitJoyB,d7
(1)  881/  884538 :                     ; 		beq.s	.nor_m2
(1)  882/  884538 :                     ; 		add.w	#1,(RAM_CurrGfx).w
(1)  883/  884538 :                     ; 		moveq	#1,d2
(1)  884/  884538 :                     ; .nor_m2:
(1)  885/  884538 :                     ; 		btst	#bitJoyA,d7
(1)  886/  884538 :                     ; 		beq.s	.nol_m2
(1)  887/  884538 :                     ; 		sub.w	#1,(RAM_CurrGfx).w
(1)  888/  884538 :                     ; 		moveq	#1,d2
(1)  889/  884538 :                     ; .nol_m2:
(1)  890/  884538 :                     ;
(1)  891/  884538 :                     ; 		tst.w	d2
(1)  892/  884538 :                     ; 		beq.s	.no_chng
(1)  893/  884538 :                     ;
(1)  894/  884538 :                     ; 		move.w	#2,(RAM_FadeMdReq).w		; FadeIn request on both sides
(1)  895/  884538 :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  896/  884538 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  897/  884538 :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  898/  884538 :                     ; 		move.w	#2,(RAM_FadeMdDelay).w
(1)  899/  884538 :                     ; 		move.w	#2,(RAM_FadeMarsDelay).w
(1)  900/  884538 :                     ; .fadeout:
(1)  901/  884538 :                     ; 		bsr	Video_RunFade
(1)  902/  884538 :                     ; 		beq.s	.exit
(1)  903/  884538 :                     ; 		bsr	System_WaitFrame
(1)  904/  884538 :                     ; 		lea	(RAM_MdDreq),a0
(1)  905/  884538 :                     ; 		move.w	#sizeof_dreq,d0
(1)  906/  884538 :                     ; 		bsr	System_SendDreq
(1)  907/  884538 :                     ; 		bra.s	.fadeout
(1)  908/  884538 :                     ; .exit
(1)  909/  884538 :                     ; 		move.w	#0,(RAM_CurrPage).w
(1)  910/  884538 :                     ; ; .thispal:
(1)  911/  884538 :                     ; ; 		moveq	#0,d2
(1)  912/  884538 :                     ; ; 		moveq	#0,d0
(1)  913/  884538 :                     ; ; 		move.w	#256,d1
(1)  914/  884538 :                     ; ; 		bsr	Video_LoadPal_Mars
(1)  915/  884538 :                     ; ; 		clr.w	(RAM_MdDreq+Dreq_Palette).w
(1)  916/  884538 :                     ; .no_chng:
(1)  917/  884538 :                     ; 		bsr	.move_model
(1)  918/  884538 :                     
(1)  919/  884538 :                     ; 	; Move Emily Fujiwara
(1)  920/  884538 :                     ; 	; UDLR
(1)  921/  884538 :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  922/  884538 :                     ; 		move.w	d7,d6
(1)  923/  884538 :                     ; 		btst	#bitJoyDown,d7
(1)  924/  884538 :                     ; 		beq.s	.noz_down
(1)  925/  884538 :                     ; 		move.w	#0,(RAM_EmiFrame).w
(1)  926/  884538 :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  927/  884538 :                     ; 		add.w	#1,(RAM_EmiPosY).w
(1)  928/  884538 :                     ; .noz_down:
(1)  929/  884538 :                     ; 		move.w	d7,d6
(1)  930/  884538 :                     ; 		btst	#bitJoyUp,d6
(1)  931/  884538 :                     ; 		beq.s	.noz_up
(1)  932/  884538 :                     ; 		move.w	#4,(RAM_EmiFrame).w
(1)  933/  884538 :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  934/  884538 :                     ; 		add.w	#-1,(RAM_EmiPosY).w
(1)  935/  884538 :                     ; .noz_up:
(1)  936/  884538 :                     ; 		move.w	d7,d6
(1)  937/  884538 :                     ; 		btst	#bitJoyRight,d6
(1)  938/  884538 :                     ; 		beq.s	.noz_r
(1)  939/  884538 :                     ; 		move.w	#8,(RAM_EmiFrame).w
(1)  940/  884538 :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  941/  884538 :                     ; 		add.w	#1,(RAM_EmiPosX).w
(1)  942/  884538 :                     ; .noz_r:
(1)  943/  884538 :                     ; 		move.w	d7,d6
(1)  944/  884538 :                     ; 		btst	#bitJoyLeft,d6
(1)  945/  884538 :                     ; 		beq.s	.noz_l
(1)  946/  884538 :                     ; 		move.w	#$C,(RAM_EmiFrame).w
(1)  947/  884538 :                     ; 		add.w	#1,(RAM_EmiAnim).w
(1)  948/  884538 :                     ; 		add.w	#-1,(RAM_EmiPosX).w
(1)  949/  884538 :                     ; .noz_l:
(1)  950/  884538 :                     
(1)  951/  884538 :                     ; 		lea	(RAM_MdDreq),a0
(1)  952/  884538 :                     ; 		move.l	Dreq_SclX(a0),d0
(1)  953/  884538 :                     ; 		move.l	Dreq_SclY(a0),d1
(1)  954/  884538 :                     ; 		move.l	Dreq_SclDX(a0),d2
(1)  955/  884538 :                     ; 		move.l	Dreq_SclDY(a0),d3
(1)  956/  884538 :                     ; 		move.l	#$100,d4
(1)  957/  884538 :                     ; 		move.l	#$200,d5
(1)  958/  884538 :                     ;
(1)  959/  884538 :                     ; 		move.w	(Controller_1+on_hold),d7
(1)  960/  884538 :                     ; 		move.w	d7,d6
(1)  961/  884538 :                     ; 		btst	#bitJoyDown,d7
(1)  962/  884538 :                     ; 		beq.s	.noz_down
(1)  963/  884538 :                     ; 		add.l	d4,d1
(1)  964/  884538 :                     ; 		sub.l	d5,d3
(1)  965/  884538 :                     ; .noz_down:
(1)  966/  884538 :                     ; 		move.w	d7,d6
(1)  967/  884538 :                     ; 		btst	#bitJoyUp,d6
(1)  968/  884538 :                     ; 		beq.s	.noz_up
(1)  969/  884538 :                     ; 		sub.l	d4,d1
(1)  970/  884538 :                     ; 		add.l	d5,d3
(1)  971/  884538 :                     ; .noz_up:
(1)  972/  884538 :                     ; 		move.w	d7,d6
(1)  973/  884538 :                     ; 		btst	#bitJoyRight,d6
(1)  974/  884538 :                     ; 		beq.s	.noz_r
(1)  975/  884538 :                     ; 		add.l	d4,d0
(1)  976/  884538 :                     ; 		sub.l	d5,d2
(1)  977/  884538 :                     ; .noz_r:
(1)  978/  884538 :                     ; 		move.w	d7,d6
(1)  979/  884538 :                     ; 		btst	#bitJoyLeft,d6
(1)  980/  884538 :                     ; 		beq.s	.noz_l
(1)  981/  884538 :                     ; 		sub.l	d4,d0
(1)  982/  884538 :                     ; 		add.l	d5,d2
(1)  983/  884538 :                     ; .noz_l:
(1)  984/  884538 :                     ; 		move.l	d0,Dreq_SclX(a0)
(1)  985/  884538 :                     ; 		move.l	d1,Dreq_SclY(a0)
(1)  986/  884538 :                     ; 		move.l	d2,Dreq_SclDX(a0)
(1)  987/  884538 :                     ; 		move.l	d3,Dreq_SclDY(a0)
(1)  988/  884538 :                     ;
(1)  989/  884538 :                     ; 		move.w	d7,d6
(1)  990/  884538 :                     ; 		btst	#bitJoyX,d6
(1)  991/  884538 :                     ; 		beq.s	.nox_x
(1)  992/  884538 :                     ; 		lea	(RAM_MdDreq+Dreq_SclX),a0
(1)  993/  884538 :                     ; 		move.l	#$00000000,(a0)+	; X pos
(1)  994/  884538 :                     ; 		move.l	#$00000000,(a0)+	; Y pos
(1)  995/  884538 :                     ; 		move.l	#$00010000,(a0)+	; DX
(1)  996/  884538 :                     ; 		move.l	#$00010000,(a0)+	; DY
(1)  997/  884538 :                     ; .nox_x:
(1)  998/  884538 :                     
(1)  999/  884538 :                     
(1) 1000/  884538 :                     ; 		move.w	d7,d6
(1) 1001/  884538 :                     ; 		btst	#bitJoyY,d6
(1) 1002/  884538 :                     ; 		beq.s	.noy
(1) 1003/  884538 :                     ; 		move.l	Dreq_SclDX(a0),d0
(1) 1004/  884538 :                     ; 		move.l	Dreq_SclDY(a0),d1
(1) 1005/  884538 :                     ; 		move.l	#$100,d2
(1) 1006/  884538 :                     ; 		add.l	d2,d0
(1) 1007/  884538 :                     ; 		add.l	d2,d1
(1) 1008/  884538 :                     ; 		move.l	d0,Dreq_SclDX(a0)
(1) 1009/  884538 :                     ; 		move.l	d1,Dreq_SclDY(a0)
(1) 1010/  884538 :                     ; .noy:
(1) 1011/  884538 :                     
(1) 1012/  884538 :                     ; 		bsr	Emilie_Move
(1) 1013/  884538 :                     ; 		bsr	.wave_backgrnd
(1) 1014/  884538 : 4E75                		rts
(1) 1015/  88453A :                     
(1) 1016/  88453A :                     ; .wave_backgrnd:
(1) 1017/  88453A :                     ; 	; wave background
(1) 1018/  88453A :                     ; 		lea	(RAM_HorScroll),a0
(1) 1019/  88453A :                     ; 		moveq	#112-1,d7
(1) 1020/  88453A :                     ; 		move.w	(RAM_WaveTmr),d0
(1) 1021/  88453A :                     ; 		move.w	#8,d1
(1) 1022/  88453A :                     ; .next:
(1) 1023/  88453A :                     ; 		bsr	System_SineWave
(1) 1024/  88453A :                     ; 		lsr.l	#8,d2
(1) 1025/  88453A :                     ; 		move.w	d2,2(a0)
(1) 1026/  88453A :                     ; 		adda	#4,a0
(1) 1027/  88453A :                     ; 		add.w	#1,d0
(1) 1028/  88453A :                     ; 		bsr	System_SineWave
(1) 1029/  88453A :                     ; 		lsr.l	#8,d2
(1) 1030/  88453A :                     ; 		move.w	d2,2(a0)
(1) 1031/  88453A :                     ; 		adda	#4,a0
(1) 1032/  88453A :                     ; 		add.w	#1,d0
(1) 1033/  88453A :                     ; 		dbf	d7,.next
(1) 1034/  88453A :                     ; 		add.w	#1,(RAM_WaveTmr).w
(1) 1035/  88453A :                     ;
(1) 1036/  88453A :                     ; 		lea	(RAM_VerScroll),a0
(1) 1037/  88453A :                     ; 		moveq	#(320/16)-1,d7
(1) 1038/  88453A :                     ; 		move.w	(RAM_WaveTmr),d0
(1) 1039/  88453A :                     ; 		move.w	#6,d1
(1) 1040/  88453A :                     ; .next2:
(1) 1041/  88453A :                     ; 		bsr	System_SineWave_Cos
(1) 1042/  88453A :                     ; 		lsr.l	#8,d2
(1) 1043/  88453A :                     ; 		move.w	d2,2(a0)
(1) 1044/  88453A :                     ; 		adda	#4,a0
(1) 1045/  88453A :                     ; 		add.w	#4,d0
(1) 1046/  88453A :                     ; 		dbf	d7,.next2
(1) 1047/  88453A :                     ; 		add.w	#1,(RAM_WaveTmr2).w
(1) 1048/  88453A :                     ;
(1) 1049/  88453A :                     ; ; 		bsr	Emilie_Move
(1) 1050/  88453A :                     ; ; 		bsr	Emilie_MkSprite
(1) 1051/  88453A :                     ; 		rts
(1) 1052/  88453A :                     ;
(1) 1053/  88453A :                     ; ; --------------------------------------------------
(1) 1054/  88453A :                     ; ; Mode 1
(1) 1055/  88453A :                     ; ; --------------------------------------------------
(1) 1056/  88453A :                     ;
(1) 1057/  88453A :                     ; .mode1:
(1) 1058/  88453A :                     ; 		tst.w	(RAM_CurrPage).w
(1) 1059/  88453A :                     ; 		bmi	.mode1_loop
(1) 1060/  88453A :                     ; 		or.w	#$8000,(RAM_CurrPage).w
(1) 1061/  88453A :                     ; 		bsr	.print_cursor
(1) 1062/  88453A :                     ; ; 		move.w	#1,(RAM_EmiHide).w
(1) 1063/  88453A :                     ; ; 		move.w	#1,(RAM_EmiUpd).w
(1) 1064/  88453A :                     ;
(1) 1065/  88453A :                     ; .mode1_loop:
(1) 1066/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1067/  88453A :                     ; 		btst	#bitJoyStart,d7
(1) 1068/  88453A :                     ; 		beq.s	.no_mode1
(1) 1069/  88453A :                     ; 		move.w	#0,(RAM_CurrPage).w
(1) 1070/  88453A :                     ; 		move.w	#$9200,(RAM_WindowNew).w
(1) 1071/  88453A :                     ; .no_mode1:
(1) 1072/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1073/  88453A :                     ; 		btst	#bitJoyY,d7
(1) 1074/  88453A :                     ; 		beq.s	.noy2
(1) 1075/  88453A :                     ; 		cmp.w	#1,(RAM_CurrIndx).w
(1) 1076/  88453A :                     ; 		beq.	.noy2
(1) 1077/  88453A :                     ; 		add.w	#1,(RAM_CurrIndx).w
(1) 1078/  88453A :                     ; 		bsr	.print_cursor
(1) 1079/  88453A :                     ; .noy2:
(1) 1080/  88453A :                     ; 		move.w	(Controller_1+on_hold),d7
(1) 1081/  88453A :                     ; 		btst	#bitJoyX,d7
(1) 1082/  88453A :                     ; 		beq.s	.nox2
(1) 1083/  88453A :                     ; 		tst.w	(RAM_CurrIndx).w
(1) 1084/  88453A :                     ; 		beq.s	.nox2
(1) 1085/  88453A :                     ; 		sub.w	#1,(RAM_CurrIndx).w
(1) 1086/  88453A :                     ; 		bsr	.print_cursor
(1) 1087/  88453A :                     ; .nox2:
(1) 1088/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1089/  88453A :                     ; 		btst	#bitJoyUp,d7
(1) 1090/  88453A :                     ; 		beq.s	.nou2
(1) 1091/  88453A :                     ; 		tst.w	(RAM_CurrSelc).w
(1) 1092/  88453A :                     ; 		beq.s	.nou2
(1) 1093/  88453A :                     ; 		sub.w	#1,(RAM_CurrSelc).w
(1) 1094/  88453A :                     ; 		bsr	.print_cursor
(1) 1095/  88453A :                     ; .nou2:
(1) 1096/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1097/  88453A :                     ; 		btst	#bitJoyDown,d7
(1) 1098/  88453A :                     ; 		beq.s	.nod2
(1) 1099/  88453A :                     ; 		cmp.w	#MAX_GEMAENTRY,(RAM_CurrSelc).w
(1) 1100/  88453A :                     ; 		bge.s	.nod2
(1) 1101/  88453A :                     ; 		add.w	#1,(RAM_CurrSelc).w
(1) 1102/  88453A :                     ; 		bsr	.print_cursor
(1) 1103/  88453A :                     ; .nod2:
(1) 1104/  88453A :                     ;
(1) 1105/  88453A :                     ; 	; LEFT/RIGHT
(1) 1106/  88453A :                     ; 		lea	(RAM_CurrTrack),a1
(1) 1107/  88453A :                     ; 		cmp.w	#3,(RAM_CurrSelc).w
(1) 1108/  88453A :                     ; 		bne.s	.toptrk
(1) 1109/  88453A :                     ; 		add	#2,a1
(1) 1110/  88453A :                     ; .toptrk:
(1) 1111/  88453A :                     ; 		cmp.w	#4,(RAM_CurrSelc).w
(1) 1112/  88453A :                     ; 		bne.s	.toptrk2
(1) 1113/  88453A :                     ; 		add	#2*2,a1
(1) 1114/  88453A :                     ; .toptrk2:
(1) 1115/  88453A :                     ;
(1) 1116/  88453A :                     ; 		move.w	(Controller_1+on_hold),d7
(1) 1117/  88453A :                     ; 		and.w	#JoyB,d7
(1) 1118/  88453A :                     ; 		beq.s	.noba
(1) 1119/  88453A :                     ; 		add.w	#1,(a1)
(1) 1120/  88453A :                     ; 		bsr	.print_cursor
(1) 1121/  88453A :                     ; .noba:
(1) 1122/  88453A :                     ; 		move.w	(Controller_1+on_hold),d7
(1) 1123/  88453A :                     ; 		and.w	#JoyA,d7
(1) 1124/  88453A :                     ; 		beq.s	.noaa
(1) 1125/  88453A :                     ; 		sub.w	#1,(a1)
(1) 1126/  88453A :                     ; 		bsr	.print_cursor
(1) 1127/  88453A :                     ; .noaa:
(1) 1128/  88453A :                     ;
(1) 1129/  88453A :                     ;
(1) 1130/  88453A :                     ;
(1) 1131/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1132/  88453A :                     ; 		btst	#bitJoyLeft,d7
(1) 1133/  88453A :                     ; 		beq.s	.nol
(1) 1134/  88453A :                     ; ; 		tst.w	(a1)
(1) 1135/  88453A :                     ; ; 		beq.s	.nol
(1) 1136/  88453A :                     ; 		sub.w	#1,(a1)
(1) 1137/  88453A :                     ; 		bsr	.print_cursor
(1) 1138/  88453A :                     ; .nol:
(1) 1139/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1140/  88453A :                     ; 		btst	#bitJoyRight,d7
(1) 1141/  88453A :                     ; 		beq.s	.nor
(1) 1142/  88453A :                     ; ; 		cmp.w	#MAX_TSTTRKS,(a1)
(1) 1143/  88453A :                     ; ; 		bge.s	.nor
(1) 1144/  88453A :                     ; 		add.w	#1,(a1)
(1) 1145/  88453A :                     ; 		bsr	.print_cursor
(1) 1146/  88453A :                     ; .nor:
(1) 1147/  88453A :                     ;
(1) 1148/  88453A :                     ; 		move.w	(Controller_1+on_press),d7
(1) 1149/  88453A :                     ; 		and.w	#JoyC,d7
(1) 1150/  88453A :                     ; 		beq.s	.noc_c
(1) 1151/  88453A :                     ; 		move.w	(RAM_CurrIndx).w,d0
(1) 1152/  88453A :                     ; 		bsr	.procs_task
(1) 1153/  88453A :                     ; .noc_c:
(1) 1154/  88453A :                     ;
(1) 1155/  88453A :                     ; ; 		bsr	.wave_backgrnd
(1) 1156/  88453A :                     ; ; 		lea	str_COMM(pc),a0
(1) 1157/  88453A :                     ; ; 		move.l	#locate(0,2,9),d0
(1) 1158/  88453A :                     ; ; 		bsr	Video_Print
(1) 1159/  88453A :                     ; ; 		rts
(1) 1160/  88453A :                     ;
(1) 1161/  88453A :                     ; .move_model:
(1) 1162/  88453A :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a0
(1) 1163/  88453A :                     ; 		add.l	#$4000,mdl_x_rot(a0)
(1) 1164/  88453A :                     ; ; 		add.l	#$1000,mdl_z_rot(a0)
(1) 1165/  88453A :                     ; 		rts
(1) 1166/  88453A :                     ;
(1) 1167/  88453A :                     ; ; --------------------------------------------------
(1) 1168/  88453A :                     ;
(1) 1169/  88453A :                     ; .print_cursor:
(1) 1170/  88453A :                     ; ; 		lea	str_Status(pc),a0
(1) 1171/  88453A :                     ; ; 		move.l	#locate(2,20,4),d0
(1) 1172/  88453A :                     ; ; 		bsr	Video_Print
(1) 1173/  88453A :                     ; 		lea	str_Cursor(pc),a0
(1) 1174/  88453A :                     ; 		moveq	#0,d0
(1) 1175/  88453A :                     ; 		move.w	(RAM_CurrSelc).w,d0
(1) 1176/  88453A :                     ; 		add.l	#locate(2,2,5),d0
(1) 1177/  88453A :                     ; 		bsr	Video_Print
(1) 1178/  88453A :                     ; 		rts
(1) 1179/  88453A :                     ;
(1) 1180/  88453A :                     ; ; d1 - Track slot
(1) 1181/  88453A :                     ; .procs_task:
(1) 1182/  88453A :                     ; 		move.w	(RAM_CurrSelc).w,d7
(1) 1183/  88453A :                     ; 		add.w	d7,d7
(1) 1184/  88453A :                     ; 		move.w	.tasklist(pc,d7.w),d7
(1) 1185/  88453A :                     ; 		jmp	.tasklist(pc,d7.w)
(1) 1186/  88453A :                     ; .tasklist:
(1) 1187/  88453A :                     ; 		dc.w .task_00-.tasklist
(1) 1188/  88453A :                     ; 		dc.w .task_01-.tasklist
(1) 1189/  88453A :                     ; 		dc.w .task_02-.tasklist
(1) 1190/  88453A :                     ; 		dc.w .task_03-.tasklist
(1) 1191/  88453A :                     ; 		dc.w .task_04-.tasklist
(1) 1192/  88453A :                     ; ; 		dc.w .task_05-.tasklist
(1) 1193/  88453A :                     ;
(1) 1194/  88453A :                     ; ; d0 - Track slot
(1) 1195/  88453A :                     ; .task_00:
(1) 1196/  88453A :                     ; 		lea	MasterTrkList(pc),a0
(1) 1197/  88453A :                     ; 		move.w	(RAM_CurrTrack).w,d7
(1) 1198/  88453A :                     ; 		lsl.w	#4,d7
(1) 1199/  88453A :                     ; 		lea	(a0,d7.w),a0
(1) 1200/  88453A :                     ; 		move.w	$C(a0),d1
(1) 1201/  88453A :                     ; 		moveq	#0,d2
(1) 1202/  88453A :                     ; 		move.w	$E(a0),d3
(1) 1203/  88453A :                     ; 		bra	Sound_TrkPlay
(1) 1204/  88453A :                     ; .task_01:
(1) 1205/  88453A :                     ; 		bra	Sound_TrkStop
(1) 1206/  88453A :                     ; .task_02:
(1) 1207/  88453A :                     ; 		bra	Sound_TrkResume
(1) 1208/  88453A :                     ; .task_03:
(1) 1209/  88453A :                     ; 		move.w	(RAM_CurrTicks).w,d1
(1) 1210/  88453A :                     ; 		bra	Sound_TrkTicks
(1) 1211/  88453A :                     ; .task_04:
(1) 1212/  88453A :                     ; 		move.w	(RAM_CurrTempo).w,d1
(1) 1213/  88453A :                     ; 		bra	Sound_GlbBeats
(1) 1214/  88453A :                     ;
(1) 1215/  88453A :                     ; ; test playlist
(1) 1216/  88453A :                     MasterTrkList:
(1) 1217/  88453A : 0090 D26D 0090 D25C 	dc.l GemaPat_BeMine,GemaBlk_BeMine,GemaIns_BeMine
                    0090 EB30           
(1) 1218/  884546 : 000A 0000           	dc.w $A,%000
(1) 1219/  88454A : 0090 49C2 0090 49B8 	dc.l GemaPat_Test,GemaBlk_Test,GemaIns_Test
                    0090 5C88           
(1) 1220/  884556 : 0004 0000           	dc.w 4,%000
(1) 1221/  88455A : 0090 5D4A 0090 5D34 	dc.l GemaPat_Test2,GemaBlk_Test2,GemaIns_Test2
                    0090 797A           
(1) 1222/  884566 : 0002 0001           	dc.w 2,%001
(1) 1223/  88456A : 0090 79F4 0090 79D6 	dc.l GemaPat_Test3,GemaBlk_Test3,GemaIns_Test3
                    0090 D1E4           
(1) 1224/  884576 : 0002 0001           	dc.w 2,%001
(1) 1225/  88457A :                     
(1) 1226/  88457A :                     	align 2
(1) 1227/  88457A :                     
(1) 1228/  88457A :                     ; ====================================================================
(1) 1229/  88457A :                     ; ------------------------------------------------------
(1) 1230/  88457A :                     ; Subroutines
(1) 1231/  88457A :                     ; ------------------------------------------------------
(1) 1232/  88457A :                     
(1) 1233/  88457A :                     SuperSprite_Test:
(1) 1234/  88457A :                     	; SUPER SPRITE MOVE
(1) 1235/  88457A : 41F8 AE62           		lea	(RAM_MdDreq+Dreq_SuperSpr),a0
(1) 1236/  88457E : 3028 0008           		move.w	marsspr_x(a0),d0
(1) 1237/  884582 : 3228 000A           		move.w	marsspr_y(a0),d1
(1) 1238/  884586 : 7401                		moveq	#1,d2
(1) 1239/  884588 : 7601                		moveq	#1,d3
(1) 1240/  88458A : 3E38 A634           		move.w	(Controller_2+on_hold),d7
(1) 1241/  88458E : 0807 0003           		btst	#bitJoyRight,d7
(1) 1242/  884592 : 6702                		beq.s	.nor_s
(1) 1243/  884594 : D042                		add.w	d2,d0
(1) 1244/  884596 :                     .nor_s:
(1) 1245/  884596 : 0807 0002           		btst	#bitJoyLeft,d7
(1) 1246/  88459A : 6702                		beq.s	.nol_s
(1) 1247/  88459C : 9042                		sub.w	d2,d0
(1) 1248/  88459E :                     .nol_s:
(1) 1249/  88459E : 0807 0001           		btst	#bitJoyDown,d7
(1) 1250/  8845A2 : 6702                		beq.s	.nod_s
(1) 1251/  8845A4 : D243                		add.w	d3,d1
(1) 1252/  8845A6 :                     .nod_s:
(1) 1253/  8845A6 : 0807 0000           		btst	#bitJoyUp,d7
(1) 1254/  8845AA : 6702                		beq.s	.nou_s
(1) 1255/  8845AC : 9243                		sub.w	d3,d1
(1) 1256/  8845AE :                     .nou_s:
(1) 1257/  8845AE : 3140 0008           		move.w	d0,marsspr_x(a0)
(1) 1258/  8845B2 : 3141 000A           		move.w	d1,marsspr_y(a0)
(1) 1259/  8845B6 :                     
(1) 1260/  8845B6 : 0678 0001 9038      		add.w	#1,(RAM_SprFrame).w
(1) 1261/  8845BC : 4E75                		rts
(1) 1262/  8845BE :                     
(1) 1263/  8845BE :                     ; ====================================================================
(1) 1264/  8845BE :                     ; ------------------------------------------------------
(1) 1265/  8845BE :                     ; VBlank
(1) 1266/  8845BE :                     ; ------------------------------------------------------
(1) 1267/  8845BE :                     
(1) 1268/  8845BE :                     ; ------------------------------------------------------
(1) 1269/  8845BE :                     ; HBlank
(1) 1270/  8845BE :                     ; ------------------------------------------------------
(1) 1271/  8845BE :                     
(1) 1272/  8845BE :                     ; ====================================================================
(1) 1273/  8845BE :                     ; ------------------------------------------------------
(1) 1274/  8845BE :                     ; DATA
(1) 1275/  8845BE :                     ;
(1) 1276/  8845BE :                     ; Small stuff goes here
(1) 1277/  8845BE :                     ; ------------------------------------------------------
(1) 1278/  8845BE :                     
(1) 1279/  8845BE : 200A                str_Cursor:	dc.b " ",$A
(1) 1280/  8845C0 : 3E0A                		dc.b ">",$A
(1) 1281/  8845C2 : 2000                		dc.b " ",0
(1) 1282/  8845C4 :                     		align 2
(1) 1283/  8845C4 :                     str_Title:
(1) 1284/  8845C4 : 4D41 5253 4941 4E4F 		dc.b "MARSIANO dev-menu",$A
                    2064 6576 2D6D 656E 
                    750A                
(1) 1285/  8845D6 : 0A                  		dc.b $A
(1) 1286/  8845D7 : 2020 5073 6575 646F 		dc.b "  Pseudo-GFX mode 01",$A
                    2D47 4658 206D 6F64 
                    6520 3031 0A        
(1) 1287/  8845EC : 2020 5073 6575 646F 		dc.b "  Pseudo-GFX mode 02",$A
                    2D47 4658 206D 6F64 
                    6520 3032 0A        
(1) 1288/  884601 : 2020 5073 6575 646F 		dc.b "  Pseudo-GFX mode 03",$A
                    2D47 4658 206D 6F64 
                    6520 3033 0A        
(1) 1289/  884616 : 2020 5073 6575 646F 		dc.b "  Pseudo-GFX mode 04",$A
                    2D47 4658 206D 6F64 
                    6520 3034 0A        
(1) 1290/  88462B : 2020 4745 4D41 2073 		dc.b "  GEMA sound player",0
                    6F75 6E64 2070 6C61 
                    7965 7200           
(1) 1291/  88463F :                     		align 2
(1) 1292/  884640 :                     
(1) 1293/  884640 :                     ; str_Page1:
(1) 1294/  884640 :                     ; 		dc.b "Testing GfxMode 01",0
(1) 1295/  884640 :                     ; 		align 2
(1) 1296/  884640 :                     ; str_Page1_l:
(1) 1297/  884640 :                     ; 		dc.b "\\l \\l",0
(1) 1298/  884640 :                     ; 		dc.l RAM_MdDreq+Dreq_Scrn2_X
(1) 1299/  884640 :                     ; 		dc.l RAM_MdDreq+Dreq_Scrn2_Y
(1) 1300/  884640 :                     ; 		align 2
(1) 1301/  884640 :                     
(1) 1302/  884640 :                     str_Page1:
(1) 1303/  884640 : 4766 784D 6F64 6520 		dc.b "GfxMode 01",0
                    3031 00             
(1) 1304/  88464B :                     		align 2
(1) 1305/  88464C :                     ; str_Page2:
(1) 1306/  88464C :                     ; 		dc.b "GfxMode 02",0
(1) 1307/  88464C :                     ; 		align 2
(1) 1308/  88464C :                     str_Page3:
(1) 1309/  88464C : 4766 784D 6F64 6520 		dc.b "GfxMode 03",0
                    3033 00             
(1) 1310/  884657 :                     		align 2
(1) 1311/  884658 :                     str_Page4:
(1) 1312/  884658 : 4766 784D 6F64 6520 		dc.b "GfxMode 04",0
                    3034 00             
(1) 1313/  884663 :                     		align 2
(1) 1314/  884664 :                     str_Page1_info:
(1) 1315/  884664 : 5C77 205C 7700      		dc.b "\\w \\w",0
(1) 1316/  88466A : FFFF 900E FFFF 9010 		dc.l RAM_Scrn0_Frame,RAM_Scrn0_Timer
(1) 1317/  884672 :                     		align 2
(1) 1318/  884672 :                     
(1) 1319/  884672 :                     str_Status:
(1) 1320/  884672 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1321/  884676 : 5C77 0A0A 0A        		dc.b "\\w",$A,$A,$A
(1) 1322/  88467B : 5C77 0A             		dc.b "\\w",$A
(1) 1323/  88467E : 5C77 00             		dc.b "\\w",0
(1) 1324/  884681 : FFFF 9006           		dc.l RAM_CurrIndx
(1) 1325/  884685 : FFFF 9008           		dc.l RAM_CurrTrack
(1) 1326/  884689 : FFFF 900A           		dc.l RAM_CurrTicks
(1) 1327/  88468D : FFFF 900C           		dc.l RAM_CurrTempo
(1) 1328/  884691 :                     		align 2
(1) 1329/  884692 :                     str_Gema:
(1) 1330/  884692 : 4745 4D41 2053 4F55 		dc.b "GEMA SOUND DRIVER TESTER",$A
                    4E44 2044 5249 5645 
                    5220 5445 5354 4552 
                    0A                  
(1) 1331/  8846AB : 0A                  		dc.b $A
(1) 1332/  8846AC : 5472 6163 6B20 696E 		dc.b "Track index -----",$A,$A
                    6465 7820 2D2D 2D2D 
                    2D0A 0A             
(1) 1333/  8846BF : 2020 536F 756E 645F 		dc.b "  Sound_TrkPlay",$A
                    5472 6B50 6C61 790A 
(1) 1334/  8846CF : 2020 536F 756E 645F 		dc.b "  Sound_TrkStop",$A
                    5472 6B53 746F 700A 
(1) 1335/  8846DF : 2020 536F 756E 645F 		dc.b "  Sound_TrkResume",$A
                    5472 6B52 6573 756D 
                    650A                
(1) 1336/  8846F1 : 2020 536F 756E 645F 		dc.b "  Sound_TrkTicks",$A
                    5472 6B54 6963 6B73 
                    0A                  
(1) 1337/  884702 : 2020 536F 756E 645F 		dc.b "  Sound_GlbBeats",0
                    476C 6242 6561 7473 
                    00                  
(1) 1338/  884713 :                     		align 2
(1) 1339/  884714 :                     str_GemaStatus:
(1) 1340/  884714 : 2020 2020 202A 2A2A 		dc.b "     *** Channel freqs ***",$A
                    2043 6861 6E6E 656C 
                    2066 7265 7173 202A 
                    2A2A 0A             
(1) 1341/  88472F : 0A                  		dc.b $A
(1) 1342/  884730 : 5053 4731 2020 2020 		dc.b "PSG1       FM1       PWM1     ",$A,$A
                    2020 2046 4D31 2020 
                    2020 2020 2050 574D 
                    3120 2020 2020 0A0A 
(1) 1343/  884750 : 5053 4732 2020 2020 		dc.b "PSG2       FM2       PWM2     ",$A,$A
                    2020 2046 4D32 2020 
                    2020 2020 2050 574D 
                    3220 2020 2020 0A0A 
(1) 1344/  884770 : 5053 4733 2020 2020 		dc.b "PSG3       FM3       PWM3     ",$A,$A
                    2020 2046 4D33 2020 
                    2020 2020 2050 574D 
                    3320 2020 2020 0A0A 
(1) 1345/  884790 : 5048 4154 2020 2020 		dc.b "PHAT       FM4       PWM4     ",$A,$A
                    2020 2046 4D34 2020 
                    2020 2020 2050 574D 
                    3420 2020 2020 0A0A 
(1) 1346/  8847B0 : 2020 2020 2020 2020 		dc.b "           FM5       PWM5     ",$A,$A
                    2020 2046 4D35 2020 
                    2020 2020 2050 574D 
                    3520 2020 2020 0A0A 
(1) 1347/  8847D0 : 2020 2020 2020 2020 		dc.b "           FM6       PWM6     ",$A,$A
                    2020 2046 4D36 2020 
                    2020 2020 2050 574D 
                    3620 2020 2020 0A0A 
(1) 1348/  8847F0 : 2020 2020 2020 2020 		dc.b "                     PWM7     ",0
                    2020 2020 2020 2020 
                    2020 2020 2050 574D 
                    3720 2020 2020 00   
(1) 1349/  88480F :                     		align 2
(1) 1350/  884810 :                     str_GemaPsg:
(1) 1351/  884810 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1352/  884814 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1353/  884818 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1354/  88481C : 5C77 00             		dc.b "\\w",0
(1) 1355/  88481F : FFFF 9014           		dc.l RAM_GemaList
(1) 1356/  884823 : FFFF 9016           		dc.l RAM_GemaList+2
(1) 1357/  884827 : FFFF 9018           		dc.l RAM_GemaList+4
(1) 1358/  88482B : FFFF 901A           		dc.l RAM_GemaList+6
(1) 1359/  88482F :                     		align 2
(1) 1360/  884830 :                     str_GemaFm:
(1) 1361/  884830 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1362/  884834 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1363/  884838 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1364/  88483C : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1365/  884840 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1366/  884844 : 5C77 00             		dc.b "\\w",0
(1) 1367/  884847 : FFFF 901C           		dc.l RAM_GemaListFM
(1) 1368/  88484B : FFFF 901E           		dc.l RAM_GemaListFM+2
(1) 1369/  88484F : FFFF 9020           		dc.l RAM_GemaListFM+4
(1) 1370/  884853 : FFFF 9022           		dc.l RAM_GemaListFM+6
(1) 1371/  884857 : FFFF 9024           		dc.l RAM_GemaListFM+8
(1) 1372/  88485B : FFFF 9026           		dc.l RAM_GemaListFM+10
(1) 1373/  88485F :                     		align 2
(1) 1374/  884860 :                     str_GemaPwm:
(1) 1375/  884860 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1376/  884864 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1377/  884868 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1378/  88486C : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1379/  884870 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1380/  884874 : 5C77 0A0A           		dc.b "\\w",$A,$A
(1) 1381/  884878 : 5C77 00             		dc.b "\\w",0
(1) 1382/  88487B : FFFF 9028           		dc.l RAM_GemaListPWM
(1) 1383/  88487F : FFFF 902A           		dc.l RAM_GemaListPWM+2
(1) 1384/  884883 : FFFF 902C           		dc.l RAM_GemaListPWM+4
(1) 1385/  884887 : FFFF 902E           		dc.l RAM_GemaListPWM+6
(1) 1386/  88488B : FFFF 9030           		dc.l RAM_GemaListPWM+8
(1) 1387/  88488F : FFFF 9032           		dc.l RAM_GemaListPWM+10
(1) 1388/  884893 : FFFF 9034           		dc.l RAM_GemaListPWM+12
(1) 1389/  884897 :                     		align 2
(1) 1390/  884898 :                     
(1) 1391/  884898 :                     str_StatsPage0:
(1) 1392/  884898 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1) 1393/  8848A4 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A,$A
                    205C 770A 0A        
(1) 1394/  8848B1 : 5C6C 00             		dc.b "\\l",0
(1) 1395/  8848B4 : 00A1 5120           		dc.l sysmars_reg+comm0
(1) 1396/  8848B8 : 00A1 5122           		dc.l sysmars_reg+comm2
(1) 1397/  8848BC : 00A1 5124           		dc.l sysmars_reg+comm4
(1) 1398/  8848C0 : 00A1 5126           		dc.l sysmars_reg+comm6
(1) 1399/  8848C4 : 00A1 5128           		dc.l sysmars_reg+comm8
(1) 1400/  8848C8 : 00A1 512A           		dc.l sysmars_reg+comm10
(1) 1401/  8848CC : 00A1 512C           		dc.l sysmars_reg+comm12
(1) 1402/  8848D0 : 00A1 512E           		dc.l sysmars_reg+comm14
(1) 1403/  8848D4 : FFFF A606           		dc.l RAM_Framecount
(1) 1404/  8848D8 :                     		align 2
(1) 1405/  8848D8 :                     
(1) 1406/  8848D8 :                     ; str_StatsPage4:
(1) 1407/  8848D8 :                     ; 		dc.b "\\l \\l \\l",0
(1) 1408/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_x_pos
(1) 1409/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_y_pos
(1) 1410/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_z_pos
(1) 1411/  8848D8 :                     ; 		align 2
(1) 1412/  8848D8 :                     
(1) 1413/  8848D8 :                     ; str_InfoMouse:
(1) 1414/  8848D8 :                     ; 		dc.b "comm0: \\w",$A
(1) 1415/  8848D8 :                     ; 		dc.b "comm12: \\w comm14: \\w",$A,$A
(1) 1416/  8848D8 :                     ; ; 		dc.b "MD Framecount: \\l",$A
(1) 1417/  8848D8 :                     ; 		dc.b "\\l \\l",$A
(1) 1418/  8848D8 :                     ; 		dc.b "\\l \\l",0
(1) 1419/  8848D8 :                     ; 		dc.l sysmars_reg+comm0
(1) 1420/  8848D8 :                     ; 		dc.l sysmars_reg+comm12
(1) 1421/  8848D8 :                     ; 		dc.l sysmars_reg+comm14
(1) 1422/  8848D8 :                     ; ; 		dc.l RAM_Framecount
(1) 1423/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_SclX
(1) 1424/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_SclY
(1) 1425/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_SclDX
(1) 1426/  8848D8 :                     ; 		dc.l RAM_MdDreq+Dreq_SclDY
(1) 1427/  8848D8 :                     ;
(1) 1428/  8848D8 :                     ; ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_x_pos
(1) 1429/  8848D8 :                     ; ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_y_pos
(1) 1430/  8848D8 :                     ; ; 		dc.l RAM_MdDreq+Dreq_Objects+mdl_z_pos
(1) 1431/  8848D8 :                     ; 		align 2
(1) 1432/  8848D8 :                     
(1) 1433/  8848D8 :                     PAL_TESTBOARD:
(1) 1434/  8848D8 :                     		binclude "data/md/bg/bg_pal.bin"
(1) 1435/  8848F8 :                     		binclude "data/md/bg/fg_pal.bin"
(1) 1436/  884918 :                     		align 2
(1) 1437/  884918 :                     PAL_BG:
(1) 1438/  884918 :                     		binclude "data/md/bg/bg_pal.bin"
(1) 1439/  884938 :                     		align 2
(1) 1440/  884938 :                     
(1) 1441/  884938 :                     ; Map_Nicole:
(1) 1442/  884938 :                     ; 		include "data/md/sprites/emi_map.asm"
(1) 1443/  884938 :                     ; 		align 2
(1) 1444/  884938 :                     ; Dplc_Nicole:
(1) 1445/  884938 :                     ; 		include "data/md/sprites/emi_plc.asm"
(1) 1446/  884938 :                     ; 		align 2
(1) 1447/  884938 :                     
(1) 1448/  884938 :                     
      37/  884938 :                     Md_TopCode_end:
      38/    4938 :                     		dephase
      39/    4938 :                     		align 2
      40/    4938 :                     
      45/    4938 :                     
      46/    4938 :                     ; ====================================================================
      47/    4938 :                     ; ----------------------------------------------------------------
      48/    4938 :                     ; 68K DATA BANKs at $900000 1MB max
      49/    4938 :                     ; ----------------------------------------------------------------
      50/    4938 :                     
      51/    4938 :                     ; ---------------------------------------------
      52/    4938 :                     ; BANK 0
      53/    4938 :                     ;
      54/    4938 :                     ; First one is smaller than the others...
      55/    4938 :                     ; ---------------------------------------------
      56/    4938 :                     
      57/  904938 :                     		phase $900000+*			; Only one currently
      58/  904938 :                     MDBNK0_START:
      59/  904938 :                     		include "sound/tracks.asm"
(1)    1/  904938 :                     ; ================================================================
(1)    2/  904938 :                     ; ------------------------------------------------------------
(1)    3/  904938 :                     ; DATA SECTION
(1)    4/  904938 :                     ; 
(1)    5/  904938 :                     ; SOUND
(1)    6/  904938 :                     ; ------------------------------------------------------------
(1)    7/  904938 :                     
(1)    8/  904938 :                     ; PWM pitches:
(1)    9/  904938 :                     ; -17 - 8000
(1)   10/  904938 :                     
(1)   11/  904938 :                     ; Instrument macros
(1)   12/  904938 :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   13/  904938 :                     ;
(1)   14/  904938 :                     ; TODO: this might fail.
(1)   15/  904938 :                     gInsNull macro
(1)   16/  904938 :                     	dc.b  -1,$00,$00,$00
(1)   17/  904938 :                     	dc.b $00,$00,$00,$00
(1)   18/  904938 :                     	endm
(1)   19/  904938 :                     
(1)   20/  904938 :                     ; alv: attack level (00=high)
(1)   21/  904938 :                     ; atk: attack rate
(1)   22/  904938 :                     ; slv: sustain (00=high)
(1)   23/  904938 :                     ; dky: decay rate (up)
(1)   24/  904938 :                     ; rrt: release rate (down)
(1)   25/  904938 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt
(1)   26/  904938 :                     	dc.b $80,pitch,alv,atk
(1)   27/  904938 :                     	dc.b slv,dky,rrt,$00
(1)   28/  904938 :                     	endm
(1)   29/  904938 :                     
(1)   30/  904938 :                     ; same arguments as gInsPsg, but for the last one:
(1)   31/  904938 :                     ; mode: noise mode %tmm (PSGN only) t-Bass(0)|Noise(1) mm-Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   32/  904938 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,mode
(1)   33/  904938 :                     	dc.b $90|mode,pitch,alv,atk
(1)   34/  904938 :                     	dc.b slv,dky,rrt,0
(1)   35/  904938 :                     	endm
(1)   36/  904938 :                     
(1)   37/  904938 :                     ; fmins - 24-bit ROM pointer to patch data
(1)   38/  904938 :                     gInsFm macro pitch,fmins
(1)   39/  904938 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   40/  904938 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   41/  904938 :                     	endm
(1)   42/  904938 :                     
(1)   43/  904938 :                     ; Same as gInsFm
(1)   44/  904938 :                     ; But the last 4 words on the patch data are the custom frequencies
(1)   45/  904938 :                     ; for each operator in this order: OP1 OP2 OP3 OP4
(1)   46/  904938 :                     gInsFm3	macro pitch,fmins
(1)   47/  904938 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   48/  904938 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   49/  904938 :                     	endm
(1)   50/  904938 :                     
(1)   51/  904938 :                     ; start: Pointer to sample data:
(1)   52/  904938 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   53/  904938 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   54/  904938 :                     ;        dc.b (sound data)	; Then the actual sound data
(1)   55/  904938 :                     ; flags: %0-don't loop
(1)   56/  904938 :                     ; 	 %1-loop
(1)   57/  904938 :                     gInsDac	macro pitch,start,flags
(1)   58/  904938 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   59/  904938 :                     	dc.b start&$FF,0,0,0
(1)   60/  904938 :                     	endm
(1)   61/  904938 :                     
(1)   62/  904938 :                     ; start: Pointer to sample data:
(1)   63/  904938 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   64/  904938 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   65/  904938 :                     ;        dc.b (data)		; Then the actual sound data
(1)   66/  904938 :                     ; flags: %00SL
(1)   67/  904938 :                     ;        L - Loop sample No/Yes
(1)   68/  904938 :                     ;        S - Sample data is in stereo
(1)   69/  904938 :                     gInsPwm	macro pitch,start,flags
(1)   70/  904938 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   71/  904938 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   72/  904938 :                     	endm
(1)   73/  904938 :                     
(1)   74/  904938 :                     ; ------------------------------------------------------------
(1)   75/  904938 :                     ; SFX tracks
(1)   76/  904938 :                     ; ------------------------------------------------------------
(1)   77/  904938 :                     
(1)   78/  904938 :                     GemaTrkData_Sfx:
(1)   79/  904938 : 0090 4948           	dc.l GemaSfxPat_Boom
(1)   80/  90493C : 0090 4944           	dc.l GemaSfxBlk_Boom
(1)   81/  904940 : 0090 4994           	dc.l GemaSfxIns_Boom
(1)   82/  904944 :                     GemaSfxBlk_Boom:
(1)   83/  904944 :                     	binclude "sound/tracks/sfxpack_blk.bin"
(1)   84/  904947 :                     	align 2
(1)   85/  904948 :                     GemaSfxPat_Boom:
(1)   86/  904948 :                     	binclude "sound/tracks/sfxpack_patt.bin"
(1)   87/  904994 :                     	align 2
(1)   88/  904994 :                     GemaSfxIns_Boom:
(1)   89/  904994 : (MACRO)             	gInsFm3 0,FmIns_Fm3_Explosion
(1)   89/  904994 : B000 90EC                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)   89/  904998 : 4800 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)   90/  90499C : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$02,%110
(1)   90/  90499C : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)   90/  9049A0 : 0000 0200                   dc.b $00,$00,$02,0
(1)   91/  9049A4 : (MACRO)             	gInsFm 0,FmIns_Ding_toy
(1)   91/  9049A4 : A000 90EF                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)   91/  9049A8 : 1000 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)   92/  9049AC :                     
(1)   93/  9049AC :                     ; ; onett
(1)   94/  9049AC :                     ; GemaTrkData_Test:
(1)   95/  9049AC :                     ; 	dc.l GemaPat_Test
(1)   96/  9049AC :                     ; 	dc.l GemaBlk_Test
(1)   97/  9049AC :                     ; 	dc.l GemaIns_Test
(1)   98/  9049AC :                     ; GemaBlk_Test:
(1)   99/  9049AC :                     ; 	binclude "sound/tracks/float_blk.bin"
(1)  100/  9049AC :                     ; 	align 2
(1)  101/  9049AC :                     ; GemaPat_Test:
(1)  102/  9049AC :                     ; 	binclude "sound/tracks/float_patt.bin"
(1)  103/  9049AC :                     ; 	align 2
(1)  104/  9049AC :                     ; GemaIns_Test:
(1)  105/  9049AC :                     ; 	gInsFm 0,FmIns_Bass_groove_2
(1)  106/  9049AC :                     ; 	gInsPwm 0,PwmIns_String_1,1
(1)  107/  9049AC :                     ; 	gInsPwm -18,PwmIns_Tropical,0
(1)  108/  9049AC :                     ; 	gInsFm -24,FmIns_Trumpet_carnival
(1)  109/  9049AC :                     ; 	gInsNull
(1)  110/  9049AC :                     ; 	gInsNull
(1)  111/  9049AC :                     ; 	gInsNull
(1)  112/  9049AC :                     ; 	gInsNull
(1)  113/  9049AC :                     ; 	gInsNull
(1)  114/  9049AC :                     ; 	gInsNull
(1)  115/  9049AC :                     ; 	gInsNull
(1)  116/  9049AC :                     ; 	gInsNull
(1)  117/  9049AC :                     ; 	gInsNull
(1)  118/  9049AC :                     ; 	gInsNull
(1)  119/  9049AC :                     ; 	gInsNull
(1)  120/  9049AC :                     ; 	gInsNull
(1)  121/  9049AC :                     ; 	gInsNull
(1)  122/  9049AC :                     ; 	gInsNull
(1)  123/  9049AC :                     ; 	gInsNull
(1)  124/  9049AC :                     ; 	gInsNull
(1)  125/  9049AC :                     
(1)  126/  9049AC :                     ; ; onett
(1)  127/  9049AC :                     GemaTrkData_Test:
(1)  128/  9049AC : 0090 49C2           	dc.l GemaPat_Test
(1)  129/  9049B0 : 0090 49B8           	dc.l GemaBlk_Test
(1)  130/  9049B4 : 0090 5C88           	dc.l GemaIns_Test
(1)  131/  9049B8 :                     GemaBlk_Test:
(1)  132/  9049B8 :                     	binclude "sound/tracks/onett_blk.bin"
(1)  133/  9049C2 :                     GemaPat_Test:
(1)  134/  9049C2 :                     	binclude "sound/tracks/onett_patt.bin"
(1)  135/  905C88 :                     GemaIns_Test:
(1)  136/  905C88 : (MACRO)             	gInsFm 0,FmIns_Bass_calm
(1)  136/  905C88 : A000 90EC                   dc.b $A0,0,((FMINS_BASS_CALM>>16)&$FF),((FMINS_BASS_CALM>>8)&$FF)
(1)  136/  905C8C : F000 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  137/  905C90 : (MACRO)             	gInsFm 0,FmIns_Ding_Toy
(1)  137/  905C90 : A000 90EF                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)  137/  905C94 : 1000 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  138/  905C98 : (MACRO)             	gInsNull
(1)  138/  905C98 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  138/  905C9C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  139/  905CA0 : (MACRO)             	gInsFm 0,FmIns_Marimba
(1)  139/  905CA0 : A000 90EE                   dc.b $A0,0,((FMINS_MARIMBA>>16)&$FF),((FMINS_MARIMBA>>8)&$FF)
(1)  139/  905CA4 : 9000 0000                   dc.b FMINS_MARIMBA&$FF,$00,$00,$00
(1)  140/  905CA8 : (MACRO)             	gInsPsg 0,$20,$01,$10,$04,$04
(1)  140/  905CA8 : 8000 2001                   dc.b $80,0,$20,$01
(1)  140/  905CAC : 1004 0400                   dc.b $10,$04,$04,$00
(1)  141/  905CB0 : (MACRO)             	gInsFm 0,FmIns_Trumpet_1
(1)  141/  905CB0 : A000 90EE                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  141/  905CB4 : 1000 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  142/  905CB8 : (MACRO)             	gInsFm 0,FmIns_Trombone_gem
(1)  142/  905CB8 : A000 90EF                   dc.b $A0,0,((FMINS_TROMBONE_GEM>>16)&$FF),((FMINS_TROMBONE_GEM>>8)&$FF)
(1)  142/  905CBC : F000 0000                   dc.b FMINS_TROMBONE_GEM&$FF,$00,$00,$00
(1)  143/  905CC0 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$08,%110
(1)  143/  905CC0 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  143/  905CC4 : 0000 0800                   dc.b $00,$00,$08,0
(1)  144/  905CC8 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$0C,%101
(1)  144/  905CC8 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  144/  905CCC : 0000 0C00                   dc.b $00,$00,$0C,0
(1)  145/  905CD0 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$0C,%100
(1)  145/  905CD0 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  145/  905CD4 : 0000 0C00                   dc.b $00,$00,$0C,0
(1)  146/  905CD8 : (MACRO)             	gInsPsg 0,$10,$08,$00,$01,$06
(1)  146/  905CD8 : 8000 1008                   dc.b $80,0,$10,$08
(1)  146/  905CDC : 0001 0600                   dc.b $00,$01,$06,$00
(1)  147/  905CE0 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$06,%101
(1)  147/  905CE0 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  147/  905CE4 : 0000 0600                   dc.b $00,$00,$06,0
(1)  148/  905CE8 : (MACRO)             	gInsNull
(1)  148/  905CE8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  148/  905CEC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  149/  905CF0 : (MACRO)             	gInsNull
(1)  149/  905CF0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  149/  905CF4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  150/  905CF8 : (MACRO)             	gInsNull
(1)  150/  905CF8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  150/  905CFC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  151/  905D00 : (MACRO)             	gInsNull
(1)  151/  905D00 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  151/  905D04 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  152/  905D08 : (MACRO)             	gInsNull
(1)  152/  905D08 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  152/  905D0C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  153/  905D10 : (MACRO)             	gInsNull
(1)  153/  905D10 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  153/  905D14 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  154/  905D18 : (MACRO)             	gInsNull
(1)  154/  905D18 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  154/  905D1C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  155/  905D20 : (MACRO)             	gInsNull
(1)  155/  905D20 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  155/  905D24 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  156/  905D28 :                     
(1)  157/  905D28 :                     GemaTrkData_Test2:
(1)  158/  905D28 : 0090 5D4A           	dc.l GemaPat_Test2
(1)  159/  905D2C : 0090 5D34           	dc.l GemaBlk_Test2
(1)  160/  905D30 : 0090 797A           	dc.l GemaIns_Test2
(1)  161/  905D34 :                     GemaBlk_Test2:
(1)  162/  905D34 :                     	binclude "sound/tracks/wegot_blk.bin"
(1)  163/  905D49 :                     	align 2
(1)  164/  905D4A :                     GemaPat_Test2:
(1)  165/  905D4A :                     	binclude "sound/tracks/wegot_patt.bin"
(1)  166/  90797A :                     	align 2
(1)  167/  90797A :                     GemaIns_Test2:
(1)  168/  90797A : (MACRO)             	gInsFm 0,FmIns_PSynth_plus
(1)  168/  90797A : A000 90EF                   dc.b $A0,0,((FMINS_PSYNTH_PLUS>>16)&$FF),((FMINS_PSYNTH_PLUS>>8)&$FF)
(1)  168/  90797E : B000 0000                   dc.b FMINS_PSYNTH_PLUS&$FF,$00,$00,$00
(1)  169/  907982 : (MACRO)             	gInsFm 0,FmIns_Bass_groove_2
(1)  169/  907982 : A000 90ED                   dc.b $A0,0,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(1)  169/  907986 : 9000 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(1)  170/  90798A : (MACRO)             	gInsDac -36,DacIns_wegot_kick,0
(1)  170/  90798A : C0DC 9100                   dc.b $C0|0,-36,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  170/  90798E : 0000 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  171/  907992 : (MACRO)             	gInsFm 0,FmIns_Bass_club
(1)  171/  907992 : A000 90ED                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(1)  171/  907996 : 3000 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(1)  172/  90799A : (MACRO)             	gInsFm3 0,FmIns_Fm3_OpenHat
(1)  172/  90799A : B000 90EB                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF),((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  172/  90799E : F800 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  173/  9079A2 : (MACRO)             	gInsPsg 0,$20,$40,$10,$01,$04
(1)  173/  9079A2 : 8000 2040                   dc.b $80,0,$20,$40
(1)  173/  9079A6 : 1001 0400                   dc.b $10,$01,$04,$00
(1)  174/  9079AA : (MACRO)             	gInsDac -36,DacIns_wegot_crash,0
(1)  174/  9079AA : C0DC 9107                   dc.b $C0|0,-36,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(1)  174/  9079AE : 7A00 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(1)  175/  9079B2 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$10,%100
(1)  175/  9079B2 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  175/  9079B6 : 0000 1000                   dc.b $00,$00,$10,0
(1)  176/  9079BA : (MACRO)             	gInsNull
(1)  176/  9079BA : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  176/  9079BE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  177/  9079C2 : (MACRO)             	gInsNull
(1)  177/  9079C2 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  177/  9079C6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  178/  9079CA :                     
(1)  179/  9079CA :                     GemaTrkData_Test3:
(1)  180/  9079CA : 0090 79F4           	dc.l GemaPat_Test3
(1)  181/  9079CE : 0090 79D6           	dc.l GemaBlk_Test3
(1)  182/  9079D2 : 0090 D1E4           	dc.l GemaIns_Test3
(1)  183/  9079D6 :                     GemaBlk_Test3:
(1)  184/  9079D6 :                     	binclude "sound/tracks/vuela_blk.bin"
(1)  185/  9079F4 :                     	align 2
(1)  186/  9079F4 :                     GemaPat_Test3:
(1)  187/  9079F4 :                     	binclude "sound/tracks/vuela_patt.bin"
(1)  188/  90D1E3 :                     	align 2
(1)  189/  90D1E4 :                     GemaIns_Test3:
(1)  190/  90D1E4 : (MACRO)             	gInsFm -12,FmIns_Brass_Eur
(1)  190/  90D1E4 : A0F4 90EF                   dc.b $A0,-12,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  190/  90D1E8 : 3000 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  191/  90D1EC : (MACRO)             	gInsFm 0,FmIns_Bass_italo
(1)  191/  90D1EC : A000 90ED                   dc.b $A0,0,((FMINS_BASS_ITALO>>16)&$FF),((FMINS_BASS_ITALO>>8)&$FF)
(1)  191/  90D1F0 : D000 0000                   dc.b FMINS_BASS_ITALO&$FF,$00,$00,$00
(1)  192/  90D1F4 : (MACRO)             	gInsDac -36,DacIns_wegot_kick,0
(1)  192/  90D1F4 : C0DC 9100                   dc.b $C0|0,-36,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  192/  90D1F8 : 0000 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  193/  90D1FC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$0E,%100
(1)  193/  90D1FC : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  193/  90D200 : 0000 0E00                   dc.b $00,$00,$0E,0
(1)  194/  90D204 : (MACRO)             	gInsNull
(1)  194/  90D204 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  194/  90D208 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/  90D20C : (MACRO)             	gInsPsg 0,$20,$40,$10,$06,$08
(1)  195/  90D20C : 8000 2040                   dc.b $80,0,$20,$40
(1)  195/  90D210 : 1006 0800                   dc.b $10,$06,$08,$00
(1)  196/  90D214 : (MACRO)             	gInsDac +16,DacIns_snare_magn,0
(1)  196/  90D214 : C010 9145                   dc.b $C0|0,+16,((DACINS_SNARE_MAGN>>16)&$FF),((DACINS_SNARE_MAGN>>8)&$FF)
(1)  196/  90D218 : 6E00 0000                   dc.b DACINS_SNARE_MAGN&$FF,0,0,0
(1)  197/  90D21C : (MACRO)             	gInsFm -24,FmIns_Brass_Eur
(1)  197/  90D21C : A0E8 90EF                   dc.b $A0,-24,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  197/  90D220 : 3000 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  198/  90D224 : (MACRO)             	gInsNull
(1)  198/  90D224 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  198/  90D228 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/  90D22C : (MACRO)             	gInsNull
(1)  199/  90D22C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  199/  90D230 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/  90D234 : (MACRO)             	gInsNull
(1)  200/  90D234 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  200/  90D238 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  201/  90D23C : (MACRO)             	gInsNull
(1)  201/  90D23C : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  201/  90D240 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  202/  90D244 : (MACRO)             	gInsFm -24,FmIns_Trumpet_carnival
(1)  202/  90D244 : A0E8 90EE                   dc.b $A0,-24,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  202/  90D248 : 7000 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  203/  90D24C : (MACRO)             	gInsFm -12,FmIns_Ding_toy
(1)  203/  90D24C : A0F4 90EF                   dc.b $A0,-12,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)  203/  90D250 : 1000 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  204/  90D254 : (MACRO)             	gInsNull
(1)  204/  90D254 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  204/  90D258 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  205/  90D25C :                     
(1)  206/  90D25C :                     
(1)  207/  90D25C :                     ; GemaTrkData_Test:
(1)  208/  90D25C :                     ; 	dc.l GemaPat_Test
(1)  209/  90D25C :                     ; 	dc.l GemaBlk_Test
(1)  210/  90D25C :                     ; 	dc.l GemaIns_Test
(1)  211/  90D25C :                     ; GemaBlk_Test:
(1)  212/  90D25C :                     ; 	binclude "sound/tracks/bonus_blk.bin"
(1)  213/  90D25C :                     ; GemaPat_Test:
(1)  214/  90D25C :                     ; 	binclude "sound/tracks/bonus_patt.bin"
(1)  215/  90D25C :                     ; GemaIns_Test:
(1)  216/  90D25C :                     ; 	gInsFm  -12,FmIns_Bass_Oil
(1)  217/  90D25C :                     ; 	gInsDac -24,DacIns_SaurKick,0
(1)  218/  90D25C :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$18,%100
(1)  219/  90D25C :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$18,%100
(1)  220/  90D25C :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$10,%100
(1)  221/  90D25C :                     ; 	gInsDac -12,DacIns_Snare_Gem,0
(1)  222/  90D25C :                     ; 	gInsNull
(1)  223/  90D25C :                     ; 	gInsFm -12,FmIns_Organ_Ito
(1)  224/  90D25C :                     ; 	gInsNull
(1)  225/  90D25C :                     ; 	gInsNull
(1)  226/  90D25C :                     ; 	gInsNull
(1)  227/  90D25C :                     ; 	gInsFm -12,FmIns_Ding_Baseball
(1)  228/  90D25C :                     ; 	gInsFm -12,FmIns_Brass_Eur
(1)  229/  90D25C :                     ; 	gInsNull
(1)  230/  90D25C :                     ; 	gInsNull
(1)  231/  90D25C :                     ; 	gInsNull
(1)  232/  90D25C :                     ; 	gInsNull
(1)  233/  90D25C :                     ; 	gInsNull
(1)  234/  90D25C :                     ; 	gInsNull
(1)  235/  90D25C :                     ; 	gInsNull
(1)  236/  90D25C :                     ; 	gInsNull
(1)  237/  90D25C :                     ; 	gInsNull
(1)  238/  90D25C :                     ; 	gInsNull
(1)  239/  90D25C :                     ; 	gInsNull
(1)  240/  90D25C :                     ; 	gInsNull
(1)  241/  90D25C :                     ; 	gInsNull
(1)  242/  90D25C :                     ; 	gInsNull
(1)  243/  90D25C :                     
(1)  244/  90D25C :                     ; 	gInsFm3 0,FmIns_Fm3_Explosion
(1)  245/  90D25C :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$02,%110
(1)  246/  90D25C :                     ; 	gInsFm 0,FmIns_Ding_toy
(1)  247/  90D25C :                     
(1)  248/  90D25C :                     ; GemaTrk_blk_Vectr:
(1)  249/  90D25C :                     ; 	binclude "sound/tracks/vectr_blk.bin"
(1)  250/  90D25C :                     ; GemaTrk_patt_Vectr:
(1)  251/  90D25C :                     ; 	binclude "sound/tracks/vectr_patt.bin"
(1)  252/  90D25C :                     ; GemaTrk_ins_Vectr:
(1)  253/  90D25C :                     ; 	gInsPwm -17,SmpIns_Vctr01,%001
(1)  254/  90D25C :                     ; 	gInsNull
(1)  255/  90D25C :                     ; 	gInsPwm -15,SmpIns_VctrCrash,0
(1)  256/  90D25C :                     ; 	gInsPwm -17,SmpIns_Vctr04,%001
(1)  257/  90D25C :                     ; 	gInsNull
(1)  258/  90D25C :                     ; 	gInsPwm -15,SmpIns_VctrTimpani,%001
(1)  259/  90D25C :                     ; 	gInsFm -22,FmIns_Bass_4
(1)  260/  90D25C :                     ; 	gInsPsg 0,$00,$00,$00,$00,$01
(1)  261/  90D25C :                     ; 	gInsPsg 0,$00,$00,$00,$00,$01
(1)  262/  90D25C :                     ; 	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  263/  90D25C :                     ; 	gInsPwm -17,SmpIns_VctrKick,%000
(1)  264/  90D25C :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$10,%100
(1)  265/  90D25C :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$08,%100
(1)  266/  90D25C :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  267/  90D25C :                     ;
(1)  268/  90D25C :                     GemaBlk_BeMine:
(1)  269/  90D25C :                     	binclude "sound/tracks/bemine_blk.bin"
(1)  270/  90D26D :                     GemaPat_BeMine:
(1)  271/  90D26D :                     	binclude "sound/tracks/bemine_patt.bin"
(1)  272/  90EB30 :                     GemaIns_BeMine:
(1)  273/  90EB30 : (MACRO)             	gInsPwm -17,SmpIns_Bell_Ice,0
(1)  273/  90EB30 : D0EF 0202                   dc.b $D0|0,-17,((SMPINS_BELL_ICE>>24)&$FF),((SMPINS_BELL_ICE>>16)&$FF)
(1)  273/  90EB34 : E090 0000                   dc.b ((SMPINS_BELL_ICE>>8)&$FF),SMPINS_BELL_ICE&$FF,0,0
(1)  274/  90EB38 : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Hi,%01
(1)  274/  90EB38 : D1EF 0203                   dc.b $D0|%01,-17,((SMPINS_BRASS1_HI>>24)&$FF),((SMPINS_BRASS1_HI>>16)&$FF)
(1)  274/  90EB3C : 1BBA 0000                   dc.b ((SMPINS_BRASS1_HI>>8)&$FF),SMPINS_BRASS1_HI&$FF,0,0
(1)  275/  90EB40 : (MACRO)             	gInsPwm -17,SmpIns_Brass1_Low,%01
(1)  275/  90EB40 : D1EF 0203                   dc.b $D0|%01,-17,((SMPINS_BRASS1_LOW>>24)&$FF),((SMPINS_BRASS1_LOW>>16)&$FF)
(1)  275/  90EB44 : 9784 0000                   dc.b ((SMPINS_BRASS1_LOW>>8)&$FF),SMPINS_BRASS1_LOW&$FF,0,0
(1)  276/  90EB48 : (MACRO)             	gInsFm  -24,FmIns_Bass_groove
(1)  276/  90EB48 : A0E8 90ED                   dc.b $A0,-24,((FMINS_BASS_GROOVE>>16)&$FF),((FMINS_BASS_GROOVE>>8)&$FF)
(1)  276/  90EB4C : 7000 0000                   dc.b FMINS_BASS_GROOVE&$FF,$00,$00,$00
(1)  277/  90EB50 : (MACRO)             	gInsFm3   0,FmIns_Fm3_OpenHat
(1)  277/  90EB50 : B000 90EB                   dc.b $B0,0,((FMINS_FM3_OPENHAT>>16)&$FF),((FMINS_FM3_OPENHAT>>8)&$FF)
(1)  277/  90EB54 : F800 0000                   dc.b FMINS_FM3_OPENHAT&$FF,$00,$00,$00
(1)  278/  90EB58 : (MACRO)             	gInsPwm -17,SmpIns_Snare_jam,0
(1)  278/  90EB58 : D0EF 0204                   dc.b $D0|0,-17,((SMPINS_SNARE_JAM>>24)&$FF),((SMPINS_SNARE_JAM>>16)&$FF)
(1)  278/  90EB5C : 6704 0000                   dc.b ((SMPINS_SNARE_JAM>>8)&$FF),SMPINS_SNARE_JAM&$FF,0,0
(1)  279/  90EB60 : (MACRO)             	gInsPwm -17,SmpIns_Kick_jam,0
(1)  279/  90EB60 : D0EF 0204                   dc.b $D0|0,-17,((SMPINS_KICK_JAM>>24)&$FF),((SMPINS_KICK_JAM>>16)&$FF)
(1)  279/  90EB64 : 5C3A 0000                   dc.b ((SMPINS_KICK_JAM>>8)&$FF),SMPINS_KICK_JAM&$FF,0,0
(1)  280/  90EB68 : (MACRO)             	gInsPwm -17,SmpIns_SnrTom_1,0
(1)  280/  90EB68 : D0EF 0204                   dc.b $D0|0,-17,((SMPINS_SNRTOM_1>>24)&$FF),((SMPINS_SNRTOM_1>>16)&$FF)
(1)  280/  90EB6C : 706E 0000                   dc.b ((SMPINS_SNRTOM_1>>8)&$FF),SMPINS_SNRTOM_1&$FF,0,0
(1)  281/  90EB70 : (MACRO)             	gInsPwm -17,SmpIns_Forest_1,0
(1)  281/  90EB70 : D0EF 0204                   dc.b $D0|0,-17,((SMPINS_FOREST_1>>24)&$FF),((SMPINS_FOREST_1>>16)&$FF)
(1)  281/  90EB74 : 134E 0000                   dc.b ((SMPINS_FOREST_1>>8)&$FF),SMPINS_FOREST_1&$FF,0,0
(1)  282/  90EB78 : (MACRO)             	gInsFm -36,FmIns_Ambient_dark
(1)  282/  90EB78 : A0DC 90EE                   dc.b $A0,-36,((FMINS_AMBIENT_DARK>>16)&$FF),((FMINS_AMBIENT_DARK>>8)&$FF)
(1)  282/  90EB7C : B000 0000                   dc.b FMINS_AMBIENT_DARK&$FF,$00,$00,$00
(1)  283/  90EB80 : (MACRO)             	gInsPsg +12,$00,$00,$00,$08,$04
(1)  283/  90EB80 : 800C 0000                   dc.b $80,+12,$00,$00
(1)  283/  90EB84 : 0008 0400                   dc.b $00,$08,$04,$00
(1)  284/  90EB88 : (MACRO)             	gInsNull
(1)  284/  90EB88 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  284/  90EB8C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  285/  90EB90 : (MACRO)             	gInsNull
(1)  285/  90EB90 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  285/  90EB94 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  286/  90EB98 : (MACRO)             	gInsNull
(1)  286/  90EB98 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  286/  90EB9C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  287/  90EBA0 : (MACRO)             	gInsNull
(1)  287/  90EBA0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  287/  90EBA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  288/  90EBA8 : (MACRO)             	gInsNull
(1)  288/  90EBA8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  288/  90EBAC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  289/  90EBB0 : (MACRO)             	gInsNull
(1)  289/  90EBB0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  289/  90EBB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  290/  90EBB8 : (MACRO)             	gInsNull
(1)  290/  90EBB8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  290/  90EBBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  291/  90EBC0 : (MACRO)             	gInsNull
(1)  291/  90EBC0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  291/  90EBC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  292/  90EBC8 : (MACRO)             	gInsNull
(1)  292/  90EBC8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  292/  90EBCC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  293/  90EBD0 : (MACRO)             	gInsNull
(1)  293/  90EBD0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  293/  90EBD4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  294/  90EBD8 : (MACRO)             	gInsNull
(1)  294/  90EBD8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  294/  90EBDC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  295/  90EBE0 : (MACRO)             	gInsNull
(1)  295/  90EBE0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  295/  90EBE4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  296/  90EBE8 : (MACRO)             	gInsNull
(1)  296/  90EBE8 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  296/  90EBEC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  297/  90EBF0 : (MACRO)             	gInsNull
(1)  297/  90EBF0 : FF00 0000                   dc.b  -1,$00,$00,$00
(1)  297/  90EBF4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  298/  90EBF8 :                     ;
(1)  299/  90EBF8 :                     ; GemaTrk_blk_HILLS:
(1)  300/  90EBF8 :                     ; 	binclude "sound/tracks/hill_blk.bin"
(1)  301/  90EBF8 :                     ; GemaTrk_patt_HILLS:
(1)  302/  90EBF8 :                     ; 	binclude "sound/tracks/hill_patt.bin"
(1)  303/  90EBF8 :                     ; GemaTrk_ins_HILLS:
(1)  304/  90EBF8 :                     ; 	gInsPsg +2,$40,$02,$30,$10,$00
(1)  305/  90EBF8 :                     ; 	gInsFm -10,FmIns_Trumpet_1
(1)  306/  90EBF8 :                     ; 	gInsPsgN 0,$00,$00,$00,$00,$04,%110
(1)  307/  90EBF8 :                     ; 	gInsDac -3,DacIns_LowString,1;gInsPwm -8,DacIns_LowString,1
(1)  308/  90EBF8 :                     ; 	gInsFm -8-12,FmIns_Ding_Toy
(1)  309/  90EBF8 :                     ; 	gInsFm -25,FmIns_Bass_3
(1)  310/  90EBF8 :                     ; 	gInsNull
(1)  311/  90EBF8 :                     ; 	gInsNull
(1)  312/  90EBF8 :                     ; 	gInsNull
(1)  313/  90EBF8 :                     ; 	gInsNull
(1)  314/  90EBF8 :                     ; 	gInsNull
(1)  315/  90EBF8 :                     ; 	gInsNull
(1)  316/  90EBF8 :                     ; 	gInsNull
(1)  317/  90EBF8 :                     
      60/  90EBF8 :                     		include "sound/instr.asm"
(1)    1/  90EBF8 :                     ; ====================================================================
(1)    2/  90EBF8 :                     ; FM instrument patches
(1)    3/  90EBF8 :                     ;
(1)    4/  90EBF8 :                     ; This must be located at the 900000 area.
(1)    5/  90EBF8 :                     ; ====================================================================
(1)    6/  90EBF8 :                     
(1)    7/  90EBF8 :                     ; Sizes
(1)    8/  90EBF8 :                     ; Normal FM ins: $20
(1)    9/  90EBF8 :                     ; Special FM ins: $28
(1)   10/  90EBF8 :                     ;
(1)   11/  90EBF8 :                     
(1)   12/  90EBF8 :                     ; --------------------------------------------------------
(1)   13/  90EBF8 :                     ; FM instruments/patches
(1)   14/  90EBF8 :                     ; --------------------------------------------------------
(1)   15/  90EBF8 :                     
(1)   16/  90EBF8 :                     ; Sizes
(1)   17/  90EBF8 :                     ; Normal FM ins: $20
(1)   18/  90EBF8 :                     ; Special FM ins: $28
(1)   19/  90EBF8 :                     
(1)   20/  90EBF8 :                     ; FM3 Special
(1)   21/  90EBF8 :                     FmIns_Fm3_OpenHat:
(1)   22/  90EBF8 :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   23/  90EC20 :                     FmIns_Fm3_ClosedHat:
(1)   24/  90EC20 :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   25/  90EC48 :                     FmIns_Fm3_Explosion:
(1)   26/  90EC48 :                     		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   27/  90EC70 :                     
(1)   28/  90EC70 :                     ; Bass
(1)   29/  90EC70 :                     FmIns_Bass_Oil:
(1)   30/  90EC70 :                     		binclude "sound/instr/fm/bass_oil.gsx",$2478,$20
(1)   31/  90EC90 :                     
(1)   32/  90EC90 :                     ; Organ
(1)   33/  90EC90 :                     FmIns_Organ_Ito:
(1)   34/  90EC90 :                     		binclude "sound/instr/fm/organ_ito.gsx",$2478,$20
(1)   35/  90ECB0 :                     
(1)   36/  90ECB0 :                     ; Bell-ish
(1)   37/  90ECB0 :                     FmIns_Ding_Baseball:
(1)   38/  90ECB0 :                     		binclude "sound/instr/fm/ding_baseball.gsx",$2478,$20
(1)   39/  90ECD0 :                     
(1)   40/  90ECD0 :                     ; FmIns_Guitar_gem:
(1)   41/  90ECD0 :                     ; 		binclude "sound/instr/fm/guitar_gem.gsx",$2478,$20
(1)   42/  90ECD0 :                     ; Fmins_Guitar_Heavy:
(1)   43/  90ECD0 :                     ; 		binclude "sound/instr/fm/guitar_heavy.gsx",$2478,$20
(1)   44/  90ECD0 :                     ; Fmins_Guitar_puy:
(1)   45/  90ECD0 :                     ; 		binclude "sound/instr/fm/guitar_puy.gsx",$2478,$20
(1)   46/  90ECD0 :                     ; Fmins_Guitar_puy_2:
(1)   47/  90ECD0 :                     ; 		binclude "sound/instr/fm/guitar_puy_2.gsx",$2478,$20
(1)   48/  90ECD0 :                     FmIns_DrumKick_gem:
(1)   49/  90ECD0 :                     		binclude "sound/instr/fm/drum_kick_gem.gsx",$2478,$20
(1)   50/  90ECF0 :                     ;
(1)   51/  90ECF0 :                     ; ; FmIns_DrumKick:
(1)   52/  90ECF0 :                     ; ; 		binclude "sound/instr/fm/drum_kick.gsx",$2478,$20
(1)   53/  90ECF0 :                     ; ; FmIns_DrumSnare:
(1)   54/  90ECF0 :                     ; ; 		binclude "sound/instr/fm/drum_snare.gsx",$2478,$20
(1)   55/  90ECF0 :                     ; ; ; ; FmIns_DrumCloseHat:
(1)   56/  90ECF0 :                     ; ; ; ; 		binclude "sound/instr/fm/drum_closehat.gsx",$2478,$20
(1)   57/  90ECF0 :                     ; FmIns_PianoM1:
(1)   58/  90ECF0 :                     ; 		binclude "sound/instr/fm/piano_m1.gsx",$2478,$20
(1)   59/  90ECF0 :                     ; ; FmIns_PianoM116:
(1)   60/  90ECF0 :                     ; ; 		binclude "sound/instr/fm/piano_m116.gsx",$2478,$20
(1)   61/  90ECF0 :                     ;
(1)   62/  90ECF0 :                     ; ; ;
(1)   63/  90ECF0 :                     ; ; ; ; FmIns_Bass_gum:
(1)   64/  90ECF0 :                     ; ; ; ; 		binclude "sound/instr/fm/bass_gum.gsx",$2478,$20
(1)   65/  90ECF0 :                     FmIns_Bass_calm:
(1)   66/  90ECF0 :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   67/  90ED10 :                     ; FmIns_Bass_heavy:
(1)   68/  90ED10 :                     ; 		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)   69/  90ED10 :                     ; FmIns_Bass_ambient:
(1)   70/  90ED10 :                     ; 		binclude "sound/instr/fm/bass_ambient.gsx",$2478,$20
(1)   71/  90ED10 :                     ; ; ; FmIns_Brass_gummy:
(1)   72/  90ED10 :                     ; ; ; 		binclude "sound/instr/fm/brass_gummy.gsx",$2478,$20
(1)   73/  90ED10 :                     ; FmIns_Flaute_1:
(1)   74/  90ED10 :                     ; 		binclude "sound/instr/fm/flaute_1.gsx",$2478,$20
(1)   75/  90ED10 :                     FmIns_Bass_1:
(1)   76/  90ED10 :                     		binclude "sound/instr/fm/bass_1.gsx",$2478,$20
(1)   77/  90ED30 :                     ; FmIns_Bass_2:
(1)   78/  90ED30 :                     ; 		binclude "sound/instr/fm/bass_2.gsx",$2478,$20
(1)   79/  90ED30 :                     ; FmIns_Bass_3:
(1)   80/  90ED30 :                     ; 		binclude "sound/instr/fm/bass_3.gsx",$2478,$20
(1)   81/  90ED30 :                     ; FmIns_Bass_4:
(1)   82/  90ED30 :                     ; 		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   83/  90ED30 :                     ; FmIns_Bass_5:
(1)   84/  90ED30 :                     ; 		binclude "sound/instr/fm/bass_5.gsx",$2478,$20
(1)   85/  90ED30 :                     FmIns_Bass_club:
(1)   86/  90ED30 :                     		binclude "sound/instr/fm/bass_club.gsx",$2478,$20
(1)   87/  90ED50 :                     FmIns_Bass_donna:
(1)   88/  90ED50 :                     		binclude "sound/instr/fm/bass_donna.gsx",$2478,$20
(1)   89/  90ED70 :                     FmIns_Bass_groove:
(1)   90/  90ED70 :                     		binclude "sound/instr/fm/bass_groove.gsx",$2478,$20
(1)   91/  90ED90 :                     FmIns_Bass_groove_2:
(1)   92/  90ED90 :                     		binclude "sound/instr/fm/bass_groove_2.gsx",$2478,$20
(1)   93/  90EDB0 :                     FmIns_Bass_groove_gem:
(1)   94/  90EDB0 :                     		binclude "sound/instr/fm/bass_groove_gem.gsx",$2478,$20
(1)   95/  90EDD0 :                     FmIns_Bass_italo:
(1)   96/  90EDD0 :                     		binclude "sound/instr/fm/bass_italo.gsx",$2478,$20
(1)   97/  90EDF0 :                     ; FmIns_Bass_kon:
(1)   98/  90EDF0 :                     ; 		binclude "sound/instr/fm/bass_kon.gsx",$2478,$20
(1)   99/  90EDF0 :                     
(1)  100/  90EDF0 :                     ; FmIns_Bass_mecan:
(1)  101/  90EDF0 :                     ; 		binclude "sound/instr/fm/bass_mecan.gsx",$2478,$20
(1)  102/  90EDF0 :                     ;
(1)  103/  90EDF0 :                     ; ; ; FmIns_Bass_heavy:
(1)  104/  90EDF0 :                     ; ; ; 		binclude "sound/instr/fm/bass_heavy.gsx",$2478,$20
(1)  105/  90EDF0 :                     ; ; ; FmIns_Bass_metal:
(1)  106/  90EDF0 :                     ; ; ; 		binclude "sound/instr/fm/bass_metal.gsx",$2478,$20
(1)  107/  90EDF0 :                     ; FmIns_Bass_synth:
(1)  108/  90EDF0 :                     ; 		binclude "sound/instr/fm/bass_synth_1.gsx",$2478,$20
(1)  109/  90EDF0 :                     ; FmIns_Guitar_1:
(1)  110/  90EDF0 :                     ; 		binclude "sound/instr/fm/guitar_1.gsx",$2478,$20
(1)  111/  90EDF0 :                     ; ; ; FmIns_Horn_1:
(1)  112/  90EDF0 :                     ; ; ; 		binclude "sound/instr/fm/horn_1.gsx",$2478,$20
(1)  113/  90EDF0 :                     ; FmIns_Organ_M1:
(1)  114/  90EDF0 :                     ; 		binclude "sound/instr/fm/organ_m1.gsx",$2478,$20
(1)  115/  90EDF0 :                     ; ; ; FmIns_Bass_Beach:
(1)  116/  90EDF0 :                     ; ; ; 		binclude "sound/instr/fm/bass_beach.gsx",$2478,$20
(1)  117/  90EDF0 :                     ; ; ; FmIns_Bass_Beach_2:
(1)  118/  90EDF0 :                     ; ; ; 		binclude "sound/instr/fm/bass_beach_2.gsx",$2478,$20
(1)  119/  90EDF0 :                     ; ; ; FmIns_Brass_Cave:
(1)  120/  90EDF0 :                     ; ; ; 		binclude "sound/instr/fm/brass_cave.gsx",$2478,$20
(1)  121/  90EDF0 :                     ; ; FmIns_Brass_Gem:
(1)  122/  90EDF0 :                     ; ; 		binclude "sound/instr/fm/brass_gem.gsx",$2478,$20
(1)  123/  90EDF0 :                     ; ; FmIns_Piano_Small:
(1)  124/  90EDF0 :                     ; ; 		binclude "sound/instr/fm/piano_small.gsx",$2478,$20
(1)  125/  90EDF0 :                     FmIns_Piano_Aqua:
(1)  126/  90EDF0 :                     		binclude "sound/instr/fm/piano_aqua.gsx",$2478,$20
(1)  127/  90EE10 :                     
(1)  128/  90EE10 :                     FmIns_Trumpet_1:
(1)  129/  90EE10 :                     		binclude "sound/instr/fm/trumpet_1.gsx",$2478,$20
(1)  130/  90EE30 :                     FmIns_Trumpet_2:
(1)  131/  90EE30 :                     		binclude "sound/instr/fm/trumpet_2.gsx",$2478,$20
(1)  132/  90EE50 :                     FmIns_Trumpet_kon:
(1)  133/  90EE50 :                     		binclude "sound/instr/fm/trumpet_kon.gsx",$2478,$20
(1)  134/  90EE70 :                     ; FmIns_Trumpet_puy:
(1)  135/  90EE70 :                     ; 		binclude "sound/instr/fm/trumpet_puy.gsx",$2478,$20
(1)  136/  90EE70 :                     FmIns_Trumpet_carnival:
(1)  137/  90EE70 :                     		binclude "sound/instr/fm/trumpet_carnivl.gsx",$2478,$20
(1)  138/  90EE90 :                     
(1)  139/  90EE90 :                     ; FmIns_Bell_Glass:
(1)  140/  90EE90 :                     ; 		binclude "sound/instr/fm/bell_glass.gsx",$2478,$20
(1)  141/  90EE90 :                     FmIns_Marimba:
(1)  142/  90EE90 :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)  143/  90EEB0 :                     
(1)  144/  90EEB0 :                     FmIns_Ambient_dark:
(1)  145/  90EEB0 :                     		binclude "sound/instr/fm/ambient_dark.gsx",$2478,$20
(1)  146/  90EED0 :                     FmIns_Ambient_spook:
(1)  147/  90EED0 :                     		binclude "sound/instr/fm/ambient_spook.gsx",$2478,$20
(1)  148/  90EEF0 :                     FmIns_Ambient_3:
(1)  149/  90EEF0 :                     		binclude "sound/instr/fm/ambient_3.gsx",$2478,$20
(1)  150/  90EF10 :                     FmIns_Ding_toy:
(1)  151/  90EF10 :                     		binclude "sound/instr/fm/ding_toy.gsx",$2478,$20
(1)  152/  90EF30 :                     ; FmIns_Bell_China:
(1)  153/  90EF30 :                     ; 		binclude "sound/instr/fm/bell_china.gsx",$2478,$20
(1)  154/  90EF30 :                     FmIns_Brass_Eur:
(1)  155/  90EF30 :                     		binclude "sound/instr/fm/brass_eur.gsx",$2478,$20
(1)  156/  90EF50 :                     FmIns_Brass_Puy:
(1)  157/  90EF50 :                     		binclude "sound/instr/fm/brass_puy.gsx",$2478,$20
(1)  158/  90EF70 :                     FmIns_Flaute_cave:
(1)  159/  90EF70 :                     		binclude "sound/instr/fm/flaute_cave.gsx",$2478,$20
(1)  160/  90EF90 :                     FmIns_Banjo_puy:
(1)  161/  90EF90 :                     		binclude "sound/instr/fm/banjo_puy.gsx",$2478,$20
(1)  162/  90EFB0 :                     ; FmIns_Violin_gem:
(1)  163/  90EFB0 :                     ; 		binclude "sound/instr/fm/violin_gem.gsx",$2478,$20
(1)  164/  90EFB0 :                     
(1)  165/  90EFB0 :                     FmIns_PSynth_plus:
(1)  166/  90EFB0 :                     		binclude "sound/instr/fm/psynth_plus.gsx",$2478,$20
(1)  167/  90EFD0 :                     FmIns_Ding_1:
(1)  168/  90EFD0 :                     		binclude "sound/instr/fm/ding_1.gsx",$2478,$20
(1)  169/  90EFF0 :                     FmIns_Trombone_gem:
(1)  170/  90EFF0 :                     		binclude "sound/instr/fm/trombone_gem.gsx",$2478,$20
(1)  171/  90F010 :                     
      61/  90F010 :                     		include "sound/smpl_dac.asm"
(1)    1/  90F010 :                     ; ====================================================================
(1)    2/  90F010 :                     ; DAC samples
(1)    3/  90F010 :                     ;
(1)    4/  90F010 :                     ; This must be located at the 900000 area.
(1)    5/  90F010 :                     ; ====================================================================
(1)    6/  90F010 :                     
(1)    7/  90F010 :                     ; Special sample data macro
(1)    8/  90F010 :                     gSmpl macro locate,loop
(1)    9/  90F010 :                     .start
(1)   10/  90F010 :                     	dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)	; length
(1)   11/  90F010 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   12/  90F010 :                     	binclude locate,$2C	; actual data
(1)   13/  90F010 :                     .end
(1)   14/  90F010 :                     	endm
(1)   15/  90F010 :                     	align $8000
(1)   16/  910000 :                     ; DacIns_Test:
(1)   17/  910000 :                     ; 	gSmpl "sound/instr/smpl/baila.wav",0
(1)   18/  910000 :                     DacIns_wegot_kick:
(1)   19/  910000 : (MACRO)             	gSmpl "sound/instr/smpl/wegot_kick.wav",0
(1)   19/  910000 :                     .start
(1)   19/  910000 : 7A07 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   19/  910003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   19/  910006 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C     ; actual data
(1)   19/  91077A :                     .end
(1)   20/  91077A :                     DacIns_wegot_crash:
(1)   21/  91077A : (MACRO)             	gSmpl "sound/instr/smpl/wegot_crash.wav",0
(1)   21/  91077A :                     .start
(1)   21/  91077A : CA2C 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   21/  91077D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/  910780 :                             binclude "sound/instr/smpl/wegot_crash.wav",$2C     ; actual data
(1)   21/  913444 :                     .end
(1)   22/  913444 :                     DacIns_snare_lobo:
(1)   23/  913444 : (MACRO)             	gSmpl "sound/instr/smpl/snare_lobo.wav",0
(1)   23/  913444 :                     .start
(1)   23/  913444 : 2A11 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   23/  913447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   23/  91344A :                             binclude "sound/instr/smpl/snare_lobo.wav",$2C     ; actual data
(1)   23/  91456E :                     .end
(1)   24/  91456E :                     DacIns_snare_magn:
(1)   25/  91456E : (MACRO)             	gSmpl "sound/instr/smpl/snare_magn.wav",0
(1)   25/  91456E :                     .start
(1)   25/  91456E : DA13 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   25/  914571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/  914574 :                             binclude "sound/instr/smpl/snare_magn.wav",$2C     ; actual data
(1)   25/  915948 :                     .end
(1)   26/  915948 :                     DacIns_kick:
(1)   27/  915948 : (MACRO)             	gSmpl "sound/instr/smpl/stKick.wav",0
(1)   27/  915948 :                     .start
(1)   27/  915948 : EE0F 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(1)   27/  91594B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   27/  91594E :                             binclude "sound/instr/smpl/stKick.wav",$2C     ; actual data
(1)   27/  916936 :                     .end
(1)   28/  916936 :                     
      62/  916936 :                     		include "data/md_bank0.asm"
(1)    1/  916936 :                     ; ====================================================================
(1)    2/  916936 :                     ; ----------------------------------------------------------------
(1)    3/  916936 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/  916936 :                     ; for big stuff like maps, levels, etc.
(1)    5/  916936 :                     ;
(1)    6/  916936 :                     ; For graphics use DMA and place your files at
(1)    7/  916936 :                     ; md_dma.asm (Watch out for the $20000-section limit.)
(1)    8/  916936 :                     ;
(1)    9/  916936 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/  916936 :                     ; ----------------------------------------------------------------
(1)   11/  916936 :                     
(1)   12/  916936 :                     		include "data/mars/palettes.asm"	; All 32X palettes will be here.
(2)    1/  916936 :                     ; ====================================================================
(2)    2/  916936 :                     ; ----------------------------------------------------------------
(2)    3/  916936 :                     ; Put your 32X palettes here
(2)    4/  916936 :                     ;
(2)    5/  916936 :                     ; These are located on a single 68K $900000+ bank
(2)    6/  916936 :                     ;
(2)    7/  916936 :                     ; Labels MUST be aligned by 2
(2)    8/  916936 :                     ; ----------------------------------------------------------------
(2)    9/  916936 :                     
(2)   10/  916936 :                     		align 2
(2)   11/  916936 :                     PalData_Mars_Test:
(2)   12/  916936 :                     		binclude "data/mars/tests/test_pal.bin"
(2)   13/  916A36 :                     		binclude "data/mars/tests/sprites/sprites_pal.bin"
(2)   14/  916A6A :                     		align 2
(2)   15/  916A6A :                     PalData_Mars_Test2:
(2)   16/  916A6A :                     		binclude "data/mars/tests/test2_pal.bin"
(2)   17/  916C6A :                     		align 2
(2)   18/  916C6A :                     MDLDATA_PAL_TEST:
(2)   19/  916C6A :                     		binclude "data/mars/objects/mtrl/yui_pal.bin"
(2)   20/  916E6A :                     		align 2
(2)   21/  916E6A :                     
(1)   13/  916E6A :                     
(1)   14/  916E6A :                     ; MAP_FGTEST:	binclude "data/md/bg/fg_map.bin"
(1)   15/  916E6A :                     ; 		align 2
(1)   16/  916E6A :                     ; MAP_BGTEST:	binclude "data/md/bg/bg_map.bin"
(1)   17/  916E6A :                     ; 		align 2
(1)   18/  916E6A :                     
      63/  916E6A :                     MDBNK0_END:
      64/   16E6A :                     		dephase
      65/   16E6A :                     ; 		org $100000-4			; Fill this bank and
      66/   16E6A :                     ; 		dc.b "BNK0"			; add a tag at the end
      67/   16E6A :                     
      72/   16E6A :                     
      73/   16E6A :                     ; ---------------------------------------------
      74/   16E6A :                     ; BANK 1
      75/   16E6A :                     ; ---------------------------------------------
      76/   16E6A :                     
      77/   16E6A :                     ; 		phase $900000
      78/   16E6A :                     ; 		include "data/md_bank1.asm"
      79/   16E6A :                     ; 		dephase
      80/   16E6A :                     ; 		org $200000-4
      81/   16E6A :                     ; 		dc.b "BNK1"
      82/   16E6A :                     
      83/   16E6A :                     ; ---------------------------------------------
      84/   16E6A :                     ; BANK 2
      85/   16E6A :                     ; ---------------------------------------------
      86/   16E6A :                     
      87/   16E6A :                     ; 		phase $900000
      88/   16E6A :                     ; 		include "data/md_bank2.asm"
      89/   16E6A :                     ; 		dephase
      90/   16E6A :                     ; 		org $300000-4
      91/   16E6A :                     ; 		dc.b "BNK2"
      92/   16E6A :                     
      93/   16E6A :                     ; ---------------------------------------------
      94/   16E6A :                     ; BANK 3
      95/   16E6A :                     ; ---------------------------------------------
      96/   16E6A :                     
      97/   16E6A :                     ; 		phase $900000
      98/   16E6A :                     ; 		include "data/md_bank3.asm"
      99/   16E6A :                     ; 		dephase
     100/   16E6A :                     ; 		org $400000-4
     101/   16E6A :                     ; 		dc.b "BNK3"
     102/   16E6A :                     
     103/   16E6A :                     ; ====================================================================
     104/   16E6A :                     ; ----------------------------------------------------------------
     105/   16E6A :                     ; MD DMA data: BANK-free but requres RV=1
     106/   16E6A :                     ; ----------------------------------------------------------------
     107/   16E6A :                     
     108/   16E6A :                     		align 4
     109/   16E6C :                     		include "data/md_dma.asm"
(1)    1/   16E6C :                     ; ====================================================================
(1)    2/   16E6C :                     ; ----------------------------------------------------------------
(1)    3/   16E6C :                     ; DMA ROM DATA Transfer section
(1)    4/   16E6C :                     ; 
(1)    5/   16E6C :                     ; RV bit must be enabled to read from here
(1)    6/   16E6C :                     ; ----------------------------------------------------------------
(1)    7/   16E6C :                     
(1)    8/   16E6C :                     		align 2
(1)    9/   16E6C :                     
(1)   10/   16E6C :                     		align $8000
(1)   11/   18000 :                     ART_EMI:	binclude "data/md/sprites/emi_art.bin"
(1)   12/   1AB80 :                     ART_EMI_e:
(1)   13/   1AB80 :                     ; ART_TestMap:	binclude "data/md/bg/test_art.bin"
(1)   14/   1AB80 :                     ; ART_TestMap_e:
(1)   15/   1AB80 :                     
(1)   16/   1AB80 :                     		align $8000
(1)   17/   20000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   18/   21000 :                     ASCII_FONT_e:
(1)   19/   21000 :                     
(1)   20/   21000 :                     ART_FGTEST:	binclude "data/md/bg/fg_art.bin"
(1)   21/   23280 :                     ART_FGTEST_e:
(1)   22/   23280 :                     ART_BGTEST:	binclude "data/md/bg/bg_art.bin"
(1)   23/   263C0 :                     ART_BGTEST_e:
(1)   24/   263C0 :                     
(1)   25/   263C0 :                     
(1)   26/   263C0 :                     
     110/   263C0 :                     
     111/   263C0 :                     ; ====================================================================
     112/   263C0 :                     ; ----------------------------------------------------------------
     113/   263C0 :                     ; SH2 RAM CODE
     114/   263C0 :                     ; ----------------------------------------------------------------
     115/   263C0 :                     
     116/   263C0 :                     		align 4
     117/   263C0 :                     MARS_RAMDATA:
     118/   263C0 :                     		include "system/mars/code.asm"
(1)    1/   263C0 :                     ; ====================================================================
(1)    2/   263C0 :                     ; ----------------------------------------------------------------
(1)    3/   263C0 :                     ; MARS SH2 CODE section, stored on SDRAM
(1)    4/   263C0 :                     ;
(1)    5/   263C0 :                     ; CODE for both CPUs
(1)    6/   263C0 :                     ; RAM and some DATA also goes here
(1)    7/   263C0 :                     ; ----------------------------------------------------------------
(1)    8/   263C0 :                     
(1)    9/   263C0 :                     ; *************************************************
(1)   10/   263C0 :                     ; communication setup:
(1)   11/   263C0 :                     ;
(1)   12/   263C0 :                     ; comm0-comm7  - ** FREE to use ***
(1)   13/   263C0 :                     ; comm8-comm11 - Used to transfer data manually
(1)   14/   263C0 :                     ;                from Z80 to SH2 side, 68K uses DREQ.
(1)   15/   263C0 :                     ; comm12       - Master CPU control
(1)   16/   263C0 :                     ; comm14       - Slave CPU control
(1)   17/   263C0 :                     ; *************************************************
(1)   18/   263C0 :                     
(1)   19/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   20/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   21/ 6000000 :                     
(1)   22/ 6000000 :                     ; ====================================================================
(1)   23/ 6000000 :                     ; ----------------------------------------------------------------
(1)   24/ 6000000 :                     ; Settings
(1)   25/ 6000000 :                     ; ----------------------------------------------------------------
(1)   26/ 6000000 :                     
(1)   27/ 6000000 : =$0                 SH2_DEBUG		equ 0	; Set to 1 too see if CPUs are active using comm counters (0 and 1)
(1)   28/ 6000000 :                     
(1)   29/ 6000000 :                     ; ====================================================================
(1)   30/ 6000000 :                     ; ----------------------------------------------------------------
(1)   31/ 6000000 :                     ; MARS GLOBAL gbr variables for both SH2
(1)   32/ 6000000 :                     ; ----------------------------------------------------------------
(1)   33/ 6000000 :                     
(1)   34/ 6000000 : (MACRO)             			struct 0
(1)   34/ 6000000 : =$6000000           GLBL_LASTPC     set *
(1)   34/   263C0 :                                     dephase
(1)   34/   263C0 : =$263C0             GLBL_LASTORG    set *
(1)   34/       0 :                                     phase 0
(1)   35/       0 :                     marsGbl_PlyPzList_R	ds.l 1	; Current graphic piece to draw
(1)   36/       4 :                     marsGbl_PlyPzList_W	ds.l 1	; Current graphic piece to write
(1)   37/       8 :                     marsGbl_PlyPzList_Start	ds.l 1	; Polygon pieces list Start point
(1)   38/       C :                     marsGbl_PlyPzList_End	ds.l 1	; Polygon pieces list End point
(1)   39/      10 :                     marsGbl_CurrRdSpr	ds.l 1	; Current sprite to process
(1)   40/      14 :                     marsGbl_CurrRdPlgn	ds.l 1	; Current polygon to slice
(1)   41/      18 :                     marsGbl_CurrZList	ds.l 1	; Current Zsort entry
(1)   42/      1C :                     marsGbl_CurrZTop	ds.l 1	; Current Zsort list
(1)   43/      20 :                     marsGbl_CurrFacePos	ds.l 1	; Current top face of the list while reading model data
(1)   44/      24 :                     marsGbl_CurrNumFaces	ds.w 1	; and the number of faces stored on that list
(1)   45/      26 :                     marsGbl_WdgBusy		ds.w 1
(1)   46/      28 :                     marsGbl_WdgStatus	ds.w 1	; Watchdog exit status
(1)   47/      2A :                     marsGbl_PolyBuffNum	ds.w 1	; Polygon-list swap number
(1)   48/      2C :                     marsGbl_PlyPzCntr	ds.w 1	; Number of graphic pieces to draw
(1)   49/      2E :                     marsGbl_CntrRdPlgn	ds.w 1	; Number of polygons to slice
(1)   50/      30 :                     marsGbl_CntrRdSpr	ds.w 1	; Number of sprites to read
(1)   51/      32 :                     
(1)   52/      32 :                     marsGbl_XShift		ds.w 1	; Xshift bit at the start of master_loop (TODO: maybe a HBlank list?)
(1)   53/      34 :                     marsGbl_RomBlkM		ds.w 1	; Flag to report that MASTER is reading from ROM area
(1)   54/      36 :                     marsGbl_RomBlkS		ds.w 1	; Flag to report that SLAVE is reading from ROM area
(1)   55/      38 :                     marsGbl_MdInitTmr	ds.w 1	; Redraw counter (Write $02)
(1)   56/      3A :                     marsGbl_BgDrwR		ds.w 1	; Write 2 to redraw these offscreen sections
(1)   57/      3C :                     marsGbl_BgDrwL		ds.w 1	; ***
(1)   58/      3E :                     marsGbl_BgDrwU		ds.w 1	; ***
(1)   59/      40 :                     marsGbl_BgDrwD		ds.w 1	; ***
(1)   60/      42 :                     marsGbl_WaveEnable	ds.w 1	; General linetable wave effect: Disable/Enable
(1)   61/      44 :                     marsGbl_WaveSpd		ds.w 1	; Linetable wave speed
(1)   62/      46 :                     marsGbl_WaveMax		ds.w 1	; Maximum wave
(1)   63/      48 :                     marsGbl_WaveDeform	ds.w 1	; Wave increment value
(1)   64/      4A :                     marsGbl_WaveTan		ds.w 1	; Linetable wave tan
(1)   65/      4C :                     sizeof_MarsGbl		ds.l 0
(1)   66/      4C : (MACRO)             			finish
(1)   66/       0 :                                     !org GLBL_LASTORG
(1)   66/ 6000000 :                                     phase GLBL_LASTPC
(1)   67/ 6000000 :                     
(1)   68/ 6000000 :                     ; ====================================================================
(1)   69/ 6000000 :                     ; ----------------------------------------------------------------
(1)   70/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   71/ 6000000 :                     ; ----------------------------------------------------------------
(1)   72/ 6000000 :                     
(1)   73/ 6000000 :                     		align 4
(1)   74/ 6000000 :                     SH2_Master:
(1)   75/ 6000000 : 0600 11B0 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Power PC, Stack
(1)   76/ 6000008 : 0600 11B0 0604 0000 		dc.l SH2_M_Entry,CS3|$40000	; Reset PC, Stack
(1)   77/ 6000010 : 0600 0314           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   78/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   79/ 6000018 : 0600 0318           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   80/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   81/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   82/ 6000024 : 0600 031C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   83/ 6000028 : 0600 0320           		dc.l SH2_M_ErrDma		; DMA address error
(1)   84/ 600002C : 0600 0324           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   85/ 6000030 : 0600 0328           		dc.l SH2_M_ErrUser		; User break vector
(1)   86/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   87/ 6000058 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   88/ 600007C : 0000 0000           		dc.l 0
(1)   89/ 6000080 : 0600 0310           		dc.l SH2_M_Error		; Trap user vectors
(1)   90/ 6000084 : 0600 0310           		dc.l SH2_M_Error
(1)   91/ 6000088 : 0600 0310           		dc.l SH2_M_Error
(1)   92/ 600008C : 0600 0310           		dc.l SH2_M_Error
(1)   93/ 6000090 : 0600 0310           		dc.l SH2_M_Error
(1)   94/ 6000094 : 0600 0310           		dc.l SH2_M_Error
(1)   95/ 6000098 : 0600 0310           		dc.l SH2_M_Error
(1)   96/ 600009C : 0600 0310           		dc.l SH2_M_Error
(1)   97/ 60000A0 : 0600 0310           		dc.l SH2_M_Error
(1)   98/ 60000A4 : 0600 0310           		dc.l SH2_M_Error
(1)   99/ 60000A8 : 0600 0310           		dc.l SH2_M_Error
(1)  100/ 60000AC : 0600 0310           		dc.l SH2_M_Error
(1)  101/ 60000B0 : 0600 0310           		dc.l SH2_M_Error
(1)  102/ 60000B4 : 0600 0310           		dc.l SH2_M_Error
(1)  103/ 60000B8 : 0600 0310           		dc.l SH2_M_Error
(1)  104/ 60000BC : 0600 0310           		dc.l SH2_M_Error
(1)  105/ 60000C0 : 0600 0310           		dc.l SH2_M_Error
(1)  106/ 60000C4 : 0600 0310           		dc.l SH2_M_Error
(1)  107/ 60000C8 : 0600 0310           		dc.l SH2_M_Error
(1)  108/ 60000CC : 0600 0310           		dc.l SH2_M_Error
(1)  109/ 60000D0 : 0600 0310           		dc.l SH2_M_Error
(1)  110/ 60000D4 : 0600 0310           		dc.l SH2_M_Error
(1)  111/ 60000D8 : 0600 0310           		dc.l SH2_M_Error
(1)  112/ 60000DC : 0600 0310           		dc.l SH2_M_Error
(1)  113/ 60000E0 : 0600 0310           		dc.l SH2_M_Error
(1)  114/ 60000E4 : 0600 0310           		dc.l SH2_M_Error
(1)  115/ 60000E8 : 0600 0310           		dc.l SH2_M_Error
(1)  116/ 60000EC : 0600 0310           		dc.l SH2_M_Error
(1)  117/ 60000F0 : 0600 0310           		dc.l SH2_M_Error
(1)  118/ 60000F4 : 0600 0310           		dc.l SH2_M_Error
(1)  119/ 60000F8 : 0600 0310           		dc.l SH2_M_Error
(1)  120/ 60000FC : 0600 0310           		dc.l SH2_M_Error
(1)  121/ 6000100 : 0600 0248            		dc.l master_irq		; Level 1 IRQ
(1)  122/ 6000104 : 0600 0248           		dc.l master_irq		; Level 2 & 3 IRQ
(1)  123/ 6000108 : 0600 0248           		dc.l master_irq		; Level 4 & 5 IRQ
(1)  124/ 600010C : 0600 0248           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  125/ 6000110 : 0600 0248           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  126/ 6000114 : 0600 0248           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  127/ 6000118 : 0600 0248           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  128/ 600011C : 0600 0248           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  129/ 6000120 :                     	; ON-chip interrupts go here (vbr+$120)
(1)  130/ 6000120 : 0600 0248           		dc.l master_irq		; Watchdog (custom)
(1)  131/ 6000124 :                     
(1)  132/ 6000124 :                     ; ====================================================================
(1)  133/ 6000124 :                     ; ----------------------------------------------------------------
(1)  134/ 6000124 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  135/ 6000124 :                     ; ----------------------------------------------------------------
(1)  136/ 6000124 :                     
(1)  137/ 6000124 :                     		align 4
(1)  138/ 6000124 :                     SH2_Slave:
(1)  139/ 6000124 : 0600 172C 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Cold PC,SP
(1)  140/ 600012C : 0600 172C 0603 F000 		dc.l SH2_S_Entry,CS3|$3F000	; Manual PC,SP
(1)  141/ 6000134 : 0600 0340           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  142/ 6000138 : 0000 0000           		dc.l 0				; reserved
(1)  143/ 600013C : 0600 0344           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  144/ 6000140 : 2010 0400           		dc.l $20100400			; reserved
(1)  145/ 6000144 : 2010 0420           		dc.l $20100420			; reserved
(1)  146/ 6000148 : 0600 0348           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  147/ 600014C : 0600 034C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  148/ 6000150 : 0600 0350           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  149/ 6000154 : 0600 0354           		dc.l SH2_S_ErrUser		; User break vector
(1)  150/ 6000158 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  151/ 600017C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  152/ 60001A0 : 0000 0000           		dc.l 0
(1)  153/ 60001A4 : 0600 033C           		dc.l SH2_S_Error		; Trap user vectors
(1)  154/ 60001A8 : 0600 033C           		dc.l SH2_S_Error
(1)  155/ 60001AC : 0600 033C           		dc.l SH2_S_Error
(1)  156/ 60001B0 : 0600 033C           		dc.l SH2_S_Error
(1)  157/ 60001B4 : 0600 033C           		dc.l SH2_S_Error
(1)  158/ 60001B8 : 0600 033C           		dc.l SH2_S_Error
(1)  159/ 60001BC : 0600 033C           		dc.l SH2_S_Error
(1)  160/ 60001C0 : 0600 033C           		dc.l SH2_S_Error
(1)  161/ 60001C4 : 0600 033C           		dc.l SH2_S_Error
(1)  162/ 60001C8 : 0600 033C           		dc.l SH2_S_Error
(1)  163/ 60001CC : 0600 033C           		dc.l SH2_S_Error
(1)  164/ 60001D0 : 0600 033C           		dc.l SH2_S_Error
(1)  165/ 60001D4 : 0600 033C           		dc.l SH2_S_Error
(1)  166/ 60001D8 : 0600 033C           		dc.l SH2_S_Error
(1)  167/ 60001DC : 0600 033C           		dc.l SH2_S_Error
(1)  168/ 60001E0 : 0600 033C           		dc.l SH2_S_Error
(1)  169/ 60001E4 : 0600 033C           		dc.l SH2_S_Error
(1)  170/ 60001E8 : 0600 033C           		dc.l SH2_S_Error
(1)  171/ 60001EC : 0600 033C           		dc.l SH2_S_Error
(1)  172/ 60001F0 : 0600 033C           		dc.l SH2_S_Error
(1)  173/ 60001F4 : 0600 033C           		dc.l SH2_S_Error
(1)  174/ 60001F8 : 0600 033C           		dc.l SH2_S_Error
(1)  175/ 60001FC : 0600 033C           		dc.l SH2_S_Error
(1)  176/ 6000200 : 0600 033C           		dc.l SH2_S_Error
(1)  177/ 6000204 : 0600 033C           		dc.l SH2_S_Error
(1)  178/ 6000208 : 0600 033C           		dc.l SH2_S_Error
(1)  179/ 600020C : 0600 033C           		dc.l SH2_S_Error
(1)  180/ 6000210 : 0600 033C           		dc.l SH2_S_Error
(1)  181/ 6000214 : 0600 033C           		dc.l SH2_S_Error
(1)  182/ 6000218 : 0600 033C           		dc.l SH2_S_Error
(1)  183/ 600021C : 0600 033C           		dc.l SH2_S_Error
(1)  184/ 6000220 : 0600 033C           		dc.l SH2_S_Error
(1)  185/ 6000224 : 0600 0268            		dc.l slave_irq			; Level 1 IRQ
(1)  186/ 6000228 : 0600 0268           		dc.l slave_irq			; Level 2 & 3 IRQ
(1)  187/ 600022C : 0600 0268           		dc.l slave_irq			; Level 4 & 5 IRQ
(1)  188/ 6000230 : 0600 0268           		dc.l slave_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  189/ 6000234 : 0600 0268           		dc.l slave_irq			; Level 8 & 9 IRQ: Command interupt
(1)  190/ 6000238 : 0600 0268           		dc.l slave_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  191/ 600023C : 0600 0268           		dc.l slave_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  192/ 6000240 : 0600 0268           		dc.l slave_irq			; Level 14 & 15 IRQ: Reset Button
(1)  193/ 6000244 :                     	; ON-chip interrupts go here (vbr+$120)
(1)  194/ 6000244 : 0600 0268           		dc.l slave_irq			; Watchdog (custom)
(1)  195/ 6000248 :                     
(1)  196/ 6000248 :                     ; ====================================================================
(1)  197/ 6000248 :                     ; ----------------------------------------------------------------
(1)  198/ 6000248 :                     ; IRQ
(1)  199/ 6000248 :                     ;
(1)  200/ 6000248 :                     ; r0-r1 are saved first.
(1)  201/ 6000248 :                     ; ----------------------------------------------------------------
(1)  202/ 6000248 :                     
(1)  203/ 6000248 :                     		align 4
(1)  204/ 6000248 :                     master_irq:
(1)  205/ 6000248 : 2F06                		mov.l	r0,@-r15
(1)  206/ 600024A : 2F16                		mov.l	r1,@-r15
(1)  207/ 600024C : 4F22                		sts.l	pr,@-r15
(1)  208/ 600024E : 0002                		stc	sr,r0
(1)  209/ 6000250 : 4009                		shlr2	r0
(1)  210/ 6000252 : C93C                		and	#$3C,r0
(1)  211/ 6000254 : D10C                		mov	#int_m_list,r1
(1)  212/ 6000256 : 301C                		add	r1,r0
(1)  213/ 6000258 : 6102                		mov	@r0,r1
(1)  214/ 600025A : 410B                		jsr	@r1
(1)  215/ 600025C : 0009                		nop
(1)  216/ 600025E : 4F26                		lds.l	@r15+,pr
(1)  217/ 6000260 : 61F6                		mov.l	@r15+,r1
(1)  218/ 6000262 : 60F6                		mov.l	@r15+,r0
(1)  219/ 6000264 : 002B                		rte
(1)  220/ 6000266 : 0009                		nop
(1)  221/ 6000268 :                     		align 4
(1)  222/ 6000268 :                     
(1)  223/ 6000268 :                     ; ====================================================================
(1)  224/ 6000268 :                     ; ----------------------------------------------------------------
(1)  225/ 6000268 :                     ; IRQ
(1)  226/ 6000268 :                     ;
(1)  227/ 6000268 :                     ; r0-r1 are saved first
(1)  228/ 6000268 :                     ; ----------------------------------------------------------------
(1)  229/ 6000268 :                     
(1)  230/ 6000268 :                     slave_irq:
(1)  231/ 6000268 : 2F06                		mov.l	r0,@-r15
(1)  232/ 600026A : 2F16                		mov.l	r1,@-r15
(1)  233/ 600026C : 4F22                		sts.l	pr,@-r15
(1)  234/ 600026E : 0002                		stc	sr,r0
(1)  235/ 6000270 : 4009                		shlr2	r0
(1)  236/ 6000272 : C93C                		and	#$3C,r0
(1)  237/ 6000274 : D105                		mov	#int_s_list,r1
(1)  238/ 6000276 : 301C                		add	r1,r0
(1)  239/ 6000278 : 6102                		mov	@r0,r1
(1)  240/ 600027A : 410B                		jsr	@r1
(1)  241/ 600027C : 0009                		nop
(1)  242/ 600027E : 4F26                		lds.l	@r15+,pr
(1)  243/ 6000280 : 61F6                		mov.l	@r15+,r1
(1)  244/ 6000282 : 60F6                		mov.l	@r15+,r0
(1)  245/ 6000284 : 002B                		rte
(1)  246/ 6000286 : 0009                		nop
(1)  247/ 6000288 :                     		align 4
(1)  248/ 6000288 : 0600 0290 0600 02D0 		ltorg
(1)  249/ 6000290 :                     
(1)  250/ 6000290 :                     ; ------------------------------------------------
(1)  251/ 6000290 :                     ; irq list
(1)  252/ 6000290 :                     ; ------------------------------------------------
(1)  253/ 6000290 :                     
(1)  254/ 6000290 :                     		align 4
(1)  255/ 6000290 :                     int_m_list:
(1)  256/ 6000290 : 0600 0380 0600 0380 		dc.l m_irq_bad,m_irq_bad
(1)  257/ 6000298 : 0600 0380 0600 0380 		dc.l m_irq_bad,m_irq_bad
(1)  258/ 60002A0 : C000 0000 C000 0000 		dc.l $C0000000,$C0000000	; <-- TOP code on Cache
(1)  259/ 60002A8 : 0600 0384 0600 0384 		dc.l m_irq_pwm,m_irq_pwm
(1)  260/ 60002B0 : 0600 03A0 0600 03A0 		dc.l m_irq_cmd,m_irq_cmd
(1)  261/ 60002B8 : 0600 03F4 0600 03F4 		dc.l m_irq_h,m_irq_h
(1)  262/ 60002C0 : 0600 0410 0600 0410 		dc.l m_irq_v,m_irq_v
(1)  263/ 60002C8 : 0600 042C 0600 042C 		dc.l m_irq_vres,m_irq_vres
(1)  264/ 60002D0 :                     int_s_list:
(1)  265/ 60002D0 : 0600 04B0 0600 04B0 		dc.l s_irq_bad,s_irq_bad
(1)  266/ 60002D8 : 0600 04B0 0600 04B0 		dc.l s_irq_bad,s_irq_bad
(1)  267/ 60002E0 : 0600 077A 0600 077A 		dc.l s_irq_wdg,s_irq_wdg
(1)  268/ 60002E8 : C000 0000 C000 0000 		dc.l s_irq_pwm,s_irq_pwm
(1)  269/ 60002F0 : 0600 04B4 0600 04B4 		dc.l s_irq_cmd,s_irq_cmd
(1)  270/ 60002F8 : 0600 06D8 0600 06D8 		dc.l s_irq_h,s_irq_h
(1)  271/ 6000300 : 0600 06F8 0600 06F8 		dc.l s_irq_v,s_irq_v
(1)  272/ 6000308 : 0600 0718 0600 0718 		dc.l s_irq_vres,s_irq_vres
(1)  273/ 6000310 :                     
(1)  274/ 6000310 :                     ; ====================================================================
(1)  275/ 6000310 :                     ; ----------------------------------------------------------------
(1)  276/ 6000310 :                     ; Error handler
(1)  277/ 6000310 :                     ; ----------------------------------------------------------------
(1)  278/ 6000310 :                     
(1)  279/ 6000310 :                     ; *** Only works on HARDWARE ***
(1)  280/ 6000310 :                     ;
(1)  281/ 6000310 :                     ; comm2: (CPU)(CODE)
(1)  282/ 6000310 :                     ; comm4: Last program counter
(1)  283/ 6000310 :                     ;
(1)  284/ 6000310 :                     ;  CPU | SH2 who got the error:
(1)  285/ 6000310 :                     ;        $00 - Master
(1)  286/ 6000310 :                     ;        $01 - Slave
(1)  287/ 6000310 :                     ;
(1)  288/ 6000310 :                     ; CODE | Error type:
(1)  289/ 6000310 :                     ;	 -1: Unknown error
(1)  290/ 6000310 :                     ;	 $01: Illegal instruction
(1)  291/ 6000310 :                     ;	 $02: Invalid slot instruction
(1)  292/ 6000310 :                     ;	 $03: Address error (most common if you don't align by 4)
(1)  293/ 6000310 :                     ;	 $04: DMA error
(1)  294/ 6000310 :                     ;	 $05: NMI vector
(1)  295/ 6000310 :                     ;	 $06: User break
(1)  296/ 6000310 :                     
(1)  297/ 6000310 :                     SH2_M_Error:
(1)  298/ 6000310 : A00C                		bra	SH2_M_ErrCode
(1)  299/ 6000312 : 9021                		mov	#$00FF,r0
(1)  300/ 6000314 :                     SH2_M_ErrIllg:
(1)  301/ 6000314 : A00A                		bra	SH2_M_ErrCode
(1)  302/ 6000316 : E001                		mov	#1,r0
(1)  303/ 6000318 :                     SH2_M_ErrInvl:
(1)  304/ 6000318 : A008                		bra	SH2_M_ErrCode
(1)  305/ 600031A : E002                		mov	#2,r0
(1)  306/ 600031C :                     SH2_M_ErrAddr:
(1)  307/ 600031C : A006                		bra	SH2_M_ErrCode
(1)  308/ 600031E : E003                		mov	#3,r0
(1)  309/ 6000320 :                     SH2_M_ErrDma:
(1)  310/ 6000320 : A004                		bra	SH2_M_ErrCode
(1)  311/ 6000322 : E004                		mov	#4,r0
(1)  312/ 6000324 :                     SH2_M_ErrNmi:
(1)  313/ 6000324 : A002                		bra	SH2_M_ErrCode
(1)  314/ 6000326 : E005                		mov	#5,r0
(1)  315/ 6000328 :                     SH2_M_ErrUser:
(1)  316/ 6000328 : A000                		bra	SH2_M_ErrCode
(1)  317/ 600032A : E006                		mov	#6,r0
(1)  318/ 600032C :                     ; r0 - value
(1)  319/ 600032C :                     SH2_M_ErrCode:
(1)  320/ 600032C : D10E                		mov	#_sysreg+comm2,r1
(1)  321/ 600032E : 2101                		mov.w	r0,@r1
(1)  322/ 6000330 : D10E                		mov	#_sysreg+comm4,r1
(1)  323/ 6000332 : 60F2                		mov	@r15,r0
(1)  324/ 6000334 : 2102                		mov	r0,@r1
(1)  325/ 6000336 : AFFE                		bra	*
(1)  326/ 6000338 : 0009                		nop
(1)  327/ 600033A :                     		align 4
(1)  328/ 600033C :                     
(1)  329/ 600033C :                     ; ----------------------------------------------------
(1)  330/ 600033C :                     
(1)  331/ 600033C :                     SH2_S_Error:
(1)  332/ 600033C : A00C                		bra	SH2_S_ErrCode
(1)  333/ 600033E : 900C                		mov	#$01FF,r0
(1)  334/ 6000340 :                     SH2_S_ErrIllg:
(1)  335/ 6000340 : A00A                		bra	SH2_S_ErrCode
(1)  336/ 6000342 : 900D                		mov	#$0101,r0
(1)  337/ 6000344 :                     SH2_S_ErrInvl:
(1)  338/ 6000344 : A008                		bra	SH2_S_ErrCode
(1)  339/ 6000346 : 900E                		mov	#$0102,r0
(1)  340/ 6000348 :                     SH2_S_ErrAddr:
(1)  341/ 6000348 : A006                		bra	SH2_S_ErrCode
(1)  342/ 600034A : 900F                		mov	#$0103,r0
(1)  343/ 600034C :                     SH2_S_ErrDma:
(1)  344/ 600034C : A004                		bra	SH2_S_ErrCode
(1)  345/ 600034E : 9010                		mov	#$0104,r0
(1)  346/ 6000350 :                     SH2_S_ErrNmi:
(1)  347/ 6000350 : A002                		bra	SH2_S_ErrCode
(1)  348/ 6000352 : 9011                		mov	#$0105,r0
(1)  349/ 6000354 :                     SH2_S_ErrUser:
(1)  350/ 6000354 : A000                		bra	SH2_S_ErrCode
(1)  351/ 6000356 : 9012                		mov	#$0106,r0
(1)  352/ 6000358 :                     ; r0 - value
(1)  353/ 6000358 :                     SH2_S_ErrCode:
(1)  354/ 6000358 : D103                		mov	#_sysreg+comm2,r1
(1)  355/ 600035A : 2101                		mov.w	r0,@r1
(1)  356/ 600035C : D103                		mov	#_sysreg+comm4,r1
(1)  357/ 600035E : 60F2                		mov	@r15,r0
(1)  358/ 6000360 : 2102                		mov	r0,@r1
(1)  359/ 6000362 : AFFE                		bra	*
(1)  360/ 6000364 : 0009                		nop
(1)  361/ 6000366 :                     		align 4
(1)  362/ 6000368 : 2000 4022 2000 4024 		ltorg
                    00FF 01FF 0101 0102 
                    0103 0104 0105 0106 
(1)  363/ 6000380 :                     
(1)  364/ 6000380 :                     ; ====================================================================
(1)  365/ 6000380 :                     ; ----------------------------------------------------------------
(1)  366/ 6000380 :                     ; MARS Interrupts
(1)  367/ 6000380 :                     ; ----------------------------------------------------------------
(1)  368/ 6000380 :                     
(1)  369/ 6000380 :                     ; =================================================================
(1)  370/ 6000380 :                     ; ------------------------------------------------
(1)  371/ 6000380 :                     ; Master | Unused interrupt
(1)  372/ 6000380 :                     ; ------------------------------------------------
(1)  373/ 6000380 :                     
(1)  374/ 6000380 :                     		align 4
(1)  375/ 6000380 :                     m_irq_bad:
(1)  376/ 6000380 : 000B                		rts
(1)  377/ 6000382 : 0009                		nop
(1)  378/ 6000384 :                     		align 4
(1)  379/ 6000384 :                     
(1)  380/ 6000384 :                     ; =================================================================
(1)  381/ 6000384 :                     ; ------------------------------------------------
(1)  382/ 6000384 :                     ; Master | PWM Interrupt
(1)  383/ 6000384 :                     ; ------------------------------------------------
(1)  384/ 6000384 :                     
(1)  385/ 6000384 :                     m_irq_pwm:
(1)  386/ 6000384 : 908E                		mov	#$F0,r0
(1)  387/ 6000386 : 400E                		ldc	r0,sr
(1)  388/ 6000388 : 918D                		mov	#_FRT,r1
(1)  389/ 600038A : 8417                		mov.b	@(7,r1),r0
(1)  390/ 600038C : CA02                		xor	#2,r0
(1)  391/ 600038E : 8017                		mov.b	r0,@(7,r1)
(1)  392/ 6000390 : D139                		mov	#_sysreg+pwmintclr,r1
(1)  393/ 6000392 : 2101                		mov.w	r0,@r1
(1)  394/ 6000394 : 0009                		nop
(1)  395/ 6000396 : 0009                		nop
(1)  396/ 6000398 : 0009                		nop
(1)  397/ 600039A : 0009                		nop
(1)  398/ 600039C : 000B                		rts
(1)  399/ 600039E : 0009                		nop
(1)  400/ 60003A0 :                     		align 4
(1)  401/ 60003A0 :                     
(1)  402/ 60003A0 :                     ; =================================================================
(1)  403/ 60003A0 :                     ; ------------------------------------------------
(1)  404/ 60003A0 :                     ; Master | CMD Interrupt
(1)  405/ 60003A0 :                     ; ------------------------------------------------
(1)  406/ 60003A0 :                     
(1)  407/ 60003A0 :                     m_irq_cmd:
(1)  408/ 60003A0 : 9080                		mov	#$F0,r0
(1)  409/ 60003A2 : 400E                		ldc	r0,sr
(1)  410/ 60003A4 : 917F                		mov	#_FRT,r1
(1)  411/ 60003A6 : 8417                		mov.b	@(7,r1),r0
(1)  412/ 60003A8 : CA02                		xor	#2,r0
(1)  413/ 60003AA : 8017                		mov.b	r0,@(7,r1)
(1)  414/ 60003AC : D133                		mov	#_sysreg+cmdintclr,r1
(1)  415/ 60003AE : 2101                		mov.w	r0,@r1
(1)  416/ 60003B0 :                     
(1)  417/ 60003B0 : 2F26                		mov	r2,@-r15
(1)  418/ 60003B2 : 2F36                		mov	r3,@-r15
(1)  419/ 60003B4 : 2F46                		mov	r4,@-r15
(1)  420/ 60003B6 : D432                		mov	#_sysreg,r4		; r4 - sysreg base
(1)  421/ 60003B8 : E380                		mov	#_DMASOURCE0,r3		; r3 - DMA base register
(1)  422/ 60003BA : D232                		mov	#_sysreg+comm12,r2	; r2 - comm to write the signal
(1)  423/ 60003BC : D132                		mov	#_sysreg+dreqfifo,r1	; r1 - Source point: DREQ FIFO
(1)  424/ 60003BE : D033                		mov	#RAM_Mars_DreqDma,r0
(1)  425/ 60003C0 : 2312                		mov	r1,@r3			; Source
(1)  426/ 60003C2 : 1301                		mov	r0,@(4,r3)		; Destination
(1)  427/ 60003C4 : 8548                		mov.w	@(dreqlen,r4),r0	; TODO: a check if this gets Zero'd
(1)  428/ 60003C6 : 600F                		exts.w	r0,r0
(1)  429/ 60003C8 : 1302                		mov	r0,@(8,r3)		; Length (set by 68k)
(1)  430/ 60003CA : 906D                		mov	#%0100010011100001,r0	; Transfer mode + DMA enable bit
(1)  431/ 60003CC : 1303                		mov	r0,@($C,r3)		; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  432/ 60003CE : E001                		mov	#1,r0			; _DMAOPERATION = 1
(1)  433/ 60003D0 : 130C                		mov	r0,@($30,r3)
(1)  434/ 60003D2 :                     
(1)  435/ 60003D2 :                     	; *** HARDWARE NOTE ***
(1)  436/ 60003D2 :                     	; DMA takes a little to start properly:
(1)  437/ 60003D2 :                     	; Put 5 instructions (ex. 5 nops) after
(1)  438/ 60003D2 :                     	; writing _DMAOPERATION = 1 in case
(1)  439/ 60003D2 :                     	; you need to manually check if it's
(1)  440/ 60003D2 :                     	; active or not.
(1)  441/ 60003D2 :                     	;
(1)  442/ 60003D2 :                     	; On Emulators it just starts right away.
(1)  443/ 60003D2 : 6020                		mov.b	@r2,r0			; Tell Genesis we are ready to
(1)  444/ 60003D4 : CB40                		or	#%01000000,r0		; recieve the data from DREQ
(1)  445/ 60003D6 : 2200                		mov.b	r0,@r2
(1)  446/ 60003D8 : 0009                		nop
(1)  447/ 60003DA : 0009                		nop
(1)  448/ 60003DC : 5033                .wait_dma:	mov	@($C,r3),r0			; Active?
(1)  449/ 60003DE : C802                		tst	#%10,r0
(1)  450/ 60003E0 : 89FC                		bt	.wait_dma
(1)  451/ 60003E2 : E000                		mov	#0,r0				; _DMAOPERATION = 0
(1)  452/ 60003E4 : 130C                		mov	r0,@($30,r3)
(1)  453/ 60003E6 : 64F6                		mov	@r15+,r4
(1)  454/ 60003E8 : 63F6                		mov	@r15+,r3
(1)  455/ 60003EA : 62F6                		mov	@r15+,r2
(1)  456/ 60003EC : 0009                		nop
(1)  457/ 60003EE : 000B                		rts
(1)  458/ 60003F0 : 0009                		nop
(1)  459/ 60003F2 :                     		align 4
(1)  460/ 60003F4 :                     
(1)  461/ 60003F4 :                     ; =================================================================
(1)  462/ 60003F4 :                     ; ------------------------------------------------
(1)  463/ 60003F4 :                     ; Master | HBlank
(1)  464/ 60003F4 :                     ; ------------------------------------------------
(1)  465/ 60003F4 :                     
(1)  466/ 60003F4 :                     m_irq_h:
(1)  467/ 60003F4 : 9056                		mov	#$F0,r0
(1)  468/ 60003F6 : 400E                		ldc	r0,sr
(1)  469/ 60003F8 : 9155                		mov	#_FRT,r1
(1)  470/ 60003FA : 8417                		mov.b	@(7,r1),r0
(1)  471/ 60003FC : CA02                		xor	#2,r0
(1)  472/ 60003FE : 8017                		mov.b	r0,@(7,r1)
(1)  473/ 6000400 : D123                		mov	#_sysreg+hintclr,r1
(1)  474/ 6000402 : 2101                		mov.w	r0,@r1
(1)  475/ 6000404 : 0009                		nop
(1)  476/ 6000406 : 0009                		nop
(1)  477/ 6000408 : 0009                		nop
(1)  478/ 600040A : 0009                		nop
(1)  479/ 600040C : 000B                		rts
(1)  480/ 600040E : 0009                		nop
(1)  481/ 6000410 :                     		align 4
(1)  482/ 6000410 :                     
(1)  483/ 6000410 :                     ; =================================================================
(1)  484/ 6000410 :                     ; ------------------------------------------------
(1)  485/ 6000410 :                     ; Master | VBlank
(1)  486/ 6000410 :                     ; ------------------------------------------------
(1)  487/ 6000410 :                     
(1)  488/ 6000410 :                     m_irq_v:
(1)  489/ 6000410 : 9048                		mov	#$F0,r0
(1)  490/ 6000412 : 400E                		ldc	r0,sr
(1)  491/ 6000414 : 9147                		mov	#_FRT,r1
(1)  492/ 6000416 : 8417                		mov.b	@(7,r1),r0
(1)  493/ 6000418 : CA02                		xor	#2,r0
(1)  494/ 600041A : 8017                		mov.b	r0,@(7,r1)
(1)  495/ 600041C : D11D                		mov	#_sysreg+vintclr,r1
(1)  496/ 600041E : 2101                		mov.w	r0,@r1
(1)  497/ 6000420 : 0009                		nop
(1)  498/ 6000422 : 0009                		nop
(1)  499/ 6000424 : 0009                		nop
(1)  500/ 6000426 : 0009                		nop
(1)  501/ 6000428 : 000B                		rts
(1)  502/ 600042A : 0009                		nop
(1)  503/ 600042C :                     		align 4
(1)  504/ 600042C :                     
(1)  505/ 600042C :                     ; =================================================================
(1)  506/ 600042C :                     ; ------------------------------------------------
(1)  507/ 600042C :                     ; Master | VRES Interrupt (RESET button on Genesis)
(1)  508/ 600042C :                     ; ------------------------------------------------
(1)  509/ 600042C :                     
(1)  510/ 600042C :                     m_irq_vres:
(1)  511/ 600042C : 913B                		mov	#_FRT,r1
(1)  512/ 600042E : 8417                		mov.b	@(7,r1),r0
(1)  513/ 6000430 : CA02                		xor	#2,r0
(1)  514/ 6000432 : 8017                		mov.b	r0,@(7,r1)
(1)  515/ 6000434 : D212                		mov	#_sysreg,r2
(1)  516/ 6000436 : 812A                		mov.w	r0,@(vresintclr,r2)
(1)  517/ 6000438 : 9137                		mov	#$FFFFFE80,r1
(1)  518/ 600043A : 9037                		mov.w	#$A518,r0		; Disable Watchdog
(1)  519/ 600043C : 2101                		mov.w	r0,@r1
(1)  520/ 600043E : 8427                		mov.b	@(dreqctl+1,r2),r0
(1)  521/ 6000440 : C802                		tst	#%10,r0
(1)  522/ 6000442 : 8B17                		bf	.rv_busy
(1)  523/ 6000444 :                     
(1)  524/ 6000444 : E180                		mov	#_DMASOURCE0,r1
(1)  525/ 6000446 : 5013                		mov	@($C,r1),r0
(1)  526/ 6000448 : C801                		tst	#%01,r0
(1)  527/ 600044A : 890A                		bt	.no_dma
(1)  528/ 600044C : 5013                .wait_dma:	mov	@($C,r1),r0
(1)  529/ 600044E : C802                		tst	#%10,r0
(1)  530/ 6000450 : 89FC                		bt	.wait_dma
(1)  531/ 6000452 : E1B0                		mov	#_DMAOPERATION,r1
(1)  532/ 6000454 : E000                		mov     #0,r0
(1)  533/ 6000456 : 2102                		mov	r0,@r1
(1)  534/ 6000458 : E18C                		mov	#_DMACHANNEL0,r1
(1)  535/ 600045A : E000                		mov     #0,r0
(1)  536/ 600045C : 2102                		mov	r0,@r1
(1)  537/ 600045E : 9126                		mov	#$44E0,r1
(1)  538/ 6000460 : 2102                		mov	r0,@r1
(1)  539/ 6000462 :                     .no_dma:
(1)  540/ 6000462 : DF0D                		mov	#(CS3|$40000)-8,r15
(1)  541/ 6000464 : D00D                		mov	#SH2_M_HotStart,r0
(1)  542/ 6000466 : 2F02                		mov	r0,@r15
(1)  543/ 6000468 : 901C                		mov.w   #$F0,r0
(1)  544/ 600046A : 1F01                		mov	r0,@(4,r15)
(1)  545/ 600046C : D00C                		mov	#"M_OK",r0
(1)  546/ 600046E : 1208                		mov	r0,@(comm0,r2)
(1)  547/ 6000470 : 002B                		rte
(1)  548/ 6000472 : 0009                		nop
(1)  549/ 6000474 :                     		align 4
(1)  550/ 6000474 :                     .rv_busy:
(1)  551/ 6000474 : AFFE                		bra	.rv_busy
(1)  552/ 6000476 : 0009                		nop
(1)  553/ 6000478 :                     		align 4
(1)  554/ 6000478 : 2000 401C 2000 401A 		ltorg		; Save literals
                    2000 4000 2000 402C 
                    2000 4012 2600 7CD0 
                    2000 4018 2000 4016 
                    0603 FFF8 0600 1200 
                    4D5F 4F4B 00F0 FE10 
                    44E1 FE80 A518 44E0 
(1)  555/ 60004B0 :                     
(1)  556/ 60004B0 :                     ; =================================================================
(1)  557/ 60004B0 :                     ; ------------------------------------------------
(1)  558/ 60004B0 :                     ; Slave | Unused Interrupt
(1)  559/ 60004B0 :                     ; ------------------------------------------------
(1)  560/ 60004B0 :                     
(1)  561/ 60004B0 :                     		align 4
(1)  562/ 60004B0 :                     s_irq_bad:
(1)  563/ 60004B0 : 000B                		rts
(1)  564/ 60004B2 : 0009                		nop
(1)  565/ 60004B4 :                     		align 4
(1)  566/ 60004B4 :                     
(1)  567/ 60004B4 :                     ; =================================================================
(1)  568/ 60004B4 :                     ; ------------------------------------------------
(1)  569/ 60004B4 :                     ; Slave | PWM Interrupt
(1)  570/ 60004B4 :                     ; ------------------------------------------------
(1)  571/ 60004B4 :                     
(1)  572/ 60004B4 :                     ; check cache.asm
(1)  573/ 60004B4 :                     ; s_irq_pwm:
(1)  574/ 60004B4 :                     
(1)  575/ 60004B4 :                     ; =================================================================
(1)  576/ 60004B4 :                     ; ------------------------------------------------
(1)  577/ 60004B4 :                     ; Slave | CMD Interrupt
(1)  578/ 60004B4 :                     ; ------------------------------------------------
(1)  579/ 60004B4 :                     
(1)  580/ 60004B4 :                     s_irq_cmd:
(1)  581/ 60004B4 : D078                		mov	#.tag_F0,r0
(1)  582/ 60004B6 : 400E                		ldc	r0,sr
(1)  583/ 60004B8 : D178                		mov	#.tag_FRT,r1
(1)  584/ 60004BA : 8417                		mov.b	@(7,r1),r0
(1)  585/ 60004BC : CA02                		xor	#2,r0
(1)  586/ 60004BE : 8017                		mov.b	r0,@(7,r1)
(1)  587/ 60004C0 : D177                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  588/ 60004C2 : 2101                		mov.w	r0,@r1
(1)  589/ 60004C4 :                     
(1)  590/ 60004C4 :                     	; ---------------------------------
(1)  591/ 60004C4 :                     
(1)  592/ 60004C4 : D177                		mov	#_sysreg+comm14,r1
(1)  593/ 60004C6 : 6010                		mov.b	@r1,r0			; MSB only
(1)  594/ 60004C8 : C90F                		and	#%00001111,r0
(1)  595/ 60004CA : 8800                		cmp/eq	#0,r0
(1)  596/ 60004CC : 8B06                		bf	.valid_cmd
(1)  597/ 60004CE : A0DD                		bra	.no_ztrnsfr
(1)  598/ 60004D0 : 0009                		nop
(1)  599/ 60004D2 :                     		align 4
(1)  600/ 60004D4 : FFFF FE10           .tag_FRT:	dc.l _FRT
(1)  601/ 60004D8 : 0000 00F0           .tag_F0:	dc.l $F0
(1)  602/ 60004DC :                     .valid_cmd:
(1)  603/ 60004DC : 2F26                		mov	r2,@-r15
(1)  604/ 60004DE : 2F36                		mov	r3,@-r15
(1)  605/ 60004E0 : 2F46                		mov	r4,@-r15
(1)  606/ 60004E2 : 2F56                		mov	r5,@-r15
(1)  607/ 60004E4 : 2F66                		mov	r6,@-r15
(1)  608/ 60004E6 : 2F76                		mov	r7,@-r15
(1)  609/ 60004E8 : 2F86                		mov	r8,@-r15
(1)  610/ 60004EA : 2F96                		mov	r9,@-r15
(1)  611/ 60004EC : 2FA6                		mov	r10,@-r15
(1)  612/ 60004EE : 2FB6                		mov	r11,@-r15
(1)  613/ 60004F0 : 2FC6                		mov	r12,@-r15
(1)  614/ 60004F2 : 2FD6                		mov	r13,@-r15
(1)  615/ 60004F4 : 2FE6                		mov	r14,@-r15
(1)  616/ 60004F6 : 4F12                		sts	macl,@-r15
(1)  617/ 60004F8 : 4F02                		sts	mach,@-r15
(1)  618/ 60004FA : 4F22                		sts	pr,@-r15
(1)  619/ 60004FC : 8801                		cmp/eq	#1,r0
(1)  620/ 60004FE : 8917                		bt	.mode_1
(1)  621/ 6000500 : 8802                		cmp/eq	#2,r0
(1)  622/ 6000502 : 8903                		bt	.mode_2
(1)  623/ 6000504 : 8803                		cmp/eq	#3,r0
(1)  624/ 6000506 : 890B                		bt	.mode_3
(1)  625/ 6000508 : A0B0                		bra	.no_trnsfrex
(1)  626/ 600050A : 0009                		nop
(1)  627/ 600050C :                     		align 4
(1)  628/ 600050C :                     
(1)  629/ 600050C :                     ; ---------------------------------
(1)  630/ 600050C :                     ; CMD Mode 2: PWM Backup enter
(1)  631/ 600050C :                     ; ---------------------------------
(1)  632/ 600050C :                     
(1)  633/ 600050C :                     .mode_2:
(1)  634/ 600050C : D066                		mov	#MarsSnd_Refill,r0
(1)  635/ 600050E : 400B                		jsr	@r0
(1)  636/ 6000510 : 0009                		nop
(1)  637/ 6000512 : D166                		mov	#MarsSnd_RvMode,r1	; Set backup-playback flag
(1)  638/ 6000514 : E001                		mov	#1,r0
(1)  639/ 6000516 : 2102                		mov	r0,@r1
(1)  640/ 6000518 : D162                		mov	#_sysreg+comm14,r1
(1)  641/ 600051A : E000                		mov	#0,r0
(1)  642/ 600051C : A0A6                		bra	.no_trnsfrex
(1)  643/ 600051E : 2100                		mov.b	r0,@r1
(1)  644/ 6000520 :                     		align 4
(1)  645/ 6000520 :                     
(1)  646/ 6000520 :                     ; ---------------------------------
(1)  647/ 6000520 :                     ; CMD Mode 3: PWM Backup exit
(1)  648/ 6000520 :                     ; ---------------------------------
(1)  649/ 6000520 :                     
(1)  650/ 6000520 :                     .mode_3:
(1)  651/ 6000520 : D163                		mov	#MarsSnd_RvMode,r1	; Clear backup-playback flag
(1)  652/ 6000522 : E000                		mov	#0,r0
(1)  653/ 6000524 : 2102                		mov	r0,@r1
(1)  654/ 6000526 : D15F                		mov	#_sysreg+comm14,r1
(1)  655/ 6000528 : E000                		mov	#0,r0
(1)  656/ 600052A : A09F                		bra	.no_trnsfrex
(1)  657/ 600052C : 2100                		mov.b	r0,@r1
(1)  658/ 600052E :                     		align 4
(1)  659/ 6000530 :                     
(1)  660/ 6000530 :                     ; ---------------------------------
(1)  661/ 6000530 :                     ; CMD Mode 1: Z80 transfer
(1)  662/ 6000530 :                     ; AND process new PWM's
(1)  663/ 6000530 :                     ; ---------------------------------
(1)  664/ 6000530 :                     
(1)  665/ 6000530 :                     .mode_1:
(1)  666/ 6000530 :                     	; First we recieve changes from Z80
(1)  667/ 6000530 :                     	; using comm8  for data
(1)  668/ 6000530 :                     	;  and  comm14 for busy/clock bits (bits 7,6)
(1)  669/ 6000530 : D160                		mov	#_sysreg+comm8,r1
(1)  670/ 6000532 : D261                		mov	#MarsSnd_PwmControl,r2
(1)  671/ 6000534 : D35B                		mov	#_sysreg+comm14,r3	; control comm
(1)  672/ 6000536 :                     .wait_1:
(1)  673/ 6000536 : 6030                		mov.b	@r3,r0
(1)  674/ 6000538 : C880                		tst	#%10000000,r0		; Z80 enter/exit
(1)  675/ 600053A : 8909                		bt	.exit_c
(1)  676/ 600053C : C840                		tst	#%01000000,r0		; wait CLOCK
(1)  677/ 600053E : 89FA                		bt	.wait_1
(1)  678/ 6000540 :                     .copy_1:
(1)  679/ 6000540 : 6012                		mov	@r1,r0
(1)  680/ 6000542 : 2202                		mov	r0,@r2
(1)  681/ 6000544 : 7204                		add	#4,r2
(1)  682/ 6000546 : 6030                		mov.b	@r3,r0			; CLK done
(1)  683/ 6000548 : C9BF                		and	#%10111111,r0
(1)  684/ 600054A : 2300                		mov.b	r0,@r3
(1)  685/ 600054C : AFF3                		bra	.wait_1
(1)  686/ 600054E : 0009                		nop
(1)  687/ 6000550 :                     .exit_c:
(1)  688/ 6000550 :                     
(1)  689/ 6000550 :                     	; Now loop for channels that need updating
(1)  690/ 6000550 :                     	;
(1)  691/ 6000550 :                     	; TODO: rushed... but it works.
(1)  692/ 6000550 : E100                		mov	#0,r1				; r1 - Current PWM slot
(1)  693/ 6000552 : DE5A                		mov	#MarsSnd_PwmControl,r14
(1)  694/ 6000554 : 9ABE                		mov	#MAX_PWMCHNL,r10
(1)  695/ 6000556 :                     .next_chnl:
(1)  696/ 6000556 : 60E0                		mov.b	@r14,r0
(1)  697/ 6000558 : C9FF                		and	#$FF,r0
(1)  698/ 600055A : 8800                		cmp/eq	#0,r0
(1)  699/ 600055C : 890F                		bt	.no_req2
(1)  700/ 600055E : 2DDA                		xor	r13,r13
(1)  701/ 6000560 : 2ED0                		mov.b	r13,@r14
(1)  702/ 6000562 : 6703                		mov	r0,r7
(1)  703/ 6000564 : C907                		and	#%111,r0
(1)  704/ 6000566 : 8801                		cmp/eq	#%001,r0
(1)  705/ 6000568 : 8912                		bt	.no_keyoff
(1)  706/ 600056A : 8802                		cmp/eq	#%010,r0
(1)  707/ 600056C : 8903                		bt	.pwm_keyoff
(1)  708/ 600056E : 8804                		cmp/eq	#%100,r0
(1)  709/ 6000570 : 8907                		bt	.pwm_keycut
(1)  710/ 6000572 : A076                		bra	.no_req
(1)  711/ 6000574 : 0009                		nop
(1)  712/ 6000576 :                     .pwm_keyoff:
(1)  713/ 6000576 : E240                		mov	#$40,r2
(1)  714/ 6000578 : D051                		mov	#MarsSound_SetVolume,r0
(1)  715/ 600057A : 400B                		jsr	@r0
(1)  716/ 600057C : 0009                		nop
(1)  717/ 600057E :                     .no_req2:
(1)  718/ 600057E : A070                		bra	.no_req
(1)  719/ 6000580 : 0009                		nop
(1)  720/ 6000582 :                     .pwm_keycut:
(1)  721/ 6000582 : E200                		mov	#0,r2
(1)  722/ 6000584 : D04F                		mov	#MarsSound_PwmEnable,r0
(1)  723/ 6000586 : 400B                		jsr	@r0
(1)  724/ 6000588 : 0009                		nop
(1)  725/ 600058A : A06A                		bra	.no_req
(1)  726/ 600058C : 0009                		nop
(1)  727/ 600058E :                     		align 4
(1)  728/ 6000590 :                     	; Normal playback
(1)  729/ 6000590 :                     .no_keyoff:
(1)  730/ 6000590 : 6073                		mov	r7,r0
(1)  731/ 6000592 : C810                		tst	#$10,r0
(1)  732/ 6000594 : 890E                		bt	.no_pitchbnd
(1)  733/ 6000596 : 6DE3                		mov	r14,r13
(1)  734/ 6000598 : 7D08                		add	#8,r13		; skip COM
(1)  735/ 600059A : 60D0                		mov.b	@r13,r0		; r2 - Get pitch MSB bits
(1)  736/ 600059C : 7D08                		add	#8,r13
(1)  737/ 600059E : C903                		and	#%11,r0
(1)  738/ 60005A0 : 4018                		shll8	r0
(1)  739/ 60005A2 : 6203                		mov	r0,r2
(1)  740/ 60005A4 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  741/ 60005A6 : 7D08                		add	#8,r13
(1)  742/ 60005A8 : C9FF                		and	#$FF,r0
(1)  743/ 60005AA : 202B                		or	r2,r0
(1)  744/ 60005AC : 6203                		mov	r0,r2
(1)  745/ 60005AE : D046                		mov	#MarsSound_SetPwmPitch,r0
(1)  746/ 60005B0 : 400B                		jsr	@r0
(1)  747/ 60005B2 : 0009                		nop
(1)  748/ 60005B4 :                     .no_pitchbnd:
(1)  749/ 60005B4 : 6073                		mov	r7,r0
(1)  750/ 60005B6 : C820                		tst	#$20,r0
(1)  751/ 60005B8 : 8908                		bt	.no_volumebnd
(1)  752/ 60005BA : 6703                		mov	r0,r7
(1)  753/ 60005BC : 6DE3                		mov	r14,r13
(1)  754/ 60005BE : 7D08                		add	#8,r13		; point to volume values
(1)  755/ 60005C0 : 60D0                		mov.b	@r13,r0
(1)  756/ 60005C2 : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  757/ 60005C4 : 6203                		mov	r0,r2
(1)  758/ 60005C6 : D041                		mov	#MarsSound_SetVolume,r0
(1)  759/ 60005C8 : 400B                		jsr	@r0
(1)  760/ 60005CA : 0009                		nop
(1)  761/ 60005CC :                     .no_volumebnd:
(1)  762/ 60005CC : 6073                		mov	r7,r0
(1)  763/ 60005CE : C801                		tst	#$01,r0		; key-on?
(1)  764/ 60005D0 : 8947                		bt	.no_req
(1)  765/ 60005D2 : 6DE3                		mov	r14,r13
(1)  766/ 60005D4 : 7D08                		add	#8,r13		; skip COM
(1)  767/ 60005D6 : 60D0                		mov.b	@r13,r0
(1)  768/ 60005D8 : 7D08                		add	#8,r13
(1)  769/ 60005DA : 6503                		mov	r0,r5
(1)  770/ 60005DC : C9FC                		and	#%11111100,r0	; skip MSB pitch bits
(1)  771/ 60005DE : 6603                		mov	r0,r6		; r6 - Volume
(1)  772/ 60005E0 : 6053                		mov	r5,r0		; r5 - Get pitch MSB bits
(1)  773/ 60005E2 : C903                		and	#%00000011,r0
(1)  774/ 60005E4 : 4018                		shll8	r0
(1)  775/ 60005E6 : 6503                		mov	r0,r5
(1)  776/ 60005E8 : 60D0                		mov.b	@r13,r0		; Pitch LSB
(1)  777/ 60005EA : 7D08                		add	#8,r13
(1)  778/ 60005EC : C9FF                		and	#$FF,r0
(1)  779/ 60005EE : 205B                		or	r5,r0
(1)  780/ 60005F0 : 6503                		mov	r0,r5
(1)  781/ 60005F2 : 60D0                		mov.b	@r13,r0		; flags | SH2 BANK
(1)  782/ 60005F4 : 7D08                		add	#8,r13
(1)  783/ 60005F6 : 6703                		mov	r0,r7		; r7 - Flags
(1)  784/ 60005F8 : C90F                		and	#%1111,r0
(1)  785/ 60005FA : 6803                		mov	r0,r8		; r8 - SH2 section (ROM or SDRAM)
(1)  786/ 60005FC : 4828                		shll16	r8
(1)  787/ 60005FE : 4818                		shll8	r8
(1)  788/ 6000600 : 4709                		shlr2	r7
(1)  789/ 6000602 : 4709                		shlr2	r7
(1)  790/ 6000604 : 60D0                		mov.b	@r13,r0		; r2 - START point
(1)  791/ 6000606 : 7D08                		add	#8,r13
(1)  792/ 6000608 : C9FF                		and	#$FF,r0
(1)  793/ 600060A : 4028                		shll16	r0
(1)  794/ 600060C : 6303                		mov	r0,r3
(1)  795/ 600060E : 60D0                		mov.b	@r13,r0
(1)  796/ 6000610 : 7D08                		add	#8,r13
(1)  797/ 6000612 : C9FF                		and	#$FF,r0
(1)  798/ 6000614 : 4018                		shll8	r0
(1)  799/ 6000616 : 6203                		mov	r0,r2
(1)  800/ 6000618 : 60D0                		mov.b	@r13,r0
(1)  801/ 600061A : 7D08                		add	#8,r13
(1)  802/ 600061C : C9FF                		and	#$FF,r0
(1)  803/ 600061E : 203B                		or	r3,r0
(1)  804/ 6000620 : 202B                		or	r2,r0
(1)  805/ 6000622 : 6203                		mov	r0,r2
(1)  806/ 6000624 : 6423                		mov	r2,r4		; r4 - START copy
(1)  807/ 6000626 : 228B                		or	r8,r2		; add CS2
(1)  808/ 6000628 : 6024                		mov.b	@r2+,r0		; r3 - Length
(1)  809/ 600062A : C9FF                		and	#$FF,r0
(1)  810/ 600062C : 6303                		mov	r0,r3
(1)  811/ 600062E : 6024                		mov.b	@r2+,r0
(1)  812/ 6000630 : C9FF                		and	#$FF,r0
(1)  813/ 6000632 : 4018                		shll8	r0
(1)  814/ 6000634 : 230B                		or	r0,r3
(1)  815/ 6000636 : 6024                		mov.b	@r2+,r0
(1)  816/ 6000638 : C9FF                		and	#$FF,r0
(1)  817/ 600063A : 4028                		shll16	r0
(1)  818/ 600063C : 230B                		or	r0,r3
(1)  819/ 600063E : 334C                		add	r4,r3		; add end+start
(1)  820/ 6000640 : 238B                		or	r8,r3		; add CS2
(1)  821/ 6000642 : 6024                		mov.b	@r2+,r0		; get loop point
(1)  822/ 6000644 : C9FF                		and	#$FF,r0
(1)  823/ 6000646 : 6403                		mov	r0,r4
(1)  824/ 6000648 : 6024                		mov.b	@r2+,r0
(1)  825/ 600064A : C9FF                		and	#$FF,r0
(1)  826/ 600064C : 4018                		shll8	r0
(1)  827/ 600064E : 240B                		or	r0,r4
(1)  828/ 6000650 : 6024                		mov.b	@r2+,r0
(1)  829/ 6000652 : C9FF                		and	#$FF,r0
(1)  830/ 6000654 : 4028                		shll16	r0
(1)  831/ 6000656 : 240B                		or	r0,r4
(1)  832/ 6000658 : 903D                		mov	#%11111100,r0
(1)  833/ 600065A : 2809                		and	r0,r8
(1)  834/ 600065C : D01C                		mov	#MarsSound_SetPwm,r0
(1)  835/ 600065E : 400B                		jsr	@r0
(1)  836/ 6000660 : 0009                		nop
(1)  837/ 6000662 :                     .no_req:
(1)  838/ 6000662 : 7101                		add	#1,r1		; next PWM slot
(1)  839/ 6000664 : 4A10                		dt	r10
(1)  840/ 6000666 : 8901                		bt	.end_chnls
(1)  841/ 6000668 : AF75                		bra	.next_chnl
(1)  842/ 600066A : 7E01                		add	#1,r14		; next PWM entry
(1)  843/ 600066C :                     .end_chnls:
(1)  844/ 600066C :                     
(1)  845/ 600066C :                     	; ---------------------------------
(1)  846/ 600066C :                     	; *** END of PWM driver for GEMA
(1)  847/ 600066C :                     	; ---------------------------------
(1)  848/ 600066C :                     
(1)  849/ 600066C :                     .no_trnsfrex:
(1)  850/ 600066C : 4F26                		lds	@r15+,pr
(1)  851/ 600066E : 4F06                		lds	@r15+,mach
(1)  852/ 6000670 : 4F16                		lds	@r15+,macl
(1)  853/ 6000672 : 6EF6                		mov	@r15+,r14
(1)  854/ 6000674 : 6DF6                		mov	@r15+,r13
(1)  855/ 6000676 : 6CF6                		mov	@r15+,r12
(1)  856/ 6000678 : 6BF6                		mov	@r15+,r11
(1)  857/ 600067A : 6AF6                		mov	@r15+,r10
(1)  858/ 600067C : 69F6                		mov	@r15+,r9
(1)  859/ 600067E : 68F6                		mov	@r15+,r8
(1)  860/ 6000680 : 67F6                		mov	@r15+,r7
(1)  861/ 6000682 : 66F6                		mov	@r15+,r6
(1)  862/ 6000684 : 65F6                		mov	@r15+,r5
(1)  863/ 6000686 : 64F6                		mov	@r15+,r4
(1)  864/ 6000688 : 63F6                		mov	@r15+,r3
(1)  865/ 600068A : 62F6                		mov	@r15+,r2
(1)  866/ 600068C :                     .no_ztrnsfr:
(1)  867/ 600068C : 0009                		nop
(1)  868/ 600068E : 0009                		nop
(1)  869/ 6000690 : 0009                		nop
(1)  870/ 6000692 : 0009                		nop
(1)  871/ 6000694 : 000B                		rts
(1)  872/ 6000696 : 0009                		nop
(1)  873/ 6000698 :                     		align 4
(1)  874/ 6000698 : 0600 04D8 0600 04D4 		ltorg
                    2000 401A 2000 402E 
                    0600 1134 C000 05E8 
                    C000 05E8 2000 4028 
                    C000 0774 C000 0774 
                    0600 110C 0600 1124 
                    0600 10F4 0600 110C 
                    0600 10B8 0007 00FC 
(1)  875/ 60006D8 :                     
(1)  876/ 60006D8 :                     ; =================================================================
(1)  877/ 60006D8 :                     ; ------------------------------------------------
(1)  878/ 60006D8 :                     ; Slave | HBlank
(1)  879/ 60006D8 :                     ; ------------------------------------------------
(1)  880/ 60006D8 :                     
(1)  881/ 60006D8 :                     s_irq_h:
(1)  882/ 60006D8 : 904A                		mov	#$F0,r0
(1)  883/ 60006DA : 400E                		ldc	r0,sr
(1)  884/ 60006DC : 9149                		mov	#_FRT,r1
(1)  885/ 60006DE : 8417                		mov.b	@(7,r1),r0
(1)  886/ 60006E0 : CA02                		xor	#2,r0
(1)  887/ 60006E2 : 8017                		mov.b	r0,@(7,r1)
(1)  888/ 60006E4 : D11C                		mov	#_sysreg+hintclr,r1
(1)  889/ 60006E6 : 2101                		mov.w	r0,@r1
(1)  890/ 60006E8 : 0009                		nop
(1)  891/ 60006EA : 0009                		nop
(1)  892/ 60006EC : 0009                		nop
(1)  893/ 60006EE : 0009                		nop
(1)  894/ 60006F0 : 0009                		nop
(1)  895/ 60006F2 : 000B                		rts
(1)  896/ 60006F4 : 0009                		nop
(1)  897/ 60006F6 :                     		align 4
(1)  898/ 60006F8 :                     
(1)  899/ 60006F8 :                     ; =================================================================
(1)  900/ 60006F8 :                     ; ------------------------------------------------
(1)  901/ 60006F8 :                     ; Slave | VBlank
(1)  902/ 60006F8 :                     ; ------------------------------------------------
(1)  903/ 60006F8 :                     
(1)  904/ 60006F8 :                     s_irq_v:
(1)  905/ 60006F8 : 903A                		mov	#$F0,r0
(1)  906/ 60006FA : 400E                		ldc	r0,sr
(1)  907/ 60006FC : 9139                		mov	#_FRT,r1
(1)  908/ 60006FE : 8417                		mov.b	@(7,r1),r0
(1)  909/ 6000700 : CA02                		xor	#2,r0
(1)  910/ 6000702 : 8017                		mov.b	r0,@(7,r1)
(1)  911/ 6000704 : D115                		mov	#_sysreg+vintclr,r1
(1)  912/ 6000706 : 2101                		mov.w	r0,@r1
(1)  913/ 6000708 : 0009                		nop
(1)  914/ 600070A : 0009                		nop
(1)  915/ 600070C : 0009                		nop
(1)  916/ 600070E : 0009                		nop
(1)  917/ 6000710 : 0009                		nop
(1)  918/ 6000712 : 000B                		rts
(1)  919/ 6000714 : 0009                		nop
(1)  920/ 6000716 :                     		align 4
(1)  921/ 6000718 :                     
(1)  922/ 6000718 :                     ; =================================================================
(1)  923/ 6000718 :                     ; ------------------------------------------------
(1)  924/ 6000718 :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  925/ 6000718 :                     ; ------------------------------------------------
(1)  926/ 6000718 :                     
(1)  927/ 6000718 :                     s_irq_vres:
(1)  928/ 6000718 : 912B                		mov	#_FRT,r1
(1)  929/ 600071A : 8417                		mov.b	@(7,r1),r0
(1)  930/ 600071C : CA02                		xor	#2,r0
(1)  931/ 600071E : 8017                		mov.b	r0,@(7,r1)
(1)  932/ 6000720 : D20F                		mov	#_sysreg,r2
(1)  933/ 6000722 : 812A                		mov.w	r0,@(vresintclr,r2)
(1)  934/ 6000724 : 8427                		mov.b	@(dreqctl+1,r2),r0
(1)  935/ 6000726 : C802                		tst	#%10,r0
(1)  936/ 6000728 : 8B14                		bf	.rv_busy
(1)  937/ 600072A : DF0E                		mov	#(CS3|$3F000)-8,r15
(1)  938/ 600072C : D00E                		mov	#SH2_S_HotStart,r0
(1)  939/ 600072E : 2F02                		mov	r0,@r15
(1)  940/ 6000730 : 901E                		mov.w   #$F0,r0
(1)  941/ 6000732 : 1F01                		mov	r0,@(4,r15)
(1)  942/ 6000734 : 911E                		mov	#$FFFFFE80,r1
(1)  943/ 6000736 : 901E                		mov.w	#$A518,r0		; Disable Watchdog
(1)  944/ 6000738 : 2101                		mov.w	r0,@r1
(1)  945/ 600073A : E1B0                		mov	#_DMAOPERATION,r1
(1)  946/ 600073C : E000                		mov     #0,r0
(1)  947/ 600073E : 2102                		mov	r0,@r1
(1)  948/ 6000740 : E18C                		mov	#_DMACHANNEL0,r1
(1)  949/ 6000742 : E000                		mov     #0,r0
(1)  950/ 6000744 : 2102                		mov	r0,@r1
(1)  951/ 6000746 : 9117                		mov	#$44E0,r1
(1)  952/ 6000748 : 2102                		mov	r0,@r1
(1)  953/ 600074A : D008                		mov	#"S_OK",r0
(1)  954/ 600074C : 1209                		mov	r0,@(comm4,r2)
(1)  955/ 600074E : 002B                		rte
(1)  956/ 6000750 : 0009                		nop
(1)  957/ 6000752 :                     		align 4
(1)  958/ 6000754 :                     .rv_busy:
(1)  959/ 6000754 : AFFE                		bra	.rv_busy
(1)  960/ 6000756 : 0009                		nop
(1)  961/ 6000758 :                     		align 4
(1)  962/ 6000758 : 2000 4018 2000 4016 		ltorg		; Save literals
                    2000 4000 0603 EFF8 
                    0600 1774 535F 4F4B 
                    00F0 FE10 FE80 A518 
                    44E0                
(1)  963/ 600077A :                     
(1)  964/ 600077A :                     
(1)  965/ 600077A :                     ; =================================================================
(1)  966/ 600077A :                     ; ------------------------------------------------
(1)  967/ 600077A :                     ; Master | Watchdog interrupt
(1)  968/ 600077A :                     ; ------------------------------------------------
(1)  969/ 600077A :                     
(1)  970/ 600077A :                     ; m_irq_wdg:
(1)  971/ 600077A :                     ; check cache_m_plgn.asm
(1)  972/ 600077A :                     
(1)  973/ 600077A :                     ; =================================================================
(1)  974/ 600077A :                     ; ------------------------------------------------
(1)  975/ 600077A :                     ; Slave | Watchdog interrupt
(1)  976/ 600077A :                     ; ------------------------------------------------
(1)  977/ 600077A :                     
(1)  978/ 600077A :                     s_irq_wdg:
(1)  979/ 600077A : 9011                		mov	#$F0,r0
(1)  980/ 600077C : 400E                		ldc	r0,sr
(1)  981/ 600077E : 2F26                		mov	r2,@-r15
(1)  982/ 6000780 : 910F                		mov	#_FRT,r1
(1)  983/ 6000782 : 8417                		mov.b   @(7,r1),r0
(1)  984/ 6000784 : CA02                		xor     #2,r0
(1)  985/ 6000786 : 8017                		mov.b   r0,@(7,r1)
(1)  986/ 6000788 :                     
(1)  987/ 6000788 : 910C                		mov	#$FFFFFE80,r1
(1)  988/ 600078A : 900C                		mov.w   #$A518,r0		; Watchdog OFF
(1)  989/ 600078C : 2101                		mov.w   r0,@r1
(1)  990/ 600078E : CB20                		or      #$20,r0			; ON again
(1)  991/ 6000790 : 2101                		mov.w   r0,@r1
(1)  992/ 6000792 : E210                		mov	#$10,r2
(1)  993/ 6000794 : 9008                		mov.w   #$5A00,r0		; Timer for the next one
(1)  994/ 6000796 : 202B                		or	r2,r0
(1)  995/ 6000798 : 2101                		mov.w	r0,@r1
(1)  996/ 600079A :                     
(1)  997/ 600079A : 62F6                		mov	@r15+,r2
(1)  998/ 600079C : 000B                		rts
(1)  999/ 600079E : 0009                		nop
(1) 1000/ 60007A0 :                     		align 4
(1) 1001/ 60007A0 : 00F0 FE10 FE80 A518 		ltorg
                    5A00                
(1) 1002/ 60007AA :                     		align 4
(1) 1003/ 60007AC :                     
(1) 1004/ 60007AC :                     ; ====================================================================
(1) 1005/ 60007AC :                     ; ----------------------------------------------------------------
(1) 1006/ 60007AC :                     ; Mars_LoadFastCode
(1) 1007/ 60007AC :                     ;
(1) 1008/ 60007AC :                     ; Loads "fast code" into the SH2's cache
(1) 1009/ 60007AC :                     ; ($800 bytes max)
(1) 1010/ 60007AC :                     ;
(1) 1011/ 60007AC :                     ; Input:
(1) 1012/ 60007AC :                     ; r1 - Code to transfer
(1) 1013/ 60007AC :                     ; r2 - Size / 4
(1) 1014/ 60007AC :                     ;
(1) 1015/ 60007AC :                     ; Breaks:
(1) 1016/ 60007AC :                     ; r3
(1) 1017/ 60007AC :                     ;
(1) 1018/ 60007AC :                     ; NOTE:
(1) 1019/ 60007AC :                     ; Interrupts MUST be OFF
(1) 1020/ 60007AC :                     ; ----------------------------------------------------------------
(1) 1021/ 60007AC :                     
(1) 1022/ 60007AC :                     		align 4
(1) 1023/ 60007AC :                     Mars_LoadFastCode:
(1) 1024/ 60007AC : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 1025/ 60007AE : 900F                		mov	#$F0,r0
(1) 1026/ 60007B0 : 400E                		ldc	r0,sr
(1) 1027/ 60007B2 : 930E                		mov	#_CCR,r3
(1) 1028/ 60007B4 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 1029/ 60007B6 : 2301                		mov.w	r0,@r3
(1) 1030/ 60007B8 : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 1031/ 60007BA : 2301                		mov.w	r0,@r3
(1) 1032/ 60007BC : D303                		mov 	#$C0000000,r3
(1) 1033/ 60007BE :                     .copy:
(1) 1034/ 60007BE : 6016                		mov 	@r1+,r0
(1) 1035/ 60007C0 : 2302                		mov 	r0,@r3
(1) 1036/ 60007C2 : 4210                		dt	r2
(1) 1037/ 60007C4 : 8FFB                		bf/s	.copy
(1) 1038/ 60007C6 : 7304                		add 	#4,r3
(1) 1039/ 60007C8 : 000B                		rts
(1) 1040/ 60007CA : 4F07                		ldc	@r15+,sr
(1) 1041/ 60007CC :                     		align 4
(1) 1042/ 60007CC : C000 0000 00F0 FE92 		ltorg
(1) 1043/ 60007D4 :                     		align 4
(1) 1044/ 60007D4 :                     
(1) 1045/ 60007D4 :                     ; ====================================================================
(1) 1046/ 60007D4 :                     ; ----------------------------------------------------------------
(1) 1047/ 60007D4 :                     ; MARS System features
(1) 1048/ 60007D4 :                     ; ----------------------------------------------------------------
(1) 1049/ 60007D4 :                     
(1) 1050/ 60007D4 :                     		include "system/mars/video.asm"
(2)    1/ 60007D4 :                     ; ====================================================================
(2)    2/ 60007D4 :                     ; ----------------------------------------------------------------
(2)    3/ 60007D4 :                     ; 32X Video
(2)    4/ 60007D4 :                     ;
(2)    5/ 60007D4 :                     ; Some routines are located on the cache.asm for
(2)    6/ 60007D4 :                     ; speedup reasons.
(2)    7/ 60007D4 :                     ; ----------------------------------------------------------------
(2)    8/ 60007D4 :                     
(2)    9/ 60007D4 :                     ; --------------------------------------------------------
(2)   10/ 60007D4 :                     ; Settings
(2)   11/ 60007D4 :                     ; --------------------------------------------------------
(2)   12/ 60007D4 :                     
(2)   13/ 60007D4 : =$12800             MAX_SCRNBUFF	equ $12800	; MAX storage for each screen mode
(2)   14/ 60007D4 : =$1FD80             FBVRAM_LAST	equ $1FD80	; BLANK line (the very last one usable)
(2)   15/ 60007D4 :                     
(2)   16/ 60007D4 :                     ; Screen mode 02
(2)   17/ 60007D4 : =$1E000             FBVRAM_PATCH	equ $1E000	; Framebuffer location for the affected XShift lines
(2)   18/ 60007D4 :                     
(2)   19/ 60007D4 :                     ; Screen mode 04
(2)   20/ 60007D4 : =$100               MAX_FACES	equ 256
(2)   21/ 60007D4 : =$140               MAX_SVDP_PZ	equ 256+64
(2)   22/ 60007D4 : =$FFFFFFFFFF..      MAX_ZDIST	equ -$C00	; Max 3D drawing distance (-Z)
(2)   23/ 60007D4 :                     
(2)   24/ 60007D4 :                     ; --------------------------------------------------------
(2)   25/ 60007D4 :                     ; Variables
(2)   26/ 60007D4 :                     ; --------------------------------------------------------
(2)   27/ 60007D4 :                     
(2)   28/ 60007D4 :                     ; Screen mode 04
(2)   29/ 60007D4 : =$140               SCREEN_WIDTH	equ 320		; Screen width and height positions used
(2)   30/ 60007D4 : =$E0                SCREEN_HEIGHT	equ 224		; by 3D object rendering
(2)   31/ 60007D4 : =$80                PLGN_TEXURE	equ %10000000	; plypz_type (MSB byte)
(2)   32/ 60007D4 : =$40                PLGN_TRI	equ %01000000
(2)   33/ 60007D4 :                     
(2)   34/ 60007D4 :                     ; --------------------------------------------------------
(2)   35/ 60007D4 :                     ; Structs
(2)   36/ 60007D4 :                     ; --------------------------------------------------------
(2)   37/ 60007D4 :                     
(2)   38/ 60007D4 :                     ; Note: some structs are located on shared.asm
(2)   39/ 60007D4 :                     ; Be careful modifing these...
(2)   40/ 60007D4 :                     ; The SH2 has extrange limitation with indexing, bytes go first.
(2)   41/ 60007D4 :                     ; (don't forget to align it)
(2)   42/ 60007D4 :                     
(2)   43/ 60007D4 : (MACRO)             		struct 0
(2)   43/ 60007D4 : =$60007D4           GLBL_LASTPC     set *
(2)   43/   26B94 :                                     dephase
(2)   43/   26B94 : =$26B94             GLBL_LASTORG    set *
(2)   43/       0 :                                     phase 0
(2)   44/       0 :                     mbg_flags	ds.b 1		; Current type of pixel-data: Indexed or Direct
(2)   45/       1 :                     mbg_mapblk	ds.b 1		; Map block size: 8, 16, 32...
(2)   46/       2 :                     mbg_xset	ds.b 1		; X-counter
(2)   47/       3 :                     mbg_yset	ds.b 1		; Y-counter
(2)   48/       4 :                     mbg_xpos_old	ds.w 1
(2)   49/       6 :                     mbg_ypos_old	ds.w 1
(2)   50/       8 :                     mbg_xinc_l	ds.w 1
(2)   51/       A :                     mbg_xinc_r	ds.w 1
(2)   52/       C :                     mbg_yinc_u	ds.w 1
(2)   53/       E :                     mbg_yinc_d	ds.w 1
(2)   54/      10 :                     mbg_width	ds.w 1
(2)   55/      12 :                     mbg_height	ds.w 1
(2)   56/      14 :                     mbg_fbpos_y	ds.w 1		; TOP Y position, multiply by WIDTH externally
(2)   57/      16 :                     mbg_intrl_blk	ds.w 1		; Block size
(2)   58/      18 :                     mbg_intrl_w	ds.w 1		; Internal scrolling Width (MUST be larger than 320)
(2)   59/      1A :                     mbg_intrl_h	ds.w 1		; Internal scrolling Height
(2)   60/      1C :                     mbg_intrl_size	ds.l 1		;
(2)   61/      20 :                     mbg_data	ds.l 1		; Bitmap data or tiles
(2)   62/      24 :                     mbg_map		ds.l 1
(2)   63/      28 :                     mbg_fbpos	ds.l 1		; Framebuffer currrent TOPLEFT position
(2)   64/      2C :                     mbg_fbdata	ds.l 1		; Pixeldata located on Framebuffer
(2)   65/      30 :                     mbg_rfill	ds.l 1		; Refill buffer
(2)   66/      34 :                     mbg_indxinc	ds.l 1		; Index increment (NOTE: for all 4 pixels)
(2)   67/      38 :                     mbg_xpos	ds.l 1		; 0000.0000
(2)   68/      3C :                     mbg_ypos	ds.l 1		; 0000.0000
(2)   69/      40 :                     sizeof_marsbg	ds.l 0
(2)   70/      40 : (MACRO)             		finish
(2)   70/       0 :                                     !org GLBL_LASTORG
(2)   70/ 60007D4 :                                     phase GLBL_LASTPC
(2)   71/ 60007D4 :                     
(2)   72/ 60007D4 :                     ; Current camera view values
(2)   73/ 60007D4 : (MACRO)             		struct 0
(2)   73/ 60007D4 : =$60007D4           GLBL_LASTPC     set *
(2)   73/   26B94 :                                     dephase
(2)   73/   26B94 : =$26B94             GLBL_LASTORG    set *
(2)   73/       0 :                                     phase 0
(2)   74/       0 :                     cam_x_pos	ds.l 1			; X position $000000.00
(2)   75/       4 :                     cam_y_pos	ds.l 1			; Y position $000000.00
(2)   76/       8 :                     cam_z_pos	ds.l 1			; Z position $000000.00
(2)   77/       C :                     cam_x_rot	ds.l 1			; X rotation $000000.00
(2)   78/      10 :                     cam_y_rot	ds.l 1			; Y rotation $000000.00
(2)   79/      14 :                     cam_z_rot	ds.l 1			; Z rotation $000000.00
(2)   80/      18 :                     ; cam_animdata	ds.l 1			; Model animation data pointer, zero: no animation
(2)   81/      18 :                     ; cam_animframe	ds.l 1			; Current frame in animation
(2)   82/      18 :                     ; cam_animtimer	ds.l 1			; Animation timer
(2)   83/      18 :                     ; cam_animspd	ds.l 1			; Animation speed
(2)   84/      18 :                     sizeof_camera	ds.l 0
(2)   85/      18 : (MACRO)             		finish
(2)   85/       0 :                                     !org GLBL_LASTORG
(2)   85/ 60007D4 :                                     phase GLBL_LASTPC
(2)   86/ 60007D4 :                     
(2)   87/ 60007D4 : (MACRO)             		struct 0
(2)   87/ 60007D4 : =$60007D4           GLBL_LASTPC     set *
(2)   87/   26B94 :                                     dephase
(2)   87/   26B94 : =$26B94             GLBL_LASTORG    set *
(2)   87/       0 :                                     phase 0
(2)   88/       0 :                     plypz_type	ds.l 1		; Type + Material settings (width + index add)
(2)   89/       4 :                     plypz_mtrl	ds.l 1		; Material data (ROM or SDRAM)
(2)   90/       8 :                     plypz_ytb	ds.l 1		; Ytop | Ybottom (0-slot is free)
(2)   91/       C :                     plypz_xl	ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   92/      10 :                     plypz_src_xl	ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   93/      14 :                     plypz_src_yl	ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   94/      18 :                     plypz_xl_dx	ds.l 1		; 0000.0000
(2)   95/      1C :                     plypz_xr_dx	ds.l 1		; 0000.0000
(2)   96/      20 :                     plypz_src_xl_dx	ds.l 1
(2)   97/      24 :                     plypz_src_xr_dx	ds.l 1
(2)   98/      28 :                     plypz_src_yl_dx	ds.l 1
(2)   99/      2C :                     plypz_src_yr_dx	ds.l 1
(2)  100/      30 :                     sizeof_plypz	ds.l 0
(2)  101/      30 : (MACRO)             		finish
(2)  101/       0 :                                     !org GLBL_LASTORG
(2)  101/ 60007D4 :                                     phase GLBL_LASTPC
(2)  102/ 60007D4 :                     
(2)  103/ 60007D4 :                     ; Polygon data, Size: $38
(2)  104/ 60007D4 : (MACRO)             		struct 0
(2)  104/ 60007D4 : =$60007D4           GLBL_LASTPC     set *
(2)  104/   26B94 :                                     dephase
(2)  104/   26B94 : =$26B94             GLBL_LASTORG    set *
(2)  104/       0 :                                     phase 0
(2)  105/       0 :                     polygn_type	ds.l 1		; %MSww wwww 0000 aaaa | %MS w-Texture width, a-Pixel increment
(2)  106/       4 :                     polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)  107/       8 :                     polygn_points	ds.l 4*2	; X/Y positions
(2)  108/      28 :                     polygn_srcpnts	ds.w 4*2	; X/Y texture points (WORDS), ignored on solid colors
(2)  109/      38 :                     sizeof_polygn	ds.l 0
(2)  110/      38 : (MACRO)             		finish
(2)  110/       0 :                                     !org GLBL_LASTORG
(2)  110/ 60007D4 :                                     phase GLBL_LASTPC
(2)  111/ 60007D4 :                     
(2)  112/ 60007D4 :                     ; ====================================================================
(2)  113/ 60007D4 :                     ; ----------------------------------------------------------------
(2)  114/ 60007D4 :                     ; Init MARS Video
(2)  115/ 60007D4 :                     ; ----------------------------------------------------------------
(2)  116/ 60007D4 :                     
(2)  117/ 60007D4 :                     		align 4
(2)  118/ 60007D4 :                     MarsVideo_Init:
(2)  119/ 60007D4 : 4F22                		sts	pr,@-r15
(2)  120/ 60007D6 : D10F                		mov	#_sysreg,r1
(2)  121/ 60007D8 : 9024                		mov 	#FM,r0				; Set SVDP permission to SH2. (but the Genesis
(2)  122/ 60007DA : 8010                  		mov.b	r0,@(adapter,r1)		; will control the pallete using DREQ)
(2)  123/ 60007DC : D10E                		mov 	#_vdpreg,r1
(2)  124/ 60007DE : E000                		mov	#0,r0				; Start at blank
(2)  125/ 60007E0 : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)  126/ 60007E2 : D20E                		mov	#_framebuffer,r2		; Make default nametables
(2)  127/ 60007E4 : B006                		bsr	.def_fb
(2)  128/ 60007E6 : 0009                		nop
(2)  129/ 60007E8 : B004                		bsr	.def_fb
(2)  130/ 60007EA : 0009                		nop
(2)  131/ 60007EC : 4F26                		lds	@r15+,pr
(2)  132/ 60007EE : 000B                		rts
(2)  133/ 60007F0 : 0009                		nop
(2)  134/ 60007F2 :                     		align 4
(2)  135/ 60007F4 :                     
(2)  136/ 60007F4 :                     ; Make default linetable, waits for frameswap.
(2)  137/ 60007F4 :                     .def_fb:
(2)  138/ 60007F4 : 6323                		mov	r2,r3
(2)  139/ 60007F6 : D00A                		mov	#FBVRAM_LAST/2,r0		; very last usable (blank) line
(2)  140/ 60007F8 : 9415                		mov	#240,r4
(2)  141/ 60007FA :                     .nxt_lne:
(2)  142/ 60007FA : 2301                		mov.w	r0,@r3
(2)  143/ 60007FC : 4410                		dt	r4
(2)  144/ 60007FE : 8FFC                		bf/s	.nxt_lne
(2)  145/ 6000800 : 7302                		add	#2,r3
(2)  146/ 6000802 : 841B                		mov.b	@(framectl,r1),r0		; Frameswap & wait
(2)  147/ 6000804 : CA01                		xor	#1,r0
(2)  148/ 6000806 : 6303                		mov	r0,r3
(2)  149/ 6000808 : 801B                		mov.b	r0,@(framectl,r1)
(2)  150/ 600080A : 841B                .wait_frm:	mov.b	@(framectl,r1),r0
(2)  151/ 600080C : 3300                		cmp/eq	r0,r3
(2)  152/ 600080E : 8BFC                		bf	.wait_frm
(2)  153/ 6000810 : 000B                		rts
(2)  154/ 6000812 : 0009                		nop
(2)  155/ 6000814 :                     		align 4
(2)  156/ 6000814 : 2000 4000 2000 4100 		ltorg
                    2400 0000 0000 FEC0 
                    0080 00F0           
(2)  157/ 6000828 :                     		align 4
(2)  158/ 6000828 :                     
(2)  159/ 6000828 :                     ; ====================================================================
(2)  160/ 6000828 :                     ; ----------------------------------------------------------------
(2)  161/ 6000828 :                     ; Subroutines
(2)  162/ 6000828 :                     ; ----------------------------------------------------------------
(2)  163/ 6000828 :                     
(2)  164/ 6000828 :                     ; --------------------------------------------------------
(2)  165/ 6000828 :                     ; VideoMars_ClearScreen
(2)  166/ 6000828 :                     ;
(2)  167/ 6000828 :                     ; Clears screen using VDPFILL
(2)  168/ 6000828 :                     ;
(2)  169/ 6000828 :                     ; Input:
(2)  170/ 6000828 :                     ; r1 - VRAM location
(2)  171/ 6000828 :                     ; r2 - Width
(2)  172/ 6000828 :                     ; r3 - height
(2)  173/ 6000828 :                     ; r4 - Pixel(s) to write
(2)  174/ 6000828 :                     ; --------------------------------------------------------
(2)  175/ 6000828 :                     
(2)  176/ 6000828 :                     ; TODO: check if this still works on SDRAM.
(2)  177/ 6000828 :                     
(2)  178/ 6000828 :                     MarsVideo_ClearScreen:
(2)  179/ 6000828 : 4101                		shlr	r1
(2)  180/ 600082A : 6513                		mov	r1,r5
(2)  181/ 600082C : D83B                		mov	#_vdpreg,r8
(2)  182/ 600082E :                     .fb_loop:
(2)  183/ 600082E : 6023                		mov	r2,r0
(2)  184/ 6000830 : 8182                		mov.w	r0,@(filllength,r8)
(2)  185/ 6000832 : 6013                		mov	r1,r0
(2)  186/ 6000834 : 8183                		mov.w	r0,@(fillstart,r8)
(2)  187/ 6000836 : 6043                		mov	r4,r0
(2)  188/ 6000838 : 8184                		mov.w	r0,@(filldata,r8)
(2)  189/ 600083A : 8585                .wait_fb2:	mov.w	@(vdpsts,r8),r0
(2)  190/ 600083C : C802                		tst	#%10,r0
(2)  191/ 600083E : 8BFC                		bf	.wait_fb2
(2)  192/ 6000840 : 4310                		dt	r3
(2)  193/ 6000842 : 8FF4                		bf/s	.fb_loop
(2)  194/ 6000844 : 315C                		add	r5,r1
(2)  195/ 6000846 :                     .no_redraw_2:
(2)  196/ 6000846 : 000B                		rts
(2)  197/ 6000848 : 0009                		nop
(2)  198/ 600084A :                     		align 4
(2)  199/ 600084C :                     
(2)  200/ 600084C :                     ; --------------------------------------------------------
(2)  201/ 600084C :                     ; MarsVideo_ResetNameTbl
(2)  202/ 600084C :                     ;
(2)  203/ 600084C :                     ; Reset the nametable, makes all the lines point to
(2)  204/ 600084C :                     ; a blank line.
(2)  205/ 600084C :                     ; --------------------------------------------------------
(2)  206/ 600084C :                     
(2)  207/ 600084C :                     MarsVideo_ResetNameTbl:
(2)  208/ 600084C : D134                		mov	#_framebuffer,r1
(2)  209/ 600084E : D035                		mov	#FBVRAM_LAST,r0
(2)  210/ 6000850 : 9270                		mov	#240,r2
(2)  211/ 6000852 :                     .nxt_lne2:
(2)  212/ 6000852 : 2101                		mov.w	r0,@r1
(2)  213/ 6000854 : 4210                		dt	r2
(2)  214/ 6000856 : 8FFC                		bf/s	.nxt_lne2
(2)  215/ 6000858 : 7102                		add	#2,r1
(2)  216/ 600085A : 000B                		rts
(2)  217/ 600085C : 0009                		nop
(2)  218/ 600085E :                     		align 4
(2)  219/ 6000860 :                     
(2)  220/ 6000860 :                     ; --------------------------------------------------------
(2)  221/ 6000860 :                     ; MarsVideo_MakeNametbl
(2)  222/ 6000860 :                     ;
(2)  223/ 6000860 :                     ; Builds the nametable for a normal screen, if
(2)  224/ 6000860 :                     ; marsGbl_WaveEnable is set, it will add a
(2)  225/ 6000860 :                     ; wave effect to the linetable (in WORDS)
(2)  226/ 6000860 :                     ;
(2)  227/ 6000860 :                     ; Input:
(2)  228/ 6000860 :                     ; r1 | Background buffer
(2)  229/ 6000860 :                     ; r2 | Width (Width*2 for Direct color)
(2)  230/ 6000860 :                     ; r3 | Height
(2)  231/ 6000860 :                     ; r4 | Y line position
(2)  232/ 6000860 :                     ;
(2)  233/ 6000860 :                     ; NOTE: after finishing, for Indexed mode
(2)  234/ 6000860 :                     ; call MarsVideo_FixTblShift before swapping the
(2)  235/ 6000860 :                     ; framebuffer.
(2)  236/ 6000860 :                     ; --------------------------------------------------------
(2)  237/ 6000860 :                     
(2)  238/ 6000860 :                     MarsVideo_MakeNameTbl:
(2)  239/ 6000860 : DA2F                		mov	#_framebuffer,r10
(2)  240/ 6000862 : 4400                		shll	r4
(2)  241/ 6000864 : 3A4C                		add	r4,r10
(2)  242/ 6000866 : D52D                		mov 	#_vdpreg,r5
(2)  243/ 6000868 : 8451                		mov.b	@(bitmapmd,r5),r0	; Cannot mess with the RLE lines.
(2)  244/ 600086A : C903                		and	#%11,r0
(2)  245/ 600086C : 8803                		cmp/eq	#3,r0
(2)  246/ 600086E : 892C                		bt	.cant_use
(2)  247/ 6000870 : C521                		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  248/ 6000872 : 2008                		tst	r0,r0
(2)  249/ 6000874 : 8922                		bt	.linetbl_normal
(2)  250/ 6000876 :                     
(2)  251/ 6000876 :                     	; Special linetable with
(2)  252/ 6000876 :                     	; wave deformation.
(2)  253/ 6000876 : C522                		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  254/ 6000878 : 6403                		mov	r0,r4
(2)  255/ 600087A : C525                		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  256/ 600087C : 955B                		mov	#$7FF,r5
(2)  257/ 600087E : 304C                		add	r4,r0			; wave speed
(2)  258/ 6000880 : 2059                		and	r5,r0
(2)  259/ 6000882 : C125                		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  260/ 6000884 : 6703                		mov	r0,r7
(2)  261/ 6000886 : C523                		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  262/ 6000888 : 6503                		mov	r0,r5
(2)  263/ 600088A : C524                		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  264/ 600088C : 6403                		mov	r0,r4
(2)  265/ 600088E : E600                		mov	#0,r6
(2)  266/ 6000890 : 9B51                		mov	#$7FF,r11
(2)  267/ 6000892 : DC25                		mov	#sin_table,r12
(2)  268/ 6000894 :                     .nxt_lne:
(2)  269/ 6000894 : 6073                		mov	r7,r0
(2)  270/ 6000896 : 374C                		add	r4,r7			; wave distord
(2)  271/ 6000898 : 27B9                		and	r11,r7
(2)  272/ 600089A : 4008                		shll2	r0
(2)  273/ 600089C : 09CE                		mov	@(r0,r12),r9
(2)  274/ 600089E : 395D                		dmuls	r5,r9
(2)  275/ 60008A0 : 091A                		sts	macl,r9
(2)  276/ 60008A2 : 4929                		shlr16	r9
(2)  277/ 60008A4 : 699F                		exts.w	r9,r9
(2)  278/ 60008A6 : 6013                		mov	r1,r0
(2)  279/ 60008A8 : 306C                		add	r6,r0
(2)  280/ 60008AA : 309C                		add	r9,r0
(2)  281/ 60008AC : 4001                		shlr	r0
(2)  282/ 60008AE : 2A01                		mov.w	r0,@r10
(2)  283/ 60008B0 : 362C                		add	r2,r6
(2)  284/ 60008B2 : 4310                		dt	r3
(2)  285/ 60008B4 : 8FEE                		bf/s	.nxt_lne
(2)  286/ 60008B6 : 7A02                		add	#2,r10
(2)  287/ 60008B8 : 000B                		rts
(2)  288/ 60008BA : 0009                		nop
(2)  289/ 60008BC :                     		align 4
(2)  290/ 60008BC :                     
(2)  291/ 60008BC :                     .linetbl_normal:
(2)  292/ 60008BC : 4101                		shlr	r1
(2)  293/ 60008BE : 4201                		shlr	r2
(2)  294/ 60008C0 :                     .nxt_lne2:
(2)  295/ 60008C0 : 2A11                		mov.w	r1,@r10
(2)  296/ 60008C2 : 312C                		add	r2,r1
(2)  297/ 60008C4 : 4310                		dt	r3
(2)  298/ 60008C6 : 8FFB                		bf/s	.nxt_lne2
(2)  299/ 60008C8 : 7A02                		add	#2,r10
(2)  300/ 60008CA :                     .cant_use:
(2)  301/ 60008CA : 000B                		rts
(2)  302/ 60008CC : 0009                		nop
(2)  303/ 60008CE :                     		align 4
(2)  304/ 60008D0 :                     
(2)  305/ 60008D0 :                     ; --------------------------------------------------------
(2)  306/ 60008D0 :                     ; MarsVideo_FixTblShift
(2)  307/ 60008D0 :                     ;
(2)  308/ 60008D0 :                     ; Call this before swaping the framebuffer
(2)  309/ 60008D0 :                     ; to solve a HARDWARE BUG that causes
(2)  310/ 60008D0 :                     ; Xshift not to work with lines that end with $xxFF
(2)  311/ 60008D0 :                     ;
(2)  312/ 60008D0 :                     ; Emulators ignore this.
(2)  313/ 60008D0 :                     ; --------------------------------------------------------
(2)  314/ 60008D0 :                     
(2)  315/ 60008D0 :                     MarsVideo_FixTblShift:
(2)  316/ 60008D0 :                     	; TODO: A check for direct mode and RLE.
(2)  317/ 60008D0 : DE12                		mov	#_vdpreg,r14
(2)  318/ 60008D2 : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  319/ 60008D4 : C903                		and	#%11,r0
(2)  320/ 60008D6 : 8801                		cmp/eq	#1,r0
(2)  321/ 60008D8 : 8B1E                		bf	.ptchset
(2)  322/ 60008DA : C519                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set?
(2)  323/ 60008DC : C901                		and	#1,r0
(2)  324/ 60008DE : 2008                		tst	r0,r0
(2)  325/ 60008E0 : 891A                		bt	.ptchset
(2)  326/ 60008E2 :                     
(2)  327/ 60008E2 : DE0F                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  328/ 60008E4 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  329/ 60008E6 : DC11                		mov	#_framebuffer+FBVRAM_PATCH,r12	; r12 - Framebuffer output for the patched pixel lines
(2)  330/ 60008E8 : 9B24                		mov	#240,r11			; r11 - Lines to check
(2)  331/ 60008EA : 9A25                		mov	#$FF,r10			; r10 - AND byte to check ($FF)
(2)  332/ 60008EC : D910                		mov	#$FFFF,r9			;  r9 - AND word limit
(2)  333/ 60008EE :                     .loop:
(2)  334/ 60008EE : 60D1                		mov.w	@r13,r0
(2)  335/ 60008F0 : 2099                		and	r9,r0
(2)  336/ 60008F2 : 6703                		mov	r0,r7
(2)  337/ 60008F4 : 20A9                		and	r10,r0
(2)  338/ 60008F6 : 30A0                		cmp/eq	r10,r0
(2)  339/ 60008F8 : 8B0B                		bf	.tblexit
(2)  340/ 60008FA : 4700                		shll	r7
(2)  341/ 60008FC : 37EC                		add	r14,r7
(2)  342/ 60008FE : 60C3                		mov	r12,r0
(2)  343/ 6000900 : 4001                		shlr	r0
(2)  344/ 6000902 : 2D01                		mov.w	r0,@r13
(2)  345/ 6000904 : 9319                		mov	#(320+4)/2,r3
(2)  346/ 6000906 :                     .copy:
(2)  347/ 6000906 : 6071                		mov.w	@r7,r0
(2)  348/ 6000908 : 2C01                		mov.w	r0,@r12
(2)  349/ 600090A : 7702                		add	#2,r7
(2)  350/ 600090C : 4310                		dt	r3
(2)  351/ 600090E : 8FFA                		bf/s	.copy
(2)  352/ 6000910 : 7C02                		add	#2,r12
(2)  353/ 6000912 :                     .tblexit:
(2)  354/ 6000912 : 4B10                		dt	r11
(2)  355/ 6000914 : 8FEB                		bf/s	.loop
(2)  356/ 6000916 : 7D02                		add	#2,r13
(2)  357/ 6000918 :                     .ptchset:
(2)  358/ 6000918 : 000B                		rts
(2)  359/ 600091A : 0009                		nop
(2)  360/ 600091C :                     		align 4
(2)  361/ 600091C : 2000 4100 2400 0000 		ltorg
                    0001 FD80 0600 2DB0 
                    2401 E000 0000 FFFF 
                    00F0 07FF 00FF 00A2 
(2)  362/ 600093C :                     		align 4
(2)  363/ 600093C :                     
(2)  364/ 600093C :                     ; --------------------------------------------------------
(2)  365/ 600093C :                     ; MarsVideo_SetWatchdog
(2)  366/ 600093C :                     ;
(2)  367/ 600093C :                     ; Prepares watchdog interrupt for Master
(2)  368/ 600093C :                     ;
(2)  369/ 600093C :                     ; Input:
(2)  370/ 600093C :                     ; r1 - Watchdog CPU clock divider
(2)  371/ 600093C :                     ; r2 - Watchdog Pre-timer
(2)  372/ 600093C :                     ; --------------------------------------------------------
(2)  373/ 600093C :                     
(2)  374/ 600093C :                     MarsVideo_SetWatchdog:
(2)  375/ 600093C : D00D                		mov	#RAM_Mars_SVdpDrwList,r0		; Reset DDA pieces Read/Write points
(2)  376/ 600093E : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)		; And counter
(2)  377/ 6000940 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  378/ 6000942 : C202                		mov	r0,@(marsGbl_PlyPzList_Start,gbr)
(2)  379/ 6000944 : D00C                		mov	#RAM_Mars_SVdpDrwList_E,r0
(2)  380/ 6000946 : C203                		mov	r0,@(marsGbl_PlyPzList_End,gbr)
(2)  381/ 6000948 :                     
(2)  382/ 6000948 : E000                		mov	#0,r0
(2)  383/ 600094A : C116                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  384/ 600094C : C114                		mov.w	r0,@(marsGbl_WdgStatus,gbr)
(2)  385/ 600094E : 0402                		stc	sr,r4
(2)  386/ 6000950 : 9014                		mov	#$F0,r0
(2)  387/ 6000952 : 400E                		ldc 	r0,sr
(2)  388/ 6000954 : 9313                		mov.l	#_CCR,r3				; Refresh Cache
(2)  389/ 6000956 : E008                		mov	#%00001000,r0				; Two-way mode
(2)  390/ 6000958 : 2301                		mov.w	r0,@r3
(2)  391/ 600095A : E019                		mov	#%00011001,r0				; Cache purge / Two-way mode / Cache ON
(2)  392/ 600095C : 2301                		mov.w	r0,@r3
(2)  393/ 600095E : 930F                		mov	#$FFFFFE80,r3
(2)  394/ 6000960 : 900F                		mov.w	#$5A00,r0				; Watchdog pre-timer
(2)  395/ 6000962 : 202B                		or	r2,r0
(2)  396/ 6000964 : 2301                		mov.w	r0,@r3
(2)  397/ 6000966 : 900D                		mov.w	#$A538,r0				; Enable Watchdog
(2)  398/ 6000968 : 201B                		or	r1,r0
(2)  399/ 600096A : 2301                		mov.w	r0,@r3
(2)  400/ 600096C : 440E                		ldc	r4,sr
(2)  401/ 600096E : 000B                		rts
(2)  402/ 6000970 : 0009                		nop
(2)  403/ 6000972 :                     		align 4
(2)  404/ 6000974 : 2600 8E40 2600 CA40 		ltorg
                    00F0 FE92 FE80 5A00 
                    A538                
(2)  405/ 6000986 :                     		align 4
(2)  406/ 6000988 :                     
(2)  407/ 6000988 :                     ; 256-color Palette routines were here...
(2)  408/ 6000988 :                     ; but the 68k controls the pallete now.
(2)  409/ 6000988 :                     ; (Don't forget to transfer your changes using DREQ)
(2)  410/ 6000988 :                     
(2)  411/ 6000988 :                     ; ====================================================================
(2)  412/ 6000988 :                     ; ----------------------------------------------------------------
(2)  413/ 6000988 :                     ; Screen mode $02
(2)  414/ 6000988 :                     ; ----------------------------------------------------------------
(2)  415/ 6000988 :                     
(2)  416/ 6000988 :                     ; --------------------------------------------------------
(2)  417/ 6000988 :                     ; MarsVideo_MkScrlField
(2)  418/ 6000988 :                     ;
(2)  419/ 6000988 :                     ; This makes a new internal scrolling background
(2)  420/ 6000988 :                     ;
(2)  421/ 6000988 :                     ; Call this first to setup the internal scrolling values,
(2)  422/ 6000988 :                     ; then after this call MarsVideo_SetBg to set your
(2)  423/ 6000988 :                     ; source image and it's size.
(2)  424/ 6000988 :                     ;
(2)  425/ 6000988 :                     ; Input:
(2)  426/ 6000988 :                     ; r1 | Background buffer to setup
(2)  427/ 6000988 :                     ; r2 | Output framebuffer data
(2)  428/ 6000988 :                     ; r3 | Scroll block size (MINIMUM: 4 pixels)
(2)  429/ 6000988 :                     ; r4 | Scroll visible width
(2)  430/ 6000988 :                     ; r5 | Scroll visible height
(2)  431/ 6000988 :                     ; r6 | Flags: %000000dt
(2)  432/ 6000988 :                     ;      t - Full picture or Tile map
(2)  433/ 6000988 :                     ;      d - Indexed or Direct
(2)  434/ 6000988 :                     ;
(2)  435/ 6000988 :                     ; Breaks:
(2)  436/ 6000988 :                     ; r0,r4-r6,macl
(2)  437/ 6000988 :                     ; --------------------------------------------------------
(2)  438/ 6000988 :                     
(2)  439/ 6000988 :                     MarsVideo_MkScrlField:
(2)  440/ 6000988 : 6063                		mov	r6,r0
(2)  441/ 600098A : C901                		and	#1,r0
(2)  442/ 600098C : 2008                		tst	r0,r0
(2)  443/ 600098E : 8900                		bt	.no_indx
(2)  444/ 6000990 : 4400                		shll	r4
(2)  445/ 6000992 :                     .no_indx:
(2)  446/ 6000992 : 343C                		add	r3,r4		; add block to width/height
(2)  447/ 6000994 : 353C                		add	r3,r5
(2)  448/ 6000996 : 112B                		mov	r2,@(mbg_fbdata,r1)
(2)  449/ 6000998 : 6033                		mov	r3,r0
(2)  450/ 600099A : 811B                		mov.w	r0,@(mbg_intrl_blk,r1)
(2)  451/ 600099C : 6043                		mov	r4,r0
(2)  452/ 600099E : 811C                		mov.w	r0,@(mbg_intrl_w,r1)
(2)  453/ 60009A0 : 6053                		mov	r5,r0
(2)  454/ 60009A2 : 811D                		mov.w	r0,@(mbg_intrl_h,r1)
(2)  455/ 60009A4 : 254E                		mulu	r4,r5
(2)  456/ 60009A6 : 001A                		sts	macl,r0
(2)  457/ 60009A8 : 1107                		mov	r0,@(mbg_intrl_size,r1)
(2)  458/ 60009AA : 6063                		mov	r6,r0
(2)  459/ 60009AC : 8010                		mov.b	r0,@(mbg_flags,r1)
(2)  460/ 60009AE :                     
(2)  461/ 60009AE : 200A                		xor	r0,r0
(2)  462/ 60009B0 : 8012                		mov.b	r0,@(mbg_xset,r1)
(2)  463/ 60009B2 : 8013                		mov.b	r0,@(mbg_yset,r1)
(2)  464/ 60009B4 : 8112                		mov.w	r0,@(mbg_xpos_old,r1)
(2)  465/ 60009B6 : 8113                		mov.w	r0,@(mbg_ypos_old,r1)
(2)  466/ 60009B8 : 110A                		mov	r0,@(mbg_fbpos,r1)
(2)  467/ 60009BA : 811A                		mov.w	r0,@(mbg_fbpos_y,r1)
(2)  468/ 60009BC : 000B                		rts
(2)  469/ 60009BE : 0009                		nop
(2)  470/ 60009C0 :                     		align 4
(2)  471/ 60009C0 :                     		ltorg
(2)  472/ 60009C0 :                     
(2)  473/ 60009C0 :                     ; --------------------------------------------------------
(2)  474/ 60009C0 :                     ; MarsVideo_SetScrlBg
(2)  475/ 60009C0 :                     ;
(2)  476/ 60009C0 :                     ; Sets the source data for the background
(2)  477/ 60009C0 :                     ;
(2)  478/ 60009C0 :                     ; Input:
(2)  479/ 60009C0 :                     ; r1 | Background buffer
(2)  480/ 60009C0 :                     ; r2 | Source image location (ROM or RAM)
(2)  481/ 60009C0 :                     ; r3 | Source image Width
(2)  482/ 60009C0 :                     ; r4 | Source image Height
(2)  483/ 60009C0 :                     ;
(2)  484/ 60009C0 :                     ; Breaks:
(2)  485/ 60009C0 :                     ; r0,r1
(2)  486/ 60009C0 :                     ;
(2)  487/ 60009C0 :                     ; NOTES:
(2)  488/ 60009C0 :                     ; - Width and Height must be aligned by the current
(2)  489/ 60009C0 :                     ; buffer's block size
(2)  490/ 60009C0 :                     ; - ROM data is NOT protected
(2)  491/ 60009C0 :                     ; --------------------------------------------------------
(2)  492/ 60009C0 :                     
(2)  493/ 60009C0 :                     MarsVideo_SetScrlBg:
(2)  494/ 60009C0 : 1128                		mov	r2,@(mbg_data,r1)
(2)  495/ 60009C2 : 8410                		mov.b	@(mbg_flags,r1),r0
(2)  496/ 60009C4 : C902                		and	#%10,r0
(2)  497/ 60009C6 : 2008                		tst	r0,r0
(2)  498/ 60009C8 : 8900                		bt	.indxmode
(2)  499/ 60009CA : 4300                		shll	r3
(2)  500/ 60009CC :                     .indxmode:
(2)  501/ 60009CC : 6033                		mov	r3,r0
(2)  502/ 60009CE : 8118                		mov.w	r0,@(mbg_width,r1)
(2)  503/ 60009D0 : 6043                		mov	r4,r0
(2)  504/ 60009D2 : 8119                		mov.w	r0,@(mbg_height,r1)
(2)  505/ 60009D4 : 000B                		rts
(2)  506/ 60009D6 : 0009                		nop
(2)  507/ 60009D8 :                     		align 4
(2)  508/ 60009D8 :                     		ltorg
(2)  509/ 60009D8 :                     
(2)  510/ 60009D8 :                     ; --------------------------------------------------------
(2)  511/ 60009D8 :                     ; MarsVideo_ShowScrlBg
(2)  512/ 60009D8 :                     ;
(2)  513/ 60009D8 :                     ; Show the background on the screen.
(2)  514/ 60009D8 :                     ;
(2)  515/ 60009D8 :                     ; Input:
(2)  516/ 60009D8 :                     ; r1 | Background buffer
(2)  517/ 60009D8 :                     ; r2 | Top Y
(2)  518/ 60009D8 :                     ; r3 | Bottom Y
(2)  519/ 60009D8 :                     ;
(2)  520/ 60009D8 :                     ; NOTE: after finishing all your screens
(2)  521/ 60009D8 :                     ; call MarsVideo_FixTblShift before doing frameswap
(2)  522/ 60009D8 :                     ; --------------------------------------------------------
(2)  523/ 60009D8 :                     
(2)  524/ 60009D8 :                     MarsVideo_ShowScrlBg:
(2)  525/ 60009D8 : DE29                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  526/ 60009DA : 5D1B                		mov	@(mbg_fbdata,r1),r13		; r13 - Framebuffer pixeldata position
(2)  527/ 60009DC : 5C17                		mov	@(mbg_intrl_size,r1),r12	; r12 - Full size of screen-scroll
(2)  528/ 60009DE : EB00                		mov	#0,r11				; r11 - line counter
(2)  529/ 60009E0 : 851C                		mov.w	@(mbg_intrl_w,r1),r0
(2)  530/ 60009E2 : 6A03                		mov	r0,r10				; r10 - Next line to add
(2)  531/ 60009E4 :                     
(2)  532/ 60009E4 : 6623                		mov	r2,r6
(2)  533/ 60009E6 : 6023                		mov	r2,r0
(2)  534/ 60009E8 : 4000                		shll	r0
(2)  535/ 60009EA : 3E0C                		add	r0,r14
(2)  536/ 60009EC : 851A                		mov.w	@(mbg_fbpos_y,r1),r0
(2)  537/ 60009EE : 20AE                		mulu	r10,r0
(2)  538/ 60009F0 : 571A                		mov	@(mbg_fbpos,r1),r7
(2)  539/ 60009F2 : 001A                		sts	macl,r0
(2)  540/ 60009F4 : 370C                		add	r0,r7
(2)  541/ 60009F6 :                     
(2)  542/ 60009F6 : C521                		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  543/ 60009F8 : 2008                		tst	r0,r0
(2)  544/ 60009FA : 8B13                		bf	.ln_wavy
(2)  545/ 60009FC :                     .ln_loop:
(2)  546/ 60009FC : 6873                		mov	r7,r8
(2)  547/ 60009FE : 38C3                		cmp/ge	r12,r8
(2)  548/ 6000A00 : 8B00                		bf	.xl_r
(2)  549/ 6000A02 : 38C8                		sub	r12,r8
(2)  550/ 6000A04 :                     .xl_r:
(2)  551/ 6000A04 : 4811                		cmp/pz	r8
(2)  552/ 6000A06 : 8900                		bt	.xl_l
(2)  553/ 6000A08 : 38CC                		add	r12,r8
(2)  554/ 6000A0A :                     .xl_l:
(2)  555/ 6000A0A : 6783                		mov	r8,r7
(2)  556/ 6000A0C : 37AC                		add	r10,r7		; Add Y
(2)  557/ 6000A0E : 38DC                		add	r13,r8		; Add Framebuffer position
(2)  558/ 6000A10 : 4801                		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  559/ 6000A12 : 2E81                		mov.w	r8,@r14		; send to FB's table
(2)  560/ 6000A14 : 7E02                		add	#2,r14
(2)  561/ 6000A16 : 7B02                		add	#2,r11
(2)  562/ 6000A18 : 3630                		cmp/eq	r3,r6
(2)  563/ 6000A1A : 8FEF                		bf/s	.ln_loop
(2)  564/ 6000A1C : 7601                		add	#1,r6
(2)  565/ 6000A1E : 000B                		rts
(2)  566/ 6000A20 : 0009                		nop
(2)  567/ 6000A22 :                     		align 4
(2)  568/ 6000A24 :                     
(2)  569/ 6000A24 :                     .ln_wavy:
(2)  570/ 6000A24 : C522                		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  571/ 6000A26 : 6403                		mov	r0,r4
(2)  572/ 6000A28 : C525                		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  573/ 6000A2A : 952D                		mov	#$7FF,r5
(2)  574/ 6000A2C : 304C                		add	r4,r0			; wave speed
(2)  575/ 6000A2E : 2059                		and	r5,r0
(2)  576/ 6000A30 : C125                		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  577/ 6000A32 : 6903                		mov	r0,r9
(2)  578/ 6000A34 : C523                		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  579/ 6000A36 : 6503                		mov	r0,r5
(2)  580/ 6000A38 : C524                		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  581/ 6000A3A : 6403                		mov	r0,r4
(2)  582/ 6000A3C :                     .ln_loop_w:
(2)  583/ 6000A3C : 9824                		mov	#$7FF,r8
(2)  584/ 6000A3E : 6093                		mov	r9,r0
(2)  585/ 6000A40 : 394C                		add	r4,r9		; wave distord
(2)  586/ 6000A42 : 2989                		and	r8,r9
(2)  587/ 6000A44 : 4008                		shll2	r0
(2)  588/ 6000A46 : D80F                		mov	#sin_table,r8
(2)  589/ 6000A48 : 008E                		mov	@(r0,r8),r0
(2)  590/ 6000A4A : 305D                		dmuls	r5,r0
(2)  591/ 6000A4C : 001A                		sts	macl,r0
(2)  592/ 6000A4E : 4029                		shlr16	r0
(2)  593/ 6000A50 : 600F                		exts.w	r0,r0
(2)  594/ 6000A52 :                     
(2)  595/ 6000A52 : 6873                		mov	r7,r8
(2)  596/ 6000A54 : 38C3                		cmp/ge	r12,r8
(2)  597/ 6000A56 : 8B00                		bf	.wxl_r
(2)  598/ 6000A58 : 38C8                		sub	r12,r8
(2)  599/ 6000A5A :                     .wxl_r:
(2)  600/ 6000A5A : 4811                		cmp/pz	r8
(2)  601/ 6000A5C : 8900                		bt	.wxl_l
(2)  602/ 6000A5E : 38CC                		add	r12,r8
(2)  603/ 6000A60 :                     .wxl_l:
(2)  604/ 6000A60 : 6783                		mov	r8,r7
(2)  605/ 6000A62 : 37AC                		add	r10,r7		; Add Y
(2)  606/ 6000A64 : 38DC                		add	r13,r8		; Add Framebuffer position
(2)  607/ 6000A66 : 380C                		add	r0,r8
(2)  608/ 6000A68 : 4801                		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  609/ 6000A6A : 2E81                		mov.w	r8,@r14		; send to FB's table
(2)  610/ 6000A6C : 7E02                		add	#2,r14
(2)  611/ 6000A6E : 7B02                		add	#2,r11
(2)  612/ 6000A70 : 3630                		cmp/eq	r3,r6
(2)  613/ 6000A72 : 8FE3                		bf/s	.ln_loop_w
(2)  614/ 6000A74 : 7601                		add	#1,r6
(2)  615/ 6000A76 : 000B                		rts
(2)  616/ 6000A78 : 0009                		nop
(2)  617/ 6000A7A :                     		align 4
(2)  618/ 6000A7C :                     
(2)  619/ 6000A7C :                     .no_lines:
(2)  620/ 6000A7C : 000B                		rts
(2)  621/ 6000A7E : 0009                		nop
(2)  622/ 6000A80 :                     		align 4
(2)  623/ 6000A80 : 2400 0000 0600 2DB0 		ltorg
                    07FF                
(2)  624/ 6000A8A :                     
(2)  625/ 6000A8A :                     ; --------------------------------------------------------
(2)  626/ 6000A8A :                     ; MarsVideo_DrawAllBg
(2)  627/ 6000A8A :                     ;
(2)  628/ 6000A8A :                     ; Draws the entire image in the current framebuffer,
(2)  629/ 6000A8A :                     ; this needs to be called twice to write to
(2)  630/ 6000A8A :                     ; both framebuffers
(2)  631/ 6000A8A :                     ;
(2)  632/ 6000A8A :                     ; Input:
(2)  633/ 6000A8A :                     ; r1 - X position ($0000.0000)
(2)  634/ 6000A8A :                     ; r2 - Y position ($0000.0000)
(2)  635/ 6000A8A :                     ; --------------------------------------------------------
(2)  636/ 6000A8A :                     
(2)  637/ 6000A8A :                     		align 4
(2)  638/ 6000A8C :                     MarsVideo_DrawAllBg:
(2)  639/ 6000A8C : 4F22                		sts	pr,@-r15
(2)  640/ 6000A8E : DE55                		mov	#RAM_Mars_BgBuffScrl,r14
(2)  641/ 6000A90 : 50E8                		mov	@(mbg_data,r14),r0
(2)  642/ 6000A92 : 8800                		cmp/eq	#0,r0
(2)  643/ 6000A94 : 896D                		bt	.no_data
(2)  644/ 6000A96 : 6D03                		mov	r0,r13
(2)  645/ 6000A98 : 51EE                		mov	@(mbg_xpos,r14),r1
(2)  646/ 6000A9A : 52EF                		mov	@(mbg_ypos,r14),r2
(2)  647/ 6000A9C : 4129                		shlr16	r1
(2)  648/ 6000A9E : 4229                		shlr16	r2
(2)  649/ 6000AA0 : 611F                		exts.w	r1,r1
(2)  650/ 6000AA2 : 622F                		exts.w	r2,r2
(2)  651/ 6000AA4 : 6013                		mov	r1,r0
(2)  652/ 6000AA6 : 81E2                		mov.w	r0,@(mbg_xpos_old,r14)
(2)  653/ 6000AA8 : 6023                		mov	r2,r0
(2)  654/ 6000AAA : 81E3                		mov.w	r0,@(mbg_ypos_old,r14)
(2)  655/ 6000AAC : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  656/ 6000AAE : 600B                		neg	r0,r0
(2)  657/ 6000AB0 : 2109                		and	r0,r1
(2)  658/ 6000AB2 : 2209                		and	r0,r2
(2)  659/ 6000AB4 :                     
(2)  660/ 6000AB4 : DC4C                		mov	#_framebuffer,r12
(2)  661/ 6000AB6 : 50EB                		mov	@(mbg_fbdata,r14),r0
(2)  662/ 6000AB8 : 3C0C                		add	r0,r12				; r12 - framebuffer output
(2)  663/ 6000ABA : 85E8                		mov.w	@(mbg_width,r14),r0		; r11 - pixel-data WIDTH
(2)  664/ 6000ABC : 6B03                		mov	r0,r11
(2)  665/ 6000ABE : 85EC                		mov.w	@(mbg_intrl_w,r14),r0		; r10 - internal WIDTH
(2)  666/ 6000AC0 : 6A03                		mov	r0,r10
(2)  667/ 6000AC2 : 85E9                		mov.w	@(mbg_height,r14),r0		;  r9 - image WIDTH
(2)  668/ 6000AC4 : 6903                		mov	r0,r9
(2)  669/ 6000AC6 : 85ED                		mov.w	@(mbg_intrl_h,r14),r0		;  r8 - internal HEIGHT
(2)  670/ 6000AC8 : 6803                		mov	r0,r8
(2)  671/ 6000ACA : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0		;  r7 - block size
(2)  672/ 6000ACC : 6703                		mov	r0,r7
(2)  673/ 6000ACE : 667B                		neg	r7,r6				;  r6 - block limit bits
(2)  674/ 6000AD0 : 55E7                		mov	@(mbg_intrl_size,r14),r5	;  r5 - internal WIDTH*HEIGHT
(2)  675/ 6000AD2 : 948B                		mov	#320,r4				;  r4 - max
(2)  676/ 6000AD4 : 84E0                		mov.b	@(mbg_flags,r14),r0
(2)  677/ 6000AD6 : C902                		and	#%10,r0
(2)  678/ 6000AD8 : 2008                		tst	r0,r0
(2)  679/ 6000ADA : 8900                		bt	.indxmode
(2)  680/ 6000ADC : 4400                		shll	r4
(2)  681/ 6000ADE :                     ; 		shll	r11
(2)  682/ 6000ADE :                     .indxmode:
(2)  683/ 6000ADE :                     
(2)  684/ 6000ADE :                     	; Set X/Y draw heads
(2)  685/ 6000ADE :                     .xinit_l:
(2)  686/ 6000ADE : 4111                		cmp/pz	r1
(2)  687/ 6000AE0 : 8901                		bt	.xbg_back
(2)  688/ 6000AE2 : AFFC                		bra	.xinit_l
(2)  689/ 6000AE4 : 31BC                		add	r11,r1
(2)  690/ 6000AE6 :                     .xbg_back:
(2)  691/ 6000AE6 : 31B7                		cmp/gt	r11,r1			; First X limiter
(2)  692/ 6000AE8 : 8B01                		bf	.xbg_inc
(2)  693/ 6000AEA : AFFC                		bra	.xbg_back
(2)  694/ 6000AEC : 31B8                		sub	r11,r1
(2)  695/ 6000AEE :                     .xbg_inc:
(2)  696/ 6000AEE : 4211                		cmp/pz	r2
(2)  697/ 6000AF0 : 8901                		bt	.ybg_back
(2)  698/ 6000AF2 : AFFC                		bra	.xbg_inc
(2)  699/ 6000AF4 : 329C                		add	r9,r2
(2)  700/ 6000AF6 :                     .ybg_back:
(2)  701/ 6000AF6 : 3297                		cmp/gt	r9,r2			; First Y limiter
(2)  702/ 6000AF8 : 8B01                		bf	.ybg_inc
(2)  703/ 6000AFA : AFFC                		bra	.ybg_back
(2)  704/ 6000AFC : 3298                		sub	r9,r2
(2)  705/ 6000AFE :                     .ybg_inc:
(2)  706/ 6000AFE : 6013                		mov	r1,r0
(2)  707/ 6000B00 : 81E4                		mov.w	r0,@(mbg_xinc_l,r14)
(2)  708/ 6000B02 : 304C                		add	r4,r0
(2)  709/ 6000B04 : 30B7                .lwr_xnxt:	cmp/gt	r11,r0
(2)  710/ 6000B06 : 8B01                		bf	.lwr_xvld
(2)  711/ 6000B08 : AFFC                		bra	.lwr_xnxt
(2)  712/ 6000B0A : 30B8                		sub	r11,r0
(2)  713/ 6000B0C :                     .lwr_xvld:
(2)  714/ 6000B0C : 81E5                		mov.w	r0,@(mbg_xinc_r,r14)
(2)  715/ 6000B0E :                     
(2)  716/ 6000B0E : 6023                		mov	r2,r0
(2)  717/ 6000B10 : 81E6                		mov.w	r0,@(mbg_yinc_u,r14)
(2)  718/ 6000B12 : 6303                		mov	r0,r3
(2)  719/ 6000B14 :                     
(2)  720/ 6000B14 : 338C                		add	r8,r3
(2)  721/ 6000B16 : 3378                		sub	r7,r3
(2)  722/ 6000B18 : 3393                .lwr_ynxt:	cmp/ge	r9,r3
(2)  723/ 6000B1A : 8B01                		bf	.lwr_yvld
(2)  724/ 6000B1C : AFFC                		bra	.lwr_ynxt
(2)  725/ 6000B1E : 3398                		sub	r9,r3
(2)  726/ 6000B20 :                     .lwr_yvld:
(2)  727/ 6000B20 : 6033                		mov	r3,r0
(2)  728/ 6000B22 : 81E7                		mov.w	r0,@(mbg_yinc_d,r14)
(2)  729/ 6000B24 :                     
(2)  730/ 6000B24 :                     	; r1 - X bg pos
(2)  731/ 6000B24 :                     	; r2 - Y bg pos
(2)  732/ 6000B24 :                     	; r3 - Framebuffer BASE
(2)  733/ 6000B24 :                     	; r4 - Y FB pos &BLKSIZE
(2)  734/ 6000B24 :                     	; Set X/Y framebuffer blocks
(2)  735/ 6000B24 : 85EA                		mov.w	@(mbg_fbpos_y,r14),r0
(2)  736/ 6000B26 : 6403                		mov	r0,r4
(2)  737/ 6000B28 : 53EA                		mov	@(mbg_fbpos,r14),r3
(2)  738/ 6000B2A : 2469                		and	r6,r4
(2)  739/ 6000B2C : 2369                		and	r6,r3
(2)  740/ 6000B2E : 2269                		and	r6,r2
(2)  741/ 6000B30 : 2169                		and	r6,r1
(2)  742/ 6000B32 : E600                		mov	#0,r6
(2)  743/ 6000B34 :                     .nxt_y:
(2)  744/ 6000B34 : 3483                		cmp/ge	r8,r4
(2)  745/ 6000B36 : 8B00                		bf	.nxt_y_l
(2)  746/ 6000B38 : 3488                		sub	r8,r4
(2)  747/ 6000B3A :                     .nxt_y_l:
(2)  748/ 6000B3A : 3293                		cmp/ge	r9,r2		; Y limiters
(2)  749/ 6000B3C : 8B00                		bf	.ybg_l
(2)  750/ 6000B3E : 3298                		sub	r9,r2
(2)  751/ 6000B40 :                     .ybg_l:
(2)  752/ 6000B40 : 2F66                		mov	r6,@-r15
(2)  753/ 6000B42 : 2F36                		mov	r3,@-r15
(2)  754/ 6000B44 : 2F16                		mov	r1,@-r15
(2)  755/ 6000B46 : E600                		mov	#0,r6
(2)  756/ 6000B48 :                     .nxt_x:
(2)  757/ 6000B48 : 31B3                		cmp/ge	r11,r1		; X pixel-data wrap
(2)  758/ 6000B4A : 8B00                		bf	.xbg_l
(2)  759/ 6000B4C : 31B8                		sub	r11,r1
(2)  760/ 6000B4E :                     .xbg_l:
(2)  761/ 6000B4E : 3353                		cmp/ge	r5,r3
(2)  762/ 6000B50 : 8B00                		bf	.nxt_x_l
(2)  763/ 6000B52 : 3358                		sub	r5,r3
(2)  764/ 6000B54 :                     .nxt_x_l:
(2)  765/ 6000B54 : B010                		bsr	.mk_piece
(2)  766/ 6000B56 : 0009                		nop
(2)  767/ 6000B58 : 337C                		add	r7,r3
(2)  768/ 6000B5A : 367C                		add	r7,r6
(2)  769/ 6000B5C : 36A3                		cmp/ge	r10,r6
(2)  770/ 6000B5E : 8FF3                		bf/s	.nxt_x
(2)  771/ 6000B60 : 317C                		add	r7,r1
(2)  772/ 6000B62 :                     
(2)  773/ 6000B62 : 61F6                		mov	@r15+,r1
(2)  774/ 6000B64 : 63F6                		mov	@r15+,r3
(2)  775/ 6000B66 : 66F6                		mov	@r15+,r6
(2)  776/ 6000B68 :                     
(2)  777/ 6000B68 : 347C                		add	r7,r4
(2)  778/ 6000B6A : 327C                		add	r7,r2
(2)  779/ 6000B6C : 367C                		add 	r7,r6
(2)  780/ 6000B6E : 3683                		cmp/ge	r8,r6
(2)  781/ 6000B70 : 8BE0                		bf	.nxt_y
(2)  782/ 6000B72 :                     
(2)  783/ 6000B72 :                     
(2)  784/ 6000B72 :                     .no_data:
(2)  785/ 6000B72 : 4F26                		lds	@r15+,pr
(2)  786/ 6000B74 : 000B                		rts
(2)  787/ 6000B76 : 0009                		nop
(2)  788/ 6000B78 :                     		align 4
(2)  789/ 6000B78 :                     
(2)  790/ 6000B78 :                     	; r1 - X bg pos
(2)  791/ 6000B78 :                     	; r2 - Y bg pos
(2)  792/ 6000B78 :                     	; r3 - Framebuffer BASE
(2)  793/ 6000B78 :                     	; r4 - Y FB pos &BLKSIZE
(2)  794/ 6000B78 :                     	; Set X/Y framebuffer blocks
(2)  795/ 6000B78 :                     .mk_piece:
(2)  796/ 6000B78 : 2F16                		mov	r1,@-r15
(2)  797/ 6000B7A : 2F26                		mov	r2,@-r15
(2)  798/ 6000B7C : 2F36                		mov	r3,@-r15
(2)  799/ 6000B7E : 2F46                		mov	r4,@-r15
(2)  800/ 6000B80 : 2F66                		mov	r6,@-r15
(2)  801/ 6000B82 : 2F56                		mov	r5,@-r15
(2)  802/ 6000B84 : 2F86                		mov	r8,@-r15
(2)  803/ 6000B86 : 2F96                		mov	r9,@-r15
(2)  804/ 6000B88 :                     
(2)  805/ 6000B88 : 68D3                		mov	r13,r8		; BG X/Y add
(2)  806/ 6000B8A : 22BE                		mulu	r11,r2
(2)  807/ 6000B8C : 001A                		sts	macl,r0
(2)  808/ 6000B8E : 380C                		add	r0,r8
(2)  809/ 6000B90 : 381C                		add	r1,r8
(2)  810/ 6000B92 : 2A4E                		mulu	r4,r10		; Framebuffer X/Y add
(2)  811/ 6000B94 : 091A                		sts	macl,r9
(2)  812/ 6000B96 : 393C                		add	r3,r9
(2)  813/ 6000B98 :                     
(2)  814/ 6000B98 : 6273                		mov	r7,r2
(2)  815/ 6000B9A :                     .yblk_loopn:
(2)  816/ 6000B9A : 3953                		cmp/ge	r5,r9
(2)  817/ 6000B9C : 8B00                		bf	.ymax
(2)  818/ 6000B9E : 3958                		sub	r5,r9
(2)  819/ 6000BA0 :                     .ymax:
(2)  820/ 6000BA0 : 6373                		mov	r7,r3
(2)  821/ 6000BA2 : 4309                		shlr2	r3
(2)  822/ 6000BA4 : 6483                		mov	r8,r4
(2)  823/ 6000BA6 : 6693                		mov	r9,r6
(2)  824/ 6000BA8 :                     .nxtlng:
(2)  825/ 6000BA8 : 6042                		mov	@r4,r0
(2)  826/ 6000BAA : 6163                		mov	r6,r1
(2)  827/ 6000BAC : 31CC                		add	r12,r1
(2)  828/ 6000BAE : 2102                		mov	r0,@r1
(2)  829/ 6000BB0 : 911C                		mov	#320,r1
(2)  830/ 6000BB2 : 3617                		cmp/gt	r1,r6
(2)  831/ 6000BB4 : 8903                		bt	.hdnpos
(2)  832/ 6000BB6 : 6163                		mov	r6,r1
(2)  833/ 6000BB8 : 315C                		add	r5,r1
(2)  834/ 6000BBA : 31CC                		add	r12,r1
(2)  835/ 6000BBC : 2102                		mov	r0,@r1
(2)  836/ 6000BBE :                     .hdnpos:
(2)  837/ 6000BBE : 7604                		add	#4,r6
(2)  838/ 6000BC0 : 4310                		dt	r3
(2)  839/ 6000BC2 : 8FF1                		bf/s	.nxtlng
(2)  840/ 6000BC4 : 7404                		add	#4,r4
(2)  841/ 6000BC6 :                     
(2)  842/ 6000BC6 : 38BC                		add	r11,r8
(2)  843/ 6000BC8 : 4210                		dt	r2
(2)  844/ 6000BCA : 8FE6                		bf/s	.yblk_loopn
(2)  845/ 6000BCC : 39AC                		add	r10,r9
(2)  846/ 6000BCE :                     .yblk_ex:
(2)  847/ 6000BCE : 69F6                		mov	@r15+,r9
(2)  848/ 6000BD0 : 68F6                		mov	@r15+,r8
(2)  849/ 6000BD2 : 65F6                		mov	@r15+,r5
(2)  850/ 6000BD4 : 66F6                		mov	@r15+,r6
(2)  851/ 6000BD6 : 64F6                		mov	@r15+,r4
(2)  852/ 6000BD8 : 63F6                		mov	@r15+,r3
(2)  853/ 6000BDA : 62F6                		mov	@r15+,r2
(2)  854/ 6000BDC : 61F6                		mov	@r15+,r1
(2)  855/ 6000BDE : 000B                		rts
(2)  856/ 6000BE0 : 0009                		nop
(2)  857/ 6000BE2 :                     		align 4
(2)  858/ 6000BE4 : 2601 8A40 2400 0000 		ltorg
                    0140                
(2)  859/ 6000BEE :                     
(2)  860/ 6000BEE :                     ; --------------------------------------------------------
(2)  861/ 6000BEE :                     ; MarsVideo_BgDrawLR
(2)  862/ 6000BEE :                     ;
(2)  863/ 6000BEE :                     ; Draws the left and right sides of the background on
(2)  864/ 6000BEE :                     ; movement
(2)  865/ 6000BEE :                     ; --------------------------------------------------------
(2)  866/ 6000BEE :                     
(2)  867/ 6000BEE :                     		align 4
(2)  868/ 6000BF0 :                     MarsVideo_BgDrawLR:
(2)  869/ 6000BF0 : DE20                		mov	#RAM_Mars_BgBuffScrl,r14
(2)  870/ 6000BF2 : 50E8                		mov	@(mbg_data,r14),r0
(2)  871/ 6000BF4 : 4015                		cmp/pl	r0
(2)  872/ 6000BF6 : 8B26                		bf	.nxt_drawud
(2)  873/ 6000BF8 : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2)  874/ 6000BFA : 6D03                		mov	r0,r13
(2)  875/ 6000BFC : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  876/ 6000BFE : 640B                		neg	r0,r4
(2)  877/ 6000C00 : 4009                		shlr2	r0
(2)  878/ 6000C02 : 6C03                		mov	r0,r12
(2)  879/ 6000C04 : DB1C                		mov	#Cach_BgFbPos_H,r11
(2)  880/ 6000C06 : 6BB2                		mov	@r11,r11
(2)  881/ 6000C08 : D31C                		mov	#Cach_BgFbPos_V,r3
(2)  882/ 6000C0A : 6332                		mov	@r3,r3
(2)  883/ 6000C0C : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  884/ 6000C0E : 203F                		muls	r3,r0
(2)  885/ 6000C10 : 001A                		sts	macl,r0
(2)  886/ 6000C12 : 3B0C                		add	r0,r11
(2)  887/ 6000C14 : 5AE7                		mov	@(mbg_intrl_size,r14),r10
(2)  888/ 6000C16 : 59EB                		mov	@(mbg_fbdata,r14),r9
(2)  889/ 6000C18 : D019                		mov	#_framebuffer,r0
(2)  890/ 6000C1A : 390C                		add	r0,r9
(2)  891/ 6000C1C : 50E8                		mov	@(mbg_data,r14),r0
(2)  892/ 6000C1E : 6803                		mov	r0,r8
(2)  893/ 6000C20 : 6703                		mov	r0,r7
(2)  894/ 6000C22 : 85E9                		mov.w	@(mbg_height,r14),r0
(2)  895/ 6000C24 : 6603                		mov	r0,r6
(2)  896/ 6000C26 : 85E8                		mov.w	@(mbg_width,r14),r0
(2)  897/ 6000C28 : 206E                		mulu	r6,r0
(2)  898/ 6000C2A : 061A                		sts	macl,r6
(2)  899/ 6000C2C : 367C                		add	r7,r6
(2)  900/ 6000C2E : 6303                		mov	r0,r3
(2)  901/ 6000C30 : D014                		mov	#Cach_YHead_U,r0
(2)  902/ 6000C32 : 6002                		mov	@r0,r0
(2)  903/ 6000C34 : 203E                		mulu	r3,r0
(2)  904/ 6000C36 : 001A                		sts	macl,r0
(2)  905/ 6000C38 : 380C                		add	r0,r8
(2)  906/ 6000C3A : C51D                		mov.w	@(marsGbl_BgDrwR,gbr),r0
(2)  907/ 6000C3C : 8800                		cmp/eq	#0,r0
(2)  908/ 6000C3E : 8B0B                		bf	.dtsk01_dright
(2)  909/ 6000C40 : C51E                		mov.w	@(marsGbl_BgDrwL,gbr),r0
(2)  910/ 6000C42 : 8800                		cmp/eq	#0,r0
(2)  911/ 6000C44 : 8B02                		bf	.dtsk01_dleft
(2)  912/ 6000C46 :                     .nxt_drawud:
(2)  913/ 6000C46 : 000B                		rts
(2)  914/ 6000C48 : 0009                		nop
(2)  915/ 6000C4A :                     		align 4
(2)  916/ 6000C4C :                     
(2)  917/ 6000C4C :                     .dtsk01_dleft:
(2)  918/ 6000C4C : 4010                		dt	r0
(2)  919/ 6000C4E : C11E                		mov.w	r0,@(marsGbl_BgDrwL,gbr)
(2)  920/ 6000C50 : D00D                		mov	#Cach_XHead_L,r0
(2)  921/ 6000C52 : 6002                		mov	@r0,r0
(2)  922/ 6000C54 : A01E                		bra	dtsk01_lrdraw
(2)  923/ 6000C56 : 6503                		mov	r0,r5
(2)  924/ 6000C58 :                     .dtsk01_dright:
(2)  925/ 6000C58 : 4010                		dt	r0
(2)  926/ 6000C5A : C11D                		mov.w	r0,@(marsGbl_BgDrwR,gbr)
(2)  927/ 6000C5C : 9318                		mov	#320,r3			; Set FB position
(2)  928/ 6000C5E : 84E0                		mov.b	@(mbg_flags,r14),r0
(2)  929/ 6000C60 : C902                		and	#%10,r0
(2)  930/ 6000C62 : 2008                		tst	r0,r0
(2)  931/ 6000C64 : 8900                		bt	.indxmode
(2)  932/ 6000C66 : 4300                		shll	r3
(2)  933/ 6000C68 :                     .indxmode:
(2)  934/ 6000C68 : 3B3C                		add	r3,r11
(2)  935/ 6000C6A : 2B49                		and	r4,r11
(2)  936/ 6000C6C : D007                		mov	#Cach_XHead_R,r0
(2)  937/ 6000C6E : 6002                		mov	@r0,r0
(2)  938/ 6000C70 : A010                		bra	dtsk01_lrdraw
(2)  939/ 6000C72 : 6503                		mov	r0,r5
(2)  940/ 6000C74 :                     		align 4
(2)  941/ 6000C74 : 2601 8A40 C000 05DC 		ltorg
                    C000 05D8 2400 0000 
                    C000 05D0 C000 05C8 
                    C000 05CC 0140      
(2)  942/ 6000C92 :                     
(2)  943/ 6000C92 :                     
(2)  944/ 6000C92 :                     	; r13 - Y lines
(2)  945/ 6000C92 :                     	; r12 - X block width
(2)  946/ 6000C92 :                     	; r11 - drawzone pos
(2)  947/ 6000C92 :                     	; r10 - drawzone size
(2)  948/ 6000C92 :                     	;  r9 - Framebuffer BASE
(2)  949/ 6000C92 :                     	;  r8 - Pixeldata Y-Current
(2)  950/ 6000C92 :                     	;  r7 - Pixeldata Y-Start
(2)  951/ 6000C92 :                     	;  r6 - Pixeldata Y-End
(2)  952/ 6000C92 :                     	;  r5 - Xadd
(2)  953/ 6000C92 :                     		align 4
(2)  954/ 6000C94 :                     dtsk01_lrdraw:
(2)  955/ 6000C94 : 3863                		cmp/ge	r6,r8
(2)  956/ 6000C96 : 8B00                		bf	.yres
(2)  957/ 6000C98 : 6873                		mov	r7,r8
(2)  958/ 6000C9A :                     .yres:
(2)  959/ 6000C9A : 64C3                		mov	r12,r4
(2)  960/ 6000C9C : 63B3                		mov	r11,r3
(2)  961/ 6000C9E : 6283                		mov	r8,r2
(2)  962/ 6000CA0 : 325C                		add	r5,r2
(2)  963/ 6000CA2 :                     ; X draw
(2)  964/ 6000CA2 :                     .xline:
(2)  965/ 6000CA2 : 33A3                		cmp/ge	r10,r3
(2)  966/ 6000CA4 : 8B01                		bf	.prefix_r
(2)  967/ 6000CA6 : 33A8                		sub	r10,r3
(2)  968/ 6000CA8 : 6B33                		mov	r3,r11
(2)  969/ 6000CAA :                     .prefix_r:
(2)  970/ 6000CAA : 6133                		mov	r3,r1
(2)  971/ 6000CAC : 319C                		add	r9,r1
(2)  972/ 6000CAE : 6022                		mov	@r2,r0
(2)  973/ 6000CB0 : 2102                		mov	r0,@r1
(2)  974/ 6000CB2 : 9183                		mov	#320,r1			; Hidden line
(2)  975/ 6000CB4 : 84E0                		mov.b	@(mbg_flags,r14),r0
(2)  976/ 6000CB6 : C902                		and	#%10,r0
(2)  977/ 6000CB8 : 2008                		tst	r0,r0
(2)  978/ 6000CBA : 8900                		bt	.indxmode
(2)  979/ 6000CBC : 4100                		shll	r1
(2)  980/ 6000CBE :                     .indxmode:
(2)  981/ 6000CBE : 3317                		cmp/gt	r1,r3
(2)  982/ 6000CC0 : 8904                		bt	.not_l2
(2)  983/ 6000CC2 : 6133                		mov	r3,r1
(2)  984/ 6000CC4 : 319C                		add	r9,r1
(2)  985/ 6000CC6 : 31AC                		add	r10,r1
(2)  986/ 6000CC8 : 6022                		mov	@r2,r0
(2)  987/ 6000CCA : 2102                		mov	r0,@r1
(2)  988/ 6000CCC :                     .not_l2:
(2)  989/ 6000CCC : 7204                		add	#4,r2
(2)  990/ 6000CCE : 4410                		dt	r4
(2)  991/ 6000CD0 : 8FE7                		bf/s	.xline
(2)  992/ 6000CD2 : 7304                		add	#4,r3
(2)  993/ 6000CD4 : 85E8                		mov.w	@(mbg_width,r14),r0
(2)  994/ 6000CD6 : 380C                		add	r0,r8
(2)  995/ 6000CD8 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2)  996/ 6000CDA : 4D10                		dt	r13
(2)  997/ 6000CDC : 8FDA                		bf/s	dtsk01_lrdraw
(2)  998/ 6000CDE : 3B0C                		add	r0,r11
(2)  999/ 6000CE0 : 000B                		rts
(2) 1000/ 6000CE2 : 0009                		nop
(2) 1001/ 6000CE4 :                     		align 4
(2) 1002/ 6000CE4 :                     
(2) 1003/ 6000CE4 :                     ; --------------------------------------------------------
(2) 1004/ 6000CE4 :                     ; MarsVideo_BgDrawLR
(2) 1005/ 6000CE4 :                     ;
(2) 1006/ 6000CE4 :                     ; Draws the top and bottom sides of the background on
(2) 1007/ 6000CE4 :                     ; movement
(2) 1008/ 6000CE4 :                     ; --------------------------------------------------------
(2) 1009/ 6000CE4 :                     
(2) 1010/ 6000CE4 :                     		align 4
(2) 1011/ 6000CE4 :                     MarsVideo_BgDrawUD:
(2) 1012/ 6000CE4 : 5DEB                		mov	@(mbg_fbdata,r14),r13
(2) 1013/ 6000CE6 : D02F                		mov	#_framebuffer,r0
(2) 1014/ 6000CE8 : 3D0C                		add	r0,r13
(2) 1015/ 6000CEA : 50E8                		mov	@(mbg_data,r14),r0
(2) 1016/ 6000CEC : 6B03                		mov	r0,r11
(2) 1017/ 6000CEE : 6C03                		mov	r0,r12
(2) 1018/ 6000CF0 : D02D                		mov	#Cach_BgFbPos_H,r0
(2) 1019/ 6000CF2 : 6A02                		mov	@r0,r10
(2) 1020/ 6000CF4 : D02D                		mov	#Cach_BgFbPos_V,r0
(2) 1021/ 6000CF6 : 6902                		mov	@r0,r9
(2) 1022/ 6000CF8 : 58E7                		mov	@(mbg_intrl_size,r14),r8
(2) 1023/ 6000CFA : 85E8                		mov.w	@(mbg_width,r14),r0
(2) 1024/ 6000CFC : 6703                		mov	r0,r7
(2) 1025/ 6000CFE :                     ; 		mov.b	@(mbg_flags,r14),r0
(2) 1026/ 6000CFE :                     ; 		and	#%10,r0
(2) 1027/ 6000CFE :                     ; 		tst	r0,r0
(2) 1028/ 6000CFE :                     ; 		bt	.indxmodew
(2) 1029/ 6000CFE :                     ; 		shll	r7
(2) 1030/ 6000CFE :                     ; .indxmodew:
(2) 1031/ 6000CFE : D02C                		mov	#Cach_XHead_L,r0
(2) 1032/ 6000D00 : 6002                		mov	@r0,r0
(2) 1033/ 6000D02 : 3C0C                		add	r0,r12
(2) 1034/ 6000D04 : 6693                		mov	r9,r6
(2) 1035/ 6000D06 :                     
(2) 1036/ 6000D06 : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2) 1037/ 6000D08 : 6503                		mov	r0,r5
(2) 1038/ 6000D0A : 6403                		mov	r0,r4
(2) 1039/ 6000D0C : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1040/ 6000D0E : 3408                		sub	r0,r4
(2) 1041/ 6000D10 : 364C                		add	r4,r6
(2) 1042/ 6000D12 : 3657                .wrpagain:	cmp/gt	r5,r6
(2) 1043/ 6000D14 : 8B01                		bf	.upwrp
(2) 1044/ 6000D16 : AFFC                		bra	.wrpagain
(2) 1045/ 6000D18 : 3658                		sub	r5,r6
(2) 1046/ 6000D1A :                     .upwrp:
(2) 1047/ 6000D1A :                     ; 		mov	#Cach_Drw_U,r1
(2) 1048/ 6000D1A :                     ; 		mov	#Cach_Drw_D,r2
(2) 1049/ 6000D1A : C51F                		mov.w	@(marsGbl_BgDrwU,gbr),r0
(2) 1050/ 6000D1C : 8800                		cmp/eq	#0,r0
(2) 1051/ 6000D1E : 8B0C                		bf	.tsk00_up
(2) 1052/ 6000D20 : C520                		mov.w	@(marsGbl_BgDrwD,gbr),r0
(2) 1053/ 6000D22 : 8800                		cmp/eq	#0,r0
(2) 1054/ 6000D24 : 893C                		bt	drw_ud_exit
(2) 1055/ 6000D26 :                     .tsk00_down:
(2) 1056/ 6000D26 : 4010                		dt	r0
(2) 1057/ 6000D28 : C120                		mov.w	r0,@(marsGbl_BgDrwD,gbr)
(2) 1058/ 6000D2A :                     
(2) 1059/ 6000D2A : D022                		mov	#Cach_YHead_D,r0
(2) 1060/ 6000D2C : 6002                		mov	@r0,r0
(2) 1061/ 6000D2E : 207E                		mulu	r7,r0
(2) 1062/ 6000D30 : 001A                		sts	macl,r0
(2) 1063/ 6000D32 : 3C0C                		add	r0,r12
(2) 1064/ 6000D34 : 3B0C                		add	r0,r11
(2) 1065/ 6000D36 : A008                		bra	.do_updown
(2) 1066/ 6000D38 : 6963                		mov	r6,r9
(2) 1067/ 6000D3A :                     .tsk00_up:
(2) 1068/ 6000D3A : 4010                		dt	r0
(2) 1069/ 6000D3C : C11F                		mov.w	r0,@(marsGbl_BgDrwU,gbr)
(2) 1070/ 6000D3E : D01E                		mov	#Cach_YHead_U,r0
(2) 1071/ 6000D40 : 6002                		mov	@r0,r0
(2) 1072/ 6000D42 : 207E                		mulu	r7,r0
(2) 1073/ 6000D44 : 001A                		sts	macl,r0
(2) 1074/ 6000D46 : 3C0C                		add	r0,r12
(2) 1075/ 6000D48 : 3B0C                		add	r0,r11
(2) 1076/ 6000D4A :                     
(2) 1077/ 6000D4A :                     	; Main U/D loop
(2) 1078/ 6000D4A :                     	; r12 - pixel-data current pos
(2) 1079/ 6000D4A :                     	; r11 - pixel-data loop pos
(2) 1080/ 6000D4A :                     	; r10 - Internal scroll TOPLEFT
(2) 1081/ 6000D4A :                     	; r9 - Internal scroll Y-add
(2) 1082/ 6000D4A :                     	; r8 - Internal scroll drawarea size
(2) 1083/ 6000D4A :                     	; r7 - pixel-data WIDTH
(2) 1084/ 6000D4A :                     .do_updown:
(2) 1085/ 6000D4A : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(2) 1086/ 6000D4C : 209E                		mulu	r9,r0
(2) 1087/ 6000D4E : 001A                		sts	macl,r0
(2) 1088/ 6000D50 : 3A0C                		add	r0,r10
(2) 1089/ 6000D52 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1090/ 6000D54 : 6603                		mov	r0,r6
(2) 1091/ 6000D56 :                     .y_loop:
(2) 1092/ 6000D56 : 63C3                		mov	r12,r3
(2) 1093/ 6000D58 : 64B3                		mov	r11,r4
(2) 1094/ 6000D5A : 347C                		add	r7,r4
(2) 1095/ 6000D5C : 85EC                		mov.w	@(mbg_intrl_w,r14),r0	; WIDTH / 4
(2) 1096/ 6000D5E : 4009                		shlr2	r0
(2) 1097/ 6000D60 : 6503                		mov	r0,r5
(2) 1098/ 6000D62 :                     .x_loop:
(2) 1099/ 6000D62 : 3A83                		cmp/ge	r8,r10			; topleft fb pos
(2) 1100/ 6000D64 : 8B00                		bf	.lwrfb
(2) 1101/ 6000D66 : 3A88                		sub	r8,r10
(2) 1102/ 6000D68 :                     .lwrfb:
(2) 1103/ 6000D68 : 3343                		cmp/ge	r4,r3
(2) 1104/ 6000D6A : 8B00                		bf	.srclow
(2) 1105/ 6000D6C : 63B3                		mov	r11,r3
(2) 1106/ 6000D6E :                     .srclow:
(2) 1107/ 6000D6E : 6136                		mov	@r3+,r1
(2) 1108/ 6000D70 : 62A3                		mov	r10,r2
(2) 1109/ 6000D72 : 32DC                		add	r13,r2
(2) 1110/ 6000D74 : 6013                		mov	r1,r0
(2) 1111/ 6000D76 : 2202                		mov	r0,@r2
(2) 1112/ 6000D78 :                     
(2) 1113/ 6000D78 : 9220                		mov	#320,r2			; Hidden line
(2) 1114/ 6000D7A : 84E0                		mov.b	@(mbg_flags,r14),r0
(2) 1115/ 6000D7C : C902                		and	#%10,r0
(2) 1116/ 6000D7E : 2008                		tst	r0,r0
(2) 1117/ 6000D80 : 8900                		bt	.indxmode
(2) 1118/ 6000D82 : 4200                		shll	r2
(2) 1119/ 6000D84 :                     .indxmode:
(2) 1120/ 6000D84 : 3A27                		cmp/gt	r2,r10
(2) 1121/ 6000D86 : 8904                		bt	.hdnx
(2) 1122/ 6000D88 : 62A3                		mov	r10,r2
(2) 1123/ 6000D8A : 32DC                		add	r13,r2
(2) 1124/ 6000D8C : 328C                		add	r8,r2
(2) 1125/ 6000D8E : 6013                		mov	r1,r0
(2) 1126/ 6000D90 : 2202                		mov	r0,@r2
(2) 1127/ 6000D92 :                     .hdnx:
(2) 1128/ 6000D92 : 4510                		dt	r5
(2) 1129/ 6000D94 : 8FE5                		bf/s	.x_loop
(2) 1130/ 6000D96 : 7A04                		add	#4,r10
(2) 1131/ 6000D98 : 3B7C                		add	r7,r11			; Next SRC Y
(2) 1132/ 6000D9A : 4610                		dt	r6
(2) 1133/ 6000D9C : 8FDB                		bf/s	.y_loop
(2) 1134/ 6000D9E : 3C7C                		add	r7,r12
(2) 1135/ 6000DA0 :                     drw_ud_exit:
(2) 1136/ 6000DA0 : 000B                		rts
(2) 1137/ 6000DA2 : 0009                		nop
(2) 1138/ 6000DA4 :                     		align 4
(2) 1139/ 6000DA4 : 2400 0000 C000 05DC 		ltorg
                    C000 05D8 C000 05C8 
                    C000 05D4 C000 05D0 
                    0140                
(2) 1140/ 6000DBE :                     		align 4
(2) 1141/ 6000DC0 :                     
(2) 1142/ 6000DC0 :                     ; --------------------------------------------------------
(2) 1143/ 6000DC0 :                     ; MarsVideo_MoveBg
(2) 1144/ 6000DC0 :                     ;
(2) 1145/ 6000DC0 :                     ; This updates the background's X/Y position
(2) 1146/ 6000DC0 :                     ; --------------------------------------------------------
(2) 1147/ 6000DC0 :                     
(2) 1148/ 6000DC0 :                     MarsVideo_MoveBg:
(2) 1149/ 6000DC0 : DE76                		mov	#RAM_Mars_BgBuffScrl,r14
(2) 1150/ 6000DC2 : 50E8                		mov	@(mbg_data,r14),r0
(2) 1151/ 6000DC4 : 8800                		cmp/eq	#0,r0
(2) 1152/ 6000DC6 : 8B01                		bf	.has_scrldata
(2) 1153/ 6000DC8 : 000B                		rts
(2) 1154/ 6000DCA : 0009                		nop
(2) 1155/ 6000DCC :                     .has_scrldata:
(2) 1156/ 6000DCC : E100                		mov	#0,r1
(2) 1157/ 6000DCE : E200                		mov	#0,r2
(2) 1158/ 6000DD0 : 50EE                		mov	@(mbg_xpos,r14),r0	; 0000.0000
(2) 1159/ 6000DD2 : 4029                		shlr16	r0
(2) 1160/ 6000DD4 : 600F                		exts.w	r0,r0
(2) 1161/ 6000DD6 : 6303                		mov	r0,r3
(2) 1162/ 6000DD8 : 85E2                		mov.w	@(mbg_xpos_old,r14),r0
(2) 1163/ 6000DDA : 3300                		cmp/eq	r0,r3
(2) 1164/ 6000DDC : 8901                		bt	.xequ
(2) 1165/ 6000DDE : 6133                		mov	r3,r1
(2) 1166/ 6000DE0 : 3108                		sub	r0,r1
(2) 1167/ 6000DE2 :                     .xequ:
(2) 1168/ 6000DE2 : 6033                		mov	r3,r0
(2) 1169/ 6000DE4 : 81E2                		mov.w	r0,@(mbg_xpos_old,r14)
(2) 1170/ 6000DE6 : 50EF                		mov	@(mbg_ypos,r14),r0	; 0000.0000
(2) 1171/ 6000DE8 : 4029                		shlr16	r0
(2) 1172/ 6000DEA : 600F                		exts.w	r0,r0
(2) 1173/ 6000DEC : 6303                		mov	r0,r3
(2) 1174/ 6000DEE : 85E3                		mov.w	@(mbg_ypos_old,r14),r0
(2) 1175/ 6000DF0 : 3300                		cmp/eq	r0,r3
(2) 1176/ 6000DF2 : 8901                		bt	.yequ
(2) 1177/ 6000DF4 : 6233                		mov	r3,r2
(2) 1178/ 6000DF6 : 3208                		sub	r0,r2
(2) 1179/ 6000DF8 :                     .yequ:
(2) 1180/ 6000DF8 : 6033                		mov	r3,r0
(2) 1181/ 6000DFA : 81E3                		mov.w	r0,@(mbg_ypos_old,r14)
(2) 1182/ 6000DFC : 4111                		cmp/pz	r1
(2) 1183/ 6000DFE : 8900                		bt	.x_stend
(2) 1184/ 6000E00 : 611F                		exts	r1,r1
(2) 1185/ 6000E02 :                     .x_stend:
(2) 1186/ 6000E02 : 4211                		cmp/pz	r2
(2) 1187/ 6000E04 : 8900                		bt	.y_stend
(2) 1188/ 6000E06 : 622F                		exts	r2,r2
(2) 1189/ 6000E08 :                     .y_stend:
(2) 1190/ 6000E08 :                     
(2) 1191/ 6000E08 :                     	; ---------------------------------------
(2) 1192/ 6000E08 :                     	; Y Framebuffer position
(2) 1193/ 6000E08 :                     	; ---------------------------------------
(2) 1194/ 6000E08 :                     
(2) 1195/ 6000E08 : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(2) 1196/ 6000E0A : 6303                		mov	r0,r3
(2) 1197/ 6000E0C : 85EA                		mov.w	@(mbg_fbpos_y,r14),r0
(2) 1198/ 6000E0E : 6403                		mov	r0,r4
(2) 1199/ 6000E10 : 342C                		add	r2,r4
(2) 1200/ 6000E12 : 4215                		cmp/pl	r2
(2) 1201/ 6000E14 : 8B02                		bf	.ypu_negtv
(2) 1202/ 6000E16 : 3433                		cmp/ge	r3,r4
(2) 1203/ 6000E18 : 8B00                		bf	.ypu_negtv
(2) 1204/ 6000E1A : 3438                		sub	r3,r4
(2) 1205/ 6000E1C :                     .ypu_negtv:
(2) 1206/ 6000E1C : 4211                		cmp/pz	r2
(2) 1207/ 6000E1E : 8902                		bt	.ypu_postv
(2) 1208/ 6000E20 : 4411                		cmp/pz	r4
(2) 1209/ 6000E22 : 8900                		bt	.ypu_postv
(2) 1210/ 6000E24 : 343C                		add	r3,r4
(2) 1211/ 6000E26 :                     .ypu_postv:
(2) 1212/ 6000E26 : 6043                		mov	r4,r0
(2) 1213/ 6000E28 : 81EA                		mov.w	r0,@(mbg_fbpos_y,r14)
(2) 1214/ 6000E2A :                     
(2) 1215/ 6000E2A :                     	; ---------------------------------------
(2) 1216/ 6000E2A :                     	; Update Framebuffer TOP-LEFT position
(2) 1217/ 6000E2A :                     	; ---------------------------------------
(2) 1218/ 6000E2A :                     
(2) 1219/ 6000E2A : 53E7                		mov	@(mbg_intrl_size,r14),r3
(2) 1220/ 6000E2C : 50EA                		mov	@(mbg_fbpos,r14),r0
(2) 1221/ 6000E2E : 301C                		add	r1,r0
(2) 1222/ 6000E30 : 4115                		cmp/pl	r1
(2) 1223/ 6000E32 : 8B02                		bf	.yx_negtv
(2) 1224/ 6000E34 : 3033                		cmp/ge	r3,r0
(2) 1225/ 6000E36 : 8B00                		bf	.yx_negtv
(2) 1226/ 6000E38 : 3038                		sub	r3,r0
(2) 1227/ 6000E3A :                     .yx_negtv:
(2) 1228/ 6000E3A : 4111                		cmp/pz	r1
(2) 1229/ 6000E3C : 8902                		bt	.yx_postv
(2) 1230/ 6000E3E : 4011                		cmp/pz	r0
(2) 1231/ 6000E40 : 8900                		bt	.yx_postv
(2) 1232/ 6000E42 : 303C                		add	r3,r0
(2) 1233/ 6000E44 :                     .yx_postv:
(2) 1234/ 6000E44 : 1E0A                		mov	r0,@(mbg_fbpos,r14)
(2) 1235/ 6000E46 :                     
(2) 1236/ 6000E46 :                     	; ---------------------------------------
(2) 1237/ 6000E46 :                     	; Update background draw-heads
(2) 1238/ 6000E46 :                     	; r1 - X left/right
(2) 1239/ 6000E46 :                     	; r2 - Y up/down
(2) 1240/ 6000E46 :                     	; ---------------------------------------
(2) 1241/ 6000E46 :                     
(2) 1242/ 6000E46 : 85E8                		mov.w	@(mbg_width,r14),r0
(2) 1243/ 6000E48 : 6303                		mov	r0,r3
(2) 1244/ 6000E4A : 85E9                		mov.w	@(mbg_height,r14),r0
(2) 1245/ 6000E4C : 6403                		mov	r0,r4
(2) 1246/ 6000E4E : 85E5                		mov.w	@(mbg_xinc_r,r14),r0
(2) 1247/ 6000E50 : 6503                		mov	r0,r5
(2) 1248/ 6000E52 : 85E4                		mov.w	@(mbg_xinc_l,r14),r0
(2) 1249/ 6000E54 : 6603                		mov	r0,r6
(2) 1250/ 6000E56 : 85E6                		mov.w	@(mbg_yinc_u,r14),r0
(2) 1251/ 6000E58 : 6703                		mov	r0,r7
(2) 1252/ 6000E5A : 85E7                		mov.w	@(mbg_yinc_d,r14),r0
(2) 1253/ 6000E5C : 6803                		mov	r0,r8
(2) 1254/ 6000E5E : 351C                		add	r1,r5
(2) 1255/ 6000E60 : 4115                		cmp/pl	r1
(2) 1256/ 6000E62 : 8B02                		bf	.xnegtv
(2) 1257/ 6000E64 : 3533                		cmp/ge	r3,r5
(2) 1258/ 6000E66 : 8B00                		bf	.xnegtv
(2) 1259/ 6000E68 : 3538                		sub	r3,r5
(2) 1260/ 6000E6A :                     .xnegtv:
(2) 1261/ 6000E6A : 4111                		cmp/pz	r1
(2) 1262/ 6000E6C : 8902                		bt	.xpostv
(2) 1263/ 6000E6E : 4511                		cmp/pz	r5
(2) 1264/ 6000E70 : 8900                		bt	.xpostv
(2) 1265/ 6000E72 : 353C                		add	r3,r5
(2) 1266/ 6000E74 :                     .xpostv:
(2) 1267/ 6000E74 : 361C                		add	r1,r6
(2) 1268/ 6000E76 : 4115                		cmp/pl	r1
(2) 1269/ 6000E78 : 8B02                		bf	.xnegtvl
(2) 1270/ 6000E7A : 3633                		cmp/ge	r3,r6
(2) 1271/ 6000E7C : 8B00                		bf	.xnegtvl
(2) 1272/ 6000E7E : 3638                		sub	r3,r6
(2) 1273/ 6000E80 :                     .xnegtvl:
(2) 1274/ 6000E80 : 4111                		cmp/pz	r1
(2) 1275/ 6000E82 : 8902                		bt	.xpostvl
(2) 1276/ 6000E84 : 4611                		cmp/pz	r6
(2) 1277/ 6000E86 : 8900                		bt	.xpostvl
(2) 1278/ 6000E88 : 363C                		add	r3,r6
(2) 1279/ 6000E8A :                     .xpostvl:
(2) 1280/ 6000E8A :                     
(2) 1281/ 6000E8A : 372C                		add	r2,r7
(2) 1282/ 6000E8C : 4215                		cmp/pl	r2
(2) 1283/ 6000E8E : 8B02                		bf	.ynegtv
(2) 1284/ 6000E90 : 3743                		cmp/ge	r4,r7
(2) 1285/ 6000E92 : 8B00                		bf	.ynegtv
(2) 1286/ 6000E94 : 3748                		sub	r4,r7
(2) 1287/ 6000E96 :                     .ynegtv:
(2) 1288/ 6000E96 : 4211                		cmp/pz	r2
(2) 1289/ 6000E98 : 8902                		bt	.ypostv
(2) 1290/ 6000E9A : 4711                		cmp/pz	r7
(2) 1291/ 6000E9C : 8900                		bt	.ypostv
(2) 1292/ 6000E9E : 374C                		add	r4,r7
(2) 1293/ 6000EA0 :                     .ypostv:
(2) 1294/ 6000EA0 : 382C                		add	r2,r8
(2) 1295/ 6000EA2 : 4215                		cmp/pl	r2
(2) 1296/ 6000EA4 : 8B02                		bf	.ynegtvl
(2) 1297/ 6000EA6 : 3843                		cmp/ge	r4,r8
(2) 1298/ 6000EA8 : 8B00                		bf	.ynegtvl
(2) 1299/ 6000EAA : 3848                		sub	r4,r8
(2) 1300/ 6000EAC :                     .ynegtvl:
(2) 1301/ 6000EAC : 4211                		cmp/pz	r2
(2) 1302/ 6000EAE : 8902                		bt	.ypostvl
(2) 1303/ 6000EB0 : 4811                		cmp/pz	r8
(2) 1304/ 6000EB2 : 8900                		bt	.ypostvl
(2) 1305/ 6000EB4 : 384C                		add	r4,r8
(2) 1306/ 6000EB6 :                     .ypostvl:
(2) 1307/ 6000EB6 : 6053                		mov	r5,r0
(2) 1308/ 6000EB8 : 81E5                		mov.w	r0,@(mbg_xinc_r,r14)
(2) 1309/ 6000EBA : 6063                		mov	r6,r0
(2) 1310/ 6000EBC : 81E4                		mov.w	r0,@(mbg_xinc_l,r14)
(2) 1311/ 6000EBE : 6073                		mov	r7,r0
(2) 1312/ 6000EC0 : 81E6                		mov.w	r0,@(mbg_yinc_u,r14)
(2) 1313/ 6000EC2 : 6083                		mov	r8,r0
(2) 1314/ 6000EC4 : 81E7                		mov.w	r0,@(mbg_yinc_d,r14)
(2) 1315/ 6000EC6 :                     
(2) 1316/ 6000EC6 :                     	; ---------------------------------------
(2) 1317/ 6000EC6 :                     
(2) 1318/ 6000EC6 :                     ; 		mov	#Cach_Drw_U,r8
(2) 1319/ 6000EC6 :                     ; 		mov	#Cach_Drw_D,r9
(2) 1320/ 6000EC6 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1321/ 6000EC8 : 6303                		mov	r0,r3
(2) 1322/ 6000ECA : 2309                		and	r0,r3			; r3 - block size to check
(2) 1323/ 6000ECC : E500                		mov	#0,r5
(2) 1324/ 6000ECE : 84E3                		mov.b	@(mbg_yset,r14),r0
(2) 1325/ 6000ED0 : 302C                		add	r2,r0
(2) 1326/ 6000ED2 : 6603                		mov	r0,r6
(2) 1327/ 6000ED4 : 2038                		tst	r3,r0
(2) 1328/ 6000ED6 : 8915                		bt	.ydr_busy
(2) 1329/ 6000ED8 : 4215                		cmp/pl	r2
(2) 1330/ 6000EDA : 8B08                		bf	.reqd_b
(2) 1331/ 6000EDC : C51F                		mov.w	@(marsGbl_BgDrwU,gbr),r0
(2) 1332/ 6000EDE : 6403                		mov	r0,r4
(2) 1333/ 6000EE0 : C520                		mov.w	@(marsGbl_BgDrwD,gbr),r0
(2) 1334/ 6000EE2 : 204B                		or	r4,r0
(2) 1335/ 6000EE4 : 8800                		cmp/eq	#0,r0
(2) 1336/ 6000EE6 : 8B0D                		bf	.ydr_busy
(2) 1337/ 6000EE8 : E002                		mov	#2,r0
(2) 1338/ 6000EEA : C120                		mov.w	r0,@(marsGbl_BgDrwD,gbr)
(2) 1339/ 6000EEC : 7501                		add	#$01,r5
(2) 1340/ 6000EEE :                     .reqd_b:
(2) 1341/ 6000EEE : 4211                		cmp/pz	r2
(2) 1342/ 6000EF0 : 8908                		bt	.ydr_busy
(2) 1343/ 6000EF2 : C51F                		mov.w	@(marsGbl_BgDrwU,gbr),r0
(2) 1344/ 6000EF4 : 6403                		mov	r0,r4
(2) 1345/ 6000EF6 : C520                		mov.w	@(marsGbl_BgDrwD,gbr),r0
(2) 1346/ 6000EF8 : 204B                		or	r4,r0
(2) 1347/ 6000EFA : 8800                		cmp/eq	#0,r0
(2) 1348/ 6000EFC : 8B02                		bf	.ydr_busy
(2) 1349/ 6000EFE : E002                		mov	#2,r0
(2) 1350/ 6000F00 : C11F                		mov.w	r0,@(marsGbl_BgDrwU,gbr)
(2) 1351/ 6000F02 : 7501                		add	#$01,r5
(2) 1352/ 6000F04 :                     .ydr_busy:
(2) 1353/ 6000F04 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1354/ 6000F06 : 6403                		mov	r0,r4
(2) 1355/ 6000F08 : 6063                		mov	r6,r0
(2) 1356/ 6000F0A : 4410                		dt	r4
(2) 1357/ 6000F0C : 2049                		and	r4,r0
(2) 1358/ 6000F0E : 80E3                		mov.b	r0,@(mbg_yset,r14)
(2) 1359/ 6000F10 : 84E2                		mov.b	@(mbg_xset,r14),r0
(2) 1360/ 6000F12 : 301C                		add	r1,r0
(2) 1361/ 6000F14 : 6603                		mov	r0,r6
(2) 1362/ 6000F16 : 2038                		tst	r3,r0
(2) 1363/ 6000F18 : 8915                		bt	.ydl_busy
(2) 1364/ 6000F1A : 4115                		cmp/pl	r1
(2) 1365/ 6000F1C : 8B08                		bf	.reqr_b
(2) 1366/ 6000F1E : C51E                		mov.w	@(marsGbl_BgDrwL,gbr),r0
(2) 1367/ 6000F20 : 6403                		mov	r0,r4
(2) 1368/ 6000F22 : C51D                		mov.w	@(marsGbl_BgDrwR,gbr),r0
(2) 1369/ 6000F24 : 204B                		or	r4,r0
(2) 1370/ 6000F26 : 8800                		cmp/eq	#0,r0
(2) 1371/ 6000F28 : 8B0D                		bf	.ydl_busy
(2) 1372/ 6000F2A : E002                		mov	#2,r0
(2) 1373/ 6000F2C : C11D                		mov.w	r0,@(marsGbl_BgDrwR,gbr)
(2) 1374/ 6000F2E : 7502                		add	#$02,r5
(2) 1375/ 6000F30 :                     .reqr_b:
(2) 1376/ 6000F30 : 4111                		cmp/pz	r1
(2) 1377/ 6000F32 : 8908                		bt	.ydl_busy
(2) 1378/ 6000F34 : C51E                		mov.w	@(marsGbl_BgDrwL,gbr),r0
(2) 1379/ 6000F36 : 6403                		mov	r0,r4
(2) 1380/ 6000F38 : C51D                		mov.w	@(marsGbl_BgDrwR,gbr),r0
(2) 1381/ 6000F3A : 204B                		or	r4,r0
(2) 1382/ 6000F3C : 8800                		cmp/eq	#0,r0
(2) 1383/ 6000F3E : 8B02                		bf	.ydl_busy
(2) 1384/ 6000F40 : E002                		mov	#2,r0
(2) 1385/ 6000F42 : C11E                		mov.w	r0,@(marsGbl_BgDrwL,gbr)
(2) 1386/ 6000F44 : 7502                		add	#$02,r5
(2) 1387/ 6000F46 :                     .ydl_busy:
(2) 1388/ 6000F46 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1389/ 6000F48 : 6403                		mov	r0,r4
(2) 1390/ 6000F4A : 6063                		mov	r6,r0
(2) 1391/ 6000F4C : 4410                		dt	r4
(2) 1392/ 6000F4E : 2049                		and	r4,r0
(2) 1393/ 6000F50 : 80E2                		mov.b	r0,@(mbg_xset,r14)
(2) 1394/ 6000F52 :                     
(2) 1395/ 6000F52 :                     	; Make snapshot of scroll variables for drawing
(2) 1396/ 6000F52 : 4515                		cmp/pl	r5
(2) 1397/ 6000F54 : 8B20                		bf	.dont_snap
(2) 1398/ 6000F56 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1399/ 6000F58 : 600B                		neg	r0,r0
(2) 1400/ 6000F5A : 6703                		mov	r0,r7
(2) 1401/ 6000F5C : D110                		mov	#Cach_XHead_L,r1
(2) 1402/ 6000F5E : D211                		mov	#Cach_XHead_R,r2
(2) 1403/ 6000F60 : D311                		mov	#Cach_YHead_U,r3
(2) 1404/ 6000F62 : D412                		mov	#Cach_YHead_D,r4
(2) 1405/ 6000F64 : D512                		mov	#Cach_BgFbPos_V,r5
(2) 1406/ 6000F66 : D613                		mov	#Cach_BgFbPos_H,r6
(2) 1407/ 6000F68 : 85E4                		mov.w	@(mbg_xinc_l,r14),r0
(2) 1408/ 6000F6A : 2079                		and	r7,r0
(2) 1409/ 6000F6C : 2102                		mov	r0,@r1
(2) 1410/ 6000F6E : 85E5                		mov.w	@(mbg_xinc_r,r14),r0
(2) 1411/ 6000F70 : 2079                		and	r7,r0
(2) 1412/ 6000F72 : 2202                		mov	r0,@r2
(2) 1413/ 6000F74 : 85E6                		mov.w	@(mbg_yinc_u,r14),r0
(2) 1414/ 6000F76 : 2079                		and	r7,r0
(2) 1415/ 6000F78 : 2302                		mov	r0,@r3
(2) 1416/ 6000F7A : 85E7                		mov.w	@(mbg_yinc_d,r14),r0
(2) 1417/ 6000F7C : 2079                		and	r7,r0
(2) 1418/ 6000F7E : 2402                		mov	r0,@r4
(2) 1419/ 6000F80 : 85EA                		mov.w	@(mbg_fbpos_y,r14),r0
(2) 1420/ 6000F82 : 2079                		and	r7,r0
(2) 1421/ 6000F84 : 2502                		mov	r0,@r5
(2) 1422/ 6000F86 : 50EA                		mov	@(mbg_fbpos,r14),r0
(2) 1423/ 6000F88 : 2079                		and	r7,r0
(2) 1424/ 6000F8A : 6703                		mov	r0,r7
(2) 1425/ 6000F8C : 84E0                		mov.b	@(mbg_flags,r14),r0
(2) 1426/ 6000F8E : C902                		and	#%10,r0
(2) 1427/ 6000F90 : 2008                		tst	r0,r0
(2) 1428/ 6000F92 : 8900                		bt	.indxmode
(2) 1429/ 6000F94 : 4700                		shll	r7
(2) 1430/ 6000F96 :                     .indxmode:
(2) 1431/ 6000F96 : 2672                		mov	r7,@r6
(2) 1432/ 6000F98 :                     .dont_snap:
(2) 1433/ 6000F98 :                     
(2) 1434/ 6000F98 : 000B                		rts
(2) 1435/ 6000F9A : 0009                		nop
(2) 1436/ 6000F9C :                     		align 4
(2) 1437/ 6000F9C : 2601 8A40 C000 05C8 		ltorg
                    C000 05CC C000 05D0 
                    C000 05D4 C000 05D8 
                    C000 05DC           
(2) 1438/ 6000FB8 :                     
(2) 1439/ 6000FB8 :                     ; ====================================================================
(2) 1440/ 6000FB8 :                     ; ----------------------------------------------------------------
(2) 1441/ 6000FB8 :                     ; Super sprites
(2) 1442/ 6000FB8 :                     ; ----------------------------------------------------------------
(2) 1443/ 6000FB8 :                     
(2) 1444/ 6000FB8 :                     ; NOTE: MarsVideo_DrawSuperSpr is located on cache_m_scrlspr.asm
(2) 1445/ 6000FB8 :                     
(2) 1446/ 6000FB8 :                     ; --------------------------------------------------------
(2) 1447/ 6000FB8 :                     ; MarsVideo_SetSuperSpr
(2) 1448/ 6000FB8 :                     ;
(2) 1449/ 6000FB8 :                     ; Sets screen variables drawing the Super Sprites
(2) 1450/ 6000FB8 :                     ;
(2) 1451/ 6000FB8 :                     ; Input:
(2) 1452/ 6000FB8 :                     ; r1 - VRAM base
(2) 1453/ 6000FB8 :                     ; r2 - X VRAM position
(2) 1454/ 6000FB8 :                     ; r3 - Y position
(2) 1455/ 6000FB8 :                     ; r4 - Scrolling area Width
(2) 1456/ 6000FB8 :                     ; r5 - Scrolling area Height
(2) 1457/ 6000FB8 :                     ; r6 - Scroll area size
(2) 1458/ 6000FB8 :                     ; --------------------------------------------------------
(2) 1459/ 6000FB8 :                     
(2) 1460/ 6000FB8 :                     		align 4
(2) 1461/ 6000FB8 :                     MarsVideo_SetSuperSpr:
(2) 1462/ 6000FB8 : D704                		mov	#Cach_Intrl_Size+4,r7
(2) 1463/ 6000FBA : 2766                		mov	r6,@-r7
(2) 1464/ 6000FBC : 2716                		mov	r1,@-r7
(2) 1465/ 6000FBE : 2726                		mov	r2,@-r7
(2) 1466/ 6000FC0 : 2736                		mov	r3,@-r7
(2) 1467/ 6000FC2 : 2756                		mov	r5,@-r7
(2) 1468/ 6000FC4 : 2746                		mov	r4,@-r7
(2) 1469/ 6000FC6 : 000B                		rts
(2) 1470/ 6000FC8 : 0009                		nop
(2) 1471/ 6000FCA :                     		align 4
(2) 1472/ 6000FCC : C000 059C           		ltorg
(2) 1473/ 6000FD0 :                     
(2) 1474/ 6000FD0 :                     ; --------------------------------------------------------
(2) 1475/ 6000FD0 :                     ; MarsVideo_MarkSprBlocks
(2) 1476/ 6000FD0 :                     ;
(2) 1477/ 6000FD0 :                     ; Set which blocks need redrawing for the next frame
(2) 1478/ 6000FD0 :                     ; after drawing the Super Sprites.
(2) 1479/ 6000FD0 :                     ;
(2) 1480/ 6000FD0 :                     ; r14 - Background buffer to use
(2) 1481/ 6000FD0 :                     ; --------------------------------------------------------
(2) 1482/ 6000FD0 :                     
(2) 1483/ 6000FD0 :                     		align 4
(2) 1484/ 6000FD0 :                     MarsVideo_MarkSprBlocks:
(2) 1485/ 6000FD0 : DD2E                		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r13
(2) 1486/ 6000FD2 : DC2F                		mov	#RAM_Mars_RdrwBlocks,r12
(2) 1487/ 6000FD4 :                     .next_one:
(2) 1488/ 6000FD4 : 50D0                		mov	@(marsspr_data,r13),r0
(2) 1489/ 6000FD6 : 2008                		tst	r0,r0
(2) 1490/ 6000FD8 : 8956                		bt	.exit
(2) 1491/ 6000FDA :                     
(2) 1492/ 6000FDA : 85D4                		mov.w	@(marsspr_x,r13),r0		; r1 - X pos (left)
(2) 1493/ 6000FDC : 6103                		mov	r0,r1
(2) 1494/ 6000FDE : 85D6                		mov.w	@(marsspr_xs,r13),r0		; r3 - XS (right)
(2) 1495/ 6000FE0 : 6203                		mov	r0,r2
(2) 1496/ 6000FE2 : 85D5                		mov.w	@(marsspr_y,r13),r0		; r2 - Y pos (top)
(2) 1497/ 6000FE4 : 6303                		mov	r0,r3
(2) 1498/ 6000FE6 : 85D7                		mov.w	@(marsspr_ys,r13),r0		; r4 - YS (bottom)
(2) 1499/ 6000FE8 : 6403                		mov	r0,r4
(2) 1500/ 6000FEA : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2) 1501/ 6000FEC : 6503                		mov	r0,r5
(2) 1502/ 6000FEE : 321C                		add	r1,r2
(2) 1503/ 6000FF0 : 343C                		add	r3,r4
(2) 1504/ 6000FF2 :                     
(2) 1505/ 6000FF2 :                     ; 		shlr	r0
(2) 1506/ 6000FF2 : 3108                		sub	r0,r1
(2) 1507/ 6000FF4 : 3308                		sub	r0,r3
(2) 1508/ 6000FF6 : 320C                		add	r0,r2
(2) 1509/ 6000FF8 : 340C                		add	r0,r4
(2) 1510/ 6000FFA : 6023                		mov	r2,r0		; Check for reverse
(2) 1511/ 6000FFC : 3018                		sub	r1,r0
(2) 1512/ 6000FFE : 4015                		cmp/pl	r0
(2) 1513/ 6001000 : 8902                		bt	.x_good
(2) 1514/ 6001002 : 6013                		mov	r1,r0
(2) 1515/ 6001004 : 6123                		mov	r2,r1
(2) 1516/ 6001006 : 6203                		mov	r0,r2
(2) 1517/ 6001008 :                     .x_good:
(2) 1518/ 6001008 : 6043                		mov	r4,r0		; Check for reverse
(2) 1519/ 600100A : 3038                		sub	r3,r0
(2) 1520/ 600100C : 4015                		cmp/pl	r0
(2) 1521/ 600100E : 8902                		bt	.y_good
(2) 1522/ 6001010 : 6033                		mov	r3,r0
(2) 1523/ 6001012 : 6343                		mov	r4,r3
(2) 1524/ 6001014 : 6403                		mov	r0,r4
(2) 1525/ 6001016 :                     .y_good:
(2) 1526/ 6001016 :                     ; 		muls	r5,r1
(2) 1527/ 6001016 :                     ; 		sts	macl,r1
(2) 1528/ 6001016 :                     ; 		shlr8	r1
(2) 1529/ 6001016 :                     ; 		muls	r5,r2
(2) 1530/ 6001016 :                     ; 		sts	macl,r2
(2) 1531/ 6001016 :                     ; 		shlr8	r2
(2) 1532/ 6001016 :                     ; 		muls	r5,r3
(2) 1533/ 6001016 :                     ; 		sts	macl,r3
(2) 1534/ 6001016 :                     ; 		shlr8	r3
(2) 1535/ 6001016 :                     ; 		muls	r5,r4
(2) 1536/ 6001016 :                     ; 		sts	macl,r4
(2) 1537/ 6001016 :                     ; 		shlr8	r4
(2) 1538/ 6001016 :                     ; 		exts.w	r1,r1
(2) 1539/ 6001016 :                     ; 		exts.w	r2,r2
(2) 1540/ 6001016 :                     ; 		exts.w	r3,r3
(2) 1541/ 6001016 :                     ; 		exts.w	r4,r4
(2) 1542/ 6001016 :                     
(2) 1543/ 6001016 :                     ; 		mov.w	@(mbg_intrl_w,r14),r0
(2) 1544/ 6001016 : 903F                		mov	#320,r0
(2) 1545/ 6001018 :                     ; 		muls	r5,r0
(2) 1546/ 6001018 :                     ; 		sts	macl,r0
(2) 1547/ 6001018 :                     ; 		shlr8	r0
(2) 1548/ 6001018 : 4115                		cmp/pl	r1
(2) 1549/ 600101A : 8900                		bt	.xl_t
(2) 1550/ 600101C : 211A                		xor	r1,r1
(2) 1551/ 600101E :                     .xl_t:
(2) 1552/ 600101E : 4215                		cmp/pl	r2
(2) 1553/ 6001020 : 8900                		bt	.xr_t
(2) 1554/ 6001022 : 222A                		xor	r2,r2
(2) 1555/ 6001024 :                     .xr_t:
(2) 1556/ 6001024 : 3103                		cmp/ge	r0,r1
(2) 1557/ 6001026 : 8B00                		bf	.xl_b
(2) 1558/ 6001028 : 6103                		mov	r0,r1
(2) 1559/ 600102A :                     .xl_b:
(2) 1560/ 600102A : 3203                		cmp/ge	r0,r2
(2) 1561/ 600102C : 8B00                		bf	.xr_b
(2) 1562/ 600102E : 6203                		mov	r0,r2
(2) 1563/ 6001030 :                     .xr_b:
(2) 1564/ 6001030 : 9033                		mov	#240,r0
(2) 1565/ 6001032 :                     ; 		muls	r5,r0
(2) 1566/ 6001032 :                     ; 		sts	macl,r0
(2) 1567/ 6001032 :                     ; 		shlr8	r0
(2) 1568/ 6001032 : 4315                		cmp/pl	r3
(2) 1569/ 6001034 : 8900                		bt	.yl_t
(2) 1570/ 6001036 : 233A                		xor	r3,r3
(2) 1571/ 6001038 :                     .yl_t:
(2) 1572/ 6001038 : 4415                		cmp/pl	r4
(2) 1573/ 600103A : 8900                		bt	.yr_t
(2) 1574/ 600103C : 244A                		xor	r4,r4
(2) 1575/ 600103E :                     .yr_t:
(2) 1576/ 600103E : 3303                		cmp/ge	r0,r3
(2) 1577/ 6001040 : 8B00                		bf	.yl_b
(2) 1578/ 6001042 : 6303                		mov	r0,r3
(2) 1579/ 6001044 :                     .yl_b:
(2) 1580/ 6001044 : 3403                		cmp/ge	r0,r4
(2) 1581/ 6001046 : 8B00                		bf	.yr_b
(2) 1582/ 6001048 : 6403                		mov	r0,r4
(2) 1583/ 600104A :                     .yr_b:
(2) 1584/ 600104A :                     ; 		cmp/eq	r1,r2
(2) 1585/ 600104A :                     ; 		bt	.bad_xy
(2) 1586/ 600104A :                     ; 		cmp/eq	r3,r4
(2) 1587/ 600104A :                     ; 		bt	.bad_xy
(2) 1588/ 600104A :                     
(2) 1589/ 600104A : D712                		mov	#CS3+$50,r7	; DEBUG
(2) 1590/ 600104C : 2746                		mov	r4,@-r7
(2) 1591/ 600104E : 2736                		mov	r3,@-r7
(2) 1592/ 6001050 : 2726                		mov	r2,@-r7
(2) 1593/ 6001052 : 2716                		mov	r1,@-r7
(2) 1594/ 6001054 :                     
(2) 1595/ 6001054 :                     .y_loop:
(2) 1596/ 6001054 : 665B                		neg	r5,r6
(2) 1597/ 6001056 : 67C3                		mov	r12,r7
(2) 1598/ 6001058 :                     
(2) 1599/ 6001058 : 6033                		mov	r3,r0		; Y
(2) 1600/ 600105A : 2069                		and	r6,r0
(2) 1601/ 600105C : 4008                		shll2	r0
(2) 1602/ 600105E : 4008                		shll2	r0
(2) 1603/ 6001060 : 4000                		shll	r0
(2) 1604/ 6001062 : 370C                		add	r0,r7
(2) 1605/ 6001064 : 6013                		mov	r1,r0		; X
(2) 1606/ 6001066 : 2069                		and	r6,r0
(2) 1607/ 6001068 : 4009                		shlr2	r0
(2) 1608/ 600106A : 370C                		add	r0,r7
(2) 1609/ 600106C :                     
(2) 1610/ 600106C : 6853                		mov	r5,r8
(2) 1611/ 600106E : 4809                		shlr2	r8
(2) 1612/ 6001070 : 6613                		mov	r1,r6
(2) 1613/ 6001072 : E001                		mov	#1,r0
(2) 1614/ 6001074 :                     .x_loop:
(2) 1615/ 6001074 : 2700                		mov.b	r0,@r7
(2) 1616/ 6001076 : 378C                		add	r8,r7
(2) 1617/ 6001078 : 3627                		cmp/gt	r2,r6
(2) 1618/ 600107A : 8FFB                		bf/s	.x_loop
(2) 1619/ 600107C : 365C                		add	r5,r6
(2) 1620/ 600107E : 3347                		cmp/gt	r4,r3
(2) 1621/ 6001080 : 8FE8                		bf/s	.y_loop
(2) 1622/ 6001082 : 335C                		add	r5,r3
(2) 1623/ 6001084 :                     .bad_xy:
(2) 1624/ 6001084 : AFA6                		bra	.next_one
(2) 1625/ 6001086 : 7D14                		add	#sizeof_marsspr,r13
(2) 1626/ 6001088 :                     .exit:
(2) 1627/ 6001088 : 000B                		rts
(2) 1628/ 600108A : 0009                		nop
(2) 1629/ 600108C :                     		align 4
(2) 1630/ 600108C : 2600 8710 2600 CA40 		ltorg
                    0600 0050 0140 00F0 
(2) 1631/ 600109C :                     
(2) 1632/ 600109C :                     		align 4
(2) 1633/ 600109C :                     
(1) 1051/ 600109C :                     		include "system/mars/sound.asm"
(2)    1/ 600109C :                     ; ====================================================================
(2)    2/ 600109C :                     ; ----------------------------------------------------------------
(2)    3/ 600109C :                     ; 32X Sound
(2)    4/ 600109C :                     ; ----------------------------------------------------------------
(2)    5/ 600109C :                     
(2)    6/ 600109C :                     ; --------------------------------------------------------
(2)    7/ 600109C :                     ; Settings
(2)    8/ 600109C :                     ; --------------------------------------------------------
(2)    9/ 600109C :                     
(2)   10/ 600109C : =$7                 MAX_PWMCHNL	equ	7	; MAXIMUM usable PWM channels (TODO: keep it like this, might break the Z80 side...)
(2)   11/ 600109C : =$80                MAX_PWMBACKUP	equ	$80	; 1-bit sizes only. ($40,$80,$100...)
(2)   12/ 600109C :                     
(2)   13/ 600109C :                     ; --------------------------------------------------------
(2)   14/ 600109C :                     ; Structs
(2)   15/ 600109C :                     ; --------------------------------------------------------
(2)   16/ 600109C :                     
(2)   17/ 600109C :                     ; 32X sound channel
(2)   18/ 600109C : (MACRO)             		struct 0
(2)   18/ 600109C : =$600109C           GLBL_LASTPC     set *
(2)   18/   2745C :                                     dephase
(2)   18/   2745C : =$2745C             GLBL_LASTORG    set *
(2)   18/       0 :                                     phase 0
(2)   19/       0 :                     mchnsnd_enbl	ds.l 1
(2)   20/       4 :                     mchnsnd_read	ds.l 1		; 0 - off
(2)   21/       8 :                     mchnsnd_cchread	ds.l 1
(2)   22/       C :                     mchnsnd_bank	ds.l 1		; CS0-3 OR value
(2)   23/      10 :                     mchnsnd_start	ds.l 1
(2)   24/      14 :                     mchnsnd_end	ds.l 1
(2)   25/      18 :                     mchnsnd_loop	ds.l 1
(2)   26/      1C :                     mchnsnd_pitch	ds.l 1
(2)   27/      20 :                     mchnsnd_flags	ds.l 1		; %SLR S-wave format mono/stereo | LR-wave output bits
(2)   28/      24 :                     mchnsnd_vol	ds.l 1
(2)   29/      28 :                     sizeof_sndchn	ds.l 0
(2)   30/      28 : (MACRO)             		finish
(2)   30/       0 :                                     !org GLBL_LASTORG
(2)   30/ 600109C :                                     phase GLBL_LASTPC
(2)   31/ 600109C :                     
(2)   32/ 600109C :                     ; ====================================================================
(2)   33/ 600109C :                     
(2)   34/ 600109C :                     ; *** The main PWM playback code (PWM interrupt) and the
(2)   35/ 600109C :                     ; channel list is located on the cache.asm file. ***
(2)   36/ 600109C :                     
(2)   37/ 600109C :                     ; ====================================================================
(2)   38/ 600109C :                     ; --------------------------------------------------------
(2)   39/ 600109C :                     ; Init Sound PWM
(2)   40/ 600109C :                     ;
(2)   41/ 600109C :                     ; Cycle register formula for
(2)   42/ 600109C :                     ; NTSC: ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   43/ 600109C :                     ; PAL:  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   44/ 600109C :                     ;
(2)   45/ 600109C :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   46/ 600109C :                     ; --------------------------------------------------------
(2)   47/ 600109C :                     
(2)   48/ 600109C :                     MarsSound_Init:
(2)   49/ 600109C : 4F13                		stc	gbr,@-r15
(2)   50/ 600109E : D039                		mov	#_sysreg,r0
(2)   51/ 60010A0 : 401E                		ldc	r0,gbr
(2)   52/ 60010A2 : 9081                		mov	#$0105,r0				; Timing interval $01, output L/R
(2)   53/ 60010A4 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   54/ 60010A6 : 9080                		mov	#((((23011361<<1)/22050+1)>>1)+1),r0	; Samplerate
(2)   55/ 60010A8 : C119                		mov.w	r0,@(cycle,gbr)
(2)   56/ 60010AA : E001                		mov	#1,r0
(2)   57/ 60010AC : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   58/ 60010AE : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   59/ 60010B0 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   60/ 60010B2 : 4F17                		ldc	@r15+,gbr
(2)   61/ 60010B4 : 000B                		rts
(2)   62/ 60010B6 : 0009                		nop
(2)   63/ 60010B8 :                     		align 4
(2)   64/ 60010B8 :                     
(2)   65/ 60010B8 :                     ; ====================================================================
(2)   66/ 60010B8 :                     ; ----------------------------------------------------------------
(2)   67/ 60010B8 :                     ; Subroutines
(2)   68/ 60010B8 :                     ; ----------------------------------------------------------------
(2)   69/ 60010B8 :                     
(2)   70/ 60010B8 :                     ; --------------------------------------------------------
(2)   71/ 60010B8 :                     ; MarsSound_SetPwm
(2)   72/ 60010B8 :                     ;
(2)   73/ 60010B8 :                     ; Sets new sound data to a channel slot, automaticly
(2)   74/ 60010B8 :                     ; plays.
(2)   75/ 60010B8 :                     ;
(2)   76/ 60010B8 :                     ; Input:
(2)   77/ 60010B8 :                     ; r1 | Channel
(2)   78/ 60010B8 :                     ; r2 | Start address (SH2 AREA)
(2)   79/ 60010B8 :                     ; r3 | End address (SH2 AREA)
(2)   80/ 60010B8 :                     ; r4 | Loop address (SH2 AREA, ignored if loop bit isn't set)
(2)   81/ 60010B8 :                     ; r5 | Pitch ($xxxxxx.xx, $100 default speed)
(2)   82/ 60010B8 :                     ; r6 | Volume (Reverse: higher value is lower)
(2)   83/ 60010B8 :                     ; r7 | Flags: %xxxxslLR
(2)   84/ 60010B8 :                     ;      LR - Enable output to these speakers
(2)   85/ 60010B8 :                     ;       l - LOOP flag
(2)   86/ 60010B8 :                     ;       s - Sample data is in Stereo (16-bit)
(2)   87/ 60010B8 :                     ;
(2)   88/ 60010B8 :                     ; Breaks:
(2)   89/ 60010B8 :                     ; r0,r8-r9,macl
(2)   90/ 60010B8 :                     ; --------------------------------------------------------
(2)   91/ 60010B8 :                     
(2)   92/ 60010B8 :                     MarsSound_SetPwm:
(2)   93/ 60010B8 : D833                		mov	#MarsSnd_PwmChnls,r8
(2)   94/ 60010BA : E028                		mov 	#sizeof_sndchn,r0
(2)   95/ 60010BC : 201E                		mulu	r1,r0
(2)   96/ 60010BE : 001A                		sts	macl,r0
(2)   97/ 60010C0 : 380C                		add 	r0,r8
(2)   98/ 60010C2 : E000                		mov 	#0,r0
(2)   99/ 60010C4 : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  100/ 60010C6 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  101/ 60010C6 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  102/ 60010C6 : 1857                		mov 	r5,@(mchnsnd_pitch,r8)
(2)  103/ 60010C8 : 1869                		mov 	r6,@(mchnsnd_vol,r8)
(2)  104/ 60010CA : 1878                		mov 	r7,@(mchnsnd_flags,r8)
(2)  105/ 60010CC : 6023                		mov 	r2,r0				; Set MSB
(2)  106/ 60010CE : D92F                		mov 	#$FF000000,r9
(2)  107/ 60010D0 : 2099                		and 	r9,r0
(2)  108/ 60010D2 : 1803                		mov 	r0,@(mchnsnd_bank,r8)
(2)  109/ 60010D4 : 6043                		mov 	r4,r0				; Set POINTS
(2)  110/ 60010D6 : 88FF                		cmp/eq	#-1,r0
(2)  111/ 60010D8 : 8900                		bt	.endmrk
(2)  112/ 60010DA : 4018                		shll8	r0
(2)  113/ 60010DC :                     .endmrk:
(2)  114/ 60010DC : 1806                		mov	r0,@(mchnsnd_loop,r8)
(2)  115/ 60010DE : 6033                		mov 	r3,r0
(2)  116/ 60010E0 : 4018                		shll8	r0
(2)  117/ 60010E2 : 1805                		mov	r0,@(mchnsnd_end,r8)
(2)  118/ 60010E4 : 6023                		mov 	r2,r0
(2)  119/ 60010E6 : 4018                		shll8	r0
(2)  120/ 60010E8 : 1804                		mov 	r0,@(mchnsnd_start,r8)
(2)  121/ 60010EA : 1801                		mov 	r0,@(mchnsnd_read,r8)
(2)  122/ 60010EC : E001                		mov 	#1,r0
(2)  123/ 60010EE : 1800                		mov 	r0,@(mchnsnd_enbl,r8)
(2)  124/ 60010F0 : 000B                		rts
(2)  125/ 60010F2 : 0009                		nop
(2)  126/ 60010F4 :                     		align 4
(2)  127/ 60010F4 :                     
(2)  128/ 60010F4 :                     ; --------------------------------------------------------
(2)  129/ 60010F4 :                     ; MarsSound_SetPwmPitch
(2)  130/ 60010F4 :                     ;
(2)  131/ 60010F4 :                     ; Sets pitch data of a channel slot
(2)  132/ 60010F4 :                     ;
(2)  133/ 60010F4 :                     ; Input:
(2)  134/ 60010F4 :                     ; r1 | Channel
(2)  135/ 60010F4 :                     ; r2 | Pitch ($xxxxxx.xx, $100 default)
(2)  136/ 60010F4 :                     ;
(2)  137/ 60010F4 :                     ; Breaks:
(2)  138/ 60010F4 :                     ; r8,macl
(2)  139/ 60010F4 :                     ; --------------------------------------------------------
(2)  140/ 60010F4 :                     
(2)  141/ 60010F4 :                     MarsSound_SetPwmPitch:
(2)  142/ 60010F4 : D826                		mov	#MarsSnd_PwmChnls,r8
(2)  143/ 60010F6 : E028                		mov 	#sizeof_sndchn,r0
(2)  144/ 60010F8 : 201E                		mulu	r1,r0
(2)  145/ 60010FA : 001A                		sts	macl,r0
(2)  146/ 60010FC : 380C                		add 	r0,r8
(2)  147/ 60010FE : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  148/ 6001100 : 8801                		cmp/eq	#1,r0
(2)  149/ 6001102 : 8B01                		bf	.off_1
(2)  150/ 6001104 : 5081                		mov	@(mchnsnd_read,r8),r0
(2)  151/ 6001106 : 1827                		mov	r2,@(mchnsnd_pitch,r8)
(2)  152/ 6001108 :                     .off_1:
(2)  153/ 6001108 : 000B                		rts
(2)  154/ 600110A : 0009                		nop
(2)  155/ 600110C :                     		align 4
(2)  156/ 600110C :                     
(2)  157/ 600110C :                     ; --------------------------------------------------------
(2)  158/ 600110C :                     ; MarsSound_SetVolume
(2)  159/ 600110C :                     ;
(2)  160/ 600110C :                     ; Changes the volume of a channel slot
(2)  161/ 600110C :                     ;
(2)  162/ 600110C :                     ; Input:
(2)  163/ 600110C :                     ; r1 | Channel
(2)  164/ 600110C :                     ; r2 | Volume (in reverse: higher value is low)
(2)  165/ 600110C :                     ;
(2)  166/ 600110C :                     ; Breaks:
(2)  167/ 600110C :                     ; r8,macl
(2)  168/ 600110C :                     ; --------------------------------------------------------
(2)  169/ 600110C :                     
(2)  170/ 600110C :                     MarsSound_SetVolume:
(2)  171/ 600110C : D821                		mov	#MarsSnd_PwmChnls,r8
(2)  172/ 600110E : E028                		mov 	#sizeof_sndchn,r0
(2)  173/ 6001110 : 201E                		mulu	r1,r0
(2)  174/ 6001112 : 001A                		sts	macl,r0
(2)  175/ 6001114 : 380C                		add 	r0,r8
(2)  176/ 6001116 : 5080                		mov	@(mchnsnd_enbl,r8),r0
(2)  177/ 6001118 : 8801                		cmp/eq	#1,r0
(2)  178/ 600111A : 8B01                		bf	.off_1
(2)  179/ 600111C : 6023                		mov	r2,r0
(2)  180/ 600111E : 1809                		mov	r0,@(mchnsnd_vol,r8)
(2)  181/ 6001120 :                     .off_1:
(2)  182/ 6001120 : 000B                		rts
(2)  183/ 6001122 : 0009                		nop
(2)  184/ 6001124 :                     		align 4
(2)  185/ 6001124 :                     
(2)  186/ 6001124 :                     ; --------------------------------------------------------
(2)  187/ 6001124 :                     ; MarsSound_PwmEnable
(2)  188/ 6001124 :                     ;
(2)  189/ 6001124 :                     ; Turns ON or OFF Current PWM slot
(2)  190/ 6001124 :                     ;
(2)  191/ 6001124 :                     ; Input:
(2)  192/ 6001124 :                     ; r1 | Channel
(2)  193/ 6001124 :                     ; r2 | Enable/Disable
(2)  194/ 6001124 :                     ;
(2)  195/ 6001124 :                     ; Breaks:
(2)  196/ 6001124 :                     ; r8,macl
(2)  197/ 6001124 :                     ; --------------------------------------------------------
(2)  198/ 6001124 :                     
(2)  199/ 6001124 :                     MarsSound_PwmEnable:
(2)  200/ 6001124 : D81C                		mov	#MarsSnd_PwmChnls,r8
(2)  201/ 6001126 : E028                		mov 	#sizeof_sndchn,r0
(2)  202/ 6001128 : 201E                		mulu	r1,r0
(2)  203/ 600112A : 001A                		sts	macl,r0
(2)  204/ 600112C : 380C                		add 	r0,r8
(2)  205/ 600112E : 1820                		mov 	r2,@(mchnsnd_enbl,r8)
(2)  206/ 6001130 :                     ; 		mov 	#0,r0
(2)  207/ 6001130 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  208/ 6001130 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  209/ 6001130 : 000B                		rts
(2)  210/ 6001132 : 0009                		nop
(2)  211/ 6001134 :                     		align 4
(2)  212/ 6001134 :                     
(2)  213/ 6001134 :                     ; --------------------------------------------------------
(2)  214/ 6001134 :                     ; MarsSound_Refill
(2)  215/ 6001134 :                     ;
(2)  216/ 6001134 :                     ; Call this before the 68K side closes ROM access
(2)  217/ 6001134 :                     ; (before 68k side sets RV=1)
(2)  218/ 6001134 :                     ;
(2)  219/ 6001134 :                     ; Breaks:
(2)  220/ 6001134 :                     ; r1-r8
(2)  221/ 6001134 :                     ;
(2)  222/ 6001134 :                     ; NOTE:
(2)  223/ 6001134 :                     ; The trick here is to keep PWM interrupt enabled
(2)  224/ 6001134 :                     ; while filling the backup data
(2)  225/ 6001134 :                     ; --------------------------------------------------------
(2)  226/ 6001134 :                     
(2)  227/ 6001134 :                     MarsSnd_Refill:
(2)  228/ 6001134 : D819                		mov	#MarsSnd_PwmChnls,r8
(2)  229/ 6001136 : E607                		mov	#MAX_PWMCHNL,r6
(2)  230/ 6001138 : E728                		mov	#sizeof_sndchn,r7
(2)  231/ 600113A : D519                		mov	#MarsSnd_PwmCache,r5
(2)  232/ 600113C :                     .next_one:
(2)  233/ 600113C : 5080                		mov	@(mchnsnd_enbl,r8),r0	; This channel is active?
(2)  234/ 600113E : 8801                		cmp/eq	#1,r0
(2)  235/ 6001140 : 8B19                		bf	.not_enbl
(2)  236/ 6001142 : 5083                		mov	@(mchnsnd_bank,r8),r0	; ROM area?
(2)  237/ 6001144 : D217                		mov	#CS1,r2
(2)  238/ 6001146 : 3020                		cmp/eq	r2,r0
(2)  239/ 6001148 : 8B15                		bf	.not_enbl
(2)  240/ 600114A : E100                		mov	#0,r1			; Reset backup LSB
(2)  241/ 600114C : 1812                		mov	r1,@(mchnsnd_cchread,r8)
(2)  242/ 600114E : 6153                		mov	r5,r1
(2)  243/ 6001150 : E220                		mov	#MAX_PWMBACKUP/4,r2	; Max bytes / 4
(2)  244/ 6001152 : 5481                		mov	@(mchnsnd_read,r8),r4	; r4 - OLD READ pos
(2)  245/ 6001154 : 6343                		mov	r4,r3
(2)  246/ 6001156 : 4319                		shlr8	r3
(2)  247/ 6001158 : 330C                		add	r0,r3
(2)  248/ 600115A :                     
(2)  249/ 600115A :                     	; TODO: luego checar si ya puedo usar LONGs.
(2)  250/ 600115A :                     .copy_now:
(2)  251/ 600115A :                     	rept 4-1
(2)  252/ 600115A :                     		mov.b	@r3+,r0		; byte by byte...
(2)  253/ 600115A :                     		mov.b	r0,@r1
(2)  254/ 600115A :                     		add	#1,r1
(2)  255/ 600115A :                     	endm
(2)  252/ 600115A : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  253/ 600115C : 2100                		mov.b	r0,@r1
(2)  254/ 600115E : 7101                		add	#1,r1
(2)  252/ 6001160 : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  253/ 6001162 : 2100                		mov.b	r0,@r1
(2)  254/ 6001164 : 7101                		add	#1,r1
(2)  252/ 6001166 : 6034                		mov.b	@r3+,r0		; byte by byte...
(2)  253/ 6001168 : 2100                		mov.b	r0,@r1
(2)  254/ 600116A : 7101                		add	#1,r1
(2)  256/ 600116C : 6034                		mov.b	@r3+,r0
(2)  257/ 600116E : 2100                		mov.b	r0,@r1
(2)  258/ 6001170 : 4210                		dt	r2
(2)  259/ 6001172 : 8FF2                		bf/s	.copy_now
(2)  260/ 6001174 : 7101                		add	#1,r1
(2)  261/ 6001176 :                     .not_enbl:
(2)  262/ 6001176 : 9019                		mov	#MAX_PWMBACKUP,r0
(2)  263/ 6001178 : 350C                		add	r0,r5
(2)  264/ 600117A : 4610                		dt	r6
(2)  265/ 600117C : 8FDE                		bf/s	.next_one
(2)  266/ 600117E : 387C                		add	r7,r8
(2)  267/ 6001180 : 000B                		rts
(2)  268/ 6001182 : 0009                		nop
(2)  269/ 6001184 :                     		align 4
(2)  270/ 6001184 :                     
(2)  271/ 6001184 :                     ; ====================================================================
(2)  272/ 6001184 :                     
(2)  273/ 6001184 : 2000 4000 C000 065C 		ltorg			; Save literals
                    FF00 0000 C000 065C 
                    C000 065C C000 065C 
                    C000 065C 2600 8AC0 
                    0200 0000 0105 0415 
                    0080                
(2)  274/ 60011AE :                     
(1) 1052/ 60011AE :                     		align 4
(1) 1053/ 60011B0 :                     
(1) 1054/ 60011B0 :                     ; ====================================================================
(1) 1055/ 60011B0 :                     ; ----------------------------------------------------------------
(1) 1056/ 60011B0 :                     ; Master entry
(1) 1057/ 60011B0 :                     ; ----------------------------------------------------------------
(1) 1058/ 60011B0 :                     
(1) 1059/ 60011B0 :                     		align 4
(1) 1060/ 60011B0 :                     SH2_M_Entry:
(1) 1061/ 60011B0 : 9E48                		mov.l	#$FFFFFE10,r14
(1) 1062/ 60011B2 : E000                		mov	#0,r0
(1) 1063/ 60011B4 : 80E0                		mov.b	r0,@(0,r14)
(1) 1064/ 60011B6 : E0E2                		mov	#$FFFFFFE2,r0
(1) 1065/ 60011B8 : 80E7                		mov.b	r0,@(7,r14)
(1) 1066/ 60011BA : E000                		mov	#0,r0
(1) 1067/ 60011BC : 80E4                		mov.b	r0,@(4,r14)
(1) 1068/ 60011BE : E001                		mov	#1,r0
(1) 1069/ 60011C0 : 80E5                		mov.b	r0,@(5,r14)
(1) 1070/ 60011C2 : E000                		mov	#0,r0
(1) 1071/ 60011C4 : 80E6                		mov.b	r0,@(6,r14)
(1) 1072/ 60011C6 : E001                		mov	#1,r0
(1) 1073/ 60011C8 : 80E1                		mov.b	r0,@(1,r14)
(1) 1074/ 60011CA : E000                		mov	#0,r0
(1) 1075/ 60011CC : 80E3                		mov.b	r0,@(3,r14)
(1) 1076/ 60011CE : 80E2                		mov.b	r0,@(2,r14)
(1) 1077/ 60011D0 : E0F2                		mov	#$FFFFFFF2,r0
(1) 1078/ 60011D2 : 80E7                		mov.b	r0,@(7,r14)
(1) 1079/ 60011D4 : E000                		mov	#0,r0
(1) 1080/ 60011D6 : 80E4                		mov.b	r0,@(4,r14)
(1) 1081/ 60011D8 : E001                		mov	#1,r0
(1) 1082/ 60011DA : 80E5                		mov.b	r0,@(5,r14)
(1) 1083/ 60011DC : E0E2                		mov	#$FFFFFFE2,r0
(1) 1084/ 60011DE : 80E7                		mov.b	r0,@(7,r14)
(1) 1085/ 60011E0 :                     
(1) 1086/ 60011E0 : DF13                		mov	#CS3|$40000,r15			; Set default Stack for Master
(1) 1087/ 60011E2 : DE14                		mov	#RAM_Mars_Global,r14		; GBR - Global values/variables go here.
(1) 1088/ 60011E4 : 4E1E                		ldc	r14,gbr
(1) 1089/ 60011E6 : 902E                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1) 1090/ 60011E8 : E150                		mov     #%0101<<4,r1
(1) 1091/ 60011EA : 2011                		mov.w   r1,@r0
(1) 1092/ 60011EC : 902C                		mov.l   #$FFFFFEE4,r0
(1) 1093/ 60011EE : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer: VBR + (this/4) (WITV)
(1) 1094/ 60011F0 : 4118                		shll8   r1
(1) 1095/ 60011F2 : 2011                		mov.w   r1,@r0
(1) 1096/ 60011F4 :                     
(1) 1097/ 60011F4 : D010                		mov	#MarsVideo_Init,r0		; Init Video
(1) 1098/ 60011F6 : 400B                		jsr	@r0
(1) 1099/ 60011F8 : 0009                		nop
(1) 1100/ 60011FA : D110                		mov	#_sysreg,r1
(1) 1101/ 60011FC : E002                		mov	#CMDIRQ_ON,r0			; Enable usage of these interrupts
(1) 1102/ 60011FE : 8011                    		mov.b	r0,@(intmask,r1)
(1) 1103/ 6001200 :                     .wait_md:
(1) 1104/ 6001200 :                     ; 		mov 	#_sysreg+comm12,r2
(1) 1105/ 6001200 :                     ; 		mov.w	@r2,r0
(1) 1106/ 6001200 :                     ; 		cmp/eq	#0,r0
(1) 1107/ 6001200 :                     ; 		bf	.wait_md
(1) 1108/ 6001200 :                     
(1) 1109/ 6001200 :                     ; ====================================================================
(1) 1110/ 6001200 :                     ; ----------------------------------------------------------------
(1) 1111/ 6001200 :                     ; Master main code
(1) 1112/ 6001200 :                     ;
(1) 1113/ 6001200 :                     ; This CPU is exclusively used for the visuals:
(1) 1114/ 6001200 :                     ; software-rendered backgrounds, sprites and polygons.
(1) 1115/ 6001200 :                     ; ----------------------------------------------------------------
(1) 1116/ 6001200 :                     
(1) 1117/ 6001200 :                     SH2_M_HotStart:
(1) 1118/ 6001200 : DE0E                		mov	#$20004000,r14
(1) 1119/ 6001202 : E000                		mov	#0,r0
(1) 1120/ 6001204 : 81EA                		mov.w	r0,@($14,r14)
(1) 1121/ 6001206 : 81EB                		mov.w	r0,@($16,r14)
(1) 1122/ 6001208 : 81EC                		mov.w	r0,@($18,r14)
(1) 1123/ 600120A : 81ED                		mov.w	r0,@($1A,r14)
(1) 1124/ 600120C : D10C                		mov	#RAM_Mars_DreqRead,r1		; Clear DREQ output
(1) 1125/ 600120E : 921C                		mov	#sizeof_dreq/4,r2		; NOTE: length as 4bytes
(1) 1126/ 6001210 : E000                		mov	#0,r0
(1) 1127/ 6001212 :                     .clrram:
(1) 1128/ 6001212 : 2102                		mov	r0,@r1
(1) 1129/ 6001214 : 4210                		dt	r2
(1) 1130/ 6001216 : 8FFC                		bf/s	.clrram
(1) 1131/ 6001218 : 7104                		add	#4,r1
(1) 1132/ 600121A : E020                		mov	#$20,r0				; Interrupts ON
(1) 1133/ 600121C : 400E                		ldc	r0,sr
(1) 1134/ 600121E :                     
(1) 1135/ 600121E :                     	; TEMPORAL
(1) 1136/ 600121E :                     ; 		mov	#1,r0
(1) 1137/ 600121E :                     ; 		mov.w	r0,@(marsGbl_WaveEnable,gbr)
(1) 1138/ 600121E : E008                		mov	#8,r0
(1) 1139/ 6001220 : C122                		mov.w	r0,@(marsGbl_WaveSpd,gbr)
(1) 1140/ 6001222 : E008                		mov	#8,r0
(1) 1141/ 6001224 : C123                		mov.w	r0,@(marsGbl_WaveMax,gbr)
(1) 1142/ 6001226 : E020                		mov	#32,r0
(1) 1143/ 6001228 : C124                		mov.w	r0,@(marsGbl_WaveDeform,gbr)
(1) 1144/ 600122A :                     
(1) 1145/ 600122A : A00F                		bra	master_loop
(1) 1146/ 600122C : 0009                		nop
(1) 1147/ 600122E :                     		align 4
(1) 1148/ 6001230 : 0604 0000 2600 8990 		ltorg
                    0600 07D4 2000 4000 
                    2600 8330 FE10 FEE2 
                    FEE4 0198           
(1) 1149/ 600124C :                     
(1) 1150/ 600124C :                     ; ----------------------------------------------------------------
(1) 1151/ 600124C :                     ; MASTER CPU loop
(1) 1152/ 600124C :                     ;
(1) 1153/ 600124C :                     ; comm12:
(1) 1154/ 600124C :                     ; bssscccc ir000lll
(1) 1155/ 600124C :                     ;
(1) 1156/ 600124C :                     ; b - busy bit on the CMD interrupt
(1) 1157/ 600124C :                     ;     (68k knows that the interrupt is active)
(1) 1158/ 600124C :                     ; s - status bits for some CMD interrupt tasks
(1) 1159/ 600124C :                     ; c - command number for CMD interrupt
(1) 1160/ 600124C :                     ; i - Initialitation bit
(1) 1161/ 600124C :                     ; r - Clears on exit, set this bit on 68k side to wait for the
(1) 1162/ 600124C :                     ;     current screen to finish.
(1) 1163/ 600124C :                     ; l - MAIN LOOP command/task, inlcude the i bit to properly
(1) 1164/ 600124C :                     ;     (re)start
(1) 1165/ 600124C :                     ; ----------------------------------------------------------------
(1) 1166/ 600124C :                     
(1) 1167/ 600124C :                     		align 4
(1) 1168/ 600124C :                     master_loop:
(1) 1175/ 600124C :                     
(1) 1176/ 600124C :                     	; ---------------------------------------
(1) 1177/ 600124C :                     	; Wait frameswap manually
(1) 1178/ 600124C : D134                		mov	#_vdpreg,r1			; r1 - SVDP area
(1) 1179/ 600124E : 8515                .wait_fb:	mov.w	@(vdpsts,r1),r0			; SVDP FILL active?
(1) 1180/ 6001250 : C802                		tst	#%10,r0
(1) 1181/ 6001252 : 8BFC                		bf	.wait_fb
(1) 1182/ 6001254 : 841B                		mov.b	@(framectl,r1),r0		; Framebuffer swap REQUEST.
(1) 1183/ 6001256 : CA01                		xor	#1,r0
(1) 1184/ 6001258 : 801B                		mov.b	r0,@(framectl,r1)
(1) 1185/ 600125A : 6203                		mov	r0,r2				; r2 - NEW framebuffer bit
(1) 1186/ 600125C : 841B                .wait_frmswp:	mov.b	@(framectl,r1),r0		; Framebuffer ready?
(1) 1187/ 600125E : 3200                		cmp/eq	r0,r2
(1) 1188/ 6001260 : 8BFC                		bf	.wait_frmswp
(1) 1189/ 6001262 : 4F03                		stc	sr,@-r15			; Interrupts OFF
(1) 1190/ 6001264 : 9072                		mov	#$F0,r0
(1) 1191/ 6001266 : 400E                		ldc	r0,sr
(1) 1192/ 6001268 : D12E                		mov	#_sysreg+comm12+1,r1		; Clear comm R bit
(1) 1193/ 600126A : 6010                		mov.b	@r1,r0				; this tells to 68k that frame is ready.
(1) 1194/ 600126C : C9BF                		and	#%10111111,r0
(1) 1195/ 600126E : 2100                		mov.b	r0,@r1
(1) 1196/ 6001270 : C519                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first
(1) 1197/ 6001272 : D12D                		mov	#_vdpreg+shift,r1		; For the indexed-scrolling mode.
(1) 1198/ 6001274 : C901                		and	#1,r0
(1) 1199/ 6001276 : 2101                		mov.w	r0,@r1
(1) 1200/ 6001278 : D12C                		mov	#RAM_Mars_DreqDma,r1		; Copy DREQ data that DMA recieved into
(1) 1201/ 600127A : D22D                		mov	#RAM_Mars_DreqRead,r2		; a safe location for reading.
(1) 1202/ 600127C : 9367                		mov	#sizeof_dreq/4,r3		; NOTE: copying as LONGS
(1) 1203/ 600127E :                     .copy_safe:
(1) 1204/ 600127E : 6016                		mov	@r1+,r0
(1) 1205/ 6001280 : 2202                		mov	r0,@r2
(1) 1206/ 6001282 : 4310                		dt	r3
(1) 1207/ 6001284 : 8FFB                		bf/s	.copy_safe
(1) 1208/ 6001286 : 7204                		add	#4,r2
(1) 1209/ 6001288 : D125                		mov	#_vdpreg,r1
(1) 1210/ 600128A : 841A                .wait:		mov.b	@(vdpsts,r1),r0
(1) 1211/ 600128C : C920                		and	#$20,r0
(1) 1212/ 600128E : 2008                		tst	r0,r0			; Palette unlocked?
(1) 1213/ 6001290 : 89FB                		bt	.wait
(1) 1214/ 6001292 : D128                		mov	#RAM_Mars_DreqRead+Dreq_Palette,r1
(1) 1215/ 6001294 : D228                		mov	#_palette,r2
(1) 1216/ 6001296 : E320                 		mov	#256/8,r3
(1) 1217/ 6001298 :                     .copy_pal:
(1) 1218/ 6001298 :                     	rept 8
(1) 1219/ 6001298 :                     		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 6001298 :                     		mov	r0,@r2
(1) 1221/ 6001298 :                     		add	#4,r2
(1) 1222/ 6001298 :                     	endm
(1) 1219/ 6001298 : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 600129A : 2202                		mov	r0,@r2
(1) 1221/ 600129C : 7204                		add	#4,r2
(1) 1219/ 600129E : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012A0 : 2202                		mov	r0,@r2
(1) 1221/ 60012A2 : 7204                		add	#4,r2
(1) 1219/ 60012A4 : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012A6 : 2202                		mov	r0,@r2
(1) 1221/ 60012A8 : 7204                		add	#4,r2
(1) 1219/ 60012AA : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012AC : 2202                		mov	r0,@r2
(1) 1221/ 60012AE : 7204                		add	#4,r2
(1) 1219/ 60012B0 : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012B2 : 2202                		mov	r0,@r2
(1) 1221/ 60012B4 : 7204                		add	#4,r2
(1) 1219/ 60012B6 : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012B8 : 2202                		mov	r0,@r2
(1) 1221/ 60012BA : 7204                		add	#4,r2
(1) 1219/ 60012BC : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012BE : 2202                		mov	r0,@r2
(1) 1221/ 60012C0 : 7204                		add	#4,r2
(1) 1219/ 60012C2 : 6016                		mov	@r1+,r0			; Copy as LONGs, works on HW
(1) 1220/ 60012C4 : 2202                		mov	r0,@r2
(1) 1221/ 60012C6 : 7204                		add	#4,r2
(1) 1223/ 60012C8 : 4310                		dt	r3
(1) 1224/ 60012CA : 8BE5                		bf	.copy_pal
(1) 1225/ 60012CC : 4F07                		ldc	@r15+,sr		; Interrupts ON
(1) 1226/ 60012CE :                     
(1) 1227/ 60012CE :                     	; ---------------------------------------
(1) 1228/ 60012CE :                     	; Per-mode VBlank changes
(1) 1229/ 60012CE :                     	; ---------------------------------------
(1) 1230/ 60012CE :                     
(1) 1231/ 60012CE : D11B                		mov	#mstr_gfxlist_v,r1		; Point to VBLANK jumps
(1) 1232/ 60012D0 : D21B                		mov	#_sysreg+comm12,r2
(1) 1233/ 60012D2 : 6021                		mov.w	@r2,r0
(1) 1234/ 60012D4 : C907                		and	#%0111,r0
(1) 1235/ 60012D6 : 4008                		shll2	r0
(1) 1236/ 60012D8 : 4008                		shll2	r0
(1) 1237/ 60012DA : 011E                		mov	@(r1,r0),r1
(1) 1238/ 60012DC : 410B                		jsr	@r1
(1) 1239/ 60012DE : 0009                		nop
(1) 1240/ 60012E0 :                     
(1) 1241/ 60012E0 :                     ; ---------------------------------------
(1) 1242/ 60012E0 :                     ; Pick graphics mode on comm12
(1) 1243/ 60012E0 :                     ; ---------------------------------------
(1) 1244/ 60012E0 :                     
(1) 1245/ 60012E0 : D318                		mov	#mstr_gfxlist,r3		; Default LOOP points
(1) 1246/ 60012E2 : D217                		mov	#_sysreg+comm12,r2
(1) 1247/ 60012E4 : 6021                		mov.w	@r2,r0				; r0 - INIT bit
(1) 1248/ 60012E6 : 6103                		mov	r0,r1				; r1 - mode
(1) 1249/ 60012E8 : C880                		tst	#$80,r0				; First time/Full redraw?
(1) 1250/ 60012EA : 8909                		bt	.no_init
(1) 1251/ 60012EC : D416                		mov	#_sysreg+comm14,r4		; Wait slave first.
(1) 1252/ 60012EE : 6041                .wait_slv:	mov.w	@r4,r0
(1) 1253/ 60012F0 : C9FF                		and	#$FF,r0
(1) 1254/ 60012F2 : 2008                		tst	r0,r0
(1) 1255/ 60012F4 : 8BFB                		bf	.wait_slv
(1) 1256/ 60012F6 : 6021                		mov.w	@r2,r0
(1) 1257/ 60012F8 : C97F                		and	#$7F,r0				; Reset init bit
(1) 1258/ 60012FA : 2201                		mov.w	r0,@r2
(1) 1259/ 60012FC : E002                		mov	#2,r0
(1) 1260/ 60012FE : C11C                		mov.w	r0,@(marsGbl_MdInitTmr,gbr)
(1) 1261/ 6001300 :                     .no_init:
(1) 1262/ 6001300 : C51C                		mov.w	@(marsGbl_MdInitTmr,gbr),r0
(1) 1263/ 6001302 : 6203                		mov	r0,r2
(1) 1264/ 6001304 : 2008                		tst	r0,r0
(1) 1265/ 6001306 : 8901                		bt	.tmr_off
(1) 1266/ 6001308 : 4010                		dt	r0
(1) 1267/ 600130A : C11C                		mov.w	r0,@(marsGbl_MdInitTmr,gbr)
(1) 1268/ 600130C :                     .tmr_off:
(1) 1269/ 600130C : 4208                		shll2	r2
(1) 1270/ 600130E : 6013                		mov	r1,r0
(1) 1271/ 6001310 : C907                		and	#%111,r0
(1) 1272/ 6001312 : 4008                		shll2	r0
(1) 1273/ 6001314 : 4008                		shll2	r0
(1) 1274/ 6001316 : 302C                		add	r2,r0
(1) 1275/ 6001318 : 033E                		mov	@(r3,r0),r3
(1) 1276/ 600131A : 432B                		jmp	@r3
(1) 1277/ 600131C : 0009                		nop
(1) 1278/ 600131E :                     		align 4
(1) 1279/ 6001320 : 2000 4100 2000 402D 		ltorg
                    2000 4102 2600 7CD0 
                    2600 8330 2600 8330 
                    2000 4200 0600 137C 
                    2000 402C 0600 1370 
                    2000 402E 00F0 0198 
(1) 1280/ 6001350 :                     
(1) 1281/ 6001350 :                     ; ---------------------------------------
(1) 1282/ 6001350 :                     ; jump lists
(1) 1283/ 6001350 :                     
(1) 1284/ 6001350 :                     		align 4
(1) 1285/ 6001350 : 0600 13F0           mstr_gfxlist_h:	dc.l mstr_gfx0_hblk	; $00 ***placeholder***
(1) 1286/ 6001354 : 0600 140A           		dc.l mstr_gfx1_hblk	; $01
(1) 1287/ 6001358 : 0600 1468           		dc.l mstr_gfx2_hblk	; $02
(1) 1288/ 600135C : 0600 1596           		dc.l mstr_gfx3_hblk	; $03
(1) 1289/ 6001360 : 0600 1640           		dc.l mstr_gfx4_hblk	; $04
(1) 1290/ 6001364 : 0600 13F0           		dc.l mstr_gfx0_hblk	; $05
(1) 1291/ 6001368 : 0600 13F0           		dc.l mstr_gfx0_hblk	; $06
(1) 1292/ 600136C : 0600 13F0           		dc.l mstr_gfx0_hblk	; $07
(1) 1293/ 6001370 : 0600 1406           mstr_gfxlist:	dc.l mstr_gfx0_loop	; $00
(1) 1294/ 6001374 : 0600 1406           		dc.l mstr_gfx0_init_2
(1) 1295/ 6001378 : 0600 13F8           		dc.l mstr_gfx0_init_1
(1) 1296/ 600137C : 0600 13F4           mstr_gfxlist_v:	dc.l mstr_gfx0_vblk
(1) 1297/ 6001380 : 0600 141E           		dc.l mstr_gfx1_loop	; $01
(1) 1298/ 6001384 : 0600 1414           		dc.l mstr_gfx1_init_2
(1) 1299/ 6001388 : 0600 141A           		dc.l mstr_gfx1_init_1
(1) 1300/ 600138C : 0600 1410           		dc.l mstr_gfx1_vblk
(1) 1301/ 6001390 : 0600 14CE           		dc.l mstr_gfx2_loop	; $02
(1) 1302/ 6001394 : 0600 14C4           		dc.l mstr_gfx2_init_2
(1) 1303/ 6001398 : 0600 1490           		dc.l mstr_gfx2_init_1
(1) 1304/ 600139C : 0600 146C           		dc.l mstr_gfx2_vblk
(1) 1305/ 60013A0 : 0600 15CC           		dc.l mstr_gfx3_loop	; $03
(1) 1306/ 60013A4 : 0600 15C6           		dc.l mstr_gfx3_init_2
(1) 1307/ 60013A8 : 0600 15B4           		dc.l mstr_gfx3_init_1
(1) 1308/ 60013AC : 0600 159C           		dc.l mstr_gfx3_vblk
(1) 1309/ 60013B0 : 0600 169C           		dc.l mstr_gfx4_loop	; $04
(1) 1310/ 60013B4 : 0600 1688           		dc.l mstr_gfx4_init_2
(1) 1311/ 60013B8 : 0600 1670           		dc.l mstr_gfx4_init_1
(1) 1312/ 60013BC : 0600 1644           		dc.l mstr_gfx4_vblk
(1) 1313/ 60013C0 : 0600 1406           		dc.l mstr_gfx0_loop	; $05
(1) 1314/ 60013C4 : 0600 1406           		dc.l mstr_gfx0_init_2
(1) 1315/ 60013C8 : 0600 13F8           		dc.l mstr_gfx0_init_1
(1) 1316/ 60013CC : 0600 13F4           		dc.l mstr_gfx0_vblk
(1) 1317/ 60013D0 : 0600 1406           		dc.l mstr_gfx0_loop	; $06
(1) 1318/ 60013D4 : 0600 1406           		dc.l mstr_gfx0_init_2
(1) 1319/ 60013D8 : 0600 13F8           		dc.l mstr_gfx0_init_1
(1) 1320/ 60013DC : 0600 13F4           		dc.l mstr_gfx0_vblk
(1) 1321/ 60013E0 : 0600 1406           		dc.l mstr_gfx0_loop	; $07
(1) 1322/ 60013E4 : 0600 1406           		dc.l mstr_gfx0_init_2
(1) 1323/ 60013E8 : 0600 13F8           		dc.l mstr_gfx0_init_1
(1) 1324/ 60013EC : 0600 13F4           		dc.l mstr_gfx0_vblk
(1) 1325/ 60013F0 :                     
(1) 1326/ 60013F0 :                     ; ============================================================
(1) 1327/ 60013F0 :                     ; ---------------------------------------
(1) 1328/ 60013F0 :                     ; Pseudo-screen mode $00: BLANK
(1) 1329/ 60013F0 :                     ;
(1) 1330/ 60013F0 :                     ; YOU must use set this mode if you are
(1) 1331/ 60013F0 :                     ; doing using these VDP features
(1) 1332/ 60013F0 :                     ; on the Genesis side:
(1) 1333/ 60013F0 :                     ;
(1) 1334/ 60013F0 :                     ; - H32 mode
(1) 1335/ 60013F0 :                     ; - Double interlace mode
(1) 1336/ 60013F0 :                     ;   (both H32 and H40)
(1) 1337/ 60013F0 :                     ; ---------------------------------------
(1) 1338/ 60013F0 :                     
(1) 1339/ 60013F0 :                     ; -------------------------------
(1) 1340/ 60013F0 :                     ; HBlank
(1) 1341/ 60013F0 :                     ; -------------------------------
(1) 1342/ 60013F0 :                     
(1) 1343/ 60013F0 :                     mstr_gfx0_hblk:
(1) 1344/ 60013F0 : 000B                		rts
(1) 1345/ 60013F2 : 0009                		nop
(1) 1346/ 60013F4 :                     		align 4
(1) 1347/ 60013F4 :                     
(1) 1348/ 60013F4 :                     ; -------------------------------
(1) 1349/ 60013F4 :                     ; VBlank
(1) 1350/ 60013F4 :                     ; -------------------------------
(1) 1351/ 60013F4 :                     
(1) 1352/ 60013F4 :                     mstr_gfx0_vblk:
(1) 1353/ 60013F4 : 000B                		rts
(1) 1354/ 60013F6 : 0009                		nop
(1) 1355/ 60013F8 :                     		align 4
(1) 1356/ 60013F8 :                     
(1) 1357/ 60013F8 :                     ; -------------------------------
(1) 1358/ 60013F8 :                     ; Init
(1) 1359/ 60013F8 :                     ; -------------------------------
(1) 1360/ 60013F8 :                     
(1) 1361/ 60013F8 :                     mstr_gfx0_init_1:
(1) 1362/ 60013F8 : D14D                		mov 	#_vdpreg,r1
(1) 1363/ 60013FA : E000                		mov	#0,r0
(1) 1364/ 60013FC : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1365/ 60013FE : C11D                		mov.w	r0,@(marsGbl_BgDrwR,gbr)
(1) 1366/ 6001400 : C11E                		mov.w	r0,@(marsGbl_BgDrwL,gbr)
(1) 1367/ 6001402 : C120                		mov.w	r0,@(marsGbl_BgDrwD,gbr)
(1) 1368/ 6001404 : C11F                		mov.w	r0,@(marsGbl_BgDrwU,gbr)
(1) 1369/ 6001406 :                     mstr_gfx0_init_2:
(1) 1370/ 6001406 :                     
(1) 1371/ 6001406 :                     ; -------------------------------
(1) 1372/ 6001406 :                     ; Loop
(1) 1373/ 6001406 :                     ; -------------------------------
(1) 1374/ 6001406 :                     
(1) 1375/ 6001406 :                     mstr_gfx0_loop:
(1) 1376/ 6001406 : AF21                		bra	master_loop
(1) 1377/ 6001408 : 0009                		nop
(1) 1378/ 600140A :                     
(1) 1379/ 600140A :                     ; ============================================================
(1) 1380/ 600140A :                     ; ---------------------------------------
(1) 1381/ 600140A :                     ; Pseudo-screen mode $01:
(1) 1382/ 600140A :                     ;
(1) 1383/ 600140A :                     ; A Generic screen in any
(1) 1384/ 600140A :                     ; bitmap mode: Indexed, Direct or RLE
(1) 1385/ 600140A :                     ;
(1) 1386/ 600140A :                     ; Note that DirectColors's HEIGHT
(1) 1387/ 600140A :                     ; will be limited to 200 lines.
(1) 1388/ 600140A :                     ; ---------------------------------------
(1) 1389/ 600140A :                     
(1) 1390/ 600140A :                     ; -------------------------------
(1) 1391/ 600140A :                     ; HBlank
(1) 1392/ 600140A :                     ; -------------------------------
(1) 1393/ 600140A :                     
(1) 1394/ 600140A :                     mstr_gfx1_hblk:
(1) 1395/ 600140A : 000B                		rts
(1) 1396/ 600140C : 0009                		nop
(1) 1397/ 600140E :                     		align 4
(1) 1398/ 6001410 :                     
(1) 1399/ 6001410 :                     ; -------------------------------
(1) 1400/ 6001410 :                     ; VBlank
(1) 1401/ 6001410 :                     ; -------------------------------
(1) 1402/ 6001410 :                     
(1) 1403/ 6001410 :                     mstr_gfx1_vblk:
(1) 1404/ 6001410 : 000B                		rts
(1) 1405/ 6001412 : 0009                		nop
(1) 1406/ 6001414 :                     		align 4
(1) 1407/ 6001414 :                     
(1) 1408/ 6001414 :                     ; -------------------------------
(1) 1409/ 6001414 :                     ; Init
(1) 1410/ 6001414 :                     ; -------------------------------
(1) 1411/ 6001414 :                     
(1) 1412/ 6001414 :                     mstr_gfx1_init_2:
(1) 1413/ 6001414 : D146                		mov 	#_vdpreg,r1
(1) 1414/ 6001416 : E002                		mov	#2,r0
(1) 1415/ 6001418 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1416/ 600141A :                     mstr_gfx1_init_1:
(1) 1417/ 600141A : BA17                		bsr	MarsVideo_ResetNameTbl
(1) 1418/ 600141C : 0009                		nop
(1) 1419/ 600141E :                     
(1) 1420/ 600141E :                     ; -------------------------------
(1) 1421/ 600141E :                     ; Loop
(1) 1422/ 600141E :                     ; -------------------------------
(1) 1423/ 600141E :                     
(1) 1424/ 600141E :                     mstr_gfx1_loop:
(1) 1425/ 600141E : D145                		mov	#RAM_Mars_DreqRead+Dreq_ScrnBuff,r1
(1) 1426/ 6001420 : 5011                		mov	@(Dreq_Scrn1_Type,r1),r0
(1) 1427/ 6001422 : C903                		and	#%11,r0
(1) 1428/ 6001424 : 4008                		shll2	r0
(1) 1429/ 6001426 : D244                		mov	#.m1list,r2
(1) 1430/ 6001428 : 022E                		mov	@(r0,r2),r2
(1) 1431/ 600142A : 422B                		jmp	@r2
(1) 1432/ 600142C : 0009                		nop
(1) 1433/ 600142E :                     		align 4
(1) 1434/ 6001430 :                     .m1list:
(1) 1435/ 6001430 : 0600 124C           		dc.l master_loop
(1) 1436/ 6001434 : 0600 124C           		dc.l master_loop	; Indexed
(1) 1437/ 6001438 : 0600 1440           		dc.l .direct		; Direct
(1) 1438/ 600143C : 0600 124C           		dc.l master_loop
(1) 1439/ 6001440 :                     
(1) 1440/ 6001440 :                     ; -------------------------------
(1) 1441/ 6001440 :                     ; Direct color
(1) 1442/ 6001440 :                     ; currently 320x200 (DOS-style)
(1) 1443/ 6001440 :                     .direct:
(1) 1444/ 6001440 : 5110                		mov	@(Dreq_Scrn1_Data,r1),r1
(1) 1445/ 6001442 : D23E                		mov	#_framebuffer+$200,r2
(1) 1446/ 6001444 : 93A0                		mov	#(320*200/2)/2,r3
(1) 1447/ 6001446 :                     .copy_me:
(1) 1448/ 6001446 : 6016                		mov	@r1+,r0
(1) 1449/ 6001448 : 2202                		mov	r0,@r2
(1) 1450/ 600144A : 7204                		add	#4,r2
(1) 1451/ 600144C : 6016                		mov	@r1+,r0
(1) 1452/ 600144E : 2202                		mov	r0,@r2
(1) 1453/ 6001450 : 4310                		dt	r3
(1) 1454/ 6001452 : 8FF8                		bf/s	.copy_me
(1) 1455/ 6001454 : 7204                		add	#4,r2
(1) 1456/ 6001456 :                     .dont_rdrw:
(1) 1457/ 6001456 : 9172                		mov	#$200,r1
(1) 1458/ 6001458 : 9297                		mov	#320*2,r2
(1) 1459/ 600145A : 9397                		mov	#200,r3
(1) 1460/ 600145C : BA00                		bsr	MarsVideo_MakeNameTbl
(1) 1461/ 600145E : E40C                		mov	#12,r4
(1) 1462/ 6001460 : AEF4                		bra	master_loop
(1) 1463/ 6001462 : 0009                		nop
(1) 1464/ 6001464 :                     
(1) 1465/ 6001464 :                     ; -------------------------------
(1) 1466/ 6001464 :                     ; RLE indexed-compressed image
(1) 1467/ 6001464 :                     
(1) 1468/ 6001464 :                     .rle:
(1) 1469/ 6001464 : AEF2                		bra	master_loop
(1) 1470/ 6001466 : 0009                		nop
(1) 1471/ 6001468 :                     
(1) 1472/ 6001468 :                     ; ============================================================
(1) 1473/ 6001468 :                     ; ---------------------------------------
(1) 1474/ 6001468 :                     ; Pseudo-screen mode $02:
(1) 1475/ 6001468 :                     ;
(1) 1476/ 6001468 :                     ; 256-color scrolling image
(1) 1477/ 6001468 :                     ;
(1) 1478/ 6001468 :                     ; *** WAIT 2 FRAMES TO PROPERLY
(1) 1479/ 6001468 :                     ; START THIS MODE ***
(1) 1480/ 6001468 :                     ; ---------------------------------------
(1) 1481/ 6001468 :                     
(1) 1482/ 6001468 :                     ; -------------------------------
(1) 1483/ 6001468 :                     ; HBlank
(1) 1484/ 6001468 :                     ; -------------------------------
(1) 1485/ 6001468 :                     
(1) 1486/ 6001468 :                     mstr_gfx2_hblk:
(1) 1487/ 6001468 : 000B                		rts
(1) 1488/ 600146A : 0009                		nop
(1) 1489/ 600146C :                     		align 4
(1) 1490/ 600146C :                     
(1) 1491/ 600146C :                     ; -------------------------------
(1) 1492/ 600146C :                     ; VBlank
(1) 1493/ 600146C :                     ; -------------------------------
(1) 1494/ 600146C :                     
(1) 1495/ 600146C :                     mstr_gfx2_vblk:
(1) 1496/ 600146C : C51C                		mov.w	@(marsGbl_MdInitTmr,gbr),r0
(1) 1497/ 600146E : 2008                		tst	r0,r0
(1) 1498/ 6001470 : 8B05                		bf	.mid_draw
(1) 1499/ 6001472 : DE33                		mov	#RAM_Mars_BgBuffScrl,r14
(1) 1500/ 6001474 : D033                		mov	#RAM_Mars_DreqRead+Dreq_ScrnBuff,r0
(1) 1501/ 6001476 : 5101                		mov	@(Dreq_Scrn2_X,r0),r1
(1) 1502/ 6001478 : 5202                		mov	@(Dreq_Scrn2_Y,r0),r2
(1) 1503/ 600147A : 1E1E                		mov	r1,@(mbg_xpos,r14)
(1) 1504/ 600147C : 1E2F                		mov	r2,@(mbg_ypos,r14)
(1) 1505/ 600147E :                     .mid_draw:
(1) 1506/ 600147E : DE32                		mov	#RAM_Mars_BgBuffScrl,r14
(1) 1507/ 6001480 : 51EE                		mov	@(mbg_xpos,r14),r1
(1) 1508/ 6001482 : 52EF                		mov	@(mbg_ypos,r14),r2
(1) 1509/ 6001484 : 6013                		mov	r1,r0
(1) 1510/ 6001486 : 4029                		shlr16	r0
(1) 1511/ 6001488 : C119                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1512/ 600148A : AC99                		bra	MarsVideo_MoveBg
(1) 1513/ 600148C : 0009                		nop
(1) 1514/ 600148E :                     		align 4
(1) 1515/ 6001490 :                     
(1) 1516/ 6001490 :                     ; -------------------------------
(1) 1517/ 6001490 :                     ; Init
(1) 1518/ 6001490 :                     ; -------------------------------
(1) 1519/ 6001490 :                     
(1) 1520/ 6001490 :                     mstr_gfx2_init_1:
(1) 1521/ 6001490 : D12E                		mov	#CACHE_MSTR_SCRL,r1
(1) 1522/ 6001492 : 927C                		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1523/ 6001494 : D02E                		mov	#Mars_LoadFastCode,r0
(1) 1524/ 6001496 : 400B                		jsr	@r0
(1) 1525/ 6001498 : 0009                		nop
(1) 1526/ 600149A : D12E                		mov	#RAM_Mars_BgBuffScrl,r1			; <-- TODO: make these configurable
(1) 1527/ 600149C : 924F                		mov	#$200,r2				; on Genesis side
(1) 1528/ 600149E : E310                		mov	#16,r3					; block size
(1) 1529/ 60014A0 : 9476                		mov	#320,r4					; max width
(1) 1530/ 60014A2 : 9576                		mov	#256,r5					; max height
(1) 1531/ 60014A4 : BA70                		bsr	MarsVideo_MkScrlField
(1) 1532/ 60014A6 : E600                		mov	#0,r6
(1) 1533/ 60014A8 : 200A                		xor	r0,r0
(1) 1534/ 60014AA : C11D                		mov.w	r0,@(marsGbl_BgDrwR,gbr)		; Reset
(1) 1535/ 60014AC : C11E                		mov.w	r0,@(marsGbl_BgDrwL,gbr)		; all
(1) 1536/ 60014AE : C11F                		mov.w	r0,@(marsGbl_BgDrwU,gbr)		; these
(1) 1537/ 60014B0 : C120                		mov.w	r0,@(marsGbl_BgDrwD,gbr)		; draw requests
(1) 1538/ 60014B2 : D029                		mov	#RAM_Mars_DreqRead+Dreq_ScrnBuff,r0	; Set scrolling source data
(1) 1539/ 60014B4 : D129                		mov	#RAM_Mars_BgBuffScrl,r1
(1) 1540/ 60014B6 : 5200                		mov	@(Dreq_Scrn2_Data,r0),r2
(1) 1541/ 60014B8 : 5303                		mov	@(Dreq_Scrn2_W,r0),r3
(1) 1542/ 60014BA : 5404                		mov	@(Dreq_Scrn2_H,r0),r4
(1) 1543/ 60014BC : BA80                		bsr	MarsVideo_SetScrlBg
(1) 1544/ 60014BE : 0009                		nop
(1) 1545/ 60014C0 : A003                		bra	mstr_gfx2_init_cont
(1) 1546/ 60014C2 : 0009                		nop
(1) 1547/ 60014C4 :                     mstr_gfx2_init_2:
(1) 1548/ 60014C4 : D11A                		mov 	#_vdpreg,r1
(1) 1549/ 60014C6 : E001                		mov	#1,r0
(1) 1550/ 60014C8 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1551/ 60014CA :                     mstr_gfx2_init_cont:
(1) 1552/ 60014CA : BADF                		bsr	MarsVideo_DrawAllBg	; Process FULL image
(1) 1553/ 60014CC : 0009                		nop
(1) 1554/ 60014CE :                     
(1) 1555/ 60014CE :                     ; -------------------------------
(1) 1556/ 60014CE :                     ; Loop
(1) 1557/ 60014CE :                     ; -------------------------------
(1) 1558/ 60014CE :                     
(1) 1559/ 60014CE :                     mstr_gfx2_loop:
(1) 1560/ 60014CE : D024                		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r0
(1) 1561/ 60014D0 : C204                		mov	r0,@(marsGbl_CurrRdSpr,gbr)	; Set watchdog for sprites
(1) 1562/ 60014D2 : E000                		mov	#0,r0
(1) 1563/ 60014D4 : C118                		mov.w	r0,@(marsGbl_CntrRdSpr,gbr)
(1) 1564/ 60014D6 : E100                		mov	#0,r1
(1) 1565/ 60014D8 : E220                		mov	#$20,r2
(1) 1566/ 60014DA : BA2F                		bsr	MarsVideo_SetWatchdog
(1) 1567/ 60014DC : 0009                		nop
(1) 1568/ 60014DE :                     
(1) 1569/ 60014DE : DE21                		mov	#RAM_Mars_BgBuffScrl,r14
(1) 1570/ 60014E0 : D021                		mov	#MarsVideo_BgDrawLR,r0		; Process U/D/L/R
(1) 1571/ 60014E2 : 400B                		jsr	@r0
(1) 1572/ 60014E4 : 0009                		nop
(1) 1573/ 60014E6 : D021                		mov	#MarsVideo_BgDrawUD,r0
(1) 1574/ 60014E8 : 400B                		jsr	@r0
(1) 1575/ 60014EA : 0009                		nop
(1) 1576/ 60014EC : D020                		mov	#MarsVideo_SprBlkRefill,r0
(1) 1577/ 60014EE : 400B                		jsr	@r0
(1) 1578/ 60014F0 : 0009                		nop
(1) 1579/ 60014F2 :                     
(1) 1580/ 60014F2 : DE20                		mov	#RAM_Mars_BgBuffScrl,r14
(1) 1581/ 60014F4 : 51EB                		mov	@(mbg_fbdata,r14),r1
(1) 1582/ 60014F6 : 52EA                		mov	@(mbg_fbpos,r14),r2
(1) 1583/ 60014F8 : 85EA                		mov.w	@(mbg_fbpos_y,r14),r0
(1) 1584/ 60014FA : 6303                		mov	r0,r3
(1) 1585/ 60014FC : 85EC                		mov.w	@(mbg_intrl_w,r14),r0
(1) 1586/ 60014FE : 6403                		mov	r0,r4
(1) 1587/ 6001500 : 85ED                		mov.w	@(mbg_intrl_h,r14),r0
(1) 1588/ 6001502 : 6503                		mov	r0,r5
(1) 1589/ 6001504 : 56E7                		mov	@(mbg_intrl_size,r14),r6
(1) 1590/ 6001506 : D01C                		mov	#MarsVideo_SetSuperSpr,r0	; Setup sprites buffer
(1) 1591/ 6001508 : 400B                		jsr	@r0
(1) 1592/ 600150A : 0009                		nop
(1) 1593/ 600150C : D01B                		mov	#MarsVideo_MarkSprBlocks,r0	; Mark blocks that need redrawing
(1) 1594/ 600150E : 400B                		jsr	@r0
(1) 1595/ 6001510 : 0009                		nop
(1) 1596/ 6001512 :                     
(1) 1597/ 6001512 : C514                .wait_wd:	mov.w	@(marsGbl_WdgStatus,gbr),r0
(1) 1598/ 6001514 : 2008                		tst	r0,r0
(1) 1599/ 6001516 : 89FC                		bt	.wait_wd
(1) 1600/ 6001518 : D019                		mov	#MarsVideo_DrawSuperSpr,r0
(1) 1601/ 600151A : 400B                		jsr	@r0
(1) 1602/ 600151C : 0009                		nop
(1) 1603/ 600151E :                     .no_swap:
(1) 1604/ 600151E :                     
(1) 1605/ 600151E :                     	; ---------------------------------------
(1) 1606/ 600151E :                     	; Build linetable
(1) 1607/ 600151E :                     	; ---------------------------------------
(1) 1608/ 600151E : D119                		mov	#RAM_Mars_BgBuffScrl,r1		; Make visible background
(1) 1609/ 6001520 : E200                		mov	#0,r2				; section on screen
(1) 1610/ 6001522 : 9337                		mov	#240,r3
(1) 1611/ 6001524 : BA58                		bsr	MarsVideo_ShowScrlBg
(1) 1612/ 6001526 : 0009                		nop
(1) 1613/ 6001528 : B9D2                		bsr	MarsVideo_FixTblShift		; Fix those broken lines that
(1) 1614/ 600152A : 0009                		nop					; the Xshift register can't move
(1) 1615/ 600152C : AE8E                		bra	master_loop
(1) 1616/ 600152E : 0009                		nop
(1) 1617/ 6001530 :                     		align 4
(1) 1618/ 6001530 : 2000 4100 2600 8530 		ltorg
                    0600 1430 2400 0200 
                    2601 8A40 2600 8530 
                    2601 8A40 0600 1864 
                    0600 07AC 2601 8A40 
                    2600 8530 2601 8A40 
                    2600 8710 2601 8A40 
                    0600 0BF0 0600 0CE4 
                    C000 00E0 2601 8A40 
                    0600 0FB8 0600 0FD0 
                    C000 0240 2601 8A40 
                    3E80 0280 00C8 0178 
                    0140 0100 00F0      
(1) 1619/ 6001596 :                     
(1) 1620/ 6001596 :                     ; ============================================================
(1) 1621/ 6001596 :                     ; ---------------------------------------
(1) 1622/ 6001596 :                     ; Pseudo-screen mode $03:
(1) 1623/ 6001596 :                     ; Scalable 256-color screen
(1) 1624/ 6001596 :                     ;
(1) 1625/ 6001596 :                     ; Not as smooth as Mode 2
(1) 1626/ 6001596 :                     ; ---------------------------------------
(1) 1627/ 6001596 :                     
(1) 1628/ 6001596 :                     ; -------------------------------
(1) 1629/ 6001596 :                     ; HBlank
(1) 1630/ 6001596 :                     ; -------------------------------
(1) 1631/ 6001596 :                     
(1) 1632/ 6001596 :                     mstr_gfx3_hblk:
(1) 1633/ 6001596 : 000B                		rts
(1) 1634/ 6001598 : 0009                		nop
(1) 1635/ 600159A :                     		align 4
(1) 1636/ 600159C :                     
(1) 1637/ 600159C :                     ; -------------------------------
(1) 1638/ 600159C :                     ; VBlank
(1) 1639/ 600159C :                     ; -------------------------------
(1) 1640/ 600159C :                     
(1) 1641/ 600159C :                     mstr_gfx3_vblk:
(1) 1642/ 600159C : D11C                		mov	#RAM_Mars_DreqRead+Dreq_ScrnBuff,r1	; Copy-paste scale buffer
(1) 1643/ 600159E : D21D                		mov	#RAM_Mars_BgBuffScale_S,r2
(1) 1644/ 60015A0 : E408                		mov	#8,r4
(1) 1645/ 60015A2 :                     .copy_me:
(1) 1646/ 60015A2 : 6016                		mov	@r1+,r0
(1) 1647/ 60015A4 : 2202                		mov	r0,@r2
(1) 1648/ 60015A6 : 7204                		add	#4,r2
(1) 1649/ 60015A8 : 4410                		dt	r4
(1) 1650/ 60015AA : 8FFA                		bf/s	.copy_me
(1) 1651/ 60015AC : 7304                		add	#4,r3
(1) 1652/ 60015AE :                     
(1) 1653/ 60015AE :                     ; 		mov	#_sysreg+comm14,r4
(1) 1654/ 60015AE :                     ; 		mov.w	@r4,r0
(1) 1655/ 60015AE :                     ; 		or	#$01,r0					; Slave task $01
(1) 1656/ 60015AE :                     ; 		mov.w	r0,@r4
(1) 1657/ 60015AE : 000B                		rts
(1) 1658/ 60015B0 : 0009                		nop
(1) 1659/ 60015B2 :                     		align 4
(1) 1660/ 60015B4 :                     
(1) 1661/ 60015B4 :                     ; -------------------------------
(1) 1662/ 60015B4 :                     ; Init
(1) 1663/ 60015B4 :                     ; -------------------------------
(1) 1664/ 60015B4 :                     
(1) 1665/ 60015B4 :                     mstr_gfx3_init_1:
(1) 1666/ 60015B4 : D118                		mov	#CACHE_MSTR_SCRL,r1
(1) 1667/ 60015B6 : 923F                		mov	#(CACHE_MSTR_SCRL_E-CACHE_MSTR_SCRL)/4,r2
(1) 1668/ 60015B8 : D018                		mov	#Mars_LoadFastCode,r0
(1) 1669/ 60015BA : 400B                		jsr	@r0
(1) 1670/ 60015BC : 0009                		nop
(1) 1671/ 60015BE : E000                		mov	#0,r0
(1) 1672/ 60015C0 : C119                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1673/ 60015C2 : A003                		bra	mstr_gfx3_loop
(1) 1674/ 60015C4 : 0009                		nop
(1) 1675/ 60015C6 :                     
(1) 1676/ 60015C6 :                     mstr_gfx3_init_2:
(1) 1677/ 60015C6 : D116                		mov 	#_vdpreg,r1
(1) 1678/ 60015C8 : E001                		mov	#1,r0
(1) 1679/ 60015CA : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1680/ 60015CC :                     
(1) 1681/ 60015CC :                     ; -------------------------------
(1) 1682/ 60015CC :                     ; Loop
(1) 1683/ 60015CC :                     ; -------------------------------
(1) 1684/ 60015CC :                     
(1) 1685/ 60015CC :                     mstr_gfx3_loop:
(1) 1686/ 60015CC : D015                		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r0
(1) 1687/ 60015CE : C204                		mov	r0,@(marsGbl_CurrRdSpr,gbr)	; Set watchdog for sprites
(1) 1688/ 60015D0 : E000                		mov	#0,r0
(1) 1689/ 60015D2 : C118                		mov.w	r0,@(marsGbl_CntrRdSpr,gbr)
(1) 1690/ 60015D4 : E102                		mov	#2,r1
(1) 1691/ 60015D6 : E220                		mov	#$20,r2
(1) 1692/ 60015D8 : B9B0                		bsr	MarsVideo_SetWatchdog
(1) 1693/ 60015DA : 0009                		nop
(1) 1694/ 60015DC : 912D                		mov	#$200,r1
(1) 1695/ 60015DE : E200                		mov	#0,r2
(1) 1696/ 60015E0 : E300                		mov	#0,r3
(1) 1697/ 60015E2 : 942B                		mov	#320,r4
(1) 1698/ 60015E4 : 952B                		mov	#240,r5
(1) 1699/ 60015E6 : D610                		mov	#320*240,r6
(1) 1700/ 60015E8 : D010                		mov	#MarsVideo_SetSuperSpr,r0
(1) 1701/ 60015EA : 400B                		jsr	@r0
(1) 1702/ 60015EC : 0009                		nop
(1) 1703/ 60015EE : D010                		mov	#MarsVideo_DrawScaled,r0
(1) 1704/ 60015F0 : 400B                		jsr	@r0
(1) 1705/ 60015F2 : 0009                		nop
(1) 1706/ 60015F4 :                     
(1) 1707/ 60015F4 : 9121                		mov	#$200,r1
(1) 1708/ 60015F6 : 9221                		mov	#320,r2
(1) 1709/ 60015F8 : 9321                		mov	#240,r3
(1) 1710/ 60015FA : B931                		bsr	MarsVideo_MakeNametbl
(1) 1711/ 60015FC : E400                		mov	#0,r4
(1) 1712/ 60015FE :                     
(1) 1713/ 60015FE :                     	; Wait Slave to finish
(1) 1714/ 60015FE :                     ; 		mov	#_sysreg+comm14,r5
(1) 1715/ 60015FE :                     ; .wait_slv:	mov.w	@r5,r0
(1) 1716/ 60015FE :                     ; 		and	#%01111111,r0
(1) 1717/ 60015FE :                     ; 		tst	r0,r0
(1) 1718/ 60015FE :                     ; 		bf	.wait_slv
(1) 1719/ 60015FE :                     ; 		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(1) 1720/ 60015FE :                     ; 		tst	r0,r0
(1) 1721/ 60015FE :                     ; 		bt	.no_pz
(1) 1722/ 60015FE : C514                .wait_wd:	mov.w	@(marsGbl_WdgStatus,gbr),r0
(1) 1723/ 6001600 : 2008                		tst	r0,r0
(1) 1724/ 6001602 : 89FC                		bt	.wait_wd
(1) 1725/ 6001604 : D00B                		mov	#MarsVideo_DrawSuperSpr,r0
(1) 1726/ 6001606 : 400B                		jsr	@r0
(1) 1727/ 6001608 : 0009                		nop
(1) 1728/ 600160A :                     .no_pz:
(1) 1729/ 600160A :                     
(1) 1730/ 600160A : AE1F                		bra	master_loop
(1) 1731/ 600160C : 0009                		nop
(1) 1732/ 600160E :                     		align 4
(1) 1733/ 6001610 : 2600 8530 2600 CA40 		ltorg
                    0600 1864 0600 07AC 
                    2000 4100 2600 8710 
                    0001 2C00 0600 0FB8 
                    C000 0470 C000 0240 
                    0178 0200 0140 00F0 
(1) 1734/ 6001640 :                     		align 4
(1) 1735/ 6001640 :                     
(1) 1736/ 6001640 :                     ; ============================================================
(1) 1737/ 6001640 :                     ; ---------------------------------------
(1) 1738/ 6001640 :                     ; Mode 4: 3D MODE Polygons-only
(1) 1739/ 6001640 :                     ;
(1) 1740/ 6001640 :                     ; Objects are divided into read/write
(1) 1741/ 6001640 :                     ; buffers:
(1) 1742/ 6001640 :                     ;
(1) 1743/ 6001640 :                     ; - This CPU draws the polygons from
(1) 1744/ 6001640 :                     ; the READ buffer
(1) 1745/ 6001640 :                     ; - at the same time the Slave CPU is
(1) 1746/ 6001640 :                     ; building the 3d models and
(1) 1747/ 6001640 :                     ; sorts the polygons FOR THE NEXT FRAME
(1) 1748/ 6001640 :                     ; (NOT current)
(1) 1749/ 6001640 :                     ; ---------------------------------------
(1) 1750/ 6001640 :                     
(1) 1751/ 6001640 :                     ; -------------------------------
(1) 1752/ 6001640 :                     ; HBlank
(1) 1753/ 6001640 :                     ; -------------------------------
(1) 1754/ 6001640 :                     
(1) 1755/ 6001640 :                     mstr_gfx4_hblk:
(1) 1756/ 6001640 : 000B                		rts
(1) 1757/ 6001642 : 0009                		nop
(1) 1758/ 6001644 :                     		align 4
(1) 1759/ 6001644 :                     
(1) 1760/ 6001644 :                     ; -------------------------------
(1) 1761/ 6001644 :                     ; VBlank
(1) 1762/ 6001644 :                     ; -------------------------------
(1) 1763/ 6001644 :                     
(1) 1764/ 6001644 :                     mstr_gfx4_vblk:
(1) 1765/ 6001644 : D429                		mov	#_sysreg+comm14,r4
(1) 1766/ 6001646 : 6041                		mov.w	@r4,r0
(1) 1767/ 6001648 : C97F                		and	#%01111111,r0
(1) 1768/ 600164A : 2008                		tst	r0,r0
(1) 1769/ 600164C : 8B0D                		bf	.slv_busy
(1) 1770/ 600164E : D128                		mov	#RAM_Mars_DreqRead+Dreq_Objects,r1	; Copy Dreq models from here.
(1) 1771/ 6001650 : D228                		mov	#RAM_Mars_Objects,r2
(1) 1772/ 6001652 : E370                		mov	#(sizeof_mdlobj*MAX_MODELS)/4,r3	; LONG copies
(1) 1773/ 6001654 :                     .copy_safe:
(1) 1774/ 6001654 : 6016                		mov	@r1+,r0
(1) 1775/ 6001656 : 2202                		mov	r0,@r2
(1) 1776/ 6001658 : 4310                		dt	r3
(1) 1777/ 600165A : 8FFB                		bf/s	.copy_safe
(1) 1778/ 600165C : 7204                		add	#4,r2
(1) 1779/ 600165E : C515                		mov.w	@(marsGbl_PolyBuffNum,gbr),r0
(1) 1780/ 6001660 : CA01                		xor	#1,r0
(1) 1781/ 6001662 : C115                		mov.w	r0,@(marsGbl_PolyBuffNum,gbr)
(1) 1782/ 6001664 : 6041                		mov.w	@r4,r0
(1) 1783/ 6001666 : CB01                		or	#$01,r0
(1) 1784/ 6001668 : 2401                		mov.w	r0,@r4
(1) 1785/ 600166A :                     .slv_busy:
(1) 1786/ 600166A : 000B                		rts
(1) 1787/ 600166C : 0009                		nop
(1) 1788/ 600166E :                     		align 4
(1) 1789/ 6001670 :                     
(1) 1790/ 6001670 :                     ; -------------------------------
(1) 1791/ 6001670 :                     ; Init
(1) 1792/ 6001670 :                     ; -------------------------------
(1) 1793/ 6001670 :                     
(1) 1794/ 6001670 :                     mstr_gfx4_init_1:
(1) 1795/ 6001670 : 9154                		mov	#$FFFFFE80,r1		; Stop watchdog
(1) 1796/ 6001672 : 9054                		mov.w   #$A518,r0
(1) 1797/ 6001674 : 2101                		mov.w   r0,@r1
(1) 1798/ 6001676 : D120                		mov	#CACHE_MSTR_PLGN,r1
(1) 1799/ 6001678 : 9252                		mov	#(CACHE_MSTR_PLGN_E-CACHE_MSTR_PLGN)/4,r2
(1) 1800/ 600167A : D020                		mov	#Mars_LoadFastCode,r0
(1) 1801/ 600167C : 400B                		jsr	@r0
(1) 1802/ 600167E : 0009                		nop
(1) 1803/ 6001680 : E000                		mov	#0,r0
(1) 1804/ 6001682 : C119                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1805/ 6001684 : A003                		bra	mstr_gfx4_init_cont
(1) 1806/ 6001686 : 0009                		nop
(1) 1807/ 6001688 :                     
(1) 1808/ 6001688 :                     mstr_gfx4_init_2:
(1) 1809/ 6001688 : D11D                		mov 	#_vdpreg,r1
(1) 1810/ 600168A : E001                		mov	#1,r0
(1) 1811/ 600168C : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1812/ 600168E :                     
(1) 1813/ 600168E :                     mstr_gfx4_init_cont:
(1) 1814/ 600168E : 9148                		mov	#$200,r1
(1) 1815/ 6001690 : 9248                		mov	#(511)/2,r2
(1) 1816/ 6001692 : 9348                		mov	#240,r3
(1) 1817/ 6001694 : E400                		mov	#0,r4
(1) 1818/ 6001696 : D01B                		mov	#MarsVideo_ClearScreen,r0
(1) 1819/ 6001698 : 400B                		jsr	@r0
(1) 1820/ 600169A : 0009                		nop
(1) 1821/ 600169C :                     
(1) 1822/ 600169C :                     ; -------------------------------
(1) 1823/ 600169C :                     ; Loop
(1) 1824/ 600169C :                     ; -------------------------------
(1) 1825/ 600169C :                     
(1) 1826/ 600169C :                     mstr_gfx4_loop:
(1) 1827/ 600169C :                     	; ---------------------------------------
(1) 1828/ 600169C :                     	; Prepare WATCHDOG interrupt
(1) 1829/ 600169C : C515                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 1830/ 600169E : C801                		tst     #1,r0
(1) 1831/ 60016A0 : 8B03                		bf	.page_2
(1) 1832/ 60016A2 : D019                		mov	#RAM_Mars_PlgnList_0,r0
(1) 1833/ 60016A4 : D119                		mov	#RAM_Mars_PlgnNum_0,r1
(1) 1834/ 60016A6 : A003                		bra	.cont_plgn
(1) 1835/ 60016A8 : 0009                		nop
(1) 1836/ 60016AA :                     .page_2:
(1) 1837/ 60016AA : D019                		mov	#RAM_Mars_PlgnList_1,r0
(1) 1838/ 60016AC : D119                		mov	#RAM_Mars_PlgnNum_1,r1
(1) 1839/ 60016AE : 0009                		nop
(1) 1840/ 60016B0 :                     .cont_plgn:
(1) 1841/ 60016B0 : C205                		mov	r0,@(marsGbl_CurrRdPlgn,gbr)
(1) 1842/ 60016B2 : 6012                		mov	@r1,r0
(1) 1843/ 60016B4 : C117                		mov.w	r0,@(marsGbl_CntrRdPlgn,gbr)
(1) 1844/ 60016B6 : E101                		mov	#1,r1
(1) 1845/ 60016B8 : E210                		mov	#$10,r2
(1) 1846/ 60016BA : B93F                		bsr	MarsVideo_SetWatchdog
(1) 1847/ 60016BC : 0009                		nop
(1) 1848/ 60016BE :                     
(1) 1849/ 60016BE :                     	; ---------------------------------------
(1) 1850/ 60016BE :                     	; Clear screen
(1) 1851/ 60016BE :                     	; ---------------------------------------
(1) 1852/ 60016BE : C51C                		mov.w	@(marsGbl_MdInitTmr,gbr),r0
(1) 1853/ 60016C0 : 2008                		tst	r0,r0
(1) 1854/ 60016C2 : 8B06                		bf	.no_redraw_2
(1) 1855/ 60016C4 : 912D                		mov	#$200,r1		; *** This also counts as a delay for Watchdog ***
(1) 1856/ 60016C6 : 922F                		mov	#(320+16)/2,r2
(1) 1857/ 60016C8 : 932D                		mov	#240,r3
(1) 1858/ 60016CA : E400                		mov	#0,r4
(1) 1859/ 60016CC : D00D                		mov	#MarsVideo_ClearScreen,r0
(1) 1860/ 60016CE : 400B                		jsr	@r0
(1) 1861/ 60016D0 : 0009                		nop
(1) 1862/ 60016D2 :                     .no_redraw_2:
(1) 1863/ 60016D2 : 9126                		mov	#$200,r1
(1) 1864/ 60016D4 : 9225                		mov	#512,r2			; <-- fixed WIDTH
(1) 1865/ 60016D6 : 9326                		mov	#240,r3
(1) 1866/ 60016D8 : B8C2                		bsr	MarsVideo_MakeNametbl
(1) 1867/ 60016DA : E400                		mov	#0,r4
(1) 1868/ 60016DC :                     
(1) 1869/ 60016DC :                     	; ---------------------------------------
(1) 1870/ 60016DC :                     
(1) 1871/ 60016DC : C514                .wait_wd:	mov.w	@(marsGbl_WdgStatus,gbr),r0
(1) 1872/ 60016DE : 2008                		tst	r0,r0
(1) 1873/ 60016E0 : 89FC                		bt	.wait_wd
(1) 1874/ 60016E2 : D00D                		mov	#MarsVideo_DrawPzPlgns,r0
(1) 1875/ 60016E4 : 400B                		jsr	@r0
(1) 1876/ 60016E6 : 0009                		nop
(1) 1877/ 60016E8 :                     .no_swap:
(1) 1878/ 60016E8 : ADB0                		bra	master_loop
(1) 1879/ 60016EA : 0009                		nop
(1) 1880/ 60016EC :                     		align 4
(1) 1881/ 60016EC : 2000 402E 2600 8550 		ltorg
                    2601 3A40 0600 1E44 
                    0600 07AC 2000 4100 
                    0600 0828 2601 3C18 
                    2601 4C18 2601 4418 
                    2601 4C1C C000 0378 
                    FE80 A518 01F0 0200 
                    00FF 00F0 00A8      
(1) 1882/ 600172A :                     
(1) 1883/ 600172A :                     ; ============================================================
(1) 1884/ 600172A :                     
(1) 1885/ 600172A :                     ; r1 - start vram pos
(1) 1886/ 600172A :                     ; r2 - width
(1) 1887/ 600172A :                     ; r3 - height
(1) 1888/ 600172A :                     
(1) 1889/ 600172A :                     
(1) 1890/ 600172A :                     ; ====================================================================
(1) 1891/ 600172A :                     ; ----------------------------------------------------------------
(1) 1892/ 600172A :                     ; Slave entry
(1) 1893/ 600172A :                     ; ----------------------------------------------------------------
(1) 1894/ 600172A :                     
(1) 1895/ 600172A :                     		align 4
(1) 1896/ 600172C :                     SH2_S_Entry:
(1) 1897/ 600172C : 9E42                		mov.l	#$FFFFFE10,r14
(1) 1898/ 600172E : E000                		mov	#0,r0
(1) 1899/ 6001730 : 80E0                		mov.b	r0,@(0,r14)
(1) 1900/ 6001732 : E0E2                		mov	#$FFFFFFE2, r0
(1) 1901/ 6001734 : 80E7                		mov.b	r0,@(7,r14)
(1) 1902/ 6001736 : E000                		mov	#0,r0
(1) 1903/ 6001738 : 80E4                		mov.b	r0,@(4,r14)
(1) 1904/ 600173A : E001                		mov	#1,r0
(1) 1905/ 600173C : 80E5                		mov.b	r0,@(5,r14)
(1) 1906/ 600173E : E000                		mov	#0,r0
(1) 1907/ 6001740 : 80E6                		mov.b	r0,@(6,r14)
(1) 1908/ 6001742 : E001                		mov	#1,r0
(1) 1909/ 6001744 : 80E1                		mov.b	r0,@(1,r14)
(1) 1910/ 6001746 : E000                		mov	#0,r0
(1) 1911/ 6001748 : 80E3                		mov.b	r0,@(3,r14)
(1) 1912/ 600174A : 80E2                		mov.b	r0,@(2,r14)
(1) 1913/ 600174C : DF13                		mov	#CS3|$3F000,r15			; Reset stack
(1) 1914/ 600174E : DE14                		mov	#RAM_Mars_Global,r14		; Reset gbr
(1) 1915/ 6001750 : 4E1E                		ldc	r14,gbr
(1) 1916/ 6001752 : 9030                		mov.l   #$FFFFFEE2,r0			; Watchdog: Set interrupt priority bits (IPRA)
(1) 1917/ 6001754 : E150                		mov     #%0101<<4,r1
(1) 1918/ 6001756 : 2011                		mov.w   r1,@r0
(1) 1919/ 6001758 : 902E                		mov.l   #$FFFFFEE4,r0
(1) 1920/ 600175A : E148                		mov     #$120/4,r1			; Watchdog: Set jump pointer (VBR + this/4) (WITV)
(1) 1921/ 600175C : 4118                		shll8   r1
(1) 1922/ 600175E : 2011                		mov.w   r1,@r0
(1) 1923/ 6001760 : D110                		mov	#CACHE_SLAVE,r1
(1) 1924/ 6001762 : 922A                		mov	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r2
(1) 1925/ 6001764 : D010                		mov	#Mars_LoadFastCode,r0
(1) 1926/ 6001766 : 400B                		jsr	@r0
(1) 1927/ 6001768 : 0009                		nop
(1) 1928/ 600176A : D110                		mov	#_sysreg,r1
(1) 1929/ 600176C : E003                		mov	#CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts
(1) 1930/ 600176E : 8011                    		mov.b	r0,@(intmask,r1)		; (Watchdog is external)
(1) 1931/ 6001770 : BC94                		bsr	MarsSound_Init			; Init PWM
(1) 1932/ 6001772 : 0009                		nop
(1) 1933/ 6001774 :                     .wait_md:
(1) 1934/ 6001774 :                     ; 		mov 	#_sysreg+comm12,r2
(1) 1935/ 6001774 :                     ; 		mov.w	@r2,r0
(1) 1936/ 6001774 :                     ; 		cmp/eq	#0,r0
(1) 1937/ 6001774 :                     ; 		bf	.wait_md
(1) 1938/ 6001774 :                     
(1) 1939/ 6001774 :                     ; ====================================================================
(1) 1940/ 6001774 :                     ; ----------------------------------------------------------------
(1) 1941/ 6001774 :                     ; Slave main code
(1) 1942/ 6001774 :                     ; ----------------------------------------------------------------
(1) 1943/ 6001774 :                     
(1) 1944/ 6001774 :                     SH2_S_HotStart:
(1) 1945/ 6001774 : DE0D                		mov	#$20004000,r14
(1) 1946/ 6001776 : E000                		mov	#0,r0
(1) 1947/ 6001778 : 81EA                		mov.w	r0,@($14,r14)
(1) 1948/ 600177A : 81EB                		mov.w	r0,@($16,r14)
(1) 1949/ 600177C : 81EC                		mov.w	r0,@($18,r14)
(1) 1950/ 600177E : 81ED                		mov.w	r0,@($1A,r14)
(1) 1951/ 6001780 : 901C                		mov	#$F0,r0
(1) 1952/ 6001782 : 400E                		ldc	r0,sr
(1) 1953/ 6001784 : E000                		mov	#0,r0				; Stop ALL active PWM channels
(1) 1954/ 6001786 : D10A                		mov	#MarsSnd_PwmChnls,r1
(1) 1955/ 6001788 : E207                		mov	#MAX_PWMCHNL,r2
(1) 1956/ 600178A : E328                		mov	#sizeof_sndchn,r3
(1) 1957/ 600178C :                     .clr_enbl:
(1) 1958/ 600178C : 1100                		mov	r0,@(mchnsnd_enbl,r1)
(1) 1959/ 600178E : 4210                		dt	r2
(1) 1960/ 6001790 : 8FFC                		bf/s	.clr_enbl
(1) 1961/ 6001792 : 313C                		add	r3,r1
(1) 1962/ 6001794 : E020                		mov	#$20,r0				; Interrupts ON
(1) 1963/ 6001796 : 400E                		ldc	r0,sr
(1) 1964/ 6001798 : A012                		bra	slave_loop
(1) 1965/ 600179A : 0009                		nop
(1) 1966/ 600179C :                     		align 4
(1) 1967/ 600179C : 0603 F000 2600 8990 		ltorg
                    0600 2604 0600 07AC 
                    2000 4000 C000 065C 
                    FE10 FEE2 FEE4 01EB 
                    00F0                
(1) 1968/ 60017BE :                     
(1) 1969/ 60017BE :                     ; ----------------------------------------------------------------
(1) 1970/ 60017BE :                     ; SLAVE CPU loop
(1) 1971/ 60017BE :                     ;
(1) 1972/ 60017BE :                     ; comm14:
(1) 1973/ 60017BE :                     ; bssscccc llllllll
(1) 1974/ 60017BE :                     ;
(1) 1975/ 60017BE :                     ; b - busy bit on the CMD interrupt
(1) 1976/ 60017BE :                     ;     (so 68k knows that the interrupt is active)
(1) 1977/ 60017BE :                     ; s - status bits for some CMD interrupt tasks
(1) 1978/ 60017BE :                     ; c - command number for CMD interrupt
(1) 1979/ 60017BE :                     ; l - MAIN LOOP command/task, clears on finish
(1) 1980/ 60017BE :                     ; ----------------------------------------------------------------
(1) 1981/ 60017BE :                     
(1) 1982/ 60017BE :                     		align 4
(1) 1983/ 60017C0 :                     slave_loop:
(1) 1990/ 60017C0 : D320                		mov	#.list,r3		; Default LOOP points
(1) 1991/ 60017C2 : D221                		mov	#_sysreg+comm14,r2
(1) 1992/ 60017C4 : 6021                		mov.w	@r2,r0			; r0 - INIT bit
(1) 1993/ 60017C6 : C90F                		and	#%00001111,r0
(1) 1994/ 60017C8 : 2008                		tst	r0,r0
(1) 1995/ 60017CA : 89F9                		bt	slave_loop
(1) 1996/ 60017CC : 4008                		shll2	r0
(1) 1997/ 60017CE : 043E                		mov	@(r3,r0),r4
(1) 1998/ 60017D0 : 442B                		jmp	@r4
(1) 1999/ 60017D2 : 0009                		nop
(1) 2000/ 60017D4 :                     		align 4
(1) 2001/ 60017D4 :                     .list:
(1) 2002/ 60017D4 : 0600 17C0           		dc.l slave_loop		; $00
(1) 2003/ 60017D8 : 0600 1814           		dc.l .slv_task_1	; $01 - Build 3D models
(1) 2004/ 60017DC : 0600 17C0           		dc.l slave_loop		; $02
(1) 2005/ 60017E0 : 0600 17C0           		dc.l slave_loop		; $03
(1) 2006/ 60017E4 : 0600 17C0           		dc.l slave_loop		; $04
(1) 2007/ 60017E8 : 0600 17C0           		dc.l slave_loop		; $05
(1) 2008/ 60017EC : 0600 17C0           		dc.l slave_loop		; $06
(1) 2009/ 60017F0 : 0600 17C0           		dc.l slave_loop		; $07
(1) 2010/ 60017F4 : 0600 17C0           		dc.l slave_loop		; $08
(1) 2011/ 60017F8 : 0600 17C0           		dc.l slave_loop		; $09
(1) 2012/ 60017FC : 0600 17C0           		dc.l slave_loop		; $0A
(1) 2013/ 6001800 : 0600 17C0           		dc.l slave_loop		; $0B
(1) 2014/ 6001804 : 0600 17C0           		dc.l slave_loop		; $0C
(1) 2015/ 6001808 : 0600 17C0           		dc.l slave_loop		; $0D
(1) 2016/ 600180C : 0600 17C0           		dc.l slave_loop		; $0E
(1) 2017/ 6001810 : 0600 17C0           		dc.l slave_loop		; $0F
(1) 2018/ 6001814 :                     
(1) 2019/ 6001814 :                     ; ; ============================================================
(1) 2020/ 6001814 :                     ; ; ---------------------------------------
(1) 2021/ 6001814 :                     ; ; Slave task $01
(1) 2022/ 6001814 :                     ; ;
(1) 2023/ 6001814 :                     ; ; Helps MASTER to draw the bottom half
(1) 2024/ 6001814 :                     ; ; of the scaled background
(1) 2025/ 6001814 :                     ; ; ---------------------------------------
(1) 2026/ 6001814 :                     ;
(1) 2027/ 6001814 :                     ; .slv_task_1:
(1) 2028/ 6001814 :                     ;
(1) 2029/ 6001814 :                     ; 	; MAIN scaler
(1) 2030/ 6001814 :                     ; 	; r1 - X pos xxxx.0000
(1) 2031/ 6001814 :                     ; 	; r2 - Y pos yyyy.0000
(1) 2032/ 6001814 :                     ; 	; r3 - X dx  xxxx.0000
(1) 2033/ 6001814 :                     ; 	; r4 - Y dx  yyyy.0000
(1) 2034/ 6001814 :                     ; 	; r5 - Source WIDTH
(1) 2035/ 6001814 :                     ; 	; r6 - Source HEIGHT
(1) 2036/ 6001814 :                     ; 	; r7 - Source DATA
(1) 2037/ 6001814 :                     ; 	; r8 - Output
(1) 2038/ 6001814 :                     ; 	; r9 - line size / 2
(1) 2039/ 6001814 :                     ; 	; r10 - Number of lines
(1) 2040/ 6001814 :                     ; 		mov	#RAM_Mars_BgBuffScale_S,r14
(1) 2041/ 6001814 :                     ; 		mov	#(_framebuffer+$200)+(320*120),r13	; r8 - Output
(1) 2042/ 6001814 :                     ; 		mov	@r14+,r7		; r7 - Input
(1) 2043/ 6001814 :                     ; 		mov	@r14+,r1		; r1 - X pos (2 pixels wide)
(1) 2044/ 6001814 :                     ; 		mov	@r14+,r2		; r2 - Y pos
(1) 2045/ 6001814 :                     ; 		mov	@r14+,r5		; r5 - X width
(1) 2046/ 6001814 :                     ; 		mov	@r14+,r6		; r6 - Y height
(1) 2047/ 6001814 :                     ; 		mov	@r14+,r3		; r3 - DX
(1) 2048/ 6001814 :                     ; 		mov	@r14+,r4		; r4 - DY
(1) 2049/ 6001814 :                     ; 		mov	@r14+,r9		; r9 - Mode
(1) 2050/ 6001814 :                     ; 		mov	#TH,r0			; Force source as Cache-Thru
(1) 2051/ 6001814 :                     ; 		or	r0,r7
(1) 2052/ 6001814 :                     ; 		shll16	r5
(1) 2053/ 6001814 :                     ; 		shll16	r6
(1) 2054/ 6001814 :                     ; 		dmuls	r1,r5			; Topleft X/Y calc
(1) 2055/ 6001814 :                     ; 		sts	mach,r0
(1) 2056/ 6001814 :                     ; 		sts	macl,r1
(1) 2057/ 6001814 :                     ; 		xtrct	r0,r1
(1) 2058/ 6001814 :                     ; 		dmuls	r2,r6
(1) 2059/ 6001814 :                     ; 		sts	mach,r0
(1) 2060/ 6001814 :                     ; 		sts	macl,r2
(1) 2061/ 6001814 :                     ; 		xtrct	r0,r2
(1) 2062/ 6001814 :                     ;
(1) 2063/ 6001814 :                     ; 	; SLAVE ONLY: Manually get to the middle...
(1) 2064/ 6001814 :                     ; 		mov	#240/2,r10		; r10 - Y loop
(1) 2065/ 6001814 :                     ; .ymiddle:
(1) 2066/ 6001814 :                     ; 		cmp/pz	r2
(1) 2067/ 6001814 :                     ; 		bt	.xy_set2
(1) 2068/ 6001814 :                     ; 		bra	.ymiddle
(1) 2069/ 6001814 :                     ; 		add	r6,r2
(1) 2070/ 6001814 :                     ; .xy_set2:
(1) 2071/ 6001814 :                     ; 		cmp/ge	r6,r2
(1) 2072/ 6001814 :                     ; 		bf	.y_high2
(1) 2073/ 6001814 :                     ; 		bra	.xy_set2
(1) 2074/ 6001814 :                     ; 		sub	r6,r2
(1) 2075/ 6001814 :                     ; .y_high2:
(1) 2076/ 6001814 :                     ; 		dt	r10
(1) 2077/ 6001814 :                     ; 		bf/s	.ymiddle
(1) 2078/ 6001814 :                     ; 		add	r4,r2
(1) 2079/ 6001814 :                     ;
(1) 2080/ 6001814 :                     ; ; *** LOOP
(1) 2081/ 6001814 :                     ; 		lds	r9,mach			; mach - mode number
(1) 2082/ 6001814 :                     ; 		mov	#320/2,r9		; r9  - X loop
(1) 2083/ 6001814 :                     ; 		mov	#240/2,r10		; r10 - Y loop
(1) 2084/ 6001814 :                     ;
(1) 2085/ 6001814 :                     ; 	; X check
(1) 2086/ 6001814 :                     ; 		sts	mach,r0
(1) 2087/ 6001814 :                     ; 		tst	r0,r0
(1) 2088/ 6001814 :                     ; 		bt	.x_cont
(1) 2089/ 6001814 :                     ; .x_fix:
(1) 2090/ 6001814 :                     ; 		cmp/pz	r1
(1) 2091/ 6001814 :                     ; 		bt	.x_cont
(1) 2092/ 6001814 :                     ; 		bra	.x_fix
(1) 2093/ 6001814 :                     ; 		add	r5,r1
(1) 2094/ 6001814 :                     ; .x_cont:
(1) 2095/ 6001814 :                     ;
(1) 2096/ 6001814 :                     ;
(1) 2097/ 6001814 :                     ; ; *** LOOP
(1) 2098/ 6001814 :                     ; .y_loop:
(1) 2099/ 6001814 :                     ; 		sts	mach,r0
(1) 2100/ 6001814 :                     ; 		tst	r0,r0
(1) 2101/ 6001814 :                     ; 		bt	.y_high
(1) 2102/ 6001814 :                     ; 		cmp/pz	r2
(1) 2103/ 6001814 :                     ; 		bt	.xy_set
(1) 2104/ 6001814 :                     ; 		bra	.y_loop
(1) 2105/ 6001814 :                     ; 		add	r6,r2
(1) 2106/ 6001814 :                     ; .xy_set:
(1) 2107/ 6001814 :                     ; 		cmp/ge	r6,r2
(1) 2108/ 6001814 :                     ; 		bf	.y_high
(1) 2109/ 6001814 :                     ; 		bra	.xy_set
(1) 2110/ 6001814 :                     ; 		sub	r6,r2
(1) 2111/ 6001814 :                     ; .y_high:
(1) 2112/ 6001814 :                     ; 		mov	r1,r11
(1) 2113/ 6001814 :                     ; 		shar	r11		; /2
(1) 2114/ 6001814 :                     ; 		mov	r2,r0
(1) 2115/ 6001814 :                     ; 		shlr16	r0
(1) 2116/ 6001814 :                     ; 		mov	r5,r8
(1) 2117/ 6001814 :                     ; 		shlr16	r8
(1) 2118/ 6001814 :                     ; 		muls	r8,r0
(1) 2119/ 6001814 :                     ; 		sts	macl,r12
(1) 2120/ 6001814 :                     ; 		add	r7,r12
(1) 2121/ 6001814 :                     ; 		mov	r13,r8
(1) 2122/ 6001814 :                     ; 		mov	r9,r14
(1) 2123/ 6001814 :                     ; .x_loop:
(1) 2124/ 6001814 :                     ; 	; 00 - single scale
(1) 2125/ 6001814 :                     ; 		sts	mach,r0
(1) 2126/ 6001814 :                     ; 		tst	r0,r0
(1) 2127/ 6001814 :                     ; 		bf	.x_rept
(1) 2128/ 6001814 :                     ; 		cmp/pz	r11
(1) 2129/ 6001814 :                     ; 		bt	.xwpos
(1) 2130/ 6001814 :                     ; 		bra	.x_next
(1) 2131/ 6001814 :                     ; 		mov	#0,r0
(1) 2132/ 6001814 :                     ; .xwpos:
(1) 2133/ 6001814 :                     ; 		mov	r5,r0
(1) 2134/ 6001814 :                     ; 		shar	r0		; /2
(1) 2135/ 6001814 :                     ; 		cmp/ge	r0,r11
(1) 2136/ 6001814 :                     ; 		bf	.x_go
(1) 2137/ 6001814 :                     ; 		bra	.x_next
(1) 2138/ 6001814 :                     ; 		mov	#0,r0
(1) 2139/ 6001814 :                     ; .x_go:
(1) 2140/ 6001814 :                     ; 		mov	#0,r0
(1) 2141/ 6001814 :                     ; 		cmp/pl	r2
(1) 2142/ 6001814 :                     ; 		bf	.x_next
(1) 2143/ 6001814 :                     ; 		cmp/ge	r6,r2
(1) 2144/ 6001814 :                     ; 		bt	.x_next
(1) 2145/ 6001814 :                     ; 		bra	.x_high
(1) 2146/ 6001814 :                     ; 		nop
(1) 2147/ 6001814 :                     ; .x_rept:
(1) 2148/ 6001814 :                     ; 	; 01 - repeat check
(1) 2149/ 6001814 :                     ; 		mov	r5,r0
(1) 2150/ 6001814 :                     ; 		shar	r0		; /2
(1) 2151/ 6001814 :                     ; 		cmp/pl	r11
(1) 2152/ 6001814 :                     ; 		bt	.xwpos2
(1) 2153/ 6001814 :                     ; .x_loopm:	cmp/ge	r0,r11
(1) 2154/ 6001814 :                     ; 		bt	.x_high
(1) 2155/ 6001814 :                     ; 		bra	.x_loopm
(1) 2156/ 6001814 :                     ; 		add	r0,r11
(1) 2157/ 6001814 :                     ; .xwpos2:
(1) 2158/ 6001814 :                     ; 		cmp/ge	r0,r11
(1) 2159/ 6001814 :                     ; 		bf	.x_high
(1) 2160/ 6001814 :                     ; 		bra	.xwpos2
(1) 2161/ 6001814 :                     ; 		sub	r0,r11
(1) 2162/ 6001814 :                     ; .x_high:
(1) 2163/ 6001814 :                     ; 		mov	r11,r0
(1) 2164/ 6001814 :                     ; 		shlr16	r0
(1) 2165/ 6001814 :                     ; 		exts	r0,r0
(1) 2166/ 6001814 :                     ; 		shll	r0
(1) 2167/ 6001814 :                     ; 		mov.w	@(r12,r0),r0
(1) 2168/ 6001814 :                     ; .x_next:
(1) 2169/ 6001814 :                     ; 		add	r3,r11
(1) 2170/ 6001814 :                     ; 		mov.w	r0,@r8
(1) 2171/ 6001814 :                     ; 		dt	r14
(1) 2172/ 6001814 :                     ; 		bf/s	.x_loop
(1) 2173/ 6001814 :                     ; 		add	#2,r8
(1) 2174/ 6001814 :                     ; 		add	r4,r2
(1) 2175/ 6001814 :                     ; 		mov	#320,r0
(1) 2176/ 6001814 :                     ; 		dt	r10
(1) 2177/ 6001814 :                     ; 		bf/s	.y_loop
(1) 2178/ 6001814 :                     ; 		add	r0,r13
(1) 2179/ 6001814 :                     ;
(1) 2180/ 6001814 :                     ; 		bra	.slv_exit
(1) 2181/ 6001814 :                     ; 		nop
(1) 2182/ 6001814 :                     ; 		align 4
(1) 2183/ 6001814 :                     
(1) 2184/ 6001814 :                     ; ============================================================
(1) 2185/ 6001814 :                     ; ---------------------------------------
(1) 2186/ 6001814 :                     ; Slave task $01
(1) 2187/ 6001814 :                     ;
(1) 2188/ 6001814 :                     ; Build 3D Models FOR THE NEXT FRAME
(1) 2189/ 6001814 :                     ; (not current)
(1) 2190/ 6001814 :                     ; ---------------------------------------
(1) 2191/ 6001814 :                     
(1) 2192/ 6001814 :                     		align 4
(1) 2193/ 6001814 :                     .slv_task_1:
(1) 2194/ 6001814 : D10D                		mov 	#RAM_Mars_Polygons_0,r1
(1) 2195/ 6001816 : D20E                		mov	#RAM_Mars_PlgnList_0,r2
(1) 2196/ 6001818 : C515                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(1) 2197/ 600181A : C801                		tst     #1,r0
(1) 2198/ 600181C : 8B01                		bf	.go_mdl
(1) 2199/ 600181E : D10D                		mov 	#RAM_Mars_Polygons_1,r1
(1) 2200/ 6001820 : D20D                		mov	#RAM_Mars_PlgnList_1,r2
(1) 2201/ 6001822 :                     .go_mdl:
(1) 2202/ 6001822 : 6013                		mov	r1,r0
(1) 2203/ 6001824 : C208                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(1) 2204/ 6001826 : 6023                		mov	r2,r0
(1) 2205/ 6001828 : C206                		mov	r0,@(marsGbl_CurrZList,gbr)
(1) 2206/ 600182A : C207                		mov	r0,@(marsGbl_CurrZTop,gbr)
(1) 2207/ 600182C : E000                		mov	#0,r0
(1) 2208/ 600182E : C112                		mov.w	r0,@(marsGbl_CurrNumFaces,gbr)
(1) 2209/ 6001830 : D00A                		mov	#MarsMdl_MdlLoop,r0
(1) 2210/ 6001832 : 400B                		jsr	@r0
(1) 2211/ 6001834 : 0009                		nop
(1) 2212/ 6001836 :                     ; 		bra	.slv_exit
(1) 2213/ 6001836 :                     ; 		nop
(1) 2214/ 6001836 :                     ; 		align 4
(1) 2215/ 6001836 :                     
(1) 2216/ 6001836 :                     ; ============================================================
(1) 2217/ 6001836 :                     
(1) 2218/ 6001836 :                     ; JMP only
(1) 2219/ 6001836 :                     .slv_exit:
(1) 2220/ 6001836 : D404                		mov	#_sysreg+comm14,r4	; Finish task
(1) 2221/ 6001838 : D109                		mov	#$FF00,r1
(1) 2222/ 600183A : 6041                		mov.w	@r4,r0
(1) 2223/ 600183C : 2019                		and	r1,r0
(1) 2224/ 600183E : 2401                		mov.w	r0,@r4
(1) 2225/ 6001840 : AFBE                		bra	slave_loop
(1) 2226/ 6001842 : 0009                		nop
(1) 2227/ 6001844 :                     		align 4
(1) 2228/ 6001844 : 0600 17D4 2000 402E 		ltorg
                    2600 CA40 2601 3C18 
                    2601 0240 2601 4418 
                    C000 0160 0000 FF00 
(1) 2229/ 6001864 :                     
(1) 2230/ 6001864 :                     ; ------------------------------------------------
(1) 2231/ 6001864 :                     ; Includes
(1) 2232/ 6001864 :                     ; ------------------------------------------------
(1) 2233/ 6001864 :                     
(1) 2234/ 6001864 :                     		include "system/mars/cache/cache_m_scrlspr.asm"
(2)    1/ 6001864 :                     ; ====================================================================
(2)    2/ 6001864 :                     ; ----------------------------------------------------------------
(2)    3/ 6001864 :                     ; CACHE code for MASTER CPU
(2)    4/ 6001864 :                     ;
(2)    5/ 6001864 :                     ; LIMIT: $800 bytes
(2)    6/ 6001864 :                     ; ----------------------------------------------------------------
(2)    7/ 6001864 :                     
(2)    8/ 6001864 :                     		align 4
(2)    9/ 6001864 :                     CACHE_MSTR_SCRL:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 906A                		mov	#$F0,r0
(2)   18/FFFFFFFFC0000002 : 400E                		ldc	r0,sr
(2)   19/FFFFFFFFC0000004 : 9169                		mov	#_FRT,r1
(2)   20/FFFFFFFFC0000006 : 8417                		mov.b	@(7,r1),r0
(2)   21/FFFFFFFFC0000008 : CA02                		xor	#2,r0
(2)   22/FFFFFFFFC000000A : 8017                		mov.b	r0,@(7,r1)
(2)   23/FFFFFFFFC000000C :                     
(2)   24/FFFFFFFFC000000C : C604                		mov	@(marsGbl_CurrRdSpr,gbr),r0
(2)   25/FFFFFFFFC000000E : 6103                		mov	r0,r1
(2)   26/FFFFFFFFC0000010 : 5010                		mov	@(marsspr_data,r1),r0
(2)   27/FFFFFFFFC0000012 : 2008                		tst	r0,r0
(2)   28/FFFFFFFFC0000014 : 8950                		bt	.finish_now
(2)   29/FFFFFFFFC0000016 : D02C                		mov	#Cach_SprBkup_S,r0
(2)   30/FFFFFFFFC0000018 : 2026                		mov	r2,@-r0
(2)   31/FFFFFFFFC000001A : 2036                		mov	r3,@-r0
(2)   32/FFFFFFFFC000001C : 2046                		mov	r4,@-r0
(2)   33/FFFFFFFFC000001E : 2056                		mov	r5,@-r0
(2)   34/FFFFFFFFC0000020 : 2066                		mov	r6,@-r0
(2)   35/FFFFFFFFC0000022 : 2076                		mov	r7,@-r0
(2)   36/FFFFFFFFC0000024 : 2086                		mov	r8,@-r0
(2)   37/FFFFFFFFC0000026 : 2096                		mov	r9,@-r0
(2)   38/FFFFFFFFC0000028 : 20A6                		mov	r10,@-r0
(2)   39/FFFFFFFFC000002A : 4012                		sts	macl,@-r0
(2)   40/FFFFFFFFC000002C : 4002                		sts	mach,@-r0
(2)   41/FFFFFFFFC000002E :                     
(2)   42/FFFFFFFFC000002E :                     	; quick.
(2)   43/FFFFFFFFC000002E :                     	; r1 - current sprite
(2)   44/FFFFFFFFC000002E :                     	; r2 - output piece
(2)   45/FFFFFFFFC000002E :                     
(2)   46/FFFFFFFFC000002E :                     	; TODO: WIP
(2)   47/FFFFFFFFC000002E : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0
(2)   48/FFFFFFFFC0000030 : 6203                		mov	r0,r2
(2)   49/FFFFFFFFC0000032 : 5010                		mov	@(marsspr_data,r1),r0
(2)   50/FFFFFFFFC0000034 : 1201                		mov	r0,@(plypz_mtrl,r2)
(2)   51/FFFFFFFFC0000036 : 8514                		mov.w	@(marsspr_x,r1),r0		; r3 - X pos
(2)   52/FFFFFFFFC0000038 : 6303                		mov	r0,r3
(2)   53/FFFFFFFFC000003A : 8515                		mov.w	@(marsspr_y,r1),r0		; r4 - Y pos
(2)   54/FFFFFFFFC000003C : 6403                		mov	r0,r4
(2)   55/FFFFFFFFC000003E : 8516                		mov.w	@(marsspr_xs,r1),r0		; r5 - XS
(2)   56/FFFFFFFFC0000040 : 6503                		mov	r0,r5
(2)   57/FFFFFFFFC0000042 : 8517                		mov.w	@(marsspr_ys,r1),r0		; r6 - YS
(2)   58/FFFFFFFFC0000044 : 6603                		mov	r0,r6
(2)   59/FFFFFFFFC0000046 : 8512                		mov.w	@(marsspr_dwidth,r1),r0
(2)   60/FFFFFFFFC0000048 : 6703                		mov	r0,r7
(2)   61/FFFFFFFFC000004A : 4728                		shll16	r7
(2)   62/FFFFFFFFC000004C : 6873                		mov	r7,r8				; spritesheet width
(2)   63/FFFFFFFFC000004E : 8513                		mov.w	@(marsspr_indx,r1),r0		; index palette
(2)   64/FFFFFFFFC0000050 : C9FF                		and	#$FF,r0
(2)   65/FFFFFFFFC0000052 : 208B                		or	r8,r0
(2)   66/FFFFFFFFC0000054 : 1200                		mov	r0,@(plypz_type,r2)
(2)   67/FFFFFFFFC0000056 : 6843                		mov	r4,r8
(2)   68/FFFFFFFFC0000058 : 6943                		mov	r4,r9
(2)   69/FFFFFFFFC000005A : 396C                		add	r6,r9
(2)   70/FFFFFFFFC000005C : D01B                		mov	#$FFFF,r0
(2)   71/FFFFFFFFC000005E : 2909                		and	r0,r9
(2)   72/FFFFFFFFC0000060 : 4828                		shll16	r8
(2)   73/FFFFFFFFC0000062 : 289B                		or	r9,r8
(2)   74/FFFFFFFFC0000064 : 1282                		mov	r8,@(plypz_ytb,r2)
(2)   75/FFFFFFFFC0000066 : 6833                		mov	r3,r8
(2)   76/FFFFFFFFC0000068 : 6933                		mov	r3,r9
(2)   77/FFFFFFFFC000006A : 395C                		add	r5,r9
(2)   78/FFFFFFFFC000006C : 4828                		shll16	r8			; XL/XR
(2)   79/FFFFFFFFC000006E : 699D                		extu.w	r9,r9
(2)   80/FFFFFFFFC0000070 : 298B                		or	r8,r9
(2)   81/FFFFFFFFC0000072 : 1293                		mov	r9,@(plypz_xl,r2)
(2)   82/FFFFFFFFC0000074 : E000                		mov	#0,r0			; no screen DX/DY
(2)   83/FFFFFFFFC0000076 : 1206                		mov	r0,@(plypz_xl_dx,r2)
(2)   84/FFFFFFFFC0000078 : 1207                		mov	r0,@(plypz_xr_dx,r2)
(2)   85/FFFFFFFFC000007A :                     
(2)   86/FFFFFFFFC000007A : E320                		mov	#$00000020,r3
(2)   87/FFFFFFFFC000007C : E400                		mov	#$00000000,r4
(2)   88/FFFFFFFFC000007E : 1234                		mov	r3,@(plypz_src_xl,r2)
(2)   89/FFFFFFFFC0000080 : 1245                		mov	r4,@(plypz_src_yl,r2)
(2)   90/FFFFFFFFC0000082 :                     
(2)   91/FFFFFFFFC0000082 : 200A                		xor	r0,r0
(2)   92/FFFFFFFFC0000084 : 1208                		mov	r0,@(plypz_src_xl_dx,r2)
(2)   93/FFFFFFFFC0000086 : 1209                		mov	r0,@(plypz_src_xr_dx,r2)
(2)   94/FFFFFFFFC0000088 : D011                		mov	#1<<16,r0
(2)   95/FFFFFFFFC000008A : 120A                		mov	r0,@(plypz_src_yl_dx,r2)
(2)   96/FFFFFFFFC000008C : 120B                		mov	r0,@(plypz_src_yr_dx,r2)
(2)   97/FFFFFFFFC000008E :                     
(2)   98/FFFFFFFFC000008E :                     	; Next sprite and SVDP piece
(2)   99/FFFFFFFFC000008E : 7114                		add	#sizeof_marsspr,r1
(2)  100/FFFFFFFFC0000090 : 7230                		add	#sizeof_plypz,r2
(2)  101/FFFFFFFFC0000092 : 6013                		mov	r1,r0
(2)  102/FFFFFFFFC0000094 : C204                		mov	r0,@(marsGbl_CurrRdSpr,gbr)
(2)  103/FFFFFFFFC0000096 : 6023                		mov	r2,r0
(2)  104/FFFFFFFFC0000098 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  105/FFFFFFFFC000009A : C516                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; add one
(2)  106/FFFFFFFFC000009C : 7001                		add	#1,r0
(2)  107/FFFFFFFFC000009E : C116                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  108/FFFFFFFFC00000A0 :                     
(2)  109/FFFFFFFFC00000A0 : D00C                		mov	#Cach_SprBkup_LB,r0
(2)  110/FFFFFFFFC00000A2 : 4006                		lds	@r0+,mach
(2)  111/FFFFFFFFC00000A4 : 4016                		lds	@r0+,macl
(2)  112/FFFFFFFFC00000A6 : 6A06                		mov	@r0+,r10
(2)  113/FFFFFFFFC00000A8 : 6906                		mov	@r0+,r9
(2)  114/FFFFFFFFC00000AA : 6806                		mov	@r0+,r8
(2)  115/FFFFFFFFC00000AC : 6706                		mov	@r0+,r7
(2)  116/FFFFFFFFC00000AE : 6606                		mov	@r0+,r6
(2)  117/FFFFFFFFC00000B0 : 6506                		mov	@r0+,r5
(2)  118/FFFFFFFFC00000B2 : 6406                		mov	@r0+,r4
(2)  119/FFFFFFFFC00000B4 : 6306                		mov	@r0+,r3
(2)  120/FFFFFFFFC00000B6 : 6206                		mov	@r0+,r2
(2)  121/FFFFFFFFC00000B8 :                     ; wdm_next:
(2)  122/FFFFFFFFC00000B8 :                     
(2)  123/FFFFFFFFC00000B8 :                     	; TODO: ver porque esto se
(2)  124/FFFFFFFFC00000B8 :                     	; traba en hardware
(2)  125/FFFFFFFFC00000B8 :                     ; 		mov.l   #$FFFFFE80,r1
(2)  126/FFFFFFFFC00000B8 :                     ; 		mov.w   #$A518,r0		; OFF
(2)  127/FFFFFFFFC00000B8 :                     ; 		mov.w   r0,@r1
(2)  128/FFFFFFFFC00000B8 :                     ; 		or      #$20,r0			; ON
(2)  129/FFFFFFFFC00000B8 :                     ; 		mov.w   r0,@r1
(2)  130/FFFFFFFFC00000B8 :                     ; 		mov.w   #$5A20,r0		; Timer for the next WD
(2)  131/FFFFFFFFC00000B8 :                     ; 		mov.w   r0,@r1
(2)  132/FFFFFFFFC00000B8 :                     ; 		rts
(2)  133/FFFFFFFFC00000B8 :                     ; 		nop
(2)  134/FFFFFFFFC00000B8 :                     ; 		align 4
(2)  135/FFFFFFFFC00000B8 :                     ; 		ltorg
(2)  136/FFFFFFFFC00000B8 :                     
(2)  137/FFFFFFFFC00000B8 :                     .finish_now:
(2)  138/FFFFFFFFC00000B8 : E001                		mov	#1,r0
(2)  139/FFFFFFFFC00000BA : C114                		mov.w	r0,@(marsGbl_WdgStatus,gbr)
(2)  140/FFFFFFFFC00000BC : 910E                		mov	#$FFFFFE80,r1			; Stop watchdog
(2)  141/FFFFFFFFC00000BE : 900E                		mov.w   #$A518,r0
(2)  142/FFFFFFFFC00000C0 : 2101                		mov.w   r0,@r1
(2)  143/FFFFFFFFC00000C2 : 000B                		rts
(2)  144/FFFFFFFFC00000C4 : 0009                		nop
(2)  145/FFFFFFFFC00000C6 :                     		align 4
(2)  146/FFFFFFFFC00000C8 : C000 05C8 0000 FFFF 		ltorg
                    0001 0000 C000 059C 
                    00F0 FE10 FE80 A518 
(2)  147/FFFFFFFFC00000E0 :                     
(2)  148/FFFFFFFFC00000E0 :                     ; ====================================================================
(2)  149/FFFFFFFFC00000E0 :                     ; ----------------------------------------------------------------
(2)  150/FFFFFFFFC00000E0 :                     ; Super sprites
(2)  151/FFFFFFFFC00000E0 :                     ; ----------------------------------------------------------------
(2)  152/FFFFFFFFC00000E0 :                     
(2)  153/FFFFFFFFC00000E0 :                     ; --------------------------------------------------------
(2)  154/FFFFFFFFC00000E0 :                     ; MarsVideo_SprBlkRefill
(2)  155/FFFFFFFFC00000E0 :                     ;
(2)  156/FFFFFFFFC00000E0 :                     ; Call MarsVideo_MarkSprBlocks first.
(2)  157/FFFFFFFFC00000E0 :                     ;
(2)  158/FFFFFFFFC00000E0 :                     ; r14 - Background buffer
(2)  159/FFFFFFFFC00000E0 :                     ; --------------------------------------------------------
(2)  160/FFFFFFFFC00000E0 :                     
(2)  161/FFFFFFFFC00000E0 :                     		align 4
(2)  162/FFFFFFFFC00000E0 :                     MarsVideo_SprBlkRefill:
(2)  163/FFFFFFFFC00000E0 : 4F22                		sts	pr,@-r15
(2)  164/FFFFFFFFC00000E2 : 50E8                		mov	@(mbg_data,r14),r0
(2)  165/FFFFFFFFC00000E4 : 8800                		cmp/eq	#0,r0
(2)  166/FFFFFFFFC00000E6 : 896C                		bt	.no_data
(2)  167/FFFFFFFFC00000E8 : 400A                		lds	r0,mach
(2)  168/FFFFFFFFC00000EA :                     
(2)  169/FFFFFFFFC00000EA : DD52                		mov	#RAM_Mars_RdrwBlocks,r13
(2)  170/FFFFFFFFC00000EC : 51EE                		mov	@(mbg_xpos,r14),r1
(2)  171/FFFFFFFFC00000EE : 52EF                		mov	@(mbg_ypos,r14),r2
(2)  172/FFFFFFFFC00000F0 : 4129                		shlr16	r1
(2)  173/FFFFFFFFC00000F2 : 4229                		shlr16	r2
(2)  174/FFFFFFFFC00000F4 : 611F                		exts.w	r1,r1
(2)  175/FFFFFFFFC00000F6 : 622F                		exts.w	r2,r2
(2)  176/FFFFFFFFC00000F8 : 6013                		mov	r1,r0
(2)  177/FFFFFFFFC00000FA : 81E2                		mov.w	r0,@(mbg_xpos_old,r14)
(2)  178/FFFFFFFFC00000FC : 6023                		mov	r2,r0
(2)  179/FFFFFFFFC00000FE : 81E3                		mov.w	r0,@(mbg_ypos_old,r14)
(2)  180/FFFFFFFFC0000100 : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0
(2)  181/FFFFFFFFC0000102 : 600B                		neg	r0,r0
(2)  182/FFFFFFFFC0000104 : 2109                		and	r0,r1
(2)  183/FFFFFFFFC0000106 : 2209                		and	r0,r2
(2)  184/FFFFFFFFC0000108 :                     
(2)  185/FFFFFFFFC0000108 : DC4B                		mov	#_framebuffer,r12
(2)  186/FFFFFFFFC000010A : 50EB                		mov	@(mbg_fbdata,r14),r0
(2)  187/FFFFFFFFC000010C : 3C0C                		add	r0,r12				; r12 - framebuffer output
(2)  188/FFFFFFFFC000010E : 85E8                		mov.w	@(mbg_width,r14),r0		; r11 - pixel-data WIDTH
(2)  189/FFFFFFFFC0000110 : 6B03                		mov	r0,r11
(2)  190/FFFFFFFFC0000112 : 85EC                		mov.w	@(mbg_intrl_w,r14),r0		; r10 - internal WIDTH
(2)  191/FFFFFFFFC0000114 : 6A03                		mov	r0,r10
(2)  192/FFFFFFFFC0000116 : 85E9                		mov.w	@(mbg_height,r14),r0		;  r9 - image WIDTH
(2)  193/FFFFFFFFC0000118 : 6903                		mov	r0,r9
(2)  194/FFFFFFFFC000011A : 85ED                		mov.w	@(mbg_intrl_h,r14),r0		;  r8 - internal HEIGHT
(2)  195/FFFFFFFFC000011C : 6803                		mov	r0,r8
(2)  196/FFFFFFFFC000011E : 85EB                		mov.w	@(mbg_intrl_blk,r14),r0		;  r7 - block size
(2)  197/FFFFFFFFC0000120 : 6703                		mov	r0,r7
(2)  198/FFFFFFFFC0000122 : 667B                		neg	r7,r6				;  r6 - block limit bits
(2)  199/FFFFFFFFC0000124 : 55E7                		mov	@(mbg_intrl_size,r14),r5	;  r5 - internal WIDTH*HEIGHT
(2)  200/FFFFFFFFC0000126 : 9489                		mov	#320,r4				;  r4 - max
(2)  201/FFFFFFFFC0000128 : 84E0                		mov.b	@(mbg_flags,r14),r0
(2)  202/FFFFFFFFC000012A : C902                		and	#%10,r0
(2)  203/FFFFFFFFC000012C : 2008                		tst	r0,r0
(2)  204/FFFFFFFFC000012E : 8900                		bt	.indxmode
(2)  205/FFFFFFFFC0000130 : 4400                		shll	r4
(2)  206/FFFFFFFFC0000132 :                     ; 		shll	r11
(2)  207/FFFFFFFFC0000132 :                     .indxmode:
(2)  208/FFFFFFFFC0000132 :                     
(2)  209/FFFFFFFFC0000132 :                     	; Set X/Y draw heads
(2)  210/FFFFFFFFC0000132 :                     .xinit_l:
(2)  211/FFFFFFFFC0000132 : 4111                		cmp/pz	r1
(2)  212/FFFFFFFFC0000134 : 8901                		bt	.xbg_back
(2)  213/FFFFFFFFC0000136 : AFFC                		bra	.xinit_l
(2)  214/FFFFFFFFC0000138 : 31BC                		add	r11,r1
(2)  215/FFFFFFFFC000013A :                     .xbg_back:
(2)  216/FFFFFFFFC000013A : 31B7                		cmp/gt	r11,r1			; First X limiter
(2)  217/FFFFFFFFC000013C : 8B01                		bf	.xbg_inc
(2)  218/FFFFFFFFC000013E : AFFC                		bra	.xbg_back
(2)  219/FFFFFFFFC0000140 : 31B8                		sub	r11,r1
(2)  220/FFFFFFFFC0000142 :                     .xbg_inc:
(2)  221/FFFFFFFFC0000142 : 4211                		cmp/pz	r2
(2)  222/FFFFFFFFC0000144 : 8901                		bt	.ybg_back
(2)  223/FFFFFFFFC0000146 : AFFC                		bra	.xbg_inc
(2)  224/FFFFFFFFC0000148 : 329C                		add	r9,r2
(2)  225/FFFFFFFFC000014A :                     .ybg_back:
(2)  226/FFFFFFFFC000014A : 3297                		cmp/gt	r9,r2			; First Y limiter
(2)  227/FFFFFFFFC000014C : 8B01                		bf	.ybg_inc
(2)  228/FFFFFFFFC000014E : AFFC                		bra	.ybg_back
(2)  229/FFFFFFFFC0000150 : 3298                		sub	r9,r2
(2)  230/FFFFFFFFC0000152 :                     .ybg_inc:
(2)  231/FFFFFFFFC0000152 :                     ; 		mov	r1,r0
(2)  232/FFFFFFFFC0000152 :                     ; ; 		mov.w	r0,@(mbg_xinc_l,r14)
(2)  233/FFFFFFFFC0000152 :                     ; 		add	r4,r0
(2)  234/FFFFFFFFC0000152 :                     ; .lwr_xnxt:	cmp/gt	r11,r0
(2)  235/FFFFFFFFC0000152 :                     ; 		bf	.lwr_xvld
(2)  236/FFFFFFFFC0000152 :                     ; 		bra	.lwr_xnxt
(2)  237/FFFFFFFFC0000152 :                     ; 		sub	r11,r0
(2)  238/FFFFFFFFC0000152 :                     ; .lwr_xvld:
(2)  239/FFFFFFFFC0000152 :                     ; ; 		mov.w	r0,@(mbg_xinc_r,r14)
(2)  240/FFFFFFFFC0000152 :                     ;
(2)  241/FFFFFFFFC0000152 :                     ; 		mov	r2,r0
(2)  242/FFFFFFFFC0000152 :                     ; ; 		mov.w	r0,@(mbg_yinc_u,r14)
(2)  243/FFFFFFFFC0000152 :                     ; 		mov	r0,r3
(2)  244/FFFFFFFFC0000152 :                     ;
(2)  245/FFFFFFFFC0000152 :                     ; 		add	r8,r3
(2)  246/FFFFFFFFC0000152 :                     ; 		sub	r7,r3
(2)  247/FFFFFFFFC0000152 :                     ; .lwr_ynxt:	cmp/ge	r9,r3
(2)  248/FFFFFFFFC0000152 :                     ; 		bf	.lwr_yvld
(2)  249/FFFFFFFFC0000152 :                     ; 		bra	.lwr_ynxt
(2)  250/FFFFFFFFC0000152 :                     ; 		sub	r9,r3
(2)  251/FFFFFFFFC0000152 :                     ; .lwr_yvld:
(2)  252/FFFFFFFFC0000152 :                     ; 		mov	r3,r0
(2)  253/FFFFFFFFC0000152 :                     ; 		mov.w	r0,@(mbg_yinc_d,r14)
(2)  254/FFFFFFFFC0000152 :                     
(2)  255/FFFFFFFFC0000152 :                     	; r1 - X bg pos
(2)  256/FFFFFFFFC0000152 :                     	; r2 - Y bg pos
(2)  257/FFFFFFFFC0000152 :                     	; r3 - Framebuffer BASE
(2)  258/FFFFFFFFC0000152 :                     	; r4 - Y FB pos &BLKSIZE
(2)  259/FFFFFFFFC0000152 :                     	; Set X/Y framebuffer blocks
(2)  260/FFFFFFFFC0000152 : 85EA                		mov.w	@(mbg_fbpos_y,r14),r0
(2)  261/FFFFFFFFC0000154 : 6403                		mov	r0,r4
(2)  262/FFFFFFFFC0000156 : 53EA                		mov	@(mbg_fbpos,r14),r3
(2)  263/FFFFFFFFC0000158 : 2469                		and	r6,r4
(2)  264/FFFFFFFFC000015A : 2369                		and	r6,r3
(2)  265/FFFFFFFFC000015C : 2269                		and	r6,r2
(2)  266/FFFFFFFFC000015E : 2169                		and	r6,r1
(2)  267/FFFFFFFFC0000160 : E600                		mov	#0,r6
(2)  268/FFFFFFFFC0000162 :                     .nxt_y:
(2)  269/FFFFFFFFC0000162 : 3483                		cmp/ge	r8,r4
(2)  270/FFFFFFFFC0000164 : 8B00                		bf	.nxt_y_l
(2)  271/FFFFFFFFC0000166 : 3488                		sub	r8,r4
(2)  272/FFFFFFFFC0000168 :                     .nxt_y_l:
(2)  273/FFFFFFFFC0000168 : 3293                		cmp/ge	r9,r2		; Y limiters
(2)  274/FFFFFFFFC000016A : 8B00                		bf	.ybg_l
(2)  275/FFFFFFFFC000016C : 3298                		sub	r9,r2
(2)  276/FFFFFFFFC000016E :                     .ybg_l:
(2)  277/FFFFFFFFC000016E : 2FD6                		mov	r13,@-r15
(2)  278/FFFFFFFFC0000170 : 2F66                		mov	r6,@-r15
(2)  279/FFFFFFFFC0000172 : 2F36                		mov	r3,@-r15
(2)  280/FFFFFFFFC0000174 : 2F16                		mov	r1,@-r15
(2)  281/FFFFFFFFC0000176 : E600                		mov	#0,r6
(2)  282/FFFFFFFFC0000178 :                     .nxt_x:
(2)  283/FFFFFFFFC0000178 : 31B3                		cmp/ge	r11,r1		; X pixel-data wrap
(2)  284/FFFFFFFFC000017A : 8B00                		bf	.xbg_l
(2)  285/FFFFFFFFC000017C : 31B8                		sub	r11,r1
(2)  286/FFFFFFFFC000017E :                     .xbg_l:
(2)  287/FFFFFFFFC000017E : 3353                		cmp/ge	r5,r3
(2)  288/FFFFFFFFC0000180 : 8B00                		bf	.nxt_x_l
(2)  289/FFFFFFFFC0000182 : 3358                		sub	r5,r3
(2)  290/FFFFFFFFC0000184 :                     .nxt_x_l:
(2)  291/FFFFFFFFC0000184 : 60D0                		mov.b	@r13,r0
(2)  292/FFFFFFFFC0000186 : 2008                		tst	r0,r0
(2)  293/FFFFFFFFC0000188 : 8903                		bt	.no_pz
(2)  294/FFFFFFFFC000018A : 200A                		xor	r0,r0
(2)  295/FFFFFFFFC000018C : 2D00                		mov.b	r0,@r13
(2)  296/FFFFFFFFC000018E : B01B                		bsr	.mk_piece
(2)  297/FFFFFFFFC0000190 : 0009                		nop
(2)  298/FFFFFFFFC0000192 :                     .no_pz:
(2)  299/FFFFFFFFC0000192 : 6073                		mov	r7,r0
(2)  300/FFFFFFFFC0000194 : 4009                		shlr2	r0
(2)  301/FFFFFFFFC0000196 : 3D0C                		add	r0,r13
(2)  302/FFFFFFFFC0000198 : 337C                		add	r7,r3
(2)  303/FFFFFFFFC000019A : 367C                		add	r7,r6
(2)  304/FFFFFFFFC000019C : 36A3                		cmp/ge	r10,r6
(2)  305/FFFFFFFFC000019E : 8FEB                		bf/s	.nxt_x
(2)  306/FFFFFFFFC00001A0 : 317C                		add	r7,r1
(2)  307/FFFFFFFFC00001A2 :                     
(2)  308/FFFFFFFFC00001A2 : 6073                		mov	r7,r0
(2)  309/FFFFFFFFC00001A4 : 617B                		neg	r7,r1
(2)  310/FFFFFFFFC00001A6 : 2019                		and	r1,r0
(2)  311/FFFFFFFFC00001A8 : 4008                		shll2	r0
(2)  312/FFFFFFFFC00001AA : 4008                		shll2	r0
(2)  313/FFFFFFFFC00001AC : 4000                		shll	r0
(2)  314/FFFFFFFFC00001AE :                     
(2)  315/FFFFFFFFC00001AE : 61F6                		mov	@r15+,r1
(2)  316/FFFFFFFFC00001B0 : 63F6                		mov	@r15+,r3
(2)  317/FFFFFFFFC00001B2 : 66F6                		mov	@r15+,r6
(2)  318/FFFFFFFFC00001B4 : 6DF6                		mov	@r15+,r13
(2)  319/FFFFFFFFC00001B6 :                     
(2)  320/FFFFFFFFC00001B6 :                     
(2)  321/FFFFFFFFC00001B6 : 3D0C                		add	r0,r13
(2)  322/FFFFFFFFC00001B8 : 347C                		add	r7,r4
(2)  323/FFFFFFFFC00001BA : 327C                		add	r7,r2
(2)  324/FFFFFFFFC00001BC : 367C                		add 	r7,r6
(2)  325/FFFFFFFFC00001BE : 3683                		cmp/ge	r8,r6
(2)  326/FFFFFFFFC00001C0 : 8BCF                		bf	.nxt_y
(2)  327/FFFFFFFFC00001C2 :                     
(2)  328/FFFFFFFFC00001C2 :                     .no_data:
(2)  329/FFFFFFFFC00001C2 : 4F26                		lds	@r15+,pr
(2)  330/FFFFFFFFC00001C4 : 000B                		rts
(2)  331/FFFFFFFFC00001C6 : 0009                		nop
(2)  332/FFFFFFFFC00001C8 :                     		align 4
(2)  333/FFFFFFFFC00001C8 :                     
(2)  334/FFFFFFFFC00001C8 :                     	; r1 - X bg pos
(2)  335/FFFFFFFFC00001C8 :                     	; r2 - Y bg pos
(2)  336/FFFFFFFFC00001C8 :                     	; r3 - Framebuffer BASE
(2)  337/FFFFFFFFC00001C8 :                     	; r4 - Y FB pos &BLKSIZE
(2)  338/FFFFFFFFC00001C8 :                     	; Set X/Y framebuffer blocks
(2)  339/FFFFFFFFC00001C8 :                     .mk_piece:
(2)  340/FFFFFFFFC00001C8 : 2F16                		mov	r1,@-r15
(2)  341/FFFFFFFFC00001CA : 2F26                		mov	r2,@-r15
(2)  342/FFFFFFFFC00001CC : 2F36                		mov	r3,@-r15
(2)  343/FFFFFFFFC00001CE : 2F46                		mov	r4,@-r15
(2)  344/FFFFFFFFC00001D0 : 2F66                		mov	r6,@-r15
(2)  345/FFFFFFFFC00001D2 : 2F56                		mov	r5,@-r15
(2)  346/FFFFFFFFC00001D4 : 2F86                		mov	r8,@-r15
(2)  347/FFFFFFFFC00001D6 : 2F96                		mov	r9,@-r15
(2)  348/FFFFFFFFC00001D8 :                     
(2)  349/FFFFFFFFC00001D8 :                     ; 		mov	r13,r8		; BG X/Y add
(2)  350/FFFFFFFFC00001D8 : 080A                		sts	mach,r8
(2)  351/FFFFFFFFC00001DA : 22BE                		mulu	r11,r2
(2)  352/FFFFFFFFC00001DC : 001A                		sts	macl,r0
(2)  353/FFFFFFFFC00001DE : 380C                		add	r0,r8
(2)  354/FFFFFFFFC00001E0 : 381C                		add	r1,r8
(2)  355/FFFFFFFFC00001E2 : 2A4E                		mulu	r4,r10		; Framebuffer X/Y add
(2)  356/FFFFFFFFC00001E4 : 091A                		sts	macl,r9
(2)  357/FFFFFFFFC00001E6 : 393C                		add	r3,r9
(2)  358/FFFFFFFFC00001E8 :                     
(2)  359/FFFFFFFFC00001E8 : 6273                		mov	r7,r2
(2)  360/FFFFFFFFC00001EA :                     .yblk_loopn:
(2)  361/FFFFFFFFC00001EA : 3953                		cmp/ge	r5,r9
(2)  362/FFFFFFFFC00001EC : 8B00                		bf	.ymax
(2)  363/FFFFFFFFC00001EE : 3958                		sub	r5,r9
(2)  364/FFFFFFFFC00001F0 :                     .ymax:
(2)  365/FFFFFFFFC00001F0 : 6373                		mov	r7,r3
(2)  366/FFFFFFFFC00001F2 : 4309                		shlr2	r3
(2)  367/FFFFFFFFC00001F4 : 6483                		mov	r8,r4
(2)  368/FFFFFFFFC00001F6 : 6693                		mov	r9,r6
(2)  369/FFFFFFFFC00001F8 :                     .nxtlng:
(2)  370/FFFFFFFFC00001F8 : 6042                		mov	@r4,r0
(2)  371/FFFFFFFFC00001FA : 6163                		mov	r6,r1
(2)  372/FFFFFFFFC00001FC : 31CC                		add	r12,r1
(2)  373/FFFFFFFFC00001FE : 2102                		mov	r0,@r1
(2)  374/FFFFFFFFC0000200 : 911C                		mov	#320,r1
(2)  375/FFFFFFFFC0000202 : 3617                		cmp/gt	r1,r6
(2)  376/FFFFFFFFC0000204 : 8903                		bt	.hdnpos
(2)  377/FFFFFFFFC0000206 : 6163                		mov	r6,r1
(2)  378/FFFFFFFFC0000208 : 315C                		add	r5,r1
(2)  379/FFFFFFFFC000020A : 31CC                		add	r12,r1
(2)  380/FFFFFFFFC000020C : 2102                		mov	r0,@r1
(2)  381/FFFFFFFFC000020E :                     .hdnpos:
(2)  382/FFFFFFFFC000020E : 7604                		add	#4,r6
(2)  383/FFFFFFFFC0000210 : 4310                		dt	r3
(2)  384/FFFFFFFFC0000212 : 8FF1                		bf/s	.nxtlng
(2)  385/FFFFFFFFC0000214 : 7404                		add	#4,r4
(2)  386/FFFFFFFFC0000216 :                     
(2)  387/FFFFFFFFC0000216 : 38BC                		add	r11,r8
(2)  388/FFFFFFFFC0000218 : 4210                		dt	r2
(2)  389/FFFFFFFFC000021A : 8FE6                		bf/s	.yblk_loopn
(2)  390/FFFFFFFFC000021C : 39AC                		add	r10,r9
(2)  391/FFFFFFFFC000021E :                     .yblk_ex:
(2)  392/FFFFFFFFC000021E : 69F6                		mov	@r15+,r9
(2)  393/FFFFFFFFC0000220 : 68F6                		mov	@r15+,r8
(2)  394/FFFFFFFFC0000222 : 65F6                		mov	@r15+,r5
(2)  395/FFFFFFFFC0000224 : 66F6                		mov	@r15+,r6
(2)  396/FFFFFFFFC0000226 : 64F6                		mov	@r15+,r4
(2)  397/FFFFFFFFC0000228 : 63F6                		mov	@r15+,r3
(2)  398/FFFFFFFFC000022A : 62F6                		mov	@r15+,r2
(2)  399/FFFFFFFFC000022C : 61F6                		mov	@r15+,r1
(2)  400/FFFFFFFFC000022E : 000B                		rts
(2)  401/FFFFFFFFC0000230 : 0009                		nop
(2)  402/FFFFFFFFC0000232 :                     		align 4
(2)  403/FFFFFFFFC0000234 : 2600 CA40 2400 0000 		ltorg
                    0140                
(2)  404/FFFFFFFFC000023E :                     
(2)  405/FFFFFFFFC000023E :                     ; --------------------------------------------------------
(2)  406/FFFFFFFFC000023E :                     ; MarsVideo_DrawSuperSpr
(2)  407/FFFFFFFFC000023E :                     ;
(2)  408/FFFFFFFFC000023E :                     ; Draws pieces from the SVDP list using
(2)  409/FFFFFFFFC000023E :                     ; specific screen-coordinates.
(2)  410/FFFFFFFFC000023E :                     ;
(2)  411/FFFFFFFFC000023E :                     ; Set your screen coords by calling
(2)  412/FFFFFFFFC000023E :                     ; MarsVideo_SetSuperSpr first.
(2)  413/FFFFFFFFC000023E :                     ; --------------------------------------------------------
(2)  414/FFFFFFFFC000023E :                     
(2)  415/FFFFFFFFC000023E :                     		align 4
(2)  416/FFFFFFFFC0000240 :                     MarsVideo_DrawSuperSpr:
(2)  417/FFFFFFFFC0000240 : C516                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2)  418/FFFFFFFFC0000242 : 4015                		cmp/pl	r0
(2)  419/FFFFFFFFC0000244 : 8B3A                		bf	.no_pz
(2)  420/FFFFFFFFC0000246 :                     
(2)  421/FFFFFFFFC0000246 : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0
(2)  422/FFFFFFFFC0000248 : 6D03                		mov	r0,r13
(2)  423/FFFFFFFFC000024A : DC7E                		mov	#Cach_PzCopy,r12
(2)  424/FFFFFFFFC000024C : 6BC3                		mov	r12,r11
(2)  425/FFFFFFFFC000024E :                     	rept sizeof_plypz/4
(2)  426/FFFFFFFFC000024E :                     		mov	@r13+,r0
(2)  427/FFFFFFFFC000024E :                     		mov	r0,@r12
(2)  428/FFFFFFFFC000024E :                     		add	#4,r12
(2)  429/FFFFFFFFC000024E :                     	endm
(2)  426/FFFFFFFFC000024E : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000250 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000252 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000254 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000256 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000258 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC000025A : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC000025C : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC000025E : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000260 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000262 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000264 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000266 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000268 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC000026A : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC000026C : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC000026E : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000270 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000272 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000274 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000276 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000278 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC000027A : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC000027C : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC000027E : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000280 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000282 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000284 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000286 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000288 : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC000028A : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC000028C : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC000028E : 7C04                		add	#4,r12
(2)  426/FFFFFFFFC0000290 : 60D6                		mov	@r13+,r0
(2)  427/FFFFFFFFC0000292 : 2C02                		mov	r0,@r12
(2)  428/FFFFFFFFC0000294 : 7C04                		add	#4,r12
(2)  430/FFFFFFFFC0000296 : 59B2                		mov	@(plypz_ytb,r11),r9		; Grab StartY / EndY
(2)  431/FFFFFFFFC0000298 : 6A93                		mov	r9,r10
(2)  432/FFFFFFFFC000029A : D06B                		mov	#$FFFF,r0
(2)  433/FFFFFFFFC000029C : 4929                		shlr16	r9
(2)  434/FFFFFFFFC000029E : 699F                		exts.w	r9,r9			;  r9 - Top
(2)  435/FFFFFFFFC00002A0 : 2A09                		and	r0,r10			; r10 - Bottom
(2)  436/FFFFFFFFC00002A2 : 3090                		cmp/eq	r9,r0			; if Top==Bottom, exit
(2)  437/FFFFFFFFC00002A4 : 8908                		bt	.invld_y
(2)  438/FFFFFFFFC00002A6 : 90DD                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  439/FFFFFFFFC00002A8 : 3903                		cmp/ge	r0,r9
(2)  440/FFFFFFFFC00002AA : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  441/FFFFFFFFC00002AC : 3A07                		cmp/gt	r0,r10
(2)  442/FFFFFFFFC00002AE : 8B00                		bf	.len_max
(2)  443/FFFFFFFFC00002B0 : 6A03                		mov	r0,r10
(2)  444/FFFFFFFFC00002B2 :                     .len_max:
(2)  445/FFFFFFFFC00002B2 : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2)  446/FFFFFFFFC00002B4 : 4A15                		cmp/pl	r10
(2)  447/FFFFFFFFC00002B6 : 8903                		bt	.drwtsk1_vld_y
(2)  448/FFFFFFFFC00002B8 :                     .invld_y:
(2)  449/FFFFFFFFC00002B8 : A0B3                		bra	.drwtex_gonxtpz		; if LEN < 0 then check next one...
(2)  450/FFFFFFFFC00002BA : 0009                		nop
(2)  451/FFFFFFFFC00002BC :                     .no_pz:
(2)  452/FFFFFFFFC00002BC : A0C0                		bra	.drwtask_exit
(2)  453/FFFFFFFFC00002BE : 0009                		nop
(2)  454/FFFFFFFFC00002C0 :                     		align 4
(2)  455/FFFFFFFFC00002C0 :                     
(2)  456/FFFFFFFFC00002C0 :                     ; ------------------------------------
(2)  457/FFFFFFFFC00002C0 :                     ; Texture mode
(2)  458/FFFFFFFFC00002C0 :                     ;
(2)  459/FFFFFFFFC00002C0 :                     ; r1  - XL
(2)  460/FFFFFFFFC00002C0 :                     ; r2  - XL DX
(2)  461/FFFFFFFFC00002C0 :                     ; r3  - XR
(2)  462/FFFFFFFFC00002C0 :                     ; r4  - XR DX
(2)  463/FFFFFFFFC00002C0 :                     ; r5  - SRC XL
(2)  464/FFFFFFFFC00002C0 :                     ; r6  - SRC XR
(2)  465/FFFFFFFFC00002C0 :                     ; r7  - SRC YL
(2)  466/FFFFFFFFC00002C0 :                     ; r8  - SRC YR
(2)  467/FFFFFFFFC00002C0 :                     ; r9  - Y current"
(2)  468/FFFFFFFFC00002C0 :                     ; r10  - Number of lines
(2)  469/FFFFFFFFC00002C0 :                     ; ------------------------------------
(2)  470/FFFFFFFFC00002C0 :                     
(2)  471/FFFFFFFFC00002C0 :                     .drwtsk1_vld_y:
(2)  472/FFFFFFFFC00002C0 : 51B3                		mov	@(plypz_xl,r11),r1
(2)  473/FFFFFFFFC00002C2 : 6313                		mov	r1,r3
(2)  474/FFFFFFFFC00002C4 : 52B6                		mov	@(plypz_xl_dx,r11),r2		; r2 - DX left
(2)  475/FFFFFFFFC00002C6 : 4129                		shlr16	r1
(2)  476/FFFFFFFFC00002C8 : 54B7                		mov	@(plypz_xr_dx,r11),r4		; r4 - DX right
(2)  477/FFFFFFFFC00002CA : 4128                		shll16	r1
(2)  478/FFFFFFFFC00002CC : 55B4                		mov	@(plypz_src_xl,r11),r5		; Texture X left/right
(2)  479/FFFFFFFFC00002CE : 4328                		shll16	r3
(2)  480/FFFFFFFFC00002D0 : 57B5                		mov	@(plypz_src_yl,r11),r7		; Texture Y up/down
(2)  481/FFFFFFFFC00002D2 : 6653                		mov	r5,r6
(2)  482/FFFFFFFFC00002D4 :                     
(2)  483/FFFFFFFFC00002D4 : 6873                		mov	r7,r8
(2)  484/FFFFFFFFC00002D6 : 4529                		shlr16	r5
(2)  485/FFFFFFFFC00002D8 : 4729                		shlr16	r7
(2)  486/FFFFFFFFC00002DA : 4528                		shll16	r5
(2)  487/FFFFFFFFC00002DC : 4628                		shll16	r6
(2)  488/FFFFFFFFC00002DE : 4728                		shll16	r7
(2)  489/FFFFFFFFC00002E0 : 4828                		shll16	r8
(2)  490/FFFFFFFFC00002E2 :                     
(2)  491/FFFFFFFFC00002E2 :                     ; 		mov	@(plypz_src_xl,r11),r5		; Texture X left
(2)  492/FFFFFFFFC00002E2 :                     ; 		mov	@(plypz_src_xr,r11),r6		; Texture X right
(2)  493/FFFFFFFFC00002E2 :                     ; 		mov	@(plypz_src_yl,r11),r7		; Texture Y up
(2)  494/FFFFFFFFC00002E2 :                     ; 		mov	@(plypz_src_yr,r11),r8		; Texture Y down
(2)  495/FFFFFFFFC00002E2 :                     .drwsld_nxtline_tex:
(2)  496/FFFFFFFFC00002E2 : 4911                		cmp/pz	r9		; Y Start below 0?
(2)  497/FFFFFFFFC00002E4 : 8B04                		bf	.go_nxtline
(2)  498/FFFFFFFFC00002E6 : D003                		mov	.tag_yhght,r0	; Y Start after 224?
(2)  499/FFFFFFFFC00002E8 : 3A03                		cmp/ge	r0,r10
(2)  500/FFFFFFFFC00002EA : 8B05                		bf	.valid_y
(2)  501/FFFFFFFFC00002EC :                     .go_nxtpz:
(2)  502/FFFFFFFFC00002EC : A099                		bra	.drwtex_gonxtpz
(2)  503/FFFFFFFFC00002EE : 0009                		nop
(2)  504/FFFFFFFFC00002F0 :                     		align 4
(2)  505/FFFFFFFFC00002F0 :                     .go_nxtline:
(2)  506/FFFFFFFFC00002F0 : A089                		bra	.drwsld_updline_tex
(2)  507/FFFFFFFFC00002F2 : 0009                		nop
(2)  508/FFFFFFFFC00002F4 :                     		align 4
(2)  509/FFFFFFFFC00002F4 : 0000 00E0           .tag_yhght:	dc.l SCREEN_HEIGHT
(2)  510/FFFFFFFFC00002F8 :                     .valid_y:
(2)  511/FFFFFFFFC00002F8 : D054                		mov	#Cach_SprBkup_S,r0
(2)  512/FFFFFFFFC00002FA : 2016                		mov	r1,@-r0
(2)  513/FFFFFFFFC00002FC : 2026                		mov	r2,@-r0
(2)  514/FFFFFFFFC00002FE : 2036                		mov	r3,@-r0
(2)  515/FFFFFFFFC0000300 : 2046                		mov	r4,@-r0
(2)  516/FFFFFFFFC0000302 : 2056                		mov	r5,@-r0
(2)  517/FFFFFFFFC0000304 : 2066                		mov	r6,@-r0
(2)  518/FFFFFFFFC0000306 : 2076                		mov	r7,@-r0
(2)  519/FFFFFFFFC0000308 : 2086                		mov	r8,@-r0
(2)  520/FFFFFFFFC000030A : 2096                		mov	r9,@-r0
(2)  521/FFFFFFFFC000030C : 20A6                		mov	r10,@-r0
(2)  522/FFFFFFFFC000030E : 20B6                		mov	r11,@-r0
(2)  523/FFFFFFFFC0000310 :                     
(2)  524/FFFFFFFFC0000310 :                     	; r11
(2)  525/FFFFFFFFC0000310 : 4129                		shlr16	r1			; r1 - X left
(2)  526/FFFFFFFFC0000312 : 4329                		shlr16	r3			; r3 - X right
(2)  527/FFFFFFFFC0000314 : 611F                		exts	r1,r1
(2)  528/FFFFFFFFC0000316 : 633F                		exts	r3,r3
(2)  529/FFFFFFFFC0000318 : 6033                		mov	r3,r0			; r0: X Right - X Left
(2)  530/FFFFFFFFC000031A : 3018                		sub	r1,r0
(2)  531/FFFFFFFFC000031C : 4015                		cmp/pl	r0			; Line reversed?
(2)  532/FFFFFFFFC000031E : 8908                		bt	.txrevers
(2)  533/FFFFFFFFC0000320 : 6033                		mov	r3,r0			; Swap XL and XR values
(2)  534/FFFFFFFFC0000322 : 6313                		mov	r1,r3
(2)  535/FFFFFFFFC0000324 : 6103                		mov	r0,r1
(2)  536/FFFFFFFFC0000326 : 6053                		mov	r5,r0
(2)  537/FFFFFFFFC0000328 : 6563                		mov	r6,r5
(2)  538/FFFFFFFFC000032A : 6603                		mov	r0,r6
(2)  539/FFFFFFFFC000032C : 6073                		mov	r7,r0
(2)  540/FFFFFFFFC000032E : 6783                		mov	r8,r7
(2)  541/FFFFFFFFC0000330 : 6803                		mov	r0,r8
(2)  542/FFFFFFFFC0000332 :                     .txrevers:
(2)  543/FFFFFFFFC0000332 : 3310                		cmp/eq	r1,r3				; Same X position?
(2)  544/FFFFFFFFC0000334 : 895B                		bt	.tex_skip_line
(2)  545/FFFFFFFFC0000336 : 9096                		mov	#SCREEN_WIDTH,r0		; X right < 0?
(2)  546/FFFFFFFFC0000338 : 4315                		cmp/pl	r3
(2)  547/FFFFFFFFC000033A : 8B58                		bf	.tex_skip_line
(2)  548/FFFFFFFFC000033C : 3107                		cmp/gt	r0,r1				; X left > 320?
(2)  549/FFFFFFFFC000033E : 8956                		bt	.tex_skip_line
(2)  550/FFFFFFFFC0000340 : 6233                		mov	r3,r2
(2)  551/FFFFFFFFC0000342 : 6013                		mov 	r1,r0
(2)  552/FFFFFFFFC0000344 : 3208                		sub 	r0,r2
(2)  553/FFFFFFFFC0000346 : 3658                		sub	r5,r6
(2)  554/FFFFFFFFC0000348 : 3878                		sub	r7,r8
(2)  555/FFFFFFFFC000034A :                     
(2)  556/FFFFFFFFC000034A : 908D                		mov	#_JR,r0				; r6 / r2
(2)  557/FFFFFFFFC000034C : 2022                		mov	r2,@r0
(2)  558/FFFFFFFFC000034E : 1061                		mov	r6,@(4,r0)
(2)  559/FFFFFFFFC0000350 : 0009                		nop
(2)  560/FFFFFFFFC0000352 : 5601                		mov	@(4,r0),r6			; r8 / r2
(2)  561/FFFFFFFFC0000354 : 2022                		mov	r2,@r0
(2)  562/FFFFFFFFC0000356 : 1081                		mov	r8,@(4,r0)
(2)  563/FFFFFFFFC0000358 : 0009                		nop
(2)  564/FFFFFFFFC000035A : 5801                		mov	@(4,r0),r8
(2)  565/FFFFFFFFC000035C :                     
(2)  566/FFFFFFFFC000035C :                     	; Limit X destination points
(2)  567/FFFFFFFFC000035C :                     	; and correct the texture's X positions
(2)  568/FFFFFFFFC000035C : 9083                		mov	#SCREEN_WIDTH,r0		; XR point > 320?
(2)  569/FFFFFFFFC000035E : 3307                		cmp/gt	r0,r3
(2)  570/FFFFFFFFC0000360 : 8B00                		bf	.tr_fix
(2)  571/FFFFFFFFC0000362 : 6303                		mov	r0,r3				; Force XR to 320
(2)  572/FFFFFFFFC0000364 :                     .tr_fix:
(2)  573/FFFFFFFFC0000364 : 4115                		cmp/pl	r1				; XL point < 0?
(2)  574/FFFFFFFFC0000366 : 8907                		bt	.tl_fix
(2)  575/FFFFFFFFC0000368 : 621B                		neg	r1,r2				; Fix texture positions
(2)  576/FFFFFFFFC000036A : 326D                		dmuls	r6,r2
(2)  577/FFFFFFFFC000036C : 001A                		sts	macl,r0
(2)  578/FFFFFFFFC000036E : 350C                		add	r0,r5
(2)  579/FFFFFFFFC0000370 : 328D                		dmuls	r8,r2
(2)  580/FFFFFFFFC0000372 : 001A                		sts	macl,r0
(2)  581/FFFFFFFFC0000374 : 370C                		add	r0,r7
(2)  582/FFFFFFFFC0000376 : 211A                		xor	r1,r1				; And reset XL to 0
(2)  583/FFFFFFFFC0000378 :                     .tl_fix:
(2)  584/FFFFFFFFC0000378 :                     
(2)  585/FFFFFFFFC0000378 :                     	; start
(2)  586/FFFFFFFFC0000378 : 3318                		sub 	r1,r3			; r3 - X line width
(2)  587/FFFFFFFFC000037A : 4315                		cmp/pl	r3
(2)  588/FFFFFFFFC000037C : 8B37                		bf	.tex_skip_line
(2)  589/FFFFFFFFC000037E :                     
(2)  590/FFFFFFFFC000037E : DE34                		mov	#Cach_Intrl_W,r14
(2)  591/FFFFFFFFC0000380 : 6DE6                		mov	@r14+,r13			; width
(2)  592/FFFFFFFFC0000382 : 6CE6                		mov	@r14+,r12			; height
(2)  593/FFFFFFFFC0000384 : 60E6                		mov	@r14+,r0			; y pos
(2)  594/FFFFFFFFC0000386 : 309C                		add	r9,r0
(2)  595/FFFFFFFFC0000388 : 30C3                		cmp/ge	r12,r0
(2)  596/FFFFFFFFC000038A : 8B00                		bf	.y_tp
(2)  597/FFFFFFFFC000038C : 30C8                		sub	r12,r0
(2)  598/FFFFFFFFC000038E :                     .y_tp:
(2)  599/FFFFFFFFC000038E : 2D0F                		muls	r0,r13
(2)  600/FFFFFFFFC0000390 : 001A                		sts	macl,r0
(2)  601/FFFFFFFFC0000392 : 6DE6                		mov	@r14+,r13			; x pos
(2)  602/FFFFFFFFC0000394 : 3D1C                		add	r1,r13
(2)  603/FFFFFFFFC0000396 : 3D0C                		add	r0,r13
(2)  604/FFFFFFFFC0000398 : 60E6                		mov	@r14+,r0			; data
(2)  605/FFFFFFFFC000039A : 6CE6                		mov	@r14+,r12			; size
(2)  606/FFFFFFFFC000039C : D92D                		mov	#_overwrite,r9
(2)  607/FFFFFFFFC000039E : 390C                		add	r0,r9
(2)  608/FFFFFFFFC00003A0 :                     
(2)  609/FFFFFFFFC00003A0 : 51B1                		mov	@(plypz_mtrl,r11),r1
(2)  610/FFFFFFFFC00003A2 : 9062                		mov	#$FF,r0
(2)  611/FFFFFFFFC00003A4 : 54B0                		mov	@(plypz_type,r11),r4
(2)  612/FFFFFFFFC00003A6 : 6B43                		mov	r4,r11
(2)  613/FFFFFFFFC00003A8 : 4429                		shlr16	r4
(2)  614/FFFFFFFFC00003AA : 925F                		mov	#$3FFF,r2
(2)  615/FFFFFFFFC00003AC : 2429                		and	r2,r4
(2)  616/FFFFFFFFC00003AE : 2B09                		and	r0,r11
(2)  617/FFFFFFFFC00003B0 :                     .tex2_xloop:
(2)  618/FFFFFFFFC00003B0 : 3DC3                		cmp/ge	r12,r13
(2)  619/FFFFFFFFC00003B2 : 8B00                		bf	.fb_tl
(2)  620/FFFFFFFFC00003B4 : 3DC8                		sub	r12,r13
(2)  621/FFFFFFFFC00003B6 :                     .fb_tl:
(2)  622/FFFFFFFFC00003B6 : 6273                		mov	r7,r2
(2)  623/FFFFFFFFC00003B8 : 4229                		shlr16	r2
(2)  624/FFFFFFFFC00003BA : 242E                		mulu	r2,r4
(2)  625/FFFFFFFFC00003BC : 6253                		mov	r5,r2	   		; Build column index
(2)  626/FFFFFFFFC00003BE : 001A                		sts	macl,r0
(2)  627/FFFFFFFFC00003C0 : 4229                		shlr16	r2
(2)  628/FFFFFFFFC00003C2 : 302C                		add	r2,r0
(2)  629/FFFFFFFFC00003C4 : 001C                		mov.b	@(r0,r1),r0		; Read texture pixel
(2)  630/FFFFFFFFC00003C6 : C9FF                		and	#$FF,r0
(2)  631/FFFFFFFFC00003C8 : 2008                		tst	r0,r0			; If 0 == blank
(2)  632/FFFFFFFFC00003CA : 890B                		bt	.blnkpixl
(2)  633/FFFFFFFFC00003CC : 30BC                		add	r11,r0			; Add index increment
(2)  634/FFFFFFFFC00003CE : 6A03                		mov	r0,r10
(2)  635/FFFFFFFFC00003D0 :                     
(2)  636/FFFFFFFFC00003D0 : 9049                		mov	#320,r0			; write pixel
(2)  637/FFFFFFFFC00003D2 : 3D03                		cmp/ge	r0,r13
(2)  638/FFFFFFFFC00003D4 : 8903                		bt	.hdn_line
(2)  639/FFFFFFFFC00003D6 : 60D3                		mov	r13,r0
(2)  640/FFFFFFFFC00003D8 : 309C                		add	r9,r0
(2)  641/FFFFFFFFC00003DA : 30CC                		add	r12,r0
(2)  642/FFFFFFFFC00003DC : 20A0                		mov.b	r10,@r0
(2)  643/FFFFFFFFC00003DE :                     .hdn_line:
(2)  644/FFFFFFFFC00003DE : 60D3                		mov	r13,r0
(2)  645/FFFFFFFFC00003E0 : 309C                		add	r9,r0
(2)  646/FFFFFFFFC00003E2 : 20A0                		mov.b	r10,@r0
(2)  647/FFFFFFFFC00003E4 :                     .blnkpixl:
(2)  648/FFFFFFFFC00003E4 : 7D01                		add	#1,r13
(2)  649/FFFFFFFFC00003E6 : 356C                		add	r6,r5			; Update X
(2)  650/FFFFFFFFC00003E8 : 4310                		dt	r3
(2)  651/FFFFFFFFC00003EA : 8FE1                		bf/s	.tex2_xloop
(2)  652/FFFFFFFFC00003EC : 378C                		add	r8,r7			; Update Y
(2)  653/FFFFFFFFC00003EE :                     .tex_skip_line:
(2)  654/FFFFFFFFC00003EE : D01A                		mov	#Cach_SprBkup_LB,r0
(2)  655/FFFFFFFFC00003F0 : 6B06                		mov	@r0+,r11
(2)  656/FFFFFFFFC00003F2 : 6A06                		mov	@r0+,r10
(2)  657/FFFFFFFFC00003F4 : 6906                		mov	@r0+,r9
(2)  658/FFFFFFFFC00003F6 : 6806                		mov	@r0+,r8
(2)  659/FFFFFFFFC00003F8 : 6706                		mov	@r0+,r7
(2)  660/FFFFFFFFC00003FA : 6606                		mov	@r0+,r6
(2)  661/FFFFFFFFC00003FC : 6506                		mov	@r0+,r5
(2)  662/FFFFFFFFC00003FE : 6406                		mov	@r0+,r4
(2)  663/FFFFFFFFC0000400 : 6306                		mov	@r0+,r3
(2)  664/FFFFFFFFC0000402 : 6206                		mov	@r0+,r2
(2)  665/FFFFFFFFC0000404 : 6106                		mov	@r0+,r1
(2)  666/FFFFFFFFC0000406 :                     .drwsld_updline_tex:
(2)  667/FFFFFFFFC0000406 : 50B8                		mov	@(plypz_src_xl_dx,r11),r0	; Update DX postions
(2)  668/FFFFFFFFC0000408 : 350C                		add	r0,r5
(2)  669/FFFFFFFFC000040A : 50B9                		mov	@(plypz_src_xr_dx,r11),r0
(2)  670/FFFFFFFFC000040C : 360C                		add	r0,r6
(2)  671/FFFFFFFFC000040E : 50BA                		mov	@(plypz_src_yl_dx,r11),r0
(2)  672/FFFFFFFFC0000410 : 370C                		add	r0,r7
(2)  673/FFFFFFFFC0000412 : 50BB                		mov	@(plypz_src_yr_dx,r11),r0
(2)  674/FFFFFFFFC0000414 : 380C                		add	r0,r8
(2)  675/FFFFFFFFC0000416 : 312C                		add	r2,r1				; Update X postions
(2)  676/FFFFFFFFC0000418 : 4A10                		dt	r10
(2)  677/FFFFFFFFC000041A : 8D02                		bt/s	.drwtex_gonxtpz
(2)  678/FFFFFFFFC000041C : 334C                		add	r4,r3
(2)  679/FFFFFFFFC000041E : AF60                		bra	.drwsld_nxtline_tex
(2)  680/FFFFFFFFC0000420 : 7901                		add	#1,r9
(2)  681/FFFFFFFFC0000422 :                     ; 		xor	r0,r0
(2)  682/FFFFFFFFC0000422 :                     ; 		mov	r0,@(plypz_ytb,r11)
(2)  683/FFFFFFFFC0000422 :                     .drwtex_gonxtpz:
(2)  684/FFFFFFFFC0000422 : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0
(2)  685/FFFFFFFFC0000424 : 6B03                		mov	r0,r11
(2)  686/FFFFFFFFC0000426 : 7B30                		add	#sizeof_plypz,r11		; And set new point
(2)  687/FFFFFFFFC0000428 : 60B3                		mov	r11,r0
(2)  688/FFFFFFFFC000042A : DB0C                		mov	#RAM_Mars_SVdpDrwList_e,r11	; End-of-list?
(2)  689/FFFFFFFFC000042C : 30B3                		cmp/ge	r11,r0
(2)  690/FFFFFFFFC000042E : 8B00                		bf	.reset_rd
(2)  691/FFFFFFFFC0000430 : D00B                		mov	#RAM_Mars_SVdpDrwList,r0
(2)  692/FFFFFFFFC0000432 :                     .reset_rd:
(2)  693/FFFFFFFFC0000432 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  694/FFFFFFFFC0000434 : C516                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece
(2)  695/FFFFFFFFC0000436 : 70FF                		add	#-1,r0
(2)  696/FFFFFFFFC0000438 : C116                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  697/FFFFFFFFC000043A : AF01                		bra	MarsVideo_DrawSuperSpr
(2)  698/FFFFFFFFC000043C : 0009                		nop
(2)  699/FFFFFFFFC000043E :                     		align 4
(2)  700/FFFFFFFFC0000440 :                     .finish_it:
(2)  701/FFFFFFFFC0000440 :                     .drwtask_exit:
(2)  702/FFFFFFFFC0000440 : 000B                		rts
(2)  703/FFFFFFFFC0000442 : 0009                		nop
(2)  704/FFFFFFFFC0000444 :                     		align 4
(2)  705/FFFFFFFFC0000444 : C000 0554 0000 FFFF 		ltorg
                    C000 05C8 C000 0584 
                    2402 0000 C000 059C 
                    2600 CA40 2600 8E40 
                    00E0 0140 FF00 00FF 
                    3FFF                
(2)  706/FFFFFFFFC000046E :                     
(2)  707/FFFFFFFFC000046E :                     ; --------------------------------------------------------
(2)  708/FFFFFFFFC000046E :                     ; MarsVideo_DrawScaled
(2)  709/FFFFFFFFC000046E :                     ;
(2)  710/FFFFFFFFC000046E :                     ; For graphics mode 3: This draws the
(2)  711/FFFFFFFFC000046E :                     ; main image with specific settings
(2)  712/FFFFFFFFC000046E :                     ; --------------------------------------------------------
(2)  713/FFFFFFFFC000046E :                     
(2)  714/FFFFFFFFC000046E :                     	; MAIN scaler
(2)  715/FFFFFFFFC000046E :                     	; r1 - X pos xxxx.0000
(2)  716/FFFFFFFFC000046E :                     	; r2 - Y pos yyyy.0000
(2)  717/FFFFFFFFC000046E :                     	; r3 - X dx  xxxx.0000
(2)  718/FFFFFFFFC000046E :                     	; r4 - Y dx  yyyy.0000
(2)  719/FFFFFFFFC000046E :                     	; r5 - Source WIDTH
(2)  720/FFFFFFFFC000046E :                     	; r6 - Source HEIGHT
(2)  721/FFFFFFFFC000046E :                     	; r7 - Source DATA
(2)  722/FFFFFFFFC000046E :                     	; r8 - Output
(2)  723/FFFFFFFFC000046E :                     	; r9 - Loop: Line width / 2
(2)  724/FFFFFFFFC000046E :                     	; r10 - Loop: Number of lines
(2)  725/FFFFFFFFC000046E :                     		align 4
(2)  726/FFFFFFFFC0000470 :                     MarsVideo_DrawScaled:
(2)  727/FFFFFFFFC0000470 :                     ; 		mov	#RAM_Mars_BgBuffScale_M,r14
(2)  728/FFFFFFFFC0000470 : DE33                		mov	#RAM_Mars_DreqRead+Dreq_ScrnBuff,r14
(2)  729/FFFFFFFFC0000472 : DD34                		mov	#_framebuffer+$200,r13	; r13 - Output
(2)  730/FFFFFFFFC0000474 : 67E6                		mov	@r14+,r7		; r7 - Input
(2)  731/FFFFFFFFC0000476 : 61E6                		mov	@r14+,r1		; r1 - X pos (2 pixels wide)
(2)  732/FFFFFFFFC0000478 : 62E6                		mov	@r14+,r2		; r2 - Y pos
(2)  733/FFFFFFFFC000047A : 65E6                		mov	@r14+,r5		; r5 - X width
(2)  734/FFFFFFFFC000047C : 66E6                		mov	@r14+,r6		; r6 - Y height
(2)  735/FFFFFFFFC000047E : 63E6                		mov	@r14+,r3		; r3 - DX
(2)  736/FFFFFFFFC0000480 : 64E6                		mov	@r14+,r4		; r4 - DY
(2)  737/FFFFFFFFC0000482 : 69E6                		mov	@r14+,r9		; r9 - Mode
(2)  738/FFFFFFFFC0000484 : D030                		mov	#TH,r0			; Force source as Cache-Thru
(2)  739/FFFFFFFFC0000486 : 270B                		or	r0,r7
(2)  740/FFFFFFFFC0000488 : 4528                		shll16	r5
(2)  741/FFFFFFFFC000048A : 4628                		shll16	r6
(2)  742/FFFFFFFFC000048C : 351D                		dmuls	r1,r5			; Topleft X/Y calc
(2)  743/FFFFFFFFC000048E : 000A                		sts	mach,r0
(2)  744/FFFFFFFFC0000490 : 011A                		sts	macl,r1
(2)  745/FFFFFFFFC0000492 : 210D                		xtrct	r0,r1
(2)  746/FFFFFFFFC0000494 : 362D                		dmuls	r2,r6
(2)  747/FFFFFFFFC0000496 : 000A                		sts	mach,r0
(2)  748/FFFFFFFFC0000498 : 021A                		sts	macl,r2
(2)  749/FFFFFFFFC000049A : 220D                		xtrct	r0,r2
(2)  750/FFFFFFFFC000049C : 490A                		lds	r9,mach			; mach - mode number
(2)  751/FFFFFFFFC000049E : 9955                		mov	#320/2,r9		; r9  - X loop
(2)  752/FFFFFFFFC00004A0 : 9A55                		mov	#240,r10		; r10 - Y loop
(2)  753/FFFFFFFFC00004A2 :                     
(2)  754/FFFFFFFFC00004A2 :                     	; X check
(2)  755/FFFFFFFFC00004A2 : 000A                		sts	mach,r0
(2)  756/FFFFFFFFC00004A4 : 2008                		tst	r0,r0
(2)  757/FFFFFFFFC00004A6 : 8903                		bt	.x_cont
(2)  758/FFFFFFFFC00004A8 :                     .x_fix:
(2)  759/FFFFFFFFC00004A8 : 4111                		cmp/pz	r1
(2)  760/FFFFFFFFC00004AA : 8901                		bt	.x_cont
(2)  761/FFFFFFFFC00004AC : AFFC                		bra	.x_fix
(2)  762/FFFFFFFFC00004AE : 315C                		add	r5,r1
(2)  763/FFFFFFFFC00004B0 :                     .x_cont:
(2)  764/FFFFFFFFC00004B0 :                     
(2)  765/FFFFFFFFC00004B0 :                     
(2)  766/FFFFFFFFC00004B0 :                     ; *** LOOP
(2)  767/FFFFFFFFC00004B0 :                     .y_loop:
(2)  768/FFFFFFFFC00004B0 : 000A                		sts	mach,r0
(2)  769/FFFFFFFFC00004B2 : 2008                		tst	r0,r0
(2)  770/FFFFFFFFC00004B4 : 8907                		bt	.y_high
(2)  771/FFFFFFFFC00004B6 : 4211                		cmp/pz	r2
(2)  772/FFFFFFFFC00004B8 : 8901                		bt	.xy_set
(2)  773/FFFFFFFFC00004BA : AFF9                		bra	.y_loop
(2)  774/FFFFFFFFC00004BC : 326C                		add	r6,r2
(2)  775/FFFFFFFFC00004BE :                     .xy_set:
(2)  776/FFFFFFFFC00004BE : 3263                		cmp/ge	r6,r2
(2)  777/FFFFFFFFC00004C0 : 8B01                		bf	.y_high
(2)  778/FFFFFFFFC00004C2 : AFFC                		bra	.xy_set
(2)  779/FFFFFFFFC00004C4 : 3268                		sub	r6,r2
(2)  780/FFFFFFFFC00004C6 :                     .y_high:
(2)  781/FFFFFFFFC00004C6 : 6B13                		mov	r1,r11
(2)  782/FFFFFFFFC00004C8 : 4B21                		shar	r11		; /2
(2)  783/FFFFFFFFC00004CA : 6023                		mov	r2,r0
(2)  784/FFFFFFFFC00004CC : 4029                		shlr16	r0
(2)  785/FFFFFFFFC00004CE : 6853                		mov	r5,r8
(2)  786/FFFFFFFFC00004D0 : 4829                		shlr16	r8
(2)  787/FFFFFFFFC00004D2 : 208F                		muls	r8,r0
(2)  788/FFFFFFFFC00004D4 : 0C1A                		sts	macl,r12
(2)  789/FFFFFFFFC00004D6 : 3C7C                		add	r7,r12
(2)  790/FFFFFFFFC00004D8 : 68D3                		mov	r13,r8
(2)  791/FFFFFFFFC00004DA : 6E93                		mov	r9,r14
(2)  792/FFFFFFFFC00004DC :                     .x_loop:
(2)  793/FFFFFFFFC00004DC :                     	; 00 - single scale
(2)  794/FFFFFFFFC00004DC : 000A                		sts	mach,r0
(2)  795/FFFFFFFFC00004DE : 2008                		tst	r0,r0
(2)  796/FFFFFFFFC00004E0 : 8B10                		bf	.x_rept
(2)  797/FFFFFFFFC00004E2 : 4B11                		cmp/pz	r11
(2)  798/FFFFFFFFC00004E4 : 8901                		bt	.xwpos
(2)  799/FFFFFFFFC00004E6 : A01E                		bra	.x_next
(2)  800/FFFFFFFFC00004E8 : E000                		mov	#0,r0
(2)  801/FFFFFFFFC00004EA :                     .xwpos:
(2)  802/FFFFFFFFC00004EA : 6053                		mov	r5,r0
(2)  803/FFFFFFFFC00004EC : 4021                		shar	r0		; /2
(2)  804/FFFFFFFFC00004EE : 3B03                		cmp/ge	r0,r11
(2)  805/FFFFFFFFC00004F0 : 8B01                		bf	.x_go
(2)  806/FFFFFFFFC00004F2 : A018                		bra	.x_next
(2)  807/FFFFFFFFC00004F4 : E000                		mov	#0,r0
(2)  808/FFFFFFFFC00004F6 :                     .x_go:
(2)  809/FFFFFFFFC00004F6 : E000                		mov	#0,r0
(2)  810/FFFFFFFFC00004F8 : 4211                		cmp/pz	r2		; <-- TODO: checar bien esto
(2)  811/FFFFFFFFC00004FA : 8B14                		bf	.x_next
(2)  812/FFFFFFFFC00004FC : 3263                		cmp/ge	r6,r2
(2)  813/FFFFFFFFC00004FE : 8912                		bt	.x_next
(2)  814/FFFFFFFFC0000500 : A00C                		bra	.x_high
(2)  815/FFFFFFFFC0000502 : 0009                		nop
(2)  816/FFFFFFFFC0000504 :                     .x_rept:
(2)  817/FFFFFFFFC0000504 :                     	; 01 - repeat check
(2)  818/FFFFFFFFC0000504 : 6053                		mov	r5,r0
(2)  819/FFFFFFFFC0000506 : 4021                		shar	r0		; /2
(2)  820/FFFFFFFFC0000508 : 4B15                		cmp/pl	r11
(2)  821/FFFFFFFFC000050A : 8903                		bt	.xwpos2
(2)  822/FFFFFFFFC000050C : 3B03                .x_loopm:	cmp/ge	r0,r11
(2)  823/FFFFFFFFC000050E : 8905                		bt	.x_high
(2)  824/FFFFFFFFC0000510 : AFFC                		bra	.x_loopm
(2)  825/FFFFFFFFC0000512 : 3B0C                		add	r0,r11
(2)  826/FFFFFFFFC0000514 :                     .xwpos2:
(2)  827/FFFFFFFFC0000514 : 3B03                		cmp/ge	r0,r11
(2)  828/FFFFFFFFC0000516 : 8B01                		bf	.x_high
(2)  829/FFFFFFFFC0000518 : AFFC                		bra	.xwpos2
(2)  830/FFFFFFFFC000051A : 3B08                		sub	r0,r11
(2)  831/FFFFFFFFC000051C :                     .x_high:
(2)  832/FFFFFFFFC000051C : 60B3                		mov	r11,r0
(2)  833/FFFFFFFFC000051E : 4029                		shlr16	r0
(2)  834/FFFFFFFFC0000520 : 600F                		exts	r0,r0
(2)  835/FFFFFFFFC0000522 : 4000                		shll	r0
(2)  836/FFFFFFFFC0000524 : 00CD                		mov.w	@(r12,r0),r0
(2)  837/FFFFFFFFC0000526 :                     .x_next:
(2)  838/FFFFFFFFC0000526 : 3B3C                		add	r3,r11
(2)  839/FFFFFFFFC0000528 : 2801                		mov.w	r0,@r8
(2)  840/FFFFFFFFC000052A : 4E10                		dt	r14
(2)  841/FFFFFFFFC000052C : 8FD6                		bf/s	.x_loop
(2)  842/FFFFFFFFC000052E : 7802                		add	#2,r8
(2)  843/FFFFFFFFC0000530 : 324C                		add	r4,r2
(2)  844/FFFFFFFFC0000532 : 900D                		mov	#320,r0
(2)  845/FFFFFFFFC0000534 : 4A10                		dt	r10
(2)  846/FFFFFFFFC0000536 : 8FBB                		bf/s	.y_loop
(2)  847/FFFFFFFFC0000538 : 3D0C                		add	r0,r13
(2)  848/FFFFFFFFC000053A : 000B                		rts
(2)  849/FFFFFFFFC000053C : 0009                		nop
(2)  850/FFFFFFFFC000053E :                     		align 4
(2)  851/FFFFFFFFC0000540 : 2600 8530 2400 0200 		ltorg
                    2000 0000 00A0 00F0 
                    0140                
(2)  852/FFFFFFFFC0000552 :                     
(2)  853/FFFFFFFFC0000552 :                     ; ------------------------------------------------
(2)  854/FFFFFFFFC0000552 :                     
(2)  855/FFFFFFFFC0000552 :                     		align 4
(2)  856/FFFFFFFFC0000554 :                     Cach_PzCopy	ds.b sizeof_plypz
(2)  857/FFFFFFFFC0000584 :                     Cach_Intrl_W	ds.l 1		; *** KEEP THIS IN THIS ORDER
(2)  858/FFFFFFFFC0000588 :                     Cach_Intrl_H	ds.l 1
(2)  859/FFFFFFFFC000058C :                     Cach_FbPos_Y	ds.l 1
(2)  860/FFFFFFFFC0000590 :                     Cach_FbPos	ds.l 1
(2)  861/FFFFFFFFC0000594 :                     Cach_FbData	ds.l 1
(2)  862/FFFFFFFFC0000598 :                     Cach_Intrl_Size	ds.l 1		; ***
(2)  863/FFFFFFFFC000059C :                     
(2)  864/FFFFFFFFC000059C :                     Cach_SprBkup_LB	ds.l 11
(2)  865/FFFFFFFFC00005C8 :                     Cach_SprBkup_S	ds.l 0		; <-- Reads backwards
(2)  866/FFFFFFFFC00005C8 :                     Cach_XHead_L	ds.l 1		; Left draw beam
(2)  867/FFFFFFFFC00005CC :                     Cach_XHead_R	ds.l 1		; Right draw beam
(2)  868/FFFFFFFFC00005D0 :                     Cach_YHead_U	ds.l 1		; Top draw beam
(2)  869/FFFFFFFFC00005D4 :                     Cach_YHead_D	ds.l 1		; Bottom draw beam
(2)  870/FFFFFFFFC00005D8 :                     Cach_BgFbPos_V	ds.l 1		; Framebuffer Y DIRECT position (then multiply with internal WIDTH)
(2)  871/FFFFFFFFC00005DC :                     Cach_BgFbPos_H	ds.l 1		; Framebuffer TOPLEFT position
(2)  872/FFFFFFFFC00005E0 :                     
(2)  873/FFFFFFFFC00005E0 :                     ; ------------------------------------------------
(2)  874/ 6001E44 :                     .end:		phase CACHE_MSTR_SCRL+.end&$1FFF
(2)  875/ 6001E44 :                     		align 4
(2)  876/ 6001E44 :                     CACHE_MSTR_SCRL_E:
(2)  880/ 6001E44 :                     
(1) 2235/ 6001E44 :                     		include "system/mars/cache/cache_m_plgn.asm"
(2)    1/ 6001E44 :                     ; ====================================================================
(2)    2/ 6001E44 :                     ; ----------------------------------------------------------------
(2)    3/ 6001E44 :                     ; CACHE code for MASTER CPU
(2)    4/ 6001E44 :                     ;
(2)    5/ 6001E44 :                     ; LIMIT: $800 bytes
(2)    6/ 6001E44 :                     ; ----------------------------------------------------------------
(2)    7/ 6001E44 :                     
(2)    8/ 6001E44 :                     		align 4
(2)    9/ 6001E44 :                     CACHE_MSTR_PLGN:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; Watchdog interrupt
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 : 90BC                		mov	#$F0,r0
(2)   18/FFFFFFFFC0000002 : 400E                		ldc	r0,sr
(2)   19/FFFFFFFFC0000004 : 91BB                		mov	#_FRT,r1
(2)   20/FFFFFFFFC0000006 : 8417                		mov.b	@(7,r1),r0
(2)   21/FFFFFFFFC0000008 : CA02                		xor	#2,r0
(2)   22/FFFFFFFFC000000A : 8017                		mov.b	r0,@(7,r1)
(2)   23/FFFFFFFFC000000C :                     
(2)   24/FFFFFFFFC000000C :                     ; 		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2)   25/FFFFFFFFC000000C :                     ; 		mov	#MAX_SVDP_PZ,r1
(2)   26/FFFFFFFFC000000C :                     ; 		cmp/ge	r1,r0
(2)   27/FFFFFFFFC000000C :                     ; 		bt	.wdg_pzfull
(2)   28/FFFFFFFFC000000C :                     
(2)   29/FFFFFFFFC000000C : C517                		mov.w	@(marsGbl_CntrRdPlgn,gbr),r0
(2)   30/FFFFFFFFC000000E : 8800                		cmp/eq	#0,r0
(2)   31/FFFFFFFFC0000010 : 8B04                		bf	.has_plgn
(2)   32/FFFFFFFFC0000012 : A0BA                		bra	wdg_finish
(2)   33/FFFFFFFFC0000014 : 0009                		nop
(2)   34/FFFFFFFFC0000016 :                     		align 4
(2)   35/FFFFFFFFC0000018 :                     .wdg_pzfull:
(2)   36/FFFFFFFFC0000018 : A097                		bra	wdg_pzfull
(2)   37/FFFFFFFFC000001A : 0009                		nop
(2)   38/FFFFFFFFC000001C :                     		align 4
(2)   39/FFFFFFFFC000001C :                     .has_plgn:
(2)   40/FFFFFFFFC000001C : C517                		mov.w	@(marsGbl_CntrRdPlgn,gbr),r0
(2)   41/FFFFFFFFC000001E : 4010                		dt	r0
(2)   42/FFFFFFFFC0000020 : C117                		mov.w	r0,@(marsGbl_CntrRdPlgn,gbr)
(2)   43/FFFFFFFFC0000022 : C605                		mov	@(marsGbl_CurrRdPlgn,gbr),r0
(2)   44/FFFFFFFFC0000024 : 5E01                		mov	@(4,r0),r14
(2)   45/FFFFFFFFC0000026 : D04D                		mov	#Cach_Bkup_S,r0
(2)   46/FFFFFFFFC0000028 : 2026                		mov	r2,@-r0
(2)   47/FFFFFFFFC000002A : 2036                		mov	r3,@-r0
(2)   48/FFFFFFFFC000002C : 2046                		mov	r4,@-r0
(2)   49/FFFFFFFFC000002E : 2056                		mov	r5,@-r0
(2)   50/FFFFFFFFC0000030 : 2066                		mov	r6,@-r0
(2)   51/FFFFFFFFC0000032 : 2076                		mov	r7,@-r0
(2)   52/FFFFFFFFC0000034 : 2086                		mov	r8,@-r0
(2)   53/FFFFFFFFC0000036 : 2096                		mov	r9,@-r0
(2)   54/FFFFFFFFC0000038 : 20A6                		mov	r10,@-r0
(2)   55/FFFFFFFFC000003A : 20B6                		mov	r11,@-r0
(2)   56/FFFFFFFFC000003C : 20C6                		mov	r12,@-r0
(2)   57/FFFFFFFFC000003E : 20D6                		mov	r13,@-r0
(2)   58/FFFFFFFFC0000040 : 20E6                		mov	r14,@-r0
(2)   59/FFFFFFFFC0000042 : 4012                		sts	macl,@-r0
(2)   60/FFFFFFFFC0000044 : 4002                		sts	mach,@-r0
(2)   61/FFFFFFFFC0000046 : 4022                		sts	pr,@-r0
(2)   62/FFFFFFFFC0000048 : DD45                		mov	#Cach_DDA_Last,r13		; r13 - DDA last point
(2)   63/FFFFFFFFC000004A : DC46                		mov	#Cach_DDA_Top,r12		; r12 - DDA first point
(2)   64/FFFFFFFFC000004C : 50E0                		mov	@(polygn_type,r14),r0		; Read type settings
(2)   65/FFFFFFFFC000004E : 4029                		shlr16	r0
(2)   66/FFFFFFFFC0000050 : 4019                		shlr8	r0
(2)   67/FFFFFFFFC0000052 : C840                		tst	#PLGN_TRI,r0			; PLGN_TRI set?
(2)   68/FFFFFFFFC0000054 : 8B00                		bf	.tringl
(2)   69/FFFFFFFFC0000056 : 7D08                		add	#8,r13				; If quad: add 8
(2)   70/FFFFFFFFC0000058 :                     .tringl:
(2)   71/FFFFFFFFC0000058 : 61E3                		mov	r14,r1
(2)   72/FFFFFFFFC000005A : 62C3                		mov	r12,r2
(2)   73/FFFFFFFFC000005C : D342                		mov	#Cach_DDA_Src,r3
(2)   74/FFFFFFFFC000005E : 7108                		add	#polygn_points,r1
(2)   75/FFFFFFFFC0000060 :                     
(2)   76/FFFFFFFFC0000060 :                     	; ----------------------------------------
(2)   77/FFFFFFFFC0000060 :                     	; Polygon points
(2)   78/FFFFFFFFC0000060 :                     	; ----------------------------------------
(2)   79/FFFFFFFFC0000060 :                     
(2)   80/FFFFFFFFC0000060 :                     	; TODO: put custom WIDTH/HEIGHT halfs here
(2)   81/FFFFFFFFC0000060 : E804                		mov	#4,r8			; Copy polygon points Cache's DDA
(2)   82/FFFFFFFFC0000062 : 968D                		mov	#SCREEN_WIDTH/2,r6
(2)   83/FFFFFFFFC0000064 : E770                		mov	#SCREEN_HEIGHT/2,r7
(2)   84/FFFFFFFFC0000066 :                     .setpnts:
(2)   85/FFFFFFFFC0000066 : 6416                		mov	@r1+,r4			; Get X
(2)   86/FFFFFFFFC0000068 : 6516                		mov	@r1+,r5			; Get Y
(2)   87/FFFFFFFFC000006A : 346C                		add	r6,r4			; X + width
(2)   88/FFFFFFFFC000006C : 357C                		add	r7,r5			; Y + height
(2)   89/FFFFFFFFC000006E : 2242                		mov	r4,@r2
(2)   90/FFFFFFFFC0000070 : 1251                		mov	r5,@(4,r2)
(2)   91/FFFFFFFFC0000072 : 4810                		dt	r8
(2)   92/FFFFFFFFC0000074 : 8FF7                		bf/s	.setpnts
(2)   93/FFFFFFFFC0000076 : 7208                		add	#8,r2
(2)   94/FFFFFFFFC0000078 : E804                		mov	#4,r8			; Copy texture source points to Cache
(2)   95/FFFFFFFFC000007A :                     .src_pnts:
(2)   96/FFFFFFFFC000007A : 6415                		mov.w	@r1+,r4
(2)   97/FFFFFFFFC000007C : 6515                		mov.w	@r1+,r5
(2)   98/FFFFFFFFC000007E : 2342                		mov	r4,@r3
(2)   99/FFFFFFFFC0000080 : 1351                		mov	r5,@(4,r3)
(2)  100/FFFFFFFFC0000082 : 4810                		dt	r8
(2)  101/FFFFFFFFC0000084 : 8FF9                		bf/s	.src_pnts
(2)  102/FFFFFFFFC0000086 : 7308                		add	#8,r3
(2)  103/FFFFFFFFC0000088 :                     
(2)  104/FFFFFFFFC0000088 :                     	; Search for the lowest Y and highest Y
(2)  105/FFFFFFFFC0000088 :                     	; r10 - Top Y
(2)  106/FFFFFFFFC0000088 :                     	; r11 - Bottom Y
(2)  107/FFFFFFFFC0000088 :                     .start_math:
(2)  108/FFFFFFFFC0000088 : E903                		mov	#3,r9
(2)  109/FFFFFFFFC000008A : C840                		tst	#PLGN_TRI,r0		; PLGN_TRI set?
(2)  110/FFFFFFFFC000008C : 8B00                		bf	.ytringl
(2)  111/FFFFFFFFC000008E : 7901                		add	#1,r9
(2)  112/FFFFFFFFC0000090 :                     .ytringl:
(2)  113/FFFFFFFFC0000090 : DA36                		mov	#$7FFFFFFF,r10
(2)  114/FFFFFFFFC0000092 : EBFF                		mov	#-1,r11			; $FFFFFFFF
(2)  115/FFFFFFFFC0000094 : 67C3                		mov 	r12,r7
(2)  116/FFFFFFFFC0000096 : 68C3                		mov	r12,r8
(2)  117/FFFFFFFFC0000098 :                     .find_top:
(2)  118/FFFFFFFFC0000098 : 5071                		mov	@(4,r7),r0
(2)  119/FFFFFFFFC000009A : 30B7                		cmp/gt	r11,r0
(2)  120/FFFFFFFFC000009C : 8B00                		bf	.is_low
(2)  121/FFFFFFFFC000009E : 6B03                		mov 	r0,r11
(2)  122/FFFFFFFFC00000A0 :                     .is_low:
(2)  123/FFFFFFFFC00000A0 : 5081                		mov	@(4,r8),r0
(2)  124/FFFFFFFFC00000A2 : 30A7                		cmp/gt	r10,r0
(2)  125/FFFFFFFFC00000A4 : 8901                		bt	.is_high
(2)  126/FFFFFFFFC00000A6 : 6A03                		mov 	r0,r10
(2)  127/FFFFFFFFC00000A8 : 6183                		mov	r8,r1
(2)  128/FFFFFFFFC00000AA :                     .is_high:
(2)  129/FFFFFFFFC00000AA : 7708                		add 	#8,r7
(2)  130/FFFFFFFFC00000AC : 4910                		dt	r9
(2)  131/FFFFFFFFC00000AE : 8FF3                		bf/s	.find_top
(2)  132/FFFFFFFFC00000B0 : 7808                		add	#8,r8
(2)  133/FFFFFFFFC00000B2 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2)  134/FFFFFFFFC00000B4 : 8935                		bt	.exit
(2)  135/FFFFFFFFC00000B6 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2)  136/FFFFFFFFC00000B8 : 8B33                		bf	.exit
(2)  137/FFFFFFFFC00000BA : 9062                		mov	#SCREEN_HEIGHT,r0	; Top > 224?
(2)  138/FFFFFFFFC00000BC : 3A03                		cmp/ge	r0,r10
(2)  139/FFFFFFFFC00000BE : 8930                		bt	.exit
(2)  140/FFFFFFFFC00000C0 :                     
(2)  141/FFFFFFFFC00000C0 :                     	; r2 - Left DDA READ pointer
(2)  142/FFFFFFFFC00000C0 :                     	; r3 - Right DDA READ pointer
(2)  143/FFFFFFFFC00000C0 :                     	; r4 - Left X
(2)  144/FFFFFFFFC00000C0 :                     	; r5 - Left DX
(2)  145/FFFFFFFFC00000C0 :                     	; r6 - Right X
(2)  146/FFFFFFFFC00000C0 :                     	; r7 - Right DX
(2)  147/FFFFFFFFC00000C0 :                     	; r8 - Left width
(2)  148/FFFFFFFFC00000C0 :                     	; r9 - Right width
(2)  149/FFFFFFFFC00000C0 :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  150/FFFFFFFFC00000C0 :                     	; r11 - Bottom Y
(2)  151/FFFFFFFFC00000C0 :                     	; r12 - First DST point
(2)  152/FFFFFFFFC00000C0 :                     	; r13 - Last DST point
(2)  153/FFFFFFFFC00000C0 : 6213                		mov	r1,r2				; r2 - X left to process
(2)  154/FFFFFFFFC00000C2 : 6313                		mov	r1,r3				; r3 - X right to process
(2)  155/FFFFFFFFC00000C4 : B068                		bsr	set_left
(2)  156/FFFFFFFFC00000C6 : 0009                		nop
(2)  157/FFFFFFFFC00000C8 : B0A6                		bsr	set_right
(2)  158/FFFFFFFFC00000CA : 0009                		nop
(2)  159/FFFFFFFFC00000CC :                     .next_pz:
(2)  160/FFFFFFFFC00000CC : 9059                		mov	#SCREEN_HEIGHT,r0		; Current Y > 224?
(2)  161/FFFFFFFFC00000CE : 3A07                		cmp/gt	r0,r10
(2)  162/FFFFFFFFC00000D0 : 8927                		bt	.exit
(2)  163/FFFFFFFFC00000D2 : 3AB3                		cmp/ge	r11,r10				; Y top => Y bottom?
(2)  164/FFFFFFFFC00000D4 : 8925                		bt	.exit
(2)  165/FFFFFFFFC00000D6 : C601                		mov	@(marsGbl_PlyPzList_W,gbr),r0	; r1 - Current piece to WRITE
(2)  166/FFFFFFFFC00000D8 : 6103                		mov	r0,r1
(2)  167/FFFFFFFFC00000DA :                     ; 		mov	#RAM_Mars_SVdpDrwList_e,r0	; pointer reached end of the list?
(2)  168/FFFFFFFFC00000DA :                     ; 		cmp/ge	r0,r1
(2)  169/FFFFFFFFC00000DA :                     ; 		bf	.dontreset
(2)  170/FFFFFFFFC00000DA :                     ; 		mov	#RAM_Mars_SVdpDrwList,r0	; Return WRITE pointer to the top of the list
(2)  171/FFFFFFFFC00000DA :                     ; 		mov	r0,r1
(2)  172/FFFFFFFFC00000DA :                     ; 		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  173/FFFFFFFFC00000DA :                     ; .dontreset:
(2)  174/FFFFFFFFC00000DA : 5821                		mov	@(4,r2),r8
(2)  175/FFFFFFFFC00000DC : 5931                		mov	@(4,r3),r9
(2)  176/FFFFFFFFC00000DE : 38A8                		sub	r10,r8
(2)  177/FFFFFFFFC00000E0 : 39A8                		sub	r10,r9
(2)  178/FFFFFFFFC00000E2 : 6083                		mov	r8,r0
(2)  179/FFFFFFFFC00000E4 : 3987                		cmp/gt	r8,r9
(2)  180/FFFFFFFFC00000E6 : 8900                		bt	.lefth
(2)  181/FFFFFFFFC00000E8 : 6093                		mov	r9,r0
(2)  182/FFFFFFFFC00000EA :                     .lefth:
(2)  183/FFFFFFFFC00000EA : D021                		mov	#Cach_Bkup_SPZ,r0
(2)  184/FFFFFFFFC00000EC : 2026                		mov	r2,@-r0
(2)  185/FFFFFFFFC00000EE : 2036                		mov	r3,@-r0
(2)  186/FFFFFFFFC00000F0 : 2056                		mov	r5,@-r0
(2)  187/FFFFFFFFC00000F2 : 2076                		mov	r7,@-r0
(2)  188/FFFFFFFFC00000F4 : 2086                		mov	r8,@-r0
(2)  189/FFFFFFFFC00000F6 : 2096                		mov	r9,@-r0
(2)  190/FFFFFFFFC00000F8 : 20B6                		mov	r11,@-r0
(2)  191/FFFFFFFFC00000FA : B0CD                		bsr	put_piece
(2)  192/FFFFFFFFC00000FC : 0009                		nop
(2)  193/FFFFFFFFC00000FE : D01D                		mov	#Cach_Bkup_LPZ,r0
(2)  194/FFFFFFFFC0000100 : 6B06                		mov	@r0+,r11
(2)  195/FFFFFFFFC0000102 : 6906                		mov	@r0+,r9
(2)  196/FFFFFFFFC0000104 : 6806                		mov	@r0+,r8
(2)  197/FFFFFFFFC0000106 : 6706                		mov	@r0+,r7
(2)  198/FFFFFFFFC0000108 : 6506                		mov	@r0+,r5
(2)  199/FFFFFFFFC000010A : 6306                		mov	@r0+,r3
(2)  200/FFFFFFFFC000010C : 6206                		mov	@r0+,r2
(2)  201/FFFFFFFFC000010E :                     	; X direction update
(2)  202/FFFFFFFFC000010E : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2)  203/FFFFFFFFC0000110 : 8B03                		bf	.lefth2
(2)  204/FFFFFFFFC0000112 : B081                		bsr	set_right
(2)  205/FFFFFFFFC0000114 : 0009                		nop
(2)  206/FFFFFFFFC0000116 : AFD9                		bra	.next_pz
(2)  207/FFFFFFFFC0000118 : 0009                		nop
(2)  208/FFFFFFFFC000011A :                     .lefth2:
(2)  209/FFFFFFFFC000011A : B03D                		bsr	set_left
(2)  210/FFFFFFFFC000011C : 0009                		nop
(2)  211/FFFFFFFFC000011E : AFD5                		bra	.next_pz
(2)  212/FFFFFFFFC0000120 : 0009                		nop
(2)  213/FFFFFFFFC0000122 :                     .exit:
(2)  214/FFFFFFFFC0000122 : D015                		mov	#Cach_Bkup_LT,r0
(2)  215/FFFFFFFFC0000124 : 4026                		lds	@r0+,pr
(2)  216/FFFFFFFFC0000126 : 4006                		lds	@r0+,mach
(2)  217/FFFFFFFFC0000128 : 4016                		lds	@r0+,macl
(2)  218/FFFFFFFFC000012A : 6E06                		mov	@r0+,r14
(2)  219/FFFFFFFFC000012C : 6D06                		mov	@r0+,r13
(2)  220/FFFFFFFFC000012E : 6C06                		mov	@r0+,r12
(2)  221/FFFFFFFFC0000130 : 6B06                		mov	@r0+,r11
(2)  222/FFFFFFFFC0000132 : 6A06                		mov	@r0+,r10
(2)  223/FFFFFFFFC0000134 : 6906                		mov	@r0+,r9
(2)  224/FFFFFFFFC0000136 : 6806                		mov	@r0+,r8
(2)  225/FFFFFFFFC0000138 : 6706                		mov	@r0+,r7
(2)  226/FFFFFFFFC000013A : 6606                		mov	@r0+,r6
(2)  227/FFFFFFFFC000013C : 6506                		mov	@r0+,r5
(2)  228/FFFFFFFFC000013E : 6406                		mov	@r0+,r4
(2)  229/FFFFFFFFC0000140 : 6306                		mov	@r0+,r3
(2)  230/FFFFFFFFC0000142 : 6206                		mov	@r0+,r2
(2)  231/FFFFFFFFC0000144 : C605                		mov	@(marsGbl_CurrRdPlgn,gbr),r0
(2)  232/FFFFFFFFC0000146 : 7008                		add	#8,r0
(2)  233/FFFFFFFFC0000148 : C205                		mov	r0,@(marsGbl_CurrRdPlgn,gbr)
(2)  234/FFFFFFFFC000014A :                     ; wdm_next:
(2)  235/FFFFFFFFC000014A :                     
(2)  236/FFFFFFFFC000014A :                     wdg_pzfull:
(2)  237/FFFFFFFFC000014A : 911B                		mov.l   #$FFFFFE80,r1
(2)  238/FFFFFFFFC000014C : 901B                		mov.w   #$A518,r0		; OFF
(2)  239/FFFFFFFFC000014E : 2101                		mov.w   r0,@r1
(2)  240/FFFFFFFFC0000150 : CB20                		or      #$20,r0			; ON
(2)  241/FFFFFFFFC0000152 : 2101                		mov.w   r0,@r1
(2)  242/FFFFFFFFC0000154 : 9018                		mov.w   #$5A20,r0		; Timer for the next WD
(2)  243/FFFFFFFFC0000156 : 2101                		mov.w   r0,@r1
(2)  244/FFFFFFFFC0000158 : 000B                		rts
(2)  245/FFFFFFFFC000015A : 0009                		nop
(2)  246/FFFFFFFFC000015C :                     		align 4
(2)  247/FFFFFFFFC000015C : C000 07A4 C000 0714 		ltorg
                    C000 0704 C000 0724 
                    7FFF FFFF C000 07C0 
                    C000 07A4 C000 0764 
                    00F0 FE10 00A0 00E0 
                    FE80 A518 5A20      
(2)  248/FFFFFFFFC000018A :                     wdg_finish:
(2)  249/FFFFFFFFC000018A :                     ; 		xor	r0,r0
(2)  250/FFFFFFFFC000018A :                     ; 		mov.w	r0,@(marsGbl_WdgMode,gbr)
(2)  251/FFFFFFFFC000018A :                     ; 		add	#1,r0
(2)  252/FFFFFFFFC000018A : E001                		mov	#1,r0
(2)  253/FFFFFFFFC000018C : C114                		mov.w	r0,@(marsGbl_WdgStatus,gbr)
(2)  254/FFFFFFFFC000018E : 91EF                		mov	#$FFFFFE80,r1			; Stop watchdog
(2)  255/FFFFFFFFC0000190 : 90EF                		mov.w   #$A518,r0
(2)  256/FFFFFFFFC0000192 : 2101                		mov.w   r0,@r1
(2)  257/FFFFFFFFC0000194 : 000B                		rts
(2)  258/FFFFFFFFC0000196 : 0009                		nop
(2)  259/FFFFFFFFC0000198 :                     		align 4
(2)  260/FFFFFFFFC0000198 :                     
(2)  261/FFFFFFFFC0000198 :                     ; --------------------------------------------------------
(2)  262/FFFFFFFFC0000198 :                     
(2)  263/FFFFFFFFC0000198 :                     		align 4
(2)  264/FFFFFFFFC0000198 :                     set_left:
(2)  265/FFFFFFFFC0000198 : 6823                		mov	r2,r8			; Get a copy of Xleft pointer
(2)  266/FFFFFFFFC000019A : 7820                		add	#$20,r8			; To read Texture SRC points
(2)  267/FFFFFFFFC000019C : 6482                		mov	@r8,r4
(2)  268/FFFFFFFFC000019E : 5581                		mov	@(4,r8),r5
(2)  269/FFFFFFFFC00001A0 : D86B                		mov	#Cach_DDA_Src_L,r8
(2)  270/FFFFFFFFC00001A2 : 6043                		mov	r4,r0
(2)  271/FFFFFFFFC00001A4 : 4028                		shll16	r0
(2)  272/FFFFFFFFC00001A6 : 2802                		mov	r0,@r8
(2)  273/FFFFFFFFC00001A8 : 6053                		mov	r5,r0
(2)  274/FFFFFFFFC00001AA : 4028                		shll16	r0
(2)  275/FFFFFFFFC00001AC : 1802                		mov	r0,@(8,r8)
(2)  276/FFFFFFFFC00001AE : 6122                		mov	@r2,r1
(2)  277/FFFFFFFFC00001B0 : 5821                		mov	@(4,r2),r8
(2)  278/FFFFFFFFC00001B2 : 7208                		add	#8,r2
(2)  279/FFFFFFFFC00001B4 : 32D7                		cmp/gt	r13,r2
(2)  280/FFFFFFFFC00001B6 : 8B00                		bf	.lft_ok
(2)  281/FFFFFFFFC00001B8 : 62C3                		mov 	r12,r2
(2)  282/FFFFFFFFC00001BA :                     .lft_ok:
(2)  283/FFFFFFFFC00001BA : 5021                		mov	@(4,r2),r0
(2)  284/FFFFFFFFC00001BC : 3088                		sub	r8,r0
(2)  285/FFFFFFFFC00001BE : 8800                		cmp/eq	#0,r0
(2)  286/FFFFFFFFC00001C0 : 89EA                		bt	set_left
(2)  287/FFFFFFFFC00001C2 : 4011                		cmp/pz	r0
(2)  288/FFFFFFFFC00001C4 : 8B25                		bf	.lft_skip
(2)  289/FFFFFFFFC00001C6 :                     
(2)  290/FFFFFFFFC00001C6 : 400A                		lds	r0,mach
(2)  291/FFFFFFFFC00001C8 : 6823                		mov	r2,r8
(2)  292/FFFFFFFFC00001CA : 7820                		add	#$20,r8
(2)  293/FFFFFFFFC00001CC : 6082                		mov 	@r8,r0
(2)  294/FFFFFFFFC00001CE : 3048                		sub 	r4,r0
(2)  295/FFFFFFFFC00001D0 : 5481                		mov 	@(4,r8),r4
(2)  296/FFFFFFFFC00001D2 : 3458                		sub 	r5,r4
(2)  297/FFFFFFFFC00001D4 : 6503                		mov	r0,r5
(2)  298/FFFFFFFFC00001D6 : 4418                		shll8	r4
(2)  299/FFFFFFFFC00001D8 : 4518                		shll8	r5
(2)  300/FFFFFFFFC00001DA : 080A                		sts	mach,r8
(2)  301/FFFFFFFFC00001DC : 90CA                		mov	#_JR,r0
(2)  302/FFFFFFFFC00001DE : 2082                		mov	r8,@r0
(2)  303/FFFFFFFFC00001E0 : 1051                		mov	r5,@(4,r0)
(2)  304/FFFFFFFFC00001E2 : 0009                		nop
(2)  305/FFFFFFFFC00001E4 : 5501                		mov	@(4,r0),r5
(2)  306/FFFFFFFFC00001E6 : 90C5                		mov	#_JR,r0
(2)  307/FFFFFFFFC00001E8 : 2082                		mov	r8,@r0
(2)  308/FFFFFFFFC00001EA : 1041                		mov	r4,@(4,r0)
(2)  309/FFFFFFFFC00001EC : 0009                		nop
(2)  310/FFFFFFFFC00001EE : 5401                		mov	@(4,r0),r4
(2)  311/FFFFFFFFC00001F0 : 4418                		shll8	r4
(2)  312/FFFFFFFFC00001F2 : 4518                		shll8	r5
(2)  313/FFFFFFFFC00001F4 : D057                		mov	#Cach_DDA_Src_L+$C,r0
(2)  314/FFFFFFFFC00001F6 : 2042                		mov	r4,@r0
(2)  315/FFFFFFFFC00001F8 : D057                		mov	#Cach_DDA_Src_L+4,r0
(2)  316/FFFFFFFFC00001FA : 2052                		mov	r5,@r0
(2)  317/FFFFFFFFC00001FC : 6522                		mov	@r2,r5
(2)  318/FFFFFFFFC00001FE : 3518                		sub 	r1,r5
(2)  319/FFFFFFFFC0000200 : 6413                		mov 	r1,r4
(2)  320/FFFFFFFFC0000202 : 4518                		shll8	r5
(2)  321/FFFFFFFFC0000204 : 4428                		shll16	r4
(2)  322/FFFFFFFFC0000206 : 90B5                		mov	#_JR,r0
(2)  323/FFFFFFFFC0000208 : 2082                		mov	r8,@r0
(2)  324/FFFFFFFFC000020A : 1051                		mov	r5,@(4,r0)
(2)  325/FFFFFFFFC000020C : 0009                		nop
(2)  326/FFFFFFFFC000020E : 5501                		mov	@(4,r0),r5
(2)  327/FFFFFFFFC0000210 : 4518                		shll8	r5
(2)  328/FFFFFFFFC0000212 :                     .lft_skip:
(2)  329/FFFFFFFFC0000212 : 000B                		rts
(2)  330/FFFFFFFFC0000214 : 0009                		nop
(2)  331/FFFFFFFFC0000216 :                     		align 4
(2)  332/FFFFFFFFC0000218 :                     
(2)  333/FFFFFFFFC0000218 :                     ; --------------------------------------------------------
(2)  334/FFFFFFFFC0000218 :                     
(2)  335/FFFFFFFFC0000218 :                     set_right:
(2)  336/FFFFFFFFC0000218 : 6933                		mov	r3,r9
(2)  337/FFFFFFFFC000021A : 7920                		add	#$20,r9
(2)  338/FFFFFFFFC000021C : 6692                		mov	@r9,r6
(2)  339/FFFFFFFFC000021E : 5791                		mov	@(4,r9),r7
(2)  340/FFFFFFFFC0000220 : D94E                		mov	#Cach_DDA_Src_R,r9
(2)  341/FFFFFFFFC0000222 : 6063                		mov	r6,r0
(2)  342/FFFFFFFFC0000224 : 4028                		shll16	r0
(2)  343/FFFFFFFFC0000226 : 2902                		mov	r0,@r9
(2)  344/FFFFFFFFC0000228 : 6073                		mov	r7,r0
(2)  345/FFFFFFFFC000022A : 4028                		shll16	r0
(2)  346/FFFFFFFFC000022C : 1902                		mov	r0,@(8,r9)
(2)  347/FFFFFFFFC000022E :                     
(2)  348/FFFFFFFFC000022E : 6132                		mov	@r3,r1
(2)  349/FFFFFFFFC0000230 : 5931                		mov	@(4,r3),r9
(2)  350/FFFFFFFFC0000232 : 73F8                		add	#-8,r3
(2)  351/FFFFFFFFC0000234 : 33C3                		cmp/ge	r12,r3
(2)  352/FFFFFFFFC0000236 : 8900                		bt	.rgt_ok
(2)  353/FFFFFFFFC0000238 : 63D3                		mov 	r13,r3
(2)  354/FFFFFFFFC000023A :                     .rgt_ok:
(2)  355/FFFFFFFFC000023A : 5031                		mov	@(4,r3),r0
(2)  356/FFFFFFFFC000023C : 3098                		sub	r9,r0
(2)  357/FFFFFFFFC000023E : 8800                		cmp/eq	#0,r0
(2)  358/FFFFFFFFC0000240 : 89EA                		bt	set_right
(2)  359/FFFFFFFFC0000242 : 4011                		cmp/pz	r0
(2)  360/FFFFFFFFC0000244 : 8B25                		bf	.rgt_skip
(2)  361/FFFFFFFFC0000246 : 400A                		lds	r0,mach
(2)  362/FFFFFFFFC0000248 : 6933                		mov	r3,r9
(2)  363/FFFFFFFFC000024A : 7920                		add	#$20,r9
(2)  364/FFFFFFFFC000024C : 6092                		mov 	@r9,r0
(2)  365/FFFFFFFFC000024E : 3068                		sub 	r6,r0
(2)  366/FFFFFFFFC0000250 : 5691                		mov 	@(4,r9),r6
(2)  367/FFFFFFFFC0000252 : 3678                		sub 	r7,r6
(2)  368/FFFFFFFFC0000254 : 6703                		mov	r0,r7
(2)  369/FFFFFFFFC0000256 : 4618                		shll8	r6
(2)  370/FFFFFFFFC0000258 : 4718                		shll8	r7
(2)  371/FFFFFFFFC000025A : 090A                		sts	mach,r9
(2)  372/FFFFFFFFC000025C : 908A                		mov	#_JR,r0
(2)  373/FFFFFFFFC000025E : 2092                		mov	r9,@r0
(2)  374/FFFFFFFFC0000260 : 1071                		mov	r7,@(4,r0)
(2)  375/FFFFFFFFC0000262 : 0009                		nop
(2)  376/FFFFFFFFC0000264 : 5701                		mov	@(4,r0),r7
(2)  377/FFFFFFFFC0000266 : 9085                		mov	#_JR,r0
(2)  378/FFFFFFFFC0000268 : 2092                		mov	r9,@r0
(2)  379/FFFFFFFFC000026A : 1061                		mov	r6,@(4,r0)
(2)  380/FFFFFFFFC000026C : 0009                		nop
(2)  381/FFFFFFFFC000026E : 5601                		mov	@(4,r0),r6
(2)  382/FFFFFFFFC0000270 : 4618                		shll8	r6
(2)  383/FFFFFFFFC0000272 : 4718                		shll8	r7
(2)  384/FFFFFFFFC0000274 : D03A                		mov	#Cach_DDA_Src_R+4,r0
(2)  385/FFFFFFFFC0000276 : 2072                		mov	r7,@r0
(2)  386/FFFFFFFFC0000278 : D03A                		mov	#Cach_DDA_Src_R+$C,r0
(2)  387/FFFFFFFFC000027A : 2062                		mov	r6,@r0
(2)  388/FFFFFFFFC000027C : 6732                		mov	@r3,r7
(2)  389/FFFFFFFFC000027E : 3718                		sub 	r1,r7
(2)  390/FFFFFFFFC0000280 : 6613                		mov 	r1,r6
(2)  391/FFFFFFFFC0000282 : 4628                		shll16	r6
(2)  392/FFFFFFFFC0000284 : 4718                		shll8	r7
(2)  393/FFFFFFFFC0000286 : 9075                		mov	#_JR,r0
(2)  394/FFFFFFFFC0000288 : 2092                		mov	r9,@r0
(2)  395/FFFFFFFFC000028A : 1071                		mov	r7,@(4,r0)
(2)  396/FFFFFFFFC000028C : 0009                		nop
(2)  397/FFFFFFFFC000028E : 5701                		mov	@(4,r0),r7
(2)  398/FFFFFFFFC0000290 : 4718                		shll8	r7
(2)  399/FFFFFFFFC0000292 :                     .rgt_skip:
(2)  400/FFFFFFFFC0000292 : 000B                		rts
(2)  401/FFFFFFFFC0000294 : 0009                		nop
(2)  402/FFFFFFFFC0000296 :                     		align 4
(2)  403/FFFFFFFFC0000298 :                     
(2)  404/FFFFFFFFC0000298 :                     ; --------------------------------------------------------
(2)  405/FFFFFFFFC0000298 :                     
(2)  406/FFFFFFFFC0000298 :                     	; r2
(2)  407/FFFFFFFFC0000298 :                     	; r3
(2)  408/FFFFFFFFC0000298 :                     	; r4 - Left X
(2)  409/FFFFFFFFC0000298 :                     	; r5
(2)  410/FFFFFFFFC0000298 :                     	; r6 - Right X
(2)  411/FFFFFFFFC0000298 :                     	; r7
(2)  412/FFFFFFFFC0000298 :                     	; r8
(2)  413/FFFFFFFFC0000298 :                     	; r9
(2)  414/FFFFFFFFC0000298 :                     	; r10 - Top Y, gets updated after calling put_piece
(2)  415/FFFFFFFFC0000298 :                     
(2)  416/FFFFFFFFC0000298 :                     put_piece:
(2)  417/FFFFFFFFC0000298 : 5821                		mov	@(4,r2),r8	; Left DDA's Y
(2)  418/FFFFFFFFC000029A : 5931                		mov	@(4,r3),r9	; Right DDA's Y
(2)  419/FFFFFFFFC000029C : 38A8                		sub	r10,r8
(2)  420/FFFFFFFFC000029E : 39A8                		sub	r10,r9
(2)  421/FFFFFFFFC00002A0 : 3897                		cmp/gt	r9,r8
(2)  422/FFFFFFFFC00002A2 : 8900                		bt	.lefth
(2)  423/FFFFFFFFC00002A4 : 6983                		mov	r8,r9
(2)  424/FFFFFFFFC00002A6 :                     .lefth:
(2)  425/FFFFFFFFC00002A6 : 6843                		mov	r4,r8
(2)  426/FFFFFFFFC00002A8 : 6063                		mov	r6,r0
(2)  427/FFFFFFFFC00002AA : 4829                		shlr16	r8
(2)  428/FFFFFFFFC00002AC : 208D                		xtrct	r8,r0
(2)  429/FFFFFFFFC00002AE : 1103                		mov	r0,@(plypz_xl,r1)
(2)  430/FFFFFFFFC00002B0 : 1156                		mov 	r5,@(plypz_xl_dx,r1)
(2)  431/FFFFFFFFC00002B2 : 359D                		dmuls	r9,r5
(2)  432/FFFFFFFFC00002B4 : 1177                		mov 	r7,@(plypz_xr_dx,r1)
(2)  433/FFFFFFFFC00002B6 : 021A                		sts	macl,r2
(2)  434/FFFFFFFFC00002B8 : 379D                		dmuls	r9,r7
(2)  435/FFFFFFFFC00002BA : 031A                		sts	macl,r3
(2)  436/FFFFFFFFC00002BC : 342C                		add 	r2,r4
(2)  437/FFFFFFFFC00002BE : 363C                		add	r3,r6
(2)  438/FFFFFFFFC00002C0 : 62A3                		mov	r10,r2
(2)  439/FFFFFFFFC00002C2 : 3A9C                		add	r9,r10
(2)  440/FFFFFFFFC00002C4 : 6BA3                		mov	r10,r11
(2)  441/FFFFFFFFC00002C6 : 4228                		shll16	r2
(2)  442/FFFFFFFFC00002C8 : 2B2B                		or	r2,r11
(2)  443/FFFFFFFFC00002CA : 11B2                		mov	r11,@(plypz_ytb,r1)
(2)  444/FFFFFFFFC00002CC :                     
(2)  445/FFFFFFFFC00002CC :                     	; r9 - Y multiply
(2)  446/FFFFFFFFC00002CC :                     	;
(2)  447/FFFFFFFFC00002CC :                     	; free:
(2)  448/FFFFFFFFC00002CC :                     	; r2,r3,r5,r7,r8,r11
(2)  449/FFFFFFFFC00002CC : D826                		mov	#Cach_DDA_Src_L,r8
(2)  450/FFFFFFFFC00002CE : D727                		mov	#Cach_DDA_Src_R,r7
(2)  451/FFFFFFFFC00002D0 : 6282                		mov	@r8,r2
(2)  452/FFFFFFFFC00002D2 : 6372                		mov	@r7,r3
(2)  453/FFFFFFFFC00002D4 : 6523                		mov	r2,r5
(2)  454/FFFFFFFFC00002D6 : 6033                		mov	r3,r0
(2)  455/FFFFFFFFC00002D8 : 4529                		shlr16	r5
(2)  456/FFFFFFFFC00002DA : 205D                		xtrct	r5,r0
(2)  457/FFFFFFFFC00002DC : 1104                		mov	r0,@(plypz_src_xl,r1)
(2)  458/FFFFFFFFC00002DE :                     ; 		mov	r2,@(plypz_src_xl,r1)
(2)  459/FFFFFFFFC00002DE :                     ; 		mov	r3,@(plypz_src_xr,r1)
(2)  460/FFFFFFFFC00002DE :                     
(2)  461/FFFFFFFFC00002DE : 5081                		mov	@(4,r8),r0
(2)  462/FFFFFFFFC00002E0 : 5571                		mov	@(4,r7),r5
(2)  463/FFFFFFFFC00002E2 : 1108                		mov	r0,@(plypz_src_xl_dx,r1)
(2)  464/FFFFFFFFC00002E4 : 1159                		mov	r5,@(plypz_src_xr_dx,r1)
(2)  465/FFFFFFFFC00002E6 : 309D                		dmuls	r9,r0
(2)  466/FFFFFFFFC00002E8 : 001A                		sts	macl,r0
(2)  467/FFFFFFFFC00002EA : 359D                		dmuls	r9,r5
(2)  468/FFFFFFFFC00002EC : 051A                		sts	macl,r5
(2)  469/FFFFFFFFC00002EE : 320C                		add 	r0,r2
(2)  470/FFFFFFFFC00002F0 : 335C                		add	r5,r3
(2)  471/FFFFFFFFC00002F2 : 2822                		mov	r2,@r8
(2)  472/FFFFFFFFC00002F4 : 2732                		mov	r3,@r7
(2)  473/FFFFFFFFC00002F6 :                     
(2)  474/FFFFFFFFC00002F6 : 7808                		add	#8,r8	; Go to Y/DY
(2)  475/FFFFFFFFC00002F8 : 7708                		add	#8,r7
(2)  476/FFFFFFFFC00002FA : 6282                		mov	@r8,r2
(2)  477/FFFFFFFFC00002FC : 6372                		mov	@r7,r3
(2)  478/FFFFFFFFC00002FE : 6523                		mov	r2,r5
(2)  479/FFFFFFFFC0000300 : 6033                		mov	r3,r0
(2)  480/FFFFFFFFC0000302 : 4529                		shlr16	r5
(2)  481/FFFFFFFFC0000304 : 205D                		xtrct	r5,r0
(2)  482/FFFFFFFFC0000306 : 1105                		mov	r0,@(plypz_src_yl,r1)
(2)  483/FFFFFFFFC0000308 :                     
(2)  484/FFFFFFFFC0000308 :                     ; 		mov	r2,@(plypz_src_yl,r1)
(2)  485/FFFFFFFFC0000308 :                     ; 		mov	r3,@(plypz_src_yr,r1)
(2)  486/FFFFFFFFC0000308 : 5081                		mov	@(4,r8),r0
(2)  487/FFFFFFFFC000030A : 5571                		mov	@(4,r7),r5
(2)  488/FFFFFFFFC000030C : 110A                		mov	r0,@(plypz_src_yl_dx,r1)
(2)  489/FFFFFFFFC000030E : 115B                		mov	r5,@(plypz_src_yr_dx,r1)
(2)  490/FFFFFFFFC0000310 : 309D                		dmuls	r9,r0
(2)  491/FFFFFFFFC0000312 : 001A                		sts	macl,r0
(2)  492/FFFFFFFFC0000314 : 359D                		dmuls	r9,r5
(2)  493/FFFFFFFFC0000316 : 051A                		sts	macl,r5
(2)  494/FFFFFFFFC0000318 : 320C                		add 	r0,r2
(2)  495/FFFFFFFFC000031A : 335C                		add	r5,r3
(2)  496/FFFFFFFFC000031C : 2822                		mov	r2,@r8
(2)  497/FFFFFFFFC000031E : 2732                		mov	r3,@r7
(2)  498/FFFFFFFFC0000320 :                     
(2)  499/FFFFFFFFC0000320 : 4B15                		cmp/pl	r11			; TOP check, 2 steps
(2)  500/FFFFFFFFC0000322 : 8902                		bt	.top_neg
(2)  501/FFFFFFFFC0000324 : 4B28                		shll16	r11
(2)  502/FFFFFFFFC0000326 : 4B15                		cmp/pl	r11
(2)  503/FFFFFFFFC0000328 : 8B0F                		bf	.bad_piece
(2)  504/FFFFFFFFC000032A :                     .top_neg:
(2)  505/FFFFFFFFC000032A : 50E1                		mov	@(polygn_mtrl,r14),r0
(2)  506/FFFFFFFFC000032C : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2)  507/FFFFFFFFC000032E : 50E0                		mov	@(polygn_type,r14),r0
(2)  508/FFFFFFFFC0000330 : 1100                		mov 	r0,@(plypz_type,r1)
(2)  509/FFFFFFFFC0000332 :                     
(2)  510/FFFFFFFFC0000332 :                     	; next piece
(2)  511/FFFFFFFFC0000332 : 7130                		add	#sizeof_plypz,r1
(2)  512/FFFFFFFFC0000334 : C603                		mov	@(marsGbl_PlyPzList_End,gbr),r0
(2)  513/FFFFFFFFC0000336 : 6803                		mov	r0,r8				; r8 - end point
(2)  514/FFFFFFFFC0000338 : 6013                		mov	r1,r0
(2)  515/FFFFFFFFC000033A : 3183                		cmp/ge	r8,r1
(2)  516/FFFFFFFFC000033C : 8B01                		bf	.dontreset_pz
(2)  517/FFFFFFFFC000033E : C602                		mov	@(marsGbl_PlyPzList_Start,gbr),r0
(2)  518/FFFFFFFFC0000340 : 6103                		mov	r0,r1
(2)  519/FFFFFFFFC0000342 :                     .dontreset_pz:
(2)  520/FFFFFFFFC0000342 : C201                		mov	r0,@(marsGbl_PlyPzList_W,gbr)
(2)  521/FFFFFFFFC0000344 : C516                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2)  522/FFFFFFFFC0000346 : 7001                		add	#1,r0
(2)  523/FFFFFFFFC0000348 : C116                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  524/FFFFFFFFC000034A :                     .bad_piece:
(2)  525/FFFFFFFFC000034A : 000B                		rts
(2)  526/FFFFFFFFC000034C : 0009                		nop
(2)  527/FFFFFFFFC000034E :                     		align 4
(2)  528/FFFFFFFFC0000350 : C000 0744 C000 0750 		ltorg
                    C000 0748 C000 0754 
                    C000 0758 C000 0760 
                    C000 0744 C000 0754 
                    FE80 A518 FF00      
(2)  529/FFFFFFFFC0000376 :                     		align 4
(2)  530/FFFFFFFFC0000378 :                     
(2)  531/FFFFFFFFC0000378 :                     ; ====================================================================
(2)  532/FFFFFFFFC0000378 :                     ; --------------------------------------------------------
(2)  533/FFFFFFFFC0000378 :                     ; MarsVideo_DrawPzPlgns
(2)  534/FFFFFFFFC0000378 :                     ;
(2)  535/FFFFFFFFC0000378 :                     ; Draws polygons on framebuffer using the pieces list
(2)  536/FFFFFFFFC0000378 :                     ; --------------------------------------------------------
(2)  537/FFFFFFFFC0000378 :                     
(2)  538/FFFFFFFFC0000378 :                     		align 4
(2)  539/FFFFFFFFC0000378 :                     MarsVideo_DrawPzPlgns:
(2)  540/FFFFFFFFC0000378 : C516                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2)  541/FFFFFFFFC000037A : 4015                		cmp/pl	r0
(2)  542/FFFFFFFFC000037C : 8B3A                		bf	.no_pz
(2)  543/FFFFFFFFC000037E :                     
(2)  544/FFFFFFFFC000037E : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0
(2)  545/FFFFFFFFC0000380 : 6903                		mov	r0,r9
(2)  546/FFFFFFFFC0000382 :                     
(2)  547/FFFFFFFFC0000382 : DA1D                		mov	#Cach_PlgnPzCopy,r10
(2)  548/FFFFFFFFC0000384 : 6EA3                		mov	r10,r14
(2)  549/FFFFFFFFC0000386 :                     	rept sizeof_plypz/4
(2)  550/FFFFFFFFC0000386 :                     		mov	@r9+,r0
(2)  551/FFFFFFFFC0000386 :                     		mov	r0,@r10
(2)  552/FFFFFFFFC0000386 :                     		add	#4,r10
(2)  553/FFFFFFFFC0000386 :                     	endm
(2)  550/FFFFFFFFC0000386 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC0000388 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC000038A : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC000038C : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC000038E : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC0000390 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC0000392 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC0000394 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC0000396 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC0000398 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC000039A : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC000039C : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC000039E : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003A0 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003A2 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003A4 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003A6 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003A8 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003AA : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003AC : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003AE : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003B0 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003B2 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003B4 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003B6 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003B8 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003BA : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003BC : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003BE : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003C0 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003C2 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003C4 : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003C6 : 7A04                		add	#4,r10
(2)  550/FFFFFFFFC00003C8 : 6096                		mov	@r9+,r0
(2)  551/FFFFFFFFC00003CA : 2A02                		mov	r0,@r10
(2)  552/FFFFFFFFC00003CC : 7A04                		add	#4,r10
(2)  554/FFFFFFFFC00003CE : 59E2                		mov	@(plypz_ytb,r14),r9		; Start grabbing StartY/EndY positions
(2)  555/FFFFFFFFC00003D0 : 6A93                		mov	r9,r10
(2)  556/FFFFFFFFC00003D2 : D00A                		mov	#$FFFF,r0
(2)  557/FFFFFFFFC00003D4 : 4929                		shlr16	r9
(2)  558/FFFFFFFFC00003D6 : 699F                		exts	r9,r9			;  r9 - Top
(2)  559/FFFFFFFFC00003D8 : 2A09                		and	r0,r10			; r10 - Bottom
(2)  560/FFFFFFFFC00003DA : 3090                		cmp/eq	r9,r0			; if Top==Bottom, exit
(2)  561/FFFFFFFFC00003DC : 8908                		bt	.invld_y
(2)  562/FFFFFFFFC00003DE : 900F                		mov	#SCREEN_HEIGHT,r0	; if Top > 224, skip
(2)  563/FFFFFFFFC00003E0 : 3903                		cmp/ge	r0,r9
(2)  564/FFFFFFFFC00003E2 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2)  565/FFFFFFFFC00003E4 : 3A07                		cmp/gt	r0,r10
(2)  566/FFFFFFFFC00003E6 : 8B00                		bf	.len_max
(2)  567/FFFFFFFFC00003E8 : 6A03                		mov	r0,r10
(2)  568/FFFFFFFFC00003EA :                     .len_max:
(2)  569/FFFFFFFFC00003EA : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2)  570/FFFFFFFFC00003EC : 4A15                		cmp/pl	r10
(2)  571/FFFFFFFFC00003EE : 8909                		bt	drwtsk1_vld_y
(2)  572/FFFFFFFFC00003F0 :                     .invld_y:
(2)  573/FFFFFFFFC00003F0 : A10A                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2)  574/FFFFFFFFC00003F2 : 0009                		nop
(2)  575/FFFFFFFFC00003F4 :                     .no_pz:
(2)  576/FFFFFFFFC00003F4 : A117                		bra	drwtask_exit
(2)  577/FFFFFFFFC00003F6 : 0009                		nop
(2)  578/FFFFFFFFC00003F8 :                     		align 4
(2)  579/FFFFFFFFC00003F8 : C000 0644 0000 FFFF 		ltorg
                    00E0                
(2)  580/FFFFFFFFC0000402 :                     		align 4
(2)  581/FFFFFFFFC0000404 :                     
(2)  582/FFFFFFFFC0000404 :                     	; ------------------------------------
(2)  583/FFFFFFFFC0000404 :                     	; If Y top / Y len are valid:
(2)  584/FFFFFFFFC0000404 :                     	; ------------------------------------
(2)  585/FFFFFFFFC0000404 :                     
(2)  586/FFFFFFFFC0000404 :                     drwtsk1_vld_y:
(2)  587/FFFFFFFFC0000404 : 51E3                		mov	@(plypz_xl,r14),r1
(2)  588/FFFFFFFFC0000406 : 6313                		mov	r1,r3
(2)  589/FFFFFFFFC0000408 : 4129                		shlr16	r1
(2)  590/FFFFFFFFC000040A : 52E6                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2)  591/FFFFFFFFC000040C : 4128                		shll16	r1
(2)  592/FFFFFFFFC000040E : 54E7                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2)  593/FFFFFFFFC0000410 : 4328                		shll16	r3
(2)  594/FFFFFFFFC0000412 : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2)  595/FFFFFFFFC0000414 : 4029                		shlr16	r0
(2)  596/FFFFFFFFC0000416 : 4019                		shlr8	r0
(2)  597/FFFFFFFFC0000418 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2)  598/FFFFFFFFC000041A : 8B05                 		bf	drwtsk_texmode
(2)  599/FFFFFFFFC000041C : A0AA                		bra	drwtsk_solidmode
(2)  600/FFFFFFFFC000041E : 0009                		nop
(2)  601/FFFFFFFFC0000420 :                     		align 4
(2)  602/FFFFFFFFC0000420 :                     
(2)  603/FFFFFFFFC0000420 :                     ; ------------------------------------
(2)  604/FFFFFFFFC0000420 :                     ; Texture mode
(2)  605/FFFFFFFFC0000420 :                     ;
(2)  606/FFFFFFFFC0000420 :                     ; r1  - XL
(2)  607/FFFFFFFFC0000420 :                     ; r2  - XL DX
(2)  608/FFFFFFFFC0000420 :                     ; r3  - XR
(2)  609/FFFFFFFFC0000420 :                     ; r4  - XR DX
(2)  610/FFFFFFFFC0000420 :                     ; r5  - SRC XL
(2)  611/FFFFFFFFC0000420 :                     ; r6  - SRC XR
(2)  612/FFFFFFFFC0000420 :                     ; r7  - SRC YL
(2)  613/FFFFFFFFC0000420 :                     ; r8  - SRC YR
(2)  614/FFFFFFFFC0000420 :                     ; r9  - Y current
(2)  615/FFFFFFFFC0000420 :                     ; r10  - Number of lines
(2)  616/FFFFFFFFC0000420 :                     ; ------------------------------------
(2)  617/FFFFFFFFC0000420 :                     
(2)  618/FFFFFFFFC0000420 :                     go_drwsld_updline_tex:
(2)  619/FFFFFFFFC0000420 : A092                		bra	drwsld_updline_tex
(2)  620/FFFFFFFFC0000422 : 0009                		nop
(2)  621/FFFFFFFFC0000424 :                     go_drwtex_gonxtpz:
(2)  622/FFFFFFFFC0000424 : A0F0                		bra	drwsld_nextpz
(2)  623/FFFFFFFFC0000426 : 0009                		nop
(2)  624/FFFFFFFFC0000428 :                     drwtsk_texmode:
(2)  625/FFFFFFFFC0000428 : 55E4                		mov	@(plypz_src_xl,r14),r5		; Texture X left/right
(2)  626/FFFFFFFFC000042A : 6653                		mov	r5,r6
(2)  627/FFFFFFFFC000042C : 4529                		shlr16	r5
(2)  628/FFFFFFFFC000042E : 57E5                		mov	@(plypz_src_yl,r14),r7		; Texture Y up/down
(2)  629/FFFFFFFFC0000430 : 6873                		mov	r7,r8
(2)  630/FFFFFFFFC0000432 : 4729                		shlr16	r7
(2)  631/FFFFFFFFC0000434 :                     
(2)  632/FFFFFFFFC0000434 : 4528                		shll16	r5
(2)  633/FFFFFFFFC0000436 : 4628                		shll16	r6
(2)  634/FFFFFFFFC0000438 : 4728                		shll16	r7
(2)  635/FFFFFFFFC000043A : 4828                		shll16	r8
(2)  636/FFFFFFFFC000043C :                     drwsld_nxtline_tex:
(2)  637/FFFFFFFFC000043C : 4911                		cmp/pz	r9				; Y Start below 0?
(2)  638/FFFFFFFFC000043E : 8BEF                		bf	go_drwsld_updline_tex
(2)  639/FFFFFFFFC0000440 : D04B                		mov	tag_yhght,r0			; Y Start after 224?
(2)  640/FFFFFFFFC0000442 : 3903                		cmp/ge	r0,r9
(2)  641/FFFFFFFFC0000444 : 89EE                		bt	go_drwtex_gonxtpz
(2)  642/FFFFFFFFC0000446 :                     
(2)  643/FFFFFFFFC0000446 : D079                		mov	#Cach_Bkup_S,r0
(2)  644/FFFFFFFFC0000448 : 2016                		mov	r1,@-r0
(2)  645/FFFFFFFFC000044A : 2026                		mov	r2,@-r0
(2)  646/FFFFFFFFC000044C : 2036                		mov	r3,@-r0
(2)  647/FFFFFFFFC000044E : 2046                		mov	r4,@-r0
(2)  648/FFFFFFFFC0000450 : 2056                		mov	r5,@-r0
(2)  649/FFFFFFFFC0000452 : 2066                		mov	r6,@-r0
(2)  650/FFFFFFFFC0000454 : 2076                		mov	r7,@-r0
(2)  651/FFFFFFFFC0000456 : 2086                		mov	r8,@-r0
(2)  652/FFFFFFFFC0000458 : 2096                		mov	r9,@-r0
(2)  653/FFFFFFFFC000045A : 20A6                		mov	r10,@-r0
(2)  654/FFFFFFFFC000045C : 20B6                		mov	r11,@-r0
(2)  655/FFFFFFFFC000045E :                     
(2)  656/FFFFFFFFC000045E :                     	; r11-r12 are free now.
(2)  657/FFFFFFFFC000045E : 4129                		shlr16	r1
(2)  658/FFFFFFFFC0000460 : 4329                		shlr16	r3
(2)  659/FFFFFFFFC0000462 : 611F                		exts	r1,r1
(2)  660/FFFFFFFFC0000464 : 633F                		exts	r3,r3
(2)  661/FFFFFFFFC0000466 : 6033                		mov	r3,r0			; r0: X Right - X Left
(2)  662/FFFFFFFFC0000468 : 3018                		sub	r1,r0
(2)  663/FFFFFFFFC000046A : 4015                		cmp/pl	r0			; Line reversed?
(2)  664/FFFFFFFFC000046C : 8908                		bt	.txrevers
(2)  665/FFFFFFFFC000046E : 6033                		mov	r3,r0			; Swap XL and XR values
(2)  666/FFFFFFFFC0000470 : 6313                		mov	r1,r3
(2)  667/FFFFFFFFC0000472 : 6103                		mov	r0,r1
(2)  668/FFFFFFFFC0000474 : 6053                		mov	r5,r0
(2)  669/FFFFFFFFC0000476 : 6563                		mov	r6,r5
(2)  670/FFFFFFFFC0000478 : 6603                		mov	r0,r6
(2)  671/FFFFFFFFC000047A : 6073                		mov	r7,r0
(2)  672/FFFFFFFFC000047C : 6783                		mov	r8,r7
(2)  673/FFFFFFFFC000047E : 6803                		mov	r0,r8
(2)  674/FFFFFFFFC0000480 :                     .txrevers:
(2)  675/FFFFFFFFC0000480 : 3310                		cmp/eq	r1,r3				; Same X position?
(2)  676/FFFFFFFFC0000482 : 8955                		bt	.tex_skip_line
(2)  677/FFFFFFFFC0000484 : D039                		mov	tag_width,r0			; X right < 0?
(2)  678/FFFFFFFFC0000486 : 4315                		cmp/pl	r3
(2)  679/FFFFFFFFC0000488 : 8B52                		bf	.tex_skip_line
(2)  680/FFFFFFFFC000048A : 3107                		cmp/gt	r0,r1				; X left > 320?
(2)  681/FFFFFFFFC000048C : 8950                		bt	.tex_skip_line
(2)  682/FFFFFFFFC000048E : 6233                		mov	r3,r2
(2)  683/FFFFFFFFC0000490 : 6013                		mov 	r1,r0
(2)  684/FFFFFFFFC0000492 : 3208                		sub 	r0,r2
(2)  685/FFFFFFFFC0000494 : 3658                		sub	r5,r6
(2)  686/FFFFFFFFC0000496 : 3878                		sub	r7,r8
(2)  687/FFFFFFFFC0000498 :                     
(2)  688/FFFFFFFFC0000498 :                     	; Calculate new DX values
(2)  689/FFFFFFFFC0000498 :                     	; make sure DIV is available
(2)  690/FFFFFFFFC0000498 :                     	; (marsGbl_DivStop_M == 0)
(2)  691/FFFFFFFFC0000498 : D033                		mov	tag_JR,r0			; r6 / r2
(2)  692/FFFFFFFFC000049A : 2022                		mov	r2,@r0
(2)  693/FFFFFFFFC000049C : 1061                		mov	r6,@(4,r0)
(2)  694/FFFFFFFFC000049E : 0009                		nop
(2)  695/FFFFFFFFC00004A0 : 5601                		mov	@(4,r0),r6			; r8 / r2
(2)  696/FFFFFFFFC00004A2 : 2022                		mov	r2,@r0
(2)  697/FFFFFFFFC00004A4 : 1081                		mov	r8,@(4,r0)
(2)  698/FFFFFFFFC00004A6 : 0009                		nop
(2)  699/FFFFFFFFC00004A8 : 5801                		mov	@(4,r0),r8
(2)  700/FFFFFFFFC00004AA :                     
(2)  701/FFFFFFFFC00004AA :                     	; Limit X destination points
(2)  702/FFFFFFFFC00004AA :                     	; and correct the texture's X positions
(2)  703/FFFFFFFFC00004AA : D030                		mov	tag_width,r0		; XR point > 320?
(2)  704/FFFFFFFFC00004AC : 3307                		cmp/gt	r0,r3
(2)  705/FFFFFFFFC00004AE : 8B00                		bf	.tr_fix
(2)  706/FFFFFFFFC00004B0 : 6303                		mov	r0,r3				; Force XR to 320
(2)  707/FFFFFFFFC00004B2 :                     .tr_fix:
(2)  708/FFFFFFFFC00004B2 : 4111                		cmp/pz	r1				; XL point < 0?
(2)  709/FFFFFFFFC00004B4 : 8907                		bt	.tl_fix
(2)  710/FFFFFFFFC00004B6 : 621B                		neg	r1,r2				; Fix texture positions
(2)  711/FFFFFFFFC00004B8 : 326D                		dmuls	r6,r2
(2)  712/FFFFFFFFC00004BA : 001A                		sts	macl,r0
(2)  713/FFFFFFFFC00004BC : 350C                		add	r0,r5
(2)  714/FFFFFFFFC00004BE : 328D                		dmuls	r8,r2
(2)  715/FFFFFFFFC00004C0 : 001A                		sts	macl,r0
(2)  716/FFFFFFFFC00004C2 : 370C                		add	r0,r7
(2)  717/FFFFFFFFC00004C4 : 211A                		xor	r1,r1				; And reset XL to 0
(2)  718/FFFFFFFFC00004C6 :                     .tl_fix:
(2)  719/FFFFFFFFC00004C6 :                     	; start
(2)  720/FFFFFFFFC00004C6 : E0FE                		mov	#-2,r0
(2)  721/FFFFFFFFC00004C8 : 2109                		and	r0,r1
(2)  722/FFFFFFFFC00004CA : 2309                		and	r0,r3
(2)  723/FFFFFFFFC00004CC : 3318                		sub 	r1,r3
(2)  724/FFFFFFFFC00004CE : 4321                		shar	r3
(2)  725/FFFFFFFFC00004D0 : 4315                		cmp/pl	r3
(2)  726/FFFFFFFFC00004D2 : 8B2D                		bf	.tex_skip_line
(2)  727/FFFFFFFFC00004D4 : DA56                		mov	#_overwrite+$200,r10
(2)  728/FFFFFFFFC00004D6 : 54E0                		mov	@(plypz_type,r14),r4	;  r4 - texture width|palinc
(2)  729/FFFFFFFFC00004D8 : 6D43                		mov	r4,r13
(2)  730/FFFFFFFFC00004DA : 4429                		shlr16	r4
(2)  731/FFFFFFFFC00004DC : 90AE                		mov	#$FF,r0
(2)  732/FFFFFFFFC00004DE : 92AE                		mov	#$3FFF,r2
(2)  733/FFFFFFFFC00004E0 : 2429                		and	r2,r4
(2)  734/FFFFFFFFC00004E2 : 2D09                		and	r0,r13
(2)  735/FFFFFFFFC00004E4 : 6093                		mov 	r9,r0			; Y position * $200
(2)  736/FFFFFFFFC00004E6 : 4018                		shll8	r0
(2)  737/FFFFFFFFC00004E8 : 4000                		shll	r0
(2)  738/FFFFFFFFC00004EA : 3A0C                		add 	r0,r10			; Add Y
(2)  739/FFFFFFFFC00004EC : 3A1C                		add 	r1,r10			; Add X
(2)  740/FFFFFFFFC00004EE : 51E1                		mov	@(plypz_mtrl,r14),r1
(2)  741/FFFFFFFFC00004F0 :                     .tex_xloop:
(2)  742/FFFFFFFFC00004F0 : 6273                		mov	r7,r2
(2)  743/FFFFFFFFC00004F2 : 4229                		shlr16	r2
(2)  744/FFFFFFFFC00004F4 : 242E                		mulu	r2,r4
(2)  745/FFFFFFFFC00004F6 : 6253                		mov	r5,r2	   		; Build column index
(2)  746/FFFFFFFFC00004F8 : 001A                		sts	macl,r0
(2)  747/FFFFFFFFC00004FA : 4229                		shlr16	r2
(2)  748/FFFFFFFFC00004FC : 302C                		add	r2,r0
(2)  749/FFFFFFFFC00004FE : 001C                		mov.b	@(r0,r1),r0		; Read texture pixel
(2)  750/FFFFFFFFC0000500 : 30DC                		add	r13,r0			; Add index increment
(2)  751/FFFFFFFFC0000502 : C9FF                		and	#$FF,r0
(2)  752/FFFFFFFFC0000504 : 4018                		shll8	r0
(2)  753/FFFFFFFFC0000506 : 400A                		lds	r0,mach			; Save left pixel
(2)  754/FFFFFFFFC0000508 : 356C                		add	r6,r5			; Update X
(2)  755/FFFFFFFFC000050A : 378C                		add	r8,r7			; Update Y
(2)  756/FFFFFFFFC000050C : 6273                		mov	r7,r2
(2)  757/FFFFFFFFC000050E : 4229                		shlr16	r2
(2)  758/FFFFFFFFC0000510 : 242E                		mulu	r2,r4
(2)  759/FFFFFFFFC0000512 : 6253                		mov	r5,r2	   		; Build column index
(2)  760/FFFFFFFFC0000514 : 001A                		sts	macl,r0
(2)  761/FFFFFFFFC0000516 : 4229                		shlr16	r2
(2)  762/FFFFFFFFC0000518 : 302C                		add	r2,r0
(2)  763/FFFFFFFFC000051A : 001C                		mov.b	@(r0,r1),r0		; Read texture pixel
(2)  764/FFFFFFFFC000051C : 30DC                		add	r13,r0			; Add index increment
(2)  765/FFFFFFFFC000051E : C9FF                		and	#$FF,r0
(2)  766/FFFFFFFFC0000520 : 020A                		sts	mach,r2
(2)  767/FFFFFFFFC0000522 : 202B                		or	r2,r0
(2)  768/FFFFFFFFC0000524 : 2A01                		mov.w	r0,@r10
(2)  769/FFFFFFFFC0000526 : 7A02                		add	#2,r10
(2)  770/FFFFFFFFC0000528 : 356C                		add	r6,r5			; Update X
(2)  771/FFFFFFFFC000052A : 4310                		dt	r3
(2)  772/FFFFFFFFC000052C : 8FE0                		bf/s	.tex_xloop
(2)  773/FFFFFFFFC000052E : 378C                		add	r8,r7			; Update Y
(2)  774/FFFFFFFFC0000530 :                     .tex_skip_line:
(2)  775/FFFFFFFFC0000530 : D040                		mov	#Cach_Bkup_LB,r0
(2)  776/FFFFFFFFC0000532 : 6B06                		mov	@r0+,r11
(2)  777/FFFFFFFFC0000534 : 6A06                		mov	@r0+,r10
(2)  778/FFFFFFFFC0000536 : 6906                		mov	@r0+,r9
(2)  779/FFFFFFFFC0000538 : 6806                		mov	@r0+,r8
(2)  780/FFFFFFFFC000053A : 6706                		mov	@r0+,r7
(2)  781/FFFFFFFFC000053C : 6606                		mov	@r0+,r6
(2)  782/FFFFFFFFC000053E : 6506                		mov	@r0+,r5
(2)  783/FFFFFFFFC0000540 : 6406                		mov	@r0+,r4
(2)  784/FFFFFFFFC0000542 : 6306                		mov	@r0+,r3
(2)  785/FFFFFFFFC0000544 : 6206                		mov	@r0+,r2
(2)  786/FFFFFFFFC0000546 : 6106                		mov	@r0+,r1
(2)  787/FFFFFFFFC0000548 :                     drwsld_updline_tex:
(2)  788/FFFFFFFFC0000548 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2)  789/FFFFFFFFC000054A : 350C                		add	r0,r5
(2)  790/FFFFFFFFC000054C : 50E9                		mov	@(plypz_src_xr_dx,r14),r0
(2)  791/FFFFFFFFC000054E : 360C                		add	r0,r6
(2)  792/FFFFFFFFC0000550 : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2)  793/FFFFFFFFC0000552 : 370C                		add	r0,r7
(2)  794/FFFFFFFFC0000554 : 50EB                		mov	@(plypz_src_yr_dx,r14),r0
(2)  795/FFFFFFFFC0000556 : 380C                		add	r0,r8
(2)  796/FFFFFFFFC0000558 : 312C                		add	r2,r1				; Update X postions
(2)  797/FFFFFFFFC000055A : 4A10                		dt	r10
(2)  798/FFFFFFFFC000055C : 8D54                		bt/s	drwsld_nextpz
(2)  799/FFFFFFFFC000055E : 334C                		add	r4,r3
(2)  800/FFFFFFFFC0000560 : AF6C                		bra	drwsld_nxtline_tex
(2)  801/FFFFFFFFC0000562 : 7901                		add	#1,r9
(2)  802/FFFFFFFFC0000564 :                     ; drwtex_gonxtpz:
(2)  803/FFFFFFFFC0000564 : A050                		bra	drwsld_nextpz
(2)  804/FFFFFFFFC0000566 : 0009                		nop
(2)  805/FFFFFFFFC0000568 :                     		align 4
(2)  806/FFFFFFFFC0000568 : FFFF FF00           tag_JR:		dc.l _JR
(2)  807/FFFFFFFFC000056C : 0000 0140           tag_width:	dc.l SCREEN_WIDTH
(2)  808/FFFFFFFFC0000570 : 0000 00E0           tag_yhght:	dc.l SCREEN_HEIGHT
(2)  809/FFFFFFFFC0000574 :                     
(2)  810/FFFFFFFFC0000574 :                     ; ------------------------------------
(2)  811/FFFFFFFFC0000574 :                     ; Solid Color
(2)  812/FFFFFFFFC0000574 :                     ;
(2)  813/FFFFFFFFC0000574 :                     ; r1  - XL
(2)  814/FFFFFFFFC0000574 :                     ; r2  - XL DX
(2)  815/FFFFFFFFC0000574 :                     ; r3  - XR
(2)  816/FFFFFFFFC0000574 :                     ; r4  - XR DX
(2)  817/FFFFFFFFC0000574 :                     ; r9  - Y current
(2)  818/FFFFFFFFC0000574 :                     ; r10  - Number of lines
(2)  819/FFFFFFFFC0000574 :                     ; ------------------------------------
(2)  820/FFFFFFFFC0000574 :                     
(2)  821/FFFFFFFFC0000574 :                     drwtsk_solidmode:
(2)  822/FFFFFFFFC0000574 : 9062                		mov	#$FF,r0
(2)  823/FFFFFFFFC0000576 : 56E1                		mov	@(plypz_mtrl,r14),r6
(2)  824/FFFFFFFFC0000578 : 2609                		and	r0,r6
(2)  825/FFFFFFFFC000057A : 55E0                		mov	@(plypz_type,r14),r5
(2)  826/FFFFFFFFC000057C : 2509                		and	r0,r5
(2)  827/FFFFFFFFC000057E : 365C                		add	r5,r6
(2)  828/FFFFFFFFC0000580 : DD2D                		mov	#_vdpreg,r13
(2)  829/FFFFFFFFC0000582 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  830/FFFFFFFFC0000584 : C802                		tst	#2,r0
(2)  831/FFFFFFFFC0000586 : 8BFC                		bf	.wait
(2)  832/FFFFFFFFC0000588 :                     drwsld_nxtline:
(2)  833/FFFFFFFFC0000588 : 6093                		mov	r9,r0
(2)  834/FFFFFFFFC000058A : 30AC                		add	r10,r0
(2)  835/FFFFFFFFC000058C : 4015                		cmp/pl	r0
(2)  836/FFFFFFFFC000058E : 8B3B                		bf	drwsld_nextpz
(2)  837/FFFFFFFFC0000590 : 4911                		cmp/pz	r9
(2)  838/FFFFFFFFC0000592 : 8B34                		bf	drwsld_updline
(2)  839/FFFFFFFFC0000594 : 9054                		mov	#SCREEN_HEIGHT,r0
(2)  840/FFFFFFFFC0000596 : 3907                		cmp/gt	r0,r9
(2)  841/FFFFFFFFC0000598 : 8936                		bt	drwsld_nextpz
(2)  842/FFFFFFFFC000059A :                     
(2)  843/FFFFFFFFC000059A : 6B13                		mov	r1,r11
(2)  844/FFFFFFFFC000059C : 6C33                		mov	r3,r12
(2)  845/FFFFFFFFC000059E : 4B29                		shlr16	r11
(2)  846/FFFFFFFFC00005A0 : 4C29                		shlr16	r12
(2)  847/FFFFFFFFC00005A2 : 6BBF                		exts	r11,r11
(2)  848/FFFFFFFFC00005A4 : 6CCF                		exts	r12,r12
(2)  849/FFFFFFFFC00005A6 : 60C3                		mov	r12,r0
(2)  850/FFFFFFFFC00005A8 : 30B8                		sub	r11,r0
(2)  851/FFFFFFFFC00005AA : 4011                		cmp/pz	r0
(2)  852/FFFFFFFFC00005AC : 8902                		bt	.revers
(2)  853/FFFFFFFFC00005AE : 60C3                		mov	r12,r0
(2)  854/FFFFFFFFC00005B0 : 6CB3                		mov	r11,r12
(2)  855/FFFFFFFFC00005B2 : 6B03                		mov	r0,r11
(2)  856/FFFFFFFFC00005B4 :                     .revers:
(2)  857/FFFFFFFFC00005B4 : 9045                		mov	#SCREEN_WIDTH-2,r0
(2)  858/FFFFFFFFC00005B6 : 4C15                		cmp/pl	r12
(2)  859/FFFFFFFFC00005B8 : 8B21                		bf	drwsld_updline
(2)  860/FFFFFFFFC00005BA : 3B07                		cmp/gt	r0,r11
(2)  861/FFFFFFFFC00005BC : 891F                		bt	drwsld_updline
(2)  862/FFFFFFFFC00005BE : 3C07                		cmp/gt	r0,r12
(2)  863/FFFFFFFFC00005C0 : 8B00                		bf	.r_fix
(2)  864/FFFFFFFFC00005C2 : 6C03                		mov	r0,r12
(2)  865/FFFFFFFFC00005C4 :                     .r_fix:
(2)  866/FFFFFFFFC00005C4 : 4B15                		cmp/pl	r11
(2)  867/FFFFFFFFC00005C6 : 8900                		bt	.l_fix
(2)  868/FFFFFFFFC00005C8 : 2BBA                		xor	r11,r11
(2)  869/FFFFFFFFC00005CA :                     .l_fix:
(2)  870/FFFFFFFFC00005CA : E0FE                		mov	#-2,r0
(2)  871/FFFFFFFFC00005CC : 2B09                		and	r0,r11
(2)  872/FFFFFFFFC00005CE : 2C09                		and	r0,r12
(2)  873/FFFFFFFFC00005D0 : 60C3                		mov	r12,r0
(2)  874/FFFFFFFFC00005D2 : 30B8                		sub	r11,r0
(2)  875/FFFFFFFFC00005D4 : 4015                		cmp/pl	r0
(2)  876/FFFFFFFFC00005D6 : 8B12                		bf	drwsld_updline
(2)  877/FFFFFFFFC00005D8 :                     
(2)  878/FFFFFFFFC00005D8 : 85D5                .wait:		mov.w	@(10,r13),r0
(2)  879/FFFFFFFFC00005DA : C802                		tst	#2,r0
(2)  880/FFFFFFFFC00005DC : 8BFC                		bf	.wait
(2)  881/FFFFFFFFC00005DE : 60C3                		mov	r12,r0
(2)  882/FFFFFFFFC00005E0 : 30B8                		sub	r11,r0
(2)  883/FFFFFFFFC00005E2 : 6C03                		mov	r0,r12
(2)  884/FFFFFFFFC00005E4 : 4001                		shlr	r0
(2)  885/FFFFFFFFC00005E6 : 81D2                		mov.w	r0,@(4,r13)	; length
(2)  886/FFFFFFFFC00005E8 : 60B3                		mov	r11,r0
(2)  887/FFFFFFFFC00005EA : 4001                		shlr	r0
(2)  888/FFFFFFFFC00005EC : 6593                		mov	r9,r5
(2)  889/FFFFFFFFC00005EE : 7501                		add	#1,r5
(2)  890/FFFFFFFFC00005F0 : 4518                		shll8	r5
(2)  891/FFFFFFFFC00005F2 : 305C                		add	r5,r0
(2)  892/FFFFFFFFC00005F4 : 81D3                		mov.w	r0,@(6,r13)	; address
(2)  893/FFFFFFFFC00005F6 : 6063                		mov	r6,r0
(2)  894/FFFFFFFFC00005F8 : 4018                		shll8	r0
(2)  895/FFFFFFFFC00005FA : 206B                		or	r6,r0
(2)  896/FFFFFFFFC00005FC : 81D4                		mov.w	r0,@(8,r13)	; Set data
(2)  897/FFFFFFFFC00005FE :                     drwsld_updline:
(2)  898/FFFFFFFFC00005FE : 312C                		add	r2,r1
(2)  899/FFFFFFFFC0000600 : 334C                		add	r4,r3
(2)  900/FFFFFFFFC0000602 : 4A10                		dt	r10
(2)  901/FFFFFFFFC0000604 : 8FC0                		bf/s	drwsld_nxtline
(2)  902/FFFFFFFFC0000606 : 7901                		add	#1,r9
(2)  903/FFFFFFFFC0000608 :                     
(2)  904/FFFFFFFFC0000608 :                     ; ------------------------------------
(2)  905/FFFFFFFFC0000608 :                     
(2)  906/FFFFFFFFC0000608 :                     drwsld_nextpz:
(2)  907/FFFFFFFFC0000608 : C603                		mov	@(marsGbl_PlyPzList_End,gbr),r0
(2)  908/FFFFFFFFC000060A : 6E03                		mov	r0,r14
(2)  909/FFFFFFFFC000060C : C600                		mov	@(marsGbl_PlyPzList_R,gbr),r0
(2)  910/FFFFFFFFC000060E : 7030                		add	#sizeof_plypz,r0		; And set new point
(2)  911/FFFFFFFFC0000610 : 30E3                		cmp/ge	r14,r0
(2)  912/FFFFFFFFC0000612 : 8B00                		bf	.reset_rd
(2)  913/FFFFFFFFC0000614 :                     ; .wait_too:	mov	@(marsGbl_PlyPzList_W,gbr),r0
(2)  914/FFFFFFFFC0000614 :                     ; 		cmp/eq	r14,r0
(2)  915/FFFFFFFFC0000614 :                     ; 		bf	.wait_too
(2)  916/FFFFFFFFC0000614 : C602                		mov	@(marsGbl_PlyPzList_Start,gbr),r0
(2)  917/FFFFFFFFC0000616 :                     .reset_rd:
(2)  918/FFFFFFFFC0000616 : C200                		mov	r0,@(marsGbl_PlyPzList_R,gbr)
(2)  919/FFFFFFFFC0000618 : C516                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece
(2)  920/FFFFFFFFC000061A : 70FF                		add	#-1,r0
(2)  921/FFFFFFFFC000061C : C116                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2)  922/FFFFFFFFC000061E : 4015                		cmp/pl	r0
(2)  923/FFFFFFFFC0000620 : 8B01                		bf	drwtask_exit
(2)  924/FFFFFFFFC0000622 : AEA9                		bra	MarsVideo_DrawPzPlgns
(2)  925/FFFFFFFFC0000624 : 0009                		nop
(2)  926/FFFFFFFFC0000626 :                     drwtask_exit:
(2)  927/FFFFFFFFC0000626 : 000B                		rts
(2)  928/FFFFFFFFC0000628 : 0009                		nop
(2)  929/FFFFFFFFC000062A :                     		align 4
(2)  930/FFFFFFFFC000062C : C000 07A4 2402 0200 		ltorg
                    C000 0778 2000 4100 
                    00FF 3FFF 00E0 013E 
(2)  931/FFFFFFFFC0000644 :                     
(2)  932/FFFFFFFFC0000644 :                     ; ------------------------------------------------
(2)  933/FFFFFFFFC0000644 :                     
(2)  934/FFFFFFFFC0000644 :                     		align 4
(2)  935/FFFFFFFFC0000644 :                     Cach_PlgnPzCopy	ds.l sizeof_plypz
(2)  936/FFFFFFFFC0000704 :                     Cach_DDA_Top	ds.l 2*2	; First 2 points
(2)  937/FFFFFFFFC0000714 :                     Cach_DDA_Last	ds.l 2*2	; Triangle or Quad (+8)
(2)  938/FFFFFFFFC0000724 :                     Cach_DDA_Src	ds.l 4*2
(2)  939/FFFFFFFFC0000744 :                     Cach_DDA_Src_L	ds.l 4		; X/DX/Y/DX result for textures
(2)  940/FFFFFFFFC0000754 :                     Cach_DDA_Src_R	ds.l 4
(2)  941/FFFFFFFFC0000764 :                     Cach_Bkup_LT	ds.l 5		;
(2)  942/FFFFFFFFC0000778 :                     Cach_Bkup_LB	ds.l 11
(2)  943/FFFFFFFFC00007A4 :                     Cach_Bkup_S	ds.l 0		; <-- Reads backwards
(2)  944/FFFFFFFFC00007A4 :                     Cach_Bkup_LPZ	ds.l 7
(2)  945/FFFFFFFFC00007C0 :                     Cach_Bkup_SPZ	ds.l 0		; <-- Reads backwards
(2)  946/FFFFFFFFC00007C0 :                     
(2)  947/FFFFFFFFC00007C0 :                     ; ------------------------------------------------
(2)  948/ 6002604 :                     .end:		phase CACHE_MSTR_PLGN+.end&$1FFF
(2)  949/ 6002604 :                     		align 4
(2)  950/ 6002604 :                     CACHE_MSTR_PLGN_E:
(2)  954/ 6002604 :                     
(1) 2236/ 6002604 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6002604 :                     ; ====================================================================
(2)    2/ 6002604 :                     ; ----------------------------------------------------------------
(2)    3/ 6002604 :                     ; CACHE code for SLAVE CPU
(2)    4/ 6002604 :                     ;
(2)    5/ 6002604 :                     ; LIMIT: $800 bytes
(2)    6/ 6002604 :                     ; ----------------------------------------------------------------
(2)    7/ 6002604 :                     
(2)    8/ 6002604 :                     		align 4
(2)    9/ 6002604 :                     CACHE_SLAVE:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; PWM Interrupt for playback
(2)   15/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   16/FFFFFFFFC0000000 :                     
(2)   17/FFFFFFFFC0000000 :                     ; **** MUST BE FAST ***
(2)   18/FFFFFFFFC0000000 :                     
(2)   19/FFFFFFFFC0000000 :                     s_irq_pwm:
(2)   20/FFFFFFFFC0000000 : 90AA                		mov	#$F0,r0
(2)   21/FFFFFFFFC0000002 : 400E                		ldc	r0,sr
(2)   22/FFFFFFFFC0000004 : 91A9                		mov	#_FRT,r1
(2)   23/FFFFFFFFC0000006 : 8417                		mov.b	@(7,r1),r0
(2)   24/FFFFFFFFC0000008 : CA02                		xor	#2,r0
(2)   25/FFFFFFFFC000000A : 8017                		mov.b	r0,@(7,r1)
(2)   26/FFFFFFFFC000000C : D14A                		mov	#_sysreg+pwmintclr,r1
(2)   27/FFFFFFFFC000000E : 2101                		mov.w	r0,@r1
(2)   28/FFFFFFFFC0000010 :                     
(2)   29/FFFFFFFFC0000010 :                     ; ------------------------------------------------
(2)   30/FFFFFFFFC0000010 :                     
(2)   31/FFFFFFFFC0000010 : 2F26                		mov	r2,@-r15
(2)   32/FFFFFFFFC0000012 : 2F36                		mov	r3,@-r15
(2)   33/FFFFFFFFC0000014 : 2F46                		mov	r4,@-r15
(2)   34/FFFFFFFFC0000016 : 2F56                		mov	r5,@-r15
(2)   35/FFFFFFFFC0000018 : 2F66                		mov	r6,@-r15
(2)   36/FFFFFFFFC000001A : 2F76                		mov	r7,@-r15
(2)   37/FFFFFFFFC000001C : 2F86                		mov	r8,@-r15
(2)   38/FFFFFFFFC000001E : 2F96                		mov	r9,@-r15
(2)   39/FFFFFFFFC0000020 : 2FA6                		mov	r10,@-r15
(2)   40/FFFFFFFFC0000022 : 4F12                		sts	macl,@-r15
(2)   41/FFFFFFFFC0000024 :                     
(2)   42/FFFFFFFFC0000024 : DA45                		mov	#MarsSnd_PwmCache,r10
(2)   43/FFFFFFFFC0000026 : D946                		mov	#MarsSnd_PwmChnls,r9	; r9 - Channel list
(2)   44/FFFFFFFFC0000028 : E807                		mov 	#MAX_PWMCHNL,r8		; r8 - Number of channels
(2)   45/FFFFFFFFC000002A : E700                		mov 	#0,r7			; r7 - RIGHT BASE wave
(2)   46/FFFFFFFFC000002C : E600                		mov 	#0,r6			; r6 - LEFT BASE wave
(2)   47/FFFFFFFFC000002E :                     .loop:
(2)   48/FFFFFFFFC000002E : 5090                		mov	@(mchnsnd_enbl,r9),r0	; Channel enabled? (non-Zero)
(2)   49/FFFFFFFFC0000030 : 8800                		cmp/eq	#0,r0
(2)   50/FFFFFFFFC0000032 : 8B03                		bf	.on
(2)   51/FFFFFFFFC0000034 :                     .silent:
(2)   52/FFFFFFFFC0000034 : E07F                		mov	#$7F,r0			; Silence...
(2)   53/FFFFFFFFC0000036 : 6203                		mov	r0,r2
(2)   54/FFFFFFFFC0000038 : A05F                		bra	.skip
(2)   55/FFFFFFFFC000003A : 6103                		mov	r0,r1
(2)   56/FFFFFFFFC000003C :                     .on:
(2)   57/FFFFFFFFC000003C : 5491                		mov 	@(mchnsnd_read,r9),r4
(2)   58/FFFFFFFFC000003E : 6343                		mov	r4,r3
(2)   59/FFFFFFFFC0000040 : 5095                		mov 	@(mchnsnd_end,r9),r0
(2)   60/FFFFFFFFC0000042 : D140                		mov	#$00FFFFFF,r1
(2)   61/FFFFFFFFC0000044 : 4319                		shlr8	r3
(2)   62/FFFFFFFFC0000046 : 4019                		shlr8	r0
(2)   63/FFFFFFFFC0000048 : 2319                		and	r1,r3
(2)   64/FFFFFFFFC000004A : 2019                		and	r1,r0
(2)   65/FFFFFFFFC000004C : 3302                		cmp/hs	r0,r3
(2)   66/FFFFFFFFC000004E : 8B0D                		bf	.read
(2)   67/FFFFFFFFC0000050 : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)   68/FFFFFFFFC0000052 : C804                		tst	#%00000100,r0
(2)   69/FFFFFFFFC0000054 : 8B03                		bf	.loop_me
(2)   70/FFFFFFFFC0000056 : E000                		mov 	#0,r0
(2)   71/FFFFFFFFC0000058 : 1900                		mov 	r0,@(mchnsnd_enbl,r9)
(2)   72/FFFFFFFFC000005A : AFEB                		bra	.silent
(2)   73/FFFFFFFFC000005C : 0009                		nop
(2)   74/FFFFFFFFC000005E :                     .loop_me:
(2)   75/FFFFFFFFC000005E : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)   76/FFFFFFFFC0000060 : 5196                		mov	@(mchnsnd_loop,r9),r1
(2)   77/FFFFFFFFC0000062 : 5494                		mov 	@(mchnsnd_start,r9),r4
(2)   78/FFFFFFFFC0000064 : C808                		tst	#%00001000,r0
(2)   79/FFFFFFFFC0000066 : 8900                		bt	.mono_l
(2)   80/FFFFFFFFC0000068 : 4100                		shll	r1
(2)   81/FFFFFFFFC000006A :                     .mono_l:
(2)   82/FFFFFFFFC000006A : 341C                		add	r1,r4
(2)   83/FFFFFFFFC000006C :                     
(2)   84/FFFFFFFFC000006C :                     ; read wave
(2)   85/FFFFFFFFC000006C :                     ; r4 - WAVE READ pointer
(2)   86/FFFFFFFFC000006C :                     .read:
(2)   87/FFFFFFFFC000006C : 5597                		mov 	@(mchnsnd_pitch,r9),r5	; Check if sample is on ROM
(2)   88/FFFFFFFFC000006E : 5293                		mov 	@(mchnsnd_bank,r9),r2
(2)   89/FFFFFFFFC0000070 : D035                		mov	#CS1,r0
(2)   90/FFFFFFFFC0000072 : 3200                		cmp/eq	r0,r2
(2)   91/FFFFFFFFC0000074 : 8B11                		bf	.not_rom
(2)   92/FFFFFFFFC0000076 : D135                		mov	#MarsSnd_RvMode,r1
(2)   93/FFFFFFFFC0000078 : 6012                		mov	@r1,r0
(2)   94/FFFFFFFFC000007A : 8801                		cmp/eq	#1,r0
(2)   95/FFFFFFFFC000007C : 8B0D                		bf	.not_rom
(2)   96/FFFFFFFFC000007E :                     
(2)   97/FFFFFFFFC000007E :                     	; r1 - left WAV
(2)   98/FFFFFFFFC000007E :                     	; r3 - right WAV
(2)   99/FFFFFFFFC000007E :                     	; r4 - original READ point
(2)  100/FFFFFFFFC000007E :                     	; r5 - Pitch
(2)  101/FFFFFFFFC000007E : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  102/FFFFFFFFC0000080 : 6153                		mov	r5,r1
(2)  103/FFFFFFFFC0000082 : C808                		tst	#%00001000,r0
(2)  104/FFFFFFFFC0000084 : 8900                		bt	.mono_c
(2)  105/FFFFFFFFC0000086 : 4100                		shll	r1
(2)  106/FFFFFFFFC0000088 :                     .mono_c:
(2)  107/FFFFFFFFC0000088 : 5292                		mov	@(mchnsnd_cchread,r9),r2
(2)  108/FFFFFFFFC000008A : 4219                		shlr8	r2
(2)  109/FFFFFFFFC000008C : E17F                		mov	#MAX_PWMBACKUP-1,r1	; backup size limit
(2)  110/FFFFFFFFC000008E : 2219                		and	r1,r2
(2)  111/FFFFFFFFC0000090 : 32AC                		add	r10,r2
(2)  112/FFFFFFFFC0000092 : 6124                		mov.b	@r2+,r1
(2)  113/FFFFFFFFC0000094 : 6324                		mov.b	@r2+,r3			; null in MONO samples
(2)  114/FFFFFFFFC0000096 : A00B                		bra	.from_rv
(2)  115/FFFFFFFFC0000098 : 0009                		nop
(2)  116/FFFFFFFFC000009A :                     
(2)  117/FFFFFFFFC000009A :                     ; Play as normal
(2)  118/FFFFFFFFC000009A :                     ; r0 - flags
(2)  119/FFFFFFFFC000009A :                     ; r4 - READ pointer
(2)  120/FFFFFFFFC000009A :                     .not_rom:
(2)  121/FFFFFFFFC000009A : 5098                		mov 	@(mchnsnd_flags,r9),r0
(2)  122/FFFFFFFFC000009C : 6343                		mov 	r4,r3
(2)  123/FFFFFFFFC000009E : 4319                		shlr8	r3
(2)  124/FFFFFFFFC00000A0 : D128                		mov	#$00FFFFFF,r1
(2)  125/FFFFFFFFC00000A2 : C808                		tst	#%00001000,r0
(2)  126/FFFFFFFFC00000A4 : 8900                		bt	.mono_a
(2)  127/FFFFFFFFC00000A6 : 71FF                		add	#-1,r1
(2)  128/FFFFFFFFC00000A8 :                     .mono_a:
(2)  129/FFFFFFFFC00000A8 : 2319                		and	r1,r3
(2)  130/FFFFFFFFC00000AA : 232B                		or	r2,r3
(2)  131/FFFFFFFFC00000AC : 6134                		mov.b	@r3+,r1
(2)  132/FFFFFFFFC00000AE : 6334                		mov.b	@r3+,r3
(2)  133/FFFFFFFFC00000B0 :                     .from_rv:
(2)  134/FFFFFFFFC00000B0 : 6213                		mov	r1,r2
(2)  135/FFFFFFFFC00000B2 : C808                		tst	#%00001000,r0
(2)  136/FFFFFFFFC00000B4 : 8901                		bt	.mono
(2)  137/FFFFFFFFC00000B6 : 6233                		mov	r3,r2
(2)  138/FFFFFFFFC00000B8 : 4500                		shll	r5
(2)  139/FFFFFFFFC00000BA :                     .mono:
(2)  140/FFFFFFFFC00000BA : 345C                		add	r5,r4
(2)  141/FFFFFFFFC00000BC : 1941                		mov	r4,@(mchnsnd_read,r9)
(2)  142/FFFFFFFFC00000BE : 5392                		mov	@(mchnsnd_cchread,r9),r3
(2)  143/FFFFFFFFC00000C0 : 335C                		add	r5,r3
(2)  144/FFFFFFFFC00000C2 : 1932                		mov	r3,@(mchnsnd_cchread,r9)
(2)  145/FFFFFFFFC00000C4 : 933E                		mov	#$FF,r3
(2)  146/FFFFFFFFC00000C6 : 2139                		and	r3,r1
(2)  147/FFFFFFFFC00000C8 : 2239                		and	r3,r2
(2)  148/FFFFFFFFC00000CA : C802                		tst	#%00000010,r0	; LEFT enabled?
(2)  149/FFFFFFFFC00000CC : 8B00                		bf	.no_l
(2)  150/FFFFFFFFC00000CE : E17F                		mov	#$7F,r1		; Force LEFT off
(2)  151/FFFFFFFFC00000D0 :                     .no_l:
(2)  152/FFFFFFFFC00000D0 : C801                		tst	#%00000001,r0	; RIGHT enabled?
(2)  153/FFFFFFFFC00000D2 : 8B00                		bf	.no_r
(2)  154/FFFFFFFFC00000D4 : E27F                		mov	#$7F,r2		; Force RIGHT off
(2)  155/FFFFFFFFC00000D6 :                     .no_r:
(2)  156/FFFFFFFFC00000D6 :                     
(2)  157/FFFFFFFFC00000D6 :                     	; Clearly rushed...
(2)  158/FFFFFFFFC00000D6 : 5099                		mov	@(mchnsnd_vol,r9),r0
(2)  159/FFFFFFFFC00000D8 : 4015                		cmp/pl	r0
(2)  160/FFFFFFFFC00000DA : 8B0E                		bf	.skip
(2)  161/FFFFFFFFC00000DC : 7001                		add	#1,r0
(2)  162/FFFFFFFFC00000DE : 210E                		mulu	r0,r1
(2)  163/FFFFFFFFC00000E0 : 041A                		sts	macl,r4
(2)  164/FFFFFFFFC00000E2 : 4419                		shlr8	r4
(2)  165/FFFFFFFFC00000E4 : 3148                		sub	r4,r1
(2)  166/FFFFFFFFC00000E6 : 220E                		mulu	r0,r2
(2)  167/FFFFFFFFC00000E8 : 041A                		sts	macl,r4
(2)  168/FFFFFFFFC00000EA : 4419                		shlr8	r4
(2)  169/FFFFFFFFC00000EC : 3248                		sub	r4,r2
(2)  170/FFFFFFFFC00000EE : E47F                		mov	#$7F,r4
(2)  171/FFFFFFFFC00000F0 : 240E                		mulu	r0,r4
(2)  172/FFFFFFFFC00000F2 : 001A                		sts	macl,r0
(2)  173/FFFFFFFFC00000F4 : 4019                		shlr8	r0
(2)  174/FFFFFFFFC00000F6 : 310C                		add	r0,r1
(2)  175/FFFFFFFFC00000F8 : 320C                		add	r0,r2
(2)  176/FFFFFFFFC00000FA :                     .skip:
(2)  177/FFFFFFFFC00000FA : 7101                		add	#1,r1
(2)  178/FFFFFFFFC00000FC : 7201                		add	#1,r2
(2)  179/FFFFFFFFC00000FE : 361C                		add	r1,r6
(2)  180/FFFFFFFFC0000100 : 372C                		add	r2,r7
(2)  181/FFFFFFFFC0000102 : 902B                		mov	#MAX_PWMBACKUP,r0
(2)  182/FFFFFFFFC0000104 : 3A0C                		add	r0,r10
(2)  183/FFFFFFFFC0000106 : 4810                		dt	r8
(2)  184/FFFFFFFFC0000108 : 8F91                		bf/s	.loop
(2)  185/FFFFFFFFC000010A : 7928                		add	#sizeof_sndchn,r9
(2)  186/FFFFFFFFC000010C : 9027                		mov	#$3FF,r0		; Overflow protection
(2)  187/FFFFFFFFC000010E : 3607                		cmp/gt	r0,r6
(2)  188/FFFFFFFFC0000110 : 8B00                		bf	.lmuch
(2)  189/FFFFFFFFC0000112 : 6603                		mov	r0,r6
(2)  190/FFFFFFFFC0000114 :                     .lmuch:
(2)  191/FFFFFFFFC0000114 : 3707                		cmp/gt	r0,r7
(2)  192/FFFFFFFFC0000116 : 8B00                		bf	.rmuch
(2)  193/FFFFFFFFC0000118 : 6703                		mov	r0,r7
(2)  194/FFFFFFFFC000011A :                     .rmuch:
(2)  195/FFFFFFFFC000011A : D10D                		mov	#_sysreg+lchwidth,r1	; Write WAVE result
(2)  196/FFFFFFFFC000011C : D20D                		mov	#_sysreg+rchwidth,r2
(2)  197/FFFFFFFFC000011E : 2161                 		mov.w	r6,@r1
(2)  198/FFFFFFFFC0000120 : 2271                 		mov.w	r7,@r2
(2)  199/FFFFFFFFC0000122 :                     
(2)  200/FFFFFFFFC0000122 : 4F16                		lds	@r15+,macl
(2)  201/FFFFFFFFC0000124 : 6AF6                		mov	@r15+,r10
(2)  202/FFFFFFFFC0000126 : 69F6                		mov	@r15+,r9
(2)  203/FFFFFFFFC0000128 : 68F6                		mov	@r15+,r8
(2)  204/FFFFFFFFC000012A : 67F6                		mov	@r15+,r7
(2)  205/FFFFFFFFC000012C : 66F6                		mov	@r15+,r6
(2)  206/FFFFFFFFC000012E : 65F6                		mov	@r15+,r5
(2)  207/FFFFFFFFC0000130 : 64F6                		mov	@r15+,r4
(2)  208/FFFFFFFFC0000132 : 63F6                		mov	@r15+,r3
(2)  209/FFFFFFFFC0000134 : 000B                		rts
(2)  210/FFFFFFFFC0000136 : 62F6                		mov	@r15+,r2
(2)  211/FFFFFFFFC0000138 :                     		align 4
(2)  212/FFFFFFFFC0000138 : 2000 401C 2600 8AC0 		ltorg
                    C000 065C 00FF FFFF 
                    0200 0000 C000 05E8 
                    2000 4034 2000 4036 
                    00F0 FE10 0080 03FF 
(2)  213/FFFFFFFFC0000160 :                     		align 4
(2)  214/FFFFFFFFC0000160 :                     
(2)  215/FFFFFFFFC0000160 :                     ; ====================================================================
(2)  216/FFFFFFFFC0000160 :                     ; --------------------------------------------------------
(2)  217/FFFFFFFFC0000160 :                     ; MarsMdl_MdlLoop
(2)  218/FFFFFFFFC0000160 :                     ;
(2)  219/FFFFFFFFC0000160 :                     ; Call this to start building the 3D objects
(2)  220/FFFFFFFFC0000160 :                     ; --------------------------------------------------------
(2)  221/FFFFFFFFC0000160 :                     
(2)  222/FFFFFFFFC0000160 :                     MarsMdl_MdlLoop:
(2)  223/FFFFFFFFC0000160 : 4F22                		sts	pr,@-r15
(2)  224/FFFFFFFFC0000162 :                     
(2)  225/FFFFFFFFC0000162 : DE0D                		mov	#RAM_Mars_Objects,r14
(2)  226/FFFFFFFFC0000164 : ED0E                		mov	#MAX_MODELS,r13
(2)  227/FFFFFFFFC0000166 :                     .loop:
(2)  228/FFFFFFFFC0000166 : 50E0                		mov	@(mdl_data,r14),r0		; Object model data == 0 or -1?
(2)  229/FFFFFFFFC0000168 : 4015                		cmp/pl	r0
(2)  230/FFFFFFFFC000016A : 8B07                		bf	.invlid
(2)  231/FFFFFFFFC000016C : D00B                		mov	#MarsMdl_ReadModel,r0
(2)  232/FFFFFFFFC000016E : 400B                		jsr	@r0
(2)  233/FFFFFFFFC0000170 : 2FD6                		mov	r13,@-r15
(2)  234/FFFFFFFFC0000172 : 6DF6                		mov	@r15+,r13
(2)  235/FFFFFFFFC0000174 : C512                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0	; Ran out of space to store faces?
(2)  236/FFFFFFFFC0000176 : 9117                		mov	#MAX_FACES,r1
(2)  237/FFFFFFFFC0000178 : 3013                		cmp/ge	r1,r0
(2)  238/FFFFFFFFC000017A : 8902                		bt	.skip
(2)  239/FFFFFFFFC000017C :                     .invlid:
(2)  240/FFFFFFFFC000017C : 4D10                		dt	r13
(2)  241/FFFFFFFFC000017E : 8FF2                		bf/s	.loop
(2)  242/FFFFFFFFC0000180 : 7E20                		add	#sizeof_mdlobj,r14
(2)  243/FFFFFFFFC0000182 :                     .skip:
(2)  244/FFFFFFFFC0000182 : D107                		mov 	#RAM_Mars_PlgnNum_0,r1
(2)  245/FFFFFFFFC0000184 : C515                		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2)  246/FFFFFFFFC0000186 : C801                		tst     #1,r0
(2)  247/FFFFFFFFC0000188 : 8B00                		bf	.page_2
(2)  248/FFFFFFFFC000018A : D106                		mov 	#RAM_Mars_PlgnNum_1,r1
(2)  249/FFFFFFFFC000018C :                     .page_2:
(2)  250/FFFFFFFFC000018C : C512                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0
(2)  251/FFFFFFFFC000018E : 2102                		mov	r0,@r1
(2)  252/FFFFFFFFC0000190 :                     
(2)  253/FFFFFFFFC0000190 : 4F26                		lds	@r15+,pr
(2)  254/FFFFFFFFC0000192 : 000B                		rts
(2)  255/FFFFFFFFC0000194 : 0009                		nop
(2)  256/FFFFFFFFC0000196 :                     		align 4
(2)  257/FFFFFFFFC0000198 : 2601 3A40 C000 01AC 		ltorg
                    2601 4C18 2601 4C1C 
                    0100                
(2)  258/FFFFFFFFC00001AA :                     
(2)  259/FFFFFFFFC00001AA :                     ; ------------------------------------------------
(2)  260/FFFFFFFFC00001AA :                     ; Read model
(2)  261/FFFFFFFFC00001AA :                     ; ------------------------------------------------
(2)  262/FFFFFFFFC00001AA :                     
(2)  263/FFFFFFFFC00001AA :                     		align 4
(2)  264/FFFFFFFFC00001AC :                     MarsMdl_ReadModel:
(2)  265/FFFFFFFFC00001AC : 4F22                		sts	pr,@-r15
(2)  266/FFFFFFFFC00001AE :                     ; 		mov	@(mdl_animdata,r14),r13
(2)  267/FFFFFFFFC00001AE :                     ; 		cmp/pl	r13
(2)  268/FFFFFFFFC00001AE :                     ; 		bf	.no_anim
(2)  269/FFFFFFFFC00001AE :                     ; 		mov	@(mdl_animtimer,r14),r0
(2)  270/FFFFFFFFC00001AE :                     ; 		add	#-1,r0
(2)  271/FFFFFFFFC00001AE :                     ; 		cmp/pl 	r0
(2)  272/FFFFFFFFC00001AE :                     ; 		bt	.wait_camanim
(2)  273/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r2
(2)  274/FFFFFFFFC00001AE :                     ; 		mov	@(mdl_animframe,r14),r0
(2)  275/FFFFFFFFC00001AE :                     ; 		add	#1,r0
(2)  276/FFFFFFFFC00001AE :                     ; 		cmp/eq	r2,r0
(2)  277/FFFFFFFFC00001AE :                     ; 		bf	.on_frames
(2)  278/FFFFFFFFC00001AE :                     ; 		xor	r0,r0
(2)  279/FFFFFFFFC00001AE :                     ; .on_frames:
(2)  280/FFFFFFFFC00001AE :                     ; 		mov	r0,r1
(2)  281/FFFFFFFFC00001AE :                     ; 		mov	r0,@(mdl_animframe,r14)
(2)  282/FFFFFFFFC00001AE :                     ; 		mov	#$18,r0
(2)  283/FFFFFFFFC00001AE :                     ; 		mulu	r0,r1
(2)  284/FFFFFFFFC00001AE :                     ; 		sts	macl,r0
(2)  285/FFFFFFFFC00001AE :                     ; 		add	r0,r13
(2)  286/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r1
(2)  287/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r2
(2)  288/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r3
(2)  289/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r4
(2)  290/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r5
(2)  291/FFFFFFFFC00001AE :                     ; 		mov	@r13+,r6
(2)  292/FFFFFFFFC00001AE :                     ; ; 		neg	r4,r4
(2)  293/FFFFFFFFC00001AE :                     ; 		mov	r1,@(mdl_x_pos,r14)
(2)  294/FFFFFFFFC00001AE :                     ; 		mov	r2,@(mdl_y_pos,r14)
(2)  295/FFFFFFFFC00001AE :                     ; 		mov	r3,@(mdl_z_pos,r14)
(2)  296/FFFFFFFFC00001AE :                     ; 		mov	r4,@(mdl_x_rot,r14)
(2)  297/FFFFFFFFC00001AE :                     ; 		mov	r5,@(mdl_y_rot,r14)
(2)  298/FFFFFFFFC00001AE :                     ; 		mov	r6,@(mdl_z_rot,r14)
(2)  299/FFFFFFFFC00001AE :                     ; 		mov	@(mdl_animspd,r14),r0		; TODO: make a timer setting
(2)  300/FFFFFFFFC00001AE :                     ; .wait_camanim:
(2)  301/FFFFFFFFC00001AE :                     ; 		mov	r0,@(mdl_animtimer,r14)
(2)  302/FFFFFFFFC00001AE :                     ; .no_anim:
(2)  303/FFFFFFFFC00001AE :                     
(2)  304/FFFFFFFFC00001AE :                     	; Now start reading
(2)  305/FFFFFFFFC00001AE : DDAA                		mov	#Cach_CurrPlygn,r13		; r13 - temporal face output
(2)  306/FFFFFFFFC00001B0 : 5CE0                		mov	@(mdl_data,r14),r12		; r12 - model header
(2)  307/FFFFFFFFC00001B2 : 5BC2                		mov 	@(8,r12),r11			; r11 - face data
(2)  308/FFFFFFFFC00001B4 : 5AC1                		mov 	@(4,r12),r10			; r10 - vertice data (X,Y,Z)
(2)  309/FFFFFFFFC00001B6 : 69C1                		mov.w	@r12,r9				;  r9 - Number of faces used on model
(2)  310/FFFFFFFFC00001B8 : C606                		mov	@(marsGbl_CurrZList,gbr),r0	;  r8 - Zlist for sorting
(2)  311/FFFFFFFFC00001BA : 6803                		mov	r0,r8
(2)  312/FFFFFFFFC00001BC :                     .next_face:
(2)  313/FFFFFFFFC00001BC : C512                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0	; Ran out of space to store faces?
(2)  314/FFFFFFFFC00001BE : D102                		mov	.tag_maxfaces,r1
(2)  315/FFFFFFFFC00001C0 : 3013                		cmp/ge	r1,r0
(2)  316/FFFFFFFFC00001C2 : 8B03                		bf	.can_build
(2)  317/FFFFFFFFC00001C4 :                     .no_model:
(2)  318/FFFFFFFFC00001C4 : A144                		bra	.exit_model
(2)  319/FFFFFFFFC00001C6 : 0009                		nop
(2)  320/FFFFFFFFC00001C8 :                     		align 4
(2)  321/FFFFFFFFC00001C8 : 0000 0100           .tag_maxfaces:	dc.l	MAX_FACES
(2)  322/FFFFFFFFC00001CC :                     
(2)  323/FFFFFFFFC00001CC :                     ; --------------------------------
(2)  324/FFFFFFFFC00001CC :                     
(2)  325/FFFFFFFFC00001CC :                     .can_build:
(2)  326/FFFFFFFFC00001CC : 64B5                		mov.w	@r11+,r4		; Read type
(2)  327/FFFFFFFFC00001CE : E703                		mov	#3,r7			; r7 - Current polygon type: triangle (3)
(2)  328/FFFFFFFFC00001D0 : 6043                		mov	r4,r0
(2)  329/FFFFFFFFC00001D2 : 4019                		shlr8	r0
(2)  330/FFFFFFFFC00001D4 : C840                		tst	#PLGN_TRI,r0		; Model face uses triangle?
(2)  331/FFFFFFFFC00001D6 : 8B00                		bf	.set_tri
(2)  332/FFFFFFFFC00001D8 : 7701                		add	#1,r7			; Face is quad, r7 = 4 points
(2)  333/FFFFFFFFC00001DA :                     .set_tri:
(2)  334/FFFFFFFFC00001DA : 4415                		cmp/pl	r4			; Faces uses texture? ($8xxx)
(2)  335/FFFFFFFFC00001DC : 893C                		bt	.solid_type
(2)  336/FFFFFFFFC00001DE :                     
(2)  337/FFFFFFFFC00001DE :                     ; --------------------------------
(2)  338/FFFFFFFFC00001DE :                     ; Set texture material
(2)  339/FFFFFFFFC00001DE :                     ; --------------------------------
(2)  340/FFFFFFFFC00001DE :                     
(2)  341/FFFFFFFFC00001DE : 56C3                		mov	@($C,r12),r6		; r6 - Material data
(2)  342/FFFFFFFFC00001E0 : 65D3                		mov	r13,r5			; r5 - Go to UV section
(2)  343/FFFFFFFFC00001E2 : 7528                		add 	#polygn_srcpnts,r5
(2)  344/FFFFFFFFC00001E4 : 6373                		mov	r7,r3			; r3 - copy of current face points (3 or 4)
(2)  345/FFFFFFFFC00001E6 :                     
(2)  346/FFFFFFFFC00001E6 :                     	; Faster read
(2)  347/FFFFFFFFC00001E6 :                     	rept 3
(2)  348/FFFFFFFFC00001E6 :                     		mov.w	@r11+,r0		; Read UV index
(2)  349/FFFFFFFFC00001E6 :                     		extu	r0,r0
(2)  350/FFFFFFFFC00001E6 :                     		shll2	r0
(2)  351/FFFFFFFFC00001E6 :                     		mov	@(r6,r0),r0
(2)  352/FFFFFFFFC00001E6 :                     		mov.w	r0,@(2,r5)
(2)  353/FFFFFFFFC00001E6 :                     		shlr16	r0
(2)  354/FFFFFFFFC00001E6 :                     		mov.w	r0,@r5
(2)  355/FFFFFFFFC00001E6 :                     		add	#4,r5
(2)  356/FFFFFFFFC00001E6 :                     	endm
(2)  348/FFFFFFFFC00001E6 : 60B5                		mov.w	@r11+,r0		; Read UV index
(2)  349/FFFFFFFFC00001E8 : 600D                		extu	r0,r0
(2)  350/FFFFFFFFC00001EA : 4008                		shll2	r0
(2)  351/FFFFFFFFC00001EC : 006E                		mov	@(r6,r0),r0
(2)  352/FFFFFFFFC00001EE : 8151                		mov.w	r0,@(2,r5)
(2)  353/FFFFFFFFC00001F0 : 4029                		shlr16	r0
(2)  354/FFFFFFFFC00001F2 : 2501                		mov.w	r0,@r5
(2)  355/FFFFFFFFC00001F4 : 7504                		add	#4,r5
(2)  348/FFFFFFFFC00001F6 : 60B5                		mov.w	@r11+,r0		; Read UV index
(2)  349/FFFFFFFFC00001F8 : 600D                		extu	r0,r0
(2)  350/FFFFFFFFC00001FA : 4008                		shll2	r0
(2)  351/FFFFFFFFC00001FC : 006E                		mov	@(r6,r0),r0
(2)  352/FFFFFFFFC00001FE : 8151                		mov.w	r0,@(2,r5)
(2)  353/FFFFFFFFC0000200 : 4029                		shlr16	r0
(2)  354/FFFFFFFFC0000202 : 2501                		mov.w	r0,@r5
(2)  355/FFFFFFFFC0000204 : 7504                		add	#4,r5
(2)  348/FFFFFFFFC0000206 : 60B5                		mov.w	@r11+,r0		; Read UV index
(2)  349/FFFFFFFFC0000208 : 600D                		extu	r0,r0
(2)  350/FFFFFFFFC000020A : 4008                		shll2	r0
(2)  351/FFFFFFFFC000020C : 006E                		mov	@(r6,r0),r0
(2)  352/FFFFFFFFC000020E : 8151                		mov.w	r0,@(2,r5)
(2)  353/FFFFFFFFC0000210 : 4029                		shlr16	r0
(2)  354/FFFFFFFFC0000212 : 2501                		mov.w	r0,@r5
(2)  355/FFFFFFFFC0000214 : 7504                		add	#4,r5
(2)  357/FFFFFFFFC0000216 : E003                		mov	#3,r0			; Triangle?
(2)  358/FFFFFFFFC0000218 : 3700                		cmp/eq	r0,r7
(2)  359/FFFFFFFFC000021A : 8906                		bt	.alluvdone		; If yes, skip this
(2)  360/FFFFFFFFC000021C : 60B5                		mov.w	@r11+,r0		; Read extra UV index
(2)  361/FFFFFFFFC000021E : 600D                		extu	r0,r0
(2)  362/FFFFFFFFC0000220 : 4008                		shll2	r0
(2)  363/FFFFFFFFC0000222 : 006E                		mov	@(r6,r0),r0
(2)  364/FFFFFFFFC0000224 : 8151                		mov.w	r0,@(2,r5)
(2)  365/FFFFFFFFC0000226 : 4029                		shlr16	r0
(2)  366/FFFFFFFFC0000228 : 2501                		mov.w	r0,@r5
(2)  367/FFFFFFFFC000022A :                     .alluvdone:
(2)  368/FFFFFFFFC000022A :                     
(2)  369/FFFFFFFFC000022A : 50E1                		mov	@(mdl_option,r14),r0
(2)  370/FFFFFFFFC000022C : C9FF                		and	#$FF,r0
(2)  371/FFFFFFFFC000022E : 6103                		mov	r0,r1
(2)  372/FFFFFFFFC0000230 : 6043                		mov	r4,r0
(2)  373/FFFFFFFFC0000232 : D508                		mov	.tag_andmtrl,r5
(2)  374/FFFFFFFFC0000234 : 2059                		and	r5,r0
(2)  375/FFFFFFFFC0000236 : 4008                		shll2	r0
(2)  376/FFFFFFFFC0000238 : 4000                		shll	r0
(2)  377/FFFFFFFFC000023A : 56C4                		mov	@($10,r12),r6
(2)  378/FFFFFFFFC000023C : 360C                		add	r0,r6
(2)  379/FFFFFFFFC000023E : D087                		mov	#$C000,r0		; grab special bits
(2)  380/FFFFFFFFC0000240 : 2409                		and	r0,r4
(2)  381/FFFFFFFFC0000242 : 4428                		shll16	r4
(2)  382/FFFFFFFFC0000244 : 5061                		mov	@(4,r6),r0
(2)  383/FFFFFFFFC0000246 : 240B                		or	r0,r4
(2)  384/FFFFFFFFC0000248 : 341C                		add	r1,r4
(2)  385/FFFFFFFFC000024A : 1D40                		mov	r4,@(polygn_type,r13)
(2)  386/FFFFFFFFC000024C : 6062                		mov	@r6,r0
(2)  387/FFFFFFFFC000024E : 1D01                		mov	r0,@(polygn_mtrl,r13)
(2)  388/FFFFFFFFC0000250 : A00D                		bra	.go_faces
(2)  389/FFFFFFFFC0000252 : 0009                		nop
(2)  390/FFFFFFFFC0000254 :                     		align 4
(2)  391/FFFFFFFFC0000254 :                     .tag_andmtrl:
(2)  392/FFFFFFFFC0000254 : 0000 3FFF           		dc.l $3FFF
(2)  393/FFFFFFFFC0000258 :                     
(2)  394/FFFFFFFFC0000258 :                     ; --------------------------------
(2)  395/FFFFFFFFC0000258 :                     ; Set texture material
(2)  396/FFFFFFFFC0000258 :                     ; --------------------------------
(2)  397/FFFFFFFFC0000258 :                     
(2)  398/FFFFFFFFC0000258 :                     .solid_type:
(2)  399/FFFFFFFFC0000258 : 50E1                		mov	@(mdl_option,r14),r0
(2)  400/FFFFFFFFC000025A : C9FF                		and	#$FF,r0
(2)  401/FFFFFFFFC000025C : 6103                		mov	r0,r1
(2)  402/FFFFFFFFC000025E : 6043                		mov	r4,r0
(2)  403/FFFFFFFFC0000260 : D57F                		mov	#$E000,r5
(2)  404/FFFFFFFFC0000262 : 2459                		and	r5,r4
(2)  405/FFFFFFFFC0000264 : 4428                		shll16	r4
(2)  406/FFFFFFFFC0000266 : 341C                		add	r1,r4
(2)  407/FFFFFFFFC0000268 : 1D40                		mov	r4,@(polygn_type,r13)		; Set type 0 (tri) or quad (1)
(2)  408/FFFFFFFFC000026A : C9FF                		and	#$FF,r0
(2)  409/FFFFFFFFC000026C : 1D01                		mov	r0,@(polygn_mtrl,r13)		; Set pixel color (0-255)
(2)  410/FFFFFFFFC000026E :                     
(2)  411/FFFFFFFFC000026E :                     ; --------------------------------
(2)  412/FFFFFFFFC000026E :                     ; Read faces
(2)  413/FFFFFFFFC000026E :                     ; --------------------------------
(2)  414/FFFFFFFFC000026E :                     
(2)  415/FFFFFFFFC000026E :                     .go_faces:
(2)  416/FFFFFFFFC000026E : 61D3                		mov	r13,r1
(2)  417/FFFFFFFFC0000270 : 7108                		add 	#polygn_points,r1
(2)  418/FFFFFFFFC0000272 : 66B3                		mov	r11,r6
(2)  419/FFFFFFFFC0000274 : 6073                		mov	r7,r0
(2)  420/FFFFFFFFC0000276 : 4000                		shll	r0
(2)  421/FFFFFFFFC0000278 : 3B0C                		add	r0,r11
(2)  422/FFFFFFFFC000027A :                     
(2)  423/FFFFFFFFC000027A : D07A                		mov	#Cach_BkupS_S,r0
(2)  424/FFFFFFFFC000027C : 2086                		mov 	r8,@-r0
(2)  425/FFFFFFFFC000027E : 2096                		mov 	r9,@-r0
(2)  426/FFFFFFFFC0000280 : 20B6                		mov 	r11,@-r0
(2)  427/FFFFFFFFC0000282 : 20C6                		mov 	r12,@-r0
(2)  428/FFFFFFFFC0000284 : 20D6                		mov 	r13,@-r0
(2)  429/FFFFFFFFC0000286 : D831                		mov	.tag_xl,r8
(2)  430/FFFFFFFFC0000288 : 698B                		neg	r8,r9
(2)  431/FFFFFFFFC000028A : EB90                		mov	#-112,r11
(2)  432/FFFFFFFFC000028C : 6CBB                		neg	r11,r12
(2)  433/FFFFFFFFC000028E : D576                		mov	#$7FFFFFFF,r5
(2)  434/FFFFFFFFC0000290 : EDFF                		mov	#$FFFFFFFF,r13
(2)  435/FFFFFFFFC0000292 :                     
(2)  436/FFFFFFFFC0000292 :                     	; Do 3 points
(2)  437/FFFFFFFFC0000292 :                     	rept 3
(2)  438/FFFFFFFFC0000292 :                     		mov	#0,r0
(2)  439/FFFFFFFFC0000292 :                     		mov.w 	@r6+,r0
(2)  440/FFFFFFFFC0000292 :                     		mov	#$C,r4
(2)  441/FFFFFFFFC0000292 :                     		mulu	r4,r0
(2)  442/FFFFFFFFC0000292 :                     		sts	macl,r0
(2)  443/FFFFFFFFC0000292 :                     		mov	r10,r4
(2)  444/FFFFFFFFC0000292 :                     		add 	r0,r4
(2)  445/FFFFFFFFC0000292 :                     		mov	@r4,r2
(2)  446/FFFFFFFFC0000292 :                     		mov	@(4,r4),r3
(2)  447/FFFFFFFFC0000292 :                     		mov	@(8,r4),r4
(2)  448/FFFFFFFFC0000292 :                     		bsr	mdlrd_setpoint
(2)  449/FFFFFFFFC0000292 :                     		nop
(2)  450/FFFFFFFFC0000292 :                     		mov	r2,@r1
(2)  451/FFFFFFFFC0000292 :                     		mov	r3,@(4,r1)
(2)  452/FFFFFFFFC0000292 :                     		add	#8,r1
(2)  453/FFFFFFFFC0000292 :                     	endm
(2)  438/FFFFFFFFC0000292 : E000                		mov	#0,r0
(2)  439/FFFFFFFFC0000294 : 6065                		mov.w 	@r6+,r0
(2)  440/FFFFFFFFC0000296 : E40C                		mov	#$C,r4
(2)  441/FFFFFFFFC0000298 : 204E                		mulu	r4,r0
(2)  442/FFFFFFFFC000029A : 001A                		sts	macl,r0
(2)  443/FFFFFFFFC000029C : 64A3                		mov	r10,r4
(2)  444/FFFFFFFFC000029E : 340C                		add 	r0,r4
(2)  445/FFFFFFFFC00002A0 : 6242                		mov	@r4,r2
(2)  446/FFFFFFFFC00002A2 : 5341                		mov	@(4,r4),r3
(2)  447/FFFFFFFFC00002A4 : 5442                		mov	@(8,r4),r4
(2)  448/FFFFFFFFC00002A6 : B0E5                		bsr	mdlrd_setpoint
(2)  449/FFFFFFFFC00002A8 : 0009                		nop
(2)  450/FFFFFFFFC00002AA : 2122                		mov	r2,@r1
(2)  451/FFFFFFFFC00002AC : 1131                		mov	r3,@(4,r1)
(2)  452/FFFFFFFFC00002AE : 7108                		add	#8,r1
(2)  438/FFFFFFFFC00002B0 : E000                		mov	#0,r0
(2)  439/FFFFFFFFC00002B2 : 6065                		mov.w 	@r6+,r0
(2)  440/FFFFFFFFC00002B4 : E40C                		mov	#$C,r4
(2)  441/FFFFFFFFC00002B6 : 204E                		mulu	r4,r0
(2)  442/FFFFFFFFC00002B8 : 001A                		sts	macl,r0
(2)  443/FFFFFFFFC00002BA : 64A3                		mov	r10,r4
(2)  444/FFFFFFFFC00002BC : 340C                		add 	r0,r4
(2)  445/FFFFFFFFC00002BE : 6242                		mov	@r4,r2
(2)  446/FFFFFFFFC00002C0 : 5341                		mov	@(4,r4),r3
(2)  447/FFFFFFFFC00002C2 : 5442                		mov	@(8,r4),r4
(2)  448/FFFFFFFFC00002C4 : B0D6                		bsr	mdlrd_setpoint
(2)  449/FFFFFFFFC00002C6 : 0009                		nop
(2)  450/FFFFFFFFC00002C8 : 2122                		mov	r2,@r1
(2)  451/FFFFFFFFC00002CA : 1131                		mov	r3,@(4,r1)
(2)  452/FFFFFFFFC00002CC : 7108                		add	#8,r1
(2)  438/FFFFFFFFC00002CE : E000                		mov	#0,r0
(2)  439/FFFFFFFFC00002D0 : 6065                		mov.w 	@r6+,r0
(2)  440/FFFFFFFFC00002D2 : E40C                		mov	#$C,r4
(2)  441/FFFFFFFFC00002D4 : 204E                		mulu	r4,r0
(2)  442/FFFFFFFFC00002D6 : 001A                		sts	macl,r0
(2)  443/FFFFFFFFC00002D8 : 64A3                		mov	r10,r4
(2)  444/FFFFFFFFC00002DA : 340C                		add 	r0,r4
(2)  445/FFFFFFFFC00002DC : 6242                		mov	@r4,r2
(2)  446/FFFFFFFFC00002DE : 5341                		mov	@(4,r4),r3
(2)  447/FFFFFFFFC00002E0 : 5442                		mov	@(8,r4),r4
(2)  448/FFFFFFFFC00002E2 : B0C7                		bsr	mdlrd_setpoint
(2)  449/FFFFFFFFC00002E4 : 0009                		nop
(2)  450/FFFFFFFFC00002E6 : 2122                		mov	r2,@r1
(2)  451/FFFFFFFFC00002E8 : 1131                		mov	r3,@(4,r1)
(2)  452/FFFFFFFFC00002EA : 7108                		add	#8,r1
(2)  454/FFFFFFFFC00002EC : E003                		mov	#3,r0			; Triangle?
(2)  455/FFFFFFFFC00002EE : 3700                		cmp/eq	r0,r7
(2)  456/FFFFFFFFC00002F0 : 890D                		bt	.alldone		; If yes, skip this
(2)  457/FFFFFFFFC00002F2 : E000                		mov	#0,r0
(2)  458/FFFFFFFFC00002F4 : 6065                		mov.w 	@r6+,r0
(2)  459/FFFFFFFFC00002F6 : E40C                		mov	#$C,r4
(2)  460/FFFFFFFFC00002F8 : 204E                		mulu	r4,r0
(2)  461/FFFFFFFFC00002FA : 001A                		sts	macl,r0
(2)  462/FFFFFFFFC00002FC : 64A3                		mov	r10,r4
(2)  463/FFFFFFFFC00002FE : 340C                		add 	r0,r4
(2)  464/FFFFFFFFC0000300 : 6242                		mov	@r4,r2
(2)  465/FFFFFFFFC0000302 : 5341                		mov	@(4,r4),r3
(2)  466/FFFFFFFFC0000304 : 5442                		mov	@(8,r4),r4
(2)  467/FFFFFFFFC0000306 : B0B5                		bsr	mdlrd_setpoint
(2)  468/FFFFFFFFC0000308 : 0009                		nop
(2)  469/FFFFFFFFC000030A : 2122                		mov	r2,@r1
(2)  470/FFFFFFFFC000030C : 1131                		mov	r3,@(4,r1)
(2)  471/FFFFFFFFC000030E :                     .alldone:
(2)  472/FFFFFFFFC000030E : 6183                		mov	r8,r1
(2)  473/FFFFFFFFC0000310 : 6293                		mov	r9,r2
(2)  474/FFFFFFFFC0000312 : 63B3                		mov	r11,r3
(2)  475/FFFFFFFFC0000314 : 64C3                		mov	r12,r4
(2)  476/FFFFFFFFC0000316 : 66D3                		mov	r13,r6
(2)  477/FFFFFFFFC0000318 :                     
(2)  478/FFFFFFFFC0000318 : D054                		mov	#Cach_BkupS_L,r0
(2)  479/FFFFFFFFC000031A : 6D06                		mov	@r0+,r13
(2)  480/FFFFFFFFC000031C : 6C06                		mov	@r0+,r12
(2)  481/FFFFFFFFC000031E : 6B06                		mov	@r0+,r11
(2)  482/FFFFFFFFC0000320 : 6906                		mov	@r0+,r9
(2)  483/FFFFFFFFC0000322 : 6806                		mov	@r0+,r8
(2)  484/FFFFFFFFC0000324 :                     
(2)  485/FFFFFFFFC0000324 :                     	; NOTE: if you don't like how the perspective works
(2)  486/FFFFFFFFC0000324 :                     	; change this instruction depending how you want to ignore
(2)  487/FFFFFFFFC0000324 :                     	; faces closer to the camera:
(2)  488/FFFFFFFFC0000324 :                     	;
(2)  489/FFFFFFFFC0000324 :                     	; r5 - Back Z point, keep affine limitations
(2)  490/FFFFFFFFC0000324 :                     	; r6 - Front Z point, skip face but larger faces are affected
(2)  491/FFFFFFFFC0000324 :                     
(2)  492/FFFFFFFFC0000324 : 4511                		cmp/pz	r5			; *** back z
(2)  493/FFFFFFFFC0000326 : 890E                		bt	.go_fout
(2)  494/FFFFFFFFC0000328 :                     ; 		cmp/pz	r6			; *** front z
(2)  495/FFFFFFFFC0000328 :                     ; 		bt	.go_fout
(2)  496/FFFFFFFFC0000328 :                     
(2)  497/FFFFFFFFC0000328 : 90A2                		mov	#MAX_ZDIST,r0		; Draw distance
(2)  498/FFFFFFFFC000032A : 3503                		cmp/ge	r0,r5
(2)  499/FFFFFFFFC000032C : 8B0B                		bf	.go_fout
(2)  500/FFFFFFFFC000032E : 90A0                		mov	#-(SCREEN_WIDTH/2),r0
(2)  501/FFFFFFFFC0000330 : 3107                		cmp/gt	r0,r1
(2)  502/FFFFFFFFC0000332 : 8B08                		bf	.go_fout
(2)  503/FFFFFFFFC0000334 : 600B                		neg	r0,r0
(2)  504/FFFFFFFFC0000336 : 3203                		cmp/ge	r0,r2
(2)  505/FFFFFFFFC0000338 : 8905                		bt	.go_fout
(2)  506/FFFFFFFFC000033A : E090                		mov	#-(SCREEN_HEIGHT/2),r0
(2)  507/FFFFFFFFC000033C : 3307                		cmp/gt	r0,r3
(2)  508/FFFFFFFFC000033E : 8B02                		bf	.go_fout
(2)  509/FFFFFFFFC0000340 : 600B                		neg	r0,r0
(2)  510/FFFFFFFFC0000342 : 3403                		cmp/ge	r0,r4
(2)  511/FFFFFFFFC0000344 : 8B04                		bf	.face_ok
(2)  512/FFFFFFFFC0000346 : A07D                .go_fout:	bra	.face_out
(2)  513/FFFFFFFFC0000348 : 0009                		nop
(2)  514/FFFFFFFFC000034A :                     		align 4
(2)  515/FFFFFFFFC000034C : FFFF FF60           .tag_xl:	dc.l -160
(2)  516/FFFFFFFFC0000350 :                     
(2)  517/FFFFFFFFC0000350 :                     ; --------------------------------
(2)  518/FFFFFFFFC0000350 :                     
(2)  519/FFFFFFFFC0000350 :                     .face_ok:
(2)  520/FFFFFFFFC0000350 : C512                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0	; Add 1 face to the list
(2)  521/FFFFFFFFC0000352 : 7001                		add	#1,r0
(2)  522/FFFFFFFFC0000354 : C112                		mov.w	r0,@(marsGbl_CurrNumFaces,gbr)
(2)  523/FFFFFFFFC0000356 : C608                		mov	@(marsGbl_CurrFacePos,gbr),r0
(2)  524/FFFFFFFFC0000358 : 6103                		mov	r0,r1
(2)  525/FFFFFFFFC000035A : 62D3                		mov	r13,r2
(2)  526/FFFFFFFFC000035C : 2852                		mov	r5,@r8				; Store current Z to Zlist
(2)  527/FFFFFFFFC000035E : 1811                		mov	r1,@(4,r8)			; And it's address
(2)  528/FFFFFFFFC0000360 :                     
(2)  529/FFFFFFFFC0000360 :                     ; 	Sort this face
(2)  530/FFFFFFFFC0000360 :                     ; 	r7 - Curr Z
(2)  531/FFFFFFFFC0000360 :                     ; 	r6 - Past Z
(2)  532/FFFFFFFFC0000360 : C512                		mov.w	@(marsGbl_CurrNumFaces,gbr),r0
(2)  533/FFFFFFFFC0000362 : 8801                		cmp/eq	#1,r0
(2)  534/FFFFFFFFC0000364 : 8917                		bt	.first_face
(2)  535/FFFFFFFFC0000366 : 8802                		cmp/eq	#2,r0
(2)  536/FFFFFFFFC0000368 : 8915                		bt	.first_face
(2)  537/FFFFFFFFC000036A : 6783                		mov	r8,r7
(2)  538/FFFFFFFFC000036C : 77F8                		add	#-8,r7
(2)  539/FFFFFFFFC000036E :                     ; 		mov	@(marsGbl_CurrZList,gbr),r0
(2)  540/FFFFFFFFC000036E :                     ; 		mov	r0,r6
(2)  541/FFFFFFFFC000036E : C607                		mov	@(marsGbl_CurrZTop,gbr),r0
(2)  542/FFFFFFFFC0000370 : 6603                		mov	r0,r6
(2)  543/FFFFFFFFC0000372 :                     ; 		mov	#RAM_Mars_PlgnList_0,r6
(2)  544/FFFFFFFFC0000372 :                     ; 		mov.w   @(marsGbl_PolyBuffNum,gbr),r0
(2)  545/FFFFFFFFC0000372 :                     ; 		tst     #1,r0
(2)  546/FFFFFFFFC0000372 :                     ; 		bf	.page_2
(2)  547/FFFFFFFFC0000372 :                     ; 		mov	#RAM_Mars_PlgnList_1,r6
(2)  548/FFFFFFFFC0000372 :                     .page_2:
(2)  549/FFFFFFFFC0000372 : 3763                		cmp/ge	r6,r7
(2)  550/FFFFFFFFC0000374 : 8B0F                		bf	.first_face
(2)  551/FFFFFFFFC0000376 : 5472                		mov	@(8,r7),r4
(2)  552/FFFFFFFFC0000378 : 6572                		mov	@r7,r5
(2)  553/FFFFFFFFC000037A : 3540                		cmp/eq	r4,r5
(2)  554/FFFFFFFFC000037C : 890B                		bt	.first_face
(2)  555/FFFFFFFFC000037E : 3547                		cmp/gt	r4,r5
(2)  556/FFFFFFFFC0000380 : 8B07                		bf	.swap_me
(2)  557/FFFFFFFFC0000382 : 6472                		mov	@r7,r4
(2)  558/FFFFFFFFC0000384 : 5572                		mov	@(8,r7),r5
(2)  559/FFFFFFFFC0000386 : 2752                		mov	r5,@r7
(2)  560/FFFFFFFFC0000388 : 1742                		mov	r4,@(8,r7)
(2)  561/FFFFFFFFC000038A : 5471                		mov	@(4,r7),r4
(2)  562/FFFFFFFFC000038C : 5573                		mov	@($C,r7),r5
(2)  563/FFFFFFFFC000038E : 1751                		mov	r5,@(4,r7)
(2)  564/FFFFFFFFC0000390 : 1743                		mov	r4,@($C,r7)
(2)  565/FFFFFFFFC0000392 :                     .swap_me:
(2)  566/FFFFFFFFC0000392 : AFEE                		bra	.page_2
(2)  567/FFFFFFFFC0000394 : 77F8                		add	#-8,r7
(2)  568/FFFFFFFFC0000396 :                     
(2)  569/FFFFFFFFC0000396 :                     .first_face:
(2)  570/FFFFFFFFC0000396 : 7808                		add	#8,r8			; Next Zlist entry
(2)  571/FFFFFFFFC0000398 :                     	rept sizeof_polygn/2			; Copy words manually
(2)  572/FFFFFFFFC0000398 :                     		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000398 :                     		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000398 :                     		add	#2,r1
(2)  575/FFFFFFFFC0000398 :                     	endm
(2)  572/FFFFFFFFC0000398 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC000039A : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC000039C : 7102                		add	#2,r1
(2)  572/FFFFFFFFC000039E : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003A0 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003A2 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003A4 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003A6 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003A8 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003AA : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003AC : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003AE : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003B0 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003B2 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003B4 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003B6 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003B8 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003BA : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003BC : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003BE : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003C0 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003C2 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003C4 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003C6 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003C8 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003CA : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003CC : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003CE : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003D0 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003D2 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003D4 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003D6 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003D8 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003DA : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003DC : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003DE : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003E0 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003E2 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003E4 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003E6 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003E8 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003EA : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003EC : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003EE : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003F0 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003F2 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003F4 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003F6 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003F8 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC00003FA : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC00003FC : 7102                		add	#2,r1
(2)  572/FFFFFFFFC00003FE : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000400 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000402 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC0000404 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000406 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000408 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC000040A : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC000040C : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC000040E : 7102                		add	#2,r1
(2)  572/FFFFFFFFC0000410 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000412 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000414 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC0000416 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000418 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC000041A : 7102                		add	#2,r1
(2)  572/FFFFFFFFC000041C : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC000041E : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000420 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC0000422 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000424 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000426 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC0000428 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC000042A : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC000042C : 7102                		add	#2,r1
(2)  572/FFFFFFFFC000042E : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000430 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000432 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC0000434 : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC0000436 : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC0000438 : 7102                		add	#2,r1
(2)  572/FFFFFFFFC000043A : 6025                		mov.w	@r2+,r0
(2)  573/FFFFFFFFC000043C : 2101                		mov.w	r0,@r1
(2)  574/FFFFFFFFC000043E : 7102                		add	#2,r1
(2)  576/FFFFFFFFC0000440 : 6013                		mov	r1,r0
(2)  577/FFFFFFFFC0000442 : C208                		mov	r0,@(marsGbl_CurrFacePos,gbr)
(2)  578/FFFFFFFFC0000444 :                     .face_out:
(2)  579/FFFFFFFFC0000444 : 4910                		dt	r9
(2)  580/FFFFFFFFC0000446 : 8901                		bt	.finish_this
(2)  581/FFFFFFFFC0000448 : AEB8                		bra	.next_face
(2)  582/FFFFFFFFC000044A : 0009                		nop
(2)  583/FFFFFFFFC000044C :                     .finish_this:
(2)  584/FFFFFFFFC000044C : 6083                		mov	r8,r0
(2)  585/FFFFFFFFC000044E : C206                		mov	r0,@(marsGbl_CurrZList,gbr)
(2)  586/FFFFFFFFC0000450 :                     .exit_model:
(2)  587/FFFFFFFFC0000450 : 4F26                		lds	@r15+,pr
(2)  588/FFFFFFFFC0000452 : 000B                		rts
(2)  589/FFFFFFFFC0000454 : 0009                		nop
(2)  590/FFFFFFFFC0000456 :                     		align 4
(2)  591/FFFFFFFFC0000458 : C000 0624 0000 C000 		ltorg
                    0000 E000 C000 0624 
                    7FFF FFFF C000 0610 
                    F400 FF60           
(2)  592/FFFFFFFFC0000474 :                     
(2)  593/FFFFFFFFC0000474 :                     ; ----------------------------------------
(2)  594/FFFFFFFFC0000474 :                     ; Modify position to current point
(2)  595/FFFFFFFFC0000474 :                     ; ----------------------------------------
(2)  596/FFFFFFFFC0000474 :                     
(2)  597/FFFFFFFFC0000474 :                     		align 4
(2)  598/FFFFFFFFC0000474 :                     mdlrd_setpoint:
(2)  599/FFFFFFFFC0000474 : D046                		mov	#Cach_BkupPnt_S,r0
(2)  600/FFFFFFFFC0000476 : 4022                		sts	pr,@-r0
(2)  601/FFFFFFFFC0000478 : 2056                		mov 	r5,@-r0
(2)  602/FFFFFFFFC000047A : 2066                		mov 	r6,@-r0
(2)  603/FFFFFFFFC000047C : 2076                		mov 	r7,@-r0
(2)  604/FFFFFFFFC000047E : 2086                		mov 	r8,@-r0
(2)  605/FFFFFFFFC0000480 : 2096                		mov 	r9,@-r0
(2)  606/FFFFFFFFC0000482 : 20A6                		mov 	r10,@-r0
(2)  607/FFFFFFFFC0000484 : 20B6                		mov 	r11,@-r0
(2)  608/FFFFFFFFC0000486 :                     
(2)  609/FFFFFFFFC0000486 :                     	; Object rotation
(2)  610/FFFFFFFFC0000486 : 6523                		mov	r2,r5			; r5 - X
(2)  611/FFFFFFFFC0000488 : 6643                		mov	r4,r6			; r6 - Z
(2)  612/FFFFFFFFC000048A : 50E5                  		mov 	@(mdl_x_rot,r14),r0
(2)  613/FFFFFFFFC000048C : 4009                  		shlr2	r0
(2)  614/FFFFFFFFC000048E : 4001                  		shlr	r0
(2)  615/FFFFFFFFC0000490 : B088                  		bsr	mdlrd_rotate
(2)  616/FFFFFFFFC0000492 : 4019                		shlr8	r0
(2)  617/FFFFFFFFC0000494 : 6273                   		mov	r7,r2
(2)  618/FFFFFFFFC0000496 : 6533                   		mov	r3,r5
(2)  619/FFFFFFFFC0000498 : 6683                  		mov	r8,r6
(2)  620/FFFFFFFFC000049A : 50E6                  		mov 	@(mdl_y_rot,r14),r0
(2)  621/FFFFFFFFC000049C : 4009                  		shlr2	r0
(2)  622/FFFFFFFFC000049E : 4001                  		shlr	r0
(2)  623/FFFFFFFFC00004A0 : B080                  		bsr	mdlrd_rotate
(2)  624/FFFFFFFFC00004A2 : 4019                		shlr8	r0
(2)  625/FFFFFFFFC00004A4 : 6483                   		mov	r8,r4
(2)  626/FFFFFFFFC00004A6 : 6523                   		mov	r2,r5
(2)  627/FFFFFFFFC00004A8 : 6673                   		mov	r7,r6
(2)  628/FFFFFFFFC00004AA : 50E7                   		mov 	@(mdl_z_rot,r14),r0
(2)  629/FFFFFFFFC00004AC : 4009                  		shlr2	r0
(2)  630/FFFFFFFFC00004AE : 4001                  		shlr	r0
(2)  631/FFFFFFFFC00004B0 : B078                  		bsr	mdlrd_rotate
(2)  632/FFFFFFFFC00004B2 : 4019                		shlr8	r0
(2)  633/FFFFFFFFC00004B4 : 6273                   		mov	r7,r2
(2)  634/FFFFFFFFC00004B6 : 6383                   		mov	r8,r3
(2)  635/FFFFFFFFC00004B8 : 55E2                		mov	@(mdl_x_pos,r14),r5
(2)  636/FFFFFFFFC00004BA : 56E3                		mov	@(mdl_y_pos,r14),r6
(2)  637/FFFFFFFFC00004BC : 57E4                		mov	@(mdl_z_pos,r14),r7
(2)  638/FFFFFFFFC00004BE :                     ; 		shlr8	r5
(2)  639/FFFFFFFFC00004BE :                     ; 		shlr8	r6
(2)  640/FFFFFFFFC00004BE :                     ; 		shlr8	r7
(2)  641/FFFFFFFFC00004BE : 655F                		exts	r5,r5
(2)  642/FFFFFFFFC00004C0 : 666F                		exts	r6,r6
(2)  643/FFFFFFFFC00004C2 : 677F                		exts	r7,r7
(2)  644/FFFFFFFFC00004C4 : 325C                		add 	r5,r2
(2)  645/FFFFFFFFC00004C6 : 336C                		add 	r6,r3
(2)  646/FFFFFFFFC00004C8 : 347C                		add 	r7,r4
(2)  647/FFFFFFFFC00004CA :                     
(2)  648/FFFFFFFFC00004CA :                     	; Include camera changes
(2)  649/FFFFFFFFC00004CA : DB32                		mov 	#RAM_Mars_ObjCamera,r11
(2)  650/FFFFFFFFC00004CC : 55B0                		mov	@(cam_x_pos,r11),r5
(2)  651/FFFFFFFFC00004CE : 56B1                		mov	@(cam_y_pos,r11),r6
(2)  652/FFFFFFFFC00004D0 : 57B2                		mov	@(cam_z_pos,r11),r7
(2)  653/FFFFFFFFC00004D2 :                     ; 		mov	@(mdl_data,r14),r0		; Layout object?
(2)  654/FFFFFFFFC00004D2 :                     ; 		shll	r0
(2)  655/FFFFFFFFC00004D2 :                     ; 		cmp/pl	r0
(2)  656/FFFFFFFFC00004D2 :                     ; 		bt	.lay_move
(2)  657/FFFFFFFFC00004D2 :                     ; 		mov	#$FFFFF,r0			; Limit camera movement
(2)  658/FFFFFFFFC00004D2 :                     ; 		and	r0,r5
(2)  659/FFFFFFFFC00004D2 :                     ; ; 		and	r0,r6
(2)  660/FFFFFFFFC00004D2 :                     ; 		and	r0,r7
(2)  661/FFFFFFFFC00004D2 :                     ; .lay_move:
(2)  662/FFFFFFFFC00004D2 : 4519                		shlr8	r5
(2)  663/FFFFFFFFC00004D4 : 4619                		shlr8	r6
(2)  664/FFFFFFFFC00004D6 : 4719                		shlr8	r7
(2)  665/FFFFFFFFC00004D8 : 655F                		exts	r5,r5
(2)  666/FFFFFFFFC00004DA : 666F                		exts	r6,r6
(2)  667/FFFFFFFFC00004DC : 677F                		exts	r7,r7
(2)  668/FFFFFFFFC00004DE : 3258                		sub 	r5,r2
(2)  669/FFFFFFFFC00004E0 : 3368                		sub 	r6,r3
(2)  670/FFFFFFFFC00004E2 : 347C                		add 	r7,r4
(2)  671/FFFFFFFFC00004E4 :                     
(2)  672/FFFFFFFFC00004E4 : 6523                		mov	r2,r5
(2)  673/FFFFFFFFC00004E6 : 6643                		mov	r4,r6
(2)  674/FFFFFFFFC00004E8 : 50B3                  		mov 	@(cam_x_rot,r11),r0
(2)  675/FFFFFFFFC00004EA : 4009                  		shlr2	r0
(2)  676/FFFFFFFFC00004EC : 4001                  		shlr	r0
(2)  677/FFFFFFFFC00004EE : B059                  		bsr	mdlrd_rotate
(2)  678/FFFFFFFFC00004F0 : 4019                		shlr8	r0
(2)  679/FFFFFFFFC00004F2 : 6273                   		mov	r7,r2
(2)  680/FFFFFFFFC00004F4 : 6483                   		mov	r8,r4
(2)  681/FFFFFFFFC00004F6 : 6533                   		mov	r3,r5
(2)  682/FFFFFFFFC00004F8 : 6683                  		mov	r8,r6
(2)  683/FFFFFFFFC00004FA : 50B4                  		mov 	@(cam_y_rot,r11),r0
(2)  684/FFFFFFFFC00004FC : 4009                  		shlr2	r0
(2)  685/FFFFFFFFC00004FE : 4001                  		shlr	r0
(2)  686/FFFFFFFFC0000500 : B050                  		bsr	mdlrd_rotate
(2)  687/FFFFFFFFC0000502 : 4019                		shlr8	r0
(2)  688/FFFFFFFFC0000504 : 6483                   		mov	r8,r4
(2)  689/FFFFFFFFC0000506 : 6523                   		mov	r2,r5
(2)  690/FFFFFFFFC0000508 : 6673                   		mov	r7,r6
(2)  691/FFFFFFFFC000050A : 50B5                   		mov 	@(cam_z_rot,r11),r0
(2)  692/FFFFFFFFC000050C : 4009                  		shlr2	r0
(2)  693/FFFFFFFFC000050E : 4001                  		shlr	r0
(2)  694/FFFFFFFFC0000510 : B048                  		bsr	mdlrd_rotate
(2)  695/FFFFFFFFC0000512 : 4019                		shlr8	r0
(2)  696/FFFFFFFFC0000514 : 6273                   		mov	r7,r2
(2)  697/FFFFFFFFC0000516 : 6383                   		mov	r8,r3
(2)  698/FFFFFFFFC0000518 :                     
(2)  699/FFFFFFFFC0000518 :                     	; Weak perspective projection
(2)  700/FFFFFFFFC0000518 :                     	; this is the best I got,
(2)  701/FFFFFFFFC0000518 :                     	; It breaks on large faces
(2)  702/FFFFFFFFC0000518 : 9842                		mov 	#_JR,r8
(2)  703/FFFFFFFFC000051A : D71F                		mov	#256<<17,r7
(2)  704/FFFFFFFFC000051C : 604B                		neg	r4,r0		; reverse Z
(2)  705/FFFFFFFFC000051E : 4015                		cmp/pl	r0
(2)  706/FFFFFFFFC0000520 : 890C                		bt	.inside
(2)  707/FFFFFFFFC0000522 : E001                		mov	#1,r0
(2)  708/FFFFFFFFC0000524 : 4709                		shlr2	r7
(2)  709/FFFFFFFFC0000526 : 4709                		shlr2	r7
(2)  710/FFFFFFFFC0000528 :                     ; 		shlr	r7
(2)  711/FFFFFFFFC0000528 : 327D                		dmuls	r7,r2
(2)  712/FFFFFFFFC000052A : 000A                		sts	mach,r0
(2)  713/FFFFFFFFC000052C : 021A                		sts	macl,r2
(2)  714/FFFFFFFFC000052E : 220D                		xtrct	r0,r2
(2)  715/FFFFFFFFC0000530 : 337D                		dmuls	r7,r3
(2)  716/FFFFFFFFC0000532 : 000A                		sts	mach,r0
(2)  717/FFFFFFFFC0000534 : 031A                		sts	macl,r3
(2)  718/FFFFFFFFC0000536 : 230D                		xtrct	r0,r3
(2)  719/FFFFFFFFC0000538 : A00C                		bra	.zmulti
(2)  720/FFFFFFFFC000053A : 0009                		nop
(2)  721/FFFFFFFFC000053C :                     .inside:
(2)  722/FFFFFFFFC000053C : 2802                		mov 	r0,@r8
(2)  723/FFFFFFFFC000053E : 1871                		mov 	r7,@(4,r8)
(2)  724/FFFFFFFFC0000540 : 0009                		nop
(2)  725/FFFFFFFFC0000542 : 5781                		mov 	@(4,r8),r7
(2)  726/FFFFFFFFC0000544 : 327D                		dmuls	r7,r2
(2)  727/FFFFFFFFC0000546 : 000A                		sts	mach,r0
(2)  728/FFFFFFFFC0000548 : 021A                		sts	macl,r2
(2)  729/FFFFFFFFC000054A : 220D                		xtrct	r0,r2
(2)  730/FFFFFFFFC000054C : 337D                		dmuls	r7,r3
(2)  731/FFFFFFFFC000054E : 000A                		sts	mach,r0
(2)  732/FFFFFFFFC0000550 : 031A                		sts	macl,r3
(2)  733/FFFFFFFFC0000552 : 230D                		xtrct	r0,r3
(2)  734/FFFFFFFFC0000554 :                     .zmulti:
(2)  735/FFFFFFFFC0000554 : D011                		mov	#Cach_BkupPnt_L,r0
(2)  736/FFFFFFFFC0000556 : 6B06                		mov	@r0+,r11
(2)  737/FFFFFFFFC0000558 : 6A06                		mov	@r0+,r10
(2)  738/FFFFFFFFC000055A : 6906                		mov	@r0+,r9
(2)  739/FFFFFFFFC000055C : 6806                		mov	@r0+,r8
(2)  740/FFFFFFFFC000055E : 6706                		mov	@r0+,r7
(2)  741/FFFFFFFFC0000560 : 6606                		mov	@r0+,r6
(2)  742/FFFFFFFFC0000562 : 6506                		mov	@r0+,r5
(2)  743/FFFFFFFFC0000564 : 4026                		lds	@r0+,pr
(2)  744/FFFFFFFFC0000566 :                     
(2)  745/FFFFFFFFC0000566 :                     	; Set the most far points
(2)  746/FFFFFFFFC0000566 :                     	; for each direction (X,Y,Z)
(2)  747/FFFFFFFFC0000566 : 34D7                		cmp/gt	r13,r4
(2)  748/FFFFFFFFC0000568 : 8B00                		bf	.save_z2
(2)  749/FFFFFFFFC000056A : 6D43                		mov	r4,r13
(2)  750/FFFFFFFFC000056C :                     .save_z2:
(2)  751/FFFFFFFFC000056C : 3457                		cmp/gt	r5,r4
(2)  752/FFFFFFFFC000056E : 8900                		bt	.save_z
(2)  753/FFFFFFFFC0000570 : 6543                		mov	r4,r5
(2)  754/FFFFFFFFC0000572 :                     .save_z:
(2)  755/FFFFFFFFC0000572 : 3287                		cmp/gt	r8,r2
(2)  756/FFFFFFFFC0000574 : 8B00                		bf	.x_lw
(2)  757/FFFFFFFFC0000576 : 6823                		mov	r2,r8
(2)  758/FFFFFFFFC0000578 :                     .x_lw:
(2)  759/FFFFFFFFC0000578 : 3297                		cmp/gt	r9,r2
(2)  760/FFFFFFFFC000057A : 8900                		bt	.x_rw
(2)  761/FFFFFFFFC000057C : 6923                		mov	r2,r9
(2)  762/FFFFFFFFC000057E :                     .x_rw:
(2)  763/FFFFFFFFC000057E : 33B7                		cmp/gt	r11,r3
(2)  764/FFFFFFFFC0000580 : 8B00                		bf	.y_lw
(2)  765/FFFFFFFFC0000582 : 6B33                		mov	r3,r11
(2)  766/FFFFFFFFC0000584 :                     .y_lw:
(2)  767/FFFFFFFFC0000584 : 33C7                		cmp/gt	r12,r3
(2)  768/FFFFFFFFC0000586 : 8900                		bt	.y_rw
(2)  769/FFFFFFFFC0000588 : 6C33                		mov	r3,r12
(2)  770/FFFFFFFFC000058A :                     .y_rw:
(2)  771/FFFFFFFFC000058A : 000B                		rts
(2)  772/FFFFFFFFC000058C : 0009                		nop
(2)  773/FFFFFFFFC000058E :                     		align 4
(2)  774/FFFFFFFFC0000590 : C000 0610 2601 3C00 		ltorg
                    0200 0000 C000 05F0 
                    FF00                
(2)  775/FFFFFFFFC00005A2 :                     
(2)  776/FFFFFFFFC00005A2 :                     ; ------------------------------
(2)  777/FFFFFFFFC00005A2 :                     ; Rotate point
(2)  778/FFFFFFFFC00005A2 :                     ;
(2)  779/FFFFFFFFC00005A2 :                     ; Entry:
(2)  780/FFFFFFFFC00005A2 :                     ; r5: x
(2)  781/FFFFFFFFC00005A2 :                     ; r6: y
(2)  782/FFFFFFFFC00005A2 :                     ; r0: theta
(2)  783/FFFFFFFFC00005A2 :                     ;
(2)  784/FFFFFFFFC00005A2 :                     ; Returns:
(2)  785/FFFFFFFFC00005A2 :                     ; r7: (x  cos @) + (y sin @)
(2)  786/FFFFFFFFC00005A2 :                     ; r8: (x -sin @) + (y cos @)
(2)  787/FFFFFFFFC00005A2 :                     ; ------------------------------
(2)  788/FFFFFFFFC00005A2 :                     
(2)  789/FFFFFFFFC00005A2 :                     		align 4
(2)  790/FFFFFFFFC00005A4 :                     mdlrd_rotate:
(2)  791/FFFFFFFFC00005A4 : 971E                    		mov	#$7FF,r7
(2)  792/FFFFFFFFC00005A6 : 2079                    		and	r7,r0
(2)  793/FFFFFFFFC00005A8 : 4008                   		shll2	r0
(2)  794/FFFFFFFFC00005AA : D70C                		mov	#sin_table,r7
(2)  795/FFFFFFFFC00005AC : D80C                		mov	#sin_table+$800,r8
(2)  796/FFFFFFFFC00005AE : 097E                		mov	@(r0,r7),r9
(2)  797/FFFFFFFFC00005B0 : 0A8E                		mov	@(r0,r8),r10
(2)  798/FFFFFFFFC00005B2 :                     
(2)  799/FFFFFFFFC00005B2 : 3A5D                		dmuls	r5,r10		; x cos @
(2)  800/FFFFFFFFC00005B4 : 071A                		sts	macl,r7
(2)  801/FFFFFFFFC00005B6 : 000A                		sts	mach,r0
(2)  802/FFFFFFFFC00005B8 : 270D                		xtrct	r0,r7
(2)  803/FFFFFFFFC00005BA : 396D                		dmuls	r6,r9		; y sin @
(2)  804/FFFFFFFFC00005BC : 081A                		sts	macl,r8
(2)  805/FFFFFFFFC00005BE : 000A                		sts	mach,r0
(2)  806/FFFFFFFFC00005C0 : 280D                		xtrct	r0,r8
(2)  807/FFFFFFFFC00005C2 : 378C                		add	r8,r7
(2)  808/FFFFFFFFC00005C4 :                     
(2)  809/FFFFFFFFC00005C4 : 699B                		neg	r9,r9
(2)  810/FFFFFFFFC00005C6 : 395D                		dmuls	r5,r9		; x -sin @
(2)  811/FFFFFFFFC00005C8 : 081A                		sts	macl,r8
(2)  812/FFFFFFFFC00005CA : 000A                		sts	mach,r0
(2)  813/FFFFFFFFC00005CC : 280D                		xtrct	r0,r8
(2)  814/FFFFFFFFC00005CE : 3A6D                		dmuls	r6,r10		; y cos @
(2)  815/FFFFFFFFC00005D0 : 091A                		sts	macl,r9
(2)  816/FFFFFFFFC00005D2 : 000A                		sts	mach,r0
(2)  817/FFFFFFFFC00005D4 : 290D                		xtrct	r0,r9
(2)  818/FFFFFFFFC00005D6 : 389C                		add	r9,r8
(2)  819/FFFFFFFFC00005D8 : 000B                 		rts
(2)  820/FFFFFFFFC00005DA : 0009                		nop
(2)  821/FFFFFFFFC00005DC :                     		align 4
(2)  822/FFFFFFFFC00005DC : 0600 2DB0 0600 35B0 		ltorg
                    07FF                
(2)  823/FFFFFFFFC00005E6 :                     
(2)  824/FFFFFFFFC00005E6 :                     ; ------------------------------------------------
(2)  825/FFFFFFFFC00005E6 :                     
(2)  826/FFFFFFFFC00005E6 :                     			align 4
(2)  827/FFFFFFFFC00005E8 :                     MarsSnd_RvMode		ds.l 1
(2)  828/FFFFFFFFC00005EC :                     MarsSnd_Active		ds.l 1
(2)  829/FFFFFFFFC00005F0 :                     Cach_BkupPnt_L		ds.l 8			;
(2)  830/FFFFFFFFC0000610 :                     Cach_BkupPnt_S		ds.l 0			; <-- Reads backwards
(2)  831/FFFFFFFFC0000610 :                     Cach_BkupS_L		ds.l 5			;
(2)  832/FFFFFFFFC0000624 :                     Cach_BkupS_S		ds.l 0
(2)  833/FFFFFFFFC0000624 :                     Cach_CurrPlygn		ds.b sizeof_polygn	; Current polygon in modelread
(2)  834/FFFFFFFFC000065C :                     MarsSnd_PwmChnls	ds.b sizeof_sndchn*MAX_PWMCHNL
(2)  835/FFFFFFFFC0000774 :                     MarsSnd_PwmControl	ds.b $38		; 7 bytes per channel.
(2)  836/FFFFFFFFC00007AC :                     
(2)  837/FFFFFFFFC00007AC :                     ; ------------------------------------------------
(2)  838/ 6002DB0 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2)  839/ 6002DB0 :                     
(2)  840/ 6002DB0 :                     		align 4
(2)  841/ 6002DB0 :                     CACHE_SLAVE_E:
(2)  845/ 6002DB0 :                     
(1) 2237/ 6002DB0 :                     
(1) 2238/ 6002DB0 :                     ; ====================================================================
(1) 2239/ 6002DB0 :                     ; ----------------------------------------------------------------
(1) 2240/ 6002DB0 :                     ; Data
(1) 2241/ 6002DB0 :                     ; ----------------------------------------------------------------
(1) 2242/ 6002DB0 :                     
(1) 2243/ 6002DB0 :                     		align 4
(1) 2244/ 6002DB0 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 2245/ 60055B0 :                     m_ascii		binclude "system/mars/data/m_ascii.bin"
(1) 2246/ 6006DB0 :                     
(1) 2247/ 6006DB0 :                     		align 4
(1) 2248/ 6006DB0 :                     		include "data/mars_sdram.asm"
(2)    1/ 6006DB0 :                     ; ====================================================================
(2)    2/ 6006DB0 :                     ; ----------------------------------------------------------------
(2)    3/ 6006DB0 :                     ; SH2 SDRAM data
(2)    4/ 6006DB0 :                     ; 
(2)    5/ 6006DB0 :                     ; This data is stored on SDRAM, always available to use on the 32X
(2)    6/ 6006DB0 :                     ; side and can be rewritible, but it is smaller than ROM
(2)    7/ 6006DB0 :                     ;
(2)    8/ 6006DB0 :                     ; Your palettes, textures, models go here
(2)    9/ 6006DB0 :                     ; PWM samples can be used here but those take a lot of space...
(2)   10/ 6006DB0 :                     ; use ROM (mars_rom.asm) instead, those are RV-protected on SH2
(2)   11/ 6006DB0 :                     ; ----------------------------------------------------------------
(2)   12/ 6006DB0 :                     
(2)   13/ 6006DB0 :                     	align 4
(2)   14/ 6006DB0 :                     
(2)   15/ 6006DB0 :                     ; --------------------------------------------------------
(2)   16/ 6006DB0 :                     ; Models
(2)   17/ 6006DB0 :                     ; --------------------------------------------------------
(2)   18/ 6006DB0 :                     
(2)   19/ 6006DB0 :                     	include "data/mars/objects/mdl/test/head.asm"
(3)    1/ 6006DB0 :                     MarsObj_test:
(3)    2/ 6006DB0 : 0065 007D           		dc.w 101,125
(3)    3/ 6006DB4 : 0600 6DC4 0600 73A0 		dc.l .vert,.face,.vrtx,.mtrl
                    0600 7AC0 0600 7CC0 
(3)    4/ 6006DC4 :                     .vert:		binclude "data/mars/objects/mdl/test/vert.bin"
(3)    5/ 60073A0 :                     .face:		binclude "data/mars/objects/mdl/test/face.bin"
(3)    6/ 6007AC0 :                     .vrtx:		binclude "data/mars/objects/mdl/test/vrtx.bin"
(3)    7/ 6007CC0 :                     .mtrl:		include "data/mars/objects/mdl/test/mtrl.asm"
(4)    1/ 6007CC0 : 020D 1398           	 dc.l Textr_test_yui
(4)    2/ 6007CC4 : 01F4                	 dc.w 500
(4)    3/ 6007CC6 : 0000                	 dc.w 0
(4)    4/ 6007CC8 :                     
(3)    8/ 6007CC8 :                     		align 4
(2)   20/ 6007CC8 :                     
(1) 2249/ 6007CC8 :                     
(1) 2250/ 6007CC8 :                     ; ====================================================================
(1) 2251/ 6007CC8 :                     ; ----------------------------------------------------------------
(1) 2252/ 6007CC8 :                     ; MARS SH2 RAM
(1) 2253/ 6007CC8 :                     ; ----------------------------------------------------------------
(1) 2254/ 6007CC8 :                     
(1) 2255/ 6007CC8 :                     		align $10
(1) 2256/ 6007CD0 :                     SH2_RAM:
(1) 2257/ 6007CD0 : (MACRO)             		struct SH2_RAM|TH
(1) 2257/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2257/   2E090 :                                     dephase
(1) 2257/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2257/26007CD0 :                                     phase SH2_RAM|TH
(1) 2264/26007CD0 :                     MarsRam_System		ds.b (sizeof_marssys-MarsRam_System)
(1) 2265/26008AC0 :                     MarsRam_Sound		ds.b (sizeof_marssnd-MarsRam_Sound)
(1) 2266/26008E40 :                     MarsRam_Video		ds.b (sizeof_marsvid-MarsRam_Video)
(1) 2267/2601F240 :                     sizeof_marsram		ds.l 0
(1) 2269/2601F240 :                     
(1) 2270/2601F240 :                     .here:
(1) 2274/2601F240 : (MACRO)             		finish
(1) 2274/26007CD0 :                                     !org GLBL_LASTORG
(1) 2274/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2275/ 6007CD0 :                     
(1) 2276/ 6007CD0 :                     ; ====================================================================
(1) 2277/ 6007CD0 :                     ; ----------------------------------------------------------------
(1) 2278/ 6007CD0 :                     ; MARS Sound RAM
(1) 2279/ 6007CD0 :                     ; ----------------------------------------------------------------
(1) 2280/ 6007CD0 :                     
(1) 2281/ 6007CD0 : (MACRO)             			struct MarsRam_Sound
(1) 2281/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2281/   2E090 :                                     dephase
(1) 2281/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2281/26008AC0 :                                     phase MARSRAM_SOUND
(1) 2282/26008AC0 :                     MarsSnd_PwmCache	ds.b $80*MAX_PWMCHNL
(1) 2283/26008E40 :                     sizeof_marssnd		ds.l 0
(1) 2284/26008E40 : (MACRO)             			finish
(1) 2284/26008AC0 :                                     !org GLBL_LASTORG
(1) 2284/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2285/ 6007CD0 :                     
(1) 2286/ 6007CD0 :                     ; ====================================================================
(1) 2287/ 6007CD0 :                     ; ----------------------------------------------------------------
(1) 2288/ 6007CD0 :                     ; MARS Video RAM
(1) 2289/ 6007CD0 :                     ;
(1) 2290/ 6007CD0 :                     ; RAM_Mars_ScrnBuff is recycled for all pseudo-screen modes,
(1) 2291/ 6007CD0 :                     ; check MAX_SCRNBUFF to set the maximum size.
(1) 2292/ 6007CD0 :                     ; ----------------------------------------------------------------
(1) 2293/ 6007CD0 :                     
(1) 2294/ 6007CD0 : (MACRO)             			struct MarsRam_Video
(1) 2294/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2294/   2E090 :                                     dephase
(1) 2294/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2294/26008E40 :                                     phase MARSRAM_VIDEO
(1) 2295/26008E40 :                     RAM_Mars_SVdpDrwList	ds.b sizeof_plypz*MAX_SVDP_PZ		; Sprites / Polygon pieces
(1) 2296/2600CA40 :                     RAM_Mars_SVdpDrwList_e	ds.l 0					; (END point label)
(1) 2297/2600CA40 :                     RAM_Mars_ScrnBuff	ds.b MAX_SCRNBUFF			; Single buffer for all screen modes
(1) 2298/2601F240 :                     sizeof_marsvid		ds.l 0
(1) 2299/2601F240 : (MACRO)             			finish
(1) 2299/26008E40 :                                     !org GLBL_LASTORG
(1) 2299/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2300/ 6007CD0 :                     
(1) 2301/ 6007CD0 :                     ; --------------------------------------------------------
(1) 2302/ 6007CD0 :                     ; per-screen RAM
(1) 2303/ 6007CD0 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2303/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2303/   2E090 :                                     dephase
(1) 2303/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2303/2600CA40 :                                     phase RAM_MARS_SCRNBUFF
(1) 2304/2600CA40 :                     RAM_Mars_RdrwBlocks	ds.b (512/4)*(256/4)	; Block redraw byte-flags
(1) 2305/2600EA40 :                     RAM_Mars_UD_Pixels	ds.b 384*64		; RAM pixel-side
(1) 2306/26014A40 :                     RAM_Mars_LR_Pixels	ds.b 64*256
(1) 2307/26018A40 :                     RAM_Mars_BgBuffScrl	ds.b sizeof_marsbg
(1) 2308/26018A80 :                     sizeof_scrn02		ds.l 0
(1) 2309/26018A80 : (MACRO)             			finish
(1) 2309/2600CA40 :                                     !org GLBL_LASTORG
(1) 2309/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2310/ 6007CD0 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2310/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2310/   2E090 :                                     dephase
(1) 2310/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2310/2600CA40 :                                     phase RAM_MARS_SCRNBUFF
(1) 2311/2600CA40 :                     RAM_Mars_BgBuffScale_S	ds.l 8
(1) 2312/2600CA60 :                     sizeof_scrn03		ds.l 0
(1) 2313/2600CA60 : (MACRO)             			finish
(1) 2313/2600CA40 :                                     !org GLBL_LASTORG
(1) 2313/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2314/ 6007CD0 : (MACRO)             			struct RAM_Mars_ScrnBuff
(1) 2314/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2314/   2E090 :                                     dephase
(1) 2314/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2314/2600CA40 :                                     phase RAM_MARS_SCRNBUFF
(1) 2315/2600CA40 :                     RAM_Mars_Polygons_0	ds.b sizeof_polygn*MAX_FACES
(1) 2316/26010240 :                     RAM_Mars_Polygons_1	ds.b sizeof_polygn*MAX_FACES
(1) 2317/26013A40 :                     RAM_Mars_Objects	ds.b sizeof_mdlobj*MAX_MODELS
(1) 2318/26013C00 :                     RAM_Mars_ObjCamera	ds.b sizeof_camera		; 3D Camera buffer
(1) 2319/26013C18 :                     RAM_Mars_PlgnList_0	ds.l 2*MAX_FACES		; polygondata, Zpos
(1) 2320/26014418 :                     RAM_Mars_PlgnList_1	ds.l 2*MAX_FACES
(1) 2321/26014C18 :                     RAM_Mars_PlgnNum_0	ds.l 1				; Number of polygons to process
(1) 2322/26014C1C :                     RAM_Mars_PlgnNum_1	ds.l 1
(1) 2323/26014C20 :                     sizeof_scrn04		ds.l 0
(1) 2324/26014C20 : (MACRO)             			finish
(1) 2324/2600CA40 :                                     !org GLBL_LASTORG
(1) 2324/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2334/ 6007CD0 :                     
(1) 2335/ 6007CD0 :                     ; ====================================================================
(1) 2336/ 6007CD0 :                     ; ----------------------------------------------------------------
(1) 2337/ 6007CD0 :                     ; MARS System RAM
(1) 2338/ 6007CD0 :                     ; ----------------------------------------------------------------
(1) 2339/ 6007CD0 :                     
(1) 2340/ 6007CD0 : (MACRO)             			struct MarsRam_System
(1) 2340/ 6007CD0 : =$6007CD0           GLBL_LASTPC     set *
(1) 2340/   2E090 :                                     dephase
(1) 2340/   2E090 : =$2E090             GLBL_LASTORG    set *
(1) 2340/26007CD0 :                                     phase MARSRAM_SYSTEM
(1) 2341/26007CD0 :                     RAM_Mars_DreqDma	ds.b sizeof_dreq	; DREQ data recieved from Genesis in DMA ***DO NOT READ FROM HERE***
(1) 2342/26008330 :                     RAM_Mars_DreqRead	ds.b sizeof_dreq	; Copy of DREQ for reading.
(1) 2343/26008990 :                     RAM_Mars_Global		ds.l sizeof_MarsGbl	; gbr values go here
(1) 2344/26008AC0 :                     sizeof_marssys		ds.l 0
(1) 2345/26008AC0 : (MACRO)             			finish
(1) 2345/26007CD0 :                                     !org GLBL_LASTORG
(1) 2345/ 6007CD0 :                                     phase GLBL_LASTPC
(1) 2346/ 6007CD0 :                     
(1) 2347/ 6007CD0 :                     ; ====================================================================
(1) 2348/ 6007CD0 :                     
     119/ 6007CD0 :                     		cpu 68000
     120/ 6007CD0 :                     		padding off
     121/   2E090 :                     		dephase
     122/   2E090 :                     MARS_RAMDATA_E:
     123/   2E090 :                     		align 4
     124/   2E090 :                     
     125/   2E090 :                     ; ====================================================================
     126/   2E090 :                     ; --------------------------------------------------------
     127/   2E090 :                     ; 32X data for SH2's ROM view
     128/   2E090 :                     ; This section will be gone if RV=1
     129/   2E090 :                     ; --------------------------------------------------------
     130/   2E090 :                     
     131/ 202E090 :                     		phase CS1+*
     132/ 202E090 :                     		align 4
     133/ 202E090 :                     		include "data/mars_rom.asm"
(1)    1/ 202E090 :                     ; ====================================================================
(1)    2/ 202E090 :                     ; ----------------------------------------------------------------
(1)    3/ 202E090 :                     ; SH2 ROM data
(1)    4/ 202E090 :                     ;
(1)    5/ 202E090 :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 202E090 :                     ; BUT keep in mind that this entire section will be gone
(1)    7/ 202E090 :                     ; if the Genesis performs DMA-to-VDP Transfers
(1)    8/ 202E090 :                     ; which requires RV=1 (Revert ROM to original position)
(1)    9/ 202E090 :                     ; ***EMULATORS IGNORE THIS LIMITATION***
(1)   10/ 202E090 :                     ;
(1)   11/ 202E090 :                     ; Only access here on these conditions:
(1)   12/ 202E090 :                     ; - Stop all tracks that use PWM samples
(1)   13/ 202E090 :                     ; - If you wanna keep any tracks active: set 1 to marsBlock
(1)   14/ 202E090 :                     ;   in the Z80 driver, all tracks will continue playing using
(1)   15/ 202E090 :                     ;   only the PSG and FM instruments
(1)   16/ 202E090 :                     ;   (TODO: check how it peforms)
(1)   17/ 202E090 :                     ;
(1)   18/ 202E090 :                     ; The PWM samples are safe to use with the implementation
(1)   19/ 202E090 :                     ; of a sample-backup routine that the 68K requests before
(1)   20/ 202E090 :                     ; doing DMA
(1)   21/ 202E090 :                     ; ----------------------------------------------------------------
(1)   22/ 202E090 :                     
(1)   23/ 202E090 :                     	align 4
(1)   24/ 202E090 :                     
(1)   25/ 202E090 :                     ; --------------------------------------------------------
(1)   26/ 202E090 :                     ; PWM samples
(1)   27/ 202E090 :                     ; --------------------------------------------------------
(1)   28/ 202E090 :                     
(1)   29/ 202E090 :                     	include "sound/smpl_pwm.asm"
(2)    1/ 202E090 :                     ; ====================================================================
(2)    2/ 202E090 :                     ; PWM samples
(2)    3/ 202E090 :                     ;
(2)    4/ 202E090 :                     ; For SH2's visible areas: ROM ($02000000) or SDRAM ($06000000)
(2)    5/ 202E090 :                     ;
(2)    6/ 202E090 :                     ; - SDRAM is safest but it has very LOW storage
(2)    7/ 202E090 :                     ; - ROM area can use all the 4 Megabytes of storage, BUT when the
(2)    8/ 202E090 :                     ; RV bit is set: the sample data will be lost. Luckily
(2)    9/ 202E090 :                     ; a "Wave-backup" feature is implemented to copy a small
(2)   10/ 202E090 :                     ; amount of bytes of the sample data into a safe place for playback
(2)   11/ 202E090 :                     ; while RV bit is active.
(2)   12/ 202E090 :                     ;
(2)   13/ 202E090 :                     ; Do note that if the RV bit stays active too long it will ran out of
(2)   14/ 202E090 :                     ; backup data and the sample will play trash bytes.
(2)   15/ 202E090 :                     ; ====================================================================
(2)   16/ 202E090 :                     
(2)   17/ 202E090 :                     ; Special sample data macro
(2)   18/ 202E090 :                     gPwm macro locate,loop
(2)   19/ 202E090 :                     .start
(2)   20/ 202E090 :                     	dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)	; length
(2)   21/ 202E090 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(2)   22/ 202E090 :                     	binclude locate,$2C	; actual data
(2)   23/ 202E090 :                     .end
(2)   24/ 202E090 :                     	align 4			; align 4 for pwm's
(2)   25/ 202E090 :                     	endm
(2)   26/ 202E090 :                     
(2)   27/ 202E090 :                     ; --------------------------------------------------------
(2)   28/ 202E090 :                     	align 4			; FIRST ALIGN FOR PWMs
(2)   29/ 202E090 :                     
(2)   30/ 202E090 :                     ; PwmIns_String_1:
(2)   31/ 202E090 :                     ; 	gPwm "sound/instr/smpl/string_1.wav",0
(2)   32/ 202E090 :                     ; PwmIns_Tropical:
(2)   33/ 202E090 :                     ; 	gPwm "sound/instr/smpl/tropical.wav",0
(2)   34/ 202E090 :                     
(2)   35/ 202E090 :                     
(2)   36/ 202E090 :                     SmpIns_Bell_Ice:
(2)   37/ 202E090 : (MACRO)             	gSmpl "sound/instr/smpl/bell_ice.wav",0
(2)   37/ 202E090 :                     .start
(2)   37/ 202E090 : 2A3B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   37/ 202E093 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   37/ 202E096 :                             binclude "sound/instr/smpl/bell_ice.wav",$2C     ; actual data
(2)   37/ 2031BBA :                     .end
(2)   38/ 2031BBA :                     SmpIns_Brass1_Hi:
(2)   39/ 2031BBA : (MACRO)             	gSmpl "sound/instr/smpl/brass1_hi.wav",0
(2)   39/ 2031BBA :                     .start
(2)   39/ 2031BBA : CA7B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   39/ 2031BBD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   39/ 2031BC0 :                             binclude "sound/instr/smpl/brass1_hi.wav",$2C     ; actual data
(2)   39/ 2039784 :                     .end
(2)   40/ 2039784 :                     SmpIns_Brass1_Low:
(2)   41/ 2039784 : (MACRO)             	gSmpl "sound/instr/smpl/brass1_low.wav",0
(2)   41/ 2039784 :                     .start
(2)   41/ 2039784 : CA7B 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   41/ 2039787 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   41/ 203978A :                             binclude "sound/instr/smpl/brass1_low.wav",$2C     ; actual data
(2)   41/ 204134E :                     .end
(2)   42/ 204134E :                     SmpIns_Forest_1:
(2)   43/ 204134E : (MACRO)             	gSmpl "sound/instr/smpl/forest1.wav",0
(2)   43/ 204134E :                     .start
(2)   43/ 204134E : EC48 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   43/ 2041351 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   43/ 2041354 :                             binclude "sound/instr/smpl/forest1.wav",$2C     ; actual data
(2)   43/ 2045C3A :                     .end
(2)   44/ 2045C3A :                     SmpIns_Kick_jam:
(2)   45/ 2045C3A : (MACRO)             	gSmpl "sound/instr/smpl/kick_jam.wav",0
(2)   45/ 2045C3A :                     .start
(2)   45/ 2045C3A : CA0A 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   45/ 2045C3D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   45/ 2045C40 :                             binclude "sound/instr/smpl/kick_jam.wav",$2C     ; actual data
(2)   45/ 2046704 :                     .end
(2)   46/ 2046704 :                     SmpIns_Snare_jam:
(2)   47/ 2046704 : (MACRO)             	gSmpl "sound/instr/smpl/snare_jam.wav",0
(2)   47/ 2046704 :                     .start
(2)   47/ 2046704 : 6A09 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   47/ 2046707 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   47/ 204670A :                             binclude "sound/instr/smpl/snare_jam.wav",$2C     ; actual data
(2)   47/ 204706E :                     .end
(2)   48/ 204706E :                     SmpIns_SnrTom_1:
(2)   49/ 204706E : (MACRO)             	gSmpl "sound/instr/smpl/snrtom_1.wav",0
(2)   49/ 204706E :                     .start
(2)   49/ 204706E : A614 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   49/ 2047071 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   49/ 2047074 :                             binclude "sound/instr/smpl/snrtom_1.wav",$2C     ; actual data
(2)   49/ 2048514 :                     .end
(2)   50/ 2048514 :                     SmpIns_PIANO_1:
(2)   51/ 2048514 : (MACRO)             	gSmpl "sound/instr/smpl/PIANO__1.wav",0
(2)   51/ 2048514 :                     .start
(2)   51/ 2048514 : 1A47 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   51/ 2048517 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   51/ 204851A :                             binclude "sound/instr/smpl/PIANO__1.wav",$2C     ; actual data
(2)   51/ 204CC2E :                     .end
(2)   52/ 204CC2E :                     SmpIns_SSTR162A:
(2)   53/ 204CC2E : (MACRO)             	gSmpl "sound/instr/smpl/SSTR162A.wav",0
(2)   53/ 204CC2E :                     .start
(2)   53/ 204CC2E : 6A27 00                     dc.b ((.end-.start)&$FF),(((.end-.start)>>8)&$FF),(((.end-.start)>>16)&$FF)     ; length
(2)   53/ 204CC31 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   53/ 204CC34 :                             binclude "sound/instr/smpl/SSTR162A.wav",$2C     ; actual data
(2)   53/ 204F398 :                     .end
(2)   54/ 204F398 :                     
(2)   55/ 204F398 :                     
(2)   56/ 204F398 :                     
(1)   30/ 204F398 :                     
(1)   31/ 204F398 :                     ; --------------------------------------------------------
(1)   32/ 204F398 :                     ; Graphics
(1)   33/ 204F398 :                     ; --------------------------------------------------------
(1)   34/ 204F398 :                     
(1)   35/ 204F398 :                     	include "data/mars/graphics.asm"
(2)    1/ 204F398 :                     ; ====================================================================
(2)    2/ 204F398 :                     ; ----------------------------------------------------------------
(2)    3/ 204F398 :                     ; Put your 32X graphics here, indexed or direct
(2)    4/ 204F398 :                     ;
(2)    5/ 204F398 :                     ; These are located on the SH2's ROM area, this will be gone
(2)    6/ 204F398 :                     ; if RV is set to 1
(2)    7/ 204F398 :                     ;
(2)    8/ 204F398 :                     ; Labels MUST be aligned by 4
(2)    9/ 204F398 :                     ; ----------------------------------------------------------------
(2)   10/ 204F398 :                     
(2)   11/ 204F398 :                     		align 4
(2)   12/ 204F398 :                     TESTMARS_BG:
(2)   13/ 204F398 :                     		binclude "data/mars/tests/test_art.bin"
(2)   14/ 2061F98 :                     		align 4
(2)   15/ 2061F98 :                     TESTMARS_BG2:
(2)   16/ 2061F98 :                     		binclude "data/mars/tests/test2_art.bin"
(2)   17/ 2073798 :                     		align 4
(2)   18/ 2073798 :                     TESTMARS_DIRECT_1:
(2)   19/ 2073798 :                     		binclude "data/mars/tests/direct/frame0_art.bin"
(2)   20/ 2092B98 :                     		align 4
(2)   21/ 2092B98 :                     TESTMARS_DIRECT_2:
(2)   22/ 2092B98 :                     		binclude "data/mars/tests/direct/frame1_art.bin"
(2)   23/ 20B1F98 :                     		align 4
(2)   24/ 20B1F98 :                     TESTMARS_DIRECT_3:
(2)   25/ 20B1F98 :                     		binclude "data/mars/tests/direct/frame2_art.bin"
(2)   26/ 20D1398 :                     		align 4
(2)   27/ 20D1398 :                     
(2)   28/ 20D1398 :                     Textr_test_yui:
(2)   29/ 20D1398 :                     		binclude "data/mars/objects/mtrl/yui_art.bin"
(2)   30/ 2123418 :                     		align 4
(2)   31/ 2123418 :                     
(2)   32/ 2123418 :                     SuperSpr_Test:
(2)   33/ 2123418 :                     	binclude "data/mars/tests/sprites/sprites_art.bin"
(2)   34/ 2126418 :                     	align 4
(2)   35/ 2126418 :                     
(1)   36/ 2126418 :                     
     134/  126418 :                     		dephase
     135/  126418 :                     
     136/  126418 :                     ; ====================================================================
     137/  126418 :                     ; ---------------------------------------------
     138/  126418 :                     ; End
     139/  126418 :                     ; ---------------------------------------------
     140/  126418 :                     
     141/  126418 :                     ROM_END:
     142/  126418 :                     		align $8000
     143/  128000 :                     
 AS V1.42 Beta [Bld 118] - source file mars.asm - page 2 - 5/13/2022 20:32:21


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*ART_BGTEST :                 23280 C | *ART_BGTEST_E :               263C0 C |
 ART_EMI :                    18000 C | *ART_EMI_E :                  1AB80 C |
*ART_FGTEST :                 21000 C | *ART_FGTEST_E :               23280 C |
 ASCII_FONT :                 20000 C |  ASCII_FONT_E :               21000 C |
 ASCII_PAL :                 882A9C C | *ASCII_PAL_E :               882ABC C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
*BITCLICKL :                      1 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      0 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - | *BITJOYB :                        4 - |
*BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - |  BITJOYX :                        A - |
 BITJOYY :                        9 - | *BITJOYZ :                        8 - |
 BITMAPMD :                       1 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BRANCHEXT :                      0 - |
 CACHE_MSTR_PLGN :          6001E44 C |
 CACHE_MSTR_PLGN.EXIT :                                    FFFFFFFFC0000122 C |
 CACHE_MSTR_PLGN.FIND_TOP :                                FFFFFFFFC0000098 C |
 CACHE_MSTR_PLGN.HAS_PLGN :                                FFFFFFFFC000001C C |
 CACHE_MSTR_PLGN.IS_HIGH :                                 FFFFFFFFC00000AA C |
 CACHE_MSTR_PLGN.IS_LOW :                                  FFFFFFFFC00000A0 C |
 CACHE_MSTR_PLGN.LEFTH :                                   FFFFFFFFC00000EA C |
 CACHE_MSTR_PLGN.LEFTH2 :                                  FFFFFFFFC000011A C |
 CACHE_MSTR_PLGN.NEXT_PZ :                                 FFFFFFFFC00000CC C |
 CACHE_MSTR_PLGN.SETPNTS :                                 FFFFFFFFC0000066 C |
 CACHE_MSTR_PLGN.SRC_PNTS :                                FFFFFFFFC000007A C |
*CACHE_MSTR_PLGN.START_MATH :                              FFFFFFFFC0000088 C |
 CACHE_MSTR_PLGN.TRINGL :                                  FFFFFFFFC0000058 C |
*CACHE_MSTR_PLGN.WDG_PZFULL :                              FFFFFFFFC0000018 C |
 CACHE_MSTR_PLGN.YTRINGL :                                 FFFFFFFFC0000090 C |
 CACHE_MSTR_PLGN_E :        6002604 C |  CACHE_MSTR_SCRL :          6001864 C |
 CACHE_MSTR_SCRL.FINISH_NOW :                              FFFFFFFFC00000B8 C |
 CACHE_MSTR_SCRL_E :        6001E44 C |  CACHE_SLAVE :              6002604 C |
 CACHE_SLAVE_E :            6002DB0 C |  CACH_BGFBPOS_H :  FFFFFFFFC00005DC C |
 CACH_BGFBPOS_H.END :                                      FFFFFFFFC00005E0 C |
 CACH_BGFBPOS_V :  FFFFFFFFC00005D8 C |  CACH_BKUPPNT_L :  FFFFFFFFC00005F0 C |
 CACH_BKUPPNT_S :  FFFFFFFFC0000610 C |  CACH_BKUPS_L :    FFFFFFFFC0000610 C |
 CACH_BKUPS_S :    FFFFFFFFC0000624 C |  CACH_BKUP_LB :    FFFFFFFFC0000778 C |
 CACH_BKUP_LPZ :   FFFFFFFFC00007A4 C |  CACH_BKUP_LT :    FFFFFFFFC0000764 C |
 CACH_BKUP_S :     FFFFFFFFC00007A4 C |  CACH_BKUP_SPZ :   FFFFFFFFC00007C0 C |
 CACH_BKUP_SPZ.END :                                       FFFFFFFFC00007C0 C |
 CACH_CURRPLYGN :  FFFFFFFFC0000624 C |  CACH_DDA_LAST :   FFFFFFFFC0000714 C |
 CACH_DDA_SRC :    FFFFFFFFC0000724 C |  CACH_DDA_SRC_L :  FFFFFFFFC0000744 C |
 CACH_DDA_SRC_R :  FFFFFFFFC0000754 C |  CACH_DDA_TOP :    FFFFFFFFC0000704 C |
*CACH_FBDATA :     FFFFFFFFC0000594 C | *CACH_FBPOS :      FFFFFFFFC0000590 C |
*CACH_FBPOS_Y :    FFFFFFFFC000058C C | *CACH_INTRL_H :    FFFFFFFFC0000588 C |
 CACH_INTRL_SIZE : FFFFFFFFC0000598 C |  CACH_INTRL_W :    FFFFFFFFC0000584 C |
 CACH_PLGNPZCOPY : FFFFFFFFC0000644 C |  CACH_PZCOPY :     FFFFFFFFC0000554 C |
 CACH_SPRBKUP_LB : FFFFFFFFC000059C C |  CACH_SPRBKUP_S :  FFFFFFFFC00005C8 C |
 CACH_XHEAD_L :    FFFFFFFFC00005C8 C |  CACH_XHEAD_R :    FFFFFFFFC00005CC C |
 CACH_YHEAD_D :    FFFFFFFFC00005D4 C |  CACH_YHEAD_U :    FFFFFFFFC00005D0 C |
 CAM_X_POS :                      0 C |  CAM_X_ROT :                      C C |
 CAM_Y_POS :                      4 C |  CAM_Y_ROT :                     10 C |
 CAM_Z_POS :                      8 C |  CAM_Z_ROT :                     14 C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                     FAA C |  CHIP_ENV.ATKEND :             107F C |
*CHIP_ENV.ATKZERO :            1082 C |  CHIP_ENV.CHK2 :               1088 C |
 CHIP_ENV.CHK4 :               10BD C |  CHIP_ENV.CKOF :                FD8 C |
 CHIP_ENV.CKON :                FF5 C |  CHIP_ENV.COPYOPS :            11E5 C |
 CHIP_ENV.COPYOPS3 :           1271 C |  CHIP_ENV.COPY_1 :             1245 C |
*CHIP_ENV.DECTMR :             108C C |  CHIP_ENV.DKADD :              10A6 C |
 CHIP_ENV.DKSAV :              10AE C |  CHIP_ENV.DKYEND :             10B3 C |
 CHIP_ENV.DO_VOL :             12DF C |  CHIP_ENV.ENVPROC :            1050 C |
 CHIP_ENV.FM_CHNL :            116C C | *CHIP_ENV.FM_CHNLVOL :         129D C |
 CHIP_ENV.FM_INSUPD :          1234 C |  CHIP_ENV.FM_INS_EX :          1297 C |
 CHIP_ENV.FM_KEYCUT :          11FF C |  CHIP_ENV.FM_KEYOFF :          1214 C |
*CHIP_ENV.FM_PANSET :          1221 C |  CHIP_ENV.FM_PANUPD :          121B C |
 CHIP_ENV.FM_VOLUPD :          1299 C |  CHIP_ENV.KILLENV :            10D3 C |
 CHIP_ENV.NEXTFM_1 :           1115 C |  CHIP_ENV.NOMIDC :             112A C |
 CHIP_ENV.NOTFM3 :             11F0 C |  CHIP_ENV.NOUPD :              10FF C |
 CHIP_ENV.NSKIP :              1047 C |  CHIP_ENV.PSTEAL :             1036 C |
 CHIP_ENV.REQ_DAC :            1159 C |  CHIP_ENV.REQ_PITCH :          1166 C |
 CHIP_ENV.SETHAT :             1041 C |  CHIP_ENV.TNMODE :             102B C |
 CHIP_ENV.VEDLP :              10DB C |  CHIP_ENV.VLMUCH :             10F0 C |
 CHIP_ENV.VLOOP :               FB5 C |  CHIP_ENV.VMUCH :              12E9 C |
 CHIP_ENV.WRFREQ :             1007 C |  CHNL_CHIP :                      0 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     1 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - | *COMM1 :                         21 - |
 COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
 COMM6 :                         26 - | *COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                   1E00 C |  COMMZREAD :                     1E C |
 COMMZROMBLK :                   1C C |  COMMZROMRD :                    1D C |
 COMMZWRITE :                    1F C | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFA622 - |  CONTROLLER_2 :    FFFFFFFFFFFFA632 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CURRINSDATA :                 1E40 C |  CURRINSPOS :                  1E44 C |
 CURRTBLPOS :                  1E42 C |  CURRTICKBITS :                  2F C |
 CURRTRKCTRL :                 1E46 C |  CYCLE :                         32 - |
 DACCOM :                      17BC C | *DACINS_KICK :               915948 C |
*DACINS_SNARE_LOBO :         913444 C |  DACINS_SNARE_MAGN :         91456E C |
 DACINS_WEGOT_CRASH :        91077A C |  DACINS_WEGOT_KICK :         910000 C |
 DAC_FILL :                      20 C |  DAC_FIRSTFILL :               1367 C |
 DAC_ME :                         8 C |  DAC_OFF :                     131E C |
 DAC_ON :                      1309 C |  DAC_PLAY :                    1333 C |
 DAC_REFILL :                  136B C |  DAC_REFILL.DAC_OVER :         13B9 C |
 DAC_REFILL.FDF7 :             142B C |  DAC_REFILL.FDF72 :            13E4 C |
 DAC_REFILL.FDFRETURN :        142E C | *DAC_REFILL.KEEPCNTR :         1392 C |
*DATE :                   5/13/2022 - |  DDACCNTR :                    1E5A C |
 DDACFIFOMID :                 1E5D C |  DDACPNTR :                    1E57 C |
*DISPENBL :                      40 - |  DKY :                            C - |
 DMACODE_END :               8831E2 C |  DMACODE_START :             8830BA C |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DPLC_NICOLE :               883CA4 C |  DPLC_NICOLE.DPLC :          883CA4 C |
 DPLC_NICOLE.FRAME_0 :       883CC4 C |  DPLC_NICOLE.FRAME_1 :       883CCC C |
 DPLC_NICOLE.FRAME_10 :      883D16 C |  DPLC_NICOLE.FRAME_11 :      883D1E C |
 DPLC_NICOLE.FRAME_12 :      883D26 C |  DPLC_NICOLE.FRAME_13 :      883D2E C |
 DPLC_NICOLE.FRAME_14 :      883D36 C |  DPLC_NICOLE.FRAME_15 :      883D3E C |
 DPLC_NICOLE.FRAME_2 :       883CD6 C |  DPLC_NICOLE.FRAME_3 :       883CDE C |
 DPLC_NICOLE.FRAME_4 :       883CE6 C |  DPLC_NICOLE.FRAME_5 :       883CEE C |
 DPLC_NICOLE.FRAME_6 :       883CF6 C |  DPLC_NICOLE.FRAME_7 :       883CFE C |
 DPLC_NICOLE.FRAME_8 :       883D06 C |  DPLC_NICOLE.FRAME_9 :       883D0E C |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DREQ_OBJECTS :                 220 C |
 DREQ_PALETTE :                   0 C |  DREQ_SCLDATA :                   0 C |
 DREQ_SCLDX :                    14 C |  DREQ_SCLDY :                    18 C |
 DREQ_SCLHEIGHT :                10 C |  DREQ_SCLMODE :                  1C C |
 DREQ_SCLWIDTH :                  C C |  DREQ_SCLX :                      4 C |
 DREQ_SCLY :                      8 C |  DREQ_SCRN1_DATA :                0 C |
 DREQ_SCRN1_TYPE :                4 C |  DREQ_SCRN2_DATA :                0 C |
 DREQ_SCRN2_H :                  10 C |  DREQ_SCRN2_W :                   C C |
 DREQ_SCRN2_X :                   4 C |  DREQ_SCRN2_Y :                   8 C |
 DREQ_SCRNBUFF :                200 C |  DREQ_SUPERSPR :                3E0 C |
 DRV_LOOP :                      42 C |  DRV_LOOP.CMND_0 :               EE C |
 DRV_LOOP.CMND_TRKPLAY :         F2 C |  DRV_LOOP.CMND_TRKRESUME :      170 C |
 DRV_LOOP.CMND_TRKSTOP :        155 C |  DRV_LOOP.CMND_TRKTEMPO :       18F C |
 DRV_LOOP.CMND_TRKTICKS :       17D C |  DRV_LOOP.LIST :                 AE C |
 DRV_LOOP.NEITHER :              82 C |  DRV_LOOP.NEXT_CMD :             89 C |
 DRV_LOOP.NOBEATS :              6A C |  DRV_LOOP.NOTICKS :              5D C |
 DRWSLD_NEXTPZ :   FFFFFFFFC0000608 C |
 DRWSLD_NEXTPZ.RESET_RD :                                  FFFFFFFFC0000616 C |
 DRWSLD_NXTLINE :  FFFFFFFFC0000588 C |
 DRWSLD_NXTLINE.L_FIX :                                    FFFFFFFFC00005CA C |
 DRWSLD_NXTLINE.REVERS :                                   FFFFFFFFC00005B4 C |
 DRWSLD_NXTLINE.R_FIX :                                    FFFFFFFFC00005C4 C |
 DRWSLD_NXTLINE.WAIT :                                     FFFFFFFFC00005D8 C |
 DRWSLD_NXTLINE_TEX :                                      FFFFFFFFC000043C C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                        FFFFFFFFC0000530 C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                            FFFFFFFFC00004F0 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                               FFFFFFFFC00004C6 C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                               FFFFFFFFC00004B2 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                             FFFFFFFFC0000480 C |
 DRWSLD_UPDLINE :  FFFFFFFFC00005FE C |
 DRWSLD_UPDLINE_TEX :                                      FFFFFFFFC0000548 C |
 DRWTASK_EXIT :    FFFFFFFFC0000626 C |  DRWTSK1_VLD_Y :   FFFFFFFFC0000404 C |
 DRWTSK_SOLIDMODE :                                        FFFFFFFFC0000574 C |
 DRWTSK_SOLIDMODE.WAIT :                                   FFFFFFFFC0000582 C |
 DRWTSK_TEXMODE :  FFFFFFFFC0000428 C |  DRW_UD_EXIT :              6000DA0 C |
 DTH :                           20 - |  DTL :                           1C - |
 DTSK01_LRDRAW :            6000C94 C |  DTSK01_LRDRAW.INDXMODE :   6000CBE C |
 DTSK01_LRDRAW.NOT_L2 :     6000CCC C |  DTSK01_LRDRAW.PREFIX_R :   6000CAA C |
 DTSK01_LRDRAW.XLINE :      6000CA2 C |  DTSK01_LRDRAW.YRES :       6000C9A C |
 DWAVEBUFF :                   1B00 C |  EMILIE_MKSPRITE :           883A9E C |
*EMILIE_MKSPRITE.NO_UPD :    883B6C C |  EMILIE_MKSPRITE.NXT_DPZ :   883B46 C |
 EMILIE_MKSPRITE.NXT_PZ :    883AE4 C |  EMILY_VRAM :                   380 - |
*EXTR_3 :                         A C | *EXTR_4 :                         C C |
*EXTR_5 :                         E C | *FALSE :                          0 - |
 FBVRAM_LAST :                1FD80 - |  FBVRAM_PATCH :               1E000 - |
*FEN :                            2 - |  FILLDATA :                       8 - |
 FILLLENGTH :                     4 - |  FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FM3REG :                      17B0 C |  FMCOM :                       1668 C |
 FMFREQ_LIST :                 1433 C |  FMFRQH :                        18 - |
 FMFRQL :                        1E - | *FMINS_AMBIENT_3 :           90EEF0 C |
 FMINS_AMBIENT_DARK :        90EEB0 C | *FMINS_AMBIENT_SPOOK :       90EED0 C |
*FMINS_BANJO_PUY :           90EF90 C | *FMINS_BASS_1 :              90ED10 C |
 FMINS_BASS_CALM :           90ECF0 C |  FMINS_BASS_CLUB :           90ED30 C |
*FMINS_BASS_DONNA :          90ED50 C |  FMINS_BASS_GROOVE :         90ED70 C |
 FMINS_BASS_GROOVE_2 :       90ED90 C | *FMINS_BASS_GROOVE_GEM :     90EDB0 C |
 FMINS_BASS_ITALO :          90EDD0 C | *FMINS_BASS_OIL :            90EC70 C |
 FMINS_BRASS_EUR :           90EF30 C | *FMINS_BRASS_PUY :           90EF50 C |
 FMINS_COM :                   16C0 C |  FMINS_COM2 :                  16E8 C |
 FMINS_COM3 :                  1710 C |  FMINS_COM4 :                  1738 C |
 FMINS_COM5 :                  1760 C |  FMINS_COM6 :                  1788 C |
*FMINS_DING_1 :              90EFD0 C | *FMINS_DING_BASEBALL :       90ECB0 C |
 FMINS_DING_TOY :            90EF10 C | *FMINS_DRUMKICK_GEM :        90ECD0 C |
*FMINS_FLAUTE_CAVE :         90EF70 C | *FMINS_FM3_CLOSEDHAT :       90EC20 C |
 FMINS_FM3_EXPLOSION :       90EC48 C |  FMINS_FM3_OPENHAT :         90EBF8 C |
 FMINS_MARIMBA :             90EE90 C | *FMINS_ORGAN_ITO :           90EC90 C |
*FMINS_PIANO_AQUA :          90EDF0 C |  FMINS_PSYNTH_PLUS :         90EFB0 C |
 FMINS_TROMBONE_GEM :        90EFF0 C |  FMINS_TRUMPET_1 :           90EE10 C |
*FMINS_TRUMPET_2 :           90EE30 C |  FMINS_TRUMPET_CARNIVAL :    90EE70 C |
*FMINS_TRUMPET_KON :         90EE50 C |  FMKEYS :                         6 - |
 FMPAN :                         12 - |  FMSPCMODE :                   1E5F C |
 FMVOL :                          C - |  FM_SEND_1 :                   12F3 C |
 FM_SEND_2 :                   12FE C |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMABLK_BEMINE :            90D25C C |  GEMABLK_TEST :              9049B8 C |
 GEMABLK_TEST2 :             905D34 C |  GEMABLK_TEST3 :             9079D6 C |
 GEMAINS_BEMINE :            90EB30 C |  GEMAINS_TEST :              905C88 C |
 GEMAINS_TEST2 :             90797A C |  GEMAINS_TEST3 :             90D1E4 C |
 GEMAPAT_BEMINE :            90D26D C |  GEMAPAT_TEST :              9049C2 C |
 GEMAPAT_TEST2 :             905D4A C |  GEMAPAT_TEST3 :             9079F4 C |
 GEMASFXBLK_BOOM :           904944 C |  GEMASFXINS_BOOM :           904994 C |
 GEMASFXPAT_BOOM :           904948 C | *GEMATRKDATA_SFX :           904938 C |
 GEMATRKDATA_TEST :          9049AC C | *GEMATRKDATA_TEST2 :         905D28 C |
*GEMATRKDATA_TEST3 :         9079CA C |  GEMA_INIT :                    E3B C |
 GEMA_INIT.SET_IT :             E96 C |  GET_CMDBYTE :                  1B9 C |
 GET_CMDBYTE.GETCBYTEL :        1BC C |  GET_TICK :                     EA0 C |
 GET_TICK.CTNOTICK :            EBD C |  GET_TRKINDX :                  1A4 C |
 GLBL_LASTORG :               2E090 - |  GLBL_LASTPC :              6007CD0 - |
 GO_DRWSLD_UPDLINE_TEX :                                   FFFFFFFFC0000420 C |
 GO_DRWTEX_GONXTPZ :                                       FFFFFFFFC0000424 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :              88391C C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
 INSDATAC_0 :                  184B C |  INSDATAC_1 :                  18CB C |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
 INTMASK :                        1 - |  INT_M_LIST :               6000290 C |
 INT_S_LIST :               60002D0 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - |  LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :              882A88 C |  LITERAL_F_00000000_1 :     6000288 C |
 LITERAL_F_00000001_1 :     600028C C |  LITERAL_F_00000002_1 :     600048C C |
 LITERAL_F_00000003_1 :     600049C C |  LITERAL_F_00000004_1 :     6000698 C |
 LITERAL_F_00000005_1 :     600069C C |  LITERAL_F_00000006_1 :     60006A8 C |
 LITERAL_F_00000007_1 :     60006AC C |  LITERAL_F_00000008_1 :     60006B0 C |
 LITERAL_F_00000009_1 :     60006B8 C |  LITERAL_F_0000000A_1 :     60006BC C |
 LITERAL_F_0000000B_1 :     60006D4 C |  LITERAL_F_0000000C_1 :     60006C0 C |
 LITERAL_F_0000000D_1 :     60006C4 C |  LITERAL_F_0000000E_1 :     60006C8 C |
 LITERAL_F_0000000F_1 :     60006CC C |  LITERAL_F_00000010_1 :     60006D0 C |
 LITERAL_F_00000011_1 :     6000768 C |  LITERAL_F_00000012_1 :     6000928 C |
 LITERAL_F_00000013_1 :     6000974 C |  LITERAL_F_00000014_1 :     6000978 C |
 LITERAL_F_00000015_1 :     6000A84 C |  LITERAL_F_00000016_1 :     6000BE4 C |
 LITERAL_F_00000017_1 :     6000C74 C |  LITERAL_F_00000018_1 :     6000C78 C |
 LITERAL_F_00000019_1 :     6000C7C C |  LITERAL_F_0000001A_1 :     6000C84 C |
 LITERAL_F_0000001B_1 :     6000C88 C |  LITERAL_F_0000001C_1 :     6000C8C C |
 LITERAL_F_0000001D_1 :     6000DA8 C |  LITERAL_F_0000001E_1 :     6000DAC C |
 LITERAL_F_0000001F_1 :     6000DB0 C |  LITERAL_F_00000020_1 :     6000DB4 C |
 LITERAL_F_00000021_1 :     6000DB8 C |  LITERAL_F_00000022_1 :     6000F9C C |
 LITERAL_F_00000023_1 :     6000FA0 C |  LITERAL_F_00000024_1 :     6000FA4 C |
 LITERAL_F_00000025_1 :     6000FA8 C |  LITERAL_F_00000026_1 :     6000FAC C |
 LITERAL_F_00000027_1 :     6000FB0 C |  LITERAL_F_00000028_1 :     6000FB4 C |
 LITERAL_F_00000029_1 :     6000FCC C |  LITERAL_F_0000002A_1 :     600108C C |
 LITERAL_F_0000002B_1 :     6001090 C |  LITERAL_F_0000002C_1 :     6001188 C |
 LITERAL_F_0000002D_1 :     6001190 C |  LITERAL_F_0000002E_1 :     6001194 C |
 LITERAL_F_0000002F_1 :     6001198 C |  LITERAL_F_00000030_1 :     600119C C |
 LITERAL_F_00000031_1 :     60011A0 C |  LITERAL_F_00000032_1 :     6001234 C |
 LITERAL_F_00000033_1 :     6001240 C |  LITERAL_F_00000034_1 :     600132C C |
 LITERAL_F_00000035_1 :     6001330 C |  LITERAL_F_00000036_1 :     6001334 C |
 LITERAL_F_00000037_1 :     600133C C |  LITERAL_F_00000038_1 :     6001344 C |
 LITERAL_F_00000039_1 :     6001534 C |  LITERAL_F_0000003A_1 :     6001538 C |
 LITERAL_F_0000003B_1 :     6001540 C |  LITERAL_F_0000003C_1 :     6001544 C |
 LITERAL_F_0000003D_1 :     6001548 C |  LITERAL_F_0000003E_1 :     600154C C |
 LITERAL_F_0000003F_1 :     600158E C |  LITERAL_F_00000040_1 :     6001554 C |
 LITERAL_F_00000041_1 :     6001558 C |  LITERAL_F_00000042_1 :     600155C C |
 LITERAL_F_00000043_1 :     6001560 C |  LITERAL_F_00000044_1 :     6001564 C |
 LITERAL_F_00000045_1 :     6001570 C |  LITERAL_F_00000046_1 :     6001574 C |
 LITERAL_F_00000047_1 :     6001580 C |  LITERAL_F_00000048_1 :     6001584 C |
 LITERAL_F_00000049_1 :     6001610 C |  LITERAL_F_0000004A_1 :     6001614 C |
 LITERAL_F_0000004B_1 :     6001618 C |  LITERAL_F_0000004C_1 :     6001638 C |
 LITERAL_F_0000004D_1 :     6001624 C |  LITERAL_F_0000004E_1 :     6001630 C |
 LITERAL_F_0000004F_1 :     6001634 C |  LITERAL_F_00000050_1 :     60016F0 C |
 LITERAL_F_00000051_1 :     60016F4 C |  LITERAL_F_00000052_1 :     60016F8 C |
 LITERAL_F_00000053_1 :     6001720 C |  LITERAL_F_00000054_1 :     6001708 C |
 LITERAL_F_00000055_1 :     600170C C |  LITERAL_F_00000056_1 :     6001710 C |
 LITERAL_F_00000057_1 :     6001714 C |  LITERAL_F_00000058_1 :     6001718 C |
 LITERAL_F_00000059_1 :     60017A0 C |  LITERAL_F_0000005A_1 :     60017A4 C |
 LITERAL_F_0000005B_1 :     60017BA C |  LITERAL_F_0000005C_1 :     60017B0 C |
 LITERAL_F_0000005D_1 :     6001844 C |  LITERAL_F_0000005E_1 :     600184C C |
 LITERAL_F_0000005F_1 :     6001850 C |  LITERAL_F_00000060_1 :     6001854 C |
 LITERAL_F_00000061_1 :     6001858 C |  LITERAL_F_00000062_1 :     600185C C |
 LITERAL_F_00000063_1 :                                    FFFFFFFFC00000C8 C |
 LITERAL_F_00000064_1 :                                    FFFFFFFFC00000D4 C |
 LITERAL_F_00000065_1 :                                    FFFFFFFFC0000234 C |
 LITERAL_F_00000066_1 :                                    FFFFFFFFC0000444 C |
 LITERAL_F_00000067_1 :                                    FFFFFFFFC000044C C |
 LITERAL_F_00000068_1 :                                    FFFFFFFFC0000450 C |
 LITERAL_F_00000069_1 :                                    FFFFFFFFC0000458 C |
 LITERAL_F_0000006A_1 :                                    FFFFFFFFC000045C C |
 LITERAL_F_0000006B_1 :                                    FFFFFFFFC0000460 C |
 LITERAL_F_0000006C_1 :                                    FFFFFFFFC0000540 C |
 LITERAL_F_0000006D_1 :                                    FFFFFFFFC000015C C |
 LITERAL_F_0000006E_1 :                                    FFFFFFFFC0000160 C |
 LITERAL_F_0000006F_1 :                                    FFFFFFFFC0000164 C |
 LITERAL_F_00000070_1 :                                    FFFFFFFFC0000168 C |
 LITERAL_F_00000071_1 :                                    FFFFFFFFC0000170 C |
 LITERAL_F_00000072_1 :                                    FFFFFFFFC0000174 C |
 LITERAL_F_00000073_1 :                                    FFFFFFFFC0000178 C |
 LITERAL_F_00000074_1 :                                    FFFFFFFFC0000350 C |
 LITERAL_F_00000075_1 :                                    FFFFFFFFC0000354 C |
 LITERAL_F_00000076_1 :                                    FFFFFFFFC0000358 C |
 LITERAL_F_00000077_1 :                                    FFFFFFFFC000035C C |
 LITERAL_F_00000078_1 :                                    FFFFFFFFC0000360 C |
 LITERAL_F_00000079_1 :                                    FFFFFFFFC0000364 C |
 LITERAL_F_0000007A_1 :                                    FFFFFFFFC0000368 C |
 LITERAL_F_0000007B_1 :                                    FFFFFFFFC000036C C |
 LITERAL_F_0000007C_1 :                                    FFFFFFFFC00003F8 C |
 LITERAL_F_0000007D_1 :                                    FFFFFFFFC000062C C |
 LITERAL_F_0000007E_1 :                                    FFFFFFFFC0000634 C |
 LITERAL_F_0000007F_1 :                                    FFFFFFFFC000013C C |
 LITERAL_F_00000080_1 :                                    FFFFFFFFC0000140 C |
 LITERAL_F_00000081_1 :                                    FFFFFFFFC000014C C |
 LITERAL_F_00000082_1 :                                    FFFFFFFFC0000198 C |
 LITERAL_F_00000083_1 :                                    FFFFFFFFC000019C C |
 LITERAL_F_00000084_1 :                                    FFFFFFFFC00001A0 C |
 LITERAL_F_00000085_1 :                                    FFFFFFFFC00001A4 C |
 LITERAL_F_00000086_1 :                                    FFFFFFFFC0000458 C |
 LITERAL_F_00000087_1 :                                    FFFFFFFFC0000464 C |
 LITERAL_F_00000088_1 :                                    FFFFFFFFC000046C C |
 LITERAL_F_00000089_1 :                                    FFFFFFFFC0000590 C |
 LITERAL_F_0000008A_1 :                                    FFFFFFFFC0000594 C |
 LITERAL_F_0000008B_1 :                                    FFFFFFFFC000059C C |
 LITERAL_F_0000008C_1 :                                    FFFFFFFFC00005DC C |
 LITERAL_F_0000008D_1 :                                    FFFFFFFFC00005E0 C |
 LITERAL_L_0000C000_1 :                                    FFFFFFFFC000045C C |
 LITERAL_L_0000E000_1 :                                    FFFFFFFFC0000460 C |
 LITERAL_L_0000FEC0_1 :     6000820 C |  LITERAL_L_0000FF00_1 :     6001860 C |
 LITERAL_L_0000FFFF_1 :     6000930 C |
 LITERAL_L_0000FFFF_2 :                                    FFFFFFFFC00000CC C |
 LITERAL_L_0000FFFF_3 :                                    FFFFFFFFC0000448 C |
 LITERAL_L_0000FFFF_4 :                                    FFFFFFFFC00003FC C |
 LITERAL_L_00010000_1 :                                    FFFFFFFFC00000D0 C |
 LITERAL_L_00012C00_1 :     6001628 C |  LITERAL_L_0001FD80_1 :     6000924 C |
 LITERAL_L_00FFFFFF_1 :                                    FFFFFFFFC0000144 C |
 LITERAL_L_02000000_1 :     60011A4 C |
 LITERAL_L_02000000_2 :                                    FFFFFFFFC0000148 C |
 LITERAL_L_02000000_3 :                                    FFFFFFFFC0000598 C |
 LITERAL_L_06000050_1 :     6001094 C |  LITERAL_L_060007AC_1 :     6001550 C |
 LITERAL_L_060007AC_2 :     600161C C |  LITERAL_L_060007AC_3 :     60016FC C |
 LITERAL_L_060007AC_4 :     60017A8 C |  LITERAL_L_060007D4_1 :     6001238 C |
 LITERAL_L_06000828_1 :     6001704 C |  LITERAL_L_06000BF0_1 :     6001568 C |
 LITERAL_L_06000CE4_1 :     600156C C |  LITERAL_L_06000FB8_1 :     6001578 C |
 LITERAL_L_06000FB8_2 :     600162C C |  LITERAL_L_06000FD0_1 :     600157C C |
 LITERAL_L_0603EFF8_1 :     6000764 C |  LITERAL_L_0603F000_1 :     600179C C |
 LITERAL_L_0603FFF8_1 :     6000498 C |  LITERAL_L_06040000_1 :     6001230 C |
 LITERAL_L_20000000_1 :                                    FFFFFFFFC0000548 C |
 LITERAL_L_20004000_1 :     6000480 C |  LITERAL_L_20004000_2 :     6000760 C |
 LITERAL_L_20004000_3 :     6000814 C |  LITERAL_L_20004000_4 :     6001184 C |
 LITERAL_L_20004000_5 :     600123C C |  LITERAL_L_20004000_6 :     60017AC C |
 LITERAL_L_20004012_1 :     6000488 C |  LITERAL_L_20004016_1 :     6000494 C |
 LITERAL_L_20004016_2 :     600075C C |  LITERAL_L_20004018_1 :     6000490 C |
 LITERAL_L_20004018_2 :     6000758 C |  LITERAL_L_2000401A_1 :     600047C C |
 LITERAL_L_2000401A_2 :     60006A0 C |  LITERAL_L_2000401C_1 :     6000478 C |
 LITERAL_L_2000401C_2 :                                    FFFFFFFFC0000138 C |
 LITERAL_L_20004022_1 :     6000368 C |  LITERAL_L_20004024_1 :     600036C C |
 LITERAL_L_20004028_1 :     60006B4 C |  LITERAL_L_2000402C_1 :     6000484 C |
 LITERAL_L_2000402C_2 :     6001340 C |  LITERAL_L_2000402D_1 :     6001324 C |
 LITERAL_L_2000402E_1 :     60006A4 C |  LITERAL_L_2000402E_2 :     6001348 C |
 LITERAL_L_2000402E_3 :     60016EC C |  LITERAL_L_2000402E_4 :     6001848 C |
 LITERAL_L_20004034_1 :                                    FFFFFFFFC0000150 C |
 LITERAL_L_20004036_1 :                                    FFFFFFFFC0000154 C |
 LITERAL_L_20004100_1 :     6000818 C |  LITERAL_L_20004100_2 :     600091C C |
 LITERAL_L_20004100_3 :     6001320 C |  LITERAL_L_20004100_4 :     6001530 C |
 LITERAL_L_20004100_5 :     6001620 C |  LITERAL_L_20004100_6 :     6001700 C |
 LITERAL_L_20004100_7 :                                    FFFFFFFFC0000638 C |
 LITERAL_L_20004102_1 :     6001328 C |  LITERAL_L_20004200_1 :     6001338 C |
 LITERAL_L_24000000_1 :     600081C C |  LITERAL_L_24000000_2 :     6000920 C |
 LITERAL_L_24000000_3 :     6000A80 C |  LITERAL_L_24000000_4 :     6000BE8 C |
 LITERAL_L_24000000_5 :     6000C80 C |  LITERAL_L_24000000_6 :     6000DA4 C |
 LITERAL_L_24000000_7 :                                    FFFFFFFFC0000238 C |
 LITERAL_L_24000200_1 :     600153C C |
 LITERAL_L_24000200_2 :                                    FFFFFFFFC0000544 C |
 LITERAL_L_2401E000_1 :     600092C C |
 LITERAL_L_24020000_1 :                                    FFFFFFFFC0000454 C |
 LITERAL_L_24020200_1 :                                    FFFFFFFFC0000630 C |
 LITERAL_L_4D5F4F4B_1 :     60004A0 C |  LITERAL_L_535F4F4B_1 :     600076C C |
 LITERAL_L_7FFFFFFF_1 :                                    FFFFFFFFC000016C C |
 LITERAL_L_7FFFFFFF_2 :                                    FFFFFFFFC0000468 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     60007CC C |
 LITERAL_L_FFFFFFFFFF000000_1 :                                     600118C C |
 LITERAL_W_0080_1 :         6000824 C |  LITERAL_W_0080_2 :         60011AC C |
 LITERAL_W_0080_3 :                                        FFFFFFFFC000015C C |
 LITERAL_W_00A0_1 :                                        FFFFFFFFC000054C C |
 LITERAL_W_00A0_2 :                                        FFFFFFFFC0000180 C |
 LITERAL_W_00A2_1 :         600093A C |  LITERAL_W_00A8_1 :         6001728 C |
 LITERAL_W_00C8_1 :         600158C C |
 LITERAL_W_00E0_1 :                                        FFFFFFFFC0000464 C |
 LITERAL_W_00E0_2 :                                        FFFFFFFFC0000182 C |
 LITERAL_W_00E0_3 :                                        FFFFFFFFC0000400 C |
 LITERAL_W_00E0_4 :                                        FFFFFFFFC0000640 C |
 LITERAL_W_00F0_1 :         60004A4 C |
 LITERAL_W_00F0_10 :                                       FFFFFFFFC000017C C |
 LITERAL_W_00F0_11 :                                       FFFFFFFFC0000158 C |
 LITERAL_W_00F0_2 :         6000770 C |  LITERAL_W_00F0_3 :         60007A0 C |
 LITERAL_W_00F0_4 :         60007D0 C |  LITERAL_W_00F0_5 :         6000826 C |
 LITERAL_W_00F0_6 :         6000934 C |  LITERAL_W_00F0_7 :         600097C C |
 LITERAL_W_00F0_8 :         600109A C |  LITERAL_W_00F0_9 :         600134C C |
 LITERAL_W_00F0_A :         6001594 C |  LITERAL_W_00F0_B :         600163E C |
 LITERAL_W_00F0_C :         6001726 C |  LITERAL_W_00F0_D :         60017BC C |
 LITERAL_W_00F0_E :                                        FFFFFFFFC00000D8 C |
 LITERAL_W_00F0_F :                                        FFFFFFFFC000054E C |
 LITERAL_W_00FC_1 :         60006D6 C |  LITERAL_W_00FF_1 :         6000370 C |
 LITERAL_W_00FF_2 :         6000938 C |  LITERAL_W_00FF_3 :         6001724 C |
 LITERAL_W_00FF_4 :                                        FFFFFFFFC000046A C |
 LITERAL_W_00FF_5 :                                        FFFFFFFFC000063C C |
 LITERAL_W_0100_1 :         6001592 C |
 LITERAL_W_0100_2 :                                        FFFFFFFFC00001A8 C |
 LITERAL_W_0101_1 :         6000374 C |  LITERAL_W_0102_1 :         6000376 C |
 LITERAL_W_0103_1 :         6000378 C |  LITERAL_W_0104_1 :         600037A C |
 LITERAL_W_0105_1 :         600037C C |  LITERAL_W_0105_2 :         60011A8 C |
 LITERAL_W_0106_1 :         600037E C |
 LITERAL_W_013E_1 :                                        FFFFFFFFC0000642 C |
 LITERAL_W_0140_1 :         6000BEC C |  LITERAL_W_0140_2 :         6000C90 C |
 LITERAL_W_0140_3 :         6000DBC C |  LITERAL_W_0140_4 :         6001098 C |
 LITERAL_W_0140_5 :         6001590 C |  LITERAL_W_0140_6 :         600163C C |
 LITERAL_W_0140_7 :                                        FFFFFFFFC000023C C |
 LITERAL_W_0140_8 :                                        FFFFFFFFC0000466 C |
 LITERAL_W_0140_9 :                                        FFFFFFFFC0000550 C |
 LITERAL_W_0198_1 :         600124A C |  LITERAL_W_0198_2 :         600134E C |
 LITERAL_W_01FF_1 :         6000372 C |  LITERAL_W_0200_1 :         600163A C |
 LITERAL_W_0200_2 :         6001722 C |  LITERAL_W_0280_1 :         600158A C |
 LITERAL_W_03FF_1 :                                        FFFFFFFFC000015E C |
 LITERAL_W_0415_1 :         60011AA C |  LITERAL_W_07FF_1 :         6000936 C |
 LITERAL_W_07FF_2 :         6000A88 C |
 LITERAL_W_07FF_3 :                                        FFFFFFFFC00005E4 C |
 LITERAL_W_3E80_1 :         6001588 C |
 LITERAL_W_3FFF_1 :                                        FFFFFFFFC000046C C |
 LITERAL_W_3FFF_2 :                                        FFFFFFFFC000063E C |
 LITERAL_W_44E0_1 :         60004AE C |  LITERAL_W_44E0_2 :         6000778 C |
 LITERAL_W_44E1_1 :         60004A8 C |  LITERAL_W_5A00_1 :         60007A8 C |
 LITERAL_W_5A00_2 :         6000982 C |
 LITERAL_W_5A20_1 :                                        FFFFFFFFC0000188 C |
 LITERAL_W_A518_1 :         60004AC C |  LITERAL_W_A518_2 :         6000776 C |
 LITERAL_W_A518_3 :         60007A6 C |  LITERAL_W_A518_4 :         600171E C |
 LITERAL_W_A518_5 :                                        FFFFFFFFC00000DE C |
 LITERAL_W_A518_6 :                                        FFFFFFFFC0000186 C |
 LITERAL_W_A518_7 :                                        FFFFFFFFC0000372 C |
 LITERAL_W_A538_1 :         6000984 C |
 LITERAL_W_F400_1 :                                        FFFFFFFFC0000470 C |
 LITERAL_W_FE10_1 :         60004A6 C |  LITERAL_W_FE10_2 :         6000772 C |
 LITERAL_W_FE10_3 :         60007A2 C |  LITERAL_W_FE10_4 :         6001244 C |
 LITERAL_W_FE10_5 :         60017B4 C |
 LITERAL_W_FE10_6 :                                        FFFFFFFFC00000DA C |
 LITERAL_W_FE10_7 :                                        FFFFFFFFC000017E C |
 LITERAL_W_FE10_8 :                                        FFFFFFFFC000015A C |
 LITERAL_W_FE80_1 :         60004AA C |  LITERAL_W_FE80_2 :         6000774 C |
 LITERAL_W_FE80_3 :         60007A4 C |  LITERAL_W_FE80_4 :         6000980 C |
 LITERAL_W_FE80_5 :         600171C C |
 LITERAL_W_FE80_6 :                                        FFFFFFFFC00000DC C |
 LITERAL_W_FE80_7 :                                        FFFFFFFFC0000184 C |
 LITERAL_W_FE80_8 :                                        FFFFFFFFC0000370 C |
 LITERAL_W_FE92_1 :         60007D2 C |  LITERAL_W_FE92_2 :         600097E C |
 LITERAL_W_FEE2_1 :         6001246 C |  LITERAL_W_FEE2_2 :         60017B6 C |
 LITERAL_W_FEE4_1 :         6001248 C |  LITERAL_W_FEE4_2 :         60017B8 C |
 LITERAL_W_FF00_1 :                                        FFFFFFFFC0000468 C |
 LITERAL_W_FF00_2 :                                        FFFFFFFFC0000374 C |
 LITERAL_W_FF00_3 :                                        FFFFFFFFC00005A0 C |
 LITERAL_W_FF60_1 :                                        FFFFFFFFC0000472 C |
*MACEXP :                         7 - |  MAP_NICOLE :                883B84 C |
 MAP_NICOLE.FRAME_0 :        883BA4 C |  MAP_NICOLE.FRAME_1 :        883BB4 C |
 MAP_NICOLE.FRAME_10 :       883C49 C |  MAP_NICOLE.FRAME_11 :       883C59 C |
 MAP_NICOLE.FRAME_12 :       883C69 C |  MAP_NICOLE.FRAME_13 :       883C79 C |
 MAP_NICOLE.FRAME_14 :       883C89 C |  MAP_NICOLE.FRAME_15 :       883C99 C |
 MAP_NICOLE.FRAME_2 :        883BC9 C |  MAP_NICOLE.FRAME_3 :        883BD9 C |
 MAP_NICOLE.FRAME_4 :        883BE9 C |  MAP_NICOLE.FRAME_5 :        883BF9 C |
 MAP_NICOLE.FRAME_6 :        883C09 C |  MAP_NICOLE.FRAME_7 :        883C19 C |
 MAP_NICOLE.FRAME_8 :        883C29 C |  MAP_NICOLE.FRAME_9 :        883C39 C |
 MAP_NICOLE.MAPPINGS :       883B84 C | *MARS :                           1 - |
 MARSBLOCK :                     2E C | *MARSCD :                         0 - |
 MARSGBL_BGDRWD :                40 C |  MARSGBL_BGDRWL :                3C C |
 MARSGBL_BGDRWR :                3A C |  MARSGBL_BGDRWU :                3E C |
 MARSGBL_CNTRRDPLGN :            2E C |  MARSGBL_CNTRRDSPR :             30 C |
 MARSGBL_CURRFACEPOS :           20 C |  MARSGBL_CURRNUMFACES :          24 C |
 MARSGBL_CURRRDPLGN :            14 C |  MARSGBL_CURRRDSPR :             10 C |
 MARSGBL_CURRZLIST :             18 C |  MARSGBL_CURRZTOP :              1C C |
 MARSGBL_MDINITTMR :             38 C |  MARSGBL_PLYPZCNTR :             2C C |
 MARSGBL_PLYPZLIST_END :          C C |  MARSGBL_PLYPZLIST_R :            0 C |
 MARSGBL_PLYPZLIST_START :        8 C |  MARSGBL_PLYPZLIST_W :            4 C |
 MARSGBL_POLYBUFFNUM :           2A C | *MARSGBL_ROMBLKM :               34 C |
*MARSGBL_ROMBLKS :               36 C |  MARSGBL_WAVEDEFORM :            48 C |
 MARSGBL_WAVEENABLE :            42 C |  MARSGBL_WAVEMAX :               46 C |
 MARSGBL_WAVESPD :               44 C |  MARSGBL_WAVETAN :               4A C |
*MARSGBL_WDGBUSY :               26 C |  MARSGBL_WDGSTATUS :             28 C |
 MARSGBL_XSHIFT :                32 C |  MARSMDL_MDLLOOP : FFFFFFFFC0000160 C |
 MARSMDL_MDLLOOP.INVLID :                                  FFFFFFFFC000017C C |
 MARSMDL_MDLLOOP.LOOP :                                    FFFFFFFFC0000166 C |
 MARSMDL_MDLLOOP.PAGE_2 :                                  FFFFFFFFC000018C C |
 MARSMDL_MDLLOOP.SKIP :                                    FFFFFFFFC0000182 C |
 MARSMDL_READMODEL :                                       FFFFFFFFC00001AC C |
 MARSMDL_READMODEL.ALLDONE :                               FFFFFFFFC000030E C |
 MARSMDL_READMODEL.ALLUVDONE :                             FFFFFFFFC000022A C |
 MARSMDL_READMODEL.CAN_BUILD :                             FFFFFFFFC00001CC C |
 MARSMDL_READMODEL.EXIT_MODEL :                            FFFFFFFFC0000450 C |
 MARSMDL_READMODEL.FACE_OK :                               FFFFFFFFC0000350 C |
 MARSMDL_READMODEL.FACE_OUT :                              FFFFFFFFC0000444 C |
 MARSMDL_READMODEL.FINISH_THIS :                           FFFFFFFFC000044C C |
 MARSMDL_READMODEL.FIRST_FACE :                            FFFFFFFFC0000396 C |
 MARSMDL_READMODEL.GO_FACES :                              FFFFFFFFC000026E C |
 MARSMDL_READMODEL.GO_FOUT :                               FFFFFFFFC0000346 C |
 MARSMDL_READMODEL.NEXT_FACE :                             FFFFFFFFC00001BC C |
*MARSMDL_READMODEL.NO_MODEL :                              FFFFFFFFC00001C4 C |
 MARSMDL_READMODEL.PAGE_2 :                                FFFFFFFFC0000372 C |
 MARSMDL_READMODEL.SET_TRI :                               FFFFFFFFC00001DA C |
 MARSMDL_READMODEL.SOLID_TYPE :                            FFFFFFFFC0000258 C |
 MARSMDL_READMODEL.SWAP_ME :                               FFFFFFFFC0000392 C |
 MARSMDL_READMODEL.TAG_ANDMTRL :                           FFFFFFFFC0000254 C |
 MARSMDL_READMODEL.TAG_MAXFACES :                          FFFFFFFFC00001C8 C |
 MARSMDL_READMODEL.TAG_XL :                                FFFFFFFFC000034C C |
 MARSOBJ_TEST :             6006DB0 C |  MARSOBJ_TEST.FACE :        60073A0 C |
 MARSOBJ_TEST.MTRL :        6007CC0 C |  MARSOBJ_TEST.VERT :        6006DC4 C |
 MARSOBJ_TEST.VRTX :        6007AC0 C |  MARSRAM_SOUND :           26008AC0 C |
 MARSRAM_SYSTEM :          26007CD0 C |  MARSRAM_VIDEO :           26008E40 C |
*MARSSND_ACTIVE :  FFFFFFFFC00005EC C |  MARSSND_PWMCACHE :        26008AC0 C |
 MARSSND_PWMCHNLS :                                        FFFFFFFFC000065C C |
 MARSSND_PWMCONTROL :                                      FFFFFFFFC0000774 C |
 MARSSND_PWMCONTROL.END :                                  FFFFFFFFC00007AC C |
 MARSSND_REFILL :           6001134 C |  MARSSND_REFILL.COPY_NOW :  600115A C |
 MARSSND_REFILL.NEXT_ONE :  600113C C |  MARSSND_REFILL.NOT_ENBL :  6001176 C |
 MARSSND_RVMODE :  FFFFFFFFC00005E8 C |  MARSSOUND_INIT :           600109C C |
 MARSSOUND_PWMENABLE :      6001124 C |  MARSSOUND_SETPWM :         60010B8 C |
 MARSSOUND_SETPWM.ENDMRK :  60010DC C |  MARSSOUND_SETPWMPITCH :    60010F4 C |
 MARSSOUND_SETPWMPITCH.OFF_1 :                                      6001108 C |
 MARSSOUND_SETVOLUME :      600110C C |
 MARSSOUND_SETVOLUME.OFF_1 :                                        6001120 C |
 MARSSPR_DATA :                   0 C |  MARSSPR_DWIDTH :                 4 C |
 MARSSPR_INDX :                   6 C |  MARSSPR_X :                      8 C |
*MARSSPR_XINDX :                 12 C |  MARSSPR_XS :                     C C |
*MARSSPR_XTEX :                  10 C |  MARSSPR_Y :                      A C |
*MARSSPR_YINDX :                 13 C |  MARSSPR_YS :                     E C |
*MARSSPR_YTEX :                  11 C |  MARSUPD :                       30 C |
 MARSVIDEO_BGDRAWLR :       6000BF0 C |
 MARSVIDEO_BGDRAWLR.DTSK01_DLEFT :                                  6000C4C C |
 MARSVIDEO_BGDRAWLR.DTSK01_DRIGHT :                                 6000C58 C |
 MARSVIDEO_BGDRAWLR.INDXMODE :                                      6000C68 C |
 MARSVIDEO_BGDRAWLR.NXT_DRAWUD :                                    6000C46 C |
 MARSVIDEO_BGDRAWUD :       6000CE4 C |
 MARSVIDEO_BGDRAWUD.DO_UPDOWN :                                     6000D4A C |
 MARSVIDEO_BGDRAWUD.HDNX :  6000D92 C |
 MARSVIDEO_BGDRAWUD.INDXMODE :                                      6000D84 C |
 MARSVIDEO_BGDRAWUD.LWRFB : 6000D68 C |
 MARSVIDEO_BGDRAWUD.SRCLOW :                                        6000D6E C |
*MARSVIDEO_BGDRAWUD.TSK00_DOWN :                                    6000D26 C |
 MARSVIDEO_BGDRAWUD.TSK00_UP :                                      6000D3A C |
 MARSVIDEO_BGDRAWUD.UPWRP : 6000D1A C |
 MARSVIDEO_BGDRAWUD.WRPAGAIN :                                      6000D12 C |
 MARSVIDEO_BGDRAWUD.X_LOOP :                                        6000D62 C |
 MARSVIDEO_BGDRAWUD.Y_LOOP :                                        6000D56 C |
 MARSVIDEO_CLEARSCREEN :    6000828 C |
 MARSVIDEO_CLEARSCREEN.FB_LOOP :                                    600082E C |
*MARSVIDEO_CLEARSCREEN.NO_REDRAW_2 :                                6000846 C |
 MARSVIDEO_CLEARSCREEN.WAIT_FB2 :                                   600083A C |
 MARSVIDEO_DRAWALLBG :      6000A8C C |
 MARSVIDEO_DRAWALLBG.HDNPOS :                                       6000BBE C |
 MARSVIDEO_DRAWALLBG.INDXMODE :                                     6000ADE C |
 MARSVIDEO_DRAWALLBG.LWR_XNXT :                                     6000B04 C |
 MARSVIDEO_DRAWALLBG.LWR_XVLD :                                     6000B0C C |
 MARSVIDEO_DRAWALLBG.LWR_YNXT :                                     6000B18 C |
 MARSVIDEO_DRAWALLBG.LWR_YVLD :                                     6000B20 C |
 MARSVIDEO_DRAWALLBG.MK_PIECE :                                     6000B78 C |
 MARSVIDEO_DRAWALLBG.NO_DATA :                                      6000B72 C |
 MARSVIDEO_DRAWALLBG.NXTLNG :                                       6000BA8 C |
 MARSVIDEO_DRAWALLBG.NXT_X :                                        6000B48 C |
 MARSVIDEO_DRAWALLBG.NXT_X_L :                                      6000B54 C |
 MARSVIDEO_DRAWALLBG.NXT_Y :                                        6000B34 C |
 MARSVIDEO_DRAWALLBG.NXT_Y_L :                                      6000B3A C |
 MARSVIDEO_DRAWALLBG.XBG_BACK :                                     6000AE6 C |
 MARSVIDEO_DRAWALLBG.XBG_INC :                                      6000AEE C |
 MARSVIDEO_DRAWALLBG.XBG_L :                                        6000B4E C |
 MARSVIDEO_DRAWALLBG.XINIT_L :                                      6000ADE C |
 MARSVIDEO_DRAWALLBG.YBG_BACK :                                     6000AF6 C |
 MARSVIDEO_DRAWALLBG.YBG_INC :                                      6000AFE C |
 MARSVIDEO_DRAWALLBG.YBG_L :                                        6000B40 C |
*MARSVIDEO_DRAWALLBG.YBLK_EX :                                      6000BCE C |
 MARSVIDEO_DRAWALLBG.YBLK_LOOPN :                                   6000B9A C |
 MARSVIDEO_DRAWALLBG.YMAX : 6000BA0 C |
 MARSVIDEO_DRAWPZPLGNS :                                   FFFFFFFFC0000378 C |
 MARSVIDEO_DRAWPZPLGNS.INVLD_Y :                           FFFFFFFFC00003F0 C |
 MARSVIDEO_DRAWPZPLGNS.LEN_MAX :                           FFFFFFFFC00003EA C |
 MARSVIDEO_DRAWPZPLGNS.NO_PZ :                             FFFFFFFFC00003F4 C |
 MARSVIDEO_DRAWSCALED :                                    FFFFFFFFC0000470 C |
 MARSVIDEO_DRAWSCALED.XWPOS :                              FFFFFFFFC00004EA C |
 MARSVIDEO_DRAWSCALED.XWPOS2 :                             FFFFFFFFC0000514 C |
 MARSVIDEO_DRAWSCALED.XY_SET :                             FFFFFFFFC00004BE C |
 MARSVIDEO_DRAWSCALED.X_CONT :                             FFFFFFFFC00004B0 C |
 MARSVIDEO_DRAWSCALED.X_FIX :                              FFFFFFFFC00004A8 C |
 MARSVIDEO_DRAWSCALED.X_GO :                               FFFFFFFFC00004F6 C |
 MARSVIDEO_DRAWSCALED.X_HIGH :                             FFFFFFFFC000051C C |
 MARSVIDEO_DRAWSCALED.X_LOOP :                             FFFFFFFFC00004DC C |
 MARSVIDEO_DRAWSCALED.X_LOOPM :                            FFFFFFFFC000050C C |
 MARSVIDEO_DRAWSCALED.X_NEXT :                             FFFFFFFFC0000526 C |
 MARSVIDEO_DRAWSCALED.X_REPT :                             FFFFFFFFC0000504 C |
 MARSVIDEO_DRAWSCALED.Y_HIGH :                             FFFFFFFFC00004C6 C |
 MARSVIDEO_DRAWSCALED.Y_LOOP :                             FFFFFFFFC00004B0 C |
 MARSVIDEO_DRAWSUPERSPR :                                  FFFFFFFFC0000240 C |
 MARSVIDEO_DRAWSUPERSPR.BLNKPIXL :                         FFFFFFFFC00003E4 C |
 MARSVIDEO_DRAWSUPERSPR.DRWSLD_NXTLINE_TEX :               FFFFFFFFC00002E2 C |
 MARSVIDEO_DRAWSUPERSPR.DRWSLD_UPDLINE_TEX :               FFFFFFFFC0000406 C |
 MARSVIDEO_DRAWSUPERSPR.DRWTASK_EXIT :                     FFFFFFFFC0000440 C |
 MARSVIDEO_DRAWSUPERSPR.DRWTEX_GONXTPZ :                   FFFFFFFFC0000422 C |
 MARSVIDEO_DRAWSUPERSPR.DRWTSK1_VLD_Y :                    FFFFFFFFC00002C0 C |
 MARSVIDEO_DRAWSUPERSPR.FB_TL :                            FFFFFFFFC00003B6 C |
*MARSVIDEO_DRAWSUPERSPR.FINISH_IT :                        FFFFFFFFC0000440 C |
 MARSVIDEO_DRAWSUPERSPR.GO_NXTLINE :                       FFFFFFFFC00002F0 C |
*MARSVIDEO_DRAWSUPERSPR.GO_NXTPZ :                         FFFFFFFFC00002EC C |
 MARSVIDEO_DRAWSUPERSPR.HDN_LINE :                         FFFFFFFFC00003DE C |
 MARSVIDEO_DRAWSUPERSPR.INVLD_Y :                          FFFFFFFFC00002B8 C |
 MARSVIDEO_DRAWSUPERSPR.LEN_MAX :                          FFFFFFFFC00002B2 C |
 MARSVIDEO_DRAWSUPERSPR.NO_PZ :                            FFFFFFFFC00002BC C |
 MARSVIDEO_DRAWSUPERSPR.RESET_RD :                         FFFFFFFFC0000432 C |
 MARSVIDEO_DRAWSUPERSPR.TAG_YHGHT :                        FFFFFFFFC00002F4 C |
 MARSVIDEO_DRAWSUPERSPR.TEX2_XLOOP :                       FFFFFFFFC00003B0 C |
 MARSVIDEO_DRAWSUPERSPR.TEX_SKIP_LINE :                    FFFFFFFFC00003EE C |
 MARSVIDEO_DRAWSUPERSPR.TL_FIX :                           FFFFFFFFC0000378 C |
 MARSVIDEO_DRAWSUPERSPR.TR_FIX :                           FFFFFFFFC0000364 C |
 MARSVIDEO_DRAWSUPERSPR.TXREVERS :                         FFFFFFFFC0000332 C |
 MARSVIDEO_DRAWSUPERSPR.VALID_Y :                          FFFFFFFFC00002F8 C |
 MARSVIDEO_DRAWSUPERSPR.Y_TP :                             FFFFFFFFC000038E C |
 MARSVIDEO_FIXTBLSHIFT :    60008D0 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6000906 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       60008EE C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    6000918 C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6000912 C |
 MARSVIDEO_INIT :           60007D4 C |  MARSVIDEO_INIT.DEF_FB :    60007F4 C |
 MARSVIDEO_INIT.NXT_LNE :   60007FA C |  MARSVIDEO_INIT.WAIT_FRM :  600080A C |
 MARSVIDEO_MAKENAMETBL :    6000860 C |
 MARSVIDEO_MAKENAMETBL.CANT_USE :                                   60008CA C |
 MARSVIDEO_MAKENAMETBL.LINETBL_NORMAL :                             60008BC C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE :                                    6000894 C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE2 :                                   60008C0 C |
 MARSVIDEO_MARKSPRBLOCKS :  6000FD0 C |
*MARSVIDEO_MARKSPRBLOCKS.BAD_XY :                                   6001084 C |
 MARSVIDEO_MARKSPRBLOCKS.EXIT :                                     6001088 C |
 MARSVIDEO_MARKSPRBLOCKS.NEXT_ONE :                                 6000FD4 C |
 MARSVIDEO_MARKSPRBLOCKS.XL_B :                                     600102A C |
 MARSVIDEO_MARKSPRBLOCKS.XL_T :                                     600101E C |
 MARSVIDEO_MARKSPRBLOCKS.XR_B :                                     6001030 C |
 MARSVIDEO_MARKSPRBLOCKS.XR_T :                                     6001024 C |
 MARSVIDEO_MARKSPRBLOCKS.X_GOOD :                                   6001008 C |
 MARSVIDEO_MARKSPRBLOCKS.X_LOOP :                                   6001074 C |
 MARSVIDEO_MARKSPRBLOCKS.YL_B :                                     6001044 C |
 MARSVIDEO_MARKSPRBLOCKS.YL_T :                                     6001038 C |
 MARSVIDEO_MARKSPRBLOCKS.YR_B :                                     600104A C |
 MARSVIDEO_MARKSPRBLOCKS.YR_T :                                     600103E C |
 MARSVIDEO_MARKSPRBLOCKS.Y_GOOD :                                   6001016 C |
 MARSVIDEO_MARKSPRBLOCKS.Y_LOOP :                                   6001054 C |
 MARSVIDEO_MKSCRLFIELD :    6000988 C |
 MARSVIDEO_MKSCRLFIELD.NO_INDX :                                    6000992 C |
 MARSVIDEO_MOVEBG :         6000DC0 C |
 MARSVIDEO_MOVEBG.DONT_SNAP :                                       6000F98 C |
 MARSVIDEO_MOVEBG.HAS_SCRLDATA :                                    6000DCC C |
 MARSVIDEO_MOVEBG.INDXMODE :                                        6000F96 C |
 MARSVIDEO_MOVEBG.REQD_B :  6000EEE C |  MARSVIDEO_MOVEBG.REQR_B :  6000F30 C |
 MARSVIDEO_MOVEBG.XEQU :    6000DE2 C |  MARSVIDEO_MOVEBG.XNEGTV :  6000E6A C |
 MARSVIDEO_MOVEBG.XNEGTVL : 6000E80 C |  MARSVIDEO_MOVEBG.XPOSTV :  6000E74 C |
 MARSVIDEO_MOVEBG.XPOSTVL : 6000E8A C |  MARSVIDEO_MOVEBG.X_STEND : 6000E02 C |
 MARSVIDEO_MOVEBG.YDL_BUSY :                                        6000F46 C |
 MARSVIDEO_MOVEBG.YDR_BUSY :                                        6000F04 C |
 MARSVIDEO_MOVEBG.YEQU :    6000DF8 C |  MARSVIDEO_MOVEBG.YNEGTV :  6000E96 C |
 MARSVIDEO_MOVEBG.YNEGTVL : 6000EAC C |  MARSVIDEO_MOVEBG.YPOSTV :  6000EA0 C |
 MARSVIDEO_MOVEBG.YPOSTVL : 6000EB6 C |
 MARSVIDEO_MOVEBG.YPU_NEGTV :                                       6000E1C C |
 MARSVIDEO_MOVEBG.YPU_POSTV :                                       6000E26 C |
 MARSVIDEO_MOVEBG.YX_NEGTV :                                        6000E3A C |
 MARSVIDEO_MOVEBG.YX_POSTV :                                        6000E44 C |
 MARSVIDEO_MOVEBG.Y_STEND : 6000E08 C |  MARSVIDEO_RESETNAMETBL :   600084C C |
 MARSVIDEO_RESETNAMETBL.NXT_LNE2 :                                  6000852 C |
 MARSVIDEO_SETSCRLBG :      60009C0 C |
 MARSVIDEO_SETSCRLBG.INDXMODE :                                     60009CC C |
 MARSVIDEO_SETSUPERSPR :    6000FB8 C |  MARSVIDEO_SETWATCHDOG :    600093C C |
 MARSVIDEO_SHOWSCRLBG :     60009D8 C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     60009FC C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP_W :                                   6000A3C C |
 MARSVIDEO_SHOWSCRLBG.LN_WAVY :                                     6000A24 C |
*MARSVIDEO_SHOWSCRLBG.NO_LINES :                                    6000A7C C |
 MARSVIDEO_SHOWSCRLBG.WXL_L :                                       6000A60 C |
 MARSVIDEO_SHOWSCRLBG.WXL_R :                                       6000A5A C |
 MARSVIDEO_SHOWSCRLBG.XL_L :                                        6000A0A C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        6000A04 C |
 MARSVIDEO_SPRBLKREFILL :                                  FFFFFFFFC00000E0 C |
 MARSVIDEO_SPRBLKREFILL.HDNPOS :                           FFFFFFFFC000020E C |
 MARSVIDEO_SPRBLKREFILL.INDXMODE :                         FFFFFFFFC0000132 C |
 MARSVIDEO_SPRBLKREFILL.MK_PIECE :                         FFFFFFFFC00001C8 C |
 MARSVIDEO_SPRBLKREFILL.NO_DATA :                          FFFFFFFFC00001C2 C |
 MARSVIDEO_SPRBLKREFILL.NO_PZ :                            FFFFFFFFC0000192 C |
 MARSVIDEO_SPRBLKREFILL.NXTLNG :                           FFFFFFFFC00001F8 C |
 MARSVIDEO_SPRBLKREFILL.NXT_X :                            FFFFFFFFC0000178 C |
 MARSVIDEO_SPRBLKREFILL.NXT_X_L :                          FFFFFFFFC0000184 C |
 MARSVIDEO_SPRBLKREFILL.NXT_Y :                            FFFFFFFFC0000162 C |
 MARSVIDEO_SPRBLKREFILL.NXT_Y_L :                          FFFFFFFFC0000168 C |
 MARSVIDEO_SPRBLKREFILL.XBG_BACK :                         FFFFFFFFC000013A C |
 MARSVIDEO_SPRBLKREFILL.XBG_INC :                          FFFFFFFFC0000142 C |
 MARSVIDEO_SPRBLKREFILL.XBG_L :                            FFFFFFFFC000017E C |
 MARSVIDEO_SPRBLKREFILL.XINIT_L :                          FFFFFFFFC0000132 C |
 MARSVIDEO_SPRBLKREFILL.YBG_BACK :                         FFFFFFFFC000014A C |
 MARSVIDEO_SPRBLKREFILL.YBG_INC :                          FFFFFFFFC0000152 C |
 MARSVIDEO_SPRBLKREFILL.YBG_L :                            FFFFFFFFC000016E C |
*MARSVIDEO_SPRBLKREFILL.YBLK_EX :                          FFFFFFFFC000021E C |
 MARSVIDEO_SPRBLKREFILL.YBLK_LOOPN :                       FFFFFFFFC00001EA C |
 MARSVIDEO_SPRBLKREFILL.YMAX :                             FFFFFFFFC00001F0 C |
 MARS_ENTRY :                   800 C |  MARS_ENTRY.ADAPTER_ENBL :      86C C |
 MARS_ENTRY.NO_MARS :           87C C |  MARS_ENTRY.RAM_CODE :          844 C |
 MARS_ENTRY.RESTARTICD :        854 C |  MARS_LOADFASTCODE :        60007AC C |
 MARS_LOADFASTCODE.COPY :   60007BE C |  MARS_RAMDATA :               263C0 C |
 MARS_RAMDATA_E :             2E090 C |  MARS_SCOMM :                   4C8 C |
 MARS_SCOMM.BLOCKED :           54D C |  MARS_SCOMM.CLRCOM :            552 C |
 MARS_SCOMM.NEXT_COMM :         526 C |  MARS_SCOMM.NEXT_PASS :         51C C |
 MARS_SCOMM.WAIT_CMD :          514 C |  MARS_SCOMM.WAIT_ENTER :        4F8 C |
 MARS_SCOMM.W_PASS2 :           53C C |  MASTERTRKLIST :             88453A C |
 MASTER_IRQ :               6000248 C |  MASTER_LOOP :              600124C C |
 MASTER_LOOP.COPY_PAL :     6001298 C |  MASTER_LOOP.COPY_SAFE :    600127E C |
 MASTER_LOOP.NO_INIT :      6001300 C |  MASTER_LOOP.TMR_OFF :      600130C C |
 MASTER_LOOP.WAIT :         600128A C |  MASTER_LOOP.WAIT_FB :      600124E C |
 MASTER_LOOP.WAIT_FRMSWP :  600125C C |  MASTER_LOOP.WAIT_SLV :     60012EE C |
 MAX_FACES :                    100 - |  MAX_GEMAENTRY :                  4 - |
 MAX_INS :                       10 - |  MAX_MDDMATSK :                  10 - |
 MAX_MDERAM :                   800 - |  MAX_MODELS :                     E - |
 MAX_PAGE0_EN :                   4 - |  MAX_PWMBACKUP :                 80 - |
 MAX_PWMCHNL :                    7 - |  MAX_SCRNBUFF :               12800 - |
 MAX_SUPERSPR :                  20 - |  MAX_SVDP_PZ :                  140 - |
 MAX_TRKCHN :                    11 - |  MAX_ZDIST :       FFFFFFFFFFFFF400 - |
 MBG_DATA :                      20 C |  MBG_FBDATA :                    2C C |
 MBG_FBPOS :                     28 C |  MBG_FBPOS_Y :                   14 C |
 MBG_FLAGS :                      0 C |  MBG_HEIGHT :                    12 C |
*MBG_INDXINC :                   34 C |  MBG_INTRL_BLK :                 16 C |
 MBG_INTRL_H :                   1A C |  MBG_INTRL_SIZE :                1C C |
 MBG_INTRL_W :                   18 C | *MBG_MAP :                       24 C |
*MBG_MAPBLK :                     1 C | *MBG_RFILL :                     30 C |
 MBG_WIDTH :                     10 C |  MBG_XINC_L :                     8 C |
 MBG_XINC_R :                     A C |  MBG_XPOS :                      38 C |
 MBG_XPOS_OLD :                   4 C |  MBG_XSET :                       2 C |
 MBG_YINC_D :                     E C |  MBG_YINC_U :                     C C |
 MBG_YPOS :                      3C C |  MBG_YPOS_OLD :                   6 C |
 MBG_YSET :                       3 C | *MCD :                            0 - |
 MCHNSND_BANK :                   C C |  MCHNSND_CCHREAD :                8 C |
 MCHNSND_ENBL :                   0 C |  MCHNSND_END :                   14 C |
 MCHNSND_FLAGS :                 20 C |  MCHNSND_LOOP :                  18 C |
 MCHNSND_PITCH :                 1C C |  MCHNSND_READ :                   4 C |
 MCHNSND_START :                 10 C |  MCHNSND_VOL :                   24 C |
*MDBNK0_END :                916E6A C | *MDBNK0_END.END :             16E6A C |
*MDBNK0_START :              904938 C |  MDLDATA_PAL_TEST :          916C6A C |
 MDLRD_ROTATE :    FFFFFFFFC00005A4 C |  MDLRD_SETPOINT :  FFFFFFFFC0000474 C |
 MDLRD_SETPOINT.INSIDE :                                   FFFFFFFFC000053C C |
 MDLRD_SETPOINT.SAVE_Z :                                   FFFFFFFFC0000572 C |
 MDLRD_SETPOINT.SAVE_Z2 :                                  FFFFFFFFC000056C C |
 MDLRD_SETPOINT.X_LW :                                     FFFFFFFFC0000578 C |
 MDLRD_SETPOINT.X_RW :                                     FFFFFFFFC000057E C |
 MDLRD_SETPOINT.Y_LW :                                     FFFFFFFFC0000584 C |
 MDLRD_SETPOINT.Y_RW :                                     FFFFFFFFC000058A C |
 MDLRD_SETPOINT.ZMULTI :                                   FFFFFFFFC0000554 C |
 MDL_DATA :                       0 C |  MDL_OPTION :                     4 C |
 MDL_X_POS :                      8 C |  MDL_X_ROT :                     14 C |
 MDL_Y_POS :                      C C |  MDL_Y_ROT :                     18 C |
 MDL_Z_POS :                     10 C |  MDL_Z_ROT :                     1C C |
 MDRAM_START :             FFFF9000 - |  MDSYS_SINEDATA :            883784 C |
 MD_BANK_SRAM :              A130F1 - |  MD_DEBUGMENU :              883D5E C |
 MD_DEBUGMENU.CLEANUP :      884494 C |  MD_DEBUGMENU.CLNUP :        88449E C |
 MD_DEBUGMENU.COPY_1 :       8843BA C |  MD_DEBUGMENU.COPY_2 :       8843D6 C |
 MD_DEBUGMENU.COPY_3 :       8843F0 C |  MD_DEBUGMENU.FADE_IN :      8844A6 C |
 MD_DEBUGMENU.FADE_OUT :     8844CC C |  MD_DEBUGMENU.FRAMES :       883F18 C |
 MD_DEBUGMENU.KEEP :         883ED8 C |  MD_DEBUGMENU.LIST :         883DD6 C |
 MD_DEBUGMENU.LOOP :         883DAC C |  MD_DEBUGMENU.MAKE_FRAME :   883EFC C |
 MD_DEBUGMENU.MOVE_CURSOR_UD :                                       884504 C |
 MD_DEBUGMENU.NOAA :         884322 C |  MD_DEBUGMENU.NOBA :         884312 C |
 MD_DEBUGMENU.NOC_C :        884354 C |  MD_DEBUGMENU.NOD2 :         8842E6 C |
 MD_DEBUGMENU.NOD_M :        884032 C |  MD_DEBUGMENU.NOL :          884332 C |
 MD_DEBUGMENU.NOL_M :        88402A C |  MD_DEBUGMENU.NOR :          884342 C |
 MD_DEBUGMENU.NOR_M :        884022 C |  MD_DEBUGMENU.NOU2 :         8842CA C |
 MD_DEBUGMENU.NOU_M :        88403A C |  MD_DEBUGMENU.NOX2 :         8842B0 C |
 MD_DEBUGMENU.NOX_X :        88417A C |  MD_DEBUGMENU.NOY2 :         884296 C |
 MD_DEBUGMENU.NOZ_DOWN :     88411A C |  MD_DEBUGMENU.NOZ_L :        88413E C |
 MD_DEBUGMENU.NOZ_R :        884132 C |  MD_DEBUGMENU.NOZ_UP :       884126 C |
 MD_DEBUGMENU.NO_UPD2 :      884404 C |  MD_DEBUGMENU.ON_LOOP :      883DD0 C |
 MD_DEBUGMENU.P0_DOWN :      88451E C |  MD_DEBUGMENU.P0_UP :        884534 C |
 MD_DEBUGMENU.PAGE0 :        883E3E C |  MD_DEBUGMENU.PAGE0_CURSOR : 883E5E C |
 MD_DEBUGMENU.PAGE0_INIT :   883E10 C |  MD_DEBUGMENU.PAGE0_JUMP :   883E68 C |
 MD_DEBUGMENU.PAGE0_RET :    883E0E C |  MD_DEBUGMENU.PAGE1 :        883EB8 C |
 MD_DEBUGMENU.PAGE1_INIT :   883E7A C |  MD_DEBUGMENU.PAGE1_RET :    883EFA C |
 MD_DEBUGMENU.PAGE2 :        884006 C |  MD_DEBUGMENU.PAGE2_INIT :   883F28 C |
 MD_DEBUGMENU.PAGE2_RET :    88405A C |  MD_DEBUGMENU.PAGE3 :        8840EA C |
 MD_DEBUGMENU.PAGE3_INIT :   88405E C |  MD_DEBUGMENU.PAGE3_RET :    884192 C |
 MD_DEBUGMENU.PAGE4 :        8841E8 C |  MD_DEBUGMENU.PAGE4_INIT :   884194 C |
 MD_DEBUGMENU.PAGE4_RET :    884236 C |  MD_DEBUGMENU.PAGE5 :        884276 C |
 MD_DEBUGMENU.PAGE5_INIT :   884238 C |  MD_DEBUGMENU.PAGE5_RET :    884368 C |
 MD_DEBUGMENU.PAGE5_UPDATE : 88436A C |
 MD_DEBUGMENU.PAGE5_UPDVARS :                                        88438E C |
 MD_DEBUGMENU.PRINT_CURSOR : 8844F2 C |  MD_DEBUGMENU.PROCS_TASK :   884438 C |
 MD_DEBUGMENU.TASKLIST :     884446 C |  MD_DEBUGMENU.TASK_00 :      884450 C |
 MD_DEBUGMENU.TASK_01 :      884474 C |  MD_DEBUGMENU.TASK_02 :      884480 C |
 MD_DEBUGMENU.TASK_03 :      884484 C |  MD_DEBUGMENU.TASK_04 :      88448C C |
 MD_DEBUGMENU.THIS_BG :      88405C C |  MD_DEBUGMENU.TOPTRK :       8842F6 C |
 MD_DEBUGMENU.TOPTRK2 :      884302 C |  MD_DEBUGMENU.WAIT :         88439C C |
 MD_DEBUGMENU.Z_DW :         884222 C |  MD_DEBUGMENU.Z_UP :         884214 C |
 MD_ERRADDR :                   89A C |  MD_ERRBUS :                    89A C |
 MD_ERRCHK :                    89A C |  MD_ERRILL :                    89A C |
 MD_ERROREX :                   89A C |  MD_ERRORTRAP :                 89A C |
 MD_ERRPRIVL :                  89A C |  MD_ERRTRAPV :                  89A C |
 MD_ERRZDIV :                   89A C |  MD_HOTSTART :                  8F4 C |
 MD_HOTSTART.LOOP_RAM :         914 C |  MD_INIT :                      8B2 C |
 MD_INIT.WAIT_BLK :             8C2 C |  MD_INIT.WAIT_DMA :             8D4 C |
 MD_LINE1010 :                  89A C |  MD_LINE1111 :                  89A C |
 MD_MODE0 :                  88391E C | *MD_MODE0.FADE_IN :          883A50 C |
*MD_MODE0.FADE_OUT :         883A76 C |  MD_MODE0.LOOP :             8839C8 C |
 MD_MODE0.NOZ_DOWN :         8839F0 C |  MD_MODE0.NOZ_L :            883A3E C |
 MD_MODE0.NOZ_R :            883A24 C |  MD_MODE0.NOZ_UP :           883A0A C |
*MD_TOPCODE :                88093E C | *MD_TOPCODE_END :            884938 C |
*MD_TOPCODE_END.END :          4938 C |  MD_TRACE :                     89A C |
 MODE :                          18 - |  MODE_FADEOUT :              8838D4 C |
 MODE_FADEOUT.LOOPW :        8838F8 C |  MODE_INIT :                 8838D2 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        6 C |
 MOUSE_Y :                        8 C |  MSTR_GFX0_HBLK :           60013F0 C |
 MSTR_GFX0_INIT_1 :         60013F8 C |  MSTR_GFX0_INIT_2 :         6001406 C |
 MSTR_GFX0_LOOP :           6001406 C |  MSTR_GFX0_VBLK :           60013F4 C |
 MSTR_GFX1_HBLK :           600140A C |  MSTR_GFX1_INIT_1 :         600141A C |
 MSTR_GFX1_INIT_2 :         6001414 C |  MSTR_GFX1_LOOP :           600141E C |
 MSTR_GFX1_LOOP.COPY_ME :   6001446 C |  MSTR_GFX1_LOOP.DIRECT :    6001440 C |
*MSTR_GFX1_LOOP.DONT_RDRW : 6001456 C |  MSTR_GFX1_LOOP.M1LIST :    6001430 C |
*MSTR_GFX1_LOOP.RLE :       6001464 C |  MSTR_GFX1_VBLK :           6001410 C |
 MSTR_GFX2_HBLK :           6001468 C |  MSTR_GFX2_INIT_1 :         6001490 C |
 MSTR_GFX2_INIT_2 :         60014C4 C |  MSTR_GFX2_INIT_CONT :      60014CA C |
 MSTR_GFX2_LOOP :           60014CE C | *MSTR_GFX2_LOOP.NO_SWAP :   600151E C |
 MSTR_GFX2_LOOP.WAIT_WD :   6001512 C |  MSTR_GFX2_VBLK :           600146C C |
 MSTR_GFX2_VBLK.MID_DRAW :  600147E C |  MSTR_GFX3_HBLK :           6001596 C |
 MSTR_GFX3_INIT_1 :         60015B4 C |  MSTR_GFX3_INIT_2 :         60015C6 C |
 MSTR_GFX3_LOOP :           60015CC C | *MSTR_GFX3_LOOP.NO_PZ :     600160A C |
 MSTR_GFX3_LOOP.WAIT_WD :   60015FE C |  MSTR_GFX3_VBLK :           600159C C |
 MSTR_GFX3_VBLK.COPY_ME :   60015A2 C |  MSTR_GFX4_HBLK :           6001640 C |
 MSTR_GFX4_INIT_1 :         6001670 C |  MSTR_GFX4_INIT_2 :         6001688 C |
 MSTR_GFX4_INIT_CONT :      600168E C |  MSTR_GFX4_LOOP :           600169C C |
 MSTR_GFX4_LOOP.CONT_PLGN : 60016B0 C |
 MSTR_GFX4_LOOP.NO_REDRAW_2 :                                       60016D2 C |
*MSTR_GFX4_LOOP.NO_SWAP :   60016E8 C |  MSTR_GFX4_LOOP.PAGE_2 :    60016AA C |
 MSTR_GFX4_LOOP.WAIT_WD :   60016DC C |  MSTR_GFX4_VBLK :           6001644 C |
 MSTR_GFX4_VBLK.COPY_SAFE : 6001654 C |  MSTR_GFX4_VBLK.SLV_BUSY :  600166A C |
 MSTR_GFXLIST :             6001370 C | *MSTR_GFXLIST_H :           6001350 C |
 MSTR_GFXLIST_V :           600137C C | *M_ASCII :                  60055B0 C |
 M_IRQ_BAD :                6000380 C |  M_IRQ_CMD :                60003A0 C |
 M_IRQ_CMD.WAIT_DMA :       60003DC C |  M_IRQ_H :                  60003F4 C |
 M_IRQ_PWM :                6000384 C |  M_IRQ_V :                  6000410 C |
 M_IRQ_VRES :               600042C C |  M_IRQ_VRES.NO_DMA :        6000462 C |
 M_IRQ_VRES.RV_BUSY :       6000474 C |  M_IRQ_VRES.WAIT_DMA :      600044C C |
*NESTMAX :                      100 - |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
 PALDATA_MARS_TEST :         916936 C |  PALDATA_MARS_TEST2 :        916A6A C |
*PALMODE :                       31 C | *PAL_BG :                    884918 C |
 PAL_EMILY :                 883B6E C | *PAL_TESTBOARD :             8848D8 C |
*PEN :                           20 - |  PLGN_TEXURE :                   80 - |
 PLGN_TRI :                      40 - |  PLYPZ_MTRL :                     4 C |
 PLYPZ_SRC_XL :                  10 C |  PLYPZ_SRC_XL_DX :               20 C |
 PLYPZ_SRC_XR_DX :               24 C |  PLYPZ_SRC_YL :                  14 C |
 PLYPZ_SRC_YL_DX :               28 C |  PLYPZ_SRC_YR_DX :               2C C |
 PLYPZ_TYPE :                     0 C |  PLYPZ_XL :                       C C |
 PLYPZ_XL_DX :                   18 C |  PLYPZ_XR_DX :                   1C C |
 PLYPZ_YTB :                      8 C |  POLYGN_MTRL :                    4 C |
 POLYGN_POINTS :                  8 C |  POLYGN_SRCPNTS :                28 C |
 POLYGN_TYPE :                    0 C | *PSGALV :                      16B0 C |
*PSGATK :                      1694 C |  PSGCOM :                      168C C |
*PSGDEC :                      1698 C | *PSGDTH :                      16AC C |
 PSGDTL :                      16A8 C | *PSGENV :                      16A4 C |
 PSGFREQ_LIST :                144B C |  PSGHATMODE :                  1E5E C |
*PSGLEV :                      1690 C | *PSGRRT :                      16A0 C |
*PSGSLV :                      169C C | *PSGTIM :                      16B8 C |
*PSGVOL :                      16BC C | *PSG_CTRL :                  C00011 - |
 PUT_PIECE :       FFFFFFFFC0000298 C |
 PUT_PIECE.BAD_PIECE :                                     FFFFFFFFC000034A C |
 PUT_PIECE.DONTRESET_PZ :                                  FFFFFFFFC0000342 C |
 PUT_PIECE.LEFTH : FFFFFFFFC00002A6 C |
 PUT_PIECE.TOP_NEG :                                       FFFFFFFFC000032A C |
 PVOL :                          30 - | *PWCOM :                          0 - |
 PWINSH :                        20 - |  PWINSL :                        30 - |
 PWINSM :                        28 - |  PWMCOM :                      1630 C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWOUTF :                        18 - |
 PWPHL :                         10 - |  PWPTH_V :                        8 - |
 RAMDMA_BLAST :                  B6 C |  RAMDMA_BLAST.END :             10E C |
 RAMDMA_BLAST.EXIT :            126 C |  RAMDMA_BLAST.NEXT :             E8 C |
 RAMDMA_LOAD :                    0 C |  RAMDMA_LOAD.FROM_RAM :          A2 C |
*RAM_CURRGFX :     FFFFFFFFFFFF9002 C |  RAM_CURRINDX :    FFFFFFFFFFFF9006 C |
 RAM_CURRPAGE :    FFFFFFFFFFFF9000 C |  RAM_CURRSELC :    FFFFFFFFFFFF9004 C |
 RAM_CURRTEMPO :   FFFFFFFFFFFF900C C |  RAM_CURRTICKS :   FFFFFFFFFFFF900A C |
 RAM_CURRTRACK :   FFFFFFFFFFFF9008 C |  RAM_DMACODE :     FFFFFFFFFFFFA862 C |
 RAM_EMIANIM :     FFFFFFFFFFFF9002 C |  RAM_EMIFRAME :    FFFFFFFFFFFF9000 C |
 RAM_EMIPOSX :     FFFFFFFFFFFF9004 C |  RAM_EMIPOSY :     FFFFFFFFFFFF9006 C |
*RAM_EMIUPD :      FFFFFFFFFFFF9008 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFFA602 C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFFA600 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFFA5FE C |  RAM_FADEMARSTMR : FFFFFFFFFFFFA604 C |
 RAM_FADEMDDELAY : FFFFFFFFFFFFA5FA C |  RAM_FADEMDINCR :  FFFFFFFFFFFFA5F8 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFFA5F6 C |  RAM_FADEMDTMR :   FFFFFFFFFFFFA5FC C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFA606 C |  RAM_GEMALIST :    FFFFFFFFFFFF9014 C |
 RAM_GEMALISTFM :  FFFFFFFFFFFF901C C |  RAM_GEMALISTPWM : FFFFFFFFFFFF9028 C |
 RAM_GEMAUPD :     FFFFFFFFFFFF9012 C |  RAM_HORSCROLL :   FFFFFFFFFFFF9820 C |
 RAM_INITFLUG :    FFFFFFFFFFFFAA6A C |  RAM_INPUTDATA :   FFFFFFFFFFFFA622 C |
 RAM_MARS_BGBUFFSCALE_S :  2600CA40 C |  RAM_MARS_BGBUFFSCRL :     26018A40 C |
 RAM_MARS_DREQDMA :        26007CD0 C |  RAM_MARS_DREQREAD :       26008330 C |
 RAM_MARS_GLOBAL :         26008990 C | *RAM_MARS_LR_PIXELS :      26014A40 C |
 RAM_MARS_OBJCAMERA :      26013C00 C |  RAM_MARS_OBJECTS :        26013A40 C |
 RAM_MARS_PLGNLIST_0 :     26013C18 C |  RAM_MARS_PLGNLIST_1 :     26014418 C |
 RAM_MARS_PLGNNUM_0 :      26014C18 C |  RAM_MARS_PLGNNUM_1 :      26014C1C C |
 RAM_MARS_POLYGONS_0 :     2600CA40 C |  RAM_MARS_POLYGONS_1 :     26010240 C |
 RAM_MARS_RDRWBLOCKS :     2600CA40 C |  RAM_MARS_SCRNBUFF :       2600CA40 C |
 RAM_MARS_SVDPDRWLIST :    26008E40 C |  RAM_MARS_SVDPDRWLIST_E :  2600CA40 C |
*RAM_MARS_UD_PIXELS :      2600EA40 C |  RAM_MDDREQ :      FFFFFFFFFFFFAA82 C |
*RAM_MDGLBL_NULL : FFFFFFFFFFFFAA7E C |  RAM_MDGLOBAL :    FFFFFFFFFFFFAA7E C |
 RAM_MDMARSHINT :  FFFFFFFFFFFFAA74 C |  RAM_MDMARSPALFD : FFFFFFFFFFFFA190 C |
 RAM_MDMARSVINT :  FFFFFFFFFFFFAA6E C |  RAM_MDSOUND :     FFFFFFFFFFFF9800 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFA622 C | *RAM_MDVBLKWAIT :  FFFFFFFFFFFFAA7A C |
 RAM_MDVIDEO :     FFFFFFFFFFFF9820 C |  RAM_MODEBUFF :    FFFFFFFFFFFF9000 C |
 RAM_PALETTE :     FFFFFFFFFFFFA090 C |  RAM_PALETTEFD :   FFFFFFFFFFFFA110 C |
*RAM_SAVEDATA :    FFFFFFFFFFFFA662 C |  RAM_SCRN0_FRAME : FFFFFFFFFFFF900E C |
 RAM_SCRN0_TIMER : FFFFFFFFFFFF9010 C |  RAM_SNDSAVEREG :  FFFFFFFFFFFF9800 C |
 RAM_SPRFRAME :    FFFFFFFFFFFF9038 C |  RAM_SPRITES :     FFFFFFFFFFFF9C30 C |
*RAM_SPRTIMER :    FFFFFFFFFFFF9036 C | *RAM_SYSFLAGS :    FFFFFFFFFFFFAA7C C |
 RAM_SYSRANDSEED : FFFFFFFFFFFFAA66 C |  RAM_SYSRANDVAL :  FFFFFFFFFFFFAA62 C |
 RAM_VDPDMAINDX :  FFFFFFFFFFFFA5F0 C |  RAM_VDPDMALIST :  FFFFFFFFFFFFA390 C |
 RAM_VDPDMAMOD :   FFFFFFFFFFFFA5F2 C |  RAM_VDPREGS :     FFFFFFFFFFFFA60A C |
 RAM_VERSCROLL :   FFFFFFFFFFFF9BE0 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFFA470 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFFA5F4 C |  RCHWIDTH :                      36 - |
 READROMB :                     EE2 C |  READROMB.IMBACK :              EF2 C |
 READROMB.W2 :                  EFF C |  READROMB.WAIT :                EFB C |
*RELAXED :                        0 - |  ROM_END :                   126418 C |
 RRT :                           14 - |  SBEATACC :                      34 C |
 SBEATPTCK_1 :                   32 C |  SCN0_TIMER :                     8 - |
 SCREEN_HEIGHT :                 E0 - |  SCREEN_WIDTH :                 140 - |
 SETUPCHIP :                    558 C |  SETUPCHIP.ALRDFND :            E1E C |
*SETUPCHIP.BAD_INS :            DC4 C |  SETUPCHIP.BUSY_S :             DEE C |
 SETUPCHIP.CHECK_CHNL :         D96 C |  SETUPCHIP.CHECK_INS :          D83 C |
 SETUPCHIP.CHIP_OUT :           CCF C |  SETUPCHIP.CHIP_SWAP :          C93 C |
 SETUPCHIP.CHKFREE :            E25 C |  SETUPCHIP.CHK_TBL :            DF1 C |
 SETUPCHIP.CHK_TBLN :           DD3 C |  SETUPCHIP.CHNL_UNLINK :        AD3 C |
 SETUPCHIP.CHP_UNLK :           D5C C |  SETUPCHIP.CLR :                57D C |
 SETUPCHIP.CONFM_RD :           722 C |  SETUPCHIP.DAC_OUT :            CF4 C |
*SETUPCHIP.DCUT :               BBE C |  SETUPCHIP.DIFFR :              E0A C |
*SETUPCHIP.DOFF :               BC3 C |  SETUPCHIP.DO_CHNL :            59D C |
 SETUPCHIP.EFFDAC_E :           8F5 C |  SETUPCHIP.EFFDAC_F :           924 C |
 SETUPCHIP.EFFFM_D :            88B C |  SETUPCHIP.EFFFM_E :            8E7 C |
 SETUPCHIP.EFFFM_F :            91D C |  SETUPCHIP.EFFFM_X :            9FA C |
 SETUPCHIP.EFFPSG_D :           85D C |  SETUPCHIP.EFFPSG_E :           8DD C |
 SETUPCHIP.EFFPSG_F :           90F C |  SETUPCHIP.EFFPWM_E :           902 C |
 SETUPCHIP.EFFPWM_F :           92A C |  SETUPCHIP.EFFPWM_X :           9E1 C |
 SETUPCHIP.EFF_DAC :            834 C |  SETUPCHIP.EFF_FM :             81D C |
 SETUPCHIP.EFF_PSG :            80A C |  SETUPCHIP.EFF_PWM :            846 C |
 SETUPCHIP.E_FNEGD2 :           90C C |  SETUPCHIP.E_GO :               9E0 C |
 SETUPCHIP.E_NEG :              8F1 C |  SETUPCHIP.E_NEGD :             8FF C |
 SETUPCHIP.E_NEGP :             91A C |  SETUPCHIP.E_NOEF :             9DC C |
 SETUPCHIP.E_NOF :              9D2 C |  SETUPCHIP.FM3_OUT :            D02 C |
 SETUPCHIP.FMPAN_LIST :         A34 C |  SETUPCHIP.FMPICKINS :          735 C |
 SETUPCHIP.FMSAME_INS :         733 C |  SETUPCHIP.FM_CHNLKON :         C66 C |
 SETUPCHIP.FM_KEYCUT :          C8A C |  SETUPCHIP.FM_KEYOFF :          C8F C |
 SETUPCHIP.FM_KPV :             C89 C |  SETUPCHIP.FM_OUT :             D3E C |
 SETUPCHIP.FNDLINK :            E1A C |  SETUPCHIP.FNDSLOT :            E38 C |
 SETUPCHIP.FND_OCT :            C43 C |  SETUPCHIP.FREQINC_DAC :        962 C |
 SETUPCHIP.FREQINC_FM :         972 C |  SETUPCHIP.FREQINC_PSG :        998 C |
 SETUPCHIP.FREQINC_PWM :        92E C |  SETUPCHIP.FROM_NL :            CAC C |
 SETUPCHIP.GET_OCT :            C38 C |  SETUPCHIP.GO_DOWN :            8C4 C |
 SETUPCHIP.GO_UP :              8CD C |  SETUPCHIP.GRAB_DVAL :          8BA C |
 SETUPCHIP.GRAB_PRTM :          9C2 C |  SETUPCHIP.INS_DAC :            67B C |
 SETUPCHIP.INS_FM :             6C4 C |  SETUPCHIP.INS_FM3 :            6B5 C |
 SETUPCHIP.INS_PSG :            64C C |  SETUPCHIP.INS_PSGN :           646 C |
 SETUPCHIP.INS_PWM :            60B C |  SETUPCHIP.LOWP :               882 C |
 SETUPCHIP.LOWPF :              8B1 C |  SETUPCHIP.MK_CHIP :            569 C |
 SETUPCHIP.NEW :                DE5 C |  SETUPCHIP.NEXT :               DF4 C |
 SETUPCHIP.NODEFV :             B80 C |  SETUPCHIP.NOTEPSG_C :          B46 C |
 SETUPCHIP.NOTEPSG_FN :         B53 C |  SETUPCHIP.NOTE_DAC :           B8B C |
 SETUPCHIP.NOTE_FM :            BF2 C |  SETUPCHIP.NOTE_FM3 :           BCE C |
 SETUPCHIP.NOTE_PSG :           B21 C |  SETUPCHIP.NOTE_PSGN :          AF4 C |
 SETUPCHIP.NOTE_PWM :           A63 C |  SETUPCHIP.NOT_PRDAC :          6D8 C |
 SETUPCHIP.NO_CHNL :            5DE C |  SETUPCHIP.NP2_N :              B1E C |
 SETUPCHIP.NXT_CHNL :           58B C |  SETUPCHIP.PCUT :               AD1 C |
 SETUPCHIP.POFF :               ACD C |  SETUPCHIP.PSGN_OUT :           D10 C |
 SETUPCHIP.PSG_OUT :            D1E C |  SETUPCHIP.PVMUCH :             786 C |
 SETUPCHIP.PWMN_KPV :           AAE C |  SETUPCHIP.PWM_KEYCUT :         AC9 C |
 SETUPCHIP.PWM_KEYOFF :         AC5 C |  SETUPCHIP.PWM_OUT :            CD1 C |
 SETUPCHIP.P_OUT :              D3C C |  SETUPCHIP.RAN_OUT :            5D4 C |
 SETUPCHIP.RD_FMINS :           6EF C |  SETUPCHIP.RD_NT3 :             C2D C |
 SETUPCHIP.REQ_EFF :            7DC C |  SETUPCHIP.REQ_INS :            5E4 C |
 SETUPCHIP.REQ_NOTE :           A38 C |  SETUPCHIP.REQ_VOL :            741 C |
 SETUPCHIP.TBLLIST :            DC7 C |  SETUPCHIP.VMUCH :              7B0 C |
 SETUPCHIP.VOL_FM :             7B7 C |  SETUPCHIP.VOL_PSG :            794 C |
 SETUPCHIP.VOL_PWM :            761 C |  SET_LEFT :        FFFFFFFFC0000198 C |
 SET_LEFT.LFT_OK : FFFFFFFFC00001BA C |
 SET_LEFT.LFT_SKIP :                                       FFFFFFFFC0000212 C |
 SET_RIGHT :       FFFFFFFFC0000218 C |
 SET_RIGHT.RGT_OK :                                        FFFFFFFFC000023A C |
 SET_RIGHT.RGT_SKIP :                                      FFFFFFFFC0000292 C |
 SET_STARTPAGE :                  0 - |  SH2_DEBUG :                      0 - |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              60011B0 C |
*SH2_M_ENTRY.WAIT_MD :      6001200 C |  SH2_M_ERRADDR :            600031C C |
 SH2_M_ERRCODE :            600032C C |  SH2_M_ERRDMA :             6000320 C |
 SH2_M_ERRILLG :            6000314 C |  SH2_M_ERRINVL :            6000318 C |
 SH2_M_ERRNMI :             6000324 C |  SH2_M_ERROR :              6000310 C |
 SH2_M_ERRUSER :            6000328 C |  SH2_M_HOTSTART :           6001200 C |
 SH2_M_HOTSTART.CLRRAM :    6001212 C |  SH2_RAM :                  6007CD0 C |
 SH2_SLAVE :                6000124 C |  SH2_S_ENTRY :              600172C C |
*SH2_S_ENTRY.WAIT_MD :      6001774 C |  SH2_S_ERRADDR :            6000348 C |
 SH2_S_ERRCODE :            6000358 C |  SH2_S_ERRDMA :             600034C C |
 SH2_S_ERRILLG :            6000340 C |  SH2_S_ERRINVL :            6000344 C |
 SH2_S_ERRNMI :             6000350 C |  SH2_S_ERROR :              600033C C |
 SH2_S_ERRUSER :            6000354 C |  SH2_S_HOTSTART :           6001774 C |
 SH2_S_HOTSTART.CLR_ENBL :  600178C C |  SHIFT :                          2 - |
 SHOWROM :                      EC1 C |  SIN_TABLE :                6002DB0 C |
 SIZEOF_CAMERA :                 18 C |  SIZEOF_DREQ :                  660 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MARSBG :                 40 C |
 SIZEOF_MARSGBL :                4C C | *SIZEOF_MARSRAM :          2601F240 C |
*SIZEOF_MARSRAM.HERE :     2601F240 C |  SIZEOF_MARSSND :          26008E40 C |
 SIZEOF_MARSSPR :                14 C |  SIZEOF_MARSSYS :          26008AC0 C |
 SIZEOF_MARSVID :          2601F240 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFAA82 C |
 SIZEOF_MDLOBJ :                 20 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFB0E2 C |
 SIZEOF_MDSND :    FFFFFFFFFFFF9820 C |  SIZEOF_MDSYS :    FFFFFFFFFFFFAA7E C |
 SIZEOF_MDVID :    FFFFFFFFFFFFA622 C |  SIZEOF_PLYPZ :                  30 C |
 SIZEOF_POLYGN :                 38 C | *SIZEOF_SCRN02 :           26018A80 C |
*SIZEOF_SCRN03 :           2600CA60 C | *SIZEOF_SCRN04 :           26014C20 C |
 SIZEOF_SNDCHN :                 28 C |  SLAVE_IRQ :                6000268 C |
 SLAVE_LOOP :               60017C0 C |  SLAVE_LOOP.GO_MDL :        6001822 C |
 SLAVE_LOOP.LIST :          60017D4 C | *SLAVE_LOOP.SLV_EXIT :      6001836 C |
 SLAVE_LOOP.SLV_TASK_1 :    6001814 C |  SLV :                           10 - |
 SMPINS_BELL_ICE :          202E090 C |  SMPINS_BRASS1_HI :         2031BBA C |
 SMPINS_BRASS1_LOW :        2039784 C |  SMPINS_FOREST_1 :          204134E C |
 SMPINS_KICK_JAM :          2045C3A C | *SMPINS_PIANO_1 :           2048514 C |
 SMPINS_SNARE_JAM :         2046704 C |  SMPINS_SNRTOM_1 :          204706E C |
*SMPINS_SSTR162A :          204CC2E C |  SNDLOCKZ80 :                8809DA C |
 SNDLOCKZ80.WAIT :           8809E2 C |  SNDREQCMD :                 880A6C C |
 SNDREQCMD.WAIT_IN :         880A6C C |  SNDREQCMD.WAIT_OUT :        880AA2 C |
 SNDREQ_ENTER :              8809F8 C |  SNDREQ_ENTER.WAIT :         880A1E C |
 SNDREQ_EXIT :               880A2E C |  SNDREQ_SADDR :              880A56 C |
 SNDREQ_SBYTE :              880A5E C |  SNDREQ_SCMD :               880A44 C |
*SNDREQ_SLONG :              880A52 C |  SNDREQ_SWORD :              880A5A C |
 SNDUNLOCKZ80 :              8809EE C |  SOUND_DMA_PAUSE :           880AB0 C |
 SOUND_DMA_PAUSE.RETRY :     880AB4 C |  SOUND_DMA_PAUSE.SAFE :      880ACE C |
 SOUND_DMA_RESUME :          880AEA C |  SOUND_GLBBEATS :            880B92 C |
 SOUND_INIT :                880980 C |  SOUND_INIT.CLEANUP :        8809A6 C |
 SOUND_INIT.COPY :           8809BC C |  SOUND_INIT.WAIT :           880990 C |
 SOUND_TRKPLAY :             880B0C C |  SOUND_TRKRESUME :           880B60 C |
 SOUND_TRKSTOP :             880B4A C |  SOUND_TRKTICKS :            880B76 C |
 STANDBY :                        3 - |  STR_CURSOR :                8845BE C |
 STR_GEMA :                  884692 C |  STR_GEMAFM :                884830 C |
 STR_GEMAPSG :               884810 C |  STR_GEMAPWM :               884860 C |
 STR_GEMASTATUS :            884714 C |  STR_MAIN :                  883D44 C |
 STR_PAGE1 :                 884640 C |  STR_PAGE1_INFO :            884664 C |
 STR_PAGE3 :                 88464C C |  STR_PAGE4 :                 884658 C |
 STR_STATSPAGE0 :            884898 C |  STR_STATUS :                884672 C |
 STR_TITLE :                 8845C4 C |  SUPERSPRITE_TEST :          88457A C |
 SUPERSPRITE_TEST.NOD_S :    8845A6 C |  SUPERSPRITE_TEST.NOL_S :    88459E C |
 SUPERSPRITE_TEST.NOR_S :    884596 C |  SUPERSPRITE_TEST.NOU_S :    8845AE C |
 SUPERSPR_TEST :            2123418 C | *SYSMARS_ID :                A130EC - |
 SYSMARS_REG :               A15100 - |  SYSTEM_DMA_ENTER :          8834F6 C |
 SYSTEM_DMA_EXIT :           8834FC C |  SYSTEM_INIT :               8833C0 C |
 SYSTEM_INIT.CLRINPUT :      8833FE C |  SYSTEM_INIT.WAIT :          8833CE C |
 SYSTEM_INPUT :              883578 C |  SYSTEM_INPUT.EXIT :         8835AA C |
 SYSTEM_INPUT.ID_03 :        8835D0 C |  SYSTEM_INPUT.ID_0D :        88367A C |
 SYSTEM_INPUT.INVALID :      883674 C |  SYSTEM_INPUT.LIST :         8835B0 C |
 SYSTEM_INPUT.OLDPAD :       8836F2 C |  SYSTEM_INPUT.PICK_ID :      8836F8 C |
 SYSTEM_INPUT.READ :         88370E C |  SYSTEM_INPUT.STEP_1 :       88371A C |
 SYSTEM_INPUT.STEP_2 :       883726 C |  SYSTEM_INPUT.THIS_ONE :     883590 C |
 SYSTEM_INPUT.X_NEG :        883642 C |  SYSTEM_INPUT.Y_NEG :        88366E C |
 SYSTEM_MARSUPDATE :         883502 C |  SYSTEM_MARSUPDATE_OUT :     88350E C |
*SYSTEM_RANDOM :             883728 C | *SYSTEM_SENDDREQ :           883516 C |
*SYSTEM_SENDDREQ.BAD_TRNSFR :                                        883574 C |
 SYSTEM_SENDDREQ.L0 :        883568 C |  SYSTEM_SENDDREQ.L1 :        88351C C |
 SYSTEM_SENDDREQ.WAIT_BIT :  88354E C |  SYSTEM_SETINTS :            883884 C |
 SYSTEM_SETINTS.NOHINT :     8838A8 C |  SYSTEM_SETINTS.NOVINT :     883896 C |
*SYSTEM_SINEWAVE :           883766 C |  SYSTEM_SINEWAVE.DONT_NEG :  883782 C |
*SYSTEM_SINEWAVE_COS :       883746 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                                      883760 C |
*SYSTEM_SRAMINIT :           8838AA C |  SYSTEM_SRAMINIT.INITSAVE :  8838BE C |
 SYSTEM_WAITFRAME :          883442 C |  SYSTEM_WAITFRAME.WAIT_IN :  883454 C |
 SYSTEM_WAITFRAME.WAIT_LAG : 883448 C |  SYS_CTRL_1 :                A10009 - |
 SYS_CTRL_2 :                A1000B - |  SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                60004B0 C |  S_IRQ_CMD :                60004B4 C |
*S_IRQ_CMD.COPY_1 :         6000540 C |  S_IRQ_CMD.END_CHNLS :      600066C C |
 S_IRQ_CMD.EXIT_C :         6000550 C |  S_IRQ_CMD.MODE_1 :         6000530 C |
 S_IRQ_CMD.MODE_2 :         600050C C |  S_IRQ_CMD.MODE_3 :         6000520 C |
 S_IRQ_CMD.NEXT_CHNL :      6000556 C |  S_IRQ_CMD.NO_KEYOFF :      6000590 C |
 S_IRQ_CMD.NO_PITCHBND :    60005B4 C |  S_IRQ_CMD.NO_REQ :         6000662 C |
 S_IRQ_CMD.NO_REQ2 :        600057E C |  S_IRQ_CMD.NO_TRNSFREX :    600066C C |
 S_IRQ_CMD.NO_VOLUMEBND :   60005CC C |  S_IRQ_CMD.NO_ZTRNSFR :     600068C C |
 S_IRQ_CMD.PWM_KEYCUT :     6000582 C |  S_IRQ_CMD.PWM_KEYOFF :     6000576 C |
 S_IRQ_CMD.TAG_F0 :         60004D8 C |  S_IRQ_CMD.TAG_FRT :        60004D4 C |
 S_IRQ_CMD.VALID_CMD :      60004DC C |  S_IRQ_CMD.WAIT_1 :         6000536 C |
 S_IRQ_H :                  60006D8 C |  S_IRQ_PWM :       FFFFFFFFC0000000 C |
 S_IRQ_PWM.FROM_RV :                                       FFFFFFFFC00000B0 C |
 S_IRQ_PWM.LMUCH : FFFFFFFFC0000114 C |  S_IRQ_PWM.LOOP :  FFFFFFFFC000002E C |
 S_IRQ_PWM.LOOP_ME :                                       FFFFFFFFC000005E C |
 S_IRQ_PWM.MONO :  FFFFFFFFC00000BA C |
 S_IRQ_PWM.MONO_A :                                        FFFFFFFFC00000A8 C |
 S_IRQ_PWM.MONO_C :                                        FFFFFFFFC0000088 C |
 S_IRQ_PWM.MONO_L :                                        FFFFFFFFC000006A C |
 S_IRQ_PWM.NOT_ROM :                                       FFFFFFFFC000009A C |
 S_IRQ_PWM.NO_L :  FFFFFFFFC00000D0 C |  S_IRQ_PWM.NO_R :  FFFFFFFFC00000D6 C |
 S_IRQ_PWM.ON :    FFFFFFFFC000003C C |  S_IRQ_PWM.READ :  FFFFFFFFC000006C C |
 S_IRQ_PWM.RMUCH : FFFFFFFFC000011A C |
 S_IRQ_PWM.SILENT :                                        FFFFFFFFC0000034 C |
 S_IRQ_PWM.SKIP :  FFFFFFFFC00000FA C |  S_IRQ_V :                  60006F8 C |
 S_IRQ_VRES :               6000718 C |  S_IRQ_VRES.RV_BUSY :       6000754 C |
 S_IRQ_WDG :                600077A C |  TAG_JR :          FFFFFFFFC0000568 C |
 TAG_WIDTH :       FFFFFFFFC000056C C |  TAG_YHGHT :       FFFFFFFFC0000570 C |
 TBLFM :                       17DF C |  TBLFM3 :                      17FF C |
 TBLFM6 :                      1807 C |  TBLPSG :                      17BD C |
 TBLPSGN :                     17D7 C |  TBLPWM :                      1811 C |
 TESTMARS_BG :              204F398 C |  TESTMARS_BG2 :             2061F98 C |
 TESTMARS_DIRECT_1 :        2073798 C |  TESTMARS_DIRECT_2 :        2092B98 C |
 TESTMARS_DIRECT_3 :        20B1F98 C |  TEXTR_TEST_YUI :           20D1398 C |
 TH :                      20000000 - |  TICKCNT :                     1E4A C |
 TICKFLAG :                    1E48 C | *TIME :                    20:32:21 - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    49D C |  TRACK_OUT.CLRFE :              4AC C |
 TRACK_OUT.NOCHIP :             4BE C |  TRANSFERROM :                  F0F C |
 TRANSFERROM.DOUBLE :           F2E C |  TRANSFERROM.TRANSFER :         F53 C |
 TRANSFERROM.X68KLAST :         F72 C |  TRANSFERROM.X68KLOOP :         F61 C |
 TRANSFERROM.X68KLPCONT :       F6A C |  TRANSFERROM.X68KLPWT :         F84 C |
 TRANSFERROM.X68KLSTCONT :      F7C C |  TRANSFERROM.X68KLSTWT :        F97 C |
 TRANSFERROM.X68KLSTWTLP :      F9B C |  TRANSFERROM.X68KNOCARRY :      F4D C |
 TRANSFERROM.X68KPWTLP :        F88 C |  TRKBUFF_0 :                   1950 C |
 TRKBUFF_1 :                   19F8 C |  TRKDATA_0 :                   1C00 C |
 TRKDATA_1 :                   1D00 C |  TRKHDOUT :                    1E60 C |
 TRKPOINTERS :                  1B5 C |  TRK_CACHNOTES :                 18 - |
 TRK_CMDREQ :                    1A - |  TRK_CURRBLK :                   11 - |
 TRK_HALFWAY :                   10 - |  TRK_READ :                       C - |
 TRK_ROMBLK :                     0 - |  TRK_ROMINS :                     6 - |
 TRK_ROMPATT :                    3 - |  TRK_ROMPATTRD :                  9 - |
 TRK_ROWPAUSE :                  17 - |  TRK_ROWS :                       E - |
 TRK_SETBLK :                    12 - |  TRK_SIZEINS :                   16 - |
 TRK_STATUS :                    13 - |  TRK_TICKSET :                   15 - |
 TRK_TICKTMR :                   14 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPDTRACK :                     1DA C |
 UPDTRACK.CLRF :                43F C |  UPDTRACK.DECROW :              258 C |
 UPDTRACK.DECROW_E :            25B C |  UPDTRACK.EFFECT_FILL :         41F C |
 UPDTRACK.EFF_A :               34A C |  UPDTRACK.EFF_B :               354 C |
 UPDTRACK.EFF_C :               36E C |  UPDTRACK.EXIT :                24D C |
 UPDTRACK.FIRST_FILL :          427 C |  UPDTRACK.GO_EFFECT :           45D C |
 UPDTRACK.GRAB_ASAP :           31D C |  UPDTRACK.HAS_NOTE :            264 C |
 UPDTRACK.INC_CPATT :           300 C |  UPDTRACK.NEXT_NOTE :           23B C |
 UPDTRACK.NEXT_TRACK :          379 C |  UPDTRACK.NOCHIP :              44F C |
 UPDTRACK.NO_EFF :              2C1 C |  UPDTRACK.NO_INS :              2A3 C |
 UPDTRACK.NO_NOTE :             298 C |  UPDTRACK.NO_VOL :              2AF C |
 UPDTRACK.OLD_TYPE :            28C C |  UPDTRACK.READ_TRACK :          1F2 C |
*UPDTRACK.RNOUT_CHNLS :         2FC C |  UPDTRACK.SET_TRACK :           380 C |
 UPDTRACK.SFXMD :               20C C |  UPDTRACK.SZGOOD :              3F6 C |
 UPDTRACK.SZMUCH :              3F1 C |  UPDTRACK.TRACK_END :           48A C |
 UPDTRACK.TRKEND_EFFC :         48B C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - | *VIDEO_CLEAR :               882ABC C |
 VIDEO_CLEARSCREEN :         882ACC C |  VIDEO_CLEARSCREEN.PMNEXT :  882B5C C |
 VIDEO_CLEARSCREEN.PNEXT :   882B4A C |  VIDEO_CLEARSCREEN.SNEXT :   882B36 C |
 VIDEO_CLEARSCREEN.XNEXT :   882B16 C |  VIDEO_CLEARSCREEN.YNEXT :   882B26 C |
*VIDEO_COPY :                88302A C |  VIDEO_COPY.DMAW :           88303E C |
 VIDEO_COPY.DMAWE :          883096 C |  VIDEO_DMABLAST :            8830AE C |
 VIDEO_DMAMKENTRY :          882F46 C |  VIDEO_DOPALFADE :           882DFC C |
 VIDEO_DOPALFADE.ACTIVE :    882E18 C |  VIDEO_DOPALFADE.FADE_DONE : 882E20 C |
 VIDEO_DOPALFADE.FADE_IN :   882E22 C |  VIDEO_DOPALFADE.FADE_LIST : 882E1A C |
 VIDEO_DOPALFADE.FADE_OUT :  882EC6 C |  VIDEO_DOPALFADE.NO_BLU :    882E9E C |
 VIDEO_DOPALFADE.NO_BLU_O :  882F22 C |  VIDEO_DOPALFADE.NO_FNSH :   882EB6 C |
 VIDEO_DOPALFADE.NO_FNSH_O : 882F36 C |  VIDEO_DOPALFADE.NO_GRN :    882E7E C |
 VIDEO_DOPALFADE.NO_GRN_O :  882F0A C |  VIDEO_DOPALFADE.NO_MOVE :   882EC4 C |
 VIDEO_DOPALFADE.NO_MOVE_O : 882F44 C |  VIDEO_DOPALFADE.NO_RED :    882E5E C |
 VIDEO_DOPALFADE.NO_RED_O :  882EF2 C |  VIDEO_DOPALFADE.NXT_PAL :   882E3C C |
 VIDEO_DOPALFADE.NXT_PAL_O : 882EDA C |  VIDEO_FADEPAL :             882DCE C |
 VIDEO_FADEPAL_MARS :        88323C C |  VIDEO_FILL :                882FB8 C |
 VIDEO_FILL.DMAW :           882FCC C |  VIDEO_FILL.DMAWE :          883012 C |
 VIDEO_INIT :                882A16 C |  VIDEO_INIT.CLRRAM :         882A20 C |
 VIDEO_INIT.COPYSAFE :       882A60 C | *VIDEO_INIT.EXIT :           882A4A C |
 VIDEO_INIT.LOOP :           882A3C C |  VIDEO_LOADART :             8830B4 C |
*VIDEO_LOADMAP :             882B64 C |  VIDEO_LOADMAP.CONT :        882B8A C |
 VIDEO_LOADMAP.NODBLE :      882BAA C |  VIDEO_LOADMAP.NONULL :      882B88 C |
 VIDEO_LOADMAP.XLOOP :       882B7A C |  VIDEO_LOADMAP.YLOOP :       882B70 C |
 VIDEO_LOADPAL :             882DD8 C | *VIDEO_LOADPAL_MARS :        883246 C |
 VIDEO_MARSPALFADE :         88326E C |  VIDEO_MARSPALFADE.ACTIVE :  88328A C |
 VIDEO_MARSPALFADE.FADE_DONE :                                       883292 C |
 VIDEO_MARSPALFADE.FADE_IN : 883294 C |
 VIDEO_MARSPALFADE.FADE_LIST :                                       88328C C |
 VIDEO_MARSPALFADE.FADE_OUT :                                        88333E C |
 VIDEO_MARSPALFADE.NO_BLU :  88330E C |
 VIDEO_MARSPALFADE.NO_BLU_O :                                        88339A C |
 VIDEO_MARSPALFADE.NO_FNSH : 88332E C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                                       8833B0 C |
 VIDEO_MARSPALFADE.NO_GRN :  8832EE C |
 VIDEO_MARSPALFADE.NO_GRN_O :                                        883382 C |
 VIDEO_MARSPALFADE.NO_MOVE : 88333C C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                                       8833BE C |
 VIDEO_MARSPALFADE.NO_RED :  8832CE C |
 VIDEO_MARSPALFADE.NO_RED_O :                                        88336A C |
 VIDEO_MARSPALFADE.NXT_PAL : 8832AC C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                                       883352 C |
 VIDEO_MARS_GFXMODE :        8831E2 C | *VIDEO_MARS_REDRAW :         883200 C |
 VIDEO_MARS_WAITFRAME :      88321E C |  VIDEO_MARS_WAITFRAME.WAIT : 88322E C |
 VIDEO_MARS_WAITINIT :       883210 C |  VIDEO_PRINT :               882BE8 C |
 VIDEO_PRINT.DONIBL :        882D02 C |  VIDEO_PRINT.EXIT :          882C72 C |
 VIDEO_PRINT.ISBYTE :        882C3C C |  VIDEO_PRINT.ISLONG :        882C60 C |
 VIDEO_PRINT.ISWORD :        882C4E C |  VIDEO_PRINT.LNGLOOP :       882CF2 C |
 VIDEO_PRINT.LOOP :          882BFC C |  VIDEO_PRINT.LOWR :          882D12 C |
 VIDEO_PRINT.NEWJUMP :       882BF6 C |  VIDEO_PRINT.NEXT :          882C1E C |
 VIDEO_PRINT.NEXTV :         882C7C C |  VIDEO_PRINT.NOTHING :       882D1E C |
 VIDEO_PRINT.PUTTEXT :       882C10 C |  VIDEO_PRINT.SPECIAL :       882C22 C |
 VIDEO_PRINT.VBYTE :         882CAE C |  VIDEO_PRINT.VLONG :         882CFA C |
 VIDEO_PRINT.VWORD :         882CD0 C |  VIDEO_PRINTINIT :           882BBC C |
 VIDEO_PRINTPAL :            882BD6 C |  VIDEO_RUNFADE :             882DBC C |
 VIDEO_UPDATE :              882A68 C | *VIDEO_UPDATE.EXIT :         882A86 C |
 VIDEO_UPDATE.LOOP :         882A7A C |  VIDMARS_PAL :               88324A C |
 VIDMARS_PAL.LOOP :          883262 C |  VIDMD_PAL :                 882DDC C |
 VIDMD_PAL.LOOP :            882DF4 C |  VID_PICKLAYER :             882D20 C |
 VID_PICKLAYER.GOLYR :       882D70 C |  VID_PICKLAYER.NOWD :        882D5A C |
 VID_PICKLAYER.PLAWND :      882D48 C |  VID_PICKLAYER.THISSZ :      882D90 C |
 VID_PICKLAYER.THISSZJ :     882DB8 C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :              883904 C |
*VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1E56 C |  WAVE_LEN :                    1E4E C |
 WAVE_LOOP :                   1E51 C |  WAVE_PITCH :                  1E54 C |
 WAVE_START :                  1E4B C |  WAVFREQ_LIST :                153D C |
 WDG_FINISH :      FFFFFFFFC000018A C |  WDG_PZFULL :      FFFFFFFFC000014A C |
*WHDFLG :                      16B4 C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  880BB0 C |  Z80_CODE_END :              882A16 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZSET_TESTME :                    0 - |  ZSET_WTUNE :      FFFFFFFFFFFFFFE8 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - |  _DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - |  _JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
 _OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   2121 symbols
    265 unused symbols

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 3 - 5/13/2022 20:32:21


  defined macros:
  ---------------

FINISH                                | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GPWM                                  | GSMPL                                
ORG                                   | STRUCT                               

     12 macros

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 4 - 5/13/2022 20:32:21


  defined functions:
  ------------------

NOTZ80                                | LOCATE                               
MAPSIZE                               |

 AS V1.42 Beta [Bld 118] - source file mars.asm - page 5 - 5/13/2022 20:32:21


  codepages:
  ----------

STANDARD (0 changed characters)


0.28 seconds assembly time

  17656 lines source file
  18453 lines incl. macro expansions
      7 passes
      0 errors
      0 warnings
