 AS V1.42 Beta [Bld 118] - source file main.asm - page 1 - 8/21/2023 11:31:06


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; | MARSIANO ENGINE                                                 |
       4/       0 :                     ; |                                                                 |
       5/       0 :                     ; | A game engine that can be cross-ported to:                      |
       6/       0 :                     ; | Sega Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico       |
       7/       0 :                     ; +-----------------------------------------------------------------+
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; USER SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     ; --------------------------------------------------------
      15/       0 :                     ; 68000 RAM SIZES
      16/       0 :                     ;
      17/       0 :                     ; MAX_SysCode, MAX_UserCode and MAX_RamSndData
      18/       0 :                     ; are used only in Sega CD, Sega 32X and
      19/       0 :                     ; Sega CD32X
      20/       0 :                     ; For the stock Genesis (OR Pico) these sections
      21/       0 :                     ; are free to use ONLY if you want your game
      22/       0 :                     ; to be playable ONLY on stock Genesis or Pico.
      23/       0 :                     ;
      24/       0 :                     ; Starting from MAX_MdGlobal it the RAM should be
      25/       0 :                     ; located after $FF8000
      26/       0 :                     ;
      27/       0 :                     ; ** MAKE SURE IT DOESN'T REACH $FFFC00 IF YOU WANT TO
      28/       0 :                     ; RUN THIS ON SEGA CD AND CD32X **
      29/       0 :                     ; $FFFD00 is reserved for SegaCD/SegaCD32X, the
      30/       0 :                     ; STACK a7 point starts from here also.
      31/       0 :                     ; --------------------------------------------------------
      32/       0 :                     
      33/       0 : =$1800              MAX_SysCode	equ $1800	; ** CD/32X/CD32X ONLY
      34/       0 : =$2000              MAX_UserCode	equ $2000	; ** CD/32X/CD32X ONLY
      35/       0 : =$4000              MAX_RamSndData	equ $4000	; ** CD/32X/CD32X ONLY
      36/       0 : =$800               MAX_MdGlobal	equ $0800	; USER Global variables
      37/       0 : =$2800              MAX_ScrnBuff	equ $2800	; RAM section for Current screen
      38/       0 : =$2000              MAX_MdVideo	equ $2000	;
      39/       0 : =$500               MAX_MdSystem	equ $0500	;
      40/       0 : =$1000              MAX_MdOther	equ $1000	; System-specific stuff goes here
      41/       0 :                     
      42/       0 :                     ; ====================================================================
      43/       0 :                     
      44/       0 :                     		!org 0				; Start at 0
      45/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later.
      46/       0 :                     		padding		off		; Dont pad dc.b
      47/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
      48/       0 :                     		supmode 	on 		; Supervisor mode 68k
      49/       0 :                     		dottedstructs	off		; If needed
      50/       0 :                     		page 		0
      51/       0 :                     
      52/       0 :                     ; ====================================================================
      53/       0 :                     ; ----------------------------------------------------------------
      54/       0 :                     ; Includes
      55/       0 :                     ; ----------------------------------------------------------------
      56/       0 :                     
      57/       0 :                     		include	"macros.asm"			; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ---------------------------------------------
(1)    8/       0 :                     ; Functions
(1)    9/       0 :                     ; ---------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   12/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   13/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   14/       0 :                     
(1)   15/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   16/       0 :                     
(1)   17/       0 :                     ; ====================================================================
(1)   18/       0 :                     ; ---------------------------------------------
(1)   19/       0 :                     ; Macros
(1)   20/       0 :                     ; ---------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                 paddingSoFar set 0
(1)   23/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   24/       0 :                     
(1)   25/       0 :                     ; -------------------------------------
(1)   26/       0 :                     ; Reserve memory section
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; NOTE: This doesn't work for Z80
(1)   29/       0 :                     ; -------------------------------------
(1)   30/       0 :                     
(1)   31/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   32/       0 :                     GLBL_LASTPC	set *
(1)   33/       0 :                     		dephase
(1)   34/       0 :                     GLBL_LASTORG	set *
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     		endm
(1)   37/       0 :                     		
(1)   38/       0 :                     ; -------------------------------------
(1)   39/       0 :                     ; Finish struct
(1)   40/       0 :                     ; -------------------------------------
(1)   41/       0 :                     
(1)   42/       0 :                     endstruct	macro				; Then finish the custom struct.
(1)   43/       0 :                     		!org GLBL_LASTORG
(1)   44/       0 :                     		phase GLBL_LASTPC
(1)   45/       0 :                     		endm
(1)   46/       0 :                     
(1)   47/       0 :                     ; -------------------------------------
(1)   48/       0 :                     ; Report RAM usage
(1)   49/       0 :                     ; -------------------------------------
(1)   50/       0 :                     
(1)   51/       0 :                     report		macro text,dis,dat
(1)   52/       0 :                     	if MOMPASS == 2
(1)   53/       0 :                     		if dat == -1
(1)   54/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   55/       0 :                     		else
(1)   56/       0 :                     			if dis > dat
(1)   57/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   58/       0 :                     			else
(1)   59/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   60/       0 :                     			endif
(1)   61/       0 :                     		endif
(1)   62/       0 :                     	endif
(1)   63/       0 :                     		endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; -------------------------------------
(1)   66/       0 :                     ; Same thing but only report
(1)   67/       0 :                     ; error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; VDP color debug
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     vdp_showme	macro this
(1)   89/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   90/       0 :                     		move.w	#this,(vdp_data).l
(1)   91/       0 :                     		endm
(1)   92/       0 :                     
(1)   93/       0 :                     ; -------------------------------------
(1)   94/       0 :                     ; Custom ORG-filler
(1)   95/       0 :                     ;
(1)   96/       0 :                     ; (from s2disasm)
(1)   97/       0 :                     ; -------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     org macro address
(1)  100/       0 :                     	if notZ80(MOMCPU)
(1)  101/       0 :                     		if address < *
(1)  102/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)  103/       0 :                     		elseif address > *
(1)  104/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)  105/       0 :                     			!org address
(1)  106/       0 :                     		endif
(1)  107/       0 :                     	else
(1)  108/       0 :                     		if address < $
(1)  109/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)  110/       0 :                     		else
(1)  111/       0 :                     			while address > $
(1)  112/       0 :                     				db 0
(1)  113/       0 :                     			endm
(1)  114/       0 :                     		endif
(1)  115/       0 :                     	endif
(1)  116/       0 :                         endm
(1)  117/       0 :                     
(1)  118/       0 :                     ; -------------------------------------
(1)  119/       0 :                     ; ZERO Fill padding
(1)  120/       0 :                     ; -------------------------------------
(1)  121/       0 :                     
(1)  122/       0 :                     rompad		macro address			; Zero fill
(1)  123/       0 :                     diff := address - *
(1)  124/       0 :                     		if diff < 0
(1)  125/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)  126/       0 :                     		else
(1)  127/       0 :                     			while diff > 1024
(1)  128/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)  129/       0 :                     				dc.b [1024]0
(1)  130/       0 :                     diff := diff - 1024
(1)  131/       0 :                     			endm
(1)  132/       0 :                     			dc.b [diff]0
(1)  133/       0 :                     		endif
(1)  134/       0 :                     	endm
(1)  135/       0 :                     
(1)  136/       0 :                     ; ====================================================================
(1)  137/       0 :                     ; ---------------------------------------------
(1)  138/       0 :                     ; ISO filesystem macros
(1)  139/       0 :                     ; ---------------------------------------------
(1)  140/       0 :                     
(1)  141/       0 :                     ; Set a ISO file
(1)  142/       0 :                     ; NOTE: a valid ISO head is required ($8000 to $B7FF)
(1)  143/       0 :                     
(1)  144/       0 :                     iso_setfs	macro type,start,end
(1)  145/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  146/       0 :                     		dc.b 0						; zero
(1)  147/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  148/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  149/       0 :                     		dc.l start>>11					; Start sector, big
(1)  150/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  151/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  152/       0 :                     		dc.l end-start					; Filesize, big
(1)  153/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  154/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  155/       0 :                     		dc.b 2						; File flags
(1)  156/       0 :                     		dc.b 0,0
(1)  157/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  158/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  159/       0 :                     		dc.b 1,type
(1)  160/       0 :                     .fend:
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     iso_file	macro filename,start,end
(1)  164/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  165/       0 :                     		dc.b 0						; zero
(1)  166/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  167/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  168/       0 :                     		dc.l start>>11					; Start sector, big
(1)  169/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  170/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  171/       0 :                     		dc.l end-start					; Filesize, big
(1)  172/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  173/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  174/       0 :                     		dc.b 0						; File flags
(1)  175/       0 :                     		dc.b 0,0
(1)  176/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  177/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  178/       0 :                     		dc.b .flend-.flen
(1)  179/       0 :                     .flen:		dc.b filename,";1"
(1)  180/       0 :                     .flend:		dc.b 0
(1)  181/       0 :                     .fend:
(1)  182/       0 :                     		endm
(1)  183/       0 :                     
(1)  184/       0 :                     
      58/       0 :                     		include	"system/shared.asm"		; Shared Genesis/32X/CD32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared internal structs
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     ; Structs
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ----------------------------------------------------------------
(1)   17/       0 :                     ; 32X MAIN DREQ-RAM control
(1)   18/       0 :                     ;
(1)   19/       0 :                     ; To read these labels:
(1)   20/       0 :                     ;
(1)   21/       0 :                     ; On the Genesis Side:
(1)   22/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   23/       0 :                     ; On the 32X Side:
(1)   24/       0 :                     ; 	mov	@(marsGbl_DmaRead,gbr),r0
(1)   25/       0 :                     ; 	add	#DREQ_LABEL,r0			; MAX $7F with add
(1)   26/       0 :                     ; 	;Then r0 to any other rX
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; Call System_MarsUpdate DURING DISPLAY to
(1)   29/       0 :                     ; transfer the changes.
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; *** List MUST be aligned in 8bytes, end with 0 or 8 ***
(1)   33/       0 :                     
(1)   46/       0 :                     
      59/       0 :                     		include	"system/mcd/shared.asm"		; Shared Sega CD variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Sega CD shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; Register area
(1)    9/       0 :                     ;
(1)   10/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   11/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; -------------
(1)   15/       0 :                     ; bits
(1)   16/       0 :                     ; -------------
(1)   17/       0 :                     
(1)   18/       0 : =$2                 bitWRamMode	equ 2		;2M | 1M
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; Registers
(1)   22/       0 :                     ; -------------
(1)   23/       0 :                     
(1)   24/       0 : =$3                 mcd_memory	equ $03
(1)   25/       0 : =$6                 mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   26/       0 : =$E                 mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   27/       0 : =$F                 mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   28/       0 : =$10                mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   29/       0 : =$20                mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   30/       0 :                     
(1)   31/       0 :                     ; MemoryMode	equ	$02		;WORD
(1)   32/       0 :                     ; CommMain	equ	$0E		;BYTE
(1)   33/       0 :                     ; CommSub		equ	$0F		;BYTE
(1)   34/       0 :                     ; CommDataM	equ	$10		;Array (size: $E)
(1)   35/       0 :                     ; CommDataS	equ	$20		;Array (size: $E)
(1)   36/       0 :                     
(1)   37/       0 :                     ; ; =================================================================
(1)   38/       0 :                     ; ; ----------------------------------------
(1)   39/       0 :                     ; ; SUB CPU ONLY
(1)   40/       0 :                     ; ; ----------------------------------------
(1)   41/       0 :                     ;
(1)   42/       0 :                     ; ; -------------
(1)   43/       0 :                     ; ; PCM
(1)   44/       0 :                     ; ; -------------
(1)   45/       0 :                     ;
(1)   46/       0 :                     ; PCM		equ	$FF0000
(1)   47/       0 :                     ; ENV		equ	$01		; Envelope
(1)   48/       0 :                     ; PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
(1)   49/       0 :                     ; FDL		equ	$05		; Sample rate $00xx
(1)   50/       0 :                     ; FDH		equ	$07		; Sample rate $xx00
(1)   51/       0 :                     ; LSL		equ	$09		; Loop address $xx00
(1)   52/       0 :                     ; LSH		equ	$0B		; Loop address $00xx
(1)   53/       0 :                     ; ST		equ	$0D		; Start address (only $x0, $x000)
(1)   54/       0 :                     ; Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
(1)   55/       0 :                     ; OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
(1)   56/       0 :                     
(1)   57/       0 :                     ; =================================================================
(1)   58/       0 :                     
      60/       0 :                     		include	"system/md/map.asm"		; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000            sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000            sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      61/       0 :                     		include	"system/mars/map.asm"		; 32X hardware map (SH2 area)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                 shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      62/       0 :                     		include	"system/md/ram.asm"		; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; Area $FFFD00 to $FFFDFF(aprox) is reserved
(1)    8/       0 :                     ; for the MAIN-CPU's vectors and misc things
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; Sega 32X
(1)   12/       0 : =$FFFFFFFFFF..      RAM_MdDreq		equ	RAM_MdOther
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Settings
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 : (MACRO)             			struct $FFFF0000
(1)   18/       0 : =$0                 GLBL_LASTPC     set *
(1)   18/       0 :                                     dephase
(1)   18/       0 : =$0                 GLBL_LASTORG    set *
(1)   18/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   19/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   20/FFFFFFFFFFFF1800 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X Current screen mode
(1)   21/FFFFFFFFFFFF3800 :                     RAM_ExSoundData		ds.b MAX_RamSndData	; SEGACD/CD32X ONLY: GEMA Tracks and Instruments, Samples are stored on WRAM.
(1)   22/FFFFFFFFFFFF7800 :                     
(1)   23/FFFFFFFFFFFF7800 :                     ; *** THESE MUST BE AFTER $FF8000
(1)   24/FFFFFFFFFFFF7800 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000 DMA visuals
(1)   25/FFFFFFFFFFFF9800 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   26/FFFFFFFFFFFF9D00 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   27/FFFFFFFFFFFFAD00 :                     RAM_MdGlobal		ds.b MAX_MdGlobal
(1)   28/FFFFFFFFFFFFB500 :                     RAM_ScreenBuff		ds.b MAX_ScrnBuff
(1)   29/FFFFFFFFFFFFDD00 :                     sizeof_MdRam		ds.l 0
(1)   30/FFFFFFFFFFFFDD00 : (MACRO)             			endstruct
(1)   30/FFFFFFFFFFFF0000 :                                     !org GLBL_LASTORG
(1)   30/       0 :                                     phase GLBL_LASTPC
(1)   31/       0 : (MACRO)             			report "MD RAM",(sizeof_MdRam-$FFFF8000),$FC00-$8000
(1)   32/       0 :                     
(1)   33/       0 : =$FFFFFD00          RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   34/       0 : =$FFFFFD00          RAM_MegaCd		equ $FFFFFD00
(1)   35/       0 : =$FFFFFE00          RAM_ScreenJump		equ $FFFFFE00;$FFFFFE80		; Screen change section
(1)   36/       0 :                     
      63/       0 :                     		include "game/global.asm"		; Global user variables on the Genesis side.
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global RAM variables on the Genesis side
(1)    4/       0 :                     ; (Score, Level, etc.)
(1)    5/       0 :                     ; ----------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 : (MACRO)             		struct RAM_MdGlobal
(1)    7/       0 : =$0                 GLBL_LASTPC     set *
(1)    7/       0 :                                     dephase
(1)    7/       0 : =$0                 GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFAD00 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFAD00 :                     RAM_Glbl_Scrn	ds.w 1				; Current screen number
(1)    9/FFFFFFFFFFFFAD02 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFAD04 : (MACRO)             		endstruct
(1)   10/FFFFFFFFFFFFAD00 :                                     !org GLBL_LASTORG
(1)   10/       0 :                                     phase GLBL_LASTPC
(1)   11/       0 : (MACRO)             		erreport "68K GLOBALS",sizeof_mdglbl-RAM_MdGlobal,MAX_MdGlobal
(1)   12/       0 :                     
(1)   13/       0 :                     
      64/       0 :                     
      65/       0 :                     ; ====================================================================
      66/       0 :                     ; ----------------------------------------------------------------
      67/       0 :                     ; Init procedures
      68/       0 :                     ; ----------------------------------------------------------------
      69/       0 :                     
      70/       0 :                     ; ---------------------------------------------
      71/       0 :                     ; SEGA 32X
      72/       0 :                     ; ---------------------------------------------
      73/       0 :                     
     145/       0 :                     		include	"system/head_pico.asm"		; Pico header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; REMINDER: NO Z80 CPU, DO NOT USE THE Z80 AREA IF
(1)    6/       0 :                     ; SHARING CODING WITH GENESIS.
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     
(1)    9/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)   10/       4 : 0000 0204           		dc.l Pico_Entry		; Entry point MUST point to $3F0
(1)   11/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)   12/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   13/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   14/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   15/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   16/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   17/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   18/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   19/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   20/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   21/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   22/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   32/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   33/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   34/      64 : 0000 0200           		dc.l Pico_Error
(1)   35/      68 : 0000 0202           		dc.l Pico_UserInt	; PICO: User interrupt
(1)   36/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-full interrupt
(1)   37/      70 : FFFF 9A52           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   38/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   39/      78 : FFFF 9A4C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   40/      7C : 0000 0200           		dc.l Pico_Error
(1)   41/      80 : 0000 0200           		dc.l Pico_Error
(1)   42/      84 : 0000 0200           		dc.l Pico_Error
(1)   43/      88 : 0000 0200           		dc.l Pico_Error
(1)   44/      8C : 0000 0200           		dc.l Pico_Error
(1)   45/      90 : 0000 0200           		dc.l Pico_Error
(1)   46/      94 : 0000 0200           		dc.l Pico_Error
(1)   47/      98 : 0000 0200           		dc.l Pico_Error
(1)   48/      9C : 0000 0200           		dc.l Pico_Error
(1)   49/      A0 : 0000 0200           		dc.l Pico_Error
(1)   50/      A4 : 0000 0200           		dc.l Pico_Error
(1)   51/      A8 : 0000 0200           		dc.l Pico_Error
(1)   52/      AC : 0000 0200           		dc.l Pico_Error
(1)   53/      B0 : 0000 0200           		dc.l Pico_Error
(1)   54/      B4 : 0000 0200           		dc.l Pico_Error
(1)   55/      B8 : 0000 0200           		dc.l Pico_Error
(1)   56/      BC : 0000 0200           		dc.l Pico_Error
(1)   57/      C0 : 0000 0200           		dc.l Pico_Error
(1)   58/      C4 : 0000 0200           		dc.l Pico_Error
(1)   59/      C8 : 0000 0200           		dc.l Pico_Error
(1)   60/      CC : 0000 0200           		dc.l Pico_Error
(1)   61/      D0 : 0000 0200           		dc.l Pico_Error
(1)   62/      D4 : 0000 0200           		dc.l Pico_Error
(1)   63/      D8 : 0000 0200           		dc.l Pico_Error
(1)   64/      DC : 0000 0200           		dc.l Pico_Error
(1)   65/      E0 : 0000 0200           		dc.l Pico_Error
(1)   66/      E4 : 0000 0200           		dc.l Pico_Error
(1)   67/      E8 : 0000 0200           		dc.l Pico_Error
(1)   68/      EC : 0000 0200           		dc.l Pico_Error
(1)   69/      F0 : 0000 0200           		dc.l Pico_Error
(1)   70/      F4 : 0000 0200           		dc.l Pico_Error
(1)   71/      F8 : 0000 0200           		dc.l Pico_Error
(1)   72/      FC : 0000 0200           		dc.l Pico_Error
(1)   73/     100 : 5345 4741 2050 4943 		dc.b "SEGA PICO       "
                    4F20 2020 2020 2020 
(1)   74/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2023.???"
                    3230 3233 2E3F 3F3F 
(1)   75/     120 : 4D61 7273 6961 6E6F 		dc.b "Marsiano PICO                                   "
                    2050 4943 4F20 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     150 : 4D61 7273 6961 6E6F 		dc.b "Marsiano PICO                                   "
                    2050 4943 4F20 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   77/     180 : 474D 2054 4543 4844 		dc.b "GM TECHDEMO-01"
                    454D 4F2D 3031      
(1)   78/     18E : 0000                		dc.w 0
(1)   79/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   80/     1A0 : 0000 0000           		dc.l 0
(1)   81/     1A4 : 0004 B388           		dc.l ROM_END
(1)   82/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   83/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   84/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   85/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   86/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   87/     1BC :                     		align $1F0
(1)   88/     1F0 : 4A55 2020 2020 2020 		dc.b "JU              "
                    2020 2020 2020 2020 
(1)   89/     200 :                     
(1)   90/     200 :                     ; ====================================================================
(1)   91/     200 :                     ; ----------------------------------------------------------------
(1)   92/     200 :                     ; Error handlers
(1)   93/     200 :                     ;
(1)   94/     200 :                     ; all these do nothing currently
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 :                     Pico_ErrBus:				; Bus error
(1)   98/     200 :                     Pico_ErrAddr:				; Address error
(1)   99/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)  100/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)  101/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)  102/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  103/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  104/     200 :                     Pico_Trace:				; Trace
(1)  105/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  106/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  107/     200 :                     Pico_ErrorEx:				; Error exception
(1)  108/     200 :                     Pico_Error:
(1)  109/     200 : 4E73                		rte			; Return from Exception
(1)  110/     202 :                     
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     ; PICO exclusive interrupts
(1)  113/     202 :                     ; ----------------------------------------------------------------
(1)  114/     202 :                     
(1)  115/     202 :                     Pico_UserInt:
(1)  116/     202 :                     Pico_PcmInt:	; <-- Interrupt when the PCM chips gets full, Ojamajo# uses this.
(1)  117/     202 :                     Pico_UnkInt:
(1)  118/     202 : 4E73                		rte
(1)  119/     204 :                     
(1)  120/     204 :                     ; ====================================================================
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     ; Entry point
(1)  123/     204 :                     ; ----------------------------------------------------------------
(1)  124/     204 :                     
(1)  125/     204 :                     Pico_Entry:
(1)  126/     204 :                     	; --------------------------------
(1)  127/     204 :                     	; Activate PICO system
(1)  128/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  129/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  130/     20E : 203C 5345 4741      		move.l	#"SEGA",d0
(1)  131/     214 : 01C8 0000           		movep.l	d0,(a0)			; Unlock PICO system
(1)  132/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Random VDP test to unlock it
(1)  133/     21E :                     
(1)  134/     21E :                     	; --------------------------------
(1)  135/     21E :                     
(1)  136/     21E : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  137/     224 : 223C FFFF DD00      		move.l	#sizeof_mdram,d1
(1)  138/     22A : 7000                		moveq	#0,d0
(1)  139/     22C : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  140/     22E : B1C1                		cmp.l	d1,a0
(1)  141/     230 : 65FA                		bcs.s	.loop_ram
(1)  142/     232 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
(1)  143/     23A : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  144/     240 : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  145/     242 : 0807 0001           		btst	#1,d7
(1)  146/     246 : 66F8                		bne.s	.wait_dma
(1)  147/     248 :                     
     146/     248 : 4EB9 0000 0264      		jsr	(Sound_init).l			; Init Sound driver FIRST
     147/     24E : 4EB9 0000 0360      		jsr	(Video_init).l			; **** Video
     148/     254 : 4EB9 0000 0B30      		jsr	(System_Init).l			; **** Values
     149/     25A : 31FC 0000 AD00      		move.w	#0,(RAM_Glbl_Scrn).w		; Start at screen 0
     150/     260 : 6000 0E44           		bra.w	Md_ReadModes			; Go to SCREENJUMP section
     151/     264 :                     
     152/     264 :                     ; ---------------------------------------------
     153/     264 :                     ; MD
     154/     264 :                     ; ---------------------------------------------
     165/     264 :                     
     166/     264 :                     ; ====================================================================
     167/     264 :                     ; --------------------------------------------------------
     168/     264 :                     ; SYSTEM and SCREEN-JUMP codes
     169/     264 :                     ;
     170/     264 :                     ; MD and PICO: Normal ROM locations
     171/     264 :                     ; CD/32X/CD32X: Loaded in RAM
     172/     264 :                     ; --------------------------------------------------------
     173/     264 :                     
     174/     264 :                     ; ---------------------------------------------
     175/     264 :                     ; TOP-RAM Genesis system routines
     176/     264 :                     ; ---------------------------------------------
     177/     264 :                     
     178/     264 :                     Md_SysCode:
     182/     264 :                     
     183/     264 :                     ; ---------------------------------------------
     184/     264 :                     		include	"sound/gema.asm"
(1)    1/     264 :                     ; ====================================================================
(1)    2/     264 :                     ; --------------------------------------------------------
(1)    3/     264 :                     ; GEMA/Nikona sound driver v0.5
(1)    4/     264 :                     ; (C)2023 GenesisFan64
(1)    5/     264 :                     ;
(1)    6/     264 :                     ; Reads custom "miniature" ImpulseTracker files
(1)    7/     264 :                     ; and automaticly picks the soundchip(s) to play.
(1)    8/     264 :                     ;
(1)    9/     264 :                     ; Features:
(1)   10/     264 :                     ; - Support for 32X's PWM:
(1)   11/     264 :                     ;   | 7 extra pseudo-channels in either MONO
(1)   12/     264 :                     ;   | or STEREO.
(1)   13/     264 :                     ;   | ** REQUIRES specific code for the SH2 side
(1)   14/     264 :                     ;   | and enabling the use of CMD interrupt.
(1)   15/     264 :                     ;   | Uses Slave SH2.
(1)   16/     264 :                     ; - DMA-protection
(1)   17/     264 :                     ;   | This keeps DAC samplerate to a decent
(1)   18/     264 :                     ;   | quality.
(1)   19/     264 :                     ; - DAC Playback at 16000hz
(1)   20/     264 :                     ; - FM special mode with custom frequencies
(1)   21/     264 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   22/     264 :                     ;
(1)   23/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   24/     264 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   25/     264 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   26/     264 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   27/     264 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   28/     264 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   29/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   30/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   31/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   32/     264 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   33/     264 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   34/     264 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   35/     264 :                     ; --------------------------------------------------------
(1)   36/     264 :                     
(1)   37/     264 :                     ; ====================================================================
(1)   38/     264 :                     ; --------------------------------------------------------
(1)   39/     264 :                     ; Settings
(1)   40/     264 :                     ; --------------------------------------------------------
(1)   41/     264 :                     
(1)   42/     264 :                     ; --------------------------------------------------------
(1)   43/     264 :                     ; Variables
(1)   44/     264 :                     ; --------------------------------------------------------
(1)   45/     264 :                     
(1)   46/     264 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   47/     264 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   48/     264 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   49/     264 :                     
(1)   50/     264 :                     ; Z80-area points:
(1)   51/     264 : =$40                zDrvFifo	equ commZfifo		; FIFO command storage
(1)   52/     264 : =$80                zDrvFWrt	equ commZWrite		; FIFO command index
(1)   53/     264 : =$81                zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   54/     264 : =$82                zDrvMarsBlk	equ marsBlock		; Disable PWM flag
(1)   55/     264 :                     
(1)   56/     264 :                     ; ====================================================================
(1)   57/     264 :                     ; --------------------------------------------------------
(1)   58/     264 :                     ; Initialize Sound
(1)   59/     264 :                     ;
(1)   60/     264 :                     ; Uses:
(1)   61/     264 :                     ; a0-a1,d0-d1
(1)   62/     264 :                     ; --------------------------------------------------------
(1)   63/     264 :                     
(1)   64/     264 :                     ; 		align $80
(1)   65/     264 :                     Sound_Init:
(1)   66/     264 : 46FC 2700           		move.w	#$2700,sr
(1)   68/     268 :                     		; PICO driver init...
(1)   95/     268 : 4E75                		rts
(1)   96/     26A :                     
(1)   97/     26A :                     ; ====================================================================
(1)   98/     26A :                     ; ----------------------------------------------------------------
(1)   99/     26A :                     ; Subroutines
(1)  100/     26A :                     ; ----------------------------------------------------------------
(1)  101/     26A :                     
(1)  102/     26A :                     ; ------------------------------------------------
(1)  103/     26A :                     ; Lock Z80, get bus
(1)  104/     26A :                     ; ------------------------------------------------
(1)  105/     26A :                     
(1)  106/     26A :                     sndLockZ80:
(1)  107/     26A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  108/     272 :                     .wait:
(1)  109/     272 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  110/     27A : 66F6                		bne.s	.wait
(1)  111/     27C : 4E75                		rts
(1)  112/     27E :                     
(1)  113/     27E :                     ; ------------------------------------------------
(1)  114/     27E :                     ; Unlock Z80, return bus
(1)  115/     27E :                     ; ------------------------------------------------
(1)  116/     27E :                     
(1)  117/     27E :                     sndUnlockZ80:
(1)  118/     27E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  119/     286 : 4E75                		rts
(1)  120/     288 :                     
(1)  121/     288 :                     ; ------------------------------------------------
(1)  122/     288 :                     ; 68k-to-z80 Sound request
(1)  123/     288 :                     ; enter/exit routines
(1)  124/     288 :                     ;
(1)  125/     288 :                     ; d6 - commFifo index
(1)  126/     288 :                     ; ------------------------------------------------
(1)  127/     288 :                     
(1)  128/     288 :                     sndReq_Enter:
(1)  129/     288 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  130/     28C : DEFC 0010           		adda	#4*4,sp				; Go back to the RTS jump
(1)  131/     290 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  132/     298 : 7C00                		moveq	#0,d6
(1)  133/     29A : 40C6                		move.w	sr,d6
(1)  134/     29C : 4846                		swap	d6
(1)  135/     29E : 007C 0700           		or.w	#$0700,sr			; Disable interrupts
(1)  136/     2A2 : 4BF9 00A0 0080      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  137/     2A8 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  138/     2AE :                     .wait:
(1)  139/     2AE : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  140/     2B6 : 66F6                		bne.s	.wait
(1)  141/     2B8 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  142/     2BA : 4886                		ext.w	d6				; extend to 16 bits
(1)  143/     2BC : 4E75                		rts
(1)  144/     2BE :                     ; JUMP ONLY
(1)  145/     2BE :                     sndReq_Exit:
(1)  146/     2BE : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  147/     2C6 : 4846                		swap	d6
(1)  148/     2C8 : 46C6                		move.w	d6,sr
(1)  149/     2CA : 9EFC 0010           		suba	#4*4,sp				; Roll to the last regs
(1)  150/     2CE : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  151/     2D2 : 4E75                		rts
(1)  152/     2D4 :                     
(1)  153/     2D4 :                     ; ------------------------------------------------
(1)  154/     2D4 :                     ; Send request id and arguments
(1)  155/     2D4 :                     ;
(1)  156/     2D4 :                     ; Input:
(1)  157/     2D4 :                     ; d7 - byte to write
(1)  158/     2D4 :                     ; d6 - index pointer
(1)  159/     2D4 :                     ; a5 - commZWrite, update index
(1)  160/     2D4 :                     ; a6 - commZfifo command list
(1)  161/     2D4 :                     ;
(1)  162/     2D4 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  163/     2D4 :                     ; ------------------------------------------------
(1)  164/     2D4 :                     
(1)  165/     2D4 :                     sndReq_scmd:
(1)  166/     2D4 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  167/     2DA : 5206                		addq.b	#1,d6				; next fifo pos
(1)  168/     2DC : 0206 003F           		andi.b	#$3F,d6
(1)  169/     2E0 : 600C                		bra.s	sndReq_sbyte
(1)  170/     2E2 :                     sndReq_slong:
(1)  171/     2E2 : 610A                		bsr	sndReq_sbyte
(1)  172/     2E4 : E09F                		ror.l	#8,d7
(1)  173/     2E6 :                     sndReq_saddr:
(1)  174/     2E6 : 6106                		bsr	sndReq_sbyte
(1)  175/     2E8 : E09F                		ror.l	#8,d7
(1)  176/     2EA :                     sndReq_sword:
(1)  177/     2EA : 6102                		bsr	sndReq_sbyte
(1)  178/     2EC : E09F                		ror.l	#8,d7
(1)  179/     2EE :                     sndReq_sbyte:
(1)  180/     2EE : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  181/     2F2 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  182/     2F4 : 0206 003F           		andi.b	#$3F,d6
(1)  183/     2F8 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  184/     2FA : 4E75                		rts
(1)  185/     2FC :                     
(1)  186/     2FC :                     ; --------------------------------------------------------
(1)  187/     2FC :                     ; gemaDmaPause
(1)  188/     2FC :                     ;
(1)  189/     2FC :                     ; Call this BEFORE doing any DMA transfer
(1)  190/     2FC :                     ; --------------------------------------------------------
(1)  191/     2FC :                     
(1)  192/     2FC :                     gemaDmaPause:
(1)  194/     2FC : 4E75                		rts
(1)  208/     2FE :                     
(1)  209/     2FE :                     ; --------------------------------------------------------
(1)  210/     2FE :                     ; gemaDmaResume
(1)  211/     2FE :                     ;
(1)  212/     2FE :                     ; Call this AFTER finishing DMA transfer
(1)  213/     2FE :                     ; --------------------------------------------------------
(1)  214/     2FE :                     
(1)  215/     2FE :                     gemaDmaResume:
(1)  217/     2FE : 4E75                		rts
(1)  228/     300 :                     
(1)  229/     300 :                     ; --------------------------------------------------------
(1)  230/     300 :                     ; gemaDmaPause
(1)  231/     300 :                     ;
(1)  232/     300 :                     ; Call this BEFORE doing any DMA transfer
(1)  233/     300 :                     ; --------------------------------------------------------
(1)  234/     300 :                     
(1)  235/     300 :                     gemaDmaPauseRom:
(1)  237/     300 : 4E75                		rts
(1)  257/     302 :                     
(1)  258/     302 :                     ; --------------------------------------------------------
(1)  259/     302 :                     ; gemaDmaResume
(1)  260/     302 :                     ;
(1)  261/     302 :                     ; Call this AFTER finishing DMA transfer
(1)  262/     302 :                     ; --------------------------------------------------------
(1)  263/     302 :                     
(1)  264/     302 :                     gemaDmaResumeRom:
(1)  266/     302 : 4E75                		rts
(1)  284/     304 :                     
(1)  285/     304 :                     ; ------------------------------------------------
(1)  286/     304 :                     ; 32X ONLY
(1)  287/     304 :                     ;
(1)  288/     304 :                     ; d6 - command ($01 is reserved for Z80)
(1)  289/     304 :                     ; ------------------------------------------------
(1)  290/     304 :                     
(1)  291/     304 :                     sndReqCmd:
(1)  311/     304 : 4E75                		rts
(1)  312/     306 :                     
(1)  313/     306 :                     ; ============================================================
(1)  314/     306 :                     ; --------------------------------------------------------
(1)  315/     306 :                     ; gemaTest
(1)  316/     306 :                     ;
(1)  317/     306 :                     ; For TESTING only.
(1)  318/     306 :                     ; --------------------------------------------------------
(1)  319/     306 :                     
(1)  320/     306 :                     gemaTest:
(1)  321/     306 : 6180                		bsr	sndReq_Enter
(1)  322/     308 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  323/     30C : 61C6                		bsr	sndReq_scmd
(1)  324/     30E : 60AE                		bra 	sndReq_Exit
(1)  325/     310 :                     
(1)  326/     310 :                     ; --------------------------------------------------------
(1)  327/     310 :                     ; gemaPlayTrack
(1)  328/     310 :                     ;
(1)  329/     310 :                     ; Play a track by number
(1)  330/     310 :                     ;
(1)  331/     310 :                     ; d0.b - Track number
(1)  332/     310 :                     ; --------------------------------------------------------
(1)  333/     310 :                     
(1)  334/     310 :                     gemaPlayTrack:
(1)  335/     310 : 6100 FF76           		bsr	sndReq_Enter
(1)  336/     314 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  337/     318 : 61BA                		bsr	sndReq_scmd
(1)  338/     31A : 1E00                		move.b	d0,d7
(1)  339/     31C : 61D0                		bsr	sndReq_sbyte
(1)  340/     31E : 7E00                		moveq	#0,d7
(1)  341/     320 : 61CC                		bsr	sndReq_sbyte
(1)  342/     322 : 609A                		bra 	sndReq_Exit
(1)  343/     324 :                     
(1)  344/     324 :                     ; --------------------------------------------------------
(1)  345/     324 :                     ; gemaPlayFromBlk
(1)  346/     324 :                     ;
(1)  347/     324 :                     ; Play a track by number
(1)  348/     324 :                     ;
(1)  349/     324 :                     ; d0.b - Track number
(1)  350/     324 :                     ; d1.b - Block number
(1)  351/     324 :                     ; --------------------------------------------------------
(1)  352/     324 :                     
(1)  353/     324 :                     gemaPlayFromBlk:
(1)  354/     324 : 6100 FF62           		bsr	sndReq_Enter
(1)  355/     328 : 3E3C 0001           		move.w	#$01,d7		; Command $04
(1)  356/     32C : 61A6                		bsr	sndReq_scmd
(1)  357/     32E : 1E00                		move.b	d0,d7
(1)  358/     330 : 61BC                		bsr	sndReq_sbyte
(1)  359/     332 : 1E01                		move.b	d1,d7
(1)  360/     334 : 61B8                		bsr	sndReq_sbyte
(1)  361/     336 : 6086                		bra 	sndReq_Exit
(1)  362/     338 :                     
(1)  363/     338 :                     ; --------------------------------------------------------
(1)  364/     338 :                     ; gemaStopTrack
(1)  365/     338 :                     ;
(1)  366/     338 :                     ; Stops a track using that ID
(1)  367/     338 :                     ;
(1)  368/     338 :                     ; d0.b - Track number
(1)  369/     338 :                     ; --------------------------------------------------------
(1)  370/     338 :                     
(1)  371/     338 :                     gemaStopTrack:
(1)  372/     338 : 6100 FF4E           		bsr	sndReq_Enter
(1)  373/     33C : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  374/     340 : 6192                		bsr	sndReq_scmd
(1)  375/     342 : 1E00                		move.b	d0,d7
(1)  376/     344 : 61A8                		bsr	sndReq_sbyte
(1)  377/     346 : 6000 FF76           		bra 	sndReq_Exit
(1)  378/     34A :                     
(1)  379/     34A :                     ; --------------------------------------------------------
(1)  380/     34A :                     ; gemaStopAll
(1)  381/     34A :                     ;
(1)  382/     34A :                     ; Stop ALL tracks from ALL buffers.
(1)  383/     34A :                     ;
(1)  384/     34A :                     ; No arguments.
(1)  385/     34A :                     ; --------------------------------------------------------
(1)  386/     34A :                     
(1)  387/     34A :                     gemaStopAll:
(1)  389/     34A : 4E75                		rts
(1)  396/     34C :                     
(1)  397/     34C :                     ; --------------------------------------------------------
(1)  398/     34C :                     ; gemaSetBeats
(1)  399/     34C :                     ;
(1)  400/     34C :                     ; Sets global subbeats
(1)  401/     34C :                     ;
(1)  402/     34C :                     ; d0.w - sub-beats
(1)  403/     34C :                     ; --------------------------------------------------------
(1)  404/     34C :                     
(1)  405/     34C :                     gemaSetBeats:
(1)  406/     34C : 6100 FF3A           		bsr	sndReq_Enter
(1)  407/     350 : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  408/     354 : 6100 FF7E           		bsr	sndReq_scmd
(1)  409/     358 : 3E00                		move.w	d0,d7
(1)  410/     35A : 618E                		bsr	sndReq_sword
(1)  411/     35C : 6000 FF60           		bra 	sndReq_Exit
(1)  412/     360 :                     
     185/     360 :                     		include	"system/md/video.asm"
(1)    1/     360 :                     ; ====================================================================
(1)    2/     360 :                     ; ----------------------------------------------------------------
(1)    3/     360 :                     ; Genesis Video
(1)    4/     360 :                     ; ----------------------------------------------------------------
(1)    5/     360 :                     
(1)    6/     360 :                     ; ====================================================================
(1)    7/     360 :                     ; --------------------------------------------------------
(1)    8/     360 :                     ; Settings
(1)    9/     360 :                     ; --------------------------------------------------------
(1)   10/     360 :                     
(1)   11/     360 : =$10                MAX_MDDMATSK	equ 16		; MAX DMA BLAST entries
(1)   12/     360 : =$10                MAX_MDOBJ	equ 16		; Max objects for Genesis
(1)   13/     360 : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   14/     360 : =$580               varPrintVram	equ $580	; Default location of the PRINT text graphics
(1)   15/     360 : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     360 :                     
(1)   17/     360 :                     ; --------------------------------------------------------
(1)   18/     360 :                     ; Variables
(1)   19/     360 :                     ; --------------------------------------------------------
(1)   20/     360 :                     
(1)   21/     360 :                     ; VDP Register $80
(1)   22/     360 : =$2                 HVStop		equ $02
(1)   23/     360 : =$10                HintEnbl	equ $10
(1)   24/     360 : =$1                 bitHVStop	equ 1
(1)   25/     360 : =$4                 bitHintEnbl	equ 4
(1)   26/     360 :                     
(1)   27/     360 :                     ; VDP Register $81
(1)   28/     360 : =$40                DispEnbl 	equ $40
(1)   29/     360 : =$20                VintEnbl 	equ $20
(1)   30/     360 : =$10                DmaEnbl		equ $10
(1)   31/     360 : =$6                 bitDispEnbl	equ 6
(1)   32/     360 : =$5                 bitVintEnbl	equ 5
(1)   33/     360 : =$4                 bitDmaEnbl	equ 4
(1)   34/     360 : =$3                 bitV30		equ 3
(1)   35/     360 :                     
(1)   36/     360 :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     360 : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     360 : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   39/     360 : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   40/     360 : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   41/     360 : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   42/     360 : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     360 : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   44/     360 : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   45/     360 : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     360 : =$0                 bitPal		equ 0
(1)   47/     360 :                     
(1)   48/     360 :                     ; md_bg_flags
(1)   49/     360 : =$0                 bitDrwR		equ 0
(1)   50/     360 : =$1                 bitDrwL		equ 1
(1)   51/     360 : =$2                 bitDrwD		equ 2
(1)   52/     360 : =$3                 bitDrwU		equ 3
(1)   53/     360 : =$6                 bitMarsBg	equ 6
(1)   54/     360 : =$7                 bitBgOn		equ 7
(1)   55/     360 :                     
(1)   56/     360 :                     ; ====================================================================
(1)   57/     360 :                     ; ----------------------------------------------------------------
(1)   58/     360 :                     ; Structs
(1)   59/     360 :                     ; ----------------------------------------------------------------
(1)   60/     360 :                     
(1)   61/     360 :                     ; ; IN SH2 ORDER
(1)   62/     360 :                     ; ; still works fine on this side.
(1)   63/     360 :                     ; ; md_bg_flags: %EM..UDLR
(1)   64/     360 :                     ; ; UDLR - off-screen update bits
(1)   65/     360 :                     ; ;    M - Map belongs to Genesis or 32X
(1)   66/     360 :                     ; ;    E - Enable this map
(1)   67/     360 :                     ;
(1)   68/     360 :                     ; 		struct 0
(1)   69/     360 :                     ; md_bg_bw	ds.b 1		; Block Width
(1)   70/     360 :                     ; md_bg_bh	ds.b 1		; Block Height
(1)   71/     360 :                     ; md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   72/     360 :                     ; md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   73/     360 :                     ; md_bg_xset	ds.b 1		; X-counter
(1)   74/     360 :                     ; md_bg_yset	ds.b 1		; Y-counter
(1)   75/     360 :                     ; md_bg_movex	ds.b 1		; *** ALIGNMENT, FREE TO USE
(1)   76/     360 :                     ; md_bg_movey	ds.b 1		; ***
(1)   77/     360 :                     ; md_bg_w		ds.w 1		; Width in blocks
(1)   78/     360 :                     ; md_bg_h		ds.w 1		; Height in blocks
(1)   79/     360 :                     ; md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   80/     360 :                     ; md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   81/     360 :                     ; md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   82/     360 :                     ; md_bg_xinc_r	ds.w 1
(1)   83/     360 :                     ; md_bg_yinc_u	ds.w 1
(1)   84/     360 :                     ; md_bg_yinc_d	ds.w 1
(1)   85/     360 :                     ; md_bg_x_old	ds.w 1		; OLD X position
(1)   86/     360 :                     ; md_bg_y_old	ds.w 1		; OLD Y position
(1)   87/     360 :                     ; md_bg_vpos	ds.w 1		; VRAM output for map
(1)   88/     360 :                     ; md_bg_vram	ds.w 1		; VRAM start for cells
(1)   89/     360 :                     ; md_bg_low	ds.l 1		; MAIN layout data
(1)   90/     360 :                     ; md_bg_hi	ds.l 1		; HI layout data
(1)   91/     360 :                     ; md_bg_blk	ds.l 1		; Block data
(1)   92/     360 :                     ; md_bg_col	ds.l 1		; Collision data (if needed)
(1)   93/     360 :                     ; md_bg_x		ds.l 1		; X pos 0000.0000
(1)   94/     360 :                     ; md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   95/     360 :                     ; sizeof_mdbg	ds.l 0
(1)   96/     360 :                     ; 		endstruct
(1)   97/     360 :                     ;
(1)   98/     360 :                     ; ; --------------------------------
(1)   99/     360 :                     ; ; object struct
(1)  100/     360 :                     ; ; --------------------------------
(1)  101/     360 :                     ;
(1)  102/     360 :                     ; 		struct 0
(1)  103/     360 :                     ; obj_code	ds.l 1		; Object code
(1)  104/     360 :                     ; obj_size	ds.l 1		; Object size (see below)
(1)  105/     360 :                     ; obj_x		ds.l 1		; Object X Position
(1)  106/     360 :                     ; obj_y		ds.l 1		; Object Y Position
(1)  107/     360 :                     ; obj_map		ds.l 1		; Object image settings
(1)  108/     360 :                     ; obj_vram	ds.w 1		; Object VRAM position (MD-side only)
(1)  109/     360 :                     ; obj_x_spd	ds.w 1		; Object X Speed
(1)  110/     360 :                     ; obj_y_spd	ds.w 1		; Object Y Speed
(1)  111/     360 :                     ; obj_anim_indx	ds.w 1		; Object animation increment (obj_anim + obj_anim_indx)
(1)  112/     360 :                     ; obj_anim_id	ds.w 1		; Object animation to read (current|saved)
(1)  113/     360 :                     ; obj_frame	ds.w 1		; Object display frame (MD: $FFFF, MARS: $YY,$XX)
(1)  114/     360 :                     ; obj_anim_spd	ds.b 1		; Object animation delay
(1)  115/     360 :                     ; obj_index	ds.b 1		; Object code index
(1)  116/     360 :                     ; obj_subid	ds.b 1		; Object SubID
(1)  117/     360 :                     ; obj_set		ds.b 1		; Object settings
(1)  118/     360 :                     ; obj_status	ds.b 1		; Object custom status
(1)  119/     360 :                     ; obj_spwnid	ds.b 1		; Object respawn index (this - 1)
(1)  120/     360 :                     ; obj_ram		ds.b $40	; Object RAM
(1)  121/     360 :                     ; sizeof_mdobj	ds.l 0
(1)  122/     360 :                     ; 		endstruct
(1)  123/     360 :                     ;
(1)  124/     360 :                     ; ; --------------------------------
(1)  125/     360 :                     ; ; obj_settings
(1)  126/     360 :                     ; ; --------------------------------
(1)  127/     360 :                     ;
(1)  128/     360 :                     ; bitobj_Mars	equ	7	; This object is for 32X side.
(1)  129/     360 :                     ; bitobj_flipV	equ	1	; set to flip Sprite Vertically
(1)  130/     360 :                     ; bitobj_flipH	equ	0	; set to flip Sprite Horizontally
(1)  131/     360 :                     ;
(1)  132/     360 :                     ; ; --------------------------------
(1)  133/     360 :                     ; ; obj_set
(1)  134/     360 :                     ; ; --------------------------------
(1)  135/     360 :                     ;
(1)  136/     360 :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)  137/     360 :                     ;
(1)  138/     360 :                     ; ; --------------------------------
(1)  139/     360 :                     ; ; obj_size
(1)  140/     360 :                     ; ; --------------------------------
(1)  141/     360 :                     ;
(1)  142/     360 :                     ; at_u		equ	3
(1)  143/     360 :                     ; at_d		equ	2
(1)  144/     360 :                     ; at_l		equ	1
(1)  145/     360 :                     ; at_r		equ	0
(1)  146/     360 :                     
(1)  147/     360 :                     ; ====================================================================
(1)  148/     360 :                     ; ----------------------------------------------------------------
(1)  149/     360 :                     ; Video RAM
(1)  150/     360 :                     ; ----------------------------------------------------------------
(1)  151/     360 :                     
(1)  152/     360 : (MACRO)             			struct RAM_MdVideo
(1)  152/     360 : =$360               GLBL_LASTPC     set *
(1)  152/     360 :                                     dephase
(1)  152/     360 : =$360               GLBL_LASTORG    set *
(1)  152/FFFFFFFFFFFF7800 :                                     phase RAM_MDVIDEO
(1)  153/FFFFFFFFFFFF7800 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  154/FFFFFFFFFFFF7BC0 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  155/FFFFFFFFFFFF7C10 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  156/FFFFFFFFFFFF8070 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  157/FFFFFFFFFFFF8150 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  158/FFFFFFFFFFFF81D0 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  159/FFFFFFFFFFFF83D0 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  160/FFFFFFFFFFFF8450 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  161/FFFFFFFFFFFF8454 :                     RAM_VdpExWrite		ds.w 1
(1)  162/FFFFFFFFFFFF8456 :                     RAM_SprDrwPz		ds.w 8*70		; External sprite pieces
(1)  163/FFFFFFFFFFFF88B6 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  164/FFFFFFFFFFFF8A36 :                     RAM_SprDrwCntr		ds.w 1
(1)  165/FFFFFFFFFFFF8A38 :                     RAM_SprShowIndx		ds.w 1
(1)  166/FFFFFFFFFFFF8A3A :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  167/FFFFFFFFFFFF8A3C :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  168/FFFFFFFFFFFF8A3E :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  169/FFFFFFFFFFFF8A40 :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  170/FFFFFFFFFFFF8A42 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  171/FFFFFFFFFFFF8A44 :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  172/FFFFFFFFFFFF8A46 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  173/FFFFFFFFFFFF8A48 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  174/FFFFFFFFFFFF8A4A :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  175/FFFFFFFFFFFF8A4C :                     RAM_FadeMarsDelay	ds.w 1
(1)  176/FFFFFFFFFFFF8A4E :                     RAM_FadeMarsTmr		ds.w 1
(1)  177/FFFFFFFFFFFF8A50 :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  178/FFFFFFFFFFFF8A68 :                     sizeof_mdvid		ds.l 0
(1)  179/FFFFFFFFFFFF8A68 : (MACRO)             			endstruct
(1)  179/FFFFFFFFFFFF7800 :                                     !org GLBL_LASTORG
(1)  179/     360 :                                     phase GLBL_LASTPC
(1)  180/     360 :                     
(1)  181/     360 : (MACRO)             			erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  182/     360 :                     
(1)  183/     360 :                     ; ====================================================================
(1)  184/     360 :                     ; --------------------------------------------------------
(1)  185/     360 :                     ; Init Genesis video
(1)  186/     360 :                     ; --------------------------------------------------------
(1)  187/     360 :                     
(1)  188/     360 :                     Video_Init:
(1)  189/     360 : 4DF9 FFFF 7800      		lea	(RAM_MdVideo),a6	; Clear our RAM section
(1)  190/     366 : 7C00                		moveq	#0,d6
(1)  191/     368 : 3E3C 1267           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  192/     36C :                     .clrram:
(1)  193/     36C : 1CC6                		move.b	d6,(a6)+
(1)  194/     36E : 51CF FFFC           		dbf	d7,.clrram
(1)  195/     372 : 4DFA 0042           		lea	list_vdpregs(pc),a6	; Write "cache'd" VDP registers
(1)  196/     376 : 4BF8 8A50           		lea	(RAM_VdpRegs).w,a5
(1)  197/     37A : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  198/     380 : 3C3C 8000           		move.w	#$8000,d6
(1)  199/     384 : 3E3C 0012           		move.w	#19-1,d7
(1)  200/     388 :                     .loop:
(1)  201/     388 : 1C1E                		move.b	(a6)+,d6
(1)  202/     38A : 1AC6                		move.b	d6,(a5)+
(1)  203/     38C : 3886                		move.w	d6,(a4)
(1)  204/     38E : DC7C 0100           		add.w	#$100,d6
(1)  205/     392 : 51CF FFF4           		dbf	d7,.loop
(1)  206/     396 :                     .exit:
(1)  207/     396 :                     
(1)  208/     396 :                     ; --------------------------------------------------------
(1)  209/     396 :                     ; Video_Update
(1)  210/     396 :                     ;
(1)  211/     396 :                     ; Writes register data stored in RAM to VDP
(1)  212/     396 :                     ; from Registers $80 to $90
(1)  213/     396 :                     ;
(1)  214/     396 :                     ; WINDOW registers $91 and $92 are written
(1)  215/     396 :                     ; manually.
(1)  216/     396 :                     ;
(1)  217/     396 :                     ; Breaks:
(1)  218/     396 :                     ; d6-d7,a5-a6
(1)  219/     396 :                     ; --------------------------------------------------------
(1)  220/     396 :                     
(1)  221/     396 :                     Video_Update:
(1)  222/     396 : 4DF8 8A50           		lea	(RAM_VdpRegs).w,a6
(1)  223/     39A : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  224/     3A0 : 3C3C 8000           		move.w	#$8000,d6
(1)  225/     3A4 : 3E3C 0010           		move.w	#17-1,d7
(1)  226/     3A8 :                     .loop:
(1)  227/     3A8 : 1C1E                		move.b	(a6)+,d6
(1)  228/     3AA : 3A86                		move.w	d6,(a5)
(1)  229/     3AC : 0646 0100           		addi.w	#$100,d6
(1)  230/     3B0 : 51CF FFF6           		dbf	d7,.loop
(1)  231/     3B4 :                     .exit:
(1)  232/     3B4 : 4E75                		rts
(1)  233/     3B6 :                     
(1)  234/     3B6 :                     ; --------------------------------------------------------
(1)  235/     3B6 :                     
(1)  236/     3B6 :                     list_vdpregs:
(1)  237/     3B6 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  238/     3B7 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  239/     3B8 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  240/     3B9 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  241/     3BA : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  242/     3BB : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  243/     3BC : 00                  		dc.b $00			; Unused
(1)  244/     3BD : 00                  		dc.b $00			; Background color: 0
(1)  245/     3BE : 00                  		dc.b $00			; Unused
(1)  246/     3BF : 00                  		dc.b $00			; Unused
(1)  247/     3C0 : 00                  		dc.b $00			; HInt value
(1)  248/     3C1 : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  249/     3C2 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  250/     3C3 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  251/     3C4 : 00                  		dc.b $00			; Unused
(1)  252/     3C5 : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  253/     3C6 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  254/     3C7 : 00                  		dc.b $00
(1)  255/     3C8 : 00                  		dc.b $00
(1)  256/     3C9 :                     		align 2
(1)  257/     3CA :                     
(1)  258/     3CA :                     ; Default PRINT palette
(1)  259/     3CA : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  260/     3DA : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  261/     3EA :                     ASCII_PAL_e:
(1)  262/     3EA :                     		align 2
(1)  263/     3EA :                     
(1)  264/     3EA :                     ; --------------------------------------------------------
(1)  265/     3EA :                     ; Video_Clear
(1)  266/     3EA :                     ;
(1)  267/     3EA :                     ; Clear all video data from VRAM
(1)  268/     3EA :                     ; --------------------------------------------------------
(1)  269/     3EA :                     
(1)  270/     3EA :                     Video_Clear:
(1)  271/     3EA :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  272/     3EA :                     ; 		move.w	#0,d1
(1)  273/     3EA :                     ; 		move.w	#$57F*$20,d2
(1)  274/     3EA :                     ; 		bsr	Video_Fill
(1)  275/     3EA :                     
(1)  276/     3EA :                     Video_ClearScreen:
(1)  277/     3EA : 7000                		moveq	#0,d0
(1)  278/     3EC : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  279/     3F0 : 1238 8A52           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  280/     3F4 : 0241 0038           		andi.w	#%111000,d1
(1)  281/     3F8 : E149                		lsl.w	#8,d1
(1)  282/     3FA : E549                		lsl.w	#2,d1
(1)  283/     3FC : 6100 0530           		bsr	Video_Fill
(1)  284/     400 : 1238 8A54           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  285/     404 : 0241 0007           		andi.w	#%000111,d1
(1)  286/     408 : E149                		lsl.w	#8,d1
(1)  287/     40A : EB49                		lsl.w	#5,d1
(1)  288/     40C : 6100 0520           		bsr	Video_Fill
(1)  289/     410 : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  290/     414 : 1238 8A53           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  291/     418 : 0241 003E           		andi.w	#%111110,d1
(1)  292/     41C : E149                		lsl.w	#8,d1
(1)  293/     41E : E549                		lsl.w	#2,d1
(1)  294/     420 : 6100 050C           		bsr	Video_Fill
(1)  295/     424 :                     
(1)  296/     424 :                     	; RAM cleanup
(1)  297/     424 : 41F9 FFFF 7800      		lea	(RAM_HorScroll),a0
(1)  298/     42A : 3E3C 00EF           		move.w	#240-1,d7
(1)  299/     42E : 7000                		moveq	#0,d0
(1)  300/     430 :                     .xnext:
(1)  301/     430 : 20C0                		move.l	d0,(a0)+
(1)  302/     432 : 51CF FFFC           		dbf	d7,.xnext
(1)  303/     436 : 41F9 FFFF 7BC0      		lea	(RAM_VerScroll),a0
(1)  304/     43C : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  305/     440 : 7000                		moveq	#0,d0
(1)  306/     442 :                     .ynext:
(1)  307/     442 : 20C0                		move.l	d0,(a0)+
(1)  308/     444 : 51CF FFFC           		dbf	d7,.ynext
(1)  309/     448 : 41F9 FFFF 7C10      		lea	(RAM_Sprites),a0
(1)  310/     44E : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  311/     452 : 7000                		moveq	#0,d0
(1)  312/     454 :                     .snext:
(1)  313/     454 : 20C0                		move.l	d0,(a0)+
(1)  314/     456 : 51CF FFFC           		dbf	d7,.snext
(1)  315/     45A : 41F8 8150           		lea	(RAM_Palette),a0
(1)  316/     45E : 43F8 83D0           		lea	(RAM_PaletteFd),a1
(1)  317/     462 : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  318/     466 : 7000                		moveq	#0,d0
(1)  319/     468 :                     .pnext:
(1)  320/     468 : 20C0                		move.l	d0,(a0)+
(1)  321/     46A : 22C0                		move.l	d0,(a1)+
(1)  322/     46C : 51CF FFFA           		dbf	d7,.pnext
(1)  333/     470 : 4E75                		rts
(1)  334/     472 :                     
(1)  335/     472 :                     ; ====================================================================
(1)  336/     472 :                     ; ----------------------------------------------------------------
(1)  337/     472 :                     ; Generic screen-drawing routines
(1)  338/     472 :                     ; ----------------------------------------------------------------
(1)  339/     472 :                     
(1)  340/     472 :                     ; --------------------------------------------------------
(1)  341/     472 :                     ; Video_LoadMap
(1)  342/     472 :                     ;
(1)  343/     472 :                     ; Loads map data, in Horizontal order
(1)  344/     472 :                     ; Can autodetect layer width, height and
(1)  345/     472 :                     ; double interlace mode
(1)  346/     472 :                     ;
(1)  347/     472 :                     ; Input:
(1)  348/     472 :                     ; a0 - Map data
(1)  349/     472 :                     ;
(1)  350/     472 :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  351/     472 :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  352/     472 :                     ; d2 | WORD - VRAM
(1)  353/     472 :                     ;
(1)  354/     472 :                     ; Breaks:
(1)  355/     472 :                     ; d4-d7,a6
(1)  356/     472 :                     ; --------------------------------------------------------
(1)  357/     472 :                     
(1)  358/     472 :                     Video_LoadMap:
(1)  359/     472 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  360/     478 : 6100 0222           		bsr	vid_PickLayer
(1)  361/     47C : 3A01                		move.w	d1,d5		; Start here
(1)  362/     47E :                     .yloop:
(1)  363/     47E : 4845                		swap	d5
(1)  364/     480 : 2D44 0004           		move.l	d4,4(a6)
(1)  365/     484 : 2E01                		move.l	d1,d7
(1)  366/     486 : 4847                		swap	d7
(1)  367/     488 :                     .xloop:
(1)  368/     488 : 3A18                		move.w	(a0)+,d5
(1)  369/     48A : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  370/     48E : 6606                		bne.s	.nonull
(1)  371/     490 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  372/     494 : 6002                		bra.s	.cont
(1)  373/     496 :                     .nonull:
(1)  374/     496 : DA42                		add.w	d2,d5
(1)  375/     498 :                     .cont:
(1)  376/     498 :                     
(1)  377/     498 :                     	; Check for double interlace
(1)  378/     498 : 4847                		swap	d7
(1)  379/     49A : 1E38 8A5C           		move.b	(RAM_VdpRegs+$C).w,d7
(1)  380/     49E : CE7C 0006           		and.w	#%110,d7
(1)  381/     4A2 : BE7C 0006           		cmp.w	#%110,d7
(1)  382/     4A6 : 660E                		bne.s	.nodble
(1)  383/     4A8 : 3E05                		move.w	d5,d7
(1)  384/     4AA : E24F                		lsr.w	#1,d7
(1)  385/     4AC : CE7C 07FF           		and.w	#$7FF,d7
(1)  386/     4B0 : CA7C F800           		and.w	#$F800,d5
(1)  387/     4B4 : 8A47                		or.w	d7,d5
(1)  388/     4B6 :                     .nodble:
(1)  389/     4B6 : 4847                		swap	d7
(1)  390/     4B8 : 3C85                		move.w	d5,(a6)
(1)  391/     4BA : 51CF FFCC           		dbf	d7,.xloop
(1)  392/     4BE : D886                		add.l	d6,d4
(1)  393/     4C0 : 4845                		swap	d5
(1)  394/     4C2 : 51CD FFBA           		dbf	d5,.yloop
(1)  395/     4C6 : 4E75                		rts
(1)  396/     4C8 :                     
(1)  397/     4C8 :                     ; --------------------------------------------------------
(1)  398/     4C8 :                     ; Video_LoadMap_Vert
(1)  399/     4C8 :                     ;
(1)  400/     4C8 :                     ; Load map data, Vertical order
(1)  401/     4C8 :                     ;
(1)  402/     4C8 :                     ; a0 - Map data
(1)  403/     4C8 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  404/     4C8 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  405/     4C8 :                     ; d2 | WORD - VRAM
(1)  406/     4C8 :                     
(1)  407/     4C8 :                     ; Breaks:
(1)  408/     4C8 :                     ; a4-a5,d4-d7
(1)  409/     4C8 :                     ; --------------------------------------------------------
(1)  410/     4C8 :                     
(1)  411/     4C8 :                     Video_LoadMap_Vert:
(1)  412/     4C8 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  413/     4CE : 6100 01CC           		bsr	vid_PickLayer
(1)  414/     4D2 : 2A01                		move.l	d1,d5		; Start here
(1)  415/     4D4 : 4845                		swap	d5
(1)  416/     4D6 :                     .xloop:
(1)  417/     4D6 : 4845                		swap	d5
(1)  418/     4D8 : 2F04                		move.l	d4,-(sp)
(1)  419/     4DA : 3E01                		move.w	d1,d7
(1)  420/     4DC : 0838 0002 8A5C      		btst	#2,(RAM_VdpRegs+$C).w
(1)  421/     4E2 : 6702                		beq.s	.yloop
(1)  422/     4E4 : E24F                		lsr.w	#1,d7
(1)  423/     4E6 :                     .yloop:
(1)  424/     4E6 : 2944 0004           		move.l	d4,4(a4)
(1)  425/     4EA : 3A10                		move.w	(a0),d5
(1)  426/     4EC : BA7C FFFF           		cmp.w	#-1,d5
(1)  427/     4F0 : 6606                		bne.s	.nonull
(1)  428/     4F2 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  429/     4F6 : 6002                		bra.s	.cont
(1)  430/     4F8 :                     .nonull:
(1)  431/     4F8 : DA42                		add.w	d2,d5
(1)  432/     4FA :                     .cont:
(1)  433/     4FA : 4847                		swap	d7
(1)  434/     4FC : D0FC 0002           		adda	#2,a0
(1)  435/     500 : 0838 0002 8A5C      		btst	#2,(RAM_VdpRegs+$C).w
(1)  436/     506 : 6712                		beq.s	.nodble
(1)  437/     508 : D0FC 0002           		adda	#2,a0
(1)  438/     50C : 3E05                		move.w	d5,d7
(1)  439/     50E : E24F                		lsr.w	#1,d7
(1)  440/     510 : CE7C 07FF           		and.w	#$7FF,d7
(1)  441/     514 : CA7C F800           		and.w	#$F800,d5
(1)  442/     518 : 8A47                		or.w	d7,d5
(1)  443/     51A :                     .nodble:
(1)  444/     51A : 4847                		swap	d7
(1)  445/     51C : 3885                		move.w	d5,(a4)
(1)  446/     51E : D886                		add.l	d6,d4
(1)  447/     520 : 51CF FFC4           		dbf	d7,.yloop
(1)  448/     524 :                     .outdbl:
(1)  449/     524 : 281F                		move.l	(sp)+,d4
(1)  450/     526 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  451/     52C : 4845                		swap	d5
(1)  452/     52E : 51CD FFA6           		dbf	d5,.xloop
(1)  453/     532 : 4E75                		rts
(1)  454/     534 :                     
(1)  455/     534 :                     ; ====================================================================
(1)  456/     534 :                     ; ----------------------------------------------------------------
(1)  457/     534 :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  458/     534 :                     ; ----------------------------------------------------------------
(1)  459/     534 :                     
(1)  460/     534 :                     ; --------------------------------------------------------
(1)  461/     534 :                     ; Video_PrintInit
(1)  462/     534 :                     ;
(1)  463/     534 :                     ; Initializes the default Graphics and Palette
(1)  464/     534 :                     ; for the font.
(1)  465/     534 :                     ;
(1)  466/     534 :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  467/     534 :                     ; *** MAKE SURE SH2 IS NOT READING ROM DATA ***
(1)  468/     534 :                     ; --------------------------------------------------------
(1)  469/     534 :                     
(1)  470/     534 :                     Video_PrintInit:
(1)  471/     534 : 203C 0003 8000      		move.l	#ASCII_FONT,d0
(1)  472/     53A : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1)  473/     53E : 343C 0C00           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  474/     542 : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  475/     546 : 0443 0020           		subi.w	#$20,d3
(1)  476/     54A : 31C3 8A3E           		move.w	d3,(RAM_VidPrntVram).w
(1)  477/     54E : 6100 04D8           		bsr	Video_LoadArt
(1)  478/     552 :                     Video_PrintPal:
(1)  479/     552 : 41FA FE76           		lea	ASCII_PAL(pc),a0
(1)  480/     556 : 7030                		moveq	#(varPrintPal<<4),d0
(1)  481/     558 : 323C 000F           		move.w	#$F,d1
(1)  482/     55C : 6100 01F0           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  483/     560 : 6000 01E2           		bra	Video_FadePal
(1)  484/     564 :                     
(1)  485/     564 :                     ; --------------------------------------------------------
(1)  486/     564 :                     ; Video_Print
(1)  487/     564 :                     ;
(1)  488/     564 :                     ; Prints string to layer
(1)  489/     564 :                     ; requires ASCII font
(1)  490/     564 :                     ;
(1)  491/     564 :                     ; a0 | DATA - String data w/special characters +
(1)  492/     564 :                     ;             list of RAM locations to read
(1)  493/     564 :                     ; d0 | LONG - Print location on-screen:
(1)  494/     564 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  495/     564 :                     ;
(1)  496/     564 :                     ; Special characters:
(1)  497/     564 :                     ; "//b" - Shows BYTE value
(1)  498/     564 :                     ; "//w" - Shows WORD value
(1)  499/     564 :                     ; "//l" - Shows LONG value
(1)  500/     564 :                     ;   $0A - Next line
(1)  501/     564 :                     ;   $00 - End of line
(1)  502/     564 :                     ;
(1)  503/     564 :                     ; After $00, put your RAM addresses in LONGS
(1)  504/     564 :                     ; don't forget to put align 2 at the end.
(1)  505/     564 :                     ;
(1)  506/     564 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  507/     564 :                     ;
(1)  508/     564 :                     ; Breaks:
(1)  509/     564 :                     ; d4-d7,a4-a6
(1)  510/     564 :                     ; --------------------------------------------------------
(1)  511/     564 :                     
(1)  512/     564 :                     Video_Print:
(1)  513/     564 :                     ; 		movem.l	d3-d7,-(sp)
(1)  514/     564 :                     ; 		movem.l	a4-a6,-(sp)
(1)  515/     564 :                     
(1)  516/     564 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  517/     56A : 6100 0130           		bsr	vid_PickLayer
(1)  518/     56E : 4BF8 88B6           		lea	(RAM_VidPrntList),a5
(1)  519/     572 :                     .newjump:
(1)  520/     572 : 2D44 0004           		move.l	d4,4(a6)
(1)  521/     576 : 2A04                		move.l	d4,d5
(1)  522/     578 :                     .loop:
(1)  523/     578 : 1E18                		move.b	(a0)+,d7
(1)  524/     57A : 6772                		beq	.exit
(1)  525/     57C : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  526/     580 : 6718                		beq.s	.next
(1)  527/     582 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  528/     586 : 6716                		beq.s	.special
(1)  529/     588 : 0247 00FF           		andi.w	#$FF,d7
(1)  530/     58C :                     .puttext:
(1)  531/     58C : DE78 8A3E           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  532/     590 : 3C87                		move.w	d7,(a6)
(1)  533/     592 : DABC 0002 0000      		add.l	#$20000,d5
(1)  534/     598 : 60DE                		bra.s	.loop
(1)  535/     59A :                     ; Next line
(1)  536/     59A :                     .next:
(1)  537/     59A : D886                		add.l	d6,d4
(1)  538/     59C : 60D4                		bra.s	.newjump
(1)  539/     59E :                     
(1)  540/     59E :                     ; Specials
(1)  541/     59E :                     .special:
(1)  542/     59E : 1E18                		move.b	(a0)+,d7
(1)  543/     5A0 : 0C07 0062           		cmpi.b	#"b",d7
(1)  544/     5A4 : 6712                		beq.s	.isbyte
(1)  545/     5A6 : 0C07 0077           		cmpi.b	#"w",d7
(1)  546/     5AA : 671E                		beq.s	.isword
(1)  547/     5AC : 0C07 006C           		cmpi.b	#"l",d7
(1)  548/     5B0 : 672A                		beq.s	.islong
(1)  549/     5B2 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  550/     5B6 : 60D4                		bra.s	.puttext
(1)  551/     5B8 :                     
(1)  552/     5B8 :                     	; TEMPORAL VALUES
(1)  553/     5B8 :                     .isbyte:
(1)  554/     5B8 : 2AC5                		move.l	d5,(a5)+
(1)  555/     5BA : 3AFC 0001           		move.w	#1,(a5)+
(1)  556/     5BE : DABC 0004 0000      		add.l	#$40000,d5
(1)  557/     5C4 : 2D45 0004           		move.l	d5,4(a6)
(1)  558/     5C8 : 60AE                		bra	.loop
(1)  559/     5CA :                     .isword:
(1)  560/     5CA : 2AC5                		move.l	d5,(a5)+
(1)  561/     5CC : 3AFC 0002           		move.w	#2,(a5)+
(1)  562/     5D0 : DABC 0008 0000      		add.l	#$80000,d5
(1)  563/     5D6 : 2D45 0004           		move.l	d5,4(a6)
(1)  564/     5DA : 609C                		bra	.loop
(1)  565/     5DC :                     .islong:
(1)  566/     5DC : 2AC5                		move.l	d5,(a5)+
(1)  567/     5DE : 3AFC 0003           		move.w	#3,(a5)+
(1)  568/     5E2 : DABC 0010 0000      		add.l	#$100000,d5
(1)  569/     5E8 : 2D45 0004           		move.l	d5,4(a6)
(1)  570/     5EC : 608A                		bra	.loop
(1)  571/     5EE :                     .exit:
(1)  572/     5EE :                     
(1)  573/     5EE :                     	; ----------------------------------------
(1)  574/     5EE :                     	; Print values
(1)  575/     5EE :                     	;
(1)  576/     5EE :                     	; vvvv vvvv tttt
(1)  577/     5EE :                     	; v - vdp pos
(1)  578/     5EE :                     	; t - value type
(1)  579/     5EE :                     	; ----------------------------------------
(1)  580/     5EE :                     
(1)  581/     5EE :                     	; reading byte by byte because longs doesn't get
(1)  582/     5EE :                     	; aligned after $00...
(1)  583/     5EE :                     
(1)  584/     5EE : 7800                		moveq	#0,d4
(1)  585/     5F0 : 7A00                		moveq	#0,d5
(1)  586/     5F2 : 7C00                		moveq	#0,d6
(1)  587/     5F4 : 4BF8 88B6           		lea	(RAM_VidPrntList),a5
(1)  588/     5F8 :                     .nextv:
(1)  589/     5F8 : 4A95                		tst.l	(a5)
(1)  590/     5FA : 6700 009E           		beq	.nothing
(1)  591/     5FE :                     
(1)  592/     5FE :                     	; grab value
(1)  593/     5FE : 7800                		moveq	#0,d4
(1)  594/     600 : 1818                		move.b	(a0)+,d4
(1)  595/     602 : E19C                		rol.l	#8,d4
(1)  596/     604 : 1818                		move.b	(a0)+,d4
(1)  597/     606 : E19C                		rol.l	#8,d4
(1)  598/     608 : 1818                		move.b	(a0)+,d4
(1)  599/     60A : E19C                		rol.l	#8,d4
(1)  600/     60C : 1818                		move.b	(a0)+,d4
(1)  601/     60E : 2844                		movea.l	d4,a4
(1)  602/     610 : 7800                		moveq	#0,d4
(1)  603/     612 :                     
(1)  604/     612 :                     	; get value
(1)  605/     612 : 3C2D 0004           		move.w	4(a5),d6
(1)  606/     616 : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  607/     61A : 660E                		bne.s	.vbyte
(1)  608/     61C : 1814                		move.b	(a4),d4
(1)  609/     61E : 2D55 0004           		move.l	(a5),4(a6)
(1)  610/     622 : E91C                		rol.b	#4,d4
(1)  611/     624 : 6158                		bsr.s	.donibl
(1)  612/     626 : E91C                		rol.b	#4,d4
(1)  613/     628 : 6154                		bsr.s	.donibl
(1)  614/     62A :                     .vbyte:
(1)  615/     62A : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  616/     62E : 661C                		bne.s	.vword
(1)  617/     630 : 1814                		move.b	(a4),d4
(1)  618/     632 : E15C                		rol.w	#8,d4
(1)  619/     634 : 182C 0001           		move.b	1(a4),d4
(1)  620/     638 : 2D55 0004           		move.l	(a5),4(a6)
(1)  621/     63C : E95C                		rol.w	#4,d4
(1)  622/     63E : 613E                		bsr.s	.donibl
(1)  623/     640 : E95C                		rol.w	#4,d4
(1)  624/     642 : 613A                		bsr.s	.donibl
(1)  625/     644 : E95C                		rol.w	#4,d4
(1)  626/     646 : 6136                		bsr.s	.donibl
(1)  627/     648 : E95C                		rol.w	#4,d4
(1)  628/     64A : 6132                		bsr.s	.donibl
(1)  629/     64C :                     .vword:
(1)  630/     64C :                     
(1)  631/     64C :                     	; TODO: might break on negative values
(1)  632/     64C : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  633/     650 : 6624                		bne.s	.vlong
(1)  634/     652 : 1814                		move.b	(a4),d4
(1)  635/     654 : E19C                		rol.l	#8,d4
(1)  636/     656 : 182C 0001           		move.b	1(a4),d4
(1)  637/     65A : E19C                		rol.l	#8,d4
(1)  638/     65C : 182C 0002           		move.b	2(a4),d4
(1)  639/     660 : E19C                		rol.l	#8,d4
(1)  640/     662 : 182C 0003           		move.b	3(a4),d4
(1)  641/     666 : 2D55 0004           		move.l	(a5),4(a6)
(1)  642/     66A : 3C3C 0007           		move.w	#7,d6
(1)  643/     66E : E99C                .lngloop:	rol.l	#4,d4
(1)  644/     670 : 610C                		bsr.s	.donibl
(1)  645/     672 : 51CE FFFA           		dbf	d6,.lngloop
(1)  646/     676 :                     .vlong:
(1)  647/     676 : 429D                		clr.l	(a5)+
(1)  648/     678 : 425D                		clr.w	(a5)+
(1)  649/     67A : 6000 FF7C           		bra	.nextv
(1)  650/     67E :                     
(1)  651/     67E :                     ; make nibble byte
(1)  652/     67E :                     .donibl:
(1)  653/     67E : 3A04                		move.w	d4,d5
(1)  654/     680 : 0245 000F           		andi.w	#%1111,d5
(1)  655/     684 : BA3C 000A           		cmp.b	#$A,d5
(1)  656/     688 : 6D04                		blt.s	.lowr
(1)  657/     68A : DA3C 0007           		add.b	#7,d5
(1)  658/     68E :                     .lowr:
(1)  659/     68E : DA7C 0030           		add.w	#"0",d5
(1)  660/     692 : DA78 8A3E           		add.w	(RAM_VidPrntVram),d5
(1)  661/     696 : 3C85                		move.w	d5,(a6)
(1)  662/     698 : 4E75                		rts
(1)  663/     69A :                     ; exit
(1)  664/     69A :                     .nothing:
(1)  665/     69A :                     ; 		movem.l	(sp)+,a4-a6
(1)  666/     69A :                     ; 		movem.l	(sp)+,d3-d7
(1)  667/     69A : 4E75                		rts
(1)  668/     69C :                     
(1)  669/     69C :                     ; --------------------------------------------------------
(1)  670/     69C :                     ; Shared: pick layer / x pos / y pos and set size
(1)  671/     69C :                     ; --------------------------------------------------------
(1)  672/     69C :                     
(1)  673/     69C :                     vid_PickLayer:
(1)  674/     69C : 2C00                		move.l	d0,d6			; Pick layer
(1)  675/     69E : 4846                		swap	d6
(1)  676/     6A0 : 0806 0000           		btst	#0,d6
(1)  677/     6A4 : 671C                		beq.s	.plawnd
(1)  678/     6A6 : 1838 8A54           		move.b	(RAM_VdpRegs+4).w,d4	; BG
(1)  679/     6AA : 3A04                		move.w	d4,d5
(1)  680/     6AC : E24D                		lsr.w	#1,d5
(1)  681/     6AE : 0245 0003           		andi.w	#%11,d5
(1)  682/     6B2 : 4844                		swap	d4
(1)  683/     6B4 : 3805                		move.w	d5,d4
(1)  684/     6B6 : 4844                		swap	d4
(1)  685/     6B8 : 0244 0001           		andi.w	#1,d4
(1)  686/     6BC : E14C                		lsl.w	#8,d4
(1)  687/     6BE : EB4C                		lsl.w	#5,d4
(1)  688/     6C0 : 6024                		bra.s	.golyr
(1)  689/     6C2 :                     .plawnd:
(1)  690/     6C2 : 1838 8A52           		move.b	(RAM_VdpRegs+2).w,d4	; FG
(1)  691/     6C6 : 0806 0001           		btst	#1,d6
(1)  692/     6CA : 6704                		beq.s	.nowd
(1)  693/     6CC : 1838 8A53           		move.b	(RAM_VdpRegs+3).w,d4	; WINDOW
(1)  694/     6D0 :                     .nowd:
(1)  695/     6D0 : 3A04                		move.w	d4,d5
(1)  696/     6D2 : E84D                		lsr.w	#4,d5
(1)  697/     6D4 : 0245 0003           		andi.w	#%11,d5
(1)  698/     6D8 : 4844                		swap	d4
(1)  699/     6DA : 3805                		move.w	d5,d4
(1)  700/     6DC : 4844                		swap	d4
(1)  701/     6DE : 0244 000E           		andi.w	#%00001110,d4
(1)  702/     6E2 : E14C                		lsl.w	#8,d4
(1)  703/     6E4 : E54C                		lsl.w	#2,d4
(1)  704/     6E6 :                     .golyr:
(1)  705/     6E6 : 0044 4000           		ori.w	#$4000,d4
(1)  706/     6EA : 3A00                		move.w	d0,d5			; Y start pos
(1)  707/     6EC : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  708/     6F0 : ED4D                		lsl.w	#6,d5
(1)  709/     6F2 : 1C38 8A60           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  710/     6F6 : 0246 0003           		andi.w	#%11,d6
(1)  711/     6FA : 670A                		beq.s	.thissz
(1)  712/     6FC : DA45                		add.w	d5,d5			; H64
(1)  713/     6FE : 0246 0002           		andi.w	#%10,d6
(1)  714/     702 : 6702                		beq.s	.thissz
(1)  715/     704 : DA45                		add.w	d5,d5			; H128
(1)  716/     706 :                     .thissz:
(1)  717/     706 : D845                		add.w	d5,d4
(1)  718/     708 : 3A00                		move.w	d0,d5
(1)  719/     70A : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  720/     70E : EE4D                		lsr.w	#7,d5
(1)  721/     710 : D845                		add.w	d5,d4			; X add
(1)  722/     712 : 4844                		swap	d4
(1)  723/     714 : 7C00                		moveq	#0,d6
(1)  724/     716 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  725/     71A : 1A38 8A60           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  726/     71E : 0245 0003           		andi.w	#%11,d5
(1)  727/     722 : 670A                		beq.s	.thisszj
(1)  728/     724 : DC46                		add.w	d6,d6			; H64
(1)  729/     726 : 0245 0002           		andi.w	#%10,d5
(1)  730/     72A : 6702                		beq.s	.thisszj
(1)  731/     72C : DC46                		add.w	d6,d6			; H128
(1)  732/     72E :                     .thisszj:
(1)  733/     72E : 4846                		swap	d6
(1)  734/     730 : 4E75                		rts
(1)  735/     732 :                     
(1)  736/     732 :                     ; ====================================================================
(1)  737/     732 :                     ; ----------------------------------------------------------------
(1)  738/     732 :                     ; Palette fade system, Genesis side
(1)  739/     732 :                     ; ----------------------------------------------------------------
(1)  740/     732 :                     
(1)  741/     732 :                     ; --------------------------------------------------------
(1)  742/     732 :                     ; Video_RunFade
(1)  743/     732 :                     ;
(1)  744/     732 :                     ; Processes palette fading and reports if requests
(1)  745/     732 :                     ; finished on exit.
(1)  746/     732 :                     ;
(1)  747/     732 :                     ; Returns:
(1)  748/     732 :                     ; bne - Still active
(1)  749/     732 :                     ; beq - Finished
(1)  750/     732 :                     ;
(1)  751/     732 :                     ; *** CALL System_WaitFrame FIRST ***
(1)  752/     732 :                     ; --------------------------------------------------------
(1)  753/     732 :                     
(1)  754/     732 :                     Video_RunFade:
(1)  755/     732 : 613E                		bsr	Video_DoPalFade
(1)  756/     734 : 6100 03F8           		bsr	Video_MarsPalFade
(1)  757/     738 : 3E38 8A48           		move.w	(RAM_FadeMarsReq),d7
(1)  758/     73C : 3C38 8A40           		move.w	(RAM_FadeMdReq),d6
(1)  759/     740 : 8E46                		or.w	d6,d7
(1)  760/     742 : 4E75                		rts
(1)  761/     744 :                     
(1)  762/     744 :                     ; --------------------------------------------------------
(1)  763/     744 :                     ; Video_LoadPal
(1)  764/     744 :                     ;
(1)  765/     744 :                     ; Input:
(1)  766/     744 :                     ; a0 - Palette data
(1)  767/     744 :                     ; d0 - Start position
(1)  768/     744 :                     ; d1 - Number of colors
(1)  769/     744 :                     ;
(1)  770/     744 :                     ; Breaks:
(1)  771/     744 :                     ; d5-d7,a6
(1)  772/     744 :                     ; --------------------------------------------------------
(1)  773/     744 :                     
(1)  774/     744 :                     Video_FadePal:
(1)  775/     744 : 4DF8 83D0           		lea	(RAM_PaletteFd),a6
(1)  776/     748 : 4278 8A46           		clr.w	(RAM_FadeMdTmr).w
(1)  777/     74C : 6004                		bra.s	vidMd_Pal
(1)  778/     74E :                     Video_LoadPal:
(1)  779/     74E : 4DF8 8150           		lea	(RAM_Palette),a6
(1)  780/     752 :                     vidMd_Pal:
(1)  781/     752 : 2A48                		move.l	a0,a5
(1)  782/     754 : 7E00                		moveq	#0,d7
(1)  783/     756 : 3E00                		move.w	d0,d7
(1)  784/     758 : DE47                		add.w	d7,d7
(1)  785/     75A : DCC7                		adda	d7,a6
(1)  786/     75C : 3E01                		move.w	d1,d7
(1)  787/     75E : 9E7C 0001           		sub.w	#1,d7
(1)  788/     762 : 3C02                		move.w	d2,d6
(1)  789/     764 : CC7C 0001           		and.w	#1,d6
(1)  790/     768 : E25E                		ror.w	#1,d6
(1)  791/     76A :                     .loop:
(1)  792/     76A : 3CDD                		move.w	(a5)+,(a6)+
(1)  793/     76C : 51CF FFFC           		dbf	d7,.loop
(1)  794/     770 : 4E75                		rts
(1)  795/     772 :                     
(1)  796/     772 :                     ; --------------------------------------------------------
(1)  797/     772 :                     ; Video_DoPalFade
(1)  798/     772 :                     ;
(1)  799/     772 :                     ; RAM_ReqFadeMars: (WORD)
(1)  800/     772 :                     ; $00 - No task or finished.
(1)  801/     772 :                     ; $01 - Fade in
(1)  802/     772 :                     ; $02 - Fade out to black
(1)  803/     772 :                     ;
(1)  804/     772 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  805/     772 :                     ; --------------------------------------------------------
(1)  806/     772 :                     
(1)  807/     772 :                     Video_DoPalFade:
(1)  808/     772 : 0478 0001 8A46      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  809/     778 : 6A14                		bpl.s	.active
(1)  810/     77A : 31F8 8A44 8A46      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  811/     780 : 3E38 8A40           		move.w	(RAM_FadeMdReq).w,d7
(1)  812/     784 : DE47                		add.w	d7,d7
(1)  813/     786 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  814/     78A : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  815/     78E :                     .active:
(1)  816/     78E : 4E75                		rts
(1)  817/     790 :                     
(1)  818/     790 :                     ; --------------------------------------------
(1)  819/     790 :                     
(1)  820/     790 :                     .fade_list:
(1)  821/     790 : 0006                		dc.w .fade_done-.fade_list
(1)  822/     792 : 0008                		dc.w .fade_in-.fade_list
(1)  823/     794 : 00AC                		dc.w .fade_out-.fade_list
(1)  824/     796 :                     
(1)  825/     796 :                     ; --------------------------------------------
(1)  826/     796 :                     ; No fade or finished.
(1)  827/     796 :                     ; --------------------------------------------
(1)  828/     796 :                     
(1)  829/     796 :                     .fade_done:
(1)  830/     796 : 4E75                		rts
(1)  831/     798 :                     
(1)  832/     798 :                     ; --------------------------------------------
(1)  833/     798 :                     ; Fade in
(1)  834/     798 :                     ; --------------------------------------------
(1)  835/     798 :                     
(1)  836/     798 :                     .fade_in:
(1)  837/     798 : 4DF8 83D0           		lea	(RAM_PaletteFd),a6
(1)  838/     79C : 4BF8 8150           		lea	(RAM_Palette),a5
(1)  839/     7A0 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  840/     7A4 : 3238 8A42           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  841/     7A8 : D241                		add.w	d1,d1
(1)  842/     7AA : 3C00                		move.w	d0,d6
(1)  843/     7AC : 4846                		swap	d6
(1)  844/     7AE : 907C 0001           		sub.w	#1,d0
(1)  845/     7B2 :                     .nxt_pal:
(1)  846/     7B2 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  847/     7B4 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  848/     7B6 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  849/     7B8 : 3607                		move.w	d7,d3		; RED
(1)  850/     7BA : 3806                		move.w	d6,d4
(1)  851/     7BC : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  852/     7C0 : C87C 000E           		and.w	#%0000000000001110,d4
(1)  853/     7C4 : C67C 000E           		and.w	#%0000000000001110,d3
(1)  854/     7C8 : D841                		add.w	d1,d4
(1)  855/     7CA : B843                		cmp.w	d3,d4
(1)  856/     7CC : 6506                		bcs.s	.no_red
(1)  857/     7CE : 3803                		move.w	d3,d4
(1)  858/     7D0 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  859/     7D4 :                     .no_red:
(1)  860/     7D4 : 8C44                		or.w	d4,d6
(1)  861/     7D6 : E949                		lsl.w	#4,d1
(1)  862/     7D8 : 3607                		move.w	d7,d3		; GREEN
(1)  863/     7DA : 3806                		move.w	d6,d4
(1)  864/     7DC : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  865/     7E0 : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  866/     7E4 : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  867/     7E8 : D841                		add.w	d1,d4
(1)  868/     7EA : B843                		cmp.w	d3,d4
(1)  869/     7EC : 6506                		bcs.s	.no_grn
(1)  870/     7EE : 3803                		move.w	d3,d4
(1)  871/     7F0 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  872/     7F4 :                     .no_grn:
(1)  873/     7F4 : 8C44                		or.w	d4,d6
(1)  874/     7F6 : E949                		lsl.w	#4,d1
(1)  875/     7F8 : 3607                		move.w	d7,d3		; BLUE
(1)  876/     7FA : 3806                		move.w	d6,d4
(1)  877/     7FC : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  878/     800 : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  879/     804 : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  880/     808 : D841                		add.w	d1,d4
(1)  881/     80A : B843                		cmp.w	d3,d4
(1)  882/     80C : 6506                		bcs.s	.no_blu
(1)  883/     80E : 3803                		move.w	d3,d4
(1)  884/     810 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  885/     814 :                     .no_blu:
(1)  886/     814 : 8C44                		or.w	d4,d6
(1)  887/     816 : E049                		lsr.w	#8,d1
(1)  888/     818 : 3AC6                		move.w	d6,(a5)+
(1)  889/     81A : DCFC 0002           		adda	#2,a6
(1)  890/     81E : B47C 0007           		cmp.w	#%111,d2
(1)  891/     822 : 6608                		bne.s	.no_fnsh
(1)  892/     824 : 4846                		swap	d6
(1)  893/     826 : 9C7C 0001           		sub.w	#1,d6
(1)  894/     82A : 4846                		swap	d6
(1)  895/     82C :                     .no_fnsh:
(1)  896/     82C : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  897/     830 : 4846                		swap	d6
(1)  898/     832 : 4A46                		tst.w	d6
(1)  899/     834 : 6604                		bne.s	.no_move
(1)  900/     836 : 4278 8A40           		clr.w	(RAM_FadeMdReq).w
(1)  901/     83A :                     .no_move:
(1)  902/     83A : 4E75                		rts
(1)  903/     83C :                     
(1)  904/     83C :                     ; --------------------------------------------
(1)  905/     83C :                     ; Fade out
(1)  906/     83C :                     ; --------------------------------------------
(1)  907/     83C :                     
(1)  908/     83C :                     .fade_out:
(1)  909/     83C : 4DF8 8150           		lea	(RAM_Palette),a6
(1)  910/     840 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  911/     844 : 3238 8A42           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  912/     848 : 3C00                		move.w	d0,d6
(1)  913/     84A : 4846                		swap	d6
(1)  914/     84C : 907C 0001           		sub.w	#1,d0
(1)  915/     850 :                     .nxt_pal_o:
(1)  916/     850 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  917/     852 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  918/     854 : 3C07                		move.w	d7,d6
(1)  919/     856 : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  920/     85A : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  921/     85E : 9C41                		sub.w	d1,d6
(1)  922/     860 : 6A06                		bpl.s	.no_red_o
(1)  923/     862 : 4246                		clr.w	d6
(1)  924/     864 : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  925/     868 :                     .no_red_o:
(1)  926/     868 : 8E46                		or.w	d6,d7
(1)  927/     86A : E949                		lsl.w	#4,d1
(1)  928/     86C : 3C07                		move.w	d7,d6
(1)  929/     86E : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  930/     872 : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  931/     876 : 9C41                		sub.w	d1,d6
(1)  932/     878 : 6A06                		bpl.s	.no_grn_o
(1)  933/     87A : 4246                		clr.w	d6
(1)  934/     87C : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  935/     880 :                     .no_grn_o:
(1)  936/     880 : 8E46                		or.w	d6,d7
(1)  937/     882 : E949                		lsl.w	#4,d1
(1)  938/     884 : 3C07                		move.w	d7,d6
(1)  939/     886 : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  940/     88A : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  941/     88E : 9C41                		sub.w	d1,d6
(1)  942/     890 : 6A06                		bpl.s	.no_blu_o
(1)  943/     892 : 4246                		clr.w	d6
(1)  944/     894 : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  945/     898 :                     .no_blu_o:
(1)  946/     898 : 8E46                		or.w	d6,d7
(1)  947/     89A : E049                		lsr.w	#8,d1
(1)  948/     89C : 3CC7                		move.w	d7,(a6)+
(1)  949/     89E : B47C 0007           		cmp.w	#%111,d2
(1)  950/     8A2 : 6608                		bne.s	.no_fnsh_o
(1)  951/     8A4 : 4846                		swap	d6
(1)  952/     8A6 : 9C7C 0001           		sub.w	#1,d6
(1)  953/     8AA : 4846                		swap	d6
(1)  954/     8AC :                     .no_fnsh_o:
(1)  955/     8AC : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  956/     8B0 : 4846                		swap	d6
(1)  957/     8B2 : 4A46                		tst.w	d6
(1)  958/     8B4 : 6604                		bne.s	.no_move_o
(1)  959/     8B6 : 4278 8A40           		clr.w	(RAM_FadeMdReq).w
(1)  960/     8BA :                     .no_move_o:
(1)  961/     8BA : 4E75                		rts
(1)  962/     8BC :                     
(1)  963/     8BC :                     ; ====================================================================
(1)  964/     8BC :                     ; --------------------------------------------------------
(1)  965/     8BC :                     ; Genesis DMA
(1)  966/     8BC :                     ; --------------------------------------------------------
(1)  967/     8BC :                     
(1)  968/     8BC :                     ; --------------------------------------------------------
(1)  969/     8BC :                     ; Video_DmaMkEntry
(1)  970/     8BC :                     ;
(1)  971/     8BC :                     ; Sets a new DMA transfer task to the BLAST list
(1)  972/     8BC :                     ;
(1)  973/     8BC :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  974/     8BC :                     ;
(1)  975/     8BC :                     ; d0 | LONG - Art data Real-ROM location
(1)  976/     8BC :                     ; d1 | WORD - VRAM location cell_vram()
(1)  977/     8BC :                     ; d2 | WORD - Size
(1)  978/     8BC :                     ;
(1)  979/     8BC :                     ; Breaks:
(1)  980/     8BC :                     ; d6-d7,a6
(1)  981/     8BC :                     ; --------------------------------------------------------
(1)  982/     8BC :                     
(1)  983/     8BC :                     Video_DmaMkEntry:
(1)  984/     8BC : 31FC 0001 8A3C      		move.w	#1,(RAM_VdpDmaMod).w
(1)  985/     8C2 : 4DF8 8070           		lea	(RAM_VdpDmaList).w,a6
(1)  986/     8C6 : 3E38 8A3A           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  987/     8CA : DCC7                		adda	d7,a6
(1)  988/     8CC : DE7C 000E           		add.w	#7*2,d7
(1)  989/     8D0 : 31C7 8A3A           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  990/     8D4 : 3E02                		move.w	d2,d7			; Length
(1)  994/     8D6 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  995/     8DC : E24F                		lsr.w	#1,d7
(1)  996/     8DE : 1C07                		move.b	d7,d6
(1)  997/     8E0 : 4846                		swap	d6
(1)  998/     8E2 : E04F                		lsr.w	#8,d7
(1)  999/     8E4 : 1C07                		move.b	d7,d6
(1) 1000/     8E6 : 4846                		swap	d6
(1) 1001/     8E8 : 2CC6                		move.l	d6,(a6)+
(1) 1002/     8EA : 2E00                		move.l	d0,d7			; Source
(1) 1006/     8EC : E28F                  		lsr.l	#1,d7
(1) 1007/     8EE : 2C3C 9600 9500       		move.l	#$96009500,d6
(1) 1008/     8F4 : 1C07                 		move.b	d7,d6
(1) 1009/     8F6 : E08F                 		lsr.l	#8,d7
(1) 1010/     8F8 : 4846                 		swap	d6
(1) 1011/     8FA : 1C07                 		move.b	d7,d6
(1) 1012/     8FC : 2CC6                 		move.l	d6,(a6)+
(1) 1013/     8FE : 3C3C 9700            		move.w	#$9700,d6
(1) 1014/     902 : E08F                 		lsr.l	#8,d7
(1) 1015/     904 : 1C07                 		move.b	d7,d6
(1) 1016/     906 : 3CC6                 		move.w	d6,(a6)+
(1) 1017/     908 : 3E01                		move.w	d1,d7			; Destination
(1) 1018/     90A :                     ; 		and.w	#$7FF,d7
(1) 1019/     90A :                     ; 		lsl.w	#5,d7
(1) 1020/     90A : 3C07                		move.w	d7,d6
(1) 1021/     90C : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1) 1022/     912 : 0047 4000           		ori.w	#$4000,d7
(1) 1023/     916 : E04E                		lsr.w	#8,d6
(1) 1024/     918 : EC4E                		lsr.w	#6,d6
(1) 1025/     91A : 0246 0003           		andi.w	#%11,d6
(1) 1026/     91E : 0046 0080           		ori.w	#$80,d6
(1) 1027/     922 : 3CC7                		move.w	d7,(a6)+
(1) 1028/     924 : 3CC6                		move.w	d6,(a6)+
(1) 1029/     926 : 31FC 0000 8A3C      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1030/     92C : 4E75                		rts
(1) 1031/     92E :                     
(1) 1032/     92E :                     ; --------------------------------------------------------
(1) 1033/     92E :                     ; Video_Fill
(1) 1034/     92E :                     ;
(1) 1035/     92E :                     ; Fill data to VRAM
(1) 1036/     92E :                     ;
(1) 1037/     92E :                     ; d0 | WORD - WORD to fill
(1) 1038/     92E :                     ; d1 | WORD - VRAM position
(1) 1039/     92E :                     ; d2 | WORD - Size
(1) 1040/     92E :                     ;
(1) 1041/     92E :                     ; Breaks:
(1) 1042/     92E :                     ; d6-d7,a6
(1) 1043/     92E :                     ; --------------------------------------------------------
(1) 1044/     92E :                     
(1) 1045/     92E :                     Video_Fill:
(1) 1046/     92E : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1047/     934 : 3E3C 8100           		move.w	#$8100,d7
(1) 1048/     938 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1049/     93C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1050/     940 : 3C87                		move.w	d7,(a6)
(1) 1051/     942 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1052/     944 : 0807 0001           		btst	#bitDma,d7
(1) 1053/     948 : 66F8                		bne.s	.dmaw
(1) 1054/     94A : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1055/     94E : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1056/     950 : 9E7C 0001           		sub.w	#1,d7
(1) 1057/     954 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1058/     95A : 1C07                		move.b	d7,d6
(1) 1059/     95C : 4846                		swap	d6
(1) 1060/     95E : E04F                		lsr.w	#8,d7
(1) 1061/     960 : 1C07                		move.b	d7,d6
(1) 1062/     962 : 4846                		swap	d6
(1) 1063/     964 : 2C86                		move.l	d6,(a6)
(1) 1064/     966 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1065/     96A : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1066/     96C :                     ; 		lsl.w	#5,d7
(1) 1067/     96C : 3C07                		move.w	d7,d6
(1) 1068/     96E : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1069/     972 : 0046 4000           		ori.w	#$4000,d6
(1) 1070/     976 : 4846                		swap	d6
(1) 1071/     978 : 3C07                		move.w	d7,d6
(1) 1072/     97A : E04E                		lsr.w	#8,d6
(1) 1073/     97C : EC4E                		lsr.w	#6,d6
(1) 1074/     97E : 0246 0003           		andi.w	#%11,d6
(1) 1075/     982 : 0046 0080           		ori.w	#$80,d6
(1) 1076/     986 : 2C86                		move.l	d6,(a6)
(1) 1077/     988 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1078/     98C : 3E16                .dmawe:		move.w	(a6),d7
(1) 1079/     98E : 0807 0001           		btst	#bitDma,d7
(1) 1080/     992 : 66F8                		bne.s	.dmawe
(1) 1081/     994 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1082/     998 : 3E3C 8100           		move.w	#$8100,d7
(1) 1083/     99C : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1084/     9A0 : 3C87                		move.w	d7,(a6)
(1) 1085/     9A2 : 4E75                		rts
(1) 1086/     9A4 :                     
(1) 1087/     9A4 :                     ; --------------------------------------------------------
(1) 1088/     9A4 :                     ; Video_Copy
(1) 1089/     9A4 :                     ;
(1) 1090/     9A4 :                     ; Copy VRAM data to another location
(1) 1091/     9A4 :                     ;
(1) 1092/     9A4 :                     ; d0 | WORD - VRAM Source
(1) 1093/     9A4 :                     ; d1 | WORD - VRAM Destination
(1) 1094/     9A4 :                     ; d2 | WORD - Size
(1) 1095/     9A4 :                     ;
(1) 1096/     9A4 :                     ; Breaks:
(1) 1097/     9A4 :                     ; d6-d7,a6
(1) 1098/     9A4 :                     ; --------------------------------------------------------
(1) 1099/     9A4 :                     
(1) 1100/     9A4 :                     ; TODO: test if this works again...
(1) 1101/     9A4 :                     
(1) 1102/     9A4 :                     Video_Copy:
(1) 1103/     9A4 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1104/     9AA : 3E3C 8100           		move.w	#$8100,d7
(1) 1105/     9AE : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1106/     9B2 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1107/     9B6 : 3C87                		move.w	d7,(a6)
(1) 1108/     9B8 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1109/     9BA : 0807 0001           		btst	#bitDma,d7
(1) 1110/     9BE : 66F8                		bne.s	.dmaw
(1) 1111/     9C0 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1112/     9C4 : 3E02                		move.w	d2,d7			; SIZE
(1) 1113/     9C6 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1114/     9CC :                     ; 		lsr.w	#1,d7
(1) 1115/     9CC : 1C07                		move.b	d7,d6
(1) 1116/     9CE : 4846                		swap	d6
(1) 1117/     9D0 : E04F                		lsr.w	#8,d7
(1) 1118/     9D2 : 1C07                		move.b	d7,d6
(1) 1119/     9D4 : 4846                		swap	d6
(1) 1120/     9D6 : 2C86                		move.l	d6,(a6)
(1) 1121/     9D8 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1122/     9DE : 3E00                		move.w	d0,d7
(1) 1123/     9E0 : 1C07                		move.b	d7,d6
(1) 1124/     9E2 : 4846                		swap	d6
(1) 1125/     9E4 : E04F                		lsr.w	#8,d7
(1) 1126/     9E6 : 1C07                		move.b	d7,d6
(1) 1127/     9E8 : 2C86                		move.l	d6,(a6)
(1) 1128/     9EA : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1129/     9EE : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1130/     9F0 :                     ; 		lsl.w	#5,d7
(1) 1131/     9F0 : 3C07                		move.w	d7,d6
(1) 1132/     9F2 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1133/     9F6 : 0046 4000           		ori.w	#$4000,d6
(1) 1134/     9FA : 4846                		swap	d6
(1) 1135/     9FC : 3C07                		move.w	d7,d6
(1) 1136/     9FE : E04E                		lsr.w	#8,d6
(1) 1137/     A00 : EC4E                		lsr.w	#6,d6
(1) 1138/     A02 : 0246 0003           		andi.w	#%11,d6
(1) 1139/     A06 : 0046 00C0           		ori.w	#$C0,d6
(1) 1140/     A0A : 2C86                		move.l	d6,(a6)
(1) 1141/     A0C : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1142/     A10 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1143/     A12 : 0807 0001           		btst	#bitDma,d7
(1) 1144/     A16 : 66F8                		bne.s	.dmawe
(1) 1145/     A18 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1146/     A1C : 3E3C 8100           		move.w	#$8100,d7
(1) 1147/     A20 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1148/     A24 : 3C87                		move.w	d7,(a6)
(1) 1149/     A26 : 4E75                		rts
(1) 1150/     A28 :                     
(1) 1151/     A28 :                     ; --------------------------------------------------------
(1) 1152/     A28 :                     ; Load graphics using DMA, direct
(1) 1153/     A28 :                     ;
(1) 1154/     A28 :                     ; d0 | LONG - Art data
(1) 1155/     A28 :                     ; d1 | WORD - cell_vram(location)
(1) 1156/     A28 :                     ; d2 | WORD - Size
(1) 1157/     A28 :                     ;
(1) 1158/     A28 :                     ; Breaks:
(1) 1159/     A28 :                     ; d5-d7,a4-a6
(1) 1160/     A28 :                     ;
(1) 1161/     A28 :                     ; *** For faster transfers call this during VBlank ***
(1) 1162/     A28 :                     ; *** MAKE SURE SH2 IS NOT IN THE MIDDLE OF READING
(1) 1163/     A28 :                     ; ROM ***
(1) 1164/     A28 :                     ; --------------------------------------------------------
(1) 1165/     A28 :                     
(1) 1166/     A28 :                     Video_LoadArt:
(1) 1179/     A28 : 40E7                		move.w	sr,-(sp)
(1) 1180/     A2A : 007C 0700           		or	#$700,sr
(1) 1181/     A2E : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1182/     A34 : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1183/     A38 : 1C38 8A51           		move.b	(RAM_VdpRegs+1),d6
(1) 1184/     A3C : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1185/     A40 : 3886                		move.w	d6,(a4)
(1) 1186/     A42 : 3C02                		move.w	d2,d6			; Length
(1) 1187/     A44 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1188/     A4A : E24E                		lsr.w	#1,d6
(1) 1189/     A4C : 1A06                		move.b	d6,d5
(1) 1190/     A4E : 4845                		swap	d5
(1) 1191/     A50 : E04E                		lsr.w	#8,d6
(1) 1192/     A52 : 1A06                		move.b	d6,d5
(1) 1193/     A54 : 4845                		swap	d5
(1) 1194/     A56 : 2885                		move.l	d5,(a4)
(1) 1195/     A58 : 2C00                		move.l	d0,d6			; Source
(1) 1196/     A5A : E28E                  		lsr.l	#1,d6
(1) 1197/     A5C : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1198/     A62 : 1A06                 		move.b	d6,d5
(1) 1199/     A64 : E08E                 		lsr.l	#8,d6
(1) 1200/     A66 : 4845                 		swap	d5
(1) 1201/     A68 : 1A06                 		move.b	d6,d5
(1) 1202/     A6A : 2885                 		move.l	d5,(a4)
(1) 1203/     A6C : 3A3C 9700            		move.w	#$9700,d5
(1) 1204/     A70 : E08E                 		lsr.l	#8,d6
(1) 1205/     A72 : 1A06                 		move.b	d6,d5
(1) 1206/     A74 : 3885                 		move.w	d5,(a4)
(1) 1207/     A76 : 3C01                		move.w	d1,d6			; Destination
(1) 1208/     A78 : 3A06                		move.w	d6,d5
(1) 1209/     A7A : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1210/     A80 : 0046 4000           		ori.w	#$4000,d6
(1) 1211/     A84 : E04D                		lsr.w	#8,d5
(1) 1212/     A86 : EC4D                		lsr.w	#6,d5
(1) 1213/     A88 : 0245 0003           		andi.w	#%11,d5
(1) 1214/     A8C : 0045 0080           		ori.w	#$80,d5
(1) 1215/     A90 : 2E00                		move.l	d0,d7
(1) 1216/     A92 : 4847                		swap	d7
(1) 1217/     A94 : E04F                		lsr.w	#8,d7
(1) 1218/     A96 : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1219/     A9A : 671A                		beq.s	.from_ram
(1) 1220/     A9C : 6100 01A2           		bsr	System_DmaEnter_ROM
(1) 1221/     AA0 : 3F05                 		move.w	d5,-(sp)
(1) 1222/     AA2 : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1223/     AA4 : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1224/     AA6 : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1225/     AAA : 1C38 8A51           		move.b	(RAM_VdpRegs+1),d6
(1) 1226/     AAE : 3886                		move.w	d6,(a4)
(1) 1227/     AB0 : 46DF                		move.w	(sp)+,sr
(1) 1244/     AB2 : 6000 0190           		bra	System_DmaExit_ROM
(1) 1245/     AB6 :                     .from_ram:
(1) 1246/     AB6 : 3887                		move.w	d7,(a4)
(1) 1247/     AB8 : 3F05                 		move.w	d5,-(sp)
(1) 1248/     ABA : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1249/     ABC : 3E3C 8100           		move.w	#$8100,d7
(1) 1250/     AC0 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1251/     AC4 : 3887                		move.w	d7,(a4)
(1) 1252/     AC6 : 46DF                		move.w	(sp)+,sr
(1) 1253/     AC8 : 4E75                		rts
(1) 1254/     ACA :                     
(1) 1255/     ACA :                     ; --------------------------------------------------------
(1) 1256/     ACA :                     ; Video_DmaBlast
(1) 1257/     ACA :                     ;
(1) 1258/     ACA :                     ; Process DMA tasks from a predefined list in RAM
(1) 1259/     ACA :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1260/     ACA :                     ;
(1) 1261/     ACA :                     ; Breaks:
(1) 1262/     ACA :                     ; d5-d7,a3-a4
(1) 1263/     ACA :                     ; --------------------------------------------------------
(1) 1264/     ACA :                     
(1) 1265/     ACA :                     ; Entry format:
(1) 1266/     ACA :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1267/     ACA :                     ; $40000080 (vdp destination + dma bit)
(1) 1268/     ACA :                     
(1) 1269/     ACA :                     ; TODO: Add the SCD patch.
(1) 1270/     ACA :                     
(1) 1271/     ACA :                     Video_DmaBlast:
(1) 1272/     ACA : 4A78 8A3C           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1273/     ACE : 6656                		bne.s	.exit
(1) 1274/     AD0 : 4A78 8A3A           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1275/     AD4 : 6750                		beq.s	.exit
(1) 1276/     AD6 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1277/     ADC : 47F8 8070           		lea	(RAM_VdpDmaList).w,a3
(1) 1278/     AE0 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1279/     AE4 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1280/     AE8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1281/     AEC : 3887                		move.w	d7,(a4)
(1) 1282/     AEE : 6100 0150           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1286/     AF2 : 4A78 8A3A           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1287/     AF6 : 6720                		beq.s	.end
(1) 1288/     AF8 : 2893                		move.l	(a3),(a4)			; Size
(1) 1289/     AFA : 429B                		clr.l	(a3)+
(1) 1290/     AFC : 2893                		move.l	(a3),(a4)			; Source
(1) 1291/     AFE : 429B                		clr.l	(a3)+
(1) 1292/     B00 : 3893                		move.w	(a3),(a4)
(1) 1293/     B02 : 425B                		clr.w	(a3)+
(1) 1294/     B04 : 3C13                		move.w	(a3),d6				; Destination
(1) 1295/     B06 : 425B                		clr.w	(a3)+
(1) 1296/     B08 : 3A13                		move.w	(a3),d5
(1) 1297/     B0A : 425B                		clr.w	(a3)+
(1) 1298/     B0C : 3886                		move.w	d6,(a4)
(1) 1299/     B0E : 3885                		move.w	d5,(a4)
(1) 1300/     B10 : 0478 000E 8A3A      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1301/     B16 : 60DA                		bra.s	.next
(1) 1302/     B18 :                     .end:
(1) 1306/     B18 : 6100 012A           		bsr	System_DmaExit_ROM		; Resume Z80 and SH2 direct
(1) 1307/     B1C : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1308/     B20 : 1E38 8A51           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1309/     B24 : 3887                		move.w	d7,(a4)
(1) 1310/     B26 :                     .exit:
(1) 1311/     B26 : 4E75                		rts
(1) 1312/     B28 :                     
(1) 1313/     B28 :                     ; ; ====================================================================
(1) 1314/     B28 :                     ; ; ----------------------------------------------------------------
(1) 1315/     B28 :                     ; ; MAP layout system
(1) 1316/     B28 :                     ; ;
(1) 1317/     B28 :                     ; ; Note: uses some RAM'd video registers.
(1) 1318/     B28 :                     ; ; ----------------------------------------------------------------
(1) 1319/     B28 :                     ;
(1) 1320/     B28 :                     ; ; --------------------------------------------------------
(1) 1321/     B28 :                     ; ; MdMap_Init
(1) 1322/     B28 :                     ; ;
(1) 1323/     B28 :                     ; ; Initializes all BG buffers
(1) 1324/     B28 :                     ; ; --------------------------------------------------------
(1) 1325/     B28 :                     ;
(1) 1326/     B28 :                     ; MdMap_Init:
(1) 1327/     B28 :                     ; 		lea	(RAM_BgBuffer),a0
(1) 1328/     B28 :                     ; 		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1329/     B28 :                     ; 		moveq	#0,d0
(1) 1330/     B28 :                     ; .clr:
(1) 1331/     B28 :                     ; 		move.l	d0,(a0)+
(1) 1332/     B28 :                     ; 		dbf	d1,.clr
(1) 1333/     B28 :                     ; 		rts
(1) 1334/     B28 :                     ;
(1) 1335/     B28 :                     ; ; --------------------------------------------------------
(1) 1336/     B28 :                     ; ; MdMap_Set
(1) 1337/     B28 :                     ; ;
(1) 1338/     B28 :                     ; ; Sets a new scrolling section to use.
(1) 1339/     B28 :                     ; ;
(1) 1340/     B28 :                     ; ; **SET YOUR X and Y COORDS EXTERNALLY
(1) 1341/     B28 :                     ; ; BEFORE GETTING HERE**
(1) 1342/     B28 :                     ; ;
(1) 1343/     B28 :                     ; ; Input:
(1) 1344/     B28 :                     ; ; ** Genesis side **
(1) 1345/     B28 :                     ; ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1346/     B28 :                     ; ; d1 | WORD - VRAM location for map data
(1) 1347/     B28 :                     ; ; d2 | WORD - VRAM add + palette
(1) 1348/     B28 :                     ; ; a0 - Level header data:
(1) 1349/     B28 :                     ; ; 	dc.w width,height
(1) 1350/     B28 :                     ; ; 	dc.b blkwidth,blkheight
(1) 1351/     B28 :                     ; ; a1 - Block data
(1) 1352/     B28 :                     ; ; a2 - LOW priority layout data
(1) 1353/     B28 :                     ; ; a3 - HIGH priority layout data
(1) 1354/     B28 :                     ; ; d4 - Collision data
(1) 1355/     B28 :                     ; ;
(1) 1356/     B28 :                     ; ; Then load the graphics externally at the same
(1) 1357/     B28 :                     ; ; VRAM location set in d2
(1) 1358/     B28 :                     ; ;
(1) 1359/     B28 :                     ; ; ** 32X side **
(1) 1360/     B28 :                     ; ; d0 | WORD - Write as -1
(1) 1361/     B28 :                     ; ; d1 | WORD - Scroll buffer to use on the 32X side (0 - default)
(1) 1362/     B28 :                     ; ; d2 | WORD - Index-palette increment
(1) 1363/     B28 :                     ; ; a0 - Level header data: (68K AREA)
(1) 1364/     B28 :                     ; ; 	dc.w width,height
(1) 1365/     B28 :                     ; ; 	dc.b blkwidth,blkheight
(1) 1366/     B28 :                     ; ; a1 - Graphics data stored as blocks (SH2 AREA)
(1) 1367/     B28 :                     ; ; a2 - MAIN layout (SH2 AREA)
(1) 1368/     B28 :                     ; ; a3 - *** UNUSED, set to 0
(1) 1369/     B28 :                     ; ; a4 - Collision data (68K AREA)
(1) 1370/     B28 :                     ; ;
(1) 1371/     B28 :                     ; ; Uses:
(1) 1372/     B28 :                     ; ; d0,d6-d7
(1) 1373/     B28 :                     ; ; --------------------------------------------------------
(1) 1374/     B28 :                     ;
(1) 1375/     B28 :                     ; MdMap_Set:
(1) 1376/     B28 :                     ; 		tst.w	d0
(1) 1377/     B28 :                     ; 		bpl.s	.md_side
(1) 1378/     B28 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1379/     B28 :                     ; 		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1380/     B28 :                     ; 		bra.s	.mars_side
(1) 1381/     B28 :                     ; .md_side:
(1) 1382/     B28 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1383/     B28 :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1384/     B28 :                     ; 		adda	d0,a6
(1) 1385/     B28 :                     ; 		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1386/     B28 :                     ; .mars_side:
(1) 1387/     B28 :                     ; 		move.w	d1,md_bg_vpos(a6)
(1) 1388/     B28 :                     ; 		move.w	d2,md_bg_vram(a6)
(1) 1389/     B28 :                     ;
(1) 1390/     B28 :                     ; 		moveq	#0,d7
(1) 1391/     B28 :                     ; 		move.w	md_bg_x(a6),d7
(1) 1392/     B28 :                     ; 		move.b	d7,md_bg_xset(a6)
(1) 1393/     B28 :                     ; 		move.w	d7,md_bg_x_old(a6)
(1) 1394/     B28 :                     ; 		swap	d7
(1) 1395/     B28 :                     ; 		move.l	d7,md_bg_x(a6)
(1) 1396/     B28 :                     ; 		moveq	#0,d7
(1) 1397/     B28 :                     ; 		move.w	md_bg_y(a6),d7
(1) 1398/     B28 :                     ; 		move.b	d7,md_bg_yset(a6)
(1) 1399/     B28 :                     ; 		move.w	d7,md_bg_y_old(a6)
(1) 1400/     B28 :                     ; 		swap	d7
(1) 1401/     B28 :                     ; 		move.l	d7,md_bg_y(a6)
(1) 1402/     B28 :                     ; 		and.w	#$F,d3
(1) 1403/     B28 :                     ; 		and.w	#$F,d4
(1) 1404/     B28 :                     ;
(1) 1405/     B28 :                     ; 		swap	d3
(1) 1406/     B28 :                     ; 		swap	d4
(1) 1407/     B28 :                     ; 		move.l	a1,md_bg_blk(a6)
(1) 1408/     B28 :                     ; 		move.l	a2,md_bg_low(a6)
(1) 1409/     B28 :                     ; 		move.l	a3,md_bg_hi(a6)
(1) 1410/     B28 :                     ; 		move.l	a4,md_bg_col(a6)
(1) 1411/     B28 :                     ; 		move.l	a0,a5
(1) 1412/     B28 :                     ; 		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1413/     B28 :                     ; 		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1414/     B28 :                     ; 		move.b	(a5)+,d4	; BLOCK width
(1) 1415/     B28 :                     ; 		move.b	(a5)+,d3	; BLOCK height
(1) 1416/     B28 :                     ; 		and.w	#$FF,d4
(1) 1417/     B28 :                     ; 		and.w	#$FF,d3
(1) 1418/     B28 :                     ; 		move.w	d7,md_bg_w(a6)
(1) 1419/     B28 :                     ; 		move.w	d6,md_bg_h(a6)
(1) 1420/     B28 :                     ; 		move.b	d4,md_bg_bw(a6)
(1) 1421/     B28 :                     ; 		move.b	d3,md_bg_bh(a6)
(1) 1422/     B28 :                     ; 		mulu.w	d4,d7
(1) 1423/     B28 :                     ; 		mulu.w	d3,d6
(1) 1424/     B28 :                     ; 		move.w	d7,md_bg_wf(a6)
(1) 1425/     B28 :                     ; 		move.w	d6,md_bg_hf(a6)
(1) 1426/     B28 :                     ; 		sub.w	#1,d4
(1) 1427/     B28 :                     ; 		sub.w	#1,d3
(1) 1428/     B28 :                     ; 		and.b	d4,md_bg_xset(a6)
(1) 1429/     B28 :                     ; 		and.b	d3,md_bg_yset(a6)
(1) 1430/     B28 :                     ; 		swap	d3
(1) 1431/     B28 :                     ; 		swap	d4
(1) 1432/     B28 :                     ;
(1) 1433/     B28 :                     ; 	; TODO: improve this...
(1) 1434/     B28 :                     ; 		move.w	md_bg_x(a6),d3
(1) 1435/     B28 :                     ; 		move.w	md_bg_y(a6),d4
(1) 1436/     B28 :                     ; 	; X beams
(1) 1437/     B28 :                     ; .xl_l:		cmp.w	d7,d3
(1) 1438/     B28 :                     ; 		blt.s	.xl_g
(1) 1439/     B28 :                     ; 		sub.w	d7,d3
(1) 1440/     B28 :                     ; 		bra.s	.xl_l
(1) 1441/     B28 :                     ; .xl_g:
(1) 1442/     B28 :                     ; 		move.w	d3,md_bg_xinc_l(a6)
(1) 1443/     B28 :                     ; 		add.w	#320,d3				; <-- X resolution R
(1) 1444/     B28 :                     ; .xr_l:		cmp.w	d7,d3
(1) 1445/     B28 :                     ; 		blt.s	.xr_g
(1) 1446/     B28 :                     ; 		sub.w	d7,d3
(1) 1447/     B28 :                     ; 		bra.s	.xr_l
(1) 1448/     B28 :                     ; .xr_g:
(1) 1449/     B28 :                     ; 		move.w	d3,md_bg_xinc_r(a6)
(1) 1450/     B28 :                     ;
(1) 1451/     B28 :                     ; 	; Y beams
(1) 1452/     B28 :                     ; .yt_l:		cmp.w	d6,d4
(1) 1453/     B28 :                     ; 		blt.s	.yt_g
(1) 1454/     B28 :                     ; 		sub.w	d6,d4
(1) 1455/     B28 :                     ; 		bra.s	.yt_l
(1) 1456/     B28 :                     ; .yt_g:
(1) 1457/     B28 :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1458/     B28 :                     ; 		add.w	#224,d4				; <-- Y resolution B
(1) 1459/     B28 :                     ; .yb_l:		cmp.w	d6,d4
(1) 1460/     B28 :                     ; 		blt.s	.yb_g
(1) 1461/     B28 :                     ; 		sub.w	d6,d4
(1) 1462/     B28 :                     ; 		bra.s	.yb_l
(1) 1463/     B28 :                     ; .yb_g:
(1) 1464/     B28 :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1465/     B28 :                     ;
(1) 1466/     B28 :                     ; 		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1467/     B28 :                     ; 		rts
(1) 1468/     B28 :                     ;
(1) 1469/     B28 :                     ; ; --------------------------------------------------------
(1) 1470/     B28 :                     ; ; MdMap_Move
(1) 1471/     B28 :                     ; ;
(1) 1472/     B28 :                     ; ; Moves the current background/foreground
(1) 1473/     B28 :                     ; ; and checks for overflow.
(1) 1474/     B28 :                     ; ;
(1) 1475/     B28 :                     ; ; Input:
(1) 1476/     B28 :                     ; ; d0 | WORD - Background slot, if -1 32X's
(1) 1477/     B28 :                     ; ; d1 | WORD - Current X position
(1) 1478/     B28 :                     ; ; d2 | WORD - Current Y position
(1) 1479/     B28 :                     ; ; a0 - Background to move and check.
(1) 1480/     B28 :                     ; ;
(1) 1481/     B28 :                     ; ; Uses:
(1) 1482/     B28 :                     ; ; d6-d7
(1) 1483/     B28 :                     ; ; --------------------------------------------------------
(1) 1484/     B28 :                     ;
(1) 1485/     B28 :                     ; MdMap_Move:
(1) 1486/     B28 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1487/     B28 :                     ; 		tst.w	d0
(1) 1488/     B28 :                     ; 		bmi.s	.mars_side
(1) 1489/     B28 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1490/     B28 :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1491/     B28 :                     ; 		adda	d0,a6
(1) 1492/     B28 :                     ; .mars_side:
(1) 1493/     B28 :                     ; ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1494/     B28 :                     ; ; 		beq	.not_enabld
(1) 1495/     B28 :                     ; 		move.w	md_bg_wf(a6),d0
(1) 1496/     B28 :                     ; 		tst.w	d1
(1) 1497/     B28 :                     ; 		bpl.s	.x_left
(1) 1498/     B28 :                     ; 		clr.w	d1
(1) 1499/     B28 :                     ; .x_left:
(1) 1500/     B28 :                     ; 		sub.w	#320,d0
(1) 1501/     B28 :                     ; 		cmp.w	d0,d1
(1) 1502/     B28 :                     ; 		bcs.s	.x_right
(1) 1503/     B28 :                     ; 		move.w	d0,d1
(1) 1504/     B28 :                     ; .x_right:
(1) 1505/     B28 :                     ; 		move.w	md_bg_hf(a6),d0
(1) 1506/     B28 :                     ; 		tst.w	d2
(1) 1507/     B28 :                     ; 		bpl.s	.y_left
(1) 1508/     B28 :                     ; 		clr.w	d2
(1) 1509/     B28 :                     ; .y_left:
(1) 1510/     B28 :                     ; 		sub.w	#224,d0
(1) 1511/     B28 :                     ; 		cmp.w	d0,d2
(1) 1512/     B28 :                     ; 		bcs.s	.y_right
(1) 1513/     B28 :                     ; 		move.w	d0,d2
(1) 1514/     B28 :                     ; .y_right:
(1) 1515/     B28 :                     ; 		move.w	d1,md_bg_x(a6)
(1) 1516/     B28 :                     ; 		move.w	d2,md_bg_y(a6)
(1) 1517/     B28 :                     ; .not_enabld:
(1) 1518/     B28 :                     ; 		rts
(1) 1519/     B28 :                     ;
(1) 1520/     B28 :                     ; ; --------------------------------------------------------
(1) 1521/     B28 :                     ; ; MdMap_Update
(1) 1522/     B28 :                     ; ;
(1) 1523/     B28 :                     ; ; Updates backgrounds internally, call this
(1) 1524/     B28 :                     ; ; BEFORE going into VBlank.
(1) 1525/     B28 :                     ; ;
(1) 1526/     B28 :                     ; ; Then later call MdMap_DrawScrl on VBlank,
(1) 1527/     B28 :                     ; ; this also applies for the 32X as this routine also
(1) 1528/     B28 :                     ; ; resets the drawing bits.
(1) 1529/     B28 :                     ; ;
(1) 1530/     B28 :                     ; ; For the 32X:
(1) 1531/     B28 :                     ; ; Call System_MarsUpdate AFTER this.
(1) 1532/     B28 :                     ; ; --------------------------------------------------------
(1) 1533/     B28 :                     ;
(1) 1534/     B28 :                     ; MdMap_Update:
(1) 1535/     B28 :                     ; 	if MARS|MARSCD
(1) 1536/     B28 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1537/     B28 :                     ; 		bsr.s	.this_bg
(1) 1538/     B28 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1539/     B28 :                     ; 		bsr.s	.this_bg
(1) 1540/     B28 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1541/     B28 :                     ; .this_bg:
(1) 1542/     B28 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1543/     B28 :                     ; 		beq	.no_bg
(1) 1544/     B28 :                     ; 		moveq	#0,d1
(1) 1545/     B28 :                     ; 		moveq	#0,d2
(1) 1546/     B28 :                     ; 		move.w	md_bg_x(a6),d3
(1) 1547/     B28 :                     ; 		move.w	md_bg_x_old(a6),d0
(1) 1548/     B28 :                     ; 		cmp.w	d0,d3
(1) 1549/     B28 :                     ; 		beq.s	.xequ
(1) 1550/     B28 :                     ; 		move.w	d3,d1
(1) 1551/     B28 :                     ; 		sub.w	d0,d1
(1) 1552/     B28 :                     ; 		move.w	d3,md_bg_x_old(a6)
(1) 1553/     B28 :                     ; .xequ:
(1) 1554/     B28 :                     ; 		move.w	md_bg_y(a6),d3
(1) 1555/     B28 :                     ; 		move.w	md_bg_y_old(a6),d0
(1) 1556/     B28 :                     ; 		cmp.w	d0,d3
(1) 1557/     B28 :                     ; 		beq.s	.yequ
(1) 1558/     B28 :                     ; 		move.w	d3,d2
(1) 1559/     B28 :                     ; 		sub.w	d0,d2
(1) 1560/     B28 :                     ; 		move.w	d3,md_bg_y_old(a6)
(1) 1561/     B28 :                     ; .yequ:
(1) 1562/     B28 :                     ;
(1) 1563/     B28 :                     ; 	; Increment drawing beams
(1) 1564/     B28 :                     ; 		move.w	d1,d0
(1) 1565/     B28 :                     ; 		move.w	md_bg_wf(a6),d5
(1) 1566/     B28 :                     ; 		move.w	md_bg_xinc_l(a6),d4
(1) 1567/     B28 :                     ; 		bsr.s	.beam_incr
(1) 1568/     B28 :                     ; 		move.w	d4,md_bg_xinc_l(a6)
(1) 1569/     B28 :                     ; 		move.w	md_bg_xinc_r(a6),d4
(1) 1570/     B28 :                     ; 		bsr.s	.beam_incr
(1) 1571/     B28 :                     ; 		move.w	d4,md_bg_xinc_r(a6)
(1) 1572/     B28 :                     ; 		move.w	d2,d0
(1) 1573/     B28 :                     ; 		move.w	md_bg_hf(a6),d5
(1) 1574/     B28 :                     ; 		move.w	md_bg_yinc_u(a6),d4
(1) 1575/     B28 :                     ; 		bsr.s	.beam_incr
(1) 1576/     B28 :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1577/     B28 :                     ; 		move.w	md_bg_yinc_d(a6),d4
(1) 1578/     B28 :                     ; 		bsr.s	.beam_incr
(1) 1579/     B28 :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1580/     B28 :                     ;
(1) 1581/     B28 :                     ; 	; Update internal counters
(1) 1582/     B28 :                     ; 		moveq	#0,d3
(1) 1583/     B28 :                     ; 		move.b	md_bg_bw(a6),d3		; X set
(1) 1584/     B28 :                     ; 		move.b	md_bg_xset(a6),d0
(1) 1585/     B28 :                     ; 		add.b	d1,d0
(1) 1586/     B28 :                     ; 		move.b	d0,d4
(1) 1587/     B28 :                     ; 		and.w	d3,d4
(1) 1588/     B28 :                     ; 		beq.s	.x_k
(1) 1589/     B28 :                     ; 		moveq	#bitDrwR,d4
(1) 1590/     B28 :                     ; 		tst.w	d1
(1) 1591/     B28 :                     ; 		bpl.s	.x_r
(1) 1592/     B28 :                     ; 		moveq	#bitDrwL,d4
(1) 1593/     B28 :                     ; .x_r:
(1) 1594/     B28 :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1595/     B28 :                     ; .x_k:
(1) 1596/     B28 :                     ; 		sub.w	#1,d3
(1) 1597/     B28 :                     ; 		and.b	d3,d0
(1) 1598/     B28 :                     ; 		move.b	d0,md_bg_xset(a6)
(1) 1599/     B28 :                     ; 		move.b	md_bg_bh(a6),d3		; Y set
(1) 1600/     B28 :                     ; 		move.b	md_bg_yset(a6),d0
(1) 1601/     B28 :                     ; 		add.b	d2,d0
(1) 1602/     B28 :                     ; 		move.b	d0,d4
(1) 1603/     B28 :                     ; 		and.w	d3,d4
(1) 1604/     B28 :                     ; 		beq.s	.y_k
(1) 1605/     B28 :                     ; 		moveq	#bitDrwD,d4
(1) 1606/     B28 :                     ; 		tst.w	d2
(1) 1607/     B28 :                     ; 		bpl.s	.y_d
(1) 1608/     B28 :                     ; 		moveq	#bitDrwU,d4
(1) 1609/     B28 :                     ; .y_d:
(1) 1610/     B28 :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1611/     B28 :                     ; .y_k:
(1) 1612/     B28 :                     ; 		sub.w	#1,d3
(1) 1613/     B28 :                     ; 		and.b	d3,d0
(1) 1614/     B28 :                     ; 		move.b	d0,md_bg_yset(a6)
(1) 1615/     B28 :                     ; .no_bg:
(1) 1616/     B28 :                     ; 		rts
(1) 1617/     B28 :                     ;
(1) 1618/     B28 :                     ; ; d0 - Increment by
(1) 1619/     B28 :                     ; ; d4 - X/Y beam
(1) 1620/     B28 :                     ; ; d5 - Max Width/Height
(1) 1621/     B28 :                     ; .beam_incr:
(1) 1622/     B28 :                     ; 		add.w	d0,d4
(1) 1623/     B28 :                     ; .xd_l:		tst.w	d4
(1) 1624/     B28 :                     ; 		bpl.s	.xd_g
(1) 1625/     B28 :                     ; 		add.w	d5,d4
(1) 1626/     B28 :                     ; 		bra.s	.xd_l
(1) 1627/     B28 :                     ; .xd_g:		cmp.w	d5,d4
(1) 1628/     B28 :                     ; 		blt.s	.val_h
(1) 1629/     B28 :                     ; 		sub.w	d5,d4
(1) 1630/     B28 :                     ; 		bra.s	.xd_g
(1) 1631/     B28 :                     ; .val_h:
(1) 1632/     B28 :                     ; 	endif
(1) 1633/     B28 :                     ; 		rts
(1) 1634/     B28 :                     ;
(1) 1635/     B28 :                     ; ; --------------------------------------------------------
(1) 1636/     B28 :                     ; ; MdMap_DrawAll
(1) 1637/     B28 :                     ; ;
(1) 1638/     B28 :                     ; ; Call this only if DISPLAY is OFF or in VBlank
(1) 1639/     B28 :                     ; ;
(1) 1640/     B28 :                     ; ; Notes:
(1) 1641/     B28 :                     ; ; - Does NOT check for off-bounds blocks
(1) 1642/     B28 :                     ; ; - Blocks with ID $00 are skipped.
(1) 1643/     B28 :                     ; ; --------------------------------------------------------
(1) 1644/     B28 :                     ;
(1) 1645/     B28 :                     ; MdMap_DrawAll:
(1) 1646/     B28 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1647/     B28 :                     ; 		bsr	.this_bg
(1) 1648/     B28 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1649/     B28 :                     ; .this_bg:
(1) 1650/     B28 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1651/     B28 :                     ; 		beq	.no_bg
(1) 1652/     B28 :                     ; 		move.l	md_bg_blk(a6),a5
(1) 1653/     B28 :                     ; 		move.l	md_bg_low(a6),a4
(1) 1654/     B28 :                     ; 		move.l	md_bg_hi(a6),a3
(1) 1655/     B28 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1656/     B28 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1657/     B28 :                     ; 		move.b	md_bg_bw(a6),d2
(1) 1658/     B28 :                     ; 		move.b	md_bg_bh(a6),d3
(1) 1659/     B28 :                     ; 		move.w	md_bg_w(a6),d4
(1) 1660/     B28 :                     ; ; 		move.w	md_bg_wf(a6),d5
(1) 1661/     B28 :                     ; ; 		move.w	md_bg_hf(a6),d6
(1) 1662/     B28 :                     ;
(1) 1663/     B28 :                     ; 		moveq	#0,d6
(1) 1664/     B28 :                     ; 		move.w	d0,d6
(1) 1665/     B28 :                     ; 		and.w	#-$10,d6
(1) 1666/     B28 :                     ; 		lsr.w	#2,d6
(1) 1667/     B28 :                     ; 		and.w	#$7F,d6
(1) 1668/     B28 :                     ;
(1) 1669/     B28 :                     ; 		moveq	#0,d5
(1) 1670/     B28 :                     ; 		move.w	d1,d5
(1) 1671/     B28 :                     ; 		and.w	#-$10,d5
(1) 1672/     B28 :                     ; 		lsl.w	#4,d5
(1) 1673/     B28 :                     ; 		and.w	#$F00,d5
(1) 1674/     B28 :                     ;
(1) 1675/     B28 :                     ; 		add.w	d5,d6
(1) 1676/     B28 :                     ; 		add.w	md_bg_vpos(a6),d6
(1) 1677/     B28 :                     ; 		move.w	d6,d5
(1) 1678/     B28 :                     ; 		rol.w	#2,d6
(1) 1679/     B28 :                     ; 		and.w	#%11,d6
(1) 1680/     B28 :                     ; 		swap	d6
(1) 1681/     B28 :                     ; 		and.w	#$3FFF,d5
(1) 1682/     B28 :                     ; 		move.w	d5,d6			; d6 - VDP 2nd|1st writes
(1) 1683/     B28 :                     ;
(1) 1684/     B28 :                     ; 		and.w	#$FF,d2
(1) 1685/     B28 :                     ; 		muls.w	d2,d0
(1) 1686/     B28 :                     ; 		lsr.w	#8,d0
(1) 1687/     B28 :                     ; 		and.w	#$FF,d3
(1) 1688/     B28 :                     ; 		muls.w	d3,d1
(1) 1689/     B28 :                     ; 		lsr.w	#8,d1
(1) 1690/     B28 :                     ; 		muls.w	d4,d1
(1) 1691/     B28 :                     ; 		add.l	d1,d0
(1) 1692/     B28 :                     ; 		add.l	d0,a4
(1) 1693/     B28 :                     ; 		add.l	d0,a3
(1) 1694/     B28 :                     ; 		move.w	#$80,d1
(1) 1695/     B28 :                     ; 		move.w	d1,d3
(1) 1696/     B28 :                     ; 		swap	d1
(1) 1697/     B28 :                     ; 		sub.w	#1,d3
(1) 1698/     B28 :                     ; 		moveq	#0,d2
(1) 1699/     B28 :                     ; 		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1700/     B28 :                     ; 		swap	d3
(1) 1701/     B28 :                     ; 		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1702/     B28 :                     ; 		move.w	#$0FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1703/     B28 :                     ; 		swap	d4
(1) 1704/     B28 :                     ; 		move.w	#$100,d4
(1) 1705/     B28 :                     ; 		move.w	d5,d0
(1) 1706/     B28 :                     ; 		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1707/     B28 :                     ; 		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1708/     B28 :                     ; 		swap	d7
(1) 1709/     B28 :                     ; 		move.w	#(256/16)-1,d7
(1) 1710/     B28 :                     ;
(1) 1711/     B28 :                     ; 	; a6 - Current BG buffer
(1) 1712/     B28 :                     ; 	; a5 - Block-data base
(1) 1713/     B28 :                     ; 	; a4 - LOW layout data Y
(1) 1714/     B28 :                     ; 	; a3 - HI layout data Y
(1) 1715/     B28 :                     ; 	; a2 - a4 current
(1) 1716/     B28 :                     ; 	; a1 - a3 current
(1) 1717/     B28 :                     ; 	; a0 - Block-data read
(1) 1718/     B28 :                     ;
(1) 1719/     B28 :                     ; 	; d7 - X loop        | Y loop
(1) 1720/     B28 :                     ; 	; d6 - VDP 2nd Write | X/Y VDP pos + addr bits
(1) 1721/     B28 :                     ; 	; d5 - X loop-save   | X VDP current
(1) 1722/     B28 :                     ; 	; d4 - Y wrap        | Y next block pos
(1) 1723/     B28 :                     ; 	; d3 - X wrap        | X next block pos
(1) 1724/     B28 :                     ; 	; d2 - Y block size  | VRAM-cell base
(1) 1725/     B28 :                     ; 	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1726/     B28 :                     ; 	; d0 -    ---        | ---
(1) 1727/     B28 :                     ;
(1) 1728/     B28 :                     ; .y_loop:
(1) 1729/     B28 :                     ; 		swap	d7
(1) 1730/     B28 :                     ; 		move.l	a4,a2		; a2 - LOW line
(1) 1731/     B28 :                     ; 		move.l	a3,a1		; a1 - HI line
(1) 1732/     B28 :                     ; 		move.w	d7,d5
(1) 1733/     B28 :                     ; .x_loop:
(1) 1734/     B28 :                     ; 		swap	d5
(1) 1735/     B28 :                     ; 		move.w	d2,d1
(1) 1736/     B28 :                     ; 		move.b	(a2),d0		; HI block?
(1) 1737/     B28 :                     ; 		bne.s	.got_blk
(1) 1738/     B28 :                     ; 		add.w	#$8000,d1
(1) 1739/     B28 :                     ; 		move.b	(a1),d0
(1) 1740/     B28 :                     ; 		beq.s	.blank
(1) 1741/     B28 :                     ; .got_blk:
(1) 1742/     B28 :                     ; 		bsr	.mk_block
(1) 1743/     B28 :                     ; .blank:
(1) 1744/     B28 :                     ; 		move.l	d3,d0
(1) 1745/     B28 :                     ; 		swap	d0
(1) 1746/     B28 :                     ; 		add.w	d3,d5		; next VDP X pos
(1) 1747/     B28 :                     ; 		and.w	d0,d5
(1) 1748/     B28 :                     ; 		adda	#1,a2
(1) 1749/     B28 :                     ; 		adda	#1,a1
(1) 1750/     B28 :                     ; 		swap	d5
(1) 1751/     B28 :                     ; 		dbf	d5,.x_loop
(1) 1752/     B28 :                     ;
(1) 1753/     B28 :                     ; 		move.w	d6,d0
(1) 1754/     B28 :                     ; 		and.w	#$3000,d0
(1) 1755/     B28 :                     ; 		add.w	d4,d6		; <-- next VDP Y block
(1) 1756/     B28 :                     ; 		swap	d4
(1) 1757/     B28 :                     ; 		and.w	d4,d6
(1) 1758/     B28 :                     ; 		or.w	d0,d6
(1) 1759/     B28 :                     ; 		swap	d4
(1) 1760/     B28 :                     ;
(1) 1761/     B28 :                     ; 		move.w	md_bg_w(a6),d0 ; ***
(1) 1762/     B28 :                     ; 		adda	d0,a4
(1) 1763/     B28 :                     ; 		adda	d0,a3
(1) 1764/     B28 :                     ; 		swap	d7
(1) 1765/     B28 :                     ; 		dbf	d7,.y_loop
(1) 1766/     B28 :                     ; .no_bg:
(1) 1767/     B28 :                     ; 		rts
(1) 1768/     B28 :                     ;
(1) 1769/     B28 :                     ; ; barely got free regs without using stack
(1) 1770/     B28 :                     ; .mk_block:
(1) 1771/     B28 :                     ; 		swap	d2
(1) 1772/     B28 :                     ; 		move.l	a5,a0
(1) 1773/     B28 :                     ; 		and.w	#$FF,d0
(1) 1774/     B28 :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1775/     B28 :                     ; 		adda	d0,a0		; a0 - cell word data
(1) 1776/     B28 :                     ; 		move.w	d6,d0
(1) 1777/     B28 :                     ; 		add.w	d5,d0
(1) 1778/     B28 :                     ; 		or.w	#$4000,d0
(1) 1779/     B28 :                     ; 		swap	d6
(1) 1780/     B28 :                     ;
(1) 1781/     B28 :                     ; 	; d0 - topleft VDP write | $4000
(1) 1782/     B28 :                     ; 	; d6 - right VDP write
(1) 1783/     B28 :                     ; 	; d2 is free
(1) 1784/     B28 :                     ; 	;
(1) 1785/     B28 :                     ; 	; currently working: 16x16
(1) 1786/     B28 :                     ; 		bsr.s	.drwy_16	; 1-
(1) 1787/     B28 :                     ; 		add.w	#2,d0		; 2-
(1) 1788/     B28 :                     ; 		bsr.s	.drwy_16	; -3
(1) 1789/     B28 :                     ; 					; -4
(1) 1790/     B28 :                     ; 		swap	d6
(1) 1791/     B28 :                     ; 		swap	d2
(1) 1792/     B28 :                     ; 		rts
(1) 1793/     B28 :                     ;
(1) 1794/     B28 :                     ; ; d0 - left vdp
(1) 1795/     B28 :                     ; ; d6 - right vdp
(1) 1796/     B28 :                     ; .drwy_16:
(1) 1797/     B28 :                     ; 		move.w	d0,d2
(1) 1798/     B28 :                     ; 		swap	d0
(1) 1799/     B28 :                     ; 		move.w	(a0)+,d0
(1) 1800/     B28 :                     ; 		add.w	d1,d0
(1) 1801/     B28 :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1802/     B28 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1803/     B28 :                     ; 		move.w	d0,(vdp_data).l
(1) 1804/     B28 :                     ; 		swap	d1
(1) 1805/     B28 :                     ; 		add.w	d1,d2		; Next line
(1) 1806/     B28 :                     ; 		swap	d1
(1) 1807/     B28 :                     ; 		move.w	(a0)+,d0
(1) 1808/     B28 :                     ; 		add.w	d1,d0
(1) 1809/     B28 :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1810/     B28 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1811/     B28 :                     ; 		move.w	d0,(vdp_data).l
(1) 1812/     B28 :                     ; 		swap	d0
(1) 1813/     B28 :                     ; 		rts
(1) 1814/     B28 :                     ;
(1) 1815/     B28 :                     ; 	; Block: 16x16 as 13
(1) 1816/     B28 :                     ; 	;                 24
(1) 1817/     B28 :                     ; 	; d0 - block ID
(1) 1818/     B28 :                     ; 	; d1 - VRAM-add base
(1) 1819/     B28 :                     ; 	; d6 - VDP out R | VDP out L
(1) 1820/     B28 :                     ; ; 		and.w	#$FF,d0
(1) 1821/     B28 :                     ; ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1822/     B28 :                     ; ; 		move.l	(a5,d0.w),d2
(1) 1823/     B28 :                     ; ; 		add.l	d1,d2
(1) 1824/     B28 :                     ; ; 		swap	d2
(1) 1825/     B28 :                     ; ; 		move.l	4(a5,d0.w),d3
(1) 1826/     B28 :                     ; ; 		add.l	d1,d3
(1) 1827/     B28 :                     ; ; 		swap	d3
(1) 1828/     B28 :                     ; ; 		move.w	d6,d0
(1) 1829/     B28 :                     ; ; 		swap	d5
(1) 1830/     B28 :                     ; ; 		add.w	d5,d0
(1) 1831/     B28 :                     ; ; 		or.w	#$4000,d0
(1) 1832/     B28 :                     ; ; 		swap	d5
(1) 1833/     B28 :                     ; ; 		move.l	a0,d1
(1) 1834/     B28 :                     ; ; 		and.w	d1,d5
(1) 1835/     B28 :                     ; ; 		add.w	d5,d0
(1) 1836/     B28 :                     ; ; 		swap	d6
(1) 1837/     B28 :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1838/     B28 :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1839/     B28 :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1840/     B28 :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1841/     B28 :                     ; ; 		swap	d2
(1) 1842/     B28 :                     ; ; 		swap	d3
(1) 1843/     B28 :                     ; ; 		add.w	#$80,d0		; line add
(1) 1844/     B28 :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1845/     B28 :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1846/     B28 :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1847/     B28 :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1848/     B28 :                     ; ; 		swap	d6
(1) 1849/     B28 :                     ; ; 		rts
(1) 1850/     B28 :                     ;
(1) 1851/     B28 :                     ; ; --------------------------------------------------------
(1) 1852/     B28 :                     ; ; MdMap_DrawScrlMd
(1) 1853/     B28 :                     ; ;
(1) 1854/     B28 :                     ; ; Draws map off-screen changes, only on Genesis-side.
(1) 1855/     B28 :                     ; ;
(1) 1856/     B28 :                     ; ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 1857/     B28 :                     ; ; --------------------------------------------------------
(1) 1858/     B28 :                     ;
(1) 1859/     B28 :                     ; MdMap_DrawScrlMd:
(1) 1860/     B28 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1861/     B28 :                     ; 		lea	(vdp_data),a5
(1) 1862/     B28 :                     ; 		bsr.s	.this_bg
(1) 1863/     B28 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1864/     B28 :                     ; 	; SH2-side handles the
(1) 1865/     B28 :                     ; 	; RAM_BgBufferM's drawing
(1) 1866/     B28 :                     ;
(1) 1867/     B28 :                     ; .this_bg:
(1) 1868/     B28 :                     ; 		move.b	md_bg_flags(a6),d7
(1) 1869/     B28 :                     ; 		btst	#bitBgOn,d7
(1) 1870/     B28 :                     ; 		beq	.no_bg
(1) 1871/     B28 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1872/     B28 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1873/     B28 :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1874/     B28 :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1875/     B28 :                     ; 		bclr	#bitDrwU,d7
(1) 1876/     B28 :                     ; 		beq.s	.no_u
(1) 1877/     B28 :                     ; 		bsr	.mk_row
(1) 1878/     B28 :                     ; .no_u:
(1) 1879/     B28 :                     ; 		bclr	#bitDrwD,d7
(1) 1880/     B28 :                     ; 		beq.s	.no_d
(1) 1881/     B28 :                     ; 		move.w	md_bg_yinc_d(a6),d3
(1) 1882/     B28 :                     ; 		add.w	#224,d1			; X add
(1) 1883/     B28 :                     ; 		bsr	.mk_row
(1) 1884/     B28 :                     ; .no_d:
(1) 1885/     B28 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1886/     B28 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1887/     B28 :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1888/     B28 :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1889/     B28 :                     ; 		bclr	#bitDrwL,d7
(1) 1890/     B28 :                     ; 		beq.s	.no_l
(1) 1891/     B28 :                     ; 		bsr.s	.mk_clmn
(1) 1892/     B28 :                     ; .no_l:
(1) 1893/     B28 :                     ; 		bclr	#bitDrwR,d7
(1) 1894/     B28 :                     ; 		beq.s	.no_r
(1) 1895/     B28 :                     ; 		move.w	md_bg_xinc_r(a6),d2
(1) 1896/     B28 :                     ; 		add.w	#320,d0			; X add
(1) 1897/     B28 :                     ; 		bsr.s	.mk_clmn
(1) 1898/     B28 :                     ; .no_r:
(1) 1899/     B28 :                     ;
(1) 1900/     B28 :                     ; 		move.b	d7,md_bg_flags(a6)
(1) 1901/     B28 :                     ; .no_bg:
(1) 1902/     B28 :                     ; 		rts
(1) 1903/     B28 :                     ;
(1) 1904/     B28 :                     ; ; ------------------------------------------------
(1) 1905/     B28 :                     ; ; Make column
(1) 1906/     B28 :                     ; ; d0 - X
(1) 1907/     B28 :                     ; ; d1 - Y
(1) 1908/     B28 :                     ; ; d2 - X increment
(1) 1909/     B28 :                     ; ; d3 - Y increment
(1) 1910/     B28 :                     ; ; ------------------------------------------------
(1) 1911/     B28 :                     ;
(1) 1912/     B28 :                     ; .mk_clmn:
(1) 1913/     B28 :                     ; ; 		btst	#bitMarsBg,d7
(1) 1914/     B28 :                     ; ; 		bne	.mars_ret_c
(1) 1915/     B28 :                     ; 		swap	d7
(1) 1916/     B28 :                     ; 		bsr	.get_coords
(1) 1917/     B28 :                     ; 		swap	d0
(1) 1918/     B28 :                     ; 		move.w	d4,d0
(1) 1919/     B28 :                     ; 		swap	d0
(1) 1920/     B28 :                     ; 		move.w	#$FFF,d3
(1) 1921/     B28 :                     ; 		swap	d3
(1) 1922/     B28 :                     ; 		move.w	#$100,d3
(1) 1923/     B28 :                     ;
(1) 1924/     B28 :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 1925/     B28 :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 1926/     B28 :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 1927/     B28 :                     ; 	; d3 -    Y wrap | Y add
(1) 1928/     B28 :                     ; 	; d4 -         *****
(1) 1929/     B28 :                     ; 	; d5 -         *****
(1) 1930/     B28 :                     ; 	; d6 -         *****
(1) 1931/     B28 :                     ; 	; d7 - lastflags | loop blocks
(1) 1932/     B28 :                     ;
(1) 1933/     B28 :                     ; 		move.w	#(256/16)-1,d7
(1) 1934/     B28 :                     ; .y_blk:
(1) 1935/     B28 :                     ; 		moveq	#0,d4
(1) 1936/     B28 :                     ; 		moveq	#0,d5
(1) 1937/     B28 :                     ; 		move.b	(a3),d6
(1) 1938/     B28 :                     ; 		bne.s	.vld
(1) 1939/     B28 :                     ; 		move.b	(a2),d6
(1) 1940/     B28 :                     ; 		bne.s	.prio
(1) 1941/     B28 :                     ; .blnk:
(1) 1942/     B28 :                     ; 		moveq	#0,d4
(1) 1943/     B28 :                     ; 		moveq	#0,d5
(1) 1944/     B28 :                     ; 		bra.s	.frce
(1) 1945/     B28 :                     ; .prio:
(1) 1946/     B28 :                     ; 		move.l	#$80008000,d4
(1) 1947/     B28 :                     ; 		move.l	#$80008000,d5
(1) 1948/     B28 :                     ; .vld:
(1) 1949/     B28 :                     ; 		move.l	a4,a0
(1) 1950/     B28 :                     ; 		and.w	#$FF,d6
(1) 1951/     B28 :                     ; 		lsl.w	#3,d6
(1) 1952/     B28 :                     ; 		adda	d6,a0
(1) 1953/     B28 :                     ; 		swap	d2
(1) 1954/     B28 :                     ; 		add.w	(a0)+,d4
(1) 1955/     B28 :                     ; 		add.w	(a0)+,d5
(1) 1956/     B28 :                     ; 		add.w	d2,d4
(1) 1957/     B28 :                     ; 		add.w	d2,d5
(1) 1958/     B28 :                     ; 		swap	d4
(1) 1959/     B28 :                     ; 		swap	d5
(1) 1960/     B28 :                     ; 		add.w	(a0)+,d4
(1) 1961/     B28 :                     ; 		add.w	(a0)+,d5
(1) 1962/     B28 :                     ; 		add.w	d2,d4
(1) 1963/     B28 :                     ; 		add.w	d2,d5
(1) 1964/     B28 :                     ; 		swap	d2
(1) 1965/     B28 :                     ; .frce:
(1) 1966/     B28 :                     ; 		move.w	d0,d6
(1) 1967/     B28 :                     ; 		add.w	d1,d6
(1) 1968/     B28 :                     ; 		or.w	#$4000,d6
(1) 1969/     B28 :                     ; 		move.w	d6,4(a5)
(1) 1970/     B28 :                     ; 		move.w	d2,4(a5)
(1) 1971/     B28 :                     ; 		move.l	d4,(a5)
(1) 1972/     B28 :                     ; 		add.w	#$80,d6
(1) 1973/     B28 :                     ; 		move.w	d6,4(a5)
(1) 1974/     B28 :                     ; 		move.w	d2,4(a5)
(1) 1975/     B28 :                     ; 		move.l	d5,(a5)
(1) 1976/     B28 :                     ; 		move.l	d3,d4		; Next Y block
(1) 1977/     B28 :                     ; 		swap	d4
(1) 1978/     B28 :                     ; 		add.w	d3,d0
(1) 1979/     B28 :                     ; 		and.w	d4,d0
(1) 1980/     B28 :                     ; 		move.w	md_bg_w(a6),d6
(1) 1981/     B28 :                     ; 		adda	d6,a3
(1) 1982/     B28 :                     ; 		adda	d6,a2
(1) 1983/     B28 :                     ; 		swap	d1		; <-- TODO: improve this later.
(1) 1984/     B28 :                     ; 		add.w	#$10,d1
(1) 1985/     B28 :                     ; 		cmp.w	md_bg_hf(a6),d1
(1) 1986/     B28 :                     ; 		blt.s	.y_low
(1) 1987/     B28 :                     ; 		swap	d0
(1) 1988/     B28 :                     ; 		clr.w	d1
(1) 1989/     B28 :                     ; 		move.l	md_bg_low(a6),a3
(1) 1990/     B28 :                     ; 		move.l	md_bg_hi(a6),a2
(1) 1991/     B28 :                     ; 		adda	d0,a2
(1) 1992/     B28 :                     ; 		adda	d0,a3
(1) 1993/     B28 :                     ; 		swap	d0
(1) 1994/     B28 :                     ; .y_low:
(1) 1995/     B28 :                     ; 		swap	d1
(1) 1996/     B28 :                     ;
(1) 1997/     B28 :                     ; 		dbf	d7,.y_blk
(1) 1998/     B28 :                     ; 		swap	d7
(1) 1999/     B28 :                     ; .mars_ret_c:
(1) 2000/     B28 :                     ; 		rts
(1) 2001/     B28 :                     ;
(1) 2002/     B28 :                     ; ; ------------------------------------------------
(1) 2003/     B28 :                     ; ; Make row
(1) 2004/     B28 :                     ; ; d0 - X
(1) 2005/     B28 :                     ; ; d1 - Y
(1) 2006/     B28 :                     ; ; d2 - X increment
(1) 2007/     B28 :                     ; ; d3 - Y increment
(1) 2008/     B28 :                     ; ; ------------------------------------------------
(1) 2009/     B28 :                     ;
(1) 2010/     B28 :                     ; .mk_row:
(1) 2011/     B28 :                     ; ; 		btst	#bitMarsBg,d7
(1) 2012/     B28 :                     ; ; 		bne.s	.mars_ret_c
(1) 2013/     B28 :                     ; 		swap	d7
(1) 2014/     B28 :                     ; 		bsr	.get_coords
(1) 2015/     B28 :                     ; 		swap	d1
(1) 2016/     B28 :                     ; 		move.w	d5,d1
(1) 2017/     B28 :                     ; 		swap	d1
(1) 2018/     B28 :                     ; 		move.w	#$7F,d3
(1) 2019/     B28 :                     ; 		swap	d3
(1) 2020/     B28 :                     ; 		move.w	#4,d3
(1) 2021/     B28 :                     ;
(1) 2022/     B28 :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 2023/     B28 :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 2024/     B28 :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 2025/     B28 :                     ; 	; d3 -    X wrap | X add
(1) 2026/     B28 :                     ; 	; d4 -         *****
(1) 2027/     B28 :                     ; 	; d5 -         *****
(1) 2028/     B28 :                     ; 	; d6 - loopflags | *****
(1) 2029/     B28 :                     ; 	; d7 - lastflags | loop blocks
(1) 2030/     B28 :                     ;
(1) 2031/     B28 :                     ; 		move.w	d0,d6
(1) 2032/     B28 :                     ; 		and.w	#-$100,d6	; Merge d1
(1) 2033/     B28 :                     ; 		add.w	d6,d1
(1) 2034/     B28 :                     ; 		move.l	d3,d5
(1) 2035/     B28 :                     ; 		swap	d5
(1) 2036/     B28 :                     ; 		and.w	d5,d0
(1) 2037/     B28 :                     ; 		move.w	#((320+16)/16)-1,d7
(1) 2038/     B28 :                     ; .x_blk:
(1) 2039/     B28 :                     ; 		moveq	#0,d4
(1) 2040/     B28 :                     ; 		moveq	#0,d5
(1) 2041/     B28 :                     ; 		move.b	(a3),d6
(1) 2042/     B28 :                     ; 		bne.s	.xvld
(1) 2043/     B28 :                     ; 		move.b	(a2),d6
(1) 2044/     B28 :                     ; 		bne.s	.xprio
(1) 2045/     B28 :                     ; .xblnk:
(1) 2046/     B28 :                     ; 		moveq	#0,d4
(1) 2047/     B28 :                     ; 		moveq	#0,d5
(1) 2048/     B28 :                     ; 		bra.s	.xfrce
(1) 2049/     B28 :                     ; .xprio:
(1) 2050/     B28 :                     ; 		move.l	#$80008000,d4
(1) 2051/     B28 :                     ; 		move.l	#$80008000,d5
(1) 2052/     B28 :                     ; .xvld:
(1) 2053/     B28 :                     ; 		move.l	a4,a0
(1) 2054/     B28 :                     ; 		and.w	#$FF,d6
(1) 2055/     B28 :                     ; 		lsl.w	#3,d6
(1) 2056/     B28 :                     ; 		adda	d6,a0
(1) 2057/     B28 :                     ; 		swap	d2
(1) 2058/     B28 :                     ; 		add.w	(a0)+,d4
(1) 2059/     B28 :                     ; 		add.w	(a0)+,d5
(1) 2060/     B28 :                     ; 		add.w	d2,d4
(1) 2061/     B28 :                     ; 		add.w	d2,d5
(1) 2062/     B28 :                     ; 		swap	d4
(1) 2063/     B28 :                     ; 		swap	d5
(1) 2064/     B28 :                     ; 		add.w	(a0)+,d4
(1) 2065/     B28 :                     ; 		add.w	(a0)+,d5
(1) 2066/     B28 :                     ; 		add.w	d2,d4
(1) 2067/     B28 :                     ; 		add.w	d2,d5
(1) 2068/     B28 :                     ; 		swap	d2
(1) 2069/     B28 :                     ; .xfrce:
(1) 2070/     B28 :                     ; 		move.w	d0,d6
(1) 2071/     B28 :                     ; 		add.w	d1,d6
(1) 2072/     B28 :                     ; 		or.w	#$4000,d6
(1) 2073/     B28 :                     ; 		move.w	d6,4(a5)
(1) 2074/     B28 :                     ; 		move.w	d2,4(a5)
(1) 2075/     B28 :                     ; 		move.l	d4,(a5)
(1) 2076/     B28 :                     ; 		add.w	#$80,d6
(1) 2077/     B28 :                     ; 		move.w	d6,4(a5)
(1) 2078/     B28 :                     ; 		move.w	d2,4(a5)
(1) 2079/     B28 :                     ; 		move.l	d5,(a5)
(1) 2080/     B28 :                     ; 		add.w	d3,d0
(1) 2081/     B28 :                     ; 		swap	d3
(1) 2082/     B28 :                     ; 		and.w	d3,d0
(1) 2083/     B28 :                     ; 		swap	d3
(1) 2084/     B28 :                     ;
(1) 2085/     B28 :                     ; 	; X wrap
(1) 2086/     B28 :                     ; 		swap	d0
(1) 2087/     B28 :                     ; 		add.w	#$10,d0
(1) 2088/     B28 :                     ; 		cmp.w	md_bg_wf(a6),d0
(1) 2089/     B28 :                     ; 		blt.s	.x_low
(1) 2090/     B28 :                     ; 		sub.w	md_bg_wf(a6),d0
(1) 2091/     B28 :                     ; 		moveq	#0,d4
(1) 2092/     B28 :                     ; 		move.w	md_bg_w(a6),d4
(1) 2093/     B28 :                     ; 		sub.l	d4,a2
(1) 2094/     B28 :                     ; 		sub.l	d4,a3
(1) 2095/     B28 :                     ; .x_low:
(1) 2096/     B28 :                     ; 		adda	#1,a3
(1) 2097/     B28 :                     ; 		adda	#1,a2
(1) 2098/     B28 :                     ; .x_new:
(1) 2099/     B28 :                     ; 		swap	d0
(1) 2100/     B28 :                     ;
(1) 2101/     B28 :                     ; 		dbf	d7,.x_blk
(1) 2102/     B28 :                     ; 		swap	d7
(1) 2103/     B28 :                     ; 		rts
(1) 2104/     B28 :                     ;
(1) 2105/     B28 :                     ; ; ------------------------------------------------
(1) 2106/     B28 :                     ; ; Input
(1) 2107/     B28 :                     ; ; d0 - X position
(1) 2108/     B28 :                     ; ; d1 - Y position
(1) 2109/     B28 :                     ; ; d2 - X increment beam
(1) 2110/     B28 :                     ; ; d3 - Y increment beam
(1) 2111/     B28 :                     ; ;
(1) 2112/     B28 :                     ; ; Out:
(1) 2113/     B28 :                     ; ; d4 - X LEFT increment
(1) 2114/     B28 :                     ; ; d5 - Y TOP increment
(1) 2115/     B28 :                     ;
(1) 2116/     B28 :                     ; .get_coords:
(1) 2117/     B28 :                     ; 		move.l	md_bg_blk(a6),a4
(1) 2118/     B28 :                     ; 		move.l	md_bg_low(a6),a3
(1) 2119/     B28 :                     ; 		move.l	md_bg_hi(a6),a2
(1) 2120/     B28 :                     ; 		and.w	#-$10,d0		; block X/Y limit
(1) 2121/     B28 :                     ; 		and.w	#-$10,d1
(1) 2122/     B28 :                     ; 		and.w	#-$10,d2
(1) 2123/     B28 :                     ; 		and.w	#-$10,d3
(1) 2124/     B28 :                     ; 		swap	d0
(1) 2125/     B28 :                     ; 		swap	d1
(1) 2126/     B28 :                     ; 		move.w	d2,d0
(1) 2127/     B28 :                     ; 		move.w	d3,d1
(1) 2128/     B28 :                     ; 		swap	d0
(1) 2129/     B28 :                     ; 		swap	d1
(1) 2130/     B28 :                     ;
(1) 2131/     B28 :                     ; 		moveq	#0,d4
(1) 2132/     B28 :                     ; 		moveq	#0,d5
(1) 2133/     B28 :                     ; 		move.b	md_bg_bw(a6),d6
(1) 2134/     B28 :                     ; 		move.b	md_bg_bh(a6),d7
(1) 2135/     B28 :                     ; 		and.w	#$FF,d6
(1) 2136/     B28 :                     ; 		and.w	#$FF,d7
(1) 2137/     B28 :                     ;
(1) 2138/     B28 :                     ; 		move.w	d2,d4
(1) 2139/     B28 :                     ; 		muls.w	d6,d4
(1) 2140/     B28 :                     ; 		asr.w	#8,d4
(1) 2141/     B28 :                     ; 		move.w	d3,d5
(1) 2142/     B28 :                     ; 		muls.w	d7,d5
(1) 2143/     B28 :                     ; 		asr.w	#8,d5
(1) 2144/     B28 :                     ; 		muls.w	md_bg_w(a6),d5
(1) 2145/     B28 :                     ; 		moveq	#0,d3
(1) 2146/     B28 :                     ; 		move.l	d4,d3
(1) 2147/     B28 :                     ; 		add.l	d5,d3
(1) 2148/     B28 :                     ; 		add.l	d3,a3
(1) 2149/     B28 :                     ; 		add.l	d3,a2
(1) 2150/     B28 :                     ;
(1) 2151/     B28 :                     ; 		move.w	md_bg_vram(a6),d2
(1) 2152/     B28 :                     ; 		swap	d2
(1) 2153/     B28 :                     ; 		lsr.w	#2,d1			; Y >> 2
(1) 2154/     B28 :                     ; 		lsl.w	#6,d1			; Y * $40
(1) 2155/     B28 :                     ; 		lsr.w	#2,d0			; X >> 2
(1) 2156/     B28 :                     ; 		and.w	#$FFF,d1
(1) 2157/     B28 :                     ; 		and.w	#$7C,d0
(1) 2158/     B28 :                     ; 		add.w	d1,d0
(1) 2159/     B28 :                     ; 		move.w	md_bg_vpos(a6),d1
(1) 2160/     B28 :                     ; 		move.w	d1,d2
(1) 2161/     B28 :                     ; 		and.w	#$3FFF,d1
(1) 2162/     B28 :                     ; 		rol.w	#2,d2
(1) 2163/     B28 :                     ; 		and.w	#%11,d2
(1) 2164/     B28 :                     ; 		rts
(1) 2165/     B28 :                     ;
(1) 2166/     B28 :                     ; ; ====================================================================
(1) 2167/     B28 :                     ; ; ----------------------------------------------------------------
(1) 2168/     B28 :                     ; ; Objects system
(1) 2169/     B28 :                     ; ;
(1) 2170/     B28 :                     ; ; MD and MARS
(1) 2171/     B28 :                     ; ; ----------------------------------------------------------------
(1) 2172/     B28 :                     ;
(1) 2173/     B28 :                     ; ; --------------------------------------------------------
(1) 2174/     B28 :                     ; ; Init objects
(1) 2175/     B28 :                     ; ; --------------------------------------------------------
(1) 2176/     B28 :                     ;
(1) 2177/     B28 :                     ; Objects_Init:
(1) 2178/     B28 :                     ; 		lea	(RAM_Objects),a6
(1) 2179/     B28 :                     ; 		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 2180/     B28 :                     ; .clr:
(1) 2181/     B28 :                     ; 		clr.b	(a6)+
(1) 2182/     B28 :                     ; 		dbf	d7,.clr
(1) 2183/     B28 :                     ; 		lea	(RAM_ObjDispList),a6
(1) 2184/     B28 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2185/     B28 :                     ; .clr_d:
(1) 2186/     B28 :                     ; 		clr.w	(a6)+
(1) 2187/     B28 :                     ; 		dbf	d7,.clr_d
(1) 2188/     B28 :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2189/     B28 :                     ; 		rts
(1) 2190/     B28 :                     ;
(1) 2191/     B28 :                     ; ; --------------------------------------------------------
(1) 2192/     B28 :                     ; ; Process objects
(1) 2193/     B28 :                     ; ; --------------------------------------------------------
(1) 2194/     B28 :                     ;
(1) 2195/     B28 :                     ; Objects_Run:
(1) 2196/     B28 :                     ; 		lea	(RAM_Objects),a6
(1) 2197/     B28 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2198/     B28 :                     ; .next_one:
(1) 2199/     B28 :                     ; 		move.l	obj_code(a6),d6
(1) 2200/     B28 :                     ; 		beq.s	.no_code	; Free slot
(1) 2201/     B28 :                     ; 		move.l	d7,-(sp)
(1) 2202/     B28 :                     ; 		move.l	d6,a5
(1) 2203/     B28 :                     ; 		jsr	(a5)
(1) 2204/     B28 :                     ; 		move.l	(sp)+,d7
(1) 2205/     B28 :                     ; .no_code:
(1) 2206/     B28 :                     ; 		adda	#sizeof_mdobj,a6
(1) 2207/     B28 :                     ; 		dbf	d7,.next_one
(1) 2208/     B28 :                     ; 		rts
(1) 2209/     B28 :                     ;
(1) 2210/     B28 :                     ; ; --------------------------------------------------------
(1) 2211/     B28 :                     ; ; Draw ALL Objects from display list
(1) 2212/     B28 :                     ; ;
(1) 2213/     B28 :                     ; ; Call this BEFORE VBlank.
(1) 2214/     B28 :                     ; ; --------------------------------------------------------
(1) 2215/     B28 :                     ;
(1) 2216/     B28 :                     ; Objects_Show:
(1) 2217/     B28 :                     ; 		moveq	#1,d7				; d7 - MD Link
(1) 2218/     B28 :                     ; 		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 2219/     B28 :                     ;
(1) 2220/     B28 :                     ; 		move.w	(RAM_SprDrwCntr),d6
(1) 2221/     B28 :                     ; 		beq.s	.no_sprdrw
(1) 2222/     B28 :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2223/     B28 :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2224/     B28 :                     ; 		sub.w	#1,d6
(1) 2225/     B28 :                     ; .nexts:
(1) 2226/     B28 :                     ; 		cmp.w	#70,d7
(1) 2227/     B28 :                     ; 		bge.s	.no_sprdrw
(1) 2228/     B28 :                     ; 		move.w	(a5)+,d0
(1) 2229/     B28 :                     ; 		move.w	(a5)+,d1	; custom
(1) 2230/     B28 :                     ; 		and.w	#$FF,d1
(1) 2231/     B28 :                     ; 		lsl.w	#8,d1
(1) 2232/     B28 :                     ; 		or.w	d7,d1
(1) 2233/     B28 :                     ; 		move.w	(a5)+,d2
(1) 2234/     B28 :                     ; 		move.w	(a5)+,d3
(1) 2235/     B28 :                     ; 		move.w	d0,(a6)+
(1) 2236/     B28 :                     ; 		move.w	d1,(a6)+
(1) 2237/     B28 :                     ; 		move.w	d2,(a6)+
(1) 2238/     B28 :                     ; 		move.w	d3,(a6)+
(1) 2239/     B28 :                     ; 		add.w	#1,d7
(1) 2240/     B28 :                     ; 		dbf	d6,.nexts
(1) 2241/     B28 :                     ; .no_sprdrw:
(1) 2242/     B28 :                     ;
(1) 2243/     B28 :                     ; 	if MARS|MARSCD
(1) 2244/     B28 :                     ; 	; Draw mappings from sprites
(1) 2245/     B28 :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2246/     B28 :                     ; 		lea	(RAM_MdDreq+Dreq_SuperSpr),a4	; a4 - 32X SUPER Sprites
(1) 2247/     B28 :                     ; 		move.w	#MAX_MDOBJ-1,d6
(1) 2248/     B28 :                     ; .next:
(1) 2249/     B28 :                     ; 		move.w	(a5),d0
(1) 2250/     B28 :                     ; 		beq	.finish
(1) 2251/     B28 :                     ; 		moveq	#-1,d1
(1) 2252/     B28 :                     ; 		move.w	d0,d1
(1) 2253/     B28 :                     ; 		move.l	d1,a2
(1) 2254/     B28 :                     ; 		move.l	obj_map(a2),a0		; Read mapping
(1) 2255/     B28 :                     ; 		btst	#bitobj_Mars,obj_set(a2)
(1) 2256/     B28 :                     ; 		bne.s	.mars_mode
(1) 2257/     B28 :                     ; 		cmp.w	#70,d7
(1) 2258/     B28 :                     ; 		bge	.mk_spr
(1) 2259/     B28 :                     ; 		move.w	obj_frame(a2),d0
(1) 2260/     B28 :                     ; 		add.w	d0,d0
(1) 2261/     B28 :                     ; 		move.w	(a0,d0.w),d0
(1) 2262/     B28 :                     ; 		adda	d0,a0
(1) 2263/     B28 :                     ; 		move.w	(a0)+,d5
(1) 2264/     B28 :                     ; 		beq	.mk_spr
(1) 2265/     B28 :                     ; 		sub.w	#1,d5
(1) 2266/     B28 :                     ; .mk_pz:
(1) 2267/     B28 :                     ; 	; TODO: H/V flip
(1) 2268/     B28 :                     ; 		move.b	(a0)+,d0
(1) 2269/     B28 :                     ; 		ext.w	d0
(1) 2270/     B28 :                     ; 		add.w	obj_y(a2),d0
(1) 2271/     B28 :                     ; 		add.w	#$80,d0
(1) 2272/     B28 :                     ; 		move.b	(a0)+,d1
(1) 2273/     B28 :                     ; 		lsl.w	#8,d1
(1) 2274/     B28 :                     ; 		or.w	d7,d1
(1) 2275/     B28 :                     ; 		move.w	(a0)+,d2
(1) 2276/     B28 :                     ; 		add.w	obj_vram(a2),d2
(1) 2277/     B28 :                     ; 		adda	#2,a0
(1) 2278/     B28 :                     ; 		move.w	(a0)+,d3
(1) 2279/     B28 :                     ; 		add.w	obj_x(a2),d3
(1) 2280/     B28 :                     ; 		add.w	#$80,d3
(1) 2281/     B28 :                     ; 		move.w	d0,(a6)+
(1) 2282/     B28 :                     ; 		move.w	d1,(a6)+
(1) 2283/     B28 :                     ; 		move.w	d2,(a6)+
(1) 2284/     B28 :                     ; 		move.w	d3,(a6)+
(1) 2285/     B28 :                     ; 		add.w	#1,d7
(1) 2286/     B28 :                     ; 		dbf	d5,.mk_pz
(1) 2287/     B28 :                     ; 		bra.s	.mk_spr
(1) 2288/     B28 :                     ;
(1) 2289/     B28 :                     ; .mars_mode:
(1) 2290/     B28 :                     ; 		move.l	(a0)+,marsspr_data(a4)
(1) 2291/     B28 :                     ; 		move.w	(a0)+,marsspr_dwidth(a4)
(1) 2292/     B28 :                     ; 		move.w	(a0)+,marsspr_indx(a4)
(1) 2293/     B28 :                     ; 		move.b	(a0)+,d2
(1) 2294/     B28 :                     ; 		move.b	(a0)+,d3
(1) 2295/     B28 :                     ; 		move.b	d2,marsspr_xs(a4)
(1) 2296/     B28 :                     ; 		move.b	d3,marsspr_ys(a4)
(1) 2297/     B28 :                     ; 		move.w	obj_frame(a2),d0	; Read frame
(1) 2298/     B28 :                     ; 		move.b	d0,marsspr_xfrm(a4)
(1) 2299/     B28 :                     ; 		ror.w	#8,d0
(1) 2300/     B28 :                     ; 		move.b	d0,marsspr_yfrm(a4)
(1) 2301/     B28 :                     ; 		move.w	obj_x(a2),d4
(1) 2302/     B28 :                     ; 		move.w	obj_y(a2),d5
(1) 2303/     B28 :                     ; 		and.w	#$FF,d2
(1) 2304/     B28 :                     ; 		and.w	#$FF,d3
(1) 2305/     B28 :                     ; 		lsr.w	#1,d2
(1) 2306/     B28 :                     ; 		lsr.w	#1,d3
(1) 2307/     B28 :                     ; ; 		divu.w	#2,d2			; **
(1) 2308/     B28 :                     ; 		sub.w	d2,d4
(1) 2309/     B28 :                     ; ; 		divu.w	#2,d3			; **
(1) 2310/     B28 :                     ; 		sub.w	d3,d5
(1) 2311/     B28 :                     ; ; 		move.l	obj_size(a2),d2		; d2 - UDLR sizes
(1) 2312/     B28 :                     ; ; 		move.w	d2,d3			; Grab LR
(1) 2313/     B28 :                     ; ; 		lsr.w	#5,d3
(1) 2314/     B28 :                     ; ; 		and.w	#%11111000,d3
(1) 2315/     B28 :                     ; ; 		sub.w	d3,d4			; Subtract X
(1) 2316/     B28 :                     ; ; 		swap	d2
(1) 2317/     B28 :                     ; ; 		move.w	d2,d3			; Grab UD
(1) 2318/     B28 :                     ; ; 		lsr.w	#8,d3
(1) 2319/     B28 :                     ; ; 		lsl.b	#3,d3
(1) 2320/     B28 :                     ; ; 		and.w	#$FF,d3
(1) 2321/     B28 :                     ; ; 		sub.w	d3,d5			; Subtract Y
(1) 2322/     B28 :                     ; 		lea	(RAM_BgBufferM),a1
(1) 2323/     B28 :                     ; 		sub.w	md_bg_x(a1),d4
(1) 2324/     B28 :                     ; 		sub.w	md_bg_y(a1),d5
(1) 2325/     B28 :                     ; 		move.w	d4,marsspr_x(a4)
(1) 2326/     B28 :                     ; 		move.w	d5,marsspr_y(a4)
(1) 2327/     B28 :                     ; 		moveq	#0,d4
(1) 2328/     B28 :                     ; 		btst	#bitobj_flipH,obj_set(a2)
(1) 2329/     B28 :                     ; 		beq.s	.flip_h
(1) 2330/     B28 :                     ; 		bset	#0,d4
(1) 2331/     B28 :                     ; .flip_h:
(1) 2332/     B28 :                     ; 		btst	#bitobj_flipV,obj_set(a2)
(1) 2333/     B28 :                     ; 		beq.s	.flip_v
(1) 2334/     B28 :                     ; 		bset	#1,d4
(1) 2335/     B28 :                     ; .flip_v:
(1) 2336/     B28 :                     ; 		move.w	d4,marsspr_flags(a4)
(1) 2337/     B28 :                     ; 		adda	#sizeof_marsspr,a4	; Next SuperSprite
(1) 2338/     B28 :                     ; .mk_spr:
(1) 2339/     B28 :                     ; 		clr.w	(a5)+			; Clear request
(1) 2340/     B28 :                     ; 		dbf	d6,.next
(1) 2341/     B28 :                     ; .finish:
(1) 2342/     B28 :                     ; 		lea	(RAM_Sprites),a6	; a6 - Genesis sprites
(1) 2343/     B28 :                     ; 		move.w	d7,d6
(1) 2344/     B28 :                     ; 		cmp.w	#70,d7
(1) 2345/     B28 :                     ; 		bge.s	.ran_out
(1) 2346/     B28 :                     ; 		sub.w	#1,d6
(1) 2347/     B28 :                     ; 		lsl.w	#3,d6
(1) 2348/     B28 :                     ; 		adda	d6,a6
(1) 2349/     B28 :                     ; 		clr.l	(a6)			; TODO: endoflist check
(1) 2350/     B28 :                     ; .ran_out:
(1) 2351/     B28 :                     ; 	endif
(1) 2352/     B28 :                     ; 		rts
(1) 2353/     B28 :                     ;
(1) 2354/     B28 :                     ; ; ----------------------------------------------------------------
(1) 2355/     B28 :                     ; ; Subroutines
(1) 2356/     B28 :                     ; ; ----------------------------------------------------------------
(1) 2357/     B28 :                     ;
(1) 2358/     B28 :                     ; ; --------------------------------------------------------
(1) 2359/     B28 :                     ; ; object_Display
(1) 2360/     B28 :                     ; ;
(1) 2361/     B28 :                     ; ; Builds a sprite using map data specified in
(1) 2362/     B28 :                     ; ; obj_map(a6)
(1) 2363/     B28 :                     ; ;
(1) 2364/     B28 :                     ; ; *** GENESIS map ***
(1) 2365/     B28 :                     ; ; mapdata:
(1) 2366/     B28 :                     ; ;       dc.w .frame0-mapdata
(1) 2367/     B28 :                     ; ;       dc.w .frame1-mapdata
(1) 2368/     B28 :                     ; ;       ...
(1) 2369/     B28 :                     ; ; .frame0:
(1) 2370/     B28 :                     ; ;       dc.w numofpz
(1) 2371/     B28 :                     ; ;       dc.b YY,SS
(1) 2372/     B28 :                     ; ;       dc.w vram_normal
(1) 2373/     B28 :                     ; ;       dc.w vram_half
(1) 2374/     B28 :                     ; ;       dc.w XXXX
(1) 2375/     B28 :                     ; ;       align 2
(1) 2376/     B28 :                     ; ;
(1) 2377/     B28 :                     ; ; *** 32X map ***
(1) 2378/     B28 :                     ; ; mapdata:
(1) 2379/     B28 :                     ; ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 2380/     B28 :                     ; ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 2381/     B28 :                     ; ; 	dc.b 64,72	 ; Frame width and height
(1) 2382/     B28 :                     ; ; 	dc.w $80	 ; Palette index
(1) 2383/     B28 :                     ; ;
(1) 2384/     B28 :                     ; ; obj_frame(a6) is in YYXX direction
(1) 2385/     B28 :                     ; ;
(1) 2386/     B28 :                     ; ; Input:
(1) 2387/     B28 :                     ; ; a6 - Object
(1) 2388/     B28 :                     ; ;
(1) 2389/     B28 :                     ; ; Uses:
(1) 2390/     B28 :                     ; ; a5,d7
(1) 2391/     B28 :                     ; ; --------------------------------------------------------
(1) 2392/     B28 :                     ;
(1) 2393/     B28 :                     ; object_Display:
(1) 2394/     B28 :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2395/     B28 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2396/     B28 :                     ; .srch:
(1) 2397/     B28 :                     ; 		tst.w	(a5)
(1) 2398/     B28 :                     ; 		beq.s	.this_one
(1) 2399/     B28 :                     ; 		adda	#2,a5
(1) 2400/     B28 :                     ; 		dbf	d7,.srch
(1) 2401/     B28 :                     ; .this_one:
(1) 2402/     B28 :                     ; 		move.w	a6,(a5)
(1) 2403/     B28 :                     ; 		rts
(1) 2404/     B28 :                     ;
(1) 2405/     B28 :                     ; ; --------------------------------------------------------
(1) 2406/     B28 :                     ; ; object_MkSprPz
(1) 2407/     B28 :                     ; ;
(1) 2408/     B28 :                     ; ; Makes separate sprite pieces using
(1) 2409/     B28 :                     ; ;
(1) 2410/     B28 :                     ; ; Input:
(1) 2411/     B28 :                     ; ; d0 - X pos
(1) 2412/     B28 :                     ; ; d1 - Y pos
(1) 2413/     B28 :                     ; ; d2 - VRAM
(1) 2414/     B28 :                     ; ; d3 - Size
(1) 2415/     B28 :                     ; :
(1) 2416/     B28 :                     ; ; Uses:
(1) 2417/     B28 :                     ; ; a5,d7
(1) 2418/     B28 :                     ; ; --------------------------------------------------------
(1) 2419/     B28 :                     ;
(1) 2420/     B28 :                     ; object_MkSprPz:
(1) 2421/     B28 :                     ; 		move.w	(RAM_SprDrwCntr).w,d7
(1) 2422/     B28 :                     ; 		cmp.w	#70,d7
(1) 2423/     B28 :                     ; 		bge.s	.nope
(1) 2424/     B28 :                     ; 		lsl.w	#3,d7
(1) 2425/     B28 :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2426/     B28 :                     ; 		adda	d7,a5
(1) 2427/     B28 :                     ; 		add.w	#$80,d0
(1) 2428/     B28 :                     ; 		add.w	#$80,d1
(1) 2429/     B28 :                     ; 		and.w	#$FF,d3
(1) 2430/     B28 :                     ; ; 		lsl.w	#8,d3
(1) 2431/     B28 :                     ; 		move.w	d1,(a5)+
(1) 2432/     B28 :                     ; 		move.w	d3,(a5)+
(1) 2433/     B28 :                     ; 		move.w	d2,(a5)+
(1) 2434/     B28 :                     ; 		move.w	d0,(a5)+
(1) 2435/     B28 :                     ; 		add.w	#1,(RAM_SprDrwCntr).w
(1) 2436/     B28 :                     ; .nope:
(1) 2437/     B28 :                     ; 		rts
(1) 2438/     B28 :                     ;
(1) 2439/     B28 :                     ; ; --------------------------------------------------------
(1) 2440/     B28 :                     ; ; Object_Animate
(1) 2441/     B28 :                     ; ;
(1) 2442/     B28 :                     ; ; Animates the sprite
(1) 2443/     B28 :                     ; ;
(1) 2444/     B28 :                     ; ; Input
(1) 2445/     B28 :                     ; ; a0 | LONG - Animation data
(1) 2446/     B28 :                     ; ;
(1) 2447/     B28 :                     ; ; Output
(1) 2448/     B28 :                     ; ; d0 | WORD - Frame
(1) 2449/     B28 :                     ; ;
(1) 2450/     B28 :                     ; ; Uses:
(1) 2451/     B28 :                     ; ; d2
(1) 2452/     B28 :                     ; ; --------------------------------------------------------
(1) 2453/     B28 :                     ;
(1) 2454/     B28 :                     ; ; NOTE: to restart an animation
(1) 2455/     B28 :                     ; ; clear obj_anim_indx(a6) manually
(1) 2456/     B28 :                     ;
(1) 2457/     B28 :                     ; Object_Animate:
(1) 2458/     B28 :                     ; ;  		tst.l	d1
(1) 2459/     B28 :                     ; ;   		beq.s	.return
(1) 2460/     B28 :                     ;  		moveq	#0,d2
(1) 2461/     B28 :                     ;  		move.b	obj_anim_id+1(a6),d2
(1) 2462/     B28 :                     ;  		cmp.b	obj_anim_id(a6),d2
(1) 2463/     B28 :                     ;  		beq.s	.sameThing
(1) 2464/     B28 :                     ;  		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2465/     B28 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 2466/     B28 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2467/     B28 :                     ; .sameThing:
(1) 2468/     B28 :                     ;  		move.b	obj_anim_id(a6),d2
(1) 2469/     B28 :                     ;  		cmp.b	#-1,d2
(1) 2470/     B28 :                     ;  		beq.s	.return
(1) 2471/     B28 :                     ;  		add.w	d2,d2
(1) 2472/     B28 :                     ;  		move.w	(a0,d2.w),d2
(1) 2473/     B28 :                     ;  		lea	(a0,d2.w),a0
(1) 2474/     B28 :                     ;
(1) 2475/     B28 :                     ;  		move.w	(a0)+,d2
(1) 2476/     B28 :                     ;  		cmp.w	#-1,d2
(1) 2477/     B28 :                     ;  		beq.s	.keepspd
(1) 2478/     B28 :                     ;  		sub.b	#1,obj_anim_spd(a6)
(1) 2479/     B28 :                     ;  		bpl.s	.return
(1) 2480/     B28 :                     ; 		move.b	d2,obj_anim_spd(a6)
(1) 2481/     B28 :                     ; .keepspd:
(1) 2482/     B28 :                     ;  		moveq	#0,d1
(1) 2483/     B28 :                     ;  		move.w	obj_anim_indx(a6),d2
(1) 2484/     B28 :                     ;  		add.w	d2,d2
(1) 2485/     B28 :                     ;  		move.w	(a0),d1
(1) 2486/     B28 :                     ;  		adda	d2,a0
(1) 2487/     B28 :                     ;  		move.w	(a0),d0
(1) 2488/     B28 :                     ;  		cmp.w	#-1,d0
(1) 2489/     B28 :                     ;  		beq.s	.noAnim		; loop
(1) 2490/     B28 :                     ;  		cmp.w	#-2,d0
(1) 2491/     B28 :                     ;  		beq.s	.lastFrame	; finish
(1) 2492/     B28 :                     ;  		cmp.w	#-3,d0
(1) 2493/     B28 :                     ;  		beq.s	.goToFrame
(1) 2494/     B28 :                     ;
(1) 2495/     B28 :                     ;  		move.w	d0,obj_frame(a6)
(1) 2496/     B28 :                     ;  		add.w	#1,obj_anim_indx(a6)
(1) 2497/     B28 :                     ; .return:
(1) 2498/     B28 :                     ;  		rts
(1) 2499/     B28 :                     ;
(1) 2500/     B28 :                     ; .noAnim:
(1) 2501/     B28 :                     ;  		move.w	#1,obj_anim_indx(a6)
(1) 2502/     B28 :                     ;  		move.w	d1,d0
(1) 2503/     B28 :                     ;  		move.w	d0,obj_frame(a6)
(1) 2504/     B28 :                     ; 		rts
(1) 2505/     B28 :                     ; .lastFrame:
(1) 2506/     B28 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2507/     B28 :                     ; 		rts
(1) 2508/     B28 :                     ; .goToFrame:
(1) 2509/     B28 :                     ; 		clr.w	obj_anim_indx(a6)
(1) 2510/     B28 :                     ; 		move.w	2(a0),obj_anim_indx(a6)
(1) 2511/     B28 :                     ; 		rts
(1) 2512/     B28 :                     ;
(1) 2513/     B28 :                     ; ; --------------------------------------------------------
(1) 2514/     B28 :                     ; ; object_Speed
(1) 2515/     B28 :                     ; ;
(1) 2516/     B28 :                     ; ; Moves the object using speed settings
(1) 2517/     B28 :                     ; ;
(1) 2518/     B28 :                     ; ; Input:
(1) 2519/     B28 :                     ; ; a6 - Object
(1) 2520/     B28 :                     ; ;
(1) 2521/     B28 :                     ; ; Uses:
(1) 2522/     B28 :                     ; ; d7
(1) 2523/     B28 :                     ; ; --------------------------------------------------------
(1) 2524/     B28 :                     ;
(1) 2525/     B28 :                     ; object_UpdX:
(1) 2526/     B28 :                     ; 		moveq	#0,d7
(1) 2527/     B28 :                     ; 		move.w	obj_x_spd(a6),d7
(1) 2528/     B28 :                     ; 		ext.l	d7
(1) 2529/     B28 :                     ; 		asl.l	#8,d7
(1) 2530/     B28 :                     ; 		add.l	d7,obj_x(a6)
(1) 2531/     B28 :                     ; 		rts
(1) 2532/     B28 :                     ; object_Speed:
(1) 2533/     B28 :                     ; 		bsr.s	object_UpdX
(1) 2534/     B28 :                     ; object_UpdY:
(1) 2535/     B28 :                     ; 		moveq	#0,d7
(1) 2536/     B28 :                     ; 		move.w	obj_y_spd(a6),d7
(1) 2537/     B28 :                     ; 		ext.l	d7
(1) 2538/     B28 :                     ; 		asl.l	#8,d7
(1) 2539/     B28 :                     ; 		add.l	d7,obj_y(a6)
(1) 2540/     B28 :                     ; 		rts
(1) 2541/     B28 :                     ;
(1) 2542/     B28 :                     ; ; --------------------------------------------------------
(1) 2543/     B28 :                     ; ; object_ColM_Floor
(1) 2544/     B28 :                     ; ;
(1) 2545/     B28 :                     ; ; Check object collision on 32X map's floor
(1) 2546/     B28 :                     ; ;
(1) 2547/     B28 :                     ; ; Input:
(1) 2548/     B28 :                     ; ; a6 - Object to check
(1) 2549/     B28 :                     ; ;
(1) 2550/     B28 :                     ; ; Returns:
(1) 2551/     B28 :                     ; ; beq  - No collision
(1) 2552/     B28 :                     ; ; bne  - Found collision
(1) 2553/     B28 :                     ; ; d4.b - Collision block number
(1) 2554/     B28 :                     ; ; d5.w - Y-pos center snap
(1) 2555/     B28 :                     ; ;
(1) 2556/     B28 :                     ; ; Uses:
(1) 2557/     B28 :                     ; ; d4-d7,a4-a5
(1) 2558/     B28 :                     ; ; --------------------------------------------------------
(1) 2559/     B28 :                     ;
(1) 2560/     B28 :                     ; ; 32X MAP SIDE
(1) 2561/     B28 :                     ;
(1) 2562/     B28 :                     ; object_ColM_Floor:
(1) 2563/     B28 :                     ; 		lea	(RAM_BgBufferM),a5
(1) 2564/     B28 :                     ; 		moveq	#0,d5
(1) 2565/     B28 :                     ; 		moveq	#0,d4
(1) 2566/     B28 :                     ; 		move.l	md_bg_col(a5),a4
(1) 2567/     B28 :                     ; 		move.w	md_bg_wf(a5),d7
(1) 2568/     B28 :                     ; 		sub.w	#1,d7
(1) 2569/     B28 :                     ; 		move.w	obj_x(a6),d4
(1) 2570/     B28 :                     ; 		bpl.s	.v_x
(1) 2571/     B28 :                     ; 		clr.w	d4
(1) 2572/     B28 :                     ; .v_x:
(1) 2573/     B28 :                     ; 		cmp.w	d7,d4
(1) 2574/     B28 :                     ; 		blt.s	.v_xr
(1) 2575/     B28 :                     ; 		move.w	d7,d4
(1) 2576/     B28 :                     ; .v_xr:
(1) 2577/     B28 :                     ; 		move.w	md_bg_hf(a5),d7
(1) 2578/     B28 :                     ; 		sub.w	#1,d7
(1) 2579/     B28 :                     ; 		move.w	obj_y(a6),d5
(1) 2580/     B28 :                     ; 		bpl.s	.v_y
(1) 2581/     B28 :                     ; 		clr.w	d5
(1) 2582/     B28 :                     ; .v_y:
(1) 2583/     B28 :                     ; 		cmp.w	d7,d5
(1) 2584/     B28 :                     ; 		blt.s	.v_yd
(1) 2585/     B28 :                     ; 		move.w	d7,d5
(1) 2586/     B28 :                     ; .v_yd:
(1) 2587/     B28 :                     ; 		move.l	obj_size(a6),d7
(1) 2588/     B28 :                     ; 		swap	d7		; Add Y
(1) 2589/     B28 :                     ; 		and.w	#$FF,d7
(1) 2590/     B28 :                     ; 		move.w	d7,d6
(1) 2591/     B28 :                     ; 		lsl.w	#3,d6
(1) 2592/     B28 :                     ; 		add.w	d6,d5
(1) 2593/     B28 :                     ;
(1) 2594/     B28 :                     ; 	; d5 - Ypos + size
(1) 2595/     B28 :                     ; 	; d6 - Xpos
(1) 2596/     B28 :                     ; 	; d7 - Dsize/2
(1) 2597/     B28 :                     ;
(1) 2598/     B28 :                     ; 	; 16x16 only
(1) 2599/     B28 :                     ; 		lsr.w	#1,d7		; Dsize/2
(1) 2600/     B28 :                     ; 		asr.w	#4,d4		; X >> 16
(1) 2601/     B28 :                     ; 		add.l	d4,a4		; Add X
(1) 2602/     B28 :                     ; 		move.l	d5,d4		; Copy d5 to d4
(1) 2603/     B28 :                     ; 		asr.w	#4,d4		; Y >> 16
(1) 2604/     B28 :                     ; 		moveq	#0,d6
(1) 2605/     B28 :                     ; 		move.w	md_bg_w(a5),d6	; d6: map width
(1) 2606/     B28 :                     ; 		mulu.w	d6,d4		; (Y>>16)*(mwidth)
(1) 2607/     B28 :                     ; 		add.l	d4,a4		; Add Y
(1) 2608/     B28 :                     ; 		and.w	#-$10,d5	; Filter Y Snap
(1) 2609/     B28 :                     ; 		move.b	(a4),d4		; d4: Start ID
(1) 2610/     B28 :                     ; 		sub.l	d6,a4
(1) 2611/     B28 :                     ; 		sub.w	#1,d7		; Dsize - 1
(1) 2612/     B28 :                     ; 		bmi.s	.valid
(1) 2613/     B28 :                     ; .next:
(1) 2614/     B28 :                     ; 		swap	d7
(1) 2615/     B28 :                     ; 		move.b	(a4),d7		; New ID != 0?
(1) 2616/     B28 :                     ; 		beq.s	.blnk
(1) 2617/     B28 :                     ; 		move.b	d7,d4		; Set new ID
(1) 2618/     B28 :                     ; 		sub.w	#$10,d5		; Decrement Y Snap
(1) 2619/     B28 :                     ; .blnk:
(1) 2620/     B28 :                     ; 		sub.l	d6,a4		; Decrement width
(1) 2621/     B28 :                     ; 		swap	d7
(1) 2622/     B28 :                     ; 		dbf	d7,.next
(1) 2623/     B28 :                     ; .valid:
(1) 2624/     B28 :                     ; 		and.w	#$FF,d4		; Filter ID
(1) 2625/     B28 :                     ; 		rts
(1) 2626/     B28 :                     ;
(1) 2627/     B28 :                     ; ; ----------------------------------------
(1) 2628/     B28 :                     ; ; object_SetColFloor
(1) 2629/     B28 :                     ; ;
(1) 2630/     B28 :                     ; ; Snaps the object to the map's floor.
(1) 2631/     B28 :                     ; ;
(1) 2632/     B28 :                     ; ; Call object_ColM_Floor first
(1) 2633/     B28 :                     ; ;
(1) 2634/     B28 :                     ; ; Input:
(1) 2635/     B28 :                     ; ; d4.b - Collision block
(1) 2636/     B28 :                     ; ; d5.w - Y-pos center snap
(1) 2637/     B28 :                     ; ; ----------------------------------------
(1) 2638/     B28 :                     ;
(1) 2639/     B28 :                     ; object_SetColFloor:
(1) 2640/     B28 :                     ; 		and.w	#$FF,d4
(1) 2641/     B28 :                     ; 		beq.s	.no_col
(1) 2642/     B28 :                     ; 		lsl.w	#4,d4
(1) 2643/     B28 :                     ; 		move.w	obj_x(a6),d7		; Grab CENTER X
(1) 2644/     B28 :                     ; 		and.w	#$0F,d7			; limit to 16
(1) 2645/     B28 :                     ; 		lea	slope_data_16(pc),a0
(1) 2646/     B28 :                     ; 		adda	d4,a0
(1) 2647/     B28 :                     ; 		move.b	(a0,d7.w),d4
(1) 2648/     B28 :                     ; 		and.w	#$0F,d4
(1) 2649/     B28 :                     ;
(1) 2650/     B28 :                     ; 		moveq	#0,d6
(1) 2651/     B28 :                     ; 		move.w	obj_y(a6),d7
(1) 2652/     B28 :                     ; 		move.l	obj_size(a6),d6
(1) 2653/     B28 :                     ; 		swap	d6
(1) 2654/     B28 :                     ; 		and.w	#$FF,d6
(1) 2655/     B28 :                     ; 		lsl.w	#3,d6
(1) 2656/     B28 :                     ; 		sub.w	d6,d5
(1) 2657/     B28 :                     ; 		add.w	d4,d5	; target slope
(1) 2658/     B28 :                     ; 		cmp.w	d5,d7
(1) 2659/     B28 :                     ; 		ble.s	.no_col
(1) 2660/     B28 :                     ; 		move.w	#$800,d6
(1) 2661/     B28 :                     ; 		move.w	d6,obj_y_spd(a6)
(1) 2662/     B28 :                     ; ; .set_me:
(1) 2663/     B28 :                     ; ; 		move.w	obj_x_spd(a6),d6
(1) 2664/     B28 :                     ; ; 		bpl.s	.x_spd
(1) 2665/     B28 :                     ; ; 		neg.w	d6
(1) 2666/     B28 :                     ; ; .x_spd:
(1) 2667/     B28 :                     ;
(1) 2668/     B28 :                     ; 		bclr	#bitobj_air,obj_status(a6)
(1) 2669/     B28 :                     ; 		move.w	d5,obj_y(a6)
(1) 2670/     B28 :                     ; .no_col:
(1) 2671/     B28 :                     ; 		rts
(1) 2672/     B28 :                     ;
(1) 2673/     B28 :                     ; ; ----------------------------------------
(1) 2674/     B28 :                     ;
(1) 2675/     B28 :                     ; ; Slope data 16x16
(1) 2676/     B28 :                     ; slope_data_16:
(1) 2677/     B28 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2678/     B28 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2679/     B28 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2680/     B28 :                     ; 		dc.b 15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
(1) 2681/     B28 :                     ; 		dc.b  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
(1) 2682/     B28 :                     ; 		dc.b 15,15,14,14,13,13,12,12,11,11,10,10, 9, 9, 8, 8
(1) 2683/     B28 :                     ; 		dc.b  7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0
(1) 2684/     B28 :                     ; 		dc.b  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
(1) 2685/     B28 :                     ; 		dc.b  8, 8, 9, 9,10,10,11,11,12,12,13,13,14,14,15,15
(1) 2686/     B28 :                     ; 		align 2
(1) 2687/     B28 :                     
(1) 2688/     B28 :                     ; ====================================================================
(1) 2689/     B28 :                     ; ----------------------------------------------------------------
(1) 2690/     B28 :                     ; Video routines for 32X
(1) 2691/     B28 :                     ; ----------------------------------------------------------------
(1) 2692/     B28 :                     
(1) 2693/     B28 :                     ; --------------------------------------------------------
(1) 2694/     B28 :                     ; Video_Mars_GfxMode
(1) 2695/     B28 :                     ; Sets graphics mode on the 32X side
(1) 2696/     B28 :                     ;
(1) 2697/     B28 :                     ; Input:
(1) 2698/     B28 :                     ; d0 - Graphics mode
(1) 2699/     B28 :                     ; --------------------------------------------------------
(1) 2700/     B28 :                     
(1) 2701/     B28 :                     Video_Mars_GfxMode:
(1) 2702/     B28 :                     ; 	if MARS
(1) 2703/     B28 :                     ; 		move.w	d0,d7
(1) 2704/     B28 :                     ; 		and.w	#%00000111,d7			; Current limit: 8 Master modes
(1) 2705/     B28 :                     ; 		or.w	#$C0,d7
(1) 2706/     B28 :                     ; 		move.b	d7,(sysmars_reg+comm12+1).l
(1) 2707/     B28 :                     ; 		bsr	System_MarsUpdate
(1) 2708/     B28 :                     ; .wait_slv:	move.w	(sysmars_reg+comm14).l,d7	; Wait for Slave
(1) 2709/     B28 :                     ; 		and.w	#%00001111,d7
(1) 2710/     B28 :                     ; 		bne.s	.wait_slv
(1) 2711/     B28 :                     ; .wait:		move.w	(sysmars_reg+comm12).l,d7	; Wait for Master
(1) 2712/     B28 :                     ; 		and.w	#%11000000,d7
(1) 2713/     B28 :                     ; 		bne.s	.wait
(1) 2714/     B28 :                     ; 	endif
(1) 2715/     B28 : 4E75                		rts
(1) 2716/     B2A :                     
(1) 2717/     B2A :                     ; --------------------------------------------------------
(1) 2718/     B2A :                     ; Video_Mars_WaitFrame
(1) 2719/     B2A :                     ; --------------------------------------------------------
(1) 2720/     B2A :                     
(1) 2721/     B2A :                     Video_Mars_WaitFrame:
(1) 2722/     B2A :                     ; 	if MARS
(1) 2723/     B2A :                     ; 		bset	#5,(sysmars_reg+comm12+1).l	; Set R bit
(1) 2724/     B2A :                     ; .wait:
(1) 2725/     B2A :                     ; ; 		move.w	(vdp_ctrl),d7
(1) 2726/     B2A :                     ; ; 		btst	#bitVBlk,d7
(1) 2727/     B2A :                     ; ; 		bne.s	.late
(1) 2728/     B2A :                     ; 		move.w	(sysmars_reg+comm12).l,d7
(1) 2729/     B2A :                     ; 		btst	#5,d7
(1) 2730/     B2A :                     ; 		bne.s	.wait
(1) 2731/     B2A :                     ; .late:
(1) 2732/     B2A :                     ; 	endif
(1) 2733/     B2A : 4E75                		rts
(1) 2734/     B2C :                     
(1) 2735/     B2C :                     ; --------------------------------------------------------
(1) 2736/     B2C :                     ; Video_LoadPal_Mars
(1) 2737/     B2C :                     ;
(1) 2738/     B2C :                     ; Load Indexed palette directly to Buffer
(1) 2739/     B2C :                     ;
(1) 2740/     B2C :                     ; d0 - Start at
(1) 2741/     B2C :                     ; d1 - Number of colors
(1) 2742/     B2C :                     ; d2 - Priority bit OFF/ON
(1) 2743/     B2C :                     ; --------------------------------------------------------
(1) 2744/     B2C :                     
(1) 2745/     B2C :                     Video_FadePal_Mars:
(1) 2769/     B2C : 4E75                		rts
(1) 2770/     B2E :                     
(1) 2771/     B2E :                     ; --------------------------------------------------------
(1) 2772/     B2E :                     ; Video_MarsPalFade
(1) 2773/     B2E :                     ;
(1) 2774/     B2E :                     ; a0 - Palette data
(1) 2775/     B2E :                     ; d0 - Number of colors
(1) 2776/     B2E :                     ; d1 - Speed
(1) 2777/     B2E :                     ;
(1) 2778/     B2E :                     ; RAM_ReqFadeMars: (WORD)
(1) 2779/     B2E :                     ; $00 - No task (or finished)
(1) 2780/     B2E :                     ; $01 - Fade in
(1) 2781/     B2E :                     ; $02 - Fade out to black
(1) 2782/     B2E :                     ;
(1) 2783/     B2E :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 2784/     B2E :                     ; --------------------------------------------------------
(1) 2785/     B2E :                     
(1) 2786/     B2E :                     ; TODO: luego ver que hago con el priority bit
(1) 2787/     B2E :                     
(1) 2788/     B2E :                     Video_MarsPalFade:
(1) 2947/     B2E : 4E75                		rts
(1) 2948/     B30 :                     
     186/     B30 :                     		include	"system/md/system.asm"
(1)    1/     B30 :                     ; ====================================================================
(1)    2/     B30 :                     ; ----------------------------------------------------------------
(1)    3/     B30 :                     ; Genesis system routines
(1)    4/     B30 :                     ;
(1)    5/     B30 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY SKIP ANY
(1)    6/     B30 :                     ; Z80 ACCESS **
(1)    7/     B30 :                     ; ----------------------------------------------------------------
(1)    8/     B30 :                     
(1)    9/     B30 :                     ; ====================================================================
(1)   10/     B30 :                     ; ----------------------------------------------------------------
(1)   11/     B30 :                     ; Variables
(1)   12/     B30 :                     ; ----------------------------------------------------------------
(1)   13/     B30 :                     
(1)   14/     B30 :                     ; Controller buffer data (after calling System_Input)
(1)   15/     B30 :                     ;
(1)   16/     B30 :                     ; Type/Revision byte:
(1)   17/     B30 :                     ;
(1)   18/     B30 :                     ; ID    |
(1)   19/     B30 :                     ; $0D   | $00 - Original 3 button
(1)   20/     B30 :                     ;       | $01 - 6 button version: XYZM
(1)   21/     B30 :                     
(1)   22/     B30 : (MACRO)             		struct 0
(1)   22/     B30 : =$B30               GLBL_LASTPC     set *
(1)   22/     B30 :                                     dephase
(1)   22/     B30 : =$B30               GLBL_LASTORG    set *
(1)   22/       0 :                                     phase 0
(1)   23/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   24/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   25/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   26/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   27/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   28/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   29/       A :                     extr_3		ds.w 1
(1)   30/       C :                     extr_4		ds.w 1
(1)   31/       E :                     extr_5		ds.w 1
(1)   32/      10 :                     sizeof_input	ds.l 0
(1)   33/      10 : (MACRO)             		endstruct
(1)   33/       0 :                                     !org GLBL_LASTORG
(1)   33/     B30 :                                     phase GLBL_LASTPC
(1)   34/     B30 :                     
(1)   35/     B30 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   36/     B30 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   37/     B30 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   38/     B30 :                     
(1)   39/     B30 :                     ; Read WORD in +on_hold or +on_press
(1)   40/     B30 : =$1                 JoyUp		equ $0001
(1)   41/     B30 : =$2                 JoyDown		equ $0002
(1)   42/     B30 : =$4                 JoyLeft		equ $0004
(1)   43/     B30 : =$8                 JoyRight	equ $0008
(1)   44/     B30 : =$10                JoyB		equ $0010
(1)   45/     B30 : =$20                JoyC		equ $0020
(1)   46/     B30 : =$40                JoyA		equ $0040
(1)   47/     B30 : =$80                JoyStart	equ $0080
(1)   48/     B30 : =$100               JoyZ		equ $0100
(1)   49/     B30 : =$200               JoyY		equ $0200
(1)   50/     B30 : =$400               JoyX		equ $0400
(1)   51/     B30 : =$800               JoyMode		equ $0800
(1)   52/     B30 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   53/     B30 : =$1                 bitJoyDown	equ 1
(1)   54/     B30 : =$2                 bitJoyLeft	equ 2
(1)   55/     B30 : =$3                 bitJoyRight	equ 3
(1)   56/     B30 : =$4                 bitJoyB		equ 4
(1)   57/     B30 : =$5                 bitJoyC		equ 5
(1)   58/     B30 : =$6                 bitJoyA		equ 6
(1)   59/     B30 : =$7                 bitJoyStart	equ 7
(1)   60/     B30 : =$8                 bitJoyZ		equ 8
(1)   61/     B30 : =$9                 bitJoyY		equ 9
(1)   62/     B30 : =$A                 bitJoyX		equ 10
(1)   63/     B30 : =$B                 bitJoyMode	equ 11
(1)   64/     B30 :                     
(1)   65/     B30 :                     ; Mega Mouse
(1)   66/     B30 :                     ; Read WORD as +on_hold or +on_press
(1)   67/     B30 : =$1                 ClickR		equ $0001
(1)   68/     B30 : =$2                 ClickL		equ $0002
(1)   69/     B30 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   70/     B30 : =$8                 ClickS		equ $0008	; (Untested)
(1)   71/     B30 : =$0                 bitClickR	equ 0
(1)   72/     B30 : =$1                 bitClickL	equ 1
(1)   73/     B30 : =$2                 bitClickM	equ 2
(1)   74/     B30 : =$3                 bitClickS	equ 3
(1)   75/     B30 :                     
(1)   76/     B30 :                     ; ====================================================================
(1)   77/     B30 :                     ; ----------------------------------------------------------------
(1)   78/     B30 :                     ; RAM section
(1)   79/     B30 :                     ; ----------------------------------------------------------------
(1)   80/     B30 :                     
(1)   81/     B30 : (MACRO)             		struct RAM_MdSystem
(1)   81/     B30 : =$B30               GLBL_LASTPC     set *
(1)   81/     B30 :                                     dephase
(1)   81/     B30 : =$B30               GLBL_LASTORG    set *
(1)   81/FFFFFFFFFFFF9800 :                                     phase RAM_MDSYSTEM
(1)   82/FFFFFFFFFFFF9800 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   83/FFFFFFFFFFFF9840 :                     RAM_SaveData	ds.b $200			; Safe Cache'd save data section to Read/Write
(1)   84/FFFFFFFFFFFF9A40 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   85/FFFFFFFFFFFF9A44 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   86/FFFFFFFFFFFF9A48 :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   87/FFFFFFFFFFFF9A4C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   88/FFFFFFFFFFFF9A52 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   89/FFFFFFFFFFFF9A58 :                     sizeof_mdsys	ds.l 0
(1)   90/FFFFFFFFFFFF9A58 : (MACRO)             		endstruct
(1)   90/FFFFFFFFFFFF9800 :                                     !org GLBL_LASTORG
(1)   90/     B30 :                                     phase GLBL_LASTPC
(1)   91/     B30 : (MACRO)             		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   92/     B30 :                     
(1)   93/     B30 :                     ; ====================================================================
(1)   94/     B30 :                     ; --------------------------------------------------------
(1)   95/     B30 :                     ; Init System
(1)   96/     B30 :                     ; 
(1)   97/     B30 :                     ; Uses:
(1)   98/     B30 :                     ; a0-a2,d0-d1
(1)   99/     B30 :                     ; --------------------------------------------------------
(1)  100/     B30 :                     
(1)  101/     B30 :                     System_Init:
(1)  102/     B30 : 40E7                		move.w	sr,-(sp)
(1)  103/     B32 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  115/     B36 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  116/     B3A : 31C0 9A4C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  117/     B3E : 31C0 9A52           		move.w	d0,(RAM_MdMarsHInt).w
(1)  118/     B42 : 203C 0000 1028      		move.l	#VInt_Default,d0	; Set default ints
(1)  119/     B48 : 223C 0000 103E      		move.l	#Hint_Default,d1
(1)  120/     B4E : 6100 040C           		bsr	System_SetInts
(1)  121/     B52 : 41F8 9800           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  122/     B56 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  123/     B5A : 7000                		moveq	#0,d0
(1)  124/     B5C :                     .clrinput:
(1)  125/     B5C : 30C0                		move.w	d0,(a0)+
(1)  126/     B5E : 51C9 FFFC           		dbf	d1,.clrinput
(1)  127/     B62 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  128/     B68 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  129/     B6E : 23C0 FFFF 9A40      		move.l	d0,(RAM_SysRandVal).l
(1)  130/     B74 : 23C1 FFFF 9A44      		move.l	d1,(RAM_SysRandSeed).l
(1)  131/     B7A : 46DF                		move.w	(sp)+,sr
(1)  132/     B7C : 4E75                		rts
(1)  133/     B7E :                     
(1)  134/     B7E :                     ; --------------------------------------------------------
(1)  135/     B7E :                     ; System_Render
(1)  136/     B7E :                     ;
(1)  137/     B7E :                     ; Call this on the loop your current screen.
(1)  138/     B7E :                     ;
(1)  139/     B7E :                     ; Calling this it will:
(1)  140/     B7E :                     ; - Update the controller data
(1)  141/     B7E :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  142/     B7E :                     ;   data from from RAM to VDP, RV bit is not required.
(1)  143/     B7E :                     ;
(1)  144/     B7E :                     ; But before entering VBlank:
(1)  145/     B7E :                     ; - The DREQ data stored here will be transfered
(1)  146/     B7E :                     ; to the 32X side
(1)  147/     B7E :                     ; --------------------------------------------------------
(1)  148/     B7E :                     
(1)  149/     B7E :                     System_Render:
(1)  150/     B7E : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Inside VBlank?
(1)  151/     B84 : 3816                .wait_lag:	move.w	(a6),d4			; then it's a lag frame.
(1)  152/     B86 : 0804 0003           		btst	#bitVBlk,d4
(1)  153/     B8A : 66F8                		bne.s	.wait_lag
(1)  157/     B8C : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Check if we are on DISPLAY
(1)  158/     B92 : 3816                .wait_in:	move.w	(a6),d4
(1)  159/     B94 : 0804 0003           		btst	#bitVBlk,d4
(1)  160/     B98 : 67F8                		beq.s	.wait_in
(1)  161/     B9A : 6100 00AC           		bsr	System_Input		; Read inputs FIRST
(1)  162/     B9E :                     	; *** DMA'd Scroll and Palette
(1)  163/     B9E :                     	;
(1)  164/     B9E :                     	; The palette is transferred at the end so
(1)  165/     B9E :                     	; it doesn't show the dots on screen. (hopefully)
(1)  166/     B9E : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  167/     BA4 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  168/     BA8 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1)  169/     BAC : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  170/     BB0 : 3C87                		move.w	d7,(a6)
(1)  171/     BB2 : 6100 0084           		bsr	System_DmaEnter_RAM
(1)  172/     BB6 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  173/     BBC : 2CBC 96BD 95E0      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  174/     BC2 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  175/     BC6 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  176/     BCA : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  177/     BCE : 3C9F                		move.w	(sp)+,(a6)
(1)  178/     BD0 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  179/     BD6 : 2CBC 96BC 9500      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  180/     BDC : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  181/     BE0 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  182/     BE4 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  183/     BE8 : 3C9F                		move.w	(sp)+,(a6)
(1)  184/     BEA : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  185/     BF0 : 2CBC 96BE 9508      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  186/     BF6 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  187/     BFA : 3CBC 7800           		move.w	#$7800,(a6)
(1)  188/     BFE : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  189/     C02 : 3C9F                		move.w	(sp)+,(a6)
(1)  190/     C04 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  191/     C0A : 2CBC 96C0 95A8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  192/     C10 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  193/     C14 : 3CBC C000           		move.w	#$C000,(a6)
(1)  194/     C18 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  195/     C1C : 3C9F                		move.w	(sp)+,(a6)
(1)  196/     C1E : 6100 FEAA           		bsr	Video_DmaBlast
(1)  197/     C22 : 6118                		bsr	System_DmaExit_RAM
(1)  198/     C24 : 3E3C 8100           		move.w	#$8100,d7
(1)  199/     C28 : 1E38 8A51           		move.b	(RAM_VdpRegs+1).w,d7
(1)  200/     C2C : 3C87                		move.w	d7,(a6)
(1)  201/     C2E : 06B8 0000 0001 8450 		add.l	#1,(RAM_Framecount).w
(1)  202/     C36 : 4E75                		rts
(1)  203/     C38 :                     
(1)  204/     C38 :                     ; --------------------------------------------------------
(1)  205/     C38 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  206/     C38 :                     ; (from): ROM or RAM
(1)  207/     C38 :                     ;
(1)  208/     C38 :                     ; Call to these labels BEFORE and AFTER doing
(1)  209/     C38 :                     ; DMA-to-VDP transers.
(1)  210/     C38 :                     ; These calls are not needed for FILL or COPY.
(1)  211/     C38 :                     ;
(1)  212/     C38 :                     ; ** For stock Genesis:
(1)  213/     C38 :                     ;  | The Z80 cannot read from ROM while the
(1)  214/     C38 :                     ;  | DMA ROM-to-VDP transfer is active.
(1)  215/     C38 :                     ;  | THIS INCLUDES RAM TRANSFERS.
(1)  216/     C38 :                     ;  | ** Solution:
(1)  217/     C38 :                     ;  | STOP the Z80 entirely OR:
(1)  218/     C38 :                     ;  | First stop, set a flag and turn ON the
(1)  219/     C38 :                     ;  | Z80 again, if the Z80 reads the flag it
(1)  220/     C38 :                     ;  | should be stuck on a loop until you clear
(1)  221/     C38 :                     ;  | that flag from here after finishing your
(1)  222/     C38 :                     ;  | DMA transfer(s)
(1)  223/     C38 :                     ;
(1)  224/     C38 :                     ; ** For the 32X:
(1)  225/     C38 :                     ;  | SAME rule for the Genesis, but this time the
(1)  226/     C38 :                     ;  | ROM-to-VDP transfer requires the RV bit to be set.
(1)  227/     C38 :                     ;  | (RAM transfers doesn't require this bit at all.)
(1)  228/     C38 :                     ;  | Setting the RV bit blocks the SH2 from accessing
(1)  229/     C38 :                     ;  | the ROM area, THIS ALSO affects the Z80.
(1)  230/     C38 :                     ;  | ** Solution:
(1)  231/     C38 :                     ;  | First, make sure the SH2 isn't reading from ROM
(1)  232/     C38 :                     ;  | while the bit is active, or it will read garbage
(1)  233/     C38 :                     ;  | data.
(1)  234/     C38 :                     ;  | In the case where you need to read from ROM
(1)  235/     C38 :                     ;  | a lot (Playing PWM's for example):
(1)  236/     C38 :                     ;  | First request an CMD interrupt and tell the
(1)  237/     C38 :                     ;  | SH2 to backup a small amount of sample data
(1)  238/     C38 :                     ;  | and temporally relocate the read point to the
(1)  239/     C38 :                     ;  | backup until you make another
(1)  240/     C38 :                     ;  | interrupt telling that you finished here and set
(1)  241/     C38 :                     ;  | RV back to 0.
(1)  242/     C38 :                     ;
(1)  243/     C38 :                     ; This is where you put your Sound driver's Z80 stop
(1)  244/     C38 :                     ; or pause calls go here
(1)  245/     C38 :                     ; --------------------------------------------------------
(1)  246/     C38 :                     
(1)  247/     C38 :                     System_DmaEnter_RAM:
(1)  248/     C38 : 6000 F6C2           		bra	gemaDmaPause
(1)  249/     C3C :                     System_DmaExit_RAM:
(1)  250/     C3C : 6000 F6C0           		bra	gemaDmaResume
(1)  251/     C40 :                     
(1)  252/     C40 :                     ; --------------------------------------------------------
(1)  253/     C40 :                     
(1)  254/     C40 :                     System_DmaEnter_ROM:
(1)  255/     C40 : 6000 F6BE           		bra	gemaDmaPauseRom
(1)  256/     C44 :                     System_DmaExit_ROM:
(1)  257/     C44 : 6000 F6BC           		bra	gemaDmaResumeRom
(1)  258/     C48 :                     
(1)  259/     C48 :                     ; ====================================================================
(1)  260/     C48 :                     ; ----------------------------------------------------------------
(1)  261/     C48 :                     ; Subroutines
(1)  262/     C48 :                     ; ----------------------------------------------------------------
(1)  263/     C48 :                     
(1)  264/     C48 :                     ; --------------------------------------------------------
(1)  265/     C48 :                     ; System_Input
(1)  266/     C48 :                     ;
(1)  267/     C48 :                     ; Reads data from the Controller ports
(1)  268/     C48 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  269/     C48 :                     ;
(1)  270/     C48 :                     ; Uses:
(1)  271/     C48 :                     ; d5-d7,a5-a6
(1)  272/     C48 :                     ; --------------------------------------------------------
(1)  273/     C48 :                     
(1)  274/     C48 :                     System_Input:
(1)  275/     C48 :                     ; 		move.w	#$0100,(z80_bus).l
(1)  276/     C48 :                     .wait:
(1)  277/     C48 :                     ; 		btst	#0,(z80_bus).l
(1)  278/     C48 :                     ; 		bne.s	.wait
(1)  279/     C48 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  280/     C4E : 4DF8 9800           		lea	(RAM_InputData),a6	; a6 - Output
(1)  281/     C52 : 6108                		bsr.s	.this_one
(1)  282/     C54 : DAFC 0002           		adda	#2,a5
(1)  283/     C58 : DCFC 0010           		adda	#sizeof_input,a6
(1)  284/     C5C :                     ; 		bsr.s	.this_one
(1)  285/     C5C :                     ; ; 		move.w	#0,(z80_bus).l
(1)  286/     C5C :                     ; 		rts
(1)  287/     C5C :                     
(1)  288/     C5C :                     ; --------------------------------------------------------
(1)  289/     C5C :                     ; Read port
(1)  290/     C5C :                     ;
(1)  291/     C5C :                     ; a5 - Current port
(1)  292/     C5C :                     ; a6 - Output data
(1)  293/     C5C :                     ; --------------------------------------------------------
(1)  294/     C5C :                     
(1)  295/     C5C :                     .this_one:
(1)  296/     C5C : 6100 0166           		bsr	.pick_id
(1)  297/     C60 : 1C87                		move.b	d7,pad_id(a6)
(1)  298/     C62 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  299/     C66 : 670E                		beq.s	.exit
(1)  300/     C68 : 0247 000F           		andi.w	#$0F,d7
(1)  301/     C6C : DE47                		add.w	d7,d7
(1)  302/     C6E : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  303/     C72 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  304/     C76 :                     .exit:
(1)  305/     C76 : 422E 0001           		clr.b	pad_ver(a6)
(1)  306/     C7A : 4E75                		rts
(1)  307/     C7C :                     
(1)  308/     C7C :                     ; --------------------------------------------------------
(1)  309/     C7C :                     ; Grab ID
(1)  310/     C7C :                     ; --------------------------------------------------------
(1)  311/     C7C :                     
(1)  312/     C7C :                     .list:
(1)  313/     C7C : FFFA                		dc.w .exit-.list	; $00
(1)  314/     C7E : FFFA                		dc.w .exit-.list
(1)  315/     C80 : FFFA                		dc.w .exit-.list
(1)  316/     C82 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  317/     C84 : FFFA                		dc.w .exit-.list	; $04
(1)  318/     C86 : FFFA                		dc.w .exit-.list
(1)  319/     C88 : FFFA                		dc.w .exit-.list
(1)  320/     C8A : FFFA                		dc.w .exit-.list
(1)  321/     C8C : FFFA                		dc.w .exit-.list	; $08
(1)  322/     C8E : FFFA                		dc.w .exit-.list
(1)  323/     C90 : FFFA                		dc.w .exit-.list
(1)  324/     C92 : FFFA                		dc.w .exit-.list
(1)  325/     C94 : FFFA                		dc.w .exit-.list	; $0C
(1)  326/     C96 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  327/     C98 : FFFA                		dc.w .exit-.list
(1)  328/     C9A : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  329/     C9C :                     
(1)  330/     C9C :                     ; --------------------------------------------------------
(1)  331/     C9C :                     ; ID $03
(1)  332/     C9C :                     ;
(1)  333/     C9C :                     ; Mega Mouse
(1)  334/     C9C :                     ; --------------------------------------------------------
(1)  335/     C9C :                     
(1)  336/     C9C :                     ; *** NOT TESTED ON HARDWARE ***
(1)  337/     C9C :                     .id_03:
(1)  338/     C9C : 1ABC 0020           		move.b	#$20,(a5)
(1)  339/     CA0 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  340/     CA6 : 0815 0004           		btst	#4,(a5)
(1)  341/     CAA : 6700 0094           		beq.w	.invalid
(1)  342/     CAE : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  343/     CB2 : 4E71                		nop
(1)  344/     CB4 : 4E71                		nop
(1)  345/     CB6 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  346/     CBA : 4E71                		nop
(1)  347/     CBC : 4E71                		nop
(1)  348/     CBE : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  349/     CC2 : 4E71                		nop
(1)  350/     CC4 : 4E71                		nop
(1)  351/     CC6 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  352/     CC8 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  353/     CCC : 4E71                		nop
(1)  354/     CCE : 4E71                		nop
(1)  355/     CD0 : 1E15                		move.b	(a5),d7
(1)  356/     CD2 : 0247 000F            		andi.w	#%1111,d7
(1)  357/     CD6 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  358/     CDA : BF46                		eor.w	d7,d6
(1)  359/     CDC : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  360/     CE0 : CC47                		and.w	d7,d6
(1)  361/     CE2 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  362/     CE6 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  363/     CEA : 4E71                		nop
(1)  364/     CEC : 4E71                		nop
(1)  365/     CEE : 1E15                		move.b	(a5),d7
(1)  366/     CF0 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  367/     CF4 : 0247 000F           		andi.w	#%1111,d7
(1)  368/     CF8 : E94F                		lsl.w	#4,d7
(1)  369/     CFA : 4E71                		nop
(1)  370/     CFC : 1C15                		move.b	(a5),d6
(1)  371/     CFE : 0246 000F           		andi.w	#%1111,d6
(1)  372/     D02 : 8E46                		or.w	d6,d7
(1)  373/     D04 : 0805 0000           		btst    #0,d5
(1)  374/     D08 : 6704                		beq.s	.x_neg
(1)  375/     D0A : 4407                		neg.b	d7
(1)  376/     D0C : 4447                		neg.w	d7
(1)  377/     D0E :                     .x_neg:
(1)  378/     D0E : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  379/     D12 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  380/     D16 : 4E71                		nop
(1)  381/     D18 : 4E71                		nop
(1)  382/     D1A : 1E15                		move.b	(a5),d7
(1)  383/     D1C : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  384/     D20 : 0247 000F           		andi.w	#%1111,d7
(1)  385/     D24 : E94F                		lsl.w	#4,d7
(1)  386/     D26 : 4E71                		nop
(1)  387/     D28 : 1C15                		move.b	(a5),d6
(1)  388/     D2A : 0246 000F           		andi.w	#%1111,d6
(1)  389/     D2E : 8E46                		or.w	d6,d7
(1)  390/     D30 : 0805 0001           		btst    #1,d5
(1)  391/     D34 : 6704                		beq.s	.y_neg
(1)  392/     D36 : 4407                		neg.b	d7
(1)  393/     D38 : 4447                		neg.w	d7
(1)  394/     D3A :                     .y_neg:
(1)  395/     D3A : 4447                		neg.w	d7		; Reverse Y
(1)  396/     D3C : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  397/     D40 :                     
(1)  398/     D40 :                     .invalid:
(1)  399/     D40 : 1ABC 0060           		move.b	#$60,(a5)
(1)  400/     D44 : 4E75                		rts
(1)  401/     D46 :                     
(1)  402/     D46 :                     ; --------------------------------------------------------
(1)  403/     D46 :                     ; ID $0D
(1)  404/     D46 :                     ;
(1)  405/     D46 :                     ; Normal controller: 3 button or 6 button.
(1)  406/     D46 :                     ; --------------------------------------------------------
(1)  407/     D46 :                     
(1)  408/     D46 :                     .id_0D:
(1)  409/     D46 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  410/     D4A : 4E71                		nop
(1)  411/     D4C : 4E71                		nop
(1)  412/     D4E : 1A15                		move.b	(a5),d5
(1)  413/     D50 : 0245 003F           		andi.w	#%00111111,d5
(1)  414/     D54 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  415/     D58 : 4E71                		nop
(1)  416/     D5A : 4E71                		nop
(1)  417/     D5C : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  418/     D5E : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  419/     D60 : 0247 00C0           		andi.w	#%11000000,d7
(1)  420/     D64 : 8E45                		or.w	d5,d7
(1)  421/     D66 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  422/     D6A : 4647                		not.w	d7
(1)  423/     D6C : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  424/     D70 : BF05                		eor.b	d7,d5
(1)  425/     D72 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  426/     D76 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  427/     D7A : CA07                		and.b	d7,d5
(1)  428/     D7C : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  429/     D80 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  430/     D84 : 4E71                		nop
(1)  431/     D86 : 4E71                		nop
(1)  432/     D88 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  433/     D8A : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  434/     D8E : 4E71                  		nop
(1)  435/     D90 : 4E71                  		nop
(1)  436/     D92 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  437/     D94 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  438/     D98 : 4E71                 		nop
(1)  439/     D9A : 4E71                 		nop
(1)  440/     D9C : 0246 000F           		andi.w	#$F,d6
(1)  441/     DA0 : E44E                		lsr.w	#2,d6
(1)  442/     DA2 : 0246 0001           		andi.w	#1,d6
(1)  443/     DA6 : 6716                		beq.s	.oldpad
(1)  444/     DA8 : 4607                		not.b	d7
(1)  445/     DAA : 0247 000F            		andi.w	#%1111,d7
(1)  446/     DAE : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  447/     DB2 : BF05                		eor.b	d7,d5
(1)  448/     DB4 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  449/     DB8 : CA07                		and.b	d7,d5
(1)  450/     DBA : 1D45 0004           		move.b	d5,on_press(a6)
(1)  451/     DBE :                     .oldpad:
(1)  452/     DBE : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  453/     DC2 : 4E75                		rts
(1)  454/     DC4 :                     
(1)  455/     DC4 :                     ; --------------------------------------------------------
(1)  456/     DC4 :                     ; Grab ID
(1)  457/     DC4 :                     ; --------------------------------------------------------
(1)  458/     DC4 :                     
(1)  459/     DC4 :                     .pick_id:
(1)  460/     DC4 : 7E00                		moveq	#0,d7
(1)  461/     DC6 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  462/     DCA : 4E71                		nop
(1)  463/     DCC : 4E71                		nop
(1)  464/     DCE : 610A                		bsr	.read
(1)  465/     DD0 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  466/     DD4 : 4E71                		nop
(1)  467/     DD6 : 4E71                		nop
(1)  468/     DD8 : DE47                		add.w	d7,d7
(1)  469/     DDA :                     .read:
(1)  470/     DDA : 1A15                		move.b	(a5),d5
(1)  471/     DDC : 1C05                		move.b	d5,d6
(1)  472/     DDE : 0206 000C           		andi.b	#$C,d6
(1)  473/     DE2 : 6702                		beq.s	.step_1
(1)  474/     DE4 : 5247                		addq.w	#1,d7
(1)  475/     DE6 :                     .step_1:
(1)  476/     DE6 : DE47                		add.w	d7,d7
(1)  477/     DE8 : 1C05                		move.b	d5,d6
(1)  478/     DEA : 0246 0003           		andi.w	#3,d6
(1)  479/     DEE : 6702                		beq.s	.step_2
(1)  480/     DF0 : 5247                		addq.w	#1,d7
(1)  481/     DF2 :                     .step_2:
(1)  482/     DF2 : 4E75                		rts
(1)  483/     DF4 :                     
(1)  484/     DF4 :                     ; --------------------------------------------------------
(1)  485/     DF4 :                     ; System_Random
(1)  486/     DF4 :                     ;
(1)  487/     DF4 :                     ; Makes a random number.
(1)  488/     DF4 :                     ;
(1)  489/     DF4 :                     ; Input:
(1)  490/     DF4 :                     ; d0 | Seed
(1)  491/     DF4 :                     ;
(1)  492/     DF4 :                     ; Output:
(1)  493/     DF4 :                     ; d0 | LONG
(1)  494/     DF4 :                     ;
(1)  495/     DF4 :                     ; Uses:
(1)  496/     DF4 :                     ; d4-d5
(1)  497/     DF4 :                     ; --------------------------------------------------------
(1)  498/     DF4 :                     
(1)  499/     DF4 :                     System_Random:
(1)  500/     DF4 : 2F04                		move.l	d4,-(sp)
(1)  501/     DF6 : 2838 9A44           		move.l	(RAM_SysRandSeed).w,d4
(1)  502/     DFA : 6606                		bne.s	.good_s
(1)  503/     DFC : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  504/     E02 :                     .good_s:
(1)  505/     E02 : 2004                		move.l	d4,d0
(1)  506/     E04 : EB9C                		rol.l	#5,d4
(1)  507/     E06 : D880                		add.l	d0,d4
(1)  508/     E08 : E644                		asr.w	#3,d4
(1)  509/     E0A : D880                		add.l	d0,d4
(1)  510/     E0C : 3004                		move.w	d4,d0
(1)  511/     E0E : 4844                		swap	d4
(1)  512/     E10 : D044                		add.w	d4,d0
(1)  513/     E12 : 3800                		move.w	d0,d4
(1)  514/     E14 : 4844                		swap	d4
(1)  515/     E16 : 21C4 9A44           		move.l	d4,(RAM_SysRandSeed).w
(1)  516/     E1A : 281F                		move.l	(sp)+,d4
(1)  517/     E1C : 4E75                		rts
(1)  518/     E1E :                     
(1)  519/     E1E :                     ; --------------------------------------------------------
(1)  520/     E1E :                     ; System_SineWave_Cos / System_SineWave
(1)  521/     E1E :                     ;
(1)  522/     E1E :                     ; Get sinewave value
(1)  523/     E1E :                     ;
(1)  524/     E1E :                     ; Input:
(1)  525/     E1E :                     ; d0 | WORD - Tan
(1)  526/     E1E :                     ; d1 | WORD - Multiply
(1)  527/     E1E :                     ;
(1)  528/     E1E :                     ; Output:
(1)  529/     E1E :                     ; d2 | LONG - Result (as 0000.0000)
(1)  530/     E1E :                     ; --------------------------------------------------------
(1)  531/     E1E :                     
(1)  532/     E1E :                     ; TODO: improve this.
(1)  533/     E1E :                     System_SineWave_Cos:
(1)  534/     E1E : 48A7 8000           		movem.w	d0,-(sp)
(1)  535/     E22 : 7400                		moveq	#0,d2
(1)  536/     E24 : 0600 0040           		addi.b	#$40,d0
(1)  537/     E28 : 1400                		move.b	d0,d2
(1)  538/     E2A : E302                		asl.b	#1,d2
(1)  539/     E2C : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  540/     E30 : C4C1                		mulu.w	d1,d2
(1)  541/     E32 : 8000                		or.b	d0,d0
(1)  542/     E34 : 6A02                		bpl.s	.dont_neg
(1)  543/     E36 : 4482                		neg.l	d2
(1)  544/     E38 :                     .dont_neg:
(1)  545/     E38 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  546/     E3C : 4E75                		rts
(1)  547/     E3E :                     
(1)  548/     E3E :                     System_SineWave:
(1)  549/     E3E : 48A7 8000           		movem.w	d0,-(sp)
(1)  550/     E42 : 0240 007F           		andi.w	#$7F,d0
(1)  551/     E46 : E340                		asl.w	#1,d0
(1)  552/     E48 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  553/     E4C : C4C1                		mulu.w	d1,d2
(1)  554/     E4E : 4C9F 0001           		movem.w	(sp)+,d0
(1)  555/     E52 : 5182                		subq.l	#8,d2
(1)  556/     E54 : 8000                		or.b	d0,d0
(1)  557/     E56 : 6A02                		bpl.s	.dont_neg
(1)  558/     E58 : 4482                		neg.l	d2
(1)  559/     E5A :                     .dont_neg:
(1)  560/     E5A : 4E75                		rts
(1)  561/     E5C :                     
(1)  562/     E5C : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  563/     E72 : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  564/     E86 : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  565/     E9A : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  566/     EAE : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  567/     EC2 : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  568/     ED6 : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  569/     EE8 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  570/     EFC : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  571/     F10 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  572/     F24 : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  573/     F38 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  574/     F4C : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  575/     F5C :                     
(1)  576/     F5C :                     ; --------------------------------------------------------
(1)  577/     F5C :                     ; System_SetInts
(1)  578/     F5C :                     ;
(1)  579/     F5C :                     ; Set new interrputs
(1)  580/     F5C :                     ;
(1)  581/     F5C :                     ; d0 | LONG - VBlank
(1)  582/     F5C :                     ; d1 | LONG - HBlank
(1)  583/     F5C :                     ;
(1)  584/     F5C :                     ; Uses:
(1)  585/     F5C :                     ; d4
(1)  586/     F5C :                     ;
(1)  587/     F5C :                     ; Notes:
(1)  588/     F5C :                     ; Writing 0 or a negative number will skip change
(1)  589/     F5C :                     ; to the interrupt pointer
(1)  590/     F5C :                     ; --------------------------------------------------------
(1)  591/     F5C :                     
(1)  592/     F5C :                     System_SetInts:
(1)  593/     F5C : 2800                		move.l	d0,d4
(1)  594/     F5E : 670C                		beq.s	.novint
(1)  595/     F60 : 6B0A                		bmi.s	.novint
(1)  596/     F62 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  597/     F68 : 21C4 9A4E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  598/     F6C :                     .novint:
(1)  599/     F6C : 2801                		move.l	d1,d4
(1)  600/     F6E : 670C                		beq.s	.nohint
(1)  601/     F70 : 6B0A                		bmi.s	.nohint
(1)  602/     F72 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  603/     F78 : 21C4 9A54           		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  604/     F7C :                     .nohint:
(1)  605/     F7C : 4E75                		rts
(1)  606/     F7E :                     
(1)  607/     F7E :                     ; --------------------------------------------------------
(1)  608/     F7E :                     ; System_SramInit
(1)  609/     F7E :                     ;
(1)  610/     F7E :                     ; Init save data
(1)  611/     F7E :                     ;
(1)  612/     F7E :                     ; Uses:
(1)  613/     F7E :                     ; a4,d4-d5
(1)  614/     F7E :                     ; --------------------------------------------------------
(1)  615/     F7E :                     
(1)  616/     F7E :                     ; TODO: Check if RV bit is needed here...
(1)  617/     F7E :                     System_SramInit:
(1)  618/     F7E : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  619/     F86 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  620/     F8C : 7800                		moveq	#0,d4
(1)  621/     F8E : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  622/     F92 :                     .initsave:
(1)  623/     F92 : 1884                		move.b	d4,(a4)
(1)  624/     F94 : D8FC 0002           		adda	#2,a4
(1)  625/     F98 : 51CD FFF8           		dbf	d5,.initsave
(1)  626/     F9C : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  627/     FA4 : 4E75                		rts
(1)  628/     FA6 :                     
(1)  629/     FA6 :                     ; ====================================================================
(1)  630/     FA6 :                     ; ----------------------------------------------------------------
(1)  631/     FA6 :                     ; Screen mode subroutines
(1)  632/     FA6 :                     ; ----------------------------------------------------------------
(1)  633/     FA6 :                     
(1)  634/     FA6 :                     ; --------------------------------------------------------
(1)  635/     FA6 :                     ; Initialize current screen mode
(1)  636/     FA6 :                     ; --------------------------------------------------------
(1)  637/     FA6 :                     
(1)  638/     FA6 :                     Mode_Init:
(1)  639/     FA6 : 4EB9 0000 03EA      		jsr	(Video_Clear).l
(1)  640/     FAC : 49F8 B500           		lea	(RAM_ScreenBuff),a4
(1)  641/     FB0 : 3A3C 13FF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  642/     FB4 : 7800                		moveq	#0,d4
(1)  643/     FB6 :                     .clr:
(1)  644/     FB6 : 38C4                		move.w	d4,(a4)+
(1)  645/     FB8 : 51CD FFFC           		dbf	d5,.clr
(1)  646/     FBC :                     
(1)  647/     FBC :                     ; 	if MARS|MARSCD
(1)  648/     FBC :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a4	; Patch
(1)  649/     FBC :                     ; 		move.w	#MAX_MODELS-1,d5
(1)  650/     FBC :                     ; .clr_mdls:
(1)  651/     FBC :                     ; 		move.l	d4,mdl_data(a4)
(1)  652/     FBC :                     ; 		adda	#sizeof_mdlobj,a4
(1)  653/     FBC :                     ; 		dbf	d5,.clr_mdls
(1)  654/     FBC :                     ; 	endif
(1)  655/     FBC :                     
(1)  656/     FBC : 303C 0000           		move.w	#0,d0
(1)  657/     FC0 : 6000 FB66           		bra	Video_Mars_GfxMode
(1)  658/     FC4 :                     
(1)  659/     FC4 :                     ; --------------------------------------------------------
(1)  660/     FC4 :                     
(1)  661/     FC4 :                     System_FadeIn:
(1)  662/     FC4 : 31FC 0001 8A42      		move.w	#1,(RAM_FadeMdIncr).w
(1)  663/     FCA : 31FC 0002 8A4A      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  664/     FD0 : 31FC 0001 8A44      		move.w	#1,(RAM_FadeMdDelay).w
(1)  665/     FD6 : 31FC 0000 8A4C      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  666/     FDC : 31FC 0001 8A40      		move.w	#1,(RAM_FadeMdReq).w
(1)  667/     FE2 : 31FC 0001 8A48      		move.w	#1,(RAM_FadeMarsReq).w
(1)  668/     FE8 :                     
(1)  669/     FE8 :                     ; 		move.w	#2,(RAM_FadeMdReq).w
(1)  670/     FE8 :                     ; 		move.w	#2,(RAM_FadeMarsReq).w
(1)  671/     FE8 :                     ; 		move.w	#1,(RAM_FadeMdIncr).w
(1)  672/     FE8 :                     ; 		move.w	#4,(RAM_FadeMarsIncr).w
(1)  673/     FE8 :                     ; 		move.w	#0,(RAM_FadeMdDelay).w
(1)  674/     FE8 :                     ; 		move.w	#0,(RAM_FadeMarsDelay).w
(1)  675/     FE8 :                     .loopw:
(1)  676/     FE8 : 6100 FB94           		bsr	System_Render
(1)  677/     FEC : 4EB9 0000 0732      		jsr	(Video_RunFade).l
(1)  678/     FF2 : 66F4                		bne.s	.loopw
(1)  679/     FF4 : 4E75                		rts
(1)  680/     FF6 :                     
(1)  681/     FF6 :                     System_FadeOut:
(1)  682/     FF6 : 31FC 0002 8A40      		move.w	#2,(RAM_FadeMdReq).w
(1)  683/     FFC : 31FC 0002 8A48      		move.w	#2,(RAM_FadeMarsReq).w
(1)  684/    1002 : 31FC 0001 8A42      		move.w	#1,(RAM_FadeMdIncr).w
(1)  685/    1008 : 31FC 0004 8A4A      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  686/    100E : 31FC 0000 8A44      		move.w	#0,(RAM_FadeMdDelay).w
(1)  687/    1014 : 31FC 0000 8A4C      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  688/    101A :                     .loopw:
(1)  689/    101A : 6100 FB62           		bsr	System_Render
(1)  690/    101E : 4EB9 0000 0732      		jsr	(Video_RunFade).l
(1)  691/    1024 : 66F4                		bne.s	.loopw
(1)  692/    1026 : 4E75                		rts
(1)  693/    1028 :                     
(1)  694/    1028 :                     ; ====================================================================
(1)  695/    1028 :                     ; ----------------------------------------------------------------
(1)  696/    1028 :                     ; Default interrupts
(1)  697/    1028 :                     ; ----------------------------------------------------------------
(1)  698/    1028 :                     
(1)  699/    1028 :                     ; --------------------------------------------------------
(1)  700/    1028 :                     ; VBlank
(1)  701/    1028 :                     ; --------------------------------------------------------
(1)  702/    1028 :                     
(1)  703/    1028 :                     VInt_Default:
(1)  704/    1028 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  705/    102C : 6100 FC1A           		bsr	System_Input
(1)  706/    1030 : 06B8 0000 0001 8450 		addi.l	#1,(RAM_FrameCount).w
(1)  707/    1038 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  708/    103C : 4E73                		rte
(1)  709/    103E :                     
(1)  710/    103E :                     ; --------------------------------------------------------
(1)  711/    103E :                     ; HBlank
(1)  712/    103E :                     ; --------------------------------------------------------
(1)  713/    103E :                     
(1)  714/    103E :                     HInt_Default:
(1)  715/    103E : 4E73                		rte
(1)  716/    1040 :                     
(1)  717/    1040 :                     ; ====================================================================
(1)  718/    1040 :                     ; ----------------------------------------------------------------
(1)  719/    1040 :                     ; SEGA CD / CD32X ONLY
(1)  720/    1040 :                     ; ----------------------------------------------------------------
(1)  721/    1040 :                     
(1)  872/    1040 :                     
(1)  873/    1040 :                     ; ====================================================================
(1)  874/    1040 :                     ; ----------------------------------------------------------------
(1)  875/    1040 :                     ; 32X ONLY
(1)  876/    1040 :                     ; ----------------------------------------------------------------
(1)  877/    1040 :                     
(1)  889/    1040 :                     
(1)  890/    1040 :                     ; ====================================================================
(1)  891/    1040 :                     ; ----------------------------------------------------------------
(1)  892/    1040 :                     ; Shared subs for the add-ons
(1)  893/    1040 :                     ; ----------------------------------------------------------------
(1)  894/    1040 :                     
(1)  895/    1040 :                     ; --------------------------------------------------------
(1)  896/    1040 :                     ; System_GrabRamCode
(1)  897/    1040 :                     ;
(1)  898/    1040 :                     ; Shared for MCD, 32X and CD32X.
(1)  899/    1040 :                     ;
(1)  900/    1040 :                     ; Send new code to the USER side of RAM and
(1)  901/    1040 :                     ; jumps into it.
(1)  902/    1040 :                     ;
(1)  903/    1040 :                     ; ** FOR SEGA CD/CD+32X
(1)  904/    1040 :                     ; Input:
(1)  905/    1040 :                     ; a0 - Filename string 8-bytes
(1)  906/    1040 :                     ;
(1)  907/    1040 :                     ; ** FOR SEGA 32X
(1)  908/    1040 :                     ; Input:
(1)  909/    1040 :                     ; a0 - Location of the RAM-code to copy from
(1)  910/    1040 :                     ;      in the $880000/$900000 areas
(1)  911/    1040 :                     ; --------------------------------------------------------
(1)  912/    1040 :                     
(1)  913/    1040 :                     System_GrabRamCode:
(1)  931/    1040 : 4E75                		rts
(1)  933/    1042 :                     
(1)  934/    1042 :                     ; ====================================================================
(1)  935/    1042 :                     
     187/    1042 :                     		include "system/mars/md_dreq.asm"	; Tested on HW, works.
(1)    1/    1042 :                     ; ====================================================================
(1)    2/    1042 :                     ; ----------------------------------------------------------------
(1)    3/    1042 :                     ; DREQ transfer section
(1)    4/    1042 :                     ; ----------------------------------------------------------------
(1)    5/    1042 :                     
(1)    6/    1042 :                     ; --------------------------------------------------------
(1)    7/    1042 :                     ; System_MarsSendDreq
(1)    8/    1042 :                     ;
(1)    9/    1042 :                     ; Transfers data to the 32X using DREQ
(1)   10/    1042 :                     ;
(1)   11/    1042 :                     ; Input:
(1)   12/    1042 :                     ; a0.l | Source data to transfer
(1)   13/    1042 :                     ; d0.w | Size, MUST end with 0 or 8.
(1)   14/    1042 :                     ;
(1)   15/    1042 :                     ; Uses:
(1)   16/    1042 :                     ; a4-a5/d5-d7
(1)   17/    1042 :                     ;
(1)   18/    1042 :                     ; Notes:
(1)   19/    1042 :                     ; Only call this during DISPLAY, not during VBlank.
(1)   20/    1042 :                     ;
(1)   21/    1042 :                     ; POPULAR 32X EMULATORS WILL GET STUCK WAITING FOR
(1)   22/    1042 :                     ; DMA EXIT, ONLY ares-emu SUPPORTS THE DMA INTERRUPT.
(1)   23/    1042 :                     ; --------------------------------------------------------
(1)   24/    1042 :                     
(1)   25/    1042 :                     System_RomSendDreq:
(1)   26/    1042 : 40C7                		move.w	sr,d7
(1)   27/    1044 : 46FC 2700           		move.w	#$2700,sr
(1)   28/    1048 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   29/    104E : 49ED 0012           		lea	dreqfifo(a5),a4
(1)   30/    1052 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1)   31/    1058 : 3C00                		move.w	d0,d6			; d6 - Size in bytes
(1)   32/    105A : E24E                		lsr.w	#1,d6			; (length/2)
(1)   33/    105C : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1)   34/    1060 : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1)   35/    1062 : E44D                		lsr.w	#2,d5
(1)   36/    1064 : 0445 0001           		subi.w	#1,d5
(1)   37/    1068 : 08ED 0000 0003      		bset	#0,standby(a5)		; Call CMD interrupt to MASTER
(1)   38/    106E : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)		; Wait signal
(1)   39/    1074 : 67F8                		beq.s	.wait_bit
(1)   40/    1076 : 08AD 0006 002C      		bclr	#6,comm12(a5)		; Clear it here
(1)   41/    107C : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S
(1)   42/    1082 : 3898                .l0:		move.w  (a0)+,(a4)		; *** CRITICAL PART ***
(1)   43/    1084 : 3898                		move.w  (a0)+,(a4)
(1)   44/    1086 : 3898                		move.w  (a0)+,(a4)
(1)   45/    1088 : 3898                		move.w  (a0)+,(a4)
(1)   46/    108A : 51CD FFF6           		dbf	d5,.l0
(1)   48/    108E : 082D 0006 002C      .wait_bit_e:	btst	#6,comm12(a5)		; Wait signal
(1)   49/    1094 : 67F8                		beq.s	.wait_bit_e
(1)   50/    1096 : 08AD 0006 002C      		bclr	#6,comm12(a5)		; Clear again
(1)   52/    109C : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1)   53/    10A2 : 46C7                		move.w	d7,sr
(1)   54/    10A4 : 4E75                		rts
(1)   55/    10A6 :                     
     188/    10A6 :                     ; ---------------------------------------------
     194/    10A6 :                     Md_SysCode_e:
     195/    10A6 :                     		align 2
     196/    10A6 :                     
     197/    10A6 :                     ; ---------------------------------------------
     198/    10A6 :                     ; JUMP code for switching screen modes
     199/    10A6 :                     ; ---------------------------------------------
     200/    10A6 :                     
     201/    10A6 :                     Md_JumpCode:
     206/    10A6 :                     
     207/    10A6 :                     ; ---------------------------------------------
     208/    10A6 :                     ; Read screen modes
     209/    10A6 :                     ;
     210/    10A6 :                     ; MD/PICO:
     211/    10A6 :                     ; Direct ROM jump
     212/    10A6 :                     ;
     213/    10A6 :                     ; SEGA 32X:
     214/    10A6 :                     ; 880000+ jump
     215/    10A6 :                     ;
     216/    10A6 :                     ; SEGACD/CD32X:
     217/    10A6 :                     ; Read file from disc, transfer to RAM or
     218/    10A6 :                     ; WordRAM and jump there.
     219/    10A6 :                     ; ---------------------------------------------
     220/    10A6 :                     
     221/    10A6 :                     Md_ReadModes:
     222/    10A6 : 7000                		moveq	#0,d0
     223/    10A8 : 3038 AD00           		move.w	(RAM_Glbl_Scrn).w,d0
     224/    10AC : C07C 000F           		and.w	#%1111,d0		; <-- [USER] CURRENT LIMIT
     234/    10B0 : E548                		lsl.w	#2,d0			; * 4
     235/    10B2 : 203B 0008           		move.l	.pick_boot(pc,d0.w),d0	; Location to JUMP to.
     236/    10B6 : 2040                		move.l	d0,a0
     237/    10B8 : 4E90                		jsr	(a0)
     239/    10BA : 60EA                		bra.s	Md_ReadModes		; Loop on RTS
     240/    10BC :                     .pick_boot:
     241/    10BC :                     	; size $10
     253/    10BC : 0000 2FCC           		dc.l Md_Screen00
     254/    10C0 : 0000 2FCC           		dc.l Md_Screen00
     255/    10C4 : 0000 2FCC           		dc.l Md_Screen00
     256/    10C8 : 0000 2FCC           		dc.l Md_Screen00
     258/    10CC :                     
     259/    10CC :                     ; ---------------------------------------------
     265/    10CC :                     Md_JumpCode_e:
     266/    10CC :                     		align 2
     267/    10CC :                     
     268/    10CC :                     ; ====================================================================
     269/    10CC :                     ; --------------------------------------------------------
     270/    10CC :                     ; Misc. stuff FOR CARTRIDGE ONLY:
     271/    10CC :                     ;
     272/    10CC :                     ; Genesis, Sega 32X and Pico
     273/    10CC :                     ; --------------------------------------------------------
     274/    10CC :                     
     279/    10CC :                     Z80_CODE:	include "sound/gema_zdrv.asm"		; Called once
(1)    1/    10CC :                     ; ====================================================================
(1)    2/    10CC :                     ; --------------------------------------------------------
(1)    3/    10CC :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/    10CC :                     ; (C)2023 GenesisFan64
(1)    5/    10CC :                     ;
(1)    6/    10CC :                     ; TIP:
(1)    7/    10CC :                     ; For the 32X, place this code on the 880000 area
(1)    8/    10CC :                     ; as this is only loaded once.
(1)    9/    10CC :                     ; --------------------------------------------------------
(1)   10/    10CC :                     
(1)   11/    10CC :                     Z80_TOP:
(1)   12/    10CC :                     		cpu Z80		; Enter Z80
(1)   13/       0 :                     		phase 0		; At 0
(1)   14/       0 : (MACRO)             		org 0
(1)   15/       0 :                     
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     ; SETTINGS
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   21/       0 : =11H                MAX_TRKCHN	equ 17		; !! Max Internal tracker channels: 4PSG + 6FM + 7PWM (**AFFECTS 32X SIDE)
(1)   22/       0 : =8H                 MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) (**AFFECTS WAVE QUALITY)
(1)   23/       0 : =40H                MAX_RCACH	equ 40h		; Max storage for ROM pattern data *1-BIT SIZES ONLY, MUST BE ALIGNED*
(1)   24/       0 : =10H                MAX_TBLSIZE	equ 10h		; Max size for chip tables
(1)   25/       0 : =FH                 MAX_INS		equ 15		; Max Cache'd ROM instruments per track
(1)   26/       0 : =18H                MAX_BLOCKS	equ 24		; Max Cache'd ROM blocks per track
(1)   27/       0 : =FH                 MAX_HEADS	equ 15		; Max Cache'd ROM headers per track
(1)   28/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   29/       0 :                     
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     ; Structs
(1)   32/       0 :                     ; --------------------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 :                     ; trkBuff struct: 00h-30h
(1)   35/       0 :                     ; unused bytes are free.
(1)   36/       0 :                     ;
(1)   37/       0 :                     ; trk_Status: %ERPx xxx0
(1)   38/       0 :                     ; E - enabled
(1)   39/       0 :                     ; R - Init|Restart track
(1)   40/       0 :                     ; P - refill-on-playback
(1)   41/       0 :                     ; 0 - Use global sub-beat
(1)   42/       0 : =0H                 trk_status	equ 00h	; ** Track Status and flags (MUST BE at 00h)
(1)   43/       0 : =1H                 trk_seqId	equ 01h ; ** Track ID to play.
(1)   44/       0 : =2H                 trk_setBlk	equ 02h	; ** Start on this block
(1)   45/       0 : =3H                 trk_tickSet	equ 03h	; ** Ticks for this track
(1)   46/       0 : =4H                 trk_Blocks	equ 04h ; [W] Current track's blocks
(1)   47/       0 : =6H                 trk_Patt	equ 06h ; [W] Current track's heads and patterns
(1)   48/       0 : =8H                 trk_Instr	equ 08h ; [W] Current track's instruments
(1)   49/       0 : =AH                 trk_Read	equ 0Ah	; [W] Track current pattern-read pos
(1)   50/       0 : =CH                 trk_Rows	equ 0Ch	; [W] Track current row length
(1)   51/       0 : =EH                 trk_cachHalf	equ 0Eh ; ROM-cache halfcheck
(1)   52/       0 : =FH                 trk_cachInc	equ 0Fh ; ROM-cache increment
(1)   53/       0 : =10H                trk_rowPause	equ 10h	; Row-pause timer
(1)   54/       0 : =11H                trk_tickTmr	equ 11h	; Ticks timer
(1)   55/       0 : =12H                trk_currBlk	equ 12h	; Current block
(1)   56/       0 : =13H                trk_Panning	equ 13h ; Global panning for this track %LR000000
(1)   57/       0 : =14H                trk_Priority	equ 14h ; Priority level for this buffer
(1)   58/       0 : =15H                trk_BankIns	equ 15h
(1)   59/       0 : =16H                trk_BankBlk	equ 16h
(1)   60/       0 : =17H                trk_BankHead	equ 17h
(1)   61/       0 : =1CH                trk_MaxChnls	equ 1Ch	; MAX avaialble channels
(1)   62/       0 : =1DH                trk_MaxBlks	equ 1Dh ;     ----      blocks
(1)   63/       0 : =1EH                trk_MaxHdrs	equ 1Eh ;     ----      headers
(1)   64/       0 : =1FH                trk_MaxIns	equ 1Fh ;     ----      intruments
(1)   65/       0 : =20H                trk_RomCPatt	equ 20h ; [3b] ROM current pattern data to be cache'd
(1)   66/       0 : =23H                trk_RomPatt	equ 23h ; [3b] ROM TOP pattern data
(1)   67/       0 : =26H                trk_ChnList	equ 26h ; ** [W] Pointer to channel list for this buffer
(1)   68/       0 : =28H                trk_ChnCBlk	equ 28h ; ** [W] Pointer to block storage
(1)   69/       0 : =2AH                trk_ChnCHead	equ 2Ah ; ** [W] Pointer to header storage
(1)   70/       0 : =2CH                trk_ChnCIns	equ 2Ch	; ** [W] Pointer to intrument storage (ALWAYS used)
(1)   71/       0 : =2EH                trk_ChnCach	equ 2Eh	; ** [W] Pointer to pattern storage
(1)   72/       0 :                     
(1)   73/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   74/       0 :                     ;
(1)   75/       0 :                     ; chnl_Flags: LR00evin
(1)   76/       0 :                     ; LR - Left/Right panning bits (REVERSE: 0-ON 1-OFF)
(1)   77/       0 :                     ; e  - Effect*
(1)   78/       0 :                     ; v  - Volume*
(1)   79/       0 :                     ; i  - Intrument*
(1)   80/       0 :                     ; n  - Note*
(1)   81/       0 :                     ; * Gets cleared later.
(1)   82/       0 :                     
(1)   83/       0 : =0H                 chnl_Flags	equ 0	; Playback flags
(1)   84/       0 : =1H                 chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   85/       0 : =2H                 chnl_Note	equ 2
(1)   86/       0 : =3H                 chnl_Ins	equ 3	; Starting from 01h
(1)   87/       0 : =4H                 chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   88/       0 : =5H                 chnl_EffId	equ 5
(1)   89/       0 : =6H                 chnl_EffArg	equ 6
(1)   90/       0 : =7H                 chnl_Type	equ 7	; Impulse-note update bits
(1)   91/       0 :                     
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     ; Variables
(1)   94/       0 :                     ; --------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 :                     ; Z80 opcode labels for the wave playback routines:
(1)   97/       0 : =0H                 zopcNop		equ	00h
(1)   98/       0 : =8H                 zopcEx		equ	08h
(1)   99/       0 : =C9H                zopcRet		equ 	0C9h
(1)  100/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  101/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  102/       0 :                     
(1)  103/       0 :                     ; PSG external control
(1)  104/       0 :                     ; GEMS style.
(1)  105/       0 : =0H                 COM		equ	0
(1)  106/       0 : =4H                 LEV		equ	4
(1)  107/       0 : =8H                 ATK		equ	8
(1)  108/       0 : =CH                 DKY		equ	12
(1)  109/       0 : =10H                SLV		equ	16
(1)  110/       0 : =14H                RRT		equ	20
(1)  111/       0 : =18H                MODE		equ	24
(1)  112/       0 : =1CH                DTL		equ	28
(1)  113/       0 : =20H                DTH		equ	32
(1)  114/       0 : =24H                ALV		equ	36
(1)  115/       0 : =28H                FLG		equ	40
(1)  116/       0 : =2CH                TMR		equ	44
(1)  117/       0 : =30H                PVOL		equ	48
(1)  118/       0 : =34H                PARP		equ	52
(1)  119/       0 : =38H                PTMR		equ	56
(1)  120/       0 :                     
(1)  121/       0 :                     ; PWM control
(1)  122/       0 : =0H                 PWCOM		equ	0
(1)  123/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  124/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  125/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  126/       0 : =20H                PWINSH		equ	32	; **
(1)  127/       0 : =28H                PWINSM		equ	40	; **
(1)  128/       0 : =30H                PWINSL		equ	48	; **
(1)  129/       0 :                     
(1)  130/       0 :                     ; ====================================================================
(1)  131/       0 :                     ; --------------------------------------------------------
(1)  132/       0 :                     ; Code starts here
(1)  133/       0 :                     ; --------------------------------------------------------
(1)  134/       0 :                     
(1)  135/       0 : F3                  		di			; Disable interrputs
(1)  136/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  137/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  138/       6 : 18 7B               		jr	z80_init	; Jump to z80_init
(1)  139/       8 :                     
(1)  140/       8 :                     ; --------------------------------------------------------
(1)  141/       8 :                     ; RST 8 (dac_me)
(1)  142/       8 :                     ; *** self-modifiable code ***
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Writes wave data to DAC using data stored
(1)  145/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  146/       8 :                     ; opcodes to keep the samplerate stable.
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Input (EXX):
(1)  149/       8 :                     ;  c - WAVE buffer MSB
(1)  150/       8 :                     ; de - Pitch (xx.00)
(1)  151/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  152/       8 :                     ;
(1)  153/       8 :                     ; Uses (EXX):
(1)  154/       8 :                     ; b
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Notes:
(1)  157/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  158/       8 :                     ; wave playback.
(1)  159/       8 :                     ;
(1)  160/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  161/       8 :                     ; and
(1)  162/       8 :                     ; call dac_off to disable and enable FM6.
(1)  163/       8 :                     ; --------------------------------------------------------
(1)  164/       8 :                     
(1)  165/       8 :                     ; Samplerate is at 16000hz with minimal-loss.
(1)  166/       8 : (MACRO)             		org 8
(1)  167/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  168/       9 : 08                  		ex	af,af'		; Swap af
(1)  169/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  170/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  171/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  172/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  173/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  174/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  175/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  176/      16 : 65                  		ld	h,l		; get hl back
(1)  177/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  178/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  179/      19 : 08                  		ex	af,af'		; return af
(1)  180/      1A : D9                  		exx
(1)  181/      1B : C9                  		ret
(1)  182/      1C :                     
(1)  183/      1C :                     ; --------------------------------------------------------
(1)  184/      1C :                     ; 1Ch
(1)  185/      1C : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  186/      1E : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1)  187/      20 :                     
(1)  188/      20 :                     ; --------------------------------------------------------
(1)  189/      20 :                     ; RST 20h (dac_me)
(1)  190/      20 :                     ; *** self-modifiable code ***
(1)  191/      20 :                     ;
(1)  192/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  193/      20 :                     ; it playing.
(1)  194/      20 :                     ;
(1)  195/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  196/      20 :                     ; IS REQUESTED ***
(1)  197/      20 :                     ; --------------------------------------------------------
(1)  198/      20 :                     
(1)  199/      20 : (MACRO)             		org 20h
(1)  200/      20 : F5                  dac_fill:	push	af		; <-- changes between PUSH AF(playing) and RET(stopped)
(1)  201/      21 : 3A 2F 00            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  202/      24 : D9                  		exx
(1)  203/      25 : AC                  		xor	h		; Grab LSB.00
(1)  204/      26 : D9                  		exx
(1)  205/      27 : E6 80               		and	80h		; Check if bit changed
(1)  206/      29 : C4 2D 11            		call	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  207/      2C : F1                  		pop	af
(1)  208/      2D : C9                  		ret
(1)  209/      2E :                     
(1)  210/      2E :                     ; --------------------------------------------------------
(1)  211/      2E :                     ; 02Eh
(1)  212/      2E : 00                  currTickBits	db 0			; 2Eh: Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1)  213/      2F : 00                  dDacFifoMid	db 0			; 2Fh: WAVE play halfway refill flag (00h/80h)
(1)  214/      30 : 00 00 00            dDacPntr	db 0,0,0		; 30h: WAVE play current ROM position
(1)  215/      33 : 00 00 00            dDacCntr	db 0,0,0		; 33h: WAVE play length counter
(1)  216/      36 : 00                  x68ksrclsb	db 0			; 36h: transferRom temporal LSB
(1)  217/      37 : 00                  x68ksrcmid	db 0			; 37h: transferRom temporal MID
(1)  218/      38 :                     
(1)  219/      38 :                     ; --------------------------------------------------------
(1)  220/      38 :                     ; Z80 Interrupt at 0038h
(1)  221/      38 :                     ; --------------------------------------------------------
(1)  222/      38 :                     
(1)  223/      38 : (MACRO)             		org 38h			; Align 38h
(1)  224/      38 : ED 73 E7 16         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  225/      3C : F3                  		di			; Disable interrupt
(1)  226/      3D : C9                  		ret
(1)  227/      3E :                     
(1)  228/      3E :                     ; --------------------------------------------------------
(1)  229/      3E :                     ; 03Eh
(1)  230/      3E : 00                  trkListPage	db 0			; 3Eh: Current tracklist page/bank
(1)  231/      3F : 00                  marsUpd		db 0			; 3Fh: Flag to request a PWM transfer
(1)  232/      40 :                     
(1)  233/      40 :                     ; --------------------------------------------------------
(1)  234/      40 :                     ; 68K Read/Write area at 40h
(1)  235/      40 :                     ; --------------------------------------------------------
(1)  236/      40 :                     
(1)  237/      40 : (MACRO)             		org 40h
(1)  238/      40 :                     commZfifo	ds 40h			; Buffer for commands: 40h bytes
(1)  239/      80 : 00                  commZWrite	db 0			; 80h: cmd fifo wptr (from 68k)
(1)  240/      81 : 00                  commZRomBlk	db 0			; 81h: 68k ROM block flag
(1)  241/      82 : 00                  marsBlock	db 0			; 82h: flag to BLOCK PWM transfers.
(1)  242/      83 :                     
(1)  243/      83 :                     ; --------------------------------------------------------
(1)  244/      83 :                     ; Initialize
(1)  245/      83 :                     ; --------------------------------------------------------
(1)  246/      83 :                     
(1)  247/      83 :                     z80_init:
(1)  248/      83 : CD DD 0D            		call	gema_init		; Init values
(1)  249/      86 : FB                  		ei
(1)  250/      87 :                     
(1)  251/      87 :                     ; --------------------------------------------------------
(1)  252/      87 :                     ; MAIN LOOP
(1)  253/      87 :                     ; --------------------------------------------------------
(1)  254/      87 :                     
(1)  255/      87 :                     drv_loop:
(1)  256/      87 : CF                  		rst	8
(1)  257/      88 : CD 8B 0E            		call	get_tick		; Check for Tick on VBlank
(1)  258/      8B : E7                  		rst	20h			; Refill wave
(1)  259/      8C : CF                  		rst	8
(1)  260/      8D : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  261/      8F : 3A E9 16            		ld	a,(tickCnt)
(1)  262/      92 : D6 01               		sub	1
(1)  263/      94 : 38 0B               		jr	c,.noticks
(1)  264/      96 : 32 E9 16            		ld	(tickCnt),a
(1)  265/      99 : CD 4D 0F            		call	chip_env		; Process PSG and YM
(1)  266/      9C : CD 8B 0E            		call	get_tick		; Check for another tick
(1)  267/      9F : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  268/      A1 :                     .noticks:
(1)  269/      A1 : 3A 1D 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  270/      A4 : D6 01               		sub	1
(1)  271/      A6 : 38 06               		jr	c,.nobeats
(1)  272/      A8 : CF                  		rst	8
(1)  273/      A9 : 32 1D 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  274/      AC : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  275/      AE :                     .nobeats:
(1)  276/      AE : CF                  		rst	8
(1)  277/      AF : 78                  		ld	a,b			; Any beat/tick change?
(1)  278/      B0 : B7                  		or	a
(1)  279/      B1 : 28 14               		jr	z,.neither
(1)  280/      B3 : 32 2E 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  281/      B6 : CF                  		rst	8
(1)  282/      B7 : CD 8B 0E            		call	get_tick
(1)  283/      BA : CD FF 04            		call	set_chips		; Send changes to sound chips
(1)  284/      BD : CD 8B 0E            		call	get_tick
(1)  285/      C0 : CF                  		rst	8
(1)  286/      C1 : CD CF 01            		call	upd_track		; Update track data
(1)  287/      C4 : CD 8B 0E            		call	get_tick
(1)  288/      C7 :                     .neither:
(1)  289/      C7 : CD DA 0D            		call	ex_comm			; External communication
(1)  290/      CA : CD 8B 0E            		call	get_tick
(1)  291/      CD :                     .next_cmd:
(1)  292/      CD : 3A 80 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  293/      D0 : 47                  		ld	b,a
(1)  294/      D1 : 3A 00 17            		ld	a,(commZRead)
(1)  295/      D4 : B8                  		cp	b
(1)  296/      D5 : 28 B0               		jr	z,drv_loop		; If both are equal: no requests
(1)  297/      D7 : CF                  		rst	8
(1)  298/      D8 : CD F0 00            		call	.grab_arg
(1)  299/      DB : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  300/      DD : 20 A8               		jr	nz,drv_loop
(1)  301/      DF : CD F0 00            		call	.grab_arg		; Read command number
(1)  302/      E2 : 87                  		add	a,a			; * 2
(1)  303/      E3 : 21 0F 01            		ld	hl,.list		; Then jump to one of these...
(1)  304/      E6 : 16 00               		ld	d,0
(1)  305/      E8 : 5F                  		ld	e,a
(1)  306/      E9 : 19                  		add	hl,de
(1)  307/      EA : 7E                  		ld	a,(hl)
(1)  308/      EB : 23                  		inc	hl
(1)  309/      EC : 66                  		ld	h,(hl)
(1)  310/      ED : CF                  		rst	8
(1)  311/      EE : 6F                  		ld	l,a
(1)  312/      EF : E9                  		jp	(hl)
(1)  313/      F0 :                     
(1)  314/      F0 :                     ; --------------------------------------------------------
(1)  315/      F0 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  316/      F0 :                     ; --------------------------------------------------------
(1)  317/      F0 :                     
(1)  318/      F0 :                     .grab_arg:
(1)  319/      F0 : D5                  		push	de
(1)  320/      F1 : E5                  		push	hl
(1)  321/      F2 :                     .getcbytel:
(1)  322/      F2 : 3A 80 00            		ld	a,(commZWrite)
(1)  323/      F5 : 57                  		ld	d,a
(1)  324/      F6 : CF                  		rst	8
(1)  325/      F7 : 3A 00 17            		ld	a,(commZRead)
(1)  326/      FA : BA                  		cp	d
(1)  327/      FB : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  328/      FD : 16 00               		ld	d,0
(1)  329/      FF : 5F                  		ld	e,a
(1)  330/     100 : 21 40 00            		ld	hl,commZfifo
(1)  331/     103 : 19                  		add	hl,de
(1)  332/     104 : CF                  		rst	8
(1)  333/     105 : 3C                  		inc	a
(1)  334/     106 : E6 3F               		and	3Fh		; ** command list limit
(1)  335/     108 : 32 00 17            		ld	(commZRead),a
(1)  336/     10B : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  337/     10C : E1                  		pop	hl
(1)  338/     10D : D1                  		pop	de
(1)  339/     10E : C9                  		ret
(1)  340/     10F :                     
(1)  341/     10F :                     ; --------------------------------------------------------
(1)  342/     10F :                     
(1)  343/     10F :                     .list:
(1)  344/     10F : 2F 01               		dw .cmnd_0		; 00h -
(1)  345/     111 : 32 01               		dw .cmnd_1		; 01h - Play by track number
(1)  346/     113 : 4F 01               		dw .cmnd_2		; 02h - Stop by track number
(1)  347/     115 : 2F 01               		dw .cmnd_0		; 03h - Resume by track number
(1)  348/     117 : 2F 01               		dw .cmnd_0		; 04h -
(1)  349/     119 : 2F 01               		dw .cmnd_0		; 05h -
(1)  350/     11B : 2F 01               		dw .cmnd_0		; 06h -
(1)  351/     11D : 2F 01               		dw .cmnd_0		; 07h -
(1)  352/     11F : 6C 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  353/     121 : 2F 01               		dw .cmnd_0		; 09h -
(1)  354/     123 : 2F 01               		dw .cmnd_0		; 0Ah -
(1)  355/     125 : 2F 01               		dw .cmnd_0		; 0Bh -
(1)  356/     127 : 8E 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  357/     129 : 2F 01               		dw .cmnd_0		; 0Dh -
(1)  358/     12B : 2F 01               		dw .cmnd_0		; 0Eh -
(1)  359/     12D : 2F 01               		dw .cmnd_0		; 0Fh -
(1)  360/     12F :                     
(1)  361/     12F :                     ; --------------------------------------------------------
(1)  362/     12F :                     ; Command 00h
(1)  363/     12F :                     ;
(1)  364/     12F :                     ; Reserved for TESTING purposes.
(1)  365/     12F :                     ; --------------------------------------------------------
(1)  366/     12F :                     
(1)  367/     12F :                     ; TEST COMMAND
(1)  368/     12F :                     
(1)  369/     12F :                     .cmnd_0:
(1)  370/     12F : C3 CD 00            		jp	.next_cmd
(1)  371/     132 :                     
(1)  372/     132 :                     ; --------------------------------------------------------
(1)  373/     132 :                     ; Command 01h:
(1)  374/     132 :                     ;
(1)  375/     132 :                     ; Make new track by sequence number
(1)  376/     132 :                     ; --------------------------------------------------------
(1)  377/     132 :                     
(1)  378/     132 :                     .cmnd_1:
(1)  379/     132 : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  380/     135 : 4F                  		ld	c,a		; copy to c
(1)  381/     136 : CD F0 00            		call	.grab_arg	; d1: Block from
(1)  382/     139 : 47                  		ld	b,a
(1)  383/     13A : CD 9F 01            		call	.srch_frid	; Search buffer with same ID or FREE to use.
(1)  384/     13D : FE FF               		cp	-1
(1)  385/     13F : CA CD 00            		jp	z,.next_cmd	; Return if failed.
(1)  386/     142 : 36 C0               		ld	(hl),0C0h	; ** Write trk_status flags: Enable+Restart
(1)  387/     144 : 23                  		inc	hl
(1)  388/     145 : 71                  		ld	(hl),c		; ** write trk_seqId
(1)  389/     146 : 23                  		inc	hl
(1)  390/     147 : 70                  		ld	(hl),b		; ** write trk_setBlk
(1)  391/     148 : 79                  		ld	a,c
(1)  392/     149 : CD D1 04            		call	get_RomTrcks
(1)  393/     14C : C3 CD 00            		jp	.next_cmd
(1)  394/     14F :                     
(1)  395/     14F :                     ; --------------------------------------------------------
(1)  396/     14F :                     ; Command 02h:
(1)  397/     14F :                     ;
(1)  398/     14F :                     ; Stop track by sequence number
(1)  399/     14F :                     ; --------------------------------------------------------
(1)  400/     14F :                     
(1)  401/     14F :                     .cmnd_2:
(1)  402/     14F : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  403/     152 : 4F                  		ld	c,a		; copy to c
(1)  404/     153 : 06 FF               		ld	b,-1
(1)  405/     155 : CD 9F 01            		call	.srch_frid
(1)  406/     158 : FE FF               		cp	-1
(1)  407/     15A : CA CD 00            		jp	z,.next_cmd
(1)  408/     15D : 7E                  		ld	a,(hl)
(1)  409/     15E : CB 7F               		bit	7,a
(1)  410/     160 : CA CD 00            		jp	z,.next_cmd
(1)  411/     163 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  412/     165 : 23                  		inc	hl
(1)  413/     166 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  414/     168 : CF                  		rst	8
(1)  415/     169 : C3 CD 00            		jp	.next_cmd
(1)  416/     16C :                     
(1)  417/     16C :                     ; --------------------------------------------------------
(1)  418/     16C :                     ; Command 08h:
(1)  419/     16C :                     ;
(1)  420/     16C :                     ; Stop ALL tracks
(1)  421/     16C :                     ; --------------------------------------------------------
(1)  422/     16C :                     
(1)  423/     16C :                     .cmnd_8:
(1)  424/     16C : DD 21 FB 13         		ld	ix,nikona_BuffList
(1)  425/     170 :                     .next_sall:
(1)  426/     170 : DD 7E 00            		ld	a,(ix)
(1)  427/     173 : FE FF               		cp	-1
(1)  428/     175 : CA CD 00            		jp	z,.next_cmd
(1)  429/     178 : DD 66 01            		ld	h,(ix+1)
(1)  430/     17B : 6F                  		ld	l,a
(1)  431/     17C : 7E                  		ld	a,(hl)		; *** trk_status
(1)  432/     17D : CB 7F               		bit	7,a
(1)  433/     17F : 28 05               		jr	z,.not_on
(1)  434/     181 : 36 FF               		ld	(hl),-1		; *** trk_status: -1 request
(1)  435/     183 : 23                  		inc	hl
(1)  436/     184 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  437/     186 :                     ; 		inc	hl
(1)  438/     186 :                     ; 		ld	(hl),0
(1)  439/     186 :                     .not_on:
(1)  440/     186 : 11 10 00            		ld	de,10h
(1)  441/     189 : DD 19               		add	ix,de
(1)  442/     18B : C3 70 01            		jp	.next_sall
(1)  443/     18E :                     
(1)  444/     18E :                     ; --------------------------------------------------------
(1)  445/     18E :                     ; Command 0Ch:
(1)  446/     18E :                     ;
(1)  447/     18E :                     ; Set global sub-beats
(1)  448/     18E :                     ; --------------------------------------------------------
(1)  449/     18E :                     
(1)  450/     18E :                     .cmnd_C:
(1)  451/     18E : CD F0 00            		call	.grab_arg	; d0.w: $00xx
(1)  452/     191 : 4F                  		ld	c,a
(1)  453/     192 : CD F0 00            		call	.grab_arg	; d0.w: $xx00
(1)  454/     195 : 32 1F 00            		ld	(sbeatPtck+1),a
(1)  455/     198 : 79                  		ld	a,c
(1)  456/     199 : 32 1E 00            		ld	(sbeatPtck),a
(1)  457/     19C : C3 CD 00            		jp	.next_cmd
(1)  458/     19F :                     
(1)  459/     19F :                     ; ------------------------------------------------
(1)  460/     19F :                     
(1)  461/     19F :                     ; c - trk_currId
(1)  462/     19F :                     ; b - trk_setBlk (-1: ignore)
(1)  463/     19F :                     .srch_frid:
(1)  464/     19F : DD 21 FB 13         		ld	ix,nikona_BuffList
(1)  465/     1A3 : 11 10 00            		ld	de,10h
(1)  466/     1A6 :                     .next:
(1)  467/     1A6 : DD 7E 00            		ld	a,(ix)
(1)  468/     1A9 : FE FF               		cp	-1
(1)  469/     1AB : C8                  		ret	z
(1)  470/     1AC : DD 66 01            		ld	h,(ix+1)
(1)  471/     1AF : 6F                  		ld	l,a
(1)  472/     1B0 : 1E 10               		ld	e,10h
(1)  473/     1B2 : DD 19               		add	ix,de
(1)  474/     1B4 : 23                  		inc	hl
(1)  475/     1B5 : CF                  		rst	8
(1)  476/     1B6 : 23                  		inc	hl
(1)  477/     1B7 : 5E                  		ld	e,(hl)		; ** e - trk_currId
(1)  478/     1B8 : 2B                  		dec	hl
(1)  479/     1B9 :                     
(1)  480/     1B9 : 7E                  		ld	a,(hl)		; ** a - trk_Id
(1)  481/     1BA : 2B                  		dec	hl
(1)  482/     1BB : B9                  		cp	c
(1)  483/     1BC : 20 09               		jr	nz,.not_fnd
(1)  484/     1BE : 78                  		ld	a,b
(1)  485/     1BF : FE FF               		cp	-1
(1)  486/     1C1 : 28 09               		jr	z,.found
(1)  487/     1C3 : 7B                  		ld	a,e
(1)  488/     1C4 : B8                  		cp	b
(1)  489/     1C5 : 28 05               		jr	z,.found
(1)  490/     1C7 :                     .not_fnd:
(1)  491/     1C7 : 7E                  		ld	a,(hl)		; ** a - trk_status
(1)  492/     1C8 : B7                  		or	a
(1)  493/     1C9 : FA A6 01            		jp	m,.next
(1)  494/     1CC :                     .found:
(1)  495/     1CC : CF                  		rst	8
(1)  496/     1CD : AF                  		xor	a
(1)  497/     1CE : C9                  		ret
(1)  498/     1CF :                     
(1)  499/     1CF :                     ; ====================================================================
(1)  500/     1CF :                     ; ----------------------------------------------------------------
(1)  501/     1CF :                     ; MAIN Playback section
(1)  502/     1CF :                     ; ----------------------------------------------------------------
(1)  503/     1CF :                     
(1)  504/     1CF :                     ; ============================================================
(1)  505/     1CF :                     ; --------------------------------------------------------
(1)  506/     1CF :                     ; Read INTERNAL mini-impulse-tracker data
(1)  507/     1CF :                     ; --------------------------------------------------------
(1)  508/     1CF :                     
(1)  509/     1CF :                     upd_track:
(1)  510/     1CF : E7                  		rst	20h
(1)  511/     1D0 : FD 21 FB 13         		ld	iy,nikona_BuffList
(1)  512/     1D4 :                     .trk_buffrs:
(1)  513/     1D4 : CF                  		rst	8
(1)  514/     1D5 : FD 7E 00            		ld	a,(iy)
(1)  515/     1D8 : FE FF               		cp	-1
(1)  516/     1DA : C8                  		ret	z
(1)  517/     1DB : FD E5               		push	iy
(1)  518/     1DD : FD 6E 00            		ld	l,(iy)
(1)  519/     1E0 : FD 66 01            		ld	h,(iy+1)
(1)  520/     1E3 : CD F0 01            		call	.read_track
(1)  521/     1E6 : CF                  		rst	8
(1)  522/     1E7 : FD E1               		pop	iy
(1)  523/     1E9 : 11 10 00            		ld	de,10h
(1)  524/     1EC : FD 19               		add	iy,de
(1)  525/     1EE : 18 E4               		jr	.trk_buffrs
(1)  526/     1F0 :                     ; ----------------------------------------
(1)  527/     1F0 :                     ; iy - Track buffer
(1)  528/     1F0 :                     
(1)  529/     1F0 :                     .read_track:
(1)  530/     1F0 : CF                  		rst	8
(1)  531/     1F1 : E5                  		push	hl
(1)  532/     1F2 : FD E1               		pop	iy
(1)  533/     1F4 : FD 46 00            		ld	b,(iy+trk_status)	; b - Track status and settings
(1)  534/     1F7 : CB 78               		bit	7,b			; bit7: Track active?
(1)  535/     1F9 : C8                  		ret	z
(1)  536/     1FA : 78                  		ld	a,b
(1)  537/     1FB : FE FF               		cp	-1			; Mid-silence request?
(1)  538/     1FD : C8                  		ret	z
(1)  539/     1FE : 3A 2E 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  540/     201 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  541/     203 : 28 04               		jr	z,.sfxmd
(1)  542/     205 : CB 4F               		bit	1,a			; BEAT passed?
(1)  543/     207 : C8                  		ret	z			;
(1)  544/     208 : CF                  		rst	8
(1)  545/     209 :                     .sfxmd:
(1)  546/     209 : CB 47               		bit	0,a			; TICK passed?
(1)  547/     20B : C8                  		ret	z
(1)  548/     20C :                     	; *** Start reading notes ***
(1)  549/     20C : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  550/     20E : C4 E2 03            		call	nz,.first_fill
(1)  551/     211 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  552/     213 : C4 DB 03            		call	nz,.effect_fill
(1)  553/     216 : FD 7E 11            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  554/     219 : 3D                  		dec	a
(1)  555/     21A : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  556/     21D : B7                  		or	a
(1)  557/     21E : C0                  		ret	nz			; If TICK != 0, Exit
(1)  558/     21F : FD 7E 03            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  559/     222 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  560/     225 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  561/     228 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  562/     22B : 79                  		ld	a,c			; Check rowcount
(1)  563/     22C : B0                  		or	b
(1)  564/     22D : 20 13               		jr	nz,.row_active
(1)  565/     22F : FD 7E 12            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  566/     232 : 3C                  		inc	a
(1)  567/     233 : FD 77 12            		ld 	(iy+trk_currBlk),a
(1)  568/     236 : CD 66 03            		call	.set_track
(1)  569/     239 : FE FF               		cp	-1			; Track finished?
(1)  570/     23B : C8                  		ret	z
(1)  571/     23C : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  572/     23F : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  573/     242 :                     .row_active:
(1)  574/     242 : CF                  		rst	8
(1)  575/     243 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  576/     246 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  577/     249 :                     
(1)  578/     249 :                     ; --------------------------------
(1)  579/     249 :                     ; Main reading loop
(1)  580/     249 :                     ; --------------------------------
(1)  581/     249 :                     
(1)  582/     249 :                     .next_note:
(1)  583/     249 : FD 7E 10            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  584/     24C : B7                  		or	a
(1)  585/     24D : 20 16               		jr	nz,.decrow
(1)  586/     24F : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  587/     250 : B7                  		or	a
(1)  588/     251 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  589/     253 : FA 70 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  590/     256 : FD 77 10            		ld	(iy+trk_rowPause),a
(1)  591/     259 :                     
(1)  592/     259 :                     ; --------------------------------
(1)  593/     259 :                     ; Exit
(1)  594/     259 :                     ; --------------------------------
(1)  595/     259 :                     
(1)  596/     259 :                     .exit:
(1)  597/     259 : CF                  		rst	8
(1)  598/     25A : CD 2E 03            		call	.inc_cpatt
(1)  599/     25D : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  600/     260 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  601/     263 : 18 03               		jr	.decrow_e
(1)  602/     265 :                     .decrow:
(1)  603/     265 : FD 35 10            		dec	(iy+trk_rowPause)
(1)  604/     268 :                     .decrow_e:
(1)  605/     268 : 0B                  		dec	bc			; Decrement this row
(1)  606/     269 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  607/     26C : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  608/     26F : C9                  		ret
(1)  609/     270 :                     
(1)  610/     270 :                     ; --------------------------------
(1)  611/     270 :                     ; New note request
(1)  612/     270 :                     ; --------------------------------
(1)  613/     270 :                     
(1)  614/     270 :                     .has_note:
(1)  615/     270 : CF                  		rst	8
(1)  616/     271 : C5                  		push	bc			; Save rowcount
(1)  617/     272 : 4F                  		ld	c,a			; Backup control|channel to c
(1)  618/     273 : CD 2E 03            		call	.inc_cpatt		; Increment hl
(1)  619/     276 : 79                  		ld	a,c			; Read control|channel
(1)  620/     277 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  621/     27A : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  622/     27D : D5                  		push	de
(1)  623/     27E : DD E1               		pop	ix
(1)  624/     280 : E6 3F               		and	00111111b		; Filter channel bits
(1)  625/     282 : 87                  		add	a,a
(1)  626/     283 : 87                  		add	a,a
(1)  627/     284 : 87                  		add	a,a			; * 8
(1)  628/     285 : 16 00               		ld 	d,0
(1)  629/     287 : 5F                  		ld	e,a
(1)  630/     288 : CF                  		rst	8
(1)  631/     289 : DD 19               		add	ix,de
(1)  632/     28B : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  633/     28E : CB 71               		bit	6,c			; Next byte is new type?
(1)  634/     290 : 28 08               		jr	z,.old_type
(1)  635/     292 : 7E                  		ld	a,(hl)
(1)  636/     293 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  637/     296 : 47                  		ld	b,a			; Set to b
(1)  638/     297 : CD 2E 03            		call	.inc_cpatt
(1)  639/     29A :                     .old_type:
(1)  640/     29A :                     	; b - evinEVIN
(1)  641/     29A :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  642/     29A :                     	;     evin: byte is already stored on track-channel buffer
(1)  643/     29A :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  644/     29A : CF                  		rst	8
(1)  645/     29B : CB 40               		bit	0,b
(1)  646/     29D : 28 07               		jr	z,.no_note
(1)  647/     29F : 7E                  		ld	a,(hl)
(1)  648/     2A0 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  649/     2A3 : CD 2E 03            		call	.inc_cpatt
(1)  650/     2A6 :                     .no_note:
(1)  651/     2A6 : CB 48               		bit	1,b
(1)  652/     2A8 : 28 07               		jr	z,.no_ins
(1)  653/     2AA : 7E                  		ld	a,(hl)
(1)  654/     2AB : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  655/     2AE : CD 2E 03            		call	.inc_cpatt
(1)  656/     2B1 :                     .no_ins:
(1)  657/     2B1 : CB 50               		bit	2,b
(1)  658/     2B3 : 28 07               		jr	z,.no_vol
(1)  659/     2B5 : 7E                  		ld	a,(hl)
(1)  660/     2B6 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  661/     2B9 : CD 2E 03            		call	.inc_cpatt
(1)  662/     2BC :                     .no_vol:
(1)  663/     2BC : CB 58               		bit	3,b
(1)  664/     2BE : 28 0F               		jr	z,.no_eff
(1)  665/     2C0 : 7E                  		ld	a,(hl)
(1)  666/     2C1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  667/     2C4 : CD 2E 03            		call	.inc_cpatt
(1)  668/     2C7 : CF                  		rst	8
(1)  669/     2C8 : 7E                  		ld	a,(hl)
(1)  670/     2C9 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  671/     2CC : CD 2E 03            		call	.inc_cpatt
(1)  672/     2CF :                     .no_eff:
(1)  673/     2CF : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  674/     2D0 : 0F                  		rrca
(1)  675/     2D1 : 0F                  		rrca
(1)  676/     2D2 : 0F                  		rrca
(1)  677/     2D3 : 0F                  		rrca
(1)  678/     2D4 : E6 0F               		and	00001111b
(1)  679/     2D6 : 4F                  		ld	c,a
(1)  680/     2D7 : 78                  		ld	a,b
(1)  681/     2D8 : E6 0F               		and	00001111b
(1)  682/     2DA : B1                  		or	c
(1)  683/     2DB : CF                  		rst	8
(1)  684/     2DC : 4F                  		ld	c,a
(1)  685/     2DD : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  686/     2E0 : B1                  		or	c
(1)  687/     2E1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  688/     2E4 : C1                  		pop	bc		; Restore rowcount
(1)  689/     2E5 :                     
(1)  690/     2E5 :                     	; Check for effects that affect
(1)  691/     2E5 :                     	; internal playback:
(1)  692/     2E5 :                     	; Jump, Ticks, etc.
(1)  693/     2E5 : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  694/     2E7 : CA 49 02            		jp	z,.next_note
(1)  695/     2EA : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  696/     2ED : B7                  		or	a		; 00h = invalid effect
(1)  697/     2EE : CA 49 02            		jp	z,.next_note
(1)  698/     2F1 : FE 01               		cp	1		; Effect A: Tick set
(1)  699/     2F3 : CC 03 03            		call	z,.eff_A
(1)  700/     2F6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  701/     2F8 : CC 15 03            		call	z,.eff_B
(1)  702/     2FB : FE 03               		cp	3		; Effect C: Pattern break
(1)  703/     2FD : CA 2B 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  704/     300 : C3 49 02            		jp	.next_note
(1)  705/     303 :                     
(1)  706/     303 :                     ; ----------------------------------------
(1)  707/     303 :                     ; Effect A: Set ticks
(1)  708/     303 :                     ; ----------------------------------------
(1)  709/     303 :                     
(1)  710/     303 :                     .eff_A:
(1)  711/     303 : F5                  		push	af
(1)  712/     304 : CF                  		rst	8
(1)  713/     305 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  714/     308 : 1D                  		dec	e			; TODO: no minus protection
(1)  715/     309 : FD 73 03            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  716/     30C : FD 73 11            		ld	(iy+trk_tickTmr),e
(1)  717/     30F : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  718/     313 : F1                  		pop	af
(1)  719/     314 : C9                  		ret
(1)  720/     315 :                     
(1)  721/     315 :                     ; ----------------------------------------
(1)  722/     315 :                     ; Effect B: jump to a new block
(1)  723/     315 :                     ; ----------------------------------------
(1)  724/     315 :                     
(1)  725/     315 :                     .eff_B:
(1)  726/     315 : F5                  		push	af			; Save Flagbits
(1)  727/     316 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  728/     319 : FD 73 12            		ld 	(iy+trk_currBlk),e
(1)  729/     31C : CF                  		rst	8
(1)  730/     31D : FD 36 10 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  731/     321 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  732/     325 : FD CB 00 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  733/     329 : F1                  		pop	af
(1)  734/     32A : C9                  		ret
(1)  735/     32B :                     
(1)  736/     32B :                     ; ----------------------------------------
(1)  737/     32B :                     ; Effect C: Pattern break/exit
(1)  738/     32B :                     ;
(1)  739/     32B :                     ; Only used on SFX, arguments ignored.
(1)  740/     32B :                     ; ----------------------------------------
(1)  741/     32B :                     
(1)  742/     32B :                     .eff_C:
(1)  743/     32B : C3 CA 03            		jp	.track_end
(1)  744/     32E :                     
(1)  745/     32E :                     ; ----------------------------------------
(1)  746/     32E :                     ; Increment the current patt position
(1)  747/     32E :                     ; and recieve more data
(1)  748/     32E :                     ;
(1)  749/     32E :                     ; Breaks:
(1)  750/     32E :                     ; a,e
(1)  751/     32E :                     ; ----------------------------------------
(1)  752/     32E :                     
(1)  753/     32E :                     .inc_cpatt:
(1)  754/     32E : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  755/     331 : 7D                  		ld	a,l
(1)  756/     332 : 3C                  		inc	a
(1)  757/     333 : E6 3F               		and	MAX_RCACH-1
(1)  758/     335 : FE 3E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  759/     337 : 30 03               		jr	nc,.ran_out
(1)  760/     339 : B3                  		or	e
(1)  761/     33A : 6F                  		ld	l,a
(1)  762/     33B : C9                  		ret
(1)  763/     33C :                     .ran_out:
(1)  764/     33C : FD 6E 2E            		ld	l,(iy+trk_ChnCach)
(1)  765/     33F : E5                  		push	hl
(1)  766/     340 : C5                  		push	bc
(1)  767/     341 : 06 00               		ld	b,0
(1)  768/     343 : 4F                  		ld	c,a
(1)  769/     344 : CF                  		rst	8
(1)  770/     345 : 5D                  		ld	e,l
(1)  771/     346 : 54                  		ld	d,h
(1)  772/     347 : FD 6E 20            		ld	l,(iy+trk_RomCPatt)
(1)  773/     34A : FD 66 21            		ld	h,(iy+(trk_RomCPatt+1))
(1)  774/     34D : FD 7E 22            		ld	a,(iy+(trk_RomCPatt+2))
(1)  775/     350 : 09                  		add	hl,bc
(1)  776/     351 : CE 00               		adc	a,0
(1)  777/     353 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  778/     356 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  779/     359 : CF                  		rst	8
(1)  780/     35A : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  781/     35D : 01 40 00            		ld	bc,MAX_RCACH
(1)  782/     360 : CD CC 0E            		call	transferRom	; *** ROM ACCESS ***
(1)  783/     363 : C1                  		pop	bc
(1)  784/     364 : E1                  		pop	hl
(1)  785/     365 : C9                  		ret
(1)  786/     366 :                     
(1)  787/     366 :                     ; ----------------------------------------
(1)  788/     366 :                     ; Set track pattern by trk_currBlk
(1)  789/     366 :                     ; ----------------------------------------
(1)  790/     366 :                     
(1)  791/     366 :                     .set_track:
(1)  792/     366 : CF                  		rst	8
(1)  793/     367 : 16 00               		ld	d,0
(1)  794/     369 : FD 5E 12            		ld	e,(iy+trk_currBlk)	; e - current block
(1)  795/     36C : FD 6E 04            		ld	l,(iy+trk_Blocks)	; hl - block data
(1)  796/     36F : FD 66 05            		ld	h,(iy+(trk_Blocks+1))
(1)  797/     372 : 19                  		add	hl,de
(1)  798/     373 : 7E                  		ld	a,(hl)			; Read byte
(1)  799/     374 : FE FF               		cp	-1			; If block == -1, end track
(1)  800/     376 : CA CA 03            		jp	z,.track_end
(1)  801/     379 : E7                  		rst	20h			; dacfill
(1)  802/     37A : 07                  		rlca
(1)  803/     37B : 07                  		rlca
(1)  804/     37C : 57                  		ld	d,a
(1)  805/     37D : E6 FC               		and	11111100b
(1)  806/     37F : 5F                  		ld	e,a
(1)  807/     380 : 7A                  		ld	a,d
(1)  808/     381 : E6 03               		and	00000011b
(1)  809/     383 : 57                  		ld	d,a
(1)  810/     384 : FD 6E 06            		ld	l,(iy+trk_Patt)		; Read CACHE patt heads
(1)  811/     387 : FD 66 07            		ld	h,(iy+(trk_Patt+1))
(1)  812/     38A : CF                  		rst	8
(1)  813/     38B : 19                  		add	hl,de
(1)  814/     38C : 5E                  		ld	e,(hl)			; de - Pos
(1)  815/     38D : 23                  		inc	hl
(1)  816/     38E : 56                  		ld	d,(hl)
(1)  817/     38F : 23                  		inc	hl
(1)  818/     390 : 7E                  		ld	a,(hl)
(1)  819/     391 : 23                  		inc	hl
(1)  820/     392 : FD 77 0C            		ld	(iy+trk_Rows),a
(1)  821/     395 : 7E                  		ld	a,(hl)
(1)  822/     396 : 23                  		inc	hl
(1)  823/     397 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1)  824/     39A : FD 6E 23            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1)  825/     39D : FD 66 24            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1)  826/     3A0 : CF                  		rst	8
(1)  827/     3A1 : FD 7E 25            		ld	a,(iy+(trk_RomPatt+2))
(1)  828/     3A4 : 19                  		add	hl,de
(1)  829/     3A5 : CE 00               		adc	a,0
(1)  830/     3A7 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  831/     3AA : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  832/     3AD : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  833/     3B0 : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  834/     3B3 : FD 56 2F            		ld	d,(iy+(trk_ChnCach+1))
(1)  835/     3B6 : CF                  		rst	8
(1)  836/     3B7 : FD 73 0A            		ld	(iy+trk_Read),e
(1)  837/     3BA : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1)  838/     3BD : 0E 40               		ld	c,MAX_RCACH
(1)  839/     3BF : FD 36 0E 00         		ld	(iy+trk_cachHalf),0
(1)  840/     3C3 : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  841/     3C7 : C3 CC 0E            		jp	transferRom		; ** ROM access **
(1)  842/     3CA :                     
(1)  843/     3CA :                     ; ----------------------------------------
(1)  844/     3CA :                     ; **JUMP ONLY**
(1)  845/     3CA :                     
(1)  846/     3CA :                     .track_end:
(1)  847/     3CA : CD 93 04            		call	track_out
(1)  848/     3CD : CF                  		rst	8
(1)  849/     3CE : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  850/     3D2 : FD 36 11 00         		ld	(iy+trk_tickTmr),0
(1)  851/     3D6 : FD 36 00 00         		ld	(iy+trk_Status),0	; Disable track slot
(1)  852/     3DA : C9                  		ret
(1)  853/     3DB :                     
(1)  854/     3DB :                     ; ----------------------------------------
(1)  855/     3DB :                     ; Track refill
(1)  856/     3DB :                     ; ----------------------------------------
(1)  857/     3DB :                     
(1)  858/     3DB :                     .effect_fill:
(1)  859/     3DB : FD CB 00 AE         		res	5,(iy+trk_status)	; Reset refill-from-effect flag
(1)  860/     3DF : C3 66 03            		jp	.set_track
(1)  861/     3E2 :                     
(1)  862/     3E2 :                     ; ----------------------------------------
(1)  863/     3E2 :                     ; Track Start/Reset
(1)  864/     3E2 :                     ;
(1)  865/     3E2 :                     ; iy - Track buffer
(1)  866/     3E2 :                     ; ----------------------------------------
(1)  867/     3E2 :                     
(1)  868/     3E2 :                     .first_fill:
(1)  869/     3E2 :                     ; 		rst	20h
(1)  870/     3E2 : FD CB 00 B6         		res	6,(iy+trk_status)	; Reset FILL flag
(1)  871/     3E6 : CD 93 04            		call	track_out
(1)  872/     3E9 : FD 36 11 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1)  873/     3ED : FD 7E 02            		ld	a,(iy+trk_setBlk)	; Make start block as current block
(1)  874/     3F0 : CF                  		rst	8
(1)  875/     3F1 : FD 77 12            		ld 	(iy+trk_currBlk),a	; block
(1)  876/     3F4 : 11 00 00            		ld	de,0
(1)  877/     3F7 : 21 BB 16            		ld	hl,trkListCach		; Read MASTER Nicona track list
(1)  878/     3FA : FD 7E 01            		ld	a,(iy+trk_seqId)
(1)  879/     3FD : E6 07               		and	00000111b		; Filter sequence bits
(1)  880/     3FF : 87                  		add	a,a			; *4
(1)  881/     400 : 87                  		add	a,a
(1)  882/     401 : 5F                  		ld	e,a
(1)  883/     402 : 19                  		add	hl,de
(1)  884/     403 : 7E                  		ld	a,(hl)
(1)  885/     404 : 23                  		inc	hl
(1)  886/     405 : CB 7F               		bit	7,a
(1)  887/     407 : 28 04               		jr	z,.no_glbl
(1)  888/     409 : FD CB 00 C6         		set	0,(iy+trk_status)	; Enable GLOBAL sub-beats
(1)  889/     40D :                     .no_glbl:
(1)  890/     40D : E6 7F               		and	01111111b
(1)  891/     40F : FD 77 03            		ld	(iy+trk_tickSet),a
(1)  892/     412 : 7E                  		ld	a,(hl)			; Read and temporally
(1)  893/     413 : 23                  		inc	hl			; grab it's pointers
(1)  894/     414 : 4E                  		ld	c,(hl)
(1)  895/     415 : CF                  		rst	8
(1)  896/     416 : 23                  		inc	hl
(1)  897/     417 : 6E                  		ld	l,(hl)
(1)  898/     418 : 61                  		ld	h,c
(1)  899/     419 : 11 EC 16            		ld	de,headerOut
(1)  900/     41C : 0E 0C               		ld	c,0Ch
(1)  901/     41E : CD CC 0E            		call	transferRom		; ** ROM access **
(1)  902/     421 : DD 21 F7 16         		ld	ix,headerOut_e-1
(1)  903/     425 :                     
(1)  904/     425 :                     	; headerOut:
(1)  905/     425 :                     	; dc.l .blk,.pat,.ins
(1)  906/     425 :                     	; *** READING BACKWARDS
(1)  907/     425 : CD 7F 04            		call	.grab_rhead		; Instrument data
(1)  908/     428 : FD 4E 1F            		ld	c,(iy+trk_MaxIns)
(1)  909/     42B : CB 21               		sla	c			; *8
(1)  910/     42D : CB 21               		sla	c
(1)  911/     42F : CB 21               		sla	c
(1)  912/     431 : 78                  		ld	a,b
(1)  913/     432 : FD 5E 2C            		ld	e,(iy+trk_ChnCIns)
(1)  914/     435 : FD 56 2D            		ld	d,(iy+(trk_ChnCIns+1))
(1)  915/     438 : FD 73 08            		ld	(iy+trk_Instr),e
(1)  916/     43B : FD 72 09            		ld	(iy+(trk_Instr+1)),d
(1)  917/     43E : CF                  		rst	8
(1)  918/     43F : CD CC 0E            		call	transferRom		; ** ROM access **
(1)  919/     442 : CD 7F 04            		call	.grab_rhead		; Pattern data
(1)  920/     445 : FD 4E 1E            		ld	c,(iy+trk_MaxHdrs)
(1)  921/     448 : CB 21               		sla	c			; *4
(1)  922/     44A : CB 21               		sla	c
(1)  923/     44C : 78                  		ld	a,b
(1)  924/     44D : FD 75 23            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1)  925/     450 : FD 74 24            		ld	(iy+(trk_RomPatt+1)),h
(1)  926/     453 : FD 77 25            		ld	(iy+(trk_RomPatt+2)),a
(1)  927/     456 : CF                  		rst	8
(1)  928/     457 : FD 5E 2A            		ld	e,(iy+trk_ChnCHead)
(1)  929/     45A : FD 56 2B            		ld	d,(iy+(trk_ChnCHead+1))
(1)  930/     45D : FD 73 06            		ld	(iy+trk_Patt),e
(1)  931/     460 : FD 72 07            		ld	(iy+(trk_Patt+1)),d
(1)  932/     463 : CD CC 0E            		call	transferRom		; ** ROM access **
(1)  933/     466 : CD 7F 04            		call	.grab_rhead		; Block data
(1)  934/     469 : FD 4E 1D            		ld	c,(iy+trk_MaxBlks)
(1)  935/     46C : 78                  		ld	a,b
(1)  936/     46D : FD 5E 28            		ld	e,(iy+trk_ChnCBlk)
(1)  937/     470 : FD 56 29            		ld	d,(iy+(trk_ChnCBlk+1))
(1)  938/     473 : FD 73 04            		ld	(iy+trk_Blocks),e
(1)  939/     476 : FD 72 05            		ld	(iy+(trk_Blocks+1)),d
(1)  940/     479 : CD CC 0E            		call	transferRom		; ** ROM access **
(1)  941/     47C : C3 66 03            		jp	.set_track
(1)  942/     47F :                     
(1)  943/     47F :                     ; Read 68K pointer:
(1)  944/     47F :                     ; hl - 00xxxx
(1)  945/     47F :                     ;  b - xx0000
(1)  946/     47F :                     .grab_rhead:
(1)  947/     47F : DD 6E 00            		ld	l,(ix)
(1)  948/     482 : DD 2B               		dec	ix
(1)  949/     484 : CF                  		rst	8
(1)  950/     485 : DD 66 00            		ld	h,(ix)
(1)  951/     488 : DD 2B               		dec	ix
(1)  952/     48A : DD 46 00            		ld	b,(ix)
(1)  953/     48D : DD 2B               		dec	ix
(1)  954/     48F :                     ; 		ld	c,(ix)
(1)  955/     48F : CF                  		rst	8
(1)  956/     490 : DD 2B               		dec	ix
(1)  957/     492 : C9                  		ret
(1)  958/     493 :                     
(1)  959/     493 :                     ; ----------------------------------------
(1)  960/     493 :                     ; Reset tracker channels
(1)  961/     493 :                     ;
(1)  962/     493 :                     ; iy - Track buffer
(1)  963/     493 :                     ;
(1)  964/     493 :                     ; Breaks:
(1)  965/     493 :                     ; ix
(1)  966/     493 :                     ; ----------------------------------------
(1)  967/     493 :                     
(1)  968/     493 :                     ; ----------------------------------------
(1)  969/     493 :                     ; Reset tracker channels
(1)  970/     493 :                     ;
(1)  971/     493 :                     ; iy - Track buffer
(1)  972/     493 :                     ;
(1)  973/     493 :                     ; Breaks:
(1)  974/     493 :                     ; de,ix
(1)  975/     493 :                     ; ----------------------------------------
(1)  976/     493 :                     
(1)  977/     493 :                     track_out:
(1)  978/     493 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  979/     496 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  980/     499 : D5                  		push	de
(1)  981/     49A : DD E1               		pop	ix
(1)  982/     49C : CF                  		rst	8
(1)  983/     49D : 11 08 00            		ld	de,8
(1)  984/     4A0 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	; MAX_TRKCHN
(1)  985/     4A3 : AF                  		xor	a
(1)  986/     4A4 :                     .clrfe:
(1)  987/     4A4 : DD 7E 01            		ld	a,(ix+chnl_Chip)
(1)  988/     4A7 : B7                  		or	a
(1)  989/     4A8 : 28 1D               		jr	z,.nochip
(1)  990/     4AA : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1)  991/     4AE : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1)  992/     4B2 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1)  993/     4B6 : CF                  		rst	8
(1)  994/     4B7 : FD 36 05 00         		ld	(iy+chnl_EffId),0
(1)  995/     4BB : FD 36 06 00         		ld	(iy+chnl_EffArg),0
(1)  996/     4BF : FD 36 03 00         		ld	(iy+chnl_Ins),0
(1)  997/     4C3 : FD 36 07 00         		ld	(iy+chnl_Type),0
(1)  998/     4C7 :                     .nochip:
(1)  999/     4C7 : DD 19               		add	ix,de
(1) 1000/     4C9 : 10 D9               		djnz	.clrfe
(1) 1001/     4CB : 3E 01               		ld	a,1
(1) 1002/     4CD : 32 3F 00            		ld	(marsUpd),a
(1) 1003/     4D0 : C9                  		ret
(1) 1004/     4D1 :                     
(1) 1005/     4D1 :                     ; ----------------------------------------
(1) 1006/     4D1 :                     ; Load tracklist from ROM
(1) 1007/     4D1 :                     ;
(1) 1008/     4D1 :                     ; a - SeqID
(1) 1009/     4D1 :                     ; ----------------------------------------
(1) 1010/     4D1 :                     
(1) 1011/     4D1 :                     get_RomTrcks:
(1) 1012/     4D1 : E6 F8               		and	11111000b
(1) 1013/     4D3 : 5F                  		ld	e,a
(1) 1014/     4D4 : 3A 3E 00            		ld	a,(trkListPage)
(1) 1015/     4D7 : BB                  		cp	e
(1) 1016/     4D8 : C8                  		ret	z
(1) 1017/     4D9 :                     init_RomTrcks:
(1) 1018/     4D9 : 7B                  		ld	a,e
(1) 1019/     4DA : 32 3E 00            		ld	(trkListPage),a
(1) 1020/     4DD : 07                  		rlca
(1) 1021/     4DE : 07                  		rlca			; 10h*4=40h
(1) 1022/     4DF : 57                  		ld	d,a
(1) 1023/     4E0 : E6 E0               		and	11100000b
(1) 1024/     4E2 : 5F                  		ld	e,a
(1) 1025/     4E3 : 7A                  		ld	a,d
(1) 1026/     4E4 : CF                  		rst	8
(1) 1027/     4E5 : E6 03               		and	00000011b	; * 40h
(1) 1028/     4E7 : 57                  		ld	d,a
(1) 1029/     4E8 : 21 2D 14            		ld	hl,nikona_SetMstrList
(1) 1030/     4EB : 23                  		inc	hl
(1) 1031/     4EC : 7E                  		ld	a,(hl)
(1) 1032/     4ED : 23                  		inc	hl
(1) 1033/     4EE : 4E                  		ld	c,(hl)
(1) 1034/     4EF : 23                  		inc	hl
(1) 1035/     4F0 : 6E                  		ld	l,(hl)
(1) 1036/     4F1 : CF                  		rst	8
(1) 1037/     4F2 : 61                  		ld	h,c
(1) 1038/     4F3 : 19                  		add	hl,de
(1) 1039/     4F4 : CE 00               		adc	a,0
(1) 1040/     4F6 : 11 BB 16            		ld	de,trkListCach
(1) 1041/     4F9 : 01 20 00            		ld	bc,4*8
(1) 1042/     4FC : C3 CC 0E            		jp	transferRom	; *** ROM ACCESS ***
(1) 1043/     4FF :                     
(1) 1044/     4FF :                     ; ============================================================
(1) 1045/     4FF :                     ; --------------------------------------------------------
(1) 1046/     4FF :                     ; Convert notes to soundchips
(1) 1047/     4FF :                     ; --------------------------------------------------------
(1) 1048/     4FF :                     
(1) 1049/     4FF :                     set_chips:
(1) 1050/     4FF : E7                  		rst	20h			; Refill wave
(1) 1051/     500 : CD 8B 0E            		call	get_tick
(1) 1052/     503 : FD 21 FB 13         		ld	iy,nikona_BuffList
(1) 1053/     507 :                     .trk_buffrs:
(1) 1054/     507 : CF                  		rst	8
(1) 1055/     508 : FD 7E 00            		ld	a,(iy)
(1) 1056/     50B : FE FF               		cp	-1
(1) 1057/     50D : 28 15               		jr	z,proc_chips
(1) 1058/     50F : FD E5               		push	iy
(1) 1059/     511 : FD 6E 00            		ld	l,(iy)
(1) 1060/     514 : FD 66 01            		ld	h,(iy+1)
(1) 1061/     517 : CD 44 05            		call	tblbuff_read
(1) 1062/     51A : CF                  		rst	8
(1) 1063/     51B : FD E1               		pop	iy
(1) 1064/     51D : 11 10 00            		ld	de,10h
(1) 1065/     520 : FD 19               		add	iy,de
(1) 1066/     522 : 18 E3               		jr	.trk_buffrs
(1) 1067/     524 :                     proc_chips:
(1) 1068/     524 : E7                  		rst	20h
(1) 1069/     525 : FD 21 73 14         		ld	iy,tblPSGN		; PSG Noise (FIRST)
(1) 1070/     529 : CD E7 06            		call	dtbl_singl
(1) 1071/     52C : 00                  		nop	; sync
(1) 1072/     52D : 00                  		nop
(1) 1073/     52E : FD 21 41 14         		ld	iy,tblPSG		; PSG Squares
(1) 1074/     532 : CD D1 06            		call	dtbl_multi
(1) 1075/     535 : FD 21 83 14         		ld	iy,tblFM
(1) 1076/     539 : CD D1 06            		call	dtbl_multi
(1) 1077/     53C : FD 21 E5 14         		ld	iy,tblPWM
(1) 1078/     540 : CD D1 06            		call	dtbl_multi
(1) 1079/     543 : C9                  		ret
(1) 1080/     544 :                     
(1) 1081/     544 :                     ; ----------------------------------------
(1) 1082/     544 :                     ; Read current track
(1) 1083/     544 :                     tblbuff_read:
(1) 1084/     544 : E5                  		push	hl
(1) 1085/     545 : FD E1               		pop	iy
(1) 1086/     547 : FD 46 00            		ld	b,(iy+trk_status)	; bit7: Track active?
(1) 1087/     54A : CB 78               		bit	7,b
(1) 1088/     54C : C8                  		ret	z
(1) 1089/     54D :                     ; 		ret
(1) 1090/     54D :                     ; .go_read:
(1) 1091/     54D : 78                  		ld	a,b			; trk_Status == -1?
(1) 1092/     54E : FE FF               		cp	-1
(1) 1093/     550 : C2 5A 05            		jp	nz,.track_cont
(1) 1094/     553 : CD 93 04            		call	track_out
(1) 1095/     556 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1096/     55A :                     .track_cont:
(1) 1097/     55A : CF                  		rst	8
(1) 1098/     55B : FD 6E 26            		ld	l,(iy+trk_ChnList)
(1) 1099/     55E : FD 66 27            		ld	h,(iy+(trk_ChnList+1))
(1) 1100/     561 : E5                  		push	hl
(1) 1101/     562 : DD E1               		pop	ix			; iy - channel list
(1) 1102/     564 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	;MAX_TRKCHN
(1) 1103/     567 :                     
(1) 1104/     567 :                     ; ** Needs special delays to
(1) 1105/     567 :                     ; keep the samplerate
(1) 1106/     567 :                     .next_chnl:
(1) 1107/     567 : C5                  		push	bc
(1) 1108/     568 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1109/     56B : E6 0F               		and	00001111b
(1) 1110/     56D : C4 7A 05            		call	nz,.do_chip
(1) 1111/     570 : C1                  		pop	bc
(1) 1112/     571 : 11 08 00            		ld	de,8
(1) 1113/     574 : DD 19               		add	ix,de
(1) 1114/     576 : CF                  		rst	8	; wave sync
(1) 1115/     577 : 10 EE               		djnz	.next_chnl
(1) 1116/     579 : C9                  		ret
(1) 1117/     57A :                     
(1) 1118/     57A :                     ; ----------------------------------------
(1) 1119/     57A :                     ; iy - Track buffer
(1) 1120/     57A :                     ; ix - Current channel
(1) 1121/     57A :                     
(1) 1122/     57A :                     .do_chip:
(1) 1123/     57A : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1124/     57D : B7                  		or	a
(1) 1125/     57E : C8                  		ret	z
(1) 1126/     57F : FD 56 1F            		ld	d,(iy+trk_MaxIns)
(1) 1127/     582 : BA                  		cp	d
(1) 1128/     583 : C8                  		ret	z
(1) 1129/     584 : D0                  		ret	nc
(1) 1130/     585 : 3D                  		dec	a			; ins-1
(1) 1131/     586 : 0F                  		rrca				; * 08h
(1) 1132/     587 : 0F                  		rrca
(1) 1133/     588 : 0F                  		rrca
(1) 1134/     589 : 0F                  		rrca
(1) 1135/     58A : CF                  		rst	8
(1) 1136/     58B : 0F                  		rrca
(1) 1137/     58C : 57                  		ld	d,a
(1) 1138/     58D : E6 F8               		and	11111000b
(1) 1139/     58F : 5F                  		ld	e,a
(1) 1140/     590 : 7A                  		ld	a,d
(1) 1141/     591 : E6 07               		and	00000111b
(1) 1142/     593 : 57                  		ld	d,a
(1) 1143/     594 : FD 6E 08            		ld	l,(iy+trk_Instr)	; hl - Intrument data
(1) 1144/     597 : FD 66 09            		ld	h,(iy+(trk_Instr+1))
(1) 1145/     59A : 7B                  		ld	a,e
(1) 1146/     59B : 19                  		add	hl,de
(1) 1147/     59C : CF                  		rst	8
(1) 1148/     59D : E5                  		push	hl			; <-- save ins pos
(1) 1149/     59E : CD B0 05            		call	.grab_link
(1) 1150/     5A1 : D1                  		pop	de			; --> recover as de
(1) 1151/     5A2 : FE FF               		cp	-1			; Found any link?
(1) 1152/     5A4 : C8                  		ret	z
(1) 1153/     5A5 : FD 7E 14            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1154/     5A8 : 23                  		inc	hl			; Skip link
(1) 1155/     5A9 : 23                  		inc	hl
(1) 1156/     5AA : 77                  		ld	(hl),a			; Write priority
(1) 1157/     5AB : 23                  		inc	hl
(1) 1158/     5AC : 73                  		ld	(hl),e			; Write Instrument pointer
(1) 1159/     5AD : 23                  		inc	hl
(1) 1160/     5AE : 72                  		ld	(hl),d
(1) 1161/     5AF : C9                  		ret
(1) 1162/     5B0 :                     
(1) 1163/     5B0 :                     ; ----------------------------------------
(1) 1164/     5B0 :                     ; Search for a linked channel on the
(1) 1165/     5B0 :                     ; chip table
(1) 1166/     5B0 :                     ;
(1) 1167/     5B0 :                     ; Input:
(1) 1168/     5B0 :                     ; iy - Track buffer
(1) 1169/     5B0 :                     ; ix - Current channel
(1) 1170/     5B0 :                     ; hl - Intrument position
(1) 1171/     5B0 :                     ;
(1) 1172/     5B0 :                     ; Returns:
(1) 1173/     5B0 :                     ; hl - Channel table to use
(1) 1174/     5B0 :                     ;  a - Return value:
(1) 1175/     5B0 :                     ;       0 - Found
(1) 1176/     5B0 :                     ;      -1 - Not found
(1) 1177/     5B0 :                     ; ----------------------------------------
(1) 1178/     5B0 :                     
(1) 1179/     5B0 :                     .grab_link:
(1) 1180/     5B0 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1181/     5B1 : E6 F0               		and	11110000b		; Filter 0F0h
(1) 1182/     5B3 : F2 9C 06            		jp	p,.set_asfull		; Set -1 if non-minus.
(1) 1183/     5B6 : 5F                  		ld	e,a			; Save NEW chip to e
(1) 1184/     5B7 : CF                  		rst	8
(1) 1185/     5B8 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - check OUR chip
(1) 1186/     5BB : E6 F0               		and	11110000b		; Filter bits too.
(1) 1187/     5BD : CA 34 06            		jp	z,.new_chip		; If zero: Set NEW chip
(1) 1188/     5C0 : BB                  		cp 	e
(1) 1189/     5C1 : CA D7 05            		jp	z,.srch_link		; If same: Grab our link
(1) 1190/     5C4 : 57                  		ld	d,a			; d - OLD chip
(1) 1191/     5C5 : D5                  		push	de
(1) 1192/     5C6 : CD D7 05            		call	.srch_link		; Search our link (first)
(1) 1193/     5C9 : D1                  		pop	de
(1) 1194/     5CA : FE FF               		cp	-1
(1) 1195/     5CC : C8                  		ret	z
(1) 1196/     5CD : CD B9 06            		call	.reset_link
(1) 1197/     5D0 : DD 36 01 00         		ld	(ix+chnl_Chip),0
(1) 1198/     5D4 : C3 33 06            		jp	.do_newchip
(1) 1199/     5D7 :                     
(1) 1200/     5D7 :                     ; ** RELINK **
(1) 1201/     5D7 :                     ; e - Our current chip
(1) 1202/     5D7 :                     .srch_link:
(1) 1203/     5D7 : CD 9F 06            		call	.pick_tbl	; Pick our table
(1) 1204/     5DA : B7                  		or	a
(1) 1205/     5DB : FA 20 06            		jp	m,.singl_link
(1) 1206/     5DE : DD E5               		push	ix		; copy ix to bc
(1) 1207/     5E0 : C1                  		pop	bc
(1) 1208/     5E1 :                     .srch_lloop:
(1) 1209/     5E1 : CF                  		rst	8
(1) 1210/     5E2 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1211/     5E3 : FE FF               		cp	-1		; If -1, return -1
(1) 1212/     5E5 : 28 49               		jr	z,.refill
(1) 1213/     5E7 : B9                  		cp	c
(1) 1214/     5E8 : 20 07               		jr	nz,.invldl
(1) 1215/     5EA : 23                  		inc	hl
(1) 1216/     5EB : CF                  		rst	8
(1) 1217/     5EC : 7E                  		ld	a,(hl)
(1) 1218/     5ED : 2B                  		dec	hl
(1) 1219/     5EE : B8                  		cp	b
(1) 1220/     5EF : 28 09               		jr	z,.reroll
(1) 1221/     5F1 :                     .invldl:
(1) 1222/     5F1 : D5                  		push	de
(1) 1223/     5F2 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1224/     5F5 : CF                  		rst	8
(1) 1225/     5F6 : 19                  		add	hl,de
(1) 1226/     5F7 : D1                  		pop	de
(1) 1227/     5F8 : 18 E7               		jr	.srch_lloop
(1) 1228/     5FA :                     .reroll:
(1) 1229/     5FA :                     	; *** Special re-roll check ***
(1) 1230/     5FA : E5                  		push	hl
(1) 1231/     5FB : 01 05 00            		ld	bc,5		; <-- fake "iy+05h"
(1) 1232/     5FE : 09                  		add	hl,bc
(1) 1233/     5FF : 4E                  		ld	c,(hl)		; c - ID
(1) 1234/     600 : E1                  		pop	hl
(1) 1235/     601 : 7B                  		ld	a,e
(1) 1236/     602 : FE 80               		cp	80h		; PSG?
(1) 1237/     604 : 28 02               		jr	z,.chk_psg
(1) 1238/     606 :                     ; 		cp	0A0h		; FM normal?
(1) 1239/     606 :                     ; 		jr	z,.chk_fm
(1) 1240/     606 : 18 26               		jr	.rnot_psg
(1) 1241/     608 :                     .chk_psg:
(1) 1242/     608 : 3A EA 16            		ld	a,(psgHatMode)
(1) 1243/     60B : E6 03               		and	011b
(1) 1244/     60D : FE 03               		cp	011b
(1) 1245/     60F : 20 1D               		jr	nz,.rnot_psg
(1) 1246/     611 : 79                  		ld	a,c
(1) 1247/     612 : FE 02               		cp	2
(1) 1248/     614 : 20 18               		jr	nz,.rnot_psg
(1) 1249/     616 : CF                  		rst	8
(1) 1250/     617 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1251/     619 : CD B9 06            		call	.reset_link	; on PSG3
(1) 1252/     61C : C3 9C 06            		jp	.set_asfull
(1) 1253/     61F : 00                  		nop
(1) 1254/     620 :                     
(1) 1255/     620 :                     ; ----------------------
(1) 1256/     620 :                     ; PSGN/FM3/FM6
(1) 1257/     620 :                     .singl_link:
(1) 1258/     620 : DD E5               		push	ix			; copy ix to bc
(1) 1259/     622 : C1                  		pop	bc
(1) 1260/     623 : 23                  		inc	hl			; Read MSB first
(1) 1261/     624 : CF                  		rst	8
(1) 1262/     625 : 7E                  		ld	a,(hl)
(1) 1263/     626 : 2B                  		dec	hl
(1) 1264/     627 : B8                  		cp	b			; MSB match?
(1) 1265/     628 : 20 06               		jr	nz,.refill
(1) 1266/     62A : 7E                  		ld	a,(hl)			; Read LSB
(1) 1267/     62B : B9                  		cp	c
(1) 1268/     62C : 20 02               		jr	nz,.refill
(1) 1269/     62E :                     
(1) 1270/     62E :                     ; ----------------------
(1) 1271/     62E :                     
(1) 1272/     62E :                     .rnot_psg:
(1) 1273/     62E : AF                  		xor	a
(1) 1274/     62F : C9                  		ret
(1) 1275/     630 :                     ; ***
(1) 1276/     630 :                     .refill:
(1) 1277/     630 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1278/     633 :                     .do_newchip:
(1) 1279/     633 : 7B                  		ld	a,e
(1) 1280/     634 :                     
(1) 1281/     634 :                     ; *** NEW CHIP ***
(1) 1282/     634 :                     ; e - Chip to set
(1) 1283/     634 :                     .new_chip:
(1) 1284/     634 : 7B                  		ld	a,e			; Read NEW chip
(1) 1285/     635 : B7                  		or	a			; If non-minus, exit.
(1) 1286/     636 : F0                  		ret	p
(1) 1287/     637 : CD 9F 06            		call	.pick_tbl
(1) 1288/     63A : CF                  		rst	8
(1) 1289/     63B : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1290/     63E : B7                  		or	a
(1) 1291/     63F : FA 8A 06            		jp	m,.singl_free
(1) 1292/     642 : E5                  		push	hl			; Backup START table
(1) 1293/     643 :                     ; PASS 1
(1) 1294/     643 :                     .srch_free:
(1) 1295/     643 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1296/     644 : FE FF               		cp	-1			; If -1, return -1
(1) 1297/     646 : 28 0C               		jr	z,.pass_2
(1) 1298/     648 : 23                  		inc	hl
(1) 1299/     649 : 46                  		ld	b,(hl)			; Read MSB
(1) 1300/     64A : CF                  		rst	8
(1) 1301/     64B : 2B                  		dec	hl
(1) 1302/     64C : B0                  		or	b
(1) 1303/     64D : 28 26               		jr	z,.new_link_z
(1) 1304/     64F : CD 6B 06            		call	.nextsrch_tbl
(1) 1305/     652 : 18 EF               		jr	.srch_free
(1) 1306/     654 :                     ; PASS 2
(1) 1307/     654 :                     .pass_2:
(1) 1308/     654 : CF                  		rst	8
(1) 1309/     655 : E1                  		pop	hl
(1) 1310/     656 :                     .next_prio:
(1) 1311/     656 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1312/     657 : FE FF               		cp	-1		; If -1, return -1
(1) 1313/     659 : C8                  		ret	z
(1) 1314/     65A : 23                  		inc	hl
(1) 1315/     65B : 23                  		inc	hl
(1) 1316/     65C : 7E                  		ld	a,(hl)
(1) 1317/     65D : 2B                  		dec	hl
(1) 1318/     65E : 2B                  		dec	hl
(1) 1319/     65F : B9                  		cp	c
(1) 1320/     660 : 38 17               		jr	c,.new_link_o
(1) 1321/     662 : B7                  		or	a
(1) 1322/     663 : 28 14               		jr	z,.new_link
(1) 1323/     665 : CF                  		rst	8
(1) 1324/     666 : CD 6B 06            		call	.nextsrch_tbl
(1) 1325/     669 : 18 EB               		jr	.next_prio
(1) 1326/     66B :                     
(1) 1327/     66B :                     .nextsrch_tbl:
(1) 1328/     66B : D5                  		push	de
(1) 1329/     66C : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1330/     66F : 19                  		add	hl,de
(1) 1331/     670 : D1                  		pop	de
(1) 1332/     671 : CF                  		rst	8
(1) 1333/     672 : 00                  		nop	; wave sync
(1) 1334/     673 : 00                  		nop
(1) 1335/     674 : C9                  		ret
(1) 1336/     675 :                     .new_link_z:
(1) 1337/     675 : 33                  		inc	sp		; skip backup
(1) 1338/     676 : 33                  		inc	sp
(1) 1339/     677 : 18 00               		jr	.new_link
(1) 1340/     679 :                     
(1) 1341/     679 :                     ; OVERWRITE link
(1) 1342/     679 :                     .new_link_o:
(1) 1343/     679 :                     
(1) 1344/     679 :                     ; NEW link
(1) 1345/     679 :                     .new_link:
(1) 1346/     679 : CF                  		rst	8
(1) 1347/     67A : 23                  		inc	hl
(1) 1348/     67B : 23                  		inc	hl
(1) 1349/     67C :                     ; hl+2
(1) 1350/     67C :                     .l_hiprio:
(1) 1351/     67C : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1352/     67F : DD E5               		push	ix
(1) 1353/     681 : D1                  		pop	de
(1) 1354/     682 : CF                  		rst	8
(1) 1355/     683 : 71                  		ld	(hl),c		; write priority
(1) 1356/     684 : 2B                  		dec	hl		; -1
(1) 1357/     685 : 72                  		ld 	(hl),d		; MSB
(1) 1358/     686 : 2B                  		dec	hl
(1) 1359/     687 : 73                  		ld	(hl),e		; LSB
(1) 1360/     688 : AF                  		xor	a
(1) 1361/     689 : C9                  		ret
(1) 1362/     68A :                     ; Single slot
(1) 1363/     68A :                     .singl_free:
(1) 1364/     68A : CF                  		rst	8
(1) 1365/     68B : 46                  		ld	b,(hl)
(1) 1366/     68C : 23                  		inc	hl
(1) 1367/     68D : 7E                  		ld	a,(hl)
(1) 1368/     68E : 23                  		inc	hl
(1) 1369/     68F : B0                  		or	b
(1) 1370/     690 : 28 EA               		jr	z,.l_hiprio
(1) 1371/     692 : 7E                  		ld	a,(hl)
(1) 1372/     693 : B9                  		cp	c
(1) 1373/     694 : 28 E6               		jr	z,.l_hiprio
(1) 1374/     696 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1375/     698 : B7                  		or	a
(1) 1376/     699 : 28 E1               		jr	z,.l_hiprio
(1) 1377/     69B :                     .sngl_sprio:
(1) 1378/     69B : CF                  		rst	8
(1) 1379/     69C :                     
(1) 1380/     69C :                     ; Set "can't use" table flag
(1) 1381/     69C :                     .set_asfull:
(1) 1382/     69C : 3E FF               		ld	a,-1
(1) 1383/     69E : C9                  		ret
(1) 1384/     69F :                     
(1) 1385/     69F :                     ; Pick chip table
(1) 1386/     69F :                     ; In:
(1) 1387/     69F :                     ;  e - ID
(1) 1388/     69F :                     ;
(1) 1389/     69F :                     ; Out:
(1) 1390/     69F :                     ; hl - Table
(1) 1391/     69F :                     .pick_tbl:
(1) 1392/     69F : D5                  		push	de
(1) 1393/     6A0 : 0F                  		rrca
(1) 1394/     6A1 : 0F                  		rrca
(1) 1395/     6A2 : 0F                  		rrca
(1) 1396/     6A3 : 0F                  		rrca
(1) 1397/     6A4 : E6 07               		and	00000111b
(1) 1398/     6A6 : 87                  		add	a,a
(1) 1399/     6A7 : 21 31 14            		ld	hl,tblList
(1) 1400/     6AA : E5                  		push	hl
(1) 1401/     6AB : 16 00               		ld	d,0
(1) 1402/     6AD : 5F                  		ld	e,a
(1) 1403/     6AE : 19                  		add	hl,de
(1) 1404/     6AF : 5E                  		ld	e,(hl)
(1) 1405/     6B0 : 23                  		inc	hl
(1) 1406/     6B1 : 7E                  		ld	a,(hl)
(1) 1407/     6B2 : 57                  		ld	d,a
(1) 1408/     6B3 : CB BA               		res	7,d
(1) 1409/     6B5 : E1                  		pop	hl
(1) 1410/     6B6 : 19                  		add	hl,de
(1) 1411/     6B7 : D1                  		pop	de
(1) 1412/     6B8 : C9                  		ret
(1) 1413/     6B9 :                     
(1) 1414/     6B9 :                     ; d - Silence chip
(1) 1415/     6B9 :                     ;
(1) 1416/     6B9 :                     ; Uses:
(1) 1417/     6B9 :                     ; bc
(1) 1418/     6B9 :                     .reset_link:
(1) 1419/     6B9 : CF                  		rst	8
(1) 1420/     6BA : 36 00               		ld	(hl),0			; Delete link
(1) 1421/     6BC : 23                  		inc	hl
(1) 1422/     6BD : 36 00               		ld	(hl),0
(1) 1423/     6BF : 23                  		inc	hl
(1) 1424/     6C0 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1425/     6C1 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1426/     6C4 : 09                  		add	hl,bc
(1) 1427/     6C5 : 06 04               		ld	b,8/2
(1) 1428/     6C7 :                     .clrfull:
(1) 1429/     6C7 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1430/     6C9 : 23                  		inc	hl
(1) 1431/     6CA : 36 00               		ld	(hl),0
(1) 1432/     6CC : 23                  		inc	hl
(1) 1433/     6CD : CF                  		rst	8
(1) 1434/     6CE : 10 F7               		djnz	.clrfull
(1) 1435/     6D0 : C9                  		ret
(1) 1436/     6D1 :                     
(1) 1437/     6D1 :                     ; ============================================
(1) 1438/     6D1 :                     ; ----------------------------------------
(1) 1439/     6D1 :                     ; Process chip using it's table
(1) 1440/     6D1 :                     ;
(1) 1441/     6D1 :                     ; iy - table to read
(1) 1442/     6D1 :                     ;  c - Chip ID
(1) 1443/     6D1 :                     ; ----------------------------------------
(1) 1444/     6D1 :                     
(1) 1445/     6D1 :                     dtbl_multi:
(1) 1446/     6D1 : FD 7E 00            		ld	a,(iy)
(1) 1447/     6D4 : FE FF               		cp	-1
(1) 1448/     6D6 : C8                  		ret	z
(1) 1449/     6D7 : CD E8 06            		call	dtbl_frommul
(1) 1450/     6DA : CF                  		rst	8
(1) 1451/     6DB : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1452/     6DE : FD 19               		add	iy,de
(1) 1453/     6E0 : 00                  		nop	; WAVE SYNC
(1) 1454/     6E1 : 00                  		nop
(1) 1455/     6E2 : 00                  		nop
(1) 1456/     6E3 : 00                  		nop
(1) 1457/     6E4 : CF                  		rst	8
(1) 1458/     6E5 : 18 EA               		jr	dtbl_multi
(1) 1459/     6E7 :                     dtbl_singl:
(1) 1460/     6E7 : CF                  		rst	8
(1) 1461/     6E8 :                     
(1) 1462/     6E8 :                     dtbl_frommul:
(1) 1463/     6E8 : FD 5E 00            		ld	e,(iy)
(1) 1464/     6EB : FD 56 01            		ld	d,(iy+1)
(1) 1465/     6EE : 7A                  		ld	a,d
(1) 1466/     6EF : B3                  		or	e
(1) 1467/     6F0 : 20 53               		jr	nz,.linked
(1) 1468/     6F2 : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1469/     6F5 : B7                  		or	a
(1) 1470/     6F6 : F0                  		ret	p
(1) 1471/     6F7 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1472/     6FA : CF                  		rst	8
(1) 1473/     6FB : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1474/     6FF :                     
(1) 1475/     6FF :                     ; ----------------------------------------
(1) 1476/     6FF :                     ; chip-silence request
(1) 1477/     6FF :                     ; iy - Table
(1) 1478/     6FF : E6 F0               		and	11110000b
(1) 1479/     701 : FE 80               		cp	80h
(1) 1480/     703 : 28 1A               		jr	z,.siln_psg
(1) 1481/     705 : FE 90               		cp	90h
(1) 1482/     707 : 28 12               		jr	z,.siln_psg_n
(1) 1483/     709 : FE A0               		cp	0A0h
(1) 1484/     70B : 28 1C               		jr	z,.siln_fm
(1) 1485/     70D : FE B0               		cp	0B0h
(1) 1486/     70F : 28 18               		jr	z,.siln_fm
(1) 1487/     711 : CF                  		rst	8
(1) 1488/     712 : FE C0               		cp	0C0h
(1) 1489/     714 : 28 10               		jr	z,.siln_dac
(1) 1490/     716 : FE D0               		cp	0D0h
(1) 1491/     718 : 28 15               		jr	z,.siln_pwm
(1) 1492/     71A : C9                  		ret
(1) 1493/     71B :                     .siln_psg_n:
(1) 1494/     71B : AF                  		xor	a
(1) 1495/     71C : 32 EA 16            		ld	(psgHatMode),a
(1) 1496/     71F :                     .siln_psg:
(1) 1497/     71F : CF                  		rst	8
(1) 1498/     720 : DD 21 7F 16         		ld	ix,psgcom
(1) 1499/     724 : 18 13               		jr	.rcyl_com
(1) 1500/     726 :                     
(1) 1501/     726 :                     ; --------------------------------
(1) 1502/     726 :                     
(1) 1503/     726 :                     .siln_dac:
(1) 1504/     726 : CD E4 10            		call	dac_off
(1) 1505/     729 :                     .siln_fm:
(1) 1506/     729 : CD D2 0C            		call	.fm_keyoff
(1) 1507/     72C : C3 DA 0C            		jp	.fm_tloff
(1) 1508/     72F :                     
(1) 1509/     72F :                     ; --------------------------------
(1) 1510/     72F :                     
(1) 1511/     72F :                     .siln_pwm:
(1) 1512/     72F : 3E 01               		ld	a,1
(1) 1513/     731 : 32 3F 00            		ld	(marsUpd),a
(1) 1514/     734 : CF                  		rst	8
(1) 1515/     735 : DD 21 47 16         		ld	ix,pwmcom
(1) 1516/     739 :                     .rcyl_com:
(1) 1517/     739 : 06 00               		ld	b,0
(1) 1518/     73B : FD 4E 05            		ld	c,(iy+05h)
(1) 1519/     73E : DD 09               		add	ix,bc
(1) 1520/     740 : DD 36 00 04         		ld	(ix),100b
(1) 1521/     744 : C9                  		ret
(1) 1522/     745 :                     
(1) 1523/     745 :                     ; ----------------------------------------
(1) 1524/     745 :                     ; Process channel now
(1) 1525/     745 :                     ; iy - Table
(1) 1526/     745 :                     ; ix - Tracker channel
(1) 1527/     745 :                     .linked:
(1) 1528/     745 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1529/     746 : 47                  		ld	b,a		; b - flags to check
(1) 1530/     747 : E6 0F               		and	00001111b	; Filter flags
(1) 1531/     749 : C8                  		ret	z
(1) 1532/     74A : 78                  		ld	a,b
(1) 1533/     74B : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1534/     74D : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1535/     74E : D5                  		push	de
(1) 1536/     74F : DD E1               		pop	ix
(1) 1537/     751 : FD 6E 03            		ld	l,(iy+03h)
(1) 1538/     754 : FD 66 04            		ld	h,(iy+04h)
(1) 1539/     757 :                     
(1) 1540/     757 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1541/     757 :                     	; iy - Our chip table
(1) 1542/     757 :                     	; ix - Track channel
(1) 1543/     757 :                     	; hl - Intrument data
(1) 1544/     757 : CB 40               		bit	0,b		; Note
(1) 1545/     759 : C4 64 0C            		call	nz,.note
(1) 1546/     75C : CB 48               		bit	1,b		; Intrument
(1) 1547/     75E : C4 EE 0A            		call	nz,.inst
(1) 1548/     761 : CF                  		rst	8
(1) 1549/     762 : CB 50               		bit	2,b		; Volume
(1) 1550/     764 : C4 E5 0A            		call	nz,.volu
(1) 1551/     767 : CB 58               		bit	3,b		; Effect
(1) 1552/     769 : C4 20 0A            		call	nz,.effc
(1) 1553/     76C : 78                  		ld	a,b
(1) 1554/     76D : E6 0F               		and	00001111b
(1) 1555/     76F : C8                  		ret	z
(1) 1556/     770 : CF                  		rst	8
(1) 1557/     771 :                     
(1) 1558/     771 :                     ; ----------------------------------------
(1) 1559/     771 :                     ; Process channel now
(1) 1560/     771 :                     ;
(1) 1561/     771 :                     ; b - Note bits
(1) 1562/     771 :                     ; ----------------------------------------
(1) 1563/     771 :                     
(1) 1564/     771 : 7E                  		ld	a,(hl)
(1) 1565/     772 : E6 70               		and	01110000b	; <--
(1) 1566/     774 : 0F                  		rrca
(1) 1567/     775 : 0F                  		rrca
(1) 1568/     776 : 0F                  		rrca
(1) 1569/     777 : 16 00               		ld	d,0
(1) 1570/     779 : 5F                  		ld	e,a
(1) 1571/     77A : 21 83 07            		ld	hl,.mk_list
(1) 1572/     77D : 19                  		add	hl,de
(1) 1573/     77E : 7E                  		ld	a,(hl)
(1) 1574/     77F : 23                  		inc	hl
(1) 1575/     780 : 66                  		ld	h,(hl)
(1) 1576/     781 : 6F                  		ld	l,a
(1) 1577/     782 : E9                  		jp	(hl)
(1) 1578/     783 :                     ; --------------------------------
(1) 1579/     783 :                     .mk_list:
(1) 1580/     783 : B1 07               		dw .mk_psg
(1) 1581/     785 : 93 07               		dw .mk_psgn
(1) 1582/     787 : 27 08               		dw .mk_fm
(1) 1583/     789 : 99 08               		dw .mk_fmspc
(1) 1584/     78B : 1F 09               		dw .mk_dac
(1) 1585/     78D : 75 09               		dw .mk_pwm
(1) 1586/     78F : 00 00               		dw 0
(1) 1587/     791 : 00 00               		dw 0
(1) 1588/     793 :                     
(1) 1589/     793 :                     ; --------------------------------
(1) 1590/     793 :                     
(1) 1591/     793 :                     .mk_psgn:
(1) 1592/     793 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1593/     796 : DD E5               		push	ix
(1) 1594/     798 : DD 21 82 16         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1595/     79C : CF                  		rst	8
(1) 1596/     79D : FE FE               		cp	-2
(1) 1597/     79F : 28 76               		jr	z,.kycut_psgn
(1) 1598/     7A1 : FE FF               		cp	-1
(1) 1599/     7A3 : 28 62               		jr	z,.kyoff_psgn
(1) 1600/     7A5 : 5F                  		ld	e,a
(1) 1601/     7A6 : 3A EA 16            		ld	a,(psgHatMode)	; Tone 3?
(1) 1602/     7A9 : E6 03               		and	011b
(1) 1603/     7AB : FE 03               		cp	011b
(1) 1604/     7AD : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1605/     7AF : 18 19               		jr	.from_psgn	; Tone 3
(1) 1606/     7B1 :                     .mk_psg:
(1) 1607/     7B1 : CF                  		rst	8
(1) 1608/     7B2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1609/     7B5 : DD E5               		push	ix
(1) 1610/     7B7 : DD 21 7F 16         		ld	ix,psgcom	; ix - psgcom
(1) 1611/     7BB : FD 5E 05            		ld	e,(iy+05h)
(1) 1612/     7BE : 16 00               		ld	d,0
(1) 1613/     7C0 : DD 19               		add	ix,de
(1) 1614/     7C2 : FE FE               		cp	-2
(1) 1615/     7C4 : 28 56               		jr	z,.kycut_psg
(1) 1616/     7C6 : FE FF               		cp	-1
(1) 1617/     7C8 : 28 42               		jr	z,.kyoff_psg
(1) 1618/     7CA :                     .from_psgn:
(1) 1619/     7CA : CF                  		rst	8
(1) 1620/     7CB : 16 00               		ld	d,0		; de - note*2
(1) 1621/     7CD : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1622/     7D0 : 21 0B 12            		ld	hl,psgFreq_List
(1) 1623/     7D3 : 19                  		add	hl,de
(1) 1624/     7D4 : 7E                  		ld	a,(hl)
(1) 1625/     7D5 : 23                  		inc	hl
(1) 1626/     7D6 : 66                  		ld	h,(hl)
(1) 1627/     7D7 : 6F                  		ld	l,a
(1) 1628/     7D8 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1629/     7DB : 07                  		rlca			; << 3
(1) 1630/     7DC : 07                  		rlca
(1) 1631/     7DD : CF                  		rst	8
(1) 1632/     7DE : 07                  		rlca
(1) 1633/     7DF : 57                  		ld	d,a
(1) 1634/     7E0 : E6 F8               		and	11111000b
(1) 1635/     7E2 : 5F                  		ld	e,a
(1) 1636/     7E3 : 7A                  		ld	a,d
(1) 1637/     7E4 : E6 07               		and	00000111b
(1) 1638/     7E6 : 57                  		ld	d,a
(1) 1639/     7E7 : 37                  		scf
(1) 1640/     7E8 : 3F                  		ccf
(1) 1641/     7E9 : ED 52               		sbc	hl,de
(1) 1642/     7EB : DD 75 1C            		ld	(ix+DTL),l
(1) 1643/     7EE : DD 74 20            		ld	(ix+DTH),h
(1) 1644/     7F1 :                     .psg_keyon:
(1) 1645/     7F1 : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1646/     7F4 : ED 44               		neg	a
(1) 1647/     7F6 : CF                  		rst	8
(1) 1648/     7F7 : 87                  		add	a,a
(1) 1649/     7F8 : 87                  		add	a,a
(1) 1650/     7F9 : 30 02               		jr	nc,.vmuch
(1) 1651/     7FB : 3E FF               		ld	a,-1
(1) 1652/     7FD :                     .vmuch:
(1) 1653/     7FD : DD 77 30            		ld	(ix+PVOL),a
(1) 1654/     800 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1655/     804 : DD E1               		pop	ix
(1) 1656/     806 : C9                  		ret
(1) 1657/     807 :                     ; -1
(1) 1658/     807 :                     .kyoff_psgn:
(1) 1659/     807 : 3E 00               		ld	a,000b
(1) 1660/     809 : 32 EA 16            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1661/     80C :                     .kyoff_psg:
(1) 1662/     80C : CF                  		rst	8
(1) 1663/     80D : 0E 02               		ld	c,010b
(1) 1664/     80F : DD 71 00            		ld	(ix),c
(1) 1665/     812 : DD E1               		pop	ix
(1) 1666/     814 : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1667/     817 :                     ; -2
(1) 1668/     817 :                     .kycut_psgn:
(1) 1669/     817 : 3E 00               		ld	a,000b
(1) 1670/     819 : 32 EA 16            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1671/     81C :                     .kycut_psg:
(1) 1672/     81C : CF                  		rst	8
(1) 1673/     81D : 0E 04               		ld	c,100b
(1) 1674/     81F : DD 71 00            		ld	(ix),c
(1) 1675/     822 : DD E1               		pop	ix
(1) 1676/     824 : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1677/     827 :                     
(1) 1678/     827 :                     ; --------------------------------
(1) 1679/     827 :                     
(1) 1680/     827 :                     .mk_fm:
(1) 1681/     827 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1682/     82A : FE FE               		cp	-2
(1) 1683/     82C : CA 16 09            		jp	z,.fm_cut
(1) 1684/     82F : FE FF               		cp	-1
(1) 1685/     831 : CA 10 09            		jp	z,.fm_off
(1) 1686/     834 :                     ; 		call	.fm_tloff
(1) 1687/     834 : CF                  		rst	8
(1) 1688/     835 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1689/     838 : 78                  		ld	a,b		; Note bit?
(1) 1690/     839 : E6 01               		and	0001b
(1) 1691/     83B : 28 1F               		jr	z,.nofm_note
(1) 1692/     83D : FD 46 05            		ld	b,(iy+05h)	; Check channel 3
(1) 1693/     840 : 78                  		ld	a,b
(1) 1694/     841 : FE 02               		cp	2
(1) 1695/     843 : 20 0B               		jr	nz,.not_dspc
(1) 1696/     845 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1697/     848 : CD B9 10            		call	fm_send_1
(1) 1698/     84B : 3E 00               		ld	a,0
(1) 1699/     84D : 32 EB 16            		ld	(fmSpecial),a
(1) 1700/     850 :                     .not_dspc:
(1) 1701/     850 : 78                  		ld	a,b
(1) 1702/     851 : FE 06               		cp	6
(1) 1703/     853 : 20 04               		jr	nz,.not_dac
(1) 1704/     855 : CF                  		rst	8
(1) 1705/     856 : CD E4 10            		call	dac_off
(1) 1706/     859 :                     .not_dac:
(1) 1707/     859 : CD D2 0C            		call	.fm_keyoff
(1) 1708/     85C :                     .nofm_note:
(1) 1709/     85C : FD 7E 06            		ld	a,(iy+06h)
(1) 1710/     85F : 47                  		ld	b,a
(1) 1711/     860 : E6 1F               		and	00011111b
(1) 1712/     862 : 5F                  		ld	e,a
(1) 1713/     863 : 16 00               		ld	d,0
(1) 1714/     865 : 21 F3 11            		ld	hl,fmFreq_List
(1) 1715/     868 : 19                  		add	hl,de
(1) 1716/     869 : 7E                  		ld	a,(hl)
(1) 1717/     86A : CF                  		rst	8
(1) 1718/     86B : 23                  		inc	hl
(1) 1719/     86C : 66                  		ld	h,(hl)
(1) 1720/     86D : 6F                  		ld	l,a
(1) 1721/     86E : 78                  		ld	a,b
(1) 1722/     86F : E6 E0               		and	11100000b
(1) 1723/     871 : 0F                  		rrca
(1) 1724/     872 : 0F                  		rrca
(1) 1725/     873 : B4                  		or	h
(1) 1726/     874 : 67                  		ld	h,a
(1) 1727/     875 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1728/     878 : CF                  		rst	8
(1) 1729/     879 : AF                  		xor	a		; Clear high
(1) 1730/     87A : 3F                  		ccf			; Clear carry
(1) 1731/     87B : CB 23               		sla	e		; << 2
(1) 1732/     87D : CB 23               		sla	e
(1) 1733/     87F : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1734/     880 : 57                  		ld	d,a
(1) 1735/     881 : 19                  		add	hl,de
(1) 1736/     882 : CD F1 0C            		call	.fm_setfreq
(1) 1737/     885 :                     .fmspc_set:
(1) 1738/     885 : CD 82 0D            		call	.fm_wrtalpan	; Panning and effects
(1) 1739/     888 : CD 08 0D            		call	.fm_wrtlvol	; FM volume control
(1) 1743/     88B : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Eh - keys
(1) 1744/     88E : E6 F0               		and	11110000b
(1) 1745/     890 : B1                  		or	c
(1) 1746/     891 : 5F                  		ld	e,a
(1) 1747/     892 : 16 28               		ld	d,28h
(1) 1748/     894 : CD B9 10            		call	fm_send_1
(1) 1749/     897 : CF                  		rst	8
(1) 1750/     898 : C9                  		ret
(1) 1752/     899 :                     
(1) 1753/     899 :                     ; --------------------------------
(1) 1754/     899 :                     
(1) 1755/     899 :                     .mk_fmspc:
(1) 1756/     899 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1757/     89C : FE FE               		cp	-2
(1) 1758/     89E : CA 16 09            		jp	z,.fm_cut
(1) 1759/     8A1 : FE FF               		cp	-1
(1) 1760/     8A3 : CA 10 09            		jp	z,.fm_off
(1) 1761/     8A6 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1762/     8A9 : 78                  		ld	a,b
(1) 1763/     8AA : E6 01               		and	0001b
(1) 1764/     8AC : 28 D7               		jr	z,.fmspc_set
(1) 1765/     8AE : CD D2 0C            		call	.fm_keyoff
(1) 1766/     8B1 : 21 ED 13            		ld	hl,fmcach_list	; Manual freqs
(1) 1767/     8B4 : FD 7E 05            		ld	a,(iy+05h)
(1) 1768/     8B7 : E6 07               		and	0111b
(1) 1769/     8B9 : 16 00               		ld	d,0
(1) 1770/     8BB : 87                  		add	a,a
(1) 1771/     8BC : 5F                  		ld	e,a
(1) 1772/     8BD : CF                  		rst	8
(1) 1773/     8BE : 19                  		add	hl,de
(1) 1774/     8BF : 7E                  		ld	a,(hl)
(1) 1775/     8C0 : 23                  		inc	hl
(1) 1776/     8C1 : 66                  		ld	h,(hl)
(1) 1777/     8C2 : 6F                  		ld	l,a
(1) 1778/     8C3 : 11 20 00            		ld	de,20h		; point to regs
(1) 1779/     8C6 : 19                  		add	hl,de
(1) 1780/     8C7 : 16 AD               		ld	d,0ADh
(1) 1781/     8C9 : 5E                  		ld	e,(hl)
(1) 1782/     8CA : CD B9 10            		call	fm_send_1
(1) 1783/     8CD : 23                  		inc	hl
(1) 1784/     8CE : 16 A9               		ld	d,0A9h
(1) 1785/     8D0 : 5E                  		ld	e,(hl)
(1) 1786/     8D1 : CD B9 10            		call	fm_send_1
(1) 1787/     8D4 : 23                  		inc	hl
(1) 1788/     8D5 : CF                  		rst	8
(1) 1789/     8D6 : 16 AC               		ld	d,0ACh
(1) 1790/     8D8 : 5E                  		ld	e,(hl)
(1) 1791/     8D9 : CD B9 10            		call	fm_send_1
(1) 1792/     8DC : 23                  		inc	hl
(1) 1793/     8DD : 16 A8               		ld	d,0A8h
(1) 1794/     8DF : 5E                  		ld	e,(hl)
(1) 1795/     8E0 : CD B9 10            		call	fm_send_1
(1) 1796/     8E3 : 23                  		inc	hl
(1) 1797/     8E4 : 16 AE               		ld	d,0AEh
(1) 1798/     8E6 : 5E                  		ld	e,(hl)
(1) 1799/     8E7 : CD B9 10            		call	fm_send_1
(1) 1800/     8EA : 23                  		inc	hl
(1) 1801/     8EB : CF                  		rst	8
(1) 1802/     8EC : 16 AA               		ld	d,0AAh
(1) 1803/     8EE : 5E                  		ld	e,(hl)
(1) 1804/     8EF : CD B9 10            		call	fm_send_1
(1) 1805/     8F2 : 23                  		inc	hl
(1) 1806/     8F3 : 16 A6               		ld	d,0A6h
(1) 1807/     8F5 : 5E                  		ld	e,(hl)
(1) 1808/     8F6 : CD B9 10            		call	fm_send_1
(1) 1809/     8F9 : 23                  		inc	hl
(1) 1810/     8FA : 16 A2               		ld	d,0A2h
(1) 1811/     8FC : 5E                  		ld	e,(hl)
(1) 1812/     8FD : CD B9 10            		call	fm_send_1
(1) 1813/     900 : 23                  		inc	hl
(1) 1814/     901 : CF                  		rst	8
(1) 1815/     902 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 1816/     905 : CD B9 10            		call	fm_send_1
(1) 1817/     908 : 3E 01               		ld	a,1
(1) 1818/     90A : 32 EB 16            		ld	(fmSpecial),a
(1) 1819/     90D : C3 85 08            		jp	.fmspc_set
(1) 1820/     910 :                     
(1) 1821/     910 :                     ; --------------------------------
(1) 1822/     910 :                     
(1) 1823/     910 :                     .fm_off:
(1) 1824/     910 : CD D2 0C            		call	.fm_keyoff
(1) 1825/     913 : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1826/     916 :                     .fm_cut:
(1) 1827/     916 : CD D2 0C            		call	.fm_keyoff
(1) 1828/     919 : CD DA 0C            		call	.fm_tloff
(1) 1829/     91C : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1830/     91F :                     
(1) 1831/     91F :                     ; --------------------------------
(1) 1832/     91F :                     
(1) 1833/     91F :                     .mk_dac:
(1) 1834/     91F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1835/     922 : FE FE               		cp	-2
(1) 1836/     924 : CA 46 09            		jp	z,.dac_cut
(1) 1837/     927 : FE FF               		cp	-1
(1) 1838/     929 : CA 4C 09            		jp	z,.dac_off
(1) 1839/     92C : CD 4F 09            		call	.dac_pitch
(1) 1840/     92F : 78                  		ld	a,b		; Note ONLY?
(1) 1841/     930 : E6 01               		and	0001b
(1) 1842/     932 : C8                  		ret	z
(1) 1843/     933 : CD E4 10            		call	dac_off
(1) 1844/     936 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 1845/     939 : 2F                  		cpl				; REVERSE bits
(1) 1846/     93A : E6 C0               		and	11000000b
(1) 1847/     93C : 5F                  		ld	e,a
(1) 1848/     93D : 16 B6               		ld	d,0B6h		; Channel 6 panning
(1) 1849/     93F : CD C4 10            		call	fm_send_2
(1) 1850/     942 : CF                  		rst	8
(1) 1851/     943 : C3 F9 10            		jp	dac_play
(1) 1852/     946 :                     .dac_cut:
(1) 1853/     946 : CD E4 10            		call	dac_off
(1) 1854/     949 : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1855/     94C :                     .dac_off:
(1) 1856/     94C : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1857/     94F :                     
(1) 1858/     94F :                     
(1) 1859/     94F :                     .dac_pitch:
(1) 1860/     94F : 16 00               		ld	d,0		; Freq index
(1) 1861/     951 : FD 5E 06            		ld	e,(iy+06h)
(1) 1862/     954 : 21 FD 12            		ld	hl,wavFreq_List
(1) 1863/     957 : 19                  		add	hl,de
(1) 1864/     958 : 7E                  		ld	a,(hl)
(1) 1865/     959 : 23                  		inc	hl
(1) 1866/     95A : 66                  		ld	h,(hl)
(1) 1867/     95B : CF                  		rst	8
(1) 1868/     95C : 6F                  		ld	l,a
(1) 1869/     95D : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1870/     960 : AF                  		xor	a		; Clear high
(1) 1871/     961 : 3F                  		ccf			; Clear carry
(1) 1872/     962 : CB 23               		sla	e		; << 3
(1) 1873/     964 : CB 23               		sla	e
(1) 1874/     966 : CB 23               		sla	e
(1) 1875/     968 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1876/     969 : 57                  		ld	d,a
(1) 1877/     96A : 19                  		add	hl,de
(1) 1878/     96B : 22 E4 16            		ld	(wave_Pitch),hl
(1) 1879/     96E : D9                  		exx			; *
(1) 1880/     96F : ED 5B E4 16         		ld	de,(wave_Pitch)	; *
(1) 1881/     973 : D9                  		exx			; *
(1) 1882/     974 : C9                  		ret
(1) 1883/     975 :                     
(1) 1884/     975 :                     ; --------------------------------
(1) 1885/     975 :                     
(1) 1886/     975 :                     .mk_pwm:
(1) 1887/     975 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1888/     978 : 16 00               		ld	d,0
(1) 1889/     97A : FD 5E 05            		ld	e,(iy+05h)
(1) 1890/     97D : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 1891/     980 : DD E5               		push	ix
(1) 1892/     982 : DD 21 47 16         		ld	ix,pwmcom
(1) 1893/     986 : DD 19               		add	ix,de
(1) 1894/     988 : FE FE               		cp	-2
(1) 1895/     98A : CA 11 0A            		jp	z,.pwm_cut
(1) 1896/     98D : FE FF               		cp	-1
(1) 1897/     98F : CA 02 0A            		jp	z,.pwm_off
(1) 1898/     992 : CF                  		rst	8
(1) 1899/     993 : 78                  		ld	a,b
(1) 1900/     994 : CB 40               		bit	0,b			; Note?
(1) 1901/     996 : 20 0E               		jr	nz,.pw_note
(1) 1902/     998 : CB 58               		bit	3,b			; Effect?
(1) 1903/     99A : 20 03               		jr	nz,.pw_effc
(1) 1904/     99C : DD E1               		pop	ix
(1) 1905/     99E : C9                  		ret
(1) 1906/     99F :                     
(1) 1907/     99F :                     ; --------------------------------
(1) 1908/     99F :                     
(1) 1909/     99F :                     .pw_effc:
(1) 1910/     99F : CD CF 09            		call	.pw_setup
(1) 1911/     9A2 : 0E 11               		ld	c,00010001b
(1) 1912/     9A4 : 18 05               		jr	.pw_send
(1) 1913/     9A6 :                     .pw_note:
(1) 1914/     9A6 : CD CF 09            		call	.pw_setup
(1) 1915/     9A9 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 1916/     9AB :                     .pw_send:
(1) 1917/     9AB : DD 71 00            		ld	(ix),c
(1) 1918/     9AE : 01 08 00            		ld	bc,8
(1) 1919/     9B1 : DD 09               		add	ix,bc
(1) 1920/     9B3 : DD 77 00            		ld	(ix),a
(1) 1921/     9B6 : DD 09               		add	ix,bc
(1) 1922/     9B8 : DD 75 00            		ld	(ix),l
(1) 1923/     9BB : DD 09               		add	ix,bc
(1) 1924/     9BD : CF                  		rst	8
(1) 1925/     9BE : DD 7E 00            		ld	a,(ix)
(1) 1926/     9C1 : E6 CF               		and	11001111b
(1) 1927/     9C3 : B3                  		or	e
(1) 1928/     9C4 : DD 77 00            		ld	(ix),a
(1) 1930/     9C7 : 3E 01               		ld	a,1
(1) 1931/     9C9 : 32 3F 00            		ld	(marsUpd),a
(1) 1933/     9CC : DD E1               		pop	ix
(1) 1934/     9CE : C9                  		ret
(1) 1935/     9CF :                     .pw_setup:
(1) 1936/     9CF : 16 00               		ld	d,0		; Freq index
(1) 1937/     9D1 : FD 5E 06            		ld	e,(iy+06h)
(1) 1938/     9D4 : 21 FD 12            		ld	hl,wavFreq_List
(1) 1939/     9D7 : 19                  		add	hl,de
(1) 1940/     9D8 : 7E                  		ld	a,(hl)
(1) 1941/     9D9 : 23                  		inc	hl
(1) 1942/     9DA : 66                  		ld	h,(hl)
(1) 1943/     9DB : 6F                  		ld	l,a
(1) 1944/     9DC : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1945/     9DF : AF                  		xor	a		; Clear high
(1) 1946/     9E0 : 3F                  		ccf			; Clear carry
(1) 1947/     9E1 : CB 23               		sla	e		; << 2
(1) 1948/     9E3 : CB 23               		sla	e
(1) 1949/     9E5 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1950/     9E6 : 57                  		ld	d,a
(1) 1951/     9E7 : 19                  		add	hl,de
(1) 1952/     9E8 : CF                  		rst	8
(1) 1953/     9E9 : 79                  		ld	a,c
(1) 1954/     9EA : 0F                  		rrca
(1) 1955/     9EB : 0F                  		rrca
(1) 1956/     9EC : 2F                  		cpl
(1) 1957/     9ED : E6 30               		and	00110000b
(1) 1958/     9EF : 5F                  		ld	e,a
(1) 1959/     9F0 : AF                  		xor	a
(1) 1960/     9F1 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 1961/     9F4 : ED 44               		neg	a
(1) 1962/     9F6 : CB 27               		sla	a
(1) 1963/     9F8 : CB 27               		sla	a
(1) 1964/     9FA : 30 02               		jr	nc,.pwv_much
(1) 1965/     9FC : 3E FF               		ld	a,-1
(1) 1966/     9FE :                     .pwv_much:
(1) 1967/     9FE : E6 FC               		and	11111100b
(1) 1968/     A00 : B4                  		or	h		; Merge MSB freq
(1) 1969/     A01 : C9                  		ret
(1) 1970/     A02 :                     
(1) 1971/     A02 :                     ; --------------------------------
(1) 1972/     A02 :                     ; -1
(1) 1973/     A02 :                     .pwm_off:
(1) 1974/     A02 : CF                  		rst	8
(1) 1975/     A03 : DD 36 00 02         		ld	(ix),010b
(1) 1976/     A07 : 3E 01               		ld	a,1
(1) 1977/     A09 : 32 3F 00            		ld	(marsUpd),a
(1) 1978/     A0C : DD E1               		pop	ix
(1) 1979/     A0E : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1980/     A11 :                     ; -2
(1) 1981/     A11 :                     .pwm_cut:
(1) 1982/     A11 : CF                  		rst	8
(1) 1983/     A12 : DD 36 00 04         		ld	(ix),100b
(1) 1984/     A16 : 3E 01               		ld	a,1
(1) 1985/     A18 : 32 3F 00            		ld	(marsUpd),a
(1) 1986/     A1B : DD E1               		pop	ix
(1) 1987/     A1D : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1988/     A20 :                     
(1) 1989/     A20 :                     ; ----------------------------------------
(1) 1990/     A20 :                     ; NEW effect
(1) 1991/     A20 :                     ; ----------------------------------------
(1) 1992/     A20 :                     
(1) 1993/     A20 :                     .effc:
(1) 1994/     A20 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 1995/     A23 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 1996/     A26 : 57                  		ld	d,a
(1) 1997/     A27 : CF                  		rst	8
(1) 1998/     A28 : FE 04               		cp	4			; Effect D?
(1) 1999/     A2A : 28 0F               		jr	z,.effc_D
(1) 2000/     A2C : FE 05               		cp	5			; Effect E?
(1) 2001/     A2E : 28 4E               		jr	z,.effc_E
(1) 2002/     A30 : FE 06               		cp	6			; Effect F?
(1) 2003/     A32 : 28 5F               		jr	z,.effc_F
(1) 2004/     A34 : CF                  		rst	8
(1) 2005/     A35 : FE 18               		cp	24			; Effect X?
(1) 2006/     A37 : CA B4 0A            		jp	z,.effc_X
(1) 2007/     A3A : C9                  		ret
(1) 2008/     A3B :                     
(1) 2009/     A3B :                     ; ----------------------------------------
(1) 2010/     A3B :                     ; Effect D
(1) 2011/     A3B :                     ;
(1) 2012/     A3B :                     ; Volume slide down
(1) 2013/     A3B :                     ;
(1) 2014/     A3B :                     ; 0xh-Exh - Normal
(1) 2015/     A3B :                     ; Fxh-Fxh - Fine slide / 2
(1) 2016/     A3B :                     
(1) 2017/     A3B :                     .effc_D:
(1) 2018/     A3B : CD A8 0A            		call	.save_arg
(1) 2019/     A3E : 79                  		ld	a,c		; Setting == 0?
(1) 2020/     A3F : B7                  		or	a
(1) 2021/     A40 : C8                  		ret	z
(1) 2022/     A41 : E6 F0               		and	0F0h
(1) 2023/     A43 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2024/     A45 : FE F0               		cp	0F0h
(1) 2025/     A47 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2026/     A49 : CF                  		rst	8
(1) 2027/     A4A : 79                  		ld	a,c
(1) 2028/     A4B : E6 0F               		and	00Fh
(1) 2029/     A4D : 28 1D               		jr	z,.norm_up	; x0h
(1) 2030/     A4F : FE 0F               		cp	00Fh
(1) 2031/     A51 : 28 17               		jr	z,.fine_up	; xFh
(1) 2032/     A53 : C9                  		ret
(1) 2033/     A54 :                     ; Go down
(1) 2034/     A54 :                     .norm_down:
(1) 2035/     A54 : CB 21               		sla	c
(1) 2036/     A56 :                     .fine_down:
(1) 2037/     A56 : CB 21               		sla	c
(1) 2038/     A58 : 79                  		ld	a,c
(1) 2039/     A59 : E6 3C               		and	00111100b
(1) 2040/     A5B : 4F                  		ld	c,a
(1) 2041/     A5C : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2042/     A5F : CF                  		rst	8
(1) 2043/     A60 : 91                  		sub	a,c
(1) 2044/     A61 : 1E C0               		ld	e,0C0h
(1) 2045/     A63 : BB                  		cp	e
(1) 2046/     A64 : D2 7A 0A            		jp	nc,.vol_dvld
(1) 2047/     A67 : 7B                  		ld	a,e
(1) 2048/     A68 : 18 10               		jr 	.vol_dvld
(1) 2049/     A6A :                     ; Go up
(1) 2050/     A6A :                     .fine_up:
(1) 2051/     A6A : CB 39               		srl	c
(1) 2052/     A6C :                     .norm_up:
(1) 2053/     A6C : CB 39               		srl	c
(1) 2054/     A6E : 79                  		ld	a,c
(1) 2055/     A6F : E6 3C               		and	00111100b
(1) 2056/     A71 : 4F                  		ld	c,a
(1) 2057/     A72 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2058/     A75 : CF                  		rst	8
(1) 2059/     A76 : 81                  		add	a,c
(1) 2060/     A77 : 38 01               		jr	c,.vol_dvld
(1) 2061/     A79 : AF                  		xor	a
(1) 2062/     A7A :                     .vol_dvld:
(1) 2063/     A7A : FD 77 08            		ld	(iy+08h),a
(1) 2064/     A7D : C9                  		ret
(1) 2065/     A7E :                     
(1) 2066/     A7E :                     ; ----------------------------------------
(1) 2067/     A7E :                     ; Effect E
(1) 2068/     A7E :                     .effc_E:
(1) 2069/     A7E : CD A8 0A            		call	.save_arg
(1) 2070/     A81 : 79                  		ld	a,c
(1) 2071/     A82 : E6 F0               		and	0F0h
(1) 2072/     A84 : FE F0               		cp	0F0h
(1) 2073/     A86 : C8                  		ret	z
(1) 2074/     A87 : FE E0               		cp	0E0h
(1) 2075/     A89 : C8                  		ret	z
(1) 2076/     A8A : CF                  		rst	8
(1) 2077/     A8B : FD 7E 07            		ld	a,(iy+07h)
(1) 2078/     A8E : 91                  		sub	a,c
(1) 2079/     A8F : FD 77 07            		ld	(iy+07h),a
(1) 2080/     A92 : C9                  		ret
(1) 2081/     A93 :                     
(1) 2082/     A93 :                     ; ----------------------------------------
(1) 2083/     A93 :                     ; Effect F
(1) 2084/     A93 :                     .effc_F:
(1) 2085/     A93 : CD A8 0A            		call	.save_arg
(1) 2086/     A96 : 79                  		ld	a,c
(1) 2087/     A97 : E6 F0               		and	0F0h
(1) 2088/     A99 : FE F0               		cp	0F0h
(1) 2089/     A9B : C8                  		ret	z
(1) 2090/     A9C : FE E0               		cp	0E0h
(1) 2091/     A9E : C8                  		ret	z
(1) 2092/     A9F : CF                  		rst	8
(1) 2093/     AA0 : FD 7E 07            		ld	a,(iy+07h)
(1) 2094/     AA3 : 81                  		add	a,c
(1) 2095/     AA4 : FD 77 07            		ld	(iy+07h),a
(1) 2096/     AA7 : C9                  		ret
(1) 2097/     AA8 :                     
(1) 2098/     AA8 :                     ; --------------------------------
(1) 2099/     AA8 :                     ; e - got arg
(1) 2100/     AA8 :                     ; c - new arg
(1) 2101/     AA8 :                     .save_arg:
(1) 2102/     AA8 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2103/     AAB : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2104/     AAC : B7                  		or	a
(1) 2105/     AAD : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2106/     AAF : 4F                  		ld	c,a
(1) 2107/     AB0 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2108/     AB3 :                     .D_cont:
(1) 2109/     AB3 : C9                  		ret
(1) 2110/     AB4 :                     
(1) 2111/     AB4 :                     ; ----------------------------------------
(1) 2112/     AB4 :                     ; Effect X
(1) 2113/     AB4 :                     ;
(1) 2114/     AB4 :                     ; Panning arg:
(1) 2115/     AB4 :                     ; 00h LEFT <- 80h MIDDLE -> FFh RIGHT
(1) 2116/     AB4 :                     ;
(1) 2117/     AB4 :                     ; FM style %LR000000 (REVERSE: 0-on 1-off)
(1) 2118/     AB4 :                     
(1) 2119/     AB4 :                     .effc_X:
(1) 2120/     AB4 : 16 00               		ld	d,0
(1) 2121/     AB6 : 7E                  		ld	a,(hl)
(1) 2122/     AB7 : FE 80               		cp	80h		; PSG?
(1) 2123/     AB9 : 28 18               		jr	z,.res_pan
(1) 2124/     ABB : FE 90               		cp	90h		; PSGN?
(1) 2125/     ABD : 28 14               		jr	z,.res_pan
(1) 2126/     ABF : FD 36 09 00         		ld	(iy+09h),0
(1) 2127/     AC3 : CF                  		rst	8
(1) 2128/     AC4 : E5                  		push	hl
(1) 2129/     AC5 : 21 DD 0A            		ld	hl,.fm_panlist
(1) 2130/     AC8 : 7B                  		ld	a,e
(1) 2131/     AC9 : 07                  		rlca
(1) 2132/     ACA : 07                  		rlca
(1) 2133/     ACB : 07                  		rlca
(1) 2134/     ACC : E6 07               		and	0111b
(1) 2135/     ACE :                     ; 		ld	d,0
(1) 2136/     ACE : 5F                  		ld	e,a
(1) 2137/     ACF : CF                  		rst	8
(1) 2138/     AD0 : 19                  		add	hl,de
(1) 2139/     AD1 : 56                  		ld	d,(hl)
(1) 2140/     AD2 : E1                  		pop	hl
(1) 2141/     AD3 :                     .res_pan:
(1) 2142/     AD3 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2143/     AD6 : E6 3F               		and	00111111b
(1) 2144/     AD8 : B2                  		or	d
(1) 2145/     AD9 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2146/     ADC : C9                  		ret
(1) 2147/     ADD :                     
(1) 2148/     ADD :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2149/     ADD :                     .fm_panlist:
(1) 2150/     ADD : 40                  		db 01000000b
(1) 2151/     ADE : 40                  		db 01000000b
(1) 2152/     ADF : 40                  		db 01000000b
(1) 2153/     AE0 : 00                  		db 00000000b
(1) 2154/     AE1 : 00                  		db 00000000b
(1) 2155/     AE2 : 80                  		db 10000000b
(1) 2156/     AE3 : 80                  		db 10000000b
(1) 2157/     AE4 : 80                  		db 10000000b
(1) 2158/     AE5 :                     
(1) 2159/     AE5 :                     ; ----------------------------------------
(1) 2160/     AE5 :                     ; NEW volume
(1) 2161/     AE5 :                     ; ----------------------------------------
(1) 2162/     AE5 :                     
(1) 2163/     AE5 :                     .volu:
(1) 2164/     AE5 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2165/     AE8 : D6 40               		sub	a,64
(1) 2166/     AEA : FD 77 08            		ld	(iy+08h),a	; <-- BASE volume
(1) 2167/     AED : C9                  		ret
(1) 2168/     AEE :                     
(1) 2169/     AEE :                     ; ----------------------------------------
(1) 2170/     AEE :                     ; NEW instrument
(1) 2171/     AEE :                     ; ----------------------------------------
(1) 2172/     AEE :                     
(1) 2173/     AEE :                     .inst:
(1) 2174/     AEE : 7E                  		ld	a,(hl)
(1) 2175/     AEF : E6 F0               		and	11110000b
(1) 2176/     AF1 : FE 80               		cp	80h
(1) 2177/     AF3 : 28 1E               		jr	z,.ps_ins
(1) 2178/     AF5 : FE 90               		cp	90h
(1) 2179/     AF7 : 28 14               		jr	z,.pn_ins
(1) 2180/     AF9 : FE A0               		cp	0A0h
(1) 2181/     AFB : 28 4C               		jr	z,.fm_ins
(1) 2182/     AFD : FE B0               		cp	0B0h
(1) 2183/     AFF : 28 48               		jr	z,.fm_ins
(1) 2184/     B01 : FE C0               		cp	0C0h
(1) 2185/     B03 : CA CA 0B            		jp	z,.dac_ins
(1) 2186/     B06 : CF                  		rst	8
(1) 2187/     B07 : FE D0               		cp	0D0h
(1) 2188/     B09 : CA 21 0C            		jp	z,.pwm_ins
(1) 2189/     B0C :                     
(1) 2190/     B0C :                     ; ----------------------------------------
(1) 2191/     B0C :                     
(1) 2192/     B0C :                     .invl_ins:
(1) 2193/     B0C : C9                  		ret
(1) 2194/     B0D :                     
(1) 2195/     B0D :                     ; ----------------------------------------
(1) 2196/     B0D :                     
(1) 2197/     B0D :                     ; PSG
(1) 2198/     B0D :                     .pn_ins:
(1) 2199/     B0D : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2200/     B0E : E6 07               		and	0111b
(1) 2201/     B10 : 32 EA 16            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2202/     B13 :                     .ps_ins:
(1) 2203/     B13 : CF                  		rst	8
(1) 2204/     B14 : DD E5               		push	ix
(1) 2205/     B16 : E5                  		push	hl
(1) 2206/     B17 : 23                  		inc	hl		; Skip ID
(1) 2207/     B18 : DD 21 7F 16         		ld	ix,psgcom	; Read psg control
(1) 2208/     B1C : FD 5E 05            		ld	e,(iy+05h)
(1) 2209/     B1F : 16 00               		ld	d,0
(1) 2210/     B21 : DD 19               		add	ix,de
(1) 2211/     B23 : 7E                  		ld	a,(hl)
(1) 2212/     B24 : CF                  		rst	8
(1) 2213/     B25 : 23                  		inc	hl
(1) 2214/     B26 : 7E                  		ld	a,(hl)
(1) 2215/     B27 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2216/     B2A : 23                  		inc	hl
(1) 2217/     B2B : 7E                  		ld	a,(hl)
(1) 2218/     B2C : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2219/     B2F : 23                  		inc	hl
(1) 2220/     B30 : 7E                  		ld	a,(hl)
(1) 2221/     B31 : CF                  		rst	8
(1) 2222/     B32 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2223/     B35 : 23                  		inc	hl
(1) 2224/     B36 : 7E                  		ld	a,(hl)
(1) 2225/     B37 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2226/     B3A : 23                  		inc	hl
(1) 2227/     B3B : 7E                  		ld	a,(hl)
(1) 2228/     B3C : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2229/     B3F : 23                  		inc	hl
(1) 2230/     B40 : 7E                  		ld	a,(hl)
(1) 2231/     B41 : CF                  		rst	8
(1) 2232/     B42 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2233/     B45 : E1                  		pop	hl
(1) 2234/     B46 : DD E1               		pop	ix
(1) 2235/     B48 : C9                  		ret
(1) 2236/     B49 :                     
(1) 2237/     B49 :                     ; --------
(1) 2238/     B49 :                     
(1) 2239/     B49 :                     .fm_ins:
(1) 2240/     B49 :                     ;  ret
(1) 2241/     B49 : DD E5               		push	ix
(1) 2242/     B4B : E5                  		push	hl
(1) 2243/     B4C : C5                  		push	bc
(1) 2244/     B4D :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2245/     B4D : FD 46 02            		ld	b,(iy+02h)
(1) 2246/     B50 : FD 7E 05            		ld	a,(iy+05h)
(1) 2247/     B53 : E6 07               		and	0111b
(1) 2248/     B55 : 16 00               		ld	d,0
(1) 2249/     B57 : 87                  		add	a,a
(1) 2250/     B58 : 5F                  		ld	e,a
(1) 2251/     B59 : DD 21 ED 13         		ld	ix,fmcach_list
(1) 2252/     B5D : DD 19               		add	ix,de
(1) 2253/     B5F : CF                  		rst	8
(1) 2254/     B60 : DD 5E 00            		ld	e,(ix)
(1) 2255/     B63 : DD 23               		inc	ix
(1) 2256/     B65 : DD 56 00            		ld	d,(ix)
(1) 2257/     B68 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2258/     B68 :                     ; 		cp	b
(1) 2259/     B68 :                     ; 		jr	z,.same_patch
(1) 2260/     B68 :                     ; 		ld	(iy+0Bh),b
(1) 2261/     B68 : 23                  		inc	hl		; Skip id and pitch
(1) 2262/     B69 : 23                  		inc	hl
(1) 2263/     B6A : 46                  		ld	b,(hl)
(1) 2264/     B6B : 23                  		inc	hl
(1) 2265/     B6C : 4E                  		ld	c,(hl)
(1) 2266/     B6D : 23                  		inc	hl
(1) 2267/     B6E : 6E                  		ld	l,(hl)
(1) 2268/     B6F : 61                  		ld	h,c
(1) 2269/     B70 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2270/     B73 : BC                  		cp	h
(1) 2271/     B74 : 20 07               		jr	nz,.new_romdat
(1) 2272/     B76 : CF                  		rst	8
(1) 2273/     B77 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2274/     B7A : BD                  		cp	l
(1) 2275/     B7B : 28 38               		jr	z,.same_patch
(1) 2276/     B7D :                     .new_romdat:
(1) 2277/     B7D : FD 74 0A            		ld	(iy+0Ah),h
(1) 2278/     B80 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2279/     B83 : 78                  		ld	a,b
(1) 2280/     B84 : D5                  		push	de
(1) 2281/     B85 : 01 28 00            		ld	bc,28h		; <- size
(1) 2282/     B88 : CD CC 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 2283/     B8B :                     
(1) 2284/     B8B : E1                  		pop	hl
(1) 2285/     B8C : FD 7E 05            		ld	a,(iy+05h)
(1) 2286/     B8F : 4F                  		ld	c,a		; c - FM Key ID
(1) 2287/     B90 :                     ; 		call	.fm_keyoff
(1) 2288/     B90 :                     
(1) 2289/     B90 :                     	; hl - fmcach intrument
(1) 2290/     B90 :                     	; de - FM reg and data: 3000h
(1) 2291/     B90 :                     	;  c - FM keyChannel
(1) 2292/     B90 : 79                  		ld	a,c
(1) 2293/     B91 : E6 03               		and	011b
(1) 2294/     B93 : F6 30               		or	30h		; Start at reg 30h
(1) 2295/     B95 : 57                  		ld	d,a
(1) 2296/     B96 : 1E 00               		ld	e,0
(1) 2297/     B98 : CF                  		rst	8
(1) 2298/     B99 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2299/     B9B : CD BA 0B            		call	.fm_setrlist
(1) 2300/     B9E :                     ; 		ld	b,4
(1) 2301/     B9E :                     ; 		call	.fm_setrlist
(1) 2302/     B9E :                     ; 		ld	b,5*4
(1) 2303/     B9E :                     ; 		call	.fm_setrlist
(1) 2304/     B9E : 7E                  		ld	a,(hl)		; 0B0h
(1) 2305/     B9F : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2306/     BA2 : 23                  		inc	hl
(1) 2307/     BA3 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2308/     BA4 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2309/     BA7 : 23                  		inc	hl
(1) 2310/     BA8 : CF                  		rst	8
(1) 2311/     BA9 : 7E                  		ld	a,(hl)
(1) 2312/     BAA : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2313/     BAD : 23                  		inc	hl
(1) 2314/     BAE : 7E                  		ld	a,(hl)		; 028h keys
(1) 2315/     BAF : E6 F0               		and	11110000b
(1) 2316/     BB1 : CF                  		rst	8
(1) 2317/     BB2 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2318/     BB5 :                     .same_patch:
(1) 2319/     BB5 : C1                  		pop	bc
(1) 2320/     BB6 : E1                  		pop	hl
(1) 2321/     BB7 : DD E1               		pop	ix
(1) 2322/     BB9 : C9                  		ret
(1) 2323/     BBA :                     ; b - numof_regs
(1) 2324/     BBA :                     .fm_setrlist:
(1) 2325/     BBA : 5E                  		ld	e,(hl)
(1) 2326/     BBB : 23                  		inc	hl
(1) 2327/     BBC : CD B0 10            		call	fm_autoreg
(1) 2328/     BBF : 00                  		nop
(1) 2329/     BC0 : 00                  		nop
(1) 2330/     BC1 : CF                  		rst	8
(1) 2331/     BC2 : 00                  		nop
(1) 2332/     BC3 : 14                  		inc	d		; +4
(1) 2333/     BC4 : 14                  		inc	d
(1) 2334/     BC5 : 14                  		inc	d
(1) 2335/     BC6 : 14                  		inc	d
(1) 2336/     BC7 : 10 F1               		djnz	.fm_setrlist
(1) 2337/     BC9 : C9                  		ret
(1) 2338/     BCA :                     ; --------
(1) 2339/     BCA :                     
(1) 2340/     BCA :                     .dac_ins:
(1) 2341/     BCA : DD 5E 03            		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2342/     BCD :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2343/     BCD :                     ; 		cp	e
(1) 2344/     BCD :                     ; 		jr	z,.same_dac
(1) 2345/     BCD : FD 73 0B            		ld	(iy+0Bh),e
(1) 2346/     BD0 : E5                  		push	hl
(1) 2347/     BD1 : C5                  		push	bc
(1) 2348/     BD2 : 7E                  		ld	a,(hl)
(1) 2349/     BD3 : E6 0F               		and	01111b
(1) 2350/     BD5 : 32 E6 16            		ld	(wave_Flags),a
(1) 2351/     BD8 : CF                  		rst	8
(1) 2352/     BD9 : 23                  		inc	hl
(1) 2353/     BDA : 23                  		inc	hl
(1) 2354/     BDB : 5E                  		ld	e,(hl)
(1) 2355/     BDC : 23                  		inc	hl
(1) 2356/     BDD : 7E                  		ld	a,(hl)
(1) 2357/     BDE : 23                  		inc	hl
(1) 2358/     BDF : 6E                  		ld	l,(hl)
(1) 2359/     BE0 : 67                  		ld	h,a
(1) 2360/     BE1 : E5                  		push	hl
(1) 2361/     BE2 : 7B                  		ld	a,e
(1) 2362/     BE3 : 01 06 00            		ld	bc,6		; Skip header
(1) 2363/     BE6 : 09                  		add	hl,bc
(1) 2364/     BE7 : CE 00               		adc	a,0
(1) 2365/     BE9 : 22 DB 16            		ld	(wave_Start),hl	; Set START point
(1) 2366/     BEC : 32 DD 16            		ld	(wave_Start+2),a
(1) 2367/     BEF : E1                  		pop	hl
(1) 2368/     BF0 : 7B                  		ld	a,e
(1) 2369/     BF1 : 11 FA 16            		ld	de,sampleHead
(1) 2370/     BF4 : 01 06 00            		ld	bc,6
(1) 2371/     BF7 : D5                  		push	de
(1) 2372/     BF8 : CF                  		rst	8
(1) 2373/     BF9 : CD CC 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 2374/     BFC : E1                  		pop	hl
(1) 2375/     BFD :                     	; hl - temporal header
(1) 2376/     BFD : 5E                  		ld	e,(hl)
(1) 2377/     BFE : 23                  		inc	hl
(1) 2378/     BFF : 56                  		ld	d,(hl)
(1) 2379/     C00 : 23                  		inc	hl
(1) 2380/     C01 : 7E                  		ld	a,(hl)
(1) 2381/     C02 : 23                  		inc	hl
(1) 2382/     C03 : ED 53 DE 16         		ld	(wave_Len),de	; LEN
(1) 2383/     C07 : 32 E0 16            		ld	(wave_Len+2),a
(1) 2384/     C0A : 5E                  		ld	e,(hl)
(1) 2385/     C0B : 23                  		inc	hl
(1) 2386/     C0C : CF                  		rst	8
(1) 2387/     C0D : 56                  		ld	d,(hl)
(1) 2388/     C0E : 23                  		inc	hl
(1) 2389/     C0F : 7E                  		ld	a,(hl)
(1) 2390/     C10 : 23                  		inc	hl
(1) 2391/     C11 : ED 53 E1 16         		ld	(wave_Loop),de	; LOOP
(1) 2392/     C15 : 32 E3 16            		ld	(wave_Loop+2),a
(1) 2393/     C18 : 11 06 28            		ld	de,2806h	; keys off
(1) 2394/     C1B : CD B9 10            		call	fm_send_1
(1) 2395/     C1E : C1                  		pop	bc
(1) 2396/     C1F : E1                  		pop	hl
(1) 2397/     C20 :                     ; .same_dac:
(1) 2398/     C20 : C9                  		ret
(1) 2399/     C21 :                     
(1) 2400/     C21 :                     ; --------
(1) 2401/     C21 :                     
(1) 2402/     C21 :                     .pwm_ins:
(1) 2403/     C21 : DD E5               		push	ix
(1) 2404/     C23 : E5                  		push	hl
(1) 2405/     C24 : C5                  		push	bc
(1) 2406/     C25 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 2407/     C26 : E6 03               		and	00000011b
(1) 2408/     C28 : 0F                  		rrca
(1) 2409/     C29 : 0F                  		rrca
(1) 2410/     C2A : 4F                  		ld	c,a
(1) 2411/     C2B :                     ; 		ld	(iy+0Ah),a	; 0Ah flags: %SlLR
(1) 2412/     C2B : CF                  		rst	8
(1) 2413/     C2C : 23                  		inc	hl		; Skip ID and Pitch
(1) 2414/     C2D : 23                  		inc	hl
(1) 2415/     C2E : 56                  		ld	d,(hl)
(1) 2416/     C2F : 23                  		inc	hl
(1) 2417/     C30 : 5E                  		ld	e,(hl)
(1) 2418/     C31 : 23                  		inc	hl
(1) 2419/     C32 : 7E                  		ld	a,(hl)
(1) 2420/     C33 : 23                  		inc	hl
(1) 2421/     C34 : 6E                  		ld	l,(hl)
(1) 2422/     C35 : 67                  		ld	h,a
(1) 2423/     C36 : 79                  		ld	a,c
(1) 2424/     C37 : B2                  		or	d
(1) 2425/     C38 : 57                  		ld	d,a
(1) 2426/     C39 : CF                  		rst	8
(1) 2427/     C3A :                     
(1) 2428/     C3A :                     	; de,hl - 32-bit PWM pointer
(1) 2429/     C3A : DD 21 47 16         		ld	ix,pwmcom
(1) 2430/     C3E : 06 00               		ld	b,0
(1) 2431/     C40 : FD 4E 05            		ld	c,(iy+05h)
(1) 2432/     C43 : DD 09               		add	ix,bc
(1) 2433/     C45 : 01 18 00            		ld	bc,PWOUTF
(1) 2434/     C48 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 2435/     C4A : 01 08 00            		ld	bc,8
(1) 2436/     C4D : DD 72 00            		ld	(ix),d
(1) 2437/     C50 : DD 09               		add	ix,bc
(1) 2438/     C52 : DD 73 00            		ld	(ix),e
(1) 2439/     C55 : DD 09               		add	ix,bc
(1) 2440/     C57 : DD 74 00            		ld	(ix),h
(1) 2441/     C5A : DD 09               		add	ix,bc
(1) 2442/     C5C : DD 75 00            		ld	(ix),l
(1) 2443/     C5F : C1                  		pop	bc
(1) 2444/     C60 : E1                  		pop	hl
(1) 2445/     C61 : DD E1               		pop	ix
(1) 2446/     C63 : C9                  		ret
(1) 2447/     C64 :                     
(1) 2448/     C64 :                     ; ----------------------------------------
(1) 2449/     C64 :                     ; NEW note
(1) 2450/     C64 :                     ; ----------------------------------------
(1) 2451/     C64 :                     
(1) 2452/     C64 :                     .note:
(1) 2453/     C64 : 78                  		ld	a,b		; Volume bit?
(1) 2454/     C65 : E6 04               		and	0100b
(1) 2455/     C67 : 20 05               		jr	nz,.fm_hasvol
(1) 2456/     C69 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 2457/     C6D : CF                  		rst	8
(1) 2458/     C6E :                     .fm_hasvol:
(1) 2459/     C6E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2460/     C71 : 4F                  		ld	c,a
(1) 2461/     C72 : FE FF               		cp	-1
(1) 2462/     C74 : C8                  		ret	z
(1) 2463/     C75 : FE FE               		cp	-2
(1) 2464/     C77 : C8                  		ret	z
(1) 2465/     C78 : 7E                  		ld	a,(hl)
(1) 2466/     C79 : E6 F0               		and	11110000b
(1) 2467/     C7B : FE 80               		cp	80h
(1) 2468/     C7D : 28 12               		jr	z,.n_indx
(1) 2469/     C7F : CF                  		rst	8
(1) 2470/     C80 : FE 90               		cp	90h
(1) 2471/     C82 : 28 1C               		jr	z,.n_psgn
(1) 2472/     C84 : FE A0               		cp	0A0h
(1) 2473/     C86 : 28 1D               		jr	z,.n_fm
(1) 2474/     C88 :                     ; 		cp	0B0h		; ** Can't use notes on FM3 **
(1) 2475/     C88 :                     ; 		jr	z,.n_fm
(1) 2476/     C88 : FE C0               		cp	0C0h
(1) 2477/     C8A : 28 05               		jr	z,.n_indx
(1) 2478/     C8C : FE D0               		cp	0D0h
(1) 2479/     C8E : 28 01               		jr	z,.n_indx
(1) 2480/     C90 : C9                  		ret
(1) 2481/     C91 :                     
(1) 2482/     C91 :                     ; --------------------------------
(1) 2483/     C91 :                     
(1) 2484/     C91 :                     .n_indx:
(1) 2485/     C91 : 79                  		ld	a,c
(1) 2486/     C92 :                     .n_stfreq:
(1) 2487/     C92 : 23                  		inc	hl		; Skip ID
(1) 2488/     C93 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2489/     C94 : 2B                  		dec	hl
(1) 2490/     C95 : 83                  		add	a,e		; Note + pitch
(1) 2491/     C96 : CF                  		rst	8
(1) 2492/     C97 : 87                  		add	a,a		; * 2
(1) 2493/     C98 : FD 77 06            		ld	(iy+06h),a
(1) 2494/     C9B : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 2495/     C9F : C9                  		ret
(1) 2496/     CA0 :                     .n_psgn:
(1) 2497/     CA0 : 79                  		ld	a,c
(1) 2498/     CA1 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 2499/     CA3 : 18 ED               		jr	.n_stfreq
(1) 2500/     CA5 :                     ; FM
(1) 2501/     CA5 :                     .n_fm:
(1) 2502/     CA5 : 79                  		ld	a,c
(1) 2503/     CA6 : 23                  		inc	hl		; Skip ID
(1) 2504/     CA7 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2505/     CA8 : 2B                  		dec	hl
(1) 2506/     CA9 : CF                  		rst	8
(1) 2507/     CAA : 83                  		add	a,e		; Note + pitch
(1) 2508/     CAB :                     	; Search for octave and note
(1) 2509/     CAB : 0E 00               		ld	c,0		; c - octave
(1) 2510/     CAD : 16 07               		ld	d,7
(1) 2511/     CAF :                     .get_oct:
(1) 2512/     CAF : 5F                  		ld	e,a		; e - note
(1) 2513/     CB0 : D6 0C               		sub	12
(1) 2514/     CB2 : B7                  		or	a
(1) 2515/     CB3 : FA BF 0C            		jp	m,.fnd_oct
(1) 2516/     CB6 : 0C                  		inc	c
(1) 2517/     CB7 : CF                  		rst	8
(1) 2518/     CB8 : 00                  		nop	; wave sync
(1) 2519/     CB9 : 00                  		nop
(1) 2520/     CBA : 00                  		nop
(1) 2521/     CBB : 00                  		nop
(1) 2522/     CBC : 15                  		dec	d
(1) 2523/     CBD : 20 F0               		jr	nz,.get_oct
(1) 2524/     CBF :                     .fnd_oct:
(1) 2525/     CBF : 7B                  		ld	a,e
(1) 2526/     CC0 : 87                  		add	a,a		; Note * 2
(1) 2527/     CC1 : E6 1F               		and	00011111b
(1) 2528/     CC3 : CB 09               		rrc	c
(1) 2529/     CC5 : CB 09               		rrc	c
(1) 2530/     CC7 : CB 09               		rrc	c
(1) 2531/     CC9 : B1                  		or	c
(1) 2532/     CCA : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 2533/     CCD : FD 36 07 00         		ld	(iy+07h),0
(1) 2534/     CD1 : C9                  		ret
(1) 2535/     CD2 :                     
(1) 2536/     CD2 :                     ; ----------------------------------------
(1) 2537/     CD2 :                     
(1) 2538/     CD2 :                     .fm_keyoff:
(1) 2539/     CD2 : 16 28               		ld	d,28h
(1) 2540/     CD4 : FD 5E 05            		ld	e,(iy+05h)
(1) 2541/     CD7 : C3 B9 10            		jp	fm_send_1
(1) 2542/     CDA :                     .fm_tloff:
(1) 2543/     CDA : 06 04               		ld	b,4
(1) 2544/     CDC : FD 4E 05            		ld	c,(iy+05h)
(1) 2545/     CDF : 79                  		ld	a,c
(1) 2546/     CE0 : E6 03               		and	011b
(1) 2547/     CE2 : F6 40               		or	40h	; TL regs
(1) 2548/     CE4 :                     .tl_down:
(1) 2549/     CE4 : 57                  		ld	d,a
(1) 2550/     CE5 : 1E 7F               		ld	e,7Fh
(1) 2551/     CE7 : CD B0 10            		call	fm_autoreg
(1) 2552/     CEA : CF                  		rst	8
(1) 2553/     CEB : 7A                  		ld	a,d
(1) 2554/     CEC : C6 04               		add	a,4
(1) 2555/     CEE : 10 F4               		djnz	.tl_down
(1) 2556/     CF0 : C9                  		ret
(1) 2557/     CF1 :                     ; c - KeyID
(1) 2558/     CF1 :                     .fm_setfreq:
(1) 2559/     CF1 : 79                  		ld	a,c
(1) 2560/     CF2 : E6 03               		and	011b
(1) 2561/     CF4 : F6 A4               		or	0A4h
(1) 2562/     CF6 : 57                  		ld	d,a
(1) 2563/     CF7 : 5C                  		ld	e,h
(1) 2564/     CF8 : CF                  		rst	8
(1) 2565/     CF9 : CD B0 10            		call	fm_autoreg
(1) 2566/     CFC : 79                  		ld	a,c
(1) 2567/     CFD : E6 03               		and	011b
(1) 2568/     CFF : F6 A0               		or	0A0h
(1) 2569/     D01 : 57                  		ld	d,a
(1) 2570/     D02 : 5D                  		ld	e,l
(1) 2571/     D03 : CD B0 10            		call	fm_autoreg
(1) 2572/     D06 : CF                  		rst	8
(1) 2573/     D07 : C9                  		ret
(1) 2574/     D08 :                     
(1) 2575/     D08 :                     ; --------------------------------
(1) 2576/     D08 :                     ; WRITE TL volume
(1) 2577/     D08 :                     
(1) 2578/     D08 :                     .fm_wrtlvol:
(1) 2579/     D08 : 21 ED 13            		ld	hl,fmcach_list
(1) 2580/     D0B : FD 7E 05            		ld	a,(iy+05h)
(1) 2581/     D0E : E6 07               		and	0111b
(1) 2582/     D10 : 16 00               		ld	d,0
(1) 2583/     D12 : CF                  		rst	8
(1) 2584/     D13 : 87                  		add	a,a
(1) 2585/     D14 : 5F                  		ld	e,a
(1) 2586/     D15 : 19                  		add	hl,de
(1) 2587/     D16 : 7E                  		ld	a,(hl)
(1) 2588/     D17 : 23                  		inc	hl
(1) 2589/     D18 : 66                  		ld	h,(hl)
(1) 2590/     D19 : 6F                  		ld	l,a
(1) 2591/     D1A : 23                  		inc	hl
(1) 2592/     D1B : 23                  		inc	hl
(1) 2593/     D1C : 23                  		inc	hl
(1) 2594/     D1D : CF                  		rst	8
(1) 2595/     D1E : 23                  		inc	hl		; Point to TL's
(1) 2596/     D1F : FD 7E 05            		ld	a,(iy+05h)
(1) 2597/     D22 : E6 03               		and	011b
(1) 2598/     D24 : F6 40               		or	40h		; TL registers
(1) 2599/     D26 : 57                  		ld	d,a
(1) 2600/     D27 :                     ; d - 40h+
(1) 2601/     D27 :                     ; hl - TL data
(1) 2602/     D27 :                     ; .fm_wrtlvol:
(1) 2603/     D27 : C5                  		push	bc
(1) 2604/     D28 : E5                  		push	hl
(1) 2605/     D29 : 21 7A 0D            		ld	hl,.fm_cindx
(1) 2606/     D2C : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2607/     D2F : E6 07               		and	0111b
(1) 2608/     D31 : 06 00               		ld	b,0
(1) 2609/     D33 : 4F                  		ld	c,a
(1) 2610/     D34 : 09                  		add	hl,bc
(1) 2611/     D35 : FD 7E 08            		ld	a,(iy+08h)
(1) 2612/     D38 : CB 2F               		sra	a		; volume / 2
(1) 2613/     D3A : E6 7F               		and	01111111b
(1) 2614/     D3C : 4F                  		ld	c,a
(1) 2615/     D3D : CF                  		rst	8
(1) 2616/     D3E : 46                  		ld	b,(hl)
(1) 2617/     D3F : E1                  		pop	hl
(1) 2618/     D40 : CB 08               		rrc	b		; OP1
(1) 2619/     D42 : DC 6D 0D            		call	c,.write_tl
(1) 2620/     D45 : 23                  		inc	hl
(1) 2621/     D46 : 14                  		inc	d
(1) 2622/     D47 : 14                  		inc	d
(1) 2623/     D48 : CF                  		rst	8
(1) 2624/     D49 : 14                  		inc	d
(1) 2625/     D4A : 14                  		inc	d
(1) 2626/     D4B : CB 08               		rrc	b		; OP2
(1) 2627/     D4D : DC 6D 0D            		call	c,.write_tl
(1) 2628/     D50 : 23                  		inc	hl
(1) 2629/     D51 : 14                  		inc	d
(1) 2630/     D52 : 14                  		inc	d
(1) 2631/     D53 : 14                  		inc	d
(1) 2632/     D54 : 14                  		inc	d
(1) 2633/     D55 : CB 08               		rrc	b		; OP3
(1) 2634/     D57 : DC 6D 0D            		call	c,.write_tl
(1) 2635/     D5A : 23                  		inc	hl
(1) 2636/     D5B : CF                  		rst	8
(1) 2637/     D5C : 14                  		inc	d
(1) 2638/     D5D : 14                  		inc	d
(1) 2639/     D5E : 14                  		inc	d
(1) 2640/     D5F : 14                  		inc	d
(1) 2641/     D60 : CB 08               		rrc	b		; OP4
(1) 2642/     D62 : DC 6D 0D            		call	c,.write_tl
(1) 2643/     D65 : 23                  		inc	hl
(1) 2644/     D66 : 14                  		inc	d
(1) 2645/     D67 : 14                  		inc	d
(1) 2646/     D68 : 14                  		inc	d
(1) 2647/     D69 : 14                  		inc	d
(1) 2648/     D6A : CF                  		rst	8
(1) 2649/     D6B : C1                  		pop	bc
(1) 2650/     D6C : C9                  		ret
(1) 2651/     D6D :                     .write_tl:
(1) 2652/     D6D : 7E                  		ld	a,(hl)
(1) 2653/     D6E : 91                  		sub	a,c
(1) 2654/     D6F : C5                  		push	bc
(1) 2655/     D70 : 5F                  		ld	e,a
(1) 2656/     D71 : FD 4E 05            		ld	c,(iy+05h)
(1) 2657/     D74 : CD B0 10            		call	fm_autoreg
(1) 2658/     D77 : CF                  		rst	8
(1) 2659/     D78 : C1                  		pop	bc
(1) 2660/     D79 : C9                  		ret
(1) 2661/     D7A :                     ; Jump carry list
(1) 2662/     D7A :                     .fm_cindx:
(1) 2663/     D7A : 08                  		db 1000b
(1) 2664/     D7B : 08                  		db 1000b
(1) 2665/     D7C : 08                  		db 1000b
(1) 2666/     D7D : 08                  		db 1000b
(1) 2667/     D7E : 0C                  		db 1100b
(1) 2668/     D7F : 0E                  		db 1110b
(1) 2669/     D80 : 0E                  		db 1110b
(1) 2670/     D81 : 0F                  		db 1111b
(1) 2671/     D82 :                     ; c - KeyId
(1) 2672/     D82 :                     .fm_wrtalpan:
(1) 2673/     D82 : FD 7E 0C            		ld	a,(iy+0Ch)	; 0B0h algorithm
(1) 2674/     D85 : 5F                  		ld	e,a
(1) 2675/     D86 : 79                  		ld	a,c
(1) 2676/     D87 : E6 03               		and	011b
(1) 2677/     D89 : F6 B0               		or	0B0h
(1) 2678/     D8B : 57                  		ld	d,a
(1) 2679/     D8C : CD B0 10            		call	fm_autoreg
(1) 2680/     D8F : CF                  		rst	8
(1) 2681/     D90 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2682/     D93 : 2F                  		cpl				; REVERSE bits
(1) 2683/     D94 : E6 C0               		and	11000000b
(1) 2684/     D96 : 5F                  		ld	e,a
(1) 2685/     D97 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2686/     D9A : E6 3F               		and	00111111b
(1) 2687/     D9C : B3                  		or	e
(1) 2688/     D9D : 5F                  		ld	e,a
(1) 2689/     D9E : 79                  		ld	a,c
(1) 2690/     D9F : E6 03               		and	011b
(1) 2691/     DA1 : F6 B4               		or	0B4h
(1) 2692/     DA3 : 57                  		ld	d,a
(1) 2693/     DA4 : CD B0 10            		call	fm_autoreg
(1) 2694/     DA7 : CF                  		rst	8
(1) 2695/     DA8 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2696/     DAB : CB 5F               		bit	3,a
(1) 2697/     DAD : 28 06               		jr	z,.no_lfo
(1) 2698/     DAF : 5F                  		ld	e,a
(1) 2699/     DB0 : 16 22               		ld	d,22h
(1) 2700/     DB2 : CD B9 10            		call	fm_send_1
(1) 2701/     DB5 :                     .no_lfo:
(1) 2702/     DB5 : C9                  		ret
(1) 2703/     DB6 :                     
(1) 2704/     DB6 :                     ; ----------------------------------------
(1) 2705/     DB6 :                     
(1) 2706/     DB6 :                     .chnl_ulnkoff:
(1) 2707/     DB6 : 0E 00               		ld	c,0
(1) 2708/     DB8 :                     .chnl_ulnk:
(1) 2709/     DB8 : CF                  		rst	8
(1) 2710/     DB9 : AF                  		xor	a
(1) 2711/     DBA : DD 77 01            		ld	(ix+chnl_Chip),a
(1) 2712/     DBD : FD 77 00            		ld	(iy),a		; Delete link, chip and prio
(1) 2713/     DC0 : FD 77 01            		ld	(iy+1),a
(1) 2714/     DC3 : FD 71 02            		ld	(iy+2),c
(1) 2715/     DC6 : C9                  		ret
(1) 2716/     DC7 :                     .chnl_ulnkcut:
(1) 2717/     DC7 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 2718/     DCA : CD B8 0D            		call	.chnl_ulnk
(1) 2719/     DCD : FD 77 08            		ld	(iy+08h),a
(1) 2720/     DD0 : FD 77 09            		ld	(iy+09h),a
(1) 2721/     DD3 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2722/     DD6 : FD 77 0B            		ld	(iy+0Bh),a
(1) 2723/     DD9 :                     ; 		push	iy
(1) 2724/     DD9 :                     ; 		pop	hl
(1) 2725/     DD9 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 2726/     DD9 :                     ; 		add	hl,bc
(1) 2727/     DD9 :                     ; 		rst	8
(1) 2728/     DD9 :                     ; 		ld	b,8/2
(1) 2729/     DD9 :                     ; .clrfull:
(1) 2730/     DD9 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 2731/     DD9 :                     ; 		inc	hl
(1) 2732/     DD9 :                     ; 		ld	(hl),0
(1) 2733/     DD9 :                     ; 		inc	hl
(1) 2734/     DD9 :                     ; 		rst	8
(1) 2735/     DD9 :                     ; 		djnz	.clrfull
(1) 2736/     DD9 : C9                  		ret
(1) 2737/     DDA :                     
(1) 2738/     DDA :                     ; ============================================================
(1) 2739/     DDA :                     ; --------------------------------------------------------
(1) 2740/     DDA :                     ; Communicate with the 32X from here.
(1) 2741/     DDA :                     ; --------------------------------------------------------
(1) 2742/     DDA :                     
(1) 2743/     DDA :                     ex_comm:
(1) 2744/     DDA : CF                  		rst	8
(1) 2745/     DDB : 00                  		nop
(1) 2859/     DDC : C9                  		ret
(1) 2860/     DDD :                     
(1) 2861/     DDD :                     ; ====================================================================
(1) 2862/     DDD :                     ; ----------------------------------------------------------------
(1) 2863/     DDD :                     ; Subroutines
(1) 2864/     DDD :                     ; ----------------------------------------------------------------
(1) 2865/     DDD :                     
(1) 2866/     DDD :                     ; --------------------------------------------------------
(1) 2867/     DDD :                     ; Init sound engine
(1) 2868/     DDD :                     ; --------------------------------------------------------
(1) 2869/     DDD :                     
(1) 2870/     DDD :                     gema_init:
(1) 2871/     DDD : CD E4 10            		call	dac_off
(1) 2872/     DE0 : 3E 00               		ld	a,0
(1) 2873/     DE2 : 32 3F 00            		ld	(marsUpd),a
(1) 2874/     DE5 : 21 00 1D            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2875/     DE8 : 11 01 1D            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2876/     DEB : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2877/     DEE : 36 80               		ld	(hl),80h	; Set first byte
(1) 2878/     DF0 : ED B0               		ldir			; Start copying
(1) 2879/     DF2 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2880/     DF5 : 36 9F               		ld	(hl),09Fh
(1) 2881/     DF7 : 36 BF               		ld	(hl),0BFh
(1) 2882/     DF9 : 36 DF               		ld	(hl),0DFh
(1) 2883/     DFB : 36 FF               		ld	(hl),0FFh
(1) 2884/     DFD : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 2885/     E00 : CD B9 10            		call	fm_send_1
(1) 2886/     E03 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2887/     E06 : CD B9 10            		call	fm_send_1
(1) 2888/     E09 : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2889/     E0C : CD B9 10            		call	fm_send_1
(1) 2890/     E0F : 1C                  		inc	e
(1) 2891/     E10 : CD B9 10            		call	fm_send_1
(1) 2892/     E13 : 1C                  		inc	e
(1) 2893/     E14 : CD B9 10            		call	fm_send_1
(1) 2894/     E17 : 1C                  		inc	e
(1) 2895/     E18 : 1C                  		inc	e
(1) 2896/     E19 : CD B9 10            		call	fm_send_1
(1) 2897/     E1C : 1C                  		inc	e
(1) 2898/     E1D : CD B9 10            		call	fm_send_1
(1) 2899/     E20 : 1C                  		inc	e
(1) 2900/     E21 : CD B9 10            		call	fm_send_1
(1) 2901/     E24 : 21 00 60            		ld	hl,6000h
(1) 2902/     E27 : 3E 01               		ld	a,1
(1) 2903/     E29 : 77                  		ld	(hl),a
(1) 2904/     E2A : 77                  		ld	(hl),a
(1) 2905/     E2B : 77                  		ld	(hl),a
(1) 2906/     E2C : 77                  		ld	(hl),a
(1) 2907/     E2D : 77                  		ld	(hl),a
(1) 2908/     E2E : 77                  		ld	(hl),a
(1) 2909/     E2F : 77                  		ld	(hl),a
(1) 2910/     E30 : 77                  		ld	(hl),a
(1) 2911/     E31 : 77                  		ld	(hl),a
(1) 2912/     E32 : FD 21 FB 13         		ld	iy,nikona_BuffList
(1) 2913/     E36 : 0E 01               		ld	c,1		; Start at this priority
(1) 2914/     E38 :                     .setup_list:
(1) 2915/     E38 : FD 7E 00            		ld	a,(iy)
(1) 2916/     E3B : FE FF               		cp	-1
(1) 2917/     E3D : 28 44               		jr	z,.end_setup
(1) 2918/     E3F : FD 23               		inc	iy
(1) 2919/     E41 : 6F                  		ld	l,a
(1) 2920/     E42 : FD 66 00            		ld	h,(iy)
(1) 2921/     E45 : E5                  		push	hl
(1) 2922/     E46 : DD E1               		pop	ix
(1) 2923/     E48 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 2924/     E4B : DD 36 01 FF         		ld	(ix+trk_seqId),-1	; Reset sequence ID
(1) 2925/     E4F : FD 23               		inc	iy
(1) 2926/     E51 : 11 26 00            		ld	de,trk_ChnList		; ** settings
(1) 2927/     E54 : 19                  		add	hl,de
(1) 2928/     E55 :                     	; iy - src
(1) 2929/     E55 :                     	; hl - dst
(1) 2930/     E55 : 06 0A               		ld	b,5*2
(1) 2931/     E57 :                     .st_copy:
(1) 2932/     E57 : FD 7E 00            		ld	a,(iy)
(1) 2933/     E5A : 77                  		ld	(hl),a
(1) 2934/     E5B : FD 23               		inc	iy
(1) 2935/     E5D : 23                  		inc	hl
(1) 2936/     E5E : 10 F7               		djnz	.st_copy
(1) 2937/     E60 : 0C                  		inc	c
(1) 2938/     E61 : FD 7E 00            		ld	a,(iy)			; MAX blocks
(1) 2939/     E64 : DD 77 1D            		ld	(ix+trk_MaxBlks),a
(1) 2940/     E67 : FD 23               		inc	iy
(1) 2941/     E69 : FD 7E 00            		ld	a,(iy)			; MAX heads
(1) 2942/     E6C : DD 77 1E            		ld	(ix+trk_MaxHdrs),a
(1) 2943/     E6F : FD 23               		inc	iy
(1) 2944/     E71 : FD 7E 00            		ld	a,(iy)			; MAX intruments
(1) 2945/     E74 : DD 77 1F            		ld	(ix+trk_MaxIns),a
(1) 2946/     E77 : FD 23               		inc	iy
(1) 2947/     E79 : FD 7E 00            		ld	a,(iy)			; MAX channels
(1) 2948/     E7C : DD 77 1C            		ld	(ix+trk_MaxChnls),a
(1) 2949/     E7F : FD 23               		inc	iy
(1) 2950/     E81 : 18 B5               		jr	.setup_list
(1) 2951/     E83 :                     .end_setup:
(1) 2952/     E83 : 1E 00               		ld	e,0
(1) 2953/     E85 : 3E FF               		ld	a,-1			; Reset
(1) 2954/     E87 : 32 3E 00            		ld	(trkListPage),a
(1) 2955/     E8A : C9                  		ret
(1) 2956/     E8B :                     
(1) 2957/     E8B :                     ; --------------------------------------------------------
(1) 2958/     E8B :                     ; get_tick
(1) 2959/     E8B :                     ;
(1) 2960/     E8B :                     ; Checks if VBlank triggred a TICK
(1) 2961/     E8B :                     ; (1/150 NTSC, 1/120 PAL)
(1) 2962/     E8B :                     ; --------------------------------------------------------
(1) 2963/     E8B :                     
(1) 2964/     E8B :                     get_tick:
(1) 2965/     E8B : F3                  		di				; Disable ints
(1) 2966/     E8C : F5                  		push	af
(1) 2967/     E8D : E5                  		push	hl
(1) 2968/     E8E : 21 E8 16            		ld	hl,tickFlag		; read last TICK flag
(1) 2969/     E91 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 2970/     E92 : B7                  		or 	a
(1) 2971/     E93 : 28 13               		jr	z,.ctnotick
(1) 2972/     E95 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2973/     E97 : 23                  		inc	hl			; Move to tickCnt
(1) 2974/     E98 : 34                  		inc	(hl)			; and increment
(1) 2975/     E99 : CF                  		rst	8
(1) 2976/     E9A : D5                  		push	de
(1) 2977/     E9B : 2A 1C 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2978/     E9E : ED 5B 1E 00         		ld	de,(sbeatPtck)
(1) 2979/     EA2 : CF                  		rst	8
(1) 2980/     EA3 : 19                  		add	hl,de
(1) 2981/     EA4 : 22 1C 00            		ld	(sbeatAcc),hl
(1) 2982/     EA7 : D1                  		pop	de
(1) 2983/     EA8 :                     .ctnotick:
(1) 2984/     EA8 : E1                  		pop	hl
(1) 2985/     EA9 : F1                  		pop	af
(1) 2986/     EAA : FB                  		ei				; Enable ints again
(1) 2987/     EAB : C9                  		ret
(1) 2988/     EAC :                     
(1) 2989/     EAC :                     ; --------------------------------------------------------
(1) 2990/     EAC :                     ; showRom
(1) 2991/     EAC :                     ; Get ROM bank position.
(1) 2992/     EAC :                     ;
(1) 2993/     EAC :                     ; Input:
(1) 2994/     EAC :                     ;  b - 68k address $xx0000
(1) 2995/     EAC :                     ; hl - 68k address $00xxxx
(1) 2996/     EAC :                     ;
(1) 2997/     EAC :                     ; Output:
(1) 2998/     EAC :                     ; hl - ROM position ready to use for reading
(1) 2999/     EAC :                     ; --------------------------------------------------------
(1) 3000/     EAC :                     
(1) 3001/     EAC :                     showRom:
(1) 3002/     EAC : CF                  		rst	8
(1) 3003/     EAD : D5                  		push	de
(1) 3004/     EAE : C5                  		push	bc
(1) 3005/     EAF : 11 00 60            		ld	de,6000h
(1) 3006/     EB2 : 7C                  		ld	a,h
(1) 3007/     EB3 : 07                  		rlca
(1) 3008/     EB4 : CF                  		rst	8
(1) 3009/     EB5 : 12                  		ld	(de),a
(1) 3010/     EB6 : 78                  		ld	a,b
(1) 3011/     EB7 : 12                  		ld	(de),a
(1) 3012/     EB8 : 1F                  		rra
(1) 3013/     EB9 : 12                  		ld	(de),a
(1) 3014/     EBA : 1F                  		rra
(1) 3015/     EBB : 12                  		ld	(de),a
(1) 3016/     EBC : 1F                  		rra
(1) 3017/     EBD : CF                  		rst	8
(1) 3018/     EBE : 12                  		ld	(de),a
(1) 3019/     EBF : 1F                  		rra
(1) 3020/     EC0 : 12                  		ld	(de),a
(1) 3021/     EC1 : 1F                  		rra
(1) 3022/     EC2 : 12                  		ld	(de),a
(1) 3023/     EC3 : 1F                  		rra
(1) 3024/     EC4 : 12                  		ld	(de),a
(1) 3025/     EC5 : 1F                  		rra
(1) 3026/     EC6 : 12                  		ld	(de),a
(1) 3027/     EC7 : C1                  		pop	bc
(1) 3028/     EC8 : D1                  		pop	de
(1) 3029/     EC9 : CB FC               		set	7,h
(1) 3030/     ECB : C9                  		ret
(1) 3031/     ECC :                     
(1) 3032/     ECC :                     ; --------------------------------------------------------
(1) 3033/     ECC :                     ; transferRom
(1) 3034/     ECC :                     ;
(1) 3035/     ECC :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3036/     ECC :                     ; to 68k that we want to access ROM
(1) 3037/     ECC :                     ;
(1) 3038/     ECC :                     ; Input:
(1) 3039/     ECC :                     ; a  - 68K Address $xx0000
(1) 3040/     ECC :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3041/     ECC :                     ; hl - 68K Address $00xxxx
(1) 3042/     ECC :                     ; de - Destination pointer
(1) 3043/     ECC :                     ;
(1) 3044/     ECC :                     ; Uses:
(1) 3045/     ECC :                     ; b
(1) 3046/     ECC :                     ;
(1) 3047/     ECC :                     ; Notes:
(1) 3048/     ECC :                     ; call RST 20h first if transfering anything other
(1) 3049/     ECC :                     ; than sample data, just to be safe.
(1) 3050/     ECC :                     ; --------------------------------------------------------
(1) 3051/     ECC :                     
(1) 3052/     ECC :                     transferRom:
(1) 3053/     ECC : CF                  		rst	8
(1) 3054/     ECD : DD E5               		push	ix
(1) 3055/     ECF : DD 21 81 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3056/     ED3 : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3057/     ED6 : CB BC               		res	7,h
(1) 3058/     ED8 : 06 00               		ld	b,0
(1) 3059/     EDA : 0B                  		dec	bc
(1) 3060/     EDB : 09                  		add	hl,bc
(1) 3061/     EDC : CB 7C               		bit	7,h
(1) 3062/     EDE : 20 0B               		jr	nz,.double
(1) 3063/     EE0 : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3064/     EE3 : 0C                  		inc	c
(1) 3065/     EE4 : 47                  		ld	b,a
(1) 3066/     EE5 : CD 0F 0F            		call	.transfer
(1) 3067/     EE8 : DD E1               		pop	ix
(1) 3068/     EEA : C9                  		ret
(1) 3069/     EEB :                     .double:
(1) 3070/     EEB : CF                  		rst	8
(1) 3071/     EEC : 47                  		ld	b,a		; double transfer
(1) 3072/     EED : C5                  		push	bc
(1) 3073/     EEE : E5                  		push	hl
(1) 3074/     EEF : 79                  		ld	a,c
(1) 3075/     EF0 : 95                  		sub	a,l
(1) 3076/     EF1 : 4F                  		ld	c,a
(1) 3077/     EF2 : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 3078/     EF5 : CD 0F 0F            		call	.transfer
(1) 3079/     EF8 : E1                  		pop	hl
(1) 3080/     EF9 : C1                  		pop	bc
(1) 3081/     EFA :                     ; 		rst	8
(1) 3082/     EFA : 4D                  		ld	c,l
(1) 3083/     EFB : 0C                  		inc	c
(1) 3084/     EFC : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 3085/     EFF : E6 80               		and	80h
(1) 3086/     F01 : C6 80               		add	a,80h
(1) 3087/     F03 : 67                  		ld	h,a
(1) 3088/     F04 : 2E 00               		ld	l,0
(1) 3089/     F06 : 30 01               		jr	nc,.x68knocarry
(1) 3090/     F08 : 04                  		inc	b
(1) 3091/     F09 :                     .x68knocarry:
(1) 3092/     F09 : CD 0F 0F            		call	.transfer
(1) 3093/     F0C : DD E1               		pop	ix
(1) 3094/     F0E : C9                  		ret
(1) 3095/     F0F :                     
(1) 3096/     F0F :                     ; ------------------------------------------------
(1) 3097/     F0F :                     ; b  - Source ROM xx0000
(1) 3098/     F0F :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3099/     F0F :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3100/     F0F :                     ; de - Destination address
(1) 3101/     F0F :                     ; ix - Location of the ROM block flag(s)
(1) 3102/     F0F :                     ;
(1) 3103/     F0F :                     ; Uses:
(1) 3104/     F0F :                     ; a
(1) 3105/     F0F :                     ; ------------------------------------------------
(1) 3106/     F0F :                     
(1) 3107/     F0F :                     .transfer:
(1) 3108/     F0F : CD AC 0E            		call	showRom		; Pick ROM bank
(1) 3109/     F12 :                     
(1) 3110/     F12 :                     	; Transfer ROM data in packets
(1) 3111/     F12 :                     	; while playing the cache'd sample
(1) 3112/     F12 :                     	; *** CRITICAL PROCESS ***
(1) 3113/     F12 :                     	;
(1) 3114/     F12 :                     	; pseudo-reference
(1) 3115/     F12 :                     	; for ldir:
(1) 3116/     F12 :                     	; ld (de),(hl)	; load (hl) to (de), no a
(1) 3117/     F12 :                     	; inc de	; next de
(1) 3118/     F12 :                     	; inc hl	; next hl
(1) 3119/     F12 :                     	; dec bc	; decrement bc
(1) 3120/     F12 :                     	;
(1) 3121/     F12 : 06 00               		ld	b,0
(1) 3122/     F14 : 79                  		ld	a,c		; a - Size counter
(1) 3123/     F15 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3124/     F17 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3125/     F19 :                     .x68kloop:
(1) 3126/     F19 : CF                  		rst	8
(1) 3127/     F1A : 00                  		nop
(1) 3128/     F1B : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3129/     F1D : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3130/     F21 : C4 3B 0F            		call	nz,.x68klpwt
(1) 3131/     F24 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3132/     F26 : CF                  		rst	8
(1) 3133/     F27 : 00                  		nop
(1) 3134/     F28 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3135/     F2A : D2 19 0F            		jp	nc,.x68kloop
(1) 3136/     F2D :                     ; last block
(1) 3137/     F2D :                     .x68klast:
(1) 3138/     F2D : CF                  		rst	8
(1) 3139/     F2E : C6 08               		add	a,MAX_TRFRPZ
(1) 3140/     F30 : 4F                  		ld	c,a
(1) 3141/     F31 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3142/     F35 : C4 3B 0F            		call	nz,.x68klpwt
(1) 3143/     F38 : ED B0               		ldir
(1) 3144/     F3A : C9                  		ret
(1) 3145/     F3B :                     
(1) 3146/     F3B :                     ; Wait here until Genesis unlocks ROM
(1) 3147/     F3B :                     .x68klpwt:
(1) 3148/     F3B : CF                  		rst	8
(1) 3149/     F3C : 00                  		nop
(1) 3150/     F3D : 00                  		nop
(1) 3151/     F3E : 00                  		nop
(1) 3152/     F3F : 00                  		nop
(1) 3153/     F40 :                     .x68kpwtlp:
(1) 3154/     F40 : CF                  		rst	8
(1) 3155/     F41 : 00                  		nop
(1) 3156/     F42 : 00                  		nop
(1) 3157/     F43 : 00                  		nop
(1) 3158/     F44 : 00                  		nop
(1) 3159/     F45 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3160/     F49 : 20 F5               		jr	nz,.x68kpwtlp
(1) 3161/     F4B : CF                  		rst	8
(1) 3162/     F4C : C9                  		ret
(1) 3163/     F4D :                     
(1) 3164/     F4D :                     ; ====================================================================
(1) 3165/     F4D :                     ; ----------------------------------------------------------------
(1) 3166/     F4D :                     ; Sound chip routines
(1) 3167/     F4D :                     ; ----------------------------------------------------------------
(1) 3168/     F4D :                     
(1) 3169/     F4D :                     ; --------------------------------------------------------
(1) 3170/     F4D :                     ; chip_env
(1) 3171/     F4D :                     ;
(1) 3172/     F4D :                     ; Process PSG and FM
(1) 3173/     F4D :                     ; --------------------------------------------------------
(1) 3174/     F4D :                     
(1) 3175/     F4D :                     chip_env:
(1) 3176/     F4D : FD 21 82 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3177/     F51 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3178/     F55 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3179/     F57 : 06 04               		ld	b,4			; b - 4 channels
(1) 3180/     F59 :                     .vloop:
(1) 3181/     F59 : CF                  		rst	8
(1) 3182/     F5A : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3183/     F5D : FD 36 00 00         		ld	(iy+COM),0
(1) 3184/     F61 :                     
(1) 3185/     F61 :                     	; ----------------------------
(1) 3186/     F61 :                     	; bit 2 - stop sound
(1) 3187/     F61 : CB 53               		bit	2,e
(1) 3188/     F63 : 28 0C               		jr	z,.ckof
(1) 3189/     F65 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3190/     F69 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3191/     F6D : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3192/     F71 :                     .ckof:
(1) 3193/     F71 :                     
(1) 3194/     F71 :                     	; ----------------------------
(1) 3195/     F71 :                     	; bit 1 - key off
(1) 3196/     F71 : CB 4B               		bit	1,e
(1) 3197/     F73 : 28 0F               		jr      z,.ckon
(1) 3198/     F75 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3199/     F78 : B7                  		or	a
(1) 3200/     F79 : 28 09               		jr	z,.ckon
(1) 3201/     F7B : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3202/     F7F : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3203/     F83 : CF                  		rst	8
(1) 3204/     F84 :                     .ckon:
(1) 3205/     F84 :                     
(1) 3206/     F84 :                     	; ----------------------------
(1) 3207/     F84 :                     	; bit 0 - key on
(1) 3208/     F84 : CB 43               		bit	0,e
(1) 3209/     F86 : 28 1A               		jr	z,.envproc
(1) 3210/     F88 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3211/     F8C : 78                  		ld	a,b
(1) 3212/     F8D : FE 04               		cp	4			; NOISE channel?
(1) 3213/     F8F : 20 08               		jr	nz,.nskip
(1) 3214/     F91 : CF                  		rst	8			; Set NOISE mode
(1) 3215/     F92 : 3A EA 16            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3216/     F95 : B1                  		or	c
(1) 3217/     F96 : DD 77 00            		ld	(ix),a
(1) 3218/     F99 :                     .nskip:
(1) 3219/     F99 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3220/     F9D : CF                  		rst	8
(1) 3221/     F9E : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3222/     FA2 :                     .nblock:
(1) 3223/     FA2 :                     
(1) 3224/     FA2 :                     	; ----------------------------
(1) 3225/     FA2 :                     	; Process effects
(1) 3226/     FA2 :                     	; ----------------------------
(1) 3227/     FA2 :                     .envproc:
(1) 3228/     FA2 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3229/     FA5 : B7                  		or	a			; no modes
(1) 3230/     FA6 : CA 2C 10            		jp	z,.vedlp
(1) 3231/     FA9 : FE 01               		cp 	001b			; Attack mode
(1) 3232/     FAB : 20 2C               		jr	nz,.chk2
(1) 3233/     FAD : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3234/     FB1 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3235/     FB4 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3236/     FB7 : B7                  		or	a
(1) 3237/     FB8 : 28 16               		jr	z,.atkend
(1) 3238/     FBA : 57                  		ld	d,a			; c - attack rate
(1) 3239/     FBB : 7B                  		ld	a,e			; a - attack level
(1) 3240/     FBC : CF                  		rst	8
(1) 3241/     FBD : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3242/     FC0 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3243/     FC1 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3244/     FC3 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3245/     FC5 : BB                  		cp	e			; attack rate == level?
(1) 3246/     FC6 : 38 08               		jr	c,.atkend
(1) 3247/     FC8 : 28 06               		jr	z,.atkend
(1) 3248/     FCA : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3249/     FCD : CF                  		rst	8
(1) 3250/     FCE : 18 5C               		jr	.vedlp
(1) 3251/     FD0 :                     .atkend:
(1) 3252/     FD0 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3253/     FD3 :                     .atkzero:
(1) 3254/     FD3 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3255/     FD7 : 18 53               		jr	.vedlp
(1) 3256/     FD9 :                     .chk2:
(1) 3257/     FD9 :                     
(1) 3258/     FD9 : FE 02               		cp	010b			; Decay mode
(1) 3259/     FDB : 20 31               		jr	nz,.chk4
(1) 3260/     FDD :                     .dectmr:
(1) 3261/     FDD : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3262/     FE1 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3263/     FE4 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3264/     FE7 : BB                  		cp	e
(1) 3265/     FE8 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3266/     FEA : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3267/     FEC : CF                  		rst	8
(1) 3268/     FED : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3269/     FF0 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3270/     FF2 : BB                  		cp	e			; compare level
(1) 3271/     FF3 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3272/     FF5 : 18 08               		jr	.dksav
(1) 3273/     FF7 :                     .dkadd:
(1) 3274/     FF7 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3275/     FFA : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3276/     FFC : BB                  		cp	e			; compare level
(1) 3277/     FFD : 30 05               		jr	nc,.dkyend
(1) 3278/     FFF :                     .dksav:
(1) 3279/     FFF : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3280/    1002 : 18 28               		jr	.vedlp
(1) 3281/    1004 :                     .dkyend:
(1) 3282/    1004 : CF                  		rst	8
(1) 3283/    1005 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3284/    1008 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3285/    100C : 18 1E               		jr	.vedlp
(1) 3286/    100E :                     .chk4:
(1) 3287/    100E : FE 04               		cp	100b			; Sustain phase
(1) 3288/    1010 : 20 1A               		jr	nz,.vedlp
(1) 3289/    1012 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3290/    1016 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3291/    1019 : CF                  		rst	8
(1) 3292/    101A : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3293/    101D : 38 05               		jr	c,.killenv		; release done
(1) 3294/    101F : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3295/    1022 : 18 08               		jr	.vedlp
(1) 3296/    1024 :                     .killenv:
(1) 3297/    1024 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3298/    1028 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3299/    102C :                     .vedlp:
(1) 3300/    102C :                     
(1) 3301/    102C :                     	; ----------------------------
(1) 3302/    102C :                     	; PSG UPDATE
(1) 3303/    102C :                     	; ----------------------------
(1) 3304/    102C : FD 7E 28            		ld	a,(iy+FLG)
(1) 3305/    102F : B7                  		or	a
(1) 3306/    1030 : 28 72               		jr	z,.noupd
(1) 3307/    1032 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3308/    1036 : 59                  		ld	e,c
(1) 3309/    1037 : 3A EA 16            		ld	a,(psgHatMode)
(1) 3310/    103A : 57                  		ld	d,a
(1) 3311/    103B : E6 03               		and	011b
(1) 3312/    103D : FE 03               		cp	011b
(1) 3313/    103F : 20 1D               		jr	nz,.normal
(1) 3314/    1041 : CF                  		rst	8
(1) 3315/    1042 : 78                  		ld	a,b		; Channel 4?
(1) 3316/    1043 : FE 03               		cp	3
(1) 3317/    1045 : 28 13               		jr	z,.silnc_3
(1) 3318/    1047 : FE 04               		cp	4
(1) 3319/    1049 : 20 18               		jr	nz,.do_nfreq
(1) 3320/    104B : 3A EA 16            		ld	a,(psgHatMode)
(1) 3321/    104E : 57                  		ld	d,a
(1) 3322/    104F : E6 03               		and	011b
(1) 3323/    1051 : CF                  		rst	8
(1) 3324/    1052 : FE 03               		cp	011b
(1) 3325/    1054 : 20 30               		jr	nz,.vonly
(1) 3326/    1056 : 1E C0               		ld	e,0C0h
(1) 3327/    1058 : 18 09               		jr	.do_nfreq
(1) 3328/    105A :                     .silnc_3:
(1) 3329/    105A : 3E FF               		ld	a,-1
(1) 3330/    105C : 18 32               		jr	.vlmuch
(1) 3331/    105E :                     .normal:
(1) 3332/    105E : 78                  		ld	a,b
(1) 3333/    105F : FE 04               		cp	4
(1) 3334/    1061 : 28 23               		jr	z,.vonly
(1) 3335/    1063 :                     .do_nfreq:
(1) 3336/    1063 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3337/    1066 : FD 66 20            		ld	h,(iy+DTH)
(1) 3338/    1069 :                     
(1) 3339/    1069 :                     	; freq effects go here
(1) 3340/    1069 :                     	; (save e FIRST.)
(1) 3341/    1069 :                     	;	push	de
(1) 3342/    1069 :                     	;	pop	de
(1) 3343/    1069 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3344/    106A : E6 0F               		and	00001111b
(1) 3345/    106C : B3                  		or	e		; OR with channel set in e
(1) 3346/    106D : CF                  		rst	8
(1) 3347/    106E : DD 77 00            		ld	(ix),a		; write it
(1) 3348/    1071 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3349/    1072 : 0F                  		rrca
(1) 3350/    1073 : 0F                  		rrca
(1) 3351/    1074 : 0F                  		rrca
(1) 3352/    1075 : 0F                  		rrca
(1) 3353/    1076 : E6 0F               		and	00001111b
(1) 3354/    1078 : 5F                  		ld	e,a
(1) 3355/    1079 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3356/    107A : CF                  		rst	8
(1) 3357/    107B : 07                  		rlca
(1) 3358/    107C : 07                  		rlca
(1) 3359/    107D : 07                  		rlca
(1) 3360/    107E : 07                  		rlca
(1) 3361/    107F : E6 30               		and	00110000b
(1) 3362/    1081 : B3                  		or	e
(1) 3363/    1082 : DD 77 00            		ld	(ix),a
(1) 3364/    1085 : CF                  		rst	8
(1) 3365/    1086 :                     .vonly:
(1) 3366/    1086 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3367/    1089 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3368/    108C : 30 02               		jr	nc,.vlmuch
(1) 3369/    108E : 3E FF               		ld	a,-1
(1) 3370/    1090 :                     .vlmuch:
(1) 3371/    1090 : CB 3F               		srl	a			; (Level >> 4)
(1) 3372/    1092 : CB 3F               		srl	a
(1) 3373/    1094 : CB 3F               		srl	a
(1) 3374/    1096 : CF                  		rst	8
(1) 3375/    1097 : CB 3F               		srl	a
(1) 3376/    1099 : E6 0F               		and	00001111b		; Filter volume value
(1) 3377/    109B : B1                  		or	c			; and OR with current channel
(1) 3378/    109C : F6 90               		or	90h			; Set volume-set mode
(1) 3380/    109E : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3382/    10A1 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3383/    10A4 :                     .noupd:
(1) 3384/    10A4 :                     	; ----------------------------
(1) 3385/    10A4 : FD 2B               		dec	iy			; next COM to check
(1) 3386/    10A6 : 79                  		ld	a,c
(1) 3387/    10A7 : CF                  		rst	8
(1) 3388/    10A8 : D6 20               		sub	a,20h			; next PSG backwards
(1) 3389/    10AA : 4F                  		ld	c,a
(1) 3390/    10AB : 05                  		dec	b
(1) 3391/    10AC : C2 59 0F            		jp	nz,.vloop
(1) 3392/    10AF : C9                  		ret
(1) 3393/    10B0 :                     
(1) 3394/    10B0 :                     ; ---------------------------------------------
(1) 3395/    10B0 :                     ; FM register writes
(1) 3396/    10B0 :                     ;
(1) 3397/    10B0 :                     ; Input:
(1) 3398/    10B0 :                     ; d - ctrl
(1) 3399/    10B0 :                     ; e - data
(1) 3400/    10B0 :                     ; ---------------------------------------------
(1) 3401/    10B0 :                     
(1) 3402/    10B0 :                     ; c - KeyID
(1) 3403/    10B0 :                     fm_autoreg:
(1) 3404/    10B0 : CB 51               		bit	2,c
(1) 3405/    10B2 : CC B9 10            		call	z,fm_send_1
(1) 3406/    10B5 : C4 C4 10            		call	nz,fm_send_2
(1) 3407/    10B8 : C9                  		ret
(1) 3408/    10B9 :                     ; Channels 1-3 and global registers
(1) 3409/    10B9 :                     fm_send_1:
(1) 3410/    10B9 : 7A                  		ld	a,d
(1) 3411/    10BA : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3412/    10BD : 00                  		nop
(1) 3413/    10BE : 7B                  		ld	a,e
(1) 3414/    10BF : 32 01 40            		ld	(Zym_data_1),a
(1) 3415/    10C2 : 00                  		nop
(1) 3416/    10C3 : C9                  		ret
(1) 3417/    10C4 :                     ; Channels 4-6
(1) 3418/    10C4 :                     fm_send_2:
(1) 3419/    10C4 : 7A                  		ld	a,d
(1) 3420/    10C5 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3421/    10C8 : 00                  		nop
(1) 3422/    10C9 : 7B                  		ld	a,e
(1) 3423/    10CA : 32 03 40            		ld	(Zym_data_2),a
(1) 3424/    10CD : 00                  		nop
(1) 3425/    10CE : C9                  		ret
(1) 3426/    10CF :                     
(1) 3427/    10CF :                     ; --------------------------------------------------------
(1) 3428/    10CF :                     ; brute-force WAVE ON/OFF playback
(1) 3429/    10CF :                     ; --------------------------------------------------------
(1) 3430/    10CF :                     
(1) 3431/    10CF :                     dac_on:
(1) 3432/    10CF : 3E 2B               		ld	a,2Bh
(1) 3433/    10D1 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3434/    10D4 : 3E 80               		ld	a,80h
(1) 3435/    10D6 : 32 01 40            		ld	(Zym_data_1),a
(1) 3436/    10D9 : 3E D9               		ld 	a,zopcExx
(1) 3437/    10DB : 32 08 00            		ld	(dac_me),a
(1) 3438/    10DE : 3E F5               		ld 	a,zopcPushAf
(1) 3439/    10E0 : 32 20 00            		ld	(dac_fill),a
(1) 3440/    10E3 : C9                  		ret
(1) 3441/    10E4 :                     dac_off:
(1) 3442/    10E4 : 3E 2B               		ld	a,2Bh
(1) 3443/    10E6 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3444/    10E9 : 3E 00               		ld	a,00h
(1) 3445/    10EB : 32 01 40            		ld	(Zym_data_1),a
(1) 3446/    10EE : 3E C9               		ld 	a,zopcRet
(1) 3447/    10F0 : 32 08 00            		ld	(dac_me),a
(1) 3448/    10F3 : 3E C9               		ld 	a,zopcRet
(1) 3449/    10F5 : 32 20 00            		ld	(dac_fill),a
(1) 3450/    10F8 : C9                  		ret
(1) 3451/    10F9 :                     
(1) 3452/    10F9 :                     ; --------------------------------------------------------
(1) 3453/    10F9 :                     ; dac_play
(1) 3454/    10F9 :                     ;
(1) 3455/    10F9 :                     ; Plays a new sample
(1) 3456/    10F9 :                     ;
(1) 3457/    10F9 :                     ; NOTE:
(1) 3458/    10F9 :                     ; Set wave_Flags and wave_Pitch externally
(1) 3459/    10F9 :                     ; getting here.
(1) 3460/    10F9 :                     ; --------------------------------------------------------
(1) 3461/    10F9 :                     
(1) 3462/    10F9 :                     dac_play:
(1) 3463/    10F9 : F3                  		di
(1) 3464/    10FA : CD E4 10            		call	dac_off
(1) 3465/    10FD : D9                  		exx				; flip exx regs
(1) 3466/    10FE : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3467/    1101 : ED 5B E4 16         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3468/    1105 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3469/    1108 : D9                  		exx				; move them back
(1) 3470/    1109 : 2A DB 16            		ld	hl,(wave_Start)
(1) 3471/    110C : 3A DD 16            		ld 	a,(wave_Start+2)
(1) 3472/    110F : 22 30 00            		ld	(dDacPntr),hl
(1) 3473/    1112 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3474/    1115 : 2A DE 16            		ld	hl,(wave_Len)
(1) 3475/    1118 : 3A E0 16            		ld 	a,(wave_Len+2)
(1) 3476/    111B : 22 33 00            		ld	(dDacCntr),hl
(1) 3477/    111E : 32 35 00            		ld	(dDacCntr+2),a
(1) 3478/    1121 : AF                  		xor	a
(1) 3479/    1122 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3480/    1125 : CD 2D 11            		call	dac_firstfill
(1) 3481/    1128 : CD CF 10            		call	dac_on
(1) 3482/    112B : FB                  		ei
(1) 3483/    112C : C9                  		ret
(1) 3484/    112D :                     
(1) 3485/    112D :                     ; --------------------------------------------------------
(1) 3486/    112D :                     
(1) 3487/    112D :                     dac_firstfill:
(1) 3488/    112D :                     ; 		push	af
(1) 3489/    112D :                     dac_refill:
(1) 3490/    112D : CF                  		rst	8
(1) 3491/    112E : C5                  		push	bc
(1) 3492/    112F : D5                  		push	de
(1) 3493/    1130 : E5                  		push	hl
(1) 3494/    1131 : 3A E6 16            		ld	a,(wave_Flags)	; Already finished?
(1) 3495/    1134 : FE 07               		cp	111b
(1) 3496/    1136 : D2 EC 11            		jp	nc,.dacfill_end
(1) 3497/    1139 : 3A 35 00            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3498/    113C : 2A 33 00            		ld	hl,(dDacCntr)
(1) 3499/    113F : 01 80 00            		ld	bc,80h
(1) 3500/    1142 : 37                  		scf
(1) 3501/    1143 : 3F                  		ccf
(1) 3502/    1144 : ED 42               		sbc	hl,bc
(1) 3503/    1146 : DE 00               		sbc	a,0
(1) 3504/    1148 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3505/    114B : 22 33 00            		ld	(dDacCntr),hl
(1) 3506/    114E : 16 1D               		ld	d,dWaveBuff>>8
(1) 3507/    1150 : B7                  		or	a
(1) 3508/    1151 : FA 7B 11            		jp	m,.dac_over
(1) 3509/    1154 : 3A 2F 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 3510/    1157 : 5F                  		ld	e,a
(1) 3511/    1158 : C6 80               		add 	a,80h
(1) 3512/    115A : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3513/    115D : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3514/    1160 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3515/    1163 : CD CC 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3516/    1166 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3517/    1169 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3518/    116C : 01 80 00            		ld	bc,80h
(1) 3519/    116F : 09                  		add	hl,bc
(1) 3520/    1170 : CE 00               		adc	a,0
(1) 3521/    1172 : 22 30 00            		ld	(dDacPntr),hl
(1) 3522/    1175 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3523/    1178 : C3 EF 11            		jp	.dacfill_ret
(1) 3524/    117B :                     
(1) 3525/    117B :                     ; NOTE:
(1) 3526/    117B :                     ; This doesn't finish at the exact
(1) 3527/    117B :                     ; the END point.
(1) 3528/    117B :                     .dac_over:
(1) 3529/    117B : 16 1D               		ld	d,dWaveBuff>>8
(1) 3530/    117D : 3A E6 16            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 3531/    1180 : E6 01               		and	001b
(1) 3532/    1182 : C2 A5 11            		jp	nz,.dacfill_loop
(1) 3533/    1185 : 7D                  		ld	a,l
(1) 3534/    1186 : C6 80               		add	a,80h
(1) 3535/    1188 : 4F                  		ld	c,a
(1) 3536/    1189 : 06 00               		ld	b,0
(1) 3537/    118B : C5                  		push	bc
(1) 3538/    118C : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3539/    118F : 5F                  		ld	e,a
(1) 3540/    1190 : C6 80               		add	a,80h
(1) 3541/    1192 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3542/    1195 : C1                  		pop	bc
(1) 3543/    1196 : 79                  		ld	a,c
(1) 3544/    1197 : B0                  		or	b
(1) 3545/    1198 : 28 52               		jr	z,.dacfill_end
(1) 3546/    119A : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3547/    119D : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3548/    11A0 : CD CC 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3549/    11A3 : 18 47               		jr	.dacfill_end
(1) 3550/    11A5 :                     .dacfill_loop:
(1) 3551/    11A5 :                     	; loop sample
(1) 3552/    11A5 : C5                  		push	bc
(1) 3553/    11A6 : D5                  		push	de
(1) 3554/    11A7 : 3A E3 16            		ld	a,(wave_Loop+2)
(1) 3555/    11AA : 4F                  		ld	c,a
(1) 3556/    11AB : ED 5B E1 16         		ld	de,(wave_Loop)
(1) 3557/    11AF : 2A DB 16            		ld	hl,(wave_Start)
(1) 3558/    11B2 : 3A DD 16            		ld 	a,(wave_Start+2)
(1) 3559/    11B5 : 81                  		add	a,c
(1) 3560/    11B6 : 19                  		add	hl,de
(1) 3561/    11B7 : CE 00               		adc	a,0
(1) 3562/    11B9 : 22 30 00            		ld	(dDacPntr),hl
(1) 3563/    11BC : 32 32 00            		ld	(dDacPntr+2),a
(1) 3564/    11BF : 2A DE 16            		ld	hl,(wave_Len)
(1) 3565/    11C2 : 3A E0 16            		ld 	a,(wave_Len+2)
(1) 3566/    11C5 : 91                  		sub	a,c
(1) 3567/    11C6 : 37                  		scf
(1) 3568/    11C7 : 3F                  		ccf
(1) 3569/    11C8 : ED 52               		sbc	hl,de
(1) 3570/    11CA : DE 00               		sbc	a,0
(1) 3571/    11CC : 22 33 00            		ld	(dDacCntr),hl
(1) 3572/    11CF : 32 35 00            		ld	(dDacCntr+2),a
(1) 3573/    11D2 : D1                  		pop	de
(1) 3574/    11D3 : C1                  		pop	bc
(1) 3575/    11D4 : 78                  		ld	a,b
(1) 3576/    11D5 : B1                  		or	c
(1) 3577/    11D6 : 28 17               		jr	z,.dacfill_ret
(1) 3578/    11D8 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3579/    11DB : 5F                  		ld	e,a
(1) 3580/    11DC : C6 80               		add	a,80h
(1) 3581/    11DE : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3582/    11E1 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3583/    11E4 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3584/    11E7 : CD CC 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3585/    11EA : 18 03               		jr	.dacfill_ret
(1) 3586/    11EC :                     
(1) 3587/    11EC :                     .dacfill_end:
(1) 3588/    11EC : CD E4 10            		call	dac_off		; DAC finished
(1) 3589/    11EF :                     
(1) 3590/    11EF :                     .dacfill_ret:
(1) 3591/    11EF : E1                  		pop	hl
(1) 3592/    11F0 : D1                  		pop	de
(1) 3593/    11F1 : C1                  		pop	bc
(1) 3594/    11F2 :                     ; 		pop	af
(1) 3595/    11F2 : C9                  		ret
(1) 3596/    11F3 :                     
(1) 3597/    11F3 :                     ; ====================================================================
(1) 3598/    11F3 :                     ; ----------------------------------------------------------------
(1) 3599/    11F3 :                     ; Tables
(1) 3600/    11F3 :                     ; ----------------------------------------------------------------
(1) 3601/    11F3 :                     
(1) 3602/    11F3 : 84 02               fmFreq_List:	dw 644
(1) 3603/    11F5 : A9 02               		dw 681
(1) 3604/    11F7 : D2 02               		dw 722
(1) 3605/    11F9 : FD 02               		dw 765
(1) 3606/    11FB : 2A 03               		dw 810
(1) 3607/    11FD : 5A 03               		dw 858
(1) 3608/    11FF : 8E 03               		dw 910
(1) 3609/    1201 : C4 03               		dw 964
(1) 3610/    1203 : FD 03               		dw 1021
(1) 3611/    1205 : 39 04               		dw 1081
(1) 3612/    1207 : 7A 04               		dw 1146
(1) 3613/    1209 : BE 04               		dw 1214
(1) 3614/    120B :                     psgFreq_List:
(1) 3615/    120B : FF FF               		dw -1		; C-0 00
(1) 3616/    120D : FF FF               		dw -1
(1) 3617/    120F : FF FF               		dw -1
(1) 3618/    1211 : FF FF               		dw -1
(1) 3619/    1213 : FF FF               		dw -1
(1) 3620/    1215 : FF FF               		dw -1
(1) 3621/    1217 : FF FF               		dw -1
(1) 3622/    1219 : FF FF               		dw -1
(1) 3623/    121B : FF FF               		dw -1
(1) 3624/    121D : FF FF               		dw -1
(1) 3625/    121F : FF FF               		dw -1
(1) 3626/    1221 : FF FF               		dw -1
(1) 3627/    1223 : FF FF               		dw -1		; C-1 0C
(1) 3628/    1225 : FF FF               		dw -1
(1) 3629/    1227 : FF FF               		dw -1
(1) 3630/    1229 : FF FF               		dw -1
(1) 3631/    122B : FF FF               		dw -1
(1) 3632/    122D : FF FF               		dw -1
(1) 3633/    122F : FF FF               		dw -1
(1) 3634/    1231 : FF FF               		dw -1
(1) 3635/    1233 : FF FF               		dw -1
(1) 3636/    1235 : FF FF               		dw -1
(1) 3637/    1237 : FF FF               		dw -1
(1) 3638/    1239 : FF FF               		dw -1
(1) 3639/    123B : FF FF               		dw -1		; C-2 18
(1) 3640/    123D : FF FF               		dw -1
(1) 3641/    123F : FF FF               		dw -1
(1) 3642/    1241 : FF FF               		dw -1
(1) 3643/    1243 : FF FF               		dw -1
(1) 3644/    1245 : FF FF               		dw -1
(1) 3645/    1247 : FF FF               		dw -1
(1) 3646/    1249 : FF FF               		dw -1
(1) 3647/    124B : FF FF               		dw -1
(1) 3648/    124D : FF FF               		dw -1
(1) 3649/    124F : FF FF               		dw -1
(1) 3650/    1251 : FF FF               		dw -1
(1) 3651/    1253 : FF FF               		dw -1		; C-3 24
(1) 3652/    1255 : FF FF               		dw -1
(1) 3653/    1257 : FF FF               		dw -1
(1) 3654/    1259 : FF FF               		dw -1
(1) 3655/    125B : FF FF               		dw -1
(1) 3656/    125D : FF FF               		dw -1
(1) 3657/    125F : FF FF               		dw -1
(1) 3658/    1261 : FF FF               		dw -1
(1) 3659/    1263 : FF FF               		dw -1
(1) 3660/    1265 : F8 03               		dw 3F8h
(1) 3661/    1267 : BF 03               		dw 3BFh
(1) 3662/    1269 : 89 03               		dw 389h
(1) 3663/    126B : 56 03               		dw 356h		; C-4 30
(1) 3664/    126D : 26 03               		dw 326h
(1) 3665/    126F : F9 02               		dw 2F9h
(1) 3666/    1271 : CE 02               		dw 2CEh
(1) 3667/    1273 : A5 02               		dw 2A5h
(1) 3668/    1275 : 80 02               		dw 280h
(1) 3669/    1277 : 5C 02               		dw 25Ch
(1) 3670/    1279 : 3A 02               		dw 23Ah
(1) 3671/    127B : 1A 02               		dw 21Ah
(1) 3672/    127D : FB 01               		dw 1FBh
(1) 3673/    127F : DF 01               		dw 1DFh
(1) 3674/    1281 : C4 01               		dw 1C4h
(1) 3675/    1283 : AB 01               		dw 1ABh		; C-5 3C
(1) 3676/    1285 : 93 01               		dw 193h
(1) 3677/    1287 : 7D 01               		dw 17Dh
(1) 3678/    1289 : 67 01               		dw 167h
(1) 3679/    128B : 53 01               		dw 153h
(1) 3680/    128D : 40 01               		dw 140h
(1) 3681/    128F : 2E 01               		dw 12Eh
(1) 3682/    1291 : 1D 01               		dw 11Dh
(1) 3683/    1293 : 0D 01               		dw 10Dh
(1) 3684/    1295 : FE 00               		dw 0FEh
(1) 3685/    1297 : EF 00               		dw 0EFh
(1) 3686/    1299 : E2 00               		dw 0E2h
(1) 3687/    129B : D6 00               		dw 0D6h		; C-6 48
(1) 3688/    129D : C9 00               		dw 0C9h
(1) 3689/    129F : BE 00               		dw 0BEh
(1) 3690/    12A1 : B4 00               		dw 0B4h
(1) 3691/    12A3 : A9 00               		dw 0A9h
(1) 3692/    12A5 : A0 00               		dw 0A0h
(1) 3693/    12A7 : 97 00               		dw 097h
(1) 3694/    12A9 : 8F 00               		dw 08Fh
(1) 3695/    12AB : 87 00               		dw 087h
(1) 3696/    12AD : 7F 00               		dw 07Fh
(1) 3697/    12AF : 78 00               		dw 078h
(1) 3698/    12B1 : 71 00               		dw 071h
(1) 3699/    12B3 : 6B 00               		dw 06Bh		; C-7 54
(1) 3700/    12B5 : 65 00               		dw 065h
(1) 3701/    12B7 : 5F 00               		dw 05Fh
(1) 3702/    12B9 : 5A 00               		dw 05Ah
(1) 3703/    12BB : 55 00               		dw 055h
(1) 3704/    12BD : 50 00               		dw 050h
(1) 3705/    12BF : 4B 00               		dw 04Bh
(1) 3706/    12C1 : 47 00               		dw 047h
(1) 3707/    12C3 : 43 00               		dw 043h
(1) 3708/    12C5 : 40 00               		dw 040h
(1) 3709/    12C7 : 3C 00               		dw 03Ch
(1) 3710/    12C9 : 39 00               		dw 039h
(1) 3711/    12CB : 36 00               		dw 036h		; C-8 60
(1) 3712/    12CD : 33 00               		dw 033h
(1) 3713/    12CF : 30 00               		dw 030h
(1) 3714/    12D1 : 2D 00               		dw 02Dh
(1) 3715/    12D3 : 2B 00               		dw 02Bh
(1) 3716/    12D5 : 28 00               		dw 028h
(1) 3717/    12D7 : 26 00               		dw 026h
(1) 3718/    12D9 : 24 00               		dw 024h
(1) 3719/    12DB : 22 00               		dw 022h
(1) 3720/    12DD : 20 00               		dw 020h
(1) 3721/    12DF : 1F 00               		dw 01Fh
(1) 3722/    12E1 : 1D 00               		dw 01Dh
(1) 3723/    12E3 : 1B 00               		dw 01Bh		; C-9 6C
(1) 3724/    12E5 : 1A 00               		dw 01Ah
(1) 3725/    12E7 : 18 00               		dw 018h
(1) 3726/    12E9 : 17 00               		dw 017h
(1) 3727/    12EB : 16 00               		dw 016h
(1) 3728/    12ED : 15 00               		dw 015h
(1) 3729/    12EF : 13 00               		dw 013h
(1) 3730/    12F1 : 12 00               		dw 012h
(1) 3731/    12F3 : 11 00               		dw 011h
(1) 3732/    12F5 : 10 00                		dw 010h
(1) 3733/    12F7 : 09 00                		dw 009h
(1) 3734/    12F9 : 08 00                		dw 008h
(1) 3735/    12FB : 06 00               		dw 006h
(1) 3736/    12FD :                     
(1) 3737/    12FD : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3738/    12FF : 00 01               		dw 100h
(1) 3739/    1301 : 00 01               		dw 100h
(1) 3740/    1303 : 00 01               		dw 100h
(1) 3741/    1305 : 00 01               		dw 100h
(1) 3742/    1307 : 00 01               		dw 100h
(1) 3743/    1309 : 00 01               		dw 100h
(1) 3744/    130B : 00 01               		dw 100h
(1) 3745/    130D : 00 01               		dw 100h
(1) 3746/    130F : 00 01               		dw 100h
(1) 3747/    1311 : 00 01               		dw 100h
(1) 3748/    1313 : 00 01               		dw 100h
(1) 3749/    1315 : 00 01               		dw 100h		; C-1
(1) 3750/    1317 : 00 01               		dw 100h
(1) 3751/    1319 : 00 01               		dw 100h
(1) 3752/    131B : 00 01               		dw 100h
(1) 3753/    131D : 00 01               		dw 100h
(1) 3754/    131F : 00 01               		dw 100h
(1) 3755/    1321 : 00 01               		dw 100h
(1) 3756/    1323 : 00 01               		dw 100h
(1) 3757/    1325 : 00 01               		dw 100h
(1) 3758/    1327 : 00 01               		dw 100h
(1) 3759/    1329 : 00 01               		dw 100h
(1) 3760/    132B : 00 01               		dw 100h
(1) 3761/    132D : 00 01               		dw 100h		; C-2
(1) 3762/    132F : 00 01               		dw 100h
(1) 3763/    1331 : 00 01               		dw 100h
(1) 3764/    1333 : 00 01               		dw 100h
(1) 3765/    1335 : 00 01               		dw 100h
(1) 3766/    1337 : 00 01               		dw 100h
(1) 3767/    1339 : 00 01               		dw 100h
(1) 3768/    133B : 00 01               		dw 100h
(1) 3769/    133D : 00 01               		dw 100h
(1) 3770/    133F : 00 01               		dw 100h
(1) 3771/    1341 : 36 00               		dw 036h
(1) 3772/    1343 : 3B 00               		dw 03Bh
(1) 3773/    1345 : 3E 00               		dw 03Eh		; C-3
(1) 3774/    1347 : 43 00               		dw 043h		; C#3
(1) 3775/    1349 : 46 00               		dw 046h		; D-3
(1) 3776/    134B : 49 00               		dw 049h		; D#3
(1) 3777/    134D : 4E 00               		dw 04Eh		; E-3
(1) 3778/    134F : 54 00               		dw 054h		; F-3
(1) 3779/    1351 : 58 00               		dw 058h		; F#3
(1) 3780/    1353 : 5E 00               		dw 05Eh		; G-3 -17
(1) 3781/    1355 : 63 00               		dw 063h		; G#3
(1) 3782/    1357 : 68 00               		dw 068h		; A-3
(1) 3783/    1359 : 70 00               		dw 070h		; A#3
(1) 3784/    135B : 75 00               		dw 075h		; B-3
(1) 3785/    135D : 85 00               		dw 085h		; C-4 -12
(1) 3786/    135F : 87 00               		dw 087h		; C#4
(1) 3787/    1361 : 8C 00               		dw 08Ch		; D-4
(1) 3788/    1363 : 9A 00               		dw 09Ah		; D#4
(1) 3789/    1365 : 9E 00               		dw 09Eh		; E-4
(1) 3790/    1367 : AD 00               		dw 0ADh		; F-4
(1) 3791/    1369 : B2 00               		dw 0B2h		; F#4
(1) 3792/    136B : C0 00               		dw 0C0h		; G-4
(1) 3793/    136D : CC 00               		dw 0CCh		; G#4
(1) 3794/    136F : D7 00               		dw 0D7h		; A-4
(1) 3795/    1371 : E6 00               		dw 0E6h		; A#4
(1) 3796/    1373 : F0 00               		dw 0F0h		; B-4
(1) 3797/    1375 : 00 01               		dw 100h		; C-5 ****
(1) 3798/    1377 : 10 01               		dw 110h		; C#5
(1) 3799/    1379 : 20 01               		dw 120h		; D-5
(1) 3800/    137B : 2E 01               		dw 12Eh		; D#5
(1) 3801/    137D : 42 01               		dw 142h		; E-5
(1) 3802/    137F : 5A 01               		dw 15Ah		; F-5
(1) 3803/    1381 : 6A 01               		dw 16Ah		; F#5 +6
(1) 3804/    1383 : 7F 01               		dw 17Fh		; G-5
(1) 3805/    1385 : 91 01               		dw 191h		; G#5
(1) 3806/    1387 : AC 01               		dw 1ACh		; A-5
(1) 3807/    1389 : C2 01               		dw 1C2h		; A#5
(1) 3808/    138B : E0 01               		dw 1E0h		; B-5
(1) 3809/    138D : F8 01               		dw 1F8h		; C-6 +12
(1) 3810/    138F : 10 02               		dw 210h		; C#6
(1) 3811/    1391 : 40 02               		dw 240h		; D-6
(1) 3812/    1393 : 60 02               		dw 260h		; D#6
(1) 3813/    1395 : 80 02               		dw 280h		; E-6
(1) 3814/    1397 : A0 02               		dw 2A0h		; F-6
(1) 3815/    1399 : D0 02               		dw 2D0h		; F#6
(1) 3816/    139B : F8 02               		dw 2F8h		; G-6
(1) 3817/    139D : 20 03               		dw 320h		; G#6
(1) 3818/    139F : 50 03               		dw 350h		; A-6
(1) 3819/    13A1 : 80 03               		dw 380h		; A#6
(1) 3820/    13A3 : C0 03               		dw 3C0h		; B-6
(1) 3821/    13A5 : 00 04               		dw 400h		; C-7
(1) 3822/    13A7 : 00 01               		dw 100h
(1) 3823/    13A9 : 00 01               		dw 100h
(1) 3824/    13AB : 00 01               		dw 100h
(1) 3825/    13AD : 00 01               		dw 100h
(1) 3826/    13AF : 00 01               		dw 100h
(1) 3827/    13B1 : 00 01               		dw 100h
(1) 3828/    13B3 : 00 01               		dw 100h
(1) 3829/    13B5 : 00 01               		dw 100h
(1) 3830/    13B7 : 00 01               		dw 100h
(1) 3831/    13B9 : 00 01               		dw 100h
(1) 3832/    13BB : 00 01               		dw 100h
(1) 3833/    13BD : 00 01               		dw 100h		; C-8
(1) 3834/    13BF : 00 01               		dw 100h
(1) 3835/    13C1 : 00 01               		dw 100h
(1) 3836/    13C3 : 00 01               		dw 100h
(1) 3837/    13C5 : 00 01               		dw 100h
(1) 3838/    13C7 : 00 01               		dw 100h
(1) 3839/    13C9 : 00 01               		dw 100h
(1) 3840/    13CB : 00 01               		dw 100h
(1) 3841/    13CD : 00 01               		dw 100h
(1) 3842/    13CF : 00 01               		dw 100h
(1) 3843/    13D1 : 00 01               		dw 100h
(1) 3844/    13D3 : 00 01               		dw 100h
(1) 3845/    13D5 : 00 01               		dw 100h		; C-9
(1) 3846/    13D7 : 00 01               		dw 100h
(1) 3847/    13D9 : 00 01               		dw 100h
(1) 3848/    13DB : 00 01               		dw 100h
(1) 3849/    13DD : 00 01               		dw 100h
(1) 3850/    13DF : 00 01               		dw 100h
(1) 3851/    13E1 : 00 01               		dw 100h
(1) 3852/    13E3 : 00 01               		dw 100h
(1) 3853/    13E5 : 00 01               		dw 100h
(1) 3854/    13E7 : 00 01               		dw 100h
(1) 3855/    13E9 : 00 01               		dw 100h
(1) 3856/    13EB : 00 01               		dw 100h
(1) 3857/    13ED :                     
(1) 3858/    13ED : 57 15               fmcach_list:	dw fmcach_1
(1) 3859/    13EF : 7F 15               		dw fmcach_2
(1) 3860/    13F1 : A7 15               		dw fmcach_3
(1) 3861/    13F3 : 00 00               		dw 0		; <-- skipped
(1) 3862/    13F5 : CF 15               		dw fmcach_4
(1) 3863/    13F7 : F7 15               		dw fmcach_5
(1) 3864/    13F9 : 1F 16               		dw fmcach_6
(1) 3865/    13FB :                     
(1) 3866/    13FB :                     ; ====================================================================
(1) 3867/    13FB :                     ; ----------------------------------------------------------------
(1) 3868/    13FB :                     ; MASTER buffers list
(1) 3869/    13FB :                     ;
(1) 3870/    13FB :                     ; dw track_buffer
(1) 3871/    13FB :                     ; dw channel_list,block_cache,header_cache,instr_cache,track_cache
(1) 3872/    13FB :                     ; db max_blocks,max_headers,max_instr,max_chnls
(1) 3873/    13FB :                     ;
(1) 3874/    13FB :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 3875/    13FB :                     ; ----------------------------------------------------------------
(1) 3876/    13FB :                     
(1) 3877/    13FB :                     nikona_BuffList:
(1) 3878/    13FB : 01 17 91 17 45 1B   	dw trkBuff_0,trkChnl_0,trkBlks_0,trkHdrs_0,trkInsD_0,trkCach_0
                    29 19 DD 19 00 1E 
(1) 3879/    1407 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3880/    140B : 31 17 19 18 5D 1B   	dw trkBuff_1,trkChnl_1,trkBlks_1,trkHdrs_1,trkInsD_1,trkCach_1
                    65 19 55 1A 40 1E 
(1) 3881/    1417 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3882/    141B : 61 17 A1 18 75 1B   	dw trkBuff_2,trkChnl_2,trkBlks_2,trkHdrs_2,trkInsD_2,trkCach_2
                    A1 19 CD 1A 80 1E 
(1) 3883/    1427 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3884/    142B : FF FF               	dw -1
(1) 3885/    142D :                     
(1) 3886/    142D :                     nikona_SetMstrList:
(1) 3887/    142D : 00                  	db 0				; ** 32-bit 68k address **
(1) 3888/    142E : 00                  	db (Gema_MasterList>>16)&0FFh
(1) 3889/    142F : 36                  	db (Gema_MasterList>>8)&0FFh
(1) 3890/    1430 : 56                  	db Gema_MasterList&0FFh
(1) 3891/    1431 :                     
(1) 3892/    1431 :                     ; ====================================================================
(1) 3893/    1431 :                     ; ----------------------------------------------------------------
(1) 3894/    1431 :                     ; Buffer section
(1) 3895/    1431 :                     ; ----------------------------------------------------------------
(1) 3896/    1431 :                     
(1) 3897/    1431 :                     ; --------------------------------------------------------
(1) 3898/    1431 :                     ; Channel table struct:
(1) 3899/    1431 :                     ; 00  - Linked tracker channel
(1) 3900/    1431 :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 3901/    1431 :                     ; 03  - Intrument cache pointer
(1) 3902/    1431 :                     ; 05  - Chip index (YM2612: KEY index)
(1) 3903/    1431 :                     ; 06  - Frequency list index (YM2612: oct|index)
(1) 3904/    1431 :                     ; 07  - Pitchbend add/sub
(1) 3905/    1431 :                     ; 08  - Current volume: 00-max
(1) 3906/    1431 :                     ; 09  - Stored effect setting
(1) 3907/    1431 :                     ; 0A  - FREE
(1) 3908/    1431 :                     ; 0B  - FREE
(1) 3909/    1431 :                     ; 0C+ - Misc. settings for the current chip
(1) 3910/    1431 :                     
(1) 3911/    1431 :                     ; PSG   80h
(1) 3912/    1431 :                     ; PSGN  90h
(1) 3913/    1431 :                     ; FM   0A0h
(1) 3914/    1431 :                     ; FM3  0B0h
(1) 3915/    1431 :                     ; DAC  0C0h
(1) 3916/    1431 :                     ; PWM  0D0h
(1) 3917/    1431 :                     ; --------------------------------------------------------
(1) 3918/    1431 :                     
(1) 3919/    1431 : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 3920/    1433 : 42 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 3921/    1435 : 52 00               		dw tblFM-tblList		; 0A0h
(1) 3922/    1437 : 92 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 3923/    1439 : A2 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 3924/    143B : B4 00               		dw tblPWM-tblList		; 0D0h
(1) 3925/    143D : 00 00               		dw 0
(1) 3926/    143F : 00 00               		dw 0
(1) 3927/    1441 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3928/    1449 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3929/    1451 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3930/    1459 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3931/    1461 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3932/    1469 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3933/    1471 : FF FF               		dw -1	; end-of-list
(1) 3934/    1473 : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
                    00 03 
(1) 3935/    147B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3936/    1483 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3937/    148B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3938/    1493 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3939/    149B : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3940/    14A3 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
                    00 00 
(1) 3941/    14AB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3942/    14B3 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
                    00 00 
(1) 3943/    14BB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3944/    14C3 : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
                    00 00 
(1) 3945/    14CB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3946/    14D3 : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
                    00 00 
(1) 3947/    14DB : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3948/    14E3 : FF FF               		dw -1	; end-of-list
(1) 3949/    14E5 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3950/    14ED : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3951/    14F5 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3952/    14FD : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3953/    1505 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3954/    150D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3955/    1515 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
                    00 00 
(1) 3956/    151D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3957/    1525 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
                    00 00 
(1) 3958/    152D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3959/    1535 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
                    00 00 
(1) 3960/    153D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3961/    1545 : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
                    00 00 
(1) 3962/    154D : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3963/    1555 : FF FF               		dw -1	; end-of-list
(1) 3964/    1557 :                     
(1) 3965/    1557 :                     ; FM patch storage
(1) 3966/    1557 :                     fmcach_1	ds 28h
(1) 3967/    157F :                     fmcach_2	ds 28h
(1) 3968/    15A7 :                     fmcach_3	ds 28h
(1) 3969/    15CF :                     fmcach_4	ds 28h
(1) 3970/    15F7 :                     fmcach_5	ds 28h
(1) 3971/    161F :                     fmcach_6	ds 28h
(1) 3972/    1647 :                     
(1) 3973/    1647 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyCut/KeyOff/KeyOn bits
                    00 00 
(1) 3974/    164F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 3975/    1657 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 3976/    165F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags: Stereo/Loop/Left/Right | 32-bit**
                    00 00 
(1) 3977/    1667 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - **sample location
                    00 00 
(1) 3978/    166F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3979/    1677 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3980/    167F :                     
(1) 3981/    167F : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 3982/    1683 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 3983/    1687 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 3984/    168B : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 3985/    168F : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 3986/    1693 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 3987/    1697 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 3988/    169B : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 3989/    169F : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 3990/    16A3 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 3991/    16A7 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 3992/    16AB : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 3993/    16AF : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 3994/    16B3 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 3995/    16B7 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 3996/    16BB :                     
(1) 3997/    16BB :                     trkListCach	ds 4*8		; 20h bytes
(1) 3998/    16DB : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 3999/    16DD : 00                  		db 0
(1) 4000/    16DE : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4001/    16E0 : 00                  		db 0
(1) 4002/    16E1 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4003/    16E3 : 00                  		db 0
(1) 4004/    16E4 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4005/    16E6 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4006/    16E7 :                     
(1) 4007/    16E7 :                     
(1) 4008/    16E7 : 00                  tickSpSet	db 0		; **
(1) 4009/    16E8 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4010/    16E9 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4011/    16EA : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4012/    16EB : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4013/    16EC :                     headerOut	ds 00Ch		; Temporal storage for 68k pointers
(1) 4014/    16F8 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4015/    16FA :                     sampleHead	ds 006h
(1) 4016/    1700 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4017/    1701 :                     
(1) 4018/    1701 :                     ; --------------------------------------------------------
(1) 4019/    1701 :                     ; * USER customizable section *
(1) 4020/    1701 :                     ;
(1) 4021/    1701 :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4022/    1701 :                     ; --------------------------------------------------------
(1) 4023/    1701 :                     
(1) 4024/    1701 :                     trkBuff_0	ds 30h			; TRACK BUFFER 0
(1) 4025/    1731 :                     trkBuff_1	ds 30h			; TRACK BUFFER 1
(1) 4026/    1761 :                     trkBuff_2	ds 30h			; TRACK BUFFER 2
(1) 4027/    1791 :                     ; trkBuff_3	ds 30h			; TRACK BUFFER 3
(1) 4028/    1791 :                     trkChnl_0	ds 8*MAX_TRKCHN
(1) 4029/    1819 :                     trkChnl_1	ds 8*MAX_TRKCHN
(1) 4030/    18A1 :                     trkChnl_2	ds 8*MAX_TRKCHN
(1) 4031/    1929 :                     ; trkChnl_3	ds 8*MAX_TRKCHN
(1) 4032/    1929 :                     trkHdrs_0	ds 4*MAX_HEADS		; dw point,rowcntr
(1) 4033/    1965 :                     trkHdrs_1	ds 4*MAX_HEADS
(1) 4034/    19A1 :                     trkHdrs_2	ds 4*MAX_HEADS
(1) 4035/    19DD :                     ; trkHdrs_3	ds 4*MAX_HEADS
(1) 4036/    19DD :                     trkInsD_0	ds 8*MAX_INS
(1) 4037/    1A55 :                     trkInsD_1	ds 8*MAX_INS
(1) 4038/    1ACD :                     trkInsD_2	ds 8*MAX_INS
(1) 4039/    1B45 :                     ; trkInsD_3	ds 8*MAX_INS
(1) 4040/    1B45 :                     trkBlks_0	ds MAX_BLOCKS
(1) 4041/    1B5D :                     trkBlks_1	ds MAX_BLOCKS
(1) 4042/    1B75 :                     trkBlks_2	ds MAX_BLOCKS
(1) 4043/    1B8D :                     ; trkBlks_3	ds MAX_BLOCKS
(1) 4044/    1B8D :                     
(1) 4045/    1B8D :                     ; ====================================================================
(1) 4046/    1B8D :                     ; ----------------------------------------------------------------
(1) 4047/    1B8D :                     ; WAVE playback buffer
(1) 4048/    1B8D :                     ;
(1) 4049/    1B8D :                     ; Located at 200h
(1) 4050/    1B8D :                     ; ----------------------------------------------------------------
(1) 4051/    1B8D :                     
(1) 4052/    1B8D : (MACRO)             		org 1D00h
(1) 4052/    1B8D : 00                                                  db 0
(1) 4052/    1B8E : 00                                                  db 0
(1) 4052/    1B8F : 00                                                  db 0
(1) 4052/    1B90 : 00                                                  db 0
(1) 4052/    1B91 : 00                                                  db 0
(1) 4052/    1B92 : 00                                                  db 0
(1) 4052/    1B93 : 00                                                  db 0
(1) 4052/    1B94 : 00                                                  db 0
(1) 4052/    1B95 : 00                                                  db 0
(1) 4052/    1B96 : 00                                                  db 0
(1) 4052/    1B97 : 00                                                  db 0
(1) 4052/    1B98 : 00                                                  db 0
(1) 4052/    1B99 : 00                                                  db 0
(1) 4052/    1B9A : 00                                                  db 0
(1) 4052/    1B9B : 00                                                  db 0
(1) 4052/    1B9C : 00                                                  db 0
(1) 4052/    1B9D : 00                                                  db 0
(1) 4052/    1B9E : 00                                                  db 0
(1) 4052/    1B9F : 00                                                  db 0
(1) 4052/    1BA0 : 00                                                  db 0
(1) 4052/    1BA1 : 00                                                  db 0
(1) 4052/    1BA2 : 00                                                  db 0
(1) 4052/    1BA3 : 00                                                  db 0
(1) 4052/    1BA4 : 00                                                  db 0
(1) 4052/    1BA5 : 00                                                  db 0
(1) 4052/    1BA6 : 00                                                  db 0
(1) 4052/    1BA7 : 00                                                  db 0
(1) 4052/    1BA8 : 00                                                  db 0
(1) 4052/    1BA9 : 00                                                  db 0
(1) 4052/    1BAA : 00                                                  db 0
(1) 4052/    1BAB : 00                                                  db 0
(1) 4052/    1BAC : 00                                                  db 0
(1) 4052/    1BAD : 00                                                  db 0
(1) 4052/    1BAE : 00                                                  db 0
(1) 4052/    1BAF : 00                                                  db 0
(1) 4052/    1BB0 : 00                                                  db 0
(1) 4052/    1BB1 : 00                                                  db 0
(1) 4052/    1BB2 : 00                                                  db 0
(1) 4052/    1BB3 : 00                                                  db 0
(1) 4052/    1BB4 : 00                                                  db 0
(1) 4052/    1BB5 : 00                                                  db 0
(1) 4052/    1BB6 : 00                                                  db 0
(1) 4052/    1BB7 : 00                                                  db 0
(1) 4052/    1BB8 : 00                                                  db 0
(1) 4052/    1BB9 : 00                                                  db 0
(1) 4052/    1BBA : 00                                                  db 0
(1) 4052/    1BBB : 00                                                  db 0
(1) 4052/    1BBC : 00                                                  db 0
(1) 4052/    1BBD : 00                                                  db 0
(1) 4052/    1BBE : 00                                                  db 0
(1) 4052/    1BBF : 00                                                  db 0
(1) 4052/    1BC0 : 00                                                  db 0
(1) 4052/    1BC1 : 00                                                  db 0
(1) 4052/    1BC2 : 00                                                  db 0
(1) 4052/    1BC3 : 00                                                  db 0
(1) 4052/    1BC4 : 00                                                  db 0
(1) 4052/    1BC5 : 00                                                  db 0
(1) 4052/    1BC6 : 00                                                  db 0
(1) 4052/    1BC7 : 00                                                  db 0
(1) 4052/    1BC8 : 00                                                  db 0
(1) 4052/    1BC9 : 00                                                  db 0
(1) 4052/    1BCA : 00                                                  db 0
(1) 4052/    1BCB : 00                                                  db 0
(1) 4052/    1BCC : 00                                                  db 0
(1) 4052/    1BCD : 00                                                  db 0
(1) 4052/    1BCE : 00                                                  db 0
(1) 4052/    1BCF : 00                                                  db 0
(1) 4052/    1BD0 : 00                                                  db 0
(1) 4052/    1BD1 : 00                                                  db 0
(1) 4052/    1BD2 : 00                                                  db 0
(1) 4052/    1BD3 : 00                                                  db 0
(1) 4052/    1BD4 : 00                                                  db 0
(1) 4052/    1BD5 : 00                                                  db 0
(1) 4052/    1BD6 : 00                                                  db 0
(1) 4052/    1BD7 : 00                                                  db 0
(1) 4052/    1BD8 : 00                                                  db 0
(1) 4052/    1BD9 : 00                                                  db 0
(1) 4052/    1BDA : 00                                                  db 0
(1) 4052/    1BDB : 00                                                  db 0
(1) 4052/    1BDC : 00                                                  db 0
(1) 4052/    1BDD : 00                                                  db 0
(1) 4052/    1BDE : 00                                                  db 0
(1) 4052/    1BDF : 00                                                  db 0
(1) 4052/    1BE0 : 00                                                  db 0
(1) 4052/    1BE1 : 00                                                  db 0
(1) 4052/    1BE2 : 00                                                  db 0
(1) 4052/    1BE3 : 00                                                  db 0
(1) 4052/    1BE4 : 00                                                  db 0
(1) 4052/    1BE5 : 00                                                  db 0
(1) 4052/    1BE6 : 00                                                  db 0
(1) 4052/    1BE7 : 00                                                  db 0
(1) 4052/    1BE8 : 00                                                  db 0
(1) 4052/    1BE9 : 00                                                  db 0
(1) 4052/    1BEA : 00                                                  db 0
(1) 4052/    1BEB : 00                                                  db 0
(1) 4052/    1BEC : 00                                                  db 0
(1) 4052/    1BED : 00                                                  db 0
(1) 4052/    1BEE : 00                                                  db 0
(1) 4052/    1BEF : 00                                                  db 0
(1) 4052/    1BF0 : 00                                                  db 0
(1) 4052/    1BF1 : 00                                                  db 0
(1) 4052/    1BF2 : 00                                                  db 0
(1) 4052/    1BF3 : 00                                                  db 0
(1) 4052/    1BF4 : 00                                                  db 0
(1) 4052/    1BF5 : 00                                                  db 0
(1) 4052/    1BF6 : 00                                                  db 0
(1) 4052/    1BF7 : 00                                                  db 0
(1) 4052/    1BF8 : 00                                                  db 0
(1) 4052/    1BF9 : 00                                                  db 0
(1) 4052/    1BFA : 00                                                  db 0
(1) 4052/    1BFB : 00                                                  db 0
(1) 4052/    1BFC : 00                                                  db 0
(1) 4052/    1BFD : 00                                                  db 0
(1) 4052/    1BFE : 00                                                  db 0
(1) 4052/    1BFF : 00                                                  db 0
(1) 4052/    1C00 : 00                                                  db 0
(1) 4052/    1C01 : 00                                                  db 0
(1) 4052/    1C02 : 00                                                  db 0
(1) 4052/    1C03 : 00                                                  db 0
(1) 4052/    1C04 : 00                                                  db 0
(1) 4052/    1C05 : 00                                                  db 0
(1) 4052/    1C06 : 00                                                  db 0
(1) 4052/    1C07 : 00                                                  db 0
(1) 4052/    1C08 : 00                                                  db 0
(1) 4052/    1C09 : 00                                                  db 0
(1) 4052/    1C0A : 00                                                  db 0
(1) 4052/    1C0B : 00                                                  db 0
(1) 4052/    1C0C : 00                                                  db 0
(1) 4052/    1C0D : 00                                                  db 0
(1) 4052/    1C0E : 00                                                  db 0
(1) 4052/    1C0F : 00                                                  db 0
(1) 4052/    1C10 : 00                                                  db 0
(1) 4052/    1C11 : 00                                                  db 0
(1) 4052/    1C12 : 00                                                  db 0
(1) 4052/    1C13 : 00                                                  db 0
(1) 4052/    1C14 : 00                                                  db 0
(1) 4052/    1C15 : 00                                                  db 0
(1) 4052/    1C16 : 00                                                  db 0
(1) 4052/    1C17 : 00                                                  db 0
(1) 4052/    1C18 : 00                                                  db 0
(1) 4052/    1C19 : 00                                                  db 0
(1) 4052/    1C1A : 00                                                  db 0
(1) 4052/    1C1B : 00                                                  db 0
(1) 4052/    1C1C : 00                                                  db 0
(1) 4052/    1C1D : 00                                                  db 0
(1) 4052/    1C1E : 00                                                  db 0
(1) 4052/    1C1F : 00                                                  db 0
(1) 4052/    1C20 : 00                                                  db 0
(1) 4052/    1C21 : 00                                                  db 0
(1) 4052/    1C22 : 00                                                  db 0
(1) 4052/    1C23 : 00                                                  db 0
(1) 4052/    1C24 : 00                                                  db 0
(1) 4052/    1C25 : 00                                                  db 0
(1) 4052/    1C26 : 00                                                  db 0
(1) 4052/    1C27 : 00                                                  db 0
(1) 4052/    1C28 : 00                                                  db 0
(1) 4052/    1C29 : 00                                                  db 0
(1) 4052/    1C2A : 00                                                  db 0
(1) 4052/    1C2B : 00                                                  db 0
(1) 4052/    1C2C : 00                                                  db 0
(1) 4052/    1C2D : 00                                                  db 0
(1) 4052/    1C2E : 00                                                  db 0
(1) 4052/    1C2F : 00                                                  db 0
(1) 4052/    1C30 : 00                                                  db 0
(1) 4052/    1C31 : 00                                                  db 0
(1) 4052/    1C32 : 00                                                  db 0
(1) 4052/    1C33 : 00                                                  db 0
(1) 4052/    1C34 : 00                                                  db 0
(1) 4052/    1C35 : 00                                                  db 0
(1) 4052/    1C36 : 00                                                  db 0
(1) 4052/    1C37 : 00                                                  db 0
(1) 4052/    1C38 : 00                                                  db 0
(1) 4052/    1C39 : 00                                                  db 0
(1) 4052/    1C3A : 00                                                  db 0
(1) 4052/    1C3B : 00                                                  db 0
(1) 4052/    1C3C : 00                                                  db 0
(1) 4052/    1C3D : 00                                                  db 0
(1) 4052/    1C3E : 00                                                  db 0
(1) 4052/    1C3F : 00                                                  db 0
(1) 4052/    1C40 : 00                                                  db 0
(1) 4052/    1C41 : 00                                                  db 0
(1) 4052/    1C42 : 00                                                  db 0
(1) 4052/    1C43 : 00                                                  db 0
(1) 4052/    1C44 : 00                                                  db 0
(1) 4052/    1C45 : 00                                                  db 0
(1) 4052/    1C46 : 00                                                  db 0
(1) 4052/    1C47 : 00                                                  db 0
(1) 4052/    1C48 : 00                                                  db 0
(1) 4052/    1C49 : 00                                                  db 0
(1) 4052/    1C4A : 00                                                  db 0
(1) 4052/    1C4B : 00                                                  db 0
(1) 4052/    1C4C : 00                                                  db 0
(1) 4052/    1C4D : 00                                                  db 0
(1) 4052/    1C4E : 00                                                  db 0
(1) 4052/    1C4F : 00                                                  db 0
(1) 4052/    1C50 : 00                                                  db 0
(1) 4052/    1C51 : 00                                                  db 0
(1) 4052/    1C52 : 00                                                  db 0
(1) 4052/    1C53 : 00                                                  db 0
(1) 4052/    1C54 : 00                                                  db 0
(1) 4052/    1C55 : 00                                                  db 0
(1) 4052/    1C56 : 00                                                  db 0
(1) 4052/    1C57 : 00                                                  db 0
(1) 4052/    1C58 : 00                                                  db 0
(1) 4052/    1C59 : 00                                                  db 0
(1) 4052/    1C5A : 00                                                  db 0
(1) 4052/    1C5B : 00                                                  db 0
(1) 4052/    1C5C : 00                                                  db 0
(1) 4052/    1C5D : 00                                                  db 0
(1) 4052/    1C5E : 00                                                  db 0
(1) 4052/    1C5F : 00                                                  db 0
(1) 4052/    1C60 : 00                                                  db 0
(1) 4052/    1C61 : 00                                                  db 0
(1) 4052/    1C62 : 00                                                  db 0
(1) 4052/    1C63 : 00                                                  db 0
(1) 4052/    1C64 : 00                                                  db 0
(1) 4052/    1C65 : 00                                                  db 0
(1) 4052/    1C66 : 00                                                  db 0
(1) 4052/    1C67 : 00                                                  db 0
(1) 4052/    1C68 : 00                                                  db 0
(1) 4052/    1C69 : 00                                                  db 0
(1) 4052/    1C6A : 00                                                  db 0
(1) 4052/    1C6B : 00                                                  db 0
(1) 4052/    1C6C : 00                                                  db 0
(1) 4052/    1C6D : 00                                                  db 0
(1) 4052/    1C6E : 00                                                  db 0
(1) 4052/    1C6F : 00                                                  db 0
(1) 4052/    1C70 : 00                                                  db 0
(1) 4052/    1C71 : 00                                                  db 0
(1) 4052/    1C72 : 00                                                  db 0
(1) 4052/    1C73 : 00                                                  db 0
(1) 4052/    1C74 : 00                                                  db 0
(1) 4052/    1C75 : 00                                                  db 0
(1) 4052/    1C76 : 00                                                  db 0
(1) 4052/    1C77 : 00                                                  db 0
(1) 4052/    1C78 : 00                                                  db 0
(1) 4052/    1C79 : 00                                                  db 0
(1) 4052/    1C7A : 00                                                  db 0
(1) 4052/    1C7B : 00                                                  db 0
(1) 4052/    1C7C : 00                                                  db 0
(1) 4052/    1C7D : 00                                                  db 0
(1) 4052/    1C7E : 00                                                  db 0
(1) 4052/    1C7F : 00                                                  db 0
(1) 4052/    1C80 : 00                                                  db 0
(1) 4052/    1C81 : 00                                                  db 0
(1) 4052/    1C82 : 00                                                  db 0
(1) 4052/    1C83 : 00                                                  db 0
(1) 4052/    1C84 : 00                                                  db 0
(1) 4052/    1C85 : 00                                                  db 0
(1) 4052/    1C86 : 00                                                  db 0
(1) 4052/    1C87 : 00                                                  db 0
(1) 4052/    1C88 : 00                                                  db 0
(1) 4052/    1C89 : 00                                                  db 0
(1) 4052/    1C8A : 00                                                  db 0
(1) 4052/    1C8B : 00                                                  db 0
(1) 4052/    1C8C : 00                                                  db 0
(1) 4052/    1C8D : 00                                                  db 0
(1) 4052/    1C8E : 00                                                  db 0
(1) 4052/    1C8F : 00                                                  db 0
(1) 4052/    1C90 : 00                                                  db 0
(1) 4052/    1C91 : 00                                                  db 0
(1) 4052/    1C92 : 00                                                  db 0
(1) 4052/    1C93 : 00                                                  db 0
(1) 4052/    1C94 : 00                                                  db 0
(1) 4052/    1C95 : 00                                                  db 0
(1) 4052/    1C96 : 00                                                  db 0
(1) 4052/    1C97 : 00                                                  db 0
(1) 4052/    1C98 : 00                                                  db 0
(1) 4052/    1C99 : 00                                                  db 0
(1) 4052/    1C9A : 00                                                  db 0
(1) 4052/    1C9B : 00                                                  db 0
(1) 4052/    1C9C : 00                                                  db 0
(1) 4052/    1C9D : 00                                                  db 0
(1) 4052/    1C9E : 00                                                  db 0
(1) 4052/    1C9F : 00                                                  db 0
(1) 4052/    1CA0 : 00                                                  db 0
(1) 4052/    1CA1 : 00                                                  db 0
(1) 4052/    1CA2 : 00                                                  db 0
(1) 4052/    1CA3 : 00                                                  db 0
(1) 4052/    1CA4 : 00                                                  db 0
(1) 4052/    1CA5 : 00                                                  db 0
(1) 4052/    1CA6 : 00                                                  db 0
(1) 4052/    1CA7 : 00                                                  db 0
(1) 4052/    1CA8 : 00                                                  db 0
(1) 4052/    1CA9 : 00                                                  db 0
(1) 4052/    1CAA : 00                                                  db 0
(1) 4052/    1CAB : 00                                                  db 0
(1) 4052/    1CAC : 00                                                  db 0
(1) 4052/    1CAD : 00                                                  db 0
(1) 4052/    1CAE : 00                                                  db 0
(1) 4052/    1CAF : 00                                                  db 0
(1) 4052/    1CB0 : 00                                                  db 0
(1) 4052/    1CB1 : 00                                                  db 0
(1) 4052/    1CB2 : 00                                                  db 0
(1) 4052/    1CB3 : 00                                                  db 0
(1) 4052/    1CB4 : 00                                                  db 0
(1) 4052/    1CB5 : 00                                                  db 0
(1) 4052/    1CB6 : 00                                                  db 0
(1) 4052/    1CB7 : 00                                                  db 0
(1) 4052/    1CB8 : 00                                                  db 0
(1) 4052/    1CB9 : 00                                                  db 0
(1) 4052/    1CBA : 00                                                  db 0
(1) 4052/    1CBB : 00                                                  db 0
(1) 4052/    1CBC : 00                                                  db 0
(1) 4052/    1CBD : 00                                                  db 0
(1) 4052/    1CBE : 00                                                  db 0
(1) 4052/    1CBF : 00                                                  db 0
(1) 4052/    1CC0 : 00                                                  db 0
(1) 4052/    1CC1 : 00                                                  db 0
(1) 4052/    1CC2 : 00                                                  db 0
(1) 4052/    1CC3 : 00                                                  db 0
(1) 4052/    1CC4 : 00                                                  db 0
(1) 4052/    1CC5 : 00                                                  db 0
(1) 4052/    1CC6 : 00                                                  db 0
(1) 4052/    1CC7 : 00                                                  db 0
(1) 4052/    1CC8 : 00                                                  db 0
(1) 4052/    1CC9 : 00                                                  db 0
(1) 4052/    1CCA : 00                                                  db 0
(1) 4052/    1CCB : 00                                                  db 0
(1) 4052/    1CCC : 00                                                  db 0
(1) 4052/    1CCD : 00                                                  db 0
(1) 4052/    1CCE : 00                                                  db 0
(1) 4052/    1CCF : 00                                                  db 0
(1) 4052/    1CD0 : 00                                                  db 0
(1) 4052/    1CD1 : 00                                                  db 0
(1) 4052/    1CD2 : 00                                                  db 0
(1) 4052/    1CD3 : 00                                                  db 0
(1) 4052/    1CD4 : 00                                                  db 0
(1) 4052/    1CD5 : 00                                                  db 0
(1) 4052/    1CD6 : 00                                                  db 0
(1) 4052/    1CD7 : 00                                                  db 0
(1) 4052/    1CD8 : 00                                                  db 0
(1) 4052/    1CD9 : 00                                                  db 0
(1) 4052/    1CDA : 00                                                  db 0
(1) 4052/    1CDB : 00                                                  db 0
(1) 4052/    1CDC : 00                                                  db 0
(1) 4052/    1CDD : 00                                                  db 0
(1) 4052/    1CDE : 00                                                  db 0
(1) 4052/    1CDF : 00                                                  db 0
(1) 4052/    1CE0 : 00                                                  db 0
(1) 4052/    1CE1 : 00                                                  db 0
(1) 4052/    1CE2 : 00                                                  db 0
(1) 4052/    1CE3 : 00                                                  db 0
(1) 4052/    1CE4 : 00                                                  db 0
(1) 4052/    1CE5 : 00                                                  db 0
(1) 4052/    1CE6 : 00                                                  db 0
(1) 4052/    1CE7 : 00                                                  db 0
(1) 4052/    1CE8 : 00                                                  db 0
(1) 4052/    1CE9 : 00                                                  db 0
(1) 4052/    1CEA : 00                                                  db 0
(1) 4052/    1CEB : 00                                                  db 0
(1) 4052/    1CEC : 00                                                  db 0
(1) 4052/    1CED : 00                                                  db 0
(1) 4052/    1CEE : 00                                                  db 0
(1) 4052/    1CEF : 00                                                  db 0
(1) 4052/    1CF0 : 00                                                  db 0
(1) 4052/    1CF1 : 00                                                  db 0
(1) 4052/    1CF2 : 00                                                  db 0
(1) 4052/    1CF3 : 00                                                  db 0
(1) 4052/    1CF4 : 00                                                  db 0
(1) 4052/    1CF5 : 00                                                  db 0
(1) 4052/    1CF6 : 00                                                  db 0
(1) 4052/    1CF7 : 00                                                  db 0
(1) 4052/    1CF8 : 00                                                  db 0
(1) 4052/    1CF9 : 00                                                  db 0
(1) 4052/    1CFA : 00                                                  db 0
(1) 4052/    1CFB : 00                                                  db 0
(1) 4052/    1CFC : 00                                                  db 0
(1) 4052/    1CFD : 00                                                  db 0
(1) 4052/    1CFE : 00                                                  db 0
(1) 4052/    1CFF : 00                                                  db 0
(1) 4052/    1D00 :                     
(1) 4053/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4054/    1E00 :                     trkCach_0	ds MAX_RCACH	; ** MUST BE aligned **
(1) 4055/    1E40 :                     trkCach_1	ds MAX_RCACH
(1) 4056/    1E80 :                     trkCach_2	ds MAX_RCACH
(1) 4057/    1EC0 :                     trkCach_3	ds MAX_RCACH
(1) 4058/    1F00 :                     
(1) 4059/    1F00 :                     ; --------------------------------------------------------
(1) 4060/    1F00 :                     
(1) 4061/    1F00 :                     		cpu 68000	; [AS] Exit Z80
(1) 4062/    1F00 :                     		padding off	; [AS] NO padding (again)
(1) 4063/    2FCC :                     		phase Z80_TOP+*	; [AS] Relocate PC
(1) 4064/    2FCC :                     		align 2		; [AS] Align by 2
(1) 4065/    2FCC :                     
     280/    2FCC :                     Z80_CODE_END:
     285/    2FCC :                     
     286/    2FCC :                     ; ===========================================================================
     287/    2FCC :                     ; ----------------------------------------------------------------
     288/    2FCC :                     ; GAME DATA for ALL Cartridge and Disc
     289/    2FCC :                     ; ----------------------------------------------------------------
     290/    2FCC :                     
     291/    2FCC :                     ; --------------------------------------------------------
     292/    2FCC :                     ; SEGA CD / SEGA CD32X ISO header
     293/    2FCC :                     ; --------------------------------------------------------
     294/    2FCC :                     
     307/    2FCC :                     
     308/    2FCC :                     ; ====================================================================
     309/    2FCC :                     ; --------------------------------------------------------
     310/    2FCC :                     ; Screen modes
     311/    2FCC :                     ; --------------------------------------------------------
     312/    2FCC :                     
     318/    2FCC :                     Md_Screen00:
     319/    2FCC :                     ; 	if MARS
     320/    2FCC :                     ;
     321/    2FCC :                     ; 	endif
     326/    2FCC :                     cscrn0_s:
     327/    2FCC :                     		include "game/screen_0.asm"
(1)    1/    2FCC :                     ; ====================================================================
(1)    2/    2FCC :                     ; ----------------------------------------------------------------
(1)    3/    2FCC :                     ; Default gamemode
(1)    4/    2FCC :                     ; ----------------------------------------------------------------
(1)    5/    2FCC :                     
(1)    6/    2FCC :                     ; ====================================================================
(1)    7/    2FCC :                     ; ------------------------------------------------------
(1)    8/    2FCC :                     ; Variables
(1)    9/    2FCC :                     ; ------------------------------------------------------
(1)   10/    2FCC :                     
(1)   11/    2FCC : =$4000              var_MoveSpd	equ	$4000
(1)   12/    2FCC : =$3                 MAX_TSTTRKS	equ	3
(1)   13/    2FCC : =$5                 MAX_TSTENTRY	equ	5
(1)   14/    2FCC :                     
(1)   15/    2FCC :                     ; ====================================================================
(1)   16/    2FCC :                     ; ------------------------------------------------------
(1)   17/    2FCC :                     ; Structs
(1)   18/    2FCC :                     ; ------------------------------------------------------
(1)   19/    2FCC :                     
(1)   20/    2FCC :                     ; 		struct 0
(1)   21/    2FCC :                     ; strc_xpos	ds.w 1
(1)   22/    2FCC :                     ; strc_ypos	ds.w 1
(1)   23/    2FCC :                     ; 		endstruct
(1)   24/    2FCC :                     
(1)   25/    2FCC :                     ; ====================================================================
(1)   26/    2FCC :                     ; ------------------------------------------------------
(1)   27/    2FCC :                     ; This mode's RAM
(1)   28/    2FCC :                     ; ------------------------------------------------------
(1)   29/    2FCC :                     
(1)   30/    2FCC : (MACRO)             			struct RAM_ScreenBuff
(1)   30/    2FCC : =$2FCC              GLBL_LASTPC     set *
(1)   30/    2FCC :                                     dephase
(1)   30/    2FCC : =$2FCC              GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFB500 :                                     phase RAM_SCREENBUFF
(1)   31/FFFFFFFFFFFFB500 :                     RAM_EmiPosX		ds.l 1
(1)   32/FFFFFFFFFFFFB504 :                     RAM_EmiPosY		ds.l 1
(1)   33/FFFFFFFFFFFFB508 :                     RAM_EmiMoveX		ds.l 1
(1)   34/FFFFFFFFFFFFB50C :                     RAM_EmiMoveY		ds.l 1
(1)   35/FFFFFFFFFFFFB510 :                     RAM_EmiJumpSpd		ds.l 1
(1)   36/FFFFFFFFFFFFB514 :                     RAM_EmiJumpY		ds.l 1
(1)   37/FFFFFFFFFFFFB518 :                     RAM_EmiFlags		ds.w 1
(1)   38/FFFFFFFFFFFFB51A :                     RAM_EmiBlockX		ds.w 1
(1)   39/FFFFFFFFFFFFB51C :                     RAM_EmiBlockY		ds.w 1
(1)   40/FFFFFFFFFFFFB51E :                     RAM_EmiChar		ds.w 1
(1)   41/FFFFFFFFFFFFB520 :                     RAM_EmiAnim		ds.w 1
(1)   42/FFFFFFFFFFFFB522 :                     RAM_EmiUpd		ds.w 1
(1)   43/FFFFFFFFFFFFB524 :                     RAM_EmiHide		ds.w 1
(1)   44/FFFFFFFFFFFFB526 :                     RAM_ShakeMe		ds.w 1
(1)   45/FFFFFFFFFFFFB528 :                     RAM_BoardUpd		ds.w 1
(1)   46/FFFFFFFFFFFFB52A :                     RAM_CurrType		ds.w 1
(1)   47/FFFFFFFFFFFFB52C :                     RAM_BgCamera		ds.w 1
(1)   48/FFFFFFFFFFFFB52E :                     RAM_Xpos		ds.w 1
(1)   49/FFFFFFFFFFFFB530 :                     RAM_CurrSelc		ds.w 1
(1)   50/FFFFFFFFFFFFB532 :                     RAM_CurrIndx		ds.w 1
(1)   51/FFFFFFFFFFFFB534 :                     RAM_CurrTrack		ds.w 1
(1)   52/FFFFFFFFFFFFB536 :                     RAM_CurrTicks		ds.w 1
(1)   53/FFFFFFFFFFFFB538 :                     RAM_CurrTempo		ds.w 1
(1)   54/FFFFFFFFFFFFB53A :                     RAM_WindowCurr		ds.w 1
(1)   55/FFFFFFFFFFFFB53C :                     RAM_WindowNew		ds.w 1
(1)   56/FFFFFFFFFFFFB53E :                     RAM_BoardBlocks		ds.b 6*6
(1)   57/FFFFFFFFFFFFB562 :                     sizeof_thisbuff0	ds.l 0
(1)   58/FFFFFFFFFFFFB564 : (MACRO)             			endstruct
(1)   58/FFFFFFFFFFFFB500 :                                     !org GLBL_LASTORG
(1)   58/    2FCC :                                     phase GLBL_LASTPC
(1)   59/    2FCC :                     
(1)   60/    2FCC : (MACRO)             			erreport "SCREEN0 BUFF",sizeof_thisbuff0-RAM_ScreenBuff,MAX_ScrnBuff
(1)   61/    2FCC :                     
(1)   62/    2FCC :                     ; ====================================================================
(1)   63/    2FCC :                     ; ------------------------------------------------------
(1)   64/    2FCC :                     ; Code start
(1)   65/    2FCC :                     ; ------------------------------------------------------
(1)   66/    2FCC :                     
(1)   67/    2FCC :                     thisCode_Top:
(1)   68/    2FCC : 46FC 2700           		move.w	#$2700,sr
(1)   69/    2FD0 : 6100 DFD4           		bsr	Mode_Init
(1)   70/    2FD4 : 6100 D55E           		bsr	Video_PrintInit
(1)   71/    2FD8 : 6100 D410           		bsr	Video_Clear
(1)   72/    2FDC :                     
(1)   73/    2FDC : 31FC 0000 B52A      		move.w	#0,(RAM_CurrType).w
(1)   74/    2FE2 : 31FC 00D0 B538      		move.w	#208,(RAM_CurrTempo).w
(1)   75/    2FE8 : 303C 9200           		move.w	#$9200,d0
(1)   76/    2FEC : 31C0 B53A           		move.w	d0,(RAM_WindowCurr).w
(1)   77/    2FF0 : 31C0 B53C           		move.w	d0,(RAM_WindowNew).w
(1)   78/    2FF4 :                     
(1)   79/    2FF4 :                     	; Default Emilie vars
(1)   80/    2FF4 : 303C 0020           		move.w	#$20,d0
(1)   81/    2FF8 : 31C0 B500           		move.w	d0,(RAM_EmiPosX).w
(1)   82/    2FFC : 31C0 B508           		move.w	d0,(RAM_EmiMoveX).w
(1)   83/    3000 : 303C 0042           		move.w	#$42,d0
(1)   84/    3004 : 31C0 B504           		move.w	d0,(RAM_EmiPosY).w
(1)   85/    3008 : 31C0 B50C           		move.w	d0,(RAM_EmiMoveY).w
(1)   86/    300C : 31FC FFFF B51A      		move.w	#-1,(RAM_EmiBlockX).w
(1)   87/    3012 : 31FC 0002 B51C      		move.w	#2,(RAM_EmiBlockY).w
(1)   88/    3018 : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)   89/    301E :                     
(1)   90/    301E : 41F8 8430           		lea	(RAM_PaletteFd+$60),a0
(1)   91/    3022 : 30FC 0000           		move.w	#0,(a0)+
(1)   92/    3026 : 30FC 0EEE           		move.w	#$EEE,(a0)+
(1)   93/    302A : 30FC 0CCC           		move.w	#$CCC,(a0)+
(1)   94/    302E : 30FC 0AAA           		move.w	#$AAA,(a0)+
(1)   95/    3032 : 30FC 0888           		move.w	#$888,(a0)+
(1)   96/    3036 : 30FC 0222           		move.w	#$222,(a0)+
(1)   97/    303A : 4278 83D0           		clr.w	(RAM_PaletteFd).w		; <-- quick patch
(1)   98/    303E : 4278 81D0           		clr.w	(RAM_MdMarsPalFd).w
(1)   99/    3042 :                     	; Test image
(1)  107/    3042 : 203C 0004 8000      		move.l	#ART_TESTBOARD,d0
(1)  108/    3048 : 343C 0300           		move.w	#ART_TESTBOARD_e-ART_TESTBOARD,d2
(1)  109/    304C : 323C 0020           		move.w	#cell_vram($0001),d1
(1)  110/    3050 : 6100 D9D6           		bsr	Video_LoadArt
(1)  111/    3054 : 41F8 7C7C           		lea	(MAP_TESTBOARD),a0
(1)  112/    3058 : 203C 0000 0000      		move.l	#locate(0,0,0),d0
(1)  113/    305E : 223C 0027 001B      		move.l	#mapsize(320,224),d1
(1)  114/    3064 : 343C 2001           		move.w	#$2000|$0001,d2
(1)  115/    3068 : 6100 D408           		bsr	Video_LoadMap
(1)  116/    306C : 08F8 0000 B528      		bset	#0,(RAM_BoardUpd).w
(1)  117/    3072 :                     
(1)  118/    3072 : 41FA 05B8           		lea	PAL_EMI(pc),a0
(1)  119/    3076 : 7000                		moveq	#0,d0
(1)  120/    3078 : 323C 000F           		move.w	#$F,d1
(1)  121/    307C : 6100 D6C6           		bsr	Video_FadePal
(1)  122/    3080 : 41FA 05C0           		lea	PAL_TESTBOARD(pc),a0		; ON palette
(1)  123/    3084 : 7010                		moveq	#$10,d0
(1)  124/    3086 : 323C 000F           		move.w	#$F,d1
(1)  125/    308A : 6100 D6B8           		bsr	Video_FadePal
(1)  126/    308E :                     
(1)  127/    308E :                     	; Shared:
(1)  128/    308E :                     ; 		lea	str_Stats(pc),a0
(1)  129/    308E :                     ; 		move.l	#locate(0,1,1),d0
(1)  130/    308E :                     ; 		bsr	Video_Print
(1)  131/    308E :                     ; 	Set Fade-in settings
(1)  132/    308E : 08F9 0006 FFFF 8A51 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)  133/    3096 : 11FC 0081 8A5C      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  134/    309C : 6100 D2F8           		bsr	Video_Update
(1)  135/    30A0 : 31FC 0001 8A42      		move.w	#1,(RAM_FadeMdIncr).w
(1)  136/    30A6 : 31FC 0002 8A4A      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  137/    30AC : 31FC 0001 8A44      		move.w	#1,(RAM_FadeMdDelay).w
(1)  138/    30B2 : 31FC 0000 8A4C      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  139/    30B8 : 31FC 0001 8A40      		move.w	#1,(RAM_FadeMdReq).w
(1)  140/    30BE : 31FC 0001 8A48      		move.w	#1,(RAM_FadeMarsReq).w
(1)  141/    30C4 :                     
(1)  142/    30C4 :                     ; 	if MCD|MARSCD
(1)  143/    30C4 :                     ; 		moveq	#$10,d0
(1)  144/    30C4 :                     ; 		bsr	System_McdSubTask
(1)  145/    30C4 :                     ; ; 		move.l	#$7FFEC,d7
(1)  146/    30C4 :                     ; ; .ll:
(1)  147/    30C4 :                     ; ; 		nop
(1)  148/    30C4 :                     ; ; 		nop
(1)  149/    30C4 :                     ; ; 		nop
(1)  150/    30C4 :                     ; ; 		nop
(1)  151/    30C4 :                     ; ; 		nop
(1)  152/    30C4 :                     ; ; 		nop
(1)  153/    30C4 :                     ; ; 		nop
(1)  154/    30C4 :                     ; ; 		dbf	d7,.ll
(1)  155/    30C4 :                     ; 	endif
(1)  156/    30C4 : 7000                		moveq	#0,d0
(1)  157/    30C6 : 6100 D248           		bsr	gemaPlayTrack
(1)  158/    30CA :                     
(1)  159/    30CA :                     ; ====================================================================
(1)  160/    30CA :                     ; ------------------------------------------------------
(1)  161/    30CA :                     ; Loop
(1)  162/    30CA :                     ; ------------------------------------------------------
(1)  163/    30CA :                     
(1)  164/    30CA :                     .loop:
(1)  165/    30CA : 6100 DAB2           		bsr	System_Render
(1)  166/    30CE : 6100 D662           		bsr	Video_RunFade
(1)  167/    30D2 : 41FA 0482           		lea	str_Title(pc),a0
(1)  168/    30D6 : 203C 0000 0101      		move.l	#locate(0,1,1),d0
(1)  169/    30DC : 6100 D486           		bsr	Video_Print
(1)  170/    30E0 :                     ;
(1)  171/    30E0 :                     	; Visual updates go here
(1)  172/    30E0 : 6100 03B0           		bsr	Emilie_MkSprite
(1)  173/    30E4 : 6100 0282           		bsr	Board_SwapPos
(1)  174/    30E8 :                     
(1)  175/    30E8 :                     ; 		move.l	#$7C000003,(vdp_ctrl).l
(1)  176/    30E8 :                     ; 		move.l	(RAM_Xpos).l,d0
(1)  177/    30E8 :                     ; 		move.l	d0,(vdp_data).l
(1)  178/    30E8 :                     
(1)  179/    30E8 : 41F9 FFFF 7BC0      		lea	(RAM_VerScroll),a0
(1)  180/    30EE : 3638 B526           		move.w	(RAM_ShakeMe).w,d3
(1)  181/    30F2 : 3803                		move.w	d3,d4
(1)  182/    30F4 : E64B                		lsr.w	#3,d3
(1)  183/    30F6 : 0804 0001           		btst	#1,d4
(1)  184/    30FA : 6602                		bne.s	.midshk
(1)  185/    30FC : 4443                		neg.w	d3
(1)  186/    30FE :                     .midshk:
(1)  187/    30FE : 3083                		move.w	d3,(a0)
(1)  188/    3100 :                     
(1)  189/    3100 :                     
(1)  190/    3100 :                     	; Main loop is back
(1)  191/    3100 : 3038 B52A           		move.w	(RAM_CurrType).w,d0
(1)  192/    3104 : C07C 001F           		and.w	#%11111,d0
(1)  193/    3108 : D040                		add.w	d0,d0
(1)  194/    310A : D040                		add.w	d0,d0
(1)  195/    310C : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)  196/    3110 : 60B8                		bra	.loop
(1)  197/    3112 :                     
(1)  198/    3112 :                     ; ====================================================================
(1)  199/    3112 :                     ; ------------------------------------------------------
(1)  200/    3112 :                     ; Mode sections
(1)  201/    3112 :                     ; ------------------------------------------------------
(1)  202/    3112 :                     
(1)  203/    3112 :                     .list:
(1)  204/    3112 : 6000 000A           		bra.w	.mode0
(1)  205/    3116 : 6000 0006           		bra.w	.mode0
(1)  206/    311A : 6000 0002           		bra.w	.mode0
(1)  207/    311E :                     
(1)  208/    311E :                     ; --------------------------------------------------
(1)  209/    311E :                     ; Mode 0
(1)  210/    311E :                     ; --------------------------------------------------
(1)  211/    311E :                     
(1)  212/    311E :                     .mode0:
(1)  213/    311E : 4A78 B52A           		tst.w	(RAM_CurrType).w
(1)  214/    3122 : 6B12                		bmi	.mode0_loop
(1)  215/    3124 : 0078 8000 B52A      		or.w	#$8000,(RAM_CurrType).w
(1)  216/    312A : 31FC 0000 B524      		move.w	#0,(RAM_EmiHide).w
(1)  217/    3130 : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)  218/    3136 :                     
(1)  219/    3136 :                     ; Mode 0 mainloop
(1)  220/    3136 :                     .mode0_loop:
(1)  221/    3136 : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  222/    313A : E04F                		lsr.w	#8,d7
(1)  223/    313C : 0807 000B           		btst	#bitJoyMode,d7
(1)  224/    3140 : 670C                		beq.s	.no_mode0
(1)  225/    3142 : 31FC 0001 B52A      		move.w	#1,(RAM_CurrType).w
(1)  226/    3148 : 31FC 920D B53C      		move.w	#$920D,(RAM_WindowNew).w
(1)  227/    314E :                     .no_mode0:
(1)  228/    314E :                     
(1)  229/    314E :                     ; 		lea	str_TempVal(pc),a0		; Main title
(1)  230/    314E :                     ; 		move.l	#locate(0,0,0),d0
(1)  231/    314E :                     ; 		bsr	Video_Print
(1)  232/    314E :                     
(1)  233/    314E :                     	; BOOM TEST
(1)  234/    314E :                     ; 		move.w	(Controller_1+on_press),d7
(1)  235/    314E :                     ; 		btst	#bitJoyA,d7
(1)  236/    314E :                     ; 		beq.s	.noah
(1)  237/    314E :                     ; 		move.w	#$20,(RAM_ShakeMe).w
(1)  238/    314E :                     ; 		moveq	#0,d2
(1)  239/    314E :                     ; 		bsr	PlayThisSfx
(1)  240/    314E :                     ; .noah:
(1)  241/    314E :                     
(1)  242/    314E :                     	; Shake explosion
(1)  243/    314E : 3E38 B526           		move.w	(RAM_ShakeMe),d7
(1)  244/    3152 : 4A78 B526           		tst.w	(RAM_ShakeMe).w
(1)  245/    3156 : 671C                		beq.s	.no_shake
(1)  246/    3158 : 0478 0001 B526      		sub.w	#1,(RAM_ShakeMe).w
(1)  247/    315E : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)  248/    3164 : 08F8 0000 B528      		bset	#0,(RAM_BoardUpd).w
(1)  249/    316A : 4A78 B526           		tst.w	(RAM_ShakeMe).w
(1)  250/    316E : 6604                		bne.s	.no_shake
(1)  251/    3170 : 6100 0166           		bsr	Board_Reset
(1)  252/    3174 :                     .no_shake:
(1)  253/    3174 :                     ; 		bset	#0,(RAM_BoardUpd).w
(1)  254/    3174 :                     
(1)  255/    3174 :                     	; Emilie player input
(1)  256/    3174 : 1E38 B518           		move.b	(RAM_EmiFlags).w,d7
(1)  257/    3178 : 6100 029A           		bsr	Emilie_Move
(1)  258/    317C : 0838 0007 B518      		btst	#7,(RAM_EmiFlags).w
(1)  259/    3182 : 6600 00E8           		bne	.lockcontrl
(1)  260/    3186 : 0807 0007           		btst	#7,d7
(1)  261/    318A : 673E                		beq.s	.after
(1)  262/    318C : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  263/    3190 : 3E38 B51A           		move.w	(RAM_EmiBlockX).w,d7
(1)  264/    3194 : 8E78 B51C           		or.w	(RAM_EmiBlockY).w,d7
(1)  265/    3198 : 6B30                		bmi.s	.after
(1)  266/    319A : 3038 B51A           		move.w	(RAM_EmiBlockX).w,d0
(1)  267/    319E : B07C 0006           		cmp.w	#6,d0
(1)  268/    31A2 : 6C26                		bge.s	.after
(1)  269/    31A4 : 3238 B51C           		move.w	(RAM_EmiBlockY).w,d1
(1)  270/    31A8 : B27C 0006           		cmp.w	#6,d1
(1)  271/    31AC : 6C1C                		bge.s	.after
(1)  272/    31AE : C2FC 0006           		mulu.w	#6,d1
(1)  273/    31B2 : D041                		add.w	d1,d0
(1)  274/    31B4 : DCC0                		adda	d0,a6
(1)  275/    31B6 : 0856 0000           		bchg	#0,(a6)
(1)  276/    31BA : 08F8 0000 B528      		bset	#0,(RAM_BoardUpd).w
(1)  277/    31C0 : 7201                		moveq	#1,d1
(1)  278/    31C2 : 6100 00AA           		bsr	PlayThisSfx
(1)  279/    31C6 : 6100 00AC           		bsr	Board_CheckMatch
(1)  280/    31CA :                     .after:
(1)  281/    31CA :                     
(1)  282/    31CA :                     	; UDLR
(1)  283/    31CA : 383C 0000           		move.w	#0,d4
(1)  284/    31CE : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  285/    31D2 : 0807 0001           		btst	#bitJoyDown,d7
(1)  286/    31D6 : 671A                		beq.s	.noz_down
(1)  287/    31D8 : 0678 0018 B50C      		add.w	#$18,(RAM_EmiMoveY).w
(1)  288/    31DE : 0678 0001 B51C      		add.w	#1,(RAM_EmiBlockY).w
(1)  289/    31E4 : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  290/    31E8 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  291/    31F2 :                     .noz_down:
(1)  292/    31F2 : 383C 0004           		move.w	#4,d4
(1)  293/    31F6 : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  294/    31FA : 0807 0000           		btst	#bitJoyUp,d7
(1)  295/    31FE : 671A                		beq.s	.noz_up
(1)  296/    3200 : 0678 FFE8 B50C      		add.w	#-$18,(RAM_EmiMoveY).w
(1)  297/    3206 : 0478 0001 B51C      		sub.w	#1,(RAM_EmiBlockY).w
(1)  298/    320C : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  299/    3210 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  300/    321A :                     .noz_up:
(1)  301/    321A : 383C 0008           		move.w	#8,d4
(1)  302/    321E : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  303/    3222 : 0807 0003           		btst	#bitJoyRight,d7
(1)  304/    3226 : 671A                		beq.s	.noz_r
(1)  305/    3228 : 0678 0020 B508      		add.w	#$20,(RAM_EmiMoveX).w
(1)  306/    322E : 0678 0001 B51A      		add.w	#1,(RAM_EmiBlockX).w
(1)  307/    3234 : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  308/    3238 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  309/    3242 :                     .noz_r:
(1)  310/    3242 : 383C 000C           		move.w	#$C,d4
(1)  311/    3246 : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  312/    324A : 0807 0002           		btst	#bitJoyLeft,d7
(1)  313/    324E : 671A                		beq.s	.noz_l
(1)  314/    3250 : 0678 FFE0 B508      		add.w	#-$20,(RAM_EmiMoveX).w
(1)  315/    3256 : 0478 0001 B51A      		sub.w	#1,(RAM_EmiBlockX).w
(1)  316/    325C : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  317/    3260 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  318/    326A :                     .noz_l:
(1)  319/    326A : 4E75                		rts
(1)  320/    326C :                     
(1)  321/    326C :                     .lockcontrl:
(1)  322/    326C :                     ; 		add.w	#6,(RAM_EmiJumpTan).w
(1)  323/    326C : 4E75                		rts
(1)  324/    326E :                     
(1)  325/    326E :                     ; ====================================================================
(1)  326/    326E :                     ; ------------------------------------------------------
(1)  327/    326E :                     ; Subroutines
(1)  328/    326E :                     ; ------------------------------------------------------
(1)  329/    326E :                     
(1)  330/    326E :                     ; d2 - BLOCK
(1)  331/    326E :                     PlayThisSfx:
(1)  332/    326E : 700F                		moveq	#$F,d0
(1)  333/    3270 : 6000 D0B2           		bra	gemaPlayFromBlk
(1)  334/    3274 :                     
(1)  335/    3274 :                     ; 		lea	(GemaTrkData_Sfx),a0
(1)  336/    3274 :                     ; 		moveq	#1,d0
(1)  337/    3274 :                     ; 		moveq	#6,d1
(1)  338/    3274 :                     ; ; 		moveq	#0,d2
(1)  339/    3274 :                     ; 		moveq	#0,d3
(1)  340/    3274 :                     ; 		bra	Sound_TrkPlay
(1)  341/    3274 :                     
(1)  342/    3274 :                     Board_CheckMatch:
(1)  343/    3274 :                     	; horizontal
(1)  344/    3274 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  345/    3278 : 7600                		moveq	#0,d3
(1)  346/    327A : 3C3C 0005           		move	#6-1,d6
(1)  347/    327E :                     .x_chk_n:
(1)  348/    327E : 3E3C 0005           		move.w	#6-1,d7
(1)  349/    3282 : 7A00                		moveq	#0,d5
(1)  350/    3284 :                     .x_chk:
(1)  351/    3284 : DA16                		add.b	(a6),d5
(1)  352/    3286 : DCFC 0001           		adda	#1,a6
(1)  353/    328A : 51CF FFF8           		dbf	d7,.x_chk
(1)  354/    328E : BA3C 0006           		cmp.b	#6,d5
(1)  355/    3292 : 6604                		bne.s	.x_off
(1)  356/    3294 : D67C 0001           		add.w	#1,d3
(1)  357/    3298 :                     .x_off:
(1)  358/    3298 : 51CE FFE4           		dbf	d6,.x_chk_n
(1)  359/    329C :                     	; vertical
(1)  360/    329C : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  361/    32A0 : 3C3C 0005           		move	#6-1,d6
(1)  362/    32A4 :                     .y_chk_n:
(1)  363/    32A4 : 2A4E                		move.l	a6,a5
(1)  364/    32A6 : 3E3C 0005           		move.w	#6-1,d7
(1)  365/    32AA : 7A00                		moveq	#0,d5
(1)  366/    32AC :                     .y_chk:
(1)  367/    32AC : DA15                		add.b	(a5),d5
(1)  368/    32AE : DAFC 0006           		adda	#6,a5
(1)  369/    32B2 : 51CF FFF8           		dbf	d7,.y_chk
(1)  370/    32B6 : BA3C 0006           		cmp.b	#6,d5
(1)  371/    32BA : 6604                		bne.s	.y_off
(1)  372/    32BC : D67C 0001           		add.w	#1,d3
(1)  373/    32C0 :                     .y_off:
(1)  374/    32C0 : DCFC 0001           		adda	#1,a6
(1)  375/    32C4 : 51CE FFDE           		dbf	d6,.y_chk_n
(1)  376/    32C8 : 4A43                		tst.w	d3
(1)  377/    32CA : 670A                		beq.s	.xs_off
(1)  378/    32CC : 31FC 0020 B526      		move.w	#$20,(RAM_ShakeMe).w
(1)  379/    32D2 : 7200                		moveq	#0,d1
(1)  380/    32D4 : 6198                		bsr	PlayThisSfx
(1)  381/    32D6 :                     .xs_off:
(1)  382/    32D6 : 4E75                		rts
(1)  383/    32D8 :                     
(1)  384/    32D8 :                     Board_Reset:
(1)  385/    32D8 :                     	; horizontal
(1)  386/    32D8 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  387/    32DC : 7600                		moveq	#0,d3
(1)  388/    32DE : 3C3C 0005           		move	#6-1,d6
(1)  389/    32E2 :                     .x_chk_n:
(1)  390/    32E2 : 2A4E                		move.l	a6,a5
(1)  391/    32E4 : 3E3C 0005           		move.w	#6-1,d7
(1)  392/    32E8 : 7A00                		moveq	#0,d5
(1)  393/    32EA :                     .x_chk:
(1)  394/    32EA : DA15                		add.b	(a5),d5
(1)  395/    32EC : DAFC 0001           		adda	#1,a5
(1)  396/    32F0 : 51CF FFF8           		dbf	d7,.x_chk
(1)  397/    32F4 : BA3C 0006           		cmp.b	#6,d5
(1)  398/    32F8 : 6610                		bne.s	.x_off
(1)  399/    32FA : 284E                		move.l	a6,a4
(1)  400/    32FC : 7605                		moveq	#6-1,d3
(1)  401/    32FE :                     .x_clr:
(1)  402/    32FE : 08D4 0002           		bset	#2,(a4)
(1)  403/    3302 : D8FC 0001           		adda	#1,a4
(1)  404/    3306 : 51CB FFF6           		dbf	d3,.x_clr
(1)  405/    330A :                     .x_off:
(1)  406/    330A : DCFC 0006           		adda	#6,a6
(1)  407/    330E : 51CE FFD2           		dbf	d6,.x_chk_n
(1)  408/    3312 :                     	; vertical
(1)  409/    3312 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  410/    3316 : 3C3C 0005           		move	#6-1,d6
(1)  411/    331A :                     .y_chk_n:
(1)  412/    331A : 2A4E                		move.l	a6,a5
(1)  413/    331C : 3E3C 0005           		move.w	#6-1,d7
(1)  414/    3320 : 7A00                		moveq	#0,d5
(1)  415/    3322 :                     .y_chk:
(1)  416/    3322 : 1415                		move.b	(a5),d2
(1)  417/    3324 : C47C 0001           		and	#1,d2
(1)  418/    3328 : DA02                		add.b	d2,d5
(1)  419/    332A : DAFC 0006           		adda	#6,a5
(1)  420/    332E : 51CF FFF2           		dbf	d7,.y_chk
(1)  421/    3332 : BA3C 0006           		cmp.b	#6,d5
(1)  422/    3336 : 6610                		bne.s	.y_off
(1)  423/    3338 : 284E                		move.l	a6,a4
(1)  424/    333A : 7605                		moveq	#6-1,d3
(1)  425/    333C :                     .y_clr:
(1)  426/    333C : 08D4 0002           		bset	#2,(a4)
(1)  427/    3340 : D8FC 0006           		adda	#6,a4
(1)  428/    3344 : 51CB FFF6           		dbf	d3,.y_clr
(1)  429/    3348 :                     .y_off:
(1)  430/    3348 : DCFC 0001           		adda	#1,a6
(1)  431/    334C : 51CE FFCC           		dbf	d6,.y_chk_n
(1)  432/    3350 :                     
(1)  433/    3350 :                     	; clearall req
(1)  434/    3350 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  435/    3354 : 7E23                		moveq	#(6*6)-1,d7
(1)  436/    3356 :                     .nxtclr:
(1)  437/    3356 : 0816 0002           		btst	#2,(a6)
(1)  438/    335A : 6702                		beq.s	.noclrrq
(1)  439/    335C : 4216                		clr.b	(a6)
(1)  440/    335E :                     .noclrrq:
(1)  441/    335E : DCFC 0001           		adda	#1,a6
(1)  442/    3362 : 51CF FFF2           		dbf	d7,.nxtclr
(1)  443/    3366 : 4E75                		rts
(1)  444/    3368 :                     
(1)  445/    3368 :                     Board_SwapPos:
(1)  446/    3368 : 0838 0000 B528      		btst	#0,(RAM_BoardUpd).w
(1)  447/    336E : 6708                		beq	.nbdw2
(1)  448/    3370 : 6108                		bsr	.draw_all
(1)  449/    3372 : 08B8 0000 B528      		bclr	#0,(RAM_BoardUpd).w
(1)  450/    3378 :                     .nbdw2:
(1)  451/    3378 : 4E75                		rts
(1)  452/    337A :                     
(1)  453/    337A :                     ; draw all
(1)  454/    337A :                     .draw_all:
(1)  455/    337A : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  456/    337E : 3E3C 4390           		move.w	#$4000|(8*$02)|(7*$80),d7
(1)  457/    3382 : 4847                		swap	d7
(1)  458/    3384 : 3E3C 0003           		move.w	#3,d7
(1)  459/    3388 : 7005                		moveq	#6-1,d0
(1)  460/    338A :                     .nxt_y:
(1)  461/    338A : 2C07                		move.l	d7,d6
(1)  462/    338C : 323C 0005           		move	#6-1,d1
(1)  463/    3390 :                     .nxt_x:
(1)  464/    3390 : 611A                		bsr	.this_blk
(1)  465/    3392 : DCFC 0001           		adda	#1,a6
(1)  466/    3396 : DCBC 0008 0000      		add.l	#$80000,d6
(1)  467/    339C : 51C9 FFF2           		dbf	d1,.nxt_x
(1)  468/    33A0 : DEBC 0180 0000      		add.l	#$1800000,d7
(1)  469/    33A6 : 51C8 FFE2           		dbf	d0,.nxt_y
(1)  470/    33AA : 4E75                		rts
(1)  471/    33AC :                     .this_blk:
(1)  472/    33AC : 2A06                		move.l	d6,d5
(1)  473/    33AE : 43FA 004C           		lea	.switch_vram(pc),a1
(1)  474/    33B2 : 283C 2001 2001      		move.l	#$20012001,d4
(1)  475/    33B8 : 0816 0000           		btst	#0,(a6)
(1)  476/    33BC : 6706                		beq.s	.is_off2
(1)  477/    33BE : D8BC 000C 000C      		add.l	#$000C000C,d4
(1)  478/    33C4 :                     .is_off2:
(1)  479/    33C4 : 2049                		move.l	a1,a0
(1)  480/    33C6 : 343C 0002           		move.w	#3-1,d2
(1)  481/    33CA :                     .next_y2:
(1)  482/    33CA : 23C5 00C0 0004      		move.l	d5,(vdp_ctrl).l
(1)  483/    33D0 : 2618                		move.l	(a0)+,d3
(1)  484/    33D2 : D684                		add.l	d4,d3
(1)  485/    33D4 : 23C3 00C0 0000      		move.l	d3,(vdp_data).l
(1)  486/    33DA : 2618                		move.l	(a0)+,d3
(1)  487/    33DC : D684                		add.l	d4,d3
(1)  488/    33DE : 23C3 00C0 0000      		move.l	d3,(vdp_data).l
(1)  489/    33E4 : DABC 0080 0000      		add.l	#$800000,d5
(1)  490/    33EA : 51CA FFDE           		dbf	d2,.next_y2
(1)  491/    33EE : 4E75                		rts
(1)  492/    33F0 :                     
(1)  493/    33F0 :                     ; ; switched block
(1)  494/    33F0 :                     ; .block_draw:
(1)  495/    33F0 :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  496/    33F0 :                     ; 		or.w	(RAM_EmiBlockY).w,d7
(1)  497/    33F0 :                     ; 		bmi	.dont_upd
(1)  498/    33F0 :                     ; 		cmp.w	#6,(RAM_EmiBlockX).w
(1)  499/    33F0 :                     ; 		bge	.dont_upd
(1)  500/    33F0 :                     ; 		cmp.w	#6,(RAM_EmiBlockY).w
(1)  501/    33F0 :                     ; 		bge	.dont_upd
(1)  502/    33F0 :                     ;
(1)  503/    33F0 :                     ; 		lea	(RAM_BoardBlocks),a6
(1)  504/    33F0 :                     ; 		moveq	#0,d7
(1)  505/    33F0 :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  506/    33F0 :                     ; 		adda	d7,a6
(1)  507/    33F0 :                     ; 		add.w	d7,d7
(1)  508/    33F0 :                     ; 		add.w	d7,d7
(1)  509/    33F0 :                     ; 		move.w	(RAM_EmiBlockY).w,d6
(1)  510/    33F0 :                     ; 		move.w	d6,d5
(1)  511/    33F0 :                     ; 		add.w	d6,d6
(1)  512/    33F0 :                     ; 		move.w	.ypos_ex(pc,d6.w),d6
(1)  513/    33F0 :                     ; 		mulu.w	#6,d5
(1)  514/    33F0 :                     ; 		adda	d5,a6
(1)  515/    33F0 :                     ;
(1)  516/    33F0 :                     ; 		add.w	d7,d7
(1)  517/    33F0 :                     ; 		lsl.w	#7,d6			; *$80 size mode
(1)  518/    33F0 :                     ; 		add.w	d6,d7
(1)  519/    33F0 :                     ; 		add.w	#$4000|(8*$02)|(7*$80),d7
(1)  520/    33F0 :                     ; 		swap	d7
(1)  521/    33F0 :                     ; 		move.w	#3,d7
(1)  522/    33F0 :                     ; 		move.l	d7,d6
(1)  523/    33F0 :                     ; 		bchg	#0,(a6)
(1)  524/    33F0 :                     ; 		lea	.switch_vram(pc),a0
(1)  525/    33F0 :                     ; 		move.l	#$20012001,d4
(1)  526/    33F0 :                     ; 		btst	#0,(a6)
(1)  527/    33F0 :                     ; 		beq.s	.is_off
(1)  528/    33F0 :                     ; 		add.l	#$000C000C,d4
(1)  529/    33F0 :                     ; .is_off:
(1)  530/    33F0 :                     ; 		move.w	#3-1,d5
(1)  531/    33F0 :                     ; .next_y:
(1)  532/    33F0 :                     ; 		move.l	d7,(vdp_ctrl).l
(1)  533/    33F0 :                     ; 		move.l	(a0)+,d3
(1)  534/    33F0 :                     ; 		add.l	d4,d3
(1)  535/    33F0 :                     ; 		move.l	d3,(vdp_data).l
(1)  536/    33F0 :                     ; 		move.l	(a0)+,d3
(1)  537/    33F0 :                     ; 		add.l	d4,d3
(1)  538/    33F0 :                     ; 		move.l	d3,(vdp_data).l
(1)  539/    33F0 :                     ; 		add.l	#$800000,d7
(1)  540/    33F0 :                     ; 		dbf	d5,.next_y
(1)  541/    33F0 :                     ; .dont_upd:
(1)  542/    33F0 :                     ; 		rts
(1)  543/    33F0 :                     
(1)  544/    33F0 : 0000                .ypos_ex:	dc.w 0
(1)  545/    33F2 : 0003                		dc.w 3
(1)  546/    33F4 : 0006                		dc.w 6
(1)  547/    33F6 : 0009                		dc.w 9
(1)  548/    33F8 : 000C                		dc.w 12
(1)  549/    33FA : 000F                		dc.w 15
(1)  550/    33FC :                     		align 2
(1)  551/    33FC :                     .switch_vram:
(1)  552/    33FC : 0000 0001 0001 0002 		dc.w $0000,$0001,$0001,$0002
(1)  553/    3404 : 0003 0004 0004 0005 		dc.w $0003,$0004,$0004,$0005
(1)  554/    340C : 0006 0007 0007 0008 		dc.w $0006,$0007,$0007,$0008
(1)  555/    3414 :                     
(1)  556/    3414 :                     ; 		move.l	(RAM_EmiMoveX).w,d4
(1)  557/    3414 :                     ; 		add.l	d4,(RAM_EmiPosX).l
(1)  558/    3414 :                     ; 		move.l	d0,d5
(1)  559/    3414 :                     ; 		bsr.s	.floatpos
(1)  560/    3414 :                     ; 		tst.l	d4
(1)  561/    3414 :                     ; 		bne.s	.resx
(1)  562/    3414 :                     ; 		and.l	#$FFE00000,(RAM_EmiPosX).l
(1)  563/    3414 :                     ; .resx:
(1)  564/    3414 :                     ; 		move.l	d4,(RAM_EmiMoveX).w
(1)  565/    3414 :                     ; 		move.l	(RAM_EmiMoveY).w,d4
(1)  566/    3414 :                     ; 		add.l	d4,(RAM_EmiPosY).l
(1)  567/    3414 :                     ; 		move.l	d0,d5
(1)  568/    3414 :                     ; 		bsr.s	.floatpos
(1)  569/    3414 :                     ; 		tst.l	d4
(1)  570/    3414 :                     ; 		bne.s	.resy
(1)  571/    3414 :                     ; 		and.l	#$FFE00000,(RAM_EmiPosY).l
(1)  572/    3414 :                     ; .resy:
(1)  573/    3414 :                     ; 		move.l	d4,(RAM_EmiMoveY).w
(1)  574/    3414 :                     ;
(1)  575/    3414 :                     ; 		move.l	(RAM_EmiPosX).l,d7
(1)  576/    3414 :                     ; 		or.l	(RAM_EmiPosY).l,d7
(1)  577/    3414 :                     ; 		beq.s	.no_yspd
(1)  578/    3414 :                     ; 		move.w	#1,(RAM_EmiUpd).w
(1)  579/    3414 :                     ; .no_yspd:
(1)  580/    3414 :                     ; 		rts
(1)  581/    3414 :                     ;
(1)  582/    3414 :                     ; .floatpos:
(1)  583/    3414 :                     ; 		tst.l	d4
(1)  584/    3414 :                     ; 		bmi.s	.xleft
(1)  585/    3414 :                     ; 		sub.l	d5,d4
(1)  586/    3414 :                     ; 		bpl.s	.xstop
(1)  587/    3414 :                     ; 		clr.l	d4
(1)  588/    3414 :                     ; .xleft:
(1)  589/    3414 :                     ; 		tst.l	d4
(1)  590/    3414 :                     ; 		beq.s	.xstop
(1)  591/    3414 :                     ; 		add.l	d5,d4
(1)  592/    3414 :                     ; 		bmi.s	.xstop
(1)  593/    3414 :                     ; 		clr.l	d4
(1)  594/    3414 :                     ; .xstop:
(1)  595/    3414 :                     ; 		rts
(1)  596/    3414 :                     
(1)  597/    3414 :                     Emilie_Move:
(1)  598/    3414 :                     ; 		sub.l
(1)  599/    3414 : 1438 B518           		move.b	(RAM_EmiFlags),d2
(1)  600/    3418 : 0882 0007           		bclr	#7,d2
(1)  601/    341C : 3038 B500           		move.w	(RAM_EmiPosX).w,d0
(1)  602/    3420 : 3238 B508           		move.w	(RAM_EmiMoveX).w,d1
(1)  603/    3424 : 614A                		bsr	.move_it
(1)  604/    3426 : 31C0 B500           		move.w	d0,(RAM_EmiPosX).w
(1)  605/    342A : 3038 B504           		move.w	(RAM_EmiPosY).w,d0
(1)  606/    342E : 3238 B50C           		move.w	(RAM_EmiMoveY).w,d1
(1)  607/    3432 : 613C                		bsr	.move_it
(1)  608/    3434 : 31C0 B504           		move.w	d0,(RAM_EmiPosY).w
(1)  609/    3438 : 11C2 B518           		move.b	d2,(RAM_EmiFlags).w
(1)  610/    343C :                     
(1)  611/    343C : 2A39 FFFF B510      		move.l	(RAM_EmiJumpSpd).l,d5
(1)  612/    3442 : 2C38 B514           		move.l	(RAM_EmiJumpY),d6
(1)  613/    3446 : DC85                		add.l	d5,d6
(1)  614/    3448 : 21C6 B514           		move.l	d6,(RAM_EmiJumpY)
(1)  615/    344C :                     
(1)  616/    344C : 2A39 FFFF B510      		move.l	(RAM_EmiJumpSpd).l,d5
(1)  617/    3452 : DABC 0000 2000      		add.l	#$2000,d5
(1)  618/    3458 :                     ; 		bmi.s	.toomuch
(1)  619/    3458 : 2C38 B514           		move.l	(RAM_EmiJumpY),d6
(1)  620/    345C : 6B04                		bmi.s	.toomuch
(1)  621/    345E : 4285                		clr.l	d5
(1)  622/    3460 : 6006                		bra.s	.eximuch
(1)  623/    3462 :                     .toomuch:
(1)  624/    3462 : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)  625/    3468 :                     .eximuch:
(1)  626/    3468 : 23C5 FFFF B510      		move.l	d5,(RAM_EmiJumpSpd).l
(1)  627/    346E : 4E75                		rts
(1)  628/    3470 :                     .move_it:
(1)  629/    3470 : 3A00                		move.w	d0,d5
(1)  630/    3472 : 3801                		move.w	d1,d4
(1)  631/    3474 : B845                		cmp.w	d5,d4
(1)  632/    3476 : 6718                		beq.s	.same_x
(1)  633/    3478 : 3C3C 0001           		move.w	#1,d6
(1)  634/    347C : 9845                		sub.w	d5,d4
(1)  635/    347E : 6A04                		bpl.s	.reversx
(1)  636/    3480 : 3C3C FFFF           		move.w	#-1,d6
(1)  637/    3484 :                     .reversx:
(1)  638/    3484 : 08C2 0007           		bset	#7,d2
(1)  639/    3488 : 0678 0001 B520      		add.w	#1,(RAM_EmiAnim).w
(1)  640/    348E : D046                		add.w	d6,d0
(1)  641/    3490 :                     .same_x:
(1)  642/    3490 : 4E75                		rts
(1)  643/    3492 :                     
(1)  644/    3492 :                     Emilie_MkSprite:
(1)  645/    3492 : 4DF9 FFFF 7C10      		lea	(RAM_Sprites),a6
(1)  646/    3498 : 4A78 B524           		tst.w	(RAM_EmiHide).w
(1)  647/    349C : 6600 0098           		bne	.hidefuji
(1)  648/    34A0 :                     
(1)  649/    34A0 : 4A78 B522           		tst.w	(RAM_EmiUpd).w
(1)  650/    34A4 : 6730                		beq	.no_updgfx
(1)  651/    34A6 : 4278 B522           		clr.w	(RAM_EmiUpd).w
(1)  652/    34AA : 3238 B51E           		move.w	(RAM_EmiChar),d1
(1)  653/    34AE : 3638 B520           		move.w	(RAM_EmiAnim),d3
(1)  654/    34B2 : E64B                		lsr.w	#3,d3
(1)  655/    34B4 : C67C 0003           		and.w	#3,d3
(1)  656/    34B8 : D243                		add.w	d3,d1
(1)  657/    34BA : 343C 0300           		move.w	#$20*$18,d2
(1)  658/    34BE : C2C2                		mulu.w	d2,d1
(1)  659/    34C0 : 203C 0004 8300      		move.l	#ART_EMI,d0
(1)  660/    34C6 : D081                		add.l	d1,d0
(1)  661/    34C8 : C0BC FFFF FFFE      		and.l	#-2,d0
(1)  662/    34CE : 323C 0800           		move.w	#cell_vram($40),d1
(1)  663/    34D2 : 6100 D3E8           		bsr	Video_DmaMkEntry
(1)  664/    34D6 :                     .no_updgfx:
(1)  665/    34D6 : 2038 B504           		move.l	(RAM_EmiPosY),d0
(1)  666/    34DA : D0B8 B514           		add.l	(RAM_EmiJumpY),d0
(1)  667/    34DE : 4840                		swap	d0
(1)  668/    34E0 : 3438 B500           		move.w	(RAM_EmiPosX),d2
(1)  669/    34E4 : 3638 B526           		move.w	(RAM_ShakeMe).w,d3
(1)  670/    34E8 : 3803                		move.w	d3,d4
(1)  671/    34EA : E64B                		lsr.w	#3,d3
(1)  672/    34EC : 0804 0000           		btst	#0,d4
(1)  673/    34F0 : 6602                		bne.s	.midshk
(1)  674/    34F2 : 4443                		neg.w	d3
(1)  675/    34F4 :                     .midshk:
(1)  676/    34F4 : 4DF9 FFFF 7C10      		lea	(RAM_Sprites),a6
(1)  677/    34FA : 9043                		sub.w	d3,d0
(1)  678/    34FC : 323C 0040           		move.w	#$40,d1
(1)  679/    3500 : 0640 0080           		addi.w	#$80,d0
(1)  680/    3504 : 0642 0080           		addi.w	#$80,d2
(1)  681/    3508 : 3C80                		move.w	d0,(a6)			; TOP 32x32
(1)  682/    350A : 3D7C 0F01 0002      		move.w	#$0F01,2(a6)
(1)  683/    3510 : 3D41 0004           		move.w	d1,4(a6)
(1)  684/    3514 : 3D42 0006           		move.w	d2,6(a6)
(1)  685/    3518 : DCFC 0008           		adda	#8,a6
(1)  686/    351C : 0640 0020           		addi.w	#$20,d0
(1)  687/    3520 : 3C80                		move.w	d0,(a6)			; BOT 32x24
(1)  688/    3522 : 3D7C 0D00 0002      		move.w	#$0D00,2(a6)
(1)  689/    3528 : 0641 0010           		addi.w	#$10,d1
(1)  690/    352C : 3D41 0004           		move.w	d1,4(a6)
(1)  691/    3530 : 3D42 0006           		move.w	d2,6(a6)
(1)  692/    3534 :                     .no_upd:
(1)  693/    3534 : 4E75                		rts
(1)  694/    3536 :                     
(1)  695/    3536 :                     .hidefuji:
(1)  696/    3536 : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  697/    353C : 2D7C 0000 0000 0004 		move.l	#0,$04(a6)
(1)  698/    3544 : 2D7C 0000 0000 0008 		move.l	#0,$08(a6)
(1)  699/    354C : 2D7C 0000 0000 000C 		move.l	#0,$0C(a6)
(1)  700/    3554 : 4E75                		rts
(1)  701/    3556 :                     
(1)  702/    3556 :                     ; NORMAL
(1)  703/    3556 :                     ; 		lea	(vdp_data),a6
(1)  704/    3556 :                     ; 		move.l	#$78000003,4(a6)
(1)  705/    3556 :                     ; 		move.w	(RAM_EmiPosY),d0
(1)  706/    3556 :                     ; 		move.w	(RAM_EmiPosX),d1
(1)  707/    3556 :                     ; 		move.w	(RAM_EmiChar),d2
(1)  708/    3556 :                     ; 		move.w	(RAM_EmiAnim),d3
(1)  709/    3556 :                     ; 		lsr.w	#3,d3
(1)  710/    3556 :                     ; 		and.w	#3,d3
(1)  711/    3556 :                     ; 		add.w	d3,d2
(1)  712/    3556 :                     ; 		mulu.w	#$18,d2
(1)  713/    3556 :                     ; 		add.w	#1,d2
(1)  714/    3556 :                     ; 		add.w	#$80,d0
(1)  715/    3556 :                     ; 		add.w	#$80,d1
(1)  716/    3556 :                     ; 		move.w	d0,(a6)			; TOP 32x32
(1)  717/    3556 :                     ; 		move.w	#$0F01,(a6)
(1)  718/    3556 :                     ; 		move.w	d2,(a6)
(1)  719/    3556 :                     ; 		move.w	d1,(a6)
(1)  720/    3556 :                     ; 		add.w	#$20,d0
(1)  721/    3556 :                     ; 		add.w	#$10,d2
(1)  722/    3556 :                     ; 		move.w	d0,(a6)			; BOT 32x24
(1)  723/    3556 :                     ; 		move.w	#$0D00,(a6)
(1)  724/    3556 :                     ; 		move.w	d2,(a6)
(1)  725/    3556 :                     ; 		move.w	d1,(a6)
(1)  726/    3556 :                     ; 		rts
(1)  727/    3556 :                     
(1)  728/    3556 :                     ; ====================================================================
(1)  729/    3556 :                     ; ------------------------------------------------------
(1)  730/    3556 :                     ; VBlank
(1)  731/    3556 :                     ; ------------------------------------------------------
(1)  732/    3556 :                     
(1)  733/    3556 :                     ; ------------------------------------------------------
(1)  734/    3556 :                     ; HBlank
(1)  735/    3556 :                     ; ------------------------------------------------------
(1)  736/    3556 :                     
(1)  737/    3556 :                     ; ====================================================================
(1)  738/    3556 :                     ; ------------------------------------------------------
(1)  739/    3556 :                     ; DATA
(1)  740/    3556 :                     ;
(1)  741/    3556 :                     ; Small stuff goes here
(1)  742/    3556 :                     ; ------------------------------------------------------
(1)  743/    3556 :                     
(1)  744/    3556 :                     		align 2
(1)  745/    3556 :                     str_Title:
(1)  746/    3556 :                     ; 	if MARS
(1)  747/    3556 : 5C6C 205C 7720 5C77 		dc.b "\\l \\w \\w",$A,$A
                    0A0A                
(1)  748/    3560 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w MARS",$A
                    205C 7720 4D41 5253 
                    0A                  
(1)  749/    3571 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1)  750/    357D : 0A                  		dc.b $A
(1)  751/    357E : 5C62 205C 620A 0A   		dc.b "\\b \\b",$A,$A
(1)  752/    3585 : 5C77 0A             		dc.b "\\w",$A
(1)  753/    3588 : 5C77 0A             		dc.b "\\w",$A
(1)  754/    358B : 5C77 0A             		dc.b "\\w",$A
(1)  755/    358E : 5C77 0A             		dc.b "\\w",$A
(1)  756/    3591 : 5C77 0A             		dc.b "\\w",$A
(1)  757/    3594 : 5C77 0A             		dc.b "\\w",$A
(1)  758/    3597 : 5C77 0A             		dc.b "\\w",$A
(1)  759/    359A : 5C77 0A             		dc.b "\\w",$A
(1)  760/    359D : 0A                  		dc.b $A
(1)  761/    359E :                     
(1)  762/    359E : 5C77 0A             		dc.b "\\w",$A
(1)  763/    35A1 : 5C77 0A             		dc.b "\\w",$A
(1)  764/    35A4 : 5C77 0A             		dc.b "\\w",$A
(1)  765/    35A7 : 5C77 0A             		dc.b "\\w",$A
(1)  766/    35AA : 5C77 0A             		dc.b "\\w",$A
(1)  767/    35AD : 5C77 0A             		dc.b "\\w",$A
(1)  768/    35B0 : 5C77 0A             		dc.b "\\w",$A
(1)  769/    35B3 : 5C77 0A             		dc.b "\\w",$A
(1)  770/    35B6 : 00                  		dc.b 0
(1)  771/    35B7 :                     
(1)  772/    35B7 : FFFF 8450           		dc.l RAM_Framecount
(1)  773/    35BB : FFFF 9802           		dc.l Controller_1+on_hold
(1)  774/    35BF : FFFF 9812           		dc.l Controller_2+on_hold
(1)  775/    35C3 :                     
(1)  776/    35C3 : 00A1 5120           		dc.l sysmars_reg+comm0
(1)  777/    35C7 : 00A1 5122           		dc.l sysmars_reg+comm2
(1)  778/    35CB : 00A1 5124           		dc.l sysmars_reg+comm4
(1)  779/    35CF : 00A1 5126           		dc.l sysmars_reg+comm6
(1)  780/    35D3 : 00A1 5128           		dc.l sysmars_reg+comm8
(1)  781/    35D7 : 00A1 512A           		dc.l sysmars_reg+comm10
(1)  782/    35DB : 00A1 512C           		dc.l sysmars_reg+comm12
(1)  783/    35DF : 00A1 512E           		dc.l sysmars_reg+comm14
(1)  784/    35E3 :                     
(1)  785/    35E3 : 00A1 200E           		dc.l sysmcd_reg+mcd_comm_m
(1)  786/    35E7 : 00A1 200F           		dc.l sysmcd_reg+mcd_comm_s
(1)  787/    35EB :                     
(1)  788/    35EB : 00A1 2010           		dc.l sysmcd_reg+mcd_dcomm_m
(1)  789/    35EF : 00A1 2012           		dc.l sysmcd_reg+mcd_dcomm_m+2
(1)  790/    35F3 : 00A1 2014           		dc.l sysmcd_reg+mcd_dcomm_m+4
(1)  791/    35F7 : 00A1 2016           		dc.l sysmcd_reg+mcd_dcomm_m+6
(1)  792/    35FB : 00A1 2018           		dc.l sysmcd_reg+mcd_dcomm_m+8
(1)  793/    35FF : 00A1 201A           		dc.l sysmcd_reg+mcd_dcomm_m+10
(1)  794/    3603 : 00A1 201C           		dc.l sysmcd_reg+mcd_dcomm_m+12
(1)  795/    3607 : 00A1 201E           		dc.l sysmcd_reg+mcd_dcomm_m+14
(1)  796/    360B : 00A1 2020           		dc.l sysmcd_reg+mcd_dcomm_s
(1)  797/    360F : 00A1 2022           		dc.l sysmcd_reg+mcd_dcomm_s+2
(1)  798/    3613 : 00A1 2024           		dc.l sysmcd_reg+mcd_dcomm_s+4
(1)  799/    3617 : 00A1 2026           		dc.l sysmcd_reg+mcd_dcomm_s+6
(1)  800/    361B : 00A1 2028           		dc.l sysmcd_reg+mcd_dcomm_s+8
(1)  801/    361F : 00A1 202A           		dc.l sysmcd_reg+mcd_dcomm_s+10
(1)  802/    3623 : 00A1 202C           		dc.l sysmcd_reg+mcd_dcomm_s+12
(1)  803/    3627 : 00A1 202E           		dc.l sysmcd_reg+mcd_dcomm_s+14
(1)  804/    362B :                     
(1)  805/    362B :                     		align 2
(1)  806/    362C :                     
(1)  807/    362C :                     PAL_EMI:
(1)  808/    362C : 0000                		dc.w 0
(1)  809/    362E :                     		binclude "game/data/md/sprites/emi_pal.bin",2
(1)  810/    3642 :                     		align 2
(1)  811/    3642 :                     
(1)  812/    3642 : 0000 0000 0444 0888 PAL_TESTBOARD:	dc.w $0000,$0000,$0444,$0888,$0EEE,$0000,$0000,$0002,$0004,$0888
                    0EEE 0000 0000 0002 
                    0004 0888           
(1)  813/    3656 :                     		align 2
(1)  814/    3656 :                     ; 		binclude "game/data/md/bg/board_pal.bin"
(1)  815/    3656 :                     ; 		align 2
(1)  816/    3656 :                     
(1)  817/    3656 :                     
     328/    3656 :                     cscrn0_e:
     335/    3656 :                     Md_Screen00_e:
     336/    3656 :                     
     340/    3656 :                     
     341/    3656 :                     ; ====================================================================
     342/    3656 :                     ; --------------------------------------------------------
     343/    3656 :                     ; GEMA SOUND DRIVER DATA:
     344/    3656 :                     ; Tracks and Instruments
     345/    3656 :                     ;
     346/    3656 :                     ;    MD: Normal ROM area
     347/    3656 :                     ;   MCD: Loaded to RAM from disc (Z80 CAN read from RAM)
     348/    3656 :                     ;   32X: At the $880000+ area
     349/    3656 :                     ; CD32X: Same as CD
     350/    3656 :                     ;  Pico: N/A
     351/    3656 :                     ;
     352/    3656 :                     ; DAC samples are stored externally depending
     353/    3656 :                     ; of the system.
     354/    3656 :                     ; 32X: PWM can be on both ROM and SDRAM
     355/    3656 :                     ; but to keep cross-compatible with CD32X use
     356/    3656 :                     ; SDRAM only, use small samples to save space.
     357/    3656 :                     ; --------------------------------------------------------
     358/    3656 :                     
     362/    3656 :                     MCD_GEMATRKS:
     368/    3656 :                     gemacd_report:
     369/    3656 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    3656 :                     ; ================================================================
(1)    2/    3656 :                     ; ------------------------------------------------------------
(1)    3/    3656 :                     ; DATA SECTION
(1)    4/    3656 :                     ;
(1)    5/    3656 :                     ; SOUND
(1)    6/    3656 :                     ; ------------------------------------------------------------
(1)    7/    3656 :                     
(1)    8/    3656 :                     ; ticks - %gttttttt
(1)    9/    3656 :                     ;   loc - 68k pointer
(1)   10/    3656 :                     ;
(1)   11/    3656 :                     ; t-Ticks
(1)   12/    3656 :                     ; g-Use global tempo
(1)   13/    3656 :                     gemaTrk macro ticks,loc
(1)   14/    3656 :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   15/    3656 :                     	endm
(1)   16/    3656 :                     
(1)   17/    3656 :                     ; gemaHead
(1)   18/    3656 :                     ; block point, patt point, ins point
(1)   19/    3656 :                     ; numof_blocks,numof_patts,numof_ins
(1)   20/    3656 :                     gemaHead macro blk,pat,ins
(1)   21/    3656 :                     	dc.l blk
(1)   22/    3656 :                     	dc.l pat
(1)   23/    3656 :                     	dc.l ins
(1)   24/    3656 :                     	endm
(1)   25/    3656 :                     
(1)   26/    3656 :                     ; Instrument macros
(1)   27/    3656 :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   28/    3656 :                     gInsNull macro
(1)   29/    3656 :                     	dc.b $00,$00,$00,$00
(1)   30/    3656 :                     	dc.b $00,$00,$00,$00
(1)   31/    3656 :                     	endm
(1)   32/    3656 :                     
(1)   33/    3656 :                     ; alv: attack level
(1)   34/    3656 :                     ; atk: attack rate
(1)   35/    3656 :                     ; slv: sustain
(1)   36/    3656 :                     ; dky: decay rate (up)
(1)   37/    3656 :                     ; rrt: release rate (down)
(1)   38/    3656 :                     ; vib: (TODO)
(1)   39/    3656 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   40/    3656 :                     	dc.b $80,pitch,alv,atk
(1)   41/    3656 :                     	dc.b slv,dky,rrt,vib
(1)   42/    3656 :                     	endm
(1)   43/    3656 :                     
(1)   44/    3656 :                     ; same args as gInsPsg
(1)   45/    3656 :                     ; only one more argument for the noise type:
(1)   46/    3656 :                     ; mode: noise mode
(1)   47/    3656 :                     ;       %tmm
(1)   48/    3656 :                     ;        t  - Bass(0)|Noise(1)
(1)   49/    3656 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   50/    3656 :                     ;
(1)   51/    3656 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   52/    3656 :                     	dc.b $90|mode,pitch,alv,atk
(1)   53/    3656 :                     	dc.b slv,dky,rrt,vib
(1)   54/    3656 :                     	endm
(1)   55/    3656 :                     
(1)   56/    3656 :                     ; 24-bit ROM pointer to FM patch data
(1)   57/    3656 :                     gInsFm macro pitch,fmins
(1)   58/    3656 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   59/    3656 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   60/    3656 :                     	endm
(1)   61/    3656 :                     
(1)   62/    3656 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   63/    3656 :                     ; are the custom freqs for each operator in this order:
(1)   64/    3656 :                     ; OP1 OP2 OP3 OP4
(1)   65/    3656 :                     ;
(1)   66/    3656 :                     ; NOTE: pitch is useless here...
(1)   67/    3656 :                     gInsFm3	macro pitch,fmins
(1)   68/    3656 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   69/    3656 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   70/    3656 :                     	endm
(1)   71/    3656 :                     
(1)   72/    3656 :                     ; start: Pointer to sample data:
(1)   73/    3656 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   74/    3656 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   75/    3656 :                     ;        dc.b (sound data)	; <-- Then the actual sound data
(1)   76/    3656 :                     ;
(1)   77/    3656 :                     ; flags: $00 - No Loop
(1)   78/    3656 :                     ; 	 $01 - Loop
(1)   79/    3656 :                     gInsDac	macro pitch,start,flags
(1)   80/    3656 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   81/    3656 :                     	dc.b start&$FF,0,0,0
(1)   82/    3656 :                     	endm
(1)   83/    3656 :                     
(1)   84/    3656 :                     ; start: Pointer to sample data:
(1)   85/    3656 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   86/    3656 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   87/    3656 :                     ;        dc.b (data)		; Then the actual sound data
(1)   88/    3656 :                     ;
(1)   89/    3656 :                     ; flags: %00SL
(1)   90/    3656 :                     ;            L - Loop sample No/Yes
(1)   91/    3656 :                     ;           S  - Sample data is on STEREO
(1)   92/    3656 :                     gInsPwm	macro pitch,start,flags
(1)   93/    3656 :                      if MARS|MARSCD
(1)   94/    3656 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   95/    3656 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   96/    3656 :                      else
(1)   97/    3656 :                     	dc.b $00,$00,$00,$00
(1)   98/    3656 :                     	dc.b $00,$00,$00,$00
(1)   99/    3656 :                      endif
(1)  100/    3656 :                     	endm
(1)  101/    3656 :                     
(1)  102/    3656 :                     ; ------------------------------------------------------------
(1)  103/    3656 :                     
(1)  104/    3656 :                     	align 2
(1)  105/    3656 :                     
(1)  106/    3656 :                     ; ------------------------------------------------------------
(1)  107/    3656 :                     ; Nikona MAIN track-list
(1)  108/    3656 :                     ;
(1)  109/    3656 :                     ; ONLY the ticks can be set here.
(1)  110/    3656 :                     ; You can change the ticks mid-track using effect A
(1)  111/    3656 :                     ;
(1)  112/    3656 :                     ; Add $80 to the ticks value to use the GLOBAL
(1)  113/    3656 :                     ; sub-beats
(1)  114/    3656 :                     ;
(1)  115/    3656 :                     ; To set the sub-beats send the SetBeats command
(1)  116/    3656 :                     ; BEFORE playing your track:
(1)  117/    3656 :                     ; 	move.w	#new_beats,d0
(1)  118/    3656 :                     ; 	bsr	gemaSetBeats
(1)  119/    3656 :                     ; 	move.w	#track_id,d0
(1)  120/    3656 :                     ;	bsr	gemaPlayTrack
(1)  121/    3656 :                     ; ------------------------------------------------------------
(1)  122/    3656 :                     
(1)  123/    3656 :                     Gema_MasterList:
(1)  124/    3656 : (MACRO)             	gemaTrk 7,GemaTrk_TEST_1
(1)  124/    3656 : 0700 3783                   dc.l ((7&$FF)<<24)|GEMATRK_TEST_1&$FFFFFF
(1)  125/    365A : (MACRO)             	gemaTrk $11,GemaTrk_TEST_0
(1)  125/    365A : 1100 3754                   dc.l (($11&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  126/    365E : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  126/    365E : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  127/    3662 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  127/    3662 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  128/    3666 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  128/    3666 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  129/    366A : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  129/    366A : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  130/    366E : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  130/    366E : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  131/    3672 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  131/    3672 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  132/    3676 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  132/    3676 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  133/    367A : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  133/    367A : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  134/    367E : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  134/    367E : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  135/    3682 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  135/    3682 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  136/    3686 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  136/    3686 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  137/    368A : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  137/    368A : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  138/    368E : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  138/    368E : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  139/    3692 : (MACRO)             	gemaTrk 7,GemaSfx_All		; $0F
(1)  139/    3692 : 0700 36D6                   dc.l ((7&$FF)<<24)|GEMASFX_ALL&$FFFFFF
(1)  140/    3696 :                     
(1)  141/    3696 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  141/    3696 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  142/    369A : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  142/    369A : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  143/    369E : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  143/    369E : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  144/    36A2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  144/    36A2 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  145/    36A6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  145/    36A6 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  146/    36AA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  146/    36AA : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  147/    36AE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  147/    36AE : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  148/    36B2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  148/    36B2 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  149/    36B6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  149/    36B6 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  150/    36BA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  150/    36BA : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  151/    36BE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  151/    36BE : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  152/    36C2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  152/    36C2 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  153/    36C6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  153/    36C6 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  154/    36CA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  154/    36CA : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  155/    36CE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  155/    36CE : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  156/    36D2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  156/    36D2 : 0300 3754                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  157/    36D6 :                     
(1)  158/    36D6 :                     ; ------------------------------------------------------------
(1)  159/    36D6 :                     ; BGM tracks
(1)  160/    36D6 :                     ; ------------------------------------------------------------
(1)  161/    36D6 :                     
(1)  162/    36D6 :                     GemaSfx_All:
(1)  163/    36D6 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  163/    36D6 : 0000 36E2                   dc.l .BLK
(1)  163/    36DA : 0000 36E6                   dc.l .PAT
(1)  163/    36DE : 0000 373C                   dc.l .INS
(1)  164/    36E2 :                     .blk:
(1)  165/    36E2 :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  166/    36E5 :                     	align 2
(1)  167/    36E6 :                     .pat:
(1)  168/    36E6 :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  169/    373C :                     	align 2
(1)  170/    373C :                     .ins:
(1)  171/    373C : (MACRO)             	gInsFm3 0,FmIns_Fm3_Explosion
(1)  171/    373C : B000 006C                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  171/    3740 : 5D00 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  172/    3744 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$02,0,%110
(1)  172/    3744 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  172/    3748 : 0000 0200                   dc.b $00,$00,$02,0
(1)  173/    374C : (MACRO)             	gInsFm 0,FmIns_Ding_toy
(1)  173/    374C : A000 0070                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)  173/    3750 : 9D00 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  174/    3754 :                     
(1)  175/    3754 :                     ; ------------------------------------------------------------
(1)  176/    3754 :                     
(1)  177/    3754 :                     GemaTrk_TEST_0:
(1)  178/    3754 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  178/    3754 : 0000 3760                   dc.l .BLK
(1)  178/    3758 : 0000 3763                   dc.l .PAT
(1)  178/    375C : 0000 377B                   dc.l .INS
(1)  179/    3760 :                     
(1)  180/    3760 :                     ; Max. 24 blocks
(1)  181/    3760 :                     .blk:
(1)  182/    3760 :                     	binclude "sound/tracks/test_blk.bin"
(1)  183/    3763 :                     ; Max. 24 patterns
(1)  184/    3763 :                     .pat:
(1)  185/    3763 :                     	binclude "sound/tracks/test_patt.bin"
(1)  186/    377B :                     
(1)  187/    377B :                     ; Max. 16 instruments
(1)  188/    377B :                     ; Starting from 1.
(1)  189/    377B :                     .ins:
(1)  190/    377B :                     ; 	gInsDac 0,DacIns_TESTINS,0
(1)  191/    377B :                     
(1)  195/    377B : (MACRO)             	gInsPwm 0,SmpIns_TEST,%011
(1)  195/    377B : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    377F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/    3783 :                     
(1)  198/    3783 :                     ; 	gInsPsg 0,$00,$00,$00,$00,$00,0
(1)  199/    3783 :                     ; 	gInsFm -12,FmIns_Trumpet_2
(1)  200/    3783 :                     ; ; 	gInsPsgN +12,$20,$20,$10,$00,$04,0,%011
(1)  201/    3783 :                     ;
(1)  202/    3783 :                     ; 	gInsFm3 0,FmIns_Sp_OpenHat
(1)  203/    3783 :                     ; 	gInsDac -12,DacIns_Snare_1,0
(1)  204/    3783 :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  205/    3783 :                     
(1)  206/    3783 :                     ; GemaTrk_TEST_2:
(1)  207/    3783 :                     ; 	gemaHead .blk,.pat,.ins
(1)  208/    3783 :                     ; .blk:
(1)  209/    3783 :                     ; 	binclude "sound/tracks/wegot_blk.bin"
(1)  210/    3783 :                     ; 	align 2
(1)  211/    3783 :                     ; .pat:
(1)  212/    3783 :                     ; 	binclude "sound/tracks/wegot_patt.bin"
(1)  213/    3783 :                     ; 	align 2
(1)  214/    3783 :                     ; .ins:
(1)  215/    3783 :                     ; 	gInsFm 0,FmIns_Synth_plus
(1)  216/    3783 :                     ; 	gInsFm 0,FmIns_Bass_4
(1)  217/    3783 :                     ; 	gInsDac 0,DacIns_wegot_kick,0
(1)  218/    3783 :                     ; 	gInsFm 0,FmIns_Bass_club
(1)  219/    3783 :                     ; 	gInsFm3 0,FmIns_Sp_Openhat
(1)  220/    3783 :                     ; 	gInsPsg 0,$10,$04,$20,$04,$02,$00;gInsFm -12,FmIns_Trumpet_carnival;;
(1)  221/    3783 :                     ; 	gInsDac 0,DacIns_wegot_crash,0
(1)  222/    3783 :                     
(1)  223/    3783 :                     GemaTrk_TEST_1:
(1)  224/    3783 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  224/    3783 : 0000 378F                   dc.l .BLK
(1)  224/    3787 : 0000 379E                   dc.l .PAT
(1)  224/    378B : 0000 6BED                   dc.l .INS
(1)  225/    378F :                     .blk:
(1)  226/    378F :                     	binclude "sound/tracks/vectr_blk.bin"
(1)  227/    379E :                     .pat:
(1)  228/    379E :                     	binclude "sound/tracks/vectr_patt.bin"
(1)  229/    6BED :                     .ins:
(1)  230/    6BED : (MACRO)             	gInsPwm -17,SmpIns_Vctr01,%001
(1)  230/    6BED : 0000 0000                   dc.b $00,$00,$00,$00
(1)  230/    6BF1 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  231/    6BF5 : (MACRO)             	gInsFm -3,FmIns_brass_eur
(1)  231/    6BF5 : A0FD 006D                   dc.b $A0,-3,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  231/    6BF9 : DD00 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  232/    6BFD : (MACRO)             	gInsPwm -15,SmpIns_VctrCrash,0
(1)  232/    6BFD : 0000 0000                   dc.b $00,$00,$00,$00
(1)  232/    6C01 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  233/    6C05 : (MACRO)             	gInsPwm -17,SmpIns_Vctr04,%001
(1)  233/    6C05 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  233/    6C09 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  234/    6C0D : (MACRO)             	gInsNull
(1)  234/    6C0D : 0000 0000                   dc.b $00,$00,$00,$00
(1)  234/    6C11 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/    6C15 : (MACRO)             	gInsPwm -15,SmpIns_VctrTimpani,%101
(1)  235/    6C15 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  235/    6C19 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  236/    6C1D : (MACRO)             	gInsFm -22,FmIns_Bass_8
(1)  236/    6C1D : A0EA 006D                   dc.b $A0,-22,((FMINS_BASS_8>>16)&$FF),((FMINS_BASS_8>>8)&$FF)
(1)  236/    6C21 : 1D00 0000                   dc.b FMINS_BASS_8&$FF,$00,$00,$00
(1)  237/    6C25 : (MACRO)             	gInsPsg 0,$40,$08,$10,$01,$01,$00
(1)  237/    6C25 : 8000 4008                   dc.b $80,0,$40,$08
(1)  237/    6C29 : 1001 0100                   dc.b $10,$01,$01,$00
(1)  238/    6C2D : (MACRO)             	gInsNull;gInsPsgN 0,$40,$08,$10,$01,$01,$00,%110
(1)  238/    6C2D : 0000 0000                   dc.b $00,$00,$00,$00
(1)  238/    6C31 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  239/    6C35 : (MACRO)             	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  239/    6C35 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  239/    6C39 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  240/    6C3D : (MACRO)             	gInsPwm -17,SmpIns_VctrKick,%000
(1)  240/    6C3D : 0000 0000                   dc.b $00,$00,$00,$00
(1)  240/    6C41 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  241/    6C45 : (MACRO)             	gInsFm3 0,FmIns_Sp_Closedhat
(1)  241/    6C45 : B000 006C                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  241/    6C49 : AD00 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  242/    6C4D : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  242/    6C4D : B000 006C                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  242/    6C51 : 8500 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  243/    6C55 : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  243/    6C55 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  243/    6C59 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  244/    6C5D :                     
     370/    6C5D :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/    6C5D :                     ; ====================================================================
(1)    2/    6C5D :                     ; --------------------------------------------------------
(1)    3/    6C5D :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/    6C5D :                     ;
(1)    5/    6C5D :                     ; This must be located at the 68k's 880000 area.
(1)    6/    6C5D :                     ;
(1)    7/    6C5D :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    8/    6C5D :                     ; own instruments/patches
(1)    9/    6C5D :                     ; --------------------------------------------------------
(1)   10/    6C5D :                     
(1)   11/    6C5D :                     ; Notes:
(1)   12/    6C5D :                     ;
(1)   13/    6C5D :                     ; Savestate FM data is located at: $2478
(1)   14/    6C5D :                     ;
(1)   15/    6C5D :                     ; Sizes:
(1)   16/    6C5D :                     ; Normal FM ins: $20
(1)   17/    6C5D :                     ; Special FM ins: $28
(1)   18/    6C5D :                     ;
(1)   19/    6C5D :                     ; REGISTER FORMAT:
(1)   20/    6C5D :                     ; dc.b $30,$34,$38,$3C
(1)   21/    6C5D :                     ; dc.b $40,$44,$48,$4C
(1)   22/    6C5D :                     ; dc.b $50,$54,$58,$5C
(1)   23/    6C5D :                     ; dc.b $60,$64,$68,$6C
(1)   24/    6C5D :                     ; dc.b $70,$74,$78,$7C
(1)   25/    6C5D :                     ; dc.b $80,$84,$88,$8C
(1)   26/    6C5D :                     ; dc.b $90,$94,$98,$9C
(1)   27/    6C5D :                     ; dc.b $B0,$B4,$22,$28
(1)   28/    6C5D :                     ; ** Extra words for FM3 special:
(1)   29/    6C5D :                     ; dc.w OP1,OP2,OP3,OP4
(1)   30/    6C5D :                     ;
(1)   31/    6C5D :                     ; $22 LFO: %0000evvv
(1)   32/    6C5D :                     ; e - Enable
(1)   33/    6C5D :                     ; v - Value
(1)   34/    6C5D :                     ;
(1)   35/    6C5D :                     ; $28 KEYS: %oooo0000
(1)   36/    6C5D :                     ; o - Operators 4-1
(1)   37/    6C5D :                     
(1)   38/    6C5D :                     
(1)   39/    6C5D :                     
(1)   40/    6C5D :                     ; FM3 Special
(1)   41/    6C5D :                     FmIns_Fm3_Explosion:
(1)   42/    6C5D :                     		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/    6C85 :                     FmIns_Sp_OpenHat:
(1)   44/    6C85 :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   45/    6CAD :                     FmIns_Sp_ClosedHat:
(1)   46/    6CAD :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   47/    6CD5 :                     FmIns_Sp_Cowbell:
(1)   48/    6CD5 :                     		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(1)   49/    6CFD :                     FmIns_Bass_4:
(1)   50/    6CFD :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   51/    6D1D :                     FmIns_Bass_8:
(1)   52/    6D1D :                     		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(1)   53/    6D3D :                     FmIns_Synth_Plus:
(1)   54/    6D3D :                     		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(1)   55/    6D5D :                     FmIns_Bass_club:
(1)   56/    6D5D :                     		binclude "sound/instr/fm/OLD_bass_club.gsx",$2478,$20
(1)   57/    6D7D :                     FmIns_Bass_calm:
(1)   58/    6D7D :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   59/    6D9D :                     FmIns_Trumpet_1:
(1)   60/    6D9D :                     		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(1)   61/    6DBD :                     FmIns_Trumpet_carnival:
(1)   62/    6DBD :                     		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   63/    6DDD :                     FmIns_brass_eur:
(1)   64/    6DDD :                     		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(1)   65/    6DFD :                     FmIns_Bass_Oil:
(1)   66/    6DFD :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   67/    6E1D :                     FmIns_Organ_Ito:
(1)   68/    6E1D :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)   69/    6E3D :                     FmIns_Ding_Baseball:
(1)   70/    6E3D :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)   71/    6E5D :                     FmIns_DrumKick_gem:
(1)   72/    6E5D :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)   73/    6E7D :                     FmIns_ClosedHat:
(1)   74/    6E7D :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)   75/    6E9D :                     FmIns_PianoM1:
(1)   76/    6E9D :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   77/    6EBD :                     FmIns_Bass_1:
(1)   78/    6EBD :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   79/    6EDD :                     FmIns_Bass_2:
(1)   80/    6EDD :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   81/    6EFD :                     FmIns_Bass_donna:
(1)   82/    6EFD :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   83/    6F1D :                     FmIns_Bass_groove:
(1)   84/    6F1D :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   85/    6F3D :                     FmIns_Bass_groove_2:
(1)   86/    6F3D :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   87/    6F5D :                     FmIns_Bass_groove_gem:
(1)   88/    6F5D :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   89/    6F7D :                     FmIns_Bass_italo:
(1)   90/    6F7D :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   91/    6F9D :                     FmIns_Bass_duck:
(1)   92/    6F9D :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   93/    6FBD :                     FmIns_Piano_Aqua:
(1)   94/    6FBD :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   95/    6FDD :                     FmIns_Trumpet_2:
(1)   96/    6FDD :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)   97/    6FFD :                     FmIns_Trumpet_puy:
(1)   98/    6FFD :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)   99/    701D :                     FmIns_Marimba:
(1)  100/    701D :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)  101/    703D :                     FmIns_Ambient_dark:
(1)  102/    703D :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  103/    705D :                     FmIns_Ambient_spook:
(1)  104/    705D :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  105/    707D :                     FmIns_Ambient_3:
(1)  106/    707D :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  107/    709D :                     FmIns_Ding_toy:
(1)  108/    709D :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  109/    70BD :                     FmIns_Brass_Puy:
(1)  110/    70BD :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  111/    70DD :                     FmIns_Flaute_cave:
(1)  112/    70DD :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  113/    70FD :                     FmIns_Banjo_puy:
(1)  114/    70FD :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  115/    711D :                     FmIns_PSynth_plus:
(1)  116/    711D :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  117/    713D :                     FmIns_Ding_1:
(1)  118/    713D :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  119/    715D :                     FmIns_Trombone_gem:
(1)  120/    715D :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  121/    717D :                     FmIns_HBeat_tom:
(1)  122/    717D :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  123/    719D :                     
     371/    719D :                     gemacd_report_e:
     380/    719D :                     
     381/    719D :                     ; ====================================================================
     382/    719D :                     ; ----------------------------------------------------------------
     383/    719D :                     ; 68K DATA BANKs
     384/    719D :                     ;
     385/    719D :                     ; SEGA CD:
     386/    719D :                     ; BANKS are stored in WORD-RAM pieces
     387/    719D :                     ; limited to 256KB 2M or 128KB 1M/1M
     388/    719D :                     ; ** THESE CANNOT BE USED IF USING ASIC STAMPS **
     389/    719D :                     ;
     390/    719D :                     ; SEGA 32X:
     391/    719D :                     ; BANKS are limited to 1MB, only 4 banks can be used
     392/    719D :                     ; ----------------------------------------------------------------
     393/    719D :                     
     394/    719D :                     ; ---------------------------------------------
     395/    719D :                     ; DEFAULT BANK
     396/    719D :                     ;
     397/    719D :                     ; CD/CD32X:
     398/    719D :                     ; $200000 256KB WORD-RAM
     399/    719D :                     ;
     400/    719D :                     ; 32X:
     401/    719D :                     ; $900000 1MB (This is BANK 0)
     402/    719D :                     ; ---------------------------------------------
     403/    719D :                     
     404/    719D :                     MCD_DBANK0:
     410/    719D :                     mdbank0:
     411/    719D :                     		include "game/data/md_bank0.asm"	; <-- 68K ONLY bank data
(1)    1/    719D :                     ; ====================================================================
(1)    2/    719D :                     ; ----------------------------------------------------------------
(1)    3/    719D :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/    719D :                     ; for big stuff like maps, levels, etc.
(1)    5/    719D :                     ;
(1)    6/    719D :                     ; For graphics use DMA and place your files at
(1)    7/    719D :                     ; md_dma.asm (Watch out for the $20000 limit.)
(1)    8/    719D :                     ;
(1)    9/    719D :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/    719D :                     ; ----------------------------------------------------------------
(1)   11/    719D :                     
(1)   12/    719D :                     		include "game/data/m_palettes.asm"	; All 32X palettes will be here.
(2)    1/    719D :                     ; ====================================================================
(2)    2/    719D :                     ; ----------------------------------------------------------------
(2)    3/    719D :                     ; Put your 32X palettes here
(2)    4/    719D :                     ;
(2)    5/    719D :                     ; These are located on a single 68K $900000+ bank
(2)    6/    719D :                     ;
(2)    7/    719D :                     ; Labels MUST be aligned by 2
(2)    8/    719D :                     ; ----------------------------------------------------------------
(2)    9/    719D :                     
(2)   10/    719D :                     		align 2
(2)   11/    719E :                     PalMars_TEST:
(2)   12/    719E :                     		binclude "game/data/TESTS/mars_pal.bin"
(2)   13/    739C :                     		align 2
(2)   14/    739C :                     
(2)   15/    739C :                     ; PalMars_MarsCity:
(2)   16/    739C :                     ; 		binclude "game/data/maps/3D/mcity/mtrl/marscity_pal.bin"
(2)   17/    739C :                     ; 		align 2
(2)   18/    739C :                     ;
(2)   19/    739C :                     ; MapPal_M:	binclude "game/data/maps/2D/level0/m_pal.bin"
(2)   20/    739C :                     ; 		align 2
(2)   21/    739C :                     ; TestSupSpr_Pal:
(2)   22/    739C :                     ; 		binclude "game/data/sprites/mars/nicole/sprites_pal.bin"
(2)   23/    739C :                     ; 		align 2
(2)   24/    739C :                     
(1)   13/    739C :                     
(1)   14/    739C :                     PalMd_TEST:	binclude "game/data/TESTS/md_pal.bin"
(1)   15/    73BC :                     		align 2
(1)   16/    73BC :                     MapMd_TEST:	binclude "game/data/TESTS/md_map.bin"
(1)   17/    7C7C :                     		align 2
(1)   18/    7C7C :                     
(1)   19/    7C7C :                     MAP_TESTBOARD:
(1)   20/    7C7C :                     		binclude "game/data/md/bg/board_map.bin"
(1)   21/    853C :                     		align 2
(1)   22/    853C :                     
(1)   23/    853C :                     ; 		align 2
(1)   24/    853C :                     ; Pal_level0:	binclude "game/data/maps/2D/level0/pal.bin"
(1)   25/    853C :                     ; 		align 2
(1)   26/    853C :                     ; Pal_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_pal.bin"
(1)   27/    853C :                     ; 		align 2
(1)   28/    853C :                     ; Map_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_map.bin"
(1)   29/    853C :                     ; 		align 2
(1)   30/    853C :                     ;
(1)   31/    853C :                     ; ; ----------------------------------------------------------------
(1)   32/    853C :                     ;
(1)   33/    853C :                     ; 		align 2
(1)   34/    853C :                     ; MapHead_0:	binclude "game/data/maps/2D/level0/head.bin"
(1)   35/    853C :                     ; MapBlk_0:	binclude "game/data/maps/2D/level0/blocks.bin"
(1)   36/    853C :                     ; 		align 2
(1)   37/    853C :                     ; MapFgL_0:	binclude "game/data/maps/2D/level0/fg_low.bin"
(1)   38/    853C :                     ; 		align 2
(1)   39/    853C :                     ; MapFgH_0:	binclude "game/data/maps/2D/level0/fg_hi.bin"
(1)   40/    853C :                     ; 		align 2
(1)   41/    853C :                     ; MapFgC_0:	binclude "game/data/maps/2D/level0/fg_col.bin"
(1)   42/    853C :                     ; 		align 2
(1)   43/    853C :                     ; MapBgL_0:	binclude "game/data/maps/2D/level0/bg_low.bin"
(1)   44/    853C :                     ; 		align 2
(1)   45/    853C :                     ; MapBgH_0:	binclude "game/data/maps/2D/level0/bg_hi.bin"
(1)   46/    853C :                     ; 		align 2
(1)   47/    853C :                     ;
(1)   48/    853C :                     ; ; ----------------------------------------------------------------
(1)   49/    853C :                     ; ; 68k data for 32X maps go here:
(1)   50/    853C :                     ; ; Headers and Collision
(1)   51/    853C :                     ;
(1)   52/    853C :                     ; 		align 2
(1)   53/    853C :                     ; MapHead_M:	binclude "game/data/maps/2D/level0/m_head.bin"
(1)   54/    853C :                     ; 		align 2
(1)   55/    853C :                     ; MapCol_M:	binclude "game/data/maps/2D/level0/m_col.bin"
(1)   56/    853C :                     ; 		align 2
(1)   57/    853C :                     ;
(1)   58/    853C :                     ; ; ----------------------------------------------------------------
(1)   59/    853C :                     ;
(1)   60/    853C :                     ; MapCamera_0:
(1)   61/    853C :                     ; 		binclude "game/data/maps/3D/mcity/anim/mcity_anim.bin"
(1)   62/    853C :                     ; 		align 4
(1)   63/    853C :                     
     412/    853C :                     mdbank0_e:
     413/    853C :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/    853C :                     ; ====================================================================
(1)    2/    853C :                     ; --------------------------------------------------------
(1)    3/    853C :                     ; GEMA/Nikona DAC instruments "digital"
(1)    4/    853C :                     ;
(1)    5/    853C :                     ; This must be located at the 68k's 900000 area.
(1)    6/    853C :                     ; ** 68K BANK 0 only **
(1)    7/    853C :                     ;
(1)    8/    853C :                     ; BASE Samplerate is at 16000hz
(1)    9/    853C :                     ; --------------------------------------------------------
(1)   10/    853C :                     
(1)   11/    853C :                     ; Special sample data macro
(1)   12/    853C :                     gSmpHead macro len,loop
(1)   13/    853C :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   14/    853C :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   15/    853C :                     	endm
(1)   16/    853C :                     
(1)   17/    853C :                     	align $8000	; <-- just to be safe.
(1)   18/   10000 :                     DacIns_wegot_crash:
(1)   19/   10000 : (MACRO)             	gSmpHead .end-.start,0
(1)   19/   10000 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/   10003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/   10006 :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   21/   12CCA :                     .end:
(1)   22/   12CCA :                     DacIns_wegot_kick:
(1)   23/   12CCA : (MACRO)             	gSmpHead .end-.start,0
(1)   23/   12CCA : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   23/   12CCD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/   12CD0 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   25/   13444 :                     .end:
(1)   26/   13444 :                     DacIns_Snare_1:
(1)   27/   13444 : (MACRO)             	gSmpHead .end-.start,0
(1)   27/   13444 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   27/   13447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/   1344A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   29/   1456E :                     .end:
(1)   30/   1456E :                     
(1)   31/   1456E :                     DacIns_TESTINS:
(1)   32/   1456E : (MACRO)             	gSmpHead .end-.start,0
(1)   32/   1456E : 00E7 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   32/   14571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/   14574 :                     .start:	binclude "sound/instr/smpl/test.wav",$2C
(1)   34/   22C74 :                     .end:
(1)   35/   22C74 :                     
(1)   36/   22C74 :                     ; TEST SAMPLE
(1)   37/   22C74 :                     TEST_WAVE:
(1)   38/   22C74 :                     	binclude "sound/instr/smpl/test.wav",$2C
(1)   39/   31374 :                     TEST_WAVE_E:
(1)   40/   31374 :                     	align 2
(1)   41/   31374 :                     
     414/   31374 :                     ; 	if MARS
     415/   31374 :                     ; 		org $100000-4				; Fill this bank and
     416/   31374 :                     ; 		dc.b "BNK0"				; add a tag at the end
     417/   31374 :                     ; 		dephase
     421/   31374 :                     
     428/   31374 :                     
     434/   31374 :                     
     435/   31374 :                     ; ---------------------------------------------
     436/   31374 :                     ; BANK 1
     437/   31374 :                     ; ---------------------------------------------
     438/   31374 :                     
     439/   31374 :                     ; 		phase $900000
     440/   31374 :                     ; 		include "game/data/md_bank1.asm"
     441/   31374 :                     ; 		dephase
     442/   31374 :                     ; 		org $200000-4
     443/   31374 :                     ; 		dc.b "BNK1"
     444/   31374 :                     
     445/   31374 :                     ; ---------------------------------------------
     446/   31374 :                     ; BANK 2
     447/   31374 :                     ; ---------------------------------------------
     448/   31374 :                     
     449/   31374 :                     ; 		phase $900000
     450/   31374 :                     ; 		include "game/data/md_bank2.asm"
     451/   31374 :                     ; 		dephase
     452/   31374 :                     ; 		org $300000-4
     453/   31374 :                     ; 		dc.b "BNK2"
     454/   31374 :                     
     455/   31374 :                     ; ---------------------------------------------
     456/   31374 :                     ; BANK 3
     457/   31374 :                     ; ---------------------------------------------
     458/   31374 :                     
     459/   31374 :                     ; 		phase $900000
     460/   31374 :                     ; 		include "game/data/md_bank3.asm"
     461/   31374 :                     ; 		dephase
     462/   31374 :                     ; 		org $400000-4
     463/   31374 :                     ; 		dc.b "BNK3"
     464/   31374 :                     
     465/   31374 :                     ; ====================================================================
     466/   31374 :                     ; ----------------------------------------------------------------
     467/   31374 :                     ; 32X Cartridge DMA data: Requires RV bit set to 1, BANK-free
     468/   31374 :                     ; ----------------------------------------------------------------
     469/   31374 :                     
     470/   31374 :                     		align $8000
     472/   38000 :                     		include "game/data/md_dma.asm"
(1)    1/   38000 :                     ; ====================================================================
(1)    2/   38000 :                     ; ----------------------------------------------------------------
(1)    3/   38000 :                     ; DMA ROM-DATA Transfer section
(1)    4/   38000 :                     ; 
(1)    5/   38000 :                     ; RV bit must be enabled to read from here
(1)    6/   38000 :                     ; ----------------------------------------------------------------
(1)    7/   38000 :                     
(1)    9/   38000 :                     		align $8000
(1)   11/   38000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   12/   38C00 :                     ASCII_FONT_e:
(1)   13/   38C00 :                     ArtMd_TEST:	binclude "game/data/TESTS/md_art.bin"
(1)   14/   40360 :                     ArtMd_TEST_e:
(1)   15/   40360 :                     		align 2
(1)   16/   40360 :                     
(1)   17/   40360 :                     		align $8000
(1)   18/   48000 :                     ART_TESTBOARD:	binclude "game/data/md/bg/board_art.bin"
(1)   19/   48300 :                     ART_TESTBOARD_e:
(1)   20/   48300 :                     ART_EMI:	binclude "game/data/md/sprites/emi_art.bin"
(1)   21/   4B300 :                     ART_EMI_e:
(1)   22/   4B300 :                     
(1)   23/   4B300 :                     
(1)   24/   4B300 :                     
(1)   25/   4B300 :                     
(1)   26/   4B300 :                     
     474/   4B300 :                     
     475/   4B300 :                     ; ====================================================================
     476/   4B300 :                     ; ----------------------------------------------------------------
     477/   4B300 :                     ; 32X ONLY
     478/   4B300 :                     ;
     479/   4B300 :                     ; SH2 code and ROM data
     480/   4B300 :                     ;
     481/   4B300 :                     ; ** MARSCD: Loads to WORD-RAM
     482/   4B300 :                     ; ----------------------------------------------------------------
     483/   4B300 :                     
     489/   4B300 :                     MARS_RAMDATA:
     499/   4B300 :                     MARS_RAMDATA_E:
     500/   4B300 :                     		align 4
     501/   4B300 :                     
     502/   4B300 :                     ; ====================================================================
     503/   4B300 :                     ; --------------------------------------------------------
     504/   4B300 :                     ; SH2's ROM-only stuff
     505/   4B300 :                     ; This section will be gone if RV bit is set to 1
     506/   4B300 :                     ; --------------------------------------------------------
     507/   4B300 :                     
     515/   4B300 :                     
     516/   4B300 :                     ; ====================================================================
     517/   4B300 :                     ; ---------------------------------------------
     518/   4B300 :                     ; End
     519/   4B300 :                     ; ---------------------------------------------
     520/   4B300 :                     
     521/   4B300 : 41F8 C176           		lea	($FFFFC176).w,a0
     522/   4B304 : 43F9 00A1 0003      		lea	($A10003).l,a1
     523/   4B30A : 6106                		bsr.s	loc_3410
     524/   4B30C : 43F9 00A1 0005      		lea	($A10005).l,a1
     525/   4B312 :                     
     526/   4B312 :                     loc_3410:				; CODE XREF: ROM:00003406p
     527/   4B312 : 33FC 0100 00A1 1100 		move.w	#$100,($A11100).l
     528/   4B31A : 12BC 0000           		move.b	#0,(a1)
     529/   4B31E : 4E71                		nop
     530/   4B320 : 4E71                		nop
     531/   4B322 : 4E71                		nop
     532/   4B324 : 1211                		move.b	(a1),d1
     533/   4B326 : 4E71                		nop
     534/   4B328 : 4E71                		nop
     535/   4B32A : 4E71                		nop
     536/   4B32C : 12BC 0040           		move.b	#$40,(a1) ; '@'
     537/   4B330 : E541                		asl.w	#2,d1
     538/   4B332 : 3401                		move.w	d1,d2
     539/   4B334 : 1011                		move.b	(a1),d0
     540/   4B336 : 0242 0030           		andi.w	#$30,d2	; '0'
     541/   4B33A : 6700 0006           		beq.w	loc_3440
     542/   4B33E : 323C 00FF           		move.w	#$FF,d1
     543/   4B342 :                     
     544/   4B342 :                     loc_3440:				; CODE XREF: ROM:00003438j
     545/   4B342 : 0240 003F           		andi.w	#$3F,d0	; '?'
     546/   4B346 : 0241 00C0           		andi.w	#$C0,d1	; 'À'
     547/   4B34A : 8041                		or.w	d1,d0
     548/   4B34C : 4640                		not.w	d0
     549/   4B34E : 2278 FE38           		movea.l	($FFFFFE38).w,a1
     550/   4B352 : 1200                		move.b	d0,d1
     551/   4B354 : 0200 008F           		andi.b	#$8F,d0
     552/   4B358 : 0881 0006           		bclr	#6,d1
     553/   4B35C : 6702                		beq.s	loc_345E
     554/   4B35E : 8011                		or.b	(a1),d0
     555/   4B360 :                     
     556/   4B360 :                     loc_345E:				; CODE XREF: ROM:0000345Aj
     557/   4B360 : 0881 0005           		bclr	#5,d1
     558/   4B364 : 6704                		beq.s	loc_3468
     559/   4B366 : 8029 0001           		or.b	1(a1),d0
     560/   4B36A :                     
     561/   4B36A :                     loc_3468:
     562/   4B36A : 0881 0004           		bclr	#4,d1
     563/   4B36E : 6704                		beq.s	loc_3472
     564/   4B370 : 8029 0002           		or.b	2(a1),d0
     565/   4B374 :                     
     566/   4B374 :                     loc_3472:
     567/   4B374 : B110                		eor.b	d0,(a0)
     568/   4B376 : 1210                		move.b	(a0),d1
     569/   4B378 : 10C0                		move.b	d0,(a0)+
     570/   4B37A : C041                		and.w	d1,d0
     571/   4B37C : 10C0                		move.b	d0,(a0)+
     572/   4B37E : 33FC 0000 00A1 1100 		move.w	#0,($A11100).l
     573/   4B386 : 4E75                		rts
     574/   4B388 :                     
     575/   4B388 :                     ROM_END:
     579/   4B388 :                     		align $8000		; Pad the Cartridge
     581/   50000 :                     
 AS V1.42 Beta [Bld 118] - source file main.asm - page 2 - 8/21/2023 11:31:06


  symbol table (* = unused):
  ------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
*ARTMD_TEST :                 38C00 C | *ARTMD_TEST_E :               40360 C |
 ART_EMI :                    48300 C | *ART_EMI_E :                  4B300 C |
 ART_TESTBOARD :              48000 C |  ART_TESTBOARD_E :            48300 C |
 ASCII_FONT :                 38000 C |  ASCII_FONT_E :               38C00 C |
 ASCII_PAL :                    3CA C | *ASCII_PAL_E :                  3EA C |
 ATK :                            8 - | *BIGENDIAN :                      0 - |
*BITBGON :                        7 - | *BITCLICKL :                      1 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      0 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITDRWD :                        2 - | *BITDRWL :                        1 - |
*BITDRWR :                        0 - | *BITDRWU :                        3 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
 BITJOYMODE :                     B - |  BITJOYRIGHT :                    3 - |
*BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
*BITMARSBG :                      6 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
 BOARD_CHECKMATCH :            3274 C |  BOARD_CHECKMATCH.XS_OFF :     32D6 C |
 BOARD_CHECKMATCH.X_CHK :      3284 C |  BOARD_CHECKMATCH.X_CHK_N :    327E C |
 BOARD_CHECKMATCH.X_OFF :      3298 C |  BOARD_CHECKMATCH.Y_CHK :      32AC C |
 BOARD_CHECKMATCH.Y_CHK_N :    32A4 C |  BOARD_CHECKMATCH.Y_OFF :      32C0 C |
 BOARD_RESET :                 32D8 C |  BOARD_RESET.NOCLRRQ :         335E C |
 BOARD_RESET.NXTCLR :          3356 C |  BOARD_RESET.X_CHK :           32EA C |
 BOARD_RESET.X_CHK_N :         32E2 C |  BOARD_RESET.X_CLR :           32FE C |
 BOARD_RESET.X_OFF :           330A C |  BOARD_RESET.Y_CHK :           3322 C |
 BOARD_RESET.Y_CHK_N :         331A C |  BOARD_RESET.Y_CLR :           333C C |
 BOARD_RESET.Y_OFF :           3348 C |  BOARD_SWAPPOS :               3368 C |
 BOARD_SWAPPOS.DRAW_ALL :      337A C |  BOARD_SWAPPOS.IS_OFF2 :       33C4 C |
 BOARD_SWAPPOS.NBDW2 :         3378 C |  BOARD_SWAPPOS.NEXT_Y2 :       33CA C |
 BOARD_SWAPPOS.NXT_X :         3390 C |  BOARD_SWAPPOS.NXT_Y :         338A C |
 BOARD_SWAPPOS.SWITCH_VRAM :   33FC C |  BOARD_SWAPPOS.THIS_BLK :      33AC C |
*BOARD_SWAPPOS.YPOS_EX :       33F0 C | *BRANCHEXT :                      0 - |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                     F4D C |  CHIP_ENV.ATKEND :              FD0 C |
*CHIP_ENV.ATKZERO :             FD3 C |  CHIP_ENV.CHK2 :                FD9 C |
 CHIP_ENV.CHK4 :               100E C |  CHIP_ENV.CKOF :                F71 C |
 CHIP_ENV.CKON :                F84 C | *CHIP_ENV.DECTMR :              FDD C |
 CHIP_ENV.DKADD :               FF7 C |  CHIP_ENV.DKSAV :               FFF C |
 CHIP_ENV.DKYEND :             1004 C |  CHIP_ENV.DO_NFREQ :           1063 C |
 CHIP_ENV.ENVPROC :             FA2 C |  CHIP_ENV.KILLENV :            1024 C |
*CHIP_ENV.NBLOCK :              FA2 C |  CHIP_ENV.NORMAL :             105E C |
 CHIP_ENV.NOUPD :              10A4 C |  CHIP_ENV.NSKIP :               F99 C |
 CHIP_ENV.SILNC_3 :            105A C |  CHIP_ENV.VEDLP :              102C C |
 CHIP_ENV.VLMUCH :             1090 C |  CHIP_ENV.VLOOP :               F59 C |
 CHIP_ENV.VONLY :              1086 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - | *COMM1 :                         21 - |
 COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
 COMM6 :                         26 - | *COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   1700 C |
 COMMZROMBLK :                   81 C |  COMMZWRITE :                    80 C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFF9800 - |
 CONTROLLER_2 :    FFFFFFFFFFFF9810 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - | *CSCRN0_E :                    3656 C |
*CSCRN0_S :                    2FCC C |  CURRTICKBITS :                  2E C |
*CYCLE :                         32 - | *DACINS_SNARE_1 :             13444 C |
 DACINS_SNARE_1.END :         1456E C |  DACINS_SNARE_1.START :       1344A C |
*DACINS_TESTINS :             1456E C |  DACINS_TESTINS.END :         22C74 C |
 DACINS_TESTINS.START :       14574 C | *DACINS_WEGOT_CRASH :         10000 C |
 DACINS_WEGOT_CRASH.END :     12CCA C |  DACINS_WEGOT_CRASH.START :   10006 C |
*DACINS_WEGOT_KICK :          12CCA C |  DACINS_WEGOT_KICK.END :      13444 C |
 DACINS_WEGOT_KICK.START :    12CD0 C |  DAC_FILL :                      20 C |
 DAC_FIRSTFILL :               112D C |  DAC_ME :                         8 C |
 DAC_OFF :                     10E4 C |  DAC_ON :                      10CF C |
 DAC_PLAY :                    10F9 C |  DAC_REFILL :                  112D C |
 DAC_REFILL.DACFILL_END :      11EC C |  DAC_REFILL.DACFILL_LOOP :     11A5 C |
 DAC_REFILL.DACFILL_RET :      11EF C |  DAC_REFILL.DAC_OVER :         117B C |
*DATE :                   8/21/2023 - |  DDACCNTR :                      33 C |
 DDACFIFOMID :                   2F C |  DDACPNTR :                      30 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      87 C |
 DRV_LOOP.CMND_0 :              12F C |  DRV_LOOP.CMND_1 :              132 C |
 DRV_LOOP.CMND_2 :              14F C |  DRV_LOOP.CMND_8 :              16C C |
 DRV_LOOP.CMND_C :              18E C |  DRV_LOOP.FOUND :               1CC C |
 DRV_LOOP.GETCBYTEL :            F2 C |  DRV_LOOP.GRAB_ARG :             F0 C |
 DRV_LOOP.LIST :                10F C |  DRV_LOOP.NEITHER :              C7 C |
 DRV_LOOP.NEXT :                1A6 C |  DRV_LOOP.NEXT_CMD :             CD C |
 DRV_LOOP.NEXT_SALL :           170 C |  DRV_LOOP.NOBEATS :              AE C |
 DRV_LOOP.NOTICKS :              A1 C |  DRV_LOOP.NOT_FND :             1C7 C |
 DRV_LOOP.NOT_ON :              186 C |  DRV_LOOP.SRCH_FRID :           19F C |
 DTBL_FROMMUL :                 6E8 C |  DTBL_FROMMUL.CHNL_ULNK :       DB8 C |
 DTBL_FROMMUL.CHNL_ULNKCUT :    DC7 C |  DTBL_FROMMUL.CHNL_ULNKOFF :    DB6 C |
 DTBL_FROMMUL.DAC_CUT :         946 C |  DTBL_FROMMUL.DAC_INS :         BCA C |
 DTBL_FROMMUL.DAC_OFF :         94C C |  DTBL_FROMMUL.DAC_PITCH :       94F C |
 DTBL_FROMMUL.D_CONT :          AB3 C |  DTBL_FROMMUL.EFFC :            A20 C |
 DTBL_FROMMUL.EFFC_D :          A3B C |  DTBL_FROMMUL.EFFC_E :          A7E C |
 DTBL_FROMMUL.EFFC_F :          A93 C |  DTBL_FROMMUL.EFFC_X :          AB4 C |
 DTBL_FROMMUL.FINE_DOWN :       A56 C |  DTBL_FROMMUL.FINE_UP :         A6A C |
 DTBL_FROMMUL.FMSPC_SET :       885 C |  DTBL_FROMMUL.FM_CINDX :        D7A C |
 DTBL_FROMMUL.FM_CUT :          916 C |  DTBL_FROMMUL.FM_HASVOL :       C6E C |
 DTBL_FROMMUL.FM_INS :          B49 C |  DTBL_FROMMUL.FM_KEYOFF :       CD2 C |
 DTBL_FROMMUL.FM_OFF :          910 C |  DTBL_FROMMUL.FM_PANLIST :      ADD C |
 DTBL_FROMMUL.FM_SETFREQ :      CF1 C |  DTBL_FROMMUL.FM_SETRLIST :     BBA C |
 DTBL_FROMMUL.FM_TLOFF :        CDA C |  DTBL_FROMMUL.FM_WRTALPAN :     D82 C |
 DTBL_FROMMUL.FM_WRTLVOL :      D08 C |  DTBL_FROMMUL.FND_OCT :         CBF C |
 DTBL_FROMMUL.FROM_PSGN :       7CA C |  DTBL_FROMMUL.GET_OCT :         CAF C |
 DTBL_FROMMUL.INST :            AEE C | *DTBL_FROMMUL.INVL_INS :        B0C C |
 DTBL_FROMMUL.KYCUT_PSG :       81C C |  DTBL_FROMMUL.KYCUT_PSGN :      817 C |
 DTBL_FROMMUL.KYOFF_PSG :       80C C |  DTBL_FROMMUL.KYOFF_PSGN :      807 C |
 DTBL_FROMMUL.LINKED :          745 C |  DTBL_FROMMUL.MK_DAC :          91F C |
 DTBL_FROMMUL.MK_FM :           827 C |  DTBL_FROMMUL.MK_FMSPC :        899 C |
 DTBL_FROMMUL.MK_LIST :         783 C |  DTBL_FROMMUL.MK_PSG :          7B1 C |
 DTBL_FROMMUL.MK_PSGN :         793 C |  DTBL_FROMMUL.MK_PWM :          975 C |
 DTBL_FROMMUL.NEW_ROMDAT :      B7D C |  DTBL_FROMMUL.NOFM_NOTE :       85C C |
 DTBL_FROMMUL.NORM_DOWN :       A54 C |  DTBL_FROMMUL.NORM_UP :         A6C C |
 DTBL_FROMMUL.NOTE :            C64 C |  DTBL_FROMMUL.NOT_DAC :         859 C |
 DTBL_FROMMUL.NOT_DSPC :        850 C |  DTBL_FROMMUL.NO_LFO :          DB5 C |
 DTBL_FROMMUL.N_FM :            CA5 C |  DTBL_FROMMUL.N_INDX :          C91 C |
 DTBL_FROMMUL.N_PSGN :          CA0 C |  DTBL_FROMMUL.N_STFREQ :        C92 C |
 DTBL_FROMMUL.PN_INS :          B0D C |  DTBL_FROMMUL.PSG_KEYON :       7F1 C |
 DTBL_FROMMUL.PS_INS :          B13 C |  DTBL_FROMMUL.PWM_CUT :         A11 C |
 DTBL_FROMMUL.PWM_INS :         C21 C |  DTBL_FROMMUL.PWM_OFF :         A02 C |
 DTBL_FROMMUL.PWV_MUCH :        9FE C |  DTBL_FROMMUL.PW_EFFC :         99F C |
 DTBL_FROMMUL.PW_NOTE :         9A6 C |  DTBL_FROMMUL.PW_SEND :         9AB C |
 DTBL_FROMMUL.PW_SETUP :        9CF C |  DTBL_FROMMUL.RCYL_COM :        739 C |
 DTBL_FROMMUL.RES_PAN :         AD3 C |  DTBL_FROMMUL.SAME_PATCH :      BB5 C |
 DTBL_FROMMUL.SAVE_ARG :        AA8 C |  DTBL_FROMMUL.SILN_DAC :        726 C |
 DTBL_FROMMUL.SILN_FM :         729 C |  DTBL_FROMMUL.SILN_PSG :        71F C |
 DTBL_FROMMUL.SILN_PSG_N :      71B C |  DTBL_FROMMUL.SILN_PWM :        72F C |
 DTBL_FROMMUL.TL_DOWN :         CE4 C |  DTBL_FROMMUL.VMUCH :           7FD C |
 DTBL_FROMMUL.VOLU :            AE5 C |  DTBL_FROMMUL.VOL_DVLD :        A7A C |
 DTBL_FROMMUL.WRITE_TL :        D6D C |  DTBL_MULTI :                   6D1 C |
 DTBL_SINGL :                   6E7 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
 EMILIE_MKSPRITE :             3492 C |  EMILIE_MKSPRITE.HIDEFUJI :    3536 C |
 EMILIE_MKSPRITE.MIDSHK :      34F4 C | *EMILIE_MKSPRITE.NO_UPD :      3534 C |
 EMILIE_MKSPRITE.NO_UPDGFX :   34D6 C |  EMILIE_MOVE :                 3414 C |
 EMILIE_MOVE.EXIMUCH :         3468 C |  EMILIE_MOVE.MOVE_IT :         3470 C |
 EMILIE_MOVE.REVERSX :         3484 C |  EMILIE_MOVE.SAME_X :          3490 C |
 EMILIE_MOVE.TOOMUCH :         3462 C |  EMU :                            0 - |
*EXTR_3 :                         A C | *EXTR_4 :                         C C |
*EXTR_5 :                         E C |  EX_COMM :                      DDA C |
*FALSE :                          0 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
*FM :                            80 - |  FMCACH_1 :                    1557 C |
 FMCACH_2 :                    157F C |  FMCACH_3 :                    15A7 C |
 FMCACH_4 :                    15CF C |  FMCACH_5 :                    15F7 C |
 FMCACH_6 :                    161F C |  FMCACH_LIST :                 13ED C |
 FMFREQ_LIST :                 11F3 C | *FMINS_AMBIENT_3 :             707D C |
*FMINS_AMBIENT_DARK :          703D C | *FMINS_AMBIENT_SPOOK :         705D C |
*FMINS_BANJO_PUY :             70FD C | *FMINS_BASS_1 :                6EBD C |
*FMINS_BASS_2 :                6EDD C | *FMINS_BASS_4 :                6CFD C |
 FMINS_BASS_8 :                6D1D C | *FMINS_BASS_CALM :             6D7D C |
*FMINS_BASS_CLUB :             6D5D C | *FMINS_BASS_DONNA :            6EFD C |
*FMINS_BASS_DUCK :             6F9D C | *FMINS_BASS_GROOVE :           6F1D C |
*FMINS_BASS_GROOVE_2 :         6F3D C | *FMINS_BASS_GROOVE_GEM :       6F5D C |
*FMINS_BASS_ITALO :            6F7D C | *FMINS_BASS_OIL :              6DFD C |
 FMINS_BRASS_EUR :             6DDD C | *FMINS_BRASS_PUY :             70BD C |
*FMINS_CLOSEDHAT :             6E7D C | *FMINS_DING_1 :                713D C |
*FMINS_DING_BASEBALL :         6E3D C |  FMINS_DING_TOY :              709D C |
*FMINS_DRUMKICK_GEM :          6E5D C | *FMINS_FLAUTE_CAVE :           70DD C |
 FMINS_FM3_EXPLOSION :         6C5D C | *FMINS_HBEAT_TOM :             717D C |
*FMINS_MARIMBA :               701D C | *FMINS_ORGAN_ITO :             6E1D C |
*FMINS_PIANOM1 :               6E9D C | *FMINS_PIANO_AQUA :            6FBD C |
*FMINS_PSYNTH_PLUS :           711D C |  FMINS_SP_CLOSEDHAT :          6CAD C |
*FMINS_SP_COWBELL :            6CD5 C |  FMINS_SP_OPENHAT :            6C85 C |
*FMINS_SYNTH_PLUS :            6D3D C | *FMINS_TROMBONE_GEM :          715D C |
*FMINS_TRUMPET_1 :             6D9D C | *FMINS_TRUMPET_2 :             6FDD C |
*FMINS_TRUMPET_CARNIVAL :      6DBD C | *FMINS_TRUMPET_PUY :           6FFD C |
 FMSPECIAL :                   16EB C |  FM_AUTOREG :                  10B0 C |
 FM_SEND_1 :                   10B9 C |  FM_SEND_2 :                   10C4 C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - | *GEMACD_REPORT :               3656 C |
*GEMACD_REPORT_E :             719D C |  GEMADMAPAUSE :                 2FC C |
 GEMADMAPAUSEROM :              300 C |  GEMADMARESUME :                2FE C |
 GEMADMARESUMEROM :             302 C |  GEMAPLAYFROMBLK :              324 C |
 GEMAPLAYTRACK :                310 C | *GEMASETBEATS :                 34C C |
 GEMASFX_ALL :                 36D6 C |  GEMASFX_ALL.BLK :             36E2 C |
 GEMASFX_ALL.INS :             373C C |  GEMASFX_ALL.PAT :             36E6 C |
*GEMASTOPALL :                  34A C | *GEMASTOPTRACK :                338 C |
*GEMATEST :                     306 C |  GEMATRK_TEST_0 :              3754 C |
 GEMATRK_TEST_0.BLK :          3760 C |  GEMATRK_TEST_0.INS :          377B C |
 GEMATRK_TEST_0.PAT :          3763 C |  GEMATRK_TEST_1 :              3783 C |
 GEMATRK_TEST_1.BLK :          378F C |  GEMATRK_TEST_1.INS :          6BED C |
 GEMATRK_TEST_1.PAT :          379E C |  GEMA_INIT :                    DDD C |
 GEMA_INIT.END_SETUP :          E83 C |  GEMA_INIT.SETUP_LIST :         E38 C |
 GEMA_INIT.ST_COPY :            E57 C |  GEMA_MASTERLIST :             3656 C |
 GET_ROMTRCKS :                 4D1 C |  GET_TICK :                     E8B C |
 GET_TICK.CTNOTICK :            EA8 C |  GLBL_LASTORG :                2FCC - |
 GLBL_LASTPC :                 2FCC - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   16EC C |
 HEADEROUT_E :                 16F8 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :                103E C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INIT_ROMTRCKS :                4D9 C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
*INTMASK :                        1 - | *JOYA :                          40 - |
*JOYB :                          10 - | *JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - | *LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :                 3B6 C |  LOC_3410 :                   4B312 C |
 LOC_3440 :                   4B342 C |  LOC_345E :                   4B360 C |
 LOC_3468 :                   4B36A C |  LOC_3472 :                   4B374 C |
*MACEXP :                         7 - | *MAPMD_TEST :                  73BC C |
 MAP_TESTBOARD :               7C7C C |  MARS :                           0 - |
 MARSBLOCK :                     82 C |  MARSCD :                         0 - |
 MARSUPD :                       3F C | *MARS_RAMDATA :               4B300 C |
*MARS_RAMDATA_E :             4B300 C |  MAX_BLOCKS :                    18 - |
 MAX_HEADS :                      F - |  MAX_INS :                        F - |
 MAX_MDDMATSK :                  10 - |  MAX_MDGLOBAL :                 800 - |
*MAX_MDOBJ :                     10 - |  MAX_MDOTHER :                 1000 - |
 MAX_MDSYSTEM :                 500 - |  MAX_MDVIDEO :                 2000 - |
 MAX_RAMSNDDATA :              4000 - |  MAX_RCACH :                     40 - |
 MAX_SCRNBUFF :                2800 - |  MAX_SYSCODE :                 1800 - |
 MAX_TBLSIZE :                   10 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    11 - | *MAX_TSTENTRY :                   5 - |
*MAX_TSTTRKS :                    3 - |  MAX_USERCODE :                2000 - |
 MCD :                            0 - |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - | *MCD_DBANK0 :                  719D C |
 MCD_DCOMM_M :                   10 - |  MCD_DCOMM_S :                   20 - |
*MCD_GEMATRKS :                3656 C | *MCD_HINT :                       6 - |
*MCD_MEMORY :                     3 - | *MDBANK0 :                     719D C |
*MDBANK0_E :                   853C C |  MDSYS_SINEDATA :               E5C C |
 MD_BANK_SRAM :              A130F1 - | *MD_JUMPCODE :                 10A6 C |
*MD_JUMPCODE_E :               10CC C |  MD_READMODES :                10A6 C |
 MD_READMODES.PICK_BOOT :      10BC C |  MD_SCREEN00 :                 2FCC C |
*MD_SCREEN00_E :               3656 C | *MD_SYSCODE :                   264 C |
*MD_SYSCODE_E :                10A6 C |  MODE :                          18 - |
 MODE_INIT :                    FA6 C |  MODE_INIT.CLR :                FB6 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        6 C |
 MOUSE_Y :                        8 C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             13FB C |  NIKONA_SETMSTRLIST :          142D C |
 ON_HOLD :                        2 C |  ON_PRESS :                       4 C |
*PACKING :                        0 - | *PADDING :                        0 - |
*PADDINGSOFAR :                   0 - |  PAD_ID :                         0 C |
 PAD_VER :                        1 C | *PALMARS_TEST :                719E C |
*PALMD_TEST :                  739C C |  PAL_EMI :                     362C C |
 PAL_TESTBOARD :               3642 C |  PARP :                          34 - |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          22C C |
 PICO_ENTRY.WAIT_DMA :          240 C |  PICO_ERRADDR :                 200 C |
 PICO_ERRBUS :                  200 C |  PICO_ERRCHK :                  200 C |
 PICO_ERRILL :                  200 C |  PICO_ERROR :                   200 C |
 PICO_ERROREX :                 200 C |  PICO_ERRPRIVL :                200 C |
 PICO_ERRTRAPV :                200 C |  PICO_ERRZDIV :                 200 C |
 PICO_LINE1010 :                200 C |  PICO_LINE1111 :                200 C |
 PICO_PCMINT :                  202 C |  PICO_TRACE :                   200 C |
 PICO_UNKINT :                  202 C |  PICO_USERINT :                 202 C |
 PLAYTHISSFX :                 326E C |  PROC_CHIPS :                   524 C |
 PSGCOM :                      167F C |  PSGFREQ_LIST :                120B C |
 PSGHATMODE :                  16EA C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
*PWCOM :                          0 - | *PWINSH :                        20 - |
*PWINSL :                        30 - | *PWINSM :                        28 - |
 PWMCOM :                      1647 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 PWOUTF :                        18 - | *PWPHL :                         10 - |
*PWPTH_V :                        8 - | *RAM_BGCAMERA :    FFFFFFFFFFFFB52C C |
 RAM_BOARDBLOCKS : FFFFFFFFFFFFB53E C |  RAM_BOARDUPD :    FFFFFFFFFFFFB528 C |
*RAM_CURRINDX :    FFFFFFFFFFFFB532 C | *RAM_CURRSELC :    FFFFFFFFFFFFB530 C |
 RAM_CURRTEMPO :   FFFFFFFFFFFFB538 C | *RAM_CURRTICKS :   FFFFFFFFFFFFB536 C |
*RAM_CURRTRACK :   FFFFFFFFFFFFB534 C |  RAM_CURRTYPE :    FFFFFFFFFFFFB52A C |
 RAM_EMIANIM :     FFFFFFFFFFFFB520 C |  RAM_EMIBLOCKX :   FFFFFFFFFFFFB51A C |
 RAM_EMIBLOCKY :   FFFFFFFFFFFFB51C C |  RAM_EMICHAR :     FFFFFFFFFFFFB51E C |
 RAM_EMIFLAGS :    FFFFFFFFFFFFB518 C |  RAM_EMIHIDE :     FFFFFFFFFFFFB524 C |
 RAM_EMIJUMPSPD :  FFFFFFFFFFFFB510 C |  RAM_EMIJUMPY :    FFFFFFFFFFFFB514 C |
 RAM_EMIMOVEX :    FFFFFFFFFFFFB508 C |  RAM_EMIMOVEY :    FFFFFFFFFFFFB50C C |
 RAM_EMIPOSX :     FFFFFFFFFFFFB500 C |  RAM_EMIPOSY :     FFFFFFFFFFFFB504 C |
 RAM_EMIUPD :      FFFFFFFFFFFFB522 C | *RAM_EXSOUNDDATA : FFFFFFFFFFFF3800 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFF8A4C C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFF8A4A C |
 RAM_FADEMARSREQ : FFFFFFFFFFFF8A48 C | *RAM_FADEMARSTMR : FFFFFFFFFFFF8A4E C |
 RAM_FADEMDDELAY : FFFFFFFFFFFF8A44 C |  RAM_FADEMDINCR :  FFFFFFFFFFFF8A42 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFF8A40 C |  RAM_FADEMDTMR :   FFFFFFFFFFFF8A46 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF8450 C |  RAM_GLBL_SCRN :   FFFFFFFFFFFFAD00 C |
 RAM_HORSCROLL :   FFFFFFFFFFFF7800 C | *RAM_INITFLUG :    FFFFFFFFFFFF9A48 C |
 RAM_INPUTDATA :   FFFFFFFFFFFF9800 C | *RAM_MDDREQ :      FFFFFFFFFFFF9D00 - |
 RAM_MDGLOBAL :    FFFFFFFFFFFFAD00 C |  RAM_MDMARSHINT :  FFFFFFFFFFFF9A52 C |
 RAM_MDMARSPALFD : FFFFFFFFFFFF81D0 C |  RAM_MDMARSVINT :  FFFFFFFFFFFF9A4C C |
 RAM_MDOTHER :     FFFFFFFFFFFF9D00 C |  RAM_MDSYSTEM :    FFFFFFFFFFFF9800 C |
 RAM_MDVIDEO :     FFFFFFFFFFFF7800 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_PALETTE :     FFFFFFFFFFFF8150 C |  RAM_PALETTEFD :   FFFFFFFFFFFF83D0 C |
*RAM_SAVEDATA :    FFFFFFFFFFFF9840 C |  RAM_SCREENBUFF :  FFFFFFFFFFFFB500 C |
*RAM_SCREENJUMP :          FFFFFE00 - |  RAM_SHAKEME :     FFFFFFFFFFFFB526 C |
*RAM_SPRDRWCNTR :  FFFFFFFFFFFF8A36 C | *RAM_SPRDRWPZ :    FFFFFFFFFFFF8456 C |
 RAM_SPRITES :     FFFFFFFFFFFF7C10 C | *RAM_SPRSHOWINDX : FFFFFFFFFFFF8A38 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDSEED : FFFFFFFFFFFF9A44 C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFF9A40 C | *RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
*RAM_USERCODE :    FFFFFFFFFFFF1800 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFF8A3A C |
 RAM_VDPDMALIST :  FFFFFFFFFFFF8070 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFF8A3C C |
*RAM_VDPEXWRITE :  FFFFFFFFFFFF8454 C |  RAM_VDPREGS :     FFFFFFFFFFFF8A50 C |
 RAM_VERSCROLL :   FFFFFFFFFFFF7BC0 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFF88B6 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFF8A3E C |  RAM_WINDOWCURR :  FFFFFFFFFFFFB53A C |
 RAM_WINDOWNEW :   FFFFFFFFFFFFB53C C | *RAM_XPOS :        FFFFFFFFFFFFB52E C |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    4B388 C |  RRT :                           14 - |
 SAMPLEHEAD :                  16FA C |  SBEATACC :                      1C C |
 SBEATPTCK :                     1E C |  SET_CHIPS :                    4FF C |
 SET_CHIPS.TRK_BUFFRS :         507 C | *SHIFT :                          2 - |
 SHOWROM :                      EAC C |  SIZEOF_INPUT :                  10 C |
*SIZEOF_MDGLBL :   FFFFFFFFFFFFAD02 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFDD00 C |
*SIZEOF_MDSYS :    FFFFFFFFFFFF9A58 C |  SIZEOF_MDVID :    FFFFFFFFFFFF8A68 C |
*SIZEOF_THISBUFF0 :                                        FFFFFFFFFFFFB562 C |
 SLV :                           10 - | *SNDLOCKZ80 :                   26A C |
 SNDLOCKZ80.WAIT :              272 C | *SNDREQCMD :                    304 C |
 SNDREQ_ENTER :                 288 C |  SNDREQ_ENTER.WAIT :            2AE C |
 SNDREQ_EXIT :                  2BE C | *SNDREQ_SADDR :                 2E6 C |
 SNDREQ_SBYTE :                 2EE C |  SNDREQ_SCMD :                  2D4 C |
*SNDREQ_SLONG :                 2E2 C |  SNDREQ_SWORD :                 2EA C |
*SNDUNLOCKZ80 :                 27E C |  SOUND_INIT :                   264 C |
 STANDBY :                        3 - |  STR_TITLE :                   3556 C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :          C38 C |  SYSTEM_DMAENTER_ROM :          C40 C |
 SYSTEM_DMAEXIT_RAM :           C3C C |  SYSTEM_DMAEXIT_ROM :           C44 C |
*SYSTEM_FADEIN :                FC4 C |  SYSTEM_FADEIN.LOOPW :          FE8 C |
*SYSTEM_FADEOUT :               FF6 C |  SYSTEM_FADEOUT.LOOPW :        101A C |
*SYSTEM_GRABRAMCODE :          1040 C |  SYSTEM_INIT :                  B30 C |
 SYSTEM_INIT.CLRINPUT :         B5C C |  SYSTEM_INPUT :                 C48 C |
 SYSTEM_INPUT.EXIT :            C76 C |  SYSTEM_INPUT.ID_03 :           C9C C |
 SYSTEM_INPUT.ID_0D :           D46 C |  SYSTEM_INPUT.INVALID :         D40 C |
 SYSTEM_INPUT.LIST :            C7C C |  SYSTEM_INPUT.OLDPAD :          DBE C |
 SYSTEM_INPUT.PICK_ID :         DC4 C |  SYSTEM_INPUT.READ :            DDA C |
 SYSTEM_INPUT.STEP_1 :          DE6 C |  SYSTEM_INPUT.STEP_2 :          DF2 C |
 SYSTEM_INPUT.THIS_ONE :        C5C C | *SYSTEM_INPUT.WAIT :            C48 C |
 SYSTEM_INPUT.X_NEG :           D0E C |  SYSTEM_INPUT.Y_NEG :           D3A C |
*SYSTEM_RANDOM :                DF4 C |  SYSTEM_RANDOM.GOOD_S :         E02 C |
 SYSTEM_RENDER :                B7E C |  SYSTEM_RENDER.WAIT_IN :        B92 C |
 SYSTEM_RENDER.WAIT_LAG :       B84 C | *SYSTEM_ROMSENDDREQ :          1042 C |
 SYSTEM_ROMSENDDREQ.L0 :       1082 C |  SYSTEM_ROMSENDDREQ.WAIT_BIT : 106E C |
 SYSTEM_ROMSENDDREQ.WAIT_BIT_E :                                       108E C |
 SYSTEM_SETINTS :               F5C C |  SYSTEM_SETINTS.NOHINT :        F7C C |
 SYSTEM_SETINTS.NOVINT :        F6C C | *SYSTEM_SINEWAVE :              E3E C |
 SYSTEM_SINEWAVE.DONT_NEG :     E5A C | *SYSTEM_SINEWAVE_COS :          E1E C |
 SYSTEM_SINEWAVE_COS.DONT_NEG : E38 C | *SYSTEM_SRAMINIT :              F7E C |
 SYSTEM_SRAMINIT.INITSAVE :     F92 C | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 544 C |  TBLBUFF_READ.CHK_PSG :         608 C |
 TBLBUFF_READ.CLRFULL :         6C7 C |  TBLBUFF_READ.DO_CHIP :         57A C |
 TBLBUFF_READ.DO_NEWCHIP :      633 C |  TBLBUFF_READ.GRAB_LINK :       5B0 C |
 TBLBUFF_READ.INVLDL :          5F1 C |  TBLBUFF_READ.L_HIPRIO :        67C C |
 TBLBUFF_READ.NEW_CHIP :        634 C |  TBLBUFF_READ.NEW_LINK :        679 C |
 TBLBUFF_READ.NEW_LINK_O :      679 C |  TBLBUFF_READ.NEW_LINK_Z :      675 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    66B C |  TBLBUFF_READ.NEXT_CHNL :       567 C |
 TBLBUFF_READ.NEXT_PRIO :       656 C |  TBLBUFF_READ.PASS_2 :          654 C |
 TBLBUFF_READ.PICK_TBL :        69F C |  TBLBUFF_READ.REFILL :          630 C |
 TBLBUFF_READ.REROLL :          5FA C |  TBLBUFF_READ.RESET_LINK :      6B9 C |
 TBLBUFF_READ.RNOT_PSG :        62E C |  TBLBUFF_READ.SET_ASFULL :      69C C |
 TBLBUFF_READ.SINGL_FREE :      68A C |  TBLBUFF_READ.SINGL_LINK :      620 C |
*TBLBUFF_READ.SNGL_SPRIO :      69B C |  TBLBUFF_READ.SRCH_FREE :       643 C |
 TBLBUFF_READ.SRCH_LINK :       5D7 C |  TBLBUFF_READ.SRCH_LLOOP :      5E1 C |
 TBLBUFF_READ.TRACK_CONT :      55A C |  TBLFM :                       1483 C |
 TBLFM3 :                      14C3 C |  TBLFM6 :                      14D3 C |
 TBLLIST :                     1431 C |  TBLPSG :                      1441 C |
 TBLPSGN :                     1473 C |  TBLPWM :                      14E5 C |
*TEST_WAVE :                  22C74 C | *TEST_WAVE_E :                31374 C |
 TH :                      20000000 - | *THISCODE_TOP :                2FCC C |
 THISCODE_TOP.AFTER :          31CA C |  THISCODE_TOP.LIST :           3112 C |
 THISCODE_TOP.LOCKCONTRL :     326C C |  THISCODE_TOP.LOOP :           30CA C |
 THISCODE_TOP.MIDSHK :         30FE C |  THISCODE_TOP.MODE0 :          311E C |
 THISCODE_TOP.MODE0_LOOP :     3136 C |  THISCODE_TOP.NOZ_DOWN :       31F2 C |
 THISCODE_TOP.NOZ_L :          326A C |  THISCODE_TOP.NOZ_R :          3242 C |
 THISCODE_TOP.NOZ_UP :         321A C |  THISCODE_TOP.NO_MODE0 :       314E C |
 THISCODE_TOP.NO_SHAKE :       3174 C |  TICKCNT :                     16E9 C |
 TICKFLAG :                    16E8 C |  TICKSPSET :                   16E7 C |
*TIME :                    11:31:06 - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    493 C |
 TRACK_OUT.CLRFE :              4A4 C |  TRACK_OUT.NOCHIP :             4C7 C |
 TRANSFERROM :                  ECC C |  TRANSFERROM.DOUBLE :           EEB C |
 TRANSFERROM.TRANSFER :         F0F C |  TRANSFERROM.X68KLAST :         F2D C |
 TRANSFERROM.X68KLOOP :         F19 C |  TRANSFERROM.X68KLPWT :         F3B C |
 TRANSFERROM.X68KNOCARRY :      F09 C |  TRANSFERROM.X68KPWTLP :        F40 C |
 TRKBLKS_0 :                   1B45 C |  TRKBLKS_1 :                   1B5D C |
 TRKBLKS_2 :                   1B75 C |  TRKBUFF_0 :                   1701 C |
 TRKBUFF_1 :                   1731 C |  TRKBUFF_2 :                   1761 C |
 TRKCACH_0 :                   1E00 C |  TRKCACH_1 :                   1E40 C |
 TRKCACH_2 :                   1E80 C | *TRKCACH_3 :                   1EC0 C |
 TRKCHNL_0 :                   1791 C |  TRKCHNL_1 :                   1819 C |
 TRKCHNL_2 :                   18A1 C |  TRKHDRS_0 :                   1929 C |
 TRKHDRS_1 :                   1965 C |  TRKHDRS_2 :                   19A1 C |
 TRKINSD_0 :                   19DD C |  TRKINSD_1 :                   1A55 C |
 TRKINSD_2 :                   1ACD C |  TRKLISTCACH :                 16BB C |
 TRKLISTPAGE :                   3E C | *TRK_BANKBLK :                   16 - |
*TRK_BANKHEAD :                  17 - | *TRK_BANKINS :                   15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACHHALF :                   E - |
*TRK_CACHINC :                    F - |  TRK_CHNCACH :                   2E - |
 TRK_CHNCBLK :                   28 - |  TRK_CHNCHEAD :                  2A - |
 TRK_CHNCINS :                   2C - |  TRK_CHNLIST :                   26 - |
 TRK_CURRBLK :                   12 - |  TRK_INSTR :                      8 - |
 TRK_MAXBLKS :                   1D - |  TRK_MAXCHNLS :                  1C - |
 TRK_MAXHDRS :                   1E - |  TRK_MAXINS :                    1F - |
*TRK_PANNING :                   13 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMCPATT :                  20 - |  TRK_ROMPATT :                   23 - |
 TRK_ROWPAUSE :                  10 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   11 - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    1CF C |
 UPD_TRACK.DECROW :             265 C |  UPD_TRACK.DECROW_E :           268 C |
 UPD_TRACK.EFFECT_FILL :        3DB C |  UPD_TRACK.EFF_A :              303 C |
 UPD_TRACK.EFF_B :              315 C |  UPD_TRACK.EFF_C :              32B C |
 UPD_TRACK.EXIT :               259 C |  UPD_TRACK.FIRST_FILL :         3E2 C |
 UPD_TRACK.GRAB_RHEAD :         47F C |  UPD_TRACK.HAS_NOTE :           270 C |
 UPD_TRACK.INC_CPATT :          32E C |  UPD_TRACK.NEXT_NOTE :          249 C |
 UPD_TRACK.NO_EFF :             2CF C |  UPD_TRACK.NO_GLBL :            40D C |
 UPD_TRACK.NO_INS :             2B1 C |  UPD_TRACK.NO_NOTE :            2A6 C |
 UPD_TRACK.NO_VOL :             2BC C |  UPD_TRACK.OLD_TYPE :           29A C |
 UPD_TRACK.RAN_OUT :            33C C |  UPD_TRACK.READ_TRACK :         1F0 C |
 UPD_TRACK.ROW_ACTIVE :         242 C |  UPD_TRACK.SET_TRACK :          366 C |
 UPD_TRACK.SFXMD :              209 C |  UPD_TRACK.TRACK_END :          3CA C |
 UPD_TRACK.TRK_BUFFRS :         1D4 C |  VARNULLVRAM :                  7FF - |
 VARPRINTPAL :                    3 - |  VARPRINTVRAM :                 580 - |
*VAR_MOVESPD :                 4000 - | *VBLK :                          80 - |
*VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_CLEAR :                  3EA C | *VIDEO_CLEARSCREEN :            3EA C |
 VIDEO_CLEARSCREEN.PNEXT :      468 C |  VIDEO_CLEARSCREEN.SNEXT :      454 C |
 VIDEO_CLEARSCREEN.XNEXT :      430 C |  VIDEO_CLEARSCREEN.YNEXT :      442 C |
*VIDEO_COPY :                   9A4 C |  VIDEO_COPY.DMAW :              9B8 C |
 VIDEO_COPY.DMAWE :             A10 C |  VIDEO_DMABLAST :               ACA C |
 VIDEO_DMABLAST.END :           B18 C |  VIDEO_DMABLAST.EXIT :          B26 C |
 VIDEO_DMABLAST.NEXT :          AF2 C |  VIDEO_DMAMKENTRY :             8BC C |
 VIDEO_DOPALFADE :              772 C |  VIDEO_DOPALFADE.ACTIVE :       78E C |
 VIDEO_DOPALFADE.FADE_DONE :    796 C |  VIDEO_DOPALFADE.FADE_IN :      798 C |
 VIDEO_DOPALFADE.FADE_LIST :    790 C |  VIDEO_DOPALFADE.FADE_OUT :     83C C |
 VIDEO_DOPALFADE.NO_BLU :       814 C |  VIDEO_DOPALFADE.NO_BLU_O :     898 C |
 VIDEO_DOPALFADE.NO_FNSH :      82C C |  VIDEO_DOPALFADE.NO_FNSH_O :    8AC C |
 VIDEO_DOPALFADE.NO_GRN :       7F4 C |  VIDEO_DOPALFADE.NO_GRN_O :     880 C |
 VIDEO_DOPALFADE.NO_MOVE :      83A C |  VIDEO_DOPALFADE.NO_MOVE_O :    8BA C |
 VIDEO_DOPALFADE.NO_RED :       7D4 C |  VIDEO_DOPALFADE.NO_RED_O :     868 C |
 VIDEO_DOPALFADE.NXT_PAL :      7B2 C |  VIDEO_DOPALFADE.NXT_PAL_O :    850 C |
 VIDEO_FADEPAL :                744 C | *VIDEO_FADEPAL_MARS :           B2C C |
 VIDEO_FILL :                   92E C |  VIDEO_FILL.DMAW :              942 C |
 VIDEO_FILL.DMAWE :             98C C |  VIDEO_INIT :                   360 C |
 VIDEO_INIT.CLRRAM :            36C C | *VIDEO_INIT.EXIT :              396 C |
 VIDEO_INIT.LOOP :              388 C |  VIDEO_LOADART :                A28 C |
 VIDEO_LOADART.FROM_RAM :       AB6 C |  VIDEO_LOADMAP :                472 C |
 VIDEO_LOADMAP.CONT :           498 C |  VIDEO_LOADMAP.NODBLE :         4B6 C |
 VIDEO_LOADMAP.NONULL :         496 C |  VIDEO_LOADMAP.XLOOP :          488 C |
 VIDEO_LOADMAP.YLOOP :          47E C | *VIDEO_LOADMAP_VERT :           4C8 C |
 VIDEO_LOADMAP_VERT.CONT :      4FA C |  VIDEO_LOADMAP_VERT.NODBLE :    51A C |
 VIDEO_LOADMAP_VERT.NONULL :    4F8 C | *VIDEO_LOADMAP_VERT.OUTDBL :    524 C |
 VIDEO_LOADMAP_VERT.XLOOP :     4D6 C |  VIDEO_LOADMAP_VERT.YLOOP :     4E6 C |
 VIDEO_LOADPAL :                74E C |  VIDEO_MARSPALFADE :            B2E C |
 VIDEO_MARS_GFXMODE :           B28 C | *VIDEO_MARS_WAITFRAME :         B2A C |
 VIDEO_PRINT :                  564 C |  VIDEO_PRINT.DONIBL :           67E C |
 VIDEO_PRINT.EXIT :             5EE C |  VIDEO_PRINT.ISBYTE :           5B8 C |
 VIDEO_PRINT.ISLONG :           5DC C |  VIDEO_PRINT.ISWORD :           5CA C |
 VIDEO_PRINT.LNGLOOP :          66E C |  VIDEO_PRINT.LOOP :             578 C |
 VIDEO_PRINT.LOWR :             68E C |  VIDEO_PRINT.NEWJUMP :          572 C |
 VIDEO_PRINT.NEXT :             59A C |  VIDEO_PRINT.NEXTV :            5F8 C |
 VIDEO_PRINT.NOTHING :          69A C |  VIDEO_PRINT.PUTTEXT :          58C C |
 VIDEO_PRINT.SPECIAL :          59E C |  VIDEO_PRINT.VBYTE :            62A C |
 VIDEO_PRINT.VLONG :            676 C |  VIDEO_PRINT.VWORD :            64C C |
 VIDEO_PRINTINIT :              534 C | *VIDEO_PRINTPAL :               552 C |
 VIDEO_RUNFADE :                732 C |  VIDEO_UPDATE :                 396 C |
*VIDEO_UPDATE.EXIT :            3B4 C |  VIDEO_UPDATE.LOOP :            3A8 C |
 VIDMD_PAL :                    752 C |  VIDMD_PAL.LOOP :               76A C |
 VID_PICKLAYER :                69C C |  VID_PICKLAYER.GOLYR :          6E6 C |
 VID_PICKLAYER.NOWD :           6D0 C |  VID_PICKLAYER.PLAWND :         6C2 C |
 VID_PICKLAYER.THISSZ :         706 C |  VID_PICKLAYER.THISSZJ :        72E C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                1028 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  16E6 C |
 WAVE_LEN :                    16DE C |  WAVE_LOOP :                   16E1 C |
 WAVE_PITCH :                  16E4 C |  WAVE_START :                  16DB C |
 WAVFREQ_LIST :                12FD C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
*Z80_CODE :                    10CC C | *Z80_CODE_END :                2FCC C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      83 C |
*Z80_RESET :                 A11200 - |  Z80_TOP :                     10CC C |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      80 - | *ZDRVMARSBLK :                   82 - |
*ZDRVROMBLK :                    81 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_VDPREG :                 20004100 - |

   1051 symbols
    327 unused symbols

 AS V1.42 Beta [Bld 118] - source file main.asm - page 3 - 8/21/2023 11:31:06


  defined macros:
  ---------------

ENDSTRUCT                             | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ISO_FILE                              | ISO_SETFS                            
ORG                                   | REPORT                               
ROMPAD                                | STRUCT                               
VDP_SHOWME                            |

     19 macros

 AS V1.42 Beta [Bld 118] - source file main.asm - page 4 - 8/21/2023 11:31:06


  defined functions:
  ------------------

NOTZ80                                | CELL_VRAM                            
LOCATE                                | MAPSIZE                              

 AS V1.42 Beta [Bld 118] - source file main.asm - page 5 - 8/21/2023 11:31:06


  codepages:
  ----------

STANDARD (0 changed characters)


0.08 seconds assembly time

  11003 lines source file
  11687 lines incl. macro expansions
      4 passes
      0 errors
      0 warnings
