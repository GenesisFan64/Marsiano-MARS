 AS V1.42 Beta [Bld 118] - source file main.asm - page 1 - 8/2/2023 1:44:46


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; MARSIANO ENGINE
       4/       0 :                     ;
       5/       0 :                     ; A game engine that can be cross-ported to:
       6/       0 :                     ; Sega Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ; +-----------------------------------------------------------------+
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; USER SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     ; --------------------------------------------------------
      15/       0 :                     ; 68000 RAM SIZES
      16/       0 :                     ;
      17/       0 :                     ; MAX_SysCode, MAX_UserCode and MAX_RamSndData
      18/       0 :                     ; are used only in Sega CD, Sega 32X and
      19/       0 :                     ; Sega CD32X
      20/       0 :                     ; For the stock Genesis (OR Pico) these sections
      21/       0 :                     ; are free to use ONLY if you want your game
      22/       0 :                     ; to be playable ONLY on stock Genesis or Pico.
      23/       0 :                     ;
      24/       0 :                     ; Starting from MAX_MdGlobal it the RAM should be
      25/       0 :                     ; located after $FF8000
      26/       0 :                     ;
      27/       0 :                     ; ** MAKE SURE IT DOESN'T REACH $FFFC00 IF YOU WANT TO
      28/       0 :                     ; RUN THIS ON SEGA CD AND CD32X **
      29/       0 :                     ; $FFFD00 is reserved for SegaCD/SegaCD32X, the
      30/       0 :                     ; STACK a7 point starts from here also.
      31/       0 :                     ; --------------------------------------------------------
      32/       0 :                     
      33/       0 : =$1800              MAX_SysCode	equ $1800	; ** CD/32X/CD32X ONLY
      34/       0 : =$2000              MAX_UserCode	equ $2000	; ** CD/32X/CD32X ONLY
      35/       0 : =$4000              MAX_RamSndData	equ $4000	; ** CD/32X/CD32X ONLY
      36/       0 : =$800               MAX_MdGlobal	equ $0800	; USER Global variables
      37/       0 : =$2800              MAX_ScrnBuff	equ $2800	; RAM section for Current screen
      38/       0 : =$2000              MAX_MdVideo	equ $2000	;
      39/       0 : =$500               MAX_MdSystem	equ $0500	;
      40/       0 : =$1000              MAX_MdOther	equ $1000	; System-specific stuff goes here
      41/       0 :                     
      42/       0 :                     ; ====================================================================
      43/       0 :                     
      44/       0 :                     		!org 0				; Start at 0
      45/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later.
      46/       0 :                     		padding		off		; Dont pad dc.b
      47/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
      48/       0 :                     		supmode 	on 		; Supervisor mode 68k
      49/       0 :                     		dottedstructs	off		; If needed
      50/       0 :                     		page 		0
      51/       0 :                     
      52/       0 :                     ; ====================================================================
      53/       0 :                     ; ----------------------------------------------------------------
      54/       0 :                     ; Includes
      55/       0 :                     ; ----------------------------------------------------------------
      56/       0 :                     
      57/       0 :                     		include	"macros.asm"			; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ---------------------------------------------
(1)    8/       0 :                     ; Functions
(1)    9/       0 :                     ; ---------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   12/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   13/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   14/       0 :                     
(1)   15/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   16/       0 :                     
(1)   17/       0 :                     ; ====================================================================
(1)   18/       0 :                     ; ---------------------------------------------
(1)   19/       0 :                     ; Macros
(1)   20/       0 :                     ; ---------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                 paddingSoFar set 0
(1)   23/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   24/       0 :                     
(1)   25/       0 :                     ; -------------------------------------
(1)   26/       0 :                     ; Reserve memory section
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; NOTE: This doesn't work for Z80
(1)   29/       0 :                     ; -------------------------------------
(1)   30/       0 :                     
(1)   31/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   32/       0 :                     GLBL_LASTPC	set *
(1)   33/       0 :                     		dephase
(1)   34/       0 :                     GLBL_LASTORG	set *
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     		endm
(1)   37/       0 :                     		
(1)   38/       0 :                     ; -------------------------------------
(1)   39/       0 :                     ; Finish struct
(1)   40/       0 :                     ; -------------------------------------
(1)   41/       0 :                     
(1)   42/       0 :                     endstruct	macro				; Then finish the custom struct.
(1)   43/       0 :                     		!org GLBL_LASTORG
(1)   44/       0 :                     		phase GLBL_LASTPC
(1)   45/       0 :                     		endm
(1)   46/       0 :                     
(1)   47/       0 :                     ; -------------------------------------
(1)   48/       0 :                     ; Report RAM usage
(1)   49/       0 :                     ; -------------------------------------
(1)   50/       0 :                     
(1)   51/       0 :                     report		macro text,dis,dat
(1)   52/       0 :                     	if MOMPASS == 2
(1)   53/       0 :                     		if dat == -1
(1)   54/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   55/       0 :                     		else
(1)   56/       0 :                     			if dis > dat
(1)   57/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   58/       0 :                     			else
(1)   59/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   60/       0 :                     			endif
(1)   61/       0 :                     		endif
(1)   62/       0 :                     	endif
(1)   63/       0 :                     		endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; -------------------------------------
(1)   66/       0 :                     ; Same thing but only report
(1)   67/       0 :                     ; error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" SPACE (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; VDP color debug
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     vdp_showme	macro this
(1)   89/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   90/       0 :                     		move.w	#this,(vdp_data).l
(1)   91/       0 :                     		endm
(1)   92/       0 :                     
(1)   93/       0 :                     ; -------------------------------------
(1)   94/       0 :                     ; Custom ORG-filler
(1)   95/       0 :                     ;
(1)   96/       0 :                     ; (from s2disasm)
(1)   97/       0 :                     ; -------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     org macro address
(1)  100/       0 :                     	if notZ80(MOMCPU)
(1)  101/       0 :                     		if address < *
(1)  102/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)  103/       0 :                     		elseif address > *
(1)  104/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)  105/       0 :                     			!org address
(1)  106/       0 :                     		endif
(1)  107/       0 :                     	else
(1)  108/       0 :                     		if address < $
(1)  109/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)  110/       0 :                     		else
(1)  111/       0 :                     			while address > $
(1)  112/       0 :                     				db 0
(1)  113/       0 :                     			endm
(1)  114/       0 :                     		endif
(1)  115/       0 :                     	endif
(1)  116/       0 :                         endm
(1)  117/       0 :                     
(1)  118/       0 :                     ; -------------------------------------
(1)  119/       0 :                     ; ZERO Fill padding
(1)  120/       0 :                     ; -------------------------------------
(1)  121/       0 :                     
(1)  122/       0 :                     rompad		macro address			; Zero fill
(1)  123/       0 :                     diff := address - *
(1)  124/       0 :                     		if diff < 0
(1)  125/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)  126/       0 :                     		else
(1)  127/       0 :                     			while diff > 1024
(1)  128/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)  129/       0 :                     				dc.b [1024]0
(1)  130/       0 :                     diff := diff - 1024
(1)  131/       0 :                     			endm
(1)  132/       0 :                     			dc.b [diff]0
(1)  133/       0 :                     		endif
(1)  134/       0 :                     	endm
(1)  135/       0 :                     
(1)  136/       0 :                     ; ====================================================================
(1)  137/       0 :                     ; ---------------------------------------------
(1)  138/       0 :                     ; ISO filesystem macros
(1)  139/       0 :                     ; ---------------------------------------------
(1)  140/       0 :                     
(1)  141/       0 :                     ; Set a ISO file
(1)  142/       0 :                     ; NOTE: a valid ISO head is required ($8000 to $B7FF)
(1)  143/       0 :                     
(1)  144/       0 :                     iso_setfs	macro type,start,end
(1)  145/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  146/       0 :                     		dc.b 0						; zero
(1)  147/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  148/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  149/       0 :                     		dc.l start>>11					; Start sector, big
(1)  150/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  151/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  152/       0 :                     		dc.l end-start					; Filesize, big
(1)  153/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  154/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  155/       0 :                     		dc.b 2						; File flags
(1)  156/       0 :                     		dc.b 0,0
(1)  157/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  158/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  159/       0 :                     		dc.b 1,type
(1)  160/       0 :                     .fend:
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     iso_file	macro filename,start,end
(1)  164/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  165/       0 :                     		dc.b 0						; zero
(1)  166/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  167/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  168/       0 :                     		dc.l start>>11					; Start sector, big
(1)  169/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  170/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  171/       0 :                     		dc.l end-start					; Filesize, big
(1)  172/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  173/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  174/       0 :                     		dc.b 0						; File flags
(1)  175/       0 :                     		dc.b 0,0
(1)  176/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  177/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  178/       0 :                     		dc.b .flend-.flen
(1)  179/       0 :                     .flen:		dc.b filename,";1"
(1)  180/       0 :                     .flend:		dc.b 0
(1)  181/       0 :                     .fend:
(1)  182/       0 :                     		endm
(1)  183/       0 :                     
(1)  184/       0 :                     
      58/       0 :                     		include	"system/shared.asm"		; Shared Genesis/32X/CD32X variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Shared internal structs
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     ; Structs
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ----------------------------------------------------------------
(1)   17/       0 :                     ; 32X MAIN DREQ-RAM control
(1)   18/       0 :                     ;
(1)   19/       0 :                     ; To read these labels:
(1)   20/       0 :                     ;
(1)   21/       0 :                     ; On the Genesis Side:
(1)   22/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   23/       0 :                     ; On the 32X Side:
(1)   24/       0 :                     ; 	mov	@(marsGbl_DmaRead,gbr),r0
(1)   25/       0 :                     ; 	add	#DREQ_LABEL,r0			; MAX $7F with add
(1)   26/       0 :                     ; 	;Then r0 to any other rX
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; Call System_MarsUpdate DURING DISPLAY to
(1)   29/       0 :                     ; transfer the changes.
(1)   30/       0 :                     ; ----------------------------------------------------------------
(1)   31/       0 :                     
(1)   32/       0 :                     ; *** List MUST be aligned in 8bytes, end with 0 or 8 ***
(1)   33/       0 :                     
(1)   35/       0 : (MACRO)             		struct 0
(1)   35/       0 : =$0                 GLBL_LASTPC     set *
(1)   35/       0 :                                     dephase
(1)   35/       0 : =$0                 GLBL_LASTORG    set *
(1)   35/       0 :                                     phase 0
(1)   36/       0 :                     Dreq_Palette	ds.w 256		; 256-color palette (DON'T MOVE THIS)
(1)   37/     200 :                     ; Dreq_DontUse	ds.w 8			; Last WORD gets corrupted, fill last writes with 0
(1)   38/     200 :                     sizeof_dreq	ds.l 0
(1)   39/     200 : (MACRO)             		endstruct
(1)   39/       0 :                                     !org GLBL_LASTORG
(1)   39/       0 :                                     phase GLBL_LASTPC
(1)   40/       0 :                     
(1)   44/       0 :                     
(1)   46/       0 :                     
      59/       0 :                     		include	"system/mcd/shared.asm"		; Shared Sega CD variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Sega CD shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; Register area
(1)    9/       0 :                     ;
(1)   10/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   11/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; -------------
(1)   15/       0 :                     ; bits
(1)   16/       0 :                     ; -------------
(1)   17/       0 :                     
(1)   18/       0 : =$2                 bitWRamMode	equ 2		;2M | 1M
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; Registers
(1)   22/       0 :                     ; -------------
(1)   23/       0 :                     
(1)   24/       0 : =$3                 mcd_memory	equ $03
(1)   25/       0 : =$6                 mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   26/       0 : =$E                 mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   27/       0 : =$F                 mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   28/       0 : =$10                mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   29/       0 : =$20                mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   30/       0 :                     
(1)   31/       0 :                     ; MemoryMode	equ	$02		;WORD
(1)   32/       0 :                     ; CommMain	equ	$0E		;BYTE
(1)   33/       0 :                     ; CommSub		equ	$0F		;BYTE
(1)   34/       0 :                     ; CommDataM	equ	$10		;Array (size: $E)
(1)   35/       0 :                     ; CommDataS	equ	$20		;Array (size: $E)
(1)   36/       0 :                     
(1)   37/       0 :                     ; ; =================================================================
(1)   38/       0 :                     ; ; ----------------------------------------
(1)   39/       0 :                     ; ; SUB CPU ONLY
(1)   40/       0 :                     ; ; ----------------------------------------
(1)   41/       0 :                     ;
(1)   42/       0 :                     ; ; -------------
(1)   43/       0 :                     ; ; PCM
(1)   44/       0 :                     ; ; -------------
(1)   45/       0 :                     ;
(1)   46/       0 :                     ; PCM		equ	$FF0000
(1)   47/       0 :                     ; ENV		equ	$01		; Envelope
(1)   48/       0 :                     ; PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
(1)   49/       0 :                     ; FDL		equ	$05		; Sample rate $00xx
(1)   50/       0 :                     ; FDH		equ	$07		; Sample rate $xx00
(1)   51/       0 :                     ; LSL		equ	$09		; Loop address $xx00
(1)   52/       0 :                     ; LSH		equ	$0B		; Loop address $00xx
(1)   53/       0 :                     ; ST		equ	$0D		; Start address (only $x0, $x000)
(1)   54/       0 :                     ; Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
(1)   55/       0 :                     ; OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
(1)   56/       0 :                     
(1)   57/       0 :                     ; =================================================================
(1)   58/       0 :                     
      60/       0 :                     		include	"system/md/map.asm"		; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000            sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000            sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      61/       0 :                     		include	"system/mars/map.asm"		; 32X hardware map (SH2 area)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                 shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      62/       0 :                     		include	"system/md/ram.asm"		; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; Area $FFFD00 to $FFFDFF(aprox) is reserved
(1)    8/       0 :                     ; for the MAIN-CPU's vectors and misc things
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; Sega 32X
(1)   12/       0 : =$FFFFFFFFFF..      RAM_MdDreq		equ	RAM_MdOther
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Settings
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 : (MACRO)             			struct $FFFF0000
(1)   18/       0 : =$0                 GLBL_LASTPC     set *
(1)   18/       0 :                                     dephase
(1)   18/       0 : =$0                 GLBL_LASTORG    set *
(1)   18/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   19/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X
(1)   20/FFFFFFFFFFFF1800 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X Current screen mode
(1)   21/FFFFFFFFFFFF3800 :                     RAM_ExSoundData		ds.b MAX_RamSndData	; SEGACD/CD32X ONLY: GEMA Tracks and Instruments, Samples are stored on WRAM.
(1)   22/FFFFFFFFFFFF7800 :                     
(1)   23/FFFFFFFFFFFF7800 :                     ; *** THESE MUST BE AFTER $FF8000
(1)   24/FFFFFFFFFFFF7800 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000 DMA visuals
(1)   25/FFFFFFFFFFFF9800 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   26/FFFFFFFFFFFF9D00 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   27/FFFFFFFFFFFFAD00 :                     RAM_MdGlobal		ds.b MAX_MdGlobal
(1)   28/FFFFFFFFFFFFB500 :                     RAM_ScreenBuff		ds.b MAX_ScrnBuff
(1)   29/FFFFFFFFFFFFDD00 :                     sizeof_MdRam		ds.l 0
(1)   30/FFFFFFFFFFFFDD00 : (MACRO)             			endstruct
(1)   30/FFFFFFFFFFFF0000 :                                     !org GLBL_LASTORG
(1)   30/       0 :                                     phase GLBL_LASTPC
(1)   31/       0 : (MACRO)             			report "MD RAM",(sizeof_MdRam-$FFFF8000),$FC00-$8000
(1)   32/       0 :                     
(1)   33/       0 : =$FFFFFD00          RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   34/       0 : =$FFFFFD00          RAM_MegaCd		equ $FFFFFD00
(1)   35/       0 : =$FFFFFE00          RAM_ScreenJump		equ $FFFFFE00;$FFFFFE80		; Screen change section
(1)   36/       0 :                     
      63/       0 :                     		include "game/global.asm"		; Global user variables on the Genesis side.
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global RAM variables on the Genesis side
(1)    4/       0 :                     ; (Score, Level, etc.)
(1)    5/       0 :                     ; ----------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 : (MACRO)             		struct RAM_MdGlobal
(1)    7/       0 : =$0                 GLBL_LASTPC     set *
(1)    7/       0 :                                     dephase
(1)    7/       0 : =$0                 GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFAD00 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFAD00 :                     RAM_Glbl_Scrn	ds.w 1				; Current screen number
(1)    9/FFFFFFFFFFFFAD02 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFAD04 : (MACRO)             		endstruct
(1)   10/FFFFFFFFFFFFAD00 :                                     !org GLBL_LASTORG
(1)   10/       0 :                                     phase GLBL_LASTPC
(1)   11/       0 : (MACRO)             		erreport "68K GLOBALS",sizeof_mdglbl-RAM_MdGlobal,MAX_MdGlobal
(1)   12/       0 :                     
(1)   13/       0 :                     
      64/       0 :                     
      65/       0 :                     ; ====================================================================
      66/       0 :                     ; ----------------------------------------------------------------
      67/       0 :                     ; Init procedures
      68/       0 :                     ; ----------------------------------------------------------------
      69/       0 :                     
      70/       0 :                     ; ---------------------------------------------
      71/       0 :                     ; SEGA 32X
      72/       0 :                     ; ---------------------------------------------
      73/       0 :                     
      75/       0 :                     		include	"system/head_mars.asm"			; 32X header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SEGA 32X header
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 03F0           		dc.l $3F0		; Entry point MUST point to $3F0
(1)    8/       8 : 0000 0820           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0820           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0820           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0820           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0820           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0820           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0820           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0820           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0820           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0820           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0820           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0820           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0820           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0820           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0820           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0820           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0820           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0820           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0820           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0820           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0820           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0820           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0820           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0820           		dc.l MD_ErrorTrap
(1)   32/      68 : 0000 0820           		dc.l MD_ErrorTrap
(1)   33/      6C : 0000 0820           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF 9A52           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0820           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF 9A4C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0820           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0820           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0820           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0820           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0820           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0820           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0820           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0820           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0820           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0820           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0820           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0820           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0820           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0820           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0820           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0820           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0820           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0820           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2033 3258 		dc.b "SEGA 32X        "
                    2020 2020 2020 2020 
(1)   71/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2023.???"
                    3230 3233 2E3F 3F3F 
(1)   72/     120 : 4D61 7273 6961 6E6F 		dc.b "Marsiano MARS                                   "
                    204D 4152 5320 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   73/     150 : 4D61 7273 6961 6E6F 		dc.b "Marsiano MARS                                   "
                    204D 4152 5320 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   74/     180 : 474D 2054 4543 4844 		dc.b "GM TECHDEMO-01"
                    454D 4F2D 3031      
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0006 27FC           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   82/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   83/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4A55 2020 2020 2020 		dc.b "JU              "
                    2020 2020 2020 2020 
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; NEW 32X jumps
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     
(1)   92/     200 : 4EF9 0088 0800      		jmp	($880000|MARS_Entry).l
(1)   93/     206 : 4EF9 0088 0820      		jmp	($880000|MD_ErrBus).l		; Bus error
(1)   94/     20C : 4EF9 0088 0820      		jmp	($880000|MD_ErrAddr).l		; Address error
(1)   95/     212 : 4EF9 0088 0820      		jmp	($880000|MD_ErrIll).l		; ILLEGAL Instruction
(1)   96/     218 : 4EF9 0088 0820      		jmp	($880000|MD_ErrZDiv).l		; Divide by 0
(1)   97/     21E : 4EF9 0088 0820      		jmp	($880000|MD_ErrChk).l		; CHK Instruction
(1)   98/     224 : 4EF9 0088 0820      		jmp	($880000|MD_ErrTrapV).l		; TRAPV Instruction
(1)   99/     22A : 4EF9 0088 0820      		jmp	($880000|MD_ErrPrivl).l		; Privilege violation
(1)  100/     230 : 4EF9 0088 0820      		jmp	($880000|MD_Trace).l		; Trace
(1)  101/     236 : 4EF9 0088 0820      		jmp	($880000|MD_Line1010).l		; Line 1010 Emulator
(1)  102/     23C : 4EF9 0088 0820      		jmp	($880000|MD_Line1111).l		; Line 1111 Emulator
(1)  103/     242 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l		; Error exception
(1)  104/     248 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  105/     24E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  106/     254 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  107/     25A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  108/     260 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  109/     266 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  110/     26C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  111/     272 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  112/     278 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  113/     27E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  114/     284 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  115/     28A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorEx).l
(1)  116/     290 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  117/     296 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  118/     29C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  119/     2A2 : 4EF9 FFFF 9A52      		jmp	(RAM_MdMarsHInt).l		; RAM jump for HBlank (JMP xxxx xxxx)
(1)  120/     2A8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  121/     2AE : 4EF9 FFFF 9A4C      		jmp	(RAM_MdMarsVInt).l		; RAM jump for VBlank (JMP xxxx xxxx)
(1)  122/     2B4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     2BA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2C0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  125/     2C6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2CC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  127/     2D2 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2D8 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2DE : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2E4 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2EA : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2F0 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2F6 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2FC : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     302 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     308 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     30E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     314 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     31A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     320 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     326 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     32C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     332 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     338 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     33E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     344 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     34A : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     350 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     356 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     35C : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     362 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     368 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     36E : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     374 : 4EF9 0088 0820      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     37A :                     
(1)  156/     37A :                     ; ----------------------------------------------------------------
(1)  157/     37A :                     
(1)  158/     37A :                     		align $3C0
(1)  159/     3C0 : 4D41 5253 2043 4845 		dc.b "MARS CHECK MODE "			; Module name
                    434B 204D 4F44 4520 
(1)  160/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  161/     3D4 : 0004 3300           		dc.l MARS_RAMDATA			; RAM-code location *Set to 0 if SH2 code points to ROM*
(1)  162/     3D8 : 0000 0000           		dc.l 0					; Zero again.
(1)  163/     3DC : 0001 F4FC           		dc.l MARS_RAMDATA_e-MARS_RAMDATA	; RAM-code size (END-START) *Set to 4 if SH2 code points to ROM*
(1)  164/     3E0 : 0600 081C           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  165/     3E4 : 0600 0980           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  166/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  167/     3EC : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  168/     3F0 :                     		binclude "system/mars/data/security.bin"; All the securty/boot code
(1)  169/     800 :                     
(1)  170/     800 :                     ; ====================================================================
(1)  171/     800 :                     ; ----------------------------------------------------------------
(1)  172/     800 :                     ; Entry point, this must be located at $800
(1)  173/     800 :                     ;
(1)  174/     800 :                     ; At this point, these registers return
(1)  175/     800 :                     ; the following bits:
(1)  176/     800 :                     ;
(1)  177/     800 :                     ; d0: %h0000000 rsc000ti
(1)  178/     800 :                     ; 	h - Cold start / Hot Start
(1)  179/     800 :                     ; 	r - SDRAM self check pass or error
(1)  180/     800 :                     ; 	s - Security check pass or error
(1)  181/     800 :                     ; 	c - Checksum pass or error
(1)  182/     800 :                     ; 	t - TV mode pass or error
(1)  183/     800 :                     ; 	i - MARS ID pass or error
(1)  184/     800 :                     ;
(1)  185/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  186/     800 :                     ; 	m - MARS TV mode
(1)  187/     800 :                     ; 	j - Country: Japan / Overseas
(1)  188/     800 :                     ; 	d - MD TV mode
(1)  189/     800 :                     ; 	k - DISK connected: Yes / No
(1)  190/     800 :                     ; 	v - Version
(1)  191/     800 :                     ;
(1)  192/     800 :                     ; Carry flag: "MARS ID" and Self Check result
(1)  193/     800 :                     ; 	cc: Test passed
(1)  194/     800 :                     ; 	cs: Test failed**
(1)  195/     800 :                     ;
(1)  196/     800 :                     ; ** HARDWARE BUG: This may still trigger if pressing
(1)  197/     800 :                     ; RESET so many times. (Found this on VRDX)
(1)  198/     800 :                     ; * WORKAROUND: After jumping to the
(1)  199/     800 :                     ; "No 32X detected" loop, test the checksum bit again
(1)  200/     800 :                     ; and if it passes Init as usual.
(1)  201/     800 :                     ; ----------------------------------------------------------------
(1)  202/     800 :                     
(1)  203/     800 :                     MARS_Entry:
(1)  204/     800 : 6436                		bcc	MD_Init			; Carry clear: pass
(1)  205/     802 :                     
(1)  206/     802 :                     ; ====================================================================
(1)  207/     802 :                     ; ----------------------------------------------------------------
(1)  208/     802 :                     ; If 32X is not detected...
(1)  209/     802 :                     ; ----------------------------------------------------------------
(1)  210/     802 :                     
(1)  211/     802 :                     .no_mars:
(1)  212/     802 : 0800 0005           		btst	#5,d0			; Check the checksum AGAIN in case we got here
(1)  213/     806 : 6730                		beq.s	MD_Init			; when it was already good.
(1)  214/     808 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  215/     80C : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l	; VDP: Point to Color 0
                    0004                
(1)  216/     816 : 33FC 0E00 00C0 0000 		move.w	#$0E00,(vdp_data).l	; Write blue
(1)  217/     81E : 60FE                		bra.s	*			; Infinite loop.
(1)  218/     820 :                     
(1)  219/     820 :                     ; ====================================================================
(1)  220/     820 :                     ; ----------------------------------------------------------------
(1)  221/     820 :                     ; 68k's Error handlers
(1)  222/     820 :                     ;
(1)  223/     820 :                     ; HBlank and VBlank jump to RAM
(1)  224/     820 :                     ; ----------------------------------------------------------------
(1)  225/     820 :                     
(1)  226/     820 :                     MD_ErrBus:		; Bus error
(1)  227/     820 :                     MD_ErrAddr:		; Address error
(1)  228/     820 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  229/     820 :                     MD_ErrZDiv:		; Divide by 0
(1)  230/     820 :                     MD_ErrChk:		; CHK Instruction
(1)  231/     820 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  232/     820 :                     MD_ErrPrivl:		; Privilege violation
(1)  233/     820 :                     MD_Trace:		; Trace
(1)  234/     820 :                     MD_Line1010:		; Line 1010 Emulator
(1)  235/     820 :                     MD_Line1111:		; Line 1111 Emulator
(1)  236/     820 :                     MD_ErrorEx:		; Error exception
(1)  237/     820 :                     MD_ErrorTrap:
(1)  238/     820 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  239/     824 : 23FC C000 0000 00C0 		move.l	#$C0000000,(vdp_ctrl).l
                    0004                
(1)  240/     82E : 33FC 000E 00C0 0000 		move.w	#$000E,(vdp_data).l
(1)  241/     836 : 60FE                		bra.s	*
(1)  242/     838 :                     
(1)  243/     838 :                     ; ====================================================================
(1)  244/     838 :                     ; ----------------------------------------------------------------
(1)  245/     838 :                     ; Init
(1)  246/     838 :                     ; ----------------------------------------------------------------
(1)  247/     838 :                     
(1)  248/     838 :                     MD_Init:
(1)  249/     838 : 46FC 2700           		move.w	#$2700,sr
(1)  250/     83C : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l
(1)  251/     842 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  252/     848 : 223C FFFF DD00      		move.l	#sizeof_mdram,d1
(1)  253/     84E : 7000                		moveq	#0,d0
(1)  254/     850 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  255/     852 : B1C1                		cmp.l	d1,a0
(1)  256/     854 : 65FA                		bcs.s	.loop_ram
(1)  257/     856 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
(1)  258/     85E : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  259/     864 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  260/     86A : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  261/     86C : 0807 0001           		btst	#1,d7
(1)  262/     870 : 66F8                		bne.s	.wait_dma
(1)  263/     872 : 2CBC 8004 8104      		move.l	#$80048104,(a6)		; Default top VDP regs
(1)  264/     878 : 7000                		moveq	#0,d0			; Clear both Master and Slave comm's
(1)  265/     87A : 2B40 002C           		move.l	d0,comm12(a5)
(1)  266/     87E :                     ; 		move.w	#$4FF,d7
(1)  267/     87E :                     ; .wait_sh2:
(1)  268/     87E :                     ; 		move.w	#$1FF,d6
(1)  269/     87E :                     ; 		dbf	d6,*
(1)  270/     87E :                     ; 		dbf	d7,.wait_sh2
(1)  271/     87E :                     
      76/     87E : 41F9 0088 08C6      		lea	($880000+Md_SysCode),a0			; Transfer SYSTEM code
      77/     884 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
      78/     88A : 303C 111B           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
      79/     88E :                     .copyme:
      80/     88E : 12D8                		move.b	(a0)+,(a1)+
      81/     890 : 51C8 FFFC           		dbf	d0,.copyme
      82/     894 : 41F9 0088 19E2      		lea	($880000+Md_JumpCode),a0		; Transfer JUMP code
      83/     89A : 43F8 FE00           		lea	(RAM_ScreenJump),a1
      84/     89E : 303C 0027           		move.w	#((Md_JumpCode_e-Md_JumpCode))-1,d0
      85/     8A2 :                     .copyme_2:
      86/     8A2 : 12D8                		move.b	(a0)+,(a1)+
      87/     8A4 : 51C8 FFFC           		dbf	d0,.copyme_2
      88/     8A8 : 4EB9 FFFF 0000      		jsr	(Sound_init).l				; RAM jumps
      89/     8AE : 4EB9 FFFF 021A      		jsr	(Video_init).l
      90/     8B4 : 4EB9 FFFF 0B90      		jsr	(System_Init).l
      91/     8BA : 31FC 0000 AD00      		move.w	#0,(RAM_Glbl_Scrn).w			; *** TEMPORAL ***
      92/     8C0 : 4EF9 FFFF FE00      		jmp	(Md_ReadModes).l
      93/     8C6 :                     
      94/     8C6 :                     ; ---------------------------------------------
      95/     8C6 :                     ; SEGA CD and CD32X
      96/     8C6 :                     ; ---------------------------------------------
      97/     8C6 :                     
     163/     8C6 :                     
     164/     8C6 :                     ; ====================================================================
     165/     8C6 :                     ; --------------------------------------------------------
     166/     8C6 :                     ; SYSTEM and SCREEN-JUMP codes
     167/     8C6 :                     ;
     168/     8C6 :                     ; MD and PICO: Normal ROM locations
     169/     8C6 :                     ; CD/32X/CD32X: Loaded in RAM
     170/     8C6 :                     ; --------------------------------------------------------
     171/     8C6 :                     
     172/     8C6 :                     ; ---------------------------------------------
     173/     8C6 :                     ; TOP-RAM Genesis system routines
     174/     8C6 :                     ; ---------------------------------------------
     175/     8C6 :                     
     176/     8C6 :                     Md_SysCode:
     178/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     180/FFFFFFFFFFFF0000 :                     
     181/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     182/FFFFFFFFFFFF0000 :                     		include	"sound/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona sound driver v0.5
(1)    4/FFFFFFFFFFFF0000 :                     ; (C)2023 GenesisFan64
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Reads custom "miniature" ImpulseTracker files
(1)    7/FFFFFFFFFFFF0000 :                     ; and automaticly picks the soundchip(s) to play.
(1)    8/FFFFFFFFFFFF0000 :                     ;
(1)    9/FFFFFFFFFFFF0000 :                     ; Features:
(1)   10/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   11/FFFFFFFFFFFF0000 :                     ;   | 7 extra pseudo-channels in either MONO
(1)   12/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   13/FFFFFFFFFFFF0000 :                     ;   | ** REQUIRES specific code for the SH2 side
(1)   14/FFFFFFFFFFFF0000 :                     ;   | and enabling the use of CMD interrupt.
(1)   15/FFFFFFFFFFFF0000 :                     ;   | Uses Slave SH2.
(1)   16/FFFFFFFFFFFF0000 :                     ; - DMA-protection
(1)   17/FFFFFFFFFFFF0000 :                     ;   | This keeps DAC samplerate to a decent
(1)   18/FFFFFFFFFFFF0000 :                     ;   | quality.
(1)   19/FFFFFFFFFFFF0000 :                     ; - DAC Playback at 16000hz
(1)   20/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   21/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   22/FFFFFFFFFFFF0000 :                     ;
(1)   23/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   24/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   25/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   26/FFFFFFFFFFFF0000 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   27/FFFFFFFFFFFF0000 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   28/FFFFFFFFFFFF0000 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   29/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   30/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   31/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   32/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   33/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   34/FFFFFFFFFFFF0000 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   35/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   38/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   39/FFFFFFFFFFFF0000 :                     ; Settings
(1)   40/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   41/FFFFFFFFFFFF0000 :                     
(1)   42/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   43/FFFFFFFFFFFF0000 :                     ; Variables
(1)   44/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   45/FFFFFFFFFFFF0000 :                     
(1)   46/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   47/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   48/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   49/FFFFFFFFFFFF0000 :                     
(1)   50/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   51/FFFFFFFFFFFF0000 : =$40                zDrvFifo	equ commZfifo		; FIFO command storage
(1)   52/FFFFFFFFFFFF0000 : =$80                zDrvFWrt	equ commZWrite		; FIFO command index
(1)   53/FFFFFFFFFFFF0000 : =$81                zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   54/FFFFFFFFFFFF0000 : =$82                zDrvMarsBlk	equ marsBlock		; Disable PWM flag
(1)   55/FFFFFFFFFFFF0000 :                     
(1)   56/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   57/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   58/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   59/FFFFFFFFFFFF0000 :                     ;
(1)   60/FFFFFFFFFFFF0000 :                     ; Uses:
(1)   61/FFFFFFFFFFFF0000 :                     ; a0-a1,d0-d1
(1)   62/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   63/FFFFFFFFFFFF0000 :                     
(1)   64/FFFFFFFFFFFF0000 :                     ; 		align $80
(1)   65/FFFFFFFFFFFF0000 :                     Sound_Init:
(1)   66/FFFFFFFFFFFF0000 : 46FC 2700           		move.w	#$2700,sr
(1)   70/FFFFFFFFFFFF0004 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Get Z80 bus
(1)   71/FFFFFFFFFFFF000C : 33FC 0100 00A1 1200 		move.w	#$0100,(z80_reset).l		; Z80 reset
(1)   72/FFFFFFFFFFFF0014 :                     .wait:
(1)   73/FFFFFFFFFFFF0014 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)   74/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)   75/FFFFFFFFFFFF001E : 41F9 00A0 0000      		lea	(z80_cpu).l,a0			; Clean entire Z80 FIRST.
(1)   76/FFFFFFFFFFFF0024 : 303C 1FFF           		move.w	#$1FFF,d0
(1)   77/FFFFFFFFFFFF0028 : 7200                		moveq	#0,d1
(1)   78/FFFFFFFFFFFF002A :                     .cleanup:
(1)   79/FFFFFFFFFFFF002A : 10C1                		move.b	d1,(a0)+
(1)   80/FFFFFFFFFFFF002C : 51C8 FFFC           		dbf	d0,.cleanup
(1)   81/FFFFFFFFFFFF0030 : 41F9 0088 1A0A      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   82/FFFFFFFFFFFF0036 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   83/FFFFFFFFFFFF003C : 303C 1EFF           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   84/FFFFFFFFFFFF0040 :                     .copy:
(1)   85/FFFFFFFFFFFF0040 : 12D8                		move.b	(a0)+,(a1)+
(1)   86/FFFFFFFFFFFF0042 : 51C8 FFFC           		dbf	d0,.copy
(1)   87/FFFFFFFFFFFF0046 : 33FC 0000 00A1 1200 		move.w	#0,(z80_reset).l		; Reset cancel
(1)   88/FFFFFFFFFFFF004E : 4E71                		nop
(1)   89/FFFFFFFFFFFF0050 : 4E71                		nop
(1)   90/FFFFFFFFFFFF0052 : 4E71                		nop
(1)   91/FFFFFFFFFFFF0054 : 4E71                		nop
(1)   92/FFFFFFFFFFFF0056 : 33FC 0100 00A1 1200 		move.w	#$100,(z80_reset).l
(1)   93/FFFFFFFFFFFF005E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l			; Start Z80
(1)   95/FFFFFFFFFFFF0066 : 4E75                		rts
(1)   96/FFFFFFFFFFFF0068 :                     
(1)   97/FFFFFFFFFFFF0068 :                     ; ====================================================================
(1)   98/FFFFFFFFFFFF0068 :                     ; ----------------------------------------------------------------
(1)   99/FFFFFFFFFFFF0068 :                     ; Subroutines
(1)  100/FFFFFFFFFFFF0068 :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF0068 :                     
(1)  102/FFFFFFFFFFFF0068 :                     ; ------------------------------------------------
(1)  103/FFFFFFFFFFFF0068 :                     ; Lock Z80, get bus
(1)  104/FFFFFFFFFFFF0068 :                     ; ------------------------------------------------
(1)  105/FFFFFFFFFFFF0068 :                     
(1)  106/FFFFFFFFFFFF0068 :                     sndLockZ80:
(1)  107/FFFFFFFFFFFF0068 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  108/FFFFFFFFFFFF0070 :                     .wait:
(1)  109/FFFFFFFFFFFF0070 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  110/FFFFFFFFFFFF0078 : 66F6                		bne.s	.wait
(1)  111/FFFFFFFFFFFF007A : 4E75                		rts
(1)  112/FFFFFFFFFFFF007C :                     
(1)  113/FFFFFFFFFFFF007C :                     ; ------------------------------------------------
(1)  114/FFFFFFFFFFFF007C :                     ; Unlock Z80, return bus
(1)  115/FFFFFFFFFFFF007C :                     ; ------------------------------------------------
(1)  116/FFFFFFFFFFFF007C :                     
(1)  117/FFFFFFFFFFFF007C :                     sndUnlockZ80:
(1)  118/FFFFFFFFFFFF007C : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  119/FFFFFFFFFFFF0084 : 4E75                		rts
(1)  120/FFFFFFFFFFFF0086 :                     
(1)  121/FFFFFFFFFFFF0086 :                     ; ------------------------------------------------
(1)  122/FFFFFFFFFFFF0086 :                     ; 68k-to-z80 Sound request
(1)  123/FFFFFFFFFFFF0086 :                     ; enter/exit routines
(1)  124/FFFFFFFFFFFF0086 :                     ;
(1)  125/FFFFFFFFFFFF0086 :                     ; d6 - commFifo index
(1)  126/FFFFFFFFFFFF0086 :                     ; ------------------------------------------------
(1)  127/FFFFFFFFFFFF0086 :                     
(1)  128/FFFFFFFFFFFF0086 :                     sndReq_Enter:
(1)  129/FFFFFFFFFFFF0086 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  130/FFFFFFFFFFFF008A : DEFC 0010           		adda	#4*4,sp				; Go back to the RTS jump
(1)  131/FFFFFFFFFFFF008E : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  132/FFFFFFFFFFFF0096 : 7C00                		moveq	#0,d6
(1)  133/FFFFFFFFFFFF0098 : 40C6                		move.w	sr,d6
(1)  134/FFFFFFFFFFFF009A : 4846                		swap	d6
(1)  135/FFFFFFFFFFFF009C : 007C 0700           		or.w	#$0700,sr			; Disable interrupts
(1)  136/FFFFFFFFFFFF00A0 : 4BF9 00A0 0080      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  137/FFFFFFFFFFFF00A6 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  138/FFFFFFFFFFFF00AC :                     .wait:
(1)  139/FFFFFFFFFFFF00AC : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  140/FFFFFFFFFFFF00B4 : 66F6                		bne.s	.wait
(1)  141/FFFFFFFFFFFF00B6 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  142/FFFFFFFFFFFF00B8 : 4886                		ext.w	d6				; extend to 16 bits
(1)  143/FFFFFFFFFFFF00BA : 4E75                		rts
(1)  144/FFFFFFFFFFFF00BC :                     ; JUMP ONLY
(1)  145/FFFFFFFFFFFF00BC :                     sndReq_Exit:
(1)  146/FFFFFFFFFFFF00BC : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  147/FFFFFFFFFFFF00C4 : 4846                		swap	d6
(1)  148/FFFFFFFFFFFF00C6 : 46C6                		move.w	d6,sr
(1)  149/FFFFFFFFFFFF00C8 : 9EFC 0010           		suba	#4*4,sp				; Roll to the last regs
(1)  150/FFFFFFFFFFFF00CC : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  151/FFFFFFFFFFFF00D0 : 4E75                		rts
(1)  152/FFFFFFFFFFFF00D2 :                     
(1)  153/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  154/FFFFFFFFFFFF00D2 :                     ; Send request id and arguments
(1)  155/FFFFFFFFFFFF00D2 :                     ;
(1)  156/FFFFFFFFFFFF00D2 :                     ; Input:
(1)  157/FFFFFFFFFFFF00D2 :                     ; d7 - byte to write
(1)  158/FFFFFFFFFFFF00D2 :                     ; d6 - index pointer
(1)  159/FFFFFFFFFFFF00D2 :                     ; a5 - commZWrite, update index
(1)  160/FFFFFFFFFFFF00D2 :                     ; a6 - commZfifo command list
(1)  161/FFFFFFFFFFFF00D2 :                     ;
(1)  162/FFFFFFFFFFFF00D2 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  163/FFFFFFFFFFFF00D2 :                     ; ------------------------------------------------
(1)  164/FFFFFFFFFFFF00D2 :                     
(1)  165/FFFFFFFFFFFF00D2 :                     sndReq_scmd:
(1)  166/FFFFFFFFFFFF00D2 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  167/FFFFFFFFFFFF00D8 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  168/FFFFFFFFFFFF00DA : 0206 003F           		andi.b	#$3F,d6
(1)  169/FFFFFFFFFFFF00DE : 600C                		bra.s	sndReq_sbyte
(1)  170/FFFFFFFFFFFF00E0 :                     sndReq_slong:
(1)  171/FFFFFFFFFFFF00E0 : 610A                		bsr	sndReq_sbyte
(1)  172/FFFFFFFFFFFF00E2 : E09F                		ror.l	#8,d7
(1)  173/FFFFFFFFFFFF00E4 :                     sndReq_saddr:
(1)  174/FFFFFFFFFFFF00E4 : 6106                		bsr	sndReq_sbyte
(1)  175/FFFFFFFFFFFF00E6 : E09F                		ror.l	#8,d7
(1)  176/FFFFFFFFFFFF00E8 :                     sndReq_sword:
(1)  177/FFFFFFFFFFFF00E8 : 6102                		bsr	sndReq_sbyte
(1)  178/FFFFFFFFFFFF00EA : E09F                		ror.l	#8,d7
(1)  179/FFFFFFFFFFFF00EC :                     sndReq_sbyte:
(1)  180/FFFFFFFFFFFF00EC : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  181/FFFFFFFFFFFF00F0 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  182/FFFFFFFFFFFF00F2 : 0206 003F           		andi.b	#$3F,d6
(1)  183/FFFFFFFFFFFF00F6 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  184/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  185/FFFFFFFFFFFF00FA :                     
(1)  186/FFFFFFFFFFFF00FA :                     ; --------------------------------------------------------
(1)  187/FFFFFFFFFFFF00FA :                     ; gemaDmaPause
(1)  188/FFFFFFFFFFFF00FA :                     ;
(1)  189/FFFFFFFFFFFF00FA :                     ; Call this BEFORE doing any DMA transfer
(1)  190/FFFFFFFFFFFF00FA :                     ; --------------------------------------------------------
(1)  191/FFFFFFFFFFFF00FA :                     
(1)  192/FFFFFFFFFFFF00FA :                     gemaDmaPause:
(1)  196/FFFFFFFFFFFF00FA : 4847                		swap	d7
(1)  197/FFFFFFFFFFFF00FC : 4846                		swap	d6
(1)  198/FFFFFFFFFFFF00FE : 6100 FF68           		bsr	sndLockZ80
(1)  199/FFFFFFFFFFFF0102 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  200/FFFFFFFFFFFF010A : 31FC 0001 0000      		move.w	#1,
(1)  201/FFFFFFFFFFFF0110 : 6100 FF6A           		bsr	sndUnlockZ80
(1)  202/FFFFFFFFFFFF0114 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  203/FFFFFFFFFFFF0118 : 51CF FFFE           		dbf	d7,*
(1)  204/FFFFFFFFFFFF011C : 4846                		swap	d6
(1)  205/FFFFFFFFFFFF011E : 4847                		swap	d7
(1)  206/FFFFFFFFFFFF0120 : 4E75                		rts
(1)  208/FFFFFFFFFFFF0122 :                     
(1)  209/FFFFFFFFFFFF0122 :                     ; --------------------------------------------------------
(1)  210/FFFFFFFFFFFF0122 :                     ; gemaDmaResume
(1)  211/FFFFFFFFFFFF0122 :                     ;
(1)  212/FFFFFFFFFFFF0122 :                     ; Call this AFTER finishing DMA transfer
(1)  213/FFFFFFFFFFFF0122 :                     ; --------------------------------------------------------
(1)  214/FFFFFFFFFFFF0122 :                     
(1)  215/FFFFFFFFFFFF0122 :                     gemaDmaResume:
(1)  219/FFFFFFFFFFFF0122 : 4847                		swap	d7
(1)  220/FFFFFFFFFFFF0124 : 4846                		swap	d6
(1)  221/FFFFFFFFFFFF0126 : 6100 FF40           		bsr	sndLockZ80
(1)  222/FFFFFFFFFFFF012A : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  223/FFFFFFFFFFFF0132 : 6100 FF48           		bsr	sndUnlockZ80
(1)  224/FFFFFFFFFFFF0136 : 4846                		swap	d6
(1)  225/FFFFFFFFFFFF0138 : 4847                		swap	d7
(1)  226/FFFFFFFFFFFF013A : 4E75                		rts
(1)  228/FFFFFFFFFFFF013C :                     
(1)  229/FFFFFFFFFFFF013C :                     ; --------------------------------------------------------
(1)  230/FFFFFFFFFFFF013C :                     ; gemaDmaPause
(1)  231/FFFFFFFFFFFF013C :                     ;
(1)  232/FFFFFFFFFFFF013C :                     ; Call this BEFORE doing any DMA transfer
(1)  233/FFFFFFFFFFFF013C :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF013C :                     
(1)  235/FFFFFFFFFFFF013C :                     gemaDmaPauseRom:
(1)  239/FFFFFFFFFFFF013C : 4847                		swap	d7
(1)  240/FFFFFFFFFFFF013E : 4846                		swap	d6
(1)  241/FFFFFFFFFFFF0140 : 6100 FF26           		bsr	sndLockZ80
(1)  242/FFFFFFFFFFFF0144 : 13FC 0001 00A0 0081 		move.b	#1,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  243/FFFFFFFFFFFF014C : 6100 FF2E           		bsr	sndUnlockZ80
(1)  244/FFFFFFFFFFFF0150 : 3E3C 0060           		move.w	#96,d7				; ...Small delay...
(1)  245/FFFFFFFFFFFF0154 : 51CF FFFE           		dbf	d7,*
(1)  247/FFFFFFFFFFFF0158 : 3C3C 0002           		move.w	#2,d6
(1)  248/FFFFFFFFFFFF015C : 6136                		bsr	sndReqCmd
(1)  249/FFFFFFFFFFFF015E : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  251/FFFFFFFFFFFF0166 : 4846                		swap	d6
(1)  252/FFFFFFFFFFFF0168 : 4847                		swap	d7
(1)  253/FFFFFFFFFFFF016A : 4E75                		rts
(1)  255/FFFFFFFFFFFF016C :                     
(1)  256/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  257/FFFFFFFFFFFF016C :                     ; gemaDmaResume
(1)  258/FFFFFFFFFFFF016C :                     ;
(1)  259/FFFFFFFFFFFF016C :                     ; Call this AFTER finishing DMA transfer
(1)  260/FFFFFFFFFFFF016C :                     ; --------------------------------------------------------
(1)  261/FFFFFFFFFFFF016C :                     
(1)  262/FFFFFFFFFFFF016C :                     gemaDmaResumeRom:
(1)  266/FFFFFFFFFFFF016C : 4847                		swap	d7
(1)  267/FFFFFFFFFFFF016E : 4846                		swap	d6
(1)  268/FFFFFFFFFFFF0170 : 6100 FEF6           		bsr	sndLockZ80
(1)  269/FFFFFFFFFFFF0174 : 13FC 0000 00A0 0081 		move.b	#0,(z80_cpu+zDrvRomBlk)		; Block flag for Z80
(1)  270/FFFFFFFFFFFF017C : 6100 FEFE           		bsr	sndUnlockZ80
(1)  272/FFFFFFFFFFFF0180 : 3C3C 0003           		move.w	#3,d6
(1)  273/FFFFFFFFFFFF0184 : 610E                		bsr	sndReqCmd
(1)  274/FFFFFFFFFFFF0186 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  276/FFFFFFFFFFFF018E : 4846                		swap	d6
(1)  277/FFFFFFFFFFFF0190 : 4847                		swap	d7
(1)  278/FFFFFFFFFFFF0192 : 4E75                		rts
(1)  280/FFFFFFFFFFFF0194 :                     
(1)  281/FFFFFFFFFFFF0194 :                     ; ------------------------------------------------
(1)  282/FFFFFFFFFFFF0194 :                     ; 32X ONLY: Request CMD interrupt with
(1)  283/FFFFFFFFFFFF0194 :                     ; command
(1)  284/FFFFFFFFFFFF0194 :                     ;
(1)  285/FFFFFFFFFFFF0194 :                     ; d6 - command
(1)  286/FFFFFFFFFFFF0194 :                     ; ------------------------------------------------
(1)  287/FFFFFFFFFFFF0194 :                     
(1)  288/FFFFFFFFFFFF0194 :                     sndReqCmd:
(1)  289/FFFFFFFFFFFF0194 :                     ; 	if MARS
(1)  290/FFFFFFFFFFFF0194 :                     ; .wait_in:	move.b	(sysmars_reg+comm14),d7
(1)  291/FFFFFFFFFFFF0194 :                     ; 		and.w	#%11110000,d7
(1)  292/FFFFFFFFFFFF0194 :                     ; 		bne.s	.wait_in
(1)  293/FFFFFFFFFFFF0194 :                     ; 		and.w	#%00001111,d6
(1)  294/FFFFFFFFFFFF0194 :                     ; 		or.b	d6,d7
(1)  295/FFFFFFFFFFFF0194 :                     ; 		move.b	d7,(sysmars_reg+comm14).l
(1)  296/FFFFFFFFFFFF0194 :                     ; 		move.b	(sysmars_reg+comm14).l,d7
(1)  297/FFFFFFFFFFFF0194 :                     ; 		and.w	#%00001111,d7
(1)  298/FFFFFFFFFFFF0194 :                     ; 		cmp.b	d6,d7
(1)  299/FFFFFFFFFFFF0194 :                     ; 		bne.s	.wait_in
(1)  300/FFFFFFFFFFFF0194 :                     ; 		bset	#7,(sysmars_reg+comm14).l
(1)  301/FFFFFFFFFFFF0194 :                     ; 		bset	#1,(sysmars_reg+standby).l	; Request Slave CMD
(1)  302/FFFFFFFFFFFF0194 :                     ; ; .wait_cmd:	btst	#1,(sysmars_reg+standby).l
(1)  303/FFFFFFFFFFFF0194 :                     ; ; 		bne.s	.wait_cmd
(1)  304/FFFFFFFFFFFF0194 :                     ; .wait_out:	move.b	(sysmars_reg+comm14),d7
(1)  305/FFFFFFFFFFFF0194 :                     ; 		and.w	#%11110000,d7
(1)  306/FFFFFFFFFFFF0194 :                     ; 		bne.s	.wait_out
(1)  307/FFFFFFFFFFFF0194 :                     ; 	endif
(1)  308/FFFFFFFFFFFF0194 : 4E75                		rts
(1)  309/FFFFFFFFFFFF0196 :                     
(1)  310/FFFFFFFFFFFF0196 :                     ; ============================================================
(1)  311/FFFFFFFFFFFF0196 :                     ; --------------------------------------------------------
(1)  312/FFFFFFFFFFFF0196 :                     ; gemaTest
(1)  313/FFFFFFFFFFFF0196 :                     ;
(1)  314/FFFFFFFFFFFF0196 :                     ; For TESTING only.
(1)  315/FFFFFFFFFFFF0196 :                     ; --------------------------------------------------------
(1)  316/FFFFFFFFFFFF0196 :                     
(1)  317/FFFFFFFFFFFF0196 :                     gemaTest:
(1)  318/FFFFFFFFFFFF0196 : 6100 FEEE           		bsr	sndReq_Enter
(1)  319/FFFFFFFFFFFF019A : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  320/FFFFFFFFFFFF019E : 6100 FF32           		bsr	sndReq_scmd
(1)  321/FFFFFFFFFFFF01A2 : 6000 FF18           		bra 	sndReq_Exit
(1)  322/FFFFFFFFFFFF01A6 :                     
(1)  323/FFFFFFFFFFFF01A6 :                     ; --------------------------------------------------------
(1)  324/FFFFFFFFFFFF01A6 :                     ; gemaPlayTrack
(1)  325/FFFFFFFFFFFF01A6 :                     ;
(1)  326/FFFFFFFFFFFF01A6 :                     ; Play a track by number
(1)  327/FFFFFFFFFFFF01A6 :                     ;
(1)  328/FFFFFFFFFFFF01A6 :                     ; d0.b - Track number
(1)  329/FFFFFFFFFFFF01A6 :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF01A6 :                     
(1)  331/FFFFFFFFFFFF01A6 :                     gemaPlayTrack:
(1)  332/FFFFFFFFFFFF01A6 : 6100 FEDE           		bsr	sndReq_Enter
(1)  333/FFFFFFFFFFFF01AA : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  334/FFFFFFFFFFFF01AE : 6100 FF22           		bsr	sndReq_scmd
(1)  335/FFFFFFFFFFFF01B2 : 1E00                		move.b	d0,d7
(1)  336/FFFFFFFFFFFF01B4 : 6100 FF36           		bsr	sndReq_sbyte
(1)  337/FFFFFFFFFFFF01B8 : 7E00                		moveq	#0,d7
(1)  338/FFFFFFFFFFFF01BA : 6100 FF30           		bsr	sndReq_sbyte
(1)  339/FFFFFFFFFFFF01BE : 6000 FEFC           		bra 	sndReq_Exit
(1)  340/FFFFFFFFFFFF01C2 :                     
(1)  341/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  342/FFFFFFFFFFFF01C2 :                     ; gemaPlayFromBlk
(1)  343/FFFFFFFFFFFF01C2 :                     ;
(1)  344/FFFFFFFFFFFF01C2 :                     ; Play a track by number
(1)  345/FFFFFFFFFFFF01C2 :                     ;
(1)  346/FFFFFFFFFFFF01C2 :                     ; d0.b - Track number
(1)  347/FFFFFFFFFFFF01C2 :                     ; d1.b - Block number
(1)  348/FFFFFFFFFFFF01C2 :                     ; --------------------------------------------------------
(1)  349/FFFFFFFFFFFF01C2 :                     
(1)  350/FFFFFFFFFFFF01C2 :                     gemaPlayFromBlk:
(1)  351/FFFFFFFFFFFF01C2 : 6100 FEC2           		bsr	sndReq_Enter
(1)  352/FFFFFFFFFFFF01C6 : 3E3C 0001           		move.w	#$01,d7		; Command $04
(1)  353/FFFFFFFFFFFF01CA : 6100 FF06           		bsr	sndReq_scmd
(1)  354/FFFFFFFFFFFF01CE : 1E00                		move.b	d0,d7
(1)  355/FFFFFFFFFFFF01D0 : 6100 FF1A           		bsr	sndReq_sbyte
(1)  356/FFFFFFFFFFFF01D4 : 1E01                		move.b	d1,d7
(1)  357/FFFFFFFFFFFF01D6 : 6100 FF14           		bsr	sndReq_sbyte
(1)  358/FFFFFFFFFFFF01DA : 6000 FEE0           		bra 	sndReq_Exit
(1)  359/FFFFFFFFFFFF01DE :                     
(1)  360/FFFFFFFFFFFF01DE :                     ; --------------------------------------------------------
(1)  361/FFFFFFFFFFFF01DE :                     ; gemaStopTrack
(1)  362/FFFFFFFFFFFF01DE :                     ;
(1)  363/FFFFFFFFFFFF01DE :                     ; Stops a track using that ID
(1)  364/FFFFFFFFFFFF01DE :                     ;
(1)  365/FFFFFFFFFFFF01DE :                     ; d0.b - Track number
(1)  366/FFFFFFFFFFFF01DE :                     ; --------------------------------------------------------
(1)  367/FFFFFFFFFFFF01DE :                     
(1)  368/FFFFFFFFFFFF01DE :                     gemaStopTrack:
(1)  369/FFFFFFFFFFFF01DE : 6100 FEA6           		bsr	sndReq_Enter
(1)  370/FFFFFFFFFFFF01E2 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  371/FFFFFFFFFFFF01E6 : 6100 FEEA           		bsr	sndReq_scmd
(1)  372/FFFFFFFFFFFF01EA : 1E00                		move.b	d0,d7
(1)  373/FFFFFFFFFFFF01EC : 6100 FEFE           		bsr	sndReq_sbyte
(1)  374/FFFFFFFFFFFF01F0 : 6000 FECA           		bra 	sndReq_Exit
(1)  375/FFFFFFFFFFFF01F4 :                     
(1)  376/FFFFFFFFFFFF01F4 :                     ; --------------------------------------------------------
(1)  377/FFFFFFFFFFFF01F4 :                     ; gemaStopAll
(1)  378/FFFFFFFFFFFF01F4 :                     ;
(1)  379/FFFFFFFFFFFF01F4 :                     ; Stop ALL tracks from ALL buffers.
(1)  380/FFFFFFFFFFFF01F4 :                     ;
(1)  381/FFFFFFFFFFFF01F4 :                     ; No arguments.
(1)  382/FFFFFFFFFFFF01F4 :                     ; --------------------------------------------------------
(1)  383/FFFFFFFFFFFF01F4 :                     
(1)  384/FFFFFFFFFFFF01F4 :                     gemaStopAll:
(1)  388/FFFFFFFFFFFF01F4 : 6100 FE90           		bsr	sndReq_Enter
(1)  389/FFFFFFFFFFFF01F8 : 3E3C 0008           		move.w	#$08,d7		; Command $08
(1)  390/FFFFFFFFFFFF01FC : 6100 FED4           		bsr	sndReq_scmd
(1)  391/FFFFFFFFFFFF0200 : 6000 FEBA           		bra 	sndReq_Exit
(1)  393/FFFFFFFFFFFF0204 :                     
(1)  394/FFFFFFFFFFFF0204 :                     ; --------------------------------------------------------
(1)  395/FFFFFFFFFFFF0204 :                     ; gemaSetBeats
(1)  396/FFFFFFFFFFFF0204 :                     ;
(1)  397/FFFFFFFFFFFF0204 :                     ; Sets global subbeats
(1)  398/FFFFFFFFFFFF0204 :                     ;
(1)  399/FFFFFFFFFFFF0204 :                     ; d0.w - sub-beats
(1)  400/FFFFFFFFFFFF0204 :                     ; --------------------------------------------------------
(1)  401/FFFFFFFFFFFF0204 :                     
(1)  402/FFFFFFFFFFFF0204 :                     gemaSetBeats:
(1)  403/FFFFFFFFFFFF0204 : 6100 FE80           		bsr	sndReq_Enter
(1)  404/FFFFFFFFFFFF0208 : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  405/FFFFFFFFFFFF020C : 6100 FEC4           		bsr	sndReq_scmd
(1)  406/FFFFFFFFFFFF0210 : 3E00                		move.w	d0,d7
(1)  407/FFFFFFFFFFFF0212 : 6100 FED4           		bsr	sndReq_sword
(1)  408/FFFFFFFFFFFF0216 : 6000 FEA4           		bra 	sndReq_Exit
(1)  409/FFFFFFFFFFFF021A :                     
     183/FFFFFFFFFFFF021A :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF021A :                     ; Genesis Video
(1)    4/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF021A :                     
(1)    6/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF021A :                     ; Settings
(1)    9/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF021A :                     
(1)   11/FFFFFFFFFFFF021A : =$10                MAX_MDDMATSK	equ 16		; MAX DMA BLAST entries
(1)   12/FFFFFFFFFFFF021A : =$10                MAX_MDOBJ	equ 16		; Max objects for Genesis
(1)   13/FFFFFFFFFFFF021A : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   14/FFFFFFFFFFFF021A : =$580               varPrintVram	equ $580	; Default location of the PRINT text graphics
(1)   15/FFFFFFFFFFFF021A : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/FFFFFFFFFFFF021A :                     
(1)   17/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF021A :                     ; Variables
(1)   19/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF021A :                     
(1)   21/FFFFFFFFFFFF021A :                     ; VDP Register $80
(1)   22/FFFFFFFFFFFF021A : =$2                 HVStop		equ $02
(1)   23/FFFFFFFFFFFF021A : =$10                HintEnbl	equ $10
(1)   24/FFFFFFFFFFFF021A : =$1                 bitHVStop	equ 1
(1)   25/FFFFFFFFFFFF021A : =$4                 bitHintEnbl	equ 4
(1)   26/FFFFFFFFFFFF021A :                     
(1)   27/FFFFFFFFFFFF021A :                     ; VDP Register $81
(1)   28/FFFFFFFFFFFF021A : =$40                DispEnbl 	equ $40
(1)   29/FFFFFFFFFFFF021A : =$20                VintEnbl 	equ $20
(1)   30/FFFFFFFFFFFF021A : =$10                DmaEnbl		equ $10
(1)   31/FFFFFFFFFFFF021A : =$6                 bitDispEnbl	equ 6
(1)   32/FFFFFFFFFFFF021A : =$5                 bitVintEnbl	equ 5
(1)   33/FFFFFFFFFFFF021A : =$4                 bitDmaEnbl	equ 4
(1)   34/FFFFFFFFFFFF021A : =$3                 bitV30		equ 3
(1)   35/FFFFFFFFFFFF021A :                     
(1)   36/FFFFFFFFFFFF021A :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/FFFFFFFFFFFF021A : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   38/FFFFFFFFFFFF021A : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   39/FFFFFFFFFFFF021A : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   40/FFFFFFFFFFFF021A : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   41/FFFFFFFFFFFF021A : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   42/FFFFFFFFFFFF021A : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/FFFFFFFFFFFF021A : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   44/FFFFFFFFFFFF021A : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   45/FFFFFFFFFFFF021A : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   46/FFFFFFFFFFFF021A : =$0                 bitPal		equ 0
(1)   47/FFFFFFFFFFFF021A :                     
(1)   48/FFFFFFFFFFFF021A :                     ; md_bg_flags
(1)   49/FFFFFFFFFFFF021A : =$0                 bitDrwR		equ 0
(1)   50/FFFFFFFFFFFF021A : =$1                 bitDrwL		equ 1
(1)   51/FFFFFFFFFFFF021A : =$2                 bitDrwD		equ 2
(1)   52/FFFFFFFFFFFF021A : =$3                 bitDrwU		equ 3
(1)   53/FFFFFFFFFFFF021A : =$6                 bitMarsBg	equ 6
(1)   54/FFFFFFFFFFFF021A : =$7                 bitBgOn		equ 7
(1)   55/FFFFFFFFFFFF021A :                     
(1)   56/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)   57/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)   58/FFFFFFFFFFFF021A :                     ; Structs
(1)   59/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)   60/FFFFFFFFFFFF021A :                     
(1)   61/FFFFFFFFFFFF021A :                     ; ; IN SH2 ORDER
(1)   62/FFFFFFFFFFFF021A :                     ; ; still works fine on this side.
(1)   63/FFFFFFFFFFFF021A :                     ; ; md_bg_flags: %EM..UDLR
(1)   64/FFFFFFFFFFFF021A :                     ; ; UDLR - off-screen update bits
(1)   65/FFFFFFFFFFFF021A :                     ; ;    M - Map belongs to Genesis or 32X
(1)   66/FFFFFFFFFFFF021A :                     ; ;    E - Enable this map
(1)   67/FFFFFFFFFFFF021A :                     ;
(1)   68/FFFFFFFFFFFF021A :                     ; 		struct 0
(1)   69/FFFFFFFFFFFF021A :                     ; md_bg_bw	ds.b 1		; Block Width
(1)   70/FFFFFFFFFFFF021A :                     ; md_bg_bh	ds.b 1		; Block Height
(1)   71/FFFFFFFFFFFF021A :                     ; md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   72/FFFFFFFFFFFF021A :                     ; md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   73/FFFFFFFFFFFF021A :                     ; md_bg_xset	ds.b 1		; X-counter
(1)   74/FFFFFFFFFFFF021A :                     ; md_bg_yset	ds.b 1		; Y-counter
(1)   75/FFFFFFFFFFFF021A :                     ; md_bg_movex	ds.b 1		; *** ALIGNMENT, FREE TO USE
(1)   76/FFFFFFFFFFFF021A :                     ; md_bg_movey	ds.b 1		; ***
(1)   77/FFFFFFFFFFFF021A :                     ; md_bg_w		ds.w 1		; Width in blocks
(1)   78/FFFFFFFFFFFF021A :                     ; md_bg_h		ds.w 1		; Height in blocks
(1)   79/FFFFFFFFFFFF021A :                     ; md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   80/FFFFFFFFFFFF021A :                     ; md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   81/FFFFFFFFFFFF021A :                     ; md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   82/FFFFFFFFFFFF021A :                     ; md_bg_xinc_r	ds.w 1
(1)   83/FFFFFFFFFFFF021A :                     ; md_bg_yinc_u	ds.w 1
(1)   84/FFFFFFFFFFFF021A :                     ; md_bg_yinc_d	ds.w 1
(1)   85/FFFFFFFFFFFF021A :                     ; md_bg_x_old	ds.w 1		; OLD X position
(1)   86/FFFFFFFFFFFF021A :                     ; md_bg_y_old	ds.w 1		; OLD Y position
(1)   87/FFFFFFFFFFFF021A :                     ; md_bg_vpos	ds.w 1		; VRAM output for map
(1)   88/FFFFFFFFFFFF021A :                     ; md_bg_vram	ds.w 1		; VRAM start for cells
(1)   89/FFFFFFFFFFFF021A :                     ; md_bg_low	ds.l 1		; MAIN layout data
(1)   90/FFFFFFFFFFFF021A :                     ; md_bg_hi	ds.l 1		; HI layout data
(1)   91/FFFFFFFFFFFF021A :                     ; md_bg_blk	ds.l 1		; Block data
(1)   92/FFFFFFFFFFFF021A :                     ; md_bg_col	ds.l 1		; Collision data (if needed)
(1)   93/FFFFFFFFFFFF021A :                     ; md_bg_x		ds.l 1		; X pos 0000.0000
(1)   94/FFFFFFFFFFFF021A :                     ; md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   95/FFFFFFFFFFFF021A :                     ; sizeof_mdbg	ds.l 0
(1)   96/FFFFFFFFFFFF021A :                     ; 		endstruct
(1)   97/FFFFFFFFFFFF021A :                     ;
(1)   98/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)   99/FFFFFFFFFFFF021A :                     ; ; object struct
(1)  100/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  101/FFFFFFFFFFFF021A :                     ;
(1)  102/FFFFFFFFFFFF021A :                     ; 		struct 0
(1)  103/FFFFFFFFFFFF021A :                     ; obj_code	ds.l 1		; Object code
(1)  104/FFFFFFFFFFFF021A :                     ; obj_size	ds.l 1		; Object size (see below)
(1)  105/FFFFFFFFFFFF021A :                     ; obj_x		ds.l 1		; Object X Position
(1)  106/FFFFFFFFFFFF021A :                     ; obj_y		ds.l 1		; Object Y Position
(1)  107/FFFFFFFFFFFF021A :                     ; obj_map		ds.l 1		; Object image settings
(1)  108/FFFFFFFFFFFF021A :                     ; obj_vram	ds.w 1		; Object VRAM position (MD-side only)
(1)  109/FFFFFFFFFFFF021A :                     ; obj_x_spd	ds.w 1		; Object X Speed
(1)  110/FFFFFFFFFFFF021A :                     ; obj_y_spd	ds.w 1		; Object Y Speed
(1)  111/FFFFFFFFFFFF021A :                     ; obj_anim_indx	ds.w 1		; Object animation increment (obj_anim + obj_anim_indx)
(1)  112/FFFFFFFFFFFF021A :                     ; obj_anim_id	ds.w 1		; Object animation to read (current|saved)
(1)  113/FFFFFFFFFFFF021A :                     ; obj_frame	ds.w 1		; Object display frame (MD: $FFFF, MARS: $YY,$XX)
(1)  114/FFFFFFFFFFFF021A :                     ; obj_anim_spd	ds.b 1		; Object animation delay
(1)  115/FFFFFFFFFFFF021A :                     ; obj_index	ds.b 1		; Object code index
(1)  116/FFFFFFFFFFFF021A :                     ; obj_subid	ds.b 1		; Object SubID
(1)  117/FFFFFFFFFFFF021A :                     ; obj_set		ds.b 1		; Object settings
(1)  118/FFFFFFFFFFFF021A :                     ; obj_status	ds.b 1		; Object custom status
(1)  119/FFFFFFFFFFFF021A :                     ; obj_spwnid	ds.b 1		; Object respawn index (this - 1)
(1)  120/FFFFFFFFFFFF021A :                     ; obj_ram		ds.b $40	; Object RAM
(1)  121/FFFFFFFFFFFF021A :                     ; sizeof_mdobj	ds.l 0
(1)  122/FFFFFFFFFFFF021A :                     ; 		endstruct
(1)  123/FFFFFFFFFFFF021A :                     ;
(1)  124/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  125/FFFFFFFFFFFF021A :                     ; ; obj_settings
(1)  126/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  127/FFFFFFFFFFFF021A :                     ;
(1)  128/FFFFFFFFFFFF021A :                     ; bitobj_Mars	equ	7	; This object is for 32X side.
(1)  129/FFFFFFFFFFFF021A :                     ; bitobj_flipV	equ	1	; set to flip Sprite Vertically
(1)  130/FFFFFFFFFFFF021A :                     ; bitobj_flipH	equ	0	; set to flip Sprite Horizontally
(1)  131/FFFFFFFFFFFF021A :                     ;
(1)  132/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  133/FFFFFFFFFFFF021A :                     ; ; obj_set
(1)  134/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  135/FFFFFFFFFFFF021A :                     ;
(1)  136/FFFFFFFFFFFF021A :                     ; bitobj_air	equ	0	; set if floating/jumping
(1)  137/FFFFFFFFFFFF021A :                     ;
(1)  138/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  139/FFFFFFFFFFFF021A :                     ; ; obj_size
(1)  140/FFFFFFFFFFFF021A :                     ; ; --------------------------------
(1)  141/FFFFFFFFFFFF021A :                     ;
(1)  142/FFFFFFFFFFFF021A :                     ; at_u		equ	3
(1)  143/FFFFFFFFFFFF021A :                     ; at_d		equ	2
(1)  144/FFFFFFFFFFFF021A :                     ; at_l		equ	1
(1)  145/FFFFFFFFFFFF021A :                     ; at_r		equ	0
(1)  146/FFFFFFFFFFFF021A :                     
(1)  147/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)  148/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)  149/FFFFFFFFFFFF021A :                     ; Video RAM
(1)  150/FFFFFFFFFFFF021A :                     ; ----------------------------------------------------------------
(1)  151/FFFFFFFFFFFF021A :                     
(1)  152/FFFFFFFFFFFF021A : (MACRO)             			struct RAM_MdVideo
(1)  152/FFFFFFFFFFFF021A : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)  152/     AE0 :                                     dephase
(1)  152/     AE0 : =$AE0               GLBL_LASTORG    set *
(1)  152/FFFFFFFFFFFF7800 :                                     phase RAM_MDVIDEO
(1)  153/FFFFFFFFFFFF7800 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  154/FFFFFFFFFFFF7BC0 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  155/FFFFFFFFFFFF7C10 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  156/FFFFFFFFFFFF8070 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  157/FFFFFFFFFFFF8150 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  158/FFFFFFFFFFFF81D0 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  159/FFFFFFFFFFFF83D0 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  160/FFFFFFFFFFFF8450 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  161/FFFFFFFFFFFF8454 :                     RAM_VdpExWrite		ds.w 1
(1)  162/FFFFFFFFFFFF8456 :                     RAM_SprDrwPz		ds.w 8*70		; External sprite pieces
(1)  163/FFFFFFFFFFFF88B6 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  164/FFFFFFFFFFFF8A36 :                     RAM_SprDrwCntr		ds.w 1
(1)  165/FFFFFFFFFFFF8A38 :                     RAM_SprShowIndx		ds.w 1
(1)  166/FFFFFFFFFFFF8A3A :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  167/FFFFFFFFFFFF8A3C :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  168/FFFFFFFFFFFF8A3E :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  169/FFFFFFFFFFFF8A40 :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  170/FFFFFFFFFFFF8A42 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  171/FFFFFFFFFFFF8A44 :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  172/FFFFFFFFFFFF8A46 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  173/FFFFFFFFFFFF8A48 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  174/FFFFFFFFFFFF8A4A :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  175/FFFFFFFFFFFF8A4C :                     RAM_FadeMarsDelay	ds.w 1
(1)  176/FFFFFFFFFFFF8A4E :                     RAM_FadeMarsTmr		ds.w 1
(1)  177/FFFFFFFFFFFF8A50 :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  178/FFFFFFFFFFFF8A68 :                     sizeof_mdvid		ds.l 0
(1)  179/FFFFFFFFFFFF8A68 : (MACRO)             			endstruct
(1)  179/FFFFFFFFFFFF7800 :                                     !org GLBL_LASTORG
(1)  179/FFFFFFFFFFFF021A :                                     phase GLBL_LASTPC
(1)  180/FFFFFFFFFFFF021A :                     
(1)  181/FFFFFFFFFFFF021A : (MACRO)             			erreport "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  182/FFFFFFFFFFFF021A :                     
(1)  183/FFFFFFFFFFFF021A :                     ; ====================================================================
(1)  184/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)  185/FFFFFFFFFFFF021A :                     ; Init Genesis video
(1)  186/FFFFFFFFFFFF021A :                     ; --------------------------------------------------------
(1)  187/FFFFFFFFFFFF021A :                     
(1)  188/FFFFFFFFFFFF021A :                     Video_Init:
(1)  189/FFFFFFFFFFFF021A : 4DF9 FFFF 7800      		lea	(RAM_MdVideo),a6	; Clear our RAM section
(1)  190/FFFFFFFFFFFF0220 : 7C00                		moveq	#0,d6
(1)  191/FFFFFFFFFFFF0222 : 3E3C 1267           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  192/FFFFFFFFFFFF0226 :                     .clrram:
(1)  193/FFFFFFFFFFFF0226 : 1CC6                		move.b	d6,(a6)+
(1)  194/FFFFFFFFFFFF0228 : 51CF FFFC           		dbf	d7,.clrram
(1)  195/FFFFFFFFFFFF022C : 4DFA 0042           		lea	list_vdpregs(pc),a6	; Write "cache'd" VDP registers
(1)  196/FFFFFFFFFFFF0230 : 4BF8 8A50           		lea	(RAM_VdpRegs).w,a5
(1)  197/FFFFFFFFFFFF0234 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  198/FFFFFFFFFFFF023A : 3C3C 8000           		move.w	#$8000,d6
(1)  199/FFFFFFFFFFFF023E : 3E3C 0012           		move.w	#19-1,d7
(1)  200/FFFFFFFFFFFF0242 :                     .loop:
(1)  201/FFFFFFFFFFFF0242 : 1C1E                		move.b	(a6)+,d6
(1)  202/FFFFFFFFFFFF0244 : 1AC6                		move.b	d6,(a5)+
(1)  203/FFFFFFFFFFFF0246 : 3886                		move.w	d6,(a4)
(1)  204/FFFFFFFFFFFF0248 : DC7C 0100           		add.w	#$100,d6
(1)  205/FFFFFFFFFFFF024C : 51CF FFF4           		dbf	d7,.loop
(1)  206/FFFFFFFFFFFF0250 :                     .exit:
(1)  207/FFFFFFFFFFFF0250 :                     
(1)  208/FFFFFFFFFFFF0250 :                     ; --------------------------------------------------------
(1)  209/FFFFFFFFFFFF0250 :                     ; Video_Update
(1)  210/FFFFFFFFFFFF0250 :                     ;
(1)  211/FFFFFFFFFFFF0250 :                     ; Writes register data stored in RAM to VDP
(1)  212/FFFFFFFFFFFF0250 :                     ; from Registers $80 to $90
(1)  213/FFFFFFFFFFFF0250 :                     ;
(1)  214/FFFFFFFFFFFF0250 :                     ; WINDOW registers $91 and $92 are written
(1)  215/FFFFFFFFFFFF0250 :                     ; manually.
(1)  216/FFFFFFFFFFFF0250 :                     ;
(1)  217/FFFFFFFFFFFF0250 :                     ; Breaks:
(1)  218/FFFFFFFFFFFF0250 :                     ; d6-d7,a5-a6
(1)  219/FFFFFFFFFFFF0250 :                     ; --------------------------------------------------------
(1)  220/FFFFFFFFFFFF0250 :                     
(1)  221/FFFFFFFFFFFF0250 :                     Video_Update:
(1)  222/FFFFFFFFFFFF0250 : 4DF8 8A50           		lea	(RAM_VdpRegs).w,a6
(1)  223/FFFFFFFFFFFF0254 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  224/FFFFFFFFFFFF025A : 3C3C 8000           		move.w	#$8000,d6
(1)  225/FFFFFFFFFFFF025E : 3E3C 0010           		move.w	#17-1,d7
(1)  226/FFFFFFFFFFFF0262 :                     .loop:
(1)  227/FFFFFFFFFFFF0262 : 1C1E                		move.b	(a6)+,d6
(1)  228/FFFFFFFFFFFF0264 : 3A86                		move.w	d6,(a5)
(1)  229/FFFFFFFFFFFF0266 : 0646 0100           		addi.w	#$100,d6
(1)  230/FFFFFFFFFFFF026A : 51CF FFF6           		dbf	d7,.loop
(1)  231/FFFFFFFFFFFF026E :                     .exit:
(1)  232/FFFFFFFFFFFF026E : 4E75                		rts
(1)  233/FFFFFFFFFFFF0270 :                     
(1)  234/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)  235/FFFFFFFFFFFF0270 :                     
(1)  236/FFFFFFFFFFFF0270 :                     list_vdpregs:
(1)  237/FFFFFFFFFFFF0270 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  238/FFFFFFFFFFFF0271 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  239/FFFFFFFFFFFF0272 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  240/FFFFFFFFFFFF0273 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  241/FFFFFFFFFFFF0274 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  242/FFFFFFFFFFFF0275 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  243/FFFFFFFFFFFF0276 : 00                  		dc.b $00			; Unused
(1)  244/FFFFFFFFFFFF0277 : 00                  		dc.b $00			; Background color: 0
(1)  245/FFFFFFFFFFFF0278 : 00                  		dc.b $00			; Unused
(1)  246/FFFFFFFFFFFF0279 : 00                  		dc.b $00			; Unused
(1)  247/FFFFFFFFFFFF027A : 00                  		dc.b $00			; HInt value
(1)  248/FFFFFFFFFFFF027B : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  249/FFFFFFFFFFFF027C : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  250/FFFFFFFFFFFF027D : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  251/FFFFFFFFFFFF027E : 00                  		dc.b $00			; Unused
(1)  252/FFFFFFFFFFFF027F : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  253/FFFFFFFFFFFF0280 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  254/FFFFFFFFFFFF0281 : 00                  		dc.b $00
(1)  255/FFFFFFFFFFFF0282 : 00                  		dc.b $00
(1)  256/FFFFFFFFFFFF0283 :                     		align 2
(1)  257/FFFFFFFFFFFF0284 :                     
(1)  258/FFFFFFFFFFFF0284 :                     ; Default PRINT palette
(1)  259/FFFFFFFFFFFF0284 : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  260/FFFFFFFFFFFF0294 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  261/FFFFFFFFFFFF02A4 :                     ASCII_PAL_e:
(1)  262/FFFFFFFFFFFF02A4 :                     		align 2
(1)  263/FFFFFFFFFFFF02A4 :                     
(1)  264/FFFFFFFFFFFF02A4 :                     ; --------------------------------------------------------
(1)  265/FFFFFFFFFFFF02A4 :                     ; Video_Clear
(1)  266/FFFFFFFFFFFF02A4 :                     ;
(1)  267/FFFFFFFFFFFF02A4 :                     ; Clear all video data from VRAM
(1)  268/FFFFFFFFFFFF02A4 :                     ; --------------------------------------------------------
(1)  269/FFFFFFFFFFFF02A4 :                     
(1)  270/FFFFFFFFFFFF02A4 :                     Video_Clear:
(1)  271/FFFFFFFFFFFF02A4 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  272/FFFFFFFFFFFF02A4 :                     ; 		move.w	#0,d1
(1)  273/FFFFFFFFFFFF02A4 :                     ; 		move.w	#$57F*$20,d2
(1)  274/FFFFFFFFFFFF02A4 :                     ; 		bsr	Video_Fill
(1)  275/FFFFFFFFFFFF02A4 :                     
(1)  276/FFFFFFFFFFFF02A4 :                     Video_ClearScreen:
(1)  277/FFFFFFFFFFFF02A4 : 7000                		moveq	#0,d0
(1)  278/FFFFFFFFFFFF02A6 : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  279/FFFFFFFFFFFF02AA : 1238 8A52           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  280/FFFFFFFFFFFF02AE : 0241 0038           		andi.w	#%111000,d1
(1)  281/FFFFFFFFFFFF02B2 : E149                		lsl.w	#8,d1
(1)  282/FFFFFFFFFFFF02B4 : E549                		lsl.w	#2,d1
(1)  283/FFFFFFFFFFFF02B6 : 6100 0546           		bsr	Video_Fill
(1)  284/FFFFFFFFFFFF02BA : 1238 8A54           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  285/FFFFFFFFFFFF02BE : 0241 0007           		andi.w	#%000111,d1
(1)  286/FFFFFFFFFFFF02C2 : E149                		lsl.w	#8,d1
(1)  287/FFFFFFFFFFFF02C4 : EB49                		lsl.w	#5,d1
(1)  288/FFFFFFFFFFFF02C6 : 6100 0536           		bsr	Video_Fill
(1)  289/FFFFFFFFFFFF02CA : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  290/FFFFFFFFFFFF02CE : 1238 8A53           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  291/FFFFFFFFFFFF02D2 : 0241 003E           		andi.w	#%111110,d1
(1)  292/FFFFFFFFFFFF02D6 : E149                		lsl.w	#8,d1
(1)  293/FFFFFFFFFFFF02D8 : E549                		lsl.w	#2,d1
(1)  294/FFFFFFFFFFFF02DA : 6100 0522           		bsr	Video_Fill
(1)  295/FFFFFFFFFFFF02DE :                     
(1)  296/FFFFFFFFFFFF02DE :                     	; RAM cleanup
(1)  297/FFFFFFFFFFFF02DE : 41F9 FFFF 7800      		lea	(RAM_HorScroll),a0
(1)  298/FFFFFFFFFFFF02E4 : 3E3C 00EF           		move.w	#240-1,d7
(1)  299/FFFFFFFFFFFF02E8 : 7000                		moveq	#0,d0
(1)  300/FFFFFFFFFFFF02EA :                     .xnext:
(1)  301/FFFFFFFFFFFF02EA : 20C0                		move.l	d0,(a0)+
(1)  302/FFFFFFFFFFFF02EC : 51CF FFFC           		dbf	d7,.xnext
(1)  303/FFFFFFFFFFFF02F0 : 41F9 FFFF 7BC0      		lea	(RAM_VerScroll),a0
(1)  304/FFFFFFFFFFFF02F6 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  305/FFFFFFFFFFFF02FA : 7000                		moveq	#0,d0
(1)  306/FFFFFFFFFFFF02FC :                     .ynext:
(1)  307/FFFFFFFFFFFF02FC : 20C0                		move.l	d0,(a0)+
(1)  308/FFFFFFFFFFFF02FE : 51CF FFFC           		dbf	d7,.ynext
(1)  309/FFFFFFFFFFFF0302 : 41F9 FFFF 7C10      		lea	(RAM_Sprites),a0
(1)  310/FFFFFFFFFFFF0308 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  311/FFFFFFFFFFFF030C : 7000                		moveq	#0,d0
(1)  312/FFFFFFFFFFFF030E :                     .snext:
(1)  313/FFFFFFFFFFFF030E : 20C0                		move.l	d0,(a0)+
(1)  314/FFFFFFFFFFFF0310 : 51CF FFFC           		dbf	d7,.snext
(1)  315/FFFFFFFFFFFF0314 : 41F8 8150           		lea	(RAM_Palette),a0
(1)  316/FFFFFFFFFFFF0318 : 43F8 83D0           		lea	(RAM_PaletteFd),a1
(1)  317/FFFFFFFFFFFF031C : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  318/FFFFFFFFFFFF0320 : 7000                		moveq	#0,d0
(1)  319/FFFFFFFFFFFF0322 :                     .pnext:
(1)  320/FFFFFFFFFFFF0322 : 20C0                		move.l	d0,(a0)+
(1)  321/FFFFFFFFFFFF0324 : 22C0                		move.l	d0,(a1)+
(1)  322/FFFFFFFFFFFF0326 : 51CF FFFA           		dbf	d7,.pnext
(1)  324/FFFFFFFFFFFF032A : 41F8 9D00           		lea	(RAM_MdDreq+Dreq_Palette),a0
(1)  325/FFFFFFFFFFFF032E : 43F8 81D0           		lea	(RAM_MdMarsPalFd),a1
(1)  326/FFFFFFFFFFFF0332 : 3E3C 007F           		move.w	#(256/2)-1,d7
(1)  327/FFFFFFFFFFFF0336 : 7000                		moveq	#0,d0
(1)  328/FFFFFFFFFFFF0338 :                     .pmnext:
(1)  329/FFFFFFFFFFFF0338 : 20C0                		move.l	d0,(a0)+
(1)  330/FFFFFFFFFFFF033A : 22C0                		move.l	d0,(a1)+
(1)  331/FFFFFFFFFFFF033C : 51CF FFFA           		dbf	d7,.pmnext
(1)  333/FFFFFFFFFFFF0340 : 4E75                		rts
(1)  334/FFFFFFFFFFFF0342 :                     
(1)  335/FFFFFFFFFFFF0342 :                     ; ====================================================================
(1)  336/FFFFFFFFFFFF0342 :                     ; ----------------------------------------------------------------
(1)  337/FFFFFFFFFFFF0342 :                     ; Generic screen-drawing routines
(1)  338/FFFFFFFFFFFF0342 :                     ; ----------------------------------------------------------------
(1)  339/FFFFFFFFFFFF0342 :                     
(1)  340/FFFFFFFFFFFF0342 :                     ; --------------------------------------------------------
(1)  341/FFFFFFFFFFFF0342 :                     ; Video_LoadMap
(1)  342/FFFFFFFFFFFF0342 :                     ;
(1)  343/FFFFFFFFFFFF0342 :                     ; Loads map data, in Horizontal order
(1)  344/FFFFFFFFFFFF0342 :                     ; Can autodetect layer width, height and
(1)  345/FFFFFFFFFFFF0342 :                     ; double interlace mode
(1)  346/FFFFFFFFFFFF0342 :                     ;
(1)  347/FFFFFFFFFFFF0342 :                     ; Input:
(1)  348/FFFFFFFFFFFF0342 :                     ; a0 - Map data
(1)  349/FFFFFFFFFFFF0342 :                     ;
(1)  350/FFFFFFFFFFFF0342 :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  351/FFFFFFFFFFFF0342 :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  352/FFFFFFFFFFFF0342 :                     ; d2 | WORD - VRAM
(1)  353/FFFFFFFFFFFF0342 :                     ;
(1)  354/FFFFFFFFFFFF0342 :                     ; Breaks:
(1)  355/FFFFFFFFFFFF0342 :                     ; d4-d7,a6
(1)  356/FFFFFFFFFFFF0342 :                     ; --------------------------------------------------------
(1)  357/FFFFFFFFFFFF0342 :                     
(1)  358/FFFFFFFFFFFF0342 :                     Video_LoadMap:
(1)  359/FFFFFFFFFFFF0342 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  360/FFFFFFFFFFFF0348 : 6100 0222           		bsr	vid_PickLayer
(1)  361/FFFFFFFFFFFF034C : 3A01                		move.w	d1,d5		; Start here
(1)  362/FFFFFFFFFFFF034E :                     .yloop:
(1)  363/FFFFFFFFFFFF034E : 4845                		swap	d5
(1)  364/FFFFFFFFFFFF0350 : 2D44 0004           		move.l	d4,4(a6)
(1)  365/FFFFFFFFFFFF0354 : 2E01                		move.l	d1,d7
(1)  366/FFFFFFFFFFFF0356 : 4847                		swap	d7
(1)  367/FFFFFFFFFFFF0358 :                     .xloop:
(1)  368/FFFFFFFFFFFF0358 : 3A18                		move.w	(a0)+,d5
(1)  369/FFFFFFFFFFFF035A : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  370/FFFFFFFFFFFF035E : 6606                		bne.s	.nonull
(1)  371/FFFFFFFFFFFF0360 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  372/FFFFFFFFFFFF0364 : 6002                		bra.s	.cont
(1)  373/FFFFFFFFFFFF0366 :                     .nonull:
(1)  374/FFFFFFFFFFFF0366 : DA42                		add.w	d2,d5
(1)  375/FFFFFFFFFFFF0368 :                     .cont:
(1)  376/FFFFFFFFFFFF0368 :                     
(1)  377/FFFFFFFFFFFF0368 :                     	; Check for double interlace
(1)  378/FFFFFFFFFFFF0368 : 4847                		swap	d7
(1)  379/FFFFFFFFFFFF036A : 1E38 8A5C           		move.b	(RAM_VdpRegs+$C).w,d7
(1)  380/FFFFFFFFFFFF036E : CE7C 0006           		and.w	#%110,d7
(1)  381/FFFFFFFFFFFF0372 : BE7C 0006           		cmp.w	#%110,d7
(1)  382/FFFFFFFFFFFF0376 : 660E                		bne.s	.nodble
(1)  383/FFFFFFFFFFFF0378 : 3E05                		move.w	d5,d7
(1)  384/FFFFFFFFFFFF037A : E24F                		lsr.w	#1,d7
(1)  385/FFFFFFFFFFFF037C : CE7C 07FF           		and.w	#$7FF,d7
(1)  386/FFFFFFFFFFFF0380 : CA7C F800           		and.w	#$F800,d5
(1)  387/FFFFFFFFFFFF0384 : 8A47                		or.w	d7,d5
(1)  388/FFFFFFFFFFFF0386 :                     .nodble:
(1)  389/FFFFFFFFFFFF0386 : 4847                		swap	d7
(1)  390/FFFFFFFFFFFF0388 : 3C85                		move.w	d5,(a6)
(1)  391/FFFFFFFFFFFF038A : 51CF FFCC           		dbf	d7,.xloop
(1)  392/FFFFFFFFFFFF038E : D886                		add.l	d6,d4
(1)  393/FFFFFFFFFFFF0390 : 4845                		swap	d5
(1)  394/FFFFFFFFFFFF0392 : 51CD FFBA           		dbf	d5,.yloop
(1)  395/FFFFFFFFFFFF0396 : 4E75                		rts
(1)  396/FFFFFFFFFFFF0398 :                     
(1)  397/FFFFFFFFFFFF0398 :                     ; --------------------------------------------------------
(1)  398/FFFFFFFFFFFF0398 :                     ; Video_LoadMap_Vert
(1)  399/FFFFFFFFFFFF0398 :                     ;
(1)  400/FFFFFFFFFFFF0398 :                     ; Load map data, Vertical order
(1)  401/FFFFFFFFFFFF0398 :                     ;
(1)  402/FFFFFFFFFFFF0398 :                     ; a0 - Map data
(1)  403/FFFFFFFFFFFF0398 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  404/FFFFFFFFFFFF0398 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  405/FFFFFFFFFFFF0398 :                     ; d2 | WORD - VRAM
(1)  406/FFFFFFFFFFFF0398 :                     
(1)  407/FFFFFFFFFFFF0398 :                     ; Breaks:
(1)  408/FFFFFFFFFFFF0398 :                     ; a4-a5,d4-d7
(1)  409/FFFFFFFFFFFF0398 :                     ; --------------------------------------------------------
(1)  410/FFFFFFFFFFFF0398 :                     
(1)  411/FFFFFFFFFFFF0398 :                     Video_LoadMap_Vert:
(1)  412/FFFFFFFFFFFF0398 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  413/FFFFFFFFFFFF039E : 6100 01CC           		bsr	vid_PickLayer
(1)  414/FFFFFFFFFFFF03A2 : 2A01                		move.l	d1,d5		; Start here
(1)  415/FFFFFFFFFFFF03A4 : 4845                		swap	d5
(1)  416/FFFFFFFFFFFF03A6 :                     .xloop:
(1)  417/FFFFFFFFFFFF03A6 : 4845                		swap	d5
(1)  418/FFFFFFFFFFFF03A8 : 2F04                		move.l	d4,-(sp)
(1)  419/FFFFFFFFFFFF03AA : 3E01                		move.w	d1,d7
(1)  420/FFFFFFFFFFFF03AC : 0838 0002 8A5C      		btst	#2,(RAM_VdpRegs+$C).w
(1)  421/FFFFFFFFFFFF03B2 : 6702                		beq.s	.yloop
(1)  422/FFFFFFFFFFFF03B4 : E24F                		lsr.w	#1,d7
(1)  423/FFFFFFFFFFFF03B6 :                     .yloop:
(1)  424/FFFFFFFFFFFF03B6 : 2944 0004           		move.l	d4,4(a4)
(1)  425/FFFFFFFFFFFF03BA : 3A10                		move.w	(a0),d5
(1)  426/FFFFFFFFFFFF03BC : BA7C FFFF           		cmp.w	#-1,d5
(1)  427/FFFFFFFFFFFF03C0 : 6606                		bne.s	.nonull
(1)  428/FFFFFFFFFFFF03C2 : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  429/FFFFFFFFFFFF03C6 : 6002                		bra.s	.cont
(1)  430/FFFFFFFFFFFF03C8 :                     .nonull:
(1)  431/FFFFFFFFFFFF03C8 : DA42                		add.w	d2,d5
(1)  432/FFFFFFFFFFFF03CA :                     .cont:
(1)  433/FFFFFFFFFFFF03CA : 4847                		swap	d7
(1)  434/FFFFFFFFFFFF03CC : D0FC 0002           		adda	#2,a0
(1)  435/FFFFFFFFFFFF03D0 : 0838 0002 8A5C      		btst	#2,(RAM_VdpRegs+$C).w
(1)  436/FFFFFFFFFFFF03D6 : 6712                		beq.s	.nodble
(1)  437/FFFFFFFFFFFF03D8 : D0FC 0002           		adda	#2,a0
(1)  438/FFFFFFFFFFFF03DC : 3E05                		move.w	d5,d7
(1)  439/FFFFFFFFFFFF03DE : E24F                		lsr.w	#1,d7
(1)  440/FFFFFFFFFFFF03E0 : CE7C 07FF           		and.w	#$7FF,d7
(1)  441/FFFFFFFFFFFF03E4 : CA7C F800           		and.w	#$F800,d5
(1)  442/FFFFFFFFFFFF03E8 : 8A47                		or.w	d7,d5
(1)  443/FFFFFFFFFFFF03EA :                     .nodble:
(1)  444/FFFFFFFFFFFF03EA : 4847                		swap	d7
(1)  445/FFFFFFFFFFFF03EC : 3885                		move.w	d5,(a4)
(1)  446/FFFFFFFFFFFF03EE : D886                		add.l	d6,d4
(1)  447/FFFFFFFFFFFF03F0 : 51CF FFC4           		dbf	d7,.yloop
(1)  448/FFFFFFFFFFFF03F4 :                     .outdbl:
(1)  449/FFFFFFFFFFFF03F4 : 281F                		move.l	(sp)+,d4
(1)  450/FFFFFFFFFFFF03F6 : D8BC 0002 0000      		add.l	#$20000,d4
(1)  451/FFFFFFFFFFFF03FC : 4845                		swap	d5
(1)  452/FFFFFFFFFFFF03FE : 51CD FFA6           		dbf	d5,.xloop
(1)  453/FFFFFFFFFFFF0402 : 4E75                		rts
(1)  454/FFFFFFFFFFFF0404 :                     
(1)  455/FFFFFFFFFFFF0404 :                     ; ====================================================================
(1)  456/FFFFFFFFFFFF0404 :                     ; ----------------------------------------------------------------
(1)  457/FFFFFFFFFFFF0404 :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  458/FFFFFFFFFFFF0404 :                     ; ----------------------------------------------------------------
(1)  459/FFFFFFFFFFFF0404 :                     
(1)  460/FFFFFFFFFFFF0404 :                     ; --------------------------------------------------------
(1)  461/FFFFFFFFFFFF0404 :                     ; Video_PrintInit
(1)  462/FFFFFFFFFFFF0404 :                     ;
(1)  463/FFFFFFFFFFFF0404 :                     ; Initializes the default Graphics and Palette
(1)  464/FFFFFFFFFFFF0404 :                     ; for the font.
(1)  465/FFFFFFFFFFFF0404 :                     ;
(1)  466/FFFFFFFFFFFF0404 :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  467/FFFFFFFFFFFF0404 :                     ; *** MAKE SURE SH2 IS NOT READING ROM DATA ***
(1)  468/FFFFFFFFFFFF0404 :                     ; --------------------------------------------------------
(1)  469/FFFFFFFFFFFF0404 :                     
(1)  470/FFFFFFFFFFFF0404 :                     Video_PrintInit:
(1)  471/FFFFFFFFFFFF0404 : 203C 0003 0000      		move.l	#ASCII_FONT,d0
(1)  472/FFFFFFFFFFFF040A : 323C B000           		move.w	#cell_vram(varPrintVram),d1
(1)  473/FFFFFFFFFFFF040E : 343C 0C00           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  474/FFFFFFFFFFFF0412 : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  475/FFFFFFFFFFFF0416 : 0443 0020           		subi.w	#$20,d3
(1)  476/FFFFFFFFFFFF041A : 31C3 8A3E           		move.w	d3,(RAM_VidPrntVram).w
(1)  477/FFFFFFFFFFFF041E : 6100 04D8           		bsr	Video_LoadArt
(1)  478/FFFFFFFFFFFF0422 :                     Video_PrintPal:
(1)  479/FFFFFFFFFFFF0422 : 41FA FE60           		lea	ASCII_PAL(pc),a0
(1)  480/FFFFFFFFFFFF0426 : 7030                		moveq	#(varPrintPal<<4),d0
(1)  481/FFFFFFFFFFFF0428 : 323C 000F           		move.w	#$F,d1
(1)  482/FFFFFFFFFFFF042C : 6100 01F0           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  483/FFFFFFFFFFFF0430 : 6000 01E2           		bra	Video_FadePal
(1)  484/FFFFFFFFFFFF0434 :                     
(1)  485/FFFFFFFFFFFF0434 :                     ; --------------------------------------------------------
(1)  486/FFFFFFFFFFFF0434 :                     ; Video_Print
(1)  487/FFFFFFFFFFFF0434 :                     ;
(1)  488/FFFFFFFFFFFF0434 :                     ; Prints string to layer
(1)  489/FFFFFFFFFFFF0434 :                     ; requires ASCII font
(1)  490/FFFFFFFFFFFF0434 :                     ;
(1)  491/FFFFFFFFFFFF0434 :                     ; a0 | DATA - String data w/special characters +
(1)  492/FFFFFFFFFFFF0434 :                     ;             list of RAM locations to read
(1)  493/FFFFFFFFFFFF0434 :                     ; d0 | LONG - Print location on-screen:
(1)  494/FFFFFFFFFFFF0434 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  495/FFFFFFFFFFFF0434 :                     ;
(1)  496/FFFFFFFFFFFF0434 :                     ; Special characters:
(1)  497/FFFFFFFFFFFF0434 :                     ; "//b" - Shows BYTE value
(1)  498/FFFFFFFFFFFF0434 :                     ; "//w" - Shows WORD value
(1)  499/FFFFFFFFFFFF0434 :                     ; "//l" - Shows LONG value
(1)  500/FFFFFFFFFFFF0434 :                     ;   $0A - Next line
(1)  501/FFFFFFFFFFFF0434 :                     ;   $00 - End of line
(1)  502/FFFFFFFFFFFF0434 :                     ;
(1)  503/FFFFFFFFFFFF0434 :                     ; After $00, put your RAM addresses in LONGS
(1)  504/FFFFFFFFFFFF0434 :                     ; don't forget to put align 2 at the end.
(1)  505/FFFFFFFFFFFF0434 :                     ;
(1)  506/FFFFFFFFFFFF0434 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  507/FFFFFFFFFFFF0434 :                     ;
(1)  508/FFFFFFFFFFFF0434 :                     ; Breaks:
(1)  509/FFFFFFFFFFFF0434 :                     ; d4-d7,a4-a6
(1)  510/FFFFFFFFFFFF0434 :                     ; --------------------------------------------------------
(1)  511/FFFFFFFFFFFF0434 :                     
(1)  512/FFFFFFFFFFFF0434 :                     Video_Print:
(1)  513/FFFFFFFFFFFF0434 :                     ; 		movem.l	d3-d7,-(sp)
(1)  514/FFFFFFFFFFFF0434 :                     ; 		movem.l	a4-a6,-(sp)
(1)  515/FFFFFFFFFFFF0434 :                     
(1)  516/FFFFFFFFFFFF0434 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  517/FFFFFFFFFFFF043A : 6100 0130           		bsr	vid_PickLayer
(1)  518/FFFFFFFFFFFF043E : 4BF8 88B6           		lea	(RAM_VidPrntList),a5
(1)  519/FFFFFFFFFFFF0442 :                     .newjump:
(1)  520/FFFFFFFFFFFF0442 : 2D44 0004           		move.l	d4,4(a6)
(1)  521/FFFFFFFFFFFF0446 : 2A04                		move.l	d4,d5
(1)  522/FFFFFFFFFFFF0448 :                     .loop:
(1)  523/FFFFFFFFFFFF0448 : 1E18                		move.b	(a0)+,d7
(1)  524/FFFFFFFFFFFF044A : 6772                		beq	.exit
(1)  525/FFFFFFFFFFFF044C : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  526/FFFFFFFFFFFF0450 : 6718                		beq.s	.next
(1)  527/FFFFFFFFFFFF0452 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  528/FFFFFFFFFFFF0456 : 6716                		beq.s	.special
(1)  529/FFFFFFFFFFFF0458 : 0247 00FF           		andi.w	#$FF,d7
(1)  530/FFFFFFFFFFFF045C :                     .puttext:
(1)  531/FFFFFFFFFFFF045C : DE78 8A3E           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  532/FFFFFFFFFFFF0460 : 3C87                		move.w	d7,(a6)
(1)  533/FFFFFFFFFFFF0462 : DABC 0002 0000      		add.l	#$20000,d5
(1)  534/FFFFFFFFFFFF0468 : 60DE                		bra.s	.loop
(1)  535/FFFFFFFFFFFF046A :                     ; Next line
(1)  536/FFFFFFFFFFFF046A :                     .next:
(1)  537/FFFFFFFFFFFF046A : D886                		add.l	d6,d4
(1)  538/FFFFFFFFFFFF046C : 60D4                		bra.s	.newjump
(1)  539/FFFFFFFFFFFF046E :                     
(1)  540/FFFFFFFFFFFF046E :                     ; Specials
(1)  541/FFFFFFFFFFFF046E :                     .special:
(1)  542/FFFFFFFFFFFF046E : 1E18                		move.b	(a0)+,d7
(1)  543/FFFFFFFFFFFF0470 : 0C07 0062           		cmpi.b	#"b",d7
(1)  544/FFFFFFFFFFFF0474 : 6712                		beq.s	.isbyte
(1)  545/FFFFFFFFFFFF0476 : 0C07 0077           		cmpi.b	#"w",d7
(1)  546/FFFFFFFFFFFF047A : 671E                		beq.s	.isword
(1)  547/FFFFFFFFFFFF047C : 0C07 006C           		cmpi.b	#"l",d7
(1)  548/FFFFFFFFFFFF0480 : 672A                		beq.s	.islong
(1)  549/FFFFFFFFFFFF0482 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  550/FFFFFFFFFFFF0486 : 60D4                		bra.s	.puttext
(1)  551/FFFFFFFFFFFF0488 :                     
(1)  552/FFFFFFFFFFFF0488 :                     	; TEMPORAL VALUES
(1)  553/FFFFFFFFFFFF0488 :                     .isbyte:
(1)  554/FFFFFFFFFFFF0488 : 2AC5                		move.l	d5,(a5)+
(1)  555/FFFFFFFFFFFF048A : 3AFC 0001           		move.w	#1,(a5)+
(1)  556/FFFFFFFFFFFF048E : DABC 0004 0000      		add.l	#$40000,d5
(1)  557/FFFFFFFFFFFF0494 : 2D45 0004           		move.l	d5,4(a6)
(1)  558/FFFFFFFFFFFF0498 : 60AE                		bra	.loop
(1)  559/FFFFFFFFFFFF049A :                     .isword:
(1)  560/FFFFFFFFFFFF049A : 2AC5                		move.l	d5,(a5)+
(1)  561/FFFFFFFFFFFF049C : 3AFC 0002           		move.w	#2,(a5)+
(1)  562/FFFFFFFFFFFF04A0 : DABC 0008 0000      		add.l	#$80000,d5
(1)  563/FFFFFFFFFFFF04A6 : 2D45 0004           		move.l	d5,4(a6)
(1)  564/FFFFFFFFFFFF04AA : 609C                		bra	.loop
(1)  565/FFFFFFFFFFFF04AC :                     .islong:
(1)  566/FFFFFFFFFFFF04AC : 2AC5                		move.l	d5,(a5)+
(1)  567/FFFFFFFFFFFF04AE : 3AFC 0003           		move.w	#3,(a5)+
(1)  568/FFFFFFFFFFFF04B2 : DABC 0010 0000      		add.l	#$100000,d5
(1)  569/FFFFFFFFFFFF04B8 : 2D45 0004           		move.l	d5,4(a6)
(1)  570/FFFFFFFFFFFF04BC : 608A                		bra	.loop
(1)  571/FFFFFFFFFFFF04BE :                     .exit:
(1)  572/FFFFFFFFFFFF04BE :                     
(1)  573/FFFFFFFFFFFF04BE :                     	; ----------------------------------------
(1)  574/FFFFFFFFFFFF04BE :                     	; Print values
(1)  575/FFFFFFFFFFFF04BE :                     	;
(1)  576/FFFFFFFFFFFF04BE :                     	; vvvv vvvv tttt
(1)  577/FFFFFFFFFFFF04BE :                     	; v - vdp pos
(1)  578/FFFFFFFFFFFF04BE :                     	; t - value type
(1)  579/FFFFFFFFFFFF04BE :                     	; ----------------------------------------
(1)  580/FFFFFFFFFFFF04BE :                     
(1)  581/FFFFFFFFFFFF04BE :                     	; reading byte by byte because longs doesn't get
(1)  582/FFFFFFFFFFFF04BE :                     	; aligned after $00...
(1)  583/FFFFFFFFFFFF04BE :                     
(1)  584/FFFFFFFFFFFF04BE : 7800                		moveq	#0,d4
(1)  585/FFFFFFFFFFFF04C0 : 7A00                		moveq	#0,d5
(1)  586/FFFFFFFFFFFF04C2 : 7C00                		moveq	#0,d6
(1)  587/FFFFFFFFFFFF04C4 : 4BF8 88B6           		lea	(RAM_VidPrntList),a5
(1)  588/FFFFFFFFFFFF04C8 :                     .nextv:
(1)  589/FFFFFFFFFFFF04C8 : 4A95                		tst.l	(a5)
(1)  590/FFFFFFFFFFFF04CA : 6700 009E           		beq	.nothing
(1)  591/FFFFFFFFFFFF04CE :                     
(1)  592/FFFFFFFFFFFF04CE :                     	; grab value
(1)  593/FFFFFFFFFFFF04CE : 7800                		moveq	#0,d4
(1)  594/FFFFFFFFFFFF04D0 : 1818                		move.b	(a0)+,d4
(1)  595/FFFFFFFFFFFF04D2 : E19C                		rol.l	#8,d4
(1)  596/FFFFFFFFFFFF04D4 : 1818                		move.b	(a0)+,d4
(1)  597/FFFFFFFFFFFF04D6 : E19C                		rol.l	#8,d4
(1)  598/FFFFFFFFFFFF04D8 : 1818                		move.b	(a0)+,d4
(1)  599/FFFFFFFFFFFF04DA : E19C                		rol.l	#8,d4
(1)  600/FFFFFFFFFFFF04DC : 1818                		move.b	(a0)+,d4
(1)  601/FFFFFFFFFFFF04DE : 2844                		movea.l	d4,a4
(1)  602/FFFFFFFFFFFF04E0 : 7800                		moveq	#0,d4
(1)  603/FFFFFFFFFFFF04E2 :                     
(1)  604/FFFFFFFFFFFF04E2 :                     	; get value
(1)  605/FFFFFFFFFFFF04E2 : 3C2D 0004           		move.w	4(a5),d6
(1)  606/FFFFFFFFFFFF04E6 : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  607/FFFFFFFFFFFF04EA : 660E                		bne.s	.vbyte
(1)  608/FFFFFFFFFFFF04EC : 1814                		move.b	(a4),d4
(1)  609/FFFFFFFFFFFF04EE : 2D55 0004           		move.l	(a5),4(a6)
(1)  610/FFFFFFFFFFFF04F2 : E91C                		rol.b	#4,d4
(1)  611/FFFFFFFFFFFF04F4 : 6158                		bsr.s	.donibl
(1)  612/FFFFFFFFFFFF04F6 : E91C                		rol.b	#4,d4
(1)  613/FFFFFFFFFFFF04F8 : 6154                		bsr.s	.donibl
(1)  614/FFFFFFFFFFFF04FA :                     .vbyte:
(1)  615/FFFFFFFFFFFF04FA : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  616/FFFFFFFFFFFF04FE : 661C                		bne.s	.vword
(1)  617/FFFFFFFFFFFF0500 : 1814                		move.b	(a4),d4
(1)  618/FFFFFFFFFFFF0502 : E15C                		rol.w	#8,d4
(1)  619/FFFFFFFFFFFF0504 : 182C 0001           		move.b	1(a4),d4
(1)  620/FFFFFFFFFFFF0508 : 2D55 0004           		move.l	(a5),4(a6)
(1)  621/FFFFFFFFFFFF050C : E95C                		rol.w	#4,d4
(1)  622/FFFFFFFFFFFF050E : 613E                		bsr.s	.donibl
(1)  623/FFFFFFFFFFFF0510 : E95C                		rol.w	#4,d4
(1)  624/FFFFFFFFFFFF0512 : 613A                		bsr.s	.donibl
(1)  625/FFFFFFFFFFFF0514 : E95C                		rol.w	#4,d4
(1)  626/FFFFFFFFFFFF0516 : 6136                		bsr.s	.donibl
(1)  627/FFFFFFFFFFFF0518 : E95C                		rol.w	#4,d4
(1)  628/FFFFFFFFFFFF051A : 6132                		bsr.s	.donibl
(1)  629/FFFFFFFFFFFF051C :                     .vword:
(1)  630/FFFFFFFFFFFF051C :                     
(1)  631/FFFFFFFFFFFF051C :                     	; TODO: might break on negative values
(1)  632/FFFFFFFFFFFF051C : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  633/FFFFFFFFFFFF0520 : 6624                		bne.s	.vlong
(1)  634/FFFFFFFFFFFF0522 : 1814                		move.b	(a4),d4
(1)  635/FFFFFFFFFFFF0524 : E19C                		rol.l	#8,d4
(1)  636/FFFFFFFFFFFF0526 : 182C 0001           		move.b	1(a4),d4
(1)  637/FFFFFFFFFFFF052A : E19C                		rol.l	#8,d4
(1)  638/FFFFFFFFFFFF052C : 182C 0002           		move.b	2(a4),d4
(1)  639/FFFFFFFFFFFF0530 : E19C                		rol.l	#8,d4
(1)  640/FFFFFFFFFFFF0532 : 182C 0003           		move.b	3(a4),d4
(1)  641/FFFFFFFFFFFF0536 : 2D55 0004           		move.l	(a5),4(a6)
(1)  642/FFFFFFFFFFFF053A : 3C3C 0007           		move.w	#7,d6
(1)  643/FFFFFFFFFFFF053E : E99C                .lngloop:	rol.l	#4,d4
(1)  644/FFFFFFFFFFFF0540 : 610C                		bsr.s	.donibl
(1)  645/FFFFFFFFFFFF0542 : 51CE FFFA           		dbf	d6,.lngloop
(1)  646/FFFFFFFFFFFF0546 :                     .vlong:
(1)  647/FFFFFFFFFFFF0546 : 429D                		clr.l	(a5)+
(1)  648/FFFFFFFFFFFF0548 : 425D                		clr.w	(a5)+
(1)  649/FFFFFFFFFFFF054A : 6000 FF7C           		bra	.nextv
(1)  650/FFFFFFFFFFFF054E :                     
(1)  651/FFFFFFFFFFFF054E :                     ; make nibble byte
(1)  652/FFFFFFFFFFFF054E :                     .donibl:
(1)  653/FFFFFFFFFFFF054E : 3A04                		move.w	d4,d5
(1)  654/FFFFFFFFFFFF0550 : 0245 000F           		andi.w	#%1111,d5
(1)  655/FFFFFFFFFFFF0554 : BA3C 000A           		cmp.b	#$A,d5
(1)  656/FFFFFFFFFFFF0558 : 6D04                		blt.s	.lowr
(1)  657/FFFFFFFFFFFF055A : DA3C 0007           		add.b	#7,d5
(1)  658/FFFFFFFFFFFF055E :                     .lowr:
(1)  659/FFFFFFFFFFFF055E : DA7C 0030           		add.w	#"0",d5
(1)  660/FFFFFFFFFFFF0562 : DA78 8A3E           		add.w	(RAM_VidPrntVram),d5
(1)  661/FFFFFFFFFFFF0566 : 3C85                		move.w	d5,(a6)
(1)  662/FFFFFFFFFFFF0568 : 4E75                		rts
(1)  663/FFFFFFFFFFFF056A :                     ; exit
(1)  664/FFFFFFFFFFFF056A :                     .nothing:
(1)  665/FFFFFFFFFFFF056A :                     ; 		movem.l	(sp)+,a4-a6
(1)  666/FFFFFFFFFFFF056A :                     ; 		movem.l	(sp)+,d3-d7
(1)  667/FFFFFFFFFFFF056A : 4E75                		rts
(1)  668/FFFFFFFFFFFF056C :                     
(1)  669/FFFFFFFFFFFF056C :                     ; --------------------------------------------------------
(1)  670/FFFFFFFFFFFF056C :                     ; Shared: pick layer / x pos / y pos and set size
(1)  671/FFFFFFFFFFFF056C :                     ; --------------------------------------------------------
(1)  672/FFFFFFFFFFFF056C :                     
(1)  673/FFFFFFFFFFFF056C :                     vid_PickLayer:
(1)  674/FFFFFFFFFFFF056C : 2C00                		move.l	d0,d6			; Pick layer
(1)  675/FFFFFFFFFFFF056E : 4846                		swap	d6
(1)  676/FFFFFFFFFFFF0570 : 0806 0000           		btst	#0,d6
(1)  677/FFFFFFFFFFFF0574 : 671C                		beq.s	.plawnd
(1)  678/FFFFFFFFFFFF0576 : 1838 8A54           		move.b	(RAM_VdpRegs+4).w,d4	; BG
(1)  679/FFFFFFFFFFFF057A : 3A04                		move.w	d4,d5
(1)  680/FFFFFFFFFFFF057C : E24D                		lsr.w	#1,d5
(1)  681/FFFFFFFFFFFF057E : 0245 0003           		andi.w	#%11,d5
(1)  682/FFFFFFFFFFFF0582 : 4844                		swap	d4
(1)  683/FFFFFFFFFFFF0584 : 3805                		move.w	d5,d4
(1)  684/FFFFFFFFFFFF0586 : 4844                		swap	d4
(1)  685/FFFFFFFFFFFF0588 : 0244 0001           		andi.w	#1,d4
(1)  686/FFFFFFFFFFFF058C : E14C                		lsl.w	#8,d4
(1)  687/FFFFFFFFFFFF058E : EB4C                		lsl.w	#5,d4
(1)  688/FFFFFFFFFFFF0590 : 6024                		bra.s	.golyr
(1)  689/FFFFFFFFFFFF0592 :                     .plawnd:
(1)  690/FFFFFFFFFFFF0592 : 1838 8A52           		move.b	(RAM_VdpRegs+2).w,d4	; FG
(1)  691/FFFFFFFFFFFF0596 : 0806 0001           		btst	#1,d6
(1)  692/FFFFFFFFFFFF059A : 6704                		beq.s	.nowd
(1)  693/FFFFFFFFFFFF059C : 1838 8A53           		move.b	(RAM_VdpRegs+3).w,d4	; WINDOW
(1)  694/FFFFFFFFFFFF05A0 :                     .nowd:
(1)  695/FFFFFFFFFFFF05A0 : 3A04                		move.w	d4,d5
(1)  696/FFFFFFFFFFFF05A2 : E84D                		lsr.w	#4,d5
(1)  697/FFFFFFFFFFFF05A4 : 0245 0003           		andi.w	#%11,d5
(1)  698/FFFFFFFFFFFF05A8 : 4844                		swap	d4
(1)  699/FFFFFFFFFFFF05AA : 3805                		move.w	d5,d4
(1)  700/FFFFFFFFFFFF05AC : 4844                		swap	d4
(1)  701/FFFFFFFFFFFF05AE : 0244 000E           		andi.w	#%00001110,d4
(1)  702/FFFFFFFFFFFF05B2 : E14C                		lsl.w	#8,d4
(1)  703/FFFFFFFFFFFF05B4 : E54C                		lsl.w	#2,d4
(1)  704/FFFFFFFFFFFF05B6 :                     .golyr:
(1)  705/FFFFFFFFFFFF05B6 : 0044 4000           		ori.w	#$4000,d4
(1)  706/FFFFFFFFFFFF05BA : 3A00                		move.w	d0,d5			; Y start pos
(1)  707/FFFFFFFFFFFF05BC : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  708/FFFFFFFFFFFF05C0 : ED4D                		lsl.w	#6,d5
(1)  709/FFFFFFFFFFFF05C2 : 1C38 8A60           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  710/FFFFFFFFFFFF05C6 : 0246 0003           		andi.w	#%11,d6
(1)  711/FFFFFFFFFFFF05CA : 670A                		beq.s	.thissz
(1)  712/FFFFFFFFFFFF05CC : DA45                		add.w	d5,d5			; H64
(1)  713/FFFFFFFFFFFF05CE : 0246 0002           		andi.w	#%10,d6
(1)  714/FFFFFFFFFFFF05D2 : 6702                		beq.s	.thissz
(1)  715/FFFFFFFFFFFF05D4 : DA45                		add.w	d5,d5			; H128
(1)  716/FFFFFFFFFFFF05D6 :                     .thissz:
(1)  717/FFFFFFFFFFFF05D6 : D845                		add.w	d5,d4
(1)  718/FFFFFFFFFFFF05D8 : 3A00                		move.w	d0,d5
(1)  719/FFFFFFFFFFFF05DA : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  720/FFFFFFFFFFFF05DE : EE4D                		lsr.w	#7,d5
(1)  721/FFFFFFFFFFFF05E0 : D845                		add.w	d5,d4			; X add
(1)  722/FFFFFFFFFFFF05E2 : 4844                		swap	d4
(1)  723/FFFFFFFFFFFF05E4 : 7C00                		moveq	#0,d6
(1)  724/FFFFFFFFFFFF05E6 : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  725/FFFFFFFFFFFF05EA : 1A38 8A60           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  726/FFFFFFFFFFFF05EE : 0245 0003           		andi.w	#%11,d5
(1)  727/FFFFFFFFFFFF05F2 : 670A                		beq.s	.thisszj
(1)  728/FFFFFFFFFFFF05F4 : DC46                		add.w	d6,d6			; H64
(1)  729/FFFFFFFFFFFF05F6 : 0245 0002           		andi.w	#%10,d5
(1)  730/FFFFFFFFFFFF05FA : 6702                		beq.s	.thisszj
(1)  731/FFFFFFFFFFFF05FC : DC46                		add.w	d6,d6			; H128
(1)  732/FFFFFFFFFFFF05FE :                     .thisszj:
(1)  733/FFFFFFFFFFFF05FE : 4846                		swap	d6
(1)  734/FFFFFFFFFFFF0600 : 4E75                		rts
(1)  735/FFFFFFFFFFFF0602 :                     
(1)  736/FFFFFFFFFFFF0602 :                     ; ====================================================================
(1)  737/FFFFFFFFFFFF0602 :                     ; ----------------------------------------------------------------
(1)  738/FFFFFFFFFFFF0602 :                     ; Palette fade system, Genesis side
(1)  739/FFFFFFFFFFFF0602 :                     ; ----------------------------------------------------------------
(1)  740/FFFFFFFFFFFF0602 :                     
(1)  741/FFFFFFFFFFFF0602 :                     ; --------------------------------------------------------
(1)  742/FFFFFFFFFFFF0602 :                     ; Video_RunFade
(1)  743/FFFFFFFFFFFF0602 :                     ;
(1)  744/FFFFFFFFFFFF0602 :                     ; Processes palette fading and reports if requests
(1)  745/FFFFFFFFFFFF0602 :                     ; finished on exit.
(1)  746/FFFFFFFFFFFF0602 :                     ;
(1)  747/FFFFFFFFFFFF0602 :                     ; Returns:
(1)  748/FFFFFFFFFFFF0602 :                     ; bne - Still active
(1)  749/FFFFFFFFFFFF0602 :                     ; beq - Finished
(1)  750/FFFFFFFFFFFF0602 :                     ;
(1)  751/FFFFFFFFFFFF0602 :                     ; *** CALL System_WaitFrame FIRST ***
(1)  752/FFFFFFFFFFFF0602 :                     ; --------------------------------------------------------
(1)  753/FFFFFFFFFFFF0602 :                     
(1)  754/FFFFFFFFFFFF0602 :                     Video_RunFade:
(1)  755/FFFFFFFFFFFF0602 : 613E                		bsr	Video_DoPalFade
(1)  756/FFFFFFFFFFFF0604 : 6100 0438           		bsr	Video_MarsPalFade
(1)  757/FFFFFFFFFFFF0608 : 3E38 8A48           		move.w	(RAM_FadeMarsReq),d7
(1)  758/FFFFFFFFFFFF060C : 3C38 8A40           		move.w	(RAM_FadeMdReq),d6
(1)  759/FFFFFFFFFFFF0610 : 8E46                		or.w	d6,d7
(1)  760/FFFFFFFFFFFF0612 : 4E75                		rts
(1)  761/FFFFFFFFFFFF0614 :                     
(1)  762/FFFFFFFFFFFF0614 :                     ; --------------------------------------------------------
(1)  763/FFFFFFFFFFFF0614 :                     ; Video_LoadPal
(1)  764/FFFFFFFFFFFF0614 :                     ;
(1)  765/FFFFFFFFFFFF0614 :                     ; Input:
(1)  766/FFFFFFFFFFFF0614 :                     ; a0 - Palette data
(1)  767/FFFFFFFFFFFF0614 :                     ; d0 - Start position
(1)  768/FFFFFFFFFFFF0614 :                     ; d1 - Number of colors
(1)  769/FFFFFFFFFFFF0614 :                     ;
(1)  770/FFFFFFFFFFFF0614 :                     ; Breaks:
(1)  771/FFFFFFFFFFFF0614 :                     ; d5-d7,a6
(1)  772/FFFFFFFFFFFF0614 :                     ; --------------------------------------------------------
(1)  773/FFFFFFFFFFFF0614 :                     
(1)  774/FFFFFFFFFFFF0614 :                     Video_FadePal:
(1)  775/FFFFFFFFFFFF0614 : 4DF8 83D0           		lea	(RAM_PaletteFd),a6
(1)  776/FFFFFFFFFFFF0618 : 4278 8A46           		clr.w	(RAM_FadeMdTmr).w
(1)  777/FFFFFFFFFFFF061C : 6004                		bra.s	vidMd_Pal
(1)  778/FFFFFFFFFFFF061E :                     Video_LoadPal:
(1)  779/FFFFFFFFFFFF061E : 4DF8 8150           		lea	(RAM_Palette),a6
(1)  780/FFFFFFFFFFFF0622 :                     vidMd_Pal:
(1)  781/FFFFFFFFFFFF0622 : 2A48                		move.l	a0,a5
(1)  782/FFFFFFFFFFFF0624 : 7E00                		moveq	#0,d7
(1)  783/FFFFFFFFFFFF0626 : 3E00                		move.w	d0,d7
(1)  784/FFFFFFFFFFFF0628 : DE47                		add.w	d7,d7
(1)  785/FFFFFFFFFFFF062A : DCC7                		adda	d7,a6
(1)  786/FFFFFFFFFFFF062C : 3E01                		move.w	d1,d7
(1)  787/FFFFFFFFFFFF062E : 9E7C 0001           		sub.w	#1,d7
(1)  788/FFFFFFFFFFFF0632 : 3C02                		move.w	d2,d6
(1)  789/FFFFFFFFFFFF0634 : CC7C 0001           		and.w	#1,d6
(1)  790/FFFFFFFFFFFF0638 : E25E                		ror.w	#1,d6
(1)  791/FFFFFFFFFFFF063A :                     .loop:
(1)  792/FFFFFFFFFFFF063A : 3CDD                		move.w	(a5)+,(a6)+
(1)  793/FFFFFFFFFFFF063C : 51CF FFFC           		dbf	d7,.loop
(1)  794/FFFFFFFFFFFF0640 : 4E75                		rts
(1)  795/FFFFFFFFFFFF0642 :                     
(1)  796/FFFFFFFFFFFF0642 :                     ; --------------------------------------------------------
(1)  797/FFFFFFFFFFFF0642 :                     ; Video_DoPalFade
(1)  798/FFFFFFFFFFFF0642 :                     ;
(1)  799/FFFFFFFFFFFF0642 :                     ; RAM_ReqFadeMars: (WORD)
(1)  800/FFFFFFFFFFFF0642 :                     ; $00 - No task or finished.
(1)  801/FFFFFFFFFFFF0642 :                     ; $01 - Fade in
(1)  802/FFFFFFFFFFFF0642 :                     ; $02 - Fade out to black
(1)  803/FFFFFFFFFFFF0642 :                     ;
(1)  804/FFFFFFFFFFFF0642 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  805/FFFFFFFFFFFF0642 :                     ; --------------------------------------------------------
(1)  806/FFFFFFFFFFFF0642 :                     
(1)  807/FFFFFFFFFFFF0642 :                     Video_DoPalFade:
(1)  808/FFFFFFFFFFFF0642 : 0478 0001 8A46      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  809/FFFFFFFFFFFF0648 : 6A14                		bpl.s	.active
(1)  810/FFFFFFFFFFFF064A : 31F8 8A44 8A46      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  811/FFFFFFFFFFFF0650 : 3E38 8A40           		move.w	(RAM_FadeMdReq).w,d7
(1)  812/FFFFFFFFFFFF0654 : DE47                		add.w	d7,d7
(1)  813/FFFFFFFFFFFF0656 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  814/FFFFFFFFFFFF065A : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  815/FFFFFFFFFFFF065E :                     .active:
(1)  816/FFFFFFFFFFFF065E : 4E75                		rts
(1)  817/FFFFFFFFFFFF0660 :                     
(1)  818/FFFFFFFFFFFF0660 :                     ; --------------------------------------------
(1)  819/FFFFFFFFFFFF0660 :                     
(1)  820/FFFFFFFFFFFF0660 :                     .fade_list:
(1)  821/FFFFFFFFFFFF0660 : 0006                		dc.w .fade_done-.fade_list
(1)  822/FFFFFFFFFFFF0662 : 0008                		dc.w .fade_in-.fade_list
(1)  823/FFFFFFFFFFFF0664 : 00AC                		dc.w .fade_out-.fade_list
(1)  824/FFFFFFFFFFFF0666 :                     
(1)  825/FFFFFFFFFFFF0666 :                     ; --------------------------------------------
(1)  826/FFFFFFFFFFFF0666 :                     ; No fade or finished.
(1)  827/FFFFFFFFFFFF0666 :                     ; --------------------------------------------
(1)  828/FFFFFFFFFFFF0666 :                     
(1)  829/FFFFFFFFFFFF0666 :                     .fade_done:
(1)  830/FFFFFFFFFFFF0666 : 4E75                		rts
(1)  831/FFFFFFFFFFFF0668 :                     
(1)  832/FFFFFFFFFFFF0668 :                     ; --------------------------------------------
(1)  833/FFFFFFFFFFFF0668 :                     ; Fade in
(1)  834/FFFFFFFFFFFF0668 :                     ; --------------------------------------------
(1)  835/FFFFFFFFFFFF0668 :                     
(1)  836/FFFFFFFFFFFF0668 :                     .fade_in:
(1)  837/FFFFFFFFFFFF0668 : 4DF8 83D0           		lea	(RAM_PaletteFd),a6
(1)  838/FFFFFFFFFFFF066C : 4BF8 8150           		lea	(RAM_Palette),a5
(1)  839/FFFFFFFFFFFF0670 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  840/FFFFFFFFFFFF0674 : 3238 8A42           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  841/FFFFFFFFFFFF0678 : D241                		add.w	d1,d1
(1)  842/FFFFFFFFFFFF067A : 3C00                		move.w	d0,d6
(1)  843/FFFFFFFFFFFF067C : 4846                		swap	d6
(1)  844/FFFFFFFFFFFF067E : 907C 0001           		sub.w	#1,d0
(1)  845/FFFFFFFFFFFF0682 :                     .nxt_pal:
(1)  846/FFFFFFFFFFFF0682 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  847/FFFFFFFFFFFF0684 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  848/FFFFFFFFFFFF0686 : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  849/FFFFFFFFFFFF0688 : 3607                		move.w	d7,d3		; RED
(1)  850/FFFFFFFFFFFF068A : 3806                		move.w	d6,d4
(1)  851/FFFFFFFFFFFF068C : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  852/FFFFFFFFFFFF0690 : C87C 000E           		and.w	#%0000000000001110,d4
(1)  853/FFFFFFFFFFFF0694 : C67C 000E           		and.w	#%0000000000001110,d3
(1)  854/FFFFFFFFFFFF0698 : D841                		add.w	d1,d4
(1)  855/FFFFFFFFFFFF069A : B843                		cmp.w	d3,d4
(1)  856/FFFFFFFFFFFF069C : 6506                		bcs.s	.no_red
(1)  857/FFFFFFFFFFFF069E : 3803                		move.w	d3,d4
(1)  858/FFFFFFFFFFFF06A0 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  859/FFFFFFFFFFFF06A4 :                     .no_red:
(1)  860/FFFFFFFFFFFF06A4 : 8C44                		or.w	d4,d6
(1)  861/FFFFFFFFFFFF06A6 : E949                		lsl.w	#4,d1
(1)  862/FFFFFFFFFFFF06A8 : 3607                		move.w	d7,d3		; GREEN
(1)  863/FFFFFFFFFFFF06AA : 3806                		move.w	d6,d4
(1)  864/FFFFFFFFFFFF06AC : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  865/FFFFFFFFFFFF06B0 : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  866/FFFFFFFFFFFF06B4 : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  867/FFFFFFFFFFFF06B8 : D841                		add.w	d1,d4
(1)  868/FFFFFFFFFFFF06BA : B843                		cmp.w	d3,d4
(1)  869/FFFFFFFFFFFF06BC : 6506                		bcs.s	.no_grn
(1)  870/FFFFFFFFFFFF06BE : 3803                		move.w	d3,d4
(1)  871/FFFFFFFFFFFF06C0 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  872/FFFFFFFFFFFF06C4 :                     .no_grn:
(1)  873/FFFFFFFFFFFF06C4 : 8C44                		or.w	d4,d6
(1)  874/FFFFFFFFFFFF06C6 : E949                		lsl.w	#4,d1
(1)  875/FFFFFFFFFFFF06C8 : 3607                		move.w	d7,d3		; BLUE
(1)  876/FFFFFFFFFFFF06CA : 3806                		move.w	d6,d4
(1)  877/FFFFFFFFFFFF06CC : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  878/FFFFFFFFFFFF06D0 : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  879/FFFFFFFFFFFF06D4 : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  880/FFFFFFFFFFFF06D8 : D841                		add.w	d1,d4
(1)  881/FFFFFFFFFFFF06DA : B843                		cmp.w	d3,d4
(1)  882/FFFFFFFFFFFF06DC : 6506                		bcs.s	.no_blu
(1)  883/FFFFFFFFFFFF06DE : 3803                		move.w	d3,d4
(1)  884/FFFFFFFFFFFF06E0 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  885/FFFFFFFFFFFF06E4 :                     .no_blu:
(1)  886/FFFFFFFFFFFF06E4 : 8C44                		or.w	d4,d6
(1)  887/FFFFFFFFFFFF06E6 : E049                		lsr.w	#8,d1
(1)  888/FFFFFFFFFFFF06E8 : 3AC6                		move.w	d6,(a5)+
(1)  889/FFFFFFFFFFFF06EA : DCFC 0002           		adda	#2,a6
(1)  890/FFFFFFFFFFFF06EE : B47C 0007           		cmp.w	#%111,d2
(1)  891/FFFFFFFFFFFF06F2 : 6608                		bne.s	.no_fnsh
(1)  892/FFFFFFFFFFFF06F4 : 4846                		swap	d6
(1)  893/FFFFFFFFFFFF06F6 : 9C7C 0001           		sub.w	#1,d6
(1)  894/FFFFFFFFFFFF06FA : 4846                		swap	d6
(1)  895/FFFFFFFFFFFF06FC :                     .no_fnsh:
(1)  896/FFFFFFFFFFFF06FC : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  897/FFFFFFFFFFFF0700 : 4846                		swap	d6
(1)  898/FFFFFFFFFFFF0702 : 4A46                		tst.w	d6
(1)  899/FFFFFFFFFFFF0704 : 6604                		bne.s	.no_move
(1)  900/FFFFFFFFFFFF0706 : 4278 8A40           		clr.w	(RAM_FadeMdReq).w
(1)  901/FFFFFFFFFFFF070A :                     .no_move:
(1)  902/FFFFFFFFFFFF070A : 4E75                		rts
(1)  903/FFFFFFFFFFFF070C :                     
(1)  904/FFFFFFFFFFFF070C :                     ; --------------------------------------------
(1)  905/FFFFFFFFFFFF070C :                     ; Fade out
(1)  906/FFFFFFFFFFFF070C :                     ; --------------------------------------------
(1)  907/FFFFFFFFFFFF070C :                     
(1)  908/FFFFFFFFFFFF070C :                     .fade_out:
(1)  909/FFFFFFFFFFFF070C : 4DF8 8150           		lea	(RAM_Palette),a6
(1)  910/FFFFFFFFFFFF0710 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  911/FFFFFFFFFFFF0714 : 3238 8A42           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  912/FFFFFFFFFFFF0718 : 3C00                		move.w	d0,d6
(1)  913/FFFFFFFFFFFF071A : 4846                		swap	d6
(1)  914/FFFFFFFFFFFF071C : 907C 0001           		sub.w	#1,d0
(1)  915/FFFFFFFFFFFF0720 :                     .nxt_pal_o:
(1)  916/FFFFFFFFFFFF0720 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  917/FFFFFFFFFFFF0722 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  918/FFFFFFFFFFFF0724 : 3C07                		move.w	d7,d6
(1)  919/FFFFFFFFFFFF0726 : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  920/FFFFFFFFFFFF072A : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  921/FFFFFFFFFFFF072E : 9C41                		sub.w	d1,d6
(1)  922/FFFFFFFFFFFF0730 : 6A06                		bpl.s	.no_red_o
(1)  923/FFFFFFFFFFFF0732 : 4246                		clr.w	d6
(1)  924/FFFFFFFFFFFF0734 : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  925/FFFFFFFFFFFF0738 :                     .no_red_o:
(1)  926/FFFFFFFFFFFF0738 : 8E46                		or.w	d6,d7
(1)  927/FFFFFFFFFFFF073A : E949                		lsl.w	#4,d1
(1)  928/FFFFFFFFFFFF073C : 3C07                		move.w	d7,d6
(1)  929/FFFFFFFFFFFF073E : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  930/FFFFFFFFFFFF0742 : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  931/FFFFFFFFFFFF0746 : 9C41                		sub.w	d1,d6
(1)  932/FFFFFFFFFFFF0748 : 6A06                		bpl.s	.no_grn_o
(1)  933/FFFFFFFFFFFF074A : 4246                		clr.w	d6
(1)  934/FFFFFFFFFFFF074C : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  935/FFFFFFFFFFFF0750 :                     .no_grn_o:
(1)  936/FFFFFFFFFFFF0750 : 8E46                		or.w	d6,d7
(1)  937/FFFFFFFFFFFF0752 : E949                		lsl.w	#4,d1
(1)  938/FFFFFFFFFFFF0754 : 3C07                		move.w	d7,d6
(1)  939/FFFFFFFFFFFF0756 : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  940/FFFFFFFFFFFF075A : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  941/FFFFFFFFFFFF075E : 9C41                		sub.w	d1,d6
(1)  942/FFFFFFFFFFFF0760 : 6A06                		bpl.s	.no_blu_o
(1)  943/FFFFFFFFFFFF0762 : 4246                		clr.w	d6
(1)  944/FFFFFFFFFFFF0764 : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  945/FFFFFFFFFFFF0768 :                     .no_blu_o:
(1)  946/FFFFFFFFFFFF0768 : 8E46                		or.w	d6,d7
(1)  947/FFFFFFFFFFFF076A : E049                		lsr.w	#8,d1
(1)  948/FFFFFFFFFFFF076C : 3CC7                		move.w	d7,(a6)+
(1)  949/FFFFFFFFFFFF076E : B47C 0007           		cmp.w	#%111,d2
(1)  950/FFFFFFFFFFFF0772 : 6608                		bne.s	.no_fnsh_o
(1)  951/FFFFFFFFFFFF0774 : 4846                		swap	d6
(1)  952/FFFFFFFFFFFF0776 : 9C7C 0001           		sub.w	#1,d6
(1)  953/FFFFFFFFFFFF077A : 4846                		swap	d6
(1)  954/FFFFFFFFFFFF077C :                     .no_fnsh_o:
(1)  955/FFFFFFFFFFFF077C : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  956/FFFFFFFFFFFF0780 : 4846                		swap	d6
(1)  957/FFFFFFFFFFFF0782 : 4A46                		tst.w	d6
(1)  958/FFFFFFFFFFFF0784 : 6604                		bne.s	.no_move_o
(1)  959/FFFFFFFFFFFF0786 : 4278 8A40           		clr.w	(RAM_FadeMdReq).w
(1)  960/FFFFFFFFFFFF078A :                     .no_move_o:
(1)  961/FFFFFFFFFFFF078A : 4E75                		rts
(1)  962/FFFFFFFFFFFF078C :                     
(1)  963/FFFFFFFFFFFF078C :                     ; ====================================================================
(1)  964/FFFFFFFFFFFF078C :                     ; --------------------------------------------------------
(1)  965/FFFFFFFFFFFF078C :                     ; Genesis DMA
(1)  966/FFFFFFFFFFFF078C :                     ; --------------------------------------------------------
(1)  967/FFFFFFFFFFFF078C :                     
(1)  968/FFFFFFFFFFFF078C :                     ; --------------------------------------------------------
(1)  969/FFFFFFFFFFFF078C :                     ; Video_DmaMkEntry
(1)  970/FFFFFFFFFFFF078C :                     ;
(1)  971/FFFFFFFFFFFF078C :                     ; Sets a new DMA transfer task to the BLAST list
(1)  972/FFFFFFFFFFFF078C :                     ;
(1)  973/FFFFFFFFFFFF078C :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  974/FFFFFFFFFFFF078C :                     ;
(1)  975/FFFFFFFFFFFF078C :                     ; d0 | LONG - Art data Real-ROM location
(1)  976/FFFFFFFFFFFF078C :                     ; d1 | WORD - VRAM location cell_vram()
(1)  977/FFFFFFFFFFFF078C :                     ; d2 | WORD - Size
(1)  978/FFFFFFFFFFFF078C :                     ;
(1)  979/FFFFFFFFFFFF078C :                     ; Breaks:
(1)  980/FFFFFFFFFFFF078C :                     ; d6-d7,a6
(1)  981/FFFFFFFFFFFF078C :                     ; --------------------------------------------------------
(1)  982/FFFFFFFFFFFF078C :                     
(1)  983/FFFFFFFFFFFF078C :                     Video_DmaMkEntry:
(1)  984/FFFFFFFFFFFF078C : 31FC 0001 8A3C      		move.w	#1,(RAM_VdpDmaMod).w
(1)  985/FFFFFFFFFFFF0792 : 4DF8 8070           		lea	(RAM_VdpDmaList).w,a6
(1)  986/FFFFFFFFFFFF0796 : 3E38 8A3A           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  987/FFFFFFFFFFFF079A : DCC7                		adda	d7,a6
(1)  988/FFFFFFFFFFFF079C : DE7C 000E           		add.w	#7*2,d7
(1)  989/FFFFFFFFFFFF07A0 : 31C7 8A3A           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  990/FFFFFFFFFFFF07A4 : 3E02                		move.w	d2,d7			; Length
(1)  994/FFFFFFFFFFFF07A6 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  995/FFFFFFFFFFFF07AC : E24F                		lsr.w	#1,d7
(1)  996/FFFFFFFFFFFF07AE : 1C07                		move.b	d7,d6
(1)  997/FFFFFFFFFFFF07B0 : 4846                		swap	d6
(1)  998/FFFFFFFFFFFF07B2 : E04F                		lsr.w	#8,d7
(1)  999/FFFFFFFFFFFF07B4 : 1C07                		move.b	d7,d6
(1) 1000/FFFFFFFFFFFF07B6 : 4846                		swap	d6
(1) 1001/FFFFFFFFFFFF07B8 : 2CC6                		move.l	d6,(a6)+
(1) 1002/FFFFFFFFFFFF07BA : 2E00                		move.l	d0,d7			; Source
(1) 1006/FFFFFFFFFFFF07BC : E28F                  		lsr.l	#1,d7
(1) 1007/FFFFFFFFFFFF07BE : 2C3C 9600 9500       		move.l	#$96009500,d6
(1) 1008/FFFFFFFFFFFF07C4 : 1C07                 		move.b	d7,d6
(1) 1009/FFFFFFFFFFFF07C6 : E08F                 		lsr.l	#8,d7
(1) 1010/FFFFFFFFFFFF07C8 : 4846                 		swap	d6
(1) 1011/FFFFFFFFFFFF07CA : 1C07                 		move.b	d7,d6
(1) 1012/FFFFFFFFFFFF07CC : 2CC6                 		move.l	d6,(a6)+
(1) 1013/FFFFFFFFFFFF07CE : 3C3C 9700            		move.w	#$9700,d6
(1) 1014/FFFFFFFFFFFF07D2 : E08F                 		lsr.l	#8,d7
(1) 1015/FFFFFFFFFFFF07D4 : 1C07                 		move.b	d7,d6
(1) 1016/FFFFFFFFFFFF07D6 : 3CC6                 		move.w	d6,(a6)+
(1) 1017/FFFFFFFFFFFF07D8 : 3E01                		move.w	d1,d7			; Destination
(1) 1018/FFFFFFFFFFFF07DA :                     ; 		and.w	#$7FF,d7
(1) 1019/FFFFFFFFFFFF07DA :                     ; 		lsl.w	#5,d7
(1) 1020/FFFFFFFFFFFF07DA : 3C07                		move.w	d7,d6
(1) 1021/FFFFFFFFFFFF07DC : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1) 1022/FFFFFFFFFFFF07E2 : 0047 4000           		ori.w	#$4000,d7
(1) 1023/FFFFFFFFFFFF07E6 : E04E                		lsr.w	#8,d6
(1) 1024/FFFFFFFFFFFF07E8 : EC4E                		lsr.w	#6,d6
(1) 1025/FFFFFFFFFFFF07EA : 0246 0003           		andi.w	#%11,d6
(1) 1026/FFFFFFFFFFFF07EE : 0046 0080           		ori.w	#$80,d6
(1) 1027/FFFFFFFFFFFF07F2 : 3CC7                		move.w	d7,(a6)+
(1) 1028/FFFFFFFFFFFF07F4 : 3CC6                		move.w	d6,(a6)+
(1) 1029/FFFFFFFFFFFF07F6 : 31FC 0000 8A3C      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1030/FFFFFFFFFFFF07FC : 4E75                		rts
(1) 1031/FFFFFFFFFFFF07FE :                     
(1) 1032/FFFFFFFFFFFF07FE :                     ; --------------------------------------------------------
(1) 1033/FFFFFFFFFFFF07FE :                     ; Video_Fill
(1) 1034/FFFFFFFFFFFF07FE :                     ;
(1) 1035/FFFFFFFFFFFF07FE :                     ; Fill data to VRAM
(1) 1036/FFFFFFFFFFFF07FE :                     ;
(1) 1037/FFFFFFFFFFFF07FE :                     ; d0 | WORD - WORD to fill
(1) 1038/FFFFFFFFFFFF07FE :                     ; d1 | WORD - VRAM position
(1) 1039/FFFFFFFFFFFF07FE :                     ; d2 | WORD - Size
(1) 1040/FFFFFFFFFFFF07FE :                     ;
(1) 1041/FFFFFFFFFFFF07FE :                     ; Breaks:
(1) 1042/FFFFFFFFFFFF07FE :                     ; d6-d7,a6
(1) 1043/FFFFFFFFFFFF07FE :                     ; --------------------------------------------------------
(1) 1044/FFFFFFFFFFFF07FE :                     
(1) 1045/FFFFFFFFFFFF07FE :                     Video_Fill:
(1) 1046/FFFFFFFFFFFF07FE : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1047/FFFFFFFFFFFF0804 : 3E3C 8100           		move.w	#$8100,d7
(1) 1048/FFFFFFFFFFFF0808 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1049/FFFFFFFFFFFF080C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1050/FFFFFFFFFFFF0810 : 3C87                		move.w	d7,(a6)
(1) 1051/FFFFFFFFFFFF0812 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1052/FFFFFFFFFFFF0814 : 0807 0001           		btst	#bitDma,d7
(1) 1053/FFFFFFFFFFFF0818 : 66F8                		bne.s	.dmaw
(1) 1054/FFFFFFFFFFFF081A : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1055/FFFFFFFFFFFF081E : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1056/FFFFFFFFFFFF0820 : 9E7C 0001           		sub.w	#1,d7
(1) 1057/FFFFFFFFFFFF0824 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1058/FFFFFFFFFFFF082A : 1C07                		move.b	d7,d6
(1) 1059/FFFFFFFFFFFF082C : 4846                		swap	d6
(1) 1060/FFFFFFFFFFFF082E : E04F                		lsr.w	#8,d7
(1) 1061/FFFFFFFFFFFF0830 : 1C07                		move.b	d7,d6
(1) 1062/FFFFFFFFFFFF0832 : 4846                		swap	d6
(1) 1063/FFFFFFFFFFFF0834 : 2C86                		move.l	d6,(a6)
(1) 1064/FFFFFFFFFFFF0836 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1065/FFFFFFFFFFFF083A : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1066/FFFFFFFFFFFF083C :                     ; 		lsl.w	#5,d7
(1) 1067/FFFFFFFFFFFF083C : 3C07                		move.w	d7,d6
(1) 1068/FFFFFFFFFFFF083E : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1069/FFFFFFFFFFFF0842 : 0046 4000           		ori.w	#$4000,d6
(1) 1070/FFFFFFFFFFFF0846 : 4846                		swap	d6
(1) 1071/FFFFFFFFFFFF0848 : 3C07                		move.w	d7,d6
(1) 1072/FFFFFFFFFFFF084A : E04E                		lsr.w	#8,d6
(1) 1073/FFFFFFFFFFFF084C : EC4E                		lsr.w	#6,d6
(1) 1074/FFFFFFFFFFFF084E : 0246 0003           		andi.w	#%11,d6
(1) 1075/FFFFFFFFFFFF0852 : 0046 0080           		ori.w	#$80,d6
(1) 1076/FFFFFFFFFFFF0856 : 2C86                		move.l	d6,(a6)
(1) 1077/FFFFFFFFFFFF0858 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1078/FFFFFFFFFFFF085C : 3E16                .dmawe:		move.w	(a6),d7
(1) 1079/FFFFFFFFFFFF085E : 0807 0001           		btst	#bitDma,d7
(1) 1080/FFFFFFFFFFFF0862 : 66F8                		bne.s	.dmawe
(1) 1081/FFFFFFFFFFFF0864 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1082/FFFFFFFFFFFF0868 : 3E3C 8100           		move.w	#$8100,d7
(1) 1083/FFFFFFFFFFFF086C : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1084/FFFFFFFFFFFF0870 : 3C87                		move.w	d7,(a6)
(1) 1085/FFFFFFFFFFFF0872 : 4E75                		rts
(1) 1086/FFFFFFFFFFFF0874 :                     
(1) 1087/FFFFFFFFFFFF0874 :                     ; --------------------------------------------------------
(1) 1088/FFFFFFFFFFFF0874 :                     ; Video_Copy
(1) 1089/FFFFFFFFFFFF0874 :                     ;
(1) 1090/FFFFFFFFFFFF0874 :                     ; Copy VRAM data to another location
(1) 1091/FFFFFFFFFFFF0874 :                     ;
(1) 1092/FFFFFFFFFFFF0874 :                     ; d0 | WORD - VRAM Source
(1) 1093/FFFFFFFFFFFF0874 :                     ; d1 | WORD - VRAM Destination
(1) 1094/FFFFFFFFFFFF0874 :                     ; d2 | WORD - Size
(1) 1095/FFFFFFFFFFFF0874 :                     ;
(1) 1096/FFFFFFFFFFFF0874 :                     ; Breaks:
(1) 1097/FFFFFFFFFFFF0874 :                     ; d6-d7,a6
(1) 1098/FFFFFFFFFFFF0874 :                     ; --------------------------------------------------------
(1) 1099/FFFFFFFFFFFF0874 :                     
(1) 1100/FFFFFFFFFFFF0874 :                     ; TODO: test if this works again...
(1) 1101/FFFFFFFFFFFF0874 :                     
(1) 1102/FFFFFFFFFFFF0874 :                     Video_Copy:
(1) 1103/FFFFFFFFFFFF0874 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1104/FFFFFFFFFFFF087A : 3E3C 8100           		move.w	#$8100,d7
(1) 1105/FFFFFFFFFFFF087E : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1106/FFFFFFFFFFFF0882 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1107/FFFFFFFFFFFF0886 : 3C87                		move.w	d7,(a6)
(1) 1108/FFFFFFFFFFFF0888 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1109/FFFFFFFFFFFF088A : 0807 0001           		btst	#bitDma,d7
(1) 1110/FFFFFFFFFFFF088E : 66F8                		bne.s	.dmaw
(1) 1111/FFFFFFFFFFFF0890 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1112/FFFFFFFFFFFF0894 : 3E02                		move.w	d2,d7			; SIZE
(1) 1113/FFFFFFFFFFFF0896 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1114/FFFFFFFFFFFF089C :                     ; 		lsr.w	#1,d7
(1) 1115/FFFFFFFFFFFF089C : 1C07                		move.b	d7,d6
(1) 1116/FFFFFFFFFFFF089E : 4846                		swap	d6
(1) 1117/FFFFFFFFFFFF08A0 : E04F                		lsr.w	#8,d7
(1) 1118/FFFFFFFFFFFF08A2 : 1C07                		move.b	d7,d6
(1) 1119/FFFFFFFFFFFF08A4 : 4846                		swap	d6
(1) 1120/FFFFFFFFFFFF08A6 : 2C86                		move.l	d6,(a6)
(1) 1121/FFFFFFFFFFFF08A8 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1122/FFFFFFFFFFFF08AE : 3E00                		move.w	d0,d7
(1) 1123/FFFFFFFFFFFF08B0 : 1C07                		move.b	d7,d6
(1) 1124/FFFFFFFFFFFF08B2 : 4846                		swap	d6
(1) 1125/FFFFFFFFFFFF08B4 : E04F                		lsr.w	#8,d7
(1) 1126/FFFFFFFFFFFF08B6 : 1C07                		move.b	d7,d6
(1) 1127/FFFFFFFFFFFF08B8 : 2C86                		move.l	d6,(a6)
(1) 1128/FFFFFFFFFFFF08BA : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1129/FFFFFFFFFFFF08BE : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1130/FFFFFFFFFFFF08C0 :                     ; 		lsl.w	#5,d7
(1) 1131/FFFFFFFFFFFF08C0 : 3C07                		move.w	d7,d6
(1) 1132/FFFFFFFFFFFF08C2 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1133/FFFFFFFFFFFF08C6 : 0046 4000           		ori.w	#$4000,d6
(1) 1134/FFFFFFFFFFFF08CA : 4846                		swap	d6
(1) 1135/FFFFFFFFFFFF08CC : 3C07                		move.w	d7,d6
(1) 1136/FFFFFFFFFFFF08CE : E04E                		lsr.w	#8,d6
(1) 1137/FFFFFFFFFFFF08D0 : EC4E                		lsr.w	#6,d6
(1) 1138/FFFFFFFFFFFF08D2 : 0246 0003           		andi.w	#%11,d6
(1) 1139/FFFFFFFFFFFF08D6 : 0046 00C0           		ori.w	#$C0,d6
(1) 1140/FFFFFFFFFFFF08DA : 2C86                		move.l	d6,(a6)
(1) 1141/FFFFFFFFFFFF08DC : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1142/FFFFFFFFFFFF08E0 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1143/FFFFFFFFFFFF08E2 : 0807 0001           		btst	#bitDma,d7
(1) 1144/FFFFFFFFFFFF08E6 : 66F8                		bne.s	.dmawe
(1) 1145/FFFFFFFFFFFF08E8 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1146/FFFFFFFFFFFF08EC : 3E3C 8100           		move.w	#$8100,d7
(1) 1147/FFFFFFFFFFFF08F0 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1148/FFFFFFFFFFFF08F4 : 3C87                		move.w	d7,(a6)
(1) 1149/FFFFFFFFFFFF08F6 : 4E75                		rts
(1) 1150/FFFFFFFFFFFF08F8 :                     
(1) 1151/FFFFFFFFFFFF08F8 :                     ; --------------------------------------------------------
(1) 1152/FFFFFFFFFFFF08F8 :                     ; Load graphics using DMA, direct
(1) 1153/FFFFFFFFFFFF08F8 :                     ;
(1) 1154/FFFFFFFFFFFF08F8 :                     ; d0 | LONG - Art data
(1) 1155/FFFFFFFFFFFF08F8 :                     ; d1 | WORD - cell_vram(location)
(1) 1156/FFFFFFFFFFFF08F8 :                     ; d2 | WORD - Size
(1) 1157/FFFFFFFFFFFF08F8 :                     ;
(1) 1158/FFFFFFFFFFFF08F8 :                     ; Breaks:
(1) 1159/FFFFFFFFFFFF08F8 :                     ; d5-d7,a4-a6
(1) 1160/FFFFFFFFFFFF08F8 :                     ;
(1) 1161/FFFFFFFFFFFF08F8 :                     ; *** For faster transfers call this during VBlank ***
(1) 1162/FFFFFFFFFFFF08F8 :                     ; *** MAKE SURE SH2 IS NOT IN THE MIDDLE OF READING
(1) 1163/FFFFFFFFFFFF08F8 :                     ; ROM ***
(1) 1164/FFFFFFFFFFFF08F8 :                     ; --------------------------------------------------------
(1) 1165/FFFFFFFFFFFF08F8 :                     
(1) 1166/FFFFFFFFFFFF08F8 :                     Video_LoadArt:
(1) 1179/FFFFFFFFFFFF08F8 : 40E7                		move.w	sr,-(sp)
(1) 1180/FFFFFFFFFFFF08FA : 007C 0700           		or	#$700,sr
(1) 1181/FFFFFFFFFFFF08FE : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1182/FFFFFFFFFFFF0904 : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1183/FFFFFFFFFFFF0908 : 1C38 8A51           		move.b	(RAM_VdpRegs+1),d6
(1) 1184/FFFFFFFFFFFF090C : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1185/FFFFFFFFFFFF0910 : 3886                		move.w	d6,(a4)
(1) 1186/FFFFFFFFFFFF0912 : 3C02                		move.w	d2,d6			; Length
(1) 1187/FFFFFFFFFFFF0914 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1188/FFFFFFFFFFFF091A : E24E                		lsr.w	#1,d6
(1) 1189/FFFFFFFFFFFF091C : 1A06                		move.b	d6,d5
(1) 1190/FFFFFFFFFFFF091E : 4845                		swap	d5
(1) 1191/FFFFFFFFFFFF0920 : E04E                		lsr.w	#8,d6
(1) 1192/FFFFFFFFFFFF0922 : 1A06                		move.b	d6,d5
(1) 1193/FFFFFFFFFFFF0924 : 4845                		swap	d5
(1) 1194/FFFFFFFFFFFF0926 : 2885                		move.l	d5,(a4)
(1) 1195/FFFFFFFFFFFF0928 : 2C00                		move.l	d0,d6			; Source
(1) 1196/FFFFFFFFFFFF092A : E28E                  		lsr.l	#1,d6
(1) 1197/FFFFFFFFFFFF092C : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1198/FFFFFFFFFFFF0932 : 1A06                 		move.b	d6,d5
(1) 1199/FFFFFFFFFFFF0934 : E08E                 		lsr.l	#8,d6
(1) 1200/FFFFFFFFFFFF0936 : 4845                 		swap	d5
(1) 1201/FFFFFFFFFFFF0938 : 1A06                 		move.b	d6,d5
(1) 1202/FFFFFFFFFFFF093A : 2885                 		move.l	d5,(a4)
(1) 1203/FFFFFFFFFFFF093C : 3A3C 9700            		move.w	#$9700,d5
(1) 1204/FFFFFFFFFFFF0940 : E08E                 		lsr.l	#8,d6
(1) 1205/FFFFFFFFFFFF0942 : 1A06                 		move.b	d6,d5
(1) 1206/FFFFFFFFFFFF0944 : 3885                 		move.w	d5,(a4)
(1) 1207/FFFFFFFFFFFF0946 : 3C01                		move.w	d1,d6			; Destination
(1) 1208/FFFFFFFFFFFF0948 : 3A06                		move.w	d6,d5
(1) 1209/FFFFFFFFFFFF094A : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1210/FFFFFFFFFFFF0950 : 0046 4000           		ori.w	#$4000,d6
(1) 1211/FFFFFFFFFFFF0954 : E04D                		lsr.w	#8,d5
(1) 1212/FFFFFFFFFFFF0956 : EC4D                		lsr.w	#6,d5
(1) 1213/FFFFFFFFFFFF0958 : 0245 0003           		andi.w	#%11,d5
(1) 1214/FFFFFFFFFFFF095C : 0045 0080           		ori.w	#$80,d5
(1) 1215/FFFFFFFFFFFF0960 : 2E00                		move.l	d0,d7
(1) 1216/FFFFFFFFFFFF0962 : 4847                		swap	d7
(1) 1217/FFFFFFFFFFFF0964 : E04F                		lsr.w	#8,d7
(1) 1218/FFFFFFFFFFFF0966 : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1219/FFFFFFFFFFFF096A : 671A                		beq.s	.from_ram
(1) 1220/FFFFFFFFFFFF096C : 6100 0364           		bsr	System_DmaEnter_ROM
(1) 1221/FFFFFFFFFFFF0970 : 3F05                 		move.w	d5,-(sp)
(1) 1222/FFFFFFFFFFFF0972 : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1223/FFFFFFFFFFFF0974 : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1224/FFFFFFFFFFFF0976 : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1225/FFFFFFFFFFFF097A : 1C38 8A51           		move.b	(RAM_VdpRegs+1),d6
(1) 1226/FFFFFFFFFFFF097E : 3886                		move.w	d6,(a4)
(1) 1227/FFFFFFFFFFFF0980 : 46DF                		move.w	(sp)+,sr
(1) 1244/FFFFFFFFFFFF0982 : 6000 0352           		bra	System_DmaExit_ROM
(1) 1245/FFFFFFFFFFFF0986 :                     .from_ram:
(1) 1246/FFFFFFFFFFFF0986 : 3887                		move.w	d7,(a4)
(1) 1247/FFFFFFFFFFFF0988 : 3F05                 		move.w	d5,-(sp)
(1) 1248/FFFFFFFFFFFF098A : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1249/FFFFFFFFFFFF098C : 3E3C 8100           		move.w	#$8100,d7
(1) 1250/FFFFFFFFFFFF0990 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1251/FFFFFFFFFFFF0994 : 3887                		move.w	d7,(a4)
(1) 1252/FFFFFFFFFFFF0996 : 46DF                		move.w	(sp)+,sr
(1) 1253/FFFFFFFFFFFF0998 : 4E75                		rts
(1) 1254/FFFFFFFFFFFF099A :                     
(1) 1255/FFFFFFFFFFFF099A :                     ; --------------------------------------------------------
(1) 1256/FFFFFFFFFFFF099A :                     ; Video_DmaBlast
(1) 1257/FFFFFFFFFFFF099A :                     ;
(1) 1258/FFFFFFFFFFFF099A :                     ; Process DMA tasks from a predefined list in RAM
(1) 1259/FFFFFFFFFFFF099A :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1260/FFFFFFFFFFFF099A :                     ;
(1) 1261/FFFFFFFFFFFF099A :                     ; Breaks:
(1) 1262/FFFFFFFFFFFF099A :                     ; d5-d7,a3-a4
(1) 1263/FFFFFFFFFFFF099A :                     ; --------------------------------------------------------
(1) 1264/FFFFFFFFFFFF099A :                     
(1) 1265/FFFFFFFFFFFF099A :                     ; Entry format:
(1) 1266/FFFFFFFFFFFF099A :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1267/FFFFFFFFFFFF099A :                     ; $40000080 (vdp destination + dma bit)
(1) 1268/FFFFFFFFFFFF099A :                     
(1) 1269/FFFFFFFFFFFF099A :                     ; TODO: Add the SCD patch.
(1) 1270/FFFFFFFFFFFF099A :                     
(1) 1271/FFFFFFFFFFFF099A :                     Video_DmaBlast:
(1) 1272/FFFFFFFFFFFF099A : 4A78 8A3C           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1273/FFFFFFFFFFFF099E : 6666                		bne.s	.exit
(1) 1274/FFFFFFFFFFFF09A0 : 4A78 8A3A           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1275/FFFFFFFFFFFF09A4 : 6760                		beq.s	.exit
(1) 1276/FFFFFFFFFFFF09A6 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1277/FFFFFFFFFFFF09AC : 47F8 8070           		lea	(RAM_VdpDmaList).w,a3
(1) 1278/FFFFFFFFFFFF09B0 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1279/FFFFFFFFFFFF09B4 : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1) 1280/FFFFFFFFFFFF09B8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1281/FFFFFFFFFFFF09BC : 3887                		move.w	d7,(a4)
(1) 1282/FFFFFFFFFFFF09BE : 6100 0312           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1284/FFFFFFFFFFFF09C2 : 08F9 0000 00A1 5107 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1) 1286/FFFFFFFFFFFF09CA : 4A78 8A3A           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1287/FFFFFFFFFFFF09CE : 6720                		beq.s	.end
(1) 1288/FFFFFFFFFFFF09D0 : 2893                		move.l	(a3),(a4)			; Size
(1) 1289/FFFFFFFFFFFF09D2 : 429B                		clr.l	(a3)+
(1) 1290/FFFFFFFFFFFF09D4 : 2893                		move.l	(a3),(a4)			; Source
(1) 1291/FFFFFFFFFFFF09D6 : 429B                		clr.l	(a3)+
(1) 1292/FFFFFFFFFFFF09D8 : 3893                		move.w	(a3),(a4)
(1) 1293/FFFFFFFFFFFF09DA : 425B                		clr.w	(a3)+
(1) 1294/FFFFFFFFFFFF09DC : 3C13                		move.w	(a3),d6				; Destination
(1) 1295/FFFFFFFFFFFF09DE : 425B                		clr.w	(a3)+
(1) 1296/FFFFFFFFFFFF09E0 : 3A13                		move.w	(a3),d5
(1) 1297/FFFFFFFFFFFF09E2 : 425B                		clr.w	(a3)+
(1) 1298/FFFFFFFFFFFF09E4 : 3886                		move.w	d6,(a4)
(1) 1299/FFFFFFFFFFFF09E6 : 3885                		move.w	d5,(a4)
(1) 1300/FFFFFFFFFFFF09E8 : 0478 000E 8A3A      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1301/FFFFFFFFFFFF09EE : 60DA                		bra.s	.next
(1) 1302/FFFFFFFFFFFF09F0 :                     .end:
(1) 1304/FFFFFFFFFFFF09F0 : 08B9 0000 00A1 5107 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1) 1306/FFFFFFFFFFFF09F8 : 6100 02DC           		bsr	System_DmaExit_ROM		; Resume Z80 and SH2 direct
(1) 1307/FFFFFFFFFFFF09FC : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1308/FFFFFFFFFFFF0A00 : 1E38 8A51           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1309/FFFFFFFFFFFF0A04 : 3887                		move.w	d7,(a4)
(1) 1310/FFFFFFFFFFFF0A06 :                     .exit:
(1) 1311/FFFFFFFFFFFF0A06 : 4E75                		rts
(1) 1312/FFFFFFFFFFFF0A08 :                     
(1) 1313/FFFFFFFFFFFF0A08 :                     ; ; ====================================================================
(1) 1314/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------------------------------
(1) 1315/FFFFFFFFFFFF0A08 :                     ; ; MAP layout system
(1) 1316/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1317/FFFFFFFFFFFF0A08 :                     ; ; Note: uses some RAM'd video registers.
(1) 1318/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------------------------------
(1) 1319/FFFFFFFFFFFF0A08 :                     ;
(1) 1320/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1321/FFFFFFFFFFFF0A08 :                     ; ; MdMap_Init
(1) 1322/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1323/FFFFFFFFFFFF0A08 :                     ; ; Initializes all BG buffers
(1) 1324/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1325/FFFFFFFFFFFF0A08 :                     ;
(1) 1326/FFFFFFFFFFFF0A08 :                     ; MdMap_Init:
(1) 1327/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBuffer),a0
(1) 1328/FFFFFFFFFFFF0A08 :                     ; 		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1329/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d0
(1) 1330/FFFFFFFFFFFF0A08 :                     ; .clr:
(1) 1331/FFFFFFFFFFFF0A08 :                     ; 		move.l	d0,(a0)+
(1) 1332/FFFFFFFFFFFF0A08 :                     ; 		dbf	d1,.clr
(1) 1333/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1334/FFFFFFFFFFFF0A08 :                     ;
(1) 1335/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1336/FFFFFFFFFFFF0A08 :                     ; ; MdMap_Set
(1) 1337/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1338/FFFFFFFFFFFF0A08 :                     ; ; Sets a new scrolling section to use.
(1) 1339/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1340/FFFFFFFFFFFF0A08 :                     ; ; **SET YOUR X and Y COORDS EXTERNALLY
(1) 1341/FFFFFFFFFFFF0A08 :                     ; ; BEFORE GETTING HERE**
(1) 1342/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1343/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 1344/FFFFFFFFFFFF0A08 :                     ; ; ** Genesis side **
(1) 1345/FFFFFFFFFFFF0A08 :                     ; ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1346/FFFFFFFFFFFF0A08 :                     ; ; d1 | WORD - VRAM location for map data
(1) 1347/FFFFFFFFFFFF0A08 :                     ; ; d2 | WORD - VRAM add + palette
(1) 1348/FFFFFFFFFFFF0A08 :                     ; ; a0 - Level header data:
(1) 1349/FFFFFFFFFFFF0A08 :                     ; ; 	dc.w width,height
(1) 1350/FFFFFFFFFFFF0A08 :                     ; ; 	dc.b blkwidth,blkheight
(1) 1351/FFFFFFFFFFFF0A08 :                     ; ; a1 - Block data
(1) 1352/FFFFFFFFFFFF0A08 :                     ; ; a2 - LOW priority layout data
(1) 1353/FFFFFFFFFFFF0A08 :                     ; ; a3 - HIGH priority layout data
(1) 1354/FFFFFFFFFFFF0A08 :                     ; ; d4 - Collision data
(1) 1355/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1356/FFFFFFFFFFFF0A08 :                     ; ; Then load the graphics externally at the same
(1) 1357/FFFFFFFFFFFF0A08 :                     ; ; VRAM location set in d2
(1) 1358/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1359/FFFFFFFFFFFF0A08 :                     ; ; ** 32X side **
(1) 1360/FFFFFFFFFFFF0A08 :                     ; ; d0 | WORD - Write as -1
(1) 1361/FFFFFFFFFFFF0A08 :                     ; ; d1 | WORD - Scroll buffer to use on the 32X side (0 - default)
(1) 1362/FFFFFFFFFFFF0A08 :                     ; ; d2 | WORD - Index-palette increment
(1) 1363/FFFFFFFFFFFF0A08 :                     ; ; a0 - Level header data: (68K AREA)
(1) 1364/FFFFFFFFFFFF0A08 :                     ; ; 	dc.w width,height
(1) 1365/FFFFFFFFFFFF0A08 :                     ; ; 	dc.b blkwidth,blkheight
(1) 1366/FFFFFFFFFFFF0A08 :                     ; ; a1 - Graphics data stored as blocks (SH2 AREA)
(1) 1367/FFFFFFFFFFFF0A08 :                     ; ; a2 - MAIN layout (SH2 AREA)
(1) 1368/FFFFFFFFFFFF0A08 :                     ; ; a3 - *** UNUSED, set to 0
(1) 1369/FFFFFFFFFFFF0A08 :                     ; ; a4 - Collision data (68K AREA)
(1) 1370/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1371/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 1372/FFFFFFFFFFFF0A08 :                     ; ; d0,d6-d7
(1) 1373/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1374/FFFFFFFFFFFF0A08 :                     ;
(1) 1375/FFFFFFFFFFFF0A08 :                     ; MdMap_Set:
(1) 1376/FFFFFFFFFFFF0A08 :                     ; 		tst.w	d0
(1) 1377/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.md_side
(1) 1378/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1379/FFFFFFFFFFFF0A08 :                     ; 		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1380/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.mars_side
(1) 1381/FFFFFFFFFFFF0A08 :                     ; .md_side:
(1) 1382/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1383/FFFFFFFFFFFF0A08 :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1384/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a6
(1) 1385/FFFFFFFFFFFF0A08 :                     ; 		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1386/FFFFFFFFFFFF0A08 :                     ; .mars_side:
(1) 1387/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,md_bg_vpos(a6)
(1) 1388/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,md_bg_vram(a6)
(1) 1389/FFFFFFFFFFFF0A08 :                     ;
(1) 1390/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d7
(1) 1391/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x(a6),d7
(1) 1392/FFFFFFFFFFFF0A08 :                     ; 		move.b	d7,md_bg_xset(a6)
(1) 1393/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,md_bg_x_old(a6)
(1) 1394/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1395/FFFFFFFFFFFF0A08 :                     ; 		move.l	d7,md_bg_x(a6)
(1) 1396/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d7
(1) 1397/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y(a6),d7
(1) 1398/FFFFFFFFFFFF0A08 :                     ; 		move.b	d7,md_bg_yset(a6)
(1) 1399/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,md_bg_y_old(a6)
(1) 1400/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1401/FFFFFFFFFFFF0A08 :                     ; 		move.l	d7,md_bg_y(a6)
(1) 1402/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$F,d3
(1) 1403/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$F,d4
(1) 1404/FFFFFFFFFFFF0A08 :                     ;
(1) 1405/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 1406/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1407/FFFFFFFFFFFF0A08 :                     ; 		move.l	a1,md_bg_blk(a6)
(1) 1408/FFFFFFFFFFFF0A08 :                     ; 		move.l	a2,md_bg_low(a6)
(1) 1409/FFFFFFFFFFFF0A08 :                     ; 		move.l	a3,md_bg_hi(a6)
(1) 1410/FFFFFFFFFFFF0A08 :                     ; 		move.l	a4,md_bg_col(a6)
(1) 1411/FFFFFFFFFFFF0A08 :                     ; 		move.l	a0,a5
(1) 1412/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1413/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1414/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a5)+,d4	; BLOCK width
(1) 1415/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a5)+,d3	; BLOCK height
(1) 1416/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d4
(1) 1417/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d3
(1) 1418/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,md_bg_w(a6)
(1) 1419/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,md_bg_h(a6)
(1) 1420/FFFFFFFFFFFF0A08 :                     ; 		move.b	d4,md_bg_bw(a6)
(1) 1421/FFFFFFFFFFFF0A08 :                     ; 		move.b	d3,md_bg_bh(a6)
(1) 1422/FFFFFFFFFFFF0A08 :                     ; 		mulu.w	d4,d7
(1) 1423/FFFFFFFFFFFF0A08 :                     ; 		mulu.w	d3,d6
(1) 1424/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,md_bg_wf(a6)
(1) 1425/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,md_bg_hf(a6)
(1) 1426/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d4
(1) 1427/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d3
(1) 1428/FFFFFFFFFFFF0A08 :                     ; 		and.b	d4,md_bg_xset(a6)
(1) 1429/FFFFFFFFFFFF0A08 :                     ; 		and.b	d3,md_bg_yset(a6)
(1) 1430/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 1431/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1432/FFFFFFFFFFFF0A08 :                     ;
(1) 1433/FFFFFFFFFFFF0A08 :                     ; 	; TODO: improve this...
(1) 1434/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x(a6),d3
(1) 1435/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y(a6),d4
(1) 1436/FFFFFFFFFFFF0A08 :                     ; 	; X beams
(1) 1437/FFFFFFFFFFFF0A08 :                     ; .xl_l:		cmp.w	d7,d3
(1) 1438/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.xl_g
(1) 1439/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d7,d3
(1) 1440/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.xl_l
(1) 1441/FFFFFFFFFFFF0A08 :                     ; .xl_g:
(1) 1442/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,md_bg_xinc_l(a6)
(1) 1443/FFFFFFFFFFFF0A08 :                     ; 		add.w	#320,d3				; <-- X resolution R
(1) 1444/FFFFFFFFFFFF0A08 :                     ; .xr_l:		cmp.w	d7,d3
(1) 1445/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.xr_g
(1) 1446/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d7,d3
(1) 1447/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.xr_l
(1) 1448/FFFFFFFFFFFF0A08 :                     ; .xr_g:
(1) 1449/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,md_bg_xinc_r(a6)
(1) 1450/FFFFFFFFFFFF0A08 :                     ;
(1) 1451/FFFFFFFFFFFF0A08 :                     ; 	; Y beams
(1) 1452/FFFFFFFFFFFF0A08 :                     ; .yt_l:		cmp.w	d6,d4
(1) 1453/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.yt_g
(1) 1454/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d6,d4
(1) 1455/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.yt_l
(1) 1456/FFFFFFFFFFFF0A08 :                     ; .yt_g:
(1) 1457/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1458/FFFFFFFFFFFF0A08 :                     ; 		add.w	#224,d4				; <-- Y resolution B
(1) 1459/FFFFFFFFFFFF0A08 :                     ; .yb_l:		cmp.w	d6,d4
(1) 1460/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.yb_g
(1) 1461/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d6,d4
(1) 1462/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.yb_l
(1) 1463/FFFFFFFFFFFF0A08 :                     ; .yb_g:
(1) 1464/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1465/FFFFFFFFFFFF0A08 :                     ;
(1) 1466/FFFFFFFFFFFF0A08 :                     ; 		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1467/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1468/FFFFFFFFFFFF0A08 :                     ;
(1) 1469/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1470/FFFFFFFFFFFF0A08 :                     ; ; MdMap_Move
(1) 1471/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1472/FFFFFFFFFFFF0A08 :                     ; ; Moves the current background/foreground
(1) 1473/FFFFFFFFFFFF0A08 :                     ; ; and checks for overflow.
(1) 1474/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1475/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 1476/FFFFFFFFFFFF0A08 :                     ; ; d0 | WORD - Background slot, if -1 32X's
(1) 1477/FFFFFFFFFFFF0A08 :                     ; ; d1 | WORD - Current X position
(1) 1478/FFFFFFFFFFFF0A08 :                     ; ; d2 | WORD - Current Y position
(1) 1479/FFFFFFFFFFFF0A08 :                     ; ; a0 - Background to move and check.
(1) 1480/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1481/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 1482/FFFFFFFFFFFF0A08 :                     ; ; d6-d7
(1) 1483/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1484/FFFFFFFFFFFF0A08 :                     ;
(1) 1485/FFFFFFFFFFFF0A08 :                     ; MdMap_Move:
(1) 1486/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1487/FFFFFFFFFFFF0A08 :                     ; 		tst.w	d0
(1) 1488/FFFFFFFFFFFF0A08 :                     ; 		bmi.s	.mars_side
(1) 1489/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1490/FFFFFFFFFFFF0A08 :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1491/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a6
(1) 1492/FFFFFFFFFFFF0A08 :                     ; .mars_side:
(1) 1493/FFFFFFFFFFFF0A08 :                     ; ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1494/FFFFFFFFFFFF0A08 :                     ; ; 		beq	.not_enabld
(1) 1495/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_wf(a6),d0
(1) 1496/FFFFFFFFFFFF0A08 :                     ; 		tst.w	d1
(1) 1497/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.x_left
(1) 1498/FFFFFFFFFFFF0A08 :                     ; 		clr.w	d1
(1) 1499/FFFFFFFFFFFF0A08 :                     ; .x_left:
(1) 1500/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#320,d0
(1) 1501/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d0,d1
(1) 1502/FFFFFFFFFFFF0A08 :                     ; 		bcs.s	.x_right
(1) 1503/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d1
(1) 1504/FFFFFFFFFFFF0A08 :                     ; .x_right:
(1) 1505/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_hf(a6),d0
(1) 1506/FFFFFFFFFFFF0A08 :                     ; 		tst.w	d2
(1) 1507/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.y_left
(1) 1508/FFFFFFFFFFFF0A08 :                     ; 		clr.w	d2
(1) 1509/FFFFFFFFFFFF0A08 :                     ; .y_left:
(1) 1510/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#224,d0
(1) 1511/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d0,d2
(1) 1512/FFFFFFFFFFFF0A08 :                     ; 		bcs.s	.y_right
(1) 1513/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d2
(1) 1514/FFFFFFFFFFFF0A08 :                     ; .y_right:
(1) 1515/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,md_bg_x(a6)
(1) 1516/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,md_bg_y(a6)
(1) 1517/FFFFFFFFFFFF0A08 :                     ; .not_enabld:
(1) 1518/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1519/FFFFFFFFFFFF0A08 :                     ;
(1) 1520/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1521/FFFFFFFFFFFF0A08 :                     ; ; MdMap_Update
(1) 1522/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1523/FFFFFFFFFFFF0A08 :                     ; ; Updates backgrounds internally, call this
(1) 1524/FFFFFFFFFFFF0A08 :                     ; ; BEFORE going into VBlank.
(1) 1525/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1526/FFFFFFFFFFFF0A08 :                     ; ; Then later call MdMap_DrawScrl on VBlank,
(1) 1527/FFFFFFFFFFFF0A08 :                     ; ; this also applies for the 32X as this routine also
(1) 1528/FFFFFFFFFFFF0A08 :                     ; ; resets the drawing bits.
(1) 1529/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1530/FFFFFFFFFFFF0A08 :                     ; ; For the 32X:
(1) 1531/FFFFFFFFFFFF0A08 :                     ; ; Call System_MarsUpdate AFTER this.
(1) 1532/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1533/FFFFFFFFFFFF0A08 :                     ;
(1) 1534/FFFFFFFFFFFF0A08 :                     ; MdMap_Update:
(1) 1535/FFFFFFFFFFFF0A08 :                     ; 	if MARS|MARSCD
(1) 1536/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1537/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.this_bg
(1) 1538/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1539/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.this_bg
(1) 1540/FFFFFFFFFFFF0A08 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1541/FFFFFFFFFFFF0A08 :                     ; .this_bg:
(1) 1542/FFFFFFFFFFFF0A08 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1543/FFFFFFFFFFFF0A08 :                     ; 		beq	.no_bg
(1) 1544/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d1
(1) 1545/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d2
(1) 1546/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x(a6),d3
(1) 1547/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x_old(a6),d0
(1) 1548/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d0,d3
(1) 1549/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.xequ
(1) 1550/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,d1
(1) 1551/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d0,d1
(1) 1552/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,md_bg_x_old(a6)
(1) 1553/FFFFFFFFFFFF0A08 :                     ; .xequ:
(1) 1554/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y(a6),d3
(1) 1555/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y_old(a6),d0
(1) 1556/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d0,d3
(1) 1557/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.yequ
(1) 1558/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,d2
(1) 1559/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d0,d2
(1) 1560/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,md_bg_y_old(a6)
(1) 1561/FFFFFFFFFFFF0A08 :                     ; .yequ:
(1) 1562/FFFFFFFFFFFF0A08 :                     ;
(1) 1563/FFFFFFFFFFFF0A08 :                     ; 	; Increment drawing beams
(1) 1564/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,d0
(1) 1565/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_wf(a6),d5
(1) 1566/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_xinc_l(a6),d4
(1) 1567/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.beam_incr
(1) 1568/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,md_bg_xinc_l(a6)
(1) 1569/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_xinc_r(a6),d4
(1) 1570/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.beam_incr
(1) 1571/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,md_bg_xinc_r(a6)
(1) 1572/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,d0
(1) 1573/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_hf(a6),d5
(1) 1574/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_yinc_u(a6),d4
(1) 1575/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.beam_incr
(1) 1576/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1577/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_yinc_d(a6),d4
(1) 1578/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.beam_incr
(1) 1579/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1580/FFFFFFFFFFFF0A08 :                     ;
(1) 1581/FFFFFFFFFFFF0A08 :                     ; 	; Update internal counters
(1) 1582/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d3
(1) 1583/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_bw(a6),d3		; X set
(1) 1584/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_xset(a6),d0
(1) 1585/FFFFFFFFFFFF0A08 :                     ; 		add.b	d1,d0
(1) 1586/FFFFFFFFFFFF0A08 :                     ; 		move.b	d0,d4
(1) 1587/FFFFFFFFFFFF0A08 :                     ; 		and.w	d3,d4
(1) 1588/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.x_k
(1) 1589/FFFFFFFFFFFF0A08 :                     ; 		moveq	#bitDrwR,d4
(1) 1590/FFFFFFFFFFFF0A08 :                     ; 		tst.w	d1
(1) 1591/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.x_r
(1) 1592/FFFFFFFFFFFF0A08 :                     ; 		moveq	#bitDrwL,d4
(1) 1593/FFFFFFFFFFFF0A08 :                     ; .x_r:
(1) 1594/FFFFFFFFFFFF0A08 :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1595/FFFFFFFFFFFF0A08 :                     ; .x_k:
(1) 1596/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d3
(1) 1597/FFFFFFFFFFFF0A08 :                     ; 		and.b	d3,d0
(1) 1598/FFFFFFFFFFFF0A08 :                     ; 		move.b	d0,md_bg_xset(a6)
(1) 1599/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_bh(a6),d3		; Y set
(1) 1600/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_yset(a6),d0
(1) 1601/FFFFFFFFFFFF0A08 :                     ; 		add.b	d2,d0
(1) 1602/FFFFFFFFFFFF0A08 :                     ; 		move.b	d0,d4
(1) 1603/FFFFFFFFFFFF0A08 :                     ; 		and.w	d3,d4
(1) 1604/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.y_k
(1) 1605/FFFFFFFFFFFF0A08 :                     ; 		moveq	#bitDrwD,d4
(1) 1606/FFFFFFFFFFFF0A08 :                     ; 		tst.w	d2
(1) 1607/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.y_d
(1) 1608/FFFFFFFFFFFF0A08 :                     ; 		moveq	#bitDrwU,d4
(1) 1609/FFFFFFFFFFFF0A08 :                     ; .y_d:
(1) 1610/FFFFFFFFFFFF0A08 :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1611/FFFFFFFFFFFF0A08 :                     ; .y_k:
(1) 1612/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d3
(1) 1613/FFFFFFFFFFFF0A08 :                     ; 		and.b	d3,d0
(1) 1614/FFFFFFFFFFFF0A08 :                     ; 		move.b	d0,md_bg_yset(a6)
(1) 1615/FFFFFFFFFFFF0A08 :                     ; .no_bg:
(1) 1616/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1617/FFFFFFFFFFFF0A08 :                     ;
(1) 1618/FFFFFFFFFFFF0A08 :                     ; ; d0 - Increment by
(1) 1619/FFFFFFFFFFFF0A08 :                     ; ; d4 - X/Y beam
(1) 1620/FFFFFFFFFFFF0A08 :                     ; ; d5 - Max Width/Height
(1) 1621/FFFFFFFFFFFF0A08 :                     ; .beam_incr:
(1) 1622/FFFFFFFFFFFF0A08 :                     ; 		add.w	d0,d4
(1) 1623/FFFFFFFFFFFF0A08 :                     ; .xd_l:		tst.w	d4
(1) 1624/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.xd_g
(1) 1625/FFFFFFFFFFFF0A08 :                     ; 		add.w	d5,d4
(1) 1626/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.xd_l
(1) 1627/FFFFFFFFFFFF0A08 :                     ; .xd_g:		cmp.w	d5,d4
(1) 1628/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.val_h
(1) 1629/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d5,d4
(1) 1630/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.xd_g
(1) 1631/FFFFFFFFFFFF0A08 :                     ; .val_h:
(1) 1632/FFFFFFFFFFFF0A08 :                     ; 	endif
(1) 1633/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1634/FFFFFFFFFFFF0A08 :                     ;
(1) 1635/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1636/FFFFFFFFFFFF0A08 :                     ; ; MdMap_DrawAll
(1) 1637/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1638/FFFFFFFFFFFF0A08 :                     ; ; Call this only if DISPLAY is OFF or in VBlank
(1) 1639/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1640/FFFFFFFFFFFF0A08 :                     ; ; Notes:
(1) 1641/FFFFFFFFFFFF0A08 :                     ; ; - Does NOT check for off-bounds blocks
(1) 1642/FFFFFFFFFFFF0A08 :                     ; ; - Blocks with ID $00 are skipped.
(1) 1643/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1644/FFFFFFFFFFFF0A08 :                     ;
(1) 1645/FFFFFFFFFFFF0A08 :                     ; MdMap_DrawAll:
(1) 1646/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1647/FFFFFFFFFFFF0A08 :                     ; 		bsr	.this_bg
(1) 1648/FFFFFFFFFFFF0A08 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1649/FFFFFFFFFFFF0A08 :                     ; .this_bg:
(1) 1650/FFFFFFFFFFFF0A08 :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1651/FFFFFFFFFFFF0A08 :                     ; 		beq	.no_bg
(1) 1652/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_blk(a6),a5
(1) 1653/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_low(a6),a4
(1) 1654/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_hi(a6),a3
(1) 1655/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1656/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1657/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_bw(a6),d2
(1) 1658/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_bh(a6),d3
(1) 1659/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_w(a6),d4
(1) 1660/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	md_bg_wf(a6),d5
(1) 1661/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	md_bg_hf(a6),d6
(1) 1662/FFFFFFFFFFFF0A08 :                     ;
(1) 1663/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d6
(1) 1664/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d6
(1) 1665/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d6
(1) 1666/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#2,d6
(1) 1667/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$7F,d6
(1) 1668/FFFFFFFFFFFF0A08 :                     ;
(1) 1669/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 1670/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,d5
(1) 1671/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d5
(1) 1672/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#4,d5
(1) 1673/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$F00,d5
(1) 1674/FFFFFFFFFFFF0A08 :                     ;
(1) 1675/FFFFFFFFFFFF0A08 :                     ; 		add.w	d5,d6
(1) 1676/FFFFFFFFFFFF0A08 :                     ; 		add.w	md_bg_vpos(a6),d6
(1) 1677/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,d5
(1) 1678/FFFFFFFFFFFF0A08 :                     ; 		rol.w	#2,d6
(1) 1679/FFFFFFFFFFFF0A08 :                     ; 		and.w	#%11,d6
(1) 1680/FFFFFFFFFFFF0A08 :                     ; 		swap	d6
(1) 1681/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$3FFF,d5
(1) 1682/FFFFFFFFFFFF0A08 :                     ; 		move.w	d5,d6			; d6 - VDP 2nd|1st writes
(1) 1683/FFFFFFFFFFFF0A08 :                     ;
(1) 1684/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d2
(1) 1685/FFFFFFFFFFFF0A08 :                     ; 		muls.w	d2,d0
(1) 1686/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#8,d0
(1) 1687/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d3
(1) 1688/FFFFFFFFFFFF0A08 :                     ; 		muls.w	d3,d1
(1) 1689/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#8,d1
(1) 1690/FFFFFFFFFFFF0A08 :                     ; 		muls.w	d4,d1
(1) 1691/FFFFFFFFFFFF0A08 :                     ; 		add.l	d1,d0
(1) 1692/FFFFFFFFFFFF0A08 :                     ; 		add.l	d0,a4
(1) 1693/FFFFFFFFFFFF0A08 :                     ; 		add.l	d0,a3
(1) 1694/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$80,d1
(1) 1695/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,d3
(1) 1696/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 1697/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d3
(1) 1698/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d2
(1) 1699/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1700/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 1701/FFFFFFFFFFFF0A08 :                     ; 		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1702/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$0FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1703/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1704/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$100,d4
(1) 1705/FFFFFFFFFFFF0A08 :                     ; 		move.w	d5,d0
(1) 1706/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1707/FFFFFFFFFFFF0A08 :                     ; 		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1708/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1709/FFFFFFFFFFFF0A08 :                     ; 		move.w	#(256/16)-1,d7
(1) 1710/FFFFFFFFFFFF0A08 :                     ;
(1) 1711/FFFFFFFFFFFF0A08 :                     ; 	; a6 - Current BG buffer
(1) 1712/FFFFFFFFFFFF0A08 :                     ; 	; a5 - Block-data base
(1) 1713/FFFFFFFFFFFF0A08 :                     ; 	; a4 - LOW layout data Y
(1) 1714/FFFFFFFFFFFF0A08 :                     ; 	; a3 - HI layout data Y
(1) 1715/FFFFFFFFFFFF0A08 :                     ; 	; a2 - a4 current
(1) 1716/FFFFFFFFFFFF0A08 :                     ; 	; a1 - a3 current
(1) 1717/FFFFFFFFFFFF0A08 :                     ; 	; a0 - Block-data read
(1) 1718/FFFFFFFFFFFF0A08 :                     ;
(1) 1719/FFFFFFFFFFFF0A08 :                     ; 	; d7 - X loop        | Y loop
(1) 1720/FFFFFFFFFFFF0A08 :                     ; 	; d6 - VDP 2nd Write | X/Y VDP pos + addr bits
(1) 1721/FFFFFFFFFFFF0A08 :                     ; 	; d5 - X loop-save   | X VDP current
(1) 1722/FFFFFFFFFFFF0A08 :                     ; 	; d4 - Y wrap        | Y next block pos
(1) 1723/FFFFFFFFFFFF0A08 :                     ; 	; d3 - X wrap        | X next block pos
(1) 1724/FFFFFFFFFFFF0A08 :                     ; 	; d2 - Y block size  | VRAM-cell base
(1) 1725/FFFFFFFFFFFF0A08 :                     ; 	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1726/FFFFFFFFFFFF0A08 :                     ; 	; d0 -    ---        | ---
(1) 1727/FFFFFFFFFFFF0A08 :                     ;
(1) 1728/FFFFFFFFFFFF0A08 :                     ; .y_loop:
(1) 1729/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1730/FFFFFFFFFFFF0A08 :                     ; 		move.l	a4,a2		; a2 - LOW line
(1) 1731/FFFFFFFFFFFF0A08 :                     ; 		move.l	a3,a1		; a1 - HI line
(1) 1732/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,d5
(1) 1733/FFFFFFFFFFFF0A08 :                     ; .x_loop:
(1) 1734/FFFFFFFFFFFF0A08 :                     ; 		swap	d5
(1) 1735/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,d1
(1) 1736/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a2),d0		; HI block?
(1) 1737/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.got_blk
(1) 1738/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$8000,d1
(1) 1739/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a1),d0
(1) 1740/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.blank
(1) 1741/FFFFFFFFFFFF0A08 :                     ; .got_blk:
(1) 1742/FFFFFFFFFFFF0A08 :                     ; 		bsr	.mk_block
(1) 1743/FFFFFFFFFFFF0A08 :                     ; .blank:
(1) 1744/FFFFFFFFFFFF0A08 :                     ; 		move.l	d3,d0
(1) 1745/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1746/FFFFFFFFFFFF0A08 :                     ; 		add.w	d3,d5		; next VDP X pos
(1) 1747/FFFFFFFFFFFF0A08 :                     ; 		and.w	d0,d5
(1) 1748/FFFFFFFFFFFF0A08 :                     ; 		adda	#1,a2
(1) 1749/FFFFFFFFFFFF0A08 :                     ; 		adda	#1,a1
(1) 1750/FFFFFFFFFFFF0A08 :                     ; 		swap	d5
(1) 1751/FFFFFFFFFFFF0A08 :                     ; 		dbf	d5,.x_loop
(1) 1752/FFFFFFFFFFFF0A08 :                     ;
(1) 1753/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,d0
(1) 1754/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$3000,d0
(1) 1755/FFFFFFFFFFFF0A08 :                     ; 		add.w	d4,d6		; <-- next VDP Y block
(1) 1756/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1757/FFFFFFFFFFFF0A08 :                     ; 		and.w	d4,d6
(1) 1758/FFFFFFFFFFFF0A08 :                     ; 		or.w	d0,d6
(1) 1759/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1760/FFFFFFFFFFFF0A08 :                     ;
(1) 1761/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_w(a6),d0 ; ***
(1) 1762/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a4
(1) 1763/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a3
(1) 1764/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1765/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.y_loop
(1) 1766/FFFFFFFFFFFF0A08 :                     ; .no_bg:
(1) 1767/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1768/FFFFFFFFFFFF0A08 :                     ;
(1) 1769/FFFFFFFFFFFF0A08 :                     ; ; barely got free regs without using stack
(1) 1770/FFFFFFFFFFFF0A08 :                     ; .mk_block:
(1) 1771/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 1772/FFFFFFFFFFFF0A08 :                     ; 		move.l	a5,a0
(1) 1773/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d0
(1) 1774/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1775/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a0		; a0 - cell word data
(1) 1776/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,d0
(1) 1777/FFFFFFFFFFFF0A08 :                     ; 		add.w	d5,d0
(1) 1778/FFFFFFFFFFFF0A08 :                     ; 		or.w	#$4000,d0
(1) 1779/FFFFFFFFFFFF0A08 :                     ; 		swap	d6
(1) 1780/FFFFFFFFFFFF0A08 :                     ;
(1) 1781/FFFFFFFFFFFF0A08 :                     ; 	; d0 - topleft VDP write | $4000
(1) 1782/FFFFFFFFFFFF0A08 :                     ; 	; d6 - right VDP write
(1) 1783/FFFFFFFFFFFF0A08 :                     ; 	; d2 is free
(1) 1784/FFFFFFFFFFFF0A08 :                     ; 	;
(1) 1785/FFFFFFFFFFFF0A08 :                     ; 	; currently working: 16x16
(1) 1786/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.drwy_16	; 1-
(1) 1787/FFFFFFFFFFFF0A08 :                     ; 		add.w	#2,d0		; 2-
(1) 1788/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.drwy_16	; -3
(1) 1789/FFFFFFFFFFFF0A08 :                     ; 					; -4
(1) 1790/FFFFFFFFFFFF0A08 :                     ; 		swap	d6
(1) 1791/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 1792/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1793/FFFFFFFFFFFF0A08 :                     ;
(1) 1794/FFFFFFFFFFFF0A08 :                     ; ; d0 - left vdp
(1) 1795/FFFFFFFFFFFF0A08 :                     ; ; d6 - right vdp
(1) 1796/FFFFFFFFFFFF0A08 :                     ; .drwy_16:
(1) 1797/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d2
(1) 1798/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1799/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,d0
(1) 1800/FFFFFFFFFFFF0A08 :                     ; 		add.w	d1,d0
(1) 1801/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1802/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1803/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,(vdp_data).l
(1) 1804/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 1805/FFFFFFFFFFFF0A08 :                     ; 		add.w	d1,d2		; Next line
(1) 1806/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 1807/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,d0
(1) 1808/FFFFFFFFFFFF0A08 :                     ; 		add.w	d1,d0
(1) 1809/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1810/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1811/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,(vdp_data).l
(1) 1812/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1813/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1814/FFFFFFFFFFFF0A08 :                     ;
(1) 1815/FFFFFFFFFFFF0A08 :                     ; 	; Block: 16x16 as 13
(1) 1816/FFFFFFFFFFFF0A08 :                     ; 	;                 24
(1) 1817/FFFFFFFFFFFF0A08 :                     ; 	; d0 - block ID
(1) 1818/FFFFFFFFFFFF0A08 :                     ; 	; d1 - VRAM-add base
(1) 1819/FFFFFFFFFFFF0A08 :                     ; 	; d6 - VDP out R | VDP out L
(1) 1820/FFFFFFFFFFFF0A08 :                     ; ; 		and.w	#$FF,d0
(1) 1821/FFFFFFFFFFFF0A08 :                     ; ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1822/FFFFFFFFFFFF0A08 :                     ; ; 		move.l	(a5,d0.w),d2
(1) 1823/FFFFFFFFFFFF0A08 :                     ; ; 		add.l	d1,d2
(1) 1824/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d2
(1) 1825/FFFFFFFFFFFF0A08 :                     ; ; 		move.l	4(a5,d0.w),d3
(1) 1826/FFFFFFFFFFFF0A08 :                     ; ; 		add.l	d1,d3
(1) 1827/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d3
(1) 1828/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d6,d0
(1) 1829/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d5
(1) 1830/FFFFFFFFFFFF0A08 :                     ; ; 		add.w	d5,d0
(1) 1831/FFFFFFFFFFFF0A08 :                     ; ; 		or.w	#$4000,d0
(1) 1832/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d5
(1) 1833/FFFFFFFFFFFF0A08 :                     ; ; 		move.l	a0,d1
(1) 1834/FFFFFFFFFFFF0A08 :                     ; ; 		and.w	d1,d5
(1) 1835/FFFFFFFFFFFF0A08 :                     ; ; 		add.w	d5,d0
(1) 1836/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d6
(1) 1837/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1838/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1839/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1840/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1841/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d2
(1) 1842/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d3
(1) 1843/FFFFFFFFFFFF0A08 :                     ; ; 		add.w	#$80,d0		; line add
(1) 1844/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1845/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1846/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1847/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1848/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d6
(1) 1849/FFFFFFFFFFFF0A08 :                     ; ; 		rts
(1) 1850/FFFFFFFFFFFF0A08 :                     ;
(1) 1851/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1852/FFFFFFFFFFFF0A08 :                     ; ; MdMap_DrawScrlMd
(1) 1853/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1854/FFFFFFFFFFFF0A08 :                     ; ; Draws map off-screen changes, only on Genesis-side.
(1) 1855/FFFFFFFFFFFF0A08 :                     ; ;
(1) 1856/FFFFFFFFFFFF0A08 :                     ; ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 1857/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 1858/FFFFFFFFFFFF0A08 :                     ;
(1) 1859/FFFFFFFFFFFF0A08 :                     ; MdMap_DrawScrlMd:
(1) 1860/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1861/FFFFFFFFFFFF0A08 :                     ; 		lea	(vdp_data),a5
(1) 1862/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.this_bg
(1) 1863/FFFFFFFFFFFF0A08 :                     ; 		adda	#sizeof_mdbg,a6
(1) 1864/FFFFFFFFFFFF0A08 :                     ; 	; SH2-side handles the
(1) 1865/FFFFFFFFFFFF0A08 :                     ; 	; RAM_BgBufferM's drawing
(1) 1866/FFFFFFFFFFFF0A08 :                     ;
(1) 1867/FFFFFFFFFFFF0A08 :                     ; .this_bg:
(1) 1868/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_flags(a6),d7
(1) 1869/FFFFFFFFFFFF0A08 :                     ; 		btst	#bitBgOn,d7
(1) 1870/FFFFFFFFFFFF0A08 :                     ; 		beq	.no_bg
(1) 1871/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1872/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1873/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1874/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1875/FFFFFFFFFFFF0A08 :                     ; 		bclr	#bitDrwU,d7
(1) 1876/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_u
(1) 1877/FFFFFFFFFFFF0A08 :                     ; 		bsr	.mk_row
(1) 1878/FFFFFFFFFFFF0A08 :                     ; .no_u:
(1) 1879/FFFFFFFFFFFF0A08 :                     ; 		bclr	#bitDrwD,d7
(1) 1880/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_d
(1) 1881/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_yinc_d(a6),d3
(1) 1882/FFFFFFFFFFFF0A08 :                     ; 		add.w	#224,d1			; X add
(1) 1883/FFFFFFFFFFFF0A08 :                     ; 		bsr	.mk_row
(1) 1884/FFFFFFFFFFFF0A08 :                     ; .no_d:
(1) 1885/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1886/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1887/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1888/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1889/FFFFFFFFFFFF0A08 :                     ; 		bclr	#bitDrwL,d7
(1) 1890/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_l
(1) 1891/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.mk_clmn
(1) 1892/FFFFFFFFFFFF0A08 :                     ; .no_l:
(1) 1893/FFFFFFFFFFFF0A08 :                     ; 		bclr	#bitDrwR,d7
(1) 1894/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_r
(1) 1895/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_xinc_r(a6),d2
(1) 1896/FFFFFFFFFFFF0A08 :                     ; 		add.w	#320,d0			; X add
(1) 1897/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	.mk_clmn
(1) 1898/FFFFFFFFFFFF0A08 :                     ; .no_r:
(1) 1899/FFFFFFFFFFFF0A08 :                     ;
(1) 1900/FFFFFFFFFFFF0A08 :                     ; 		move.b	d7,md_bg_flags(a6)
(1) 1901/FFFFFFFFFFFF0A08 :                     ; .no_bg:
(1) 1902/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 1903/FFFFFFFFFFFF0A08 :                     ;
(1) 1904/FFFFFFFFFFFF0A08 :                     ; ; ------------------------------------------------
(1) 1905/FFFFFFFFFFFF0A08 :                     ; ; Make column
(1) 1906/FFFFFFFFFFFF0A08 :                     ; ; d0 - X
(1) 1907/FFFFFFFFFFFF0A08 :                     ; ; d1 - Y
(1) 1908/FFFFFFFFFFFF0A08 :                     ; ; d2 - X increment
(1) 1909/FFFFFFFFFFFF0A08 :                     ; ; d3 - Y increment
(1) 1910/FFFFFFFFFFFF0A08 :                     ; ; ------------------------------------------------
(1) 1911/FFFFFFFFFFFF0A08 :                     ;
(1) 1912/FFFFFFFFFFFF0A08 :                     ; .mk_clmn:
(1) 1913/FFFFFFFFFFFF0A08 :                     ; ; 		btst	#bitMarsBg,d7
(1) 1914/FFFFFFFFFFFF0A08 :                     ; ; 		bne	.mars_ret_c
(1) 1915/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1916/FFFFFFFFFFFF0A08 :                     ; 		bsr	.get_coords
(1) 1917/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1918/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,d0
(1) 1919/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1920/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$FFF,d3
(1) 1921/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 1922/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$100,d3
(1) 1923/FFFFFFFFFFFF0A08 :                     ;
(1) 1924/FFFFFFFFFFFF0A08 :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 1925/FFFFFFFFFFFF0A08 :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 1926/FFFFFFFFFFFF0A08 :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 1927/FFFFFFFFFFFF0A08 :                     ; 	; d3 -    Y wrap | Y add
(1) 1928/FFFFFFFFFFFF0A08 :                     ; 	; d4 -         *****
(1) 1929/FFFFFFFFFFFF0A08 :                     ; 	; d5 -         *****
(1) 1930/FFFFFFFFFFFF0A08 :                     ; 	; d6 -         *****
(1) 1931/FFFFFFFFFFFF0A08 :                     ; 	; d7 - lastflags | loop blocks
(1) 1932/FFFFFFFFFFFF0A08 :                     ;
(1) 1933/FFFFFFFFFFFF0A08 :                     ; 		move.w	#(256/16)-1,d7
(1) 1934/FFFFFFFFFFFF0A08 :                     ; .y_blk:
(1) 1935/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 1936/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 1937/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a3),d6
(1) 1938/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.vld
(1) 1939/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a2),d6
(1) 1940/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.prio
(1) 1941/FFFFFFFFFFFF0A08 :                     ; .blnk:
(1) 1942/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 1943/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 1944/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.frce
(1) 1945/FFFFFFFFFFFF0A08 :                     ; .prio:
(1) 1946/FFFFFFFFFFFF0A08 :                     ; 		move.l	#$80008000,d4
(1) 1947/FFFFFFFFFFFF0A08 :                     ; 		move.l	#$80008000,d5
(1) 1948/FFFFFFFFFFFF0A08 :                     ; .vld:
(1) 1949/FFFFFFFFFFFF0A08 :                     ; 		move.l	a4,a0
(1) 1950/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d6
(1) 1951/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d6
(1) 1952/FFFFFFFFFFFF0A08 :                     ; 		adda	d6,a0
(1) 1953/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 1954/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d4
(1) 1955/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d5
(1) 1956/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d4
(1) 1957/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d5
(1) 1958/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1959/FFFFFFFFFFFF0A08 :                     ; 		swap	d5
(1) 1960/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d4
(1) 1961/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d5
(1) 1962/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d4
(1) 1963/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d5
(1) 1964/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 1965/FFFFFFFFFFFF0A08 :                     ; .frce:
(1) 1966/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d6
(1) 1967/FFFFFFFFFFFF0A08 :                     ; 		add.w	d1,d6
(1) 1968/FFFFFFFFFFFF0A08 :                     ; 		or.w	#$4000,d6
(1) 1969/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,4(a5)
(1) 1970/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,4(a5)
(1) 1971/FFFFFFFFFFFF0A08 :                     ; 		move.l	d4,(a5)
(1) 1972/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$80,d6
(1) 1973/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,4(a5)
(1) 1974/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,4(a5)
(1) 1975/FFFFFFFFFFFF0A08 :                     ; 		move.l	d5,(a5)
(1) 1976/FFFFFFFFFFFF0A08 :                     ; 		move.l	d3,d4		; Next Y block
(1) 1977/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 1978/FFFFFFFFFFFF0A08 :                     ; 		add.w	d3,d0
(1) 1979/FFFFFFFFFFFF0A08 :                     ; 		and.w	d4,d0
(1) 1980/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_w(a6),d6
(1) 1981/FFFFFFFFFFFF0A08 :                     ; 		adda	d6,a3
(1) 1982/FFFFFFFFFFFF0A08 :                     ; 		adda	d6,a2
(1) 1983/FFFFFFFFFFFF0A08 :                     ; 		swap	d1		; <-- TODO: improve this later.
(1) 1984/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$10,d1
(1) 1985/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	md_bg_hf(a6),d1
(1) 1986/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.y_low
(1) 1987/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1988/FFFFFFFFFFFF0A08 :                     ; 		clr.w	d1
(1) 1989/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_low(a6),a3
(1) 1990/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_hi(a6),a2
(1) 1991/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a2
(1) 1992/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a3
(1) 1993/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 1994/FFFFFFFFFFFF0A08 :                     ; .y_low:
(1) 1995/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 1996/FFFFFFFFFFFF0A08 :                     ;
(1) 1997/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.y_blk
(1) 1998/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 1999/FFFFFFFFFFFF0A08 :                     ; .mars_ret_c:
(1) 2000/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2001/FFFFFFFFFFFF0A08 :                     ;
(1) 2002/FFFFFFFFFFFF0A08 :                     ; ; ------------------------------------------------
(1) 2003/FFFFFFFFFFFF0A08 :                     ; ; Make row
(1) 2004/FFFFFFFFFFFF0A08 :                     ; ; d0 - X
(1) 2005/FFFFFFFFFFFF0A08 :                     ; ; d1 - Y
(1) 2006/FFFFFFFFFFFF0A08 :                     ; ; d2 - X increment
(1) 2007/FFFFFFFFFFFF0A08 :                     ; ; d3 - Y increment
(1) 2008/FFFFFFFFFFFF0A08 :                     ; ; ------------------------------------------------
(1) 2009/FFFFFFFFFFFF0A08 :                     ;
(1) 2010/FFFFFFFFFFFF0A08 :                     ; .mk_row:
(1) 2011/FFFFFFFFFFFF0A08 :                     ; ; 		btst	#bitMarsBg,d7
(1) 2012/FFFFFFFFFFFF0A08 :                     ; ; 		bne.s	.mars_ret_c
(1) 2013/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 2014/FFFFFFFFFFFF0A08 :                     ; 		bsr	.get_coords
(1) 2015/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 2016/FFFFFFFFFFFF0A08 :                     ; 		move.w	d5,d1
(1) 2017/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 2018/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$7F,d3
(1) 2019/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 2020/FFFFFFFFFFFF0A08 :                     ; 		move.w	#4,d3
(1) 2021/FFFFFFFFFFFF0A08 :                     ;
(1) 2022/FFFFFFFFFFFF0A08 :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 2023/FFFFFFFFFFFF0A08 :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 2024/FFFFFFFFFFFF0A08 :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 2025/FFFFFFFFFFFF0A08 :                     ; 	; d3 -    X wrap | X add
(1) 2026/FFFFFFFFFFFF0A08 :                     ; 	; d4 -         *****
(1) 2027/FFFFFFFFFFFF0A08 :                     ; 	; d5 -         *****
(1) 2028/FFFFFFFFFFFF0A08 :                     ; 	; d6 - loopflags | *****
(1) 2029/FFFFFFFFFFFF0A08 :                     ; 	; d7 - lastflags | loop blocks
(1) 2030/FFFFFFFFFFFF0A08 :                     ;
(1) 2031/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d6
(1) 2032/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$100,d6	; Merge d1
(1) 2033/FFFFFFFFFFFF0A08 :                     ; 		add.w	d6,d1
(1) 2034/FFFFFFFFFFFF0A08 :                     ; 		move.l	d3,d5
(1) 2035/FFFFFFFFFFFF0A08 :                     ; 		swap	d5
(1) 2036/FFFFFFFFFFFF0A08 :                     ; 		and.w	d5,d0
(1) 2037/FFFFFFFFFFFF0A08 :                     ; 		move.w	#((320+16)/16)-1,d7
(1) 2038/FFFFFFFFFFFF0A08 :                     ; .x_blk:
(1) 2039/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 2040/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 2041/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a3),d6
(1) 2042/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.xvld
(1) 2043/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a2),d6
(1) 2044/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.xprio
(1) 2045/FFFFFFFFFFFF0A08 :                     ; .xblnk:
(1) 2046/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 2047/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 2048/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.xfrce
(1) 2049/FFFFFFFFFFFF0A08 :                     ; .xprio:
(1) 2050/FFFFFFFFFFFF0A08 :                     ; 		move.l	#$80008000,d4
(1) 2051/FFFFFFFFFFFF0A08 :                     ; 		move.l	#$80008000,d5
(1) 2052/FFFFFFFFFFFF0A08 :                     ; .xvld:
(1) 2053/FFFFFFFFFFFF0A08 :                     ; 		move.l	a4,a0
(1) 2054/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d6
(1) 2055/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d6
(1) 2056/FFFFFFFFFFFF0A08 :                     ; 		adda	d6,a0
(1) 2057/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 2058/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d4
(1) 2059/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d5
(1) 2060/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d4
(1) 2061/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d5
(1) 2062/FFFFFFFFFFFF0A08 :                     ; 		swap	d4
(1) 2063/FFFFFFFFFFFF0A08 :                     ; 		swap	d5
(1) 2064/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d4
(1) 2065/FFFFFFFFFFFF0A08 :                     ; 		add.w	(a0)+,d5
(1) 2066/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d4
(1) 2067/FFFFFFFFFFFF0A08 :                     ; 		add.w	d2,d5
(1) 2068/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 2069/FFFFFFFFFFFF0A08 :                     ; .xfrce:
(1) 2070/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d6
(1) 2071/FFFFFFFFFFFF0A08 :                     ; 		add.w	d1,d6
(1) 2072/FFFFFFFFFFFF0A08 :                     ; 		or.w	#$4000,d6
(1) 2073/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,4(a5)
(1) 2074/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,4(a5)
(1) 2075/FFFFFFFFFFFF0A08 :                     ; 		move.l	d4,(a5)
(1) 2076/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$80,d6
(1) 2077/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,4(a5)
(1) 2078/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,4(a5)
(1) 2079/FFFFFFFFFFFF0A08 :                     ; 		move.l	d5,(a5)
(1) 2080/FFFFFFFFFFFF0A08 :                     ; 		add.w	d3,d0
(1) 2081/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 2082/FFFFFFFFFFFF0A08 :                     ; 		and.w	d3,d0
(1) 2083/FFFFFFFFFFFF0A08 :                     ; 		swap	d3
(1) 2084/FFFFFFFFFFFF0A08 :                     ;
(1) 2085/FFFFFFFFFFFF0A08 :                     ; 	; X wrap
(1) 2086/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 2087/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$10,d0
(1) 2088/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	md_bg_wf(a6),d0
(1) 2089/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.x_low
(1) 2090/FFFFFFFFFFFF0A08 :                     ; 		sub.w	md_bg_wf(a6),d0
(1) 2091/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 2092/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_w(a6),d4
(1) 2093/FFFFFFFFFFFF0A08 :                     ; 		sub.l	d4,a2
(1) 2094/FFFFFFFFFFFF0A08 :                     ; 		sub.l	d4,a3
(1) 2095/FFFFFFFFFFFF0A08 :                     ; .x_low:
(1) 2096/FFFFFFFFFFFF0A08 :                     ; 		adda	#1,a3
(1) 2097/FFFFFFFFFFFF0A08 :                     ; 		adda	#1,a2
(1) 2098/FFFFFFFFFFFF0A08 :                     ; .x_new:
(1) 2099/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 2100/FFFFFFFFFFFF0A08 :                     ;
(1) 2101/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.x_blk
(1) 2102/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 2103/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2104/FFFFFFFFFFFF0A08 :                     ;
(1) 2105/FFFFFFFFFFFF0A08 :                     ; ; ------------------------------------------------
(1) 2106/FFFFFFFFFFFF0A08 :                     ; ; Input
(1) 2107/FFFFFFFFFFFF0A08 :                     ; ; d0 - X position
(1) 2108/FFFFFFFFFFFF0A08 :                     ; ; d1 - Y position
(1) 2109/FFFFFFFFFFFF0A08 :                     ; ; d2 - X increment beam
(1) 2110/FFFFFFFFFFFF0A08 :                     ; ; d3 - Y increment beam
(1) 2111/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2112/FFFFFFFFFFFF0A08 :                     ; ; Out:
(1) 2113/FFFFFFFFFFFF0A08 :                     ; ; d4 - X LEFT increment
(1) 2114/FFFFFFFFFFFF0A08 :                     ; ; d5 - Y TOP increment
(1) 2115/FFFFFFFFFFFF0A08 :                     ;
(1) 2116/FFFFFFFFFFFF0A08 :                     ; .get_coords:
(1) 2117/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_blk(a6),a4
(1) 2118/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_low(a6),a3
(1) 2119/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_hi(a6),a2
(1) 2120/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d0		; block X/Y limit
(1) 2121/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d1
(1) 2122/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d2
(1) 2123/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d3
(1) 2124/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 2125/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 2126/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,d0
(1) 2127/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,d1
(1) 2128/FFFFFFFFFFFF0A08 :                     ; 		swap	d0
(1) 2129/FFFFFFFFFFFF0A08 :                     ; 		swap	d1
(1) 2130/FFFFFFFFFFFF0A08 :                     ;
(1) 2131/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 2132/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 2133/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_bw(a6),d6
(1) 2134/FFFFFFFFFFFF0A08 :                     ; 		move.b	md_bg_bh(a6),d7
(1) 2135/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d6
(1) 2136/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d7
(1) 2137/FFFFFFFFFFFF0A08 :                     ;
(1) 2138/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,d4
(1) 2139/FFFFFFFFFFFF0A08 :                     ; 		muls.w	d6,d4
(1) 2140/FFFFFFFFFFFF0A08 :                     ; 		asr.w	#8,d4
(1) 2141/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,d5
(1) 2142/FFFFFFFFFFFF0A08 :                     ; 		muls.w	d7,d5
(1) 2143/FFFFFFFFFFFF0A08 :                     ; 		asr.w	#8,d5
(1) 2144/FFFFFFFFFFFF0A08 :                     ; 		muls.w	md_bg_w(a6),d5
(1) 2145/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d3
(1) 2146/FFFFFFFFFFFF0A08 :                     ; 		move.l	d4,d3
(1) 2147/FFFFFFFFFFFF0A08 :                     ; 		add.l	d5,d3
(1) 2148/FFFFFFFFFFFF0A08 :                     ; 		add.l	d3,a3
(1) 2149/FFFFFFFFFFFF0A08 :                     ; 		add.l	d3,a2
(1) 2150/FFFFFFFFFFFF0A08 :                     ;
(1) 2151/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_vram(a6),d2
(1) 2152/FFFFFFFFFFFF0A08 :                     ; 		swap	d2
(1) 2153/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#2,d1			; Y >> 2
(1) 2154/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#6,d1			; Y * $40
(1) 2155/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#2,d0			; X >> 2
(1) 2156/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FFF,d1
(1) 2157/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$7C,d0
(1) 2158/FFFFFFFFFFFF0A08 :                     ; 		add.w	d1,d0
(1) 2159/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_vpos(a6),d1
(1) 2160/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,d2
(1) 2161/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$3FFF,d1
(1) 2162/FFFFFFFFFFFF0A08 :                     ; 		rol.w	#2,d2
(1) 2163/FFFFFFFFFFFF0A08 :                     ; 		and.w	#%11,d2
(1) 2164/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2165/FFFFFFFFFFFF0A08 :                     ;
(1) 2166/FFFFFFFFFFFF0A08 :                     ; ; ====================================================================
(1) 2167/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------------------------------
(1) 2168/FFFFFFFFFFFF0A08 :                     ; ; Objects system
(1) 2169/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2170/FFFFFFFFFFFF0A08 :                     ; ; MD and MARS
(1) 2171/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------------------------------
(1) 2172/FFFFFFFFFFFF0A08 :                     ;
(1) 2173/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2174/FFFFFFFFFFFF0A08 :                     ; ; Init objects
(1) 2175/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2176/FFFFFFFFFFFF0A08 :                     ;
(1) 2177/FFFFFFFFFFFF0A08 :                     ; Objects_Init:
(1) 2178/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_Objects),a6
(1) 2179/FFFFFFFFFFFF0A08 :                     ; 		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 2180/FFFFFFFFFFFF0A08 :                     ; .clr:
(1) 2181/FFFFFFFFFFFF0A08 :                     ; 		clr.b	(a6)+
(1) 2182/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.clr
(1) 2183/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_ObjDispList),a6
(1) 2184/FFFFFFFFFFFF0A08 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2185/FFFFFFFFFFFF0A08 :                     ; .clr_d:
(1) 2186/FFFFFFFFFFFF0A08 :                     ; 		clr.w	(a6)+
(1) 2187/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.clr_d
(1) 2188/FFFFFFFFFFFF0A08 :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2189/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2190/FFFFFFFFFFFF0A08 :                     ;
(1) 2191/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2192/FFFFFFFFFFFF0A08 :                     ; ; Process objects
(1) 2193/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2194/FFFFFFFFFFFF0A08 :                     ;
(1) 2195/FFFFFFFFFFFF0A08 :                     ; Objects_Run:
(1) 2196/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_Objects),a6
(1) 2197/FFFFFFFFFFFF0A08 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2198/FFFFFFFFFFFF0A08 :                     ; .next_one:
(1) 2199/FFFFFFFFFFFF0A08 :                     ; 		move.l	obj_code(a6),d6
(1) 2200/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_code	; Free slot
(1) 2201/FFFFFFFFFFFF0A08 :                     ; 		move.l	d7,-(sp)
(1) 2202/FFFFFFFFFFFF0A08 :                     ; 		move.l	d6,a5
(1) 2203/FFFFFFFFFFFF0A08 :                     ; 		jsr	(a5)
(1) 2204/FFFFFFFFFFFF0A08 :                     ; 		move.l	(sp)+,d7
(1) 2205/FFFFFFFFFFFF0A08 :                     ; .no_code:
(1) 2206/FFFFFFFFFFFF0A08 :                     ; 		adda	#sizeof_mdobj,a6
(1) 2207/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.next_one
(1) 2208/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2209/FFFFFFFFFFFF0A08 :                     ;
(1) 2210/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2211/FFFFFFFFFFFF0A08 :                     ; ; Draw ALL Objects from display list
(1) 2212/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2213/FFFFFFFFFFFF0A08 :                     ; ; Call this BEFORE VBlank.
(1) 2214/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2215/FFFFFFFFFFFF0A08 :                     ;
(1) 2216/FFFFFFFFFFFF0A08 :                     ; Objects_Show:
(1) 2217/FFFFFFFFFFFF0A08 :                     ; 		moveq	#1,d7				; d7 - MD Link
(1) 2218/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 2219/FFFFFFFFFFFF0A08 :                     ;
(1) 2220/FFFFFFFFFFFF0A08 :                     ; 		move.w	(RAM_SprDrwCntr),d6
(1) 2221/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_sprdrw
(1) 2222/FFFFFFFFFFFF0A08 :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2223/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2224/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d6
(1) 2225/FFFFFFFFFFFF0A08 :                     ; .nexts:
(1) 2226/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	#70,d7
(1) 2227/FFFFFFFFFFFF0A08 :                     ; 		bge.s	.no_sprdrw
(1) 2228/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5)+,d0
(1) 2229/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5)+,d1	; custom
(1) 2230/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d1
(1) 2231/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#8,d1
(1) 2232/FFFFFFFFFFFF0A08 :                     ; 		or.w	d7,d1
(1) 2233/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5)+,d2
(1) 2234/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5)+,d3
(1) 2235/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,(a6)+
(1) 2236/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,(a6)+
(1) 2237/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,(a6)+
(1) 2238/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,(a6)+
(1) 2239/FFFFFFFFFFFF0A08 :                     ; 		add.w	#1,d7
(1) 2240/FFFFFFFFFFFF0A08 :                     ; 		dbf	d6,.nexts
(1) 2241/FFFFFFFFFFFF0A08 :                     ; .no_sprdrw:
(1) 2242/FFFFFFFFFFFF0A08 :                     ;
(1) 2243/FFFFFFFFFFFF0A08 :                     ; 	if MARS|MARSCD
(1) 2244/FFFFFFFFFFFF0A08 :                     ; 	; Draw mappings from sprites
(1) 2245/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2246/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_MdDreq+Dreq_SuperSpr),a4	; a4 - 32X SUPER Sprites
(1) 2247/FFFFFFFFFFFF0A08 :                     ; 		move.w	#MAX_MDOBJ-1,d6
(1) 2248/FFFFFFFFFFFF0A08 :                     ; .next:
(1) 2249/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a5),d0
(1) 2250/FFFFFFFFFFFF0A08 :                     ; 		beq	.finish
(1) 2251/FFFFFFFFFFFF0A08 :                     ; 		moveq	#-1,d1
(1) 2252/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d1
(1) 2253/FFFFFFFFFFFF0A08 :                     ; 		move.l	d1,a2
(1) 2254/FFFFFFFFFFFF0A08 :                     ; 		move.l	obj_map(a2),a0		; Read mapping
(1) 2255/FFFFFFFFFFFF0A08 :                     ; 		btst	#bitobj_Mars,obj_set(a2)
(1) 2256/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.mars_mode
(1) 2257/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	#70,d7
(1) 2258/FFFFFFFFFFFF0A08 :                     ; 		bge	.mk_spr
(1) 2259/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_frame(a2),d0
(1) 2260/FFFFFFFFFFFF0A08 :                     ; 		add.w	d0,d0
(1) 2261/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0,d0.w),d0
(1) 2262/FFFFFFFFFFFF0A08 :                     ; 		adda	d0,a0
(1) 2263/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,d5
(1) 2264/FFFFFFFFFFFF0A08 :                     ; 		beq	.mk_spr
(1) 2265/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d5
(1) 2266/FFFFFFFFFFFF0A08 :                     ; .mk_pz:
(1) 2267/FFFFFFFFFFFF0A08 :                     ; 	; TODO: H/V flip
(1) 2268/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a0)+,d0
(1) 2269/FFFFFFFFFFFF0A08 :                     ; 		ext.w	d0
(1) 2270/FFFFFFFFFFFF0A08 :                     ; 		add.w	obj_y(a2),d0
(1) 2271/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$80,d0
(1) 2272/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a0)+,d1
(1) 2273/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#8,d1
(1) 2274/FFFFFFFFFFFF0A08 :                     ; 		or.w	d7,d1
(1) 2275/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,d2
(1) 2276/FFFFFFFFFFFF0A08 :                     ; 		add.w	obj_vram(a2),d2
(1) 2277/FFFFFFFFFFFF0A08 :                     ; 		adda	#2,a0
(1) 2278/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,d3
(1) 2279/FFFFFFFFFFFF0A08 :                     ; 		add.w	obj_x(a2),d3
(1) 2280/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$80,d3
(1) 2281/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,(a6)+
(1) 2282/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,(a6)+
(1) 2283/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,(a6)+
(1) 2284/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,(a6)+
(1) 2285/FFFFFFFFFFFF0A08 :                     ; 		add.w	#1,d7
(1) 2286/FFFFFFFFFFFF0A08 :                     ; 		dbf	d5,.mk_pz
(1) 2287/FFFFFFFFFFFF0A08 :                     ; 		bra.s	.mk_spr
(1) 2288/FFFFFFFFFFFF0A08 :                     ;
(1) 2289/FFFFFFFFFFFF0A08 :                     ; .mars_mode:
(1) 2290/FFFFFFFFFFFF0A08 :                     ; 		move.l	(a0)+,marsspr_data(a4)
(1) 2291/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,marsspr_dwidth(a4)
(1) 2292/FFFFFFFFFFFF0A08 :                     ; 		move.w	(a0)+,marsspr_indx(a4)
(1) 2293/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a0)+,d2
(1) 2294/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a0)+,d3
(1) 2295/FFFFFFFFFFFF0A08 :                     ; 		move.b	d2,marsspr_xs(a4)
(1) 2296/FFFFFFFFFFFF0A08 :                     ; 		move.b	d3,marsspr_ys(a4)
(1) 2297/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_frame(a2),d0	; Read frame
(1) 2298/FFFFFFFFFFFF0A08 :                     ; 		move.b	d0,marsspr_xfrm(a4)
(1) 2299/FFFFFFFFFFFF0A08 :                     ; 		ror.w	#8,d0
(1) 2300/FFFFFFFFFFFF0A08 :                     ; 		move.b	d0,marsspr_yfrm(a4)
(1) 2301/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_x(a2),d4
(1) 2302/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_y(a2),d5
(1) 2303/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d2
(1) 2304/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d3
(1) 2305/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#1,d2
(1) 2306/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#1,d3
(1) 2307/FFFFFFFFFFFF0A08 :                     ; ; 		divu.w	#2,d2			; **
(1) 2308/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d2,d4
(1) 2309/FFFFFFFFFFFF0A08 :                     ; ; 		divu.w	#2,d3			; **
(1) 2310/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d3,d5
(1) 2311/FFFFFFFFFFFF0A08 :                     ; ; 		move.l	obj_size(a2),d2		; d2 - UDLR sizes
(1) 2312/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d2,d3			; Grab LR
(1) 2313/FFFFFFFFFFFF0A08 :                     ; ; 		lsr.w	#5,d3
(1) 2314/FFFFFFFFFFFF0A08 :                     ; ; 		and.w	#%11111000,d3
(1) 2315/FFFFFFFFFFFF0A08 :                     ; ; 		sub.w	d3,d4			; Subtract X
(1) 2316/FFFFFFFFFFFF0A08 :                     ; ; 		swap	d2
(1) 2317/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	d2,d3			; Grab UD
(1) 2318/FFFFFFFFFFFF0A08 :                     ; ; 		lsr.w	#8,d3
(1) 2319/FFFFFFFFFFFF0A08 :                     ; ; 		lsl.b	#3,d3
(1) 2320/FFFFFFFFFFFF0A08 :                     ; ; 		and.w	#$FF,d3
(1) 2321/FFFFFFFFFFFF0A08 :                     ; ; 		sub.w	d3,d5			; Subtract Y
(1) 2322/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBufferM),a1
(1) 2323/FFFFFFFFFFFF0A08 :                     ; 		sub.w	md_bg_x(a1),d4
(1) 2324/FFFFFFFFFFFF0A08 :                     ; 		sub.w	md_bg_y(a1),d5
(1) 2325/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,marsspr_x(a4)
(1) 2326/FFFFFFFFFFFF0A08 :                     ; 		move.w	d5,marsspr_y(a4)
(1) 2327/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 2328/FFFFFFFFFFFF0A08 :                     ; 		btst	#bitobj_flipH,obj_set(a2)
(1) 2329/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.flip_h
(1) 2330/FFFFFFFFFFFF0A08 :                     ; 		bset	#0,d4
(1) 2331/FFFFFFFFFFFF0A08 :                     ; .flip_h:
(1) 2332/FFFFFFFFFFFF0A08 :                     ; 		btst	#bitobj_flipV,obj_set(a2)
(1) 2333/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.flip_v
(1) 2334/FFFFFFFFFFFF0A08 :                     ; 		bset	#1,d4
(1) 2335/FFFFFFFFFFFF0A08 :                     ; .flip_v:
(1) 2336/FFFFFFFFFFFF0A08 :                     ; 		move.w	d4,marsspr_flags(a4)
(1) 2337/FFFFFFFFFFFF0A08 :                     ; 		adda	#sizeof_marsspr,a4	; Next SuperSprite
(1) 2338/FFFFFFFFFFFF0A08 :                     ; .mk_spr:
(1) 2339/FFFFFFFFFFFF0A08 :                     ; 		clr.w	(a5)+			; Clear request
(1) 2340/FFFFFFFFFFFF0A08 :                     ; 		dbf	d6,.next
(1) 2341/FFFFFFFFFFFF0A08 :                     ; .finish:
(1) 2342/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_Sprites),a6	; a6 - Genesis sprites
(1) 2343/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,d6
(1) 2344/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	#70,d7
(1) 2345/FFFFFFFFFFFF0A08 :                     ; 		bge.s	.ran_out
(1) 2346/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d6
(1) 2347/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d6
(1) 2348/FFFFFFFFFFFF0A08 :                     ; 		adda	d6,a6
(1) 2349/FFFFFFFFFFFF0A08 :                     ; 		clr.l	(a6)			; TODO: endoflist check
(1) 2350/FFFFFFFFFFFF0A08 :                     ; .ran_out:
(1) 2351/FFFFFFFFFFFF0A08 :                     ; 	endif
(1) 2352/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2353/FFFFFFFFFFFF0A08 :                     ;
(1) 2354/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------------------------------
(1) 2355/FFFFFFFFFFFF0A08 :                     ; ; Subroutines
(1) 2356/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------------------------------
(1) 2357/FFFFFFFFFFFF0A08 :                     ;
(1) 2358/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2359/FFFFFFFFFFFF0A08 :                     ; ; object_Display
(1) 2360/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2361/FFFFFFFFFFFF0A08 :                     ; ; Builds a sprite using map data specified in
(1) 2362/FFFFFFFFFFFF0A08 :                     ; ; obj_map(a6)
(1) 2363/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2364/FFFFFFFFFFFF0A08 :                     ; ; *** GENESIS map ***
(1) 2365/FFFFFFFFFFFF0A08 :                     ; ; mapdata:
(1) 2366/FFFFFFFFFFFF0A08 :                     ; ;       dc.w .frame0-mapdata
(1) 2367/FFFFFFFFFFFF0A08 :                     ; ;       dc.w .frame1-mapdata
(1) 2368/FFFFFFFFFFFF0A08 :                     ; ;       ...
(1) 2369/FFFFFFFFFFFF0A08 :                     ; ; .frame0:
(1) 2370/FFFFFFFFFFFF0A08 :                     ; ;       dc.w numofpz
(1) 2371/FFFFFFFFFFFF0A08 :                     ; ;       dc.b YY,SS
(1) 2372/FFFFFFFFFFFF0A08 :                     ; ;       dc.w vram_normal
(1) 2373/FFFFFFFFFFFF0A08 :                     ; ;       dc.w vram_half
(1) 2374/FFFFFFFFFFFF0A08 :                     ; ;       dc.w XXXX
(1) 2375/FFFFFFFFFFFF0A08 :                     ; ;       align 2
(1) 2376/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2377/FFFFFFFFFFFF0A08 :                     ; ; *** 32X map ***
(1) 2378/FFFFFFFFFFFF0A08 :                     ; ; mapdata:
(1) 2379/FFFFFFFFFFFF0A08 :                     ; ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 2380/FFFFFFFFFFFF0A08 :                     ; ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 2381/FFFFFFFFFFFF0A08 :                     ; ; 	dc.b 64,72	 ; Frame width and height
(1) 2382/FFFFFFFFFFFF0A08 :                     ; ; 	dc.w $80	 ; Palette index
(1) 2383/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2384/FFFFFFFFFFFF0A08 :                     ; ; obj_frame(a6) is in YYXX direction
(1) 2385/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2386/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 2387/FFFFFFFFFFFF0A08 :                     ; ; a6 - Object
(1) 2388/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2389/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 2390/FFFFFFFFFFFF0A08 :                     ; ; a5,d7
(1) 2391/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2392/FFFFFFFFFFFF0A08 :                     ;
(1) 2393/FFFFFFFFFFFF0A08 :                     ; object_Display:
(1) 2394/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2395/FFFFFFFFFFFF0A08 :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2396/FFFFFFFFFFFF0A08 :                     ; .srch:
(1) 2397/FFFFFFFFFFFF0A08 :                     ; 		tst.w	(a5)
(1) 2398/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.this_one
(1) 2399/FFFFFFFFFFFF0A08 :                     ; 		adda	#2,a5
(1) 2400/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.srch
(1) 2401/FFFFFFFFFFFF0A08 :                     ; .this_one:
(1) 2402/FFFFFFFFFFFF0A08 :                     ; 		move.w	a6,(a5)
(1) 2403/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2404/FFFFFFFFFFFF0A08 :                     ;
(1) 2405/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2406/FFFFFFFFFFFF0A08 :                     ; ; object_MkSprPz
(1) 2407/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2408/FFFFFFFFFFFF0A08 :                     ; ; Makes separate sprite pieces using
(1) 2409/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2410/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 2411/FFFFFFFFFFFF0A08 :                     ; ; d0 - X pos
(1) 2412/FFFFFFFFFFFF0A08 :                     ; ; d1 - Y pos
(1) 2413/FFFFFFFFFFFF0A08 :                     ; ; d2 - VRAM
(1) 2414/FFFFFFFFFFFF0A08 :                     ; ; d3 - Size
(1) 2415/FFFFFFFFFFFF0A08 :                     ; :
(1) 2416/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 2417/FFFFFFFFFFFF0A08 :                     ; ; a5,d7
(1) 2418/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2419/FFFFFFFFFFFF0A08 :                     ;
(1) 2420/FFFFFFFFFFFF0A08 :                     ; object_MkSprPz:
(1) 2421/FFFFFFFFFFFF0A08 :                     ; 		move.w	(RAM_SprDrwCntr).w,d7
(1) 2422/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	#70,d7
(1) 2423/FFFFFFFFFFFF0A08 :                     ; 		bge.s	.nope
(1) 2424/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d7
(1) 2425/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2426/FFFFFFFFFFFF0A08 :                     ; 		adda	d7,a5
(1) 2427/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$80,d0
(1) 2428/FFFFFFFFFFFF0A08 :                     ; 		add.w	#$80,d1
(1) 2429/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d3
(1) 2430/FFFFFFFFFFFF0A08 :                     ; ; 		lsl.w	#8,d3
(1) 2431/FFFFFFFFFFFF0A08 :                     ; 		move.w	d1,(a5)+
(1) 2432/FFFFFFFFFFFF0A08 :                     ; 		move.w	d3,(a5)+
(1) 2433/FFFFFFFFFFFF0A08 :                     ; 		move.w	d2,(a5)+
(1) 2434/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,(a5)+
(1) 2435/FFFFFFFFFFFF0A08 :                     ; 		add.w	#1,(RAM_SprDrwCntr).w
(1) 2436/FFFFFFFFFFFF0A08 :                     ; .nope:
(1) 2437/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2438/FFFFFFFFFFFF0A08 :                     ;
(1) 2439/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2440/FFFFFFFFFFFF0A08 :                     ; ; Object_Animate
(1) 2441/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2442/FFFFFFFFFFFF0A08 :                     ; ; Animates the sprite
(1) 2443/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2444/FFFFFFFFFFFF0A08 :                     ; ; Input
(1) 2445/FFFFFFFFFFFF0A08 :                     ; ; a0 | LONG - Animation data
(1) 2446/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2447/FFFFFFFFFFFF0A08 :                     ; ; Output
(1) 2448/FFFFFFFFFFFF0A08 :                     ; ; d0 | WORD - Frame
(1) 2449/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2450/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 2451/FFFFFFFFFFFF0A08 :                     ; ; d2
(1) 2452/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2453/FFFFFFFFFFFF0A08 :                     ;
(1) 2454/FFFFFFFFFFFF0A08 :                     ; ; NOTE: to restart an animation
(1) 2455/FFFFFFFFFFFF0A08 :                     ; ; clear obj_anim_indx(a6) manually
(1) 2456/FFFFFFFFFFFF0A08 :                     ;
(1) 2457/FFFFFFFFFFFF0A08 :                     ; Object_Animate:
(1) 2458/FFFFFFFFFFFF0A08 :                     ; ;  		tst.l	d1
(1) 2459/FFFFFFFFFFFF0A08 :                     ; ;   		beq.s	.return
(1) 2460/FFFFFFFFFFFF0A08 :                     ;  		moveq	#0,d2
(1) 2461/FFFFFFFFFFFF0A08 :                     ;  		move.b	obj_anim_id+1(a6),d2
(1) 2462/FFFFFFFFFFFF0A08 :                     ;  		cmp.b	obj_anim_id(a6),d2
(1) 2463/FFFFFFFFFFFF0A08 :                     ;  		beq.s	.sameThing
(1) 2464/FFFFFFFFFFFF0A08 :                     ;  		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2465/FFFFFFFFFFFF0A08 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 2466/FFFFFFFFFFFF0A08 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2467/FFFFFFFFFFFF0A08 :                     ; .sameThing:
(1) 2468/FFFFFFFFFFFF0A08 :                     ;  		move.b	obj_anim_id(a6),d2
(1) 2469/FFFFFFFFFFFF0A08 :                     ;  		cmp.b	#-1,d2
(1) 2470/FFFFFFFFFFFF0A08 :                     ;  		beq.s	.return
(1) 2471/FFFFFFFFFFFF0A08 :                     ;  		add.w	d2,d2
(1) 2472/FFFFFFFFFFFF0A08 :                     ;  		move.w	(a0,d2.w),d2
(1) 2473/FFFFFFFFFFFF0A08 :                     ;  		lea	(a0,d2.w),a0
(1) 2474/FFFFFFFFFFFF0A08 :                     ;
(1) 2475/FFFFFFFFFFFF0A08 :                     ;  		move.w	(a0)+,d2
(1) 2476/FFFFFFFFFFFF0A08 :                     ;  		cmp.w	#-1,d2
(1) 2477/FFFFFFFFFFFF0A08 :                     ;  		beq.s	.keepspd
(1) 2478/FFFFFFFFFFFF0A08 :                     ;  		sub.b	#1,obj_anim_spd(a6)
(1) 2479/FFFFFFFFFFFF0A08 :                     ;  		bpl.s	.return
(1) 2480/FFFFFFFFFFFF0A08 :                     ; 		move.b	d2,obj_anim_spd(a6)
(1) 2481/FFFFFFFFFFFF0A08 :                     ; .keepspd:
(1) 2482/FFFFFFFFFFFF0A08 :                     ;  		moveq	#0,d1
(1) 2483/FFFFFFFFFFFF0A08 :                     ;  		move.w	obj_anim_indx(a6),d2
(1) 2484/FFFFFFFFFFFF0A08 :                     ;  		add.w	d2,d2
(1) 2485/FFFFFFFFFFFF0A08 :                     ;  		move.w	(a0),d1
(1) 2486/FFFFFFFFFFFF0A08 :                     ;  		adda	d2,a0
(1) 2487/FFFFFFFFFFFF0A08 :                     ;  		move.w	(a0),d0
(1) 2488/FFFFFFFFFFFF0A08 :                     ;  		cmp.w	#-1,d0
(1) 2489/FFFFFFFFFFFF0A08 :                     ;  		beq.s	.noAnim		; loop
(1) 2490/FFFFFFFFFFFF0A08 :                     ;  		cmp.w	#-2,d0
(1) 2491/FFFFFFFFFFFF0A08 :                     ;  		beq.s	.lastFrame	; finish
(1) 2492/FFFFFFFFFFFF0A08 :                     ;  		cmp.w	#-3,d0
(1) 2493/FFFFFFFFFFFF0A08 :                     ;  		beq.s	.goToFrame
(1) 2494/FFFFFFFFFFFF0A08 :                     ;
(1) 2495/FFFFFFFFFFFF0A08 :                     ;  		move.w	d0,obj_frame(a6)
(1) 2496/FFFFFFFFFFFF0A08 :                     ;  		add.w	#1,obj_anim_indx(a6)
(1) 2497/FFFFFFFFFFFF0A08 :                     ; .return:
(1) 2498/FFFFFFFFFFFF0A08 :                     ;  		rts
(1) 2499/FFFFFFFFFFFF0A08 :                     ;
(1) 2500/FFFFFFFFFFFF0A08 :                     ; .noAnim:
(1) 2501/FFFFFFFFFFFF0A08 :                     ;  		move.w	#1,obj_anim_indx(a6)
(1) 2502/FFFFFFFFFFFF0A08 :                     ;  		move.w	d1,d0
(1) 2503/FFFFFFFFFFFF0A08 :                     ;  		move.w	d0,obj_frame(a6)
(1) 2504/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2505/FFFFFFFFFFFF0A08 :                     ; .lastFrame:
(1) 2506/FFFFFFFFFFFF0A08 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2507/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2508/FFFFFFFFFFFF0A08 :                     ; .goToFrame:
(1) 2509/FFFFFFFFFFFF0A08 :                     ; 		clr.w	obj_anim_indx(a6)
(1) 2510/FFFFFFFFFFFF0A08 :                     ; 		move.w	2(a0),obj_anim_indx(a6)
(1) 2511/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2512/FFFFFFFFFFFF0A08 :                     ;
(1) 2513/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2514/FFFFFFFFFFFF0A08 :                     ; ; object_Speed
(1) 2515/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2516/FFFFFFFFFFFF0A08 :                     ; ; Moves the object using speed settings
(1) 2517/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2518/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 2519/FFFFFFFFFFFF0A08 :                     ; ; a6 - Object
(1) 2520/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2521/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 2522/FFFFFFFFFFFF0A08 :                     ; ; d7
(1) 2523/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2524/FFFFFFFFFFFF0A08 :                     ;
(1) 2525/FFFFFFFFFFFF0A08 :                     ; object_UpdX:
(1) 2526/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d7
(1) 2527/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_x_spd(a6),d7
(1) 2528/FFFFFFFFFFFF0A08 :                     ; 		ext.l	d7
(1) 2529/FFFFFFFFFFFF0A08 :                     ; 		asl.l	#8,d7
(1) 2530/FFFFFFFFFFFF0A08 :                     ; 		add.l	d7,obj_x(a6)
(1) 2531/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2532/FFFFFFFFFFFF0A08 :                     ; object_Speed:
(1) 2533/FFFFFFFFFFFF0A08 :                     ; 		bsr.s	object_UpdX
(1) 2534/FFFFFFFFFFFF0A08 :                     ; object_UpdY:
(1) 2535/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d7
(1) 2536/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_y_spd(a6),d7
(1) 2537/FFFFFFFFFFFF0A08 :                     ; 		ext.l	d7
(1) 2538/FFFFFFFFFFFF0A08 :                     ; 		asl.l	#8,d7
(1) 2539/FFFFFFFFFFFF0A08 :                     ; 		add.l	d7,obj_y(a6)
(1) 2540/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2541/FFFFFFFFFFFF0A08 :                     ;
(1) 2542/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2543/FFFFFFFFFFFF0A08 :                     ; ; object_ColM_Floor
(1) 2544/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2545/FFFFFFFFFFFF0A08 :                     ; ; Check object collision on 32X map's floor
(1) 2546/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2547/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 2548/FFFFFFFFFFFF0A08 :                     ; ; a6 - Object to check
(1) 2549/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2550/FFFFFFFFFFFF0A08 :                     ; ; Returns:
(1) 2551/FFFFFFFFFFFF0A08 :                     ; ; beq  - No collision
(1) 2552/FFFFFFFFFFFF0A08 :                     ; ; bne  - Found collision
(1) 2553/FFFFFFFFFFFF0A08 :                     ; ; d4.b - Collision block number
(1) 2554/FFFFFFFFFFFF0A08 :                     ; ; d5.w - Y-pos center snap
(1) 2555/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2556/FFFFFFFFFFFF0A08 :                     ; ; Uses:
(1) 2557/FFFFFFFFFFFF0A08 :                     ; ; d4-d7,a4-a5
(1) 2558/FFFFFFFFFFFF0A08 :                     ; ; --------------------------------------------------------
(1) 2559/FFFFFFFFFFFF0A08 :                     ;
(1) 2560/FFFFFFFFFFFF0A08 :                     ; ; 32X MAP SIDE
(1) 2561/FFFFFFFFFFFF0A08 :                     ;
(1) 2562/FFFFFFFFFFFF0A08 :                     ; object_ColM_Floor:
(1) 2563/FFFFFFFFFFFF0A08 :                     ; 		lea	(RAM_BgBufferM),a5
(1) 2564/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d5
(1) 2565/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d4
(1) 2566/FFFFFFFFFFFF0A08 :                     ; 		move.l	md_bg_col(a5),a4
(1) 2567/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_wf(a5),d7
(1) 2568/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d7
(1) 2569/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_x(a6),d4
(1) 2570/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.v_x
(1) 2571/FFFFFFFFFFFF0A08 :                     ; 		clr.w	d4
(1) 2572/FFFFFFFFFFFF0A08 :                     ; .v_x:
(1) 2573/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d7,d4
(1) 2574/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.v_xr
(1) 2575/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,d4
(1) 2576/FFFFFFFFFFFF0A08 :                     ; .v_xr:
(1) 2577/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_hf(a5),d7
(1) 2578/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d7
(1) 2579/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_y(a6),d5
(1) 2580/FFFFFFFFFFFF0A08 :                     ; 		bpl.s	.v_y
(1) 2581/FFFFFFFFFFFF0A08 :                     ; 		clr.w	d5
(1) 2582/FFFFFFFFFFFF0A08 :                     ; .v_y:
(1) 2583/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d7,d5
(1) 2584/FFFFFFFFFFFF0A08 :                     ; 		blt.s	.v_yd
(1) 2585/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,d5
(1) 2586/FFFFFFFFFFFF0A08 :                     ; .v_yd:
(1) 2587/FFFFFFFFFFFF0A08 :                     ; 		move.l	obj_size(a6),d7
(1) 2588/FFFFFFFFFFFF0A08 :                     ; 		swap	d7		; Add Y
(1) 2589/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d7
(1) 2590/FFFFFFFFFFFF0A08 :                     ; 		move.w	d7,d6
(1) 2591/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d6
(1) 2592/FFFFFFFFFFFF0A08 :                     ; 		add.w	d6,d5
(1) 2593/FFFFFFFFFFFF0A08 :                     ;
(1) 2594/FFFFFFFFFFFF0A08 :                     ; 	; d5 - Ypos + size
(1) 2595/FFFFFFFFFFFF0A08 :                     ; 	; d6 - Xpos
(1) 2596/FFFFFFFFFFFF0A08 :                     ; 	; d7 - Dsize/2
(1) 2597/FFFFFFFFFFFF0A08 :                     ;
(1) 2598/FFFFFFFFFFFF0A08 :                     ; 	; 16x16 only
(1) 2599/FFFFFFFFFFFF0A08 :                     ; 		lsr.w	#1,d7		; Dsize/2
(1) 2600/FFFFFFFFFFFF0A08 :                     ; 		asr.w	#4,d4		; X >> 16
(1) 2601/FFFFFFFFFFFF0A08 :                     ; 		add.l	d4,a4		; Add X
(1) 2602/FFFFFFFFFFFF0A08 :                     ; 		move.l	d5,d4		; Copy d5 to d4
(1) 2603/FFFFFFFFFFFF0A08 :                     ; 		asr.w	#4,d4		; Y >> 16
(1) 2604/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d6
(1) 2605/FFFFFFFFFFFF0A08 :                     ; 		move.w	md_bg_w(a5),d6	; d6: map width
(1) 2606/FFFFFFFFFFFF0A08 :                     ; 		mulu.w	d6,d4		; (Y>>16)*(mwidth)
(1) 2607/FFFFFFFFFFFF0A08 :                     ; 		add.l	d4,a4		; Add Y
(1) 2608/FFFFFFFFFFFF0A08 :                     ; 		and.w	#-$10,d5	; Filter Y Snap
(1) 2609/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a4),d4		; d4: Start ID
(1) 2610/FFFFFFFFFFFF0A08 :                     ; 		sub.l	d6,a4
(1) 2611/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#1,d7		; Dsize - 1
(1) 2612/FFFFFFFFFFFF0A08 :                     ; 		bmi.s	.valid
(1) 2613/FFFFFFFFFFFF0A08 :                     ; .next:
(1) 2614/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 2615/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a4),d7		; New ID != 0?
(1) 2616/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.blnk
(1) 2617/FFFFFFFFFFFF0A08 :                     ; 		move.b	d7,d4		; Set new ID
(1) 2618/FFFFFFFFFFFF0A08 :                     ; 		sub.w	#$10,d5		; Decrement Y Snap
(1) 2619/FFFFFFFFFFFF0A08 :                     ; .blnk:
(1) 2620/FFFFFFFFFFFF0A08 :                     ; 		sub.l	d6,a4		; Decrement width
(1) 2621/FFFFFFFFFFFF0A08 :                     ; 		swap	d7
(1) 2622/FFFFFFFFFFFF0A08 :                     ; 		dbf	d7,.next
(1) 2623/FFFFFFFFFFFF0A08 :                     ; .valid:
(1) 2624/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d4		; Filter ID
(1) 2625/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2626/FFFFFFFFFFFF0A08 :                     ;
(1) 2627/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------
(1) 2628/FFFFFFFFFFFF0A08 :                     ; ; object_SetColFloor
(1) 2629/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2630/FFFFFFFFFFFF0A08 :                     ; ; Snaps the object to the map's floor.
(1) 2631/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2632/FFFFFFFFFFFF0A08 :                     ; ; Call object_ColM_Floor first
(1) 2633/FFFFFFFFFFFF0A08 :                     ; ;
(1) 2634/FFFFFFFFFFFF0A08 :                     ; ; Input:
(1) 2635/FFFFFFFFFFFF0A08 :                     ; ; d4.b - Collision block
(1) 2636/FFFFFFFFFFFF0A08 :                     ; ; d5.w - Y-pos center snap
(1) 2637/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------
(1) 2638/FFFFFFFFFFFF0A08 :                     ;
(1) 2639/FFFFFFFFFFFF0A08 :                     ; object_SetColFloor:
(1) 2640/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d4
(1) 2641/FFFFFFFFFFFF0A08 :                     ; 		beq.s	.no_col
(1) 2642/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#4,d4
(1) 2643/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_x(a6),d7		; Grab CENTER X
(1) 2644/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$0F,d7			; limit to 16
(1) 2645/FFFFFFFFFFFF0A08 :                     ; 		lea	slope_data_16(pc),a0
(1) 2646/FFFFFFFFFFFF0A08 :                     ; 		adda	d4,a0
(1) 2647/FFFFFFFFFFFF0A08 :                     ; 		move.b	(a0,d7.w),d4
(1) 2648/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$0F,d4
(1) 2649/FFFFFFFFFFFF0A08 :                     ;
(1) 2650/FFFFFFFFFFFF0A08 :                     ; 		moveq	#0,d6
(1) 2651/FFFFFFFFFFFF0A08 :                     ; 		move.w	obj_y(a6),d7
(1) 2652/FFFFFFFFFFFF0A08 :                     ; 		move.l	obj_size(a6),d6
(1) 2653/FFFFFFFFFFFF0A08 :                     ; 		swap	d6
(1) 2654/FFFFFFFFFFFF0A08 :                     ; 		and.w	#$FF,d6
(1) 2655/FFFFFFFFFFFF0A08 :                     ; 		lsl.w	#3,d6
(1) 2656/FFFFFFFFFFFF0A08 :                     ; 		sub.w	d6,d5
(1) 2657/FFFFFFFFFFFF0A08 :                     ; 		add.w	d4,d5	; target slope
(1) 2658/FFFFFFFFFFFF0A08 :                     ; 		cmp.w	d5,d7
(1) 2659/FFFFFFFFFFFF0A08 :                     ; 		ble.s	.no_col
(1) 2660/FFFFFFFFFFFF0A08 :                     ; 		move.w	#$800,d6
(1) 2661/FFFFFFFFFFFF0A08 :                     ; 		move.w	d6,obj_y_spd(a6)
(1) 2662/FFFFFFFFFFFF0A08 :                     ; ; .set_me:
(1) 2663/FFFFFFFFFFFF0A08 :                     ; ; 		move.w	obj_x_spd(a6),d6
(1) 2664/FFFFFFFFFFFF0A08 :                     ; ; 		bpl.s	.x_spd
(1) 2665/FFFFFFFFFFFF0A08 :                     ; ; 		neg.w	d6
(1) 2666/FFFFFFFFFFFF0A08 :                     ; ; .x_spd:
(1) 2667/FFFFFFFFFFFF0A08 :                     ;
(1) 2668/FFFFFFFFFFFF0A08 :                     ; 		bclr	#bitobj_air,obj_status(a6)
(1) 2669/FFFFFFFFFFFF0A08 :                     ; 		move.w	d5,obj_y(a6)
(1) 2670/FFFFFFFFFFFF0A08 :                     ; .no_col:
(1) 2671/FFFFFFFFFFFF0A08 :                     ; 		rts
(1) 2672/FFFFFFFFFFFF0A08 :                     ;
(1) 2673/FFFFFFFFFFFF0A08 :                     ; ; ----------------------------------------
(1) 2674/FFFFFFFFFFFF0A08 :                     ;
(1) 2675/FFFFFFFFFFFF0A08 :                     ; ; Slope data 16x16
(1) 2676/FFFFFFFFFFFF0A08 :                     ; slope_data_16:
(1) 2677/FFFFFFFFFFFF0A08 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2678/FFFFFFFFFFFF0A08 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2679/FFFFFFFFFFFF0A08 :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2680/FFFFFFFFFFFF0A08 :                     ; 		dc.b 15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
(1) 2681/FFFFFFFFFFFF0A08 :                     ; 		dc.b  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
(1) 2682/FFFFFFFFFFFF0A08 :                     ; 		dc.b 15,15,14,14,13,13,12,12,11,11,10,10, 9, 9, 8, 8
(1) 2683/FFFFFFFFFFFF0A08 :                     ; 		dc.b  7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0
(1) 2684/FFFFFFFFFFFF0A08 :                     ; 		dc.b  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
(1) 2685/FFFFFFFFFFFF0A08 :                     ; 		dc.b  8, 8, 9, 9,10,10,11,11,12,12,13,13,14,14,15,15
(1) 2686/FFFFFFFFFFFF0A08 :                     ; 		align 2
(1) 2687/FFFFFFFFFFFF0A08 :                     
(1) 2688/FFFFFFFFFFFF0A08 :                     ; ====================================================================
(1) 2689/FFFFFFFFFFFF0A08 :                     ; ----------------------------------------------------------------
(1) 2690/FFFFFFFFFFFF0A08 :                     ; Video routines for 32X
(1) 2691/FFFFFFFFFFFF0A08 :                     ; ----------------------------------------------------------------
(1) 2692/FFFFFFFFFFFF0A08 :                     
(1) 2693/FFFFFFFFFFFF0A08 :                     ; --------------------------------------------------------
(1) 2694/FFFFFFFFFFFF0A08 :                     ; Video_Mars_GfxMode
(1) 2695/FFFFFFFFFFFF0A08 :                     ; Sets graphics mode on the 32X side
(1) 2696/FFFFFFFFFFFF0A08 :                     ;
(1) 2697/FFFFFFFFFFFF0A08 :                     ; Input:
(1) 2698/FFFFFFFFFFFF0A08 :                     ; d0 - Graphics mode
(1) 2699/FFFFFFFFFFFF0A08 :                     ; --------------------------------------------------------
(1) 2700/FFFFFFFFFFFF0A08 :                     
(1) 2701/FFFFFFFFFFFF0A08 :                     Video_Mars_GfxMode:
(1) 2702/FFFFFFFFFFFF0A08 :                     ; 	if MARS
(1) 2703/FFFFFFFFFFFF0A08 :                     ; 		move.w	d0,d7
(1) 2704/FFFFFFFFFFFF0A08 :                     ; 		and.w	#%00000111,d7			; Current limit: 8 Master modes
(1) 2705/FFFFFFFFFFFF0A08 :                     ; 		or.w	#$C0,d7
(1) 2706/FFFFFFFFFFFF0A08 :                     ; 		move.b	d7,(sysmars_reg+comm12+1).l
(1) 2707/FFFFFFFFFFFF0A08 :                     ; 		bsr	System_MarsUpdate
(1) 2708/FFFFFFFFFFFF0A08 :                     ; .wait_slv:	move.w	(sysmars_reg+comm14).l,d7	; Wait for Slave
(1) 2709/FFFFFFFFFFFF0A08 :                     ; 		and.w	#%00001111,d7
(1) 2710/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.wait_slv
(1) 2711/FFFFFFFFFFFF0A08 :                     ; .wait:		move.w	(sysmars_reg+comm12).l,d7	; Wait for Master
(1) 2712/FFFFFFFFFFFF0A08 :                     ; 		and.w	#%11000000,d7
(1) 2713/FFFFFFFFFFFF0A08 :                     ; 		bne.s	.wait
(1) 2714/FFFFFFFFFFFF0A08 :                     ; 	endif
(1) 2715/FFFFFFFFFFFF0A08 : 4E75                		rts
(1) 2716/FFFFFFFFFFFF0A0A :                     
(1) 2717/FFFFFFFFFFFF0A0A :                     ; --------------------------------------------------------
(1) 2718/FFFFFFFFFFFF0A0A :                     ; Video_Mars_WaitFrame
(1) 2719/FFFFFFFFFFFF0A0A :                     ; --------------------------------------------------------
(1) 2720/FFFFFFFFFFFF0A0A :                     
(1) 2721/FFFFFFFFFFFF0A0A :                     Video_Mars_WaitFrame:
(1) 2722/FFFFFFFFFFFF0A0A :                     ; 	if MARS
(1) 2723/FFFFFFFFFFFF0A0A :                     ; 		bset	#5,(sysmars_reg+comm12+1).l	; Set R bit
(1) 2724/FFFFFFFFFFFF0A0A :                     ; .wait:
(1) 2725/FFFFFFFFFFFF0A0A :                     ; ; 		move.w	(vdp_ctrl),d7
(1) 2726/FFFFFFFFFFFF0A0A :                     ; ; 		btst	#bitVBlk,d7
(1) 2727/FFFFFFFFFFFF0A0A :                     ; ; 		bne.s	.late
(1) 2728/FFFFFFFFFFFF0A0A :                     ; 		move.w	(sysmars_reg+comm12).l,d7
(1) 2729/FFFFFFFFFFFF0A0A :                     ; 		btst	#5,d7
(1) 2730/FFFFFFFFFFFF0A0A :                     ; 		bne.s	.wait
(1) 2731/FFFFFFFFFFFF0A0A :                     ; .late:
(1) 2732/FFFFFFFFFFFF0A0A :                     ; 	endif
(1) 2733/FFFFFFFFFFFF0A0A : 4E75                		rts
(1) 2734/FFFFFFFFFFFF0A0C :                     
(1) 2735/FFFFFFFFFFFF0A0C :                     ; --------------------------------------------------------
(1) 2736/FFFFFFFFFFFF0A0C :                     ; Video_LoadPal_Mars
(1) 2737/FFFFFFFFFFFF0A0C :                     ;
(1) 2738/FFFFFFFFFFFF0A0C :                     ; Load Indexed palette directly to Buffer
(1) 2739/FFFFFFFFFFFF0A0C :                     ;
(1) 2740/FFFFFFFFFFFF0A0C :                     ; d0 - Start at
(1) 2741/FFFFFFFFFFFF0A0C :                     ; d1 - Number of colors
(1) 2742/FFFFFFFFFFFF0A0C :                     ; d2 - Priority bit OFF/ON
(1) 2743/FFFFFFFFFFFF0A0C :                     ; --------------------------------------------------------
(1) 2744/FFFFFFFFFFFF0A0C :                     
(1) 2745/FFFFFFFFFFFF0A0C :                     Video_FadePal_Mars:
(1) 2747/FFFFFFFFFFFF0A0C : 4DF8 81D0           		lea	(RAM_MdMarsPalFd),a6
(1) 2748/FFFFFFFFFFFF0A10 : 4278 8A4E           		clr.w	(RAM_FadeMarsTmr).w
(1) 2749/FFFFFFFFFFFF0A14 : 6004                		bra.s	vidMars_Pal
(1) 2750/FFFFFFFFFFFF0A16 :                     Video_LoadPal_Mars:
(1) 2751/FFFFFFFFFFFF0A16 : 4DF8 9D00           		lea	(RAM_MdDreq+Dreq_Palette),a6
(1) 2752/FFFFFFFFFFFF0A1A :                     vidMars_Pal:
(1) 2753/FFFFFFFFFFFF0A1A : 2A48                		move.l	a0,a5
(1) 2754/FFFFFFFFFFFF0A1C : 7E00                		moveq	#0,d7
(1) 2755/FFFFFFFFFFFF0A1E : 3E00                		move.w	d0,d7
(1) 2756/FFFFFFFFFFFF0A20 : DE47                		add.w	d7,d7
(1) 2757/FFFFFFFFFFFF0A22 : DCC7                		adda	d7,a6
(1) 2758/FFFFFFFFFFFF0A24 : 3E01                		move.w	d1,d7
(1) 2759/FFFFFFFFFFFF0A26 : 9E7C 0001           		sub.w	#1,d7
(1) 2760/FFFFFFFFFFFF0A2A : 3C02                		move.w	d2,d6
(1) 2761/FFFFFFFFFFFF0A2C : CC7C 0001           		and.w	#1,d6
(1) 2762/FFFFFFFFFFFF0A30 : E25E                		ror.w	#1,d6
(1) 2763/FFFFFFFFFFFF0A32 :                     .loop:
(1) 2764/FFFFFFFFFFFF0A32 : 3A1D                		move.w	(a5)+,d5
(1) 2765/FFFFFFFFFFFF0A34 : 8A46                		or.w	d6,d5
(1) 2766/FFFFFFFFFFFF0A36 : 3CC5                		move.w	d5,(a6)+
(1) 2767/FFFFFFFFFFFF0A38 : 51CF FFF8           		dbf	d7,.loop
(1) 2769/FFFFFFFFFFFF0A3C : 4E75                		rts
(1) 2770/FFFFFFFFFFFF0A3E :                     
(1) 2771/FFFFFFFFFFFF0A3E :                     ; --------------------------------------------------------
(1) 2772/FFFFFFFFFFFF0A3E :                     ; Video_MarsPalFade
(1) 2773/FFFFFFFFFFFF0A3E :                     ;
(1) 2774/FFFFFFFFFFFF0A3E :                     ; a0 - Palette data
(1) 2775/FFFFFFFFFFFF0A3E :                     ; d0 - Number of colors
(1) 2776/FFFFFFFFFFFF0A3E :                     ; d1 - Speed
(1) 2777/FFFFFFFFFFFF0A3E :                     ;
(1) 2778/FFFFFFFFFFFF0A3E :                     ; RAM_ReqFadeMars: (WORD)
(1) 2779/FFFFFFFFFFFF0A3E :                     ; $00 - No task (or finished)
(1) 2780/FFFFFFFFFFFF0A3E :                     ; $01 - Fade in
(1) 2781/FFFFFFFFFFFF0A3E :                     ; $02 - Fade out to black
(1) 2782/FFFFFFFFFFFF0A3E :                     ;
(1) 2783/FFFFFFFFFFFF0A3E :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 2784/FFFFFFFFFFFF0A3E :                     ; --------------------------------------------------------
(1) 2785/FFFFFFFFFFFF0A3E :                     
(1) 2786/FFFFFFFFFFFF0A3E :                     ; TODO: luego ver que hago con el priority bit
(1) 2787/FFFFFFFFFFFF0A3E :                     
(1) 2788/FFFFFFFFFFFF0A3E :                     Video_MarsPalFade:
(1) 2790/FFFFFFFFFFFF0A3E : 0478 0001 8A4E      		sub.w	#1,(RAM_FadeMarsTmr).w
(1) 2791/FFFFFFFFFFFF0A44 : 6A14                		bpl.s	.active
(1) 2792/FFFFFFFFFFFF0A46 : 31F8 8A4C 8A4E      		move.w	(RAM_FadeMarsDelay).w,(RAM_FadeMarsTmr).w
(1) 2793/FFFFFFFFFFFF0A4C : 3E38 8A48           		move.w	(RAM_FadeMarsReq).w,d7
(1) 2794/FFFFFFFFFFFF0A50 : DE47                		add.w	d7,d7
(1) 2795/FFFFFFFFFFFF0A52 : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1) 2796/FFFFFFFFFFFF0A56 : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1) 2797/FFFFFFFFFFFF0A5A :                     .active:
(1) 2798/FFFFFFFFFFFF0A5A : 4E75                		rts
(1) 2799/FFFFFFFFFFFF0A5C :                     
(1) 2800/FFFFFFFFFFFF0A5C :                     ; --------------------------------------------
(1) 2801/FFFFFFFFFFFF0A5C :                     
(1) 2802/FFFFFFFFFFFF0A5C :                     .fade_list:
(1) 2803/FFFFFFFFFFFF0A5C : 0006                		dc.w .fade_done-.fade_list
(1) 2804/FFFFFFFFFFFF0A5E : 0008                		dc.w .fade_in-.fade_list
(1) 2805/FFFFFFFFFFFF0A60 : 00B2                		dc.w .fade_out-.fade_list
(1) 2806/FFFFFFFFFFFF0A62 :                     
(1) 2807/FFFFFFFFFFFF0A62 :                     ; --------------------------------------------
(1) 2808/FFFFFFFFFFFF0A62 :                     ; No fade or finished.
(1) 2809/FFFFFFFFFFFF0A62 :                     ; --------------------------------------------
(1) 2810/FFFFFFFFFFFF0A62 :                     
(1) 2811/FFFFFFFFFFFF0A62 :                     .fade_done:
(1) 2812/FFFFFFFFFFFF0A62 : 4E75                		rts
(1) 2813/FFFFFFFFFFFF0A64 :                     
(1) 2814/FFFFFFFFFFFF0A64 :                     ; --------------------------------------------
(1) 2815/FFFFFFFFFFFF0A64 :                     ; Fade in
(1) 2816/FFFFFFFFFFFF0A64 :                     ; --------------------------------------------
(1) 2817/FFFFFFFFFFFF0A64 :                     
(1) 2818/FFFFFFFFFFFF0A64 :                     .fade_in:
(1) 2819/FFFFFFFFFFFF0A64 : 4DF8 81D0           		lea	(RAM_MdMarsPalFd),a6
(1) 2820/FFFFFFFFFFFF0A68 : 4BF8 9D00           		lea	(RAM_MdDreq+Dreq_Palette),a5
(1) 2821/FFFFFFFFFFFF0A6C : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 2822/FFFFFFFFFFFF0A70 : 3238 8A4A           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 2823/FFFFFFFFFFFF0A74 : 3C00                		move.w	d0,d6
(1) 2824/FFFFFFFFFFFF0A76 : 4846                		swap	d6
(1) 2825/FFFFFFFFFFFF0A78 : 907C 0001           		sub.w	#1,d0
(1) 2826/FFFFFFFFFFFF0A7C :                     .nxt_pal:
(1) 2827/FFFFFFFFFFFF0A7C : 4242                		clr.w	d2		; Reset finished colorbits
(1) 2828/FFFFFFFFFFFF0A7E : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 2829/FFFFFFFFFFFF0A80 : 3C15                		move.w	(a5),d6		; d6 - Output
(1) 2830/FFFFFFFFFFFF0A82 : 3607                		move.w	d7,d3		; RED
(1) 2831/FFFFFFFFFFFF0A84 : 3806                		move.w	d6,d4
(1) 2832/FFFFFFFFFFFF0A86 : CC7C FFE0           		and.w	#%1111111111100000,d6
(1) 2833/FFFFFFFFFFFF0A8A : C87C 001F           		and.w	#%0000000000011111,d4
(1) 2834/FFFFFFFFFFFF0A8E : C67C 001F           		and.w	#%0000000000011111,d3
(1) 2835/FFFFFFFFFFFF0A92 : D841                		add.w	d1,d4
(1) 2836/FFFFFFFFFFFF0A94 : B843                		cmp.w	d3,d4
(1) 2837/FFFFFFFFFFFF0A96 : 6506                		bcs.s	.no_red
(1) 2838/FFFFFFFFFFFF0A98 : 3803                		move.w	d3,d4
(1) 2839/FFFFFFFFFFFF0A9A : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 2840/FFFFFFFFFFFF0A9E :                     .no_red:
(1) 2841/FFFFFFFFFFFF0A9E : 8C44                		or.w	d4,d6
(1) 2842/FFFFFFFFFFFF0AA0 : EB49                		lsl.w	#5,d1
(1) 2843/FFFFFFFFFFFF0AA2 : 3607                		move.w	d7,d3		; GREEN
(1) 2844/FFFFFFFFFFFF0AA4 : 3806                		move.w	d6,d4
(1) 2845/FFFFFFFFFFFF0AA6 : CC7C FC1F           		and.w	#%1111110000011111,d6
(1) 2846/FFFFFFFFFFFF0AAA : C87C 03E0           		and.w	#%0000001111100000,d4
(1) 2847/FFFFFFFFFFFF0AAE : C67C 03E0           		and.w	#%0000001111100000,d3
(1) 2848/FFFFFFFFFFFF0AB2 : D841                		add.w	d1,d4
(1) 2849/FFFFFFFFFFFF0AB4 : B843                		cmp.w	d3,d4
(1) 2850/FFFFFFFFFFFF0AB6 : 6506                		bcs.s	.no_grn
(1) 2851/FFFFFFFFFFFF0AB8 : 3803                		move.w	d3,d4
(1) 2852/FFFFFFFFFFFF0ABA : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 2853/FFFFFFFFFFFF0ABE :                     .no_grn:
(1) 2854/FFFFFFFFFFFF0ABE : 8C44                		or.w	d4,d6
(1) 2855/FFFFFFFFFFFF0AC0 : EB49                		lsl.w	#5,d1
(1) 2856/FFFFFFFFFFFF0AC2 : 3607                		move.w	d7,d3		; BLUE
(1) 2857/FFFFFFFFFFFF0AC4 : 3806                		move.w	d6,d4
(1) 2858/FFFFFFFFFFFF0AC6 : CC7C 83FF           		and.w	#%1000001111111111,d6
(1) 2859/FFFFFFFFFFFF0ACA : C87C 7C00           		and.w	#%0111110000000000,d4
(1) 2860/FFFFFFFFFFFF0ACE : C67C 7C00           		and.w	#%0111110000000000,d3
(1) 2861/FFFFFFFFFFFF0AD2 : D841                		add.w	d1,d4
(1) 2862/FFFFFFFFFFFF0AD4 : B843                		cmp.w	d3,d4
(1) 2863/FFFFFFFFFFFF0AD6 : 6506                		bcs.s	.no_blu
(1) 2864/FFFFFFFFFFFF0AD8 : 3803                		move.w	d3,d4
(1) 2865/FFFFFFFFFFFF0ADA : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 2866/FFFFFFFFFFFF0ADE :                     .no_blu:
(1) 2867/FFFFFFFFFFFF0ADE : 8C44                		or.w	d4,d6
(1) 2868/FFFFFFFFFFFF0AE0 : E049                		lsr.w	#8,d1
(1) 2869/FFFFFFFFFFFF0AE2 : E449                		lsr.w	#2,d1
(1) 2870/FFFFFFFFFFFF0AE4 : CE7C 8000           		and.w	#$8000,d7	; Keep priority bit
(1) 2871/FFFFFFFFFFFF0AE8 : 8C47                		or.w	d7,d6
(1) 2872/FFFFFFFFFFFF0AEA : 3AC6                		move.w	d6,(a5)+
(1) 2873/FFFFFFFFFFFF0AEC : DCFC 0002           		adda	#2,a6
(1) 2874/FFFFFFFFFFFF0AF0 : B47C 0007           		cmp.w	#%111,d2
(1) 2875/FFFFFFFFFFFF0AF4 : 6608                		bne.s	.no_fnsh
(1) 2876/FFFFFFFFFFFF0AF6 : 4846                		swap	d6
(1) 2877/FFFFFFFFFFFF0AF8 : 9C7C 0001           		sub.w	#1,d6
(1) 2878/FFFFFFFFFFFF0AFC : 4846                		swap	d6
(1) 2879/FFFFFFFFFFFF0AFE :                     .no_fnsh:
(1) 2880/FFFFFFFFFFFF0AFE : 51C8 FF7C           		dbf	d0,.nxt_pal
(1) 2881/FFFFFFFFFFFF0B02 : 4846                		swap	d6
(1) 2882/FFFFFFFFFFFF0B04 : 4A46                		tst.w	d6
(1) 2883/FFFFFFFFFFFF0B06 : 6604                		bne.s	.no_move
(1) 2884/FFFFFFFFFFFF0B08 : 4278 8A48           		clr.w	(RAM_FadeMarsReq).w
(1) 2885/FFFFFFFFFFFF0B0C :                     .no_move:
(1) 2886/FFFFFFFFFFFF0B0C : 4E75                		rts
(1) 2887/FFFFFFFFFFFF0B0E :                     
(1) 2888/FFFFFFFFFFFF0B0E :                     ; --------------------------------------------
(1) 2889/FFFFFFFFFFFF0B0E :                     ; Fade out
(1) 2890/FFFFFFFFFFFF0B0E :                     ; --------------------------------------------
(1) 2891/FFFFFFFFFFFF0B0E :                     
(1) 2892/FFFFFFFFFFFF0B0E :                     .fade_out:
(1) 2893/FFFFFFFFFFFF0B0E : 4DF8 9D00           		lea	(RAM_MdDreq+Dreq_Palette),a6
(1) 2894/FFFFFFFFFFFF0B12 : 303C 0100           		move.w	#256,d0				; Num of colors
(1) 2895/FFFFFFFFFFFF0B16 : 3238 8A4A           		move.w	(RAM_FadeMarsIncr).w,d1		; Speed
(1) 2896/FFFFFFFFFFFF0B1A : 3C00                		move.w	d0,d6
(1) 2897/FFFFFFFFFFFF0B1C : 4846                		swap	d6
(1) 2898/FFFFFFFFFFFF0B1E : 907C 0001           		sub.w	#1,d0
(1) 2899/FFFFFFFFFFFF0B22 :                     .nxt_pal_o:
(1) 2900/FFFFFFFFFFFF0B22 : 4242                		clr.w	d2		; Reset finished colorbits
(1) 2901/FFFFFFFFFFFF0B24 : 3E16                		move.w	(a6),d7		; d7 - Input
(1) 2902/FFFFFFFFFFFF0B26 : 3C07                		move.w	d7,d6
(1) 2903/FFFFFFFFFFFF0B28 : CE7C FFE0           		and.w	#%1111111111100000,d7
(1) 2904/FFFFFFFFFFFF0B2C : CC7C 001F           		and.w	#%0000000000011111,d6
(1) 2905/FFFFFFFFFFFF0B30 : 9C41                		sub.w	d1,d6
(1) 2906/FFFFFFFFFFFF0B32 : 6A06                		bpl.s	.no_red_o
(1) 2907/FFFFFFFFFFFF0B34 : 4246                		clr.w	d6
(1) 2908/FFFFFFFFFFFF0B36 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1) 2909/FFFFFFFFFFFF0B3A :                     .no_red_o:
(1) 2910/FFFFFFFFFFFF0B3A : 8E46                		or.w	d6,d7
(1) 2911/FFFFFFFFFFFF0B3C : EB49                		lsl.w	#5,d1
(1) 2912/FFFFFFFFFFFF0B3E : 3C07                		move.w	d7,d6
(1) 2913/FFFFFFFFFFFF0B40 : CE7C FC1F           		and.w	#%1111110000011111,d7
(1) 2914/FFFFFFFFFFFF0B44 : CC7C 03E0           		and.w	#%0000001111100000,d6
(1) 2915/FFFFFFFFFFFF0B48 : 9C41                		sub.w	d1,d6
(1) 2916/FFFFFFFFFFFF0B4A : 6A06                		bpl.s	.no_grn_o
(1) 2917/FFFFFFFFFFFF0B4C : 4246                		clr.w	d6
(1) 2918/FFFFFFFFFFFF0B4E : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1) 2919/FFFFFFFFFFFF0B52 :                     .no_grn_o:
(1) 2920/FFFFFFFFFFFF0B52 : 8E46                		or.w	d6,d7
(1) 2921/FFFFFFFFFFFF0B54 : EB49                		lsl.w	#5,d1
(1) 2922/FFFFFFFFFFFF0B56 : 3C07                		move.w	d7,d6
(1) 2923/FFFFFFFFFFFF0B58 : CE7C 83FF           		and.w	#%1000001111111111,d7
(1) 2924/FFFFFFFFFFFF0B5C : CC7C 7C00           		and.w	#%0111110000000000,d6
(1) 2925/FFFFFFFFFFFF0B60 : 9C41                		sub.w	d1,d6
(1) 2926/FFFFFFFFFFFF0B62 : 6A06                		bpl.s	.no_blu_o
(1) 2927/FFFFFFFFFFFF0B64 : 4246                		clr.w	d6
(1) 2928/FFFFFFFFFFFF0B66 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1) 2929/FFFFFFFFFFFF0B6A :                     .no_blu_o:
(1) 2930/FFFFFFFFFFFF0B6A : 8E46                		or.w	d6,d7
(1) 2931/FFFFFFFFFFFF0B6C : E049                		lsr.w	#8,d1
(1) 2932/FFFFFFFFFFFF0B6E : E449                		lsr.w	#2,d1
(1) 2933/FFFFFFFFFFFF0B70 : 3CC7                		move.w	d7,(a6)+
(1) 2934/FFFFFFFFFFFF0B72 : B47C 0007           		cmp.w	#%111,d2
(1) 2935/FFFFFFFFFFFF0B76 : 6608                		bne.s	.no_fnsh_o
(1) 2936/FFFFFFFFFFFF0B78 : 4846                		swap	d6
(1) 2937/FFFFFFFFFFFF0B7A : 9C7C 0001           		sub.w	#1,d6
(1) 2938/FFFFFFFFFFFF0B7E : 4846                		swap	d6
(1) 2939/FFFFFFFFFFFF0B80 :                     .no_fnsh_o:
(1) 2940/FFFFFFFFFFFF0B80 : 51C8 FFA0           		dbf	d0,.nxt_pal_o
(1) 2941/FFFFFFFFFFFF0B84 : 4846                		swap	d6
(1) 2942/FFFFFFFFFFFF0B86 : 4A46                		tst.w	d6
(1) 2943/FFFFFFFFFFFF0B88 : 6604                		bne.s	.no_move_o
(1) 2944/FFFFFFFFFFFF0B8A : 4278 8A48           		clr.w	(RAM_FadeMarsReq).w
(1) 2945/FFFFFFFFFFFF0B8E :                     .no_move_o:
(1) 2947/FFFFFFFFFFFF0B8E : 4E75                		rts
(1) 2948/FFFFFFFFFFFF0B90 :                     
     184/FFFFFFFFFFFF0B90 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF0B90 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF0B90 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0B90 :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF0B90 :                     ;
(1)    5/FFFFFFFFFFFF0B90 :                     ; * CAN BE RECYCLED FOR SEGA PICO, ONLY SKIP ANY
(1)    6/FFFFFFFFFFFF0B90 :                     ; Z80 ACCESS **
(1)    7/FFFFFFFFFFFF0B90 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFF0B90 :                     
(1)    9/FFFFFFFFFFFF0B90 :                     ; ====================================================================
(1)   10/FFFFFFFFFFFF0B90 :                     ; ----------------------------------------------------------------
(1)   11/FFFFFFFFFFFF0B90 :                     ; Variables
(1)   12/FFFFFFFFFFFF0B90 :                     ; ----------------------------------------------------------------
(1)   13/FFFFFFFFFFFF0B90 :                     
(1)   14/FFFFFFFFFFFF0B90 :                     ; Controller buffer data (after calling System_Input)
(1)   15/FFFFFFFFFFFF0B90 :                     ;
(1)   16/FFFFFFFFFFFF0B90 :                     ; Type/Revision byte:
(1)   17/FFFFFFFFFFFF0B90 :                     ;
(1)   18/FFFFFFFFFFFF0B90 :                     ; ID    |
(1)   19/FFFFFFFFFFFF0B90 :                     ; $0D   | $00 - Original 3 button
(1)   20/FFFFFFFFFFFF0B90 :                     ;       | $01 - 6 button version: XYZM
(1)   21/FFFFFFFFFFFF0B90 :                     
(1)   22/FFFFFFFFFFFF0B90 : (MACRO)             		struct 0
(1)   22/FFFFFFFFFFFF0B90 : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   22/    1456 :                                     dephase
(1)   22/    1456 : =$1456              GLBL_LASTORG    set *
(1)   22/       0 :                                     phase 0
(1)   23/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   24/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   25/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   26/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   27/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   28/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   29/       A :                     extr_3		ds.w 1
(1)   30/       C :                     extr_4		ds.w 1
(1)   31/       E :                     extr_5		ds.w 1
(1)   32/      10 :                     sizeof_input	ds.l 0
(1)   33/      12 : (MACRO)             		endstruct
(1)   33/       0 :                                     !org GLBL_LASTORG
(1)   33/FFFFFFFFFFFF0B90 :                                     phase GLBL_LASTPC
(1)   34/FFFFFFFFFFFF0B90 :                     
(1)   35/FFFFFFFFFFFF0B90 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   36/FFFFFFFFFFFF0B90 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   37/FFFFFFFFFFFF0B90 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   38/FFFFFFFFFFFF0B90 :                     
(1)   39/FFFFFFFFFFFF0B90 :                     ; Read WORD in +on_hold or +on_press
(1)   40/FFFFFFFFFFFF0B90 : =$1                 JoyUp		equ $0001
(1)   41/FFFFFFFFFFFF0B90 : =$2                 JoyDown		equ $0002
(1)   42/FFFFFFFFFFFF0B90 : =$4                 JoyLeft		equ $0004
(1)   43/FFFFFFFFFFFF0B90 : =$8                 JoyRight	equ $0008
(1)   44/FFFFFFFFFFFF0B90 : =$10                JoyB		equ $0010
(1)   45/FFFFFFFFFFFF0B90 : =$20                JoyC		equ $0020
(1)   46/FFFFFFFFFFFF0B90 : =$40                JoyA		equ $0040
(1)   47/FFFFFFFFFFFF0B90 : =$80                JoyStart	equ $0080
(1)   48/FFFFFFFFFFFF0B90 : =$100               JoyZ		equ $0100
(1)   49/FFFFFFFFFFFF0B90 : =$200               JoyY		equ $0200
(1)   50/FFFFFFFFFFFF0B90 : =$400               JoyX		equ $0400
(1)   51/FFFFFFFFFFFF0B90 : =$800               JoyMode		equ $0800
(1)   52/FFFFFFFFFFFF0B90 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   53/FFFFFFFFFFFF0B90 : =$1                 bitJoyDown	equ 1
(1)   54/FFFFFFFFFFFF0B90 : =$2                 bitJoyLeft	equ 2
(1)   55/FFFFFFFFFFFF0B90 : =$3                 bitJoyRight	equ 3
(1)   56/FFFFFFFFFFFF0B90 : =$4                 bitJoyB		equ 4
(1)   57/FFFFFFFFFFFF0B90 : =$5                 bitJoyC		equ 5
(1)   58/FFFFFFFFFFFF0B90 : =$6                 bitJoyA		equ 6
(1)   59/FFFFFFFFFFFF0B90 : =$7                 bitJoyStart	equ 7
(1)   60/FFFFFFFFFFFF0B90 : =$8                 bitJoyZ		equ 8
(1)   61/FFFFFFFFFFFF0B90 : =$9                 bitJoyY		equ 9
(1)   62/FFFFFFFFFFFF0B90 : =$A                 bitJoyX		equ 10
(1)   63/FFFFFFFFFFFF0B90 : =$B                 bitJoyMode	equ 11
(1)   64/FFFFFFFFFFFF0B90 :                     
(1)   65/FFFFFFFFFFFF0B90 :                     ; Mega Mouse
(1)   66/FFFFFFFFFFFF0B90 :                     ; Read WORD as +on_hold or +on_press
(1)   67/FFFFFFFFFFFF0B90 : =$1                 ClickR		equ $0001
(1)   68/FFFFFFFFFFFF0B90 : =$2                 ClickL		equ $0002
(1)   69/FFFFFFFFFFFF0B90 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   70/FFFFFFFFFFFF0B90 : =$8                 ClickS		equ $0008	; (Untested)
(1)   71/FFFFFFFFFFFF0B90 : =$0                 bitClickR	equ 0
(1)   72/FFFFFFFFFFFF0B90 : =$1                 bitClickL	equ 1
(1)   73/FFFFFFFFFFFF0B90 : =$2                 bitClickM	equ 2
(1)   74/FFFFFFFFFFFF0B90 : =$3                 bitClickS	equ 3
(1)   75/FFFFFFFFFFFF0B90 :                     
(1)   76/FFFFFFFFFFFF0B90 :                     ; ====================================================================
(1)   77/FFFFFFFFFFFF0B90 :                     ; ----------------------------------------------------------------
(1)   78/FFFFFFFFFFFF0B90 :                     ; RAM section
(1)   79/FFFFFFFFFFFF0B90 :                     ; ----------------------------------------------------------------
(1)   80/FFFFFFFFFFFF0B90 :                     
(1)   81/FFFFFFFFFFFF0B90 : (MACRO)             		struct RAM_MdSystem
(1)   81/FFFFFFFFFFFF0B90 : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   81/    1456 :                                     dephase
(1)   81/    1456 : =$1456              GLBL_LASTORG    set *
(1)   81/FFFFFFFFFFFF9800 :                                     phase RAM_MDSYSTEM
(1)   82/FFFFFFFFFFFF9800 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   83/FFFFFFFFFFFF9840 :                     RAM_SaveData	ds.b $200			; Safe Cache'd save data section to Read/Write
(1)   84/FFFFFFFFFFFF9A40 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   85/FFFFFFFFFFFF9A44 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   86/FFFFFFFFFFFF9A48 :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   87/FFFFFFFFFFFF9A4C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   88/FFFFFFFFFFFF9A52 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   89/FFFFFFFFFFFF9A58 :                     sizeof_mdsys	ds.l 0
(1)   90/FFFFFFFFFFFF9A5A : (MACRO)             		endstruct
(1)   90/FFFFFFFFFFFF9800 :                                     !org GLBL_LASTORG
(1)   90/FFFFFFFFFFFF0B90 :                                     phase GLBL_LASTPC
(1)   91/FFFFFFFFFFFF0B90 : (MACRO)             		erreport "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   92/FFFFFFFFFFFF0B90 :                     
(1)   93/FFFFFFFFFFFF0B90 :                     ; ====================================================================
(1)   94/FFFFFFFFFFFF0B90 :                     ; --------------------------------------------------------
(1)   95/FFFFFFFFFFFF0B90 :                     ; Init System
(1)   96/FFFFFFFFFFFF0B90 :                     ; 
(1)   97/FFFFFFFFFFFF0B90 :                     ; Uses:
(1)   98/FFFFFFFFFFFF0B90 :                     ; a0-a2,d0-d1
(1)   99/FFFFFFFFFFFF0B90 :                     ; --------------------------------------------------------
(1)  100/FFFFFFFFFFFF0B90 :                     
(1)  101/FFFFFFFFFFFF0B90 :                     System_Init:
(1)  102/FFFFFFFFFFFF0B90 : 40E7                		move.w	sr,-(sp)
(1)  103/FFFFFFFFFFFF0B92 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  105/FFFFFFFFFFFF0B96 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l	; Stop Z80
(1)  106/FFFFFFFFFFFF0B9E :                     .wait:
(1)  107/FFFFFFFFFFFF0B9E : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l		; Wait for it
(1)  108/FFFFFFFFFFFF0BA6 : 66F6                		bne.s	.wait
(1)  109/FFFFFFFFFFFF0BA8 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  110/FFFFFFFFFFFF0BAA : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  111/FFFFFFFFFFFF0BB0 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  112/FFFFFFFFFFFF0BB6 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  113/FFFFFFFFFFFF0BBC : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l		; Enable Z80
(1)  115/FFFFFFFFFFFF0BC4 : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  116/FFFFFFFFFFFF0BC8 : 31C0 9A4C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  117/FFFFFFFFFFFF0BCC : 31C0 9A52           		move.w	d0,(RAM_MdMarsHInt).w
(1)  118/FFFFFFFFFFFF0BD0 : 203C FFFF 1088      		move.l	#VInt_Default,d0	; Set default ints
(1)  119/FFFFFFFFFFFF0BD6 : 223C FFFF 109E      		move.l	#Hint_Default,d1
(1)  120/FFFFFFFFFFFF0BDC : 6100 0410           		bsr	System_SetInts
(1)  121/FFFFFFFFFFFF0BE0 : 41F8 9800           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  122/FFFFFFFFFFFF0BE4 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  123/FFFFFFFFFFFF0BE8 : 7000                		moveq	#0,d0
(1)  124/FFFFFFFFFFFF0BEA :                     .clrinput:
(1)  125/FFFFFFFFFFFF0BEA : 30C0                		move.w	d0,(a0)+
(1)  126/FFFFFFFFFFFF0BEC : 51C9 FFFC           		dbf	d1,.clrinput
(1)  127/FFFFFFFFFFFF0BF0 : 203C 5625 5769      		move.l	#$56255769,d0		; Set these random values
(1)  128/FFFFFFFFFFFF0BF6 : 223C 9511 6102      		move.l	#$95116102,d1
(1)  129/FFFFFFFFFFFF0BFC : 23C0 FFFF 9A40      		move.l	d0,(RAM_SysRandVal).l
(1)  130/FFFFFFFFFFFF0C02 : 23C1 FFFF 9A44      		move.l	d1,(RAM_SysRandSeed).l
(1)  131/FFFFFFFFFFFF0C08 : 46DF                		move.w	(sp)+,sr
(1)  132/FFFFFFFFFFFF0C0A : 4E75                		rts
(1)  133/FFFFFFFFFFFF0C0C :                     
(1)  134/FFFFFFFFFFFF0C0C :                     ; --------------------------------------------------------
(1)  135/FFFFFFFFFFFF0C0C :                     ; System_WaitFrame
(1)  136/FFFFFFFFFFFF0C0C :                     ;
(1)  137/FFFFFFFFFFFF0C0C :                     ; Call this on the loop your current screen.
(1)  138/FFFFFFFFFFFF0C0C :                     ;
(1)  139/FFFFFFFFFFFF0C0C :                     ; Calling this it will:
(1)  140/FFFFFFFFFFFF0C0C :                     ; - Update the controller data
(1)  141/FFFFFFFFFFFF0C0C :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  142/FFFFFFFFFFFF0C0C :                     ;   data from from RAM to VDP, RV bit is not required.
(1)  143/FFFFFFFFFFFF0C0C :                     ;
(1)  144/FFFFFFFFFFFF0C0C :                     ; But before entering VBlank:
(1)  145/FFFFFFFFFFFF0C0C :                     ; - The DREQ data stored here will be transfered
(1)  146/FFFFFFFFFFFF0C0C :                     ; to the 32X side
(1)  147/FFFFFFFFFFFF0C0C :                     ; --------------------------------------------------------
(1)  148/FFFFFFFFFFFF0C0C :                     
(1)  149/FFFFFFFFFFFF0C0C :                     System_WaitFrame:
(1)  150/FFFFFFFFFFFF0C0C : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Inside VBlank?
(1)  151/FFFFFFFFFFFF0C12 : 3816                .wait_lag:	move.w	(a6),d4			; then it's a lag frame.
(1)  152/FFFFFFFFFFFF0C14 : 0804 0003           		btst	#bitVBlk,d4
(1)  153/FFFFFFFFFFFF0C18 : 66F8                		bne.s	.wait_lag
(1)  155/FFFFFFFFFFFF0C1A : 6100 0484           		bsr	System_MarsUpdate	; Update 32X
(1)  157/FFFFFFFFFFFF0C1E : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Check if we are on DISPLAY
(1)  158/FFFFFFFFFFFF0C24 : 3816                .wait_in:	move.w	(a6),d4
(1)  159/FFFFFFFFFFFF0C26 : 0804 0003           		btst	#bitVBlk,d4
(1)  160/FFFFFFFFFFFF0C2A : 67F8                		beq.s	.wait_in
(1)  161/FFFFFFFFFFFF0C2C : 6100 00AC           		bsr	System_Input		; Read inputs FIRST
(1)  162/FFFFFFFFFFFF0C30 :                     	; *** DMA'd Scroll and Palette
(1)  163/FFFFFFFFFFFF0C30 :                     	;
(1)  164/FFFFFFFFFFFF0C30 :                     	; The palette is transferred at the end so
(1)  165/FFFFFFFFFFFF0C30 :                     	; it doesn't show the dots on screen. (hopefully)
(1)  166/FFFFFFFFFFFF0C30 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  167/FFFFFFFFFFFF0C36 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  168/FFFFFFFFFFFF0C3A : 1E38 8A51           		move.b	(RAM_VdpRegs+1),d7
(1)  169/FFFFFFFFFFFF0C3E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  170/FFFFFFFFFFFF0C42 : 3C87                		move.w	d7,(a6)
(1)  171/FFFFFFFFFFFF0C44 : 6100 0084           		bsr	System_DmaEnter_RAM
(1)  172/FFFFFFFFFFFF0C48 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  173/FFFFFFFFFFFF0C4E : 2CBC 96BD 95E0      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  174/FFFFFFFFFFFF0C54 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  175/FFFFFFFFFFFF0C58 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  176/FFFFFFFFFFFF0C5C : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  177/FFFFFFFFFFFF0C60 : 3C9F                		move.w	(sp)+,(a6)
(1)  178/FFFFFFFFFFFF0C62 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  179/FFFFFFFFFFFF0C68 : 2CBC 96BC 9500      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  180/FFFFFFFFFFFF0C6E : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  181/FFFFFFFFFFFF0C72 : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  182/FFFFFFFFFFFF0C76 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  183/FFFFFFFFFFFF0C7A : 3C9F                		move.w	(sp)+,(a6)
(1)  184/FFFFFFFFFFFF0C7C : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  185/FFFFFFFFFFFF0C82 : 2CBC 96BE 9508      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  186/FFFFFFFFFFFF0C88 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  187/FFFFFFFFFFFF0C8C : 3CBC 7800           		move.w	#$7800,(a6)
(1)  188/FFFFFFFFFFFF0C90 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  189/FFFFFFFFFFFF0C94 : 3C9F                		move.w	(sp)+,(a6)
(1)  190/FFFFFFFFFFFF0C96 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  191/FFFFFFFFFFFF0C9C : 2CBC 96C0 95A8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  192/FFFFFFFFFFFF0CA2 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  193/FFFFFFFFFFFF0CA6 : 3CBC C000           		move.w	#$C000,(a6)
(1)  194/FFFFFFFFFFFF0CAA : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  195/FFFFFFFFFFFF0CAE : 3C9F                		move.w	(sp)+,(a6)
(1)  196/FFFFFFFFFFFF0CB0 : 6100 FCE8           		bsr	Video_DmaBlast
(1)  197/FFFFFFFFFFFF0CB4 : 6118                		bsr	System_DmaExit_RAM
(1)  198/FFFFFFFFFFFF0CB6 : 3E3C 8100           		move.w	#$8100,d7
(1)  199/FFFFFFFFFFFF0CBA : 1E38 8A51           		move.b	(RAM_VdpRegs+1).w,d7
(1)  200/FFFFFFFFFFFF0CBE : 3C87                		move.w	d7,(a6)
(1)  201/FFFFFFFFFFFF0CC0 : 06B8 0000 0001 8450 		add.l	#1,(RAM_Framecount).w
(1)  202/FFFFFFFFFFFF0CC8 : 4E75                		rts
(1)  203/FFFFFFFFFFFF0CCA :                     
(1)  204/FFFFFFFFFFFF0CCA :                     ; --------------------------------------------------------
(1)  205/FFFFFFFFFFFF0CCA :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  206/FFFFFFFFFFFF0CCA :                     ; (from): ROM or RAM
(1)  207/FFFFFFFFFFFF0CCA :                     ;
(1)  208/FFFFFFFFFFFF0CCA :                     ; Call to these labels BEFORE and AFTER doing
(1)  209/FFFFFFFFFFFF0CCA :                     ; DMA-to-VDP transers.
(1)  210/FFFFFFFFFFFF0CCA :                     ; These calls are not needed for FILL or COPY.
(1)  211/FFFFFFFFFFFF0CCA :                     ;
(1)  212/FFFFFFFFFFFF0CCA :                     ; ** For stock Genesis:
(1)  213/FFFFFFFFFFFF0CCA :                     ;  | The Z80 cannot read from ROM while the
(1)  214/FFFFFFFFFFFF0CCA :                     ;  | DMA ROM-to-VDP transfer is active.
(1)  215/FFFFFFFFFFFF0CCA :                     ;  | THIS INCLUDES RAM TRANSFERS.
(1)  216/FFFFFFFFFFFF0CCA :                     ;  | ** Solution:
(1)  217/FFFFFFFFFFFF0CCA :                     ;  | STOP the Z80 entirely OR:
(1)  218/FFFFFFFFFFFF0CCA :                     ;  | First stop, set a flag and turn ON the
(1)  219/FFFFFFFFFFFF0CCA :                     ;  | Z80 again, if the Z80 reads the flag it
(1)  220/FFFFFFFFFFFF0CCA :                     ;  | should be stuck on a loop until you clear
(1)  221/FFFFFFFFFFFF0CCA :                     ;  | that flag from here after finishing your
(1)  222/FFFFFFFFFFFF0CCA :                     ;  | DMA transfer(s)
(1)  223/FFFFFFFFFFFF0CCA :                     ;
(1)  224/FFFFFFFFFFFF0CCA :                     ; ** For the 32X:
(1)  225/FFFFFFFFFFFF0CCA :                     ;  | SAME rule for the Genesis, but this time the
(1)  226/FFFFFFFFFFFF0CCA :                     ;  | ROM-to-VDP transfer requires the RV bit to be set.
(1)  227/FFFFFFFFFFFF0CCA :                     ;  | (RAM transfers doesn't require this bit at all.)
(1)  228/FFFFFFFFFFFF0CCA :                     ;  | Setting the RV bit blocks the SH2 from accessing
(1)  229/FFFFFFFFFFFF0CCA :                     ;  | the ROM area, THIS ALSO affects the Z80.
(1)  230/FFFFFFFFFFFF0CCA :                     ;  | ** Solution:
(1)  231/FFFFFFFFFFFF0CCA :                     ;  | First, make sure the SH2 isn't reading from ROM
(1)  232/FFFFFFFFFFFF0CCA :                     ;  | while the bit is active, or it will read garbage
(1)  233/FFFFFFFFFFFF0CCA :                     ;  | data.
(1)  234/FFFFFFFFFFFF0CCA :                     ;  | In the case where you need to read from ROM
(1)  235/FFFFFFFFFFFF0CCA :                     ;  | a lot (Playing PWM's for example):
(1)  236/FFFFFFFFFFFF0CCA :                     ;  | First request an CMD interrupt and tell the
(1)  237/FFFFFFFFFFFF0CCA :                     ;  | SH2 to backup a small amount of sample data
(1)  238/FFFFFFFFFFFF0CCA :                     ;  | and temporally relocate the read point to the
(1)  239/FFFFFFFFFFFF0CCA :                     ;  | backup until you make another
(1)  240/FFFFFFFFFFFF0CCA :                     ;  | interrupt telling that you finished here and set
(1)  241/FFFFFFFFFFFF0CCA :                     ;  | RV back to 0.
(1)  242/FFFFFFFFFFFF0CCA :                     ;
(1)  243/FFFFFFFFFFFF0CCA :                     ; This is where you put your Sound driver's Z80 stop
(1)  244/FFFFFFFFFFFF0CCA :                     ; or pause calls go here
(1)  245/FFFFFFFFFFFF0CCA :                     ; --------------------------------------------------------
(1)  246/FFFFFFFFFFFF0CCA :                     
(1)  247/FFFFFFFFFFFF0CCA :                     System_DmaEnter_RAM:
(1)  248/FFFFFFFFFFFF0CCA : 6000 F42E           		bra	gemaDmaPause
(1)  249/FFFFFFFFFFFF0CCE :                     System_DmaExit_RAM:
(1)  250/FFFFFFFFFFFF0CCE : 6000 F452           		bra	gemaDmaResume
(1)  251/FFFFFFFFFFFF0CD2 :                     
(1)  252/FFFFFFFFFFFF0CD2 :                     ; --------------------------------------------------------
(1)  253/FFFFFFFFFFFF0CD2 :                     
(1)  254/FFFFFFFFFFFF0CD2 :                     System_DmaEnter_ROM:
(1)  255/FFFFFFFFFFFF0CD2 : 6000 F468           		bra	gemaDmaPauseRom
(1)  256/FFFFFFFFFFFF0CD6 :                     System_DmaExit_ROM:
(1)  257/FFFFFFFFFFFF0CD6 : 6000 F494           		bra	gemaDmaResumeRom
(1)  258/FFFFFFFFFFFF0CDA :                     
(1)  259/FFFFFFFFFFFF0CDA :                     ; ====================================================================
(1)  260/FFFFFFFFFFFF0CDA :                     ; ----------------------------------------------------------------
(1)  261/FFFFFFFFFFFF0CDA :                     ; Subroutines
(1)  262/FFFFFFFFFFFF0CDA :                     ; ----------------------------------------------------------------
(1)  263/FFFFFFFFFFFF0CDA :                     
(1)  264/FFFFFFFFFFFF0CDA :                     ; --------------------------------------------------------
(1)  265/FFFFFFFFFFFF0CDA :                     ; System_Input
(1)  266/FFFFFFFFFFFF0CDA :                     ;
(1)  267/FFFFFFFFFFFF0CDA :                     ; Reads data from the Controller ports
(1)  268/FFFFFFFFFFFF0CDA :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  269/FFFFFFFFFFFF0CDA :                     ;
(1)  270/FFFFFFFFFFFF0CDA :                     ; Uses:
(1)  271/FFFFFFFFFFFF0CDA :                     ; d5-d7,a5-a6
(1)  272/FFFFFFFFFFFF0CDA :                     ; --------------------------------------------------------
(1)  273/FFFFFFFFFFFF0CDA :                     
(1)  274/FFFFFFFFFFFF0CDA :                     System_Input:
(1)  275/FFFFFFFFFFFF0CDA :                     ; 		move.w	#$0100,(z80_bus).l
(1)  276/FFFFFFFFFFFF0CDA :                     .wait:
(1)  277/FFFFFFFFFFFF0CDA :                     ; 		btst	#0,(z80_bus).l
(1)  278/FFFFFFFFFFFF0CDA :                     ; 		bne.s	.wait
(1)  279/FFFFFFFFFFFF0CDA : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  280/FFFFFFFFFFFF0CE0 : 4DF8 9800           		lea	(RAM_InputData),a6	; a6 - Output
(1)  281/FFFFFFFFFFFF0CE4 : 6108                		bsr.s	.this_one
(1)  282/FFFFFFFFFFFF0CE6 : DAFC 0002           		adda	#2,a5
(1)  283/FFFFFFFFFFFF0CEA : DCFC 0010           		adda	#sizeof_input,a6
(1)  284/FFFFFFFFFFFF0CEE :                     ; 		bsr.s	.this_one
(1)  285/FFFFFFFFFFFF0CEE :                     ; ; 		move.w	#0,(z80_bus).l
(1)  286/FFFFFFFFFFFF0CEE :                     ; 		rts
(1)  287/FFFFFFFFFFFF0CEE :                     
(1)  288/FFFFFFFFFFFF0CEE :                     ; --------------------------------------------------------
(1)  289/FFFFFFFFFFFF0CEE :                     ; Read port
(1)  290/FFFFFFFFFFFF0CEE :                     ;
(1)  291/FFFFFFFFFFFF0CEE :                     ; a5 - Current port
(1)  292/FFFFFFFFFFFF0CEE :                     ; a6 - Output data
(1)  293/FFFFFFFFFFFF0CEE :                     ; --------------------------------------------------------
(1)  294/FFFFFFFFFFFF0CEE :                     
(1)  295/FFFFFFFFFFFF0CEE :                     .this_one:
(1)  296/FFFFFFFFFFFF0CEE : 6100 0166           		bsr	.pick_id
(1)  297/FFFFFFFFFFFF0CF2 : 1C87                		move.b	d7,pad_id(a6)
(1)  298/FFFFFFFFFFFF0CF4 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  299/FFFFFFFFFFFF0CF8 : 670E                		beq.s	.exit
(1)  300/FFFFFFFFFFFF0CFA : 0247 000F           		andi.w	#$0F,d7
(1)  301/FFFFFFFFFFFF0CFE : DE47                		add.w	d7,d7
(1)  302/FFFFFFFFFFFF0D00 : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  303/FFFFFFFFFFFF0D04 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  304/FFFFFFFFFFFF0D08 :                     .exit:
(1)  305/FFFFFFFFFFFF0D08 : 422E 0001           		clr.b	pad_ver(a6)
(1)  306/FFFFFFFFFFFF0D0C : 4E75                		rts
(1)  307/FFFFFFFFFFFF0D0E :                     
(1)  308/FFFFFFFFFFFF0D0E :                     ; --------------------------------------------------------
(1)  309/FFFFFFFFFFFF0D0E :                     ; Grab ID
(1)  310/FFFFFFFFFFFF0D0E :                     ; --------------------------------------------------------
(1)  311/FFFFFFFFFFFF0D0E :                     
(1)  312/FFFFFFFFFFFF0D0E :                     .list:
(1)  313/FFFFFFFFFFFF0D0E : FFFA                		dc.w .exit-.list	; $00
(1)  314/FFFFFFFFFFFF0D10 : FFFA                		dc.w .exit-.list
(1)  315/FFFFFFFFFFFF0D12 : FFFA                		dc.w .exit-.list
(1)  316/FFFFFFFFFFFF0D14 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  317/FFFFFFFFFFFF0D16 : FFFA                		dc.w .exit-.list	; $04
(1)  318/FFFFFFFFFFFF0D18 : FFFA                		dc.w .exit-.list
(1)  319/FFFFFFFFFFFF0D1A : FFFA                		dc.w .exit-.list
(1)  320/FFFFFFFFFFFF0D1C : FFFA                		dc.w .exit-.list
(1)  321/FFFFFFFFFFFF0D1E : FFFA                		dc.w .exit-.list	; $08
(1)  322/FFFFFFFFFFFF0D20 : FFFA                		dc.w .exit-.list
(1)  323/FFFFFFFFFFFF0D22 : FFFA                		dc.w .exit-.list
(1)  324/FFFFFFFFFFFF0D24 : FFFA                		dc.w .exit-.list
(1)  325/FFFFFFFFFFFF0D26 : FFFA                		dc.w .exit-.list	; $0C
(1)  326/FFFFFFFFFFFF0D28 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  327/FFFFFFFFFFFF0D2A : FFFA                		dc.w .exit-.list
(1)  328/FFFFFFFFFFFF0D2C : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  329/FFFFFFFFFFFF0D2E :                     
(1)  330/FFFFFFFFFFFF0D2E :                     ; --------------------------------------------------------
(1)  331/FFFFFFFFFFFF0D2E :                     ; ID $03
(1)  332/FFFFFFFFFFFF0D2E :                     ;
(1)  333/FFFFFFFFFFFF0D2E :                     ; Mega Mouse
(1)  334/FFFFFFFFFFFF0D2E :                     ; --------------------------------------------------------
(1)  335/FFFFFFFFFFFF0D2E :                     
(1)  336/FFFFFFFFFFFF0D2E :                     ; *** NOT TESTED ON HARDWARE ***
(1)  337/FFFFFFFFFFFF0D2E :                     .id_03:
(1)  338/FFFFFFFFFFFF0D2E : 1ABC 0020           		move.b	#$20,(a5)
(1)  339/FFFFFFFFFFFF0D32 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  340/FFFFFFFFFFFF0D38 : 0815 0004           		btst	#4,(a5)
(1)  341/FFFFFFFFFFFF0D3C : 6700 0094           		beq.w	.invalid
(1)  342/FFFFFFFFFFFF0D40 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  343/FFFFFFFFFFFF0D44 : 4E71                		nop
(1)  344/FFFFFFFFFFFF0D46 : 4E71                		nop
(1)  345/FFFFFFFFFFFF0D48 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  346/FFFFFFFFFFFF0D4C : 4E71                		nop
(1)  347/FFFFFFFFFFFF0D4E : 4E71                		nop
(1)  348/FFFFFFFFFFFF0D50 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  349/FFFFFFFFFFFF0D54 : 4E71                		nop
(1)  350/FFFFFFFFFFFF0D56 : 4E71                		nop
(1)  351/FFFFFFFFFFFF0D58 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  352/FFFFFFFFFFFF0D5A : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  353/FFFFFFFFFFFF0D5E : 4E71                		nop
(1)  354/FFFFFFFFFFFF0D60 : 4E71                		nop
(1)  355/FFFFFFFFFFFF0D62 : 1E15                		move.b	(a5),d7
(1)  356/FFFFFFFFFFFF0D64 : 0247 000F            		andi.w	#%1111,d7
(1)  357/FFFFFFFFFFFF0D68 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  358/FFFFFFFFFFFF0D6C : BF46                		eor.w	d7,d6
(1)  359/FFFFFFFFFFFF0D6E : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  360/FFFFFFFFFFFF0D72 : CC47                		and.w	d7,d6
(1)  361/FFFFFFFFFFFF0D74 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  362/FFFFFFFFFFFF0D78 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  363/FFFFFFFFFFFF0D7C : 4E71                		nop
(1)  364/FFFFFFFFFFFF0D7E : 4E71                		nop
(1)  365/FFFFFFFFFFFF0D80 : 1E15                		move.b	(a5),d7
(1)  366/FFFFFFFFFFFF0D82 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  367/FFFFFFFFFFFF0D86 : 0247 000F           		andi.w	#%1111,d7
(1)  368/FFFFFFFFFFFF0D8A : E94F                		lsl.w	#4,d7
(1)  369/FFFFFFFFFFFF0D8C : 4E71                		nop
(1)  370/FFFFFFFFFFFF0D8E : 1C15                		move.b	(a5),d6
(1)  371/FFFFFFFFFFFF0D90 : 0246 000F           		andi.w	#%1111,d6
(1)  372/FFFFFFFFFFFF0D94 : 8E46                		or.w	d6,d7
(1)  373/FFFFFFFFFFFF0D96 : 0805 0000           		btst    #0,d5
(1)  374/FFFFFFFFFFFF0D9A : 6704                		beq.s	.x_neg
(1)  375/FFFFFFFFFFFF0D9C : 4407                		neg.b	d7
(1)  376/FFFFFFFFFFFF0D9E : 4447                		neg.w	d7
(1)  377/FFFFFFFFFFFF0DA0 :                     .x_neg:
(1)  378/FFFFFFFFFFFF0DA0 : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  379/FFFFFFFFFFFF0DA4 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  380/FFFFFFFFFFFF0DA8 : 4E71                		nop
(1)  381/FFFFFFFFFFFF0DAA : 4E71                		nop
(1)  382/FFFFFFFFFFFF0DAC : 1E15                		move.b	(a5),d7
(1)  383/FFFFFFFFFFFF0DAE : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  384/FFFFFFFFFFFF0DB2 : 0247 000F           		andi.w	#%1111,d7
(1)  385/FFFFFFFFFFFF0DB6 : E94F                		lsl.w	#4,d7
(1)  386/FFFFFFFFFFFF0DB8 : 4E71                		nop
(1)  387/FFFFFFFFFFFF0DBA : 1C15                		move.b	(a5),d6
(1)  388/FFFFFFFFFFFF0DBC : 0246 000F           		andi.w	#%1111,d6
(1)  389/FFFFFFFFFFFF0DC0 : 8E46                		or.w	d6,d7
(1)  390/FFFFFFFFFFFF0DC2 : 0805 0001           		btst    #1,d5
(1)  391/FFFFFFFFFFFF0DC6 : 6704                		beq.s	.y_neg
(1)  392/FFFFFFFFFFFF0DC8 : 4407                		neg.b	d7
(1)  393/FFFFFFFFFFFF0DCA : 4447                		neg.w	d7
(1)  394/FFFFFFFFFFFF0DCC :                     .y_neg:
(1)  395/FFFFFFFFFFFF0DCC : 4447                		neg.w	d7		; Reverse Y
(1)  396/FFFFFFFFFFFF0DCE : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  397/FFFFFFFFFFFF0DD2 :                     
(1)  398/FFFFFFFFFFFF0DD2 :                     .invalid:
(1)  399/FFFFFFFFFFFF0DD2 : 1ABC 0060           		move.b	#$60,(a5)
(1)  400/FFFFFFFFFFFF0DD6 : 4E75                		rts
(1)  401/FFFFFFFFFFFF0DD8 :                     
(1)  402/FFFFFFFFFFFF0DD8 :                     ; --------------------------------------------------------
(1)  403/FFFFFFFFFFFF0DD8 :                     ; ID $0D
(1)  404/FFFFFFFFFFFF0DD8 :                     ;
(1)  405/FFFFFFFFFFFF0DD8 :                     ; Normal controller: 3 button or 6 button.
(1)  406/FFFFFFFFFFFF0DD8 :                     ; --------------------------------------------------------
(1)  407/FFFFFFFFFFFF0DD8 :                     
(1)  408/FFFFFFFFFFFF0DD8 :                     .id_0D:
(1)  409/FFFFFFFFFFFF0DD8 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  410/FFFFFFFFFFFF0DDC : 4E71                		nop
(1)  411/FFFFFFFFFFFF0DDE : 4E71                		nop
(1)  412/FFFFFFFFFFFF0DE0 : 1A15                		move.b	(a5),d5
(1)  413/FFFFFFFFFFFF0DE2 : 0245 003F           		andi.w	#%00111111,d5
(1)  414/FFFFFFFFFFFF0DE6 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  415/FFFFFFFFFFFF0DEA : 4E71                		nop
(1)  416/FFFFFFFFFFFF0DEC : 4E71                		nop
(1)  417/FFFFFFFFFFFF0DEE : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  418/FFFFFFFFFFFF0DF0 : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  419/FFFFFFFFFFFF0DF2 : 0247 00C0           		andi.w	#%11000000,d7
(1)  420/FFFFFFFFFFFF0DF6 : 8E45                		or.w	d5,d7
(1)  421/FFFFFFFFFFFF0DF8 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  422/FFFFFFFFFFFF0DFC : 4647                		not.w	d7
(1)  423/FFFFFFFFFFFF0DFE : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  424/FFFFFFFFFFFF0E02 : BF05                		eor.b	d7,d5
(1)  425/FFFFFFFFFFFF0E04 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  426/FFFFFFFFFFFF0E08 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  427/FFFFFFFFFFFF0E0C : CA07                		and.b	d7,d5
(1)  428/FFFFFFFFFFFF0E0E : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  429/FFFFFFFFFFFF0E12 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  430/FFFFFFFFFFFF0E16 : 4E71                		nop
(1)  431/FFFFFFFFFFFF0E18 : 4E71                		nop
(1)  432/FFFFFFFFFFFF0E1A : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  433/FFFFFFFFFFFF0E1C : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  434/FFFFFFFFFFFF0E20 : 4E71                  		nop
(1)  435/FFFFFFFFFFFF0E22 : 4E71                  		nop
(1)  436/FFFFFFFFFFFF0E24 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  437/FFFFFFFFFFFF0E26 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  438/FFFFFFFFFFFF0E2A : 4E71                 		nop
(1)  439/FFFFFFFFFFFF0E2C : 4E71                 		nop
(1)  440/FFFFFFFFFFFF0E2E : 0246 000F           		andi.w	#$F,d6
(1)  441/FFFFFFFFFFFF0E32 : E44E                		lsr.w	#2,d6
(1)  442/FFFFFFFFFFFF0E34 : 0246 0001           		andi.w	#1,d6
(1)  443/FFFFFFFFFFFF0E38 : 6716                		beq.s	.oldpad
(1)  444/FFFFFFFFFFFF0E3A : 4607                		not.b	d7
(1)  445/FFFFFFFFFFFF0E3C : 0247 000F            		andi.w	#%1111,d7
(1)  446/FFFFFFFFFFFF0E40 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  447/FFFFFFFFFFFF0E44 : BF05                		eor.b	d7,d5
(1)  448/FFFFFFFFFFFF0E46 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  449/FFFFFFFFFFFF0E4A : CA07                		and.b	d7,d5
(1)  450/FFFFFFFFFFFF0E4C : 1D45 0004           		move.b	d5,on_press(a6)
(1)  451/FFFFFFFFFFFF0E50 :                     .oldpad:
(1)  452/FFFFFFFFFFFF0E50 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  453/FFFFFFFFFFFF0E54 : 4E75                		rts
(1)  454/FFFFFFFFFFFF0E56 :                     
(1)  455/FFFFFFFFFFFF0E56 :                     ; --------------------------------------------------------
(1)  456/FFFFFFFFFFFF0E56 :                     ; Grab ID
(1)  457/FFFFFFFFFFFF0E56 :                     ; --------------------------------------------------------
(1)  458/FFFFFFFFFFFF0E56 :                     
(1)  459/FFFFFFFFFFFF0E56 :                     .pick_id:
(1)  460/FFFFFFFFFFFF0E56 : 7E00                		moveq	#0,d7
(1)  461/FFFFFFFFFFFF0E58 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  462/FFFFFFFFFFFF0E5C : 4E71                		nop
(1)  463/FFFFFFFFFFFF0E5E : 4E71                		nop
(1)  464/FFFFFFFFFFFF0E60 : 610A                		bsr	.read
(1)  465/FFFFFFFFFFFF0E62 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  466/FFFFFFFFFFFF0E66 : 4E71                		nop
(1)  467/FFFFFFFFFFFF0E68 : 4E71                		nop
(1)  468/FFFFFFFFFFFF0E6A : DE47                		add.w	d7,d7
(1)  469/FFFFFFFFFFFF0E6C :                     .read:
(1)  470/FFFFFFFFFFFF0E6C : 1A15                		move.b	(a5),d5
(1)  471/FFFFFFFFFFFF0E6E : 1C05                		move.b	d5,d6
(1)  472/FFFFFFFFFFFF0E70 : 0206 000C           		andi.b	#$C,d6
(1)  473/FFFFFFFFFFFF0E74 : 6702                		beq.s	.step_1
(1)  474/FFFFFFFFFFFF0E76 : 5247                		addq.w	#1,d7
(1)  475/FFFFFFFFFFFF0E78 :                     .step_1:
(1)  476/FFFFFFFFFFFF0E78 : DE47                		add.w	d7,d7
(1)  477/FFFFFFFFFFFF0E7A : 1C05                		move.b	d5,d6
(1)  478/FFFFFFFFFFFF0E7C : 0246 0003           		andi.w	#3,d6
(1)  479/FFFFFFFFFFFF0E80 : 6702                		beq.s	.step_2
(1)  480/FFFFFFFFFFFF0E82 : 5247                		addq.w	#1,d7
(1)  481/FFFFFFFFFFFF0E84 :                     .step_2:
(1)  482/FFFFFFFFFFFF0E84 : 4E75                		rts
(1)  483/FFFFFFFFFFFF0E86 :                     
(1)  484/FFFFFFFFFFFF0E86 :                     ; --------------------------------------------------------
(1)  485/FFFFFFFFFFFF0E86 :                     ; System_Random
(1)  486/FFFFFFFFFFFF0E86 :                     ;
(1)  487/FFFFFFFFFFFF0E86 :                     ; Makes a random number.
(1)  488/FFFFFFFFFFFF0E86 :                     ;
(1)  489/FFFFFFFFFFFF0E86 :                     ; Input:
(1)  490/FFFFFFFFFFFF0E86 :                     ; d0 | Seed
(1)  491/FFFFFFFFFFFF0E86 :                     ;
(1)  492/FFFFFFFFFFFF0E86 :                     ; Output:
(1)  493/FFFFFFFFFFFF0E86 :                     ; d0 | LONG
(1)  494/FFFFFFFFFFFF0E86 :                     ;
(1)  495/FFFFFFFFFFFF0E86 :                     ; Uses:
(1)  496/FFFFFFFFFFFF0E86 :                     ; d4-d5
(1)  497/FFFFFFFFFFFF0E86 :                     ; --------------------------------------------------------
(1)  498/FFFFFFFFFFFF0E86 :                     
(1)  499/FFFFFFFFFFFF0E86 :                     System_Random:
(1)  500/FFFFFFFFFFFF0E86 : 2F04                		move.l	d4,-(sp)
(1)  501/FFFFFFFFFFFF0E88 : 2838 9A44           		move.l	(RAM_SysRandSeed).w,d4
(1)  502/FFFFFFFFFFFF0E8C : 6606                		bne.s	.good_s
(1)  503/FFFFFFFFFFFF0E8E : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  504/FFFFFFFFFFFF0E94 :                     .good_s:
(1)  505/FFFFFFFFFFFF0E94 : 2004                		move.l	d4,d0
(1)  506/FFFFFFFFFFFF0E96 : EB9C                		rol.l	#5,d4
(1)  507/FFFFFFFFFFFF0E98 : D880                		add.l	d0,d4
(1)  508/FFFFFFFFFFFF0E9A : E644                		asr.w	#3,d4
(1)  509/FFFFFFFFFFFF0E9C : D880                		add.l	d0,d4
(1)  510/FFFFFFFFFFFF0E9E : 3004                		move.w	d4,d0
(1)  511/FFFFFFFFFFFF0EA0 : 4844                		swap	d4
(1)  512/FFFFFFFFFFFF0EA2 : D044                		add.w	d4,d0
(1)  513/FFFFFFFFFFFF0EA4 : 3800                		move.w	d0,d4
(1)  514/FFFFFFFFFFFF0EA6 : 4844                		swap	d4
(1)  515/FFFFFFFFFFFF0EA8 : 21C4 9A44           		move.l	d4,(RAM_SysRandSeed).w
(1)  516/FFFFFFFFFFFF0EAC : 281F                		move.l	(sp)+,d4
(1)  517/FFFFFFFFFFFF0EAE : 4E75                		rts
(1)  518/FFFFFFFFFFFF0EB0 :                     
(1)  519/FFFFFFFFFFFF0EB0 :                     ; --------------------------------------------------------
(1)  520/FFFFFFFFFFFF0EB0 :                     ; System_SineWave_Cos / System_SineWave
(1)  521/FFFFFFFFFFFF0EB0 :                     ;
(1)  522/FFFFFFFFFFFF0EB0 :                     ; Get sinewave value
(1)  523/FFFFFFFFFFFF0EB0 :                     ;
(1)  524/FFFFFFFFFFFF0EB0 :                     ; Input:
(1)  525/FFFFFFFFFFFF0EB0 :                     ; d0 | WORD - Tan
(1)  526/FFFFFFFFFFFF0EB0 :                     ; d1 | WORD - Multiply
(1)  527/FFFFFFFFFFFF0EB0 :                     ;
(1)  528/FFFFFFFFFFFF0EB0 :                     ; Output:
(1)  529/FFFFFFFFFFFF0EB0 :                     ; d2 | LONG - Result (as 0000.0000)
(1)  530/FFFFFFFFFFFF0EB0 :                     ; --------------------------------------------------------
(1)  531/FFFFFFFFFFFF0EB0 :                     
(1)  532/FFFFFFFFFFFF0EB0 :                     ; TODO: improve this.
(1)  533/FFFFFFFFFFFF0EB0 :                     System_SineWave_Cos:
(1)  534/FFFFFFFFFFFF0EB0 : 48A7 8000           		movem.w	d0,-(sp)
(1)  535/FFFFFFFFFFFF0EB4 : 7400                		moveq	#0,d2
(1)  536/FFFFFFFFFFFF0EB6 : 0600 0040           		addi.b	#$40,d0
(1)  537/FFFFFFFFFFFF0EBA : 1400                		move.b	d0,d2
(1)  538/FFFFFFFFFFFF0EBC : E302                		asl.b	#1,d2
(1)  539/FFFFFFFFFFFF0EBE : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  540/FFFFFFFFFFFF0EC2 : C4C1                		mulu.w	d1,d2
(1)  541/FFFFFFFFFFFF0EC4 : 8000                		or.b	d0,d0
(1)  542/FFFFFFFFFFFF0EC6 : 6A02                		bpl.s	.dont_neg
(1)  543/FFFFFFFFFFFF0EC8 : 4482                		neg.l	d2
(1)  544/FFFFFFFFFFFF0ECA :                     .dont_neg:
(1)  545/FFFFFFFFFFFF0ECA : 4C9F 0001           		movem.w	(sp)+,d0
(1)  546/FFFFFFFFFFFF0ECE : 4E75                		rts
(1)  547/FFFFFFFFFFFF0ED0 :                     
(1)  548/FFFFFFFFFFFF0ED0 :                     System_SineWave:
(1)  549/FFFFFFFFFFFF0ED0 : 48A7 8000           		movem.w	d0,-(sp)
(1)  550/FFFFFFFFFFFF0ED4 : 0240 007F           		andi.w	#$7F,d0
(1)  551/FFFFFFFFFFFF0ED8 : E340                		asl.w	#1,d0
(1)  552/FFFFFFFFFFFF0EDA : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  553/FFFFFFFFFFFF0EDE : C4C1                		mulu.w	d1,d2
(1)  554/FFFFFFFFFFFF0EE0 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  555/FFFFFFFFFFFF0EE4 : 5182                		subq.l	#8,d2
(1)  556/FFFFFFFFFFFF0EE6 : 8000                		or.b	d0,d0
(1)  557/FFFFFFFFFFFF0EE8 : 6A02                		bpl.s	.dont_neg
(1)  558/FFFFFFFFFFFF0EEA : 4482                		neg.l	d2
(1)  559/FFFFFFFFFFFF0EEC :                     .dont_neg:
(1)  560/FFFFFFFFFFFF0EEC : 4E75                		rts
(1)  561/FFFFFFFFFFFF0EEE :                     
(1)  562/FFFFFFFFFFFF0EEE : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  563/FFFFFFFFFFFF0F04 : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  564/FFFFFFFFFFFF0F18 : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  565/FFFFFFFFFFFF0F2C : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  566/FFFFFFFFFFFF0F40 : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  567/FFFFFFFFFFFF0F54 : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  568/FFFFFFFFFFFF0F68 : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  569/FFFFFFFFFFFF0F7A : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  570/FFFFFFFFFFFF0F8E : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  571/FFFFFFFFFFFF0FA2 : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  572/FFFFFFFFFFFF0FB6 : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  573/FFFFFFFFFFFF0FCA : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  574/FFFFFFFFFFFF0FDE : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  575/FFFFFFFFFFFF0FEE :                     
(1)  576/FFFFFFFFFFFF0FEE :                     ; --------------------------------------------------------
(1)  577/FFFFFFFFFFFF0FEE :                     ; System_SetInts
(1)  578/FFFFFFFFFFFF0FEE :                     ;
(1)  579/FFFFFFFFFFFF0FEE :                     ; Set new interrputs
(1)  580/FFFFFFFFFFFF0FEE :                     ;
(1)  581/FFFFFFFFFFFF0FEE :                     ; d0 | LONG - VBlank
(1)  582/FFFFFFFFFFFF0FEE :                     ; d1 | LONG - HBlank
(1)  583/FFFFFFFFFFFF0FEE :                     ;
(1)  584/FFFFFFFFFFFF0FEE :                     ; Uses:
(1)  585/FFFFFFFFFFFF0FEE :                     ; d4
(1)  586/FFFFFFFFFFFF0FEE :                     ;
(1)  587/FFFFFFFFFFFF0FEE :                     ; Notes:
(1)  588/FFFFFFFFFFFF0FEE :                     ; Writing 0 or a negative number will skip change
(1)  589/FFFFFFFFFFFF0FEE :                     ; to the interrupt pointer
(1)  590/FFFFFFFFFFFF0FEE :                     ; --------------------------------------------------------
(1)  591/FFFFFFFFFFFF0FEE :                     
(1)  592/FFFFFFFFFFFF0FEE :                     System_SetInts:
(1)  593/FFFFFFFFFFFF0FEE : 2800                		move.l	d0,d4
(1)  594/FFFFFFFFFFFF0FF0 : 670C                		beq.s	.novint
(1)  595/FFFFFFFFFFFF0FF2 : 6B0A                		bmi.s	.novint
(1)  596/FFFFFFFFFFFF0FF4 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  597/FFFFFFFFFFFF0FFA : 21C4 9A4E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  598/FFFFFFFFFFFF0FFE :                     .novint:
(1)  599/FFFFFFFFFFFF0FFE : 2801                		move.l	d1,d4
(1)  600/FFFFFFFFFFFF1000 : 670C                		beq.s	.nohint
(1)  601/FFFFFFFFFFFF1002 : 6B0A                		bmi.s	.nohint
(1)  602/FFFFFFFFFFFF1004 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  603/FFFFFFFFFFFF100A : 21C4 9A54           		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  604/FFFFFFFFFFFF100E :                     .nohint:
(1)  605/FFFFFFFFFFFF100E : 4E75                		rts
(1)  606/FFFFFFFFFFFF1010 :                     
(1)  607/FFFFFFFFFFFF1010 :                     ; --------------------------------------------------------
(1)  608/FFFFFFFFFFFF1010 :                     ; System_SramInit
(1)  609/FFFFFFFFFFFF1010 :                     ;
(1)  610/FFFFFFFFFFFF1010 :                     ; Init save data
(1)  611/FFFFFFFFFFFF1010 :                     ;
(1)  612/FFFFFFFFFFFF1010 :                     ; Uses:
(1)  613/FFFFFFFFFFFF1010 :                     ; a4,d4-d5
(1)  614/FFFFFFFFFFFF1010 :                     ; --------------------------------------------------------
(1)  615/FFFFFFFFFFFF1010 :                     
(1)  616/FFFFFFFFFFFF1010 :                     ; TODO: Check if RV bit is needed here...
(1)  617/FFFFFFFFFFFF1010 :                     System_SramInit:
(1)  618/FFFFFFFFFFFF1010 : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  619/FFFFFFFFFFFF1018 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  620/FFFFFFFFFFFF101E : 7800                		moveq	#0,d4
(1)  621/FFFFFFFFFFFF1020 : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  622/FFFFFFFFFFFF1024 :                     .initsave:
(1)  623/FFFFFFFFFFFF1024 : 1884                		move.b	d4,(a4)
(1)  624/FFFFFFFFFFFF1026 : D8FC 0002           		adda	#2,a4
(1)  625/FFFFFFFFFFFF102A : 51CD FFF8           		dbf	d5,.initsave
(1)  626/FFFFFFFFFFFF102E : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  627/FFFFFFFFFFFF1036 : 4E75                		rts
(1)  628/FFFFFFFFFFFF1038 :                     
(1)  629/FFFFFFFFFFFF1038 :                     ; ====================================================================
(1)  630/FFFFFFFFFFFF1038 :                     ; ----------------------------------------------------------------
(1)  631/FFFFFFFFFFFF1038 :                     ; Screen mode subroutines
(1)  632/FFFFFFFFFFFF1038 :                     ; ----------------------------------------------------------------
(1)  633/FFFFFFFFFFFF1038 :                     
(1)  634/FFFFFFFFFFFF1038 :                     ; --------------------------------------------------------
(1)  635/FFFFFFFFFFFF1038 :                     ; Initialize current screen mode
(1)  636/FFFFFFFFFFFF1038 :                     ; --------------------------------------------------------
(1)  637/FFFFFFFFFFFF1038 :                     
(1)  638/FFFFFFFFFFFF1038 :                     Mode_Init:
(1)  639/FFFFFFFFFFFF1038 : 4EB9 FFFF 02A4      		jsr	(Video_Clear).l
(1)  640/FFFFFFFFFFFF103E : 49F8 B500           		lea	(RAM_ScreenBuff),a4
(1)  641/FFFFFFFFFFFF1042 : 3A3C 13FF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  642/FFFFFFFFFFFF1046 : 7800                		moveq	#0,d4
(1)  643/FFFFFFFFFFFF1048 :                     .clr:
(1)  644/FFFFFFFFFFFF1048 : 38C4                		move.w	d4,(a4)+
(1)  645/FFFFFFFFFFFF104A : 51CD FFFC           		dbf	d5,.clr
(1)  646/FFFFFFFFFFFF104E :                     
(1)  647/FFFFFFFFFFFF104E :                     ; 	if MARS|MARSCD
(1)  648/FFFFFFFFFFFF104E :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a4	; Patch
(1)  649/FFFFFFFFFFFF104E :                     ; 		move.w	#MAX_MODELS-1,d5
(1)  650/FFFFFFFFFFFF104E :                     ; .clr_mdls:
(1)  651/FFFFFFFFFFFF104E :                     ; 		move.l	d4,mdl_data(a4)
(1)  652/FFFFFFFFFFFF104E :                     ; 		adda	#sizeof_mdlobj,a4
(1)  653/FFFFFFFFFFFF104E :                     ; 		dbf	d5,.clr_mdls
(1)  654/FFFFFFFFFFFF104E :                     ; 	endif
(1)  655/FFFFFFFFFFFF104E :                     
(1)  656/FFFFFFFFFFFF104E : 303C 0000           		move.w	#0,d0
(1)  657/FFFFFFFFFFFF1052 : 6000 F9B4           		bra	Video_Mars_GfxMode
(1)  658/FFFFFFFFFFFF1056 :                     
(1)  659/FFFFFFFFFFFF1056 :                     ; --------------------------------------------------------
(1)  660/FFFFFFFFFFFF1056 :                     
(1)  661/FFFFFFFFFFFF1056 :                     Mode_FadeOut:
(1)  662/FFFFFFFFFFFF1056 : 31FC 0002 8A40      		move.w	#2,(RAM_FadeMdReq).w
(1)  663/FFFFFFFFFFFF105C : 31FC 0002 8A48      		move.w	#2,(RAM_FadeMarsReq).w
(1)  664/FFFFFFFFFFFF1062 : 31FC 0001 8A42      		move.w	#1,(RAM_FadeMdIncr).w
(1)  665/FFFFFFFFFFFF1068 : 31FC 0004 8A4A      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  666/FFFFFFFFFFFF106E : 31FC 0000 8A44      		move.w	#0,(RAM_FadeMdDelay).w
(1)  667/FFFFFFFFFFFF1074 : 31FC 0000 8A4C      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  668/FFFFFFFFFFFF107A :                     .loopw:
(1)  669/FFFFFFFFFFFF107A : 6100 FB90           		bsr	System_WaitFrame
(1)  670/FFFFFFFFFFFF107E : 4EB9 FFFF 0602      		jsr	(Video_RunFade).l
(1)  671/FFFFFFFFFFFF1084 : 66F4                		bne.s	.loopw
(1)  672/FFFFFFFFFFFF1086 : 4E75                		rts
(1)  673/FFFFFFFFFFFF1088 :                     
(1)  674/FFFFFFFFFFFF1088 :                     ; ====================================================================
(1)  675/FFFFFFFFFFFF1088 :                     ; ----------------------------------------------------------------
(1)  676/FFFFFFFFFFFF1088 :                     ; Default interrupts
(1)  677/FFFFFFFFFFFF1088 :                     ; ----------------------------------------------------------------
(1)  678/FFFFFFFFFFFF1088 :                     
(1)  679/FFFFFFFFFFFF1088 :                     ; --------------------------------------------------------
(1)  680/FFFFFFFFFFFF1088 :                     ; VBlank
(1)  681/FFFFFFFFFFFF1088 :                     ; --------------------------------------------------------
(1)  682/FFFFFFFFFFFF1088 :                     
(1)  683/FFFFFFFFFFFF1088 :                     VInt_Default:
(1)  684/FFFFFFFFFFFF1088 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  685/FFFFFFFFFFFF108C : 6100 FC4C           		bsr	System_Input
(1)  686/FFFFFFFFFFFF1090 : 06B8 0000 0001 8450 		addi.l	#1,(RAM_FrameCount).w
(1)  687/FFFFFFFFFFFF1098 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
(1)  688/FFFFFFFFFFFF109C : 4E73                		rte
(1)  689/FFFFFFFFFFFF109E :                     
(1)  690/FFFFFFFFFFFF109E :                     ; --------------------------------------------------------
(1)  691/FFFFFFFFFFFF109E :                     ; HBlank
(1)  692/FFFFFFFFFFFF109E :                     ; --------------------------------------------------------
(1)  693/FFFFFFFFFFFF109E :                     
(1)  694/FFFFFFFFFFFF109E :                     HInt_Default:
(1)  695/FFFFFFFFFFFF109E : 4E73                		rte
(1)  696/FFFFFFFFFFFF10A0 :                     
(1)  697/FFFFFFFFFFFF10A0 :                     ; ====================================================================
(1)  698/FFFFFFFFFFFF10A0 :                     ; ----------------------------------------------------------------
(1)  699/FFFFFFFFFFFF10A0 :                     ; SEGA CD / CD32X ONLY
(1)  700/FFFFFFFFFFFF10A0 :                     ; ----------------------------------------------------------------
(1)  701/FFFFFFFFFFFF10A0 :                     
(1)  852/FFFFFFFFFFFF10A0 :                     
(1)  853/FFFFFFFFFFFF10A0 :                     ; ====================================================================
(1)  854/FFFFFFFFFFFF10A0 :                     ; ----------------------------------------------------------------
(1)  855/FFFFFFFFFFFF10A0 :                     ; 32X ONLY
(1)  856/FFFFFFFFFFFF10A0 :                     ; ----------------------------------------------------------------
(1)  857/FFFFFFFFFFFF10A0 :                     
(1)  859/FFFFFFFFFFFF10A0 :                     
(1)  860/FFFFFFFFFFFF10A0 :                     ; --------------------------------------------------------
(1)  861/FFFFFFFFFFFF10A0 :                     ; System_MarsUpdate
(1)  862/FFFFFFFFFFFF10A0 :                     ; --------------------------------------------------------
(1)  863/FFFFFFFFFFFF10A0 :                     
(1)  864/FFFFFFFFFFFF10A0 :                     System_MarsUpdate:
(1)  865/FFFFFFFFFFFF10A0 : 41F8 9D00           		lea	(RAM_MdDreq),a0		; Send DREQ
(1)  866/FFFFFFFFFFFF10A4 : 303C 0200           		move.w	#sizeof_dreq,d0
(1)  867/FFFFFFFFFFFF10A8 : 4EF9 FFFF 10C6      		jmp	(System_RomSendDreq).l	; <-- EXTERNAL JUMP to $880000 area
(1)  869/FFFFFFFFFFFF10AE :                     
(1)  870/FFFFFFFFFFFF10AE :                     ; ====================================================================
(1)  871/FFFFFFFFFFFF10AE :                     ; ----------------------------------------------------------------
(1)  872/FFFFFFFFFFFF10AE :                     ; Shared subs for the add-ons
(1)  873/FFFFFFFFFFFF10AE :                     ; ----------------------------------------------------------------
(1)  874/FFFFFFFFFFFF10AE :                     
(1)  875/FFFFFFFFFFFF10AE :                     ; --------------------------------------------------------
(1)  876/FFFFFFFFFFFF10AE :                     ; System_GrabRamCode
(1)  877/FFFFFFFFFFFF10AE :                     ;
(1)  878/FFFFFFFFFFFF10AE :                     ; Shared for MCD, 32X and CD32X.
(1)  879/FFFFFFFFFFFF10AE :                     ;
(1)  880/FFFFFFFFFFFF10AE :                     ; Send new code to the USER side of RAM and
(1)  881/FFFFFFFFFFFF10AE :                     ; jumps into it.
(1)  882/FFFFFFFFFFFF10AE :                     ;
(1)  883/FFFFFFFFFFFF10AE :                     ; ** FOR SEGA CD/CD+32X
(1)  884/FFFFFFFFFFFF10AE :                     ; Input:
(1)  885/FFFFFFFFFFFF10AE :                     ; a0 - Filename string 8-bytes
(1)  886/FFFFFFFFFFFF10AE :                     ;
(1)  887/FFFFFFFFFFFF10AE :                     ; ** FOR SEGA 32X
(1)  888/FFFFFFFFFFFF10AE :                     ; Input:
(1)  889/FFFFFFFFFFFF10AE :                     ; a0 - Location of the RAM-code to copy from
(1)  890/FFFFFFFFFFFF10AE :                     ;      in the $880000/$900000 areas
(1)  891/FFFFFFFFFFFF10AE :                     ; --------------------------------------------------------
(1)  892/FFFFFFFFFFFF10AE :                     
(1)  893/FFFFFFFFFFFF10AE :                     System_GrabRamCode:
(1)  902/FFFFFFFFFFFF10AE :                     ; 		or.l	#$880000,d0
(1)  903/FFFFFFFFFFFF10AE : 2040                		move.l	d0,a0
(1)  904/FFFFFFFFFFFF10B0 : 43F9 FFFF 1800      		lea	(RAM_UserCode),a1
(1)  905/FFFFFFFFFFFF10B6 : 3E3C 1FFF           		move.w	#(MAX_UserCode)-1,d7	; TODO: TEMPORAL SIZE
(1)  906/FFFFFFFFFFFF10BA :                     .copyme2:
(1)  907/FFFFFFFFFFFF10BA : 12D8                		move.b	(a0)+,(a1)+
(1)  908/FFFFFFFFFFFF10BC : 51CF FFFC           		dbf	d7,.copyme2
(1)  909/FFFFFFFFFFFF10C0 : 4EF9 FFFF 1800      		jmp	(RAM_UserCode).l
(1)  913/FFFFFFFFFFFF10C6 :                     
(1)  914/FFFFFFFFFFFF10C6 :                     ; ====================================================================
(1)  915/FFFFFFFFFFFF10C6 :                     
     185/FFFFFFFFFFFF10C6 :                     		include "system/mars/md_dreq.asm"	; Tested on HW, works.
(1)    1/FFFFFFFFFFFF10C6 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF10C6 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF10C6 :                     ; DREQ transfer section
(1)    4/FFFFFFFFFFFF10C6 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF10C6 :                     
(1)    6/FFFFFFFFFFFF10C6 :                     ; --------------------------------------------------------
(1)    7/FFFFFFFFFFFF10C6 :                     ; System_MarsSendDreq
(1)    8/FFFFFFFFFFFF10C6 :                     ;
(1)    9/FFFFFFFFFFFF10C6 :                     ; Transfers data to the 32X using DREQ
(1)   10/FFFFFFFFFFFF10C6 :                     ;
(1)   11/FFFFFFFFFFFF10C6 :                     ; Input:
(1)   12/FFFFFFFFFFFF10C6 :                     ; a0.l | Source data to transfer
(1)   13/FFFFFFFFFFFF10C6 :                     ; d0.w | Size, MUST end with 0 or 8.
(1)   14/FFFFFFFFFFFF10C6 :                     ;
(1)   15/FFFFFFFFFFFF10C6 :                     ; Uses:
(1)   16/FFFFFFFFFFFF10C6 :                     ; a4-a5/d5-d7
(1)   17/FFFFFFFFFFFF10C6 :                     ;
(1)   18/FFFFFFFFFFFF10C6 :                     ; Notes:
(1)   19/FFFFFFFFFFFF10C6 :                     ; Only call this during DISPLAY, not during VBlank.
(1)   20/FFFFFFFFFFFF10C6 :                     ;
(1)   21/FFFFFFFFFFFF10C6 :                     ; POPULAR 32X EMULATORS WILL GET STUCK WAITING FOR
(1)   22/FFFFFFFFFFFF10C6 :                     ; DMA EXIT, ONLY ares-emu SUPPORTS THE DMA INTERRUPT.
(1)   23/FFFFFFFFFFFF10C6 :                     ; --------------------------------------------------------
(1)   24/FFFFFFFFFFFF10C6 :                     
(1)   25/FFFFFFFFFFFF10C6 :                     System_RomSendDreq:
(1)   26/FFFFFFFFFFFF10C6 : 40C7                		move.w	sr,d7
(1)   27/FFFFFFFFFFFF10C8 : 46FC 2700           		move.w	#$2700,sr
(1)   28/FFFFFFFFFFFF10CC : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   29/FFFFFFFFFFFF10D2 : 49ED 0012           		lea	dreqfifo(a5),a4
(1)   30/FFFFFFFFFFFF10D6 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1)   31/FFFFFFFFFFFF10DC : 3C00                		move.w	d0,d6			; d6 - Size in bytes
(1)   32/FFFFFFFFFFFF10DE : E24E                		lsr.w	#1,d6			; (length/2)
(1)   33/FFFFFFFFFFFF10E0 : 3B46 0010           		move.w	d6,dreqlen(a5)		; Set transfer length (size/2)
(1)   34/FFFFFFFFFFFF10E4 : 3A06                		move.w	d6,d5			; d5 - (length/2)/4
(1)   35/FFFFFFFFFFFF10E6 : E44D                		lsr.w	#2,d5
(1)   36/FFFFFFFFFFFF10E8 : 0445 0001           		subi.w	#1,d5
(1)   37/FFFFFFFFFFFF10EC : 08ED 0000 0003      		bset	#0,standby(a5)		; Call CMD interrupt to MASTER
(1)   38/FFFFFFFFFFFF10F2 : 082D 0006 002C      .wait_bit:	btst	#6,comm12(a5)		; Wait signal
(1)   39/FFFFFFFFFFFF10F8 : 67F8                		beq.s	.wait_bit
(1)   40/FFFFFFFFFFFF10FA : 08AD 0006 002C      		bclr	#6,comm12(a5)		; Clear it here
(1)   41/FFFFFFFFFFFF1100 : 3B7C 0004 0006      		move.w	#%100,dreqctl(a5)	; Set 68S
(1)   42/FFFFFFFFFFFF1106 : 3898                .l0:		move.w  (a0)+,(a4)		; *** CRITICAL PART ***
(1)   43/FFFFFFFFFFFF1108 : 3898                		move.w  (a0)+,(a4)
(1)   44/FFFFFFFFFFFF110A : 3898                		move.w  (a0)+,(a4)
(1)   45/FFFFFFFFFFFF110C : 3898                		move.w  (a0)+,(a4)
(1)   46/FFFFFFFFFFFF110E : 51CD FFF6           		dbf	d5,.l0
(1)   52/FFFFFFFFFFFF1112 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset 68S
(1)   53/FFFFFFFFFFFF1118 : 46C7                		move.w	d7,sr
(1)   54/FFFFFFFFFFFF111A : 4E75                		rts
(1)   55/FFFFFFFFFFFF111C :                     
     186/FFFFFFFFFFFF111C :                     ; ---------------------------------------------
     188/FFFFFFFFFFFF111C :                     .end:
     189/FFFFFFFFFFFF111C : (MACRO)             		erreport "RAM TOP-CODE SUBS",(.end-RAM_SystemCode),MAX_SysCode
     190/    19E2 :                     		dephase
     192/    19E2 :                     Md_SysCode_e:
     193/    19E2 :                     		align 2
     194/    19E2 :                     
     195/    19E2 :                     ; ---------------------------------------------
     196/    19E2 :                     ; JUMP code for switching screen modes
     197/    19E2 :                     ; ---------------------------------------------
     198/    19E2 :                     
     199/    19E2 :                     Md_JumpCode:
     201/FFFFFFFFFFFFFE00 :                     		phase RAM_ScreenJump
     202/FFFFFFFFFFFFFE00 :                     mdjumpcode_s:
     204/FFFFFFFFFFFFFE00 :                     
     205/FFFFFFFFFFFFFE00 :                     ; ---------------------------------------------
     206/FFFFFFFFFFFFFE00 :                     ; Read screen modes
     207/FFFFFFFFFFFFFE00 :                     ;
     208/FFFFFFFFFFFFFE00 :                     ; MD/PICO:
     209/FFFFFFFFFFFFFE00 :                     ; Direct ROM jump
     210/FFFFFFFFFFFFFE00 :                     ;
     211/FFFFFFFFFFFFFE00 :                     ; SEGA 32X:
     212/FFFFFFFFFFFFFE00 :                     ; 880000+ jump
     213/FFFFFFFFFFFFFE00 :                     ;
     214/FFFFFFFFFFFFFE00 :                     ; SEGACD/CD32X:
     215/FFFFFFFFFFFFFE00 :                     ; Read file from disc, transfer to RAM or
     216/FFFFFFFFFFFFFE00 :                     ; WordRAM and jump there.
     217/FFFFFFFFFFFFFE00 :                     ; ---------------------------------------------
     218/FFFFFFFFFFFFFE00 :                     
     219/FFFFFFFFFFFFFE00 :                     Md_ReadModes:
     220/FFFFFFFFFFFFFE00 : 7000                		moveq	#0,d0
     221/FFFFFFFFFFFFFE02 : 3038 AD00           		move.w	(RAM_Glbl_Scrn).w,d0
     222/FFFFFFFFFFFFFE06 : C07C 000F           		and.w	#%1111,d0		; <-- current limit
     228/FFFFFFFFFFFFFE0A : E548                		lsl.w	#2,d0			; * 4
     229/FFFFFFFFFFFFFE0C : 203B 000A           		move.l	.pick_boot(pc,d0.w),d0	; d0 - code location to transfer
     230/FFFFFFFFFFFFFE10 : 4EB9 FFFF 10AE      		jsr	(System_GrabRamCode).l
     237/FFFFFFFFFFFFFE16 : 60E8                		bra.s	Md_ReadModes		; Loop on RTS
     238/FFFFFFFFFFFFFE18 :                     .pick_boot:
     239/FFFFFFFFFFFFFE18 :                     	; size $10
     251/FFFFFFFFFFFFFE18 : 0088 390A           		dc.l Md_Screen00
     252/FFFFFFFFFFFFFE1C : 0088 390A           		dc.l Md_Screen00
     253/FFFFFFFFFFFFFE20 : 0088 390A           		dc.l Md_Screen00
     254/FFFFFFFFFFFFFE24 : 0088 390A           		dc.l Md_Screen00
     256/FFFFFFFFFFFFFE28 :                     
     257/FFFFFFFFFFFFFE28 :                     ; ---------------------------------------------
     259/FFFFFFFFFFFFFE28 :                     mdjumpcode_e:
     260/FFFFFFFFFFFFFE28 : (MACRO)             		erreport "RAM JUMP-CODE SUBS",(mdjumpcode_e-mdjumpcode_s),$180
     261/    1A0A :                     		dephase
     263/    1A0A :                     Md_JumpCode_e:
     264/    1A0A :                     		align 2
     265/    1A0A :                     
     266/    1A0A :                     ; ====================================================================
     267/    1A0A :                     ; --------------------------------------------------------
     268/    1A0A :                     ; Misc. stuff FOR CARTRIDGE ONLY:
     269/    1A0A :                     ;
     270/    1A0A :                     ; Genesis, Sega 32X and Pico
     271/    1A0A :                     ; --------------------------------------------------------
     272/    1A0A :                     
     274/    1A0A :                     
     276/  881A0A :                     		phase $880000+*
     278/  881A0A :                     Z80_CODE:	include "sound/gema_zdrv.asm"		; Called once
(1)    1/  881A0A :                     ; ====================================================================
(1)    2/  881A0A :                     ; --------------------------------------------------------
(1)    3/  881A0A :                     ; GEMA/Nikona Z80 code v0.9
(1)    4/  881A0A :                     ; (C)2023 GenesisFan64
(1)    5/  881A0A :                     ;
(1)    6/  881A0A :                     ; TIP:
(1)    7/  881A0A :                     ; For the 32X, place this code on the 880000 area
(1)    8/  881A0A :                     ; as this is only loaded once.
(1)    9/  881A0A :                     ; --------------------------------------------------------
(1)   10/  881A0A :                     
(1)   11/  881A0A :                     Z80_TOP:
(1)   12/  881A0A :                     		cpu Z80		; Enter Z80
(1)   13/       0 :                     		phase 0		; At 0
(1)   14/       0 : (MACRO)             		org 0
(1)   15/       0 :                     
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     ; SETTINGS
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   21/       0 : =11H                MAX_TRKCHN	equ 17		; !! Max Internal tracker channels: 4PSG + 6FM + 7PWM (**AFFECTS 32X SIDE)
(1)   22/       0 : =8H                 MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) (**AFFECTS WAVE QUALITY)
(1)   23/       0 : =40H                MAX_RCACH	equ 40h		; Max storage for ROM pattern data *1-BIT SIZES ONLY, MUST BE ALIGNED*
(1)   24/       0 : =10H                MAX_TBLSIZE	equ 10h		; Max size for chip tables
(1)   25/       0 : =FH                 MAX_INS		equ 15		; Max Cache'd ROM instruments per track
(1)   26/       0 : =18H                MAX_BLOCKS	equ 24		; Max Cache'd ROM blocks per track
(1)   27/       0 : =FH                 MAX_HEADS	equ 15		; Max Cache'd ROM headers per track
(1)   28/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   29/       0 :                     
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     ; Structs
(1)   32/       0 :                     ; --------------------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 :                     ; trkBuff struct: 00h-30h
(1)   35/       0 :                     ; unused bytes are free.
(1)   36/       0 :                     ;
(1)   37/       0 :                     ; trk_Status: %ERPx xxx0
(1)   38/       0 :                     ; E - enabled
(1)   39/       0 :                     ; R - Init|Restart track
(1)   40/       0 :                     ; P - refill-on-playback
(1)   41/       0 :                     ; 0 - Use global sub-beat
(1)   42/       0 : =0H                 trk_status	equ 00h	; ** Track Status and flags (MUST BE at 00h)
(1)   43/       0 : =1H                 trk_seqId	equ 01h ; ** Track ID to play.
(1)   44/       0 : =2H                 trk_setBlk	equ 02h	; ** Start on this block
(1)   45/       0 : =3H                 trk_tickSet	equ 03h	; ** Ticks for this track
(1)   46/       0 : =4H                 trk_Blocks	equ 04h ; [W] Current track's blocks
(1)   47/       0 : =6H                 trk_Patt	equ 06h ; [W] Current track's heads and patterns
(1)   48/       0 : =8H                 trk_Instr	equ 08h ; [W] Current track's instruments
(1)   49/       0 : =AH                 trk_Read	equ 0Ah	; [W] Track current pattern-read pos
(1)   50/       0 : =CH                 trk_Rows	equ 0Ch	; [W] Track current row length
(1)   51/       0 : =EH                 trk_cachHalf	equ 0Eh ; ROM-cache halfcheck
(1)   52/       0 : =FH                 trk_cachInc	equ 0Fh ; ROM-cache increment
(1)   53/       0 : =10H                trk_rowPause	equ 10h	; Row-pause timer
(1)   54/       0 : =11H                trk_tickTmr	equ 11h	; Ticks timer
(1)   55/       0 : =12H                trk_currBlk	equ 12h	; Current block
(1)   56/       0 : =13H                trk_Panning	equ 13h ; Global panning for this track %LR000000
(1)   57/       0 : =14H                trk_Priority	equ 14h ; Priority level for this buffer
(1)   58/       0 : =15H                trk_BankIns	equ 15h
(1)   59/       0 : =16H                trk_BankBlk	equ 16h
(1)   60/       0 : =17H                trk_BankHead	equ 17h
(1)   61/       0 : =1CH                trk_MaxChnls	equ 1Ch	; MAX avaialble channels
(1)   62/       0 : =1DH                trk_MaxBlks	equ 1Dh ;     ----      blocks
(1)   63/       0 : =1EH                trk_MaxHdrs	equ 1Eh ;     ----      headers
(1)   64/       0 : =1FH                trk_MaxIns	equ 1Fh ;     ----      intruments
(1)   65/       0 : =20H                trk_RomCPatt	equ 20h ; [3b] ROM current pattern data to be cache'd
(1)   66/       0 : =23H                trk_RomPatt	equ 23h ; [3b] ROM TOP pattern data
(1)   67/       0 : =26H                trk_ChnList	equ 26h ; ** [W] Pointer to channel list for this buffer
(1)   68/       0 : =28H                trk_ChnCBlk	equ 28h ; ** [W] Pointer to block storage
(1)   69/       0 : =2AH                trk_ChnCHead	equ 2Ah ; ** [W] Pointer to header storage
(1)   70/       0 : =2CH                trk_ChnCIns	equ 2Ch	; ** [W] Pointer to intrument storage (ALWAYS used)
(1)   71/       0 : =2EH                trk_ChnCach	equ 2Eh	; ** [W] Pointer to pattern storage
(1)   72/       0 :                     
(1)   73/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   74/       0 :                     ;
(1)   75/       0 :                     ; chnl_Flags: LR00evin
(1)   76/       0 :                     ; LR - Left/Right panning bits (REVERSE: 0-ON 1-OFF)
(1)   77/       0 :                     ; e  - Effect*
(1)   78/       0 :                     ; v  - Volume*
(1)   79/       0 :                     ; i  - Intrument*
(1)   80/       0 :                     ; n  - Note*
(1)   81/       0 :                     ; * Gets cleared later.
(1)   82/       0 :                     
(1)   83/       0 : =0H                 chnl_Flags	equ 0	; Playback flags
(1)   84/       0 : =1H                 chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   85/       0 : =2H                 chnl_Note	equ 2
(1)   86/       0 : =3H                 chnl_Ins	equ 3	; Starting from 01h
(1)   87/       0 : =4H                 chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   88/       0 : =5H                 chnl_EffId	equ 5
(1)   89/       0 : =6H                 chnl_EffArg	equ 6
(1)   90/       0 : =7H                 chnl_Type	equ 7	; Impulse-note update bits
(1)   91/       0 :                     
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     ; Variables
(1)   94/       0 :                     ; --------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 :                     ; Z80 opcode labels for the wave playback routines:
(1)   97/       0 : =0H                 zopcNop		equ	00h
(1)   98/       0 : =8H                 zopcEx		equ	08h
(1)   99/       0 : =C9H                zopcRet		equ 	0C9h
(1)  100/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  101/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  102/       0 :                     
(1)  103/       0 :                     ; PSG external control
(1)  104/       0 :                     ; GEMS style.
(1)  105/       0 : =0H                 COM		equ	0
(1)  106/       0 : =4H                 LEV		equ	4
(1)  107/       0 : =8H                 ATK		equ	8
(1)  108/       0 : =CH                 DKY		equ	12
(1)  109/       0 : =10H                SLV		equ	16
(1)  110/       0 : =14H                RRT		equ	20
(1)  111/       0 : =18H                MODE		equ	24
(1)  112/       0 : =1CH                DTL		equ	28
(1)  113/       0 : =20H                DTH		equ	32
(1)  114/       0 : =24H                ALV		equ	36
(1)  115/       0 : =28H                FLG		equ	40
(1)  116/       0 : =2CH                TMR		equ	44
(1)  117/       0 : =30H                PVOL		equ	48
(1)  118/       0 : =34H                PARP		equ	52
(1)  119/       0 : =38H                PTMR		equ	56
(1)  120/       0 :                     
(1)  121/       0 :                     ; PWM control
(1)  122/       0 : =0H                 PWCOM		equ	0
(1)  123/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  124/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  125/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  126/       0 : =20H                PWINSH		equ	32	; **
(1)  127/       0 : =28H                PWINSM		equ	40	; **
(1)  128/       0 : =30H                PWINSL		equ	48	; **
(1)  129/       0 :                     
(1)  130/       0 :                     ; ====================================================================
(1)  131/       0 :                     ; --------------------------------------------------------
(1)  132/       0 :                     ; Code starts here
(1)  133/       0 :                     ; --------------------------------------------------------
(1)  134/       0 :                     
(1)  135/       0 : F3                  		di			; Disable interrputs
(1)  136/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  137/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  138/       6 : 18 7B               		jr	z80_init	; Jump to z80_init
(1)  139/       8 :                     
(1)  140/       8 :                     ; --------------------------------------------------------
(1)  141/       8 :                     ; RST 8 (dac_me)
(1)  142/       8 :                     ; *** self-modifiable code ***
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Writes wave data to DAC using data stored
(1)  145/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  146/       8 :                     ; opcodes to keep the samplerate stable.
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Input (EXX):
(1)  149/       8 :                     ;  c - WAVE buffer MSB
(1)  150/       8 :                     ; de - Pitch (xx.00)
(1)  151/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  152/       8 :                     ;
(1)  153/       8 :                     ; Uses (EXX):
(1)  154/       8 :                     ; b
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Notes:
(1)  157/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  158/       8 :                     ; wave playback.
(1)  159/       8 :                     ;
(1)  160/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  161/       8 :                     ; and
(1)  162/       8 :                     ; call dac_off to disable and enable FM6.
(1)  163/       8 :                     ; --------------------------------------------------------
(1)  164/       8 :                     
(1)  165/       8 :                     ; Samplerate is at 16000hz with minimal-loss.
(1)  166/       8 : (MACRO)             		org 8
(1)  167/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  168/       9 : 08                  		ex	af,af'		; Swap af
(1)  169/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  170/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  171/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  172/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  173/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  174/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  175/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  176/      16 : 65                  		ld	h,l		; get hl back
(1)  177/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  178/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  179/      19 : 08                  		ex	af,af'		; return af
(1)  180/      1A : D9                  		exx
(1)  181/      1B : C9                  		ret
(1)  182/      1C :                     
(1)  183/      1C :                     ; --------------------------------------------------------
(1)  184/      1C :                     ; 1Ch
(1)  185/      1C : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  186/      1E : D5 00               sbeatPtck	dw 200+13	; Default global subbeats (-32 for PAL)
(1)  187/      20 :                     
(1)  188/      20 :                     ; --------------------------------------------------------
(1)  189/      20 :                     ; RST 20h (dac_me)
(1)  190/      20 :                     ; *** self-modifiable code ***
(1)  191/      20 :                     ;
(1)  192/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  193/      20 :                     ; it playing.
(1)  194/      20 :                     ;
(1)  195/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  196/      20 :                     ; IS REQUESTED ***
(1)  197/      20 :                     ; --------------------------------------------------------
(1)  198/      20 :                     
(1)  199/      20 : (MACRO)             		org 20h
(1)  200/      20 : F5                  dac_fill:	push	af		; <-- changes between PUSH AF(playing) and RET(stopped)
(1)  201/      21 : 3A 2F 00            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  202/      24 : D9                  		exx
(1)  203/      25 : AC                  		xor	h		; Grab LSB.00
(1)  204/      26 : D9                  		exx
(1)  205/      27 : E6 80               		and	80h		; Check if bit changed
(1)  206/      29 : C4 D6 11            		call	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  207/      2C : F1                  		pop	af
(1)  208/      2D : C9                  		ret
(1)  209/      2E :                     
(1)  210/      2E :                     ; --------------------------------------------------------
(1)  211/      2E :                     ; 02Eh
(1)  212/      2E : 00                  currTickBits	db 0			; 2Eh: Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1)  213/      2F : 00                  dDacFifoMid	db 0			; 2Fh: WAVE play halfway refill flag (00h/80h)
(1)  214/      30 : 00 00 00            dDacPntr	db 0,0,0		; 30h: WAVE play current ROM position
(1)  215/      33 : 00 00 00            dDacCntr	db 0,0,0		; 33h: WAVE play length counter
(1)  216/      36 : 00                  x68ksrclsb	db 0			; 36h: transferRom temporal LSB
(1)  217/      37 : 00                  x68ksrcmid	db 0			; 37h: transferRom temporal MID
(1)  218/      38 :                     
(1)  219/      38 :                     ; --------------------------------------------------------
(1)  220/      38 :                     ; Z80 Interrupt at 0038h
(1)  221/      38 :                     ; --------------------------------------------------------
(1)  222/      38 :                     
(1)  223/      38 : (MACRO)             		org 38h			; Align 38h
(1)  224/      38 : ED 73 90 17         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, read as tickFlag+1)
(1)  225/      3C : F3                  		di			; Disable interrupt
(1)  226/      3D : C9                  		ret
(1)  227/      3E :                     
(1)  228/      3E :                     ; --------------------------------------------------------
(1)  229/      3E :                     ; 03Eh
(1)  230/      3E : 00                  trkListPage	db 0			; 3Eh: Current tracklist page/bank
(1)  231/      3F : 00                  marsUpd		db 0			; 3Fh: Flag to request a PWM transfer
(1)  232/      40 :                     
(1)  233/      40 :                     ; --------------------------------------------------------
(1)  234/      40 :                     ; 68K Read/Write area at 40h
(1)  235/      40 :                     ; --------------------------------------------------------
(1)  236/      40 :                     
(1)  237/      40 : (MACRO)             		org 40h
(1)  238/      40 :                     commZfifo	ds 40h			; Buffer for commands: 40h bytes
(1)  239/      80 : 00                  commZWrite	db 0			; 80h: cmd fifo wptr (from 68k)
(1)  240/      81 : 00                  commZRomBlk	db 0			; 81h: 68k ROM block flag
(1)  241/      82 : 00                  marsBlock	db 0			; 82h: flag to BLOCK PWM transfers.
(1)  242/      83 :                     
(1)  243/      83 :                     ; --------------------------------------------------------
(1)  244/      83 :                     ; Initialize
(1)  245/      83 :                     ; --------------------------------------------------------
(1)  246/      83 :                     
(1)  247/      83 :                     z80_init:
(1)  248/      83 : CD 86 0E            		call	gema_init		; Init values
(1)  249/      86 : FB                  		ei
(1)  250/      87 :                     
(1)  251/      87 :                     ; --------------------------------------------------------
(1)  252/      87 :                     ; MAIN LOOP
(1)  253/      87 :                     ; --------------------------------------------------------
(1)  254/      87 :                     
(1)  255/      87 :                     drv_loop:
(1)  256/      87 : CF                  		rst	8
(1)  257/      88 : CD 34 0F            		call	get_tick		; Check for Tick on VBlank
(1)  258/      8B : E7                  		rst	20h			; Refill wave
(1)  259/      8C : CF                  		rst	8
(1)  260/      8D : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  261/      8F : 3A 92 17            		ld	a,(tickCnt)
(1)  262/      92 : D6 01               		sub	1
(1)  263/      94 : 38 0B               		jr	c,.noticks
(1)  264/      96 : 32 92 17            		ld	(tickCnt),a
(1)  265/      99 : CD F6 0F            		call	chip_env		; Process PSG and YM
(1)  266/      9C : CD 34 0F            		call	get_tick		; Check for another tick
(1)  267/      9F : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  268/      A1 :                     .noticks:
(1)  269/      A1 : 3A 1D 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  270/      A4 : D6 01               		sub	1
(1)  271/      A6 : 38 06               		jr	c,.nobeats
(1)  272/      A8 : CF                  		rst	8
(1)  273/      A9 : 32 1D 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  274/      AC : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  275/      AE :                     .nobeats:
(1)  276/      AE : CF                  		rst	8
(1)  277/      AF : 78                  		ld	a,b			; Any beat/tick change?
(1)  278/      B0 : B7                  		or	a
(1)  279/      B1 : 28 14               		jr	z,.neither
(1)  280/      B3 : 32 2E 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  281/      B6 : CF                  		rst	8
(1)  282/      B7 : CD 34 0F            		call	get_tick
(1)  283/      BA : CD FF 04            		call	set_chips		; Send changes to sound chips
(1)  284/      BD : CD 34 0F            		call	get_tick
(1)  285/      C0 : CF                  		rst	8
(1)  286/      C1 : CD CF 01            		call	upd_track		; Update track data
(1)  287/      C4 : CD 34 0F            		call	get_tick
(1)  288/      C7 :                     .neither:
(1)  289/      C7 : CD DA 0D            		call	ex_comm			; External communication
(1)  290/      CA : CD 34 0F            		call	get_tick
(1)  291/      CD :                     .next_cmd:
(1)  292/      CD : 3A 80 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  293/      D0 : 47                  		ld	b,a
(1)  294/      D1 : 3A A9 17            		ld	a,(commZRead)
(1)  295/      D4 : B8                  		cp	b
(1)  296/      D5 : 28 B0               		jr	z,drv_loop		; If both are equal: no requests
(1)  297/      D7 : CF                  		rst	8
(1)  298/      D8 : CD F0 00            		call	.grab_arg
(1)  299/      DB : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  300/      DD : 20 A8               		jr	nz,drv_loop
(1)  301/      DF : CD F0 00            		call	.grab_arg		; Read command number
(1)  302/      E2 : 87                  		add	a,a			; * 2
(1)  303/      E3 : 21 0F 01            		ld	hl,.list		; Then jump to one of these...
(1)  304/      E6 : 16 00               		ld	d,0
(1)  305/      E8 : 5F                  		ld	e,a
(1)  306/      E9 : 19                  		add	hl,de
(1)  307/      EA : 7E                  		ld	a,(hl)
(1)  308/      EB : 23                  		inc	hl
(1)  309/      EC : 66                  		ld	h,(hl)
(1)  310/      ED : CF                  		rst	8
(1)  311/      EE : 6F                  		ld	l,a
(1)  312/      EF : E9                  		jp	(hl)
(1)  313/      F0 :                     
(1)  314/      F0 :                     ; --------------------------------------------------------
(1)  315/      F0 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  316/      F0 :                     ; --------------------------------------------------------
(1)  317/      F0 :                     
(1)  318/      F0 :                     .grab_arg:
(1)  319/      F0 : D5                  		push	de
(1)  320/      F1 : E5                  		push	hl
(1)  321/      F2 :                     .getcbytel:
(1)  322/      F2 : 3A 80 00            		ld	a,(commZWrite)
(1)  323/      F5 : 57                  		ld	d,a
(1)  324/      F6 : CF                  		rst	8
(1)  325/      F7 : 3A A9 17            		ld	a,(commZRead)
(1)  326/      FA : BA                  		cp	d
(1)  327/      FB : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  328/      FD : 16 00               		ld	d,0
(1)  329/      FF : 5F                  		ld	e,a
(1)  330/     100 : 21 40 00            		ld	hl,commZfifo
(1)  331/     103 : 19                  		add	hl,de
(1)  332/     104 : CF                  		rst	8
(1)  333/     105 : 3C                  		inc	a
(1)  334/     106 : E6 3F               		and	3Fh		; ** command list limit
(1)  335/     108 : 32 A9 17            		ld	(commZRead),a
(1)  336/     10B : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  337/     10C : E1                  		pop	hl
(1)  338/     10D : D1                  		pop	de
(1)  339/     10E : C9                  		ret
(1)  340/     10F :                     
(1)  341/     10F :                     ; --------------------------------------------------------
(1)  342/     10F :                     
(1)  343/     10F :                     .list:
(1)  344/     10F : 2F 01               		dw .cmnd_0		; 00h -
(1)  345/     111 : 32 01               		dw .cmnd_1		; 01h - Play by track number
(1)  346/     113 : 4F 01               		dw .cmnd_2		; 02h - Stop by track number
(1)  347/     115 : 2F 01               		dw .cmnd_0		; 03h - Resume by track number
(1)  348/     117 : 2F 01               		dw .cmnd_0		; 04h -
(1)  349/     119 : 2F 01               		dw .cmnd_0		; 05h -
(1)  350/     11B : 2F 01               		dw .cmnd_0		; 06h -
(1)  351/     11D : 2F 01               		dw .cmnd_0		; 07h -
(1)  352/     11F : 6C 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  353/     121 : 2F 01               		dw .cmnd_0		; 09h -
(1)  354/     123 : 2F 01               		dw .cmnd_0		; 0Ah -
(1)  355/     125 : 2F 01               		dw .cmnd_0		; 0Bh -
(1)  356/     127 : 8E 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  357/     129 : 2F 01               		dw .cmnd_0		; 0Dh -
(1)  358/     12B : 2F 01               		dw .cmnd_0		; 0Eh -
(1)  359/     12D : 2F 01               		dw .cmnd_0		; 0Fh -
(1)  360/     12F :                     
(1)  361/     12F :                     ; --------------------------------------------------------
(1)  362/     12F :                     ; Command 00h
(1)  363/     12F :                     ;
(1)  364/     12F :                     ; Reserved for TESTING purposes.
(1)  365/     12F :                     ; --------------------------------------------------------
(1)  366/     12F :                     
(1)  367/     12F :                     ; TEST COMMAND
(1)  368/     12F :                     
(1)  369/     12F :                     .cmnd_0:
(1)  370/     12F : C3 CD 00            		jp	.next_cmd
(1)  371/     132 :                     
(1)  372/     132 :                     ; --------------------------------------------------------
(1)  373/     132 :                     ; Command 01h:
(1)  374/     132 :                     ;
(1)  375/     132 :                     ; Make new track by sequence number
(1)  376/     132 :                     ; --------------------------------------------------------
(1)  377/     132 :                     
(1)  378/     132 :                     .cmnd_1:
(1)  379/     132 : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  380/     135 : 4F                  		ld	c,a		; copy to c
(1)  381/     136 : CD F0 00            		call	.grab_arg	; d1: Block from
(1)  382/     139 : 47                  		ld	b,a
(1)  383/     13A : CD 9F 01            		call	.srch_frid	; Search buffer with same ID or FREE to use.
(1)  384/     13D : FE FF               		cp	-1
(1)  385/     13F : CA CD 00            		jp	z,.next_cmd	; Return if failed.
(1)  386/     142 : 36 C0               		ld	(hl),0C0h	; ** Write trk_status flags: Enable+Restart
(1)  387/     144 : 23                  		inc	hl
(1)  388/     145 : 71                  		ld	(hl),c		; ** write trk_seqId
(1)  389/     146 : 23                  		inc	hl
(1)  390/     147 : 70                  		ld	(hl),b		; ** write trk_setBlk
(1)  391/     148 : 79                  		ld	a,c
(1)  392/     149 : CD D1 04            		call	get_RomTrcks
(1)  393/     14C : C3 CD 00            		jp	.next_cmd
(1)  394/     14F :                     
(1)  395/     14F :                     ; --------------------------------------------------------
(1)  396/     14F :                     ; Command 02h:
(1)  397/     14F :                     ;
(1)  398/     14F :                     ; Stop track by sequence number
(1)  399/     14F :                     ; --------------------------------------------------------
(1)  400/     14F :                     
(1)  401/     14F :                     .cmnd_2:
(1)  402/     14F : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  403/     152 : 4F                  		ld	c,a		; copy to c
(1)  404/     153 : 06 FF               		ld	b,-1
(1)  405/     155 : CD 9F 01            		call	.srch_frid
(1)  406/     158 : FE FF               		cp	-1
(1)  407/     15A : CA CD 00            		jp	z,.next_cmd
(1)  408/     15D : 7E                  		ld	a,(hl)
(1)  409/     15E : CB 7F               		bit	7,a
(1)  410/     160 : CA CD 00            		jp	z,.next_cmd
(1)  411/     163 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  412/     165 : 23                  		inc	hl
(1)  413/     166 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  414/     168 : CF                  		rst	8
(1)  415/     169 : C3 CD 00            		jp	.next_cmd
(1)  416/     16C :                     
(1)  417/     16C :                     ; --------------------------------------------------------
(1)  418/     16C :                     ; Command 08h:
(1)  419/     16C :                     ;
(1)  420/     16C :                     ; Stop ALL tracks
(1)  421/     16C :                     ; --------------------------------------------------------
(1)  422/     16C :                     
(1)  423/     16C :                     .cmnd_8:
(1)  424/     16C : DD 21 A4 14         		ld	ix,nikona_BuffList
(1)  425/     170 :                     .next_sall:
(1)  426/     170 : DD 7E 00            		ld	a,(ix)
(1)  427/     173 : FE FF               		cp	-1
(1)  428/     175 : CA CD 00            		jp	z,.next_cmd
(1)  429/     178 : DD 66 01            		ld	h,(ix+1)
(1)  430/     17B : 6F                  		ld	l,a
(1)  431/     17C : 7E                  		ld	a,(hl)		; *** trk_status
(1)  432/     17D : CB 7F               		bit	7,a
(1)  433/     17F : 28 05               		jr	z,.not_on
(1)  434/     181 : 36 FF               		ld	(hl),-1		; *** trk_status: -1 request
(1)  435/     183 : 23                  		inc	hl
(1)  436/     184 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  437/     186 :                     ; 		inc	hl
(1)  438/     186 :                     ; 		ld	(hl),0
(1)  439/     186 :                     .not_on:
(1)  440/     186 : 11 10 00            		ld	de,10h
(1)  441/     189 : DD 19               		add	ix,de
(1)  442/     18B : C3 70 01            		jp	.next_sall
(1)  443/     18E :                     
(1)  444/     18E :                     ; --------------------------------------------------------
(1)  445/     18E :                     ; Command 0Ch:
(1)  446/     18E :                     ;
(1)  447/     18E :                     ; Set global sub-beats
(1)  448/     18E :                     ; --------------------------------------------------------
(1)  449/     18E :                     
(1)  450/     18E :                     .cmnd_C:
(1)  451/     18E : CD F0 00            		call	.grab_arg	; d0.w: $00xx
(1)  452/     191 : 4F                  		ld	c,a
(1)  453/     192 : CD F0 00            		call	.grab_arg	; d0.w: $xx00
(1)  454/     195 : 32 1F 00            		ld	(sbeatPtck+1),a
(1)  455/     198 : 79                  		ld	a,c
(1)  456/     199 : 32 1E 00            		ld	(sbeatPtck),a
(1)  457/     19C : C3 CD 00            		jp	.next_cmd
(1)  458/     19F :                     
(1)  459/     19F :                     ; ------------------------------------------------
(1)  460/     19F :                     
(1)  461/     19F :                     ; c - trk_currId
(1)  462/     19F :                     ; b - trk_setBlk (-1: ignore)
(1)  463/     19F :                     .srch_frid:
(1)  464/     19F : DD 21 A4 14         		ld	ix,nikona_BuffList
(1)  465/     1A3 : 11 10 00            		ld	de,10h
(1)  466/     1A6 :                     .next:
(1)  467/     1A6 : DD 7E 00            		ld	a,(ix)
(1)  468/     1A9 : FE FF               		cp	-1
(1)  469/     1AB : C8                  		ret	z
(1)  470/     1AC : DD 66 01            		ld	h,(ix+1)
(1)  471/     1AF : 6F                  		ld	l,a
(1)  472/     1B0 : 1E 10               		ld	e,10h
(1)  473/     1B2 : DD 19               		add	ix,de
(1)  474/     1B4 : 23                  		inc	hl
(1)  475/     1B5 : CF                  		rst	8
(1)  476/     1B6 : 23                  		inc	hl
(1)  477/     1B7 : 5E                  		ld	e,(hl)		; ** e - trk_currId
(1)  478/     1B8 : 2B                  		dec	hl
(1)  479/     1B9 :                     
(1)  480/     1B9 : 7E                  		ld	a,(hl)		; ** a - trk_Id
(1)  481/     1BA : 2B                  		dec	hl
(1)  482/     1BB : B9                  		cp	c
(1)  483/     1BC : 20 09               		jr	nz,.not_fnd
(1)  484/     1BE : 78                  		ld	a,b
(1)  485/     1BF : FE FF               		cp	-1
(1)  486/     1C1 : 28 09               		jr	z,.found
(1)  487/     1C3 : 7B                  		ld	a,e
(1)  488/     1C4 : B8                  		cp	b
(1)  489/     1C5 : 28 05               		jr	z,.found
(1)  490/     1C7 :                     .not_fnd:
(1)  491/     1C7 : 7E                  		ld	a,(hl)		; ** a - trk_status
(1)  492/     1C8 : B7                  		or	a
(1)  493/     1C9 : FA A6 01            		jp	m,.next
(1)  494/     1CC :                     .found:
(1)  495/     1CC : CF                  		rst	8
(1)  496/     1CD : AF                  		xor	a
(1)  497/     1CE : C9                  		ret
(1)  498/     1CF :                     
(1)  499/     1CF :                     ; ====================================================================
(1)  500/     1CF :                     ; ----------------------------------------------------------------
(1)  501/     1CF :                     ; MAIN Playback section
(1)  502/     1CF :                     ; ----------------------------------------------------------------
(1)  503/     1CF :                     
(1)  504/     1CF :                     ; ============================================================
(1)  505/     1CF :                     ; --------------------------------------------------------
(1)  506/     1CF :                     ; Read INTERNAL mini-impulse-tracker data
(1)  507/     1CF :                     ; --------------------------------------------------------
(1)  508/     1CF :                     
(1)  509/     1CF :                     upd_track:
(1)  510/     1CF : E7                  		rst	20h
(1)  511/     1D0 : FD 21 A4 14         		ld	iy,nikona_BuffList
(1)  512/     1D4 :                     .trk_buffrs:
(1)  513/     1D4 : CF                  		rst	8
(1)  514/     1D5 : FD 7E 00            		ld	a,(iy)
(1)  515/     1D8 : FE FF               		cp	-1
(1)  516/     1DA : C8                  		ret	z
(1)  517/     1DB : FD E5               		push	iy
(1)  518/     1DD : FD 6E 00            		ld	l,(iy)
(1)  519/     1E0 : FD 66 01            		ld	h,(iy+1)
(1)  520/     1E3 : CD F0 01            		call	.read_track
(1)  521/     1E6 : CF                  		rst	8
(1)  522/     1E7 : FD E1               		pop	iy
(1)  523/     1E9 : 11 10 00            		ld	de,10h
(1)  524/     1EC : FD 19               		add	iy,de
(1)  525/     1EE : 18 E4               		jr	.trk_buffrs
(1)  526/     1F0 :                     ; ----------------------------------------
(1)  527/     1F0 :                     ; iy - Track buffer
(1)  528/     1F0 :                     
(1)  529/     1F0 :                     .read_track:
(1)  530/     1F0 : CF                  		rst	8
(1)  531/     1F1 : E5                  		push	hl
(1)  532/     1F2 : FD E1               		pop	iy
(1)  533/     1F4 : FD 46 00            		ld	b,(iy+trk_status)	; b - Track status and settings
(1)  534/     1F7 : CB 78               		bit	7,b			; bit7: Track active?
(1)  535/     1F9 : C8                  		ret	z
(1)  536/     1FA : 78                  		ld	a,b
(1)  537/     1FB : FE FF               		cp	-1			; Mid-silence request?
(1)  538/     1FD : C8                  		ret	z
(1)  539/     1FE : 3A 2E 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  540/     201 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  541/     203 : 28 04               		jr	z,.sfxmd
(1)  542/     205 : CB 4F               		bit	1,a			; BEAT passed?
(1)  543/     207 : C8                  		ret	z			;
(1)  544/     208 : CF                  		rst	8
(1)  545/     209 :                     .sfxmd:
(1)  546/     209 : CB 47               		bit	0,a			; TICK passed?
(1)  547/     20B : C8                  		ret	z
(1)  548/     20C :                     	; *** Start reading notes ***
(1)  549/     20C : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  550/     20E : C4 E2 03            		call	nz,.first_fill
(1)  551/     211 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  552/     213 : C4 DB 03            		call	nz,.effect_fill
(1)  553/     216 : FD 7E 11            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  554/     219 : 3D                  		dec	a
(1)  555/     21A : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  556/     21D : B7                  		or	a
(1)  557/     21E : C0                  		ret	nz			; If TICK != 0, Exit
(1)  558/     21F : FD 7E 03            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  559/     222 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  560/     225 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  561/     228 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  562/     22B : 79                  		ld	a,c			; Check rowcount
(1)  563/     22C : B0                  		or	b
(1)  564/     22D : 20 13               		jr	nz,.row_active
(1)  565/     22F : FD 7E 12            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  566/     232 : 3C                  		inc	a
(1)  567/     233 : FD 77 12            		ld 	(iy+trk_currBlk),a
(1)  568/     236 : CD 66 03            		call	.set_track
(1)  569/     239 : FE FF               		cp	-1			; Track finished?
(1)  570/     23B : C8                  		ret	z
(1)  571/     23C : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  572/     23F : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  573/     242 :                     .row_active:
(1)  574/     242 : CF                  		rst	8
(1)  575/     243 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  576/     246 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  577/     249 :                     
(1)  578/     249 :                     ; --------------------------------
(1)  579/     249 :                     ; Main reading loop
(1)  580/     249 :                     ; --------------------------------
(1)  581/     249 :                     
(1)  582/     249 :                     .next_note:
(1)  583/     249 : FD 7E 10            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  584/     24C : B7                  		or	a
(1)  585/     24D : 20 16               		jr	nz,.decrow
(1)  586/     24F : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  587/     250 : B7                  		or	a
(1)  588/     251 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  589/     253 : FA 70 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  590/     256 : FD 77 10            		ld	(iy+trk_rowPause),a
(1)  591/     259 :                     
(1)  592/     259 :                     ; --------------------------------
(1)  593/     259 :                     ; Exit
(1)  594/     259 :                     ; --------------------------------
(1)  595/     259 :                     
(1)  596/     259 :                     .exit:
(1)  597/     259 : CF                  		rst	8
(1)  598/     25A : CD 2E 03            		call	.inc_cpatt
(1)  599/     25D : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  600/     260 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  601/     263 : 18 03               		jr	.decrow_e
(1)  602/     265 :                     .decrow:
(1)  603/     265 : FD 35 10            		dec	(iy+trk_rowPause)
(1)  604/     268 :                     .decrow_e:
(1)  605/     268 : 0B                  		dec	bc			; Decrement this row
(1)  606/     269 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  607/     26C : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  608/     26F : C9                  		ret
(1)  609/     270 :                     
(1)  610/     270 :                     ; --------------------------------
(1)  611/     270 :                     ; New note request
(1)  612/     270 :                     ; --------------------------------
(1)  613/     270 :                     
(1)  614/     270 :                     .has_note:
(1)  615/     270 : CF                  		rst	8
(1)  616/     271 : C5                  		push	bc			; Save rowcount
(1)  617/     272 : 4F                  		ld	c,a			; Backup control|channel to c
(1)  618/     273 : CD 2E 03            		call	.inc_cpatt		; Increment hl
(1)  619/     276 : 79                  		ld	a,c			; Read control|channel
(1)  620/     277 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  621/     27A : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  622/     27D : D5                  		push	de
(1)  623/     27E : DD E1               		pop	ix
(1)  624/     280 : E6 3F               		and	00111111b		; Filter channel bits
(1)  625/     282 : 87                  		add	a,a
(1)  626/     283 : 87                  		add	a,a
(1)  627/     284 : 87                  		add	a,a			; * 8
(1)  628/     285 : 16 00               		ld 	d,0
(1)  629/     287 : 5F                  		ld	e,a
(1)  630/     288 : CF                  		rst	8
(1)  631/     289 : DD 19               		add	ix,de
(1)  632/     28B : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  633/     28E : CB 71               		bit	6,c			; Next byte is new type?
(1)  634/     290 : 28 08               		jr	z,.old_type
(1)  635/     292 : 7E                  		ld	a,(hl)
(1)  636/     293 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  637/     296 : 47                  		ld	b,a			; Set to b
(1)  638/     297 : CD 2E 03            		call	.inc_cpatt
(1)  639/     29A :                     .old_type:
(1)  640/     29A :                     	; b - evinEVIN
(1)  641/     29A :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  642/     29A :                     	;     evin: byte is already stored on track-channel buffer
(1)  643/     29A :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  644/     29A : CF                  		rst	8
(1)  645/     29B : CB 40               		bit	0,b
(1)  646/     29D : 28 07               		jr	z,.no_note
(1)  647/     29F : 7E                  		ld	a,(hl)
(1)  648/     2A0 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  649/     2A3 : CD 2E 03            		call	.inc_cpatt
(1)  650/     2A6 :                     .no_note:
(1)  651/     2A6 : CB 48               		bit	1,b
(1)  652/     2A8 : 28 07               		jr	z,.no_ins
(1)  653/     2AA : 7E                  		ld	a,(hl)
(1)  654/     2AB : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  655/     2AE : CD 2E 03            		call	.inc_cpatt
(1)  656/     2B1 :                     .no_ins:
(1)  657/     2B1 : CB 50               		bit	2,b
(1)  658/     2B3 : 28 07               		jr	z,.no_vol
(1)  659/     2B5 : 7E                  		ld	a,(hl)
(1)  660/     2B6 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  661/     2B9 : CD 2E 03            		call	.inc_cpatt
(1)  662/     2BC :                     .no_vol:
(1)  663/     2BC : CB 58               		bit	3,b
(1)  664/     2BE : 28 0F               		jr	z,.no_eff
(1)  665/     2C0 : 7E                  		ld	a,(hl)
(1)  666/     2C1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  667/     2C4 : CD 2E 03            		call	.inc_cpatt
(1)  668/     2C7 : CF                  		rst	8
(1)  669/     2C8 : 7E                  		ld	a,(hl)
(1)  670/     2C9 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  671/     2CC : CD 2E 03            		call	.inc_cpatt
(1)  672/     2CF :                     .no_eff:
(1)  673/     2CF : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  674/     2D0 : 0F                  		rrca
(1)  675/     2D1 : 0F                  		rrca
(1)  676/     2D2 : 0F                  		rrca
(1)  677/     2D3 : 0F                  		rrca
(1)  678/     2D4 : E6 0F               		and	00001111b
(1)  679/     2D6 : 4F                  		ld	c,a
(1)  680/     2D7 : 78                  		ld	a,b
(1)  681/     2D8 : E6 0F               		and	00001111b
(1)  682/     2DA : B1                  		or	c
(1)  683/     2DB : CF                  		rst	8
(1)  684/     2DC : 4F                  		ld	c,a
(1)  685/     2DD : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  686/     2E0 : B1                  		or	c
(1)  687/     2E1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  688/     2E4 : C1                  		pop	bc		; Restore rowcount
(1)  689/     2E5 :                     
(1)  690/     2E5 :                     	; Check for effects that affect
(1)  691/     2E5 :                     	; internal playback:
(1)  692/     2E5 :                     	; Jump, Ticks, etc.
(1)  693/     2E5 : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  694/     2E7 : CA 49 02            		jp	z,.next_note
(1)  695/     2EA : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  696/     2ED : B7                  		or	a		; 00h = invalid effect
(1)  697/     2EE : CA 49 02            		jp	z,.next_note
(1)  698/     2F1 : FE 01               		cp	1		; Effect A: Tick set
(1)  699/     2F3 : CC 03 03            		call	z,.eff_A
(1)  700/     2F6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  701/     2F8 : CC 15 03            		call	z,.eff_B
(1)  702/     2FB : FE 03               		cp	3		; Effect C: Pattern break
(1)  703/     2FD : CA 2B 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  704/     300 : C3 49 02            		jp	.next_note
(1)  705/     303 :                     
(1)  706/     303 :                     ; ----------------------------------------
(1)  707/     303 :                     ; Effect A: Set ticks
(1)  708/     303 :                     ; ----------------------------------------
(1)  709/     303 :                     
(1)  710/     303 :                     .eff_A:
(1)  711/     303 : F5                  		push	af
(1)  712/     304 : CF                  		rst	8
(1)  713/     305 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  714/     308 : 1D                  		dec	e			; TODO: no minus protection
(1)  715/     309 : FD 73 03            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  716/     30C : FD 73 11            		ld	(iy+trk_tickTmr),e
(1)  717/     30F : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  718/     313 : F1                  		pop	af
(1)  719/     314 : C9                  		ret
(1)  720/     315 :                     
(1)  721/     315 :                     ; ----------------------------------------
(1)  722/     315 :                     ; Effect B: jump to a new block
(1)  723/     315 :                     ; ----------------------------------------
(1)  724/     315 :                     
(1)  725/     315 :                     .eff_B:
(1)  726/     315 : F5                  		push	af			; Save Flagbits
(1)  727/     316 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  728/     319 : FD 73 12            		ld 	(iy+trk_currBlk),e
(1)  729/     31C : CF                  		rst	8
(1)  730/     31D : FD 36 10 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  731/     321 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  732/     325 : FD CB 00 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  733/     329 : F1                  		pop	af
(1)  734/     32A : C9                  		ret
(1)  735/     32B :                     
(1)  736/     32B :                     ; ----------------------------------------
(1)  737/     32B :                     ; Effect C: Pattern break/exit
(1)  738/     32B :                     ;
(1)  739/     32B :                     ; Only used on SFX, arguments ignored.
(1)  740/     32B :                     ; ----------------------------------------
(1)  741/     32B :                     
(1)  742/     32B :                     .eff_C:
(1)  743/     32B : C3 CA 03            		jp	.track_end
(1)  744/     32E :                     
(1)  745/     32E :                     ; ----------------------------------------
(1)  746/     32E :                     ; Increment the current patt position
(1)  747/     32E :                     ; and recieve more data
(1)  748/     32E :                     ;
(1)  749/     32E :                     ; Breaks:
(1)  750/     32E :                     ; a,e
(1)  751/     32E :                     ; ----------------------------------------
(1)  752/     32E :                     
(1)  753/     32E :                     .inc_cpatt:
(1)  754/     32E : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  755/     331 : 7D                  		ld	a,l
(1)  756/     332 : 3C                  		inc	a
(1)  757/     333 : E6 3F               		and	MAX_RCACH-1
(1)  758/     335 : FE 3E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  759/     337 : 30 03               		jr	nc,.ran_out
(1)  760/     339 : B3                  		or	e
(1)  761/     33A : 6F                  		ld	l,a
(1)  762/     33B : C9                  		ret
(1)  763/     33C :                     .ran_out:
(1)  764/     33C : FD 6E 2E            		ld	l,(iy+trk_ChnCach)
(1)  765/     33F : E5                  		push	hl
(1)  766/     340 : C5                  		push	bc
(1)  767/     341 : 06 00               		ld	b,0
(1)  768/     343 : 4F                  		ld	c,a
(1)  769/     344 : CF                  		rst	8
(1)  770/     345 : 5D                  		ld	e,l
(1)  771/     346 : 54                  		ld	d,h
(1)  772/     347 : FD 6E 20            		ld	l,(iy+trk_RomCPatt)
(1)  773/     34A : FD 66 21            		ld	h,(iy+(trk_RomCPatt+1))
(1)  774/     34D : FD 7E 22            		ld	a,(iy+(trk_RomCPatt+2))
(1)  775/     350 : 09                  		add	hl,bc
(1)  776/     351 : CE 00               		adc	a,0
(1)  777/     353 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  778/     356 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  779/     359 : CF                  		rst	8
(1)  780/     35A : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  781/     35D : 01 40 00            		ld	bc,MAX_RCACH
(1)  782/     360 : CD 75 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  783/     363 : C1                  		pop	bc
(1)  784/     364 : E1                  		pop	hl
(1)  785/     365 : C9                  		ret
(1)  786/     366 :                     
(1)  787/     366 :                     ; ----------------------------------------
(1)  788/     366 :                     ; Set track pattern by trk_currBlk
(1)  789/     366 :                     ; ----------------------------------------
(1)  790/     366 :                     
(1)  791/     366 :                     .set_track:
(1)  792/     366 : CF                  		rst	8
(1)  793/     367 : 16 00               		ld	d,0
(1)  794/     369 : FD 5E 12            		ld	e,(iy+trk_currBlk)	; e - current block
(1)  795/     36C : FD 6E 04            		ld	l,(iy+trk_Blocks)	; hl - block data
(1)  796/     36F : FD 66 05            		ld	h,(iy+(trk_Blocks+1))
(1)  797/     372 : 19                  		add	hl,de
(1)  798/     373 : 7E                  		ld	a,(hl)			; Read byte
(1)  799/     374 : FE FF               		cp	-1			; If block == -1, end track
(1)  800/     376 : CA CA 03            		jp	z,.track_end
(1)  801/     379 : E7                  		rst	20h			; dacfill
(1)  802/     37A : 07                  		rlca
(1)  803/     37B : 07                  		rlca
(1)  804/     37C : 57                  		ld	d,a
(1)  805/     37D : E6 FC               		and	11111100b
(1)  806/     37F : 5F                  		ld	e,a
(1)  807/     380 : 7A                  		ld	a,d
(1)  808/     381 : E6 03               		and	00000011b
(1)  809/     383 : 57                  		ld	d,a
(1)  810/     384 : FD 6E 06            		ld	l,(iy+trk_Patt)		; Read CACHE patt heads
(1)  811/     387 : FD 66 07            		ld	h,(iy+(trk_Patt+1))
(1)  812/     38A : CF                  		rst	8
(1)  813/     38B : 19                  		add	hl,de
(1)  814/     38C : 5E                  		ld	e,(hl)			; de - Pos
(1)  815/     38D : 23                  		inc	hl
(1)  816/     38E : 56                  		ld	d,(hl)
(1)  817/     38F : 23                  		inc	hl
(1)  818/     390 : 7E                  		ld	a,(hl)
(1)  819/     391 : 23                  		inc	hl
(1)  820/     392 : FD 77 0C            		ld	(iy+trk_Rows),a
(1)  821/     395 : 7E                  		ld	a,(hl)
(1)  822/     396 : 23                  		inc	hl
(1)  823/     397 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1)  824/     39A : FD 6E 23            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1)  825/     39D : FD 66 24            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1)  826/     3A0 : CF                  		rst	8
(1)  827/     3A1 : FD 7E 25            		ld	a,(iy+(trk_RomPatt+2))
(1)  828/     3A4 : 19                  		add	hl,de
(1)  829/     3A5 : CE 00               		adc	a,0
(1)  830/     3A7 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  831/     3AA : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  832/     3AD : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  833/     3B0 : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  834/     3B3 : FD 56 2F            		ld	d,(iy+(trk_ChnCach+1))
(1)  835/     3B6 : CF                  		rst	8
(1)  836/     3B7 : FD 73 0A            		ld	(iy+trk_Read),e
(1)  837/     3BA : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1)  838/     3BD : 0E 40               		ld	c,MAX_RCACH
(1)  839/     3BF : FD 36 0E 00         		ld	(iy+trk_cachHalf),0
(1)  840/     3C3 : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  841/     3C7 : C3 75 0F            		jp	transferRom		; ** ROM access **
(1)  842/     3CA :                     
(1)  843/     3CA :                     ; ----------------------------------------
(1)  844/     3CA :                     ; **JUMP ONLY**
(1)  845/     3CA :                     
(1)  846/     3CA :                     .track_end:
(1)  847/     3CA : CD 93 04            		call	track_out
(1)  848/     3CD : CF                  		rst	8
(1)  849/     3CE : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  850/     3D2 : FD 36 11 00         		ld	(iy+trk_tickTmr),0
(1)  851/     3D6 : FD 36 00 00         		ld	(iy+trk_Status),0	; Disable track slot
(1)  852/     3DA : C9                  		ret
(1)  853/     3DB :                     
(1)  854/     3DB :                     ; ----------------------------------------
(1)  855/     3DB :                     ; Track refill
(1)  856/     3DB :                     ; ----------------------------------------
(1)  857/     3DB :                     
(1)  858/     3DB :                     .effect_fill:
(1)  859/     3DB : FD CB 00 AE         		res	5,(iy+trk_status)	; Reset refill-from-effect flag
(1)  860/     3DF : C3 66 03            		jp	.set_track
(1)  861/     3E2 :                     
(1)  862/     3E2 :                     ; ----------------------------------------
(1)  863/     3E2 :                     ; Track Start/Reset
(1)  864/     3E2 :                     ;
(1)  865/     3E2 :                     ; iy - Track buffer
(1)  866/     3E2 :                     ; ----------------------------------------
(1)  867/     3E2 :                     
(1)  868/     3E2 :                     .first_fill:
(1)  869/     3E2 :                     ; 		rst	20h
(1)  870/     3E2 : FD CB 00 B6         		res	6,(iy+trk_status)	; Reset FILL flag
(1)  871/     3E6 : CD 93 04            		call	track_out
(1)  872/     3E9 : FD 36 11 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1)  873/     3ED : FD 7E 02            		ld	a,(iy+trk_setBlk)	; Make start block as current block
(1)  874/     3F0 : CF                  		rst	8
(1)  875/     3F1 : FD 77 12            		ld 	(iy+trk_currBlk),a	; block
(1)  876/     3F4 : 11 00 00            		ld	de,0
(1)  877/     3F7 : 21 64 17            		ld	hl,trkListCach		; Read MASTER Nicona track list
(1)  878/     3FA : FD 7E 01            		ld	a,(iy+trk_seqId)
(1)  879/     3FD : E6 07               		and	00000111b		; Filter sequence bits
(1)  880/     3FF : 87                  		add	a,a			; *4
(1)  881/     400 : 87                  		add	a,a
(1)  882/     401 : 5F                  		ld	e,a
(1)  883/     402 : 19                  		add	hl,de
(1)  884/     403 : 7E                  		ld	a,(hl)
(1)  885/     404 : 23                  		inc	hl
(1)  886/     405 : CB 7F               		bit	7,a
(1)  887/     407 : 28 04               		jr	z,.no_glbl
(1)  888/     409 : FD CB 00 C6         		set	0,(iy+trk_status)	; Enable GLOBAL sub-beats
(1)  889/     40D :                     .no_glbl:
(1)  890/     40D : E6 7F               		and	01111111b
(1)  891/     40F : FD 77 03            		ld	(iy+trk_tickSet),a
(1)  892/     412 : 7E                  		ld	a,(hl)			; Read and temporally
(1)  893/     413 : 23                  		inc	hl			; grab it's pointers
(1)  894/     414 : 4E                  		ld	c,(hl)
(1)  895/     415 : CF                  		rst	8
(1)  896/     416 : 23                  		inc	hl
(1)  897/     417 : 6E                  		ld	l,(hl)
(1)  898/     418 : 61                  		ld	h,c
(1)  899/     419 : 11 95 17            		ld	de,headerOut
(1)  900/     41C : 0E 0C               		ld	c,0Ch
(1)  901/     41E : CD 75 0F            		call	transferRom		; ** ROM access **
(1)  902/     421 : DD 21 A0 17         		ld	ix,headerOut_e-1
(1)  903/     425 :                     
(1)  904/     425 :                     	; headerOut:
(1)  905/     425 :                     	; dc.l .blk,.pat,.ins
(1)  906/     425 :                     	; *** READING BACKWARDS
(1)  907/     425 : CD 7F 04            		call	.grab_rhead		; Instrument data
(1)  908/     428 : FD 4E 1F            		ld	c,(iy+trk_MaxIns)
(1)  909/     42B : CB 21               		sla	c			; *8
(1)  910/     42D : CB 21               		sla	c
(1)  911/     42F : CB 21               		sla	c
(1)  912/     431 : 78                  		ld	a,b
(1)  913/     432 : FD 5E 2C            		ld	e,(iy+trk_ChnCIns)
(1)  914/     435 : FD 56 2D            		ld	d,(iy+(trk_ChnCIns+1))
(1)  915/     438 : FD 73 08            		ld	(iy+trk_Instr),e
(1)  916/     43B : FD 72 09            		ld	(iy+(trk_Instr+1)),d
(1)  917/     43E : CF                  		rst	8
(1)  918/     43F : CD 75 0F            		call	transferRom		; ** ROM access **
(1)  919/     442 : CD 7F 04            		call	.grab_rhead		; Pattern data
(1)  920/     445 : FD 4E 1E            		ld	c,(iy+trk_MaxHdrs)
(1)  921/     448 : CB 21               		sla	c			; *4
(1)  922/     44A : CB 21               		sla	c
(1)  923/     44C : 78                  		ld	a,b
(1)  924/     44D : FD 75 23            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1)  925/     450 : FD 74 24            		ld	(iy+(trk_RomPatt+1)),h
(1)  926/     453 : FD 77 25            		ld	(iy+(trk_RomPatt+2)),a
(1)  927/     456 : CF                  		rst	8
(1)  928/     457 : FD 5E 2A            		ld	e,(iy+trk_ChnCHead)
(1)  929/     45A : FD 56 2B            		ld	d,(iy+(trk_ChnCHead+1))
(1)  930/     45D : FD 73 06            		ld	(iy+trk_Patt),e
(1)  931/     460 : FD 72 07            		ld	(iy+(trk_Patt+1)),d
(1)  932/     463 : CD 75 0F            		call	transferRom		; ** ROM access **
(1)  933/     466 : CD 7F 04            		call	.grab_rhead		; Block data
(1)  934/     469 : FD 4E 1D            		ld	c,(iy+trk_MaxBlks)
(1)  935/     46C : 78                  		ld	a,b
(1)  936/     46D : FD 5E 28            		ld	e,(iy+trk_ChnCBlk)
(1)  937/     470 : FD 56 29            		ld	d,(iy+(trk_ChnCBlk+1))
(1)  938/     473 : FD 73 04            		ld	(iy+trk_Blocks),e
(1)  939/     476 : FD 72 05            		ld	(iy+(trk_Blocks+1)),d
(1)  940/     479 : CD 75 0F            		call	transferRom		; ** ROM access **
(1)  941/     47C : C3 66 03            		jp	.set_track
(1)  942/     47F :                     
(1)  943/     47F :                     ; Read 68K pointer:
(1)  944/     47F :                     ; hl - 00xxxx
(1)  945/     47F :                     ;  b - xx0000
(1)  946/     47F :                     .grab_rhead:
(1)  947/     47F : DD 6E 00            		ld	l,(ix)
(1)  948/     482 : DD 2B               		dec	ix
(1)  949/     484 : CF                  		rst	8
(1)  950/     485 : DD 66 00            		ld	h,(ix)
(1)  951/     488 : DD 2B               		dec	ix
(1)  952/     48A : DD 46 00            		ld	b,(ix)
(1)  953/     48D : DD 2B               		dec	ix
(1)  954/     48F :                     ; 		ld	c,(ix)
(1)  955/     48F : CF                  		rst	8
(1)  956/     490 : DD 2B               		dec	ix
(1)  957/     492 : C9                  		ret
(1)  958/     493 :                     
(1)  959/     493 :                     ; ----------------------------------------
(1)  960/     493 :                     ; Reset tracker channels
(1)  961/     493 :                     ;
(1)  962/     493 :                     ; iy - Track buffer
(1)  963/     493 :                     ;
(1)  964/     493 :                     ; Breaks:
(1)  965/     493 :                     ; ix
(1)  966/     493 :                     ; ----------------------------------------
(1)  967/     493 :                     
(1)  968/     493 :                     ; ----------------------------------------
(1)  969/     493 :                     ; Reset tracker channels
(1)  970/     493 :                     ;
(1)  971/     493 :                     ; iy - Track buffer
(1)  972/     493 :                     ;
(1)  973/     493 :                     ; Breaks:
(1)  974/     493 :                     ; de,ix
(1)  975/     493 :                     ; ----------------------------------------
(1)  976/     493 :                     
(1)  977/     493 :                     track_out:
(1)  978/     493 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  979/     496 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  980/     499 : D5                  		push	de
(1)  981/     49A : DD E1               		pop	ix
(1)  982/     49C : CF                  		rst	8
(1)  983/     49D : 11 08 00            		ld	de,8
(1)  984/     4A0 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	; MAX_TRKCHN
(1)  985/     4A3 : AF                  		xor	a
(1)  986/     4A4 :                     .clrfe:
(1)  987/     4A4 : DD 7E 01            		ld	a,(ix+chnl_Chip)
(1)  988/     4A7 : B7                  		or	a
(1)  989/     4A8 : 28 1D               		jr	z,.nochip
(1)  990/     4AA : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1)  991/     4AE : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1)  992/     4B2 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1)  993/     4B6 : CF                  		rst	8
(1)  994/     4B7 : FD 36 05 00         		ld	(iy+chnl_EffId),0
(1)  995/     4BB : FD 36 06 00         		ld	(iy+chnl_EffArg),0
(1)  996/     4BF : FD 36 03 00         		ld	(iy+chnl_Ins),0
(1)  997/     4C3 : FD 36 07 00         		ld	(iy+chnl_Type),0
(1)  998/     4C7 :                     .nochip:
(1)  999/     4C7 : DD 19               		add	ix,de
(1) 1000/     4C9 : 10 D9               		djnz	.clrfe
(1) 1001/     4CB : 3E 01               		ld	a,1
(1) 1002/     4CD : 32 3F 00            		ld	(marsUpd),a
(1) 1003/     4D0 : C9                  		ret
(1) 1004/     4D1 :                     
(1) 1005/     4D1 :                     ; ----------------------------------------
(1) 1006/     4D1 :                     ; Load tracklist from ROM
(1) 1007/     4D1 :                     ;
(1) 1008/     4D1 :                     ; a - SeqID
(1) 1009/     4D1 :                     ; ----------------------------------------
(1) 1010/     4D1 :                     
(1) 1011/     4D1 :                     get_RomTrcks:
(1) 1012/     4D1 : E6 F8               		and	11111000b
(1) 1013/     4D3 : 5F                  		ld	e,a
(1) 1014/     4D4 : 3A 3E 00            		ld	a,(trkListPage)
(1) 1015/     4D7 : BB                  		cp	e
(1) 1016/     4D8 : C8                  		ret	z
(1) 1017/     4D9 :                     init_RomTrcks:
(1) 1018/     4D9 : 7B                  		ld	a,e
(1) 1019/     4DA : 32 3E 00            		ld	(trkListPage),a
(1) 1020/     4DD : 07                  		rlca
(1) 1021/     4DE : 07                  		rlca			; 10h*4=40h
(1) 1022/     4DF : 57                  		ld	d,a
(1) 1023/     4E0 : E6 E0               		and	11100000b
(1) 1024/     4E2 : 5F                  		ld	e,a
(1) 1025/     4E3 : 7A                  		ld	a,d
(1) 1026/     4E4 : CF                  		rst	8
(1) 1027/     4E5 : E6 03               		and	00000011b	; * 40h
(1) 1028/     4E7 : 57                  		ld	d,a
(1) 1029/     4E8 : 21 D6 14            		ld	hl,nikona_SetMstrList
(1) 1030/     4EB : 23                  		inc	hl
(1) 1031/     4EC : 7E                  		ld	a,(hl)
(1) 1032/     4ED : 23                  		inc	hl
(1) 1033/     4EE : 4E                  		ld	c,(hl)
(1) 1034/     4EF : 23                  		inc	hl
(1) 1035/     4F0 : 6E                  		ld	l,(hl)
(1) 1036/     4F1 : CF                  		rst	8
(1) 1037/     4F2 : 61                  		ld	h,c
(1) 1038/     4F3 : 19                  		add	hl,de
(1) 1039/     4F4 : CE 00               		adc	a,0
(1) 1040/     4F6 : 11 64 17            		ld	de,trkListCach
(1) 1041/     4F9 : 01 20 00            		ld	bc,4*8
(1) 1042/     4FC : C3 75 0F            		jp	transferRom	; *** ROM ACCESS ***
(1) 1043/     4FF :                     
(1) 1044/     4FF :                     ; ============================================================
(1) 1045/     4FF :                     ; --------------------------------------------------------
(1) 1046/     4FF :                     ; Convert notes to soundchips
(1) 1047/     4FF :                     ; --------------------------------------------------------
(1) 1048/     4FF :                     
(1) 1049/     4FF :                     set_chips:
(1) 1050/     4FF : E7                  		rst	20h			; Refill wave
(1) 1051/     500 : CD 34 0F            		call	get_tick
(1) 1052/     503 : FD 21 A4 14         		ld	iy,nikona_BuffList
(1) 1053/     507 :                     .trk_buffrs:
(1) 1054/     507 : CF                  		rst	8
(1) 1055/     508 : FD 7E 00            		ld	a,(iy)
(1) 1056/     50B : FE FF               		cp	-1
(1) 1057/     50D : 28 15               		jr	z,proc_chips
(1) 1058/     50F : FD E5               		push	iy
(1) 1059/     511 : FD 6E 00            		ld	l,(iy)
(1) 1060/     514 : FD 66 01            		ld	h,(iy+1)
(1) 1061/     517 : CD 44 05            		call	tblbuff_read
(1) 1062/     51A : CF                  		rst	8
(1) 1063/     51B : FD E1               		pop	iy
(1) 1064/     51D : 11 10 00            		ld	de,10h
(1) 1065/     520 : FD 19               		add	iy,de
(1) 1066/     522 : 18 E3               		jr	.trk_buffrs
(1) 1067/     524 :                     proc_chips:
(1) 1068/     524 : E7                  		rst	20h
(1) 1069/     525 : FD 21 1C 15         		ld	iy,tblPSGN		; PSG Noise (FIRST)
(1) 1070/     529 : CD E7 06            		call	dtbl_singl
(1) 1071/     52C : 00                  		nop	; sync
(1) 1072/     52D : 00                  		nop
(1) 1073/     52E : FD 21 EA 14         		ld	iy,tblPSG		; PSG Squares
(1) 1074/     532 : CD D1 06            		call	dtbl_multi
(1) 1075/     535 : FD 21 2C 15         		ld	iy,tblFM
(1) 1076/     539 : CD D1 06            		call	dtbl_multi
(1) 1077/     53C : FD 21 8E 15         		ld	iy,tblPWM
(1) 1078/     540 : CD D1 06            		call	dtbl_multi
(1) 1079/     543 : C9                  		ret
(1) 1080/     544 :                     
(1) 1081/     544 :                     ; ----------------------------------------
(1) 1082/     544 :                     ; Read current track
(1) 1083/     544 :                     tblbuff_read:
(1) 1084/     544 : E5                  		push	hl
(1) 1085/     545 : FD E1               		pop	iy
(1) 1086/     547 : FD 46 00            		ld	b,(iy+trk_status)	; bit7: Track active?
(1) 1087/     54A : CB 78               		bit	7,b
(1) 1088/     54C : C8                  		ret	z
(1) 1089/     54D :                     ; 		ret
(1) 1090/     54D :                     ; .go_read:
(1) 1091/     54D : 78                  		ld	a,b			; trk_Status == -1?
(1) 1092/     54E : FE FF               		cp	-1
(1) 1093/     550 : C2 5A 05            		jp	nz,.track_cont
(1) 1094/     553 : CD 93 04            		call	track_out
(1) 1095/     556 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1096/     55A :                     .track_cont:
(1) 1097/     55A : CF                  		rst	8
(1) 1098/     55B : FD 6E 26            		ld	l,(iy+trk_ChnList)
(1) 1099/     55E : FD 66 27            		ld	h,(iy+(trk_ChnList+1))
(1) 1100/     561 : E5                  		push	hl
(1) 1101/     562 : DD E1               		pop	ix			; iy - channel list
(1) 1102/     564 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	;MAX_TRKCHN
(1) 1103/     567 :                     
(1) 1104/     567 :                     ; ** Needs special delays to
(1) 1105/     567 :                     ; keep the samplerate
(1) 1106/     567 :                     .next_chnl:
(1) 1107/     567 : C5                  		push	bc
(1) 1108/     568 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1109/     56B : E6 0F               		and	00001111b
(1) 1110/     56D : C4 7A 05            		call	nz,.do_chip
(1) 1111/     570 : C1                  		pop	bc
(1) 1112/     571 : 11 08 00            		ld	de,8
(1) 1113/     574 : DD 19               		add	ix,de
(1) 1114/     576 : CF                  		rst	8	; wave sync
(1) 1115/     577 : 10 EE               		djnz	.next_chnl
(1) 1116/     579 : C9                  		ret
(1) 1117/     57A :                     
(1) 1118/     57A :                     ; ----------------------------------------
(1) 1119/     57A :                     ; iy - Track buffer
(1) 1120/     57A :                     ; ix - Current channel
(1) 1121/     57A :                     
(1) 1122/     57A :                     .do_chip:
(1) 1123/     57A : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1124/     57D : B7                  		or	a
(1) 1125/     57E : C8                  		ret	z
(1) 1126/     57F : FD 56 1F            		ld	d,(iy+trk_MaxIns)
(1) 1127/     582 : BA                  		cp	d
(1) 1128/     583 : C8                  		ret	z
(1) 1129/     584 : D0                  		ret	nc
(1) 1130/     585 : 3D                  		dec	a			; ins-1
(1) 1131/     586 : 0F                  		rrca				; * 08h
(1) 1132/     587 : 0F                  		rrca
(1) 1133/     588 : 0F                  		rrca
(1) 1134/     589 : 0F                  		rrca
(1) 1135/     58A : CF                  		rst	8
(1) 1136/     58B : 0F                  		rrca
(1) 1137/     58C : 57                  		ld	d,a
(1) 1138/     58D : E6 F8               		and	11111000b
(1) 1139/     58F : 5F                  		ld	e,a
(1) 1140/     590 : 7A                  		ld	a,d
(1) 1141/     591 : E6 07               		and	00000111b
(1) 1142/     593 : 57                  		ld	d,a
(1) 1143/     594 : FD 6E 08            		ld	l,(iy+trk_Instr)	; hl - Intrument data
(1) 1144/     597 : FD 66 09            		ld	h,(iy+(trk_Instr+1))
(1) 1145/     59A : 7B                  		ld	a,e
(1) 1146/     59B : 19                  		add	hl,de
(1) 1147/     59C : CF                  		rst	8
(1) 1148/     59D : E5                  		push	hl			; <-- save ins pos
(1) 1149/     59E : CD B0 05            		call	.grab_link
(1) 1150/     5A1 : D1                  		pop	de			; --> recover as de
(1) 1151/     5A2 : FE FF               		cp	-1			; Found any link?
(1) 1152/     5A4 : C8                  		ret	z
(1) 1153/     5A5 : FD 7E 14            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1154/     5A8 : 23                  		inc	hl			; Skip link
(1) 1155/     5A9 : 23                  		inc	hl
(1) 1156/     5AA : 77                  		ld	(hl),a			; Write priority
(1) 1157/     5AB : 23                  		inc	hl
(1) 1158/     5AC : 73                  		ld	(hl),e			; Write Instrument pointer
(1) 1159/     5AD : 23                  		inc	hl
(1) 1160/     5AE : 72                  		ld	(hl),d
(1) 1161/     5AF : C9                  		ret
(1) 1162/     5B0 :                     
(1) 1163/     5B0 :                     ; ----------------------------------------
(1) 1164/     5B0 :                     ; Search for a linked channel on the
(1) 1165/     5B0 :                     ; chip table
(1) 1166/     5B0 :                     ;
(1) 1167/     5B0 :                     ; Input:
(1) 1168/     5B0 :                     ; iy - Track buffer
(1) 1169/     5B0 :                     ; ix - Current channel
(1) 1170/     5B0 :                     ; hl - Intrument position
(1) 1171/     5B0 :                     ;
(1) 1172/     5B0 :                     ; Returns:
(1) 1173/     5B0 :                     ; hl - Channel table to use
(1) 1174/     5B0 :                     ;  a - Return value:
(1) 1175/     5B0 :                     ;       0 - Found
(1) 1176/     5B0 :                     ;      -1 - Not found
(1) 1177/     5B0 :                     ; ----------------------------------------
(1) 1178/     5B0 :                     
(1) 1179/     5B0 :                     .grab_link:
(1) 1180/     5B0 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1181/     5B1 : E6 F0               		and	11110000b		; Filter 0F0h
(1) 1182/     5B3 : F2 9C 06            		jp	p,.set_asfull		; Set -1 if non-minus.
(1) 1183/     5B6 : 5F                  		ld	e,a			; Save NEW chip to e
(1) 1184/     5B7 : CF                  		rst	8
(1) 1185/     5B8 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - check OUR chip
(1) 1186/     5BB : E6 F0               		and	11110000b		; Filter bits too.
(1) 1187/     5BD : CA 34 06            		jp	z,.new_chip		; If zero: Set NEW chip
(1) 1188/     5C0 : BB                  		cp 	e
(1) 1189/     5C1 : CA D7 05            		jp	z,.srch_link		; If same: Grab our link
(1) 1190/     5C4 : 57                  		ld	d,a			; d - OLD chip
(1) 1191/     5C5 : D5                  		push	de
(1) 1192/     5C6 : CD D7 05            		call	.srch_link		; Search our link (first)
(1) 1193/     5C9 : D1                  		pop	de
(1) 1194/     5CA : FE FF               		cp	-1
(1) 1195/     5CC : C8                  		ret	z
(1) 1196/     5CD : CD B9 06            		call	.reset_link
(1) 1197/     5D0 : DD 36 01 00         		ld	(ix+chnl_Chip),0
(1) 1198/     5D4 : C3 33 06            		jp	.do_newchip
(1) 1199/     5D7 :                     
(1) 1200/     5D7 :                     ; ** RELINK **
(1) 1201/     5D7 :                     ; e - Our current chip
(1) 1202/     5D7 :                     .srch_link:
(1) 1203/     5D7 : CD 9F 06            		call	.pick_tbl	; Pick our table
(1) 1204/     5DA : B7                  		or	a
(1) 1205/     5DB : FA 20 06            		jp	m,.singl_link
(1) 1206/     5DE : DD E5               		push	ix		; copy ix to bc
(1) 1207/     5E0 : C1                  		pop	bc
(1) 1208/     5E1 :                     .srch_lloop:
(1) 1209/     5E1 : CF                  		rst	8
(1) 1210/     5E2 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1211/     5E3 : FE FF               		cp	-1		; If -1, return -1
(1) 1212/     5E5 : 28 49               		jr	z,.refill
(1) 1213/     5E7 : B9                  		cp	c
(1) 1214/     5E8 : 20 07               		jr	nz,.invldl
(1) 1215/     5EA : 23                  		inc	hl
(1) 1216/     5EB : CF                  		rst	8
(1) 1217/     5EC : 7E                  		ld	a,(hl)
(1) 1218/     5ED : 2B                  		dec	hl
(1) 1219/     5EE : B8                  		cp	b
(1) 1220/     5EF : 28 09               		jr	z,.reroll
(1) 1221/     5F1 :                     .invldl:
(1) 1222/     5F1 : D5                  		push	de
(1) 1223/     5F2 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1224/     5F5 : CF                  		rst	8
(1) 1225/     5F6 : 19                  		add	hl,de
(1) 1226/     5F7 : D1                  		pop	de
(1) 1227/     5F8 : 18 E7               		jr	.srch_lloop
(1) 1228/     5FA :                     .reroll:
(1) 1229/     5FA :                     	; *** Special re-roll check ***
(1) 1230/     5FA : E5                  		push	hl
(1) 1231/     5FB : 01 05 00            		ld	bc,5		; <-- fake "iy+05h"
(1) 1232/     5FE : 09                  		add	hl,bc
(1) 1233/     5FF : 4E                  		ld	c,(hl)		; c - ID
(1) 1234/     600 : E1                  		pop	hl
(1) 1235/     601 : 7B                  		ld	a,e
(1) 1236/     602 : FE 80               		cp	80h		; PSG?
(1) 1237/     604 : 28 02               		jr	z,.chk_psg
(1) 1238/     606 :                     ; 		cp	0A0h		; FM normal?
(1) 1239/     606 :                     ; 		jr	z,.chk_fm
(1) 1240/     606 : 18 26               		jr	.rnot_psg
(1) 1241/     608 :                     .chk_psg:
(1) 1242/     608 : 3A 93 17            		ld	a,(psgHatMode)
(1) 1243/     60B : E6 03               		and	011b
(1) 1244/     60D : FE 03               		cp	011b
(1) 1245/     60F : 20 1D               		jr	nz,.rnot_psg
(1) 1246/     611 : 79                  		ld	a,c
(1) 1247/     612 : FE 02               		cp	2
(1) 1248/     614 : 20 18               		jr	nz,.rnot_psg
(1) 1249/     616 : CF                  		rst	8
(1) 1250/     617 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1251/     619 : CD B9 06            		call	.reset_link	; on PSG3
(1) 1252/     61C : C3 9C 06            		jp	.set_asfull
(1) 1253/     61F : 00                  		nop
(1) 1254/     620 :                     
(1) 1255/     620 :                     ; ----------------------
(1) 1256/     620 :                     ; PSGN/FM3/FM6
(1) 1257/     620 :                     .singl_link:
(1) 1258/     620 : DD E5               		push	ix			; copy ix to bc
(1) 1259/     622 : C1                  		pop	bc
(1) 1260/     623 : 23                  		inc	hl			; Read MSB first
(1) 1261/     624 : CF                  		rst	8
(1) 1262/     625 : 7E                  		ld	a,(hl)
(1) 1263/     626 : 2B                  		dec	hl
(1) 1264/     627 : B8                  		cp	b			; MSB match?
(1) 1265/     628 : 20 06               		jr	nz,.refill
(1) 1266/     62A : 7E                  		ld	a,(hl)			; Read LSB
(1) 1267/     62B : B9                  		cp	c
(1) 1268/     62C : 20 02               		jr	nz,.refill
(1) 1269/     62E :                     
(1) 1270/     62E :                     ; ----------------------
(1) 1271/     62E :                     
(1) 1272/     62E :                     .rnot_psg:
(1) 1273/     62E : AF                  		xor	a
(1) 1274/     62F : C9                  		ret
(1) 1275/     630 :                     ; ***
(1) 1276/     630 :                     .refill:
(1) 1277/     630 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1278/     633 :                     .do_newchip:
(1) 1279/     633 : 7B                  		ld	a,e
(1) 1280/     634 :                     
(1) 1281/     634 :                     ; *** NEW CHIP ***
(1) 1282/     634 :                     ; e - Chip to set
(1) 1283/     634 :                     .new_chip:
(1) 1284/     634 : 7B                  		ld	a,e			; Read NEW chip
(1) 1285/     635 : B7                  		or	a			; If non-minus, exit.
(1) 1286/     636 : F0                  		ret	p
(1) 1287/     637 : CD 9F 06            		call	.pick_tbl
(1) 1288/     63A : CF                  		rst	8
(1) 1289/     63B : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1290/     63E : B7                  		or	a
(1) 1291/     63F : FA 8A 06            		jp	m,.singl_free
(1) 1292/     642 : E5                  		push	hl			; Backup START table
(1) 1293/     643 :                     ; PASS 1
(1) 1294/     643 :                     .srch_free:
(1) 1295/     643 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1296/     644 : FE FF               		cp	-1			; If -1, return -1
(1) 1297/     646 : 28 0C               		jr	z,.pass_2
(1) 1298/     648 : 23                  		inc	hl
(1) 1299/     649 : 46                  		ld	b,(hl)			; Read MSB
(1) 1300/     64A : CF                  		rst	8
(1) 1301/     64B : 2B                  		dec	hl
(1) 1302/     64C : B0                  		or	b
(1) 1303/     64D : 28 26               		jr	z,.new_link_z
(1) 1304/     64F : CD 6B 06            		call	.nextsrch_tbl
(1) 1305/     652 : 18 EF               		jr	.srch_free
(1) 1306/     654 :                     ; PASS 2
(1) 1307/     654 :                     .pass_2:
(1) 1308/     654 : CF                  		rst	8
(1) 1309/     655 : E1                  		pop	hl
(1) 1310/     656 :                     .next_prio:
(1) 1311/     656 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1312/     657 : FE FF               		cp	-1		; If -1, return -1
(1) 1313/     659 : C8                  		ret	z
(1) 1314/     65A : 23                  		inc	hl
(1) 1315/     65B : 23                  		inc	hl
(1) 1316/     65C : 7E                  		ld	a,(hl)
(1) 1317/     65D : 2B                  		dec	hl
(1) 1318/     65E : 2B                  		dec	hl
(1) 1319/     65F : B9                  		cp	c
(1) 1320/     660 : 38 17               		jr	c,.new_link_o
(1) 1321/     662 : B7                  		or	a
(1) 1322/     663 : 28 14               		jr	z,.new_link
(1) 1323/     665 : CF                  		rst	8
(1) 1324/     666 : CD 6B 06            		call	.nextsrch_tbl
(1) 1325/     669 : 18 EB               		jr	.next_prio
(1) 1326/     66B :                     
(1) 1327/     66B :                     .nextsrch_tbl:
(1) 1328/     66B : D5                  		push	de
(1) 1329/     66C : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1330/     66F : 19                  		add	hl,de
(1) 1331/     670 : D1                  		pop	de
(1) 1332/     671 : CF                  		rst	8
(1) 1333/     672 : 00                  		nop	; wave sync
(1) 1334/     673 : 00                  		nop
(1) 1335/     674 : C9                  		ret
(1) 1336/     675 :                     .new_link_z:
(1) 1337/     675 : 33                  		inc	sp		; skip backup
(1) 1338/     676 : 33                  		inc	sp
(1) 1339/     677 : 18 00               		jr	.new_link
(1) 1340/     679 :                     
(1) 1341/     679 :                     ; OVERWRITE link
(1) 1342/     679 :                     .new_link_o:
(1) 1343/     679 :                     
(1) 1344/     679 :                     ; NEW link
(1) 1345/     679 :                     .new_link:
(1) 1346/     679 : CF                  		rst	8
(1) 1347/     67A : 23                  		inc	hl
(1) 1348/     67B : 23                  		inc	hl
(1) 1349/     67C :                     ; hl+2
(1) 1350/     67C :                     .l_hiprio:
(1) 1351/     67C : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1352/     67F : DD E5               		push	ix
(1) 1353/     681 : D1                  		pop	de
(1) 1354/     682 : CF                  		rst	8
(1) 1355/     683 : 71                  		ld	(hl),c		; write priority
(1) 1356/     684 : 2B                  		dec	hl		; -1
(1) 1357/     685 : 72                  		ld 	(hl),d		; MSB
(1) 1358/     686 : 2B                  		dec	hl
(1) 1359/     687 : 73                  		ld	(hl),e		; LSB
(1) 1360/     688 : AF                  		xor	a
(1) 1361/     689 : C9                  		ret
(1) 1362/     68A :                     ; Single slot
(1) 1363/     68A :                     .singl_free:
(1) 1364/     68A : CF                  		rst	8
(1) 1365/     68B : 46                  		ld	b,(hl)
(1) 1366/     68C : 23                  		inc	hl
(1) 1367/     68D : 7E                  		ld	a,(hl)
(1) 1368/     68E : 23                  		inc	hl
(1) 1369/     68F : B0                  		or	b
(1) 1370/     690 : 28 EA               		jr	z,.l_hiprio
(1) 1371/     692 : 7E                  		ld	a,(hl)
(1) 1372/     693 : B9                  		cp	c
(1) 1373/     694 : 28 E6               		jr	z,.l_hiprio
(1) 1374/     696 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1375/     698 : B7                  		or	a
(1) 1376/     699 : 28 E1               		jr	z,.l_hiprio
(1) 1377/     69B :                     .sngl_sprio:
(1) 1378/     69B : CF                  		rst	8
(1) 1379/     69C :                     
(1) 1380/     69C :                     ; Set "can't use" table flag
(1) 1381/     69C :                     .set_asfull:
(1) 1382/     69C : 3E FF               		ld	a,-1
(1) 1383/     69E : C9                  		ret
(1) 1384/     69F :                     
(1) 1385/     69F :                     ; Pick chip table
(1) 1386/     69F :                     ; In:
(1) 1387/     69F :                     ;  e - ID
(1) 1388/     69F :                     ;
(1) 1389/     69F :                     ; Out:
(1) 1390/     69F :                     ; hl - Table
(1) 1391/     69F :                     .pick_tbl:
(1) 1392/     69F : D5                  		push	de
(1) 1393/     6A0 : 0F                  		rrca
(1) 1394/     6A1 : 0F                  		rrca
(1) 1395/     6A2 : 0F                  		rrca
(1) 1396/     6A3 : 0F                  		rrca
(1) 1397/     6A4 : E6 07               		and	00000111b
(1) 1398/     6A6 : 87                  		add	a,a
(1) 1399/     6A7 : 21 DA 14            		ld	hl,tblList
(1) 1400/     6AA : E5                  		push	hl
(1) 1401/     6AB : 16 00               		ld	d,0
(1) 1402/     6AD : 5F                  		ld	e,a
(1) 1403/     6AE : 19                  		add	hl,de
(1) 1404/     6AF : 5E                  		ld	e,(hl)
(1) 1405/     6B0 : 23                  		inc	hl
(1) 1406/     6B1 : 7E                  		ld	a,(hl)
(1) 1407/     6B2 : 57                  		ld	d,a
(1) 1408/     6B3 : CB BA               		res	7,d
(1) 1409/     6B5 : E1                  		pop	hl
(1) 1410/     6B6 : 19                  		add	hl,de
(1) 1411/     6B7 : D1                  		pop	de
(1) 1412/     6B8 : C9                  		ret
(1) 1413/     6B9 :                     
(1) 1414/     6B9 :                     ; d - Silence chip
(1) 1415/     6B9 :                     ;
(1) 1416/     6B9 :                     ; Uses:
(1) 1417/     6B9 :                     ; bc
(1) 1418/     6B9 :                     .reset_link:
(1) 1419/     6B9 : CF                  		rst	8
(1) 1420/     6BA : 36 00               		ld	(hl),0			; Delete link
(1) 1421/     6BC : 23                  		inc	hl
(1) 1422/     6BD : 36 00               		ld	(hl),0
(1) 1423/     6BF : 23                  		inc	hl
(1) 1424/     6C0 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1425/     6C1 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1426/     6C4 : 09                  		add	hl,bc
(1) 1427/     6C5 : 06 04               		ld	b,8/2
(1) 1428/     6C7 :                     .clrfull:
(1) 1429/     6C7 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1430/     6C9 : 23                  		inc	hl
(1) 1431/     6CA : 36 00               		ld	(hl),0
(1) 1432/     6CC : 23                  		inc	hl
(1) 1433/     6CD : CF                  		rst	8
(1) 1434/     6CE : 10 F7               		djnz	.clrfull
(1) 1435/     6D0 : C9                  		ret
(1) 1436/     6D1 :                     
(1) 1437/     6D1 :                     ; ============================================
(1) 1438/     6D1 :                     ; ----------------------------------------
(1) 1439/     6D1 :                     ; Process chip using it's table
(1) 1440/     6D1 :                     ;
(1) 1441/     6D1 :                     ; iy - table to read
(1) 1442/     6D1 :                     ;  c - Chip ID
(1) 1443/     6D1 :                     ; ----------------------------------------
(1) 1444/     6D1 :                     
(1) 1445/     6D1 :                     dtbl_multi:
(1) 1446/     6D1 : FD 7E 00            		ld	a,(iy)
(1) 1447/     6D4 : FE FF               		cp	-1
(1) 1448/     6D6 : C8                  		ret	z
(1) 1449/     6D7 : CD E8 06            		call	dtbl_frommul
(1) 1450/     6DA : CF                  		rst	8
(1) 1451/     6DB : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1452/     6DE : FD 19               		add	iy,de
(1) 1453/     6E0 : 00                  		nop	; WAVE SYNC
(1) 1454/     6E1 : 00                  		nop
(1) 1455/     6E2 : 00                  		nop
(1) 1456/     6E3 : 00                  		nop
(1) 1457/     6E4 : CF                  		rst	8
(1) 1458/     6E5 : 18 EA               		jr	dtbl_multi
(1) 1459/     6E7 :                     dtbl_singl:
(1) 1460/     6E7 : CF                  		rst	8
(1) 1461/     6E8 :                     
(1) 1462/     6E8 :                     dtbl_frommul:
(1) 1463/     6E8 : FD 5E 00            		ld	e,(iy)
(1) 1464/     6EB : FD 56 01            		ld	d,(iy+1)
(1) 1465/     6EE : 7A                  		ld	a,d
(1) 1466/     6EF : B3                  		or	e
(1) 1467/     6F0 : 20 53               		jr	nz,.linked
(1) 1468/     6F2 : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1469/     6F5 : B7                  		or	a
(1) 1470/     6F6 : F0                  		ret	p
(1) 1471/     6F7 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1472/     6FA : CF                  		rst	8
(1) 1473/     6FB : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1474/     6FF :                     
(1) 1475/     6FF :                     ; ----------------------------------------
(1) 1476/     6FF :                     ; chip-silence request
(1) 1477/     6FF :                     ; iy - Table
(1) 1478/     6FF : E6 F0               		and	11110000b
(1) 1479/     701 : FE 80               		cp	80h
(1) 1480/     703 : 28 1A               		jr	z,.siln_psg
(1) 1481/     705 : FE 90               		cp	90h
(1) 1482/     707 : 28 12               		jr	z,.siln_psg_n
(1) 1483/     709 : FE A0               		cp	0A0h
(1) 1484/     70B : 28 1C               		jr	z,.siln_fm
(1) 1485/     70D : FE B0               		cp	0B0h
(1) 1486/     70F : 28 18               		jr	z,.siln_fm
(1) 1487/     711 : CF                  		rst	8
(1) 1488/     712 : FE C0               		cp	0C0h
(1) 1489/     714 : 28 10               		jr	z,.siln_dac
(1) 1490/     716 : FE D0               		cp	0D0h
(1) 1491/     718 : 28 15               		jr	z,.siln_pwm
(1) 1492/     71A : C9                  		ret
(1) 1493/     71B :                     .siln_psg_n:
(1) 1494/     71B : AF                  		xor	a
(1) 1495/     71C : 32 93 17            		ld	(psgHatMode),a
(1) 1496/     71F :                     .siln_psg:
(1) 1497/     71F : CF                  		rst	8
(1) 1498/     720 : DD 21 28 17         		ld	ix,psgcom
(1) 1499/     724 : 18 13               		jr	.rcyl_com
(1) 1500/     726 :                     
(1) 1501/     726 :                     ; --------------------------------
(1) 1502/     726 :                     
(1) 1503/     726 :                     .siln_dac:
(1) 1504/     726 : CD 8D 11            		call	dac_off
(1) 1505/     729 :                     .siln_fm:
(1) 1506/     729 : CD D2 0C            		call	.fm_keyoff
(1) 1507/     72C : C3 DA 0C            		jp	.fm_tloff
(1) 1508/     72F :                     
(1) 1509/     72F :                     ; --------------------------------
(1) 1510/     72F :                     
(1) 1511/     72F :                     .siln_pwm:
(1) 1512/     72F : 3E 01               		ld	a,1
(1) 1513/     731 : 32 3F 00            		ld	(marsUpd),a
(1) 1514/     734 : CF                  		rst	8
(1) 1515/     735 : DD 21 F0 16         		ld	ix,pwmcom
(1) 1516/     739 :                     .rcyl_com:
(1) 1517/     739 : 06 00               		ld	b,0
(1) 1518/     73B : FD 4E 05            		ld	c,(iy+05h)
(1) 1519/     73E : DD 09               		add	ix,bc
(1) 1520/     740 : DD 36 00 04         		ld	(ix),100b
(1) 1521/     744 : C9                  		ret
(1) 1522/     745 :                     
(1) 1523/     745 :                     ; ----------------------------------------
(1) 1524/     745 :                     ; Process channel now
(1) 1525/     745 :                     ; iy - Table
(1) 1526/     745 :                     ; ix - Tracker channel
(1) 1527/     745 :                     .linked:
(1) 1528/     745 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1529/     746 : 47                  		ld	b,a		; b - flags to check
(1) 1530/     747 : E6 0F               		and	00001111b	; Filter flags
(1) 1531/     749 : C8                  		ret	z
(1) 1532/     74A : 78                  		ld	a,b
(1) 1533/     74B : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1534/     74D : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1535/     74E : D5                  		push	de
(1) 1536/     74F : DD E1               		pop	ix
(1) 1537/     751 : FD 6E 03            		ld	l,(iy+03h)
(1) 1538/     754 : FD 66 04            		ld	h,(iy+04h)
(1) 1539/     757 :                     
(1) 1540/     757 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1541/     757 :                     	; iy - Our chip table
(1) 1542/     757 :                     	; ix - Track channel
(1) 1543/     757 :                     	; hl - Intrument data
(1) 1544/     757 : CB 40               		bit	0,b		; Note
(1) 1545/     759 : C4 64 0C            		call	nz,.note
(1) 1546/     75C : CB 48               		bit	1,b		; Intrument
(1) 1547/     75E : C4 EE 0A            		call	nz,.inst
(1) 1548/     761 : CF                  		rst	8
(1) 1549/     762 : CB 50               		bit	2,b		; Volume
(1) 1550/     764 : C4 E5 0A            		call	nz,.volu
(1) 1551/     767 : CB 58               		bit	3,b		; Effect
(1) 1552/     769 : C4 20 0A            		call	nz,.effc
(1) 1553/     76C : 78                  		ld	a,b
(1) 1554/     76D : E6 0F               		and	00001111b
(1) 1555/     76F : C8                  		ret	z
(1) 1556/     770 : CF                  		rst	8
(1) 1557/     771 :                     
(1) 1558/     771 :                     ; ----------------------------------------
(1) 1559/     771 :                     ; Process channel now
(1) 1560/     771 :                     ;
(1) 1561/     771 :                     ; b - Note bits
(1) 1562/     771 :                     ; ----------------------------------------
(1) 1563/     771 :                     
(1) 1564/     771 : 7E                  		ld	a,(hl)
(1) 1565/     772 : E6 70               		and	01110000b	; <--
(1) 1566/     774 : 0F                  		rrca
(1) 1567/     775 : 0F                  		rrca
(1) 1568/     776 : 0F                  		rrca
(1) 1569/     777 : 16 00               		ld	d,0
(1) 1570/     779 : 5F                  		ld	e,a
(1) 1571/     77A : 21 83 07            		ld	hl,.mk_list
(1) 1572/     77D : 19                  		add	hl,de
(1) 1573/     77E : 7E                  		ld	a,(hl)
(1) 1574/     77F : 23                  		inc	hl
(1) 1575/     780 : 66                  		ld	h,(hl)
(1) 1576/     781 : 6F                  		ld	l,a
(1) 1577/     782 : E9                  		jp	(hl)
(1) 1578/     783 :                     ; --------------------------------
(1) 1579/     783 :                     .mk_list:
(1) 1580/     783 : B1 07               		dw .mk_psg
(1) 1581/     785 : 93 07               		dw .mk_psgn
(1) 1582/     787 : 27 08               		dw .mk_fm
(1) 1583/     789 : 99 08               		dw .mk_fmspc
(1) 1584/     78B : 1F 09               		dw .mk_dac
(1) 1585/     78D : 75 09               		dw .mk_pwm
(1) 1586/     78F : 00 00               		dw 0
(1) 1587/     791 : 00 00               		dw 0
(1) 1588/     793 :                     
(1) 1589/     793 :                     ; --------------------------------
(1) 1590/     793 :                     
(1) 1591/     793 :                     .mk_psgn:
(1) 1592/     793 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1593/     796 : DD E5               		push	ix
(1) 1594/     798 : DD 21 2B 17         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1595/     79C : CF                  		rst	8
(1) 1596/     79D : FE FE               		cp	-2
(1) 1597/     79F : 28 76               		jr	z,.kycut_psgn
(1) 1598/     7A1 : FE FF               		cp	-1
(1) 1599/     7A3 : 28 62               		jr	z,.kyoff_psgn
(1) 1600/     7A5 : 5F                  		ld	e,a
(1) 1601/     7A6 : 3A 93 17            		ld	a,(psgHatMode)	; Tone 3?
(1) 1602/     7A9 : E6 03               		and	011b
(1) 1603/     7AB : FE 03               		cp	011b
(1) 1604/     7AD : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1605/     7AF : 18 19               		jr	.from_psgn	; Tone 3
(1) 1606/     7B1 :                     .mk_psg:
(1) 1607/     7B1 : CF                  		rst	8
(1) 1608/     7B2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1609/     7B5 : DD E5               		push	ix
(1) 1610/     7B7 : DD 21 28 17         		ld	ix,psgcom	; ix - psgcom
(1) 1611/     7BB : FD 5E 05            		ld	e,(iy+05h)
(1) 1612/     7BE : 16 00               		ld	d,0
(1) 1613/     7C0 : DD 19               		add	ix,de
(1) 1614/     7C2 : FE FE               		cp	-2
(1) 1615/     7C4 : 28 56               		jr	z,.kycut_psg
(1) 1616/     7C6 : FE FF               		cp	-1
(1) 1617/     7C8 : 28 42               		jr	z,.kyoff_psg
(1) 1618/     7CA :                     .from_psgn:
(1) 1619/     7CA : CF                  		rst	8
(1) 1620/     7CB : 16 00               		ld	d,0		; de - note*2
(1) 1621/     7CD : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1622/     7D0 : 21 B4 12            		ld	hl,psgFreq_List
(1) 1623/     7D3 : 19                  		add	hl,de
(1) 1624/     7D4 : 7E                  		ld	a,(hl)
(1) 1625/     7D5 : 23                  		inc	hl
(1) 1626/     7D6 : 66                  		ld	h,(hl)
(1) 1627/     7D7 : 6F                  		ld	l,a
(1) 1628/     7D8 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1629/     7DB : 07                  		rlca			; << 3
(1) 1630/     7DC : 07                  		rlca
(1) 1631/     7DD : CF                  		rst	8
(1) 1632/     7DE : 07                  		rlca
(1) 1633/     7DF : 57                  		ld	d,a
(1) 1634/     7E0 : E6 F8               		and	11111000b
(1) 1635/     7E2 : 5F                  		ld	e,a
(1) 1636/     7E3 : 7A                  		ld	a,d
(1) 1637/     7E4 : E6 07               		and	00000111b
(1) 1638/     7E6 : 57                  		ld	d,a
(1) 1639/     7E7 : 37                  		scf
(1) 1640/     7E8 : 3F                  		ccf
(1) 1641/     7E9 : ED 52               		sbc	hl,de
(1) 1642/     7EB : DD 75 1C            		ld	(ix+DTL),l
(1) 1643/     7EE : DD 74 20            		ld	(ix+DTH),h
(1) 1644/     7F1 :                     .psg_keyon:
(1) 1645/     7F1 : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1646/     7F4 : ED 44               		neg	a
(1) 1647/     7F6 : CF                  		rst	8
(1) 1648/     7F7 : 87                  		add	a,a
(1) 1649/     7F8 : 87                  		add	a,a
(1) 1650/     7F9 : 30 02               		jr	nc,.vmuch
(1) 1651/     7FB : 3E FF               		ld	a,-1
(1) 1652/     7FD :                     .vmuch:
(1) 1653/     7FD : DD 77 30            		ld	(ix+PVOL),a
(1) 1654/     800 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1655/     804 : DD E1               		pop	ix
(1) 1656/     806 : C9                  		ret
(1) 1657/     807 :                     ; -1
(1) 1658/     807 :                     .kyoff_psgn:
(1) 1659/     807 : 3E 00               		ld	a,000b
(1) 1660/     809 : 32 93 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1661/     80C :                     .kyoff_psg:
(1) 1662/     80C : CF                  		rst	8
(1) 1663/     80D : 0E 02               		ld	c,010b
(1) 1664/     80F : DD 71 00            		ld	(ix),c
(1) 1665/     812 : DD E1               		pop	ix
(1) 1666/     814 : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1667/     817 :                     ; -2
(1) 1668/     817 :                     .kycut_psgn:
(1) 1669/     817 : 3E 00               		ld	a,000b
(1) 1670/     819 : 32 93 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1671/     81C :                     .kycut_psg:
(1) 1672/     81C : CF                  		rst	8
(1) 1673/     81D : 0E 04               		ld	c,100b
(1) 1674/     81F : DD 71 00            		ld	(ix),c
(1) 1675/     822 : DD E1               		pop	ix
(1) 1676/     824 : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1677/     827 :                     
(1) 1678/     827 :                     ; --------------------------------
(1) 1679/     827 :                     
(1) 1680/     827 :                     .mk_fm:
(1) 1681/     827 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1682/     82A : FE FE               		cp	-2
(1) 1683/     82C : CA 16 09            		jp	z,.fm_cut
(1) 1684/     82F : FE FF               		cp	-1
(1) 1685/     831 : CA 10 09            		jp	z,.fm_off
(1) 1686/     834 :                     ; 		call	.fm_tloff
(1) 1687/     834 : CF                  		rst	8
(1) 1688/     835 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1689/     838 : 78                  		ld	a,b		; Note bit?
(1) 1690/     839 : E6 01               		and	0001b
(1) 1691/     83B : 28 1F               		jr	z,.nofm_note
(1) 1692/     83D : FD 46 05            		ld	b,(iy+05h)	; Check channel 3
(1) 1693/     840 : 78                  		ld	a,b
(1) 1694/     841 : FE 02               		cp	2
(1) 1695/     843 : 20 0B               		jr	nz,.not_dspc
(1) 1696/     845 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1697/     848 : CD 62 11            		call	fm_send_1
(1) 1698/     84B : 3E 00               		ld	a,0
(1) 1699/     84D : 32 94 17            		ld	(fmSpecial),a
(1) 1700/     850 :                     .not_dspc:
(1) 1701/     850 : 78                  		ld	a,b
(1) 1702/     851 : FE 06               		cp	6
(1) 1703/     853 : 20 04               		jr	nz,.not_dac
(1) 1704/     855 : CF                  		rst	8
(1) 1705/     856 : CD 8D 11            		call	dac_off
(1) 1706/     859 :                     .not_dac:
(1) 1707/     859 : CD D2 0C            		call	.fm_keyoff
(1) 1708/     85C :                     .nofm_note:
(1) 1709/     85C : FD 7E 06            		ld	a,(iy+06h)
(1) 1710/     85F : 47                  		ld	b,a
(1) 1711/     860 : E6 1F               		and	00011111b
(1) 1712/     862 : 5F                  		ld	e,a
(1) 1713/     863 : 16 00               		ld	d,0
(1) 1714/     865 : 21 9C 12            		ld	hl,fmFreq_List
(1) 1715/     868 : 19                  		add	hl,de
(1) 1716/     869 : 7E                  		ld	a,(hl)
(1) 1717/     86A : CF                  		rst	8
(1) 1718/     86B : 23                  		inc	hl
(1) 1719/     86C : 66                  		ld	h,(hl)
(1) 1720/     86D : 6F                  		ld	l,a
(1) 1721/     86E : 78                  		ld	a,b
(1) 1722/     86F : E6 E0               		and	11100000b
(1) 1723/     871 : 0F                  		rrca
(1) 1724/     872 : 0F                  		rrca
(1) 1725/     873 : B4                  		or	h
(1) 1726/     874 : 67                  		ld	h,a
(1) 1727/     875 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1728/     878 : CF                  		rst	8
(1) 1729/     879 : AF                  		xor	a		; Clear high
(1) 1730/     87A : 3F                  		ccf			; Clear carry
(1) 1731/     87B : CB 23               		sla	e		; << 2
(1) 1732/     87D : CB 23               		sla	e
(1) 1733/     87F : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1734/     880 : 57                  		ld	d,a
(1) 1735/     881 : 19                  		add	hl,de
(1) 1736/     882 : CD F1 0C            		call	.fm_setfreq
(1) 1737/     885 :                     .fmspc_set:
(1) 1738/     885 : CD 82 0D            		call	.fm_wrtalpan	; Panning and effects
(1) 1739/     888 : CD 08 0D            		call	.fm_wrtlvol	; FM volume control
(1) 1743/     88B : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Eh - keys
(1) 1744/     88E : E6 F0               		and	11110000b
(1) 1745/     890 : B1                  		or	c
(1) 1746/     891 : 5F                  		ld	e,a
(1) 1747/     892 : 16 28               		ld	d,28h
(1) 1748/     894 : CD 62 11            		call	fm_send_1
(1) 1749/     897 : CF                  		rst	8
(1) 1750/     898 : C9                  		ret
(1) 1752/     899 :                     
(1) 1753/     899 :                     ; --------------------------------
(1) 1754/     899 :                     
(1) 1755/     899 :                     .mk_fmspc:
(1) 1756/     899 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1757/     89C : FE FE               		cp	-2
(1) 1758/     89E : CA 16 09            		jp	z,.fm_cut
(1) 1759/     8A1 : FE FF               		cp	-1
(1) 1760/     8A3 : CA 10 09            		jp	z,.fm_off
(1) 1761/     8A6 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1762/     8A9 : 78                  		ld	a,b
(1) 1763/     8AA : E6 01               		and	0001b
(1) 1764/     8AC : 28 D7               		jr	z,.fmspc_set
(1) 1765/     8AE : CD D2 0C            		call	.fm_keyoff
(1) 1766/     8B1 : 21 96 14            		ld	hl,fmcach_list	; Manual freqs
(1) 1767/     8B4 : FD 7E 05            		ld	a,(iy+05h)
(1) 1768/     8B7 : E6 07               		and	0111b
(1) 1769/     8B9 : 16 00               		ld	d,0
(1) 1770/     8BB : 87                  		add	a,a
(1) 1771/     8BC : 5F                  		ld	e,a
(1) 1772/     8BD : CF                  		rst	8
(1) 1773/     8BE : 19                  		add	hl,de
(1) 1774/     8BF : 7E                  		ld	a,(hl)
(1) 1775/     8C0 : 23                  		inc	hl
(1) 1776/     8C1 : 66                  		ld	h,(hl)
(1) 1777/     8C2 : 6F                  		ld	l,a
(1) 1778/     8C3 : 11 20 00            		ld	de,20h		; point to regs
(1) 1779/     8C6 : 19                  		add	hl,de
(1) 1780/     8C7 : 16 AD               		ld	d,0ADh
(1) 1781/     8C9 : 5E                  		ld	e,(hl)
(1) 1782/     8CA : CD 62 11            		call	fm_send_1
(1) 1783/     8CD : 23                  		inc	hl
(1) 1784/     8CE : 16 A9               		ld	d,0A9h
(1) 1785/     8D0 : 5E                  		ld	e,(hl)
(1) 1786/     8D1 : CD 62 11            		call	fm_send_1
(1) 1787/     8D4 : 23                  		inc	hl
(1) 1788/     8D5 : CF                  		rst	8
(1) 1789/     8D6 : 16 AC               		ld	d,0ACh
(1) 1790/     8D8 : 5E                  		ld	e,(hl)
(1) 1791/     8D9 : CD 62 11            		call	fm_send_1
(1) 1792/     8DC : 23                  		inc	hl
(1) 1793/     8DD : 16 A8               		ld	d,0A8h
(1) 1794/     8DF : 5E                  		ld	e,(hl)
(1) 1795/     8E0 : CD 62 11            		call	fm_send_1
(1) 1796/     8E3 : 23                  		inc	hl
(1) 1797/     8E4 : 16 AE               		ld	d,0AEh
(1) 1798/     8E6 : 5E                  		ld	e,(hl)
(1) 1799/     8E7 : CD 62 11            		call	fm_send_1
(1) 1800/     8EA : 23                  		inc	hl
(1) 1801/     8EB : CF                  		rst	8
(1) 1802/     8EC : 16 AA               		ld	d,0AAh
(1) 1803/     8EE : 5E                  		ld	e,(hl)
(1) 1804/     8EF : CD 62 11            		call	fm_send_1
(1) 1805/     8F2 : 23                  		inc	hl
(1) 1806/     8F3 : 16 A6               		ld	d,0A6h
(1) 1807/     8F5 : 5E                  		ld	e,(hl)
(1) 1808/     8F6 : CD 62 11            		call	fm_send_1
(1) 1809/     8F9 : 23                  		inc	hl
(1) 1810/     8FA : 16 A2               		ld	d,0A2h
(1) 1811/     8FC : 5E                  		ld	e,(hl)
(1) 1812/     8FD : CD 62 11            		call	fm_send_1
(1) 1813/     900 : 23                  		inc	hl
(1) 1814/     901 : CF                  		rst	8
(1) 1815/     902 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 1816/     905 : CD 62 11            		call	fm_send_1
(1) 1817/     908 : 3E 01               		ld	a,1
(1) 1818/     90A : 32 94 17            		ld	(fmSpecial),a
(1) 1819/     90D : C3 85 08            		jp	.fmspc_set
(1) 1820/     910 :                     
(1) 1821/     910 :                     ; --------------------------------
(1) 1822/     910 :                     
(1) 1823/     910 :                     .fm_off:
(1) 1824/     910 : CD D2 0C            		call	.fm_keyoff
(1) 1825/     913 : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1826/     916 :                     .fm_cut:
(1) 1827/     916 : CD D2 0C            		call	.fm_keyoff
(1) 1828/     919 : CD DA 0C            		call	.fm_tloff
(1) 1829/     91C : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1830/     91F :                     
(1) 1831/     91F :                     ; --------------------------------
(1) 1832/     91F :                     
(1) 1833/     91F :                     .mk_dac:
(1) 1834/     91F : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1835/     922 : FE FE               		cp	-2
(1) 1836/     924 : CA 46 09            		jp	z,.dac_cut
(1) 1837/     927 : FE FF               		cp	-1
(1) 1838/     929 : CA 4C 09            		jp	z,.dac_off
(1) 1839/     92C : CD 4F 09            		call	.dac_pitch
(1) 1840/     92F : 78                  		ld	a,b		; Note ONLY?
(1) 1841/     930 : E6 01               		and	0001b
(1) 1842/     932 : C8                  		ret	z
(1) 1843/     933 : CD 8D 11            		call	dac_off
(1) 1844/     936 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 1845/     939 : 2F                  		cpl				; REVERSE bits
(1) 1846/     93A : E6 C0               		and	11000000b
(1) 1847/     93C : 5F                  		ld	e,a
(1) 1848/     93D : 16 B6               		ld	d,0B6h		; Channel 6 panning
(1) 1849/     93F : CD 6D 11            		call	fm_send_2
(1) 1850/     942 : CF                  		rst	8
(1) 1851/     943 : C3 A2 11            		jp	dac_play
(1) 1852/     946 :                     .dac_cut:
(1) 1853/     946 : CD 8D 11            		call	dac_off
(1) 1854/     949 : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1855/     94C :                     .dac_off:
(1) 1856/     94C : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1857/     94F :                     
(1) 1858/     94F :                     
(1) 1859/     94F :                     .dac_pitch:
(1) 1860/     94F : 16 00               		ld	d,0		; Freq index
(1) 1861/     951 : FD 5E 06            		ld	e,(iy+06h)
(1) 1862/     954 : 21 A6 13            		ld	hl,wavFreq_List
(1) 1863/     957 : 19                  		add	hl,de
(1) 1864/     958 : 7E                  		ld	a,(hl)
(1) 1865/     959 : 23                  		inc	hl
(1) 1866/     95A : 66                  		ld	h,(hl)
(1) 1867/     95B : CF                  		rst	8
(1) 1868/     95C : 6F                  		ld	l,a
(1) 1869/     95D : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1870/     960 : AF                  		xor	a		; Clear high
(1) 1871/     961 : 3F                  		ccf			; Clear carry
(1) 1872/     962 : CB 23               		sla	e		; << 3
(1) 1873/     964 : CB 23               		sla	e
(1) 1874/     966 : CB 23               		sla	e
(1) 1875/     968 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1876/     969 : 57                  		ld	d,a
(1) 1877/     96A : 19                  		add	hl,de
(1) 1878/     96B : 22 8D 17            		ld	(wave_Pitch),hl
(1) 1879/     96E : D9                  		exx			; *
(1) 1880/     96F : ED 5B 8D 17         		ld	de,(wave_Pitch)	; *
(1) 1881/     973 : D9                  		exx			; *
(1) 1882/     974 : C9                  		ret
(1) 1883/     975 :                     
(1) 1884/     975 :                     ; --------------------------------
(1) 1885/     975 :                     
(1) 1886/     975 :                     .mk_pwm:
(1) 1887/     975 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1888/     978 : 16 00               		ld	d,0
(1) 1889/     97A : FD 5E 05            		ld	e,(iy+05h)
(1) 1890/     97D : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 1891/     980 : DD E5               		push	ix
(1) 1892/     982 : DD 21 F0 16         		ld	ix,pwmcom
(1) 1893/     986 : DD 19               		add	ix,de
(1) 1894/     988 : FE FE               		cp	-2
(1) 1895/     98A : CA 11 0A            		jp	z,.pwm_cut
(1) 1896/     98D : FE FF               		cp	-1
(1) 1897/     98F : CA 02 0A            		jp	z,.pwm_off
(1) 1898/     992 : CF                  		rst	8
(1) 1899/     993 : 78                  		ld	a,b
(1) 1900/     994 : CB 40               		bit	0,b			; Note?
(1) 1901/     996 : 20 0E               		jr	nz,.pw_note
(1) 1902/     998 : CB 58               		bit	3,b			; Effect?
(1) 1903/     99A : 20 03               		jr	nz,.pw_effc
(1) 1904/     99C : DD E1               		pop	ix
(1) 1905/     99E : C9                  		ret
(1) 1906/     99F :                     
(1) 1907/     99F :                     ; --------------------------------
(1) 1908/     99F :                     
(1) 1909/     99F :                     .pw_effc:
(1) 1910/     99F : CD CF 09            		call	.pw_setup
(1) 1911/     9A2 : 0E 11               		ld	c,00010001b
(1) 1912/     9A4 : 18 05               		jr	.pw_send
(1) 1913/     9A6 :                     .pw_note:
(1) 1914/     9A6 : CD CF 09            		call	.pw_setup
(1) 1915/     9A9 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 1916/     9AB :                     .pw_send:
(1) 1917/     9AB : DD 71 00            		ld	(ix),c
(1) 1918/     9AE : 01 08 00            		ld	bc,8
(1) 1919/     9B1 : DD 09               		add	ix,bc
(1) 1920/     9B3 : DD 77 00            		ld	(ix),a
(1) 1921/     9B6 : DD 09               		add	ix,bc
(1) 1922/     9B8 : DD 75 00            		ld	(ix),l
(1) 1923/     9BB : DD 09               		add	ix,bc
(1) 1924/     9BD : CF                  		rst	8
(1) 1925/     9BE : DD 7E 00            		ld	a,(ix)
(1) 1926/     9C1 : E6 CF               		and	11001111b
(1) 1927/     9C3 : B3                  		or	e
(1) 1928/     9C4 : DD 77 00            		ld	(ix),a
(1) 1930/     9C7 : 3E 01               		ld	a,1
(1) 1931/     9C9 : 32 3F 00            		ld	(marsUpd),a
(1) 1933/     9CC : DD E1               		pop	ix
(1) 1934/     9CE : C9                  		ret
(1) 1935/     9CF :                     .pw_setup:
(1) 1936/     9CF : 16 00               		ld	d,0		; Freq index
(1) 1937/     9D1 : FD 5E 06            		ld	e,(iy+06h)
(1) 1938/     9D4 : 21 A6 13            		ld	hl,wavFreq_List
(1) 1939/     9D7 : 19                  		add	hl,de
(1) 1940/     9D8 : 7E                  		ld	a,(hl)
(1) 1941/     9D9 : 23                  		inc	hl
(1) 1942/     9DA : 66                  		ld	h,(hl)
(1) 1943/     9DB : 6F                  		ld	l,a
(1) 1944/     9DC : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1945/     9DF : AF                  		xor	a		; Clear high
(1) 1946/     9E0 : 3F                  		ccf			; Clear carry
(1) 1947/     9E1 : CB 23               		sla	e		; << 2
(1) 1948/     9E3 : CB 23               		sla	e
(1) 1949/     9E5 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1950/     9E6 : 57                  		ld	d,a
(1) 1951/     9E7 : 19                  		add	hl,de
(1) 1952/     9E8 : CF                  		rst	8
(1) 1953/     9E9 : 79                  		ld	a,c
(1) 1954/     9EA : 0F                  		rrca
(1) 1955/     9EB : 0F                  		rrca
(1) 1956/     9EC : 2F                  		cpl
(1) 1957/     9ED : E6 30               		and	00110000b
(1) 1958/     9EF : 5F                  		ld	e,a
(1) 1959/     9F0 : AF                  		xor	a
(1) 1960/     9F1 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 1961/     9F4 : ED 44               		neg	a
(1) 1962/     9F6 : CB 27               		sla	a
(1) 1963/     9F8 : CB 27               		sla	a
(1) 1964/     9FA : 30 02               		jr	nc,.pwv_much
(1) 1965/     9FC : 3E FF               		ld	a,-1
(1) 1966/     9FE :                     .pwv_much:
(1) 1967/     9FE : E6 FC               		and	11111100b
(1) 1968/     A00 : B4                  		or	h		; Merge MSB freq
(1) 1969/     A01 : C9                  		ret
(1) 1970/     A02 :                     
(1) 1971/     A02 :                     ; --------------------------------
(1) 1972/     A02 :                     ; -1
(1) 1973/     A02 :                     .pwm_off:
(1) 1974/     A02 : CF                  		rst	8
(1) 1975/     A03 : DD 36 00 02         		ld	(ix),010b
(1) 1976/     A07 : 3E 01               		ld	a,1
(1) 1977/     A09 : 32 3F 00            		ld	(marsUpd),a
(1) 1978/     A0C : DD E1               		pop	ix
(1) 1979/     A0E : C3 B6 0D            		jp	.chnl_ulnkoff
(1) 1980/     A11 :                     ; -2
(1) 1981/     A11 :                     .pwm_cut:
(1) 1982/     A11 : CF                  		rst	8
(1) 1983/     A12 : DD 36 00 04         		ld	(ix),100b
(1) 1984/     A16 : 3E 01               		ld	a,1
(1) 1985/     A18 : 32 3F 00            		ld	(marsUpd),a
(1) 1986/     A1B : DD E1               		pop	ix
(1) 1987/     A1D : C3 C7 0D            		jp	.chnl_ulnkcut
(1) 1988/     A20 :                     
(1) 1989/     A20 :                     ; ----------------------------------------
(1) 1990/     A20 :                     ; NEW effect
(1) 1991/     A20 :                     ; ----------------------------------------
(1) 1992/     A20 :                     
(1) 1993/     A20 :                     .effc:
(1) 1994/     A20 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 1995/     A23 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 1996/     A26 : 57                  		ld	d,a
(1) 1997/     A27 : CF                  		rst	8
(1) 1998/     A28 : FE 04               		cp	4			; Effect D?
(1) 1999/     A2A : 28 0F               		jr	z,.effc_D
(1) 2000/     A2C : FE 05               		cp	5			; Effect E?
(1) 2001/     A2E : 28 4E               		jr	z,.effc_E
(1) 2002/     A30 : FE 06               		cp	6			; Effect F?
(1) 2003/     A32 : 28 5F               		jr	z,.effc_F
(1) 2004/     A34 : CF                  		rst	8
(1) 2005/     A35 : FE 18               		cp	24			; Effect X?
(1) 2006/     A37 : CA B4 0A            		jp	z,.effc_X
(1) 2007/     A3A : C9                  		ret
(1) 2008/     A3B :                     
(1) 2009/     A3B :                     ; ----------------------------------------
(1) 2010/     A3B :                     ; Effect D
(1) 2011/     A3B :                     ;
(1) 2012/     A3B :                     ; Volume slide down
(1) 2013/     A3B :                     ;
(1) 2014/     A3B :                     ; 0xh-Exh - Normal
(1) 2015/     A3B :                     ; Fxh-Fxh - Fine slide / 2
(1) 2016/     A3B :                     
(1) 2017/     A3B :                     .effc_D:
(1) 2018/     A3B : CD A8 0A            		call	.save_arg
(1) 2019/     A3E : 79                  		ld	a,c		; Setting == 0?
(1) 2020/     A3F : B7                  		or	a
(1) 2021/     A40 : C8                  		ret	z
(1) 2022/     A41 : E6 F0               		and	0F0h
(1) 2023/     A43 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2024/     A45 : FE F0               		cp	0F0h
(1) 2025/     A47 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2026/     A49 : CF                  		rst	8
(1) 2027/     A4A : 79                  		ld	a,c
(1) 2028/     A4B : E6 0F               		and	00Fh
(1) 2029/     A4D : 28 1D               		jr	z,.norm_up	; x0h
(1) 2030/     A4F : FE 0F               		cp	00Fh
(1) 2031/     A51 : 28 17               		jr	z,.fine_up	; xFh
(1) 2032/     A53 : C9                  		ret
(1) 2033/     A54 :                     ; Go down
(1) 2034/     A54 :                     .norm_down:
(1) 2035/     A54 : CB 21               		sla	c
(1) 2036/     A56 :                     .fine_down:
(1) 2037/     A56 : CB 21               		sla	c
(1) 2038/     A58 : 79                  		ld	a,c
(1) 2039/     A59 : E6 3C               		and	00111100b
(1) 2040/     A5B : 4F                  		ld	c,a
(1) 2041/     A5C : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2042/     A5F : CF                  		rst	8
(1) 2043/     A60 : 91                  		sub	a,c
(1) 2044/     A61 : 1E C0               		ld	e,0C0h
(1) 2045/     A63 : BB                  		cp	e
(1) 2046/     A64 : D2 7A 0A            		jp	nc,.vol_dvld
(1) 2047/     A67 : 7B                  		ld	a,e
(1) 2048/     A68 : 18 10               		jr 	.vol_dvld
(1) 2049/     A6A :                     ; Go up
(1) 2050/     A6A :                     .fine_up:
(1) 2051/     A6A : CB 39               		srl	c
(1) 2052/     A6C :                     .norm_up:
(1) 2053/     A6C : CB 39               		srl	c
(1) 2054/     A6E : 79                  		ld	a,c
(1) 2055/     A6F : E6 3C               		and	00111100b
(1) 2056/     A71 : 4F                  		ld	c,a
(1) 2057/     A72 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2058/     A75 : CF                  		rst	8
(1) 2059/     A76 : 81                  		add	a,c
(1) 2060/     A77 : 38 01               		jr	c,.vol_dvld
(1) 2061/     A79 : AF                  		xor	a
(1) 2062/     A7A :                     .vol_dvld:
(1) 2063/     A7A : FD 77 08            		ld	(iy+08h),a
(1) 2064/     A7D : C9                  		ret
(1) 2065/     A7E :                     
(1) 2066/     A7E :                     ; ----------------------------------------
(1) 2067/     A7E :                     ; Effect E
(1) 2068/     A7E :                     .effc_E:
(1) 2069/     A7E : CD A8 0A            		call	.save_arg
(1) 2070/     A81 : 79                  		ld	a,c
(1) 2071/     A82 : E6 F0               		and	0F0h
(1) 2072/     A84 : FE F0               		cp	0F0h
(1) 2073/     A86 : C8                  		ret	z
(1) 2074/     A87 : FE E0               		cp	0E0h
(1) 2075/     A89 : C8                  		ret	z
(1) 2076/     A8A : CF                  		rst	8
(1) 2077/     A8B : FD 7E 07            		ld	a,(iy+07h)
(1) 2078/     A8E : 91                  		sub	a,c
(1) 2079/     A8F : FD 77 07            		ld	(iy+07h),a
(1) 2080/     A92 : C9                  		ret
(1) 2081/     A93 :                     
(1) 2082/     A93 :                     ; ----------------------------------------
(1) 2083/     A93 :                     ; Effect F
(1) 2084/     A93 :                     .effc_F:
(1) 2085/     A93 : CD A8 0A            		call	.save_arg
(1) 2086/     A96 : 79                  		ld	a,c
(1) 2087/     A97 : E6 F0               		and	0F0h
(1) 2088/     A99 : FE F0               		cp	0F0h
(1) 2089/     A9B : C8                  		ret	z
(1) 2090/     A9C : FE E0               		cp	0E0h
(1) 2091/     A9E : C8                  		ret	z
(1) 2092/     A9F : CF                  		rst	8
(1) 2093/     AA0 : FD 7E 07            		ld	a,(iy+07h)
(1) 2094/     AA3 : 81                  		add	a,c
(1) 2095/     AA4 : FD 77 07            		ld	(iy+07h),a
(1) 2096/     AA7 : C9                  		ret
(1) 2097/     AA8 :                     
(1) 2098/     AA8 :                     ; --------------------------------
(1) 2099/     AA8 :                     ; e - got arg
(1) 2100/     AA8 :                     ; c - new arg
(1) 2101/     AA8 :                     .save_arg:
(1) 2102/     AA8 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2103/     AAB : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2104/     AAC : B7                  		or	a
(1) 2105/     AAD : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2106/     AAF : 4F                  		ld	c,a
(1) 2107/     AB0 : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2108/     AB3 :                     .D_cont:
(1) 2109/     AB3 : C9                  		ret
(1) 2110/     AB4 :                     
(1) 2111/     AB4 :                     ; ----------------------------------------
(1) 2112/     AB4 :                     ; Effect X
(1) 2113/     AB4 :                     ;
(1) 2114/     AB4 :                     ; Panning arg:
(1) 2115/     AB4 :                     ; 00h LEFT <- 80h MIDDLE -> FFh RIGHT
(1) 2116/     AB4 :                     ;
(1) 2117/     AB4 :                     ; FM style %LR000000 (REVERSE: 0-on 1-off)
(1) 2118/     AB4 :                     
(1) 2119/     AB4 :                     .effc_X:
(1) 2120/     AB4 : 16 00               		ld	d,0
(1) 2121/     AB6 : 7E                  		ld	a,(hl)
(1) 2122/     AB7 : FE 80               		cp	80h		; PSG?
(1) 2123/     AB9 : 28 18               		jr	z,.res_pan
(1) 2124/     ABB : FE 90               		cp	90h		; PSGN?
(1) 2125/     ABD : 28 14               		jr	z,.res_pan
(1) 2126/     ABF : FD 36 09 00         		ld	(iy+09h),0
(1) 2127/     AC3 : CF                  		rst	8
(1) 2128/     AC4 : E5                  		push	hl
(1) 2129/     AC5 : 21 DD 0A            		ld	hl,.fm_panlist
(1) 2130/     AC8 : 7B                  		ld	a,e
(1) 2131/     AC9 : 07                  		rlca
(1) 2132/     ACA : 07                  		rlca
(1) 2133/     ACB : 07                  		rlca
(1) 2134/     ACC : E6 07               		and	0111b
(1) 2135/     ACE :                     ; 		ld	d,0
(1) 2136/     ACE : 5F                  		ld	e,a
(1) 2137/     ACF : CF                  		rst	8
(1) 2138/     AD0 : 19                  		add	hl,de
(1) 2139/     AD1 : 56                  		ld	d,(hl)
(1) 2140/     AD2 : E1                  		pop	hl
(1) 2141/     AD3 :                     .res_pan:
(1) 2142/     AD3 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2143/     AD6 : E6 3F               		and	00111111b
(1) 2144/     AD8 : B2                  		or	d
(1) 2145/     AD9 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2146/     ADC : C9                  		ret
(1) 2147/     ADD :                     
(1) 2148/     ADD :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2149/     ADD :                     .fm_panlist:
(1) 2150/     ADD : 40                  		db 01000000b
(1) 2151/     ADE : 40                  		db 01000000b
(1) 2152/     ADF : 40                  		db 01000000b
(1) 2153/     AE0 : 00                  		db 00000000b
(1) 2154/     AE1 : 00                  		db 00000000b
(1) 2155/     AE2 : 80                  		db 10000000b
(1) 2156/     AE3 : 80                  		db 10000000b
(1) 2157/     AE4 : 80                  		db 10000000b
(1) 2158/     AE5 :                     
(1) 2159/     AE5 :                     ; ----------------------------------------
(1) 2160/     AE5 :                     ; NEW volume
(1) 2161/     AE5 :                     ; ----------------------------------------
(1) 2162/     AE5 :                     
(1) 2163/     AE5 :                     .volu:
(1) 2164/     AE5 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2165/     AE8 : D6 40               		sub	a,64
(1) 2166/     AEA : FD 77 08            		ld	(iy+08h),a	; <-- BASE volume
(1) 2167/     AED : C9                  		ret
(1) 2168/     AEE :                     
(1) 2169/     AEE :                     ; ----------------------------------------
(1) 2170/     AEE :                     ; NEW instrument
(1) 2171/     AEE :                     ; ----------------------------------------
(1) 2172/     AEE :                     
(1) 2173/     AEE :                     .inst:
(1) 2174/     AEE : 7E                  		ld	a,(hl)
(1) 2175/     AEF : E6 F0               		and	11110000b
(1) 2176/     AF1 : FE 80               		cp	80h
(1) 2177/     AF3 : 28 1E               		jr	z,.ps_ins
(1) 2178/     AF5 : FE 90               		cp	90h
(1) 2179/     AF7 : 28 14               		jr	z,.pn_ins
(1) 2180/     AF9 : FE A0               		cp	0A0h
(1) 2181/     AFB : 28 4C               		jr	z,.fm_ins
(1) 2182/     AFD : FE B0               		cp	0B0h
(1) 2183/     AFF : 28 48               		jr	z,.fm_ins
(1) 2184/     B01 : FE C0               		cp	0C0h
(1) 2185/     B03 : CA CA 0B            		jp	z,.dac_ins
(1) 2186/     B06 : CF                  		rst	8
(1) 2187/     B07 : FE D0               		cp	0D0h
(1) 2188/     B09 : CA 21 0C            		jp	z,.pwm_ins
(1) 2189/     B0C :                     
(1) 2190/     B0C :                     ; ----------------------------------------
(1) 2191/     B0C :                     
(1) 2192/     B0C :                     .invl_ins:
(1) 2193/     B0C : C9                  		ret
(1) 2194/     B0D :                     
(1) 2195/     B0D :                     ; ----------------------------------------
(1) 2196/     B0D :                     
(1) 2197/     B0D :                     ; PSG
(1) 2198/     B0D :                     .pn_ins:
(1) 2199/     B0D : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2200/     B0E : E6 07               		and	0111b
(1) 2201/     B10 : 32 93 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2202/     B13 :                     .ps_ins:
(1) 2203/     B13 : CF                  		rst	8
(1) 2204/     B14 : DD E5               		push	ix
(1) 2205/     B16 : E5                  		push	hl
(1) 2206/     B17 : 23                  		inc	hl		; Skip ID
(1) 2207/     B18 : DD 21 28 17         		ld	ix,psgcom	; Read psg control
(1) 2208/     B1C : FD 5E 05            		ld	e,(iy+05h)
(1) 2209/     B1F : 16 00               		ld	d,0
(1) 2210/     B21 : DD 19               		add	ix,de
(1) 2211/     B23 : 7E                  		ld	a,(hl)
(1) 2212/     B24 : CF                  		rst	8
(1) 2213/     B25 : 23                  		inc	hl
(1) 2214/     B26 : 7E                  		ld	a,(hl)
(1) 2215/     B27 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2216/     B2A : 23                  		inc	hl
(1) 2217/     B2B : 7E                  		ld	a,(hl)
(1) 2218/     B2C : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2219/     B2F : 23                  		inc	hl
(1) 2220/     B30 : 7E                  		ld	a,(hl)
(1) 2221/     B31 : CF                  		rst	8
(1) 2222/     B32 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2223/     B35 : 23                  		inc	hl
(1) 2224/     B36 : 7E                  		ld	a,(hl)
(1) 2225/     B37 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2226/     B3A : 23                  		inc	hl
(1) 2227/     B3B : 7E                  		ld	a,(hl)
(1) 2228/     B3C : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2229/     B3F : 23                  		inc	hl
(1) 2230/     B40 : 7E                  		ld	a,(hl)
(1) 2231/     B41 : CF                  		rst	8
(1) 2232/     B42 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2233/     B45 : E1                  		pop	hl
(1) 2234/     B46 : DD E1               		pop	ix
(1) 2235/     B48 : C9                  		ret
(1) 2236/     B49 :                     
(1) 2237/     B49 :                     ; --------
(1) 2238/     B49 :                     
(1) 2239/     B49 :                     .fm_ins:
(1) 2240/     B49 :                     ;  ret
(1) 2241/     B49 : DD E5               		push	ix
(1) 2242/     B4B : E5                  		push	hl
(1) 2243/     B4C : C5                  		push	bc
(1) 2244/     B4D :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2245/     B4D : FD 46 02            		ld	b,(iy+02h)
(1) 2246/     B50 : FD 7E 05            		ld	a,(iy+05h)
(1) 2247/     B53 : E6 07               		and	0111b
(1) 2248/     B55 : 16 00               		ld	d,0
(1) 2249/     B57 : 87                  		add	a,a
(1) 2250/     B58 : 5F                  		ld	e,a
(1) 2251/     B59 : DD 21 96 14         		ld	ix,fmcach_list
(1) 2252/     B5D : DD 19               		add	ix,de
(1) 2253/     B5F : CF                  		rst	8
(1) 2254/     B60 : DD 5E 00            		ld	e,(ix)
(1) 2255/     B63 : DD 23               		inc	ix
(1) 2256/     B65 : DD 56 00            		ld	d,(ix)
(1) 2257/     B68 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2258/     B68 :                     ; 		cp	b
(1) 2259/     B68 :                     ; 		jr	z,.same_patch
(1) 2260/     B68 :                     ; 		ld	(iy+0Bh),b
(1) 2261/     B68 : 23                  		inc	hl		; Skip id and pitch
(1) 2262/     B69 : 23                  		inc	hl
(1) 2263/     B6A : 46                  		ld	b,(hl)
(1) 2264/     B6B : 23                  		inc	hl
(1) 2265/     B6C : 4E                  		ld	c,(hl)
(1) 2266/     B6D : 23                  		inc	hl
(1) 2267/     B6E : 6E                  		ld	l,(hl)
(1) 2268/     B6F : 61                  		ld	h,c
(1) 2269/     B70 : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2270/     B73 : BC                  		cp	h
(1) 2271/     B74 : 20 07               		jr	nz,.new_romdat
(1) 2272/     B76 : CF                  		rst	8
(1) 2273/     B77 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2274/     B7A : BD                  		cp	l
(1) 2275/     B7B : 28 38               		jr	z,.same_patch
(1) 2276/     B7D :                     .new_romdat:
(1) 2277/     B7D : FD 74 0A            		ld	(iy+0Ah),h
(1) 2278/     B80 : FD 75 0B            		ld	(iy+0Bh),l
(1) 2279/     B83 : 78                  		ld	a,b
(1) 2280/     B84 : D5                  		push	de
(1) 2281/     B85 : 01 28 00            		ld	bc,28h		; <- size
(1) 2282/     B88 : CD 75 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2283/     B8B :                     
(1) 2284/     B8B : E1                  		pop	hl
(1) 2285/     B8C : FD 7E 05            		ld	a,(iy+05h)
(1) 2286/     B8F : 4F                  		ld	c,a		; c - FM Key ID
(1) 2287/     B90 :                     ; 		call	.fm_keyoff
(1) 2288/     B90 :                     
(1) 2289/     B90 :                     	; hl - fmcach intrument
(1) 2290/     B90 :                     	; de - FM reg and data: 3000h
(1) 2291/     B90 :                     	;  c - FM keyChannel
(1) 2292/     B90 : 79                  		ld	a,c
(1) 2293/     B91 : E6 03               		and	011b
(1) 2294/     B93 : F6 30               		or	30h		; Start at reg 30h
(1) 2295/     B95 : 57                  		ld	d,a
(1) 2296/     B96 : 1E 00               		ld	e,0
(1) 2297/     B98 : CF                  		rst	8
(1) 2298/     B99 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2299/     B9B : CD BA 0B            		call	.fm_setrlist
(1) 2300/     B9E :                     ; 		ld	b,4
(1) 2301/     B9E :                     ; 		call	.fm_setrlist
(1) 2302/     B9E :                     ; 		ld	b,5*4
(1) 2303/     B9E :                     ; 		call	.fm_setrlist
(1) 2304/     B9E : 7E                  		ld	a,(hl)		; 0B0h
(1) 2305/     B9F : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2306/     BA2 : 23                  		inc	hl
(1) 2307/     BA3 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2308/     BA4 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2309/     BA7 : 23                  		inc	hl
(1) 2310/     BA8 : CF                  		rst	8
(1) 2311/     BA9 : 7E                  		ld	a,(hl)
(1) 2312/     BAA : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2313/     BAD : 23                  		inc	hl
(1) 2314/     BAE : 7E                  		ld	a,(hl)		; 028h keys
(1) 2315/     BAF : E6 F0               		and	11110000b
(1) 2316/     BB1 : CF                  		rst	8
(1) 2317/     BB2 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2318/     BB5 :                     .same_patch:
(1) 2319/     BB5 : C1                  		pop	bc
(1) 2320/     BB6 : E1                  		pop	hl
(1) 2321/     BB7 : DD E1               		pop	ix
(1) 2322/     BB9 : C9                  		ret
(1) 2323/     BBA :                     ; b - numof_regs
(1) 2324/     BBA :                     .fm_setrlist:
(1) 2325/     BBA : 5E                  		ld	e,(hl)
(1) 2326/     BBB : 23                  		inc	hl
(1) 2327/     BBC : CD 59 11            		call	fm_autoreg
(1) 2328/     BBF : 00                  		nop
(1) 2329/     BC0 : 00                  		nop
(1) 2330/     BC1 : CF                  		rst	8
(1) 2331/     BC2 : 00                  		nop
(1) 2332/     BC3 : 14                  		inc	d		; +4
(1) 2333/     BC4 : 14                  		inc	d
(1) 2334/     BC5 : 14                  		inc	d
(1) 2335/     BC6 : 14                  		inc	d
(1) 2336/     BC7 : 10 F1               		djnz	.fm_setrlist
(1) 2337/     BC9 : C9                  		ret
(1) 2338/     BCA :                     ; --------
(1) 2339/     BCA :                     
(1) 2340/     BCA :                     .dac_ins:
(1) 2341/     BCA : DD 5E 03            		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2342/     BCD :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2343/     BCD :                     ; 		cp	e
(1) 2344/     BCD :                     ; 		jr	z,.same_dac
(1) 2345/     BCD : FD 73 0B            		ld	(iy+0Bh),e
(1) 2346/     BD0 : E5                  		push	hl
(1) 2347/     BD1 : C5                  		push	bc
(1) 2348/     BD2 : 7E                  		ld	a,(hl)
(1) 2349/     BD3 : E6 0F               		and	01111b
(1) 2350/     BD5 : 32 8F 17            		ld	(wave_Flags),a
(1) 2351/     BD8 : CF                  		rst	8
(1) 2352/     BD9 : 23                  		inc	hl
(1) 2353/     BDA : 23                  		inc	hl
(1) 2354/     BDB : 5E                  		ld	e,(hl)
(1) 2355/     BDC : 23                  		inc	hl
(1) 2356/     BDD : 7E                  		ld	a,(hl)
(1) 2357/     BDE : 23                  		inc	hl
(1) 2358/     BDF : 6E                  		ld	l,(hl)
(1) 2359/     BE0 : 67                  		ld	h,a
(1) 2360/     BE1 : E5                  		push	hl
(1) 2361/     BE2 : 7B                  		ld	a,e
(1) 2362/     BE3 : 01 06 00            		ld	bc,6		; Skip header
(1) 2363/     BE6 : 09                  		add	hl,bc
(1) 2364/     BE7 : CE 00               		adc	a,0
(1) 2365/     BE9 : 22 84 17            		ld	(wave_Start),hl	; Set START point
(1) 2366/     BEC : 32 86 17            		ld	(wave_Start+2),a
(1) 2367/     BEF : E1                  		pop	hl
(1) 2368/     BF0 : 7B                  		ld	a,e
(1) 2369/     BF1 : 11 A3 17            		ld	de,sampleHead
(1) 2370/     BF4 : 01 06 00            		ld	bc,6
(1) 2371/     BF7 : D5                  		push	de
(1) 2372/     BF8 : CF                  		rst	8
(1) 2373/     BF9 : CD 75 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2374/     BFC : E1                  		pop	hl
(1) 2375/     BFD :                     	; hl - temporal header
(1) 2376/     BFD : 5E                  		ld	e,(hl)
(1) 2377/     BFE : 23                  		inc	hl
(1) 2378/     BFF : 56                  		ld	d,(hl)
(1) 2379/     C00 : 23                  		inc	hl
(1) 2380/     C01 : 7E                  		ld	a,(hl)
(1) 2381/     C02 : 23                  		inc	hl
(1) 2382/     C03 : ED 53 87 17         		ld	(wave_Len),de	; LEN
(1) 2383/     C07 : 32 89 17            		ld	(wave_Len+2),a
(1) 2384/     C0A : 5E                  		ld	e,(hl)
(1) 2385/     C0B : 23                  		inc	hl
(1) 2386/     C0C : CF                  		rst	8
(1) 2387/     C0D : 56                  		ld	d,(hl)
(1) 2388/     C0E : 23                  		inc	hl
(1) 2389/     C0F : 7E                  		ld	a,(hl)
(1) 2390/     C10 : 23                  		inc	hl
(1) 2391/     C11 : ED 53 8A 17         		ld	(wave_Loop),de	; LOOP
(1) 2392/     C15 : 32 8C 17            		ld	(wave_Loop+2),a
(1) 2393/     C18 : 11 06 28            		ld	de,2806h	; keys off
(1) 2394/     C1B : CD 62 11            		call	fm_send_1
(1) 2395/     C1E : C1                  		pop	bc
(1) 2396/     C1F : E1                  		pop	hl
(1) 2397/     C20 :                     ; .same_dac:
(1) 2398/     C20 : C9                  		ret
(1) 2399/     C21 :                     
(1) 2400/     C21 :                     ; --------
(1) 2401/     C21 :                     
(1) 2402/     C21 :                     .pwm_ins:
(1) 2403/     C21 : DD E5               		push	ix
(1) 2404/     C23 : E5                  		push	hl
(1) 2405/     C24 : C5                  		push	bc
(1) 2406/     C25 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 2407/     C26 : E6 03               		and	00000011b
(1) 2408/     C28 : 0F                  		rrca
(1) 2409/     C29 : 0F                  		rrca
(1) 2410/     C2A : 4F                  		ld	c,a
(1) 2411/     C2B :                     ; 		ld	(iy+0Ah),a	; 0Ah flags: %SlLR
(1) 2412/     C2B : CF                  		rst	8
(1) 2413/     C2C : 23                  		inc	hl		; Skip ID and Pitch
(1) 2414/     C2D : 23                  		inc	hl
(1) 2415/     C2E : 56                  		ld	d,(hl)
(1) 2416/     C2F : 23                  		inc	hl
(1) 2417/     C30 : 5E                  		ld	e,(hl)
(1) 2418/     C31 : 23                  		inc	hl
(1) 2419/     C32 : 7E                  		ld	a,(hl)
(1) 2420/     C33 : 23                  		inc	hl
(1) 2421/     C34 : 6E                  		ld	l,(hl)
(1) 2422/     C35 : 67                  		ld	h,a
(1) 2423/     C36 : 79                  		ld	a,c
(1) 2424/     C37 : B2                  		or	d
(1) 2425/     C38 : 57                  		ld	d,a
(1) 2426/     C39 : CF                  		rst	8
(1) 2427/     C3A :                     
(1) 2428/     C3A :                     	; de,hl - 32-bit PWM pointer
(1) 2429/     C3A : DD 21 F0 16         		ld	ix,pwmcom
(1) 2430/     C3E : 06 00               		ld	b,0
(1) 2431/     C40 : FD 4E 05            		ld	c,(iy+05h)
(1) 2432/     C43 : DD 09               		add	ix,bc
(1) 2433/     C45 : 01 18 00            		ld	bc,PWOUTF
(1) 2434/     C48 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 2435/     C4A : 01 08 00            		ld	bc,8
(1) 2436/     C4D : DD 72 00            		ld	(ix),d
(1) 2437/     C50 : DD 09               		add	ix,bc
(1) 2438/     C52 : DD 73 00            		ld	(ix),e
(1) 2439/     C55 : DD 09               		add	ix,bc
(1) 2440/     C57 : DD 74 00            		ld	(ix),h
(1) 2441/     C5A : DD 09               		add	ix,bc
(1) 2442/     C5C : DD 75 00            		ld	(ix),l
(1) 2443/     C5F : C1                  		pop	bc
(1) 2444/     C60 : E1                  		pop	hl
(1) 2445/     C61 : DD E1               		pop	ix
(1) 2446/     C63 : C9                  		ret
(1) 2447/     C64 :                     
(1) 2448/     C64 :                     ; ----------------------------------------
(1) 2449/     C64 :                     ; NEW note
(1) 2450/     C64 :                     ; ----------------------------------------
(1) 2451/     C64 :                     
(1) 2452/     C64 :                     .note:
(1) 2453/     C64 : 78                  		ld	a,b		; Volume bit?
(1) 2454/     C65 : E6 04               		and	0100b
(1) 2455/     C67 : 20 05               		jr	nz,.fm_hasvol
(1) 2456/     C69 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 2457/     C6D : CF                  		rst	8
(1) 2458/     C6E :                     .fm_hasvol:
(1) 2459/     C6E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2460/     C71 : 4F                  		ld	c,a
(1) 2461/     C72 : FE FF               		cp	-1
(1) 2462/     C74 : C8                  		ret	z
(1) 2463/     C75 : FE FE               		cp	-2
(1) 2464/     C77 : C8                  		ret	z
(1) 2465/     C78 : 7E                  		ld	a,(hl)
(1) 2466/     C79 : E6 F0               		and	11110000b
(1) 2467/     C7B : FE 80               		cp	80h
(1) 2468/     C7D : 28 12               		jr	z,.n_indx
(1) 2469/     C7F : CF                  		rst	8
(1) 2470/     C80 : FE 90               		cp	90h
(1) 2471/     C82 : 28 1C               		jr	z,.n_psgn
(1) 2472/     C84 : FE A0               		cp	0A0h
(1) 2473/     C86 : 28 1D               		jr	z,.n_fm
(1) 2474/     C88 :                     ; 		cp	0B0h		; ** Can't use notes on FM3 **
(1) 2475/     C88 :                     ; 		jr	z,.n_fm
(1) 2476/     C88 : FE C0               		cp	0C0h
(1) 2477/     C8A : 28 05               		jr	z,.n_indx
(1) 2478/     C8C : FE D0               		cp	0D0h
(1) 2479/     C8E : 28 01               		jr	z,.n_indx
(1) 2480/     C90 : C9                  		ret
(1) 2481/     C91 :                     
(1) 2482/     C91 :                     ; --------------------------------
(1) 2483/     C91 :                     
(1) 2484/     C91 :                     .n_indx:
(1) 2485/     C91 : 79                  		ld	a,c
(1) 2486/     C92 :                     .n_stfreq:
(1) 2487/     C92 : 23                  		inc	hl		; Skip ID
(1) 2488/     C93 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2489/     C94 : 2B                  		dec	hl
(1) 2490/     C95 : 83                  		add	a,e		; Note + pitch
(1) 2491/     C96 : CF                  		rst	8
(1) 2492/     C97 : 87                  		add	a,a		; * 2
(1) 2493/     C98 : FD 77 06            		ld	(iy+06h),a
(1) 2494/     C9B : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 2495/     C9F : C9                  		ret
(1) 2496/     CA0 :                     .n_psgn:
(1) 2497/     CA0 : 79                  		ld	a,c
(1) 2498/     CA1 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 2499/     CA3 : 18 ED               		jr	.n_stfreq
(1) 2500/     CA5 :                     ; FM
(1) 2501/     CA5 :                     .n_fm:
(1) 2502/     CA5 : 79                  		ld	a,c
(1) 2503/     CA6 : 23                  		inc	hl		; Skip ID
(1) 2504/     CA7 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2505/     CA8 : 2B                  		dec	hl
(1) 2506/     CA9 : CF                  		rst	8
(1) 2507/     CAA : 83                  		add	a,e		; Note + pitch
(1) 2508/     CAB :                     	; Search for octave and note
(1) 2509/     CAB : 0E 00               		ld	c,0		; c - octave
(1) 2510/     CAD : 16 07               		ld	d,7
(1) 2511/     CAF :                     .get_oct:
(1) 2512/     CAF : 5F                  		ld	e,a		; e - note
(1) 2513/     CB0 : D6 0C               		sub	12
(1) 2514/     CB2 : B7                  		or	a
(1) 2515/     CB3 : FA BF 0C            		jp	m,.fnd_oct
(1) 2516/     CB6 : 0C                  		inc	c
(1) 2517/     CB7 : CF                  		rst	8
(1) 2518/     CB8 : 00                  		nop	; wave sync
(1) 2519/     CB9 : 00                  		nop
(1) 2520/     CBA : 00                  		nop
(1) 2521/     CBB : 00                  		nop
(1) 2522/     CBC : 15                  		dec	d
(1) 2523/     CBD : 20 F0               		jr	nz,.get_oct
(1) 2524/     CBF :                     .fnd_oct:
(1) 2525/     CBF : 7B                  		ld	a,e
(1) 2526/     CC0 : 87                  		add	a,a		; Note * 2
(1) 2527/     CC1 : E6 1F               		and	00011111b
(1) 2528/     CC3 : CB 09               		rrc	c
(1) 2529/     CC5 : CB 09               		rrc	c
(1) 2530/     CC7 : CB 09               		rrc	c
(1) 2531/     CC9 : B1                  		or	c
(1) 2532/     CCA : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 2533/     CCD : FD 36 07 00         		ld	(iy+07h),0
(1) 2534/     CD1 : C9                  		ret
(1) 2535/     CD2 :                     
(1) 2536/     CD2 :                     ; ----------------------------------------
(1) 2537/     CD2 :                     
(1) 2538/     CD2 :                     .fm_keyoff:
(1) 2539/     CD2 : 16 28               		ld	d,28h
(1) 2540/     CD4 : FD 5E 05            		ld	e,(iy+05h)
(1) 2541/     CD7 : C3 62 11            		jp	fm_send_1
(1) 2542/     CDA :                     .fm_tloff:
(1) 2543/     CDA : 06 04               		ld	b,4
(1) 2544/     CDC : FD 4E 05            		ld	c,(iy+05h)
(1) 2545/     CDF : 79                  		ld	a,c
(1) 2546/     CE0 : E6 03               		and	011b
(1) 2547/     CE2 : F6 40               		or	40h	; TL regs
(1) 2548/     CE4 :                     .tl_down:
(1) 2549/     CE4 : 57                  		ld	d,a
(1) 2550/     CE5 : 1E 7F               		ld	e,7Fh
(1) 2551/     CE7 : CD 59 11            		call	fm_autoreg
(1) 2552/     CEA : CF                  		rst	8
(1) 2553/     CEB : 7A                  		ld	a,d
(1) 2554/     CEC : C6 04               		add	a,4
(1) 2555/     CEE : 10 F4               		djnz	.tl_down
(1) 2556/     CF0 : C9                  		ret
(1) 2557/     CF1 :                     ; c - KeyID
(1) 2558/     CF1 :                     .fm_setfreq:
(1) 2559/     CF1 : 79                  		ld	a,c
(1) 2560/     CF2 : E6 03               		and	011b
(1) 2561/     CF4 : F6 A4               		or	0A4h
(1) 2562/     CF6 : 57                  		ld	d,a
(1) 2563/     CF7 : 5C                  		ld	e,h
(1) 2564/     CF8 : CF                  		rst	8
(1) 2565/     CF9 : CD 59 11            		call	fm_autoreg
(1) 2566/     CFC : 79                  		ld	a,c
(1) 2567/     CFD : E6 03               		and	011b
(1) 2568/     CFF : F6 A0               		or	0A0h
(1) 2569/     D01 : 57                  		ld	d,a
(1) 2570/     D02 : 5D                  		ld	e,l
(1) 2571/     D03 : CD 59 11            		call	fm_autoreg
(1) 2572/     D06 : CF                  		rst	8
(1) 2573/     D07 : C9                  		ret
(1) 2574/     D08 :                     
(1) 2575/     D08 :                     ; --------------------------------
(1) 2576/     D08 :                     ; WRITE TL volume
(1) 2577/     D08 :                     
(1) 2578/     D08 :                     .fm_wrtlvol:
(1) 2579/     D08 : 21 96 14            		ld	hl,fmcach_list
(1) 2580/     D0B : FD 7E 05            		ld	a,(iy+05h)
(1) 2581/     D0E : E6 07               		and	0111b
(1) 2582/     D10 : 16 00               		ld	d,0
(1) 2583/     D12 : CF                  		rst	8
(1) 2584/     D13 : 87                  		add	a,a
(1) 2585/     D14 : 5F                  		ld	e,a
(1) 2586/     D15 : 19                  		add	hl,de
(1) 2587/     D16 : 7E                  		ld	a,(hl)
(1) 2588/     D17 : 23                  		inc	hl
(1) 2589/     D18 : 66                  		ld	h,(hl)
(1) 2590/     D19 : 6F                  		ld	l,a
(1) 2591/     D1A : 23                  		inc	hl
(1) 2592/     D1B : 23                  		inc	hl
(1) 2593/     D1C : 23                  		inc	hl
(1) 2594/     D1D : CF                  		rst	8
(1) 2595/     D1E : 23                  		inc	hl		; Point to TL's
(1) 2596/     D1F : FD 7E 05            		ld	a,(iy+05h)
(1) 2597/     D22 : E6 03               		and	011b
(1) 2598/     D24 : F6 40               		or	40h		; TL registers
(1) 2599/     D26 : 57                  		ld	d,a
(1) 2600/     D27 :                     ; d - 40h+
(1) 2601/     D27 :                     ; hl - TL data
(1) 2602/     D27 :                     ; .fm_wrtlvol:
(1) 2603/     D27 : C5                  		push	bc
(1) 2604/     D28 : E5                  		push	hl
(1) 2605/     D29 : 21 7A 0D            		ld	hl,.fm_cindx
(1) 2606/     D2C : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2607/     D2F : E6 07               		and	0111b
(1) 2608/     D31 : 06 00               		ld	b,0
(1) 2609/     D33 : 4F                  		ld	c,a
(1) 2610/     D34 : 09                  		add	hl,bc
(1) 2611/     D35 : FD 7E 08            		ld	a,(iy+08h)
(1) 2612/     D38 : CB 2F               		sra	a		; volume / 2
(1) 2613/     D3A : E6 7F               		and	01111111b
(1) 2614/     D3C : 4F                  		ld	c,a
(1) 2615/     D3D : CF                  		rst	8
(1) 2616/     D3E : 46                  		ld	b,(hl)
(1) 2617/     D3F : E1                  		pop	hl
(1) 2618/     D40 : CB 08               		rrc	b		; OP1
(1) 2619/     D42 : DC 6D 0D            		call	c,.write_tl
(1) 2620/     D45 : 23                  		inc	hl
(1) 2621/     D46 : 14                  		inc	d
(1) 2622/     D47 : 14                  		inc	d
(1) 2623/     D48 : CF                  		rst	8
(1) 2624/     D49 : 14                  		inc	d
(1) 2625/     D4A : 14                  		inc	d
(1) 2626/     D4B : CB 08               		rrc	b		; OP2
(1) 2627/     D4D : DC 6D 0D            		call	c,.write_tl
(1) 2628/     D50 : 23                  		inc	hl
(1) 2629/     D51 : 14                  		inc	d
(1) 2630/     D52 : 14                  		inc	d
(1) 2631/     D53 : 14                  		inc	d
(1) 2632/     D54 : 14                  		inc	d
(1) 2633/     D55 : CB 08               		rrc	b		; OP3
(1) 2634/     D57 : DC 6D 0D            		call	c,.write_tl
(1) 2635/     D5A : 23                  		inc	hl
(1) 2636/     D5B : CF                  		rst	8
(1) 2637/     D5C : 14                  		inc	d
(1) 2638/     D5D : 14                  		inc	d
(1) 2639/     D5E : 14                  		inc	d
(1) 2640/     D5F : 14                  		inc	d
(1) 2641/     D60 : CB 08               		rrc	b		; OP4
(1) 2642/     D62 : DC 6D 0D            		call	c,.write_tl
(1) 2643/     D65 : 23                  		inc	hl
(1) 2644/     D66 : 14                  		inc	d
(1) 2645/     D67 : 14                  		inc	d
(1) 2646/     D68 : 14                  		inc	d
(1) 2647/     D69 : 14                  		inc	d
(1) 2648/     D6A : CF                  		rst	8
(1) 2649/     D6B : C1                  		pop	bc
(1) 2650/     D6C : C9                  		ret
(1) 2651/     D6D :                     .write_tl:
(1) 2652/     D6D : 7E                  		ld	a,(hl)
(1) 2653/     D6E : 91                  		sub	a,c
(1) 2654/     D6F : C5                  		push	bc
(1) 2655/     D70 : 5F                  		ld	e,a
(1) 2656/     D71 : FD 4E 05            		ld	c,(iy+05h)
(1) 2657/     D74 : CD 59 11            		call	fm_autoreg
(1) 2658/     D77 : CF                  		rst	8
(1) 2659/     D78 : C1                  		pop	bc
(1) 2660/     D79 : C9                  		ret
(1) 2661/     D7A :                     ; Jump carry list
(1) 2662/     D7A :                     .fm_cindx:
(1) 2663/     D7A : 08                  		db 1000b
(1) 2664/     D7B : 08                  		db 1000b
(1) 2665/     D7C : 08                  		db 1000b
(1) 2666/     D7D : 08                  		db 1000b
(1) 2667/     D7E : 0C                  		db 1100b
(1) 2668/     D7F : 0E                  		db 1110b
(1) 2669/     D80 : 0E                  		db 1110b
(1) 2670/     D81 : 0F                  		db 1111b
(1) 2671/     D82 :                     ; c - KeyId
(1) 2672/     D82 :                     .fm_wrtalpan:
(1) 2673/     D82 : FD 7E 0C            		ld	a,(iy+0Ch)	; 0B0h algorithm
(1) 2674/     D85 : 5F                  		ld	e,a
(1) 2675/     D86 : 79                  		ld	a,c
(1) 2676/     D87 : E6 03               		and	011b
(1) 2677/     D89 : F6 B0               		or	0B0h
(1) 2678/     D8B : 57                  		ld	d,a
(1) 2679/     D8C : CD 59 11            		call	fm_autoreg
(1) 2680/     D8F : CF                  		rst	8
(1) 2681/     D90 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2682/     D93 : 2F                  		cpl				; REVERSE bits
(1) 2683/     D94 : E6 C0               		and	11000000b
(1) 2684/     D96 : 5F                  		ld	e,a
(1) 2685/     D97 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2686/     D9A : E6 3F               		and	00111111b
(1) 2687/     D9C : B3                  		or	e
(1) 2688/     D9D : 5F                  		ld	e,a
(1) 2689/     D9E : 79                  		ld	a,c
(1) 2690/     D9F : E6 03               		and	011b
(1) 2691/     DA1 : F6 B4               		or	0B4h
(1) 2692/     DA3 : 57                  		ld	d,a
(1) 2693/     DA4 : CD 59 11            		call	fm_autoreg
(1) 2694/     DA7 : CF                  		rst	8
(1) 2695/     DA8 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2696/     DAB : CB 5F               		bit	3,a
(1) 2697/     DAD : 28 06               		jr	z,.no_lfo
(1) 2698/     DAF : 5F                  		ld	e,a
(1) 2699/     DB0 : 16 22               		ld	d,22h
(1) 2700/     DB2 : CD 62 11            		call	fm_send_1
(1) 2701/     DB5 :                     .no_lfo:
(1) 2702/     DB5 : C9                  		ret
(1) 2703/     DB6 :                     
(1) 2704/     DB6 :                     ; ----------------------------------------
(1) 2705/     DB6 :                     
(1) 2706/     DB6 :                     .chnl_ulnkoff:
(1) 2707/     DB6 : 0E 00               		ld	c,0
(1) 2708/     DB8 :                     .chnl_ulnk:
(1) 2709/     DB8 : CF                  		rst	8
(1) 2710/     DB9 : AF                  		xor	a
(1) 2711/     DBA : DD 77 01            		ld	(ix+chnl_Chip),a
(1) 2712/     DBD : FD 77 00            		ld	(iy),a		; Delete link, chip and prio
(1) 2713/     DC0 : FD 77 01            		ld	(iy+1),a
(1) 2714/     DC3 : FD 71 02            		ld	(iy+2),c
(1) 2715/     DC6 : C9                  		ret
(1) 2716/     DC7 :                     .chnl_ulnkcut:
(1) 2717/     DC7 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 2718/     DCA : CD B8 0D            		call	.chnl_ulnk
(1) 2719/     DCD : FD 77 08            		ld	(iy+08h),a
(1) 2720/     DD0 : FD 77 09            		ld	(iy+09h),a
(1) 2721/     DD3 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2722/     DD6 : FD 77 0B            		ld	(iy+0Bh),a
(1) 2723/     DD9 :                     ; 		push	iy
(1) 2724/     DD9 :                     ; 		pop	hl
(1) 2725/     DD9 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 2726/     DD9 :                     ; 		add	hl,bc
(1) 2727/     DD9 :                     ; 		rst	8
(1) 2728/     DD9 :                     ; 		ld	b,8/2
(1) 2729/     DD9 :                     ; .clrfull:
(1) 2730/     DD9 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 2731/     DD9 :                     ; 		inc	hl
(1) 2732/     DD9 :                     ; 		ld	(hl),0
(1) 2733/     DD9 :                     ; 		inc	hl
(1) 2734/     DD9 :                     ; 		rst	8
(1) 2735/     DD9 :                     ; 		djnz	.clrfull
(1) 2736/     DD9 : C9                  		ret
(1) 2737/     DDA :                     
(1) 2738/     DDA :                     ; ============================================================
(1) 2739/     DDA :                     ; --------------------------------------------------------
(1) 2740/     DDA :                     ; Communicate with the 32X from here.
(1) 2741/     DDA :                     ; --------------------------------------------------------
(1) 2742/     DDA :                     
(1) 2743/     DDA :                     ex_comm:
(1) 2744/     DDA : CF                  		rst	8
(1) 2745/     DDB : 00                  		nop
(1) 2747/     DDC : 3A 82 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 2748/     DDF : B7                  		or	a
(1) 2749/     DE0 : C2 7A 0E            		jp	nz,.blocked
(1) 2750/     DE3 : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg (now $A15100)
(1) 2751/     DE7 : DD 21 F0 16         		ld	ix,pwmcom
(1) 2752/     DEB :                     ; 		ld	hl,6000h	; Point BANK closely to the 32X area ($A10000)
(1) 2753/     DEB :                     ; 		ld	(hl),0
(1) 2754/     DEB :                     ; 		ld	(hl),1
(1) 2755/     DEB :                     ; 		rst	8
(1) 2756/     DEB :                     ; 		ld	(hl),0
(1) 2757/     DEB :                     ; 		ld	(hl),0
(1) 2758/     DEB :                     ; 		ld	(hl),0
(1) 2759/     DEB :                     ; 		ld	(hl),0
(1) 2760/     DEB :                     ; 		ld	(hl),1
(1) 2761/     DEB :                     ; 		ld	(hl),0
(1) 2762/     DEB :                     ; 		ld	(hl),1
(1) 2763/     DEB :                     	; SLOW bankswitch to keep
(1) 2764/     DEB :                     	; the wave playback stable.
(1) 2765/     DEB : AF                  		xor	a
(1) 2766/     DEC : 32 00 60            		ld	(6000h),a	; 0
(1) 2767/     DEF : 3E A1               		ld	a,10100001b
(1) 2768/     DF1 : 32 00 60            		ld	(6000h),a	; 1
(1) 2769/     DF4 : 0F                  		rrca
(1) 2770/     DF5 : 32 00 60            		ld	(6000h),a	; 0
(1) 2771/     DF8 : 0F                  		rrca
(1) 2772/     DF9 : 32 00 60            		ld	(6000h),a	; 0
(1) 2773/     DFC : 0F                  		rrca
(1) 2774/     DFD : 32 00 60            		ld	(6000h),a	; 0
(1) 2775/     E00 : CF                  		rst	8
(1) 2776/     E01 : 0F                  		rrca
(1) 2777/     E02 : 32 00 60            		ld	(6000h),a	; 0
(1) 2778/     E05 : 0F                  		rrca
(1) 2779/     E06 : 32 00 60            		ld	(6000h),a	; 1
(1) 2780/     E09 : 0F                  		rrca
(1) 2781/     E0A : 32 00 60            		ld	(6000h),a	; 0
(1) 2782/     E0D : 0F                  		rrca
(1) 2783/     E0E : 32 00 60            		ld	(6000h),a	; 1
(1) 2784/     E11 : CF                  		rst	8
(1) 2785/     E12 : 3A 3F 00            		ld	a,(marsUpd)	; NEW transfer?
(1) 2786/     E15 : B7                  		or	a
(1) 2787/     E16 : C8                  		ret	z
(1) 2788/     E17 : AF                  		xor	a
(1) 2789/     E18 : 32 3F 00            		ld	(marsUpd),a
(1) 2790/     E1B :                     .wait_enter:
(1) 2791/     E1B : 00                  		nop
(1) 2792/     E1C : 00                  		nop
(1) 2793/     E1D : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 2794/     E20 : CB 7F               		bit	7,a
(1) 2795/     E22 : 20 F7               		jr	nz,.wait_enter
(1) 2796/     E24 : E6 F0               		and	11110000b
(1) 2797/     E26 : F6 01               		or	1		; Set CMD task mode $01
(1) 2798/     E28 : FD 77 2E            		ld	(iy+comm14),a
(1) 2799/     E2B : CF                  		rst	8
(1) 2800/     E2C : E6 0F               		and	00001111b	; Did it write?
(1) 2801/     E2E : FE 01               		cp	1
(1) 2802/     E30 : 20 E9               		jr	nz,.wait_enter	; If not, retry.
(1) 2803/     E32 : FD CB 2E FE         		set	7,(iy+comm14)	; Lock bit
(1) 2804/     E36 : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 2805/     E3A : 00                  		nop
(1) 2806/     E3B : 00                  		nop
(1) 2807/     E3C : 00                  		nop
(1) 2808/     E3D : 00                  		nop
(1) 2809/     E3E : 00                  		nop
(1) 2810/     E3F : CF                  		rst	8
(1) 2811/     E40 : 00                  		nop
(1) 2812/     E41 : 00                  		nop
(1) 2813/     E42 : 00                  		nop
(1) 2814/     E43 : 00                  		nop
(1) 2815/     E44 : 00                  		nop
(1) 2816/     E45 :                     ; .wait_cmd:
(1) 2817/     E45 :                     ; 		bit	1,(iy+standby)
(1) 2818/     E45 :                     ; 		jr	nz,.wait_cmd
(1) 2819/     E45 : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 2820/     E47 :                     .next_pass:
(1) 2821/     E47 : CF                  		rst	8
(1) 2822/     E48 : FD E5               		push	iy
(1) 2823/     E4A : E1                  		pop	hl
(1) 2824/     E4B : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 2825/     E4E : 19                  		add	hl,de
(1) 2826/     E4F : 06 02               		ld	b,2
(1) 2827/     E51 : CF                  		rst	8
(1) 2828/     E52 :                     .next_comm:
(1) 2829/     E52 : DD 56 00            		ld	d,(ix)
(1) 2830/     E55 : DD 5E 01            		ld	e,(ix+1)
(1) 2831/     E58 : DD 23               		inc	ix
(1) 2832/     E5A : DD 23               		inc	ix
(1) 2833/     E5C : CF                  		rst	8
(1) 2834/     E5D : 72                  		ld	(hl),d
(1) 2835/     E5E : 23                  		inc	hl
(1) 2836/     E5F : 73                  		ld	(hl),e
(1) 2837/     E60 : 23                  		inc	hl
(1) 2838/     E61 : 10 EF               		djnz	.next_comm
(1) 2839/     E63 : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 2840/     E67 : CF                  		rst	8
(1) 2841/     E68 :                     .w_pass2:
(1) 2842/     E68 : 00                  		nop
(1) 2843/     E69 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 2844/     E6D : 20 F9               		jr	nz,.w_pass2
(1) 2845/     E6F : 0D                  		dec	c
(1) 2846/     E70 : 20 D5               		jr	nz,.next_pass
(1) 2847/     E72 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 2848/     E76 : FD CB 2E B6         		res	6,(iy+comm14)	; Clear CLK
(1) 2849/     E7A :                     .blocked:
(1) 2850/     E7A : CF                  		rst	8
(1) 2851/     E7B : 21 F0 16            		ld	hl,pwmcom
(1) 2852/     E7E : 06 07               		ld	b,7		; MAX PWM channels
(1) 2853/     E80 : AF                  		xor	a
(1) 2854/     E81 :                     .clrcom:
(1) 2855/     E81 : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 2856/     E82 : 23                  		inc	hl
(1) 2857/     E83 : 10 FC               		djnz	.clrcom
(1) 2859/     E85 : C9                  		ret
(1) 2860/     E86 :                     
(1) 2861/     E86 :                     ; ====================================================================
(1) 2862/     E86 :                     ; ----------------------------------------------------------------
(1) 2863/     E86 :                     ; Subroutines
(1) 2864/     E86 :                     ; ----------------------------------------------------------------
(1) 2865/     E86 :                     
(1) 2866/     E86 :                     ; --------------------------------------------------------
(1) 2867/     E86 :                     ; Init sound engine
(1) 2868/     E86 :                     ; --------------------------------------------------------
(1) 2869/     E86 :                     
(1) 2870/     E86 :                     gema_init:
(1) 2871/     E86 : CD 8D 11            		call	dac_off
(1) 2872/     E89 : 3E 00               		ld	a,0
(1) 2873/     E8B : 32 3F 00            		ld	(marsUpd),a
(1) 2874/     E8E : 21 00 1D            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2875/     E91 : 11 01 1D            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2876/     E94 : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2877/     E97 : 36 80               		ld	(hl),80h	; Set first byte
(1) 2878/     E99 : ED B0               		ldir			; Start copying
(1) 2879/     E9B : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2880/     E9E : 36 9F               		ld	(hl),09Fh
(1) 2881/     EA0 : 36 BF               		ld	(hl),0BFh
(1) 2882/     EA2 : 36 DF               		ld	(hl),0DFh
(1) 2883/     EA4 : 36 FF               		ld	(hl),0FFh
(1) 2884/     EA6 : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 2885/     EA9 : CD 62 11            		call	fm_send_1
(1) 2886/     EAC : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2887/     EAF : CD 62 11            		call	fm_send_1
(1) 2888/     EB2 : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2889/     EB5 : CD 62 11            		call	fm_send_1
(1) 2890/     EB8 : 1C                  		inc	e
(1) 2891/     EB9 : CD 62 11            		call	fm_send_1
(1) 2892/     EBC : 1C                  		inc	e
(1) 2893/     EBD : CD 62 11            		call	fm_send_1
(1) 2894/     EC0 : 1C                  		inc	e
(1) 2895/     EC1 : 1C                  		inc	e
(1) 2896/     EC2 : CD 62 11            		call	fm_send_1
(1) 2897/     EC5 : 1C                  		inc	e
(1) 2898/     EC6 : CD 62 11            		call	fm_send_1
(1) 2899/     EC9 : 1C                  		inc	e
(1) 2900/     ECA : CD 62 11            		call	fm_send_1
(1) 2901/     ECD : 21 00 60            		ld	hl,6000h
(1) 2902/     ED0 : 3E 01               		ld	a,1
(1) 2903/     ED2 : 77                  		ld	(hl),a
(1) 2904/     ED3 : 77                  		ld	(hl),a
(1) 2905/     ED4 : 77                  		ld	(hl),a
(1) 2906/     ED5 : 77                  		ld	(hl),a
(1) 2907/     ED6 : 77                  		ld	(hl),a
(1) 2908/     ED7 : 77                  		ld	(hl),a
(1) 2909/     ED8 : 77                  		ld	(hl),a
(1) 2910/     ED9 : 77                  		ld	(hl),a
(1) 2911/     EDA : 77                  		ld	(hl),a
(1) 2912/     EDB : FD 21 A4 14         		ld	iy,nikona_BuffList
(1) 2913/     EDF : 0E 01               		ld	c,1		; Start at this priority
(1) 2914/     EE1 :                     .setup_list:
(1) 2915/     EE1 : FD 7E 00            		ld	a,(iy)
(1) 2916/     EE4 : FE FF               		cp	-1
(1) 2917/     EE6 : 28 44               		jr	z,.end_setup
(1) 2918/     EE8 : FD 23               		inc	iy
(1) 2919/     EEA : 6F                  		ld	l,a
(1) 2920/     EEB : FD 66 00            		ld	h,(iy)
(1) 2921/     EEE : E5                  		push	hl
(1) 2922/     EEF : DD E1               		pop	ix
(1) 2923/     EF1 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 2924/     EF4 : DD 36 01 FF         		ld	(ix+trk_seqId),-1	; Reset sequence ID
(1) 2925/     EF8 : FD 23               		inc	iy
(1) 2926/     EFA : 11 26 00            		ld	de,trk_ChnList		; ** settings
(1) 2927/     EFD : 19                  		add	hl,de
(1) 2928/     EFE :                     	; iy - src
(1) 2929/     EFE :                     	; hl - dst
(1) 2930/     EFE : 06 0A               		ld	b,5*2
(1) 2931/     F00 :                     .st_copy:
(1) 2932/     F00 : FD 7E 00            		ld	a,(iy)
(1) 2933/     F03 : 77                  		ld	(hl),a
(1) 2934/     F04 : FD 23               		inc	iy
(1) 2935/     F06 : 23                  		inc	hl
(1) 2936/     F07 : 10 F7               		djnz	.st_copy
(1) 2937/     F09 : 0C                  		inc	c
(1) 2938/     F0A : FD 7E 00            		ld	a,(iy)			; MAX blocks
(1) 2939/     F0D : DD 77 1D            		ld	(ix+trk_MaxBlks),a
(1) 2940/     F10 : FD 23               		inc	iy
(1) 2941/     F12 : FD 7E 00            		ld	a,(iy)			; MAX heads
(1) 2942/     F15 : DD 77 1E            		ld	(ix+trk_MaxHdrs),a
(1) 2943/     F18 : FD 23               		inc	iy
(1) 2944/     F1A : FD 7E 00            		ld	a,(iy)			; MAX intruments
(1) 2945/     F1D : DD 77 1F            		ld	(ix+trk_MaxIns),a
(1) 2946/     F20 : FD 23               		inc	iy
(1) 2947/     F22 : FD 7E 00            		ld	a,(iy)			; MAX channels
(1) 2948/     F25 : DD 77 1C            		ld	(ix+trk_MaxChnls),a
(1) 2949/     F28 : FD 23               		inc	iy
(1) 2950/     F2A : 18 B5               		jr	.setup_list
(1) 2951/     F2C :                     .end_setup:
(1) 2952/     F2C : 1E 00               		ld	e,0
(1) 2953/     F2E : 3E FF               		ld	a,-1			; Reset
(1) 2954/     F30 : 32 3E 00            		ld	(trkListPage),a
(1) 2955/     F33 : C9                  		ret
(1) 2956/     F34 :                     
(1) 2957/     F34 :                     ; --------------------------------------------------------
(1) 2958/     F34 :                     ; get_tick
(1) 2959/     F34 :                     ;
(1) 2960/     F34 :                     ; Checks if VBlank triggred a TICK
(1) 2961/     F34 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 2962/     F34 :                     ; --------------------------------------------------------
(1) 2963/     F34 :                     
(1) 2964/     F34 :                     get_tick:
(1) 2965/     F34 : F3                  		di				; Disable ints
(1) 2966/     F35 : F5                  		push	af
(1) 2967/     F36 : E5                  		push	hl
(1) 2968/     F37 : 21 91 17            		ld	hl,tickFlag		; read last TICK flag
(1) 2969/     F3A : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 2970/     F3B : B7                  		or 	a
(1) 2971/     F3C : 28 13               		jr	z,.ctnotick
(1) 2972/     F3E : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 2973/     F40 : 23                  		inc	hl			; Move to tickCnt
(1) 2974/     F41 : 34                  		inc	(hl)			; and increment
(1) 2975/     F42 : CF                  		rst	8
(1) 2976/     F43 : D5                  		push	de
(1) 2977/     F44 : 2A 1C 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 2978/     F47 : ED 5B 1E 00         		ld	de,(sbeatPtck)
(1) 2979/     F4B : CF                  		rst	8
(1) 2980/     F4C : 19                  		add	hl,de
(1) 2981/     F4D : 22 1C 00            		ld	(sbeatAcc),hl
(1) 2982/     F50 : D1                  		pop	de
(1) 2983/     F51 :                     .ctnotick:
(1) 2984/     F51 : E1                  		pop	hl
(1) 2985/     F52 : F1                  		pop	af
(1) 2986/     F53 : FB                  		ei				; Enable ints again
(1) 2987/     F54 : C9                  		ret
(1) 2988/     F55 :                     
(1) 2989/     F55 :                     ; --------------------------------------------------------
(1) 2990/     F55 :                     ; showRom
(1) 2991/     F55 :                     ; Get ROM bank position.
(1) 2992/     F55 :                     ;
(1) 2993/     F55 :                     ; Input:
(1) 2994/     F55 :                     ;  b - 68k address $xx0000
(1) 2995/     F55 :                     ; hl - 68k address $00xxxx
(1) 2996/     F55 :                     ;
(1) 2997/     F55 :                     ; Output:
(1) 2998/     F55 :                     ; hl - ROM position ready to use for reading
(1) 2999/     F55 :                     ; --------------------------------------------------------
(1) 3000/     F55 :                     
(1) 3001/     F55 :                     showRom:
(1) 3002/     F55 : CF                  		rst	8
(1) 3003/     F56 : D5                  		push	de
(1) 3004/     F57 : C5                  		push	bc
(1) 3005/     F58 : 11 00 60            		ld	de,6000h
(1) 3006/     F5B : 7C                  		ld	a,h
(1) 3007/     F5C : 07                  		rlca
(1) 3008/     F5D : CF                  		rst	8
(1) 3009/     F5E : 12                  		ld	(de),a
(1) 3010/     F5F : 78                  		ld	a,b
(1) 3011/     F60 : 12                  		ld	(de),a
(1) 3012/     F61 : 1F                  		rra
(1) 3013/     F62 : 12                  		ld	(de),a
(1) 3014/     F63 : 1F                  		rra
(1) 3015/     F64 : 12                  		ld	(de),a
(1) 3016/     F65 : 1F                  		rra
(1) 3017/     F66 : CF                  		rst	8
(1) 3018/     F67 : 12                  		ld	(de),a
(1) 3019/     F68 : 1F                  		rra
(1) 3020/     F69 : 12                  		ld	(de),a
(1) 3021/     F6A : 1F                  		rra
(1) 3022/     F6B : 12                  		ld	(de),a
(1) 3023/     F6C : 1F                  		rra
(1) 3024/     F6D : 12                  		ld	(de),a
(1) 3025/     F6E : 1F                  		rra
(1) 3026/     F6F : 12                  		ld	(de),a
(1) 3027/     F70 : C1                  		pop	bc
(1) 3028/     F71 : D1                  		pop	de
(1) 3029/     F72 : CB FC               		set	7,h
(1) 3030/     F74 : C9                  		ret
(1) 3031/     F75 :                     
(1) 3032/     F75 :                     ; --------------------------------------------------------
(1) 3033/     F75 :                     ; transferRom
(1) 3034/     F75 :                     ;
(1) 3035/     F75 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3036/     F75 :                     ; to 68k that we want to access ROM
(1) 3037/     F75 :                     ;
(1) 3038/     F75 :                     ; Input:
(1) 3039/     F75 :                     ; a  - 68K Address $xx0000
(1) 3040/     F75 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3041/     F75 :                     ; hl - 68K Address $00xxxx
(1) 3042/     F75 :                     ; de - Destination pointer
(1) 3043/     F75 :                     ;
(1) 3044/     F75 :                     ; Uses:
(1) 3045/     F75 :                     ; b
(1) 3046/     F75 :                     ;
(1) 3047/     F75 :                     ; Notes:
(1) 3048/     F75 :                     ; call RST 20h first if transfering anything other
(1) 3049/     F75 :                     ; than sample data, just to be safe.
(1) 3050/     F75 :                     ; --------------------------------------------------------
(1) 3051/     F75 :                     
(1) 3052/     F75 :                     transferRom:
(1) 3053/     F75 : CF                  		rst	8
(1) 3054/     F76 : DD E5               		push	ix
(1) 3055/     F78 : DD 21 81 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3056/     F7C : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3057/     F7F : CB BC               		res	7,h
(1) 3058/     F81 : 06 00               		ld	b,0
(1) 3059/     F83 : 0B                  		dec	bc
(1) 3060/     F84 : 09                  		add	hl,bc
(1) 3061/     F85 : CB 7C               		bit	7,h
(1) 3062/     F87 : 20 0B               		jr	nz,.double
(1) 3063/     F89 : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3064/     F8C : 0C                  		inc	c
(1) 3065/     F8D : 47                  		ld	b,a
(1) 3066/     F8E : CD B8 0F            		call	.transfer
(1) 3067/     F91 : DD E1               		pop	ix
(1) 3068/     F93 : C9                  		ret
(1) 3069/     F94 :                     .double:
(1) 3070/     F94 : CF                  		rst	8
(1) 3071/     F95 : 47                  		ld	b,a		; double transfer
(1) 3072/     F96 : C5                  		push	bc
(1) 3073/     F97 : E5                  		push	hl
(1) 3074/     F98 : 79                  		ld	a,c
(1) 3075/     F99 : 95                  		sub	a,l
(1) 3076/     F9A : 4F                  		ld	c,a
(1) 3077/     F9B : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 3078/     F9E : CD B8 0F            		call	.transfer
(1) 3079/     FA1 : E1                  		pop	hl
(1) 3080/     FA2 : C1                  		pop	bc
(1) 3081/     FA3 :                     ; 		rst	8
(1) 3082/     FA3 : 4D                  		ld	c,l
(1) 3083/     FA4 : 0C                  		inc	c
(1) 3084/     FA5 : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 3085/     FA8 : E6 80               		and	80h
(1) 3086/     FAA : C6 80               		add	a,80h
(1) 3087/     FAC : 67                  		ld	h,a
(1) 3088/     FAD : 2E 00               		ld	l,0
(1) 3089/     FAF : 30 01               		jr	nc,.x68knocarry
(1) 3090/     FB1 : 04                  		inc	b
(1) 3091/     FB2 :                     .x68knocarry:
(1) 3092/     FB2 : CD B8 0F            		call	.transfer
(1) 3093/     FB5 : DD E1               		pop	ix
(1) 3094/     FB7 : C9                  		ret
(1) 3095/     FB8 :                     
(1) 3096/     FB8 :                     ; ------------------------------------------------
(1) 3097/     FB8 :                     ; b  - Source ROM xx0000
(1) 3098/     FB8 :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3099/     FB8 :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3100/     FB8 :                     ; de - Destination address
(1) 3101/     FB8 :                     ; ix - Location of the ROM block flag(s)
(1) 3102/     FB8 :                     ;
(1) 3103/     FB8 :                     ; Uses:
(1) 3104/     FB8 :                     ; a
(1) 3105/     FB8 :                     ; ------------------------------------------------
(1) 3106/     FB8 :                     
(1) 3107/     FB8 :                     .transfer:
(1) 3108/     FB8 : CD 55 0F            		call	showRom		; Pick ROM bank
(1) 3109/     FBB :                     
(1) 3110/     FBB :                     	; Transfer ROM data in packets
(1) 3111/     FBB :                     	; while playing the cache'd sample
(1) 3112/     FBB :                     	; *** CRITICAL PROCESS ***
(1) 3113/     FBB :                     	;
(1) 3114/     FBB :                     	; pseudo-reference
(1) 3115/     FBB :                     	; for ldir:
(1) 3116/     FBB :                     	; ld (de),(hl)	; load (hl) to (de), no a
(1) 3117/     FBB :                     	; inc de	; next de
(1) 3118/     FBB :                     	; inc hl	; next hl
(1) 3119/     FBB :                     	; dec bc	; decrement bc
(1) 3120/     FBB :                     	;
(1) 3121/     FBB : 06 00               		ld	b,0
(1) 3122/     FBD : 79                  		ld	a,c		; a - Size counter
(1) 3123/     FBE : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3124/     FC0 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3125/     FC2 :                     .x68kloop:
(1) 3126/     FC2 : CF                  		rst	8
(1) 3127/     FC3 : 00                  		nop
(1) 3128/     FC4 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3129/     FC6 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3130/     FCA : C4 E4 0F            		call	nz,.x68klpwt
(1) 3131/     FCD : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3132/     FCF : CF                  		rst	8
(1) 3133/     FD0 : 00                  		nop
(1) 3134/     FD1 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3135/     FD3 : D2 C2 0F            		jp	nc,.x68kloop
(1) 3136/     FD6 :                     ; last block
(1) 3137/     FD6 :                     .x68klast:
(1) 3138/     FD6 : CF                  		rst	8
(1) 3139/     FD7 : C6 08               		add	a,MAX_TRFRPZ
(1) 3140/     FD9 : 4F                  		ld	c,a
(1) 3141/     FDA : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3142/     FDE : C4 E4 0F            		call	nz,.x68klpwt
(1) 3143/     FE1 : ED B0               		ldir
(1) 3144/     FE3 : C9                  		ret
(1) 3145/     FE4 :                     
(1) 3146/     FE4 :                     ; Wait here until Genesis unlocks ROM
(1) 3147/     FE4 :                     .x68klpwt:
(1) 3148/     FE4 : CF                  		rst	8
(1) 3149/     FE5 : 00                  		nop
(1) 3150/     FE6 : 00                  		nop
(1) 3151/     FE7 : 00                  		nop
(1) 3152/     FE8 : 00                  		nop
(1) 3153/     FE9 :                     .x68kpwtlp:
(1) 3154/     FE9 : CF                  		rst	8
(1) 3155/     FEA : 00                  		nop
(1) 3156/     FEB : 00                  		nop
(1) 3157/     FEC : 00                  		nop
(1) 3158/     FED : 00                  		nop
(1) 3159/     FEE : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3160/     FF2 : 20 F5               		jr	nz,.x68kpwtlp
(1) 3161/     FF4 : CF                  		rst	8
(1) 3162/     FF5 : C9                  		ret
(1) 3163/     FF6 :                     
(1) 3164/     FF6 :                     ; ====================================================================
(1) 3165/     FF6 :                     ; ----------------------------------------------------------------
(1) 3166/     FF6 :                     ; Sound chip routines
(1) 3167/     FF6 :                     ; ----------------------------------------------------------------
(1) 3168/     FF6 :                     
(1) 3169/     FF6 :                     ; --------------------------------------------------------
(1) 3170/     FF6 :                     ; chip_env
(1) 3171/     FF6 :                     ;
(1) 3172/     FF6 :                     ; Process PSG and FM
(1) 3173/     FF6 :                     ; --------------------------------------------------------
(1) 3174/     FF6 :                     
(1) 3175/     FF6 :                     chip_env:
(1) 3176/     FF6 : FD 21 2B 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3177/     FFA : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3178/     FFE : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3179/    1000 : 06 04               		ld	b,4			; b - 4 channels
(1) 3180/    1002 :                     .vloop:
(1) 3181/    1002 : CF                  		rst	8
(1) 3182/    1003 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3183/    1006 : FD 36 00 00         		ld	(iy+COM),0
(1) 3184/    100A :                     
(1) 3185/    100A :                     	; ----------------------------
(1) 3186/    100A :                     	; bit 2 - stop sound
(1) 3187/    100A : CB 53               		bit	2,e
(1) 3188/    100C : 28 0C               		jr	z,.ckof
(1) 3189/    100E : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3190/    1012 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3191/    1016 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3192/    101A :                     .ckof:
(1) 3193/    101A :                     
(1) 3194/    101A :                     	; ----------------------------
(1) 3195/    101A :                     	; bit 1 - key off
(1) 3196/    101A : CB 4B               		bit	1,e
(1) 3197/    101C : 28 0F               		jr      z,.ckon
(1) 3198/    101E : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3199/    1021 : B7                  		or	a
(1) 3200/    1022 : 28 09               		jr	z,.ckon
(1) 3201/    1024 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3202/    1028 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3203/    102C : CF                  		rst	8
(1) 3204/    102D :                     .ckon:
(1) 3205/    102D :                     
(1) 3206/    102D :                     	; ----------------------------
(1) 3207/    102D :                     	; bit 0 - key on
(1) 3208/    102D : CB 43               		bit	0,e
(1) 3209/    102F : 28 1A               		jr	z,.envproc
(1) 3210/    1031 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3211/    1035 : 78                  		ld	a,b
(1) 3212/    1036 : FE 04               		cp	4			; NOISE channel?
(1) 3213/    1038 : 20 08               		jr	nz,.nskip
(1) 3214/    103A : CF                  		rst	8			; Set NOISE mode
(1) 3215/    103B : 3A 93 17            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3216/    103E : B1                  		or	c
(1) 3217/    103F : DD 77 00            		ld	(ix),a
(1) 3218/    1042 :                     .nskip:
(1) 3219/    1042 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3220/    1046 : CF                  		rst	8
(1) 3221/    1047 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3222/    104B :                     .nblock:
(1) 3223/    104B :                     
(1) 3224/    104B :                     	; ----------------------------
(1) 3225/    104B :                     	; Process effects
(1) 3226/    104B :                     	; ----------------------------
(1) 3227/    104B :                     .envproc:
(1) 3228/    104B : FD 7E 18            		ld	a,(iy+MODE)
(1) 3229/    104E : B7                  		or	a			; no modes
(1) 3230/    104F : CA D5 10            		jp	z,.vedlp
(1) 3231/    1052 : FE 01               		cp 	001b			; Attack mode
(1) 3232/    1054 : 20 2C               		jr	nz,.chk2
(1) 3233/    1056 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3234/    105A : FD 5E 24            		ld	e,(iy+ALV)
(1) 3235/    105D : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3236/    1060 : B7                  		or	a
(1) 3237/    1061 : 28 16               		jr	z,.atkend
(1) 3238/    1063 : 57                  		ld	d,a			; c - attack rate
(1) 3239/    1064 : 7B                  		ld	a,e			; a - attack level
(1) 3240/    1065 : CF                  		rst	8
(1) 3241/    1066 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3242/    1069 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3243/    106A : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3244/    106C : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3245/    106E : BB                  		cp	e			; attack rate == level?
(1) 3246/    106F : 38 08               		jr	c,.atkend
(1) 3247/    1071 : 28 06               		jr	z,.atkend
(1) 3248/    1073 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3249/    1076 : CF                  		rst	8
(1) 3250/    1077 : 18 5C               		jr	.vedlp
(1) 3251/    1079 :                     .atkend:
(1) 3252/    1079 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3253/    107C :                     .atkzero:
(1) 3254/    107C : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3255/    1080 : 18 53               		jr	.vedlp
(1) 3256/    1082 :                     .chk2:
(1) 3257/    1082 :                     
(1) 3258/    1082 : FE 02               		cp	010b			; Decay mode
(1) 3259/    1084 : 20 31               		jr	nz,.chk4
(1) 3260/    1086 :                     .dectmr:
(1) 3261/    1086 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3262/    108A : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3263/    108D : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3264/    1090 : BB                  		cp	e
(1) 3265/    1091 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3266/    1093 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3267/    1095 : CF                  		rst	8
(1) 3268/    1096 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3269/    1099 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3270/    109B : BB                  		cp	e			; compare level
(1) 3271/    109C : 38 0F               		jr	c,.dkyend		; and finish
(1) 3272/    109E : 18 08               		jr	.dksav
(1) 3273/    10A0 :                     .dkadd:
(1) 3274/    10A0 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3275/    10A3 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3276/    10A5 : BB                  		cp	e			; compare level
(1) 3277/    10A6 : 30 05               		jr	nc,.dkyend
(1) 3278/    10A8 :                     .dksav:
(1) 3279/    10A8 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3280/    10AB : 18 28               		jr	.vedlp
(1) 3281/    10AD :                     .dkyend:
(1) 3282/    10AD : CF                  		rst	8
(1) 3283/    10AE : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3284/    10B1 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3285/    10B5 : 18 1E               		jr	.vedlp
(1) 3286/    10B7 :                     .chk4:
(1) 3287/    10B7 : FE 04               		cp	100b			; Sustain phase
(1) 3288/    10B9 : 20 1A               		jr	nz,.vedlp
(1) 3289/    10BB : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3290/    10BF : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3291/    10C2 : CF                  		rst	8
(1) 3292/    10C3 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3293/    10C6 : 38 05               		jr	c,.killenv		; release done
(1) 3294/    10C8 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3295/    10CB : 18 08               		jr	.vedlp
(1) 3296/    10CD :                     .killenv:
(1) 3297/    10CD : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3298/    10D1 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3299/    10D5 :                     .vedlp:
(1) 3300/    10D5 :                     
(1) 3301/    10D5 :                     	; ----------------------------
(1) 3302/    10D5 :                     	; PSG UPDATE
(1) 3303/    10D5 :                     	; ----------------------------
(1) 3304/    10D5 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3305/    10D8 : B7                  		or	a
(1) 3306/    10D9 : 28 72               		jr	z,.noupd
(1) 3307/    10DB : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3308/    10DF : 59                  		ld	e,c
(1) 3309/    10E0 : 3A 93 17            		ld	a,(psgHatMode)
(1) 3310/    10E3 : 57                  		ld	d,a
(1) 3311/    10E4 : E6 03               		and	011b
(1) 3312/    10E6 : FE 03               		cp	011b
(1) 3313/    10E8 : 20 1D               		jr	nz,.normal
(1) 3314/    10EA : CF                  		rst	8
(1) 3315/    10EB : 78                  		ld	a,b		; Channel 4?
(1) 3316/    10EC : FE 03               		cp	3
(1) 3317/    10EE : 28 13               		jr	z,.silnc_3
(1) 3318/    10F0 : FE 04               		cp	4
(1) 3319/    10F2 : 20 18               		jr	nz,.do_nfreq
(1) 3320/    10F4 : 3A 93 17            		ld	a,(psgHatMode)
(1) 3321/    10F7 : 57                  		ld	d,a
(1) 3322/    10F8 : E6 03               		and	011b
(1) 3323/    10FA : CF                  		rst	8
(1) 3324/    10FB : FE 03               		cp	011b
(1) 3325/    10FD : 20 30               		jr	nz,.vonly
(1) 3326/    10FF : 1E C0               		ld	e,0C0h
(1) 3327/    1101 : 18 09               		jr	.do_nfreq
(1) 3328/    1103 :                     .silnc_3:
(1) 3329/    1103 : 3E FF               		ld	a,-1
(1) 3330/    1105 : 18 32               		jr	.vlmuch
(1) 3331/    1107 :                     .normal:
(1) 3332/    1107 : 78                  		ld	a,b
(1) 3333/    1108 : FE 04               		cp	4
(1) 3334/    110A : 28 23               		jr	z,.vonly
(1) 3335/    110C :                     .do_nfreq:
(1) 3336/    110C : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3337/    110F : FD 66 20            		ld	h,(iy+DTH)
(1) 3338/    1112 :                     
(1) 3339/    1112 :                     	; freq effects go here
(1) 3340/    1112 :                     	; (save e FIRST.)
(1) 3341/    1112 :                     	;	push	de
(1) 3342/    1112 :                     	;	pop	de
(1) 3343/    1112 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3344/    1113 : E6 0F               		and	00001111b
(1) 3345/    1115 : B3                  		or	e		; OR with channel set in e
(1) 3346/    1116 : CF                  		rst	8
(1) 3347/    1117 : DD 77 00            		ld	(ix),a		; write it
(1) 3348/    111A : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3349/    111B : 0F                  		rrca
(1) 3350/    111C : 0F                  		rrca
(1) 3351/    111D : 0F                  		rrca
(1) 3352/    111E : 0F                  		rrca
(1) 3353/    111F : E6 0F               		and	00001111b
(1) 3354/    1121 : 5F                  		ld	e,a
(1) 3355/    1122 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3356/    1123 : CF                  		rst	8
(1) 3357/    1124 : 07                  		rlca
(1) 3358/    1125 : 07                  		rlca
(1) 3359/    1126 : 07                  		rlca
(1) 3360/    1127 : 07                  		rlca
(1) 3361/    1128 : E6 30               		and	00110000b
(1) 3362/    112A : B3                  		or	e
(1) 3363/    112B : DD 77 00            		ld	(ix),a
(1) 3364/    112E : CF                  		rst	8
(1) 3365/    112F :                     .vonly:
(1) 3366/    112F : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3367/    1132 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3368/    1135 : 30 02               		jr	nc,.vlmuch
(1) 3369/    1137 : 3E FF               		ld	a,-1
(1) 3370/    1139 :                     .vlmuch:
(1) 3371/    1139 : CB 3F               		srl	a			; (Level >> 4)
(1) 3372/    113B : CB 3F               		srl	a
(1) 3373/    113D : CB 3F               		srl	a
(1) 3374/    113F : CF                  		rst	8
(1) 3375/    1140 : CB 3F               		srl	a
(1) 3376/    1142 : E6 0F               		and	00001111b		; Filter volume value
(1) 3377/    1144 : B1                  		or	c			; and OR with current channel
(1) 3378/    1145 : F6 90               		or	90h			; Set volume-set mode
(1) 3380/    1147 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3382/    114A : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3383/    114D :                     .noupd:
(1) 3384/    114D :                     	; ----------------------------
(1) 3385/    114D : FD 2B               		dec	iy			; next COM to check
(1) 3386/    114F : 79                  		ld	a,c
(1) 3387/    1150 : CF                  		rst	8
(1) 3388/    1151 : D6 20               		sub	a,20h			; next PSG backwards
(1) 3389/    1153 : 4F                  		ld	c,a
(1) 3390/    1154 : 05                  		dec	b
(1) 3391/    1155 : C2 02 10            		jp	nz,.vloop
(1) 3392/    1158 : C9                  		ret
(1) 3393/    1159 :                     
(1) 3394/    1159 :                     ; ---------------------------------------------
(1) 3395/    1159 :                     ; FM register writes
(1) 3396/    1159 :                     ;
(1) 3397/    1159 :                     ; Input:
(1) 3398/    1159 :                     ; d - ctrl
(1) 3399/    1159 :                     ; e - data
(1) 3400/    1159 :                     ; ---------------------------------------------
(1) 3401/    1159 :                     
(1) 3402/    1159 :                     ; c - KeyID
(1) 3403/    1159 :                     fm_autoreg:
(1) 3404/    1159 : CB 51               		bit	2,c
(1) 3405/    115B : CC 62 11            		call	z,fm_send_1
(1) 3406/    115E : C4 6D 11            		call	nz,fm_send_2
(1) 3407/    1161 : C9                  		ret
(1) 3408/    1162 :                     ; Channels 1-3 and global registers
(1) 3409/    1162 :                     fm_send_1:
(1) 3410/    1162 : 7A                  		ld	a,d
(1) 3411/    1163 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3412/    1166 : 00                  		nop
(1) 3413/    1167 : 7B                  		ld	a,e
(1) 3414/    1168 : 32 01 40            		ld	(Zym_data_1),a
(1) 3415/    116B : 00                  		nop
(1) 3416/    116C : C9                  		ret
(1) 3417/    116D :                     ; Channels 4-6
(1) 3418/    116D :                     fm_send_2:
(1) 3419/    116D : 7A                  		ld	a,d
(1) 3420/    116E : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3421/    1171 : 00                  		nop
(1) 3422/    1172 : 7B                  		ld	a,e
(1) 3423/    1173 : 32 03 40            		ld	(Zym_data_2),a
(1) 3424/    1176 : 00                  		nop
(1) 3425/    1177 : C9                  		ret
(1) 3426/    1178 :                     
(1) 3427/    1178 :                     ; --------------------------------------------------------
(1) 3428/    1178 :                     ; brute-force WAVE ON/OFF playback
(1) 3429/    1178 :                     ; --------------------------------------------------------
(1) 3430/    1178 :                     
(1) 3431/    1178 :                     dac_on:
(1) 3432/    1178 : 3E 2B               		ld	a,2Bh
(1) 3433/    117A : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3434/    117D : 3E 80               		ld	a,80h
(1) 3435/    117F : 32 01 40            		ld	(Zym_data_1),a
(1) 3436/    1182 : 3E D9               		ld 	a,zopcExx
(1) 3437/    1184 : 32 08 00            		ld	(dac_me),a
(1) 3438/    1187 : 3E F5               		ld 	a,zopcPushAf
(1) 3439/    1189 : 32 20 00            		ld	(dac_fill),a
(1) 3440/    118C : C9                  		ret
(1) 3441/    118D :                     dac_off:
(1) 3442/    118D : 3E 2B               		ld	a,2Bh
(1) 3443/    118F : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3444/    1192 : 3E 00               		ld	a,00h
(1) 3445/    1194 : 32 01 40            		ld	(Zym_data_1),a
(1) 3446/    1197 : 3E C9               		ld 	a,zopcRet
(1) 3447/    1199 : 32 08 00            		ld	(dac_me),a
(1) 3448/    119C : 3E C9               		ld 	a,zopcRet
(1) 3449/    119E : 32 20 00            		ld	(dac_fill),a
(1) 3450/    11A1 : C9                  		ret
(1) 3451/    11A2 :                     
(1) 3452/    11A2 :                     ; --------------------------------------------------------
(1) 3453/    11A2 :                     ; dac_play
(1) 3454/    11A2 :                     ;
(1) 3455/    11A2 :                     ; Plays a new sample
(1) 3456/    11A2 :                     ;
(1) 3457/    11A2 :                     ; NOTE:
(1) 3458/    11A2 :                     ; Set wave_Flags and wave_Pitch externally
(1) 3459/    11A2 :                     ; getting here.
(1) 3460/    11A2 :                     ; --------------------------------------------------------
(1) 3461/    11A2 :                     
(1) 3462/    11A2 :                     dac_play:
(1) 3463/    11A2 : F3                  		di
(1) 3464/    11A3 : CD 8D 11            		call	dac_off
(1) 3465/    11A6 : D9                  		exx				; flip exx regs
(1) 3466/    11A7 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3467/    11AA : ED 5B 8D 17         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3468/    11AE : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3469/    11B1 : D9                  		exx				; move them back
(1) 3470/    11B2 : 2A 84 17            		ld	hl,(wave_Start)
(1) 3471/    11B5 : 3A 86 17            		ld 	a,(wave_Start+2)
(1) 3472/    11B8 : 22 30 00            		ld	(dDacPntr),hl
(1) 3473/    11BB : 32 32 00            		ld	(dDacPntr+2),a
(1) 3474/    11BE : 2A 87 17            		ld	hl,(wave_Len)
(1) 3475/    11C1 : 3A 89 17            		ld 	a,(wave_Len+2)
(1) 3476/    11C4 : 22 33 00            		ld	(dDacCntr),hl
(1) 3477/    11C7 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3478/    11CA : AF                  		xor	a
(1) 3479/    11CB : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3480/    11CE : CD D6 11            		call	dac_firstfill
(1) 3481/    11D1 : CD 78 11            		call	dac_on
(1) 3482/    11D4 : FB                  		ei
(1) 3483/    11D5 : C9                  		ret
(1) 3484/    11D6 :                     
(1) 3485/    11D6 :                     ; --------------------------------------------------------
(1) 3486/    11D6 :                     
(1) 3487/    11D6 :                     dac_firstfill:
(1) 3488/    11D6 :                     ; 		push	af
(1) 3489/    11D6 :                     dac_refill:
(1) 3490/    11D6 : CF                  		rst	8
(1) 3491/    11D7 : C5                  		push	bc
(1) 3492/    11D8 : D5                  		push	de
(1) 3493/    11D9 : E5                  		push	hl
(1) 3494/    11DA : 3A 8F 17            		ld	a,(wave_Flags)	; Already finished?
(1) 3495/    11DD : FE 07               		cp	111b
(1) 3496/    11DF : D2 95 12            		jp	nc,.dacfill_end
(1) 3497/    11E2 : 3A 35 00            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3498/    11E5 : 2A 33 00            		ld	hl,(dDacCntr)
(1) 3499/    11E8 : 01 80 00            		ld	bc,80h
(1) 3500/    11EB : 37                  		scf
(1) 3501/    11EC : 3F                  		ccf
(1) 3502/    11ED : ED 42               		sbc	hl,bc
(1) 3503/    11EF : DE 00               		sbc	a,0
(1) 3504/    11F1 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3505/    11F4 : 22 33 00            		ld	(dDacCntr),hl
(1) 3506/    11F7 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3507/    11F9 : B7                  		or	a
(1) 3508/    11FA : FA 24 12            		jp	m,.dac_over
(1) 3509/    11FD : 3A 2F 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 3510/    1200 : 5F                  		ld	e,a
(1) 3511/    1201 : C6 80               		add 	a,80h
(1) 3512/    1203 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3513/    1206 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3514/    1209 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3515/    120C : CD 75 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3516/    120F : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3517/    1212 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3518/    1215 : 01 80 00            		ld	bc,80h
(1) 3519/    1218 : 09                  		add	hl,bc
(1) 3520/    1219 : CE 00               		adc	a,0
(1) 3521/    121B : 22 30 00            		ld	(dDacPntr),hl
(1) 3522/    121E : 32 32 00            		ld	(dDacPntr+2),a
(1) 3523/    1221 : C3 98 12            		jp	.dacfill_ret
(1) 3524/    1224 :                     
(1) 3525/    1224 :                     ; NOTE:
(1) 3526/    1224 :                     ; This doesn't finish at the exact
(1) 3527/    1224 :                     ; the END point.
(1) 3528/    1224 :                     .dac_over:
(1) 3529/    1224 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3530/    1226 : 3A 8F 17            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 3531/    1229 : E6 01               		and	001b
(1) 3532/    122B : C2 4E 12            		jp	nz,.dacfill_loop
(1) 3533/    122E : 7D                  		ld	a,l
(1) 3534/    122F : C6 80               		add	a,80h
(1) 3535/    1231 : 4F                  		ld	c,a
(1) 3536/    1232 : 06 00               		ld	b,0
(1) 3537/    1234 : C5                  		push	bc
(1) 3538/    1235 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3539/    1238 : 5F                  		ld	e,a
(1) 3540/    1239 : C6 80               		add	a,80h
(1) 3541/    123B : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3542/    123E : C1                  		pop	bc
(1) 3543/    123F : 79                  		ld	a,c
(1) 3544/    1240 : B0                  		or	b
(1) 3545/    1241 : 28 52               		jr	z,.dacfill_end
(1) 3546/    1243 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3547/    1246 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3548/    1249 : CD 75 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3549/    124C : 18 47               		jr	.dacfill_end
(1) 3550/    124E :                     .dacfill_loop:
(1) 3551/    124E :                     	; loop sample
(1) 3552/    124E : C5                  		push	bc
(1) 3553/    124F : D5                  		push	de
(1) 3554/    1250 : 3A 8C 17            		ld	a,(wave_Loop+2)
(1) 3555/    1253 : 4F                  		ld	c,a
(1) 3556/    1254 : ED 5B 8A 17         		ld	de,(wave_Loop)
(1) 3557/    1258 : 2A 84 17            		ld	hl,(wave_Start)
(1) 3558/    125B : 3A 86 17            		ld 	a,(wave_Start+2)
(1) 3559/    125E : 81                  		add	a,c
(1) 3560/    125F : 19                  		add	hl,de
(1) 3561/    1260 : CE 00               		adc	a,0
(1) 3562/    1262 : 22 30 00            		ld	(dDacPntr),hl
(1) 3563/    1265 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3564/    1268 : 2A 87 17            		ld	hl,(wave_Len)
(1) 3565/    126B : 3A 89 17            		ld 	a,(wave_Len+2)
(1) 3566/    126E : 91                  		sub	a,c
(1) 3567/    126F : 37                  		scf
(1) 3568/    1270 : 3F                  		ccf
(1) 3569/    1271 : ED 52               		sbc	hl,de
(1) 3570/    1273 : DE 00               		sbc	a,0
(1) 3571/    1275 : 22 33 00            		ld	(dDacCntr),hl
(1) 3572/    1278 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3573/    127B : D1                  		pop	de
(1) 3574/    127C : C1                  		pop	bc
(1) 3575/    127D : 78                  		ld	a,b
(1) 3576/    127E : B1                  		or	c
(1) 3577/    127F : 28 17               		jr	z,.dacfill_ret
(1) 3578/    1281 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3579/    1284 : 5F                  		ld	e,a
(1) 3580/    1285 : C6 80               		add	a,80h
(1) 3581/    1287 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3582/    128A : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3583/    128D : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3584/    1290 : CD 75 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3585/    1293 : 18 03               		jr	.dacfill_ret
(1) 3586/    1295 :                     
(1) 3587/    1295 :                     .dacfill_end:
(1) 3588/    1295 : CD 8D 11            		call	dac_off		; DAC finished
(1) 3589/    1298 :                     
(1) 3590/    1298 :                     .dacfill_ret:
(1) 3591/    1298 : E1                  		pop	hl
(1) 3592/    1299 : D1                  		pop	de
(1) 3593/    129A : C1                  		pop	bc
(1) 3594/    129B :                     ; 		pop	af
(1) 3595/    129B : C9                  		ret
(1) 3596/    129C :                     
(1) 3597/    129C :                     ; ====================================================================
(1) 3598/    129C :                     ; ----------------------------------------------------------------
(1) 3599/    129C :                     ; Tables
(1) 3600/    129C :                     ; ----------------------------------------------------------------
(1) 3601/    129C :                     
(1) 3602/    129C : 84 02               fmFreq_List:	dw 644
(1) 3603/    129E : A9 02               		dw 681
(1) 3604/    12A0 : D2 02               		dw 722
(1) 3605/    12A2 : FD 02               		dw 765
(1) 3606/    12A4 : 2A 03               		dw 810
(1) 3607/    12A6 : 5A 03               		dw 858
(1) 3608/    12A8 : 8E 03               		dw 910
(1) 3609/    12AA : C4 03               		dw 964
(1) 3610/    12AC : FD 03               		dw 1021
(1) 3611/    12AE : 39 04               		dw 1081
(1) 3612/    12B0 : 7A 04               		dw 1146
(1) 3613/    12B2 : BE 04               		dw 1214
(1) 3614/    12B4 :                     psgFreq_List:
(1) 3615/    12B4 : FF FF               		dw -1		; C-0 00
(1) 3616/    12B6 : FF FF               		dw -1
(1) 3617/    12B8 : FF FF               		dw -1
(1) 3618/    12BA : FF FF               		dw -1
(1) 3619/    12BC : FF FF               		dw -1
(1) 3620/    12BE : FF FF               		dw -1
(1) 3621/    12C0 : FF FF               		dw -1
(1) 3622/    12C2 : FF FF               		dw -1
(1) 3623/    12C4 : FF FF               		dw -1
(1) 3624/    12C6 : FF FF               		dw -1
(1) 3625/    12C8 : FF FF               		dw -1
(1) 3626/    12CA : FF FF               		dw -1
(1) 3627/    12CC : FF FF               		dw -1		; C-1 0C
(1) 3628/    12CE : FF FF               		dw -1
(1) 3629/    12D0 : FF FF               		dw -1
(1) 3630/    12D2 : FF FF               		dw -1
(1) 3631/    12D4 : FF FF               		dw -1
(1) 3632/    12D6 : FF FF               		dw -1
(1) 3633/    12D8 : FF FF               		dw -1
(1) 3634/    12DA : FF FF               		dw -1
(1) 3635/    12DC : FF FF               		dw -1
(1) 3636/    12DE : FF FF               		dw -1
(1) 3637/    12E0 : FF FF               		dw -1
(1) 3638/    12E2 : FF FF               		dw -1
(1) 3639/    12E4 : FF FF               		dw -1		; C-2 18
(1) 3640/    12E6 : FF FF               		dw -1
(1) 3641/    12E8 : FF FF               		dw -1
(1) 3642/    12EA : FF FF               		dw -1
(1) 3643/    12EC : FF FF               		dw -1
(1) 3644/    12EE : FF FF               		dw -1
(1) 3645/    12F0 : FF FF               		dw -1
(1) 3646/    12F2 : FF FF               		dw -1
(1) 3647/    12F4 : FF FF               		dw -1
(1) 3648/    12F6 : FF FF               		dw -1
(1) 3649/    12F8 : FF FF               		dw -1
(1) 3650/    12FA : FF FF               		dw -1
(1) 3651/    12FC : FF FF               		dw -1		; C-3 24
(1) 3652/    12FE : FF FF               		dw -1
(1) 3653/    1300 : FF FF               		dw -1
(1) 3654/    1302 : FF FF               		dw -1
(1) 3655/    1304 : FF FF               		dw -1
(1) 3656/    1306 : FF FF               		dw -1
(1) 3657/    1308 : FF FF               		dw -1
(1) 3658/    130A : FF FF               		dw -1
(1) 3659/    130C : FF FF               		dw -1
(1) 3660/    130E : F8 03               		dw 3F8h
(1) 3661/    1310 : BF 03               		dw 3BFh
(1) 3662/    1312 : 89 03               		dw 389h
(1) 3663/    1314 : 56 03               		dw 356h		; C-4 30
(1) 3664/    1316 : 26 03               		dw 326h
(1) 3665/    1318 : F9 02               		dw 2F9h
(1) 3666/    131A : CE 02               		dw 2CEh
(1) 3667/    131C : A5 02               		dw 2A5h
(1) 3668/    131E : 80 02               		dw 280h
(1) 3669/    1320 : 5C 02               		dw 25Ch
(1) 3670/    1322 : 3A 02               		dw 23Ah
(1) 3671/    1324 : 1A 02               		dw 21Ah
(1) 3672/    1326 : FB 01               		dw 1FBh
(1) 3673/    1328 : DF 01               		dw 1DFh
(1) 3674/    132A : C4 01               		dw 1C4h
(1) 3675/    132C : AB 01               		dw 1ABh		; C-5 3C
(1) 3676/    132E : 93 01               		dw 193h
(1) 3677/    1330 : 7D 01               		dw 17Dh
(1) 3678/    1332 : 67 01               		dw 167h
(1) 3679/    1334 : 53 01               		dw 153h
(1) 3680/    1336 : 40 01               		dw 140h
(1) 3681/    1338 : 2E 01               		dw 12Eh
(1) 3682/    133A : 1D 01               		dw 11Dh
(1) 3683/    133C : 0D 01               		dw 10Dh
(1) 3684/    133E : FE 00               		dw 0FEh
(1) 3685/    1340 : EF 00               		dw 0EFh
(1) 3686/    1342 : E2 00               		dw 0E2h
(1) 3687/    1344 : D6 00               		dw 0D6h		; C-6 48
(1) 3688/    1346 : C9 00               		dw 0C9h
(1) 3689/    1348 : BE 00               		dw 0BEh
(1) 3690/    134A : B4 00               		dw 0B4h
(1) 3691/    134C : A9 00               		dw 0A9h
(1) 3692/    134E : A0 00               		dw 0A0h
(1) 3693/    1350 : 97 00               		dw 097h
(1) 3694/    1352 : 8F 00               		dw 08Fh
(1) 3695/    1354 : 87 00               		dw 087h
(1) 3696/    1356 : 7F 00               		dw 07Fh
(1) 3697/    1358 : 78 00               		dw 078h
(1) 3698/    135A : 71 00               		dw 071h
(1) 3699/    135C : 6B 00               		dw 06Bh		; C-7 54
(1) 3700/    135E : 65 00               		dw 065h
(1) 3701/    1360 : 5F 00               		dw 05Fh
(1) 3702/    1362 : 5A 00               		dw 05Ah
(1) 3703/    1364 : 55 00               		dw 055h
(1) 3704/    1366 : 50 00               		dw 050h
(1) 3705/    1368 : 4B 00               		dw 04Bh
(1) 3706/    136A : 47 00               		dw 047h
(1) 3707/    136C : 43 00               		dw 043h
(1) 3708/    136E : 40 00               		dw 040h
(1) 3709/    1370 : 3C 00               		dw 03Ch
(1) 3710/    1372 : 39 00               		dw 039h
(1) 3711/    1374 : 36 00               		dw 036h		; C-8 60
(1) 3712/    1376 : 33 00               		dw 033h
(1) 3713/    1378 : 30 00               		dw 030h
(1) 3714/    137A : 2D 00               		dw 02Dh
(1) 3715/    137C : 2B 00               		dw 02Bh
(1) 3716/    137E : 28 00               		dw 028h
(1) 3717/    1380 : 26 00               		dw 026h
(1) 3718/    1382 : 24 00               		dw 024h
(1) 3719/    1384 : 22 00               		dw 022h
(1) 3720/    1386 : 20 00               		dw 020h
(1) 3721/    1388 : 1F 00               		dw 01Fh
(1) 3722/    138A : 1D 00               		dw 01Dh
(1) 3723/    138C : 1B 00               		dw 01Bh		; C-9 6C
(1) 3724/    138E : 1A 00               		dw 01Ah
(1) 3725/    1390 : 18 00               		dw 018h
(1) 3726/    1392 : 17 00               		dw 017h
(1) 3727/    1394 : 16 00               		dw 016h
(1) 3728/    1396 : 15 00               		dw 015h
(1) 3729/    1398 : 13 00               		dw 013h
(1) 3730/    139A : 12 00               		dw 012h
(1) 3731/    139C : 11 00               		dw 011h
(1) 3732/    139E : 10 00                		dw 010h
(1) 3733/    13A0 : 09 00                		dw 009h
(1) 3734/    13A2 : 08 00                		dw 008h
(1) 3735/    13A4 : 06 00               		dw 006h
(1) 3736/    13A6 :                     
(1) 3737/    13A6 : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3738/    13A8 : 00 01               		dw 100h
(1) 3739/    13AA : 00 01               		dw 100h
(1) 3740/    13AC : 00 01               		dw 100h
(1) 3741/    13AE : 00 01               		dw 100h
(1) 3742/    13B0 : 00 01               		dw 100h
(1) 3743/    13B2 : 00 01               		dw 100h
(1) 3744/    13B4 : 00 01               		dw 100h
(1) 3745/    13B6 : 00 01               		dw 100h
(1) 3746/    13B8 : 00 01               		dw 100h
(1) 3747/    13BA : 00 01               		dw 100h
(1) 3748/    13BC : 00 01               		dw 100h
(1) 3749/    13BE : 00 01               		dw 100h		; C-1
(1) 3750/    13C0 : 00 01               		dw 100h
(1) 3751/    13C2 : 00 01               		dw 100h
(1) 3752/    13C4 : 00 01               		dw 100h
(1) 3753/    13C6 : 00 01               		dw 100h
(1) 3754/    13C8 : 00 01               		dw 100h
(1) 3755/    13CA : 00 01               		dw 100h
(1) 3756/    13CC : 00 01               		dw 100h
(1) 3757/    13CE : 00 01               		dw 100h
(1) 3758/    13D0 : 00 01               		dw 100h
(1) 3759/    13D2 : 00 01               		dw 100h
(1) 3760/    13D4 : 00 01               		dw 100h
(1) 3761/    13D6 : 00 01               		dw 100h		; C-2
(1) 3762/    13D8 : 00 01               		dw 100h
(1) 3763/    13DA : 00 01               		dw 100h
(1) 3764/    13DC : 00 01               		dw 100h
(1) 3765/    13DE : 00 01               		dw 100h
(1) 3766/    13E0 : 00 01               		dw 100h
(1) 3767/    13E2 : 00 01               		dw 100h
(1) 3768/    13E4 : 00 01               		dw 100h
(1) 3769/    13E6 : 00 01               		dw 100h
(1) 3770/    13E8 : 00 01               		dw 100h
(1) 3771/    13EA : 36 00               		dw 036h
(1) 3772/    13EC : 3B 00               		dw 03Bh
(1) 3773/    13EE : 3E 00               		dw 03Eh		; C-3
(1) 3774/    13F0 : 43 00               		dw 043h		; C#3
(1) 3775/    13F2 : 46 00               		dw 046h		; D-3
(1) 3776/    13F4 : 49 00               		dw 049h		; D#3
(1) 3777/    13F6 : 4E 00               		dw 04Eh		; E-3
(1) 3778/    13F8 : 54 00               		dw 054h		; F-3
(1) 3779/    13FA : 58 00               		dw 058h		; F#3
(1) 3780/    13FC : 5E 00               		dw 05Eh		; G-3 -17
(1) 3781/    13FE : 63 00               		dw 063h		; G#3
(1) 3782/    1400 : 68 00               		dw 068h		; A-3
(1) 3783/    1402 : 70 00               		dw 070h		; A#3
(1) 3784/    1404 : 75 00               		dw 075h		; B-3
(1) 3785/    1406 : 85 00               		dw 085h		; C-4 -12
(1) 3786/    1408 : 87 00               		dw 087h		; C#4
(1) 3787/    140A : 8C 00               		dw 08Ch		; D-4
(1) 3788/    140C : 9A 00               		dw 09Ah		; D#4
(1) 3789/    140E : 9E 00               		dw 09Eh		; E-4
(1) 3790/    1410 : AD 00               		dw 0ADh		; F-4
(1) 3791/    1412 : B2 00               		dw 0B2h		; F#4
(1) 3792/    1414 : C0 00               		dw 0C0h		; G-4
(1) 3793/    1416 : CC 00               		dw 0CCh		; G#4
(1) 3794/    1418 : D7 00               		dw 0D7h		; A-4
(1) 3795/    141A : E6 00               		dw 0E6h		; A#4
(1) 3796/    141C : F0 00               		dw 0F0h		; B-4
(1) 3797/    141E : 00 01               		dw 100h		; C-5 ****
(1) 3798/    1420 : 10 01               		dw 110h		; C#5
(1) 3799/    1422 : 20 01               		dw 120h		; D-5
(1) 3800/    1424 : 2E 01               		dw 12Eh		; D#5
(1) 3801/    1426 : 42 01               		dw 142h		; E-5
(1) 3802/    1428 : 5A 01               		dw 15Ah		; F-5
(1) 3803/    142A : 6A 01               		dw 16Ah		; F#5 +6
(1) 3804/    142C : 7F 01               		dw 17Fh		; G-5
(1) 3805/    142E : 91 01               		dw 191h		; G#5
(1) 3806/    1430 : AC 01               		dw 1ACh		; A-5
(1) 3807/    1432 : C2 01               		dw 1C2h		; A#5
(1) 3808/    1434 : E0 01               		dw 1E0h		; B-5
(1) 3809/    1436 : F8 01               		dw 1F8h		; C-6 +12
(1) 3810/    1438 : 10 02               		dw 210h		; C#6
(1) 3811/    143A : 40 02               		dw 240h		; D-6
(1) 3812/    143C : 60 02               		dw 260h		; D#6
(1) 3813/    143E : 80 02               		dw 280h		; E-6
(1) 3814/    1440 : A0 02               		dw 2A0h		; F-6
(1) 3815/    1442 : D0 02               		dw 2D0h		; F#6
(1) 3816/    1444 : F8 02               		dw 2F8h		; G-6
(1) 3817/    1446 : 20 03               		dw 320h		; G#6
(1) 3818/    1448 : 50 03               		dw 350h		; A-6
(1) 3819/    144A : 80 03               		dw 380h		; A#6
(1) 3820/    144C : C0 03               		dw 3C0h		; B-6
(1) 3821/    144E : 00 04               		dw 400h		; C-7
(1) 3822/    1450 : 00 01               		dw 100h
(1) 3823/    1452 : 00 01               		dw 100h
(1) 3824/    1454 : 00 01               		dw 100h
(1) 3825/    1456 : 00 01               		dw 100h
(1) 3826/    1458 : 00 01               		dw 100h
(1) 3827/    145A : 00 01               		dw 100h
(1) 3828/    145C : 00 01               		dw 100h
(1) 3829/    145E : 00 01               		dw 100h
(1) 3830/    1460 : 00 01               		dw 100h
(1) 3831/    1462 : 00 01               		dw 100h
(1) 3832/    1464 : 00 01               		dw 100h
(1) 3833/    1466 : 00 01               		dw 100h		; C-8
(1) 3834/    1468 : 00 01               		dw 100h
(1) 3835/    146A : 00 01               		dw 100h
(1) 3836/    146C : 00 01               		dw 100h
(1) 3837/    146E : 00 01               		dw 100h
(1) 3838/    1470 : 00 01               		dw 100h
(1) 3839/    1472 : 00 01               		dw 100h
(1) 3840/    1474 : 00 01               		dw 100h
(1) 3841/    1476 : 00 01               		dw 100h
(1) 3842/    1478 : 00 01               		dw 100h
(1) 3843/    147A : 00 01               		dw 100h
(1) 3844/    147C : 00 01               		dw 100h
(1) 3845/    147E : 00 01               		dw 100h		; C-9
(1) 3846/    1480 : 00 01               		dw 100h
(1) 3847/    1482 : 00 01               		dw 100h
(1) 3848/    1484 : 00 01               		dw 100h
(1) 3849/    1486 : 00 01               		dw 100h
(1) 3850/    1488 : 00 01               		dw 100h
(1) 3851/    148A : 00 01               		dw 100h
(1) 3852/    148C : 00 01               		dw 100h
(1) 3853/    148E : 00 01               		dw 100h
(1) 3854/    1490 : 00 01               		dw 100h
(1) 3855/    1492 : 00 01               		dw 100h
(1) 3856/    1494 : 00 01               		dw 100h
(1) 3857/    1496 :                     
(1) 3858/    1496 : 00 16               fmcach_list:	dw fmcach_1
(1) 3859/    1498 : 28 16               		dw fmcach_2
(1) 3860/    149A : 50 16               		dw fmcach_3
(1) 3861/    149C : 00 00               		dw 0		; <-- skipped
(1) 3862/    149E : 78 16               		dw fmcach_4
(1) 3863/    14A0 : A0 16               		dw fmcach_5
(1) 3864/    14A2 : C8 16               		dw fmcach_6
(1) 3865/    14A4 :                     
(1) 3866/    14A4 :                     ; ====================================================================
(1) 3867/    14A4 :                     ; ----------------------------------------------------------------
(1) 3868/    14A4 :                     ; MASTER buffers list
(1) 3869/    14A4 :                     ;
(1) 3870/    14A4 :                     ; dw track_buffer
(1) 3871/    14A4 :                     ; dw channel_list,block_cache,header_cache,instr_cache,track_cache
(1) 3872/    14A4 :                     ; db max_blocks,max_headers,max_instr,max_chnls
(1) 3873/    14A4 :                     ;
(1) 3874/    14A4 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 3875/    14A4 :                     ; ----------------------------------------------------------------
(1) 3876/    14A4 :                     
(1) 3877/    14A4 :                     nikona_BuffList:
(1) 3878/    14A4 : AA 17 3A 18 EE 1B   	dw trkBuff_0,trkChnl_0,trkBlks_0,trkHdrs_0,trkInsD_0,trkCach_0
                    D2 19 86 1A 00 1E 
(1) 3879/    14B0 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3880/    14B4 : DA 17 C2 18 06 1C   	dw trkBuff_1,trkChnl_1,trkBlks_1,trkHdrs_1,trkInsD_1,trkCach_1
                    0E 1A FE 1A 40 1E 
(1) 3881/    14C0 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3882/    14C4 : 0A 18 4A 19 1E 1C   	dw trkBuff_2,trkChnl_2,trkBlks_2,trkHdrs_2,trkInsD_2,trkCach_2
                    4A 1A 76 1B 80 1E 
(1) 3883/    14D0 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3884/    14D4 : FF FF               	dw -1
(1) 3885/    14D6 :                     
(1) 3886/    14D6 :                     nikona_SetMstrList:
(1) 3887/    14D6 : 00                  	db 0				; ** 32-bit 68k address **
(1) 3888/    14D7 : 88                  	db (Gema_MasterList>>16)&0FFh
(1) 3889/    14D8 : 3F                  	db (Gema_MasterList>>8)&0FFh
(1) 3890/    14D9 : 9E                  	db Gema_MasterList&0FFh
(1) 3891/    14DA :                     
(1) 3892/    14DA :                     ; ====================================================================
(1) 3893/    14DA :                     ; ----------------------------------------------------------------
(1) 3894/    14DA :                     ; Buffer section
(1) 3895/    14DA :                     ; ----------------------------------------------------------------
(1) 3896/    14DA :                     
(1) 3897/    14DA :                     ; --------------------------------------------------------
(1) 3898/    14DA :                     ; Channel table struct:
(1) 3899/    14DA :                     ; 00  - Linked tracker channel
(1) 3900/    14DA :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 3901/    14DA :                     ; 03  - Intrument cache pointer
(1) 3902/    14DA :                     ; 05  - Chip index (YM2612: KEY index)
(1) 3903/    14DA :                     ; 06  - Frequency list index (YM2612: oct|index)
(1) 3904/    14DA :                     ; 07  - Pitchbend add/sub
(1) 3905/    14DA :                     ; 08  - Current volume: 00-max
(1) 3906/    14DA :                     ; 09  - Stored effect setting
(1) 3907/    14DA :                     ; 0A  - FREE
(1) 3908/    14DA :                     ; 0B  - FREE
(1) 3909/    14DA :                     ; 0C+ - Misc. settings for the current chip
(1) 3910/    14DA :                     
(1) 3911/    14DA :                     ; PSG   80h
(1) 3912/    14DA :                     ; PSGN  90h
(1) 3913/    14DA :                     ; FM   0A0h
(1) 3914/    14DA :                     ; FM3  0B0h
(1) 3915/    14DA :                     ; DAC  0C0h
(1) 3916/    14DA :                     ; PWM  0D0h
(1) 3917/    14DA :                     ; --------------------------------------------------------
(1) 3918/    14DA :                     
(1) 3919/    14DA : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 3920/    14DC : 42 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 3921/    14DE : 52 00               		dw tblFM-tblList		; 0A0h
(1) 3922/    14E0 : 92 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 3923/    14E2 : A2 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 3924/    14E4 : B4 00               		dw tblPWM-tblList		; 0D0h
(1) 3925/    14E6 : 00 00               		dw 0
(1) 3926/    14E8 : 00 00               		dw 0
(1) 3927/    14EA : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3928/    14F2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3929/    14FA : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3930/    1502 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3931/    150A : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3932/    1512 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3933/    151A : FF FF               		dw -1	; end-of-list
(1) 3934/    151C : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
                    00 03 
(1) 3935/    1524 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3936/    152C : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3937/    1534 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3938/    153C : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3939/    1544 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3940/    154C : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
                    00 00 
(1) 3941/    1554 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3942/    155C : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
                    00 00 
(1) 3943/    1564 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3944/    156C : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
                    00 00 
(1) 3945/    1574 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3946/    157C : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
                    00 00 
(1) 3947/    1584 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3948/    158C : FF FF               		dw -1	; end-of-list
(1) 3949/    158E : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3950/    1596 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3951/    159E : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3952/    15A6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3953/    15AE : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3954/    15B6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3955/    15BE : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
                    00 00 
(1) 3956/    15C6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3957/    15CE : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
                    00 00 
(1) 3958/    15D6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3959/    15DE : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
                    00 00 
(1) 3960/    15E6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3961/    15EE : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
                    00 00 
(1) 3962/    15F6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3963/    15FE : FF FF               		dw -1	; end-of-list
(1) 3964/    1600 :                     
(1) 3965/    1600 :                     ; FM patch storage
(1) 3966/    1600 :                     fmcach_1	ds 28h
(1) 3967/    1628 :                     fmcach_2	ds 28h
(1) 3968/    1650 :                     fmcach_3	ds 28h
(1) 3969/    1678 :                     fmcach_4	ds 28h
(1) 3970/    16A0 :                     fmcach_5	ds 28h
(1) 3971/    16C8 :                     fmcach_6	ds 28h
(1) 3972/    16F0 :                     
(1) 3973/    16F0 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyCut/KeyOff/KeyOn bits
                    00 00 
(1) 3974/    16F8 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 3975/    1700 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 3976/    1708 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags: Stereo/Loop/Left/Right | 32-bit**
                    00 00 
(1) 3977/    1710 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - **sample location
                    00 00 
(1) 3978/    1718 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3979/    1720 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3980/    1728 :                     
(1) 3981/    1728 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 3982/    172C : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 3983/    1730 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 3984/    1734 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 3985/    1738 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 3986/    173C : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 3987/    1740 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 3988/    1744 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 3989/    1748 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 3990/    174C : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 3991/    1750 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 3992/    1754 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 3993/    1758 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 3994/    175C : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 3995/    1760 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 3996/    1764 :                     
(1) 3997/    1764 :                     trkListCach	ds 4*8		; 20h bytes
(1) 3998/    1784 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 3999/    1786 : 00                  		db 0
(1) 4000/    1787 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4001/    1789 : 00                  		db 0
(1) 4002/    178A : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4003/    178C : 00                  		db 0
(1) 4004/    178D : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4005/    178F : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4006/    1790 :                     
(1) 4007/    1790 :                     
(1) 4008/    1790 : 00                  tickSpSet	db 0		; **
(1) 4009/    1791 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4010/    1792 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4011/    1793 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4012/    1794 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4013/    1795 :                     headerOut	ds 00Ch		; Temporal storage for 68k pointers
(1) 4014/    17A1 :                     headerOut_e	ds 2		; reverse readpoint
(1) 4015/    17A3 :                     sampleHead	ds 006h
(1) 4016/    17A9 : 00                  commZRead	db 0		; cmd fifo READ pointer (here)
(1) 4017/    17AA :                     
(1) 4018/    17AA :                     ; --------------------------------------------------------
(1) 4019/    17AA :                     ; * USER customizable section *
(1) 4020/    17AA :                     ;
(1) 4021/    17AA :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4022/    17AA :                     ; --------------------------------------------------------
(1) 4023/    17AA :                     
(1) 4024/    17AA :                     trkBuff_0	ds 30h			; TRACK BUFFER 0
(1) 4025/    17DA :                     trkBuff_1	ds 30h			; TRACK BUFFER 1
(1) 4026/    180A :                     trkBuff_2	ds 30h			; TRACK BUFFER 2
(1) 4027/    183A :                     ; trkBuff_3	ds 30h			; TRACK BUFFER 3
(1) 4028/    183A :                     trkChnl_0	ds 8*MAX_TRKCHN
(1) 4029/    18C2 :                     trkChnl_1	ds 8*MAX_TRKCHN
(1) 4030/    194A :                     trkChnl_2	ds 8*MAX_TRKCHN
(1) 4031/    19D2 :                     ; trkChnl_3	ds 8*MAX_TRKCHN
(1) 4032/    19D2 :                     trkHdrs_0	ds 4*MAX_HEADS		; dw point,rowcntr
(1) 4033/    1A0E :                     trkHdrs_1	ds 4*MAX_HEADS
(1) 4034/    1A4A :                     trkHdrs_2	ds 4*MAX_HEADS
(1) 4035/    1A86 :                     ; trkHdrs_3	ds 4*MAX_HEADS
(1) 4036/    1A86 :                     trkInsD_0	ds 8*MAX_INS
(1) 4037/    1AFE :                     trkInsD_1	ds 8*MAX_INS
(1) 4038/    1B76 :                     trkInsD_2	ds 8*MAX_INS
(1) 4039/    1BEE :                     ; trkInsD_3	ds 8*MAX_INS
(1) 4040/    1BEE :                     trkBlks_0	ds MAX_BLOCKS
(1) 4041/    1C06 :                     trkBlks_1	ds MAX_BLOCKS
(1) 4042/    1C1E :                     trkBlks_2	ds MAX_BLOCKS
(1) 4043/    1C36 :                     ; trkBlks_3	ds MAX_BLOCKS
(1) 4044/    1C36 :                     
(1) 4045/    1C36 :                     ; ====================================================================
(1) 4046/    1C36 :                     ; ----------------------------------------------------------------
(1) 4047/    1C36 :                     ; WAVE playback buffer
(1) 4048/    1C36 :                     ;
(1) 4049/    1C36 :                     ; Located at 200h
(1) 4050/    1C36 :                     ; ----------------------------------------------------------------
(1) 4051/    1C36 :                     
(1) 4052/    1C36 : (MACRO)             		org 1D00h
(1) 4052/    1C36 : 00                                                  db 0
(1) 4052/    1C37 : 00                                                  db 0
(1) 4052/    1C38 : 00                                                  db 0
(1) 4052/    1C39 : 00                                                  db 0
(1) 4052/    1C3A : 00                                                  db 0
(1) 4052/    1C3B : 00                                                  db 0
(1) 4052/    1C3C : 00                                                  db 0
(1) 4052/    1C3D : 00                                                  db 0
(1) 4052/    1C3E : 00                                                  db 0
(1) 4052/    1C3F : 00                                                  db 0
(1) 4052/    1C40 : 00                                                  db 0
(1) 4052/    1C41 : 00                                                  db 0
(1) 4052/    1C42 : 00                                                  db 0
(1) 4052/    1C43 : 00                                                  db 0
(1) 4052/    1C44 : 00                                                  db 0
(1) 4052/    1C45 : 00                                                  db 0
(1) 4052/    1C46 : 00                                                  db 0
(1) 4052/    1C47 : 00                                                  db 0
(1) 4052/    1C48 : 00                                                  db 0
(1) 4052/    1C49 : 00                                                  db 0
(1) 4052/    1C4A : 00                                                  db 0
(1) 4052/    1C4B : 00                                                  db 0
(1) 4052/    1C4C : 00                                                  db 0
(1) 4052/    1C4D : 00                                                  db 0
(1) 4052/    1C4E : 00                                                  db 0
(1) 4052/    1C4F : 00                                                  db 0
(1) 4052/    1C50 : 00                                                  db 0
(1) 4052/    1C51 : 00                                                  db 0
(1) 4052/    1C52 : 00                                                  db 0
(1) 4052/    1C53 : 00                                                  db 0
(1) 4052/    1C54 : 00                                                  db 0
(1) 4052/    1C55 : 00                                                  db 0
(1) 4052/    1C56 : 00                                                  db 0
(1) 4052/    1C57 : 00                                                  db 0
(1) 4052/    1C58 : 00                                                  db 0
(1) 4052/    1C59 : 00                                                  db 0
(1) 4052/    1C5A : 00                                                  db 0
(1) 4052/    1C5B : 00                                                  db 0
(1) 4052/    1C5C : 00                                                  db 0
(1) 4052/    1C5D : 00                                                  db 0
(1) 4052/    1C5E : 00                                                  db 0
(1) 4052/    1C5F : 00                                                  db 0
(1) 4052/    1C60 : 00                                                  db 0
(1) 4052/    1C61 : 00                                                  db 0
(1) 4052/    1C62 : 00                                                  db 0
(1) 4052/    1C63 : 00                                                  db 0
(1) 4052/    1C64 : 00                                                  db 0
(1) 4052/    1C65 : 00                                                  db 0
(1) 4052/    1C66 : 00                                                  db 0
(1) 4052/    1C67 : 00                                                  db 0
(1) 4052/    1C68 : 00                                                  db 0
(1) 4052/    1C69 : 00                                                  db 0
(1) 4052/    1C6A : 00                                                  db 0
(1) 4052/    1C6B : 00                                                  db 0
(1) 4052/    1C6C : 00                                                  db 0
(1) 4052/    1C6D : 00                                                  db 0
(1) 4052/    1C6E : 00                                                  db 0
(1) 4052/    1C6F : 00                                                  db 0
(1) 4052/    1C70 : 00                                                  db 0
(1) 4052/    1C71 : 00                                                  db 0
(1) 4052/    1C72 : 00                                                  db 0
(1) 4052/    1C73 : 00                                                  db 0
(1) 4052/    1C74 : 00                                                  db 0
(1) 4052/    1C75 : 00                                                  db 0
(1) 4052/    1C76 : 00                                                  db 0
(1) 4052/    1C77 : 00                                                  db 0
(1) 4052/    1C78 : 00                                                  db 0
(1) 4052/    1C79 : 00                                                  db 0
(1) 4052/    1C7A : 00                                                  db 0
(1) 4052/    1C7B : 00                                                  db 0
(1) 4052/    1C7C : 00                                                  db 0
(1) 4052/    1C7D : 00                                                  db 0
(1) 4052/    1C7E : 00                                                  db 0
(1) 4052/    1C7F : 00                                                  db 0
(1) 4052/    1C80 : 00                                                  db 0
(1) 4052/    1C81 : 00                                                  db 0
(1) 4052/    1C82 : 00                                                  db 0
(1) 4052/    1C83 : 00                                                  db 0
(1) 4052/    1C84 : 00                                                  db 0
(1) 4052/    1C85 : 00                                                  db 0
(1) 4052/    1C86 : 00                                                  db 0
(1) 4052/    1C87 : 00                                                  db 0
(1) 4052/    1C88 : 00                                                  db 0
(1) 4052/    1C89 : 00                                                  db 0
(1) 4052/    1C8A : 00                                                  db 0
(1) 4052/    1C8B : 00                                                  db 0
(1) 4052/    1C8C : 00                                                  db 0
(1) 4052/    1C8D : 00                                                  db 0
(1) 4052/    1C8E : 00                                                  db 0
(1) 4052/    1C8F : 00                                                  db 0
(1) 4052/    1C90 : 00                                                  db 0
(1) 4052/    1C91 : 00                                                  db 0
(1) 4052/    1C92 : 00                                                  db 0
(1) 4052/    1C93 : 00                                                  db 0
(1) 4052/    1C94 : 00                                                  db 0
(1) 4052/    1C95 : 00                                                  db 0
(1) 4052/    1C96 : 00                                                  db 0
(1) 4052/    1C97 : 00                                                  db 0
(1) 4052/    1C98 : 00                                                  db 0
(1) 4052/    1C99 : 00                                                  db 0
(1) 4052/    1C9A : 00                                                  db 0
(1) 4052/    1C9B : 00                                                  db 0
(1) 4052/    1C9C : 00                                                  db 0
(1) 4052/    1C9D : 00                                                  db 0
(1) 4052/    1C9E : 00                                                  db 0
(1) 4052/    1C9F : 00                                                  db 0
(1) 4052/    1CA0 : 00                                                  db 0
(1) 4052/    1CA1 : 00                                                  db 0
(1) 4052/    1CA2 : 00                                                  db 0
(1) 4052/    1CA3 : 00                                                  db 0
(1) 4052/    1CA4 : 00                                                  db 0
(1) 4052/    1CA5 : 00                                                  db 0
(1) 4052/    1CA6 : 00                                                  db 0
(1) 4052/    1CA7 : 00                                                  db 0
(1) 4052/    1CA8 : 00                                                  db 0
(1) 4052/    1CA9 : 00                                                  db 0
(1) 4052/    1CAA : 00                                                  db 0
(1) 4052/    1CAB : 00                                                  db 0
(1) 4052/    1CAC : 00                                                  db 0
(1) 4052/    1CAD : 00                                                  db 0
(1) 4052/    1CAE : 00                                                  db 0
(1) 4052/    1CAF : 00                                                  db 0
(1) 4052/    1CB0 : 00                                                  db 0
(1) 4052/    1CB1 : 00                                                  db 0
(1) 4052/    1CB2 : 00                                                  db 0
(1) 4052/    1CB3 : 00                                                  db 0
(1) 4052/    1CB4 : 00                                                  db 0
(1) 4052/    1CB5 : 00                                                  db 0
(1) 4052/    1CB6 : 00                                                  db 0
(1) 4052/    1CB7 : 00                                                  db 0
(1) 4052/    1CB8 : 00                                                  db 0
(1) 4052/    1CB9 : 00                                                  db 0
(1) 4052/    1CBA : 00                                                  db 0
(1) 4052/    1CBB : 00                                                  db 0
(1) 4052/    1CBC : 00                                                  db 0
(1) 4052/    1CBD : 00                                                  db 0
(1) 4052/    1CBE : 00                                                  db 0
(1) 4052/    1CBF : 00                                                  db 0
(1) 4052/    1CC0 : 00                                                  db 0
(1) 4052/    1CC1 : 00                                                  db 0
(1) 4052/    1CC2 : 00                                                  db 0
(1) 4052/    1CC3 : 00                                                  db 0
(1) 4052/    1CC4 : 00                                                  db 0
(1) 4052/    1CC5 : 00                                                  db 0
(1) 4052/    1CC6 : 00                                                  db 0
(1) 4052/    1CC7 : 00                                                  db 0
(1) 4052/    1CC8 : 00                                                  db 0
(1) 4052/    1CC9 : 00                                                  db 0
(1) 4052/    1CCA : 00                                                  db 0
(1) 4052/    1CCB : 00                                                  db 0
(1) 4052/    1CCC : 00                                                  db 0
(1) 4052/    1CCD : 00                                                  db 0
(1) 4052/    1CCE : 00                                                  db 0
(1) 4052/    1CCF : 00                                                  db 0
(1) 4052/    1CD0 : 00                                                  db 0
(1) 4052/    1CD1 : 00                                                  db 0
(1) 4052/    1CD2 : 00                                                  db 0
(1) 4052/    1CD3 : 00                                                  db 0
(1) 4052/    1CD4 : 00                                                  db 0
(1) 4052/    1CD5 : 00                                                  db 0
(1) 4052/    1CD6 : 00                                                  db 0
(1) 4052/    1CD7 : 00                                                  db 0
(1) 4052/    1CD8 : 00                                                  db 0
(1) 4052/    1CD9 : 00                                                  db 0
(1) 4052/    1CDA : 00                                                  db 0
(1) 4052/    1CDB : 00                                                  db 0
(1) 4052/    1CDC : 00                                                  db 0
(1) 4052/    1CDD : 00                                                  db 0
(1) 4052/    1CDE : 00                                                  db 0
(1) 4052/    1CDF : 00                                                  db 0
(1) 4052/    1CE0 : 00                                                  db 0
(1) 4052/    1CE1 : 00                                                  db 0
(1) 4052/    1CE2 : 00                                                  db 0
(1) 4052/    1CE3 : 00                                                  db 0
(1) 4052/    1CE4 : 00                                                  db 0
(1) 4052/    1CE5 : 00                                                  db 0
(1) 4052/    1CE6 : 00                                                  db 0
(1) 4052/    1CE7 : 00                                                  db 0
(1) 4052/    1CE8 : 00                                                  db 0
(1) 4052/    1CE9 : 00                                                  db 0
(1) 4052/    1CEA : 00                                                  db 0
(1) 4052/    1CEB : 00                                                  db 0
(1) 4052/    1CEC : 00                                                  db 0
(1) 4052/    1CED : 00                                                  db 0
(1) 4052/    1CEE : 00                                                  db 0
(1) 4052/    1CEF : 00                                                  db 0
(1) 4052/    1CF0 : 00                                                  db 0
(1) 4052/    1CF1 : 00                                                  db 0
(1) 4052/    1CF2 : 00                                                  db 0
(1) 4052/    1CF3 : 00                                                  db 0
(1) 4052/    1CF4 : 00                                                  db 0
(1) 4052/    1CF5 : 00                                                  db 0
(1) 4052/    1CF6 : 00                                                  db 0
(1) 4052/    1CF7 : 00                                                  db 0
(1) 4052/    1CF8 : 00                                                  db 0
(1) 4052/    1CF9 : 00                                                  db 0
(1) 4052/    1CFA : 00                                                  db 0
(1) 4052/    1CFB : 00                                                  db 0
(1) 4052/    1CFC : 00                                                  db 0
(1) 4052/    1CFD : 00                                                  db 0
(1) 4052/    1CFE : 00                                                  db 0
(1) 4052/    1CFF : 00                                                  db 0
(1) 4052/    1D00 :                     
(1) 4053/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4054/    1E00 :                     trkCach_0	ds MAX_RCACH	; ** MUST BE aligned **
(1) 4055/    1E40 :                     trkCach_1	ds MAX_RCACH
(1) 4056/    1E80 :                     trkCach_2	ds MAX_RCACH
(1) 4057/    1EC0 :                     trkCach_3	ds MAX_RCACH
(1) 4058/    1F00 :                     
(1) 4059/    1F00 :                     ; --------------------------------------------------------
(1) 4060/    1F00 :                     
(1) 4061/    1F00 :                     		cpu 68000	; [AS] Exit Z80
(1) 4062/    1F00 :                     		padding off	; [AS] NO padding (again)
(1) 4063/  88390A :                     		phase Z80_TOP+*	; [AS] Relocate PC
(1) 4064/  88390A :                     		align 2		; [AS] Align by 2
(1) 4065/  88390A :                     
     279/  88390A :                     Z80_CODE_END:
     281/  88390A :                     
     283/    390A :                     		dephase
     285/    390A :                     
     286/    390A :                     ; ===========================================================================
     287/    390A :                     ; ----------------------------------------------------------------
     288/    390A :                     ; GAME DATA for ALL Cartridge and Disc
     289/    390A :                     ; ----------------------------------------------------------------
     290/    390A :                     
     291/    390A :                     ; --------------------------------------------------------
     292/    390A :                     ; SEGA CD / SEGA CD32X ISO header
     293/    390A :                     ; --------------------------------------------------------
     294/    390A :                     
     307/    390A :                     
     308/    390A :                     ; ====================================================================
     309/    390A :                     ; --------------------------------------------------------
     310/    390A :                     ; Screen modes
     311/    390A :                     ; --------------------------------------------------------
     312/    390A :                     
     316/  88390A :                     		phase $880000+*
     318/  88390A :                     Md_Screen00:
     320/    390A :                     		dephase
     323/FFFFFFFFFFFF1800 :                     		phase RAM_UserCode
     325/FFFFFFFFFFFF1800 :                     cscrn0_s:
     326/FFFFFFFFFFFF1800 :                     		include "game/screen_0.asm"
(1)    1/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFF1800 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF1800 :                     ; Default gamemode
(1)    4/FFFFFFFFFFFF1800 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF1800 :                     
(1)    6/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)    8/FFFFFFFFFFFF1800 :                     ; Variables
(1)    9/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   10/FFFFFFFFFFFF1800 :                     
(1)   11/FFFFFFFFFFFF1800 : =$4000              var_MoveSpd	equ	$4000
(1)   12/FFFFFFFFFFFF1800 : =$3                 MAX_TSTTRKS	equ	3
(1)   13/FFFFFFFFFFFF1800 : =$5                 MAX_TSTENTRY	equ	5
(1)   14/FFFFFFFFFFFF1800 :                     
(1)   15/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)   16/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   17/FFFFFFFFFFFF1800 :                     ; Structs
(1)   18/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   19/FFFFFFFFFFFF1800 :                     
(1)   20/FFFFFFFFFFFF1800 :                     ; 		struct 0
(1)   21/FFFFFFFFFFFF1800 :                     ; strc_xpos	ds.w 1
(1)   22/FFFFFFFFFFFF1800 :                     ; strc_ypos	ds.w 1
(1)   23/FFFFFFFFFFFF1800 :                     ; 		endstruct
(1)   24/FFFFFFFFFFFF1800 :                     
(1)   25/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)   26/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   27/FFFFFFFFFFFF1800 :                     ; This mode's RAM
(1)   28/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   29/FFFFFFFFFFFF1800 :                     
(1)   30/FFFFFFFFFFFF1800 : (MACRO)             			struct RAM_ScreenBuff
(1)   30/FFFFFFFFFFFF1800 : =$FFFFFFFFFF..      GLBL_LASTPC     set *
(1)   30/    390A :                                     dephase
(1)   30/    390A : =$390A              GLBL_LASTORG    set *
(1)   30/FFFFFFFFFFFFB500 :                                     phase RAM_SCREENBUFF
(1)   31/FFFFFFFFFFFFB500 :                     RAM_EmiPosX		ds.l 1
(1)   32/FFFFFFFFFFFFB504 :                     RAM_EmiPosY		ds.l 1
(1)   33/FFFFFFFFFFFFB508 :                     RAM_EmiMoveX		ds.l 1
(1)   34/FFFFFFFFFFFFB50C :                     RAM_EmiMoveY		ds.l 1
(1)   35/FFFFFFFFFFFFB510 :                     RAM_EmiJumpSpd		ds.l 1
(1)   36/FFFFFFFFFFFFB514 :                     RAM_EmiJumpY		ds.l 1
(1)   37/FFFFFFFFFFFFB518 :                     RAM_EmiFlags		ds.w 1
(1)   38/FFFFFFFFFFFFB51A :                     RAM_EmiBlockX		ds.w 1
(1)   39/FFFFFFFFFFFFB51C :                     RAM_EmiBlockY		ds.w 1
(1)   40/FFFFFFFFFFFFB51E :                     RAM_EmiChar		ds.w 1
(1)   41/FFFFFFFFFFFFB520 :                     RAM_EmiAnim		ds.w 1
(1)   42/FFFFFFFFFFFFB522 :                     RAM_EmiUpd		ds.w 1
(1)   43/FFFFFFFFFFFFB524 :                     RAM_EmiHide		ds.w 1
(1)   44/FFFFFFFFFFFFB526 :                     RAM_ShakeMe		ds.w 1
(1)   45/FFFFFFFFFFFFB528 :                     RAM_BoardUpd		ds.w 1
(1)   46/FFFFFFFFFFFFB52A :                     RAM_CurrType		ds.w 1
(1)   47/FFFFFFFFFFFFB52C :                     RAM_BgCamera		ds.w 1
(1)   48/FFFFFFFFFFFFB52E :                     RAM_Xpos		ds.w 1
(1)   49/FFFFFFFFFFFFB530 :                     RAM_CurrSelc		ds.w 1
(1)   50/FFFFFFFFFFFFB532 :                     RAM_CurrIndx		ds.w 1
(1)   51/FFFFFFFFFFFFB534 :                     RAM_CurrTrack		ds.w 1
(1)   52/FFFFFFFFFFFFB536 :                     RAM_CurrTicks		ds.w 1
(1)   53/FFFFFFFFFFFFB538 :                     RAM_CurrTempo		ds.w 1
(1)   54/FFFFFFFFFFFFB53A :                     RAM_WindowCurr		ds.w 1
(1)   55/FFFFFFFFFFFFB53C :                     RAM_WindowNew		ds.w 1
(1)   56/FFFFFFFFFFFFB53E :                     RAM_BoardBlocks		ds.b 6*6
(1)   57/FFFFFFFFFFFFB562 :                     sizeof_thisbuff0	ds.l 0
(1)   58/FFFFFFFFFFFFB562 : (MACRO)             			endstruct
(1)   58/FFFFFFFFFFFFB500 :                                     !org GLBL_LASTORG
(1)   58/FFFFFFFFFFFF1800 :                                     phase GLBL_LASTPC
(1)   59/FFFFFFFFFFFF1800 :                     
(1)   60/FFFFFFFFFFFF1800 : (MACRO)             			erreport "SCREEN0 BUFF",sizeof_thisbuff0-RAM_ScreenBuff,MAX_ScrnBuff
(1)   61/FFFFFFFFFFFF1800 :                     
(1)   62/FFFFFFFFFFFF1800 :                     ; ====================================================================
(1)   63/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   64/FFFFFFFFFFFF1800 :                     ; Code start
(1)   65/FFFFFFFFFFFF1800 :                     ; ------------------------------------------------------
(1)   66/FFFFFFFFFFFF1800 :                     
(1)   67/FFFFFFFFFFFF1800 :                     thisCode_Top:
(1)   68/FFFFFFFFFFFF1800 : 46FC 2700           		move.w	#$2700,sr
(1)   69/FFFFFFFFFFFF1804 : 6100 F832           		bsr	Mode_Init
(1)   70/FFFFFFFFFFFF1808 : 6100 EBFA           		bsr	Video_PrintInit
(1)   71/FFFFFFFFFFFF180C : 31FC 0000 B52A      		move.w	#0,(RAM_CurrType).w
(1)   72/FFFFFFFFFFFF1812 : 31FC 00D0 B538      		move.w	#208,(RAM_CurrTempo).w
(1)   73/FFFFFFFFFFFF1818 : 303C 9200           		move.w	#$9200,d0
(1)   74/FFFFFFFFFFFF181C : 31C0 B53A           		move.w	d0,(RAM_WindowCurr).w
(1)   75/FFFFFFFFFFFF1820 : 31C0 B53C           		move.w	d0,(RAM_WindowNew).w
(1)   76/FFFFFFFFFFFF1824 :                     
(1)   77/FFFFFFFFFFFF1824 :                     	; Default Emilie vars
(1)   78/FFFFFFFFFFFF1824 : 303C 0020           		move.w	#$20,d0
(1)   79/FFFFFFFFFFFF1828 : 31C0 B500           		move.w	d0,(RAM_EmiPosX).w
(1)   80/FFFFFFFFFFFF182C : 31C0 B508           		move.w	d0,(RAM_EmiMoveX).w
(1)   81/FFFFFFFFFFFF1830 : 303C 0042           		move.w	#$42,d0
(1)   82/FFFFFFFFFFFF1834 : 31C0 B504           		move.w	d0,(RAM_EmiPosY).w
(1)   83/FFFFFFFFFFFF1838 : 31C0 B50C           		move.w	d0,(RAM_EmiMoveY).w
(1)   84/FFFFFFFFFFFF183C : 31FC FFFF B51A      		move.w	#-1,(RAM_EmiBlockX).w
(1)   85/FFFFFFFFFFFF1842 : 31FC 0002 B51C      		move.w	#2,(RAM_EmiBlockY).w
(1)   86/FFFFFFFFFFFF1848 : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)   87/FFFFFFFFFFFF184E :                     
(1)   88/FFFFFFFFFFFF184E : 41F8 8430           		lea	(RAM_PaletteFd+$60),a0
(1)   89/FFFFFFFFFFFF1852 : 30FC 0000           		move.w	#0,(a0)+
(1)   90/FFFFFFFFFFFF1856 : 30FC 0EEE           		move.w	#$EEE,(a0)+
(1)   91/FFFFFFFFFFFF185A : 30FC 0CCC           		move.w	#$CCC,(a0)+
(1)   92/FFFFFFFFFFFF185E : 30FC 0AAA           		move.w	#$AAA,(a0)+
(1)   93/FFFFFFFFFFFF1862 : 30FC 0888           		move.w	#$888,(a0)+
(1)   94/FFFFFFFFFFFF1866 : 30FC 0222           		move.w	#$222,(a0)+
(1)   95/FFFFFFFFFFFF186A : 4278 83D0           		clr.w	(RAM_PaletteFd).w		; <-- quick patch
(1)   96/FFFFFFFFFFFF186E : 4278 81D0           		clr.w	(RAM_MdMarsPalFd).w
(1)   97/FFFFFFFFFFFF1872 :                     	; Test image
(1)   99/FFFFFFFFFFFF1872 : 41F9 0090 4608      		lea	(PalMars_TEST),a0
(1)  100/FFFFFFFFFFFF1878 : 7000                		moveq	#0,d0
(1)  101/FFFFFFFFFFFF187A : 323C 0100           		move.w	#256,d1
(1)  102/FFFFFFFFFFFF187E : 7400                		moveq	#0,d2
(1)  103/FFFFFFFFFFFF1880 : 6100 F18A           		bsr	Video_FadePal_Mars
(1)  105/FFFFFFFFFFFF1884 :                     
(1)  106/FFFFFFFFFFFF1884 : 203C 0004 0000      		move.l	#ART_TESTBOARD,d0
(1)  107/FFFFFFFFFFFF188A : 343C 0300           		move.w	#ART_TESTBOARD_e-ART_TESTBOARD,d2
(1)  108/FFFFFFFFFFFF188E : 323C 0020           		move.w	#cell_vram($0001),d1
(1)  109/FFFFFFFFFFFF1892 : 6100 F064           		bsr	Video_LoadArt
(1)  110/FFFFFFFFFFFF1896 : 41F9 0090 50E6      		lea	(MAP_TESTBOARD),a0
(1)  111/FFFFFFFFFFFF189C : 203C 0000 0000      		move.l	#locate(0,0,0),d0
(1)  112/FFFFFFFFFFFF18A2 : 223C 0027 001B      		move.l	#mapsize(320,224),d1
(1)  113/FFFFFFFFFFFF18A8 : 343C 2001           		move.w	#$2000|$0001,d2
(1)  114/FFFFFFFFFFFF18AC : 6100 EA94           		bsr	Video_LoadMap
(1)  115/FFFFFFFFFFFF18B0 :                     
(1)  116/FFFFFFFFFFFF18B0 : 41FA 05B8           		lea	PAL_EMI(pc),a0
(1)  117/FFFFFFFFFFFF18B4 : 7000                		moveq	#0,d0
(1)  118/FFFFFFFFFFFF18B6 : 323C 000F           		move.w	#$F,d1
(1)  119/FFFFFFFFFFFF18BA : 6100 ED58           		bsr	Video_FadePal
(1)  120/FFFFFFFFFFFF18BE : 41FA 05C0           		lea	PAL_TESTBOARD(pc),a0		; ON palette
(1)  121/FFFFFFFFFFFF18C2 : 7010                		moveq	#$10,d0
(1)  122/FFFFFFFFFFFF18C4 : 323C 000F           		move.w	#$F,d1
(1)  123/FFFFFFFFFFFF18C8 : 6100 ED4A           		bsr	Video_FadePal
(1)  124/FFFFFFFFFFFF18CC :                     
(1)  125/FFFFFFFFFFFF18CC :                     	; Shared:
(1)  126/FFFFFFFFFFFF18CC :                     ; 		lea	str_Stats(pc),a0
(1)  127/FFFFFFFFFFFF18CC :                     ; 		move.l	#locate(0,1,1),d0
(1)  128/FFFFFFFFFFFF18CC :                     ; 		bsr	Video_Print
(1)  129/FFFFFFFFFFFF18CC :                     ; 	Set Fade-in settings
(1)  130/FFFFFFFFFFFF18CC : 08F9 0006 FFFF 8A51 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)  131/FFFFFFFFFFFF18D4 : 11FC 0081 8A5C      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)  132/FFFFFFFFFFFF18DA : 6100 E974           		bsr	Video_Update
(1)  133/FFFFFFFFFFFF18DE : 31FC 0001 8A42      		move.w	#1,(RAM_FadeMdIncr).w
(1)  134/FFFFFFFFFFFF18E4 : 31FC 0002 8A4A      		move.w	#2,(RAM_FadeMarsIncr).w
(1)  135/FFFFFFFFFFFF18EA : 31FC 0001 8A44      		move.w	#1,(RAM_FadeMdDelay).w
(1)  136/FFFFFFFFFFFF18F0 : 31FC 0000 8A4C      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  137/FFFFFFFFFFFF18F6 : 31FC 0001 8A40      		move.w	#1,(RAM_FadeMdReq).w
(1)  138/FFFFFFFFFFFF18FC : 31FC 0001 8A48      		move.w	#1,(RAM_FadeMarsReq).w
(1)  139/FFFFFFFFFFFF1902 :                     
(1)  154/FFFFFFFFFFFF1902 : 7000                		moveq	#0,d0
(1)  155/FFFFFFFFFFFF1904 : 6100 E8A0           		bsr	gemaPlayTrack
(1)  156/FFFFFFFFFFFF1908 :                     
(1)  157/FFFFFFFFFFFF1908 :                     ; ====================================================================
(1)  158/FFFFFFFFFFFF1908 :                     ; ------------------------------------------------------
(1)  159/FFFFFFFFFFFF1908 :                     ; Loop
(1)  160/FFFFFFFFFFFF1908 :                     ; ------------------------------------------------------
(1)  161/FFFFFFFFFFFF1908 :                     
(1)  162/FFFFFFFFFFFF1908 :                     .loop:
(1)  163/FFFFFFFFFFFF1908 : 6100 F302           		bsr	System_WaitFrame
(1)  164/FFFFFFFFFFFF190C : 6100 ECF4           		bsr	Video_RunFade
(1)  165/FFFFFFFFFFFF1910 : 41FA 0482           		lea	str_Title(pc),a0
(1)  166/FFFFFFFFFFFF1914 : 203C 0000 0101      		move.l	#locate(0,1,1),d0
(1)  167/FFFFFFFFFFFF191A : 6100 EB18           		bsr	Video_Print
(1)  168/FFFFFFFFFFFF191E :                     ;
(1)  169/FFFFFFFFFFFF191E :                     	; Visual updates go here
(1)  170/FFFFFFFFFFFF191E : 6100 03B0           		bsr	Emilie_MkSprite
(1)  171/FFFFFFFFFFFF1922 : 6100 0282           		bsr	Board_SwapPos
(1)  172/FFFFFFFFFFFF1926 :                     
(1)  173/FFFFFFFFFFFF1926 :                     ; 		move.l	#$7C000003,(vdp_ctrl).l
(1)  174/FFFFFFFFFFFF1926 :                     ; 		move.l	(RAM_Xpos).l,d0
(1)  175/FFFFFFFFFFFF1926 :                     ; 		move.l	d0,(vdp_data).l
(1)  176/FFFFFFFFFFFF1926 :                     
(1)  177/FFFFFFFFFFFF1926 : 41F9 FFFF 7BC0      		lea	(RAM_VerScroll),a0
(1)  178/FFFFFFFFFFFF192C : 3638 B526           		move.w	(RAM_ShakeMe).w,d3
(1)  179/FFFFFFFFFFFF1930 : 3803                		move.w	d3,d4
(1)  180/FFFFFFFFFFFF1932 : E64B                		lsr.w	#3,d3
(1)  181/FFFFFFFFFFFF1934 : 0804 0001           		btst	#1,d4
(1)  182/FFFFFFFFFFFF1938 : 6602                		bne.s	.midshk
(1)  183/FFFFFFFFFFFF193A : 4443                		neg.w	d3
(1)  184/FFFFFFFFFFFF193C :                     .midshk:
(1)  185/FFFFFFFFFFFF193C : 3083                		move.w	d3,(a0)
(1)  186/FFFFFFFFFFFF193E :                     
(1)  187/FFFFFFFFFFFF193E :                     
(1)  188/FFFFFFFFFFFF193E :                     	; Main loop is back
(1)  189/FFFFFFFFFFFF193E : 3038 B52A           		move.w	(RAM_CurrType).w,d0
(1)  190/FFFFFFFFFFFF1942 : C07C 001F           		and.w	#%11111,d0
(1)  191/FFFFFFFFFFFF1946 : D040                		add.w	d0,d0
(1)  192/FFFFFFFFFFFF1948 : D040                		add.w	d0,d0
(1)  193/FFFFFFFFFFFF194A : 4EBB 0004           		jsr	.list(pc,d0.w)
(1)  194/FFFFFFFFFFFF194E : 60B8                		bra	.loop
(1)  195/FFFFFFFFFFFF1950 :                     
(1)  196/FFFFFFFFFFFF1950 :                     ; ====================================================================
(1)  197/FFFFFFFFFFFF1950 :                     ; ------------------------------------------------------
(1)  198/FFFFFFFFFFFF1950 :                     ; Mode sections
(1)  199/FFFFFFFFFFFF1950 :                     ; ------------------------------------------------------
(1)  200/FFFFFFFFFFFF1950 :                     
(1)  201/FFFFFFFFFFFF1950 :                     .list:
(1)  202/FFFFFFFFFFFF1950 : 6000 000A           		bra.w	.mode0
(1)  203/FFFFFFFFFFFF1954 : 6000 0006           		bra.w	.mode0
(1)  204/FFFFFFFFFFFF1958 : 6000 0002           		bra.w	.mode0
(1)  205/FFFFFFFFFFFF195C :                     
(1)  206/FFFFFFFFFFFF195C :                     ; --------------------------------------------------
(1)  207/FFFFFFFFFFFF195C :                     ; Mode 0
(1)  208/FFFFFFFFFFFF195C :                     ; --------------------------------------------------
(1)  209/FFFFFFFFFFFF195C :                     
(1)  210/FFFFFFFFFFFF195C :                     .mode0:
(1)  211/FFFFFFFFFFFF195C : 4A78 B52A           		tst.w	(RAM_CurrType).w
(1)  212/FFFFFFFFFFFF1960 : 6B12                		bmi	.mode0_loop
(1)  213/FFFFFFFFFFFF1962 : 0078 8000 B52A      		or.w	#$8000,(RAM_CurrType).w
(1)  214/FFFFFFFFFFFF1968 : 31FC 0000 B524      		move.w	#0,(RAM_EmiHide).w
(1)  215/FFFFFFFFFFFF196E : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)  216/FFFFFFFFFFFF1974 :                     
(1)  217/FFFFFFFFFFFF1974 :                     ; Mode 0 mainloop
(1)  218/FFFFFFFFFFFF1974 :                     .mode0_loop:
(1)  219/FFFFFFFFFFFF1974 : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  220/FFFFFFFFFFFF1978 : E04F                		lsr.w	#8,d7
(1)  221/FFFFFFFFFFFF197A : 0807 000B           		btst	#bitJoyMode,d7
(1)  222/FFFFFFFFFFFF197E : 670C                		beq.s	.no_mode0
(1)  223/FFFFFFFFFFFF1980 : 31FC 0001 B52A      		move.w	#1,(RAM_CurrType).w
(1)  224/FFFFFFFFFFFF1986 : 31FC 920D B53C      		move.w	#$920D,(RAM_WindowNew).w
(1)  225/FFFFFFFFFFFF198C :                     .no_mode0:
(1)  226/FFFFFFFFFFFF198C :                     
(1)  227/FFFFFFFFFFFF198C :                     ; 		lea	str_TempVal(pc),a0		; Main title
(1)  228/FFFFFFFFFFFF198C :                     ; 		move.l	#locate(0,0,0),d0
(1)  229/FFFFFFFFFFFF198C :                     ; 		bsr	Video_Print
(1)  230/FFFFFFFFFFFF198C :                     
(1)  231/FFFFFFFFFFFF198C :                     	; BOOM TEST
(1)  232/FFFFFFFFFFFF198C :                     ; 		move.w	(Controller_1+on_press),d7
(1)  233/FFFFFFFFFFFF198C :                     ; 		btst	#bitJoyA,d7
(1)  234/FFFFFFFFFFFF198C :                     ; 		beq.s	.noah
(1)  235/FFFFFFFFFFFF198C :                     ; 		move.w	#$20,(RAM_ShakeMe).w
(1)  236/FFFFFFFFFFFF198C :                     ; 		moveq	#0,d2
(1)  237/FFFFFFFFFFFF198C :                     ; 		bsr	PlayThisSfx
(1)  238/FFFFFFFFFFFF198C :                     ; .noah:
(1)  239/FFFFFFFFFFFF198C :                     
(1)  240/FFFFFFFFFFFF198C :                     	; Shake explosion
(1)  241/FFFFFFFFFFFF198C : 3E38 B526           		move.w	(RAM_ShakeMe),d7
(1)  242/FFFFFFFFFFFF1990 : 4A78 B526           		tst.w	(RAM_ShakeMe).w
(1)  243/FFFFFFFFFFFF1994 : 671C                		beq.s	.no_shake
(1)  244/FFFFFFFFFFFF1996 : 0478 0001 B526      		sub.w	#1,(RAM_ShakeMe).w
(1)  245/FFFFFFFFFFFF199C : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)  246/FFFFFFFFFFFF19A2 : 08F8 0000 B528      		bset	#0,(RAM_BoardUpd).w
(1)  247/FFFFFFFFFFFF19A8 : 4A78 B526           		tst.w	(RAM_ShakeMe).w
(1)  248/FFFFFFFFFFFF19AC : 6604                		bne.s	.no_shake
(1)  249/FFFFFFFFFFFF19AE : 6100 0166           		bsr	Board_Reset
(1)  250/FFFFFFFFFFFF19B2 :                     .no_shake:
(1)  251/FFFFFFFFFFFF19B2 :                     ; 		bset	#0,(RAM_BoardUpd).w
(1)  252/FFFFFFFFFFFF19B2 :                     
(1)  253/FFFFFFFFFFFF19B2 :                     	; Emilie player input
(1)  254/FFFFFFFFFFFF19B2 : 1E38 B518           		move.b	(RAM_EmiFlags).w,d7
(1)  255/FFFFFFFFFFFF19B6 : 6100 029A           		bsr	Emilie_Move
(1)  256/FFFFFFFFFFFF19BA : 0838 0007 B518      		btst	#7,(RAM_EmiFlags).w
(1)  257/FFFFFFFFFFFF19C0 : 6600 00E8           		bne	.lockcontrl
(1)  258/FFFFFFFFFFFF19C4 : 0807 0007           		btst	#7,d7
(1)  259/FFFFFFFFFFFF19C8 : 673E                		beq.s	.after
(1)  260/FFFFFFFFFFFF19CA : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  261/FFFFFFFFFFFF19CE : 3E38 B51A           		move.w	(RAM_EmiBlockX).w,d7
(1)  262/FFFFFFFFFFFF19D2 : 8E78 B51C           		or.w	(RAM_EmiBlockY).w,d7
(1)  263/FFFFFFFFFFFF19D6 : 6B30                		bmi.s	.after
(1)  264/FFFFFFFFFFFF19D8 : 3038 B51A           		move.w	(RAM_EmiBlockX).w,d0
(1)  265/FFFFFFFFFFFF19DC : B07C 0006           		cmp.w	#6,d0
(1)  266/FFFFFFFFFFFF19E0 : 6C26                		bge.s	.after
(1)  267/FFFFFFFFFFFF19E2 : 3238 B51C           		move.w	(RAM_EmiBlockY).w,d1
(1)  268/FFFFFFFFFFFF19E6 : B27C 0006           		cmp.w	#6,d1
(1)  269/FFFFFFFFFFFF19EA : 6C1C                		bge.s	.after
(1)  270/FFFFFFFFFFFF19EC : C2FC 0006           		mulu.w	#6,d1
(1)  271/FFFFFFFFFFFF19F0 : D041                		add.w	d1,d0
(1)  272/FFFFFFFFFFFF19F2 : DCC0                		adda	d0,a6
(1)  273/FFFFFFFFFFFF19F4 : 0856 0000           		bchg	#0,(a6)
(1)  274/FFFFFFFFFFFF19F8 : 08F8 0000 B528      		bset	#0,(RAM_BoardUpd).w
(1)  275/FFFFFFFFFFFF19FE : 7201                		moveq	#1,d1
(1)  276/FFFFFFFFFFFF1A00 : 6100 00AA           		bsr	PlayThisSfx
(1)  277/FFFFFFFFFFFF1A04 : 6100 00AC           		bsr	Board_CheckMatch
(1)  278/FFFFFFFFFFFF1A08 :                     .after:
(1)  279/FFFFFFFFFFFF1A08 :                     
(1)  280/FFFFFFFFFFFF1A08 :                     	; UDLR
(1)  281/FFFFFFFFFFFF1A08 : 383C 0000           		move.w	#0,d4
(1)  282/FFFFFFFFFFFF1A0C : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  283/FFFFFFFFFFFF1A10 : 0807 0001           		btst	#bitJoyDown,d7
(1)  284/FFFFFFFFFFFF1A14 : 671A                		beq.s	.noz_down
(1)  285/FFFFFFFFFFFF1A16 : 0678 0018 B50C      		add.w	#$18,(RAM_EmiMoveY).w
(1)  286/FFFFFFFFFFFF1A1C : 0678 0001 B51C      		add.w	#1,(RAM_EmiBlockY).w
(1)  287/FFFFFFFFFFFF1A22 : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  288/FFFFFFFFFFFF1A26 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  289/FFFFFFFFFFFF1A30 :                     .noz_down:
(1)  290/FFFFFFFFFFFF1A30 : 383C 0004           		move.w	#4,d4
(1)  291/FFFFFFFFFFFF1A34 : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  292/FFFFFFFFFFFF1A38 : 0807 0000           		btst	#bitJoyUp,d7
(1)  293/FFFFFFFFFFFF1A3C : 671A                		beq.s	.noz_up
(1)  294/FFFFFFFFFFFF1A3E : 0678 FFE8 B50C      		add.w	#-$18,(RAM_EmiMoveY).w
(1)  295/FFFFFFFFFFFF1A44 : 0478 0001 B51C      		sub.w	#1,(RAM_EmiBlockY).w
(1)  296/FFFFFFFFFFFF1A4A : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  297/FFFFFFFFFFFF1A4E : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  298/FFFFFFFFFFFF1A58 :                     .noz_up:
(1)  299/FFFFFFFFFFFF1A58 : 383C 0008           		move.w	#8,d4
(1)  300/FFFFFFFFFFFF1A5C : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  301/FFFFFFFFFFFF1A60 : 0807 0003           		btst	#bitJoyRight,d7
(1)  302/FFFFFFFFFFFF1A64 : 671A                		beq.s	.noz_r
(1)  303/FFFFFFFFFFFF1A66 : 0678 0020 B508      		add.w	#$20,(RAM_EmiMoveX).w
(1)  304/FFFFFFFFFFFF1A6C : 0678 0001 B51A      		add.w	#1,(RAM_EmiBlockX).w
(1)  305/FFFFFFFFFFFF1A72 : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  306/FFFFFFFFFFFF1A76 : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  307/FFFFFFFFFFFF1A80 :                     .noz_r:
(1)  308/FFFFFFFFFFFF1A80 : 383C 000C           		move.w	#$C,d4
(1)  309/FFFFFFFFFFFF1A84 : 3E38 9804           		move.w	(Controller_1+on_press),d7
(1)  310/FFFFFFFFFFFF1A88 : 0807 0002           		btst	#bitJoyLeft,d7
(1)  311/FFFFFFFFFFFF1A8C : 671A                		beq.s	.noz_l
(1)  312/FFFFFFFFFFFF1A8E : 0678 FFE0 B508      		add.w	#-$20,(RAM_EmiMoveX).w
(1)  313/FFFFFFFFFFFF1A94 : 0478 0001 B51A      		sub.w	#1,(RAM_EmiBlockX).w
(1)  314/FFFFFFFFFFFF1A9A : 31C4 B51E           		move.w	d4,(RAM_EmiChar).w
(1)  315/FFFFFFFFFFFF1A9E : 23FC FFFE 0000 FFFF 		move.l	#-$20000,(RAM_EmiJumpSpd).l
                    B510                
(1)  316/FFFFFFFFFFFF1AA8 :                     .noz_l:
(1)  317/FFFFFFFFFFFF1AA8 : 4E75                		rts
(1)  318/FFFFFFFFFFFF1AAA :                     
(1)  319/FFFFFFFFFFFF1AAA :                     .lockcontrl:
(1)  320/FFFFFFFFFFFF1AAA :                     ; 		add.w	#6,(RAM_EmiJumpTan).w
(1)  321/FFFFFFFFFFFF1AAA : 4E75                		rts
(1)  322/FFFFFFFFFFFF1AAC :                     
(1)  323/FFFFFFFFFFFF1AAC :                     ; ====================================================================
(1)  324/FFFFFFFFFFFF1AAC :                     ; ------------------------------------------------------
(1)  325/FFFFFFFFFFFF1AAC :                     ; Subroutines
(1)  326/FFFFFFFFFFFF1AAC :                     ; ------------------------------------------------------
(1)  327/FFFFFFFFFFFF1AAC :                     
(1)  328/FFFFFFFFFFFF1AAC :                     ; d2 - BLOCK
(1)  329/FFFFFFFFFFFF1AAC :                     PlayThisSfx:
(1)  330/FFFFFFFFFFFF1AAC : 700F                		moveq	#$F,d0
(1)  331/FFFFFFFFFFFF1AAE : 6000 E712           		bra	gemaPlayFromBlk
(1)  332/FFFFFFFFFFFF1AB2 :                     
(1)  333/FFFFFFFFFFFF1AB2 :                     ; 		lea	(GemaTrkData_Sfx),a0
(1)  334/FFFFFFFFFFFF1AB2 :                     ; 		moveq	#1,d0
(1)  335/FFFFFFFFFFFF1AB2 :                     ; 		moveq	#6,d1
(1)  336/FFFFFFFFFFFF1AB2 :                     ; ; 		moveq	#0,d2
(1)  337/FFFFFFFFFFFF1AB2 :                     ; 		moveq	#0,d3
(1)  338/FFFFFFFFFFFF1AB2 :                     ; 		bra	Sound_TrkPlay
(1)  339/FFFFFFFFFFFF1AB2 :                     
(1)  340/FFFFFFFFFFFF1AB2 :                     Board_CheckMatch:
(1)  341/FFFFFFFFFFFF1AB2 :                     	; horizontal
(1)  342/FFFFFFFFFFFF1AB2 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  343/FFFFFFFFFFFF1AB6 : 7600                		moveq	#0,d3
(1)  344/FFFFFFFFFFFF1AB8 : 3C3C 0005           		move	#6-1,d6
(1)  345/FFFFFFFFFFFF1ABC :                     .x_chk_n:
(1)  346/FFFFFFFFFFFF1ABC : 3E3C 0005           		move.w	#6-1,d7
(1)  347/FFFFFFFFFFFF1AC0 : 7A00                		moveq	#0,d5
(1)  348/FFFFFFFFFFFF1AC2 :                     .x_chk:
(1)  349/FFFFFFFFFFFF1AC2 : DA16                		add.b	(a6),d5
(1)  350/FFFFFFFFFFFF1AC4 : DCFC 0001           		adda	#1,a6
(1)  351/FFFFFFFFFFFF1AC8 : 51CF FFF8           		dbf	d7,.x_chk
(1)  352/FFFFFFFFFFFF1ACC : BA3C 0006           		cmp.b	#6,d5
(1)  353/FFFFFFFFFFFF1AD0 : 6604                		bne.s	.x_off
(1)  354/FFFFFFFFFFFF1AD2 : D67C 0001           		add.w	#1,d3
(1)  355/FFFFFFFFFFFF1AD6 :                     .x_off:
(1)  356/FFFFFFFFFFFF1AD6 : 51CE FFE4           		dbf	d6,.x_chk_n
(1)  357/FFFFFFFFFFFF1ADA :                     	; vertical
(1)  358/FFFFFFFFFFFF1ADA : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  359/FFFFFFFFFFFF1ADE : 3C3C 0005           		move	#6-1,d6
(1)  360/FFFFFFFFFFFF1AE2 :                     .y_chk_n:
(1)  361/FFFFFFFFFFFF1AE2 : 2A4E                		move.l	a6,a5
(1)  362/FFFFFFFFFFFF1AE4 : 3E3C 0005           		move.w	#6-1,d7
(1)  363/FFFFFFFFFFFF1AE8 : 7A00                		moveq	#0,d5
(1)  364/FFFFFFFFFFFF1AEA :                     .y_chk:
(1)  365/FFFFFFFFFFFF1AEA : DA15                		add.b	(a5),d5
(1)  366/FFFFFFFFFFFF1AEC : DAFC 0006           		adda	#6,a5
(1)  367/FFFFFFFFFFFF1AF0 : 51CF FFF8           		dbf	d7,.y_chk
(1)  368/FFFFFFFFFFFF1AF4 : BA3C 0006           		cmp.b	#6,d5
(1)  369/FFFFFFFFFFFF1AF8 : 6604                		bne.s	.y_off
(1)  370/FFFFFFFFFFFF1AFA : D67C 0001           		add.w	#1,d3
(1)  371/FFFFFFFFFFFF1AFE :                     .y_off:
(1)  372/FFFFFFFFFFFF1AFE : DCFC 0001           		adda	#1,a6
(1)  373/FFFFFFFFFFFF1B02 : 51CE FFDE           		dbf	d6,.y_chk_n
(1)  374/FFFFFFFFFFFF1B06 : 4A43                		tst.w	d3
(1)  375/FFFFFFFFFFFF1B08 : 670A                		beq.s	.xs_off
(1)  376/FFFFFFFFFFFF1B0A : 31FC 0020 B526      		move.w	#$20,(RAM_ShakeMe).w
(1)  377/FFFFFFFFFFFF1B10 : 7200                		moveq	#0,d1
(1)  378/FFFFFFFFFFFF1B12 : 6198                		bsr	PlayThisSfx
(1)  379/FFFFFFFFFFFF1B14 :                     .xs_off:
(1)  380/FFFFFFFFFFFF1B14 : 4E75                		rts
(1)  381/FFFFFFFFFFFF1B16 :                     
(1)  382/FFFFFFFFFFFF1B16 :                     Board_Reset:
(1)  383/FFFFFFFFFFFF1B16 :                     	; horizontal
(1)  384/FFFFFFFFFFFF1B16 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  385/FFFFFFFFFFFF1B1A : 7600                		moveq	#0,d3
(1)  386/FFFFFFFFFFFF1B1C : 3C3C 0005           		move	#6-1,d6
(1)  387/FFFFFFFFFFFF1B20 :                     .x_chk_n:
(1)  388/FFFFFFFFFFFF1B20 : 2A4E                		move.l	a6,a5
(1)  389/FFFFFFFFFFFF1B22 : 3E3C 0005           		move.w	#6-1,d7
(1)  390/FFFFFFFFFFFF1B26 : 7A00                		moveq	#0,d5
(1)  391/FFFFFFFFFFFF1B28 :                     .x_chk:
(1)  392/FFFFFFFFFFFF1B28 : DA15                		add.b	(a5),d5
(1)  393/FFFFFFFFFFFF1B2A : DAFC 0001           		adda	#1,a5
(1)  394/FFFFFFFFFFFF1B2E : 51CF FFF8           		dbf	d7,.x_chk
(1)  395/FFFFFFFFFFFF1B32 : BA3C 0006           		cmp.b	#6,d5
(1)  396/FFFFFFFFFFFF1B36 : 6610                		bne.s	.x_off
(1)  397/FFFFFFFFFFFF1B38 : 284E                		move.l	a6,a4
(1)  398/FFFFFFFFFFFF1B3A : 7605                		moveq	#6-1,d3
(1)  399/FFFFFFFFFFFF1B3C :                     .x_clr:
(1)  400/FFFFFFFFFFFF1B3C : 08D4 0002           		bset	#2,(a4)
(1)  401/FFFFFFFFFFFF1B40 : D8FC 0001           		adda	#1,a4
(1)  402/FFFFFFFFFFFF1B44 : 51CB FFF6           		dbf	d3,.x_clr
(1)  403/FFFFFFFFFFFF1B48 :                     .x_off:
(1)  404/FFFFFFFFFFFF1B48 : DCFC 0006           		adda	#6,a6
(1)  405/FFFFFFFFFFFF1B4C : 51CE FFD2           		dbf	d6,.x_chk_n
(1)  406/FFFFFFFFFFFF1B50 :                     	; vertical
(1)  407/FFFFFFFFFFFF1B50 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  408/FFFFFFFFFFFF1B54 : 3C3C 0005           		move	#6-1,d6
(1)  409/FFFFFFFFFFFF1B58 :                     .y_chk_n:
(1)  410/FFFFFFFFFFFF1B58 : 2A4E                		move.l	a6,a5
(1)  411/FFFFFFFFFFFF1B5A : 3E3C 0005           		move.w	#6-1,d7
(1)  412/FFFFFFFFFFFF1B5E : 7A00                		moveq	#0,d5
(1)  413/FFFFFFFFFFFF1B60 :                     .y_chk:
(1)  414/FFFFFFFFFFFF1B60 : 1415                		move.b	(a5),d2
(1)  415/FFFFFFFFFFFF1B62 : C47C 0001           		and	#1,d2
(1)  416/FFFFFFFFFFFF1B66 : DA02                		add.b	d2,d5
(1)  417/FFFFFFFFFFFF1B68 : DAFC 0006           		adda	#6,a5
(1)  418/FFFFFFFFFFFF1B6C : 51CF FFF2           		dbf	d7,.y_chk
(1)  419/FFFFFFFFFFFF1B70 : BA3C 0006           		cmp.b	#6,d5
(1)  420/FFFFFFFFFFFF1B74 : 6610                		bne.s	.y_off
(1)  421/FFFFFFFFFFFF1B76 : 284E                		move.l	a6,a4
(1)  422/FFFFFFFFFFFF1B78 : 7605                		moveq	#6-1,d3
(1)  423/FFFFFFFFFFFF1B7A :                     .y_clr:
(1)  424/FFFFFFFFFFFF1B7A : 08D4 0002           		bset	#2,(a4)
(1)  425/FFFFFFFFFFFF1B7E : D8FC 0006           		adda	#6,a4
(1)  426/FFFFFFFFFFFF1B82 : 51CB FFF6           		dbf	d3,.y_clr
(1)  427/FFFFFFFFFFFF1B86 :                     .y_off:
(1)  428/FFFFFFFFFFFF1B86 : DCFC 0001           		adda	#1,a6
(1)  429/FFFFFFFFFFFF1B8A : 51CE FFCC           		dbf	d6,.y_chk_n
(1)  430/FFFFFFFFFFFF1B8E :                     
(1)  431/FFFFFFFFFFFF1B8E :                     	; clearall req
(1)  432/FFFFFFFFFFFF1B8E : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  433/FFFFFFFFFFFF1B92 : 7E23                		moveq	#(6*6)-1,d7
(1)  434/FFFFFFFFFFFF1B94 :                     .nxtclr:
(1)  435/FFFFFFFFFFFF1B94 : 0816 0002           		btst	#2,(a6)
(1)  436/FFFFFFFFFFFF1B98 : 6702                		beq.s	.noclrrq
(1)  437/FFFFFFFFFFFF1B9A : 4216                		clr.b	(a6)
(1)  438/FFFFFFFFFFFF1B9C :                     .noclrrq:
(1)  439/FFFFFFFFFFFF1B9C : DCFC 0001           		adda	#1,a6
(1)  440/FFFFFFFFFFFF1BA0 : 51CF FFF2           		dbf	d7,.nxtclr
(1)  441/FFFFFFFFFFFF1BA4 : 4E75                		rts
(1)  442/FFFFFFFFFFFF1BA6 :                     
(1)  443/FFFFFFFFFFFF1BA6 :                     Board_SwapPos:
(1)  444/FFFFFFFFFFFF1BA6 : 0838 0000 B528      		btst	#0,(RAM_BoardUpd).w
(1)  445/FFFFFFFFFFFF1BAC : 6708                		beq	.nbdw2
(1)  446/FFFFFFFFFFFF1BAE : 6108                		bsr	.draw_all
(1)  447/FFFFFFFFFFFF1BB0 : 08B8 0000 B528      		bclr	#0,(RAM_BoardUpd).w
(1)  448/FFFFFFFFFFFF1BB6 :                     .nbdw2:
(1)  449/FFFFFFFFFFFF1BB6 : 4E75                		rts
(1)  450/FFFFFFFFFFFF1BB8 :                     
(1)  451/FFFFFFFFFFFF1BB8 :                     ; draw all
(1)  452/FFFFFFFFFFFF1BB8 :                     .draw_all:
(1)  453/FFFFFFFFFFFF1BB8 : 4DF8 B53E           		lea	(RAM_BoardBlocks),a6
(1)  454/FFFFFFFFFFFF1BBC : 3E3C 4390           		move.w	#$4000|(8*$02)|(7*$80),d7
(1)  455/FFFFFFFFFFFF1BC0 : 4847                		swap	d7
(1)  456/FFFFFFFFFFFF1BC2 : 3E3C 0003           		move.w	#3,d7
(1)  457/FFFFFFFFFFFF1BC6 : 7005                		moveq	#6-1,d0
(1)  458/FFFFFFFFFFFF1BC8 :                     .nxt_y:
(1)  459/FFFFFFFFFFFF1BC8 : 2C07                		move.l	d7,d6
(1)  460/FFFFFFFFFFFF1BCA : 323C 0005           		move	#6-1,d1
(1)  461/FFFFFFFFFFFF1BCE :                     .nxt_x:
(1)  462/FFFFFFFFFFFF1BCE : 611A                		bsr	.this_blk
(1)  463/FFFFFFFFFFFF1BD0 : DCFC 0001           		adda	#1,a6
(1)  464/FFFFFFFFFFFF1BD4 : DCBC 0008 0000      		add.l	#$80000,d6
(1)  465/FFFFFFFFFFFF1BDA : 51C9 FFF2           		dbf	d1,.nxt_x
(1)  466/FFFFFFFFFFFF1BDE : DEBC 0180 0000      		add.l	#$1800000,d7
(1)  467/FFFFFFFFFFFF1BE4 : 51C8 FFE2           		dbf	d0,.nxt_y
(1)  468/FFFFFFFFFFFF1BE8 : 4E75                		rts
(1)  469/FFFFFFFFFFFF1BEA :                     .this_blk:
(1)  470/FFFFFFFFFFFF1BEA : 2A06                		move.l	d6,d5
(1)  471/FFFFFFFFFFFF1BEC : 43FA 004C           		lea	.switch_vram(pc),a1
(1)  472/FFFFFFFFFFFF1BF0 : 283C 2001 2001      		move.l	#$20012001,d4
(1)  473/FFFFFFFFFFFF1BF6 : 0816 0000           		btst	#0,(a6)
(1)  474/FFFFFFFFFFFF1BFA : 6706                		beq.s	.is_off2
(1)  475/FFFFFFFFFFFF1BFC : D8BC 000C 000C      		add.l	#$000C000C,d4
(1)  476/FFFFFFFFFFFF1C02 :                     .is_off2:
(1)  477/FFFFFFFFFFFF1C02 : 2049                		move.l	a1,a0
(1)  478/FFFFFFFFFFFF1C04 : 343C 0002           		move.w	#3-1,d2
(1)  479/FFFFFFFFFFFF1C08 :                     .next_y2:
(1)  480/FFFFFFFFFFFF1C08 : 23C5 00C0 0004      		move.l	d5,(vdp_ctrl).l
(1)  481/FFFFFFFFFFFF1C0E : 2618                		move.l	(a0)+,d3
(1)  482/FFFFFFFFFFFF1C10 : D684                		add.l	d4,d3
(1)  483/FFFFFFFFFFFF1C12 : 23C3 00C0 0000      		move.l	d3,(vdp_data).l
(1)  484/FFFFFFFFFFFF1C18 : 2618                		move.l	(a0)+,d3
(1)  485/FFFFFFFFFFFF1C1A : D684                		add.l	d4,d3
(1)  486/FFFFFFFFFFFF1C1C : 23C3 00C0 0000      		move.l	d3,(vdp_data).l
(1)  487/FFFFFFFFFFFF1C22 : DABC 0080 0000      		add.l	#$800000,d5
(1)  488/FFFFFFFFFFFF1C28 : 51CA FFDE           		dbf	d2,.next_y2
(1)  489/FFFFFFFFFFFF1C2C : 4E75                		rts
(1)  490/FFFFFFFFFFFF1C2E :                     
(1)  491/FFFFFFFFFFFF1C2E :                     ; ; switched block
(1)  492/FFFFFFFFFFFF1C2E :                     ; .block_draw:
(1)  493/FFFFFFFFFFFF1C2E :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  494/FFFFFFFFFFFF1C2E :                     ; 		or.w	(RAM_EmiBlockY).w,d7
(1)  495/FFFFFFFFFFFF1C2E :                     ; 		bmi	.dont_upd
(1)  496/FFFFFFFFFFFF1C2E :                     ; 		cmp.w	#6,(RAM_EmiBlockX).w
(1)  497/FFFFFFFFFFFF1C2E :                     ; 		bge	.dont_upd
(1)  498/FFFFFFFFFFFF1C2E :                     ; 		cmp.w	#6,(RAM_EmiBlockY).w
(1)  499/FFFFFFFFFFFF1C2E :                     ; 		bge	.dont_upd
(1)  500/FFFFFFFFFFFF1C2E :                     ;
(1)  501/FFFFFFFFFFFF1C2E :                     ; 		lea	(RAM_BoardBlocks),a6
(1)  502/FFFFFFFFFFFF1C2E :                     ; 		moveq	#0,d7
(1)  503/FFFFFFFFFFFF1C2E :                     ; 		move.w	(RAM_EmiBlockX).w,d7
(1)  504/FFFFFFFFFFFF1C2E :                     ; 		adda	d7,a6
(1)  505/FFFFFFFFFFFF1C2E :                     ; 		add.w	d7,d7
(1)  506/FFFFFFFFFFFF1C2E :                     ; 		add.w	d7,d7
(1)  507/FFFFFFFFFFFF1C2E :                     ; 		move.w	(RAM_EmiBlockY).w,d6
(1)  508/FFFFFFFFFFFF1C2E :                     ; 		move.w	d6,d5
(1)  509/FFFFFFFFFFFF1C2E :                     ; 		add.w	d6,d6
(1)  510/FFFFFFFFFFFF1C2E :                     ; 		move.w	.ypos_ex(pc,d6.w),d6
(1)  511/FFFFFFFFFFFF1C2E :                     ; 		mulu.w	#6,d5
(1)  512/FFFFFFFFFFFF1C2E :                     ; 		adda	d5,a6
(1)  513/FFFFFFFFFFFF1C2E :                     ;
(1)  514/FFFFFFFFFFFF1C2E :                     ; 		add.w	d7,d7
(1)  515/FFFFFFFFFFFF1C2E :                     ; 		lsl.w	#7,d6			; *$80 size mode
(1)  516/FFFFFFFFFFFF1C2E :                     ; 		add.w	d6,d7
(1)  517/FFFFFFFFFFFF1C2E :                     ; 		add.w	#$4000|(8*$02)|(7*$80),d7
(1)  518/FFFFFFFFFFFF1C2E :                     ; 		swap	d7
(1)  519/FFFFFFFFFFFF1C2E :                     ; 		move.w	#3,d7
(1)  520/FFFFFFFFFFFF1C2E :                     ; 		move.l	d7,d6
(1)  521/FFFFFFFFFFFF1C2E :                     ; 		bchg	#0,(a6)
(1)  522/FFFFFFFFFFFF1C2E :                     ; 		lea	.switch_vram(pc),a0
(1)  523/FFFFFFFFFFFF1C2E :                     ; 		move.l	#$20012001,d4
(1)  524/FFFFFFFFFFFF1C2E :                     ; 		btst	#0,(a6)
(1)  525/FFFFFFFFFFFF1C2E :                     ; 		beq.s	.is_off
(1)  526/FFFFFFFFFFFF1C2E :                     ; 		add.l	#$000C000C,d4
(1)  527/FFFFFFFFFFFF1C2E :                     ; .is_off:
(1)  528/FFFFFFFFFFFF1C2E :                     ; 		move.w	#3-1,d5
(1)  529/FFFFFFFFFFFF1C2E :                     ; .next_y:
(1)  530/FFFFFFFFFFFF1C2E :                     ; 		move.l	d7,(vdp_ctrl).l
(1)  531/FFFFFFFFFFFF1C2E :                     ; 		move.l	(a0)+,d3
(1)  532/FFFFFFFFFFFF1C2E :                     ; 		add.l	d4,d3
(1)  533/FFFFFFFFFFFF1C2E :                     ; 		move.l	d3,(vdp_data).l
(1)  534/FFFFFFFFFFFF1C2E :                     ; 		move.l	(a0)+,d3
(1)  535/FFFFFFFFFFFF1C2E :                     ; 		add.l	d4,d3
(1)  536/FFFFFFFFFFFF1C2E :                     ; 		move.l	d3,(vdp_data).l
(1)  537/FFFFFFFFFFFF1C2E :                     ; 		add.l	#$800000,d7
(1)  538/FFFFFFFFFFFF1C2E :                     ; 		dbf	d5,.next_y
(1)  539/FFFFFFFFFFFF1C2E :                     ; .dont_upd:
(1)  540/FFFFFFFFFFFF1C2E :                     ; 		rts
(1)  541/FFFFFFFFFFFF1C2E :                     
(1)  542/FFFFFFFFFFFF1C2E : 0000                .ypos_ex:	dc.w 0
(1)  543/FFFFFFFFFFFF1C30 : 0003                		dc.w 3
(1)  544/FFFFFFFFFFFF1C32 : 0006                		dc.w 6
(1)  545/FFFFFFFFFFFF1C34 : 0009                		dc.w 9
(1)  546/FFFFFFFFFFFF1C36 : 000C                		dc.w 12
(1)  547/FFFFFFFFFFFF1C38 : 000F                		dc.w 15
(1)  548/FFFFFFFFFFFF1C3A :                     		align 2
(1)  549/FFFFFFFFFFFF1C3A :                     .switch_vram:
(1)  550/FFFFFFFFFFFF1C3A : 0000 0001 0001 0002 		dc.w $0000,$0001,$0001,$0002
(1)  551/FFFFFFFFFFFF1C42 : 0003 0004 0004 0005 		dc.w $0003,$0004,$0004,$0005
(1)  552/FFFFFFFFFFFF1C4A : 0006 0007 0007 0008 		dc.w $0006,$0007,$0007,$0008
(1)  553/FFFFFFFFFFFF1C52 :                     
(1)  554/FFFFFFFFFFFF1C52 :                     ; 		move.l	(RAM_EmiMoveX).w,d4
(1)  555/FFFFFFFFFFFF1C52 :                     ; 		add.l	d4,(RAM_EmiPosX).l
(1)  556/FFFFFFFFFFFF1C52 :                     ; 		move.l	d0,d5
(1)  557/FFFFFFFFFFFF1C52 :                     ; 		bsr.s	.floatpos
(1)  558/FFFFFFFFFFFF1C52 :                     ; 		tst.l	d4
(1)  559/FFFFFFFFFFFF1C52 :                     ; 		bne.s	.resx
(1)  560/FFFFFFFFFFFF1C52 :                     ; 		and.l	#$FFE00000,(RAM_EmiPosX).l
(1)  561/FFFFFFFFFFFF1C52 :                     ; .resx:
(1)  562/FFFFFFFFFFFF1C52 :                     ; 		move.l	d4,(RAM_EmiMoveX).w
(1)  563/FFFFFFFFFFFF1C52 :                     ; 		move.l	(RAM_EmiMoveY).w,d4
(1)  564/FFFFFFFFFFFF1C52 :                     ; 		add.l	d4,(RAM_EmiPosY).l
(1)  565/FFFFFFFFFFFF1C52 :                     ; 		move.l	d0,d5
(1)  566/FFFFFFFFFFFF1C52 :                     ; 		bsr.s	.floatpos
(1)  567/FFFFFFFFFFFF1C52 :                     ; 		tst.l	d4
(1)  568/FFFFFFFFFFFF1C52 :                     ; 		bne.s	.resy
(1)  569/FFFFFFFFFFFF1C52 :                     ; 		and.l	#$FFE00000,(RAM_EmiPosY).l
(1)  570/FFFFFFFFFFFF1C52 :                     ; .resy:
(1)  571/FFFFFFFFFFFF1C52 :                     ; 		move.l	d4,(RAM_EmiMoveY).w
(1)  572/FFFFFFFFFFFF1C52 :                     ;
(1)  573/FFFFFFFFFFFF1C52 :                     ; 		move.l	(RAM_EmiPosX).l,d7
(1)  574/FFFFFFFFFFFF1C52 :                     ; 		or.l	(RAM_EmiPosY).l,d7
(1)  575/FFFFFFFFFFFF1C52 :                     ; 		beq.s	.no_yspd
(1)  576/FFFFFFFFFFFF1C52 :                     ; 		move.w	#1,(RAM_EmiUpd).w
(1)  577/FFFFFFFFFFFF1C52 :                     ; .no_yspd:
(1)  578/FFFFFFFFFFFF1C52 :                     ; 		rts
(1)  579/FFFFFFFFFFFF1C52 :                     ;
(1)  580/FFFFFFFFFFFF1C52 :                     ; .floatpos:
(1)  581/FFFFFFFFFFFF1C52 :                     ; 		tst.l	d4
(1)  582/FFFFFFFFFFFF1C52 :                     ; 		bmi.s	.xleft
(1)  583/FFFFFFFFFFFF1C52 :                     ; 		sub.l	d5,d4
(1)  584/FFFFFFFFFFFF1C52 :                     ; 		bpl.s	.xstop
(1)  585/FFFFFFFFFFFF1C52 :                     ; 		clr.l	d4
(1)  586/FFFFFFFFFFFF1C52 :                     ; .xleft:
(1)  587/FFFFFFFFFFFF1C52 :                     ; 		tst.l	d4
(1)  588/FFFFFFFFFFFF1C52 :                     ; 		beq.s	.xstop
(1)  589/FFFFFFFFFFFF1C52 :                     ; 		add.l	d5,d4
(1)  590/FFFFFFFFFFFF1C52 :                     ; 		bmi.s	.xstop
(1)  591/FFFFFFFFFFFF1C52 :                     ; 		clr.l	d4
(1)  592/FFFFFFFFFFFF1C52 :                     ; .xstop:
(1)  593/FFFFFFFFFFFF1C52 :                     ; 		rts
(1)  594/FFFFFFFFFFFF1C52 :                     
(1)  595/FFFFFFFFFFFF1C52 :                     Emilie_Move:
(1)  596/FFFFFFFFFFFF1C52 :                     ; 		sub.l
(1)  597/FFFFFFFFFFFF1C52 : 1438 B518           		move.b	(RAM_EmiFlags),d2
(1)  598/FFFFFFFFFFFF1C56 : 0882 0007           		bclr	#7,d2
(1)  599/FFFFFFFFFFFF1C5A : 3038 B500           		move.w	(RAM_EmiPosX).w,d0
(1)  600/FFFFFFFFFFFF1C5E : 3238 B508           		move.w	(RAM_EmiMoveX).w,d1
(1)  601/FFFFFFFFFFFF1C62 : 614A                		bsr	.move_it
(1)  602/FFFFFFFFFFFF1C64 : 31C0 B500           		move.w	d0,(RAM_EmiPosX).w
(1)  603/FFFFFFFFFFFF1C68 : 3038 B504           		move.w	(RAM_EmiPosY).w,d0
(1)  604/FFFFFFFFFFFF1C6C : 3238 B50C           		move.w	(RAM_EmiMoveY).w,d1
(1)  605/FFFFFFFFFFFF1C70 : 613C                		bsr	.move_it
(1)  606/FFFFFFFFFFFF1C72 : 31C0 B504           		move.w	d0,(RAM_EmiPosY).w
(1)  607/FFFFFFFFFFFF1C76 : 11C2 B518           		move.b	d2,(RAM_EmiFlags).w
(1)  608/FFFFFFFFFFFF1C7A :                     
(1)  609/FFFFFFFFFFFF1C7A : 2A39 FFFF B510      		move.l	(RAM_EmiJumpSpd).l,d5
(1)  610/FFFFFFFFFFFF1C80 : 2C38 B514           		move.l	(RAM_EmiJumpY),d6
(1)  611/FFFFFFFFFFFF1C84 : DC85                		add.l	d5,d6
(1)  612/FFFFFFFFFFFF1C86 : 21C6 B514           		move.l	d6,(RAM_EmiJumpY)
(1)  613/FFFFFFFFFFFF1C8A :                     
(1)  614/FFFFFFFFFFFF1C8A : 2A39 FFFF B510      		move.l	(RAM_EmiJumpSpd).l,d5
(1)  615/FFFFFFFFFFFF1C90 : DABC 0000 2000      		add.l	#$2000,d5
(1)  616/FFFFFFFFFFFF1C96 :                     ; 		bmi.s	.toomuch
(1)  617/FFFFFFFFFFFF1C96 : 2C38 B514           		move.l	(RAM_EmiJumpY),d6
(1)  618/FFFFFFFFFFFF1C9A : 6B04                		bmi.s	.toomuch
(1)  619/FFFFFFFFFFFF1C9C : 4285                		clr.l	d5
(1)  620/FFFFFFFFFFFF1C9E : 6006                		bra.s	.eximuch
(1)  621/FFFFFFFFFFFF1CA0 :                     .toomuch:
(1)  622/FFFFFFFFFFFF1CA0 : 31FC 0001 B522      		move.w	#1,(RAM_EmiUpd).w
(1)  623/FFFFFFFFFFFF1CA6 :                     .eximuch:
(1)  624/FFFFFFFFFFFF1CA6 : 23C5 FFFF B510      		move.l	d5,(RAM_EmiJumpSpd).l
(1)  625/FFFFFFFFFFFF1CAC : 4E75                		rts
(1)  626/FFFFFFFFFFFF1CAE :                     .move_it:
(1)  627/FFFFFFFFFFFF1CAE : 3A00                		move.w	d0,d5
(1)  628/FFFFFFFFFFFF1CB0 : 3801                		move.w	d1,d4
(1)  629/FFFFFFFFFFFF1CB2 : B845                		cmp.w	d5,d4
(1)  630/FFFFFFFFFFFF1CB4 : 6718                		beq.s	.same_x
(1)  631/FFFFFFFFFFFF1CB6 : 3C3C 0001           		move.w	#1,d6
(1)  632/FFFFFFFFFFFF1CBA : 9845                		sub.w	d5,d4
(1)  633/FFFFFFFFFFFF1CBC : 6A04                		bpl.s	.reversx
(1)  634/FFFFFFFFFFFF1CBE : 3C3C FFFF           		move.w	#-1,d6
(1)  635/FFFFFFFFFFFF1CC2 :                     .reversx:
(1)  636/FFFFFFFFFFFF1CC2 : 08C2 0007           		bset	#7,d2
(1)  637/FFFFFFFFFFFF1CC6 : 0678 0001 B520      		add.w	#1,(RAM_EmiAnim).w
(1)  638/FFFFFFFFFFFF1CCC : D046                		add.w	d6,d0
(1)  639/FFFFFFFFFFFF1CCE :                     .same_x:
(1)  640/FFFFFFFFFFFF1CCE : 4E75                		rts
(1)  641/FFFFFFFFFFFF1CD0 :                     
(1)  642/FFFFFFFFFFFF1CD0 :                     Emilie_MkSprite:
(1)  643/FFFFFFFFFFFF1CD0 : 4DF9 FFFF 7C10      		lea	(RAM_Sprites),a6
(1)  644/FFFFFFFFFFFF1CD6 : 4A78 B524           		tst.w	(RAM_EmiHide).w
(1)  645/FFFFFFFFFFFF1CDA : 6600 0098           		bne	.hidefuji
(1)  646/FFFFFFFFFFFF1CDE :                     
(1)  647/FFFFFFFFFFFF1CDE : 4A78 B522           		tst.w	(RAM_EmiUpd).w
(1)  648/FFFFFFFFFFFF1CE2 : 6730                		beq	.no_updgfx
(1)  649/FFFFFFFFFFFF1CE4 : 4278 B522           		clr.w	(RAM_EmiUpd).w
(1)  650/FFFFFFFFFFFF1CE8 : 3238 B51E           		move.w	(RAM_EmiChar),d1
(1)  651/FFFFFFFFFFFF1CEC : 3638 B520           		move.w	(RAM_EmiAnim),d3
(1)  652/FFFFFFFFFFFF1CF0 : E64B                		lsr.w	#3,d3
(1)  653/FFFFFFFFFFFF1CF2 : C67C 0003           		and.w	#3,d3
(1)  654/FFFFFFFFFFFF1CF6 : D243                		add.w	d3,d1
(1)  655/FFFFFFFFFFFF1CF8 : 343C 0300           		move.w	#$20*$18,d2
(1)  656/FFFFFFFFFFFF1CFC : C2C2                		mulu.w	d2,d1
(1)  657/FFFFFFFFFFFF1CFE : 203C 0004 0300      		move.l	#ART_EMI,d0
(1)  658/FFFFFFFFFFFF1D04 : D081                		add.l	d1,d0
(1)  659/FFFFFFFFFFFF1D06 : C0BC FFFF FFFE      		and.l	#-2,d0
(1)  660/FFFFFFFFFFFF1D0C : 323C 0800           		move.w	#cell_vram($40),d1
(1)  661/FFFFFFFFFFFF1D10 : 6100 EA7A           		bsr	Video_DmaMkEntry
(1)  662/FFFFFFFFFFFF1D14 :                     .no_updgfx:
(1)  663/FFFFFFFFFFFF1D14 : 2038 B504           		move.l	(RAM_EmiPosY),d0
(1)  664/FFFFFFFFFFFF1D18 : D0B8 B514           		add.l	(RAM_EmiJumpY),d0
(1)  665/FFFFFFFFFFFF1D1C : 4840                		swap	d0
(1)  666/FFFFFFFFFFFF1D1E : 3438 B500           		move.w	(RAM_EmiPosX),d2
(1)  667/FFFFFFFFFFFF1D22 : 3638 B526           		move.w	(RAM_ShakeMe).w,d3
(1)  668/FFFFFFFFFFFF1D26 : 3803                		move.w	d3,d4
(1)  669/FFFFFFFFFFFF1D28 : E64B                		lsr.w	#3,d3
(1)  670/FFFFFFFFFFFF1D2A : 0804 0000           		btst	#0,d4
(1)  671/FFFFFFFFFFFF1D2E : 6602                		bne.s	.midshk
(1)  672/FFFFFFFFFFFF1D30 : 4443                		neg.w	d3
(1)  673/FFFFFFFFFFFF1D32 :                     .midshk:
(1)  674/FFFFFFFFFFFF1D32 : 4DF9 FFFF 7C10      		lea	(RAM_Sprites),a6
(1)  675/FFFFFFFFFFFF1D38 : 9043                		sub.w	d3,d0
(1)  676/FFFFFFFFFFFF1D3A : 323C 0040           		move.w	#$40,d1
(1)  677/FFFFFFFFFFFF1D3E : 0640 0080           		addi.w	#$80,d0
(1)  678/FFFFFFFFFFFF1D42 : 0642 0080           		addi.w	#$80,d2
(1)  679/FFFFFFFFFFFF1D46 : 3C80                		move.w	d0,(a6)			; TOP 32x32
(1)  680/FFFFFFFFFFFF1D48 : 3D7C 0F01 0002      		move.w	#$0F01,2(a6)
(1)  681/FFFFFFFFFFFF1D4E : 3D41 0004           		move.w	d1,4(a6)
(1)  682/FFFFFFFFFFFF1D52 : 3D42 0006           		move.w	d2,6(a6)
(1)  683/FFFFFFFFFFFF1D56 : DCFC 0008           		adda	#8,a6
(1)  684/FFFFFFFFFFFF1D5A : 0640 0020           		addi.w	#$20,d0
(1)  685/FFFFFFFFFFFF1D5E : 3C80                		move.w	d0,(a6)			; BOT 32x24
(1)  686/FFFFFFFFFFFF1D60 : 3D7C 0D00 0002      		move.w	#$0D00,2(a6)
(1)  687/FFFFFFFFFFFF1D66 : 0641 0010           		addi.w	#$10,d1
(1)  688/FFFFFFFFFFFF1D6A : 3D41 0004           		move.w	d1,4(a6)
(1)  689/FFFFFFFFFFFF1D6E : 3D42 0006           		move.w	d2,6(a6)
(1)  690/FFFFFFFFFFFF1D72 :                     .no_upd:
(1)  691/FFFFFFFFFFFF1D72 : 4E75                		rts
(1)  692/FFFFFFFFFFFF1D74 :                     
(1)  693/FFFFFFFFFFFF1D74 :                     .hidefuji:
(1)  694/FFFFFFFFFFFF1D74 : 2CBC 0000 0000      		move.l	#0,(a6)
(1)  695/FFFFFFFFFFFF1D7A : 2D7C 0000 0000 0004 		move.l	#0,$04(a6)
(1)  696/FFFFFFFFFFFF1D82 : 2D7C 0000 0000 0008 		move.l	#0,$08(a6)
(1)  697/FFFFFFFFFFFF1D8A : 2D7C 0000 0000 000C 		move.l	#0,$0C(a6)
(1)  698/FFFFFFFFFFFF1D92 : 4E75                		rts
(1)  699/FFFFFFFFFFFF1D94 :                     
(1)  700/FFFFFFFFFFFF1D94 :                     ; NORMAL
(1)  701/FFFFFFFFFFFF1D94 :                     ; 		lea	(vdp_data),a6
(1)  702/FFFFFFFFFFFF1D94 :                     ; 		move.l	#$78000003,4(a6)
(1)  703/FFFFFFFFFFFF1D94 :                     ; 		move.w	(RAM_EmiPosY),d0
(1)  704/FFFFFFFFFFFF1D94 :                     ; 		move.w	(RAM_EmiPosX),d1
(1)  705/FFFFFFFFFFFF1D94 :                     ; 		move.w	(RAM_EmiChar),d2
(1)  706/FFFFFFFFFFFF1D94 :                     ; 		move.w	(RAM_EmiAnim),d3
(1)  707/FFFFFFFFFFFF1D94 :                     ; 		lsr.w	#3,d3
(1)  708/FFFFFFFFFFFF1D94 :                     ; 		and.w	#3,d3
(1)  709/FFFFFFFFFFFF1D94 :                     ; 		add.w	d3,d2
(1)  710/FFFFFFFFFFFF1D94 :                     ; 		mulu.w	#$18,d2
(1)  711/FFFFFFFFFFFF1D94 :                     ; 		add.w	#1,d2
(1)  712/FFFFFFFFFFFF1D94 :                     ; 		add.w	#$80,d0
(1)  713/FFFFFFFFFFFF1D94 :                     ; 		add.w	#$80,d1
(1)  714/FFFFFFFFFFFF1D94 :                     ; 		move.w	d0,(a6)			; TOP 32x32
(1)  715/FFFFFFFFFFFF1D94 :                     ; 		move.w	#$0F01,(a6)
(1)  716/FFFFFFFFFFFF1D94 :                     ; 		move.w	d2,(a6)
(1)  717/FFFFFFFFFFFF1D94 :                     ; 		move.w	d1,(a6)
(1)  718/FFFFFFFFFFFF1D94 :                     ; 		add.w	#$20,d0
(1)  719/FFFFFFFFFFFF1D94 :                     ; 		add.w	#$10,d2
(1)  720/FFFFFFFFFFFF1D94 :                     ; 		move.w	d0,(a6)			; BOT 32x24
(1)  721/FFFFFFFFFFFF1D94 :                     ; 		move.w	#$0D00,(a6)
(1)  722/FFFFFFFFFFFF1D94 :                     ; 		move.w	d2,(a6)
(1)  723/FFFFFFFFFFFF1D94 :                     ; 		move.w	d1,(a6)
(1)  724/FFFFFFFFFFFF1D94 :                     ; 		rts
(1)  725/FFFFFFFFFFFF1D94 :                     
(1)  726/FFFFFFFFFFFF1D94 :                     ; ====================================================================
(1)  727/FFFFFFFFFFFF1D94 :                     ; ------------------------------------------------------
(1)  728/FFFFFFFFFFFF1D94 :                     ; VBlank
(1)  729/FFFFFFFFFFFF1D94 :                     ; ------------------------------------------------------
(1)  730/FFFFFFFFFFFF1D94 :                     
(1)  731/FFFFFFFFFFFF1D94 :                     ; ------------------------------------------------------
(1)  732/FFFFFFFFFFFF1D94 :                     ; HBlank
(1)  733/FFFFFFFFFFFF1D94 :                     ; ------------------------------------------------------
(1)  734/FFFFFFFFFFFF1D94 :                     
(1)  735/FFFFFFFFFFFF1D94 :                     ; ====================================================================
(1)  736/FFFFFFFFFFFF1D94 :                     ; ------------------------------------------------------
(1)  737/FFFFFFFFFFFF1D94 :                     ; DATA
(1)  738/FFFFFFFFFFFF1D94 :                     ;
(1)  739/FFFFFFFFFFFF1D94 :                     ; Small stuff goes here
(1)  740/FFFFFFFFFFFF1D94 :                     ; ------------------------------------------------------
(1)  741/FFFFFFFFFFFF1D94 :                     
(1)  742/FFFFFFFFFFFF1D94 :                     		align 2
(1)  743/FFFFFFFFFFFF1D94 :                     str_Title:
(1)  744/FFFFFFFFFFFF1D94 :                     ; 	if MARS
(1)  745/FFFFFFFFFFFF1D94 : 5C6C 205C 7720 5C77 		dc.b "\\l \\w \\w",$A,$A
                    0A0A                
(1)  746/FFFFFFFFFFFF1D9E : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w MARS",$A
                    205C 7720 4D41 5253 
                    0A                  
(1)  747/FFFFFFFFFFFF1DAF : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1)  748/FFFFFFFFFFFF1DBB : 0A                  		dc.b $A
(1)  749/FFFFFFFFFFFF1DBC : 5C62 205C 620A 0A   		dc.b "\\b \\b",$A,$A
(1)  750/FFFFFFFFFFFF1DC3 : 5C77 0A             		dc.b "\\w",$A
(1)  751/FFFFFFFFFFFF1DC6 : 5C77 0A             		dc.b "\\w",$A
(1)  752/FFFFFFFFFFFF1DC9 : 5C77 0A             		dc.b "\\w",$A
(1)  753/FFFFFFFFFFFF1DCC : 5C77 0A             		dc.b "\\w",$A
(1)  754/FFFFFFFFFFFF1DCF : 5C77 0A             		dc.b "\\w",$A
(1)  755/FFFFFFFFFFFF1DD2 : 5C77 0A             		dc.b "\\w",$A
(1)  756/FFFFFFFFFFFF1DD5 : 5C77 0A             		dc.b "\\w",$A
(1)  757/FFFFFFFFFFFF1DD8 : 5C77 0A             		dc.b "\\w",$A
(1)  758/FFFFFFFFFFFF1DDB : 0A                  		dc.b $A
(1)  759/FFFFFFFFFFFF1DDC :                     
(1)  760/FFFFFFFFFFFF1DDC : 5C77 0A             		dc.b "\\w",$A
(1)  761/FFFFFFFFFFFF1DDF : 5C77 0A             		dc.b "\\w",$A
(1)  762/FFFFFFFFFFFF1DE2 : 5C77 0A             		dc.b "\\w",$A
(1)  763/FFFFFFFFFFFF1DE5 : 5C77 0A             		dc.b "\\w",$A
(1)  764/FFFFFFFFFFFF1DE8 : 5C77 0A             		dc.b "\\w",$A
(1)  765/FFFFFFFFFFFF1DEB : 5C77 0A             		dc.b "\\w",$A
(1)  766/FFFFFFFFFFFF1DEE : 5C77 0A             		dc.b "\\w",$A
(1)  767/FFFFFFFFFFFF1DF1 : 5C77 0A             		dc.b "\\w",$A
(1)  768/FFFFFFFFFFFF1DF4 : 00                  		dc.b 0
(1)  769/FFFFFFFFFFFF1DF5 :                     
(1)  770/FFFFFFFFFFFF1DF5 : FFFF 8450           		dc.l RAM_Framecount
(1)  771/FFFFFFFFFFFF1DF9 : FFFF 9802           		dc.l Controller_1+on_hold
(1)  772/FFFFFFFFFFFF1DFD : FFFF 9812           		dc.l Controller_2+on_hold
(1)  773/FFFFFFFFFFFF1E01 :                     
(1)  774/FFFFFFFFFFFF1E01 : 00A1 5120           		dc.l sysmars_reg+comm0
(1)  775/FFFFFFFFFFFF1E05 : 00A1 5122           		dc.l sysmars_reg+comm2
(1)  776/FFFFFFFFFFFF1E09 : 00A1 5124           		dc.l sysmars_reg+comm4
(1)  777/FFFFFFFFFFFF1E0D : 00A1 5126           		dc.l sysmars_reg+comm6
(1)  778/FFFFFFFFFFFF1E11 : 00A1 5128           		dc.l sysmars_reg+comm8
(1)  779/FFFFFFFFFFFF1E15 : 00A1 512A           		dc.l sysmars_reg+comm10
(1)  780/FFFFFFFFFFFF1E19 : 00A1 512C           		dc.l sysmars_reg+comm12
(1)  781/FFFFFFFFFFFF1E1D : 00A1 512E           		dc.l sysmars_reg+comm14
(1)  782/FFFFFFFFFFFF1E21 :                     
(1)  783/FFFFFFFFFFFF1E21 : 00A1 200E           		dc.l sysmcd_reg+mcd_comm_m
(1)  784/FFFFFFFFFFFF1E25 : 00A1 200F           		dc.l sysmcd_reg+mcd_comm_s
(1)  785/FFFFFFFFFFFF1E29 :                     
(1)  786/FFFFFFFFFFFF1E29 : 00A1 2010           		dc.l sysmcd_reg+mcd_dcomm_m
(1)  787/FFFFFFFFFFFF1E2D : 00A1 2012           		dc.l sysmcd_reg+mcd_dcomm_m+2
(1)  788/FFFFFFFFFFFF1E31 : 00A1 2014           		dc.l sysmcd_reg+mcd_dcomm_m+4
(1)  789/FFFFFFFFFFFF1E35 : 00A1 2016           		dc.l sysmcd_reg+mcd_dcomm_m+6
(1)  790/FFFFFFFFFFFF1E39 : 00A1 2018           		dc.l sysmcd_reg+mcd_dcomm_m+8
(1)  791/FFFFFFFFFFFF1E3D : 00A1 201A           		dc.l sysmcd_reg+mcd_dcomm_m+10
(1)  792/FFFFFFFFFFFF1E41 : 00A1 201C           		dc.l sysmcd_reg+mcd_dcomm_m+12
(1)  793/FFFFFFFFFFFF1E45 : 00A1 201E           		dc.l sysmcd_reg+mcd_dcomm_m+14
(1)  794/FFFFFFFFFFFF1E49 : 00A1 2020           		dc.l sysmcd_reg+mcd_dcomm_s
(1)  795/FFFFFFFFFFFF1E4D : 00A1 2022           		dc.l sysmcd_reg+mcd_dcomm_s+2
(1)  796/FFFFFFFFFFFF1E51 : 00A1 2024           		dc.l sysmcd_reg+mcd_dcomm_s+4
(1)  797/FFFFFFFFFFFF1E55 : 00A1 2026           		dc.l sysmcd_reg+mcd_dcomm_s+6
(1)  798/FFFFFFFFFFFF1E59 : 00A1 2028           		dc.l sysmcd_reg+mcd_dcomm_s+8
(1)  799/FFFFFFFFFFFF1E5D : 00A1 202A           		dc.l sysmcd_reg+mcd_dcomm_s+10
(1)  800/FFFFFFFFFFFF1E61 : 00A1 202C           		dc.l sysmcd_reg+mcd_dcomm_s+12
(1)  801/FFFFFFFFFFFF1E65 : 00A1 202E           		dc.l sysmcd_reg+mcd_dcomm_s+14
(1)  802/FFFFFFFFFFFF1E69 :                     
(1)  803/FFFFFFFFFFFF1E69 :                     		align 2
(1)  804/FFFFFFFFFFFF1E6A :                     
(1)  805/FFFFFFFFFFFF1E6A :                     PAL_EMI:
(1)  806/FFFFFFFFFFFF1E6A : 0000                		dc.w 0
(1)  807/FFFFFFFFFFFF1E6C :                     		binclude "game/data/md/sprites/emi_pal.bin",2
(1)  808/FFFFFFFFFFFF1E80 :                     		align 2
(1)  809/FFFFFFFFFFFF1E80 :                     
(1)  810/FFFFFFFFFFFF1E80 : 0000 0000 0444 0888 PAL_TESTBOARD:	dc.w $0000,$0000,$0444,$0888,$0EEE,$0000,$0000,$0002,$0004,$0888
                    0EEE 0000 0000 0002 
                    0004 0888           
(1)  811/FFFFFFFFFFFF1E94 :                     		align 2
(1)  812/FFFFFFFFFFFF1E94 :                     ; 		binclude "game/data/md/bg/board_pal.bin"
(1)  813/FFFFFFFFFFFF1E94 :                     ; 		align 2
(1)  814/FFFFFFFFFFFF1E94 :                     
(1)  815/FFFFFFFFFFFF1E94 :                     
     327/FFFFFFFFFFFF1E94 :                     cscrn0_e:
     329/    3F9E :                     		dephase
     334/    3F9E :                     Md_Screen00_e:
     335/    3F9E :                     
     337/    3F9E : (MACRO)             		report "SCREEN 0 code",cscrn0_e-cscrn0_s,MAX_UserCode
     339/    3F9E :                     
     340/    3F9E :                     ; ====================================================================
     341/    3F9E :                     ; --------------------------------------------------------
     342/    3F9E :                     ; GEMA SOUND DRIVER DATA:
     343/    3F9E :                     ; Tracks and Instruments
     344/    3F9E :                     ;
     345/    3F9E :                     ;    MD: Normal ROM area
     346/    3F9E :                     ;   MCD: Loaded to RAM from disc (Z80 CAN read from RAM)
     347/    3F9E :                     ;   32X: At the $880000+ area
     348/    3F9E :                     ; CD32X: Same as CD
     349/    3F9E :                     ;  Pico: N/A (TODO)
     350/    3F9E :                     ;
     351/    3F9E :                     ; DAC samples are stored externally depending
     352/    3F9E :                     ; of the system.
     353/    3F9E :                     ; 32X: PWM can be on both ROM and SDRAM
     354/    3F9E :                     ; but to keep cross-compatible with CD32X use
     355/    3F9E :                     ; SDRAM only, use small samples to save space.
     356/    3F9E :                     ; --------------------------------------------------------
     357/    3F9E :                     
     361/    3F9E :                     MCD_GEMATRKS:
     363/  883F9E :                     		phase $880000+*
     367/  883F9E :                     gemacd_report:
     368/  883F9E :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/  883F9E :                     ; ================================================================
(1)    2/  883F9E :                     ; ------------------------------------------------------------
(1)    3/  883F9E :                     ; DATA SECTION
(1)    4/  883F9E :                     ;
(1)    5/  883F9E :                     ; SOUND
(1)    6/  883F9E :                     ; ------------------------------------------------------------
(1)    7/  883F9E :                     
(1)    8/  883F9E :                     ; ticks - %gttttttt
(1)    9/  883F9E :                     ;   loc - 68k pointer
(1)   10/  883F9E :                     ;
(1)   11/  883F9E :                     ; t-Ticks
(1)   12/  883F9E :                     ; g-Use global tempo
(1)   13/  883F9E :                     gemaTrk macro ticks,loc
(1)   14/  883F9E :                     	dc.l ((ticks&$FF)<<24)|loc&$FFFFFF
(1)   15/  883F9E :                     	endm
(1)   16/  883F9E :                     
(1)   17/  883F9E :                     ; gemaHead
(1)   18/  883F9E :                     ; block point, patt point, ins point
(1)   19/  883F9E :                     ; numof_blocks,numof_patts,numof_ins
(1)   20/  883F9E :                     gemaHead macro blk,pat,ins
(1)   21/  883F9E :                     	dc.l blk
(1)   22/  883F9E :                     	dc.l pat
(1)   23/  883F9E :                     	dc.l ins
(1)   24/  883F9E :                     	endm
(1)   25/  883F9E :                     
(1)   26/  883F9E :                     ; Instrument macros
(1)   27/  883F9E :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   28/  883F9E :                     gInsNull macro
(1)   29/  883F9E :                     	dc.b $00,$00,$00,$00
(1)   30/  883F9E :                     	dc.b $00,$00,$00,$00
(1)   31/  883F9E :                     	endm
(1)   32/  883F9E :                     
(1)   33/  883F9E :                     ; alv: attack level
(1)   34/  883F9E :                     ; atk: attack rate
(1)   35/  883F9E :                     ; slv: sustain
(1)   36/  883F9E :                     ; dky: decay rate (up)
(1)   37/  883F9E :                     ; rrt: release rate (down)
(1)   38/  883F9E :                     ; vib: (TODO)
(1)   39/  883F9E :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   40/  883F9E :                     	dc.b $80,pitch,alv,atk
(1)   41/  883F9E :                     	dc.b slv,dky,rrt,vib
(1)   42/  883F9E :                     	endm
(1)   43/  883F9E :                     
(1)   44/  883F9E :                     ; same args as gInsPsg
(1)   45/  883F9E :                     ; only one more argument for the noise type:
(1)   46/  883F9E :                     ; mode: noise mode
(1)   47/  883F9E :                     ;       %tmm
(1)   48/  883F9E :                     ;        t  - Bass(0)|Noise(1)
(1)   49/  883F9E :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   50/  883F9E :                     ;
(1)   51/  883F9E :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   52/  883F9E :                     	dc.b $90|mode,pitch,alv,atk
(1)   53/  883F9E :                     	dc.b slv,dky,rrt,vib
(1)   54/  883F9E :                     	endm
(1)   55/  883F9E :                     
(1)   56/  883F9E :                     ; 24-bit ROM pointer to FM patch data
(1)   57/  883F9E :                     gInsFm macro pitch,fmins
(1)   58/  883F9E :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   59/  883F9E :                     	dc.b fmins&$FF,$00,$00,$00
(1)   60/  883F9E :                     	endm
(1)   61/  883F9E :                     
(1)   62/  883F9E :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   63/  883F9E :                     ; are the custom freqs for each operator in this order:
(1)   64/  883F9E :                     ; OP1 OP2 OP3 OP4
(1)   65/  883F9E :                     ;
(1)   66/  883F9E :                     ; NOTE: pitch is useless here...
(1)   67/  883F9E :                     gInsFm3	macro pitch,fmins
(1)   68/  883F9E :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   69/  883F9E :                     	dc.b fmins&$FF,$00,$00,$00
(1)   70/  883F9E :                     	endm
(1)   71/  883F9E :                     
(1)   72/  883F9E :                     ; start: Pointer to sample data:
(1)   73/  883F9E :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   74/  883F9E :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   75/  883F9E :                     ;        dc.b (sound data)	; <-- Then the actual sound data
(1)   76/  883F9E :                     ;
(1)   77/  883F9E :                     ; flags: $00 - No Loop
(1)   78/  883F9E :                     ; 	 $01 - Loop
(1)   79/  883F9E :                     gInsDac	macro pitch,start,flags
(1)   80/  883F9E :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   81/  883F9E :                     	dc.b start&$FF,0,0,0
(1)   82/  883F9E :                     	endm
(1)   83/  883F9E :                     
(1)   84/  883F9E :                     ; start: Pointer to sample data:
(1)   85/  883F9E :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   86/  883F9E :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   87/  883F9E :                     ;        dc.b (data)		; Then the actual sound data
(1)   88/  883F9E :                     ;
(1)   89/  883F9E :                     ; flags: %00SL
(1)   90/  883F9E :                     ;            L - Loop sample No/Yes
(1)   91/  883F9E :                     ;           S  - Sample data is on STEREO
(1)   92/  883F9E :                     gInsPwm	macro pitch,start,flags
(1)   93/  883F9E :                      if MARS|MARSCD
(1)   94/  883F9E :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   95/  883F9E :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   96/  883F9E :                      else
(1)   97/  883F9E :                     	dc.b $00,$00,$00,$00
(1)   98/  883F9E :                     	dc.b $00,$00,$00,$00
(1)   99/  883F9E :                      endif
(1)  100/  883F9E :                     	endm
(1)  101/  883F9E :                     
(1)  102/  883F9E :                     ; ------------------------------------------------------------
(1)  103/  883F9E :                     
(1)  104/  883F9E :                     	align 2
(1)  105/  883F9E :                     
(1)  106/  883F9E :                     ; ------------------------------------------------------------
(1)  107/  883F9E :                     ; Nikona MAIN track-list
(1)  108/  883F9E :                     ;
(1)  109/  883F9E :                     ; ONLY the ticks can be set here.
(1)  110/  883F9E :                     ; You can change the ticks mid-track using effect A
(1)  111/  883F9E :                     ;
(1)  112/  883F9E :                     ; Add $80 to the ticks value to use the GLOBAL
(1)  113/  883F9E :                     ; sub-beats
(1)  114/  883F9E :                     ;
(1)  115/  883F9E :                     ; To set the sub-beats send the SetBeats command
(1)  116/  883F9E :                     ; BEFORE playing your track:
(1)  117/  883F9E :                     ; 	move.w	#new_beats,d0
(1)  118/  883F9E :                     ; 	bsr	gemaSetBeats
(1)  119/  883F9E :                     ; 	move.w	#track_id,d0
(1)  120/  883F9E :                     ;	bsr	gemaPlayTrack
(1)  121/  883F9E :                     ; ------------------------------------------------------------
(1)  122/  883F9E :                     
(1)  123/  883F9E :                     Gema_MasterList:
(1)  124/  883F9E : (MACRO)             	gemaTrk 7,GemaTrk_TEST_0
(1)  124/  883F9E : 0788 4098                   dc.l ((7&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  125/  883FA2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  125/  883FA2 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  126/  883FA6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  126/  883FA6 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  127/  883FAA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  127/  883FAA : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  128/  883FAE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  128/  883FAE : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  129/  883FB2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  129/  883FB2 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  130/  883FB6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  130/  883FB6 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  131/  883FBA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  131/  883FBA : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  132/  883FBE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  132/  883FBE : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  133/  883FC2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  133/  883FC2 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  134/  883FC6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  134/  883FC6 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  135/  883FCA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  135/  883FCA : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  136/  883FCE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  136/  883FCE : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  137/  883FD2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  137/  883FD2 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  138/  883FD6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  138/  883FD6 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  139/  883FDA : (MACRO)             	gemaTrk 7,GemaSfx_All		; $0F
(1)  139/  883FDA : 0788 401E                   dc.l ((7&$FF)<<24)|GEMASFX_ALL&$FFFFFF
(1)  140/  883FDE :                     
(1)  141/  883FDE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  141/  883FDE : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  142/  883FE2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  142/  883FE2 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  143/  883FE6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  143/  883FE6 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  144/  883FEA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  144/  883FEA : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  145/  883FEE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  145/  883FEE : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  146/  883FF2 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  146/  883FF2 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  147/  883FF6 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  147/  883FF6 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  148/  883FFA : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  148/  883FFA : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  149/  883FFE : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  149/  883FFE : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  150/  884002 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  150/  884002 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  151/  884006 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  151/  884006 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  152/  88400A : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  152/  88400A : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  153/  88400E : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  153/  88400E : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  154/  884012 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  154/  884012 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  155/  884016 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  155/  884016 : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  156/  88401A : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  156/  88401A : 0388 4098                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0&$FFFFFF
(1)  157/  88401E :                     
(1)  158/  88401E :                     ; ------------------------------------------------------------
(1)  159/  88401E :                     ; BGM tracks
(1)  160/  88401E :                     ; ------------------------------------------------------------
(1)  161/  88401E :                     
(1)  162/  88401E :                     GemaSfx_All:
(1)  163/  88401E : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  163/  88401E : 0088 402A                   dc.l .BLK
(1)  163/  884022 : 0088 402E                   dc.l .PAT
(1)  163/  884026 : 0088 4080                   dc.l .INS
(1)  164/  88402A :                     .blk:
(1)  165/  88402A :                     	binclude "sound/tracks/sfxall_blk.bin"
(1)  166/  88402D :                     	align 2
(1)  167/  88402E :                     .pat:
(1)  168/  88402E :                     	binclude "sound/tracks/sfxall_patt.bin"
(1)  169/  884080 :                     	align 2
(1)  170/  884080 :                     .ins:
(1)  171/  884080 : (MACRO)             	gInsFm3 0,FmIns_Fm3_Explosion
(1)  171/  884080 : B000 8840                   dc.b $B0,0,((FMINS_FM3_EXPLOSION>>16)&$FF),((FMINS_FM3_EXPLOSION>>8)&$FF)
(1)  171/  884084 : C700 0000                   dc.b FMINS_FM3_EXPLOSION&$FF,$00,$00,$00
(1)  172/  884088 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$02,0,%110
(1)  172/  884088 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  172/  88408C : 0000 0200                   dc.b $00,$00,$02,0
(1)  173/  884090 : (MACRO)             	gInsFm 0,FmIns_Ding_toy
(1)  173/  884090 : A000 8845                   dc.b $A0,0,((FMINS_DING_TOY>>16)&$FF),((FMINS_DING_TOY>>8)&$FF)
(1)  173/  884094 : 0700 0000                   dc.b FMINS_DING_TOY&$FF,$00,$00,$00
(1)  174/  884098 :                     
(1)  175/  884098 :                     ; ------------------------------------------------------------
(1)  176/  884098 :                     
(1)  177/  884098 :                     GemaTrk_TEST_0:
(1)  178/  884098 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  178/  884098 : 0088 40A4                   dc.l .BLK
(1)  178/  88409C : 0088 40A7                   dc.l .PAT
(1)  178/  8840A0 : 0088 40BF                   dc.l .INS
(1)  179/  8840A4 :                     
(1)  180/  8840A4 :                     ; Max. 24 blocks
(1)  181/  8840A4 :                     .blk:
(1)  182/  8840A4 :                     	binclude "sound/tracks/test_blk.bin"
(1)  183/  8840A7 :                     ; Max. 24 patterns
(1)  184/  8840A7 :                     .pat:
(1)  185/  8840A7 :                     	binclude "sound/tracks/test_patt.bin"
(1)  186/  8840BF :                     
(1)  187/  8840BF :                     ; Max. 16 instruments
(1)  188/  8840BF :                     ; Starting from 1.
(1)  189/  8840BF :                     .ins:
(1)  190/  8840BF :                     ; 	gInsDac 0,DacIns_TESTINS,0
(1)  191/  8840BF :                     
(1)  192/  8840BF : (MACRO)             	gInsPwm -5,SmpIns_TEST,%001
(1)  192/  8840BF : D1FB 0601                   dc.b $D0|%001,-5,((SMPINS_TEST>>24)&$FF),((SMPINS_TEST>>16)&$FF)
(1)  192/  8840C3 : 4C28 0000                   dc.b ((SMPINS_TEST>>8)&$FF),SMPINS_TEST&$FF,0,0
(1)  193/  8840C7 :                     
(1)  194/  8840C7 :                     ; 	gInsPsg 0,$00,$00,$00,$00,$00,0
(1)  195/  8840C7 :                     ; 	gInsFm -12,FmIns_Trumpet_2
(1)  196/  8840C7 :                     ; ; 	gInsPsgN +12,$20,$20,$10,$00,$04,0,%011
(1)  197/  8840C7 :                     ;
(1)  198/  8840C7 :                     ; 	gInsFm3 0,FmIns_Sp_OpenHat
(1)  199/  8840C7 :                     ; 	gInsDac -12,DacIns_Snare_1,0
(1)  200/  8840C7 :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  201/  8840C7 :                     
(1)  202/  8840C7 :                     ; GemaTrk_TEST_2:
(1)  203/  8840C7 :                     ; 	gemaHead .blk,.pat,.ins
(1)  204/  8840C7 :                     ; .blk:
(1)  205/  8840C7 :                     ; 	binclude "sound/tracks/wegot_blk.bin"
(1)  206/  8840C7 :                     ; 	align 2
(1)  207/  8840C7 :                     ; .pat:
(1)  208/  8840C7 :                     ; 	binclude "sound/tracks/wegot_patt.bin"
(1)  209/  8840C7 :                     ; 	align 2
(1)  210/  8840C7 :                     ; .ins:
(1)  211/  8840C7 :                     ; 	gInsFm 0,FmIns_Synth_plus
(1)  212/  8840C7 :                     ; 	gInsFm 0,FmIns_Bass_4
(1)  213/  8840C7 :                     ; 	gInsDac 0,DacIns_wegot_kick,0
(1)  214/  8840C7 :                     ; 	gInsFm 0,FmIns_Bass_club
(1)  215/  8840C7 :                     ; 	gInsFm3 0,FmIns_Sp_Openhat
(1)  216/  8840C7 :                     ; 	gInsPsg 0,$10,$04,$20,$04,$02,$00;gInsFm -12,FmIns_Trumpet_carnival;;
(1)  217/  8840C7 :                     ; 	gInsDac 0,DacIns_wegot_crash,0
(1)  218/  8840C7 :                     
(1)  219/  8840C7 :                     ; GemaTrk_TEST_1:
(1)  220/  8840C7 :                     ; 	gemaHead .blk,.pat,.ins
(1)  221/  8840C7 :                     ; .blk:
(1)  222/  8840C7 :                     ; 	binclude "sound/tracks/vectr_blk.bin"
(1)  223/  8840C7 :                     ; .pat:
(1)  224/  8840C7 :                     ; 	binclude "sound/tracks/vectr_patt.bin"
(1)  225/  8840C7 :                     ; .ins:
(1)  226/  8840C7 :                     ; 	gInsPwm -17,SmpIns_Vctr01,%001
(1)  227/  8840C7 :                     ; 	gInsFm -3,FmIns_brass_eur
(1)  228/  8840C7 :                     ; 	gInsPwm -15,SmpIns_VctrCrash,0
(1)  229/  8840C7 :                     ; 	gInsPwm -17,SmpIns_Vctr04,%001
(1)  230/  8840C7 :                     ; 	gInsNull
(1)  231/  8840C7 :                     ; 	gInsPwm -15,SmpIns_VctrTimpani,%101
(1)  232/  8840C7 :                     ; 	gInsFm -22,FmIns_Bass_8
(1)  233/  8840C7 :                     ; 	gInsPsg 0,$40,$08,$10,$01,$01,$00
(1)  234/  8840C7 :                     ; 	gInsNull;gInsPsgN 0,$40,$08,$10,$01,$01,$00,%110
(1)  235/  8840C7 :                     ; 	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  236/  8840C7 :                     ; 	gInsPwm -17,SmpIns_VctrKick,%000
(1)  237/  8840C7 :                     ; 	gInsFm3 0,FmIns_Sp_Closedhat
(1)  238/  8840C7 :                     ; 	gInsFm3 0,FmIns_Sp_Openhat
(1)  239/  8840C7 :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  240/  8840C7 :                     
     369/  8840C7 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/  8840C7 :                     ; ====================================================================
(1)    2/  8840C7 :                     ; --------------------------------------------------------
(1)    3/  8840C7 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/  8840C7 :                     ;
(1)    5/  8840C7 :                     ; This must be located at the 68k's 880000 area.
(1)    6/  8840C7 :                     ;
(1)    7/  8840C7 :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    8/  8840C7 :                     ; own instruments/patches
(1)    9/  8840C7 :                     ; --------------------------------------------------------
(1)   10/  8840C7 :                     
(1)   11/  8840C7 :                     ; Notes:
(1)   12/  8840C7 :                     ;
(1)   13/  8840C7 :                     ; Savestate FM data is located at: $2478
(1)   14/  8840C7 :                     ;
(1)   15/  8840C7 :                     ; Sizes:
(1)   16/  8840C7 :                     ; Normal FM ins: $20
(1)   17/  8840C7 :                     ; Special FM ins: $28
(1)   18/  8840C7 :                     ;
(1)   19/  8840C7 :                     ; REGISTER FORMAT:
(1)   20/  8840C7 :                     ; dc.b $30,$34,$38,$3C
(1)   21/  8840C7 :                     ; dc.b $40,$44,$48,$4C
(1)   22/  8840C7 :                     ; dc.b $50,$54,$58,$5C
(1)   23/  8840C7 :                     ; dc.b $60,$64,$68,$6C
(1)   24/  8840C7 :                     ; dc.b $70,$74,$78,$7C
(1)   25/  8840C7 :                     ; dc.b $80,$84,$88,$8C
(1)   26/  8840C7 :                     ; dc.b $90,$94,$98,$9C
(1)   27/  8840C7 :                     ; dc.b $B0,$B4,$22,$28
(1)   28/  8840C7 :                     ; ** Extra words for FM3 special:
(1)   29/  8840C7 :                     ; dc.w OP1,OP2,OP3,OP4
(1)   30/  8840C7 :                     ;
(1)   31/  8840C7 :                     ; $22 LFO: %0000evvv
(1)   32/  8840C7 :                     ; e - Enable
(1)   33/  8840C7 :                     ; v - Value
(1)   34/  8840C7 :                     ;
(1)   35/  8840C7 :                     ; $28 KEYS: %oooo0000
(1)   36/  8840C7 :                     ; o - Operators 4-1
(1)   37/  8840C7 :                     
(1)   38/  8840C7 :                     
(1)   39/  8840C7 :                     
(1)   40/  8840C7 :                     ; FM3 Special
(1)   41/  8840C7 :                     FmIns_Fm3_Explosion:
(1)   42/  8840C7 :                     		binclude "sound/instr/fm/fm3_sfx_boomworm.gsx",$2478,$28
(1)   43/  8840EF :                     FmIns_Sp_OpenHat:
(1)   44/  8840EF :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   45/  884117 :                     FmIns_Sp_ClosedHat:
(1)   46/  884117 :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   47/  88413F :                     FmIns_Sp_Cowbell:
(1)   48/  88413F :                     		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(1)   49/  884167 :                     FmIns_Bass_4:
(1)   50/  884167 :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   51/  884187 :                     FmIns_Bass_8:
(1)   52/  884187 :                     		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(1)   53/  8841A7 :                     FmIns_Synth_Plus:
(1)   54/  8841A7 :                     		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(1)   55/  8841C7 :                     FmIns_Bass_club:
(1)   56/  8841C7 :                     		binclude "sound/instr/fm/OLD_bass_club.gsx",$2478,$20
(1)   57/  8841E7 :                     FmIns_Bass_calm:
(1)   58/  8841E7 :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   59/  884207 :                     FmIns_Trumpet_1:
(1)   60/  884207 :                     		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(1)   61/  884227 :                     FmIns_Trumpet_carnival:
(1)   62/  884227 :                     		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   63/  884247 :                     FmIns_brass_eur:
(1)   64/  884247 :                     		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(1)   65/  884267 :                     FmIns_Bass_Oil:
(1)   66/  884267 :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   67/  884287 :                     FmIns_Organ_Ito:
(1)   68/  884287 :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)   69/  8842A7 :                     FmIns_Ding_Baseball:
(1)   70/  8842A7 :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)   71/  8842C7 :                     FmIns_DrumKick_gem:
(1)   72/  8842C7 :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)   73/  8842E7 :                     FmIns_ClosedHat:
(1)   74/  8842E7 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)   75/  884307 :                     FmIns_PianoM1:
(1)   76/  884307 :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   77/  884327 :                     FmIns_Bass_1:
(1)   78/  884327 :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   79/  884347 :                     FmIns_Bass_2:
(1)   80/  884347 :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   81/  884367 :                     FmIns_Bass_donna:
(1)   82/  884367 :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   83/  884387 :                     FmIns_Bass_groove:
(1)   84/  884387 :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   85/  8843A7 :                     FmIns_Bass_groove_2:
(1)   86/  8843A7 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   87/  8843C7 :                     FmIns_Bass_groove_gem:
(1)   88/  8843C7 :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   89/  8843E7 :                     FmIns_Bass_italo:
(1)   90/  8843E7 :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   91/  884407 :                     FmIns_Bass_duck:
(1)   92/  884407 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   93/  884427 :                     FmIns_Piano_Aqua:
(1)   94/  884427 :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   95/  884447 :                     FmIns_Trumpet_2:
(1)   96/  884447 :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)   97/  884467 :                     FmIns_Trumpet_puy:
(1)   98/  884467 :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)   99/  884487 :                     FmIns_Marimba:
(1)  100/  884487 :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)  101/  8844A7 :                     FmIns_Ambient_dark:
(1)  102/  8844A7 :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  103/  8844C7 :                     FmIns_Ambient_spook:
(1)  104/  8844C7 :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  105/  8844E7 :                     FmIns_Ambient_3:
(1)  106/  8844E7 :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  107/  884507 :                     FmIns_Ding_toy:
(1)  108/  884507 :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  109/  884527 :                     FmIns_Brass_Puy:
(1)  110/  884527 :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  111/  884547 :                     FmIns_Flaute_cave:
(1)  112/  884547 :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  113/  884567 :                     FmIns_Banjo_puy:
(1)  114/  884567 :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  115/  884587 :                     FmIns_PSynth_plus:
(1)  116/  884587 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  117/  8845A7 :                     FmIns_Ding_1:
(1)  118/  8845A7 :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  119/  8845C7 :                     FmIns_Trombone_gem:
(1)  120/  8845C7 :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  121/  8845E7 :                     FmIns_HBeat_tom:
(1)  122/  8845E7 :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  123/  884607 :                     
     370/  884607 :                     gemacd_report_e:
     372/    4607 :                     		dephase
     379/    4607 :                     
     380/    4607 :                     ; ====================================================================
     381/    4607 :                     ; ----------------------------------------------------------------
     382/    4607 :                     ; 68K DATA BANKs
     383/    4607 :                     ;
     384/    4607 :                     ; SEGA CD:
     385/    4607 :                     ; BANKS are stored in WORD-RAM pieces
     386/    4607 :                     ; limited to 256KB 2M or 128KB 1M/1M
     387/    4607 :                     ; ** THESE CANNOT BE USED IF USING ASIC STAMPS **
     388/    4607 :                     ;
     389/    4607 :                     ; SEGA 32X:
     390/    4607 :                     ; BANKS are limited to 1MB, only 4 banks can be used
     391/    4607 :                     ; ----------------------------------------------------------------
     392/    4607 :                     
     393/    4607 :                     ; ---------------------------------------------
     394/    4607 :                     ; BANK 0 DEFAULT
     395/    4607 :                     ;
     396/    4607 :                     ; CD/CD32X:
     397/    4607 :                     ; $200000 (WORD-RAM)
     398/    4607 :                     ;
     399/    4607 :                     ; 32X:
     400/    4607 :                     ; $900000
     401/    4607 :                     ; ---------------------------------------------
     402/    4607 :                     
     403/    4607 :                     MCD_DBANK0:
     405/  904607 :                     		phase $900000+*				; ** Currently this one only.
     409/  904607 :                     mdbank0:
     410/  904607 :                     		include "game/data/md_bank0.asm"	; <-- 68K ONLY bank data
(1)    1/  904607 :                     ; ====================================================================
(1)    2/  904607 :                     ; ----------------------------------------------------------------
(1)    3/  904607 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/  904607 :                     ; for big stuff like maps, levels, etc.
(1)    5/  904607 :                     ;
(1)    6/  904607 :                     ; For graphics use DMA and place your files at
(1)    7/  904607 :                     ; md_dma.asm (Watch out for the $20000 limit.)
(1)    8/  904607 :                     ;
(1)    9/  904607 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/  904607 :                     ; ----------------------------------------------------------------
(1)   11/  904607 :                     
(1)   12/  904607 :                     		include "game/data/m_palettes.asm"	; All 32X palettes will be here.
(2)    1/  904607 :                     ; ====================================================================
(2)    2/  904607 :                     ; ----------------------------------------------------------------
(2)    3/  904607 :                     ; Put your 32X palettes here
(2)    4/  904607 :                     ;
(2)    5/  904607 :                     ; These are located on a single 68K $900000+ bank
(2)    6/  904607 :                     ;
(2)    7/  904607 :                     ; Labels MUST be aligned by 2
(2)    8/  904607 :                     ; ----------------------------------------------------------------
(2)    9/  904607 :                     
(2)   10/  904607 :                     		align 2
(2)   11/  904608 :                     PalMars_TEST:
(2)   12/  904608 :                     		binclude "game/data/TESTS/mars_pal.bin"
(2)   13/  904806 :                     		align 2
(2)   14/  904806 :                     
(2)   15/  904806 :                     ; PalMars_MarsCity:
(2)   16/  904806 :                     ; 		binclude "game/data/maps/3D/mcity/mtrl/marscity_pal.bin"
(2)   17/  904806 :                     ; 		align 2
(2)   18/  904806 :                     ;
(2)   19/  904806 :                     ; MapPal_M:	binclude "game/data/maps/2D/level0/m_pal.bin"
(2)   20/  904806 :                     ; 		align 2
(2)   21/  904806 :                     ; TestSupSpr_Pal:
(2)   22/  904806 :                     ; 		binclude "game/data/sprites/mars/nicole/sprites_pal.bin"
(2)   23/  904806 :                     ; 		align 2
(2)   24/  904806 :                     
(1)   13/  904806 :                     
(1)   14/  904806 :                     PalMd_TEST:	binclude "game/data/TESTS/md_pal.bin"
(1)   15/  904826 :                     		align 2
(1)   16/  904826 :                     MapMd_TEST:	binclude "game/data/TESTS/md_map.bin"
(1)   17/  9050E6 :                     		align 2
(1)   18/  9050E6 :                     
(1)   19/  9050E6 :                     MAP_TESTBOARD:
(1)   20/  9050E6 :                     		binclude "game/data/md/bg/board_map.bin"
(1)   21/  9059A6 :                     		align 2
(1)   22/  9059A6 :                     
(1)   23/  9059A6 :                     ; 		align 2
(1)   24/  9059A6 :                     ; Pal_level0:	binclude "game/data/maps/2D/level0/pal.bin"
(1)   25/  9059A6 :                     ; 		align 2
(1)   26/  9059A6 :                     ; Pal_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_pal.bin"
(1)   27/  9059A6 :                     ; 		align 2
(1)   28/  9059A6 :                     ; Map_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_map.bin"
(1)   29/  9059A6 :                     ; 		align 2
(1)   30/  9059A6 :                     ;
(1)   31/  9059A6 :                     ; ; ----------------------------------------------------------------
(1)   32/  9059A6 :                     ;
(1)   33/  9059A6 :                     ; 		align 2
(1)   34/  9059A6 :                     ; MapHead_0:	binclude "game/data/maps/2D/level0/head.bin"
(1)   35/  9059A6 :                     ; MapBlk_0:	binclude "game/data/maps/2D/level0/blocks.bin"
(1)   36/  9059A6 :                     ; 		align 2
(1)   37/  9059A6 :                     ; MapFgL_0:	binclude "game/data/maps/2D/level0/fg_low.bin"
(1)   38/  9059A6 :                     ; 		align 2
(1)   39/  9059A6 :                     ; MapFgH_0:	binclude "game/data/maps/2D/level0/fg_hi.bin"
(1)   40/  9059A6 :                     ; 		align 2
(1)   41/  9059A6 :                     ; MapFgC_0:	binclude "game/data/maps/2D/level0/fg_col.bin"
(1)   42/  9059A6 :                     ; 		align 2
(1)   43/  9059A6 :                     ; MapBgL_0:	binclude "game/data/maps/2D/level0/bg_low.bin"
(1)   44/  9059A6 :                     ; 		align 2
(1)   45/  9059A6 :                     ; MapBgH_0:	binclude "game/data/maps/2D/level0/bg_hi.bin"
(1)   46/  9059A6 :                     ; 		align 2
(1)   47/  9059A6 :                     ;
(1)   48/  9059A6 :                     ; ; ----------------------------------------------------------------
(1)   49/  9059A6 :                     ; ; 68k data for 32X maps go here:
(1)   50/  9059A6 :                     ; ; Headers and Collision
(1)   51/  9059A6 :                     ;
(1)   52/  9059A6 :                     ; 		align 2
(1)   53/  9059A6 :                     ; MapHead_M:	binclude "game/data/maps/2D/level0/m_head.bin"
(1)   54/  9059A6 :                     ; 		align 2
(1)   55/  9059A6 :                     ; MapCol_M:	binclude "game/data/maps/2D/level0/m_col.bin"
(1)   56/  9059A6 :                     ; 		align 2
(1)   57/  9059A6 :                     ;
(1)   58/  9059A6 :                     ; ; ----------------------------------------------------------------
(1)   59/  9059A6 :                     ;
(1)   60/  9059A6 :                     ; MapCamera_0:
(1)   61/  9059A6 :                     ; 		binclude "game/data/maps/3D/mcity/anim/mcity_anim.bin"
(1)   62/  9059A6 :                     ; 		align 4
(1)   63/  9059A6 :                     
     411/  9059A6 :                     mdbank0_e:
     412/  9059A6 :                     		include "sound/smpl_dac.asm"		; (MCD/CD32X ONLY) GEMA: DAC samples
(1)    1/  9059A6 :                     ; ====================================================================
(1)    2/  9059A6 :                     ; --------------------------------------------------------
(1)    3/  9059A6 :                     ; GEMA/Nikona DAC instruments "digital"
(1)    4/  9059A6 :                     ;
(1)    5/  9059A6 :                     ; This must be located at the 68k's 900000 area.
(1)    6/  9059A6 :                     ; ** 68K BANK 0 only **
(1)    7/  9059A6 :                     ;
(1)    8/  9059A6 :                     ; BASE Samplerate is at 16000hz
(1)    9/  9059A6 :                     ; --------------------------------------------------------
(1)   10/  9059A6 :                     
(1)   11/  9059A6 :                     ; Special sample data macro
(1)   12/  9059A6 :                     gSmpHead macro len,loop
(1)   13/  9059A6 :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   14/  9059A6 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   15/  9059A6 :                     	endm
(1)   16/  9059A6 :                     
(1)   17/  9059A6 :                     	align $8000	; <-- just to be safe.
(1)   18/  908000 :                     DacIns_wegot_crash:
(1)   19/  908000 : (MACRO)             	gSmpHead .end-.start,0
(1)   19/  908000 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/  908003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/  908006 :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   21/  90ACCA :                     .end:
(1)   22/  90ACCA :                     DacIns_wegot_kick:
(1)   23/  90ACCA : (MACRO)             	gSmpHead .end-.start,0
(1)   23/  90ACCA : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   23/  90ACCD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/  90ACD0 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   25/  90B444 :                     .end:
(1)   26/  90B444 :                     DacIns_Snare_1:
(1)   27/  90B444 : (MACRO)             	gSmpHead .end-.start,0
(1)   27/  90B444 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   27/  90B447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/  90B44A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   29/  90C56E :                     .end:
(1)   30/  90C56E :                     
(1)   31/  90C56E :                     DacIns_TESTINS:
(1)   32/  90C56E : (MACRO)             	gSmpHead .end-.start,0
(1)   32/  90C56E : 00E7 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   32/  90C571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/  90C574 :                     .start:	binclude "sound/instr/smpl/test.wav",$2C
(1)   34/  91AC74 :                     .end:
(1)   35/  91AC74 :                     
(1)   36/  91AC74 :                     ; TEST SAMPLE
(1)   37/  91AC74 :                     TEST_WAVE:
(1)   38/  91AC74 :                     	binclude "sound/instr/smpl/test.wav",$2C
(1)   39/  929374 :                     TEST_WAVE_E:
(1)   40/  929374 :                     	align 2
(1)   41/  929374 :                     
     413/  929374 :                     ; 	if MARS
     414/  929374 :                     ; 		org $100000-4				; Fill this bank and
     415/  929374 :                     ; 		dc.b "BNK0"				; add a tag at the end
     416/  929374 :                     ; 		dephase
     423/  929374 :                     
     425/  929374 :                     mdbank0_cd_e:
     426/   29374 :                     		dephase
     427/   29374 :                     		align $800
     428/   29800 :                     MCD_DBANK0_e:
     430/   29800 :                     
     432/   29800 : (MACRO)             		report "68K DEFAULT BANK (900000)",mdbank0_e-mdbank0,$100000
     436/   29800 :                     
     437/   29800 :                     ; ---------------------------------------------
     438/   29800 :                     ; BANK 1
     439/   29800 :                     ; ---------------------------------------------
     440/   29800 :                     
     441/   29800 :                     ; 		phase $900000
     442/   29800 :                     ; 		include "game/data/md_bank1.asm"
     443/   29800 :                     ; 		dephase
     444/   29800 :                     ; 		org $200000-4
     445/   29800 :                     ; 		dc.b "BNK1"
     446/   29800 :                     
     447/   29800 :                     ; ---------------------------------------------
     448/   29800 :                     ; BANK 2
     449/   29800 :                     ; ---------------------------------------------
     450/   29800 :                     
     451/   29800 :                     ; 		phase $900000
     452/   29800 :                     ; 		include "game/data/md_bank2.asm"
     453/   29800 :                     ; 		dephase
     454/   29800 :                     ; 		org $300000-4
     455/   29800 :                     ; 		dc.b "BNK2"
     456/   29800 :                     
     457/   29800 :                     ; ---------------------------------------------
     458/   29800 :                     ; BANK 3
     459/   29800 :                     ; ---------------------------------------------
     460/   29800 :                     
     461/   29800 :                     ; 		phase $900000
     462/   29800 :                     ; 		include "game/data/md_bank3.asm"
     463/   29800 :                     ; 		dephase
     464/   29800 :                     ; 		org $400000-4
     465/   29800 :                     ; 		dc.b "BNK3"
     466/   29800 :                     
     467/   29800 :                     ; ====================================================================
     468/   29800 :                     ; ----------------------------------------------------------------
     469/   29800 :                     ; 32X Cartridge DMA data: Requires RV bit set to 1, BANK-free
     470/   29800 :                     ; ----------------------------------------------------------------
     471/   29800 :                     
     472/   29800 :                     		align $8000
     474/   30000 :                     		include "game/data/md_dma.asm"
(1)    1/   30000 :                     ; ====================================================================
(1)    2/   30000 :                     ; ----------------------------------------------------------------
(1)    3/   30000 :                     ; DMA ROM-DATA Transfer section
(1)    4/   30000 :                     ; 
(1)    5/   30000 :                     ; RV bit must be enabled to read from here
(1)    6/   30000 :                     ; ----------------------------------------------------------------
(1)    7/   30000 :                     
(1)    9/   30000 :                     		align $8000
(1)   11/   30000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   12/   30C00 :                     ASCII_FONT_e:
(1)   13/   30C00 :                     ArtMd_TEST:	binclude "game/data/TESTS/md_art.bin"
(1)   14/   38360 :                     ArtMd_TEST_e:
(1)   15/   38360 :                     		align 2
(1)   16/   38360 :                     
(1)   17/   38360 :                     		align $8000
(1)   18/   40000 :                     ART_TESTBOARD:	binclude "game/data/md/bg/board_art.bin"
(1)   19/   40300 :                     ART_TESTBOARD_e:
(1)   20/   40300 :                     ART_EMI:	binclude "game/data/md/sprites/emi_art.bin"
(1)   21/   43300 :                     ART_EMI_e:
(1)   22/   43300 :                     
(1)   23/   43300 :                     
(1)   24/   43300 :                     
(1)   25/   43300 :                     
(1)   26/   43300 :                     
     476/   43300 :                     
     477/   43300 :                     ; ====================================================================
     478/   43300 :                     ; ----------------------------------------------------------------
     479/   43300 :                     ; 32X ONLY
     480/   43300 :                     ;
     481/   43300 :                     ; SH2 code and ROM data
     482/   43300 :                     ;
     483/   43300 :                     ; ** MARSCD: Loads to WORD-RAM
     484/   43300 :                     ; ----------------------------------------------------------------
     485/   43300 :                     
     489/   43300 :                     		align 4
     491/   43300 :                     MARS_RAMDATA:
     493/   43300 :                     		include "system/mars/code.asm"
(1)    1/   43300 :                     ; ====================================================================
(1)    2/   43300 :                     ; ----------------------------------------------------------------
(1)    3/   43300 :                     ; MARS SH2 SDRAM section, shared for both SH2 CPUs
(1)    4/   43300 :                     ; ----------------------------------------------------------------
(1)    5/   43300 :                     
(1)    6/   43300 :                     ; *************************************************
(1)    7/   43300 :                     ; comm ports:
(1)    8/   43300 :                     ;
(1)    9/   43300 :                     ; comm0-comm7  - ** FREE ***
(1)   10/   43300 :                     ; comm8-comm11 - Used by Z80 for getting it's data
(1)   11/   43300 :                     ;                packets
(1)   12/   43300 :                     ; comm12       - Master CPU control
(1)   13/   43300 :                     ; comm14       - Slave CPU control
(1)   14/   43300 :                     ; *************************************************
(1)   15/   43300 :                     
(1)   16/ 6000000 :                     		phase CS3	; Now we are at SDRAM
(1)   17/ 6000000 :                     		cpu SH7600	; Should be SH7095 but this CPU mode works.
(1)   18/ 6000000 :                     
(1)   19/ 6000000 :                     ; ; CPU METER MACRO
(1)   20/ 6000000 :                     ; testme macro color
(1)   21/ 6000000 :                     ; 		mov	#color,r1
(1)   22/ 6000000 :                     ; 		mov	#_vdpreg,r2
(1)   23/ 6000000 :                     ; 		mov	#_vdpreg+bitmapmd,r3
(1)   24/ 6000000 :                     ; -		mov.b	@(vdpsts,r2),r0
(1)   25/ 6000000 :                     ; 		tst	#HBLK,r0
(1)   26/ 6000000 :                     ; 		bt	-
(1)   27/ 6000000 :                     ; 		mov.b	r1,@r3
(1)   28/ 6000000 :                     ; 	endm
(1)   29/ 6000000 :                     
(1)   30/ 6000000 :                     ; ====================================================================
(1)   31/ 6000000 :                     ; ----------------------------------------------------------------
(1)   32/ 6000000 :                     ; Settings
(1)   33/ 6000000 :                     ; ----------------------------------------------------------------
(1)   34/ 6000000 :                     
(1)   35/ 6000000 : =$1                 SH2_DEBUG	equ 1			; Set to 1 too see if CPUs are active using comm counters (0 and 1)
(1)   36/ 6000000 : =$6040000           STACK_MSTR	equ CS3|$40000
(1)   37/ 6000000 : =$603F000           STACK_SLV	equ CS3|$3F000
(1)   38/ 6000000 :                     
(1)   39/ 6000000 :                     ; ====================================================================
(1)   40/ 6000000 :                     ; ----------------------------------------------------------------
(1)   41/ 6000000 :                     ; MARS GLOBAL gbr variables for both SH2
(1)   42/ 6000000 :                     ; ----------------------------------------------------------------
(1)   43/ 6000000 :                     
(1)   44/ 6000000 :                     ; ====================================================================
(1)   45/ 6000000 :                     ; ----------------------------------------------------------------
(1)   46/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   47/ 6000000 :                     ; ----------------------------------------------------------------
(1)   48/ 6000000 :                     
(1)   49/ 6000000 :                     		align 4
(1)   50/ 6000000 :                     SH2_Master:
(1)   51/ 6000000 : 0600 081C 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
(1)   52/ 6000008 : 0600 081C 0604 0000 		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
(1)   53/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   54/ 6000014 : 0000 0000           		dc.l 0				; reserved
(1)   55/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   56/ 600001C : 2010 0400           		dc.l $20100400			; reserved
(1)   57/ 6000020 : 2010 0420           		dc.l $20100420			; reserved
(1)   58/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   59/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   60/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   61/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   62/ 6000034 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   63/ 6000058 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)   64/ 600007C : 0000 0000           		dc.l 0
(1)   65/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   66/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   67/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   97/ 6000100 : 0600 0250            		dc.l master_irq		; Level 1 IRQ
(1)   98/ 6000104 : 0600 0250           		dc.l master_irq		; Level 2 & 3 IRQ
(1)   99/ 6000108 : 0600 0250           		dc.l master_irq		; Level 4 & 5 IRQ
(1)  100/ 600010C : 0600 0250           		dc.l master_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  101/ 6000110 : 0600 0250           		dc.l master_irq		; Level 8 & 9 IRQ: Command interupt
(1)  102/ 6000114 : 0600 0250           		dc.l master_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  103/ 6000118 : 0600 0250           		dc.l master_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  104/ 600011C : 0600 0250           		dc.l master_irq		; Level 14 & 15 IRQ: Reset Button
(1)  105/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  106/ 6000120 : 0600 0250           		dc.l master_irq		; Watchdog (custom)
(1)  107/ 6000124 : 0600 0250           		dc.l master_irq		; DMA
(1)  108/ 6000128 :                     
(1)  109/ 6000128 :                     ; ====================================================================
(1)  110/ 6000128 :                     ; ----------------------------------------------------------------
(1)  111/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  112/ 6000128 :                     ; ----------------------------------------------------------------
(1)  113/ 6000128 :                     
(1)  114/ 6000128 :                     		align 4
(1)  115/ 6000128 :                     SH2_Slave:
(1)  116/ 6000128 : 0600 0980 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
(1)  117/ 6000130 : 0600 0980 0603 F000 		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
(1)  118/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  119/ 600013C : 0000 0000           		dc.l 0				; reserved
(1)  120/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  121/ 6000144 : 2010 0400           		dc.l $20100400			; reserved
(1)  122/ 6000148 : 2010 0420           		dc.l $20100420			; reserved
(1)  123/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  124/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  125/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  126/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  127/ 600015C : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0		; reserved
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  128/ 6000180 : 0000 0000 0000 0000 		dc.l 0,0,0,0,0,0,0,0,0
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000 0000 0000 
                    0000 0000           
(1)  129/ 60001A4 : 0000 0000           		dc.l 0
(1)  130/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  131/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  132/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  162/ 6000228 : 0600 0278            		dc.l slave_irq		; Level 1 IRQ
(1)  163/ 600022C : 0600 0278           		dc.l slave_irq		; Level 2 & 3 IRQ
(1)  164/ 6000230 : 0600 0278           		dc.l slave_irq		; Level 4 & 5 IRQ
(1)  165/ 6000234 : 0600 0278           		dc.l slave_irq		; Level 6 & 7 IRQ: PWM interupt
(1)  166/ 6000238 : 0600 0278           		dc.l slave_irq		; Level 8 & 9 IRQ: Command interupt
(1)  167/ 600023C : 0600 0278           		dc.l slave_irq		; Level 10 & 11 IRQ: H Blank interupt
(1)  168/ 6000240 : 0600 0278           		dc.l slave_irq		; Level 12 & 13 IRQ: V Blank interupt
(1)  169/ 6000244 : 0600 0278           		dc.l slave_irq		; Level 14 & 15 IRQ: Reset Button
(1)  170/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  171/ 6000248 : 0600 0278           		dc.l slave_irq		; Watchdog
(1)  172/ 600024C : 0600 0278           		dc.l slave_irq		; DMA
(1)  173/ 6000250 :                     
(1)  174/ 6000250 :                     ; ====================================================================
(1)  175/ 6000250 :                     ; ----------------------------------------------------------------
(1)  176/ 6000250 :                     ; IRQ
(1)  177/ 6000250 :                     ;
(1)  178/ 6000250 :                     ; r0-r1 are saved
(1)  179/ 6000250 :                     ;
(1)  180/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  181/ 6000250 :                     ; ----------------------------------------------------------------
(1)  182/ 6000250 :                     
(1)  183/ 6000250 :                     		align 4
(1)  184/ 6000250 :                     master_irq:
(1)  185/ 6000250 : 2F06                		mov	r0,@-r15
(1)  186/ 6000252 : 2F16                		mov	r1,@-r15
(1)  187/ 6000254 : 4F22                		sts	pr,@-r15
(1)  188/ 6000256 : 0002                		stc	sr,r0
(1)  189/ 6000258 : 4009                		shlr2	r0
(1)  190/ 600025A : C93C                		and	#$3C,r0
(1)  191/ 600025C : 6103                		mov	r0,r1
(1)  192/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  193/ 6000260 : 600C                		extu.b	r0,r0
(1)  194/ 6000262 : 400E                		ldc	r0,sr
(1)  195/ 6000264 : C70E                		mova	int_m_list,r0
(1)  196/ 6000266 : 301C                		add	r1,r0
(1)  197/ 6000268 : 6102                		mov	@r0,r1
(1)  198/ 600026A : 410B                		jsr	@r1
(1)  199/ 600026C : 0009                		nop
(1)  200/ 600026E : 4F26                		lds	@r15+,pr
(1)  201/ 6000270 : 61F6                		mov	@r15+,r1
(1)  202/ 6000272 : 60F6                		mov	@r15+,r0
(1)  203/ 6000274 : 002B                		rte
(1)  204/ 6000276 : 0009                		nop
(1)  205/ 6000278 :                     		align 4
(1)  206/ 6000278 :                     
(1)  207/ 6000278 :                     ; ====================================================================
(1)  208/ 6000278 :                     
(1)  209/ 6000278 :                     slave_irq:
(1)  210/ 6000278 : 2F06                		mov	r0,@-r15
(1)  211/ 600027A : 2F16                		mov	r1,@-r15
(1)  212/ 600027C : 4F22                		sts	pr,@-r15
(1)  213/ 600027E : 0002                		stc	sr,r0
(1)  214/ 6000280 : 4009                		shlr2	r0
(1)  215/ 6000282 : C93C                		and	#$3C,r0
(1)  216/ 6000284 : 6103                		mov	r0,r1
(1)  217/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  218/ 6000288 : 600C                		extu.b	r0,r0
(1)  219/ 600028A : 400E                		ldc	r0,sr
(1)  220/ 600028C : C714                		mova	int_s_list,r0
(1)  221/ 600028E : 301C                		add	r1,r0
(1)  222/ 6000290 : 6102                		mov	@r0,r1
(1)  223/ 6000292 : 410B                		jsr	@r1
(1)  224/ 6000294 : 0009                		nop
(1)  225/ 6000296 : 4F26                		lds	@r15+,pr
(1)  226/ 6000298 : 61F6                		mov	@r15+,r1
(1)  227/ 600029A : 60F6                		mov	@r15+,r0
(1)  228/ 600029C : 002B                		rte
(1)  229/ 600029E : 0009                		nop
(1)  230/ 60002A0 :                     		align 4
(1)  231/ 60002A0 :                     
(1)  232/ 60002A0 :                     ; ====================================================================
(1)  233/ 60002A0 :                     ; ------------------------------------------------
(1)  234/ 60002A0 :                     ; irq list
(1)  235/ 60002A0 :                     ; ------------------------------------------------
(1)  236/ 60002A0 :                     
(1)  237/ 60002A0 :                     		align 4
(1)  238/ 60002A0 :                     ;				  Level:
(1)  239/ 60002A0 :                     int_m_list:
(1)  240/ 60002A0 : 0600 0380           		dc.l m_irq_bad	; 0
(1)  241/ 60002A4 : 0600 0380           		dc.l m_irq_bad	; 1
(1)  242/ 60002A8 : 0600 0380           		dc.l m_irq_bad	; 2
(1)  243/ 60002AC : 0600 0384           		dc.l m_irq_wdg	; 3 Watchdog (TOP code on Cache)
(1)  244/ 60002B0 : 0600 0380           		dc.l m_irq_bad	; 4
(1)  245/ 60002B4 : 0600 0390           		dc.l m_irq_dma	; 5 DMA exit
(1)  246/ 60002B8 : 0600 03AC           		dc.l m_irq_pwm	; 6
(1)  247/ 60002BC : 0600 03AC           		dc.l m_irq_pwm	; 7
(1)  248/ 60002C0 : 0600 03C4           		dc.l m_irq_cmd	; 8
(1)  249/ 60002C4 : 0600 03C4           		dc.l m_irq_cmd	; 9
(1)  250/ 60002C8 : 0600 0410           		dc.l m_irq_h	; A
(1)  251/ 60002CC : 0600 0410           		dc.l m_irq_h	; B
(1)  252/ 60002D0 : 0600 042C           		dc.l m_irq_v	; C
(1)  253/ 60002D4 : 0600 042C           		dc.l m_irq_v	; D
(1)  254/ 60002D8 : 0600 0448           		dc.l m_irq_vres	; E
(1)  255/ 60002DC : 0600 0448           		dc.l m_irq_vres	; F
(1)  256/ 60002E0 :                     int_s_list:
(1)  257/ 60002E0 : 0600 04C8           		dc.l s_irq_bad	; 0
(1)  258/ 60002E4 : 0600 04C8           		dc.l s_irq_bad	; 1
(1)  259/ 60002E8 : 0600 04C8           		dc.l s_irq_bad	; 2
(1)  260/ 60002EC : 0600 04CC           		dc.l s_irq_wdg	; 3 Watchdog (TOP code on Cache)
(1)  261/ 60002F0 : 0600 04C8           		dc.l s_irq_bad	; 4
(1)  262/ 60002F4 : 0600 04D8           		dc.l s_irq_dma	; 5 DMA exit
(1)  263/ 60002F8 : C000 0000           		dc.l s_irq_pwm	; 6
(1)  264/ 60002FC : C000 0000           		dc.l s_irq_pwm	; 7
(1)  265/ 6000300 : 0600 04E8           		dc.l s_irq_cmd	; 8
(1)  266/ 6000304 : 0600 04E8           		dc.l s_irq_cmd	; 9
(1)  267/ 6000308 : 0600 067A           		dc.l s_irq_h	; A
(1)  268/ 600030C : 0600 067A           		dc.l s_irq_h	; B
(1)  269/ 6000310 : 0600 0694           		dc.l s_irq_v	; C
(1)  270/ 6000314 : 0600 0694           		dc.l s_irq_v	; D
(1)  271/ 6000318 : 0600 06B0           		dc.l s_irq_vres	; E
(1)  272/ 600031C : 0600 06B0           		dc.l s_irq_vres	; F
(1)  273/ 6000320 :                     
(1)  274/ 6000320 :                     ; ====================================================================
(1)  275/ 6000320 :                     ; ----------------------------------------------------------------
(1)  276/ 6000320 :                     ; Error handler
(1)  277/ 6000320 :                     ; ----------------------------------------------------------------
(1)  278/ 6000320 :                     
(1)  279/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  280/ 6000320 :                     ;
(1)  281/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  282/ 6000320 :                     ; comm4: PC counter
(1)  283/ 6000320 :                     ;
(1)  284/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  285/ 6000320 :                     ;        $00 - Master
(1)  286/ 6000320 :                     ;        $01 - Slave
(1)  287/ 6000320 :                     ;
(1)  288/ 6000320 :                     ; CODE | Error type:
(1)  289/ 6000320 :                     ;	 $00: Unknown error
(1)  290/ 6000320 :                     ;	 $01: Illegal instruction
(1)  291/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  292/ 6000320 :                     ;	 $03: Address error
(1)  293/ 6000320 :                     ;	 $04: DMA error
(1)  294/ 6000320 :                     ;	 $05: NMI vector
(1)  295/ 6000320 :                     ;	 $06: User break
(1)  296/ 6000320 :                     
(1)  297/ 6000320 :                     SH2_M_Error:
(1)  298/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  299/ 6000322 : E000                		mov	#0,r0
(1)  300/ 6000324 :                     SH2_M_ErrIllg:
(1)  301/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  302/ 6000326 : E001                		mov	#1,r0
(1)  303/ 6000328 :                     SH2_M_ErrInvl:
(1)  304/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  305/ 600032A : E002                		mov	#2,r0
(1)  306/ 600032C :                     SH2_M_ErrAddr:
(1)  307/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  308/ 600032E : E003                		mov	#3,r0
(1)  309/ 6000330 :                     SH2_M_ErrDma:
(1)  310/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  311/ 6000332 : E004                		mov	#4,r0
(1)  312/ 6000334 :                     SH2_M_ErrNmi:
(1)  313/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  314/ 6000336 : E005                		mov	#5,r0
(1)  315/ 6000338 :                     SH2_M_ErrUser:
(1)  316/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  317/ 600033A : E006                		mov	#6,r0
(1)  318/ 600033C :                     ; r0 - value
(1)  319/ 600033C :                     SH2_M_ErrCode:
(1)  320/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  321/ 600033E : 2101                		mov.w	r0,@r1
(1)  322/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  323/ 6000342 : 60F2                		mov	@r15,r0
(1)  324/ 6000344 : 2102                		mov	r0,@r1
(1)  325/ 6000346 : AFFE                		bra	*
(1)  326/ 6000348 : 0009                		nop
(1)  327/ 600034A :                     		align 4
(1)  328/ 600034C :                     
(1)  329/ 600034C :                     ; ----------------------------------------------------
(1)  330/ 600034C :                     
(1)  331/ 600034C :                     SH2_S_Error:
(1)  332/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  333/ 600034E : E000                		mov	#0,r0
(1)  334/ 6000350 :                     SH2_S_ErrIllg:
(1)  335/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  336/ 6000352 : E0FF                		mov	#-1,r0
(1)  337/ 6000354 :                     SH2_S_ErrInvl:
(1)  338/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  339/ 6000356 : E0FE                		mov	#-2,r0
(1)  340/ 6000358 :                     SH2_S_ErrAddr:
(1)  341/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  342/ 600035A : E0FD                		mov	#-3,r0
(1)  343/ 600035C :                     SH2_S_ErrDma:
(1)  344/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  345/ 600035E : E0FC                		mov	#-4,r0
(1)  346/ 6000360 :                     SH2_S_ErrNmi:
(1)  347/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  348/ 6000362 : E0FB                		mov	#-5,r0
(1)  349/ 6000364 :                     SH2_S_ErrUser:
(1)  350/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  351/ 6000366 : E0FA                		mov	#-6,r0
(1)  352/ 6000368 :                     ; r0 - value
(1)  353/ 6000368 :                     SH2_S_ErrCode:
(1)  354/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  355/ 600036A : 2101                		mov.w	r0,@r1
(1)  356/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  357/ 600036E : 60F2                		mov	@r15,r0
(1)  358/ 6000370 : 2102                		mov	r0,@r1
(1)  359/ 6000372 : AFFE                		bra	*
(1)  360/ 6000374 : 0009                		nop
(1)  361/ 6000376 :                     		align 4
(1)  362/ 6000378 : 2000 4022 2000 4024 		ltorg
(1)  363/ 6000380 :                     
(1)  364/ 6000380 :                     ; ====================================================================
(1)  365/ 6000380 :                     ; ----------------------------------------------------------------
(1)  366/ 6000380 :                     ; Interrupts
(1)  367/ 6000380 :                     ; ----------------------------------------------------------------
(1)  368/ 6000380 :                     
(1)  369/ 6000380 :                     ; =================================================================
(1)  370/ 6000380 :                     ; ------------------------------------------------
(1)  371/ 6000380 :                     ; Master | Unused interrupt
(1)  372/ 6000380 :                     ; ------------------------------------------------
(1)  373/ 6000380 :                     
(1)  374/ 6000380 :                     		align 4
(1)  375/ 6000380 :                     m_irq_bad:
(1)  376/ 6000380 : 000B                		rts
(1)  377/ 6000382 : 0009                		nop
(1)  378/ 6000384 :                     		align 4
(1)  379/ 6000384 :                     
(1)  380/ 6000384 :                     ; =================================================================
(1)  381/ 6000384 :                     ; ------------------------------------------------
(1)  382/ 6000384 :                     ; Master | Watchdog
(1)  383/ 6000384 :                     ; ------------------------------------------------
(1)  384/ 6000384 :                     
(1)  385/ 6000384 :                     m_irq_wdg:
(1)  386/ 6000384 : 919C                		mov	#_FRT,r1
(1)  387/ 6000386 : 8417                		mov.b	@(7,r1),r0
(1)  388/ 6000388 : CA02                		xor	#2,r0
(1)  389/ 600038A : 8017                		mov.b	r0,@(7,r1)
(1)  390/ 600038C : 000B                		rts
(1)  391/ 600038E : 0009                		nop
(1)  392/ 6000390 :                     		align 4
(1)  393/ 6000390 :                     
(1)  394/ 6000390 :                     ; =================================================================
(1)  395/ 6000390 :                     ; ------------------------------------------------
(1)  396/ 6000390 :                     ; Master | DMA Exit
(1)  397/ 6000390 :                     ; ------------------------------------------------
(1)  398/ 6000390 :                     
(1)  399/ 6000390 :                     m_irq_dma:
(1)  400/ 6000390 : 9196                		mov	#_FRT,r1
(1)  401/ 6000392 : 8417                		mov.b	@(7,r1),r0
(1)  402/ 6000394 : CA02                		xor	#2,r0
(1)  403/ 6000396 : 8017                		mov.b	r0,@(7,r1)
(1)  404/ 6000398 : E180                		mov	#_DMASOURCE0,r1		; Check Channel 0
(1)  405/ 600039A : 5013                		mov	@($C,r1),r0		; Dummy READ
(1)  406/ 600039C : 9091                		mov	#%0100010011100000,r0
(1)  407/ 600039E : 1103                		mov	r0,@($C,r1)		; Transfer mode + DMA enable OFF
(1)  408/ 60003A0 : D13D                		mov	#_sysreg+comm12,r1	; Send signal
(1)  409/ 60003A2 : 6010                		mov.b	@r1,r0
(1)  410/ 60003A4 : CB40                		or	#%01000000,r0
(1)  411/ 60003A6 : 2100                		mov.b	r0,@r1
(1)  412/ 60003A8 : 000B                		rts
(1)  413/ 60003AA : 0009                		nop
(1)  414/ 60003AC :                     		align 4
(1)  415/ 60003AC :                     
(1)  416/ 60003AC :                     ; =================================================================
(1)  417/ 60003AC :                     ; ------------------------------------------------
(1)  418/ 60003AC :                     ; Master | PWM Interrupt
(1)  419/ 60003AC :                     ; ------------------------------------------------
(1)  420/ 60003AC :                     
(1)  421/ 60003AC :                     m_irq_pwm:
(1)  422/ 60003AC : 9188                		mov	#_FRT,r1
(1)  423/ 60003AE : 8417                		mov.b	@(7,r1),r0
(1)  424/ 60003B0 : CA02                		xor	#2,r0
(1)  425/ 60003B2 : 8017                		mov.b	r0,@(7,r1)
(1)  426/ 60003B4 : D139                		mov	#_sysreg+pwmintclr,r1
(1)  427/ 60003B6 : 2101                		mov.w	r0,@r1
(1)  428/ 60003B8 : 0009                		nop
(1)  429/ 60003BA : 0009                		nop
(1)  430/ 60003BC : 0009                		nop
(1)  431/ 60003BE : 0009                		nop
(1)  432/ 60003C0 : 000B                		rts
(1)  433/ 60003C2 : 0009                		nop
(1)  434/ 60003C4 :                     		align 4
(1)  435/ 60003C4 :                     
(1)  436/ 60003C4 :                     ; =================================================================
(1)  437/ 60003C4 :                     ; ------------------------------------------------
(1)  438/ 60003C4 :                     ; Master | CMD Interrupt
(1)  439/ 60003C4 :                     ; ------------------------------------------------
(1)  440/ 60003C4 :                     
(1)  441/ 60003C4 :                     m_irq_cmd:
(1)  442/ 60003C4 : 917C                		mov	#_FRT,r1
(1)  443/ 60003C6 : 8417                		mov.b	@(7,r1),r0
(1)  444/ 60003C8 : CA02                		xor	#2,r0
(1)  445/ 60003CA : 8017                		mov.b	r0,@(7,r1)
(1)  446/ 60003CC : D134                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  447/ 60003CE : 2101                		mov.w	r0,@r1
(1)  448/ 60003D0 : 2F26                		mov	r2,@-r15
(1)  449/ 60003D2 : 2F36                		mov	r3,@-r15
(1)  450/ 60003D4 : 2F46                		mov	r4,@-r15
(1)  451/ 60003D6 : D433                		mov	#_sysreg,r4		; r4 - sysreg base
(1)  452/ 60003D8 : E380                		mov	#_DMASOURCE0,r3		; r3 - DMA base register
(1)  453/ 60003DA : D22F                		mov	#_sysreg+comm12,r2	; r2 - comm to write the signal
(1)  454/ 60003DC : D132                		mov	#_sysreg+dreqfifo,r1	; r1 - Source point: DREQ FIFO
(1)  455/ 60003DE : 9070                		mov	#%0100010011100000,r0	; Transfer mode + DMA enable OFF
(1)  456/ 60003E0 : 1303                		mov	r0,@($C,r3)
(1)  457/ 60003E2 : C603                		mov	@(marsGbl_DmaWrite,gbr),r0
(1)  458/ 60003E4 : 1301                		mov	r0,@(4,r3)		; Destination
(1)  459/ 60003E6 : 8548                		mov.w	@(dreqlen,r4),r0	; NOTE: NO size check, be careful.
(1)  460/ 60003E8 : 600D                		extu.w	r0,r0
(1)  461/ 60003EA : 1302                		mov	r0,@(8,r3)		; Length (set by 68k)
(1)  462/ 60003EC : 2312                		mov	r1,@r3			; Source
(1)  463/ 60003EE : 9069                		mov	#%0100010011100101,r0	; Transfer mode + DMA enable + Use DMA interrupt
(1)  464/ 60003F0 : 1303                		mov	r0,@($C,r3)		; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  465/ 60003F2 : E001                		mov	#1,r0			; _DMAOPERATION = 1
(1)  466/ 60003F4 : 130C                		mov	r0,@($30,r3)
(1)  467/ 60003F6 : 6020                		mov.b	@r2,r0			; Set PASS bit to Genesis side.
(1)  468/ 60003F8 : CB40                		or	#%01000000,r0
(1)  469/ 60003FA : 2200                		mov.b	r0,@r2
(1)  470/ 60003FC : 64F6                		mov	@r15+,r4
(1)  471/ 60003FE : 63F6                		mov	@r15+,r3
(1)  472/ 6000400 : 62F6                		mov	@r15+,r2
(1)  473/ 6000402 : 0009                		nop
(1)  474/ 6000404 : 0009                		nop
(1)  475/ 6000406 : 0009                		nop
(1)  476/ 6000408 : 0009                		nop
(1)  477/ 600040A : 0009                		nop
(1)  478/ 600040C : 000B                		rts
(1)  479/ 600040E : 0009                		nop
(1)  480/ 6000410 :                     		align 4
(1)  481/ 6000410 :                     
(1)  482/ 6000410 :                     ; =================================================================
(1)  483/ 6000410 :                     ; ------------------------------------------------
(1)  484/ 6000410 :                     ; Master | HBlank
(1)  485/ 6000410 :                     ; ------------------------------------------------
(1)  486/ 6000410 :                     
(1)  487/ 6000410 :                     m_irq_h:
(1)  488/ 6000410 : 9156                		mov	#_FRT,r1
(1)  489/ 6000412 : 8417                		mov.b	@(7,r1),r0
(1)  490/ 6000414 : CA02                		xor	#2,r0
(1)  491/ 6000416 : 8017                		mov.b	r0,@(7,r1)
(1)  492/ 6000418 : D124                		mov	#_sysreg+hintclr,r1
(1)  493/ 600041A : 2101                		mov.w	r0,@r1
(1)  494/ 600041C : 0009                		nop
(1)  495/ 600041E : 0009                		nop
(1)  496/ 6000420 : 0009                		nop
(1)  497/ 6000422 : 0009                		nop
(1)  498/ 6000424 : 0009                		nop
(1)  499/ 6000426 : 000B                		rts
(1)  500/ 6000428 : 0009                		nop
(1)  501/ 600042A :                     		align 4
(1)  502/ 600042C :                     
(1)  503/ 600042C :                     ; =================================================================
(1)  504/ 600042C :                     ; ------------------------------------------------
(1)  505/ 600042C :                     ; Master | VBlank
(1)  506/ 600042C :                     ; ------------------------------------------------
(1)  507/ 600042C :                     
(1)  508/ 600042C :                     m_irq_v:
(1)  509/ 600042C : 9148                		mov	#_FRT,r1
(1)  510/ 600042E : 8417                		mov.b	@(7,r1),r0
(1)  511/ 6000430 : CA02                		xor	#2,r0
(1)  512/ 6000432 : 8017                		mov.b	r0,@(7,r1)
(1)  513/ 6000434 : D11E                		mov	#_sysreg+vintclr,r1
(1)  514/ 6000436 : 2101                		mov.w	r0,@r1
(1)  515/ 6000438 : 0009                		nop
(1)  516/ 600043A : 0009                		nop
(1)  517/ 600043C : 0009                		nop
(1)  518/ 600043E : 0009                		nop
(1)  519/ 6000440 : 0009                		nop
(1)  520/ 6000442 : 000B                		rts
(1)  521/ 6000444 : 0009                		nop
(1)  522/ 6000446 :                     		align 4
(1)  523/ 6000448 :                     
(1)  524/ 6000448 :                     ; =================================================================
(1)  525/ 6000448 :                     ; ------------------------------------------------
(1)  526/ 6000448 :                     ; Master | VRES Interrupt (RESET button)
(1)  527/ 6000448 :                     ; ------------------------------------------------
(1)  528/ 6000448 :                     
(1)  529/ 6000448 :                     m_irq_vres:
(1)  530/ 6000448 : D116                		mov	#_sysreg,r1
(1)  531/ 600044A : 60F3                		mov	r15,r0
(1)  532/ 600044C : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  533/ 600044E : E180                		mov	#_DMASOURCE0,r1		; Quickly cancel both DMA's
(1)  534/ 6000450 : E000                		mov	#0,r0
(1)  535/ 6000452 : 110C                		mov	r0,@($30,r1)
(1)  536/ 6000454 : 9035                		mov	#%0100010011100000,r0
(1)  537/ 6000456 : 1103                		mov	r0,@($C,r1)
(1)  538/ 6000458 : E190                		mov	#_DMASOURCE1,r1
(1)  539/ 600045A : E000                		mov	#0,r0
(1)  540/ 600045C : 110C                		mov	r0,@($30,r1)
(1)  541/ 600045E : 5013                		mov	@($C,r1),r0		; Dummy READ
(1)  542/ 6000460 : 902F                		mov	#%0100010011100000,r0
(1)  543/ 6000462 : 1103                		mov	r0,@($C,r1)
(1)  544/ 6000464 : D10F                		mov	#_sysreg,r1		; If RV was active, freeze.
(1)  545/ 6000466 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  546/ 6000468 : C801                		tst	#1,r0
(1)  547/ 600046A : 8B0F                		bf	.rv_busy
(1)  548/ 600046C : DF11                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  549/ 600046E : D012                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  550/ 6000470 : 2F02                		mov	r0,@r15
(1)  551/ 6000472 : 9028                		mov.w   #$F0,r0
(1)  552/ 6000474 : 1F01                		mov	r0,@(4,r15)
(1)  553/ 6000476 : D10B                		mov	#_sysreg,r1		; Report as OK to everyone
(1)  554/ 6000478 : D010                		mov	#"M_OK",r0
(1)  555/ 600047A : 1108                		mov	r0,@(comm0,r1)
(1)  556/ 600047C : 0009                		nop
(1)  557/ 600047E : 0009                		nop
(1)  558/ 6000480 : 0009                		nop
(1)  559/ 6000482 : 0009                		nop
(1)  560/ 6000484 : 0009                		nop
(1)  561/ 6000486 : 002B                		rte
(1)  562/ 6000488 : 0009                		nop
(1)  563/ 600048A :                     		align 4
(1)  564/ 600048C :                     .rv_busy:
(1)  565/ 600048C : 9118                		mov	#_FRT,r1
(1)  566/ 600048E : 8417                		mov.b	@(7,r1),r0
(1)  567/ 6000490 : CA02                		xor	#2,r0
(1)  568/ 6000492 : 8017                		mov.b	r0,@(7,r1)
(1)  569/ 6000494 : AFFE                		bra	*
(1)  570/ 6000496 : 0009                		nop
(1)  571/ 6000498 :                     		align 4
(1)  572/ 6000498 : 2000 402C 2000 401C 		ltorg
                    2000 401A 2000 4000 
                    2000 4012 2000 4018 
                    2000 4016 0603 FFF8 
                    0600 085E 4D5F 4F4B 
                    FE10 44E0 44E5 00F0 
(1)  573/ 60004C8 :                     
(1)  574/ 60004C8 :                     ; =================================================================
(1)  575/ 60004C8 :                     ; ------------------------------------------------
(1)  576/ 60004C8 :                     ; Slave | Unused Interrupt
(1)  577/ 60004C8 :                     ; ------------------------------------------------
(1)  578/ 60004C8 :                     
(1)  579/ 60004C8 :                     		align 4
(1)  580/ 60004C8 :                     s_irq_bad:
(1)  581/ 60004C8 : 000B                		rts
(1)  582/ 60004CA : 0009                		nop
(1)  583/ 60004CC :                     		align 4
(1)  584/ 60004CC :                     
(1)  585/ 60004CC :                     ; =================================================================
(1)  586/ 60004CC :                     ; ------------------------------------------------
(1)  587/ 60004CC :                     ; Slave | Watchdog
(1)  588/ 60004CC :                     ; ------------------------------------------------
(1)  589/ 60004CC :                     
(1)  590/ 60004CC :                     s_irq_wdg:
(1)  591/ 60004CC : 910A                		mov	#_FRT,r1
(1)  592/ 60004CE : 8417                		mov.b	@(7,r1),r0
(1)  593/ 60004D0 : CA02                		xor	#2,r0
(1)  594/ 60004D2 : 8017                		mov.b	r0,@(7,r1)
(1)  595/ 60004D4 : 000B                		rts
(1)  596/ 60004D6 : 0009                		nop
(1)  597/ 60004D8 :                     		align 4
(1)  598/ 60004D8 :                     
(1)  599/ 60004D8 :                     ; =================================================================
(1)  600/ 60004D8 :                     ; ------------------------------------------------
(1)  601/ 60004D8 :                     ; Slave | DMA Exit
(1)  602/ 60004D8 :                     ; ------------------------------------------------
(1)  603/ 60004D8 :                     
(1)  604/ 60004D8 :                     		align 4
(1)  605/ 60004D8 :                     s_irq_dma:
(1)  606/ 60004D8 : 9104                		mov	#_FRT,r1
(1)  607/ 60004DA : 8417                		mov.b	@(7,r1),r0
(1)  608/ 60004DC : CA02                		xor	#2,r0
(1)  609/ 60004DE : 8017                		mov.b	r0,@(7,r1)
(1)  610/ 60004E0 :                     
(1)  611/ 60004E0 :                     ; 		sts	pr,@-r15
(1)  612/ 60004E0 :                     ; 		mov	r0,@-r15
(1)  613/ 60004E0 :                     ; 		mov	r1,@-r15
(1)  614/ 60004E0 :                     ; 		mov	r2,@-r15
(1)  615/ 60004E0 :                     ; 		mov	r3,@-r15
(1)  616/ 60004E0 :                     ; 		mov	r4,@-r15
(1)  617/ 60004E0 :                     ; 		mov	r5,@-r15
(1)  618/ 60004E0 :                     ; 		mov	r6,@-r15
(1)  619/ 60004E0 :                     ; 		mov	r7,@-r15
(1)  620/ 60004E0 :                     ; 		mov	#MarsSound_DMA,r0
(1)  621/ 60004E0 :                     ; 		jsr	@r0
(1)  622/ 60004E0 :                     ; 		nop
(1)  623/ 60004E0 :                     ; 		mov	@r15+,r7
(1)  624/ 60004E0 :                     ; 		mov	@r15+,r6
(1)  625/ 60004E0 :                     ; 		mov	@r15+,r5
(1)  626/ 60004E0 :                     ; 		mov	@r15+,r4
(1)  627/ 60004E0 :                     ; 		mov	@r15+,r3
(1)  628/ 60004E0 :                     ; 		mov	@r15+,r2
(1)  629/ 60004E0 :                     ; 		mov	@r15+,r1
(1)  630/ 60004E0 :                     ; 		mov	@r15+,r0
(1)  631/ 60004E0 :                     ; 		lds	@r15+,pr
(1)  632/ 60004E0 : 000B                		rts
(1)  633/ 60004E2 : 0009                		nop
(1)  634/ 60004E4 :                     		align 4
(1)  635/ 60004E4 :                     
(1)  636/ 60004E4 :                     ; =================================================================
(1)  637/ 60004E4 :                     ; ------------------------------------------------
(1)  638/ 60004E4 :                     ; Slave | PWM Interrupt
(1)  639/ 60004E4 :                     ; ------------------------------------------------
(1)  640/ 60004E4 :                     
(1)  641/ 60004E4 :                     ; s_irq_pwm:
(1)  642/ 60004E4 :                     ; 		mov	#_FRT,r1
(1)  643/ 60004E4 :                     ; 		mov.b	@(7,r1),r0
(1)  644/ 60004E4 :                     ; 		xor	#2,r0
(1)  645/ 60004E4 :                     ; 		mov.b	r0,@(7,r1)
(1)  646/ 60004E4 :                     ; 		mov	#_sysreg+pwmintclr,r1	; Clear CMD flag
(1)  647/ 60004E4 :                     ; 		mov.w	r0,@r1
(1)  648/ 60004E4 :                     ; 		nop
(1)  649/ 60004E4 :                     ; 		nop
(1)  650/ 60004E4 :                     ; 		nop
(1)  651/ 60004E4 :                     ; 		nop
(1)  652/ 60004E4 :                     ; 		nop
(1)  653/ 60004E4 :                     ; 		rts
(1)  654/ 60004E4 :                     ; 		nop
(1)  655/ 60004E4 :                     ; 		align 4
(1)  656/ 60004E4 :                     ;
(1)  657/ 60004E4 : FE10                		ltorg	; Save literals
(1)  658/ 60004E6 :                     
(1)  659/ 60004E6 :                     ; =================================================================
(1)  660/ 60004E6 :                     ; ------------------------------------------------
(1)  661/ 60004E6 :                     ; Slave | CMD Interrupt
(1)  662/ 60004E6 :                     ; ------------------------------------------------
(1)  663/ 60004E6 :                     
(1)  664/ 60004E6 :                     		align 4
(1)  665/ 60004E8 :                     s_irq_cmd:
(1)  666/ 60004E8 : 91C4                		mov	#_FRT,r1
(1)  667/ 60004EA : 8417                		mov.b	@(7,r1),r0
(1)  668/ 60004EC : CA02                		xor	#2,r0
(1)  669/ 60004EE : 8017                		mov.b	r0,@(7,r1)
(1)  670/ 60004F0 : D15A                		mov	#_sysreg+cmdintclr,r1	; Clear CMD flag
(1)  671/ 60004F2 : 2101                		mov.w	r0,@r1
(1)  672/ 60004F4 :                     	; --------------------------------
(1)  673/ 60004F4 : 2F26                		mov	r2,@-r15
(1)  674/ 60004F6 : 2F36                		mov	r3,@-r15
(1)  675/ 60004F8 : 2F46                		mov	r4,@-r15
(1)  676/ 60004FA : 2F56                		mov	r5,@-r15
(1)  677/ 60004FC : 2F66                		mov	r6,@-r15
(1)  678/ 60004FE : 2F76                		mov	r7,@-r15
(1)  679/ 6000500 : 2F86                		mov	r8,@-r15
(1)  680/ 6000502 : D157                		mov	#_sysreg+comm14,r1
(1)  681/ 6000504 : 6010                		mov.b	@r1,r0
(1)  682/ 6000506 : C90F                		and	#%1111,r0
(1)  683/ 6000508 : 4008                		shll2	r0
(1)  684/ 600050A : 6103                		mov	r0,r1
(1)  685/ 600050C : C702                		mova	.scmd_tasks,r0
(1)  686/ 600050E : 301C                		add	r1,r0
(1)  687/ 6000510 : 6102                		mov	@r0,r1
(1)  688/ 6000512 : 412B                		jmp	@r1
(1)  689/ 6000514 : 0009                		nop
(1)  690/ 6000516 :                     		align 4
(1)  691/ 6000518 :                     
(1)  692/ 6000518 :                     ; --------------------------------
(1)  693/ 6000518 :                     
(1)  694/ 6000518 :                     .scmd_tasks:
(1)  695/ 6000518 : 0600 0534           		dc.l .scmd_task01	; <-- unused
(1)  696/ 600051C : 0600 0534           		dc.l .scmd_task01
(1)  697/ 6000520 : 0600 0530           		dc.l .scmd_task02
(1)  698/ 6000524 : 0600 052C           		dc.l .scmd_task03
(1)  699/ 6000528 :                     
(1)  700/ 6000528 :                     ; --------------------------------
(1)  701/ 6000528 :                     ; Task $00
(1)  702/ 6000528 :                     ; --------------------------------
(1)  703/ 6000528 :                     
(1)  704/ 6000528 :                     .scmd_task00:
(1)  705/ 6000528 : A08B                		bra	.exit_scmd
(1)  706/ 600052A : 0009                		nop
(1)  707/ 600052C :                     
(1)  708/ 600052C :                     ; --------------------------------
(1)  709/ 600052C :                     ; Task $03
(1)  710/ 600052C :                     ; --------------------------------
(1)  711/ 600052C :                     
(1)  712/ 600052C :                     .scmd_task03:
(1)  713/ 600052C : A089                		bra	.exit_scmd
(1)  714/ 600052E : 0009                		nop
(1)  715/ 6000530 :                     
(1)  716/ 6000530 :                     ; --------------------------------
(1)  717/ 6000530 :                     ; Task $02
(1)  718/ 6000530 :                     ; --------------------------------
(1)  719/ 6000530 :                     
(1)  720/ 6000530 :                     .scmd_task02:
(1)  721/ 6000530 : A087                		bra	.exit_scmd
(1)  722/ 6000532 : 0009                		nop
(1)  723/ 6000534 :                     
(1)  724/ 6000534 :                     ; --------------------------------
(1)  725/ 6000534 :                     ; Task $01
(1)  726/ 6000534 :                     ; --------------------------------
(1)  727/ 6000534 :                     
(1)  728/ 6000534 :                     .scmd_task01:
(1)  729/ 6000534 : D14B                		mov	#_sysreg+comm8,r1	; Input
(1)  730/ 6000536 : D24C                		mov	#RAM_Mars_PwmTable,r2	; Output
(1)  731/ 6000538 : D349                		mov	#_sysreg+comm14,r3	; comm
(1)  732/ 600053A : 0009                		nop
(1)  733/ 600053C :                     .wait_1:
(1)  734/ 600053C : 6030                		mov.b	@r3,r0
(1)  735/ 600053E : C9F0                		and	#%11110000,r0
(1)  736/ 6000540 : C880                		tst	#%10000000,r0		; LOCK exit?
(1)  737/ 6000542 : 8908                		bt	.exit_c
(1)  738/ 6000544 : C840                		tst	#%01000000,r0		; Wait PASS
(1)  739/ 6000546 : 89F9                		bt	.wait_1
(1)  740/ 6000548 :                     .copy_1:
(1)  741/ 6000548 : 6012                		mov	@r1,r0			; Copy entire LONG
(1)  742/ 600054A : 2202                		mov	r0,@r2
(1)  743/ 600054C : 7204                		add	#4,r2			; Increment table pos
(1)  744/ 600054E : 6030                		mov.b	@r3,r0
(1)  745/ 6000550 : C9BF                		and	#%10111111,r0
(1)  746/ 6000552 : AFF3                		bra	.wait_1
(1)  747/ 6000554 : 2300                		mov.b	r0,@r3			; Clear PASS bit, Z80 loops
(1)  748/ 6000556 :                     .exit_c:
(1)  749/ 6000556 :                     
(1)  750/ 6000556 :                     ; --------------------------------
(1)  751/ 6000556 :                     ; Process changes
(1)  752/ 6000556 :                     
(1)  753/ 6000556 :                     .proc_pwm:
(1)  754/ 6000556 : D845                		mov	#RAM_Mars_PwmTable,r8	; Input
(1)  755/ 6000558 : D745                		mov	#RAM_Mars_PwmList,r7	; Output
(1)  756/ 600055A : 968C                		mov	#MAX_PWMCHNL,r6
(1)  757/ 600055C :                     .next_chnl:
(1)  758/ 600055C : 6383                		mov	r8,r3			; r3 - current table column
(1)  759/ 600055E : 6030                		mov.b	@r3,r0			; r0: %kfo o-on f-off k-cut
(1)  760/ 6000560 : C91F                		and	#%00011111,r0
(1)  761/ 6000562 : 2008                		tst	r0,r0
(1)  762/ 6000564 : 8968                		bt	.no_chng
(1)  763/ 6000566 :                     .no_keycut:
(1)  764/ 6000566 : C802                		tst	#%010,r0
(1)  765/ 6000568 : 8B63                		bf	.is_keycut
(1)  766/ 600056A : C804                		tst	#%100,r0
(1)  767/ 600056C : 8B61                		bf	.is_keycut
(1)  768/ 600056E : C801                		tst	#%001,r0
(1)  769/ 6000570 : 8962                		bt	.no_chng
(1)  770/ 6000572 : C810                		tst	#%10000,r0
(1)  771/ 6000574 : 8910                		bt	.no_pitchbnd
(1)  772/ 6000576 :                     	; copypasted
(1)  773/ 6000576 : 5070                		mov	@(mchnsnd_enbl,r7),r0
(1)  774/ 6000578 : C880                		tst	#$80,r0
(1)  775/ 600057A : 895D                		bt	.no_chng
(1)  776/ 600057C :                     ; 		xor	r0,r0
(1)  777/ 600057C :                     ; 		mov	r0,@(mchnsnd_enbl,r7)
(1)  778/ 600057C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  779/ 600057E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  780/ 6000580 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  781/ 6000582 : C9FC                		and	#%11111100,r0
(1)  782/ 6000584 : 1707                		mov	r0,@(mchnsnd_vol,r7)
(1)  783/ 6000586 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  784/ 6000588 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  785/ 600058A : 611C                		extu.b	r1,r1
(1)  786/ 600058C : 6023                		mov	r2,r0
(1)  787/ 600058E : C903                		and	#%11,r0
(1)  788/ 6000590 : 4018                		shll8	r0
(1)  789/ 6000592 : 201B                		or	r1,r0
(1)  790/ 6000594 : A050                		bra	.no_chng
(1)  791/ 6000596 : 1706                		mov	r0,@(mchnsnd_pitch,r7)
(1)  792/ 6000598 :                     
(1)  793/ 6000598 :                     .no_pitchbnd:
(1)  794/ 6000598 : 200A                		xor	r0,r0
(1)  795/ 600059A : 1700                		mov	r0,@(mchnsnd_enbl,r7)
(1)  796/ 600059C : 1708                		mov	r0,@(mchnsnd_cread,r7)
(1)  797/ 600059E : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  798/ 60005A0 : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  799/ 60005A2 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  800/ 60005A4 : C9FC                		and	#%11111100,r0
(1)  801/ 60005A6 : 1707                		mov	r0,@(mchnsnd_vol,r7)
(1)  802/ 60005A8 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  803/ 60005AA : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  804/ 60005AC : 611C                		extu.b	r1,r1
(1)  805/ 60005AE : 6023                		mov	r2,r0
(1)  806/ 60005B0 : C903                		and	#%11,r0
(1)  807/ 60005B2 : 4018                		shll8	r0
(1)  808/ 60005B4 : 201B                		or	r1,r0
(1)  809/ 60005B6 : 1706                		mov	r0,@(mchnsnd_pitch,r7)
(1)  810/ 60005B8 : 7308                		add	#8,r3			; Next: Stereo/Loop/Left/Right | 32-bit**
(1)  811/ 60005BA : 6030                		mov.b	@r3,r0			; r0: %SLlraaaa
(1)  812/ 60005BC : 6103                		mov	r0,r1			; Save aaaa-address
(1)  813/ 60005BE : C9F0                		and	#%11110000,r0
(1)  814/ 60005C0 : 4009                		shlr2	r0
(1)  815/ 60005C2 : 4009                		shlr2	r0
(1)  816/ 60005C4 : CB80                		or	#$80,r0			; Set as Enabled
(1)  817/ 60005C6 : 6403                		mov	r0,r4
(1)  818/ 60005C8 : 6013                		mov	r1,r0
(1)  819/ 60005CA : C90F                		and	#%00001111,r0
(1)  820/ 60005CC : 4028                		shll16	r0
(1)  821/ 60005CE : 4018                		shll8	r0
(1)  822/ 60005D0 : 1701                		mov	r0,@(mchnsnd_bank,r7)
(1)  823/ 60005D2 : 6103                		mov	r0,r1			; r1 - BANK
(1)  824/ 60005D4 : 7308                		add	#8,r3			; Next: Pointer $xx0000
(1)  825/ 60005D6 : 6030                		mov.b	@r3,r0
(1)  826/ 60005D8 : 600C                		extu.b	r0,r0
(1)  827/ 60005DA : 4028                		shll16	r0
(1)  828/ 60005DC : 6203                		mov	r0,r2			; r2: $xx0000
(1)  829/ 60005DE : 7308                		add	#8,r3			; Next: Pointer $00xx00
(1)  830/ 60005E0 : 6030                		mov.b	@r3,r0
(1)  831/ 60005E2 : 600C                		extu.b	r0,r0
(1)  832/ 60005E4 : 4018                		shll8	r0
(1)  833/ 60005E6 : 220B                		or	r0,r2			; r2: $xxxx00
(1)  834/ 60005E8 : 7308                		add	#8,r3			; Next: Pointer $0000xx
(1)  835/ 60005EA : 6030                		mov.b	@r3,r0
(1)  836/ 60005EC : 600C                		extu.b	r0,r0
(1)  837/ 60005EE : 202B                		or	r2,r0			; r0: $00xxxxxx
(1)  838/ 60005F0 : 210B                		or	r0,r1
(1)  839/ 60005F2 :                     	; Read LEN and LOOP
(1)  840/ 60005F2 : 6014                		mov.b	@r1+,r0
(1)  841/ 60005F4 : 630C                		extu.b	r0,r3
(1)  842/ 60005F6 : 6214                		mov.b	@r1+,r2
(1)  843/ 60005F8 : 622C                		extu.b	r2,r2
(1)  844/ 60005FA : 4218                		shll8	r2
(1)  845/ 60005FC : 232B                		or	r2,r3
(1)  846/ 60005FE : 6214                		mov.b	@r1+,r2
(1)  847/ 6000600 : 622C                		extu.b	r2,r2
(1)  848/ 6000602 : 4228                		shll16	r2
(1)  849/ 6000604 : 232B                		or	r2,r3
(1)  850/ 6000606 : 6014                		mov.b	@r1+,r0
(1)  851/ 6000608 : 600C                		extu.b	r0,r0
(1)  852/ 600060A : 6214                		mov.b	@r1+,r2
(1)  853/ 600060C : 622C                		extu.b	r2,r2
(1)  854/ 600060E : 4218                		shll8	r2
(1)  855/ 6000610 : 202B                		or	r2,r0
(1)  856/ 6000612 : 6214                		mov.b	@r1+,r2
(1)  857/ 6000614 : 622C                		extu.b	r2,r2
(1)  858/ 6000616 : 4228                		shll16	r2
(1)  859/ 6000618 : 202B                		or	r2,r0
(1)  860/ 600061A : 4018                		shll8	r0
(1)  861/ 600061C : 1705                		mov	r0,@(mchnsnd_loop,r7)
(1)  862/ 600061E : 6013                		mov	r1,r0
(1)  863/ 6000620 : 4018                		shll8	r0
(1)  864/ 6000622 : 1702                		mov	r0,@(mchnsnd_start,r7)
(1)  865/ 6000624 : 1703                		mov	r0,@(mchnsnd_read,r7)
(1)  866/ 6000626 : 6013                		mov	r1,r0
(1)  867/ 6000628 : 303C                		add	r3,r0
(1)  868/ 600062A : 4018                		shll8	r0
(1)  869/ 600062C : 1704                		mov	r0,@(mchnsnd_len,r7)
(1)  870/ 600062E : A003                		bra	.no_chng
(1)  871/ 6000630 : 1740                		mov	r4,@(mchnsnd_enbl,r7)
(1)  872/ 6000632 :                     .is_keycut:
(1)  873/ 6000632 : 200A                		xor	r0,r0
(1)  874/ 6000634 : 1700                		mov	r0,@(mchnsnd_enbl,r7)
(1)  875/ 6000636 : 1708                		mov	r0,@(mchnsnd_cread,r7)
(1)  876/ 6000638 :                     .no_chng:
(1)  877/ 6000638 :                     ; 		add	#$40,r6
(1)  878/ 6000638 : 901E                		mov	#sizeof_marssnd,r0
(1)  879/ 600063A : 370C                		add	r0,r7
(1)  880/ 600063C : 4610                		dt	r6
(1)  881/ 600063E : 8F8D                		bf/s	.next_chnl
(1)  882/ 6000640 : 7801                		add	#1,r8
(1)  883/ 6000642 :                     .exit_scmd:
(1)  884/ 6000642 :                     	; --------------------------------
(1)  885/ 6000642 : D107                		mov	#_sysreg+comm14,r1	; Clear cmd number
(1)  886/ 6000644 : 200A                		xor	r0,r0
(1)  887/ 6000646 : 2100                		mov.b	r0,@r1
(1)  888/ 6000648 : 68F6                		mov	@r15+,r8
(1)  889/ 600064A : 67F6                		mov	@r15+,r7
(1)  890/ 600064C : 66F6                		mov	@r15+,r6
(1)  891/ 600064E : 65F6                		mov	@r15+,r5
(1)  892/ 6000650 : 64F6                		mov	@r15+,r4
(1)  893/ 6000652 : 63F6                		mov	@r15+,r3
(1)  894/ 6000654 : 62F6                		mov	@r15+,r2
(1)  895/ 6000656 : 000B                		rts
(1)  896/ 6000658 : 0009                		nop
(1)  897/ 600065A :                     		align 4
(1)  898/ 600065C : 2000 401A 2000 402E 		ltorg
                    2000 4028 2601 F4BC 
                    2601 F4BC 2601 F040 
                    FE10 0007 0024      
(1)  899/ 600067A :                     
(1)  900/ 600067A :                     ; =================================================================
(1)  901/ 600067A :                     ; ------------------------------------------------
(1)  902/ 600067A :                     ; Slave | HBlank
(1)  903/ 600067A :                     ; ------------------------------------------------
(1)  904/ 600067A :                     
(1)  905/ 600067A :                     s_irq_h:
(1)  906/ 600067A : 914B                		mov	#_FRT,r1
(1)  907/ 600067C : 8417                		mov.b	@(7,r1),r0
(1)  908/ 600067E : CA02                		xor	#2,r0
(1)  909/ 6000680 : 8017                		mov.b	r0,@(7,r1)
(1)  910/ 6000682 : D11E                		mov	#_sysreg+hintclr,r1
(1)  911/ 6000684 : 2101                		mov.w	r0,@r1
(1)  912/ 6000686 : 0009                		nop
(1)  913/ 6000688 : 0009                		nop
(1)  914/ 600068A : 0009                		nop
(1)  915/ 600068C : 0009                		nop
(1)  916/ 600068E : 0009                		nop
(1)  917/ 6000690 : 000B                		rts
(1)  918/ 6000692 : 0009                		nop
(1)  919/ 6000694 :                     		align 4
(1)  920/ 6000694 :                     
(1)  921/ 6000694 :                     ; =================================================================
(1)  922/ 6000694 :                     ; ------------------------------------------------
(1)  923/ 6000694 :                     ; Slave | VBlank
(1)  924/ 6000694 :                     ; ------------------------------------------------
(1)  925/ 6000694 :                     
(1)  926/ 6000694 :                     s_irq_v:
(1)  927/ 6000694 : 913E                		mov	#_FRT,r1
(1)  928/ 6000696 : 8417                		mov.b	@(7,r1),r0
(1)  929/ 6000698 : CA02                		xor	#2,r0
(1)  930/ 600069A : 8017                		mov.b	r0,@(7,r1)
(1)  931/ 600069C : D118                		mov	#_sysreg+vintclr,r1
(1)  932/ 600069E : 2101                		mov.w	r0,@r1
(1)  933/ 60006A0 : 0009                		nop
(1)  934/ 60006A2 : 0009                		nop
(1)  935/ 60006A4 : 0009                		nop
(1)  936/ 60006A6 : 0009                		nop
(1)  937/ 60006A8 : 0009                		nop
(1)  938/ 60006AA : 000B                		rts
(1)  939/ 60006AC : 0009                		nop
(1)  940/ 60006AE :                     		align 4
(1)  941/ 60006B0 :                     
(1)  942/ 60006B0 :                     ; =================================================================
(1)  943/ 60006B0 :                     ; ------------------------------------------------
(1)  944/ 60006B0 :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1)  945/ 60006B0 :                     ; ------------------------------------------------
(1)  946/ 60006B0 :                     
(1)  947/ 60006B0 :                     s_irq_vres:
(1)  948/ 60006B0 : D114                		mov	#_sysreg,r1
(1)  949/ 60006B2 : 60F3                		mov	r15,r0
(1)  950/ 60006B4 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  951/ 60006B6 : E180                		mov	#_DMASOURCE0,r1		; Quickly cancel both DMA's
(1)  952/ 60006B8 : E000                		mov	#0,r0
(1)  953/ 60006BA : 110C                		mov	r0,@($30,r1)
(1)  954/ 60006BC : 902B                		mov	#%0100010011100000,r0
(1)  955/ 60006BE : 1103                		mov	r0,@($C,r1)
(1)  956/ 60006C0 : E190                		mov	#_DMASOURCE1,r1
(1)  957/ 60006C2 : E000                		mov	#0,r0
(1)  958/ 60006C4 : 110C                		mov	r0,@($30,r1)
(1)  959/ 60006C6 : 9026                		mov	#%0100010011100000,r0
(1)  960/ 60006C8 : 1103                		mov	r0,@($C,r1)
(1)  961/ 60006CA : D10E                		mov	#_sysreg,r1		; If RV was active, freeze.
(1)  962/ 60006CC : 8513                		mov.w	@(dreqctl,r1),r0
(1)  963/ 60006CE : C801                		tst	#1,r0
(1)  964/ 60006D0 : 8B0E                		bf	.rv_busy
(1)  965/ 60006D2 : DF0D                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1)  966/ 60006D4 : D00D                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1)  967/ 60006D6 : 2F02                		mov	r0,@r15
(1)  968/ 60006D8 : 901E                		mov.w   #$F0,r0
(1)  969/ 60006DA : 1F01                		mov	r0,@(4,r15)
(1)  970/ 60006DC : D109                		mov	#_sysreg,r1
(1)  971/ 60006DE : D00C                		mov	#"S_OK",r0		; Report as OK to everyone
(1)  972/ 60006E0 : 1109                		mov	r0,@(comm4,r1)
(1)  973/ 60006E2 : 0009                		nop
(1)  974/ 60006E4 : 0009                		nop
(1)  975/ 60006E6 : 0009                		nop
(1)  976/ 60006E8 : 0009                		nop
(1)  977/ 60006EA : 0009                		nop
(1)  978/ 60006EC : 002B                		rte
(1)  979/ 60006EE : 0009                		nop
(1)  980/ 60006F0 :                     		align 4
(1)  981/ 60006F0 :                     .rv_busy:
(1)  982/ 60006F0 : 9110                		mov	#_FRT,r1
(1)  983/ 60006F2 : 8417                		mov.b	@(7,r1),r0
(1)  984/ 60006F4 : CA02                		xor	#2,r0
(1)  985/ 60006F6 : 8017                		mov.b	r0,@(7,r1)
(1)  986/ 60006F8 : AFFE                		bra	*
(1)  987/ 60006FA : 0009                		nop
(1)  988/ 60006FC :                     		align 4
(1)  989/ 60006FC :                     
(1)  990/ 60006FC : 2000 4018 2000 4016 		ltorg		; Save literals
                    2000 4000 0603 EFF8 
                    0600 09D0 535F 4F4B 
                    FE10 44E0 00F0      
(1)  991/ 600071A :                     
(1)  992/ 600071A :                     ; ====================================================================
(1)  993/ 600071A :                     ; ----------------------------------------------------------------
(1)  994/ 600071A :                     ; MARS System features
(1)  995/ 600071A :                     ; ----------------------------------------------------------------
(1)  996/ 600071A :                     
(1)  997/ 600071A :                     		align 4
(1)  998/ 600071C :                     		include "system/mars/video.asm"
(2)    1/ 600071C :                     ; ====================================================================
(2)    2/ 600071C :                     ; ----------------------------------------------------------------
(2)    3/ 600071C :                     ; 32X Video
(2)    4/ 600071C :                     ;
(2)    5/ 600071C :                     ; Some routines are located on the cache folder for
(2)    6/ 600071C :                     ; speed reasons.
(2)    7/ 600071C :                     ; ----------------------------------------------------------------
(2)    8/ 600071C :                     
(2)    9/ 600071C :                     ; --------------------------------------------------------
(2)   10/ 600071C :                     ; Settings
(2)   11/ 600071C :                     ; --------------------------------------------------------
(2)   12/ 600071C :                     
(2)   13/ 600071C :                     ; ; SDRAM
(2)   14/ 600071C :                     ; MAX_MSCRNBUFF	equ $2C000	; MAX SDRAM for each Screen mode
(2)   15/ 600071C :                     ; MAX_SSPRSPD	equ 8		; Supersprite box increment: Size+this (maximum Super Sprite speed)
(2)   16/ 600071C :                     ; MAX_FACES	equ 980		; MAX polygon faces for 3D models
(2)   17/ 600071C :                     ; MAX_SVDP_PZ	equ 980+96	; MAX polygon pieces to draw
(2)   18/ 600071C :                     ; MAX_ZDIST	equ -$1900	; Maximum 3D field distance (-Z)
(2)   19/ 600071C :                     
(2)   20/ 600071C :                     ; FRAMEBUFFER
(2)   21/ 600071C : =$1F800             FBVRAM_BLANK	equ $1F800	; Location of the BLANK line
(2)   22/ 600071C : =$1D000             FBVRAM_PATCH	equ $1D000	; Framebuffer location for the affected XShift lines
(2)   23/ 600071C :                     
(2)   24/ 600071C :                     ; --------------------------------------------------------
(2)   25/ 600071C :                     ; Variables
(2)   26/ 600071C :                     ; --------------------------------------------------------
(2)   27/ 600071C :                     
(2)   28/ 600071C :                     ; ; Variables for 3D mode.
(2)   29/ 600071C :                     ; SCREEN_WIDTH	equ 320		; Screen width and height positions used
(2)   30/ 600071C :                     ; SCREEN_HEIGHT	equ 224		; by 3D object rendering
(2)   31/ 600071C :                     ; PLGN_TEXURE	equ %10000000	; plypz_type (MSB)
(2)   32/ 600071C :                     ; PLGN_TRI	equ %01000000
(2)   33/ 600071C :                     
(2)   34/ 600071C :                     ; ; --------------------------------------------------------
(2)   35/ 600071C :                     ; ; Structs
(2)   36/ 600071C :                     ; ; --------------------------------------------------------
(2)   37/ 600071C :                     ;
(2)   38/ 600071C :                     ; 		struct 0
(2)   39/ 600071C :                     ; scrl_xpos_old	ds.l 1		; OLD Xpos position
(2)   40/ 600071C :                     ; scrl_ypos_old	ds.l 1		; OLD Ypos position
(2)   41/ 600071C :                     ; scrl_xset	ds.l 1		; Scroll X counter
(2)   42/ 600071C :                     ; scrl_yset	ds.l 1		; Scroll Y counter
(2)   43/ 600071C :                     ; scrl_blksize	ds.l 1		; Block size for scrolling
(2)   44/ 600071C :                     ; scrl_intrl_size	ds.l 1		; Internal scroll FULL size (scrl_intrl_w*scrl_intrl_h)
(2)   45/ 600071C :                     ; scrl_intrl_w	ds.l 1		; Internal scroll Width (MUST be larger than 320)
(2)   46/ 600071C :                     ; scrl_intrl_h	ds.l 1		; Internal scroll Height
(2)   47/ 600071C :                     ; scrl_fbpos_y	ds.l 1		; Screen's Y position
(2)   48/ 600071C :                     ; scrl_fbpos	ds.l 1		; Screen's TOP-LEFT position
(2)   49/ 600071C :                     ; scrl_fbdata	ds.l 1		; Screen data location on framebuffer
(2)   50/ 600071C :                     ; scrl_xpos	ds.l 1		; $0000.0000
(2)   51/ 600071C :                     ; scrl_ypos	ds.l 1		; $0000.0000
(2)   52/ 600071C :                     ; sizeof_mscrl	ds.l 0
(2)   53/ 600071C :                     ; 		endstruct
(2)   54/ 600071C :                     ;
(2)   55/ 600071C :                     ; 		struct 0
(2)   56/ 600071C :                     ; plypz_type	ds.l 1		; Type + Material settings (width + index add)
(2)   57/ 600071C :                     ; plypz_mtrl	ds.l 1		; Material data (ROM or SDRAM)
(2)   58/ 600071C :                     ; plypz_ytb	ds.l 1		; Ytop | Ybottom
(2)   59/ 600071C :                     ; plypz_xl	ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   60/ 600071C :                     ; plypz_src_xl	ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   61/ 600071C :                     ; plypz_src_yl	ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   62/ 600071C :                     ; plypz_xl_dx	ds.l 1		; 0000.0000
(2)   63/ 600071C :                     ; plypz_xr_dx	ds.l 1		; 0000.0000
(2)   64/ 600071C :                     ; plypz_src_xl_dx	ds.l 1
(2)   65/ 600071C :                     ; plypz_src_xr_dx	ds.l 1
(2)   66/ 600071C :                     ; plypz_src_yl_dx	ds.l 1
(2)   67/ 600071C :                     ; plypz_src_yr_dx	ds.l 1
(2)   68/ 600071C :                     ; sizeof_plypz	ds.l 0
(2)   69/ 600071C :                     ; 		endstruct
(2)   70/ 600071C :                     ;
(2)   71/ 600071C :                     ; ; Polygon data
(2)   72/ 600071C :                     ; ; Size: $38
(2)   73/ 600071C :                     ; 		struct 0
(2)   74/ 600071C :                     ; polygn_type	ds.l 1		; %MSww wwww aaaa aaaa | %MS w-Texture width, a-Pixel increment
(2)   75/ 600071C :                     ; polygn_mtrl	ds.l 1		; Material Type: Color (0-255) or Texture data address
(2)   76/ 600071C :                     ; polygn_points	ds.l 4*2	; X/Y positions
(2)   77/ 600071C :                     ; polygn_srcpnts	ds.w 4*2	; X/Y texture points 16-bit, Ignored on solid color.
(2)   78/ 600071C :                     ; sizeof_polygn	ds.l 0
(2)   79/ 600071C :                     ; 		endstruct
(2)   80/ 600071C :                     
(2)   81/ 600071C :                     ; ====================================================================
(2)   82/ 600071C :                     ; ----------------------------------------------------------------
(2)   83/ 600071C :                     ; Init MARS Video
(2)   84/ 600071C :                     ;
(2)   85/ 600071C :                     ; Breaks:
(2)   86/ 600071C :                     ; r1-r4
(2)   87/ 600071C :                     ; ----------------------------------------------------------------
(2)   88/ 600071C :                     
(2)   89/ 600071C :                     		align 4
(2)   90/ 600071C :                     MarsVideo_Init:
(2)   91/ 600071C : 4F22                		sts	pr,@-r15
(2)   92/ 600071E : D10F                		mov	#_sysreg,r1
(2)   93/ 6000720 : 9024                		mov 	#FM,r0			; Set SuperVDP permission for SH2
(2)   94/ 6000722 : 8010                  		mov.b	r0,@(adapter,r1)	; ** The Genesis side will control the
(2)   95/ 6000724 : D10E                		mov 	#_vdpreg,r1		; 256-color palette using DREQ **
(2)   96/ 6000726 : E000                		mov	#0,r0			; Start at BLANK
(2)   97/ 6000728 : 8011                		mov.b	r0,@(bitmapmd,r1)
(2)   98/ 600072A : D20E                		mov	#_framebuffer,r2	; Make default nametables
(2)   99/ 600072C : B006                		bsr	.def_fb
(2)  100/ 600072E : 0009                		nop
(2)  101/ 6000730 : B004                		bsr	.def_fb
(2)  102/ 6000732 : 0009                		nop
(2)  103/ 6000734 : 4F26                		lds	@r15+,pr
(2)  104/ 6000736 : 000B                		rts
(2)  105/ 6000738 : 0009                		nop
(2)  106/ 600073A :                     		align 4
(2)  107/ 600073C :                     .def_fb:
(2)  108/ 600073C : 6323                		mov	r2,r3
(2)  109/ 600073E : D00A                		mov	#FBVRAM_BLANK/2,r0	; The very last usable (blank) line.
(2)  110/ 6000740 : 9415                		mov	#240,r4
(2)  111/ 6000742 :                     .nxt_lne:
(2)  112/ 6000742 : 2301                		mov.w	r0,@r3
(2)  113/ 6000744 : 4410                		dt	r4
(2)  114/ 6000746 : 8FFC                		bf/s	.nxt_lne
(2)  115/ 6000748 : 7302                		add	#2,r3
(2)  116/ 600074A : 841B                		mov.b	@(framectl,r1),r0	; Frameswap request
(2)  117/ 600074C : CA01                		xor	#1,r0
(2)  118/ 600074E : 6303                		mov	r0,r3
(2)  119/ 6000750 : 801B                		mov.b	r0,@(framectl,r1)
(2)  120/ 6000752 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0	; And wait until it flips
(2)  121/ 6000754 : 3300                		cmp/eq	r0,r3
(2)  122/ 6000756 : 8BFC                		bf	.wait_frm
(2)  123/ 6000758 : 000B                		rts
(2)  124/ 600075A : 0009                		nop
(2)  125/ 600075C :                     		align 4
(2)  126/ 600075C : 2000 4000 2000 4100 		ltorg
                    2400 0000 0000 FC00 
                    0080 00F0           
(2)  127/ 6000770 :                     
(2)  128/ 6000770 :                     ; ====================================================================
(2)  129/ 6000770 :                     ; ----------------------------------------------------------------
(2)  130/ 6000770 :                     ; Subroutines
(2)  131/ 6000770 :                     ; ----------------------------------------------------------------
(2)  132/ 6000770 :                     
(2)  133/ 6000770 :                     ; ; --------------------------------------------------------
(2)  134/ 6000770 :                     ; ; VideoMars_ClearScreen
(2)  135/ 6000770 :                     ; ;
(2)  136/ 6000770 :                     ; ; Clears screen using VDPFILL
(2)  137/ 6000770 :                     ; ;
(2)  138/ 6000770 :                     ; ; Input:
(2)  139/ 6000770 :                     ; ; r1 | Framebuffer VRAM location
(2)  140/ 6000770 :                     ; ; r2 | Width/2
(2)  141/ 6000770 :                     ; ; r3 | Height
(2)  142/ 6000770 :                     ; ; r4 | Pixel(s) to write
(2)  143/ 6000770 :                     ; ;
(2)  144/ 6000770 :                     ; ; Uses:
(2)  145/ 6000770 :                     ; ; r5-r6
(2)  146/ 6000770 :                     ; ; --------------------------------------------------------
(2)  147/ 6000770 :                     ;
(2)  148/ 6000770 :                     ; ; TODO: Fix this.
(2)  149/ 6000770 :                     ;
(2)  150/ 6000770 :                     ; 		align 4
(2)  151/ 6000770 :                     ; MarsVideo_ClearScreen:
(2)  152/ 6000770 :                     ; 		shlr	r1
(2)  153/ 6000770 :                     ; 		mov	r1,r5
(2)  154/ 6000770 :                     ; 		mov	#_vdpreg,r6
(2)  155/ 6000770 :                     ; .fb_loop:
(2)  156/ 6000770 :                     ; 		mov	r2,r0
(2)  157/ 6000770 :                     ; 		mov.w	r0,@(filllength,r6)
(2)  158/ 6000770 :                     ; 		mov	r1,r0
(2)  159/ 6000770 :                     ; 		mov.w	r0,@(fillstart,r6)
(2)  160/ 6000770 :                     ; 		mov	r4,r0
(2)  161/ 6000770 :                     ; 		mov.w	r0,@(filldata,r6)
(2)  162/ 6000770 :                     ; .wait_fb2:	mov.w	@(vdpsts,r6),r0
(2)  163/ 6000770 :                     ; 		tst	#%10,r0
(2)  164/ 6000770 :                     ; 		bf	.wait_fb2
(2)  165/ 6000770 :                     ; 		dt	r3
(2)  166/ 6000770 :                     ; 		bf/s	.fb_loop
(2)  167/ 6000770 :                     ; 		add	r5,r1
(2)  168/ 6000770 :                     ; .no_redraw_2:
(2)  169/ 6000770 :                     ; 		rts
(2)  170/ 6000770 :                     ; 		nop
(2)  171/ 6000770 :                     ; 		align 4
(2)  172/ 6000770 :                     ;
(2)  173/ 6000770 :                     ; ; --------------------------------------------------------
(2)  174/ 6000770 :                     ; ; MarsVideo_ResetNameTbl
(2)  175/ 6000770 :                     ; ;
(2)  176/ 6000770 :                     ; ; Reset the nametable, points all lines into a blank
(2)  177/ 6000770 :                     ; ; line (FBVRAM_BLANK)
(2)  178/ 6000770 :                     ; ;
(2)  179/ 6000770 :                     ; ; Breaks:
(2)  180/ 6000770 :                     ; ; r1-r2
(2)  181/ 6000770 :                     ; ; --------------------------------------------------------
(2)  182/ 6000770 :                     ;
(2)  183/ 6000770 :                     ; MarsVideo_ResetNameTbl:
(2)  184/ 6000770 :                     ; 		mov	#_framebuffer,r1
(2)  185/ 6000770 :                     ; 		mov	#FBVRAM_BLANK,r0
(2)  186/ 6000770 :                     ; 		mov	#240,r2
(2)  187/ 6000770 :                     ; .nxt_lne2:
(2)  188/ 6000770 :                     ; 		mov.w	r0,@r1
(2)  189/ 6000770 :                     ; 		dt	r2
(2)  190/ 6000770 :                     ; 		bf/s	.nxt_lne2
(2)  191/ 6000770 :                     ; 		add	#2,r1
(2)  192/ 6000770 :                     ; 		rts
(2)  193/ 6000770 :                     ; 		nop
(2)  194/ 6000770 :                     ; 		align 4
(2)  195/ 6000770 :                     ;
(2)  196/ 6000770 :                     ; --------------------------------------------------------
(2)  197/ 6000770 :                     ; MarsVideo_MakeNameTbl
(2)  198/ 6000770 :                     ;
(2)  199/ 6000770 :                     ; Builds the nametable for a normal screen, if
(2)  200/ 6000770 :                     ; marsGbl_WaveEnable is set, it will add a
(2)  201/ 6000770 :                     ; wave effect to the linetable (in WORDS)
(2)  202/ 6000770 :                     ;
(2)  203/ 6000770 :                     ; Input:
(2)  204/ 6000770 :                     ; r1 | Framebuffer position
(2)  205/ 6000770 :                     ; r2 | Width (Width*2 for Direct color)
(2)  206/ 6000770 :                     ; r3 | Height
(2)  207/ 6000770 :                     ; r4 | Y line position
(2)  208/ 6000770 :                     ;
(2)  209/ 6000770 :                     ; Uses:
(2)  210/ 6000770 :                     ; r1-r11
(2)  211/ 6000770 :                     ; --------------------------------------------------------
(2)  212/ 6000770 :                     
(2)  213/ 6000770 :                     MarsVideo_MakeNameTbl:
(2)  214/ 6000770 : DA1E                		mov	#_framebuffer,r10
(2)  215/ 6000772 : 4400                		shll	r4
(2)  216/ 6000774 : 3A4C                		add	r4,r10
(2)  217/ 6000776 : D51E                		mov 	#_vdpreg,r5
(2)  218/ 6000778 : 8451                		mov.b	@(bitmapmd,r5),r0
(2)  219/ 600077A : C903                		and	#%11,r0
(2)  220/ 600077C : 8803                		cmp/eq	#3,r0			; Don't mess with the RLE lines.
(2)  221/ 600077E : 8906                		bt	.cant_use
(2)  222/ 6000780 :                     ; 		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  223/ 6000780 :                     ; 		tst	r0,r0
(2)  224/ 6000780 :                     ; 		bt	.linetbl_normal
(2)  225/ 6000780 :                     ;
(2)  226/ 6000780 :                     ; 	; Special linetable with
(2)  227/ 6000780 :                     ; 	; wave deformation.
(2)  228/ 6000780 :                     ; 		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  229/ 6000780 :                     ; 		mov	r0,r4
(2)  230/ 6000780 :                     ; 		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  231/ 6000780 :                     ; 		mov	#$7FF,r5
(2)  232/ 6000780 :                     ; 		add	r4,r0			; wave speed
(2)  233/ 6000780 :                     ; 		and	r5,r0
(2)  234/ 6000780 :                     ; 		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  235/ 6000780 :                     ; 		mov	r0,r7
(2)  236/ 6000780 :                     ; 		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  237/ 6000780 :                     ; 		mov	r0,r5
(2)  238/ 6000780 :                     ; 		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  239/ 6000780 :                     ; 		mov	r0,r4
(2)  240/ 6000780 :                     ; 		mov	#0,r6
(2)  241/ 6000780 :                     ; 		mov	#$7FF,r11
(2)  242/ 6000780 :                     ; 		mov	#sin_table,r12
(2)  243/ 6000780 :                     ; .nxt_lne:
(2)  244/ 6000780 :                     ; 		mov	r7,r0
(2)  245/ 6000780 :                     ; 		add	r4,r7			; wave distord
(2)  246/ 6000780 :                     ; 		and	r11,r7
(2)  247/ 6000780 :                     ; 		shll2	r0
(2)  248/ 6000780 :                     ; 		mov	@(r0,r12),r9
(2)  249/ 6000780 :                     ; 		dmuls	r5,r9
(2)  250/ 6000780 :                     ; 		sts	macl,r9
(2)  251/ 6000780 :                     ; 		shlr16	r9
(2)  252/ 6000780 :                     ; 		exts.w	r9,r9
(2)  253/ 6000780 :                     ; 		mov	r1,r0
(2)  254/ 6000780 :                     ; 		add	r6,r0
(2)  255/ 6000780 :                     ; 		add	r9,r0
(2)  256/ 6000780 :                     ; 		shlr	r0
(2)  257/ 6000780 :                     ; 		mov.w	r0,@r10
(2)  258/ 6000780 :                     ; 		add	r2,r6
(2)  259/ 6000780 :                     ; 		dt	r3
(2)  260/ 6000780 :                     ; 		bf/s	.nxt_lne
(2)  261/ 6000780 :                     ; 		add	#2,r10
(2)  262/ 6000780 :                     ; 		rts
(2)  263/ 6000780 :                     ; 		nop
(2)  264/ 6000780 :                     ; 		align 4
(2)  265/ 6000780 :                     
(2)  266/ 6000780 :                     .linetbl_normal:
(2)  267/ 6000780 : 4101                		shlr	r1
(2)  268/ 6000782 : 4201                		shlr	r2
(2)  269/ 6000784 :                     .nxt_lne2:
(2)  270/ 6000784 : 2A11                		mov.w	r1,@r10
(2)  271/ 6000786 : 312C                		add	r2,r1
(2)  272/ 6000788 : 4310                		dt	r3
(2)  273/ 600078A : 8FFB                		bf/s	.nxt_lne2
(2)  274/ 600078C : 7A02                		add	#2,r10
(2)  275/ 600078E :                     .cant_use:
(2)  276/ 600078E : 000B                		rts
(2)  277/ 6000790 : 0009                		nop
(2)  278/ 6000792 :                     		align 4
(2)  279/ 6000794 :                     
(2)  280/ 6000794 :                     ; --------------------------------------------------------
(2)  281/ 6000794 :                     ; MarsVideo_FixTblShift
(2)  282/ 6000794 :                     ;
(2)  283/ 6000794 :                     ; Fix the affected $xxFF lines by scrolling using the
(2)  284/ 6000794 :                     ; linetable. MUST call this BEFORE flipping
(2)  285/ 6000794 :                     ; the Framebuffer.
(2)  286/ 6000794 :                     ;
(2)  287/ 6000794 :                     ; Input:
(2)  288/ 6000794 :                     ; r1 | Start line
(2)  289/ 6000794 :                     ; r2 | Number of lines
(2)  290/ 6000794 :                     ; r3 | Location for the fixed lines
(2)  291/ 6000794 :                     ;
(2)  292/ 6000794 :                     ; Break:
(2)  293/ 6000794 :                     ; r7-r14
(2)  294/ 6000794 :                     ; --------------------------------------------------------
(2)  295/ 6000794 :                     
(2)  296/ 6000794 :                     MarsVideo_FixTblShift:
(2)  297/ 6000794 : DE16                		mov	#_vdpreg,r14
(2)  298/ 6000796 : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  299/ 6000798 : C903                		and	#%11,r0
(2)  300/ 600079A : 8801                		cmp/eq	#1,r0
(2)  301/ 600079C : 8B23                		bf	.ptchset
(2)  302/ 600079E : C500                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set?
(2)  303/ 60007A0 : C901                		and	#1,r0
(2)  304/ 60007A2 : 2008                		tst	r0,r0
(2)  305/ 60007A4 : 891F                		bt	.ptchset
(2)  306/ 60007A6 :                     
(2)  307/ 60007A6 : DE11                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  308/ 60007A8 : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  309/ 60007AA : 3C3C                		add	r3,r12
(2)  310/ 60007AC : 6013                		mov	r1,r0
(2)  311/ 60007AE : 4008                		shll2	r0
(2)  312/ 60007B0 : 3E0C                		add	r0,r14
(2)  313/ 60007B2 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  314/ 60007B4 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  315/ 60007B6 : E0FF                		mov	#-1,r0
(2)  316/ 60007B8 : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  317/ 60007BA : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  318/ 60007BC :                     .loop:
(2)  319/ 60007BC : 60D1                		mov.w	@r13,r0
(2)  320/ 60007BE : 2099                		and	r9,r0
(2)  321/ 60007C0 : 6703                		mov	r0,r7
(2)  322/ 60007C2 : 20A9                		and	r10,r0
(2)  323/ 60007C4 : 30A0                		cmp/eq	r10,r0
(2)  324/ 60007C6 : 8B0B                		bf	.tblexit
(2)  325/ 60007C8 : 4700                		shll	r7
(2)  326/ 60007CA : 37EC                		add	r14,r7
(2)  327/ 60007CC : 60C3                		mov	r12,r0
(2)  328/ 60007CE : 4001                		shlr	r0
(2)  329/ 60007D0 : 2D01                		mov.w	r0,@r13
(2)  330/ 60007D2 : 930F                		mov	#(320+4)/2,r3
(2)  331/ 60007D4 :                     .copy:
(2)  332/ 60007D4 : 6071                		mov.w	@r7,r0
(2)  333/ 60007D6 : 2C01                		mov.w	r0,@r12
(2)  334/ 60007D8 : 7702                		add	#2,r7
(2)  335/ 60007DA : 4310                		dt	r3
(2)  336/ 60007DC : 8FFA                		bf/s	.copy
(2)  337/ 60007DE : 7C02                		add	#2,r12
(2)  338/ 60007E0 :                     .tblexit:
(2)  339/ 60007E0 : 4B10                		dt	r11
(2)  340/ 60007E2 : 8FEB                		bf/s	.loop
(2)  341/ 60007E4 : 7D02                		add	#2,r13
(2)  342/ 60007E6 :                     .ptchset:
(2)  343/ 60007E6 : 000B                		rts
(2)  344/ 60007E8 : 0009                		nop
(2)  345/ 60007EA :                     		align 4
(2)  346/ 60007EC : 2400 0000 2000 4100 		ltorg
                    00A2                
(2)  347/ 60007F6 :                     
(2)  348/ 60007F6 :                     ; ; ====================================================================
(2)  349/ 60007F6 :                     ; ; ----------------------------------------------------------------
(2)  350/ 60007F6 :                     ; ; 2D Section
(2)  351/ 60007F6 :                     ; ;
(2)  352/ 60007F6 :                     ; ; Routines that write to the framebuffer are
(2)  353/ 60007F6 :                     ; ; located at cache_m_2D.asm
(2)  354/ 60007F6 :                     ; ; ----------------------------------------------------------------
(2)  355/ 60007F6 :                     ;
(2)  356/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  357/ 60007F6 :                     ; ; MarsVideo_MkScrlField
(2)  358/ 60007F6 :                     ; ;
(2)  359/ 60007F6 :                     ; ; This builds a new internal scrolling background
(2)  360/ 60007F6 :                     ; ;
(2)  361/ 60007F6 :                     ; ; Input:
(2)  362/ 60007F6 :                     ; ; r1 | Background buffer to initialize
(2)  363/ 60007F6 :                     ; ; r2 | Framebuffer VRAM position
(2)  364/ 60007F6 :                     ; ; r3 | Scroll Width (320 or large)
(2)  365/ 60007F6 :                     ; ; r4 | Scroll Height
(2)  366/ 60007F6 :                     ; ; r5 | Scroll block size (4 pixels minimum)
(2)  367/ 60007F6 :                     ; ; r6 | X start
(2)  368/ 60007F6 :                     ; ; r7 | Y start
(2)  369/ 60007F6 :                     ; ;
(2)  370/ 60007F6 :                     ; ; NOTE:
(2)  371/ 60007F6 :                     ; ; At the very last scrollable line: The next 320
(2)  372/ 60007F6 :                     ; ; pixels will be visible until that line resets
(2)  373/ 60007F6 :                     ; ; into 0 again.
(2)  374/ 60007F6 :                     ; ; When you write pixels in in the range of 0-320,
(2)  375/ 60007F6 :                     ; ; write the same pixels at the very end of
(2)  376/ 60007F6 :                     ; ; the scrolling area (add width*height)
(2)  377/ 60007F6 :                     ; ;
(2)  378/ 60007F6 :                     ; ; Breaks:
(2)  379/ 60007F6 :                     ; ; r3-r5,macl
(2)  380/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  381/ 60007F6 :                     ;
(2)  382/ 60007F6 :                     ; 		align 4
(2)  383/ 60007F6 :                     ; MarsVideo_MkScrlField:
(2)  384/ 60007F6 :                     ; 		mov	#sizeof_mscrl,r0
(2)  385/ 60007F6 :                     ; 		mulu	r0,r1
(2)  386/ 60007F6 :                     ; 		sts	macl,r1
(2)  387/ 60007F6 :                     ; 		mov	#RAM_Mars_ScrlBuff,r0
(2)  388/ 60007F6 :                     ; 		add	r0,r1
(2)  389/ 60007F6 :                     ;
(2)  390/ 60007F6 :                     ; 		mov	r5,@(scrl_blksize,r1)
(2)  391/ 60007F6 :                     ; 		add	r5,r3	; add "block"
(2)  392/ 60007F6 :                     ; 		mov	r2,@(scrl_fbdata,r1)
(2)  393/ 60007F6 :                     ; 		add	r5,r4
(2)  394/ 60007F6 :                     ; 		mov	r3,@(scrl_intrl_w,r1)
(2)  395/ 60007F6 :                     ; 		mulu	r3,r4
(2)  396/ 60007F6 :                     ; 		mov	r4,@(scrl_intrl_h,r1)
(2)  397/ 60007F6 :                     ; 		sts	macl,r0
(2)  398/ 60007F6 :                     ; 		mov	r0,@(scrl_intrl_size,r1)
(2)  399/ 60007F6 :                     ; 		xor	r0,r0
(2)  400/ 60007F6 :                     ; 		mov	r0,@(scrl_xpos_old,r1)
(2)  401/ 60007F6 :                     ; 		mov	r0,@(scrl_ypos_old,r1)
(2)  402/ 60007F6 :                     ; 		mov	r0,@(scrl_fbpos,r1)
(2)  403/ 60007F6 :                     ; 		mov	r0,@(scrl_fbpos_y,r1)
(2)  404/ 60007F6 :                     ; 		mov	r0,@(scrl_xset,r1)
(2)  405/ 60007F6 :                     ; 		mov	r0,@(scrl_yset,r1)
(2)  406/ 60007F6 :                     ; 		rts
(2)  407/ 60007F6 :                     ; 		nop
(2)  408/ 60007F6 :                     ; 		align 4
(2)  409/ 60007F6 :                     ;
(2)  410/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  411/ 60007F6 :                     ; ; MarsVideo_ShowScrlBg
(2)  412/ 60007F6 :                     ; ;
(2)  413/ 60007F6 :                     ; ; Make a visible section of any scrolling area
(2)  414/ 60007F6 :                     ; ; into the current framebuffer.
(2)  415/ 60007F6 :                     ; ;
(2)  416/ 60007F6 :                     ; ; Input:
(2)  417/ 60007F6 :                     ; ; r1 | Background buffer
(2)  418/ 60007F6 :                     ; ; r2 | Top Y
(2)  419/ 60007F6 :                     ; ; r3 | Bottom Y
(2)  420/ 60007F6 :                     ; ;
(2)  421/ 60007F6 :                     ; ; Breaks:
(2)  422/ 60007F6 :                     ; ; r4-r14
(2)  423/ 60007F6 :                     ; ;
(2)  424/ 60007F6 :                     ; ; NOTE:
(2)  425/ 60007F6 :                     ; ; After finishing all your screens call
(2)  426/ 60007F6 :                     ; ; MarsVideo_FixTblShift before doing frameswap
(2)  427/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  428/ 60007F6 :                     ;
(2)  429/ 60007F6 :                     ; 		align 4
(2)  430/ 60007F6 :                     ; MarsVideo_ShowScrlBg:
(2)  431/ 60007F6 :                     ; 		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  432/ 60007F6 :                     ; 		mov	#0,r11				; r11 - line counter
(2)  433/ 60007F6 :                     ; 		mov	@(scrl_fbdata,r1),r13		; r13 - Framebuffer pixeldata position
(2)  434/ 60007F6 :                     ; 		mov	r2,r6
(2)  435/ 60007F6 :                     ; 		mov	@(scrl_intrl_size,r1),r12	; r12 - Full size of screen-scroll
(2)  436/ 60007F6 :                     ; 		mov	r2,r0
(2)  437/ 60007F6 :                     ; 		mov	@(scrl_intrl_w,r1),r10		; r10 - Next line to add
(2)  438/ 60007F6 :                     ; 		shll	r0
(2)  439/ 60007F6 :                     ; 		mov	@(scrl_fbpos,r1),r7
(2)  440/ 60007F6 :                     ; 		add	r0,r14
(2)  441/ 60007F6 :                     ; 		mov	@(scrl_fbpos_y,r1),r0
(2)  442/ 60007F6 :                     ; 		mulu	r10,r0
(2)  443/ 60007F6 :                     ; 		sts	macl,r0
(2)  444/ 60007F6 :                     ; 		add	r0,r7
(2)  445/ 60007F6 :                     ; 		mov.w	@(marsGbl_WaveEnable,gbr),r0
(2)  446/ 60007F6 :                     ; 		tst	r0,r0
(2)  447/ 60007F6 :                     ; 		bf	.ln_wavy
(2)  448/ 60007F6 :                     ; .ln_loop:
(2)  449/ 60007F6 :                     ; 		mov	r7,r8
(2)  450/ 60007F6 :                     ; 		cmp/ge	r12,r8
(2)  451/ 60007F6 :                     ; 		bf	.xl_r
(2)  452/ 60007F6 :                     ; 		sub	r12,r8
(2)  453/ 60007F6 :                     ; .xl_r:
(2)  454/ 60007F6 :                     ; 		cmp/pz	r8
(2)  455/ 60007F6 :                     ; 		bt	.xl_l
(2)  456/ 60007F6 :                     ; 		add	r12,r8
(2)  457/ 60007F6 :                     ; .xl_l:
(2)  458/ 60007F6 :                     ; 		mov	r8,r7
(2)  459/ 60007F6 :                     ; 		add	r10,r7			; Add Y
(2)  460/ 60007F6 :                     ; 		add	r13,r8			; Add Framebuffer position
(2)  461/ 60007F6 :                     ; 		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  462/ 60007F6 :                     ; 		mov.w	r8,@r14			; Send to FB's table
(2)  463/ 60007F6 :                     ; 		add	#2,r14
(2)  464/ 60007F6 :                     ; 		add	#2,r11
(2)  465/ 60007F6 :                     ; 		cmp/eq	r3,r6
(2)  466/ 60007F6 :                     ; 		bf/s	.ln_loop
(2)  467/ 60007F6 :                     ; 		add	#1,r6
(2)  468/ 60007F6 :                     ; 		rts
(2)  469/ 60007F6 :                     ; 		nop
(2)  470/ 60007F6 :                     ; 		align 4
(2)  471/ 60007F6 :                     ; .ln_wavy:
(2)  472/ 60007F6 :                     ; 		mov.w	@(marsGbl_WaveSpd,gbr),r0
(2)  473/ 60007F6 :                     ; 		mov	r0,r4
(2)  474/ 60007F6 :                     ; 		mov.w	@(marsGbl_WaveTan,gbr),r0
(2)  475/ 60007F6 :                     ; 		mov	#$7FF,r5
(2)  476/ 60007F6 :                     ; 		add	r4,r0			; wave speed
(2)  477/ 60007F6 :                     ; 		and	r5,r0
(2)  478/ 60007F6 :                     ; 		mov.w	r0,@(marsGbl_WaveTan,gbr)
(2)  479/ 60007F6 :                     ; 		mov	r0,r9
(2)  480/ 60007F6 :                     ; 		mov.w	@(marsGbl_WaveMax,gbr),r0
(2)  481/ 60007F6 :                     ; 		mov	r0,r5
(2)  482/ 60007F6 :                     ; 		mov.w	@(marsGbl_WaveDeform,gbr),r0
(2)  483/ 60007F6 :                     ; 		mov	r0,r4
(2)  484/ 60007F6 :                     ; .ln_loop_w:
(2)  485/ 60007F6 :                     ; 		mov	#$7FF,r8
(2)  486/ 60007F6 :                     ; 		mov	r9,r0
(2)  487/ 60007F6 :                     ; 		add	r4,r9		; wave distord
(2)  488/ 60007F6 :                     ; 		and	r8,r9
(2)  489/ 60007F6 :                     ; 		shll2	r0
(2)  490/ 60007F6 :                     ; 		mov	#sin_table,r8
(2)  491/ 60007F6 :                     ; 		mov	@(r0,r8),r0
(2)  492/ 60007F6 :                     ; 		dmuls	r5,r0
(2)  493/ 60007F6 :                     ; 		sts	macl,r0
(2)  494/ 60007F6 :                     ; 		shlr16	r0
(2)  495/ 60007F6 :                     ; 		exts.w	r0,r0
(2)  496/ 60007F6 :                     ; 		mov	r7,r8
(2)  497/ 60007F6 :                     ; 		cmp/ge	r12,r8
(2)  498/ 60007F6 :                     ; 		bf	.wxl_r
(2)  499/ 60007F6 :                     ; 		sub	r12,r8
(2)  500/ 60007F6 :                     ; .wxl_r:
(2)  501/ 60007F6 :                     ; 		cmp/pz	r8
(2)  502/ 60007F6 :                     ; 		bt	.wxl_l
(2)  503/ 60007F6 :                     ; 		add	r12,r8
(2)  504/ 60007F6 :                     ; .wxl_l:
(2)  505/ 60007F6 :                     ; 		mov	r8,r7
(2)  506/ 60007F6 :                     ; 		add	r10,r7		; Add Y
(2)  507/ 60007F6 :                     ; 		add	r13,r8		; Add Framebuffer position
(2)  508/ 60007F6 :                     ; 		add	r0,r8
(2)  509/ 60007F6 :                     ; 		shlr	r8		; divide by 2 (shift reg does the missing bit 0)
(2)  510/ 60007F6 :                     ; 		mov.w	r8,@r14		; send to FB's table
(2)  511/ 60007F6 :                     ; 		add	#2,r14
(2)  512/ 60007F6 :                     ; 		add	#2,r11
(2)  513/ 60007F6 :                     ; 		cmp/eq	r3,r6
(2)  514/ 60007F6 :                     ; 		bf/s	.ln_loop_w
(2)  515/ 60007F6 :                     ; 		add	#1,r6
(2)  516/ 60007F6 :                     ; 		rts
(2)  517/ 60007F6 :                     ; 		nop
(2)  518/ 60007F6 :                     ; 		align 4
(2)  519/ 60007F6 :                     ; .no_lines:
(2)  520/ 60007F6 :                     ; 		rts
(2)  521/ 60007F6 :                     ; 		nop
(2)  522/ 60007F6 :                     ; 		align 4
(2)  523/ 60007F6 :                     ; 		ltorg
(2)  524/ 60007F6 :                     ;
(2)  525/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  526/ 60007F6 :                     ; ; MarsVideo_Bg_UpdPos
(2)  527/ 60007F6 :                     ; ;
(2)  528/ 60007F6 :                     ; ; Moves the scrolling area using X/Y values from
(2)  529/ 60007F6 :                     ; ; the Genesis side.
(2)  530/ 60007F6 :                     ; ;
(2)  531/ 60007F6 :                     ; ; Input:
(2)  532/ 60007F6 :                     ; ; r14 | Genesis background buffer
(2)  533/ 60007F6 :                     ; ; r13 | Scrolling-area buffer
(2)  534/ 60007F6 :                     ; ;
(2)  535/ 60007F6 :                     ; ; Breaks:
(2)  536/ 60007F6 :                     ; ; ALL
(2)  537/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  538/ 60007F6 :                     ;
(2)  539/ 60007F6 :                     ; 		align 4
(2)  540/ 60007F6 :                     ; MarsVideo_Bg_UpdPos:
(2)  541/ 60007F6 :                     ; 		mov	#0,r1
(2)  542/ 60007F6 :                     ; 		mov	#0,r2
(2)  543/ 60007F6 :                     ; 		mov	@(scrl_xpos,r13),r0		; 0000.0000
(2)  544/ 60007F6 :                     ; 		shlr16	r0				; **
(2)  545/ 60007F6 :                     ; 		mov.w	r0,@(marsGbl_XShift,gbr)	; ** Grab missing bit for xshift
(2)  546/ 60007F6 :                     ; 		exts.w	r0,r0
(2)  547/ 60007F6 :                     ; 		mov	r0,r3
(2)  548/ 60007F6 :                     ; 		mov	@(scrl_xpos_old,r13),r0
(2)  549/ 60007F6 :                     ; 		cmp/eq	r0,r3
(2)  550/ 60007F6 :                     ; 		bt	.xequ
(2)  551/ 60007F6 :                     ; 		mov	r3,r1
(2)  552/ 60007F6 :                     ; 		sub	r0,r1
(2)  553/ 60007F6 :                     ; .xequ:
(2)  554/ 60007F6 :                     ; 		mov	r3,r0
(2)  555/ 60007F6 :                     ; 		mov	r0,@(scrl_xpos_old,r13)
(2)  556/ 60007F6 :                     ; 		mov	@(scrl_ypos,r13),r0	; 0000.0000
(2)  557/ 60007F6 :                     ; 		shlr16	r0
(2)  558/ 60007F6 :                     ; 		exts.w	r0,r0
(2)  559/ 60007F6 :                     ; 		mov	r0,r3
(2)  560/ 60007F6 :                     ; 		mov	@(scrl_ypos_old,r13),r0
(2)  561/ 60007F6 :                     ; 		cmp/eq	r0,r3
(2)  562/ 60007F6 :                     ; 		bt	.yequ
(2)  563/ 60007F6 :                     ; 		mov	r3,r2
(2)  564/ 60007F6 :                     ; 		sub	r0,r2
(2)  565/ 60007F6 :                     ; .yequ:
(2)  566/ 60007F6 :                     ; 		mov	r3,r0
(2)  567/ 60007F6 :                     ; 		mov	r0,@(scrl_ypos_old,r13)
(2)  568/ 60007F6 :                     ; 		exts.w	r1,r1			; r1 - X increment
(2)  569/ 60007F6 :                     ; 		exts.w	r2,r2			; r2 - Y increment
(2)  570/ 60007F6 :                     ;
(2)  571/ 60007F6 :                     ; 	; ---------------------------------------
(2)  572/ 60007F6 :                     ; 	; Increment Y pos (REAL)
(2)  573/ 60007F6 :                     ; 	; ---------------------------------------
(2)  574/ 60007F6 :                     ;
(2)  575/ 60007F6 :                     ; 		mov	@(scrl_fbpos_y,r13),r4
(2)  576/ 60007F6 :                     ; 		add	r2,r4
(2)  577/ 60007F6 :                     ; 		mov	@(scrl_intrl_h,r13),r3
(2)  578/ 60007F6 :                     ; 		cmp/pl	r2
(2)  579/ 60007F6 :                     ; 		bf	.ypu_negtv
(2)  580/ 60007F6 :                     ; 		cmp/ge	r3,r4
(2)  581/ 60007F6 :                     ; 		bf	.ypu_negtv
(2)  582/ 60007F6 :                     ; 		sub	r3,r4
(2)  583/ 60007F6 :                     ; .ypu_negtv:
(2)  584/ 60007F6 :                     ; 		cmp/pz	r2
(2)  585/ 60007F6 :                     ; 		bt	.ypu_postv
(2)  586/ 60007F6 :                     ; 		cmp/pz	r4
(2)  587/ 60007F6 :                     ; 		bt	.ypu_postv
(2)  588/ 60007F6 :                     ; 		add	r3,r4
(2)  589/ 60007F6 :                     ; .ypu_postv:
(2)  590/ 60007F6 :                     ; 		mov	r4,@(scrl_fbpos_y,r13)
(2)  591/ 60007F6 :                     ;
(2)  592/ 60007F6 :                     ; 	; ---------------------------------------
(2)  593/ 60007F6 :                     ; 	; Update Framebuffer top-left position
(2)  594/ 60007F6 :                     ; 	; ---------------------------------------
(2)  595/ 60007F6 :                     ;
(2)  596/ 60007F6 :                     ; 		mov	@(scrl_intrl_size,r13),r3
(2)  597/ 60007F6 :                     ; 		mov	@(scrl_fbpos,r13),r0
(2)  598/ 60007F6 :                     ; 		add	r1,r0
(2)  599/ 60007F6 :                     ; 		cmp/pl	r1
(2)  600/ 60007F6 :                     ; 		bf	.yx_negtv
(2)  601/ 60007F6 :                     ; 		cmp/ge	r3,r0
(2)  602/ 60007F6 :                     ; 		bf	.yx_negtv
(2)  603/ 60007F6 :                     ; 		sub	r3,r0
(2)  604/ 60007F6 :                     ; .yx_negtv:
(2)  605/ 60007F6 :                     ; 		cmp/pz	r1
(2)  606/ 60007F6 :                     ; 		bt	.yx_postv
(2)  607/ 60007F6 :                     ; 		cmp/pz	r0
(2)  608/ 60007F6 :                     ; 		bt	.yx_postv
(2)  609/ 60007F6 :                     ; 		add	r3,r0
(2)  610/ 60007F6 :                     ; .yx_postv:
(2)  611/ 60007F6 :                     ; 		mov	r0,@(scrl_fbpos,r13)
(2)  612/ 60007F6 :                     ; 		rts
(2)  613/ 60007F6 :                     ; 		nop
(2)  614/ 60007F6 :                     ; 		align 4
(2)  615/ 60007F6 :                     ;
(2)  616/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  617/ 60007F6 :                     ; ; MarsVideo_Bg_MdReq
(2)  618/ 60007F6 :                     ; ;
(2)  619/ 60007F6 :                     ; ; Input:
(2)  620/ 60007F6 :                     ; ;  r1 | X increment
(2)  621/ 60007F6 :                     ; ;  r2 | Y increment
(2)  622/ 60007F6 :                     ; ; r14 | Genesis background buffer
(2)  623/ 60007F6 :                     ; ; r13 | Scrolling-area buffer
(2)  624/ 60007F6 :                     ; ;
(2)  625/ 60007F6 :                     ; ; Breaks:
(2)  626/ 60007F6 :                     ; ; ALL
(2)  627/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  628/ 60007F6 :                     ;
(2)  629/ 60007F6 :                     ; 		align 4
(2)  630/ 60007F6 :                     ; MarsVideo_Bg_DrawReq:
(2)  631/ 60007F6 :                     ; ; 		sts	pr,@-r15
(2)  632/ 60007F6 :                     ;
(2)  633/ 60007F6 :                     ; ; 	; ---------------------------------------
(2)  634/ 60007F6 :                     ; ; 	; Set block update timers
(2)  635/ 60007F6 :                     ; ; 	; ---------------------------------------
(2)  636/ 60007F6 :                     ; ;
(2)  637/ 60007F6 :                     ; ; 	; X timers
(2)  638/ 60007F6 :                     ; ; 		mov	#2,r7
(2)  639/ 60007F6 :                     ; ; 		xor	r6,r6
(2)  640/ 60007F6 :                     ; ; 		mov	#Cach_DrawTimers,r8
(2)  641/ 60007F6 :                     ; ; 		mov.b	@(md_bg_flags,r14),r0
(2)  642/ 60007F6 :                     ; ; 		extu.b	r0,r0
(2)  643/ 60007F6 :                     ; ; 		and	#%1111,r0
(2)  644/ 60007F6 :                     ; ; 		tst	#%0001,r0		; bitDrwR
(2)  645/ 60007F6 :                     ; ; 		bf	.x_r
(2)  646/ 60007F6 :                     ; ; 		tst	#%0010,r0		; bitDrwL
(2)  647/ 60007F6 :                     ; ; 		bt	.x_k
(2)  648/ 60007F6 :                     ; ; 		mov	r6,@r8
(2)  649/ 60007F6 :                     ; ; 		mov	r7,@(4,r8)
(2)  650/ 60007F6 :                     ; ; 		bra	.x_k
(2)  651/ 60007F6 :                     ; ; 		nop
(2)  652/ 60007F6 :                     ; ; .x_r:
(2)  653/ 60007F6 :                     ; ; 		mov	r7,@r8
(2)  654/ 60007F6 :                     ; ; 		mov	r6,@(4,r8)
(2)  655/ 60007F6 :                     ; ; .x_k:
(2)  656/ 60007F6 :                     ; ; 		add	#8,r8
(2)  657/ 60007F6 :                     ; ;
(2)  658/ 60007F6 :                     ; ; 	; Y timers
(2)  659/ 60007F6 :                     ; ; 		tst	#%0100,r0		; bitDrwD
(2)  660/ 60007F6 :                     ; ; 		bf	.y_r
(2)  661/ 60007F6 :                     ; ; 		tst	#%1000,r0		; bitDrwU
(2)  662/ 60007F6 :                     ; ; 		bt	.y_k
(2)  663/ 60007F6 :                     ; ; 		mov	r6,@r8
(2)  664/ 60007F6 :                     ; ; 		mov	r7,@(4,r8)
(2)  665/ 60007F6 :                     ; ; 		bra	.y_k
(2)  666/ 60007F6 :                     ; ; 		nop
(2)  667/ 60007F6 :                     ; ; .y_r:
(2)  668/ 60007F6 :                     ; ; 		mov	r7,@r8
(2)  669/ 60007F6 :                     ; ; 		mov	r6,@(4,r8)
(2)  670/ 60007F6 :                     ; ; .y_k:
(2)  671/ 60007F6 :                     ; ; 		rts
(2)  672/ 60007F6 :                     ; ; 		nop
(2)  673/ 60007F6 :                     ; ; 		align 4
(2)  674/ 60007F6 :                     ;
(2)  675/ 60007F6 :                     ; ; 	; ---------------------------------------
(2)  676/ 60007F6 :                     ; ; 	; Set block update timers
(2)  677/ 60007F6 :                     ; ; 	; ---------------------------------------
(2)  678/ 60007F6 :                     ; ;
(2)  679/ 60007F6 :                     ; 	; X timers
(2)  680/ 60007F6 :                     ; 		mov	#2,r7
(2)  681/ 60007F6 :                     ; 		mov	#Cach_DrawTimers,r8
(2)  682/ 60007F6 :                     ; 		mov	r8,r5
(2)  683/ 60007F6 :                     ; 		mov	@(scrl_blksize,r13),r6
(2)  684/ 60007F6 :                     ; 		mov	r6,r4
(2)  685/ 60007F6 :                     ; 		dt	r4
(2)  686/ 60007F6 :                     ; 		neg	r6,r6
(2)  687/ 60007F6 :                     ; 		mov	@(scrl_xset,r13),r3
(2)  688/ 60007F6 :                     ; 		add	r1,r3
(2)  689/ 60007F6 :                     ; 		mov	r3,r0
(2)  690/ 60007F6 :                     ; 		and	r6,r0
(2)  691/ 60007F6 :                     ; 		tst	r0,r0
(2)  692/ 60007F6 :                     ; 		bt	.x_k
(2)  693/ 60007F6 :                     ; 		cmp/pz	r1
(2)  694/ 60007F6 :                     ; 		bt	.x_r
(2)  695/ 60007F6 :                     ; 		add	#4,r5
(2)  696/ 60007F6 :                     ; .x_r:
(2)  697/ 60007F6 :                     ; 		mov	r7,@r5
(2)  698/ 60007F6 :                     ; 		and	r4,r3
(2)  699/ 60007F6 :                     ; .x_k:
(2)  700/ 60007F6 :                     ; 		mov	r3,@(scrl_xset,r13)
(2)  701/ 60007F6 :                     ;
(2)  702/ 60007F6 :                     ; 	; Y timers
(2)  703/ 60007F6 :                     ; 		add	#8,r8
(2)  704/ 60007F6 :                     ; 		mov	@(scrl_yset,r13),r3
(2)  705/ 60007F6 :                     ; 		add	r2,r3
(2)  706/ 60007F6 :                     ; 		mov	r3,r0
(2)  707/ 60007F6 :                     ; 		and	r6,r0
(2)  708/ 60007F6 :                     ; 		tst	r0,r0
(2)  709/ 60007F6 :                     ; 		bt	.y_k
(2)  710/ 60007F6 :                     ; 		cmp/pz	r2
(2)  711/ 60007F6 :                     ; 		bt	.y_r
(2)  712/ 60007F6 :                     ; 		add	#4,r8
(2)  713/ 60007F6 :                     ; .y_r:
(2)  714/ 60007F6 :                     ; 		mov	r7,@r8
(2)  715/ 60007F6 :                     ; 		and	r4,r3
(2)  716/ 60007F6 :                     ; .y_k:
(2)  717/ 60007F6 :                     ; 		mov	r3,@(scrl_yset,r13)
(2)  718/ 60007F6 :                     ;
(2)  719/ 60007F6 :                     ; 		rts
(2)  720/ 60007F6 :                     ; 		nop
(2)  721/ 60007F6 :                     ; 		align 4
(2)  722/ 60007F6 :                     ;
(2)  723/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  724/ 60007F6 :                     ; ; MarsVideo_DmaDraw
(2)  725/ 60007F6 :                     ; ;
(2)  726/ 60007F6 :                     ; ; Input:
(2)  727/ 60007F6 :                     ; ; r1 - Source
(2)  728/ 60007F6 :                     ; ; r2 - Destination
(2)  729/ 60007F6 :                     ; ; r3 - Size / 4
(2)  730/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  731/ 60007F6 :                     ;
(2)  732/ 60007F6 :                     ; 		align 4
(2)  733/ 60007F6 :                     ; MarsVideo_DmaDraw:
(2)  734/ 60007F6 :                     ; 		mov	#_DMASOURCE1,r4
(2)  735/ 60007F6 :                     ; 		mov	#%0101101011100000,r0
(2)  736/ 60007F6 :                     ; 		mov	r0,@($0C,r4)
(2)  737/ 60007F6 :                     ; 		mov	r1,r0
(2)  738/ 60007F6 :                     ; 		mov	r0,@r4
(2)  739/ 60007F6 :                     ; 		mov	r2,r0			; <-- point fbdata here
(2)  740/ 60007F6 :                     ; 		mov	r0,@($04,r4)
(2)  741/ 60007F6 :                     ; 		mov	r3,r0
(2)  742/ 60007F6 :                     ; 		mov	r0,@($08,r4)
(2)  743/ 60007F6 :                     ; 		mov	#%0101101011100001,r0
(2)  744/ 60007F6 :                     ; 		mov	r0,@($0C,r4)
(2)  745/ 60007F6 :                     ; .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  746/ 60007F6 :                     ; 		tst	#%10,r0
(2)  747/ 60007F6 :                     ; 		bt	.wait_dma
(2)  748/ 60007F6 :                     ; 		mov	#%0101101011100000,r0
(2)  749/ 60007F6 :                     ; 		mov	r0,@($C,r4)
(2)  750/ 60007F6 :                     ; 		rts
(2)  751/ 60007F6 :                     ; 		nop
(2)  752/ 60007F6 :                     ; 		align 4
(2)  753/ 60007F6 :                     ; 		ltorg
(2)  754/ 60007F6 :                     ;
(2)  755/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  756/ 60007F6 :                     ; ; MarsVideo_Bg_DrawScrl
(2)  757/ 60007F6 :                     ; ;
(2)  758/ 60007F6 :                     ; ; Input:
(2)  759/ 60007F6 :                     ; ; r14 | Background buffer
(2)  760/ 60007F6 :                     ; ; r13 | Scrolling-area buffer
(2)  761/ 60007F6 :                     ; ; r12 | Draw timers
(2)  762/ 60007F6 :                     ; ;
(2)  763/ 60007F6 :                     ; ; Breaks:
(2)  764/ 60007F6 :                     ; ; ALL
(2)  765/ 60007F6 :                     ; ; --------------------------------------------------------
(2)  766/ 60007F6 :                     ;
(2)  767/ 60007F6 :                     ; 		align 4
(2)  768/ 60007F6 :                     ; MarsVideo_Bg_DrawScrl:
(2)  769/ 60007F6 :                     ; 		sts	pr,@-r15
(2)  770/ 60007F6 :                     ;
(2)  771/ 60007F6 :                     ; 		mov	#_framebuffer,r0
(2)  772/ 60007F6 :                     ; 		mov	@(scrl_fbdata,r13),r1
(2)  773/ 60007F6 :                     ; 		add	r0,r1
(2)  774/ 60007F6 :                     ; 		mov	@(scrl_intrl_w,r13),r11		; r11 - FB width
(2)  775/ 60007F6 :                     ; 		lds	r1,mach				; mach - FB base
(2)  776/ 60007F6 :                     ; 		mov	@(scrl_fbpos_y,r13),r0
(2)  777/ 60007F6 :                     ; 		mov	#-$10,r1			; <-- CUSTOM BLOCK SIZE
(2)  778/ 60007F6 :                     ; 		mov	@(scrl_fbpos,r13),r10		; r10 - FB x/y pos
(2)  779/ 60007F6 :                     ; 		and	r1,r0
(2)  780/ 60007F6 :                     ; 		mov	@(md_bg_blk,r14),r9		; r9 - Block data
(2)  781/ 60007F6 :                     ; 		mulu	r0,r11
(2)  782/ 60007F6 :                     ; 		mov.w	@(md_bg_w,r14),r0		; r7 - Layout increment
(2)  783/ 60007F6 :                     ; 		extu.w	r0,r7
(2)  784/ 60007F6 :                     ; 		mov	@(scrl_intrl_size,r13),r12	; r12 - FB full size
(2)  785/ 60007F6 :                     ; 		sts	macl,r0
(2)  786/ 60007F6 :                     ; 		add	r0,r10
(2)  787/ 60007F6 :                     ; 		and	r1,r10
(2)  788/ 60007F6 :                     ; 		mov	@(md_bg_low,r14),r8		; r8 - Layout data
(2)  789/ 60007F6 :                     ; 		mov	#RAM_Mars_ScrlData,r13
(2)  790/ 60007F6 :                     ; 		cmp/ge	r12,r10
(2)  791/ 60007F6 :                     ; 		bf	.fb_y
(2)  792/ 60007F6 :                     ; 		sub	r12,r10
(2)  793/ 60007F6 :                     ; .fb_y:
(2)  794/ 60007F6 :                     ; 		mov	#Cach_DrawTimers,r1
(2)  795/ 60007F6 :                     ; 		mov	@r1,r0
(2)  796/ 60007F6 :                     ; 		tst	r0,r0
(2)  797/ 60007F6 :                     ; 		bt	.no_r
(2)  798/ 60007F6 :                     ; 		bsr	.draw_r
(2)  799/ 60007F6 :                     ; 		nop
(2)  800/ 60007F6 :                     ; .no_r:
(2)  801/ 60007F6 :                     ; 		mov	#Cach_DrawTimers+4,r1
(2)  802/ 60007F6 :                     ; 		mov	@r1,r0
(2)  803/ 60007F6 :                     ; 		tst	r0,r0
(2)  804/ 60007F6 :                     ; 		bt	.no_l
(2)  805/ 60007F6 :                     ; 		bsr	.draw_l
(2)  806/ 60007F6 :                     ; 		nop
(2)  807/ 60007F6 :                     ; .no_l:
(2)  808/ 60007F6 :                     ; 		mov	#Cach_DrawTimers+8,r1
(2)  809/ 60007F6 :                     ; 		mov	@r1,r0
(2)  810/ 60007F6 :                     ; 		tst	r0,r0
(2)  811/ 60007F6 :                     ; 		bt	.no_d
(2)  812/ 60007F6 :                     ; 		bsr	.draw_d
(2)  813/ 60007F6 :                     ; 		nop
(2)  814/ 60007F6 :                     ; .no_d:
(2)  815/ 60007F6 :                     ; 		mov	#Cach_DrawTimers+$C,r1
(2)  816/ 60007F6 :                     ; 		mov	@r1,r0
(2)  817/ 60007F6 :                     ; 		tst	r0,r0
(2)  818/ 60007F6 :                     ; 		bt	.no_u
(2)  819/ 60007F6 :                     ; 		bsr	.draw_u
(2)  820/ 60007F6 :                     ; 		nop
(2)  821/ 60007F6 :                     ; .no_u:
(2)  822/ 60007F6 :                     ;
(2)  823/ 60007F6 :                     ; 		lds	@r15+,pr
(2)  824/ 60007F6 :                     ; 		rts
(2)  825/ 60007F6 :                     ; 		nop
(2)  826/ 60007F6 :                     ;
(2)  827/ 60007F6 :                     ; ; mach - FB base
(2)  828/ 60007F6 :                     ; ; r13 - Background copy
(2)  829/ 60007F6 :                     ; ; r12 - FB full size
(2)  830/ 60007F6 :                     ; ; r11 - FB width
(2)  831/ 60007F6 :                     ; ; r10 - FB x/y pos
(2)  832/ 60007F6 :                     ; ; r9 - Block data
(2)  833/ 60007F6 :                     ; ; r8 - Layout data
(2)  834/ 60007F6 :                     ; ; r7 - Layout increment
(2)  835/ 60007F6 :                     ;
(2)  836/ 60007F6 :                     ; ; RIGHT/LEFT
(2)  837/ 60007F6 :                     ; .draw_r:
(2)  838/ 60007F6 :                     ; 		dt	r0
(2)  839/ 60007F6 :                     ; 		mov	r0,@r1
(2)  840/ 60007F6 :                     ; 		mov.w	@(md_bg_xinc_r,r14),r0		; r7 - Layout increment
(2)  841/ 60007F6 :                     ; 		exts.w	r0,r2
(2)  842/ 60007F6 :                     ; 		mov	#320,r1
(2)  843/ 60007F6 :                     ; 		bra	.go_lr
(2)  844/ 60007F6 :                     ; 		nop
(2)  845/ 60007F6 :                     ; .draw_l:
(2)  846/ 60007F6 :                     ; 		dt	r0
(2)  847/ 60007F6 :                     ; 		mov	r0,@r1
(2)  848/ 60007F6 :                     ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2)  849/ 60007F6 :                     ; 		exts.w	r0,r2
(2)  850/ 60007F6 :                     ; 		mov	#0,r1
(2)  851/ 60007F6 :                     ; .go_lr:
(2)  852/ 60007F6 :                     ; 		mov	r10,r6
(2)  853/ 60007F6 :                     ; 		add	r1,r6
(2)  854/ 60007F6 :                     ; ; 		mov	#-$10,r0
(2)  855/ 60007F6 :                     ; ; 		and	r0,r6		; r6 - curr out pos
(2)  856/ 60007F6 :                     ; 		mov	r8,@-r15
(2)  857/ 60007F6 :                     ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2)  858/ 60007F6 :                     ; 		exts.w	r0,r1
(2)  859/ 60007F6 :                     ; 		mov	#16,r3		; <-- MANUAL BLOCK SIZE
(2)  860/ 60007F6 :                     ; 		mulu	r3,r1
(2)  861/ 60007F6 :                     ; 		sts	macl,r0
(2)  862/ 60007F6 :                     ; 		shlr8	r0
(2)  863/ 60007F6 :                     ; 		mulu	r7,r0
(2)  864/ 60007F6 :                     ; 		sts	macl,r0
(2)  865/ 60007F6 :                     ; 		add	r0,r8
(2)  866/ 60007F6 :                     ; 		mulu	r3,r2
(2)  867/ 60007F6 :                     ; 		sts	macl,r0
(2)  868/ 60007F6 :                     ; 		shlr8	r0
(2)  869/ 60007F6 :                     ; 		add	r0,r8
(2)  870/ 60007F6 :                     ; 		mov	#((224+16)/16),r1
(2)  871/ 60007F6 :                     ; .y_blk:
(2)  872/ 60007F6 :                     ; 		mov	r1,@-r15
(2)  873/ 60007F6 :                     ; 		mov	r9,r5
(2)  874/ 60007F6 :                     ; 		mov.b	@r8,r0
(2)  875/ 60007F6 :                     ; 		extu.b	r0,r0		; BYTE
(2)  876/ 60007F6 :                     ; 		mov	#16*16,r3
(2)  877/ 60007F6 :                     ; 		mulu	r3,r0
(2)  878/ 60007F6 :                     ; 		sts	macl,r0
(2)  879/ 60007F6 :                     ; 		mov	r9,r5
(2)  880/ 60007F6 :                     ; 		add	r0,r5
(2)  881/ 60007F6 :                     ;
(2)  882/ 60007F6 :                     ; 		mov	#16,r3
(2)  883/ 60007F6 :                     ; .y_lne:
(2)  884/ 60007F6 :                     ; 		cmp/ge	r12,r6
(2)  885/ 60007F6 :                     ; 		bf	.y_res
(2)  886/ 60007F6 :                     ; 		sub	r12,r6
(2)  887/ 60007F6 :                     ; .y_res:
(2)  888/ 60007F6 :                     ; 		mov	#16/4,r4
(2)  889/ 60007F6 :                     ; .x_lne:
(2)  890/ 60007F6 :                     ; 		mov	@r5+,r0
(2)  891/ 60007F6 :                     ; 		lds	r0,macl
(2)  892/ 60007F6 :                     ; 		sts	mach,r1
(2)  893/ 60007F6 :                     ; 		add	r6,r1
(2)  894/ 60007F6 :                     ; 		mov	r13,r2
(2)  895/ 60007F6 :                     ; 		add	r6,r2
(2)  896/ 60007F6 :                     ; 		mov	r0,@r1
(2)  897/ 60007F6 :                     ; 		add	#4,r6
(2)  898/ 60007F6 :                     ; 		mov	r0,@r2
(2)  899/ 60007F6 :                     ; 		mov	#320,r0
(2)  900/ 60007F6 :                     ; 		cmp/ge	r0,r6
(2)  901/ 60007F6 :                     ; 		bt	.x_ex
(2)  902/ 60007F6 :                     ; 		sts	macl,r0
(2)  903/ 60007F6 :                     ; 		add	r12,r1
(2)  904/ 60007F6 :                     ; 		mov	r0,@r1
(2)  905/ 60007F6 :                     ; 		add	r12,r2
(2)  906/ 60007F6 :                     ; 		mov	r0,@r2
(2)  907/ 60007F6 :                     ; 		nop
(2)  908/ 60007F6 :                     ; .x_ex:
(2)  909/ 60007F6 :                     ; 		dt	r4
(2)  910/ 60007F6 :                     ; 		bf	.x_lne
(2)  911/ 60007F6 :                     ; 		add	#-16,r6	; bring point back
(2)  912/ 60007F6 :                     ; 		dt	r3
(2)  913/ 60007F6 :                     ; 		bf/s	.y_lne
(2)  914/ 60007F6 :                     ; 		add	r11,r6
(2)  915/ 60007F6 :                     ; 		mov	@r15+,r1
(2)  916/ 60007F6 :                     ; 		dt	r1
(2)  917/ 60007F6 :                     ; 		bf/s	.y_blk
(2)  918/ 60007F6 :                     ; 		add	r7,r8
(2)  919/ 60007F6 :                     ; 		mov	@r15+,r8
(2)  920/ 60007F6 :                     ; 		rts
(2)  921/ 60007F6 :                     ; 		nop
(2)  922/ 60007F6 :                     ;
(2)  923/ 60007F6 :                     ; ; DOWN/UP
(2)  924/ 60007F6 :                     ; .draw_d:
(2)  925/ 60007F6 :                     ; 		dt	r0
(2)  926/ 60007F6 :                     ; 		mov	r0,@r1
(2)  927/ 60007F6 :                     ; 		mov.w	@(md_bg_yinc_d,r14),r0		; r7 - Layout increment
(2)  928/ 60007F6 :                     ; 		exts.w	r0,r2
(2)  929/ 60007F6 :                     ; 		mov	#224,r1
(2)  930/ 60007F6 :                     ; 		bra	.go_du
(2)  931/ 60007F6 :                     ; 		nop
(2)  932/ 60007F6 :                     ; .draw_u:
(2)  933/ 60007F6 :                     ; 		dt	r0
(2)  934/ 60007F6 :                     ; 		mov	r0,@r1
(2)  935/ 60007F6 :                     ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2)  936/ 60007F6 :                     ; 		exts.w	r0,r2
(2)  937/ 60007F6 :                     ; 		mov	#0,r1
(2)  938/ 60007F6 :                     ; .go_du:
(2)  939/ 60007F6 :                     ; 		mov	#CS3|$40,r3
(2)  940/ 60007F6 :                     ; 		mov	r2,@r3
(2)  941/ 60007F6 :                     ;
(2)  942/ 60007F6 :                     ; 		mulu	r1,r11
(2)  943/ 60007F6 :                     ; 		sts	macl,r0
(2)  944/ 60007F6 :                     ; 		mov	r10,r6
(2)  945/ 60007F6 :                     ; 		add	r0,r6
(2)  946/ 60007F6 :                     ; ; 		mov	#-$10,r0
(2)  947/ 60007F6 :                     ; ; 		and	r0,r6				; r6 - curr out pos
(2)  948/ 60007F6 :                     ; 		mov	r8,@-r15
(2)  949/ 60007F6 :                     ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2)  950/ 60007F6 :                     ; 		exts.w	r0,r1
(2)  951/ 60007F6 :                     ; 		mov	#16,r3				; <-- MANUAL BLOCK SIZE
(2)  952/ 60007F6 :                     ; 		mulu	r3,r1
(2)  953/ 60007F6 :                     ; 		sts	macl,r0
(2)  954/ 60007F6 :                     ; 		shlr8	r0
(2)  955/ 60007F6 :                     ; 		add	r0,r8
(2)  956/ 60007F6 :                     ; 		mulu	r3,r2
(2)  957/ 60007F6 :                     ; 		sts	macl,r0
(2)  958/ 60007F6 :                     ; 		shlr8	r0
(2)  959/ 60007F6 :                     ; 		mulu	r7,r0
(2)  960/ 60007F6 :                     ; 		sts	macl,r0
(2)  961/ 60007F6 :                     ; 		add	r0,r8
(2)  962/ 60007F6 :                     ; 		mov	#((320+16)/16),r1
(2)  963/ 60007F6 :                     ; .yd_blk:
(2)  964/ 60007F6 :                     ; 		mov	r6,@-r15
(2)  965/ 60007F6 :                     ; 		mov	r1,@-r15
(2)  966/ 60007F6 :                     ; 		mov	r9,r5
(2)  967/ 60007F6 :                     ; 		mov.b	@r8,r0
(2)  968/ 60007F6 :                     ; 		extu.b	r0,r0		; BYTE
(2)  969/ 60007F6 :                     ; 		mov	#16*16,r3
(2)  970/ 60007F6 :                     ; 		mulu	r3,r0
(2)  971/ 60007F6 :                     ; 		sts	macl,r0
(2)  972/ 60007F6 :                     ; 		mov	r9,r5
(2)  973/ 60007F6 :                     ; 		add	r0,r5
(2)  974/ 60007F6 :                     ; ;
(2)  975/ 60007F6 :                     ; 		mov	#16,r3
(2)  976/ 60007F6 :                     ; .yd_lne:
(2)  977/ 60007F6 :                     ; 		cmp/ge	r12,r6
(2)  978/ 60007F6 :                     ; 		bf	.yd_res
(2)  979/ 60007F6 :                     ; 		sub	r12,r6
(2)  980/ 60007F6 :                     ; .yd_res:
(2)  981/ 60007F6 :                     ; 		mov	#16/4,r4
(2)  982/ 60007F6 :                     ; .xd_lne:
(2)  983/ 60007F6 :                     ; 		mov	@r5+,r0
(2)  984/ 60007F6 :                     ; 		lds	r0,macl
(2)  985/ 60007F6 :                     ; 		sts	mach,r1
(2)  986/ 60007F6 :                     ; 		add	r6,r1
(2)  987/ 60007F6 :                     ; 		mov	r13,r2
(2)  988/ 60007F6 :                     ; 		add	r6,r2
(2)  989/ 60007F6 :                     ; 		mov	r0,@r1
(2)  990/ 60007F6 :                     ; 		add	#4,r6
(2)  991/ 60007F6 :                     ; 		mov	r0,@r2
(2)  992/ 60007F6 :                     ; 		mov	#320,r0
(2)  993/ 60007F6 :                     ; 		cmp/ge	r0,r6
(2)  994/ 60007F6 :                     ; 		bt	.xd_ex
(2)  995/ 60007F6 :                     ; 		sts	macl,r0
(2)  996/ 60007F6 :                     ; 		add	r12,r1
(2)  997/ 60007F6 :                     ; 		mov	r0,@r1
(2)  998/ 60007F6 :                     ; 		add	r12,r2
(2)  999/ 60007F6 :                     ; 		mov	r0,@r2
(2) 1000/ 60007F6 :                     ; 		nop
(2) 1001/ 60007F6 :                     ; .xd_ex:
(2) 1002/ 60007F6 :                     ; 		dt	r4
(2) 1003/ 60007F6 :                     ; 		bf	.xd_lne
(2) 1004/ 60007F6 :                     ; 		add	#-16,r6	; bring point back
(2) 1005/ 60007F6 :                     ; 		dt	r3
(2) 1006/ 60007F6 :                     ; 		bf/s	.yd_lne
(2) 1007/ 60007F6 :                     ; 		add	r11,r6
(2) 1008/ 60007F6 :                     ;
(2) 1009/ 60007F6 :                     ; 		mov	@r15+,r1
(2) 1010/ 60007F6 :                     ; 		mov	@r15+,r6
(2) 1011/ 60007F6 :                     ; 		mov	#16,r0
(2) 1012/ 60007F6 :                     ; 		add	r0,r6
(2) 1013/ 60007F6 :                     ; 		dt	r1
(2) 1014/ 60007F6 :                     ; 		bf/s	.yd_blk
(2) 1015/ 60007F6 :                     ; 		add	#1,r8
(2) 1016/ 60007F6 :                     ; 		mov	@r15+,r8
(2) 1017/ 60007F6 :                     ; 		rts
(2) 1018/ 60007F6 :                     ; 		nop
(2) 1019/ 60007F6 :                     ;
(2) 1020/ 60007F6 :                     ; 		align 4
(2) 1021/ 60007F6 :                     ; 		ltorg
(2) 1022/ 60007F6 :                     ;
(2) 1023/ 60007F6 :                     ; ; ; --------------------------------------------------------
(2) 1024/ 60007F6 :                     ; ; ; MarsVideo_Bg_DrawScrl_UD
(2) 1025/ 60007F6 :                     ; ; ;
(2) 1026/ 60007F6 :                     ; ; ; Input:
(2) 1027/ 60007F6 :                     ; ; ; r14 | Background buffer
(2) 1028/ 60007F6 :                     ; ; ; r13 | Scrolling-area buffer
(2) 1029/ 60007F6 :                     ; ; ; r12 | Draw timers
(2) 1030/ 60007F6 :                     ; ; ;
(2) 1031/ 60007F6 :                     ; ; ; Breaks:
(2) 1032/ 60007F6 :                     ; ; ; ALL
(2) 1033/ 60007F6 :                     ; ; ; --------------------------------------------------------
(2) 1034/ 60007F6 :                     ; ;
(2) 1035/ 60007F6 :                     ; ; 		align 4
(2) 1036/ 60007F6 :                     ; ; MarsVideo_Bg_DrawScrl_UD:
(2) 1037/ 60007F6 :                     ; ; 		sts	pr,@-r15
(2) 1038/ 60007F6 :                     ; ;
(2) 1039/ 60007F6 :                     ; ; 		mov	#_framebuffer,r0
(2) 1040/ 60007F6 :                     ; ; 		mov	@(scrl_fbdata,r13),r1
(2) 1041/ 60007F6 :                     ; ; 		add	r0,r1
(2) 1042/ 60007F6 :                     ; ; 		mov	@(scrl_intrl_w,r13),r11		; r11 - FB width
(2) 1043/ 60007F6 :                     ; ; 		lds	r1,mach				; mach - FB base
(2) 1044/ 60007F6 :                     ; ; 		mov	@(scrl_fbpos_y,r13),r0
(2) 1045/ 60007F6 :                     ; ; 		mov	#-$10,r1			; <-- CUSTOM BLOCK SIZE
(2) 1046/ 60007F6 :                     ; ; 		mov	@(scrl_fbpos,r13),r10		; r10 - FB x/y pos
(2) 1047/ 60007F6 :                     ; ; 		and	r1,r0
(2) 1048/ 60007F6 :                     ; ; 		mov	@(md_bg_blk,r14),r9		; r9 - Block data
(2) 1049/ 60007F6 :                     ; ; 		mulu	r0,r11
(2) 1050/ 60007F6 :                     ; ; 		mov.w	@(md_bg_w,r14),r0		; r7 - Layout increment
(2) 1051/ 60007F6 :                     ; ; 		extu.w	r0,r7
(2) 1052/ 60007F6 :                     ; ; 		mov	@(scrl_intrl_size,r13),r12	; r12 - FB full size
(2) 1053/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1054/ 60007F6 :                     ; ; 		add	r0,r10
(2) 1055/ 60007F6 :                     ; ; 		and	r1,r10
(2) 1056/ 60007F6 :                     ; ; 		mov	@(md_bg_low,r14),r8		; r8 - Layout data
(2) 1057/ 60007F6 :                     ; ; 		mov	#RAM_Mars_ScrlData,r13
(2) 1058/ 60007F6 :                     ; ; 		cmp/ge	r12,r10
(2) 1059/ 60007F6 :                     ; ; 		bf	.fb_y
(2) 1060/ 60007F6 :                     ; ; 		sub	r12,r10
(2) 1061/ 60007F6 :                     ; ; .fb_y:
(2) 1062/ 60007F6 :                     ; ; 		mov	#Cach_DrawTimers+8,r1
(2) 1063/ 60007F6 :                     ; ; 		mov	@r1,r0
(2) 1064/ 60007F6 :                     ; ; 		tst	r0,r0
(2) 1065/ 60007F6 :                     ; ; 		bt	.no_d
(2) 1066/ 60007F6 :                     ; ; 		bsr	.draw_d
(2) 1067/ 60007F6 :                     ; ; 		nop
(2) 1068/ 60007F6 :                     ; ; .no_d:
(2) 1069/ 60007F6 :                     ; ; 		mov	#Cach_DrawTimers+$C,r1
(2) 1070/ 60007F6 :                     ; ; 		mov	@r1,r0
(2) 1071/ 60007F6 :                     ; ; 		tst	r0,r0
(2) 1072/ 60007F6 :                     ; ; 		bt	.no_u
(2) 1073/ 60007F6 :                     ; ; 		bsr	.draw_u
(2) 1074/ 60007F6 :                     ; ; 		nop
(2) 1075/ 60007F6 :                     ; ; .no_u:
(2) 1076/ 60007F6 :                     ; ; 		lds	@r15+,pr
(2) 1077/ 60007F6 :                     ; ; 		rts
(2) 1078/ 60007F6 :                     ; ; 		nop
(2) 1079/ 60007F6 :                     ; ; ; DOWN/UP
(2) 1080/ 60007F6 :                     ; ; .draw_d:
(2) 1081/ 60007F6 :                     ; ; 		dt	r0
(2) 1082/ 60007F6 :                     ; ; 		mov	r0,@r1
(2) 1083/ 60007F6 :                     ; ; 		mov.w	@(md_bg_yinc_d,r14),r0		; r7 - Layout increment
(2) 1084/ 60007F6 :                     ; ; 		exts.w	r0,r2
(2) 1085/ 60007F6 :                     ; ; 		mov	#224,r1
(2) 1086/ 60007F6 :                     ; ; 		bra	.go_du
(2) 1087/ 60007F6 :                     ; ; 		nop
(2) 1088/ 60007F6 :                     ; ; .draw_u:
(2) 1089/ 60007F6 :                     ; ; 		dt	r0
(2) 1090/ 60007F6 :                     ; ; 		mov	r0,@r1
(2) 1091/ 60007F6 :                     ; ; 		mov.w	@(md_bg_yinc_u,r14),r0		; r7 - Layout increment
(2) 1092/ 60007F6 :                     ; ; 		exts.w	r0,r2
(2) 1093/ 60007F6 :                     ; ; 		mov	#0,r1
(2) 1094/ 60007F6 :                     ; ; .go_du:
(2) 1095/ 60007F6 :                     ; ; 		mulu	r1,r11
(2) 1096/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1097/ 60007F6 :                     ; ; 		mov	r10,r6
(2) 1098/ 60007F6 :                     ; ; 		add	r0,r6
(2) 1099/ 60007F6 :                     ; ; ; 		mov	#-$10,r0
(2) 1100/ 60007F6 :                     ; ; ; 		and	r0,r6			; r6 - curr out pos
(2) 1101/ 60007F6 :                     ; ; 		mov	r8,@-r15
(2) 1102/ 60007F6 :                     ; ; 		mov.w	@(md_bg_xinc_l,r14),r0		; r7 - Layout increment
(2) 1103/ 60007F6 :                     ; ; 		exts.w	r0,r1
(2) 1104/ 60007F6 :                     ; ; 		mov	#16,r3		; <-- MANUAL BLOCK SIZE
(2) 1105/ 60007F6 :                     ; ; 		mulu	r3,r1
(2) 1106/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1107/ 60007F6 :                     ; ; 		shlr8	r0
(2) 1108/ 60007F6 :                     ; ; 		add	r0,r8
(2) 1109/ 60007F6 :                     ; ; 		mulu	r3,r2
(2) 1110/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1111/ 60007F6 :                     ; ; 		shlr8	r0
(2) 1112/ 60007F6 :                     ; ; 		mulu	r7,r0
(2) 1113/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1114/ 60007F6 :                     ; ; 		add	r0,r8
(2) 1115/ 60007F6 :                     ; ; 		mov	#((320+16)/16),r1
(2) 1116/ 60007F6 :                     ; ; .yd_blk:
(2) 1117/ 60007F6 :                     ; ; 		mov	r6,@-r15
(2) 1118/ 60007F6 :                     ; ; 		mov	r1,@-r15
(2) 1119/ 60007F6 :                     ; ; 		mov	r9,r5
(2) 1120/ 60007F6 :                     ; ; 		mov.b	@r8,r0
(2) 1121/ 60007F6 :                     ; ; 		extu.b	r0,r0		; BYTE
(2) 1122/ 60007F6 :                     ; ; 		mov	#16*16,r3
(2) 1123/ 60007F6 :                     ; ; 		mulu	r3,r0
(2) 1124/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1125/ 60007F6 :                     ; ; 		mov	r9,r5
(2) 1126/ 60007F6 :                     ; ; 		add	r0,r5
(2) 1127/ 60007F6 :                     ; ; ;
(2) 1128/ 60007F6 :                     ; ; 		mov	#16,r3
(2) 1129/ 60007F6 :                     ; ; .yd_lne:
(2) 1130/ 60007F6 :                     ; ; 		cmp/ge	r12,r6
(2) 1131/ 60007F6 :                     ; ; 		bf	.yd_res
(2) 1132/ 60007F6 :                     ; ; 		sub	r12,r6
(2) 1133/ 60007F6 :                     ; ; .yd_res:
(2) 1134/ 60007F6 :                     ; ; 		mov	#16/4,r4
(2) 1135/ 60007F6 :                     ; ; .xd_lne:
(2) 1136/ 60007F6 :                     ; ; 		mov	@r5+,r0
(2) 1137/ 60007F6 :                     ; ; 		lds	r0,macl
(2) 1138/ 60007F6 :                     ; ; 		sts	mach,r1
(2) 1139/ 60007F6 :                     ; ; 		add	r6,r1
(2) 1140/ 60007F6 :                     ; ; 		mov	r13,r2
(2) 1141/ 60007F6 :                     ; ; 		add	r6,r2
(2) 1142/ 60007F6 :                     ; ; 		mov	r0,@r1
(2) 1143/ 60007F6 :                     ; ; 		add	#4,r6
(2) 1144/ 60007F6 :                     ; ; 		mov	r0,@r2
(2) 1145/ 60007F6 :                     ; ; 		mov	#320,r0
(2) 1146/ 60007F6 :                     ; ; 		cmp/ge	r0,r6
(2) 1147/ 60007F6 :                     ; ; 		bt	.xd_ex
(2) 1148/ 60007F6 :                     ; ; 		sts	macl,r0
(2) 1149/ 60007F6 :                     ; ; 		add	r12,r1
(2) 1150/ 60007F6 :                     ; ; 		mov	r0,@r1
(2) 1151/ 60007F6 :                     ; ; 		add	r12,r2
(2) 1152/ 60007F6 :                     ; ; 		mov	r0,@r2
(2) 1153/ 60007F6 :                     ; ; 		nop
(2) 1154/ 60007F6 :                     ; ; .xd_ex:
(2) 1155/ 60007F6 :                     ; ; 		dt	r4
(2) 1156/ 60007F6 :                     ; ; 		bf	.xd_lne
(2) 1157/ 60007F6 :                     ; ; 		add	#-16,r6	; bring point back
(2) 1158/ 60007F6 :                     ; ; 		dt	r3
(2) 1159/ 60007F6 :                     ; ; 		bf/s	.yd_lne
(2) 1160/ 60007F6 :                     ; ; 		add	r11,r6
(2) 1161/ 60007F6 :                     ; ;
(2) 1162/ 60007F6 :                     ; ; 		mov	@r15+,r1
(2) 1163/ 60007F6 :                     ; ; 		mov	@r15+,r6
(2) 1164/ 60007F6 :                     ; ; 		mov	#16,r0
(2) 1165/ 60007F6 :                     ; ; 		add	r0,r6
(2) 1166/ 60007F6 :                     ; ; 		dt	r1
(2) 1167/ 60007F6 :                     ; ; 		bf/s	.yd_blk
(2) 1168/ 60007F6 :                     ; ; 		add	#1,r8
(2) 1169/ 60007F6 :                     ; ; 		mov	@r15+,r8
(2) 1170/ 60007F6 :                     ; ; 		rts
(2) 1171/ 60007F6 :                     ; ; 		nop
(2) 1172/ 60007F6 :                     ; ; 		align 4
(2) 1173/ 60007F6 :                     ; ; 		ltorg
(2) 1174/ 60007F6 :                     ;
(2) 1175/ 60007F6 :                     ; ; ----------------------------------------------------------------
(2) 1176/ 60007F6 :                     ; ; Super Sprites
(2) 1177/ 60007F6 :                     ; ; ----------------------------------------------------------------
(2) 1178/ 60007F6 :                     ;
(2) 1179/ 60007F6 :                     ; ; --------------------------------------------------------
(2) 1180/ 60007F6 :                     ; ; MarsVideo_MkSprCoords
(2) 1181/ 60007F6 :                     ; ;
(2) 1182/ 60007F6 :                     ; ; This creates a backup of the screen's position for
(2) 1183/ 60007F6 :                     ; ; the sprite-refill boxes
(2) 1184/ 60007F6 :                     ; ;
(2) 1185/ 60007F6 :                     ; ; Input:
(2) 1186/ 60007F6 :                     ; ; r1 - VRAM base
(2) 1187/ 60007F6 :                     ; ; r2 - X Top-Left position
(2) 1188/ 60007F6 :                     ; ; r3 - Y (real) position
(2) 1189/ 60007F6 :                     ; ; r4 - Scrolling area Width
(2) 1190/ 60007F6 :                     ; ; r5 - Scrolling area Height
(2) 1191/ 60007F6 :                     ; ; r6 - Scroll area size
(2) 1192/ 60007F6 :                     ; ; r7 - Output settings to this area
(2) 1193/ 60007F6 :                     ; ;
(2) 1194/ 60007F6 :                     ; ; Breaks:
(2) 1195/ 60007F6 :                     ; ; r7
(2) 1196/ 60007F6 :                     ; ; --------------------------------------------------------
(2) 1197/ 60007F6 :                     ;
(2) 1198/ 60007F6 :                     ; 		align 4
(2) 1199/ 60007F6 :                     ; MarsVideo_MkSprCoords:
(2) 1200/ 60007F6 :                     ; 		add	#4,r7
(2) 1201/ 60007F6 :                     ; 		mov	r6,@-r7
(2) 1202/ 60007F6 :                     ; 		mov	r5,@-r7
(2) 1203/ 60007F6 :                     ; 		mov	r4,@-r7
(2) 1204/ 60007F6 :                     ; 		mov	r3,@-r7
(2) 1205/ 60007F6 :                     ; 		mov	r2,@-r7
(2) 1206/ 60007F6 :                     ; 		mov	r1,@-r7
(2) 1207/ 60007F6 :                     ; 		rts
(2) 1208/ 60007F6 :                     ; 		nop
(2) 1209/ 60007F6 :                     ; 		align 4
(2) 1210/ 60007F6 :                     ;
(2) 1211/ 60007F6 :                     ; ; --------------------------------------------------------
(2) 1212/ 60007F6 :                     ; ; MarsVideo_MkSprBoxes
(2) 1213/ 60007F6 :                     ; ; --------------------------------------------------------
(2) 1214/ 60007F6 :                     ;
(2) 1215/ 60007F6 :                     ; 		align 4
(2) 1216/ 60007F6 :                     ; MarsVideo_MkSprBoxes:
(2) 1217/ 60007F6 :                     ;  		mov	#RAM_Mars_DreqRead+Dreq_SuperSpr,r14
(2) 1218/ 60007F6 :                     ; 		mov	#Cach_SprBoxList,r13
(2) 1219/ 60007F6 :                     ; .next_save:
(2) 1220/ 60007F6 :                     ; 		mov	@(marsspr_data,r14),r0
(2) 1221/ 60007F6 :                     ; 		tst	r0,r0
(2) 1222/ 60007F6 :                     ; 		bt	.last
(2) 1223/ 60007F6 :                     ; 		mov	#MAX_SSPRSPD,r0		; expand box (max speed)
(2) 1224/ 60007F6 :                     ; 		mov	@(marsspr_x,r14),r5	; XXXX YYYY
(2) 1225/ 60007F6 :                     ; 		exts.w	r5,r6
(2) 1226/ 60007F6 :                     ; 		mov	@(marsspr_xfrm,r14),r7	; ?? ?? XX YY
(2) 1227/ 60007F6 :                     ; 		shlr16	r5
(2) 1228/ 60007F6 :                     ; 		exts.w	r5,r5
(2) 1229/ 60007F6 :                     ; 		extu.b	r7,r8
(2) 1230/ 60007F6 :                     ; 		shlr8	r7
(2) 1231/ 60007F6 :                     ; 		extu.b	r7,r7
(2) 1232/ 60007F6 :                     ; 		add	r5,r7
(2) 1233/ 60007F6 :                     ; 		add	r6,r8
(2) 1234/ 60007F6 :                     ; ; 		mov.w	@(marsspr_x,r14),r0
(2) 1235/ 60007F6 :                     ; ; 		exts.w	r0,r5
(2) 1236/ 60007F6 :                     ; ; 		mov.w	@(marsspr_y,r14),r0
(2) 1237/ 60007F6 :                     ; ; 		exts.w	r0,r6
(2) 1238/ 60007F6 :                     ; ; 		mov.b	@(marsspr_xs,r14),r0
(2) 1239/ 60007F6 :                     ; ; 		exts.b	r0,r7
(2) 1240/ 60007F6 :                     ; ; 		mov.b	@(marsspr_ys,r14),r0
(2) 1241/ 60007F6 :                     ; ; 		exts.b	r0,r8
(2) 1242/ 60007F6 :                     ; ; 		add	r5,r7
(2) 1243/ 60007F6 :                     ; ; 		add	r6,r8
(2) 1244/ 60007F6 :                     ;
(2) 1245/ 60007F6 :                     ; 		sub	r0,r5	; expand box
(2) 1246/ 60007F6 :                     ; 		sub	r0,r6
(2) 1247/ 60007F6 :                     ; 		add	r0,r7
(2) 1248/ 60007F6 :                     ; 		add	r0,r8
(2) 1249/ 60007F6 :                     ; ; 		shlr	r0
(2) 1250/ 60007F6 :                     ; 		add	r0,r7
(2) 1251/ 60007F6 :                     ; ; 		add	r0,r8
(2) 1252/ 60007F6 :                     ; 		mov	#-4,r0	; align by 4
(2) 1253/ 60007F6 :                     ; 		and	r0,r5
(2) 1254/ 60007F6 :                     ; 		and	r0,r7
(2) 1255/ 60007F6 :                     ; 		and	r0,r6
(2) 1256/ 60007F6 :                     ; 		and	r0,r8
(2) 1257/ 60007F6 :                     ; 		mov	#320+16,r1
(2) 1258/ 60007F6 :                     ; 		mov	#224+16,r2
(2) 1259/ 60007F6 :                     ; 		cmp/pl	r7
(2) 1260/ 60007F6 :                     ; 		bf	.spr_out
(2) 1261/ 60007F6 :                     ; 		cmp/pl	r8
(2) 1262/ 60007F6 :                     ; 		bf	.spr_out
(2) 1263/ 60007F6 :                     ; 		cmp/ge	r1,r5
(2) 1264/ 60007F6 :                     ; 		bt	.spr_out
(2) 1265/ 60007F6 :                     ; 		cmp/ge	r2,r6
(2) 1266/ 60007F6 :                     ; 		bt	.spr_out
(2) 1267/ 60007F6 :                     ; 		cmp/pz	r5
(2) 1268/ 60007F6 :                     ; 		bt	.xl_l
(2) 1269/ 60007F6 :                     ; 		xor	r5,r5
(2) 1270/ 60007F6 :                     ; .xl_l:
(2) 1271/ 60007F6 :                     ; 		cmp/pz	r6
(2) 1272/ 60007F6 :                     ; 		bt	.yl_l
(2) 1273/ 60007F6 :                     ; 		xor	r6,r6
(2) 1274/ 60007F6 :                     ; .yl_l:
(2) 1275/ 60007F6 :                     ; 		cmp/gt	r1,r7
(2) 1276/ 60007F6 :                     ; 		bf	.xr_l
(2) 1277/ 60007F6 :                     ; 		mov	r1,r7
(2) 1278/ 60007F6 :                     ; .xr_l:
(2) 1279/ 60007F6 :                     ; 		cmp/gt	r2,r8
(2) 1280/ 60007F6 :                     ; 		bf	.yr_l
(2) 1281/ 60007F6 :                     ; 		mov	r2,r8
(2) 1282/ 60007F6 :                     ; .yr_l:
(2) 1283/ 60007F6 :                     ; 		mulu	r11,r6
(2) 1284/ 60007F6 :                     ; 		sts	macl,r0
(2) 1285/ 60007F6 :                     ; 		add	r0,r4
(2) 1286/ 60007F6 :                     ; .y_lp:
(2) 1287/ 60007F6 :                     ; 		cmp/gt	r12,r4
(2) 1288/ 60007F6 :                     ; 		bf	.y_keep
(2) 1289/ 60007F6 :                     ; 		sub	r12,r4
(2) 1290/ 60007F6 :                     ; .y_keep:
(2) 1291/ 60007F6 :                     ;
(2) 1292/ 60007F6 :                     ; 	; r5 - X left
(2) 1293/ 60007F6 :                     ; 	; r6 - Y top
(2) 1294/ 60007F6 :                     ; 	; r7 - X right
(2) 1295/ 60007F6 :                     ; 	; r8 - Y bottom
(2) 1296/ 60007F6 :                     ; 	;
(2) 1297/ 60007F6 :                     ; 	; (Xend>>2)|$80,(Xstart>>2),Ybottom,Ytop
(2) 1298/ 60007F6 :                     ; 		mov	r7,r0
(2) 1299/ 60007F6 :                     ; 		shlr2	r0
(2) 1300/ 60007F6 :                     ; 		extu.b	r0,r0
(2) 1301/ 60007F6 :                     ; 		or	#$80,r0
(2) 1302/ 60007F6 :                     ; 		shll16	r0
(2) 1303/ 60007F6 :                     ; 		shll8	r0
(2) 1304/ 60007F6 :                     ; 		mov	r5,r2
(2) 1305/ 60007F6 :                     ; 		shll16	r2
(2) 1306/ 60007F6 :                     ; 		shlr2	r2
(2) 1307/ 60007F6 :                     ; 		mov	r0,r3
(2) 1308/ 60007F6 :                     ; 		mov	r6,r0
(2) 1309/ 60007F6 :                     ; 		mov	r8,r1
(2) 1310/ 60007F6 :                     ; 		extu.b	r1,r1
(2) 1311/ 60007F6 :                     ; 		shll8	r1
(2) 1312/ 60007F6 :                     ; 		and	#$FF,r0
(2) 1313/ 60007F6 :                     ; 		or	r3,r0
(2) 1314/ 60007F6 :                     ; 		or	r2,r0
(2) 1315/ 60007F6 :                     ; 		or	r1,r0
(2) 1316/ 60007F6 :                     ; 		mov	r0,@r13
(2) 1317/ 60007F6 :                     ; 		add	#4,r13
(2) 1318/ 60007F6 :                     ; .spr_out:
(2) 1319/ 60007F6 :                     ; 		bra	.next_save
(2) 1320/ 60007F6 :                     ; 		add 	#sizeof_marsspr,r14
(2) 1321/ 60007F6 :                     ; .last:
(2) 1322/ 60007F6 :                     ; 		rts
(2) 1323/ 60007F6 :                     ; 		nop
(2) 1324/ 60007F6 :                     ; 		align 4
(2) 1325/ 60007F6 :                     ; 		ltorg
(2) 1326/ 60007F6 :                     ;
(2) 1327/ 60007F6 :                     ; ; ====================================================================
(2) 1328/ 60007F6 :                     ; ; ----------------------------------------------------------------
(2) 1329/ 60007F6 :                     ; ; 3D Section
(2) 1330/ 60007F6 :                     ; ;
(2) 1331/ 60007F6 :                     ; ; Nothing to see here (yet), all stuff is
(2) 1332/ 60007F6 :                     ; ; located at cache_m_3D.asm
(2) 1333/ 60007F6 :                     ; ; ----------------------------------------------------------------
(2) 1334/ 60007F6 :                     
(1)  999/ 60007F6 :                     		include "system/mars/sound.asm"
(2)    1/ 60007F6 :                     ; ====================================================================
(2)    2/ 60007F6 :                     ; ----------------------------------------------------------------
(2)    3/ 60007F6 :                     ; 32X Sound (For SLAVE CPU ONLY)
(2)    4/ 60007F6 :                     ;
(2)    5/ 60007F6 :                     ; Playback code (the PWM interrupt) is located at cache_slv.asm
(2)    6/ 60007F6 :                     ; ----------------------------------------------------------------
(2)    7/ 60007F6 :                     
(2)    8/ 60007F6 :                     ; --------------------------------------------------------
(2)    9/ 60007F6 :                     ; Settings
(2)   10/ 60007F6 :                     ; --------------------------------------------------------
(2)   11/ 60007F6 :                     
(2)   12/ 60007F6 : =$5622              SAMPLE_RATE	equ 22050	; 22050
(2)   13/ 60007F6 : =$1000              SAMPLE_SIZE	equ $1000
(2)   14/ 60007F6 : =$7                 MAX_PWMCHNL	equ 7
(2)   15/ 60007F6 : =$80                MAX_PWMBACKUP	equ $80
(2)   16/ 60007F6 :                     
(2)   17/ 60007F6 :                     ; --------------------------------------------------------
(2)   18/ 60007F6 :                     ; Structs
(2)   19/ 60007F6 :                     ; --------------------------------------------------------
(2)   20/ 60007F6 :                     
(2)   21/ 60007F6 :                     ; 32X sound channel
(2)   22/ 60007F6 : (MACRO)             		struct 0
(2)   22/ 60007F6 : =$60007F6           GLBL_LASTPC     set *
(2)   22/   43AF6 :                                     dephase
(2)   22/   43AF6 : =$43AF6             GLBL_LASTORG    set *
(2)   22/       0 :                                     phase 0
(2)   23/       0 :                     mchnsnd_enbl	ds.l 1		; %E000 SLlr | Enable-Stereo,Loop,left,right
(2)   24/       4 :                     mchnsnd_bank	ds.l 1		; CS1 or CS3
(2)   25/       8 :                     mchnsnd_start	ds.l 1		; Start point $00xxxxxx << 8
(2)   26/       C :                     mchnsnd_read	ds.l 1		; READ point
(2)   27/      10 :                     mchnsnd_len	ds.l 1		; Lenght << 8
(2)   28/      14 :                     mchnsnd_loop	ds.l 1		; Loop point << 8
(2)   29/      18 :                     mchnsnd_pitch	ds.l 1		; Pitch $xx.xx
(2)   30/      1C :                     mchnsnd_vol	ds.l 1		; Volume ($0000-Max)
(2)   31/      20 :                     mchnsnd_cread	ds.l 1
(2)   32/      24 :                     sizeof_marssnd	ds.l 0
(2)   33/      26 : (MACRO)             		endstruct
(2)   33/       0 :                                     !org GLBL_LASTORG
(2)   33/ 60007F6 :                                     phase GLBL_LASTPC
(2)   34/ 60007F6 :                     
(2)   35/ 60007F6 :                     ; ====================================================================
(2)   36/ 60007F6 :                     ; --------------------------------------------------------
(2)   37/ 60007F6 :                     ; Init Sound PWM
(2)   38/ 60007F6 :                     ;
(2)   39/ 60007F6 :                     ; Cycle register formulas:
(2)   40/ 60007F6 :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   41/ 60007F6 :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   42/ 60007F6 :                     ;
(2)   43/ 60007F6 :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   44/ 60007F6 :                     ; --------------------------------------------------------
(2)   45/ 60007F6 :                     
(2)   46/ 60007F6 :                     		align 4
(2)   47/ 60007F8 :                     MarsSound_Init:
(2)   48/ 60007F8 : 4F13                		stc	gbr,@-r15
(2)   49/ 60007FA : D006                		mov	#_sysreg,r0
(2)   50/ 60007FC : 401E                		ldc	r0,gbr
(2)   51/ 60007FE : 900B                		mov	#$0105,r0					; Timing interval $01, output L/R
(2)   52/ 6000800 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   53/ 6000802 : 900A                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Samplerate
(2)   54/ 6000804 : C119                		mov.w	r0,@(cycle,gbr)
(2)   55/ 6000806 : E001                		mov	#1,r0
(2)   56/ 6000808 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   57/ 600080A : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   58/ 600080C : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   59/ 600080E : 4F17                		ldc	@r15+,gbr
(2)   60/ 6000810 : 000B                		rts
(2)   61/ 6000812 : 0009                		nop
(2)   62/ 6000814 :                     		align 4
(2)   63/ 6000814 :                     
(2)   64/ 6000814 :                     ; ====================================================================
(2)   65/ 6000814 :                     ; ----------------------------------------------------------------
(2)   66/ 6000814 :                     ; Subroutines
(2)   67/ 6000814 :                     ; ----------------------------------------------------------------
(2)   68/ 6000814 :                     
(2)   69/ 6000814 :                     ; ; --------------------------------------------------------
(2)   70/ 6000814 :                     ; ; MarsSound_SetPwm
(2)   71/ 6000814 :                     ; ;
(2)   72/ 6000814 :                     ; ; Sets new sound data to a channel slot, automaticly
(2)   73/ 6000814 :                     ; ; plays.
(2)   74/ 6000814 :                     ; ;
(2)   75/ 6000814 :                     ; ; Input:
(2)   76/ 6000814 :                     ; ; r1 | Channel (0-6)
(2)   77/ 6000814 :                     ; ; r2 | Start address (SH2 AREA)
(2)   78/ 6000814 :                     ; ; r3 | End address (SH2 AREA)
(2)   79/ 6000814 :                     ; ; r4 | Loop address (SH2 AREA, ignored if loop bit isn't set)
(2)   80/ 6000814 :                     ; ; r5 | Starting pitch ($xxxxxx.xx, $100 default speed)
(2)   81/ 6000814 :                     ; ; r6 | Volume (0-High)
(2)   82/ 6000814 :                     ; ; r7 | Flags: %xxxxslLR
(2)   83/ 6000814 :                     ; ;      LR - Enable output to these speakers
(2)   84/ 6000814 :                     ; ;       l - LOOP flag
(2)   85/ 6000814 :                     ; ;       s - Sample data is in Stereo (16-bit)
(2)   86/ 6000814 :                     ; ;
(2)   87/ 6000814 :                     ; ; Breaks:
(2)   88/ 6000814 :                     ; ; r0,r8-r9,macl
(2)   89/ 6000814 :                     ; ; --------------------------------------------------------
(2)   90/ 6000814 :                     ;
(2)   91/ 6000814 :                     ; MarsSound_SetPwm:
(2)   92/ 6000814 :                     ; 		mov	#RAM_Mars_PwmList,r8
(2)   93/ 6000814 :                     ; 		mov 	#sizeof_marssnd,r0
(2)   94/ 6000814 :                     ; 		mulu	r1,r0
(2)   95/ 6000814 :                     ; 		sts	macl,r0
(2)   96/ 6000814 :                     ; 		add 	r0,r8
(2)   97/ 6000814 :                     ; 		mov 	#0,r0
(2)   98/ 6000814 :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)   99/ 6000814 :                     ; ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  100/ 6000814 :                     ; ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  101/ 6000814 :                     ; 		mov 	r5,@(mchnsnd_pitch,r8)
(2)  102/ 6000814 :                     ; 		mov 	r6,@(mchnsnd_vol,r8)
(2)  103/ 6000814 :                     ; 		mov	r7,r0
(2)  104/ 6000814 :                     ; 		or	#$80,r0
(2)  105/ 6000814 :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  106/ 6000814 :                     ; 		mov 	r2,r0				; Set MSB
(2)  107/ 6000814 :                     ; 		mov	#-1,r9				; r9 - FF000000
(2)  108/ 6000814 :                     ; 		shll16	r9
(2)  109/ 6000814 :                     ; 		shll8	r9
(2)  110/ 6000814 :                     ; 		and	r9,r0
(2)  111/ 6000814 :                     ; ; 		mov 	#$FF000000,r9
(2)  112/ 6000814 :                     ; ; 		and 	r9,r0
(2)  113/ 6000814 :                     ; 		mov 	r0,@(mchnsnd_bank,r8)
(2)  114/ 6000814 :                     ; 		mov 	r4,r0				; Set POINTS
(2)  115/ 6000814 :                     ; 		cmp/eq	#-1,r0
(2)  116/ 6000814 :                     ; 		bt	.endmrk
(2)  117/ 6000814 :                     ; 		shll8	r0
(2)  118/ 6000814 :                     ; .endmrk:
(2)  119/ 6000814 :                     ; 		mov	r0,@(mchnsnd_loop,r8)
(2)  120/ 6000814 :                     ; 		mov 	r3,r0
(2)  121/ 6000814 :                     ; 		shll8	r0
(2)  122/ 6000814 :                     ; 		mov	r0,@(mchnsnd_len,r8)
(2)  123/ 6000814 :                     ; 		mov 	r2,r0
(2)  124/ 6000814 :                     ; 		shll8	r0
(2)  125/ 6000814 :                     ; 		mov 	r0,@(mchnsnd_start,r8)
(2)  126/ 6000814 :                     ; 		mov 	r0,@(mchnsnd_read,r8)
(2)  127/ 6000814 :                     ; ; 		mov 	#1,r0
(2)  128/ 6000814 :                     ; ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  129/ 6000814 :                     ; 		rts
(2)  130/ 6000814 :                     ; 		nop
(2)  131/ 6000814 :                     ; 		align 4
(2)  132/ 6000814 :                     ;
(2)  133/ 6000814 :                     ; ; --------------------------------------------------------
(2)  134/ 6000814 :                     ; ; MarsSound_SetPwmPitch
(2)  135/ 6000814 :                     ; ;
(2)  136/ 6000814 :                     ; ; Sets pitch data of a channel slot
(2)  137/ 6000814 :                     ; ;
(2)  138/ 6000814 :                     ; ; Input:
(2)  139/ 6000814 :                     ; ; r1 | Channel (0-6)
(2)  140/ 6000814 :                     ; ; r2 | Pitch ($xxxxxx.xx, $100 default speed)
(2)  141/ 6000814 :                     ; ;
(2)  142/ 6000814 :                     ; ; Breaks:
(2)  143/ 6000814 :                     ; ; r8,macl
(2)  144/ 6000814 :                     ; ; --------------------------------------------------------
(2)  145/ 6000814 :                     ;
(2)  146/ 6000814 :                     ; MarsSound_SetPwmPitch:
(2)  147/ 6000814 :                     ; 		mov	#RAM_Mars_PwmList,r8
(2)  148/ 6000814 :                     ; 		mov 	#sizeof_marssnd,r0
(2)  149/ 6000814 :                     ; 		mulu	r1,r0
(2)  150/ 6000814 :                     ; 		sts	macl,r0
(2)  151/ 6000814 :                     ; 		add 	r0,r8
(2)  152/ 6000814 :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  153/ 6000814 :                     ; 		tst	#$80,r0
(2)  154/ 6000814 :                     ; 		bt	.off_1
(2)  155/ 6000814 :                     ; 		mov	@(mchnsnd_read,r8),r0
(2)  156/ 6000814 :                     ; 		mov	r2,@(mchnsnd_pitch,r8)
(2)  157/ 6000814 :                     ; .off_1:
(2)  158/ 6000814 :                     ; 		rts
(2)  159/ 6000814 :                     ; 		nop
(2)  160/ 6000814 :                     ; 		align 4
(2)  161/ 6000814 :                     ;
(2)  162/ 6000814 :                     ; ; --------------------------------------------------------
(2)  163/ 6000814 :                     ; ; MarsSound_SetVolume
(2)  164/ 6000814 :                     ; ;
(2)  165/ 6000814 :                     ; ; Changes the volume of a channel slot
(2)  166/ 6000814 :                     ; ;
(2)  167/ 6000814 :                     ; ; Input:
(2)  168/ 6000814 :                     ; ; r1 | Channel (0-6)
(2)  169/ 6000814 :                     ; ; r2 | Volume (in reverse: higher value is low)
(2)  170/ 6000814 :                     ; ;
(2)  171/ 6000814 :                     ; ; Breaks:
(2)  172/ 6000814 :                     ; ; r8,macl
(2)  173/ 6000814 :                     ; ; --------------------------------------------------------
(2)  174/ 6000814 :                     ;
(2)  175/ 6000814 :                     ; MarsSound_SetVolume:
(2)  176/ 6000814 :                     ; 		mov	#RAM_Mars_PwmList,r8
(2)  177/ 6000814 :                     ; 		mov 	#sizeof_marssnd,r0
(2)  178/ 6000814 :                     ; 		mulu	r1,r0
(2)  179/ 6000814 :                     ; 		sts	macl,r0
(2)  180/ 6000814 :                     ; 		add 	r0,r8
(2)  181/ 6000814 :                     ; 		mov	@(mchnsnd_enbl,r8),r0
(2)  182/ 6000814 :                     ; 		tst	#$80,r0
(2)  183/ 6000814 :                     ; 		bt	.off_1
(2)  184/ 6000814 :                     ; 		mov	r2,r0
(2)  185/ 6000814 :                     ; 		mov	r0,@(mchnsnd_vol,r8)
(2)  186/ 6000814 :                     ; .off_1:
(2)  187/ 6000814 :                     ; 		rts
(2)  188/ 6000814 :                     ; 		nop
(2)  189/ 6000814 :                     ; 		align 4
(2)  190/ 6000814 :                     ;
(2)  191/ 6000814 :                     ; ; --------------------------------------------------------
(2)  192/ 6000814 :                     ; ; MarsSound_PwmEnable
(2)  193/ 6000814 :                     ; ;
(2)  194/ 6000814 :                     ; ; Turns ON or OFF Current PWM slot
(2)  195/ 6000814 :                     ; ;
(2)  196/ 6000814 :                     ; ; Input:
(2)  197/ 6000814 :                     ; ; r1 | Channel (0-6)
(2)  198/ 6000814 :                     ; ; r2 | Enable/Disable
(2)  199/ 6000814 :                     ; ;
(2)  200/ 6000814 :                     ; ; Breaks:
(2)  201/ 6000814 :                     ; ; r8,macl
(2)  202/ 6000814 :                     ; ; --------------------------------------------------------
(2)  203/ 6000814 :                     ;
(2)  204/ 6000814 :                     ; MarsSound_PwmEnable:
(2)  205/ 6000814 :                     ; 		mov	#RAM_Mars_PwmList,r8
(2)  206/ 6000814 :                     ; 		mov 	#sizeof_marssnd,r0
(2)  207/ 6000814 :                     ; 		mulu	r1,r0
(2)  208/ 6000814 :                     ; 		sts	macl,r0
(2)  209/ 6000814 :                     ; 		add 	r0,r8
(2)  210/ 6000814 :                     ; 		mov	r2,r0
(2)  211/ 6000814 :                     ; 		shll8	r0
(2)  212/ 6000814 :                     ; 		shlr	r0
(2)  213/ 6000814 :                     ; 		mov 	r0,@(mchnsnd_enbl,r8)
(2)  214/ 6000814 :                     ; 		rts
(2)  215/ 6000814 :                     ; 		nop
(2)  216/ 6000814 :                     ; 		align 4
(2)  217/ 6000814 :                     
(2)  218/ 6000814 :                     ; ====================================================================
(2)  219/ 6000814 :                     
(2)  220/ 6000814 : 2000 4000 0105 0415 		ltorg			; Save literals
(2)  221/ 600081C :                     
(1) 1000/ 600081C :                     ; 		align 4
(1) 1001/ 600081C :                     
(1) 1002/ 600081C :                     ; ====================================================================
(1) 1003/ 600081C :                     ; ----------------------------------------------------------------
(1) 1004/ 600081C :                     ; Master entry
(1) 1005/ 600081C :                     ; ----------------------------------------------------------------
(1) 1006/ 600081C :                     
(1) 1007/ 600081C :                     		align 4
(1) 1008/ 600081C :                     SH2_M_Entry:
(1) 1009/ 600081C : DF2D                		mov	#STACK_MSTR,r15			; Reset stack
(1) 1010/ 600081E : D02E                		mov	#SH2_Master,r0			; Reset vbr
(1) 1011/ 6000820 : 402E                		ldc	r0,vbr
(1) 1012/ 6000822 : 9167                		mov.l	#_FRT,r1
(1) 1013/ 6000824 : E000                		mov	#0,r0
(1) 1014/ 6000826 : 8010                		mov.b	r0,@(0,r1)
(1) 1015/ 6000828 : E0E2                		mov.b	#$E2,r0
(1) 1016/ 600082A : 8017                		mov.b	r0,@(7,r1)
(1) 1017/ 600082C : E000                		mov	#0,r0
(1) 1018/ 600082E : 8014                		mov.b	r0,@(4,r1)
(1) 1019/ 6000830 : E001                		mov	#1,r0
(1) 1020/ 6000832 : 8015                		mov.b	r0,@(5,r1)
(1) 1021/ 6000834 : E000                		mov	#0,r0
(1) 1022/ 6000836 : 8016                		mov.b	r0,@(6,r1)
(1) 1023/ 6000838 : E001                		mov	#1,r0
(1) 1024/ 600083A : 8011                		mov.b	r0,@(1,r1)
(1) 1025/ 600083C : E000                		mov	#0,r0
(1) 1026/ 600083E : 8013                		mov.b	r0,@(3,r1)
(1) 1027/ 6000840 : 8012                		mov.b	r0,@(2,r1)
(1) 1028/ 6000842 :                     ; 		mov.b	#$F2,r0				; <-- not needed here
(1) 1029/ 6000842 :                     ; 		mov.b	r0,@(7,r1)
(1) 1030/ 6000842 :                     ; 		mov	#0,r0
(1) 1031/ 6000842 :                     ; 		mov.b	r0,@(4,r1)
(1) 1032/ 6000842 :                     ; 		mov	#1,r0
(1) 1033/ 6000842 :                     ; 		mov.b	r0,@(5,r1)
(1) 1034/ 6000842 :                     ; 		mov.b	#$E2,r0
(1) 1035/ 6000842 :                     ; 		mov.b	r0,@(7,r1)
(1) 1036/ 6000842 :                     
(1) 1037/ 6000842 :                     	; Extra interrupt settings
(1) 1038/ 6000842 : 9058                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1) 1039/ 6000844 : 9158                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1040/ 6000846 : 2011                		mov.w   r1,@r0
(1) 1041/ 6000848 : 9057                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1042/ 600084A : 9157                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1) 1043/ 600084C : 2011                		mov.w   r1,@r0
(1) 1044/ 600084E : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 1045/ 6000850 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1) 1046/ 6000852 : 2012                		mov	r1,@r0
(1) 1047/ 6000854 : D021                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1048/ 6000856 : 401E                		ldc	r0,gbr
(1) 1049/ 6000858 : D01D                		mov	litr_MarsVideo_Init,r0		; Init Video
(1) 1050/ 600085A : 400B                		jsr	@r0
(1) 1051/ 600085C : 0009                		nop
(1) 1052/ 600085E :                     
(1) 1053/ 600085E :                     ; ====================================================================
(1) 1054/ 600085E :                     ; ----------------------------------------------------------------
(1) 1055/ 600085E :                     ; Master MAIN code
(1) 1056/ 600085E :                     ; ----------------------------------------------------------------
(1) 1057/ 600085E :                     
(1) 1058/ 600085E :                     SH2_M_HotStart:
(1) 1059/ 600085E : 914E                		mov.w	#$FE80,r1		; ($FFFFFE80)
(1) 1060/ 6000860 : 904E                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1061/ 6000862 : 2101                		mov.w	r0,@r1
(1) 1062/ 6000864 : 914D                		mov.w	#_CCR&$FFFF,r1		; Reset CACHE
(1) 1063/ 6000866 : E010                		mov	#$10,r0
(1) 1064/ 6000868 : 2100                		mov.b	r0,@r1
(1) 1065/ 600086A : 0009                		nop
(1) 1066/ 600086C : 0009                		nop
(1) 1067/ 600086E : 0009                		nop
(1) 1068/ 6000870 : 0009                		nop
(1) 1069/ 6000872 : 0009                		nop
(1) 1070/ 6000874 : 0009                		nop
(1) 1071/ 6000876 : 0009                		nop
(1) 1072/ 6000878 : E009                		mov	#9,r0
(1) 1073/ 600087A : 2100                		mov.b	r0,@r1
(1) 1074/ 600087C : D118                		mov	#_sysreg,r1
(1) 1075/ 600087E : 200A                    		xor	r0,r0
(1) 1076/ 6000880 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1077/ 6000882 : 811B                		mov.w	r0,@(vintclr,r1)
(1) 1078/ 6000884 : 811C                		mov.w	r0,@(hintclr,r1)
(1) 1079/ 6000886 : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 1080/ 6000888 : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 1081/ 600088A : 6011                		mov.w	@r1,r0
(1) 1082/ 600088C : CB02                		or	#CMDIRQ_ON,r0
(1) 1083/ 600088E : 2101                		mov.w	r0,@r1
(1) 1084/ 6000890 : D114                		mov	#_sysreg+comm14,r1
(1) 1085/ 6000892 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1086/ 6000894 : 2008                		tst	r0,r0
(1) 1087/ 6000896 : 8BFC                		bf	.wait_slv
(1) 1088/ 6000898 :                     
(1) 1089/ 6000898 :                     	; TEMPORAL
(1) 1090/ 6000898 : D113                		mov	#ArtMars_TEST,r1
(1) 1091/ 600089A : D214                		mov	#_framebuffer+$200,r2
(1) 1092/ 600089C : 9332                		mov	#(320*224)/4,r3
(1) 1093/ 600089E :                     .loopin:
(1) 1094/ 600089E : 6016                		mov	@r1+,r0
(1) 1095/ 60008A0 : 2202                		mov	r0,@r2
(1) 1096/ 60008A2 : 4310                		dt	r3
(1) 1097/ 60008A4 : 8FFB                		bf/s	.loopin
(1) 1098/ 60008A6 : 7204                		add	#4,r2
(1) 1099/ 60008A8 : 9121                		mov	#$200,r1
(1) 1100/ 60008AA : 922C                		mov	#320,r2
(1) 1101/ 60008AC : 932C                		mov	#224,r3
(1) 1102/ 60008AE : BF5F                		bsr	MarsVideo_MakeNameTbl
(1) 1103/ 60008B0 : E400                		mov	#0,r4
(1) 1104/ 60008B2 :                     
(1) 1105/ 60008B2 : D10F                		mov	#_vdpreg,r1
(1) 1106/ 60008B4 : E001                		mov	#1,r0				; Start at BLANK
(1) 1107/ 60008B6 : 8011                		mov.b	r0,@(bitmapmd,r1)
(1) 1108/ 60008B8 : 841B                		mov.b	@(framectl,r1),r0		; Frameswap request
(1) 1109/ 60008BA : CA01                		xor	#1,r0
(1) 1110/ 60008BC : 6303                		mov	r0,r3
(1) 1111/ 60008BE : 801B                		mov.b	r0,@(framectl,r1)
(1) 1112/ 60008C0 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0		; And wait until it flips
(1) 1113/ 60008C2 : 3300                		cmp/eq	r0,r3
(1) 1114/ 60008C4 : 8BFC                		bf	.wait_frm
(1) 1115/ 60008C6 :                     
(1) 1116/ 60008C6 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1117/ 60008C8 : 400E                		ldc	r0,sr
(1) 1118/ 60008CA : A01F                		bra	master_loop
(1) 1119/ 60008CC : 0009                		nop
(1) 1120/ 60008CE :                     		align 4
(1) 1121/ 60008D0 :                     litr_MarsVideo_Init:
(1) 1122/ 60008D0 : 0600 071C           		dc.l MarsVideo_Init
(1) 1123/ 60008D4 : 0604 0000 0600 0000 		ltorg
                    0601 EC30 2000 4000 
                    2000 402E 0600 3428 
                    2400 0200 2000 4100 
                    FE10 FEE2 0530 FEE4 
                    4800 FE80 A518 FE92 
                    4600 0140 00E0      
(1) 1124/ 600090A :                     		align 4
(1) 1125/ 600090C :                     
(1) 1126/ 600090C :                     ; ----------------------------------------------------------------
(1) 1127/ 600090C :                     ; MASTER CPU loop
(1) 1128/ 600090C :                     ;
(1) 1129/ 600090C :                     ; comm12:
(1) 1130/ 600090C :                     ; bssscccc iir00lll
(1) 1131/ 600090C :                     ;
(1) 1132/ 600090C :                     ; b - Busy bit, this CPU can't be interrupted for CMD requests
(1) 1133/ 600090C :                     ; r - Clears when frame is ready.
(1) 1134/ 600090C :                     ; s - Status bits for some of the CMD interrupt tasks
(1) 1135/ 600090C :                     ; c - Command number for CMD interrupt
(1) 1136/ 600090C :                     ; i - Screen initialization bit(s)
(1) 1137/ 600090C :                     ; l - MAIN LOOP command/task, For any mode change fill the
(1) 1138/ 600090C :                     ;     ii bits: $C0+mode.
(1) 1139/ 600090C :                     ; ----------------------------------------------------------------
(1) 1140/ 600090C :                     
(1) 1141/ 600090C :                     		align 4
(1) 1142/ 600090C :                     master_loop:
(1) 1144/ 600090C : D118                		mov	#_sysreg+comm6,r1		; DEBUG counter
(1) 1145/ 600090E : 6010                		mov.b	@r1,r0
(1) 1146/ 6000910 : 7001                		add	#1,r0
(1) 1147/ 6000912 : 2100                		mov.b	r0,@r1
(1) 1149/ 6000914 :                     
(1) 1150/ 6000914 :                     	; ---------------------------------------
(1) 1151/ 6000914 :                     	; Copy the NEW DREQ data we just
(1) 1152/ 6000914 :                     	; got to the READ buffer
(1) 1153/ 6000914 :                     	; ---------------------------------------
(1) 1154/ 6000914 : D117                		mov	#_vdpreg,r1			; Check if we got late
(1) 1155/ 6000916 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0			; on VBlank
(1) 1156/ 6000918 : C880                		tst	#VBLK,r0
(1) 1157/ 600091A : 8BFC                		bf	.waitl
(1) 1158/ 600091C : 4F03                		stc	sr,@-r15
(1) 1159/ 600091E : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1160/ 6000920 : 600C                		extu.b	r0,r0
(1) 1161/ 6000922 : 400E                		ldc	r0,sr
(1) 1162/ 6000924 : C603                		mov	@(marsGbl_DmaWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1163/ 6000926 : 6103                		mov	r0,r1
(1) 1164/ 6000928 : C602                		mov	@(marsGbl_DmaRead,gbr),r0
(1) 1165/ 600092A : C203                		mov	r0,@(marsGbl_DmaWrite,gbr)
(1) 1166/ 600092C : 6013                		mov	r1,r0
(1) 1167/ 600092E : C202                		mov	r0,@(marsGbl_DmaRead,gbr)
(1) 1168/ 6000930 : 4F07                		ldc	@r15+,sr
(1) 1169/ 6000932 :                     
(1) 1170/ 6000932 :                     	; ---------------------------------------
(1) 1171/ 6000932 :                     	; Write palette using DREQ data
(1) 1172/ 6000932 :                     	; ---------------------------------------
(1) 1173/ 6000932 : D110                		mov	#_vdpreg,r1			; Wait until VBlank
(1) 1174/ 6000934 : 841A                .waitv:		mov.b	@(vdpsts,r1),r0
(1) 1175/ 6000936 : C880                		tst	#VBLK,r0
(1) 1176/ 6000938 : 89FC                		bt	.waitv
(1) 1177/ 600093A : C500                 		mov.w	@(marsGbl_XShift,gbr),r0	; Set SHIFT bit first (Xpos & 1)
(1) 1178/ 600093C : C901                		and	#1,r0
(1) 1179/ 600093E : 8111                		mov.w	r0,@(shift,r1)
(1) 1180/ 6000940 : C602                		mov	@(marsGbl_DmaRead,gbr),r0
(1) 1181/ 6000942 :                     ; 		mov	#Dreq_Palette,r1
(1) 1182/ 6000942 :                     ; 		add	r1,r0
(1) 1183/ 6000942 : 6103                		mov	r0,r1
(1) 1184/ 6000944 : D20C                		mov	#_palette,r2
(1) 1185/ 6000946 : E320                 		mov	#(256/8),r3
(1) 1186/ 6000948 :                     	; PALETTE MUST BE AT THE TOP OF DREQ DATA
(1) 1187/ 6000948 :                     	; so I don't need to add Dreq_Palette...
(1) 1188/ 6000948 :                     .copy_pal:
(1) 1189/ 6000948 :                     	rept 4
(1) 1190/ 6000948 :                     		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1191/ 6000948 :                     		mov	r0,@r2
(1) 1192/ 6000948 :                     		add	#4,r2
(1) 1193/ 6000948 :                     	endm
(1) 1190/ 6000948 : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1191/ 600094A : 2202                		mov	r0,@r2
(1) 1192/ 600094C : 7204                		add	#4,r2
(1) 1190/ 600094E : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1191/ 6000950 : 2202                		mov	r0,@r2
(1) 1192/ 6000952 : 7204                		add	#4,r2
(1) 1190/ 6000954 : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1191/ 6000956 : 2202                		mov	r0,@r2
(1) 1192/ 6000958 : 7204                		add	#4,r2
(1) 1190/ 600095A : 6016                		mov	@r1+,r0			; Copy colors as LONGs, works on hardware.
(1) 1191/ 600095C : 2202                		mov	r0,@r2
(1) 1192/ 600095E : 7204                		add	#4,r2
(1) 1194/ 6000960 : 4310                		dt	r3
(1) 1195/ 6000962 : 8BF1                		bf	.copy_pal
(1) 1196/ 6000964 :                     .not_ready:
(1) 1197/ 6000964 : D105                		mov	#_sysreg+comm12+1,r1		; Clear comm R bit
(1) 1198/ 6000966 : 6010                		mov.b	@r1,r0				; this tells to 68k that the frame is ready
(1) 1199/ 6000968 : C9DF                		and	#%11011111,r0
(1) 1200/ 600096A : 2100                		mov.b	r0,@r1
(1) 1201/ 600096C :                     
(1) 1202/ 600096C : AFCE                		bra	master_loop
(1) 1203/ 600096E : 0009                		nop
(1) 1204/ 6000970 :                     		align 4
(1) 1205/ 6000970 : 2000 4026 2000 4100 		ltorg
                    2000 4200 2000 402D 
(1) 1206/ 6000980 :                     
(1) 1207/ 6000980 :                     ; ====================================================================
(1) 1208/ 6000980 :                     ; ----------------------------------------------------------------
(1) 1209/ 6000980 :                     ; Slave entry
(1) 1210/ 6000980 :                     ; ----------------------------------------------------------------
(1) 1211/ 6000980 :                     
(1) 1212/ 6000980 :                     		align 4
(1) 1213/ 6000980 :                     SH2_S_Entry:
(1) 1214/ 6000980 : DF27                		mov	#STACK_SLV,r15		; Reset stack
(1) 1215/ 6000982 : D028                		mov	#SH2_Slave,r0		; Reset vbr
(1) 1216/ 6000984 : 402E                		ldc	r0,vbr
(1) 1217/ 6000986 : 915B                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 1218/ 6000988 : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 1219/ 600098A : 8010                		mov.b	r0,@(0,r1)
(1) 1220/ 600098C : E0E2                		mov.b	#$E2,r0
(1) 1221/ 600098E : 8017                		mov.b	r0,@(7,r1)
(1) 1222/ 6000990 : E000                		mov	#0,r0
(1) 1223/ 6000992 : 8014                		mov.b	r0,@(4,r1)
(1) 1224/ 6000994 : E001                		mov	#1,r0
(1) 1225/ 6000996 : 8015                		mov.b	r0,@(5,r1)
(1) 1226/ 6000998 : E000                		mov	#0,r0
(1) 1227/ 600099A : 8016                		mov.b	r0,@(6,r1)
(1) 1228/ 600099C : E001                		mov	#1,r0
(1) 1229/ 600099E : 8011                		mov.b	r0,@(1,r1)
(1) 1230/ 60009A0 : E000                		mov	#0,r0
(1) 1231/ 60009A2 : 8013                		mov.b	r0,@(3,r1)
(1) 1232/ 60009A4 : 8012                		mov.b	r0,@(2,r1)
(1) 1233/ 60009A6 : E0F2                		mov.b	#$F2,r0			; <-- PWM interrupt needs this
(1) 1234/ 60009A8 : 8017                		mov.b	r0,@(7,r1)
(1) 1235/ 60009AA : E000                		mov	#0,r0
(1) 1236/ 60009AC : 8014                		mov.b	r0,@(4,r1)
(1) 1237/ 60009AE : E001                		mov	#1,r0
(1) 1238/ 60009B0 : 8015                		mov.b	r0,@(5,r1)
(1) 1239/ 60009B2 : E0E2                		mov.b	#$E2,r0
(1) 1240/ 60009B4 : 8017                		mov.b	r0,@(7,r1)		; <-- ***
(1) 1241/ 60009B6 :                     	; Extra interrupt settings
(1) 1242/ 60009B6 : 9044                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 1243/ 60009B8 : 9144                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1244/ 60009BA : 2011                		mov.w   r1,@r0
(1) 1245/ 60009BC : 9043                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1246/ 60009BE : 9143                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 1247/ 60009C0 : 2011                		mov.w   r1,@r0
(1) 1248/ 60009C2 : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 1249/ 60009C4 : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 1250/ 60009C6 : 2012                		mov	r1,@r0
(1) 1251/ 60009C8 : D017                		mov	#RAM_Mars_Global,r0	; Reset gbr
(1) 1252/ 60009CA : 401E                		ldc	r0,gbr
(1) 1253/ 60009CC : BF14                		bsr	MarsSound_Init		; Init sound
(1) 1254/ 60009CE : 0009                		nop
(1) 1255/ 60009D0 :                     
(1) 1256/ 60009D0 :                     ; ====================================================================
(1) 1257/ 60009D0 :                     ; ----------------------------------------------------------------
(1) 1258/ 60009D0 :                     ; Slave main code
(1) 1259/ 60009D0 :                     ; ----------------------------------------------------------------
(1) 1260/ 60009D0 :                     
(1) 1261/ 60009D0 :                     SH2_S_HotStart:
(1) 1262/ 60009D0 : 913B                		mov.w	#$FE80,r1
(1) 1263/ 60009D2 : 903B                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1264/ 60009D4 : 2101                		mov.w	r0,@r1
(1) 1265/ 60009D6 : 913A                		mov.w	#_CCR&$FFFF,r1		; Reset CACHE
(1) 1266/ 60009D8 : E010                		mov	#$10,r0
(1) 1267/ 60009DA : 2100                		mov.b	r0,@r1
(1) 1268/ 60009DC : 0009                		nop
(1) 1269/ 60009DE : 0009                		nop
(1) 1270/ 60009E0 : 0009                		nop
(1) 1271/ 60009E2 : 0009                		nop
(1) 1272/ 60009E4 : 0009                		nop
(1) 1273/ 60009E6 : 0009                		nop
(1) 1274/ 60009E8 : 0009                		nop
(1) 1275/ 60009EA : E009                		mov	#9,r0
(1) 1276/ 60009EC : 2100                		mov.b	r0,@r1
(1) 1277/ 60009EE : D10F                		mov	#CACHE_SLAVE,r1
(1) 1278/ 60009F0 : 922E                		mov	#(CACHE_SLAVE_E-CACHE_SLAVE)/4,r2
(1) 1279/ 60009F2 : D00F                		mov	#Mars_LoadCacheRam,r0
(1) 1280/ 60009F4 : 400B                		jsr	@r0
(1) 1281/ 60009F6 : 0009                		nop
(1) 1282/ 60009F8 : D10E                		mov	#_sysreg,r1
(1) 1283/ 60009FA : 200A                    		xor	r0,r0
(1) 1284/ 60009FC : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1285/ 60009FE : 811B                		mov.w	r0,@(vintclr,r1)
(1) 1286/ 6000A00 : 811C                		mov.w	r0,@(hintclr,r1)
(1) 1287/ 6000A02 : 811D                		mov.w	r0,@(cmdintclr,r1)
(1) 1288/ 6000A04 : 811E                		mov.w	r0,@(pwmintclr,r1)
(1) 1289/ 6000A06 : 6011                		mov.w	@r1,r0
(1) 1290/ 6000A08 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0
(1) 1291/ 6000A0A :                     ; 		or	#CMDIRQ_ON,r0
(1) 1292/ 6000A0A : 2101                		mov.w	r0,@r1
(1) 1293/ 6000A0C : D10A                		mov	#_sysreg+comm12,r1
(1) 1294/ 6000A0E : 6011                .wait_mst:	mov.w	@r1,r0
(1) 1295/ 6000A10 : 2008                		tst	r0,r0
(1) 1296/ 6000A12 : 8BFC                		bf	.wait_mst
(1) 1297/ 6000A14 :                     
(1) 1298/ 6000A14 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1299/ 6000A16 : 400E                		ldc	r0,sr
(1) 1300/ 6000A18 : D008                		mov	#slave_loop,r0
(1) 1301/ 6000A1A : 402B                		jmp	@r0
(1) 1302/ 6000A1C : 0009                		nop
(1) 1303/ 6000A1E :                     		align 4
(1) 1304/ 6000A20 : 0603 F000 0600 0128 		ltorg
                    0601 EC30 0600 0AEC 
                    0600 0A7C 2000 4000 
                    2000 402C 0600 0A54 
                    FE10 FEE2 0530 FEE4 
                    4800 FE80 A518 FE92 
                    004F                
(1) 1305/ 6000A52 :                     
(1) 1306/ 6000A52 :                     ; ----------------------------------------------------------------
(1) 1307/ 6000A52 :                     ; SLAVE CPU loop
(1) 1308/ 6000A52 :                     ;
(1) 1309/ 6000A52 :                     ; comm14:
(1) 1310/ 6000A52 :                     ; bssscccc llllllll
(1) 1311/ 6000A52 :                     ;
(1) 1312/ 6000A52 :                     ; b - busy bit on the CMD interrupt
(1) 1313/ 6000A52 :                     ;     (so 68k knows that the interrupt is active)
(1) 1314/ 6000A52 :                     ; s - status bits for some CMD interrupt tasks
(1) 1315/ 6000A52 :                     ; c - command number for CMD interrupt
(1) 1316/ 6000A52 :                     ; l - MAIN LOOP command/task, clears on endstruct
(1) 1317/ 6000A52 :                     ; ----------------------------------------------------------------
(1) 1318/ 6000A52 :                     
(1) 1319/ 6000A52 :                     		align 4
(1) 1320/ 6000A54 :                     slave_loop:
(1) 1321/ 6000A54 :                     	; GemaSoundDriver
(1) 1322/ 6000A54 :                     ; 		bsr	MarsSound_Loop
(1) 1323/ 6000A54 :                     ; 		nop
(1) 1324/ 6000A54 :                     
(1) 1325/ 6000A54 :                     
(1) 1326/ 6000A54 :                     ; 		mov	#_DMASOURCE1,r1		; Check Channel 1
(1) 1327/ 6000A54 :                     ; 		mov	@($C,r1),r0		; Dummy READ
(1) 1328/ 6000A54 :                     ; 		tst	#%10,r0
(1) 1329/ 6000A54 :                     ; 		bf	.dont
(1) 1330/ 6000A54 :                     ; 		mov	#%0100010011100000,r0
(1) 1331/ 6000A54 :                     ; 		mov	r0,@($C,r1)		; Transfer mode + DMA enable OFF
(1) 1332/ 6000A54 :                     
(1) 1333/ 6000A54 : D102                		mov	#_sysreg+comm7,r1
(1) 1334/ 6000A56 : 6010                		mov.b	@r1,r0
(1) 1335/ 6000A58 : 7001                		add	#1,r0
(1) 1336/ 6000A5A : 2100                		mov.b	r0,@r1
(1) 1337/ 6000A5C : AFFA                		bra	slave_loop
(1) 1338/ 6000A5E : 0009                		nop
(1) 1339/ 6000A60 :                     		align 4
(1) 1340/ 6000A60 : 2000 4027           		ltorg
(1) 1341/ 6000A64 :                     
(1) 1342/ 6000A64 :                     ; ====================================================================
(1) 1343/ 6000A64 :                     ; ----------------------------------------------------------------
(1) 1344/ 6000A64 :                     ; Mars_ClearCacheRam
(1) 1345/ 6000A64 :                     ;
(1) 1346/ 6000A64 :                     ; Clear the entire "fast code" section for the current CPU
(1) 1347/ 6000A64 :                     ; ----------------------------------------------------------------
(1) 1348/ 6000A64 :                     
(1) 1349/ 6000A64 :                     		align 4
(1) 1350/ 6000A64 :                     Mars_ClearCacheRam:
(1) 1351/ 6000A64 : D112                		mov.l	#$C0000000+$800,r1
(1) 1352/ 6000A66 : E000                		mov	#0,r0
(1) 1353/ 6000A68 : 9226                		mov.w	#$80,r2
(1) 1354/ 6000A6A :                     .loop:
(1) 1355/ 6000A6A : 2106                		mov	r0,@-r1
(1) 1356/ 6000A6C : 2106                		mov	r0,@-r1
(1) 1357/ 6000A6E : 2106                		mov	r0,@-r1
(1) 1358/ 6000A70 : 2106                		mov	r0,@-r1
(1) 1359/ 6000A72 : 4210                		dt	r2
(1) 1360/ 6000A74 : 8BF9                		bf	.loop
(1) 1361/ 6000A76 : 000B                		rts
(1) 1362/ 6000A78 : 0009                		nop
(1) 1363/ 6000A7A :                     		align 4
(1) 1364/ 6000A7C :                     
(1) 1365/ 6000A7C :                     ; ----------------------------------------------------------------
(1) 1366/ 6000A7C :                     ; Mars_LoadCacheRam
(1) 1367/ 6000A7C :                     ;
(1) 1368/ 6000A7C :                     ; Loads "fast code" into the SH2's cache, $800 bytes maximum.
(1) 1369/ 6000A7C :                     ;
(1) 1370/ 6000A7C :                     ; Input:
(1) 1371/ 6000A7C :                     ; r1 - CACHE Code to send
(1) 1372/ 6000A7C :                     ; r2 - Size/4
(1) 1373/ 6000A7C :                     ;
(1) 1374/ 6000A7C :                     ; Breaks:
(1) 1375/ 6000A7C :                     ; r3
(1) 1376/ 6000A7C :                     ; ----------------------------------------------------------------
(1) 1377/ 6000A7C :                     
(1) 1378/ 6000A7C :                     		align 4
(1) 1379/ 6000A7C :                     Mars_LoadCacheRam:
(1) 1380/ 6000A7C : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 1381/ 6000A7E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 1382/ 6000A80 : 600C                		extu.b	r0,r0
(1) 1383/ 6000A82 : 400E                		ldc	r0,sr
(1) 1384/ 6000A84 : 9319                		mov	#_CCR,r3
(1) 1385/ 6000A86 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 1386/ 6000A88 : 2301                		mov.w	r0,@r3
(1) 1387/ 6000A8A : 0009                		nop
(1) 1388/ 6000A8C : 0009                		nop
(1) 1389/ 6000A8E : 0009                		nop
(1) 1390/ 6000A90 : 0009                		nop
(1) 1391/ 6000A92 : 0009                		nop
(1) 1392/ 6000A94 : 0009                		nop
(1) 1393/ 6000A96 : 0009                		nop
(1) 1394/ 6000A98 : 0009                		nop
(1) 1395/ 6000A9A : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 1396/ 6000A9C : 2301                		mov.w	r0,@r3
(1) 1397/ 6000A9E : D305                		mov 	#$C0000000,r3
(1) 1398/ 6000AA0 :                     .copy:
(1) 1399/ 6000AA0 : 6016                		mov 	@r1+,r0
(1) 1400/ 6000AA2 : 2302                		mov 	r0,@r3
(1) 1401/ 6000AA4 : 4210                		dt	r2
(1) 1402/ 6000AA6 : 8FFB                		bf/s	.copy
(1) 1403/ 6000AA8 : 7304                		add 	#4,r3
(1) 1404/ 6000AAA : 000B                		rts
(1) 1405/ 6000AAC : 4F07                		ldc	@r15+,sr
(1) 1406/ 6000AAE :                     		align 4
(1) 1407/ 6000AB0 : C000 0800 C000 0000 		ltorg
                    0080 FE92           
(1) 1408/ 6000ABC :                     
(1) 1409/ 6000ABC :                     ; --------------------------------------------------------
(1) 1410/ 6000ABC :                     ; Mars_SetWatchdog
(1) 1411/ 6000ABC :                     ;
(1) 1412/ 6000ABC :                     ; Prepares watchdog interrupt
(1) 1413/ 6000ABC :                     ;
(1) 1414/ 6000ABC :                     ; Input:
(1) 1415/ 6000ABC :                     ; r1 - Watchdog CPU clock divider
(1) 1416/ 6000ABC :                     ; r2 - Watchdog Pre-timer
(1) 1417/ 6000ABC :                     ; --------------------------------------------------------
(1) 1418/ 6000ABC :                     
(1) 1419/ 6000ABC :                     		align 4
(1) 1420/ 6000ABC :                     Mars_SetWatchdog:
(1) 1421/ 6000ABC : 0402                		stc	sr,r4
(1) 1422/ 6000ABE : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1423/ 6000AC0 : 600C                		extu.b	r0,r0
(1) 1424/ 6000AC2 : 400E                		ldc 	r0,sr
(1) 1425/ 6000AC4 : 930E                		mov.l	#_CCR,r3		; Refresh Cache
(1) 1426/ 6000AC6 : E008                		mov	#%00001000,r0		; Two-way mode
(1) 1427/ 6000AC8 : 2301                		mov.w	r0,@r3
(1) 1428/ 6000ACA : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 1429/ 6000ACC : 2301                		mov.w	r0,@r3
(1) 1430/ 6000ACE : 930A                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 1431/ 6000AD0 : 900A                		mov.w	#$5A00,r0		; Watchdog pre-timer
(1) 1432/ 6000AD2 : 202B                		or	r2,r0
(1) 1433/ 6000AD4 : 2301                		mov.w	r0,@r3
(1) 1434/ 6000AD6 : 9008                		mov.w	#$A538,r0		; Enable Watchdog
(1) 1435/ 6000AD8 : 201B                		or	r1,r0
(1) 1436/ 6000ADA : 2301                		mov.w	r0,@r3
(1) 1437/ 6000ADC : 440E                		ldc	r4,sr
(1) 1438/ 6000ADE : 000B                		rts
(1) 1439/ 6000AE0 : 0009                		nop
(1) 1440/ 6000AE2 :                     		align 4
(1) 1441/ 6000AE4 : FE92 FE80 5A00 A538 		ltorg
(1) 1442/ 6000AEC :                     
(1) 1443/ 6000AEC :                     ; ------------------------------------------------
(1) 1444/ 6000AEC :                     ; Includes
(1) 1445/ 6000AEC :                     ; ------------------------------------------------
(1) 1446/ 6000AEC :                     
(1) 1447/ 6000AEC :                     ; 		include "system/mars/cache/cache_m_2D.asm"
(1) 1448/ 6000AEC :                     ; 		include "system/mars/cache/cache_m_3D.asm"
(1) 1449/ 6000AEC :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6000AEC :                     ; ====================================================================
(2)    2/ 6000AEC :                     ; ----------------------------------------------------------------
(2)    3/ 6000AEC :                     ; CACHE code
(2)    4/ 6000AEC :                     ;
(2)    5/ 6000AEC :                     ; LIMIT: $800 bytes
(2)    6/ 6000AEC :                     ; ----------------------------------------------------------------
(2)    7/ 6000AEC :                     
(2)    8/ 6000AEC :                     		align 4
(2)    9/ 6000AEC :                     CACHE_SLAVE:
(2)   10/FFFFFFFFC0000000 :                     		phase $C0000000
(2)   11/FFFFFFFFC0000000 :                     
(2)   12/FFFFFFFFC0000000 :                     ; ====================================================================
(2)   13/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   14/FFFFFFFFC0000000 :                     ; PWM Interrupt
(2)   15/FFFFFFFFC0000000 :                     ;
(2)   16/FFFFFFFFC0000000 :                     ; **** MUST BE FAST ***
(2)   17/FFFFFFFFC0000000 :                     ; --------------------------------------------------------
(2)   18/FFFFFFFFC0000000 :                     
(2)   19/FFFFFFFFC0000000 :                     ; MarsPwm_Playback:
(2)   20/FFFFFFFFC0000000 :                     s_irq_pwm:
(2)   21/FFFFFFFFC0000000 : 9184                		mov	#_FRT,r1
(2)   22/FFFFFFFFC0000002 : 8417                		mov.b	@(7,r1),r0
(2)   23/FFFFFFFFC0000004 : CA02                		xor	#2,r0
(2)   24/FFFFFFFFC0000006 : 8017                		mov.b	r0,@(7,r1)
(2)   25/FFFFFFFFC0000008 : D13A                		mov	#_sysreg+pwmintclr,r1
(2)   26/FFFFFFFFC000000A : 2101                		mov.w	r0,@r1
(2)   27/FFFFFFFFC000000C : 6011                		mov.w	@r1,r0
(2)   28/FFFFFFFFC000000E : D03A                		mov	#Cach_SlvStack_S,r0
(2)   29/FFFFFFFFC0000010 : 2026                		mov	r2,@-r0
(2)   30/FFFFFFFFC0000012 : 2036                		mov	r3,@-r0
(2)   31/FFFFFFFFC0000014 : 2046                		mov	r4,@-r0
(2)   32/FFFFFFFFC0000016 : 2056                		mov	r5,@-r0
(2)   33/FFFFFFFFC0000018 : 2066                		mov	r6,@-r0
(2)   34/FFFFFFFFC000001A : 2076                		mov	r7,@-r0
(2)   35/FFFFFFFFC000001C : 2086                		mov	r8,@-r0
(2)   36/FFFFFFFFC000001E : 2096                		mov	r9,@-r0
(2)   37/FFFFFFFFC0000020 : 20A6                		mov	r10,@-r0
(2)   38/FFFFFFFFC0000022 : 4012                		sts	macl,@-r0
(2)   39/FFFFFFFFC0000024 :                     ; ------------------------------------------------
(2)   40/FFFFFFFFC0000024 :                     
(2)   41/FFFFFFFFC0000024 : DA35                		mov	#RAM_Mars_PwmList,r10
(2)   42/FFFFFFFFC0000026 : D936                		mov	#RAM_Mars_PwmRomRV,r9
(2)   43/FFFFFFFFC0000028 : E807                		mov	#MAX_PWMCHNL,r8
(2)   44/FFFFFFFFC000002A : E600                		mov	#0,r6		; r6 - left
(2)   45/FFFFFFFFC000002C : E700                		mov	#0,r7		; r7 - right
(2)   46/FFFFFFFFC000002E :                     .next_chnl:
(2)   47/FFFFFFFFC000002E : 50A0                		mov	@(mchnsnd_enbl,r10),r0
(2)   48/FFFFFFFFC0000030 : C880                		tst	#$80,r0
(2)   49/FFFFFFFFC0000032 : 8B02                		bf	.enabled
(2)   50/FFFFFFFFC0000034 : 916B                .silence:	mov	#$80,r1
(2)   51/FFFFFFFFC0000036 : A03F                		bra	.chnl_off
(2)   52/FFFFFFFFC0000038 : 6213                		mov	r1,r2
(2)   53/FFFFFFFFC000003A :                     .enabled:
(2)   54/FFFFFFFFC000003A : 55A3                		mov	@(mchnsnd_read,r10),r5
(2)   55/FFFFFFFFC000003C : 54A4                		mov	@(mchnsnd_len,r10),r4
(2)   56/FFFFFFFFC000003E : 53A6                		mov	@(mchnsnd_pitch,r10),r3
(2)   57/FFFFFFFFC0000040 : C808                		tst	#%1000,r0
(2)   58/FFFFFFFFC0000042 : 8900                		bt	.st_pitch
(2)   59/FFFFFFFFC0000044 : 4300                		shll	r3
(2)   60/FFFFFFFFC0000046 : 353C                .st_pitch:	add	r3,r5
(2)   61/FFFFFFFFC0000048 : 3543                		cmp/ge	r4,r5
(2)   62/FFFFFFFFC000004A : 8B07                		bf	.keep
(2)   63/FFFFFFFFC000004C : C804                		tst	#%0100,r0
(2)   64/FFFFFFFFC000004E : 8B02                		bf	.loopit
(2)   65/FFFFFFFFC0000050 : 200A                		xor	r0,r0		; r0 gone
(2)   66/FFFFFFFFC0000052 : AFEF                		bra	.silence
(2)   67/FFFFFFFFC0000054 : 1A00                		mov	r0,@(mchnsnd_enbl,r10)
(2)   68/FFFFFFFFC0000056 :                     .loopit:
(2)   69/FFFFFFFFC0000056 : 55A2                		mov	@(mchnsnd_start,r10),r5
(2)   70/FFFFFFFFC0000058 : 53A5                		mov	@(mchnsnd_loop,r10),r3
(2)   71/FFFFFFFFC000005A : 353C                		add	r3,r5
(2)   72/FFFFFFFFC000005C :                     .keep:
(2)   73/FFFFFFFFC000005C : 1A53                		mov	r5,@(mchnsnd_read,r10)
(2)   74/FFFFFFFFC000005E :                     
(2)   75/FFFFFFFFC000005E : 4519                		shlr8	r5
(2)   76/FFFFFFFFC0000060 : 54A1                		mov	@(mchnsnd_bank,r10),r4
(2)   77/FFFFFFFFC0000062 : 254B                		or	r4,r5
(2)   78/FFFFFFFFC0000064 : 401A                		lds	r0,macl
(2)   79/FFFFFFFFC0000066 :                     
(2)   80/FFFFFFFFC0000066 : 6354                		mov.b	@r5+,r3
(2)   81/FFFFFFFFC0000068 : 633C                		extu.b	r3,r3
(2)   82/FFFFFFFFC000006A : C808                		tst	#%1000,r0
(2)   83/FFFFFFFFC000006C : 8902                		bt	.do_mono
(2)   84/FFFFFFFFC000006E : 6454                		mov.b	@r5+,r4
(2)   85/FFFFFFFFC0000070 : A001                		bra	.go_wave
(2)   86/FFFFFFFFC0000072 : 644C                		extu.b	r4,r4
(2)   87/FFFFFFFFC0000074 :                     .do_mono:
(2)   88/FFFFFFFFC0000074 : 6433                		mov	r3,r4
(2)   89/FFFFFFFFC0000076 :                     
(2)   90/FFFFFFFFC0000076 :                     ; r3 - left byte
(2)   91/FFFFFFFFC0000076 :                     ; r4 - right byte
(2)   92/FFFFFFFFC0000076 : 2338                .go_wave:	tst	r3,r3
(2)   93/FFFFFFFFC0000078 : 8B00                		bf	.l_nonz
(2)   94/FFFFFFFFC000007A : 7301                		add	#1,r3
(2)   95/FFFFFFFFC000007C : 2448                .l_nonz:	tst	r4,r4
(2)   96/FFFFFFFFC000007E : 8B03                		bf	.mnon_z
(2)   97/FFFFFFFFC0000080 : 7401                		add	#1,r4
(2)   98/FFFFFFFFC0000082 : E180                		mov.b	#$80,r1
(2)   99/FFFFFFFFC0000084 : 611C                		extu.b	r1,r1
(2)  100/FFFFFFFFC0000086 : 6213                		mov	r1,r2
(2)  101/FFFFFFFFC0000088 : C802                .mnon_z:	tst	#%0010,r0
(2)  102/FFFFFFFFC000008A : 8900                		bt	.ml_out
(2)  103/FFFFFFFFC000008C : 6133                		mov	r3,r1
(2)  104/FFFFFFFFC000008E : C801                .ml_out:	tst	#%0001,r0
(2)  105/FFFFFFFFC0000090 : 8900                		bt	.do_vol
(2)  106/FFFFFFFFC0000092 : 6243                		mov	r4,r2
(2)  107/FFFFFFFFC0000094 :                     ; r1 - left
(2)  108/FFFFFFFFC0000094 :                     ; r2 - right
(2)  109/FFFFFFFFC0000094 :                     .do_vol:
(2)  110/FFFFFFFFC0000094 : 50A7                		mov	@(mchnsnd_vol,r10),r0
(2)  111/FFFFFFFFC0000096 : 4015                		cmp/pl	r0
(2)  112/FFFFFFFFC0000098 : 8B0E                		bf	.chnl_off
(2)  113/FFFFFFFFC000009A : 7001                		add	#1,r0
(2)  114/FFFFFFFFC000009C : 210E                		mulu	r0,r1
(2)  115/FFFFFFFFC000009E : 041A                		sts	macl,r4
(2)  116/FFFFFFFFC00000A0 : 4419                		shlr8	r4
(2)  117/FFFFFFFFC00000A2 : 3148                		sub	r4,r1
(2)  118/FFFFFFFFC00000A4 : 220E                		mulu	r0,r2
(2)  119/FFFFFFFFC00000A6 : 041A                		sts	macl,r4
(2)  120/FFFFFFFFC00000A8 : 4419                		shlr8	r4
(2)  121/FFFFFFFFC00000AA : 3248                		sub	r4,r2
(2)  122/FFFFFFFFC00000AC : 942F                		mov	#$80,r4
(2)  123/FFFFFFFFC00000AE : 240E                		mulu	r0,r4
(2)  124/FFFFFFFFC00000B0 : 001A                		sts	macl,r0
(2)  125/FFFFFFFFC00000B2 : 4019                		shlr8	r0
(2)  126/FFFFFFFFC00000B4 : 310C                		add	r0,r1
(2)  127/FFFFFFFFC00000B6 : 320C                		add	r0,r2
(2)  128/FFFFFFFFC00000B8 :                     .chnl_off:
(2)  129/FFFFFFFFC00000B8 : 361C                		add	r1,r6
(2)  130/FFFFFFFFC00000BA : 372C                		add	r2,r7
(2)  131/FFFFFFFFC00000BC : 7A24                		add	#sizeof_marssnd,r10
(2)  132/FFFFFFFFC00000BE : 9026                		mov	#MAX_PWMBACKUP,r0
(2)  133/FFFFFFFFC00000C0 : 4810                		dt	r8
(2)  134/FFFFFFFFC00000C2 : 8FB4                		bf/s	.next_chnl
(2)  135/FFFFFFFFC00000C4 : 390C                		add	r0,r9
(2)  136/FFFFFFFFC00000C6 : 9023                		mov	#$3FF,r0
(2)  137/FFFFFFFFC00000C8 : 3603                		cmp/ge	r0,r6
(2)  138/FFFFFFFFC00000CA : 8B00                		bf	.l_max
(2)  139/FFFFFFFFC00000CC : 6603                		mov	r0,r6
(2)  140/FFFFFFFFC00000CE :                     .l_max:
(2)  141/FFFFFFFFC00000CE : 3703                		cmp/ge	r0,r7
(2)  142/FFFFFFFFC00000D0 : 8B00                		bf	.r_max
(2)  143/FFFFFFFFC00000D2 : 6703                		mov	r0,r7
(2)  144/FFFFFFFFC00000D4 :                     .r_max:
(2)  145/FFFFFFFFC00000D4 : 4628                		shll16	r6
(2)  146/FFFFFFFFC00000D6 : 276B                		or	r6,r7
(2)  147/FFFFFFFFC00000D8 : D00A                		mov	#_sysreg+lchwidth,r0
(2)  148/FFFFFFFFC00000DA : 2072                		mov	r7,@r0
(2)  149/FFFFFFFFC00000DC :                     
(2)  150/FFFFFFFFC00000DC :                     ; ------------------------------------------------
(2)  151/FFFFFFFFC00000DC : D00A                		mov	#Cach_SlvStack_L,r0
(2)  152/FFFFFFFFC00000DE : 4016                		lds	@r0+,macl
(2)  153/FFFFFFFFC00000E0 : 6A06                		mov	@r0+,r10
(2)  154/FFFFFFFFC00000E2 : 6906                		mov	@r0+,r9
(2)  155/FFFFFFFFC00000E4 : 6806                		mov	@r0+,r8
(2)  156/FFFFFFFFC00000E6 : 6706                		mov	@r0+,r7
(2)  157/FFFFFFFFC00000E8 : 6606                		mov	@r0+,r6
(2)  158/FFFFFFFFC00000EA : 6506                		mov	@r0+,r5
(2)  159/FFFFFFFFC00000EC : 6406                		mov	@r0+,r4
(2)  160/FFFFFFFFC00000EE : 6306                		mov	@r0+,r3
(2)  161/FFFFFFFFC00000F0 : 000B                		rts
(2)  162/FFFFFFFFC00000F2 : 6206                		mov	@r0+,r2
(2)  163/FFFFFFFFC00000F4 :                     		align 4
(2)  164/FFFFFFFFC00000F4 : 2000 401C C000 013C 		ltorg
                    2601 F040 2601 F13C 
                    2000 4034 C000 0114 
                    FE10 0080 03FF      
(2)  165/FFFFFFFFC0000112 :                     
(2)  166/FFFFFFFFC0000112 :                     ; ====================================================================
(2)  167/FFFFFFFFC0000112 :                     
(2)  168/FFFFFFFFC0000112 :                     			align $10
(2)  169/FFFFFFFFC0000114 :                     Cach_SlvStack_L		ds.l 10				; ** Reg backup for PWM playback
(2)  170/FFFFFFFFC000013C :                     Cach_SlvStack_S		ds.l 0				; **
(2)  171/FFFFFFFFC000013C :                     
(2)  172/FFFFFFFFC000013C :                     ; ------------------------------------------------
(2)  173/ 6000C28 :                     .end:		phase CACHE_SLAVE+.end&$1FFF
(2)  174/ 6000C28 :                     
(2)  175/ 6000C28 :                     		align 4
(2)  176/ 6000C28 :                     CACHE_SLAVE_E:
(2)  180/ 6000C28 :                     
(1) 1450/ 6000C28 :                     
(1) 1451/ 6000C28 :                     ; ====================================================================
(1) 1452/ 6000C28 :                     ; ----------------------------------------------------------------
(1) 1453/ 6000C28 :                     ; Data
(1) 1454/ 6000C28 :                     ; ----------------------------------------------------------------
(1) 1455/ 6000C28 :                     
(1) 1456/ 6000C28 :                     		align 4
(1) 1457/ 6000C28 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 1458/ 6003428 :                     ; m_ascii	binclude "system/mars/data/m_ascii.bin"
(1) 1459/ 6003428 :                     		align 4
(1) 1460/ 6003428 :                     		include "game/data/mars_sdram.asm"
(2)    1/ 6003428 :                     ; ====================================================================
(2)    2/ 6003428 :                     ; ----------------------------------------------------------------
(2)    3/ 6003428 :                     ; SH2 SDRAM data
(2)    4/ 6003428 :                     ; 
(2)    5/ 6003428 :                     ; This data is stored on SDRAM, always available to use on the 32X
(2)    6/ 6003428 :                     ; side and can be rewritible, but it is smaller than ROM
(2)    7/ 6003428 :                     ;
(2)    8/ 6003428 :                     ; PWM samples can be used here but those take a lot of space...
(2)    9/ 6003428 :                     ; use ROM (mars_rom.asm) instead, those are RV-protected on SH2
(2)   10/ 6003428 :                     ; ----------------------------------------------------------------
(2)   11/ 6003428 :                     
(2)   12/ 6003428 :                     		align 4
(2)   13/ 6003428 :                     ArtMars_TEST:
(2)   14/ 6003428 :                     		binclude "game/data/TESTS/mars_art.bin"
(2)   15/ 6014C28 :                     
(2)   16/ 6014C28 :                     	align 4
(2)   17/ 6014C28 :                     SmpIns_TEST:
(2)   18/ 6014C28 : (MACRO)             	gSmpHead .end-.start,0
(2)   18/ 6014C28 : 00A0 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(2)   18/ 6014C2B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   19/ 6014C2E :                     .start:	binclude "sound/instr/smpl/test.wav",$2C,$A000
(2)   20/ 601EC2E :                     .end:
(2)   21/ 601EC2E :                     
(2)   22/ 601EC2E :                     ; SmpIns_TEST:
(2)   23/ 601EC2E :                     ; 	gSmpHead .end-.start,0
(2)   24/ 601EC2E :                     ; .start:	binclude "sound/instr/smpl/test.wav",$2C
(2)   25/ 601EC2E :                     ; .end:
(2)   26/ 601EC2E :                     ;
(2)   27/ 601EC2E :                     ; 	align 4
(2)   28/ 601EC2E :                     
(2)   29/ 601EC2E :                     ; SmpIns_TEST:
(2)   30/ 601EC2E :                     ; 	gSmpHead .end-.start,0
(2)   31/ 601EC2E :                     ; .start:	binclude "sound/instr/smpl/test.wav",$2C;,$4000
(2)   32/ 601EC2E :                     ; .end:
(2)   33/ 601EC2E :                     ; 	align 4
(2)   34/ 601EC2E :                     ; TEST_DMA:
(2)   35/ 601EC2E :                     ; ; 	if MARS
(2)   36/ 601EC2E :                     ; 	binclude "bodytalk_dma.wav",$2C,$4000
(2)   37/ 601EC2E :                     ; ; 	endif
(2)   38/ 601EC2E :                     ; TEST_DMA_e:
(2)   39/ 601EC2E :                     ; 	align 4
(2)   40/ 601EC2E :                     
(2)   41/ 601EC2E :                     
(1) 1461/ 601EC2E :                     
(1) 1462/ 601EC2E :                     ; ====================================================================
(1) 1463/ 601EC2E :                     ; ----------------------------------------------------------------
(1) 1464/ 601EC2E :                     ; GLOBAL GBR Variables
(1) 1465/ 601EC2E :                     ;
(1) 1466/ 601EC2E :                     ; SHARED FOR BOTH CPUS, watch out for the Read/Write conflicts.
(1) 1467/ 601EC2E :                     ;
(1) 1468/ 601EC2E :                     ; use dc's to set their STARTING values
(1) 1469/ 601EC2E :                     ; ----------------------------------------------------------------
(1) 1470/ 601EC2E :                     
(1) 1471/ 601EC2E :                     			align $10
(1) 1472/ 601EC30 :                     RAM_Mars_Global:
(1) 1473/ 601EC30 : (MACRO)             			struct 0
(1) 1473/ 601EC30 : =$601EC30           GLBL_LASTPC     set *
(1) 1473/   61F30 :                                     dephase
(1) 1473/   61F30 : =$61F30             GLBL_LASTORG    set *
(1) 1473/       0 :                                     phase 0
(1) 1474/       0 : 0000                marsGbl_XShift		dc.w 0
(1) 1475/       2 : 0000                marsGbl_PwmRefill	dc.w 0				; Refill flag
(1) 1476/       4 : 0000                marsGbl_PwmWIndex	dc.w 0
(1) 1477/       6 : 0000                marsGbl_PwmFull		dc.w 0
(1) 1478/       8 : 2601 EC40           marsGbl_DmaRead		dc.l RAM_Mars_DreqBuff_0|TH
(1) 1479/       C : 2601 EE40           marsGbl_DmaWrite	dc.l RAM_Mars_DreqBuff_1|TH
(1) 1480/      10 :                     sizeof_MarsGbl		ds.l 0
(1) 1481/      10 : (MACRO)             			endstruct
(1) 1481/       0 :                                     !org GLBL_LASTORG
(1) 1481/ 601EC30 :                                     phase GLBL_LASTPC
(1) 1482/ 601EC30 :                     			ds.b sizeof_MarsGbl		; <-- then reserve those gbrs
(1) 1483/ 601EC40 :                     
(1) 1484/ 601EC40 :                     ; ====================================================================
(1) 1485/ 601EC40 :                     ; ----------------------------------------------------------------
(1) 1486/ 601EC40 :                     ; MARS SH2 RAM
(1) 1487/ 601EC40 :                     ; ----------------------------------------------------------------
(1) 1488/ 601EC40 :                     
(1) 1489/ 601EC40 :                     			align $10
(1) 1490/ 601EC40 :                     SH2_RAM:
(1) 1491/2601EC40 :                     			phase SH2_RAM|TH
(1) 1492/2601EC40 :                     RAM_Mars_DreqBuff_0	ds.b sizeof_dreq			; DREQ data from Genesis
(1) 1493/2601EE40 :                     RAM_Mars_DreqBuff_1	ds.b sizeof_dreq			; ****
(1) 1494/2601F040 :                     RAM_Mars_PwmList	ds.b sizeof_marssnd*MAX_PWMCHNL		; PWM list
(1) 1495/2601F13C :                     RAM_Mars_PwmRomRV	ds.b MAX_PWMBACKUP*MAX_PWMCHNL		; WAVE ROM-temporal storage for RV=1
(1) 1496/2601F4BC :                     RAM_Mars_PwmTable	ds.b 8*8				; Gema Z80 table
(1) 1497/2601F4FC :                     sizeof_sh2all		ds.l 0
(1) 1498/2601F4FC :                     ; 			endstruct
(1) 1499/2601F4FC :                     
(1) 1500/2601F4FC :                     ; ====================================================================
(1) 1501/2601F4FC :                     
(1) 1502/2601F4FC :                     .here:
(1) 1503/2601F4FC : (MACRO)             		report "SH2 SDRAM CODE/DATA",sizeof_sh2all&$3FFFFF,(STACK_SLV-$1000)
(1) 1504/2601F4FC :                     
     494/2601F4FC :                     		cpu 68000
     495/2601F4FC :                     		padding off
     496/   627FC :                     		dephase
     501/   627FC :                     MARS_RAMDATA_E:
     502/   627FC :                     		align 4
     503/   627FC :                     
     504/   627FC :                     ; ====================================================================
     505/   627FC :                     ; --------------------------------------------------------
     506/   627FC :                     ; SH2's ROM-only stuff
     507/   627FC :                     ; This section will be gone if RV bit is set to 1
     508/   627FC :                     ; --------------------------------------------------------
     509/   627FC :                     
     511/ 20627FC :                     		phase CS1+*
     512/ 20627FC :                     		align 4
     513/ 20627FC :                     		include "sound/smpl_pwm.asm"		; GEMA: PWM samples
(1)    1/ 20627FC :                     ; ====================================================================
(1)    2/ 20627FC :                     ; --------------------------------------------------------
(1)    3/ 20627FC :                     ; GEMA/Nikona PWM instruments
(1)    4/ 20627FC :                     ;
(1)    5/ 20627FC :                     ; These MUST be located at SH2's ROM area: $02000000
(1)    6/ 20627FC :                     ; THE SDRAM area ($06000000) CAN be used but there's
(1)    7/ 20627FC :                     ; no enough storage the samples, the SH2 side supports
(1)    8/ 20627FC :                     ; ROM-protection in case the RV-bit is set for
(1)    9/ 20627FC :                     ; Genesis' DMA transfers.
(1)   10/ 20627FC :                     ;
(1)   11/ 20627FC :                     ; Sample data is 8-bit at 22050hz
(1)   12/ 20627FC :                     ; INCLUDING STEREO SAMPLES.
(1)   13/ 20627FC :                     ;
(1)   14/ 20627FC :                     ; *** PUT align 4 AT THE TOP OF EVERY LABEL ***
(1)   15/ 20627FC :                     ; --------------------------------------------------------
(1)   16/ 20627FC :                     
(1)   17/ 20627FC :                     
(1)   18/ 20627FC :                     
(1)   19/ 20627FC :                     	align 4
(1)   20/ 20627FC :                     
(1)   21/ 20627FC :                     ; Special sample data macro
(1)   22/ 20627FC :                     ; gSmpHead macro len,loop
(1)   23/ 20627FC :                     ; 	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   24/ 20627FC :                     ; 	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   25/ 20627FC :                     ; 	endm
(1)   26/ 20627FC :                     
(1)   27/ 20627FC :                     ; 	align 4
(1)   28/ 20627FC :                     ; SmpIns_Vctr01:
(1)   29/ 20627FC :                     ; 	gSmpHead .end-.start,58
(1)   30/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctr01.wav",$2C
(1)   31/ 20627FC :                     ; .end:
(1)   32/ 20627FC :                     ; 	align 4
(1)   33/ 20627FC :                     ; SmpIns_Vctr04:
(1)   34/ 20627FC :                     ; 	gSmpHead .end-.start,124
(1)   35/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctr04.wav",$2C
(1)   36/ 20627FC :                     ; .end:
(1)   37/ 20627FC :                     ; 	align 4
(1)   38/ 20627FC :                     ; SmpIns_VctrSnare:
(1)   39/ 20627FC :                     ; 	gSmpHead .end-.start,0
(1)   40/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctrSnare.wav",$2C
(1)   41/ 20627FC :                     ; .end:
(1)   42/ 20627FC :                     ; 	align 4
(1)   43/ 20627FC :                     ; SmpIns_VctrKick:
(1)   44/ 20627FC :                     ; 	gSmpHead .end-.start,0
(1)   45/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctrKick.wav",$2C
(1)   46/ 20627FC :                     ; .end:
(1)   47/ 20627FC :                     ; 	align 4
(1)   48/ 20627FC :                     ; SmpIns_VctrTimpani:
(1)   49/ 20627FC :                     ; 	gSmpHead .end-.start,0
(1)   50/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctrTimpani.wav",$2C
(1)   51/ 20627FC :                     ; .end:
(1)   52/ 20627FC :                     ; 	align 4
(1)   53/ 20627FC :                     ; SmpIns_VctrCrash:
(1)   54/ 20627FC :                     ; 	gSmpHead .end-.start,0
(1)   55/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctrCrash.wav",$2C
(1)   56/ 20627FC :                     ; .end:
(1)   57/ 20627FC :                     ; 	align 4
(1)   58/ 20627FC :                     ; SmpIns_VctrBrass:
(1)   59/ 20627FC :                     ; 	gSmpHead .end-.start,1004
(1)   60/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/pwm/vctrBrass.wav",$2C
(1)   61/ 20627FC :                     ; .end:
(1)   62/ 20627FC :                     ; 	align 4
(1)   63/ 20627FC :                     ; SmpIns_Snare_2:
(1)   64/ 20627FC :                     ; 	gSmpHead .end-.start,0
(1)   65/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/snare_2.wav",$2C
(1)   66/ 20627FC :                     ; .end:
(1)   67/ 20627FC :                     ; 	align 4
(1)   68/ 20627FC :                     
(1)   69/ 20627FC :                     ; SmpIns_TEST:
(1)   70/ 20627FC :                     ; 	gSmpHead .end-.start,0
(1)   71/ 20627FC :                     ; .start:	binclude "sound/instr/smpl/test_st.wav",$2C
(1)   72/ 20627FC :                     ; .end:
(1)   73/ 20627FC :                     ; 	align 4
(1)   74/ 20627FC :                     
(1)   75/ 20627FC :                     
(1)   76/ 20627FC :                     
(1)   77/ 20627FC :                     
     514/ 20627FC :                     		include "game/data/mars_rom.asm"
(1)    1/ 20627FC :                     ; ====================================================================
(1)    2/ 20627FC :                     ; ----------------------------------------------------------------
(1)    3/ 20627FC :                     ; SH2 ROM data
(1)    4/ 20627FC :                     ;
(1)    5/ 20627FC :                     ; If your data is too much for SDRAM, place it here.
(1)    6/ 20627FC :                     ; BUT keep in mind that this entire section will be gone
(1)    7/ 20627FC :                     ; if the Genesis performs DMA-to-VDP Transfers
(1)    8/ 20627FC :                     ; which requires RV=1 (Revert ROM to original position)
(1)    9/ 20627FC :                     ; ***EMULATORS IGNORE THIS LIMITATION***
(1)   10/ 20627FC :                     ;
(1)   11/ 20627FC :                     ; Only access here on these conditions:
(1)   12/ 20627FC :                     ; - Stop all tracks that use PWM samples
(1)   13/ 20627FC :                     ; - If you wanna keep any tracks active: set 1 to marsBlock
(1)   14/ 20627FC :                     ;   in the Z80 driver, all tracks will continue playing using
(1)   15/ 20627FC :                     ;   only the PSG and FM instruments
(1)   16/ 20627FC :                     ;   (TODO: check how it peforms)
(1)   17/ 20627FC :                     ;
(1)   18/ 20627FC :                     ; The PWM samples are safe to use with the implementation
(1)   19/ 20627FC :                     ; of a sample-backup routine that the 68K requests before
(1)   20/ 20627FC :                     ; doing DMA
(1)   21/ 20627FC :                     ; ----------------------------------------------------------------
(1)   22/ 20627FC :                     
(1)   23/ 20627FC :                     	align 4
(1)   24/ 20627FC :                     
(1)   25/ 20627FC :                     ; --------------------------------------------------------
(1)   26/ 20627FC :                     ; 32X MAP data: Block graphics and Layout
(1)   27/ 20627FC :                     ; --------------------------------------------------------
(1)   28/ 20627FC :                     
(1)   29/ 20627FC :                     ; 		align 4
(1)   30/ 20627FC :                     ; MapBlk_M:	binclude "game/data/maps/2D/level0/m_art.bin"
(1)   31/ 20627FC :                     ; 		align 4
(1)   32/ 20627FC :                     ; MapFg_M:	binclude "game/data/maps/2D/level0/m_fg.bin"
(1)   33/ 20627FC :                     ; 		align 4
(1)   34/ 20627FC :                     
(1)   35/ 20627FC :                     ; --------------------------------------------------------
(1)   36/ 20627FC :                     ; Graphics
(1)   37/ 20627FC :                     ; --------------------------------------------------------
(1)   38/ 20627FC :                     
(1)   39/ 20627FC :                     		include "game/data/m_graphics.asm"
(2)    1/ 20627FC :                     ; ====================================================================
(2)    2/ 20627FC :                     ; ----------------------------------------------------------------
(2)    3/ 20627FC :                     ; Put your 32X graphics here, indexed or direct
(2)    4/ 20627FC :                     ;
(2)    5/ 20627FC :                     ; These are located on the SH2's ROM area, this will be gone
(2)    6/ 20627FC :                     ; if RV is set to 1
(2)    7/ 20627FC :                     ;
(2)    8/ 20627FC :                     ; Labels MUST be aligned by 4
(2)    9/ 20627FC :                     ; ----------------------------------------------------------------
(2)   10/ 20627FC :                     
(2)   11/ 20627FC :                     		align 4
(2)   12/ 20627FC :                     ; ArtMars_TEST:
(2)   13/ 20627FC :                     ; 		binclude "game/data/TESTS/test_art.bin"
(2)   14/ 20627FC :                     ; 		align 2
(2)   15/ 20627FC :                     
(1)   40/ 20627FC :                     
(1)   41/ 20627FC :                     ; --------------------------------------------------------
(1)   42/ 20627FC :                     ; Models
(1)   43/ 20627FC :                     ; --------------------------------------------------------
(1)   44/ 20627FC :                     
(1)   45/ 20627FC :                     ; 		align 4
(1)   46/ 20627FC :                     ; 		include "game/data/maps/3D/mcity/mars_data.asm"
(1)   47/ 20627FC :                     ; 		align 4
(1)   48/ 20627FC :                     
(1)   49/ 20627FC :                     ; MarsObj_test:
(1)   50/ 20627FC :                     ; 		include "game/data/mars/objects/mdl/test/head.asm"
(1)   51/ 20627FC :                     
(1)   52/ 20627FC :                     
     515/   627FC :                     		dephase
     517/   627FC :                     
     518/   627FC :                     ; ====================================================================
     519/   627FC :                     ; ---------------------------------------------
     520/   627FC :                     ; End
     521/   627FC :                     ; ---------------------------------------------
     522/   627FC :                     
     523/   627FC :                     ROM_END:
     527/   627FC :                     		align $8000		; Pad the Cartridge
     529/   68000 :                     
 AS V1.42 Beta [Bld 118] - source file main.asm - page 2 - 8/2/2023 1:44:46


  symbol table (* = unused):
  ------------------------

 ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ARTMARS_TEST :             6003428 C | *ARTMD_TEST :                 30C00 C |
*ARTMD_TEST_E :               38360 C |  ART_EMI :                    40300 C |
*ART_EMI_E :                  43300 C |  ART_TESTBOARD :              40000 C |
 ART_TESTBOARD_E :            40300 C |  ASCII_FONT :                 30000 C |
 ASCII_FONT_E :               30C00 C |  ASCII_PAL :       FFFFFFFFFFFF0284 C |
*ASCII_PAL_E :     FFFFFFFFFFFF02A4 C |  ATK :                            8 - |
*BIGENDIAN :                      0 - | *BITBGON :                        7 - |
*BITCLICKL :                      1 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      0 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITDRWD :                        2 - |
*BITDRWL :                        1 - | *BITDRWR :                        0 - |
*BITDRWU :                        3 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - | *BITJOYB :                        4 - |
*BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - |  BITJOYMODE :                     B - |
 BITJOYRIGHT :                    3 - | *BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
 BITMAPMD :                       1 - | *BITMARSBG :                      6 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - |
 BOARD_CHECKMATCH :                                        FFFFFFFFFFFF1AB2 C |
 BOARD_CHECKMATCH.XS_OFF :                                 FFFFFFFFFFFF1B14 C |
 BOARD_CHECKMATCH.X_CHK :                                  FFFFFFFFFFFF1AC2 C |
 BOARD_CHECKMATCH.X_CHK_N :                                FFFFFFFFFFFF1ABC C |
 BOARD_CHECKMATCH.X_OFF :                                  FFFFFFFFFFFF1AD6 C |
 BOARD_CHECKMATCH.Y_CHK :                                  FFFFFFFFFFFF1AEA C |
 BOARD_CHECKMATCH.Y_CHK_N :                                FFFFFFFFFFFF1AE2 C |
 BOARD_CHECKMATCH.Y_OFF :                                  FFFFFFFFFFFF1AFE C |
 BOARD_RESET :     FFFFFFFFFFFF1B16 C |
 BOARD_RESET.NOCLRRQ :                                     FFFFFFFFFFFF1B9C C |
 BOARD_RESET.NXTCLR :                                      FFFFFFFFFFFF1B94 C |
 BOARD_RESET.X_CHK :                                       FFFFFFFFFFFF1B28 C |
 BOARD_RESET.X_CHK_N :                                     FFFFFFFFFFFF1B20 C |
 BOARD_RESET.X_CLR :                                       FFFFFFFFFFFF1B3C C |
 BOARD_RESET.X_OFF :                                       FFFFFFFFFFFF1B48 C |
 BOARD_RESET.Y_CHK :                                       FFFFFFFFFFFF1B60 C |
 BOARD_RESET.Y_CHK_N :                                     FFFFFFFFFFFF1B58 C |
 BOARD_RESET.Y_CLR :                                       FFFFFFFFFFFF1B7A C |
 BOARD_RESET.Y_OFF :                                       FFFFFFFFFFFF1B86 C |
 BOARD_SWAPPOS :   FFFFFFFFFFFF1BA6 C |
 BOARD_SWAPPOS.DRAW_ALL :                                  FFFFFFFFFFFF1BB8 C |
 BOARD_SWAPPOS.IS_OFF2 :                                   FFFFFFFFFFFF1C02 C |
 BOARD_SWAPPOS.NBDW2 :                                     FFFFFFFFFFFF1BB6 C |
 BOARD_SWAPPOS.NEXT_Y2 :                                   FFFFFFFFFFFF1C08 C |
 BOARD_SWAPPOS.NXT_X :                                     FFFFFFFFFFFF1BCE C |
 BOARD_SWAPPOS.NXT_Y :                                     FFFFFFFFFFFF1BC8 C |
 BOARD_SWAPPOS.SWITCH_VRAM :                               FFFFFFFFFFFF1C3A C |
 BOARD_SWAPPOS.THIS_BLK :                                  FFFFFFFFFFFF1BEA C |
*BOARD_SWAPPOS.YPOS_EX :                                   FFFFFFFFFFFF1C2E C |
*BRANCHEXT :                      0 - |  CACHE_SLAVE :              6000AEC C |
 CACHE_SLAVE_E :            6000C28 C |  CACH_SLVSTACK_L : FFFFFFFFC0000114 C |
 CACH_SLVSTACK_S : FFFFFFFFC000013C C |
 CACH_SLVSTACK_S.END :                                     FFFFFFFFC000013C C |
*CART :                           1 - | *CASESENSITIVE :                  0 - |
 CHIP_ENV :                     FF6 C |  CHIP_ENV.ATKEND :             1079 C |
*CHIP_ENV.ATKZERO :            107C C |  CHIP_ENV.CHK2 :               1082 C |
 CHIP_ENV.CHK4 :               10B7 C |  CHIP_ENV.CKOF :               101A C |
 CHIP_ENV.CKON :               102D C | *CHIP_ENV.DECTMR :             1086 C |
 CHIP_ENV.DKADD :              10A0 C |  CHIP_ENV.DKSAV :              10A8 C |
 CHIP_ENV.DKYEND :             10AD C |  CHIP_ENV.DO_NFREQ :           110C C |
 CHIP_ENV.ENVPROC :            104B C |  CHIP_ENV.KILLENV :            10CD C |
*CHIP_ENV.NBLOCK :             104B C |  CHIP_ENV.NORMAL :             1107 C |
 CHIP_ENV.NOUPD :              114D C |  CHIP_ENV.NSKIP :              1042 C |
 CHIP_ENV.SILNC_3 :            1103 C |  CHIP_ENV.VEDLP :              10D5 C |
 CHIP_ENV.VLMUCH :             1139 C |  CHIP_ENV.VLOOP :              1002 C |
 CHIP_ENV.VONLY :              112F C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - | *COMM1 :                         21 - |
 COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
 COMM6 :                         26 - |  COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                   17A9 C |
 COMMZROMBLK :                   81 C |  COMMZWRITE :                    80 C |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFF9800 - |
 CONTROLLER_2 :    FFFFFFFFFFFF9810 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - | *CSCRN0_E :        FFFFFFFFFFFF1E94 C |
*CSCRN0_S :        FFFFFFFFFFFF1800 C |  CURRTICKBITS :                  2E C |
 CYCLE :                         32 - | *DACINS_SNARE_1 :            90B444 C |
 DACINS_SNARE_1.END :        90C56E C |  DACINS_SNARE_1.START :      90B44A C |
*DACINS_TESTINS :            90C56E C |  DACINS_TESTINS.END :        91AC74 C |
 DACINS_TESTINS.START :      90C574 C | *DACINS_WEGOT_CRASH :        908000 C |
 DACINS_WEGOT_CRASH.END :    90ACCA C |  DACINS_WEGOT_CRASH.START :  908006 C |
*DACINS_WEGOT_KICK :         90ACCA C |  DACINS_WEGOT_KICK.END :     90B444 C |
 DACINS_WEGOT_KICK.START :   90ACD0 C |  DAC_FILL :                      20 C |
 DAC_FIRSTFILL :               11D6 C |  DAC_ME :                         8 C |
 DAC_OFF :                     118D C |  DAC_ON :                      1178 C |
 DAC_PLAY :                    11A2 C |  DAC_REFILL :                  11D6 C |
 DAC_REFILL.DACFILL_END :      1295 C |  DAC_REFILL.DACFILL_LOOP :     124E C |
 DAC_REFILL.DACFILL_RET :      1298 C |  DAC_REFILL.DAC_OVER :         1224 C |
*DATE :                    8/2/2023 - |  DDACCNTR :                      33 C |
 DDACFIFOMID :                   2F C |  DDACPNTR :                      30 C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DOTTEDSTRUCTS :                  0 - |
 DREQCTL :                        6 - | *DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DREQ_PALETTE :                   0 C |
 DRV_LOOP :                      87 C |  DRV_LOOP.CMND_0 :              12F C |
 DRV_LOOP.CMND_1 :              132 C |  DRV_LOOP.CMND_2 :              14F C |
 DRV_LOOP.CMND_8 :              16C C |  DRV_LOOP.CMND_C :              18E C |
 DRV_LOOP.FOUND :               1CC C |  DRV_LOOP.GETCBYTEL :            F2 C |
 DRV_LOOP.GRAB_ARG :             F0 C |  DRV_LOOP.LIST :                10F C |
 DRV_LOOP.NEITHER :              C7 C |  DRV_LOOP.NEXT :                1A6 C |
 DRV_LOOP.NEXT_CMD :             CD C |  DRV_LOOP.NEXT_SALL :           170 C |
 DRV_LOOP.NOBEATS :              AE C |  DRV_LOOP.NOTICKS :              A1 C |
 DRV_LOOP.NOT_FND :             1C7 C |  DRV_LOOP.NOT_ON :              186 C |
 DRV_LOOP.SRCH_FRID :           19F C |  DTBL_FROMMUL :                 6E8 C |
 DTBL_FROMMUL.CHNL_ULNK :       DB8 C |  DTBL_FROMMUL.CHNL_ULNKCUT :    DC7 C |
 DTBL_FROMMUL.CHNL_ULNKOFF :    DB6 C |  DTBL_FROMMUL.DAC_CUT :         946 C |
 DTBL_FROMMUL.DAC_INS :         BCA C |  DTBL_FROMMUL.DAC_OFF :         94C C |
 DTBL_FROMMUL.DAC_PITCH :       94F C |  DTBL_FROMMUL.D_CONT :          AB3 C |
 DTBL_FROMMUL.EFFC :            A20 C |  DTBL_FROMMUL.EFFC_D :          A3B C |
 DTBL_FROMMUL.EFFC_E :          A7E C |  DTBL_FROMMUL.EFFC_F :          A93 C |
 DTBL_FROMMUL.EFFC_X :          AB4 C |  DTBL_FROMMUL.FINE_DOWN :       A56 C |
 DTBL_FROMMUL.FINE_UP :         A6A C |  DTBL_FROMMUL.FMSPC_SET :       885 C |
 DTBL_FROMMUL.FM_CINDX :        D7A C |  DTBL_FROMMUL.FM_CUT :          916 C |
 DTBL_FROMMUL.FM_HASVOL :       C6E C |  DTBL_FROMMUL.FM_INS :          B49 C |
 DTBL_FROMMUL.FM_KEYOFF :       CD2 C |  DTBL_FROMMUL.FM_OFF :          910 C |
 DTBL_FROMMUL.FM_PANLIST :      ADD C |  DTBL_FROMMUL.FM_SETFREQ :      CF1 C |
 DTBL_FROMMUL.FM_SETRLIST :     BBA C |  DTBL_FROMMUL.FM_TLOFF :        CDA C |
 DTBL_FROMMUL.FM_WRTALPAN :     D82 C |  DTBL_FROMMUL.FM_WRTLVOL :      D08 C |
 DTBL_FROMMUL.FND_OCT :         CBF C |  DTBL_FROMMUL.FROM_PSGN :       7CA C |
 DTBL_FROMMUL.GET_OCT :         CAF C |  DTBL_FROMMUL.INST :            AEE C |
*DTBL_FROMMUL.INVL_INS :        B0C C |  DTBL_FROMMUL.KYCUT_PSG :       81C C |
 DTBL_FROMMUL.KYCUT_PSGN :      817 C |  DTBL_FROMMUL.KYOFF_PSG :       80C C |
 DTBL_FROMMUL.KYOFF_PSGN :      807 C |  DTBL_FROMMUL.LINKED :          745 C |
 DTBL_FROMMUL.MK_DAC :          91F C |  DTBL_FROMMUL.MK_FM :           827 C |
 DTBL_FROMMUL.MK_FMSPC :        899 C |  DTBL_FROMMUL.MK_LIST :         783 C |
 DTBL_FROMMUL.MK_PSG :          7B1 C |  DTBL_FROMMUL.MK_PSGN :         793 C |
 DTBL_FROMMUL.MK_PWM :          975 C |  DTBL_FROMMUL.NEW_ROMDAT :      B7D C |
 DTBL_FROMMUL.NOFM_NOTE :       85C C |  DTBL_FROMMUL.NORM_DOWN :       A54 C |
 DTBL_FROMMUL.NORM_UP :         A6C C |  DTBL_FROMMUL.NOTE :            C64 C |
 DTBL_FROMMUL.NOT_DAC :         859 C |  DTBL_FROMMUL.NOT_DSPC :        850 C |
 DTBL_FROMMUL.NO_LFO :          DB5 C |  DTBL_FROMMUL.N_FM :            CA5 C |
 DTBL_FROMMUL.N_INDX :          C91 C |  DTBL_FROMMUL.N_PSGN :          CA0 C |
 DTBL_FROMMUL.N_STFREQ :        C92 C |  DTBL_FROMMUL.PN_INS :          B0D C |
 DTBL_FROMMUL.PSG_KEYON :       7F1 C |  DTBL_FROMMUL.PS_INS :          B13 C |
 DTBL_FROMMUL.PWM_CUT :         A11 C |  DTBL_FROMMUL.PWM_INS :         C21 C |
 DTBL_FROMMUL.PWM_OFF :         A02 C |  DTBL_FROMMUL.PWV_MUCH :        9FE C |
 DTBL_FROMMUL.PW_EFFC :         99F C |  DTBL_FROMMUL.PW_NOTE :         9A6 C |
 DTBL_FROMMUL.PW_SEND :         9AB C |  DTBL_FROMMUL.PW_SETUP :        9CF C |
 DTBL_FROMMUL.RCYL_COM :        739 C |  DTBL_FROMMUL.RES_PAN :         AD3 C |
 DTBL_FROMMUL.SAME_PATCH :      BB5 C |  DTBL_FROMMUL.SAVE_ARG :        AA8 C |
 DTBL_FROMMUL.SILN_DAC :        726 C |  DTBL_FROMMUL.SILN_FM :         729 C |
 DTBL_FROMMUL.SILN_PSG :        71F C |  DTBL_FROMMUL.SILN_PSG_N :      71B C |
 DTBL_FROMMUL.SILN_PWM :        72F C |  DTBL_FROMMUL.TL_DOWN :         CE4 C |
 DTBL_FROMMUL.VMUCH :           7FD C |  DTBL_FROMMUL.VOLU :            AE5 C |
 DTBL_FROMMUL.VOL_DVLD :        A7A C |  DTBL_FROMMUL.WRITE_TL :        D6D C |
 DTBL_MULTI :                   6D1 C |  DTBL_SINGL :                   6E7 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C |  EMILIE_MKSPRITE : FFFFFFFFFFFF1CD0 C |
 EMILIE_MKSPRITE.HIDEFUJI :                                FFFFFFFFFFFF1D74 C |
 EMILIE_MKSPRITE.MIDSHK :                                  FFFFFFFFFFFF1D32 C |
*EMILIE_MKSPRITE.NO_UPD :                                  FFFFFFFFFFFF1D72 C |
 EMILIE_MKSPRITE.NO_UPDGFX :                               FFFFFFFFFFFF1D14 C |
 EMILIE_MOVE :     FFFFFFFFFFFF1C52 C |
 EMILIE_MOVE.EXIMUCH :                                     FFFFFFFFFFFF1CA6 C |
 EMILIE_MOVE.MOVE_IT :                                     FFFFFFFFFFFF1CAE C |
 EMILIE_MOVE.REVERSX :                                     FFFFFFFFFFFF1CC2 C |
 EMILIE_MOVE.SAME_X :                                      FFFFFFFFFFFF1CCE C |
 EMILIE_MOVE.TOOMUCH :                                     FFFFFFFFFFFF1CA0 C |
 EMU :                            1 - | *EXTR_3 :                         A C |
*EXTR_4 :                         C C | *EXTR_5 :                         E C |
 EX_COMM :                      DDA C |  EX_COMM.BLOCKED :              E7A C |
 EX_COMM.CLRCOM :               E81 C |  EX_COMM.NEXT_COMM :            E52 C |
 EX_COMM.NEXT_PASS :            E47 C |  EX_COMM.WAIT_ENTER :           E1B C |
 EX_COMM.W_PASS2 :              E68 C | *FALSE :                          0 - |
 FBVRAM_BLANK :               1F800 - | *FBVRAM_PATCH :               1D000 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FMCACH_1 :                    1600 C |  FMCACH_2 :                    1628 C |
 FMCACH_3 :                    1650 C |  FMCACH_4 :                    1678 C |
 FMCACH_5 :                    16A0 C |  FMCACH_6 :                    16C8 C |
 FMCACH_LIST :                 1496 C |  FMFREQ_LIST :                 129C C |
*FMINS_AMBIENT_3 :           8844E7 C | *FMINS_AMBIENT_DARK :        8844A7 C |
*FMINS_AMBIENT_SPOOK :       8844C7 C | *FMINS_BANJO_PUY :           884567 C |
*FMINS_BASS_1 :              884327 C | *FMINS_BASS_2 :              884347 C |
*FMINS_BASS_4 :              884167 C | *FMINS_BASS_8 :              884187 C |
*FMINS_BASS_CALM :           8841E7 C | *FMINS_BASS_CLUB :           8841C7 C |
*FMINS_BASS_DONNA :          884367 C | *FMINS_BASS_DUCK :           884407 C |
*FMINS_BASS_GROOVE :         884387 C | *FMINS_BASS_GROOVE_2 :       8843A7 C |
*FMINS_BASS_GROOVE_GEM :     8843C7 C | *FMINS_BASS_ITALO :          8843E7 C |
*FMINS_BASS_OIL :            884267 C | *FMINS_BRASS_EUR :           884247 C |
*FMINS_BRASS_PUY :           884527 C | *FMINS_CLOSEDHAT :           8842E7 C |
*FMINS_DING_1 :              8845A7 C | *FMINS_DING_BASEBALL :       8842A7 C |
 FMINS_DING_TOY :            884507 C | *FMINS_DRUMKICK_GEM :        8842C7 C |
*FMINS_FLAUTE_CAVE :         884547 C |  FMINS_FM3_EXPLOSION :       8840C7 C |
*FMINS_HBEAT_TOM :           8845E7 C | *FMINS_MARIMBA :             884487 C |
*FMINS_ORGAN_ITO :           884287 C | *FMINS_PIANOM1 :             884307 C |
*FMINS_PIANO_AQUA :          884427 C | *FMINS_PSYNTH_PLUS :         884587 C |
*FMINS_SP_CLOSEDHAT :        884117 C | *FMINS_SP_COWBELL :          88413F C |
*FMINS_SP_OPENHAT :          8840EF C | *FMINS_SYNTH_PLUS :          8841A7 C |
*FMINS_TROMBONE_GEM :        8845C7 C | *FMINS_TRUMPET_1 :           884207 C |
*FMINS_TRUMPET_2 :           884447 C | *FMINS_TRUMPET_CARNIVAL :    884227 C |
*FMINS_TRUMPET_PUY :         884467 C |  FMSPECIAL :                   1794 C |
 FM_AUTOREG :                  1159 C |  FM_SEND_1 :                   1162 C |
 FM_SEND_2 :                   116D C |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
*GEMACD_REPORT :             883F9E C | *GEMACD_REPORT_E :           884607 C |
 GEMADMAPAUSE :    FFFFFFFFFFFF00FA C |  GEMADMAPAUSEROM : FFFFFFFFFFFF013C C |
 GEMADMARESUME :   FFFFFFFFFFFF0122 C |
 GEMADMARESUMEROM :                                        FFFFFFFFFFFF016C C |
 GEMAPLAYFROMBLK : FFFFFFFFFFFF01C2 C |  GEMAPLAYTRACK :   FFFFFFFFFFFF01A6 C |
*GEMASETBEATS :    FFFFFFFFFFFF0204 C |  GEMASFX_ALL :               88401E C |
 GEMASFX_ALL.BLK :           88402A C |  GEMASFX_ALL.INS :           884080 C |
 GEMASFX_ALL.PAT :           88402E C | *GEMASTOPALL :     FFFFFFFFFFFF01F4 C |
*GEMASTOPTRACK :   FFFFFFFFFFFF01DE C | *GEMATEST :        FFFFFFFFFFFF0196 C |
 GEMATRK_TEST_0 :            884098 C |  GEMATRK_TEST_0.BLK :        8840A4 C |
 GEMATRK_TEST_0.INS :        8840BF C |  GEMATRK_TEST_0.PAT :        8840A7 C |
 GEMA_INIT :                    E86 C |  GEMA_INIT.END_SETUP :          F2C C |
 GEMA_INIT.SETUP_LIST :         EE1 C |  GEMA_INIT.ST_COPY :            F00 C |
 GEMA_MASTERLIST :           883F9E C |  GET_ROMTRCKS :                 4D1 C |
 GET_TICK :                     F34 C |  GET_TICK.CTNOTICK :            F51 C |
 GLBL_LASTORG :               61F30 - |  GLBL_LASTPC :              601EC30 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - | *HCOUNT :                         5 - |
 HEADEROUT :                   1795 C |  HEADEROUT_E :                 17A1 C |
 HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :    FFFFFFFFFFFF109E C | *HIRQ_ON :                        4 - |
*HVSTOP :                         2 - | *INEXTMODE :                      0 - |
*INIT_ROMTRCKS :                4D9 C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 INT_M_LIST :               60002A0 C |  INT_S_LIST :               60002E0 C |
*JOYA :                          40 - | *JOYB :                          10 - |
*JOYC :                          20 - | *JOYDOWN :                        2 - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYRIGHT :                       8 - | *JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LIST_VDPREGS :    FFFFFFFFFFFF0270 C |
 LITERAL_F_00000000_1 :     60004B8 C |  LITERAL_F_00000001_1 :     6000668 C |
 LITERAL_F_00000002_1 :     600066C C |  LITERAL_F_00000003_1 :     6000670 C |
 LITERAL_F_00000004_1 :     6000676 C |  LITERAL_F_00000005_1 :     6000678 C |
 LITERAL_F_00000006_1 :     600070C C |  LITERAL_F_00000007_1 :     60008DC C |
 LITERAL_F_00000008_1 :     60008E8 C |  LITERAL_F_00000009_1 :     6000A28 C |
 LITERAL_F_0000000A_1 :     6000A2C C |  LITERAL_F_0000000B_1 :     6000A50 C |
 LITERAL_F_0000000C_1 :     6000A30 C |  LITERAL_F_0000000D_1 :     6000A3C C |
 LITERAL_F_0000000E_1 :                                    FFFFFFFFC00000F8 C |
 LITERAL_F_0000000F_1 :                                    FFFFFFFFC00000FC C |
 LITERAL_F_00000010_1 :                                    FFFFFFFFC0000100 C |
 LITERAL_F_00000011_1 :                                    FFFFFFFFC0000108 C |
 LITERAL_L_0000FC00_1 :     6000768 C |  LITERAL_L_06000000_1 :     60008D8 C |
 LITERAL_L_06000128_1 :     6000A24 C |  LITERAL_L_0603EFF8_1 :     6000708 C |
 LITERAL_L_0603F000_1 :     6000A20 C |  LITERAL_L_0603FFF8_1 :     60004B4 C |
 LITERAL_L_06040000_1 :     60008D4 C |  LITERAL_L_20004000_1 :     60004A4 C |
 LITERAL_L_20004000_2 :     6000704 C |  LITERAL_L_20004000_3 :     600075C C |
 LITERAL_L_20004000_4 :     6000814 C |  LITERAL_L_20004000_5 :     60008E0 C |
 LITERAL_L_20004000_6 :     6000A34 C |  LITERAL_L_20004012_1 :     60004A8 C |
 LITERAL_L_20004016_1 :     60004B0 C |  LITERAL_L_20004016_2 :     6000700 C |
 LITERAL_L_20004018_1 :     60004AC C |  LITERAL_L_20004018_2 :     60006FC C |
 LITERAL_L_2000401A_1 :     60004A0 C |  LITERAL_L_2000401A_2 :     600065C C |
 LITERAL_L_2000401C_1 :     600049C C |
 LITERAL_L_2000401C_2 :                                    FFFFFFFFC00000F4 C |
 LITERAL_L_20004022_1 :     6000378 C |  LITERAL_L_20004024_1 :     600037C C |
 LITERAL_L_20004026_1 :     6000970 C |  LITERAL_L_20004027_1 :     6000A60 C |
 LITERAL_L_20004028_1 :     6000664 C |  LITERAL_L_2000402C_1 :     6000498 C |
 LITERAL_L_2000402C_2 :     6000A38 C |  LITERAL_L_2000402D_1 :     600097C C |
 LITERAL_L_2000402E_1 :     6000660 C |  LITERAL_L_2000402E_2 :     60008E4 C |
 LITERAL_L_20004034_1 :                                    FFFFFFFFC0000104 C |
 LITERAL_L_20004100_1 :     6000760 C |  LITERAL_L_20004100_2 :     60007F0 C |
 LITERAL_L_20004100_3 :     60008F0 C |  LITERAL_L_20004100_4 :     6000974 C |
 LITERAL_L_20004200_1 :     6000978 C |  LITERAL_L_24000000_1 :     6000764 C |
 LITERAL_L_24000000_2 :     60007EC C |  LITERAL_L_24000200_1 :     60008EC C |
 LITERAL_L_4D5F4F4B_1 :     60004BC C |  LITERAL_L_535F4F4B_1 :     6000710 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000AB4 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     6000AB0 C |
 LITERAL_W_0080_1 :         600076C C |  LITERAL_W_0080_2 :         6000AB8 C |
 LITERAL_W_0080_3 :                                        FFFFFFFFC000010E C |
 LITERAL_W_00A2_1 :         60007F4 C |  LITERAL_W_00E0_1 :         6000908 C |
 LITERAL_W_00F0_1 :         60004C6 C |  LITERAL_W_00F0_2 :         6000718 C |
 LITERAL_W_00F0_3 :         600076E C |  LITERAL_W_0105_1 :         6000818 C |
 LITERAL_W_0140_1 :         6000906 C |
 LITERAL_W_03FF_1 :                                        FFFFFFFFC0000110 C |
 LITERAL_W_0415_1 :         600081A C |  LITERAL_W_0530_1 :         60008F8 C |
 LITERAL_W_0530_2 :         6000A44 C |  LITERAL_W_44E0_1 :         60004C2 C |
 LITERAL_W_44E0_2 :         6000716 C |  LITERAL_W_44E5_1 :         60004C4 C |
 LITERAL_W_4600_1 :         6000904 C |  LITERAL_W_4800_1 :         60008FC C |
 LITERAL_W_4800_2 :         6000A48 C |  LITERAL_W_5A00_1 :         6000AE8 C |
 LITERAL_W_A518_1 :         6000900 C |  LITERAL_W_A518_2 :         6000A4C C |
 LITERAL_W_A538_1 :         6000AEA C |  LITERAL_W_FE10_1 :         60004C0 C |
 LITERAL_W_FE10_2 :         60004E4 C |  LITERAL_W_FE10_3 :         6000674 C |
 LITERAL_W_FE10_4 :         6000714 C |  LITERAL_W_FE10_5 :         60008F4 C |
 LITERAL_W_FE10_6 :         6000A40 C |
 LITERAL_W_FE10_7 :                                        FFFFFFFFC000010C C |
 LITERAL_W_FE80_1 :         60008FE C |  LITERAL_W_FE80_2 :         6000A4A C |
 LITERAL_W_FE80_3 :         6000AE6 C |  LITERAL_W_FE92_1 :         6000902 C |
 LITERAL_W_FE92_2 :         6000A4E C |  LITERAL_W_FE92_3 :         6000ABA C |
 LITERAL_W_FE92_4 :         6000AE4 C |  LITERAL_W_FEE2_1 :         60008F6 C |
 LITERAL_W_FEE2_2 :         6000A42 C |  LITERAL_W_FEE4_1 :         60008FA C |
 LITERAL_W_FEE4_2 :         6000A46 C |  LITR_MARSVIDEO_INIT :      60008D0 C |
*MACEXP :                         7 - | *MAPMD_TEST :                904826 C |
 MAP_TESTBOARD :             9050E6 C |  MARS :                           1 - |
 MARSBLOCK :                     82 C |  MARSCD :                         0 - |
 MARSGBL_DMAREAD :                8 C |  MARSGBL_DMAWRITE :               C C |
*MARSGBL_PWMFULL :                6 C | *MARSGBL_PWMREFILL :              2 C |
*MARSGBL_PWMWINDEX :              4 C |  MARSGBL_XSHIFT :                 0 C |
 MARSSOUND_INIT :           60007F8 C |  MARSUPD :                       3F C |
*MARSVIDEO_FIXTBLSHIFT :    6000794 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       60007D4 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       60007BC C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    60007E6 C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    60007E0 C |
 MARSVIDEO_INIT :           600071C C |  MARSVIDEO_INIT.DEF_FB :    600073C C |
 MARSVIDEO_INIT.NXT_LNE :   6000742 C |  MARSVIDEO_INIT.WAIT_FRM :  6000752 C |
 MARSVIDEO_MAKENAMETBL :    6000770 C |
 MARSVIDEO_MAKENAMETBL.CANT_USE :                                   600078E C |
*MARSVIDEO_MAKENAMETBL.LINETBL_NORMAL :                             6000780 C |
 MARSVIDEO_MAKENAMETBL.NXT_LNE2 :                                   6000784 C |
*MARS_CLEARCACHERAM :       6000A64 C |  MARS_CLEARCACHERAM.LOOP :  6000A6A C |
 MARS_ENTRY :                   800 C | *MARS_ENTRY.NO_MARS :           802 C |
 MARS_LOADCACHERAM :        6000A7C C |  MARS_LOADCACHERAM.COPY :   6000AA0 C |
 MARS_RAMDATA :               43300 C |  MARS_RAMDATA_E :             627FC C |
*MARS_SETWATCHDOG :         6000ABC C |  MASTER_IRQ :               6000250 C |
 MASTER_LOOP :              600090C C |  MASTER_LOOP.COPY_PAL :     6000948 C |
*MASTER_LOOP.NOT_READY :    6000964 C |  MASTER_LOOP.WAITL :        6000916 C |
 MASTER_LOOP.WAITV :        6000934 C |  MAX_BLOCKS :                    18 - |
 MAX_HEADS :                      F - |  MAX_INS :                        F - |
 MAX_MDDMATSK :                  10 - |  MAX_MDGLOBAL :                 800 - |
*MAX_MDOBJ :                     10 - |  MAX_MDOTHER :                 1000 - |
 MAX_MDSYSTEM :                 500 - |  MAX_MDVIDEO :                 2000 - |
 MAX_PWMBACKUP :                 80 - |  MAX_PWMCHNL :                    7 - |
 MAX_RAMSNDDATA :              4000 - |  MAX_RCACH :                     40 - |
 MAX_SCRNBUFF :                2800 - |  MAX_SYSCODE :                 1800 - |
 MAX_TBLSIZE :                   10 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    11 - | *MAX_TSTENTRY :                   5 - |
*MAX_TSTTRKS :                    3 - |  MAX_USERCODE :                2000 - |
 MCD :                            0 - |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - | *MCD_DBANK0 :                  4607 C |
*MCD_DBANK0_E :               29800 C |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - | *MCD_GEMATRKS :                3F9E C |
*MCD_HINT :                       6 - | *MCD_MEMORY :                     3 - |
 MCHNSND_BANK :                   4 C |  MCHNSND_CREAD :                 20 C |
 MCHNSND_ENBL :                   0 C |  MCHNSND_LEN :                   10 C |
 MCHNSND_LOOP :                  14 C |  MCHNSND_PITCH :                 18 C |
 MCHNSND_READ :                   C C |  MCHNSND_START :                  8 C |
 MCHNSND_VOL :                   1C C | *MDBANK0 :                   904607 C |
*MDBANK0_CD_E :              929374 C | *MDBANK0_E :                 9059A6 C |
*MDJUMPCODE_E :    FFFFFFFFFFFFFE28 C | *MDJUMPCODE_S :    FFFFFFFFFFFFFE00 C |
 MDSYS_SINEDATA :  FFFFFFFFFFFF0EEE C |  MD_BANK_SRAM :              A130F1 - |
 MD_ERRADDR :                   820 C |  MD_ERRBUS :                    820 C |
 MD_ERRCHK :                    820 C |  MD_ERRILL :                    820 C |
 MD_ERROREX :                   820 C |  MD_ERRORTRAP :                 820 C |
 MD_ERRPRIVL :                  820 C |  MD_ERRTRAPV :                  820 C |
 MD_ERRZDIV :                   820 C |  MD_INIT :                      838 C |
 MD_INIT.COPYME :               88E C |  MD_INIT.COPYME_2 :             8A2 C |
 MD_INIT.LOOP_RAM :             850 C |  MD_INIT.WAIT_DMA :             86A C |
 MD_JUMPCODE :                 19E2 C |  MD_JUMPCODE_E :               1A0A C |
 MD_LINE1010 :                  820 C |  MD_LINE1111 :                  820 C |
 MD_READMODES :    FFFFFFFFFFFFFE00 C |
 MD_READMODES.PICK_BOOT :                                  FFFFFFFFFFFFFE18 C |
 MD_SCREEN00 :               88390A C | *MD_SCREEN00_E :               3F9E C |
 MD_SYSCODE :                   8C6 C |  MD_SYSCODE_E :                19E2 C |
 MD_TRACE :                     820 C |  MODE :                          18 - |
*MODE_FADEOUT :    FFFFFFFFFFFF1056 C |
 MODE_FADEOUT.LOOPW :                                      FFFFFFFFFFFF107A C |
 MODE_INIT :       FFFFFFFFFFFF1038 C |  MODE_INIT.CLR :   FFFFFFFFFFFF1048 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :                 68000 - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        6 C |
 MOUSE_Y :                        8 C |  M_IRQ_BAD :                6000380 C |
 M_IRQ_CMD :                60003C4 C |  M_IRQ_DMA :                6000390 C |
 M_IRQ_H :                  6000410 C |  M_IRQ_PWM :                60003AC C |
 M_IRQ_V :                  600042C C |  M_IRQ_VRES :               6000448 C |
 M_IRQ_VRES.RV_BUSY :       600048C C |  M_IRQ_WDG :                6000384 C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             14A4 C |
 NIKONA_SETMSTRLIST :          14D6 C |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
 PALMARS_TEST :              904608 C | *PALMD_TEST :                904806 C |
 PAL_EMI :         FFFFFFFFFFFF1E6A C |  PAL_TESTBOARD :   FFFFFFFFFFFF1E80 C |
 PARP :                          34 - | *PEN :                           20 - |
 PICO :                           0 - |  PLAYTHISSFX :     FFFFFFFFFFFF1AAC C |
 PROC_CHIPS :                   524 C |  PSGCOM :                      1728 C |
 PSGFREQ_LIST :                12B4 C |  PSGHATMODE :                  1793 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PVOL :                          30 - | *PWCOM :                          0 - |
*PWINSH :                        20 - | *PWINSL :                        30 - |
*PWINSM :                        28 - |  PWMCOM :                      16F0 C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  PWOUTF :                        18 - |
*PWPHL :                         10 - | *PWPTH_V :                        8 - |
*RAM_BGCAMERA :    FFFFFFFFFFFFB52C C |  RAM_BOARDBLOCKS : FFFFFFFFFFFFB53E C |
 RAM_BOARDUPD :    FFFFFFFFFFFFB528 C | *RAM_CURRINDX :    FFFFFFFFFFFFB532 C |
*RAM_CURRSELC :    FFFFFFFFFFFFB530 C |  RAM_CURRTEMPO :   FFFFFFFFFFFFB538 C |
*RAM_CURRTICKS :   FFFFFFFFFFFFB536 C | *RAM_CURRTRACK :   FFFFFFFFFFFFB534 C |
 RAM_CURRTYPE :    FFFFFFFFFFFFB52A C |  RAM_EMIANIM :     FFFFFFFFFFFFB520 C |
 RAM_EMIBLOCKX :   FFFFFFFFFFFFB51A C |  RAM_EMIBLOCKY :   FFFFFFFFFFFFB51C C |
 RAM_EMICHAR :     FFFFFFFFFFFFB51E C |  RAM_EMIFLAGS :    FFFFFFFFFFFFB518 C |
 RAM_EMIHIDE :     FFFFFFFFFFFFB524 C |  RAM_EMIJUMPSPD :  FFFFFFFFFFFFB510 C |
 RAM_EMIJUMPY :    FFFFFFFFFFFFB514 C |  RAM_EMIMOVEX :    FFFFFFFFFFFFB508 C |
 RAM_EMIMOVEY :    FFFFFFFFFFFFB50C C |  RAM_EMIPOSX :     FFFFFFFFFFFFB500 C |
 RAM_EMIPOSY :     FFFFFFFFFFFFB504 C |  RAM_EMIUPD :      FFFFFFFFFFFFB522 C |
*RAM_EXSOUNDDATA : FFFFFFFFFFFF3800 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFF8A4C C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFF8A4A C |
 RAM_FADEMARSREQ : FFFFFFFFFFFF8A48 C |  RAM_FADEMARSTMR : FFFFFFFFFFFF8A4E C |
 RAM_FADEMDDELAY : FFFFFFFFFFFF8A44 C |  RAM_FADEMDINCR :  FFFFFFFFFFFF8A42 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFF8A40 C |  RAM_FADEMDTMR :   FFFFFFFFFFFF8A46 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF8450 C |  RAM_GLBL_SCRN :   FFFFFFFFFFFFAD00 C |
 RAM_HORSCROLL :   FFFFFFFFFFFF7800 C | *RAM_INITFLUG :    FFFFFFFFFFFF9A48 C |
 RAM_INPUTDATA :   FFFFFFFFFFFF9800 C |  RAM_MARS_DREQBUFF_0 :     2601EC40 C |
 RAM_MARS_DREQBUFF_1 :     2601EE40 C |  RAM_MARS_GLOBAL :          601EC30 C |
 RAM_MARS_PWMLIST :        2601F040 C |  RAM_MARS_PWMROMRV :       2601F13C C |
 RAM_MARS_PWMTABLE :       2601F4BC C |  RAM_MDDREQ :      FFFFFFFFFFFF9D00 - |
 RAM_MDGLOBAL :    FFFFFFFFFFFFAD00 C |  RAM_MDMARSHINT :  FFFFFFFFFFFF9A52 C |
 RAM_MDMARSPALFD : FFFFFFFFFFFF81D0 C |  RAM_MDMARSVINT :  FFFFFFFFFFFF9A4C C |
 RAM_MDOTHER :     FFFFFFFFFFFF9D00 C |  RAM_MDSYSTEM :    FFFFFFFFFFFF9800 C |
 RAM_MDVIDEO :     FFFFFFFFFFFF7800 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_PALETTE :     FFFFFFFFFFFF8150 C |  RAM_PALETTEFD :   FFFFFFFFFFFF83D0 C |
*RAM_SAVEDATA :    FFFFFFFFFFFF9840 C |  RAM_SCREENBUFF :  FFFFFFFFFFFFB500 C |
 RAM_SCREENJUMP :          FFFFFE00 - |  RAM_SHAKEME :     FFFFFFFFFFFFB526 C |
*RAM_SPRDRWCNTR :  FFFFFFFFFFFF8A36 C | *RAM_SPRDRWPZ :    FFFFFFFFFFFF8456 C |
 RAM_SPRITES :     FFFFFFFFFFFF7C10 C | *RAM_SPRSHOWINDX : FFFFFFFFFFFF8A38 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDSEED : FFFFFFFFFFFF9A44 C |
 RAM_SYSRANDVAL :  FFFFFFFFFFFF9A40 C |  RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
 RAM_USERCODE :    FFFFFFFFFFFF1800 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFF8A3A C |
 RAM_VDPDMALIST :  FFFFFFFFFFFF8070 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFF8A3C C |
*RAM_VDPEXWRITE :  FFFFFFFFFFFF8454 C |  RAM_VDPREGS :     FFFFFFFFFFFF8A50 C |
 RAM_VERSCROLL :   FFFFFFFFFFFF7BC0 C |  RAM_VIDPRNTLIST : FFFFFFFFFFFF88B6 C |
 RAM_VIDPRNTVRAM : FFFFFFFFFFFF8A3E C |  RAM_WINDOWCURR :  FFFFFFFFFFFFB53A C |
 RAM_WINDOWNEW :   FFFFFFFFFFFFB53C C | *RAM_XPOS :        FFFFFFFFFFFFB52E C |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    627FC C |  RRT :                           14 - |
 SAMPLEHEAD :                  17A3 C |  SAMPLE_RATE :                 5622 - |
*SAMPLE_SIZE :                 1000 - |  SBEATACC :                      1C C |
 SBEATPTCK :                     1E C |  SET_CHIPS :                    4FF C |
 SET_CHIPS.TRK_BUFFRS :         507 C |  SH2_DEBUG :                      1 - |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              600081C C |
 SH2_M_ERRADDR :            600032C C |  SH2_M_ERRCODE :            600033C C |
 SH2_M_ERRDMA :             6000330 C |  SH2_M_ERRILLG :            6000324 C |
 SH2_M_ERRINVL :            6000328 C |  SH2_M_ERRNMI :             6000334 C |
 SH2_M_ERROR :              6000320 C |  SH2_M_ERRUSER :            6000338 C |
 SH2_M_HOTSTART :           600085E C |  SH2_M_HOTSTART.LOOPIN :    600089E C |
 SH2_M_HOTSTART.WAIT_FRM :  60008C0 C |  SH2_M_HOTSTART.WAIT_SLV :  6000892 C |
 SH2_RAM :                  601EC40 C |  SH2_SLAVE :                6000128 C |
 SH2_S_ENTRY :              6000980 C |  SH2_S_ERRADDR :            6000358 C |
 SH2_S_ERRCODE :            6000368 C |  SH2_S_ERRDMA :             600035C C |
 SH2_S_ERRILLG :            6000350 C |  SH2_S_ERRINVL :            6000354 C |
 SH2_S_ERRNMI :             6000360 C |  SH2_S_ERROR :              600034C C |
 SH2_S_ERRUSER :            6000364 C |  SH2_S_HOTSTART :           60009D0 C |
 SH2_S_HOTSTART.WAIT_MST :  6000A0E C |  SHIFT :                          2 - |
 SHOWROM :                      F55 C | *SIN_TABLE :                6000C28 C |
 SIZEOF_DREQ :                  200 C |  SIZEOF_INPUT :                  10 C |
 SIZEOF_MARSGBL :                10 C |  SIZEOF_MARSSND :                24 C |
*SIZEOF_MDGLBL :   FFFFFFFFFFFFAD02 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFDD00 C |
*SIZEOF_MDSYS :    FFFFFFFFFFFF9A58 C |  SIZEOF_MDVID :    FFFFFFFFFFFF8A68 C |
*SIZEOF_SH2ALL :           2601F4FC C | *SIZEOF_SH2ALL.HERE :      2601F4FC C |
*SIZEOF_THISBUFF0 :                                        FFFFFFFFFFFFB562 C |
 SLAVE_IRQ :                6000278 C |  SLAVE_LOOP :               6000A54 C |
 SLV :                           10 - |  SMPINS_TEST :              6014C28 C |
 SMPINS_TEST.END :          601EC2E C |  SMPINS_TEST.START :        6014C2E C |
 SNDLOCKZ80 :      FFFFFFFFFFFF0068 C |  SNDLOCKZ80.WAIT : FFFFFFFFFFFF0070 C |
 SNDREQCMD :       FFFFFFFFFFFF0194 C |  SNDREQ_ENTER :    FFFFFFFFFFFF0086 C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF00AC C |
 SNDREQ_EXIT :     FFFFFFFFFFFF00BC C | *SNDREQ_SADDR :    FFFFFFFFFFFF00E4 C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF00EC C |  SNDREQ_SCMD :     FFFFFFFFFFFF00D2 C |
*SNDREQ_SLONG :    FFFFFFFFFFFF00E0 C |  SNDREQ_SWORD :    FFFFFFFFFFFF00E8 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF007C C |  SOUND_INIT :      FFFFFFFFFFFF0000 C |
 SOUND_INIT.CLEANUP :                                      FFFFFFFFFFFF002A C |
 SOUND_INIT.COPY : FFFFFFFFFFFF0040 C |  SOUND_INIT.WAIT : FFFFFFFFFFFF0014 C |
 STACK_MSTR :               6040000 - |  STACK_SLV :                603F000 - |
 STANDBY :                        3 - |  STR_TITLE :       FFFFFFFFFFFF1D94 C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF0CCA C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF0CD2 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF0CCE C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF0CD6 C |
 SYSTEM_GRABRAMCODE :                                      FFFFFFFFFFFF10AE C |
 SYSTEM_GRABRAMCODE.COPYME2 :                              FFFFFFFFFFFF10BA C |
 SYSTEM_INIT :     FFFFFFFFFFFF0B90 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF0BEA C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF0B9E C |
 SYSTEM_INPUT :    FFFFFFFFFFFF0CDA C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF0D08 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF0D2E C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF0DD8 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF0DD2 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF0D0E C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF0E50 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF0E56 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF0E6C C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF0E78 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF0E84 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF0CEE C |
*SYSTEM_INPUT.WAIT :                                       FFFFFFFFFFFF0CDA C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF0DA0 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF0DCC C |
 SYSTEM_MARSUPDATE :                                       FFFFFFFFFFFF10A0 C |
*SYSTEM_RANDOM :   FFFFFFFFFFFF0E86 C |
 SYSTEM_RANDOM.GOOD_S :                                    FFFFFFFFFFFF0E94 C |
 SYSTEM_ROMSENDDREQ :                                      FFFFFFFFFFFF10C6 C |
*SYSTEM_ROMSENDDREQ.END :                                  FFFFFFFFFFFF111C C |
 SYSTEM_ROMSENDDREQ.L0 :                                   FFFFFFFFFFFF1106 C |
 SYSTEM_ROMSENDDREQ.WAIT_BIT :                             FFFFFFFFFFFF10F2 C |
 SYSTEM_SETINTS :  FFFFFFFFFFFF0FEE C |
 SYSTEM_SETINTS.NOHINT :                                   FFFFFFFFFFFF100E C |
 SYSTEM_SETINTS.NOVINT :                                   FFFFFFFFFFFF0FFE C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF0ED0 C |
 SYSTEM_SINEWAVE.DONT_NEG :                                FFFFFFFFFFFF0EEC C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF0EB0 C |
 SYSTEM_SINEWAVE_COS.DONT_NEG :                            FFFFFFFFFFFF0ECA C |
*SYSTEM_SRAMINIT : FFFFFFFFFFFF1010 C |
 SYSTEM_SRAMINIT.INITSAVE :                                FFFFFFFFFFFF1024 C |
 SYSTEM_WAITFRAME :                                        FFFFFFFFFFFF0C0C C |
 SYSTEM_WAITFRAME.WAIT_IN :                                FFFFFFFFFFFF0C24 C |
 SYSTEM_WAITFRAME.WAIT_LAG :                               FFFFFFFFFFFF0C12 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_EXRAM :                 200000 - | *SYS_IO :                    A10001 - |
*SYS_TMSS :                  A14000 - |  S_IRQ_BAD :                60004C8 C |
 S_IRQ_CMD :                60004E8 C | *S_IRQ_CMD.COPY_1 :         6000548 C |
 S_IRQ_CMD.EXIT_C :         6000556 C |  S_IRQ_CMD.EXIT_SCMD :      6000642 C |
 S_IRQ_CMD.IS_KEYCUT :      6000632 C |  S_IRQ_CMD.NEXT_CHNL :      600055C C |
 S_IRQ_CMD.NO_CHNG :        6000638 C | *S_IRQ_CMD.NO_KEYCUT :      6000566 C |
 S_IRQ_CMD.NO_PITCHBND :    6000598 C | *S_IRQ_CMD.PROC_PWM :       6000556 C |
*S_IRQ_CMD.SCMD_TASK00 :    6000528 C |  S_IRQ_CMD.SCMD_TASK01 :    6000534 C |
 S_IRQ_CMD.SCMD_TASK02 :    6000530 C |  S_IRQ_CMD.SCMD_TASK03 :    600052C C |
 S_IRQ_CMD.SCMD_TASKS :     6000518 C |  S_IRQ_CMD.WAIT_1 :         600053C C |
 S_IRQ_DMA :                60004D8 C |  S_IRQ_H :                  600067A C |
 S_IRQ_PWM :       FFFFFFFFC0000000 C |
 S_IRQ_PWM.CHNL_OFF :                                      FFFFFFFFC00000B8 C |
 S_IRQ_PWM.DO_MONO :                                       FFFFFFFFC0000074 C |
 S_IRQ_PWM.DO_VOL :                                        FFFFFFFFC0000094 C |
 S_IRQ_PWM.ENABLED :                                       FFFFFFFFC000003A C |
 S_IRQ_PWM.GO_WAVE :                                       FFFFFFFFC0000076 C |
 S_IRQ_PWM.KEEP :  FFFFFFFFC000005C C |
 S_IRQ_PWM.LOOPIT :                                        FFFFFFFFC0000056 C |
 S_IRQ_PWM.L_MAX : FFFFFFFFC00000CE C |
 S_IRQ_PWM.L_NONZ :                                        FFFFFFFFC000007C C |
 S_IRQ_PWM.ML_OUT :                                        FFFFFFFFC000008E C |
 S_IRQ_PWM.MNON_Z :                                        FFFFFFFFC0000088 C |
 S_IRQ_PWM.NEXT_CHNL :                                     FFFFFFFFC000002E C |
 S_IRQ_PWM.R_MAX : FFFFFFFFC00000D4 C |
 S_IRQ_PWM.SILENCE :                                       FFFFFFFFC0000034 C |
 S_IRQ_PWM.ST_PITCH :                                      FFFFFFFFC0000046 C |
 S_IRQ_V :                  6000694 C |  S_IRQ_VRES :               60006B0 C |
 S_IRQ_VRES.RV_BUSY :       60006F0 C |  S_IRQ_WDG :                60004CC C |
 TBLBUFF_READ :                 544 C |  TBLBUFF_READ.CHK_PSG :         608 C |
 TBLBUFF_READ.CLRFULL :         6C7 C |  TBLBUFF_READ.DO_CHIP :         57A C |
 TBLBUFF_READ.DO_NEWCHIP :      633 C |  TBLBUFF_READ.GRAB_LINK :       5B0 C |
 TBLBUFF_READ.INVLDL :          5F1 C |  TBLBUFF_READ.L_HIPRIO :        67C C |
 TBLBUFF_READ.NEW_CHIP :        634 C |  TBLBUFF_READ.NEW_LINK :        679 C |
 TBLBUFF_READ.NEW_LINK_O :      679 C |  TBLBUFF_READ.NEW_LINK_Z :      675 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    66B C |  TBLBUFF_READ.NEXT_CHNL :       567 C |
 TBLBUFF_READ.NEXT_PRIO :       656 C |  TBLBUFF_READ.PASS_2 :          654 C |
 TBLBUFF_READ.PICK_TBL :        69F C |  TBLBUFF_READ.REFILL :          630 C |
 TBLBUFF_READ.REROLL :          5FA C |  TBLBUFF_READ.RESET_LINK :      6B9 C |
 TBLBUFF_READ.RNOT_PSG :        62E C |  TBLBUFF_READ.SET_ASFULL :      69C C |
 TBLBUFF_READ.SINGL_FREE :      68A C |  TBLBUFF_READ.SINGL_LINK :      620 C |
*TBLBUFF_READ.SNGL_SPRIO :      69B C |  TBLBUFF_READ.SRCH_FREE :       643 C |
 TBLBUFF_READ.SRCH_LINK :       5D7 C |  TBLBUFF_READ.SRCH_LLOOP :      5E1 C |
 TBLBUFF_READ.TRACK_CONT :      55A C |  TBLFM :                       152C C |
 TBLFM3 :                      156C C |  TBLFM6 :                      157C C |
 TBLLIST :                     14DA C |  TBLPSG :                      14EA C |
 TBLPSGN :                     151C C |  TBLPWM :                      158E C |
*TEST_WAVE :                 91AC74 C | *TEST_WAVE_E :               929374 C |
 TH :                      20000000 - | *THISCODE_TOP :    FFFFFFFFFFFF1800 C |
 THISCODE_TOP.AFTER :                                      FFFFFFFFFFFF1A08 C |
 THISCODE_TOP.LIST :                                       FFFFFFFFFFFF1950 C |
 THISCODE_TOP.LOCKCONTRL :                                 FFFFFFFFFFFF1AAA C |
 THISCODE_TOP.LOOP :                                       FFFFFFFFFFFF1908 C |
 THISCODE_TOP.MIDSHK :                                     FFFFFFFFFFFF193C C |
 THISCODE_TOP.MODE0 :                                      FFFFFFFFFFFF195C C |
 THISCODE_TOP.MODE0_LOOP :                                 FFFFFFFFFFFF1974 C |
 THISCODE_TOP.NOZ_DOWN :                                   FFFFFFFFFFFF1A30 C |
 THISCODE_TOP.NOZ_L :                                      FFFFFFFFFFFF1AA8 C |
 THISCODE_TOP.NOZ_R :                                      FFFFFFFFFFFF1A80 C |
 THISCODE_TOP.NOZ_UP :                                     FFFFFFFFFFFF1A58 C |
 THISCODE_TOP.NO_MODE0 :                                   FFFFFFFFFFFF198C C |
 THISCODE_TOP.NO_SHAKE :                                   FFFFFFFFFFFF19B2 C |
 TICKCNT :                     1792 C |  TICKFLAG :                    1791 C |
 TICKSPSET :                   1790 C | *TIME :                     1:44:46 - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    493 C |  TRACK_OUT.CLRFE :              4A4 C |
 TRACK_OUT.NOCHIP :             4C7 C |  TRANSFERROM :                  F75 C |
 TRANSFERROM.DOUBLE :           F94 C |  TRANSFERROM.TRANSFER :         FB8 C |
 TRANSFERROM.X68KLAST :         FD6 C |  TRANSFERROM.X68KLOOP :         FC2 C |
 TRANSFERROM.X68KLPWT :         FE4 C |  TRANSFERROM.X68KNOCARRY :      FB2 C |
 TRANSFERROM.X68KPWTLP :        FE9 C |  TRKBLKS_0 :                   1BEE C |
 TRKBLKS_1 :                   1C06 C |  TRKBLKS_2 :                   1C1E C |
 TRKBUFF_0 :                   17AA C |  TRKBUFF_1 :                   17DA C |
 TRKBUFF_2 :                   180A C |  TRKCACH_0 :                   1E00 C |
 TRKCACH_1 :                   1E40 C |  TRKCACH_2 :                   1E80 C |
*TRKCACH_3 :                   1EC0 C |  TRKCHNL_0 :                   183A C |
 TRKCHNL_1 :                   18C2 C |  TRKCHNL_2 :                   194A C |
 TRKHDRS_0 :                   19D2 C |  TRKHDRS_1 :                   1A0E C |
 TRKHDRS_2 :                   1A4A C |  TRKINSD_0 :                   1A86 C |
 TRKINSD_1 :                   1AFE C |  TRKINSD_2 :                   1B76 C |
 TRKLISTCACH :                 1764 C |  TRKLISTPAGE :                   3E C |
*TRK_BANKBLK :                   16 - | *TRK_BANKHEAD :                  17 - |
*TRK_BANKINS :                   15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACHHALF :                   E - | *TRK_CACHINC :                    F - |
 TRK_CHNCACH :                   2E - |  TRK_CHNCBLK :                   28 - |
 TRK_CHNCHEAD :                  2A - |  TRK_CHNCINS :                   2C - |
 TRK_CHNLIST :                   26 - |  TRK_CURRBLK :                   12 - |
 TRK_INSTR :                      8 - |  TRK_MAXBLKS :                   1D - |
 TRK_MAXCHNLS :                  1C - |  TRK_MAXHDRS :                   1E - |
 TRK_MAXINS :                    1F - | *TRK_PANNING :                   13 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMCPATT :                  20 - |
 TRK_ROMPATT :                   23 - |  TRK_ROWPAUSE :                  10 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   11 - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    1CF C |  UPD_TRACK.DECROW :             265 C |
 UPD_TRACK.DECROW_E :           268 C |  UPD_TRACK.EFFECT_FILL :        3DB C |
 UPD_TRACK.EFF_A :              303 C |  UPD_TRACK.EFF_B :              315 C |
 UPD_TRACK.EFF_C :              32B C |  UPD_TRACK.EXIT :               259 C |
 UPD_TRACK.FIRST_FILL :         3E2 C |  UPD_TRACK.GRAB_RHEAD :         47F C |
 UPD_TRACK.HAS_NOTE :           270 C |  UPD_TRACK.INC_CPATT :          32E C |
 UPD_TRACK.NEXT_NOTE :          249 C |  UPD_TRACK.NO_EFF :             2CF C |
 UPD_TRACK.NO_GLBL :            40D C |  UPD_TRACK.NO_INS :             2B1 C |
 UPD_TRACK.NO_NOTE :            2A6 C |  UPD_TRACK.NO_VOL :             2BC C |
 UPD_TRACK.OLD_TYPE :           29A C |  UPD_TRACK.RAN_OUT :            33C C |
 UPD_TRACK.READ_TRACK :         1F0 C |  UPD_TRACK.ROW_ACTIVE :         242 C |
 UPD_TRACK.SET_TRACK :          366 C |  UPD_TRACK.SFXMD :              209 C |
 UPD_TRACK.TRACK_END :          3CA C |  UPD_TRACK.TRK_BUFFRS :         1D4 C |
 VARNULLVRAM :                  7FF - |  VARPRINTPAL :                    3 - |
 VARPRINTVRAM :                 580 - | *VAR_MOVESPD :                 4000 - |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_CLEAR :     FFFFFFFFFFFF02A4 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF02A4 C |
 VIDEO_CLEARSCREEN.PMNEXT :                                FFFFFFFFFFFF0338 C |
 VIDEO_CLEARSCREEN.PNEXT :                                 FFFFFFFFFFFF0322 C |
 VIDEO_CLEARSCREEN.SNEXT :                                 FFFFFFFFFFFF030E C |
 VIDEO_CLEARSCREEN.XNEXT :                                 FFFFFFFFFFFF02EA C |
 VIDEO_CLEARSCREEN.YNEXT :                                 FFFFFFFFFFFF02FC C |
*VIDEO_COPY :      FFFFFFFFFFFF0874 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF0888 C |
 VIDEO_COPY.DMAWE :                                        FFFFFFFFFFFF08E0 C |
 VIDEO_DMABLAST :  FFFFFFFFFFFF099A C |
 VIDEO_DMABLAST.END :                                      FFFFFFFFFFFF09F0 C |
 VIDEO_DMABLAST.EXIT :                                     FFFFFFFFFFFF0A06 C |
 VIDEO_DMABLAST.NEXT :                                     FFFFFFFFFFFF09CA C |
 VIDEO_DMAMKENTRY :                                        FFFFFFFFFFFF078C C |
 VIDEO_DOPALFADE : FFFFFFFFFFFF0642 C |
 VIDEO_DOPALFADE.ACTIVE :                                  FFFFFFFFFFFF065E C |
 VIDEO_DOPALFADE.FADE_DONE :                               FFFFFFFFFFFF0666 C |
 VIDEO_DOPALFADE.FADE_IN :                                 FFFFFFFFFFFF0668 C |
 VIDEO_DOPALFADE.FADE_LIST :                               FFFFFFFFFFFF0660 C |
 VIDEO_DOPALFADE.FADE_OUT :                                FFFFFFFFFFFF070C C |
 VIDEO_DOPALFADE.NO_BLU :                                  FFFFFFFFFFFF06E4 C |
 VIDEO_DOPALFADE.NO_BLU_O :                                FFFFFFFFFFFF0768 C |
 VIDEO_DOPALFADE.NO_FNSH :                                 FFFFFFFFFFFF06FC C |
 VIDEO_DOPALFADE.NO_FNSH_O :                               FFFFFFFFFFFF077C C |
 VIDEO_DOPALFADE.NO_GRN :                                  FFFFFFFFFFFF06C4 C |
 VIDEO_DOPALFADE.NO_GRN_O :                                FFFFFFFFFFFF0750 C |
 VIDEO_DOPALFADE.NO_MOVE :                                 FFFFFFFFFFFF070A C |
 VIDEO_DOPALFADE.NO_MOVE_O :                               FFFFFFFFFFFF078A C |
 VIDEO_DOPALFADE.NO_RED :                                  FFFFFFFFFFFF06A4 C |
 VIDEO_DOPALFADE.NO_RED_O :                                FFFFFFFFFFFF0738 C |
 VIDEO_DOPALFADE.NXT_PAL :                                 FFFFFFFFFFFF0682 C |
 VIDEO_DOPALFADE.NXT_PAL_O :                               FFFFFFFFFFFF0720 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0614 C |
 VIDEO_FADEPAL_MARS :                                      FFFFFFFFFFFF0A0C C |
 VIDEO_FILL :      FFFFFFFFFFFF07FE C |  VIDEO_FILL.DMAW : FFFFFFFFFFFF0812 C |
 VIDEO_FILL.DMAWE :                                        FFFFFFFFFFFF085C C |
 VIDEO_INIT :      FFFFFFFFFFFF021A C |
 VIDEO_INIT.CLRRAM :                                       FFFFFFFFFFFF0226 C |
*VIDEO_INIT.EXIT : FFFFFFFFFFFF0250 C |  VIDEO_INIT.LOOP : FFFFFFFFFFFF0242 C |
 VIDEO_LOADART :   FFFFFFFFFFFF08F8 C |
 VIDEO_LOADART.FROM_RAM :                                  FFFFFFFFFFFF0986 C |
 VIDEO_LOADMAP :   FFFFFFFFFFFF0342 C |
 VIDEO_LOADMAP.CONT :                                      FFFFFFFFFFFF0368 C |
 VIDEO_LOADMAP.NODBLE :                                    FFFFFFFFFFFF0386 C |
 VIDEO_LOADMAP.NONULL :                                    FFFFFFFFFFFF0366 C |
 VIDEO_LOADMAP.XLOOP :                                     FFFFFFFFFFFF0358 C |
 VIDEO_LOADMAP.YLOOP :                                     FFFFFFFFFFFF034E C |
*VIDEO_LOADMAP_VERT :                                      FFFFFFFFFFFF0398 C |
 VIDEO_LOADMAP_VERT.CONT :                                 FFFFFFFFFFFF03CA C |
 VIDEO_LOADMAP_VERT.NODBLE :                               FFFFFFFFFFFF03EA C |
 VIDEO_LOADMAP_VERT.NONULL :                               FFFFFFFFFFFF03C8 C |
*VIDEO_LOADMAP_VERT.OUTDBL :                               FFFFFFFFFFFF03F4 C |
 VIDEO_LOADMAP_VERT.XLOOP :                                FFFFFFFFFFFF03A6 C |
 VIDEO_LOADMAP_VERT.YLOOP :                                FFFFFFFFFFFF03B6 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF061E C |
*VIDEO_LOADPAL_MARS :                                      FFFFFFFFFFFF0A16 C |
 VIDEO_MARSPALFADE :                                       FFFFFFFFFFFF0A3E C |
 VIDEO_MARSPALFADE.ACTIVE :                                FFFFFFFFFFFF0A5A C |
 VIDEO_MARSPALFADE.FADE_DONE :                             FFFFFFFFFFFF0A62 C |
 VIDEO_MARSPALFADE.FADE_IN :                               FFFFFFFFFFFF0A64 C |
 VIDEO_MARSPALFADE.FADE_LIST :                             FFFFFFFFFFFF0A5C C |
 VIDEO_MARSPALFADE.FADE_OUT :                              FFFFFFFFFFFF0B0E C |
 VIDEO_MARSPALFADE.NO_BLU :                                FFFFFFFFFFFF0ADE C |
 VIDEO_MARSPALFADE.NO_BLU_O :                              FFFFFFFFFFFF0B6A C |
 VIDEO_MARSPALFADE.NO_FNSH :                               FFFFFFFFFFFF0AFE C |
 VIDEO_MARSPALFADE.NO_FNSH_O :                             FFFFFFFFFFFF0B80 C |
 VIDEO_MARSPALFADE.NO_GRN :                                FFFFFFFFFFFF0ABE C |
 VIDEO_MARSPALFADE.NO_GRN_O :                              FFFFFFFFFFFF0B52 C |
 VIDEO_MARSPALFADE.NO_MOVE :                               FFFFFFFFFFFF0B0C C |
 VIDEO_MARSPALFADE.NO_MOVE_O :                             FFFFFFFFFFFF0B8E C |
 VIDEO_MARSPALFADE.NO_RED :                                FFFFFFFFFFFF0A9E C |
 VIDEO_MARSPALFADE.NO_RED_O :                              FFFFFFFFFFFF0B3A C |
 VIDEO_MARSPALFADE.NXT_PAL :                               FFFFFFFFFFFF0A7C C |
 VIDEO_MARSPALFADE.NXT_PAL_O :                             FFFFFFFFFFFF0B22 C |
 VIDEO_MARS_GFXMODE :                                      FFFFFFFFFFFF0A08 C |
*VIDEO_MARS_WAITFRAME :                                    FFFFFFFFFFFF0A0A C |
 VIDEO_PRINT :     FFFFFFFFFFFF0434 C |
 VIDEO_PRINT.DONIBL :                                      FFFFFFFFFFFF054E C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF04BE C |
 VIDEO_PRINT.ISBYTE :                                      FFFFFFFFFFFF0488 C |
 VIDEO_PRINT.ISLONG :                                      FFFFFFFFFFFF04AC C |
 VIDEO_PRINT.ISWORD :                                      FFFFFFFFFFFF049A C |
 VIDEO_PRINT.LNGLOOP :                                     FFFFFFFFFFFF053E C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0448 C |
 VIDEO_PRINT.LOWR :                                        FFFFFFFFFFFF055E C |
 VIDEO_PRINT.NEWJUMP :                                     FFFFFFFFFFFF0442 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF046A C |
 VIDEO_PRINT.NEXTV :                                       FFFFFFFFFFFF04C8 C |
 VIDEO_PRINT.NOTHING :                                     FFFFFFFFFFFF056A C |
 VIDEO_PRINT.PUTTEXT :                                     FFFFFFFFFFFF045C C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF046E C |
 VIDEO_PRINT.VBYTE :                                       FFFFFFFFFFFF04FA C |
 VIDEO_PRINT.VLONG :                                       FFFFFFFFFFFF0546 C |
 VIDEO_PRINT.VWORD :                                       FFFFFFFFFFFF051C C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0404 C | *VIDEO_PRINTPAL :  FFFFFFFFFFFF0422 C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF0602 C |  VIDEO_UPDATE :    FFFFFFFFFFFF0250 C |
*VIDEO_UPDATE.EXIT :                                       FFFFFFFFFFFF026E C |
 VIDEO_UPDATE.LOOP :                                       FFFFFFFFFFFF0262 C |
 VIDMARS_PAL :     FFFFFFFFFFFF0A1A C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF0A32 C |
 VIDMD_PAL :       FFFFFFFFFFFF0622 C |  VIDMD_PAL.LOOP :  FFFFFFFFFFFF063A C |
 VID_PICKLAYER :   FFFFFFFFFFFF056C C |
 VID_PICKLAYER.GOLYR :                                     FFFFFFFFFFFF05B6 C |
 VID_PICKLAYER.NOWD :                                      FFFFFFFFFFFF05A0 C |
 VID_PICKLAYER.PLAWND :                                    FFFFFFFFFFFF0592 C |
 VID_PICKLAYER.THISSZ :                                    FFFFFFFFFFFF05D6 C |
 VID_PICKLAYER.THISSZJ :                                   FFFFFFFFFFFF05FE C |
 VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :    FFFFFFFFFFFF1088 C | *VIRQ_ON :                        8 - |
 VRESINTCLR :                    14 - |  WAVE_FLAGS :                  178F C |
 WAVE_LEN :                    1787 C |  WAVE_LOOP :                   178A C |
 WAVE_PITCH :                  178D C |  WAVE_START :                  1784 C |
 WAVFREQ_LIST :                13A6 C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  881A0A C |  Z80_CODE_END :              88390A C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      83 C |
 Z80_RESET :                 A11200 - |  Z80_TOP :                   881A0A C |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      80 - | *ZDRVMARSBLK :                   82 - |
 ZDRVROMBLK :                    81 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - |  _DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   1334 symbols
    300 unused symbols

 AS V1.42 Beta [Bld 118] - source file main.asm - page 3 - 8/2/2023 1:44:46


  defined macros:
  ---------------

ENDSTRUCT                             | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ISO_FILE                              | ISO_SETFS                            
ORG                                   | REPORT                               
ROMPAD                                | STRUCT                               
VDP_SHOWME                            |

     19 macros

 AS V1.42 Beta [Bld 118] - source file main.asm - page 4 - 8/2/2023 1:44:46


  defined functions:
  ------------------

NOTZ80                                | CELL_VRAM                            
LOCATE                                | MAPSIZE                              

 AS V1.42 Beta [Bld 118] - source file main.asm - page 5 - 8/2/2023 1:44:46


  codepages:
  ----------

STANDARD (0 changed characters)


0.11 seconds assembly time

  14470 lines source file
  15006 lines incl. macro expansions
      4 passes
      0 errors
      0 warnings
