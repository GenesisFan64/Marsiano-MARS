 AS V1.42 Beta [Bld 118] - source file main.asm - page 1 - 7/20/2023 19:28:40


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; +-----------------------------------------------------------------+
       3/       0 :                     ; MARSIANO ENGINE
       4/       0 :                     ;
       5/       0 :                     ; A game engine for
       6/       0 :                     ; Sega Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico
       7/       0 :                     ; +-----------------------------------------------------------------+
       8/       0 :                     
       9/       0 :                     		!org 0				; Start at 0
      10/       0 :                     		cpu 		68000		; Current CPU is 68k, gets changed later.
      11/       0 :                     		padding		off		; Dont pad dc.b
      12/       0 :                     		listing 	purecode	; Want listing file, but only the final code in expanded macros
      13/       0 :                     		supmode 	on 		; Supervisor mode 68k
      14/       0 :                     		dottedstructs	off		; If needed
      15/       0 :                     		page 		0
      16/       0 :                     
      17/       0 :                     ; ====================================================================
      18/       0 :                     ; ----------------------------------------------------------------
      19/       0 :                     ; USER SETTINGS
      20/       0 :                     ; ----------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     ; RAM Sizes for Sega CD and Sega 32X
      23/       0 :                     ;
      24/       0 :                     ; MAKE SURE IT DOESN'T REACH FC00 FOR CROSS-PORTING
      25/       0 :                     ; TO SEGA-CD (And maybe SCD+32X)
      26/       0 :                     
      27/       0 : =$1800              MAX_SysCode	equ $1800	; ** CD/32X/CD32X
      28/       0 : =$3000              MAX_UserCode	equ $3000	; ** CD/32X/CD32X
      29/       0 : =$2000              MAX_MdVideo	equ $2000	;
      30/       0 : =$500               MAX_MdSystem	equ $0500	;
      31/       0 : =$2000              MAX_MdOther	equ $2000	; System specific stuff goes here
      32/       0 : =$800               MAX_MdGlobal	equ $0800	; USER Global variables
      33/       0 : =$2800              MAX_ScrnBuff	equ $2800	; RAM section for Current screen
      34/       0 :                     
      35/       0 :                     ; ====================================================================
      36/       0 :                     ; ----------------------------------------------------------------
      37/       0 :                     ; Includes
      38/       0 :                     ; ----------------------------------------------------------------
      39/       0 :                     
      40/       0 :                     		include	"macros.asm"			; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MACROS
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ---------------------------------------------
(1)    8/       0 :                     ; Functions
(1)    9/       0 :                     ; ---------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; dword 		function l,r,(l<<16&$FFFF0000|r&$FFFF)			; LLLL RRRR
(1)   12/       0 :                     mapsize		function l,r,(((l-1)/8)<<16&$FFFF0000|((r-1)/8)&$FFFF)	; Full w/h sizes, for cell sizes use doubleword
(1)   13/       0 :                     locate		function a,b,c,(c&$FF)|(b<<8&$FF00)|(a<<16&$FF0000)	; VDP locate: Layer|X pos|Y pos for some video routines
(1)   14/       0 :                     
(1)   15/       0 :                     cell_vram	function a,(a<<5)					; Vram position in 8x8 CELLS
(1)   16/       0 :                     
(1)   17/       0 :                     ; ====================================================================
(1)   18/       0 :                     ; ---------------------------------------------
(1)   19/       0 :                     ; Macros
(1)   20/       0 :                     ; ---------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                 paddingSoFar set 0
(1)   23/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)   24/       0 :                     
(1)   25/       0 :                     ; -------------------------------------
(1)   26/       0 :                     ; Reserve memory section
(1)   27/       0 :                     ;
(1)   28/       0 :                     ; NOTE: This doesn't work for Z80
(1)   29/       0 :                     ; -------------------------------------
(1)   30/       0 :                     
(1)   31/       0 :                     struct		macro thisinput			; Reserve memory address
(1)   32/       0 :                     GLBL_LASTPC	set *
(1)   33/       0 :                     		dephase
(1)   34/       0 :                     GLBL_LASTORG	set *
(1)   35/       0 :                     		phase thisinput
(1)   36/       0 :                     		endm
(1)   37/       0 :                     		
(1)   38/       0 :                     ; -------------------------------------
(1)   39/       0 :                     ; Finish struct
(1)   40/       0 :                     ; -------------------------------------
(1)   41/       0 :                     
(1)   42/       0 :                     endstruct	macro				; Then finish the custom struct.
(1)   43/       0 :                     		!org GLBL_LASTORG
(1)   44/       0 :                     		phase GLBL_LASTPC
(1)   45/       0 :                     		endm
(1)   46/       0 :                     
(1)   47/       0 :                     ; -------------------------------------
(1)   48/       0 :                     ; Report RAM usage
(1)   49/       0 :                     ; -------------------------------------
(1)   50/       0 :                     
(1)   51/       0 :                     report		macro text,dis,dat
(1)   52/       0 :                     	if MOMPASS == 2
(1)   53/       0 :                     		if dat == -1
(1)   54/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   55/       0 :                     		else
(1)   56/       0 :                     			if dis > dat
(1)   57/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   58/       0 :                     			else
(1)   59/       0 :                     				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   60/       0 :                     			endif
(1)   61/       0 :                     		endif
(1)   62/       0 :                     	endif
(1)   63/       0 :                     		endm
(1)   64/       0 :                     
(1)   65/       0 :                     ; -------------------------------------
(1)   66/       0 :                     ; Same thing but only report
(1)   67/       0 :                     ; error
(1)   68/       0 :                     ; -------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     erreport	macro text,dis,dat
(1)   71/       0 :                     	if MOMPASS == 2
(1)   72/       0 :                     		if dat == -1
(1)   73/       0 :                     			message text+": \{(dis)&$FFFFFF}"
(1)   74/       0 :                     		else
(1)   75/       0 :                     			if dis > dat
(1)   76/       0 :                     				error "RAN OUT OF "+text+" (\{(dis)&$FFFFFF} of \{(dat)&$FFFFFF})"
(1)   77/       0 :                     ; 			else
(1)   78/       0 :                     ; 				message text+" uses \{(dis)&$FFFFFF} of \{(dat)&$FFFFFF}"
(1)   79/       0 :                     			endif
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; -------------------------------------
(1)   85/       0 :                     ; VDP color debug
(1)   86/       0 :                     ; -------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     vdp_showme	macro this
(1)   89/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)   90/       0 :                     		move.w	#this,(vdp_data).l
(1)   91/       0 :                     		endm
(1)   92/       0 :                     
(1)   93/       0 :                     ; -------------------------------------
(1)   94/       0 :                     ; Custom ORG-filler
(1)   95/       0 :                     ;
(1)   96/       0 :                     ; (from s2disasm)
(1)   97/       0 :                     ; -------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     org macro address
(1)  100/       0 :                     	if notZ80(MOMCPU)
(1)  101/       0 :                     		if address < *
(1)  102/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)  103/       0 :                     		elseif address > *
(1)  104/       0 :                     paddingSoFar	set paddingSoFar + address - *
(1)  105/       0 :                     			!org address
(1)  106/       0 :                     		endif
(1)  107/       0 :                     	else
(1)  108/       0 :                     		if address < $
(1)  109/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)  110/       0 :                     		else
(1)  111/       0 :                     			while address > $
(1)  112/       0 :                     				db 0
(1)  113/       0 :                     			endm
(1)  114/       0 :                     		endif
(1)  115/       0 :                     	endif
(1)  116/       0 :                         endm
(1)  117/       0 :                     
(1)  118/       0 :                     ; -------------------------------------
(1)  119/       0 :                     ; ZERO Fill padding
(1)  120/       0 :                     ; -------------------------------------
(1)  121/       0 :                     
(1)  122/       0 :                     rompad		macro address			; Zero fill
(1)  123/       0 :                     diff := address - *
(1)  124/       0 :                     		if diff < 0
(1)  125/       0 :                     			error "too much stuff before org $\{address} ($\{(-diff)} bytes)"
(1)  126/       0 :                     		else
(1)  127/       0 :                     			while diff > 1024
(1)  128/       0 :                     				; AS can only generate 1 kb of code on a single line
(1)  129/       0 :                     				dc.b [1024]0
(1)  130/       0 :                     diff := diff - 1024
(1)  131/       0 :                     			endm
(1)  132/       0 :                     			dc.b [diff]0
(1)  133/       0 :                     		endif
(1)  134/       0 :                     	endm
(1)  135/       0 :                     
(1)  136/       0 :                     ; ====================================================================
(1)  137/       0 :                     ; ---------------------------------------------
(1)  138/       0 :                     ; ISO filesystem macros
(1)  139/       0 :                     ; ---------------------------------------------
(1)  140/       0 :                     
(1)  141/       0 :                     ; Set a ISO file
(1)  142/       0 :                     ; NOTE: a valid ISO head is required ($8000 to $B7FF)
(1)  143/       0 :                     
(1)  144/       0 :                     iso_setfs	macro type,start,end
(1)  145/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  146/       0 :                     		dc.b 0						; zero
(1)  147/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  148/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  149/       0 :                     		dc.l start>>11					; Start sector, big
(1)  150/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  151/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  152/       0 :                     		dc.l end-start					; Filesize, big
(1)  153/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  154/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  155/       0 :                     		dc.b 2						; File flags
(1)  156/       0 :                     		dc.b 0,0
(1)  157/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  158/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  159/       0 :                     		dc.b 1,type
(1)  160/       0 :                     .fend:
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     iso_file	macro filename,start,end
(1)  164/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  165/       0 :                     		dc.b 0						; zero
(1)  166/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  167/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  168/       0 :                     		dc.l start>>11					; Start sector, big
(1)  169/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  170/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  171/       0 :                     		dc.l end-start					; Filesize, big
(1)  172/       0 :                     		dc.b (2023-1900)+1				; Year
(1)  173/       0 :                     		dc.b 0,0,0,0,0,0				; TODO
(1)  174/       0 :                     		dc.b 0						; File flags
(1)  175/       0 :                     		dc.b 0,0
(1)  176/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  177/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  178/       0 :                     		dc.b .flend-.flen
(1)  179/       0 :                     .flen:		dc.b filename,";1"
(1)  180/       0 :                     .flend:		dc.b 0
(1)  181/       0 :                     .fend:
(1)  182/       0 :                     		endm
(1)  183/       0 :                     
(1)  184/       0 :                     
      41/       0 :                     		include	"system/shared.asm"		; Shared Genesis/32X/32XCD variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD/32X shared structs and values
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; --------------------------------------------------------
(1)    8/       0 :                     ; Settings
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     ; Structs
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ====================================================================
(1)   16/       0 :                     ; ----------------------------------------------------------------
(1)   17/       0 :                     ; MAIN DREQ-RAM control
(1)   18/       0 :                     ;
(1)   19/       0 :                     ; To read these labels:
(1)   20/       0 :                     ;
(1)   21/       0 :                     ; On the Genesis Side:
(1)   22/       0 :                     ; 	lea	(RAM_MdDreq+DREQ_LABEL),a0
(1)   23/       0 :                     ; On the 32X Side:
(1)   24/       0 :                     ; 	mov	#RAM_Mars_DreqRead+DREQ_LABEL,r1
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Call System_MarsUpdate DURING DISPLAY to transfer your
(1)   27/       0 :                     ; changes.
(1)   28/       0 :                     ; ----------------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; *** List MUST be aligned in 8bytes, end with 0 or 8 ***
(1)   31/       0 :                     
(1)   32/       0 :                     ; 	if MARS|MARSCD
(1)   33/       0 : (MACRO)             		struct 0
(1)   33/       0 : =$0                 GLBL_LASTPC     set *
(1)   33/       0 :                                     dephase
(1)   33/       0 : =$0                 GLBL_LASTORG    set *
(1)   33/       0 :                                     phase 0
(1)   34/       0 :                     Dreq_Palette	ds.w 256				; 256-color palette
(1)   35/     200 :                     ; Dreq_BgExBuff	ds.b $80				; Buffer for current screen mode (NOTE: manual size)
(1)   36/     200 :                     ; Dreq_ObjCam	ds.b sizeof_camera
(1)   37/     200 :                     ; Dreq_Objects	ds.b sizeof_mdlobj*MAX_MODELS		; 3D Objects
(1)   38/     200 :                     ; Dreq_SuperSpr	ds.b sizeof_marsspr*MAX_SUPERSPR	; Super sprites
(1)   39/     200 :                     sizeof_dreq	ds.l 0
(1)   40/     200 : (MACRO)             		endstruct
(1)   40/       0 :                                     !org GLBL_LASTORG
(1)   40/       0 :                                     phase GLBL_LASTPC
(1)   41/       0 :                     
(1)   45/       0 :                     
(1)   46/       0 :                     ; 	endif
(1)   47/       0 :                     
      42/       0 :                     		include	"system/mcd/shared.asm"		; Shared Sega CD variables
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Sega CD shared constants
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; Register area
(1)    9/       0 :                     ;
(1)   10/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   11/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 :                     ; -------------
(1)   15/       0 :                     ; bits
(1)   16/       0 :                     ; -------------
(1)   17/       0 :                     
(1)   18/       0 : =$2                 bitWRamMode	equ 2		;2M | 1M
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; Registers
(1)   22/       0 :                     ; -------------
(1)   23/       0 :                     
(1)   24/       0 : =$3                 mcd_memory	equ $03
(1)   25/       0 : =$6                 mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   26/       0 : =$E                 mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   27/       0 : =$F                 mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   28/       0 : =$10                mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   29/       0 : =$20                mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   30/       0 :                     
(1)   31/       0 :                     ; MemoryMode	equ	$02		;WORD
(1)   32/       0 :                     ; CommMain	equ	$0E		;BYTE
(1)   33/       0 :                     ; CommSub		equ	$0F		;BYTE
(1)   34/       0 :                     ; CommDataM	equ	$10		;Array (size: $E)
(1)   35/       0 :                     ; CommDataS	equ	$20		;Array (size: $E)
(1)   36/       0 :                     
(1)   37/       0 :                     ; ; =================================================================
(1)   38/       0 :                     ; ; ----------------------------------------
(1)   39/       0 :                     ; ; SUB CPU ONLY
(1)   40/       0 :                     ; ; ----------------------------------------
(1)   41/       0 :                     ;
(1)   42/       0 :                     ; ; -------------
(1)   43/       0 :                     ; ; PCM
(1)   44/       0 :                     ; ; -------------
(1)   45/       0 :                     ;
(1)   46/       0 :                     ; PCM		equ	$FF0000
(1)   47/       0 :                     ; ENV		equ	$01		; Envelope
(1)   48/       0 :                     ; PAN		equ	$03		; Panning (%RRRRLLLL, and negative)
(1)   49/       0 :                     ; FDL		equ	$05		; Sample rate $00xx
(1)   50/       0 :                     ; FDH		equ	$07		; Sample rate $xx00
(1)   51/       0 :                     ; LSL		equ	$09		; Loop address $xx00
(1)   52/       0 :                     ; LSH		equ	$0B		; Loop address $00xx
(1)   53/       0 :                     ; ST		equ	$0D		; Start address (only $x0, $x000)
(1)   54/       0 :                     ; Ctrl		equ	$0F		; Control register ($80 - Bank select, $C0 - Channel select)
(1)   55/       0 :                     ; OnOff		equ	$11		; Channel On/Off (BITS: 1 - off, 0 - on)
(1)   56/       0 :                     
(1)   57/       0 :                     ; =================================================================
(1)   58/       0 :                     
      43/       0 :                     		include	"system/md/map.asm"		; Genesis hardware map
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / MegaDrive 68k map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000            sys_exram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000            z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000            ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001            ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002            ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003            ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001            sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003            sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005            sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007            sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009            sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B            sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D            sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100            z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200            z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1            md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000            sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000            vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004            vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011            psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; SEGA CD map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$200000            sysmcd_wram	equ	$200000
(1)   32/       0 : =$A12000            sysmcd_reg	equ	$A12000
(1)   33/       0 :                     
(1)   34/       0 :                     ; ----------------------------------------------------------------
(1)   35/       0 :                     ; 32X map
(1)   36/       0 :                     ; ----------------------------------------------------------------
(1)   37/       0 :                     
(1)   38/       0 : =$A130EC            sysmars_id	equ	$A130EC		; 32X's ID: "MARS"
(1)   39/       0 : =$A15100            sysmars_reg	equ	$A15100		; MARS 32X registers section, see system/mars/map.asm for variables
(1)   40/       0 :                     
(1)   41/       0 :                     ; ----------------------------------------------------------------
(1)   42/       0 :                     ; Genesis / Mega drive Z80 map
(1)   43/       0 :                     ; ----------------------------------------------------------------
(1)   44/       0 :                     
(1)   45/       0 : =$4000              zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   46/       0 : =$4001              zym_data_1	equ	$4001		; YM2612 reg 2
(1)   47/       0 : =$4002              zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   48/       0 : =$4003              zym_data_2	equ	$4003		; YM2612 reg 2
(1)   49/       0 : =$6000              zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9-byte writes)
(1)   50/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   51/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   52/       0 : =$7F11              zpsg_ctrl	equ	$7F11		; PSG control
(1)   53/       0 :                     
      44/       0 :                     		include	"system/mars/map.asm"		; 32X hardware map (SH2 area)
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; --------------------------------------------------------
(1)    7/       0 :                     ; SH2 SIDE MAP
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$0                 CS0		equ	$00000000	; Boot ROM & System registers
(1)   11/       0 : =$2000000           CS1		equ	$02000000	; ROM data all 4MB, Gone if RV=1
(1)   12/       0 : =$4000000           CS2		equ	$04000000	; Framebuffer area
(1)   13/       0 : =$6000000           CS3		equ	$06000000	; SDRAM
(1)   14/       0 : =$20000000          TH		equ	$20000000	; OR value for CacheThru
(1)   15/       0 : =$20004000          _sysreg		equ	$00004000|TH	; MARS System registers
(1)   16/       0 : =$20004100          _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   17/       0 : =$20004200          _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   18/       0 : =$24000000          _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   19/       0 : =$24020000          _overwrite:	equ	CS2|TH+$20000	; Overwrite: $00 writes are ignored
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; Variables
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     
(1)   25/       0 :                     ; ------------------------------------------------
(1)   26/       0 :                     ; System
(1)   27/       0 :                     ; ------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 :                     ; _sysreg
(1)   30/       0 : =$0                 adapter		equ	$00		; adapter control register (Read as WORD)
(1)   31/       0 : =$1                 intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   32/       0 : =$3                 standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   33/       0 : =$5                 hcount		equ	$05		; H Counter (BYTE)
(1)   34/       0 : =$6                 dreqctl		equ	$06		; DREQ control (WORD)
(1)   35/       0 : =$8                 dreqsource	equ	$08		; DREQ source address
(1)   36/       0 : =$C                 dreqdest	equ	$0C		; DREQ destination address
(1)   37/       0 : =$10                dreqlen		equ	$10		; DREQ length
(1)   38/       0 : =$12                dreqfifo	equ	$12		; DREQ FIFO
(1)   39/       0 : =$14                vresintclr	equ	$14		; VRES interrupt clear
(1)   40/       0 : =$16                vintclr		equ	$16		; V interrupt clear
(1)   41/       0 : =$18                hintclr		equ	$18		; H interrupt clear
(1)   42/       0 : =$1A                cmdintclr	equ	$1a		; CMD interrupt clear
(1)   43/       0 : =$1C                pwmintclr	equ	$1C		; PWM interrupt clear
(1)   44/       0 : =$20                comm0		equ	$20		; Communication ports ***
(1)   45/       0 : =$21                comm1		equ	$21		; ALL CPUs can see this ports: including Z80
(1)   46/       0 : =$22                comm2		equ	$22		; only be careful with the read/write directions.
(1)   47/       0 : =$23                comm3		equ	$23		; ODD addresses (1,3,5...) are BYTE-read only.
(1)   48/       0 : =$24                comm4		equ	$24		; EVEN addresses (0,2,4...) can be read as WORDs
(1)   49/       0 : =$25                comm5		equ	$25		; Writing LONG addreses are possible depending
(1)   50/       0 : =$26                comm6		equ	$26		; of the CPU's aligment limitations.
(1)   51/       0 : =$27                comm7		equ	$27		;
(1)   52/       0 : =$28                comm8		equ	$28		;
(1)   53/       0 : =$29                comm9		equ	$29		;
(1)   54/       0 : =$2A                comm10		equ	$2A		;
(1)   55/       0 : =$2B                comm11		equ	$2B		;
(1)   56/       0 : =$2C                comm12		equ	$2C		;
(1)   57/       0 : =$2D                comm13		equ	$2D		;
(1)   58/       0 : =$2E                comm14		equ	$2E		;
(1)   59/       0 : =$2F                comm15		equ	$2F		;
(1)   60/       0 : =$30                timerctl	equ	$30		; PWM Timer Control
(1)   61/       0 : =$31                pwmctl		equ	$31		; PWM Control
(1)   62/       0 : =$32                cycle		equ	$32		; PWM Cycle
(1)   63/       0 : =$34                lchwidth	equ	$34		; PWM L ch Width
(1)   64/       0 : =$36                rchwidth	equ	$36		; PWM R ch Width
(1)   65/       0 : =$38                monowidth	equ	$38		; PWM Monaural Width
(1)   66/       0 :                     
(1)   67/       0 :                     ; _sysreg
(1)   68/       0 :                     ; adapter
(1)   69/       0 : =$1                 CART		equ	%00000001	; CD or Cartridge
(1)   70/       0 : =$2                 ADEN		equ	%00000010	; MARS Enabled: No/Yes
(1)   71/       0 : =$80                FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   72/       0 :                     ; framectl
(1)   73/       0 : =$1                 FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   74/       0 : =$2                 FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   75/       0 :                     ; vdpsts
(1)   76/       0 : =$80                VBLK		equ	%10000000	; VBlank bit
(1)   77/       0 : =$40                HBLK		equ	%01000000	; HBlank bit
(1)   78/       0 : =$20                PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   79/       0 :                     ; intmask
(1)   80/       0 : =$8                 VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   81/       0 : =$4                 HIRQ_ON		equ	$04
(1)   82/       0 : =$2                 CMDIRQ_ON	equ	$02
(1)   83/       0 : =$1                 PWMIRQ_ON	equ	$01
(1)   84/       0 :                     
(1)   85/       0 :                     ; _vdpreg
(1)   86/       0 : =$0                 tvmode		equ	$00		; TV mode
(1)   87/       0 : =$1                 bitmapmd	equ	$01		; Bitmap mode
(1)   88/       0 : =$2                 shift		equ	$02		; Lineshift bit
(1)   89/       0 : =$4                 filllength	equ	$04		; Auto Fill Length register
(1)   90/       0 : =$6                 fillstart	equ	$06		; Auto Fill Start Address register
(1)   91/       0 : =$8                 filldata	equ	$08		; Auto Fill Data register
(1)   92/       0 : =$A                 vdpsts		equ	$0A		; VDP Status register
(1)   93/       0 : =$B                 framectl	equ	$0B		; Frame Buffer Control register
(1)   94/       0 :                     
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     ; SH2 Internal registers, independent for each CPU
(1)   97/       0 :                     ; --------------------------------------------------------
(1)   98/       0 :                     
(1)   99/       0 :                     ; DMA Channel 0: General data transfer
(1)  100/       0 :                     ; DMA Channel 1: PWM only
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFE00          _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  103/       0 : =$FFFFFE10          _FRT		equ	$FFFFFE10	; Free run timer
(1)  104/       0 : =$0                 _TIER		equ	$00		; Timer interrupt enable register
(1)  105/       0 : =$1                 _TCSR		equ	$01		; Timer control & status register
(1)  106/       0 : =$2                 _FRC_H		equ	$02		; Free running counter High
(1)  107/       0 : =$3                 _FRC_L		equ	$03		; Free running counter Low
(1)  108/       0 : =$4                 _OCR_H		equ	$04		; Output compare register High
(1)  109/       0 : =$5                 _OCR_L		equ	$05		; Output compare register Low
(1)  110/       0 : =$6                 _TCR		equ	$06		; Timer control register
(1)  111/       0 : =$7                 _TOCR		equ	$07		; Timer output compare control register
(1)  112/       0 : =$FFFFFE92          _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  113/       0 : =$FFFFFF00          _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  114/       0 : =$FFFFFF04          _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result if read
(1)  115/       0 : =$FFFFFF10          _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  116/       0 : =$FFFFFF14          _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  117/       0 : =$FFFFFF80          _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  118/       0 : =$FFFFFF84          _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  119/       0 : =$FFFFFF88          _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  120/       0 : =$FFFFFF8C          _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  121/       0 : =$FFFFFF90          _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  122/       0 : =$FFFFFF94          _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  123/       0 : =$FFFFFF98          _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  124/       0 : =$FFFFFF9C          _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  125/       0 : =$FFFFFFA0          _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  126/       0 : =$FFFFFFA4          _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  127/       0 : =$FFFFFFA8          _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  128/       0 : =$FFFFFFAC          _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  129/       0 : =$FFFFFFB0          _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  130/       0 : =$FFFFFFB4          _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  131/       0 : =$FFFFFFB8          _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  132/       0 :                     
      45/       0 :                     		include	"system/md/ram.asm"		; Genesis RAM sections
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; MD RAM
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; NOTE for porting this to Sega CD (or SegaCD+32X):
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; Area $FFFD00 to $FFFDFF(aprox) is reserved
(1)    8/       0 :                     ; for the MAIN-CPU's vectors and misc things
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   11/       0 :                     ; Sega 32X
(1)   12/       0 : =$FFFFFFFFFF..      RAM_MdDreq		equ	RAM_MdOther
(1)   13/       0 :                     
(1)   14/       0 :                     ; --------------------------------------------------------
(1)   15/       0 :                     ; Settings
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     
(1)   18/       0 :                     ; Quick
(1)   19/       0 : (MACRO)             			struct $FFFF0000
(1)   19/       0 : =$0                 GLBL_LASTPC     set *
(1)   19/       0 :                                     dephase
(1)   19/       0 : =$0                 GLBL_LASTORG    set *
(1)   19/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   20/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	;
(1)   21/FFFFFFFFFFFF1800 :                     RAM_UserCode		ds.b MAX_UserCode	;
(1)   22/FFFFFFFFFFFF4800 :                     ; RAM_UserData		ds.b MAX_UserData	;
(1)   23/FFFFFFFFFFFF4800 : (MACRO)             			endstruct
(1)   23/FFFFFFFFFFFF0000 :                                     !org GLBL_LASTORG
(1)   23/       0 :                                     phase GLBL_LASTPC
(1)   24/       0 : (MACRO)             			struct $FFFF8000
(1)   24/       0 : =$0                 GLBL_LASTPC     set *
(1)   24/       0 :                                     dephase
(1)   24/       0 : =$0                 GLBL_LASTORG    set *
(1)   24/FFFFFFFFFFFF8000 :                                     phase $FFFF8000
(1)   25/FFFFFFFFFFFF8000 :                     RAM_MdVideo		ds.b MAX_MdVideo	; $FF8000 DMA visuals
(1)   26/FFFFFFFFFFFFA000 :                     RAM_MdSystem		ds.b MAX_MdSystem	;
(1)   27/FFFFFFFFFFFFA500 :                     RAM_MdOther		ds.b MAX_MdOther	; 32X's DREQ goes here
(1)   28/FFFFFFFFFFFFC500 :                     RAM_MdGlobal		ds.b MAX_MdGlobal
(1)   29/FFFFFFFFFFFFCD00 :                     RAM_ScreenBuff		ds.b MAX_ScrnBuff
(1)   30/FFFFFFFFFFFFF500 :                     sizeof_MdRam		ds.l 0
(1)   31/FFFFFFFFFFFFF500 : (MACRO)             			endstruct
(1)   31/FFFFFFFFFFFF8000 :                                     !org GLBL_LASTORG
(1)   31/       0 :                                     phase GLBL_LASTPC
(1)   32/       0 : (MACRO)             			report "MD RAM",(sizeof_MdRam-$FFFF0000),$FC00
(1)   33/       0 :                     
(1)   34/       0 : =$FFFFFD00          RAM_Stack		equ RAM_MegaCd		; <-- goes backwards
(1)   35/       0 : =$FFFFFD00          RAM_MegaCd		equ $FFFFFD00
(1)   36/       0 : =$FFFFFE00          RAM_ScreenJump		equ $FFFFFE00;$FFFFFE80		; Screen change section
(1)   37/       0 :                     
      46/       0 :                     		include "game/global.asm"		; Global user variables on the Genesis side.
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Global RAM variables on the Genesis side
(1)    4/       0 :                     ; (Score, Level, etc.)
(1)    5/       0 :                     ; ----------------------------------------------------------------
(1)    6/       0 :                     
(1)    7/       0 : (MACRO)             		struct RAM_MdGlobal
(1)    7/       0 : =$0                 GLBL_LASTPC     set *
(1)    7/       0 :                                     dephase
(1)    7/       0 : =$0                 GLBL_LASTORG    set *
(1)    7/FFFFFFFFFFFFC500 :                                     phase RAM_MDGLOBAL
(1)    8/FFFFFFFFFFFFC500 :                     RAM_Glbl_Scrn	ds.w 1				; Current screen number
(1)    9/FFFFFFFFFFFFC502 :                     sizeof_mdglbl	ds.l 0
(1)   10/FFFFFFFFFFFFC504 : (MACRO)             		endstruct
(1)   10/FFFFFFFFFFFFC500 :                                     !org GLBL_LASTORG
(1)   10/       0 :                                     phase GLBL_LASTPC
(1)   11/       0 : (MACRO)             		report "68K GLOBALS",sizeof_mdglbl-RAM_MdGlobal,MAX_MdGlobal
(1)   12/       0 :                     
(1)   13/       0 :                     
      47/       0 :                     
      48/       0 :                     ; ====================================================================
      49/       0 :                     ; ----------------------------------------------------------------
      50/       0 :                     ; Init
      51/       0 :                     ; ----------------------------------------------------------------
      52/       0 :                     
      53/       0 :                     ; ---------------------------------------------
      54/       0 :                     ; 32X INIT
      55/       0 :                     ; ---------------------------------------------
      56/       0 :                     
     125/       0 :                     		include	"system/head_pico.asm"			; Pico header
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; REMINDER: NO Z80 CPU, DO NOT USE THE Z80 AREA IF
(1)    6/       0 :                     ; SHARING CODING WITH GENESIS.
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     
(1)    9/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)   10/       4 : 0000 0204           		dc.l Pico_Entry		; Entry point MUST point to $3F0
(1)   11/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)   12/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   13/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   14/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   15/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   16/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   17/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   18/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   19/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   20/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   21/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   22/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   32/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   33/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   34/      64 : 0000 0200           		dc.l Pico_Error
(1)   35/      68 : 0000 0202           		dc.l Pico_UserInt	; PICO: User interrupt
(1)   36/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-full interrupt
(1)   37/      70 : FFFF A452           		dc.l RAM_MdMarsHInt	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   38/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   39/      78 : FFFF A44C           		dc.l RAM_MdMarsVInt	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   40/      7C : 0000 0200           		dc.l Pico_Error
(1)   41/      80 : 0000 0200           		dc.l Pico_Error
(1)   42/      84 : 0000 0200           		dc.l Pico_Error
(1)   43/      88 : 0000 0200           		dc.l Pico_Error
(1)   44/      8C : 0000 0200           		dc.l Pico_Error
(1)   45/      90 : 0000 0200           		dc.l Pico_Error
(1)   46/      94 : 0000 0200           		dc.l Pico_Error
(1)   47/      98 : 0000 0200           		dc.l Pico_Error
(1)   48/      9C : 0000 0200           		dc.l Pico_Error
(1)   49/      A0 : 0000 0200           		dc.l Pico_Error
(1)   50/      A4 : 0000 0200           		dc.l Pico_Error
(1)   51/      A8 : 0000 0200           		dc.l Pico_Error
(1)   52/      AC : 0000 0200           		dc.l Pico_Error
(1)   53/      B0 : 0000 0200           		dc.l Pico_Error
(1)   54/      B4 : 0000 0200           		dc.l Pico_Error
(1)   55/      B8 : 0000 0200           		dc.l Pico_Error
(1)   56/      BC : 0000 0200           		dc.l Pico_Error
(1)   57/      C0 : 0000 0200           		dc.l Pico_Error
(1)   58/      C4 : 0000 0200           		dc.l Pico_Error
(1)   59/      C8 : 0000 0200           		dc.l Pico_Error
(1)   60/      CC : 0000 0200           		dc.l Pico_Error
(1)   61/      D0 : 0000 0200           		dc.l Pico_Error
(1)   62/      D4 : 0000 0200           		dc.l Pico_Error
(1)   63/      D8 : 0000 0200           		dc.l Pico_Error
(1)   64/      DC : 0000 0200           		dc.l Pico_Error
(1)   65/      E0 : 0000 0200           		dc.l Pico_Error
(1)   66/      E4 : 0000 0200           		dc.l Pico_Error
(1)   67/      E8 : 0000 0200           		dc.l Pico_Error
(1)   68/      EC : 0000 0200           		dc.l Pico_Error
(1)   69/      F0 : 0000 0200           		dc.l Pico_Error
(1)   70/      F4 : 0000 0200           		dc.l Pico_Error
(1)   71/      F8 : 0000 0200           		dc.l Pico_Error
(1)   72/      FC : 0000 0200           		dc.l Pico_Error
(1)   73/     100 : 5345 4741 2050 4943 		dc.b "SEGA PICO       "
                    4F20 2020 2020 2020 
(1)   74/     110 : 2843 2947 4636 3420 		dc.b "(C)GF64 2023.???"
                    3230 3233 2E3F 3F3F 
(1)   75/     120 : 4D61 7273 6961 6E6F 		dc.b "Marsiano PICO                                   "
                    2050 4943 4F20 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   76/     150 : 4D61 7273 6961 6E6F 		dc.b "Marsiano PICO                                   "
                    2050 4943 4F20 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
                    2020 2020 2020 2020 
(1)   77/     180 : 474D 2054 4543 4844 		dc.b "GM TECHDEMO-01"
                    454D 4F2D 3031      
(1)   78/     18E : 0000                		dc.w 0
(1)   79/     190 : 4A36 2020 2020 2020 		dc.b "J6              "
                    2020 2020 2020 2020 
(1)   80/     1A0 : 0000 0000           		dc.l 0
(1)   81/     1A4 : 0004 A000           		dc.l ROM_END
(1)   82/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   83/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   84/     1B0 : 2020 2020           		dc.l $20202020		; dc.b "RA",$F8,$20
(1)   85/     1B4 : 2020 2020           		dc.l $20202020		; $200000
(1)   86/     1B8 : 2020 2020           		dc.l $20202020		; $203FFF
(1)   87/     1BC :                     		align $1F0
(1)   88/     1F0 : 4A55 2020 2020 2020 		dc.b "JU              "
                    2020 2020 2020 2020 
(1)   89/     200 :                     
(1)   90/     200 :                     ; ====================================================================
(1)   91/     200 :                     ; ----------------------------------------------------------------
(1)   92/     200 :                     ; Error handlers
(1)   93/     200 :                     ;
(1)   94/     200 :                     ; all these do nothing currently
(1)   95/     200 :                     ; ----------------------------------------------------------------
(1)   96/     200 :                     
(1)   97/     200 :                     Pico_ErrBus:				; Bus error
(1)   98/     200 :                     Pico_ErrAddr:				; Address error
(1)   99/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)  100/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)  101/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)  102/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  103/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  104/     200 :                     Pico_Trace:				; Trace
(1)  105/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  106/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  107/     200 :                     Pico_ErrorEx:				; Error exception
(1)  108/     200 :                     Pico_Error:
(1)  109/     200 : 4E73                		rte			; Return from Exception
(1)  110/     202 :                     
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     ; PICO exclusive interrupts
(1)  113/     202 :                     ; ----------------------------------------------------------------
(1)  114/     202 :                     
(1)  115/     202 :                     Pico_UserInt:
(1)  116/     202 :                     Pico_PcmInt:	; <-- Interrupt when the PCM chips gets full, Ojamajo# uses this.
(1)  117/     202 :                     Pico_UnkInt:
(1)  118/     202 : 4E73                		rte
(1)  119/     204 :                     
(1)  120/     204 :                     ; ====================================================================
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     ; Entry point
(1)  123/     204 :                     ; ----------------------------------------------------------------
(1)  124/     204 :                     
(1)  125/     204 :                     Pico_Entry:
(1)  126/     204 :                     	; --------------------------------
(1)  127/     204 :                     	; Activate PICO system
(1)  128/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  129/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  130/     20E : 203C 5345 4741      		move.l	#"SEGA",d0
(1)  131/     214 : 01C8 0000           		movep.l	d0,(a0)			; Unlock PICO system
(1)  132/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Random VDP test to unlock it
(1)  133/     21E :                     
(1)  134/     21E :                     	; --------------------------------
(1)  135/     21E :                     
(1)  136/     21E : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  137/     224 : 223C FFFF F500      		move.l	#sizeof_mdram,d1
(1)  138/     22A : 7000                		moveq	#0,d0
(1)  139/     22C : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  140/     22E : B1C1                		cmp.l	d1,a0
(1)  141/     230 : 65FA                		bcs.s	.loop_ram
(1)  142/     232 : 4CF9 7FFF 00FF 0000 		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
(1)  143/     23A : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  144/     240 : 3E16                .wait_dma:	move.w	(a6),d7			; Check if our DMA is active.
(1)  145/     242 : 0807 0001           		btst	#1,d7
(1)  146/     246 : 66F8                		bne.s	.wait_dma
(1)  147/     248 :                     
     126/     248 : 4EB9 0000 0264      		jsr	(Sound_init).l
     127/     24E : 4EB9 0000 0360      		jsr	(Video_init).l
     128/     254 : 4EB9 0000 0B24      		jsr	(System_Init).l
     129/     25A : 31FC 0000 C500      		move.w	#0,(RAM_Glbl_Scrn).w			; *** TEMPORAL ***
     130/     260 : 6000 0D8A           		bra.w	Md_ReadModes
     131/     264 :                     
     132/     264 :                     ; ---------------------------------------------
     133/     264 :                     ; MD INIT
     134/     264 :                     ; ---------------------------------------------
     145/     264 :                     
     146/     264 :                     ; ====================================================================
     147/     264 :                     ; --------------------------------------------------------
     148/     264 :                     ; SYSTEM and JUMP codes
     149/     264 :                     ;
     150/     264 :                     ; MD and PICO: Normal ROM locations
     151/     264 :                     ; CD/32X/32XCD: Loaded in RAM
     152/     264 :                     ; --------------------------------------------------------
     153/     264 :                     
     154/     264 :                     ; ---------------------------------------------
     155/     264 :                     ; TOP-RAM Genesis system routines
     156/     264 :                     ; ---------------------------------------------
     157/     264 :                     
     158/     264 :                     Md_SysCode:
     162/     264 :                     
     163/     264 :                     ; ---------------------------------------------
     164/     264 :                     		include	"sound/gema.asm"
(1)    1/     264 :                     ; ====================================================================
(1)    2/     264 :                     ; --------------------------------------------------------
(1)    3/     264 :                     ; GEMA/Nikona sound driver v0.5
(1)    4/     264 :                     ; (C)2023 GenesisFan64
(1)    5/     264 :                     ;
(1)    6/     264 :                     ; Reads custom "miniature" ImpulseTracker files
(1)    7/     264 :                     ; and automaticly picks the soundchip(s) to play.
(1)    8/     264 :                     ;
(1)    9/     264 :                     ; Features:
(1)   10/     264 :                     ; - Support for 32X's PWM:
(1)   11/     264 :                     ;   | 7 extra pseudo-channels in either MONO
(1)   12/     264 :                     ;   | or STEREO.
(1)   13/     264 :                     ;   | ** REQUIRES specific code for the SH2 side
(1)   14/     264 :                     ;   | and enabling the use of CMD interrupt.
(1)   15/     264 :                     ;   | Uses Slave SH2.
(1)   16/     264 :                     ; - DMA-protection
(1)   17/     264 :                     ;   | This keeps DAC samplerate to a decent
(1)   18/     264 :                     ;   | quality.
(1)   19/     264 :                     ; - DAC Playback at 16000hz
(1)   20/     264 :                     ; - FM special mode with custom frequencies
(1)   21/     264 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   22/     264 :                     ;
(1)   23/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣶⡿⠿⠿⠿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
(1)   24/     264 :                     ; ⠀⠀⠀⠀⠀⠀⢀⣠⣶⢟⣿⠟⠁⢰⢋⣽⡆⠈⠙⣿⡿⣶⣄⡀⠀⠀⠀⠀⠀⠀
(1)   25/     264 :                     ; ⠀⠀⠀⠀⣠⣴⠟⠋⢠⣾⠋⠀⣀⠘⠿⠿⠃⣀⠀⠈⣿⡄⠙⠻⣦⣄⠀⠀⠀⠀
(1)   26/     264 :                     ; ⠀⢀⣴⡿⠋⠁⠀⢀⣼⠏⠺⠛⠛⠻⠂⠐⠟⠛⠛⠗⠘⣷⡀⠀⠈⠙⢿⣦⡀⠀
(1)   27/     264 :                     ; ⣴⡟⢁⣀⣠⣤⡾⢿⡟⠀⠀⠀⠘⢷⠾⠷⡾⠃⠀⠀⠀⢻⡿⢷⣤⣄⣀⡈⢻⣦
(1)   28/     264 :                     ; ⠙⠛⠛⠋⠉⠁⠀⢸⡇⠀⠀⢠⣄⠀⠀⠀⠀⣠⡄⠀⠀⢸⡇⠀⠈⠉⠙⠛⠛⠋
(1)   29/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢸⡇⢾⣦⣀⣹⡧⠀⠀⢼⣏⣀⣴⡷⢸⡇⠀⠀⠀⠀⠀⠀⠀
(1)   30/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⠸⣧⡀⠈⠛⠛⠁⠀⠀⠈⠛⠛⠁⢀⣼⠇⠀⠀⠀⠀⠀⠀⠀
(1)   31/     264 :                     ; ⠀⠀⠀⠀⠀⠀⠀⢀⣘⣿⣶⣤⣀⣀⣀⣀⣀⣀⣤⣶⣿⣃⠀⠀⠀⠀⠀⠀⠀⠀
(1)   32/     264 :                     ; ⠀⠀⠀⠀⠀⣠⡶⠟⠋⢉⣀⣽⠿⠉⠉⠉⠹⢿⣍⣈⠉⠛⠷⣦⡀⠀⠀⠀⠀⠀
(1)   33/     264 :                     ; ⠀⠀⠀⠀⢾⣯⣤⣴⡾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠉⠛⠷⣶⣤⣬⣿⠀⠀⠀⠀⠀
(1)   34/     264 :                     ; ⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀
(1)   35/     264 :                     ; --------------------------------------------------------
(1)   36/     264 :                     
(1)   37/     264 :                     ; ====================================================================
(1)   38/     264 :                     ; --------------------------------------------------------
(1)   39/     264 :                     ; Settings
(1)   40/     264 :                     ; --------------------------------------------------------
(1)   41/     264 :                     
(1)   42/     264 :                     ; --------------------------------------------------------
(1)   43/     264 :                     ; Variables
(1)   44/     264 :                     ; --------------------------------------------------------
(1)   45/     264 :                     
(1)   46/     264 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   47/     264 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   48/     264 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   49/     264 :                     
(1)   50/     264 :                     ; Z80-area points:
(1)   51/     264 : =$40                zDrvFifo	equ commZfifo		; FIFO command storage
(1)   52/     264 : =$80                zDrvFWrt	equ commZWrite		; FIFO command index
(1)   53/     264 : =$81                zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   54/     264 : =$82                zDrvMarsBlk	equ marsBlock		; Disable PWM flag
(1)   55/     264 :                     
(1)   56/     264 :                     ; ====================================================================
(1)   57/     264 :                     ; --------------------------------------------------------
(1)   58/     264 :                     ; Initialize Sound
(1)   59/     264 :                     ;
(1)   60/     264 :                     ; Uses:
(1)   61/     264 :                     ; a0-a1,d0-d1
(1)   62/     264 :                     ; --------------------------------------------------------
(1)   63/     264 :                     
(1)   64/     264 :                     ; 		align $80
(1)   65/     264 :                     Sound_Init:
(1)   66/     264 : 46FC 2700           		move.w	#$2700,sr
(1)   68/     268 :                     		; PICO driver init...
(1)   95/     268 : 4E75                		rts
(1)   96/     26A :                     
(1)   97/     26A :                     ; ====================================================================
(1)   98/     26A :                     ; ----------------------------------------------------------------
(1)   99/     26A :                     ; Subroutines
(1)  100/     26A :                     ; ----------------------------------------------------------------
(1)  101/     26A :                     
(1)  102/     26A :                     ; ------------------------------------------------
(1)  103/     26A :                     ; Lock Z80, get bus
(1)  104/     26A :                     ; ------------------------------------------------
(1)  105/     26A :                     
(1)  106/     26A :                     sndLockZ80:
(1)  107/     26A : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l
(1)  108/     272 :                     .wait:
(1)  109/     272 : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l
(1)  110/     27A : 66F6                		bne.s	.wait
(1)  111/     27C : 4E75                		rts
(1)  112/     27E :                     
(1)  113/     27E :                     ; ------------------------------------------------
(1)  114/     27E :                     ; Unlock Z80, return bus
(1)  115/     27E :                     ; ------------------------------------------------
(1)  116/     27E :                     
(1)  117/     27E :                     sndUnlockZ80:
(1)  118/     27E : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  119/     286 : 4E75                		rts
(1)  120/     288 :                     
(1)  121/     288 :                     ; ------------------------------------------------
(1)  122/     288 :                     ; 68k-to-z80 Sound request
(1)  123/     288 :                     ; enter/exit routines
(1)  124/     288 :                     ;
(1)  125/     288 :                     ; d6 - commFifo index
(1)  126/     288 :                     ; ------------------------------------------------
(1)  127/     288 :                     
(1)  128/     288 :                     sndReq_Enter:
(1)  129/     288 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  130/     28C : DEFC 0010           		adda	#4*4,sp				; Go back to the RTS jump
(1)  131/     290 : 33FC 0100 00A1 1100 		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
(1)  132/     298 : 7C00                		moveq	#0,d6
(1)  133/     29A : 40C6                		move.w	sr,d6
(1)  134/     29C : 4846                		swap	d6
(1)  135/     29E : 007C 0700           		or.w	#$0700,sr			; Disable interrupts
(1)  136/     2A2 : 4BF9 00A0 0080      		lea	(z80_cpu+zDrvFWrt),a5		; a5 - commZWrite
(1)  137/     2A8 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo),a6		; a6 - fifo command list
(1)  138/     2AE :                     .wait:
(1)  139/     2AE : 0839 0000 00A1 1100 		btst	#0,(z80_bus).l			; Wait for Z80
(1)  140/     2B6 : 66F6                		bne.s	.wait
(1)  141/     2B8 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  142/     2BA : 4886                		ext.w	d6				; extend to 16 bits
(1)  143/     2BC : 4E75                		rts
(1)  144/     2BE :                     ; JUMP ONLY
(1)  145/     2BE :                     sndReq_Exit:
(1)  146/     2BE : 33FC 0000 00A1 1100 		move.w	#0,(z80_bus).l
(1)  147/     2C6 : 4846                		swap	d6
(1)  148/     2C8 : 46C6                		move.w	d6,sr
(1)  149/     2CA : 9EFC 0010           		suba	#4*4,sp				; Roll to the last regs
(1)  150/     2CE : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  151/     2D2 : 4E75                		rts
(1)  152/     2D4 :                     
(1)  153/     2D4 :                     ; ------------------------------------------------
(1)  154/     2D4 :                     ; Send request id and arguments
(1)  155/     2D4 :                     ;
(1)  156/     2D4 :                     ; Input:
(1)  157/     2D4 :                     ; d7 - byte to write
(1)  158/     2D4 :                     ; d6 - index pointer
(1)  159/     2D4 :                     ; a5 - commZWrite, update index
(1)  160/     2D4 :                     ; a6 - commZfifo command list
(1)  161/     2D4 :                     ;
(1)  162/     2D4 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  163/     2D4 :                     ; ------------------------------------------------
(1)  164/     2D4 :                     
(1)  165/     2D4 :                     sndReq_scmd:
(1)  166/     2D4 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  167/     2DA : 5206                		addq.b	#1,d6				; next fifo pos
(1)  168/     2DC : 0206 003F           		andi.b	#$3F,d6
(1)  169/     2E0 : 600C                		bra.s	sndReq_sbyte
(1)  170/     2E2 :                     sndReq_slong:
(1)  171/     2E2 : 610A                		bsr	sndReq_sbyte
(1)  172/     2E4 : E09F                		ror.l	#8,d7
(1)  173/     2E6 :                     sndReq_saddr:
(1)  174/     2E6 : 6106                		bsr	sndReq_sbyte
(1)  175/     2E8 : E09F                		ror.l	#8,d7
(1)  176/     2EA :                     sndReq_sword:
(1)  177/     2EA : 6102                		bsr	sndReq_sbyte
(1)  178/     2EC : E09F                		ror.l	#8,d7
(1)  179/     2EE :                     sndReq_sbyte:
(1)  180/     2EE : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  181/     2F2 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  182/     2F4 : 0206 003F           		andi.b	#$3F,d6
(1)  183/     2F8 : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  184/     2FA : 4E75                		rts
(1)  185/     2FC :                     
(1)  186/     2FC :                     ; --------------------------------------------------------
(1)  187/     2FC :                     ; gemaDmaPause
(1)  188/     2FC :                     ;
(1)  189/     2FC :                     ; Call this BEFORE doing any DMA transfer
(1)  190/     2FC :                     ; --------------------------------------------------------
(1)  191/     2FC :                     
(1)  192/     2FC :                     gemaDmaPause:
(1)  194/     2FC : 4E75                		rts
(1)  208/     2FE :                     
(1)  209/     2FE :                     ; --------------------------------------------------------
(1)  210/     2FE :                     ; gemaDmaResume
(1)  211/     2FE :                     ;
(1)  212/     2FE :                     ; Call this AFTER finishing DMA transfer
(1)  213/     2FE :                     ; --------------------------------------------------------
(1)  214/     2FE :                     
(1)  215/     2FE :                     gemaDmaResume:
(1)  217/     2FE : 4E75                		rts
(1)  228/     300 :                     
(1)  229/     300 :                     ; --------------------------------------------------------
(1)  230/     300 :                     ; gemaDmaPause
(1)  231/     300 :                     ;
(1)  232/     300 :                     ; Call this BEFORE doing any DMA transfer
(1)  233/     300 :                     ; --------------------------------------------------------
(1)  234/     300 :                     
(1)  235/     300 :                     gemaDmaPauseRom:
(1)  237/     300 : 4E75                		rts
(1)  255/     302 :                     
(1)  256/     302 :                     ; --------------------------------------------------------
(1)  257/     302 :                     ; gemaDmaResume
(1)  258/     302 :                     ;
(1)  259/     302 :                     ; Call this AFTER finishing DMA transfer
(1)  260/     302 :                     ; --------------------------------------------------------
(1)  261/     302 :                     
(1)  262/     302 :                     gemaDmaResumeRom:
(1)  264/     302 : 4E75                		rts
(1)  280/     304 :                     
(1)  281/     304 :                     ; ------------------------------------------------
(1)  282/     304 :                     ; 32X ONLY: Request CMD interrupt with
(1)  283/     304 :                     ; command
(1)  284/     304 :                     ;
(1)  285/     304 :                     ; d6 - command
(1)  286/     304 :                     ; ------------------------------------------------
(1)  287/     304 :                     
(1)  288/     304 :                     sndReqCmd:
(1)  289/     304 :                     ; 	if MARS
(1)  290/     304 :                     ; .wait_in:	move.b	(sysmars_reg+comm14),d7
(1)  291/     304 :                     ; 		and.w	#%11110000,d7
(1)  292/     304 :                     ; 		bne.s	.wait_in
(1)  293/     304 :                     ; 		and.w	#%00001111,d6
(1)  294/     304 :                     ; 		or.b	d6,d7
(1)  295/     304 :                     ; 		move.b	d7,(sysmars_reg+comm14).l
(1)  296/     304 :                     ; 		move.b	(sysmars_reg+comm14).l,d7
(1)  297/     304 :                     ; 		and.w	#%00001111,d7
(1)  298/     304 :                     ; 		cmp.b	d6,d7
(1)  299/     304 :                     ; 		bne.s	.wait_in
(1)  300/     304 :                     ; 		bset	#7,(sysmars_reg+comm14).l
(1)  301/     304 :                     ; 		bset	#1,(sysmars_reg+standby).l	; Request Slave CMD
(1)  302/     304 :                     ; ; .wait_cmd:	btst	#1,(sysmars_reg+standby).l
(1)  303/     304 :                     ; ; 		bne.s	.wait_cmd
(1)  304/     304 :                     ; .wait_out:	move.b	(sysmars_reg+comm14),d7
(1)  305/     304 :                     ; 		and.w	#%11110000,d7
(1)  306/     304 :                     ; 		bne.s	.wait_out
(1)  307/     304 :                     ; 	endif
(1)  308/     304 : 4E75                		rts
(1)  309/     306 :                     
(1)  310/     306 :                     ; ============================================================
(1)  311/     306 :                     ; --------------------------------------------------------
(1)  312/     306 :                     ; gemaTest
(1)  313/     306 :                     ;
(1)  314/     306 :                     ; For TESTING only.
(1)  315/     306 :                     ; --------------------------------------------------------
(1)  316/     306 :                     
(1)  317/     306 :                     gemaTest:
(1)  318/     306 : 6180                		bsr	sndReq_Enter
(1)  319/     308 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  320/     30C : 61C6                		bsr	sndReq_scmd
(1)  321/     30E : 60AE                		bra 	sndReq_Exit
(1)  322/     310 :                     
(1)  323/     310 :                     ; --------------------------------------------------------
(1)  324/     310 :                     ; gemaPlayTrack
(1)  325/     310 :                     ;
(1)  326/     310 :                     ; Play a track by number
(1)  327/     310 :                     ;
(1)  328/     310 :                     ; d0.b - Track number
(1)  329/     310 :                     ; --------------------------------------------------------
(1)  330/     310 :                     
(1)  331/     310 :                     gemaPlayTrack:
(1)  332/     310 : 6100 FF76           		bsr	sndReq_Enter
(1)  333/     314 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  334/     318 : 61BA                		bsr	sndReq_scmd
(1)  335/     31A : 1E00                		move.b	d0,d7
(1)  336/     31C : 61D0                		bsr	sndReq_sbyte
(1)  337/     31E : 7E00                		moveq	#0,d7
(1)  338/     320 : 61CC                		bsr	sndReq_sbyte
(1)  339/     322 : 609A                		bra 	sndReq_Exit
(1)  340/     324 :                     
(1)  341/     324 :                     ; --------------------------------------------------------
(1)  342/     324 :                     ; gemaPlayFromBlk
(1)  343/     324 :                     ;
(1)  344/     324 :                     ; Play a track by number
(1)  345/     324 :                     ;
(1)  346/     324 :                     ; d0.b - Track number
(1)  347/     324 :                     ; d1.b - Block number
(1)  348/     324 :                     ; --------------------------------------------------------
(1)  349/     324 :                     
(1)  350/     324 :                     gemaPlayFromBlk:
(1)  351/     324 : 6100 FF62           		bsr	sndReq_Enter
(1)  352/     328 : 3E3C 0001           		move.w	#$01,d7		; Command $04
(1)  353/     32C : 61A6                		bsr	sndReq_scmd
(1)  354/     32E : 1E00                		move.b	d0,d7
(1)  355/     330 : 61BC                		bsr	sndReq_sbyte
(1)  356/     332 : 1E01                		move.b	d1,d7
(1)  357/     334 : 61B8                		bsr	sndReq_sbyte
(1)  358/     336 : 6086                		bra 	sndReq_Exit
(1)  359/     338 :                     
(1)  360/     338 :                     ; --------------------------------------------------------
(1)  361/     338 :                     ; gemaStopTrack
(1)  362/     338 :                     ;
(1)  363/     338 :                     ; Stops a track using that ID
(1)  364/     338 :                     ;
(1)  365/     338 :                     ; d0.b - Track number
(1)  366/     338 :                     ; --------------------------------------------------------
(1)  367/     338 :                     
(1)  368/     338 :                     gemaStopTrack:
(1)  369/     338 : 6100 FF4E           		bsr	sndReq_Enter
(1)  370/     33C : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  371/     340 : 6192                		bsr	sndReq_scmd
(1)  372/     342 : 1E00                		move.b	d0,d7
(1)  373/     344 : 61A8                		bsr	sndReq_sbyte
(1)  374/     346 : 6000 FF76           		bra 	sndReq_Exit
(1)  375/     34A :                     
(1)  376/     34A :                     ; --------------------------------------------------------
(1)  377/     34A :                     ; gemaStopAll
(1)  378/     34A :                     ;
(1)  379/     34A :                     ; Stop ALL tracks from ALL buffers.
(1)  380/     34A :                     ;
(1)  381/     34A :                     ; No arguments.
(1)  382/     34A :                     ; --------------------------------------------------------
(1)  383/     34A :                     
(1)  384/     34A :                     gemaStopAll:
(1)  386/     34A : 4E75                		rts
(1)  393/     34C :                     
(1)  394/     34C :                     ; --------------------------------------------------------
(1)  395/     34C :                     ; gemaSetBeats
(1)  396/     34C :                     ;
(1)  397/     34C :                     ; Sets global subbeats
(1)  398/     34C :                     ;
(1)  399/     34C :                     ; d0.w - sub-beats
(1)  400/     34C :                     ; --------------------------------------------------------
(1)  401/     34C :                     
(1)  402/     34C :                     gemaSetBeats:
(1)  403/     34C : 6100 FF3A           		bsr	sndReq_Enter
(1)  404/     350 : 3E3C 000C           		move.w	#$0C,d7		; Command $0C
(1)  405/     354 : 6100 FF7E           		bsr	sndReq_scmd
(1)  406/     358 : 3E00                		move.w	d0,d7
(1)  407/     35A : 618E                		bsr	sndReq_sword
(1)  408/     35C : 6000 FF60           		bra 	sndReq_Exit
(1)  409/     360 :                     
     165/     360 :                     		include	"system/md/video.asm"
(1)    1/     360 :                     ; ====================================================================
(1)    2/     360 :                     ; ----------------------------------------------------------------
(1)    3/     360 :                     ; Genesis Video
(1)    4/     360 :                     ; ----------------------------------------------------------------
(1)    5/     360 :                     
(1)    6/     360 :                     ; ====================================================================
(1)    7/     360 :                     ; --------------------------------------------------------
(1)    8/     360 :                     ; Settings
(1)    9/     360 :                     ; --------------------------------------------------------
(1)   10/     360 :                     
(1)   11/     360 : =$10                MAX_MDDMATSK	equ 16		; MAX DMA BLAST entries
(1)   12/     360 : =$10                MAX_MDOBJ	equ 16		; Max objects for Genesis
(1)   13/     360 : =$7FF               varNullVram	equ $7FF	; Default Blank cell for some video routines
(1)   14/     360 : =$580               varPrintVram	equ $580	; Default location of the PRINT text graphics
(1)   15/     360 : =$3                 varPrintPal	equ 3		; Palette to use for the printable text
(1)   16/     360 :                     
(1)   17/     360 :                     ; --------------------------------------------------------
(1)   18/     360 :                     ; Variables
(1)   19/     360 :                     ; --------------------------------------------------------
(1)   20/     360 :                     
(1)   21/     360 :                     ; VDP Register $80
(1)   22/     360 : =$2                 HVStop		equ $02
(1)   23/     360 : =$10                HintEnbl	equ $10
(1)   24/     360 : =$1                 bitHVStop	equ 1
(1)   25/     360 : =$4                 bitHintEnbl	equ 4
(1)   26/     360 :                     
(1)   27/     360 :                     ; VDP Register $81
(1)   28/     360 : =$40                DispEnbl 	equ $40
(1)   29/     360 : =$20                VintEnbl 	equ $20
(1)   30/     360 : =$10                DmaEnbl		equ $10
(1)   31/     360 : =$6                 bitDispEnbl	equ 6
(1)   32/     360 : =$5                 bitVintEnbl	equ 5
(1)   33/     360 : =$4                 bitDmaEnbl	equ 4
(1)   34/     360 : =$3                 bitV30		equ 3
(1)   35/     360 :                     
(1)   36/     360 :                     ; vdp_ctrl READ bits (full WORD)
(1)   37/     360 : =$9                 bitFifoE	equ 9		; DMA FIFO empty
(1)   38/     360 : =$8                 bitFifoF	equ 8		; DMA FIFO full
(1)   39/     360 : =$7                 bitVInt		equ 7		; Vertical interrupt
(1)   40/     360 : =$6                 bitSprOvr	equ 6		; Sprite overflow
(1)   41/     360 : =$5                 bitSprCol	equ 5		; Sprite collision
(1)   42/     360 : =$4                 bitOdd		equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   43/     360 : =$3                 bitVBlk		equ 3		; Inside VBlank
(1)   44/     360 : =$2                 bitHBlk		equ 2		; Inside HBlank
(1)   45/     360 : =$1                 bitDma		equ 1		; Only works for FILL and COPY
(1)   46/     360 : =$0                 bitPal		equ 0
(1)   47/     360 :                     
(1)   48/     360 :                     ; md_bg_flags
(1)   49/     360 : =$0                 bitDrwR		equ 0
(1)   50/     360 : =$1                 bitDrwL		equ 1
(1)   51/     360 : =$2                 bitDrwD		equ 2
(1)   52/     360 : =$3                 bitDrwU		equ 3
(1)   53/     360 : =$6                 bitMarsBg	equ 6
(1)   54/     360 : =$7                 bitBgOn		equ 7
(1)   55/     360 :                     
(1)   56/     360 :                     ; ====================================================================
(1)   57/     360 :                     ; ----------------------------------------------------------------
(1)   58/     360 :                     ; Structs
(1)   59/     360 :                     ; ----------------------------------------------------------------
(1)   60/     360 :                     
(1)   61/     360 :                     ; IN SH2 ORDER
(1)   62/     360 :                     ; still works fine on this side.
(1)   63/     360 :                     ; md_bg_flags: %EM..UDLR
(1)   64/     360 :                     ; UDLR - off-screen update bits
(1)   65/     360 :                     ;    M - Map belongs to Genesis or 32X
(1)   66/     360 :                     ;    E - Enable this map
(1)   67/     360 :                     
(1)   68/     360 : (MACRO)             		struct 0
(1)   68/     360 : =$360               GLBL_LASTPC     set *
(1)   68/     360 :                                     dephase
(1)   68/     360 : =$360               GLBL_LASTORG    set *
(1)   68/       0 :                                     phase 0
(1)   69/       0 :                     md_bg_bw	ds.b 1		; Block Width
(1)   70/       1 :                     md_bg_bh	ds.b 1		; Block Height
(1)   71/       2 :                     md_bg_blkw	ds.b 1		; Bitshift block size (LSL)
(1)   72/       3 :                     md_bg_flags	ds.b 1		; Drawing flags: %EM00UDLR
(1)   73/       4 :                     md_bg_xset	ds.b 1		; X-counter
(1)   74/       5 :                     md_bg_yset	ds.b 1		; Y-counter
(1)   75/       6 :                     md_bg_movex	ds.b 1		; *** ALIGNMENT, FREE TO USE
(1)   76/       7 :                     md_bg_movey	ds.b 1		; ***
(1)   77/       8 :                     md_bg_w		ds.w 1		; Width in blocks
(1)   78/       A :                     md_bg_h		ds.w 1		; Height in blocks
(1)   79/       C :                     md_bg_wf	ds.w 1		; FULL Width in pixels
(1)   80/       E :                     md_bg_hf	ds.w 1		; FULL Height in pixels
(1)   81/      10 :                     md_bg_xinc_l	ds.w 1		; Layout draw-beams L/R/U/D
(1)   82/      12 :                     md_bg_xinc_r	ds.w 1
(1)   83/      14 :                     md_bg_yinc_u	ds.w 1
(1)   84/      16 :                     md_bg_yinc_d	ds.w 1
(1)   85/      18 :                     md_bg_x_old	ds.w 1		; OLD X position
(1)   86/      1A :                     md_bg_y_old	ds.w 1		; OLD Y position
(1)   87/      1C :                     md_bg_vpos	ds.w 1		; VRAM output for map
(1)   88/      1E :                     md_bg_vram	ds.w 1		; VRAM start for cells
(1)   89/      20 :                     md_bg_low	ds.l 1		; MAIN layout data
(1)   90/      24 :                     md_bg_hi	ds.l 1		; HI layout data
(1)   91/      28 :                     md_bg_blk	ds.l 1		; Block data
(1)   92/      2C :                     md_bg_col	ds.l 1		; Collision data (if needed)
(1)   93/      30 :                     md_bg_x		ds.l 1		; X pos 0000.0000
(1)   94/      34 :                     md_bg_y		ds.l 1		; Y pos 0000.0000
(1)   95/      38 :                     sizeof_mdbg	ds.l 0
(1)   96/      38 : (MACRO)             		endstruct
(1)   96/       0 :                                     !org GLBL_LASTORG
(1)   96/     360 :                                     phase GLBL_LASTPC
(1)   97/     360 :                     
(1)   98/     360 :                     ; --------------------------------
(1)   99/     360 :                     ; object struct
(1)  100/     360 :                     ; --------------------------------
(1)  101/     360 :                     
(1)  102/     360 : (MACRO)             		struct 0
(1)  102/     360 : =$360               GLBL_LASTPC     set *
(1)  102/     360 :                                     dephase
(1)  102/     360 : =$360               GLBL_LASTORG    set *
(1)  102/       0 :                                     phase 0
(1)  103/       0 :                     obj_code	ds.l 1		; Object code
(1)  104/       4 :                     obj_size	ds.l 1		; Object size (see below)
(1)  105/       8 :                     obj_x		ds.l 1		; Object X Position
(1)  106/       C :                     obj_y		ds.l 1		; Object Y Position
(1)  107/      10 :                     obj_map		ds.l 1		; Object image settings
(1)  108/      14 :                     obj_vram	ds.w 1		; Object VRAM position (MD-side only)
(1)  109/      16 :                     obj_x_spd	ds.w 1		; Object X Speed
(1)  110/      18 :                     obj_y_spd	ds.w 1		; Object Y Speed
(1)  111/      1A :                     obj_anim_indx	ds.w 1		; Object animation increment (obj_anim + obj_anim_indx)
(1)  112/      1C :                     obj_anim_id	ds.w 1		; Object animation to read (current|saved)
(1)  113/      1E :                     obj_frame	ds.w 1		; Object display frame (MD: $FFFF, MARS: $YY,$XX)
(1)  114/      20 :                     obj_anim_spd	ds.b 1		; Object animation delay
(1)  115/      21 :                     obj_index	ds.b 1		; Object code index
(1)  116/      22 :                     obj_subid	ds.b 1		; Object SubID
(1)  117/      23 :                     obj_set		ds.b 1		; Object settings
(1)  118/      24 :                     obj_status	ds.b 1		; Object custom status
(1)  119/      25 :                     obj_spwnid	ds.b 1		; Object respawn index (this - 1)
(1)  120/      26 :                     obj_ram		ds.b $40	; Object RAM
(1)  121/      66 :                     sizeof_mdobj	ds.l 0
(1)  122/      68 : (MACRO)             		endstruct
(1)  122/       0 :                                     !org GLBL_LASTORG
(1)  122/     360 :                                     phase GLBL_LASTPC
(1)  123/     360 :                     
(1)  124/     360 :                     ; --------------------------------
(1)  125/     360 :                     ; obj_settings
(1)  126/     360 :                     ; --------------------------------
(1)  127/     360 :                     
(1)  128/     360 : =$7                 bitobj_Mars	equ	7	; This object is for 32X side.
(1)  129/     360 : =$1                 bitobj_flipV	equ	1	; set to flip Sprite Vertically
(1)  130/     360 : =$0                 bitobj_flipH	equ	0	; set to flip Sprite Horizontally
(1)  131/     360 :                     
(1)  132/     360 :                     ; --------------------------------
(1)  133/     360 :                     ; obj_set
(1)  134/     360 :                     ; --------------------------------
(1)  135/     360 :                     
(1)  136/     360 : =$0                 bitobj_air	equ	0	; set if floating/jumping
(1)  137/     360 :                     
(1)  138/     360 :                     ; --------------------------------
(1)  139/     360 :                     ; obj_size
(1)  140/     360 :                     ; --------------------------------
(1)  141/     360 :                     
(1)  142/     360 : =$3                 at_u		equ	3
(1)  143/     360 : =$2                 at_d		equ	2
(1)  144/     360 : =$1                 at_l		equ	1
(1)  145/     360 : =$0                 at_r		equ	0
(1)  146/     360 :                     
(1)  147/     360 :                     ; ====================================================================
(1)  148/     360 :                     ; ----------------------------------------------------------------
(1)  149/     360 :                     ; Video RAM
(1)  150/     360 :                     ; ----------------------------------------------------------------
(1)  151/     360 :                     
(1)  152/     360 : (MACRO)             			struct RAM_MdVideo
(1)  152/     360 : =$360               GLBL_LASTPC     set *
(1)  152/     360 :                                     dephase
(1)  152/     360 : =$360               GLBL_LASTORG    set *
(1)  152/FFFFFFFFFFFF8000 :                                     phase RAM_MDVIDEO
(1)  153/FFFFFFFFFFFF8000 :                     RAM_Objects		ds.b MAX_MDOBJ*sizeof_mdobj
(1)  154/FFFFFFFFFFFF8660 :                     RAM_BgBuffer		ds.b sizeof_mdbg*4	; Map backgrounds, back to front.
(1)  155/FFFFFFFFFFFF8740 :                     RAM_FrameCount		ds.l 1			; Frames counter
(1)  156/FFFFFFFFFFFF8744 :                     RAM_HorScroll		ds.l 240		; DMA Horizontal scroll data
(1)  157/FFFFFFFFFFFF8B04 :                     RAM_VerScroll		ds.l 320/16		; DMA Vertical scroll data
(1)  158/FFFFFFFFFFFF8B54 :                     RAM_ObjDispList		ds.w MAX_MDOBJ		; Objects half-RAM pointers for display (Obj|Extra)
(1)  159/FFFFFFFFFFFF8B74 :                     RAM_SprDrwPz		ds.w 8*70		; External sprite pieces
(1)  160/FFFFFFFFFFFF8FD4 :                     RAM_Sprites		ds.w 8*70		; DMA Sprites
(1)  161/FFFFFFFFFFFF9434 :                     RAM_Palette		ds.w 64			; DMA palette
(1)  162/FFFFFFFFFFFF94B4 :                     RAM_PaletteFd		ds.w 64			; Target MD palette for FadeIn/Out
(1)  163/FFFFFFFFFFFF9534 :                     RAM_MdMarsPalFd		ds.w 256		; Target 32X palette for FadeIn/Out (NOTE: it's slow)
(1)  164/FFFFFFFFFFFF9734 :                     RAM_VdpDmaList		ds.w 7*MAX_MDDMATSK	; DMA BLAST list for VBlank
(1)  165/FFFFFFFFFFFF9814 :                     RAM_VidPrntList		ds.w 3*64		; Video_Print list: Address, Type
(1)  166/FFFFFFFFFFFF9994 :                     RAM_SprDrwCntr		ds.w 1
(1)  167/FFFFFFFFFFFF9996 :                     RAM_SprShowIndx		ds.w 1
(1)  168/FFFFFFFFFFFF9998 :                     RAM_VdpDmaIndx		ds.w 1			; Current index in DMA BLAST list
(1)  169/FFFFFFFFFFFF999A :                     RAM_VdpDmaMod		ds.w 1			; Mid-write flag (just to be safe)
(1)  170/FFFFFFFFFFFF999C :                     RAM_VidPrntVram		ds.w 1			; Default VRAM location for ASCII text used by Video_Print
(1)  171/FFFFFFFFFFFF999E :                     RAM_FadeMdReq		ds.w 1			; FadeIn/Out request for Genesis palette (01-FadeIn 02-FadeOut)
(1)  172/FFFFFFFFFFFF99A0 :                     RAM_FadeMdIncr		ds.w 1			; Fading increment count
(1)  173/FFFFFFFFFFFF99A2 :                     RAM_FadeMdDelay		ds.w 1			; Fading delay
(1)  174/FFFFFFFFFFFF99A4 :                     RAM_FadeMdTmr		ds.w 1			; Fading delay timer
(1)  175/FFFFFFFFFFFF99A6 :                     RAM_FadeMarsReq		ds.w 1			; Same thing but for 32X's 256-color (01-FadeIn 02-FadeOut)
(1)  176/FFFFFFFFFFFF99A8 :                     RAM_FadeMarsIncr	ds.w 1			; (Hint: Set to 4 to syncronize with Genesis' FadeIn/Out)
(1)  177/FFFFFFFFFFFF99AA :                     RAM_FadeMarsDelay	ds.w 1
(1)  178/FFFFFFFFFFFF99AC :                     RAM_FadeMarsTmr		ds.w 1
(1)  179/FFFFFFFFFFFF99AE :                     RAM_VdpRegs		ds.b 24			; VDP Register cache
(1)  180/FFFFFFFFFFFF99C6 :                     sizeof_mdvid		ds.l 0
(1)  181/FFFFFFFFFFFF99C8 : (MACRO)             			endstruct
(1)  181/FFFFFFFFFFFF8000 :                                     !org GLBL_LASTORG
(1)  181/     360 :                                     phase GLBL_LASTPC
(1)  182/     360 :                     
(1)  183/     360 : (MACRO)             			report "MD VIDEO RAM",sizeof_mdvid-RAM_MdVideo,MAX_MdVideo
(1)  184/     360 :                     
(1)  185/     360 :                     ; ====================================================================
(1)  186/     360 :                     ; --------------------------------------------------------
(1)  187/     360 :                     ; Init Genesis video
(1)  188/     360 :                     ; --------------------------------------------------------
(1)  189/     360 :                     
(1)  190/     360 :                     Video_Init:
(1)  191/     360 : 4DF8 8000           		lea	(RAM_MdVideo),a6	; Clear our RAM section
(1)  192/     364 : 7C00                		moveq	#0,d6
(1)  193/     366 : 3E3C 19C5           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  194/     36A :                     .clrram:
(1)  195/     36A : 1CC6                		move.b	d6,(a6)+
(1)  196/     36C : 51CF FFFC           		dbf	d7,.clrram
(1)  197/     370 : 4DFA 0042           		lea	list_vdpregs(pc),a6	; Write "cache'd" VDP registers
(1)  198/     374 : 4BF8 99AE           		lea	(RAM_VdpRegs).w,a5
(1)  199/     378 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1)  200/     37E : 3C3C 8000           		move.w	#$8000,d6
(1)  201/     382 : 3E3C 0012           		move.w	#19-1,d7
(1)  202/     386 :                     .loop:
(1)  203/     386 : 1C1E                		move.b	(a6)+,d6
(1)  204/     388 : 1AC6                		move.b	d6,(a5)+
(1)  205/     38A : 3886                		move.w	d6,(a4)
(1)  206/     38C : DC7C 0100           		add.w	#$100,d6
(1)  207/     390 : 51CF FFF4           		dbf	d7,.loop
(1)  208/     394 :                     .exit:
(1)  209/     394 :                     
(1)  210/     394 :                     ; --------------------------------------------------------
(1)  211/     394 :                     ; Video_Update
(1)  212/     394 :                     ;
(1)  213/     394 :                     ; Writes register data stored in RAM to VDP
(1)  214/     394 :                     ; from Registers $80 to $90
(1)  215/     394 :                     ;
(1)  216/     394 :                     ; WINDOW registers $91 and $92 are written
(1)  217/     394 :                     ; manually.
(1)  218/     394 :                     ;
(1)  219/     394 :                     ; Breaks:
(1)  220/     394 :                     ; d6-d7,a5-a6
(1)  221/     394 :                     ; --------------------------------------------------------
(1)  222/     394 :                     
(1)  223/     394 :                     Video_Update:
(1)  224/     394 : 4DF8 99AE           		lea	(RAM_VdpRegs).w,a6
(1)  225/     398 : 4BF9 00C0 0004      		lea	(vdp_ctrl),a5
(1)  226/     39E : 3C3C 8000           		move.w	#$8000,d6
(1)  227/     3A2 : 3E3C 0010           		move.w	#17-1,d7
(1)  228/     3A6 :                     .loop:
(1)  229/     3A6 : 1C1E                		move.b	(a6)+,d6
(1)  230/     3A8 : 3A86                		move.w	d6,(a5)
(1)  231/     3AA : 0646 0100           		addi.w	#$100,d6
(1)  232/     3AE : 51CF FFF6           		dbf	d7,.loop
(1)  233/     3B2 :                     .exit:
(1)  234/     3B2 : 4E75                		rts
(1)  235/     3B4 :                     
(1)  236/     3B4 :                     ; --------------------------------------------------------
(1)  237/     3B4 :                     
(1)  238/     3B4 :                     list_vdpregs:
(1)  239/     3B4 : 04                  		dc.b $04			; No HBlank interrupt, HV Counter on
(1)  240/     3B5 : 04                  		dc.b $04			; Display ON, No VBlank interrupt
(1)  241/     3B6 : 30                  		dc.b (($C000)>>10)		; Layer A at VRAM $C000 (%00xxx000)
(1)  242/     3B7 : 34                  		dc.b (($D000)>>10)		; Window  at VRAM $D000 (%00xxxxy0)
(1)  243/     3B8 : 07                  		dc.b (($E000)>>13)		; Layer B at VRAM $E000 (%00000xxx)
(1)  244/     3B9 : 7C                  		dc.b (($F800)>>9)		; Sprites at VRAM $F800 (%0xxxxxxy)
(1)  245/     3BA : 00                  		dc.b $00			; Unused
(1)  246/     3BB : 00                  		dc.b $00			; Background color: 0
(1)  247/     3BC : 00                  		dc.b $00			; Unused
(1)  248/     3BD : 00                  		dc.b $00			; Unused
(1)  249/     3BE : 00                  		dc.b $00			; HInt value
(1)  250/     3BF : 00                  		dc.b (%000|%00)			; No ExtInt, Scroll: VSCR:full HSCR:full
(1)  251/     3C0 : 81                  		dc.b $81			; H40, No shadow mode, Normal resolution
(1)  252/     3C1 : 3F                  		dc.b (($FC00)>>10)		; HScroll at VRAM $FC00 (%00xxxxxx)
(1)  253/     3C2 : 00                  		dc.b $00			; Unused
(1)  254/     3C3 : 02                  		dc.b $02			; VDP Auto increment: $02
(1)  255/     3C4 : 01                  		dc.b (%00<<4)|%01		; Layer size: V32 H64
(1)  256/     3C5 : 00                  		dc.b $00
(1)  257/     3C6 : 00                  		dc.b $00
(1)  258/     3C7 :                     		align 2
(1)  259/     3C8 :                     
(1)  260/     3C8 :                     ; Default PRINT palette
(1)  261/     3C8 : 0000 0EEE 0CCC 0AAA ASCII_PAL:	dc.w $0000,$0EEE,$0CCC,$0AAA,$0888,$0444,$000E,$0008
                    0888 0444 000E 0008 
(1)  262/     3D8 : 00EE 0088 00E0 0080 		dc.w $00EE,$0088,$00E0,$0080,$0E00,$0800,$0000,$0000
                    0E00 0800 0000 0000 
(1)  263/     3E8 :                     ASCII_PAL_e:
(1)  264/     3E8 :                     		align 2
(1)  265/     3E8 :                     
(1)  266/     3E8 :                     ; --------------------------------------------------------
(1)  267/     3E8 :                     ; Video_Clear
(1)  268/     3E8 :                     ;
(1)  269/     3E8 :                     ; Clear all video data from VRAM
(1)  270/     3E8 :                     ; --------------------------------------------------------
(1)  271/     3E8 :                     
(1)  272/     3E8 :                     Video_Clear:
(1)  273/     3E8 :                     ; 		move.w	#0,d0			; Clears until $57F
(1)  274/     3E8 :                     ; 		move.w	#0,d1
(1)  275/     3E8 :                     ; 		move.w	#$57F*$20,d2
(1)  276/     3E8 :                     ; 		bsr	Video_Fill
(1)  277/     3E8 :                     
(1)  278/     3E8 :                     Video_ClearScreen:
(1)  279/     3E8 : 7000                		moveq	#0,d0
(1)  280/     3EA : 343C 0FFF           		move.w	#$FFF,d2		; FG/BG size
(1)  281/     3EE : 1238 99B0           		move.b	(RAM_VdpRegs+2).w,d1	; FG
(1)  282/     3F2 : 0241 0038           		andi.w	#%111000,d1
(1)  283/     3F6 : E149                		lsl.w	#8,d1
(1)  284/     3F8 : E549                		lsl.w	#2,d1
(1)  285/     3FA : 6100 0526           		bsr	Video_Fill
(1)  286/     3FE : 1238 99B2           		move.b	(RAM_VdpRegs+4).w,d1	; BG
(1)  287/     402 : 0241 0007           		andi.w	#%000111,d1
(1)  288/     406 : E149                		lsl.w	#8,d1
(1)  289/     408 : EB49                		lsl.w	#5,d1
(1)  290/     40A : 6100 0516           		bsr	Video_Fill
(1)  291/     40E : 343C 0FFF           		move.w	#$FFF,d2		; WD Size
(1)  292/     412 : 1238 99B1           		move.b	(RAM_VdpRegs+3).w,d1	; Window
(1)  293/     416 : 0241 003E           		andi.w	#%111110,d1
(1)  294/     41A : E149                		lsl.w	#8,d1
(1)  295/     41C : E549                		lsl.w	#2,d1
(1)  296/     41E : 6100 0502           		bsr	Video_Fill
(1)  297/     422 :                     
(1)  298/     422 :                     	; RAM cleanup
(1)  299/     422 : 41F8 8744           		lea	(RAM_HorScroll),a0
(1)  300/     426 : 3E3C 00EF           		move.w	#240-1,d7
(1)  301/     42A : 7000                		moveq	#0,d0
(1)  302/     42C :                     .xnext:
(1)  303/     42C : 20C0                		move.l	d0,(a0)+
(1)  304/     42E : 51CF FFFC           		dbf	d7,.xnext
(1)  305/     432 : 41F8 8B04           		lea	(RAM_VerScroll),a0
(1)  306/     436 : 3E3C 0013           		move.w	#(320/16)-1,d7
(1)  307/     43A : 7000                		moveq	#0,d0
(1)  308/     43C :                     .ynext:
(1)  309/     43C : 20C0                		move.l	d0,(a0)+
(1)  310/     43E : 51CF FFFC           		dbf	d7,.ynext
(1)  311/     442 : 41F8 8FD4           		lea	(RAM_Sprites),a0
(1)  312/     446 : 3E3C 008B           		move.w	#((70*8)/4)-1,d7
(1)  313/     44A : 7000                		moveq	#0,d0
(1)  314/     44C :                     .snext:
(1)  315/     44C : 20C0                		move.l	d0,(a0)+
(1)  316/     44E : 51CF FFFC           		dbf	d7,.snext
(1)  317/     452 : 41F8 9434           		lea	(RAM_Palette),a0
(1)  318/     456 : 43F8 94B4           		lea	(RAM_PaletteFd),a1
(1)  319/     45A : 3E3C 001F           		move.w	#(64/2)-1,d7
(1)  320/     45E : 7000                		moveq	#0,d0
(1)  321/     460 :                     .pnext:
(1)  322/     460 : 20C0                		move.l	d0,(a0)+
(1)  323/     462 : 22C0                		move.l	d0,(a1)+
(1)  324/     464 : 51CF FFFA           		dbf	d7,.pnext
(1)  335/     468 : 4E75                		rts
(1)  336/     46A :                     
(1)  337/     46A :                     ; ====================================================================
(1)  338/     46A :                     ; ----------------------------------------------------------------
(1)  339/     46A :                     ; Generic screen-drawing routines
(1)  340/     46A :                     ; ----------------------------------------------------------------
(1)  341/     46A :                     
(1)  342/     46A :                     ; --------------------------------------------------------
(1)  343/     46A :                     ; Video_LoadMap
(1)  344/     46A :                     ;
(1)  345/     46A :                     ; Loads map data, in Horizontal order
(1)  346/     46A :                     ; Can autodetect layer width, height and
(1)  347/     46A :                     ; double interlace mode
(1)  348/     46A :                     ;
(1)  349/     46A :                     ; Input:
(1)  350/     46A :                     ; a0 - Map data
(1)  351/     46A :                     ;
(1)  352/     46A :                     ; d0 | LONG - locate(lyr,x,y) / 00|Layer|X|Y
(1)  353/     46A :                     ; d1 | LONG - mapsize(x,y) / Width|Height (in cells)
(1)  354/     46A :                     ; d2 | WORD - VRAM
(1)  355/     46A :                     ;
(1)  356/     46A :                     ; Breaks:
(1)  357/     46A :                     ; d4-d7,a6
(1)  358/     46A :                     ; --------------------------------------------------------
(1)  359/     46A :                     
(1)  360/     46A :                     Video_LoadMap:
(1)  361/     46A : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  362/     470 : 6100 021E           		bsr	vid_PickLayer
(1)  363/     474 : 3A01                		move.w	d1,d5		; Start here
(1)  364/     476 :                     .yloop:
(1)  365/     476 : 4845                		swap	d5
(1)  366/     478 : 2D44 0004           		move.l	d4,4(a6)
(1)  367/     47C : 2E01                		move.l	d1,d7
(1)  368/     47E : 4847                		swap	d7
(1)  369/     480 :                     .xloop:
(1)  370/     480 : 3A18                		move.w	(a0)+,d5
(1)  371/     482 : BA7C FFFF           		cmp.w	#-1,d5		; -1 ?
(1)  372/     486 : 6606                		bne.s	.nonull
(1)  373/     488 : 3A3C 07FF           		move.w	#varNullVram,d5	; Replace with custom blank tile
(1)  374/     48C : 6002                		bra.s	.cont
(1)  375/     48E :                     .nonull:
(1)  376/     48E : DA42                		add.w	d2,d5
(1)  377/     490 :                     .cont:
(1)  378/     490 :                     
(1)  379/     490 :                     	; Check for double interlace
(1)  380/     490 : 4847                		swap	d7
(1)  381/     492 : 1E38 99BA           		move.b	(RAM_VdpRegs+$C).w,d7
(1)  382/     496 : CE7C 0006           		and.w	#%110,d7
(1)  383/     49A : BE7C 0006           		cmp.w	#%110,d7
(1)  384/     49E : 660E                		bne.s	.nodble
(1)  385/     4A0 : 3E05                		move.w	d5,d7
(1)  386/     4A2 : E24F                		lsr.w	#1,d7
(1)  387/     4A4 : CE7C 07FF           		and.w	#$7FF,d7
(1)  388/     4A8 : CA7C F800           		and.w	#$F800,d5
(1)  389/     4AC : 8A47                		or.w	d7,d5
(1)  390/     4AE :                     .nodble:
(1)  391/     4AE : 4847                		swap	d7
(1)  392/     4B0 : 3C85                		move.w	d5,(a6)
(1)  393/     4B2 : 51CF FFCC           		dbf	d7,.xloop
(1)  394/     4B6 : D886                		add.l	d6,d4
(1)  395/     4B8 : 4845                		swap	d5
(1)  396/     4BA : 51CD FFBA           		dbf	d5,.yloop
(1)  397/     4BE : 4E75                		rts
(1)  398/     4C0 :                     
(1)  399/     4C0 :                     ; --------------------------------------------------------
(1)  400/     4C0 :                     ; Video_LoadMap_Vert
(1)  401/     4C0 :                     ;
(1)  402/     4C0 :                     ; Load map data, Vertical order
(1)  403/     4C0 :                     ;
(1)  404/     4C0 :                     ; a0 - Map data
(1)  405/     4C0 :                     ; d0 | LONG - 00|Lyr|X|Y,  locate(lyr,x,y)
(1)  406/     4C0 :                     ; d1 | LONG - Width|Height (cells),  mapsize(x,y)
(1)  407/     4C0 :                     ; d2 | WORD - VRAM
(1)  408/     4C0 :                     
(1)  409/     4C0 :                     ; Breaks:
(1)  410/     4C0 :                     ; a4-a5,d4-d7
(1)  411/     4C0 :                     ; --------------------------------------------------------
(1)  412/     4C0 :                     
(1)  413/     4C0 :                     Video_LoadMap_Vert:
(1)  414/     4C0 : 49F9 00C0 0000      		lea	(vdp_data),a4
(1)  415/     4C6 : 6100 01C8           		bsr	vid_PickLayer
(1)  416/     4CA : 2A01                		move.l	d1,d5		; Start here
(1)  417/     4CC : 4845                		swap	d5
(1)  418/     4CE :                     .xloop:
(1)  419/     4CE : 4845                		swap	d5
(1)  420/     4D0 : 2F04                		move.l	d4,-(sp)
(1)  421/     4D2 : 3E01                		move.w	d1,d7
(1)  422/     4D4 : 0838 0002 99BA      		btst	#2,(RAM_VdpRegs+$C).w
(1)  423/     4DA : 6702                		beq.s	.yloop
(1)  424/     4DC : E24F                		lsr.w	#1,d7
(1)  425/     4DE :                     .yloop:
(1)  426/     4DE : 2944 0004           		move.l	d4,4(a4)
(1)  427/     4E2 : 3A10                		move.w	(a0),d5
(1)  428/     4E4 : BA7C FFFF           		cmp.w	#-1,d5
(1)  429/     4E8 : 6606                		bne.s	.nonull
(1)  430/     4EA : 3A3C 07FF           		move.w	#varNullVram,d5
(1)  431/     4EE : 6002                		bra.s	.cont
(1)  432/     4F0 :                     .nonull:
(1)  433/     4F0 : DA42                		add.w	d2,d5
(1)  434/     4F2 :                     .cont:
(1)  435/     4F2 : 4847                		swap	d7
(1)  436/     4F4 : D0FC 0002           		adda	#2,a0
(1)  437/     4F8 : 0838 0002 99BA      		btst	#2,(RAM_VdpRegs+$C).w
(1)  438/     4FE : 6712                		beq.s	.nodble
(1)  439/     500 : D0FC 0002           		adda	#2,a0
(1)  440/     504 : 3E05                		move.w	d5,d7
(1)  441/     506 : E24F                		lsr.w	#1,d7
(1)  442/     508 : CE7C 07FF           		and.w	#$7FF,d7
(1)  443/     50C : CA7C F800           		and.w	#$F800,d5
(1)  444/     510 : 8A47                		or.w	d7,d5
(1)  445/     512 :                     .nodble:
(1)  446/     512 : 4847                		swap	d7
(1)  447/     514 : 3885                		move.w	d5,(a4)
(1)  448/     516 : D886                		add.l	d6,d4
(1)  449/     518 : 51CF FFC4           		dbf	d7,.yloop
(1)  450/     51C :                     .outdbl:
(1)  451/     51C : 281F                		move.l	(sp)+,d4
(1)  452/     51E : D8BC 0002 0000      		add.l	#$20000,d4
(1)  453/     524 : 4845                		swap	d5
(1)  454/     526 : 51CD FFA6           		dbf	d5,.xloop
(1)  455/     52A : 4E75                		rts
(1)  456/     52C :                     
(1)  457/     52C :                     ; ====================================================================
(1)  458/     52C :                     ; ----------------------------------------------------------------
(1)  459/     52C :                     ; Custom "PRINT" system, for debugging or quick texts.
(1)  460/     52C :                     ; ----------------------------------------------------------------
(1)  461/     52C :                     
(1)  462/     52C :                     ; --------------------------------------------------------
(1)  463/     52C :                     ; Video_PrintInit
(1)  464/     52C :                     ;
(1)  465/     52C :                     ; Initializes the default Graphics and Palette
(1)  466/     52C :                     ; for the font.
(1)  467/     52C :                     ;
(1)  468/     52C :                     ; *** ON VBLANK OR DISPLAY OFF ONLY ***
(1)  469/     52C :                     ; *** MAKE SURE SH2 IS NOT READING ROM DATA ***
(1)  470/     52C :                     ; --------------------------------------------------------
(1)  471/     52C :                     
(1)  472/     52C :                     Video_PrintInit:
(1)  473/     52C : 203C 0004 0000      		move.l	#ASCII_FONT,d0
(1)  474/     532 : 323C B000           		move.w	#varPrintVram*$20,d1
(1)  475/     536 : 343C 1000           		move.w	#ASCII_FONT_e-ASCII_FONT,d2
(1)  476/     53A : 363C 6580           		move.w	#varPrintVram|(varPrintPal<<13),d3
(1)  477/     53E : 31C3 999C           		move.w	d3,(RAM_VidPrntVram).w
(1)  478/     542 : 6100 04D8           		bsr	Video_LoadArt
(1)  479/     546 :                     Video_PrintPal:
(1)  480/     546 : 41FA FE80           		lea	ASCII_PAL(pc),a0
(1)  481/     54A : 7030                		moveq	#(varPrintPal<<4),d0
(1)  482/     54C : 323C 000F           		move.w	#$F,d1
(1)  483/     550 : 6100 01F0           		bsr	Video_LoadPal	; Write to both palette buffers
(1)  484/     554 : 6000 01E2           		bra	Video_FadePal
(1)  485/     558 :                     
(1)  486/     558 :                     ; --------------------------------------------------------
(1)  487/     558 :                     ; Video_Print
(1)  488/     558 :                     ;
(1)  489/     558 :                     ; Prints string to layer
(1)  490/     558 :                     ; requires ASCII font
(1)  491/     558 :                     ;
(1)  492/     558 :                     ; a0 | DATA - String data w/special characters +
(1)  493/     558 :                     ;             list of RAM locations to read
(1)  494/     558 :                     ; d0 | LONG - Print location on-screen:
(1)  495/     558 :                     ;             00|Lyr|X|Y or locate(layer,x,y)
(1)  496/     558 :                     ;
(1)  497/     558 :                     ; Special characters:
(1)  498/     558 :                     ; "//b" - Shows BYTE value
(1)  499/     558 :                     ; "//w" - Shows WORD value
(1)  500/     558 :                     ; "//l" - Shows LONG value
(1)  501/     558 :                     ;   $0A - Next line
(1)  502/     558 :                     ;   $00 - End of line
(1)  503/     558 :                     ;
(1)  504/     558 :                     ; After $00, put your RAM addresses in LONGS
(1)  505/     558 :                     ; don't forget to put align 2 at the end.
(1)  506/     558 :                     ;
(1)  507/     558 :                     ; CALL Video_PrintInit FIRST before using this.
(1)  508/     558 :                     ;
(1)  509/     558 :                     ; Breaks:
(1)  510/     558 :                     ; d4-d7,a4-a6
(1)  511/     558 :                     ; --------------------------------------------------------
(1)  512/     558 :                     
(1)  513/     558 :                     Video_Print:
(1)  514/     558 :                     ; 		movem.l	d3-d7,-(sp)
(1)  515/     558 :                     ; 		movem.l	a4-a6,-(sp)
(1)  516/     558 :                     
(1)  517/     558 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  518/     55E : 6100 0130           		bsr	vid_PickLayer
(1)  519/     562 : 4BF8 9814           		lea	(RAM_VidPrntList),a5
(1)  520/     566 :                     .newjump:
(1)  521/     566 : 2D44 0004           		move.l	d4,4(a6)
(1)  522/     56A : 2A04                		move.l	d4,d5
(1)  523/     56C :                     .loop:
(1)  524/     56C : 1E18                		move.b	(a0)+,d7
(1)  525/     56E : 6772                		beq	.exit
(1)  526/     570 : 0C07 000A           		cmpi.b	#$A,d7			; $A - next line?
(1)  527/     574 : 6718                		beq.s	.next
(1)  528/     576 : 0C07 005C           		cmpi.b	#$5C,d7			; $27 ("\") special?
(1)  529/     57A : 6716                		beq.s	.special
(1)  530/     57C : 0247 00FF           		andi.w	#$FF,d7
(1)  531/     580 :                     .puttext:
(1)  532/     580 : DE78 999C           		add.w	(RAM_VidPrntVram).w,d7	; VRAM add
(1)  533/     584 : 3C87                		move.w	d7,(a6)
(1)  534/     586 : DABC 0002 0000      		add.l	#$20000,d5
(1)  535/     58C : 60DE                		bra.s	.loop
(1)  536/     58E :                     ; Next line
(1)  537/     58E :                     .next:
(1)  538/     58E : D886                		add.l	d6,d4
(1)  539/     590 : 60D4                		bra.s	.newjump
(1)  540/     592 :                     
(1)  541/     592 :                     ; Specials
(1)  542/     592 :                     .special:
(1)  543/     592 : 1E18                		move.b	(a0)+,d7
(1)  544/     594 : 0C07 0062           		cmpi.b	#"b",d7
(1)  545/     598 : 6712                		beq.s	.isbyte
(1)  546/     59A : 0C07 0077           		cmpi.b	#"w",d7
(1)  547/     59E : 671E                		beq.s	.isword
(1)  548/     5A0 : 0C07 006C           		cmpi.b	#"l",d7
(1)  549/     5A4 : 672A                		beq.s	.islong
(1)  550/     5A6 : 3E3C 005C           		move.w	#"\\",d7		; normal " \ "
(1)  551/     5AA : 60D4                		bra.s	.puttext
(1)  552/     5AC :                     
(1)  553/     5AC :                     	; TEMPORAL VALUES
(1)  554/     5AC :                     .isbyte:
(1)  555/     5AC : 2AC5                		move.l	d5,(a5)+
(1)  556/     5AE : 3AFC 0001           		move.w	#1,(a5)+
(1)  557/     5B2 : DABC 0004 0000      		add.l	#$40000,d5
(1)  558/     5B8 : 2D45 0004           		move.l	d5,4(a6)
(1)  559/     5BC : 60AE                		bra	.loop
(1)  560/     5BE :                     .isword:
(1)  561/     5BE : 2AC5                		move.l	d5,(a5)+
(1)  562/     5C0 : 3AFC 0002           		move.w	#2,(a5)+
(1)  563/     5C4 : DABC 0008 0000      		add.l	#$80000,d5
(1)  564/     5CA : 2D45 0004           		move.l	d5,4(a6)
(1)  565/     5CE : 609C                		bra	.loop
(1)  566/     5D0 :                     .islong:
(1)  567/     5D0 : 2AC5                		move.l	d5,(a5)+
(1)  568/     5D2 : 3AFC 0003           		move.w	#3,(a5)+
(1)  569/     5D6 : DABC 0010 0000      		add.l	#$100000,d5
(1)  570/     5DC : 2D45 0004           		move.l	d5,4(a6)
(1)  571/     5E0 : 608A                		bra	.loop
(1)  572/     5E2 :                     .exit:
(1)  573/     5E2 :                     
(1)  574/     5E2 :                     	; ----------------------------------------
(1)  575/     5E2 :                     	; Print values
(1)  576/     5E2 :                     	;
(1)  577/     5E2 :                     	; vvvv vvvv tttt
(1)  578/     5E2 :                     	; v - vdp pos
(1)  579/     5E2 :                     	; t - value type
(1)  580/     5E2 :                     	; ----------------------------------------
(1)  581/     5E2 :                     
(1)  582/     5E2 :                     	; reading byte by byte because longs doesn't get
(1)  583/     5E2 :                     	; aligned after $00...
(1)  584/     5E2 :                     
(1)  585/     5E2 : 7800                		moveq	#0,d4
(1)  586/     5E4 : 7A00                		moveq	#0,d5
(1)  587/     5E6 : 7C00                		moveq	#0,d6
(1)  588/     5E8 : 4BF8 9814           		lea	(RAM_VidPrntList),a5
(1)  589/     5EC :                     .nextv:
(1)  590/     5EC : 4A95                		tst.l	(a5)
(1)  591/     5EE : 6700 009E           		beq	.nothing
(1)  592/     5F2 :                     
(1)  593/     5F2 :                     	; grab value
(1)  594/     5F2 : 7800                		moveq	#0,d4
(1)  595/     5F4 : 1818                		move.b	(a0)+,d4
(1)  596/     5F6 : E19C                		rol.l	#8,d4
(1)  597/     5F8 : 1818                		move.b	(a0)+,d4
(1)  598/     5FA : E19C                		rol.l	#8,d4
(1)  599/     5FC : 1818                		move.b	(a0)+,d4
(1)  600/     5FE : E19C                		rol.l	#8,d4
(1)  601/     600 : 1818                		move.b	(a0)+,d4
(1)  602/     602 : 2844                		movea.l	d4,a4
(1)  603/     604 : 7800                		moveq	#0,d4
(1)  604/     606 :                     
(1)  605/     606 :                     	; get value
(1)  606/     606 : 3C2D 0004           		move.w	4(a5),d6
(1)  607/     60A : BC7C 0001           		cmp.w	#1,d6		; byte?
(1)  608/     60E : 660E                		bne.s	.vbyte
(1)  609/     610 : 1814                		move.b	(a4),d4
(1)  610/     612 : 2D55 0004           		move.l	(a5),4(a6)
(1)  611/     616 : E91C                		rol.b	#4,d4
(1)  612/     618 : 6158                		bsr.s	.donibl
(1)  613/     61A : E91C                		rol.b	#4,d4
(1)  614/     61C : 6154                		bsr.s	.donibl
(1)  615/     61E :                     .vbyte:
(1)  616/     61E : BC7C 0002           		cmp.w	#2,d6		; word?
(1)  617/     622 : 661C                		bne.s	.vword
(1)  618/     624 : 1814                		move.b	(a4),d4
(1)  619/     626 : E15C                		rol.w	#8,d4
(1)  620/     628 : 182C 0001           		move.b	1(a4),d4
(1)  621/     62C : 2D55 0004           		move.l	(a5),4(a6)
(1)  622/     630 : E95C                		rol.w	#4,d4
(1)  623/     632 : 613E                		bsr.s	.donibl
(1)  624/     634 : E95C                		rol.w	#4,d4
(1)  625/     636 : 613A                		bsr.s	.donibl
(1)  626/     638 : E95C                		rol.w	#4,d4
(1)  627/     63A : 6136                		bsr.s	.donibl
(1)  628/     63C : E95C                		rol.w	#4,d4
(1)  629/     63E : 6132                		bsr.s	.donibl
(1)  630/     640 :                     .vword:
(1)  631/     640 :                     
(1)  632/     640 :                     	; TODO: might break on negative values
(1)  633/     640 : BC7C 0003           		cmp.w	#3,d6		; long?
(1)  634/     644 : 6624                		bne.s	.vlong
(1)  635/     646 : 1814                		move.b	(a4),d4
(1)  636/     648 : E19C                		rol.l	#8,d4
(1)  637/     64A : 182C 0001           		move.b	1(a4),d4
(1)  638/     64E : E19C                		rol.l	#8,d4
(1)  639/     650 : 182C 0002           		move.b	2(a4),d4
(1)  640/     654 : E19C                		rol.l	#8,d4
(1)  641/     656 : 182C 0003           		move.b	3(a4),d4
(1)  642/     65A : 2D55 0004           		move.l	(a5),4(a6)
(1)  643/     65E : 3C3C 0007           		move.w	#7,d6
(1)  644/     662 : E99C                .lngloop:	rol.l	#4,d4
(1)  645/     664 : 610C                		bsr.s	.donibl
(1)  646/     666 : 51CE FFFA           		dbf	d6,.lngloop
(1)  647/     66A :                     .vlong:
(1)  648/     66A : 429D                		clr.l	(a5)+
(1)  649/     66C : 425D                		clr.w	(a5)+
(1)  650/     66E : 6000 FF7C           		bra	.nextv
(1)  651/     672 :                     
(1)  652/     672 :                     ; make nibble byte
(1)  653/     672 :                     .donibl:
(1)  654/     672 : 3A04                		move.w	d4,d5
(1)  655/     674 : 0245 000F           		andi.w	#%1111,d5
(1)  656/     678 : BA3C 000A           		cmp.b	#$A,d5
(1)  657/     67C : 6D04                		blt.s	.lowr
(1)  658/     67E : DA3C 0007           		add.b	#7,d5
(1)  659/     682 :                     .lowr:
(1)  660/     682 : DA7C 0030           		add.w	#"0",d5
(1)  661/     686 : DA78 999C           		add.w	(RAM_VidPrntVram),d5
(1)  662/     68A : 3C85                		move.w	d5,(a6)
(1)  663/     68C : 4E75                		rts
(1)  664/     68E :                     ; exit
(1)  665/     68E :                     .nothing:
(1)  666/     68E :                     ; 		movem.l	(sp)+,a4-a6
(1)  667/     68E :                     ; 		movem.l	(sp)+,d3-d7
(1)  668/     68E : 4E75                		rts
(1)  669/     690 :                     
(1)  670/     690 :                     ; --------------------------------------------------------
(1)  671/     690 :                     ; Shared: pick layer / x pos / y pos and set size
(1)  672/     690 :                     ; --------------------------------------------------------
(1)  673/     690 :                     
(1)  674/     690 :                     vid_PickLayer:
(1)  675/     690 : 2C00                		move.l	d0,d6			; Pick layer
(1)  676/     692 : 4846                		swap	d6
(1)  677/     694 : 0806 0000           		btst	#0,d6
(1)  678/     698 : 671C                		beq.s	.plawnd
(1)  679/     69A : 1838 99B2           		move.b	(RAM_VdpRegs+4).w,d4	; BG
(1)  680/     69E : 3A04                		move.w	d4,d5
(1)  681/     6A0 : E24D                		lsr.w	#1,d5
(1)  682/     6A2 : 0245 0003           		andi.w	#%11,d5
(1)  683/     6A6 : 4844                		swap	d4
(1)  684/     6A8 : 3805                		move.w	d5,d4
(1)  685/     6AA : 4844                		swap	d4
(1)  686/     6AC : 0244 0001           		andi.w	#1,d4
(1)  687/     6B0 : E14C                		lsl.w	#8,d4
(1)  688/     6B2 : EB4C                		lsl.w	#5,d4
(1)  689/     6B4 : 6024                		bra.s	.golyr
(1)  690/     6B6 :                     .plawnd:
(1)  691/     6B6 : 1838 99B0           		move.b	(RAM_VdpRegs+2).w,d4	; FG
(1)  692/     6BA : 0806 0001           		btst	#1,d6
(1)  693/     6BE : 6704                		beq.s	.nowd
(1)  694/     6C0 : 1838 99B1           		move.b	(RAM_VdpRegs+3).w,d4	; WINDOW
(1)  695/     6C4 :                     .nowd:
(1)  696/     6C4 : 3A04                		move.w	d4,d5
(1)  697/     6C6 : E84D                		lsr.w	#4,d5
(1)  698/     6C8 : 0245 0003           		andi.w	#%11,d5
(1)  699/     6CC : 4844                		swap	d4
(1)  700/     6CE : 3805                		move.w	d5,d4
(1)  701/     6D0 : 4844                		swap	d4
(1)  702/     6D2 : 0244 000E           		andi.w	#%00001110,d4
(1)  703/     6D6 : E14C                		lsl.w	#8,d4
(1)  704/     6D8 : E54C                		lsl.w	#2,d4
(1)  705/     6DA :                     .golyr:
(1)  706/     6DA : 0044 4000           		ori.w	#$4000,d4
(1)  707/     6DE : 3A00                		move.w	d0,d5			; Y start pos
(1)  708/     6E0 : 0245 00FF           		andi.w	#$FF,d5			; Y only
(1)  709/     6E4 : ED4D                		lsl.w	#6,d5
(1)  710/     6E6 : 1C38 99BE           		move.b	(RAM_VdpRegs+$10).w,d6
(1)  711/     6EA : 0246 0003           		andi.w	#%11,d6
(1)  712/     6EE : 670A                		beq.s	.thissz
(1)  713/     6F0 : DA45                		add.w	d5,d5			; H64
(1)  714/     6F2 : 0246 0002           		andi.w	#%10,d6
(1)  715/     6F6 : 6702                		beq.s	.thissz
(1)  716/     6F8 : DA45                		add.w	d5,d5			; H128
(1)  717/     6FA :                     .thissz:
(1)  718/     6FA : D845                		add.w	d5,d4
(1)  719/     6FC : 3A00                		move.w	d0,d5
(1)  720/     6FE : 0245 FF00           		andi.w	#$FF00,d5		; X only
(1)  721/     702 : EE4D                		lsr.w	#7,d5
(1)  722/     704 : D845                		add.w	d5,d4			; X add
(1)  723/     706 : 4844                		swap	d4
(1)  724/     708 : 7C00                		moveq	#0,d6
(1)  725/     70A : 3C3C 0040           		move.w	#$40,d6			; Set jump size
(1)  726/     70E : 1A38 99BE           		move.b	(RAM_VdpRegs+$10).w,d5
(1)  727/     712 : 0245 0003           		andi.w	#%11,d5
(1)  728/     716 : 670A                		beq.s	.thisszj
(1)  729/     718 : DC46                		add.w	d6,d6			; H64
(1)  730/     71A : 0245 0002           		andi.w	#%10,d5
(1)  731/     71E : 6702                		beq.s	.thisszj
(1)  732/     720 : DC46                		add.w	d6,d6			; H128
(1)  733/     722 :                     .thisszj:
(1)  734/     722 : 4846                		swap	d6
(1)  735/     724 : 4E75                		rts
(1)  736/     726 :                     
(1)  737/     726 :                     ; ====================================================================
(1)  738/     726 :                     ; ----------------------------------------------------------------
(1)  739/     726 :                     ; Palette fade system, Genesis side
(1)  740/     726 :                     ; ----------------------------------------------------------------
(1)  741/     726 :                     
(1)  742/     726 :                     ; --------------------------------------------------------
(1)  743/     726 :                     ; Video_RunFade
(1)  744/     726 :                     ;
(1)  745/     726 :                     ; Processes palette fading and reports if requests
(1)  746/     726 :                     ; finished on exit.
(1)  747/     726 :                     ;
(1)  748/     726 :                     ; Returns:
(1)  749/     726 :                     ; bne - Still active
(1)  750/     726 :                     ; beq - Finished
(1)  751/     726 :                     ;
(1)  752/     726 :                     ; *** CALL System_WaitFrame FIRST ***
(1)  753/     726 :                     ; --------------------------------------------------------
(1)  754/     726 :                     
(1)  755/     726 :                     Video_RunFade:
(1)  756/     726 : 613E                		bsr	Video_DoPalFade
(1)  757/     728 : 6100 03F8           		bsr	Video_MarsPalFade
(1)  758/     72C : 3E38 99A6           		move.w	(RAM_FadeMarsReq),d7
(1)  759/     730 : 3C38 999E           		move.w	(RAM_FadeMdReq),d6
(1)  760/     734 : 8E46                		or.w	d6,d7
(1)  761/     736 : 4E75                		rts
(1)  762/     738 :                     
(1)  763/     738 :                     ; --------------------------------------------------------
(1)  764/     738 :                     ; Video_LoadPal
(1)  765/     738 :                     ;
(1)  766/     738 :                     ; Input:
(1)  767/     738 :                     ; a0 - Palette data
(1)  768/     738 :                     ; d0 - Start position
(1)  769/     738 :                     ; d1 - Number of colors
(1)  770/     738 :                     ;
(1)  771/     738 :                     ; Breaks:
(1)  772/     738 :                     ; d5-d7,a6
(1)  773/     738 :                     ; --------------------------------------------------------
(1)  774/     738 :                     
(1)  775/     738 :                     Video_FadePal:
(1)  776/     738 : 4DF8 94B4           		lea	(RAM_PaletteFd),a6
(1)  777/     73C : 4278 99A4           		clr.w	(RAM_FadeMdTmr).w
(1)  778/     740 : 6004                		bra.s	vidMd_Pal
(1)  779/     742 :                     Video_LoadPal:
(1)  780/     742 : 4DF8 9434           		lea	(RAM_Palette),a6
(1)  781/     746 :                     vidMd_Pal:
(1)  782/     746 : 2A48                		move.l	a0,a5
(1)  783/     748 : 7E00                		moveq	#0,d7
(1)  784/     74A : 3E00                		move.w	d0,d7
(1)  785/     74C : DE47                		add.w	d7,d7
(1)  786/     74E : DCC7                		adda	d7,a6
(1)  787/     750 : 3E01                		move.w	d1,d7
(1)  788/     752 : 9E7C 0001           		sub.w	#1,d7
(1)  789/     756 : 3C02                		move.w	d2,d6
(1)  790/     758 : CC7C 0001           		and.w	#1,d6
(1)  791/     75C : E25E                		ror.w	#1,d6
(1)  792/     75E :                     .loop:
(1)  793/     75E : 3CDD                		move.w	(a5)+,(a6)+
(1)  794/     760 : 51CF FFFC           		dbf	d7,.loop
(1)  795/     764 : 4E75                		rts
(1)  796/     766 :                     
(1)  797/     766 :                     ; --------------------------------------------------------
(1)  798/     766 :                     ; Video_DoPalFade
(1)  799/     766 :                     ;
(1)  800/     766 :                     ; RAM_ReqFadeMars: (WORD)
(1)  801/     766 :                     ; $00 - No task or finished.
(1)  802/     766 :                     ; $01 - Fade in
(1)  803/     766 :                     ; $02 - Fade out to black
(1)  804/     766 :                     ;
(1)  805/     766 :                     ; NOTE: ONLY CALL THIS OUTSIDE OF VBLANK
(1)  806/     766 :                     ; --------------------------------------------------------
(1)  807/     766 :                     
(1)  808/     766 :                     Video_DoPalFade:
(1)  809/     766 : 0478 0001 99A4      		sub.w	#1,(RAM_FadeMdTmr).w
(1)  810/     76C : 6A14                		bpl.s	.active
(1)  811/     76E : 31F8 99A2 99A4      		move.w	(RAM_FadeMdDelay).w,(RAM_FadeMdTmr).w
(1)  812/     774 : 3E38 999E           		move.w	(RAM_FadeMdReq).w,d7
(1)  813/     778 : DE47                		add.w	d7,d7
(1)  814/     77A : 3E3B 7008           		move.w	.fade_list(pc,d7.w),d7
(1)  815/     77E : 4EFB 7004           		jmp	.fade_list(pc,d7.w)
(1)  816/     782 :                     .active:
(1)  817/     782 : 4E75                		rts
(1)  818/     784 :                     
(1)  819/     784 :                     ; --------------------------------------------
(1)  820/     784 :                     
(1)  821/     784 :                     .fade_list:
(1)  822/     784 : 0006                		dc.w .fade_done-.fade_list
(1)  823/     786 : 0008                		dc.w .fade_in-.fade_list
(1)  824/     788 : 00AC                		dc.w .fade_out-.fade_list
(1)  825/     78A :                     
(1)  826/     78A :                     ; --------------------------------------------
(1)  827/     78A :                     ; No fade or finished.
(1)  828/     78A :                     ; --------------------------------------------
(1)  829/     78A :                     
(1)  830/     78A :                     .fade_done:
(1)  831/     78A : 4E75                		rts
(1)  832/     78C :                     
(1)  833/     78C :                     ; --------------------------------------------
(1)  834/     78C :                     ; Fade in
(1)  835/     78C :                     ; --------------------------------------------
(1)  836/     78C :                     
(1)  837/     78C :                     .fade_in:
(1)  838/     78C : 4DF8 94B4           		lea	(RAM_PaletteFd),a6
(1)  839/     790 : 4BF8 9434           		lea	(RAM_Palette),a5
(1)  840/     794 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  841/     798 : 3238 99A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  842/     79C : D241                		add.w	d1,d1
(1)  843/     79E : 3C00                		move.w	d0,d6
(1)  844/     7A0 : 4846                		swap	d6
(1)  845/     7A2 : 907C 0001           		sub.w	#1,d0
(1)  846/     7A6 :                     .nxt_pal:
(1)  847/     7A6 : 4242                		clr.w	d2		; Reset finished colorbits
(1)  848/     7A8 : 3E16                		move.w	(a6),d7		; d7 - Input
(1)  849/     7AA : 3C15                		move.w	(a5),d6		; d6 - Output
(1)  850/     7AC : 3607                		move.w	d7,d3		; RED
(1)  851/     7AE : 3806                		move.w	d6,d4
(1)  852/     7B0 : CC7C 0EE0           		and.w	#%0000111011100000,d6
(1)  853/     7B4 : C87C 000E           		and.w	#%0000000000001110,d4
(1)  854/     7B8 : C67C 000E           		and.w	#%0000000000001110,d3
(1)  855/     7BC : D841                		add.w	d1,d4
(1)  856/     7BE : B843                		cmp.w	d3,d4
(1)  857/     7C0 : 6506                		bcs.s	.no_red
(1)  858/     7C2 : 3803                		move.w	d3,d4
(1)  859/     7C4 : 847C 0001           		or.w	#%001,d2	; RED is ready
(1)  860/     7C8 :                     .no_red:
(1)  861/     7C8 : 8C44                		or.w	d4,d6
(1)  862/     7CA : E949                		lsl.w	#4,d1
(1)  863/     7CC : 3607                		move.w	d7,d3		; GREEN
(1)  864/     7CE : 3806                		move.w	d6,d4
(1)  865/     7D0 : CC7C 0E0E           		and.w	#%0000111000001110,d6
(1)  866/     7D4 : C87C 00E0           		and.w	#%0000000011100000,d4
(1)  867/     7D8 : C67C 00E0           		and.w	#%0000000011100000,d3
(1)  868/     7DC : D841                		add.w	d1,d4
(1)  869/     7DE : B843                		cmp.w	d3,d4
(1)  870/     7E0 : 6506                		bcs.s	.no_grn
(1)  871/     7E2 : 3803                		move.w	d3,d4
(1)  872/     7E4 : 847C 0002           		or.w	#%010,d2	; GREEN is ready
(1)  873/     7E8 :                     .no_grn:
(1)  874/     7E8 : 8C44                		or.w	d4,d6
(1)  875/     7EA : E949                		lsl.w	#4,d1
(1)  876/     7EC : 3607                		move.w	d7,d3		; BLUE
(1)  877/     7EE : 3806                		move.w	d6,d4
(1)  878/     7F0 : CC7C 00EE           		and.w	#%0000000011101110,d6
(1)  879/     7F4 : C87C 0E00           		and.w	#%0000111000000000,d4
(1)  880/     7F8 : C67C 0E00           		and.w	#%0000111000000000,d3
(1)  881/     7FC : D841                		add.w	d1,d4
(1)  882/     7FE : B843                		cmp.w	d3,d4
(1)  883/     800 : 6506                		bcs.s	.no_blu
(1)  884/     802 : 3803                		move.w	d3,d4
(1)  885/     804 : 847C 0004           		or.w	#%100,d2	; BLUE is ready
(1)  886/     808 :                     .no_blu:
(1)  887/     808 : 8C44                		or.w	d4,d6
(1)  888/     80A : E049                		lsr.w	#8,d1
(1)  889/     80C : 3AC6                		move.w	d6,(a5)+
(1)  890/     80E : DCFC 0002           		adda	#2,a6
(1)  891/     812 : B47C 0007           		cmp.w	#%111,d2
(1)  892/     816 : 6608                		bne.s	.no_fnsh
(1)  893/     818 : 4846                		swap	d6
(1)  894/     81A : 9C7C 0001           		sub.w	#1,d6
(1)  895/     81E : 4846                		swap	d6
(1)  896/     820 :                     .no_fnsh:
(1)  897/     820 : 51C8 FF84           		dbf	d0,.nxt_pal
(1)  898/     824 : 4846                		swap	d6
(1)  899/     826 : 4A46                		tst.w	d6
(1)  900/     828 : 6604                		bne.s	.no_move
(1)  901/     82A : 4278 999E           		clr.w	(RAM_FadeMdReq).w
(1)  902/     82E :                     .no_move:
(1)  903/     82E : 4E75                		rts
(1)  904/     830 :                     
(1)  905/     830 :                     ; --------------------------------------------
(1)  906/     830 :                     ; Fade out
(1)  907/     830 :                     ; --------------------------------------------
(1)  908/     830 :                     
(1)  909/     830 :                     .fade_out:
(1)  910/     830 : 4DF8 9434           		lea	(RAM_Palette),a6
(1)  911/     834 : 303C 0040           		move.w	#64,d0				; Num of colors
(1)  912/     838 : 3238 99A0           		move.w	(RAM_FadeMdIncr).w,d1		; Speed
(1)  913/     83C : 3C00                		move.w	d0,d6
(1)  914/     83E : 4846                		swap	d6
(1)  915/     840 : 907C 0001           		sub.w	#1,d0
(1)  916/     844 :                     .nxt_pal_o:
(1)  917/     844 : 4242                		clr.w	d2			; Reset finished colorbits
(1)  918/     846 : 3E16                		move.w	(a6),d7			; d7 - Input
(1)  919/     848 : 3C07                		move.w	d7,d6
(1)  920/     84A : CE7C 0EE0           		and.w	#%0000111011100000,d7
(1)  921/     84E : CC7C 000E           		and.w	#%0000000000001110,d6
(1)  922/     852 : 9C41                		sub.w	d1,d6
(1)  923/     854 : 6A06                		bpl.s	.no_red_o
(1)  924/     856 : 4246                		clr.w	d6
(1)  925/     858 : 847C 0001           		or.w	#%001,d2		; RED is ready
(1)  926/     85C :                     .no_red_o:
(1)  927/     85C : 8E46                		or.w	d6,d7
(1)  928/     85E : E949                		lsl.w	#4,d1
(1)  929/     860 : 3C07                		move.w	d7,d6
(1)  930/     862 : CE7C 0E0E           		and.w	#%0000111000001110,d7
(1)  931/     866 : CC7C 00E0           		and.w	#%0000000011100000,d6
(1)  932/     86A : 9C41                		sub.w	d1,d6
(1)  933/     86C : 6A06                		bpl.s	.no_grn_o
(1)  934/     86E : 4246                		clr.w	d6
(1)  935/     870 : 847C 0002           		or.w	#%010,d2		; GREEN is ready
(1)  936/     874 :                     .no_grn_o:
(1)  937/     874 : 8E46                		or.w	d6,d7
(1)  938/     876 : E949                		lsl.w	#4,d1
(1)  939/     878 : 3C07                		move.w	d7,d6
(1)  940/     87A : CE7C 00EE           		and.w	#%0000000011101110,d7
(1)  941/     87E : CC7C 0E00           		and.w	#%0000111000000000,d6
(1)  942/     882 : 9C41                		sub.w	d1,d6
(1)  943/     884 : 6A06                		bpl.s	.no_blu_o
(1)  944/     886 : 4246                		clr.w	d6
(1)  945/     888 : 847C 0004           		or.w	#%100,d2		; BLUE is ready
(1)  946/     88C :                     .no_blu_o:
(1)  947/     88C : 8E46                		or.w	d6,d7
(1)  948/     88E : E049                		lsr.w	#8,d1
(1)  949/     890 : 3CC7                		move.w	d7,(a6)+
(1)  950/     892 : B47C 0007           		cmp.w	#%111,d2
(1)  951/     896 : 6608                		bne.s	.no_fnsh_o
(1)  952/     898 : 4846                		swap	d6
(1)  953/     89A : 9C7C 0001           		sub.w	#1,d6
(1)  954/     89E : 4846                		swap	d6
(1)  955/     8A0 :                     .no_fnsh_o:
(1)  956/     8A0 : 51C8 FFA2           		dbf	d0,.nxt_pal_o
(1)  957/     8A4 : 4846                		swap	d6
(1)  958/     8A6 : 4A46                		tst.w	d6
(1)  959/     8A8 : 6604                		bne.s	.no_move_o
(1)  960/     8AA : 4278 999E           		clr.w	(RAM_FadeMdReq).w
(1)  961/     8AE :                     .no_move_o:
(1)  962/     8AE : 4E75                		rts
(1)  963/     8B0 :                     
(1)  964/     8B0 :                     ; ====================================================================
(1)  965/     8B0 :                     ; --------------------------------------------------------
(1)  966/     8B0 :                     ; Genesis DMA
(1)  967/     8B0 :                     ; --------------------------------------------------------
(1)  968/     8B0 :                     
(1)  969/     8B0 :                     ; --------------------------------------------------------
(1)  970/     8B0 :                     ; Video_DmaMkEntry
(1)  971/     8B0 :                     ;
(1)  972/     8B0 :                     ; Sets a new DMA transfer task to the BLAST list
(1)  973/     8B0 :                     ;
(1)  974/     8B0 :                     ; *** ONLY CALL THIS OUTSIDE OF VBLANK ***
(1)  975/     8B0 :                     ;
(1)  976/     8B0 :                     ; d0 | LONG - Art data
(1)  977/     8B0 :                     ; d1 | WORD - VRAM location
(1)  978/     8B0 :                     ; d2 | WORD - Size
(1)  979/     8B0 :                     ;
(1)  980/     8B0 :                     ; Breaks:
(1)  981/     8B0 :                     ; d6-d7,a6
(1)  982/     8B0 :                     ; --------------------------------------------------------
(1)  983/     8B0 :                     
(1)  984/     8B0 :                     Video_DmaMkEntry:
(1)  985/     8B0 : 31FC 0001 999A      		move.w	#1,(RAM_VdpDmaMod).w
(1)  986/     8B6 : 4DF8 9734           		lea	(RAM_VdpDmaList).w,a6
(1)  987/     8BA : 3E38 9998           		move.w	(RAM_VdpDmaIndx).w,d7
(1)  988/     8BE : DCC7                		adda	d7,a6
(1)  989/     8C0 : DE7C 000E           		add.w	#7*2,d7
(1)  990/     8C4 : 31C7 9998           		move.w	d7,(RAM_VdpDmaIndx).w
(1)  991/     8C8 : 3E02                		move.w	d2,d7			; Length
(1)  992/     8CA : 2C3C 9400 9300      		move.l	#$94009300,d6
(1)  993/     8D0 : E24F                		lsr.w	#1,d7
(1)  994/     8D2 : 1C07                		move.b	d7,d6
(1)  995/     8D4 : 4846                		swap	d6
(1)  996/     8D6 : E04F                		lsr.w	#8,d7
(1)  997/     8D8 : 1C07                		move.b	d7,d6
(1)  998/     8DA : 4846                		swap	d6
(1)  999/     8DC : 2CC6                		move.l	d6,(a6)+
(1) 1000/     8DE : 2E00                		move.l	d0,d7			; Source
(1) 1001/     8E0 : E28F                  		lsr.l	#1,d7
(1) 1002/     8E2 : 2C3C 9600 9500       		move.l	#$96009500,d6
(1) 1003/     8E8 : 1C07                 		move.b	d7,d6
(1) 1004/     8EA : E08F                 		lsr.l	#8,d7
(1) 1005/     8EC : 4846                 		swap	d6
(1) 1006/     8EE : 1C07                 		move.b	d7,d6
(1) 1007/     8F0 : 2CC6                 		move.l	d6,(a6)+
(1) 1008/     8F2 : 3C3C 9700            		move.w	#$9700,d6
(1) 1009/     8F6 : E08F                 		lsr.l	#8,d7
(1) 1010/     8F8 : 1C07                 		move.b	d7,d6
(1) 1011/     8FA : 3CC6                 		move.w	d6,(a6)+
(1) 1012/     8FC : 3E01                		move.w	d1,d7			; Destination
(1) 1013/     8FE :                     ; 		and.w	#$7FF,d7
(1) 1014/     8FE :                     ; 		lsl.w	#5,d7
(1) 1015/     8FE : 3C07                		move.w	d7,d6
(1) 1016/     900 : CEBC 0000 3FE0      		and.l	#$3FE0,d7
(1) 1017/     906 : 0047 4000           		ori.w	#$4000,d7
(1) 1018/     90A : E04E                		lsr.w	#8,d6
(1) 1019/     90C : EC4E                		lsr.w	#6,d6
(1) 1020/     90E : 0246 0003           		andi.w	#%11,d6
(1) 1021/     912 : 0046 0080           		ori.w	#$80,d6
(1) 1022/     916 : 3CC7                		move.w	d7,(a6)+
(1) 1023/     918 : 3CC6                		move.w	d6,(a6)+
(1) 1024/     91A : 31FC 0000 999A      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1025/     920 : 4E75                		rts
(1) 1026/     922 :                     
(1) 1027/     922 :                     ; --------------------------------------------------------
(1) 1028/     922 :                     ; Video_Fill
(1) 1029/     922 :                     ;
(1) 1030/     922 :                     ; Fill data to VRAM
(1) 1031/     922 :                     ;
(1) 1032/     922 :                     ; d0 | WORD - WORD to fill
(1) 1033/     922 :                     ; d1 | WORD - VRAM position
(1) 1034/     922 :                     ; d2 | WORD - Size
(1) 1035/     922 :                     ;
(1) 1036/     922 :                     ; Breaks:
(1) 1037/     922 :                     ; d6-d7,a6
(1) 1038/     922 :                     ; --------------------------------------------------------
(1) 1039/     922 :                     
(1) 1040/     922 :                     Video_Fill:
(1) 1041/     922 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1042/     928 : 3E3C 8100           		move.w	#$8100,d7
(1) 1043/     92C : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1044/     930 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1045/     934 : 3C87                		move.w	d7,(a6)
(1) 1046/     936 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1047/     938 : 0807 0001           		btst	#bitDma,d7
(1) 1048/     93C : 66F8                		bne.s	.dmaw
(1) 1049/     93E : 3CBC 8F01           		move.w	#$8F01,(a6)	; Increment $01
(1) 1050/     942 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1051/     944 : 9E7C 0001           		sub.w	#1,d7
(1) 1052/     948 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1053/     94E : 1C07                		move.b	d7,d6
(1) 1054/     950 : 4846                		swap	d6
(1) 1055/     952 : E04F                		lsr.w	#8,d7
(1) 1056/     954 : 1C07                		move.b	d7,d6
(1) 1057/     956 : 4846                		swap	d6
(1) 1058/     958 : 2C86                		move.l	d6,(a6)
(1) 1059/     95A : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1060/     95E : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1061/     960 :                     ; 		lsl.w	#5,d7
(1) 1062/     960 : 3C07                		move.w	d7,d6
(1) 1063/     962 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1064/     966 : 0046 4000           		ori.w	#$4000,d6
(1) 1065/     96A : 4846                		swap	d6
(1) 1066/     96C : 3C07                		move.w	d7,d6
(1) 1067/     96E : E04E                		lsr.w	#8,d6
(1) 1068/     970 : EC4E                		lsr.w	#6,d6
(1) 1069/     972 : 0246 0003           		andi.w	#%11,d6
(1) 1070/     976 : 0046 0080           		ori.w	#$80,d6
(1) 1071/     97A : 2C86                		move.l	d6,(a6)
(1) 1072/     97C : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1073/     980 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1074/     982 : 0807 0001           		btst	#bitDma,d7
(1) 1075/     986 : 66F8                		bne.s	.dmawe
(1) 1076/     988 : 3CBC 8F02           		move.w	#$8F02,(a6)	; Increment $02
(1) 1077/     98C : 3E3C 8100           		move.w	#$8100,d7
(1) 1078/     990 : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1079/     994 : 3C87                		move.w	d7,(a6)
(1) 1080/     996 : 4E75                		rts
(1) 1081/     998 :                     
(1) 1082/     998 :                     ; --------------------------------------------------------
(1) 1083/     998 :                     ; Video_Copy
(1) 1084/     998 :                     ;
(1) 1085/     998 :                     ; Copy VRAM data to another location
(1) 1086/     998 :                     ;
(1) 1087/     998 :                     ; d0 | WORD - VRAM Source
(1) 1088/     998 :                     ; d1 | WORD - VRAM Destination
(1) 1089/     998 :                     ; d2 | WORD - Size
(1) 1090/     998 :                     ;
(1) 1091/     998 :                     ; Breaks:
(1) 1092/     998 :                     ; d6-d7,a6
(1) 1093/     998 :                     ; --------------------------------------------------------
(1) 1094/     998 :                     
(1) 1095/     998 :                     ; TODO: test if this works again...
(1) 1096/     998 :                     
(1) 1097/     998 :                     Video_Copy:
(1) 1098/     998 : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1) 1099/     99E : 3E3C 8100           		move.w	#$8100,d7
(1) 1100/     9A2 : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1101/     9A6 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1102/     9AA : 3C87                		move.w	d7,(a6)
(1) 1103/     9AC : 3E16                .dmaw:		move.w	(a6),d7
(1) 1104/     9AE : 0807 0001           		btst	#bitDma,d7
(1) 1105/     9B2 : 66F8                		bne.s	.dmaw
(1) 1106/     9B4 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1107/     9B8 : 3E02                		move.w	d2,d7			; SIZE
(1) 1108/     9BA : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1109/     9C0 :                     ; 		lsr.w	#1,d7
(1) 1110/     9C0 : 1C07                		move.b	d7,d6
(1) 1111/     9C2 : 4846                		swap	d6
(1) 1112/     9C4 : E04F                		lsr.w	#8,d7
(1) 1113/     9C6 : 1C07                		move.b	d7,d6
(1) 1114/     9C8 : 4846                		swap	d6
(1) 1115/     9CA : 2C86                		move.l	d6,(a6)
(1) 1116/     9CC : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1117/     9D2 : 3E00                		move.w	d0,d7
(1) 1118/     9D4 : 1C07                		move.b	d7,d6
(1) 1119/     9D6 : 4846                		swap	d6
(1) 1120/     9D8 : E04F                		lsr.w	#8,d7
(1) 1121/     9DA : 1C07                		move.b	d7,d6
(1) 1122/     9DC : 2C86                		move.l	d6,(a6)
(1) 1123/     9DE : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1124/     9E2 : 2E02                		move.l	d2,d7			; DESTINATION
(1) 1125/     9E4 :                     ; 		lsl.w	#5,d7
(1) 1126/     9E4 : 3C07                		move.w	d7,d6
(1) 1127/     9E6 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1128/     9EA : 0046 4000           		ori.w	#$4000,d6
(1) 1129/     9EE : 4846                		swap	d6
(1) 1130/     9F0 : 3C07                		move.w	d7,d6
(1) 1131/     9F2 : E04E                		lsr.w	#8,d6
(1) 1132/     9F4 : EC4E                		lsr.w	#6,d6
(1) 1133/     9F6 : 0246 0003           		andi.w	#%11,d6
(1) 1134/     9FA : 0046 00C0           		ori.w	#$C0,d6
(1) 1135/     9FE : 2C86                		move.l	d6,(a6)
(1) 1136/     A00 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1137/     A04 : 3E16                .dmawe:		move.w	(a6),d7
(1) 1138/     A06 : 0807 0001           		btst	#bitDma,d7
(1) 1139/     A0A : 66F8                		bne.s	.dmawe
(1) 1140/     A0C : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1141/     A10 : 3E3C 8100           		move.w	#$8100,d7
(1) 1142/     A14 : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1143/     A18 : 3C87                		move.w	d7,(a6)
(1) 1144/     A1A : 4E75                		rts
(1) 1145/     A1C :                     
(1) 1146/     A1C :                     ; --------------------------------------------------------
(1) 1147/     A1C :                     ; Load graphics using DMA, direct
(1) 1148/     A1C :                     ;
(1) 1149/     A1C :                     ; d0 | LONG - Art data
(1) 1150/     A1C :                     ; d1 | WORD - cell_vram(location)
(1) 1151/     A1C :                     ; d2 | WORD - Size
(1) 1152/     A1C :                     ;
(1) 1153/     A1C :                     ; Breaks:
(1) 1154/     A1C :                     ; d5-d7,a4-a6
(1) 1155/     A1C :                     ;
(1) 1156/     A1C :                     ; *** For faster transfers call this during VBlank ***
(1) 1157/     A1C :                     ; *** MAKE SURE SH2 IS NOT IN THE MIDDLE OF READING
(1) 1158/     A1C :                     ; ROM ***
(1) 1159/     A1C :                     ; --------------------------------------------------------
(1) 1160/     A1C :                     
(1) 1161/     A1C :                     Video_LoadArt:
(1) 1174/     A1C : 40E7                		move.w	sr,-(sp)
(1) 1175/     A1E : 007C 0700           		or	#$700,sr
(1) 1176/     A22 : 49F9 00C0 0004      		lea	(vdp_ctrl),a4
(1) 1177/     A28 : 3C3C 8100           		move.w	#$8100,d6		; DMA ON
(1) 1178/     A2C : 1C38 99AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1179/     A30 : 08C6 0004           		bset	#bitDmaEnbl,d6
(1) 1180/     A34 : 3886                		move.w	d6,(a4)
(1) 1181/     A36 : 3C02                		move.w	d2,d6			; Length
(1) 1182/     A38 : 2A3C 9400 9300      		move.l	#$94009300,d5
(1) 1183/     A3E : E24E                		lsr.w	#1,d6
(1) 1184/     A40 : 1A06                		move.b	d6,d5
(1) 1185/     A42 : 4845                		swap	d5
(1) 1186/     A44 : E04E                		lsr.w	#8,d6
(1) 1187/     A46 : 1A06                		move.b	d6,d5
(1) 1188/     A48 : 4845                		swap	d5
(1) 1189/     A4A : 2885                		move.l	d5,(a4)
(1) 1190/     A4C : 2C00                		move.l	d0,d6			; Source
(1) 1191/     A4E : E28E                  		lsr.l	#1,d6
(1) 1192/     A50 : 2A3C 9600 9500       		move.l	#$96009500,d5
(1) 1193/     A56 : 1A06                 		move.b	d6,d5
(1) 1194/     A58 : E08E                 		lsr.l	#8,d6
(1) 1195/     A5A : 4845                 		swap	d5
(1) 1196/     A5C : 1A06                 		move.b	d6,d5
(1) 1197/     A5E : 2885                 		move.l	d5,(a4)
(1) 1198/     A60 : 3A3C 9700            		move.w	#$9700,d5
(1) 1199/     A64 : E08E                 		lsr.l	#8,d6
(1) 1200/     A66 : 1A06                 		move.b	d6,d5
(1) 1201/     A68 : 3885                 		move.w	d5,(a4)
(1) 1202/     A6A : 3C01                		move.w	d1,d6			; Destination
(1) 1203/     A6C : 3A06                		move.w	d6,d5
(1) 1204/     A6E : CCBC 0000 3FE0      		and.l	#$3FE0,d6
(1) 1205/     A74 : 0046 4000           		ori.w	#$4000,d6
(1) 1206/     A78 : E04D                		lsr.w	#8,d5
(1) 1207/     A7A : EC4D                		lsr.w	#6,d5
(1) 1208/     A7C : 0245 0003           		andi.w	#%11,d5
(1) 1209/     A80 : 0045 0080           		ori.w	#$80,d5
(1) 1210/     A84 : 2E00                		move.l	d0,d7
(1) 1211/     A86 : 4847                		swap	d7
(1) 1212/     A88 : E04F                		lsr.w	#8,d7
(1) 1213/     A8A : BE3C 00FF           		cmp.b	#$FF,d7
(1) 1214/     A8E : 671A                		beq.s	.from_ram
(1) 1215/     A90 : 6100 0188           		bsr	System_DmaEnter_ROM
(1) 1216/     A94 : 3F05                 		move.w	d5,-(sp)
(1) 1217/     A96 : 3886                		move.w	d6,(a4)				; d6 - First word
(1) 1218/     A98 : 389F                		move.w	(sp)+,(a4)			; *** Second write, 68k freezes until DMA ends
(1) 1219/     A9A : 3C3C 8100           		move.w	#$8100,d6			; DMA OFF
(1) 1220/     A9E : 1C38 99AF           		move.b	(RAM_VdpRegs+1),d6
(1) 1221/     AA2 : 3886                		move.w	d6,(a4)
(1) 1222/     AA4 : 46DF                		move.w	(sp)+,sr
(1) 1239/     AA6 : 6000 0176           		bra	System_DmaExit_ROM
(1) 1240/     AAA :                     .from_ram:
(1) 1241/     AAA : 3887                		move.w	d7,(a4)
(1) 1242/     AAC : 3F05                 		move.w	d5,-(sp)
(1) 1243/     AAE : 389F                		move.w	(sp)+,(a4)			; Second write
(1) 1244/     AB0 : 3E3C 8100           		move.w	#$8100,d7
(1) 1245/     AB4 : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1246/     AB8 : 3887                		move.w	d7,(a4)
(1) 1247/     ABA : 46DF                		move.w	(sp)+,sr
(1) 1248/     ABC : 4E75                		rts
(1) 1249/     ABE :                     
(1) 1250/     ABE :                     ; --------------------------------------------------------
(1) 1251/     ABE :                     ; Video_DmaBlast
(1) 1252/     ABE :                     ;
(1) 1253/     ABE :                     ; Process DMA tasks from a predefined list in RAM
(1) 1254/     ABE :                     ; **CALL THIS DURING VBLANK ONLY**
(1) 1255/     ABE :                     ;
(1) 1256/     ABE :                     ; Breaks:
(1) 1257/     ABE :                     ; d5-d7,a3-a4
(1) 1258/     ABE :                     ; --------------------------------------------------------
(1) 1259/     ABE :                     
(1) 1260/     ABE :                     ; Entry format:
(1) 1261/     ABE :                     ; $94xx,$93xx,$96xx,$95xx,$97xx (SIZE,SOURCE)
(1) 1262/     ABE :                     ; $40000080 (vdp destination + dma bit)
(1) 1263/     ABE :                     
(1) 1264/     ABE :                     Video_DmaBlast:
(1) 1265/     ABE : 4A78 999A           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1) 1266/     AC2 : 6656                		bne.s	.exit
(1) 1267/     AC4 : 4A78 9998           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1) 1268/     AC8 : 6750                		beq.s	.exit
(1) 1269/     ACA : 49F9 00C0 0004      		lea	(vdp_ctrl),a4			; Enter processing loop
(1) 1270/     AD0 : 47F8 9734           		lea	(RAM_VdpDmaList).w,a3
(1) 1271/     AD4 : 3E3C 8100           		move.w	#$8100,d7			; DMA ON
(1) 1272/     AD8 : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1) 1273/     ADC : 08C7 0004           		bset	#bitDmaEnbl,d7
(1) 1274/     AE0 : 3887                		move.w	d7,(a4)
(1) 1275/     AE2 : 6100 0136           		bsr	System_DmaEnter_ROM		; Request Z80 stop and SH2 backup
(1) 1279/     AE6 : 4A78 9998           .next:		tst.w	(RAM_VdpDmaIndx).w
(1) 1280/     AEA : 6720                		beq.s	.end
(1) 1281/     AEC : 2893                		move.l	(a3),(a4)			; Size
(1) 1282/     AEE : 429B                		clr.l	(a3)+
(1) 1283/     AF0 : 2893                		move.l	(a3),(a4)			; Source
(1) 1284/     AF2 : 429B                		clr.l	(a3)+
(1) 1285/     AF4 : 3893                		move.w	(a3),(a4)
(1) 1286/     AF6 : 425B                		clr.w	(a3)+
(1) 1287/     AF8 : 3C13                		move.w	(a3),d6				; Destination
(1) 1288/     AFA : 425B                		clr.w	(a3)+
(1) 1289/     AFC : 3A13                		move.w	(a3),d5
(1) 1290/     AFE : 425B                		clr.w	(a3)+
(1) 1291/     B00 : 3886                		move.w	d6,(a4)
(1) 1292/     B02 : 3885                		move.w	d5,(a4)
(1) 1293/     B04 : 0478 000E 9998      		sub.w	#7*2,(RAM_VdpDmaIndx).w
(1) 1294/     B0A : 60DA                		bra.s	.next
(1) 1295/     B0C :                     .end:
(1) 1299/     B0C : 6100 0110           		bsr	System_DmaExit_ROM		; Resume Z80 and SH2 direct
(1) 1300/     B10 : 3E3C 8100           		move.w	#$8100,d7			; DMA OFF
(1) 1301/     B14 : 1E38 99AF           		move.b	(RAM_VdpRegs+1).w,d7
(1) 1302/     B18 : 3887                		move.w	d7,(a4)
(1) 1303/     B1A :                     .exit:
(1) 1304/     B1A : 4E75                		rts
(1) 1305/     B1C :                     
(1) 1306/     B1C :                     ; ; ====================================================================
(1) 1307/     B1C :                     ; ; ----------------------------------------------------------------
(1) 1308/     B1C :                     ; ; MAP layout system
(1) 1309/     B1C :                     ; ;
(1) 1310/     B1C :                     ; ; Note: uses some RAM'd video registers.
(1) 1311/     B1C :                     ; ; ----------------------------------------------------------------
(1) 1312/     B1C :                     ;
(1) 1313/     B1C :                     ; ; --------------------------------------------------------
(1) 1314/     B1C :                     ; ; MdMap_Init
(1) 1315/     B1C :                     ; ;
(1) 1316/     B1C :                     ; ; Initializes all BG buffers
(1) 1317/     B1C :                     ; ; --------------------------------------------------------
(1) 1318/     B1C :                     ;
(1) 1319/     B1C :                     ; MdMap_Init:
(1) 1320/     B1C :                     ; 		lea	(RAM_BgBuffer),a0
(1) 1321/     B1C :                     ; 		move.w	#((sizeof_mdbg*4)/4)-1,d1
(1) 1322/     B1C :                     ; 		moveq	#0,d0
(1) 1323/     B1C :                     ; .clr:
(1) 1324/     B1C :                     ; 		move.l	d0,(a0)+
(1) 1325/     B1C :                     ; 		dbf	d1,.clr
(1) 1326/     B1C :                     ; 		rts
(1) 1327/     B1C :                     ;
(1) 1328/     B1C :                     ; ; --------------------------------------------------------
(1) 1329/     B1C :                     ; ; MdMap_Set
(1) 1330/     B1C :                     ; ;
(1) 1331/     B1C :                     ; ; Sets a new scrolling section to use.
(1) 1332/     B1C :                     ; ;
(1) 1333/     B1C :                     ; ; **SET YOUR X and Y COORDS EXTERNALLY
(1) 1334/     B1C :                     ; ; BEFORE GETTING HERE**
(1) 1335/     B1C :                     ; ;
(1) 1336/     B1C :                     ; ; Input:
(1) 1337/     B1C :                     ; ; ** Genesis side **
(1) 1338/     B1C :                     ; ; d0 | WORD - BG internal slot (-1: 32X only)
(1) 1339/     B1C :                     ; ; d1 | WORD - VRAM location for map data
(1) 1340/     B1C :                     ; ; d2 | WORD - VRAM add + palette
(1) 1341/     B1C :                     ; ; a0 - Level header data:
(1) 1342/     B1C :                     ; ; 	dc.w width,height
(1) 1343/     B1C :                     ; ; 	dc.b blkwidth,blkheight
(1) 1344/     B1C :                     ; ; a1 - Block data
(1) 1345/     B1C :                     ; ; a2 - LOW priority layout data
(1) 1346/     B1C :                     ; ; a3 - HIGH priority layout data
(1) 1347/     B1C :                     ; ; d4 - Collision data
(1) 1348/     B1C :                     ; ;
(1) 1349/     B1C :                     ; ; Then load the graphics externally at the same
(1) 1350/     B1C :                     ; ; VRAM location set in d2
(1) 1351/     B1C :                     ; ;
(1) 1352/     B1C :                     ; ; ** 32X side **
(1) 1353/     B1C :                     ; ; d0 | WORD - Write as -1
(1) 1354/     B1C :                     ; ; d1 | WORD - Scroll buffer to use on the 32X side (0 - default)
(1) 1355/     B1C :                     ; ; d2 | WORD - Index-palette increment
(1) 1356/     B1C :                     ; ; a0 - Level header data: (68K AREA)
(1) 1357/     B1C :                     ; ; 	dc.w width,height
(1) 1358/     B1C :                     ; ; 	dc.b blkwidth,blkheight
(1) 1359/     B1C :                     ; ; a1 - Graphics data stored as blocks (SH2 AREA)
(1) 1360/     B1C :                     ; ; a2 - MAIN layout (SH2 AREA)
(1) 1361/     B1C :                     ; ; a3 - *** UNUSED, set to 0
(1) 1362/     B1C :                     ; ; a4 - Collision data (68K AREA)
(1) 1363/     B1C :                     ; ;
(1) 1364/     B1C :                     ; ; Uses:
(1) 1365/     B1C :                     ; ; d0,d6-d7
(1) 1366/     B1C :                     ; ; --------------------------------------------------------
(1) 1367/     B1C :                     ;
(1) 1368/     B1C :                     ; MdMap_Set:
(1) 1369/     B1C :                     ; 		tst.w	d0
(1) 1370/     B1C :                     ; 		bpl.s	.md_side
(1) 1371/     B1C :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1372/     B1C :                     ; 		bset	#bitMarsBg,md_bg_flags(a6)
(1) 1373/     B1C :                     ; 		bra.s	.mars_side
(1) 1374/     B1C :                     ; .md_side:
(1) 1375/     B1C :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1376/     B1C :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1377/     B1C :                     ; 		adda	d0,a6
(1) 1378/     B1C :                     ; 		bclr	#bitMarsBg,md_bg_flags(a6)
(1) 1379/     B1C :                     ; .mars_side:
(1) 1380/     B1C :                     ; 		move.w	d1,md_bg_vpos(a6)
(1) 1381/     B1C :                     ; 		move.w	d2,md_bg_vram(a6)
(1) 1382/     B1C :                     ;
(1) 1383/     B1C :                     ; 		moveq	#0,d7
(1) 1384/     B1C :                     ; 		move.w	md_bg_x(a6),d7
(1) 1385/     B1C :                     ; 		move.b	d7,md_bg_xset(a6)
(1) 1386/     B1C :                     ; 		move.w	d7,md_bg_x_old(a6)
(1) 1387/     B1C :                     ; 		swap	d7
(1) 1388/     B1C :                     ; 		move.l	d7,md_bg_x(a6)
(1) 1389/     B1C :                     ; 		moveq	#0,d7
(1) 1390/     B1C :                     ; 		move.w	md_bg_y(a6),d7
(1) 1391/     B1C :                     ; 		move.b	d7,md_bg_yset(a6)
(1) 1392/     B1C :                     ; 		move.w	d7,md_bg_y_old(a6)
(1) 1393/     B1C :                     ; 		swap	d7
(1) 1394/     B1C :                     ; 		move.l	d7,md_bg_y(a6)
(1) 1395/     B1C :                     ; 		and.w	#$F,d3
(1) 1396/     B1C :                     ; 		and.w	#$F,d4
(1) 1397/     B1C :                     ;
(1) 1398/     B1C :                     ; 		swap	d3
(1) 1399/     B1C :                     ; 		swap	d4
(1) 1400/     B1C :                     ; 		move.l	a1,md_bg_blk(a6)
(1) 1401/     B1C :                     ; 		move.l	a2,md_bg_low(a6)
(1) 1402/     B1C :                     ; 		move.l	a3,md_bg_hi(a6)
(1) 1403/     B1C :                     ; 		move.l	a4,md_bg_col(a6)
(1) 1404/     B1C :                     ; 		move.l	a0,a5
(1) 1405/     B1C :                     ; 		move.w	(a5)+,d7	; Layout Width (blocks)
(1) 1406/     B1C :                     ; 		move.w	(a5)+,d6	; Layout Height (blocks)
(1) 1407/     B1C :                     ; 		move.b	(a5)+,d4	; BLOCK width
(1) 1408/     B1C :                     ; 		move.b	(a5)+,d3	; BLOCK height
(1) 1409/     B1C :                     ; 		and.w	#$FF,d4
(1) 1410/     B1C :                     ; 		and.w	#$FF,d3
(1) 1411/     B1C :                     ; 		move.w	d7,md_bg_w(a6)
(1) 1412/     B1C :                     ; 		move.w	d6,md_bg_h(a6)
(1) 1413/     B1C :                     ; 		move.b	d4,md_bg_bw(a6)
(1) 1414/     B1C :                     ; 		move.b	d3,md_bg_bh(a6)
(1) 1415/     B1C :                     ; 		mulu.w	d4,d7
(1) 1416/     B1C :                     ; 		mulu.w	d3,d6
(1) 1417/     B1C :                     ; 		move.w	d7,md_bg_wf(a6)
(1) 1418/     B1C :                     ; 		move.w	d6,md_bg_hf(a6)
(1) 1419/     B1C :                     ; 		sub.w	#1,d4
(1) 1420/     B1C :                     ; 		sub.w	#1,d3
(1) 1421/     B1C :                     ; 		and.b	d4,md_bg_xset(a6)
(1) 1422/     B1C :                     ; 		and.b	d3,md_bg_yset(a6)
(1) 1423/     B1C :                     ; 		swap	d3
(1) 1424/     B1C :                     ; 		swap	d4
(1) 1425/     B1C :                     ;
(1) 1426/     B1C :                     ; 	; TODO: improve this...
(1) 1427/     B1C :                     ; 		move.w	md_bg_x(a6),d3
(1) 1428/     B1C :                     ; 		move.w	md_bg_y(a6),d4
(1) 1429/     B1C :                     ; 	; X beams
(1) 1430/     B1C :                     ; .xl_l:		cmp.w	d7,d3
(1) 1431/     B1C :                     ; 		blt.s	.xl_g
(1) 1432/     B1C :                     ; 		sub.w	d7,d3
(1) 1433/     B1C :                     ; 		bra.s	.xl_l
(1) 1434/     B1C :                     ; .xl_g:
(1) 1435/     B1C :                     ; 		move.w	d3,md_bg_xinc_l(a6)
(1) 1436/     B1C :                     ; 		add.w	#320,d3				; <-- X resolution R
(1) 1437/     B1C :                     ; .xr_l:		cmp.w	d7,d3
(1) 1438/     B1C :                     ; 		blt.s	.xr_g
(1) 1439/     B1C :                     ; 		sub.w	d7,d3
(1) 1440/     B1C :                     ; 		bra.s	.xr_l
(1) 1441/     B1C :                     ; .xr_g:
(1) 1442/     B1C :                     ; 		move.w	d3,md_bg_xinc_r(a6)
(1) 1443/     B1C :                     ;
(1) 1444/     B1C :                     ; 	; Y beams
(1) 1445/     B1C :                     ; .yt_l:		cmp.w	d6,d4
(1) 1446/     B1C :                     ; 		blt.s	.yt_g
(1) 1447/     B1C :                     ; 		sub.w	d6,d4
(1) 1448/     B1C :                     ; 		bra.s	.yt_l
(1) 1449/     B1C :                     ; .yt_g:
(1) 1450/     B1C :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1451/     B1C :                     ; 		add.w	#224,d4				; <-- Y resolution B
(1) 1452/     B1C :                     ; .yb_l:		cmp.w	d6,d4
(1) 1453/     B1C :                     ; 		blt.s	.yb_g
(1) 1454/     B1C :                     ; 		sub.w	d6,d4
(1) 1455/     B1C :                     ; 		bra.s	.yb_l
(1) 1456/     B1C :                     ; .yb_g:
(1) 1457/     B1C :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1458/     B1C :                     ;
(1) 1459/     B1C :                     ; 		bset	#bitBgOn,md_bg_flags(a6)	; Enable this BG
(1) 1460/     B1C :                     ; 		rts
(1) 1461/     B1C :                     ;
(1) 1462/     B1C :                     ; ; --------------------------------------------------------
(1) 1463/     B1C :                     ; ; MdMap_Move
(1) 1464/     B1C :                     ; ;
(1) 1465/     B1C :                     ; ; Moves the current background/foreground
(1) 1466/     B1C :                     ; ; and checks for overflow.
(1) 1467/     B1C :                     ; ;
(1) 1468/     B1C :                     ; ; Input:
(1) 1469/     B1C :                     ; ; d0 | WORD - Background slot, if -1 32X's
(1) 1470/     B1C :                     ; ; d1 | WORD - Current X position
(1) 1471/     B1C :                     ; ; d2 | WORD - Current Y position
(1) 1472/     B1C :                     ; ; a0 - Background to move and check.
(1) 1473/     B1C :                     ; ;
(1) 1474/     B1C :                     ; ; Uses:
(1) 1475/     B1C :                     ; ; d6-d7
(1) 1476/     B1C :                     ; ; --------------------------------------------------------
(1) 1477/     B1C :                     ;
(1) 1478/     B1C :                     ; MdMap_Move:
(1) 1479/     B1C :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1480/     B1C :                     ; 		tst.w	d0
(1) 1481/     B1C :                     ; 		bmi.s	.mars_side
(1) 1482/     B1C :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1483/     B1C :                     ; 		mulu.w	#sizeof_mdbg,d0
(1) 1484/     B1C :                     ; 		adda	d0,a6
(1) 1485/     B1C :                     ; .mars_side:
(1) 1486/     B1C :                     ; ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1487/     B1C :                     ; ; 		beq	.not_enabld
(1) 1488/     B1C :                     ; 		move.w	md_bg_wf(a6),d0
(1) 1489/     B1C :                     ; 		tst.w	d1
(1) 1490/     B1C :                     ; 		bpl.s	.x_left
(1) 1491/     B1C :                     ; 		clr.w	d1
(1) 1492/     B1C :                     ; .x_left:
(1) 1493/     B1C :                     ; 		sub.w	#320,d0
(1) 1494/     B1C :                     ; 		cmp.w	d0,d1
(1) 1495/     B1C :                     ; 		bcs.s	.x_right
(1) 1496/     B1C :                     ; 		move.w	d0,d1
(1) 1497/     B1C :                     ; .x_right:
(1) 1498/     B1C :                     ; 		move.w	md_bg_hf(a6),d0
(1) 1499/     B1C :                     ; 		tst.w	d2
(1) 1500/     B1C :                     ; 		bpl.s	.y_left
(1) 1501/     B1C :                     ; 		clr.w	d2
(1) 1502/     B1C :                     ; .y_left:
(1) 1503/     B1C :                     ; 		sub.w	#224,d0
(1) 1504/     B1C :                     ; 		cmp.w	d0,d2
(1) 1505/     B1C :                     ; 		bcs.s	.y_right
(1) 1506/     B1C :                     ; 		move.w	d0,d2
(1) 1507/     B1C :                     ; .y_right:
(1) 1508/     B1C :                     ; 		move.w	d1,md_bg_x(a6)
(1) 1509/     B1C :                     ; 		move.w	d2,md_bg_y(a6)
(1) 1510/     B1C :                     ; .not_enabld:
(1) 1511/     B1C :                     ; 		rts
(1) 1512/     B1C :                     ;
(1) 1513/     B1C :                     ; ; --------------------------------------------------------
(1) 1514/     B1C :                     ; ; MdMap_Update
(1) 1515/     B1C :                     ; ;
(1) 1516/     B1C :                     ; ; Updates backgrounds internally, call this
(1) 1517/     B1C :                     ; ; BEFORE going into VBlank.
(1) 1518/     B1C :                     ; ;
(1) 1519/     B1C :                     ; ; Then later call MdMap_DrawScrl on VBlank,
(1) 1520/     B1C :                     ; ; this also applies for the 32X as this routine also
(1) 1521/     B1C :                     ; ; resets the drawing bits.
(1) 1522/     B1C :                     ; ;
(1) 1523/     B1C :                     ; ; For the 32X:
(1) 1524/     B1C :                     ; ; Call System_MarsUpdate AFTER this.
(1) 1525/     B1C :                     ; ; --------------------------------------------------------
(1) 1526/     B1C :                     ;
(1) 1527/     B1C :                     ; MdMap_Update:
(1) 1528/     B1C :                     ; 	if MARS|MARSCD
(1) 1529/     B1C :                     ; 		lea	(RAM_BgBufferM),a6
(1) 1530/     B1C :                     ; 		bsr.s	.this_bg
(1) 1531/     B1C :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1532/     B1C :                     ; 		bsr.s	.this_bg
(1) 1533/     B1C :                     ; 		adda	#sizeof_mdbg,a6
(1) 1534/     B1C :                     ; .this_bg:
(1) 1535/     B1C :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1536/     B1C :                     ; 		beq	.no_bg
(1) 1537/     B1C :                     ; 		moveq	#0,d1
(1) 1538/     B1C :                     ; 		moveq	#0,d2
(1) 1539/     B1C :                     ; 		move.w	md_bg_x(a6),d3
(1) 1540/     B1C :                     ; 		move.w	md_bg_x_old(a6),d0
(1) 1541/     B1C :                     ; 		cmp.w	d0,d3
(1) 1542/     B1C :                     ; 		beq.s	.xequ
(1) 1543/     B1C :                     ; 		move.w	d3,d1
(1) 1544/     B1C :                     ; 		sub.w	d0,d1
(1) 1545/     B1C :                     ; 		move.w	d3,md_bg_x_old(a6)
(1) 1546/     B1C :                     ; .xequ:
(1) 1547/     B1C :                     ; 		move.w	md_bg_y(a6),d3
(1) 1548/     B1C :                     ; 		move.w	md_bg_y_old(a6),d0
(1) 1549/     B1C :                     ; 		cmp.w	d0,d3
(1) 1550/     B1C :                     ; 		beq.s	.yequ
(1) 1551/     B1C :                     ; 		move.w	d3,d2
(1) 1552/     B1C :                     ; 		sub.w	d0,d2
(1) 1553/     B1C :                     ; 		move.w	d3,md_bg_y_old(a6)
(1) 1554/     B1C :                     ; .yequ:
(1) 1555/     B1C :                     ;
(1) 1556/     B1C :                     ; 	; Increment drawing beams
(1) 1557/     B1C :                     ; 		move.w	d1,d0
(1) 1558/     B1C :                     ; 		move.w	md_bg_wf(a6),d5
(1) 1559/     B1C :                     ; 		move.w	md_bg_xinc_l(a6),d4
(1) 1560/     B1C :                     ; 		bsr.s	.beam_incr
(1) 1561/     B1C :                     ; 		move.w	d4,md_bg_xinc_l(a6)
(1) 1562/     B1C :                     ; 		move.w	md_bg_xinc_r(a6),d4
(1) 1563/     B1C :                     ; 		bsr.s	.beam_incr
(1) 1564/     B1C :                     ; 		move.w	d4,md_bg_xinc_r(a6)
(1) 1565/     B1C :                     ; 		move.w	d2,d0
(1) 1566/     B1C :                     ; 		move.w	md_bg_hf(a6),d5
(1) 1567/     B1C :                     ; 		move.w	md_bg_yinc_u(a6),d4
(1) 1568/     B1C :                     ; 		bsr.s	.beam_incr
(1) 1569/     B1C :                     ; 		move.w	d4,md_bg_yinc_u(a6)
(1) 1570/     B1C :                     ; 		move.w	md_bg_yinc_d(a6),d4
(1) 1571/     B1C :                     ; 		bsr.s	.beam_incr
(1) 1572/     B1C :                     ; 		move.w	d4,md_bg_yinc_d(a6)
(1) 1573/     B1C :                     ;
(1) 1574/     B1C :                     ; 	; Update internal counters
(1) 1575/     B1C :                     ; 		moveq	#0,d3
(1) 1576/     B1C :                     ; 		move.b	md_bg_bw(a6),d3		; X set
(1) 1577/     B1C :                     ; 		move.b	md_bg_xset(a6),d0
(1) 1578/     B1C :                     ; 		add.b	d1,d0
(1) 1579/     B1C :                     ; 		move.b	d0,d4
(1) 1580/     B1C :                     ; 		and.w	d3,d4
(1) 1581/     B1C :                     ; 		beq.s	.x_k
(1) 1582/     B1C :                     ; 		moveq	#bitDrwR,d4
(1) 1583/     B1C :                     ; 		tst.w	d1
(1) 1584/     B1C :                     ; 		bpl.s	.x_r
(1) 1585/     B1C :                     ; 		moveq	#bitDrwL,d4
(1) 1586/     B1C :                     ; .x_r:
(1) 1587/     B1C :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1588/     B1C :                     ; .x_k:
(1) 1589/     B1C :                     ; 		sub.w	#1,d3
(1) 1590/     B1C :                     ; 		and.b	d3,d0
(1) 1591/     B1C :                     ; 		move.b	d0,md_bg_xset(a6)
(1) 1592/     B1C :                     ; 		move.b	md_bg_bh(a6),d3		; Y set
(1) 1593/     B1C :                     ; 		move.b	md_bg_yset(a6),d0
(1) 1594/     B1C :                     ; 		add.b	d2,d0
(1) 1595/     B1C :                     ; 		move.b	d0,d4
(1) 1596/     B1C :                     ; 		and.w	d3,d4
(1) 1597/     B1C :                     ; 		beq.s	.y_k
(1) 1598/     B1C :                     ; 		moveq	#bitDrwD,d4
(1) 1599/     B1C :                     ; 		tst.w	d2
(1) 1600/     B1C :                     ; 		bpl.s	.y_d
(1) 1601/     B1C :                     ; 		moveq	#bitDrwU,d4
(1) 1602/     B1C :                     ; .y_d:
(1) 1603/     B1C :                     ; 		bset	d4,md_bg_flags(a6)
(1) 1604/     B1C :                     ; .y_k:
(1) 1605/     B1C :                     ; 		sub.w	#1,d3
(1) 1606/     B1C :                     ; 		and.b	d3,d0
(1) 1607/     B1C :                     ; 		move.b	d0,md_bg_yset(a6)
(1) 1608/     B1C :                     ; .no_bg:
(1) 1609/     B1C :                     ; 		rts
(1) 1610/     B1C :                     ;
(1) 1611/     B1C :                     ; ; d0 - Increment by
(1) 1612/     B1C :                     ; ; d4 - X/Y beam
(1) 1613/     B1C :                     ; ; d5 - Max Width/Height
(1) 1614/     B1C :                     ; .beam_incr:
(1) 1615/     B1C :                     ; 		add.w	d0,d4
(1) 1616/     B1C :                     ; .xd_l:		tst.w	d4
(1) 1617/     B1C :                     ; 		bpl.s	.xd_g
(1) 1618/     B1C :                     ; 		add.w	d5,d4
(1) 1619/     B1C :                     ; 		bra.s	.xd_l
(1) 1620/     B1C :                     ; .xd_g:		cmp.w	d5,d4
(1) 1621/     B1C :                     ; 		blt.s	.val_h
(1) 1622/     B1C :                     ; 		sub.w	d5,d4
(1) 1623/     B1C :                     ; 		bra.s	.xd_g
(1) 1624/     B1C :                     ; .val_h:
(1) 1625/     B1C :                     ; 	endif
(1) 1626/     B1C :                     ; 		rts
(1) 1627/     B1C :                     ;
(1) 1628/     B1C :                     ; ; --------------------------------------------------------
(1) 1629/     B1C :                     ; ; MdMap_DrawAll
(1) 1630/     B1C :                     ; ;
(1) 1631/     B1C :                     ; ; Call this only if DISPLAY is OFF or in VBlank
(1) 1632/     B1C :                     ; ;
(1) 1633/     B1C :                     ; ; Notes:
(1) 1634/     B1C :                     ; ; - Does NOT check for off-bounds blocks
(1) 1635/     B1C :                     ; ; - Blocks with ID $00 are skipped.
(1) 1636/     B1C :                     ; ; --------------------------------------------------------
(1) 1637/     B1C :                     ;
(1) 1638/     B1C :                     ; MdMap_DrawAll:
(1) 1639/     B1C :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1640/     B1C :                     ; 		bsr	.this_bg
(1) 1641/     B1C :                     ; 		adda	#sizeof_mdbg,a6
(1) 1642/     B1C :                     ; .this_bg:
(1) 1643/     B1C :                     ; 		btst	#bitBgOn,md_bg_flags(a6)
(1) 1644/     B1C :                     ; 		beq	.no_bg
(1) 1645/     B1C :                     ; 		move.l	md_bg_blk(a6),a5
(1) 1646/     B1C :                     ; 		move.l	md_bg_low(a6),a4
(1) 1647/     B1C :                     ; 		move.l	md_bg_hi(a6),a3
(1) 1648/     B1C :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1649/     B1C :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1650/     B1C :                     ; 		move.b	md_bg_bw(a6),d2
(1) 1651/     B1C :                     ; 		move.b	md_bg_bh(a6),d3
(1) 1652/     B1C :                     ; 		move.w	md_bg_w(a6),d4
(1) 1653/     B1C :                     ; ; 		move.w	md_bg_wf(a6),d5
(1) 1654/     B1C :                     ; ; 		move.w	md_bg_hf(a6),d6
(1) 1655/     B1C :                     ;
(1) 1656/     B1C :                     ; 		moveq	#0,d6
(1) 1657/     B1C :                     ; 		move.w	d0,d6
(1) 1658/     B1C :                     ; 		and.w	#-$10,d6
(1) 1659/     B1C :                     ; 		lsr.w	#2,d6
(1) 1660/     B1C :                     ; 		and.w	#$7F,d6
(1) 1661/     B1C :                     ;
(1) 1662/     B1C :                     ; 		moveq	#0,d5
(1) 1663/     B1C :                     ; 		move.w	d1,d5
(1) 1664/     B1C :                     ; 		and.w	#-$10,d5
(1) 1665/     B1C :                     ; 		lsl.w	#4,d5
(1) 1666/     B1C :                     ; 		and.w	#$F00,d5
(1) 1667/     B1C :                     ;
(1) 1668/     B1C :                     ; 		add.w	d5,d6
(1) 1669/     B1C :                     ; 		add.w	md_bg_vpos(a6),d6
(1) 1670/     B1C :                     ; 		move.w	d6,d5
(1) 1671/     B1C :                     ; 		rol.w	#2,d6
(1) 1672/     B1C :                     ; 		and.w	#%11,d6
(1) 1673/     B1C :                     ; 		swap	d6
(1) 1674/     B1C :                     ; 		and.w	#$3FFF,d5
(1) 1675/     B1C :                     ; 		move.w	d5,d6			; d6 - VDP 2nd|1st writes
(1) 1676/     B1C :                     ;
(1) 1677/     B1C :                     ; 		and.w	#$FF,d2
(1) 1678/     B1C :                     ; 		muls.w	d2,d0
(1) 1679/     B1C :                     ; 		lsr.w	#8,d0
(1) 1680/     B1C :                     ; 		and.w	#$FF,d3
(1) 1681/     B1C :                     ; 		muls.w	d3,d1
(1) 1682/     B1C :                     ; 		lsr.w	#8,d1
(1) 1683/     B1C :                     ; 		muls.w	d4,d1
(1) 1684/     B1C :                     ; 		add.l	d1,d0
(1) 1685/     B1C :                     ; 		add.l	d0,a4
(1) 1686/     B1C :                     ; 		add.l	d0,a3
(1) 1687/     B1C :                     ; 		move.w	#$80,d1
(1) 1688/     B1C :                     ; 		move.w	d1,d3
(1) 1689/     B1C :                     ; 		swap	d1
(1) 1690/     B1C :                     ; 		sub.w	#1,d3
(1) 1691/     B1C :                     ; 		moveq	#0,d2
(1) 1692/     B1C :                     ; 		move.w	md_bg_vram(a6),d2	; d2 - VRAM cell pos
(1) 1693/     B1C :                     ; 		swap	d3
(1) 1694/     B1C :                     ; 		move.w	#4,d3			; d3 - X wrap | X next block
(1) 1695/     B1C :                     ; 		move.w	#$0FFF,d4		; d4 - Y wrap | Y next block + bits
(1) 1696/     B1C :                     ; 		swap	d4
(1) 1697/     B1C :                     ; 		move.w	#$100,d4
(1) 1698/     B1C :                     ; 		move.w	d5,d0
(1) 1699/     B1C :                     ; 		moveq	#0,d5			; d5 - temporal | X-add read
(1) 1700/     B1C :                     ; 		move.w	#(512/16)-1,d7		; d7 - X cells | Y cells
(1) 1701/     B1C :                     ; 		swap	d7
(1) 1702/     B1C :                     ; 		move.w	#(256/16)-1,d7
(1) 1703/     B1C :                     ;
(1) 1704/     B1C :                     ; 	; a6 - Current BG buffer
(1) 1705/     B1C :                     ; 	; a5 - Block-data base
(1) 1706/     B1C :                     ; 	; a4 - LOW layout data Y
(1) 1707/     B1C :                     ; 	; a3 - HI layout data Y
(1) 1708/     B1C :                     ; 	; a2 - a4 current
(1) 1709/     B1C :                     ; 	; a1 - a3 current
(1) 1710/     B1C :                     ; 	; a0 - Block-data read
(1) 1711/     B1C :                     ;
(1) 1712/     B1C :                     ; 	; d7 - X loop        | Y loop
(1) 1713/     B1C :                     ; 	; d6 - VDP 2nd Write | X/Y VDP pos + addr bits
(1) 1714/     B1C :                     ; 	; d5 - X loop-save   | X VDP current
(1) 1715/     B1C :                     ; 	; d4 - Y wrap        | Y next block pos
(1) 1716/     B1C :                     ; 	; d3 - X wrap        | X next block pos
(1) 1717/     B1C :                     ; 	; d2 - Y block size  | VRAM-cell base
(1) 1718/     B1C :                     ; 	; d1 - Y-next line   | VRAM-cell read + prio
(1) 1719/     B1C :                     ; 	; d0 -    ---        | ---
(1) 1720/     B1C :                     ;
(1) 1721/     B1C :                     ; .y_loop:
(1) 1722/     B1C :                     ; 		swap	d7
(1) 1723/     B1C :                     ; 		move.l	a4,a2		; a2 - LOW line
(1) 1724/     B1C :                     ; 		move.l	a3,a1		; a1 - HI line
(1) 1725/     B1C :                     ; 		move.w	d7,d5
(1) 1726/     B1C :                     ; .x_loop:
(1) 1727/     B1C :                     ; 		swap	d5
(1) 1728/     B1C :                     ; 		move.w	d2,d1
(1) 1729/     B1C :                     ; 		move.b	(a2),d0		; HI block?
(1) 1730/     B1C :                     ; 		bne.s	.got_blk
(1) 1731/     B1C :                     ; 		add.w	#$8000,d1
(1) 1732/     B1C :                     ; 		move.b	(a1),d0
(1) 1733/     B1C :                     ; 		beq.s	.blank
(1) 1734/     B1C :                     ; .got_blk:
(1) 1735/     B1C :                     ; 		bsr	.mk_block
(1) 1736/     B1C :                     ; .blank:
(1) 1737/     B1C :                     ; 		move.l	d3,d0
(1) 1738/     B1C :                     ; 		swap	d0
(1) 1739/     B1C :                     ; 		add.w	d3,d5		; next VDP X pos
(1) 1740/     B1C :                     ; 		and.w	d0,d5
(1) 1741/     B1C :                     ; 		adda	#1,a2
(1) 1742/     B1C :                     ; 		adda	#1,a1
(1) 1743/     B1C :                     ; 		swap	d5
(1) 1744/     B1C :                     ; 		dbf	d5,.x_loop
(1) 1745/     B1C :                     ;
(1) 1746/     B1C :                     ; 		move.w	d6,d0
(1) 1747/     B1C :                     ; 		and.w	#$3000,d0
(1) 1748/     B1C :                     ; 		add.w	d4,d6		; <-- next VDP Y block
(1) 1749/     B1C :                     ; 		swap	d4
(1) 1750/     B1C :                     ; 		and.w	d4,d6
(1) 1751/     B1C :                     ; 		or.w	d0,d6
(1) 1752/     B1C :                     ; 		swap	d4
(1) 1753/     B1C :                     ;
(1) 1754/     B1C :                     ; 		move.w	md_bg_w(a6),d0 ; ***
(1) 1755/     B1C :                     ; 		adda	d0,a4
(1) 1756/     B1C :                     ; 		adda	d0,a3
(1) 1757/     B1C :                     ; 		swap	d7
(1) 1758/     B1C :                     ; 		dbf	d7,.y_loop
(1) 1759/     B1C :                     ; .no_bg:
(1) 1760/     B1C :                     ; 		rts
(1) 1761/     B1C :                     ;
(1) 1762/     B1C :                     ; ; barely got free regs without using stack
(1) 1763/     B1C :                     ; .mk_block:
(1) 1764/     B1C :                     ; 		swap	d2
(1) 1765/     B1C :                     ; 		move.l	a5,a0
(1) 1766/     B1C :                     ; 		and.w	#$FF,d0
(1) 1767/     B1C :                     ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1768/     B1C :                     ; 		adda	d0,a0		; a0 - cell word data
(1) 1769/     B1C :                     ; 		move.w	d6,d0
(1) 1770/     B1C :                     ; 		add.w	d5,d0
(1) 1771/     B1C :                     ; 		or.w	#$4000,d0
(1) 1772/     B1C :                     ; 		swap	d6
(1) 1773/     B1C :                     ;
(1) 1774/     B1C :                     ; 	; d0 - topleft VDP write | $4000
(1) 1775/     B1C :                     ; 	; d6 - right VDP write
(1) 1776/     B1C :                     ; 	; d2 is free
(1) 1777/     B1C :                     ; 	;
(1) 1778/     B1C :                     ; 	; currently working: 16x16
(1) 1779/     B1C :                     ; 		bsr.s	.drwy_16	; 1-
(1) 1780/     B1C :                     ; 		add.w	#2,d0		; 2-
(1) 1781/     B1C :                     ; 		bsr.s	.drwy_16	; -3
(1) 1782/     B1C :                     ; 					; -4
(1) 1783/     B1C :                     ; 		swap	d6
(1) 1784/     B1C :                     ; 		swap	d2
(1) 1785/     B1C :                     ; 		rts
(1) 1786/     B1C :                     ;
(1) 1787/     B1C :                     ; ; d0 - left vdp
(1) 1788/     B1C :                     ; ; d6 - right vdp
(1) 1789/     B1C :                     ; .drwy_16:
(1) 1790/     B1C :                     ; 		move.w	d0,d2
(1) 1791/     B1C :                     ; 		swap	d0
(1) 1792/     B1C :                     ; 		move.w	(a0)+,d0
(1) 1793/     B1C :                     ; 		add.w	d1,d0
(1) 1794/     B1C :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1795/     B1C :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1796/     B1C :                     ; 		move.w	d0,(vdp_data).l
(1) 1797/     B1C :                     ; 		swap	d1
(1) 1798/     B1C :                     ; 		add.w	d1,d2		; Next line
(1) 1799/     B1C :                     ; 		swap	d1
(1) 1800/     B1C :                     ; 		move.w	(a0)+,d0
(1) 1801/     B1C :                     ; 		add.w	d1,d0
(1) 1802/     B1C :                     ; 		move.w	d2,(vdp_ctrl).l
(1) 1803/     B1C :                     ; 		move.w	d6,(vdp_ctrl).l
(1) 1804/     B1C :                     ; 		move.w	d0,(vdp_data).l
(1) 1805/     B1C :                     ; 		swap	d0
(1) 1806/     B1C :                     ; 		rts
(1) 1807/     B1C :                     ;
(1) 1808/     B1C :                     ; 	; Block: 16x16 as 13
(1) 1809/     B1C :                     ; 	;                 24
(1) 1810/     B1C :                     ; 	; d0 - block ID
(1) 1811/     B1C :                     ; 	; d1 - VRAM-add base
(1) 1812/     B1C :                     ; 	; d6 - VDP out R | VDP out L
(1) 1813/     B1C :                     ; ; 		and.w	#$FF,d0
(1) 1814/     B1C :                     ; ; 		lsl.w	#3,d0		; * 8 bytes
(1) 1815/     B1C :                     ; ; 		move.l	(a5,d0.w),d2
(1) 1816/     B1C :                     ; ; 		add.l	d1,d2
(1) 1817/     B1C :                     ; ; 		swap	d2
(1) 1818/     B1C :                     ; ; 		move.l	4(a5,d0.w),d3
(1) 1819/     B1C :                     ; ; 		add.l	d1,d3
(1) 1820/     B1C :                     ; ; 		swap	d3
(1) 1821/     B1C :                     ; ; 		move.w	d6,d0
(1) 1822/     B1C :                     ; ; 		swap	d5
(1) 1823/     B1C :                     ; ; 		add.w	d5,d0
(1) 1824/     B1C :                     ; ; 		or.w	#$4000,d0
(1) 1825/     B1C :                     ; ; 		swap	d5
(1) 1826/     B1C :                     ; ; 		move.l	a0,d1
(1) 1827/     B1C :                     ; ; 		and.w	d1,d5
(1) 1828/     B1C :                     ; ; 		add.w	d5,d0
(1) 1829/     B1C :                     ; ; 		swap	d6
(1) 1830/     B1C :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1831/     B1C :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1832/     B1C :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1833/     B1C :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1834/     B1C :                     ; ; 		swap	d2
(1) 1835/     B1C :                     ; ; 		swap	d3
(1) 1836/     B1C :                     ; ; 		add.w	#$80,d0		; line add
(1) 1837/     B1C :                     ; ; 		move.w	d0,(vdp_ctrl).l
(1) 1838/     B1C :                     ; ; 		move.w	d6,(vdp_ctrl).l
(1) 1839/     B1C :                     ; ; 		move.w	d2,(vdp_data).l
(1) 1840/     B1C :                     ; ; 		move.w	d3,(vdp_data).l
(1) 1841/     B1C :                     ; ; 		swap	d6
(1) 1842/     B1C :                     ; ; 		rts
(1) 1843/     B1C :                     ;
(1) 1844/     B1C :                     ; ; --------------------------------------------------------
(1) 1845/     B1C :                     ; ; MdMap_DrawScrlMd
(1) 1846/     B1C :                     ; ;
(1) 1847/     B1C :                     ; ; Draws map off-screen changes, only on Genesis-side.
(1) 1848/     B1C :                     ; ;
(1) 1849/     B1C :                     ; ; CALL THIS ON VBLANK ONLY, MUST BE QUICK.
(1) 1850/     B1C :                     ; ; --------------------------------------------------------
(1) 1851/     B1C :                     ;
(1) 1852/     B1C :                     ; MdMap_DrawScrlMd:
(1) 1853/     B1C :                     ; 		lea	(RAM_BgBuffer),a6
(1) 1854/     B1C :                     ; 		lea	(vdp_data),a5
(1) 1855/     B1C :                     ; 		bsr.s	.this_bg
(1) 1856/     B1C :                     ; 		adda	#sizeof_mdbg,a6
(1) 1857/     B1C :                     ; 	; SH2-side handles the
(1) 1858/     B1C :                     ; 	; RAM_BgBufferM's drawing
(1) 1859/     B1C :                     ;
(1) 1860/     B1C :                     ; .this_bg:
(1) 1861/     B1C :                     ; 		move.b	md_bg_flags(a6),d7
(1) 1862/     B1C :                     ; 		btst	#bitBgOn,d7
(1) 1863/     B1C :                     ; 		beq	.no_bg
(1) 1864/     B1C :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1865/     B1C :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1866/     B1C :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1867/     B1C :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1868/     B1C :                     ; 		bclr	#bitDrwU,d7
(1) 1869/     B1C :                     ; 		beq.s	.no_u
(1) 1870/     B1C :                     ; 		bsr	.mk_row
(1) 1871/     B1C :                     ; .no_u:
(1) 1872/     B1C :                     ; 		bclr	#bitDrwD,d7
(1) 1873/     B1C :                     ; 		beq.s	.no_d
(1) 1874/     B1C :                     ; 		move.w	md_bg_yinc_d(a6),d3
(1) 1875/     B1C :                     ; 		add.w	#224,d1			; X add
(1) 1876/     B1C :                     ; 		bsr	.mk_row
(1) 1877/     B1C :                     ; .no_d:
(1) 1878/     B1C :                     ; 		move.w	md_bg_x(a6),d0		; X start
(1) 1879/     B1C :                     ; 		move.w	md_bg_y(a6),d1		; Y start
(1) 1880/     B1C :                     ; 		move.w	md_bg_xinc_l(a6),d2
(1) 1881/     B1C :                     ; 		move.w	md_bg_yinc_u(a6),d3
(1) 1882/     B1C :                     ; 		bclr	#bitDrwL,d7
(1) 1883/     B1C :                     ; 		beq.s	.no_l
(1) 1884/     B1C :                     ; 		bsr.s	.mk_clmn
(1) 1885/     B1C :                     ; .no_l:
(1) 1886/     B1C :                     ; 		bclr	#bitDrwR,d7
(1) 1887/     B1C :                     ; 		beq.s	.no_r
(1) 1888/     B1C :                     ; 		move.w	md_bg_xinc_r(a6),d2
(1) 1889/     B1C :                     ; 		add.w	#320,d0			; X add
(1) 1890/     B1C :                     ; 		bsr.s	.mk_clmn
(1) 1891/     B1C :                     ; .no_r:
(1) 1892/     B1C :                     ;
(1) 1893/     B1C :                     ; 		move.b	d7,md_bg_flags(a6)
(1) 1894/     B1C :                     ; .no_bg:
(1) 1895/     B1C :                     ; 		rts
(1) 1896/     B1C :                     ;
(1) 1897/     B1C :                     ; ; ------------------------------------------------
(1) 1898/     B1C :                     ; ; Make column
(1) 1899/     B1C :                     ; ; d0 - X
(1) 1900/     B1C :                     ; ; d1 - Y
(1) 1901/     B1C :                     ; ; d2 - X increment
(1) 1902/     B1C :                     ; ; d3 - Y increment
(1) 1903/     B1C :                     ; ; ------------------------------------------------
(1) 1904/     B1C :                     ;
(1) 1905/     B1C :                     ; .mk_clmn:
(1) 1906/     B1C :                     ; ; 		btst	#bitMarsBg,d7
(1) 1907/     B1C :                     ; ; 		bne	.mars_ret_c
(1) 1908/     B1C :                     ; 		swap	d7
(1) 1909/     B1C :                     ; 		bsr	.get_coords
(1) 1910/     B1C :                     ; 		swap	d0
(1) 1911/     B1C :                     ; 		move.w	d4,d0
(1) 1912/     B1C :                     ; 		swap	d0
(1) 1913/     B1C :                     ; 		move.w	#$FFF,d3
(1) 1914/     B1C :                     ; 		swap	d3
(1) 1915/     B1C :                     ; 		move.w	#$100,d3
(1) 1916/     B1C :                     ;
(1) 1917/     B1C :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 1918/     B1C :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 1919/     B1C :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 1920/     B1C :                     ; 	; d3 -    Y wrap | Y add
(1) 1921/     B1C :                     ; 	; d4 -         *****
(1) 1922/     B1C :                     ; 	; d5 -         *****
(1) 1923/     B1C :                     ; 	; d6 -         *****
(1) 1924/     B1C :                     ; 	; d7 - lastflags | loop blocks
(1) 1925/     B1C :                     ;
(1) 1926/     B1C :                     ; 		move.w	#(256/16)-1,d7
(1) 1927/     B1C :                     ; .y_blk:
(1) 1928/     B1C :                     ; 		moveq	#0,d4
(1) 1929/     B1C :                     ; 		moveq	#0,d5
(1) 1930/     B1C :                     ; 		move.b	(a3),d6
(1) 1931/     B1C :                     ; 		bne.s	.vld
(1) 1932/     B1C :                     ; 		move.b	(a2),d6
(1) 1933/     B1C :                     ; 		bne.s	.prio
(1) 1934/     B1C :                     ; .blnk:
(1) 1935/     B1C :                     ; 		moveq	#0,d4
(1) 1936/     B1C :                     ; 		moveq	#0,d5
(1) 1937/     B1C :                     ; 		bra.s	.frce
(1) 1938/     B1C :                     ; .prio:
(1) 1939/     B1C :                     ; 		move.l	#$80008000,d4
(1) 1940/     B1C :                     ; 		move.l	#$80008000,d5
(1) 1941/     B1C :                     ; .vld:
(1) 1942/     B1C :                     ; 		move.l	a4,a0
(1) 1943/     B1C :                     ; 		and.w	#$FF,d6
(1) 1944/     B1C :                     ; 		lsl.w	#3,d6
(1) 1945/     B1C :                     ; 		adda	d6,a0
(1) 1946/     B1C :                     ; 		swap	d2
(1) 1947/     B1C :                     ; 		add.w	(a0)+,d4
(1) 1948/     B1C :                     ; 		add.w	(a0)+,d5
(1) 1949/     B1C :                     ; 		add.w	d2,d4
(1) 1950/     B1C :                     ; 		add.w	d2,d5
(1) 1951/     B1C :                     ; 		swap	d4
(1) 1952/     B1C :                     ; 		swap	d5
(1) 1953/     B1C :                     ; 		add.w	(a0)+,d4
(1) 1954/     B1C :                     ; 		add.w	(a0)+,d5
(1) 1955/     B1C :                     ; 		add.w	d2,d4
(1) 1956/     B1C :                     ; 		add.w	d2,d5
(1) 1957/     B1C :                     ; 		swap	d2
(1) 1958/     B1C :                     ; .frce:
(1) 1959/     B1C :                     ; 		move.w	d0,d6
(1) 1960/     B1C :                     ; 		add.w	d1,d6
(1) 1961/     B1C :                     ; 		or.w	#$4000,d6
(1) 1962/     B1C :                     ; 		move.w	d6,4(a5)
(1) 1963/     B1C :                     ; 		move.w	d2,4(a5)
(1) 1964/     B1C :                     ; 		move.l	d4,(a5)
(1) 1965/     B1C :                     ; 		add.w	#$80,d6
(1) 1966/     B1C :                     ; 		move.w	d6,4(a5)
(1) 1967/     B1C :                     ; 		move.w	d2,4(a5)
(1) 1968/     B1C :                     ; 		move.l	d5,(a5)
(1) 1969/     B1C :                     ; 		move.l	d3,d4		; Next Y block
(1) 1970/     B1C :                     ; 		swap	d4
(1) 1971/     B1C :                     ; 		add.w	d3,d0
(1) 1972/     B1C :                     ; 		and.w	d4,d0
(1) 1973/     B1C :                     ; 		move.w	md_bg_w(a6),d6
(1) 1974/     B1C :                     ; 		adda	d6,a3
(1) 1975/     B1C :                     ; 		adda	d6,a2
(1) 1976/     B1C :                     ; 		swap	d1		; <-- TODO: improve this later.
(1) 1977/     B1C :                     ; 		add.w	#$10,d1
(1) 1978/     B1C :                     ; 		cmp.w	md_bg_hf(a6),d1
(1) 1979/     B1C :                     ; 		blt.s	.y_low
(1) 1980/     B1C :                     ; 		swap	d0
(1) 1981/     B1C :                     ; 		clr.w	d1
(1) 1982/     B1C :                     ; 		move.l	md_bg_low(a6),a3
(1) 1983/     B1C :                     ; 		move.l	md_bg_hi(a6),a2
(1) 1984/     B1C :                     ; 		adda	d0,a2
(1) 1985/     B1C :                     ; 		adda	d0,a3
(1) 1986/     B1C :                     ; 		swap	d0
(1) 1987/     B1C :                     ; .y_low:
(1) 1988/     B1C :                     ; 		swap	d1
(1) 1989/     B1C :                     ;
(1) 1990/     B1C :                     ; 		dbf	d7,.y_blk
(1) 1991/     B1C :                     ; 		swap	d7
(1) 1992/     B1C :                     ; .mars_ret_c:
(1) 1993/     B1C :                     ; 		rts
(1) 1994/     B1C :                     ;
(1) 1995/     B1C :                     ; ; ------------------------------------------------
(1) 1996/     B1C :                     ; ; Make row
(1) 1997/     B1C :                     ; ; d0 - X
(1) 1998/     B1C :                     ; ; d1 - Y
(1) 1999/     B1C :                     ; ; d2 - X increment
(1) 2000/     B1C :                     ; ; d3 - Y increment
(1) 2001/     B1C :                     ; ; ------------------------------------------------
(1) 2002/     B1C :                     ;
(1) 2003/     B1C :                     ; .mk_row:
(1) 2004/     B1C :                     ; ; 		btst	#bitMarsBg,d7
(1) 2005/     B1C :                     ; ; 		bne.s	.mars_ret_c
(1) 2006/     B1C :                     ; 		swap	d7
(1) 2007/     B1C :                     ; 		bsr	.get_coords
(1) 2008/     B1C :                     ; 		swap	d1
(1) 2009/     B1C :                     ; 		move.w	d5,d1
(1) 2010/     B1C :                     ; 		swap	d1
(1) 2011/     B1C :                     ; 		move.w	#$7F,d3
(1) 2012/     B1C :                     ; 		swap	d3
(1) 2013/     B1C :                     ; 		move.w	#4,d3
(1) 2014/     B1C :                     ;
(1) 2015/     B1C :                     ; 	; d0 -    X curr | Current cell X/Y (1st)
(1) 2016/     B1C :                     ; 	; d1 -    Y curr | VDP 1st write
(1) 2017/     B1C :                     ; 	; d2 - Cell VRAM | VDP 2nd write
(1) 2018/     B1C :                     ; 	; d3 -    X wrap | X add
(1) 2019/     B1C :                     ; 	; d4 -         *****
(1) 2020/     B1C :                     ; 	; d5 -         *****
(1) 2021/     B1C :                     ; 	; d6 - loopflags | *****
(1) 2022/     B1C :                     ; 	; d7 - lastflags | loop blocks
(1) 2023/     B1C :                     ;
(1) 2024/     B1C :                     ; 		move.w	d0,d6
(1) 2025/     B1C :                     ; 		and.w	#-$100,d6	; Merge d1
(1) 2026/     B1C :                     ; 		add.w	d6,d1
(1) 2027/     B1C :                     ; 		move.l	d3,d5
(1) 2028/     B1C :                     ; 		swap	d5
(1) 2029/     B1C :                     ; 		and.w	d5,d0
(1) 2030/     B1C :                     ; 		move.w	#((320+16)/16)-1,d7
(1) 2031/     B1C :                     ; .x_blk:
(1) 2032/     B1C :                     ; 		moveq	#0,d4
(1) 2033/     B1C :                     ; 		moveq	#0,d5
(1) 2034/     B1C :                     ; 		move.b	(a3),d6
(1) 2035/     B1C :                     ; 		bne.s	.xvld
(1) 2036/     B1C :                     ; 		move.b	(a2),d6
(1) 2037/     B1C :                     ; 		bne.s	.xprio
(1) 2038/     B1C :                     ; .xblnk:
(1) 2039/     B1C :                     ; 		moveq	#0,d4
(1) 2040/     B1C :                     ; 		moveq	#0,d5
(1) 2041/     B1C :                     ; 		bra.s	.xfrce
(1) 2042/     B1C :                     ; .xprio:
(1) 2043/     B1C :                     ; 		move.l	#$80008000,d4
(1) 2044/     B1C :                     ; 		move.l	#$80008000,d5
(1) 2045/     B1C :                     ; .xvld:
(1) 2046/     B1C :                     ; 		move.l	a4,a0
(1) 2047/     B1C :                     ; 		and.w	#$FF,d6
(1) 2048/     B1C :                     ; 		lsl.w	#3,d6
(1) 2049/     B1C :                     ; 		adda	d6,a0
(1) 2050/     B1C :                     ; 		swap	d2
(1) 2051/     B1C :                     ; 		add.w	(a0)+,d4
(1) 2052/     B1C :                     ; 		add.w	(a0)+,d5
(1) 2053/     B1C :                     ; 		add.w	d2,d4
(1) 2054/     B1C :                     ; 		add.w	d2,d5
(1) 2055/     B1C :                     ; 		swap	d4
(1) 2056/     B1C :                     ; 		swap	d5
(1) 2057/     B1C :                     ; 		add.w	(a0)+,d4
(1) 2058/     B1C :                     ; 		add.w	(a0)+,d5
(1) 2059/     B1C :                     ; 		add.w	d2,d4
(1) 2060/     B1C :                     ; 		add.w	d2,d5
(1) 2061/     B1C :                     ; 		swap	d2
(1) 2062/     B1C :                     ; .xfrce:
(1) 2063/     B1C :                     ; 		move.w	d0,d6
(1) 2064/     B1C :                     ; 		add.w	d1,d6
(1) 2065/     B1C :                     ; 		or.w	#$4000,d6
(1) 2066/     B1C :                     ; 		move.w	d6,4(a5)
(1) 2067/     B1C :                     ; 		move.w	d2,4(a5)
(1) 2068/     B1C :                     ; 		move.l	d4,(a5)
(1) 2069/     B1C :                     ; 		add.w	#$80,d6
(1) 2070/     B1C :                     ; 		move.w	d6,4(a5)
(1) 2071/     B1C :                     ; 		move.w	d2,4(a5)
(1) 2072/     B1C :                     ; 		move.l	d5,(a5)
(1) 2073/     B1C :                     ; 		add.w	d3,d0
(1) 2074/     B1C :                     ; 		swap	d3
(1) 2075/     B1C :                     ; 		and.w	d3,d0
(1) 2076/     B1C :                     ; 		swap	d3
(1) 2077/     B1C :                     ;
(1) 2078/     B1C :                     ; 	; X wrap
(1) 2079/     B1C :                     ; 		swap	d0
(1) 2080/     B1C :                     ; 		add.w	#$10,d0
(1) 2081/     B1C :                     ; 		cmp.w	md_bg_wf(a6),d0
(1) 2082/     B1C :                     ; 		blt.s	.x_low
(1) 2083/     B1C :                     ; 		sub.w	md_bg_wf(a6),d0
(1) 2084/     B1C :                     ; 		moveq	#0,d4
(1) 2085/     B1C :                     ; 		move.w	md_bg_w(a6),d4
(1) 2086/     B1C :                     ; 		sub.l	d4,a2
(1) 2087/     B1C :                     ; 		sub.l	d4,a3
(1) 2088/     B1C :                     ; .x_low:
(1) 2089/     B1C :                     ; 		adda	#1,a3
(1) 2090/     B1C :                     ; 		adda	#1,a2
(1) 2091/     B1C :                     ; .x_new:
(1) 2092/     B1C :                     ; 		swap	d0
(1) 2093/     B1C :                     ;
(1) 2094/     B1C :                     ; 		dbf	d7,.x_blk
(1) 2095/     B1C :                     ; 		swap	d7
(1) 2096/     B1C :                     ; 		rts
(1) 2097/     B1C :                     ;
(1) 2098/     B1C :                     ; ; ------------------------------------------------
(1) 2099/     B1C :                     ; ; Input
(1) 2100/     B1C :                     ; ; d0 - X position
(1) 2101/     B1C :                     ; ; d1 - Y position
(1) 2102/     B1C :                     ; ; d2 - X increment beam
(1) 2103/     B1C :                     ; ; d3 - Y increment beam
(1) 2104/     B1C :                     ; ;
(1) 2105/     B1C :                     ; ; Out:
(1) 2106/     B1C :                     ; ; d4 - X LEFT increment
(1) 2107/     B1C :                     ; ; d5 - Y TOP increment
(1) 2108/     B1C :                     ;
(1) 2109/     B1C :                     ; .get_coords:
(1) 2110/     B1C :                     ; 		move.l	md_bg_blk(a6),a4
(1) 2111/     B1C :                     ; 		move.l	md_bg_low(a6),a3
(1) 2112/     B1C :                     ; 		move.l	md_bg_hi(a6),a2
(1) 2113/     B1C :                     ; 		and.w	#-$10,d0		; block X/Y limit
(1) 2114/     B1C :                     ; 		and.w	#-$10,d1
(1) 2115/     B1C :                     ; 		and.w	#-$10,d2
(1) 2116/     B1C :                     ; 		and.w	#-$10,d3
(1) 2117/     B1C :                     ; 		swap	d0
(1) 2118/     B1C :                     ; 		swap	d1
(1) 2119/     B1C :                     ; 		move.w	d2,d0
(1) 2120/     B1C :                     ; 		move.w	d3,d1
(1) 2121/     B1C :                     ; 		swap	d0
(1) 2122/     B1C :                     ; 		swap	d1
(1) 2123/     B1C :                     ;
(1) 2124/     B1C :                     ; 		moveq	#0,d4
(1) 2125/     B1C :                     ; 		moveq	#0,d5
(1) 2126/     B1C :                     ; 		move.b	md_bg_bw(a6),d6
(1) 2127/     B1C :                     ; 		move.b	md_bg_bh(a6),d7
(1) 2128/     B1C :                     ; 		and.w	#$FF,d6
(1) 2129/     B1C :                     ; 		and.w	#$FF,d7
(1) 2130/     B1C :                     ;
(1) 2131/     B1C :                     ; 		move.w	d2,d4
(1) 2132/     B1C :                     ; 		muls.w	d6,d4
(1) 2133/     B1C :                     ; 		asr.w	#8,d4
(1) 2134/     B1C :                     ; 		move.w	d3,d5
(1) 2135/     B1C :                     ; 		muls.w	d7,d5
(1) 2136/     B1C :                     ; 		asr.w	#8,d5
(1) 2137/     B1C :                     ; 		muls.w	md_bg_w(a6),d5
(1) 2138/     B1C :                     ; 		moveq	#0,d3
(1) 2139/     B1C :                     ; 		move.l	d4,d3
(1) 2140/     B1C :                     ; 		add.l	d5,d3
(1) 2141/     B1C :                     ; 		add.l	d3,a3
(1) 2142/     B1C :                     ; 		add.l	d3,a2
(1) 2143/     B1C :                     ;
(1) 2144/     B1C :                     ; 		move.w	md_bg_vram(a6),d2
(1) 2145/     B1C :                     ; 		swap	d2
(1) 2146/     B1C :                     ; 		lsr.w	#2,d1			; Y >> 2
(1) 2147/     B1C :                     ; 		lsl.w	#6,d1			; Y * $40
(1) 2148/     B1C :                     ; 		lsr.w	#2,d0			; X >> 2
(1) 2149/     B1C :                     ; 		and.w	#$FFF,d1
(1) 2150/     B1C :                     ; 		and.w	#$7C,d0
(1) 2151/     B1C :                     ; 		add.w	d1,d0
(1) 2152/     B1C :                     ; 		move.w	md_bg_vpos(a6),d1
(1) 2153/     B1C :                     ; 		move.w	d1,d2
(1) 2154/     B1C :                     ; 		and.w	#$3FFF,d1
(1) 2155/     B1C :                     ; 		rol.w	#2,d2
(1) 2156/     B1C :                     ; 		and.w	#%11,d2
(1) 2157/     B1C :                     ; 		rts
(1) 2158/     B1C :                     ;
(1) 2159/     B1C :                     ; ; ====================================================================
(1) 2160/     B1C :                     ; ; ----------------------------------------------------------------
(1) 2161/     B1C :                     ; ; Objects system
(1) 2162/     B1C :                     ; ;
(1) 2163/     B1C :                     ; ; MD and MARS
(1) 2164/     B1C :                     ; ; ----------------------------------------------------------------
(1) 2165/     B1C :                     ;
(1) 2166/     B1C :                     ; ; --------------------------------------------------------
(1) 2167/     B1C :                     ; ; Init objects
(1) 2168/     B1C :                     ; ; --------------------------------------------------------
(1) 2169/     B1C :                     ;
(1) 2170/     B1C :                     ; Objects_Init:
(1) 2171/     B1C :                     ; 		lea	(RAM_Objects),a6
(1) 2172/     B1C :                     ; 		move.w	#(sizeof_mdobj*MAX_MDOBJ)-1,d7
(1) 2173/     B1C :                     ; .clr:
(1) 2174/     B1C :                     ; 		clr.b	(a6)+
(1) 2175/     B1C :                     ; 		dbf	d7,.clr
(1) 2176/     B1C :                     ; 		lea	(RAM_ObjDispList),a6
(1) 2177/     B1C :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2178/     B1C :                     ; .clr_d:
(1) 2179/     B1C :                     ; 		clr.w	(a6)+
(1) 2180/     B1C :                     ; 		dbf	d7,.clr_d
(1) 2181/     B1C :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2182/     B1C :                     ; 		rts
(1) 2183/     B1C :                     ;
(1) 2184/     B1C :                     ; ; --------------------------------------------------------
(1) 2185/     B1C :                     ; ; Process objects
(1) 2186/     B1C :                     ; ; --------------------------------------------------------
(1) 2187/     B1C :                     ;
(1) 2188/     B1C :                     ; Objects_Run:
(1) 2189/     B1C :                     ; 		lea	(RAM_Objects),a6
(1) 2190/     B1C :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2191/     B1C :                     ; .next_one:
(1) 2192/     B1C :                     ; 		move.l	obj_code(a6),d6
(1) 2193/     B1C :                     ; 		beq.s	.no_code	; Free slot
(1) 2194/     B1C :                     ; 		move.l	d7,-(sp)
(1) 2195/     B1C :                     ; 		move.l	d6,a5
(1) 2196/     B1C :                     ; 		jsr	(a5)
(1) 2197/     B1C :                     ; 		move.l	(sp)+,d7
(1) 2198/     B1C :                     ; .no_code:
(1) 2199/     B1C :                     ; 		adda	#sizeof_mdobj,a6
(1) 2200/     B1C :                     ; 		dbf	d7,.next_one
(1) 2201/     B1C :                     ; 		rts
(1) 2202/     B1C :                     ;
(1) 2203/     B1C :                     ; ; --------------------------------------------------------
(1) 2204/     B1C :                     ; ; Draw ALL Objects from display list
(1) 2205/     B1C :                     ; ;
(1) 2206/     B1C :                     ; ; Call this BEFORE VBlank.
(1) 2207/     B1C :                     ; ; --------------------------------------------------------
(1) 2208/     B1C :                     ;
(1) 2209/     B1C :                     ; Objects_Show:
(1) 2210/     B1C :                     ; 		moveq	#1,d7				; d7 - MD Link
(1) 2211/     B1C :                     ; 		lea	(RAM_Sprites),a6		; a6 - Genesis sprites
(1) 2212/     B1C :                     ;
(1) 2213/     B1C :                     ; 		move.w	(RAM_SprDrwCntr),d6
(1) 2214/     B1C :                     ; 		beq.s	.no_sprdrw
(1) 2215/     B1C :                     ; 		clr.w	(RAM_SprDrwCntr).w
(1) 2216/     B1C :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2217/     B1C :                     ; 		sub.w	#1,d6
(1) 2218/     B1C :                     ; .nexts:
(1) 2219/     B1C :                     ; 		cmp.w	#70,d7
(1) 2220/     B1C :                     ; 		bge.s	.no_sprdrw
(1) 2221/     B1C :                     ; 		move.w	(a5)+,d0
(1) 2222/     B1C :                     ; 		move.w	(a5)+,d1	; custom
(1) 2223/     B1C :                     ; 		and.w	#$FF,d1
(1) 2224/     B1C :                     ; 		lsl.w	#8,d1
(1) 2225/     B1C :                     ; 		or.w	d7,d1
(1) 2226/     B1C :                     ; 		move.w	(a5)+,d2
(1) 2227/     B1C :                     ; 		move.w	(a5)+,d3
(1) 2228/     B1C :                     ; 		move.w	d0,(a6)+
(1) 2229/     B1C :                     ; 		move.w	d1,(a6)+
(1) 2230/     B1C :                     ; 		move.w	d2,(a6)+
(1) 2231/     B1C :                     ; 		move.w	d3,(a6)+
(1) 2232/     B1C :                     ; 		add.w	#1,d7
(1) 2233/     B1C :                     ; 		dbf	d6,.nexts
(1) 2234/     B1C :                     ; .no_sprdrw:
(1) 2235/     B1C :                     ;
(1) 2236/     B1C :                     ; 	if MARS|MARSCD
(1) 2237/     B1C :                     ; 	; Draw mappings from sprites
(1) 2238/     B1C :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2239/     B1C :                     ; 		lea	(RAM_MdDreq+Dreq_SuperSpr),a4	; a4 - 32X SUPER Sprites
(1) 2240/     B1C :                     ; 		move.w	#MAX_MDOBJ-1,d6
(1) 2241/     B1C :                     ; .next:
(1) 2242/     B1C :                     ; 		move.w	(a5),d0
(1) 2243/     B1C :                     ; 		beq	.finish
(1) 2244/     B1C :                     ; 		moveq	#-1,d1
(1) 2245/     B1C :                     ; 		move.w	d0,d1
(1) 2246/     B1C :                     ; 		move.l	d1,a2
(1) 2247/     B1C :                     ; 		move.l	obj_map(a2),a0		; Read mapping
(1) 2248/     B1C :                     ; 		btst	#bitobj_Mars,obj_set(a2)
(1) 2249/     B1C :                     ; 		bne.s	.mars_mode
(1) 2250/     B1C :                     ; 		cmp.w	#70,d7
(1) 2251/     B1C :                     ; 		bge	.mk_spr
(1) 2252/     B1C :                     ; 		move.w	obj_frame(a2),d0
(1) 2253/     B1C :                     ; 		add.w	d0,d0
(1) 2254/     B1C :                     ; 		move.w	(a0,d0.w),d0
(1) 2255/     B1C :                     ; 		adda	d0,a0
(1) 2256/     B1C :                     ; 		move.w	(a0)+,d5
(1) 2257/     B1C :                     ; 		beq	.mk_spr
(1) 2258/     B1C :                     ; 		sub.w	#1,d5
(1) 2259/     B1C :                     ; .mk_pz:
(1) 2260/     B1C :                     ; 	; TODO: H/V flip
(1) 2261/     B1C :                     ; 		move.b	(a0)+,d0
(1) 2262/     B1C :                     ; 		ext.w	d0
(1) 2263/     B1C :                     ; 		add.w	obj_y(a2),d0
(1) 2264/     B1C :                     ; 		add.w	#$80,d0
(1) 2265/     B1C :                     ; 		move.b	(a0)+,d1
(1) 2266/     B1C :                     ; 		lsl.w	#8,d1
(1) 2267/     B1C :                     ; 		or.w	d7,d1
(1) 2268/     B1C :                     ; 		move.w	(a0)+,d2
(1) 2269/     B1C :                     ; 		add.w	obj_vram(a2),d2
(1) 2270/     B1C :                     ; 		adda	#2,a0
(1) 2271/     B1C :                     ; 		move.w	(a0)+,d3
(1) 2272/     B1C :                     ; 		add.w	obj_x(a2),d3
(1) 2273/     B1C :                     ; 		add.w	#$80,d3
(1) 2274/     B1C :                     ; 		move.w	d0,(a6)+
(1) 2275/     B1C :                     ; 		move.w	d1,(a6)+
(1) 2276/     B1C :                     ; 		move.w	d2,(a6)+
(1) 2277/     B1C :                     ; 		move.w	d3,(a6)+
(1) 2278/     B1C :                     ; 		add.w	#1,d7
(1) 2279/     B1C :                     ; 		dbf	d5,.mk_pz
(1) 2280/     B1C :                     ; 		bra.s	.mk_spr
(1) 2281/     B1C :                     ;
(1) 2282/     B1C :                     ; .mars_mode:
(1) 2283/     B1C :                     ; 		move.l	(a0)+,marsspr_data(a4)
(1) 2284/     B1C :                     ; 		move.w	(a0)+,marsspr_dwidth(a4)
(1) 2285/     B1C :                     ; 		move.w	(a0)+,marsspr_indx(a4)
(1) 2286/     B1C :                     ; 		move.b	(a0)+,d2
(1) 2287/     B1C :                     ; 		move.b	(a0)+,d3
(1) 2288/     B1C :                     ; 		move.b	d2,marsspr_xs(a4)
(1) 2289/     B1C :                     ; 		move.b	d3,marsspr_ys(a4)
(1) 2290/     B1C :                     ; 		move.w	obj_frame(a2),d0	; Read frame
(1) 2291/     B1C :                     ; 		move.b	d0,marsspr_xfrm(a4)
(1) 2292/     B1C :                     ; 		ror.w	#8,d0
(1) 2293/     B1C :                     ; 		move.b	d0,marsspr_yfrm(a4)
(1) 2294/     B1C :                     ; 		move.w	obj_x(a2),d4
(1) 2295/     B1C :                     ; 		move.w	obj_y(a2),d5
(1) 2296/     B1C :                     ; 		and.w	#$FF,d2
(1) 2297/     B1C :                     ; 		and.w	#$FF,d3
(1) 2298/     B1C :                     ; 		lsr.w	#1,d2
(1) 2299/     B1C :                     ; 		lsr.w	#1,d3
(1) 2300/     B1C :                     ; ; 		divu.w	#2,d2			; **
(1) 2301/     B1C :                     ; 		sub.w	d2,d4
(1) 2302/     B1C :                     ; ; 		divu.w	#2,d3			; **
(1) 2303/     B1C :                     ; 		sub.w	d3,d5
(1) 2304/     B1C :                     ; ; 		move.l	obj_size(a2),d2		; d2 - UDLR sizes
(1) 2305/     B1C :                     ; ; 		move.w	d2,d3			; Grab LR
(1) 2306/     B1C :                     ; ; 		lsr.w	#5,d3
(1) 2307/     B1C :                     ; ; 		and.w	#%11111000,d3
(1) 2308/     B1C :                     ; ; 		sub.w	d3,d4			; Subtract X
(1) 2309/     B1C :                     ; ; 		swap	d2
(1) 2310/     B1C :                     ; ; 		move.w	d2,d3			; Grab UD
(1) 2311/     B1C :                     ; ; 		lsr.w	#8,d3
(1) 2312/     B1C :                     ; ; 		lsl.b	#3,d3
(1) 2313/     B1C :                     ; ; 		and.w	#$FF,d3
(1) 2314/     B1C :                     ; ; 		sub.w	d3,d5			; Subtract Y
(1) 2315/     B1C :                     ; 		lea	(RAM_BgBufferM),a1
(1) 2316/     B1C :                     ; 		sub.w	md_bg_x(a1),d4
(1) 2317/     B1C :                     ; 		sub.w	md_bg_y(a1),d5
(1) 2318/     B1C :                     ; 		move.w	d4,marsspr_x(a4)
(1) 2319/     B1C :                     ; 		move.w	d5,marsspr_y(a4)
(1) 2320/     B1C :                     ; 		moveq	#0,d4
(1) 2321/     B1C :                     ; 		btst	#bitobj_flipH,obj_set(a2)
(1) 2322/     B1C :                     ; 		beq.s	.flip_h
(1) 2323/     B1C :                     ; 		bset	#0,d4
(1) 2324/     B1C :                     ; .flip_h:
(1) 2325/     B1C :                     ; 		btst	#bitobj_flipV,obj_set(a2)
(1) 2326/     B1C :                     ; 		beq.s	.flip_v
(1) 2327/     B1C :                     ; 		bset	#1,d4
(1) 2328/     B1C :                     ; .flip_v:
(1) 2329/     B1C :                     ; 		move.w	d4,marsspr_flags(a4)
(1) 2330/     B1C :                     ; 		adda	#sizeof_marsspr,a4	; Next SuperSprite
(1) 2331/     B1C :                     ; .mk_spr:
(1) 2332/     B1C :                     ; 		clr.w	(a5)+			; Clear request
(1) 2333/     B1C :                     ; 		dbf	d6,.next
(1) 2334/     B1C :                     ; .finish:
(1) 2335/     B1C :                     ; 		lea	(RAM_Sprites),a6	; a6 - Genesis sprites
(1) 2336/     B1C :                     ; 		move.w	d7,d6
(1) 2337/     B1C :                     ; 		cmp.w	#70,d7
(1) 2338/     B1C :                     ; 		bge.s	.ran_out
(1) 2339/     B1C :                     ; 		sub.w	#1,d6
(1) 2340/     B1C :                     ; 		lsl.w	#3,d6
(1) 2341/     B1C :                     ; 		adda	d6,a6
(1) 2342/     B1C :                     ; 		clr.l	(a6)			; TODO: endoflist check
(1) 2343/     B1C :                     ; .ran_out:
(1) 2344/     B1C :                     ; 	endif
(1) 2345/     B1C :                     ; 		rts
(1) 2346/     B1C :                     ;
(1) 2347/     B1C :                     ; ; ----------------------------------------------------------------
(1) 2348/     B1C :                     ; ; Subroutines
(1) 2349/     B1C :                     ; ; ----------------------------------------------------------------
(1) 2350/     B1C :                     ;
(1) 2351/     B1C :                     ; ; --------------------------------------------------------
(1) 2352/     B1C :                     ; ; object_Display
(1) 2353/     B1C :                     ; ;
(1) 2354/     B1C :                     ; ; Builds a sprite using map data specified in
(1) 2355/     B1C :                     ; ; obj_map(a6)
(1) 2356/     B1C :                     ; ;
(1) 2357/     B1C :                     ; ; *** GENESIS map ***
(1) 2358/     B1C :                     ; ; mapdata:
(1) 2359/     B1C :                     ; ;       dc.w .frame0-mapdata
(1) 2360/     B1C :                     ; ;       dc.w .frame1-mapdata
(1) 2361/     B1C :                     ; ;       ...
(1) 2362/     B1C :                     ; ; .frame0:
(1) 2363/     B1C :                     ; ;       dc.w numofpz
(1) 2364/     B1C :                     ; ;       dc.b YY,SS
(1) 2365/     B1C :                     ; ;       dc.w vram_normal
(1) 2366/     B1C :                     ; ;       dc.w vram_half
(1) 2367/     B1C :                     ; ;       dc.w XXXX
(1) 2368/     B1C :                     ; ;       align 2
(1) 2369/     B1C :                     ; ;
(1) 2370/     B1C :                     ; ; *** 32X map ***
(1) 2371/     B1C :                     ; ; mapdata:
(1) 2372/     B1C :                     ; ; 	dc.l SH2_ADDR|TH ; Spritesheet location (TH opt.)
(1) 2373/     B1C :                     ; ; 	dc.w 512	 ; Spritesheet WIDTH
(1) 2374/     B1C :                     ; ; 	dc.b 64,72	 ; Frame width and height
(1) 2375/     B1C :                     ; ; 	dc.w $80	 ; Palette index
(1) 2376/     B1C :                     ; ;
(1) 2377/     B1C :                     ; ; obj_frame(a6) is in YYXX direction
(1) 2378/     B1C :                     ; ;
(1) 2379/     B1C :                     ; ; Input:
(1) 2380/     B1C :                     ; ; a6 - Object
(1) 2381/     B1C :                     ; ;
(1) 2382/     B1C :                     ; ; Uses:
(1) 2383/     B1C :                     ; ; a5,d7
(1) 2384/     B1C :                     ; ; --------------------------------------------------------
(1) 2385/     B1C :                     ;
(1) 2386/     B1C :                     ; object_Display:
(1) 2387/     B1C :                     ; 		lea	(RAM_ObjDispList),a5
(1) 2388/     B1C :                     ; 		move.w	#MAX_MDOBJ-1,d7
(1) 2389/     B1C :                     ; .srch:
(1) 2390/     B1C :                     ; 		tst.w	(a5)
(1) 2391/     B1C :                     ; 		beq.s	.this_one
(1) 2392/     B1C :                     ; 		adda	#2,a5
(1) 2393/     B1C :                     ; 		dbf	d7,.srch
(1) 2394/     B1C :                     ; .this_one:
(1) 2395/     B1C :                     ; 		move.w	a6,(a5)
(1) 2396/     B1C :                     ; 		rts
(1) 2397/     B1C :                     ;
(1) 2398/     B1C :                     ; ; --------------------------------------------------------
(1) 2399/     B1C :                     ; ; object_MkSprPz
(1) 2400/     B1C :                     ; ;
(1) 2401/     B1C :                     ; ; Makes separate sprite pieces using
(1) 2402/     B1C :                     ; ;
(1) 2403/     B1C :                     ; ; Input:
(1) 2404/     B1C :                     ; ; d0 - X pos
(1) 2405/     B1C :                     ; ; d1 - Y pos
(1) 2406/     B1C :                     ; ; d2 - VRAM
(1) 2407/     B1C :                     ; ; d3 - Size
(1) 2408/     B1C :                     ; :
(1) 2409/     B1C :                     ; ; Uses:
(1) 2410/     B1C :                     ; ; a5,d7
(1) 2411/     B1C :                     ; ; --------------------------------------------------------
(1) 2412/     B1C :                     ;
(1) 2413/     B1C :                     ; object_MkSprPz:
(1) 2414/     B1C :                     ; 		move.w	(RAM_SprDrwCntr).w,d7
(1) 2415/     B1C :                     ; 		cmp.w	#70,d7
(1) 2416/     B1C :                     ; 		bge.s	.nope
(1) 2417/     B1C :                     ; 		lsl.w	#3,d7
(1) 2418/     B1C :                     ; 		lea	(RAM_SprDrwPz),a5
(1) 2419/     B1C :                     ; 		adda	d7,a5
(1) 2420/     B1C :                     ; 		add.w	#$80,d0
(1) 2421/     B1C :                     ; 		add.w	#$80,d1
(1) 2422/     B1C :                     ; 		and.w	#$FF,d3
(1) 2423/     B1C :                     ; ; 		lsl.w	#8,d3
(1) 2424/     B1C :                     ; 		move.w	d1,(a5)+
(1) 2425/     B1C :                     ; 		move.w	d3,(a5)+
(1) 2426/     B1C :                     ; 		move.w	d2,(a5)+
(1) 2427/     B1C :                     ; 		move.w	d0,(a5)+
(1) 2428/     B1C :                     ; 		add.w	#1,(RAM_SprDrwCntr).w
(1) 2429/     B1C :                     ; .nope:
(1) 2430/     B1C :                     ; 		rts
(1) 2431/     B1C :                     ;
(1) 2432/     B1C :                     ; ; --------------------------------------------------------
(1) 2433/     B1C :                     ; ; Object_Animate
(1) 2434/     B1C :                     ; ;
(1) 2435/     B1C :                     ; ; Animates the sprite
(1) 2436/     B1C :                     ; ;
(1) 2437/     B1C :                     ; ; Input
(1) 2438/     B1C :                     ; ; a0 | LONG - Animation data
(1) 2439/     B1C :                     ; ;
(1) 2440/     B1C :                     ; ; Output
(1) 2441/     B1C :                     ; ; d0 | WORD - Frame
(1) 2442/     B1C :                     ; ;
(1) 2443/     B1C :                     ; ; Uses:
(1) 2444/     B1C :                     ; ; d2
(1) 2445/     B1C :                     ; ; --------------------------------------------------------
(1) 2446/     B1C :                     ;
(1) 2447/     B1C :                     ; ; NOTE: to restart an animation
(1) 2448/     B1C :                     ; ; clear obj_anim_indx(a6) manually
(1) 2449/     B1C :                     ;
(1) 2450/     B1C :                     ; Object_Animate:
(1) 2451/     B1C :                     ; ;  		tst.l	d1
(1) 2452/     B1C :                     ; ;   		beq.s	.return
(1) 2453/     B1C :                     ;  		moveq	#0,d2
(1) 2454/     B1C :                     ;  		move.b	obj_anim_id+1(a6),d2
(1) 2455/     B1C :                     ;  		cmp.b	obj_anim_id(a6),d2
(1) 2456/     B1C :                     ;  		beq.s	.sameThing
(1) 2457/     B1C :                     ;  		move.b	obj_anim_id(a6),obj_anim_id+1(a6)
(1) 2458/     B1C :                     ;  		clr.w	obj_anim_indx(a6)
(1) 2459/     B1C :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2460/     B1C :                     ; .sameThing:
(1) 2461/     B1C :                     ;  		move.b	obj_anim_id(a6),d2
(1) 2462/     B1C :                     ;  		cmp.b	#-1,d2
(1) 2463/     B1C :                     ;  		beq.s	.return
(1) 2464/     B1C :                     ;  		add.w	d2,d2
(1) 2465/     B1C :                     ;  		move.w	(a0,d2.w),d2
(1) 2466/     B1C :                     ;  		lea	(a0,d2.w),a0
(1) 2467/     B1C :                     ;
(1) 2468/     B1C :                     ;  		move.w	(a0)+,d2
(1) 2469/     B1C :                     ;  		cmp.w	#-1,d2
(1) 2470/     B1C :                     ;  		beq.s	.keepspd
(1) 2471/     B1C :                     ;  		sub.b	#1,obj_anim_spd(a6)
(1) 2472/     B1C :                     ;  		bpl.s	.return
(1) 2473/     B1C :                     ; 		move.b	d2,obj_anim_spd(a6)
(1) 2474/     B1C :                     ; .keepspd:
(1) 2475/     B1C :                     ;  		moveq	#0,d1
(1) 2476/     B1C :                     ;  		move.w	obj_anim_indx(a6),d2
(1) 2477/     B1C :                     ;  		add.w	d2,d2
(1) 2478/     B1C :                     ;  		move.w	(a0),d1
(1) 2479/     B1C :                     ;  		adda	d2,a0
(1) 2480/     B1C :                     ;  		move.w	(a0),d0
(1) 2481/     B1C :                     ;  		cmp.w	#-1,d0
(1) 2482/     B1C :                     ;  		beq.s	.noAnim		; loop
(1) 2483/     B1C :                     ;  		cmp.w	#-2,d0
(1) 2484/     B1C :                     ;  		beq.s	.lastFrame	; finish
(1) 2485/     B1C :                     ;  		cmp.w	#-3,d0
(1) 2486/     B1C :                     ;  		beq.s	.goToFrame
(1) 2487/     B1C :                     ;
(1) 2488/     B1C :                     ;  		move.w	d0,obj_frame(a6)
(1) 2489/     B1C :                     ;  		add.w	#1,obj_anim_indx(a6)
(1) 2490/     B1C :                     ; .return:
(1) 2491/     B1C :                     ;  		rts
(1) 2492/     B1C :                     ;
(1) 2493/     B1C :                     ; .noAnim:
(1) 2494/     B1C :                     ;  		move.w	#1,obj_anim_indx(a6)
(1) 2495/     B1C :                     ;  		move.w	d1,d0
(1) 2496/     B1C :                     ;  		move.w	d0,obj_frame(a6)
(1) 2497/     B1C :                     ; 		rts
(1) 2498/     B1C :                     ; .lastFrame:
(1) 2499/     B1C :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2500/     B1C :                     ; 		rts
(1) 2501/     B1C :                     ; .goToFrame:
(1) 2502/     B1C :                     ; 		clr.w	obj_anim_indx(a6)
(1) 2503/     B1C :                     ; 		move.w	2(a0),obj_anim_indx(a6)
(1) 2504/     B1C :                     ; 		rts
(1) 2505/     B1C :                     ;
(1) 2506/     B1C :                     ; ; --------------------------------------------------------
(1) 2507/     B1C :                     ; ; object_Speed
(1) 2508/     B1C :                     ; ;
(1) 2509/     B1C :                     ; ; Moves the object using speed settings
(1) 2510/     B1C :                     ; ;
(1) 2511/     B1C :                     ; ; Input:
(1) 2512/     B1C :                     ; ; a6 - Object
(1) 2513/     B1C :                     ; ;
(1) 2514/     B1C :                     ; ; Uses:
(1) 2515/     B1C :                     ; ; d7
(1) 2516/     B1C :                     ; ; --------------------------------------------------------
(1) 2517/     B1C :                     ;
(1) 2518/     B1C :                     ; object_UpdX:
(1) 2519/     B1C :                     ; 		moveq	#0,d7
(1) 2520/     B1C :                     ; 		move.w	obj_x_spd(a6),d7
(1) 2521/     B1C :                     ; 		ext.l	d7
(1) 2522/     B1C :                     ; 		asl.l	#8,d7
(1) 2523/     B1C :                     ; 		add.l	d7,obj_x(a6)
(1) 2524/     B1C :                     ; 		rts
(1) 2525/     B1C :                     ; object_Speed:
(1) 2526/     B1C :                     ; 		bsr.s	object_UpdX
(1) 2527/     B1C :                     ; object_UpdY:
(1) 2528/     B1C :                     ; 		moveq	#0,d7
(1) 2529/     B1C :                     ; 		move.w	obj_y_spd(a6),d7
(1) 2530/     B1C :                     ; 		ext.l	d7
(1) 2531/     B1C :                     ; 		asl.l	#8,d7
(1) 2532/     B1C :                     ; 		add.l	d7,obj_y(a6)
(1) 2533/     B1C :                     ; 		rts
(1) 2534/     B1C :                     ;
(1) 2535/     B1C :                     ; ; --------------------------------------------------------
(1) 2536/     B1C :                     ; ; object_ColM_Floor
(1) 2537/     B1C :                     ; ;
(1) 2538/     B1C :                     ; ; Check object collision on 32X map's floor
(1) 2539/     B1C :                     ; ;
(1) 2540/     B1C :                     ; ; Input:
(1) 2541/     B1C :                     ; ; a6 - Object to check
(1) 2542/     B1C :                     ; ;
(1) 2543/     B1C :                     ; ; Returns:
(1) 2544/     B1C :                     ; ; beq  - No collision
(1) 2545/     B1C :                     ; ; bne  - Found collision
(1) 2546/     B1C :                     ; ; d4.b - Collision block number
(1) 2547/     B1C :                     ; ; d5.w - Y-pos center snap
(1) 2548/     B1C :                     ; ;
(1) 2549/     B1C :                     ; ; Uses:
(1) 2550/     B1C :                     ; ; d4-d7,a4-a5
(1) 2551/     B1C :                     ; ; --------------------------------------------------------
(1) 2552/     B1C :                     ;
(1) 2553/     B1C :                     ; ; 32X MAP SIDE
(1) 2554/     B1C :                     ;
(1) 2555/     B1C :                     ; object_ColM_Floor:
(1) 2556/     B1C :                     ; 		lea	(RAM_BgBufferM),a5
(1) 2557/     B1C :                     ; 		moveq	#0,d5
(1) 2558/     B1C :                     ; 		moveq	#0,d4
(1) 2559/     B1C :                     ; 		move.l	md_bg_col(a5),a4
(1) 2560/     B1C :                     ; 		move.w	md_bg_wf(a5),d7
(1) 2561/     B1C :                     ; 		sub.w	#1,d7
(1) 2562/     B1C :                     ; 		move.w	obj_x(a6),d4
(1) 2563/     B1C :                     ; 		bpl.s	.v_x
(1) 2564/     B1C :                     ; 		clr.w	d4
(1) 2565/     B1C :                     ; .v_x:
(1) 2566/     B1C :                     ; 		cmp.w	d7,d4
(1) 2567/     B1C :                     ; 		blt.s	.v_xr
(1) 2568/     B1C :                     ; 		move.w	d7,d4
(1) 2569/     B1C :                     ; .v_xr:
(1) 2570/     B1C :                     ; 		move.w	md_bg_hf(a5),d7
(1) 2571/     B1C :                     ; 		sub.w	#1,d7
(1) 2572/     B1C :                     ; 		move.w	obj_y(a6),d5
(1) 2573/     B1C :                     ; 		bpl.s	.v_y
(1) 2574/     B1C :                     ; 		clr.w	d5
(1) 2575/     B1C :                     ; .v_y:
(1) 2576/     B1C :                     ; 		cmp.w	d7,d5
(1) 2577/     B1C :                     ; 		blt.s	.v_yd
(1) 2578/     B1C :                     ; 		move.w	d7,d5
(1) 2579/     B1C :                     ; .v_yd:
(1) 2580/     B1C :                     ; 		move.l	obj_size(a6),d7
(1) 2581/     B1C :                     ; 		swap	d7		; Add Y
(1) 2582/     B1C :                     ; 		and.w	#$FF,d7
(1) 2583/     B1C :                     ; 		move.w	d7,d6
(1) 2584/     B1C :                     ; 		lsl.w	#3,d6
(1) 2585/     B1C :                     ; 		add.w	d6,d5
(1) 2586/     B1C :                     ;
(1) 2587/     B1C :                     ; 	; d5 - Ypos + size
(1) 2588/     B1C :                     ; 	; d6 - Xpos
(1) 2589/     B1C :                     ; 	; d7 - Dsize/2
(1) 2590/     B1C :                     ;
(1) 2591/     B1C :                     ; 	; 16x16 only
(1) 2592/     B1C :                     ; 		lsr.w	#1,d7		; Dsize/2
(1) 2593/     B1C :                     ; 		asr.w	#4,d4		; X >> 16
(1) 2594/     B1C :                     ; 		add.l	d4,a4		; Add X
(1) 2595/     B1C :                     ; 		move.l	d5,d4		; Copy d5 to d4
(1) 2596/     B1C :                     ; 		asr.w	#4,d4		; Y >> 16
(1) 2597/     B1C :                     ; 		moveq	#0,d6
(1) 2598/     B1C :                     ; 		move.w	md_bg_w(a5),d6	; d6: map width
(1) 2599/     B1C :                     ; 		mulu.w	d6,d4		; (Y>>16)*(mwidth)
(1) 2600/     B1C :                     ; 		add.l	d4,a4		; Add Y
(1) 2601/     B1C :                     ; 		and.w	#-$10,d5	; Filter Y Snap
(1) 2602/     B1C :                     ; 		move.b	(a4),d4		; d4: Start ID
(1) 2603/     B1C :                     ; 		sub.l	d6,a4
(1) 2604/     B1C :                     ; 		sub.w	#1,d7		; Dsize - 1
(1) 2605/     B1C :                     ; 		bmi.s	.valid
(1) 2606/     B1C :                     ; .next:
(1) 2607/     B1C :                     ; 		swap	d7
(1) 2608/     B1C :                     ; 		move.b	(a4),d7		; New ID != 0?
(1) 2609/     B1C :                     ; 		beq.s	.blnk
(1) 2610/     B1C :                     ; 		move.b	d7,d4		; Set new ID
(1) 2611/     B1C :                     ; 		sub.w	#$10,d5		; Decrement Y Snap
(1) 2612/     B1C :                     ; .blnk:
(1) 2613/     B1C :                     ; 		sub.l	d6,a4		; Decrement width
(1) 2614/     B1C :                     ; 		swap	d7
(1) 2615/     B1C :                     ; 		dbf	d7,.next
(1) 2616/     B1C :                     ; .valid:
(1) 2617/     B1C :                     ; 		and.w	#$FF,d4		; Filter ID
(1) 2618/     B1C :                     ; 		rts
(1) 2619/     B1C :                     ;
(1) 2620/     B1C :                     ; ; ----------------------------------------
(1) 2621/     B1C :                     ; ; object_SetColFloor
(1) 2622/     B1C :                     ; ;
(1) 2623/     B1C :                     ; ; Snaps the object to the map's floor.
(1) 2624/     B1C :                     ; ;
(1) 2625/     B1C :                     ; ; Call object_ColM_Floor first
(1) 2626/     B1C :                     ; ;
(1) 2627/     B1C :                     ; ; Input:
(1) 2628/     B1C :                     ; ; d4.b - Collision block
(1) 2629/     B1C :                     ; ; d5.w - Y-pos center snap
(1) 2630/     B1C :                     ; ; ----------------------------------------
(1) 2631/     B1C :                     ;
(1) 2632/     B1C :                     ; object_SetColFloor:
(1) 2633/     B1C :                     ; 		and.w	#$FF,d4
(1) 2634/     B1C :                     ; 		beq.s	.no_col
(1) 2635/     B1C :                     ; 		lsl.w	#4,d4
(1) 2636/     B1C :                     ; 		move.w	obj_x(a6),d7		; Grab CENTER X
(1) 2637/     B1C :                     ; 		and.w	#$0F,d7			; limit to 16
(1) 2638/     B1C :                     ; 		lea	slope_data_16(pc),a0
(1) 2639/     B1C :                     ; 		adda	d4,a0
(1) 2640/     B1C :                     ; 		move.b	(a0,d7.w),d4
(1) 2641/     B1C :                     ; 		and.w	#$0F,d4
(1) 2642/     B1C :                     ;
(1) 2643/     B1C :                     ; 		moveq	#0,d6
(1) 2644/     B1C :                     ; 		move.w	obj_y(a6),d7
(1) 2645/     B1C :                     ; 		move.l	obj_size(a6),d6
(1) 2646/     B1C :                     ; 		swap	d6
(1) 2647/     B1C :                     ; 		and.w	#$FF,d6
(1) 2648/     B1C :                     ; 		lsl.w	#3,d6
(1) 2649/     B1C :                     ; 		sub.w	d6,d5
(1) 2650/     B1C :                     ; 		add.w	d4,d5	; target slope
(1) 2651/     B1C :                     ; 		cmp.w	d5,d7
(1) 2652/     B1C :                     ; 		ble.s	.no_col
(1) 2653/     B1C :                     ; 		move.w	#$800,d6
(1) 2654/     B1C :                     ; 		move.w	d6,obj_y_spd(a6)
(1) 2655/     B1C :                     ; ; .set_me:
(1) 2656/     B1C :                     ; ; 		move.w	obj_x_spd(a6),d6
(1) 2657/     B1C :                     ; ; 		bpl.s	.x_spd
(1) 2658/     B1C :                     ; ; 		neg.w	d6
(1) 2659/     B1C :                     ; ; .x_spd:
(1) 2660/     B1C :                     ;
(1) 2661/     B1C :                     ; 		bclr	#bitobj_air,obj_status(a6)
(1) 2662/     B1C :                     ; 		move.w	d5,obj_y(a6)
(1) 2663/     B1C :                     ; .no_col:
(1) 2664/     B1C :                     ; 		rts
(1) 2665/     B1C :                     ;
(1) 2666/     B1C :                     ; ; ----------------------------------------
(1) 2667/     B1C :                     ;
(1) 2668/     B1C :                     ; ; Slope data 16x16
(1) 2669/     B1C :                     ; slope_data_16:
(1) 2670/     B1C :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2671/     B1C :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2672/     B1C :                     ; 		dc.b  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
(1) 2673/     B1C :                     ; 		dc.b 15,14,13,12,11,10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
(1) 2674/     B1C :                     ; 		dc.b  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15
(1) 2675/     B1C :                     ; 		dc.b 15,15,14,14,13,13,12,12,11,11,10,10, 9, 9, 8, 8
(1) 2676/     B1C :                     ; 		dc.b  7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0
(1) 2677/     B1C :                     ; 		dc.b  0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
(1) 2678/     B1C :                     ; 		dc.b  8, 8, 9, 9,10,10,11,11,12,12,13,13,14,14,15,15
(1) 2679/     B1C :                     ; 		align 2
(1) 2680/     B1C :                     
(1) 2681/     B1C :                     ; ====================================================================
(1) 2682/     B1C :                     ; ----------------------------------------------------------------
(1) 2683/     B1C :                     ; Video routines for 32X
(1) 2684/     B1C :                     ; ----------------------------------------------------------------
(1) 2685/     B1C :                     
(1) 2686/     B1C :                     ; --------------------------------------------------------
(1) 2687/     B1C :                     ; Video_Mars_GfxMode
(1) 2688/     B1C :                     ; Sets graphics mode on the 32X side
(1) 2689/     B1C :                     ;
(1) 2690/     B1C :                     ; Input:
(1) 2691/     B1C :                     ; d0 - Graphics mode
(1) 2692/     B1C :                     ; --------------------------------------------------------
(1) 2693/     B1C :                     
(1) 2694/     B1C :                     Video_Mars_GfxMode:
(1) 2695/     B1C :                     ; 	if MARS
(1) 2696/     B1C :                     ; 		move.w	d0,d7
(1) 2697/     B1C :                     ; 		and.w	#%00000111,d7			; Current limit: 8 Master modes
(1) 2698/     B1C :                     ; 		or.w	#$C0,d7
(1) 2699/     B1C :                     ; 		move.b	d7,(sysmars_reg+comm12+1).l
(1) 2700/     B1C :                     ; 		bsr	System_MarsUpdate
(1) 2701/     B1C :                     ; .wait_slv:	move.w	(sysmars_reg+comm14).l,d7	; Wait for Slave
(1) 2702/     B1C :                     ; 		and.w	#%00001111,d7
(1) 2703/     B1C :                     ; 		bne.s	.wait_slv
(1) 2704/     B1C :                     ; .wait:		move.w	(sysmars_reg+comm12).l,d7	; Wait for Master
(1) 2705/     B1C :                     ; 		and.w	#%11000000,d7
(1) 2706/     B1C :                     ; 		bne.s	.wait
(1) 2707/     B1C :                     ; 	endif
(1) 2708/     B1C : 4E75                		rts
(1) 2709/     B1E :                     
(1) 2710/     B1E :                     ; --------------------------------------------------------
(1) 2711/     B1E :                     ; Video_Mars_WaitFrame
(1) 2712/     B1E :                     ; --------------------------------------------------------
(1) 2713/     B1E :                     
(1) 2714/     B1E :                     Video_Mars_WaitFrame:
(1) 2715/     B1E :                     ; 	if MARS
(1) 2716/     B1E :                     ; 		bset	#5,(sysmars_reg+comm12+1).l	; Set R bit
(1) 2717/     B1E :                     ; .wait:
(1) 2718/     B1E :                     ; ; 		move.w	(vdp_ctrl),d7
(1) 2719/     B1E :                     ; ; 		btst	#bitVBlk,d7
(1) 2720/     B1E :                     ; ; 		bne.s	.late
(1) 2721/     B1E :                     ; 		move.w	(sysmars_reg+comm12).l,d7
(1) 2722/     B1E :                     ; 		btst	#5,d7
(1) 2723/     B1E :                     ; 		bne.s	.wait
(1) 2724/     B1E :                     ; .late:
(1) 2725/     B1E :                     ; 	endif
(1) 2726/     B1E : 4E75                		rts
(1) 2727/     B20 :                     
(1) 2728/     B20 :                     ; --------------------------------------------------------
(1) 2729/     B20 :                     ; Video_LoadPal_Mars
(1) 2730/     B20 :                     ;
(1) 2731/     B20 :                     ; Load Indexed palette directly to Buffer
(1) 2732/     B20 :                     ;
(1) 2733/     B20 :                     ; d0 - Start at
(1) 2734/     B20 :                     ; d1 - Number of colors
(1) 2735/     B20 :                     ; d2 - Priority bit OFF/ON
(1) 2736/     B20 :                     ; --------------------------------------------------------
(1) 2737/     B20 :                     
(1) 2738/     B20 :                     Video_FadePal_Mars:
(1) 2762/     B20 : 4E75                		rts
(1) 2763/     B22 :                     
(1) 2764/     B22 :                     ; --------------------------------------------------------
(1) 2765/     B22 :                     ; Video_MarsPalFade
(1) 2766/     B22 :                     ;
(1) 2767/     B22 :                     ; a0 - Palette data
(1) 2768/     B22 :                     ; d0 - Number of colors
(1) 2769/     B22 :                     ; d1 - Speed
(1) 2770/     B22 :                     ;
(1) 2771/     B22 :                     ; RAM_ReqFadeMars: (WORD)
(1) 2772/     B22 :                     ; $00 - No task (or finished)
(1) 2773/     B22 :                     ; $01 - Fade in
(1) 2774/     B22 :                     ; $02 - Fade out to black
(1) 2775/     B22 :                     ;
(1) 2776/     B22 :                     ; CALL THIS OUTSIDE OF VBLANK
(1) 2777/     B22 :                     ; --------------------------------------------------------
(1) 2778/     B22 :                     
(1) 2779/     B22 :                     ; TODO: luego ver que hago con el priority bit
(1) 2780/     B22 :                     
(1) 2781/     B22 :                     Video_MarsPalFade:
(1) 2940/     B22 : 4E75                		rts
(1) 2941/     B24 :                     
     166/     B24 :                     		include	"system/md/system.asm"
(1)    1/     B24 :                     ; ====================================================================
(1)    2/     B24 :                     ; ----------------------------------------------------------------
(1)    3/     B24 :                     ; Genesis system routines
(1)    4/     B24 :                     ; ----------------------------------------------------------------
(1)    5/     B24 :                     
(1)    6/     B24 :                     ; ====================================================================
(1)    7/     B24 :                     ; ----------------------------------------------------------------
(1)    8/     B24 :                     ; Variables
(1)    9/     B24 :                     ; ----------------------------------------------------------------
(1)   10/     B24 :                     
(1)   11/     B24 :                     ; Controller buffer data (after calling System_Input)
(1)   12/     B24 :                     ;
(1)   13/     B24 :                     ; Type/Revision byte:
(1)   14/     B24 :                     ;
(1)   15/     B24 :                     ; ID    |
(1)   16/     B24 :                     ; $0D   | $00 - Original 3 button
(1)   17/     B24 :                     ;       | $01 - 6 button version: XYZM
(1)   18/     B24 :                     
(1)   19/     B24 : (MACRO)             		struct 0
(1)   19/     B24 : =$B24               GLBL_LASTPC     set *
(1)   19/     B24 :                                     dephase
(1)   19/     B24 : =$B24               GLBL_LASTORG    set *
(1)   19/       0 :                                     phase 0
(1)   20/       0 :                     pad_id		ds.b 1			; Controller ID
(1)   21/       1 :                     pad_ver		ds.b 1			; Controller type/revision
(1)   22/       2 :                     on_hold		ds.w 1			; User HOLD bits
(1)   23/       4 :                     on_press	ds.w 1			; User PRESSED bits
(1)   24/       6 :                     mouse_x		ds.w 1			; Mouse X add/sub
(1)   25/       8 :                     mouse_y		ds.w 1			; Mouse Y add/sub
(1)   26/       A :                     extr_3		ds.w 1
(1)   27/       C :                     extr_4		ds.w 1
(1)   28/       E :                     extr_5		ds.w 1
(1)   29/      10 :                     sizeof_input	ds.l 0
(1)   30/      10 : (MACRO)             		endstruct
(1)   30/       0 :                                     !org GLBL_LASTORG
(1)   30/     B24 :                                     phase GLBL_LASTPC
(1)   31/     B24 :                     
(1)   32/     B24 :                     ; Read as (Controller_1) then add +on_hold or +on_press
(1)   33/     B24 : =$FFFFFFFFFF..      Controller_1	equ RAM_InputData
(1)   34/     B24 : =$FFFFFFFFFF..      Controller_2	equ RAM_InputData+sizeof_input
(1)   35/     B24 :                     
(1)   36/     B24 :                     ; Read WORD in +on_hold or +on_press
(1)   37/     B24 : =$1                 JoyUp		equ $0001
(1)   38/     B24 : =$2                 JoyDown		equ $0002
(1)   39/     B24 : =$4                 JoyLeft		equ $0004
(1)   40/     B24 : =$8                 JoyRight	equ $0008
(1)   41/     B24 : =$10                JoyB		equ $0010
(1)   42/     B24 : =$20                JoyC		equ $0020
(1)   43/     B24 : =$40                JoyA		equ $0040
(1)   44/     B24 : =$80                JoyStart	equ $0080
(1)   45/     B24 : =$100               JoyZ		equ $0100
(1)   46/     B24 : =$200               JoyY		equ $0200
(1)   47/     B24 : =$400               JoyX		equ $0400
(1)   48/     B24 : =$800               JoyMode		equ $0800
(1)   49/     B24 : =$0                 bitJoyUp	equ 0		; READ THESE AS A WORD
(1)   50/     B24 : =$1                 bitJoyDown	equ 1
(1)   51/     B24 : =$2                 bitJoyLeft	equ 2
(1)   52/     B24 : =$3                 bitJoyRight	equ 3
(1)   53/     B24 : =$4                 bitJoyB		equ 4
(1)   54/     B24 : =$5                 bitJoyC		equ 5
(1)   55/     B24 : =$6                 bitJoyA		equ 6
(1)   56/     B24 : =$7                 bitJoyStart	equ 7
(1)   57/     B24 : =$8                 bitJoyZ		equ 8
(1)   58/     B24 : =$9                 bitJoyY		equ 9
(1)   59/     B24 : =$A                 bitJoyX		equ 10
(1)   60/     B24 : =$B                 bitJoyMode	equ 11
(1)   61/     B24 :                     
(1)   62/     B24 :                     ; Mega Mouse
(1)   63/     B24 :                     ; Read WORD as +on_hold or +on_press
(1)   64/     B24 : =$1                 ClickR		equ $0001
(1)   65/     B24 : =$2                 ClickL		equ $0002
(1)   66/     B24 : =$4                 ClickM		equ $0004	; US MOUSE ONLY
(1)   67/     B24 : =$8                 ClickS		equ $0008	; (Untested)
(1)   68/     B24 : =$0                 bitClickR	equ 0
(1)   69/     B24 : =$1                 bitClickL	equ 1
(1)   70/     B24 : =$2                 bitClickM	equ 2
(1)   71/     B24 : =$3                 bitClickS	equ 3
(1)   72/     B24 :                     
(1)   73/     B24 :                     ; ====================================================================
(1)   74/     B24 :                     ; ----------------------------------------------------------------
(1)   75/     B24 :                     ; RAM section
(1)   76/     B24 :                     ; ----------------------------------------------------------------
(1)   77/     B24 :                     
(1)   78/     B24 : (MACRO)             		struct RAM_MdSystem
(1)   78/     B24 : =$B24               GLBL_LASTPC     set *
(1)   78/     B24 :                                     dephase
(1)   78/     B24 : =$B24               GLBL_LASTORG    set *
(1)   78/FFFFFFFFFFFFA000 :                                     phase RAM_MDSYSTEM
(1)   79/FFFFFFFFFFFFA000 :                     RAM_InputData	ds.b sizeof_input*4		; Input data section
(1)   80/FFFFFFFFFFFFA040 :                     RAM_SaveData	ds.b $200			; SRAM data cache
(1)   81/FFFFFFFFFFFFA240 :                     RAM_DmaCode	ds.b $200
(1)   82/FFFFFFFFFFFFA440 :                     RAM_SysRandVal	ds.l 1				; Random value
(1)   83/FFFFFFFFFFFFA444 :                     RAM_SysRandSeed	ds.l 1				; Randomness seed
(1)   84/FFFFFFFFFFFFA448 :                     RAM_initflug	ds.l 1				; "INIT" flag
(1)   85/FFFFFFFFFFFFA44C :                     RAM_MdMarsVInt	ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)   86/FFFFFFFFFFFFA452 :                     RAM_MdMarsHint	ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)   87/FFFFFFFFFFFFA458 :                     RAM_MdVBlkWait	ds.w 1
(1)   88/FFFFFFFFFFFFA45A :                     sizeof_mdsys	ds.l 0
(1)   89/FFFFFFFFFFFFA45C : (MACRO)             		endstruct
(1)   89/FFFFFFFFFFFFA000 :                                     !org GLBL_LASTORG
(1)   89/     B24 :                                     phase GLBL_LASTPC
(1)   90/     B24 : (MACRO)             		report "MD SYSTEM RAM",sizeof_mdsys-RAM_MdSystem,MAX_MdSystem
(1)   91/     B24 :                     
(1)   92/     B24 :                     ; ====================================================================
(1)   93/     B24 :                     ; --------------------------------------------------------
(1)   94/     B24 :                     ; Init System
(1)   95/     B24 :                     ; 
(1)   96/     B24 :                     ; Uses:
(1)   97/     B24 :                     ; a0-a2,d0-d1
(1)   98/     B24 :                     ; --------------------------------------------------------
(1)   99/     B24 :                     
(1)  100/     B24 :                     System_Init:
(1)  101/     B24 : 40E7                		move.w	sr,-(sp)
(1)  102/     B26 : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  114/     B2A : 303C 4EF9           		move.w	#$4EF9,d0		; Set JMP opcode for the Hblank/VBlank jumps
(1)  115/     B2E : 31C0 A44C            		move.w	d0,(RAM_MdMarsVInt).w
(1)  116/     B32 : 31C0 A452           		move.w	d0,(RAM_MdMarsHInt).w
(1)  117/     B36 : 203C 0000 0FD4      		move.l	#VInt_Default,d0	; Set default ints
(1)  118/     B3C : 223C 0000 0FEA      		move.l	#Hint_Default,d1
(1)  119/     B42 : 6100 03F6           		bsr	System_SetInts
(1)  120/     B46 : 41F8 A000           		lea	(RAM_InputData),a0	; Clear input data buffer
(1)  121/     B4A : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  122/     B4E : 7000                		moveq	#0,d0
(1)  123/     B50 :                     .clrinput:
(1)  124/     B50 : 30C0                		move.w	d0,(a0)+
(1)  125/     B52 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  126/     B56 :                     ; 		move.l	#$56255769,d0		; Set these random values
(1)  127/     B56 :                     ; 		move.l	#$95116102,d1
(1)  128/     B56 :                     ; 		move.l	d0,(RAM_SysRandVal).l
(1)  129/     B56 :                     ; 		move.l	d1,(RAM_SysRandSeed).l
(1)  130/     B56 : 46DF                		move.w	(sp)+,sr
(1)  131/     B58 : 4E75                		rts
(1)  132/     B5A :                     
(1)  133/     B5A :                     ; --------------------------------------------------------
(1)  134/     B5A :                     ; System_WaitFrame
(1)  135/     B5A :                     ;
(1)  136/     B5A :                     ; Call this on the loop your current screen.
(1)  137/     B5A :                     ;
(1)  138/     B5A :                     ; Calling this it will:
(1)  139/     B5A :                     ; - Update the controller data
(1)  140/     B5A :                     ; - Transfer the Genesis palette, sprites and scroll
(1)  141/     B5A :                     ;   data from from RAM to VDP, RV bit is not required.
(1)  142/     B5A :                     ;
(1)  143/     B5A :                     ; But before entering VBlank:
(1)  144/     B5A :                     ; - The DREQ data stored here will be transfered
(1)  145/     B5A :                     ; to the 32X side
(1)  146/     B5A :                     ; --------------------------------------------------------
(1)  147/     B5A :                     
(1)  148/     B5A :                     System_WaitFrame:
(1)  149/     B5A : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Inside VBlank?
(1)  150/     B60 : 3816                .wait_lag:	move.w	(a6),d4			; then it's a lag frame.
(1)  151/     B62 : 0804 0003           		btst	#bitVBlk,d4
(1)  152/     B66 : 66F8                		bne.s	.wait_lag
(1)  153/     B68 : 6100 00B8           		bsr	System_MarsUpdate	; Update 32X stuff
(1)  154/     B6C : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6		; Check if we are on DISPLAY
(1)  155/     B72 : 3816                .wait_in:	move.w	(a6),d4
(1)  156/     B74 : 0804 0003           		btst	#bitVBlk,d4
(1)  157/     B78 : 67F8                		beq.s	.wait_in
(1)  158/     B7A : 6100 00AA           		bsr	System_Input		; Read inputs FIRST
(1)  159/     B7E :                     	; *** DMA'd Scroll and Palette
(1)  160/     B7E :                     	;
(1)  161/     B7E :                     	; The palette is transferred at the end so
(1)  162/     B7E :                     	; it doesn't show the dots on screen. (hopefully)
(1)  163/     B7E : 4DF9 00C0 0004      		lea	(vdp_ctrl),a6
(1)  164/     B84 : 3E3C 8100           		move.w	#$8100,d7		; DMA ON
(1)  165/     B88 : 1E38 99AF           		move.b	(RAM_VdpRegs+1),d7
(1)  166/     B8C : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  167/     B90 : 3C87                		move.w	d7,(a6)
(1)  168/     B92 : 617E                		bsr	System_DmaEnter_RAM
(1)  169/     B94 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  170/     B9A : 2CBC 96C5 9582      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  171/     BA0 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  172/     BA4 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  173/     BA8 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  174/     BAC : 3C9F                		move.w	(sp)+,(a6)
(1)  175/     BAE : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)
(1)  176/     BB4 : 2CBC 96C3 95A2      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  177/     BBA : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  178/     BBE : 3CBC 7C00           		move.w	#$7C00,(a6)
(1)  179/     BC2 : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  180/     BC6 : 3C9F                		move.w	(sp)+,(a6)
(1)  181/     BC8 : 2CBC 9401 93C0      		move.l	#$940193C0,(a6)
(1)  182/     BCE : 2CBC 96C7 95EA      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  183/     BD4 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  184/     BD8 : 3CBC 7800           		move.w	#$7800,(a6)
(1)  185/     BDC : 3F3C 0083           		move.w	#$0003|$80,-(sp)
(1)  186/     BE0 : 3C9F                		move.w	(sp)+,(a6)
(1)  187/     BE2 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  188/     BE8 : 2CBC 96CA 951A      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  189/     BEE : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  190/     BF2 : 3CBC C000           		move.w	#$C000,(a6)
(1)  191/     BF6 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  192/     BFA : 3C9F                		move.w	(sp)+,(a6)
(1)  193/     BFC : 6118                		bsr	System_DmaExit_RAM
(1)  194/     BFE : 3E3C 8100           		move.w	#$8100,d7
(1)  195/     C02 : 1E38 99AF           		move.b	(RAM_VdpRegs+1).w,d7
(1)  196/     C06 : 3C87                		move.w	d7,(a6)
(1)  197/     C08 : 06B8 0000 0001 8740 		add.l	#1,(RAM_Framecount).w
(1)  198/     C10 : 4E75                		rts
(1)  199/     C12 :                     
(1)  200/     C12 :                     ; --------------------------------------------------------
(1)  201/     C12 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  202/     C12 :                     ; (from): ROM or RAM
(1)  203/     C12 :                     ;
(1)  204/     C12 :                     ; Call to these labels BEFORE and AFTER doing
(1)  205/     C12 :                     ; DMA-to-VDP transers.
(1)  206/     C12 :                     ; These calls are not needed for FILL or COPY.
(1)  207/     C12 :                     ;
(1)  208/     C12 :                     ; ** For stock Genesis:
(1)  209/     C12 :                     ;  | The Z80 cannot read from ROM while the
(1)  210/     C12 :                     ;  | DMA ROM-to-VDP transfer is active.
(1)  211/     C12 :                     ;  | THIS INCLUDES RAM TRANSFERS.
(1)  212/     C12 :                     ;  | ** Solution:
(1)  213/     C12 :                     ;  | STOP the Z80 entirely OR:
(1)  214/     C12 :                     ;  | First stop, set a flag and turn ON the
(1)  215/     C12 :                     ;  | Z80 again, if the Z80 reads the flag it
(1)  216/     C12 :                     ;  | should be stuck on a loop until you clear
(1)  217/     C12 :                     ;  | that flag from here after finishing your
(1)  218/     C12 :                     ;  | DMA transfer(s)
(1)  219/     C12 :                     ;
(1)  220/     C12 :                     ; ** For the 32X:
(1)  221/     C12 :                     ;  | SAME rule for the Genesis, but this time the
(1)  222/     C12 :                     ;  | ROM-to-VDP transfer requires the RV bit to be set.
(1)  223/     C12 :                     ;  | (RAM transfers doesn't require this bit at all.)
(1)  224/     C12 :                     ;  | Setting the RV bit blocks the SH2 from accessing
(1)  225/     C12 :                     ;  | the ROM area, THIS ALSO affects the Z80.
(1)  226/     C12 :                     ;  | ** Solution:
(1)  227/     C12 :                     ;  | First, make sure the SH2 isn't reading from ROM
(1)  228/     C12 :                     ;  | while the bit is active, or it will read garbage
(1)  229/     C12 :                     ;  | data.
(1)  230/     C12 :                     ;  | In the case where you need to read from ROM
(1)  231/     C12 :                     ;  | a lot (Playing PWM's for example):
(1)  232/     C12 :                     ;  | First request an CMD interrupt and tell the
(1)  233/     C12 :                     ;  | SH2 to backup a small amount of sample data
(1)  234/     C12 :                     ;  | and temporally relocate the read point to the
(1)  235/     C12 :                     ;  | backup until you make another
(1)  236/     C12 :                     ;  | interrupt telling that you finished here and set
(1)  237/     C12 :                     ;  | RV back to 0.
(1)  238/     C12 :                     ;
(1)  239/     C12 :                     ; This is where you put your Sound driver's Z80 stop
(1)  240/     C12 :                     ; or pause calls go here
(1)  241/     C12 :                     ; --------------------------------------------------------
(1)  242/     C12 :                     
(1)  243/     C12 :                     System_DmaEnter_RAM:
(1)  244/     C12 : 6000 F6E8           		bra	gemaDmaPause
(1)  245/     C16 :                     System_DmaExit_RAM:
(1)  246/     C16 : 6000 F6E6           		bra	gemaDmaResume
(1)  247/     C1A :                     
(1)  248/     C1A :                     ; --------------------------------------------------------
(1)  249/     C1A :                     
(1)  250/     C1A :                     System_DmaEnter_ROM:
(1)  251/     C1A : 6000 F6E4           		bra	gemaDmaPauseRom
(1)  252/     C1E :                     System_DmaExit_ROM:
(1)  253/     C1E : 6000 F6E2           		bra	gemaDmaResumeRom
(1)  254/     C22 :                     
(1)  255/     C22 :                     ; ====================================================================
(1)  256/     C22 :                     ; ----------------------------------------------------------------
(1)  257/     C22 :                     ; SEGA CD / CD+32X ONLY
(1)  258/     C22 :                     ;
(1)  259/     C22 :                     ; a6 - Communication ports RW/RO
(1)  260/     C22 :                     ; ----------------------------------------------------------------
(1)  261/     C22 :                     
(1)  275/     C22 :                     
(1)  276/     C22 :                     ; ====================================================================
(1)  277/     C22 :                     ; ----------------------------------------------------------------
(1)  278/     C22 :                     ; 32X ONLY
(1)  279/     C22 :                     ; ----------------------------------------------------------------
(1)  280/     C22 :                     
(1)  281/     C22 :                     ; --------------------------------------------------------
(1)  282/     C22 :                     ; System_MarsUpdate
(1)  283/     C22 :                     ; --------------------------------------------------------
(1)  284/     C22 :                     
(1)  285/     C22 :                     System_MarsUpdate:
(1)  291/     C22 : 4E75                		rts
(1)  293/     C24 :                     
(1)  294/     C24 :                     ; --------------------------------------------------------
(1)  295/     C24 :                     ; System_GrabRamCode
(1)  296/     C24 :                     ;
(1)  297/     C24 :                     ; MCD, 32X and CD32X only.
(1)  298/     C24 :                     ;
(1)  299/     C24 :                     ; Send new code to the USER side of RAM and
(1)  300/     C24 :                     ; jump into it.
(1)  301/     C24 :                     ;
(1)  302/     C24 :                     ; ** FOR SEGA CD/CD+32X
(1)  303/     C24 :                     ; Input:
(1)  304/     C24 :                     ; a0 -
(1)  305/     C24 :                     ;
(1)  306/     C24 :                     ; ** FOR SEGA 32X
(1)  307/     C24 :                     ; a0 - Filename string 8-bytes
(1)  308/     C24 :                     ;
(1)  309/     C24 :                     ; Input:
(1)  310/     C24 :                     ; d0 - Location of the RAM code to copy
(1)  311/     C24 :                     ;      in the $880000/$900000 areas
(1)  312/     C24 :                     ; --------------------------------------------------------
(1)  313/     C24 :                     
(1)  314/     C24 :                     System_GrabRamCode:
(1)  380/     C24 : 4E75                		rts
(1)  382/     C26 :                     
(1)  383/     C26 :                     ; ====================================================================
(1)  384/     C26 :                     ; ----------------------------------------------------------------
(1)  385/     C26 :                     ; Subroutines
(1)  386/     C26 :                     ; ----------------------------------------------------------------
(1)  387/     C26 :                     
(1)  388/     C26 :                     ; --------------------------------------------------------
(1)  389/     C26 :                     ; System_Input
(1)  390/     C26 :                     ;
(1)  391/     C26 :                     ; Reads data from the Controller ports
(1)  392/     C26 :                     ; *** CALL THIS ON VBLANK ONLY ***
(1)  393/     C26 :                     ;
(1)  394/     C26 :                     ; Uses:
(1)  395/     C26 :                     ; d5-d7,a5-a6
(1)  396/     C26 :                     ; --------------------------------------------------------
(1)  397/     C26 :                     
(1)  398/     C26 :                     System_Input:
(1)  399/     C26 :                     ; 		move.w	#$0100,(z80_bus).l
(1)  400/     C26 :                     .wait:
(1)  401/     C26 :                     ; 		btst	#0,(z80_bus).l
(1)  402/     C26 :                     ; 		bne.s	.wait
(1)  403/     C26 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  404/     C2C : 4DF8 A000           		lea	(RAM_InputData),a6	; a6 - Output
(1)  405/     C30 : 6108                		bsr.s	.this_one
(1)  406/     C32 : DAFC 0002           		adda	#2,a5
(1)  407/     C36 : DCFC 0010           		adda	#sizeof_input,a6
(1)  408/     C3A :                     ; 		bsr.s	.this_one
(1)  409/     C3A :                     ; ; 		move.w	#0,(z80_bus).l
(1)  410/     C3A :                     ; 		rts
(1)  411/     C3A :                     
(1)  412/     C3A :                     ; --------------------------------------------------------
(1)  413/     C3A :                     ; Read port
(1)  414/     C3A :                     ;
(1)  415/     C3A :                     ; a5 - Current port
(1)  416/     C3A :                     ; a6 - Output data
(1)  417/     C3A :                     ; --------------------------------------------------------
(1)  418/     C3A :                     
(1)  419/     C3A :                     .this_one:
(1)  420/     C3A : 6100 0166           		bsr	.pick_id
(1)  421/     C3E : 1C87                		move.b	d7,pad_id(a6)
(1)  422/     C40 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  423/     C44 : 670E                		beq.s	.exit
(1)  424/     C46 : 0247 000F           		andi.w	#$0F,d7
(1)  425/     C4A : DE47                		add.w	d7,d7
(1)  426/     C4C : 3C3B 700C           		move.w	.list(pc,d7.w),d6
(1)  427/     C50 : 4EFB 6008           		jmp	.list(pc,d6.w)
(1)  428/     C54 :                     .exit:
(1)  429/     C54 : 422E 0001           		clr.b	pad_ver(a6)
(1)  430/     C58 : 4E75                		rts
(1)  431/     C5A :                     
(1)  432/     C5A :                     ; --------------------------------------------------------
(1)  433/     C5A :                     ; Grab ID
(1)  434/     C5A :                     ; --------------------------------------------------------
(1)  435/     C5A :                     
(1)  436/     C5A :                     .list:
(1)  437/     C5A : FFFA                		dc.w .exit-.list	; $00
(1)  438/     C5C : FFFA                		dc.w .exit-.list
(1)  439/     C5E : FFFA                		dc.w .exit-.list
(1)  440/     C60 : 0020                		dc.w .id_03-.list	; $03 - Mega mouse
(1)  441/     C62 : FFFA                		dc.w .exit-.list	; $04
(1)  442/     C64 : FFFA                		dc.w .exit-.list
(1)  443/     C66 : FFFA                		dc.w .exit-.list
(1)  444/     C68 : FFFA                		dc.w .exit-.list
(1)  445/     C6A : FFFA                		dc.w .exit-.list	; $08
(1)  446/     C6C : FFFA                		dc.w .exit-.list
(1)  447/     C6E : FFFA                		dc.w .exit-.list
(1)  448/     C70 : FFFA                		dc.w .exit-.list
(1)  449/     C72 : FFFA                		dc.w .exit-.list	; $0C
(1)  450/     C74 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  451/     C76 : FFFA                		dc.w .exit-.list
(1)  452/     C78 : FFFA                		dc.w .exit-.list	; $0F - No controller OR Master System controller (2 Buttons: 1(B),2(C))
(1)  453/     C7A :                     
(1)  454/     C7A :                     ; --------------------------------------------------------
(1)  455/     C7A :                     ; ID $03
(1)  456/     C7A :                     ;
(1)  457/     C7A :                     ; Mega Mouse
(1)  458/     C7A :                     ; --------------------------------------------------------
(1)  459/     C7A :                     
(1)  460/     C7A :                     ; *** NOT TESTED ON HARDWARE ***
(1)  461/     C7A :                     .id_03:
(1)  462/     C7A : 1ABC 0020           		move.b	#$20,(a5)
(1)  463/     C7E : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  464/     C84 : 0815 0004           		btst	#4,(a5)
(1)  465/     C88 : 6700 0094           		beq.w	.invalid
(1)  466/     C8C : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  467/     C90 : 4E71                		nop
(1)  468/     C92 : 4E71                		nop
(1)  469/     C94 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  470/     C98 : 4E71                		nop
(1)  471/     C9A : 4E71                		nop
(1)  472/     C9C : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  473/     CA0 : 4E71                		nop
(1)  474/     CA2 : 4E71                		nop
(1)  475/     CA4 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  476/     CA6 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  477/     CAA : 4E71                		nop
(1)  478/     CAC : 4E71                		nop
(1)  479/     CAE : 1E15                		move.b	(a5),d7
(1)  480/     CB0 : 0247 000F            		andi.w	#%1111,d7
(1)  481/     CB4 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  482/     CB8 : BF46                		eor.w	d7,d6
(1)  483/     CBA : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  484/     CBE : CC47                		and.w	d7,d6
(1)  485/     CC0 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  486/     CC4 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  487/     CC8 : 4E71                		nop
(1)  488/     CCA : 4E71                		nop
(1)  489/     CCC : 1E15                		move.b	(a5),d7
(1)  490/     CCE : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  491/     CD2 : 0247 000F           		andi.w	#%1111,d7
(1)  492/     CD6 : E94F                		lsl.w	#4,d7
(1)  493/     CD8 : 4E71                		nop
(1)  494/     CDA : 1C15                		move.b	(a5),d6
(1)  495/     CDC : 0246 000F           		andi.w	#%1111,d6
(1)  496/     CE0 : 8E46                		or.w	d6,d7
(1)  497/     CE2 : 0805 0000           		btst    #0,d5
(1)  498/     CE6 : 6704                		beq.s	.x_neg
(1)  499/     CE8 : 4407                		neg.b	d7
(1)  500/     CEA : 4447                		neg.w	d7
(1)  501/     CEC :                     .x_neg:
(1)  502/     CEC : 3D47 0006           		move.w	d7,mouse_x(a6)
(1)  503/     CF0 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  504/     CF4 : 4E71                		nop
(1)  505/     CF6 : 4E71                		nop
(1)  506/     CF8 : 1E15                		move.b	(a5),d7
(1)  507/     CFA : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  508/     CFE : 0247 000F           		andi.w	#%1111,d7
(1)  509/     D02 : E94F                		lsl.w	#4,d7
(1)  510/     D04 : 4E71                		nop
(1)  511/     D06 : 1C15                		move.b	(a5),d6
(1)  512/     D08 : 0246 000F           		andi.w	#%1111,d6
(1)  513/     D0C : 8E46                		or.w	d6,d7
(1)  514/     D0E : 0805 0001           		btst    #1,d5
(1)  515/     D12 : 6704                		beq.s	.y_neg
(1)  516/     D14 : 4407                		neg.b	d7
(1)  517/     D16 : 4447                		neg.w	d7
(1)  518/     D18 :                     .y_neg:
(1)  519/     D18 : 4447                		neg.w	d7		; Reverse Y
(1)  520/     D1A : 3D47 0008           		move.w	d7,mouse_y(a6)
(1)  521/     D1E :                     
(1)  522/     D1E :                     .invalid:
(1)  523/     D1E : 1ABC 0060           		move.b	#$60,(a5)
(1)  524/     D22 : 4E75                		rts
(1)  525/     D24 :                     
(1)  526/     D24 :                     ; --------------------------------------------------------
(1)  527/     D24 :                     ; ID $0D
(1)  528/     D24 :                     ;
(1)  529/     D24 :                     ; Normal controller: 3 button or 6 button.
(1)  530/     D24 :                     ; --------------------------------------------------------
(1)  531/     D24 :                     
(1)  532/     D24 :                     .id_0D:
(1)  533/     D24 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  534/     D28 : 4E71                		nop
(1)  535/     D2A : 4E71                		nop
(1)  536/     D2C : 1A15                		move.b	(a5),d5
(1)  537/     D2E : 0245 003F           		andi.w	#%00111111,d5
(1)  538/     D32 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  539/     D36 : 4E71                		nop
(1)  540/     D38 : 4E71                		nop
(1)  541/     D3A : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  542/     D3C : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  543/     D3E : 0247 00C0           		andi.w	#%11000000,d7
(1)  544/     D42 : 8E45                		or.w	d5,d7
(1)  545/     D44 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  546/     D48 : 4647                		not.w	d7
(1)  547/     D4A : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  548/     D4E : BF05                		eor.b	d7,d5
(1)  549/     D50 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  550/     D54 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  551/     D58 : CA07                		and.b	d7,d5
(1)  552/     D5A : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  553/     D5E : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  554/     D62 : 4E71                		nop
(1)  555/     D64 : 4E71                		nop
(1)  556/     D66 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  557/     D68 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  558/     D6C : 4E71                  		nop
(1)  559/     D6E : 4E71                  		nop
(1)  560/     D70 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  561/     D72 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  562/     D76 : 4E71                 		nop
(1)  563/     D78 : 4E71                 		nop
(1)  564/     D7A : 0246 000F           		andi.w	#$F,d6
(1)  565/     D7E : E44E                		lsr.w	#2,d6
(1)  566/     D80 : 0246 0001           		andi.w	#1,d6
(1)  567/     D84 : 6716                		beq.s	.oldpad
(1)  568/     D86 : 4607                		not.b	d7
(1)  569/     D88 : 0247 000F            		andi.w	#%1111,d7
(1)  570/     D8C : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  571/     D90 : BF05                		eor.b	d7,d5
(1)  572/     D92 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  573/     D96 : CA07                		and.b	d7,d5
(1)  574/     D98 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  575/     D9C :                     .oldpad:
(1)  576/     D9C : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  577/     DA0 : 4E75                		rts
(1)  578/     DA2 :                     
(1)  579/     DA2 :                     ; --------------------------------------------------------
(1)  580/     DA2 :                     ; Grab ID
(1)  581/     DA2 :                     ; --------------------------------------------------------
(1)  582/     DA2 :                     
(1)  583/     DA2 :                     .pick_id:
(1)  584/     DA2 : 7E00                		moveq	#0,d7
(1)  585/     DA4 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  586/     DA8 : 4E71                		nop
(1)  587/     DAA : 4E71                		nop
(1)  588/     DAC : 610A                		bsr	.read
(1)  589/     DAE : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  590/     DB2 : 4E71                		nop
(1)  591/     DB4 : 4E71                		nop
(1)  592/     DB6 : DE47                		add.w	d7,d7
(1)  593/     DB8 :                     .read:
(1)  594/     DB8 : 1A15                		move.b	(a5),d5
(1)  595/     DBA : 1C05                		move.b	d5,d6
(1)  596/     DBC : 0206 000C           		andi.b	#$C,d6
(1)  597/     DC0 : 6702                		beq.s	.step_1
(1)  598/     DC2 : 5247                		addq.w	#1,d7
(1)  599/     DC4 :                     .step_1:
(1)  600/     DC4 : DE47                		add.w	d7,d7
(1)  601/     DC6 : 1C05                		move.b	d5,d6
(1)  602/     DC8 : 0246 0003           		andi.w	#3,d6
(1)  603/     DCC : 6702                		beq.s	.step_2
(1)  604/     DCE : 5247                		addq.w	#1,d7
(1)  605/     DD0 :                     .step_2:
(1)  606/     DD0 : 4E75                		rts
(1)  607/     DD2 :                     
(1)  608/     DD2 :                     ; --------------------------------------------------------
(1)  609/     DD2 :                     ; System_Random
(1)  610/     DD2 :                     ; 
(1)  611/     DD2 :                     ; Makes a random number.
(1)  612/     DD2 :                     ; 
(1)  613/     DD2 :                     ; Input:
(1)  614/     DD2 :                     ; d0 | Seed
(1)  615/     DD2 :                     ;
(1)  616/     DD2 :                     ; Output:
(1)  617/     DD2 :                     ; d0 | LONG
(1)  618/     DD2 :                     ;
(1)  619/     DD2 :                     ; Uses:
(1)  620/     DD2 :                     ; d4-d5
(1)  621/     DD2 :                     ; --------------------------------------------------------
(1)  622/     DD2 :                     
(1)  623/     DD2 :                     System_Random:
(1)  624/     DD2 : 2F04                		move.l	d4,-(sp)
(1)  625/     DD4 : 2838 A444           		move.l	(RAM_SysRandSeed).w,d4
(1)  626/     DD8 : 6606                		bne.s	.good_s
(1)  627/     DDA : 283C 23B5 1947      		move.l	#$23B51947,d4
(1)  628/     DE0 :                     .good_s:
(1)  629/     DE0 : 2004                		move.l	d4,d0
(1)  630/     DE2 : EB9C                		rol.l	#5,d4
(1)  631/     DE4 : D880                		add.l	d0,d4
(1)  632/     DE6 : E644                		asr.w	#3,d4
(1)  633/     DE8 : D880                		add.l	d0,d4
(1)  634/     DEA : 3004                		move.w	d4,d0
(1)  635/     DEC : 4844                		swap	d4
(1)  636/     DEE : D044                		add.w	d4,d0
(1)  637/     DF0 : 3800                		move.w	d0,d4
(1)  638/     DF2 : 4844                		swap	d4
(1)  639/     DF4 : 21C4 A444           		move.l	d4,(RAM_SysRandSeed).w
(1)  640/     DF8 : 281F                		move.l	(sp)+,d4
(1)  641/     DFA : 4E75                		rts
(1)  642/     DFC :                     
(1)  643/     DFC :                     ; --------------------------------------------------------
(1)  644/     DFC :                     ; System_SineWave_Cos / System_SineWave
(1)  645/     DFC :                     ;
(1)  646/     DFC :                     ; Get sinewave value
(1)  647/     DFC :                     ;
(1)  648/     DFC :                     ; Input:
(1)  649/     DFC :                     ; d0 | WORD - Tan
(1)  650/     DFC :                     ; d1 | WORD - Multiply
(1)  651/     DFC :                     ;
(1)  652/     DFC :                     ; Output:
(1)  653/     DFC :                     ; d2 | LONG - Result (as 0000.0000)
(1)  654/     DFC :                     ; --------------------------------------------------------
(1)  655/     DFC :                     
(1)  656/     DFC :                     ; TODO: improve this.
(1)  657/     DFC :                     System_SineWave_Cos:
(1)  658/     DFC : 48A7 8000           		movem.w	d0,-(sp)
(1)  659/     E00 : 7400                		moveq	#0,d2
(1)  660/     E02 : 0600 0040           		addi.b	#$40,d0
(1)  661/     E06 : 1400                		move.b	d0,d2
(1)  662/     E08 : E302                		asl.b	#1,d2
(1)  663/     E0A : 343B 202E           		move.w	MdSys_SineData(pc,d2.w),d2
(1)  664/     E0E : C4C1                		mulu.w	d1,d2
(1)  665/     E10 : 8000                		or.b	d0,d0
(1)  666/     E12 : 6A02                		bpl.s	.dont_neg
(1)  667/     E14 : 4482                		neg.l	d2
(1)  668/     E16 :                     .dont_neg:
(1)  669/     E16 : 4C9F 0001           		movem.w	(sp)+,d0
(1)  670/     E1A : 4E75                		rts
(1)  671/     E1C :                     
(1)  672/     E1C :                     System_SineWave:
(1)  673/     E1C : 48A7 8000           		movem.w	d0,-(sp)
(1)  674/     E20 : 0240 007F           		andi.w	#$7F,d0
(1)  675/     E24 : E340                		asl.w	#1,d0
(1)  676/     E26 : 343B 0012           		move.w	MdSys_SineData(pc,d0.w),d2
(1)  677/     E2A : C4C1                		mulu.w	d1,d2
(1)  678/     E2C : 4C9F 0001           		movem.w	(sp)+,d0
(1)  679/     E30 : 5182                		subq.l	#8,d2
(1)  680/     E32 : 8000                		or.b	d0,d0
(1)  681/     E34 : 6A02                		bpl.s	.dont_neg
(1)  682/     E36 : 4482                		neg.l	d2
(1)  683/     E38 :                     .dont_neg:
(1)  684/     E38 : 4E75                		rts
(1)  685/     E3A :                     
(1)  686/     E3A : 0000 0006 000D 0013 MdSys_SineData:	dc.w 0,	6, $D, $13, $19, $1F, $26, $2C,	$32, $38, $3E
                    0019 001F 0026 002C 
                    0032 0038 003E      
(1)  687/     E50 : 0044 004A 0050 0056 		dc.w $44, $4A, $50, $56, $5C, $62, $68,	$6D, $73, $79
                    005C 0062 0068 006D 
                    0073 0079           
(1)  688/     E64 : 007E 0084 0089 008E 		dc.w $7E, $84, $89, $8E, $93, $98, $9D,	$A2, $A7, $AC
                    0093 0098 009D 00A2 
                    00A7 00AC           
(1)  689/     E78 : 00B1 00B5 00B9 00BE 		dc.w $B1, $B5, $B9, $BE, $C2, $C6, $CA,	$CE, $D1, $D5
                    00C2 00C6 00CA 00CE 
                    00D1 00D5           
(1)  690/     E8C : 00D8 00DC 00DF 00E2 		dc.w $D8, $DC, $DF, $E2, $E5, $E7, $EA,	$ED, $EF, $F1
                    00E5 00E7 00EA 00ED 
                    00EF 00F1           
(1)  691/     EA0 : 00F3 00F5 00F7 00F8 		dc.w $F3, $F5, $F7, $F8, $FA, $FB, $FC,	$FD, $FE, $FF
                    00FA 00FB 00FC 00FD 
                    00FE 00FF           
(1)  692/     EB4 : 00FF 0100 0100 0100 		dc.w $FF, $100,	$100, $100, $100, $100,	$FF, $FF, $FE
                    0100 0100 00FF 00FF 
                    00FE                
(1)  693/     EC6 : 00FD 00FC 00FB 00FA 		dc.w $FD, $FC, $FB, $FA, $F8, $F7, $F5,	$F3, $F1, $EF
                    00F8 00F7 00F5 00F3 
                    00F1 00EF           
(1)  694/     EDA : 00ED 00EA 00E7 00E5 		dc.w $ED, $EA, $E7, $E5, $E2, $DF, $DC,	$D8, $D5, $D1
                    00E2 00DF 00DC 00D8 
                    00D5 00D1           
(1)  695/     EEE : 00CE 00CA 00C6 00C2 		dc.w $CE, $CA, $C6, $C2, $BE, $B9, $B5,	$B1, $AC, $A7
                    00BE 00B9 00B5 00B1 
                    00AC 00A7           
(1)  696/     F02 : 00A2 009D 0098 0093 		dc.w $A2, $9D, $98, $93, $8E, $89, $84,	$7E, $79, $73
                    008E 0089 0084 007E 
                    0079 0073           
(1)  697/     F16 : 006D 0068 0062 005C 		dc.w $6D, $68, $62, $5C, $56, $50, $4A,	$44, $3E, $38
                    0056 0050 004A 0044 
                    003E 0038           
(1)  698/     F2A : 0032 002C 0026 001F 		dc.w $32, $2C, $26, $1F, $19, $13, $D, 6
                    0019 0013 000D 0006 
(1)  699/     F3A :                     
(1)  700/     F3A :                     ; --------------------------------------------------------
(1)  701/     F3A :                     ; System_SetInts
(1)  702/     F3A :                     ;
(1)  703/     F3A :                     ; Set new interrputs
(1)  704/     F3A :                     ;
(1)  705/     F3A :                     ; d0 | LONG - VBlank
(1)  706/     F3A :                     ; d1 | LONG - HBlank
(1)  707/     F3A :                     ;
(1)  708/     F3A :                     ; Uses:
(1)  709/     F3A :                     ; d4
(1)  710/     F3A :                     ;
(1)  711/     F3A :                     ; Notes:
(1)  712/     F3A :                     ; Writing 0 or a negative number will skip change
(1)  713/     F3A :                     ; to the interrupt pointer
(1)  714/     F3A :                     ; --------------------------------------------------------
(1)  715/     F3A :                     
(1)  716/     F3A :                     System_SetInts:
(1)  717/     F3A : 2800                		move.l	d0,d4
(1)  718/     F3C : 670C                		beq.s	.novint
(1)  719/     F3E : 6B0A                		bmi.s	.novint
(1)  720/     F40 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  721/     F46 : 21C4 A44E            		move.l	d4,(RAM_MdMarsVInt+2).w
(1)  722/     F4A :                     .novint:
(1)  723/     F4A : 2801                		move.l	d1,d4
(1)  724/     F4C : 670C                		beq.s	.nohint
(1)  725/     F4E : 6B0A                		bmi.s	.nohint
(1)  726/     F50 : 88BC 0088 0000      		or.l	#$880000,d4
(1)  727/     F56 : 21C4 A454           		move.l	d4,(RAM_MdMarsHInt+2).w
(1)  728/     F5A :                     .nohint:
(1)  729/     F5A : 4E75                		rts
(1)  730/     F5C :                     
(1)  731/     F5C :                     ; --------------------------------------------------------
(1)  732/     F5C :                     ; System_SramInit
(1)  733/     F5C :                     ; 
(1)  734/     F5C :                     ; Init save data
(1)  735/     F5C :                     ; 
(1)  736/     F5C :                     ; Uses:
(1)  737/     F5C :                     ; a4,d4-d5
(1)  738/     F5C :                     ; --------------------------------------------------------
(1)  739/     F5C :                     
(1)  740/     F5C :                     ; TODO: Check if RV bit is needed here...
(1)  741/     F5C :                     System_SramInit:
(1)  742/     F5C : 13FC 0001 00A1 30F1 		move.b	#1,(md_bank_sram).l
(1)  743/     F64 : 49F9 0020 0001      		lea	($200001).l,a4
(1)  744/     F6A : 7800                		moveq	#0,d4
(1)  745/     F6C : 3A3C 1FFF           		move.w	#($4000/2)-1,d5
(1)  746/     F70 :                     .initsave:
(1)  747/     F70 : 1884                		move.b	d4,(a4)
(1)  748/     F72 : D8FC 0002           		adda	#2,a4
(1)  749/     F76 : 51CD FFF8           		dbf	d5,.initsave
(1)  750/     F7A : 13FC 0000 00A1 30F1 		move.b	#0,(md_bank_sram).l
(1)  751/     F82 : 4E75                		rts
(1)  752/     F84 :                     
(1)  753/     F84 :                     ; ====================================================================
(1)  754/     F84 :                     ; ----------------------------------------------------------------
(1)  755/     F84 :                     ; Screen mode subroutines
(1)  756/     F84 :                     ; ----------------------------------------------------------------
(1)  757/     F84 :                     
(1)  758/     F84 :                     ; --------------------------------------------------------
(1)  759/     F84 :                     ; Initialize current screen mode
(1)  760/     F84 :                     ; --------------------------------------------------------
(1)  761/     F84 :                     
(1)  762/     F84 :                     Mode_Init:
(1)  763/     F84 : 4EB9 0000 03E8      		jsr	(Video_Clear).l
(1)  764/     F8A : 49F8 CD00           		lea	(RAM_ScreenBuff),a4
(1)  765/     F8E : 3A3C 13FF           		move.w	#(MAX_ScrnBuff/2)-1,d5
(1)  766/     F92 : 7800                		moveq	#0,d4
(1)  767/     F94 :                     .clr:
(1)  768/     F94 : 38C4                		move.w	d4,(a4)+
(1)  769/     F96 : 51CD FFFC           		dbf	d5,.clr
(1)  770/     F9A :                     
(1)  771/     F9A :                     ; 	if MARS|MARSCD
(1)  772/     F9A :                     ; 		lea	(RAM_MdDreq+Dreq_Objects),a4	; Patch
(1)  773/     F9A :                     ; 		move.w	#MAX_MODELS-1,d5
(1)  774/     F9A :                     ; .clr_mdls:
(1)  775/     F9A :                     ; 		move.l	d4,mdl_data(a4)
(1)  776/     F9A :                     ; 		adda	#sizeof_mdlobj,a4
(1)  777/     F9A :                     ; 		dbf	d5,.clr_mdls
(1)  778/     F9A :                     ; 	endif
(1)  779/     F9A :                     
(1)  780/     F9A : 303C 0000           		move.w	#0,d0
(1)  781/     F9E : 6000 FB7C           		bra	Video_Mars_GfxMode
(1)  782/     FA2 :                     
(1)  783/     FA2 :                     ; --------------------------------------------------------
(1)  784/     FA2 :                     
(1)  785/     FA2 :                     Mode_FadeOut:
(1)  786/     FA2 : 31FC 0002 999E      		move.w	#2,(RAM_FadeMdReq).w
(1)  787/     FA8 : 31FC 0002 99A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  788/     FAE : 31FC 0001 99A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  789/     FB4 : 31FC 0004 99A8      		move.w	#4,(RAM_FadeMarsIncr).w
(1)  790/     FBA : 31FC 0000 99A2      		move.w	#0,(RAM_FadeMdDelay).w
(1)  791/     FC0 : 31FC 0000 99AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  792/     FC6 :                     .loopw:
(1)  793/     FC6 : 6100 FB92           		bsr	System_WaitFrame
(1)  794/     FCA : 4EB9 0000 0726      		jsr	(Video_RunFade).l
(1)  795/     FD0 : 66F4                		bne.s	.loopw
(1)  796/     FD2 : 4E75                		rts
(1)  797/     FD4 :                     
(1)  798/     FD4 :                     ; ====================================================================
(1)  799/     FD4 :                     ; ----------------------------------------------------------------
(1)  800/     FD4 :                     ; Default interrupts
(1)  801/     FD4 :                     ; ----------------------------------------------------------------
(1)  802/     FD4 :                     
(1)  803/     FD4 :                     ; --------------------------------------------------------
(1)  804/     FD4 :                     ; VBlank
(1)  805/     FD4 :                     ; --------------------------------------------------------
(1)  806/     FD4 :                     
(1)  807/     FD4 :                     VInt_Default:
(1)  808/     FD4 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
(1)  809/     FD8 : 6100 FC4C           		bsr	System_Input
(1)  810/     FDC : 06B8 0000 0001 8740 		addi.l	#1,(RAM_FrameCount).w
(1)  811/     FE4 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6		
(1)  812/     FE8 : 4E73                		rte
(1)  813/     FEA :                     
(1)  814/     FEA :                     ; --------------------------------------------------------
(1)  815/     FEA :                     ; HBlank
(1)  816/     FEA :                     ; --------------------------------------------------------
(1)  817/     FEA :                     
(1)  818/     FEA :                     HInt_Default:
(1)  819/     FEA : 4E73                		rte
(1)  820/     FEC :                     
(1)  821/     FEC :                     ; ====================================================================
(1)  822/     FEC :                     ; ----------------------------------------------------------------
(1)  823/     FEC :                     ; System data
(1)  824/     FEC :                     ; ----------------------------------------------------------------
(1)  825/     FEC :                     
     170/     FEC :                     ; ---------------------------------------------
     176/     FEC :                     Md_SysCode_e:
     177/     FEC :                     		align 2
     178/     FEC :                     
     179/     FEC :                     ; ---------------------------------------------
     180/     FEC :                     ; JUMP code for switching screen modes
     181/     FEC :                     ; ---------------------------------------------
     182/     FEC :                     
     183/     FEC :                     Md_JumpCode:
     188/     FEC :                     
     189/     FEC :                     ; ---------------------------------------------
     190/     FEC :                     ; Read screen modes
     191/     FEC :                     ;
     192/     FEC :                     ; MD/PICO:
     193/     FEC :                     ; Direct ROM jump
     194/     FEC :                     ;
     195/     FEC :                     ; SEGA 32X:
     196/     FEC :                     ; 880000+ jump
     197/     FEC :                     ;
     198/     FEC :                     ; SEGACD/CD32X:
     199/     FEC :                     ; Read file from disc, transfer to RAM or
     200/     FEC :                     ; WordRAM and jump there.
     201/     FEC :                     ; ---------------------------------------------
     202/     FEC :                     
     203/     FEC :                     Md_ReadModes:
     204/     FEC : 7000                		moveq	#0,d0
     205/     FEE : 3038 C500           		move.w	(RAM_Glbl_Scrn).w,d0
     206/     FF2 : C07C 000F           		and.w	#%1111,d0		; <-- current limit
     216/     FF6 : E548                		lsl.w	#2,d0			; *4
     217/     FF8 : 203B 0008           		move.l	.pick_boot(pc,d0.w),d0
     218/     FFC : 2040                		move.l	d0,a0
     219/     FFE : 4E90                		jsr	(a0)
     221/    1000 : 60EA                		bra.s	Md_ReadModes		; Loop on RTS
     222/    1002 :                     
     223/    1002 :                     .pick_boot:
     224/    1002 :                     	; size $10
     236/    1002 : 0000 1012           		dc.l Md_Screen00
     237/    1006 : 0000 1012           		dc.l Md_Screen00
     238/    100A : 0000 1012           		dc.l Md_Screen00
     239/    100E : 0000 1012           		dc.l Md_Screen00
     241/    1012 :                     
     242/    1012 :                     ; ---------------------------------------------
     248/    1012 :                     Md_JumpCode_e:
     249/    1012 :                     		align 2
     250/    1012 :                     
     251/    1012 :                     ; ====================================================================
     252/    1012 :                     ; --------------------------------------------------------
     253/    1012 :                     ; DREQ routine
     254/    1012 :                     ; --------------------------------------------------------
     255/    1012 :                     
     260/    1012 :                     
     261/    1012 :                     ; ===========================================================================
     262/    1012 :                     ; ----------------------------------------------------------------
     263/    1012 :                     ; DATA, shared for ALL Cartridge and Disc
     264/    1012 :                     ; ----------------------------------------------------------------
     265/    1012 :                     
     266/    1012 :                     ; --------------------------------------------------------
     267/    1012 :                     ; SEGA CD / SEGA 32XCD ISO header
     268/    1012 :                     ; --------------------------------------------------------
     269/    1012 :                     
     281/    1012 :                     
     282/    1012 :                     ; ====================================================================
     283/    1012 :                     ; --------------------------------------------------------
     284/    1012 :                     ; Screen modes
     285/    1012 :                     ; --------------------------------------------------------
     286/    1012 :                     
     290/    1012 :                     Md_Screen00:
     294/    1012 :                     cscrn0_s:
     295/    1012 :                     		include "game/screen_0.asm"
(1)    1/    1012 :                     ; ====================================================================
(1)    2/    1012 :                     ; ----------------------------------------------------------------
(1)    3/    1012 :                     ; 2D Part
(1)    4/    1012 :                     ; ----------------------------------------------------------------
(1)    5/    1012 :                     
(1)    6/    1012 :                     ; ====================================================================
(1)    7/    1012 :                     ; ------------------------------------------------------
(1)    8/    1012 :                     ; Settings
(1)    9/    1012 :                     ; ------------------------------------------------------
(1)   10/    1012 :                     
(1)   11/    1012 : =$4                 TEST_MAINSPD	equ $04
(1)   12/    1012 :                     
(1)   13/    1012 :                     ; ====================================================================
(1)   14/    1012 :                     ; ------------------------------------------------------
(1)   15/    1012 :                     ; Structs
(1)   16/    1012 :                     ; ------------------------------------------------------
(1)   17/    1012 :                     
(1)   18/    1012 :                     ; 		struct 0
(1)   19/    1012 :                     ; strc_xpos	ds.w 1
(1)   20/    1012 :                     ; strc_ypos	ds.w 1
(1)   21/    1012 :                     ; 		endstruct
(1)   22/    1012 :                     
(1)   23/    1012 :                     ; ====================================================================
(1)   24/    1012 :                     ; ------------------------------------------------------
(1)   25/    1012 :                     ; This screen's RAM
(1)   26/    1012 :                     ; ------------------------------------------------------
(1)   27/    1012 :                     
(1)   28/    1012 : (MACRO)             		struct RAM_ScreenBuff
(1)   28/    1012 : =$1012              GLBL_LASTPC     set *
(1)   28/    1012 :                                     dephase
(1)   28/    1012 : =$1012              GLBL_LASTORG    set *
(1)   28/FFFFFFFFFFFFCD00 :                                     phase RAM_SCREENBUFF
(1)   29/FFFFFFFFFFFFCD00 :                     RAM_MapX	ds.w 1
(1)   30/FFFFFFFFFFFFCD02 :                     RAM_MapY	ds.w 1
(1)   31/FFFFFFFFFFFFCD04 : (MACRO)             		endstruct
(1)   31/FFFFFFFFFFFFCD00 :                                     !org GLBL_LASTORG
(1)   31/    1012 :                                     phase GLBL_LASTPC
(1)   32/    1012 :                     
(1)   33/    1012 :                     ; ====================================================================
(1)   34/    1012 :                     ; ------------------------------------------------------
(1)   35/    1012 :                     ; Code start
(1)   36/    1012 :                     ; ------------------------------------------------------
(1)   37/    1012 :                     
(1)   38/    1012 : 46FC 2700           		move.w	#$2700,sr
(1)   39/    1016 : 08B9 0006 FFFF 99AF 		bclr	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   40/    101E : 6100 F374           		bsr	Video_Update
(1)   41/    1022 : 6100 F508           		bsr	Video_PrintInit
(1)   42/    1026 : 6100 F3C0           		bsr	Video_Clear
(1)   43/    102A : 6100 FF58           		bsr	Mode_Init
(1)   44/    102E : 6100 F31A           		bsr	gemaStopAll
(1)   45/    1032 : 41F8 9514           		lea	(RAM_PaletteFd+$60),a0
(1)   46/    1036 : 30FC 0000           		move.w	#0,(a0)+
(1)   47/    103A : 30FC 0EEE           		move.w	#$EEE,(a0)+
(1)   48/    103E : 30FC 0CCC           		move.w	#$CCC,(a0)+
(1)   49/    1042 : 30FC 0AAA           		move.w	#$AAA,(a0)+
(1)   50/    1046 : 30FC 0888           		move.w	#$888,(a0)+
(1)   51/    104A : 30FC 0222           		move.w	#$222,(a0)+
(1)   52/    104E : 4278 94B4           		clr.w	(RAM_PaletteFd).w		; <-- quick patch
(1)   53/    1052 : 4278 9534           		clr.w	(RAM_MdMarsPalFd).w
(1)   54/    1056 :                     
(1)   55/    1056 :                     	; Test image
(1)   64/    1056 : 203C 0004 1000      		move.l	#ArtMd_TEST,d0			; Genesis VDP graphics
(1)   65/    105C : 323C 0020           		move.w	#1*$20,d1
(1)   66/    1060 : 343C 8F00           		move.w	#ArtMd_TEST_e-ArtMd_TEST,d2
(1)   67/    1064 : 6100 F9B6           		bsr	Video_LoadArt
(1)   68/    1068 : 41F9 0003 9594      		lea	(MapMd_TEST),a0
(1)   69/    106E : 203C 0001 0000      		move.l	#locate(1,0,0),d0
(1)   70/    1074 : 223C 0027 001B      		move.l	#mapsize(320,224),d1
(1)   71/    107A : 343C 0001           		move.w	#1,d2
(1)   72/    107E : 6100 F3EA           		bsr	Video_LoadMap
(1)   73/    1082 : 41F9 0003 9574      		lea	(PalMd_TEST),a0			; 16-color palette
(1)   74/    1088 : 7000                		moveq	#0,d0
(1)   75/    108A : 7210                		moveq	#16,d1
(1)   76/    108C : 6100 F6AA           		bsr	Video_FadePal
(1)   78/    1090 :                     
(1)   79/    1090 :                     	; Shared:
(1)   80/    1090 : 41FA 00B8           		lea	str_Stats(pc),a0
(1)   81/    1094 : 203C 0000 0101      		move.l	#locate(0,1,1),d0
(1)   82/    109A : 6100 F4BC           		bsr	Video_Print
(1)   83/    109E :                     ; 	Set Fade-in settings
(1)   84/    109E : 08F9 0006 FFFF 99AF 		bset	#bitDispEnbl,(RAM_VdpRegs+1).l
(1)   85/    10A6 : 11FC 0081 99BA      		move.b	#%10000001,(RAM_VdpRegs+$C).w		; H40 + shadow mode
(1)   86/    10AC : 6100 F2E6           		bsr	Video_Update
(1)   87/    10B0 : 31FC 0001 99A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)   88/    10B6 : 31FC 0002 99A8      		move.w	#2,(RAM_FadeMarsIncr).w
(1)   89/    10BC : 31FC 0001 99A2      		move.w	#1,(RAM_FadeMdDelay).w
(1)   90/    10C2 : 31FC 0000 99AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)   91/    10C8 : 31FC 0001 999E      		move.w	#1,(RAM_FadeMdReq).w
(1)   92/    10CE : 31FC 0001 99A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)   97/    10D4 :                     
(1)   98/    10D4 :                     ; ====================================================================
(1)   99/    10D4 :                     ; ------------------------------------------------------
(1)  100/    10D4 :                     ; Loop
(1)  101/    10D4 :                     ; ------------------------------------------------------
(1)  102/    10D4 :                     
(1)  103/    10D4 :                     .loop:
(1)  104/    10D4 : 6100 FA84           		bsr	System_WaitFrame
(1)  105/    10D8 : 6100 F64C           		bsr	Video_RunFade
(1)  106/    10DC :                     
(1)  107/    10DC : 41FA 0078           		lea	str_Stats2(pc),a0
(1)  108/    10E0 : 203C 0000 0103      		move.l	#locate(0,1,3),d0
(1)  109/    10E6 : 6100 F470           		bsr	Video_Print
(1)  110/    10EA :                     
(1)  111/    10EA : 06B8 0000 0001 8740 		addi.l	#1,(RAM_Framecount).w
(1)  112/    10F2 : 60E0                		bra.s	.loop
(1)  113/    10F4 :                     
(1)  114/    10F4 :                     ; ====================================================================
(1)  115/    10F4 :                     ; ----------------------------------------------
(1)  116/    10F4 :                     ; common subs
(1)  117/    10F4 :                     ; ----------------------------------------------
(1)  118/    10F4 :                     
(1)  119/    10F4 :                     .fade_in:
(1)  120/    10F4 : 31FC 0001 999E      		move.w	#1,(RAM_FadeMdReq).w
(1)  121/    10FA : 31FC 0001 99A6      		move.w	#1,(RAM_FadeMarsReq).w
(1)  122/    1100 : 31FC 0001 99A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  123/    1106 : 31FC 0001 99A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  124/    110C : 31FC 0004 99A2      		move.w	#4,(RAM_FadeMdDelay).w
(1)  125/    1112 : 31FC 0000 99AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  126/    1118 : 6024                		bra.s	.loop2
(1)  127/    111A :                     
(1)  128/    111A :                     .fade_out:
(1)  129/    111A : 31FC 0002 999E      		move.w	#2,(RAM_FadeMdReq).w
(1)  130/    1120 : 31FC 0002 99A6      		move.w	#2,(RAM_FadeMarsReq).w
(1)  131/    1126 : 31FC 0001 99A0      		move.w	#1,(RAM_FadeMdIncr).w
(1)  132/    112C : 31FC 0001 99A8      		move.w	#1,(RAM_FadeMarsIncr).w
(1)  133/    1132 : 31FC 0004 99A2      		move.w	#4,(RAM_FadeMdDelay).w
(1)  134/    1138 : 31FC 0000 99AA      		move.w	#0,(RAM_FadeMarsDelay).w
(1)  135/    113E :                     .loop2:
(1)  136/    113E : 6100 FA1A           		bsr	System_WaitFrame
(1)  137/    1142 : 6100 F5E2           		bsr	Video_RunFade
(1)  138/    1146 : 66F6                		bne.s	.loop2
(1)  139/    1148 : 4E75                		rts
(1)  140/    114A :                     
(1)  141/    114A :                     ; ====================================================================
(1)  142/    114A :                     ; ------------------------------------------------------
(1)  143/    114A :                     ; Subroutines
(1)  144/    114A :                     ; ------------------------------------------------------
(1)  145/    114A :                     
(1)  146/    114A :                     ; ====================================================================
(1)  147/    114A :                     ; ------------------------------------------------------
(1)  148/    114A :                     ; DATA
(1)  149/    114A :                     ;
(1)  150/    114A :                     ; Small stuff goes here
(1)  151/    114A :                     ; ------------------------------------------------------
(1)  152/    114A :                     
(1)  153/    114A :                     str_Stats:
(1)  154/    114A : 4D41 5253 4941 4E4F 		dc.b "MARSIANO!",$A
                    210A                
(1)  155/    1154 : 00                  		dc.b 0
(1)  156/    1155 :                     		align 2
(1)  157/    1156 :                     
(1)  158/    1156 :                     str_Stats2:
(1)  159/    1156 :                     ; 	if MARS
(1)  160/    1156 : 5C6C 0A0A           		dc.b "\\l",$A,$A
(1)  161/    115A : 5C62 205C 6220 4344 		dc.b "\\b \\b CD RW/RD",$A,$A
                    2052 572F 5244 0A0A 
(1)  162/    116A : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w CD RW",$A
                    205C 7720 4344 2052 
                    570A                
(1)  163/    117C : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A,$A
                    205C 770A 0A        
(1)  164/    1189 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w CD RD",$A
                    205C 7720 4344 2052 
                    440A                
(1)  165/    119B : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1)  166/    11A7 : 0A                  		dc.b $A
(1)  167/    11A8 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w MARS",$A
                    205C 7720 4D41 5253 
                    0A                  
(1)  168/    11B9 : 5C77 205C 7720 5C77 		dc.b "\\w \\w \\w \\w",$A
                    205C 770A           
(1)  169/    11C5 : 00                  		dc.b 0
(1)  170/    11C6 :                     ; ; 	else
(1)  171/    11C6 :                     ; 		dc.b "\\l",0
(1)  172/    11C6 :                     ; 	endif
(1)  173/    11C6 : FFFF 8740           		dc.l RAM_Framecount
(1)  174/    11CA :                     ; 	if MARS
(1)  175/    11CA : 00A1 200E           		dc.l sysmcd_reg+mcd_comm_m
(1)  176/    11CE : 00A1 200F           		dc.l sysmcd_reg+mcd_comm_s
(1)  177/    11D2 :                     
(1)  178/    11D2 : 00A1 2010           		dc.l sysmcd_reg+mcd_dcomm_m
(1)  179/    11D6 : 00A1 2012           		dc.l sysmcd_reg+mcd_dcomm_m+2
(1)  180/    11DA : 00A1 2014           		dc.l sysmcd_reg+mcd_dcomm_m+4
(1)  181/    11DE : 00A1 2016           		dc.l sysmcd_reg+mcd_dcomm_m+6
(1)  182/    11E2 : 00A1 2018           		dc.l sysmcd_reg+mcd_dcomm_m+8
(1)  183/    11E6 : 00A1 201A           		dc.l sysmcd_reg+mcd_dcomm_m+10
(1)  184/    11EA : 00A1 201C           		dc.l sysmcd_reg+mcd_dcomm_m+12
(1)  185/    11EE : 00A1 201E           		dc.l sysmcd_reg+mcd_dcomm_m+14
(1)  186/    11F2 : 00A1 2020           		dc.l sysmcd_reg+mcd_dcomm_s
(1)  187/    11F6 : 00A1 2022           		dc.l sysmcd_reg+mcd_dcomm_s+2
(1)  188/    11FA : 00A1 2024           		dc.l sysmcd_reg+mcd_dcomm_s+4
(1)  189/    11FE : 00A1 2026           		dc.l sysmcd_reg+mcd_dcomm_s+6
(1)  190/    1202 : 00A1 2028           		dc.l sysmcd_reg+mcd_dcomm_s+8
(1)  191/    1206 : 00A1 202A           		dc.l sysmcd_reg+mcd_dcomm_s+10
(1)  192/    120A : 00A1 202C           		dc.l sysmcd_reg+mcd_dcomm_s+12
(1)  193/    120E : 00A1 202E           		dc.l sysmcd_reg+mcd_dcomm_s+14
(1)  194/    1212 :                     
(1)  195/    1212 : 00A1 5120           		dc.l sysmars_reg+comm0
(1)  196/    1216 : 00A1 5122           		dc.l sysmars_reg+comm2
(1)  197/    121A : 00A1 5124           		dc.l sysmars_reg+comm4
(1)  198/    121E : 00A1 5126           		dc.l sysmars_reg+comm6
(1)  199/    1222 : 00A1 5128           		dc.l sysmars_reg+comm8
(1)  200/    1226 : 00A1 512A           		dc.l sysmars_reg+comm10
(1)  201/    122A : 00A1 512C           		dc.l sysmars_reg+comm12
(1)  202/    122E : 00A1 512E           		dc.l sysmars_reg+comm14
(1)  203/    1232 :                     		align 2
(1)  204/    1232 :                     
(1)  205/    1232 :                     ; ====================================================================
(1)  206/    1232 :                     
(1)  207/    1232 :                     
     296/    1232 :                     cscrn0_e:
     303/    1232 :                     Md_Screen00_e:
     304/    1232 :                     
     305/    1232 :                     ; ====================================================================
     306/    1232 :                     ; --------------------------------------------------------
     307/    1232 :                     ; SOUND Section (and DREQ...)
     308/    1232 :                     ; --------------------------------------------------------
     309/    1232 :                     
     311/    1232 :                     		align 4
     315/    1234 :                     Z80_CODE:	include "sound/gema_zdrv.asm"		; Called once
(1)    1/    1234 :                     ; ====================================================================
(1)    2/    1234 :                     ; --------------------------------------------------------
(1)    3/    1234 :                     ; GEMA/Nikona Z80 code v0.5
(1)    4/    1234 :                     ; (C)2023 GenesisFan64
(1)    5/    1234 :                     ;
(1)    6/    1234 :                     ; TIP:
(1)    7/    1234 :                     ; For the 32X place this code on the 880000 area
(1)    8/    1234 :                     ; as this is only loaded once.
(1)    9/    1234 :                     ; --------------------------------------------------------
(1)   10/    1234 :                     
(1)   11/    1234 :                     Z80_TOP:
(1)   12/    1234 :                     		cpu Z80		; [AS] Enter Z80
(1)   13/       0 :                     		phase 0		; [AS]
(1)   14/       0 : (MACRO)             		org 0
(1)   15/       0 :                     
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     ; SETTINGS
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; !! = leave as-is unless you know what you are doing.
(1)   21/       0 : =11H                MAX_TRKCHN	equ 17		; !! Max Internal tracker channels: 4PSG + 6FM + 7PWM (**AFFECTS 32X SIDE)
(1)   22/       0 : =8H                 MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) (**AFFECTS WAVE QUALITY)
(1)   23/       0 : =40H                MAX_RCACH	equ 40h		; Max storage for ROM pattern data *1-BIT SIZES ONLY, MUST BE ALIGNED*
(1)   24/       0 : =10H                MAX_TBLSIZE	equ 10h		; Max size for chip tables
(1)   25/       0 : =FH                 MAX_INS		equ 15		; Max Cache'd ROM instruments per track
(1)   26/       0 : =18H                MAX_BLOCKS	equ 24		; Max Cache'd ROM blocks per track
(1)   27/       0 : =FH                 MAX_HEADS	equ 15		; Max Cache'd ROM headers per track
(1)   28/       0 : =0H                 ZSET_TESTME	equ 0		; Set to 1 to "hear"-test the DAC playback
(1)   29/       0 :                     
(1)   30/       0 :                     ; --------------------------------------------------------
(1)   31/       0 :                     ; Structs
(1)   32/       0 :                     ; --------------------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 :                     ; trkBuff struct: 00h-30h
(1)   35/       0 :                     ; unused bytes are free.
(1)   36/       0 :                     ;
(1)   37/       0 :                     ; trk_Status: %ERPx xxx0
(1)   38/       0 :                     ; E - enabled
(1)   39/       0 :                     ; R - Init|Restart track
(1)   40/       0 :                     ; P - refill-on-playback
(1)   41/       0 :                     ; 0 - Use global sub-beat
(1)   42/       0 : =0H                 trk_status	equ 00h	; ** Track Status and flags (MUST BE at 00h)
(1)   43/       0 : =1H                 trk_seqId	equ 01h ; ** Track ID to play.
(1)   44/       0 : =2H                 trk_setBlk	equ 02h	; ** Start on this block
(1)   45/       0 : =3H                 trk_tickSet	equ 03h	; ** Ticks for this track
(1)   46/       0 : =4H                 trk_Blocks	equ 04h ; [W] Current track's blocks
(1)   47/       0 : =6H                 trk_Patt	equ 06h ; [W] Current track's heads and patterns
(1)   48/       0 : =8H                 trk_Instr	equ 08h ; [W] Current track's instruments
(1)   49/       0 : =AH                 trk_Read	equ 0Ah	; [W] Track current pattern-read pos
(1)   50/       0 : =CH                 trk_Rows	equ 0Ch	; [W] Track current row length
(1)   51/       0 : =EH                 trk_cachHalf	equ 0Eh ; ROM-cache halfcheck
(1)   52/       0 : =FH                 trk_cachInc	equ 0Fh ; ROM-cache increment
(1)   53/       0 : =10H                trk_rowPause	equ 10h	; Row-pause timer
(1)   54/       0 : =11H                trk_tickTmr	equ 11h	; Ticks timer
(1)   55/       0 : =12H                trk_currBlk	equ 12h	; Current block
(1)   56/       0 : =13H                trk_Panning	equ 13h ; Global panning for this track %LR000000
(1)   57/       0 : =14H                trk_Priority	equ 14h ; Priority level for this buffer
(1)   58/       0 : =15H                trk_BankIns	equ 15h
(1)   59/       0 : =16H                trk_BankBlk	equ 16h
(1)   60/       0 : =17H                trk_BankHead	equ 17h
(1)   61/       0 : =1CH                trk_MaxChnls	equ 1Ch	; MAX avaialble channels
(1)   62/       0 : =1DH                trk_MaxBlks	equ 1Dh ;     ----      blocks
(1)   63/       0 : =1EH                trk_MaxHdrs	equ 1Eh ;     ----      headers
(1)   64/       0 : =1FH                trk_MaxIns	equ 1Fh ;     ----      intruments
(1)   65/       0 : =20H                trk_RomCPatt	equ 20h ; [3b] ROM current pattern data to be cache'd
(1)   66/       0 : =23H                trk_RomPatt	equ 23h ; [3b] ROM TOP pattern data
(1)   67/       0 : =26H                trk_ChnList	equ 26h ; ** [W] Pointer to channel list for this buffer
(1)   68/       0 : =28H                trk_ChnCBlk	equ 28h ; ** [W] Pointer to block storage
(1)   69/       0 : =2AH                trk_ChnCHead	equ 2Ah ; ** [W] Pointer to header storage
(1)   70/       0 : =2CH                trk_ChnCIns	equ 2Ch	; ** [W] Pointer to intrument storage (ALWAYS used)
(1)   71/       0 : =2EH                trk_ChnCach	equ 2Eh	; ** [W] Pointer to pattern storage
(1)   72/       0 :                     
(1)   73/       0 :                     ; chnBuff struct, 8 bytes ONLY
(1)   74/       0 :                     ;
(1)   75/       0 :                     ; chnl_Flags: LR00evin
(1)   76/       0 :                     ; LR - Left/Right panning bits (REVERSE: 0-ON 1-OFF)
(1)   77/       0 :                     ; e  - Effect*
(1)   78/       0 :                     ; v  - Volume*
(1)   79/       0 :                     ; i  - Intrument*
(1)   80/       0 :                     ; n  - Note*
(1)   81/       0 :                     ; * Gets cleared later.
(1)   82/       0 :                     
(1)   83/       0 : =0H                 chnl_Flags	equ 0	; Playback flags
(1)   84/       0 : =1H                 chnl_Chip	equ 1	; Current Chip ID + priority for this channel
(1)   85/       0 : =2H                 chnl_Note	equ 2
(1)   86/       0 : =3H                 chnl_Ins	equ 3	; Starting from 01h
(1)   87/       0 : =4H                 chnl_Vol	equ 4	; MAX to MIN: 40h-00h
(1)   88/       0 : =5H                 chnl_EffId	equ 5
(1)   89/       0 : =6H                 chnl_EffArg	equ 6
(1)   90/       0 : =7H                 chnl_Type	equ 7	; Impulse-note update bits
(1)   91/       0 :                     
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     ; Variables
(1)   94/       0 :                     ; --------------------------------------------------------
(1)   95/       0 :                     
(1)   96/       0 :                     ; Z80 opcode labels for the wave playback routines:
(1)   97/       0 : =0H                 zopcNop		equ	00h
(1)   98/       0 : =8H                 zopcEx		equ	08h
(1)   99/       0 : =C9H                zopcRet		equ 	0C9h
(1)  100/       0 : =D9H                zopcExx		equ	0D9h		; (dac_me ONLY)
(1)  101/       0 : =F5H                zopcPushAf	equ	0F5h		; (dac_fill ONLY)
(1)  102/       0 :                     
(1)  103/       0 :                     ; PSG external control
(1)  104/       0 :                     ; GEMS style.
(1)  105/       0 : =0H                 COM		equ	0
(1)  106/       0 : =4H                 LEV		equ	4
(1)  107/       0 : =8H                 ATK		equ	8
(1)  108/       0 : =CH                 DKY		equ	12
(1)  109/       0 : =10H                SLV		equ	16
(1)  110/       0 : =14H                RRT		equ	20
(1)  111/       0 : =18H                MODE		equ	24
(1)  112/       0 : =1CH                DTL		equ	28
(1)  113/       0 : =20H                DTH		equ	32
(1)  114/       0 : =24H                ALV		equ	36
(1)  115/       0 : =28H                FLG		equ	40
(1)  116/       0 : =2CH                TMR		equ	44
(1)  117/       0 : =30H                PVOL		equ	48
(1)  118/       0 : =34H                PARP		equ	52
(1)  119/       0 : =38H                PTMR		equ	56
(1)  120/       0 :                     
(1)  121/       0 :                     ; PWM control
(1)  122/       0 : =0H                 PWCOM		equ	0
(1)  123/       0 : =8H                 PWPTH_V		equ	8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  124/       0 : =10H                PWPHL		equ	16	; Pitch LSB
(1)  125/       0 : =18H                PWOUTF		equ	24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  126/       0 : =20H                PWINSH		equ	32	; **
(1)  127/       0 : =28H                PWINSM		equ	40	; **
(1)  128/       0 : =30H                PWINSL		equ	48	; **
(1)  129/       0 :                     
(1)  130/       0 :                     ; ====================================================================
(1)  131/       0 :                     ; --------------------------------------------------------
(1)  132/       0 :                     ; Code starts here
(1)  133/       0 :                     ; --------------------------------------------------------
(1)  134/       0 :                     
(1)  135/       0 : F3                  		di			; Disable interrputs
(1)  136/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  137/       3 : 31 00 20            		ld	sp,2000h	; Set stack at the end of Z80
(1)  138/       6 : 18 7B               		jr	z80_init	; Jump to z80_init
(1)  139/       8 :                     
(1)  140/       8 :                     ; --------------------------------------------------------
(1)  141/       8 :                     ; RST 8 (dac_me)
(1)  142/       8 :                     ; *** self-modifiable code ***
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Writes wave data to DAC using data stored
(1)  145/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  146/       8 :                     ; opcodes to keep the samplerate stable.
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Input (EXX):
(1)  149/       8 :                     ;  c - WAVE buffer MSB
(1)  150/       8 :                     ; de - Pitch (xx.00)
(1)  151/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  152/       8 :                     ;
(1)  153/       8 :                     ; Uses (EXX):
(1)  154/       8 :                     ; b
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Notes:
(1)  157/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  158/       8 :                     ; wave playback.
(1)  159/       8 :                     ;
(1)  160/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  161/       8 :                     ; and
(1)  162/       8 :                     ; call dac_off to disable and enable FM6.
(1)  163/       8 :                     ; --------------------------------------------------------
(1)  164/       8 :                     
(1)  165/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  166/       8 : (MACRO)             		org 8
(1)  167/       8 : D9                  dac_me:		exx			; <-- this changes between EXX(play) and RET(stop)
(1)  168/       9 : 08                  		ex	af,af'		; Swap af
(1)  169/       A : 45                  		ld	b,l		; Save pitch .00 to b
(1)  170/       B : 6C                  		ld	l,h		; l - xx.00 to 00xx
(1)  171/       C : 61                  		ld	h,c		; h - Wave buffer MSB + 00xx
(1)  172/       D : 3E 2A               		ld	a,2Ah		; YM register 2Ah
(1)  173/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set DAC write
(1)  174/      12 : 7E                  		ld	a,(hl)		; Now read byte from the wave buffer
(1)  175/      13 : 32 01 40            		ld	(Zym_data_1),a	; and write it to DAC
(1)  176/      16 : 65                  		ld	h,l		; get hl back
(1)  177/      17 : 68                  		ld	l,b		; Get .00 back from b to l
(1)  178/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  179/      19 : 08                  		ex	af,af'		; return af
(1)  180/      1A : D9                  		exx
(1)  181/      1B : C9                  		ret
(1)  182/      1C :                     
(1)  183/      1C :                     ; --------------------------------------------------------
(1)  184/      1C :                     ; 1Ch
(1)  185/      1C : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1)  186/      1E : E8 00               sbeatPtck	dw 200+32	; Default global subbeats (-32 for PAL)
(1)  187/      20 :                     
(1)  188/      20 :                     ; --------------------------------------------------------
(1)  189/      20 :                     ; RST 20h (dac_me)
(1)  190/      20 :                     ; *** self-modifiable code ***
(1)  191/      20 :                     ;
(1)  192/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  193/      20 :                     ; it playing.
(1)  194/      20 :                     ;
(1)  195/      20 :                     ; *** THIS BREAKS ALL REGISTERS IF REFILL
(1)  196/      20 :                     ; IS REQUESTED ***
(1)  197/      20 :                     ; --------------------------------------------------------
(1)  198/      20 :                     
(1)  199/      20 : (MACRO)             		org 20h
(1)  200/      20 : F5                  dac_fill:	push	af		; <-- changes between PUSH AF(playing) and RET(stopped)
(1)  201/      21 : 3A 2F 00            		ld	a,(dDacFifoMid)	; a - Get mid-way value
(1)  202/      24 : D9                  		exx
(1)  203/      25 : AC                  		xor	h		; Grab LSB.00
(1)  204/      26 : D9                  		exx
(1)  205/      27 : E6 80               		and	80h		; Check if bit changed
(1)  206/      29 : C4 29 11            		call	nz,dac_refill	; If yes: Refill and update LSB to check
(1)  207/      2C : F1                  		pop	af
(1)  208/      2D : C9                  		ret
(1)  209/      2E :                     
(1)  210/      2E :                     ; --------------------------------------------------------
(1)  211/      2E :                     ; 02Eh
(1)  212/      2E : 00                  currTickBits	db 0			; 2Eh: Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1)  213/      2F : 00                  dDacFifoMid	db 0			; 2Fh: WAVE play halfway refill flag (00h/80h)
(1)  214/      30 : 00 00 00            dDacPntr	db 0,0,0		; 30h: WAVE play current ROM position
(1)  215/      33 : 00 00 00            dDacCntr	db 0,0,0		; 33h: WAVE play length counter
(1)  216/      36 : 00                  x68ksrclsb	db 0			; 36h: transferRom temporal LSB
(1)  217/      37 : 00                  x68ksrcmid	db 0			; 37h: transferRom temporal MID
(1)  218/      38 :                     
(1)  219/      38 :                     ; --------------------------------------------------------
(1)  220/      38 :                     ; Z80 Interrupt at 0038h
(1)  221/      38 :                     ; --------------------------------------------------------
(1)  222/      38 :                     
(1)  223/      38 : (MACRO)             		org 38h			; Align 38h
(1)  224/      38 : ED 73 03 17         		ld	(tickSpSet),sp	; Write TICK flag using sp (xx1F, use tickFlag+1)
(1)  225/      3C : F3                  		di			; Disable interrupt
(1)  226/      3D : C9                  		ret
(1)  227/      3E :                     
(1)  228/      3E :                     ; --------------------------------------------------------
(1)  229/      3E :                     ; 03Eh
(1)  230/      3E : 00                  trkListPage	db 0			; 3Eh: Current tracklist page/bank
(1)  231/      3F : 00                  marsUpd		db 0			; 3Fh: Flag to request a PWM transfer
(1)  232/      40 :                     
(1)  233/      40 :                     ; --------------------------------------------------------
(1)  234/      40 :                     ; 68K Read/Write area at 40h
(1)  235/      40 :                     ; --------------------------------------------------------
(1)  236/      40 :                     
(1)  237/      40 : (MACRO)             		org 40h
(1)  238/      40 :                     commZfifo	ds 40h			; Buffer for commands: 40h bytes
(1)  239/      80 : 00                  commZWrite	db 0			; 80h: cmd fifo wptr (from 68k)
(1)  240/      81 : 00                  commZRomBlk	db 0			; 81h: 68k ROM block flag
(1)  241/      82 : 00                  marsBlock	db 0			; 82h: flag to BLOCK PWM transfers.
(1)  242/      83 :                     
(1)  243/      83 :                     ; --------------------------------------------------------
(1)  244/      83 :                     ; Initilize
(1)  245/      83 :                     ; --------------------------------------------------------
(1)  246/      83 :                     
(1)  247/      83 :                     z80_init:
(1)  248/      83 : CD DC 0D            		call	gema_init		; Init values
(1)  249/      86 : FB                  		ei
(1)  250/      87 :                     
(1)  251/      87 :                     ; --------------------------------------------------------
(1)  252/      87 :                     ; MAIN LOOP
(1)  253/      87 :                     ; --------------------------------------------------------
(1)  254/      87 :                     
(1)  255/      87 :                     drv_loop:
(1)  256/      87 : CF                  		rst	8
(1)  257/      88 : CD 87 0E            		call	get_tick		; Check for Tick on VBlank
(1)  258/      8B : E7                  		rst	20h			; Refill wave
(1)  259/      8C : CF                  		rst	8
(1)  260/      8D : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  261/      8F : 3A 05 17            		ld	a,(tickCnt)
(1)  262/      92 : D6 01               		sub	1
(1)  263/      94 : 38 0B               		jr	c,.noticks
(1)  264/      96 : 32 05 17            		ld	(tickCnt),a
(1)  265/      99 : CD 49 0F            		call	chip_env		; Process PSG and YM
(1)  266/      9C : CD 87 0E            		call	get_tick		; Check for another tick
(1)  267/      9F : 06 01               		ld 	b,01b			; Set TICK (01b) flag, and clear BEAT
(1)  268/      A1 :                     .noticks:
(1)  269/      A1 : 3A 1D 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  270/      A4 : D6 01               		sub	1
(1)  271/      A6 : 38 06               		jr	c,.nobeats
(1)  272/      A8 : CF                  		rst	8
(1)  273/      A9 : 32 1D 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  274/      AC : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  275/      AE :                     .nobeats:
(1)  276/      AE : CF                  		rst	8
(1)  277/      AF : 78                  		ld	a,b			; Any beat/tick change?
(1)  278/      B0 : B7                  		or	a
(1)  279/      B1 : 28 14               		jr	z,.neither
(1)  280/      B3 : 32 2E 00            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  281/      B6 : CF                  		rst	8
(1)  282/      B7 : CD 87 0E            		call	get_tick
(1)  283/      BA : CD FE 04            		call	set_chips		; Send changes to sound chips
(1)  284/      BD : CD 87 0E            		call	get_tick
(1)  285/      C0 : CF                  		rst	8
(1)  286/      C1 : CD CF 01            		call	upd_track		; Update track data
(1)  287/      C4 : CD 87 0E            		call	get_tick
(1)  288/      C7 :                     .neither:
(1)  289/      C7 : CD D9 0D            		call	ex_comm			; External communication
(1)  290/      CA : CD 87 0E            		call	get_tick
(1)  291/      CD :                     .next_cmd:
(1)  292/      CD : 3A 80 00            		ld	a,(commZWrite)		; Check command READ and WRITE indexes
(1)  293/      D0 : 47                  		ld	b,a
(1)  294/      D1 : 3A 1C 17            		ld	a,(commZRead)
(1)  295/      D4 : B8                  		cp	b
(1)  296/      D5 : 28 B0               		jr	z,drv_loop		; If both are equal: no requests
(1)  297/      D7 : CF                  		rst	8
(1)  298/      D8 : CD F0 00            		call	.grab_arg
(1)  299/      DB : FE FF               		cp	-1			; Got -1? (Start of command)
(1)  300/      DD : 20 A8               		jr	nz,drv_loop
(1)  301/      DF : CD F0 00            		call	.grab_arg		; Read command number
(1)  302/      E2 : 87                  		add	a,a			; * 2
(1)  303/      E3 : 21 0F 01            		ld	hl,.list		; Then jump to one of these...
(1)  304/      E6 : 16 00               		ld	d,0
(1)  305/      E8 : 5F                  		ld	e,a
(1)  306/      E9 : 19                  		add	hl,de
(1)  307/      EA : 7E                  		ld	a,(hl)
(1)  308/      EB : 23                  		inc	hl
(1)  309/      EC : 66                  		ld	h,(hl)
(1)  310/      ED : CF                  		rst	8
(1)  311/      EE : 6F                  		ld	l,a
(1)  312/      EF : E9                  		jp	(hl)
(1)  313/      F0 :                     
(1)  314/      F0 :                     ; --------------------------------------------------------
(1)  315/      F0 :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  316/      F0 :                     ; --------------------------------------------------------
(1)  317/      F0 :                     
(1)  318/      F0 :                     .grab_arg:
(1)  319/      F0 : D5                  		push	de
(1)  320/      F1 : E5                  		push	hl
(1)  321/      F2 :                     .getcbytel:
(1)  322/      F2 : 3A 80 00            		ld	a,(commZWrite)
(1)  323/      F5 : 57                  		ld	d,a
(1)  324/      F6 : CF                  		rst	8
(1)  325/      F7 : 3A 1C 17            		ld	a,(commZRead)
(1)  326/      FA : BA                  		cp	d
(1)  327/      FB : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  328/      FD : 16 00               		ld	d,0
(1)  329/      FF : 5F                  		ld	e,a
(1)  330/     100 : 21 40 00            		ld	hl,commZfifo
(1)  331/     103 : 19                  		add	hl,de
(1)  332/     104 : CF                  		rst	8
(1)  333/     105 : 3C                  		inc	a
(1)  334/     106 : E6 3F               		and	3Fh		; ** command list limit
(1)  335/     108 : 32 1C 17            		ld	(commZRead),a
(1)  336/     10B : 7E                  		ld	a,(hl)		; a - the byte we got
(1)  337/     10C : E1                  		pop	hl
(1)  338/     10D : D1                  		pop	de
(1)  339/     10E : C9                  		ret
(1)  340/     10F :                     
(1)  341/     10F :                     ; --------------------------------------------------------
(1)  342/     10F :                     
(1)  343/     10F :                     .list:
(1)  344/     10F : 2F 01               		dw .cmnd_0		; 00h -
(1)  345/     111 : 32 01               		dw .cmnd_1		; 01h - Play by track number
(1)  346/     113 : 4F 01               		dw .cmnd_2		; 02h - Stop by track number
(1)  347/     115 : 2F 01               		dw .cmnd_0		; 03h - Resume by track number
(1)  348/     117 : 2F 01               		dw .cmnd_0		; 04h -
(1)  349/     119 : 2F 01               		dw .cmnd_0		; 05h -
(1)  350/     11B : 2F 01               		dw .cmnd_0		; 06h -
(1)  351/     11D : 2F 01               		dw .cmnd_0		; 07h -
(1)  352/     11F : 6C 01               		dw .cmnd_8		; 08h - Stop ALL
(1)  353/     121 : 2F 01               		dw .cmnd_0		; 09h -
(1)  354/     123 : 2F 01               		dw .cmnd_0		; 0Ah -
(1)  355/     125 : 2F 01               		dw .cmnd_0		; 0Bh -
(1)  356/     127 : 8E 01               		dw .cmnd_C		; 0Ch - Set GLOBAL sub-beats
(1)  357/     129 : 2F 01               		dw .cmnd_0		; 0Dh -
(1)  358/     12B : 2F 01               		dw .cmnd_0		; 0Eh -
(1)  359/     12D : 2F 01               		dw .cmnd_0		; 0Fh -
(1)  360/     12F :                     
(1)  361/     12F :                     ; --------------------------------------------------------
(1)  362/     12F :                     ; Command 00h
(1)  363/     12F :                     ;
(1)  364/     12F :                     ; Reserved for TESTING purposes.
(1)  365/     12F :                     ; --------------------------------------------------------
(1)  366/     12F :                     
(1)  367/     12F :                     ; TEST COMMAND
(1)  368/     12F :                     
(1)  369/     12F :                     .cmnd_0:
(1)  370/     12F : C3 CD 00            		jp	.next_cmd
(1)  371/     132 :                     
(1)  372/     132 :                     ; 	if MARS
(1)  373/     132 :                     ; 		ld	iy,pwmcom
(1)  374/     132 :                     ; 		ld	hl,.tempset
(1)  375/     132 :                     ; 		ld	de,8
(1)  376/     132 :                     ; 		ld	b,e
(1)  377/     132 :                     ; 		dec	b
(1)  378/     132 :                     ; .copyme:
(1)  379/     132 :                     ; 		ld	a,(hl)
(1)  380/     132 :                     ; 		ld	(iy),a
(1)  381/     132 :                     ; 		inc	hl
(1)  382/     132 :                     ; 		add	iy,de
(1)  383/     132 :                     ; 		djnz	.copyme
(1)  384/     132 :                     ; 		ld	a,1
(1)  385/     132 :                     ; 		ld	(marsUpd),a
(1)  386/     132 :                     ; 		jp	.next_cmd
(1)  387/     132 :                     ; .tempset:
(1)  388/     132 :                     ; 		db 0001b
(1)  389/     132 :                     ; 		db 01h
(1)  390/     132 :                     ; 		db 00h
(1)  391/     132 :                     ; 		db 11110000b|02h
(1)  392/     132 :                     ; 		db (SmpIns_TEST>>16)&0FFh
(1)  393/     132 :                     ; 		db (SmpIns_TEST>>8)&0FFh
(1)  394/     132 :                     ; 		db (SmpIns_TEST)&0FFh
(1)  395/     132 :                     ; 	else
(1)  396/     132 :                     ; 		jp	.next_cmd
(1)  397/     132 :                     ; 	endif
(1)  398/     132 :                     
(1)  399/     132 :                     ; 		call	dac_off
(1)  400/     132 :                     ; 		ld	iy,wave_Start
(1)  401/     132 :                     ; 		ld	hl,.tempset
(1)  402/     132 :                     ; 		ld	b,0Bh
(1)  403/     132 :                     ; .copyme:
(1)  404/     132 :                     ; 		ld	a,(hl)
(1)  405/     132 :                     ; 		ld	(iy),a
(1)  406/     132 :                     ; 		inc	hl
(1)  407/     132 :                     ; 		inc	iy
(1)  408/     132 :                     ; 		djnz	.copyme
(1)  409/     132 :                     ; 		ld	hl,100h
(1)  410/     132 :                     ; 		ld	(wave_Pitch),hl
(1)  411/     132 :                     ; 		ld	a,1
(1)  412/     132 :                     ; 		ld	(wave_Flags),a
(1)  413/     132 :                     ; 		call	dac_play
(1)  414/     132 :                     ; 		jp	.next_cmd
(1)  415/     132 :                     ; .tempset:
(1)  416/     132 :                     ; 		dw TEST_WAVE&0FFFFh
(1)  417/     132 :                     ; 		db TEST_WAVE>>16&0FFh
(1)  418/     132 :                     ; 		dw (TEST_WAVE_E-TEST_WAVE)&0FFFFh
(1)  419/     132 :                     ; 		db (TEST_WAVE_E-TEST_WAVE)>>16&0FFh
(1)  420/     132 :                     ; 		dw 0
(1)  421/     132 :                     ; 		db 0
(1)  422/     132 :                     ; 		dw 0100h;+(ZSET_WTUNE)
(1)  423/     132 :                     
(1)  424/     132 :                     ; --------------------------------------------------------
(1)  425/     132 :                     ; Command 01h:
(1)  426/     132 :                     ;
(1)  427/     132 :                     ; Make new track by sequence number
(1)  428/     132 :                     ; --------------------------------------------------------
(1)  429/     132 :                     
(1)  430/     132 :                     .cmnd_1:
(1)  431/     132 : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  432/     135 : 4F                  		ld	c,a		; copy to c
(1)  433/     136 : CD F0 00            		call	.grab_arg	; d1: Block from
(1)  434/     139 : 47                  		ld	b,a
(1)  435/     13A : CD 9F 01            		call	.srch_frid	; Search buffer with same ID or FREE to use.
(1)  436/     13D : FE FF               		cp	-1
(1)  437/     13F : CA CD 00            		jp	z,.next_cmd	; Return if failed.
(1)  438/     142 : 36 C0               		ld	(hl),0C0h	; ** Write trk_status flags: Enable+Restart
(1)  439/     144 : 23                  		inc	hl
(1)  440/     145 : 71                  		ld	(hl),c		; ** write trk_seqId
(1)  441/     146 : 23                  		inc	hl
(1)  442/     147 : 70                  		ld	(hl),b		; ** write trk_setBlk
(1)  443/     148 : 79                  		ld	a,c
(1)  444/     149 : CD D1 04            		call	get_RomTrcks
(1)  445/     14C : C3 CD 00            		jp	.next_cmd
(1)  446/     14F :                     
(1)  447/     14F :                     ; --------------------------------------------------------
(1)  448/     14F :                     ; Command 02h:
(1)  449/     14F :                     ;
(1)  450/     14F :                     ; Stop track by sequence number
(1)  451/     14F :                     ; --------------------------------------------------------
(1)  452/     14F :                     
(1)  453/     14F :                     .cmnd_2:
(1)  454/     14F : CD F0 00            		call	.grab_arg	; d0: Sequence ID
(1)  455/     152 : 4F                  		ld	c,a		; copy to c
(1)  456/     153 : 06 FF               		ld	b,-1
(1)  457/     155 : CD 9F 01            		call	.srch_frid
(1)  458/     158 : FE FF               		cp	-1
(1)  459/     15A : CA CD 00            		jp	z,.next_cmd
(1)  460/     15D : 7E                  		ld	a,(hl)
(1)  461/     15E : CB 7F               		bit	7,a
(1)  462/     160 : CA CD 00            		jp	z,.next_cmd
(1)  463/     163 : 36 FF               		ld	(hl),-1		; Flags | Enable+Restart bits
(1)  464/     165 : 23                  		inc	hl
(1)  465/     166 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  466/     168 : CF                  		rst	8
(1)  467/     169 : C3 CD 00            		jp	.next_cmd
(1)  468/     16C :                     
(1)  469/     16C :                     ; --------------------------------------------------------
(1)  470/     16C :                     ; Command 08h:
(1)  471/     16C :                     ;
(1)  472/     16C :                     ; Stop ALL tracks
(1)  473/     16C :                     ; --------------------------------------------------------
(1)  474/     16C :                     
(1)  475/     16C :                     .cmnd_8:
(1)  476/     16C : DD 21 F7 13         		ld	ix,nikona_BuffList
(1)  477/     170 :                     .next_sall:
(1)  478/     170 : DD 7E 00            		ld	a,(ix)
(1)  479/     173 : FE FF               		cp	-1
(1)  480/     175 : CA CD 00            		jp	z,.next_cmd
(1)  481/     178 : DD 66 01            		ld	h,(ix+1)
(1)  482/     17B : 6F                  		ld	l,a
(1)  483/     17C : 7E                  		ld	a,(hl)		; *** trk_status
(1)  484/     17D : CB 7F               		bit	7,a
(1)  485/     17F : 28 05               		jr	z,.not_on
(1)  486/     181 : 36 FF               		ld	(hl),-1		; *** trk_status: -1 request
(1)  487/     183 : 23                  		inc	hl
(1)  488/     184 : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  489/     186 :                     ; 		inc	hl
(1)  490/     186 :                     ; 		ld	(hl),0
(1)  491/     186 :                     .not_on:
(1)  492/     186 : 11 10 00            		ld	de,10h
(1)  493/     189 : DD 19               		add	ix,de
(1)  494/     18B : C3 70 01            		jp	.next_sall
(1)  495/     18E :                     
(1)  496/     18E :                     ; --------------------------------------------------------
(1)  497/     18E :                     ; Command 0Ch:
(1)  498/     18E :                     ;
(1)  499/     18E :                     ; Set global sub-beats
(1)  500/     18E :                     ; --------------------------------------------------------
(1)  501/     18E :                     
(1)  502/     18E :                     .cmnd_C:
(1)  503/     18E : CD F0 00            		call	.grab_arg	; d0.w: $00xx
(1)  504/     191 : 4F                  		ld	c,a
(1)  505/     192 : CD F0 00            		call	.grab_arg	; d0.w: $xx00
(1)  506/     195 : 32 1F 00            		ld	(sbeatPtck+1),a
(1)  507/     198 : 79                  		ld	a,c
(1)  508/     199 : 32 1E 00            		ld	(sbeatPtck),a
(1)  509/     19C : C3 CD 00            		jp	.next_cmd
(1)  510/     19F :                     
(1)  511/     19F :                     ; ------------------------------------------------
(1)  512/     19F :                     
(1)  513/     19F :                     ; c - trk_currId
(1)  514/     19F :                     ; b - trk_setBlk (-1: ignore)
(1)  515/     19F :                     .srch_frid:
(1)  516/     19F : DD 21 F7 13         		ld	ix,nikona_BuffList
(1)  517/     1A3 : 11 10 00            		ld	de,10h
(1)  518/     1A6 :                     .next:
(1)  519/     1A6 : DD 7E 00            		ld	a,(ix)
(1)  520/     1A9 : FE FF               		cp	-1
(1)  521/     1AB : C8                  		ret	z
(1)  522/     1AC : DD 66 01            		ld	h,(ix+1)
(1)  523/     1AF : 6F                  		ld	l,a
(1)  524/     1B0 : 1E 10               		ld	e,10h
(1)  525/     1B2 : DD 19               		add	ix,de
(1)  526/     1B4 : 23                  		inc	hl
(1)  527/     1B5 : CF                  		rst	8
(1)  528/     1B6 : 23                  		inc	hl
(1)  529/     1B7 : 5E                  		ld	e,(hl)		; ** e - trk_currId
(1)  530/     1B8 : 2B                  		dec	hl
(1)  531/     1B9 :                     
(1)  532/     1B9 : 7E                  		ld	a,(hl)		; ** a - trk_Id
(1)  533/     1BA : 2B                  		dec	hl
(1)  534/     1BB : B9                  		cp	c
(1)  535/     1BC : 20 09               		jr	nz,.not_fnd
(1)  536/     1BE : 78                  		ld	a,b
(1)  537/     1BF : FE FF               		cp	-1
(1)  538/     1C1 : 28 09               		jr	z,.found
(1)  539/     1C3 : 7B                  		ld	a,e
(1)  540/     1C4 : B8                  		cp	b
(1)  541/     1C5 : 28 05               		jr	z,.found
(1)  542/     1C7 :                     .not_fnd:
(1)  543/     1C7 : 7E                  		ld	a,(hl)		; ** a - trk_status
(1)  544/     1C8 : B7                  		or	a
(1)  545/     1C9 : FA A6 01            		jp	m,.next
(1)  546/     1CC :                     .found:
(1)  547/     1CC : CF                  		rst	8
(1)  548/     1CD : AF                  		xor	a
(1)  549/     1CE : C9                  		ret
(1)  550/     1CF :                     
(1)  551/     1CF :                     ; ====================================================================
(1)  552/     1CF :                     ; ----------------------------------------------------------------
(1)  553/     1CF :                     ; MAIN Playback section
(1)  554/     1CF :                     ; ----------------------------------------------------------------
(1)  555/     1CF :                     
(1)  556/     1CF :                     ; ============================================================
(1)  557/     1CF :                     ; --------------------------------------------------------
(1)  558/     1CF :                     ; Read INTERNAL mini-impulse-tracker data
(1)  559/     1CF :                     ; --------------------------------------------------------
(1)  560/     1CF :                     
(1)  561/     1CF :                     upd_track:
(1)  562/     1CF : E7                  		rst	20h
(1)  563/     1D0 : FD 21 F7 13         		ld	iy,nikona_BuffList
(1)  564/     1D4 :                     .trk_buffrs:
(1)  565/     1D4 : CF                  		rst	8
(1)  566/     1D5 : FD 7E 00            		ld	a,(iy)
(1)  567/     1D8 : FE FF               		cp	-1
(1)  568/     1DA : C8                  		ret	z
(1)  569/     1DB : FD E5               		push	iy
(1)  570/     1DD : FD 6E 00            		ld	l,(iy)
(1)  571/     1E0 : FD 66 01            		ld	h,(iy+1)
(1)  572/     1E3 : CD F0 01            		call	.read_track
(1)  573/     1E6 : CF                  		rst	8
(1)  574/     1E7 : FD E1               		pop	iy
(1)  575/     1E9 : 11 10 00            		ld	de,10h
(1)  576/     1EC : FD 19               		add	iy,de
(1)  577/     1EE : 18 E4               		jr	.trk_buffrs
(1)  578/     1F0 :                     ; ----------------------------------------
(1)  579/     1F0 :                     ; iy - Track buffer
(1)  580/     1F0 :                     
(1)  581/     1F0 :                     .read_track:
(1)  582/     1F0 : CF                  		rst	8
(1)  583/     1F1 : E5                  		push	hl
(1)  584/     1F2 : FD E1               		pop	iy
(1)  585/     1F4 : FD 46 00            		ld	b,(iy+trk_status)	; b - Track status and settings
(1)  586/     1F7 : CB 78               		bit	7,b			; bit7: Track active?
(1)  587/     1F9 : C8                  		ret	z
(1)  588/     1FA : 78                  		ld	a,b
(1)  589/     1FB : FE FF               		cp	-1			; Mid-silence request?
(1)  590/     1FD : C8                  		ret	z
(1)  591/     1FE : 3A 2E 00            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  592/     201 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  593/     203 : 28 04               		jr	z,.sfxmd
(1)  594/     205 : CB 4F               		bit	1,a			; BEAT passed?
(1)  595/     207 : C8                  		ret	z			;
(1)  596/     208 : CF                  		rst	8
(1)  597/     209 :                     .sfxmd:
(1)  598/     209 : CB 47               		bit	0,a			; TICK passed?
(1)  599/     20B : C8                  		ret	z
(1)  600/     20C :                     	; *** Start reading notes ***
(1)  601/     20C : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  602/     20E : C4 E2 03            		call	nz,.first_fill
(1)  603/     211 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  604/     213 : C4 DB 03            		call	nz,.effect_fill
(1)  605/     216 : FD 7E 11            		ld	a,(iy+trk_tickTmr)	; TICK ex-timer for this track
(1)  606/     219 : 3D                  		dec	a
(1)  607/     21A : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  608/     21D : B7                  		or	a
(1)  609/     21E : C0                  		ret	nz			; If TICK != 0, Exit
(1)  610/     21F : FD 7E 03            		ld	a,(iy+trk_tickSet)	; Set new tick timer
(1)  611/     222 : FD 77 11            		ld	(iy+trk_tickTmr),a
(1)  612/     225 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  613/     228 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  614/     22B : 79                  		ld	a,c			; Check rowcount
(1)  615/     22C : B0                  		or	b
(1)  616/     22D : 20 13               		jr	nz,.row_active
(1)  617/     22F : FD 7E 12            		ld	a,(iy+trk_currBlk)	; If bc == 0: Next block
(1)  618/     232 : 3C                  		inc	a
(1)  619/     233 : FD 77 12            		ld 	(iy+trk_currBlk),a
(1)  620/     236 : CD 66 03            		call	.set_track
(1)  621/     239 : FE FF               		cp	-1			; Track finished?
(1)  622/     23B : C8                  		ret	z
(1)  623/     23C : FD 4E 0C            		ld	c,(iy+trk_Rows)
(1)  624/     23F : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  625/     242 :                     .row_active:
(1)  626/     242 : CF                  		rst	8
(1)  627/     243 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  628/     246 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  629/     249 :                     
(1)  630/     249 :                     ; --------------------------------
(1)  631/     249 :                     ; Main reading loop
(1)  632/     249 :                     ; --------------------------------
(1)  633/     249 :                     
(1)  634/     249 :                     .next_note:
(1)  635/     249 : FD 7E 10            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  636/     24C : B7                  		or	a
(1)  637/     24D : 20 16               		jr	nz,.decrow
(1)  638/     24F : 7E                  		ld	a,(hl)			; Check if timer or note
(1)  639/     250 : B7                  		or	a
(1)  640/     251 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  641/     253 : FA 70 02            		jp	m,.has_note		; 80h-0FFh: note data
(1)  642/     256 : FD 77 10            		ld	(iy+trk_rowPause),a
(1)  643/     259 :                     
(1)  644/     259 :                     ; --------------------------------
(1)  645/     259 :                     ; Exit
(1)  646/     259 :                     ; --------------------------------
(1)  647/     259 :                     
(1)  648/     259 :                     .exit:
(1)  649/     259 : CF                  		rst	8
(1)  650/     25A : CD 2E 03            		call	.inc_cpatt
(1)  651/     25D : FD 75 0A            		ld	(iy+trk_Read),l		; Update read location
(1)  652/     260 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  653/     263 : 18 03               		jr	.decrow_e
(1)  654/     265 :                     .decrow:
(1)  655/     265 : FD 35 10            		dec	(iy+trk_rowPause)
(1)  656/     268 :                     .decrow_e:
(1)  657/     268 : 0B                  		dec	bc			; Decrement this row
(1)  658/     269 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row and exit.
(1)  659/     26C : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  660/     26F : C9                  		ret
(1)  661/     270 :                     
(1)  662/     270 :                     ; --------------------------------
(1)  663/     270 :                     ; New note request
(1)  664/     270 :                     ; --------------------------------
(1)  665/     270 :                     
(1)  666/     270 :                     .has_note:
(1)  667/     270 : CF                  		rst	8
(1)  668/     271 : C5                  		push	bc			; Save rowcount
(1)  669/     272 : 4F                  		ld	c,a			; Backup control|channel to c
(1)  670/     273 : CD 2E 03            		call	.inc_cpatt		; Increment hl
(1)  671/     276 : 79                  		ld	a,c			; Read control|channel
(1)  672/     277 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1)  673/     27A : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1)  674/     27D : D5                  		push	de
(1)  675/     27E : DD E1               		pop	ix
(1)  676/     280 : E6 3F               		and	00111111b		; Filter channel bits
(1)  677/     282 : 87                  		add	a,a
(1)  678/     283 : 87                  		add	a,a
(1)  679/     284 : 87                  		add	a,a			; * 8
(1)  680/     285 : 16 00               		ld 	d,0
(1)  681/     287 : 5F                  		ld	e,a
(1)  682/     288 : CF                  		rst	8
(1)  683/     289 : DD 19               		add	ix,de
(1)  684/     28B : DD 46 07            		ld	b,(ix+chnl_Type)	; b - Current TYPE byte
(1)  685/     28E : CB 71               		bit	6,c			; Next byte is new type?
(1)  686/     290 : 28 08               		jr	z,.old_type
(1)  687/     292 : 7E                  		ld	a,(hl)
(1)  688/     293 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  689/     296 : 47                  		ld	b,a			; Set to b
(1)  690/     297 : CD 2E 03            		call	.inc_cpatt
(1)  691/     29A :                     .old_type:
(1)  692/     29A :                     	; b - evinEVIN
(1)  693/     29A :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  694/     29A :                     	;     evin: byte is already stored on track-channel buffer
(1)  695/     29A :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  696/     29A : CF                  		rst	8
(1)  697/     29B : CB 40               		bit	0,b
(1)  698/     29D : 28 07               		jr	z,.no_note
(1)  699/     29F : 7E                  		ld	a,(hl)
(1)  700/     2A0 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  701/     2A3 : CD 2E 03            		call	.inc_cpatt
(1)  702/     2A6 :                     .no_note:
(1)  703/     2A6 : CB 48               		bit	1,b
(1)  704/     2A8 : 28 07               		jr	z,.no_ins
(1)  705/     2AA : 7E                  		ld	a,(hl)
(1)  706/     2AB : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  707/     2AE : CD 2E 03            		call	.inc_cpatt
(1)  708/     2B1 :                     .no_ins:
(1)  709/     2B1 : CB 50               		bit	2,b
(1)  710/     2B3 : 28 07               		jr	z,.no_vol
(1)  711/     2B5 : 7E                  		ld	a,(hl)
(1)  712/     2B6 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  713/     2B9 : CD 2E 03            		call	.inc_cpatt
(1)  714/     2BC :                     .no_vol:
(1)  715/     2BC : CB 58               		bit	3,b
(1)  716/     2BE : 28 0F               		jr	z,.no_eff
(1)  717/     2C0 : 7E                  		ld	a,(hl)
(1)  718/     2C1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  719/     2C4 : CD 2E 03            		call	.inc_cpatt
(1)  720/     2C7 : CF                  		rst	8
(1)  721/     2C8 : 7E                  		ld	a,(hl)
(1)  722/     2C9 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  723/     2CC : CD 2E 03            		call	.inc_cpatt
(1)  724/     2CF :                     .no_eff:
(1)  725/     2CF : 78                  		ld	a,b		; Merge the Impulse recycle bits into main bits
(1)  726/     2D0 : 0F                  		rrca
(1)  727/     2D1 : 0F                  		rrca
(1)  728/     2D2 : 0F                  		rrca
(1)  729/     2D3 : 0F                  		rrca
(1)  730/     2D4 : E6 0F               		and	00001111b
(1)  731/     2D6 : 4F                  		ld	c,a
(1)  732/     2D7 : 78                  		ld	a,b
(1)  733/     2D8 : E6 0F               		and	00001111b
(1)  734/     2DA : B1                  		or	c
(1)  735/     2DB : CF                  		rst	8
(1)  736/     2DC : 4F                  		ld	c,a
(1)  737/     2DD : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  738/     2E0 : B1                  		or	c
(1)  739/     2E1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  740/     2E4 : C1                  		pop	bc		; Restore rowcount
(1)  741/     2E5 :                     
(1)  742/     2E5 :                     	; Check for effects that affect
(1)  743/     2E5 :                     	; internal playback:
(1)  744/     2E5 :                     	; Jump, Ticks, etc.
(1)  745/     2E5 : E6 08               		and	1000b		; Only check for the EFFECT bit
(1)  746/     2E7 : CA 49 02            		jp	z,.next_note
(1)  747/     2EA : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  748/     2ED : B7                  		or	a		; 00h = invalid effect
(1)  749/     2EE : CA 49 02            		jp	z,.next_note
(1)  750/     2F1 : FE 01               		cp	1		; Effect A: Tick set
(1)  751/     2F3 : CC 03 03            		call	z,.eff_A
(1)  752/     2F6 : FE 02               		cp	2		; Effect B: Position Jump
(1)  753/     2F8 : CC 15 03            		call	z,.eff_B
(1)  754/     2FB : FE 03               		cp	3		; Effect C: Pattern break
(1)  755/     2FD : CA 2B 03            		jp	z,.eff_C	; <-- JUMP and exit.
(1)  756/     300 : C3 49 02            		jp	.next_note
(1)  757/     303 :                     
(1)  758/     303 :                     ; ----------------------------------------
(1)  759/     303 :                     ; Effect A: Set ticks
(1)  760/     303 :                     ; ----------------------------------------
(1)  761/     303 :                     
(1)  762/     303 :                     .eff_A:
(1)  763/     303 : F5                  		push	af
(1)  764/     304 : CF                  		rst	8
(1)  765/     305 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  766/     308 : 1D                  		dec	e			; TODO: no minus protection
(1)  767/     309 : FD 73 03            		ld	(iy+trk_tickSet),e	; set for both Set and Timer.
(1)  768/     30C : FD 73 11            		ld	(iy+trk_tickTmr),e
(1)  769/     30F : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  770/     313 : F1                  		pop	af
(1)  771/     314 : C9                  		ret
(1)  772/     315 :                     
(1)  773/     315 :                     ; ----------------------------------------
(1)  774/     315 :                     ; Effect B: jump to a new block
(1)  775/     315 :                     ; ----------------------------------------
(1)  776/     315 :                     
(1)  777/     315 :                     .eff_B:
(1)  778/     315 : F5                  		push	af			; Save Flagbits
(1)  779/     316 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  780/     319 : FD 73 12            		ld 	(iy+trk_currBlk),e
(1)  781/     31C : CF                  		rst	8
(1)  782/     31D : FD 36 10 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  783/     321 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  784/     325 : FD CB 00 EE         		set	5,(iy+trk_status)	; set fill-from-effect flag on exit
(1)  785/     329 : F1                  		pop	af
(1)  786/     32A : C9                  		ret
(1)  787/     32B :                     
(1)  788/     32B :                     ; ----------------------------------------
(1)  789/     32B :                     ; Effect C: Pattern break/exit
(1)  790/     32B :                     ;
(1)  791/     32B :                     ; Only used on SFX, arguments ignored.
(1)  792/     32B :                     ; ----------------------------------------
(1)  793/     32B :                     
(1)  794/     32B :                     .eff_C:
(1)  795/     32B : C3 CA 03            		jp	.track_end
(1)  796/     32E :                     
(1)  797/     32E :                     ; ----------------------------------------
(1)  798/     32E :                     ; Increment the current patt position
(1)  799/     32E :                     ; and recieve more data
(1)  800/     32E :                     ;
(1)  801/     32E :                     ; Breaks:
(1)  802/     32E :                     ; a,e
(1)  803/     32E :                     ; ----------------------------------------
(1)  804/     32E :                     
(1)  805/     32E :                     .inc_cpatt:
(1)  806/     32E : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  807/     331 : 7D                  		ld	a,l
(1)  808/     332 : 3C                  		inc	a
(1)  809/     333 : E6 3F               		and	MAX_RCACH-1
(1)  810/     335 : FE 3E               		cp	MAX_RCACH-2	; RAN OUT of bytes?
(1)  811/     337 : 30 03               		jr	nc,.ran_out
(1)  812/     339 : B3                  		or	e
(1)  813/     33A : 6F                  		ld	l,a
(1)  814/     33B : C9                  		ret
(1)  815/     33C :                     .ran_out:
(1)  816/     33C : FD 6E 2E            		ld	l,(iy+trk_ChnCach)
(1)  817/     33F : E5                  		push	hl
(1)  818/     340 : C5                  		push	bc
(1)  819/     341 : 06 00               		ld	b,0
(1)  820/     343 : 4F                  		ld	c,a
(1)  821/     344 : CF                  		rst	8
(1)  822/     345 : 5D                  		ld	e,l
(1)  823/     346 : 54                  		ld	d,h
(1)  824/     347 : FD 6E 20            		ld	l,(iy+trk_RomCPatt)
(1)  825/     34A : FD 66 21            		ld	h,(iy+(trk_RomCPatt+1))
(1)  826/     34D : FD 7E 22            		ld	a,(iy+(trk_RomCPatt+2))
(1)  827/     350 : 09                  		add	hl,bc
(1)  828/     351 : CE 00               		adc	a,0
(1)  829/     353 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  830/     356 : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  831/     359 : CF                  		rst	8
(1)  832/     35A : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  833/     35D : 01 40 00            		ld	bc,MAX_RCACH
(1)  834/     360 : CD C8 0E            		call	transferRom	; *** ROM ACCESS ***
(1)  835/     363 : C1                  		pop	bc
(1)  836/     364 : E1                  		pop	hl
(1)  837/     365 : C9                  		ret
(1)  838/     366 :                     
(1)  839/     366 :                     ; ----------------------------------------
(1)  840/     366 :                     ; Set track pattern by trk_currBlk
(1)  841/     366 :                     ; ----------------------------------------
(1)  842/     366 :                     
(1)  843/     366 :                     .set_track:
(1)  844/     366 : CF                  		rst	8
(1)  845/     367 : 16 00               		ld	d,0
(1)  846/     369 : FD 5E 12            		ld	e,(iy+trk_currBlk)	; e - current block
(1)  847/     36C : FD 6E 04            		ld	l,(iy+trk_Blocks)	; hl - block data
(1)  848/     36F : FD 66 05            		ld	h,(iy+(trk_Blocks+1))
(1)  849/     372 : 19                  		add	hl,de
(1)  850/     373 : 7E                  		ld	a,(hl)			; Read byte
(1)  851/     374 : FE FF               		cp	-1			; If block == -1, end track
(1)  852/     376 : CA CA 03            		jp	z,.track_end
(1)  853/     379 : E7                  		rst	20h			; dacfill
(1)  854/     37A : 07                  		rlca
(1)  855/     37B : 07                  		rlca
(1)  856/     37C : 57                  		ld	d,a
(1)  857/     37D : E6 FC               		and	11111100b
(1)  858/     37F : 5F                  		ld	e,a
(1)  859/     380 : 7A                  		ld	a,d
(1)  860/     381 : E6 03               		and	00000011b
(1)  861/     383 : 57                  		ld	d,a
(1)  862/     384 : FD 6E 06            		ld	l,(iy+trk_Patt)		; Read CACHE patt heads
(1)  863/     387 : FD 66 07            		ld	h,(iy+(trk_Patt+1))
(1)  864/     38A : CF                  		rst	8
(1)  865/     38B : 19                  		add	hl,de
(1)  866/     38C : 5E                  		ld	e,(hl)			; de - Pos
(1)  867/     38D : 23                  		inc	hl
(1)  868/     38E : 56                  		ld	d,(hl)
(1)  869/     38F : 23                  		inc	hl
(1)  870/     390 : 7E                  		ld	a,(hl)
(1)  871/     391 : 23                  		inc	hl
(1)  872/     392 : FD 77 0C            		ld	(iy+trk_Rows),a
(1)  873/     395 : 7E                  		ld	a,(hl)
(1)  874/     396 : 23                  		inc	hl
(1)  875/     397 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1)  876/     39A : FD 6E 23            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1)  877/     39D : FD 66 24            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1)  878/     3A0 : CF                  		rst	8
(1)  879/     3A1 : FD 7E 25            		ld	a,(iy+(trk_RomPatt+2))
(1)  880/     3A4 : 19                  		add	hl,de
(1)  881/     3A5 : CE 00               		adc	a,0
(1)  882/     3A7 : FD 75 20            		ld	(iy+trk_RomCPatt),l
(1)  883/     3AA : FD 74 21            		ld	(iy+(trk_RomCPatt+1)),h
(1)  884/     3AD : FD 77 22            		ld	(iy+(trk_RomCPatt+2)),a
(1)  885/     3B0 : FD 5E 2E            		ld	e,(iy+trk_ChnCach)
(1)  886/     3B3 : FD 56 2F            		ld	d,(iy+(trk_ChnCach+1))
(1)  887/     3B6 : CF                  		rst	8
(1)  888/     3B7 : FD 73 0A            		ld	(iy+trk_Read),e
(1)  889/     3BA : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1)  890/     3BD : 0E 40               		ld	c,MAX_RCACH
(1)  891/     3BF : FD 36 0E 00         		ld	(iy+trk_cachHalf),0
(1)  892/     3C3 : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  893/     3C7 : C3 C8 0E            		jp	transferRom		; ** ROM access **
(1)  894/     3CA :                     
(1)  895/     3CA :                     ; ----------------------------------------
(1)  896/     3CA :                     ; **JUMP ONLY**
(1)  897/     3CA :                     
(1)  898/     3CA :                     .track_end:
(1)  899/     3CA : CD 93 04            		call	track_out
(1)  900/     3CD : CF                  		rst	8
(1)  901/     3CE : FD 36 10 00         		ld	(iy+trk_rowPause),0
(1)  902/     3D2 : FD 36 11 00         		ld	(iy+trk_tickTmr),0
(1)  903/     3D6 : FD 36 00 00         		ld	(iy+trk_Status),0	; Disable track slot
(1)  904/     3DA : C9                  		ret
(1)  905/     3DB :                     
(1)  906/     3DB :                     ; ----------------------------------------
(1)  907/     3DB :                     ; Track refill
(1)  908/     3DB :                     ; ----------------------------------------
(1)  909/     3DB :                     
(1)  910/     3DB :                     .effect_fill:
(1)  911/     3DB : FD CB 00 AE         		res	5,(iy+trk_status)	; Reset refill-from-effect flag
(1)  912/     3DF : C3 66 03            		jp	.set_track
(1)  913/     3E2 :                     
(1)  914/     3E2 :                     ; ----------------------------------------
(1)  915/     3E2 :                     ; Track Start/Reset
(1)  916/     3E2 :                     ;
(1)  917/     3E2 :                     ; iy - Track buffer
(1)  918/     3E2 :                     ; ----------------------------------------
(1)  919/     3E2 :                     
(1)  920/     3E2 :                     .first_fill:
(1)  921/     3E2 :                     ; 		rst	20h
(1)  922/     3E2 : FD CB 00 B6         		res	6,(iy+trk_status)	; Reset FILL flag
(1)  923/     3E6 : CD 93 04            		call	track_out
(1)  924/     3E9 : FD 36 11 01         		ld	(iy+trk_tickTmr),1	; <-- Reset tick timer
(1)  925/     3ED : FD 7E 02            		ld	a,(iy+trk_setBlk)	; Make start block as current block
(1)  926/     3F0 : CF                  		rst	8
(1)  927/     3F1 : FD 77 12            		ld 	(iy+trk_currBlk),a	; block
(1)  928/     3F4 : 11 00 00            		ld	de,0
(1)  929/     3F7 : 21 B7 16            		ld	hl,trkListCach		; Read MASTER Nicona track list
(1)  930/     3FA : FD 7E 01            		ld	a,(iy+trk_seqId)
(1)  931/     3FD : E6 0F               		and	00001111b		; Filter sequence bits
(1)  932/     3FF : 87                  		add	a,a			; *4
(1)  933/     400 : 87                  		add	a,a
(1)  934/     401 : 5F                  		ld	e,a
(1)  935/     402 : 19                  		add	hl,de
(1)  936/     403 : 7E                  		ld	a,(hl)
(1)  937/     404 : 23                  		inc	hl
(1)  938/     405 : CB 7F               		bit	7,a
(1)  939/     407 : 28 04               		jr	z,.no_glbl
(1)  940/     409 : FD CB 00 C6         		set	0,(iy+trk_status)	; Enable GLOBAL sub-beats
(1)  941/     40D :                     .no_glbl:
(1)  942/     40D : E6 7F               		and	01111111b
(1)  943/     40F : FD 77 03            		ld	(iy+trk_tickSet),a
(1)  944/     412 : 7E                  		ld	a,(hl)			; Read and temporally
(1)  945/     413 : 23                  		inc	hl			; grab it's pointers
(1)  946/     414 : 4E                  		ld	c,(hl)
(1)  947/     415 : CF                  		rst	8
(1)  948/     416 : 23                  		inc	hl
(1)  949/     417 : 6E                  		ld	l,(hl)
(1)  950/     418 : 61                  		ld	h,c
(1)  951/     419 : 11 08 17            		ld	de,headerOut
(1)  952/     41C : 0E 0C               		ld	c,0Ch
(1)  953/     41E : CD C8 0E            		call	transferRom		; ** ROM access **
(1)  954/     421 : DD 21 13 17         		ld	ix,headerOut_e-1
(1)  955/     425 :                     
(1)  956/     425 :                     	; headerOut:
(1)  957/     425 :                     	; dc.l .blk,.pat,.ins
(1)  958/     425 :                     	; *** READING BACKWARDS
(1)  959/     425 : CD 7F 04            		call	.grab_rhead		; Instrument data
(1)  960/     428 : FD 4E 1F            		ld	c,(iy+trk_MaxIns)
(1)  961/     42B : CB 21               		sla	c			; *8
(1)  962/     42D : CB 21               		sla	c
(1)  963/     42F : CB 21               		sla	c
(1)  964/     431 : 78                  		ld	a,b
(1)  965/     432 : FD 5E 2C            		ld	e,(iy+trk_ChnCIns)
(1)  966/     435 : FD 56 2D            		ld	d,(iy+(trk_ChnCIns+1))
(1)  967/     438 : FD 73 08            		ld	(iy+trk_Instr),e
(1)  968/     43B : FD 72 09            		ld	(iy+(trk_Instr+1)),d
(1)  969/     43E : CF                  		rst	8
(1)  970/     43F : CD C8 0E            		call	transferRom		; ** ROM access **
(1)  971/     442 : CD 7F 04            		call	.grab_rhead		; Pattern data
(1)  972/     445 : FD 4E 1E            		ld	c,(iy+trk_MaxHdrs)
(1)  973/     448 : CB 21               		sla	c			; *4
(1)  974/     44A : CB 21               		sla	c
(1)  975/     44C : 78                  		ld	a,b
(1)  976/     44D : FD 75 23            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1)  977/     450 : FD 74 24            		ld	(iy+(trk_RomPatt+1)),h
(1)  978/     453 : FD 77 25            		ld	(iy+(trk_RomPatt+2)),a
(1)  979/     456 : CF                  		rst	8
(1)  980/     457 : FD 5E 2A            		ld	e,(iy+trk_ChnCHead)
(1)  981/     45A : FD 56 2B            		ld	d,(iy+(trk_ChnCHead+1))
(1)  982/     45D : FD 73 06            		ld	(iy+trk_Patt),e
(1)  983/     460 : FD 72 07            		ld	(iy+(trk_Patt+1)),d
(1)  984/     463 : CD C8 0E            		call	transferRom		; ** ROM access **
(1)  985/     466 : CD 7F 04            		call	.grab_rhead		; Block data
(1)  986/     469 : FD 4E 1D            		ld	c,(iy+trk_MaxBlks)
(1)  987/     46C : 78                  		ld	a,b
(1)  988/     46D : FD 5E 28            		ld	e,(iy+trk_ChnCBlk)
(1)  989/     470 : FD 56 29            		ld	d,(iy+(trk_ChnCBlk+1))
(1)  990/     473 : FD 73 04            		ld	(iy+trk_Blocks),e
(1)  991/     476 : FD 72 05            		ld	(iy+(trk_Blocks+1)),d
(1)  992/     479 : CD C8 0E            		call	transferRom		; ** ROM access **
(1)  993/     47C : C3 66 03            		jp	.set_track
(1)  994/     47F :                     
(1)  995/     47F :                     ; Read 68K pointer:
(1)  996/     47F :                     ; hl - 00xxxx
(1)  997/     47F :                     ;  b - xx0000
(1)  998/     47F :                     .grab_rhead:
(1)  999/     47F : DD 6E 00            		ld	l,(ix)
(1) 1000/     482 : DD 2B               		dec	ix
(1) 1001/     484 : CF                  		rst	8
(1) 1002/     485 : DD 66 00            		ld	h,(ix)
(1) 1003/     488 : DD 2B               		dec	ix
(1) 1004/     48A : DD 46 00            		ld	b,(ix)
(1) 1005/     48D : DD 2B               		dec	ix
(1) 1006/     48F :                     ; 		ld	c,(ix)
(1) 1007/     48F : CF                  		rst	8
(1) 1008/     490 : DD 2B               		dec	ix
(1) 1009/     492 : C9                  		ret
(1) 1010/     493 :                     
(1) 1011/     493 :                     ; ----------------------------------------
(1) 1012/     493 :                     ; Reset tracker channels
(1) 1013/     493 :                     ;
(1) 1014/     493 :                     ; iy - Track buffer
(1) 1015/     493 :                     ;
(1) 1016/     493 :                     ; Breaks:
(1) 1017/     493 :                     ; ix
(1) 1018/     493 :                     ; ----------------------------------------
(1) 1019/     493 :                     
(1) 1020/     493 :                     ; ----------------------------------------
(1) 1021/     493 :                     ; Reset tracker channels
(1) 1022/     493 :                     ;
(1) 1023/     493 :                     ; iy - Track buffer
(1) 1024/     493 :                     ;
(1) 1025/     493 :                     ; Breaks:
(1) 1026/     493 :                     ; de,ix
(1) 1027/     493 :                     ; ----------------------------------------
(1) 1028/     493 :                     
(1) 1029/     493 :                     track_out:
(1) 1030/     493 : FD 5E 26            		ld	e,(iy+trk_ChnList)	; Point to track-data
(1) 1031/     496 : FD 56 27            		ld	d,(iy+(trk_ChnList+1))
(1) 1032/     499 : D5                  		push	de
(1) 1033/     49A : DD E1               		pop	ix
(1) 1034/     49C : CF                  		rst	8
(1) 1035/     49D : 11 08 00            		ld	de,8
(1) 1036/     4A0 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	; MAX_TRKCHN
(1) 1037/     4A3 : AF                  		xor	a
(1) 1038/     4A4 :                     .clrfe:
(1) 1039/     4A4 : DD 7E 01            		ld	a,(ix+chnl_Chip)
(1) 1040/     4A7 : B7                  		or	a
(1) 1041/     4A8 : 28 1D               		jr	z,.nochip
(1) 1042/     4AA : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1043/     4AE : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1044/     4B2 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1045/     4B6 : CF                  		rst	8
(1) 1046/     4B7 : FD 36 05 00         		ld	(iy+chnl_EffId),0
(1) 1047/     4BB : FD 36 06 00         		ld	(iy+chnl_EffArg),0
(1) 1048/     4BF : FD 36 03 00         		ld	(iy+chnl_Ins),0
(1) 1049/     4C3 : FD 36 07 00         		ld	(iy+chnl_Type),0
(1) 1050/     4C7 :                     .nochip:
(1) 1051/     4C7 : DD 19               		add	ix,de
(1) 1052/     4C9 : 10 D9               		djnz	.clrfe
(1) 1053/     4CB : 3E 01               		ld	a,1
(1) 1054/     4CD : 32 3F 00            		ld	(marsUpd),a
(1) 1055/     4D0 : C9                  		ret
(1) 1056/     4D1 :                     
(1) 1057/     4D1 :                     ; ----------------------------------------
(1) 1058/     4D1 :                     ; Load tracklist from ROM
(1) 1059/     4D1 :                     ;
(1) 1060/     4D1 :                     ; a - SeqID
(1) 1061/     4D1 :                     ; ----------------------------------------
(1) 1062/     4D1 :                     
(1) 1063/     4D1 :                     get_RomTrcks:
(1) 1064/     4D1 : E6 F0               		and	11110000b
(1) 1065/     4D3 : 5F                  		ld	e,a
(1) 1066/     4D4 : 3A 3E 00            		ld	a,(trkListPage)
(1) 1067/     4D7 : BB                  		cp	e
(1) 1068/     4D8 : C8                  		ret	z
(1) 1069/     4D9 :                     init_RomTrcks:
(1) 1070/     4D9 : 7B                  		ld	a,e
(1) 1071/     4DA : 32 3E 00            		ld	(trkListPage),a
(1) 1072/     4DD : 07                  		rlca
(1) 1073/     4DE : 07                  		rlca			; 10h*4=40h
(1) 1074/     4DF : E6 C0               		and	11000000b
(1) 1075/     4E1 : 5F                  		ld	e,a
(1) 1076/     4E2 : 7A                  		ld	a,d
(1) 1077/     4E3 : CF                  		rst	8
(1) 1078/     4E4 : E6 03               		and	00000011b	; * 40h
(1) 1079/     4E6 : 57                  		ld	d,a
(1) 1080/     4E7 : 21 29 14            		ld	hl,nikona_SetMstrList
(1) 1081/     4EA : 23                  		inc	hl
(1) 1082/     4EB : 7E                  		ld	a,(hl)
(1) 1083/     4EC : 23                  		inc	hl
(1) 1084/     4ED : 4E                  		ld	c,(hl)
(1) 1085/     4EE : 23                  		inc	hl
(1) 1086/     4EF : 6E                  		ld	l,(hl)
(1) 1087/     4F0 : CF                  		rst	8
(1) 1088/     4F1 : 61                  		ld	h,c
(1) 1089/     4F2 : 19                  		add	hl,de
(1) 1090/     4F3 : CE 00               		adc	a,0
(1) 1091/     4F5 : 11 B7 16            		ld	de,trkListCach
(1) 1092/     4F8 : 01 40 00            		ld	bc,4*10h
(1) 1093/     4FB : C3 C8 0E            		jp	transferRom	; *** ROM ACCESS ***
(1) 1094/     4FE :                     
(1) 1095/     4FE :                     ; ============================================================
(1) 1096/     4FE :                     ; --------------------------------------------------------
(1) 1097/     4FE :                     ; Convert notes to soundchips
(1) 1098/     4FE :                     ; --------------------------------------------------------
(1) 1099/     4FE :                     
(1) 1100/     4FE :                     set_chips:
(1) 1101/     4FE : E7                  		rst	20h			; Refill wave
(1) 1102/     4FF : CD 87 0E            		call	get_tick
(1) 1103/     502 : FD 21 F7 13         		ld	iy,nikona_BuffList
(1) 1104/     506 :                     .trk_buffrs:
(1) 1105/     506 : CF                  		rst	8
(1) 1106/     507 : FD 7E 00            		ld	a,(iy)
(1) 1107/     50A : FE FF               		cp	-1
(1) 1108/     50C : 28 15               		jr	z,proc_chips
(1) 1109/     50E : FD E5               		push	iy
(1) 1110/     510 : FD 6E 00            		ld	l,(iy)
(1) 1111/     513 : FD 66 01            		ld	h,(iy+1)
(1) 1112/     516 : CD 43 05            		call	tblbuff_read
(1) 1113/     519 : CF                  		rst	8
(1) 1114/     51A : FD E1               		pop	iy
(1) 1115/     51C : 11 10 00            		ld	de,10h
(1) 1116/     51F : FD 19               		add	iy,de
(1) 1117/     521 : 18 E3               		jr	.trk_buffrs
(1) 1118/     523 :                     proc_chips:
(1) 1119/     523 : E7                  		rst	20h
(1) 1120/     524 : FD 21 6F 14         		ld	iy,tblPSGN		; PSG Noise (FIRST)
(1) 1121/     528 : CD E6 06            		call	dtbl_singl
(1) 1122/     52B : 00                  		nop
(1) 1123/     52C : 00                  		nop
(1) 1124/     52D : FD 21 3D 14         		ld	iy,tblPSG		; PSG Squares
(1) 1125/     531 : CD D0 06            		call	dtbl_multi
(1) 1126/     534 : FD 21 7F 14         		ld	iy,tblFM
(1) 1127/     538 : CD D0 06            		call	dtbl_multi
(1) 1128/     53B : FD 21 E1 14         		ld	iy,tblPWM
(1) 1129/     53F : CD D0 06            		call	dtbl_multi
(1) 1130/     542 : C9                  		ret
(1) 1131/     543 :                     
(1) 1132/     543 :                     ; ----------------------------------------
(1) 1133/     543 :                     ; Read current track
(1) 1134/     543 :                     tblbuff_read:
(1) 1135/     543 : E5                  		push	hl
(1) 1136/     544 : FD E1               		pop	iy
(1) 1137/     546 : FD 46 00            		ld	b,(iy+trk_status)	; bit7: Track active?
(1) 1138/     549 : CB 78               		bit	7,b
(1) 1139/     54B : C8                  		ret	z
(1) 1140/     54C :                     ; 		ret
(1) 1141/     54C :                     ; .go_read:
(1) 1142/     54C : 78                  		ld	a,b			; trk_Status == -1?
(1) 1143/     54D : FE FF               		cp	-1
(1) 1144/     54F : C2 59 05            		jp	nz,.track_cont
(1) 1145/     552 : CD 93 04            		call	track_out
(1) 1146/     555 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1147/     559 :                     .track_cont:
(1) 1148/     559 : CF                  		rst	8
(1) 1149/     55A : FD 6E 26            		ld	l,(iy+trk_ChnList)
(1) 1150/     55D : FD 66 27            		ld	h,(iy+(trk_ChnList+1))
(1) 1151/     560 : E5                  		push	hl
(1) 1152/     561 : DD E1               		pop	ix			; iy - channel list
(1) 1153/     563 : FD 46 1C            		ld	b,(iy+trk_MaxChnls)	;MAX_TRKCHN
(1) 1154/     566 :                     
(1) 1155/     566 :                     ; ** Needs special delays to
(1) 1156/     566 :                     ; keep the samplerate
(1) 1157/     566 :                     .next_chnl:
(1) 1158/     566 : C5                  		push	bc
(1) 1159/     567 : DD 7E 00            		ld	a,(ix)			; ** chnl_Flags
(1) 1160/     56A : E6 0F               		and	00001111b
(1) 1161/     56C : C4 79 05            		call	nz,.do_chip
(1) 1162/     56F : C1                  		pop	bc
(1) 1163/     570 : 11 08 00            		ld	de,8
(1) 1164/     573 : DD 19               		add	ix,de
(1) 1165/     575 : CF                  		rst	8	; wave sync
(1) 1166/     576 : 10 EE               		djnz	.next_chnl
(1) 1167/     578 : C9                  		ret
(1) 1168/     579 :                     
(1) 1169/     579 :                     ; ----------------------------------------
(1) 1170/     579 :                     ; iy - Track buffer
(1) 1171/     579 :                     ; ix - Current channel
(1) 1172/     579 :                     
(1) 1173/     579 :                     .do_chip:
(1) 1174/     579 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1175/     57C : B7                  		or	a
(1) 1176/     57D : C8                  		ret	z
(1) 1177/     57E : FD 56 1F            		ld	d,(iy+trk_MaxIns)
(1) 1178/     581 : BA                  		cp	d
(1) 1179/     582 : C8                  		ret	z
(1) 1180/     583 : D0                  		ret	nc
(1) 1181/     584 : 3D                  		dec	a			; ins-1
(1) 1182/     585 : 0F                  		rrca				; * 08h
(1) 1183/     586 : 0F                  		rrca
(1) 1184/     587 : 0F                  		rrca
(1) 1185/     588 : 0F                  		rrca
(1) 1186/     589 : CF                  		rst	8
(1) 1187/     58A : 0F                  		rrca
(1) 1188/     58B : 57                  		ld	d,a
(1) 1189/     58C : E6 F8               		and	11111000b
(1) 1190/     58E : 5F                  		ld	e,a
(1) 1191/     58F : 7A                  		ld	a,d
(1) 1192/     590 : E6 07               		and	00000111b
(1) 1193/     592 : 57                  		ld	d,a
(1) 1194/     593 : FD 6E 08            		ld	l,(iy+trk_Instr)	; hl - Intrument data
(1) 1195/     596 : FD 66 09            		ld	h,(iy+(trk_Instr+1))
(1) 1196/     599 : 7B                  		ld	a,e
(1) 1197/     59A : 19                  		add	hl,de
(1) 1198/     59B : CF                  		rst	8
(1) 1199/     59C : E5                  		push	hl			; <-- save ins pos
(1) 1200/     59D : CD AF 05            		call	.grab_link
(1) 1201/     5A0 : D1                  		pop	de			; --> recover as de
(1) 1202/     5A1 : FE FF               		cp	-1			; Found any link?
(1) 1203/     5A3 : C8                  		ret	z
(1) 1204/     5A4 : FD 7E 14            		ld	a,(iy+trk_Priority)	; a - Set priority level
(1) 1205/     5A7 : 23                  		inc	hl			; Skip link
(1) 1206/     5A8 : 23                  		inc	hl
(1) 1207/     5A9 : 77                  		ld	(hl),a			; Write priority
(1) 1208/     5AA : 23                  		inc	hl
(1) 1209/     5AB : 73                  		ld	(hl),e			; Write Instrument pointer
(1) 1210/     5AC : 23                  		inc	hl
(1) 1211/     5AD : 72                  		ld	(hl),d
(1) 1212/     5AE : C9                  		ret
(1) 1213/     5AF :                     
(1) 1214/     5AF :                     ; ----------------------------------------
(1) 1215/     5AF :                     ; Search for a linked channel on the
(1) 1216/     5AF :                     ; chip table
(1) 1217/     5AF :                     ;
(1) 1218/     5AF :                     ; Input:
(1) 1219/     5AF :                     ; iy - Track buffer
(1) 1220/     5AF :                     ; ix - Current channel
(1) 1221/     5AF :                     ; hl - Intrument position
(1) 1222/     5AF :                     ;
(1) 1223/     5AF :                     ; Returns:
(1) 1224/     5AF :                     ; hl - Channel table to use
(1) 1225/     5AF :                     ;  a - Return value:
(1) 1226/     5AF :                     ;       0 - Found
(1) 1227/     5AF :                     ;      -1 - Not found
(1) 1228/     5AF :                     ; ----------------------------------------
(1) 1229/     5AF :                     
(1) 1230/     5AF :                     .grab_link:
(1) 1231/     5AF : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1232/     5B0 : E6 F0               		and	11110000b		; Filter 0F0h
(1) 1233/     5B2 : F2 9B 06            		jp	p,.set_asfull		; Set -1 if non-minus.
(1) 1234/     5B5 : 5F                  		ld	e,a			; Save NEW chip to e
(1) 1235/     5B6 : CF                  		rst	8
(1) 1236/     5B7 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - check OUR chip
(1) 1237/     5BA : E6 F0               		and	11110000b		; Filter bits too.
(1) 1238/     5BC : CA 33 06            		jp	z,.new_chip		; If zero: Set NEW chip
(1) 1239/     5BF : BB                  		cp 	e
(1) 1240/     5C0 : CA D6 05            		jp	z,.srch_link		; If same: Grab our link
(1) 1241/     5C3 : 57                  		ld	d,a			; d - OLD chip
(1) 1242/     5C4 : D5                  		push	de
(1) 1243/     5C5 : CD D6 05            		call	.srch_link		; Search our link (first)
(1) 1244/     5C8 : D1                  		pop	de
(1) 1245/     5C9 : FE FF               		cp	-1
(1) 1246/     5CB : C8                  		ret	z
(1) 1247/     5CC : CD B8 06            		call	.reset_link
(1) 1248/     5CF : DD 36 01 00         		ld	(ix+chnl_Chip),0
(1) 1249/     5D3 : C3 32 06            		jp	.do_newchip
(1) 1250/     5D6 :                     
(1) 1251/     5D6 :                     ; ** RELINK **
(1) 1252/     5D6 :                     ; e - Our current chip
(1) 1253/     5D6 :                     .srch_link:
(1) 1254/     5D6 : CD 9E 06            		call	.pick_tbl	; Pick our table
(1) 1255/     5D9 : B7                  		or	a
(1) 1256/     5DA : FA 1F 06            		jp	m,.singl_link
(1) 1257/     5DD : DD E5               		push	ix		; copy ix to bc
(1) 1258/     5DF : C1                  		pop	bc
(1) 1259/     5E0 :                     .srch_lloop:
(1) 1260/     5E0 : CF                  		rst	8
(1) 1261/     5E1 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1262/     5E2 : FE FF               		cp	-1		; If -1, return -1
(1) 1263/     5E4 : 28 49               		jr	z,.refill
(1) 1264/     5E6 : B9                  		cp	c
(1) 1265/     5E7 : 20 07               		jr	nz,.invldl
(1) 1266/     5E9 : 23                  		inc	hl
(1) 1267/     5EA : CF                  		rst	8
(1) 1268/     5EB : 7E                  		ld	a,(hl)
(1) 1269/     5EC : 2B                  		dec	hl
(1) 1270/     5ED : B8                  		cp	b
(1) 1271/     5EE : 28 09               		jr	z,.reroll
(1) 1272/     5F0 :                     .invldl:
(1) 1273/     5F0 : D5                  		push	de
(1) 1274/     5F1 : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1275/     5F4 : CF                  		rst	8
(1) 1276/     5F5 : 19                  		add	hl,de
(1) 1277/     5F6 : D1                  		pop	de
(1) 1278/     5F7 : 18 E7               		jr	.srch_lloop
(1) 1279/     5F9 :                     .reroll:
(1) 1280/     5F9 :                     	; *** Special re-roll check ***
(1) 1281/     5F9 : E5                  		push	hl
(1) 1282/     5FA : 01 05 00            		ld	bc,5		; <-- fake "iy+05h"
(1) 1283/     5FD : 09                  		add	hl,bc
(1) 1284/     5FE : 4E                  		ld	c,(hl)		; c - ID
(1) 1285/     5FF : E1                  		pop	hl
(1) 1286/     600 : 7B                  		ld	a,e
(1) 1287/     601 : FE 80               		cp	80h		; PSG?
(1) 1288/     603 : 28 02               		jr	z,.chk_psg
(1) 1289/     605 :                     ; 		cp	0A0h		; FM normal?
(1) 1290/     605 :                     ; 		jr	z,.chk_fm
(1) 1291/     605 : 18 26               		jr	.rnot_psg
(1) 1292/     607 :                     .chk_psg:
(1) 1293/     607 : 3A 06 17            		ld	a,(psgHatMode)
(1) 1294/     60A : E6 03               		and	011b
(1) 1295/     60C : FE 03               		cp	011b
(1) 1296/     60E : 20 1D               		jr	nz,.rnot_psg
(1) 1297/     610 : 79                  		ld	a,c
(1) 1298/     611 : FE 02               		cp	2
(1) 1299/     613 : 20 18               		jr	nz,.rnot_psg
(1) 1300/     615 : CF                  		rst	8
(1) 1301/     616 : 16 80               		ld	d,80h		; Set PSG silence
(1) 1302/     618 : CD B8 06            		call	.reset_link	; on PSG3
(1) 1303/     61B : C3 9B 06            		jp	.set_asfull
(1) 1304/     61E : 00                  		nop
(1) 1305/     61F :                     
(1) 1306/     61F :                     ; ----------------------
(1) 1307/     61F :                     ; PSGN/FM3/FM6
(1) 1308/     61F :                     .singl_link:
(1) 1309/     61F : DD E5               		push	ix			; copy ix to bc
(1) 1310/     621 : C1                  		pop	bc
(1) 1311/     622 : 23                  		inc	hl			; Read MSB first
(1) 1312/     623 : CF                  		rst	8
(1) 1313/     624 : 7E                  		ld	a,(hl)
(1) 1314/     625 : 2B                  		dec	hl
(1) 1315/     626 : B8                  		cp	b			; MSB match?
(1) 1316/     627 : 20 06               		jr	nz,.refill
(1) 1317/     629 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1318/     62A : B9                  		cp	c
(1) 1319/     62B : 20 02               		jr	nz,.refill
(1) 1320/     62D :                     
(1) 1321/     62D :                     ; ----------------------
(1) 1322/     62D :                     
(1) 1323/     62D :                     .rnot_psg:
(1) 1324/     62D : AF                  		xor	a
(1) 1325/     62E : C9                  		ret
(1) 1326/     62F :                     ; ***
(1) 1327/     62F :                     .refill:
(1) 1328/     62F : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1329/     632 :                     .do_newchip:
(1) 1330/     632 : 7B                  		ld	a,e
(1) 1331/     633 :                     
(1) 1332/     633 :                     ; *** NEW CHIP ***
(1) 1333/     633 :                     ; e - Chip to set
(1) 1334/     633 :                     .new_chip:
(1) 1335/     633 : 7B                  		ld	a,e			; Read NEW chip
(1) 1336/     634 : B7                  		or	a			; If non-minus, exit.
(1) 1337/     635 : F0                  		ret	p
(1) 1338/     636 : CD 9E 06            		call	.pick_tbl
(1) 1339/     639 : CF                  		rst	8
(1) 1340/     63A : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1341/     63D : B7                  		or	a
(1) 1342/     63E : FA 89 06            		jp	m,.singl_free
(1) 1343/     641 : E5                  		push	hl			; Backup START table
(1) 1344/     642 :                     ; PASS 1
(1) 1345/     642 :                     .srch_free:
(1) 1346/     642 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1347/     643 : FE FF               		cp	-1			; If -1, return -1
(1) 1348/     645 : 28 0C               		jr	z,.pass_2
(1) 1349/     647 : 23                  		inc	hl
(1) 1350/     648 : 46                  		ld	b,(hl)			; Read MSB
(1) 1351/     649 : CF                  		rst	8
(1) 1352/     64A : 2B                  		dec	hl
(1) 1353/     64B : B0                  		or	b
(1) 1354/     64C : 28 26               		jr	z,.new_link_z
(1) 1355/     64E : CD 6A 06            		call	.nextsrch_tbl
(1) 1356/     651 : 18 EF               		jr	.srch_free
(1) 1357/     653 :                     ; PASS 2
(1) 1358/     653 :                     .pass_2:
(1) 1359/     653 : CF                  		rst	8
(1) 1360/     654 : E1                  		pop	hl
(1) 1361/     655 :                     .next_prio:
(1) 1362/     655 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1363/     656 : FE FF               		cp	-1		; If -1, return -1
(1) 1364/     658 : C8                  		ret	z
(1) 1365/     659 : 23                  		inc	hl
(1) 1366/     65A : 23                  		inc	hl
(1) 1367/     65B : 7E                  		ld	a,(hl)
(1) 1368/     65C : 2B                  		dec	hl
(1) 1369/     65D : 2B                  		dec	hl
(1) 1370/     65E : B9                  		cp	c
(1) 1371/     65F : 38 17               		jr	c,.new_link_o
(1) 1372/     661 : B7                  		or	a
(1) 1373/     662 : 28 14               		jr	z,.new_link
(1) 1374/     664 : CF                  		rst	8
(1) 1375/     665 : CD 6A 06            		call	.nextsrch_tbl
(1) 1376/     668 : 18 EB               		jr	.next_prio
(1) 1377/     66A :                     
(1) 1378/     66A :                     .nextsrch_tbl:
(1) 1379/     66A : D5                  		push	de
(1) 1380/     66B : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1381/     66E : 19                  		add	hl,de
(1) 1382/     66F : D1                  		pop	de
(1) 1383/     670 : CF                  		rst	8
(1) 1384/     671 : 00                  		nop	; wave sync
(1) 1385/     672 : 00                  		nop
(1) 1386/     673 : C9                  		ret
(1) 1387/     674 :                     .new_link_z:
(1) 1388/     674 : 33                  		inc	sp		; skip backup
(1) 1389/     675 : 33                  		inc	sp
(1) 1390/     676 : 18 00               		jr	.new_link
(1) 1391/     678 :                     
(1) 1392/     678 :                     ; OVERWRITE link
(1) 1393/     678 :                     .new_link_o:
(1) 1394/     678 :                     
(1) 1395/     678 :                     ; NEW link
(1) 1396/     678 :                     .new_link:
(1) 1397/     678 : CF                  		rst	8
(1) 1398/     679 : 23                  		inc	hl
(1) 1399/     67A : 23                  		inc	hl
(1) 1400/     67B :                     ; hl+2
(1) 1401/     67B :                     .l_hiprio:
(1) 1402/     67B : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1403/     67E : DD E5               		push	ix
(1) 1404/     680 : D1                  		pop	de
(1) 1405/     681 : CF                  		rst	8
(1) 1406/     682 : 71                  		ld	(hl),c		; write priority
(1) 1407/     683 : 2B                  		dec	hl		; -1
(1) 1408/     684 : 72                  		ld 	(hl),d		; MSB
(1) 1409/     685 : 2B                  		dec	hl
(1) 1410/     686 : 73                  		ld	(hl),e		; LSB
(1) 1411/     687 : AF                  		xor	a
(1) 1412/     688 : C9                  		ret
(1) 1413/     689 :                     ; Single slot
(1) 1414/     689 :                     .singl_free:
(1) 1415/     689 : CF                  		rst	8
(1) 1416/     68A : 46                  		ld	b,(hl)
(1) 1417/     68B : 23                  		inc	hl
(1) 1418/     68C : 7E                  		ld	a,(hl)
(1) 1419/     68D : 23                  		inc	hl
(1) 1420/     68E : B0                  		or	b
(1) 1421/     68F : 28 EA               		jr	z,.l_hiprio
(1) 1422/     691 : 7E                  		ld	a,(hl)
(1) 1423/     692 : B9                  		cp	c
(1) 1424/     693 : 28 E6               		jr	z,.l_hiprio
(1) 1425/     695 : 38 E4               		jr	c,.l_hiprio		; PRIORITY
(1) 1426/     697 : B7                  		or	a
(1) 1427/     698 : 28 E1               		jr	z,.l_hiprio
(1) 1428/     69A :                     .sngl_sprio:
(1) 1429/     69A : CF                  		rst	8
(1) 1430/     69B :                     
(1) 1431/     69B :                     ; Set "can't use" table flag
(1) 1432/     69B :                     .set_asfull:
(1) 1433/     69B : 3E FF               		ld	a,-1
(1) 1434/     69D : C9                  		ret
(1) 1435/     69E :                     
(1) 1436/     69E :                     ; Pick chip table
(1) 1437/     69E :                     ; In:
(1) 1438/     69E :                     ;  e - ID
(1) 1439/     69E :                     ;
(1) 1440/     69E :                     ; Out:
(1) 1441/     69E :                     ; hl - Table
(1) 1442/     69E :                     .pick_tbl:
(1) 1443/     69E : D5                  		push	de
(1) 1444/     69F : 0F                  		rrca
(1) 1445/     6A0 : 0F                  		rrca
(1) 1446/     6A1 : 0F                  		rrca
(1) 1447/     6A2 : 0F                  		rrca
(1) 1448/     6A3 : E6 07               		and	00000111b
(1) 1449/     6A5 : 87                  		add	a,a
(1) 1450/     6A6 : 21 2D 14            		ld	hl,tblList
(1) 1451/     6A9 : E5                  		push	hl
(1) 1452/     6AA : 16 00               		ld	d,0
(1) 1453/     6AC : 5F                  		ld	e,a
(1) 1454/     6AD : 19                  		add	hl,de
(1) 1455/     6AE : 5E                  		ld	e,(hl)
(1) 1456/     6AF : 23                  		inc	hl
(1) 1457/     6B0 : 7E                  		ld	a,(hl)
(1) 1458/     6B1 : 57                  		ld	d,a
(1) 1459/     6B2 : CB BA               		res	7,d
(1) 1460/     6B4 : E1                  		pop	hl
(1) 1461/     6B5 : 19                  		add	hl,de
(1) 1462/     6B6 : D1                  		pop	de
(1) 1463/     6B7 : C9                  		ret
(1) 1464/     6B8 :                     
(1) 1465/     6B8 :                     ; d - Silence chip
(1) 1466/     6B8 :                     ;
(1) 1467/     6B8 :                     ; Uses:
(1) 1468/     6B8 :                     ; bc
(1) 1469/     6B8 :                     .reset_link:
(1) 1470/     6B8 : CF                  		rst	8
(1) 1471/     6B9 : 36 00               		ld	(hl),0			; Delete link
(1) 1472/     6BB : 23                  		inc	hl
(1) 1473/     6BC : 36 00               		ld	(hl),0
(1) 1474/     6BE : 23                  		inc	hl
(1) 1475/     6BF : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 1476/     6C0 : 01 06 00            		ld	bc,8-2			; Go to 08h
(1) 1477/     6C3 : 09                  		add	hl,bc
(1) 1478/     6C4 : 06 04               		ld	b,8/2
(1) 1479/     6C6 :                     .clrfull:
(1) 1480/     6C6 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 1481/     6C8 : 23                  		inc	hl
(1) 1482/     6C9 : 36 00               		ld	(hl),0
(1) 1483/     6CB : 23                  		inc	hl
(1) 1484/     6CC : CF                  		rst	8
(1) 1485/     6CD : 10 F7               		djnz	.clrfull
(1) 1486/     6CF : C9                  		ret
(1) 1487/     6D0 :                     
(1) 1488/     6D0 :                     ; ============================================
(1) 1489/     6D0 :                     ; ----------------------------------------
(1) 1490/     6D0 :                     ; Process chip using it's table
(1) 1491/     6D0 :                     ;
(1) 1492/     6D0 :                     ; iy - table to read
(1) 1493/     6D0 :                     ;  c - Chip ID
(1) 1494/     6D0 :                     ; ----------------------------------------
(1) 1495/     6D0 :                     
(1) 1496/     6D0 :                     dtbl_multi:
(1) 1497/     6D0 : FD 7E 00            		ld	a,(iy)
(1) 1498/     6D3 : FE FF               		cp	-1
(1) 1499/     6D5 : C8                  		ret	z
(1) 1500/     6D6 : CD E7 06            		call	dtbl_frommul
(1) 1501/     6D9 : CF                  		rst	8
(1) 1502/     6DA : 11 10 00            		ld	de,MAX_TBLSIZE
(1) 1503/     6DD : FD 19               		add	iy,de
(1) 1504/     6DF : 00                  		nop	; WAVE SYNC
(1) 1505/     6E0 : 00                  		nop
(1) 1506/     6E1 : 00                  		nop
(1) 1507/     6E2 : 00                  		nop
(1) 1508/     6E3 : CF                  		rst	8
(1) 1509/     6E4 : 18 EA               		jr	dtbl_multi
(1) 1510/     6E6 :                     dtbl_singl:
(1) 1511/     6E6 : CF                  		rst	8
(1) 1512/     6E7 :                     
(1) 1513/     6E7 :                     dtbl_frommul:
(1) 1514/     6E7 : FD 5E 00            		ld	e,(iy)
(1) 1515/     6EA : FD 56 01            		ld	d,(iy+1)
(1) 1516/     6ED : 7A                  		ld	a,d
(1) 1517/     6EE : B3                  		or	e
(1) 1518/     6EF : 20 53               		jr	nz,.linked
(1) 1519/     6F1 : FD 7E 02            		ld	a,(iy+2)	; Any 80h+ Flag?
(1) 1520/     6F4 : B7                  		or	a
(1) 1521/     6F5 : F0                  		ret	p
(1) 1522/     6F6 : FD 7E 02            		ld	a,(iy+2)	; a - chip type
(1) 1523/     6F9 : CF                  		rst	8
(1) 1524/     6FA : FD 36 02 00         		ld	(iy+2),0	; Reset priority
(1) 1525/     6FE :                     
(1) 1526/     6FE :                     ; ----------------------------------------
(1) 1527/     6FE :                     ; chip-silence request
(1) 1528/     6FE :                     ; iy - Table
(1) 1529/     6FE : E6 F0               		and	11110000b
(1) 1530/     700 : FE 80               		cp	80h
(1) 1531/     702 : 28 1A               		jr	z,.siln_psg
(1) 1532/     704 : FE 90               		cp	90h
(1) 1533/     706 : 28 12               		jr	z,.siln_psg_n
(1) 1534/     708 : FE A0               		cp	0A0h
(1) 1535/     70A : 28 1C               		jr	z,.siln_fm
(1) 1536/     70C : FE B0               		cp	0B0h
(1) 1537/     70E : 28 18               		jr	z,.siln_fm
(1) 1538/     710 : CF                  		rst	8
(1) 1539/     711 : FE C0               		cp	0C0h
(1) 1540/     713 : 28 10               		jr	z,.siln_dac
(1) 1541/     715 : FE D0               		cp	0D0h
(1) 1542/     717 : 28 15               		jr	z,.siln_pwm
(1) 1543/     719 : C9                  		ret
(1) 1544/     71A :                     .siln_psg_n:
(1) 1545/     71A : AF                  		xor	a
(1) 1546/     71B : 32 06 17            		ld	(psgHatMode),a
(1) 1547/     71E :                     .siln_psg:
(1) 1548/     71E : CF                  		rst	8
(1) 1549/     71F : DD 21 7B 16         		ld	ix,psgcom
(1) 1550/     723 : 18 13               		jr	.rcyl_com
(1) 1551/     725 :                     
(1) 1552/     725 :                     ; --------------------------------
(1) 1553/     725 :                     
(1) 1554/     725 :                     .siln_dac:
(1) 1555/     725 : CD E0 10            		call	dac_off
(1) 1556/     728 :                     .siln_fm:
(1) 1557/     728 : CD D1 0C            		call	.fm_keyoff
(1) 1558/     72B : C3 D9 0C            		jp	.fm_tloff
(1) 1559/     72E :                     
(1) 1560/     72E :                     ; --------------------------------
(1) 1561/     72E :                     
(1) 1562/     72E :                     .siln_pwm:
(1) 1563/     72E : 3E 01               		ld	a,1
(1) 1564/     730 : 32 3F 00            		ld	(marsUpd),a
(1) 1565/     733 : CF                  		rst	8
(1) 1566/     734 : DD 21 43 16         		ld	ix,pwmcom
(1) 1567/     738 :                     .rcyl_com:
(1) 1568/     738 : 06 00               		ld	b,0
(1) 1569/     73A : FD 4E 05            		ld	c,(iy+05h)
(1) 1570/     73D : DD 09               		add	ix,bc
(1) 1571/     73F : DD 36 00 04         		ld	(ix),100b
(1) 1572/     743 : C9                  		ret
(1) 1573/     744 :                     
(1) 1574/     744 :                     ; ----------------------------------------
(1) 1575/     744 :                     ; Process channel now
(1) 1576/     744 :                     ; iy - Table
(1) 1577/     744 :                     ; ix - Tracker channel
(1) 1578/     744 :                     .linked:
(1) 1579/     744 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1580/     745 : 47                  		ld	b,a		; b - flags to check
(1) 1581/     746 : E6 0F               		and	00001111b	; Filter flags
(1) 1582/     748 : C8                  		ret	z
(1) 1583/     749 : 78                  		ld	a,b
(1) 1584/     74A : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1585/     74C : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1586/     74D : D5                  		push	de
(1) 1587/     74E : DD E1               		pop	ix
(1) 1588/     750 : FD 6E 03            		ld	l,(iy+03h)
(1) 1589/     753 : FD 66 04            		ld	h,(iy+04h)
(1) 1590/     756 :                     
(1) 1591/     756 :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1592/     756 :                     	; iy - Our chip table
(1) 1593/     756 :                     	; ix - Track channel
(1) 1594/     756 :                     	; hl - Intrument data
(1) 1595/     756 : CB 40               		bit	0,b		; Note
(1) 1596/     758 : C4 63 0C            		call	nz,.note
(1) 1597/     75B : CB 48               		bit	1,b		; Intrument
(1) 1598/     75D : C4 ED 0A            		call	nz,.inst
(1) 1599/     760 : CF                  		rst	8
(1) 1600/     761 : CB 50               		bit	2,b		; Volume
(1) 1601/     763 : C4 E4 0A            		call	nz,.volu
(1) 1602/     766 : CB 58               		bit	3,b		; Effect
(1) 1603/     768 : C4 1F 0A            		call	nz,.effc
(1) 1604/     76B : 78                  		ld	a,b
(1) 1605/     76C : E6 0F               		and	00001111b
(1) 1606/     76E : C8                  		ret	z
(1) 1607/     76F : CF                  		rst	8
(1) 1608/     770 :                     
(1) 1609/     770 :                     ; ----------------------------------------
(1) 1610/     770 :                     ; Process channel now
(1) 1611/     770 :                     ;
(1) 1612/     770 :                     ; b - Note bits
(1) 1613/     770 :                     ; ----------------------------------------
(1) 1614/     770 :                     
(1) 1615/     770 : 7E                  		ld	a,(hl)
(1) 1616/     771 : E6 70               		and	01110000b	; <--
(1) 1617/     773 : 0F                  		rrca
(1) 1618/     774 : 0F                  		rrca
(1) 1619/     775 : 0F                  		rrca
(1) 1620/     776 : 16 00               		ld	d,0
(1) 1621/     778 : 5F                  		ld	e,a
(1) 1622/     779 : 21 82 07            		ld	hl,.mk_list
(1) 1623/     77C : 19                  		add	hl,de
(1) 1624/     77D : 7E                  		ld	a,(hl)
(1) 1625/     77E : 23                  		inc	hl
(1) 1626/     77F : 66                  		ld	h,(hl)
(1) 1627/     780 : 6F                  		ld	l,a
(1) 1628/     781 : E9                  		jp	(hl)
(1) 1629/     782 :                     ; --------------------------------
(1) 1630/     782 :                     .mk_list:
(1) 1631/     782 : B0 07               		dw .mk_psg
(1) 1632/     784 : 92 07               		dw .mk_psgn
(1) 1633/     786 : 26 08               		dw .mk_fm
(1) 1634/     788 : 98 08               		dw .mk_fmspc
(1) 1635/     78A : 1E 09               		dw .mk_dac
(1) 1636/     78C : 74 09               		dw .mk_pwm
(1) 1637/     78E : 00 00               		dw 0
(1) 1638/     790 : 00 00               		dw 0
(1) 1639/     792 :                     
(1) 1640/     792 :                     ; --------------------------------
(1) 1641/     792 :                     
(1) 1642/     792 :                     .mk_psgn:
(1) 1643/     792 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1644/     795 : DD E5               		push	ix
(1) 1645/     797 : DD 21 7E 16         		ld	ix,psgcom+3	; <-- direct ix point
(1) 1646/     79B : CF                  		rst	8
(1) 1647/     79C : FE FE               		cp	-2
(1) 1648/     79E : 28 76               		jr	z,.kycut_psgn
(1) 1649/     7A0 : FE FF               		cp	-1
(1) 1650/     7A2 : 28 62               		jr	z,.kyoff_psgn
(1) 1651/     7A4 : 5F                  		ld	e,a
(1) 1652/     7A5 : 3A 06 17            		ld	a,(psgHatMode)	; Tone 3?
(1) 1653/     7A8 : E6 03               		and	011b
(1) 1654/     7AA : FE 03               		cp	011b
(1) 1655/     7AC : 20 42               		jr	nz,.psg_keyon	; Normal
(1) 1656/     7AE : 18 19               		jr	.from_psgn	; Tone 3
(1) 1657/     7B0 :                     .mk_psg:
(1) 1658/     7B0 : CF                  		rst	8
(1) 1659/     7B1 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1660/     7B4 : DD E5               		push	ix
(1) 1661/     7B6 : DD 21 7B 16         		ld	ix,psgcom	; ix - psgcom
(1) 1662/     7BA : FD 5E 05            		ld	e,(iy+05h)
(1) 1663/     7BD : 16 00               		ld	d,0
(1) 1664/     7BF : DD 19               		add	ix,de
(1) 1665/     7C1 : FE FE               		cp	-2
(1) 1666/     7C3 : 28 56               		jr	z,.kycut_psg
(1) 1667/     7C5 : FE FF               		cp	-1
(1) 1668/     7C7 : 28 42               		jr	z,.kyoff_psg
(1) 1669/     7C9 :                     .from_psgn:
(1) 1670/     7C9 : CF                  		rst	8
(1) 1671/     7CA : 16 00               		ld	d,0		; de - note*2
(1) 1672/     7CC : FD 5E 06            		ld	e,(iy+06h)	; Freq index
(1) 1673/     7CF : 21 07 12            		ld	hl,psgFreq_List
(1) 1674/     7D2 : 19                  		add	hl,de
(1) 1675/     7D3 : 7E                  		ld	a,(hl)
(1) 1676/     7D4 : 23                  		inc	hl
(1) 1677/     7D5 : 66                  		ld	h,(hl)
(1) 1678/     7D6 : 6F                  		ld	l,a
(1) 1679/     7D7 : FD 7E 07            		ld	a,(iy+07h)	; pitchbend
(1) 1680/     7DA : 07                  		rlca			; << 3
(1) 1681/     7DB : 07                  		rlca
(1) 1682/     7DC : CF                  		rst	8
(1) 1683/     7DD : 07                  		rlca
(1) 1684/     7DE : 57                  		ld	d,a
(1) 1685/     7DF : E6 F8               		and	11111000b
(1) 1686/     7E1 : 5F                  		ld	e,a
(1) 1687/     7E2 : 7A                  		ld	a,d
(1) 1688/     7E3 : E6 07               		and	00000111b
(1) 1689/     7E5 : 57                  		ld	d,a
(1) 1690/     7E6 : 37                  		scf
(1) 1691/     7E7 : 3F                  		ccf
(1) 1692/     7E8 : ED 52               		sbc	hl,de
(1) 1693/     7EA : DD 75 1C            		ld	(ix+DTL),l
(1) 1694/     7ED : DD 74 20            		ld	(ix+DTH),h
(1) 1695/     7F0 :                     .psg_keyon:
(1) 1696/     7F0 : FD 7E 08            		ld	a,(iy+08h)	; Set volume
(1) 1697/     7F3 : ED 44               		neg	a
(1) 1698/     7F5 : CF                  		rst	8
(1) 1699/     7F6 : 87                  		add	a,a
(1) 1700/     7F7 : 87                  		add	a,a
(1) 1701/     7F8 : 30 02               		jr	nc,.vmuch
(1) 1702/     7FA : 3E FF               		ld	a,-1
(1) 1703/     7FC :                     .vmuch:
(1) 1704/     7FC : DD 77 30            		ld	(ix+PVOL),a
(1) 1705/     7FF : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1706/     803 : DD E1               		pop	ix
(1) 1707/     805 : C9                  		ret
(1) 1708/     806 :                     ; -1
(1) 1709/     806 :                     .kyoff_psgn:
(1) 1710/     806 : 3E 00               		ld	a,000b
(1) 1711/     808 : 32 06 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1712/     80B :                     .kyoff_psg:
(1) 1713/     80B : CF                  		rst	8
(1) 1714/     80C : 0E 02               		ld	c,010b
(1) 1715/     80E : DD 71 00            		ld	(ix),c
(1) 1716/     811 : DD E1               		pop	ix
(1) 1717/     813 : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 1718/     816 :                     ; -2
(1) 1719/     816 :                     .kycut_psgn:
(1) 1720/     816 : 3E 00               		ld	a,000b
(1) 1721/     818 : 32 06 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1722/     81B :                     .kycut_psg:
(1) 1723/     81B : CF                  		rst	8
(1) 1724/     81C : 0E 04               		ld	c,100b
(1) 1725/     81E : DD 71 00            		ld	(ix),c
(1) 1726/     821 : DD E1               		pop	ix
(1) 1727/     823 : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 1728/     826 :                     
(1) 1729/     826 :                     ; --------------------------------
(1) 1730/     826 :                     
(1) 1731/     826 :                     .mk_fm:
(1) 1732/     826 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1733/     829 : FE FE               		cp	-2
(1) 1734/     82B : CA 15 09            		jp	z,.fm_cut
(1) 1735/     82E : FE FF               		cp	-1
(1) 1736/     830 : CA 0F 09            		jp	z,.fm_off
(1) 1737/     833 :                     ; 		call	.fm_tloff
(1) 1738/     833 : CF                  		rst	8
(1) 1739/     834 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1740/     837 : 78                  		ld	a,b		; Note bit?
(1) 1741/     838 : E6 01               		and	0001b
(1) 1742/     83A : 28 1F               		jr	z,.nofm_note
(1) 1743/     83C : FD 46 05            		ld	b,(iy+05h)	; Check channel 3
(1) 1744/     83F : 78                  		ld	a,b
(1) 1745/     840 : FE 02               		cp	2
(1) 1746/     842 : 20 0B               		jr	nz,.not_dspc
(1) 1747/     844 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 1748/     847 : CD B5 10            		call	fm_send_1
(1) 1749/     84A : 3E 00               		ld	a,0
(1) 1750/     84C : 32 07 17            		ld	(fmSpecial),a
(1) 1751/     84F :                     .not_dspc:
(1) 1752/     84F : 78                  		ld	a,b
(1) 1753/     850 : FE 06               		cp	6
(1) 1754/     852 : 20 04               		jr	nz,.not_dac
(1) 1755/     854 : CF                  		rst	8
(1) 1756/     855 : CD E0 10            		call	dac_off
(1) 1757/     858 :                     .not_dac:
(1) 1758/     858 : CD D1 0C            		call	.fm_keyoff
(1) 1759/     85B :                     .nofm_note:
(1) 1760/     85B : FD 7E 06            		ld	a,(iy+06h)
(1) 1761/     85E : 47                  		ld	b,a
(1) 1762/     85F : E6 1F               		and	00011111b
(1) 1763/     861 : 5F                  		ld	e,a
(1) 1764/     862 : 16 00               		ld	d,0
(1) 1765/     864 : 21 EF 11            		ld	hl,fmFreq_List
(1) 1766/     867 : 19                  		add	hl,de
(1) 1767/     868 : 7E                  		ld	a,(hl)
(1) 1768/     869 : CF                  		rst	8
(1) 1769/     86A : 23                  		inc	hl
(1) 1770/     86B : 66                  		ld	h,(hl)
(1) 1771/     86C : 6F                  		ld	l,a
(1) 1772/     86D : 78                  		ld	a,b
(1) 1773/     86E : E6 E0               		and	11100000b
(1) 1774/     870 : 0F                  		rrca
(1) 1775/     871 : 0F                  		rrca
(1) 1776/     872 : B4                  		or	h
(1) 1777/     873 : 67                  		ld	h,a
(1) 1778/     874 : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1779/     877 : CF                  		rst	8
(1) 1780/     878 : AF                  		xor	a		; Clear high
(1) 1781/     879 : 3F                  		ccf			; Clear carry
(1) 1782/     87A : CB 23               		sla	e		; << 2
(1) 1783/     87C : CB 23               		sla	e
(1) 1784/     87E : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1785/     87F : 57                  		ld	d,a
(1) 1786/     880 : 19                  		add	hl,de
(1) 1787/     881 : CD F0 0C            		call	.fm_setfreq
(1) 1788/     884 :                     .fmspc_set:
(1) 1789/     884 : CD 81 0D            		call	.fm_wrtalpan	; Panning and effects
(1) 1790/     887 : CD 07 0D            		call	.fm_wrtlvol	; FM volume control
(1) 1794/     88A : FD 7E 0F            		ld	a,(iy+0Fh)	; 0Eh - keys
(1) 1795/     88D : E6 F0               		and	11110000b
(1) 1796/     88F : B1                  		or	c
(1) 1797/     890 : 5F                  		ld	e,a
(1) 1798/     891 : 16 28               		ld	d,28h
(1) 1799/     893 : CD B5 10            		call	fm_send_1
(1) 1800/     896 : CF                  		rst	8
(1) 1801/     897 : C9                  		ret
(1) 1803/     898 :                     
(1) 1804/     898 :                     ; --------------------------------
(1) 1805/     898 :                     
(1) 1806/     898 :                     .mk_fmspc:
(1) 1807/     898 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1808/     89B : FE FE               		cp	-2
(1) 1809/     89D : CA 15 09            		jp	z,.fm_cut
(1) 1810/     8A0 : FE FF               		cp	-1
(1) 1811/     8A2 : CA 0F 09            		jp	z,.fm_off
(1) 1812/     8A5 : FD 4E 05            		ld	c,(iy+05h)	; c - KeyID
(1) 1813/     8A8 : 78                  		ld	a,b
(1) 1814/     8A9 : E6 01               		and	0001b
(1) 1815/     8AB : 28 D7               		jr	z,.fmspc_set
(1) 1816/     8AD : CD D1 0C            		call	.fm_keyoff
(1) 1817/     8B0 : 21 E9 13            		ld	hl,fmcach_list	; Manual freqs
(1) 1818/     8B3 : FD 7E 05            		ld	a,(iy+05h)
(1) 1819/     8B6 : E6 07               		and	0111b
(1) 1820/     8B8 : 16 00               		ld	d,0
(1) 1821/     8BA : 87                  		add	a,a
(1) 1822/     8BB : 5F                  		ld	e,a
(1) 1823/     8BC : CF                  		rst	8
(1) 1824/     8BD : 19                  		add	hl,de
(1) 1825/     8BE : 7E                  		ld	a,(hl)
(1) 1826/     8BF : 23                  		inc	hl
(1) 1827/     8C0 : 66                  		ld	h,(hl)
(1) 1828/     8C1 : 6F                  		ld	l,a
(1) 1829/     8C2 : 11 20 00            		ld	de,20h		; point to regs
(1) 1830/     8C5 : 19                  		add	hl,de
(1) 1831/     8C6 : 16 AD               		ld	d,0ADh
(1) 1832/     8C8 : 5E                  		ld	e,(hl)
(1) 1833/     8C9 : CD B5 10            		call	fm_send_1
(1) 1834/     8CC : 23                  		inc	hl
(1) 1835/     8CD : 16 A9               		ld	d,0A9h
(1) 1836/     8CF : 5E                  		ld	e,(hl)
(1) 1837/     8D0 : CD B5 10            		call	fm_send_1
(1) 1838/     8D3 : 23                  		inc	hl
(1) 1839/     8D4 : CF                  		rst	8
(1) 1840/     8D5 : 16 AC               		ld	d,0ACh
(1) 1841/     8D7 : 5E                  		ld	e,(hl)
(1) 1842/     8D8 : CD B5 10            		call	fm_send_1
(1) 1843/     8DB : 23                  		inc	hl
(1) 1844/     8DC : 16 A8               		ld	d,0A8h
(1) 1845/     8DE : 5E                  		ld	e,(hl)
(1) 1846/     8DF : CD B5 10            		call	fm_send_1
(1) 1847/     8E2 : 23                  		inc	hl
(1) 1848/     8E3 : 16 AE               		ld	d,0AEh
(1) 1849/     8E5 : 5E                  		ld	e,(hl)
(1) 1850/     8E6 : CD B5 10            		call	fm_send_1
(1) 1851/     8E9 : 23                  		inc	hl
(1) 1852/     8EA : CF                  		rst	8
(1) 1853/     8EB : 16 AA               		ld	d,0AAh
(1) 1854/     8ED : 5E                  		ld	e,(hl)
(1) 1855/     8EE : CD B5 10            		call	fm_send_1
(1) 1856/     8F1 : 23                  		inc	hl
(1) 1857/     8F2 : 16 A6               		ld	d,0A6h
(1) 1858/     8F4 : 5E                  		ld	e,(hl)
(1) 1859/     8F5 : CD B5 10            		call	fm_send_1
(1) 1860/     8F8 : 23                  		inc	hl
(1) 1861/     8F9 : 16 A2               		ld	d,0A2h
(1) 1862/     8FB : 5E                  		ld	e,(hl)
(1) 1863/     8FC : CD B5 10            		call	fm_send_1
(1) 1864/     8FF : 23                  		inc	hl
(1) 1865/     900 : CF                  		rst	8
(1) 1866/     901 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 1867/     904 : CD B5 10            		call	fm_send_1
(1) 1868/     907 : 3E 01               		ld	a,1
(1) 1869/     909 : 32 07 17            		ld	(fmSpecial),a
(1) 1870/     90C : C3 84 08            		jp	.fmspc_set
(1) 1871/     90F :                     
(1) 1872/     90F :                     ; --------------------------------
(1) 1873/     90F :                     
(1) 1874/     90F :                     .fm_off:
(1) 1875/     90F : CD D1 0C            		call	.fm_keyoff
(1) 1876/     912 : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 1877/     915 :                     .fm_cut:
(1) 1878/     915 : CD D1 0C            		call	.fm_keyoff
(1) 1879/     918 : CD D9 0C            		call	.fm_tloff
(1) 1880/     91B : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 1881/     91E :                     
(1) 1882/     91E :                     ; --------------------------------
(1) 1883/     91E :                     
(1) 1884/     91E :                     .mk_dac:
(1) 1885/     91E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1886/     921 : FE FE               		cp	-2
(1) 1887/     923 : CA 45 09            		jp	z,.dac_cut
(1) 1888/     926 : FE FF               		cp	-1
(1) 1889/     928 : CA 4B 09            		jp	z,.dac_off
(1) 1890/     92B : CD 4E 09            		call	.dac_pitch
(1) 1891/     92E : 78                  		ld	a,b		; Note ONLY?
(1) 1892/     92F : E6 01               		and	0001b
(1) 1893/     931 : C8                  		ret	z
(1) 1894/     932 : CD E0 10            		call	dac_off
(1) 1895/     935 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 1896/     938 : 2F                  		cpl				; REVERSE bits
(1) 1897/     939 : E6 C0               		and	11000000b
(1) 1898/     93B : 5F                  		ld	e,a
(1) 1899/     93C : 16 B6               		ld	d,0B6h		; Channel 6 panning
(1) 1900/     93E : CD C0 10            		call	fm_send_2
(1) 1901/     941 : CF                  		rst	8
(1) 1902/     942 : C3 F5 10            		jp	dac_play
(1) 1903/     945 :                     .dac_cut:
(1) 1904/     945 : CD E0 10            		call	dac_off
(1) 1905/     948 : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 1906/     94B :                     .dac_off:
(1) 1907/     94B : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 1908/     94E :                     
(1) 1909/     94E :                     
(1) 1910/     94E :                     .dac_pitch:
(1) 1911/     94E : 16 00               		ld	d,0		; Freq index
(1) 1912/     950 : FD 5E 06            		ld	e,(iy+06h)
(1) 1913/     953 : 21 F9 12            		ld	hl,wavFreq_List
(1) 1914/     956 : 19                  		add	hl,de
(1) 1915/     957 : 7E                  		ld	a,(hl)
(1) 1916/     958 : 23                  		inc	hl
(1) 1917/     959 : 66                  		ld	h,(hl)
(1) 1918/     95A : CF                  		rst	8
(1) 1919/     95B : 6F                  		ld	l,a
(1) 1920/     95C : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1921/     95F : AF                  		xor	a		; Clear high
(1) 1922/     960 : 3F                  		ccf			; Clear carry
(1) 1923/     961 : CB 23               		sla	e		; << 3
(1) 1924/     963 : CB 23               		sla	e
(1) 1925/     965 : CB 23               		sla	e
(1) 1926/     967 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 1927/     968 : 57                  		ld	d,a
(1) 1928/     969 : 19                  		add	hl,de
(1) 1929/     96A : 22 00 17            		ld	(wave_Pitch),hl
(1) 1930/     96D : D9                  		exx			; *
(1) 1931/     96E : ED 5B 00 17         		ld	de,(wave_Pitch)	; *
(1) 1932/     972 : D9                  		exx			; *
(1) 1933/     973 : C9                  		ret
(1) 1934/     974 :                     
(1) 1935/     974 :                     ; --------------------------------
(1) 1936/     974 :                     
(1) 1937/     974 :                     .mk_pwm:
(1) 1938/     974 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1939/     977 : 16 00               		ld	d,0
(1) 1940/     979 : FD 5E 05            		ld	e,(iy+05h)
(1) 1941/     97C : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 1942/     97F : DD E5               		push	ix
(1) 1943/     981 : DD 21 43 16         		ld	ix,pwmcom
(1) 1944/     985 : DD 19               		add	ix,de
(1) 1945/     987 : FE FE               		cp	-2
(1) 1946/     989 : CA 10 0A            		jp	z,.pwm_cut
(1) 1947/     98C : FE FF               		cp	-1
(1) 1948/     98E : CA 01 0A            		jp	z,.pwm_off
(1) 1949/     991 : CF                  		rst	8
(1) 1950/     992 : 78                  		ld	a,b
(1) 1951/     993 : CB 40               		bit	0,b			; Note?
(1) 1952/     995 : 20 0E               		jr	nz,.pw_note
(1) 1953/     997 : CB 58               		bit	3,b			; Effect?
(1) 1954/     999 : 20 03               		jr	nz,.pw_effc
(1) 1955/     99B : DD E1               		pop	ix
(1) 1956/     99D : C9                  		ret
(1) 1957/     99E :                     
(1) 1958/     99E :                     ; --------------------------------
(1) 1959/     99E :                     
(1) 1960/     99E :                     .pw_effc:
(1) 1961/     99E : CD CE 09            		call	.pw_setup
(1) 1962/     9A1 : 0E 11               		ld	c,00010001b
(1) 1963/     9A3 : 18 05               		jr	.pw_send
(1) 1964/     9A5 :                     .pw_note:
(1) 1965/     9A5 : CD CE 09            		call	.pw_setup
(1) 1966/     9A8 : 0E 01               		ld	c,00000001b	; KeyON request
(1) 1967/     9AA :                     .pw_send:
(1) 1968/     9AA : DD 71 00            		ld	(ix),c
(1) 1969/     9AD : 01 08 00            		ld	bc,8
(1) 1970/     9B0 : DD 09               		add	ix,bc
(1) 1971/     9B2 : DD 77 00            		ld	(ix),a
(1) 1972/     9B5 : DD 09               		add	ix,bc
(1) 1973/     9B7 : DD 75 00            		ld	(ix),l
(1) 1974/     9BA : DD 09               		add	ix,bc
(1) 1975/     9BC : CF                  		rst	8
(1) 1976/     9BD : DD 7E 00            		ld	a,(ix)
(1) 1977/     9C0 : E6 CF               		and	11001111b
(1) 1978/     9C2 : B3                  		or	e
(1) 1979/     9C3 : DD 77 00            		ld	(ix),a
(1) 1981/     9C6 : 3E 01               		ld	a,1
(1) 1982/     9C8 : 32 3F 00            		ld	(marsUpd),a
(1) 1984/     9CB : DD E1               		pop	ix
(1) 1985/     9CD : C9                  		ret
(1) 1986/     9CE :                     .pw_setup:
(1) 1987/     9CE : 16 00               		ld	d,0		; Freq index
(1) 1988/     9D0 : FD 5E 06            		ld	e,(iy+06h)
(1) 1989/     9D3 : 21 F9 12            		ld	hl,wavFreq_List
(1) 1990/     9D6 : 19                  		add	hl,de
(1) 1991/     9D7 : 7E                  		ld	a,(hl)
(1) 1992/     9D8 : 23                  		inc	hl
(1) 1993/     9D9 : 66                  		ld	h,(hl)
(1) 1994/     9DA : 6F                  		ld	l,a
(1) 1995/     9DB : FD 5E 07            		ld	e,(iy+07h)	; pitchbend
(1) 1996/     9DE : AF                  		xor	a		; Clear high
(1) 1997/     9DF : 3F                  		ccf			; Clear carry
(1) 1998/     9E0 : CB 23               		sla	e		; << 2
(1) 1999/     9E2 : CB 23               		sla	e
(1) 2000/     9E4 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2001/     9E5 : 57                  		ld	d,a
(1) 2002/     9E6 : 19                  		add	hl,de
(1) 2003/     9E7 : CF                  		rst	8
(1) 2004/     9E8 : 79                  		ld	a,c
(1) 2005/     9E9 : 0F                  		rrca
(1) 2006/     9EA : 0F                  		rrca
(1) 2007/     9EB : 2F                  		cpl
(1) 2008/     9EC : E6 30               		and	00110000b
(1) 2009/     9EE : 5F                  		ld	e,a
(1) 2010/     9EF : AF                  		xor	a
(1) 2011/     9F0 : FD 7E 08            		ld	a,(iy+08h)	; Read volume
(1) 2012/     9F3 : ED 44               		neg	a
(1) 2013/     9F5 : CB 27               		sla	a
(1) 2014/     9F7 : CB 27               		sla	a
(1) 2015/     9F9 : 30 02               		jr	nc,.pwv_much
(1) 2016/     9FB : 3E FF               		ld	a,-1
(1) 2017/     9FD :                     .pwv_much:
(1) 2018/     9FD : E6 FC               		and	11111100b
(1) 2019/     9FF : B4                  		or	h		; Merge MSB freq
(1) 2020/     A00 : C9                  		ret
(1) 2021/     A01 :                     
(1) 2022/     A01 :                     ; --------------------------------
(1) 2023/     A01 :                     ; -1
(1) 2024/     A01 :                     .pwm_off:
(1) 2025/     A01 : CF                  		rst	8
(1) 2026/     A02 : DD 36 00 02         		ld	(ix),010b
(1) 2027/     A06 : 3E 01               		ld	a,1
(1) 2028/     A08 : 32 3F 00            		ld	(marsUpd),a
(1) 2029/     A0B : DD E1               		pop	ix
(1) 2030/     A0D : C3 B5 0D            		jp	.chnl_ulnkoff
(1) 2031/     A10 :                     ; -2
(1) 2032/     A10 :                     .pwm_cut:
(1) 2033/     A10 : CF                  		rst	8
(1) 2034/     A11 : DD 36 00 04         		ld	(ix),100b
(1) 2035/     A15 : 3E 01               		ld	a,1
(1) 2036/     A17 : 32 3F 00            		ld	(marsUpd),a
(1) 2037/     A1A : DD E1               		pop	ix
(1) 2038/     A1C : C3 C6 0D            		jp	.chnl_ulnkcut
(1) 2039/     A1F :                     
(1) 2040/     A1F :                     ; ----------------------------------------
(1) 2041/     A1F :                     ; NEW effect
(1) 2042/     A1F :                     ; ----------------------------------------
(1) 2043/     A1F :                     
(1) 2044/     A1F :                     .effc:
(1) 2045/     A1F : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2046/     A22 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2047/     A25 : 57                  		ld	d,a
(1) 2048/     A26 : CF                  		rst	8
(1) 2049/     A27 : FE 04               		cp	4			; Effect D?
(1) 2050/     A29 : 28 0F               		jr	z,.effc_D
(1) 2051/     A2B : FE 05               		cp	5			; Effect E?
(1) 2052/     A2D : 28 4E               		jr	z,.effc_E
(1) 2053/     A2F : FE 06               		cp	6			; Effect F?
(1) 2054/     A31 : 28 5F               		jr	z,.effc_F
(1) 2055/     A33 : CF                  		rst	8
(1) 2056/     A34 : FE 18               		cp	24			; Effect X?
(1) 2057/     A36 : CA B3 0A            		jp	z,.effc_X
(1) 2058/     A39 : C9                  		ret
(1) 2059/     A3A :                     
(1) 2060/     A3A :                     ; ----------------------------------------
(1) 2061/     A3A :                     ; Effect D
(1) 2062/     A3A :                     ;
(1) 2063/     A3A :                     ; Volume slide down
(1) 2064/     A3A :                     ;
(1) 2065/     A3A :                     ; 0xh-Exh - Normal
(1) 2066/     A3A :                     ; Fxh-Fxh - Fine slide / 2
(1) 2067/     A3A :                     
(1) 2068/     A3A :                     .effc_D:
(1) 2069/     A3A : CD A7 0A            		call	.save_arg
(1) 2070/     A3D : 79                  		ld	a,c		; Setting == 0?
(1) 2071/     A3E : B7                  		or	a
(1) 2072/     A3F : C8                  		ret	z
(1) 2073/     A40 : E6 F0               		and	0F0h
(1) 2074/     A42 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2075/     A44 : FE F0               		cp	0F0h
(1) 2076/     A46 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2077/     A48 : CF                  		rst	8
(1) 2078/     A49 : 79                  		ld	a,c
(1) 2079/     A4A : E6 0F               		and	00Fh
(1) 2080/     A4C : 28 1D               		jr	z,.norm_up	; x0h
(1) 2081/     A4E : FE 0F               		cp	00Fh
(1) 2082/     A50 : 28 17               		jr	z,.fine_up	; xFh
(1) 2083/     A52 : C9                  		ret
(1) 2084/     A53 :                     ; Go down
(1) 2085/     A53 :                     .norm_down:
(1) 2086/     A53 : CB 21               		sla	c
(1) 2087/     A55 :                     .fine_down:
(1) 2088/     A55 : CB 21               		sla	c
(1) 2089/     A57 : 79                  		ld	a,c
(1) 2090/     A58 : E6 3C               		and	00111100b
(1) 2091/     A5A : 4F                  		ld	c,a
(1) 2092/     A5B : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2093/     A5E : CF                  		rst	8
(1) 2094/     A5F : 91                  		sub	a,c
(1) 2095/     A60 : 1E C0               		ld	e,0C0h
(1) 2096/     A62 : BB                  		cp	e
(1) 2097/     A63 : D2 79 0A            		jp	nc,.vol_dvld
(1) 2098/     A66 : 7B                  		ld	a,e
(1) 2099/     A67 : 18 10               		jr 	.vol_dvld
(1) 2100/     A69 :                     ; Go up
(1) 2101/     A69 :                     .fine_up:
(1) 2102/     A69 : CB 39               		srl	c
(1) 2103/     A6B :                     .norm_up:
(1) 2104/     A6B : CB 39               		srl	c
(1) 2105/     A6D : 79                  		ld	a,c
(1) 2106/     A6E : E6 3C               		and	00111100b
(1) 2107/     A70 : 4F                  		ld	c,a
(1) 2108/     A71 : FD 7E 08            		ld	a,(iy+08h)	; Current volume
(1) 2109/     A74 : CF                  		rst	8
(1) 2110/     A75 : 81                  		add	a,c
(1) 2111/     A76 : 38 01               		jr	c,.vol_dvld
(1) 2112/     A78 : AF                  		xor	a
(1) 2113/     A79 :                     .vol_dvld:
(1) 2114/     A79 : FD 77 08            		ld	(iy+08h),a
(1) 2115/     A7C : C9                  		ret
(1) 2116/     A7D :                     
(1) 2117/     A7D :                     ; ----------------------------------------
(1) 2118/     A7D :                     ; Effect E
(1) 2119/     A7D :                     .effc_E:
(1) 2120/     A7D : CD A7 0A            		call	.save_arg
(1) 2121/     A80 : 79                  		ld	a,c
(1) 2122/     A81 : E6 F0               		and	0F0h
(1) 2123/     A83 : FE F0               		cp	0F0h
(1) 2124/     A85 : C8                  		ret	z
(1) 2125/     A86 : FE E0               		cp	0E0h
(1) 2126/     A88 : C8                  		ret	z
(1) 2127/     A89 : CF                  		rst	8
(1) 2128/     A8A : FD 7E 07            		ld	a,(iy+07h)
(1) 2129/     A8D : 91                  		sub	a,c
(1) 2130/     A8E : FD 77 07            		ld	(iy+07h),a
(1) 2131/     A91 : C9                  		ret
(1) 2132/     A92 :                     
(1) 2133/     A92 :                     ; ----------------------------------------
(1) 2134/     A92 :                     ; Effect F
(1) 2135/     A92 :                     .effc_F:
(1) 2136/     A92 : CD A7 0A            		call	.save_arg
(1) 2137/     A95 : 79                  		ld	a,c
(1) 2138/     A96 : E6 F0               		and	0F0h
(1) 2139/     A98 : FE F0               		cp	0F0h
(1) 2140/     A9A : C8                  		ret	z
(1) 2141/     A9B : FE E0               		cp	0E0h
(1) 2142/     A9D : C8                  		ret	z
(1) 2143/     A9E : CF                  		rst	8
(1) 2144/     A9F : FD 7E 07            		ld	a,(iy+07h)
(1) 2145/     AA2 : 81                  		add	a,c
(1) 2146/     AA3 : FD 77 07            		ld	(iy+07h),a
(1) 2147/     AA6 : C9                  		ret
(1) 2148/     AA7 :                     
(1) 2149/     AA7 :                     ; --------------------------------
(1) 2150/     AA7 :                     ; e - got arg
(1) 2151/     AA7 :                     ; c - new arg
(1) 2152/     AA7 :                     .save_arg:
(1) 2153/     AA7 : FD 4E 09            		ld	c,(iy+09h)	; Current slide setting
(1) 2154/     AAA : 7B                  		ld	a,e		; EffArg is non-zero?
(1) 2155/     AAB : B7                  		or	a
(1) 2156/     AAC : 28 04               		jr	z,.D_cont	; 00h = slide continue
(1) 2157/     AAE : 4F                  		ld	c,a
(1) 2158/     AAF : FD 71 09            		ld	(iy+09h),c	; Store NEW slide setting
(1) 2159/     AB2 :                     .D_cont:
(1) 2160/     AB2 : C9                  		ret
(1) 2161/     AB3 :                     
(1) 2162/     AB3 :                     ; ----------------------------------------
(1) 2163/     AB3 :                     ; Effect X
(1) 2164/     AB3 :                     ;
(1) 2165/     AB3 :                     ; Panning arg:
(1) 2166/     AB3 :                     ; 00h LEFT <- 80h MIDDLE -> FFh RIGHT
(1) 2167/     AB3 :                     ;
(1) 2168/     AB3 :                     ; FM style %LR000000 (REVERSE: 0-on 1-off)
(1) 2169/     AB3 :                     
(1) 2170/     AB3 :                     .effc_X:
(1) 2171/     AB3 : 16 00               		ld	d,0
(1) 2172/     AB5 : 7E                  		ld	a,(hl)
(1) 2173/     AB6 : FE 80               		cp	80h		; PSG?
(1) 2174/     AB8 : 28 18               		jr	z,.res_pan
(1) 2175/     ABA : FE 90               		cp	90h		; PSGN?
(1) 2176/     ABC : 28 14               		jr	z,.res_pan
(1) 2177/     ABE : FD 36 09 00         		ld	(iy+09h),0
(1) 2178/     AC2 : CF                  		rst	8
(1) 2179/     AC3 : E5                  		push	hl
(1) 2180/     AC4 : 21 DC 0A            		ld	hl,.fm_panlist
(1) 2181/     AC7 : 7B                  		ld	a,e
(1) 2182/     AC8 : 07                  		rlca
(1) 2183/     AC9 : 07                  		rlca
(1) 2184/     ACA : 07                  		rlca
(1) 2185/     ACB : E6 07               		and	0111b
(1) 2186/     ACD :                     ; 		ld	d,0
(1) 2187/     ACD : 5F                  		ld	e,a
(1) 2188/     ACE : CF                  		rst	8
(1) 2189/     ACF : 19                  		add	hl,de
(1) 2190/     AD0 : 56                  		ld	d,(hl)
(1) 2191/     AD1 : E1                  		pop	hl
(1) 2192/     AD2 :                     .res_pan:
(1) 2193/     AD2 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2194/     AD5 : E6 3F               		and	00111111b
(1) 2195/     AD7 : B2                  		or	d
(1) 2196/     AD8 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2197/     ADB : C9                  		ret
(1) 2198/     ADC :                     
(1) 2199/     ADC :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2200/     ADC :                     .fm_panlist:
(1) 2201/     ADC : 40                  		db 01000000b
(1) 2202/     ADD : 40                  		db 01000000b
(1) 2203/     ADE : 40                  		db 01000000b
(1) 2204/     ADF : 00                  		db 00000000b
(1) 2205/     AE0 : 00                  		db 00000000b
(1) 2206/     AE1 : 80                  		db 10000000b
(1) 2207/     AE2 : 80                  		db 10000000b
(1) 2208/     AE3 : 80                  		db 10000000b
(1) 2209/     AE4 :                     
(1) 2210/     AE4 :                     ; ----------------------------------------
(1) 2211/     AE4 :                     ; NEW volume
(1) 2212/     AE4 :                     ; ----------------------------------------
(1) 2213/     AE4 :                     
(1) 2214/     AE4 :                     .volu:
(1) 2215/     AE4 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2216/     AE7 : D6 40               		sub	a,64
(1) 2217/     AE9 : FD 77 08            		ld	(iy+08h),a	; <-- BASE volume
(1) 2218/     AEC : C9                  		ret
(1) 2219/     AED :                     
(1) 2220/     AED :                     ; ----------------------------------------
(1) 2221/     AED :                     ; NEW instrument
(1) 2222/     AED :                     ; ----------------------------------------
(1) 2223/     AED :                     
(1) 2224/     AED :                     .inst:
(1) 2225/     AED : 7E                  		ld	a,(hl)
(1) 2226/     AEE : E6 F0               		and	11110000b
(1) 2227/     AF0 : FE 80               		cp	80h
(1) 2228/     AF2 : 28 1E               		jr	z,.ps_ins
(1) 2229/     AF4 : FE 90               		cp	90h
(1) 2230/     AF6 : 28 14               		jr	z,.pn_ins
(1) 2231/     AF8 : FE A0               		cp	0A0h
(1) 2232/     AFA : 28 4C               		jr	z,.fm_ins
(1) 2233/     AFC : FE B0               		cp	0B0h
(1) 2234/     AFE : 28 48               		jr	z,.fm_ins
(1) 2235/     B00 : FE C0               		cp	0C0h
(1) 2236/     B02 : CA C9 0B            		jp	z,.dac_ins
(1) 2237/     B05 : CF                  		rst	8
(1) 2238/     B06 : FE D0               		cp	0D0h
(1) 2239/     B08 : CA 20 0C            		jp	z,.pwm_ins
(1) 2240/     B0B :                     
(1) 2241/     B0B :                     ; ----------------------------------------
(1) 2242/     B0B :                     
(1) 2243/     B0B :                     .invl_ins:
(1) 2244/     B0B : C9                  		ret
(1) 2245/     B0C :                     
(1) 2246/     B0C :                     ; ----------------------------------------
(1) 2247/     B0C :                     
(1) 2248/     B0C :                     ; PSG
(1) 2249/     B0C :                     .pn_ins:
(1) 2250/     B0C : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2251/     B0D : E6 07               		and	0111b
(1) 2252/     B0F : 32 06 17            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2253/     B12 :                     .ps_ins:
(1) 2254/     B12 : CF                  		rst	8
(1) 2255/     B13 : DD E5               		push	ix
(1) 2256/     B15 : E5                  		push	hl
(1) 2257/     B16 : 23                  		inc	hl		; Skip ID
(1) 2258/     B17 : DD 21 7B 16         		ld	ix,psgcom	; Read psg control
(1) 2259/     B1B : FD 5E 05            		ld	e,(iy+05h)
(1) 2260/     B1E : 16 00               		ld	d,0
(1) 2261/     B20 : DD 19               		add	ix,de
(1) 2262/     B22 : 7E                  		ld	a,(hl)
(1) 2263/     B23 : CF                  		rst	8
(1) 2264/     B24 : 23                  		inc	hl
(1) 2265/     B25 : 7E                  		ld	a,(hl)
(1) 2266/     B26 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2267/     B29 : 23                  		inc	hl
(1) 2268/     B2A : 7E                  		ld	a,(hl)
(1) 2269/     B2B : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2270/     B2E : 23                  		inc	hl
(1) 2271/     B2F : 7E                  		ld	a,(hl)
(1) 2272/     B30 : CF                  		rst	8
(1) 2273/     B31 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2274/     B34 : 23                  		inc	hl
(1) 2275/     B35 : 7E                  		ld	a,(hl)
(1) 2276/     B36 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2277/     B39 : 23                  		inc	hl
(1) 2278/     B3A : 7E                  		ld	a,(hl)
(1) 2279/     B3B : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2280/     B3E : 23                  		inc	hl
(1) 2281/     B3F : 7E                  		ld	a,(hl)
(1) 2282/     B40 : CF                  		rst	8
(1) 2283/     B41 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2284/     B44 : E1                  		pop	hl
(1) 2285/     B45 : DD E1               		pop	ix
(1) 2286/     B47 : C9                  		ret
(1) 2287/     B48 :                     
(1) 2288/     B48 :                     ; --------
(1) 2289/     B48 :                     
(1) 2290/     B48 :                     .fm_ins:
(1) 2291/     B48 :                     ;  ret
(1) 2292/     B48 : DD E5               		push	ix
(1) 2293/     B4A : E5                  		push	hl
(1) 2294/     B4B : C5                  		push	bc
(1) 2295/     B4C :                     ; 		ld	b,(ix+chnl_Ins)	; b - current Ins
(1) 2296/     B4C : FD 46 02            		ld	b,(iy+02h)
(1) 2297/     B4F : FD 7E 05            		ld	a,(iy+05h)
(1) 2298/     B52 : E6 07               		and	0111b
(1) 2299/     B54 : 16 00               		ld	d,0
(1) 2300/     B56 : 87                  		add	a,a
(1) 2301/     B57 : 5F                  		ld	e,a
(1) 2302/     B58 : DD 21 E9 13         		ld	ix,fmcach_list
(1) 2303/     B5C : DD 19               		add	ix,de
(1) 2304/     B5E : CF                  		rst	8
(1) 2305/     B5F : DD 5E 00            		ld	e,(ix)
(1) 2306/     B62 : DD 23               		inc	ix
(1) 2307/     B64 : DD 56 00            		ld	d,(ix)
(1) 2308/     B67 :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2309/     B67 :                     ; 		cp	b
(1) 2310/     B67 :                     ; 		jr	z,.same_patch
(1) 2311/     B67 :                     ; 		ld	(iy+0Bh),b
(1) 2312/     B67 : 23                  		inc	hl		; Skip id and pitch
(1) 2313/     B68 : 23                  		inc	hl
(1) 2314/     B69 : 46                  		ld	b,(hl)
(1) 2315/     B6A : 23                  		inc	hl
(1) 2316/     B6B : 4E                  		ld	c,(hl)
(1) 2317/     B6C : 23                  		inc	hl
(1) 2318/     B6D : 6E                  		ld	l,(hl)
(1) 2319/     B6E : 61                  		ld	h,c
(1) 2320/     B6F : FD 7E 0A            		ld	a,(iy+0Ah)
(1) 2321/     B72 : BC                  		cp	h
(1) 2322/     B73 : 20 07               		jr	nz,.new_romdat
(1) 2323/     B75 : CF                  		rst	8
(1) 2324/     B76 : FD 7E 0B            		ld	a,(iy+0Bh)
(1) 2325/     B79 : BD                  		cp	l
(1) 2326/     B7A : 28 38               		jr	z,.same_patch
(1) 2327/     B7C :                     .new_romdat:
(1) 2328/     B7C : FD 74 0A            		ld	(iy+0Ah),h
(1) 2329/     B7F : FD 75 0B            		ld	(iy+0Bh),l
(1) 2330/     B82 : 78                  		ld	a,b
(1) 2331/     B83 : D5                  		push	de
(1) 2332/     B84 : 01 28 00            		ld	bc,28h		; <- size
(1) 2333/     B87 : CD C8 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 2334/     B8A :                     
(1) 2335/     B8A : E1                  		pop	hl
(1) 2336/     B8B : FD 7E 05            		ld	a,(iy+05h)
(1) 2337/     B8E : 4F                  		ld	c,a		; c - FM Key ID
(1) 2338/     B8F :                     ; 		call	.fm_keyoff
(1) 2339/     B8F :                     
(1) 2340/     B8F :                     	; hl - fmcach intrument
(1) 2341/     B8F :                     	; de - FM reg and data: 3000h
(1) 2342/     B8F :                     	;  c - FM keyChannel
(1) 2343/     B8F : 79                  		ld	a,c
(1) 2344/     B90 : E6 03               		and	011b
(1) 2345/     B92 : F6 30               		or	30h		; Start at reg 30h
(1) 2346/     B94 : 57                  		ld	d,a
(1) 2347/     B95 : 1E 00               		ld	e,0
(1) 2348/     B97 : CF                  		rst	8
(1) 2349/     B98 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2350/     B9A : CD B9 0B            		call	.fm_setrlist
(1) 2351/     B9D :                     ; 		ld	b,4
(1) 2352/     B9D :                     ; 		call	.fm_setrlist
(1) 2353/     B9D :                     ; 		ld	b,5*4
(1) 2354/     B9D :                     ; 		call	.fm_setrlist
(1) 2355/     B9D : 7E                  		ld	a,(hl)		; 0B0h
(1) 2356/     B9E : FD 77 0C            		ld	(iy+0Ch),a	; ** Save 0B0h to 0Ch
(1) 2357/     BA1 : 23                  		inc	hl
(1) 2358/     BA2 : 7E                  		ld	a,(hl)		; 0B4h
(1) 2359/     BA3 : FD 77 0D            		ld	(iy+0Dh),a	; ** Save 0B4h to 0Dh
(1) 2360/     BA6 : 23                  		inc	hl
(1) 2361/     BA7 : CF                  		rst	8
(1) 2362/     BA8 : 7E                  		ld	a,(hl)
(1) 2363/     BA9 : FD 77 0E            		ld	(iy+0Eh),a	; LFO
(1) 2364/     BAC : 23                  		inc	hl
(1) 2365/     BAD : 7E                  		ld	a,(hl)		; 028h keys
(1) 2366/     BAE : E6 F0               		and	11110000b
(1) 2367/     BB0 : CF                  		rst	8
(1) 2368/     BB1 : FD 77 0F            		ld	(iy+0Fh),a	; ** Save keys to 0Eh
(1) 2369/     BB4 :                     .same_patch:
(1) 2370/     BB4 : C1                  		pop	bc
(1) 2371/     BB5 : E1                  		pop	hl
(1) 2372/     BB6 : DD E1               		pop	ix
(1) 2373/     BB8 : C9                  		ret
(1) 2374/     BB9 :                     ; b - numof_regs
(1) 2375/     BB9 :                     .fm_setrlist:
(1) 2376/     BB9 : 5E                  		ld	e,(hl)
(1) 2377/     BBA : 23                  		inc	hl
(1) 2378/     BBB : CD AC 10            		call	fm_autoreg
(1) 2379/     BBE : 00                  		nop
(1) 2380/     BBF : 00                  		nop
(1) 2381/     BC0 : CF                  		rst	8
(1) 2382/     BC1 : 00                  		nop
(1) 2383/     BC2 : 14                  		inc	d		; +4
(1) 2384/     BC3 : 14                  		inc	d
(1) 2385/     BC4 : 14                  		inc	d
(1) 2386/     BC5 : 14                  		inc	d
(1) 2387/     BC6 : 10 F1               		djnz	.fm_setrlist
(1) 2388/     BC8 : C9                  		ret
(1) 2389/     BC9 :                     ; --------
(1) 2390/     BC9 :                     
(1) 2391/     BC9 :                     .dac_ins:
(1) 2392/     BC9 : DD 5E 03            		ld	e,(ix+chnl_Ins)	; b - current Ins
(1) 2393/     BCC :                     ; 		ld	a,(iy+0Bh)	; 0Bh: DON'T reload flag
(1) 2394/     BCC :                     ; 		cp	e
(1) 2395/     BCC :                     ; 		jr	z,.same_dac
(1) 2396/     BCC : FD 73 0B            		ld	(iy+0Bh),e
(1) 2397/     BCF : E5                  		push	hl
(1) 2398/     BD0 : C5                  		push	bc
(1) 2399/     BD1 : 7E                  		ld	a,(hl)
(1) 2400/     BD2 : E6 0F               		and	01111b
(1) 2401/     BD4 : 32 02 17            		ld	(wave_Flags),a
(1) 2402/     BD7 : CF                  		rst	8
(1) 2403/     BD8 : 23                  		inc	hl
(1) 2404/     BD9 : 23                  		inc	hl
(1) 2405/     BDA : 5E                  		ld	e,(hl)
(1) 2406/     BDB : 23                  		inc	hl
(1) 2407/     BDC : 7E                  		ld	a,(hl)
(1) 2408/     BDD : 23                  		inc	hl
(1) 2409/     BDE : 6E                  		ld	l,(hl)
(1) 2410/     BDF : 67                  		ld	h,a
(1) 2411/     BE0 : E5                  		push	hl
(1) 2412/     BE1 : 7B                  		ld	a,e
(1) 2413/     BE2 : 01 06 00            		ld	bc,6		; Skip header
(1) 2414/     BE5 : 09                  		add	hl,bc
(1) 2415/     BE6 : CE 00               		adc	a,0
(1) 2416/     BE8 : 22 F7 16            		ld	(wave_Start),hl	; Set START point
(1) 2417/     BEB : 32 F9 16            		ld	(wave_Start+2),a
(1) 2418/     BEE : E1                  		pop	hl
(1) 2419/     BEF : 7B                  		ld	a,e
(1) 2420/     BF0 : 11 16 17            		ld	de,sampleHead
(1) 2421/     BF3 : 01 06 00            		ld	bc,6
(1) 2422/     BF6 : D5                  		push	de
(1) 2423/     BF7 : CF                  		rst	8
(1) 2424/     BF8 : CD C8 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 2425/     BFB : E1                  		pop	hl
(1) 2426/     BFC :                     	; hl - temporal header
(1) 2427/     BFC : 5E                  		ld	e,(hl)
(1) 2428/     BFD : 23                  		inc	hl
(1) 2429/     BFE : 56                  		ld	d,(hl)
(1) 2430/     BFF : 23                  		inc	hl
(1) 2431/     C00 : 7E                  		ld	a,(hl)
(1) 2432/     C01 : 23                  		inc	hl
(1) 2433/     C02 : ED 53 FA 16         		ld	(wave_Len),de	; LEN
(1) 2434/     C06 : 32 FC 16            		ld	(wave_Len+2),a
(1) 2435/     C09 : 5E                  		ld	e,(hl)
(1) 2436/     C0A : 23                  		inc	hl
(1) 2437/     C0B : CF                  		rst	8
(1) 2438/     C0C : 56                  		ld	d,(hl)
(1) 2439/     C0D : 23                  		inc	hl
(1) 2440/     C0E : 7E                  		ld	a,(hl)
(1) 2441/     C0F : 23                  		inc	hl
(1) 2442/     C10 : ED 53 FD 16         		ld	(wave_Loop),de	; LOOP
(1) 2443/     C14 : 32 FF 16            		ld	(wave_Loop+2),a
(1) 2444/     C17 : 11 06 28            		ld	de,2806h	; keys off
(1) 2445/     C1A : CD B5 10            		call	fm_send_1
(1) 2446/     C1D : C1                  		pop	bc
(1) 2447/     C1E : E1                  		pop	hl
(1) 2448/     C1F :                     ; .same_dac:
(1) 2449/     C1F : C9                  		ret
(1) 2450/     C20 :                     
(1) 2451/     C20 :                     ; --------
(1) 2452/     C20 :                     
(1) 2453/     C20 :                     .pwm_ins:
(1) 2454/     C20 : DD E5               		push	ix
(1) 2455/     C22 : E5                  		push	hl
(1) 2456/     C23 : C5                  		push	bc
(1) 2457/     C24 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 2458/     C25 : E6 03               		and	00000011b
(1) 2459/     C27 : 0F                  		rrca
(1) 2460/     C28 : 0F                  		rrca
(1) 2461/     C29 : 4F                  		ld	c,a
(1) 2462/     C2A :                     ; 		ld	(iy+0Ah),a	; 0Ah flags: %SlLR
(1) 2463/     C2A : CF                  		rst	8
(1) 2464/     C2B : 23                  		inc	hl		; Skip ID and Pitch
(1) 2465/     C2C : 23                  		inc	hl
(1) 2466/     C2D : 56                  		ld	d,(hl)
(1) 2467/     C2E : 23                  		inc	hl
(1) 2468/     C2F : 5E                  		ld	e,(hl)
(1) 2469/     C30 : 23                  		inc	hl
(1) 2470/     C31 : 7E                  		ld	a,(hl)
(1) 2471/     C32 : 23                  		inc	hl
(1) 2472/     C33 : 6E                  		ld	l,(hl)
(1) 2473/     C34 : 67                  		ld	h,a
(1) 2474/     C35 : 79                  		ld	a,c
(1) 2475/     C36 : B2                  		or	d
(1) 2476/     C37 : 57                  		ld	d,a
(1) 2477/     C38 : CF                  		rst	8
(1) 2478/     C39 :                     
(1) 2479/     C39 :                     	; de,hl - 32-bit PWM pointer
(1) 2480/     C39 : DD 21 43 16         		ld	ix,pwmcom
(1) 2481/     C3D : 06 00               		ld	b,0
(1) 2482/     C3F : FD 4E 05            		ld	c,(iy+05h)
(1) 2483/     C42 : DD 09               		add	ix,bc
(1) 2484/     C44 : 01 18 00            		ld	bc,PWOUTF
(1) 2485/     C47 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 2486/     C49 : 01 08 00            		ld	bc,8
(1) 2487/     C4C : DD 72 00            		ld	(ix),d
(1) 2488/     C4F : DD 09               		add	ix,bc
(1) 2489/     C51 : DD 73 00            		ld	(ix),e
(1) 2490/     C54 : DD 09               		add	ix,bc
(1) 2491/     C56 : DD 74 00            		ld	(ix),h
(1) 2492/     C59 : DD 09               		add	ix,bc
(1) 2493/     C5B : DD 75 00            		ld	(ix),l
(1) 2494/     C5E : C1                  		pop	bc
(1) 2495/     C5F : E1                  		pop	hl
(1) 2496/     C60 : DD E1               		pop	ix
(1) 2497/     C62 : C9                  		ret
(1) 2498/     C63 :                     
(1) 2499/     C63 :                     ; ----------------------------------------
(1) 2500/     C63 :                     ; NEW note
(1) 2501/     C63 :                     ; ----------------------------------------
(1) 2502/     C63 :                     
(1) 2503/     C63 :                     .note:
(1) 2504/     C63 : 78                  		ld	a,b		; Volume bit?
(1) 2505/     C64 : E6 04               		and	0100b
(1) 2506/     C66 : 20 05               		jr	nz,.fm_hasvol
(1) 2507/     C68 : FD 36 08 00         		ld	(iy+08h),0	; Reset to default volume
(1) 2508/     C6C : CF                  		rst	8
(1) 2509/     C6D :                     .fm_hasvol:
(1) 2510/     C6D : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2511/     C70 : 4F                  		ld	c,a
(1) 2512/     C71 : FE FF               		cp	-1
(1) 2513/     C73 : C8                  		ret	z
(1) 2514/     C74 : FE FE               		cp	-2
(1) 2515/     C76 : C8                  		ret	z
(1) 2516/     C77 : 7E                  		ld	a,(hl)
(1) 2517/     C78 : E6 F0               		and	11110000b
(1) 2518/     C7A : FE 80               		cp	80h
(1) 2519/     C7C : 28 12               		jr	z,.n_indx
(1) 2520/     C7E : CF                  		rst	8
(1) 2521/     C7F : FE 90               		cp	90h
(1) 2522/     C81 : 28 1C               		jr	z,.n_psgn
(1) 2523/     C83 : FE A0               		cp	0A0h
(1) 2524/     C85 : 28 1D               		jr	z,.n_fm
(1) 2525/     C87 :                     ; 		cp	0B0h		; ** Can't use notes on FM3 **
(1) 2526/     C87 :                     ; 		jr	z,.n_fm
(1) 2527/     C87 : FE C0               		cp	0C0h
(1) 2528/     C89 : 28 05               		jr	z,.n_indx
(1) 2529/     C8B : FE D0               		cp	0D0h
(1) 2530/     C8D : 28 01               		jr	z,.n_indx
(1) 2531/     C8F : C9                  		ret
(1) 2532/     C90 :                     
(1) 2533/     C90 :                     ; --------------------------------
(1) 2534/     C90 :                     
(1) 2535/     C90 :                     .n_indx:
(1) 2536/     C90 : 79                  		ld	a,c
(1) 2537/     C91 :                     .n_stfreq:
(1) 2538/     C91 : 23                  		inc	hl		; Skip ID
(1) 2539/     C92 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2540/     C93 : 2B                  		dec	hl
(1) 2541/     C94 : 83                  		add	a,e		; Note + pitch
(1) 2542/     C95 : CF                  		rst	8
(1) 2543/     C96 : 87                  		add	a,a		; * 2
(1) 2544/     C97 : FD 77 06            		ld	(iy+06h),a
(1) 2545/     C9A : FD 36 07 00         		ld	(iy+07h),0	; reset pitchbend
(1) 2546/     C9E : C9                  		ret
(1) 2547/     C9F :                     .n_psgn:
(1) 2548/     C9F : 79                  		ld	a,c
(1) 2549/     CA0 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 2550/     CA2 : 18 ED               		jr	.n_stfreq
(1) 2551/     CA4 :                     ; FM
(1) 2552/     CA4 :                     .n_fm:
(1) 2553/     CA4 : 79                  		ld	a,c
(1) 2554/     CA5 : 23                  		inc	hl		; Skip ID
(1) 2555/     CA6 : 5E                  		ld	e,(hl)		; Read pitch
(1) 2556/     CA7 : 2B                  		dec	hl
(1) 2557/     CA8 : CF                  		rst	8
(1) 2558/     CA9 : 83                  		add	a,e		; Note + pitch
(1) 2559/     CAA :                     	; Search for octave and note
(1) 2560/     CAA : 0E 00               		ld	c,0		; c - octave
(1) 2561/     CAC : 16 07               		ld	d,7
(1) 2562/     CAE :                     .get_oct:
(1) 2563/     CAE : 5F                  		ld	e,a		; e - note
(1) 2564/     CAF : D6 0C               		sub	12
(1) 2565/     CB1 : B7                  		or	a
(1) 2566/     CB2 : FA BE 0C            		jp	m,.fnd_oct
(1) 2567/     CB5 : 0C                  		inc	c
(1) 2568/     CB6 : CF                  		rst	8
(1) 2569/     CB7 : 00                  		nop	; wave sync
(1) 2570/     CB8 : 00                  		nop
(1) 2571/     CB9 : 00                  		nop
(1) 2572/     CBA : 00                  		nop
(1) 2573/     CBB : 15                  		dec	d
(1) 2574/     CBC : 20 F0               		jr	nz,.get_oct
(1) 2575/     CBE :                     .fnd_oct:
(1) 2576/     CBE : 7B                  		ld	a,e
(1) 2577/     CBF : 87                  		add	a,a		; Note * 2
(1) 2578/     CC0 : E6 1F               		and	00011111b
(1) 2579/     CC2 : CB 09               		rrc	c
(1) 2580/     CC4 : CB 09               		rrc	c
(1) 2581/     CC6 : CB 09               		rrc	c
(1) 2582/     CC8 : B1                  		or	c
(1) 2583/     CC9 : FD 77 06            		ld	(iy+06h),a	; Save octave + index: OOOiiiiib
(1) 2584/     CCC : FD 36 07 00         		ld	(iy+07h),0
(1) 2585/     CD0 : C9                  		ret
(1) 2586/     CD1 :                     
(1) 2587/     CD1 :                     ; ----------------------------------------
(1) 2588/     CD1 :                     
(1) 2589/     CD1 :                     .fm_keyoff:
(1) 2590/     CD1 : 16 28               		ld	d,28h
(1) 2591/     CD3 : FD 5E 05            		ld	e,(iy+05h)
(1) 2592/     CD6 : C3 B5 10            		jp	fm_send_1
(1) 2593/     CD9 :                     .fm_tloff:
(1) 2594/     CD9 : 06 04               		ld	b,4
(1) 2595/     CDB : FD 4E 05            		ld	c,(iy+05h)
(1) 2596/     CDE : 79                  		ld	a,c
(1) 2597/     CDF : E6 03               		and	011b
(1) 2598/     CE1 : F6 40               		or	40h	; TL regs
(1) 2599/     CE3 :                     .tl_down:
(1) 2600/     CE3 : 57                  		ld	d,a
(1) 2601/     CE4 : 1E 7F               		ld	e,7Fh
(1) 2602/     CE6 : CD AC 10            		call	fm_autoreg
(1) 2603/     CE9 : CF                  		rst	8
(1) 2604/     CEA : 7A                  		ld	a,d
(1) 2605/     CEB : C6 04               		add	a,4
(1) 2606/     CED : 10 F4               		djnz	.tl_down
(1) 2607/     CEF : C9                  		ret
(1) 2608/     CF0 :                     ; c - KeyID
(1) 2609/     CF0 :                     .fm_setfreq:
(1) 2610/     CF0 : 79                  		ld	a,c
(1) 2611/     CF1 : E6 03               		and	011b
(1) 2612/     CF3 : F6 A4               		or	0A4h
(1) 2613/     CF5 : 57                  		ld	d,a
(1) 2614/     CF6 : 5C                  		ld	e,h
(1) 2615/     CF7 : CF                  		rst	8
(1) 2616/     CF8 : CD AC 10            		call	fm_autoreg
(1) 2617/     CFB : 79                  		ld	a,c
(1) 2618/     CFC : E6 03               		and	011b
(1) 2619/     CFE : F6 A0               		or	0A0h
(1) 2620/     D00 : 57                  		ld	d,a
(1) 2621/     D01 : 5D                  		ld	e,l
(1) 2622/     D02 : CD AC 10            		call	fm_autoreg
(1) 2623/     D05 : CF                  		rst	8
(1) 2624/     D06 : C9                  		ret
(1) 2625/     D07 :                     
(1) 2626/     D07 :                     ; --------------------------------
(1) 2627/     D07 :                     ; WRITE TL volume
(1) 2628/     D07 :                     
(1) 2629/     D07 :                     .fm_wrtlvol:
(1) 2630/     D07 : 21 E9 13            		ld	hl,fmcach_list
(1) 2631/     D0A : FD 7E 05            		ld	a,(iy+05h)
(1) 2632/     D0D : E6 07               		and	0111b
(1) 2633/     D0F : 16 00               		ld	d,0
(1) 2634/     D11 : CF                  		rst	8
(1) 2635/     D12 : 87                  		add	a,a
(1) 2636/     D13 : 5F                  		ld	e,a
(1) 2637/     D14 : 19                  		add	hl,de
(1) 2638/     D15 : 7E                  		ld	a,(hl)
(1) 2639/     D16 : 23                  		inc	hl
(1) 2640/     D17 : 66                  		ld	h,(hl)
(1) 2641/     D18 : 6F                  		ld	l,a
(1) 2642/     D19 : 23                  		inc	hl
(1) 2643/     D1A : 23                  		inc	hl
(1) 2644/     D1B : 23                  		inc	hl
(1) 2645/     D1C : CF                  		rst	8
(1) 2646/     D1D : 23                  		inc	hl		; Point to TL's
(1) 2647/     D1E : FD 7E 05            		ld	a,(iy+05h)
(1) 2648/     D21 : E6 03               		and	011b
(1) 2649/     D23 : F6 40               		or	40h		; TL registers
(1) 2650/     D25 : 57                  		ld	d,a
(1) 2651/     D26 :                     ; d - 40h+
(1) 2652/     D26 :                     ; hl - TL data
(1) 2653/     D26 :                     ; .fm_wrtlvol:
(1) 2654/     D26 : C5                  		push	bc
(1) 2655/     D27 : E5                  		push	hl
(1) 2656/     D28 : 21 79 0D            		ld	hl,.fm_cindx
(1) 2657/     D2B : FD 7E 0C            		ld	a,(iy+0Ch)	; Read 0B0h copy
(1) 2658/     D2E : E6 07               		and	0111b
(1) 2659/     D30 : 06 00               		ld	b,0
(1) 2660/     D32 : 4F                  		ld	c,a
(1) 2661/     D33 : 09                  		add	hl,bc
(1) 2662/     D34 : FD 7E 08            		ld	a,(iy+08h)
(1) 2663/     D37 : CB 2F               		sra	a		; volume / 2
(1) 2664/     D39 : E6 7F               		and	01111111b
(1) 2665/     D3B : 4F                  		ld	c,a
(1) 2666/     D3C : CF                  		rst	8
(1) 2667/     D3D : 46                  		ld	b,(hl)
(1) 2668/     D3E : E1                  		pop	hl
(1) 2669/     D3F : CB 08               		rrc	b		; OP1
(1) 2670/     D41 : DC 6C 0D            		call	c,.write_tl
(1) 2671/     D44 : 23                  		inc	hl
(1) 2672/     D45 : 14                  		inc	d
(1) 2673/     D46 : 14                  		inc	d
(1) 2674/     D47 : CF                  		rst	8
(1) 2675/     D48 : 14                  		inc	d
(1) 2676/     D49 : 14                  		inc	d
(1) 2677/     D4A : CB 08               		rrc	b		; OP2
(1) 2678/     D4C : DC 6C 0D            		call	c,.write_tl
(1) 2679/     D4F : 23                  		inc	hl
(1) 2680/     D50 : 14                  		inc	d
(1) 2681/     D51 : 14                  		inc	d
(1) 2682/     D52 : 14                  		inc	d
(1) 2683/     D53 : 14                  		inc	d
(1) 2684/     D54 : CB 08               		rrc	b		; OP3
(1) 2685/     D56 : DC 6C 0D            		call	c,.write_tl
(1) 2686/     D59 : 23                  		inc	hl
(1) 2687/     D5A : CF                  		rst	8
(1) 2688/     D5B : 14                  		inc	d
(1) 2689/     D5C : 14                  		inc	d
(1) 2690/     D5D : 14                  		inc	d
(1) 2691/     D5E : 14                  		inc	d
(1) 2692/     D5F : CB 08               		rrc	b		; OP4
(1) 2693/     D61 : DC 6C 0D            		call	c,.write_tl
(1) 2694/     D64 : 23                  		inc	hl
(1) 2695/     D65 : 14                  		inc	d
(1) 2696/     D66 : 14                  		inc	d
(1) 2697/     D67 : 14                  		inc	d
(1) 2698/     D68 : 14                  		inc	d
(1) 2699/     D69 : CF                  		rst	8
(1) 2700/     D6A : C1                  		pop	bc
(1) 2701/     D6B : C9                  		ret
(1) 2702/     D6C :                     .write_tl:
(1) 2703/     D6C : 7E                  		ld	a,(hl)
(1) 2704/     D6D : 91                  		sub	a,c
(1) 2705/     D6E : C5                  		push	bc
(1) 2706/     D6F : 5F                  		ld	e,a
(1) 2707/     D70 : FD 4E 05            		ld	c,(iy+05h)
(1) 2708/     D73 : CD AC 10            		call	fm_autoreg
(1) 2709/     D76 : CF                  		rst	8
(1) 2710/     D77 : C1                  		pop	bc
(1) 2711/     D78 : C9                  		ret
(1) 2712/     D79 :                     ; Jump carry list
(1) 2713/     D79 :                     .fm_cindx:
(1) 2714/     D79 : 08                  		db 1000b
(1) 2715/     D7A : 08                  		db 1000b
(1) 2716/     D7B : 08                  		db 1000b
(1) 2717/     D7C : 08                  		db 1000b
(1) 2718/     D7D : 0C                  		db 1100b
(1) 2719/     D7E : 0E                  		db 1110b
(1) 2720/     D7F : 0E                  		db 1110b
(1) 2721/     D80 : 0F                  		db 1111b
(1) 2722/     D81 :                     ; c - KeyId
(1) 2723/     D81 :                     .fm_wrtalpan:
(1) 2724/     D81 : FD 7E 0C            		ld	a,(iy+0Ch)	; 0B0h algorithm
(1) 2725/     D84 : 5F                  		ld	e,a
(1) 2726/     D85 : 79                  		ld	a,c
(1) 2727/     D86 : E6 03               		and	011b
(1) 2728/     D88 : F6 B0               		or	0B0h
(1) 2729/     D8A : 57                  		ld	d,a
(1) 2730/     D8B : CD AC 10            		call	fm_autoreg
(1) 2731/     D8E : CF                  		rst	8
(1) 2732/     D8F : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2733/     D92 : 2F                  		cpl				; REVERSE bits
(1) 2734/     D93 : E6 C0               		and	11000000b
(1) 2735/     D95 : 5F                  		ld	e,a
(1) 2736/     D96 : FD 7E 0D            		ld	a,(iy+0Dh)		; 0B4h %LRaa0ppp
(1) 2737/     D99 : E6 3F               		and	00111111b
(1) 2738/     D9B : B3                  		or	e
(1) 2739/     D9C : 5F                  		ld	e,a
(1) 2740/     D9D : 79                  		ld	a,c
(1) 2741/     D9E : E6 03               		and	011b
(1) 2742/     DA0 : F6 B4               		or	0B4h
(1) 2743/     DA2 : 57                  		ld	d,a
(1) 2744/     DA3 : CD AC 10            		call	fm_autoreg
(1) 2745/     DA6 : CF                  		rst	8
(1) 2746/     DA7 : FD 7E 0E            		ld	a,(iy+0Eh)
(1) 2747/     DAA : CB 5F               		bit	3,a
(1) 2748/     DAC : 28 06               		jr	z,.no_lfo
(1) 2749/     DAE : 5F                  		ld	e,a
(1) 2750/     DAF : 16 22               		ld	d,22h
(1) 2751/     DB1 : CD B5 10            		call	fm_send_1
(1) 2752/     DB4 :                     .no_lfo:
(1) 2753/     DB4 : C9                  		ret
(1) 2754/     DB5 :                     
(1) 2755/     DB5 :                     ; ----------------------------------------
(1) 2756/     DB5 :                     
(1) 2757/     DB5 :                     .chnl_ulnkoff:
(1) 2758/     DB5 : 0E 00               		ld	c,0
(1) 2759/     DB7 :                     .chnl_ulnk:
(1) 2760/     DB7 : CF                  		rst	8
(1) 2761/     DB8 : AF                  		xor	a
(1) 2762/     DB9 : DD 77 01            		ld	(ix+chnl_Chip),a
(1) 2763/     DBC : FD 77 00            		ld	(iy),a		; Delete link, chip and prio
(1) 2764/     DBF : FD 77 01            		ld	(iy+1),a
(1) 2765/     DC2 : FD 71 02            		ld	(iy+2),c
(1) 2766/     DC5 : C9                  		ret
(1) 2767/     DC6 :                     .chnl_ulnkcut:
(1) 2768/     DC6 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 2769/     DC9 : CD B7 0D            		call	.chnl_ulnk
(1) 2770/     DCC : FD 77 08            		ld	(iy+08h),a
(1) 2771/     DCF : FD 77 09            		ld	(iy+09h),a
(1) 2772/     DD2 : FD 77 0A            		ld	(iy+0Ah),a
(1) 2773/     DD5 : FD 77 0B            		ld	(iy+0Bh),a
(1) 2774/     DD8 :                     ; 		push	iy
(1) 2775/     DD8 :                     ; 		pop	hl
(1) 2776/     DD8 :                     ; 		ld	bc,8-2		; Go to 08h
(1) 2777/     DD8 :                     ; 		add	hl,bc
(1) 2778/     DD8 :                     ; 		rst	8
(1) 2779/     DD8 :                     ; 		ld	b,8/2
(1) 2780/     DD8 :                     ; .clrfull:
(1) 2781/     DD8 :                     ; 		ld	(hl),0		; Reset settings 08-0Bh
(1) 2782/     DD8 :                     ; 		inc	hl
(1) 2783/     DD8 :                     ; 		ld	(hl),0
(1) 2784/     DD8 :                     ; 		inc	hl
(1) 2785/     DD8 :                     ; 		rst	8
(1) 2786/     DD8 :                     ; 		djnz	.clrfull
(1) 2787/     DD8 : C9                  		ret
(1) 2788/     DD9 :                     
(1) 2789/     DD9 :                     ; ============================================================
(1) 2790/     DD9 :                     ; --------------------------------------------------------
(1) 2791/     DD9 :                     ; Communicate with the 32X from here.
(1) 2792/     DD9 :                     ; --------------------------------------------------------
(1) 2793/     DD9 :                     
(1) 2794/     DD9 :                     ex_comm:
(1) 2795/     DD9 : CF                  		rst	8
(1) 2796/     DDA : 00                  		nop
(1) 2910/     DDB : C9                  		ret
(1) 2911/     DDC :                     
(1) 2912/     DDC :                     ; ====================================================================
(1) 2913/     DDC :                     ; ----------------------------------------------------------------
(1) 2914/     DDC :                     ; Subroutines
(1) 2915/     DDC :                     ; ----------------------------------------------------------------
(1) 2916/     DDC :                     
(1) 2917/     DDC :                     ; --------------------------------------------------------
(1) 2918/     DDC :                     ; Init sound engine
(1) 2919/     DDC :                     ; --------------------------------------------------------
(1) 2920/     DDC :                     
(1) 2921/     DDC :                     gema_init:
(1) 2922/     DDC : CD E0 10            		call	dac_off
(1) 2923/     DDF : 3E 00               		ld	a,0
(1) 2924/     DE1 : 32 3F 00            		ld	(marsUpd),a
(1) 2925/     DE4 : 21 00 1D            		ld	hl,dWaveBuff	; hl - Wave buffer START
(1) 2926/     DE7 : 11 01 1D            		ld	de,dWaveBuff+1	; de - Wave next byte
(1) 2927/     DEA : 01 FF 00            		ld	bc,100h-1	; bc - length for copying
(1) 2928/     DED : 36 80               		ld	(hl),80h	; Set first byte
(1) 2929/     DEF : ED B0               		ldir			; Start copying
(1) 2930/     DF1 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 2931/     DF4 : 36 9F               		ld	(hl),09Fh
(1) 2932/     DF6 : 36 BF               		ld	(hl),0BFh
(1) 2933/     DF8 : 36 DF               		ld	(hl),0DFh
(1) 2934/     DFA : 36 FF               		ld	(hl),0FFh
(1) 2935/     DFC : 11 0B 22            		ld	de,2208h|3	; Set Default LFO
(1) 2936/     DFF : CD B5 10            		call	fm_send_1
(1) 2937/     E02 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 2938/     E05 : CD B5 10            		call	fm_send_1
(1) 2939/     E08 : 11 00 28            		ld	de,2800h	; FM KEYS off
(1) 2940/     E0B : CD B5 10            		call	fm_send_1
(1) 2941/     E0E : 1C                  		inc	e
(1) 2942/     E0F : CD B5 10            		call	fm_send_1
(1) 2943/     E12 : 1C                  		inc	e
(1) 2944/     E13 : CD B5 10            		call	fm_send_1
(1) 2945/     E16 : 1C                  		inc	e
(1) 2946/     E17 : 1C                  		inc	e
(1) 2947/     E18 : CD B5 10            		call	fm_send_1
(1) 2948/     E1B : 1C                  		inc	e
(1) 2949/     E1C : CD B5 10            		call	fm_send_1
(1) 2950/     E1F : 1C                  		inc	e
(1) 2951/     E20 : CD B5 10            		call	fm_send_1
(1) 2952/     E23 : 21 00 60            		ld	hl,6000h
(1) 2953/     E26 : 3E 01               		ld	a,1
(1) 2954/     E28 : 77                  		ld	(hl),a
(1) 2955/     E29 : 77                  		ld	(hl),a
(1) 2956/     E2A : 77                  		ld	(hl),a
(1) 2957/     E2B : 77                  		ld	(hl),a
(1) 2958/     E2C : 77                  		ld	(hl),a
(1) 2959/     E2D : 77                  		ld	(hl),a
(1) 2960/     E2E : 77                  		ld	(hl),a
(1) 2961/     E2F : 77                  		ld	(hl),a
(1) 2962/     E30 : 77                  		ld	(hl),a
(1) 2963/     E31 : FD 21 F7 13         		ld	iy,nikona_BuffList
(1) 2964/     E35 : 0E 01               		ld	c,1		; Start at this priority
(1) 2965/     E37 :                     .setup_list:
(1) 2966/     E37 : FD 7E 00            		ld	a,(iy)
(1) 2967/     E3A : FE FF               		cp	-1
(1) 2968/     E3C : 28 44               		jr	z,.end_setup
(1) 2969/     E3E : FD 23               		inc	iy
(1) 2970/     E40 : 6F                  		ld	l,a
(1) 2971/     E41 : FD 66 00            		ld	h,(iy)
(1) 2972/     E44 : E5                  		push	hl
(1) 2973/     E45 : DD E1               		pop	ix
(1) 2974/     E47 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 2975/     E4A : DD 36 01 FF         		ld	(ix+trk_seqId),-1	; Reset sequence ID
(1) 2976/     E4E : FD 23               		inc	iy
(1) 2977/     E50 : 11 26 00            		ld	de,trk_ChnList		; ** settings
(1) 2978/     E53 : 19                  		add	hl,de
(1) 2979/     E54 :                     	; iy - src
(1) 2980/     E54 :                     	; hl - dst
(1) 2981/     E54 : 06 0A               		ld	b,5*2
(1) 2982/     E56 :                     .st_copy:
(1) 2983/     E56 : FD 7E 00            		ld	a,(iy)
(1) 2984/     E59 : 77                  		ld	(hl),a
(1) 2985/     E5A : FD 23               		inc	iy
(1) 2986/     E5C : 23                  		inc	hl
(1) 2987/     E5D : 10 F7               		djnz	.st_copy
(1) 2988/     E5F : 0C                  		inc	c
(1) 2989/     E60 : FD 7E 00            		ld	a,(iy)			; MAX blocks
(1) 2990/     E63 : DD 77 1D            		ld	(ix+trk_MaxBlks),a
(1) 2991/     E66 : FD 23               		inc	iy
(1) 2992/     E68 : FD 7E 00            		ld	a,(iy)			; MAX heads
(1) 2993/     E6B : DD 77 1E            		ld	(ix+trk_MaxHdrs),a
(1) 2994/     E6E : FD 23               		inc	iy
(1) 2995/     E70 : FD 7E 00            		ld	a,(iy)			; MAX intruments
(1) 2996/     E73 : DD 77 1F            		ld	(ix+trk_MaxIns),a
(1) 2997/     E76 : FD 23               		inc	iy
(1) 2998/     E78 : FD 7E 00            		ld	a,(iy)			; MAX channels
(1) 2999/     E7B : DD 77 1C            		ld	(ix+trk_MaxChnls),a
(1) 3000/     E7E : FD 23               		inc	iy
(1) 3001/     E80 : 18 B5               		jr	.setup_list
(1) 3002/     E82 :                     .end_setup:
(1) 3003/     E82 : 1E 00               		ld	e,0
(1) 3004/     E84 : C3 D9 04            		jp	init_RomTrcks
(1) 3005/     E87 :                     
(1) 3006/     E87 :                     ; --------------------------------------------------------
(1) 3007/     E87 :                     ; get_tick
(1) 3008/     E87 :                     ;
(1) 3009/     E87 :                     ; Checks if VBlank triggred a TICK
(1) 3010/     E87 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3011/     E87 :                     ; --------------------------------------------------------
(1) 3012/     E87 :                     
(1) 3013/     E87 :                     get_tick:
(1) 3014/     E87 : F3                  		di				; Disable ints
(1) 3015/     E88 : F5                  		push	af
(1) 3016/     E89 : E5                  		push	hl
(1) 3017/     E8A : 21 04 17            		ld	hl,tickFlag		; read last TICK flag
(1) 3018/     E8D : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3019/     E8E : B7                  		or 	a
(1) 3020/     E8F : 28 13               		jr	z,.ctnotick
(1) 3021/     E91 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3022/     E93 : 23                  		inc	hl			; Move to tickCnt
(1) 3023/     E94 : 34                  		inc	(hl)			; and increment
(1) 3024/     E95 : CF                  		rst	8
(1) 3025/     E96 : D5                  		push	de
(1) 3026/     E97 : 2A 1C 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3027/     E9A : ED 5B 1E 00         		ld	de,(sbeatPtck)
(1) 3028/     E9E : CF                  		rst	8
(1) 3029/     E9F : 19                  		add	hl,de
(1) 3030/     EA0 : 22 1C 00            		ld	(sbeatAcc),hl
(1) 3031/     EA3 : D1                  		pop	de
(1) 3032/     EA4 :                     .ctnotick:
(1) 3033/     EA4 : E1                  		pop	hl
(1) 3034/     EA5 : F1                  		pop	af
(1) 3035/     EA6 : FB                  		ei				; Enable ints again
(1) 3036/     EA7 : C9                  		ret
(1) 3037/     EA8 :                     
(1) 3038/     EA8 :                     ; --------------------------------------------------------
(1) 3039/     EA8 :                     ; showRom
(1) 3040/     EA8 :                     ; Get ROM bank position.
(1) 3041/     EA8 :                     ;
(1) 3042/     EA8 :                     ; Input:
(1) 3043/     EA8 :                     ;  b - 68k address $xx0000
(1) 3044/     EA8 :                     ; hl - 68k address $00xxxx
(1) 3045/     EA8 :                     ;
(1) 3046/     EA8 :                     ; Output:
(1) 3047/     EA8 :                     ; hl - ROM position ready to use for reading
(1) 3048/     EA8 :                     ; --------------------------------------------------------
(1) 3049/     EA8 :                     
(1) 3050/     EA8 :                     showRom:
(1) 3051/     EA8 : CF                  		rst	8
(1) 3052/     EA9 : D5                  		push	de
(1) 3053/     EAA : C5                  		push	bc
(1) 3054/     EAB : 11 00 60            		ld	de,6000h
(1) 3055/     EAE : 7C                  		ld	a,h
(1) 3056/     EAF : 07                  		rlca
(1) 3057/     EB0 : CF                  		rst	8
(1) 3058/     EB1 : 12                  		ld	(de),a
(1) 3059/     EB2 : 78                  		ld	a,b
(1) 3060/     EB3 : 12                  		ld	(de),a
(1) 3061/     EB4 : 1F                  		rra
(1) 3062/     EB5 : 12                  		ld	(de),a
(1) 3063/     EB6 : 1F                  		rra
(1) 3064/     EB7 : 12                  		ld	(de),a
(1) 3065/     EB8 : 1F                  		rra
(1) 3066/     EB9 : CF                  		rst	8
(1) 3067/     EBA : 12                  		ld	(de),a
(1) 3068/     EBB : 1F                  		rra
(1) 3069/     EBC : 12                  		ld	(de),a
(1) 3070/     EBD : 1F                  		rra
(1) 3071/     EBE : 12                  		ld	(de),a
(1) 3072/     EBF : 1F                  		rra
(1) 3073/     EC0 : 12                  		ld	(de),a
(1) 3074/     EC1 : 1F                  		rra
(1) 3075/     EC2 : 12                  		ld	(de),a
(1) 3076/     EC3 : C1                  		pop	bc
(1) 3077/     EC4 : D1                  		pop	de
(1) 3078/     EC5 : CB FC               		set	7,h
(1) 3079/     EC7 : C9                  		ret
(1) 3080/     EC8 :                     
(1) 3081/     EC8 :                     ; --------------------------------------------------------
(1) 3082/     EC8 :                     ; transferRom
(1) 3083/     EC8 :                     ;
(1) 3084/     EC8 :                     ; Transfer bytes from ROM to RAM. This also tells
(1) 3085/     EC8 :                     ; to 68k that we want to access ROM
(1) 3086/     EC8 :                     ;
(1) 3087/     EC8 :                     ; Input:
(1) 3088/     EC8 :                     ; a  - 68K Address $xx0000
(1) 3089/     EC8 :                     ;  c - Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3090/     EC8 :                     ; hl - 68K Address $00xxxx
(1) 3091/     EC8 :                     ; de - Destination pointer
(1) 3092/     EC8 :                     ;
(1) 3093/     EC8 :                     ; Uses:
(1) 3094/     EC8 :                     ; b
(1) 3095/     EC8 :                     ;
(1) 3096/     EC8 :                     ; Notes:
(1) 3097/     EC8 :                     ; call RST 20h first if transfering anything other
(1) 3098/     EC8 :                     ; than sample data, just to be safe.
(1) 3099/     EC8 :                     ; --------------------------------------------------------
(1) 3100/     EC8 :                     
(1) 3101/     EC8 :                     transferRom:
(1) 3102/     EC8 : CF                  		rst	8
(1) 3103/     EC9 : DD E5               		push	ix
(1) 3104/     ECB : DD 21 81 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3105/     ECF : 22 36 00            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3106/     ED2 : CB BC               		res	7,h
(1) 3107/     ED4 : 06 00               		ld	b,0
(1) 3108/     ED6 : 0B                  		dec	bc
(1) 3109/     ED7 : 09                  		add	hl,bc
(1) 3110/     ED8 : CB 7C               		bit	7,h
(1) 3111/     EDA : 20 0B               		jr	nz,.double
(1) 3112/     EDC : 2A 36 00            		ld	hl,(x68ksrclsb)	; single transfer
(1) 3113/     EDF : 0C                  		inc	c
(1) 3114/     EE0 : 47                  		ld	b,a
(1) 3115/     EE1 : CD 0B 0F            		call	.transfer
(1) 3116/     EE4 : DD E1               		pop	ix
(1) 3117/     EE6 : C9                  		ret
(1) 3118/     EE7 :                     .double:
(1) 3119/     EE7 : CF                  		rst	8
(1) 3120/     EE8 : 47                  		ld	b,a		; double transfer
(1) 3121/     EE9 : C5                  		push	bc
(1) 3122/     EEA : E5                  		push	hl
(1) 3123/     EEB : 79                  		ld	a,c
(1) 3124/     EEC : 95                  		sub	a,l
(1) 3125/     EED : 4F                  		ld	c,a
(1) 3126/     EEE : 2A 36 00            		ld	hl,(x68ksrclsb)
(1) 3127/     EF1 : CD 0B 0F            		call	.transfer
(1) 3128/     EF4 : E1                  		pop	hl
(1) 3129/     EF5 : C1                  		pop	bc
(1) 3130/     EF6 :                     ; 		rst	8
(1) 3131/     EF6 : 4D                  		ld	c,l
(1) 3132/     EF7 : 0C                  		inc	c
(1) 3133/     EF8 : 3A 37 00            		ld	a,(x68ksrcmid)
(1) 3134/     EFB : E6 80               		and	80h
(1) 3135/     EFD : C6 80               		add	a,80h
(1) 3136/     EFF : 67                  		ld	h,a
(1) 3137/     F00 : 2E 00               		ld	l,0
(1) 3138/     F02 : 30 01               		jr	nc,.x68knocarry
(1) 3139/     F04 : 04                  		inc	b
(1) 3140/     F05 :                     .x68knocarry:
(1) 3141/     F05 : CD 0B 0F            		call	.transfer
(1) 3142/     F08 : DD E1               		pop	ix
(1) 3143/     F0A : C9                  		ret
(1) 3144/     F0B :                     
(1) 3145/     F0B :                     ; ------------------------------------------------
(1) 3146/     F0B :                     ; b  - Source ROM xx0000
(1) 3147/     F0B :                     ;  c - Bytes to transfer (00h not allowed)
(1) 3148/     F0B :                     ; hl - Source ROM 00xxxx (OR'd with 8000h)
(1) 3149/     F0B :                     ; de - Destination address
(1) 3150/     F0B :                     ; ix - Location of the ROM block flag(s)
(1) 3151/     F0B :                     ;
(1) 3152/     F0B :                     ; Uses:
(1) 3153/     F0B :                     ; a
(1) 3154/     F0B :                     ; ------------------------------------------------
(1) 3155/     F0B :                     
(1) 3156/     F0B :                     .transfer:
(1) 3157/     F0B : CD A8 0E            		call	showRom		; Pick ROM bank
(1) 3158/     F0E :                     
(1) 3159/     F0E :                     	; Transfer ROM data in packets
(1) 3160/     F0E :                     	; while playing the cache'd sample
(1) 3161/     F0E :                     	; *** CRITICAL PROCESS ***
(1) 3162/     F0E :                     	;
(1) 3163/     F0E :                     	; pseudo-reference
(1) 3164/     F0E :                     	; for ldir:
(1) 3165/     F0E :                     	; ld (de),(hl)	; load (hl) to (de), no a
(1) 3166/     F0E :                     	; inc de	; next de
(1) 3167/     F0E :                     	; inc hl	; next hl
(1) 3168/     F0E :                     	; dec bc	; decrement bc
(1) 3169/     F0E :                     	;
(1) 3170/     F0E : 06 00               		ld	b,0
(1) 3171/     F10 : 79                  		ld	a,c		; a - Size counter
(1) 3172/     F11 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3173/     F13 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3174/     F15 :                     .x68kloop:
(1) 3175/     F15 : CF                  		rst	8
(1) 3176/     F16 : 00                  		nop
(1) 3177/     F17 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3178/     F19 : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3179/     F1D : C4 37 0F            		call	nz,.x68klpwt
(1) 3180/     F20 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3181/     F22 : CF                  		rst	8
(1) 3182/     F23 : 00                  		nop
(1) 3183/     F24 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3184/     F26 : D2 15 0F            		jp	nc,.x68kloop
(1) 3185/     F29 :                     ; last block
(1) 3186/     F29 :                     .x68klast:
(1) 3187/     F29 : CF                  		rst	8
(1) 3188/     F2A : C6 08               		add	a,MAX_TRFRPZ
(1) 3189/     F2C : 4F                  		ld	c,a
(1) 3190/     F2D : DD CB 00 46         		bit	0,(ix)		; Genesis requests LOCK?
(1) 3191/     F31 : C4 37 0F            		call	nz,.x68klpwt
(1) 3192/     F34 : ED B0               		ldir
(1) 3193/     F36 : C9                  		ret
(1) 3194/     F37 :                     
(1) 3195/     F37 :                     ; Wait here until Genesis unlocks ROM
(1) 3196/     F37 :                     .x68klpwt:
(1) 3197/     F37 : CF                  		rst	8
(1) 3198/     F38 : 00                  		nop
(1) 3199/     F39 : 00                  		nop
(1) 3200/     F3A : 00                  		nop
(1) 3201/     F3B : 00                  		nop
(1) 3202/     F3C :                     .x68kpwtlp:
(1) 3203/     F3C : CF                  		rst	8
(1) 3204/     F3D : 00                  		nop
(1) 3205/     F3E : 00                  		nop
(1) 3206/     F3F : 00                  		nop
(1) 3207/     F40 : 00                  		nop
(1) 3208/     F41 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3209/     F45 : 20 F5               		jr	nz,.x68kpwtlp
(1) 3210/     F47 : CF                  		rst	8
(1) 3211/     F48 : C9                  		ret
(1) 3212/     F49 :                     
(1) 3213/     F49 :                     ; ====================================================================
(1) 3214/     F49 :                     ; ----------------------------------------------------------------
(1) 3215/     F49 :                     ; Sound chip routines
(1) 3216/     F49 :                     ; ----------------------------------------------------------------
(1) 3217/     F49 :                     
(1) 3218/     F49 :                     ; --------------------------------------------------------
(1) 3219/     F49 :                     ; chip_env
(1) 3220/     F49 :                     ;
(1) 3221/     F49 :                     ; Process PSG and FM
(1) 3222/     F49 :                     ; --------------------------------------------------------
(1) 3223/     F49 :                     
(1) 3224/     F49 :                     chip_env:
(1) 3225/     F49 : FD 21 7E 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3226/     F4D : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3227/     F51 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3228/     F53 : 06 04               		ld	b,4			; b - 4 channels
(1) 3229/     F55 :                     .vloop:
(1) 3230/     F55 : CF                  		rst	8
(1) 3231/     F56 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3232/     F59 : FD 36 00 00         		ld	(iy+COM),0
(1) 3233/     F5D :                     
(1) 3234/     F5D :                     	; ----------------------------
(1) 3235/     F5D :                     	; bit 2 - stop sound
(1) 3236/     F5D : CB 53               		bit	2,e
(1) 3237/     F5F : 28 0C               		jr	z,.ckof
(1) 3238/     F61 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3239/     F65 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3240/     F69 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3241/     F6D :                     .ckof:
(1) 3242/     F6D :                     
(1) 3243/     F6D :                     	; ----------------------------
(1) 3244/     F6D :                     	; bit 1 - key off
(1) 3245/     F6D : CB 4B               		bit	1,e
(1) 3246/     F6F : 28 0F               		jr      z,.ckon
(1) 3247/     F71 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3248/     F74 : B7                  		or	a
(1) 3249/     F75 : 28 09               		jr	z,.ckon
(1) 3250/     F77 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3251/     F7B : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3252/     F7F : CF                  		rst	8
(1) 3253/     F80 :                     .ckon:
(1) 3254/     F80 :                     
(1) 3255/     F80 :                     	; ----------------------------
(1) 3256/     F80 :                     	; bit 0 - key on
(1) 3257/     F80 : CB 43               		bit	0,e
(1) 3258/     F82 : 28 1A               		jr	z,.envproc
(1) 3259/     F84 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3260/     F88 : 78                  		ld	a,b
(1) 3261/     F89 : FE 04               		cp	4			; NOISE channel?
(1) 3262/     F8B : 20 08               		jr	nz,.nskip
(1) 3263/     F8D : CF                  		rst	8			; Set NOISE mode
(1) 3264/     F8E : 3A 06 17            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3265/     F91 : B1                  		or	c
(1) 3266/     F92 : DD 77 00            		ld	(ix),a
(1) 3267/     F95 :                     .nskip:
(1) 3268/     F95 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3269/     F99 : CF                  		rst	8
(1) 3270/     F9A : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3271/     F9E :                     .nblock:
(1) 3272/     F9E :                     
(1) 3273/     F9E :                     	; ----------------------------
(1) 3274/     F9E :                     	; Process effects
(1) 3275/     F9E :                     	; ----------------------------
(1) 3276/     F9E :                     .envproc:
(1) 3277/     F9E : FD 7E 18            		ld	a,(iy+MODE)
(1) 3278/     FA1 : B7                  		or	a			; no modes
(1) 3279/     FA2 : CA 28 10            		jp	z,.vedlp
(1) 3280/     FA5 : FE 01               		cp 	001b			; Attack mode
(1) 3281/     FA7 : 20 2C               		jr	nz,.chk2
(1) 3282/     FA9 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3283/     FAD : FD 5E 24            		ld	e,(iy+ALV)
(1) 3284/     FB0 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3285/     FB3 : B7                  		or	a
(1) 3286/     FB4 : 28 16               		jr	z,.atkend
(1) 3287/     FB6 : 57                  		ld	d,a			; c - attack rate
(1) 3288/     FB7 : 7B                  		ld	a,e			; a - attack level
(1) 3289/     FB8 : CF                  		rst	8
(1) 3290/     FB9 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3291/     FBC : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3292/     FBD : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3293/     FBF : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3294/     FC1 : BB                  		cp	e			; attack rate == level?
(1) 3295/     FC2 : 38 08               		jr	c,.atkend
(1) 3296/     FC4 : 28 06               		jr	z,.atkend
(1) 3297/     FC6 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3298/     FC9 : CF                  		rst	8
(1) 3299/     FCA : 18 5C               		jr	.vedlp
(1) 3300/     FCC :                     .atkend:
(1) 3301/     FCC : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3302/     FCF :                     .atkzero:
(1) 3303/     FCF : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3304/     FD3 : 18 53               		jr	.vedlp
(1) 3305/     FD5 :                     .chk2:
(1) 3306/     FD5 :                     
(1) 3307/     FD5 : FE 02               		cp	010b			; Decay mode
(1) 3308/     FD7 : 20 31               		jr	nz,.chk4
(1) 3309/     FD9 :                     .dectmr:
(1) 3310/     FD9 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3311/     FDD : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3312/     FE0 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3313/     FE3 : BB                  		cp	e
(1) 3314/     FE4 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3315/     FE6 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3316/     FE8 : CF                  		rst	8
(1) 3317/     FE9 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3318/     FEC : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3319/     FEE : BB                  		cp	e			; compare level
(1) 3320/     FEF : 38 0F               		jr	c,.dkyend		; and finish
(1) 3321/     FF1 : 18 08               		jr	.dksav
(1) 3322/     FF3 :                     .dkadd:
(1) 3323/     FF3 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3324/     FF6 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3325/     FF8 : BB                  		cp	e			; compare level
(1) 3326/     FF9 : 30 05               		jr	nc,.dkyend
(1) 3327/     FFB :                     .dksav:
(1) 3328/     FFB : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3329/     FFE : 18 28               		jr	.vedlp
(1) 3330/    1000 :                     .dkyend:
(1) 3331/    1000 : CF                  		rst	8
(1) 3332/    1001 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3333/    1004 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3334/    1008 : 18 1E               		jr	.vedlp
(1) 3335/    100A :                     .chk4:
(1) 3336/    100A : FE 04               		cp	100b			; Sustain phase
(1) 3337/    100C : 20 1A               		jr	nz,.vedlp
(1) 3338/    100E : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3339/    1012 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3340/    1015 : CF                  		rst	8
(1) 3341/    1016 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3342/    1019 : 38 05               		jr	c,.killenv		; release done
(1) 3343/    101B : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3344/    101E : 18 08               		jr	.vedlp
(1) 3345/    1020 :                     .killenv:
(1) 3346/    1020 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3347/    1024 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3348/    1028 :                     .vedlp:
(1) 3349/    1028 :                     
(1) 3350/    1028 :                     	; ----------------------------
(1) 3351/    1028 :                     	; PSG UPDATE
(1) 3352/    1028 :                     	; ----------------------------
(1) 3353/    1028 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3354/    102B : B7                  		or	a
(1) 3355/    102C : 28 72               		jr	z,.noupd
(1) 3356/    102E : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3357/    1032 : 59                  		ld	e,c
(1) 3358/    1033 : 3A 06 17            		ld	a,(psgHatMode)
(1) 3359/    1036 : 57                  		ld	d,a
(1) 3360/    1037 : E6 03               		and	011b
(1) 3361/    1039 : FE 03               		cp	011b
(1) 3362/    103B : 20 1D               		jr	nz,.normal
(1) 3363/    103D : CF                  		rst	8
(1) 3364/    103E : 78                  		ld	a,b		; Channel 4?
(1) 3365/    103F : FE 03               		cp	3
(1) 3366/    1041 : 28 13               		jr	z,.silnc_3
(1) 3367/    1043 : FE 04               		cp	4
(1) 3368/    1045 : 20 18               		jr	nz,.do_nfreq
(1) 3369/    1047 : 3A 06 17            		ld	a,(psgHatMode)
(1) 3370/    104A : 57                  		ld	d,a
(1) 3371/    104B : E6 03               		and	011b
(1) 3372/    104D : CF                  		rst	8
(1) 3373/    104E : FE 03               		cp	011b
(1) 3374/    1050 : 20 30               		jr	nz,.vonly
(1) 3375/    1052 : 1E C0               		ld	e,0C0h
(1) 3376/    1054 : 18 09               		jr	.do_nfreq
(1) 3377/    1056 :                     .silnc_3:
(1) 3378/    1056 : 3E FF               		ld	a,-1
(1) 3379/    1058 : 18 32               		jr	.vlmuch
(1) 3380/    105A :                     .normal:
(1) 3381/    105A : 78                  		ld	a,b
(1) 3382/    105B : FE 04               		cp	4
(1) 3383/    105D : 28 23               		jr	z,.vonly
(1) 3384/    105F :                     .do_nfreq:
(1) 3385/    105F : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3386/    1062 : FD 66 20            		ld	h,(iy+DTH)
(1) 3387/    1065 :                     
(1) 3388/    1065 :                     	; freq effects go here
(1) 3389/    1065 :                     	; (save e FIRST.)
(1) 3390/    1065 :                     	;	push	de
(1) 3391/    1065 :                     	;	pop	de
(1) 3392/    1065 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3393/    1066 : E6 0F               		and	00001111b
(1) 3394/    1068 : B3                  		or	e		; OR with channel set in e
(1) 3395/    1069 : CF                  		rst	8
(1) 3396/    106A : DD 77 00            		ld	(ix),a		; write it
(1) 3397/    106D : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3398/    106E : 0F                  		rrca
(1) 3399/    106F : 0F                  		rrca
(1) 3400/    1070 : 0F                  		rrca
(1) 3401/    1071 : 0F                  		rrca
(1) 3402/    1072 : E6 0F               		and	00001111b
(1) 3403/    1074 : 5F                  		ld	e,a
(1) 3404/    1075 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3405/    1076 : CF                  		rst	8
(1) 3406/    1077 : 07                  		rlca
(1) 3407/    1078 : 07                  		rlca
(1) 3408/    1079 : 07                  		rlca
(1) 3409/    107A : 07                  		rlca
(1) 3410/    107B : E6 30               		and	00110000b
(1) 3411/    107D : B3                  		or	e
(1) 3412/    107E : DD 77 00            		ld	(ix),a
(1) 3413/    1081 : CF                  		rst	8
(1) 3414/    1082 :                     .vonly:
(1) 3415/    1082 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3416/    1085 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3417/    1088 : 30 02               		jr	nc,.vlmuch
(1) 3418/    108A : 3E FF               		ld	a,-1
(1) 3419/    108C :                     .vlmuch:
(1) 3420/    108C : CB 3F               		srl	a			; (Level >> 4)
(1) 3421/    108E : CB 3F               		srl	a
(1) 3422/    1090 : CB 3F               		srl	a
(1) 3423/    1092 : CF                  		rst	8
(1) 3424/    1093 : CB 3F               		srl	a
(1) 3425/    1095 : E6 0F               		and	00001111b		; Filter volume value
(1) 3426/    1097 : B1                  		or	c			; and OR with current channel
(1) 3427/    1098 : F6 90               		or	90h			; Set volume-set mode
(1) 3429/    109A : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3431/    109D : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3432/    10A0 :                     .noupd:
(1) 3433/    10A0 :                     	; ----------------------------
(1) 3434/    10A0 : FD 2B               		dec	iy			; next COM to check
(1) 3435/    10A2 : 79                  		ld	a,c
(1) 3436/    10A3 : CF                  		rst	8
(1) 3437/    10A4 : D6 20               		sub	a,20h			; next PSG backwards
(1) 3438/    10A6 : 4F                  		ld	c,a
(1) 3439/    10A7 : 05                  		dec	b
(1) 3440/    10A8 : C2 55 0F            		jp	nz,.vloop
(1) 3441/    10AB : C9                  		ret
(1) 3442/    10AC :                     
(1) 3443/    10AC :                     ; ---------------------------------------------
(1) 3444/    10AC :                     ; FM register writes
(1) 3445/    10AC :                     ;
(1) 3446/    10AC :                     ; Input:
(1) 3447/    10AC :                     ; d - ctrl
(1) 3448/    10AC :                     ; e - data
(1) 3449/    10AC :                     ; ---------------------------------------------
(1) 3450/    10AC :                     
(1) 3451/    10AC :                     ; c - KeyID
(1) 3452/    10AC :                     fm_autoreg:
(1) 3453/    10AC : CB 51               		bit	2,c
(1) 3454/    10AE : CC B5 10            		call	z,fm_send_1
(1) 3455/    10B1 : C4 C0 10            		call	nz,fm_send_2
(1) 3456/    10B4 : C9                  		ret
(1) 3457/    10B5 :                     ; Channels 1-3 and global registers
(1) 3458/    10B5 :                     fm_send_1:
(1) 3459/    10B5 : 7A                  		ld	a,d
(1) 3460/    10B6 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3461/    10B9 : 00                  		nop
(1) 3462/    10BA : 7B                  		ld	a,e
(1) 3463/    10BB : 32 01 40            		ld	(Zym_data_1),a
(1) 3464/    10BE : 00                  		nop
(1) 3465/    10BF : C9                  		ret
(1) 3466/    10C0 :                     ; Channels 4-6
(1) 3467/    10C0 :                     fm_send_2:
(1) 3468/    10C0 : 7A                  		ld	a,d
(1) 3469/    10C1 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3470/    10C4 : 00                  		nop
(1) 3471/    10C5 : 7B                  		ld	a,e
(1) 3472/    10C6 : 32 03 40            		ld	(Zym_data_2),a
(1) 3473/    10C9 : 00                  		nop
(1) 3474/    10CA : C9                  		ret
(1) 3475/    10CB :                     
(1) 3476/    10CB :                     ; --------------------------------------------------------
(1) 3477/    10CB :                     ; brute-force WAVE ON/OFF playback
(1) 3478/    10CB :                     ; --------------------------------------------------------
(1) 3479/    10CB :                     
(1) 3480/    10CB :                     dac_on:
(1) 3481/    10CB : 3E 2B               		ld	a,2Bh
(1) 3482/    10CD : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3483/    10D0 : 3E 80               		ld	a,80h
(1) 3484/    10D2 : 32 01 40            		ld	(Zym_data_1),a
(1) 3485/    10D5 : 3E D9               		ld 	a,zopcExx
(1) 3486/    10D7 : 32 08 00            		ld	(dac_me),a
(1) 3487/    10DA : 3E F5               		ld 	a,zopcPushAf
(1) 3488/    10DC : 32 20 00            		ld	(dac_fill),a
(1) 3489/    10DF : C9                  		ret
(1) 3490/    10E0 :                     dac_off:
(1) 3491/    10E0 : 3E 2B               		ld	a,2Bh
(1) 3492/    10E2 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3493/    10E5 : 3E 00               		ld	a,00h
(1) 3494/    10E7 : 32 01 40            		ld	(Zym_data_1),a
(1) 3495/    10EA : 3E C9               		ld 	a,zopcRet
(1) 3496/    10EC : 32 08 00            		ld	(dac_me),a
(1) 3497/    10EF : 3E C9               		ld 	a,zopcRet
(1) 3498/    10F1 : 32 20 00            		ld	(dac_fill),a
(1) 3499/    10F4 : C9                  		ret
(1) 3500/    10F5 :                     
(1) 3501/    10F5 :                     ; --------------------------------------------------------
(1) 3502/    10F5 :                     ; dac_play
(1) 3503/    10F5 :                     ;
(1) 3504/    10F5 :                     ; Plays a new sample
(1) 3505/    10F5 :                     ;
(1) 3506/    10F5 :                     ; NOTE:
(1) 3507/    10F5 :                     ; Set wave_Flags and wave_Pitch externally
(1) 3508/    10F5 :                     ; getting here.
(1) 3509/    10F5 :                     ; --------------------------------------------------------
(1) 3510/    10F5 :                     
(1) 3511/    10F5 :                     dac_play:
(1) 3512/    10F5 : F3                  		di
(1) 3513/    10F6 : CD E0 10            		call	dac_off
(1) 3514/    10F9 : D9                  		exx				; flip exx regs
(1) 3515/    10FA : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 3516/    10FD : ED 5B 00 17         		ld	de,(wave_Pitch)		; de - Pitch
(1) 3517/    1101 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 3518/    1104 : D9                  		exx				; move them back
(1) 3519/    1105 : 2A F7 16            		ld	hl,(wave_Start)
(1) 3520/    1108 : 3A F9 16            		ld 	a,(wave_Start+2)
(1) 3521/    110B : 22 30 00            		ld	(dDacPntr),hl
(1) 3522/    110E : 32 32 00            		ld	(dDacPntr+2),a
(1) 3523/    1111 : 2A FA 16            		ld	hl,(wave_Len)
(1) 3524/    1114 : 3A FC 16            		ld 	a,(wave_Len+2)
(1) 3525/    1117 : 22 33 00            		ld	(dDacCntr),hl
(1) 3526/    111A : 32 35 00            		ld	(dDacCntr+2),a
(1) 3527/    111D : AF                  		xor	a
(1) 3528/    111E : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3529/    1121 : CD 29 11            		call	dac_firstfill
(1) 3530/    1124 : CD CB 10            		call	dac_on
(1) 3531/    1127 : FB                  		ei
(1) 3532/    1128 : C9                  		ret
(1) 3533/    1129 :                     
(1) 3534/    1129 :                     ; --------------------------------------------------------
(1) 3535/    1129 :                     
(1) 3536/    1129 :                     dac_firstfill:
(1) 3537/    1129 :                     ; 		push	af
(1) 3538/    1129 :                     dac_refill:
(1) 3539/    1129 : CF                  		rst	8
(1) 3540/    112A : C5                  		push	bc
(1) 3541/    112B : D5                  		push	de
(1) 3542/    112C : E5                  		push	hl
(1) 3543/    112D : 3A 02 17            		ld	a,(wave_Flags)	; Already finished?
(1) 3544/    1130 : FE 07               		cp	111b
(1) 3545/    1132 : D2 E8 11            		jp	nc,.dacfill_end
(1) 3546/    1135 : 3A 35 00            		ld	a,(dDacCntr+2)	; Last bytes
(1) 3547/    1138 : 2A 33 00            		ld	hl,(dDacCntr)
(1) 3548/    113B : 01 80 00            		ld	bc,80h
(1) 3549/    113E : 37                  		scf
(1) 3550/    113F : 3F                  		ccf
(1) 3551/    1140 : ED 42               		sbc	hl,bc
(1) 3552/    1142 : DE 00               		sbc	a,0
(1) 3553/    1144 : 32 35 00            		ld	(dDacCntr+2),a
(1) 3554/    1147 : 22 33 00            		ld	(dDacCntr),hl
(1) 3555/    114A : 16 1D               		ld	d,dWaveBuff>>8
(1) 3556/    114C : B7                  		or	a
(1) 3557/    114D : FA 77 11            		jp	m,.dac_over
(1) 3558/    1150 : 3A 2F 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 3559/    1153 : 5F                  		ld	e,a
(1) 3560/    1154 : C6 80               		add 	a,80h
(1) 3561/    1156 : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3562/    1159 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3563/    115C : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3564/    115F : CD C8 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3565/    1162 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3566/    1165 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3567/    1168 : 01 80 00            		ld	bc,80h
(1) 3568/    116B : 09                  		add	hl,bc
(1) 3569/    116C : CE 00               		adc	a,0
(1) 3570/    116E : 22 30 00            		ld	(dDacPntr),hl
(1) 3571/    1171 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3572/    1174 : C3 EB 11            		jp	.dacfill_ret
(1) 3573/    1177 :                     
(1) 3574/    1177 :                     ; NOTE:
(1) 3575/    1177 :                     ; This doesn't finish at the exact
(1) 3576/    1177 :                     ; the END point.
(1) 3577/    1177 :                     .dac_over:
(1) 3578/    1177 : 16 1D               		ld	d,dWaveBuff>>8
(1) 3579/    1179 : 3A 02 17            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 3580/    117C : E6 01               		and	001b
(1) 3581/    117E : C2 A1 11            		jp	nz,.dacfill_loop
(1) 3582/    1181 : 7D                  		ld	a,l
(1) 3583/    1182 : C6 80               		add	a,80h
(1) 3584/    1184 : 4F                  		ld	c,a
(1) 3585/    1185 : 06 00               		ld	b,0
(1) 3586/    1187 : C5                  		push	bc
(1) 3587/    1188 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3588/    118B : 5F                  		ld	e,a
(1) 3589/    118C : C6 80               		add	a,80h
(1) 3590/    118E : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3591/    1191 : C1                  		pop	bc
(1) 3592/    1192 : 79                  		ld	a,c
(1) 3593/    1193 : B0                  		or	b
(1) 3594/    1194 : 28 52               		jr	z,.dacfill_end
(1) 3595/    1196 : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3596/    1199 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3597/    119C : CD C8 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3598/    119F : 18 47               		jr	.dacfill_end
(1) 3599/    11A1 :                     .dacfill_loop:
(1) 3600/    11A1 :                     	; loop sample
(1) 3601/    11A1 : C5                  		push	bc
(1) 3602/    11A2 : D5                  		push	de
(1) 3603/    11A3 : 3A FF 16            		ld	a,(wave_Loop+2)
(1) 3604/    11A6 : 4F                  		ld	c,a
(1) 3605/    11A7 : ED 5B FD 16         		ld	de,(wave_Loop)
(1) 3606/    11AB : 2A F7 16            		ld	hl,(wave_Start)
(1) 3607/    11AE : 3A F9 16            		ld 	a,(wave_Start+2)
(1) 3608/    11B1 : 81                  		add	a,c
(1) 3609/    11B2 : 19                  		add	hl,de
(1) 3610/    11B3 : CE 00               		adc	a,0
(1) 3611/    11B5 : 22 30 00            		ld	(dDacPntr),hl
(1) 3612/    11B8 : 32 32 00            		ld	(dDacPntr+2),a
(1) 3613/    11BB : 2A FA 16            		ld	hl,(wave_Len)
(1) 3614/    11BE : 3A FC 16            		ld 	a,(wave_Len+2)
(1) 3615/    11C1 : 91                  		sub	a,c
(1) 3616/    11C2 : 37                  		scf
(1) 3617/    11C3 : 3F                  		ccf
(1) 3618/    11C4 : ED 52               		sbc	hl,de
(1) 3619/    11C6 : DE 00               		sbc	a,0
(1) 3620/    11C8 : 22 33 00            		ld	(dDacCntr),hl
(1) 3621/    11CB : 32 35 00            		ld	(dDacCntr+2),a
(1) 3622/    11CE : D1                  		pop	de
(1) 3623/    11CF : C1                  		pop	bc
(1) 3624/    11D0 : 78                  		ld	a,b
(1) 3625/    11D1 : B1                  		or	c
(1) 3626/    11D2 : 28 17               		jr	z,.dacfill_ret
(1) 3627/    11D4 : 3A 2F 00            		ld	a,(dDacFifoMid)
(1) 3628/    11D7 : 5F                  		ld	e,a
(1) 3629/    11D8 : C6 80               		add	a,80h
(1) 3630/    11DA : 32 2F 00            		ld	(dDacFifoMid),a
(1) 3631/    11DD : 2A 30 00            		ld	hl,(dDacPntr)
(1) 3632/    11E0 : 3A 32 00            		ld	a,(dDacPntr+2)
(1) 3633/    11E3 : CD C8 0E            		call	transferRom	; *** ROM ACCESS ***
(1) 3634/    11E6 : 18 03               		jr	.dacfill_ret
(1) 3635/    11E8 :                     
(1) 3636/    11E8 :                     .dacfill_end:
(1) 3637/    11E8 : CD E0 10            		call	dac_off		; DAC finished
(1) 3638/    11EB :                     
(1) 3639/    11EB :                     .dacfill_ret:
(1) 3640/    11EB : E1                  		pop	hl
(1) 3641/    11EC : D1                  		pop	de
(1) 3642/    11ED : C1                  		pop	bc
(1) 3643/    11EE :                     ; 		pop	af
(1) 3644/    11EE : C9                  		ret
(1) 3645/    11EF :                     
(1) 3646/    11EF :                     ; ====================================================================
(1) 3647/    11EF :                     ; ----------------------------------------------------------------
(1) 3648/    11EF :                     ; Tables
(1) 3649/    11EF :                     ; ----------------------------------------------------------------
(1) 3650/    11EF :                     
(1) 3651/    11EF : 84 02               fmFreq_List:	dw 644
(1) 3652/    11F1 : A9 02               		dw 681
(1) 3653/    11F3 : D2 02               		dw 722
(1) 3654/    11F5 : FD 02               		dw 765
(1) 3655/    11F7 : 2A 03               		dw 810
(1) 3656/    11F9 : 5A 03               		dw 858
(1) 3657/    11FB : 8E 03               		dw 910
(1) 3658/    11FD : C4 03               		dw 964
(1) 3659/    11FF : FD 03               		dw 1021
(1) 3660/    1201 : 39 04               		dw 1081
(1) 3661/    1203 : 7A 04               		dw 1146
(1) 3662/    1205 : BE 04               		dw 1214
(1) 3663/    1207 :                     psgFreq_List:
(1) 3664/    1207 : FF FF               		dw -1		; C-0 00
(1) 3665/    1209 : FF FF               		dw -1
(1) 3666/    120B : FF FF               		dw -1
(1) 3667/    120D : FF FF               		dw -1
(1) 3668/    120F : FF FF               		dw -1
(1) 3669/    1211 : FF FF               		dw -1
(1) 3670/    1213 : FF FF               		dw -1
(1) 3671/    1215 : FF FF               		dw -1
(1) 3672/    1217 : FF FF               		dw -1
(1) 3673/    1219 : FF FF               		dw -1
(1) 3674/    121B : FF FF               		dw -1
(1) 3675/    121D : FF FF               		dw -1
(1) 3676/    121F : FF FF               		dw -1		; C-1 0C
(1) 3677/    1221 : FF FF               		dw -1
(1) 3678/    1223 : FF FF               		dw -1
(1) 3679/    1225 : FF FF               		dw -1
(1) 3680/    1227 : FF FF               		dw -1
(1) 3681/    1229 : FF FF               		dw -1
(1) 3682/    122B : FF FF               		dw -1
(1) 3683/    122D : FF FF               		dw -1
(1) 3684/    122F : FF FF               		dw -1
(1) 3685/    1231 : FF FF               		dw -1
(1) 3686/    1233 : FF FF               		dw -1
(1) 3687/    1235 : FF FF               		dw -1
(1) 3688/    1237 : FF FF               		dw -1		; C-2 18
(1) 3689/    1239 : FF FF               		dw -1
(1) 3690/    123B : FF FF               		dw -1
(1) 3691/    123D : FF FF               		dw -1
(1) 3692/    123F : FF FF               		dw -1
(1) 3693/    1241 : FF FF               		dw -1
(1) 3694/    1243 : FF FF               		dw -1
(1) 3695/    1245 : FF FF               		dw -1
(1) 3696/    1247 : FF FF               		dw -1
(1) 3697/    1249 : FF FF               		dw -1
(1) 3698/    124B : FF FF               		dw -1
(1) 3699/    124D : FF FF               		dw -1
(1) 3700/    124F : FF FF               		dw -1		; C-3 24
(1) 3701/    1251 : FF FF               		dw -1
(1) 3702/    1253 : FF FF               		dw -1
(1) 3703/    1255 : FF FF               		dw -1
(1) 3704/    1257 : FF FF               		dw -1
(1) 3705/    1259 : FF FF               		dw -1
(1) 3706/    125B : FF FF               		dw -1
(1) 3707/    125D : FF FF               		dw -1
(1) 3708/    125F : FF FF               		dw -1
(1) 3709/    1261 : F8 03               		dw 3F8h
(1) 3710/    1263 : BF 03               		dw 3BFh
(1) 3711/    1265 : 89 03               		dw 389h
(1) 3712/    1267 : 56 03               		dw 356h		; C-4 30
(1) 3713/    1269 : 26 03               		dw 326h
(1) 3714/    126B : F9 02               		dw 2F9h
(1) 3715/    126D : CE 02               		dw 2CEh
(1) 3716/    126F : A5 02               		dw 2A5h
(1) 3717/    1271 : 80 02               		dw 280h
(1) 3718/    1273 : 5C 02               		dw 25Ch
(1) 3719/    1275 : 3A 02               		dw 23Ah
(1) 3720/    1277 : 1A 02               		dw 21Ah
(1) 3721/    1279 : FB 01               		dw 1FBh
(1) 3722/    127B : DF 01               		dw 1DFh
(1) 3723/    127D : C4 01               		dw 1C4h
(1) 3724/    127F : AB 01               		dw 1ABh		; C-5 3C
(1) 3725/    1281 : 93 01               		dw 193h
(1) 3726/    1283 : 7D 01               		dw 17Dh
(1) 3727/    1285 : 67 01               		dw 167h
(1) 3728/    1287 : 53 01               		dw 153h
(1) 3729/    1289 : 40 01               		dw 140h
(1) 3730/    128B : 2E 01               		dw 12Eh
(1) 3731/    128D : 1D 01               		dw 11Dh
(1) 3732/    128F : 0D 01               		dw 10Dh
(1) 3733/    1291 : FE 00               		dw 0FEh
(1) 3734/    1293 : EF 00               		dw 0EFh
(1) 3735/    1295 : E2 00               		dw 0E2h
(1) 3736/    1297 : D6 00               		dw 0D6h		; C-6 48
(1) 3737/    1299 : C9 00               		dw 0C9h
(1) 3738/    129B : BE 00               		dw 0BEh
(1) 3739/    129D : B4 00               		dw 0B4h
(1) 3740/    129F : A9 00               		dw 0A9h
(1) 3741/    12A1 : A0 00               		dw 0A0h
(1) 3742/    12A3 : 97 00               		dw 097h
(1) 3743/    12A5 : 8F 00               		dw 08Fh
(1) 3744/    12A7 : 87 00               		dw 087h
(1) 3745/    12A9 : 7F 00               		dw 07Fh
(1) 3746/    12AB : 78 00               		dw 078h
(1) 3747/    12AD : 71 00               		dw 071h
(1) 3748/    12AF : 6B 00               		dw 06Bh		; C-7 54
(1) 3749/    12B1 : 65 00               		dw 065h
(1) 3750/    12B3 : 5F 00               		dw 05Fh
(1) 3751/    12B5 : 5A 00               		dw 05Ah
(1) 3752/    12B7 : 55 00               		dw 055h
(1) 3753/    12B9 : 50 00               		dw 050h
(1) 3754/    12BB : 4B 00               		dw 04Bh
(1) 3755/    12BD : 47 00               		dw 047h
(1) 3756/    12BF : 43 00               		dw 043h
(1) 3757/    12C1 : 40 00               		dw 040h
(1) 3758/    12C3 : 3C 00               		dw 03Ch
(1) 3759/    12C5 : 39 00               		dw 039h
(1) 3760/    12C7 : 36 00               		dw 036h		; C-8 60
(1) 3761/    12C9 : 33 00               		dw 033h
(1) 3762/    12CB : 30 00               		dw 030h
(1) 3763/    12CD : 2D 00               		dw 02Dh
(1) 3764/    12CF : 2B 00               		dw 02Bh
(1) 3765/    12D1 : 28 00               		dw 028h
(1) 3766/    12D3 : 26 00               		dw 026h
(1) 3767/    12D5 : 24 00               		dw 024h
(1) 3768/    12D7 : 22 00               		dw 022h
(1) 3769/    12D9 : 20 00               		dw 020h
(1) 3770/    12DB : 1F 00               		dw 01Fh
(1) 3771/    12DD : 1D 00               		dw 01Dh
(1) 3772/    12DF : 1B 00               		dw 01Bh		; C-9 6C
(1) 3773/    12E1 : 1A 00               		dw 01Ah
(1) 3774/    12E3 : 18 00               		dw 018h
(1) 3775/    12E5 : 17 00               		dw 017h
(1) 3776/    12E7 : 16 00               		dw 016h
(1) 3777/    12E9 : 15 00               		dw 015h
(1) 3778/    12EB : 13 00               		dw 013h
(1) 3779/    12ED : 12 00               		dw 012h
(1) 3780/    12EF : 11 00               		dw 011h
(1) 3781/    12F1 : 10 00                		dw 010h
(1) 3782/    12F3 : 09 00                		dw 009h
(1) 3783/    12F5 : 08 00                		dw 008h
(1) 3784/    12F7 : 06 00               		dw 006h
(1) 3785/    12F9 :                     
(1) 3786/    12F9 : 00 01               wavFreq_List:	dw 100h		; C-0
(1) 3787/    12FB : 00 01               		dw 100h
(1) 3788/    12FD : 00 01               		dw 100h
(1) 3789/    12FF : 00 01               		dw 100h
(1) 3790/    1301 : 00 01               		dw 100h
(1) 3791/    1303 : 00 01               		dw 100h
(1) 3792/    1305 : 00 01               		dw 100h
(1) 3793/    1307 : 00 01               		dw 100h
(1) 3794/    1309 : 00 01               		dw 100h
(1) 3795/    130B : 00 01               		dw 100h
(1) 3796/    130D : 00 01               		dw 100h
(1) 3797/    130F : 00 01               		dw 100h
(1) 3798/    1311 : 00 01               		dw 100h		; C-1
(1) 3799/    1313 : 00 01               		dw 100h
(1) 3800/    1315 : 00 01               		dw 100h
(1) 3801/    1317 : 00 01               		dw 100h
(1) 3802/    1319 : 00 01               		dw 100h
(1) 3803/    131B : 00 01               		dw 100h
(1) 3804/    131D : 00 01               		dw 100h
(1) 3805/    131F : 00 01               		dw 100h
(1) 3806/    1321 : 00 01               		dw 100h
(1) 3807/    1323 : 00 01               		dw 100h
(1) 3808/    1325 : 00 01               		dw 100h
(1) 3809/    1327 : 00 01               		dw 100h
(1) 3810/    1329 : 00 01               		dw 100h		; C-2
(1) 3811/    132B : 00 01               		dw 100h
(1) 3812/    132D : 00 01               		dw 100h
(1) 3813/    132F : 00 01               		dw 100h
(1) 3814/    1331 : 00 01               		dw 100h
(1) 3815/    1333 : 00 01               		dw 100h
(1) 3816/    1335 : 00 01               		dw 100h
(1) 3817/    1337 : 00 01               		dw 100h
(1) 3818/    1339 : 00 01               		dw 100h
(1) 3819/    133B : 00 01               		dw 100h
(1) 3820/    133D : 36 00               		dw 036h
(1) 3821/    133F : 3B 00               		dw 03Bh
(1) 3822/    1341 : 3E 00               		dw 03Eh		; C-3
(1) 3823/    1343 : 43 00               		dw 043h		; C#3
(1) 3824/    1345 : 46 00               		dw 046h		; D-3
(1) 3825/    1347 : 49 00               		dw 049h		; D#3
(1) 3826/    1349 : 4E 00               		dw 04Eh		; E-3
(1) 3827/    134B : 54 00               		dw 054h		; F-3
(1) 3828/    134D : 58 00               		dw 058h		; F#3
(1) 3829/    134F : 5E 00               		dw 05Eh		; G-3 -17
(1) 3830/    1351 : 63 00               		dw 063h		; G#3
(1) 3831/    1353 : 68 00               		dw 068h		; A-3
(1) 3832/    1355 : 70 00               		dw 070h		; A#3
(1) 3833/    1357 : 75 00               		dw 075h		; B-3
(1) 3834/    1359 : 85 00               		dw 085h		; C-4 -12
(1) 3835/    135B : 87 00               		dw 087h		; C#4
(1) 3836/    135D : 8C 00               		dw 08Ch		; D-4
(1) 3837/    135F : 9A 00               		dw 09Ah		; D#4
(1) 3838/    1361 : 9E 00               		dw 09Eh		; E-4
(1) 3839/    1363 : AD 00               		dw 0ADh		; F-4
(1) 3840/    1365 : B2 00               		dw 0B2h		; F#4
(1) 3841/    1367 : C0 00               		dw 0C0h		; G-4
(1) 3842/    1369 : CC 00               		dw 0CCh		; G#4
(1) 3843/    136B : D7 00               		dw 0D7h		; A-4
(1) 3844/    136D : E6 00               		dw 0E6h		; A#4
(1) 3845/    136F : F0 00               		dw 0F0h		; B-4
(1) 3846/    1371 : 00 01               		dw 100h		; C-5 ****
(1) 3847/    1373 : 10 01               		dw 110h		; C#5
(1) 3848/    1375 : 20 01               		dw 120h		; D-5
(1) 3849/    1377 : 2E 01               		dw 12Eh		; D#5
(1) 3850/    1379 : 42 01               		dw 142h		; E-5
(1) 3851/    137B : 5A 01               		dw 15Ah		; F-5
(1) 3852/    137D : 6A 01               		dw 16Ah		; F#5 +6
(1) 3853/    137F : 7F 01               		dw 17Fh		; G-5
(1) 3854/    1381 : 91 01               		dw 191h		; G#5
(1) 3855/    1383 : AC 01               		dw 1ACh		; A-5
(1) 3856/    1385 : C2 01               		dw 1C2h		; A#5
(1) 3857/    1387 : E0 01               		dw 1E0h		; B-5
(1) 3858/    1389 : F8 01               		dw 1F8h		; C-6 +12
(1) 3859/    138B : 10 02               		dw 210h		; C#6
(1) 3860/    138D : 40 02               		dw 240h		; D-6
(1) 3861/    138F : 60 02               		dw 260h		; D#6
(1) 3862/    1391 : 80 02               		dw 280h		; E-6
(1) 3863/    1393 : A0 02               		dw 2A0h		; F-6
(1) 3864/    1395 : D0 02               		dw 2D0h		; F#6
(1) 3865/    1397 : F8 02               		dw 2F8h		; G-6
(1) 3866/    1399 : 20 03               		dw 320h		; G#6
(1) 3867/    139B : 50 03               		dw 350h		; A-6
(1) 3868/    139D : 80 03               		dw 380h		; A#6
(1) 3869/    139F : C0 03               		dw 3C0h		; B-6
(1) 3870/    13A1 : 00 04               		dw 400h		; C-7
(1) 3871/    13A3 : 00 01               		dw 100h
(1) 3872/    13A5 : 00 01               		dw 100h
(1) 3873/    13A7 : 00 01               		dw 100h
(1) 3874/    13A9 : 00 01               		dw 100h
(1) 3875/    13AB : 00 01               		dw 100h
(1) 3876/    13AD : 00 01               		dw 100h
(1) 3877/    13AF : 00 01               		dw 100h
(1) 3878/    13B1 : 00 01               		dw 100h
(1) 3879/    13B3 : 00 01               		dw 100h
(1) 3880/    13B5 : 00 01               		dw 100h
(1) 3881/    13B7 : 00 01               		dw 100h
(1) 3882/    13B9 : 00 01               		dw 100h		; C-8
(1) 3883/    13BB : 00 01               		dw 100h
(1) 3884/    13BD : 00 01               		dw 100h
(1) 3885/    13BF : 00 01               		dw 100h
(1) 3886/    13C1 : 00 01               		dw 100h
(1) 3887/    13C3 : 00 01               		dw 100h
(1) 3888/    13C5 : 00 01               		dw 100h
(1) 3889/    13C7 : 00 01               		dw 100h
(1) 3890/    13C9 : 00 01               		dw 100h
(1) 3891/    13CB : 00 01               		dw 100h
(1) 3892/    13CD : 00 01               		dw 100h
(1) 3893/    13CF : 00 01               		dw 100h
(1) 3894/    13D1 : 00 01               		dw 100h		; C-9
(1) 3895/    13D3 : 00 01               		dw 100h
(1) 3896/    13D5 : 00 01               		dw 100h
(1) 3897/    13D7 : 00 01               		dw 100h
(1) 3898/    13D9 : 00 01               		dw 100h
(1) 3899/    13DB : 00 01               		dw 100h
(1) 3900/    13DD : 00 01               		dw 100h
(1) 3901/    13DF : 00 01               		dw 100h
(1) 3902/    13E1 : 00 01               		dw 100h
(1) 3903/    13E3 : 00 01               		dw 100h
(1) 3904/    13E5 : 00 01               		dw 100h
(1) 3905/    13E7 : 00 01               		dw 100h
(1) 3906/    13E9 :                     
(1) 3907/    13E9 : 53 15               fmcach_list:	dw fmcach_1
(1) 3908/    13EB : 7B 15               		dw fmcach_2
(1) 3909/    13ED : A3 15               		dw fmcach_3
(1) 3910/    13EF : 00 00               		dw 0		; <-- skipped
(1) 3911/    13F1 : CB 15               		dw fmcach_4
(1) 3912/    13F3 : F3 15               		dw fmcach_5
(1) 3913/    13F5 : 1B 16               		dw fmcach_6
(1) 3914/    13F7 :                     
(1) 3915/    13F7 :                     ; ====================================================================
(1) 3916/    13F7 :                     ; ----------------------------------------------------------------
(1) 3917/    13F7 :                     ; MASTER buffers list
(1) 3918/    13F7 :                     ;
(1) 3919/    13F7 :                     ; dw track_buffer
(1) 3920/    13F7 :                     ; dw channel_list,block_cache,header_cache,instr_cache,track_cache
(1) 3921/    13F7 :                     ; db max_blocks,max_headers,max_instr,max_chnls
(1) 3922/    13F7 :                     ;
(1) 3923/    13F7 :                     ; (track_cache: 1BIT SIZES ONLY, ALIGNED)
(1) 3924/    13F7 :                     ; ----------------------------------------------------------------
(1) 3925/    13F7 :                     
(1) 3926/    13F7 :                     nikona_BuffList:
(1) 3927/    13F7 : 1D 17 AD 17 61 1B   	dw trkBuff_0,trkChnl_0,trkBlks_0,trkHdrs_0,trkInsD_0,trkCach_0
                    45 19 F9 19 00 1E 
(1) 3928/    1403 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3929/    1407 : 4D 17 35 18 79 1B   	dw trkBuff_1,trkChnl_1,trkBlks_1,trkHdrs_1,trkInsD_1,trkCach_1
                    81 19 71 1A 40 1E 
(1) 3930/    1413 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3931/    1417 : 7D 17 BD 18 91 1B   	dw trkBuff_2,trkChnl_2,trkBlks_2,trkHdrs_2,trkInsD_2,trkCach_2
                    BD 19 E9 1A 80 1E 
(1) 3932/    1423 : 18 0F 0F 11         	db MAX_BLOCKS,MAX_HEADS,MAX_INS,MAX_TRKCHN
(1) 3933/    1427 : FF FF               	dw -1
(1) 3934/    1429 :                     
(1) 3935/    1429 :                     nikona_SetMstrList:
(1) 3936/    1429 : 00                  	db 0				; ** 32-bit 68k address **
(1) 3937/    142A : 00                  	db (Gema_MasterList>>16)&0FFh
(1) 3938/    142B : 80                  	db (Gema_MasterList>>8)&0FFh
(1) 3939/    142C : 00                  	db Gema_MasterList&0FFh
(1) 3940/    142D :                     
(1) 3941/    142D :                     ; ====================================================================
(1) 3942/    142D :                     ; ----------------------------------------------------------------
(1) 3943/    142D :                     ; Buffer section
(1) 3944/    142D :                     ; ----------------------------------------------------------------
(1) 3945/    142D :                     
(1) 3946/    142D :                     ; --------------------------------------------------------
(1) 3947/    142D :                     ; Channel table struct:
(1) 3948/    142D :                     ; 00  - Linked tracker channel
(1) 3949/    142D :                     ; 02  - 00h-7Fh: Priority level / 80h+ Silence request (chip ID)
(1) 3950/    142D :                     ; 03  - Intrument cache pointer
(1) 3951/    142D :                     ; 05  - Chip index (YM2612: KEY index)
(1) 3952/    142D :                     ; 06  - Frequency list index (YM2612: oct|index)
(1) 3953/    142D :                     ; 07  - Pitchbend add/sub
(1) 3954/    142D :                     ; 08  - Current volume: 00-max
(1) 3955/    142D :                     ; 09  - Stored effect setting
(1) 3956/    142D :                     ; 0A  - FREE
(1) 3957/    142D :                     ; 0B  - FREE
(1) 3958/    142D :                     ; 0C+ - Misc. settings for the current chip
(1) 3959/    142D :                     
(1) 3960/    142D :                     ; PSG   80h
(1) 3961/    142D :                     ; PSGN  90h
(1) 3962/    142D :                     ; FM   0A0h
(1) 3963/    142D :                     ; FM3  0B0h
(1) 3964/    142D :                     ; DAC  0C0h
(1) 3965/    142D :                     ; PWM  0D0h
(1) 3966/    142D :                     ; --------------------------------------------------------
(1) 3967/    142D :                     
(1) 3968/    142D : 10 00               tblList:	dw tblPSG-tblList		;  80h
(1) 3969/    142F : 42 80               		dw tblPSGN-tblList|8000h	;  90h *
(1) 3970/    1431 : 52 00               		dw tblFM-tblList		; 0A0h
(1) 3971/    1433 : 92 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 3972/    1435 : A2 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 3973/    1437 : B4 00               		dw tblPWM-tblList		; 0D0h
(1) 3974/    1439 : 00 00               		dw 0
(1) 3975/    143B : 00 00               		dw 0
(1) 3976/    143D : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3977/    1445 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3978/    144D : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3979/    1455 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3980/    145D : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 3981/    1465 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3982/    146D : FF FF               		dw -1	; end-of-list
(1) 3983/    146F : 00 00 00 00 00 03   tblPSGN:	db 00h,00h,00h,00h,00h,03h,00h,03h	; Noise
                    00 03 
(1) 3984/    1477 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3985/    147F : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3986/    1487 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3987/    148F : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 3988/    1497 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3989/    149F : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 4 <--
                    00 00 
(1) 3990/    14A7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3991/    14AF : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 5
                    00 00 
(1) 3992/    14B7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3993/    14BF : 00 00 00 00 00 02   tblFM3:		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3 <--
                    00 00 
(1) 3994/    14C7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3995/    14CF : 00 00 00 00 00 06   tblFM6:		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 6 <--
                    00 00 
(1) 3996/    14D7 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 3997/    14DF : FF FF               		dw -1	; end-of-list
(1) 3998/    14E1 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
                    00 00 
(1) 3999/    14E9 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4000/    14F1 : 00 00 00 00 00 01   		db 00h,00h,00h,00h,00h,01h,00h,00h	; Channel 2
                    00 00 
(1) 4001/    14F9 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4002/    1501 : 00 00 00 00 00 02   		db 00h,00h,00h,00h,00h,02h,00h,00h	; Channel 3
                    00 00 
(1) 4003/    1509 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4004/    1511 : 00 00 00 00 00 03   		db 00h,00h,00h,00h,00h,03h,00h,00h	; Channel 4
                    00 00 
(1) 4005/    1519 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4006/    1521 : 00 00 00 00 00 04   		db 00h,00h,00h,00h,00h,04h,00h,00h	; Channel 5
                    00 00 
(1) 4007/    1529 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4008/    1531 : 00 00 00 00 00 05   		db 00h,00h,00h,00h,00h,05h,00h,00h	; Channel 6
                    00 00 
(1) 4009/    1539 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4010/    1541 : 00 00 00 00 00 06   		db 00h,00h,00h,00h,00h,06h,00h,00h	; Channel 7
                    00 00 
(1) 4011/    1549 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4012/    1551 : FF FF               		dw -1	; end-of-list
(1) 4013/    1553 :                     
(1) 4014/    1553 :                     ; FM patch storage
(1) 4015/    1553 :                     fmcach_1	ds 28h
(1) 4016/    157B :                     fmcach_2	ds 28h
(1) 4017/    15A3 :                     fmcach_3	ds 28h
(1) 4018/    15CB :                     fmcach_4	ds 28h
(1) 4019/    15F3 :                     fmcach_5	ds 28h
(1) 4020/    161B :                     fmcach_6	ds 28h
(1) 4021/    1643 :                     
(1) 4022/    1643 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: KeyOn/KeyOff/KeyCut bits
                    00 00 
(1) 4023/    164B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
                    00 00 
(1) 4024/    1653 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
                    00 00 
(1) 4025/    165B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags: Stereo/Loop/Left/Right | 32-bit**
                    00 00 
(1) 4026/    1663 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - **sample location
                    00 00 
(1) 4027/    166B : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4028/    1673 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
                    00 00 
(1) 4029/    167B :                     
(1) 4030/    167B : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4031/    167F : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4032/    1683 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4033/    1687 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4034/    168B : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4035/    168F : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4036/    1693 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4037/    1697 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4038/    169B : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4039/    169F : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4040/    16A3 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4041/    16A7 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4042/    16AB : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4043/    16AF : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4044/    16B3 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4045/    16B7 :                     
(1) 4046/    16B7 :                     ; mailboxes	ds 40h		; GEMS style mailboxes/events
(1) 4047/    16B7 :                     trkListCach	ds 4*10h	; 40h bytes
(1) 4048/    16F7 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4049/    16F9 : 00                  		db 0
(1) 4050/    16FA : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4051/    16FC : 00                  		db 0
(1) 4052/    16FD : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4053/    16FF : 00                  		db 0
(1) 4054/    1700 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4055/    1702 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4056/    1703 :                     
(1) 4057/    1703 :                     
(1) 4058/    1703 : 00                  tickSpSet	db 0		; **
(1) 4059/    1704 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4060/    1705 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4061/    1706 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4062/    1707 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4063/    1708 :                     headerOut	ds 00Ch		; Temporal storage for 68k pointers
(1) 4064/    1714 :                     headerOut_e	ds 2
(1) 4065/    1716 :                     sampleHead	ds 006h
(1) 4066/    171C : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1) 4067/    171D :                     
(1) 4068/    171D :                     ; --------------------------------------------------------
(1) 4069/    171D :                     ; * USER customizable section *
(1) 4070/    171D :                     ;
(1) 4071/    171D :                     ; trkCach's MUST BE 00h ALIGNED.
(1) 4072/    171D :                     ; --------------------------------------------------------
(1) 4073/    171D :                     
(1) 4074/    171D :                     trkBuff_0	ds 30h			; TRACK BUFFER 0
(1) 4075/    174D :                     trkBuff_1	ds 30h			; TRACK BUFFER 1
(1) 4076/    177D :                     trkBuff_2	ds 30h			; TRACK BUFFER 2
(1) 4077/    17AD :                     ; trkBuff_3	ds 30h			; TRACK BUFFER 3
(1) 4078/    17AD :                     trkChnl_0	ds 8*MAX_TRKCHN
(1) 4079/    1835 :                     trkChnl_1	ds 8*MAX_TRKCHN
(1) 4080/    18BD :                     trkChnl_2	ds 8*MAX_TRKCHN
(1) 4081/    1945 :                     ; trkChnl_3	ds 8*MAX_TRKCHN
(1) 4082/    1945 :                     trkHdrs_0	ds 4*MAX_HEADS		; dw point,rowcntr
(1) 4083/    1981 :                     trkHdrs_1	ds 4*MAX_HEADS
(1) 4084/    19BD :                     trkHdrs_2	ds 4*MAX_HEADS
(1) 4085/    19F9 :                     ; trkHdrs_3	ds 4*MAX_HEADS
(1) 4086/    19F9 :                     trkInsD_0	ds 8*MAX_INS
(1) 4087/    1A71 :                     trkInsD_1	ds 8*MAX_INS
(1) 4088/    1AE9 :                     trkInsD_2	ds 8*MAX_INS
(1) 4089/    1B61 :                     ; trkInsD_3	ds 8*MAX_INS
(1) 4090/    1B61 :                     trkBlks_0	ds MAX_BLOCKS
(1) 4091/    1B79 :                     trkBlks_1	ds MAX_BLOCKS
(1) 4092/    1B91 :                     trkBlks_2	ds MAX_BLOCKS
(1) 4093/    1BA9 :                     ; trkBlks_3	ds MAX_BLOCKS
(1) 4094/    1BA9 :                     
(1) 4095/    1BA9 :                     ; ====================================================================
(1) 4096/    1BA9 :                     ; ----------------------------------------------------------------
(1) 4097/    1BA9 :                     ; WAVE playback buffer
(1) 4098/    1BA9 :                     ;
(1) 4099/    1BA9 :                     ; Located at 200h
(1) 4100/    1BA9 :                     ; ----------------------------------------------------------------
(1) 4101/    1BA9 :                     
(1) 4102/    1BA9 : (MACRO)             		org 1D00h
(1) 4102/    1BA9 : 00                                                  db 0
(1) 4102/    1BAA : 00                                                  db 0
(1) 4102/    1BAB : 00                                                  db 0
(1) 4102/    1BAC : 00                                                  db 0
(1) 4102/    1BAD : 00                                                  db 0
(1) 4102/    1BAE : 00                                                  db 0
(1) 4102/    1BAF : 00                                                  db 0
(1) 4102/    1BB0 : 00                                                  db 0
(1) 4102/    1BB1 : 00                                                  db 0
(1) 4102/    1BB2 : 00                                                  db 0
(1) 4102/    1BB3 : 00                                                  db 0
(1) 4102/    1BB4 : 00                                                  db 0
(1) 4102/    1BB5 : 00                                                  db 0
(1) 4102/    1BB6 : 00                                                  db 0
(1) 4102/    1BB7 : 00                                                  db 0
(1) 4102/    1BB8 : 00                                                  db 0
(1) 4102/    1BB9 : 00                                                  db 0
(1) 4102/    1BBA : 00                                                  db 0
(1) 4102/    1BBB : 00                                                  db 0
(1) 4102/    1BBC : 00                                                  db 0
(1) 4102/    1BBD : 00                                                  db 0
(1) 4102/    1BBE : 00                                                  db 0
(1) 4102/    1BBF : 00                                                  db 0
(1) 4102/    1BC0 : 00                                                  db 0
(1) 4102/    1BC1 : 00                                                  db 0
(1) 4102/    1BC2 : 00                                                  db 0
(1) 4102/    1BC3 : 00                                                  db 0
(1) 4102/    1BC4 : 00                                                  db 0
(1) 4102/    1BC5 : 00                                                  db 0
(1) 4102/    1BC6 : 00                                                  db 0
(1) 4102/    1BC7 : 00                                                  db 0
(1) 4102/    1BC8 : 00                                                  db 0
(1) 4102/    1BC9 : 00                                                  db 0
(1) 4102/    1BCA : 00                                                  db 0
(1) 4102/    1BCB : 00                                                  db 0
(1) 4102/    1BCC : 00                                                  db 0
(1) 4102/    1BCD : 00                                                  db 0
(1) 4102/    1BCE : 00                                                  db 0
(1) 4102/    1BCF : 00                                                  db 0
(1) 4102/    1BD0 : 00                                                  db 0
(1) 4102/    1BD1 : 00                                                  db 0
(1) 4102/    1BD2 : 00                                                  db 0
(1) 4102/    1BD3 : 00                                                  db 0
(1) 4102/    1BD4 : 00                                                  db 0
(1) 4102/    1BD5 : 00                                                  db 0
(1) 4102/    1BD6 : 00                                                  db 0
(1) 4102/    1BD7 : 00                                                  db 0
(1) 4102/    1BD8 : 00                                                  db 0
(1) 4102/    1BD9 : 00                                                  db 0
(1) 4102/    1BDA : 00                                                  db 0
(1) 4102/    1BDB : 00                                                  db 0
(1) 4102/    1BDC : 00                                                  db 0
(1) 4102/    1BDD : 00                                                  db 0
(1) 4102/    1BDE : 00                                                  db 0
(1) 4102/    1BDF : 00                                                  db 0
(1) 4102/    1BE0 : 00                                                  db 0
(1) 4102/    1BE1 : 00                                                  db 0
(1) 4102/    1BE2 : 00                                                  db 0
(1) 4102/    1BE3 : 00                                                  db 0
(1) 4102/    1BE4 : 00                                                  db 0
(1) 4102/    1BE5 : 00                                                  db 0
(1) 4102/    1BE6 : 00                                                  db 0
(1) 4102/    1BE7 : 00                                                  db 0
(1) 4102/    1BE8 : 00                                                  db 0
(1) 4102/    1BE9 : 00                                                  db 0
(1) 4102/    1BEA : 00                                                  db 0
(1) 4102/    1BEB : 00                                                  db 0
(1) 4102/    1BEC : 00                                                  db 0
(1) 4102/    1BED : 00                                                  db 0
(1) 4102/    1BEE : 00                                                  db 0
(1) 4102/    1BEF : 00                                                  db 0
(1) 4102/    1BF0 : 00                                                  db 0
(1) 4102/    1BF1 : 00                                                  db 0
(1) 4102/    1BF2 : 00                                                  db 0
(1) 4102/    1BF3 : 00                                                  db 0
(1) 4102/    1BF4 : 00                                                  db 0
(1) 4102/    1BF5 : 00                                                  db 0
(1) 4102/    1BF6 : 00                                                  db 0
(1) 4102/    1BF7 : 00                                                  db 0
(1) 4102/    1BF8 : 00                                                  db 0
(1) 4102/    1BF9 : 00                                                  db 0
(1) 4102/    1BFA : 00                                                  db 0
(1) 4102/    1BFB : 00                                                  db 0
(1) 4102/    1BFC : 00                                                  db 0
(1) 4102/    1BFD : 00                                                  db 0
(1) 4102/    1BFE : 00                                                  db 0
(1) 4102/    1BFF : 00                                                  db 0
(1) 4102/    1C00 : 00                                                  db 0
(1) 4102/    1C01 : 00                                                  db 0
(1) 4102/    1C02 : 00                                                  db 0
(1) 4102/    1C03 : 00                                                  db 0
(1) 4102/    1C04 : 00                                                  db 0
(1) 4102/    1C05 : 00                                                  db 0
(1) 4102/    1C06 : 00                                                  db 0
(1) 4102/    1C07 : 00                                                  db 0
(1) 4102/    1C08 : 00                                                  db 0
(1) 4102/    1C09 : 00                                                  db 0
(1) 4102/    1C0A : 00                                                  db 0
(1) 4102/    1C0B : 00                                                  db 0
(1) 4102/    1C0C : 00                                                  db 0
(1) 4102/    1C0D : 00                                                  db 0
(1) 4102/    1C0E : 00                                                  db 0
(1) 4102/    1C0F : 00                                                  db 0
(1) 4102/    1C10 : 00                                                  db 0
(1) 4102/    1C11 : 00                                                  db 0
(1) 4102/    1C12 : 00                                                  db 0
(1) 4102/    1C13 : 00                                                  db 0
(1) 4102/    1C14 : 00                                                  db 0
(1) 4102/    1C15 : 00                                                  db 0
(1) 4102/    1C16 : 00                                                  db 0
(1) 4102/    1C17 : 00                                                  db 0
(1) 4102/    1C18 : 00                                                  db 0
(1) 4102/    1C19 : 00                                                  db 0
(1) 4102/    1C1A : 00                                                  db 0
(1) 4102/    1C1B : 00                                                  db 0
(1) 4102/    1C1C : 00                                                  db 0
(1) 4102/    1C1D : 00                                                  db 0
(1) 4102/    1C1E : 00                                                  db 0
(1) 4102/    1C1F : 00                                                  db 0
(1) 4102/    1C20 : 00                                                  db 0
(1) 4102/    1C21 : 00                                                  db 0
(1) 4102/    1C22 : 00                                                  db 0
(1) 4102/    1C23 : 00                                                  db 0
(1) 4102/    1C24 : 00                                                  db 0
(1) 4102/    1C25 : 00                                                  db 0
(1) 4102/    1C26 : 00                                                  db 0
(1) 4102/    1C27 : 00                                                  db 0
(1) 4102/    1C28 : 00                                                  db 0
(1) 4102/    1C29 : 00                                                  db 0
(1) 4102/    1C2A : 00                                                  db 0
(1) 4102/    1C2B : 00                                                  db 0
(1) 4102/    1C2C : 00                                                  db 0
(1) 4102/    1C2D : 00                                                  db 0
(1) 4102/    1C2E : 00                                                  db 0
(1) 4102/    1C2F : 00                                                  db 0
(1) 4102/    1C30 : 00                                                  db 0
(1) 4102/    1C31 : 00                                                  db 0
(1) 4102/    1C32 : 00                                                  db 0
(1) 4102/    1C33 : 00                                                  db 0
(1) 4102/    1C34 : 00                                                  db 0
(1) 4102/    1C35 : 00                                                  db 0
(1) 4102/    1C36 : 00                                                  db 0
(1) 4102/    1C37 : 00                                                  db 0
(1) 4102/    1C38 : 00                                                  db 0
(1) 4102/    1C39 : 00                                                  db 0
(1) 4102/    1C3A : 00                                                  db 0
(1) 4102/    1C3B : 00                                                  db 0
(1) 4102/    1C3C : 00                                                  db 0
(1) 4102/    1C3D : 00                                                  db 0
(1) 4102/    1C3E : 00                                                  db 0
(1) 4102/    1C3F : 00                                                  db 0
(1) 4102/    1C40 : 00                                                  db 0
(1) 4102/    1C41 : 00                                                  db 0
(1) 4102/    1C42 : 00                                                  db 0
(1) 4102/    1C43 : 00                                                  db 0
(1) 4102/    1C44 : 00                                                  db 0
(1) 4102/    1C45 : 00                                                  db 0
(1) 4102/    1C46 : 00                                                  db 0
(1) 4102/    1C47 : 00                                                  db 0
(1) 4102/    1C48 : 00                                                  db 0
(1) 4102/    1C49 : 00                                                  db 0
(1) 4102/    1C4A : 00                                                  db 0
(1) 4102/    1C4B : 00                                                  db 0
(1) 4102/    1C4C : 00                                                  db 0
(1) 4102/    1C4D : 00                                                  db 0
(1) 4102/    1C4E : 00                                                  db 0
(1) 4102/    1C4F : 00                                                  db 0
(1) 4102/    1C50 : 00                                                  db 0
(1) 4102/    1C51 : 00                                                  db 0
(1) 4102/    1C52 : 00                                                  db 0
(1) 4102/    1C53 : 00                                                  db 0
(1) 4102/    1C54 : 00                                                  db 0
(1) 4102/    1C55 : 00                                                  db 0
(1) 4102/    1C56 : 00                                                  db 0
(1) 4102/    1C57 : 00                                                  db 0
(1) 4102/    1C58 : 00                                                  db 0
(1) 4102/    1C59 : 00                                                  db 0
(1) 4102/    1C5A : 00                                                  db 0
(1) 4102/    1C5B : 00                                                  db 0
(1) 4102/    1C5C : 00                                                  db 0
(1) 4102/    1C5D : 00                                                  db 0
(1) 4102/    1C5E : 00                                                  db 0
(1) 4102/    1C5F : 00                                                  db 0
(1) 4102/    1C60 : 00                                                  db 0
(1) 4102/    1C61 : 00                                                  db 0
(1) 4102/    1C62 : 00                                                  db 0
(1) 4102/    1C63 : 00                                                  db 0
(1) 4102/    1C64 : 00                                                  db 0
(1) 4102/    1C65 : 00                                                  db 0
(1) 4102/    1C66 : 00                                                  db 0
(1) 4102/    1C67 : 00                                                  db 0
(1) 4102/    1C68 : 00                                                  db 0
(1) 4102/    1C69 : 00                                                  db 0
(1) 4102/    1C6A : 00                                                  db 0
(1) 4102/    1C6B : 00                                                  db 0
(1) 4102/    1C6C : 00                                                  db 0
(1) 4102/    1C6D : 00                                                  db 0
(1) 4102/    1C6E : 00                                                  db 0
(1) 4102/    1C6F : 00                                                  db 0
(1) 4102/    1C70 : 00                                                  db 0
(1) 4102/    1C71 : 00                                                  db 0
(1) 4102/    1C72 : 00                                                  db 0
(1) 4102/    1C73 : 00                                                  db 0
(1) 4102/    1C74 : 00                                                  db 0
(1) 4102/    1C75 : 00                                                  db 0
(1) 4102/    1C76 : 00                                                  db 0
(1) 4102/    1C77 : 00                                                  db 0
(1) 4102/    1C78 : 00                                                  db 0
(1) 4102/    1C79 : 00                                                  db 0
(1) 4102/    1C7A : 00                                                  db 0
(1) 4102/    1C7B : 00                                                  db 0
(1) 4102/    1C7C : 00                                                  db 0
(1) 4102/    1C7D : 00                                                  db 0
(1) 4102/    1C7E : 00                                                  db 0
(1) 4102/    1C7F : 00                                                  db 0
(1) 4102/    1C80 : 00                                                  db 0
(1) 4102/    1C81 : 00                                                  db 0
(1) 4102/    1C82 : 00                                                  db 0
(1) 4102/    1C83 : 00                                                  db 0
(1) 4102/    1C84 : 00                                                  db 0
(1) 4102/    1C85 : 00                                                  db 0
(1) 4102/    1C86 : 00                                                  db 0
(1) 4102/    1C87 : 00                                                  db 0
(1) 4102/    1C88 : 00                                                  db 0
(1) 4102/    1C89 : 00                                                  db 0
(1) 4102/    1C8A : 00                                                  db 0
(1) 4102/    1C8B : 00                                                  db 0
(1) 4102/    1C8C : 00                                                  db 0
(1) 4102/    1C8D : 00                                                  db 0
(1) 4102/    1C8E : 00                                                  db 0
(1) 4102/    1C8F : 00                                                  db 0
(1) 4102/    1C90 : 00                                                  db 0
(1) 4102/    1C91 : 00                                                  db 0
(1) 4102/    1C92 : 00                                                  db 0
(1) 4102/    1C93 : 00                                                  db 0
(1) 4102/    1C94 : 00                                                  db 0
(1) 4102/    1C95 : 00                                                  db 0
(1) 4102/    1C96 : 00                                                  db 0
(1) 4102/    1C97 : 00                                                  db 0
(1) 4102/    1C98 : 00                                                  db 0
(1) 4102/    1C99 : 00                                                  db 0
(1) 4102/    1C9A : 00                                                  db 0
(1) 4102/    1C9B : 00                                                  db 0
(1) 4102/    1C9C : 00                                                  db 0
(1) 4102/    1C9D : 00                                                  db 0
(1) 4102/    1C9E : 00                                                  db 0
(1) 4102/    1C9F : 00                                                  db 0
(1) 4102/    1CA0 : 00                                                  db 0
(1) 4102/    1CA1 : 00                                                  db 0
(1) 4102/    1CA2 : 00                                                  db 0
(1) 4102/    1CA3 : 00                                                  db 0
(1) 4102/    1CA4 : 00                                                  db 0
(1) 4102/    1CA5 : 00                                                  db 0
(1) 4102/    1CA6 : 00                                                  db 0
(1) 4102/    1CA7 : 00                                                  db 0
(1) 4102/    1CA8 : 00                                                  db 0
(1) 4102/    1CA9 : 00                                                  db 0
(1) 4102/    1CAA : 00                                                  db 0
(1) 4102/    1CAB : 00                                                  db 0
(1) 4102/    1CAC : 00                                                  db 0
(1) 4102/    1CAD : 00                                                  db 0
(1) 4102/    1CAE : 00                                                  db 0
(1) 4102/    1CAF : 00                                                  db 0
(1) 4102/    1CB0 : 00                                                  db 0
(1) 4102/    1CB1 : 00                                                  db 0
(1) 4102/    1CB2 : 00                                                  db 0
(1) 4102/    1CB3 : 00                                                  db 0
(1) 4102/    1CB4 : 00                                                  db 0
(1) 4102/    1CB5 : 00                                                  db 0
(1) 4102/    1CB6 : 00                                                  db 0
(1) 4102/    1CB7 : 00                                                  db 0
(1) 4102/    1CB8 : 00                                                  db 0
(1) 4102/    1CB9 : 00                                                  db 0
(1) 4102/    1CBA : 00                                                  db 0
(1) 4102/    1CBB : 00                                                  db 0
(1) 4102/    1CBC : 00                                                  db 0
(1) 4102/    1CBD : 00                                                  db 0
(1) 4102/    1CBE : 00                                                  db 0
(1) 4102/    1CBF : 00                                                  db 0
(1) 4102/    1CC0 : 00                                                  db 0
(1) 4102/    1CC1 : 00                                                  db 0
(1) 4102/    1CC2 : 00                                                  db 0
(1) 4102/    1CC3 : 00                                                  db 0
(1) 4102/    1CC4 : 00                                                  db 0
(1) 4102/    1CC5 : 00                                                  db 0
(1) 4102/    1CC6 : 00                                                  db 0
(1) 4102/    1CC7 : 00                                                  db 0
(1) 4102/    1CC8 : 00                                                  db 0
(1) 4102/    1CC9 : 00                                                  db 0
(1) 4102/    1CCA : 00                                                  db 0
(1) 4102/    1CCB : 00                                                  db 0
(1) 4102/    1CCC : 00                                                  db 0
(1) 4102/    1CCD : 00                                                  db 0
(1) 4102/    1CCE : 00                                                  db 0
(1) 4102/    1CCF : 00                                                  db 0
(1) 4102/    1CD0 : 00                                                  db 0
(1) 4102/    1CD1 : 00                                                  db 0
(1) 4102/    1CD2 : 00                                                  db 0
(1) 4102/    1CD3 : 00                                                  db 0
(1) 4102/    1CD4 : 00                                                  db 0
(1) 4102/    1CD5 : 00                                                  db 0
(1) 4102/    1CD6 : 00                                                  db 0
(1) 4102/    1CD7 : 00                                                  db 0
(1) 4102/    1CD8 : 00                                                  db 0
(1) 4102/    1CD9 : 00                                                  db 0
(1) 4102/    1CDA : 00                                                  db 0
(1) 4102/    1CDB : 00                                                  db 0
(1) 4102/    1CDC : 00                                                  db 0
(1) 4102/    1CDD : 00                                                  db 0
(1) 4102/    1CDE : 00                                                  db 0
(1) 4102/    1CDF : 00                                                  db 0
(1) 4102/    1CE0 : 00                                                  db 0
(1) 4102/    1CE1 : 00                                                  db 0
(1) 4102/    1CE2 : 00                                                  db 0
(1) 4102/    1CE3 : 00                                                  db 0
(1) 4102/    1CE4 : 00                                                  db 0
(1) 4102/    1CE5 : 00                                                  db 0
(1) 4102/    1CE6 : 00                                                  db 0
(1) 4102/    1CE7 : 00                                                  db 0
(1) 4102/    1CE8 : 00                                                  db 0
(1) 4102/    1CE9 : 00                                                  db 0
(1) 4102/    1CEA : 00                                                  db 0
(1) 4102/    1CEB : 00                                                  db 0
(1) 4102/    1CEC : 00                                                  db 0
(1) 4102/    1CED : 00                                                  db 0
(1) 4102/    1CEE : 00                                                  db 0
(1) 4102/    1CEF : 00                                                  db 0
(1) 4102/    1CF0 : 00                                                  db 0
(1) 4102/    1CF1 : 00                                                  db 0
(1) 4102/    1CF2 : 00                                                  db 0
(1) 4102/    1CF3 : 00                                                  db 0
(1) 4102/    1CF4 : 00                                                  db 0
(1) 4102/    1CF5 : 00                                                  db 0
(1) 4102/    1CF6 : 00                                                  db 0
(1) 4102/    1CF7 : 00                                                  db 0
(1) 4102/    1CF8 : 00                                                  db 0
(1) 4102/    1CF9 : 00                                                  db 0
(1) 4102/    1CFA : 00                                                  db 0
(1) 4102/    1CFB : 00                                                  db 0
(1) 4102/    1CFC : 00                                                  db 0
(1) 4102/    1CFD : 00                                                  db 0
(1) 4102/    1CFE : 00                                                  db 0
(1) 4102/    1CFF : 00                                                  db 0
(1) 4102/    1D00 :                     
(1) 4103/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4104/    1E00 :                     trkCach_0	ds MAX_RCACH	; ** MUST BE aligned **
(1) 4105/    1E40 :                     trkCach_1	ds MAX_RCACH
(1) 4106/    1E80 :                     trkCach_2	ds MAX_RCACH
(1) 4107/    1EC0 :                     trkCach_3	ds MAX_RCACH
(1) 4108/    1F00 :                     
(1) 4109/    1F00 :                     ; --------------------------------------------------------
(1) 4110/    1F00 :                     
(1) 4111/    1F00 :                     		cpu 68000	; [AS] Exit Z80
(1) 4112/    1F00 :                     		padding off	; [AS] NO padding (again)
(1) 4113/    3134 :                     		phase Z80_TOP+*	; [AS] Relocate PC
(1) 4114/    3134 :                     		align 2		; [AS] Align by 2
(1) 4115/    3134 :                     
     316/    3134 :                     Z80_CODE_END:
     317/    3134 :                     		include "sound/tracks.asm"		; GEMA: Track data
(1)    1/    3134 :                     ; ================================================================
(1)    2/    3134 :                     ; ------------------------------------------------------------
(1)    3/    3134 :                     ; DATA SECTION
(1)    4/    3134 :                     ;
(1)    5/    3134 :                     ; SOUND
(1)    6/    3134 :                     ; ------------------------------------------------------------
(1)    7/    3134 :                     
(1)    8/    3134 :                     ; ticks - %gttttttt
(1)    9/    3134 :                     ;   loc - 68k pointer
(1)   10/    3134 :                     ;
(1)   11/    3134 :                     ; t-Ticks
(1)   12/    3134 :                     ; g-Use global tempo
(1)   13/    3134 :                     gemaTrk macro ticks,loc
(1)   14/    3134 :                     	dc.l ((ticks&$FF)<<24)|loc
(1)   15/    3134 :                     	endm
(1)   16/    3134 :                     
(1)   17/    3134 :                     ; gemaHead
(1)   18/    3134 :                     ; block point, patt point, ins point
(1)   19/    3134 :                     ; numof_blocks,numof_patts,numof_ins
(1)   20/    3134 :                     gemaHead macro blk,pat,ins
(1)   21/    3134 :                     	dc.l blk
(1)   22/    3134 :                     	dc.l pat
(1)   23/    3134 :                     	dc.l ins
(1)   24/    3134 :                     	endm
(1)   25/    3134 :                     
(1)   26/    3134 :                     ; Instrument macros
(1)   27/    3134 :                     ; do note that some 24-bit pointers add 90h to the MSB automaticly.
(1)   28/    3134 :                     gInsNull macro
(1)   29/    3134 :                     	dc.b $00,$00,$00,$00
(1)   30/    3134 :                     	dc.b $00,$00,$00,$00
(1)   31/    3134 :                     	endm
(1)   32/    3134 :                     
(1)   33/    3134 :                     ; alv: attack level
(1)   34/    3134 :                     ; atk: attack rate
(1)   35/    3134 :                     ; slv: sustain
(1)   36/    3134 :                     ; dky: decay rate (up)
(1)   37/    3134 :                     ; rrt: release rate (down)
(1)   38/    3134 :                     ; vib: (TODO)
(1)   39/    3134 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)   40/    3134 :                     	dc.b $80,pitch,alv,atk
(1)   41/    3134 :                     	dc.b slv,dky,rrt,vib
(1)   42/    3134 :                     	endm
(1)   43/    3134 :                     
(1)   44/    3134 :                     ; same args as gInsPsg
(1)   45/    3134 :                     ; only one more argument for the noise type:
(1)   46/    3134 :                     ; mode: noise mode
(1)   47/    3134 :                     ;       %tmm
(1)   48/    3134 :                     ;        t  - Bass(0)|Noise(1)
(1)   49/    3134 :                     ;         mm- Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)   50/    3134 :                     ;
(1)   51/    3134 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)   52/    3134 :                     	dc.b $90|mode,pitch,alv,atk
(1)   53/    3134 :                     	dc.b slv,dky,rrt,vib
(1)   54/    3134 :                     	endm
(1)   55/    3134 :                     
(1)   56/    3134 :                     ; 24-bit ROM pointer to FM patch data
(1)   57/    3134 :                     gInsFm macro pitch,fmins
(1)   58/    3134 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   59/    3134 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   60/    3134 :                     	endm
(1)   61/    3134 :                     
(1)   62/    3134 :                     ; Same args as gInsFm, but the last 4 words of the data
(1)   63/    3134 :                     ; are the custom freqs for each operator in this order:
(1)   64/    3134 :                     ; OP1 OP2 OP3 OP4
(1)   65/    3134 :                     ;
(1)   66/    3134 :                     ; NOTE: pitch is useless here...
(1)   67/    3134 :                     gInsFm3	macro pitch,fmins
(1)   68/    3134 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)   69/    3134 :                     	dc.b fmins&$FF,$00,$00,$00
(1)   70/    3134 :                     	endm
(1)   71/    3134 :                     
(1)   72/    3134 :                     ; start: Pointer to sample data:
(1)   73/    3134 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   74/    3134 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   75/    3134 :                     ;        dc.b (sound data)	; <-- Then the actual sound data
(1)   76/    3134 :                     ;
(1)   77/    3134 :                     ; flags: $00 - No Loop
(1)   78/    3134 :                     ; 	 $01 - Loop
(1)   79/    3134 :                     gInsDac	macro pitch,start,flags
(1)   80/    3134 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)   81/    3134 :                     	dc.b start&$FF,0,0,0
(1)   82/    3134 :                     	endm
(1)   83/    3134 :                     
(1)   84/    3134 :                     ; start: Pointer to sample data:
(1)   85/    3134 :                     ;        dc.b end,end,end	; 24-bit LENGTH of the sample
(1)   86/    3134 :                     ;        dc.b loop,loop,loop	; 24-bit Loop point
(1)   87/    3134 :                     ;        dc.b (data)		; Then the actual sound data
(1)   88/    3134 :                     ;
(1)   89/    3134 :                     ; flags: %00SL
(1)   90/    3134 :                     ;            L - Loop sample No/Yes
(1)   91/    3134 :                     ;           S  - Sample data is on STEREO
(1)   92/    3134 :                     gInsPwm	macro pitch,start,flags
(1)   93/    3134 :                      if MARS
(1)   94/    3134 :                     	dc.b $D0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)   95/    3134 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)   96/    3134 :                      else
(1)   97/    3134 :                     	dc.b $00,$00,$00,$00
(1)   98/    3134 :                     	dc.b $00,$00,$00,$00
(1)   99/    3134 :                      endif
(1)  100/    3134 :                     	endm
(1)  101/    3134 :                     
(1)  102/    3134 :                     ; ------------------------------------------------------------
(1)  103/    3134 :                     
(1)  104/    3134 :                     	align $8000
(1)  105/    8000 :                     
(1)  106/    8000 :                     ; ------------------------------------------------------------
(1)  107/    8000 :                     ; Nikona MAIN track-list
(1)  108/    8000 :                     ;
(1)  109/    8000 :                     ; ONLY the ticks can be set here.
(1)  110/    8000 :                     ; You can change the ticks mid-track using effect A
(1)  111/    8000 :                     ;
(1)  112/    8000 :                     ; Add $80 to the ticks value to use the GLOBAL
(1)  113/    8000 :                     ; sub-beats
(1)  114/    8000 :                     ;
(1)  115/    8000 :                     ; To set the sub-beats send the SetBeats command
(1)  116/    8000 :                     ; BEFORE playing your track:
(1)  117/    8000 :                     ; 	move.w	#new_beats,d0
(1)  118/    8000 :                     ; 	bsr	gemaSetBeats
(1)  119/    8000 :                     ; 	move.w	#track_id,d0
(1)  120/    8000 :                     ;	bsr	gemaPlayTrack
(1)  121/    8000 :                     ; ------------------------------------------------------------
(1)  122/    8000 :                     
(1)  123/    8000 :                     Gema_MasterList:
(1)  124/    8000 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0	; Ticks, Track pointer (Default tempo: 150/120)
(1)  124/    8000 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  125/    8004 : (MACRO)             	gemaTrk $80|6,GemaTrk_BodyOver
(1)  125/    8004 : 8601 2434                   dc.l (($80|6&$FF)<<24)|GEMATRK_BODYOVER
(1)  126/    8008 : (MACRO)             	gemaTrk 7,GemaTrk_MOVEME
(1)  126/    8008 : 0701 2C96                   dc.l ((7&$FF)<<24)|GEMATRK_MOVEME
(1)  127/    800C : (MACRO)             	gemaTrk 4,GemaTrk_xtrim
(1)  127/    800C : 0401 3BC8                   dc.l ((4&$FF)<<24)|GEMATRK_XTRIM
(1)  128/    8010 : (MACRO)             	gemaTrk $80|3,GemaTrk_TEST_6
(1)  128/    8010 : 8301 0808                   dc.l (($80|3&$FF)<<24)|GEMATRK_TEST_6
(1)  129/    8014 : (MACRO)             	gemaTrk 7,GemaTrk_TEST_1
(1)  129/    8014 : 0700 9CFC                   dc.l ((7&$FF)<<24)|GEMATRK_TEST_1
(1)  130/    8018 : (MACRO)             	gemaTrk $80|3,GemaTrk_TEST_2
(1)  130/    8018 : 8300 8080                   dc.l (($80|3&$FF)<<24)|GEMATRK_TEST_2
(1)  131/    801C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_3
(1)  131/    801C : 0300 D1D6                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_3
(1)  132/    8020 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_4
(1)  132/    8020 : 0300 EAA0                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_4
(1)  133/    8024 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_5
(1)  133/    8024 : 0300 FFBC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_5
(1)  134/    8028 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  134/    8028 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  135/    802C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  135/    802C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  136/    8030 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  136/    8030 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  137/    8034 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  137/    8034 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  138/    8038 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  138/    8038 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  139/    803C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  139/    803C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  140/    8040 :                     
(1)  141/    8040 : (MACRO)             	gemaTrk $80|4,GemaTrk_TEST_1
(1)  141/    8040 : 8400 9CFC                   dc.l (($80|4&$FF)<<24)|GEMATRK_TEST_1
(1)  142/    8044 : (MACRO)             	gemaTrk $80|2,GemaTrk_TEST_0
(1)  142/    8044 : 8201 45AC                   dc.l (($80|2&$FF)<<24)|GEMATRK_TEST_0
(1)  143/    8048 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  143/    8048 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  144/    804C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  144/    804C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  145/    8050 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  145/    8050 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  146/    8054 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  146/    8054 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  147/    8058 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  147/    8058 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  148/    805C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  148/    805C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  149/    8060 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  149/    8060 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  150/    8064 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  150/    8064 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  151/    8068 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  151/    8068 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  152/    806C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  152/    806C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  153/    8070 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  153/    8070 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  154/    8074 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  154/    8074 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  155/    8078 : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  155/    8078 : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  156/    807C : (MACRO)             	gemaTrk 3,GemaTrk_TEST_0
(1)  156/    807C : 0301 45AC                   dc.l ((3&$FF)<<24)|GEMATRK_TEST_0
(1)  157/    8080 :                     
(1)  158/    8080 :                     ; ------------------------------------------------------------
(1)  159/    8080 :                     ; BGM tracks
(1)  160/    8080 :                     ; ------------------------------------------------------------
(1)  161/    8080 :                     
(1)  162/    8080 :                     GemaTrk_TEST_2:
(1)  163/    8080 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  163/    8080 : 0000 808C                   dc.l .BLK
(1)  163/    8084 : 0000 80A2                   dc.l .PAT
(1)  163/    8088 : 0000 9CC4                   dc.l .INS
(1)  164/    808C :                     .blk:
(1)  165/    808C :                     	binclude "sound/tracks/wegot_blk.bin"
(1)  166/    80A1 :                     	align 2
(1)  167/    80A2 :                     .pat:
(1)  168/    80A2 :                     	binclude "sound/tracks/wegot_patt.bin"
(1)  169/    9CC3 :                     	align 2
(1)  170/    9CC4 :                     .ins:
(1)  171/    9CC4 : (MACRO)             	gInsFm 0,FmIns_Synth_plus
(1)  171/    9CC4 : A000 0147                   dc.b $A0,0,((FMINS_SYNTH_PLUS>>16)&$FF),((FMINS_SYNTH_PLUS>>8)&$FF)
(1)  171/    9CC8 : 5F00 0000                   dc.b FMINS_SYNTH_PLUS&$FF,$00,$00,$00
(1)  172/    9CCC : (MACRO)             	gInsFm 0,FmIns_Bass_4
(1)  172/    9CCC : A000 0147                   dc.b $A0,0,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  172/    9CD0 : 1F00 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  173/    9CD4 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,0
(1)  173/    9CD4 : C000 01AC                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  173/    9CD8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  174/    9CDC : (MACRO)             	gInsFm 0,FmIns_Bass_club
(1)  174/    9CDC : A000 0147                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(1)  174/    9CE0 : 7F00 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(1)  175/    9CE4 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  175/    9CE4 : B000 0146                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  175/    9CE8 : A700 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  176/    9CEC : (MACRO)             	gInsPsg 0,$10,$04,$20,$04,$02,$00;gInsFm -12,FmIns_Trumpet_carnival;;
(1)  176/    9CEC : 8000 1004                   dc.b $80,0,$10,$04
(1)  176/    9CF0 : 2004 0200                   dc.b $20,$04,$02,$00
(1)  177/    9CF4 : (MACRO)             	gInsDac 0,DacIns_wegot_crash,0
(1)  177/    9CF4 : C000 0180                   dc.b $C0|0,0,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(1)  177/    9CF8 : 0000 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(1)  178/    9CFC :                     
(1)  179/    9CFC :                     GemaTrk_TEST_1:
(1)  180/    9CFC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  180/    9CFC : 0000 9D08                   dc.l .BLK
(1)  180/    9D00 : 0000 9D17                   dc.l .PAT
(1)  180/    9D04 : 0000 D166                   dc.l .INS
(1)  181/    9D08 :                     .blk:
(1)  182/    9D08 :                     	binclude "sound/tracks/vectr_blk.bin"
(1)  183/    9D17 :                     .pat:
(1)  184/    9D17 :                     	binclude "sound/tracks/vectr_patt.bin"
(1)  185/    D166 :                     .ins:
(1)  186/    D166 : (MACRO)             	gInsPwm -17,SmpIns_Vctr01,%001
(1)  186/    D166 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  186/    D16A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  187/    D16E : (MACRO)             	gInsFm -3,FmIns_brass_eur
(1)  187/    D16E : A0FD 0147                   dc.b $A0,-3,((FMINS_BRASS_EUR>>16)&$FF),((FMINS_BRASS_EUR>>8)&$FF)
(1)  187/    D172 : FF00 0000                   dc.b FMINS_BRASS_EUR&$FF,$00,$00,$00
(1)  188/    D176 : (MACRO)             	gInsPwm -15,SmpIns_VctrCrash,0
(1)  188/    D176 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  188/    D17A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    D17E : (MACRO)             	gInsPwm -17,SmpIns_Vctr04,%001
(1)  189/    D17E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  189/    D182 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    D186 : (MACRO)             	gInsNull
(1)  190/    D186 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  190/    D18A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    D18E : (MACRO)             	gInsPwm -15,SmpIns_VctrTimpani,%101
(1)  191/    D18E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  191/    D192 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  192/    D196 : (MACRO)             	gInsFm -22,FmIns_Bass_8
(1)  192/    D196 : A0EA 0147                   dc.b $A0,-22,((FMINS_BASS_8>>16)&$FF),((FMINS_BASS_8>>8)&$FF)
(1)  192/    D19A : 3F00 0000                   dc.b FMINS_BASS_8&$FF,$00,$00,$00
(1)  193/    D19E : (MACRO)             	gInsPsg 0,$40,$08,$10,$01,$01,$00
(1)  193/    D19E : 8000 4008                   dc.b $80,0,$40,$08
(1)  193/    D1A2 : 1001 0100                   dc.b $10,$01,$01,$00
(1)  194/    D1A6 : (MACRO)             	gInsNull;gInsPsgN 0,$40,$08,$10,$01,$01,$00,%110
(1)  194/    D1A6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  194/    D1AA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    D1AE : (MACRO)             	gInsPwm -17,SmpIns_VctrSnare,%000
(1)  195/    D1AE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  195/    D1B2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  196/    D1B6 : (MACRO)             	gInsPwm -17,SmpIns_VctrKick,%000
(1)  196/    D1B6 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  196/    D1BA : 0000 0000                   dc.b $00,$00,$00,$00
(1)  197/    D1BE : (MACRO)             	gInsFm3 0,FmIns_Sp_Closedhat
(1)  197/    D1BE : B000 0146                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  197/    D1C2 : CF00 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  198/    D1C6 : (MACRO)             	gInsFm3 0,FmIns_Sp_Openhat
(1)  198/    D1C6 : B000 0146                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  198/    D1CA : A700 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  199/    D1CE : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  199/    D1CE : 0000 0000                   dc.b $00,$00,$00,$00
(1)  199/    D1D2 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  200/    D1D6 :                     .ins_e:
(1)  201/    D1D6 :                     
(1)  202/    D1D6 :                     GemaTrk_TEST_3:
(1)  203/    D1D6 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  203/    D1D6 : 0000 D1E2                   dc.l .BLK
(1)  203/    D1DA : 0000 D1F0                   dc.l .PAT
(1)  203/    D1DE : 0000 EA80                   dc.l .INS
(1)  204/    D1E2 :                     .blk:
(1)  205/    D1E2 :                     	binclude "sound/tracks/gigalo_blk.bin"
(1)  206/    D1EF :                     	align 2
(1)  207/    D1F0 :                     .pat:
(1)  208/    D1F0 :                     	binclude "sound/tracks/gigalo_patt.bin"
(1)  209/    EA80 :                     	align 2
(1)  210/    EA80 :                     .ins:
(1)  211/    EA80 : (MACRO)             	gInsPsg 0,$10,$04,$20,$06,$08,$00
(1)  211/    EA80 : 8000 1004                   dc.b $80,0,$10,$04
(1)  211/    EA84 : 2006 0800                   dc.b $20,$06,$08,$00
(1)  212/    EA88 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$20,$00,%100
(1)  212/    EA88 : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  212/    EA8C : 0004 2000                   dc.b $00,$04,$20,$00
(1)  213/    EA90 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$20,$00,%101
(1)  213/    EA90 : 9500 0000                   dc.b $90|%101,0,$00,$00
(1)  213/    EA94 : 0004 2000                   dc.b $00,$04,$20,$00
(1)  214/    EA98 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$04,$40,$00,%110
(1)  214/    EA98 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  214/    EA9C : 0004 4000                   dc.b $00,$04,$40,$00
(1)  215/    EAA0 :                     
(1)  216/    EAA0 :                     GemaTrk_TEST_4:
(1)  217/    EAA0 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  217/    EAA0 : 0000 EAAC                   dc.l .BLK
(1)  217/    EAA4 : 0000 EABE                   dc.l .PAT
(1)  217/    EAA8 : 0000 FFA4                   dc.l .INS
(1)  218/    EAAC :                     .blk:
(1)  219/    EAAC :                     	binclude "sound/tracks/temple_blk.bin"
(1)  220/    EABE :                     	align 2
(1)  221/    EABE :                     .pat:
(1)  222/    EABE :                     	binclude "sound/tracks/temple_patt.bin"
(1)  223/    FFA4 :                     	align 2
(1)  224/    FFA4 :                     .ins:
(1)  225/    FFA4 : (MACRO)             	gInsPsg 0,$00,$08,$20,$06,$03,$00
(1)  225/    FFA4 : 8000 0008                   dc.b $80,0,$00,$08
(1)  225/    FFA8 : 2006 0300                   dc.b $20,$06,$03,$00
(1)  226/    FFAC : (MACRO)             	gInsPsg 0,$00,$00,$30,$04,$04,$00
(1)  226/    FFAC : 8000 0000                   dc.b $80,0,$00,$00
(1)  226/    FFB0 : 3004 0400                   dc.b $30,$04,$04,$00
(1)  227/    FFB4 : (MACRO)             	gInsPsgN 0,$00,$30,$08,$10,$38,$01,%101
(1)  227/    FFB4 : 9500 0030                   dc.b $90|%101,0,$00,$30
(1)  227/    FFB8 : 0810 3801                   dc.b $08,$10,$38,$01
(1)  228/    FFBC :                     
(1)  229/    FFBC :                     GemaTrk_TEST_5:
(1)  230/    FFBC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  230/    FFBC : 0000 FFC8                   dc.l .BLK
(1)  230/    FFC0 : 0000 FFD0                   dc.l .PAT
(1)  230/    FFC4 : 0001 07F8                   dc.l .INS
(1)  231/    FFC8 :                     .blk:
(1)  232/    FFC8 :                     	binclude "sound/tracks/brinstr_blk.bin"
(1)  233/    FFD0 :                     	align 2
(1)  234/    FFD0 :                     .pat:
(1)  235/    FFD0 :                     	binclude "sound/tracks/brinstr_patt.bin"
(1)  236/   107F7 :                     	align 2
(1)  237/   107F8 :                     .ins:
(1)  238/   107F8 : (MACRO)             	gInsPsg 0,$40,$08,$20,$01,$04,$00
(1)  238/   107F8 : 8000 4008                   dc.b $80,0,$40,$08
(1)  238/   107FC : 2001 0400                   dc.b $20,$01,$04,$00
(1)  239/   10800 : (MACRO)             	gInsPsgN 0,$10,$08,$20,$02,$01,$00,%011
(1)  239/   10800 : 9300 1008                   dc.b $90|%011,0,$10,$08
(1)  239/   10804 : 2002 0100                   dc.b $20,$02,$01,$00
(1)  240/   10808 :                     
(1)  241/   10808 :                     GemaTrk_TEST_6:
(1)  242/   10808 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  242/   10808 : 0001 0814                   dc.l .BLK
(1)  242/   1080C : 0001 081C                   dc.l .PAT
(1)  242/   10810 : 0001 23B4                   dc.l .INS
(1)  243/   10814 :                     .blk:
(1)  244/   10814 :                     	binclude "sound/tracks/cirno_blk.bin"
(1)  245/   1081B :                     	align 2
(1)  246/   1081C :                     .pat:
(1)  247/   1081C :                     	binclude "sound/tracks/cirno_patt.bin"
(1)  248/   123B4 :                     	align 2
(1)  249/   123B4 :                     .ins:
(1)  250/   123B4 : (MACRO)             	gInsFm -12,FmIns_PianoM1
(1)  250/   123B4 : A0F4 0148                   dc.b $A0,-12,((FMINS_PIANOM1>>16)&$FF),((FMINS_PIANOM1>>8)&$FF)
(1)  250/   123B8 : BF00 0000                   dc.b FMINS_PIANOM1&$FF,$00,$00,$00
(1)  251/   123BC : (MACRO)             	gInsNull
(1)  251/   123BC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  251/   123C0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  252/   123C4 : (MACRO)             	gInsFm -12,FmIns_Bass_4
(1)  252/   123C4 : A0F4 0147                   dc.b $A0,-12,((FMINS_BASS_4>>16)&$FF),((FMINS_BASS_4>>8)&$FF)
(1)  252/   123C8 : 1F00 0000                   dc.b FMINS_BASS_4&$FF,$00,$00,$00
(1)  253/   123CC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$40,$00,%110
(1)  253/   123CC : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  253/   123D0 : 0000 4000                   dc.b $00,$00,$40,$00
(1)  254/   123D4 : (MACRO)             	gInsDac +12,DacIns_wegot_kick,0
(1)  254/   123D4 : C00C 01AC                   dc.b $C0|0,+12,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  254/   123D8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  255/   123DC : (MACRO)             	gInsDac +12,DacIns_wegot_kick,0
(1)  255/   123DC : C00C 01AC                   dc.b $C0|0,+12,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  255/   123E0 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  256/   123E4 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$40,$00,%110
(1)  256/   123E4 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  256/   123E8 : 0000 4000                   dc.b $00,$00,$40,$00
(1)  257/   123EC : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$08,$00,%100
(1)  257/   123EC : 9400 0000                   dc.b $90|%100,0,$00,$00
(1)  257/   123F0 : 0000 0800                   dc.b $00,$00,$08,$00
(1)  258/   123F4 : (MACRO)             	gInsDac +6,DacIns_Snare_1,0
(1)  258/   123F4 : C006 01B4                   dc.b $C0|0,+6,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  258/   123F8 : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  259/   123FC : (MACRO)             	gInsFm -12,FmIns_Marimba
(1)  259/   123FC : A0F4 014A                   dc.b $A0,-12,((FMINS_MARIMBA>>16)&$FF),((FMINS_MARIMBA>>8)&$FF)
(1)  259/   12400 : 3F00 0000                   dc.b FMINS_MARIMBA&$FF,$00,$00,$00
(1)  260/   12404 : (MACRO)             	gInsPsg 0,$10,$20,$40,$01,$01,$00
(1)  260/   12404 : 8000 1020                   dc.b $80,0,$10,$20
(1)  260/   12408 : 4001 0100                   dc.b $40,$01,$01,$00
(1)  261/   1240C : (MACRO)             	gInsNull
(1)  261/   1240C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  261/   12410 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/   12414 : (MACRO)             	gInsNull
(1)  262/   12414 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  262/   12418 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/   1241C : (MACRO)             	gInsNull
(1)  263/   1241C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  263/   12420 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  264/   12424 : (MACRO)             	gInsNull
(1)  264/   12424 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  264/   12428 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  265/   1242C : (MACRO)             	gInsNull
(1)  265/   1242C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  265/   12430 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  266/   12434 :                     
(1)  267/   12434 :                     ; ------------------------------------------------------------
(1)  268/   12434 :                     
(1)  269/   12434 :                     GemaTrk_BodyOver:
(1)  270/   12434 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  270/   12434 : 0001 2440                   dc.l .BLK
(1)  270/   12438 : 0001 2456                   dc.l .PAT
(1)  270/   1243C : 0001 2C4E                   dc.l .INS
(1)  271/   12440 :                     .blk:
(1)  272/   12440 :                     	binclude "sound/tracks/bodyover_blk.bin"
(1)  273/   12455 :                     	align 2
(1)  274/   12456 :                     .pat:
(1)  275/   12456 :                     	binclude "sound/tracks/bodyover_patt.bin"
(1)  276/   12C4D :                     	align 2
(1)  277/   12C4E :                     .ins:
(1)  278/   12C4E : (MACRO)             	gInsPwm 0,SmpIns_Nadie,%10
(1)  278/   12C4E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  278/   12C52 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  279/   12C56 : (MACRO)             	gInsPwm 0,SmpIns_Kick,%10
(1)  279/   12C56 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  279/   12C5A : 0000 0000                   dc.b $00,$00,$00,$00
(1)  280/   12C5E : (MACRO)             	gInsPwm 0,SmpIns_Snare_2,%00
(1)  280/   12C5E : 0000 0000                   dc.b $00,$00,$00,$00
(1)  280/   12C62 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  281/   12C66 : (MACRO)             	gInsFm -24,FmIns_Bass_groove_2
(1)  281/   12C66 : A0E8 0149                   dc.b $A0,-24,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(1)  281/   12C6A : 5F00 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(1)  282/   12C6E : (MACRO)             	gInsFm -36,FmIns_Ding_Baseball
(1)  282/   12C6E : A0DC 0148                   dc.b $A0,-36,((FMINS_DING_BASEBALL>>16)&$FF),((FMINS_DING_BASEBALL>>8)&$FF)
(1)  282/   12C72 : 5F00 0000                   dc.b FMINS_DING_BASEBALL&$FF,$00,$00,$00
(1)  283/   12C76 : (MACRO)             	gInsFm 0,FmIns_Trumpet_1
(1)  283/   12C76 : A000 0147                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(1)  283/   12C7A : BF00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(1)  284/   12C7E : (MACRO)             	gInsFm3 0,FmIns_Sp_ClosedHat
(1)  284/   12C7E : B000 0146                   dc.b $B0,0,((FMINS_SP_CLOSEDHAT>>16)&$FF),((FMINS_SP_CLOSEDHAT>>8)&$FF)
(1)  284/   12C82 : CF00 0000                   dc.b FMINS_SP_CLOSEDHAT&$FF,$00,$00,$00
(1)  285/   12C86 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  285/   12C86 : B000 0146                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  285/   12C8A : A700 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  286/   12C8E : (MACRO)             	gInsPsg +12,$00,$00,$00,$00,$02,0
(1)  286/   12C8E : 800C 0000                   dc.b $80,+12,$00,$00
(1)  286/   12C92 : 0000 0200                   dc.b $00,$00,$02,0
(1)  287/   12C96 :                     
(1)  288/   12C96 :                     GemaTrk_MOVEME:
(1)  289/   12C96 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  289/   12C96 : 0001 2CA2                   dc.l .BLK
(1)  289/   12C9A : 0001 2CBA                   dc.l .PAT
(1)  289/   12C9E : 0001 3B30                   dc.l .INS
(1)  290/   12CA2 :                     .blk:
(1)  291/   12CA2 :                     	binclude "sound/tracks/moveme_blk.bin"
(1)  292/   12CB9 :                     	align 2
(1)  293/   12CBA :                     .pat:
(1)  294/   12CBA :                     	binclude "sound/tracks/moveme_patt.bin"
(1)  295/   13B2F :                     	align 2
(1)  296/   13B30 :                     .ins:
(1)  297/   13B30 : (MACRO)             	gInsPwm 0,SmpIns_MoveMe_Hit,%10
(1)  297/   13B30 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  297/   13B34 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  298/   13B38 : (MACRO)             	gInsFm 0,FmIns_Bass_Duck
(1)  298/   13B38 : A000 0149                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(1)  298/   13B3C : BF00 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(1)  299/   13B40 : (MACRO)             	gInsPwm 0,SmpIns_MoveMe_Brass,%11
(1)  299/   13B40 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  299/   13B44 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  300/   13B48 : (MACRO)             	gInsFm 0,FmIns_ClosedHat
(1)  300/   13B48 : A000 0148                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  300/   13B4C : 9F00 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  301/   13B50 : (MACRO)             	gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(1)  301/   13B50 : 9600 0000                   dc.b $90|%110,0,$00,$00
(1)  301/   13B54 : 0000 0400                   dc.b $00,$00,$04,0
(1)  302/   13B58 : (MACRO)             	gInsFm -12,FmIns_HBeat_tom
(1)  302/   13B58 : A0F4 014B                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(1)  302/   13B5C : 9F00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(1)  303/   13B60 : (MACRO)             	gInsPwm 0,SmpIns_Snare_moveme,%10
(1)  303/   13B60 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  303/   13B64 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/   13B68 : (MACRO)             	gInsPwm 0,SmpIns_Kick,%10
(1)  304/   13B68 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  304/   13B6C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  305/   13B70 : (MACRO)             	gInsFm -12,FmIns_Trumpet_carnival
(1)  305/   13B70 : A0F4 0147                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(1)  305/   13B74 : DF00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(1)  306/   13B78 : (MACRO)             	gInsPsg 0,$20,$20,$10,$01,$08,0
(1)  306/   13B78 : 8000 2020                   dc.b $80,0,$20,$20
(1)  306/   13B7C : 1001 0800                   dc.b $10,$01,$08,0
(1)  307/   13B80 : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  307/   13B80 : B000 0146                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  307/   13B84 : A700 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  308/   13B88 : (MACRO)             	gInsNull;gInsPwm -17,SmpIns_MyTime,%10
(1)  308/   13B88 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  308/   13B8C : 0000 0000                   dc.b $00,$00,$00,$00
(1)  309/   13B90 : (MACRO)             	gInsPsg +12,$20,$10,$10,$0C,$0C,0
(1)  309/   13B90 : 800C 2010                   dc.b $80,+12,$20,$10
(1)  309/   13B94 : 100C 0C00                   dc.b $10,$0C,$0C,0
(1)  310/   13B98 : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$06,0
(1)  310/   13B98 : 8000 0000                   dc.b $80,0,$00,$00
(1)  310/   13B9C : 0000 0600                   dc.b $00,$00,$06,0
(1)  311/   13BA0 : (MACRO)             	gInsNull
(1)  311/   13BA0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  311/   13BA4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/   13BA8 : (MACRO)             	gInsNull
(1)  312/   13BA8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  312/   13BAC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  313/   13BB0 : (MACRO)             	gInsNull
(1)  313/   13BB0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  313/   13BB4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/   13BB8 : (MACRO)             	gInsNull
(1)  314/   13BB8 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  314/   13BBC : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/   13BC0 : (MACRO)             	gInsNull
(1)  315/   13BC0 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  315/   13BC4 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  316/   13BC8 :                     
(1)  317/   13BC8 :                     GemaTrk_xtrim:
(1)  318/   13BC8 : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  318/   13BC8 : 0001 3BD4                   dc.l .BLK
(1)  318/   13BCC : 0001 3BDA                   dc.l .PAT
(1)  318/   13BD0 : 0001 4584                   dc.l .INS
(1)  319/   13BD4 :                     .blk:
(1)  320/   13BD4 :                     	binclude "sound/tracks/xtrim_blk.bin"
(1)  321/   13BD9 :                     	align 2
(1)  322/   13BDA :                     .pat:
(1)  323/   13BDA :                     	binclude "sound/tracks/xtrim_patt.bin"
(1)  324/   14583 :                     	align 2
(1)  325/   14584 :                     .ins:
(1)  326/   14584 : (MACRO)             	gInsFm 0,FmIns_Bass_calm
(1)  326/   14584 : A000 0147                   dc.b $A0,0,((FMINS_BASS_CALM>>16)&$FF),((FMINS_BASS_CALM>>8)&$FF)
(1)  326/   14588 : 9F00 0000                   dc.b FMINS_BASS_CALM&$FF,$00,$00,$00
(1)  327/   1458C : (MACRO)             	gInsFm 0,FmIns_ClosedHat
(1)  327/   1458C : A000 0148                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(1)  327/   14590 : 9F00 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(1)  328/   14594 : (MACRO)             	gInsPsg 0,$00,$20,$00,$04,$04,0
(1)  328/   14594 : 8000 0020                   dc.b $80,0,$00,$20
(1)  328/   14598 : 0004 0400                   dc.b $00,$04,$04,0
(1)  329/   1459C : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  329/   1459C : B000 0146                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  329/   145A0 : A700 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  330/   145A4 : (MACRO)             	gInsDac 0,DacIns_wegot_kick,%10
(1)  330/   145A4 : C200 01AC                   dc.b $C0|%10,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(1)  330/   145A8 : CA00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(1)  331/   145AC :                     
(1)  332/   145AC :                     ; ------------------------------------------------------------
(1)  333/   145AC :                     ; FIRST TRACK
(1)  334/   145AC :                     
(1)  335/   145AC :                     GemaTrk_TEST_0:
(1)  336/   145AC : (MACRO)             	gemaHead .blk,.pat,.ins
(1)  336/   145AC : 0001 45B8                   dc.l .BLK
(1)  336/   145B0 : 0001 45BB                   dc.l .PAT
(1)  336/   145B4 : 0001 467F                   dc.l .INS
(1)  337/   145B8 :                     
(1)  338/   145B8 :                     ; Max. 24 blocks
(1)  339/   145B8 :                     .blk:
(1)  340/   145B8 :                     	binclude "sound/tracks/test_blk.bin"
(1)  341/   145BB :                     ; Max. 24 patterns
(1)  342/   145BB :                     .pat:
(1)  343/   145BB :                     	binclude "sound/tracks/test_patt.bin"
(1)  344/   1467F :                     
(1)  345/   1467F :                     ; Max. 16 instruments
(1)  346/   1467F :                     ; Starting from 1.
(1)  347/   1467F :                     .ins:
(1)  348/   1467F :                     ; 	gInsDac 0,DacIns_TESTINS,0
(1)  349/   1467F :                     
(1)  350/   1467F :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  351/   1467F :                     ; 	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  352/   1467F :                     
(1)  353/   1467F : (MACRO)             	gInsPsg 0,$00,$00,$00,$00,$00,0
(1)  353/   1467F : 8000 0000                   dc.b $80,0,$00,$00
(1)  353/   14683 : 0000 0000                   dc.b $00,$00,$00,0
(1)  354/   14687 : (MACRO)             	gInsFm -12,FmIns_Trumpet_2
(1)  354/   14687 : A0F4 0149                   dc.b $A0,-12,((FMINS_TRUMPET_2>>16)&$FF),((FMINS_TRUMPET_2>>8)&$FF)
(1)  354/   1468B : FF00 0000                   dc.b FMINS_TRUMPET_2&$FF,$00,$00,$00
(1)  355/   1468F :                     ; 	gInsPsgN +12,$20,$20,$10,$00,$04,0,%011
(1)  356/   1468F :                     
(1)  357/   1468F : (MACRO)             	gInsFm3 0,FmIns_Sp_OpenHat
(1)  357/   1468F : B000 0146                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(1)  357/   14693 : A700 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(1)  358/   14697 : (MACRO)             	gInsDac -12,DacIns_Snare_1,0
(1)  358/   14697 : C0F4 01B4                   dc.b $C0|0,-12,((DACINS_SNARE_1>>16)&$FF),((DACINS_SNARE_1>>8)&$FF)
(1)  358/   1469B : 4400 0000                   dc.b DACINS_SNARE_1&$FF,0,0,0
(1)  359/   1469F : (MACRO)             	gInsPwm -17,SmpIns_VctrBrass,%001
(1)  359/   1469F : 0000 0000                   dc.b $00,$00,$00,$00
(1)  359/   146A3 : 0000 0000                   dc.b $00,$00,$00,$00
(1)  360/   146A7 :                     
     318/   146A7 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(1)    1/   146A7 :                     ; ====================================================================
(1)    2/   146A7 :                     ; --------------------------------------------------------
(1)    3/   146A7 :                     ; GEMA/Nikona FM instruments "patches"
(1)    4/   146A7 :                     ;
(1)    5/   146A7 :                     ; This must be located at the 68k's 880000 area.
(1)    6/   146A7 :                     ;
(1)    7/   146A7 :                     ; Use the included FM_EDITOR.bin ROM to make your
(1)    8/   146A7 :                     ; own instruments/patches
(1)    9/   146A7 :                     ; --------------------------------------------------------
(1)   10/   146A7 :                     
(1)   11/   146A7 :                     ; Notes:
(1)   12/   146A7 :                     ;
(1)   13/   146A7 :                     ; Savestate FM data is located at: $2478
(1)   14/   146A7 :                     ;
(1)   15/   146A7 :                     ; Sizes:
(1)   16/   146A7 :                     ; Normal FM ins: $20
(1)   17/   146A7 :                     ; Special FM ins: $28
(1)   18/   146A7 :                     ;
(1)   19/   146A7 :                     ; REGISTER FORMAT:
(1)   20/   146A7 :                     ; dc.b $30,$34,$38,$3C
(1)   21/   146A7 :                     ; dc.b $40,$44,$48,$4C
(1)   22/   146A7 :                     ; dc.b $50,$54,$58,$5C
(1)   23/   146A7 :                     ; dc.b $60,$64,$68,$6C
(1)   24/   146A7 :                     ; dc.b $70,$74,$78,$7C
(1)   25/   146A7 :                     ; dc.b $80,$84,$88,$8C
(1)   26/   146A7 :                     ; dc.b $90,$94,$98,$9C
(1)   27/   146A7 :                     ; dc.b $B0,$B4,$22,$28
(1)   28/   146A7 :                     ; ** Extra words for FM3 special:
(1)   29/   146A7 :                     ; dc.w OP1,OP2,OP3,OP4
(1)   30/   146A7 :                     ;
(1)   31/   146A7 :                     ; $22 LFO: %0000evvv
(1)   32/   146A7 :                     ; e - Enable
(1)   33/   146A7 :                     ; v - Value
(1)   34/   146A7 :                     ;
(1)   35/   146A7 :                     ; $28 KEYS: %oooo0000
(1)   36/   146A7 :                     ; o - Operators 4-1
(1)   37/   146A7 :                     
(1)   38/   146A7 :                     
(1)   39/   146A7 :                     
(1)   40/   146A7 :                     ; FM3 Special
(1)   41/   146A7 :                     FmIns_Sp_OpenHat:
(1)   42/   146A7 :                     		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(1)   43/   146CF :                     FmIns_Sp_ClosedHat:
(1)   44/   146CF :                     		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(1)   45/   146F7 :                     FmIns_Sp_Cowbell:
(1)   46/   146F7 :                     		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(1)   47/   1471F :                     FmIns_Bass_4:
(1)   48/   1471F :                     		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(1)   49/   1473F :                     FmIns_Bass_8:
(1)   50/   1473F :                     		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(1)   51/   1475F :                     FmIns_Synth_Plus:
(1)   52/   1475F :                     		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(1)   53/   1477F :                     FmIns_Bass_club:
(1)   54/   1477F :                     		binclude "sound/instr/fm/OLD_bass_club.gsx",$2478,$20
(1)   55/   1479F :                     FmIns_Bass_calm:
(1)   56/   1479F :                     		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(1)   57/   147BF :                     FmIns_Trumpet_1:
(1)   58/   147BF :                     		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(1)   59/   147DF :                     FmIns_Trumpet_carnival:
(1)   60/   147DF :                     		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(1)   61/   147FF :                     FmIns_brass_eur:
(1)   62/   147FF :                     		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(1)   63/   1481F :                     FmIns_Bass_Oil:
(1)   64/   1481F :                     		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(1)   65/   1483F :                     FmIns_Organ_Ito:
(1)   66/   1483F :                     		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(1)   67/   1485F :                     FmIns_Ding_Baseball:
(1)   68/   1485F :                     		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(1)   69/   1487F :                     FmIns_DrumKick_gem:
(1)   70/   1487F :                     		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(1)   71/   1489F :                     FmIns_ClosedHat:
(1)   72/   1489F :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(1)   73/   148BF :                     FmIns_PianoM1:
(1)   74/   148BF :                     		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(1)   75/   148DF :                     FmIns_Bass_1:
(1)   76/   148DF :                     		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(1)   77/   148FF :                     FmIns_Bass_2:
(1)   78/   148FF :                     		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(1)   79/   1491F :                     FmIns_Bass_donna:
(1)   80/   1491F :                     		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(1)   81/   1493F :                     FmIns_Bass_groove:
(1)   82/   1493F :                     		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(1)   83/   1495F :                     FmIns_Bass_groove_2:
(1)   84/   1495F :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(1)   85/   1497F :                     FmIns_Bass_groove_gem:
(1)   86/   1497F :                     		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(1)   87/   1499F :                     FmIns_Bass_italo:
(1)   88/   1499F :                     		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(1)   89/   149BF :                     FmIns_Bass_duck:
(1)   90/   149BF :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(1)   91/   149DF :                     FmIns_Piano_Aqua:
(1)   92/   149DF :                     		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(1)   93/   149FF :                     FmIns_Trumpet_2:
(1)   94/   149FF :                     		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(1)   95/   14A1F :                     FmIns_Trumpet_puy:
(1)   96/   14A1F :                     		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(1)   97/   14A3F :                     FmIns_Marimba:
(1)   98/   14A3F :                     		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(1)   99/   14A5F :                     FmIns_Ambient_dark:
(1)  100/   14A5F :                     		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(1)  101/   14A7F :                     FmIns_Ambient_spook:
(1)  102/   14A7F :                     		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(1)  103/   14A9F :                     FmIns_Ambient_3:
(1)  104/   14A9F :                     		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(1)  105/   14ABF :                     FmIns_Ding_toy:
(1)  106/   14ABF :                     		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(1)  107/   14ADF :                     FmIns_Brass_Puy:
(1)  108/   14ADF :                     		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(1)  109/   14AFF :                     FmIns_Flaute_cave:
(1)  110/   14AFF :                     		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(1)  111/   14B1F :                     FmIns_Banjo_puy:
(1)  112/   14B1F :                     		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(1)  113/   14B3F :                     FmIns_PSynth_plus:
(1)  114/   14B3F :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(1)  115/   14B5F :                     FmIns_Ding_1:
(1)  116/   14B5F :                     		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(1)  117/   14B7F :                     FmIns_Trombone_gem:
(1)  118/   14B7F :                     		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(1)  119/   14B9F :                     FmIns_HBeat_tom:
(1)  120/   14B9F :                     		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(1)  121/   14BBF :                     
     319/   14BBF :                     		include "sound/smpl_dac.asm"		; GEMA: DAC samples
(1)    1/   14BBF :                     ; ====================================================================
(1)    2/   14BBF :                     ; --------------------------------------------------------
(1)    3/   14BBF :                     ; GEMA/Nikona DAC instruments "digital"
(1)    4/   14BBF :                     ;
(1)    5/   14BBF :                     ; This must be located at the 68k's 900000 area.
(1)    6/   14BBF :                     ; ** 68K BANK 0 only **
(1)    7/   14BBF :                     ;
(1)    8/   14BBF :                     ; BASE Samplerate is at 16000hz
(1)    9/   14BBF :                     ; --------------------------------------------------------
(1)   10/   14BBF :                     
(1)   11/   14BBF :                     ; Special sample data macro
(1)   12/   14BBF :                     gSmpHead macro len,loop
(1)   13/   14BBF :                     	dc.b ((len)&$FF),(((len)>>8)&$FF),(((len)>>16)&$FF)	; length
(1)   14/   14BBF :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   15/   14BBF :                     	endm
(1)   16/   14BBF :                     
(1)   17/   14BBF :                     	align $8000	; <-- just to be safe.
(1)   18/   18000 :                     DacIns_wegot_crash:
(1)   19/   18000 : (MACRO)             	gSmpHead .end-.start,0
(1)   19/   18000 : C42C 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   19/   18003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/   18006 :                     .start:	binclude "sound/instr/smpl/wegot_crash.wav",$2C
(1)   21/   1ACCA :                     .end:
(1)   22/   1ACCA :                     DacIns_wegot_kick:
(1)   23/   1ACCA : (MACRO)             	gSmpHead .end-.start,0
(1)   23/   1ACCA : 7407 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   23/   1ACCD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/   1ACD0 :                     .start:	binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   25/   1B444 :                     .end:
(1)   26/   1B444 :                     DacIns_Snare_1:
(1)   27/   1B444 : (MACRO)             	gSmpHead .end-.start,0
(1)   27/   1B444 : 2411 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   27/   1B447 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/   1B44A :                     .start:	binclude "sound/instr/smpl/snare_1.wav",$2C
(1)   29/   1C56E :                     .end:
(1)   30/   1C56E :                     
(1)   31/   1C56E :                     DacIns_TESTINS:
(1)   32/   1C56E : (MACRO)             	gSmpHead .end-.start,0
(1)   32/   1C56E : 00E7 00                     dc.b ((.END-.START)&$FF),(((.END-.START)>>8)&$FF),(((.END-.START)>>16)&$FF)     ; length
(1)   32/   1C571 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/   1C574 :                     .start:	binclude "sound/instr/smpl/test.wav",$2C
(1)   34/   2AC74 :                     .end:
(1)   35/   2AC74 :                     
(1)   36/   2AC74 :                     ; TEST SAMPLE
(1)   37/   2AC74 :                     TEST_WAVE:
(1)   38/   2AC74 :                     	binclude "sound/instr/smpl/test.wav",$2C
(1)   39/   39374 :                     TEST_WAVE_E:
(1)   40/   39374 :                     	align 2
(1)   41/   39374 :                     
     323/   39374 :                     		align 2
     325/   39374 :                     
     326/   39374 :                     ; ====================================================================
     327/   39374 :                     ; ----------------------------------------------------------------
     328/   39374 :                     ; 68K DATA BANKs
     329/   39374 :                     ;
     330/   39374 :                     ; SEGA CD:
     331/   39374 :                     ; BANKS are limited to 256KB 2M or 128KB 1M/1M
     332/   39374 :                     ; ** CANNOT BE USED IF USING STAMPS **
     333/   39374 :                     ;
     334/   39374 :                     ; SEGA 32X:
     335/   39374 :                     ; BANKS are limited to 1MB, only 4 banks can be used
     336/   39374 :                     ; ----------------------------------------------------------------
     337/   39374 :                     
     338/   39374 :                     ; ---------------------------------------------
     339/   39374 :                     ;
     340/   39374 :                     ; ---------------------------------------------
     341/   39374 :                     
     345/   39374 :                     GFXDMA_WRAM:
     351/   39374 :                     
     352/   39374 :                     MDBNK0_START:
     353/   39374 :                     		include "game/data/md_bank0.asm"	; <-- 68K ONLY bank data
(1)    1/   39374 :                     ; ====================================================================
(1)    2/   39374 :                     ; ----------------------------------------------------------------
(1)    3/   39374 :                     ; BANK 0 of 68k data ($900000-$9FFFFF)
(1)    4/   39374 :                     ; for big stuff like maps, levels, etc.
(1)    5/   39374 :                     ;
(1)    6/   39374 :                     ; For graphics use DMA and place your files at
(1)    7/   39374 :                     ; md_dma.asm (Watch out for the $20000 limit.)
(1)    8/   39374 :                     ;
(1)    9/   39374 :                     ; Maximum size: $0FFFFF bytes per bank
(1)   10/   39374 :                     ; ----------------------------------------------------------------
(1)   11/   39374 :                     
(1)   12/   39374 :                     		include "game/data/m_palettes.asm"	; All 32X palettes will be here.
(2)    1/   39374 :                     ; ====================================================================
(2)    2/   39374 :                     ; ----------------------------------------------------------------
(2)    3/   39374 :                     ; Put your 32X palettes here
(2)    4/   39374 :                     ;
(2)    5/   39374 :                     ; These are located on a single 68K $900000+ bank
(2)    6/   39374 :                     ;
(2)    7/   39374 :                     ; Labels MUST be aligned by 2
(2)    8/   39374 :                     ; ----------------------------------------------------------------
(2)    9/   39374 :                     
(2)   10/   39374 :                     		align 2
(2)   11/   39374 :                     PalMars_TEST:
(2)   12/   39374 :                     		binclude "game/data/TESTS/mars_pal.bin"
(2)   13/   39574 :                     		align 2
(2)   14/   39574 :                     
(2)   15/   39574 :                     ; PalMars_MarsCity:
(2)   16/   39574 :                     ; 		binclude "game/data/maps/3D/mcity/mtrl/marscity_pal.bin"
(2)   17/   39574 :                     ; 		align 2
(2)   18/   39574 :                     ;
(2)   19/   39574 :                     ; MapPal_M:	binclude "game/data/maps/2D/level0/m_pal.bin"
(2)   20/   39574 :                     ; 		align 2
(2)   21/   39574 :                     ; TestSupSpr_Pal:
(2)   22/   39574 :                     ; 		binclude "game/data/sprites/mars/nicole/sprites_pal.bin"
(2)   23/   39574 :                     ; 		align 2
(2)   24/   39574 :                     
(1)   13/   39574 :                     
(1)   14/   39574 :                     PalMd_TEST:	binclude "game/data/TESTS/md_pal.bin"
(1)   15/   39594 :                     		align 2
(1)   16/   39594 :                     MapMd_TEST:	binclude "game/data/TESTS/md_map.bin"
(1)   17/   39EF4 :                     		align 2
(1)   18/   39EF4 :                     
(1)   19/   39EF4 :                     ; 		align 2
(1)   20/   39EF4 :                     ; Pal_level0:	binclude "game/data/maps/2D/level0/pal.bin"
(1)   21/   39EF4 :                     ; 		align 2
(1)   22/   39EF4 :                     ; Pal_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_pal.bin"
(1)   23/   39EF4 :                     ; 		align 2
(1)   24/   39EF4 :                     ; Map_Test3D:	binclude "game/data/maps/3D/md_bg/md_bg_map.bin"
(1)   25/   39EF4 :                     ; 		align 2
(1)   26/   39EF4 :                     ;
(1)   27/   39EF4 :                     ; ; ----------------------------------------------------------------
(1)   28/   39EF4 :                     ;
(1)   29/   39EF4 :                     ; 		align 2
(1)   30/   39EF4 :                     ; MapHead_0:	binclude "game/data/maps/2D/level0/head.bin"
(1)   31/   39EF4 :                     ; MapBlk_0:	binclude "game/data/maps/2D/level0/blocks.bin"
(1)   32/   39EF4 :                     ; 		align 2
(1)   33/   39EF4 :                     ; MapFgL_0:	binclude "game/data/maps/2D/level0/fg_low.bin"
(1)   34/   39EF4 :                     ; 		align 2
(1)   35/   39EF4 :                     ; MapFgH_0:	binclude "game/data/maps/2D/level0/fg_hi.bin"
(1)   36/   39EF4 :                     ; 		align 2
(1)   37/   39EF4 :                     ; MapFgC_0:	binclude "game/data/maps/2D/level0/fg_col.bin"
(1)   38/   39EF4 :                     ; 		align 2
(1)   39/   39EF4 :                     ; MapBgL_0:	binclude "game/data/maps/2D/level0/bg_low.bin"
(1)   40/   39EF4 :                     ; 		align 2
(1)   41/   39EF4 :                     ; MapBgH_0:	binclude "game/data/maps/2D/level0/bg_hi.bin"
(1)   42/   39EF4 :                     ; 		align 2
(1)   43/   39EF4 :                     ;
(1)   44/   39EF4 :                     ; ; ----------------------------------------------------------------
(1)   45/   39EF4 :                     ; ; 68k data for 32X maps go here:
(1)   46/   39EF4 :                     ; ; Headers and Collision
(1)   47/   39EF4 :                     ;
(1)   48/   39EF4 :                     ; 		align 2
(1)   49/   39EF4 :                     ; MapHead_M:	binclude "game/data/maps/2D/level0/m_head.bin"
(1)   50/   39EF4 :                     ; 		align 2
(1)   51/   39EF4 :                     ; MapCol_M:	binclude "game/data/maps/2D/level0/m_col.bin"
(1)   52/   39EF4 :                     ; 		align 2
(1)   53/   39EF4 :                     ;
(1)   54/   39EF4 :                     ; ; ----------------------------------------------------------------
(1)   55/   39EF4 :                     ;
(1)   56/   39EF4 :                     ; MapCamera_0:
(1)   57/   39EF4 :                     ; 		binclude "game/data/maps/3D/mcity/anim/mcity_anim.bin"
(1)   58/   39EF4 :                     ; 		align 4
(1)   59/   39EF4 :                     
     354/   39EF4 :                     MDBNK0_END:
     358/   39EF4 :                     ; 		org $100000-4			; Fill this bank and
     359/   39EF4 :                     ; 		dc.b "BNK0"			; add a tag at the end
     360/   39EF4 :                     
     361/   39EF4 :                     ; ---------------------------------------------
     362/   39EF4 :                     ; BANK 1
     363/   39EF4 :                     ; ---------------------------------------------
     364/   39EF4 :                     
     365/   39EF4 :                     ; 		phase $900000
     366/   39EF4 :                     ; 		include "game/data/md_bank1.asm"
     367/   39EF4 :                     ; 		dephase
     368/   39EF4 :                     ; 		org $200000-4
     369/   39EF4 :                     ; 		dc.b "BNK1"
     370/   39EF4 :                     
     371/   39EF4 :                     ; ---------------------------------------------
     372/   39EF4 :                     ; BANK 2
     373/   39EF4 :                     ; ---------------------------------------------
     374/   39EF4 :                     
     375/   39EF4 :                     ; 		phase $900000
     376/   39EF4 :                     ; 		include "game/data/md_bank2.asm"
     377/   39EF4 :                     ; 		dephase
     378/   39EF4 :                     ; 		org $300000-4
     379/   39EF4 :                     ; 		dc.b "BNK2"
     380/   39EF4 :                     
     381/   39EF4 :                     ; ---------------------------------------------
     382/   39EF4 :                     ; BANK 3
     383/   39EF4 :                     ; ---------------------------------------------
     384/   39EF4 :                     
     385/   39EF4 :                     ; 		phase $900000
     386/   39EF4 :                     ; 		include "game/data/md_bank3.asm"
     387/   39EF4 :                     ; 		dephase
     388/   39EF4 :                     ; 		org $400000-4
     389/   39EF4 :                     ; 		dc.b "BNK3"
     390/   39EF4 :                     
     391/   39EF4 :                     ; ====================================================================
     392/   39EF4 :                     ; ----------------------------------------------------------------
     393/   39EF4 :                     ; MD DMA data: Requires RV bit set to 1, BANK-free
     394/   39EF4 :                     ; ----------------------------------------------------------------
     395/   39EF4 :                     
     396/   39EF4 :                     ; 	if MARS|MCD|MARSCD=0
     397/   39EF4 :                     ; 		dephase
     398/   39EF4 :                     ; 		align $8000
     399/   39EF4 :                     ; 	endif
     400/   39EF4 :                     		include "game/data/md_dma.asm"
(1)    1/   39EF4 :                     ; ====================================================================
(1)    2/   39EF4 :                     ; ----------------------------------------------------------------
(1)    3/   39EF4 :                     ; DMA ROM-DATA Transfer section
(1)    4/   39EF4 :                     ; 
(1)    5/   39EF4 :                     ; RV bit must be enabled to read from here
(1)    6/   39EF4 :                     ; ----------------------------------------------------------------
(1)    7/   39EF4 :                     
(1)    8/   39EF4 :                     		align $8000
(1)    9/   40000 :                     ASCII_FONT:	binclude "system/md/data/font.bin"
(1)   10/   41000 :                     ASCII_FONT_e:
(1)   11/   41000 :                     
(1)   12/   41000 :                     ArtMd_TEST:	binclude "game/data/TESTS/md_art.bin"
(1)   13/   49F00 :                     ArtMd_TEST_e:
(1)   14/   49F00 :                     		align 2
(1)   15/   49F00 :                     
(1)   16/   49F00 :                     
(1)   17/   49F00 :                     
(1)   18/   49F00 :                     
(1)   19/   49F00 :                     
     401/   49F00 :                     		align $800
     405/   4A000 :                     GFXDMA_WRAM_e:
     406/   4A000 :                     
     413/   4A000 :                     
     414/   4A000 :                     ; ====================================================================
     415/   4A000 :                     ; ----------------------------------------------------------------
     416/   4A000 :                     ; 32X ONLY:
     417/   4A000 :                     ;
     418/   4A000 :                     ; SH2 code and ROM data
     419/   4A000 :                     ; ----------------------------------------------------------------
     420/   4A000 :                     
     426/   4A000 :                     MARS_RAMDATA:
     436/   4A000 :                     MARS_RAMDATA_E:
     437/   4A000 :                     		align 4
     438/   4A000 :                     
     439/   4A000 :                     ; ====================================================================
     440/   4A000 :                     ; --------------------------------------------------------
     441/   4A000 :                     ; SH2's ROM-only stuff
     442/   4A000 :                     ; This section will be gone if RV bit is set to 1
     443/   4A000 :                     ; --------------------------------------------------------
     444/   4A000 :                     
     452/   4A000 :                     
     453/   4A000 :                     ; ====================================================================
     454/   4A000 :                     ; ---------------------------------------------
     455/   4A000 :                     ; End
     456/   4A000 :                     ; ---------------------------------------------
     457/   4A000 :                     
     458/   4A000 :                     ROM_END:
     462/   4A000 :                     		align $8000		; Pad the Cartridge
     464/   50000 :                     
 AS V1.42 Beta [Bld 118] - source file main.asm - page 2 - 7/20/2023 19:28:40


  symbol table (* = unused):
  ------------------------

*ADAPTER :                        0 - | *ADEN :                           2 - |
 ALV :                           24 - |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 ARTMD_TEST :                 41000 C |  ARTMD_TEST_E :               49F00 C |
 ASCII_FONT :                 40000 C |  ASCII_FONT_E :               41000 C |
 ASCII_PAL :                    3C8 C | *ASCII_PAL_E :                  3E8 C |
 ATK :                            8 - | *AT_D :                           2 - |
*AT_L :                           1 - | *AT_R :                           0 - |
*AT_U :                           3 - | *BIGENDIAN :                      0 - |
*BITBGON :                        7 - | *BITCLICKL :                      1 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      0 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITDRWD :                        2 - | *BITDRWL :                        1 - |
*BITDRWR :                        0 - | *BITDRWU :                        3 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYRIGHT :                    3 - |
*BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
*BITMARSBG :                      6 - | *BITOBJ_AIR :                     0 - |
*BITOBJ_FLIPH :                   0 - | *BITOBJ_FLIPV :                   1 - |
*BITOBJ_MARS :                    7 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CART :                           1 - |
*CASESENSITIVE :                  0 - |  CHIP_ENV :                     F49 C |
 CHIP_ENV.ATKEND :              FCC C | *CHIP_ENV.ATKZERO :             FCF C |
 CHIP_ENV.CHK2 :                FD5 C |  CHIP_ENV.CHK4 :               100A C |
 CHIP_ENV.CKOF :                F6D C |  CHIP_ENV.CKON :                F80 C |
*CHIP_ENV.DECTMR :              FD9 C |  CHIP_ENV.DKADD :               FF3 C |
 CHIP_ENV.DKSAV :               FFB C |  CHIP_ENV.DKYEND :             1000 C |
 CHIP_ENV.DO_NFREQ :           105F C |  CHIP_ENV.ENVPROC :             F9E C |
 CHIP_ENV.KILLENV :            1020 C | *CHIP_ENV.NBLOCK :              F9E C |
 CHIP_ENV.NORMAL :             105A C |  CHIP_ENV.NOUPD :              10A0 C |
 CHIP_ENV.NSKIP :               F95 C |  CHIP_ENV.SILNC_3 :            1056 C |
 CHIP_ENV.VEDLP :              1028 C |  CHIP_ENV.VLMUCH :             108C C |
 CHIP_ENV.VLOOP :               F55 C |  CHIP_ENV.VONLY :              1082 C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - |  COMM0 :                         20 - |
*COMM1 :                         21 - |  COMM10 :                        2A - |
*COMM11 :                        2B - |  COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - |  COMM2 :                         22 - |
*COMM3 :                         23 - |  COMM4 :                         24 - |
*COMM5 :                         25 - |  COMM6 :                         26 - |
*COMM7 :                         27 - |  COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                   171C C |  COMMZROMBLK :                   81 C |
 COMMZWRITE :                    80 C | *CONSTPI :        3.141592653589793 - |
*CONTROLLER_1 :    FFFFFFFFFFFFA000 - | *CONTROLLER_2 :    FFFFFFFFFFFFA010 - |
*CS0 :                            0 - | *CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
*CSCRN0_E :                    1232 C | *CSCRN0_S :                    1012 C |
 CURRTICKBITS :                  2E C | *CYCLE :                         32 - |
 DACINS_SNARE_1 :             1B444 C |  DACINS_SNARE_1.END :         1C56E C |
 DACINS_SNARE_1.START :       1B44A C | *DACINS_TESTINS :             1C56E C |
 DACINS_TESTINS.END :         2AC74 C |  DACINS_TESTINS.START :       1C574 C |
 DACINS_WEGOT_CRASH :         18000 C |  DACINS_WEGOT_CRASH.END :     1ACCA C |
 DACINS_WEGOT_CRASH.START :   18006 C |  DACINS_WEGOT_KICK :          1ACCA C |
 DACINS_WEGOT_KICK.END :      1B444 C |  DACINS_WEGOT_KICK.START :    1ACD0 C |
 DAC_FILL :                      20 C |  DAC_FIRSTFILL :               1129 C |
 DAC_ME :                         8 C |  DAC_OFF :                     10E0 C |
 DAC_ON :                      10CB C |  DAC_PLAY :                    10F5 C |
 DAC_REFILL :                  1129 C |  DAC_REFILL.DACFILL_END :      11E8 C |
 DAC_REFILL.DACFILL_LOOP :     11A1 C |  DAC_REFILL.DACFILL_RET :      11EB C |
 DAC_REFILL.DAC_OVER :         1177 C | *DATE :                   7/20/2023 - |
 DDACCNTR :                      33 C |  DDACFIFOMID :                   2F C |
 DDACPNTR :                      30 C | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DOTTEDSTRUCTS :                  0 - | *DREQCTL :                        6 - |
*DREQDEST :                       C - | *DREQFIFO :                      12 - |
*DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
*DREQ_PALETTE :                   0 C |  DRV_LOOP :                      87 C |
 DRV_LOOP.CMND_0 :              12F C |  DRV_LOOP.CMND_1 :              132 C |
 DRV_LOOP.CMND_2 :              14F C |  DRV_LOOP.CMND_8 :              16C C |
 DRV_LOOP.CMND_C :              18E C |  DRV_LOOP.FOUND :               1CC C |
 DRV_LOOP.GETCBYTEL :            F2 C |  DRV_LOOP.GRAB_ARG :             F0 C |
 DRV_LOOP.LIST :                10F C |  DRV_LOOP.NEITHER :              C7 C |
 DRV_LOOP.NEXT :                1A6 C |  DRV_LOOP.NEXT_CMD :             CD C |
 DRV_LOOP.NEXT_SALL :           170 C |  DRV_LOOP.NOBEATS :              AE C |
 DRV_LOOP.NOTICKS :              A1 C |  DRV_LOOP.NOT_FND :             1C7 C |
 DRV_LOOP.NOT_ON :              186 C |  DRV_LOOP.SRCH_FRID :           19F C |
 DTBL_FROMMUL :                 6E7 C |  DTBL_FROMMUL.CHNL_ULNK :       DB7 C |
 DTBL_FROMMUL.CHNL_ULNKCUT :    DC6 C |  DTBL_FROMMUL.CHNL_ULNKOFF :    DB5 C |
 DTBL_FROMMUL.DAC_CUT :         945 C |  DTBL_FROMMUL.DAC_INS :         BC9 C |
 DTBL_FROMMUL.DAC_OFF :         94B C |  DTBL_FROMMUL.DAC_PITCH :       94E C |
 DTBL_FROMMUL.D_CONT :          AB2 C |  DTBL_FROMMUL.EFFC :            A1F C |
 DTBL_FROMMUL.EFFC_D :          A3A C |  DTBL_FROMMUL.EFFC_E :          A7D C |
 DTBL_FROMMUL.EFFC_F :          A92 C |  DTBL_FROMMUL.EFFC_X :          AB3 C |
 DTBL_FROMMUL.FINE_DOWN :       A55 C |  DTBL_FROMMUL.FINE_UP :         A69 C |
 DTBL_FROMMUL.FMSPC_SET :       884 C |  DTBL_FROMMUL.FM_CINDX :        D79 C |
 DTBL_FROMMUL.FM_CUT :          915 C |  DTBL_FROMMUL.FM_HASVOL :       C6D C |
 DTBL_FROMMUL.FM_INS :          B48 C |  DTBL_FROMMUL.FM_KEYOFF :       CD1 C |
 DTBL_FROMMUL.FM_OFF :          90F C |  DTBL_FROMMUL.FM_PANLIST :      ADC C |
 DTBL_FROMMUL.FM_SETFREQ :      CF0 C |  DTBL_FROMMUL.FM_SETRLIST :     BB9 C |
 DTBL_FROMMUL.FM_TLOFF :        CD9 C |  DTBL_FROMMUL.FM_WRTALPAN :     D81 C |
 DTBL_FROMMUL.FM_WRTLVOL :      D07 C |  DTBL_FROMMUL.FND_OCT :         CBE C |
 DTBL_FROMMUL.FROM_PSGN :       7C9 C |  DTBL_FROMMUL.GET_OCT :         CAE C |
 DTBL_FROMMUL.INST :            AED C | *DTBL_FROMMUL.INVL_INS :        B0B C |
 DTBL_FROMMUL.KYCUT_PSG :       81B C |  DTBL_FROMMUL.KYCUT_PSGN :      816 C |
 DTBL_FROMMUL.KYOFF_PSG :       80B C |  DTBL_FROMMUL.KYOFF_PSGN :      806 C |
 DTBL_FROMMUL.LINKED :          744 C |  DTBL_FROMMUL.MK_DAC :          91E C |
 DTBL_FROMMUL.MK_FM :           826 C |  DTBL_FROMMUL.MK_FMSPC :        898 C |
 DTBL_FROMMUL.MK_LIST :         782 C |  DTBL_FROMMUL.MK_PSG :          7B0 C |
 DTBL_FROMMUL.MK_PSGN :         792 C |  DTBL_FROMMUL.MK_PWM :          974 C |
 DTBL_FROMMUL.NEW_ROMDAT :      B7C C |  DTBL_FROMMUL.NOFM_NOTE :       85B C |
 DTBL_FROMMUL.NORM_DOWN :       A53 C |  DTBL_FROMMUL.NORM_UP :         A6B C |
 DTBL_FROMMUL.NOTE :            C63 C |  DTBL_FROMMUL.NOT_DAC :         858 C |
 DTBL_FROMMUL.NOT_DSPC :        84F C |  DTBL_FROMMUL.NO_LFO :          DB4 C |
 DTBL_FROMMUL.N_FM :            CA4 C |  DTBL_FROMMUL.N_INDX :          C90 C |
 DTBL_FROMMUL.N_PSGN :          C9F C |  DTBL_FROMMUL.N_STFREQ :        C91 C |
 DTBL_FROMMUL.PN_INS :          B0C C |  DTBL_FROMMUL.PSG_KEYON :       7F0 C |
 DTBL_FROMMUL.PS_INS :          B12 C |  DTBL_FROMMUL.PWM_CUT :         A10 C |
 DTBL_FROMMUL.PWM_INS :         C20 C |  DTBL_FROMMUL.PWM_OFF :         A01 C |
 DTBL_FROMMUL.PWV_MUCH :        9FD C |  DTBL_FROMMUL.PW_EFFC :         99E C |
 DTBL_FROMMUL.PW_NOTE :         9A5 C |  DTBL_FROMMUL.PW_SEND :         9AA C |
 DTBL_FROMMUL.PW_SETUP :        9CE C |  DTBL_FROMMUL.RCYL_COM :        738 C |
 DTBL_FROMMUL.RES_PAN :         AD2 C |  DTBL_FROMMUL.SAME_PATCH :      BB4 C |
 DTBL_FROMMUL.SAVE_ARG :        AA7 C |  DTBL_FROMMUL.SILN_DAC :        725 C |
 DTBL_FROMMUL.SILN_FM :         728 C |  DTBL_FROMMUL.SILN_PSG :        71E C |
 DTBL_FROMMUL.SILN_PSG_N :      71A C |  DTBL_FROMMUL.SILN_PWM :        72E C |
 DTBL_FROMMUL.TL_DOWN :         CE3 C |  DTBL_FROMMUL.VMUCH :           7FC C |
 DTBL_FROMMUL.VOLU :            AE4 C |  DTBL_FROMMUL.VOL_DVLD :        A79 C |
 DTBL_FROMMUL.WRITE_TL :        D6C C |  DTBL_MULTI :                   6D0 C |
 DTBL_SINGL :                   6E6 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EXTR_3 :                         A C | *EXTR_4 :                         C C |
*EXTR_5 :                         E C |  EX_COMM :                      DD9 C |
*FALSE :                          0 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
*FM :                            80 - |  FMCACH_1 :                    1553 C |
 FMCACH_2 :                    157B C |  FMCACH_3 :                    15A3 C |
 FMCACH_4 :                    15CB C |  FMCACH_5 :                    15F3 C |
 FMCACH_6 :                    161B C |  FMCACH_LIST :                 13E9 C |
 FMFREQ_LIST :                 11EF C | *FMINS_AMBIENT_3 :            14A9F C |
*FMINS_AMBIENT_DARK :         14A5F C | *FMINS_AMBIENT_SPOOK :        14A7F C |
*FMINS_BANJO_PUY :            14B1F C | *FMINS_BASS_1 :               148DF C |
*FMINS_BASS_2 :               148FF C |  FMINS_BASS_4 :               1471F C |
 FMINS_BASS_8 :               1473F C |  FMINS_BASS_CALM :            1479F C |
 FMINS_BASS_CLUB :            1477F C | *FMINS_BASS_DONNA :           1491F C |
 FMINS_BASS_DUCK :            149BF C | *FMINS_BASS_GROOVE :          1493F C |
 FMINS_BASS_GROOVE_2 :        1495F C | *FMINS_BASS_GROOVE_GEM :      1497F C |
*FMINS_BASS_ITALO :           1499F C | *FMINS_BASS_OIL :             1481F C |
 FMINS_BRASS_EUR :            147FF C | *FMINS_BRASS_PUY :            14ADF C |
 FMINS_CLOSEDHAT :            1489F C | *FMINS_DING_1 :               14B5F C |
 FMINS_DING_BASEBALL :        1485F C | *FMINS_DING_TOY :             14ABF C |
*FMINS_DRUMKICK_GEM :         1487F C | *FMINS_FLAUTE_CAVE :          14AFF C |
 FMINS_HBEAT_TOM :            14B9F C |  FMINS_MARIMBA :              14A3F C |
*FMINS_ORGAN_ITO :            1483F C |  FMINS_PIANOM1 :              148BF C |
*FMINS_PIANO_AQUA :           149DF C | *FMINS_PSYNTH_PLUS :          14B3F C |
 FMINS_SP_CLOSEDHAT :         146CF C | *FMINS_SP_COWBELL :           146F7 C |
 FMINS_SP_OPENHAT :           146A7 C |  FMINS_SYNTH_PLUS :           1475F C |
*FMINS_TROMBONE_GEM :         14B7F C |  FMINS_TRUMPET_1 :            147BF C |
 FMINS_TRUMPET_2 :            149FF C |  FMINS_TRUMPET_CARNIVAL :     147DF C |
*FMINS_TRUMPET_PUY :          14A1F C |  FMSPECIAL :                   1707 C |
 FM_AUTOREG :                  10AC C |  FM_SEND_1 :                   10B5 C |
 FM_SEND_2 :                   10C0 C | *FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :                 2FC C |  GEMADMAPAUSEROM :              300 C |
 GEMADMARESUME :                2FE C |  GEMADMARESUMEROM :             302 C |
*GEMAPLAYFROMBLK :              324 C | *GEMAPLAYTRACK :                310 C |
*GEMASETBEATS :                 34C C |  GEMASTOPALL :                  34A C |
*GEMASTOPTRACK :                338 C | *GEMATEST :                     306 C |
 GEMATRK_BODYOVER :           12434 C |  GEMATRK_BODYOVER.BLK :       12440 C |
 GEMATRK_BODYOVER.INS :       12C4E C |  GEMATRK_BODYOVER.PAT :       12456 C |
 GEMATRK_MOVEME :             12C96 C |  GEMATRK_MOVEME.BLK :         12CA2 C |
 GEMATRK_MOVEME.INS :         13B30 C |  GEMATRK_MOVEME.PAT :         12CBA C |
 GEMATRK_TEST_0 :             145AC C |  GEMATRK_TEST_0.BLK :         145B8 C |
 GEMATRK_TEST_0.INS :         1467F C |  GEMATRK_TEST_0.PAT :         145BB C |
 GEMATRK_TEST_1 :              9CFC C |  GEMATRK_TEST_1.BLK :          9D08 C |
 GEMATRK_TEST_1.INS :          D166 C | *GEMATRK_TEST_1.INS_E :        D1D6 C |
 GEMATRK_TEST_1.PAT :          9D17 C |  GEMATRK_TEST_2 :              8080 C |
 GEMATRK_TEST_2.BLK :          808C C |  GEMATRK_TEST_2.INS :          9CC4 C |
 GEMATRK_TEST_2.PAT :          80A2 C |  GEMATRK_TEST_3 :              D1D6 C |
 GEMATRK_TEST_3.BLK :          D1E2 C |  GEMATRK_TEST_3.INS :          EA80 C |
 GEMATRK_TEST_3.PAT :          D1F0 C |  GEMATRK_TEST_4 :              EAA0 C |
 GEMATRK_TEST_4.BLK :          EAAC C |  GEMATRK_TEST_4.INS :          FFA4 C |
 GEMATRK_TEST_4.PAT :          EABE C |  GEMATRK_TEST_5 :              FFBC C |
 GEMATRK_TEST_5.BLK :          FFC8 C |  GEMATRK_TEST_5.INS :         107F8 C |
 GEMATRK_TEST_5.PAT :          FFD0 C |  GEMATRK_TEST_6 :             10808 C |
 GEMATRK_TEST_6.BLK :         10814 C |  GEMATRK_TEST_6.INS :         123B4 C |
 GEMATRK_TEST_6.PAT :         1081C C |  GEMATRK_XTRIM :              13BC8 C |
 GEMATRK_XTRIM.BLK :          13BD4 C |  GEMATRK_XTRIM.INS :          14584 C |
 GEMATRK_XTRIM.PAT :          13BDA C |  GEMA_INIT :                    DDC C |
 GEMA_INIT.END_SETUP :          E82 C |  GEMA_INIT.SETUP_LIST :         E37 C |
 GEMA_INIT.ST_COPY :            E56 C |  GEMA_MASTERLIST :             8000 C |
 GET_ROMTRCKS :                 4D1 C |  GET_TICK :                     E87 C |
 GET_TICK.CTNOTICK :            EA4 C | *GFXDMA_WRAM :                39374 C |
*GFXDMA_WRAM_E :              4A000 C |  GLBL_LASTORG :                1012 - |
 GLBL_LASTPC :                 1012 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
*HCOUNT :                         5 - |  HEADEROUT :                   1708 C |
 HEADEROUT_E :                 1714 C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :                 FEA C |
*HIRQ_ON :                        4 - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - |  INIT_ROMTRCKS :                4D9 C |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      1 - |
*INTMASK :                        1 - | *JOYA :                          40 - |
*JOYB :                          10 - | *JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYRIGHT :                       8 - |
*JOYSTART :                      80 - | *JOYUP :                          1 - |
*JOYX :                         400 - | *JOYY :                         200 - |
*JOYZ :                         100 - | *LCHWIDTH :                      34 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LIST_VDPREGS :                 3B4 C | *MACEXP :                         7 - |
 MAPMD_TEST :                 39594 C |  MARS :                           0 - |
 MARSBLOCK :                     82 C |  MARSCD :                         0 - |
 MARSUPD :                       3F C | *MARS_RAMDATA :               4A000 C |
*MARS_RAMDATA_E :             4A000 C |  MAX_BLOCKS :                    18 - |
 MAX_HEADS :                      F - |  MAX_INS :                        F - |
 MAX_MDDMATSK :                  10 - |  MAX_MDGLOBAL :                 800 - |
 MAX_MDOBJ :                     10 - |  MAX_MDOTHER :                 2000 - |
 MAX_MDSYSTEM :                 500 - |  MAX_MDVIDEO :                 2000 - |
 MAX_RCACH :                     40 - |  MAX_SCRNBUFF :                2800 - |
 MAX_SYSCODE :                 1800 - |  MAX_TBLSIZE :                   10 - |
 MAX_TRFRPZ :                     8 - |  MAX_TRKCHN :                    11 - |
 MAX_USERCODE :                3000 - |  MCD :                            0 - |
 MCD_COMM_M :                     E - |  MCD_COMM_S :                     F - |
 MCD_DCOMM_M :                   10 - |  MCD_DCOMM_S :                   20 - |
*MCD_HINT :                       6 - | *MCD_MEMORY :                     3 - |
*MDBNK0_END :                 39EF4 C | *MDBNK0_START :               39374 C |
 MDSYS_SINEDATA :               E3A C |  MD_BANK_SRAM :              A130F1 - |
*MD_BG_BH :                       1 C | *MD_BG_BLK :                     28 C |
*MD_BG_BLKW :                     2 C | *MD_BG_BW :                       0 C |
*MD_BG_COL :                     2C C | *MD_BG_FLAGS :                    3 C |
*MD_BG_H :                        A C | *MD_BG_HF :                       E C |
*MD_BG_HI :                      24 C | *MD_BG_LOW :                     20 C |
*MD_BG_MOVEX :                    6 C | *MD_BG_MOVEY :                    7 C |
*MD_BG_VPOS :                    1C C | *MD_BG_VRAM :                    1E C |
*MD_BG_W :                        8 C | *MD_BG_WF :                       C C |
*MD_BG_X :                       30 C | *MD_BG_XINC_L :                  10 C |
*MD_BG_XINC_R :                  12 C | *MD_BG_XSET :                     4 C |
*MD_BG_X_OLD :                   18 C | *MD_BG_Y :                       34 C |
*MD_BG_YINC_D :                  16 C | *MD_BG_YINC_U :                  14 C |
*MD_BG_YSET :                     5 C | *MD_BG_Y_OLD :                   1A C |
*MD_JUMPCODE :                  FEC C | *MD_JUMPCODE_E :               1012 C |
 MD_READMODES :                 FEC C |  MD_READMODES.PICK_BOOT :      1002 C |
 MD_SCREEN00 :                 1012 C | *MD_SCREEN00_E :               1232 C |
*MD_SYSCODE :                   264 C | *MD_SYSCODE_E :                 FEC C |
 MODE :                          18 - | *MODE_FADEOUT :                 FA2 C |
 MODE_FADEOUT.LOOPW :           FC6 C |  MODE_INIT :                    F84 C |
 MODE_INIT.CLR :                F94 C |  MOMCPU :                     68000 - |
*MOMCPUNAME :                 68000 - | *MONOWIDTH :                     38 - |
 MOUSE_X :                        6 C |  MOUSE_Y :                        8 C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             13F7 C |
 NIKONA_SETMSTRLIST :          1429 C | *OBJ_ANIM_ID :                   1C C |
*OBJ_ANIM_INDX :                 1A C | *OBJ_ANIM_SPD :                  20 C |
*OBJ_CODE :                       0 C | *OBJ_FRAME :                     1E C |
*OBJ_INDEX :                     21 C | *OBJ_MAP :                       10 C |
*OBJ_RAM :                       26 C | *OBJ_SET :                       23 C |
*OBJ_SIZE :                       4 C | *OBJ_SPWNID :                    25 C |
*OBJ_STATUS :                    24 C | *OBJ_SUBID :                     22 C |
*OBJ_VRAM :                      14 C | *OBJ_X :                          8 C |
*OBJ_X_SPD :                     16 C | *OBJ_Y :                          C C |
*OBJ_Y_SPD :                     18 C |  ON_HOLD :                        2 C |
 ON_PRESS :                       4 C | *PACKING :                        0 - |
*PADDING :                        0 - | *PADDINGSOFAR :                   0 - |
 PAD_ID :                         0 C |  PAD_VER :                        1 C |
*PALMARS_TEST :               39374 C |  PALMD_TEST :                 39574 C |
 PARP :                          34 - | *PEN :                           20 - |
 PICO :                           1 - |  PICO_ENTRY :                   204 C |
 PICO_ENTRY.LOOP_RAM :          22C C |  PICO_ENTRY.WAIT_DMA :          240 C |
 PICO_ERRADDR :                 200 C |  PICO_ERRBUS :                  200 C |
 PICO_ERRCHK :                  200 C |  PICO_ERRILL :                  200 C |
 PICO_ERROR :                   200 C |  PICO_ERROREX :                 200 C |
 PICO_ERRPRIVL :                200 C |  PICO_ERRTRAPV :                200 C |
 PICO_ERRZDIV :                 200 C |  PICO_LINE1010 :                200 C |
 PICO_LINE1111 :                200 C |  PICO_PCMINT :                  202 C |
 PICO_TRACE :                   200 C |  PICO_UNKINT :                  202 C |
 PICO_USERINT :                 202 C |  PROC_CHIPS :                   523 C |
 PSGCOM :                      167B C |  PSGFREQ_LIST :                1207 C |
 PSGHATMODE :                  1706 C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PVOL :                          30 - |
*PWCOM :                          0 - | *PWINSH :                        20 - |
*PWINSL :                        30 - | *PWINSM :                        28 - |
 PWMCOM :                      1643 C | *PWMCTL :                        31 - |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 PWOUTF :                        18 - | *PWPHL :                         10 - |
*PWPTH_V :                        8 - | *RAM_BGBUFFER :    FFFFFFFFFFFF8660 C |
*RAM_DMACODE :     FFFFFFFFFFFFA240 C |
 RAM_FADEMARSDELAY :                                       FFFFFFFFFFFF99AA C |
 RAM_FADEMARSINCR :                                        FFFFFFFFFFFF99A8 C |
 RAM_FADEMARSREQ : FFFFFFFFFFFF99A6 C | *RAM_FADEMARSTMR : FFFFFFFFFFFF99AC C |
 RAM_FADEMDDELAY : FFFFFFFFFFFF99A2 C |  RAM_FADEMDINCR :  FFFFFFFFFFFF99A0 C |
 RAM_FADEMDREQ :   FFFFFFFFFFFF999E C |  RAM_FADEMDTMR :   FFFFFFFFFFFF99A4 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFF8740 C |  RAM_GLBL_SCRN :   FFFFFFFFFFFFC500 C |
 RAM_HORSCROLL :   FFFFFFFFFFFF8744 C | *RAM_INITFLUG :    FFFFFFFFFFFFA448 C |
 RAM_INPUTDATA :   FFFFFFFFFFFFA000 C | *RAM_MAPX :        FFFFFFFFFFFFCD00 C |
*RAM_MAPY :        FFFFFFFFFFFFCD02 C | *RAM_MAPY.FADE_IN :            10F4 C |
*RAM_MAPY.FADE_OUT :           111A C |  RAM_MAPY.LOOP :               10D4 C |
 RAM_MAPY.LOOP2 :              113E C | *RAM_MDDREQ :      FFFFFFFFFFFFA500 - |
 RAM_MDGLOBAL :    FFFFFFFFFFFFC500 C |  RAM_MDMARSHINT :  FFFFFFFFFFFFA452 C |
 RAM_MDMARSPALFD : FFFFFFFFFFFF9534 C |  RAM_MDMARSVINT :  FFFFFFFFFFFFA44C C |
 RAM_MDOTHER :     FFFFFFFFFFFFA500 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFA000 C |
*RAM_MDVBLKWAIT :  FFFFFFFFFFFFA458 C |  RAM_MDVIDEO :     FFFFFFFFFFFF8000 C |
 RAM_MEGACD :              FFFFFD00 - | *RAM_OBJDISPLIST : FFFFFFFFFFFF8B54 C |
*RAM_OBJECTS :     FFFFFFFFFFFF8000 C |  RAM_PALETTE :     FFFFFFFFFFFF9434 C |
 RAM_PALETTEFD :   FFFFFFFFFFFF94B4 C | *RAM_SAVEDATA :    FFFFFFFFFFFFA040 C |
 RAM_SCREENBUFF :  FFFFFFFFFFFFCD00 C | *RAM_SCREENJUMP :          FFFFFE00 - |
*RAM_SPRDRWCNTR :  FFFFFFFFFFFF9994 C | *RAM_SPRDRWPZ :    FFFFFFFFFFFF8B74 C |
 RAM_SPRITES :     FFFFFFFFFFFF8FD4 C | *RAM_SPRSHOWINDX : FFFFFFFFFFFF9996 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDSEED : FFFFFFFFFFFFA444 C |
*RAM_SYSRANDVAL :  FFFFFFFFFFFFA440 C | *RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
*RAM_USERCODE :    FFFFFFFFFFFF1800 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFF9998 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFF9734 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFF999A C |
 RAM_VDPREGS :     FFFFFFFFFFFF99AE C |  RAM_VERSCROLL :   FFFFFFFFFFFF8B04 C |
 RAM_VIDPRNTLIST : FFFFFFFFFFFF9814 C |  RAM_VIDPRNTVRAM : FFFFFFFFFFFF999C C |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
 ROM_END :                    4A000 C |  RRT :                           14 - |
 SAMPLEHEAD :                  1716 C |  SBEATACC :                      1C C |
 SBEATPTCK :                     1E C |  SET_CHIPS :                    4FE C |
 SET_CHIPS.TRK_BUFFRS :         506 C | *SHIFT :                          2 - |
 SHOWROM :                      EA8 C | *SIZEOF_DREQ :                  200 C |
 SIZEOF_INPUT :                  10 C |  SIZEOF_MDBG :                   38 C |
*SIZEOF_MDGLBL :   FFFFFFFFFFFFC502 C |  SIZEOF_MDOBJ :                  66 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFF500 C | *SIZEOF_MDSYS :    FFFFFFFFFFFFA45A C |
 SIZEOF_MDVID :    FFFFFFFFFFFF99C6 C |  SLV :                           10 - |
*SNDLOCKZ80 :                   26A C |  SNDLOCKZ80.WAIT :              272 C |
*SNDREQCMD :                    304 C |  SNDREQ_ENTER :                 288 C |
 SNDREQ_ENTER.WAIT :            2AE C |  SNDREQ_EXIT :                  2BE C |
*SNDREQ_SADDR :                 2E6 C |  SNDREQ_SBYTE :                 2EE C |
 SNDREQ_SCMD :                  2D4 C | *SNDREQ_SLONG :                 2E2 C |
 SNDREQ_SWORD :                 2EA C | *SNDUNLOCKZ80 :                 27E C |
 SOUND_INIT :                   264 C | *STANDBY :                        3 - |
 STR_STATS :                   114A C |  STR_STATS2 :                  1156 C |
*SYSMARS_ID :                A130EC - |  SYSMARS_REG :               A15100 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSTEM_DMAENTER_RAM :          C12 C |  SYSTEM_DMAENTER_ROM :          C1A C |
 SYSTEM_DMAEXIT_RAM :           C16 C |  SYSTEM_DMAEXIT_ROM :           C1E C |
*SYSTEM_GRABRAMCODE :           C24 C |  SYSTEM_INIT :                  B24 C |
 SYSTEM_INIT.CLRINPUT :         B50 C |  SYSTEM_INPUT :                 C26 C |
 SYSTEM_INPUT.EXIT :            C54 C |  SYSTEM_INPUT.ID_03 :           C7A C |
 SYSTEM_INPUT.ID_0D :           D24 C |  SYSTEM_INPUT.INVALID :         D1E C |
 SYSTEM_INPUT.LIST :            C5A C |  SYSTEM_INPUT.OLDPAD :          D9C C |
 SYSTEM_INPUT.PICK_ID :         DA2 C |  SYSTEM_INPUT.READ :            DB8 C |
 SYSTEM_INPUT.STEP_1 :          DC4 C |  SYSTEM_INPUT.STEP_2 :          DD0 C |
 SYSTEM_INPUT.THIS_ONE :        C3A C | *SYSTEM_INPUT.WAIT :            C26 C |
 SYSTEM_INPUT.X_NEG :           CEC C |  SYSTEM_INPUT.Y_NEG :           D18 C |
 SYSTEM_MARSUPDATE :            C22 C | *SYSTEM_RANDOM :                DD2 C |
 SYSTEM_RANDOM.GOOD_S :         DE0 C |  SYSTEM_SETINTS :               F3A C |
 SYSTEM_SETINTS.NOHINT :        F5A C |  SYSTEM_SETINTS.NOVINT :        F4A C |
*SYSTEM_SINEWAVE :              E1C C |  SYSTEM_SINEWAVE.DONT_NEG :     E38 C |
*SYSTEM_SINEWAVE_COS :          DFC C |  SYSTEM_SINEWAVE_COS.DONT_NEG : E16 C |
*SYSTEM_SRAMINIT :              F5C C |  SYSTEM_SRAMINIT.INITSAVE :     F70 C |
 SYSTEM_WAITFRAME :             B5A C |  SYSTEM_WAITFRAME.WAIT_IN :     B72 C |
 SYSTEM_WAITFRAME.WAIT_LAG :    B60 C | *SYS_CTRL_1 :                A10009 - |
*SYS_CTRL_2 :                A1000B - | *SYS_CTRL_3 :                A1000D - |
 SYS_DATA_1 :                A10003 - | *SYS_DATA_2 :                A10005 - |
*SYS_DATA_3 :                A10007 - | *SYS_EXRAM :                 200000 - |
*SYS_IO :                    A10001 - | *SYS_TMSS :                  A14000 - |
 TBLBUFF_READ :                 543 C |  TBLBUFF_READ.CHK_PSG :         607 C |
 TBLBUFF_READ.CLRFULL :         6C6 C |  TBLBUFF_READ.DO_CHIP :         579 C |
 TBLBUFF_READ.DO_NEWCHIP :      632 C |  TBLBUFF_READ.GRAB_LINK :       5AF C |
 TBLBUFF_READ.INVLDL :          5F0 C |  TBLBUFF_READ.L_HIPRIO :        67B C |
 TBLBUFF_READ.NEW_CHIP :        633 C |  TBLBUFF_READ.NEW_LINK :        678 C |
 TBLBUFF_READ.NEW_LINK_O :      678 C |  TBLBUFF_READ.NEW_LINK_Z :      674 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    66A C |  TBLBUFF_READ.NEXT_CHNL :       566 C |
 TBLBUFF_READ.NEXT_PRIO :       655 C |  TBLBUFF_READ.PASS_2 :          653 C |
 TBLBUFF_READ.PICK_TBL :        69E C |  TBLBUFF_READ.REFILL :          62F C |
 TBLBUFF_READ.REROLL :          5F9 C |  TBLBUFF_READ.RESET_LINK :      6B8 C |
 TBLBUFF_READ.RNOT_PSG :        62D C |  TBLBUFF_READ.SET_ASFULL :      69B C |
 TBLBUFF_READ.SINGL_FREE :      689 C |  TBLBUFF_READ.SINGL_LINK :      61F C |
*TBLBUFF_READ.SNGL_SPRIO :      69A C |  TBLBUFF_READ.SRCH_FREE :       642 C |
 TBLBUFF_READ.SRCH_LINK :       5D6 C |  TBLBUFF_READ.SRCH_LLOOP :      5E0 C |
 TBLBUFF_READ.TRACK_CONT :      559 C |  TBLFM :                       147F C |
 TBLFM3 :                      14BF C |  TBLFM6 :                      14CF C |
 TBLLIST :                     142D C |  TBLPSG :                      143D C |
 TBLPSGN :                     146F C |  TBLPWM :                      14E1 C |
*TEST_MAINSPD :                   4 - | *TEST_WAVE :                  2AC74 C |
*TEST_WAVE_E :                39374 C |  TH :                      20000000 - |
 TICKCNT :                     1705 C |  TICKFLAG :                    1704 C |
 TICKSPSET :                   1703 C | *TIME :                    19:28:40 - |
*TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    493 C |  TRACK_OUT.CLRFE :              4A4 C |
 TRACK_OUT.NOCHIP :             4C7 C |  TRANSFERROM :                  EC8 C |
 TRANSFERROM.DOUBLE :           EE7 C |  TRANSFERROM.TRANSFER :         F0B C |
 TRANSFERROM.X68KLAST :         F29 C |  TRANSFERROM.X68KLOOP :         F15 C |
 TRANSFERROM.X68KLPWT :         F37 C |  TRANSFERROM.X68KNOCARRY :      F05 C |
 TRANSFERROM.X68KPWTLP :        F3C C |  TRKBLKS_0 :                   1B61 C |
 TRKBLKS_1 :                   1B79 C |  TRKBLKS_2 :                   1B91 C |
 TRKBUFF_0 :                   171D C |  TRKBUFF_1 :                   174D C |
 TRKBUFF_2 :                   177D C |  TRKCACH_0 :                   1E00 C |
 TRKCACH_1 :                   1E40 C |  TRKCACH_2 :                   1E80 C |
*TRKCACH_3 :                   1EC0 C |  TRKCHNL_0 :                   17AD C |
 TRKCHNL_1 :                   1835 C |  TRKCHNL_2 :                   18BD C |
 TRKHDRS_0 :                   1945 C |  TRKHDRS_1 :                   1981 C |
 TRKHDRS_2 :                   19BD C |  TRKINSD_0 :                   19F9 C |
 TRKINSD_1 :                   1A71 C |  TRKINSD_2 :                   1AE9 C |
 TRKLISTCACH :                 16B7 C |  TRKLISTPAGE :                   3E C |
*TRK_BANKBLK :                   16 - | *TRK_BANKHEAD :                  17 - |
*TRK_BANKINS :                   15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACHHALF :                   E - | *TRK_CACHINC :                    F - |
 TRK_CHNCACH :                   2E - |  TRK_CHNCBLK :                   28 - |
 TRK_CHNCHEAD :                  2A - |  TRK_CHNCINS :                   2C - |
 TRK_CHNLIST :                   26 - |  TRK_CURRBLK :                   12 - |
 TRK_INSTR :                      8 - |  TRK_MAXBLKS :                   1D - |
 TRK_MAXCHNLS :                  1C - |  TRK_MAXHDRS :                   1E - |
 TRK_MAXINS :                    1F - | *TRK_PANNING :                   13 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMCPATT :                  20 - |
 TRK_ROMPATT :                   23 - |  TRK_ROWPAUSE :                  10 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   11 - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    1CF C |  UPD_TRACK.DECROW :             265 C |
 UPD_TRACK.DECROW_E :           268 C |  UPD_TRACK.EFFECT_FILL :        3DB C |
 UPD_TRACK.EFF_A :              303 C |  UPD_TRACK.EFF_B :              315 C |
 UPD_TRACK.EFF_C :              32B C |  UPD_TRACK.EXIT :               259 C |
 UPD_TRACK.FIRST_FILL :         3E2 C |  UPD_TRACK.GRAB_RHEAD :         47F C |
 UPD_TRACK.HAS_NOTE :           270 C |  UPD_TRACK.INC_CPATT :          32E C |
 UPD_TRACK.NEXT_NOTE :          249 C |  UPD_TRACK.NO_EFF :             2CF C |
 UPD_TRACK.NO_GLBL :            40D C |  UPD_TRACK.NO_INS :             2B1 C |
 UPD_TRACK.NO_NOTE :            2A6 C |  UPD_TRACK.NO_VOL :             2BC C |
 UPD_TRACK.OLD_TYPE :           29A C |  UPD_TRACK.RAN_OUT :            33C C |
 UPD_TRACK.READ_TRACK :         1F0 C |  UPD_TRACK.ROW_ACTIVE :         242 C |
 UPD_TRACK.SET_TRACK :          366 C |  UPD_TRACK.SFXMD :              209 C |
 UPD_TRACK.TRACK_END :          3CA C |  UPD_TRACK.TRK_BUFFRS :         1D4 C |
 VARNULLVRAM :                  7FF - |  VARPRINTPAL :                    3 - |
 VARPRINTVRAM :                 580 - | *VBLK :                          80 - |
*VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_CLEAR :                  3E8 C | *VIDEO_CLEARSCREEN :            3E8 C |
 VIDEO_CLEARSCREEN.PNEXT :      460 C |  VIDEO_CLEARSCREEN.SNEXT :      44C C |
 VIDEO_CLEARSCREEN.XNEXT :      42C C |  VIDEO_CLEARSCREEN.YNEXT :      43C C |
*VIDEO_COPY :                   998 C |  VIDEO_COPY.DMAW :              9AC C |
 VIDEO_COPY.DMAWE :             A04 C | *VIDEO_DMABLAST :               ABE C |
 VIDEO_DMABLAST.END :           B0C C |  VIDEO_DMABLAST.EXIT :          B1A C |
 VIDEO_DMABLAST.NEXT :          AE6 C | *VIDEO_DMAMKENTRY :             8B0 C |
 VIDEO_DOPALFADE :              766 C |  VIDEO_DOPALFADE.ACTIVE :       782 C |
 VIDEO_DOPALFADE.FADE_DONE :    78A C |  VIDEO_DOPALFADE.FADE_IN :      78C C |
 VIDEO_DOPALFADE.FADE_LIST :    784 C |  VIDEO_DOPALFADE.FADE_OUT :     830 C |
 VIDEO_DOPALFADE.NO_BLU :       808 C |  VIDEO_DOPALFADE.NO_BLU_O :     88C C |
 VIDEO_DOPALFADE.NO_FNSH :      820 C |  VIDEO_DOPALFADE.NO_FNSH_O :    8A0 C |
 VIDEO_DOPALFADE.NO_GRN :       7E8 C |  VIDEO_DOPALFADE.NO_GRN_O :     874 C |
 VIDEO_DOPALFADE.NO_MOVE :      82E C |  VIDEO_DOPALFADE.NO_MOVE_O :    8AE C |
 VIDEO_DOPALFADE.NO_RED :       7C8 C |  VIDEO_DOPALFADE.NO_RED_O :     85C C |
 VIDEO_DOPALFADE.NXT_PAL :      7A6 C |  VIDEO_DOPALFADE.NXT_PAL_O :    844 C |
 VIDEO_FADEPAL :                738 C | *VIDEO_FADEPAL_MARS :           B20 C |
 VIDEO_FILL :                   922 C |  VIDEO_FILL.DMAW :              936 C |
 VIDEO_FILL.DMAWE :             980 C |  VIDEO_INIT :                   360 C |
 VIDEO_INIT.CLRRAM :            36A C | *VIDEO_INIT.EXIT :              394 C |
 VIDEO_INIT.LOOP :              386 C |  VIDEO_LOADART :                A1C C |
 VIDEO_LOADART.FROM_RAM :       AAA C |  VIDEO_LOADMAP :                46A C |
 VIDEO_LOADMAP.CONT :           490 C |  VIDEO_LOADMAP.NODBLE :         4AE C |
 VIDEO_LOADMAP.NONULL :         48E C |  VIDEO_LOADMAP.XLOOP :          480 C |
 VIDEO_LOADMAP.YLOOP :          476 C | *VIDEO_LOADMAP_VERT :           4C0 C |
 VIDEO_LOADMAP_VERT.CONT :      4F2 C |  VIDEO_LOADMAP_VERT.NODBLE :    512 C |
 VIDEO_LOADMAP_VERT.NONULL :    4F0 C | *VIDEO_LOADMAP_VERT.OUTDBL :    51C C |
 VIDEO_LOADMAP_VERT.XLOOP :     4CE C |  VIDEO_LOADMAP_VERT.YLOOP :     4DE C |
 VIDEO_LOADPAL :                742 C |  VIDEO_MARSPALFADE :            B22 C |
 VIDEO_MARS_GFXMODE :           B1C C | *VIDEO_MARS_WAITFRAME :         B1E C |
 VIDEO_PRINT :                  558 C |  VIDEO_PRINT.DONIBL :           672 C |
 VIDEO_PRINT.EXIT :             5E2 C |  VIDEO_PRINT.ISBYTE :           5AC C |
 VIDEO_PRINT.ISLONG :           5D0 C |  VIDEO_PRINT.ISWORD :           5BE C |
 VIDEO_PRINT.LNGLOOP :          662 C |  VIDEO_PRINT.LOOP :             56C C |
 VIDEO_PRINT.LOWR :             682 C |  VIDEO_PRINT.NEWJUMP :          566 C |
 VIDEO_PRINT.NEXT :             58E C |  VIDEO_PRINT.NEXTV :            5EC C |
 VIDEO_PRINT.NOTHING :          68E C |  VIDEO_PRINT.PUTTEXT :          580 C |
 VIDEO_PRINT.SPECIAL :          592 C |  VIDEO_PRINT.VBYTE :            61E C |
 VIDEO_PRINT.VLONG :            66A C |  VIDEO_PRINT.VWORD :            640 C |
 VIDEO_PRINTINIT :              52C C | *VIDEO_PRINTPAL :               546 C |
 VIDEO_RUNFADE :                726 C |  VIDEO_UPDATE :                 394 C |
*VIDEO_UPDATE.EXIT :            3B2 C |  VIDEO_UPDATE.LOOP :            3A6 C |
 VIDMD_PAL :                    746 C |  VIDMD_PAL.LOOP :               75E C |
 VID_PICKLAYER :                690 C |  VID_PICKLAYER.GOLYR :          6DA C |
 VID_PICKLAYER.NOWD :           6C4 C |  VID_PICKLAYER.PLAWND :         6B6 C |
 VID_PICKLAYER.THISSZ :         6FA C |  VID_PICKLAYER.THISSZJ :        722 C |
*VINTCLR :                       16 - | *VINTENBL :                      20 - |
 VINT_DEFAULT :                 FD4 C | *VIRQ_ON :                        8 - |
*VRESINTCLR :                    14 - |  WAVE_FLAGS :                  1702 C |
 WAVE_LEN :                    16FA C |  WAVE_LOOP :                   16FD C |
 WAVE_PITCH :                  1700 C |  WAVE_START :                  16F7 C |
 WAVFREQ_LIST :                12F9 C |  X68KSRCLSB :                    36 C |
 X68KSRCMID :                    37 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - |  Z80_BUS :                   A11100 - |
*Z80_CODE :                    1234 C | *Z80_CODE_END :                3134 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      83 C |
*Z80_RESET :                 A11200 - |  Z80_TOP :                     1234 C |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      80 - | *ZDRVMARSBLK :                   82 - |
*ZDRVROMBLK :                    81 - | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZSET_TESTME :                    0 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_VDPREG :                 20004100 - |

   1040 symbols
    365 unused symbols

 AS V1.42 Beta [Bld 118] - source file main.asm - page 3 - 7/20/2023 19:28:40


  defined macros:
  ---------------

ENDSTRUCT                             | ERREPORT                             
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPHEAD                             
ISO_FILE                              | ISO_SETFS                            
ORG                                   | REPORT                               
ROMPAD                                | STRUCT                               
VDP_SHOWME                            |

     19 macros

 AS V1.42 Beta [Bld 118] - source file main.asm - page 4 - 7/20/2023 19:28:40


  defined functions:
  ------------------

NOTZ80                                | CELL_VRAM                            
LOCATE                                | MAPSIZE                              

 AS V1.42 Beta [Bld 118] - source file main.asm - page 5 - 7/20/2023 19:28:40


  codepages:
  ----------

STANDARD (0 changed characters)


0.05 seconds assembly time

  10256 lines source file
  11113 lines incl. macro expansions
      3 passes
      0 errors
      0 warnings
